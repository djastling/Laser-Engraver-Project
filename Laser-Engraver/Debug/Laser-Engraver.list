
Laser-Engraver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010b50  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005d8  08010ce0  08010ce0  00011ce0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080112b8  080112b8  000131f8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080112b8  080112b8  000122b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080112c0  080112c0  000131f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080112c0  080112c0  000122c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080112c4  080112c4  000122c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f8  20000000  080112c8  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003eac  200001f8  080114c0  000131f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200040a4  080114c0  000140a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000131f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000225e2  00000000  00000000  00013228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004899  00000000  00000000  0003580a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d90  00000000  00000000  0003a0a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000016fa  00000000  00000000  0003be38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00006c79  00000000  00000000  0003d532  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002458c  00000000  00000000  000441ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00103b04  00000000  00000000  00068737  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0016c23b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000090a8  00000000  00000000  0016c280  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  00175328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f8 	.word	0x200001f8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08010cc8 	.word	0x08010cc8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001fc 	.word	0x200001fc
 80001cc:	08010cc8 	.word	0x08010cc8

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9be 	b.w	800103c <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	@ (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	468e      	mov	lr, r1
 8000d4c:	4604      	mov	r4, r0
 8000d4e:	4688      	mov	r8, r1
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d14a      	bne.n	8000dea <__udivmoddi4+0xa6>
 8000d54:	428a      	cmp	r2, r1
 8000d56:	4617      	mov	r7, r2
 8000d58:	d962      	bls.n	8000e20 <__udivmoddi4+0xdc>
 8000d5a:	fab2 f682 	clz	r6, r2
 8000d5e:	b14e      	cbz	r6, 8000d74 <__udivmoddi4+0x30>
 8000d60:	f1c6 0320 	rsb	r3, r6, #32
 8000d64:	fa01 f806 	lsl.w	r8, r1, r6
 8000d68:	fa20 f303 	lsr.w	r3, r0, r3
 8000d6c:	40b7      	lsls	r7, r6
 8000d6e:	ea43 0808 	orr.w	r8, r3, r8
 8000d72:	40b4      	lsls	r4, r6
 8000d74:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d78:	fa1f fc87 	uxth.w	ip, r7
 8000d7c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d80:	0c23      	lsrs	r3, r4, #16
 8000d82:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d86:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d8a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d8e:	429a      	cmp	r2, r3
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0x62>
 8000d92:	18fb      	adds	r3, r7, r3
 8000d94:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d98:	f080 80ea 	bcs.w	8000f70 <__udivmoddi4+0x22c>
 8000d9c:	429a      	cmp	r2, r3
 8000d9e:	f240 80e7 	bls.w	8000f70 <__udivmoddi4+0x22c>
 8000da2:	3902      	subs	r1, #2
 8000da4:	443b      	add	r3, r7
 8000da6:	1a9a      	subs	r2, r3, r2
 8000da8:	b2a3      	uxth	r3, r4
 8000daa:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dae:	fb0e 2210 	mls	r2, lr, r0, r2
 8000db2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000db6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000dba:	459c      	cmp	ip, r3
 8000dbc:	d909      	bls.n	8000dd2 <__udivmoddi4+0x8e>
 8000dbe:	18fb      	adds	r3, r7, r3
 8000dc0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dc4:	f080 80d6 	bcs.w	8000f74 <__udivmoddi4+0x230>
 8000dc8:	459c      	cmp	ip, r3
 8000dca:	f240 80d3 	bls.w	8000f74 <__udivmoddi4+0x230>
 8000dce:	443b      	add	r3, r7
 8000dd0:	3802      	subs	r0, #2
 8000dd2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dd6:	eba3 030c 	sub.w	r3, r3, ip
 8000dda:	2100      	movs	r1, #0
 8000ddc:	b11d      	cbz	r5, 8000de6 <__udivmoddi4+0xa2>
 8000dde:	40f3      	lsrs	r3, r6
 8000de0:	2200      	movs	r2, #0
 8000de2:	e9c5 3200 	strd	r3, r2, [r5]
 8000de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dea:	428b      	cmp	r3, r1
 8000dec:	d905      	bls.n	8000dfa <__udivmoddi4+0xb6>
 8000dee:	b10d      	cbz	r5, 8000df4 <__udivmoddi4+0xb0>
 8000df0:	e9c5 0100 	strd	r0, r1, [r5]
 8000df4:	2100      	movs	r1, #0
 8000df6:	4608      	mov	r0, r1
 8000df8:	e7f5      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000dfa:	fab3 f183 	clz	r1, r3
 8000dfe:	2900      	cmp	r1, #0
 8000e00:	d146      	bne.n	8000e90 <__udivmoddi4+0x14c>
 8000e02:	4573      	cmp	r3, lr
 8000e04:	d302      	bcc.n	8000e0c <__udivmoddi4+0xc8>
 8000e06:	4282      	cmp	r2, r0
 8000e08:	f200 8105 	bhi.w	8001016 <__udivmoddi4+0x2d2>
 8000e0c:	1a84      	subs	r4, r0, r2
 8000e0e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e12:	2001      	movs	r0, #1
 8000e14:	4690      	mov	r8, r2
 8000e16:	2d00      	cmp	r5, #0
 8000e18:	d0e5      	beq.n	8000de6 <__udivmoddi4+0xa2>
 8000e1a:	e9c5 4800 	strd	r4, r8, [r5]
 8000e1e:	e7e2      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000e20:	2a00      	cmp	r2, #0
 8000e22:	f000 8090 	beq.w	8000f46 <__udivmoddi4+0x202>
 8000e26:	fab2 f682 	clz	r6, r2
 8000e2a:	2e00      	cmp	r6, #0
 8000e2c:	f040 80a4 	bne.w	8000f78 <__udivmoddi4+0x234>
 8000e30:	1a8a      	subs	r2, r1, r2
 8000e32:	0c03      	lsrs	r3, r0, #16
 8000e34:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e38:	b280      	uxth	r0, r0
 8000e3a:	b2bc      	uxth	r4, r7
 8000e3c:	2101      	movs	r1, #1
 8000e3e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e42:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e4a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e4e:	429a      	cmp	r2, r3
 8000e50:	d907      	bls.n	8000e62 <__udivmoddi4+0x11e>
 8000e52:	18fb      	adds	r3, r7, r3
 8000e54:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e58:	d202      	bcs.n	8000e60 <__udivmoddi4+0x11c>
 8000e5a:	429a      	cmp	r2, r3
 8000e5c:	f200 80e0 	bhi.w	8001020 <__udivmoddi4+0x2dc>
 8000e60:	46c4      	mov	ip, r8
 8000e62:	1a9b      	subs	r3, r3, r2
 8000e64:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e68:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e6c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e70:	fb02 f404 	mul.w	r4, r2, r4
 8000e74:	429c      	cmp	r4, r3
 8000e76:	d907      	bls.n	8000e88 <__udivmoddi4+0x144>
 8000e78:	18fb      	adds	r3, r7, r3
 8000e7a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e7e:	d202      	bcs.n	8000e86 <__udivmoddi4+0x142>
 8000e80:	429c      	cmp	r4, r3
 8000e82:	f200 80ca 	bhi.w	800101a <__udivmoddi4+0x2d6>
 8000e86:	4602      	mov	r2, r0
 8000e88:	1b1b      	subs	r3, r3, r4
 8000e8a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e8e:	e7a5      	b.n	8000ddc <__udivmoddi4+0x98>
 8000e90:	f1c1 0620 	rsb	r6, r1, #32
 8000e94:	408b      	lsls	r3, r1
 8000e96:	fa22 f706 	lsr.w	r7, r2, r6
 8000e9a:	431f      	orrs	r7, r3
 8000e9c:	fa0e f401 	lsl.w	r4, lr, r1
 8000ea0:	fa20 f306 	lsr.w	r3, r0, r6
 8000ea4:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ea8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000eac:	4323      	orrs	r3, r4
 8000eae:	fa00 f801 	lsl.w	r8, r0, r1
 8000eb2:	fa1f fc87 	uxth.w	ip, r7
 8000eb6:	fbbe f0f9 	udiv	r0, lr, r9
 8000eba:	0c1c      	lsrs	r4, r3, #16
 8000ebc:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ec0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ec4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ec8:	45a6      	cmp	lr, r4
 8000eca:	fa02 f201 	lsl.w	r2, r2, r1
 8000ece:	d909      	bls.n	8000ee4 <__udivmoddi4+0x1a0>
 8000ed0:	193c      	adds	r4, r7, r4
 8000ed2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000ed6:	f080 809c 	bcs.w	8001012 <__udivmoddi4+0x2ce>
 8000eda:	45a6      	cmp	lr, r4
 8000edc:	f240 8099 	bls.w	8001012 <__udivmoddi4+0x2ce>
 8000ee0:	3802      	subs	r0, #2
 8000ee2:	443c      	add	r4, r7
 8000ee4:	eba4 040e 	sub.w	r4, r4, lr
 8000ee8:	fa1f fe83 	uxth.w	lr, r3
 8000eec:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ef0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ef4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ef8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000efc:	45a4      	cmp	ip, r4
 8000efe:	d908      	bls.n	8000f12 <__udivmoddi4+0x1ce>
 8000f00:	193c      	adds	r4, r7, r4
 8000f02:	f103 3eff 	add.w	lr, r3, #4294967295
 8000f06:	f080 8082 	bcs.w	800100e <__udivmoddi4+0x2ca>
 8000f0a:	45a4      	cmp	ip, r4
 8000f0c:	d97f      	bls.n	800100e <__udivmoddi4+0x2ca>
 8000f0e:	3b02      	subs	r3, #2
 8000f10:	443c      	add	r4, r7
 8000f12:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f16:	eba4 040c 	sub.w	r4, r4, ip
 8000f1a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f1e:	4564      	cmp	r4, ip
 8000f20:	4673      	mov	r3, lr
 8000f22:	46e1      	mov	r9, ip
 8000f24:	d362      	bcc.n	8000fec <__udivmoddi4+0x2a8>
 8000f26:	d05f      	beq.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f28:	b15d      	cbz	r5, 8000f42 <__udivmoddi4+0x1fe>
 8000f2a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f2e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f32:	fa04 f606 	lsl.w	r6, r4, r6
 8000f36:	fa22 f301 	lsr.w	r3, r2, r1
 8000f3a:	431e      	orrs	r6, r3
 8000f3c:	40cc      	lsrs	r4, r1
 8000f3e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f42:	2100      	movs	r1, #0
 8000f44:	e74f      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000f46:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f4a:	0c01      	lsrs	r1, r0, #16
 8000f4c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f50:	b280      	uxth	r0, r0
 8000f52:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f56:	463b      	mov	r3, r7
 8000f58:	4638      	mov	r0, r7
 8000f5a:	463c      	mov	r4, r7
 8000f5c:	46b8      	mov	r8, r7
 8000f5e:	46be      	mov	lr, r7
 8000f60:	2620      	movs	r6, #32
 8000f62:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f66:	eba2 0208 	sub.w	r2, r2, r8
 8000f6a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f6e:	e766      	b.n	8000e3e <__udivmoddi4+0xfa>
 8000f70:	4601      	mov	r1, r0
 8000f72:	e718      	b.n	8000da6 <__udivmoddi4+0x62>
 8000f74:	4610      	mov	r0, r2
 8000f76:	e72c      	b.n	8000dd2 <__udivmoddi4+0x8e>
 8000f78:	f1c6 0220 	rsb	r2, r6, #32
 8000f7c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f80:	40b7      	lsls	r7, r6
 8000f82:	40b1      	lsls	r1, r6
 8000f84:	fa20 f202 	lsr.w	r2, r0, r2
 8000f88:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f8c:	430a      	orrs	r2, r1
 8000f8e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f92:	b2bc      	uxth	r4, r7
 8000f94:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f98:	0c11      	lsrs	r1, r2, #16
 8000f9a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f9e:	fb08 f904 	mul.w	r9, r8, r4
 8000fa2:	40b0      	lsls	r0, r6
 8000fa4:	4589      	cmp	r9, r1
 8000fa6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000faa:	b280      	uxth	r0, r0
 8000fac:	d93e      	bls.n	800102c <__udivmoddi4+0x2e8>
 8000fae:	1879      	adds	r1, r7, r1
 8000fb0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000fb4:	d201      	bcs.n	8000fba <__udivmoddi4+0x276>
 8000fb6:	4589      	cmp	r9, r1
 8000fb8:	d81f      	bhi.n	8000ffa <__udivmoddi4+0x2b6>
 8000fba:	eba1 0109 	sub.w	r1, r1, r9
 8000fbe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fc2:	fb09 f804 	mul.w	r8, r9, r4
 8000fc6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fca:	b292      	uxth	r2, r2
 8000fcc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fd0:	4542      	cmp	r2, r8
 8000fd2:	d229      	bcs.n	8001028 <__udivmoddi4+0x2e4>
 8000fd4:	18ba      	adds	r2, r7, r2
 8000fd6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000fda:	d2c4      	bcs.n	8000f66 <__udivmoddi4+0x222>
 8000fdc:	4542      	cmp	r2, r8
 8000fde:	d2c2      	bcs.n	8000f66 <__udivmoddi4+0x222>
 8000fe0:	f1a9 0102 	sub.w	r1, r9, #2
 8000fe4:	443a      	add	r2, r7
 8000fe6:	e7be      	b.n	8000f66 <__udivmoddi4+0x222>
 8000fe8:	45f0      	cmp	r8, lr
 8000fea:	d29d      	bcs.n	8000f28 <__udivmoddi4+0x1e4>
 8000fec:	ebbe 0302 	subs.w	r3, lr, r2
 8000ff0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ff4:	3801      	subs	r0, #1
 8000ff6:	46e1      	mov	r9, ip
 8000ff8:	e796      	b.n	8000f28 <__udivmoddi4+0x1e4>
 8000ffa:	eba7 0909 	sub.w	r9, r7, r9
 8000ffe:	4449      	add	r1, r9
 8001000:	f1a8 0c02 	sub.w	ip, r8, #2
 8001004:	fbb1 f9fe 	udiv	r9, r1, lr
 8001008:	fb09 f804 	mul.w	r8, r9, r4
 800100c:	e7db      	b.n	8000fc6 <__udivmoddi4+0x282>
 800100e:	4673      	mov	r3, lr
 8001010:	e77f      	b.n	8000f12 <__udivmoddi4+0x1ce>
 8001012:	4650      	mov	r0, sl
 8001014:	e766      	b.n	8000ee4 <__udivmoddi4+0x1a0>
 8001016:	4608      	mov	r0, r1
 8001018:	e6fd      	b.n	8000e16 <__udivmoddi4+0xd2>
 800101a:	443b      	add	r3, r7
 800101c:	3a02      	subs	r2, #2
 800101e:	e733      	b.n	8000e88 <__udivmoddi4+0x144>
 8001020:	f1ac 0c02 	sub.w	ip, ip, #2
 8001024:	443b      	add	r3, r7
 8001026:	e71c      	b.n	8000e62 <__udivmoddi4+0x11e>
 8001028:	4649      	mov	r1, r9
 800102a:	e79c      	b.n	8000f66 <__udivmoddi4+0x222>
 800102c:	eba1 0109 	sub.w	r1, r1, r9
 8001030:	46c4      	mov	ip, r8
 8001032:	fbb1 f9fe 	udiv	r9, r1, lr
 8001036:	fb09 f804 	mul.w	r8, r9, r4
 800103a:	e7c4      	b.n	8000fc6 <__udivmoddi4+0x282>

0800103c <__aeabi_idiv0>:
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop

08001040 <myprintf>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void myprintf(const char *fmt, ...)	// Function to print over UART nicely
{
 8001040:	b40f      	push	{r0, r1, r2, r3}
 8001042:	b580      	push	{r7, lr}
 8001044:	b082      	sub	sp, #8
 8001046:	af00      	add	r7, sp, #0
	static char buffer[256];
	va_list args;
	va_start(args, fmt);
 8001048:	f107 0314 	add.w	r3, r7, #20
 800104c:	603b      	str	r3, [r7, #0]
	vsnprintf(buffer, sizeof(buffer), fmt, args);
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	693a      	ldr	r2, [r7, #16]
 8001052:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001056:	480b      	ldr	r0, [pc, #44]	@ (8001084 <myprintf+0x44>)
 8001058:	f00d fc36 	bl	800e8c8 <vsniprintf>
	va_end(args);

	int len = strlen(buffer);
 800105c:	4809      	ldr	r0, [pc, #36]	@ (8001084 <myprintf+0x44>)
 800105e:	f7ff f8c1 	bl	80001e4 <strlen>
 8001062:	4603      	mov	r3, r0
 8001064:	607b      	str	r3, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)buffer, len, -1);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	b29a      	uxth	r2, r3
 800106a:	f04f 33ff 	mov.w	r3, #4294967295
 800106e:	4905      	ldr	r1, [pc, #20]	@ (8001084 <myprintf+0x44>)
 8001070:	4805      	ldr	r0, [pc, #20]	@ (8001088 <myprintf+0x48>)
 8001072:	f005 fa07 	bl	8006484 <HAL_UART_Transmit>

}
 8001076:	bf00      	nop
 8001078:	3708      	adds	r7, #8
 800107a:	46bd      	mov	sp, r7
 800107c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001080:	b004      	add	sp, #16
 8001082:	4770      	bx	lr
 8001084:	200008c4 	.word	0x200008c4
 8001088:	200003a8 	.word	0x200003a8

0800108c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001090:	f001 fa86 	bl	80025a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001094:	f000 f88a 	bl	80011ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001098:	f000 fa46 	bl	8001528 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800109c:	f000 fa14 	bl	80014c8 <MX_USART2_UART_Init>
  MX_TIM16_Init();
 80010a0:	f000 f9c2 	bl	8001428 <MX_TIM16_Init>
  MX_TIM17_Init();
 80010a4:	f000 f9e8 	bl	8001478 <MX_TIM17_Init>
  MX_SPI1_Init();
 80010a8:	f000 f8d2 	bl	8001250 <MX_SPI1_Init>
  MX_FATFS_Init();
 80010ac:	f005 ff48 	bl	8006f40 <MX_FATFS_Init>
  MX_TIM2_Init();
 80010b0:	f000 f90c 	bl	80012cc <MX_TIM2_Init>
  MX_TIM7_Init();
 80010b4:	f000 f982 	bl	80013bc <MX_TIM7_Init>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80010b8:	f008 ff82 	bl	8009fc0 <osKernelInitialize>

  /* USER CODE BEGIN RTOS_MUTEX */

  //Open the file system
  fres = f_mount(&FatFs, "", 1); //1=mount now
 80010bc:	2201      	movs	r2, #1
 80010be:	4929      	ldr	r1, [pc, #164]	@ (8001164 <main+0xd8>)
 80010c0:	4829      	ldr	r0, [pc, #164]	@ (8001168 <main+0xdc>)
 80010c2:	f008 fa0d 	bl	80094e0 <f_mount>
 80010c6:	4603      	mov	r3, r0
 80010c8:	461a      	mov	r2, r3
 80010ca:	4b28      	ldr	r3, [pc, #160]	@ (800116c <main+0xe0>)
 80010cc:	701a      	strb	r2, [r3, #0]
  if (fres != FR_OK) {
 80010ce:	4b27      	ldr	r3, [pc, #156]	@ (800116c <main+0xe0>)
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d007      	beq.n	80010e6 <main+0x5a>
	myprintf("f_mount error (%i)\r\n", fres);
 80010d6:	4b25      	ldr	r3, [pc, #148]	@ (800116c <main+0xe0>)
 80010d8:	781b      	ldrb	r3, [r3, #0]
 80010da:	4619      	mov	r1, r3
 80010dc:	4824      	ldr	r0, [pc, #144]	@ (8001170 <main+0xe4>)
 80010de:	f7ff ffaf 	bl	8001040 <myprintf>
	while(1);
 80010e2:	bf00      	nop
 80010e4:	e7fd      	b.n	80010e2 <main+0x56>
  }

  fres = f_open(&fil, "test.txt", FA_READ);
 80010e6:	2201      	movs	r2, #1
 80010e8:	4922      	ldr	r1, [pc, #136]	@ (8001174 <main+0xe8>)
 80010ea:	4823      	ldr	r0, [pc, #140]	@ (8001178 <main+0xec>)
 80010ec:	f008 fa5c 	bl	80095a8 <f_open>
 80010f0:	4603      	mov	r3, r0
 80010f2:	461a      	mov	r2, r3
 80010f4:	4b1d      	ldr	r3, [pc, #116]	@ (800116c <main+0xe0>)
 80010f6:	701a      	strb	r2, [r3, #0]
	  if (fres != FR_OK) {
 80010f8:	4b1c      	ldr	r3, [pc, #112]	@ (800116c <main+0xe0>)
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d007      	beq.n	8001110 <main+0x84>
		myprintf("f_open error (%i)\r\n", fres);
 8001100:	4b1a      	ldr	r3, [pc, #104]	@ (800116c <main+0xe0>)
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	4619      	mov	r1, r3
 8001106:	481d      	ldr	r0, [pc, #116]	@ (800117c <main+0xf0>)
 8001108:	f7ff ff9a 	bl	8001040 <myprintf>
		while(1);
 800110c:	bf00      	nop
 800110e:	e7fd      	b.n	800110c <main+0x80>
	  }

  HAL_Delay(100);	// Delay to allow the SD card to settle
 8001110:	2064      	movs	r0, #100	@ 0x64
 8001112:	f001 fa85 	bl	8002620 <HAL_Delay>

  HAL_TIM_Base_Start_IT(&htim2);	// Starts the timer for PWM
 8001116:	481a      	ldr	r0, [pc, #104]	@ (8001180 <main+0xf4>)
 8001118:	f003 feda 	bl	8004ed0 <HAL_TIM_Base_Start_IT>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of running */
  runningHandle = osSemaphoreNew(1, 1, &running_attributes);
 800111c:	4a19      	ldr	r2, [pc, #100]	@ (8001184 <main+0xf8>)
 800111e:	2101      	movs	r1, #1
 8001120:	2001      	movs	r0, #1
 8001122:	f009 f844 	bl	800a1ae <osSemaphoreNew>
 8001126:	4603      	mov	r3, r0
 8001128:	4a17      	ldr	r2, [pc, #92]	@ (8001188 <main+0xfc>)
 800112a:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of valuesQueue */
  valuesQueueHandle = osMessageQueueNew (100, 20, &valuesQueue_attributes);
 800112c:	4a17      	ldr	r2, [pc, #92]	@ (800118c <main+0x100>)
 800112e:	2114      	movs	r1, #20
 8001130:	2064      	movs	r0, #100	@ 0x64
 8001132:	f009 f99f 	bl	800a474 <osMessageQueueNew>
 8001136:	4603      	mov	r3, r0
 8001138:	4a15      	ldr	r2, [pc, #84]	@ (8001190 <main+0x104>)
 800113a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of LaserEngrave */
  LaserEngraveHandle = osThreadNew(LaserEngraveTask, NULL, &LaserEngrave_attributes);
 800113c:	4a15      	ldr	r2, [pc, #84]	@ (8001194 <main+0x108>)
 800113e:	2100      	movs	r1, #0
 8001140:	4815      	ldr	r0, [pc, #84]	@ (8001198 <main+0x10c>)
 8001142:	f008 ff87 	bl	800a054 <osThreadNew>
 8001146:	4603      	mov	r3, r0
 8001148:	4a14      	ldr	r2, [pc, #80]	@ (800119c <main+0x110>)
 800114a:	6013      	str	r3, [r2, #0]

  /* creation of LoadInstruction */
  LoadInstructionHandle = osThreadNew(StartLoadInstruction, NULL, &LoadInstruction_attributes);
 800114c:	4a14      	ldr	r2, [pc, #80]	@ (80011a0 <main+0x114>)
 800114e:	2100      	movs	r1, #0
 8001150:	4814      	ldr	r0, [pc, #80]	@ (80011a4 <main+0x118>)
 8001152:	f008 ff7f 	bl	800a054 <osThreadNew>
 8001156:	4603      	mov	r3, r0
 8001158:	4a13      	ldr	r2, [pc, #76]	@ (80011a8 <main+0x11c>)
 800115a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800115c:	f008 ff54 	bl	800a008 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001160:	bf00      	nop
 8001162:	e7fd      	b.n	8001160 <main+0xd4>
 8001164:	08010d14 	.word	0x08010d14
 8001168:	20000460 	.word	0x20000460
 800116c:	2000045c 	.word	0x2000045c
 8001170:	08010d18 	.word	0x08010d18
 8001174:	08010d30 	.word	0x08010d30
 8001178:	20000694 	.word	0x20000694
 800117c:	08010d3c 	.word	0x08010d3c
 8001180:	20000278 	.word	0x20000278
 8001184:	08010e14 	.word	0x08010e14
 8001188:	2000043c 	.word	0x2000043c
 800118c:	08010dfc 	.word	0x08010dfc
 8001190:	20000438 	.word	0x20000438
 8001194:	08010db4 	.word	0x08010db4
 8001198:	08001cfd 	.word	0x08001cfd
 800119c:	20000430 	.word	0x20000430
 80011a0:	08010dd8 	.word	0x08010dd8
 80011a4:	08001d71 	.word	0x08001d71
 80011a8:	20000434 	.word	0x20000434

080011ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b096      	sub	sp, #88	@ 0x58
 80011b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011b2:	f107 0314 	add.w	r3, r7, #20
 80011b6:	2244      	movs	r2, #68	@ 0x44
 80011b8:	2100      	movs	r1, #0
 80011ba:	4618      	mov	r0, r3
 80011bc:	f00d fb92 	bl	800e8e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011c0:	463b      	mov	r3, r7
 80011c2:	2200      	movs	r2, #0
 80011c4:	601a      	str	r2, [r3, #0]
 80011c6:	605a      	str	r2, [r3, #4]
 80011c8:	609a      	str	r2, [r3, #8]
 80011ca:	60da      	str	r2, [r3, #12]
 80011cc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80011ce:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80011d2:	f001 fd45 	bl	8002c60 <HAL_PWREx_ControlVoltageScaling>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d001      	beq.n	80011e0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80011dc:	f000 feb4 	bl	8001f48 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011e0:	2302      	movs	r3, #2
 80011e2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011e4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80011e8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011ea:	2310      	movs	r3, #16
 80011ec:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011ee:	2302      	movs	r3, #2
 80011f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011f2:	2302      	movs	r3, #2
 80011f4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80011f6:	2301      	movs	r3, #1
 80011f8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80011fa:	230a      	movs	r3, #10
 80011fc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80011fe:	2307      	movs	r3, #7
 8001200:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001202:	2302      	movs	r3, #2
 8001204:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001206:	2302      	movs	r3, #2
 8001208:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800120a:	f107 0314 	add.w	r3, r7, #20
 800120e:	4618      	mov	r0, r3
 8001210:	f001 fd7c 	bl	8002d0c <HAL_RCC_OscConfig>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800121a:	f000 fe95 	bl	8001f48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800121e:	230f      	movs	r3, #15
 8001220:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001222:	2303      	movs	r3, #3
 8001224:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001226:	2300      	movs	r3, #0
 8001228:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800122a:	2300      	movs	r3, #0
 800122c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800122e:	2300      	movs	r3, #0
 8001230:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001232:	463b      	mov	r3, r7
 8001234:	2104      	movs	r1, #4
 8001236:	4618      	mov	r0, r3
 8001238:	f002 f944 	bl	80034c4 <HAL_RCC_ClockConfig>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d001      	beq.n	8001246 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001242:	f000 fe81 	bl	8001f48 <Error_Handler>
  }
}
 8001246:	bf00      	nop
 8001248:	3758      	adds	r7, #88	@ 0x58
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
	...

08001250 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001254:	4b1b      	ldr	r3, [pc, #108]	@ (80012c4 <MX_SPI1_Init+0x74>)
 8001256:	4a1c      	ldr	r2, [pc, #112]	@ (80012c8 <MX_SPI1_Init+0x78>)
 8001258:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800125a:	4b1a      	ldr	r3, [pc, #104]	@ (80012c4 <MX_SPI1_Init+0x74>)
 800125c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001260:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001262:	4b18      	ldr	r3, [pc, #96]	@ (80012c4 <MX_SPI1_Init+0x74>)
 8001264:	2200      	movs	r2, #0
 8001266:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001268:	4b16      	ldr	r3, [pc, #88]	@ (80012c4 <MX_SPI1_Init+0x74>)
 800126a:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800126e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001270:	4b14      	ldr	r3, [pc, #80]	@ (80012c4 <MX_SPI1_Init+0x74>)
 8001272:	2202      	movs	r2, #2
 8001274:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001276:	4b13      	ldr	r3, [pc, #76]	@ (80012c4 <MX_SPI1_Init+0x74>)
 8001278:	2201      	movs	r2, #1
 800127a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800127c:	4b11      	ldr	r3, [pc, #68]	@ (80012c4 <MX_SPI1_Init+0x74>)
 800127e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001282:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001284:	4b0f      	ldr	r3, [pc, #60]	@ (80012c4 <MX_SPI1_Init+0x74>)
 8001286:	2210      	movs	r2, #16
 8001288:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800128a:	4b0e      	ldr	r3, [pc, #56]	@ (80012c4 <MX_SPI1_Init+0x74>)
 800128c:	2200      	movs	r2, #0
 800128e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001290:	4b0c      	ldr	r3, [pc, #48]	@ (80012c4 <MX_SPI1_Init+0x74>)
 8001292:	2200      	movs	r2, #0
 8001294:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001296:	4b0b      	ldr	r3, [pc, #44]	@ (80012c4 <MX_SPI1_Init+0x74>)
 8001298:	2200      	movs	r2, #0
 800129a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 800129c:	4b09      	ldr	r3, [pc, #36]	@ (80012c4 <MX_SPI1_Init+0x74>)
 800129e:	2207      	movs	r2, #7
 80012a0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80012a2:	4b08      	ldr	r3, [pc, #32]	@ (80012c4 <MX_SPI1_Init+0x74>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80012a8:	4b06      	ldr	r3, [pc, #24]	@ (80012c4 <MX_SPI1_Init+0x74>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80012ae:	4805      	ldr	r0, [pc, #20]	@ (80012c4 <MX_SPI1_Init+0x74>)
 80012b0:	f003 f81a 	bl	80042e8 <HAL_SPI_Init>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d001      	beq.n	80012be <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80012ba:	f000 fe45 	bl	8001f48 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80012be:	bf00      	nop
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	20000214 	.word	0x20000214
 80012c8:	40013000 	.word	0x40013000

080012cc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b08e      	sub	sp, #56	@ 0x38
 80012d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012d2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80012d6:	2200      	movs	r2, #0
 80012d8:	601a      	str	r2, [r3, #0]
 80012da:	605a      	str	r2, [r3, #4]
 80012dc:	609a      	str	r2, [r3, #8]
 80012de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012e0:	f107 031c 	add.w	r3, r7, #28
 80012e4:	2200      	movs	r2, #0
 80012e6:	601a      	str	r2, [r3, #0]
 80012e8:	605a      	str	r2, [r3, #4]
 80012ea:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012ec:	463b      	mov	r3, r7
 80012ee:	2200      	movs	r2, #0
 80012f0:	601a      	str	r2, [r3, #0]
 80012f2:	605a      	str	r2, [r3, #4]
 80012f4:	609a      	str	r2, [r3, #8]
 80012f6:	60da      	str	r2, [r3, #12]
 80012f8:	611a      	str	r2, [r3, #16]
 80012fa:	615a      	str	r2, [r3, #20]
 80012fc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80012fe:	4b2d      	ldr	r3, [pc, #180]	@ (80013b4 <MX_TIM2_Init+0xe8>)
 8001300:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001304:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001306:	4b2b      	ldr	r3, [pc, #172]	@ (80013b4 <MX_TIM2_Init+0xe8>)
 8001308:	2200      	movs	r2, #0
 800130a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800130c:	4b29      	ldr	r3, [pc, #164]	@ (80013b4 <MX_TIM2_Init+0xe8>)
 800130e:	2200      	movs	r2, #0
 8001310:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 79999;
 8001312:	4b28      	ldr	r3, [pc, #160]	@ (80013b4 <MX_TIM2_Init+0xe8>)
 8001314:	4a28      	ldr	r2, [pc, #160]	@ (80013b8 <MX_TIM2_Init+0xec>)
 8001316:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001318:	4b26      	ldr	r3, [pc, #152]	@ (80013b4 <MX_TIM2_Init+0xe8>)
 800131a:	2200      	movs	r2, #0
 800131c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800131e:	4b25      	ldr	r3, [pc, #148]	@ (80013b4 <MX_TIM2_Init+0xe8>)
 8001320:	2280      	movs	r2, #128	@ 0x80
 8001322:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001324:	4823      	ldr	r0, [pc, #140]	@ (80013b4 <MX_TIM2_Init+0xe8>)
 8001326:	f003 fd7b 	bl	8004e20 <HAL_TIM_Base_Init>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d001      	beq.n	8001334 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001330:	f000 fe0a 	bl	8001f48 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001334:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001338:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800133a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800133e:	4619      	mov	r1, r3
 8001340:	481c      	ldr	r0, [pc, #112]	@ (80013b4 <MX_TIM2_Init+0xe8>)
 8001342:	f004 fa7d 	bl	8005840 <HAL_TIM_ConfigClockSource>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d001      	beq.n	8001350 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800134c:	f000 fdfc 	bl	8001f48 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001350:	4818      	ldr	r0, [pc, #96]	@ (80013b4 <MX_TIM2_Init+0xe8>)
 8001352:	f003 fe5c 	bl	800500e <HAL_TIM_PWM_Init>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d001      	beq.n	8001360 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800135c:	f000 fdf4 	bl	8001f48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001360:	2300      	movs	r3, #0
 8001362:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001364:	2300      	movs	r3, #0
 8001366:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001368:	f107 031c 	add.w	r3, r7, #28
 800136c:	4619      	mov	r1, r3
 800136e:	4811      	ldr	r0, [pc, #68]	@ (80013b4 <MX_TIM2_Init+0xe8>)
 8001370:	f004 ff94 	bl	800629c <HAL_TIMEx_MasterConfigSynchronization>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d001      	beq.n	800137e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800137a:	f000 fde5 	bl	8001f48 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800137e:	2360      	movs	r3, #96	@ 0x60
 8001380:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001382:	2300      	movs	r3, #0
 8001384:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001386:	2300      	movs	r3, #0
 8001388:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800138a:	2300      	movs	r3, #0
 800138c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800138e:	463b      	mov	r3, r7
 8001390:	2200      	movs	r2, #0
 8001392:	4619      	mov	r1, r3
 8001394:	4807      	ldr	r0, [pc, #28]	@ (80013b4 <MX_TIM2_Init+0xe8>)
 8001396:	f004 f93f 	bl	8005618 <HAL_TIM_PWM_ConfigChannel>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d001      	beq.n	80013a4 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80013a0:	f000 fdd2 	bl	8001f48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80013a4:	4803      	ldr	r0, [pc, #12]	@ (80013b4 <MX_TIM2_Init+0xe8>)
 80013a6:	f000 fea7 	bl	80020f8 <HAL_TIM_MspPostInit>

}
 80013aa:	bf00      	nop
 80013ac:	3738      	adds	r7, #56	@ 0x38
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	20000278 	.word	0x20000278
 80013b8:	0001387f 	.word	0x0001387f

080013bc <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b084      	sub	sp, #16
 80013c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013c2:	1d3b      	adds	r3, r7, #4
 80013c4:	2200      	movs	r2, #0
 80013c6:	601a      	str	r2, [r3, #0]
 80013c8:	605a      	str	r2, [r3, #4]
 80013ca:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80013cc:	4b14      	ldr	r3, [pc, #80]	@ (8001420 <MX_TIM7_Init+0x64>)
 80013ce:	4a15      	ldr	r2, [pc, #84]	@ (8001424 <MX_TIM7_Init+0x68>)
 80013d0:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 7;
 80013d2:	4b13      	ldr	r3, [pc, #76]	@ (8001420 <MX_TIM7_Init+0x64>)
 80013d4:	2207      	movs	r2, #7
 80013d6:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013d8:	4b11      	ldr	r3, [pc, #68]	@ (8001420 <MX_TIM7_Init+0x64>)
 80013da:	2200      	movs	r2, #0
 80013dc:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 80013de:	4b10      	ldr	r3, [pc, #64]	@ (8001420 <MX_TIM7_Init+0x64>)
 80013e0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80013e4:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013e6:	4b0e      	ldr	r3, [pc, #56]	@ (8001420 <MX_TIM7_Init+0x64>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80013ec:	480c      	ldr	r0, [pc, #48]	@ (8001420 <MX_TIM7_Init+0x64>)
 80013ee:	f003 fd17 	bl	8004e20 <HAL_TIM_Base_Init>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d001      	beq.n	80013fc <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 80013f8:	f000 fda6 	bl	8001f48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013fc:	2300      	movs	r3, #0
 80013fe:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001400:	2300      	movs	r3, #0
 8001402:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001404:	1d3b      	adds	r3, r7, #4
 8001406:	4619      	mov	r1, r3
 8001408:	4805      	ldr	r0, [pc, #20]	@ (8001420 <MX_TIM7_Init+0x64>)
 800140a:	f004 ff47 	bl	800629c <HAL_TIMEx_MasterConfigSynchronization>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d001      	beq.n	8001418 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8001414:	f000 fd98 	bl	8001f48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001418:	bf00      	nop
 800141a:	3710      	adds	r7, #16
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	200002c4 	.word	0x200002c4
 8001424:	40001400 	.word	0x40001400

08001428 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800142c:	4b10      	ldr	r3, [pc, #64]	@ (8001470 <MX_TIM16_Init+0x48>)
 800142e:	4a11      	ldr	r2, [pc, #68]	@ (8001474 <MX_TIM16_Init+0x4c>)
 8001430:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 1000;
 8001432:	4b0f      	ldr	r3, [pc, #60]	@ (8001470 <MX_TIM16_Init+0x48>)
 8001434:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001438:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800143a:	4b0d      	ldr	r3, [pc, #52]	@ (8001470 <MX_TIM16_Init+0x48>)
 800143c:	2200      	movs	r2, #0
 800143e:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 400;
 8001440:	4b0b      	ldr	r3, [pc, #44]	@ (8001470 <MX_TIM16_Init+0x48>)
 8001442:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8001446:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001448:	4b09      	ldr	r3, [pc, #36]	@ (8001470 <MX_TIM16_Init+0x48>)
 800144a:	2200      	movs	r2, #0
 800144c:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800144e:	4b08      	ldr	r3, [pc, #32]	@ (8001470 <MX_TIM16_Init+0x48>)
 8001450:	2200      	movs	r2, #0
 8001452:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001454:	4b06      	ldr	r3, [pc, #24]	@ (8001470 <MX_TIM16_Init+0x48>)
 8001456:	2200      	movs	r2, #0
 8001458:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800145a:	4805      	ldr	r0, [pc, #20]	@ (8001470 <MX_TIM16_Init+0x48>)
 800145c:	f003 fce0 	bl	8004e20 <HAL_TIM_Base_Init>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d001      	beq.n	800146a <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 8001466:	f000 fd6f 	bl	8001f48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 800146a:	bf00      	nop
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	20000310 	.word	0x20000310
 8001474:	40014400 	.word	0x40014400

08001478 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 800147c:	4b10      	ldr	r3, [pc, #64]	@ (80014c0 <MX_TIM17_Init+0x48>)
 800147e:	4a11      	ldr	r2, [pc, #68]	@ (80014c4 <MX_TIM17_Init+0x4c>)
 8001480:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 1000;
 8001482:	4b0f      	ldr	r3, [pc, #60]	@ (80014c0 <MX_TIM17_Init+0x48>)
 8001484:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001488:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 800148a:	4b0d      	ldr	r3, [pc, #52]	@ (80014c0 <MX_TIM17_Init+0x48>)
 800148c:	2200      	movs	r2, #0
 800148e:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 400;
 8001490:	4b0b      	ldr	r3, [pc, #44]	@ (80014c0 <MX_TIM17_Init+0x48>)
 8001492:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8001496:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001498:	4b09      	ldr	r3, [pc, #36]	@ (80014c0 <MX_TIM17_Init+0x48>)
 800149a:	2200      	movs	r2, #0
 800149c:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 800149e:	4b08      	ldr	r3, [pc, #32]	@ (80014c0 <MX_TIM17_Init+0x48>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014a4:	4b06      	ldr	r3, [pc, #24]	@ (80014c0 <MX_TIM17_Init+0x48>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80014aa:	4805      	ldr	r0, [pc, #20]	@ (80014c0 <MX_TIM17_Init+0x48>)
 80014ac:	f003 fcb8 	bl	8004e20 <HAL_TIM_Base_Init>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <MX_TIM17_Init+0x42>
  {
    Error_Handler();
 80014b6:	f000 fd47 	bl	8001f48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 80014ba:	bf00      	nop
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	2000035c 	.word	0x2000035c
 80014c4:	40014800 	.word	0x40014800

080014c8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80014cc:	4b14      	ldr	r3, [pc, #80]	@ (8001520 <MX_USART2_UART_Init+0x58>)
 80014ce:	4a15      	ldr	r2, [pc, #84]	@ (8001524 <MX_USART2_UART_Init+0x5c>)
 80014d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80014d2:	4b13      	ldr	r3, [pc, #76]	@ (8001520 <MX_USART2_UART_Init+0x58>)
 80014d4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80014d8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80014da:	4b11      	ldr	r3, [pc, #68]	@ (8001520 <MX_USART2_UART_Init+0x58>)
 80014dc:	2200      	movs	r2, #0
 80014de:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80014e0:	4b0f      	ldr	r3, [pc, #60]	@ (8001520 <MX_USART2_UART_Init+0x58>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80014e6:	4b0e      	ldr	r3, [pc, #56]	@ (8001520 <MX_USART2_UART_Init+0x58>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80014ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001520 <MX_USART2_UART_Init+0x58>)
 80014ee:	220c      	movs	r2, #12
 80014f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014f2:	4b0b      	ldr	r3, [pc, #44]	@ (8001520 <MX_USART2_UART_Init+0x58>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80014f8:	4b09      	ldr	r3, [pc, #36]	@ (8001520 <MX_USART2_UART_Init+0x58>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014fe:	4b08      	ldr	r3, [pc, #32]	@ (8001520 <MX_USART2_UART_Init+0x58>)
 8001500:	2200      	movs	r2, #0
 8001502:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001504:	4b06      	ldr	r3, [pc, #24]	@ (8001520 <MX_USART2_UART_Init+0x58>)
 8001506:	2200      	movs	r2, #0
 8001508:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800150a:	4805      	ldr	r0, [pc, #20]	@ (8001520 <MX_USART2_UART_Init+0x58>)
 800150c:	f004 ff6c 	bl	80063e8 <HAL_UART_Init>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001516:	f000 fd17 	bl	8001f48 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800151a:	bf00      	nop
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	200003a8 	.word	0x200003a8
 8001524:	40004400 	.word	0x40004400

08001528 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b08a      	sub	sp, #40	@ 0x28
 800152c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800152e:	f107 0314 	add.w	r3, r7, #20
 8001532:	2200      	movs	r2, #0
 8001534:	601a      	str	r2, [r3, #0]
 8001536:	605a      	str	r2, [r3, #4]
 8001538:	609a      	str	r2, [r3, #8]
 800153a:	60da      	str	r2, [r3, #12]
 800153c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800153e:	4b5b      	ldr	r3, [pc, #364]	@ (80016ac <MX_GPIO_Init+0x184>)
 8001540:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001542:	4a5a      	ldr	r2, [pc, #360]	@ (80016ac <MX_GPIO_Init+0x184>)
 8001544:	f043 0304 	orr.w	r3, r3, #4
 8001548:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800154a:	4b58      	ldr	r3, [pc, #352]	@ (80016ac <MX_GPIO_Init+0x184>)
 800154c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800154e:	f003 0304 	and.w	r3, r3, #4
 8001552:	613b      	str	r3, [r7, #16]
 8001554:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001556:	4b55      	ldr	r3, [pc, #340]	@ (80016ac <MX_GPIO_Init+0x184>)
 8001558:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800155a:	4a54      	ldr	r2, [pc, #336]	@ (80016ac <MX_GPIO_Init+0x184>)
 800155c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001560:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001562:	4b52      	ldr	r3, [pc, #328]	@ (80016ac <MX_GPIO_Init+0x184>)
 8001564:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001566:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800156a:	60fb      	str	r3, [r7, #12]
 800156c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800156e:	4b4f      	ldr	r3, [pc, #316]	@ (80016ac <MX_GPIO_Init+0x184>)
 8001570:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001572:	4a4e      	ldr	r2, [pc, #312]	@ (80016ac <MX_GPIO_Init+0x184>)
 8001574:	f043 0301 	orr.w	r3, r3, #1
 8001578:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800157a:	4b4c      	ldr	r3, [pc, #304]	@ (80016ac <MX_GPIO_Init+0x184>)
 800157c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800157e:	f003 0301 	and.w	r3, r3, #1
 8001582:	60bb      	str	r3, [r7, #8]
 8001584:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001586:	4b49      	ldr	r3, [pc, #292]	@ (80016ac <MX_GPIO_Init+0x184>)
 8001588:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800158a:	4a48      	ldr	r2, [pc, #288]	@ (80016ac <MX_GPIO_Init+0x184>)
 800158c:	f043 0302 	orr.w	r3, r3, #2
 8001590:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001592:	4b46      	ldr	r3, [pc, #280]	@ (80016ac <MX_GPIO_Init+0x184>)
 8001594:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001596:	f003 0302 	and.w	r3, r3, #2
 800159a:	607b      	str	r3, [r7, #4]
 800159c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, YPUL_Pin|XDIR_Pin|XEN_Pin, GPIO_PIN_RESET);
 800159e:	2200      	movs	r2, #0
 80015a0:	f44f 6186 	mov.w	r1, #1072	@ 0x430
 80015a4:	4842      	ldr	r0, [pc, #264]	@ (80016b0 <MX_GPIO_Init+0x188>)
 80015a6:	f001 fb03 	bl	8002bb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, YEN_Pin|YDIR_Pin|XPUL_Pin, GPIO_PIN_RESET);
 80015aa:	2200      	movs	r2, #0
 80015ac:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 80015b0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015b4:	f001 fafc 	bl	8002bb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 80015b8:	2201      	movs	r2, #1
 80015ba:	2140      	movs	r1, #64	@ 0x40
 80015bc:	483c      	ldr	r0, [pc, #240]	@ (80016b0 <MX_GPIO_Init+0x188>)
 80015be:	f001 faf7 	bl	8002bb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80015c2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80015c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80015c8:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80015cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ce:	2300      	movs	r3, #0
 80015d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80015d2:	f107 0314 	add.w	r3, r7, #20
 80015d6:	4619      	mov	r1, r3
 80015d8:	4836      	ldr	r0, [pc, #216]	@ (80016b4 <MX_GPIO_Init+0x18c>)
 80015da:	f001 f927 	bl	800282c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80015de:	2301      	movs	r3, #1
 80015e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015e2:	2300      	movs	r3, #0
 80015e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e6:	2300      	movs	r3, #0
 80015e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015ea:	f107 0314 	add.w	r3, r7, #20
 80015ee:	4619      	mov	r1, r3
 80015f0:	4830      	ldr	r0, [pc, #192]	@ (80016b4 <MX_GPIO_Init+0x18c>)
 80015f2:	f001 f91b 	bl	800282c <HAL_GPIO_Init>

  /*Configure GPIO pin : shutdownButton_Pin */
  GPIO_InitStruct.Pin = shutdownButton_Pin;
 80015f6:	2302      	movs	r3, #2
 80015f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015fa:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80015fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001600:	2300      	movs	r3, #0
 8001602:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(shutdownButton_GPIO_Port, &GPIO_InitStruct);
 8001604:	f107 0314 	add.w	r3, r7, #20
 8001608:	4619      	mov	r1, r3
 800160a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800160e:	f001 f90d 	bl	800282c <HAL_GPIO_Init>

  /*Configure GPIO pins : YPUL_Pin XDIR_Pin XEN_Pin */
  GPIO_InitStruct.Pin = YPUL_Pin|XDIR_Pin|XEN_Pin;
 8001612:	f44f 6386 	mov.w	r3, #1072	@ 0x430
 8001616:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001618:	2301      	movs	r3, #1
 800161a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161c:	2300      	movs	r3, #0
 800161e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001620:	2300      	movs	r3, #0
 8001622:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001624:	f107 0314 	add.w	r3, r7, #20
 8001628:	4619      	mov	r1, r3
 800162a:	4821      	ldr	r0, [pc, #132]	@ (80016b0 <MX_GPIO_Init+0x188>)
 800162c:	f001 f8fe 	bl	800282c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CD_Pin */
  GPIO_InitStruct.Pin = SPI1_CD_Pin;
 8001630:	2380      	movs	r3, #128	@ 0x80
 8001632:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001634:	2300      	movs	r3, #0
 8001636:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001638:	2301      	movs	r3, #1
 800163a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SPI1_CD_GPIO_Port, &GPIO_InitStruct);
 800163c:	f107 0314 	add.w	r3, r7, #20
 8001640:	4619      	mov	r1, r3
 8001642:	481c      	ldr	r0, [pc, #112]	@ (80016b4 <MX_GPIO_Init+0x18c>)
 8001644:	f001 f8f2 	bl	800282c <HAL_GPIO_Init>

  /*Configure GPIO pins : YEN_Pin YDIR_Pin XPUL_Pin */
  GPIO_InitStruct.Pin = YEN_Pin|YDIR_Pin|XPUL_Pin;
 8001648:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 800164c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800164e:	2301      	movs	r3, #1
 8001650:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001652:	2300      	movs	r3, #0
 8001654:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001656:	2300      	movs	r3, #0
 8001658:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800165a:	f107 0314 	add.w	r3, r7, #20
 800165e:	4619      	mov	r1, r3
 8001660:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001664:	f001 f8e2 	bl	800282c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8001668:	2340      	movs	r3, #64	@ 0x40
 800166a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800166c:	2301      	movs	r3, #1
 800166e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001670:	2301      	movs	r3, #1
 8001672:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001674:	2300      	movs	r3, #0
 8001676:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8001678:	f107 0314 	add.w	r3, r7, #20
 800167c:	4619      	mov	r1, r3
 800167e:	480c      	ldr	r0, [pc, #48]	@ (80016b0 <MX_GPIO_Init+0x188>)
 8001680:	f001 f8d4 	bl	800282c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8001684:	2200      	movs	r2, #0
 8001686:	2105      	movs	r1, #5
 8001688:	2007      	movs	r0, #7
 800168a:	f001 f8a5 	bl	80027d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800168e:	2007      	movs	r0, #7
 8001690:	f001 f8be 	bl	8002810 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001694:	2200      	movs	r2, #0
 8001696:	2105      	movs	r1, #5
 8001698:	2028      	movs	r0, #40	@ 0x28
 800169a:	f001 f89d 	bl	80027d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800169e:	2028      	movs	r0, #40	@ 0x28
 80016a0:	f001 f8b6 	bl	8002810 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 80016a4:	bf00      	nop
 80016a6:	3728      	adds	r7, #40	@ 0x28
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	40021000 	.word	0x40021000
 80016b0:	48000400 	.word	0x48000400
 80016b4:	48000800 	.word	0x48000800

080016b8 <HAL_GPIO_EXTI_Callback>:
	  HAL_TIM_Base_Start_IT(&htim16);
	  HAL_TIM_Base_Start_IT(&htim17);
}

// Interrupt Handler
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b082      	sub	sp, #8
 80016bc:	af00      	add	r7, sp, #0
 80016be:	4603      	mov	r3, r0
 80016c0:	80fb      	strh	r3, [r7, #6]

	// code for the shutdown buttons which trigger if the motors run out of bounds
	if (GPIO_Pin == shutdownButton_Pin)
 80016c2:	88fb      	ldrh	r3, [r7, #6]
 80016c4:	2b02      	cmp	r3, #2
 80016c6:	d11a      	bne.n	80016fe <HAL_GPIO_EXTI_Callback+0x46>
	{

		// writes a 1 to the enable pins to disable the motors
		HAL_GPIO_WritePin(XEN_GPIO_Port, XEN_Pin, 1);
 80016c8:	2201      	movs	r2, #1
 80016ca:	2120      	movs	r1, #32
 80016cc:	480e      	ldr	r0, [pc, #56]	@ (8001708 <HAL_GPIO_EXTI_Callback+0x50>)
 80016ce:	f001 fa6f 	bl	8002bb0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YEN_GPIO_Port, YEN_Pin, 1);
 80016d2:	2201      	movs	r2, #1
 80016d4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80016d8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016dc:	f001 fa68 	bl	8002bb0 <HAL_GPIO_WritePin>

		// Turns off the motor timers so they don't send a signal anymore
		HAL_TIM_Base_Stop_IT(&htim16);
 80016e0:	480a      	ldr	r0, [pc, #40]	@ (800170c <HAL_GPIO_EXTI_Callback+0x54>)
 80016e2:	f003 fc65 	bl	8004fb0 <HAL_TIM_Base_Stop_IT>
		HAL_TIM_Base_Stop_IT(&htim17);
 80016e6:	480a      	ldr	r0, [pc, #40]	@ (8001710 <HAL_GPIO_EXTI_Callback+0x58>)
 80016e8:	f003 fc62 	bl	8004fb0 <HAL_TIM_Base_Stop_IT>

		// Turns of the laser's PWM
		HAL_TIM_PWM_Stop(&htim7, TIM_CHANNEL_1);
 80016ec:	2100      	movs	r1, #0
 80016ee:	4809      	ldr	r0, [pc, #36]	@ (8001714 <HAL_GPIO_EXTI_Callback+0x5c>)
 80016f0:	f003 fdf4 	bl	80052dc <HAL_TIM_PWM_Stop>
		HAL_TIM_Base_Stop_IT(&htim7);
 80016f4:	4807      	ldr	r0, [pc, #28]	@ (8001714 <HAL_GPIO_EXTI_Callback+0x5c>)
 80016f6:	f003 fc5b 	bl	8004fb0 <HAL_TIM_Base_Stop_IT>

		// Puts the code in a while loop so the program has to be reset if it enters this state
		while(1){}
 80016fa:	bf00      	nop
 80016fc:	e7fd      	b.n	80016fa <HAL_GPIO_EXTI_Callback+0x42>
	}
}
 80016fe:	bf00      	nop
 8001700:	3708      	adds	r7, #8
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	48000400 	.word	0x48000400
 800170c:	20000310 	.word	0x20000310
 8001710:	2000035c 	.word	0x2000035c
 8001714:	200002c4 	.word	0x200002c4

08001718 <GCommandParse>:

Executable GCommandParse(TCHAR* line1)
{
 8001718:	b5b0      	push	{r4, r5, r7, lr}
 800171a:	b0a2      	sub	sp, #136	@ 0x88
 800171c:	af04      	add	r7, sp, #16
 800171e:	6078      	str	r0, [r7, #4]
 8001720:	6039      	str	r1, [r7, #0]

	  // Creates local variables for the different possible commands in Gcode (max 10 characters)
	  char Gcommand[10] = "";
 8001722:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001726:	2200      	movs	r2, #0
 8001728:	601a      	str	r2, [r3, #0]
 800172a:	605a      	str	r2, [r3, #4]
 800172c:	811a      	strh	r2, [r3, #8]
	  char Xcoordinate[10] = "";
 800172e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001732:	2200      	movs	r2, #0
 8001734:	601a      	str	r2, [r3, #0]
 8001736:	605a      	str	r2, [r3, #4]
 8001738:	811a      	strh	r2, [r3, #8]
	  char Ycoordinate[10] = "";
 800173a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800173e:	2200      	movs	r2, #0
 8001740:	601a      	str	r2, [r3, #0]
 8001742:	605a      	str	r2, [r3, #4]
 8001744:	811a      	strh	r2, [r3, #8]
	  char Zcoordinate[10] = "";
 8001746:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800174a:	2200      	movs	r2, #0
 800174c:	601a      	str	r2, [r3, #0]
 800174e:	605a      	str	r2, [r3, #4]
 8001750:	811a      	strh	r2, [r3, #8]
	  char feedRate[10] = "";
 8001752:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001756:	2200      	movs	r2, #0
 8001758:	601a      	str	r2, [r3, #0]
 800175a:	605a      	str	r2, [r3, #4]
 800175c:	811a      	strh	r2, [r3, #8]
	  char laserSpeed[10] = "";
 800175e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001762:	2200      	movs	r2, #0
 8001764:	601a      	str	r2, [r3, #0]
 8001766:	605a      	str	r2, [r3, #4]
 8001768:	811a      	strh	r2, [r3, #8]

	  // New struct to save the values of the executables which are calculated in these functions
	  Executable newExecutable;

	  int i = 0;
 800176a:	2300      	movs	r3, #0
 800176c:	677b      	str	r3, [r7, #116]	@ 0x74
	  // Initiates a for loop which loops each character of the Gcode line
	  while (1)
	  {

		  // Creates a temporary variable for the Gcode command and the value attached to it
		  char command = line1[i];	// assigns the first value of the Gcode as the command
 800176e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001770:	683a      	ldr	r2, [r7, #0]
 8001772:	4413      	add	r3, r2
 8001774:	781b      	ldrb	r3, [r3, #0]
 8001776:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		  char newValue[10] = "";
 800177a:	f107 0308 	add.w	r3, r7, #8
 800177e:	2200      	movs	r2, #0
 8001780:	601a      	str	r2, [r3, #0]
 8001782:	605a      	str	r2, [r3, #4]
 8001784:	811a      	strh	r2, [r3, #8]

		  // Temporary, incrementing variables
		  int j = 0;	// represents the current charcter in the word
 8001786:	2300      	movs	r3, #0
 8001788:	673b      	str	r3, [r7, #112]	@ 0x70
		  i++;		// indicates the total character in the line
 800178a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800178c:	3301      	adds	r3, #1
 800178e:	677b      	str	r3, [r7, #116]	@ 0x74

		  // while loop that loops through the rest of the command and stores the value in newValue
		  while ((line1[i] != ' ') && (line1[i] != '\0') && (line1[i] != '\n'))
 8001790:	e00f      	b.n	80017b2 <GCommandParse+0x9a>
		  {
			  newValue[j] = line1[i];
 8001792:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001794:	683a      	ldr	r2, [r7, #0]
 8001796:	4413      	add	r3, r2
 8001798:	7819      	ldrb	r1, [r3, #0]
 800179a:	f107 0208 	add.w	r2, r7, #8
 800179e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80017a0:	4413      	add	r3, r2
 80017a2:	460a      	mov	r2, r1
 80017a4:	701a      	strb	r2, [r3, #0]
			  i++;
 80017a6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80017a8:	3301      	adds	r3, #1
 80017aa:	677b      	str	r3, [r7, #116]	@ 0x74
			  j++;
 80017ac:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80017ae:	3301      	adds	r3, #1
 80017b0:	673b      	str	r3, [r7, #112]	@ 0x70
		  while ((line1[i] != ' ') && (line1[i] != '\0') && (line1[i] != '\n'))
 80017b2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80017b4:	683a      	ldr	r2, [r7, #0]
 80017b6:	4413      	add	r3, r2
 80017b8:	781b      	ldrb	r3, [r3, #0]
 80017ba:	2b20      	cmp	r3, #32
 80017bc:	d00b      	beq.n	80017d6 <GCommandParse+0xbe>
 80017be:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80017c0:	683a      	ldr	r2, [r7, #0]
 80017c2:	4413      	add	r3, r2
 80017c4:	781b      	ldrb	r3, [r3, #0]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d005      	beq.n	80017d6 <GCommandParse+0xbe>
 80017ca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80017cc:	683a      	ldr	r2, [r7, #0]
 80017ce:	4413      	add	r3, r2
 80017d0:	781b      	ldrb	r3, [r3, #0]
 80017d2:	2b0a      	cmp	r3, #10
 80017d4:	d1dd      	bne.n	8001792 <GCommandParse+0x7a>
		  }

		  //adds the null operator to the end of the newValue
		  newValue[j] = '\0';
 80017d6:	f107 0208 	add.w	r2, r7, #8
 80017da:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80017dc:	4413      	add	r3, r2
 80017de:	2200      	movs	r2, #0
 80017e0:	701a      	strb	r2, [r3, #0]

		  // Switch statement for the value of command to split the current word into it's variable
		  switch (command)
 80017e2:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80017e6:	3b46      	subs	r3, #70	@ 0x46
 80017e8:	2b14      	cmp	r3, #20
 80017ea:	d86c      	bhi.n	80018c6 <GCommandParse+0x1ae>
 80017ec:	a201      	add	r2, pc, #4	@ (adr r2, 80017f4 <GCommandParse+0xdc>)
 80017ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017f2:	bf00      	nop
 80017f4:	080018b5 	.word	0x080018b5
 80017f8:	08001849 	.word	0x08001849
 80017fc:	080018c7 	.word	0x080018c7
 8001800:	080018c7 	.word	0x080018c7
 8001804:	080018c7 	.word	0x080018c7
 8001808:	080018c7 	.word	0x080018c7
 800180c:	080018c7 	.word	0x080018c7
 8001810:	08001891 	.word	0x08001891
 8001814:	080018c7 	.word	0x080018c7
 8001818:	080018c7 	.word	0x080018c7
 800181c:	080018c7 	.word	0x080018c7
 8001820:	080018c7 	.word	0x080018c7
 8001824:	080018c7 	.word	0x080018c7
 8001828:	080018a3 	.word	0x080018a3
 800182c:	080018c7 	.word	0x080018c7
 8001830:	080018c7 	.word	0x080018c7
 8001834:	080018c7 	.word	0x080018c7
 8001838:	080018c7 	.word	0x080018c7
 800183c:	0800185b 	.word	0x0800185b
 8001840:	0800186d 	.word	0x0800186d
 8001844:	0800187f 	.word	0x0800187f
		  {
		  case 'G':
			  strncpy(Gcommand, newValue, 10);	// copies the value in newValue to the Gcommand variable
 8001848:	f107 0108 	add.w	r1, r7, #8
 800184c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001850:	220a      	movs	r2, #10
 8001852:	4618      	mov	r0, r3
 8001854:	f00d f860 	bl	800e918 <strncpy>
				break;
 8001858:	e036      	b.n	80018c8 <GCommandParse+0x1b0>
		  case 'X':
			  strncpy(Xcoordinate, newValue, 10);	// copies the value in newValue to the Xcoordinate variable
 800185a:	f107 0108 	add.w	r1, r7, #8
 800185e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001862:	220a      	movs	r2, #10
 8001864:	4618      	mov	r0, r3
 8001866:	f00d f857 	bl	800e918 <strncpy>
				break;
 800186a:	e02d      	b.n	80018c8 <GCommandParse+0x1b0>
		  case 'Y':
			  strncpy(Ycoordinate, newValue, 10);	// copies the value in newValue to the Ycoordinate variable
 800186c:	f107 0108 	add.w	r1, r7, #8
 8001870:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001874:	220a      	movs	r2, #10
 8001876:	4618      	mov	r0, r3
 8001878:	f00d f84e 	bl	800e918 <strncpy>
				break;
 800187c:	e024      	b.n	80018c8 <GCommandParse+0x1b0>
		  case 'Z':
			  strncpy(Zcoordinate, newValue, 10);	// copies the value in newValue to the Zcoordinate variable
 800187e:	f107 0108 	add.w	r1, r7, #8
 8001882:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001886:	220a      	movs	r2, #10
 8001888:	4618      	mov	r0, r3
 800188a:	f00d f845 	bl	800e918 <strncpy>
				break;
 800188e:	e01b      	b.n	80018c8 <GCommandParse+0x1b0>
		  case 'M':
			  strncpy(Gcommand, newValue, 10);	// copies the value in newValue to the Mcommand variable
 8001890:	f107 0108 	add.w	r1, r7, #8
 8001894:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001898:	220a      	movs	r2, #10
 800189a:	4618      	mov	r0, r3
 800189c:	f00d f83c 	bl	800e918 <strncpy>
				break;
 80018a0:	e012      	b.n	80018c8 <GCommandParse+0x1b0>
		  case 'S':
			  strncpy(laserSpeed, newValue, 10);	// copies the value in newValue to the laserSpeed variable
 80018a2:	f107 0108 	add.w	r1, r7, #8
 80018a6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80018aa:	220a      	movs	r2, #10
 80018ac:	4618      	mov	r0, r3
 80018ae:	f00d f833 	bl	800e918 <strncpy>
				break;
 80018b2:	e009      	b.n	80018c8 <GCommandParse+0x1b0>
		  case 'F':
			  strncpy(feedRate, newValue, 10);	// copies the value in newValue to the feedRate variable
 80018b4:	f107 0108 	add.w	r1, r7, #8
 80018b8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80018bc:	220a      	movs	r2, #10
 80018be:	4618      	mov	r0, r3
 80018c0:	f00d f82a 	bl	800e918 <strncpy>
				break;
 80018c4:	e000      	b.n	80018c8 <GCommandParse+0x1b0>
		  case 'R':
				break;
		  default:
				break;
 80018c6:	bf00      	nop
		  }

		  // When the new line operator occurs, this means the line is over, so we break the while loop
		  if (line1[i] == '\n')
 80018c8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80018ca:	683a      	ldr	r2, [r7, #0]
 80018cc:	4413      	add	r3, r2
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	2b0a      	cmp	r3, #10
 80018d2:	d11c      	bne.n	800190e <GCommandParse+0x1f6>
		  // increments i to the value of the first character of the next command
		  i++;
	  }

	  // Calls the Compute Executables command which computes the output Executables
	  newExecutable = ComputeExecutables(Gcommand, Xcoordinate, Ycoordinate, Zcoordinate, feedRate, laserSpeed);
 80018d4:	f107 0014 	add.w	r0, r7, #20
 80018d8:	f107 044c 	add.w	r4, r7, #76	@ 0x4c
 80018dc:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 80018e0:	f107 0164 	add.w	r1, r7, #100	@ 0x64
 80018e4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80018e8:	9302      	str	r3, [sp, #8]
 80018ea:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80018ee:	9301      	str	r3, [sp, #4]
 80018f0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80018f4:	9300      	str	r3, [sp, #0]
 80018f6:	4623      	mov	r3, r4
 80018f8:	f000 f812 	bl	8001920 <ComputeExecutables>

	  // Returns the values in the Executable struct
	  return newExecutable;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	461d      	mov	r5, r3
 8001900:	f107 0414 	add.w	r4, r7, #20
 8001904:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001906:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001908:	6823      	ldr	r3, [r4, #0]
 800190a:	602b      	str	r3, [r5, #0]
 800190c:	e003      	b.n	8001916 <GCommandParse+0x1fe>
		  i++;
 800190e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001910:	3301      	adds	r3, #1
 8001912:	677b      	str	r3, [r7, #116]	@ 0x74
	  {
 8001914:	e72b      	b.n	800176e <GCommandParse+0x56>
}
 8001916:	6878      	ldr	r0, [r7, #4]
 8001918:	3778      	adds	r7, #120	@ 0x78
 800191a:	46bd      	mov	sp, r7
 800191c:	bdb0      	pop	{r4, r5, r7, pc}
 800191e:	bf00      	nop

08001920 <ComputeExecutables>:
	*s = '\0';
}

// Command Execute takes the parameters from the Gcode line and controls the motors accordingly
Executable ComputeExecutables(char Gcommand[], char Xcommand[], char Ycommand[], char Zcommand[], char feedRate[], char laserSpeed[])
{
 8001920:	b5b0      	push	{r4, r5, r7, lr}
 8001922:	b08c      	sub	sp, #48	@ 0x30
 8001924:	af00      	add	r7, sp, #0
 8001926:	60f8      	str	r0, [r7, #12]
 8001928:	60b9      	str	r1, [r7, #8]
 800192a:	607a      	str	r2, [r7, #4]
 800192c:	603b      	str	r3, [r7, #0]

	// creates a temporary Executable struct to save the values we compute
	Executable newExecutable;

	// If the Gcode command is G0, runs with rapid positioning (full speed move)
	if ((!strcmp(Gcommand,"0")) || (!strcmp(Gcommand,"1")))
 800192e:	4984      	ldr	r1, [pc, #528]	@ (8001b40 <ComputeExecutables+0x220>)
 8001930:	68b8      	ldr	r0, [r7, #8]
 8001932:	f7fe fc4d 	bl	80001d0 <strcmp>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d007      	beq.n	800194c <ComputeExecutables+0x2c>
 800193c:	4981      	ldr	r1, [pc, #516]	@ (8001b44 <ComputeExecutables+0x224>)
 800193e:	68b8      	ldr	r0, [r7, #8]
 8001940:	f7fe fc46 	bl	80001d0 <strcmp>
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	f040 80e3 	bne.w	8001b12 <ComputeExecutables+0x1f2>
	{

		// If there is a value in Xcommand, it computes the end point of the system (1600 pulses per motor rotation, 43.39 mm per rotation)
		if (Xcommand[0] != '\0')
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d012      	beq.n	800197a <ComputeExecutables+0x5a>
		{
			newExecutable.Xend = ((1600 / 43.39) * atof(Xcommand));	// Converts Xcommand to an int, changes units to .1 mms and updates the global variable
 8001954:	6878      	ldr	r0, [r7, #4]
 8001956:	f00b ffe7 	bl	800d928 <atof>
 800195a:	ec51 0b10 	vmov	r0, r1, d0
 800195e:	a374      	add	r3, pc, #464	@ (adr r3, 8001b30 <ComputeExecutables+0x210>)
 8001960:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001964:	f7fe fe58 	bl	8000618 <__aeabi_dmul>
 8001968:	4602      	mov	r2, r0
 800196a:	460b      	mov	r3, r1
 800196c:	4610      	mov	r0, r2
 800196e:	4619      	mov	r1, r3
 8001970:	f7ff f902 	bl	8000b78 <__aeabi_d2iz>
 8001974:	4603      	mov	r3, r0
 8001976:	613b      	str	r3, [r7, #16]
 8001978:	e002      	b.n	8001980 <ComputeExecutables+0x60>
		}

		// If there is no value in Xcommand, Xend equals the current Xvalue (Xcurrent is a global variable that stores the X position that is currently being calculated
		else
		{
			newExecutable.Xend = XCurrentCalculate;
 800197a:	4b73      	ldr	r3, [pc, #460]	@ (8001b48 <ComputeExecutables+0x228>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	613b      	str	r3, [r7, #16]
		}

		// If there is a value in Ycommand, it computes the end point of the system (1600 pulses per motor rotation, 43.39 mm per rotation)
		if (Ycommand[0] != '\0')
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	781b      	ldrb	r3, [r3, #0]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d012      	beq.n	80019ae <ComputeExecutables+0x8e>
		{
			newExecutable.Yend = ((1600 / 43.39) * atof(Ycommand));	// Converts Ycommand to an int, changes units to .1 mms and updates the global variable
 8001988:	6838      	ldr	r0, [r7, #0]
 800198a:	f00b ffcd 	bl	800d928 <atof>
 800198e:	ec51 0b10 	vmov	r0, r1, d0
 8001992:	a367      	add	r3, pc, #412	@ (adr r3, 8001b30 <ComputeExecutables+0x210>)
 8001994:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001998:	f7fe fe3e 	bl	8000618 <__aeabi_dmul>
 800199c:	4602      	mov	r2, r0
 800199e:	460b      	mov	r3, r1
 80019a0:	4610      	mov	r0, r2
 80019a2:	4619      	mov	r1, r3
 80019a4:	f7ff f8e8 	bl	8000b78 <__aeabi_d2iz>
 80019a8:	4603      	mov	r3, r0
 80019aa:	617b      	str	r3, [r7, #20]
 80019ac:	e002      	b.n	80019b4 <ComputeExecutables+0x94>
		}

		// If there is no value in Xcommand, Xend equals the current Xvalue (Xcurrent is a global variable that stores the X position that is currently being calculated
		else
		{
			newExecutable.Yend = YCurrentCalculate;
 80019ae:	4b67      	ldr	r3, [pc, #412]	@ (8001b4c <ComputeExecutables+0x22c>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	617b      	str	r3, [r7, #20]
		}

		// Calculates distance to be traveled in the current engrave
		float Xdistance = newExecutable.Xend - XCurrentCalculate;
 80019b4:	693a      	ldr	r2, [r7, #16]
 80019b6:	4b64      	ldr	r3, [pc, #400]	@ (8001b48 <ComputeExecutables+0x228>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	1ad3      	subs	r3, r2, r3
 80019bc:	ee07 3a90 	vmov	s15, r3
 80019c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019c4:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
		float Ydistance = newExecutable.Yend - YCurrentCalculate;
 80019c8:	697a      	ldr	r2, [r7, #20]
 80019ca:	4b60      	ldr	r3, [pc, #384]	@ (8001b4c <ComputeExecutables+0x22c>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	1ad3      	subs	r3, r2, r3
 80019d0:	ee07 3a90 	vmov	s15, r3
 80019d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019d8:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28

		// sets the current calculate global variable for the next line to use
		XCurrentCalculate = newExecutable.Xend;
 80019dc:	693b      	ldr	r3, [r7, #16]
 80019de:	4a5a      	ldr	r2, [pc, #360]	@ (8001b48 <ComputeExecutables+0x228>)
 80019e0:	6013      	str	r3, [r2, #0]
		YCurrentCalculate = newExecutable.Yend;
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	4a59      	ldr	r2, [pc, #356]	@ (8001b4c <ComputeExecutables+0x22c>)
 80019e6:	6013      	str	r3, [r2, #0]

		// sets the feedRate variable (sometimes the Gcommand doesn't put in a new feedRate variable and the feedRate stays the same
		// In order to calculate each step, we need to save the feedRate because the next command may need it
		if (feedRate[0] != '\0')
 80019e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80019ea:	781b      	ldrb	r3, [r3, #0]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d005      	beq.n	80019fc <ComputeExecutables+0xdc>
		{
			feed = atoi(feedRate);	// Converts feedRate to an int
 80019f0:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80019f2:	f00b ff9c 	bl	800d92e <atoi>
 80019f6:	4603      	mov	r3, r0
 80019f8:	4a55      	ldr	r2, [pc, #340]	@ (8001b50 <ComputeExecutables+0x230>)
 80019fa:	6013      	str	r3, [r2, #0]
		}

		// Initiates the Xspeed and Yspeed variables to 1 (so if the speed doesn't change, the next instruction won't divide by 0)
		// It is set to one so that the timer interrupt will be called quickly, and the stopped motor won't disrupt the other motor)
		newExecutable.Xspeed = 1;
 80019fc:	2301      	movs	r3, #1
 80019fe:	61bb      	str	r3, [r7, #24]
		newExecutable.Yspeed = 1;
 8001a00:	2301      	movs	r3, #1
 8001a02:	61fb      	str	r3, [r7, #28]

		// calculates the total distance in order to evaluate the speed (feedRate is given in a direct, diagonal path)
		float totalDistance = sqrt((Xdistance * Xdistance) + (Ydistance * Ydistance));
 8001a04:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001a08:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001a0c:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001a10:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001a14:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a18:	ee17 0a90 	vmov	r0, s15
 8001a1c:	f7fe fda4 	bl	8000568 <__aeabi_f2d>
 8001a20:	4602      	mov	r2, r0
 8001a22:	460b      	mov	r3, r1
 8001a24:	ec43 2b10 	vmov	d0, r2, r3
 8001a28:	f00f f84c 	bl	8010ac4 <sqrt>
 8001a2c:	ec53 2b10 	vmov	r2, r3, d0
 8001a30:	4610      	mov	r0, r2
 8001a32:	4619      	mov	r1, r3
 8001a34:	f7ff f8e8 	bl	8000c08 <__aeabi_d2f>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	627b      	str	r3, [r7, #36]	@ 0x24

		// ensures the distance won't be divided by 0
		if (Xdistance != 0)
 8001a3c:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001a40:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001a44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a48:	d02b      	beq.n	8001aa2 <ComputeExecutables+0x182>
		{

			// Calcualtes the required prescaler value and saves it in the Xspeed variable
			newExecutable.Xspeed = 162712.482 / ((abs(Xdistance) / totalDistance) * feed);
 8001a4a:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001a4e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a52:	ee17 3a90 	vmov	r3, s15
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	bfb8      	it	lt
 8001a5a:	425b      	neglt	r3, r3
 8001a5c:	ee07 3a90 	vmov	s15, r3
 8001a60:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001a64:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001a68:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001a6c:	4b38      	ldr	r3, [pc, #224]	@ (8001b50 <ComputeExecutables+0x230>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	ee07 3a90 	vmov	s15, r3
 8001a74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a7c:	ee17 0a90 	vmov	r0, s15
 8001a80:	f7fe fd72 	bl	8000568 <__aeabi_f2d>
 8001a84:	4602      	mov	r2, r0
 8001a86:	460b      	mov	r3, r1
 8001a88:	a12b      	add	r1, pc, #172	@ (adr r1, 8001b38 <ComputeExecutables+0x218>)
 8001a8a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001a8e:	f7fe feed 	bl	800086c <__aeabi_ddiv>
 8001a92:	4602      	mov	r2, r0
 8001a94:	460b      	mov	r3, r1
 8001a96:	4610      	mov	r0, r2
 8001a98:	4619      	mov	r1, r3
 8001a9a:	f7ff f86d 	bl	8000b78 <__aeabi_d2iz>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	61bb      	str	r3, [r7, #24]
		}

		// Ensures the distance won't be divided by 0
		if (Ydistance != 0)
 8001aa2:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001aa6:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001aaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001aae:	d02b      	beq.n	8001b08 <ComputeExecutables+0x1e8>
		{

			// Calculates the required prescaler value and saves it in the Yspeed variable
			newExecutable.Yspeed = 162712.482 / ((abs(Ydistance) / totalDistance) * feed);
 8001ab0:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001ab4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ab8:	ee17 3a90 	vmov	r3, s15
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	bfb8      	it	lt
 8001ac0:	425b      	neglt	r3, r3
 8001ac2:	ee07 3a90 	vmov	s15, r3
 8001ac6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001aca:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001ace:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001ad2:	4b1f      	ldr	r3, [pc, #124]	@ (8001b50 <ComputeExecutables+0x230>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	ee07 3a90 	vmov	s15, r3
 8001ada:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ade:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ae2:	ee17 0a90 	vmov	r0, s15
 8001ae6:	f7fe fd3f 	bl	8000568 <__aeabi_f2d>
 8001aea:	4602      	mov	r2, r0
 8001aec:	460b      	mov	r3, r1
 8001aee:	a112      	add	r1, pc, #72	@ (adr r1, 8001b38 <ComputeExecutables+0x218>)
 8001af0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001af4:	f7fe feba 	bl	800086c <__aeabi_ddiv>
 8001af8:	4602      	mov	r2, r0
 8001afa:	460b      	mov	r3, r1
 8001afc:	4610      	mov	r0, r2
 8001afe:	4619      	mov	r1, r3
 8001b00:	f7ff f83a 	bl	8000b78 <__aeabi_d2iz>
 8001b04:	4603      	mov	r3, r0
 8001b06:	61fb      	str	r3, [r7, #28]
		}

		// Converters laserSpeed to an int
		newExecutable.laserSpeed = atoi(laserSpeed);
 8001b08:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8001b0a:	f00b ff10 	bl	800d92e <atoi>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	623b      	str	r3, [r7, #32]
	}

	// if there are any other possible input comands (M command, G02, G03, etc. we can put them here)

	// returns the Executable struct
	return newExecutable;
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	461d      	mov	r5, r3
 8001b16:	f107 0410 	add.w	r4, r7, #16
 8001b1a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b1c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b1e:	6823      	ldr	r3, [r4, #0]
 8001b20:	602b      	str	r3, [r5, #0]



}
 8001b22:	68f8      	ldr	r0, [r7, #12]
 8001b24:	3730      	adds	r7, #48	@ 0x30
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bdb0      	pop	{r4, r5, r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	f3af 8000 	nop.w
 8001b30:	47af49cf 	.word	0x47af49cf
 8001b34:	40426ffb 	.word	0x40426ffb
 8001b38:	db22d0e5 	.word	0xdb22d0e5
 8001b3c:	4103dcc3 	.word	0x4103dcc3
 8001b40:	08010d50 	.word	0x08010d50
 8001b44:	08010d54 	.word	0x08010d54
 8001b48:	20000454 	.word	0x20000454
 8001b4c:	20000458 	.word	0x20000458
 8001b50:	20000450 	.word	0x20000450
 8001b54:	00000000 	.word	0x00000000

08001b58 <SetLaserPower>:

// Function to set the laser power. input must be a value from 0 to 255
void SetLaserPower(uint8_t power) {
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b084      	sub	sp, #16
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	4603      	mov	r3, r0
 8001b60:	71fb      	strb	r3, [r7, #7]

	// the timer requires the duty cycle in a ratio from 0 to 80000
	float dutyCycle = (power/255.0) * 80000;
 8001b62:	79fb      	ldrb	r3, [r7, #7]
 8001b64:	4618      	mov	r0, r3
 8001b66:	f7fe fced 	bl	8000544 <__aeabi_i2d>
 8001b6a:	a311      	add	r3, pc, #68	@ (adr r3, 8001bb0 <SetLaserPower+0x58>)
 8001b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b70:	f7fe fe7c 	bl	800086c <__aeabi_ddiv>
 8001b74:	4602      	mov	r2, r0
 8001b76:	460b      	mov	r3, r1
 8001b78:	4610      	mov	r0, r2
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	a30e      	add	r3, pc, #56	@ (adr r3, 8001bb8 <SetLaserPower+0x60>)
 8001b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b82:	f7fe fd49 	bl	8000618 <__aeabi_dmul>
 8001b86:	4602      	mov	r2, r0
 8001b88:	460b      	mov	r3, r1
 8001b8a:	4610      	mov	r0, r2
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	f7ff f83b 	bl	8000c08 <__aeabi_d2f>
 8001b92:	4603      	mov	r3, r0
 8001b94:	60fb      	str	r3, [r7, #12]
    TIM2->CCR1 = dutyCycle;  // Set duty cycle
 8001b96:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001b9a:	edd7 7a03 	vldr	s15, [r7, #12]
 8001b9e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ba2:	ee17 2a90 	vmov	r2, s15
 8001ba6:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001ba8:	bf00      	nop
 8001baa:	3710      	adds	r7, #16
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	00000000 	.word	0x00000000
 8001bb4:	406fe000 	.word	0x406fe000
 8001bb8:	00000000 	.word	0x00000000
 8001bbc:	40f38800 	.word	0x40f38800

08001bc0 <StartEngrave>:

// Function to start the motors and laser for engraving
void StartEngrave(Executable output){
 8001bc0:	b084      	sub	sp, #16
 8001bc2:	b580      	push	{r7, lr}
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	f107 0c08 	add.w	ip, r7, #8
 8001bca:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	  // Starts the PWM for the laser
	  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001bce:	2100      	movs	r1, #0
 8001bd0:	4808      	ldr	r0, [pc, #32]	@ (8001bf4 <StartEngrave+0x34>)
 8001bd2:	f003 fa7d 	bl	80050d0 <HAL_TIM_PWM_Start>
	  HAL_TIM_Base_Start_IT(&htim2);
 8001bd6:	4807      	ldr	r0, [pc, #28]	@ (8001bf4 <StartEngrave+0x34>)
 8001bd8:	f003 f97a 	bl	8004ed0 <HAL_TIM_Base_Start_IT>

	  // Starts the timers for the motors
	  HAL_TIM_Base_Start_IT(&htim16);
 8001bdc:	4806      	ldr	r0, [pc, #24]	@ (8001bf8 <StartEngrave+0x38>)
 8001bde:	f003 f977 	bl	8004ed0 <HAL_TIM_Base_Start_IT>
	  HAL_TIM_Base_Start_IT(&htim17);
 8001be2:	4806      	ldr	r0, [pc, #24]	@ (8001bfc <StartEngrave+0x3c>)
 8001be4:	f003 f974 	bl	8004ed0 <HAL_TIM_Base_Start_IT>

}
 8001be8:	bf00      	nop
 8001bea:	46bd      	mov	sp, r7
 8001bec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001bf0:	b004      	add	sp, #16
 8001bf2:	4770      	bx	lr
 8001bf4:	20000278 	.word	0x20000278
 8001bf8:	20000310 	.word	0x20000310
 8001bfc:	2000035c 	.word	0x2000035c

08001c00 <SetOutputs>:

// Function which sets all the parameters in order to engrave
void SetOutputs(Executable output){
 8001c00:	b084      	sub	sp, #16
 8001c02:	b580      	push	{r7, lr}
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	f107 0c08 	add.w	ip, r7, #8
 8001c0a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	// Sets the Xend and Yend global variables so the motors know when to stop
	Xend = output.Xend;
 8001c0e:	68bb      	ldr	r3, [r7, #8]
 8001c10:	4a28      	ldr	r2, [pc, #160]	@ (8001cb4 <SetOutputs+0xb4>)
 8001c12:	6013      	str	r3, [r2, #0]
	Yend = output.Yend;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	4a28      	ldr	r2, [pc, #160]	@ (8001cb8 <SetOutputs+0xb8>)
 8001c18:	6013      	str	r3, [r2, #0]

	// Updates the X Direction variable and writes to the pin
	if (output.Xend > Xcurrent)
 8001c1a:	68ba      	ldr	r2, [r7, #8]
 8001c1c:	4b27      	ldr	r3, [pc, #156]	@ (8001cbc <SetOutputs+0xbc>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	429a      	cmp	r2, r3
 8001c22:	dd08      	ble.n	8001c36 <SetOutputs+0x36>
	{
		XDIR = 1;
 8001c24:	4b26      	ldr	r3, [pc, #152]	@ (8001cc0 <SetOutputs+0xc0>)
 8001c26:	2201      	movs	r2, #1
 8001c28:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(XDIR_GPIO_Port, XDIR_Pin, 1);
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	2110      	movs	r1, #16
 8001c2e:	4825      	ldr	r0, [pc, #148]	@ (8001cc4 <SetOutputs+0xc4>)
 8001c30:	f000 ffbe 	bl	8002bb0 <HAL_GPIO_WritePin>
 8001c34:	e00c      	b.n	8001c50 <SetOutputs+0x50>
	}
	else if (output.Xend < Xcurrent)
 8001c36:	68ba      	ldr	r2, [r7, #8]
 8001c38:	4b20      	ldr	r3, [pc, #128]	@ (8001cbc <SetOutputs+0xbc>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	da07      	bge.n	8001c50 <SetOutputs+0x50>
	{
		XDIR = 0;
 8001c40:	4b1f      	ldr	r3, [pc, #124]	@ (8001cc0 <SetOutputs+0xc0>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(XDIR_GPIO_Port, XDIR_Pin, 0);
 8001c46:	2200      	movs	r2, #0
 8001c48:	2110      	movs	r1, #16
 8001c4a:	481e      	ldr	r0, [pc, #120]	@ (8001cc4 <SetOutputs+0xc4>)
 8001c4c:	f000 ffb0 	bl	8002bb0 <HAL_GPIO_WritePin>
	}

	// Updates the X Direction variable and writes to the pin
	if (output.Yend > Ycurrent)
 8001c50:	68fa      	ldr	r2, [r7, #12]
 8001c52:	4b1d      	ldr	r3, [pc, #116]	@ (8001cc8 <SetOutputs+0xc8>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	429a      	cmp	r2, r3
 8001c58:	dd0a      	ble.n	8001c70 <SetOutputs+0x70>
	{
		YDIR = 1;
 8001c5a:	4b1c      	ldr	r3, [pc, #112]	@ (8001ccc <SetOutputs+0xcc>)
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(YDIR_GPIO_Port, YDIR_Pin, 1);
 8001c60:	2201      	movs	r2, #1
 8001c62:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001c66:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c6a:	f000 ffa1 	bl	8002bb0 <HAL_GPIO_WritePin>
 8001c6e:	e00e      	b.n	8001c8e <SetOutputs+0x8e>
	}
	else if (output.Yend < Ycurrent)
 8001c70:	68fa      	ldr	r2, [r7, #12]
 8001c72:	4b15      	ldr	r3, [pc, #84]	@ (8001cc8 <SetOutputs+0xc8>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	429a      	cmp	r2, r3
 8001c78:	da09      	bge.n	8001c8e <SetOutputs+0x8e>
	{
		YDIR = 0;
 8001c7a:	4b14      	ldr	r3, [pc, #80]	@ (8001ccc <SetOutputs+0xcc>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(YDIR_GPIO_Port, YDIR_Pin, 0);
 8001c80:	2200      	movs	r2, #0
 8001c82:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001c86:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c8a:	f000 ff91 	bl	8002bb0 <HAL_GPIO_WritePin>
	}

	// Sets the prescaler values so the motors turn at the correct speed
	__HAL_TIM_SET_PRESCALER(&htim16, output.Xspeed);
 8001c8e:	693a      	ldr	r2, [r7, #16]
 8001c90:	4b0f      	ldr	r3, [pc, #60]	@ (8001cd0 <SetOutputs+0xd0>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	629a      	str	r2, [r3, #40]	@ 0x28
	__HAL_TIM_SET_PRESCALER(&htim17, output.Yspeed);
 8001c96:	697a      	ldr	r2, [r7, #20]
 8001c98:	4b0e      	ldr	r3, [pc, #56]	@ (8001cd4 <SetOutputs+0xd4>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	629a      	str	r2, [r3, #40]	@ 0x28

	// Sets the Laser Power to the correct value
	SetLaserPower(output.laserSpeed);
 8001c9e:	69bb      	ldr	r3, [r7, #24]
 8001ca0:	b2db      	uxtb	r3, r3
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f7ff ff58 	bl	8001b58 <SetLaserPower>
}
 8001ca8:	bf00      	nop
 8001caa:	46bd      	mov	sp, r7
 8001cac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001cb0:	b004      	add	sp, #16
 8001cb2:	4770      	bx	lr
 8001cb4:	20000448 	.word	0x20000448
 8001cb8:	2000044c 	.word	0x2000044c
 8001cbc:	20000440 	.word	0x20000440
 8001cc0:	20000000 	.word	0x20000000
 8001cc4:	48000400 	.word	0x48000400
 8001cc8:	20000444 	.word	0x20000444
 8001ccc:	20000004 	.word	0x20000004
 8001cd0:	20000310 	.word	0x20000310
 8001cd4:	2000035c 	.word	0x2000035c

08001cd8 <__io_putchar>:

PUTCHAR_PROTOTYPE
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b082      	sub	sp, #8
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *) &ch, 1, 0xFFFF);
 8001ce0:	1d39      	adds	r1, r7, #4
 8001ce2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	4803      	ldr	r0, [pc, #12]	@ (8001cf8 <__io_putchar+0x20>)
 8001cea:	f004 fbcb 	bl	8006484 <HAL_UART_Transmit>
	return ch;
 8001cee:	687b      	ldr	r3, [r7, #4]
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	3708      	adds	r7, #8
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	200003a8 	.word	0x200003a8

08001cfc <LaserEngraveTask>:
This task has the highest priority of the tasks, since it is time constrained by the system, ie. if this tasks is blocked during execution, the motors might pause
Before the task begins, it waits for a semaphore that the previous engrave command is done and a queue message from the loadInstructionTask with information on the next engrave.
  */
/* USER CODE END Header_LaserEngraveTask */
void LaserEngraveTask(void *argument)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b08a      	sub	sp, #40	@ 0x28
 8001d00:	af02      	add	r7, sp, #8
 8001d02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

  // Ensures the enable pins are turned off to allow the motors to turn
  HAL_GPIO_WritePin(XEN_GPIO_Port, XEN_Pin,0);
 8001d04:	2200      	movs	r2, #0
 8001d06:	2120      	movs	r1, #32
 8001d08:	4816      	ldr	r0, [pc, #88]	@ (8001d64 <LaserEngraveTask+0x68>)
 8001d0a:	f000 ff51 	bl	8002bb0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(YEN_GPIO_Port, YEN_Pin,0);
 8001d0e:	2200      	movs	r2, #0
 8001d10:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001d14:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d18:	f000 ff4a 	bl	8002bb0 <HAL_GPIO_WritePin>

  // Declares the executable outside the for loop so that it doesn't have to be redeclared every time
  Executable newExecutable;

  // gives the loadInstruction Task a chance to load data from the SD card to fill the queue
  osDelay(100);
 8001d1c:	2064      	movs	r0, #100	@ 0x64
 8001d1e:	f008 fa2b 	bl	800a178 <osDelay>

  /* Infinite loop */
  for(;;)
  {
	  	  // This is where the program waits for the engrave to finish. The semaphore is initiated as fulfilled so it begins correctly.
		  osSemaphoreAcquire(runningHandle, osWaitForever);
 8001d22:	4b11      	ldr	r3, [pc, #68]	@ (8001d68 <LaserEngraveTask+0x6c>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f04f 31ff 	mov.w	r1, #4294967295
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f008 fac8 	bl	800a2c0 <osSemaphoreAcquire>

		  // Gets the executable struct from the queue with the next engrave
		  osMessageQueueGet(valuesQueueHandle, (Executable *) &newExecutable, 0, osWaitForever);
 8001d30:	4b0e      	ldr	r3, [pc, #56]	@ (8001d6c <LaserEngraveTask+0x70>)
 8001d32:	6818      	ldr	r0, [r3, #0]
 8001d34:	f107 010c 	add.w	r1, r7, #12
 8001d38:	f04f 33ff 	mov.w	r3, #4294967295
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	f008 fc6d 	bl	800a61c <osMessageQueueGet>

		  // Sets the outputs such as the DIR outputs, the motor speeds and the laser PWM duty cycle
		  SetOutputs(newExecutable);
 8001d42:	69fb      	ldr	r3, [r7, #28]
 8001d44:	9300      	str	r3, [sp, #0]
 8001d46:	f107 030c 	add.w	r3, r7, #12
 8001d4a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d4c:	f7ff ff58 	bl	8001c00 <SetOutputs>

		  // Begins the timers for the engrave
		  StartEngrave(newExecutable);
 8001d50:	69fb      	ldr	r3, [r7, #28]
 8001d52:	9300      	str	r3, [sp, #0]
 8001d54:	f107 030c 	add.w	r3, r7, #12
 8001d58:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d5a:	f7ff ff31 	bl	8001bc0 <StartEngrave>
		  osSemaphoreAcquire(runningHandle, osWaitForever);
 8001d5e:	bf00      	nop
 8001d60:	e7df      	b.n	8001d22 <LaserEngraveTask+0x26>
 8001d62:	bf00      	nop
 8001d64:	48000400 	.word	0x48000400
 8001d68:	2000043c 	.word	0x2000043c
 8001d6c:	20000438 	.word	0x20000438

08001d70 <StartLoadInstruction>:
This is the LoadInstruction Task whose main purpose is to load information from the SD card, translate it into executable data, and add it to the queue
This task has a lower priority than the laser engrave task, since we can load information in the background while the motors are running rather than during the laser engrave task
*/
/* USER CODE END Header_StartLoadInstruction */
void StartLoadInstruction(void *argument)
{
 8001d70:	b5b0      	push	{r4, r5, r7, lr}
 8001d72:	b0a8      	sub	sp, #160	@ 0xa0
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	61f8      	str	r0, [r7, #28]


  for(;;)
  {
	  // reads a line from the SD card and saves it in readBuf
	  rres = f_gets((TCHAR*)readBuf, 100, &fil);
 8001d78:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001d7c:	4a16      	ldr	r2, [pc, #88]	@ (8001dd8 <StartLoadInstruction+0x68>)
 8001d7e:	2164      	movs	r1, #100	@ 0x64
 8001d80:	4618      	mov	r0, r3
 8001d82:	f007 fff8 	bl	8009d76 <f_gets>
 8001d86:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c

	  // if there is data sent, it calls the GcommandParse function which computes the values we need to save in the executable struct
	  if(rres != 0) {
 8001d8a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d00e      	beq.n	8001db0 <StartLoadInstruction+0x40>
		newExecutable = GCommandParse((TCHAR*)readBuf);
 8001d92:	463b      	mov	r3, r7
 8001d94:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8001d98:	4611      	mov	r1, r2
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f7ff fcbc 	bl	8001718 <GCommandParse>
 8001da0:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 8001da4:	463d      	mov	r5, r7
 8001da6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001da8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001daa:	682b      	ldr	r3, [r5, #0]
 8001dac:	6023      	str	r3, [r4, #0]
 8001dae:	e009      	b.n	8001dc4 <StartLoadInstruction+0x54>

	  // if f_get returns 0, the program ends and enters a while loop
	  } else {
		f_close(&fil);	// closes the SD card file
 8001db0:	4809      	ldr	r0, [pc, #36]	@ (8001dd8 <StartLoadInstruction+0x68>)
 8001db2:	f007 ffb1 	bl	8009d18 <f_close>
		f_mount(NULL, "", 0);	// un mounts the SD card
 8001db6:	2200      	movs	r2, #0
 8001db8:	4908      	ldr	r1, [pc, #32]	@ (8001ddc <StartLoadInstruction+0x6c>)
 8001dba:	2000      	movs	r0, #0
 8001dbc:	f007 fb90 	bl	80094e0 <f_mount>
		while(1){}		// loops forever because the program has ended
 8001dc0:	bf00      	nop
 8001dc2:	e7fd      	b.n	8001dc0 <StartLoadInstruction+0x50>
	  }

	  // Once we have the executable struct, we save the address to the Queue
	  osMessageQueuePut(valuesQueueHandle, &newExecutable, 0, osWaitForever);
 8001dc4:	4b06      	ldr	r3, [pc, #24]	@ (8001de0 <StartLoadInstruction+0x70>)
 8001dc6:	6818      	ldr	r0, [r3, #0]
 8001dc8:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8001dcc:	f04f 33ff 	mov.w	r3, #4294967295
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	f008 fbc3 	bl	800a55c <osMessageQueuePut>
	  rres = f_gets((TCHAR*)readBuf, 100, &fil);
 8001dd6:	e7cf      	b.n	8001d78 <StartLoadInstruction+0x8>
 8001dd8:	20000694 	.word	0x20000694
 8001ddc:	08010d14 	.word	0x08010d14
 8001de0:	20000438 	.word	0x20000438

08001de4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b082      	sub	sp, #8
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

	if (htim == &htim16)	// X motor timer
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	4a4a      	ldr	r2, [pc, #296]	@ (8001f18 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d141      	bne.n	8001e78 <HAL_TIM_PeriodElapsedCallback+0x94>
	{

		if (Xcurrent != Xend)	// Evaluates if the X motor has arrived in it's position
 8001df4:	4b49      	ldr	r3, [pc, #292]	@ (8001f1c <HAL_TIM_PeriodElapsedCallback+0x138>)
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	4b49      	ldr	r3, [pc, #292]	@ (8001f20 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	d01e      	beq.n	8001e3e <HAL_TIM_PeriodElapsedCallback+0x5a>
		{

			HAL_GPIO_TogglePin(XPUL_GPIO_Port, XPUL_Pin);	// Toggles the XPUL pin
 8001e00:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001e04:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e08:	f000 feea 	bl	8002be0 <HAL_GPIO_TogglePin>

			// Increments the Xcurrent value if XDIR is positive and decrements if Xcurrent value is negative
			// only increments every other cycle
			if (!HAL_GPIO_ReadPin(XPUL_GPIO_Port, XPUL_Pin))
 8001e0c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001e10:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e14:	f000 feb4 	bl	8002b80 <HAL_GPIO_ReadPin>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d12c      	bne.n	8001e78 <HAL_TIM_PeriodElapsedCallback+0x94>
			{
				if (XDIR == 1)
 8001e1e:	4b41      	ldr	r3, [pc, #260]	@ (8001f24 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	2b01      	cmp	r3, #1
 8001e24:	d105      	bne.n	8001e32 <HAL_TIM_PeriodElapsedCallback+0x4e>
				{
					Xcurrent++;
 8001e26:	4b3d      	ldr	r3, [pc, #244]	@ (8001f1c <HAL_TIM_PeriodElapsedCallback+0x138>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	3301      	adds	r3, #1
 8001e2c:	4a3b      	ldr	r2, [pc, #236]	@ (8001f1c <HAL_TIM_PeriodElapsedCallback+0x138>)
 8001e2e:	6013      	str	r3, [r2, #0]
 8001e30:	e022      	b.n	8001e78 <HAL_TIM_PeriodElapsedCallback+0x94>
				}
				else
				{
					Xcurrent--;
 8001e32:	4b3a      	ldr	r3, [pc, #232]	@ (8001f1c <HAL_TIM_PeriodElapsedCallback+0x138>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	3b01      	subs	r3, #1
 8001e38:	4a38      	ldr	r2, [pc, #224]	@ (8001f1c <HAL_TIM_PeriodElapsedCallback+0x138>)
 8001e3a:	6013      	str	r3, [r2, #0]
 8001e3c:	e01c      	b.n	8001e78 <HAL_TIM_PeriodElapsedCallback+0x94>
				}
			}
		}
		else
		{
			HAL_TIM_Base_Stop_IT(&htim16);	// Once the X motor arrives to it's final position, this stops the timer
 8001e3e:	4836      	ldr	r0, [pc, #216]	@ (8001f18 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8001e40:	f003 f8b6 	bl	8004fb0 <HAL_TIM_Base_Stop_IT>

			// if the X motor and Y motor have both arrived at their destinations
			if ((Ycurrent == Yend))
 8001e44:	4b38      	ldr	r3, [pc, #224]	@ (8001f28 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	4b38      	ldr	r3, [pc, #224]	@ (8001f2c <HAL_TIM_PeriodElapsedCallback+0x148>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	d113      	bne.n	8001e78 <HAL_TIM_PeriodElapsedCallback+0x94>
			{

				// stops the laser PWM
				HAL_TIM_Base_Stop_IT(&htim2);
 8001e50:	4837      	ldr	r0, [pc, #220]	@ (8001f30 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8001e52:	f003 f8ad 	bl	8004fb0 <HAL_TIM_Base_Stop_IT>
				HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 8001e56:	2100      	movs	r1, #0
 8001e58:	4835      	ldr	r0, [pc, #212]	@ (8001f30 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8001e5a:	f003 fa3f 	bl	80052dc <HAL_TIM_PWM_Stop>

				// Gives the semaphore so the program can continue
				if (osSemaphoreGetCount(runningHandle) == 0)
 8001e5e:	4b35      	ldr	r3, [pc, #212]	@ (8001f34 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4618      	mov	r0, r3
 8001e64:	f008 fac2 	bl	800a3ec <osSemaphoreGetCount>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d104      	bne.n	8001e78 <HAL_TIM_PeriodElapsedCallback+0x94>
					osSemaphoreRelease(runningHandle);
 8001e6e:	4b31      	ldr	r3, [pc, #196]	@ (8001f34 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4618      	mov	r0, r3
 8001e74:	f008 fa76 	bl	800a364 <osSemaphoreRelease>
			}
		}
	}

	if (htim == &htim17)	// Y motor timer
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	4a2f      	ldr	r2, [pc, #188]	@ (8001f38 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d13f      	bne.n	8001f00 <HAL_TIM_PeriodElapsedCallback+0x11c>
	{

		if (Ycurrent != Yend)	// Evaluates if the Y motor has arrived in it's position
 8001e80:	4b29      	ldr	r3, [pc, #164]	@ (8001f28 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8001e82:	681a      	ldr	r2, [r3, #0]
 8001e84:	4b29      	ldr	r3, [pc, #164]	@ (8001f2c <HAL_TIM_PeriodElapsedCallback+0x148>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d01c      	beq.n	8001ec6 <HAL_TIM_PeriodElapsedCallback+0xe2>
		{

			HAL_GPIO_TogglePin(YPUL_GPIO_Port, YPUL_Pin);	// Toggles the YPUL pin
 8001e8c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001e90:	482a      	ldr	r0, [pc, #168]	@ (8001f3c <HAL_TIM_PeriodElapsedCallback+0x158>)
 8001e92:	f000 fea5 	bl	8002be0 <HAL_GPIO_TogglePin>

			// Increments the Ycurrent value if YDIR is positive and decrements if Ycurrent value is negative
			if (!HAL_GPIO_ReadPin(YPUL_GPIO_Port, YPUL_Pin))
 8001e96:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001e9a:	4828      	ldr	r0, [pc, #160]	@ (8001f3c <HAL_TIM_PeriodElapsedCallback+0x158>)
 8001e9c:	f000 fe70 	bl	8002b80 <HAL_GPIO_ReadPin>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d12c      	bne.n	8001f00 <HAL_TIM_PeriodElapsedCallback+0x11c>
			{
				if (YDIR == 1)
 8001ea6:	4b26      	ldr	r3, [pc, #152]	@ (8001f40 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	d105      	bne.n	8001eba <HAL_TIM_PeriodElapsedCallback+0xd6>
				{
					Ycurrent++;
 8001eae:	4b1e      	ldr	r3, [pc, #120]	@ (8001f28 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	3301      	adds	r3, #1
 8001eb4:	4a1c      	ldr	r2, [pc, #112]	@ (8001f28 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8001eb6:	6013      	str	r3, [r2, #0]
 8001eb8:	e022      	b.n	8001f00 <HAL_TIM_PeriodElapsedCallback+0x11c>
				}
				else
				{
					Ycurrent--;
 8001eba:	4b1b      	ldr	r3, [pc, #108]	@ (8001f28 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	3b01      	subs	r3, #1
 8001ec0:	4a19      	ldr	r2, [pc, #100]	@ (8001f28 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8001ec2:	6013      	str	r3, [r2, #0]
 8001ec4:	e01c      	b.n	8001f00 <HAL_TIM_PeriodElapsedCallback+0x11c>
				}
			}
		}
		else
		{
		  HAL_TIM_Base_Stop_IT(&htim17);	// Once the Y motor arrives to it's final position, this stops the timer
 8001ec6:	481c      	ldr	r0, [pc, #112]	@ (8001f38 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8001ec8:	f003 f872 	bl	8004fb0 <HAL_TIM_Base_Stop_IT>

		  // if the X motor and Y motor have both arrived at their destinations
		  if (Xcurrent == Xend)
 8001ecc:	4b13      	ldr	r3, [pc, #76]	@ (8001f1c <HAL_TIM_PeriodElapsedCallback+0x138>)
 8001ece:	681a      	ldr	r2, [r3, #0]
 8001ed0:	4b13      	ldr	r3, [pc, #76]	@ (8001f20 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	d113      	bne.n	8001f00 <HAL_TIM_PeriodElapsedCallback+0x11c>
		  {
			  // stops the laser PWM
			  HAL_TIM_Base_Stop_IT(&htim2);
 8001ed8:	4815      	ldr	r0, [pc, #84]	@ (8001f30 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8001eda:	f003 f869 	bl	8004fb0 <HAL_TIM_Base_Stop_IT>
			  HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 8001ede:	2100      	movs	r1, #0
 8001ee0:	4813      	ldr	r0, [pc, #76]	@ (8001f30 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8001ee2:	f003 f9fb 	bl	80052dc <HAL_TIM_PWM_Stop>
				// Gives the semaphore so the program can continue
			  if (osSemaphoreGetCount(runningHandle) == 0)
 8001ee6:	4b13      	ldr	r3, [pc, #76]	@ (8001f34 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4618      	mov	r0, r3
 8001eec:	f008 fa7e 	bl	800a3ec <osSemaphoreGetCount>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d104      	bne.n	8001f00 <HAL_TIM_PeriodElapsedCallback+0x11c>
				  osSemaphoreRelease(runningHandle);
 8001ef6:	4b0f      	ldr	r3, [pc, #60]	@ (8001f34 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4618      	mov	r0, r3
 8001efc:	f008 fa32 	bl	800a364 <osSemaphoreRelease>
		  }
		}
	}
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a0f      	ldr	r2, [pc, #60]	@ (8001f44 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d101      	bne.n	8001f0e <HAL_TIM_PeriodElapsedCallback+0x12a>
  {
    HAL_IncTick();
 8001f0a:	f000 fb69 	bl	80025e0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  /* USER CODE END Callback 1 */
}
 8001f0e:	bf00      	nop
 8001f10:	3708      	adds	r7, #8
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	20000310 	.word	0x20000310
 8001f1c:	20000440 	.word	0x20000440
 8001f20:	20000448 	.word	0x20000448
 8001f24:	20000000 	.word	0x20000000
 8001f28:	20000444 	.word	0x20000444
 8001f2c:	2000044c 	.word	0x2000044c
 8001f30:	20000278 	.word	0x20000278
 8001f34:	2000043c 	.word	0x2000043c
 8001f38:	2000035c 	.word	0x2000035c
 8001f3c:	48000400 	.word	0x48000400
 8001f40:	20000004 	.word	0x20000004
 8001f44:	40001000 	.word	0x40001000

08001f48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f4c:	b672      	cpsid	i
}
 8001f4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f50:	bf00      	nop
 8001f52:	e7fd      	b.n	8001f50 <Error_Handler+0x8>

08001f54 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b082      	sub	sp, #8
 8001f58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f5a:	4b11      	ldr	r3, [pc, #68]	@ (8001fa0 <HAL_MspInit+0x4c>)
 8001f5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f5e:	4a10      	ldr	r2, [pc, #64]	@ (8001fa0 <HAL_MspInit+0x4c>)
 8001f60:	f043 0301 	orr.w	r3, r3, #1
 8001f64:	6613      	str	r3, [r2, #96]	@ 0x60
 8001f66:	4b0e      	ldr	r3, [pc, #56]	@ (8001fa0 <HAL_MspInit+0x4c>)
 8001f68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f6a:	f003 0301 	and.w	r3, r3, #1
 8001f6e:	607b      	str	r3, [r7, #4]
 8001f70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f72:	4b0b      	ldr	r3, [pc, #44]	@ (8001fa0 <HAL_MspInit+0x4c>)
 8001f74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f76:	4a0a      	ldr	r2, [pc, #40]	@ (8001fa0 <HAL_MspInit+0x4c>)
 8001f78:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f7c:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f7e:	4b08      	ldr	r3, [pc, #32]	@ (8001fa0 <HAL_MspInit+0x4c>)
 8001f80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f86:	603b      	str	r3, [r7, #0]
 8001f88:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	210f      	movs	r1, #15
 8001f8e:	f06f 0001 	mvn.w	r0, #1
 8001f92:	f000 fc21 	bl	80027d8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f96:	bf00      	nop
 8001f98:	3708      	adds	r7, #8
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	40021000 	.word	0x40021000

08001fa4 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b08a      	sub	sp, #40	@ 0x28
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fac:	f107 0314 	add.w	r3, r7, #20
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	601a      	str	r2, [r3, #0]
 8001fb4:	605a      	str	r2, [r3, #4]
 8001fb6:	609a      	str	r2, [r3, #8]
 8001fb8:	60da      	str	r2, [r3, #12]
 8001fba:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a17      	ldr	r2, [pc, #92]	@ (8002020 <HAL_SPI_MspInit+0x7c>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d128      	bne.n	8002018 <HAL_SPI_MspInit+0x74>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001fc6:	4b17      	ldr	r3, [pc, #92]	@ (8002024 <HAL_SPI_MspInit+0x80>)
 8001fc8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001fca:	4a16      	ldr	r2, [pc, #88]	@ (8002024 <HAL_SPI_MspInit+0x80>)
 8001fcc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001fd0:	6613      	str	r3, [r2, #96]	@ 0x60
 8001fd2:	4b14      	ldr	r3, [pc, #80]	@ (8002024 <HAL_SPI_MspInit+0x80>)
 8001fd4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001fd6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001fda:	613b      	str	r3, [r7, #16]
 8001fdc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fde:	4b11      	ldr	r3, [pc, #68]	@ (8002024 <HAL_SPI_MspInit+0x80>)
 8001fe0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fe2:	4a10      	ldr	r2, [pc, #64]	@ (8002024 <HAL_SPI_MspInit+0x80>)
 8001fe4:	f043 0301 	orr.w	r3, r3, #1
 8001fe8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001fea:	4b0e      	ldr	r3, [pc, #56]	@ (8002024 <HAL_SPI_MspInit+0x80>)
 8001fec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fee:	f003 0301 	and.w	r3, r3, #1
 8001ff2:	60fb      	str	r3, [r7, #12]
 8001ff4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001ff6:	23e0      	movs	r3, #224	@ 0xe0
 8001ff8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ffa:	2302      	movs	r3, #2
 8001ffc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ffe:	2301      	movs	r3, #1
 8002000:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002002:	2303      	movs	r3, #3
 8002004:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002006:	2305      	movs	r3, #5
 8002008:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800200a:	f107 0314 	add.w	r3, r7, #20
 800200e:	4619      	mov	r1, r3
 8002010:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002014:	f000 fc0a 	bl	800282c <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8002018:	bf00      	nop
 800201a:	3728      	adds	r7, #40	@ 0x28
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}
 8002020:	40013000 	.word	0x40013000
 8002024:	40021000 	.word	0x40021000

08002028 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b086      	sub	sp, #24
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002038:	d10c      	bne.n	8002054 <HAL_TIM_Base_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800203a:	4b2b      	ldr	r3, [pc, #172]	@ (80020e8 <HAL_TIM_Base_MspInit+0xc0>)
 800203c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800203e:	4a2a      	ldr	r2, [pc, #168]	@ (80020e8 <HAL_TIM_Base_MspInit+0xc0>)
 8002040:	f043 0301 	orr.w	r3, r3, #1
 8002044:	6593      	str	r3, [r2, #88]	@ 0x58
 8002046:	4b28      	ldr	r3, [pc, #160]	@ (80020e8 <HAL_TIM_Base_MspInit+0xc0>)
 8002048:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800204a:	f003 0301 	and.w	r3, r3, #1
 800204e:	617b      	str	r3, [r7, #20]
 8002050:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN TIM17_MspInit 1 */

    /* USER CODE END TIM17_MspInit 1 */
  }

}
 8002052:	e044      	b.n	80020de <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM7)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a24      	ldr	r2, [pc, #144]	@ (80020ec <HAL_TIM_Base_MspInit+0xc4>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d10c      	bne.n	8002078 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800205e:	4b22      	ldr	r3, [pc, #136]	@ (80020e8 <HAL_TIM_Base_MspInit+0xc0>)
 8002060:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002062:	4a21      	ldr	r2, [pc, #132]	@ (80020e8 <HAL_TIM_Base_MspInit+0xc0>)
 8002064:	f043 0320 	orr.w	r3, r3, #32
 8002068:	6593      	str	r3, [r2, #88]	@ 0x58
 800206a:	4b1f      	ldr	r3, [pc, #124]	@ (80020e8 <HAL_TIM_Base_MspInit+0xc0>)
 800206c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800206e:	f003 0320 	and.w	r3, r3, #32
 8002072:	613b      	str	r3, [r7, #16]
 8002074:	693b      	ldr	r3, [r7, #16]
}
 8002076:	e032      	b.n	80020de <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM16)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a1c      	ldr	r2, [pc, #112]	@ (80020f0 <HAL_TIM_Base_MspInit+0xc8>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d114      	bne.n	80020ac <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002082:	4b19      	ldr	r3, [pc, #100]	@ (80020e8 <HAL_TIM_Base_MspInit+0xc0>)
 8002084:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002086:	4a18      	ldr	r2, [pc, #96]	@ (80020e8 <HAL_TIM_Base_MspInit+0xc0>)
 8002088:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800208c:	6613      	str	r3, [r2, #96]	@ 0x60
 800208e:	4b16      	ldr	r3, [pc, #88]	@ (80020e8 <HAL_TIM_Base_MspInit+0xc0>)
 8002090:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002092:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002096:	60fb      	str	r3, [r7, #12]
 8002098:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 5, 0);
 800209a:	2200      	movs	r2, #0
 800209c:	2105      	movs	r1, #5
 800209e:	2019      	movs	r0, #25
 80020a0:	f000 fb9a 	bl	80027d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80020a4:	2019      	movs	r0, #25
 80020a6:	f000 fbb3 	bl	8002810 <HAL_NVIC_EnableIRQ>
}
 80020aa:	e018      	b.n	80020de <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM17)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a10      	ldr	r2, [pc, #64]	@ (80020f4 <HAL_TIM_Base_MspInit+0xcc>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d113      	bne.n	80020de <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM17_CLK_ENABLE();
 80020b6:	4b0c      	ldr	r3, [pc, #48]	@ (80020e8 <HAL_TIM_Base_MspInit+0xc0>)
 80020b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020ba:	4a0b      	ldr	r2, [pc, #44]	@ (80020e8 <HAL_TIM_Base_MspInit+0xc0>)
 80020bc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80020c0:	6613      	str	r3, [r2, #96]	@ 0x60
 80020c2:	4b09      	ldr	r3, [pc, #36]	@ (80020e8 <HAL_TIM_Base_MspInit+0xc0>)
 80020c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020c6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80020ca:	60bb      	str	r3, [r7, #8]
 80020cc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 5, 0);
 80020ce:	2200      	movs	r2, #0
 80020d0:	2105      	movs	r1, #5
 80020d2:	201a      	movs	r0, #26
 80020d4:	f000 fb80 	bl	80027d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 80020d8:	201a      	movs	r0, #26
 80020da:	f000 fb99 	bl	8002810 <HAL_NVIC_EnableIRQ>
}
 80020de:	bf00      	nop
 80020e0:	3718      	adds	r7, #24
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop
 80020e8:	40021000 	.word	0x40021000
 80020ec:	40001400 	.word	0x40001400
 80020f0:	40014400 	.word	0x40014400
 80020f4:	40014800 	.word	0x40014800

080020f8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b088      	sub	sp, #32
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002100:	f107 030c 	add.w	r3, r7, #12
 8002104:	2200      	movs	r2, #0
 8002106:	601a      	str	r2, [r3, #0]
 8002108:	605a      	str	r2, [r3, #4]
 800210a:	609a      	str	r2, [r3, #8]
 800210c:	60da      	str	r2, [r3, #12]
 800210e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002118:	d11c      	bne.n	8002154 <HAL_TIM_MspPostInit+0x5c>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800211a:	4b10      	ldr	r3, [pc, #64]	@ (800215c <HAL_TIM_MspPostInit+0x64>)
 800211c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800211e:	4a0f      	ldr	r2, [pc, #60]	@ (800215c <HAL_TIM_MspPostInit+0x64>)
 8002120:	f043 0301 	orr.w	r3, r3, #1
 8002124:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002126:	4b0d      	ldr	r3, [pc, #52]	@ (800215c <HAL_TIM_MspPostInit+0x64>)
 8002128:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800212a:	f003 0301 	and.w	r3, r3, #1
 800212e:	60bb      	str	r3, [r7, #8]
 8002130:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002132:	2301      	movs	r3, #1
 8002134:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002136:	2302      	movs	r3, #2
 8002138:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800213a:	2300      	movs	r3, #0
 800213c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800213e:	2300      	movs	r3, #0
 8002140:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002142:	2301      	movs	r3, #1
 8002144:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002146:	f107 030c 	add.w	r3, r7, #12
 800214a:	4619      	mov	r1, r3
 800214c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002150:	f000 fb6c 	bl	800282c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002154:	bf00      	nop
 8002156:	3720      	adds	r7, #32
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}
 800215c:	40021000 	.word	0x40021000

08002160 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b0ac      	sub	sp, #176	@ 0xb0
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002168:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800216c:	2200      	movs	r2, #0
 800216e:	601a      	str	r2, [r3, #0]
 8002170:	605a      	str	r2, [r3, #4]
 8002172:	609a      	str	r2, [r3, #8]
 8002174:	60da      	str	r2, [r3, #12]
 8002176:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002178:	f107 0314 	add.w	r3, r7, #20
 800217c:	2288      	movs	r2, #136	@ 0x88
 800217e:	2100      	movs	r1, #0
 8002180:	4618      	mov	r0, r3
 8002182:	f00c fbaf 	bl	800e8e4 <memset>
  if(huart->Instance==USART2)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4a21      	ldr	r2, [pc, #132]	@ (8002210 <HAL_UART_MspInit+0xb0>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d13b      	bne.n	8002208 <HAL_UART_MspInit+0xa8>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002190:	2302      	movs	r3, #2
 8002192:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002194:	2300      	movs	r3, #0
 8002196:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002198:	f107 0314 	add.w	r3, r7, #20
 800219c:	4618      	mov	r0, r3
 800219e:	f001 fbe7 	bl	8003970 <HAL_RCCEx_PeriphCLKConfig>
 80021a2:	4603      	mov	r3, r0
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d001      	beq.n	80021ac <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80021a8:	f7ff fece 	bl	8001f48 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80021ac:	4b19      	ldr	r3, [pc, #100]	@ (8002214 <HAL_UART_MspInit+0xb4>)
 80021ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021b0:	4a18      	ldr	r2, [pc, #96]	@ (8002214 <HAL_UART_MspInit+0xb4>)
 80021b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80021b6:	6593      	str	r3, [r2, #88]	@ 0x58
 80021b8:	4b16      	ldr	r3, [pc, #88]	@ (8002214 <HAL_UART_MspInit+0xb4>)
 80021ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021c0:	613b      	str	r3, [r7, #16]
 80021c2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021c4:	4b13      	ldr	r3, [pc, #76]	@ (8002214 <HAL_UART_MspInit+0xb4>)
 80021c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021c8:	4a12      	ldr	r2, [pc, #72]	@ (8002214 <HAL_UART_MspInit+0xb4>)
 80021ca:	f043 0301 	orr.w	r3, r3, #1
 80021ce:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80021d0:	4b10      	ldr	r3, [pc, #64]	@ (8002214 <HAL_UART_MspInit+0xb4>)
 80021d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021d4:	f003 0301 	and.w	r3, r3, #1
 80021d8:	60fb      	str	r3, [r7, #12]
 80021da:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80021dc:	230c      	movs	r3, #12
 80021de:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021e2:	2302      	movs	r3, #2
 80021e4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e8:	2300      	movs	r3, #0
 80021ea:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021ee:	2303      	movs	r3, #3
 80021f0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80021f4:	2307      	movs	r3, #7
 80021f6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021fa:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80021fe:	4619      	mov	r1, r3
 8002200:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002204:	f000 fb12 	bl	800282c <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8002208:	bf00      	nop
 800220a:	37b0      	adds	r7, #176	@ 0xb0
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}
 8002210:	40004400 	.word	0x40004400
 8002214:	40021000 	.word	0x40021000

08002218 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b08e      	sub	sp, #56	@ 0x38
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 8002220:	2300      	movs	r3, #0
 8002222:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002226:	4b34      	ldr	r3, [pc, #208]	@ (80022f8 <HAL_InitTick+0xe0>)
 8002228:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800222a:	4a33      	ldr	r2, [pc, #204]	@ (80022f8 <HAL_InitTick+0xe0>)
 800222c:	f043 0310 	orr.w	r3, r3, #16
 8002230:	6593      	str	r3, [r2, #88]	@ 0x58
 8002232:	4b31      	ldr	r3, [pc, #196]	@ (80022f8 <HAL_InitTick+0xe0>)
 8002234:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002236:	f003 0310 	and.w	r3, r3, #16
 800223a:	60fb      	str	r3, [r7, #12]
 800223c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800223e:	f107 0210 	add.w	r2, r7, #16
 8002242:	f107 0314 	add.w	r3, r7, #20
 8002246:	4611      	mov	r1, r2
 8002248:	4618      	mov	r0, r3
 800224a:	f001 faff 	bl	800384c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800224e:	6a3b      	ldr	r3, [r7, #32]
 8002250:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002252:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002254:	2b00      	cmp	r3, #0
 8002256:	d103      	bne.n	8002260 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002258:	f001 facc 	bl	80037f4 <HAL_RCC_GetPCLK1Freq>
 800225c:	6378      	str	r0, [r7, #52]	@ 0x34
 800225e:	e004      	b.n	800226a <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002260:	f001 fac8 	bl	80037f4 <HAL_RCC_GetPCLK1Freq>
 8002264:	4603      	mov	r3, r0
 8002266:	005b      	lsls	r3, r3, #1
 8002268:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800226a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800226c:	4a23      	ldr	r2, [pc, #140]	@ (80022fc <HAL_InitTick+0xe4>)
 800226e:	fba2 2303 	umull	r2, r3, r2, r3
 8002272:	0c9b      	lsrs	r3, r3, #18
 8002274:	3b01      	subs	r3, #1
 8002276:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002278:	4b21      	ldr	r3, [pc, #132]	@ (8002300 <HAL_InitTick+0xe8>)
 800227a:	4a22      	ldr	r2, [pc, #136]	@ (8002304 <HAL_InitTick+0xec>)
 800227c:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800227e:	4b20      	ldr	r3, [pc, #128]	@ (8002300 <HAL_InitTick+0xe8>)
 8002280:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002284:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002286:	4a1e      	ldr	r2, [pc, #120]	@ (8002300 <HAL_InitTick+0xe8>)
 8002288:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800228a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800228c:	4b1c      	ldr	r3, [pc, #112]	@ (8002300 <HAL_InitTick+0xe8>)
 800228e:	2200      	movs	r2, #0
 8002290:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002292:	4b1b      	ldr	r3, [pc, #108]	@ (8002300 <HAL_InitTick+0xe8>)
 8002294:	2200      	movs	r2, #0
 8002296:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002298:	4b19      	ldr	r3, [pc, #100]	@ (8002300 <HAL_InitTick+0xe8>)
 800229a:	2200      	movs	r2, #0
 800229c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800229e:	4818      	ldr	r0, [pc, #96]	@ (8002300 <HAL_InitTick+0xe8>)
 80022a0:	f002 fdbe 	bl	8004e20 <HAL_TIM_Base_Init>
 80022a4:	4603      	mov	r3, r0
 80022a6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80022aa:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d11b      	bne.n	80022ea <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80022b2:	4813      	ldr	r0, [pc, #76]	@ (8002300 <HAL_InitTick+0xe8>)
 80022b4:	f002 fe0c 	bl	8004ed0 <HAL_TIM_Base_Start_IT>
 80022b8:	4603      	mov	r3, r0
 80022ba:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80022be:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d111      	bne.n	80022ea <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80022c6:	2036      	movs	r0, #54	@ 0x36
 80022c8:	f000 faa2 	bl	8002810 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2b0f      	cmp	r3, #15
 80022d0:	d808      	bhi.n	80022e4 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80022d2:	2200      	movs	r2, #0
 80022d4:	6879      	ldr	r1, [r7, #4]
 80022d6:	2036      	movs	r0, #54	@ 0x36
 80022d8:	f000 fa7e 	bl	80027d8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80022dc:	4a0a      	ldr	r2, [pc, #40]	@ (8002308 <HAL_InitTick+0xf0>)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6013      	str	r3, [r2, #0]
 80022e2:	e002      	b.n	80022ea <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 80022e4:	2301      	movs	r3, #1
 80022e6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80022ea:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	3738      	adds	r7, #56	@ 0x38
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	40021000 	.word	0x40021000
 80022fc:	431bde83 	.word	0x431bde83
 8002300:	200009c4 	.word	0x200009c4
 8002304:	40001000 	.word	0x40001000
 8002308:	2000000c 	.word	0x2000000c

0800230c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800230c:	b480      	push	{r7}
 800230e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002310:	bf00      	nop
 8002312:	e7fd      	b.n	8002310 <NMI_Handler+0x4>

08002314 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002314:	b480      	push	{r7}
 8002316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002318:	bf00      	nop
 800231a:	e7fd      	b.n	8002318 <HardFault_Handler+0x4>

0800231c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800231c:	b480      	push	{r7}
 800231e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002320:	bf00      	nop
 8002322:	e7fd      	b.n	8002320 <MemManage_Handler+0x4>

08002324 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002324:	b480      	push	{r7}
 8002326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002328:	bf00      	nop
 800232a:	e7fd      	b.n	8002328 <BusFault_Handler+0x4>

0800232c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800232c:	b480      	push	{r7}
 800232e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002330:	bf00      	nop
 8002332:	e7fd      	b.n	8002330 <UsageFault_Handler+0x4>

08002334 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002334:	b480      	push	{r7}
 8002336:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002338:	bf00      	nop
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr

08002342 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002342:	b580      	push	{r7, lr}
 8002344:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(shutdownButton_Pin);
 8002346:	2002      	movs	r0, #2
 8002348:	f000 fc64 	bl	8002c14 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800234c:	bf00      	nop
 800234e:	bd80      	pop	{r7, pc}

08002350 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8002354:	4802      	ldr	r0, [pc, #8]	@ (8002360 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8002356:	f003 f857 	bl	8005408 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800235a:	bf00      	nop
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	20000310 	.word	0x20000310

08002364 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8002368:	4802      	ldr	r0, [pc, #8]	@ (8002374 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 800236a:	f003 f84d 	bl	8005408 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 800236e:	bf00      	nop
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	2000035c 	.word	0x2000035c

08002378 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800237c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002380:	f000 fc48 	bl	8002c14 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002384:	bf00      	nop
 8002386:	bd80      	pop	{r7, pc}

08002388 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800238c:	4802      	ldr	r0, [pc, #8]	@ (8002398 <TIM6_DAC_IRQHandler+0x10>)
 800238e:	f003 f83b 	bl	8005408 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002392:	bf00      	nop
 8002394:	bd80      	pop	{r7, pc}
 8002396:	bf00      	nop
 8002398:	200009c4 	.word	0x200009c4

0800239c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800239c:	b480      	push	{r7}
 800239e:	af00      	add	r7, sp, #0
  return 1;
 80023a0:	2301      	movs	r3, #1
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	46bd      	mov	sp, r7
 80023a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023aa:	4770      	bx	lr

080023ac <_kill>:

int _kill(int pid, int sig)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b082      	sub	sp, #8
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
 80023b4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80023b6:	f00c fb67 	bl	800ea88 <__errno>
 80023ba:	4603      	mov	r3, r0
 80023bc:	2216      	movs	r2, #22
 80023be:	601a      	str	r2, [r3, #0]
  return -1;
 80023c0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	3708      	adds	r7, #8
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bd80      	pop	{r7, pc}

080023cc <_exit>:

void _exit (int status)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b082      	sub	sp, #8
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80023d4:	f04f 31ff 	mov.w	r1, #4294967295
 80023d8:	6878      	ldr	r0, [r7, #4]
 80023da:	f7ff ffe7 	bl	80023ac <_kill>
  while (1) {}    /* Make sure we hang here */
 80023de:	bf00      	nop
 80023e0:	e7fd      	b.n	80023de <_exit+0x12>

080023e2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80023e2:	b580      	push	{r7, lr}
 80023e4:	b086      	sub	sp, #24
 80023e6:	af00      	add	r7, sp, #0
 80023e8:	60f8      	str	r0, [r7, #12]
 80023ea:	60b9      	str	r1, [r7, #8]
 80023ec:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023ee:	2300      	movs	r3, #0
 80023f0:	617b      	str	r3, [r7, #20]
 80023f2:	e00a      	b.n	800240a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80023f4:	f3af 8000 	nop.w
 80023f8:	4601      	mov	r1, r0
 80023fa:	68bb      	ldr	r3, [r7, #8]
 80023fc:	1c5a      	adds	r2, r3, #1
 80023fe:	60ba      	str	r2, [r7, #8]
 8002400:	b2ca      	uxtb	r2, r1
 8002402:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	3301      	adds	r3, #1
 8002408:	617b      	str	r3, [r7, #20]
 800240a:	697a      	ldr	r2, [r7, #20]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	429a      	cmp	r2, r3
 8002410:	dbf0      	blt.n	80023f4 <_read+0x12>
  }

  return len;
 8002412:	687b      	ldr	r3, [r7, #4]
}
 8002414:	4618      	mov	r0, r3
 8002416:	3718      	adds	r7, #24
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}

0800241c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b086      	sub	sp, #24
 8002420:	af00      	add	r7, sp, #0
 8002422:	60f8      	str	r0, [r7, #12]
 8002424:	60b9      	str	r1, [r7, #8]
 8002426:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002428:	2300      	movs	r3, #0
 800242a:	617b      	str	r3, [r7, #20]
 800242c:	e009      	b.n	8002442 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	1c5a      	adds	r2, r3, #1
 8002432:	60ba      	str	r2, [r7, #8]
 8002434:	781b      	ldrb	r3, [r3, #0]
 8002436:	4618      	mov	r0, r3
 8002438:	f7ff fc4e 	bl	8001cd8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	3301      	adds	r3, #1
 8002440:	617b      	str	r3, [r7, #20]
 8002442:	697a      	ldr	r2, [r7, #20]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	429a      	cmp	r2, r3
 8002448:	dbf1      	blt.n	800242e <_write+0x12>
  }
  return len;
 800244a:	687b      	ldr	r3, [r7, #4]
}
 800244c:	4618      	mov	r0, r3
 800244e:	3718      	adds	r7, #24
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}

08002454 <_close>:

int _close(int file)
{
 8002454:	b480      	push	{r7}
 8002456:	b083      	sub	sp, #12
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800245c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002460:	4618      	mov	r0, r3
 8002462:	370c      	adds	r7, #12
 8002464:	46bd      	mov	sp, r7
 8002466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246a:	4770      	bx	lr

0800246c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800246c:	b480      	push	{r7}
 800246e:	b083      	sub	sp, #12
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
 8002474:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800247c:	605a      	str	r2, [r3, #4]
  return 0;
 800247e:	2300      	movs	r3, #0
}
 8002480:	4618      	mov	r0, r3
 8002482:	370c      	adds	r7, #12
 8002484:	46bd      	mov	sp, r7
 8002486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248a:	4770      	bx	lr

0800248c <_isatty>:

int _isatty(int file)
{
 800248c:	b480      	push	{r7}
 800248e:	b083      	sub	sp, #12
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002494:	2301      	movs	r3, #1
}
 8002496:	4618      	mov	r0, r3
 8002498:	370c      	adds	r7, #12
 800249a:	46bd      	mov	sp, r7
 800249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a0:	4770      	bx	lr

080024a2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80024a2:	b480      	push	{r7}
 80024a4:	b085      	sub	sp, #20
 80024a6:	af00      	add	r7, sp, #0
 80024a8:	60f8      	str	r0, [r7, #12]
 80024aa:	60b9      	str	r1, [r7, #8]
 80024ac:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80024ae:	2300      	movs	r3, #0
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	3714      	adds	r7, #20
 80024b4:	46bd      	mov	sp, r7
 80024b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ba:	4770      	bx	lr

080024bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b086      	sub	sp, #24
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80024c4:	4a14      	ldr	r2, [pc, #80]	@ (8002518 <_sbrk+0x5c>)
 80024c6:	4b15      	ldr	r3, [pc, #84]	@ (800251c <_sbrk+0x60>)
 80024c8:	1ad3      	subs	r3, r2, r3
 80024ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80024d0:	4b13      	ldr	r3, [pc, #76]	@ (8002520 <_sbrk+0x64>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d102      	bne.n	80024de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80024d8:	4b11      	ldr	r3, [pc, #68]	@ (8002520 <_sbrk+0x64>)
 80024da:	4a12      	ldr	r2, [pc, #72]	@ (8002524 <_sbrk+0x68>)
 80024dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80024de:	4b10      	ldr	r3, [pc, #64]	@ (8002520 <_sbrk+0x64>)
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	4413      	add	r3, r2
 80024e6:	693a      	ldr	r2, [r7, #16]
 80024e8:	429a      	cmp	r2, r3
 80024ea:	d207      	bcs.n	80024fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80024ec:	f00c facc 	bl	800ea88 <__errno>
 80024f0:	4603      	mov	r3, r0
 80024f2:	220c      	movs	r2, #12
 80024f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80024f6:	f04f 33ff 	mov.w	r3, #4294967295
 80024fa:	e009      	b.n	8002510 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80024fc:	4b08      	ldr	r3, [pc, #32]	@ (8002520 <_sbrk+0x64>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002502:	4b07      	ldr	r3, [pc, #28]	@ (8002520 <_sbrk+0x64>)
 8002504:	681a      	ldr	r2, [r3, #0]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	4413      	add	r3, r2
 800250a:	4a05      	ldr	r2, [pc, #20]	@ (8002520 <_sbrk+0x64>)
 800250c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800250e:	68fb      	ldr	r3, [r7, #12]
}
 8002510:	4618      	mov	r0, r3
 8002512:	3718      	adds	r7, #24
 8002514:	46bd      	mov	sp, r7
 8002516:	bd80      	pop	{r7, pc}
 8002518:	20018000 	.word	0x20018000
 800251c:	00000400 	.word	0x00000400
 8002520:	20000a10 	.word	0x20000a10
 8002524:	200040a8 	.word	0x200040a8

08002528 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002528:	b480      	push	{r7}
 800252a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800252c:	4b06      	ldr	r3, [pc, #24]	@ (8002548 <SystemInit+0x20>)
 800252e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002532:	4a05      	ldr	r2, [pc, #20]	@ (8002548 <SystemInit+0x20>)
 8002534:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002538:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 800253c:	bf00      	nop
 800253e:	46bd      	mov	sp, r7
 8002540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002544:	4770      	bx	lr
 8002546:	bf00      	nop
 8002548:	e000ed00 	.word	0xe000ed00

0800254c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800254c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002584 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002550:	f7ff ffea 	bl	8002528 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002554:	480c      	ldr	r0, [pc, #48]	@ (8002588 <LoopForever+0x6>)
  ldr r1, =_edata
 8002556:	490d      	ldr	r1, [pc, #52]	@ (800258c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002558:	4a0d      	ldr	r2, [pc, #52]	@ (8002590 <LoopForever+0xe>)
  movs r3, #0
 800255a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800255c:	e002      	b.n	8002564 <LoopCopyDataInit>

0800255e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800255e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002560:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002562:	3304      	adds	r3, #4

08002564 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002564:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002566:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002568:	d3f9      	bcc.n	800255e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800256a:	4a0a      	ldr	r2, [pc, #40]	@ (8002594 <LoopForever+0x12>)
  ldr r4, =_ebss
 800256c:	4c0a      	ldr	r4, [pc, #40]	@ (8002598 <LoopForever+0x16>)
  movs r3, #0
 800256e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002570:	e001      	b.n	8002576 <LoopFillZerobss>

08002572 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002572:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002574:	3204      	adds	r2, #4

08002576 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002576:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002578:	d3fb      	bcc.n	8002572 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800257a:	f00c fa8b 	bl	800ea94 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800257e:	f7fe fd85 	bl	800108c <main>

08002582 <LoopForever>:

LoopForever:
    b LoopForever
 8002582:	e7fe      	b.n	8002582 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002584:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002588:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800258c:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 8002590:	080112c8 	.word	0x080112c8
  ldr r2, =_sbss
 8002594:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 8002598:	200040a4 	.word	0x200040a4

0800259c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800259c:	e7fe      	b.n	800259c <ADC1_2_IRQHandler>
	...

080025a0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b082      	sub	sp, #8
 80025a4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80025a6:	2300      	movs	r3, #0
 80025a8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80025aa:	4b0c      	ldr	r3, [pc, #48]	@ (80025dc <HAL_Init+0x3c>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a0b      	ldr	r2, [pc, #44]	@ (80025dc <HAL_Init+0x3c>)
 80025b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80025b4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025b6:	2003      	movs	r0, #3
 80025b8:	f000 f903 	bl	80027c2 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80025bc:	200f      	movs	r0, #15
 80025be:	f7ff fe2b 	bl	8002218 <HAL_InitTick>
 80025c2:	4603      	mov	r3, r0
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d002      	beq.n	80025ce <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80025c8:	2301      	movs	r3, #1
 80025ca:	71fb      	strb	r3, [r7, #7]
 80025cc:	e001      	b.n	80025d2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80025ce:	f7ff fcc1 	bl	8001f54 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80025d2:	79fb      	ldrb	r3, [r7, #7]
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	3708      	adds	r7, #8
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd80      	pop	{r7, pc}
 80025dc:	40022000 	.word	0x40022000

080025e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025e0:	b480      	push	{r7}
 80025e2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80025e4:	4b06      	ldr	r3, [pc, #24]	@ (8002600 <HAL_IncTick+0x20>)
 80025e6:	781b      	ldrb	r3, [r3, #0]
 80025e8:	461a      	mov	r2, r3
 80025ea:	4b06      	ldr	r3, [pc, #24]	@ (8002604 <HAL_IncTick+0x24>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4413      	add	r3, r2
 80025f0:	4a04      	ldr	r2, [pc, #16]	@ (8002604 <HAL_IncTick+0x24>)
 80025f2:	6013      	str	r3, [r2, #0]
}
 80025f4:	bf00      	nop
 80025f6:	46bd      	mov	sp, r7
 80025f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fc:	4770      	bx	lr
 80025fe:	bf00      	nop
 8002600:	20000010 	.word	0x20000010
 8002604:	20000a14 	.word	0x20000a14

08002608 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002608:	b480      	push	{r7}
 800260a:	af00      	add	r7, sp, #0
  return uwTick;
 800260c:	4b03      	ldr	r3, [pc, #12]	@ (800261c <HAL_GetTick+0x14>)
 800260e:	681b      	ldr	r3, [r3, #0]
}
 8002610:	4618      	mov	r0, r3
 8002612:	46bd      	mov	sp, r7
 8002614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002618:	4770      	bx	lr
 800261a:	bf00      	nop
 800261c:	20000a14 	.word	0x20000a14

08002620 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b084      	sub	sp, #16
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002628:	f7ff ffee 	bl	8002608 <HAL_GetTick>
 800262c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002638:	d005      	beq.n	8002646 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800263a:	4b0a      	ldr	r3, [pc, #40]	@ (8002664 <HAL_Delay+0x44>)
 800263c:	781b      	ldrb	r3, [r3, #0]
 800263e:	461a      	mov	r2, r3
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	4413      	add	r3, r2
 8002644:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002646:	bf00      	nop
 8002648:	f7ff ffde 	bl	8002608 <HAL_GetTick>
 800264c:	4602      	mov	r2, r0
 800264e:	68bb      	ldr	r3, [r7, #8]
 8002650:	1ad3      	subs	r3, r2, r3
 8002652:	68fa      	ldr	r2, [r7, #12]
 8002654:	429a      	cmp	r2, r3
 8002656:	d8f7      	bhi.n	8002648 <HAL_Delay+0x28>
  {
  }
}
 8002658:	bf00      	nop
 800265a:	bf00      	nop
 800265c:	3710      	adds	r7, #16
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}
 8002662:	bf00      	nop
 8002664:	20000010 	.word	0x20000010

08002668 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002668:	b480      	push	{r7}
 800266a:	b085      	sub	sp, #20
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	f003 0307 	and.w	r3, r3, #7
 8002676:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002678:	4b0c      	ldr	r3, [pc, #48]	@ (80026ac <__NVIC_SetPriorityGrouping+0x44>)
 800267a:	68db      	ldr	r3, [r3, #12]
 800267c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800267e:	68ba      	ldr	r2, [r7, #8]
 8002680:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002684:	4013      	ands	r3, r2
 8002686:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002690:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002694:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002698:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800269a:	4a04      	ldr	r2, [pc, #16]	@ (80026ac <__NVIC_SetPriorityGrouping+0x44>)
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	60d3      	str	r3, [r2, #12]
}
 80026a0:	bf00      	nop
 80026a2:	3714      	adds	r7, #20
 80026a4:	46bd      	mov	sp, r7
 80026a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026aa:	4770      	bx	lr
 80026ac:	e000ed00 	.word	0xe000ed00

080026b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026b0:	b480      	push	{r7}
 80026b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026b4:	4b04      	ldr	r3, [pc, #16]	@ (80026c8 <__NVIC_GetPriorityGrouping+0x18>)
 80026b6:	68db      	ldr	r3, [r3, #12]
 80026b8:	0a1b      	lsrs	r3, r3, #8
 80026ba:	f003 0307 	and.w	r3, r3, #7
}
 80026be:	4618      	mov	r0, r3
 80026c0:	46bd      	mov	sp, r7
 80026c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c6:	4770      	bx	lr
 80026c8:	e000ed00 	.word	0xe000ed00

080026cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b083      	sub	sp, #12
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	4603      	mov	r3, r0
 80026d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	db0b      	blt.n	80026f6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026de:	79fb      	ldrb	r3, [r7, #7]
 80026e0:	f003 021f 	and.w	r2, r3, #31
 80026e4:	4907      	ldr	r1, [pc, #28]	@ (8002704 <__NVIC_EnableIRQ+0x38>)
 80026e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ea:	095b      	lsrs	r3, r3, #5
 80026ec:	2001      	movs	r0, #1
 80026ee:	fa00 f202 	lsl.w	r2, r0, r2
 80026f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80026f6:	bf00      	nop
 80026f8:	370c      	adds	r7, #12
 80026fa:	46bd      	mov	sp, r7
 80026fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002700:	4770      	bx	lr
 8002702:	bf00      	nop
 8002704:	e000e100 	.word	0xe000e100

08002708 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002708:	b480      	push	{r7}
 800270a:	b083      	sub	sp, #12
 800270c:	af00      	add	r7, sp, #0
 800270e:	4603      	mov	r3, r0
 8002710:	6039      	str	r1, [r7, #0]
 8002712:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002714:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002718:	2b00      	cmp	r3, #0
 800271a:	db0a      	blt.n	8002732 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	b2da      	uxtb	r2, r3
 8002720:	490c      	ldr	r1, [pc, #48]	@ (8002754 <__NVIC_SetPriority+0x4c>)
 8002722:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002726:	0112      	lsls	r2, r2, #4
 8002728:	b2d2      	uxtb	r2, r2
 800272a:	440b      	add	r3, r1
 800272c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002730:	e00a      	b.n	8002748 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	b2da      	uxtb	r2, r3
 8002736:	4908      	ldr	r1, [pc, #32]	@ (8002758 <__NVIC_SetPriority+0x50>)
 8002738:	79fb      	ldrb	r3, [r7, #7]
 800273a:	f003 030f 	and.w	r3, r3, #15
 800273e:	3b04      	subs	r3, #4
 8002740:	0112      	lsls	r2, r2, #4
 8002742:	b2d2      	uxtb	r2, r2
 8002744:	440b      	add	r3, r1
 8002746:	761a      	strb	r2, [r3, #24]
}
 8002748:	bf00      	nop
 800274a:	370c      	adds	r7, #12
 800274c:	46bd      	mov	sp, r7
 800274e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002752:	4770      	bx	lr
 8002754:	e000e100 	.word	0xe000e100
 8002758:	e000ed00 	.word	0xe000ed00

0800275c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800275c:	b480      	push	{r7}
 800275e:	b089      	sub	sp, #36	@ 0x24
 8002760:	af00      	add	r7, sp, #0
 8002762:	60f8      	str	r0, [r7, #12]
 8002764:	60b9      	str	r1, [r7, #8]
 8002766:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	f003 0307 	and.w	r3, r3, #7
 800276e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002770:	69fb      	ldr	r3, [r7, #28]
 8002772:	f1c3 0307 	rsb	r3, r3, #7
 8002776:	2b04      	cmp	r3, #4
 8002778:	bf28      	it	cs
 800277a:	2304      	movcs	r3, #4
 800277c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800277e:	69fb      	ldr	r3, [r7, #28]
 8002780:	3304      	adds	r3, #4
 8002782:	2b06      	cmp	r3, #6
 8002784:	d902      	bls.n	800278c <NVIC_EncodePriority+0x30>
 8002786:	69fb      	ldr	r3, [r7, #28]
 8002788:	3b03      	subs	r3, #3
 800278a:	e000      	b.n	800278e <NVIC_EncodePriority+0x32>
 800278c:	2300      	movs	r3, #0
 800278e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002790:	f04f 32ff 	mov.w	r2, #4294967295
 8002794:	69bb      	ldr	r3, [r7, #24]
 8002796:	fa02 f303 	lsl.w	r3, r2, r3
 800279a:	43da      	mvns	r2, r3
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	401a      	ands	r2, r3
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027a4:	f04f 31ff 	mov.w	r1, #4294967295
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	fa01 f303 	lsl.w	r3, r1, r3
 80027ae:	43d9      	mvns	r1, r3
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027b4:	4313      	orrs	r3, r2
         );
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	3724      	adds	r7, #36	@ 0x24
 80027ba:	46bd      	mov	sp, r7
 80027bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c0:	4770      	bx	lr

080027c2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027c2:	b580      	push	{r7, lr}
 80027c4:	b082      	sub	sp, #8
 80027c6:	af00      	add	r7, sp, #0
 80027c8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027ca:	6878      	ldr	r0, [r7, #4]
 80027cc:	f7ff ff4c 	bl	8002668 <__NVIC_SetPriorityGrouping>
}
 80027d0:	bf00      	nop
 80027d2:	3708      	adds	r7, #8
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}

080027d8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b086      	sub	sp, #24
 80027dc:	af00      	add	r7, sp, #0
 80027de:	4603      	mov	r3, r0
 80027e0:	60b9      	str	r1, [r7, #8]
 80027e2:	607a      	str	r2, [r7, #4]
 80027e4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80027e6:	2300      	movs	r3, #0
 80027e8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80027ea:	f7ff ff61 	bl	80026b0 <__NVIC_GetPriorityGrouping>
 80027ee:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027f0:	687a      	ldr	r2, [r7, #4]
 80027f2:	68b9      	ldr	r1, [r7, #8]
 80027f4:	6978      	ldr	r0, [r7, #20]
 80027f6:	f7ff ffb1 	bl	800275c <NVIC_EncodePriority>
 80027fa:	4602      	mov	r2, r0
 80027fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002800:	4611      	mov	r1, r2
 8002802:	4618      	mov	r0, r3
 8002804:	f7ff ff80 	bl	8002708 <__NVIC_SetPriority>
}
 8002808:	bf00      	nop
 800280a:	3718      	adds	r7, #24
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}

08002810 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b082      	sub	sp, #8
 8002814:	af00      	add	r7, sp, #0
 8002816:	4603      	mov	r3, r0
 8002818:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800281a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800281e:	4618      	mov	r0, r3
 8002820:	f7ff ff54 	bl	80026cc <__NVIC_EnableIRQ>
}
 8002824:	bf00      	nop
 8002826:	3708      	adds	r7, #8
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}

0800282c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800282c:	b480      	push	{r7}
 800282e:	b087      	sub	sp, #28
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
 8002834:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002836:	2300      	movs	r3, #0
 8002838:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800283a:	e17f      	b.n	8002b3c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	2101      	movs	r1, #1
 8002842:	697b      	ldr	r3, [r7, #20]
 8002844:	fa01 f303 	lsl.w	r3, r1, r3
 8002848:	4013      	ands	r3, r2
 800284a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	2b00      	cmp	r3, #0
 8002850:	f000 8171 	beq.w	8002b36 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	f003 0303 	and.w	r3, r3, #3
 800285c:	2b01      	cmp	r3, #1
 800285e:	d005      	beq.n	800286c <HAL_GPIO_Init+0x40>
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	f003 0303 	and.w	r3, r3, #3
 8002868:	2b02      	cmp	r3, #2
 800286a:	d130      	bne.n	80028ce <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	005b      	lsls	r3, r3, #1
 8002876:	2203      	movs	r2, #3
 8002878:	fa02 f303 	lsl.w	r3, r2, r3
 800287c:	43db      	mvns	r3, r3
 800287e:	693a      	ldr	r2, [r7, #16]
 8002880:	4013      	ands	r3, r2
 8002882:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	68da      	ldr	r2, [r3, #12]
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	005b      	lsls	r3, r3, #1
 800288c:	fa02 f303 	lsl.w	r3, r2, r3
 8002890:	693a      	ldr	r2, [r7, #16]
 8002892:	4313      	orrs	r3, r2
 8002894:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	693a      	ldr	r2, [r7, #16]
 800289a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80028a2:	2201      	movs	r2, #1
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	fa02 f303 	lsl.w	r3, r2, r3
 80028aa:	43db      	mvns	r3, r3
 80028ac:	693a      	ldr	r2, [r7, #16]
 80028ae:	4013      	ands	r3, r2
 80028b0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	091b      	lsrs	r3, r3, #4
 80028b8:	f003 0201 	and.w	r2, r3, #1
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	fa02 f303 	lsl.w	r3, r2, r3
 80028c2:	693a      	ldr	r2, [r7, #16]
 80028c4:	4313      	orrs	r3, r2
 80028c6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	693a      	ldr	r2, [r7, #16]
 80028cc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	f003 0303 	and.w	r3, r3, #3
 80028d6:	2b03      	cmp	r3, #3
 80028d8:	d118      	bne.n	800290c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028de:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80028e0:	2201      	movs	r2, #1
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	fa02 f303 	lsl.w	r3, r2, r3
 80028e8:	43db      	mvns	r3, r3
 80028ea:	693a      	ldr	r2, [r7, #16]
 80028ec:	4013      	ands	r3, r2
 80028ee:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	08db      	lsrs	r3, r3, #3
 80028f6:	f003 0201 	and.w	r2, r3, #1
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002900:	693a      	ldr	r2, [r7, #16]
 8002902:	4313      	orrs	r3, r2
 8002904:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	693a      	ldr	r2, [r7, #16]
 800290a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	f003 0303 	and.w	r3, r3, #3
 8002914:	2b03      	cmp	r3, #3
 8002916:	d017      	beq.n	8002948 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	005b      	lsls	r3, r3, #1
 8002922:	2203      	movs	r2, #3
 8002924:	fa02 f303 	lsl.w	r3, r2, r3
 8002928:	43db      	mvns	r3, r3
 800292a:	693a      	ldr	r2, [r7, #16]
 800292c:	4013      	ands	r3, r2
 800292e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	689a      	ldr	r2, [r3, #8]
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	005b      	lsls	r3, r3, #1
 8002938:	fa02 f303 	lsl.w	r3, r2, r3
 800293c:	693a      	ldr	r2, [r7, #16]
 800293e:	4313      	orrs	r3, r2
 8002940:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	693a      	ldr	r2, [r7, #16]
 8002946:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	f003 0303 	and.w	r3, r3, #3
 8002950:	2b02      	cmp	r3, #2
 8002952:	d123      	bne.n	800299c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	08da      	lsrs	r2, r3, #3
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	3208      	adds	r2, #8
 800295c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002960:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	f003 0307 	and.w	r3, r3, #7
 8002968:	009b      	lsls	r3, r3, #2
 800296a:	220f      	movs	r2, #15
 800296c:	fa02 f303 	lsl.w	r3, r2, r3
 8002970:	43db      	mvns	r3, r3
 8002972:	693a      	ldr	r2, [r7, #16]
 8002974:	4013      	ands	r3, r2
 8002976:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	691a      	ldr	r2, [r3, #16]
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	f003 0307 	and.w	r3, r3, #7
 8002982:	009b      	lsls	r3, r3, #2
 8002984:	fa02 f303 	lsl.w	r3, r2, r3
 8002988:	693a      	ldr	r2, [r7, #16]
 800298a:	4313      	orrs	r3, r2
 800298c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	08da      	lsrs	r2, r3, #3
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	3208      	adds	r2, #8
 8002996:	6939      	ldr	r1, [r7, #16]
 8002998:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	005b      	lsls	r3, r3, #1
 80029a6:	2203      	movs	r2, #3
 80029a8:	fa02 f303 	lsl.w	r3, r2, r3
 80029ac:	43db      	mvns	r3, r3
 80029ae:	693a      	ldr	r2, [r7, #16]
 80029b0:	4013      	ands	r3, r2
 80029b2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	f003 0203 	and.w	r2, r3, #3
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	005b      	lsls	r3, r3, #1
 80029c0:	fa02 f303 	lsl.w	r3, r2, r3
 80029c4:	693a      	ldr	r2, [r7, #16]
 80029c6:	4313      	orrs	r3, r2
 80029c8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	693a      	ldr	r2, [r7, #16]
 80029ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80029d8:	2b00      	cmp	r3, #0
 80029da:	f000 80ac 	beq.w	8002b36 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029de:	4b5f      	ldr	r3, [pc, #380]	@ (8002b5c <HAL_GPIO_Init+0x330>)
 80029e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029e2:	4a5e      	ldr	r2, [pc, #376]	@ (8002b5c <HAL_GPIO_Init+0x330>)
 80029e4:	f043 0301 	orr.w	r3, r3, #1
 80029e8:	6613      	str	r3, [r2, #96]	@ 0x60
 80029ea:	4b5c      	ldr	r3, [pc, #368]	@ (8002b5c <HAL_GPIO_Init+0x330>)
 80029ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029ee:	f003 0301 	and.w	r3, r3, #1
 80029f2:	60bb      	str	r3, [r7, #8]
 80029f4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80029f6:	4a5a      	ldr	r2, [pc, #360]	@ (8002b60 <HAL_GPIO_Init+0x334>)
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	089b      	lsrs	r3, r3, #2
 80029fc:	3302      	adds	r3, #2
 80029fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a02:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	f003 0303 	and.w	r3, r3, #3
 8002a0a:	009b      	lsls	r3, r3, #2
 8002a0c:	220f      	movs	r2, #15
 8002a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a12:	43db      	mvns	r3, r3
 8002a14:	693a      	ldr	r2, [r7, #16]
 8002a16:	4013      	ands	r3, r2
 8002a18:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002a20:	d025      	beq.n	8002a6e <HAL_GPIO_Init+0x242>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	4a4f      	ldr	r2, [pc, #316]	@ (8002b64 <HAL_GPIO_Init+0x338>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d01f      	beq.n	8002a6a <HAL_GPIO_Init+0x23e>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	4a4e      	ldr	r2, [pc, #312]	@ (8002b68 <HAL_GPIO_Init+0x33c>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d019      	beq.n	8002a66 <HAL_GPIO_Init+0x23a>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	4a4d      	ldr	r2, [pc, #308]	@ (8002b6c <HAL_GPIO_Init+0x340>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d013      	beq.n	8002a62 <HAL_GPIO_Init+0x236>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	4a4c      	ldr	r2, [pc, #304]	@ (8002b70 <HAL_GPIO_Init+0x344>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d00d      	beq.n	8002a5e <HAL_GPIO_Init+0x232>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	4a4b      	ldr	r2, [pc, #300]	@ (8002b74 <HAL_GPIO_Init+0x348>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d007      	beq.n	8002a5a <HAL_GPIO_Init+0x22e>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	4a4a      	ldr	r2, [pc, #296]	@ (8002b78 <HAL_GPIO_Init+0x34c>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d101      	bne.n	8002a56 <HAL_GPIO_Init+0x22a>
 8002a52:	2306      	movs	r3, #6
 8002a54:	e00c      	b.n	8002a70 <HAL_GPIO_Init+0x244>
 8002a56:	2307      	movs	r3, #7
 8002a58:	e00a      	b.n	8002a70 <HAL_GPIO_Init+0x244>
 8002a5a:	2305      	movs	r3, #5
 8002a5c:	e008      	b.n	8002a70 <HAL_GPIO_Init+0x244>
 8002a5e:	2304      	movs	r3, #4
 8002a60:	e006      	b.n	8002a70 <HAL_GPIO_Init+0x244>
 8002a62:	2303      	movs	r3, #3
 8002a64:	e004      	b.n	8002a70 <HAL_GPIO_Init+0x244>
 8002a66:	2302      	movs	r3, #2
 8002a68:	e002      	b.n	8002a70 <HAL_GPIO_Init+0x244>
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e000      	b.n	8002a70 <HAL_GPIO_Init+0x244>
 8002a6e:	2300      	movs	r3, #0
 8002a70:	697a      	ldr	r2, [r7, #20]
 8002a72:	f002 0203 	and.w	r2, r2, #3
 8002a76:	0092      	lsls	r2, r2, #2
 8002a78:	4093      	lsls	r3, r2
 8002a7a:	693a      	ldr	r2, [r7, #16]
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002a80:	4937      	ldr	r1, [pc, #220]	@ (8002b60 <HAL_GPIO_Init+0x334>)
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	089b      	lsrs	r3, r3, #2
 8002a86:	3302      	adds	r3, #2
 8002a88:	693a      	ldr	r2, [r7, #16]
 8002a8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002a8e:	4b3b      	ldr	r3, [pc, #236]	@ (8002b7c <HAL_GPIO_Init+0x350>)
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	43db      	mvns	r3, r3
 8002a98:	693a      	ldr	r2, [r7, #16]
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d003      	beq.n	8002ab2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002aaa:	693a      	ldr	r2, [r7, #16]
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002ab2:	4a32      	ldr	r2, [pc, #200]	@ (8002b7c <HAL_GPIO_Init+0x350>)
 8002ab4:	693b      	ldr	r3, [r7, #16]
 8002ab6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002ab8:	4b30      	ldr	r3, [pc, #192]	@ (8002b7c <HAL_GPIO_Init+0x350>)
 8002aba:	68db      	ldr	r3, [r3, #12]
 8002abc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	43db      	mvns	r3, r3
 8002ac2:	693a      	ldr	r2, [r7, #16]
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d003      	beq.n	8002adc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002ad4:	693a      	ldr	r2, [r7, #16]
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002adc:	4a27      	ldr	r2, [pc, #156]	@ (8002b7c <HAL_GPIO_Init+0x350>)
 8002ade:	693b      	ldr	r3, [r7, #16]
 8002ae0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002ae2:	4b26      	ldr	r3, [pc, #152]	@ (8002b7c <HAL_GPIO_Init+0x350>)
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	43db      	mvns	r3, r3
 8002aec:	693a      	ldr	r2, [r7, #16]
 8002aee:	4013      	ands	r3, r2
 8002af0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d003      	beq.n	8002b06 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002afe:	693a      	ldr	r2, [r7, #16]
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	4313      	orrs	r3, r2
 8002b04:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002b06:	4a1d      	ldr	r2, [pc, #116]	@ (8002b7c <HAL_GPIO_Init+0x350>)
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002b0c:	4b1b      	ldr	r3, [pc, #108]	@ (8002b7c <HAL_GPIO_Init+0x350>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	43db      	mvns	r3, r3
 8002b16:	693a      	ldr	r2, [r7, #16]
 8002b18:	4013      	ands	r3, r2
 8002b1a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d003      	beq.n	8002b30 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002b28:	693a      	ldr	r2, [r7, #16]
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002b30:	4a12      	ldr	r2, [pc, #72]	@ (8002b7c <HAL_GPIO_Init+0x350>)
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	3301      	adds	r3, #1
 8002b3a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	681a      	ldr	r2, [r3, #0]
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	fa22 f303 	lsr.w	r3, r2, r3
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	f47f ae78 	bne.w	800283c <HAL_GPIO_Init+0x10>
  }
}
 8002b4c:	bf00      	nop
 8002b4e:	bf00      	nop
 8002b50:	371c      	adds	r7, #28
 8002b52:	46bd      	mov	sp, r7
 8002b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b58:	4770      	bx	lr
 8002b5a:	bf00      	nop
 8002b5c:	40021000 	.word	0x40021000
 8002b60:	40010000 	.word	0x40010000
 8002b64:	48000400 	.word	0x48000400
 8002b68:	48000800 	.word	0x48000800
 8002b6c:	48000c00 	.word	0x48000c00
 8002b70:	48001000 	.word	0x48001000
 8002b74:	48001400 	.word	0x48001400
 8002b78:	48001800 	.word	0x48001800
 8002b7c:	40010400 	.word	0x40010400

08002b80 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b085      	sub	sp, #20
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
 8002b88:	460b      	mov	r3, r1
 8002b8a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	691a      	ldr	r2, [r3, #16]
 8002b90:	887b      	ldrh	r3, [r7, #2]
 8002b92:	4013      	ands	r3, r2
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d002      	beq.n	8002b9e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	73fb      	strb	r3, [r7, #15]
 8002b9c:	e001      	b.n	8002ba2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002ba2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	3714      	adds	r7, #20
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bae:	4770      	bx	lr

08002bb0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b083      	sub	sp, #12
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
 8002bb8:	460b      	mov	r3, r1
 8002bba:	807b      	strh	r3, [r7, #2]
 8002bbc:	4613      	mov	r3, r2
 8002bbe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002bc0:	787b      	ldrb	r3, [r7, #1]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d003      	beq.n	8002bce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002bc6:	887a      	ldrh	r2, [r7, #2]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002bcc:	e002      	b.n	8002bd4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002bce:	887a      	ldrh	r2, [r7, #2]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002bd4:	bf00      	nop
 8002bd6:	370c      	adds	r7, #12
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bde:	4770      	bx	lr

08002be0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b085      	sub	sp, #20
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
 8002be8:	460b      	mov	r3, r1
 8002bea:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	695b      	ldr	r3, [r3, #20]
 8002bf0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002bf2:	887a      	ldrh	r2, [r7, #2]
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	4013      	ands	r3, r2
 8002bf8:	041a      	lsls	r2, r3, #16
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	43d9      	mvns	r1, r3
 8002bfe:	887b      	ldrh	r3, [r7, #2]
 8002c00:	400b      	ands	r3, r1
 8002c02:	431a      	orrs	r2, r3
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	619a      	str	r2, [r3, #24]
}
 8002c08:	bf00      	nop
 8002c0a:	3714      	adds	r7, #20
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c12:	4770      	bx	lr

08002c14 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b082      	sub	sp, #8
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002c1e:	4b08      	ldr	r3, [pc, #32]	@ (8002c40 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002c20:	695a      	ldr	r2, [r3, #20]
 8002c22:	88fb      	ldrh	r3, [r7, #6]
 8002c24:	4013      	ands	r3, r2
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d006      	beq.n	8002c38 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002c2a:	4a05      	ldr	r2, [pc, #20]	@ (8002c40 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002c2c:	88fb      	ldrh	r3, [r7, #6]
 8002c2e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002c30:	88fb      	ldrh	r3, [r7, #6]
 8002c32:	4618      	mov	r0, r3
 8002c34:	f7fe fd40 	bl	80016b8 <HAL_GPIO_EXTI_Callback>
  }
}
 8002c38:	bf00      	nop
 8002c3a:	3708      	adds	r7, #8
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}
 8002c40:	40010400 	.word	0x40010400

08002c44 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002c44:	b480      	push	{r7}
 8002c46:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002c48:	4b04      	ldr	r3, [pc, #16]	@ (8002c5c <HAL_PWREx_GetVoltageRange+0x18>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	46bd      	mov	sp, r7
 8002c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c58:	4770      	bx	lr
 8002c5a:	bf00      	nop
 8002c5c:	40007000 	.word	0x40007000

08002c60 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b085      	sub	sp, #20
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002c6e:	d130      	bne.n	8002cd2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c70:	4b23      	ldr	r3, [pc, #140]	@ (8002d00 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002c78:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002c7c:	d038      	beq.n	8002cf0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c7e:	4b20      	ldr	r3, [pc, #128]	@ (8002d00 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002c86:	4a1e      	ldr	r2, [pc, #120]	@ (8002d00 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c88:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002c8c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002c8e:	4b1d      	ldr	r3, [pc, #116]	@ (8002d04 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	2232      	movs	r2, #50	@ 0x32
 8002c94:	fb02 f303 	mul.w	r3, r2, r3
 8002c98:	4a1b      	ldr	r2, [pc, #108]	@ (8002d08 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002c9a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c9e:	0c9b      	lsrs	r3, r3, #18
 8002ca0:	3301      	adds	r3, #1
 8002ca2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002ca4:	e002      	b.n	8002cac <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	3b01      	subs	r3, #1
 8002caa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002cac:	4b14      	ldr	r3, [pc, #80]	@ (8002d00 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002cae:	695b      	ldr	r3, [r3, #20]
 8002cb0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cb4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002cb8:	d102      	bne.n	8002cc0 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d1f2      	bne.n	8002ca6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002cc0:	4b0f      	ldr	r3, [pc, #60]	@ (8002d00 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002cc2:	695b      	ldr	r3, [r3, #20]
 8002cc4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cc8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ccc:	d110      	bne.n	8002cf0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002cce:	2303      	movs	r3, #3
 8002cd0:	e00f      	b.n	8002cf2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002cd2:	4b0b      	ldr	r3, [pc, #44]	@ (8002d00 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002cda:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002cde:	d007      	beq.n	8002cf0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002ce0:	4b07      	ldr	r3, [pc, #28]	@ (8002d00 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002ce8:	4a05      	ldr	r2, [pc, #20]	@ (8002d00 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002cea:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002cee:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002cf0:	2300      	movs	r3, #0
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	3714      	adds	r7, #20
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfc:	4770      	bx	lr
 8002cfe:	bf00      	nop
 8002d00:	40007000 	.word	0x40007000
 8002d04:	20000008 	.word	0x20000008
 8002d08:	431bde83 	.word	0x431bde83

08002d0c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b088      	sub	sp, #32
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d101      	bne.n	8002d1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e3ca      	b.n	80034b4 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d1e:	4b97      	ldr	r3, [pc, #604]	@ (8002f7c <HAL_RCC_OscConfig+0x270>)
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	f003 030c 	and.w	r3, r3, #12
 8002d26:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d28:	4b94      	ldr	r3, [pc, #592]	@ (8002f7c <HAL_RCC_OscConfig+0x270>)
 8002d2a:	68db      	ldr	r3, [r3, #12]
 8002d2c:	f003 0303 	and.w	r3, r3, #3
 8002d30:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 0310 	and.w	r3, r3, #16
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	f000 80e4 	beq.w	8002f08 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002d40:	69bb      	ldr	r3, [r7, #24]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d007      	beq.n	8002d56 <HAL_RCC_OscConfig+0x4a>
 8002d46:	69bb      	ldr	r3, [r7, #24]
 8002d48:	2b0c      	cmp	r3, #12
 8002d4a:	f040 808b 	bne.w	8002e64 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	2b01      	cmp	r3, #1
 8002d52:	f040 8087 	bne.w	8002e64 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002d56:	4b89      	ldr	r3, [pc, #548]	@ (8002f7c <HAL_RCC_OscConfig+0x270>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f003 0302 	and.w	r3, r3, #2
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d005      	beq.n	8002d6e <HAL_RCC_OscConfig+0x62>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	699b      	ldr	r3, [r3, #24]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d101      	bne.n	8002d6e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e3a2      	b.n	80034b4 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6a1a      	ldr	r2, [r3, #32]
 8002d72:	4b82      	ldr	r3, [pc, #520]	@ (8002f7c <HAL_RCC_OscConfig+0x270>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f003 0308 	and.w	r3, r3, #8
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d004      	beq.n	8002d88 <HAL_RCC_OscConfig+0x7c>
 8002d7e:	4b7f      	ldr	r3, [pc, #508]	@ (8002f7c <HAL_RCC_OscConfig+0x270>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002d86:	e005      	b.n	8002d94 <HAL_RCC_OscConfig+0x88>
 8002d88:	4b7c      	ldr	r3, [pc, #496]	@ (8002f7c <HAL_RCC_OscConfig+0x270>)
 8002d8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d8e:	091b      	lsrs	r3, r3, #4
 8002d90:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d223      	bcs.n	8002de0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6a1b      	ldr	r3, [r3, #32]
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f000 fd87 	bl	80038b0 <RCC_SetFlashLatencyFromMSIRange>
 8002da2:	4603      	mov	r3, r0
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d001      	beq.n	8002dac <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002da8:	2301      	movs	r3, #1
 8002daa:	e383      	b.n	80034b4 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002dac:	4b73      	ldr	r3, [pc, #460]	@ (8002f7c <HAL_RCC_OscConfig+0x270>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a72      	ldr	r2, [pc, #456]	@ (8002f7c <HAL_RCC_OscConfig+0x270>)
 8002db2:	f043 0308 	orr.w	r3, r3, #8
 8002db6:	6013      	str	r3, [r2, #0]
 8002db8:	4b70      	ldr	r3, [pc, #448]	@ (8002f7c <HAL_RCC_OscConfig+0x270>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6a1b      	ldr	r3, [r3, #32]
 8002dc4:	496d      	ldr	r1, [pc, #436]	@ (8002f7c <HAL_RCC_OscConfig+0x270>)
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002dca:	4b6c      	ldr	r3, [pc, #432]	@ (8002f7c <HAL_RCC_OscConfig+0x270>)
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	69db      	ldr	r3, [r3, #28]
 8002dd6:	021b      	lsls	r3, r3, #8
 8002dd8:	4968      	ldr	r1, [pc, #416]	@ (8002f7c <HAL_RCC_OscConfig+0x270>)
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	604b      	str	r3, [r1, #4]
 8002dde:	e025      	b.n	8002e2c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002de0:	4b66      	ldr	r3, [pc, #408]	@ (8002f7c <HAL_RCC_OscConfig+0x270>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a65      	ldr	r2, [pc, #404]	@ (8002f7c <HAL_RCC_OscConfig+0x270>)
 8002de6:	f043 0308 	orr.w	r3, r3, #8
 8002dea:	6013      	str	r3, [r2, #0]
 8002dec:	4b63      	ldr	r3, [pc, #396]	@ (8002f7c <HAL_RCC_OscConfig+0x270>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6a1b      	ldr	r3, [r3, #32]
 8002df8:	4960      	ldr	r1, [pc, #384]	@ (8002f7c <HAL_RCC_OscConfig+0x270>)
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002dfe:	4b5f      	ldr	r3, [pc, #380]	@ (8002f7c <HAL_RCC_OscConfig+0x270>)
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	69db      	ldr	r3, [r3, #28]
 8002e0a:	021b      	lsls	r3, r3, #8
 8002e0c:	495b      	ldr	r1, [pc, #364]	@ (8002f7c <HAL_RCC_OscConfig+0x270>)
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002e12:	69bb      	ldr	r3, [r7, #24]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d109      	bne.n	8002e2c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6a1b      	ldr	r3, [r3, #32]
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f000 fd47 	bl	80038b0 <RCC_SetFlashLatencyFromMSIRange>
 8002e22:	4603      	mov	r3, r0
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d001      	beq.n	8002e2c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	e343      	b.n	80034b4 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002e2c:	f000 fc4a 	bl	80036c4 <HAL_RCC_GetSysClockFreq>
 8002e30:	4602      	mov	r2, r0
 8002e32:	4b52      	ldr	r3, [pc, #328]	@ (8002f7c <HAL_RCC_OscConfig+0x270>)
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	091b      	lsrs	r3, r3, #4
 8002e38:	f003 030f 	and.w	r3, r3, #15
 8002e3c:	4950      	ldr	r1, [pc, #320]	@ (8002f80 <HAL_RCC_OscConfig+0x274>)
 8002e3e:	5ccb      	ldrb	r3, [r1, r3]
 8002e40:	f003 031f 	and.w	r3, r3, #31
 8002e44:	fa22 f303 	lsr.w	r3, r2, r3
 8002e48:	4a4e      	ldr	r2, [pc, #312]	@ (8002f84 <HAL_RCC_OscConfig+0x278>)
 8002e4a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002e4c:	4b4e      	ldr	r3, [pc, #312]	@ (8002f88 <HAL_RCC_OscConfig+0x27c>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4618      	mov	r0, r3
 8002e52:	f7ff f9e1 	bl	8002218 <HAL_InitTick>
 8002e56:	4603      	mov	r3, r0
 8002e58:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002e5a:	7bfb      	ldrb	r3, [r7, #15]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d052      	beq.n	8002f06 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002e60:	7bfb      	ldrb	r3, [r7, #15]
 8002e62:	e327      	b.n	80034b4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	699b      	ldr	r3, [r3, #24]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d032      	beq.n	8002ed2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002e6c:	4b43      	ldr	r3, [pc, #268]	@ (8002f7c <HAL_RCC_OscConfig+0x270>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a42      	ldr	r2, [pc, #264]	@ (8002f7c <HAL_RCC_OscConfig+0x270>)
 8002e72:	f043 0301 	orr.w	r3, r3, #1
 8002e76:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002e78:	f7ff fbc6 	bl	8002608 <HAL_GetTick>
 8002e7c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e7e:	e008      	b.n	8002e92 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002e80:	f7ff fbc2 	bl	8002608 <HAL_GetTick>
 8002e84:	4602      	mov	r2, r0
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	1ad3      	subs	r3, r2, r3
 8002e8a:	2b02      	cmp	r3, #2
 8002e8c:	d901      	bls.n	8002e92 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002e8e:	2303      	movs	r3, #3
 8002e90:	e310      	b.n	80034b4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e92:	4b3a      	ldr	r3, [pc, #232]	@ (8002f7c <HAL_RCC_OscConfig+0x270>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f003 0302 	and.w	r3, r3, #2
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d0f0      	beq.n	8002e80 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e9e:	4b37      	ldr	r3, [pc, #220]	@ (8002f7c <HAL_RCC_OscConfig+0x270>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a36      	ldr	r2, [pc, #216]	@ (8002f7c <HAL_RCC_OscConfig+0x270>)
 8002ea4:	f043 0308 	orr.w	r3, r3, #8
 8002ea8:	6013      	str	r3, [r2, #0]
 8002eaa:	4b34      	ldr	r3, [pc, #208]	@ (8002f7c <HAL_RCC_OscConfig+0x270>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6a1b      	ldr	r3, [r3, #32]
 8002eb6:	4931      	ldr	r1, [pc, #196]	@ (8002f7c <HAL_RCC_OscConfig+0x270>)
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ebc:	4b2f      	ldr	r3, [pc, #188]	@ (8002f7c <HAL_RCC_OscConfig+0x270>)
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	69db      	ldr	r3, [r3, #28]
 8002ec8:	021b      	lsls	r3, r3, #8
 8002eca:	492c      	ldr	r1, [pc, #176]	@ (8002f7c <HAL_RCC_OscConfig+0x270>)
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	604b      	str	r3, [r1, #4]
 8002ed0:	e01a      	b.n	8002f08 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002ed2:	4b2a      	ldr	r3, [pc, #168]	@ (8002f7c <HAL_RCC_OscConfig+0x270>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a29      	ldr	r2, [pc, #164]	@ (8002f7c <HAL_RCC_OscConfig+0x270>)
 8002ed8:	f023 0301 	bic.w	r3, r3, #1
 8002edc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002ede:	f7ff fb93 	bl	8002608 <HAL_GetTick>
 8002ee2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002ee4:	e008      	b.n	8002ef8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002ee6:	f7ff fb8f 	bl	8002608 <HAL_GetTick>
 8002eea:	4602      	mov	r2, r0
 8002eec:	693b      	ldr	r3, [r7, #16]
 8002eee:	1ad3      	subs	r3, r2, r3
 8002ef0:	2b02      	cmp	r3, #2
 8002ef2:	d901      	bls.n	8002ef8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002ef4:	2303      	movs	r3, #3
 8002ef6:	e2dd      	b.n	80034b4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002ef8:	4b20      	ldr	r3, [pc, #128]	@ (8002f7c <HAL_RCC_OscConfig+0x270>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f003 0302 	and.w	r3, r3, #2
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d1f0      	bne.n	8002ee6 <HAL_RCC_OscConfig+0x1da>
 8002f04:	e000      	b.n	8002f08 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002f06:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f003 0301 	and.w	r3, r3, #1
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d074      	beq.n	8002ffe <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002f14:	69bb      	ldr	r3, [r7, #24]
 8002f16:	2b08      	cmp	r3, #8
 8002f18:	d005      	beq.n	8002f26 <HAL_RCC_OscConfig+0x21a>
 8002f1a:	69bb      	ldr	r3, [r7, #24]
 8002f1c:	2b0c      	cmp	r3, #12
 8002f1e:	d10e      	bne.n	8002f3e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	2b03      	cmp	r3, #3
 8002f24:	d10b      	bne.n	8002f3e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f26:	4b15      	ldr	r3, [pc, #84]	@ (8002f7c <HAL_RCC_OscConfig+0x270>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d064      	beq.n	8002ffc <HAL_RCC_OscConfig+0x2f0>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d160      	bne.n	8002ffc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e2ba      	b.n	80034b4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f46:	d106      	bne.n	8002f56 <HAL_RCC_OscConfig+0x24a>
 8002f48:	4b0c      	ldr	r3, [pc, #48]	@ (8002f7c <HAL_RCC_OscConfig+0x270>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a0b      	ldr	r2, [pc, #44]	@ (8002f7c <HAL_RCC_OscConfig+0x270>)
 8002f4e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f52:	6013      	str	r3, [r2, #0]
 8002f54:	e026      	b.n	8002fa4 <HAL_RCC_OscConfig+0x298>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002f5e:	d115      	bne.n	8002f8c <HAL_RCC_OscConfig+0x280>
 8002f60:	4b06      	ldr	r3, [pc, #24]	@ (8002f7c <HAL_RCC_OscConfig+0x270>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a05      	ldr	r2, [pc, #20]	@ (8002f7c <HAL_RCC_OscConfig+0x270>)
 8002f66:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002f6a:	6013      	str	r3, [r2, #0]
 8002f6c:	4b03      	ldr	r3, [pc, #12]	@ (8002f7c <HAL_RCC_OscConfig+0x270>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a02      	ldr	r2, [pc, #8]	@ (8002f7c <HAL_RCC_OscConfig+0x270>)
 8002f72:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f76:	6013      	str	r3, [r2, #0]
 8002f78:	e014      	b.n	8002fa4 <HAL_RCC_OscConfig+0x298>
 8002f7a:	bf00      	nop
 8002f7c:	40021000 	.word	0x40021000
 8002f80:	08010e24 	.word	0x08010e24
 8002f84:	20000008 	.word	0x20000008
 8002f88:	2000000c 	.word	0x2000000c
 8002f8c:	4ba0      	ldr	r3, [pc, #640]	@ (8003210 <HAL_RCC_OscConfig+0x504>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a9f      	ldr	r2, [pc, #636]	@ (8003210 <HAL_RCC_OscConfig+0x504>)
 8002f92:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f96:	6013      	str	r3, [r2, #0]
 8002f98:	4b9d      	ldr	r3, [pc, #628]	@ (8003210 <HAL_RCC_OscConfig+0x504>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a9c      	ldr	r2, [pc, #624]	@ (8003210 <HAL_RCC_OscConfig+0x504>)
 8002f9e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002fa2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d013      	beq.n	8002fd4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fac:	f7ff fb2c 	bl	8002608 <HAL_GetTick>
 8002fb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002fb2:	e008      	b.n	8002fc6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fb4:	f7ff fb28 	bl	8002608 <HAL_GetTick>
 8002fb8:	4602      	mov	r2, r0
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	1ad3      	subs	r3, r2, r3
 8002fbe:	2b64      	cmp	r3, #100	@ 0x64
 8002fc0:	d901      	bls.n	8002fc6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002fc2:	2303      	movs	r3, #3
 8002fc4:	e276      	b.n	80034b4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002fc6:	4b92      	ldr	r3, [pc, #584]	@ (8003210 <HAL_RCC_OscConfig+0x504>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d0f0      	beq.n	8002fb4 <HAL_RCC_OscConfig+0x2a8>
 8002fd2:	e014      	b.n	8002ffe <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fd4:	f7ff fb18 	bl	8002608 <HAL_GetTick>
 8002fd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002fda:	e008      	b.n	8002fee <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fdc:	f7ff fb14 	bl	8002608 <HAL_GetTick>
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	1ad3      	subs	r3, r2, r3
 8002fe6:	2b64      	cmp	r3, #100	@ 0x64
 8002fe8:	d901      	bls.n	8002fee <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002fea:	2303      	movs	r3, #3
 8002fec:	e262      	b.n	80034b4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002fee:	4b88      	ldr	r3, [pc, #544]	@ (8003210 <HAL_RCC_OscConfig+0x504>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d1f0      	bne.n	8002fdc <HAL_RCC_OscConfig+0x2d0>
 8002ffa:	e000      	b.n	8002ffe <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ffc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f003 0302 	and.w	r3, r3, #2
 8003006:	2b00      	cmp	r3, #0
 8003008:	d060      	beq.n	80030cc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800300a:	69bb      	ldr	r3, [r7, #24]
 800300c:	2b04      	cmp	r3, #4
 800300e:	d005      	beq.n	800301c <HAL_RCC_OscConfig+0x310>
 8003010:	69bb      	ldr	r3, [r7, #24]
 8003012:	2b0c      	cmp	r3, #12
 8003014:	d119      	bne.n	800304a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	2b02      	cmp	r3, #2
 800301a:	d116      	bne.n	800304a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800301c:	4b7c      	ldr	r3, [pc, #496]	@ (8003210 <HAL_RCC_OscConfig+0x504>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003024:	2b00      	cmp	r3, #0
 8003026:	d005      	beq.n	8003034 <HAL_RCC_OscConfig+0x328>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	68db      	ldr	r3, [r3, #12]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d101      	bne.n	8003034 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003030:	2301      	movs	r3, #1
 8003032:	e23f      	b.n	80034b4 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003034:	4b76      	ldr	r3, [pc, #472]	@ (8003210 <HAL_RCC_OscConfig+0x504>)
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	691b      	ldr	r3, [r3, #16]
 8003040:	061b      	lsls	r3, r3, #24
 8003042:	4973      	ldr	r1, [pc, #460]	@ (8003210 <HAL_RCC_OscConfig+0x504>)
 8003044:	4313      	orrs	r3, r2
 8003046:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003048:	e040      	b.n	80030cc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	68db      	ldr	r3, [r3, #12]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d023      	beq.n	800309a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003052:	4b6f      	ldr	r3, [pc, #444]	@ (8003210 <HAL_RCC_OscConfig+0x504>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a6e      	ldr	r2, [pc, #440]	@ (8003210 <HAL_RCC_OscConfig+0x504>)
 8003058:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800305c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800305e:	f7ff fad3 	bl	8002608 <HAL_GetTick>
 8003062:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003064:	e008      	b.n	8003078 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003066:	f7ff facf 	bl	8002608 <HAL_GetTick>
 800306a:	4602      	mov	r2, r0
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	1ad3      	subs	r3, r2, r3
 8003070:	2b02      	cmp	r3, #2
 8003072:	d901      	bls.n	8003078 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003074:	2303      	movs	r3, #3
 8003076:	e21d      	b.n	80034b4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003078:	4b65      	ldr	r3, [pc, #404]	@ (8003210 <HAL_RCC_OscConfig+0x504>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003080:	2b00      	cmp	r3, #0
 8003082:	d0f0      	beq.n	8003066 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003084:	4b62      	ldr	r3, [pc, #392]	@ (8003210 <HAL_RCC_OscConfig+0x504>)
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	691b      	ldr	r3, [r3, #16]
 8003090:	061b      	lsls	r3, r3, #24
 8003092:	495f      	ldr	r1, [pc, #380]	@ (8003210 <HAL_RCC_OscConfig+0x504>)
 8003094:	4313      	orrs	r3, r2
 8003096:	604b      	str	r3, [r1, #4]
 8003098:	e018      	b.n	80030cc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800309a:	4b5d      	ldr	r3, [pc, #372]	@ (8003210 <HAL_RCC_OscConfig+0x504>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a5c      	ldr	r2, [pc, #368]	@ (8003210 <HAL_RCC_OscConfig+0x504>)
 80030a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80030a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030a6:	f7ff faaf 	bl	8002608 <HAL_GetTick>
 80030aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80030ac:	e008      	b.n	80030c0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030ae:	f7ff faab 	bl	8002608 <HAL_GetTick>
 80030b2:	4602      	mov	r2, r0
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	1ad3      	subs	r3, r2, r3
 80030b8:	2b02      	cmp	r3, #2
 80030ba:	d901      	bls.n	80030c0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80030bc:	2303      	movs	r3, #3
 80030be:	e1f9      	b.n	80034b4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80030c0:	4b53      	ldr	r3, [pc, #332]	@ (8003210 <HAL_RCC_OscConfig+0x504>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d1f0      	bne.n	80030ae <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f003 0308 	and.w	r3, r3, #8
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d03c      	beq.n	8003152 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	695b      	ldr	r3, [r3, #20]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d01c      	beq.n	800311a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030e0:	4b4b      	ldr	r3, [pc, #300]	@ (8003210 <HAL_RCC_OscConfig+0x504>)
 80030e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80030e6:	4a4a      	ldr	r2, [pc, #296]	@ (8003210 <HAL_RCC_OscConfig+0x504>)
 80030e8:	f043 0301 	orr.w	r3, r3, #1
 80030ec:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030f0:	f7ff fa8a 	bl	8002608 <HAL_GetTick>
 80030f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80030f6:	e008      	b.n	800310a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030f8:	f7ff fa86 	bl	8002608 <HAL_GetTick>
 80030fc:	4602      	mov	r2, r0
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	1ad3      	subs	r3, r2, r3
 8003102:	2b02      	cmp	r3, #2
 8003104:	d901      	bls.n	800310a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003106:	2303      	movs	r3, #3
 8003108:	e1d4      	b.n	80034b4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800310a:	4b41      	ldr	r3, [pc, #260]	@ (8003210 <HAL_RCC_OscConfig+0x504>)
 800310c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003110:	f003 0302 	and.w	r3, r3, #2
 8003114:	2b00      	cmp	r3, #0
 8003116:	d0ef      	beq.n	80030f8 <HAL_RCC_OscConfig+0x3ec>
 8003118:	e01b      	b.n	8003152 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800311a:	4b3d      	ldr	r3, [pc, #244]	@ (8003210 <HAL_RCC_OscConfig+0x504>)
 800311c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003120:	4a3b      	ldr	r2, [pc, #236]	@ (8003210 <HAL_RCC_OscConfig+0x504>)
 8003122:	f023 0301 	bic.w	r3, r3, #1
 8003126:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800312a:	f7ff fa6d 	bl	8002608 <HAL_GetTick>
 800312e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003130:	e008      	b.n	8003144 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003132:	f7ff fa69 	bl	8002608 <HAL_GetTick>
 8003136:	4602      	mov	r2, r0
 8003138:	693b      	ldr	r3, [r7, #16]
 800313a:	1ad3      	subs	r3, r2, r3
 800313c:	2b02      	cmp	r3, #2
 800313e:	d901      	bls.n	8003144 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003140:	2303      	movs	r3, #3
 8003142:	e1b7      	b.n	80034b4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003144:	4b32      	ldr	r3, [pc, #200]	@ (8003210 <HAL_RCC_OscConfig+0x504>)
 8003146:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800314a:	f003 0302 	and.w	r3, r3, #2
 800314e:	2b00      	cmp	r3, #0
 8003150:	d1ef      	bne.n	8003132 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f003 0304 	and.w	r3, r3, #4
 800315a:	2b00      	cmp	r3, #0
 800315c:	f000 80a6 	beq.w	80032ac <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003160:	2300      	movs	r3, #0
 8003162:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003164:	4b2a      	ldr	r3, [pc, #168]	@ (8003210 <HAL_RCC_OscConfig+0x504>)
 8003166:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003168:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800316c:	2b00      	cmp	r3, #0
 800316e:	d10d      	bne.n	800318c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003170:	4b27      	ldr	r3, [pc, #156]	@ (8003210 <HAL_RCC_OscConfig+0x504>)
 8003172:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003174:	4a26      	ldr	r2, [pc, #152]	@ (8003210 <HAL_RCC_OscConfig+0x504>)
 8003176:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800317a:	6593      	str	r3, [r2, #88]	@ 0x58
 800317c:	4b24      	ldr	r3, [pc, #144]	@ (8003210 <HAL_RCC_OscConfig+0x504>)
 800317e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003180:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003184:	60bb      	str	r3, [r7, #8]
 8003186:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003188:	2301      	movs	r3, #1
 800318a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800318c:	4b21      	ldr	r3, [pc, #132]	@ (8003214 <HAL_RCC_OscConfig+0x508>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003194:	2b00      	cmp	r3, #0
 8003196:	d118      	bne.n	80031ca <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003198:	4b1e      	ldr	r3, [pc, #120]	@ (8003214 <HAL_RCC_OscConfig+0x508>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a1d      	ldr	r2, [pc, #116]	@ (8003214 <HAL_RCC_OscConfig+0x508>)
 800319e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80031a2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031a4:	f7ff fa30 	bl	8002608 <HAL_GetTick>
 80031a8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031aa:	e008      	b.n	80031be <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031ac:	f7ff fa2c 	bl	8002608 <HAL_GetTick>
 80031b0:	4602      	mov	r2, r0
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	1ad3      	subs	r3, r2, r3
 80031b6:	2b02      	cmp	r3, #2
 80031b8:	d901      	bls.n	80031be <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80031ba:	2303      	movs	r3, #3
 80031bc:	e17a      	b.n	80034b4 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031be:	4b15      	ldr	r3, [pc, #84]	@ (8003214 <HAL_RCC_OscConfig+0x508>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d0f0      	beq.n	80031ac <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	689b      	ldr	r3, [r3, #8]
 80031ce:	2b01      	cmp	r3, #1
 80031d0:	d108      	bne.n	80031e4 <HAL_RCC_OscConfig+0x4d8>
 80031d2:	4b0f      	ldr	r3, [pc, #60]	@ (8003210 <HAL_RCC_OscConfig+0x504>)
 80031d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031d8:	4a0d      	ldr	r2, [pc, #52]	@ (8003210 <HAL_RCC_OscConfig+0x504>)
 80031da:	f043 0301 	orr.w	r3, r3, #1
 80031de:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80031e2:	e029      	b.n	8003238 <HAL_RCC_OscConfig+0x52c>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	2b05      	cmp	r3, #5
 80031ea:	d115      	bne.n	8003218 <HAL_RCC_OscConfig+0x50c>
 80031ec:	4b08      	ldr	r3, [pc, #32]	@ (8003210 <HAL_RCC_OscConfig+0x504>)
 80031ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031f2:	4a07      	ldr	r2, [pc, #28]	@ (8003210 <HAL_RCC_OscConfig+0x504>)
 80031f4:	f043 0304 	orr.w	r3, r3, #4
 80031f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80031fc:	4b04      	ldr	r3, [pc, #16]	@ (8003210 <HAL_RCC_OscConfig+0x504>)
 80031fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003202:	4a03      	ldr	r2, [pc, #12]	@ (8003210 <HAL_RCC_OscConfig+0x504>)
 8003204:	f043 0301 	orr.w	r3, r3, #1
 8003208:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800320c:	e014      	b.n	8003238 <HAL_RCC_OscConfig+0x52c>
 800320e:	bf00      	nop
 8003210:	40021000 	.word	0x40021000
 8003214:	40007000 	.word	0x40007000
 8003218:	4b9c      	ldr	r3, [pc, #624]	@ (800348c <HAL_RCC_OscConfig+0x780>)
 800321a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800321e:	4a9b      	ldr	r2, [pc, #620]	@ (800348c <HAL_RCC_OscConfig+0x780>)
 8003220:	f023 0301 	bic.w	r3, r3, #1
 8003224:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003228:	4b98      	ldr	r3, [pc, #608]	@ (800348c <HAL_RCC_OscConfig+0x780>)
 800322a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800322e:	4a97      	ldr	r2, [pc, #604]	@ (800348c <HAL_RCC_OscConfig+0x780>)
 8003230:	f023 0304 	bic.w	r3, r3, #4
 8003234:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d016      	beq.n	800326e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003240:	f7ff f9e2 	bl	8002608 <HAL_GetTick>
 8003244:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003246:	e00a      	b.n	800325e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003248:	f7ff f9de 	bl	8002608 <HAL_GetTick>
 800324c:	4602      	mov	r2, r0
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	1ad3      	subs	r3, r2, r3
 8003252:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003256:	4293      	cmp	r3, r2
 8003258:	d901      	bls.n	800325e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800325a:	2303      	movs	r3, #3
 800325c:	e12a      	b.n	80034b4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800325e:	4b8b      	ldr	r3, [pc, #556]	@ (800348c <HAL_RCC_OscConfig+0x780>)
 8003260:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003264:	f003 0302 	and.w	r3, r3, #2
 8003268:	2b00      	cmp	r3, #0
 800326a:	d0ed      	beq.n	8003248 <HAL_RCC_OscConfig+0x53c>
 800326c:	e015      	b.n	800329a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800326e:	f7ff f9cb 	bl	8002608 <HAL_GetTick>
 8003272:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003274:	e00a      	b.n	800328c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003276:	f7ff f9c7 	bl	8002608 <HAL_GetTick>
 800327a:	4602      	mov	r2, r0
 800327c:	693b      	ldr	r3, [r7, #16]
 800327e:	1ad3      	subs	r3, r2, r3
 8003280:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003284:	4293      	cmp	r3, r2
 8003286:	d901      	bls.n	800328c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003288:	2303      	movs	r3, #3
 800328a:	e113      	b.n	80034b4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800328c:	4b7f      	ldr	r3, [pc, #508]	@ (800348c <HAL_RCC_OscConfig+0x780>)
 800328e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003292:	f003 0302 	and.w	r3, r3, #2
 8003296:	2b00      	cmp	r3, #0
 8003298:	d1ed      	bne.n	8003276 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800329a:	7ffb      	ldrb	r3, [r7, #31]
 800329c:	2b01      	cmp	r3, #1
 800329e:	d105      	bne.n	80032ac <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032a0:	4b7a      	ldr	r3, [pc, #488]	@ (800348c <HAL_RCC_OscConfig+0x780>)
 80032a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032a4:	4a79      	ldr	r2, [pc, #484]	@ (800348c <HAL_RCC_OscConfig+0x780>)
 80032a6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80032aa:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	f000 80fe 	beq.w	80034b2 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032ba:	2b02      	cmp	r3, #2
 80032bc:	f040 80d0 	bne.w	8003460 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80032c0:	4b72      	ldr	r3, [pc, #456]	@ (800348c <HAL_RCC_OscConfig+0x780>)
 80032c2:	68db      	ldr	r3, [r3, #12]
 80032c4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	f003 0203 	and.w	r2, r3, #3
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032d0:	429a      	cmp	r2, r3
 80032d2:	d130      	bne.n	8003336 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032de:	3b01      	subs	r3, #1
 80032e0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80032e2:	429a      	cmp	r2, r3
 80032e4:	d127      	bne.n	8003336 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032f0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80032f2:	429a      	cmp	r2, r3
 80032f4:	d11f      	bne.n	8003336 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032fc:	687a      	ldr	r2, [r7, #4]
 80032fe:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003300:	2a07      	cmp	r2, #7
 8003302:	bf14      	ite	ne
 8003304:	2201      	movne	r2, #1
 8003306:	2200      	moveq	r2, #0
 8003308:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800330a:	4293      	cmp	r3, r2
 800330c:	d113      	bne.n	8003336 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003318:	085b      	lsrs	r3, r3, #1
 800331a:	3b01      	subs	r3, #1
 800331c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800331e:	429a      	cmp	r2, r3
 8003320:	d109      	bne.n	8003336 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800332c:	085b      	lsrs	r3, r3, #1
 800332e:	3b01      	subs	r3, #1
 8003330:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003332:	429a      	cmp	r2, r3
 8003334:	d06e      	beq.n	8003414 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003336:	69bb      	ldr	r3, [r7, #24]
 8003338:	2b0c      	cmp	r3, #12
 800333a:	d069      	beq.n	8003410 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800333c:	4b53      	ldr	r3, [pc, #332]	@ (800348c <HAL_RCC_OscConfig+0x780>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003344:	2b00      	cmp	r3, #0
 8003346:	d105      	bne.n	8003354 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003348:	4b50      	ldr	r3, [pc, #320]	@ (800348c <HAL_RCC_OscConfig+0x780>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003350:	2b00      	cmp	r3, #0
 8003352:	d001      	beq.n	8003358 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003354:	2301      	movs	r3, #1
 8003356:	e0ad      	b.n	80034b4 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003358:	4b4c      	ldr	r3, [pc, #304]	@ (800348c <HAL_RCC_OscConfig+0x780>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a4b      	ldr	r2, [pc, #300]	@ (800348c <HAL_RCC_OscConfig+0x780>)
 800335e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003362:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003364:	f7ff f950 	bl	8002608 <HAL_GetTick>
 8003368:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800336a:	e008      	b.n	800337e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800336c:	f7ff f94c 	bl	8002608 <HAL_GetTick>
 8003370:	4602      	mov	r2, r0
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	1ad3      	subs	r3, r2, r3
 8003376:	2b02      	cmp	r3, #2
 8003378:	d901      	bls.n	800337e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800337a:	2303      	movs	r3, #3
 800337c:	e09a      	b.n	80034b4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800337e:	4b43      	ldr	r3, [pc, #268]	@ (800348c <HAL_RCC_OscConfig+0x780>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003386:	2b00      	cmp	r3, #0
 8003388:	d1f0      	bne.n	800336c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800338a:	4b40      	ldr	r3, [pc, #256]	@ (800348c <HAL_RCC_OscConfig+0x780>)
 800338c:	68da      	ldr	r2, [r3, #12]
 800338e:	4b40      	ldr	r3, [pc, #256]	@ (8003490 <HAL_RCC_OscConfig+0x784>)
 8003390:	4013      	ands	r3, r2
 8003392:	687a      	ldr	r2, [r7, #4]
 8003394:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003396:	687a      	ldr	r2, [r7, #4]
 8003398:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800339a:	3a01      	subs	r2, #1
 800339c:	0112      	lsls	r2, r2, #4
 800339e:	4311      	orrs	r1, r2
 80033a0:	687a      	ldr	r2, [r7, #4]
 80033a2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80033a4:	0212      	lsls	r2, r2, #8
 80033a6:	4311      	orrs	r1, r2
 80033a8:	687a      	ldr	r2, [r7, #4]
 80033aa:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80033ac:	0852      	lsrs	r2, r2, #1
 80033ae:	3a01      	subs	r2, #1
 80033b0:	0552      	lsls	r2, r2, #21
 80033b2:	4311      	orrs	r1, r2
 80033b4:	687a      	ldr	r2, [r7, #4]
 80033b6:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80033b8:	0852      	lsrs	r2, r2, #1
 80033ba:	3a01      	subs	r2, #1
 80033bc:	0652      	lsls	r2, r2, #25
 80033be:	4311      	orrs	r1, r2
 80033c0:	687a      	ldr	r2, [r7, #4]
 80033c2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80033c4:	0912      	lsrs	r2, r2, #4
 80033c6:	0452      	lsls	r2, r2, #17
 80033c8:	430a      	orrs	r2, r1
 80033ca:	4930      	ldr	r1, [pc, #192]	@ (800348c <HAL_RCC_OscConfig+0x780>)
 80033cc:	4313      	orrs	r3, r2
 80033ce:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80033d0:	4b2e      	ldr	r3, [pc, #184]	@ (800348c <HAL_RCC_OscConfig+0x780>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a2d      	ldr	r2, [pc, #180]	@ (800348c <HAL_RCC_OscConfig+0x780>)
 80033d6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80033da:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80033dc:	4b2b      	ldr	r3, [pc, #172]	@ (800348c <HAL_RCC_OscConfig+0x780>)
 80033de:	68db      	ldr	r3, [r3, #12]
 80033e0:	4a2a      	ldr	r2, [pc, #168]	@ (800348c <HAL_RCC_OscConfig+0x780>)
 80033e2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80033e6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80033e8:	f7ff f90e 	bl	8002608 <HAL_GetTick>
 80033ec:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033ee:	e008      	b.n	8003402 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033f0:	f7ff f90a 	bl	8002608 <HAL_GetTick>
 80033f4:	4602      	mov	r2, r0
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	1ad3      	subs	r3, r2, r3
 80033fa:	2b02      	cmp	r3, #2
 80033fc:	d901      	bls.n	8003402 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80033fe:	2303      	movs	r3, #3
 8003400:	e058      	b.n	80034b4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003402:	4b22      	ldr	r3, [pc, #136]	@ (800348c <HAL_RCC_OscConfig+0x780>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800340a:	2b00      	cmp	r3, #0
 800340c:	d0f0      	beq.n	80033f0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800340e:	e050      	b.n	80034b2 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003410:	2301      	movs	r3, #1
 8003412:	e04f      	b.n	80034b4 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003414:	4b1d      	ldr	r3, [pc, #116]	@ (800348c <HAL_RCC_OscConfig+0x780>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800341c:	2b00      	cmp	r3, #0
 800341e:	d148      	bne.n	80034b2 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003420:	4b1a      	ldr	r3, [pc, #104]	@ (800348c <HAL_RCC_OscConfig+0x780>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a19      	ldr	r2, [pc, #100]	@ (800348c <HAL_RCC_OscConfig+0x780>)
 8003426:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800342a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800342c:	4b17      	ldr	r3, [pc, #92]	@ (800348c <HAL_RCC_OscConfig+0x780>)
 800342e:	68db      	ldr	r3, [r3, #12]
 8003430:	4a16      	ldr	r2, [pc, #88]	@ (800348c <HAL_RCC_OscConfig+0x780>)
 8003432:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003436:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003438:	f7ff f8e6 	bl	8002608 <HAL_GetTick>
 800343c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800343e:	e008      	b.n	8003452 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003440:	f7ff f8e2 	bl	8002608 <HAL_GetTick>
 8003444:	4602      	mov	r2, r0
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	1ad3      	subs	r3, r2, r3
 800344a:	2b02      	cmp	r3, #2
 800344c:	d901      	bls.n	8003452 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800344e:	2303      	movs	r3, #3
 8003450:	e030      	b.n	80034b4 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003452:	4b0e      	ldr	r3, [pc, #56]	@ (800348c <HAL_RCC_OscConfig+0x780>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800345a:	2b00      	cmp	r3, #0
 800345c:	d0f0      	beq.n	8003440 <HAL_RCC_OscConfig+0x734>
 800345e:	e028      	b.n	80034b2 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003460:	69bb      	ldr	r3, [r7, #24]
 8003462:	2b0c      	cmp	r3, #12
 8003464:	d023      	beq.n	80034ae <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003466:	4b09      	ldr	r3, [pc, #36]	@ (800348c <HAL_RCC_OscConfig+0x780>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a08      	ldr	r2, [pc, #32]	@ (800348c <HAL_RCC_OscConfig+0x780>)
 800346c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003470:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003472:	f7ff f8c9 	bl	8002608 <HAL_GetTick>
 8003476:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003478:	e00c      	b.n	8003494 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800347a:	f7ff f8c5 	bl	8002608 <HAL_GetTick>
 800347e:	4602      	mov	r2, r0
 8003480:	693b      	ldr	r3, [r7, #16]
 8003482:	1ad3      	subs	r3, r2, r3
 8003484:	2b02      	cmp	r3, #2
 8003486:	d905      	bls.n	8003494 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003488:	2303      	movs	r3, #3
 800348a:	e013      	b.n	80034b4 <HAL_RCC_OscConfig+0x7a8>
 800348c:	40021000 	.word	0x40021000
 8003490:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003494:	4b09      	ldr	r3, [pc, #36]	@ (80034bc <HAL_RCC_OscConfig+0x7b0>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800349c:	2b00      	cmp	r3, #0
 800349e:	d1ec      	bne.n	800347a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80034a0:	4b06      	ldr	r3, [pc, #24]	@ (80034bc <HAL_RCC_OscConfig+0x7b0>)
 80034a2:	68da      	ldr	r2, [r3, #12]
 80034a4:	4905      	ldr	r1, [pc, #20]	@ (80034bc <HAL_RCC_OscConfig+0x7b0>)
 80034a6:	4b06      	ldr	r3, [pc, #24]	@ (80034c0 <HAL_RCC_OscConfig+0x7b4>)
 80034a8:	4013      	ands	r3, r2
 80034aa:	60cb      	str	r3, [r1, #12]
 80034ac:	e001      	b.n	80034b2 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80034ae:	2301      	movs	r3, #1
 80034b0:	e000      	b.n	80034b4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80034b2:	2300      	movs	r3, #0
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	3720      	adds	r7, #32
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bd80      	pop	{r7, pc}
 80034bc:	40021000 	.word	0x40021000
 80034c0:	feeefffc 	.word	0xfeeefffc

080034c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b084      	sub	sp, #16
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
 80034cc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d101      	bne.n	80034d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034d4:	2301      	movs	r3, #1
 80034d6:	e0e7      	b.n	80036a8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80034d8:	4b75      	ldr	r3, [pc, #468]	@ (80036b0 <HAL_RCC_ClockConfig+0x1ec>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f003 0307 	and.w	r3, r3, #7
 80034e0:	683a      	ldr	r2, [r7, #0]
 80034e2:	429a      	cmp	r2, r3
 80034e4:	d910      	bls.n	8003508 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034e6:	4b72      	ldr	r3, [pc, #456]	@ (80036b0 <HAL_RCC_ClockConfig+0x1ec>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f023 0207 	bic.w	r2, r3, #7
 80034ee:	4970      	ldr	r1, [pc, #448]	@ (80036b0 <HAL_RCC_ClockConfig+0x1ec>)
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	4313      	orrs	r3, r2
 80034f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034f6:	4b6e      	ldr	r3, [pc, #440]	@ (80036b0 <HAL_RCC_ClockConfig+0x1ec>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f003 0307 	and.w	r3, r3, #7
 80034fe:	683a      	ldr	r2, [r7, #0]
 8003500:	429a      	cmp	r2, r3
 8003502:	d001      	beq.n	8003508 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003504:	2301      	movs	r3, #1
 8003506:	e0cf      	b.n	80036a8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f003 0302 	and.w	r3, r3, #2
 8003510:	2b00      	cmp	r3, #0
 8003512:	d010      	beq.n	8003536 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	689a      	ldr	r2, [r3, #8]
 8003518:	4b66      	ldr	r3, [pc, #408]	@ (80036b4 <HAL_RCC_ClockConfig+0x1f0>)
 800351a:	689b      	ldr	r3, [r3, #8]
 800351c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003520:	429a      	cmp	r2, r3
 8003522:	d908      	bls.n	8003536 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003524:	4b63      	ldr	r3, [pc, #396]	@ (80036b4 <HAL_RCC_ClockConfig+0x1f0>)
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	4960      	ldr	r1, [pc, #384]	@ (80036b4 <HAL_RCC_ClockConfig+0x1f0>)
 8003532:	4313      	orrs	r3, r2
 8003534:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f003 0301 	and.w	r3, r3, #1
 800353e:	2b00      	cmp	r3, #0
 8003540:	d04c      	beq.n	80035dc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	2b03      	cmp	r3, #3
 8003548:	d107      	bne.n	800355a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800354a:	4b5a      	ldr	r3, [pc, #360]	@ (80036b4 <HAL_RCC_ClockConfig+0x1f0>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003552:	2b00      	cmp	r3, #0
 8003554:	d121      	bne.n	800359a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	e0a6      	b.n	80036a8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	2b02      	cmp	r3, #2
 8003560:	d107      	bne.n	8003572 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003562:	4b54      	ldr	r3, [pc, #336]	@ (80036b4 <HAL_RCC_ClockConfig+0x1f0>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800356a:	2b00      	cmp	r3, #0
 800356c:	d115      	bne.n	800359a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	e09a      	b.n	80036a8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d107      	bne.n	800358a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800357a:	4b4e      	ldr	r3, [pc, #312]	@ (80036b4 <HAL_RCC_ClockConfig+0x1f0>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f003 0302 	and.w	r3, r3, #2
 8003582:	2b00      	cmp	r3, #0
 8003584:	d109      	bne.n	800359a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	e08e      	b.n	80036a8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800358a:	4b4a      	ldr	r3, [pc, #296]	@ (80036b4 <HAL_RCC_ClockConfig+0x1f0>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003592:	2b00      	cmp	r3, #0
 8003594:	d101      	bne.n	800359a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003596:	2301      	movs	r3, #1
 8003598:	e086      	b.n	80036a8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800359a:	4b46      	ldr	r3, [pc, #280]	@ (80036b4 <HAL_RCC_ClockConfig+0x1f0>)
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	f023 0203 	bic.w	r2, r3, #3
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	4943      	ldr	r1, [pc, #268]	@ (80036b4 <HAL_RCC_ClockConfig+0x1f0>)
 80035a8:	4313      	orrs	r3, r2
 80035aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035ac:	f7ff f82c 	bl	8002608 <HAL_GetTick>
 80035b0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035b2:	e00a      	b.n	80035ca <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035b4:	f7ff f828 	bl	8002608 <HAL_GetTick>
 80035b8:	4602      	mov	r2, r0
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	1ad3      	subs	r3, r2, r3
 80035be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d901      	bls.n	80035ca <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80035c6:	2303      	movs	r3, #3
 80035c8:	e06e      	b.n	80036a8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035ca:	4b3a      	ldr	r3, [pc, #232]	@ (80036b4 <HAL_RCC_ClockConfig+0x1f0>)
 80035cc:	689b      	ldr	r3, [r3, #8]
 80035ce:	f003 020c 	and.w	r2, r3, #12
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	009b      	lsls	r3, r3, #2
 80035d8:	429a      	cmp	r2, r3
 80035da:	d1eb      	bne.n	80035b4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f003 0302 	and.w	r3, r3, #2
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d010      	beq.n	800360a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	689a      	ldr	r2, [r3, #8]
 80035ec:	4b31      	ldr	r3, [pc, #196]	@ (80036b4 <HAL_RCC_ClockConfig+0x1f0>)
 80035ee:	689b      	ldr	r3, [r3, #8]
 80035f0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d208      	bcs.n	800360a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035f8:	4b2e      	ldr	r3, [pc, #184]	@ (80036b4 <HAL_RCC_ClockConfig+0x1f0>)
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	492b      	ldr	r1, [pc, #172]	@ (80036b4 <HAL_RCC_ClockConfig+0x1f0>)
 8003606:	4313      	orrs	r3, r2
 8003608:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800360a:	4b29      	ldr	r3, [pc, #164]	@ (80036b0 <HAL_RCC_ClockConfig+0x1ec>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f003 0307 	and.w	r3, r3, #7
 8003612:	683a      	ldr	r2, [r7, #0]
 8003614:	429a      	cmp	r2, r3
 8003616:	d210      	bcs.n	800363a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003618:	4b25      	ldr	r3, [pc, #148]	@ (80036b0 <HAL_RCC_ClockConfig+0x1ec>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f023 0207 	bic.w	r2, r3, #7
 8003620:	4923      	ldr	r1, [pc, #140]	@ (80036b0 <HAL_RCC_ClockConfig+0x1ec>)
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	4313      	orrs	r3, r2
 8003626:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003628:	4b21      	ldr	r3, [pc, #132]	@ (80036b0 <HAL_RCC_ClockConfig+0x1ec>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f003 0307 	and.w	r3, r3, #7
 8003630:	683a      	ldr	r2, [r7, #0]
 8003632:	429a      	cmp	r2, r3
 8003634:	d001      	beq.n	800363a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	e036      	b.n	80036a8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f003 0304 	and.w	r3, r3, #4
 8003642:	2b00      	cmp	r3, #0
 8003644:	d008      	beq.n	8003658 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003646:	4b1b      	ldr	r3, [pc, #108]	@ (80036b4 <HAL_RCC_ClockConfig+0x1f0>)
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	68db      	ldr	r3, [r3, #12]
 8003652:	4918      	ldr	r1, [pc, #96]	@ (80036b4 <HAL_RCC_ClockConfig+0x1f0>)
 8003654:	4313      	orrs	r3, r2
 8003656:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f003 0308 	and.w	r3, r3, #8
 8003660:	2b00      	cmp	r3, #0
 8003662:	d009      	beq.n	8003678 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003664:	4b13      	ldr	r3, [pc, #76]	@ (80036b4 <HAL_RCC_ClockConfig+0x1f0>)
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	691b      	ldr	r3, [r3, #16]
 8003670:	00db      	lsls	r3, r3, #3
 8003672:	4910      	ldr	r1, [pc, #64]	@ (80036b4 <HAL_RCC_ClockConfig+0x1f0>)
 8003674:	4313      	orrs	r3, r2
 8003676:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003678:	f000 f824 	bl	80036c4 <HAL_RCC_GetSysClockFreq>
 800367c:	4602      	mov	r2, r0
 800367e:	4b0d      	ldr	r3, [pc, #52]	@ (80036b4 <HAL_RCC_ClockConfig+0x1f0>)
 8003680:	689b      	ldr	r3, [r3, #8]
 8003682:	091b      	lsrs	r3, r3, #4
 8003684:	f003 030f 	and.w	r3, r3, #15
 8003688:	490b      	ldr	r1, [pc, #44]	@ (80036b8 <HAL_RCC_ClockConfig+0x1f4>)
 800368a:	5ccb      	ldrb	r3, [r1, r3]
 800368c:	f003 031f 	and.w	r3, r3, #31
 8003690:	fa22 f303 	lsr.w	r3, r2, r3
 8003694:	4a09      	ldr	r2, [pc, #36]	@ (80036bc <HAL_RCC_ClockConfig+0x1f8>)
 8003696:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003698:	4b09      	ldr	r3, [pc, #36]	@ (80036c0 <HAL_RCC_ClockConfig+0x1fc>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4618      	mov	r0, r3
 800369e:	f7fe fdbb 	bl	8002218 <HAL_InitTick>
 80036a2:	4603      	mov	r3, r0
 80036a4:	72fb      	strb	r3, [r7, #11]

  return status;
 80036a6:	7afb      	ldrb	r3, [r7, #11]
}
 80036a8:	4618      	mov	r0, r3
 80036aa:	3710      	adds	r7, #16
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd80      	pop	{r7, pc}
 80036b0:	40022000 	.word	0x40022000
 80036b4:	40021000 	.word	0x40021000
 80036b8:	08010e24 	.word	0x08010e24
 80036bc:	20000008 	.word	0x20000008
 80036c0:	2000000c 	.word	0x2000000c

080036c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036c4:	b480      	push	{r7}
 80036c6:	b089      	sub	sp, #36	@ 0x24
 80036c8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80036ca:	2300      	movs	r3, #0
 80036cc:	61fb      	str	r3, [r7, #28]
 80036ce:	2300      	movs	r3, #0
 80036d0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80036d2:	4b3e      	ldr	r3, [pc, #248]	@ (80037cc <HAL_RCC_GetSysClockFreq+0x108>)
 80036d4:	689b      	ldr	r3, [r3, #8]
 80036d6:	f003 030c 	and.w	r3, r3, #12
 80036da:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80036dc:	4b3b      	ldr	r3, [pc, #236]	@ (80037cc <HAL_RCC_GetSysClockFreq+0x108>)
 80036de:	68db      	ldr	r3, [r3, #12]
 80036e0:	f003 0303 	and.w	r3, r3, #3
 80036e4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d005      	beq.n	80036f8 <HAL_RCC_GetSysClockFreq+0x34>
 80036ec:	693b      	ldr	r3, [r7, #16]
 80036ee:	2b0c      	cmp	r3, #12
 80036f0:	d121      	bne.n	8003736 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	2b01      	cmp	r3, #1
 80036f6:	d11e      	bne.n	8003736 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80036f8:	4b34      	ldr	r3, [pc, #208]	@ (80037cc <HAL_RCC_GetSysClockFreq+0x108>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f003 0308 	and.w	r3, r3, #8
 8003700:	2b00      	cmp	r3, #0
 8003702:	d107      	bne.n	8003714 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003704:	4b31      	ldr	r3, [pc, #196]	@ (80037cc <HAL_RCC_GetSysClockFreq+0x108>)
 8003706:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800370a:	0a1b      	lsrs	r3, r3, #8
 800370c:	f003 030f 	and.w	r3, r3, #15
 8003710:	61fb      	str	r3, [r7, #28]
 8003712:	e005      	b.n	8003720 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003714:	4b2d      	ldr	r3, [pc, #180]	@ (80037cc <HAL_RCC_GetSysClockFreq+0x108>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	091b      	lsrs	r3, r3, #4
 800371a:	f003 030f 	and.w	r3, r3, #15
 800371e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003720:	4a2b      	ldr	r2, [pc, #172]	@ (80037d0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003722:	69fb      	ldr	r3, [r7, #28]
 8003724:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003728:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d10d      	bne.n	800374c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003730:	69fb      	ldr	r3, [r7, #28]
 8003732:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003734:	e00a      	b.n	800374c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	2b04      	cmp	r3, #4
 800373a:	d102      	bne.n	8003742 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800373c:	4b25      	ldr	r3, [pc, #148]	@ (80037d4 <HAL_RCC_GetSysClockFreq+0x110>)
 800373e:	61bb      	str	r3, [r7, #24]
 8003740:	e004      	b.n	800374c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	2b08      	cmp	r3, #8
 8003746:	d101      	bne.n	800374c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003748:	4b23      	ldr	r3, [pc, #140]	@ (80037d8 <HAL_RCC_GetSysClockFreq+0x114>)
 800374a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800374c:	693b      	ldr	r3, [r7, #16]
 800374e:	2b0c      	cmp	r3, #12
 8003750:	d134      	bne.n	80037bc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003752:	4b1e      	ldr	r3, [pc, #120]	@ (80037cc <HAL_RCC_GetSysClockFreq+0x108>)
 8003754:	68db      	ldr	r3, [r3, #12]
 8003756:	f003 0303 	and.w	r3, r3, #3
 800375a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	2b02      	cmp	r3, #2
 8003760:	d003      	beq.n	800376a <HAL_RCC_GetSysClockFreq+0xa6>
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	2b03      	cmp	r3, #3
 8003766:	d003      	beq.n	8003770 <HAL_RCC_GetSysClockFreq+0xac>
 8003768:	e005      	b.n	8003776 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800376a:	4b1a      	ldr	r3, [pc, #104]	@ (80037d4 <HAL_RCC_GetSysClockFreq+0x110>)
 800376c:	617b      	str	r3, [r7, #20]
      break;
 800376e:	e005      	b.n	800377c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003770:	4b19      	ldr	r3, [pc, #100]	@ (80037d8 <HAL_RCC_GetSysClockFreq+0x114>)
 8003772:	617b      	str	r3, [r7, #20]
      break;
 8003774:	e002      	b.n	800377c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003776:	69fb      	ldr	r3, [r7, #28]
 8003778:	617b      	str	r3, [r7, #20]
      break;
 800377a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800377c:	4b13      	ldr	r3, [pc, #76]	@ (80037cc <HAL_RCC_GetSysClockFreq+0x108>)
 800377e:	68db      	ldr	r3, [r3, #12]
 8003780:	091b      	lsrs	r3, r3, #4
 8003782:	f003 0307 	and.w	r3, r3, #7
 8003786:	3301      	adds	r3, #1
 8003788:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800378a:	4b10      	ldr	r3, [pc, #64]	@ (80037cc <HAL_RCC_GetSysClockFreq+0x108>)
 800378c:	68db      	ldr	r3, [r3, #12]
 800378e:	0a1b      	lsrs	r3, r3, #8
 8003790:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003794:	697a      	ldr	r2, [r7, #20]
 8003796:	fb03 f202 	mul.w	r2, r3, r2
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	fbb2 f3f3 	udiv	r3, r2, r3
 80037a0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80037a2:	4b0a      	ldr	r3, [pc, #40]	@ (80037cc <HAL_RCC_GetSysClockFreq+0x108>)
 80037a4:	68db      	ldr	r3, [r3, #12]
 80037a6:	0e5b      	lsrs	r3, r3, #25
 80037a8:	f003 0303 	and.w	r3, r3, #3
 80037ac:	3301      	adds	r3, #1
 80037ae:	005b      	lsls	r3, r3, #1
 80037b0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80037b2:	697a      	ldr	r2, [r7, #20]
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80037ba:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80037bc:	69bb      	ldr	r3, [r7, #24]
}
 80037be:	4618      	mov	r0, r3
 80037c0:	3724      	adds	r7, #36	@ 0x24
 80037c2:	46bd      	mov	sp, r7
 80037c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c8:	4770      	bx	lr
 80037ca:	bf00      	nop
 80037cc:	40021000 	.word	0x40021000
 80037d0:	08010e3c 	.word	0x08010e3c
 80037d4:	00f42400 	.word	0x00f42400
 80037d8:	007a1200 	.word	0x007a1200

080037dc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037dc:	b480      	push	{r7}
 80037de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037e0:	4b03      	ldr	r3, [pc, #12]	@ (80037f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80037e2:	681b      	ldr	r3, [r3, #0]
}
 80037e4:	4618      	mov	r0, r3
 80037e6:	46bd      	mov	sp, r7
 80037e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ec:	4770      	bx	lr
 80037ee:	bf00      	nop
 80037f0:	20000008 	.word	0x20000008

080037f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80037f8:	f7ff fff0 	bl	80037dc <HAL_RCC_GetHCLKFreq>
 80037fc:	4602      	mov	r2, r0
 80037fe:	4b06      	ldr	r3, [pc, #24]	@ (8003818 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003800:	689b      	ldr	r3, [r3, #8]
 8003802:	0a1b      	lsrs	r3, r3, #8
 8003804:	f003 0307 	and.w	r3, r3, #7
 8003808:	4904      	ldr	r1, [pc, #16]	@ (800381c <HAL_RCC_GetPCLK1Freq+0x28>)
 800380a:	5ccb      	ldrb	r3, [r1, r3]
 800380c:	f003 031f 	and.w	r3, r3, #31
 8003810:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003814:	4618      	mov	r0, r3
 8003816:	bd80      	pop	{r7, pc}
 8003818:	40021000 	.word	0x40021000
 800381c:	08010e34 	.word	0x08010e34

08003820 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003824:	f7ff ffda 	bl	80037dc <HAL_RCC_GetHCLKFreq>
 8003828:	4602      	mov	r2, r0
 800382a:	4b06      	ldr	r3, [pc, #24]	@ (8003844 <HAL_RCC_GetPCLK2Freq+0x24>)
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	0adb      	lsrs	r3, r3, #11
 8003830:	f003 0307 	and.w	r3, r3, #7
 8003834:	4904      	ldr	r1, [pc, #16]	@ (8003848 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003836:	5ccb      	ldrb	r3, [r1, r3]
 8003838:	f003 031f 	and.w	r3, r3, #31
 800383c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003840:	4618      	mov	r0, r3
 8003842:	bd80      	pop	{r7, pc}
 8003844:	40021000 	.word	0x40021000
 8003848:	08010e34 	.word	0x08010e34

0800384c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800384c:	b480      	push	{r7}
 800384e:	b083      	sub	sp, #12
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
 8003854:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	220f      	movs	r2, #15
 800385a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800385c:	4b12      	ldr	r3, [pc, #72]	@ (80038a8 <HAL_RCC_GetClockConfig+0x5c>)
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	f003 0203 	and.w	r2, r3, #3
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003868:	4b0f      	ldr	r3, [pc, #60]	@ (80038a8 <HAL_RCC_GetClockConfig+0x5c>)
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003874:	4b0c      	ldr	r3, [pc, #48]	@ (80038a8 <HAL_RCC_GetClockConfig+0x5c>)
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003880:	4b09      	ldr	r3, [pc, #36]	@ (80038a8 <HAL_RCC_GetClockConfig+0x5c>)
 8003882:	689b      	ldr	r3, [r3, #8]
 8003884:	08db      	lsrs	r3, r3, #3
 8003886:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800388e:	4b07      	ldr	r3, [pc, #28]	@ (80038ac <HAL_RCC_GetClockConfig+0x60>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f003 0207 	and.w	r2, r3, #7
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	601a      	str	r2, [r3, #0]
}
 800389a:	bf00      	nop
 800389c:	370c      	adds	r7, #12
 800389e:	46bd      	mov	sp, r7
 80038a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a4:	4770      	bx	lr
 80038a6:	bf00      	nop
 80038a8:	40021000 	.word	0x40021000
 80038ac:	40022000 	.word	0x40022000

080038b0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b086      	sub	sp, #24
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80038b8:	2300      	movs	r3, #0
 80038ba:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80038bc:	4b2a      	ldr	r3, [pc, #168]	@ (8003968 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d003      	beq.n	80038d0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80038c8:	f7ff f9bc 	bl	8002c44 <HAL_PWREx_GetVoltageRange>
 80038cc:	6178      	str	r0, [r7, #20]
 80038ce:	e014      	b.n	80038fa <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80038d0:	4b25      	ldr	r3, [pc, #148]	@ (8003968 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038d4:	4a24      	ldr	r2, [pc, #144]	@ (8003968 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80038da:	6593      	str	r3, [r2, #88]	@ 0x58
 80038dc:	4b22      	ldr	r3, [pc, #136]	@ (8003968 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038e4:	60fb      	str	r3, [r7, #12]
 80038e6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80038e8:	f7ff f9ac 	bl	8002c44 <HAL_PWREx_GetVoltageRange>
 80038ec:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80038ee:	4b1e      	ldr	r3, [pc, #120]	@ (8003968 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038f2:	4a1d      	ldr	r2, [pc, #116]	@ (8003968 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038f4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80038f8:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003900:	d10b      	bne.n	800391a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2b80      	cmp	r3, #128	@ 0x80
 8003906:	d919      	bls.n	800393c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2ba0      	cmp	r3, #160	@ 0xa0
 800390c:	d902      	bls.n	8003914 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800390e:	2302      	movs	r3, #2
 8003910:	613b      	str	r3, [r7, #16]
 8003912:	e013      	b.n	800393c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003914:	2301      	movs	r3, #1
 8003916:	613b      	str	r3, [r7, #16]
 8003918:	e010      	b.n	800393c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2b80      	cmp	r3, #128	@ 0x80
 800391e:	d902      	bls.n	8003926 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003920:	2303      	movs	r3, #3
 8003922:	613b      	str	r3, [r7, #16]
 8003924:	e00a      	b.n	800393c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2b80      	cmp	r3, #128	@ 0x80
 800392a:	d102      	bne.n	8003932 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800392c:	2302      	movs	r3, #2
 800392e:	613b      	str	r3, [r7, #16]
 8003930:	e004      	b.n	800393c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2b70      	cmp	r3, #112	@ 0x70
 8003936:	d101      	bne.n	800393c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003938:	2301      	movs	r3, #1
 800393a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800393c:	4b0b      	ldr	r3, [pc, #44]	@ (800396c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f023 0207 	bic.w	r2, r3, #7
 8003944:	4909      	ldr	r1, [pc, #36]	@ (800396c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	4313      	orrs	r3, r2
 800394a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800394c:	4b07      	ldr	r3, [pc, #28]	@ (800396c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f003 0307 	and.w	r3, r3, #7
 8003954:	693a      	ldr	r2, [r7, #16]
 8003956:	429a      	cmp	r2, r3
 8003958:	d001      	beq.n	800395e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	e000      	b.n	8003960 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800395e:	2300      	movs	r3, #0
}
 8003960:	4618      	mov	r0, r3
 8003962:	3718      	adds	r7, #24
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}
 8003968:	40021000 	.word	0x40021000
 800396c:	40022000 	.word	0x40022000

08003970 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b086      	sub	sp, #24
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003978:	2300      	movs	r3, #0
 800397a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800397c:	2300      	movs	r3, #0
 800397e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003988:	2b00      	cmp	r3, #0
 800398a:	d041      	beq.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003990:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003994:	d02a      	beq.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003996:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800399a:	d824      	bhi.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800399c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80039a0:	d008      	beq.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80039a2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80039a6:	d81e      	bhi.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d00a      	beq.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80039ac:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80039b0:	d010      	beq.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80039b2:	e018      	b.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80039b4:	4b86      	ldr	r3, [pc, #536]	@ (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039b6:	68db      	ldr	r3, [r3, #12]
 80039b8:	4a85      	ldr	r2, [pc, #532]	@ (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039be:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80039c0:	e015      	b.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	3304      	adds	r3, #4
 80039c6:	2100      	movs	r1, #0
 80039c8:	4618      	mov	r0, r3
 80039ca:	f000 fabb 	bl	8003f44 <RCCEx_PLLSAI1_Config>
 80039ce:	4603      	mov	r3, r0
 80039d0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80039d2:	e00c      	b.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	3320      	adds	r3, #32
 80039d8:	2100      	movs	r1, #0
 80039da:	4618      	mov	r0, r3
 80039dc:	f000 fba6 	bl	800412c <RCCEx_PLLSAI2_Config>
 80039e0:	4603      	mov	r3, r0
 80039e2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80039e4:	e003      	b.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	74fb      	strb	r3, [r7, #19]
      break;
 80039ea:	e000      	b.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80039ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80039ee:	7cfb      	ldrb	r3, [r7, #19]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d10b      	bne.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80039f4:	4b76      	ldr	r3, [pc, #472]	@ (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039fa:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003a02:	4973      	ldr	r1, [pc, #460]	@ (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a04:	4313      	orrs	r3, r2
 8003a06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003a0a:	e001      	b.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a0c:	7cfb      	ldrb	r3, [r7, #19]
 8003a0e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d041      	beq.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003a20:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003a24:	d02a      	beq.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003a26:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003a2a:	d824      	bhi.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003a2c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003a30:	d008      	beq.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003a32:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003a36:	d81e      	bhi.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d00a      	beq.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003a3c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003a40:	d010      	beq.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003a42:	e018      	b.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003a44:	4b62      	ldr	r3, [pc, #392]	@ (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a46:	68db      	ldr	r3, [r3, #12]
 8003a48:	4a61      	ldr	r2, [pc, #388]	@ (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a4a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a4e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003a50:	e015      	b.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	3304      	adds	r3, #4
 8003a56:	2100      	movs	r1, #0
 8003a58:	4618      	mov	r0, r3
 8003a5a:	f000 fa73 	bl	8003f44 <RCCEx_PLLSAI1_Config>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003a62:	e00c      	b.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	3320      	adds	r3, #32
 8003a68:	2100      	movs	r1, #0
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f000 fb5e 	bl	800412c <RCCEx_PLLSAI2_Config>
 8003a70:	4603      	mov	r3, r0
 8003a72:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003a74:	e003      	b.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a76:	2301      	movs	r3, #1
 8003a78:	74fb      	strb	r3, [r7, #19]
      break;
 8003a7a:	e000      	b.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003a7c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a7e:	7cfb      	ldrb	r3, [r7, #19]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d10b      	bne.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003a84:	4b52      	ldr	r3, [pc, #328]	@ (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a8a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003a92:	494f      	ldr	r1, [pc, #316]	@ (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a94:	4313      	orrs	r3, r2
 8003a96:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003a9a:	e001      	b.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a9c:	7cfb      	ldrb	r3, [r7, #19]
 8003a9e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	f000 80a0 	beq.w	8003bee <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003ab2:	4b47      	ldr	r3, [pc, #284]	@ (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ab4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ab6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d101      	bne.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003abe:	2301      	movs	r3, #1
 8003ac0:	e000      	b.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d00d      	beq.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ac8:	4b41      	ldr	r3, [pc, #260]	@ (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003aca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003acc:	4a40      	ldr	r2, [pc, #256]	@ (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ace:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ad2:	6593      	str	r3, [r2, #88]	@ 0x58
 8003ad4:	4b3e      	ldr	r3, [pc, #248]	@ (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ad6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ad8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003adc:	60bb      	str	r3, [r7, #8]
 8003ade:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ae4:	4b3b      	ldr	r3, [pc, #236]	@ (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a3a      	ldr	r2, [pc, #232]	@ (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003aea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003aee:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003af0:	f7fe fd8a 	bl	8002608 <HAL_GetTick>
 8003af4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003af6:	e009      	b.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003af8:	f7fe fd86 	bl	8002608 <HAL_GetTick>
 8003afc:	4602      	mov	r2, r0
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	1ad3      	subs	r3, r2, r3
 8003b02:	2b02      	cmp	r3, #2
 8003b04:	d902      	bls.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003b06:	2303      	movs	r3, #3
 8003b08:	74fb      	strb	r3, [r7, #19]
        break;
 8003b0a:	e005      	b.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003b0c:	4b31      	ldr	r3, [pc, #196]	@ (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d0ef      	beq.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003b18:	7cfb      	ldrb	r3, [r7, #19]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d15c      	bne.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003b1e:	4b2c      	ldr	r3, [pc, #176]	@ (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b24:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b28:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d01f      	beq.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003b36:	697a      	ldr	r2, [r7, #20]
 8003b38:	429a      	cmp	r2, r3
 8003b3a:	d019      	beq.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003b3c:	4b24      	ldr	r3, [pc, #144]	@ (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b42:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b46:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003b48:	4b21      	ldr	r3, [pc, #132]	@ (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b4e:	4a20      	ldr	r2, [pc, #128]	@ (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b54:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003b58:	4b1d      	ldr	r3, [pc, #116]	@ (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b5e:	4a1c      	ldr	r2, [pc, #112]	@ (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b60:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b64:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003b68:	4a19      	ldr	r2, [pc, #100]	@ (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	f003 0301 	and.w	r3, r3, #1
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d016      	beq.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b7a:	f7fe fd45 	bl	8002608 <HAL_GetTick>
 8003b7e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b80:	e00b      	b.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b82:	f7fe fd41 	bl	8002608 <HAL_GetTick>
 8003b86:	4602      	mov	r2, r0
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	1ad3      	subs	r3, r2, r3
 8003b8c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d902      	bls.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003b94:	2303      	movs	r3, #3
 8003b96:	74fb      	strb	r3, [r7, #19]
            break;
 8003b98:	e006      	b.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b9a:	4b0d      	ldr	r3, [pc, #52]	@ (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ba0:	f003 0302 	and.w	r3, r3, #2
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d0ec      	beq.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003ba8:	7cfb      	ldrb	r3, [r7, #19]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d10c      	bne.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003bae:	4b08      	ldr	r3, [pc, #32]	@ (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bb4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003bbe:	4904      	ldr	r1, [pc, #16]	@ (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003bc6:	e009      	b.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003bc8:	7cfb      	ldrb	r3, [r7, #19]
 8003bca:	74bb      	strb	r3, [r7, #18]
 8003bcc:	e006      	b.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003bce:	bf00      	nop
 8003bd0:	40021000 	.word	0x40021000
 8003bd4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bd8:	7cfb      	ldrb	r3, [r7, #19]
 8003bda:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003bdc:	7c7b      	ldrb	r3, [r7, #17]
 8003bde:	2b01      	cmp	r3, #1
 8003be0:	d105      	bne.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003be2:	4b9e      	ldr	r3, [pc, #632]	@ (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003be4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003be6:	4a9d      	ldr	r2, [pc, #628]	@ (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003be8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003bec:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f003 0301 	and.w	r3, r3, #1
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d00a      	beq.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003bfa:	4b98      	ldr	r3, [pc, #608]	@ (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c00:	f023 0203 	bic.w	r2, r3, #3
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c08:	4994      	ldr	r1, [pc, #592]	@ (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f003 0302 	and.w	r3, r3, #2
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d00a      	beq.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003c1c:	4b8f      	ldr	r3, [pc, #572]	@ (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c22:	f023 020c 	bic.w	r2, r3, #12
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c2a:	498c      	ldr	r1, [pc, #560]	@ (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f003 0304 	and.w	r3, r3, #4
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d00a      	beq.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003c3e:	4b87      	ldr	r3, [pc, #540]	@ (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c44:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c4c:	4983      	ldr	r1, [pc, #524]	@ (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f003 0308 	and.w	r3, r3, #8
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d00a      	beq.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003c60:	4b7e      	ldr	r3, [pc, #504]	@ (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c66:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c6e:	497b      	ldr	r1, [pc, #492]	@ (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c70:	4313      	orrs	r3, r2
 8003c72:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f003 0310 	and.w	r3, r3, #16
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d00a      	beq.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003c82:	4b76      	ldr	r3, [pc, #472]	@ (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c88:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c90:	4972      	ldr	r1, [pc, #456]	@ (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c92:	4313      	orrs	r3, r2
 8003c94:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f003 0320 	and.w	r3, r3, #32
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d00a      	beq.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003ca4:	4b6d      	ldr	r3, [pc, #436]	@ (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ca6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003caa:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003cb2:	496a      	ldr	r1, [pc, #424]	@ (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d00a      	beq.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003cc6:	4b65      	ldr	r3, [pc, #404]	@ (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ccc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cd4:	4961      	ldr	r1, [pc, #388]	@ (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d00a      	beq.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003ce8:	4b5c      	ldr	r3, [pc, #368]	@ (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cee:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003cf6:	4959      	ldr	r1, [pc, #356]	@ (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d00a      	beq.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003d0a:	4b54      	ldr	r3, [pc, #336]	@ (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d10:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d18:	4950      	ldr	r1, [pc, #320]	@ (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d00a      	beq.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003d2c:	4b4b      	ldr	r3, [pc, #300]	@ (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d32:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d3a:	4948      	ldr	r1, [pc, #288]	@ (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d00a      	beq.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003d4e:	4b43      	ldr	r3, [pc, #268]	@ (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d54:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d5c:	493f      	ldr	r1, [pc, #252]	@ (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d028      	beq.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003d70:	4b3a      	ldr	r3, [pc, #232]	@ (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d76:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003d7e:	4937      	ldr	r1, [pc, #220]	@ (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d80:	4313      	orrs	r3, r2
 8003d82:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003d8a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003d8e:	d106      	bne.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d90:	4b32      	ldr	r3, [pc, #200]	@ (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d92:	68db      	ldr	r3, [r3, #12]
 8003d94:	4a31      	ldr	r2, [pc, #196]	@ (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d96:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003d9a:	60d3      	str	r3, [r2, #12]
 8003d9c:	e011      	b.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003da2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003da6:	d10c      	bne.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	3304      	adds	r3, #4
 8003dac:	2101      	movs	r1, #1
 8003dae:	4618      	mov	r0, r3
 8003db0:	f000 f8c8 	bl	8003f44 <RCCEx_PLLSAI1_Config>
 8003db4:	4603      	mov	r3, r0
 8003db6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003db8:	7cfb      	ldrb	r3, [r7, #19]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d001      	beq.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003dbe:	7cfb      	ldrb	r3, [r7, #19]
 8003dc0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d028      	beq.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003dce:	4b23      	ldr	r3, [pc, #140]	@ (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dd4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ddc:	491f      	ldr	r1, [pc, #124]	@ (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dde:	4313      	orrs	r3, r2
 8003de0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003de8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003dec:	d106      	bne.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003dee:	4b1b      	ldr	r3, [pc, #108]	@ (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003df0:	68db      	ldr	r3, [r3, #12]
 8003df2:	4a1a      	ldr	r2, [pc, #104]	@ (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003df4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003df8:	60d3      	str	r3, [r2, #12]
 8003dfa:	e011      	b.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e00:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003e04:	d10c      	bne.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	3304      	adds	r3, #4
 8003e0a:	2101      	movs	r1, #1
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	f000 f899 	bl	8003f44 <RCCEx_PLLSAI1_Config>
 8003e12:	4603      	mov	r3, r0
 8003e14:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003e16:	7cfb      	ldrb	r3, [r7, #19]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d001      	beq.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003e1c:	7cfb      	ldrb	r3, [r7, #19]
 8003e1e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d02b      	beq.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003e2c:	4b0b      	ldr	r3, [pc, #44]	@ (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e32:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e3a:	4908      	ldr	r1, [pc, #32]	@ (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e46:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003e4a:	d109      	bne.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e4c:	4b03      	ldr	r3, [pc, #12]	@ (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e4e:	68db      	ldr	r3, [r3, #12]
 8003e50:	4a02      	ldr	r2, [pc, #8]	@ (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e52:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003e56:	60d3      	str	r3, [r2, #12]
 8003e58:	e014      	b.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003e5a:	bf00      	nop
 8003e5c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e64:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003e68:	d10c      	bne.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	3304      	adds	r3, #4
 8003e6e:	2101      	movs	r1, #1
 8003e70:	4618      	mov	r0, r3
 8003e72:	f000 f867 	bl	8003f44 <RCCEx_PLLSAI1_Config>
 8003e76:	4603      	mov	r3, r0
 8003e78:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003e7a:	7cfb      	ldrb	r3, [r7, #19]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d001      	beq.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003e80:	7cfb      	ldrb	r3, [r7, #19]
 8003e82:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d02f      	beq.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003e90:	4b2b      	ldr	r3, [pc, #172]	@ (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003e92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e96:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003e9e:	4928      	ldr	r1, [pc, #160]	@ (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003eaa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003eae:	d10d      	bne.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	3304      	adds	r3, #4
 8003eb4:	2102      	movs	r1, #2
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	f000 f844 	bl	8003f44 <RCCEx_PLLSAI1_Config>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003ec0:	7cfb      	ldrb	r3, [r7, #19]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d014      	beq.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003ec6:	7cfb      	ldrb	r3, [r7, #19]
 8003ec8:	74bb      	strb	r3, [r7, #18]
 8003eca:	e011      	b.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003ed0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003ed4:	d10c      	bne.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	3320      	adds	r3, #32
 8003eda:	2102      	movs	r1, #2
 8003edc:	4618      	mov	r0, r3
 8003ede:	f000 f925 	bl	800412c <RCCEx_PLLSAI2_Config>
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003ee6:	7cfb      	ldrb	r3, [r7, #19]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d001      	beq.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003eec:	7cfb      	ldrb	r3, [r7, #19]
 8003eee:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d00a      	beq.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003efc:	4b10      	ldr	r3, [pc, #64]	@ (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003efe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f02:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003f0a:	490d      	ldr	r1, [pc, #52]	@ (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d00b      	beq.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003f1e:	4b08      	ldr	r3, [pc, #32]	@ (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003f20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f24:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003f2e:	4904      	ldr	r1, [pc, #16]	@ (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003f30:	4313      	orrs	r3, r2
 8003f32:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003f36:	7cbb      	ldrb	r3, [r7, #18]
}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	3718      	adds	r7, #24
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bd80      	pop	{r7, pc}
 8003f40:	40021000 	.word	0x40021000

08003f44 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b084      	sub	sp, #16
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
 8003f4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003f4e:	2300      	movs	r3, #0
 8003f50:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003f52:	4b75      	ldr	r3, [pc, #468]	@ (8004128 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f54:	68db      	ldr	r3, [r3, #12]
 8003f56:	f003 0303 	and.w	r3, r3, #3
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d018      	beq.n	8003f90 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003f5e:	4b72      	ldr	r3, [pc, #456]	@ (8004128 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f60:	68db      	ldr	r3, [r3, #12]
 8003f62:	f003 0203 	and.w	r2, r3, #3
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	429a      	cmp	r2, r3
 8003f6c:	d10d      	bne.n	8003f8a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
       ||
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d009      	beq.n	8003f8a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003f76:	4b6c      	ldr	r3, [pc, #432]	@ (8004128 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f78:	68db      	ldr	r3, [r3, #12]
 8003f7a:	091b      	lsrs	r3, r3, #4
 8003f7c:	f003 0307 	and.w	r3, r3, #7
 8003f80:	1c5a      	adds	r2, r3, #1
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	685b      	ldr	r3, [r3, #4]
       ||
 8003f86:	429a      	cmp	r2, r3
 8003f88:	d047      	beq.n	800401a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	73fb      	strb	r3, [r7, #15]
 8003f8e:	e044      	b.n	800401a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	2b03      	cmp	r3, #3
 8003f96:	d018      	beq.n	8003fca <RCCEx_PLLSAI1_Config+0x86>
 8003f98:	2b03      	cmp	r3, #3
 8003f9a:	d825      	bhi.n	8003fe8 <RCCEx_PLLSAI1_Config+0xa4>
 8003f9c:	2b01      	cmp	r3, #1
 8003f9e:	d002      	beq.n	8003fa6 <RCCEx_PLLSAI1_Config+0x62>
 8003fa0:	2b02      	cmp	r3, #2
 8003fa2:	d009      	beq.n	8003fb8 <RCCEx_PLLSAI1_Config+0x74>
 8003fa4:	e020      	b.n	8003fe8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003fa6:	4b60      	ldr	r3, [pc, #384]	@ (8004128 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f003 0302 	and.w	r3, r3, #2
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d11d      	bne.n	8003fee <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003fb6:	e01a      	b.n	8003fee <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003fb8:	4b5b      	ldr	r3, [pc, #364]	@ (8004128 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d116      	bne.n	8003ff2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003fc8:	e013      	b.n	8003ff2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003fca:	4b57      	ldr	r3, [pc, #348]	@ (8004128 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d10f      	bne.n	8003ff6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003fd6:	4b54      	ldr	r3, [pc, #336]	@ (8004128 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d109      	bne.n	8003ff6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003fe6:	e006      	b.n	8003ff6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	73fb      	strb	r3, [r7, #15]
      break;
 8003fec:	e004      	b.n	8003ff8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003fee:	bf00      	nop
 8003ff0:	e002      	b.n	8003ff8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003ff2:	bf00      	nop
 8003ff4:	e000      	b.n	8003ff8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003ff6:	bf00      	nop
    }

    if(status == HAL_OK)
 8003ff8:	7bfb      	ldrb	r3, [r7, #15]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d10d      	bne.n	800401a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003ffe:	4b4a      	ldr	r3, [pc, #296]	@ (8004128 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004000:	68db      	ldr	r3, [r3, #12]
 8004002:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6819      	ldr	r1, [r3, #0]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	3b01      	subs	r3, #1
 8004010:	011b      	lsls	r3, r3, #4
 8004012:	430b      	orrs	r3, r1
 8004014:	4944      	ldr	r1, [pc, #272]	@ (8004128 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004016:	4313      	orrs	r3, r2
 8004018:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800401a:	7bfb      	ldrb	r3, [r7, #15]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d17d      	bne.n	800411c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004020:	4b41      	ldr	r3, [pc, #260]	@ (8004128 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a40      	ldr	r2, [pc, #256]	@ (8004128 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004026:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800402a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800402c:	f7fe faec 	bl	8002608 <HAL_GetTick>
 8004030:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004032:	e009      	b.n	8004048 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004034:	f7fe fae8 	bl	8002608 <HAL_GetTick>
 8004038:	4602      	mov	r2, r0
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	1ad3      	subs	r3, r2, r3
 800403e:	2b02      	cmp	r3, #2
 8004040:	d902      	bls.n	8004048 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004042:	2303      	movs	r3, #3
 8004044:	73fb      	strb	r3, [r7, #15]
        break;
 8004046:	e005      	b.n	8004054 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004048:	4b37      	ldr	r3, [pc, #220]	@ (8004128 <RCCEx_PLLSAI1_Config+0x1e4>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004050:	2b00      	cmp	r3, #0
 8004052:	d1ef      	bne.n	8004034 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004054:	7bfb      	ldrb	r3, [r7, #15]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d160      	bne.n	800411c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d111      	bne.n	8004084 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004060:	4b31      	ldr	r3, [pc, #196]	@ (8004128 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004062:	691b      	ldr	r3, [r3, #16]
 8004064:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004068:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800406c:	687a      	ldr	r2, [r7, #4]
 800406e:	6892      	ldr	r2, [r2, #8]
 8004070:	0211      	lsls	r1, r2, #8
 8004072:	687a      	ldr	r2, [r7, #4]
 8004074:	68d2      	ldr	r2, [r2, #12]
 8004076:	0912      	lsrs	r2, r2, #4
 8004078:	0452      	lsls	r2, r2, #17
 800407a:	430a      	orrs	r2, r1
 800407c:	492a      	ldr	r1, [pc, #168]	@ (8004128 <RCCEx_PLLSAI1_Config+0x1e4>)
 800407e:	4313      	orrs	r3, r2
 8004080:	610b      	str	r3, [r1, #16]
 8004082:	e027      	b.n	80040d4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	2b01      	cmp	r3, #1
 8004088:	d112      	bne.n	80040b0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800408a:	4b27      	ldr	r3, [pc, #156]	@ (8004128 <RCCEx_PLLSAI1_Config+0x1e4>)
 800408c:	691b      	ldr	r3, [r3, #16]
 800408e:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8004092:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004096:	687a      	ldr	r2, [r7, #4]
 8004098:	6892      	ldr	r2, [r2, #8]
 800409a:	0211      	lsls	r1, r2, #8
 800409c:	687a      	ldr	r2, [r7, #4]
 800409e:	6912      	ldr	r2, [r2, #16]
 80040a0:	0852      	lsrs	r2, r2, #1
 80040a2:	3a01      	subs	r2, #1
 80040a4:	0552      	lsls	r2, r2, #21
 80040a6:	430a      	orrs	r2, r1
 80040a8:	491f      	ldr	r1, [pc, #124]	@ (8004128 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040aa:	4313      	orrs	r3, r2
 80040ac:	610b      	str	r3, [r1, #16]
 80040ae:	e011      	b.n	80040d4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80040b0:	4b1d      	ldr	r3, [pc, #116]	@ (8004128 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040b2:	691b      	ldr	r3, [r3, #16]
 80040b4:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80040b8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80040bc:	687a      	ldr	r2, [r7, #4]
 80040be:	6892      	ldr	r2, [r2, #8]
 80040c0:	0211      	lsls	r1, r2, #8
 80040c2:	687a      	ldr	r2, [r7, #4]
 80040c4:	6952      	ldr	r2, [r2, #20]
 80040c6:	0852      	lsrs	r2, r2, #1
 80040c8:	3a01      	subs	r2, #1
 80040ca:	0652      	lsls	r2, r2, #25
 80040cc:	430a      	orrs	r2, r1
 80040ce:	4916      	ldr	r1, [pc, #88]	@ (8004128 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040d0:	4313      	orrs	r3, r2
 80040d2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80040d4:	4b14      	ldr	r3, [pc, #80]	@ (8004128 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a13      	ldr	r2, [pc, #76]	@ (8004128 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040da:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80040de:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040e0:	f7fe fa92 	bl	8002608 <HAL_GetTick>
 80040e4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80040e6:	e009      	b.n	80040fc <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80040e8:	f7fe fa8e 	bl	8002608 <HAL_GetTick>
 80040ec:	4602      	mov	r2, r0
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	1ad3      	subs	r3, r2, r3
 80040f2:	2b02      	cmp	r3, #2
 80040f4:	d902      	bls.n	80040fc <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80040f6:	2303      	movs	r3, #3
 80040f8:	73fb      	strb	r3, [r7, #15]
          break;
 80040fa:	e005      	b.n	8004108 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80040fc:	4b0a      	ldr	r3, [pc, #40]	@ (8004128 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004104:	2b00      	cmp	r3, #0
 8004106:	d0ef      	beq.n	80040e8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004108:	7bfb      	ldrb	r3, [r7, #15]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d106      	bne.n	800411c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800410e:	4b06      	ldr	r3, [pc, #24]	@ (8004128 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004110:	691a      	ldr	r2, [r3, #16]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	699b      	ldr	r3, [r3, #24]
 8004116:	4904      	ldr	r1, [pc, #16]	@ (8004128 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004118:	4313      	orrs	r3, r2
 800411a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800411c:	7bfb      	ldrb	r3, [r7, #15]
}
 800411e:	4618      	mov	r0, r3
 8004120:	3710      	adds	r7, #16
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}
 8004126:	bf00      	nop
 8004128:	40021000 	.word	0x40021000

0800412c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b084      	sub	sp, #16
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
 8004134:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004136:	2300      	movs	r3, #0
 8004138:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800413a:	4b6a      	ldr	r3, [pc, #424]	@ (80042e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800413c:	68db      	ldr	r3, [r3, #12]
 800413e:	f003 0303 	and.w	r3, r3, #3
 8004142:	2b00      	cmp	r3, #0
 8004144:	d018      	beq.n	8004178 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004146:	4b67      	ldr	r3, [pc, #412]	@ (80042e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004148:	68db      	ldr	r3, [r3, #12]
 800414a:	f003 0203 	and.w	r2, r3, #3
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	429a      	cmp	r2, r3
 8004154:	d10d      	bne.n	8004172 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
       ||
 800415a:	2b00      	cmp	r3, #0
 800415c:	d009      	beq.n	8004172 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800415e:	4b61      	ldr	r3, [pc, #388]	@ (80042e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004160:	68db      	ldr	r3, [r3, #12]
 8004162:	091b      	lsrs	r3, r3, #4
 8004164:	f003 0307 	and.w	r3, r3, #7
 8004168:	1c5a      	adds	r2, r3, #1
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	685b      	ldr	r3, [r3, #4]
       ||
 800416e:	429a      	cmp	r2, r3
 8004170:	d047      	beq.n	8004202 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004172:	2301      	movs	r3, #1
 8004174:	73fb      	strb	r3, [r7, #15]
 8004176:	e044      	b.n	8004202 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	2b03      	cmp	r3, #3
 800417e:	d018      	beq.n	80041b2 <RCCEx_PLLSAI2_Config+0x86>
 8004180:	2b03      	cmp	r3, #3
 8004182:	d825      	bhi.n	80041d0 <RCCEx_PLLSAI2_Config+0xa4>
 8004184:	2b01      	cmp	r3, #1
 8004186:	d002      	beq.n	800418e <RCCEx_PLLSAI2_Config+0x62>
 8004188:	2b02      	cmp	r3, #2
 800418a:	d009      	beq.n	80041a0 <RCCEx_PLLSAI2_Config+0x74>
 800418c:	e020      	b.n	80041d0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800418e:	4b55      	ldr	r3, [pc, #340]	@ (80042e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f003 0302 	and.w	r3, r3, #2
 8004196:	2b00      	cmp	r3, #0
 8004198:	d11d      	bne.n	80041d6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800419a:	2301      	movs	r3, #1
 800419c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800419e:	e01a      	b.n	80041d6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80041a0:	4b50      	ldr	r3, [pc, #320]	@ (80042e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d116      	bne.n	80041da <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80041ac:	2301      	movs	r3, #1
 80041ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041b0:	e013      	b.n	80041da <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80041b2:	4b4c      	ldr	r3, [pc, #304]	@ (80042e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d10f      	bne.n	80041de <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80041be:	4b49      	ldr	r3, [pc, #292]	@ (80042e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d109      	bne.n	80041de <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80041ca:	2301      	movs	r3, #1
 80041cc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80041ce:	e006      	b.n	80041de <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80041d0:	2301      	movs	r3, #1
 80041d2:	73fb      	strb	r3, [r7, #15]
      break;
 80041d4:	e004      	b.n	80041e0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80041d6:	bf00      	nop
 80041d8:	e002      	b.n	80041e0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80041da:	bf00      	nop
 80041dc:	e000      	b.n	80041e0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80041de:	bf00      	nop
    }

    if(status == HAL_OK)
 80041e0:	7bfb      	ldrb	r3, [r7, #15]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d10d      	bne.n	8004202 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80041e6:	4b3f      	ldr	r3, [pc, #252]	@ (80042e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041e8:	68db      	ldr	r3, [r3, #12]
 80041ea:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6819      	ldr	r1, [r3, #0]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	3b01      	subs	r3, #1
 80041f8:	011b      	lsls	r3, r3, #4
 80041fa:	430b      	orrs	r3, r1
 80041fc:	4939      	ldr	r1, [pc, #228]	@ (80042e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041fe:	4313      	orrs	r3, r2
 8004200:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004202:	7bfb      	ldrb	r3, [r7, #15]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d167      	bne.n	80042d8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004208:	4b36      	ldr	r3, [pc, #216]	@ (80042e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a35      	ldr	r2, [pc, #212]	@ (80042e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800420e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004212:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004214:	f7fe f9f8 	bl	8002608 <HAL_GetTick>
 8004218:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800421a:	e009      	b.n	8004230 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800421c:	f7fe f9f4 	bl	8002608 <HAL_GetTick>
 8004220:	4602      	mov	r2, r0
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	1ad3      	subs	r3, r2, r3
 8004226:	2b02      	cmp	r3, #2
 8004228:	d902      	bls.n	8004230 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800422a:	2303      	movs	r3, #3
 800422c:	73fb      	strb	r3, [r7, #15]
        break;
 800422e:	e005      	b.n	800423c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004230:	4b2c      	ldr	r3, [pc, #176]	@ (80042e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004238:	2b00      	cmp	r3, #0
 800423a:	d1ef      	bne.n	800421c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800423c:	7bfb      	ldrb	r3, [r7, #15]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d14a      	bne.n	80042d8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d111      	bne.n	800426c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004248:	4b26      	ldr	r3, [pc, #152]	@ (80042e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800424a:	695b      	ldr	r3, [r3, #20]
 800424c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004250:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004254:	687a      	ldr	r2, [r7, #4]
 8004256:	6892      	ldr	r2, [r2, #8]
 8004258:	0211      	lsls	r1, r2, #8
 800425a:	687a      	ldr	r2, [r7, #4]
 800425c:	68d2      	ldr	r2, [r2, #12]
 800425e:	0912      	lsrs	r2, r2, #4
 8004260:	0452      	lsls	r2, r2, #17
 8004262:	430a      	orrs	r2, r1
 8004264:	491f      	ldr	r1, [pc, #124]	@ (80042e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004266:	4313      	orrs	r3, r2
 8004268:	614b      	str	r3, [r1, #20]
 800426a:	e011      	b.n	8004290 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800426c:	4b1d      	ldr	r3, [pc, #116]	@ (80042e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800426e:	695b      	ldr	r3, [r3, #20]
 8004270:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004274:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004278:	687a      	ldr	r2, [r7, #4]
 800427a:	6892      	ldr	r2, [r2, #8]
 800427c:	0211      	lsls	r1, r2, #8
 800427e:	687a      	ldr	r2, [r7, #4]
 8004280:	6912      	ldr	r2, [r2, #16]
 8004282:	0852      	lsrs	r2, r2, #1
 8004284:	3a01      	subs	r2, #1
 8004286:	0652      	lsls	r2, r2, #25
 8004288:	430a      	orrs	r2, r1
 800428a:	4916      	ldr	r1, [pc, #88]	@ (80042e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800428c:	4313      	orrs	r3, r2
 800428e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004290:	4b14      	ldr	r3, [pc, #80]	@ (80042e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a13      	ldr	r2, [pc, #76]	@ (80042e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004296:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800429a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800429c:	f7fe f9b4 	bl	8002608 <HAL_GetTick>
 80042a0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80042a2:	e009      	b.n	80042b8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80042a4:	f7fe f9b0 	bl	8002608 <HAL_GetTick>
 80042a8:	4602      	mov	r2, r0
 80042aa:	68bb      	ldr	r3, [r7, #8]
 80042ac:	1ad3      	subs	r3, r2, r3
 80042ae:	2b02      	cmp	r3, #2
 80042b0:	d902      	bls.n	80042b8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80042b2:	2303      	movs	r3, #3
 80042b4:	73fb      	strb	r3, [r7, #15]
          break;
 80042b6:	e005      	b.n	80042c4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80042b8:	4b0a      	ldr	r3, [pc, #40]	@ (80042e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d0ef      	beq.n	80042a4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80042c4:	7bfb      	ldrb	r3, [r7, #15]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d106      	bne.n	80042d8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80042ca:	4b06      	ldr	r3, [pc, #24]	@ (80042e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042cc:	695a      	ldr	r2, [r3, #20]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	695b      	ldr	r3, [r3, #20]
 80042d2:	4904      	ldr	r1, [pc, #16]	@ (80042e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042d4:	4313      	orrs	r3, r2
 80042d6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80042d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80042da:	4618      	mov	r0, r3
 80042dc:	3710      	adds	r7, #16
 80042de:	46bd      	mov	sp, r7
 80042e0:	bd80      	pop	{r7, pc}
 80042e2:	bf00      	nop
 80042e4:	40021000 	.word	0x40021000

080042e8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b084      	sub	sp, #16
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d101      	bne.n	80042fa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80042f6:	2301      	movs	r3, #1
 80042f8:	e095      	b.n	8004426 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d108      	bne.n	8004314 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800430a:	d009      	beq.n	8004320 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2200      	movs	r2, #0
 8004310:	61da      	str	r2, [r3, #28]
 8004312:	e005      	b.n	8004320 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2200      	movs	r2, #0
 8004318:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2200      	movs	r2, #0
 800431e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2200      	movs	r2, #0
 8004324:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800432c:	b2db      	uxtb	r3, r3
 800432e:	2b00      	cmp	r3, #0
 8004330:	d106      	bne.n	8004340 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2200      	movs	r2, #0
 8004336:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800433a:	6878      	ldr	r0, [r7, #4]
 800433c:	f7fd fe32 	bl	8001fa4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2202      	movs	r2, #2
 8004344:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	681a      	ldr	r2, [r3, #0]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004356:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	68db      	ldr	r3, [r3, #12]
 800435c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004360:	d902      	bls.n	8004368 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004362:	2300      	movs	r3, #0
 8004364:	60fb      	str	r3, [r7, #12]
 8004366:	e002      	b.n	800436e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004368:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800436c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	68db      	ldr	r3, [r3, #12]
 8004372:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8004376:	d007      	beq.n	8004388 <HAL_SPI_Init+0xa0>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	68db      	ldr	r3, [r3, #12]
 800437c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004380:	d002      	beq.n	8004388 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2200      	movs	r2, #0
 8004386:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	689b      	ldr	r3, [r3, #8]
 8004394:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004398:	431a      	orrs	r2, r3
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	691b      	ldr	r3, [r3, #16]
 800439e:	f003 0302 	and.w	r3, r3, #2
 80043a2:	431a      	orrs	r2, r3
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	695b      	ldr	r3, [r3, #20]
 80043a8:	f003 0301 	and.w	r3, r3, #1
 80043ac:	431a      	orrs	r2, r3
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	699b      	ldr	r3, [r3, #24]
 80043b2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80043b6:	431a      	orrs	r2, r3
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	69db      	ldr	r3, [r3, #28]
 80043bc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80043c0:	431a      	orrs	r2, r3
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6a1b      	ldr	r3, [r3, #32]
 80043c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043ca:	ea42 0103 	orr.w	r1, r2, r3
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043d2:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	430a      	orrs	r2, r1
 80043dc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	699b      	ldr	r3, [r3, #24]
 80043e2:	0c1b      	lsrs	r3, r3, #16
 80043e4:	f003 0204 	and.w	r2, r3, #4
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043ec:	f003 0310 	and.w	r3, r3, #16
 80043f0:	431a      	orrs	r2, r3
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043f6:	f003 0308 	and.w	r3, r3, #8
 80043fa:	431a      	orrs	r2, r3
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	68db      	ldr	r3, [r3, #12]
 8004400:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004404:	ea42 0103 	orr.w	r1, r2, r3
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	430a      	orrs	r2, r1
 8004414:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2200      	movs	r2, #0
 800441a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2201      	movs	r2, #1
 8004420:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8004424:	2300      	movs	r3, #0
}
 8004426:	4618      	mov	r0, r3
 8004428:	3710      	adds	r7, #16
 800442a:	46bd      	mov	sp, r7
 800442c:	bd80      	pop	{r7, pc}

0800442e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800442e:	b580      	push	{r7, lr}
 8004430:	b088      	sub	sp, #32
 8004432:	af00      	add	r7, sp, #0
 8004434:	60f8      	str	r0, [r7, #12]
 8004436:	60b9      	str	r1, [r7, #8]
 8004438:	603b      	str	r3, [r7, #0]
 800443a:	4613      	mov	r3, r2
 800443c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800443e:	f7fe f8e3 	bl	8002608 <HAL_GetTick>
 8004442:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8004444:	88fb      	ldrh	r3, [r7, #6]
 8004446:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800444e:	b2db      	uxtb	r3, r3
 8004450:	2b01      	cmp	r3, #1
 8004452:	d001      	beq.n	8004458 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8004454:	2302      	movs	r3, #2
 8004456:	e15c      	b.n	8004712 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d002      	beq.n	8004464 <HAL_SPI_Transmit+0x36>
 800445e:	88fb      	ldrh	r3, [r7, #6]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d101      	bne.n	8004468 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8004464:	2301      	movs	r3, #1
 8004466:	e154      	b.n	8004712 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800446e:	2b01      	cmp	r3, #1
 8004470:	d101      	bne.n	8004476 <HAL_SPI_Transmit+0x48>
 8004472:	2302      	movs	r3, #2
 8004474:	e14d      	b.n	8004712 <HAL_SPI_Transmit+0x2e4>
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	2201      	movs	r2, #1
 800447a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	2203      	movs	r2, #3
 8004482:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	2200      	movs	r2, #0
 800448a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	68ba      	ldr	r2, [r7, #8]
 8004490:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	88fa      	ldrh	r2, [r7, #6]
 8004496:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	88fa      	ldrh	r2, [r7, #6]
 800449c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	2200      	movs	r2, #0
 80044a2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	2200      	movs	r2, #0
 80044a8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	2200      	movs	r2, #0
 80044b0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	2200      	movs	r2, #0
 80044b8:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	2200      	movs	r2, #0
 80044be:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	689b      	ldr	r3, [r3, #8]
 80044c4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80044c8:	d10f      	bne.n	80044ea <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	681a      	ldr	r2, [r3, #0]
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80044d8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	681a      	ldr	r2, [r3, #0]
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80044e8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044f4:	2b40      	cmp	r3, #64	@ 0x40
 80044f6:	d007      	beq.n	8004508 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	681a      	ldr	r2, [r3, #0]
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004506:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	68db      	ldr	r3, [r3, #12]
 800450c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004510:	d952      	bls.n	80045b8 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d002      	beq.n	8004520 <HAL_SPI_Transmit+0xf2>
 800451a:	8b7b      	ldrh	r3, [r7, #26]
 800451c:	2b01      	cmp	r3, #1
 800451e:	d145      	bne.n	80045ac <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004524:	881a      	ldrh	r2, [r3, #0]
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004530:	1c9a      	adds	r2, r3, #2
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800453a:	b29b      	uxth	r3, r3
 800453c:	3b01      	subs	r3, #1
 800453e:	b29a      	uxth	r2, r3
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004544:	e032      	b.n	80045ac <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	689b      	ldr	r3, [r3, #8]
 800454c:	f003 0302 	and.w	r3, r3, #2
 8004550:	2b02      	cmp	r3, #2
 8004552:	d112      	bne.n	800457a <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004558:	881a      	ldrh	r2, [r3, #0]
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004564:	1c9a      	adds	r2, r3, #2
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800456e:	b29b      	uxth	r3, r3
 8004570:	3b01      	subs	r3, #1
 8004572:	b29a      	uxth	r2, r3
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004578:	e018      	b.n	80045ac <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800457a:	f7fe f845 	bl	8002608 <HAL_GetTick>
 800457e:	4602      	mov	r2, r0
 8004580:	69fb      	ldr	r3, [r7, #28]
 8004582:	1ad3      	subs	r3, r2, r3
 8004584:	683a      	ldr	r2, [r7, #0]
 8004586:	429a      	cmp	r2, r3
 8004588:	d803      	bhi.n	8004592 <HAL_SPI_Transmit+0x164>
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004590:	d102      	bne.n	8004598 <HAL_SPI_Transmit+0x16a>
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d109      	bne.n	80045ac <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	2201      	movs	r2, #1
 800459c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	2200      	movs	r2, #0
 80045a4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80045a8:	2303      	movs	r3, #3
 80045aa:	e0b2      	b.n	8004712 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80045b0:	b29b      	uxth	r3, r3
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d1c7      	bne.n	8004546 <HAL_SPI_Transmit+0x118>
 80045b6:	e083      	b.n	80046c0 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d002      	beq.n	80045c6 <HAL_SPI_Transmit+0x198>
 80045c0:	8b7b      	ldrh	r3, [r7, #26]
 80045c2:	2b01      	cmp	r3, #1
 80045c4:	d177      	bne.n	80046b6 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80045ca:	b29b      	uxth	r3, r3
 80045cc:	2b01      	cmp	r3, #1
 80045ce:	d912      	bls.n	80045f6 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045d4:	881a      	ldrh	r2, [r3, #0]
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045e0:	1c9a      	adds	r2, r3, #2
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80045ea:	b29b      	uxth	r3, r3
 80045ec:	3b02      	subs	r3, #2
 80045ee:	b29a      	uxth	r2, r3
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80045f4:	e05f      	b.n	80046b6 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	330c      	adds	r3, #12
 8004600:	7812      	ldrb	r2, [r2, #0]
 8004602:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004608:	1c5a      	adds	r2, r3, #1
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004612:	b29b      	uxth	r3, r3
 8004614:	3b01      	subs	r3, #1
 8004616:	b29a      	uxth	r2, r3
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800461c:	e04b      	b.n	80046b6 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	689b      	ldr	r3, [r3, #8]
 8004624:	f003 0302 	and.w	r3, r3, #2
 8004628:	2b02      	cmp	r3, #2
 800462a:	d12b      	bne.n	8004684 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004630:	b29b      	uxth	r3, r3
 8004632:	2b01      	cmp	r3, #1
 8004634:	d912      	bls.n	800465c <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800463a:	881a      	ldrh	r2, [r3, #0]
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004646:	1c9a      	adds	r2, r3, #2
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004650:	b29b      	uxth	r3, r3
 8004652:	3b02      	subs	r3, #2
 8004654:	b29a      	uxth	r2, r3
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800465a:	e02c      	b.n	80046b6 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	330c      	adds	r3, #12
 8004666:	7812      	ldrb	r2, [r2, #0]
 8004668:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800466e:	1c5a      	adds	r2, r3, #1
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004678:	b29b      	uxth	r3, r3
 800467a:	3b01      	subs	r3, #1
 800467c:	b29a      	uxth	r2, r3
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004682:	e018      	b.n	80046b6 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004684:	f7fd ffc0 	bl	8002608 <HAL_GetTick>
 8004688:	4602      	mov	r2, r0
 800468a:	69fb      	ldr	r3, [r7, #28]
 800468c:	1ad3      	subs	r3, r2, r3
 800468e:	683a      	ldr	r2, [r7, #0]
 8004690:	429a      	cmp	r2, r3
 8004692:	d803      	bhi.n	800469c <HAL_SPI_Transmit+0x26e>
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	f1b3 3fff 	cmp.w	r3, #4294967295
 800469a:	d102      	bne.n	80046a2 <HAL_SPI_Transmit+0x274>
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d109      	bne.n	80046b6 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	2201      	movs	r2, #1
 80046a6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	2200      	movs	r2, #0
 80046ae:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80046b2:	2303      	movs	r3, #3
 80046b4:	e02d      	b.n	8004712 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80046ba:	b29b      	uxth	r3, r3
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d1ae      	bne.n	800461e <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80046c0:	69fa      	ldr	r2, [r7, #28]
 80046c2:	6839      	ldr	r1, [r7, #0]
 80046c4:	68f8      	ldr	r0, [r7, #12]
 80046c6:	f000 fb65 	bl	8004d94 <SPI_EndRxTxTransaction>
 80046ca:	4603      	mov	r3, r0
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d002      	beq.n	80046d6 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	2220      	movs	r2, #32
 80046d4:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	689b      	ldr	r3, [r3, #8]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d10a      	bne.n	80046f4 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80046de:	2300      	movs	r3, #0
 80046e0:	617b      	str	r3, [r7, #20]
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	68db      	ldr	r3, [r3, #12]
 80046e8:	617b      	str	r3, [r7, #20]
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	689b      	ldr	r3, [r3, #8]
 80046f0:	617b      	str	r3, [r7, #20]
 80046f2:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	2201      	movs	r2, #1
 80046f8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	2200      	movs	r2, #0
 8004700:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004708:	2b00      	cmp	r3, #0
 800470a:	d001      	beq.n	8004710 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 800470c:	2301      	movs	r3, #1
 800470e:	e000      	b.n	8004712 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8004710:	2300      	movs	r3, #0
  }
}
 8004712:	4618      	mov	r0, r3
 8004714:	3720      	adds	r7, #32
 8004716:	46bd      	mov	sp, r7
 8004718:	bd80      	pop	{r7, pc}

0800471a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800471a:	b580      	push	{r7, lr}
 800471c:	b08a      	sub	sp, #40	@ 0x28
 800471e:	af00      	add	r7, sp, #0
 8004720:	60f8      	str	r0, [r7, #12]
 8004722:	60b9      	str	r1, [r7, #8]
 8004724:	607a      	str	r2, [r7, #4]
 8004726:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004728:	2301      	movs	r3, #1
 800472a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800472c:	f7fd ff6c 	bl	8002608 <HAL_GetTick>
 8004730:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004738:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8004740:	887b      	ldrh	r3, [r7, #2]
 8004742:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8004744:	887b      	ldrh	r3, [r7, #2]
 8004746:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004748:	7ffb      	ldrb	r3, [r7, #31]
 800474a:	2b01      	cmp	r3, #1
 800474c:	d00c      	beq.n	8004768 <HAL_SPI_TransmitReceive+0x4e>
 800474e:	69bb      	ldr	r3, [r7, #24]
 8004750:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004754:	d106      	bne.n	8004764 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	689b      	ldr	r3, [r3, #8]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d102      	bne.n	8004764 <HAL_SPI_TransmitReceive+0x4a>
 800475e:	7ffb      	ldrb	r3, [r7, #31]
 8004760:	2b04      	cmp	r3, #4
 8004762:	d001      	beq.n	8004768 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8004764:	2302      	movs	r3, #2
 8004766:	e1f3      	b.n	8004b50 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d005      	beq.n	800477a <HAL_SPI_TransmitReceive+0x60>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d002      	beq.n	800477a <HAL_SPI_TransmitReceive+0x60>
 8004774:	887b      	ldrh	r3, [r7, #2]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d101      	bne.n	800477e <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 800477a:	2301      	movs	r3, #1
 800477c:	e1e8      	b.n	8004b50 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004784:	2b01      	cmp	r3, #1
 8004786:	d101      	bne.n	800478c <HAL_SPI_TransmitReceive+0x72>
 8004788:	2302      	movs	r3, #2
 800478a:	e1e1      	b.n	8004b50 <HAL_SPI_TransmitReceive+0x436>
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	2201      	movs	r2, #1
 8004790:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800479a:	b2db      	uxtb	r3, r3
 800479c:	2b04      	cmp	r3, #4
 800479e:	d003      	beq.n	80047a8 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	2205      	movs	r2, #5
 80047a4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	2200      	movs	r2, #0
 80047ac:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	687a      	ldr	r2, [r7, #4]
 80047b2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	887a      	ldrh	r2, [r7, #2]
 80047b8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	887a      	ldrh	r2, [r7, #2]
 80047c0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	68ba      	ldr	r2, [r7, #8]
 80047c8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	887a      	ldrh	r2, [r7, #2]
 80047ce:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	887a      	ldrh	r2, [r7, #2]
 80047d4:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	2200      	movs	r2, #0
 80047da:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	2200      	movs	r2, #0
 80047e0:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	68db      	ldr	r3, [r3, #12]
 80047e6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80047ea:	d802      	bhi.n	80047f2 <HAL_SPI_TransmitReceive+0xd8>
 80047ec:	8abb      	ldrh	r3, [r7, #20]
 80047ee:	2b01      	cmp	r3, #1
 80047f0:	d908      	bls.n	8004804 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	685a      	ldr	r2, [r3, #4]
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004800:	605a      	str	r2, [r3, #4]
 8004802:	e007      	b.n	8004814 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	685a      	ldr	r2, [r3, #4]
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004812:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800481e:	2b40      	cmp	r3, #64	@ 0x40
 8004820:	d007      	beq.n	8004832 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	681a      	ldr	r2, [r3, #0]
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004830:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	68db      	ldr	r3, [r3, #12]
 8004836:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800483a:	f240 8083 	bls.w	8004944 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d002      	beq.n	800484c <HAL_SPI_TransmitReceive+0x132>
 8004846:	8afb      	ldrh	r3, [r7, #22]
 8004848:	2b01      	cmp	r3, #1
 800484a:	d16f      	bne.n	800492c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004850:	881a      	ldrh	r2, [r3, #0]
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800485c:	1c9a      	adds	r2, r3, #2
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004866:	b29b      	uxth	r3, r3
 8004868:	3b01      	subs	r3, #1
 800486a:	b29a      	uxth	r2, r3
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004870:	e05c      	b.n	800492c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	689b      	ldr	r3, [r3, #8]
 8004878:	f003 0302 	and.w	r3, r3, #2
 800487c:	2b02      	cmp	r3, #2
 800487e:	d11b      	bne.n	80048b8 <HAL_SPI_TransmitReceive+0x19e>
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004884:	b29b      	uxth	r3, r3
 8004886:	2b00      	cmp	r3, #0
 8004888:	d016      	beq.n	80048b8 <HAL_SPI_TransmitReceive+0x19e>
 800488a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800488c:	2b01      	cmp	r3, #1
 800488e:	d113      	bne.n	80048b8 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004894:	881a      	ldrh	r2, [r3, #0]
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048a0:	1c9a      	adds	r2, r3, #2
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80048aa:	b29b      	uxth	r3, r3
 80048ac:	3b01      	subs	r3, #1
 80048ae:	b29a      	uxth	r2, r3
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80048b4:	2300      	movs	r3, #0
 80048b6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	689b      	ldr	r3, [r3, #8]
 80048be:	f003 0301 	and.w	r3, r3, #1
 80048c2:	2b01      	cmp	r3, #1
 80048c4:	d11c      	bne.n	8004900 <HAL_SPI_TransmitReceive+0x1e6>
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80048cc:	b29b      	uxth	r3, r3
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d016      	beq.n	8004900 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	68da      	ldr	r2, [r3, #12]
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048dc:	b292      	uxth	r2, r2
 80048de:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048e4:	1c9a      	adds	r2, r3, #2
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80048f0:	b29b      	uxth	r3, r3
 80048f2:	3b01      	subs	r3, #1
 80048f4:	b29a      	uxth	r2, r3
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80048fc:	2301      	movs	r3, #1
 80048fe:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004900:	f7fd fe82 	bl	8002608 <HAL_GetTick>
 8004904:	4602      	mov	r2, r0
 8004906:	6a3b      	ldr	r3, [r7, #32]
 8004908:	1ad3      	subs	r3, r2, r3
 800490a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800490c:	429a      	cmp	r2, r3
 800490e:	d80d      	bhi.n	800492c <HAL_SPI_TransmitReceive+0x212>
 8004910:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004912:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004916:	d009      	beq.n	800492c <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	2201      	movs	r2, #1
 800491c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	2200      	movs	r2, #0
 8004924:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8004928:	2303      	movs	r3, #3
 800492a:	e111      	b.n	8004b50 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004930:	b29b      	uxth	r3, r3
 8004932:	2b00      	cmp	r3, #0
 8004934:	d19d      	bne.n	8004872 <HAL_SPI_TransmitReceive+0x158>
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800493c:	b29b      	uxth	r3, r3
 800493e:	2b00      	cmp	r3, #0
 8004940:	d197      	bne.n	8004872 <HAL_SPI_TransmitReceive+0x158>
 8004942:	e0e5      	b.n	8004b10 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d003      	beq.n	8004954 <HAL_SPI_TransmitReceive+0x23a>
 800494c:	8afb      	ldrh	r3, [r7, #22]
 800494e:	2b01      	cmp	r3, #1
 8004950:	f040 80d1 	bne.w	8004af6 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004958:	b29b      	uxth	r3, r3
 800495a:	2b01      	cmp	r3, #1
 800495c:	d912      	bls.n	8004984 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004962:	881a      	ldrh	r2, [r3, #0]
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800496e:	1c9a      	adds	r2, r3, #2
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004978:	b29b      	uxth	r3, r3
 800497a:	3b02      	subs	r3, #2
 800497c:	b29a      	uxth	r2, r3
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004982:	e0b8      	b.n	8004af6 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	330c      	adds	r3, #12
 800498e:	7812      	ldrb	r2, [r2, #0]
 8004990:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004996:	1c5a      	adds	r2, r3, #1
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80049a0:	b29b      	uxth	r3, r3
 80049a2:	3b01      	subs	r3, #1
 80049a4:	b29a      	uxth	r2, r3
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80049aa:	e0a4      	b.n	8004af6 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	689b      	ldr	r3, [r3, #8]
 80049b2:	f003 0302 	and.w	r3, r3, #2
 80049b6:	2b02      	cmp	r3, #2
 80049b8:	d134      	bne.n	8004a24 <HAL_SPI_TransmitReceive+0x30a>
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80049be:	b29b      	uxth	r3, r3
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d02f      	beq.n	8004a24 <HAL_SPI_TransmitReceive+0x30a>
 80049c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049c6:	2b01      	cmp	r3, #1
 80049c8:	d12c      	bne.n	8004a24 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80049ce:	b29b      	uxth	r3, r3
 80049d0:	2b01      	cmp	r3, #1
 80049d2:	d912      	bls.n	80049fa <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049d8:	881a      	ldrh	r2, [r3, #0]
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049e4:	1c9a      	adds	r2, r3, #2
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80049ee:	b29b      	uxth	r3, r3
 80049f0:	3b02      	subs	r3, #2
 80049f2:	b29a      	uxth	r2, r3
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80049f8:	e012      	b.n	8004a20 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	330c      	adds	r3, #12
 8004a04:	7812      	ldrb	r2, [r2, #0]
 8004a06:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a0c:	1c5a      	adds	r2, r3, #1
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004a16:	b29b      	uxth	r3, r3
 8004a18:	3b01      	subs	r3, #1
 8004a1a:	b29a      	uxth	r2, r3
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004a20:	2300      	movs	r3, #0
 8004a22:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	689b      	ldr	r3, [r3, #8]
 8004a2a:	f003 0301 	and.w	r3, r3, #1
 8004a2e:	2b01      	cmp	r3, #1
 8004a30:	d148      	bne.n	8004ac4 <HAL_SPI_TransmitReceive+0x3aa>
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004a38:	b29b      	uxth	r3, r3
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d042      	beq.n	8004ac4 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004a44:	b29b      	uxth	r3, r3
 8004a46:	2b01      	cmp	r3, #1
 8004a48:	d923      	bls.n	8004a92 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	68da      	ldr	r2, [r3, #12]
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a54:	b292      	uxth	r2, r2
 8004a56:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a5c:	1c9a      	adds	r2, r3, #2
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004a68:	b29b      	uxth	r3, r3
 8004a6a:	3b02      	subs	r3, #2
 8004a6c:	b29a      	uxth	r2, r3
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004a7a:	b29b      	uxth	r3, r3
 8004a7c:	2b01      	cmp	r3, #1
 8004a7e:	d81f      	bhi.n	8004ac0 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	685a      	ldr	r2, [r3, #4]
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004a8e:	605a      	str	r2, [r3, #4]
 8004a90:	e016      	b.n	8004ac0 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f103 020c 	add.w	r2, r3, #12
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a9e:	7812      	ldrb	r2, [r2, #0]
 8004aa0:	b2d2      	uxtb	r2, r2
 8004aa2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004aa8:	1c5a      	adds	r2, r3, #1
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004ab4:	b29b      	uxth	r3, r3
 8004ab6:	3b01      	subs	r3, #1
 8004ab8:	b29a      	uxth	r2, r3
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004ac4:	f7fd fda0 	bl	8002608 <HAL_GetTick>
 8004ac8:	4602      	mov	r2, r0
 8004aca:	6a3b      	ldr	r3, [r7, #32]
 8004acc:	1ad3      	subs	r3, r2, r3
 8004ace:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004ad0:	429a      	cmp	r2, r3
 8004ad2:	d803      	bhi.n	8004adc <HAL_SPI_TransmitReceive+0x3c2>
 8004ad4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ad6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ada:	d102      	bne.n	8004ae2 <HAL_SPI_TransmitReceive+0x3c8>
 8004adc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d109      	bne.n	8004af6 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	2201      	movs	r2, #1
 8004ae6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	2200      	movs	r2, #0
 8004aee:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8004af2:	2303      	movs	r3, #3
 8004af4:	e02c      	b.n	8004b50 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004afa:	b29b      	uxth	r3, r3
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	f47f af55 	bne.w	80049ac <HAL_SPI_TransmitReceive+0x292>
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004b08:	b29b      	uxth	r3, r3
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	f47f af4e 	bne.w	80049ac <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004b10:	6a3a      	ldr	r2, [r7, #32]
 8004b12:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004b14:	68f8      	ldr	r0, [r7, #12]
 8004b16:	f000 f93d 	bl	8004d94 <SPI_EndRxTxTransaction>
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d008      	beq.n	8004b32 <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	2220      	movs	r2, #32
 8004b24:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8004b2e:	2301      	movs	r3, #1
 8004b30:	e00e      	b.n	8004b50 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	2201      	movs	r2, #1
 8004b36:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d001      	beq.n	8004b4e <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	e000      	b.n	8004b50 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8004b4e:	2300      	movs	r3, #0
  }
}
 8004b50:	4618      	mov	r0, r3
 8004b52:	3728      	adds	r7, #40	@ 0x28
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bd80      	pop	{r7, pc}

08004b58 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b088      	sub	sp, #32
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	60f8      	str	r0, [r7, #12]
 8004b60:	60b9      	str	r1, [r7, #8]
 8004b62:	603b      	str	r3, [r7, #0]
 8004b64:	4613      	mov	r3, r2
 8004b66:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004b68:	f7fd fd4e 	bl	8002608 <HAL_GetTick>
 8004b6c:	4602      	mov	r2, r0
 8004b6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b70:	1a9b      	subs	r3, r3, r2
 8004b72:	683a      	ldr	r2, [r7, #0]
 8004b74:	4413      	add	r3, r2
 8004b76:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004b78:	f7fd fd46 	bl	8002608 <HAL_GetTick>
 8004b7c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004b7e:	4b39      	ldr	r3, [pc, #228]	@ (8004c64 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	015b      	lsls	r3, r3, #5
 8004b84:	0d1b      	lsrs	r3, r3, #20
 8004b86:	69fa      	ldr	r2, [r7, #28]
 8004b88:	fb02 f303 	mul.w	r3, r2, r3
 8004b8c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004b8e:	e054      	b.n	8004c3a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b96:	d050      	beq.n	8004c3a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004b98:	f7fd fd36 	bl	8002608 <HAL_GetTick>
 8004b9c:	4602      	mov	r2, r0
 8004b9e:	69bb      	ldr	r3, [r7, #24]
 8004ba0:	1ad3      	subs	r3, r2, r3
 8004ba2:	69fa      	ldr	r2, [r7, #28]
 8004ba4:	429a      	cmp	r2, r3
 8004ba6:	d902      	bls.n	8004bae <SPI_WaitFlagStateUntilTimeout+0x56>
 8004ba8:	69fb      	ldr	r3, [r7, #28]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d13d      	bne.n	8004c2a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	685a      	ldr	r2, [r3, #4]
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004bbc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	685b      	ldr	r3, [r3, #4]
 8004bc2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004bc6:	d111      	bne.n	8004bec <SPI_WaitFlagStateUntilTimeout+0x94>
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	689b      	ldr	r3, [r3, #8]
 8004bcc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004bd0:	d004      	beq.n	8004bdc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	689b      	ldr	r3, [r3, #8]
 8004bd6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004bda:	d107      	bne.n	8004bec <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	681a      	ldr	r2, [r3, #0]
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004bea:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bf0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004bf4:	d10f      	bne.n	8004c16 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	681a      	ldr	r2, [r3, #0]
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004c04:	601a      	str	r2, [r3, #0]
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	681a      	ldr	r2, [r3, #0]
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004c14:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	2201      	movs	r2, #1
 8004c1a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	2200      	movs	r2, #0
 8004c22:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004c26:	2303      	movs	r3, #3
 8004c28:	e017      	b.n	8004c5a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004c2a:	697b      	ldr	r3, [r7, #20]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d101      	bne.n	8004c34 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004c30:	2300      	movs	r3, #0
 8004c32:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004c34:	697b      	ldr	r3, [r7, #20]
 8004c36:	3b01      	subs	r3, #1
 8004c38:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	689a      	ldr	r2, [r3, #8]
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	4013      	ands	r3, r2
 8004c44:	68ba      	ldr	r2, [r7, #8]
 8004c46:	429a      	cmp	r2, r3
 8004c48:	bf0c      	ite	eq
 8004c4a:	2301      	moveq	r3, #1
 8004c4c:	2300      	movne	r3, #0
 8004c4e:	b2db      	uxtb	r3, r3
 8004c50:	461a      	mov	r2, r3
 8004c52:	79fb      	ldrb	r3, [r7, #7]
 8004c54:	429a      	cmp	r2, r3
 8004c56:	d19b      	bne.n	8004b90 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004c58:	2300      	movs	r3, #0
}
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	3720      	adds	r7, #32
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bd80      	pop	{r7, pc}
 8004c62:	bf00      	nop
 8004c64:	20000008 	.word	0x20000008

08004c68 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b08a      	sub	sp, #40	@ 0x28
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	60f8      	str	r0, [r7, #12]
 8004c70:	60b9      	str	r1, [r7, #8]
 8004c72:	607a      	str	r2, [r7, #4]
 8004c74:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004c76:	2300      	movs	r3, #0
 8004c78:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004c7a:	f7fd fcc5 	bl	8002608 <HAL_GetTick>
 8004c7e:	4602      	mov	r2, r0
 8004c80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c82:	1a9b      	subs	r3, r3, r2
 8004c84:	683a      	ldr	r2, [r7, #0]
 8004c86:	4413      	add	r3, r2
 8004c88:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8004c8a:	f7fd fcbd 	bl	8002608 <HAL_GetTick>
 8004c8e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	330c      	adds	r3, #12
 8004c96:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004c98:	4b3d      	ldr	r3, [pc, #244]	@ (8004d90 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004c9a:	681a      	ldr	r2, [r3, #0]
 8004c9c:	4613      	mov	r3, r2
 8004c9e:	009b      	lsls	r3, r3, #2
 8004ca0:	4413      	add	r3, r2
 8004ca2:	00da      	lsls	r2, r3, #3
 8004ca4:	1ad3      	subs	r3, r2, r3
 8004ca6:	0d1b      	lsrs	r3, r3, #20
 8004ca8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004caa:	fb02 f303 	mul.w	r3, r2, r3
 8004cae:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004cb0:	e060      	b.n	8004d74 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004cb2:	68bb      	ldr	r3, [r7, #8]
 8004cb4:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004cb8:	d107      	bne.n	8004cca <SPI_WaitFifoStateUntilTimeout+0x62>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d104      	bne.n	8004cca <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004cc0:	69fb      	ldr	r3, [r7, #28]
 8004cc2:	781b      	ldrb	r3, [r3, #0]
 8004cc4:	b2db      	uxtb	r3, r3
 8004cc6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004cc8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cd0:	d050      	beq.n	8004d74 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004cd2:	f7fd fc99 	bl	8002608 <HAL_GetTick>
 8004cd6:	4602      	mov	r2, r0
 8004cd8:	6a3b      	ldr	r3, [r7, #32]
 8004cda:	1ad3      	subs	r3, r2, r3
 8004cdc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004cde:	429a      	cmp	r2, r3
 8004ce0:	d902      	bls.n	8004ce8 <SPI_WaitFifoStateUntilTimeout+0x80>
 8004ce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d13d      	bne.n	8004d64 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	685a      	ldr	r2, [r3, #4]
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004cf6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	685b      	ldr	r3, [r3, #4]
 8004cfc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004d00:	d111      	bne.n	8004d26 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	689b      	ldr	r3, [r3, #8]
 8004d06:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004d0a:	d004      	beq.n	8004d16 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	689b      	ldr	r3, [r3, #8]
 8004d10:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d14:	d107      	bne.n	8004d26 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	681a      	ldr	r2, [r3, #0]
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004d24:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d2a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004d2e:	d10f      	bne.n	8004d50 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	681a      	ldr	r2, [r3, #0]
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004d3e:	601a      	str	r2, [r3, #0]
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	681a      	ldr	r2, [r3, #0]
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004d4e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	2201      	movs	r2, #1
 8004d54:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004d60:	2303      	movs	r3, #3
 8004d62:	e010      	b.n	8004d86 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004d64:	69bb      	ldr	r3, [r7, #24]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d101      	bne.n	8004d6e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8004d6e:	69bb      	ldr	r3, [r7, #24]
 8004d70:	3b01      	subs	r3, #1
 8004d72:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	689a      	ldr	r2, [r3, #8]
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	4013      	ands	r3, r2
 8004d7e:	687a      	ldr	r2, [r7, #4]
 8004d80:	429a      	cmp	r2, r3
 8004d82:	d196      	bne.n	8004cb2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004d84:	2300      	movs	r3, #0
}
 8004d86:	4618      	mov	r0, r3
 8004d88:	3728      	adds	r7, #40	@ 0x28
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	bd80      	pop	{r7, pc}
 8004d8e:	bf00      	nop
 8004d90:	20000008 	.word	0x20000008

08004d94 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b086      	sub	sp, #24
 8004d98:	af02      	add	r7, sp, #8
 8004d9a:	60f8      	str	r0, [r7, #12]
 8004d9c:	60b9      	str	r1, [r7, #8]
 8004d9e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	9300      	str	r3, [sp, #0]
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	2200      	movs	r2, #0
 8004da8:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8004dac:	68f8      	ldr	r0, [r7, #12]
 8004dae:	f7ff ff5b 	bl	8004c68 <SPI_WaitFifoStateUntilTimeout>
 8004db2:	4603      	mov	r3, r0
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d007      	beq.n	8004dc8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004dbc:	f043 0220 	orr.w	r2, r3, #32
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004dc4:	2303      	movs	r3, #3
 8004dc6:	e027      	b.n	8004e18 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	9300      	str	r3, [sp, #0]
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	2200      	movs	r2, #0
 8004dd0:	2180      	movs	r1, #128	@ 0x80
 8004dd2:	68f8      	ldr	r0, [r7, #12]
 8004dd4:	f7ff fec0 	bl	8004b58 <SPI_WaitFlagStateUntilTimeout>
 8004dd8:	4603      	mov	r3, r0
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d007      	beq.n	8004dee <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004de2:	f043 0220 	orr.w	r2, r3, #32
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004dea:	2303      	movs	r3, #3
 8004dec:	e014      	b.n	8004e18 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	9300      	str	r3, [sp, #0]
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	2200      	movs	r2, #0
 8004df6:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8004dfa:	68f8      	ldr	r0, [r7, #12]
 8004dfc:	f7ff ff34 	bl	8004c68 <SPI_WaitFifoStateUntilTimeout>
 8004e00:	4603      	mov	r3, r0
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d007      	beq.n	8004e16 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e0a:	f043 0220 	orr.w	r2, r3, #32
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004e12:	2303      	movs	r3, #3
 8004e14:	e000      	b.n	8004e18 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004e16:	2300      	movs	r3, #0
}
 8004e18:	4618      	mov	r0, r3
 8004e1a:	3710      	adds	r7, #16
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	bd80      	pop	{r7, pc}

08004e20 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b082      	sub	sp, #8
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d101      	bne.n	8004e32 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	e049      	b.n	8004ec6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e38:	b2db      	uxtb	r3, r3
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d106      	bne.n	8004e4c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2200      	movs	r2, #0
 8004e42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004e46:	6878      	ldr	r0, [r7, #4]
 8004e48:	f7fd f8ee 	bl	8002028 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2202      	movs	r2, #2
 8004e50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681a      	ldr	r2, [r3, #0]
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	3304      	adds	r3, #4
 8004e5c:	4619      	mov	r1, r3
 8004e5e:	4610      	mov	r0, r2
 8004e60:	f000 fde0 	bl	8005a24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2201      	movs	r2, #1
 8004e68:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2201      	movs	r2, #1
 8004e70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2201      	movs	r2, #1
 8004e78:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2201      	movs	r2, #1
 8004e80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2201      	movs	r2, #1
 8004e88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2201      	movs	r2, #1
 8004e90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2201      	movs	r2, #1
 8004e98:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2201      	movs	r2, #1
 8004ea0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2201      	movs	r2, #1
 8004ea8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2201      	movs	r2, #1
 8004eb0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2201      	movs	r2, #1
 8004eb8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2201      	movs	r2, #1
 8004ec0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004ec4:	2300      	movs	r3, #0
}
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	3708      	adds	r7, #8
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bd80      	pop	{r7, pc}
	...

08004ed0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	b085      	sub	sp, #20
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ede:	b2db      	uxtb	r3, r3
 8004ee0:	2b01      	cmp	r3, #1
 8004ee2:	d001      	beq.n	8004ee8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	e04f      	b.n	8004f88 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2202      	movs	r2, #2
 8004eec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	68da      	ldr	r2, [r3, #12]
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f042 0201 	orr.w	r2, r2, #1
 8004efe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4a23      	ldr	r2, [pc, #140]	@ (8004f94 <HAL_TIM_Base_Start_IT+0xc4>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d01d      	beq.n	8004f46 <HAL_TIM_Base_Start_IT+0x76>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f12:	d018      	beq.n	8004f46 <HAL_TIM_Base_Start_IT+0x76>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4a1f      	ldr	r2, [pc, #124]	@ (8004f98 <HAL_TIM_Base_Start_IT+0xc8>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d013      	beq.n	8004f46 <HAL_TIM_Base_Start_IT+0x76>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4a1e      	ldr	r2, [pc, #120]	@ (8004f9c <HAL_TIM_Base_Start_IT+0xcc>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d00e      	beq.n	8004f46 <HAL_TIM_Base_Start_IT+0x76>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a1c      	ldr	r2, [pc, #112]	@ (8004fa0 <HAL_TIM_Base_Start_IT+0xd0>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d009      	beq.n	8004f46 <HAL_TIM_Base_Start_IT+0x76>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4a1b      	ldr	r2, [pc, #108]	@ (8004fa4 <HAL_TIM_Base_Start_IT+0xd4>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d004      	beq.n	8004f46 <HAL_TIM_Base_Start_IT+0x76>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a19      	ldr	r2, [pc, #100]	@ (8004fa8 <HAL_TIM_Base_Start_IT+0xd8>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d115      	bne.n	8004f72 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	689a      	ldr	r2, [r3, #8]
 8004f4c:	4b17      	ldr	r3, [pc, #92]	@ (8004fac <HAL_TIM_Base_Start_IT+0xdc>)
 8004f4e:	4013      	ands	r3, r2
 8004f50:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	2b06      	cmp	r3, #6
 8004f56:	d015      	beq.n	8004f84 <HAL_TIM_Base_Start_IT+0xb4>
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f5e:	d011      	beq.n	8004f84 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	681a      	ldr	r2, [r3, #0]
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f042 0201 	orr.w	r2, r2, #1
 8004f6e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f70:	e008      	b.n	8004f84 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	681a      	ldr	r2, [r3, #0]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f042 0201 	orr.w	r2, r2, #1
 8004f80:	601a      	str	r2, [r3, #0]
 8004f82:	e000      	b.n	8004f86 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f84:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004f86:	2300      	movs	r3, #0
}
 8004f88:	4618      	mov	r0, r3
 8004f8a:	3714      	adds	r7, #20
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f92:	4770      	bx	lr
 8004f94:	40012c00 	.word	0x40012c00
 8004f98:	40000400 	.word	0x40000400
 8004f9c:	40000800 	.word	0x40000800
 8004fa0:	40000c00 	.word	0x40000c00
 8004fa4:	40013400 	.word	0x40013400
 8004fa8:	40014000 	.word	0x40014000
 8004fac:	00010007 	.word	0x00010007

08004fb0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	b083      	sub	sp, #12
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	68da      	ldr	r2, [r3, #12]
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f022 0201 	bic.w	r2, r2, #1
 8004fc6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	6a1a      	ldr	r2, [r3, #32]
 8004fce:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004fd2:	4013      	ands	r3, r2
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d10f      	bne.n	8004ff8 <HAL_TIM_Base_Stop_IT+0x48>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	6a1a      	ldr	r2, [r3, #32]
 8004fde:	f240 4344 	movw	r3, #1092	@ 0x444
 8004fe2:	4013      	ands	r3, r2
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d107      	bne.n	8004ff8 <HAL_TIM_Base_Stop_IT+0x48>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	681a      	ldr	r2, [r3, #0]
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f022 0201 	bic.w	r2, r2, #1
 8004ff6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8005000:	2300      	movs	r3, #0
}
 8005002:	4618      	mov	r0, r3
 8005004:	370c      	adds	r7, #12
 8005006:	46bd      	mov	sp, r7
 8005008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500c:	4770      	bx	lr

0800500e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800500e:	b580      	push	{r7, lr}
 8005010:	b082      	sub	sp, #8
 8005012:	af00      	add	r7, sp, #0
 8005014:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d101      	bne.n	8005020 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800501c:	2301      	movs	r3, #1
 800501e:	e049      	b.n	80050b4 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005026:	b2db      	uxtb	r3, r3
 8005028:	2b00      	cmp	r3, #0
 800502a:	d106      	bne.n	800503a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2200      	movs	r2, #0
 8005030:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005034:	6878      	ldr	r0, [r7, #4]
 8005036:	f000 f841 	bl	80050bc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2202      	movs	r2, #2
 800503e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681a      	ldr	r2, [r3, #0]
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	3304      	adds	r3, #4
 800504a:	4619      	mov	r1, r3
 800504c:	4610      	mov	r0, r2
 800504e:	f000 fce9 	bl	8005a24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2201      	movs	r2, #1
 8005056:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2201      	movs	r2, #1
 800505e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2201      	movs	r2, #1
 8005066:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2201      	movs	r2, #1
 800506e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2201      	movs	r2, #1
 8005076:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2201      	movs	r2, #1
 800507e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2201      	movs	r2, #1
 8005086:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2201      	movs	r2, #1
 800508e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2201      	movs	r2, #1
 8005096:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2201      	movs	r2, #1
 800509e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2201      	movs	r2, #1
 80050a6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2201      	movs	r2, #1
 80050ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80050b2:	2300      	movs	r3, #0
}
 80050b4:	4618      	mov	r0, r3
 80050b6:	3708      	adds	r7, #8
 80050b8:	46bd      	mov	sp, r7
 80050ba:	bd80      	pop	{r7, pc}

080050bc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80050bc:	b480      	push	{r7}
 80050be:	b083      	sub	sp, #12
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80050c4:	bf00      	nop
 80050c6:	370c      	adds	r7, #12
 80050c8:	46bd      	mov	sp, r7
 80050ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ce:	4770      	bx	lr

080050d0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b084      	sub	sp, #16
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
 80050d8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d109      	bne.n	80050f4 <HAL_TIM_PWM_Start+0x24>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80050e6:	b2db      	uxtb	r3, r3
 80050e8:	2b01      	cmp	r3, #1
 80050ea:	bf14      	ite	ne
 80050ec:	2301      	movne	r3, #1
 80050ee:	2300      	moveq	r3, #0
 80050f0:	b2db      	uxtb	r3, r3
 80050f2:	e03c      	b.n	800516e <HAL_TIM_PWM_Start+0x9e>
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	2b04      	cmp	r3, #4
 80050f8:	d109      	bne.n	800510e <HAL_TIM_PWM_Start+0x3e>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005100:	b2db      	uxtb	r3, r3
 8005102:	2b01      	cmp	r3, #1
 8005104:	bf14      	ite	ne
 8005106:	2301      	movne	r3, #1
 8005108:	2300      	moveq	r3, #0
 800510a:	b2db      	uxtb	r3, r3
 800510c:	e02f      	b.n	800516e <HAL_TIM_PWM_Start+0x9e>
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	2b08      	cmp	r3, #8
 8005112:	d109      	bne.n	8005128 <HAL_TIM_PWM_Start+0x58>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800511a:	b2db      	uxtb	r3, r3
 800511c:	2b01      	cmp	r3, #1
 800511e:	bf14      	ite	ne
 8005120:	2301      	movne	r3, #1
 8005122:	2300      	moveq	r3, #0
 8005124:	b2db      	uxtb	r3, r3
 8005126:	e022      	b.n	800516e <HAL_TIM_PWM_Start+0x9e>
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	2b0c      	cmp	r3, #12
 800512c:	d109      	bne.n	8005142 <HAL_TIM_PWM_Start+0x72>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005134:	b2db      	uxtb	r3, r3
 8005136:	2b01      	cmp	r3, #1
 8005138:	bf14      	ite	ne
 800513a:	2301      	movne	r3, #1
 800513c:	2300      	moveq	r3, #0
 800513e:	b2db      	uxtb	r3, r3
 8005140:	e015      	b.n	800516e <HAL_TIM_PWM_Start+0x9e>
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	2b10      	cmp	r3, #16
 8005146:	d109      	bne.n	800515c <HAL_TIM_PWM_Start+0x8c>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800514e:	b2db      	uxtb	r3, r3
 8005150:	2b01      	cmp	r3, #1
 8005152:	bf14      	ite	ne
 8005154:	2301      	movne	r3, #1
 8005156:	2300      	moveq	r3, #0
 8005158:	b2db      	uxtb	r3, r3
 800515a:	e008      	b.n	800516e <HAL_TIM_PWM_Start+0x9e>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005162:	b2db      	uxtb	r3, r3
 8005164:	2b01      	cmp	r3, #1
 8005166:	bf14      	ite	ne
 8005168:	2301      	movne	r3, #1
 800516a:	2300      	moveq	r3, #0
 800516c:	b2db      	uxtb	r3, r3
 800516e:	2b00      	cmp	r3, #0
 8005170:	d001      	beq.n	8005176 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005172:	2301      	movs	r3, #1
 8005174:	e09c      	b.n	80052b0 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d104      	bne.n	8005186 <HAL_TIM_PWM_Start+0xb6>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2202      	movs	r2, #2
 8005180:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005184:	e023      	b.n	80051ce <HAL_TIM_PWM_Start+0xfe>
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	2b04      	cmp	r3, #4
 800518a:	d104      	bne.n	8005196 <HAL_TIM_PWM_Start+0xc6>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2202      	movs	r2, #2
 8005190:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005194:	e01b      	b.n	80051ce <HAL_TIM_PWM_Start+0xfe>
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	2b08      	cmp	r3, #8
 800519a:	d104      	bne.n	80051a6 <HAL_TIM_PWM_Start+0xd6>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2202      	movs	r2, #2
 80051a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80051a4:	e013      	b.n	80051ce <HAL_TIM_PWM_Start+0xfe>
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	2b0c      	cmp	r3, #12
 80051aa:	d104      	bne.n	80051b6 <HAL_TIM_PWM_Start+0xe6>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2202      	movs	r2, #2
 80051b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80051b4:	e00b      	b.n	80051ce <HAL_TIM_PWM_Start+0xfe>
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	2b10      	cmp	r3, #16
 80051ba:	d104      	bne.n	80051c6 <HAL_TIM_PWM_Start+0xf6>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2202      	movs	r2, #2
 80051c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80051c4:	e003      	b.n	80051ce <HAL_TIM_PWM_Start+0xfe>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2202      	movs	r2, #2
 80051ca:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	2201      	movs	r2, #1
 80051d4:	6839      	ldr	r1, [r7, #0]
 80051d6:	4618      	mov	r0, r3
 80051d8:	f001 f83a 	bl	8006250 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4a35      	ldr	r2, [pc, #212]	@ (80052b8 <HAL_TIM_PWM_Start+0x1e8>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d013      	beq.n	800520e <HAL_TIM_PWM_Start+0x13e>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4a34      	ldr	r2, [pc, #208]	@ (80052bc <HAL_TIM_PWM_Start+0x1ec>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d00e      	beq.n	800520e <HAL_TIM_PWM_Start+0x13e>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4a32      	ldr	r2, [pc, #200]	@ (80052c0 <HAL_TIM_PWM_Start+0x1f0>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d009      	beq.n	800520e <HAL_TIM_PWM_Start+0x13e>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	4a31      	ldr	r2, [pc, #196]	@ (80052c4 <HAL_TIM_PWM_Start+0x1f4>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d004      	beq.n	800520e <HAL_TIM_PWM_Start+0x13e>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4a2f      	ldr	r2, [pc, #188]	@ (80052c8 <HAL_TIM_PWM_Start+0x1f8>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d101      	bne.n	8005212 <HAL_TIM_PWM_Start+0x142>
 800520e:	2301      	movs	r3, #1
 8005210:	e000      	b.n	8005214 <HAL_TIM_PWM_Start+0x144>
 8005212:	2300      	movs	r3, #0
 8005214:	2b00      	cmp	r3, #0
 8005216:	d007      	beq.n	8005228 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005226:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4a22      	ldr	r2, [pc, #136]	@ (80052b8 <HAL_TIM_PWM_Start+0x1e8>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d01d      	beq.n	800526e <HAL_TIM_PWM_Start+0x19e>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800523a:	d018      	beq.n	800526e <HAL_TIM_PWM_Start+0x19e>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4a22      	ldr	r2, [pc, #136]	@ (80052cc <HAL_TIM_PWM_Start+0x1fc>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d013      	beq.n	800526e <HAL_TIM_PWM_Start+0x19e>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4a21      	ldr	r2, [pc, #132]	@ (80052d0 <HAL_TIM_PWM_Start+0x200>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d00e      	beq.n	800526e <HAL_TIM_PWM_Start+0x19e>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4a1f      	ldr	r2, [pc, #124]	@ (80052d4 <HAL_TIM_PWM_Start+0x204>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d009      	beq.n	800526e <HAL_TIM_PWM_Start+0x19e>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4a17      	ldr	r2, [pc, #92]	@ (80052bc <HAL_TIM_PWM_Start+0x1ec>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d004      	beq.n	800526e <HAL_TIM_PWM_Start+0x19e>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4a15      	ldr	r2, [pc, #84]	@ (80052c0 <HAL_TIM_PWM_Start+0x1f0>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d115      	bne.n	800529a <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	689a      	ldr	r2, [r3, #8]
 8005274:	4b18      	ldr	r3, [pc, #96]	@ (80052d8 <HAL_TIM_PWM_Start+0x208>)
 8005276:	4013      	ands	r3, r2
 8005278:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	2b06      	cmp	r3, #6
 800527e:	d015      	beq.n	80052ac <HAL_TIM_PWM_Start+0x1dc>
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005286:	d011      	beq.n	80052ac <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	681a      	ldr	r2, [r3, #0]
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f042 0201 	orr.w	r2, r2, #1
 8005296:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005298:	e008      	b.n	80052ac <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	681a      	ldr	r2, [r3, #0]
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f042 0201 	orr.w	r2, r2, #1
 80052a8:	601a      	str	r2, [r3, #0]
 80052aa:	e000      	b.n	80052ae <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052ac:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80052ae:	2300      	movs	r3, #0
}
 80052b0:	4618      	mov	r0, r3
 80052b2:	3710      	adds	r7, #16
 80052b4:	46bd      	mov	sp, r7
 80052b6:	bd80      	pop	{r7, pc}
 80052b8:	40012c00 	.word	0x40012c00
 80052bc:	40013400 	.word	0x40013400
 80052c0:	40014000 	.word	0x40014000
 80052c4:	40014400 	.word	0x40014400
 80052c8:	40014800 	.word	0x40014800
 80052cc:	40000400 	.word	0x40000400
 80052d0:	40000800 	.word	0x40000800
 80052d4:	40000c00 	.word	0x40000c00
 80052d8:	00010007 	.word	0x00010007

080052dc <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b082      	sub	sp, #8
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
 80052e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	2200      	movs	r2, #0
 80052ec:	6839      	ldr	r1, [r7, #0]
 80052ee:	4618      	mov	r0, r3
 80052f0:	f000 ffae 	bl	8006250 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a3e      	ldr	r2, [pc, #248]	@ (80053f4 <HAL_TIM_PWM_Stop+0x118>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d013      	beq.n	8005326 <HAL_TIM_PWM_Stop+0x4a>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4a3d      	ldr	r2, [pc, #244]	@ (80053f8 <HAL_TIM_PWM_Stop+0x11c>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d00e      	beq.n	8005326 <HAL_TIM_PWM_Stop+0x4a>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4a3b      	ldr	r2, [pc, #236]	@ (80053fc <HAL_TIM_PWM_Stop+0x120>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d009      	beq.n	8005326 <HAL_TIM_PWM_Stop+0x4a>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	4a3a      	ldr	r2, [pc, #232]	@ (8005400 <HAL_TIM_PWM_Stop+0x124>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d004      	beq.n	8005326 <HAL_TIM_PWM_Stop+0x4a>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4a38      	ldr	r2, [pc, #224]	@ (8005404 <HAL_TIM_PWM_Stop+0x128>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d101      	bne.n	800532a <HAL_TIM_PWM_Stop+0x4e>
 8005326:	2301      	movs	r3, #1
 8005328:	e000      	b.n	800532c <HAL_TIM_PWM_Stop+0x50>
 800532a:	2300      	movs	r3, #0
 800532c:	2b00      	cmp	r3, #0
 800532e:	d017      	beq.n	8005360 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	6a1a      	ldr	r2, [r3, #32]
 8005336:	f241 1311 	movw	r3, #4369	@ 0x1111
 800533a:	4013      	ands	r3, r2
 800533c:	2b00      	cmp	r3, #0
 800533e:	d10f      	bne.n	8005360 <HAL_TIM_PWM_Stop+0x84>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	6a1a      	ldr	r2, [r3, #32]
 8005346:	f240 4344 	movw	r3, #1092	@ 0x444
 800534a:	4013      	ands	r3, r2
 800534c:	2b00      	cmp	r3, #0
 800534e:	d107      	bne.n	8005360 <HAL_TIM_PWM_Stop+0x84>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800535e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	6a1a      	ldr	r2, [r3, #32]
 8005366:	f241 1311 	movw	r3, #4369	@ 0x1111
 800536a:	4013      	ands	r3, r2
 800536c:	2b00      	cmp	r3, #0
 800536e:	d10f      	bne.n	8005390 <HAL_TIM_PWM_Stop+0xb4>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	6a1a      	ldr	r2, [r3, #32]
 8005376:	f240 4344 	movw	r3, #1092	@ 0x444
 800537a:	4013      	ands	r3, r2
 800537c:	2b00      	cmp	r3, #0
 800537e:	d107      	bne.n	8005390 <HAL_TIM_PWM_Stop+0xb4>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	681a      	ldr	r2, [r3, #0]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f022 0201 	bic.w	r2, r2, #1
 800538e:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d104      	bne.n	80053a0 <HAL_TIM_PWM_Stop+0xc4>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2201      	movs	r2, #1
 800539a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800539e:	e023      	b.n	80053e8 <HAL_TIM_PWM_Stop+0x10c>
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	2b04      	cmp	r3, #4
 80053a4:	d104      	bne.n	80053b0 <HAL_TIM_PWM_Stop+0xd4>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2201      	movs	r2, #1
 80053aa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80053ae:	e01b      	b.n	80053e8 <HAL_TIM_PWM_Stop+0x10c>
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	2b08      	cmp	r3, #8
 80053b4:	d104      	bne.n	80053c0 <HAL_TIM_PWM_Stop+0xe4>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2201      	movs	r2, #1
 80053ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80053be:	e013      	b.n	80053e8 <HAL_TIM_PWM_Stop+0x10c>
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	2b0c      	cmp	r3, #12
 80053c4:	d104      	bne.n	80053d0 <HAL_TIM_PWM_Stop+0xf4>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2201      	movs	r2, #1
 80053ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80053ce:	e00b      	b.n	80053e8 <HAL_TIM_PWM_Stop+0x10c>
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	2b10      	cmp	r3, #16
 80053d4:	d104      	bne.n	80053e0 <HAL_TIM_PWM_Stop+0x104>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2201      	movs	r2, #1
 80053da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80053de:	e003      	b.n	80053e8 <HAL_TIM_PWM_Stop+0x10c>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2201      	movs	r2, #1
 80053e4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 80053e8:	2300      	movs	r3, #0
}
 80053ea:	4618      	mov	r0, r3
 80053ec:	3708      	adds	r7, #8
 80053ee:	46bd      	mov	sp, r7
 80053f0:	bd80      	pop	{r7, pc}
 80053f2:	bf00      	nop
 80053f4:	40012c00 	.word	0x40012c00
 80053f8:	40013400 	.word	0x40013400
 80053fc:	40014000 	.word	0x40014000
 8005400:	40014400 	.word	0x40014400
 8005404:	40014800 	.word	0x40014800

08005408 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b084      	sub	sp, #16
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	68db      	ldr	r3, [r3, #12]
 8005416:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	691b      	ldr	r3, [r3, #16]
 800541e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	f003 0302 	and.w	r3, r3, #2
 8005426:	2b00      	cmp	r3, #0
 8005428:	d020      	beq.n	800546c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	f003 0302 	and.w	r3, r3, #2
 8005430:	2b00      	cmp	r3, #0
 8005432:	d01b      	beq.n	800546c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f06f 0202 	mvn.w	r2, #2
 800543c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2201      	movs	r2, #1
 8005442:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	699b      	ldr	r3, [r3, #24]
 800544a:	f003 0303 	and.w	r3, r3, #3
 800544e:	2b00      	cmp	r3, #0
 8005450:	d003      	beq.n	800545a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005452:	6878      	ldr	r0, [r7, #4]
 8005454:	f000 fac7 	bl	80059e6 <HAL_TIM_IC_CaptureCallback>
 8005458:	e005      	b.n	8005466 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800545a:	6878      	ldr	r0, [r7, #4]
 800545c:	f000 fab9 	bl	80059d2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005460:	6878      	ldr	r0, [r7, #4]
 8005462:	f000 faca 	bl	80059fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2200      	movs	r2, #0
 800546a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	f003 0304 	and.w	r3, r3, #4
 8005472:	2b00      	cmp	r3, #0
 8005474:	d020      	beq.n	80054b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	f003 0304 	and.w	r3, r3, #4
 800547c:	2b00      	cmp	r3, #0
 800547e:	d01b      	beq.n	80054b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f06f 0204 	mvn.w	r2, #4
 8005488:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2202      	movs	r2, #2
 800548e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	699b      	ldr	r3, [r3, #24]
 8005496:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800549a:	2b00      	cmp	r3, #0
 800549c:	d003      	beq.n	80054a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800549e:	6878      	ldr	r0, [r7, #4]
 80054a0:	f000 faa1 	bl	80059e6 <HAL_TIM_IC_CaptureCallback>
 80054a4:	e005      	b.n	80054b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054a6:	6878      	ldr	r0, [r7, #4]
 80054a8:	f000 fa93 	bl	80059d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054ac:	6878      	ldr	r0, [r7, #4]
 80054ae:	f000 faa4 	bl	80059fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2200      	movs	r2, #0
 80054b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	f003 0308 	and.w	r3, r3, #8
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d020      	beq.n	8005504 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	f003 0308 	and.w	r3, r3, #8
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d01b      	beq.n	8005504 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f06f 0208 	mvn.w	r2, #8
 80054d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2204      	movs	r2, #4
 80054da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	69db      	ldr	r3, [r3, #28]
 80054e2:	f003 0303 	and.w	r3, r3, #3
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d003      	beq.n	80054f2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054ea:	6878      	ldr	r0, [r7, #4]
 80054ec:	f000 fa7b 	bl	80059e6 <HAL_TIM_IC_CaptureCallback>
 80054f0:	e005      	b.n	80054fe <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054f2:	6878      	ldr	r0, [r7, #4]
 80054f4:	f000 fa6d 	bl	80059d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054f8:	6878      	ldr	r0, [r7, #4]
 80054fa:	f000 fa7e 	bl	80059fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2200      	movs	r2, #0
 8005502:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	f003 0310 	and.w	r3, r3, #16
 800550a:	2b00      	cmp	r3, #0
 800550c:	d020      	beq.n	8005550 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	f003 0310 	and.w	r3, r3, #16
 8005514:	2b00      	cmp	r3, #0
 8005516:	d01b      	beq.n	8005550 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f06f 0210 	mvn.w	r2, #16
 8005520:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2208      	movs	r2, #8
 8005526:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	69db      	ldr	r3, [r3, #28]
 800552e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005532:	2b00      	cmp	r3, #0
 8005534:	d003      	beq.n	800553e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005536:	6878      	ldr	r0, [r7, #4]
 8005538:	f000 fa55 	bl	80059e6 <HAL_TIM_IC_CaptureCallback>
 800553c:	e005      	b.n	800554a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800553e:	6878      	ldr	r0, [r7, #4]
 8005540:	f000 fa47 	bl	80059d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005544:	6878      	ldr	r0, [r7, #4]
 8005546:	f000 fa58 	bl	80059fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2200      	movs	r2, #0
 800554e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005550:	68bb      	ldr	r3, [r7, #8]
 8005552:	f003 0301 	and.w	r3, r3, #1
 8005556:	2b00      	cmp	r3, #0
 8005558:	d00c      	beq.n	8005574 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	f003 0301 	and.w	r3, r3, #1
 8005560:	2b00      	cmp	r3, #0
 8005562:	d007      	beq.n	8005574 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f06f 0201 	mvn.w	r2, #1
 800556c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800556e:	6878      	ldr	r0, [r7, #4]
 8005570:	f7fc fc38 	bl	8001de4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800557a:	2b00      	cmp	r3, #0
 800557c:	d104      	bne.n	8005588 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800557e:	68bb      	ldr	r3, [r7, #8]
 8005580:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005584:	2b00      	cmp	r3, #0
 8005586:	d00c      	beq.n	80055a2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800558e:	2b00      	cmp	r3, #0
 8005590:	d007      	beq.n	80055a2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800559a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800559c:	6878      	ldr	r0, [r7, #4]
 800559e:	f000 ff0f 	bl	80063c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80055a2:	68bb      	ldr	r3, [r7, #8]
 80055a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d00c      	beq.n	80055c6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d007      	beq.n	80055c6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80055be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80055c0:	6878      	ldr	r0, [r7, #4]
 80055c2:	f000 ff07 	bl	80063d4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d00c      	beq.n	80055ea <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d007      	beq.n	80055ea <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80055e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80055e4:	6878      	ldr	r0, [r7, #4]
 80055e6:	f000 fa12 	bl	8005a0e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80055ea:	68bb      	ldr	r3, [r7, #8]
 80055ec:	f003 0320 	and.w	r3, r3, #32
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d00c      	beq.n	800560e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	f003 0320 	and.w	r3, r3, #32
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d007      	beq.n	800560e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f06f 0220 	mvn.w	r2, #32
 8005606:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005608:	6878      	ldr	r0, [r7, #4]
 800560a:	f000 fecf 	bl	80063ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800560e:	bf00      	nop
 8005610:	3710      	adds	r7, #16
 8005612:	46bd      	mov	sp, r7
 8005614:	bd80      	pop	{r7, pc}
	...

08005618 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b086      	sub	sp, #24
 800561c:	af00      	add	r7, sp, #0
 800561e:	60f8      	str	r0, [r7, #12]
 8005620:	60b9      	str	r1, [r7, #8]
 8005622:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005624:	2300      	movs	r3, #0
 8005626:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800562e:	2b01      	cmp	r3, #1
 8005630:	d101      	bne.n	8005636 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005632:	2302      	movs	r3, #2
 8005634:	e0ff      	b.n	8005836 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	2201      	movs	r2, #1
 800563a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2b14      	cmp	r3, #20
 8005642:	f200 80f0 	bhi.w	8005826 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005646:	a201      	add	r2, pc, #4	@ (adr r2, 800564c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005648:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800564c:	080056a1 	.word	0x080056a1
 8005650:	08005827 	.word	0x08005827
 8005654:	08005827 	.word	0x08005827
 8005658:	08005827 	.word	0x08005827
 800565c:	080056e1 	.word	0x080056e1
 8005660:	08005827 	.word	0x08005827
 8005664:	08005827 	.word	0x08005827
 8005668:	08005827 	.word	0x08005827
 800566c:	08005723 	.word	0x08005723
 8005670:	08005827 	.word	0x08005827
 8005674:	08005827 	.word	0x08005827
 8005678:	08005827 	.word	0x08005827
 800567c:	08005763 	.word	0x08005763
 8005680:	08005827 	.word	0x08005827
 8005684:	08005827 	.word	0x08005827
 8005688:	08005827 	.word	0x08005827
 800568c:	080057a5 	.word	0x080057a5
 8005690:	08005827 	.word	0x08005827
 8005694:	08005827 	.word	0x08005827
 8005698:	08005827 	.word	0x08005827
 800569c:	080057e5 	.word	0x080057e5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	68b9      	ldr	r1, [r7, #8]
 80056a6:	4618      	mov	r0, r3
 80056a8:	f000 fa62 	bl	8005b70 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	699a      	ldr	r2, [r3, #24]
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f042 0208 	orr.w	r2, r2, #8
 80056ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	699a      	ldr	r2, [r3, #24]
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f022 0204 	bic.w	r2, r2, #4
 80056ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	6999      	ldr	r1, [r3, #24]
 80056d2:	68bb      	ldr	r3, [r7, #8]
 80056d4:	691a      	ldr	r2, [r3, #16]
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	430a      	orrs	r2, r1
 80056dc:	619a      	str	r2, [r3, #24]
      break;
 80056de:	e0a5      	b.n	800582c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	68b9      	ldr	r1, [r7, #8]
 80056e6:	4618      	mov	r0, r3
 80056e8:	f000 fad2 	bl	8005c90 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	699a      	ldr	r2, [r3, #24]
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80056fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	699a      	ldr	r2, [r3, #24]
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800570a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	6999      	ldr	r1, [r3, #24]
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	691b      	ldr	r3, [r3, #16]
 8005716:	021a      	lsls	r2, r3, #8
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	430a      	orrs	r2, r1
 800571e:	619a      	str	r2, [r3, #24]
      break;
 8005720:	e084      	b.n	800582c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	68b9      	ldr	r1, [r7, #8]
 8005728:	4618      	mov	r0, r3
 800572a:	f000 fb3b 	bl	8005da4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	69da      	ldr	r2, [r3, #28]
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f042 0208 	orr.w	r2, r2, #8
 800573c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	69da      	ldr	r2, [r3, #28]
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f022 0204 	bic.w	r2, r2, #4
 800574c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	69d9      	ldr	r1, [r3, #28]
 8005754:	68bb      	ldr	r3, [r7, #8]
 8005756:	691a      	ldr	r2, [r3, #16]
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	430a      	orrs	r2, r1
 800575e:	61da      	str	r2, [r3, #28]
      break;
 8005760:	e064      	b.n	800582c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	68b9      	ldr	r1, [r7, #8]
 8005768:	4618      	mov	r0, r3
 800576a:	f000 fba3 	bl	8005eb4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	69da      	ldr	r2, [r3, #28]
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800577c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	69da      	ldr	r2, [r3, #28]
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800578c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	69d9      	ldr	r1, [r3, #28]
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	691b      	ldr	r3, [r3, #16]
 8005798:	021a      	lsls	r2, r3, #8
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	430a      	orrs	r2, r1
 80057a0:	61da      	str	r2, [r3, #28]
      break;
 80057a2:	e043      	b.n	800582c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	68b9      	ldr	r1, [r7, #8]
 80057aa:	4618      	mov	r0, r3
 80057ac:	f000 fbec 	bl	8005f88 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f042 0208 	orr.w	r2, r2, #8
 80057be:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f022 0204 	bic.w	r2, r2, #4
 80057ce:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	691a      	ldr	r2, [r3, #16]
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	430a      	orrs	r2, r1
 80057e0:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80057e2:	e023      	b.n	800582c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	68b9      	ldr	r1, [r7, #8]
 80057ea:	4618      	mov	r0, r3
 80057ec:	f000 fc30 	bl	8006050 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80057fe:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800580e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005816:	68bb      	ldr	r3, [r7, #8]
 8005818:	691b      	ldr	r3, [r3, #16]
 800581a:	021a      	lsls	r2, r3, #8
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	430a      	orrs	r2, r1
 8005822:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005824:	e002      	b.n	800582c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005826:	2301      	movs	r3, #1
 8005828:	75fb      	strb	r3, [r7, #23]
      break;
 800582a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	2200      	movs	r2, #0
 8005830:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005834:	7dfb      	ldrb	r3, [r7, #23]
}
 8005836:	4618      	mov	r0, r3
 8005838:	3718      	adds	r7, #24
 800583a:	46bd      	mov	sp, r7
 800583c:	bd80      	pop	{r7, pc}
 800583e:	bf00      	nop

08005840 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b084      	sub	sp, #16
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
 8005848:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800584a:	2300      	movs	r3, #0
 800584c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005854:	2b01      	cmp	r3, #1
 8005856:	d101      	bne.n	800585c <HAL_TIM_ConfigClockSource+0x1c>
 8005858:	2302      	movs	r3, #2
 800585a:	e0b6      	b.n	80059ca <HAL_TIM_ConfigClockSource+0x18a>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2201      	movs	r2, #1
 8005860:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2202      	movs	r2, #2
 8005868:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	689b      	ldr	r3, [r3, #8]
 8005872:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800587a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800587e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005886:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	68ba      	ldr	r2, [r7, #8]
 800588e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005898:	d03e      	beq.n	8005918 <HAL_TIM_ConfigClockSource+0xd8>
 800589a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800589e:	f200 8087 	bhi.w	80059b0 <HAL_TIM_ConfigClockSource+0x170>
 80058a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80058a6:	f000 8086 	beq.w	80059b6 <HAL_TIM_ConfigClockSource+0x176>
 80058aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80058ae:	d87f      	bhi.n	80059b0 <HAL_TIM_ConfigClockSource+0x170>
 80058b0:	2b70      	cmp	r3, #112	@ 0x70
 80058b2:	d01a      	beq.n	80058ea <HAL_TIM_ConfigClockSource+0xaa>
 80058b4:	2b70      	cmp	r3, #112	@ 0x70
 80058b6:	d87b      	bhi.n	80059b0 <HAL_TIM_ConfigClockSource+0x170>
 80058b8:	2b60      	cmp	r3, #96	@ 0x60
 80058ba:	d050      	beq.n	800595e <HAL_TIM_ConfigClockSource+0x11e>
 80058bc:	2b60      	cmp	r3, #96	@ 0x60
 80058be:	d877      	bhi.n	80059b0 <HAL_TIM_ConfigClockSource+0x170>
 80058c0:	2b50      	cmp	r3, #80	@ 0x50
 80058c2:	d03c      	beq.n	800593e <HAL_TIM_ConfigClockSource+0xfe>
 80058c4:	2b50      	cmp	r3, #80	@ 0x50
 80058c6:	d873      	bhi.n	80059b0 <HAL_TIM_ConfigClockSource+0x170>
 80058c8:	2b40      	cmp	r3, #64	@ 0x40
 80058ca:	d058      	beq.n	800597e <HAL_TIM_ConfigClockSource+0x13e>
 80058cc:	2b40      	cmp	r3, #64	@ 0x40
 80058ce:	d86f      	bhi.n	80059b0 <HAL_TIM_ConfigClockSource+0x170>
 80058d0:	2b30      	cmp	r3, #48	@ 0x30
 80058d2:	d064      	beq.n	800599e <HAL_TIM_ConfigClockSource+0x15e>
 80058d4:	2b30      	cmp	r3, #48	@ 0x30
 80058d6:	d86b      	bhi.n	80059b0 <HAL_TIM_ConfigClockSource+0x170>
 80058d8:	2b20      	cmp	r3, #32
 80058da:	d060      	beq.n	800599e <HAL_TIM_ConfigClockSource+0x15e>
 80058dc:	2b20      	cmp	r3, #32
 80058de:	d867      	bhi.n	80059b0 <HAL_TIM_ConfigClockSource+0x170>
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d05c      	beq.n	800599e <HAL_TIM_ConfigClockSource+0x15e>
 80058e4:	2b10      	cmp	r3, #16
 80058e6:	d05a      	beq.n	800599e <HAL_TIM_ConfigClockSource+0x15e>
 80058e8:	e062      	b.n	80059b0 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80058fa:	f000 fc89 	bl	8006210 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	689b      	ldr	r3, [r3, #8]
 8005904:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800590c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	68ba      	ldr	r2, [r7, #8]
 8005914:	609a      	str	r2, [r3, #8]
      break;
 8005916:	e04f      	b.n	80059b8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005928:	f000 fc72 	bl	8006210 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	689a      	ldr	r2, [r3, #8]
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800593a:	609a      	str	r2, [r3, #8]
      break;
 800593c:	e03c      	b.n	80059b8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800594a:	461a      	mov	r2, r3
 800594c:	f000 fbe6 	bl	800611c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	2150      	movs	r1, #80	@ 0x50
 8005956:	4618      	mov	r0, r3
 8005958:	f000 fc3f 	bl	80061da <TIM_ITRx_SetConfig>
      break;
 800595c:	e02c      	b.n	80059b8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800596a:	461a      	mov	r2, r3
 800596c:	f000 fc05 	bl	800617a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	2160      	movs	r1, #96	@ 0x60
 8005976:	4618      	mov	r0, r3
 8005978:	f000 fc2f 	bl	80061da <TIM_ITRx_SetConfig>
      break;
 800597c:	e01c      	b.n	80059b8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800598a:	461a      	mov	r2, r3
 800598c:	f000 fbc6 	bl	800611c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	2140      	movs	r1, #64	@ 0x40
 8005996:	4618      	mov	r0, r3
 8005998:	f000 fc1f 	bl	80061da <TIM_ITRx_SetConfig>
      break;
 800599c:	e00c      	b.n	80059b8 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681a      	ldr	r2, [r3, #0]
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	4619      	mov	r1, r3
 80059a8:	4610      	mov	r0, r2
 80059aa:	f000 fc16 	bl	80061da <TIM_ITRx_SetConfig>
      break;
 80059ae:	e003      	b.n	80059b8 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80059b0:	2301      	movs	r3, #1
 80059b2:	73fb      	strb	r3, [r7, #15]
      break;
 80059b4:	e000      	b.n	80059b8 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80059b6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2201      	movs	r2, #1
 80059bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2200      	movs	r2, #0
 80059c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80059c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80059ca:	4618      	mov	r0, r3
 80059cc:	3710      	adds	r7, #16
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bd80      	pop	{r7, pc}

080059d2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80059d2:	b480      	push	{r7}
 80059d4:	b083      	sub	sp, #12
 80059d6:	af00      	add	r7, sp, #0
 80059d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80059da:	bf00      	nop
 80059dc:	370c      	adds	r7, #12
 80059de:	46bd      	mov	sp, r7
 80059e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e4:	4770      	bx	lr

080059e6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80059e6:	b480      	push	{r7}
 80059e8:	b083      	sub	sp, #12
 80059ea:	af00      	add	r7, sp, #0
 80059ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80059ee:	bf00      	nop
 80059f0:	370c      	adds	r7, #12
 80059f2:	46bd      	mov	sp, r7
 80059f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f8:	4770      	bx	lr

080059fa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80059fa:	b480      	push	{r7}
 80059fc:	b083      	sub	sp, #12
 80059fe:	af00      	add	r7, sp, #0
 8005a00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005a02:	bf00      	nop
 8005a04:	370c      	adds	r7, #12
 8005a06:	46bd      	mov	sp, r7
 8005a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0c:	4770      	bx	lr

08005a0e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005a0e:	b480      	push	{r7}
 8005a10:	b083      	sub	sp, #12
 8005a12:	af00      	add	r7, sp, #0
 8005a14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005a16:	bf00      	nop
 8005a18:	370c      	adds	r7, #12
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a20:	4770      	bx	lr
	...

08005a24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005a24:	b480      	push	{r7}
 8005a26:	b085      	sub	sp, #20
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
 8005a2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	4a46      	ldr	r2, [pc, #280]	@ (8005b50 <TIM_Base_SetConfig+0x12c>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d013      	beq.n	8005a64 <TIM_Base_SetConfig+0x40>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a42:	d00f      	beq.n	8005a64 <TIM_Base_SetConfig+0x40>
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	4a43      	ldr	r2, [pc, #268]	@ (8005b54 <TIM_Base_SetConfig+0x130>)
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d00b      	beq.n	8005a64 <TIM_Base_SetConfig+0x40>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	4a42      	ldr	r2, [pc, #264]	@ (8005b58 <TIM_Base_SetConfig+0x134>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d007      	beq.n	8005a64 <TIM_Base_SetConfig+0x40>
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	4a41      	ldr	r2, [pc, #260]	@ (8005b5c <TIM_Base_SetConfig+0x138>)
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d003      	beq.n	8005a64 <TIM_Base_SetConfig+0x40>
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	4a40      	ldr	r2, [pc, #256]	@ (8005b60 <TIM_Base_SetConfig+0x13c>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d108      	bne.n	8005a76 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a6a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	685b      	ldr	r3, [r3, #4]
 8005a70:	68fa      	ldr	r2, [r7, #12]
 8005a72:	4313      	orrs	r3, r2
 8005a74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	4a35      	ldr	r2, [pc, #212]	@ (8005b50 <TIM_Base_SetConfig+0x12c>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d01f      	beq.n	8005abe <TIM_Base_SetConfig+0x9a>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a84:	d01b      	beq.n	8005abe <TIM_Base_SetConfig+0x9a>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	4a32      	ldr	r2, [pc, #200]	@ (8005b54 <TIM_Base_SetConfig+0x130>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d017      	beq.n	8005abe <TIM_Base_SetConfig+0x9a>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	4a31      	ldr	r2, [pc, #196]	@ (8005b58 <TIM_Base_SetConfig+0x134>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d013      	beq.n	8005abe <TIM_Base_SetConfig+0x9a>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	4a30      	ldr	r2, [pc, #192]	@ (8005b5c <TIM_Base_SetConfig+0x138>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d00f      	beq.n	8005abe <TIM_Base_SetConfig+0x9a>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	4a2f      	ldr	r2, [pc, #188]	@ (8005b60 <TIM_Base_SetConfig+0x13c>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d00b      	beq.n	8005abe <TIM_Base_SetConfig+0x9a>
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	4a2e      	ldr	r2, [pc, #184]	@ (8005b64 <TIM_Base_SetConfig+0x140>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d007      	beq.n	8005abe <TIM_Base_SetConfig+0x9a>
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	4a2d      	ldr	r2, [pc, #180]	@ (8005b68 <TIM_Base_SetConfig+0x144>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d003      	beq.n	8005abe <TIM_Base_SetConfig+0x9a>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	4a2c      	ldr	r2, [pc, #176]	@ (8005b6c <TIM_Base_SetConfig+0x148>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d108      	bne.n	8005ad0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005ac4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	68db      	ldr	r3, [r3, #12]
 8005aca:	68fa      	ldr	r2, [r7, #12]
 8005acc:	4313      	orrs	r3, r2
 8005ace:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	695b      	ldr	r3, [r3, #20]
 8005ada:	4313      	orrs	r3, r2
 8005adc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	68fa      	ldr	r2, [r7, #12]
 8005ae2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	689a      	ldr	r2, [r3, #8]
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	681a      	ldr	r2, [r3, #0]
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	4a16      	ldr	r2, [pc, #88]	@ (8005b50 <TIM_Base_SetConfig+0x12c>)
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d00f      	beq.n	8005b1c <TIM_Base_SetConfig+0xf8>
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	4a18      	ldr	r2, [pc, #96]	@ (8005b60 <TIM_Base_SetConfig+0x13c>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d00b      	beq.n	8005b1c <TIM_Base_SetConfig+0xf8>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	4a17      	ldr	r2, [pc, #92]	@ (8005b64 <TIM_Base_SetConfig+0x140>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d007      	beq.n	8005b1c <TIM_Base_SetConfig+0xf8>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	4a16      	ldr	r2, [pc, #88]	@ (8005b68 <TIM_Base_SetConfig+0x144>)
 8005b10:	4293      	cmp	r3, r2
 8005b12:	d003      	beq.n	8005b1c <TIM_Base_SetConfig+0xf8>
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	4a15      	ldr	r2, [pc, #84]	@ (8005b6c <TIM_Base_SetConfig+0x148>)
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d103      	bne.n	8005b24 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	691a      	ldr	r2, [r3, #16]
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2201      	movs	r2, #1
 8005b28:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	691b      	ldr	r3, [r3, #16]
 8005b2e:	f003 0301 	and.w	r3, r3, #1
 8005b32:	2b01      	cmp	r3, #1
 8005b34:	d105      	bne.n	8005b42 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	691b      	ldr	r3, [r3, #16]
 8005b3a:	f023 0201 	bic.w	r2, r3, #1
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	611a      	str	r2, [r3, #16]
  }
}
 8005b42:	bf00      	nop
 8005b44:	3714      	adds	r7, #20
 8005b46:	46bd      	mov	sp, r7
 8005b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4c:	4770      	bx	lr
 8005b4e:	bf00      	nop
 8005b50:	40012c00 	.word	0x40012c00
 8005b54:	40000400 	.word	0x40000400
 8005b58:	40000800 	.word	0x40000800
 8005b5c:	40000c00 	.word	0x40000c00
 8005b60:	40013400 	.word	0x40013400
 8005b64:	40014000 	.word	0x40014000
 8005b68:	40014400 	.word	0x40014400
 8005b6c:	40014800 	.word	0x40014800

08005b70 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b70:	b480      	push	{r7}
 8005b72:	b087      	sub	sp, #28
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
 8005b78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6a1b      	ldr	r3, [r3, #32]
 8005b7e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6a1b      	ldr	r3, [r3, #32]
 8005b84:	f023 0201 	bic.w	r2, r3, #1
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	685b      	ldr	r3, [r3, #4]
 8005b90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	699b      	ldr	r3, [r3, #24]
 8005b96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005b9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ba2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	f023 0303 	bic.w	r3, r3, #3
 8005baa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	68fa      	ldr	r2, [r7, #12]
 8005bb2:	4313      	orrs	r3, r2
 8005bb4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005bb6:	697b      	ldr	r3, [r7, #20]
 8005bb8:	f023 0302 	bic.w	r3, r3, #2
 8005bbc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	689b      	ldr	r3, [r3, #8]
 8005bc2:	697a      	ldr	r2, [r7, #20]
 8005bc4:	4313      	orrs	r3, r2
 8005bc6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	4a2c      	ldr	r2, [pc, #176]	@ (8005c7c <TIM_OC1_SetConfig+0x10c>)
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	d00f      	beq.n	8005bf0 <TIM_OC1_SetConfig+0x80>
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	4a2b      	ldr	r2, [pc, #172]	@ (8005c80 <TIM_OC1_SetConfig+0x110>)
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d00b      	beq.n	8005bf0 <TIM_OC1_SetConfig+0x80>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	4a2a      	ldr	r2, [pc, #168]	@ (8005c84 <TIM_OC1_SetConfig+0x114>)
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d007      	beq.n	8005bf0 <TIM_OC1_SetConfig+0x80>
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	4a29      	ldr	r2, [pc, #164]	@ (8005c88 <TIM_OC1_SetConfig+0x118>)
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d003      	beq.n	8005bf0 <TIM_OC1_SetConfig+0x80>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	4a28      	ldr	r2, [pc, #160]	@ (8005c8c <TIM_OC1_SetConfig+0x11c>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d10c      	bne.n	8005c0a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005bf0:	697b      	ldr	r3, [r7, #20]
 8005bf2:	f023 0308 	bic.w	r3, r3, #8
 8005bf6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	68db      	ldr	r3, [r3, #12]
 8005bfc:	697a      	ldr	r2, [r7, #20]
 8005bfe:	4313      	orrs	r3, r2
 8005c00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005c02:	697b      	ldr	r3, [r7, #20]
 8005c04:	f023 0304 	bic.w	r3, r3, #4
 8005c08:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	4a1b      	ldr	r2, [pc, #108]	@ (8005c7c <TIM_OC1_SetConfig+0x10c>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d00f      	beq.n	8005c32 <TIM_OC1_SetConfig+0xc2>
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	4a1a      	ldr	r2, [pc, #104]	@ (8005c80 <TIM_OC1_SetConfig+0x110>)
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d00b      	beq.n	8005c32 <TIM_OC1_SetConfig+0xc2>
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	4a19      	ldr	r2, [pc, #100]	@ (8005c84 <TIM_OC1_SetConfig+0x114>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d007      	beq.n	8005c32 <TIM_OC1_SetConfig+0xc2>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	4a18      	ldr	r2, [pc, #96]	@ (8005c88 <TIM_OC1_SetConfig+0x118>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d003      	beq.n	8005c32 <TIM_OC1_SetConfig+0xc2>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	4a17      	ldr	r2, [pc, #92]	@ (8005c8c <TIM_OC1_SetConfig+0x11c>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d111      	bne.n	8005c56 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005c32:	693b      	ldr	r3, [r7, #16]
 8005c34:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005c38:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005c3a:	693b      	ldr	r3, [r7, #16]
 8005c3c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005c40:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	695b      	ldr	r3, [r3, #20]
 8005c46:	693a      	ldr	r2, [r7, #16]
 8005c48:	4313      	orrs	r3, r2
 8005c4a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	699b      	ldr	r3, [r3, #24]
 8005c50:	693a      	ldr	r2, [r7, #16]
 8005c52:	4313      	orrs	r3, r2
 8005c54:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	693a      	ldr	r2, [r7, #16]
 8005c5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	68fa      	ldr	r2, [r7, #12]
 8005c60:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	685a      	ldr	r2, [r3, #4]
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	697a      	ldr	r2, [r7, #20]
 8005c6e:	621a      	str	r2, [r3, #32]
}
 8005c70:	bf00      	nop
 8005c72:	371c      	adds	r7, #28
 8005c74:	46bd      	mov	sp, r7
 8005c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7a:	4770      	bx	lr
 8005c7c:	40012c00 	.word	0x40012c00
 8005c80:	40013400 	.word	0x40013400
 8005c84:	40014000 	.word	0x40014000
 8005c88:	40014400 	.word	0x40014400
 8005c8c:	40014800 	.word	0x40014800

08005c90 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c90:	b480      	push	{r7}
 8005c92:	b087      	sub	sp, #28
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
 8005c98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6a1b      	ldr	r3, [r3, #32]
 8005c9e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	6a1b      	ldr	r3, [r3, #32]
 8005ca4:	f023 0210 	bic.w	r2, r3, #16
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	685b      	ldr	r3, [r3, #4]
 8005cb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	699b      	ldr	r3, [r3, #24]
 8005cb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005cbe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005cc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005cca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	021b      	lsls	r3, r3, #8
 8005cd2:	68fa      	ldr	r2, [r7, #12]
 8005cd4:	4313      	orrs	r3, r2
 8005cd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005cd8:	697b      	ldr	r3, [r7, #20]
 8005cda:	f023 0320 	bic.w	r3, r3, #32
 8005cde:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	689b      	ldr	r3, [r3, #8]
 8005ce4:	011b      	lsls	r3, r3, #4
 8005ce6:	697a      	ldr	r2, [r7, #20]
 8005ce8:	4313      	orrs	r3, r2
 8005cea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	4a28      	ldr	r2, [pc, #160]	@ (8005d90 <TIM_OC2_SetConfig+0x100>)
 8005cf0:	4293      	cmp	r3, r2
 8005cf2:	d003      	beq.n	8005cfc <TIM_OC2_SetConfig+0x6c>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	4a27      	ldr	r2, [pc, #156]	@ (8005d94 <TIM_OC2_SetConfig+0x104>)
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d10d      	bne.n	8005d18 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005cfc:	697b      	ldr	r3, [r7, #20]
 8005cfe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005d02:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	68db      	ldr	r3, [r3, #12]
 8005d08:	011b      	lsls	r3, r3, #4
 8005d0a:	697a      	ldr	r2, [r7, #20]
 8005d0c:	4313      	orrs	r3, r2
 8005d0e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005d10:	697b      	ldr	r3, [r7, #20]
 8005d12:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005d16:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	4a1d      	ldr	r2, [pc, #116]	@ (8005d90 <TIM_OC2_SetConfig+0x100>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d00f      	beq.n	8005d40 <TIM_OC2_SetConfig+0xb0>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	4a1c      	ldr	r2, [pc, #112]	@ (8005d94 <TIM_OC2_SetConfig+0x104>)
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d00b      	beq.n	8005d40 <TIM_OC2_SetConfig+0xb0>
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	4a1b      	ldr	r2, [pc, #108]	@ (8005d98 <TIM_OC2_SetConfig+0x108>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d007      	beq.n	8005d40 <TIM_OC2_SetConfig+0xb0>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	4a1a      	ldr	r2, [pc, #104]	@ (8005d9c <TIM_OC2_SetConfig+0x10c>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d003      	beq.n	8005d40 <TIM_OC2_SetConfig+0xb0>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	4a19      	ldr	r2, [pc, #100]	@ (8005da0 <TIM_OC2_SetConfig+0x110>)
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d113      	bne.n	8005d68 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005d40:	693b      	ldr	r3, [r7, #16]
 8005d42:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005d46:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005d48:	693b      	ldr	r3, [r7, #16]
 8005d4a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005d4e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	695b      	ldr	r3, [r3, #20]
 8005d54:	009b      	lsls	r3, r3, #2
 8005d56:	693a      	ldr	r2, [r7, #16]
 8005d58:	4313      	orrs	r3, r2
 8005d5a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	699b      	ldr	r3, [r3, #24]
 8005d60:	009b      	lsls	r3, r3, #2
 8005d62:	693a      	ldr	r2, [r7, #16]
 8005d64:	4313      	orrs	r3, r2
 8005d66:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	693a      	ldr	r2, [r7, #16]
 8005d6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	68fa      	ldr	r2, [r7, #12]
 8005d72:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	685a      	ldr	r2, [r3, #4]
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	697a      	ldr	r2, [r7, #20]
 8005d80:	621a      	str	r2, [r3, #32]
}
 8005d82:	bf00      	nop
 8005d84:	371c      	adds	r7, #28
 8005d86:	46bd      	mov	sp, r7
 8005d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8c:	4770      	bx	lr
 8005d8e:	bf00      	nop
 8005d90:	40012c00 	.word	0x40012c00
 8005d94:	40013400 	.word	0x40013400
 8005d98:	40014000 	.word	0x40014000
 8005d9c:	40014400 	.word	0x40014400
 8005da0:	40014800 	.word	0x40014800

08005da4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005da4:	b480      	push	{r7}
 8005da6:	b087      	sub	sp, #28
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
 8005dac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6a1b      	ldr	r3, [r3, #32]
 8005db2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6a1b      	ldr	r3, [r3, #32]
 8005db8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	685b      	ldr	r3, [r3, #4]
 8005dc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	69db      	ldr	r3, [r3, #28]
 8005dca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005dd2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005dd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	f023 0303 	bic.w	r3, r3, #3
 8005dde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	68fa      	ldr	r2, [r7, #12]
 8005de6:	4313      	orrs	r3, r2
 8005de8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005dea:	697b      	ldr	r3, [r7, #20]
 8005dec:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005df0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	689b      	ldr	r3, [r3, #8]
 8005df6:	021b      	lsls	r3, r3, #8
 8005df8:	697a      	ldr	r2, [r7, #20]
 8005dfa:	4313      	orrs	r3, r2
 8005dfc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	4a27      	ldr	r2, [pc, #156]	@ (8005ea0 <TIM_OC3_SetConfig+0xfc>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d003      	beq.n	8005e0e <TIM_OC3_SetConfig+0x6a>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	4a26      	ldr	r2, [pc, #152]	@ (8005ea4 <TIM_OC3_SetConfig+0x100>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d10d      	bne.n	8005e2a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005e0e:	697b      	ldr	r3, [r7, #20]
 8005e10:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005e14:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	68db      	ldr	r3, [r3, #12]
 8005e1a:	021b      	lsls	r3, r3, #8
 8005e1c:	697a      	ldr	r2, [r7, #20]
 8005e1e:	4313      	orrs	r3, r2
 8005e20:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005e22:	697b      	ldr	r3, [r7, #20]
 8005e24:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005e28:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	4a1c      	ldr	r2, [pc, #112]	@ (8005ea0 <TIM_OC3_SetConfig+0xfc>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d00f      	beq.n	8005e52 <TIM_OC3_SetConfig+0xae>
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	4a1b      	ldr	r2, [pc, #108]	@ (8005ea4 <TIM_OC3_SetConfig+0x100>)
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d00b      	beq.n	8005e52 <TIM_OC3_SetConfig+0xae>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	4a1a      	ldr	r2, [pc, #104]	@ (8005ea8 <TIM_OC3_SetConfig+0x104>)
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d007      	beq.n	8005e52 <TIM_OC3_SetConfig+0xae>
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	4a19      	ldr	r2, [pc, #100]	@ (8005eac <TIM_OC3_SetConfig+0x108>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d003      	beq.n	8005e52 <TIM_OC3_SetConfig+0xae>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	4a18      	ldr	r2, [pc, #96]	@ (8005eb0 <TIM_OC3_SetConfig+0x10c>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d113      	bne.n	8005e7a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005e52:	693b      	ldr	r3, [r7, #16]
 8005e54:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005e58:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005e5a:	693b      	ldr	r3, [r7, #16]
 8005e5c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005e60:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	695b      	ldr	r3, [r3, #20]
 8005e66:	011b      	lsls	r3, r3, #4
 8005e68:	693a      	ldr	r2, [r7, #16]
 8005e6a:	4313      	orrs	r3, r2
 8005e6c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	699b      	ldr	r3, [r3, #24]
 8005e72:	011b      	lsls	r3, r3, #4
 8005e74:	693a      	ldr	r2, [r7, #16]
 8005e76:	4313      	orrs	r3, r2
 8005e78:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	693a      	ldr	r2, [r7, #16]
 8005e7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	68fa      	ldr	r2, [r7, #12]
 8005e84:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	685a      	ldr	r2, [r3, #4]
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	697a      	ldr	r2, [r7, #20]
 8005e92:	621a      	str	r2, [r3, #32]
}
 8005e94:	bf00      	nop
 8005e96:	371c      	adds	r7, #28
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9e:	4770      	bx	lr
 8005ea0:	40012c00 	.word	0x40012c00
 8005ea4:	40013400 	.word	0x40013400
 8005ea8:	40014000 	.word	0x40014000
 8005eac:	40014400 	.word	0x40014400
 8005eb0:	40014800 	.word	0x40014800

08005eb4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005eb4:	b480      	push	{r7}
 8005eb6:	b087      	sub	sp, #28
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
 8005ebc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6a1b      	ldr	r3, [r3, #32]
 8005ec2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6a1b      	ldr	r3, [r3, #32]
 8005ec8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	685b      	ldr	r3, [r3, #4]
 8005ed4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	69db      	ldr	r3, [r3, #28]
 8005eda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005ee2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005ee6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005eee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	021b      	lsls	r3, r3, #8
 8005ef6:	68fa      	ldr	r2, [r7, #12]
 8005ef8:	4313      	orrs	r3, r2
 8005efa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005efc:	693b      	ldr	r3, [r7, #16]
 8005efe:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005f02:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	689b      	ldr	r3, [r3, #8]
 8005f08:	031b      	lsls	r3, r3, #12
 8005f0a:	693a      	ldr	r2, [r7, #16]
 8005f0c:	4313      	orrs	r3, r2
 8005f0e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	4a18      	ldr	r2, [pc, #96]	@ (8005f74 <TIM_OC4_SetConfig+0xc0>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d00f      	beq.n	8005f38 <TIM_OC4_SetConfig+0x84>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	4a17      	ldr	r2, [pc, #92]	@ (8005f78 <TIM_OC4_SetConfig+0xc4>)
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d00b      	beq.n	8005f38 <TIM_OC4_SetConfig+0x84>
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	4a16      	ldr	r2, [pc, #88]	@ (8005f7c <TIM_OC4_SetConfig+0xc8>)
 8005f24:	4293      	cmp	r3, r2
 8005f26:	d007      	beq.n	8005f38 <TIM_OC4_SetConfig+0x84>
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	4a15      	ldr	r2, [pc, #84]	@ (8005f80 <TIM_OC4_SetConfig+0xcc>)
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	d003      	beq.n	8005f38 <TIM_OC4_SetConfig+0x84>
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	4a14      	ldr	r2, [pc, #80]	@ (8005f84 <TIM_OC4_SetConfig+0xd0>)
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d109      	bne.n	8005f4c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005f38:	697b      	ldr	r3, [r7, #20]
 8005f3a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005f3e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	695b      	ldr	r3, [r3, #20]
 8005f44:	019b      	lsls	r3, r3, #6
 8005f46:	697a      	ldr	r2, [r7, #20]
 8005f48:	4313      	orrs	r3, r2
 8005f4a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	697a      	ldr	r2, [r7, #20]
 8005f50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	68fa      	ldr	r2, [r7, #12]
 8005f56:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	685a      	ldr	r2, [r3, #4]
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	693a      	ldr	r2, [r7, #16]
 8005f64:	621a      	str	r2, [r3, #32]
}
 8005f66:	bf00      	nop
 8005f68:	371c      	adds	r7, #28
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f70:	4770      	bx	lr
 8005f72:	bf00      	nop
 8005f74:	40012c00 	.word	0x40012c00
 8005f78:	40013400 	.word	0x40013400
 8005f7c:	40014000 	.word	0x40014000
 8005f80:	40014400 	.word	0x40014400
 8005f84:	40014800 	.word	0x40014800

08005f88 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005f88:	b480      	push	{r7}
 8005f8a:	b087      	sub	sp, #28
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
 8005f90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6a1b      	ldr	r3, [r3, #32]
 8005f96:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	6a1b      	ldr	r3, [r3, #32]
 8005f9c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	685b      	ldr	r3, [r3, #4]
 8005fa8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005fb6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005fba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	68fa      	ldr	r2, [r7, #12]
 8005fc2:	4313      	orrs	r3, r2
 8005fc4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005fc6:	693b      	ldr	r3, [r7, #16]
 8005fc8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005fcc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	689b      	ldr	r3, [r3, #8]
 8005fd2:	041b      	lsls	r3, r3, #16
 8005fd4:	693a      	ldr	r2, [r7, #16]
 8005fd6:	4313      	orrs	r3, r2
 8005fd8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	4a17      	ldr	r2, [pc, #92]	@ (800603c <TIM_OC5_SetConfig+0xb4>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d00f      	beq.n	8006002 <TIM_OC5_SetConfig+0x7a>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	4a16      	ldr	r2, [pc, #88]	@ (8006040 <TIM_OC5_SetConfig+0xb8>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d00b      	beq.n	8006002 <TIM_OC5_SetConfig+0x7a>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	4a15      	ldr	r2, [pc, #84]	@ (8006044 <TIM_OC5_SetConfig+0xbc>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d007      	beq.n	8006002 <TIM_OC5_SetConfig+0x7a>
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	4a14      	ldr	r2, [pc, #80]	@ (8006048 <TIM_OC5_SetConfig+0xc0>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d003      	beq.n	8006002 <TIM_OC5_SetConfig+0x7a>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	4a13      	ldr	r2, [pc, #76]	@ (800604c <TIM_OC5_SetConfig+0xc4>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d109      	bne.n	8006016 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006002:	697b      	ldr	r3, [r7, #20]
 8006004:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006008:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	695b      	ldr	r3, [r3, #20]
 800600e:	021b      	lsls	r3, r3, #8
 8006010:	697a      	ldr	r2, [r7, #20]
 8006012:	4313      	orrs	r3, r2
 8006014:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	697a      	ldr	r2, [r7, #20]
 800601a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	68fa      	ldr	r2, [r7, #12]
 8006020:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	685a      	ldr	r2, [r3, #4]
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	693a      	ldr	r2, [r7, #16]
 800602e:	621a      	str	r2, [r3, #32]
}
 8006030:	bf00      	nop
 8006032:	371c      	adds	r7, #28
 8006034:	46bd      	mov	sp, r7
 8006036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603a:	4770      	bx	lr
 800603c:	40012c00 	.word	0x40012c00
 8006040:	40013400 	.word	0x40013400
 8006044:	40014000 	.word	0x40014000
 8006048:	40014400 	.word	0x40014400
 800604c:	40014800 	.word	0x40014800

08006050 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006050:	b480      	push	{r7}
 8006052:	b087      	sub	sp, #28
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
 8006058:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6a1b      	ldr	r3, [r3, #32]
 800605e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6a1b      	ldr	r3, [r3, #32]
 8006064:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	685b      	ldr	r3, [r3, #4]
 8006070:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006076:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800607e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006082:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	021b      	lsls	r3, r3, #8
 800608a:	68fa      	ldr	r2, [r7, #12]
 800608c:	4313      	orrs	r3, r2
 800608e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006090:	693b      	ldr	r3, [r7, #16]
 8006092:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006096:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	689b      	ldr	r3, [r3, #8]
 800609c:	051b      	lsls	r3, r3, #20
 800609e:	693a      	ldr	r2, [r7, #16]
 80060a0:	4313      	orrs	r3, r2
 80060a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	4a18      	ldr	r2, [pc, #96]	@ (8006108 <TIM_OC6_SetConfig+0xb8>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d00f      	beq.n	80060cc <TIM_OC6_SetConfig+0x7c>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	4a17      	ldr	r2, [pc, #92]	@ (800610c <TIM_OC6_SetConfig+0xbc>)
 80060b0:	4293      	cmp	r3, r2
 80060b2:	d00b      	beq.n	80060cc <TIM_OC6_SetConfig+0x7c>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	4a16      	ldr	r2, [pc, #88]	@ (8006110 <TIM_OC6_SetConfig+0xc0>)
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d007      	beq.n	80060cc <TIM_OC6_SetConfig+0x7c>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	4a15      	ldr	r2, [pc, #84]	@ (8006114 <TIM_OC6_SetConfig+0xc4>)
 80060c0:	4293      	cmp	r3, r2
 80060c2:	d003      	beq.n	80060cc <TIM_OC6_SetConfig+0x7c>
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	4a14      	ldr	r2, [pc, #80]	@ (8006118 <TIM_OC6_SetConfig+0xc8>)
 80060c8:	4293      	cmp	r3, r2
 80060ca:	d109      	bne.n	80060e0 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80060cc:	697b      	ldr	r3, [r7, #20]
 80060ce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80060d2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	695b      	ldr	r3, [r3, #20]
 80060d8:	029b      	lsls	r3, r3, #10
 80060da:	697a      	ldr	r2, [r7, #20]
 80060dc:	4313      	orrs	r3, r2
 80060de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	697a      	ldr	r2, [r7, #20]
 80060e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	68fa      	ldr	r2, [r7, #12]
 80060ea:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	685a      	ldr	r2, [r3, #4]
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	693a      	ldr	r2, [r7, #16]
 80060f8:	621a      	str	r2, [r3, #32]
}
 80060fa:	bf00      	nop
 80060fc:	371c      	adds	r7, #28
 80060fe:	46bd      	mov	sp, r7
 8006100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006104:	4770      	bx	lr
 8006106:	bf00      	nop
 8006108:	40012c00 	.word	0x40012c00
 800610c:	40013400 	.word	0x40013400
 8006110:	40014000 	.word	0x40014000
 8006114:	40014400 	.word	0x40014400
 8006118:	40014800 	.word	0x40014800

0800611c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800611c:	b480      	push	{r7}
 800611e:	b087      	sub	sp, #28
 8006120:	af00      	add	r7, sp, #0
 8006122:	60f8      	str	r0, [r7, #12]
 8006124:	60b9      	str	r1, [r7, #8]
 8006126:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	6a1b      	ldr	r3, [r3, #32]
 800612c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	6a1b      	ldr	r3, [r3, #32]
 8006132:	f023 0201 	bic.w	r2, r3, #1
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	699b      	ldr	r3, [r3, #24]
 800613e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006140:	693b      	ldr	r3, [r7, #16]
 8006142:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006146:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	011b      	lsls	r3, r3, #4
 800614c:	693a      	ldr	r2, [r7, #16]
 800614e:	4313      	orrs	r3, r2
 8006150:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006152:	697b      	ldr	r3, [r7, #20]
 8006154:	f023 030a 	bic.w	r3, r3, #10
 8006158:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800615a:	697a      	ldr	r2, [r7, #20]
 800615c:	68bb      	ldr	r3, [r7, #8]
 800615e:	4313      	orrs	r3, r2
 8006160:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	693a      	ldr	r2, [r7, #16]
 8006166:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	697a      	ldr	r2, [r7, #20]
 800616c:	621a      	str	r2, [r3, #32]
}
 800616e:	bf00      	nop
 8006170:	371c      	adds	r7, #28
 8006172:	46bd      	mov	sp, r7
 8006174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006178:	4770      	bx	lr

0800617a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800617a:	b480      	push	{r7}
 800617c:	b087      	sub	sp, #28
 800617e:	af00      	add	r7, sp, #0
 8006180:	60f8      	str	r0, [r7, #12]
 8006182:	60b9      	str	r1, [r7, #8]
 8006184:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	6a1b      	ldr	r3, [r3, #32]
 800618a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	6a1b      	ldr	r3, [r3, #32]
 8006190:	f023 0210 	bic.w	r2, r3, #16
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	699b      	ldr	r3, [r3, #24]
 800619c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800619e:	693b      	ldr	r3, [r7, #16]
 80061a0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80061a4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	031b      	lsls	r3, r3, #12
 80061aa:	693a      	ldr	r2, [r7, #16]
 80061ac:	4313      	orrs	r3, r2
 80061ae:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80061b0:	697b      	ldr	r3, [r7, #20]
 80061b2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80061b6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80061b8:	68bb      	ldr	r3, [r7, #8]
 80061ba:	011b      	lsls	r3, r3, #4
 80061bc:	697a      	ldr	r2, [r7, #20]
 80061be:	4313      	orrs	r3, r2
 80061c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	693a      	ldr	r2, [r7, #16]
 80061c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	697a      	ldr	r2, [r7, #20]
 80061cc:	621a      	str	r2, [r3, #32]
}
 80061ce:	bf00      	nop
 80061d0:	371c      	adds	r7, #28
 80061d2:	46bd      	mov	sp, r7
 80061d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d8:	4770      	bx	lr

080061da <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80061da:	b480      	push	{r7}
 80061dc:	b085      	sub	sp, #20
 80061de:	af00      	add	r7, sp, #0
 80061e0:	6078      	str	r0, [r7, #4]
 80061e2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	689b      	ldr	r3, [r3, #8]
 80061e8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80061f0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80061f2:	683a      	ldr	r2, [r7, #0]
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	4313      	orrs	r3, r2
 80061f8:	f043 0307 	orr.w	r3, r3, #7
 80061fc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	68fa      	ldr	r2, [r7, #12]
 8006202:	609a      	str	r2, [r3, #8]
}
 8006204:	bf00      	nop
 8006206:	3714      	adds	r7, #20
 8006208:	46bd      	mov	sp, r7
 800620a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620e:	4770      	bx	lr

08006210 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006210:	b480      	push	{r7}
 8006212:	b087      	sub	sp, #28
 8006214:	af00      	add	r7, sp, #0
 8006216:	60f8      	str	r0, [r7, #12]
 8006218:	60b9      	str	r1, [r7, #8]
 800621a:	607a      	str	r2, [r7, #4]
 800621c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	689b      	ldr	r3, [r3, #8]
 8006222:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006224:	697b      	ldr	r3, [r7, #20]
 8006226:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800622a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	021a      	lsls	r2, r3, #8
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	431a      	orrs	r2, r3
 8006234:	68bb      	ldr	r3, [r7, #8]
 8006236:	4313      	orrs	r3, r2
 8006238:	697a      	ldr	r2, [r7, #20]
 800623a:	4313      	orrs	r3, r2
 800623c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	697a      	ldr	r2, [r7, #20]
 8006242:	609a      	str	r2, [r3, #8]
}
 8006244:	bf00      	nop
 8006246:	371c      	adds	r7, #28
 8006248:	46bd      	mov	sp, r7
 800624a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624e:	4770      	bx	lr

08006250 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006250:	b480      	push	{r7}
 8006252:	b087      	sub	sp, #28
 8006254:	af00      	add	r7, sp, #0
 8006256:	60f8      	str	r0, [r7, #12]
 8006258:	60b9      	str	r1, [r7, #8]
 800625a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800625c:	68bb      	ldr	r3, [r7, #8]
 800625e:	f003 031f 	and.w	r3, r3, #31
 8006262:	2201      	movs	r2, #1
 8006264:	fa02 f303 	lsl.w	r3, r2, r3
 8006268:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	6a1a      	ldr	r2, [r3, #32]
 800626e:	697b      	ldr	r3, [r7, #20]
 8006270:	43db      	mvns	r3, r3
 8006272:	401a      	ands	r2, r3
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	6a1a      	ldr	r2, [r3, #32]
 800627c:	68bb      	ldr	r3, [r7, #8]
 800627e:	f003 031f 	and.w	r3, r3, #31
 8006282:	6879      	ldr	r1, [r7, #4]
 8006284:	fa01 f303 	lsl.w	r3, r1, r3
 8006288:	431a      	orrs	r2, r3
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	621a      	str	r2, [r3, #32]
}
 800628e:	bf00      	nop
 8006290:	371c      	adds	r7, #28
 8006292:	46bd      	mov	sp, r7
 8006294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006298:	4770      	bx	lr
	...

0800629c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800629c:	b480      	push	{r7}
 800629e:	b085      	sub	sp, #20
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
 80062a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80062ac:	2b01      	cmp	r3, #1
 80062ae:	d101      	bne.n	80062b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80062b0:	2302      	movs	r3, #2
 80062b2:	e068      	b.n	8006386 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2201      	movs	r2, #1
 80062b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2202      	movs	r2, #2
 80062c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	685b      	ldr	r3, [r3, #4]
 80062ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	689b      	ldr	r3, [r3, #8]
 80062d2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	4a2e      	ldr	r2, [pc, #184]	@ (8006394 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d004      	beq.n	80062e8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	4a2d      	ldr	r2, [pc, #180]	@ (8006398 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d108      	bne.n	80062fa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80062ee:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	685b      	ldr	r3, [r3, #4]
 80062f4:	68fa      	ldr	r2, [r7, #12]
 80062f6:	4313      	orrs	r3, r2
 80062f8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006300:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	68fa      	ldr	r2, [r7, #12]
 8006308:	4313      	orrs	r3, r2
 800630a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	68fa      	ldr	r2, [r7, #12]
 8006312:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	4a1e      	ldr	r2, [pc, #120]	@ (8006394 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d01d      	beq.n	800635a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006326:	d018      	beq.n	800635a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	4a1b      	ldr	r2, [pc, #108]	@ (800639c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800632e:	4293      	cmp	r3, r2
 8006330:	d013      	beq.n	800635a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	4a1a      	ldr	r2, [pc, #104]	@ (80063a0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006338:	4293      	cmp	r3, r2
 800633a:	d00e      	beq.n	800635a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	4a18      	ldr	r2, [pc, #96]	@ (80063a4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d009      	beq.n	800635a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	4a13      	ldr	r2, [pc, #76]	@ (8006398 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800634c:	4293      	cmp	r3, r2
 800634e:	d004      	beq.n	800635a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	4a14      	ldr	r2, [pc, #80]	@ (80063a8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006356:	4293      	cmp	r3, r2
 8006358:	d10c      	bne.n	8006374 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800635a:	68bb      	ldr	r3, [r7, #8]
 800635c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006360:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	689b      	ldr	r3, [r3, #8]
 8006366:	68ba      	ldr	r2, [r7, #8]
 8006368:	4313      	orrs	r3, r2
 800636a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	68ba      	ldr	r2, [r7, #8]
 8006372:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2201      	movs	r2, #1
 8006378:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2200      	movs	r2, #0
 8006380:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006384:	2300      	movs	r3, #0
}
 8006386:	4618      	mov	r0, r3
 8006388:	3714      	adds	r7, #20
 800638a:	46bd      	mov	sp, r7
 800638c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006390:	4770      	bx	lr
 8006392:	bf00      	nop
 8006394:	40012c00 	.word	0x40012c00
 8006398:	40013400 	.word	0x40013400
 800639c:	40000400 	.word	0x40000400
 80063a0:	40000800 	.word	0x40000800
 80063a4:	40000c00 	.word	0x40000c00
 80063a8:	40014000 	.word	0x40014000

080063ac <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80063ac:	b480      	push	{r7}
 80063ae:	b083      	sub	sp, #12
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80063b4:	bf00      	nop
 80063b6:	370c      	adds	r7, #12
 80063b8:	46bd      	mov	sp, r7
 80063ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063be:	4770      	bx	lr

080063c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80063c0:	b480      	push	{r7}
 80063c2:	b083      	sub	sp, #12
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80063c8:	bf00      	nop
 80063ca:	370c      	adds	r7, #12
 80063cc:	46bd      	mov	sp, r7
 80063ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d2:	4770      	bx	lr

080063d4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80063d4:	b480      	push	{r7}
 80063d6:	b083      	sub	sp, #12
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80063dc:	bf00      	nop
 80063de:	370c      	adds	r7, #12
 80063e0:	46bd      	mov	sp, r7
 80063e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e6:	4770      	bx	lr

080063e8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b082      	sub	sp, #8
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d101      	bne.n	80063fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80063f6:	2301      	movs	r3, #1
 80063f8:	e040      	b.n	800647c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d106      	bne.n	8006410 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2200      	movs	r2, #0
 8006406:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800640a:	6878      	ldr	r0, [r7, #4]
 800640c:	f7fb fea8 	bl	8002160 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2224      	movs	r2, #36	@ 0x24
 8006414:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	681a      	ldr	r2, [r3, #0]
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f022 0201 	bic.w	r2, r2, #1
 8006424:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800642a:	2b00      	cmp	r3, #0
 800642c:	d002      	beq.n	8006434 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800642e:	6878      	ldr	r0, [r7, #4]
 8006430:	f000 fb6a 	bl	8006b08 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006434:	6878      	ldr	r0, [r7, #4]
 8006436:	f000 f8af 	bl	8006598 <UART_SetConfig>
 800643a:	4603      	mov	r3, r0
 800643c:	2b01      	cmp	r3, #1
 800643e:	d101      	bne.n	8006444 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8006440:	2301      	movs	r3, #1
 8006442:	e01b      	b.n	800647c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	685a      	ldr	r2, [r3, #4]
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006452:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	689a      	ldr	r2, [r3, #8]
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006462:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	681a      	ldr	r2, [r3, #0]
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f042 0201 	orr.w	r2, r2, #1
 8006472:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006474:	6878      	ldr	r0, [r7, #4]
 8006476:	f000 fbe9 	bl	8006c4c <UART_CheckIdleState>
 800647a:	4603      	mov	r3, r0
}
 800647c:	4618      	mov	r0, r3
 800647e:	3708      	adds	r7, #8
 8006480:	46bd      	mov	sp, r7
 8006482:	bd80      	pop	{r7, pc}

08006484 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006484:	b580      	push	{r7, lr}
 8006486:	b08a      	sub	sp, #40	@ 0x28
 8006488:	af02      	add	r7, sp, #8
 800648a:	60f8      	str	r0, [r7, #12]
 800648c:	60b9      	str	r1, [r7, #8]
 800648e:	603b      	str	r3, [r7, #0]
 8006490:	4613      	mov	r3, r2
 8006492:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006498:	2b20      	cmp	r3, #32
 800649a:	d177      	bne.n	800658c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800649c:	68bb      	ldr	r3, [r7, #8]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d002      	beq.n	80064a8 <HAL_UART_Transmit+0x24>
 80064a2:	88fb      	ldrh	r3, [r7, #6]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d101      	bne.n	80064ac <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80064a8:	2301      	movs	r3, #1
 80064aa:	e070      	b.n	800658e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	2200      	movs	r2, #0
 80064b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	2221      	movs	r2, #33	@ 0x21
 80064b8:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80064ba:	f7fc f8a5 	bl	8002608 <HAL_GetTick>
 80064be:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	88fa      	ldrh	r2, [r7, #6]
 80064c4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	88fa      	ldrh	r2, [r7, #6]
 80064cc:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	689b      	ldr	r3, [r3, #8]
 80064d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80064d8:	d108      	bne.n	80064ec <HAL_UART_Transmit+0x68>
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	691b      	ldr	r3, [r3, #16]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d104      	bne.n	80064ec <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80064e2:	2300      	movs	r3, #0
 80064e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80064e6:	68bb      	ldr	r3, [r7, #8]
 80064e8:	61bb      	str	r3, [r7, #24]
 80064ea:	e003      	b.n	80064f4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80064ec:	68bb      	ldr	r3, [r7, #8]
 80064ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80064f0:	2300      	movs	r3, #0
 80064f2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80064f4:	e02f      	b.n	8006556 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	9300      	str	r3, [sp, #0]
 80064fa:	697b      	ldr	r3, [r7, #20]
 80064fc:	2200      	movs	r2, #0
 80064fe:	2180      	movs	r1, #128	@ 0x80
 8006500:	68f8      	ldr	r0, [r7, #12]
 8006502:	f000 fc4b 	bl	8006d9c <UART_WaitOnFlagUntilTimeout>
 8006506:	4603      	mov	r3, r0
 8006508:	2b00      	cmp	r3, #0
 800650a:	d004      	beq.n	8006516 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	2220      	movs	r2, #32
 8006510:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8006512:	2303      	movs	r3, #3
 8006514:	e03b      	b.n	800658e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8006516:	69fb      	ldr	r3, [r7, #28]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d10b      	bne.n	8006534 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800651c:	69bb      	ldr	r3, [r7, #24]
 800651e:	881a      	ldrh	r2, [r3, #0]
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006528:	b292      	uxth	r2, r2
 800652a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800652c:	69bb      	ldr	r3, [r7, #24]
 800652e:	3302      	adds	r3, #2
 8006530:	61bb      	str	r3, [r7, #24]
 8006532:	e007      	b.n	8006544 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006534:	69fb      	ldr	r3, [r7, #28]
 8006536:	781a      	ldrb	r2, [r3, #0]
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800653e:	69fb      	ldr	r3, [r7, #28]
 8006540:	3301      	adds	r3, #1
 8006542:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800654a:	b29b      	uxth	r3, r3
 800654c:	3b01      	subs	r3, #1
 800654e:	b29a      	uxth	r2, r3
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800655c:	b29b      	uxth	r3, r3
 800655e:	2b00      	cmp	r3, #0
 8006560:	d1c9      	bne.n	80064f6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	9300      	str	r3, [sp, #0]
 8006566:	697b      	ldr	r3, [r7, #20]
 8006568:	2200      	movs	r2, #0
 800656a:	2140      	movs	r1, #64	@ 0x40
 800656c:	68f8      	ldr	r0, [r7, #12]
 800656e:	f000 fc15 	bl	8006d9c <UART_WaitOnFlagUntilTimeout>
 8006572:	4603      	mov	r3, r0
 8006574:	2b00      	cmp	r3, #0
 8006576:	d004      	beq.n	8006582 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	2220      	movs	r2, #32
 800657c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800657e:	2303      	movs	r3, #3
 8006580:	e005      	b.n	800658e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	2220      	movs	r2, #32
 8006586:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8006588:	2300      	movs	r3, #0
 800658a:	e000      	b.n	800658e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800658c:	2302      	movs	r3, #2
  }
}
 800658e:	4618      	mov	r0, r3
 8006590:	3720      	adds	r7, #32
 8006592:	46bd      	mov	sp, r7
 8006594:	bd80      	pop	{r7, pc}
	...

08006598 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006598:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800659c:	b08a      	sub	sp, #40	@ 0x28
 800659e:	af00      	add	r7, sp, #0
 80065a0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80065a2:	2300      	movs	r3, #0
 80065a4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	689a      	ldr	r2, [r3, #8]
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	691b      	ldr	r3, [r3, #16]
 80065b0:	431a      	orrs	r2, r3
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	695b      	ldr	r3, [r3, #20]
 80065b6:	431a      	orrs	r2, r3
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	69db      	ldr	r3, [r3, #28]
 80065bc:	4313      	orrs	r3, r2
 80065be:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	681a      	ldr	r2, [r3, #0]
 80065c6:	4ba4      	ldr	r3, [pc, #656]	@ (8006858 <UART_SetConfig+0x2c0>)
 80065c8:	4013      	ands	r3, r2
 80065ca:	68fa      	ldr	r2, [r7, #12]
 80065cc:	6812      	ldr	r2, [r2, #0]
 80065ce:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80065d0:	430b      	orrs	r3, r1
 80065d2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	685b      	ldr	r3, [r3, #4]
 80065da:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	68da      	ldr	r2, [r3, #12]
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	430a      	orrs	r2, r1
 80065e8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	699b      	ldr	r3, [r3, #24]
 80065ee:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	4a99      	ldr	r2, [pc, #612]	@ (800685c <UART_SetConfig+0x2c4>)
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d004      	beq.n	8006604 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	6a1b      	ldr	r3, [r3, #32]
 80065fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006600:	4313      	orrs	r3, r2
 8006602:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	689b      	ldr	r3, [r3, #8]
 800660a:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006614:	430a      	orrs	r2, r1
 8006616:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	4a90      	ldr	r2, [pc, #576]	@ (8006860 <UART_SetConfig+0x2c8>)
 800661e:	4293      	cmp	r3, r2
 8006620:	d126      	bne.n	8006670 <UART_SetConfig+0xd8>
 8006622:	4b90      	ldr	r3, [pc, #576]	@ (8006864 <UART_SetConfig+0x2cc>)
 8006624:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006628:	f003 0303 	and.w	r3, r3, #3
 800662c:	2b03      	cmp	r3, #3
 800662e:	d81b      	bhi.n	8006668 <UART_SetConfig+0xd0>
 8006630:	a201      	add	r2, pc, #4	@ (adr r2, 8006638 <UART_SetConfig+0xa0>)
 8006632:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006636:	bf00      	nop
 8006638:	08006649 	.word	0x08006649
 800663c:	08006659 	.word	0x08006659
 8006640:	08006651 	.word	0x08006651
 8006644:	08006661 	.word	0x08006661
 8006648:	2301      	movs	r3, #1
 800664a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800664e:	e116      	b.n	800687e <UART_SetConfig+0x2e6>
 8006650:	2302      	movs	r3, #2
 8006652:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006656:	e112      	b.n	800687e <UART_SetConfig+0x2e6>
 8006658:	2304      	movs	r3, #4
 800665a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800665e:	e10e      	b.n	800687e <UART_SetConfig+0x2e6>
 8006660:	2308      	movs	r3, #8
 8006662:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006666:	e10a      	b.n	800687e <UART_SetConfig+0x2e6>
 8006668:	2310      	movs	r3, #16
 800666a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800666e:	e106      	b.n	800687e <UART_SetConfig+0x2e6>
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	4a7c      	ldr	r2, [pc, #496]	@ (8006868 <UART_SetConfig+0x2d0>)
 8006676:	4293      	cmp	r3, r2
 8006678:	d138      	bne.n	80066ec <UART_SetConfig+0x154>
 800667a:	4b7a      	ldr	r3, [pc, #488]	@ (8006864 <UART_SetConfig+0x2cc>)
 800667c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006680:	f003 030c 	and.w	r3, r3, #12
 8006684:	2b0c      	cmp	r3, #12
 8006686:	d82d      	bhi.n	80066e4 <UART_SetConfig+0x14c>
 8006688:	a201      	add	r2, pc, #4	@ (adr r2, 8006690 <UART_SetConfig+0xf8>)
 800668a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800668e:	bf00      	nop
 8006690:	080066c5 	.word	0x080066c5
 8006694:	080066e5 	.word	0x080066e5
 8006698:	080066e5 	.word	0x080066e5
 800669c:	080066e5 	.word	0x080066e5
 80066a0:	080066d5 	.word	0x080066d5
 80066a4:	080066e5 	.word	0x080066e5
 80066a8:	080066e5 	.word	0x080066e5
 80066ac:	080066e5 	.word	0x080066e5
 80066b0:	080066cd 	.word	0x080066cd
 80066b4:	080066e5 	.word	0x080066e5
 80066b8:	080066e5 	.word	0x080066e5
 80066bc:	080066e5 	.word	0x080066e5
 80066c0:	080066dd 	.word	0x080066dd
 80066c4:	2300      	movs	r3, #0
 80066c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80066ca:	e0d8      	b.n	800687e <UART_SetConfig+0x2e6>
 80066cc:	2302      	movs	r3, #2
 80066ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80066d2:	e0d4      	b.n	800687e <UART_SetConfig+0x2e6>
 80066d4:	2304      	movs	r3, #4
 80066d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80066da:	e0d0      	b.n	800687e <UART_SetConfig+0x2e6>
 80066dc:	2308      	movs	r3, #8
 80066de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80066e2:	e0cc      	b.n	800687e <UART_SetConfig+0x2e6>
 80066e4:	2310      	movs	r3, #16
 80066e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80066ea:	e0c8      	b.n	800687e <UART_SetConfig+0x2e6>
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	4a5e      	ldr	r2, [pc, #376]	@ (800686c <UART_SetConfig+0x2d4>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d125      	bne.n	8006742 <UART_SetConfig+0x1aa>
 80066f6:	4b5b      	ldr	r3, [pc, #364]	@ (8006864 <UART_SetConfig+0x2cc>)
 80066f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066fc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006700:	2b30      	cmp	r3, #48	@ 0x30
 8006702:	d016      	beq.n	8006732 <UART_SetConfig+0x19a>
 8006704:	2b30      	cmp	r3, #48	@ 0x30
 8006706:	d818      	bhi.n	800673a <UART_SetConfig+0x1a2>
 8006708:	2b20      	cmp	r3, #32
 800670a:	d00a      	beq.n	8006722 <UART_SetConfig+0x18a>
 800670c:	2b20      	cmp	r3, #32
 800670e:	d814      	bhi.n	800673a <UART_SetConfig+0x1a2>
 8006710:	2b00      	cmp	r3, #0
 8006712:	d002      	beq.n	800671a <UART_SetConfig+0x182>
 8006714:	2b10      	cmp	r3, #16
 8006716:	d008      	beq.n	800672a <UART_SetConfig+0x192>
 8006718:	e00f      	b.n	800673a <UART_SetConfig+0x1a2>
 800671a:	2300      	movs	r3, #0
 800671c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006720:	e0ad      	b.n	800687e <UART_SetConfig+0x2e6>
 8006722:	2302      	movs	r3, #2
 8006724:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006728:	e0a9      	b.n	800687e <UART_SetConfig+0x2e6>
 800672a:	2304      	movs	r3, #4
 800672c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006730:	e0a5      	b.n	800687e <UART_SetConfig+0x2e6>
 8006732:	2308      	movs	r3, #8
 8006734:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006738:	e0a1      	b.n	800687e <UART_SetConfig+0x2e6>
 800673a:	2310      	movs	r3, #16
 800673c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006740:	e09d      	b.n	800687e <UART_SetConfig+0x2e6>
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	4a4a      	ldr	r2, [pc, #296]	@ (8006870 <UART_SetConfig+0x2d8>)
 8006748:	4293      	cmp	r3, r2
 800674a:	d125      	bne.n	8006798 <UART_SetConfig+0x200>
 800674c:	4b45      	ldr	r3, [pc, #276]	@ (8006864 <UART_SetConfig+0x2cc>)
 800674e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006752:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006756:	2bc0      	cmp	r3, #192	@ 0xc0
 8006758:	d016      	beq.n	8006788 <UART_SetConfig+0x1f0>
 800675a:	2bc0      	cmp	r3, #192	@ 0xc0
 800675c:	d818      	bhi.n	8006790 <UART_SetConfig+0x1f8>
 800675e:	2b80      	cmp	r3, #128	@ 0x80
 8006760:	d00a      	beq.n	8006778 <UART_SetConfig+0x1e0>
 8006762:	2b80      	cmp	r3, #128	@ 0x80
 8006764:	d814      	bhi.n	8006790 <UART_SetConfig+0x1f8>
 8006766:	2b00      	cmp	r3, #0
 8006768:	d002      	beq.n	8006770 <UART_SetConfig+0x1d8>
 800676a:	2b40      	cmp	r3, #64	@ 0x40
 800676c:	d008      	beq.n	8006780 <UART_SetConfig+0x1e8>
 800676e:	e00f      	b.n	8006790 <UART_SetConfig+0x1f8>
 8006770:	2300      	movs	r3, #0
 8006772:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006776:	e082      	b.n	800687e <UART_SetConfig+0x2e6>
 8006778:	2302      	movs	r3, #2
 800677a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800677e:	e07e      	b.n	800687e <UART_SetConfig+0x2e6>
 8006780:	2304      	movs	r3, #4
 8006782:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006786:	e07a      	b.n	800687e <UART_SetConfig+0x2e6>
 8006788:	2308      	movs	r3, #8
 800678a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800678e:	e076      	b.n	800687e <UART_SetConfig+0x2e6>
 8006790:	2310      	movs	r3, #16
 8006792:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006796:	e072      	b.n	800687e <UART_SetConfig+0x2e6>
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	4a35      	ldr	r2, [pc, #212]	@ (8006874 <UART_SetConfig+0x2dc>)
 800679e:	4293      	cmp	r3, r2
 80067a0:	d12a      	bne.n	80067f8 <UART_SetConfig+0x260>
 80067a2:	4b30      	ldr	r3, [pc, #192]	@ (8006864 <UART_SetConfig+0x2cc>)
 80067a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80067a8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80067ac:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80067b0:	d01a      	beq.n	80067e8 <UART_SetConfig+0x250>
 80067b2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80067b6:	d81b      	bhi.n	80067f0 <UART_SetConfig+0x258>
 80067b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80067bc:	d00c      	beq.n	80067d8 <UART_SetConfig+0x240>
 80067be:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80067c2:	d815      	bhi.n	80067f0 <UART_SetConfig+0x258>
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d003      	beq.n	80067d0 <UART_SetConfig+0x238>
 80067c8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80067cc:	d008      	beq.n	80067e0 <UART_SetConfig+0x248>
 80067ce:	e00f      	b.n	80067f0 <UART_SetConfig+0x258>
 80067d0:	2300      	movs	r3, #0
 80067d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80067d6:	e052      	b.n	800687e <UART_SetConfig+0x2e6>
 80067d8:	2302      	movs	r3, #2
 80067da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80067de:	e04e      	b.n	800687e <UART_SetConfig+0x2e6>
 80067e0:	2304      	movs	r3, #4
 80067e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80067e6:	e04a      	b.n	800687e <UART_SetConfig+0x2e6>
 80067e8:	2308      	movs	r3, #8
 80067ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80067ee:	e046      	b.n	800687e <UART_SetConfig+0x2e6>
 80067f0:	2310      	movs	r3, #16
 80067f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80067f6:	e042      	b.n	800687e <UART_SetConfig+0x2e6>
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	4a17      	ldr	r2, [pc, #92]	@ (800685c <UART_SetConfig+0x2c4>)
 80067fe:	4293      	cmp	r3, r2
 8006800:	d13a      	bne.n	8006878 <UART_SetConfig+0x2e0>
 8006802:	4b18      	ldr	r3, [pc, #96]	@ (8006864 <UART_SetConfig+0x2cc>)
 8006804:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006808:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800680c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006810:	d01a      	beq.n	8006848 <UART_SetConfig+0x2b0>
 8006812:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006816:	d81b      	bhi.n	8006850 <UART_SetConfig+0x2b8>
 8006818:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800681c:	d00c      	beq.n	8006838 <UART_SetConfig+0x2a0>
 800681e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006822:	d815      	bhi.n	8006850 <UART_SetConfig+0x2b8>
 8006824:	2b00      	cmp	r3, #0
 8006826:	d003      	beq.n	8006830 <UART_SetConfig+0x298>
 8006828:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800682c:	d008      	beq.n	8006840 <UART_SetConfig+0x2a8>
 800682e:	e00f      	b.n	8006850 <UART_SetConfig+0x2b8>
 8006830:	2300      	movs	r3, #0
 8006832:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006836:	e022      	b.n	800687e <UART_SetConfig+0x2e6>
 8006838:	2302      	movs	r3, #2
 800683a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800683e:	e01e      	b.n	800687e <UART_SetConfig+0x2e6>
 8006840:	2304      	movs	r3, #4
 8006842:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006846:	e01a      	b.n	800687e <UART_SetConfig+0x2e6>
 8006848:	2308      	movs	r3, #8
 800684a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800684e:	e016      	b.n	800687e <UART_SetConfig+0x2e6>
 8006850:	2310      	movs	r3, #16
 8006852:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006856:	e012      	b.n	800687e <UART_SetConfig+0x2e6>
 8006858:	efff69f3 	.word	0xefff69f3
 800685c:	40008000 	.word	0x40008000
 8006860:	40013800 	.word	0x40013800
 8006864:	40021000 	.word	0x40021000
 8006868:	40004400 	.word	0x40004400
 800686c:	40004800 	.word	0x40004800
 8006870:	40004c00 	.word	0x40004c00
 8006874:	40005000 	.word	0x40005000
 8006878:	2310      	movs	r3, #16
 800687a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	4a9f      	ldr	r2, [pc, #636]	@ (8006b00 <UART_SetConfig+0x568>)
 8006884:	4293      	cmp	r3, r2
 8006886:	d17a      	bne.n	800697e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006888:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800688c:	2b08      	cmp	r3, #8
 800688e:	d824      	bhi.n	80068da <UART_SetConfig+0x342>
 8006890:	a201      	add	r2, pc, #4	@ (adr r2, 8006898 <UART_SetConfig+0x300>)
 8006892:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006896:	bf00      	nop
 8006898:	080068bd 	.word	0x080068bd
 800689c:	080068db 	.word	0x080068db
 80068a0:	080068c5 	.word	0x080068c5
 80068a4:	080068db 	.word	0x080068db
 80068a8:	080068cb 	.word	0x080068cb
 80068ac:	080068db 	.word	0x080068db
 80068b0:	080068db 	.word	0x080068db
 80068b4:	080068db 	.word	0x080068db
 80068b8:	080068d3 	.word	0x080068d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80068bc:	f7fc ff9a 	bl	80037f4 <HAL_RCC_GetPCLK1Freq>
 80068c0:	61f8      	str	r0, [r7, #28]
        break;
 80068c2:	e010      	b.n	80068e6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80068c4:	4b8f      	ldr	r3, [pc, #572]	@ (8006b04 <UART_SetConfig+0x56c>)
 80068c6:	61fb      	str	r3, [r7, #28]
        break;
 80068c8:	e00d      	b.n	80068e6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80068ca:	f7fc fefb 	bl	80036c4 <HAL_RCC_GetSysClockFreq>
 80068ce:	61f8      	str	r0, [r7, #28]
        break;
 80068d0:	e009      	b.n	80068e6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80068d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80068d6:	61fb      	str	r3, [r7, #28]
        break;
 80068d8:	e005      	b.n	80068e6 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80068da:	2300      	movs	r3, #0
 80068dc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80068de:	2301      	movs	r3, #1
 80068e0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80068e4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80068e6:	69fb      	ldr	r3, [r7, #28]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	f000 80fb 	beq.w	8006ae4 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	685a      	ldr	r2, [r3, #4]
 80068f2:	4613      	mov	r3, r2
 80068f4:	005b      	lsls	r3, r3, #1
 80068f6:	4413      	add	r3, r2
 80068f8:	69fa      	ldr	r2, [r7, #28]
 80068fa:	429a      	cmp	r2, r3
 80068fc:	d305      	bcc.n	800690a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	685b      	ldr	r3, [r3, #4]
 8006902:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006904:	69fa      	ldr	r2, [r7, #28]
 8006906:	429a      	cmp	r2, r3
 8006908:	d903      	bls.n	8006912 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800690a:	2301      	movs	r3, #1
 800690c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006910:	e0e8      	b.n	8006ae4 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006912:	69fb      	ldr	r3, [r7, #28]
 8006914:	2200      	movs	r2, #0
 8006916:	461c      	mov	r4, r3
 8006918:	4615      	mov	r5, r2
 800691a:	f04f 0200 	mov.w	r2, #0
 800691e:	f04f 0300 	mov.w	r3, #0
 8006922:	022b      	lsls	r3, r5, #8
 8006924:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006928:	0222      	lsls	r2, r4, #8
 800692a:	68f9      	ldr	r1, [r7, #12]
 800692c:	6849      	ldr	r1, [r1, #4]
 800692e:	0849      	lsrs	r1, r1, #1
 8006930:	2000      	movs	r0, #0
 8006932:	4688      	mov	r8, r1
 8006934:	4681      	mov	r9, r0
 8006936:	eb12 0a08 	adds.w	sl, r2, r8
 800693a:	eb43 0b09 	adc.w	fp, r3, r9
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	685b      	ldr	r3, [r3, #4]
 8006942:	2200      	movs	r2, #0
 8006944:	603b      	str	r3, [r7, #0]
 8006946:	607a      	str	r2, [r7, #4]
 8006948:	e9d7 2300 	ldrd	r2, r3, [r7]
 800694c:	4650      	mov	r0, sl
 800694e:	4659      	mov	r1, fp
 8006950:	f7fa f9aa 	bl	8000ca8 <__aeabi_uldivmod>
 8006954:	4602      	mov	r2, r0
 8006956:	460b      	mov	r3, r1
 8006958:	4613      	mov	r3, r2
 800695a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800695c:	69bb      	ldr	r3, [r7, #24]
 800695e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006962:	d308      	bcc.n	8006976 <UART_SetConfig+0x3de>
 8006964:	69bb      	ldr	r3, [r7, #24]
 8006966:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800696a:	d204      	bcs.n	8006976 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	69ba      	ldr	r2, [r7, #24]
 8006972:	60da      	str	r2, [r3, #12]
 8006974:	e0b6      	b.n	8006ae4 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8006976:	2301      	movs	r3, #1
 8006978:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800697c:	e0b2      	b.n	8006ae4 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	69db      	ldr	r3, [r3, #28]
 8006982:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006986:	d15e      	bne.n	8006a46 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006988:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800698c:	2b08      	cmp	r3, #8
 800698e:	d828      	bhi.n	80069e2 <UART_SetConfig+0x44a>
 8006990:	a201      	add	r2, pc, #4	@ (adr r2, 8006998 <UART_SetConfig+0x400>)
 8006992:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006996:	bf00      	nop
 8006998:	080069bd 	.word	0x080069bd
 800699c:	080069c5 	.word	0x080069c5
 80069a0:	080069cd 	.word	0x080069cd
 80069a4:	080069e3 	.word	0x080069e3
 80069a8:	080069d3 	.word	0x080069d3
 80069ac:	080069e3 	.word	0x080069e3
 80069b0:	080069e3 	.word	0x080069e3
 80069b4:	080069e3 	.word	0x080069e3
 80069b8:	080069db 	.word	0x080069db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80069bc:	f7fc ff1a 	bl	80037f4 <HAL_RCC_GetPCLK1Freq>
 80069c0:	61f8      	str	r0, [r7, #28]
        break;
 80069c2:	e014      	b.n	80069ee <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80069c4:	f7fc ff2c 	bl	8003820 <HAL_RCC_GetPCLK2Freq>
 80069c8:	61f8      	str	r0, [r7, #28]
        break;
 80069ca:	e010      	b.n	80069ee <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80069cc:	4b4d      	ldr	r3, [pc, #308]	@ (8006b04 <UART_SetConfig+0x56c>)
 80069ce:	61fb      	str	r3, [r7, #28]
        break;
 80069d0:	e00d      	b.n	80069ee <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80069d2:	f7fc fe77 	bl	80036c4 <HAL_RCC_GetSysClockFreq>
 80069d6:	61f8      	str	r0, [r7, #28]
        break;
 80069d8:	e009      	b.n	80069ee <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80069da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80069de:	61fb      	str	r3, [r7, #28]
        break;
 80069e0:	e005      	b.n	80069ee <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80069e2:	2300      	movs	r3, #0
 80069e4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80069e6:	2301      	movs	r3, #1
 80069e8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80069ec:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80069ee:	69fb      	ldr	r3, [r7, #28]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d077      	beq.n	8006ae4 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80069f4:	69fb      	ldr	r3, [r7, #28]
 80069f6:	005a      	lsls	r2, r3, #1
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	685b      	ldr	r3, [r3, #4]
 80069fc:	085b      	lsrs	r3, r3, #1
 80069fe:	441a      	add	r2, r3
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	685b      	ldr	r3, [r3, #4]
 8006a04:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a08:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006a0a:	69bb      	ldr	r3, [r7, #24]
 8006a0c:	2b0f      	cmp	r3, #15
 8006a0e:	d916      	bls.n	8006a3e <UART_SetConfig+0x4a6>
 8006a10:	69bb      	ldr	r3, [r7, #24]
 8006a12:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006a16:	d212      	bcs.n	8006a3e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006a18:	69bb      	ldr	r3, [r7, #24]
 8006a1a:	b29b      	uxth	r3, r3
 8006a1c:	f023 030f 	bic.w	r3, r3, #15
 8006a20:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006a22:	69bb      	ldr	r3, [r7, #24]
 8006a24:	085b      	lsrs	r3, r3, #1
 8006a26:	b29b      	uxth	r3, r3
 8006a28:	f003 0307 	and.w	r3, r3, #7
 8006a2c:	b29a      	uxth	r2, r3
 8006a2e:	8afb      	ldrh	r3, [r7, #22]
 8006a30:	4313      	orrs	r3, r2
 8006a32:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	8afa      	ldrh	r2, [r7, #22]
 8006a3a:	60da      	str	r2, [r3, #12]
 8006a3c:	e052      	b.n	8006ae4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006a3e:	2301      	movs	r3, #1
 8006a40:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006a44:	e04e      	b.n	8006ae4 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006a46:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006a4a:	2b08      	cmp	r3, #8
 8006a4c:	d827      	bhi.n	8006a9e <UART_SetConfig+0x506>
 8006a4e:	a201      	add	r2, pc, #4	@ (adr r2, 8006a54 <UART_SetConfig+0x4bc>)
 8006a50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a54:	08006a79 	.word	0x08006a79
 8006a58:	08006a81 	.word	0x08006a81
 8006a5c:	08006a89 	.word	0x08006a89
 8006a60:	08006a9f 	.word	0x08006a9f
 8006a64:	08006a8f 	.word	0x08006a8f
 8006a68:	08006a9f 	.word	0x08006a9f
 8006a6c:	08006a9f 	.word	0x08006a9f
 8006a70:	08006a9f 	.word	0x08006a9f
 8006a74:	08006a97 	.word	0x08006a97
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a78:	f7fc febc 	bl	80037f4 <HAL_RCC_GetPCLK1Freq>
 8006a7c:	61f8      	str	r0, [r7, #28]
        break;
 8006a7e:	e014      	b.n	8006aaa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006a80:	f7fc fece 	bl	8003820 <HAL_RCC_GetPCLK2Freq>
 8006a84:	61f8      	str	r0, [r7, #28]
        break;
 8006a86:	e010      	b.n	8006aaa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006a88:	4b1e      	ldr	r3, [pc, #120]	@ (8006b04 <UART_SetConfig+0x56c>)
 8006a8a:	61fb      	str	r3, [r7, #28]
        break;
 8006a8c:	e00d      	b.n	8006aaa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006a8e:	f7fc fe19 	bl	80036c4 <HAL_RCC_GetSysClockFreq>
 8006a92:	61f8      	str	r0, [r7, #28]
        break;
 8006a94:	e009      	b.n	8006aaa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a96:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006a9a:	61fb      	str	r3, [r7, #28]
        break;
 8006a9c:	e005      	b.n	8006aaa <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006aa2:	2301      	movs	r3, #1
 8006aa4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006aa8:	bf00      	nop
    }

    if (pclk != 0U)
 8006aaa:	69fb      	ldr	r3, [r7, #28]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d019      	beq.n	8006ae4 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	685b      	ldr	r3, [r3, #4]
 8006ab4:	085a      	lsrs	r2, r3, #1
 8006ab6:	69fb      	ldr	r3, [r7, #28]
 8006ab8:	441a      	add	r2, r3
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	685b      	ldr	r3, [r3, #4]
 8006abe:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ac2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006ac4:	69bb      	ldr	r3, [r7, #24]
 8006ac6:	2b0f      	cmp	r3, #15
 8006ac8:	d909      	bls.n	8006ade <UART_SetConfig+0x546>
 8006aca:	69bb      	ldr	r3, [r7, #24]
 8006acc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006ad0:	d205      	bcs.n	8006ade <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006ad2:	69bb      	ldr	r3, [r7, #24]
 8006ad4:	b29a      	uxth	r2, r3
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	60da      	str	r2, [r3, #12]
 8006adc:	e002      	b.n	8006ae4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006ade:	2301      	movs	r3, #1
 8006ae0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	2200      	movs	r2, #0
 8006aee:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006af0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8006af4:	4618      	mov	r0, r3
 8006af6:	3728      	adds	r7, #40	@ 0x28
 8006af8:	46bd      	mov	sp, r7
 8006afa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006afe:	bf00      	nop
 8006b00:	40008000 	.word	0x40008000
 8006b04:	00f42400 	.word	0x00f42400

08006b08 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006b08:	b480      	push	{r7}
 8006b0a:	b083      	sub	sp, #12
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b14:	f003 0308 	and.w	r3, r3, #8
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d00a      	beq.n	8006b32 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	685b      	ldr	r3, [r3, #4]
 8006b22:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	430a      	orrs	r2, r1
 8006b30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b36:	f003 0301 	and.w	r3, r3, #1
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d00a      	beq.n	8006b54 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	685b      	ldr	r3, [r3, #4]
 8006b44:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	430a      	orrs	r2, r1
 8006b52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b58:	f003 0302 	and.w	r3, r3, #2
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d00a      	beq.n	8006b76 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	685b      	ldr	r3, [r3, #4]
 8006b66:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	430a      	orrs	r2, r1
 8006b74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b7a:	f003 0304 	and.w	r3, r3, #4
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d00a      	beq.n	8006b98 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	685b      	ldr	r3, [r3, #4]
 8006b88:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	430a      	orrs	r2, r1
 8006b96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b9c:	f003 0310 	and.w	r3, r3, #16
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d00a      	beq.n	8006bba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	689b      	ldr	r3, [r3, #8]
 8006baa:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	430a      	orrs	r2, r1
 8006bb8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bbe:	f003 0320 	and.w	r3, r3, #32
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d00a      	beq.n	8006bdc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	689b      	ldr	r3, [r3, #8]
 8006bcc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	430a      	orrs	r2, r1
 8006bda:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006be0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d01a      	beq.n	8006c1e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	685b      	ldr	r3, [r3, #4]
 8006bee:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	430a      	orrs	r2, r1
 8006bfc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c02:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006c06:	d10a      	bne.n	8006c1e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	685b      	ldr	r3, [r3, #4]
 8006c0e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	430a      	orrs	r2, r1
 8006c1c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d00a      	beq.n	8006c40 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	685b      	ldr	r3, [r3, #4]
 8006c30:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	430a      	orrs	r2, r1
 8006c3e:	605a      	str	r2, [r3, #4]
  }
}
 8006c40:	bf00      	nop
 8006c42:	370c      	adds	r7, #12
 8006c44:	46bd      	mov	sp, r7
 8006c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4a:	4770      	bx	lr

08006c4c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b098      	sub	sp, #96	@ 0x60
 8006c50:	af02      	add	r7, sp, #8
 8006c52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2200      	movs	r2, #0
 8006c58:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006c5c:	f7fb fcd4 	bl	8002608 <HAL_GetTick>
 8006c60:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f003 0308 	and.w	r3, r3, #8
 8006c6c:	2b08      	cmp	r3, #8
 8006c6e:	d12e      	bne.n	8006cce <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006c70:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006c74:	9300      	str	r3, [sp, #0]
 8006c76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006c78:	2200      	movs	r2, #0
 8006c7a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006c7e:	6878      	ldr	r0, [r7, #4]
 8006c80:	f000 f88c 	bl	8006d9c <UART_WaitOnFlagUntilTimeout>
 8006c84:	4603      	mov	r3, r0
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d021      	beq.n	8006cce <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c92:	e853 3f00 	ldrex	r3, [r3]
 8006c96:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006c98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c9a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006c9e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	461a      	mov	r2, r3
 8006ca6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006ca8:	647b      	str	r3, [r7, #68]	@ 0x44
 8006caa:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cac:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006cae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006cb0:	e841 2300 	strex	r3, r2, [r1]
 8006cb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006cb6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d1e6      	bne.n	8006c8a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2220      	movs	r2, #32
 8006cc0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006cca:	2303      	movs	r3, #3
 8006ccc:	e062      	b.n	8006d94 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f003 0304 	and.w	r3, r3, #4
 8006cd8:	2b04      	cmp	r3, #4
 8006cda:	d149      	bne.n	8006d70 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006cdc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006ce0:	9300      	str	r3, [sp, #0]
 8006ce2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006cea:	6878      	ldr	r0, [r7, #4]
 8006cec:	f000 f856 	bl	8006d9c <UART_WaitOnFlagUntilTimeout>
 8006cf0:	4603      	mov	r3, r0
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d03c      	beq.n	8006d70 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cfe:	e853 3f00 	ldrex	r3, [r3]
 8006d02:	623b      	str	r3, [r7, #32]
   return(result);
 8006d04:	6a3b      	ldr	r3, [r7, #32]
 8006d06:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006d0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	461a      	mov	r2, r3
 8006d12:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006d14:	633b      	str	r3, [r7, #48]	@ 0x30
 8006d16:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d18:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006d1a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006d1c:	e841 2300 	strex	r3, r2, [r1]
 8006d20:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006d22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d1e6      	bne.n	8006cf6 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	3308      	adds	r3, #8
 8006d2e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d30:	693b      	ldr	r3, [r7, #16]
 8006d32:	e853 3f00 	ldrex	r3, [r3]
 8006d36:	60fb      	str	r3, [r7, #12]
   return(result);
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	f023 0301 	bic.w	r3, r3, #1
 8006d3e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	3308      	adds	r3, #8
 8006d46:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006d48:	61fa      	str	r2, [r7, #28]
 8006d4a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d4c:	69b9      	ldr	r1, [r7, #24]
 8006d4e:	69fa      	ldr	r2, [r7, #28]
 8006d50:	e841 2300 	strex	r3, r2, [r1]
 8006d54:	617b      	str	r3, [r7, #20]
   return(result);
 8006d56:	697b      	ldr	r3, [r7, #20]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d1e5      	bne.n	8006d28 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2220      	movs	r2, #32
 8006d60:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2200      	movs	r2, #0
 8006d68:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006d6c:	2303      	movs	r3, #3
 8006d6e:	e011      	b.n	8006d94 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2220      	movs	r2, #32
 8006d74:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2220      	movs	r2, #32
 8006d7a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	2200      	movs	r2, #0
 8006d82:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2200      	movs	r2, #0
 8006d88:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8006d92:	2300      	movs	r3, #0
}
 8006d94:	4618      	mov	r0, r3
 8006d96:	3758      	adds	r7, #88	@ 0x58
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	bd80      	pop	{r7, pc}

08006d9c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	b084      	sub	sp, #16
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	60f8      	str	r0, [r7, #12]
 8006da4:	60b9      	str	r1, [r7, #8]
 8006da6:	603b      	str	r3, [r7, #0]
 8006da8:	4613      	mov	r3, r2
 8006daa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006dac:	e04f      	b.n	8006e4e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006dae:	69bb      	ldr	r3, [r7, #24]
 8006db0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006db4:	d04b      	beq.n	8006e4e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006db6:	f7fb fc27 	bl	8002608 <HAL_GetTick>
 8006dba:	4602      	mov	r2, r0
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	1ad3      	subs	r3, r2, r3
 8006dc0:	69ba      	ldr	r2, [r7, #24]
 8006dc2:	429a      	cmp	r2, r3
 8006dc4:	d302      	bcc.n	8006dcc <UART_WaitOnFlagUntilTimeout+0x30>
 8006dc6:	69bb      	ldr	r3, [r7, #24]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d101      	bne.n	8006dd0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006dcc:	2303      	movs	r3, #3
 8006dce:	e04e      	b.n	8006e6e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	f003 0304 	and.w	r3, r3, #4
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d037      	beq.n	8006e4e <UART_WaitOnFlagUntilTimeout+0xb2>
 8006dde:	68bb      	ldr	r3, [r7, #8]
 8006de0:	2b80      	cmp	r3, #128	@ 0x80
 8006de2:	d034      	beq.n	8006e4e <UART_WaitOnFlagUntilTimeout+0xb2>
 8006de4:	68bb      	ldr	r3, [r7, #8]
 8006de6:	2b40      	cmp	r3, #64	@ 0x40
 8006de8:	d031      	beq.n	8006e4e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	69db      	ldr	r3, [r3, #28]
 8006df0:	f003 0308 	and.w	r3, r3, #8
 8006df4:	2b08      	cmp	r3, #8
 8006df6:	d110      	bne.n	8006e1a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	2208      	movs	r2, #8
 8006dfe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006e00:	68f8      	ldr	r0, [r7, #12]
 8006e02:	f000 f838 	bl	8006e76 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	2208      	movs	r2, #8
 8006e0a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	2200      	movs	r2, #0
 8006e12:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8006e16:	2301      	movs	r3, #1
 8006e18:	e029      	b.n	8006e6e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	69db      	ldr	r3, [r3, #28]
 8006e20:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006e24:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006e28:	d111      	bne.n	8006e4e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006e32:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006e34:	68f8      	ldr	r0, [r7, #12]
 8006e36:	f000 f81e 	bl	8006e76 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	2220      	movs	r2, #32
 8006e3e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	2200      	movs	r2, #0
 8006e46:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8006e4a:	2303      	movs	r3, #3
 8006e4c:	e00f      	b.n	8006e6e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	69da      	ldr	r2, [r3, #28]
 8006e54:	68bb      	ldr	r3, [r7, #8]
 8006e56:	4013      	ands	r3, r2
 8006e58:	68ba      	ldr	r2, [r7, #8]
 8006e5a:	429a      	cmp	r2, r3
 8006e5c:	bf0c      	ite	eq
 8006e5e:	2301      	moveq	r3, #1
 8006e60:	2300      	movne	r3, #0
 8006e62:	b2db      	uxtb	r3, r3
 8006e64:	461a      	mov	r2, r3
 8006e66:	79fb      	ldrb	r3, [r7, #7]
 8006e68:	429a      	cmp	r2, r3
 8006e6a:	d0a0      	beq.n	8006dae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006e6c:	2300      	movs	r3, #0
}
 8006e6e:	4618      	mov	r0, r3
 8006e70:	3710      	adds	r7, #16
 8006e72:	46bd      	mov	sp, r7
 8006e74:	bd80      	pop	{r7, pc}

08006e76 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006e76:	b480      	push	{r7}
 8006e78:	b095      	sub	sp, #84	@ 0x54
 8006e7a:	af00      	add	r7, sp, #0
 8006e7c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e86:	e853 3f00 	ldrex	r3, [r3]
 8006e8a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006e8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e8e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006e92:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	461a      	mov	r2, r3
 8006e9a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006e9c:	643b      	str	r3, [r7, #64]	@ 0x40
 8006e9e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ea0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006ea2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006ea4:	e841 2300 	strex	r3, r2, [r1]
 8006ea8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006eaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d1e6      	bne.n	8006e7e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	3308      	adds	r3, #8
 8006eb6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eb8:	6a3b      	ldr	r3, [r7, #32]
 8006eba:	e853 3f00 	ldrex	r3, [r3]
 8006ebe:	61fb      	str	r3, [r7, #28]
   return(result);
 8006ec0:	69fb      	ldr	r3, [r7, #28]
 8006ec2:	f023 0301 	bic.w	r3, r3, #1
 8006ec6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	3308      	adds	r3, #8
 8006ece:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006ed0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006ed2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ed4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006ed6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006ed8:	e841 2300 	strex	r3, r2, [r1]
 8006edc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006ede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d1e5      	bne.n	8006eb0 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006ee8:	2b01      	cmp	r3, #1
 8006eea:	d118      	bne.n	8006f1e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	e853 3f00 	ldrex	r3, [r3]
 8006ef8:	60bb      	str	r3, [r7, #8]
   return(result);
 8006efa:	68bb      	ldr	r3, [r7, #8]
 8006efc:	f023 0310 	bic.w	r3, r3, #16
 8006f00:	647b      	str	r3, [r7, #68]	@ 0x44
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	461a      	mov	r2, r3
 8006f08:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006f0a:	61bb      	str	r3, [r7, #24]
 8006f0c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f0e:	6979      	ldr	r1, [r7, #20]
 8006f10:	69ba      	ldr	r2, [r7, #24]
 8006f12:	e841 2300 	strex	r3, r2, [r1]
 8006f16:	613b      	str	r3, [r7, #16]
   return(result);
 8006f18:	693b      	ldr	r3, [r7, #16]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d1e6      	bne.n	8006eec <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	2220      	movs	r2, #32
 8006f22:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	2200      	movs	r2, #0
 8006f2a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2200      	movs	r2, #0
 8006f30:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006f32:	bf00      	nop
 8006f34:	3754      	adds	r7, #84	@ 0x54
 8006f36:	46bd      	mov	sp, r7
 8006f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3c:	4770      	bx	lr
	...

08006f40 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8006f44:	4904      	ldr	r1, [pc, #16]	@ (8006f58 <MX_FATFS_Init+0x18>)
 8006f46:	4805      	ldr	r0, [pc, #20]	@ (8006f5c <MX_FATFS_Init+0x1c>)
 8006f48:	f002 ffa0 	bl	8009e8c <FATFS_LinkDriver>
 8006f4c:	4603      	mov	r3, r0
 8006f4e:	461a      	mov	r2, r3
 8006f50:	4b03      	ldr	r3, [pc, #12]	@ (8006f60 <MX_FATFS_Init+0x20>)
 8006f52:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8006f54:	bf00      	nop
 8006f56:	bd80      	pop	{r7, pc}
 8006f58:	20000a1c 	.word	0x20000a1c
 8006f5c:	20000014 	.word	0x20000014
 8006f60:	20000a18 	.word	0x20000a18

08006f64 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8006f64:	b480      	push	{r7}
 8006f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8006f68:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f72:	4770      	bx	lr

08006f74 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b082      	sub	sp, #8
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	4603      	mov	r3, r0
 8006f7c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return USER_SPI_initialize(pdrv);
 8006f7e:	79fb      	ldrb	r3, [r7, #7]
 8006f80:	4618      	mov	r0, r3
 8006f82:	f000 f9d3 	bl	800732c <USER_SPI_initialize>
 8006f86:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8006f88:	4618      	mov	r0, r3
 8006f8a:	3708      	adds	r7, #8
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	bd80      	pop	{r7, pc}

08006f90 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b082      	sub	sp, #8
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	4603      	mov	r3, r0
 8006f98:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return USER_SPI_status(pdrv);
 8006f9a:	79fb      	ldrb	r3, [r7, #7]
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	f000 fab1 	bl	8007504 <USER_SPI_status>
 8006fa2:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	3708      	adds	r7, #8
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	bd80      	pop	{r7, pc}

08006fac <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b084      	sub	sp, #16
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	60b9      	str	r1, [r7, #8]
 8006fb4:	607a      	str	r2, [r7, #4]
 8006fb6:	603b      	str	r3, [r7, #0]
 8006fb8:	4603      	mov	r3, r0
 8006fba:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return USER_SPI_read(pdrv, buff, sector, count);
 8006fbc:	7bf8      	ldrb	r0, [r7, #15]
 8006fbe:	683b      	ldr	r3, [r7, #0]
 8006fc0:	687a      	ldr	r2, [r7, #4]
 8006fc2:	68b9      	ldr	r1, [r7, #8]
 8006fc4:	f000 fab4 	bl	8007530 <USER_SPI_read>
 8006fc8:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8006fca:	4618      	mov	r0, r3
 8006fcc:	3710      	adds	r7, #16
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	bd80      	pop	{r7, pc}

08006fd2 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8006fd2:	b580      	push	{r7, lr}
 8006fd4:	b084      	sub	sp, #16
 8006fd6:	af00      	add	r7, sp, #0
 8006fd8:	60b9      	str	r1, [r7, #8]
 8006fda:	607a      	str	r2, [r7, #4]
 8006fdc:	603b      	str	r3, [r7, #0]
 8006fde:	4603      	mov	r3, r0
 8006fe0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return USER_SPI_write(pdrv, buff, sector, count);
 8006fe2:	7bf8      	ldrb	r0, [r7, #15]
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	687a      	ldr	r2, [r7, #4]
 8006fe8:	68b9      	ldr	r1, [r7, #8]
 8006fea:	f000 fb07 	bl	80075fc <USER_SPI_write>
 8006fee:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	3710      	adds	r7, #16
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	bd80      	pop	{r7, pc}

08006ff8 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	b082      	sub	sp, #8
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	4603      	mov	r3, r0
 8007000:	603a      	str	r2, [r7, #0]
 8007002:	71fb      	strb	r3, [r7, #7]
 8007004:	460b      	mov	r3, r1
 8007006:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return USER_SPI_ioctl(pdrv, cmd, buff);
 8007008:	79b9      	ldrb	r1, [r7, #6]
 800700a:	79fb      	ldrb	r3, [r7, #7]
 800700c:	683a      	ldr	r2, [r7, #0]
 800700e:	4618      	mov	r0, r3
 8007010:	f000 fb70 	bl	80076f4 <USER_SPI_ioctl>
 8007014:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8007016:	4618      	mov	r0, r3
 8007018:	3708      	adds	r7, #8
 800701a:	46bd      	mov	sp, r7
 800701c:	bd80      	pop	{r7, pc}
	...

08007020 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8007020:	b580      	push	{r7, lr}
 8007022:	b082      	sub	sp, #8
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8007028:	f7fb faee 	bl	8002608 <HAL_GetTick>
 800702c:	4603      	mov	r3, r0
 800702e:	4a04      	ldr	r2, [pc, #16]	@ (8007040 <SPI_Timer_On+0x20>)
 8007030:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 8007032:	4a04      	ldr	r2, [pc, #16]	@ (8007044 <SPI_Timer_On+0x24>)
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	6013      	str	r3, [r2, #0]
}
 8007038:	bf00      	nop
 800703a:	3708      	adds	r7, #8
 800703c:	46bd      	mov	sp, r7
 800703e:	bd80      	pop	{r7, pc}
 8007040:	20000a24 	.word	0x20000a24
 8007044:	20000a28 	.word	0x20000a28

08007048 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8007048:	b580      	push	{r7, lr}
 800704a:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 800704c:	f7fb fadc 	bl	8002608 <HAL_GetTick>
 8007050:	4602      	mov	r2, r0
 8007052:	4b06      	ldr	r3, [pc, #24]	@ (800706c <SPI_Timer_Status+0x24>)
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	1ad2      	subs	r2, r2, r3
 8007058:	4b05      	ldr	r3, [pc, #20]	@ (8007070 <SPI_Timer_Status+0x28>)
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	429a      	cmp	r2, r3
 800705e:	bf34      	ite	cc
 8007060:	2301      	movcc	r3, #1
 8007062:	2300      	movcs	r3, #0
 8007064:	b2db      	uxtb	r3, r3
}
 8007066:	4618      	mov	r0, r3
 8007068:	bd80      	pop	{r7, pc}
 800706a:	bf00      	nop
 800706c:	20000a24 	.word	0x20000a24
 8007070:	20000a28 	.word	0x20000a28

08007074 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8007074:	b580      	push	{r7, lr}
 8007076:	b086      	sub	sp, #24
 8007078:	af02      	add	r7, sp, #8
 800707a:	4603      	mov	r3, r0
 800707c:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 800707e:	f107 020f 	add.w	r2, r7, #15
 8007082:	1df9      	adds	r1, r7, #7
 8007084:	2332      	movs	r3, #50	@ 0x32
 8007086:	9300      	str	r3, [sp, #0]
 8007088:	2301      	movs	r3, #1
 800708a:	4804      	ldr	r0, [pc, #16]	@ (800709c <xchg_spi+0x28>)
 800708c:	f7fd fb45 	bl	800471a <HAL_SPI_TransmitReceive>
    return rxDat;
 8007090:	7bfb      	ldrb	r3, [r7, #15]
}
 8007092:	4618      	mov	r0, r3
 8007094:	3710      	adds	r7, #16
 8007096:	46bd      	mov	sp, r7
 8007098:	bd80      	pop	{r7, pc}
 800709a:	bf00      	nop
 800709c:	20000214 	.word	0x20000214

080070a0 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 80070a0:	b590      	push	{r4, r7, lr}
 80070a2:	b085      	sub	sp, #20
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
 80070a8:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 80070aa:	2300      	movs	r3, #0
 80070ac:	60fb      	str	r3, [r7, #12]
 80070ae:	e00a      	b.n	80070c6 <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 80070b0:	687a      	ldr	r2, [r7, #4]
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	18d4      	adds	r4, r2, r3
 80070b6:	20ff      	movs	r0, #255	@ 0xff
 80070b8:	f7ff ffdc 	bl	8007074 <xchg_spi>
 80070bc:	4603      	mov	r3, r0
 80070be:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	3301      	adds	r3, #1
 80070c4:	60fb      	str	r3, [r7, #12]
 80070c6:	68fa      	ldr	r2, [r7, #12]
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	429a      	cmp	r2, r3
 80070cc:	d3f0      	bcc.n	80070b0 <rcvr_spi_multi+0x10>
	}
}
 80070ce:	bf00      	nop
 80070d0:	bf00      	nop
 80070d2:	3714      	adds	r7, #20
 80070d4:	46bd      	mov	sp, r7
 80070d6:	bd90      	pop	{r4, r7, pc}

080070d8 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	b082      	sub	sp, #8
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
 80070e0:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&SD_SPI_HANDLE, buff, btx, HAL_MAX_DELAY);
 80070e2:	683b      	ldr	r3, [r7, #0]
 80070e4:	b29a      	uxth	r2, r3
 80070e6:	f04f 33ff 	mov.w	r3, #4294967295
 80070ea:	6879      	ldr	r1, [r7, #4]
 80070ec:	4803      	ldr	r0, [pc, #12]	@ (80070fc <xmit_spi_multi+0x24>)
 80070ee:	f7fd f99e 	bl	800442e <HAL_SPI_Transmit>
}
 80070f2:	bf00      	nop
 80070f4:	3708      	adds	r7, #8
 80070f6:	46bd      	mov	sp, r7
 80070f8:	bd80      	pop	{r7, pc}
 80070fa:	bf00      	nop
 80070fc:	20000214 	.word	0x20000214

08007100 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8007100:	b580      	push	{r7, lr}
 8007102:	b086      	sub	sp, #24
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8007108:	f7fb fa7e 	bl	8002608 <HAL_GetTick>
 800710c:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8007112:	20ff      	movs	r0, #255	@ 0xff
 8007114:	f7ff ffae 	bl	8007074 <xchg_spi>
 8007118:	4603      	mov	r3, r0
 800711a:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 800711c:	7bfb      	ldrb	r3, [r7, #15]
 800711e:	2bff      	cmp	r3, #255	@ 0xff
 8007120:	d007      	beq.n	8007132 <wait_ready+0x32>
 8007122:	f7fb fa71 	bl	8002608 <HAL_GetTick>
 8007126:	4602      	mov	r2, r0
 8007128:	697b      	ldr	r3, [r7, #20]
 800712a:	1ad3      	subs	r3, r2, r3
 800712c:	693a      	ldr	r2, [r7, #16]
 800712e:	429a      	cmp	r2, r3
 8007130:	d8ef      	bhi.n	8007112 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 8007132:	7bfb      	ldrb	r3, [r7, #15]
 8007134:	2bff      	cmp	r3, #255	@ 0xff
 8007136:	bf0c      	ite	eq
 8007138:	2301      	moveq	r3, #1
 800713a:	2300      	movne	r3, #0
 800713c:	b2db      	uxtb	r3, r3
}
 800713e:	4618      	mov	r0, r3
 8007140:	3718      	adds	r7, #24
 8007142:	46bd      	mov	sp, r7
 8007144:	bd80      	pop	{r7, pc}
	...

08007148 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8007148:	b580      	push	{r7, lr}
 800714a:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 800714c:	2201      	movs	r2, #1
 800714e:	2140      	movs	r1, #64	@ 0x40
 8007150:	4803      	ldr	r0, [pc, #12]	@ (8007160 <despiselect+0x18>)
 8007152:	f7fb fd2d 	bl	8002bb0 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8007156:	20ff      	movs	r0, #255	@ 0xff
 8007158:	f7ff ff8c 	bl	8007074 <xchg_spi>

}
 800715c:	bf00      	nop
 800715e:	bd80      	pop	{r7, pc}
 8007160:	48000400 	.word	0x48000400

08007164 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8007164:	b580      	push	{r7, lr}
 8007166:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8007168:	2200      	movs	r2, #0
 800716a:	2140      	movs	r1, #64	@ 0x40
 800716c:	4809      	ldr	r0, [pc, #36]	@ (8007194 <spiselect+0x30>)
 800716e:	f7fb fd1f 	bl	8002bb0 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8007172:	20ff      	movs	r0, #255	@ 0xff
 8007174:	f7ff ff7e 	bl	8007074 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8007178:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800717c:	f7ff ffc0 	bl	8007100 <wait_ready>
 8007180:	4603      	mov	r3, r0
 8007182:	2b00      	cmp	r3, #0
 8007184:	d001      	beq.n	800718a <spiselect+0x26>
 8007186:	2301      	movs	r3, #1
 8007188:	e002      	b.n	8007190 <spiselect+0x2c>

	despiselect();
 800718a:	f7ff ffdd 	bl	8007148 <despiselect>
	return 0;	/* Timeout */
 800718e:	2300      	movs	r3, #0
}
 8007190:	4618      	mov	r0, r3
 8007192:	bd80      	pop	{r7, pc}
 8007194:	48000400 	.word	0x48000400

08007198 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8007198:	b580      	push	{r7, lr}
 800719a:	b084      	sub	sp, #16
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
 80071a0:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 80071a2:	20c8      	movs	r0, #200	@ 0xc8
 80071a4:	f7ff ff3c 	bl	8007020 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 80071a8:	20ff      	movs	r0, #255	@ 0xff
 80071aa:	f7ff ff63 	bl	8007074 <xchg_spi>
 80071ae:	4603      	mov	r3, r0
 80071b0:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 80071b2:	7bfb      	ldrb	r3, [r7, #15]
 80071b4:	2bff      	cmp	r3, #255	@ 0xff
 80071b6:	d104      	bne.n	80071c2 <rcvr_datablock+0x2a>
 80071b8:	f7ff ff46 	bl	8007048 <SPI_Timer_Status>
 80071bc:	4603      	mov	r3, r0
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d1f2      	bne.n	80071a8 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 80071c2:	7bfb      	ldrb	r3, [r7, #15]
 80071c4:	2bfe      	cmp	r3, #254	@ 0xfe
 80071c6:	d001      	beq.n	80071cc <rcvr_datablock+0x34>
 80071c8:	2300      	movs	r3, #0
 80071ca:	e00a      	b.n	80071e2 <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 80071cc:	6839      	ldr	r1, [r7, #0]
 80071ce:	6878      	ldr	r0, [r7, #4]
 80071d0:	f7ff ff66 	bl	80070a0 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 80071d4:	20ff      	movs	r0, #255	@ 0xff
 80071d6:	f7ff ff4d 	bl	8007074 <xchg_spi>
 80071da:	20ff      	movs	r0, #255	@ 0xff
 80071dc:	f7ff ff4a 	bl	8007074 <xchg_spi>

	return 1;						/* Function succeeded */
 80071e0:	2301      	movs	r3, #1
}
 80071e2:	4618      	mov	r0, r3
 80071e4:	3710      	adds	r7, #16
 80071e6:	46bd      	mov	sp, r7
 80071e8:	bd80      	pop	{r7, pc}

080071ea <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 80071ea:	b580      	push	{r7, lr}
 80071ec:	b084      	sub	sp, #16
 80071ee:	af00      	add	r7, sp, #0
 80071f0:	6078      	str	r0, [r7, #4]
 80071f2:	460b      	mov	r3, r1
 80071f4:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 80071f6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80071fa:	f7ff ff81 	bl	8007100 <wait_ready>
 80071fe:	4603      	mov	r3, r0
 8007200:	2b00      	cmp	r3, #0
 8007202:	d101      	bne.n	8007208 <xmit_datablock+0x1e>
 8007204:	2300      	movs	r3, #0
 8007206:	e01e      	b.n	8007246 <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8007208:	78fb      	ldrb	r3, [r7, #3]
 800720a:	4618      	mov	r0, r3
 800720c:	f7ff ff32 	bl	8007074 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8007210:	78fb      	ldrb	r3, [r7, #3]
 8007212:	2bfd      	cmp	r3, #253	@ 0xfd
 8007214:	d016      	beq.n	8007244 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 8007216:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800721a:	6878      	ldr	r0, [r7, #4]
 800721c:	f7ff ff5c 	bl	80070d8 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8007220:	20ff      	movs	r0, #255	@ 0xff
 8007222:	f7ff ff27 	bl	8007074 <xchg_spi>
 8007226:	20ff      	movs	r0, #255	@ 0xff
 8007228:	f7ff ff24 	bl	8007074 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 800722c:	20ff      	movs	r0, #255	@ 0xff
 800722e:	f7ff ff21 	bl	8007074 <xchg_spi>
 8007232:	4603      	mov	r3, r0
 8007234:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8007236:	7bfb      	ldrb	r3, [r7, #15]
 8007238:	f003 031f 	and.w	r3, r3, #31
 800723c:	2b05      	cmp	r3, #5
 800723e:	d001      	beq.n	8007244 <xmit_datablock+0x5a>
 8007240:	2300      	movs	r3, #0
 8007242:	e000      	b.n	8007246 <xmit_datablock+0x5c>
	}
	return 1;
 8007244:	2301      	movs	r3, #1
}
 8007246:	4618      	mov	r0, r3
 8007248:	3710      	adds	r7, #16
 800724a:	46bd      	mov	sp, r7
 800724c:	bd80      	pop	{r7, pc}

0800724e <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 800724e:	b580      	push	{r7, lr}
 8007250:	b084      	sub	sp, #16
 8007252:	af00      	add	r7, sp, #0
 8007254:	4603      	mov	r3, r0
 8007256:	6039      	str	r1, [r7, #0]
 8007258:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 800725a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800725e:	2b00      	cmp	r3, #0
 8007260:	da0e      	bge.n	8007280 <send_cmd+0x32>
		cmd &= 0x7F;
 8007262:	79fb      	ldrb	r3, [r7, #7]
 8007264:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007268:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 800726a:	2100      	movs	r1, #0
 800726c:	2037      	movs	r0, #55	@ 0x37
 800726e:	f7ff ffee 	bl	800724e <send_cmd>
 8007272:	4603      	mov	r3, r0
 8007274:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 8007276:	7bbb      	ldrb	r3, [r7, #14]
 8007278:	2b01      	cmp	r3, #1
 800727a:	d901      	bls.n	8007280 <send_cmd+0x32>
 800727c:	7bbb      	ldrb	r3, [r7, #14]
 800727e:	e051      	b.n	8007324 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8007280:	79fb      	ldrb	r3, [r7, #7]
 8007282:	2b0c      	cmp	r3, #12
 8007284:	d008      	beq.n	8007298 <send_cmd+0x4a>
		despiselect();
 8007286:	f7ff ff5f 	bl	8007148 <despiselect>
		if (!spiselect()) return 0xFF;
 800728a:	f7ff ff6b 	bl	8007164 <spiselect>
 800728e:	4603      	mov	r3, r0
 8007290:	2b00      	cmp	r3, #0
 8007292:	d101      	bne.n	8007298 <send_cmd+0x4a>
 8007294:	23ff      	movs	r3, #255	@ 0xff
 8007296:	e045      	b.n	8007324 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8007298:	79fb      	ldrb	r3, [r7, #7]
 800729a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800729e:	b2db      	uxtb	r3, r3
 80072a0:	4618      	mov	r0, r3
 80072a2:	f7ff fee7 	bl	8007074 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	0e1b      	lsrs	r3, r3, #24
 80072aa:	b2db      	uxtb	r3, r3
 80072ac:	4618      	mov	r0, r3
 80072ae:	f7ff fee1 	bl	8007074 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	0c1b      	lsrs	r3, r3, #16
 80072b6:	b2db      	uxtb	r3, r3
 80072b8:	4618      	mov	r0, r3
 80072ba:	f7ff fedb 	bl	8007074 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 80072be:	683b      	ldr	r3, [r7, #0]
 80072c0:	0a1b      	lsrs	r3, r3, #8
 80072c2:	b2db      	uxtb	r3, r3
 80072c4:	4618      	mov	r0, r3
 80072c6:	f7ff fed5 	bl	8007074 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	b2db      	uxtb	r3, r3
 80072ce:	4618      	mov	r0, r3
 80072d0:	f7ff fed0 	bl	8007074 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 80072d4:	2301      	movs	r3, #1
 80072d6:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 80072d8:	79fb      	ldrb	r3, [r7, #7]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d101      	bne.n	80072e2 <send_cmd+0x94>
 80072de:	2395      	movs	r3, #149	@ 0x95
 80072e0:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 80072e2:	79fb      	ldrb	r3, [r7, #7]
 80072e4:	2b08      	cmp	r3, #8
 80072e6:	d101      	bne.n	80072ec <send_cmd+0x9e>
 80072e8:	2387      	movs	r3, #135	@ 0x87
 80072ea:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 80072ec:	7bfb      	ldrb	r3, [r7, #15]
 80072ee:	4618      	mov	r0, r3
 80072f0:	f7ff fec0 	bl	8007074 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 80072f4:	79fb      	ldrb	r3, [r7, #7]
 80072f6:	2b0c      	cmp	r3, #12
 80072f8:	d102      	bne.n	8007300 <send_cmd+0xb2>
 80072fa:	20ff      	movs	r0, #255	@ 0xff
 80072fc:	f7ff feba 	bl	8007074 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8007300:	230a      	movs	r3, #10
 8007302:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 8007304:	20ff      	movs	r0, #255	@ 0xff
 8007306:	f7ff feb5 	bl	8007074 <xchg_spi>
 800730a:	4603      	mov	r3, r0
 800730c:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 800730e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007312:	2b00      	cmp	r3, #0
 8007314:	da05      	bge.n	8007322 <send_cmd+0xd4>
 8007316:	7bfb      	ldrb	r3, [r7, #15]
 8007318:	3b01      	subs	r3, #1
 800731a:	73fb      	strb	r3, [r7, #15]
 800731c:	7bfb      	ldrb	r3, [r7, #15]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d1f0      	bne.n	8007304 <send_cmd+0xb6>

	return res;							/* Return received response */
 8007322:	7bbb      	ldrb	r3, [r7, #14]
}
 8007324:	4618      	mov	r0, r3
 8007326:	3710      	adds	r7, #16
 8007328:	46bd      	mov	sp, r7
 800732a:	bd80      	pop	{r7, pc}

0800732c <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 800732c:	b590      	push	{r4, r7, lr}
 800732e:	b085      	sub	sp, #20
 8007330:	af00      	add	r7, sp, #0
 8007332:	4603      	mov	r3, r0
 8007334:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 8007336:	79fb      	ldrb	r3, [r7, #7]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d001      	beq.n	8007340 <USER_SPI_initialize+0x14>
 800733c:	2301      	movs	r3, #1
 800733e:	e0d6      	b.n	80074ee <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8007340:	4b6d      	ldr	r3, [pc, #436]	@ (80074f8 <USER_SPI_initialize+0x1cc>)
 8007342:	781b      	ldrb	r3, [r3, #0]
 8007344:	b2db      	uxtb	r3, r3
 8007346:	f003 0302 	and.w	r3, r3, #2
 800734a:	2b00      	cmp	r3, #0
 800734c:	d003      	beq.n	8007356 <USER_SPI_initialize+0x2a>
 800734e:	4b6a      	ldr	r3, [pc, #424]	@ (80074f8 <USER_SPI_initialize+0x1cc>)
 8007350:	781b      	ldrb	r3, [r3, #0]
 8007352:	b2db      	uxtb	r3, r3
 8007354:	e0cb      	b.n	80074ee <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 8007356:	4b69      	ldr	r3, [pc, #420]	@ (80074fc <USER_SPI_initialize+0x1d0>)
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 8007360:	4b66      	ldr	r3, [pc, #408]	@ (80074fc <USER_SPI_initialize+0x1d0>)
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	f042 0230 	orr.w	r2, r2, #48	@ 0x30
 8007368:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 800736a:	230a      	movs	r3, #10
 800736c:	73fb      	strb	r3, [r7, #15]
 800736e:	e005      	b.n	800737c <USER_SPI_initialize+0x50>
 8007370:	20ff      	movs	r0, #255	@ 0xff
 8007372:	f7ff fe7f 	bl	8007074 <xchg_spi>
 8007376:	7bfb      	ldrb	r3, [r7, #15]
 8007378:	3b01      	subs	r3, #1
 800737a:	73fb      	strb	r3, [r7, #15]
 800737c:	7bfb      	ldrb	r3, [r7, #15]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d1f6      	bne.n	8007370 <USER_SPI_initialize+0x44>

	ty = 0;
 8007382:	2300      	movs	r3, #0
 8007384:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 8007386:	2100      	movs	r1, #0
 8007388:	2000      	movs	r0, #0
 800738a:	f7ff ff60 	bl	800724e <send_cmd>
 800738e:	4603      	mov	r3, r0
 8007390:	2b01      	cmp	r3, #1
 8007392:	f040 808b 	bne.w	80074ac <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 8007396:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800739a:	f7ff fe41 	bl	8007020 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 800739e:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 80073a2:	2008      	movs	r0, #8
 80073a4:	f7ff ff53 	bl	800724e <send_cmd>
 80073a8:	4603      	mov	r3, r0
 80073aa:	2b01      	cmp	r3, #1
 80073ac:	d151      	bne.n	8007452 <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 80073ae:	2300      	movs	r3, #0
 80073b0:	73fb      	strb	r3, [r7, #15]
 80073b2:	e00d      	b.n	80073d0 <USER_SPI_initialize+0xa4>
 80073b4:	7bfc      	ldrb	r4, [r7, #15]
 80073b6:	20ff      	movs	r0, #255	@ 0xff
 80073b8:	f7ff fe5c 	bl	8007074 <xchg_spi>
 80073bc:	4603      	mov	r3, r0
 80073be:	461a      	mov	r2, r3
 80073c0:	f104 0310 	add.w	r3, r4, #16
 80073c4:	443b      	add	r3, r7
 80073c6:	f803 2c08 	strb.w	r2, [r3, #-8]
 80073ca:	7bfb      	ldrb	r3, [r7, #15]
 80073cc:	3301      	adds	r3, #1
 80073ce:	73fb      	strb	r3, [r7, #15]
 80073d0:	7bfb      	ldrb	r3, [r7, #15]
 80073d2:	2b03      	cmp	r3, #3
 80073d4:	d9ee      	bls.n	80073b4 <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 80073d6:	7abb      	ldrb	r3, [r7, #10]
 80073d8:	2b01      	cmp	r3, #1
 80073da:	d167      	bne.n	80074ac <USER_SPI_initialize+0x180>
 80073dc:	7afb      	ldrb	r3, [r7, #11]
 80073de:	2baa      	cmp	r3, #170	@ 0xaa
 80073e0:	d164      	bne.n	80074ac <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 80073e2:	bf00      	nop
 80073e4:	f7ff fe30 	bl	8007048 <SPI_Timer_Status>
 80073e8:	4603      	mov	r3, r0
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d007      	beq.n	80073fe <USER_SPI_initialize+0xd2>
 80073ee:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80073f2:	20a9      	movs	r0, #169	@ 0xa9
 80073f4:	f7ff ff2b 	bl	800724e <send_cmd>
 80073f8:	4603      	mov	r3, r0
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d1f2      	bne.n	80073e4 <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 80073fe:	f7ff fe23 	bl	8007048 <SPI_Timer_Status>
 8007402:	4603      	mov	r3, r0
 8007404:	2b00      	cmp	r3, #0
 8007406:	d051      	beq.n	80074ac <USER_SPI_initialize+0x180>
 8007408:	2100      	movs	r1, #0
 800740a:	203a      	movs	r0, #58	@ 0x3a
 800740c:	f7ff ff1f 	bl	800724e <send_cmd>
 8007410:	4603      	mov	r3, r0
 8007412:	2b00      	cmp	r3, #0
 8007414:	d14a      	bne.n	80074ac <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 8007416:	2300      	movs	r3, #0
 8007418:	73fb      	strb	r3, [r7, #15]
 800741a:	e00d      	b.n	8007438 <USER_SPI_initialize+0x10c>
 800741c:	7bfc      	ldrb	r4, [r7, #15]
 800741e:	20ff      	movs	r0, #255	@ 0xff
 8007420:	f7ff fe28 	bl	8007074 <xchg_spi>
 8007424:	4603      	mov	r3, r0
 8007426:	461a      	mov	r2, r3
 8007428:	f104 0310 	add.w	r3, r4, #16
 800742c:	443b      	add	r3, r7
 800742e:	f803 2c08 	strb.w	r2, [r3, #-8]
 8007432:	7bfb      	ldrb	r3, [r7, #15]
 8007434:	3301      	adds	r3, #1
 8007436:	73fb      	strb	r3, [r7, #15]
 8007438:	7bfb      	ldrb	r3, [r7, #15]
 800743a:	2b03      	cmp	r3, #3
 800743c:	d9ee      	bls.n	800741c <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 800743e:	7a3b      	ldrb	r3, [r7, #8]
 8007440:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007444:	2b00      	cmp	r3, #0
 8007446:	d001      	beq.n	800744c <USER_SPI_initialize+0x120>
 8007448:	230c      	movs	r3, #12
 800744a:	e000      	b.n	800744e <USER_SPI_initialize+0x122>
 800744c:	2304      	movs	r3, #4
 800744e:	737b      	strb	r3, [r7, #13]
 8007450:	e02c      	b.n	80074ac <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8007452:	2100      	movs	r1, #0
 8007454:	20a9      	movs	r0, #169	@ 0xa9
 8007456:	f7ff fefa 	bl	800724e <send_cmd>
 800745a:	4603      	mov	r3, r0
 800745c:	2b01      	cmp	r3, #1
 800745e:	d804      	bhi.n	800746a <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8007460:	2302      	movs	r3, #2
 8007462:	737b      	strb	r3, [r7, #13]
 8007464:	23a9      	movs	r3, #169	@ 0xa9
 8007466:	73bb      	strb	r3, [r7, #14]
 8007468:	e003      	b.n	8007472 <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 800746a:	2301      	movs	r3, #1
 800746c:	737b      	strb	r3, [r7, #13]
 800746e:	2301      	movs	r3, #1
 8007470:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8007472:	bf00      	nop
 8007474:	f7ff fde8 	bl	8007048 <SPI_Timer_Status>
 8007478:	4603      	mov	r3, r0
 800747a:	2b00      	cmp	r3, #0
 800747c:	d007      	beq.n	800748e <USER_SPI_initialize+0x162>
 800747e:	7bbb      	ldrb	r3, [r7, #14]
 8007480:	2100      	movs	r1, #0
 8007482:	4618      	mov	r0, r3
 8007484:	f7ff fee3 	bl	800724e <send_cmd>
 8007488:	4603      	mov	r3, r0
 800748a:	2b00      	cmp	r3, #0
 800748c:	d1f2      	bne.n	8007474 <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 800748e:	f7ff fddb 	bl	8007048 <SPI_Timer_Status>
 8007492:	4603      	mov	r3, r0
 8007494:	2b00      	cmp	r3, #0
 8007496:	d007      	beq.n	80074a8 <USER_SPI_initialize+0x17c>
 8007498:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800749c:	2010      	movs	r0, #16
 800749e:	f7ff fed6 	bl	800724e <send_cmd>
 80074a2:	4603      	mov	r3, r0
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d001      	beq.n	80074ac <USER_SPI_initialize+0x180>
				ty = 0;
 80074a8:	2300      	movs	r3, #0
 80074aa:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 80074ac:	4a14      	ldr	r2, [pc, #80]	@ (8007500 <USER_SPI_initialize+0x1d4>)
 80074ae:	7b7b      	ldrb	r3, [r7, #13]
 80074b0:	7013      	strb	r3, [r2, #0]
	despiselect();
 80074b2:	f7ff fe49 	bl	8007148 <despiselect>

	if (ty) {			/* OK */
 80074b6:	7b7b      	ldrb	r3, [r7, #13]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d012      	beq.n	80074e2 <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 80074bc:	4b0f      	ldr	r3, [pc, #60]	@ (80074fc <USER_SPI_initialize+0x1d0>)
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 80074c6:	4b0d      	ldr	r3, [pc, #52]	@ (80074fc <USER_SPI_initialize+0x1d0>)
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	f042 0210 	orr.w	r2, r2, #16
 80074ce:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 80074d0:	4b09      	ldr	r3, [pc, #36]	@ (80074f8 <USER_SPI_initialize+0x1cc>)
 80074d2:	781b      	ldrb	r3, [r3, #0]
 80074d4:	b2db      	uxtb	r3, r3
 80074d6:	f023 0301 	bic.w	r3, r3, #1
 80074da:	b2da      	uxtb	r2, r3
 80074dc:	4b06      	ldr	r3, [pc, #24]	@ (80074f8 <USER_SPI_initialize+0x1cc>)
 80074de:	701a      	strb	r2, [r3, #0]
 80074e0:	e002      	b.n	80074e8 <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 80074e2:	4b05      	ldr	r3, [pc, #20]	@ (80074f8 <USER_SPI_initialize+0x1cc>)
 80074e4:	2201      	movs	r2, #1
 80074e6:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 80074e8:	4b03      	ldr	r3, [pc, #12]	@ (80074f8 <USER_SPI_initialize+0x1cc>)
 80074ea:	781b      	ldrb	r3, [r3, #0]
 80074ec:	b2db      	uxtb	r3, r3
}
 80074ee:	4618      	mov	r0, r3
 80074f0:	3714      	adds	r7, #20
 80074f2:	46bd      	mov	sp, r7
 80074f4:	bd90      	pop	{r4, r7, pc}
 80074f6:	bf00      	nop
 80074f8:	20000028 	.word	0x20000028
 80074fc:	20000214 	.word	0x20000214
 8007500:	20000a20 	.word	0x20000a20

08007504 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8007504:	b480      	push	{r7}
 8007506:	b083      	sub	sp, #12
 8007508:	af00      	add	r7, sp, #0
 800750a:	4603      	mov	r3, r0
 800750c:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 800750e:	79fb      	ldrb	r3, [r7, #7]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d001      	beq.n	8007518 <USER_SPI_status+0x14>
 8007514:	2301      	movs	r3, #1
 8007516:	e002      	b.n	800751e <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 8007518:	4b04      	ldr	r3, [pc, #16]	@ (800752c <USER_SPI_status+0x28>)
 800751a:	781b      	ldrb	r3, [r3, #0]
 800751c:	b2db      	uxtb	r3, r3
}
 800751e:	4618      	mov	r0, r3
 8007520:	370c      	adds	r7, #12
 8007522:	46bd      	mov	sp, r7
 8007524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007528:	4770      	bx	lr
 800752a:	bf00      	nop
 800752c:	20000028 	.word	0x20000028

08007530 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8007530:	b580      	push	{r7, lr}
 8007532:	b084      	sub	sp, #16
 8007534:	af00      	add	r7, sp, #0
 8007536:	60b9      	str	r1, [r7, #8]
 8007538:	607a      	str	r2, [r7, #4]
 800753a:	603b      	str	r3, [r7, #0]
 800753c:	4603      	mov	r3, r0
 800753e:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8007540:	7bfb      	ldrb	r3, [r7, #15]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d102      	bne.n	800754c <USER_SPI_read+0x1c>
 8007546:	683b      	ldr	r3, [r7, #0]
 8007548:	2b00      	cmp	r3, #0
 800754a:	d101      	bne.n	8007550 <USER_SPI_read+0x20>
 800754c:	2304      	movs	r3, #4
 800754e:	e04d      	b.n	80075ec <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8007550:	4b28      	ldr	r3, [pc, #160]	@ (80075f4 <USER_SPI_read+0xc4>)
 8007552:	781b      	ldrb	r3, [r3, #0]
 8007554:	b2db      	uxtb	r3, r3
 8007556:	f003 0301 	and.w	r3, r3, #1
 800755a:	2b00      	cmp	r3, #0
 800755c:	d001      	beq.n	8007562 <USER_SPI_read+0x32>
 800755e:	2303      	movs	r3, #3
 8007560:	e044      	b.n	80075ec <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 8007562:	4b25      	ldr	r3, [pc, #148]	@ (80075f8 <USER_SPI_read+0xc8>)
 8007564:	781b      	ldrb	r3, [r3, #0]
 8007566:	f003 0308 	and.w	r3, r3, #8
 800756a:	2b00      	cmp	r3, #0
 800756c:	d102      	bne.n	8007574 <USER_SPI_read+0x44>
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	025b      	lsls	r3, r3, #9
 8007572:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	2b01      	cmp	r3, #1
 8007578:	d111      	bne.n	800759e <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 800757a:	6879      	ldr	r1, [r7, #4]
 800757c:	2011      	movs	r0, #17
 800757e:	f7ff fe66 	bl	800724e <send_cmd>
 8007582:	4603      	mov	r3, r0
 8007584:	2b00      	cmp	r3, #0
 8007586:	d129      	bne.n	80075dc <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 8007588:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800758c:	68b8      	ldr	r0, [r7, #8]
 800758e:	f7ff fe03 	bl	8007198 <rcvr_datablock>
 8007592:	4603      	mov	r3, r0
 8007594:	2b00      	cmp	r3, #0
 8007596:	d021      	beq.n	80075dc <USER_SPI_read+0xac>
			count = 0;
 8007598:	2300      	movs	r3, #0
 800759a:	603b      	str	r3, [r7, #0]
 800759c:	e01e      	b.n	80075dc <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 800759e:	6879      	ldr	r1, [r7, #4]
 80075a0:	2012      	movs	r0, #18
 80075a2:	f7ff fe54 	bl	800724e <send_cmd>
 80075a6:	4603      	mov	r3, r0
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d117      	bne.n	80075dc <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 80075ac:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80075b0:	68b8      	ldr	r0, [r7, #8]
 80075b2:	f7ff fdf1 	bl	8007198 <rcvr_datablock>
 80075b6:	4603      	mov	r3, r0
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d00a      	beq.n	80075d2 <USER_SPI_read+0xa2>
				buff += 512;
 80075bc:	68bb      	ldr	r3, [r7, #8]
 80075be:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80075c2:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80075c4:	683b      	ldr	r3, [r7, #0]
 80075c6:	3b01      	subs	r3, #1
 80075c8:	603b      	str	r3, [r7, #0]
 80075ca:	683b      	ldr	r3, [r7, #0]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d1ed      	bne.n	80075ac <USER_SPI_read+0x7c>
 80075d0:	e000      	b.n	80075d4 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 80075d2:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 80075d4:	2100      	movs	r1, #0
 80075d6:	200c      	movs	r0, #12
 80075d8:	f7ff fe39 	bl	800724e <send_cmd>
		}
	}
	despiselect();
 80075dc:	f7ff fdb4 	bl	8007148 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	bf14      	ite	ne
 80075e6:	2301      	movne	r3, #1
 80075e8:	2300      	moveq	r3, #0
 80075ea:	b2db      	uxtb	r3, r3
}
 80075ec:	4618      	mov	r0, r3
 80075ee:	3710      	adds	r7, #16
 80075f0:	46bd      	mov	sp, r7
 80075f2:	bd80      	pop	{r7, pc}
 80075f4:	20000028 	.word	0x20000028
 80075f8:	20000a20 	.word	0x20000a20

080075fc <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 80075fc:	b580      	push	{r7, lr}
 80075fe:	b084      	sub	sp, #16
 8007600:	af00      	add	r7, sp, #0
 8007602:	60b9      	str	r1, [r7, #8]
 8007604:	607a      	str	r2, [r7, #4]
 8007606:	603b      	str	r3, [r7, #0]
 8007608:	4603      	mov	r3, r0
 800760a:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800760c:	7bfb      	ldrb	r3, [r7, #15]
 800760e:	2b00      	cmp	r3, #0
 8007610:	d102      	bne.n	8007618 <USER_SPI_write+0x1c>
 8007612:	683b      	ldr	r3, [r7, #0]
 8007614:	2b00      	cmp	r3, #0
 8007616:	d101      	bne.n	800761c <USER_SPI_write+0x20>
 8007618:	2304      	movs	r3, #4
 800761a:	e063      	b.n	80076e4 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 800761c:	4b33      	ldr	r3, [pc, #204]	@ (80076ec <USER_SPI_write+0xf0>)
 800761e:	781b      	ldrb	r3, [r3, #0]
 8007620:	b2db      	uxtb	r3, r3
 8007622:	f003 0301 	and.w	r3, r3, #1
 8007626:	2b00      	cmp	r3, #0
 8007628:	d001      	beq.n	800762e <USER_SPI_write+0x32>
 800762a:	2303      	movs	r3, #3
 800762c:	e05a      	b.n	80076e4 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 800762e:	4b2f      	ldr	r3, [pc, #188]	@ (80076ec <USER_SPI_write+0xf0>)
 8007630:	781b      	ldrb	r3, [r3, #0]
 8007632:	b2db      	uxtb	r3, r3
 8007634:	f003 0304 	and.w	r3, r3, #4
 8007638:	2b00      	cmp	r3, #0
 800763a:	d001      	beq.n	8007640 <USER_SPI_write+0x44>
 800763c:	2302      	movs	r3, #2
 800763e:	e051      	b.n	80076e4 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8007640:	4b2b      	ldr	r3, [pc, #172]	@ (80076f0 <USER_SPI_write+0xf4>)
 8007642:	781b      	ldrb	r3, [r3, #0]
 8007644:	f003 0308 	and.w	r3, r3, #8
 8007648:	2b00      	cmp	r3, #0
 800764a:	d102      	bne.n	8007652 <USER_SPI_write+0x56>
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	025b      	lsls	r3, r3, #9
 8007650:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 8007652:	683b      	ldr	r3, [r7, #0]
 8007654:	2b01      	cmp	r3, #1
 8007656:	d110      	bne.n	800767a <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8007658:	6879      	ldr	r1, [r7, #4]
 800765a:	2018      	movs	r0, #24
 800765c:	f7ff fdf7 	bl	800724e <send_cmd>
 8007660:	4603      	mov	r3, r0
 8007662:	2b00      	cmp	r3, #0
 8007664:	d136      	bne.n	80076d4 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 8007666:	21fe      	movs	r1, #254	@ 0xfe
 8007668:	68b8      	ldr	r0, [r7, #8]
 800766a:	f7ff fdbe 	bl	80071ea <xmit_datablock>
 800766e:	4603      	mov	r3, r0
 8007670:	2b00      	cmp	r3, #0
 8007672:	d02f      	beq.n	80076d4 <USER_SPI_write+0xd8>
			count = 0;
 8007674:	2300      	movs	r3, #0
 8007676:	603b      	str	r3, [r7, #0]
 8007678:	e02c      	b.n	80076d4 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 800767a:	4b1d      	ldr	r3, [pc, #116]	@ (80076f0 <USER_SPI_write+0xf4>)
 800767c:	781b      	ldrb	r3, [r3, #0]
 800767e:	f003 0306 	and.w	r3, r3, #6
 8007682:	2b00      	cmp	r3, #0
 8007684:	d003      	beq.n	800768e <USER_SPI_write+0x92>
 8007686:	6839      	ldr	r1, [r7, #0]
 8007688:	2097      	movs	r0, #151	@ 0x97
 800768a:	f7ff fde0 	bl	800724e <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 800768e:	6879      	ldr	r1, [r7, #4]
 8007690:	2019      	movs	r0, #25
 8007692:	f7ff fddc 	bl	800724e <send_cmd>
 8007696:	4603      	mov	r3, r0
 8007698:	2b00      	cmp	r3, #0
 800769a:	d11b      	bne.n	80076d4 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 800769c:	21fc      	movs	r1, #252	@ 0xfc
 800769e:	68b8      	ldr	r0, [r7, #8]
 80076a0:	f7ff fda3 	bl	80071ea <xmit_datablock>
 80076a4:	4603      	mov	r3, r0
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d00a      	beq.n	80076c0 <USER_SPI_write+0xc4>
				buff += 512;
 80076aa:	68bb      	ldr	r3, [r7, #8]
 80076ac:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80076b0:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80076b2:	683b      	ldr	r3, [r7, #0]
 80076b4:	3b01      	subs	r3, #1
 80076b6:	603b      	str	r3, [r7, #0]
 80076b8:	683b      	ldr	r3, [r7, #0]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d1ee      	bne.n	800769c <USER_SPI_write+0xa0>
 80076be:	e000      	b.n	80076c2 <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 80076c0:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 80076c2:	21fd      	movs	r1, #253	@ 0xfd
 80076c4:	2000      	movs	r0, #0
 80076c6:	f7ff fd90 	bl	80071ea <xmit_datablock>
 80076ca:	4603      	mov	r3, r0
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d101      	bne.n	80076d4 <USER_SPI_write+0xd8>
 80076d0:	2301      	movs	r3, #1
 80076d2:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 80076d4:	f7ff fd38 	bl	8007148 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 80076d8:	683b      	ldr	r3, [r7, #0]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	bf14      	ite	ne
 80076de:	2301      	movne	r3, #1
 80076e0:	2300      	moveq	r3, #0
 80076e2:	b2db      	uxtb	r3, r3
}
 80076e4:	4618      	mov	r0, r3
 80076e6:	3710      	adds	r7, #16
 80076e8:	46bd      	mov	sp, r7
 80076ea:	bd80      	pop	{r7, pc}
 80076ec:	20000028 	.word	0x20000028
 80076f0:	20000a20 	.word	0x20000a20

080076f4 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 80076f4:	b580      	push	{r7, lr}
 80076f6:	b08c      	sub	sp, #48	@ 0x30
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	4603      	mov	r3, r0
 80076fc:	603a      	str	r2, [r7, #0]
 80076fe:	71fb      	strb	r3, [r7, #7]
 8007700:	460b      	mov	r3, r1
 8007702:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8007704:	79fb      	ldrb	r3, [r7, #7]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d001      	beq.n	800770e <USER_SPI_ioctl+0x1a>
 800770a:	2304      	movs	r3, #4
 800770c:	e15a      	b.n	80079c4 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800770e:	4baf      	ldr	r3, [pc, #700]	@ (80079cc <USER_SPI_ioctl+0x2d8>)
 8007710:	781b      	ldrb	r3, [r3, #0]
 8007712:	b2db      	uxtb	r3, r3
 8007714:	f003 0301 	and.w	r3, r3, #1
 8007718:	2b00      	cmp	r3, #0
 800771a:	d001      	beq.n	8007720 <USER_SPI_ioctl+0x2c>
 800771c:	2303      	movs	r3, #3
 800771e:	e151      	b.n	80079c4 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 8007720:	2301      	movs	r3, #1
 8007722:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	switch (cmd) {
 8007726:	79bb      	ldrb	r3, [r7, #6]
 8007728:	2b04      	cmp	r3, #4
 800772a:	f200 8136 	bhi.w	800799a <USER_SPI_ioctl+0x2a6>
 800772e:	a201      	add	r2, pc, #4	@ (adr r2, 8007734 <USER_SPI_ioctl+0x40>)
 8007730:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007734:	08007749 	.word	0x08007749
 8007738:	0800775d 	.word	0x0800775d
 800773c:	0800799b 	.word	0x0800799b
 8007740:	08007809 	.word	0x08007809
 8007744:	080078ff 	.word	0x080078ff
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8007748:	f7ff fd0c 	bl	8007164 <spiselect>
 800774c:	4603      	mov	r3, r0
 800774e:	2b00      	cmp	r3, #0
 8007750:	f000 8127 	beq.w	80079a2 <USER_SPI_ioctl+0x2ae>
 8007754:	2300      	movs	r3, #0
 8007756:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 800775a:	e122      	b.n	80079a2 <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 800775c:	2100      	movs	r1, #0
 800775e:	2009      	movs	r0, #9
 8007760:	f7ff fd75 	bl	800724e <send_cmd>
 8007764:	4603      	mov	r3, r0
 8007766:	2b00      	cmp	r3, #0
 8007768:	f040 811d 	bne.w	80079a6 <USER_SPI_ioctl+0x2b2>
 800776c:	f107 030c 	add.w	r3, r7, #12
 8007770:	2110      	movs	r1, #16
 8007772:	4618      	mov	r0, r3
 8007774:	f7ff fd10 	bl	8007198 <rcvr_datablock>
 8007778:	4603      	mov	r3, r0
 800777a:	2b00      	cmp	r3, #0
 800777c:	f000 8113 	beq.w	80079a6 <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8007780:	7b3b      	ldrb	r3, [r7, #12]
 8007782:	099b      	lsrs	r3, r3, #6
 8007784:	b2db      	uxtb	r3, r3
 8007786:	2b01      	cmp	r3, #1
 8007788:	d111      	bne.n	80077ae <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 800778a:	7d7b      	ldrb	r3, [r7, #21]
 800778c:	461a      	mov	r2, r3
 800778e:	7d3b      	ldrb	r3, [r7, #20]
 8007790:	021b      	lsls	r3, r3, #8
 8007792:	4413      	add	r3, r2
 8007794:	461a      	mov	r2, r3
 8007796:	7cfb      	ldrb	r3, [r7, #19]
 8007798:	041b      	lsls	r3, r3, #16
 800779a:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
 800779e:	4413      	add	r3, r2
 80077a0:	3301      	adds	r3, #1
 80077a2:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 80077a4:	69fb      	ldr	r3, [r7, #28]
 80077a6:	029a      	lsls	r2, r3, #10
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	601a      	str	r2, [r3, #0]
 80077ac:	e028      	b.n	8007800 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80077ae:	7c7b      	ldrb	r3, [r7, #17]
 80077b0:	f003 030f 	and.w	r3, r3, #15
 80077b4:	b2da      	uxtb	r2, r3
 80077b6:	7dbb      	ldrb	r3, [r7, #22]
 80077b8:	09db      	lsrs	r3, r3, #7
 80077ba:	b2db      	uxtb	r3, r3
 80077bc:	4413      	add	r3, r2
 80077be:	b2da      	uxtb	r2, r3
 80077c0:	7d7b      	ldrb	r3, [r7, #21]
 80077c2:	005b      	lsls	r3, r3, #1
 80077c4:	b2db      	uxtb	r3, r3
 80077c6:	f003 0306 	and.w	r3, r3, #6
 80077ca:	b2db      	uxtb	r3, r3
 80077cc:	4413      	add	r3, r2
 80077ce:	b2db      	uxtb	r3, r3
 80077d0:	3302      	adds	r3, #2
 80077d2:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 80077d6:	7d3b      	ldrb	r3, [r7, #20]
 80077d8:	099b      	lsrs	r3, r3, #6
 80077da:	b2db      	uxtb	r3, r3
 80077dc:	461a      	mov	r2, r3
 80077de:	7cfb      	ldrb	r3, [r7, #19]
 80077e0:	009b      	lsls	r3, r3, #2
 80077e2:	441a      	add	r2, r3
 80077e4:	7cbb      	ldrb	r3, [r7, #18]
 80077e6:	029b      	lsls	r3, r3, #10
 80077e8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80077ec:	4413      	add	r3, r2
 80077ee:	3301      	adds	r3, #1
 80077f0:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 80077f2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80077f6:	3b09      	subs	r3, #9
 80077f8:	69fa      	ldr	r2, [r7, #28]
 80077fa:	409a      	lsls	r2, r3
 80077fc:	683b      	ldr	r3, [r7, #0]
 80077fe:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8007800:	2300      	movs	r3, #0
 8007802:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 8007806:	e0ce      	b.n	80079a6 <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8007808:	4b71      	ldr	r3, [pc, #452]	@ (80079d0 <USER_SPI_ioctl+0x2dc>)
 800780a:	781b      	ldrb	r3, [r3, #0]
 800780c:	f003 0304 	and.w	r3, r3, #4
 8007810:	2b00      	cmp	r3, #0
 8007812:	d031      	beq.n	8007878 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8007814:	2100      	movs	r1, #0
 8007816:	208d      	movs	r0, #141	@ 0x8d
 8007818:	f7ff fd19 	bl	800724e <send_cmd>
 800781c:	4603      	mov	r3, r0
 800781e:	2b00      	cmp	r3, #0
 8007820:	f040 80c3 	bne.w	80079aa <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 8007824:	20ff      	movs	r0, #255	@ 0xff
 8007826:	f7ff fc25 	bl	8007074 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 800782a:	f107 030c 	add.w	r3, r7, #12
 800782e:	2110      	movs	r1, #16
 8007830:	4618      	mov	r0, r3
 8007832:	f7ff fcb1 	bl	8007198 <rcvr_datablock>
 8007836:	4603      	mov	r3, r0
 8007838:	2b00      	cmp	r3, #0
 800783a:	f000 80b6 	beq.w	80079aa <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 800783e:	2330      	movs	r3, #48	@ 0x30
 8007840:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8007844:	e007      	b.n	8007856 <USER_SPI_ioctl+0x162>
 8007846:	20ff      	movs	r0, #255	@ 0xff
 8007848:	f7ff fc14 	bl	8007074 <xchg_spi>
 800784c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007850:	3b01      	subs	r3, #1
 8007852:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8007856:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800785a:	2b00      	cmp	r3, #0
 800785c:	d1f3      	bne.n	8007846 <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 800785e:	7dbb      	ldrb	r3, [r7, #22]
 8007860:	091b      	lsrs	r3, r3, #4
 8007862:	b2db      	uxtb	r3, r3
 8007864:	461a      	mov	r2, r3
 8007866:	2310      	movs	r3, #16
 8007868:	fa03 f202 	lsl.w	r2, r3, r2
 800786c:	683b      	ldr	r3, [r7, #0]
 800786e:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8007870:	2300      	movs	r3, #0
 8007872:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 8007876:	e098      	b.n	80079aa <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8007878:	2100      	movs	r1, #0
 800787a:	2009      	movs	r0, #9
 800787c:	f7ff fce7 	bl	800724e <send_cmd>
 8007880:	4603      	mov	r3, r0
 8007882:	2b00      	cmp	r3, #0
 8007884:	f040 8091 	bne.w	80079aa <USER_SPI_ioctl+0x2b6>
 8007888:	f107 030c 	add.w	r3, r7, #12
 800788c:	2110      	movs	r1, #16
 800788e:	4618      	mov	r0, r3
 8007890:	f7ff fc82 	bl	8007198 <rcvr_datablock>
 8007894:	4603      	mov	r3, r0
 8007896:	2b00      	cmp	r3, #0
 8007898:	f000 8087 	beq.w	80079aa <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 800789c:	4b4c      	ldr	r3, [pc, #304]	@ (80079d0 <USER_SPI_ioctl+0x2dc>)
 800789e:	781b      	ldrb	r3, [r3, #0]
 80078a0:	f003 0302 	and.w	r3, r3, #2
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d012      	beq.n	80078ce <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 80078a8:	7dbb      	ldrb	r3, [r7, #22]
 80078aa:	005b      	lsls	r3, r3, #1
 80078ac:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 80078b0:	7dfa      	ldrb	r2, [r7, #23]
 80078b2:	09d2      	lsrs	r2, r2, #7
 80078b4:	b2d2      	uxtb	r2, r2
 80078b6:	4413      	add	r3, r2
 80078b8:	1c5a      	adds	r2, r3, #1
 80078ba:	7e7b      	ldrb	r3, [r7, #25]
 80078bc:	099b      	lsrs	r3, r3, #6
 80078be:	b2db      	uxtb	r3, r3
 80078c0:	3b01      	subs	r3, #1
 80078c2:	fa02 f303 	lsl.w	r3, r2, r3
 80078c6:	461a      	mov	r2, r3
 80078c8:	683b      	ldr	r3, [r7, #0]
 80078ca:	601a      	str	r2, [r3, #0]
 80078cc:	e013      	b.n	80078f6 <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 80078ce:	7dbb      	ldrb	r3, [r7, #22]
 80078d0:	109b      	asrs	r3, r3, #2
 80078d2:	b29b      	uxth	r3, r3
 80078d4:	f003 031f 	and.w	r3, r3, #31
 80078d8:	3301      	adds	r3, #1
 80078da:	7dfa      	ldrb	r2, [r7, #23]
 80078dc:	00d2      	lsls	r2, r2, #3
 80078de:	f002 0218 	and.w	r2, r2, #24
 80078e2:	7df9      	ldrb	r1, [r7, #23]
 80078e4:	0949      	lsrs	r1, r1, #5
 80078e6:	b2c9      	uxtb	r1, r1
 80078e8:	440a      	add	r2, r1
 80078ea:	3201      	adds	r2, #1
 80078ec:	fb02 f303 	mul.w	r3, r2, r3
 80078f0:	461a      	mov	r2, r3
 80078f2:	683b      	ldr	r3, [r7, #0]
 80078f4:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 80078f6:	2300      	movs	r3, #0
 80078f8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 80078fc:	e055      	b.n	80079aa <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 80078fe:	4b34      	ldr	r3, [pc, #208]	@ (80079d0 <USER_SPI_ioctl+0x2dc>)
 8007900:	781b      	ldrb	r3, [r3, #0]
 8007902:	f003 0306 	and.w	r3, r3, #6
 8007906:	2b00      	cmp	r3, #0
 8007908:	d051      	beq.n	80079ae <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800790a:	f107 020c 	add.w	r2, r7, #12
 800790e:	79fb      	ldrb	r3, [r7, #7]
 8007910:	210b      	movs	r1, #11
 8007912:	4618      	mov	r0, r3
 8007914:	f7ff feee 	bl	80076f4 <USER_SPI_ioctl>
 8007918:	4603      	mov	r3, r0
 800791a:	2b00      	cmp	r3, #0
 800791c:	d149      	bne.n	80079b2 <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800791e:	7b3b      	ldrb	r3, [r7, #12]
 8007920:	099b      	lsrs	r3, r3, #6
 8007922:	b2db      	uxtb	r3, r3
 8007924:	2b00      	cmp	r3, #0
 8007926:	d104      	bne.n	8007932 <USER_SPI_ioctl+0x23e>
 8007928:	7dbb      	ldrb	r3, [r7, #22]
 800792a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800792e:	2b00      	cmp	r3, #0
 8007930:	d041      	beq.n	80079b6 <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8007932:	683b      	ldr	r3, [r7, #0]
 8007934:	623b      	str	r3, [r7, #32]
 8007936:	6a3b      	ldr	r3, [r7, #32]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800793c:	6a3b      	ldr	r3, [r7, #32]
 800793e:	685b      	ldr	r3, [r3, #4]
 8007940:	627b      	str	r3, [r7, #36]	@ 0x24
		if (!(CardType & CT_BLOCK)) {
 8007942:	4b23      	ldr	r3, [pc, #140]	@ (80079d0 <USER_SPI_ioctl+0x2dc>)
 8007944:	781b      	ldrb	r3, [r3, #0]
 8007946:	f003 0308 	and.w	r3, r3, #8
 800794a:	2b00      	cmp	r3, #0
 800794c:	d105      	bne.n	800795a <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 800794e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007950:	025b      	lsls	r3, r3, #9
 8007952:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007956:	025b      	lsls	r3, r3, #9
 8007958:	627b      	str	r3, [r7, #36]	@ 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 800795a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800795c:	2020      	movs	r0, #32
 800795e:	f7ff fc76 	bl	800724e <send_cmd>
 8007962:	4603      	mov	r3, r0
 8007964:	2b00      	cmp	r3, #0
 8007966:	d128      	bne.n	80079ba <USER_SPI_ioctl+0x2c6>
 8007968:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800796a:	2021      	movs	r0, #33	@ 0x21
 800796c:	f7ff fc6f 	bl	800724e <send_cmd>
 8007970:	4603      	mov	r3, r0
 8007972:	2b00      	cmp	r3, #0
 8007974:	d121      	bne.n	80079ba <USER_SPI_ioctl+0x2c6>
 8007976:	2100      	movs	r1, #0
 8007978:	2026      	movs	r0, #38	@ 0x26
 800797a:	f7ff fc68 	bl	800724e <send_cmd>
 800797e:	4603      	mov	r3, r0
 8007980:	2b00      	cmp	r3, #0
 8007982:	d11a      	bne.n	80079ba <USER_SPI_ioctl+0x2c6>
 8007984:	f247 5030 	movw	r0, #30000	@ 0x7530
 8007988:	f7ff fbba 	bl	8007100 <wait_ready>
 800798c:	4603      	mov	r3, r0
 800798e:	2b00      	cmp	r3, #0
 8007990:	d013      	beq.n	80079ba <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 8007992:	2300      	movs	r3, #0
 8007994:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 8007998:	e00f      	b.n	80079ba <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 800799a:	2304      	movs	r3, #4
 800799c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80079a0:	e00c      	b.n	80079bc <USER_SPI_ioctl+0x2c8>
		break;
 80079a2:	bf00      	nop
 80079a4:	e00a      	b.n	80079bc <USER_SPI_ioctl+0x2c8>
		break;
 80079a6:	bf00      	nop
 80079a8:	e008      	b.n	80079bc <USER_SPI_ioctl+0x2c8>
		break;
 80079aa:	bf00      	nop
 80079ac:	e006      	b.n	80079bc <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 80079ae:	bf00      	nop
 80079b0:	e004      	b.n	80079bc <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 80079b2:	bf00      	nop
 80079b4:	e002      	b.n	80079bc <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 80079b6:	bf00      	nop
 80079b8:	e000      	b.n	80079bc <USER_SPI_ioctl+0x2c8>
		break;
 80079ba:	bf00      	nop
	}

	despiselect();
 80079bc:	f7ff fbc4 	bl	8007148 <despiselect>

	return res;
 80079c0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80079c4:	4618      	mov	r0, r3
 80079c6:	3730      	adds	r7, #48	@ 0x30
 80079c8:	46bd      	mov	sp, r7
 80079ca:	bd80      	pop	{r7, pc}
 80079cc:	20000028 	.word	0x20000028
 80079d0:	20000a20 	.word	0x20000a20

080079d4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b084      	sub	sp, #16
 80079d8:	af00      	add	r7, sp, #0
 80079da:	4603      	mov	r3, r0
 80079dc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80079de:	79fb      	ldrb	r3, [r7, #7]
 80079e0:	4a08      	ldr	r2, [pc, #32]	@ (8007a04 <disk_status+0x30>)
 80079e2:	009b      	lsls	r3, r3, #2
 80079e4:	4413      	add	r3, r2
 80079e6:	685b      	ldr	r3, [r3, #4]
 80079e8:	685b      	ldr	r3, [r3, #4]
 80079ea:	79fa      	ldrb	r2, [r7, #7]
 80079ec:	4905      	ldr	r1, [pc, #20]	@ (8007a04 <disk_status+0x30>)
 80079ee:	440a      	add	r2, r1
 80079f0:	7a12      	ldrb	r2, [r2, #8]
 80079f2:	4610      	mov	r0, r2
 80079f4:	4798      	blx	r3
 80079f6:	4603      	mov	r3, r0
 80079f8:	73fb      	strb	r3, [r7, #15]
  return stat;
 80079fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80079fc:	4618      	mov	r0, r3
 80079fe:	3710      	adds	r7, #16
 8007a00:	46bd      	mov	sp, r7
 8007a02:	bd80      	pop	{r7, pc}
 8007a04:	20000a54 	.word	0x20000a54

08007a08 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b084      	sub	sp, #16
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	4603      	mov	r3, r0
 8007a10:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8007a12:	2300      	movs	r3, #0
 8007a14:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8007a16:	79fb      	ldrb	r3, [r7, #7]
 8007a18:	4a0d      	ldr	r2, [pc, #52]	@ (8007a50 <disk_initialize+0x48>)
 8007a1a:	5cd3      	ldrb	r3, [r2, r3]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d111      	bne.n	8007a44 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8007a20:	79fb      	ldrb	r3, [r7, #7]
 8007a22:	4a0b      	ldr	r2, [pc, #44]	@ (8007a50 <disk_initialize+0x48>)
 8007a24:	2101      	movs	r1, #1
 8007a26:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8007a28:	79fb      	ldrb	r3, [r7, #7]
 8007a2a:	4a09      	ldr	r2, [pc, #36]	@ (8007a50 <disk_initialize+0x48>)
 8007a2c:	009b      	lsls	r3, r3, #2
 8007a2e:	4413      	add	r3, r2
 8007a30:	685b      	ldr	r3, [r3, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	79fa      	ldrb	r2, [r7, #7]
 8007a36:	4906      	ldr	r1, [pc, #24]	@ (8007a50 <disk_initialize+0x48>)
 8007a38:	440a      	add	r2, r1
 8007a3a:	7a12      	ldrb	r2, [r2, #8]
 8007a3c:	4610      	mov	r0, r2
 8007a3e:	4798      	blx	r3
 8007a40:	4603      	mov	r3, r0
 8007a42:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8007a44:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a46:	4618      	mov	r0, r3
 8007a48:	3710      	adds	r7, #16
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	bd80      	pop	{r7, pc}
 8007a4e:	bf00      	nop
 8007a50:	20000a54 	.word	0x20000a54

08007a54 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8007a54:	b590      	push	{r4, r7, lr}
 8007a56:	b087      	sub	sp, #28
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	60b9      	str	r1, [r7, #8]
 8007a5c:	607a      	str	r2, [r7, #4]
 8007a5e:	603b      	str	r3, [r7, #0]
 8007a60:	4603      	mov	r3, r0
 8007a62:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8007a64:	7bfb      	ldrb	r3, [r7, #15]
 8007a66:	4a0a      	ldr	r2, [pc, #40]	@ (8007a90 <disk_read+0x3c>)
 8007a68:	009b      	lsls	r3, r3, #2
 8007a6a:	4413      	add	r3, r2
 8007a6c:	685b      	ldr	r3, [r3, #4]
 8007a6e:	689c      	ldr	r4, [r3, #8]
 8007a70:	7bfb      	ldrb	r3, [r7, #15]
 8007a72:	4a07      	ldr	r2, [pc, #28]	@ (8007a90 <disk_read+0x3c>)
 8007a74:	4413      	add	r3, r2
 8007a76:	7a18      	ldrb	r0, [r3, #8]
 8007a78:	683b      	ldr	r3, [r7, #0]
 8007a7a:	687a      	ldr	r2, [r7, #4]
 8007a7c:	68b9      	ldr	r1, [r7, #8]
 8007a7e:	47a0      	blx	r4
 8007a80:	4603      	mov	r3, r0
 8007a82:	75fb      	strb	r3, [r7, #23]
  return res;
 8007a84:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a86:	4618      	mov	r0, r3
 8007a88:	371c      	adds	r7, #28
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	bd90      	pop	{r4, r7, pc}
 8007a8e:	bf00      	nop
 8007a90:	20000a54 	.word	0x20000a54

08007a94 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8007a94:	b590      	push	{r4, r7, lr}
 8007a96:	b087      	sub	sp, #28
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	60b9      	str	r1, [r7, #8]
 8007a9c:	607a      	str	r2, [r7, #4]
 8007a9e:	603b      	str	r3, [r7, #0]
 8007aa0:	4603      	mov	r3, r0
 8007aa2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8007aa4:	7bfb      	ldrb	r3, [r7, #15]
 8007aa6:	4a0a      	ldr	r2, [pc, #40]	@ (8007ad0 <disk_write+0x3c>)
 8007aa8:	009b      	lsls	r3, r3, #2
 8007aaa:	4413      	add	r3, r2
 8007aac:	685b      	ldr	r3, [r3, #4]
 8007aae:	68dc      	ldr	r4, [r3, #12]
 8007ab0:	7bfb      	ldrb	r3, [r7, #15]
 8007ab2:	4a07      	ldr	r2, [pc, #28]	@ (8007ad0 <disk_write+0x3c>)
 8007ab4:	4413      	add	r3, r2
 8007ab6:	7a18      	ldrb	r0, [r3, #8]
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	687a      	ldr	r2, [r7, #4]
 8007abc:	68b9      	ldr	r1, [r7, #8]
 8007abe:	47a0      	blx	r4
 8007ac0:	4603      	mov	r3, r0
 8007ac2:	75fb      	strb	r3, [r7, #23]
  return res;
 8007ac4:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	371c      	adds	r7, #28
 8007aca:	46bd      	mov	sp, r7
 8007acc:	bd90      	pop	{r4, r7, pc}
 8007ace:	bf00      	nop
 8007ad0:	20000a54 	.word	0x20000a54

08007ad4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	b084      	sub	sp, #16
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	4603      	mov	r3, r0
 8007adc:	603a      	str	r2, [r7, #0]
 8007ade:	71fb      	strb	r3, [r7, #7]
 8007ae0:	460b      	mov	r3, r1
 8007ae2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8007ae4:	79fb      	ldrb	r3, [r7, #7]
 8007ae6:	4a09      	ldr	r2, [pc, #36]	@ (8007b0c <disk_ioctl+0x38>)
 8007ae8:	009b      	lsls	r3, r3, #2
 8007aea:	4413      	add	r3, r2
 8007aec:	685b      	ldr	r3, [r3, #4]
 8007aee:	691b      	ldr	r3, [r3, #16]
 8007af0:	79fa      	ldrb	r2, [r7, #7]
 8007af2:	4906      	ldr	r1, [pc, #24]	@ (8007b0c <disk_ioctl+0x38>)
 8007af4:	440a      	add	r2, r1
 8007af6:	7a10      	ldrb	r0, [r2, #8]
 8007af8:	79b9      	ldrb	r1, [r7, #6]
 8007afa:	683a      	ldr	r2, [r7, #0]
 8007afc:	4798      	blx	r3
 8007afe:	4603      	mov	r3, r0
 8007b00:	73fb      	strb	r3, [r7, #15]
  return res;
 8007b02:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b04:	4618      	mov	r0, r3
 8007b06:	3710      	adds	r7, #16
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	bd80      	pop	{r7, pc}
 8007b0c:	20000a54 	.word	0x20000a54

08007b10 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8007b10:	b480      	push	{r7}
 8007b12:	b085      	sub	sp, #20
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	3301      	adds	r3, #1
 8007b1c:	781b      	ldrb	r3, [r3, #0]
 8007b1e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8007b20:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007b24:	021b      	lsls	r3, r3, #8
 8007b26:	b21a      	sxth	r2, r3
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	781b      	ldrb	r3, [r3, #0]
 8007b2c:	b21b      	sxth	r3, r3
 8007b2e:	4313      	orrs	r3, r2
 8007b30:	b21b      	sxth	r3, r3
 8007b32:	81fb      	strh	r3, [r7, #14]
	return rv;
 8007b34:	89fb      	ldrh	r3, [r7, #14]
}
 8007b36:	4618      	mov	r0, r3
 8007b38:	3714      	adds	r7, #20
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b40:	4770      	bx	lr

08007b42 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8007b42:	b480      	push	{r7}
 8007b44:	b085      	sub	sp, #20
 8007b46:	af00      	add	r7, sp, #0
 8007b48:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	3303      	adds	r3, #3
 8007b4e:	781b      	ldrb	r3, [r3, #0]
 8007b50:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	021b      	lsls	r3, r3, #8
 8007b56:	687a      	ldr	r2, [r7, #4]
 8007b58:	3202      	adds	r2, #2
 8007b5a:	7812      	ldrb	r2, [r2, #0]
 8007b5c:	4313      	orrs	r3, r2
 8007b5e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	021b      	lsls	r3, r3, #8
 8007b64:	687a      	ldr	r2, [r7, #4]
 8007b66:	3201      	adds	r2, #1
 8007b68:	7812      	ldrb	r2, [r2, #0]
 8007b6a:	4313      	orrs	r3, r2
 8007b6c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	021b      	lsls	r3, r3, #8
 8007b72:	687a      	ldr	r2, [r7, #4]
 8007b74:	7812      	ldrb	r2, [r2, #0]
 8007b76:	4313      	orrs	r3, r2
 8007b78:	60fb      	str	r3, [r7, #12]
	return rv;
 8007b7a:	68fb      	ldr	r3, [r7, #12]
}
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	3714      	adds	r7, #20
 8007b80:	46bd      	mov	sp, r7
 8007b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b86:	4770      	bx	lr

08007b88 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8007b88:	b480      	push	{r7}
 8007b8a:	b083      	sub	sp, #12
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	6078      	str	r0, [r7, #4]
 8007b90:	460b      	mov	r3, r1
 8007b92:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	1c5a      	adds	r2, r3, #1
 8007b98:	607a      	str	r2, [r7, #4]
 8007b9a:	887a      	ldrh	r2, [r7, #2]
 8007b9c:	b2d2      	uxtb	r2, r2
 8007b9e:	701a      	strb	r2, [r3, #0]
 8007ba0:	887b      	ldrh	r3, [r7, #2]
 8007ba2:	0a1b      	lsrs	r3, r3, #8
 8007ba4:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	1c5a      	adds	r2, r3, #1
 8007baa:	607a      	str	r2, [r7, #4]
 8007bac:	887a      	ldrh	r2, [r7, #2]
 8007bae:	b2d2      	uxtb	r2, r2
 8007bb0:	701a      	strb	r2, [r3, #0]
}
 8007bb2:	bf00      	nop
 8007bb4:	370c      	adds	r7, #12
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bbc:	4770      	bx	lr

08007bbe <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8007bbe:	b480      	push	{r7}
 8007bc0:	b083      	sub	sp, #12
 8007bc2:	af00      	add	r7, sp, #0
 8007bc4:	6078      	str	r0, [r7, #4]
 8007bc6:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	1c5a      	adds	r2, r3, #1
 8007bcc:	607a      	str	r2, [r7, #4]
 8007bce:	683a      	ldr	r2, [r7, #0]
 8007bd0:	b2d2      	uxtb	r2, r2
 8007bd2:	701a      	strb	r2, [r3, #0]
 8007bd4:	683b      	ldr	r3, [r7, #0]
 8007bd6:	0a1b      	lsrs	r3, r3, #8
 8007bd8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	1c5a      	adds	r2, r3, #1
 8007bde:	607a      	str	r2, [r7, #4]
 8007be0:	683a      	ldr	r2, [r7, #0]
 8007be2:	b2d2      	uxtb	r2, r2
 8007be4:	701a      	strb	r2, [r3, #0]
 8007be6:	683b      	ldr	r3, [r7, #0]
 8007be8:	0a1b      	lsrs	r3, r3, #8
 8007bea:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	1c5a      	adds	r2, r3, #1
 8007bf0:	607a      	str	r2, [r7, #4]
 8007bf2:	683a      	ldr	r2, [r7, #0]
 8007bf4:	b2d2      	uxtb	r2, r2
 8007bf6:	701a      	strb	r2, [r3, #0]
 8007bf8:	683b      	ldr	r3, [r7, #0]
 8007bfa:	0a1b      	lsrs	r3, r3, #8
 8007bfc:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	1c5a      	adds	r2, r3, #1
 8007c02:	607a      	str	r2, [r7, #4]
 8007c04:	683a      	ldr	r2, [r7, #0]
 8007c06:	b2d2      	uxtb	r2, r2
 8007c08:	701a      	strb	r2, [r3, #0]
}
 8007c0a:	bf00      	nop
 8007c0c:	370c      	adds	r7, #12
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c14:	4770      	bx	lr

08007c16 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8007c16:	b480      	push	{r7}
 8007c18:	b087      	sub	sp, #28
 8007c1a:	af00      	add	r7, sp, #0
 8007c1c:	60f8      	str	r0, [r7, #12]
 8007c1e:	60b9      	str	r1, [r7, #8]
 8007c20:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8007c26:	68bb      	ldr	r3, [r7, #8]
 8007c28:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d00d      	beq.n	8007c4c <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8007c30:	693a      	ldr	r2, [r7, #16]
 8007c32:	1c53      	adds	r3, r2, #1
 8007c34:	613b      	str	r3, [r7, #16]
 8007c36:	697b      	ldr	r3, [r7, #20]
 8007c38:	1c59      	adds	r1, r3, #1
 8007c3a:	6179      	str	r1, [r7, #20]
 8007c3c:	7812      	ldrb	r2, [r2, #0]
 8007c3e:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	3b01      	subs	r3, #1
 8007c44:	607b      	str	r3, [r7, #4]
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d1f1      	bne.n	8007c30 <mem_cpy+0x1a>
	}
}
 8007c4c:	bf00      	nop
 8007c4e:	371c      	adds	r7, #28
 8007c50:	46bd      	mov	sp, r7
 8007c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c56:	4770      	bx	lr

08007c58 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8007c58:	b480      	push	{r7}
 8007c5a:	b087      	sub	sp, #28
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	60f8      	str	r0, [r7, #12]
 8007c60:	60b9      	str	r1, [r7, #8]
 8007c62:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8007c68:	697b      	ldr	r3, [r7, #20]
 8007c6a:	1c5a      	adds	r2, r3, #1
 8007c6c:	617a      	str	r2, [r7, #20]
 8007c6e:	68ba      	ldr	r2, [r7, #8]
 8007c70:	b2d2      	uxtb	r2, r2
 8007c72:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	3b01      	subs	r3, #1
 8007c78:	607b      	str	r3, [r7, #4]
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d1f3      	bne.n	8007c68 <mem_set+0x10>
}
 8007c80:	bf00      	nop
 8007c82:	bf00      	nop
 8007c84:	371c      	adds	r7, #28
 8007c86:	46bd      	mov	sp, r7
 8007c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8c:	4770      	bx	lr

08007c8e <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8007c8e:	b480      	push	{r7}
 8007c90:	b089      	sub	sp, #36	@ 0x24
 8007c92:	af00      	add	r7, sp, #0
 8007c94:	60f8      	str	r0, [r7, #12]
 8007c96:	60b9      	str	r1, [r7, #8]
 8007c98:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	61fb      	str	r3, [r7, #28]
 8007c9e:	68bb      	ldr	r3, [r7, #8]
 8007ca0:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8007ca6:	69fb      	ldr	r3, [r7, #28]
 8007ca8:	1c5a      	adds	r2, r3, #1
 8007caa:	61fa      	str	r2, [r7, #28]
 8007cac:	781b      	ldrb	r3, [r3, #0]
 8007cae:	4619      	mov	r1, r3
 8007cb0:	69bb      	ldr	r3, [r7, #24]
 8007cb2:	1c5a      	adds	r2, r3, #1
 8007cb4:	61ba      	str	r2, [r7, #24]
 8007cb6:	781b      	ldrb	r3, [r3, #0]
 8007cb8:	1acb      	subs	r3, r1, r3
 8007cba:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	3b01      	subs	r3, #1
 8007cc0:	607b      	str	r3, [r7, #4]
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d002      	beq.n	8007cce <mem_cmp+0x40>
 8007cc8:	697b      	ldr	r3, [r7, #20]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d0eb      	beq.n	8007ca6 <mem_cmp+0x18>

	return r;
 8007cce:	697b      	ldr	r3, [r7, #20]
}
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	3724      	adds	r7, #36	@ 0x24
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cda:	4770      	bx	lr

08007cdc <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8007cdc:	b480      	push	{r7}
 8007cde:	b083      	sub	sp, #12
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	6078      	str	r0, [r7, #4]
 8007ce4:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8007ce6:	e002      	b.n	8007cee <chk_chr+0x12>
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	3301      	adds	r3, #1
 8007cec:	607b      	str	r3, [r7, #4]
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	781b      	ldrb	r3, [r3, #0]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d005      	beq.n	8007d02 <chk_chr+0x26>
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	781b      	ldrb	r3, [r3, #0]
 8007cfa:	461a      	mov	r2, r3
 8007cfc:	683b      	ldr	r3, [r7, #0]
 8007cfe:	4293      	cmp	r3, r2
 8007d00:	d1f2      	bne.n	8007ce8 <chk_chr+0xc>
	return *str;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	781b      	ldrb	r3, [r3, #0]
}
 8007d06:	4618      	mov	r0, r3
 8007d08:	370c      	adds	r7, #12
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d10:	4770      	bx	lr

08007d12 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 8007d12:	b580      	push	{r7, lr}
 8007d14:	b082      	sub	sp, #8
 8007d16:	af00      	add	r7, sp, #0
 8007d18:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d009      	beq.n	8007d34 <lock_fs+0x22>
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	68db      	ldr	r3, [r3, #12]
 8007d24:	4618      	mov	r0, r3
 8007d26:	f002 f8e7 	bl	8009ef8 <ff_req_grant>
 8007d2a:	4603      	mov	r3, r0
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d001      	beq.n	8007d34 <lock_fs+0x22>
 8007d30:	2301      	movs	r3, #1
 8007d32:	e000      	b.n	8007d36 <lock_fs+0x24>
 8007d34:	2300      	movs	r3, #0
}
 8007d36:	4618      	mov	r0, r3
 8007d38:	3708      	adds	r7, #8
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	bd80      	pop	{r7, pc}

08007d3e <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 8007d3e:	b580      	push	{r7, lr}
 8007d40:	b082      	sub	sp, #8
 8007d42:	af00      	add	r7, sp, #0
 8007d44:	6078      	str	r0, [r7, #4]
 8007d46:	460b      	mov	r3, r1
 8007d48:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d00d      	beq.n	8007d6c <unlock_fs+0x2e>
 8007d50:	78fb      	ldrb	r3, [r7, #3]
 8007d52:	2b0c      	cmp	r3, #12
 8007d54:	d00a      	beq.n	8007d6c <unlock_fs+0x2e>
 8007d56:	78fb      	ldrb	r3, [r7, #3]
 8007d58:	2b0b      	cmp	r3, #11
 8007d5a:	d007      	beq.n	8007d6c <unlock_fs+0x2e>
 8007d5c:	78fb      	ldrb	r3, [r7, #3]
 8007d5e:	2b0f      	cmp	r3, #15
 8007d60:	d004      	beq.n	8007d6c <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	68db      	ldr	r3, [r3, #12]
 8007d66:	4618      	mov	r0, r3
 8007d68:	f002 f8db 	bl	8009f22 <ff_rel_grant>
	}
}
 8007d6c:	bf00      	nop
 8007d6e:	3708      	adds	r7, #8
 8007d70:	46bd      	mov	sp, r7
 8007d72:	bd80      	pop	{r7, pc}

08007d74 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007d74:	b480      	push	{r7}
 8007d76:	b085      	sub	sp, #20
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	6078      	str	r0, [r7, #4]
 8007d7c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8007d7e:	2300      	movs	r3, #0
 8007d80:	60bb      	str	r3, [r7, #8]
 8007d82:	68bb      	ldr	r3, [r7, #8]
 8007d84:	60fb      	str	r3, [r7, #12]
 8007d86:	e029      	b.n	8007ddc <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8007d88:	4a27      	ldr	r2, [pc, #156]	@ (8007e28 <chk_lock+0xb4>)
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	011b      	lsls	r3, r3, #4
 8007d8e:	4413      	add	r3, r2
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d01d      	beq.n	8007dd2 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8007d96:	4a24      	ldr	r2, [pc, #144]	@ (8007e28 <chk_lock+0xb4>)
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	011b      	lsls	r3, r3, #4
 8007d9c:	4413      	add	r3, r2
 8007d9e:	681a      	ldr	r2, [r3, #0]
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	429a      	cmp	r2, r3
 8007da6:	d116      	bne.n	8007dd6 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8007da8:	4a1f      	ldr	r2, [pc, #124]	@ (8007e28 <chk_lock+0xb4>)
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	011b      	lsls	r3, r3, #4
 8007dae:	4413      	add	r3, r2
 8007db0:	3304      	adds	r3, #4
 8007db2:	681a      	ldr	r2, [r3, #0]
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8007db8:	429a      	cmp	r2, r3
 8007dba:	d10c      	bne.n	8007dd6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8007dbc:	4a1a      	ldr	r2, [pc, #104]	@ (8007e28 <chk_lock+0xb4>)
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	011b      	lsls	r3, r3, #4
 8007dc2:	4413      	add	r3, r2
 8007dc4:	3308      	adds	r3, #8
 8007dc6:	681a      	ldr	r2, [r3, #0]
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8007dcc:	429a      	cmp	r2, r3
 8007dce:	d102      	bne.n	8007dd6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8007dd0:	e007      	b.n	8007de2 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8007dd2:	2301      	movs	r3, #1
 8007dd4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	3301      	adds	r3, #1
 8007dda:	60fb      	str	r3, [r7, #12]
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	2b01      	cmp	r3, #1
 8007de0:	d9d2      	bls.n	8007d88 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	2b02      	cmp	r3, #2
 8007de6:	d109      	bne.n	8007dfc <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8007de8:	68bb      	ldr	r3, [r7, #8]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d102      	bne.n	8007df4 <chk_lock+0x80>
 8007dee:	683b      	ldr	r3, [r7, #0]
 8007df0:	2b02      	cmp	r3, #2
 8007df2:	d101      	bne.n	8007df8 <chk_lock+0x84>
 8007df4:	2300      	movs	r3, #0
 8007df6:	e010      	b.n	8007e1a <chk_lock+0xa6>
 8007df8:	2312      	movs	r3, #18
 8007dfa:	e00e      	b.n	8007e1a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8007dfc:	683b      	ldr	r3, [r7, #0]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d108      	bne.n	8007e14 <chk_lock+0xa0>
 8007e02:	4a09      	ldr	r2, [pc, #36]	@ (8007e28 <chk_lock+0xb4>)
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	011b      	lsls	r3, r3, #4
 8007e08:	4413      	add	r3, r2
 8007e0a:	330c      	adds	r3, #12
 8007e0c:	881b      	ldrh	r3, [r3, #0]
 8007e0e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007e12:	d101      	bne.n	8007e18 <chk_lock+0xa4>
 8007e14:	2310      	movs	r3, #16
 8007e16:	e000      	b.n	8007e1a <chk_lock+0xa6>
 8007e18:	2300      	movs	r3, #0
}
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	3714      	adds	r7, #20
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e24:	4770      	bx	lr
 8007e26:	bf00      	nop
 8007e28:	20000a34 	.word	0x20000a34

08007e2c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8007e2c:	b480      	push	{r7}
 8007e2e:	b083      	sub	sp, #12
 8007e30:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007e32:	2300      	movs	r3, #0
 8007e34:	607b      	str	r3, [r7, #4]
 8007e36:	e002      	b.n	8007e3e <enq_lock+0x12>
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	3301      	adds	r3, #1
 8007e3c:	607b      	str	r3, [r7, #4]
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	2b01      	cmp	r3, #1
 8007e42:	d806      	bhi.n	8007e52 <enq_lock+0x26>
 8007e44:	4a09      	ldr	r2, [pc, #36]	@ (8007e6c <enq_lock+0x40>)
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	011b      	lsls	r3, r3, #4
 8007e4a:	4413      	add	r3, r2
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d1f2      	bne.n	8007e38 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	2b02      	cmp	r3, #2
 8007e56:	bf14      	ite	ne
 8007e58:	2301      	movne	r3, #1
 8007e5a:	2300      	moveq	r3, #0
 8007e5c:	b2db      	uxtb	r3, r3
}
 8007e5e:	4618      	mov	r0, r3
 8007e60:	370c      	adds	r7, #12
 8007e62:	46bd      	mov	sp, r7
 8007e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e68:	4770      	bx	lr
 8007e6a:	bf00      	nop
 8007e6c:	20000a34 	.word	0x20000a34

08007e70 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007e70:	b480      	push	{r7}
 8007e72:	b085      	sub	sp, #20
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]
 8007e78:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	60fb      	str	r3, [r7, #12]
 8007e7e:	e01f      	b.n	8007ec0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8007e80:	4a41      	ldr	r2, [pc, #260]	@ (8007f88 <inc_lock+0x118>)
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	011b      	lsls	r3, r3, #4
 8007e86:	4413      	add	r3, r2
 8007e88:	681a      	ldr	r2, [r3, #0]
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	429a      	cmp	r2, r3
 8007e90:	d113      	bne.n	8007eba <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8007e92:	4a3d      	ldr	r2, [pc, #244]	@ (8007f88 <inc_lock+0x118>)
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	011b      	lsls	r3, r3, #4
 8007e98:	4413      	add	r3, r2
 8007e9a:	3304      	adds	r3, #4
 8007e9c:	681a      	ldr	r2, [r3, #0]
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8007ea2:	429a      	cmp	r2, r3
 8007ea4:	d109      	bne.n	8007eba <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8007ea6:	4a38      	ldr	r2, [pc, #224]	@ (8007f88 <inc_lock+0x118>)
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	011b      	lsls	r3, r3, #4
 8007eac:	4413      	add	r3, r2
 8007eae:	3308      	adds	r3, #8
 8007eb0:	681a      	ldr	r2, [r3, #0]
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8007eb6:	429a      	cmp	r2, r3
 8007eb8:	d006      	beq.n	8007ec8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	3301      	adds	r3, #1
 8007ebe:	60fb      	str	r3, [r7, #12]
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	2b01      	cmp	r3, #1
 8007ec4:	d9dc      	bls.n	8007e80 <inc_lock+0x10>
 8007ec6:	e000      	b.n	8007eca <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8007ec8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	2b02      	cmp	r3, #2
 8007ece:	d132      	bne.n	8007f36 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007ed0:	2300      	movs	r3, #0
 8007ed2:	60fb      	str	r3, [r7, #12]
 8007ed4:	e002      	b.n	8007edc <inc_lock+0x6c>
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	3301      	adds	r3, #1
 8007eda:	60fb      	str	r3, [r7, #12]
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	2b01      	cmp	r3, #1
 8007ee0:	d806      	bhi.n	8007ef0 <inc_lock+0x80>
 8007ee2:	4a29      	ldr	r2, [pc, #164]	@ (8007f88 <inc_lock+0x118>)
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	011b      	lsls	r3, r3, #4
 8007ee8:	4413      	add	r3, r2
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d1f2      	bne.n	8007ed6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	2b02      	cmp	r3, #2
 8007ef4:	d101      	bne.n	8007efa <inc_lock+0x8a>
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	e040      	b.n	8007f7c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681a      	ldr	r2, [r3, #0]
 8007efe:	4922      	ldr	r1, [pc, #136]	@ (8007f88 <inc_lock+0x118>)
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	011b      	lsls	r3, r3, #4
 8007f04:	440b      	add	r3, r1
 8007f06:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	689a      	ldr	r2, [r3, #8]
 8007f0c:	491e      	ldr	r1, [pc, #120]	@ (8007f88 <inc_lock+0x118>)
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	011b      	lsls	r3, r3, #4
 8007f12:	440b      	add	r3, r1
 8007f14:	3304      	adds	r3, #4
 8007f16:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	695a      	ldr	r2, [r3, #20]
 8007f1c:	491a      	ldr	r1, [pc, #104]	@ (8007f88 <inc_lock+0x118>)
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	011b      	lsls	r3, r3, #4
 8007f22:	440b      	add	r3, r1
 8007f24:	3308      	adds	r3, #8
 8007f26:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8007f28:	4a17      	ldr	r2, [pc, #92]	@ (8007f88 <inc_lock+0x118>)
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	011b      	lsls	r3, r3, #4
 8007f2e:	4413      	add	r3, r2
 8007f30:	330c      	adds	r3, #12
 8007f32:	2200      	movs	r2, #0
 8007f34:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8007f36:	683b      	ldr	r3, [r7, #0]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d009      	beq.n	8007f50 <inc_lock+0xe0>
 8007f3c:	4a12      	ldr	r2, [pc, #72]	@ (8007f88 <inc_lock+0x118>)
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	011b      	lsls	r3, r3, #4
 8007f42:	4413      	add	r3, r2
 8007f44:	330c      	adds	r3, #12
 8007f46:	881b      	ldrh	r3, [r3, #0]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d001      	beq.n	8007f50 <inc_lock+0xe0>
 8007f4c:	2300      	movs	r3, #0
 8007f4e:	e015      	b.n	8007f7c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8007f50:	683b      	ldr	r3, [r7, #0]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d108      	bne.n	8007f68 <inc_lock+0xf8>
 8007f56:	4a0c      	ldr	r2, [pc, #48]	@ (8007f88 <inc_lock+0x118>)
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	011b      	lsls	r3, r3, #4
 8007f5c:	4413      	add	r3, r2
 8007f5e:	330c      	adds	r3, #12
 8007f60:	881b      	ldrh	r3, [r3, #0]
 8007f62:	3301      	adds	r3, #1
 8007f64:	b29a      	uxth	r2, r3
 8007f66:	e001      	b.n	8007f6c <inc_lock+0xfc>
 8007f68:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007f6c:	4906      	ldr	r1, [pc, #24]	@ (8007f88 <inc_lock+0x118>)
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	011b      	lsls	r3, r3, #4
 8007f72:	440b      	add	r3, r1
 8007f74:	330c      	adds	r3, #12
 8007f76:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	3301      	adds	r3, #1
}
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	3714      	adds	r7, #20
 8007f80:	46bd      	mov	sp, r7
 8007f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f86:	4770      	bx	lr
 8007f88:	20000a34 	.word	0x20000a34

08007f8c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8007f8c:	b480      	push	{r7}
 8007f8e:	b085      	sub	sp, #20
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	3b01      	subs	r3, #1
 8007f98:	607b      	str	r3, [r7, #4]
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	2b01      	cmp	r3, #1
 8007f9e:	d825      	bhi.n	8007fec <dec_lock+0x60>
		n = Files[i].ctr;
 8007fa0:	4a17      	ldr	r2, [pc, #92]	@ (8008000 <dec_lock+0x74>)
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	011b      	lsls	r3, r3, #4
 8007fa6:	4413      	add	r3, r2
 8007fa8:	330c      	adds	r3, #12
 8007faa:	881b      	ldrh	r3, [r3, #0]
 8007fac:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8007fae:	89fb      	ldrh	r3, [r7, #14]
 8007fb0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007fb4:	d101      	bne.n	8007fba <dec_lock+0x2e>
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8007fba:	89fb      	ldrh	r3, [r7, #14]
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d002      	beq.n	8007fc6 <dec_lock+0x3a>
 8007fc0:	89fb      	ldrh	r3, [r7, #14]
 8007fc2:	3b01      	subs	r3, #1
 8007fc4:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8007fc6:	4a0e      	ldr	r2, [pc, #56]	@ (8008000 <dec_lock+0x74>)
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	011b      	lsls	r3, r3, #4
 8007fcc:	4413      	add	r3, r2
 8007fce:	330c      	adds	r3, #12
 8007fd0:	89fa      	ldrh	r2, [r7, #14]
 8007fd2:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8007fd4:	89fb      	ldrh	r3, [r7, #14]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d105      	bne.n	8007fe6 <dec_lock+0x5a>
 8007fda:	4a09      	ldr	r2, [pc, #36]	@ (8008000 <dec_lock+0x74>)
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	011b      	lsls	r3, r3, #4
 8007fe0:	4413      	add	r3, r2
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	737b      	strb	r3, [r7, #13]
 8007fea:	e001      	b.n	8007ff0 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8007fec:	2302      	movs	r3, #2
 8007fee:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8007ff0:	7b7b      	ldrb	r3, [r7, #13]
}
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	3714      	adds	r7, #20
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffc:	4770      	bx	lr
 8007ffe:	bf00      	nop
 8008000:	20000a34 	.word	0x20000a34

08008004 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8008004:	b480      	push	{r7}
 8008006:	b085      	sub	sp, #20
 8008008:	af00      	add	r7, sp, #0
 800800a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800800c:	2300      	movs	r3, #0
 800800e:	60fb      	str	r3, [r7, #12]
 8008010:	e010      	b.n	8008034 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8008012:	4a0d      	ldr	r2, [pc, #52]	@ (8008048 <clear_lock+0x44>)
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	011b      	lsls	r3, r3, #4
 8008018:	4413      	add	r3, r2
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	687a      	ldr	r2, [r7, #4]
 800801e:	429a      	cmp	r2, r3
 8008020:	d105      	bne.n	800802e <clear_lock+0x2a>
 8008022:	4a09      	ldr	r2, [pc, #36]	@ (8008048 <clear_lock+0x44>)
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	011b      	lsls	r3, r3, #4
 8008028:	4413      	add	r3, r2
 800802a:	2200      	movs	r2, #0
 800802c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	3301      	adds	r3, #1
 8008032:	60fb      	str	r3, [r7, #12]
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	2b01      	cmp	r3, #1
 8008038:	d9eb      	bls.n	8008012 <clear_lock+0xe>
	}
}
 800803a:	bf00      	nop
 800803c:	bf00      	nop
 800803e:	3714      	adds	r7, #20
 8008040:	46bd      	mov	sp, r7
 8008042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008046:	4770      	bx	lr
 8008048:	20000a34 	.word	0x20000a34

0800804c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800804c:	b580      	push	{r7, lr}
 800804e:	b086      	sub	sp, #24
 8008050:	af00      	add	r7, sp, #0
 8008052:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8008054:	2300      	movs	r3, #0
 8008056:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	78db      	ldrb	r3, [r3, #3]
 800805c:	2b00      	cmp	r3, #0
 800805e:	d034      	beq.n	80080ca <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008064:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	7858      	ldrb	r0, [r3, #1]
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8008070:	2301      	movs	r3, #1
 8008072:	697a      	ldr	r2, [r7, #20]
 8008074:	f7ff fd0e 	bl	8007a94 <disk_write>
 8008078:	4603      	mov	r3, r0
 800807a:	2b00      	cmp	r3, #0
 800807c:	d002      	beq.n	8008084 <sync_window+0x38>
			res = FR_DISK_ERR;
 800807e:	2301      	movs	r3, #1
 8008080:	73fb      	strb	r3, [r7, #15]
 8008082:	e022      	b.n	80080ca <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2200      	movs	r2, #0
 8008088:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800808e:	697a      	ldr	r2, [r7, #20]
 8008090:	1ad2      	subs	r2, r2, r3
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	69db      	ldr	r3, [r3, #28]
 8008096:	429a      	cmp	r2, r3
 8008098:	d217      	bcs.n	80080ca <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	789b      	ldrb	r3, [r3, #2]
 800809e:	613b      	str	r3, [r7, #16]
 80080a0:	e010      	b.n	80080c4 <sync_window+0x78>
					wsect += fs->fsize;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	69db      	ldr	r3, [r3, #28]
 80080a6:	697a      	ldr	r2, [r7, #20]
 80080a8:	4413      	add	r3, r2
 80080aa:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	7858      	ldrb	r0, [r3, #1]
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80080b6:	2301      	movs	r3, #1
 80080b8:	697a      	ldr	r2, [r7, #20]
 80080ba:	f7ff fceb 	bl	8007a94 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80080be:	693b      	ldr	r3, [r7, #16]
 80080c0:	3b01      	subs	r3, #1
 80080c2:	613b      	str	r3, [r7, #16]
 80080c4:	693b      	ldr	r3, [r7, #16]
 80080c6:	2b01      	cmp	r3, #1
 80080c8:	d8eb      	bhi.n	80080a2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80080ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80080cc:	4618      	mov	r0, r3
 80080ce:	3718      	adds	r7, #24
 80080d0:	46bd      	mov	sp, r7
 80080d2:	bd80      	pop	{r7, pc}

080080d4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80080d4:	b580      	push	{r7, lr}
 80080d6:	b084      	sub	sp, #16
 80080d8:	af00      	add	r7, sp, #0
 80080da:	6078      	str	r0, [r7, #4]
 80080dc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80080de:	2300      	movs	r3, #0
 80080e0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080e6:	683a      	ldr	r2, [r7, #0]
 80080e8:	429a      	cmp	r2, r3
 80080ea:	d01b      	beq.n	8008124 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80080ec:	6878      	ldr	r0, [r7, #4]
 80080ee:	f7ff ffad 	bl	800804c <sync_window>
 80080f2:	4603      	mov	r3, r0
 80080f4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80080f6:	7bfb      	ldrb	r3, [r7, #15]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d113      	bne.n	8008124 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	7858      	ldrb	r0, [r3, #1]
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8008106:	2301      	movs	r3, #1
 8008108:	683a      	ldr	r2, [r7, #0]
 800810a:	f7ff fca3 	bl	8007a54 <disk_read>
 800810e:	4603      	mov	r3, r0
 8008110:	2b00      	cmp	r3, #0
 8008112:	d004      	beq.n	800811e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8008114:	f04f 33ff 	mov.w	r3, #4294967295
 8008118:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800811a:	2301      	movs	r3, #1
 800811c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	683a      	ldr	r2, [r7, #0]
 8008122:	631a      	str	r2, [r3, #48]	@ 0x30
		}
	}
	return res;
 8008124:	7bfb      	ldrb	r3, [r7, #15]
}
 8008126:	4618      	mov	r0, r3
 8008128:	3710      	adds	r7, #16
 800812a:	46bd      	mov	sp, r7
 800812c:	bd80      	pop	{r7, pc}
	...

08008130 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8008130:	b580      	push	{r7, lr}
 8008132:	b084      	sub	sp, #16
 8008134:	af00      	add	r7, sp, #0
 8008136:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8008138:	6878      	ldr	r0, [r7, #4]
 800813a:	f7ff ff87 	bl	800804c <sync_window>
 800813e:	4603      	mov	r3, r0
 8008140:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8008142:	7bfb      	ldrb	r3, [r7, #15]
 8008144:	2b00      	cmp	r3, #0
 8008146:	d158      	bne.n	80081fa <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	781b      	ldrb	r3, [r3, #0]
 800814c:	2b03      	cmp	r3, #3
 800814e:	d148      	bne.n	80081e2 <sync_fs+0xb2>
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	791b      	ldrb	r3, [r3, #4]
 8008154:	2b01      	cmp	r3, #1
 8008156:	d144      	bne.n	80081e2 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	3334      	adds	r3, #52	@ 0x34
 800815c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008160:	2100      	movs	r1, #0
 8008162:	4618      	mov	r0, r3
 8008164:	f7ff fd78 	bl	8007c58 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	3334      	adds	r3, #52	@ 0x34
 800816c:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8008170:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8008174:	4618      	mov	r0, r3
 8008176:	f7ff fd07 	bl	8007b88 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	3334      	adds	r3, #52	@ 0x34
 800817e:	4921      	ldr	r1, [pc, #132]	@ (8008204 <sync_fs+0xd4>)
 8008180:	4618      	mov	r0, r3
 8008182:	f7ff fd1c 	bl	8007bbe <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	3334      	adds	r3, #52	@ 0x34
 800818a:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800818e:	491e      	ldr	r1, [pc, #120]	@ (8008208 <sync_fs+0xd8>)
 8008190:	4618      	mov	r0, r3
 8008192:	f7ff fd14 	bl	8007bbe <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	3334      	adds	r3, #52	@ 0x34
 800819a:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	695b      	ldr	r3, [r3, #20]
 80081a2:	4619      	mov	r1, r3
 80081a4:	4610      	mov	r0, r2
 80081a6:	f7ff fd0a 	bl	8007bbe <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	3334      	adds	r3, #52	@ 0x34
 80081ae:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	691b      	ldr	r3, [r3, #16]
 80081b6:	4619      	mov	r1, r3
 80081b8:	4610      	mov	r0, r2
 80081ba:	f7ff fd00 	bl	8007bbe <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	6a1b      	ldr	r3, [r3, #32]
 80081c2:	1c5a      	adds	r2, r3, #1
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	631a      	str	r2, [r3, #48]	@ 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	7858      	ldrb	r0, [r3, #1]
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80081d6:	2301      	movs	r3, #1
 80081d8:	f7ff fc5c 	bl	8007a94 <disk_write>
			fs->fsi_flag = 0;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2200      	movs	r2, #0
 80081e0:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	785b      	ldrb	r3, [r3, #1]
 80081e6:	2200      	movs	r2, #0
 80081e8:	2100      	movs	r1, #0
 80081ea:	4618      	mov	r0, r3
 80081ec:	f7ff fc72 	bl	8007ad4 <disk_ioctl>
 80081f0:	4603      	mov	r3, r0
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d001      	beq.n	80081fa <sync_fs+0xca>
 80081f6:	2301      	movs	r3, #1
 80081f8:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80081fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80081fc:	4618      	mov	r0, r3
 80081fe:	3710      	adds	r7, #16
 8008200:	46bd      	mov	sp, r7
 8008202:	bd80      	pop	{r7, pc}
 8008204:	41615252 	.word	0x41615252
 8008208:	61417272 	.word	0x61417272

0800820c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800820c:	b480      	push	{r7}
 800820e:	b083      	sub	sp, #12
 8008210:	af00      	add	r7, sp, #0
 8008212:	6078      	str	r0, [r7, #4]
 8008214:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8008216:	683b      	ldr	r3, [r7, #0]
 8008218:	3b02      	subs	r3, #2
 800821a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	699b      	ldr	r3, [r3, #24]
 8008220:	3b02      	subs	r3, #2
 8008222:	683a      	ldr	r2, [r7, #0]
 8008224:	429a      	cmp	r2, r3
 8008226:	d301      	bcc.n	800822c <clust2sect+0x20>
 8008228:	2300      	movs	r3, #0
 800822a:	e008      	b.n	800823e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	895b      	ldrh	r3, [r3, #10]
 8008230:	461a      	mov	r2, r3
 8008232:	683b      	ldr	r3, [r7, #0]
 8008234:	fb03 f202 	mul.w	r2, r3, r2
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800823c:	4413      	add	r3, r2
}
 800823e:	4618      	mov	r0, r3
 8008240:	370c      	adds	r7, #12
 8008242:	46bd      	mov	sp, r7
 8008244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008248:	4770      	bx	lr

0800824a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800824a:	b580      	push	{r7, lr}
 800824c:	b086      	sub	sp, #24
 800824e:	af00      	add	r7, sp, #0
 8008250:	6078      	str	r0, [r7, #4]
 8008252:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800825a:	683b      	ldr	r3, [r7, #0]
 800825c:	2b01      	cmp	r3, #1
 800825e:	d904      	bls.n	800826a <get_fat+0x20>
 8008260:	693b      	ldr	r3, [r7, #16]
 8008262:	699b      	ldr	r3, [r3, #24]
 8008264:	683a      	ldr	r2, [r7, #0]
 8008266:	429a      	cmp	r2, r3
 8008268:	d302      	bcc.n	8008270 <get_fat+0x26>
		val = 1;	/* Internal error */
 800826a:	2301      	movs	r3, #1
 800826c:	617b      	str	r3, [r7, #20]
 800826e:	e08e      	b.n	800838e <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8008270:	f04f 33ff 	mov.w	r3, #4294967295
 8008274:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8008276:	693b      	ldr	r3, [r7, #16]
 8008278:	781b      	ldrb	r3, [r3, #0]
 800827a:	2b03      	cmp	r3, #3
 800827c:	d061      	beq.n	8008342 <get_fat+0xf8>
 800827e:	2b03      	cmp	r3, #3
 8008280:	dc7b      	bgt.n	800837a <get_fat+0x130>
 8008282:	2b01      	cmp	r3, #1
 8008284:	d002      	beq.n	800828c <get_fat+0x42>
 8008286:	2b02      	cmp	r3, #2
 8008288:	d041      	beq.n	800830e <get_fat+0xc4>
 800828a:	e076      	b.n	800837a <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800828c:	683b      	ldr	r3, [r7, #0]
 800828e:	60fb      	str	r3, [r7, #12]
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	085b      	lsrs	r3, r3, #1
 8008294:	68fa      	ldr	r2, [r7, #12]
 8008296:	4413      	add	r3, r2
 8008298:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800829a:	693b      	ldr	r3, [r7, #16]
 800829c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	0a5b      	lsrs	r3, r3, #9
 80082a2:	4413      	add	r3, r2
 80082a4:	4619      	mov	r1, r3
 80082a6:	6938      	ldr	r0, [r7, #16]
 80082a8:	f7ff ff14 	bl	80080d4 <move_window>
 80082ac:	4603      	mov	r3, r0
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d166      	bne.n	8008380 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	1c5a      	adds	r2, r3, #1
 80082b6:	60fa      	str	r2, [r7, #12]
 80082b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082bc:	693a      	ldr	r2, [r7, #16]
 80082be:	4413      	add	r3, r2
 80082c0:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80082c4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80082c6:	693b      	ldr	r3, [r7, #16]
 80082c8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	0a5b      	lsrs	r3, r3, #9
 80082ce:	4413      	add	r3, r2
 80082d0:	4619      	mov	r1, r3
 80082d2:	6938      	ldr	r0, [r7, #16]
 80082d4:	f7ff fefe 	bl	80080d4 <move_window>
 80082d8:	4603      	mov	r3, r0
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d152      	bne.n	8008384 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082e4:	693a      	ldr	r2, [r7, #16]
 80082e6:	4413      	add	r3, r2
 80082e8:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80082ec:	021b      	lsls	r3, r3, #8
 80082ee:	68ba      	ldr	r2, [r7, #8]
 80082f0:	4313      	orrs	r3, r2
 80082f2:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80082f4:	683b      	ldr	r3, [r7, #0]
 80082f6:	f003 0301 	and.w	r3, r3, #1
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d002      	beq.n	8008304 <get_fat+0xba>
 80082fe:	68bb      	ldr	r3, [r7, #8]
 8008300:	091b      	lsrs	r3, r3, #4
 8008302:	e002      	b.n	800830a <get_fat+0xc0>
 8008304:	68bb      	ldr	r3, [r7, #8]
 8008306:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800830a:	617b      	str	r3, [r7, #20]
			break;
 800830c:	e03f      	b.n	800838e <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800830e:	693b      	ldr	r3, [r7, #16]
 8008310:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008312:	683b      	ldr	r3, [r7, #0]
 8008314:	0a1b      	lsrs	r3, r3, #8
 8008316:	4413      	add	r3, r2
 8008318:	4619      	mov	r1, r3
 800831a:	6938      	ldr	r0, [r7, #16]
 800831c:	f7ff feda 	bl	80080d4 <move_window>
 8008320:	4603      	mov	r3, r0
 8008322:	2b00      	cmp	r3, #0
 8008324:	d130      	bne.n	8008388 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8008326:	693b      	ldr	r3, [r7, #16]
 8008328:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800832c:	683b      	ldr	r3, [r7, #0]
 800832e:	005b      	lsls	r3, r3, #1
 8008330:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8008334:	4413      	add	r3, r2
 8008336:	4618      	mov	r0, r3
 8008338:	f7ff fbea 	bl	8007b10 <ld_word>
 800833c:	4603      	mov	r3, r0
 800833e:	617b      	str	r3, [r7, #20]
			break;
 8008340:	e025      	b.n	800838e <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008342:	693b      	ldr	r3, [r7, #16]
 8008344:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008346:	683b      	ldr	r3, [r7, #0]
 8008348:	09db      	lsrs	r3, r3, #7
 800834a:	4413      	add	r3, r2
 800834c:	4619      	mov	r1, r3
 800834e:	6938      	ldr	r0, [r7, #16]
 8008350:	f7ff fec0 	bl	80080d4 <move_window>
 8008354:	4603      	mov	r3, r0
 8008356:	2b00      	cmp	r3, #0
 8008358:	d118      	bne.n	800838c <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800835a:	693b      	ldr	r3, [r7, #16]
 800835c:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8008360:	683b      	ldr	r3, [r7, #0]
 8008362:	009b      	lsls	r3, r3, #2
 8008364:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8008368:	4413      	add	r3, r2
 800836a:	4618      	mov	r0, r3
 800836c:	f7ff fbe9 	bl	8007b42 <ld_dword>
 8008370:	4603      	mov	r3, r0
 8008372:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8008376:	617b      	str	r3, [r7, #20]
			break;
 8008378:	e009      	b.n	800838e <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800837a:	2301      	movs	r3, #1
 800837c:	617b      	str	r3, [r7, #20]
 800837e:	e006      	b.n	800838e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008380:	bf00      	nop
 8008382:	e004      	b.n	800838e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008384:	bf00      	nop
 8008386:	e002      	b.n	800838e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008388:	bf00      	nop
 800838a:	e000      	b.n	800838e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800838c:	bf00      	nop
		}
	}

	return val;
 800838e:	697b      	ldr	r3, [r7, #20]
}
 8008390:	4618      	mov	r0, r3
 8008392:	3718      	adds	r7, #24
 8008394:	46bd      	mov	sp, r7
 8008396:	bd80      	pop	{r7, pc}

08008398 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8008398:	b590      	push	{r4, r7, lr}
 800839a:	b089      	sub	sp, #36	@ 0x24
 800839c:	af00      	add	r7, sp, #0
 800839e:	60f8      	str	r0, [r7, #12]
 80083a0:	60b9      	str	r1, [r7, #8]
 80083a2:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80083a4:	2302      	movs	r3, #2
 80083a6:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80083a8:	68bb      	ldr	r3, [r7, #8]
 80083aa:	2b01      	cmp	r3, #1
 80083ac:	f240 80d9 	bls.w	8008562 <put_fat+0x1ca>
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	699b      	ldr	r3, [r3, #24]
 80083b4:	68ba      	ldr	r2, [r7, #8]
 80083b6:	429a      	cmp	r2, r3
 80083b8:	f080 80d3 	bcs.w	8008562 <put_fat+0x1ca>
		switch (fs->fs_type) {
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	781b      	ldrb	r3, [r3, #0]
 80083c0:	2b03      	cmp	r3, #3
 80083c2:	f000 8096 	beq.w	80084f2 <put_fat+0x15a>
 80083c6:	2b03      	cmp	r3, #3
 80083c8:	f300 80cb 	bgt.w	8008562 <put_fat+0x1ca>
 80083cc:	2b01      	cmp	r3, #1
 80083ce:	d002      	beq.n	80083d6 <put_fat+0x3e>
 80083d0:	2b02      	cmp	r3, #2
 80083d2:	d06e      	beq.n	80084b2 <put_fat+0x11a>
 80083d4:	e0c5      	b.n	8008562 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80083d6:	68bb      	ldr	r3, [r7, #8]
 80083d8:	61bb      	str	r3, [r7, #24]
 80083da:	69bb      	ldr	r3, [r7, #24]
 80083dc:	085b      	lsrs	r3, r3, #1
 80083de:	69ba      	ldr	r2, [r7, #24]
 80083e0:	4413      	add	r3, r2
 80083e2:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80083e8:	69bb      	ldr	r3, [r7, #24]
 80083ea:	0a5b      	lsrs	r3, r3, #9
 80083ec:	4413      	add	r3, r2
 80083ee:	4619      	mov	r1, r3
 80083f0:	68f8      	ldr	r0, [r7, #12]
 80083f2:	f7ff fe6f 	bl	80080d4 <move_window>
 80083f6:	4603      	mov	r3, r0
 80083f8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80083fa:	7ffb      	ldrb	r3, [r7, #31]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	f040 80a9 	bne.w	8008554 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8008408:	69bb      	ldr	r3, [r7, #24]
 800840a:	1c59      	adds	r1, r3, #1
 800840c:	61b9      	str	r1, [r7, #24]
 800840e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008412:	4413      	add	r3, r2
 8008414:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8008416:	68bb      	ldr	r3, [r7, #8]
 8008418:	f003 0301 	and.w	r3, r3, #1
 800841c:	2b00      	cmp	r3, #0
 800841e:	d00d      	beq.n	800843c <put_fat+0xa4>
 8008420:	697b      	ldr	r3, [r7, #20]
 8008422:	781b      	ldrb	r3, [r3, #0]
 8008424:	b25b      	sxtb	r3, r3
 8008426:	f003 030f 	and.w	r3, r3, #15
 800842a:	b25a      	sxtb	r2, r3
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	b25b      	sxtb	r3, r3
 8008430:	011b      	lsls	r3, r3, #4
 8008432:	b25b      	sxtb	r3, r3
 8008434:	4313      	orrs	r3, r2
 8008436:	b25b      	sxtb	r3, r3
 8008438:	b2db      	uxtb	r3, r3
 800843a:	e001      	b.n	8008440 <put_fat+0xa8>
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	b2db      	uxtb	r3, r3
 8008440:	697a      	ldr	r2, [r7, #20]
 8008442:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	2201      	movs	r2, #1
 8008448:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800844e:	69bb      	ldr	r3, [r7, #24]
 8008450:	0a5b      	lsrs	r3, r3, #9
 8008452:	4413      	add	r3, r2
 8008454:	4619      	mov	r1, r3
 8008456:	68f8      	ldr	r0, [r7, #12]
 8008458:	f7ff fe3c 	bl	80080d4 <move_window>
 800845c:	4603      	mov	r3, r0
 800845e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008460:	7ffb      	ldrb	r3, [r7, #31]
 8008462:	2b00      	cmp	r3, #0
 8008464:	d178      	bne.n	8008558 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800846c:	69bb      	ldr	r3, [r7, #24]
 800846e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008472:	4413      	add	r3, r2
 8008474:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8008476:	68bb      	ldr	r3, [r7, #8]
 8008478:	f003 0301 	and.w	r3, r3, #1
 800847c:	2b00      	cmp	r3, #0
 800847e:	d003      	beq.n	8008488 <put_fat+0xf0>
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	091b      	lsrs	r3, r3, #4
 8008484:	b2db      	uxtb	r3, r3
 8008486:	e00e      	b.n	80084a6 <put_fat+0x10e>
 8008488:	697b      	ldr	r3, [r7, #20]
 800848a:	781b      	ldrb	r3, [r3, #0]
 800848c:	b25b      	sxtb	r3, r3
 800848e:	f023 030f 	bic.w	r3, r3, #15
 8008492:	b25a      	sxtb	r2, r3
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	0a1b      	lsrs	r3, r3, #8
 8008498:	b25b      	sxtb	r3, r3
 800849a:	f003 030f 	and.w	r3, r3, #15
 800849e:	b25b      	sxtb	r3, r3
 80084a0:	4313      	orrs	r3, r2
 80084a2:	b25b      	sxtb	r3, r3
 80084a4:	b2db      	uxtb	r3, r3
 80084a6:	697a      	ldr	r2, [r7, #20]
 80084a8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	2201      	movs	r2, #1
 80084ae:	70da      	strb	r2, [r3, #3]
			break;
 80084b0:	e057      	b.n	8008562 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80084b6:	68bb      	ldr	r3, [r7, #8]
 80084b8:	0a1b      	lsrs	r3, r3, #8
 80084ba:	4413      	add	r3, r2
 80084bc:	4619      	mov	r1, r3
 80084be:	68f8      	ldr	r0, [r7, #12]
 80084c0:	f7ff fe08 	bl	80080d4 <move_window>
 80084c4:	4603      	mov	r3, r0
 80084c6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80084c8:	7ffb      	ldrb	r3, [r7, #31]
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d146      	bne.n	800855c <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80084d4:	68bb      	ldr	r3, [r7, #8]
 80084d6:	005b      	lsls	r3, r3, #1
 80084d8:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 80084dc:	4413      	add	r3, r2
 80084de:	687a      	ldr	r2, [r7, #4]
 80084e0:	b292      	uxth	r2, r2
 80084e2:	4611      	mov	r1, r2
 80084e4:	4618      	mov	r0, r3
 80084e6:	f7ff fb4f 	bl	8007b88 <st_word>
			fs->wflag = 1;
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	2201      	movs	r2, #1
 80084ee:	70da      	strb	r2, [r3, #3]
			break;
 80084f0:	e037      	b.n	8008562 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80084f6:	68bb      	ldr	r3, [r7, #8]
 80084f8:	09db      	lsrs	r3, r3, #7
 80084fa:	4413      	add	r3, r2
 80084fc:	4619      	mov	r1, r3
 80084fe:	68f8      	ldr	r0, [r7, #12]
 8008500:	f7ff fde8 	bl	80080d4 <move_window>
 8008504:	4603      	mov	r3, r0
 8008506:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008508:	7ffb      	ldrb	r3, [r7, #31]
 800850a:	2b00      	cmp	r3, #0
 800850c:	d128      	bne.n	8008560 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800851a:	68bb      	ldr	r3, [r7, #8]
 800851c:	009b      	lsls	r3, r3, #2
 800851e:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8008522:	4413      	add	r3, r2
 8008524:	4618      	mov	r0, r3
 8008526:	f7ff fb0c 	bl	8007b42 <ld_dword>
 800852a:	4603      	mov	r3, r0
 800852c:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8008530:	4323      	orrs	r3, r4
 8008532:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800853a:	68bb      	ldr	r3, [r7, #8]
 800853c:	009b      	lsls	r3, r3, #2
 800853e:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8008542:	4413      	add	r3, r2
 8008544:	6879      	ldr	r1, [r7, #4]
 8008546:	4618      	mov	r0, r3
 8008548:	f7ff fb39 	bl	8007bbe <st_dword>
			fs->wflag = 1;
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	2201      	movs	r2, #1
 8008550:	70da      	strb	r2, [r3, #3]
			break;
 8008552:	e006      	b.n	8008562 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8008554:	bf00      	nop
 8008556:	e004      	b.n	8008562 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8008558:	bf00      	nop
 800855a:	e002      	b.n	8008562 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800855c:	bf00      	nop
 800855e:	e000      	b.n	8008562 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8008560:	bf00      	nop
		}
	}
	return res;
 8008562:	7ffb      	ldrb	r3, [r7, #31]
}
 8008564:	4618      	mov	r0, r3
 8008566:	3724      	adds	r7, #36	@ 0x24
 8008568:	46bd      	mov	sp, r7
 800856a:	bd90      	pop	{r4, r7, pc}

0800856c <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800856c:	b580      	push	{r7, lr}
 800856e:	b088      	sub	sp, #32
 8008570:	af00      	add	r7, sp, #0
 8008572:	60f8      	str	r0, [r7, #12]
 8008574:	60b9      	str	r1, [r7, #8]
 8008576:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8008578:	2300      	movs	r3, #0
 800857a:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8008582:	68bb      	ldr	r3, [r7, #8]
 8008584:	2b01      	cmp	r3, #1
 8008586:	d904      	bls.n	8008592 <remove_chain+0x26>
 8008588:	69bb      	ldr	r3, [r7, #24]
 800858a:	699b      	ldr	r3, [r3, #24]
 800858c:	68ba      	ldr	r2, [r7, #8]
 800858e:	429a      	cmp	r2, r3
 8008590:	d301      	bcc.n	8008596 <remove_chain+0x2a>
 8008592:	2302      	movs	r3, #2
 8008594:	e04b      	b.n	800862e <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	2b00      	cmp	r3, #0
 800859a:	d00c      	beq.n	80085b6 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800859c:	f04f 32ff 	mov.w	r2, #4294967295
 80085a0:	6879      	ldr	r1, [r7, #4]
 80085a2:	69b8      	ldr	r0, [r7, #24]
 80085a4:	f7ff fef8 	bl	8008398 <put_fat>
 80085a8:	4603      	mov	r3, r0
 80085aa:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80085ac:	7ffb      	ldrb	r3, [r7, #31]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d001      	beq.n	80085b6 <remove_chain+0x4a>
 80085b2:	7ffb      	ldrb	r3, [r7, #31]
 80085b4:	e03b      	b.n	800862e <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80085b6:	68b9      	ldr	r1, [r7, #8]
 80085b8:	68f8      	ldr	r0, [r7, #12]
 80085ba:	f7ff fe46 	bl	800824a <get_fat>
 80085be:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80085c0:	697b      	ldr	r3, [r7, #20]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d031      	beq.n	800862a <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80085c6:	697b      	ldr	r3, [r7, #20]
 80085c8:	2b01      	cmp	r3, #1
 80085ca:	d101      	bne.n	80085d0 <remove_chain+0x64>
 80085cc:	2302      	movs	r3, #2
 80085ce:	e02e      	b.n	800862e <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80085d0:	697b      	ldr	r3, [r7, #20]
 80085d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085d6:	d101      	bne.n	80085dc <remove_chain+0x70>
 80085d8:	2301      	movs	r3, #1
 80085da:	e028      	b.n	800862e <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80085dc:	2200      	movs	r2, #0
 80085de:	68b9      	ldr	r1, [r7, #8]
 80085e0:	69b8      	ldr	r0, [r7, #24]
 80085e2:	f7ff fed9 	bl	8008398 <put_fat>
 80085e6:	4603      	mov	r3, r0
 80085e8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80085ea:	7ffb      	ldrb	r3, [r7, #31]
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d001      	beq.n	80085f4 <remove_chain+0x88>
 80085f0:	7ffb      	ldrb	r3, [r7, #31]
 80085f2:	e01c      	b.n	800862e <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80085f4:	69bb      	ldr	r3, [r7, #24]
 80085f6:	695a      	ldr	r2, [r3, #20]
 80085f8:	69bb      	ldr	r3, [r7, #24]
 80085fa:	699b      	ldr	r3, [r3, #24]
 80085fc:	3b02      	subs	r3, #2
 80085fe:	429a      	cmp	r2, r3
 8008600:	d20b      	bcs.n	800861a <remove_chain+0xae>
			fs->free_clst++;
 8008602:	69bb      	ldr	r3, [r7, #24]
 8008604:	695b      	ldr	r3, [r3, #20]
 8008606:	1c5a      	adds	r2, r3, #1
 8008608:	69bb      	ldr	r3, [r7, #24]
 800860a:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800860c:	69bb      	ldr	r3, [r7, #24]
 800860e:	791b      	ldrb	r3, [r3, #4]
 8008610:	f043 0301 	orr.w	r3, r3, #1
 8008614:	b2da      	uxtb	r2, r3
 8008616:	69bb      	ldr	r3, [r7, #24]
 8008618:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800861a:	697b      	ldr	r3, [r7, #20]
 800861c:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800861e:	69bb      	ldr	r3, [r7, #24]
 8008620:	699b      	ldr	r3, [r3, #24]
 8008622:	68ba      	ldr	r2, [r7, #8]
 8008624:	429a      	cmp	r2, r3
 8008626:	d3c6      	bcc.n	80085b6 <remove_chain+0x4a>
 8008628:	e000      	b.n	800862c <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800862a:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800862c:	2300      	movs	r3, #0
}
 800862e:	4618      	mov	r0, r3
 8008630:	3720      	adds	r7, #32
 8008632:	46bd      	mov	sp, r7
 8008634:	bd80      	pop	{r7, pc}

08008636 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8008636:	b580      	push	{r7, lr}
 8008638:	b088      	sub	sp, #32
 800863a:	af00      	add	r7, sp, #0
 800863c:	6078      	str	r0, [r7, #4]
 800863e:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8008646:	683b      	ldr	r3, [r7, #0]
 8008648:	2b00      	cmp	r3, #0
 800864a:	d10d      	bne.n	8008668 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800864c:	693b      	ldr	r3, [r7, #16]
 800864e:	691b      	ldr	r3, [r3, #16]
 8008650:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8008652:	69bb      	ldr	r3, [r7, #24]
 8008654:	2b00      	cmp	r3, #0
 8008656:	d004      	beq.n	8008662 <create_chain+0x2c>
 8008658:	693b      	ldr	r3, [r7, #16]
 800865a:	699b      	ldr	r3, [r3, #24]
 800865c:	69ba      	ldr	r2, [r7, #24]
 800865e:	429a      	cmp	r2, r3
 8008660:	d31b      	bcc.n	800869a <create_chain+0x64>
 8008662:	2301      	movs	r3, #1
 8008664:	61bb      	str	r3, [r7, #24]
 8008666:	e018      	b.n	800869a <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8008668:	6839      	ldr	r1, [r7, #0]
 800866a:	6878      	ldr	r0, [r7, #4]
 800866c:	f7ff fded 	bl	800824a <get_fat>
 8008670:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	2b01      	cmp	r3, #1
 8008676:	d801      	bhi.n	800867c <create_chain+0x46>
 8008678:	2301      	movs	r3, #1
 800867a:	e070      	b.n	800875e <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008682:	d101      	bne.n	8008688 <create_chain+0x52>
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	e06a      	b.n	800875e <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8008688:	693b      	ldr	r3, [r7, #16]
 800868a:	699b      	ldr	r3, [r3, #24]
 800868c:	68fa      	ldr	r2, [r7, #12]
 800868e:	429a      	cmp	r2, r3
 8008690:	d201      	bcs.n	8008696 <create_chain+0x60>
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	e063      	b.n	800875e <create_chain+0x128>
		scl = clst;
 8008696:	683b      	ldr	r3, [r7, #0]
 8008698:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800869a:	69bb      	ldr	r3, [r7, #24]
 800869c:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800869e:	69fb      	ldr	r3, [r7, #28]
 80086a0:	3301      	adds	r3, #1
 80086a2:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80086a4:	693b      	ldr	r3, [r7, #16]
 80086a6:	699b      	ldr	r3, [r3, #24]
 80086a8:	69fa      	ldr	r2, [r7, #28]
 80086aa:	429a      	cmp	r2, r3
 80086ac:	d307      	bcc.n	80086be <create_chain+0x88>
				ncl = 2;
 80086ae:	2302      	movs	r3, #2
 80086b0:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80086b2:	69fa      	ldr	r2, [r7, #28]
 80086b4:	69bb      	ldr	r3, [r7, #24]
 80086b6:	429a      	cmp	r2, r3
 80086b8:	d901      	bls.n	80086be <create_chain+0x88>
 80086ba:	2300      	movs	r3, #0
 80086bc:	e04f      	b.n	800875e <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80086be:	69f9      	ldr	r1, [r7, #28]
 80086c0:	6878      	ldr	r0, [r7, #4]
 80086c2:	f7ff fdc2 	bl	800824a <get_fat>
 80086c6:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d00e      	beq.n	80086ec <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	2b01      	cmp	r3, #1
 80086d2:	d003      	beq.n	80086dc <create_chain+0xa6>
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086da:	d101      	bne.n	80086e0 <create_chain+0xaa>
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	e03e      	b.n	800875e <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80086e0:	69fa      	ldr	r2, [r7, #28]
 80086e2:	69bb      	ldr	r3, [r7, #24]
 80086e4:	429a      	cmp	r2, r3
 80086e6:	d1da      	bne.n	800869e <create_chain+0x68>
 80086e8:	2300      	movs	r3, #0
 80086ea:	e038      	b.n	800875e <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80086ec:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80086ee:	f04f 32ff 	mov.w	r2, #4294967295
 80086f2:	69f9      	ldr	r1, [r7, #28]
 80086f4:	6938      	ldr	r0, [r7, #16]
 80086f6:	f7ff fe4f 	bl	8008398 <put_fat>
 80086fa:	4603      	mov	r3, r0
 80086fc:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80086fe:	7dfb      	ldrb	r3, [r7, #23]
 8008700:	2b00      	cmp	r3, #0
 8008702:	d109      	bne.n	8008718 <create_chain+0xe2>
 8008704:	683b      	ldr	r3, [r7, #0]
 8008706:	2b00      	cmp	r3, #0
 8008708:	d006      	beq.n	8008718 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800870a:	69fa      	ldr	r2, [r7, #28]
 800870c:	6839      	ldr	r1, [r7, #0]
 800870e:	6938      	ldr	r0, [r7, #16]
 8008710:	f7ff fe42 	bl	8008398 <put_fat>
 8008714:	4603      	mov	r3, r0
 8008716:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8008718:	7dfb      	ldrb	r3, [r7, #23]
 800871a:	2b00      	cmp	r3, #0
 800871c:	d116      	bne.n	800874c <create_chain+0x116>
		fs->last_clst = ncl;
 800871e:	693b      	ldr	r3, [r7, #16]
 8008720:	69fa      	ldr	r2, [r7, #28]
 8008722:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8008724:	693b      	ldr	r3, [r7, #16]
 8008726:	695a      	ldr	r2, [r3, #20]
 8008728:	693b      	ldr	r3, [r7, #16]
 800872a:	699b      	ldr	r3, [r3, #24]
 800872c:	3b02      	subs	r3, #2
 800872e:	429a      	cmp	r2, r3
 8008730:	d804      	bhi.n	800873c <create_chain+0x106>
 8008732:	693b      	ldr	r3, [r7, #16]
 8008734:	695b      	ldr	r3, [r3, #20]
 8008736:	1e5a      	subs	r2, r3, #1
 8008738:	693b      	ldr	r3, [r7, #16]
 800873a:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800873c:	693b      	ldr	r3, [r7, #16]
 800873e:	791b      	ldrb	r3, [r3, #4]
 8008740:	f043 0301 	orr.w	r3, r3, #1
 8008744:	b2da      	uxtb	r2, r3
 8008746:	693b      	ldr	r3, [r7, #16]
 8008748:	711a      	strb	r2, [r3, #4]
 800874a:	e007      	b.n	800875c <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800874c:	7dfb      	ldrb	r3, [r7, #23]
 800874e:	2b01      	cmp	r3, #1
 8008750:	d102      	bne.n	8008758 <create_chain+0x122>
 8008752:	f04f 33ff 	mov.w	r3, #4294967295
 8008756:	e000      	b.n	800875a <create_chain+0x124>
 8008758:	2301      	movs	r3, #1
 800875a:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800875c:	69fb      	ldr	r3, [r7, #28]
}
 800875e:	4618      	mov	r0, r3
 8008760:	3720      	adds	r7, #32
 8008762:	46bd      	mov	sp, r7
 8008764:	bd80      	pop	{r7, pc}

08008766 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8008766:	b480      	push	{r7}
 8008768:	b087      	sub	sp, #28
 800876a:	af00      	add	r7, sp, #0
 800876c:	6078      	str	r0, [r7, #4]
 800876e:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800877a:	3304      	adds	r3, #4
 800877c:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800877e:	683b      	ldr	r3, [r7, #0]
 8008780:	0a5b      	lsrs	r3, r3, #9
 8008782:	68fa      	ldr	r2, [r7, #12]
 8008784:	8952      	ldrh	r2, [r2, #10]
 8008786:	fbb3 f3f2 	udiv	r3, r3, r2
 800878a:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800878c:	693b      	ldr	r3, [r7, #16]
 800878e:	1d1a      	adds	r2, r3, #4
 8008790:	613a      	str	r2, [r7, #16]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8008796:	68bb      	ldr	r3, [r7, #8]
 8008798:	2b00      	cmp	r3, #0
 800879a:	d101      	bne.n	80087a0 <clmt_clust+0x3a>
 800879c:	2300      	movs	r3, #0
 800879e:	e010      	b.n	80087c2 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 80087a0:	697a      	ldr	r2, [r7, #20]
 80087a2:	68bb      	ldr	r3, [r7, #8]
 80087a4:	429a      	cmp	r2, r3
 80087a6:	d307      	bcc.n	80087b8 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 80087a8:	697a      	ldr	r2, [r7, #20]
 80087aa:	68bb      	ldr	r3, [r7, #8]
 80087ac:	1ad3      	subs	r3, r2, r3
 80087ae:	617b      	str	r3, [r7, #20]
 80087b0:	693b      	ldr	r3, [r7, #16]
 80087b2:	3304      	adds	r3, #4
 80087b4:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80087b6:	e7e9      	b.n	800878c <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 80087b8:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80087ba:	693b      	ldr	r3, [r7, #16]
 80087bc:	681a      	ldr	r2, [r3, #0]
 80087be:	697b      	ldr	r3, [r7, #20]
 80087c0:	4413      	add	r3, r2
}
 80087c2:	4618      	mov	r0, r3
 80087c4:	371c      	adds	r7, #28
 80087c6:	46bd      	mov	sp, r7
 80087c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087cc:	4770      	bx	lr

080087ce <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80087ce:	b580      	push	{r7, lr}
 80087d0:	b086      	sub	sp, #24
 80087d2:	af00      	add	r7, sp, #0
 80087d4:	6078      	str	r0, [r7, #4]
 80087d6:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80087de:	683b      	ldr	r3, [r7, #0]
 80087e0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80087e4:	d204      	bcs.n	80087f0 <dir_sdi+0x22>
 80087e6:	683b      	ldr	r3, [r7, #0]
 80087e8:	f003 031f 	and.w	r3, r3, #31
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d001      	beq.n	80087f4 <dir_sdi+0x26>
		return FR_INT_ERR;
 80087f0:	2302      	movs	r3, #2
 80087f2:	e063      	b.n	80088bc <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	683a      	ldr	r2, [r7, #0]
 80087f8:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	689b      	ldr	r3, [r3, #8]
 80087fe:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8008800:	697b      	ldr	r3, [r7, #20]
 8008802:	2b00      	cmp	r3, #0
 8008804:	d106      	bne.n	8008814 <dir_sdi+0x46>
 8008806:	693b      	ldr	r3, [r7, #16]
 8008808:	781b      	ldrb	r3, [r3, #0]
 800880a:	2b02      	cmp	r3, #2
 800880c:	d902      	bls.n	8008814 <dir_sdi+0x46>
		clst = fs->dirbase;
 800880e:	693b      	ldr	r3, [r7, #16]
 8008810:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008812:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8008814:	697b      	ldr	r3, [r7, #20]
 8008816:	2b00      	cmp	r3, #0
 8008818:	d10c      	bne.n	8008834 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800881a:	683b      	ldr	r3, [r7, #0]
 800881c:	095b      	lsrs	r3, r3, #5
 800881e:	693a      	ldr	r2, [r7, #16]
 8008820:	8912      	ldrh	r2, [r2, #8]
 8008822:	4293      	cmp	r3, r2
 8008824:	d301      	bcc.n	800882a <dir_sdi+0x5c>
 8008826:	2302      	movs	r3, #2
 8008828:	e048      	b.n	80088bc <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800882a:	693b      	ldr	r3, [r7, #16]
 800882c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	61da      	str	r2, [r3, #28]
 8008832:	e029      	b.n	8008888 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8008834:	693b      	ldr	r3, [r7, #16]
 8008836:	895b      	ldrh	r3, [r3, #10]
 8008838:	025b      	lsls	r3, r3, #9
 800883a:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800883c:	e019      	b.n	8008872 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	6979      	ldr	r1, [r7, #20]
 8008842:	4618      	mov	r0, r3
 8008844:	f7ff fd01 	bl	800824a <get_fat>
 8008848:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800884a:	697b      	ldr	r3, [r7, #20]
 800884c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008850:	d101      	bne.n	8008856 <dir_sdi+0x88>
 8008852:	2301      	movs	r3, #1
 8008854:	e032      	b.n	80088bc <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8008856:	697b      	ldr	r3, [r7, #20]
 8008858:	2b01      	cmp	r3, #1
 800885a:	d904      	bls.n	8008866 <dir_sdi+0x98>
 800885c:	693b      	ldr	r3, [r7, #16]
 800885e:	699b      	ldr	r3, [r3, #24]
 8008860:	697a      	ldr	r2, [r7, #20]
 8008862:	429a      	cmp	r2, r3
 8008864:	d301      	bcc.n	800886a <dir_sdi+0x9c>
 8008866:	2302      	movs	r3, #2
 8008868:	e028      	b.n	80088bc <dir_sdi+0xee>
			ofs -= csz;
 800886a:	683a      	ldr	r2, [r7, #0]
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	1ad3      	subs	r3, r2, r3
 8008870:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008872:	683a      	ldr	r2, [r7, #0]
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	429a      	cmp	r2, r3
 8008878:	d2e1      	bcs.n	800883e <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800887a:	6979      	ldr	r1, [r7, #20]
 800887c:	6938      	ldr	r0, [r7, #16]
 800887e:	f7ff fcc5 	bl	800820c <clust2sect>
 8008882:	4602      	mov	r2, r0
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	697a      	ldr	r2, [r7, #20]
 800888c:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	69db      	ldr	r3, [r3, #28]
 8008892:	2b00      	cmp	r3, #0
 8008894:	d101      	bne.n	800889a <dir_sdi+0xcc>
 8008896:	2302      	movs	r3, #2
 8008898:	e010      	b.n	80088bc <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	69da      	ldr	r2, [r3, #28]
 800889e:	683b      	ldr	r3, [r7, #0]
 80088a0:	0a5b      	lsrs	r3, r3, #9
 80088a2:	441a      	add	r2, r3
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80088a8:	693b      	ldr	r3, [r7, #16]
 80088aa:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80088ae:	683b      	ldr	r3, [r7, #0]
 80088b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088b4:	441a      	add	r2, r3
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80088ba:	2300      	movs	r3, #0
}
 80088bc:	4618      	mov	r0, r3
 80088be:	3718      	adds	r7, #24
 80088c0:	46bd      	mov	sp, r7
 80088c2:	bd80      	pop	{r7, pc}

080088c4 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80088c4:	b580      	push	{r7, lr}
 80088c6:	b086      	sub	sp, #24
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	6078      	str	r0, [r7, #4]
 80088cc:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	695b      	ldr	r3, [r3, #20]
 80088d8:	3320      	adds	r3, #32
 80088da:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	69db      	ldr	r3, [r3, #28]
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d003      	beq.n	80088ec <dir_next+0x28>
 80088e4:	68bb      	ldr	r3, [r7, #8]
 80088e6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80088ea:	d301      	bcc.n	80088f0 <dir_next+0x2c>
 80088ec:	2304      	movs	r3, #4
 80088ee:	e0aa      	b.n	8008a46 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80088f0:	68bb      	ldr	r3, [r7, #8]
 80088f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	f040 8098 	bne.w	8008a2c <dir_next+0x168>
		dp->sect++;				/* Next sector */
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	69db      	ldr	r3, [r3, #28]
 8008900:	1c5a      	adds	r2, r3, #1
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	699b      	ldr	r3, [r3, #24]
 800890a:	2b00      	cmp	r3, #0
 800890c:	d10b      	bne.n	8008926 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800890e:	68bb      	ldr	r3, [r7, #8]
 8008910:	095b      	lsrs	r3, r3, #5
 8008912:	68fa      	ldr	r2, [r7, #12]
 8008914:	8912      	ldrh	r2, [r2, #8]
 8008916:	4293      	cmp	r3, r2
 8008918:	f0c0 8088 	bcc.w	8008a2c <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	2200      	movs	r2, #0
 8008920:	61da      	str	r2, [r3, #28]
 8008922:	2304      	movs	r3, #4
 8008924:	e08f      	b.n	8008a46 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8008926:	68bb      	ldr	r3, [r7, #8]
 8008928:	0a5b      	lsrs	r3, r3, #9
 800892a:	68fa      	ldr	r2, [r7, #12]
 800892c:	8952      	ldrh	r2, [r2, #10]
 800892e:	3a01      	subs	r2, #1
 8008930:	4013      	ands	r3, r2
 8008932:	2b00      	cmp	r3, #0
 8008934:	d17a      	bne.n	8008a2c <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8008936:	687a      	ldr	r2, [r7, #4]
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	699b      	ldr	r3, [r3, #24]
 800893c:	4619      	mov	r1, r3
 800893e:	4610      	mov	r0, r2
 8008940:	f7ff fc83 	bl	800824a <get_fat>
 8008944:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8008946:	697b      	ldr	r3, [r7, #20]
 8008948:	2b01      	cmp	r3, #1
 800894a:	d801      	bhi.n	8008950 <dir_next+0x8c>
 800894c:	2302      	movs	r3, #2
 800894e:	e07a      	b.n	8008a46 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8008950:	697b      	ldr	r3, [r7, #20]
 8008952:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008956:	d101      	bne.n	800895c <dir_next+0x98>
 8008958:	2301      	movs	r3, #1
 800895a:	e074      	b.n	8008a46 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	699b      	ldr	r3, [r3, #24]
 8008960:	697a      	ldr	r2, [r7, #20]
 8008962:	429a      	cmp	r2, r3
 8008964:	d358      	bcc.n	8008a18 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8008966:	683b      	ldr	r3, [r7, #0]
 8008968:	2b00      	cmp	r3, #0
 800896a:	d104      	bne.n	8008976 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	2200      	movs	r2, #0
 8008970:	61da      	str	r2, [r3, #28]
 8008972:	2304      	movs	r3, #4
 8008974:	e067      	b.n	8008a46 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8008976:	687a      	ldr	r2, [r7, #4]
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	699b      	ldr	r3, [r3, #24]
 800897c:	4619      	mov	r1, r3
 800897e:	4610      	mov	r0, r2
 8008980:	f7ff fe59 	bl	8008636 <create_chain>
 8008984:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8008986:	697b      	ldr	r3, [r7, #20]
 8008988:	2b00      	cmp	r3, #0
 800898a:	d101      	bne.n	8008990 <dir_next+0xcc>
 800898c:	2307      	movs	r3, #7
 800898e:	e05a      	b.n	8008a46 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8008990:	697b      	ldr	r3, [r7, #20]
 8008992:	2b01      	cmp	r3, #1
 8008994:	d101      	bne.n	800899a <dir_next+0xd6>
 8008996:	2302      	movs	r3, #2
 8008998:	e055      	b.n	8008a46 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800899a:	697b      	ldr	r3, [r7, #20]
 800899c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089a0:	d101      	bne.n	80089a6 <dir_next+0xe2>
 80089a2:	2301      	movs	r3, #1
 80089a4:	e04f      	b.n	8008a46 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80089a6:	68f8      	ldr	r0, [r7, #12]
 80089a8:	f7ff fb50 	bl	800804c <sync_window>
 80089ac:	4603      	mov	r3, r0
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d001      	beq.n	80089b6 <dir_next+0xf2>
 80089b2:	2301      	movs	r3, #1
 80089b4:	e047      	b.n	8008a46 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	3334      	adds	r3, #52	@ 0x34
 80089ba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80089be:	2100      	movs	r1, #0
 80089c0:	4618      	mov	r0, r3
 80089c2:	f7ff f949 	bl	8007c58 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80089c6:	2300      	movs	r3, #0
 80089c8:	613b      	str	r3, [r7, #16]
 80089ca:	6979      	ldr	r1, [r7, #20]
 80089cc:	68f8      	ldr	r0, [r7, #12]
 80089ce:	f7ff fc1d 	bl	800820c <clust2sect>
 80089d2:	4602      	mov	r2, r0
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	631a      	str	r2, [r3, #48]	@ 0x30
 80089d8:	e012      	b.n	8008a00 <dir_next+0x13c>
						fs->wflag = 1;
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	2201      	movs	r2, #1
 80089de:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80089e0:	68f8      	ldr	r0, [r7, #12]
 80089e2:	f7ff fb33 	bl	800804c <sync_window>
 80089e6:	4603      	mov	r3, r0
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d001      	beq.n	80089f0 <dir_next+0x12c>
 80089ec:	2301      	movs	r3, #1
 80089ee:	e02a      	b.n	8008a46 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80089f0:	693b      	ldr	r3, [r7, #16]
 80089f2:	3301      	adds	r3, #1
 80089f4:	613b      	str	r3, [r7, #16]
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80089fa:	1c5a      	adds	r2, r3, #1
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	631a      	str	r2, [r3, #48]	@ 0x30
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	895b      	ldrh	r3, [r3, #10]
 8008a04:	461a      	mov	r2, r3
 8008a06:	693b      	ldr	r3, [r7, #16]
 8008a08:	4293      	cmp	r3, r2
 8008a0a:	d3e6      	bcc.n	80089da <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008a10:	693b      	ldr	r3, [r7, #16]
 8008a12:	1ad2      	subs	r2, r2, r3
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	631a      	str	r2, [r3, #48]	@ 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	697a      	ldr	r2, [r7, #20]
 8008a1c:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8008a1e:	6979      	ldr	r1, [r7, #20]
 8008a20:	68f8      	ldr	r0, [r7, #12]
 8008a22:	f7ff fbf3 	bl	800820c <clust2sect>
 8008a26:	4602      	mov	r2, r0
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	68ba      	ldr	r2, [r7, #8]
 8008a30:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8008a38:	68bb      	ldr	r3, [r7, #8]
 8008a3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a3e:	441a      	add	r2, r3
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8008a44:	2300      	movs	r3, #0
}
 8008a46:	4618      	mov	r0, r3
 8008a48:	3718      	adds	r7, #24
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	bd80      	pop	{r7, pc}

08008a4e <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8008a4e:	b580      	push	{r7, lr}
 8008a50:	b086      	sub	sp, #24
 8008a52:	af00      	add	r7, sp, #0
 8008a54:	6078      	str	r0, [r7, #4]
 8008a56:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8008a5e:	2100      	movs	r1, #0
 8008a60:	6878      	ldr	r0, [r7, #4]
 8008a62:	f7ff feb4 	bl	80087ce <dir_sdi>
 8008a66:	4603      	mov	r3, r0
 8008a68:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008a6a:	7dfb      	ldrb	r3, [r7, #23]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d12b      	bne.n	8008ac8 <dir_alloc+0x7a>
		n = 0;
 8008a70:	2300      	movs	r3, #0
 8008a72:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	69db      	ldr	r3, [r3, #28]
 8008a78:	4619      	mov	r1, r3
 8008a7a:	68f8      	ldr	r0, [r7, #12]
 8008a7c:	f7ff fb2a 	bl	80080d4 <move_window>
 8008a80:	4603      	mov	r3, r0
 8008a82:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8008a84:	7dfb      	ldrb	r3, [r7, #23]
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d11d      	bne.n	8008ac6 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	6a1b      	ldr	r3, [r3, #32]
 8008a8e:	781b      	ldrb	r3, [r3, #0]
 8008a90:	2be5      	cmp	r3, #229	@ 0xe5
 8008a92:	d004      	beq.n	8008a9e <dir_alloc+0x50>
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	6a1b      	ldr	r3, [r3, #32]
 8008a98:	781b      	ldrb	r3, [r3, #0]
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d107      	bne.n	8008aae <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8008a9e:	693b      	ldr	r3, [r7, #16]
 8008aa0:	3301      	adds	r3, #1
 8008aa2:	613b      	str	r3, [r7, #16]
 8008aa4:	693a      	ldr	r2, [r7, #16]
 8008aa6:	683b      	ldr	r3, [r7, #0]
 8008aa8:	429a      	cmp	r2, r3
 8008aaa:	d102      	bne.n	8008ab2 <dir_alloc+0x64>
 8008aac:	e00c      	b.n	8008ac8 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8008aae:	2300      	movs	r3, #0
 8008ab0:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8008ab2:	2101      	movs	r1, #1
 8008ab4:	6878      	ldr	r0, [r7, #4]
 8008ab6:	f7ff ff05 	bl	80088c4 <dir_next>
 8008aba:	4603      	mov	r3, r0
 8008abc:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8008abe:	7dfb      	ldrb	r3, [r7, #23]
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d0d7      	beq.n	8008a74 <dir_alloc+0x26>
 8008ac4:	e000      	b.n	8008ac8 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8008ac6:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8008ac8:	7dfb      	ldrb	r3, [r7, #23]
 8008aca:	2b04      	cmp	r3, #4
 8008acc:	d101      	bne.n	8008ad2 <dir_alloc+0x84>
 8008ace:	2307      	movs	r3, #7
 8008ad0:	75fb      	strb	r3, [r7, #23]
	return res;
 8008ad2:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	3718      	adds	r7, #24
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	bd80      	pop	{r7, pc}

08008adc <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8008adc:	b580      	push	{r7, lr}
 8008ade:	b084      	sub	sp, #16
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	6078      	str	r0, [r7, #4]
 8008ae4:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8008ae6:	683b      	ldr	r3, [r7, #0]
 8008ae8:	331a      	adds	r3, #26
 8008aea:	4618      	mov	r0, r3
 8008aec:	f7ff f810 	bl	8007b10 <ld_word>
 8008af0:	4603      	mov	r3, r0
 8008af2:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	781b      	ldrb	r3, [r3, #0]
 8008af8:	2b03      	cmp	r3, #3
 8008afa:	d109      	bne.n	8008b10 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8008afc:	683b      	ldr	r3, [r7, #0]
 8008afe:	3314      	adds	r3, #20
 8008b00:	4618      	mov	r0, r3
 8008b02:	f7ff f805 	bl	8007b10 <ld_word>
 8008b06:	4603      	mov	r3, r0
 8008b08:	041b      	lsls	r3, r3, #16
 8008b0a:	68fa      	ldr	r2, [r7, #12]
 8008b0c:	4313      	orrs	r3, r2
 8008b0e:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8008b10:	68fb      	ldr	r3, [r7, #12]
}
 8008b12:	4618      	mov	r0, r3
 8008b14:	3710      	adds	r7, #16
 8008b16:	46bd      	mov	sp, r7
 8008b18:	bd80      	pop	{r7, pc}

08008b1a <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8008b1a:	b580      	push	{r7, lr}
 8008b1c:	b084      	sub	sp, #16
 8008b1e:	af00      	add	r7, sp, #0
 8008b20:	60f8      	str	r0, [r7, #12]
 8008b22:	60b9      	str	r1, [r7, #8]
 8008b24:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8008b26:	68bb      	ldr	r3, [r7, #8]
 8008b28:	331a      	adds	r3, #26
 8008b2a:	687a      	ldr	r2, [r7, #4]
 8008b2c:	b292      	uxth	r2, r2
 8008b2e:	4611      	mov	r1, r2
 8008b30:	4618      	mov	r0, r3
 8008b32:	f7ff f829 	bl	8007b88 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	781b      	ldrb	r3, [r3, #0]
 8008b3a:	2b03      	cmp	r3, #3
 8008b3c:	d109      	bne.n	8008b52 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8008b3e:	68bb      	ldr	r3, [r7, #8]
 8008b40:	f103 0214 	add.w	r2, r3, #20
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	0c1b      	lsrs	r3, r3, #16
 8008b48:	b29b      	uxth	r3, r3
 8008b4a:	4619      	mov	r1, r3
 8008b4c:	4610      	mov	r0, r2
 8008b4e:	f7ff f81b 	bl	8007b88 <st_word>
	}
}
 8008b52:	bf00      	nop
 8008b54:	3710      	adds	r7, #16
 8008b56:	46bd      	mov	sp, r7
 8008b58:	bd80      	pop	{r7, pc}

08008b5a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8008b5a:	b580      	push	{r7, lr}
 8008b5c:	b086      	sub	sp, #24
 8008b5e:	af00      	add	r7, sp, #0
 8008b60:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8008b68:	2100      	movs	r1, #0
 8008b6a:	6878      	ldr	r0, [r7, #4]
 8008b6c:	f7ff fe2f 	bl	80087ce <dir_sdi>
 8008b70:	4603      	mov	r3, r0
 8008b72:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8008b74:	7dfb      	ldrb	r3, [r7, #23]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d001      	beq.n	8008b7e <dir_find+0x24>
 8008b7a:	7dfb      	ldrb	r3, [r7, #23]
 8008b7c:	e03e      	b.n	8008bfc <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	69db      	ldr	r3, [r3, #28]
 8008b82:	4619      	mov	r1, r3
 8008b84:	6938      	ldr	r0, [r7, #16]
 8008b86:	f7ff faa5 	bl	80080d4 <move_window>
 8008b8a:	4603      	mov	r3, r0
 8008b8c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8008b8e:	7dfb      	ldrb	r3, [r7, #23]
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d12f      	bne.n	8008bf4 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	6a1b      	ldr	r3, [r3, #32]
 8008b98:	781b      	ldrb	r3, [r3, #0]
 8008b9a:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8008b9c:	7bfb      	ldrb	r3, [r7, #15]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d102      	bne.n	8008ba8 <dir_find+0x4e>
 8008ba2:	2304      	movs	r3, #4
 8008ba4:	75fb      	strb	r3, [r7, #23]
 8008ba6:	e028      	b.n	8008bfa <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	6a1b      	ldr	r3, [r3, #32]
 8008bac:	330b      	adds	r3, #11
 8008bae:	781b      	ldrb	r3, [r3, #0]
 8008bb0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008bb4:	b2da      	uxtb	r2, r3
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	6a1b      	ldr	r3, [r3, #32]
 8008bbe:	330b      	adds	r3, #11
 8008bc0:	781b      	ldrb	r3, [r3, #0]
 8008bc2:	f003 0308 	and.w	r3, r3, #8
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d10a      	bne.n	8008be0 <dir_find+0x86>
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	6a18      	ldr	r0, [r3, #32]
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	3324      	adds	r3, #36	@ 0x24
 8008bd2:	220b      	movs	r2, #11
 8008bd4:	4619      	mov	r1, r3
 8008bd6:	f7ff f85a 	bl	8007c8e <mem_cmp>
 8008bda:	4603      	mov	r3, r0
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d00b      	beq.n	8008bf8 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8008be0:	2100      	movs	r1, #0
 8008be2:	6878      	ldr	r0, [r7, #4]
 8008be4:	f7ff fe6e 	bl	80088c4 <dir_next>
 8008be8:	4603      	mov	r3, r0
 8008bea:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8008bec:	7dfb      	ldrb	r3, [r7, #23]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d0c5      	beq.n	8008b7e <dir_find+0x24>
 8008bf2:	e002      	b.n	8008bfa <dir_find+0xa0>
		if (res != FR_OK) break;
 8008bf4:	bf00      	nop
 8008bf6:	e000      	b.n	8008bfa <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8008bf8:	bf00      	nop

	return res;
 8008bfa:	7dfb      	ldrb	r3, [r7, #23]
}
 8008bfc:	4618      	mov	r0, r3
 8008bfe:	3718      	adds	r7, #24
 8008c00:	46bd      	mov	sp, r7
 8008c02:	bd80      	pop	{r7, pc}

08008c04 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8008c04:	b580      	push	{r7, lr}
 8008c06:	b084      	sub	sp, #16
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8008c12:	2101      	movs	r1, #1
 8008c14:	6878      	ldr	r0, [r7, #4]
 8008c16:	f7ff ff1a 	bl	8008a4e <dir_alloc>
 8008c1a:	4603      	mov	r3, r0
 8008c1c:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8008c1e:	7bfb      	ldrb	r3, [r7, #15]
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d11c      	bne.n	8008c5e <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	69db      	ldr	r3, [r3, #28]
 8008c28:	4619      	mov	r1, r3
 8008c2a:	68b8      	ldr	r0, [r7, #8]
 8008c2c:	f7ff fa52 	bl	80080d4 <move_window>
 8008c30:	4603      	mov	r3, r0
 8008c32:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008c34:	7bfb      	ldrb	r3, [r7, #15]
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d111      	bne.n	8008c5e <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	6a1b      	ldr	r3, [r3, #32]
 8008c3e:	2220      	movs	r2, #32
 8008c40:	2100      	movs	r1, #0
 8008c42:	4618      	mov	r0, r3
 8008c44:	f7ff f808 	bl	8007c58 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	6a18      	ldr	r0, [r3, #32]
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	3324      	adds	r3, #36	@ 0x24
 8008c50:	220b      	movs	r2, #11
 8008c52:	4619      	mov	r1, r3
 8008c54:	f7fe ffdf 	bl	8007c16 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8008c58:	68bb      	ldr	r3, [r7, #8]
 8008c5a:	2201      	movs	r2, #1
 8008c5c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8008c5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c60:	4618      	mov	r0, r3
 8008c62:	3710      	adds	r7, #16
 8008c64:	46bd      	mov	sp, r7
 8008c66:	bd80      	pop	{r7, pc}

08008c68 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8008c68:	b580      	push	{r7, lr}
 8008c6a:	b088      	sub	sp, #32
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	6078      	str	r0, [r7, #4]
 8008c70:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8008c72:	683b      	ldr	r3, [r7, #0]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	60fb      	str	r3, [r7, #12]
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	3324      	adds	r3, #36	@ 0x24
 8008c7c:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8008c7e:	220b      	movs	r2, #11
 8008c80:	2120      	movs	r1, #32
 8008c82:	68b8      	ldr	r0, [r7, #8]
 8008c84:	f7fe ffe8 	bl	8007c58 <mem_set>
	si = i = 0; ni = 8;
 8008c88:	2300      	movs	r3, #0
 8008c8a:	613b      	str	r3, [r7, #16]
 8008c8c:	693b      	ldr	r3, [r7, #16]
 8008c8e:	61fb      	str	r3, [r7, #28]
 8008c90:	2308      	movs	r3, #8
 8008c92:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8008c94:	69fb      	ldr	r3, [r7, #28]
 8008c96:	1c5a      	adds	r2, r3, #1
 8008c98:	61fa      	str	r2, [r7, #28]
 8008c9a:	68fa      	ldr	r2, [r7, #12]
 8008c9c:	4413      	add	r3, r2
 8008c9e:	781b      	ldrb	r3, [r3, #0]
 8008ca0:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8008ca2:	7efb      	ldrb	r3, [r7, #27]
 8008ca4:	2b20      	cmp	r3, #32
 8008ca6:	d94e      	bls.n	8008d46 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8008ca8:	7efb      	ldrb	r3, [r7, #27]
 8008caa:	2b2f      	cmp	r3, #47	@ 0x2f
 8008cac:	d006      	beq.n	8008cbc <create_name+0x54>
 8008cae:	7efb      	ldrb	r3, [r7, #27]
 8008cb0:	2b5c      	cmp	r3, #92	@ 0x5c
 8008cb2:	d110      	bne.n	8008cd6 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8008cb4:	e002      	b.n	8008cbc <create_name+0x54>
 8008cb6:	69fb      	ldr	r3, [r7, #28]
 8008cb8:	3301      	adds	r3, #1
 8008cba:	61fb      	str	r3, [r7, #28]
 8008cbc:	68fa      	ldr	r2, [r7, #12]
 8008cbe:	69fb      	ldr	r3, [r7, #28]
 8008cc0:	4413      	add	r3, r2
 8008cc2:	781b      	ldrb	r3, [r3, #0]
 8008cc4:	2b2f      	cmp	r3, #47	@ 0x2f
 8008cc6:	d0f6      	beq.n	8008cb6 <create_name+0x4e>
 8008cc8:	68fa      	ldr	r2, [r7, #12]
 8008cca:	69fb      	ldr	r3, [r7, #28]
 8008ccc:	4413      	add	r3, r2
 8008cce:	781b      	ldrb	r3, [r3, #0]
 8008cd0:	2b5c      	cmp	r3, #92	@ 0x5c
 8008cd2:	d0f0      	beq.n	8008cb6 <create_name+0x4e>
			break;
 8008cd4:	e038      	b.n	8008d48 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8008cd6:	7efb      	ldrb	r3, [r7, #27]
 8008cd8:	2b2e      	cmp	r3, #46	@ 0x2e
 8008cda:	d003      	beq.n	8008ce4 <create_name+0x7c>
 8008cdc:	693a      	ldr	r2, [r7, #16]
 8008cde:	697b      	ldr	r3, [r7, #20]
 8008ce0:	429a      	cmp	r2, r3
 8008ce2:	d30c      	bcc.n	8008cfe <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8008ce4:	697b      	ldr	r3, [r7, #20]
 8008ce6:	2b0b      	cmp	r3, #11
 8008ce8:	d002      	beq.n	8008cf0 <create_name+0x88>
 8008cea:	7efb      	ldrb	r3, [r7, #27]
 8008cec:	2b2e      	cmp	r3, #46	@ 0x2e
 8008cee:	d001      	beq.n	8008cf4 <create_name+0x8c>
 8008cf0:	2306      	movs	r3, #6
 8008cf2:	e044      	b.n	8008d7e <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8008cf4:	2308      	movs	r3, #8
 8008cf6:	613b      	str	r3, [r7, #16]
 8008cf8:	230b      	movs	r3, #11
 8008cfa:	617b      	str	r3, [r7, #20]
			continue;
 8008cfc:	e022      	b.n	8008d44 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8008cfe:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	da04      	bge.n	8008d10 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8008d06:	7efb      	ldrb	r3, [r7, #27]
 8008d08:	3b80      	subs	r3, #128	@ 0x80
 8008d0a:	4a1f      	ldr	r2, [pc, #124]	@ (8008d88 <create_name+0x120>)
 8008d0c:	5cd3      	ldrb	r3, [r2, r3]
 8008d0e:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8008d10:	7efb      	ldrb	r3, [r7, #27]
 8008d12:	4619      	mov	r1, r3
 8008d14:	481d      	ldr	r0, [pc, #116]	@ (8008d8c <create_name+0x124>)
 8008d16:	f7fe ffe1 	bl	8007cdc <chk_chr>
 8008d1a:	4603      	mov	r3, r0
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d001      	beq.n	8008d24 <create_name+0xbc>
 8008d20:	2306      	movs	r3, #6
 8008d22:	e02c      	b.n	8008d7e <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8008d24:	7efb      	ldrb	r3, [r7, #27]
 8008d26:	2b60      	cmp	r3, #96	@ 0x60
 8008d28:	d905      	bls.n	8008d36 <create_name+0xce>
 8008d2a:	7efb      	ldrb	r3, [r7, #27]
 8008d2c:	2b7a      	cmp	r3, #122	@ 0x7a
 8008d2e:	d802      	bhi.n	8008d36 <create_name+0xce>
 8008d30:	7efb      	ldrb	r3, [r7, #27]
 8008d32:	3b20      	subs	r3, #32
 8008d34:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8008d36:	693b      	ldr	r3, [r7, #16]
 8008d38:	1c5a      	adds	r2, r3, #1
 8008d3a:	613a      	str	r2, [r7, #16]
 8008d3c:	68ba      	ldr	r2, [r7, #8]
 8008d3e:	4413      	add	r3, r2
 8008d40:	7efa      	ldrb	r2, [r7, #27]
 8008d42:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8008d44:	e7a6      	b.n	8008c94 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8008d46:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8008d48:	68fa      	ldr	r2, [r7, #12]
 8008d4a:	69fb      	ldr	r3, [r7, #28]
 8008d4c:	441a      	add	r2, r3
 8008d4e:	683b      	ldr	r3, [r7, #0]
 8008d50:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8008d52:	693b      	ldr	r3, [r7, #16]
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d101      	bne.n	8008d5c <create_name+0xf4>
 8008d58:	2306      	movs	r3, #6
 8008d5a:	e010      	b.n	8008d7e <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8008d5c:	68bb      	ldr	r3, [r7, #8]
 8008d5e:	781b      	ldrb	r3, [r3, #0]
 8008d60:	2be5      	cmp	r3, #229	@ 0xe5
 8008d62:	d102      	bne.n	8008d6a <create_name+0x102>
 8008d64:	68bb      	ldr	r3, [r7, #8]
 8008d66:	2205      	movs	r2, #5
 8008d68:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8008d6a:	7efb      	ldrb	r3, [r7, #27]
 8008d6c:	2b20      	cmp	r3, #32
 8008d6e:	d801      	bhi.n	8008d74 <create_name+0x10c>
 8008d70:	2204      	movs	r2, #4
 8008d72:	e000      	b.n	8008d76 <create_name+0x10e>
 8008d74:	2200      	movs	r2, #0
 8008d76:	68bb      	ldr	r3, [r7, #8]
 8008d78:	330b      	adds	r3, #11
 8008d7a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8008d7c:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8008d7e:	4618      	mov	r0, r3
 8008d80:	3720      	adds	r7, #32
 8008d82:	46bd      	mov	sp, r7
 8008d84:	bd80      	pop	{r7, pc}
 8008d86:	bf00      	nop
 8008d88:	08010e6c 	.word	0x08010e6c
 8008d8c:	08010d58 	.word	0x08010d58

08008d90 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8008d90:	b580      	push	{r7, lr}
 8008d92:	b086      	sub	sp, #24
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	6078      	str	r0, [r7, #4]
 8008d98:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8008d9e:	693b      	ldr	r3, [r7, #16]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8008da4:	e002      	b.n	8008dac <follow_path+0x1c>
 8008da6:	683b      	ldr	r3, [r7, #0]
 8008da8:	3301      	adds	r3, #1
 8008daa:	603b      	str	r3, [r7, #0]
 8008dac:	683b      	ldr	r3, [r7, #0]
 8008dae:	781b      	ldrb	r3, [r3, #0]
 8008db0:	2b2f      	cmp	r3, #47	@ 0x2f
 8008db2:	d0f8      	beq.n	8008da6 <follow_path+0x16>
 8008db4:	683b      	ldr	r3, [r7, #0]
 8008db6:	781b      	ldrb	r3, [r3, #0]
 8008db8:	2b5c      	cmp	r3, #92	@ 0x5c
 8008dba:	d0f4      	beq.n	8008da6 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8008dbc:	693b      	ldr	r3, [r7, #16]
 8008dbe:	2200      	movs	r2, #0
 8008dc0:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8008dc2:	683b      	ldr	r3, [r7, #0]
 8008dc4:	781b      	ldrb	r3, [r3, #0]
 8008dc6:	2b1f      	cmp	r3, #31
 8008dc8:	d80a      	bhi.n	8008de0 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	2280      	movs	r2, #128	@ 0x80
 8008dce:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 8008dd2:	2100      	movs	r1, #0
 8008dd4:	6878      	ldr	r0, [r7, #4]
 8008dd6:	f7ff fcfa 	bl	80087ce <dir_sdi>
 8008dda:	4603      	mov	r3, r0
 8008ddc:	75fb      	strb	r3, [r7, #23]
 8008dde:	e043      	b.n	8008e68 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008de0:	463b      	mov	r3, r7
 8008de2:	4619      	mov	r1, r3
 8008de4:	6878      	ldr	r0, [r7, #4]
 8008de6:	f7ff ff3f 	bl	8008c68 <create_name>
 8008dea:	4603      	mov	r3, r0
 8008dec:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8008dee:	7dfb      	ldrb	r3, [r7, #23]
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d134      	bne.n	8008e5e <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8008df4:	6878      	ldr	r0, [r7, #4]
 8008df6:	f7ff feb0 	bl	8008b5a <dir_find>
 8008dfa:	4603      	mov	r3, r0
 8008dfc:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8008e04:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8008e06:	7dfb      	ldrb	r3, [r7, #23]
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d00a      	beq.n	8008e22 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8008e0c:	7dfb      	ldrb	r3, [r7, #23]
 8008e0e:	2b04      	cmp	r3, #4
 8008e10:	d127      	bne.n	8008e62 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8008e12:	7afb      	ldrb	r3, [r7, #11]
 8008e14:	f003 0304 	and.w	r3, r3, #4
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d122      	bne.n	8008e62 <follow_path+0xd2>
 8008e1c:	2305      	movs	r3, #5
 8008e1e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8008e20:	e01f      	b.n	8008e62 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008e22:	7afb      	ldrb	r3, [r7, #11]
 8008e24:	f003 0304 	and.w	r3, r3, #4
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d11c      	bne.n	8008e66 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8008e2c:	693b      	ldr	r3, [r7, #16]
 8008e2e:	799b      	ldrb	r3, [r3, #6]
 8008e30:	f003 0310 	and.w	r3, r3, #16
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d102      	bne.n	8008e3e <follow_path+0xae>
				res = FR_NO_PATH; break;
 8008e38:	2305      	movs	r3, #5
 8008e3a:	75fb      	strb	r3, [r7, #23]
 8008e3c:	e014      	b.n	8008e68 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	695b      	ldr	r3, [r3, #20]
 8008e48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e4c:	4413      	add	r3, r2
 8008e4e:	4619      	mov	r1, r3
 8008e50:	68f8      	ldr	r0, [r7, #12]
 8008e52:	f7ff fe43 	bl	8008adc <ld_clust>
 8008e56:	4602      	mov	r2, r0
 8008e58:	693b      	ldr	r3, [r7, #16]
 8008e5a:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008e5c:	e7c0      	b.n	8008de0 <follow_path+0x50>
			if (res != FR_OK) break;
 8008e5e:	bf00      	nop
 8008e60:	e002      	b.n	8008e68 <follow_path+0xd8>
				break;
 8008e62:	bf00      	nop
 8008e64:	e000      	b.n	8008e68 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008e66:	bf00      	nop
			}
		}
	}

	return res;
 8008e68:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	3718      	adds	r7, #24
 8008e6e:	46bd      	mov	sp, r7
 8008e70:	bd80      	pop	{r7, pc}

08008e72 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8008e72:	b480      	push	{r7}
 8008e74:	b087      	sub	sp, #28
 8008e76:	af00      	add	r7, sp, #0
 8008e78:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8008e7a:	f04f 33ff 	mov.w	r3, #4294967295
 8008e7e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d031      	beq.n	8008eec <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	617b      	str	r3, [r7, #20]
 8008e8e:	e002      	b.n	8008e96 <get_ldnumber+0x24>
 8008e90:	697b      	ldr	r3, [r7, #20]
 8008e92:	3301      	adds	r3, #1
 8008e94:	617b      	str	r3, [r7, #20]
 8008e96:	697b      	ldr	r3, [r7, #20]
 8008e98:	781b      	ldrb	r3, [r3, #0]
 8008e9a:	2b20      	cmp	r3, #32
 8008e9c:	d903      	bls.n	8008ea6 <get_ldnumber+0x34>
 8008e9e:	697b      	ldr	r3, [r7, #20]
 8008ea0:	781b      	ldrb	r3, [r3, #0]
 8008ea2:	2b3a      	cmp	r3, #58	@ 0x3a
 8008ea4:	d1f4      	bne.n	8008e90 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8008ea6:	697b      	ldr	r3, [r7, #20]
 8008ea8:	781b      	ldrb	r3, [r3, #0]
 8008eaa:	2b3a      	cmp	r3, #58	@ 0x3a
 8008eac:	d11c      	bne.n	8008ee8 <get_ldnumber+0x76>
			tp = *path;
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	1c5a      	adds	r2, r3, #1
 8008eb8:	60fa      	str	r2, [r7, #12]
 8008eba:	781b      	ldrb	r3, [r3, #0]
 8008ebc:	3b30      	subs	r3, #48	@ 0x30
 8008ebe:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8008ec0:	68bb      	ldr	r3, [r7, #8]
 8008ec2:	2b09      	cmp	r3, #9
 8008ec4:	d80e      	bhi.n	8008ee4 <get_ldnumber+0x72>
 8008ec6:	68fa      	ldr	r2, [r7, #12]
 8008ec8:	697b      	ldr	r3, [r7, #20]
 8008eca:	429a      	cmp	r2, r3
 8008ecc:	d10a      	bne.n	8008ee4 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8008ece:	68bb      	ldr	r3, [r7, #8]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d107      	bne.n	8008ee4 <get_ldnumber+0x72>
					vol = (int)i;
 8008ed4:	68bb      	ldr	r3, [r7, #8]
 8008ed6:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8008ed8:	697b      	ldr	r3, [r7, #20]
 8008eda:	3301      	adds	r3, #1
 8008edc:	617b      	str	r3, [r7, #20]
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	697a      	ldr	r2, [r7, #20]
 8008ee2:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8008ee4:	693b      	ldr	r3, [r7, #16]
 8008ee6:	e002      	b.n	8008eee <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8008ee8:	2300      	movs	r3, #0
 8008eea:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8008eec:	693b      	ldr	r3, [r7, #16]
}
 8008eee:	4618      	mov	r0, r3
 8008ef0:	371c      	adds	r7, #28
 8008ef2:	46bd      	mov	sp, r7
 8008ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef8:	4770      	bx	lr
	...

08008efc <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8008efc:	b580      	push	{r7, lr}
 8008efe:	b082      	sub	sp, #8
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	6078      	str	r0, [r7, #4]
 8008f04:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	2200      	movs	r2, #0
 8008f0a:	70da      	strb	r2, [r3, #3]
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	f04f 32ff 	mov.w	r2, #4294967295
 8008f12:	631a      	str	r2, [r3, #48]	@ 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8008f14:	6839      	ldr	r1, [r7, #0]
 8008f16:	6878      	ldr	r0, [r7, #4]
 8008f18:	f7ff f8dc 	bl	80080d4 <move_window>
 8008f1c:	4603      	mov	r3, r0
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d001      	beq.n	8008f26 <check_fs+0x2a>
 8008f22:	2304      	movs	r3, #4
 8008f24:	e038      	b.n	8008f98 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	3334      	adds	r3, #52	@ 0x34
 8008f2a:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8008f2e:	4618      	mov	r0, r3
 8008f30:	f7fe fdee 	bl	8007b10 <ld_word>
 8008f34:	4603      	mov	r3, r0
 8008f36:	461a      	mov	r2, r3
 8008f38:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8008f3c:	429a      	cmp	r2, r3
 8008f3e:	d001      	beq.n	8008f44 <check_fs+0x48>
 8008f40:	2303      	movs	r3, #3
 8008f42:	e029      	b.n	8008f98 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8008f4a:	2be9      	cmp	r3, #233	@ 0xe9
 8008f4c:	d009      	beq.n	8008f62 <check_fs+0x66>
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8008f54:	2beb      	cmp	r3, #235	@ 0xeb
 8008f56:	d11e      	bne.n	8008f96 <check_fs+0x9a>
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8008f5e:	2b90      	cmp	r3, #144	@ 0x90
 8008f60:	d119      	bne.n	8008f96 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	3334      	adds	r3, #52	@ 0x34
 8008f66:	3336      	adds	r3, #54	@ 0x36
 8008f68:	4618      	mov	r0, r3
 8008f6a:	f7fe fdea 	bl	8007b42 <ld_dword>
 8008f6e:	4603      	mov	r3, r0
 8008f70:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8008f74:	4a0a      	ldr	r2, [pc, #40]	@ (8008fa0 <check_fs+0xa4>)
 8008f76:	4293      	cmp	r3, r2
 8008f78:	d101      	bne.n	8008f7e <check_fs+0x82>
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	e00c      	b.n	8008f98 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	3334      	adds	r3, #52	@ 0x34
 8008f82:	3352      	adds	r3, #82	@ 0x52
 8008f84:	4618      	mov	r0, r3
 8008f86:	f7fe fddc 	bl	8007b42 <ld_dword>
 8008f8a:	4603      	mov	r3, r0
 8008f8c:	4a05      	ldr	r2, [pc, #20]	@ (8008fa4 <check_fs+0xa8>)
 8008f8e:	4293      	cmp	r3, r2
 8008f90:	d101      	bne.n	8008f96 <check_fs+0x9a>
 8008f92:	2300      	movs	r3, #0
 8008f94:	e000      	b.n	8008f98 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8008f96:	2302      	movs	r3, #2
}
 8008f98:	4618      	mov	r0, r3
 8008f9a:	3708      	adds	r7, #8
 8008f9c:	46bd      	mov	sp, r7
 8008f9e:	bd80      	pop	{r7, pc}
 8008fa0:	00544146 	.word	0x00544146
 8008fa4:	33544146 	.word	0x33544146

08008fa8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8008fa8:	b580      	push	{r7, lr}
 8008faa:	b096      	sub	sp, #88	@ 0x58
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	60f8      	str	r0, [r7, #12]
 8008fb0:	60b9      	str	r1, [r7, #8]
 8008fb2:	4613      	mov	r3, r2
 8008fb4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8008fb6:	68bb      	ldr	r3, [r7, #8]
 8008fb8:	2200      	movs	r2, #0
 8008fba:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8008fbc:	68f8      	ldr	r0, [r7, #12]
 8008fbe:	f7ff ff58 	bl	8008e72 <get_ldnumber>
 8008fc2:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8008fc4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	da01      	bge.n	8008fce <find_volume+0x26>
 8008fca:	230b      	movs	r3, #11
 8008fcc:	e235      	b.n	800943a <find_volume+0x492>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8008fce:	4aa5      	ldr	r2, [pc, #660]	@ (8009264 <find_volume+0x2bc>)
 8008fd0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008fd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008fd6:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8008fd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d101      	bne.n	8008fe2 <find_volume+0x3a>
 8008fde:	230c      	movs	r3, #12
 8008fe0:	e22b      	b.n	800943a <find_volume+0x492>

	ENTER_FF(fs);						/* Lock the volume */
 8008fe2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008fe4:	f7fe fe95 	bl	8007d12 <lock_fs>
 8008fe8:	4603      	mov	r3, r0
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d101      	bne.n	8008ff2 <find_volume+0x4a>
 8008fee:	230f      	movs	r3, #15
 8008ff0:	e223      	b.n	800943a <find_volume+0x492>
	*rfs = fs;							/* Return pointer to the file system object */
 8008ff2:	68bb      	ldr	r3, [r7, #8]
 8008ff4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008ff6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8008ff8:	79fb      	ldrb	r3, [r7, #7]
 8008ffa:	f023 0301 	bic.w	r3, r3, #1
 8008ffe:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8009000:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009002:	781b      	ldrb	r3, [r3, #0]
 8009004:	2b00      	cmp	r3, #0
 8009006:	d01a      	beq.n	800903e <find_volume+0x96>
		stat = disk_status(fs->drv);
 8009008:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800900a:	785b      	ldrb	r3, [r3, #1]
 800900c:	4618      	mov	r0, r3
 800900e:	f7fe fce1 	bl	80079d4 <disk_status>
 8009012:	4603      	mov	r3, r0
 8009014:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8009018:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800901c:	f003 0301 	and.w	r3, r3, #1
 8009020:	2b00      	cmp	r3, #0
 8009022:	d10c      	bne.n	800903e <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8009024:	79fb      	ldrb	r3, [r7, #7]
 8009026:	2b00      	cmp	r3, #0
 8009028:	d007      	beq.n	800903a <find_volume+0x92>
 800902a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800902e:	f003 0304 	and.w	r3, r3, #4
 8009032:	2b00      	cmp	r3, #0
 8009034:	d001      	beq.n	800903a <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 8009036:	230a      	movs	r3, #10
 8009038:	e1ff      	b.n	800943a <find_volume+0x492>
			}
			return FR_OK;				/* The file system object is valid */
 800903a:	2300      	movs	r3, #0
 800903c:	e1fd      	b.n	800943a <find_volume+0x492>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800903e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009040:	2200      	movs	r2, #0
 8009042:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8009044:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009046:	b2da      	uxtb	r2, r3
 8009048:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800904a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800904c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800904e:	785b      	ldrb	r3, [r3, #1]
 8009050:	4618      	mov	r0, r3
 8009052:	f7fe fcd9 	bl	8007a08 <disk_initialize>
 8009056:	4603      	mov	r3, r0
 8009058:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800905c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009060:	f003 0301 	and.w	r3, r3, #1
 8009064:	2b00      	cmp	r3, #0
 8009066:	d001      	beq.n	800906c <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8009068:	2303      	movs	r3, #3
 800906a:	e1e6      	b.n	800943a <find_volume+0x492>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800906c:	79fb      	ldrb	r3, [r7, #7]
 800906e:	2b00      	cmp	r3, #0
 8009070:	d007      	beq.n	8009082 <find_volume+0xda>
 8009072:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009076:	f003 0304 	and.w	r3, r3, #4
 800907a:	2b00      	cmp	r3, #0
 800907c:	d001      	beq.n	8009082 <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 800907e:	230a      	movs	r3, #10
 8009080:	e1db      	b.n	800943a <find_volume+0x492>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8009082:	2300      	movs	r3, #0
 8009084:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8009086:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009088:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800908a:	f7ff ff37 	bl	8008efc <check_fs>
 800908e:	4603      	mov	r3, r0
 8009090:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8009094:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009098:	2b02      	cmp	r3, #2
 800909a:	d149      	bne.n	8009130 <find_volume+0x188>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800909c:	2300      	movs	r3, #0
 800909e:	643b      	str	r3, [r7, #64]	@ 0x40
 80090a0:	e01e      	b.n	80090e0 <find_volume+0x138>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80090a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090a4:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80090a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80090aa:	011b      	lsls	r3, r3, #4
 80090ac:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 80090b0:	4413      	add	r3, r2
 80090b2:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80090b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090b6:	3304      	adds	r3, #4
 80090b8:	781b      	ldrb	r3, [r3, #0]
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d006      	beq.n	80090cc <find_volume+0x124>
 80090be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090c0:	3308      	adds	r3, #8
 80090c2:	4618      	mov	r0, r3
 80090c4:	f7fe fd3d 	bl	8007b42 <ld_dword>
 80090c8:	4602      	mov	r2, r0
 80090ca:	e000      	b.n	80090ce <find_volume+0x126>
 80090cc:	2200      	movs	r2, #0
 80090ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80090d0:	009b      	lsls	r3, r3, #2
 80090d2:	3358      	adds	r3, #88	@ 0x58
 80090d4:	443b      	add	r3, r7
 80090d6:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80090da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80090dc:	3301      	adds	r3, #1
 80090de:	643b      	str	r3, [r7, #64]	@ 0x40
 80090e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80090e2:	2b03      	cmp	r3, #3
 80090e4:	d9dd      	bls.n	80090a2 <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80090e6:	2300      	movs	r3, #0
 80090e8:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 80090ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d002      	beq.n	80090f6 <find_volume+0x14e>
 80090f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80090f2:	3b01      	subs	r3, #1
 80090f4:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80090f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80090f8:	009b      	lsls	r3, r3, #2
 80090fa:	3358      	adds	r3, #88	@ 0x58
 80090fc:	443b      	add	r3, r7
 80090fe:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8009102:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8009104:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009106:	2b00      	cmp	r3, #0
 8009108:	d005      	beq.n	8009116 <find_volume+0x16e>
 800910a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800910c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800910e:	f7ff fef5 	bl	8008efc <check_fs>
 8009112:	4603      	mov	r3, r0
 8009114:	e000      	b.n	8009118 <find_volume+0x170>
 8009116:	2303      	movs	r3, #3
 8009118:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800911c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009120:	2b01      	cmp	r3, #1
 8009122:	d905      	bls.n	8009130 <find_volume+0x188>
 8009124:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009126:	3301      	adds	r3, #1
 8009128:	643b      	str	r3, [r7, #64]	@ 0x40
 800912a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800912c:	2b03      	cmp	r3, #3
 800912e:	d9e2      	bls.n	80090f6 <find_volume+0x14e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8009130:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009134:	2b04      	cmp	r3, #4
 8009136:	d101      	bne.n	800913c <find_volume+0x194>
 8009138:	2301      	movs	r3, #1
 800913a:	e17e      	b.n	800943a <find_volume+0x492>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800913c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009140:	2b01      	cmp	r3, #1
 8009142:	d901      	bls.n	8009148 <find_volume+0x1a0>
 8009144:	230d      	movs	r3, #13
 8009146:	e178      	b.n	800943a <find_volume+0x492>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8009148:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800914a:	3334      	adds	r3, #52	@ 0x34
 800914c:	330b      	adds	r3, #11
 800914e:	4618      	mov	r0, r3
 8009150:	f7fe fcde 	bl	8007b10 <ld_word>
 8009154:	4603      	mov	r3, r0
 8009156:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800915a:	d001      	beq.n	8009160 <find_volume+0x1b8>
 800915c:	230d      	movs	r3, #13
 800915e:	e16c      	b.n	800943a <find_volume+0x492>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8009160:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009162:	3334      	adds	r3, #52	@ 0x34
 8009164:	3316      	adds	r3, #22
 8009166:	4618      	mov	r0, r3
 8009168:	f7fe fcd2 	bl	8007b10 <ld_word>
 800916c:	4603      	mov	r3, r0
 800916e:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8009170:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009172:	2b00      	cmp	r3, #0
 8009174:	d106      	bne.n	8009184 <find_volume+0x1dc>
 8009176:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009178:	3334      	adds	r3, #52	@ 0x34
 800917a:	3324      	adds	r3, #36	@ 0x24
 800917c:	4618      	mov	r0, r3
 800917e:	f7fe fce0 	bl	8007b42 <ld_dword>
 8009182:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8009184:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009186:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009188:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800918a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800918c:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8009190:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009192:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8009194:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009196:	789b      	ldrb	r3, [r3, #2]
 8009198:	2b01      	cmp	r3, #1
 800919a:	d005      	beq.n	80091a8 <find_volume+0x200>
 800919c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800919e:	789b      	ldrb	r3, [r3, #2]
 80091a0:	2b02      	cmp	r3, #2
 80091a2:	d001      	beq.n	80091a8 <find_volume+0x200>
 80091a4:	230d      	movs	r3, #13
 80091a6:	e148      	b.n	800943a <find_volume+0x492>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80091a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091aa:	789b      	ldrb	r3, [r3, #2]
 80091ac:	461a      	mov	r2, r3
 80091ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80091b0:	fb02 f303 	mul.w	r3, r2, r3
 80091b4:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80091b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80091bc:	461a      	mov	r2, r3
 80091be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091c0:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80091c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091c4:	895b      	ldrh	r3, [r3, #10]
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d008      	beq.n	80091dc <find_volume+0x234>
 80091ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091cc:	895b      	ldrh	r3, [r3, #10]
 80091ce:	461a      	mov	r2, r3
 80091d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091d2:	895b      	ldrh	r3, [r3, #10]
 80091d4:	3b01      	subs	r3, #1
 80091d6:	4013      	ands	r3, r2
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d001      	beq.n	80091e0 <find_volume+0x238>
 80091dc:	230d      	movs	r3, #13
 80091de:	e12c      	b.n	800943a <find_volume+0x492>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80091e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091e2:	3334      	adds	r3, #52	@ 0x34
 80091e4:	3311      	adds	r3, #17
 80091e6:	4618      	mov	r0, r3
 80091e8:	f7fe fc92 	bl	8007b10 <ld_word>
 80091ec:	4603      	mov	r3, r0
 80091ee:	461a      	mov	r2, r3
 80091f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091f2:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80091f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091f6:	891b      	ldrh	r3, [r3, #8]
 80091f8:	f003 030f 	and.w	r3, r3, #15
 80091fc:	b29b      	uxth	r3, r3
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d001      	beq.n	8009206 <find_volume+0x25e>
 8009202:	230d      	movs	r3, #13
 8009204:	e119      	b.n	800943a <find_volume+0x492>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8009206:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009208:	3334      	adds	r3, #52	@ 0x34
 800920a:	3313      	adds	r3, #19
 800920c:	4618      	mov	r0, r3
 800920e:	f7fe fc7f 	bl	8007b10 <ld_word>
 8009212:	4603      	mov	r3, r0
 8009214:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8009216:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009218:	2b00      	cmp	r3, #0
 800921a:	d106      	bne.n	800922a <find_volume+0x282>
 800921c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800921e:	3334      	adds	r3, #52	@ 0x34
 8009220:	3320      	adds	r3, #32
 8009222:	4618      	mov	r0, r3
 8009224:	f7fe fc8d 	bl	8007b42 <ld_dword>
 8009228:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800922a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800922c:	3334      	adds	r3, #52	@ 0x34
 800922e:	330e      	adds	r3, #14
 8009230:	4618      	mov	r0, r3
 8009232:	f7fe fc6d 	bl	8007b10 <ld_word>
 8009236:	4603      	mov	r3, r0
 8009238:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800923a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800923c:	2b00      	cmp	r3, #0
 800923e:	d101      	bne.n	8009244 <find_volume+0x29c>
 8009240:	230d      	movs	r3, #13
 8009242:	e0fa      	b.n	800943a <find_volume+0x492>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8009244:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8009246:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009248:	4413      	add	r3, r2
 800924a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800924c:	8912      	ldrh	r2, [r2, #8]
 800924e:	0912      	lsrs	r2, r2, #4
 8009250:	b292      	uxth	r2, r2
 8009252:	4413      	add	r3, r2
 8009254:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8009256:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009258:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800925a:	429a      	cmp	r2, r3
 800925c:	d204      	bcs.n	8009268 <find_volume+0x2c0>
 800925e:	230d      	movs	r3, #13
 8009260:	e0eb      	b.n	800943a <find_volume+0x492>
 8009262:	bf00      	nop
 8009264:	20000a2c 	.word	0x20000a2c
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8009268:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800926a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800926c:	1ad3      	subs	r3, r2, r3
 800926e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009270:	8952      	ldrh	r2, [r2, #10]
 8009272:	fbb3 f3f2 	udiv	r3, r3, r2
 8009276:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8009278:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800927a:	2b00      	cmp	r3, #0
 800927c:	d101      	bne.n	8009282 <find_volume+0x2da>
 800927e:	230d      	movs	r3, #13
 8009280:	e0db      	b.n	800943a <find_volume+0x492>
		fmt = FS_FAT32;
 8009282:	2303      	movs	r3, #3
 8009284:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8009288:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800928a:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800928e:	4293      	cmp	r3, r2
 8009290:	d802      	bhi.n	8009298 <find_volume+0x2f0>
 8009292:	2302      	movs	r3, #2
 8009294:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8009298:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800929a:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800929e:	4293      	cmp	r3, r2
 80092a0:	d802      	bhi.n	80092a8 <find_volume+0x300>
 80092a2:	2301      	movs	r3, #1
 80092a4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80092a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092aa:	1c9a      	adds	r2, r3, #2
 80092ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092ae:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 80092b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092b2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80092b4:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80092b6:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80092b8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80092ba:	441a      	add	r2, r3
 80092bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092be:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 80092c0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80092c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092c4:	441a      	add	r2, r3
 80092c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092c8:	62da      	str	r2, [r3, #44]	@ 0x2c
		if (fmt == FS_FAT32) {
 80092ca:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80092ce:	2b03      	cmp	r3, #3
 80092d0:	d11e      	bne.n	8009310 <find_volume+0x368>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80092d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092d4:	3334      	adds	r3, #52	@ 0x34
 80092d6:	332a      	adds	r3, #42	@ 0x2a
 80092d8:	4618      	mov	r0, r3
 80092da:	f7fe fc19 	bl	8007b10 <ld_word>
 80092de:	4603      	mov	r3, r0
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d001      	beq.n	80092e8 <find_volume+0x340>
 80092e4:	230d      	movs	r3, #13
 80092e6:	e0a8      	b.n	800943a <find_volume+0x492>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80092e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092ea:	891b      	ldrh	r3, [r3, #8]
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d001      	beq.n	80092f4 <find_volume+0x34c>
 80092f0:	230d      	movs	r3, #13
 80092f2:	e0a2      	b.n	800943a <find_volume+0x492>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80092f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092f6:	3334      	adds	r3, #52	@ 0x34
 80092f8:	332c      	adds	r3, #44	@ 0x2c
 80092fa:	4618      	mov	r0, r3
 80092fc:	f7fe fc21 	bl	8007b42 <ld_dword>
 8009300:	4602      	mov	r2, r0
 8009302:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009304:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8009306:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009308:	699b      	ldr	r3, [r3, #24]
 800930a:	009b      	lsls	r3, r3, #2
 800930c:	647b      	str	r3, [r7, #68]	@ 0x44
 800930e:	e01f      	b.n	8009350 <find_volume+0x3a8>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8009310:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009312:	891b      	ldrh	r3, [r3, #8]
 8009314:	2b00      	cmp	r3, #0
 8009316:	d101      	bne.n	800931c <find_volume+0x374>
 8009318:	230d      	movs	r3, #13
 800931a:	e08e      	b.n	800943a <find_volume+0x492>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800931c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800931e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009320:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009322:	441a      	add	r2, r3
 8009324:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009326:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8009328:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800932c:	2b02      	cmp	r3, #2
 800932e:	d103      	bne.n	8009338 <find_volume+0x390>
 8009330:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009332:	699b      	ldr	r3, [r3, #24]
 8009334:	005b      	lsls	r3, r3, #1
 8009336:	e00a      	b.n	800934e <find_volume+0x3a6>
 8009338:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800933a:	699a      	ldr	r2, [r3, #24]
 800933c:	4613      	mov	r3, r2
 800933e:	005b      	lsls	r3, r3, #1
 8009340:	4413      	add	r3, r2
 8009342:	085a      	lsrs	r2, r3, #1
 8009344:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009346:	699b      	ldr	r3, [r3, #24]
 8009348:	f003 0301 	and.w	r3, r3, #1
 800934c:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800934e:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8009350:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009352:	69da      	ldr	r2, [r3, #28]
 8009354:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009356:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800935a:	0a5b      	lsrs	r3, r3, #9
 800935c:	429a      	cmp	r2, r3
 800935e:	d201      	bcs.n	8009364 <find_volume+0x3bc>
 8009360:	230d      	movs	r3, #13
 8009362:	e06a      	b.n	800943a <find_volume+0x492>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8009364:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009366:	f04f 32ff 	mov.w	r2, #4294967295
 800936a:	615a      	str	r2, [r3, #20]
 800936c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800936e:	695a      	ldr	r2, [r3, #20]
 8009370:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009372:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8009374:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009376:	2280      	movs	r2, #128	@ 0x80
 8009378:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800937a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800937e:	2b03      	cmp	r3, #3
 8009380:	d149      	bne.n	8009416 <find_volume+0x46e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8009382:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009384:	3334      	adds	r3, #52	@ 0x34
 8009386:	3330      	adds	r3, #48	@ 0x30
 8009388:	4618      	mov	r0, r3
 800938a:	f7fe fbc1 	bl	8007b10 <ld_word>
 800938e:	4603      	mov	r3, r0
 8009390:	2b01      	cmp	r3, #1
 8009392:	d140      	bne.n	8009416 <find_volume+0x46e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8009394:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009396:	3301      	adds	r3, #1
 8009398:	4619      	mov	r1, r3
 800939a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800939c:	f7fe fe9a 	bl	80080d4 <move_window>
 80093a0:	4603      	mov	r3, r0
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d137      	bne.n	8009416 <find_volume+0x46e>
		{
			fs->fsi_flag = 0;
 80093a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093a8:	2200      	movs	r2, #0
 80093aa:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80093ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093ae:	3334      	adds	r3, #52	@ 0x34
 80093b0:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80093b4:	4618      	mov	r0, r3
 80093b6:	f7fe fbab 	bl	8007b10 <ld_word>
 80093ba:	4603      	mov	r3, r0
 80093bc:	461a      	mov	r2, r3
 80093be:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 80093c2:	429a      	cmp	r2, r3
 80093c4:	d127      	bne.n	8009416 <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80093c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093c8:	3334      	adds	r3, #52	@ 0x34
 80093ca:	4618      	mov	r0, r3
 80093cc:	f7fe fbb9 	bl	8007b42 <ld_dword>
 80093d0:	4603      	mov	r3, r0
 80093d2:	4a1c      	ldr	r2, [pc, #112]	@ (8009444 <find_volume+0x49c>)
 80093d4:	4293      	cmp	r3, r2
 80093d6:	d11e      	bne.n	8009416 <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80093d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093da:	3334      	adds	r3, #52	@ 0x34
 80093dc:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80093e0:	4618      	mov	r0, r3
 80093e2:	f7fe fbae 	bl	8007b42 <ld_dword>
 80093e6:	4603      	mov	r3, r0
 80093e8:	4a17      	ldr	r2, [pc, #92]	@ (8009448 <find_volume+0x4a0>)
 80093ea:	4293      	cmp	r3, r2
 80093ec:	d113      	bne.n	8009416 <find_volume+0x46e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80093ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093f0:	3334      	adds	r3, #52	@ 0x34
 80093f2:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 80093f6:	4618      	mov	r0, r3
 80093f8:	f7fe fba3 	bl	8007b42 <ld_dword>
 80093fc:	4602      	mov	r2, r0
 80093fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009400:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8009402:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009404:	3334      	adds	r3, #52	@ 0x34
 8009406:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800940a:	4618      	mov	r0, r3
 800940c:	f7fe fb99 	bl	8007b42 <ld_dword>
 8009410:	4602      	mov	r2, r0
 8009412:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009414:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8009416:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009418:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800941c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800941e:	4b0b      	ldr	r3, [pc, #44]	@ (800944c <find_volume+0x4a4>)
 8009420:	881b      	ldrh	r3, [r3, #0]
 8009422:	3301      	adds	r3, #1
 8009424:	b29a      	uxth	r2, r3
 8009426:	4b09      	ldr	r3, [pc, #36]	@ (800944c <find_volume+0x4a4>)
 8009428:	801a      	strh	r2, [r3, #0]
 800942a:	4b08      	ldr	r3, [pc, #32]	@ (800944c <find_volume+0x4a4>)
 800942c:	881a      	ldrh	r2, [r3, #0]
 800942e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009430:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8009432:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009434:	f7fe fde6 	bl	8008004 <clear_lock>
#endif
	return FR_OK;
 8009438:	2300      	movs	r3, #0
}
 800943a:	4618      	mov	r0, r3
 800943c:	3758      	adds	r7, #88	@ 0x58
 800943e:	46bd      	mov	sp, r7
 8009440:	bd80      	pop	{r7, pc}
 8009442:	bf00      	nop
 8009444:	41615252 	.word	0x41615252
 8009448:	61417272 	.word	0x61417272
 800944c:	20000a30 	.word	0x20000a30

08009450 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8009450:	b580      	push	{r7, lr}
 8009452:	b084      	sub	sp, #16
 8009454:	af00      	add	r7, sp, #0
 8009456:	6078      	str	r0, [r7, #4]
 8009458:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800945a:	2309      	movs	r3, #9
 800945c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	2b00      	cmp	r3, #0
 8009462:	d02e      	beq.n	80094c2 <validate+0x72>
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	2b00      	cmp	r3, #0
 800946a:	d02a      	beq.n	80094c2 <validate+0x72>
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	781b      	ldrb	r3, [r3, #0]
 8009472:	2b00      	cmp	r3, #0
 8009474:	d025      	beq.n	80094c2 <validate+0x72>
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	889a      	ldrh	r2, [r3, #4]
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	88db      	ldrh	r3, [r3, #6]
 8009480:	429a      	cmp	r2, r3
 8009482:	d11e      	bne.n	80094c2 <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	4618      	mov	r0, r3
 800948a:	f7fe fc42 	bl	8007d12 <lock_fs>
 800948e:	4603      	mov	r3, r0
 8009490:	2b00      	cmp	r3, #0
 8009492:	d014      	beq.n	80094be <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	785b      	ldrb	r3, [r3, #1]
 800949a:	4618      	mov	r0, r3
 800949c:	f7fe fa9a 	bl	80079d4 <disk_status>
 80094a0:	4603      	mov	r3, r0
 80094a2:	f003 0301 	and.w	r3, r3, #1
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d102      	bne.n	80094b0 <validate+0x60>
				res = FR_OK;
 80094aa:	2300      	movs	r3, #0
 80094ac:	73fb      	strb	r3, [r7, #15]
 80094ae:	e008      	b.n	80094c2 <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	2100      	movs	r1, #0
 80094b6:	4618      	mov	r0, r3
 80094b8:	f7fe fc41 	bl	8007d3e <unlock_fs>
 80094bc:	e001      	b.n	80094c2 <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 80094be:	230f      	movs	r3, #15
 80094c0:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80094c2:	7bfb      	ldrb	r3, [r7, #15]
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d102      	bne.n	80094ce <validate+0x7e>
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	e000      	b.n	80094d0 <validate+0x80>
 80094ce:	2300      	movs	r3, #0
 80094d0:	683a      	ldr	r2, [r7, #0]
 80094d2:	6013      	str	r3, [r2, #0]
	return res;
 80094d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80094d6:	4618      	mov	r0, r3
 80094d8:	3710      	adds	r7, #16
 80094da:	46bd      	mov	sp, r7
 80094dc:	bd80      	pop	{r7, pc}
	...

080094e0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80094e0:	b580      	push	{r7, lr}
 80094e2:	b088      	sub	sp, #32
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	60f8      	str	r0, [r7, #12]
 80094e8:	60b9      	str	r1, [r7, #8]
 80094ea:	4613      	mov	r3, r2
 80094ec:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80094ee:	68bb      	ldr	r3, [r7, #8]
 80094f0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80094f2:	f107 0310 	add.w	r3, r7, #16
 80094f6:	4618      	mov	r0, r3
 80094f8:	f7ff fcbb 	bl	8008e72 <get_ldnumber>
 80094fc:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80094fe:	69fb      	ldr	r3, [r7, #28]
 8009500:	2b00      	cmp	r3, #0
 8009502:	da01      	bge.n	8009508 <f_mount+0x28>
 8009504:	230b      	movs	r3, #11
 8009506:	e048      	b.n	800959a <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8009508:	4a26      	ldr	r2, [pc, #152]	@ (80095a4 <f_mount+0xc4>)
 800950a:	69fb      	ldr	r3, [r7, #28]
 800950c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009510:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8009512:	69bb      	ldr	r3, [r7, #24]
 8009514:	2b00      	cmp	r3, #0
 8009516:	d00f      	beq.n	8009538 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8009518:	69b8      	ldr	r0, [r7, #24]
 800951a:	f7fe fd73 	bl	8008004 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800951e:	69bb      	ldr	r3, [r7, #24]
 8009520:	68db      	ldr	r3, [r3, #12]
 8009522:	4618      	mov	r0, r3
 8009524:	f000 fcdc 	bl	8009ee0 <ff_del_syncobj>
 8009528:	4603      	mov	r3, r0
 800952a:	2b00      	cmp	r3, #0
 800952c:	d101      	bne.n	8009532 <f_mount+0x52>
 800952e:	2302      	movs	r3, #2
 8009530:	e033      	b.n	800959a <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8009532:	69bb      	ldr	r3, [r7, #24]
 8009534:	2200      	movs	r2, #0
 8009536:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	2b00      	cmp	r3, #0
 800953c:	d00f      	beq.n	800955e <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	2200      	movs	r2, #0
 8009542:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 8009544:	69fb      	ldr	r3, [r7, #28]
 8009546:	b2da      	uxtb	r2, r3
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	330c      	adds	r3, #12
 800954c:	4619      	mov	r1, r3
 800954e:	4610      	mov	r0, r2
 8009550:	f000 fcab 	bl	8009eaa <ff_cre_syncobj>
 8009554:	4603      	mov	r3, r0
 8009556:	2b00      	cmp	r3, #0
 8009558:	d101      	bne.n	800955e <f_mount+0x7e>
 800955a:	2302      	movs	r3, #2
 800955c:	e01d      	b.n	800959a <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800955e:	68fa      	ldr	r2, [r7, #12]
 8009560:	4910      	ldr	r1, [pc, #64]	@ (80095a4 <f_mount+0xc4>)
 8009562:	69fb      	ldr	r3, [r7, #28]
 8009564:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	2b00      	cmp	r3, #0
 800956c:	d002      	beq.n	8009574 <f_mount+0x94>
 800956e:	79fb      	ldrb	r3, [r7, #7]
 8009570:	2b01      	cmp	r3, #1
 8009572:	d001      	beq.n	8009578 <f_mount+0x98>
 8009574:	2300      	movs	r3, #0
 8009576:	e010      	b.n	800959a <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8009578:	f107 010c 	add.w	r1, r7, #12
 800957c:	f107 0308 	add.w	r3, r7, #8
 8009580:	2200      	movs	r2, #0
 8009582:	4618      	mov	r0, r3
 8009584:	f7ff fd10 	bl	8008fa8 <find_volume>
 8009588:	4603      	mov	r3, r0
 800958a:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	7dfa      	ldrb	r2, [r7, #23]
 8009590:	4611      	mov	r1, r2
 8009592:	4618      	mov	r0, r3
 8009594:	f7fe fbd3 	bl	8007d3e <unlock_fs>
 8009598:	7dfb      	ldrb	r3, [r7, #23]
}
 800959a:	4618      	mov	r0, r3
 800959c:	3720      	adds	r7, #32
 800959e:	46bd      	mov	sp, r7
 80095a0:	bd80      	pop	{r7, pc}
 80095a2:	bf00      	nop
 80095a4:	20000a2c 	.word	0x20000a2c

080095a8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80095a8:	b580      	push	{r7, lr}
 80095aa:	b098      	sub	sp, #96	@ 0x60
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	60f8      	str	r0, [r7, #12]
 80095b0:	60b9      	str	r1, [r7, #8]
 80095b2:	4613      	mov	r3, r2
 80095b4:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d101      	bne.n	80095c0 <f_open+0x18>
 80095bc:	2309      	movs	r3, #9
 80095be:	e1b0      	b.n	8009922 <f_open+0x37a>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80095c0:	79fb      	ldrb	r3, [r7, #7]
 80095c2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80095c6:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80095c8:	79fa      	ldrb	r2, [r7, #7]
 80095ca:	f107 0110 	add.w	r1, r7, #16
 80095ce:	f107 0308 	add.w	r3, r7, #8
 80095d2:	4618      	mov	r0, r3
 80095d4:	f7ff fce8 	bl	8008fa8 <find_volume>
 80095d8:	4603      	mov	r3, r0
 80095da:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 80095de:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	f040 818d 	bne.w	8009902 <f_open+0x35a>
		dj.obj.fs = fs;
 80095e8:	693b      	ldr	r3, [r7, #16]
 80095ea:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80095ec:	68ba      	ldr	r2, [r7, #8]
 80095ee:	f107 0314 	add.w	r3, r7, #20
 80095f2:	4611      	mov	r1, r2
 80095f4:	4618      	mov	r0, r3
 80095f6:	f7ff fbcb 	bl	8008d90 <follow_path>
 80095fa:	4603      	mov	r3, r0
 80095fc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8009600:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009604:	2b00      	cmp	r3, #0
 8009606:	d118      	bne.n	800963a <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8009608:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800960c:	b25b      	sxtb	r3, r3
 800960e:	2b00      	cmp	r3, #0
 8009610:	da03      	bge.n	800961a <f_open+0x72>
				res = FR_INVALID_NAME;
 8009612:	2306      	movs	r3, #6
 8009614:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8009618:	e00f      	b.n	800963a <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800961a:	79fb      	ldrb	r3, [r7, #7]
 800961c:	2b01      	cmp	r3, #1
 800961e:	bf8c      	ite	hi
 8009620:	2301      	movhi	r3, #1
 8009622:	2300      	movls	r3, #0
 8009624:	b2db      	uxtb	r3, r3
 8009626:	461a      	mov	r2, r3
 8009628:	f107 0314 	add.w	r3, r7, #20
 800962c:	4611      	mov	r1, r2
 800962e:	4618      	mov	r0, r3
 8009630:	f7fe fba0 	bl	8007d74 <chk_lock>
 8009634:	4603      	mov	r3, r0
 8009636:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800963a:	79fb      	ldrb	r3, [r7, #7]
 800963c:	f003 031c 	and.w	r3, r3, #28
 8009640:	2b00      	cmp	r3, #0
 8009642:	d07f      	beq.n	8009744 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 8009644:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009648:	2b00      	cmp	r3, #0
 800964a:	d017      	beq.n	800967c <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800964c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009650:	2b04      	cmp	r3, #4
 8009652:	d10e      	bne.n	8009672 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8009654:	f7fe fbea 	bl	8007e2c <enq_lock>
 8009658:	4603      	mov	r3, r0
 800965a:	2b00      	cmp	r3, #0
 800965c:	d006      	beq.n	800966c <f_open+0xc4>
 800965e:	f107 0314 	add.w	r3, r7, #20
 8009662:	4618      	mov	r0, r3
 8009664:	f7ff face 	bl	8008c04 <dir_register>
 8009668:	4603      	mov	r3, r0
 800966a:	e000      	b.n	800966e <f_open+0xc6>
 800966c:	2312      	movs	r3, #18
 800966e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8009672:	79fb      	ldrb	r3, [r7, #7]
 8009674:	f043 0308 	orr.w	r3, r3, #8
 8009678:	71fb      	strb	r3, [r7, #7]
 800967a:	e010      	b.n	800969e <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800967c:	7ebb      	ldrb	r3, [r7, #26]
 800967e:	f003 0311 	and.w	r3, r3, #17
 8009682:	2b00      	cmp	r3, #0
 8009684:	d003      	beq.n	800968e <f_open+0xe6>
					res = FR_DENIED;
 8009686:	2307      	movs	r3, #7
 8009688:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800968c:	e007      	b.n	800969e <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800968e:	79fb      	ldrb	r3, [r7, #7]
 8009690:	f003 0304 	and.w	r3, r3, #4
 8009694:	2b00      	cmp	r3, #0
 8009696:	d002      	beq.n	800969e <f_open+0xf6>
 8009698:	2308      	movs	r3, #8
 800969a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800969e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d168      	bne.n	8009778 <f_open+0x1d0>
 80096a6:	79fb      	ldrb	r3, [r7, #7]
 80096a8:	f003 0308 	and.w	r3, r3, #8
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d063      	beq.n	8009778 <f_open+0x1d0>
				dw = GET_FATTIME();
 80096b0:	f7fd fc58 	bl	8006f64 <get_fattime>
 80096b4:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80096b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80096b8:	330e      	adds	r3, #14
 80096ba:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80096bc:	4618      	mov	r0, r3
 80096be:	f7fe fa7e 	bl	8007bbe <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80096c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80096c4:	3316      	adds	r3, #22
 80096c6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80096c8:	4618      	mov	r0, r3
 80096ca:	f7fe fa78 	bl	8007bbe <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80096ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80096d0:	330b      	adds	r3, #11
 80096d2:	2220      	movs	r2, #32
 80096d4:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80096d6:	693b      	ldr	r3, [r7, #16]
 80096d8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80096da:	4611      	mov	r1, r2
 80096dc:	4618      	mov	r0, r3
 80096de:	f7ff f9fd 	bl	8008adc <ld_clust>
 80096e2:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80096e4:	693b      	ldr	r3, [r7, #16]
 80096e6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80096e8:	2200      	movs	r2, #0
 80096ea:	4618      	mov	r0, r3
 80096ec:	f7ff fa15 	bl	8008b1a <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80096f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80096f2:	331c      	adds	r3, #28
 80096f4:	2100      	movs	r1, #0
 80096f6:	4618      	mov	r0, r3
 80096f8:	f7fe fa61 	bl	8007bbe <st_dword>
					fs->wflag = 1;
 80096fc:	693b      	ldr	r3, [r7, #16]
 80096fe:	2201      	movs	r2, #1
 8009700:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8009702:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009704:	2b00      	cmp	r3, #0
 8009706:	d037      	beq.n	8009778 <f_open+0x1d0>
						dw = fs->winsect;
 8009708:	693b      	ldr	r3, [r7, #16]
 800970a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800970c:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800970e:	f107 0314 	add.w	r3, r7, #20
 8009712:	2200      	movs	r2, #0
 8009714:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8009716:	4618      	mov	r0, r3
 8009718:	f7fe ff28 	bl	800856c <remove_chain>
 800971c:	4603      	mov	r3, r0
 800971e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 8009722:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009726:	2b00      	cmp	r3, #0
 8009728:	d126      	bne.n	8009778 <f_open+0x1d0>
							res = move_window(fs, dw);
 800972a:	693b      	ldr	r3, [r7, #16]
 800972c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800972e:	4618      	mov	r0, r3
 8009730:	f7fe fcd0 	bl	80080d4 <move_window>
 8009734:	4603      	mov	r3, r0
 8009736:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800973a:	693b      	ldr	r3, [r7, #16]
 800973c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800973e:	3a01      	subs	r2, #1
 8009740:	611a      	str	r2, [r3, #16]
 8009742:	e019      	b.n	8009778 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8009744:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009748:	2b00      	cmp	r3, #0
 800974a:	d115      	bne.n	8009778 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800974c:	7ebb      	ldrb	r3, [r7, #26]
 800974e:	f003 0310 	and.w	r3, r3, #16
 8009752:	2b00      	cmp	r3, #0
 8009754:	d003      	beq.n	800975e <f_open+0x1b6>
					res = FR_NO_FILE;
 8009756:	2304      	movs	r3, #4
 8009758:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800975c:	e00c      	b.n	8009778 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800975e:	79fb      	ldrb	r3, [r7, #7]
 8009760:	f003 0302 	and.w	r3, r3, #2
 8009764:	2b00      	cmp	r3, #0
 8009766:	d007      	beq.n	8009778 <f_open+0x1d0>
 8009768:	7ebb      	ldrb	r3, [r7, #26]
 800976a:	f003 0301 	and.w	r3, r3, #1
 800976e:	2b00      	cmp	r3, #0
 8009770:	d002      	beq.n	8009778 <f_open+0x1d0>
						res = FR_DENIED;
 8009772:	2307      	movs	r3, #7
 8009774:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8009778:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800977c:	2b00      	cmp	r3, #0
 800977e:	d126      	bne.n	80097ce <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8009780:	79fb      	ldrb	r3, [r7, #7]
 8009782:	f003 0308 	and.w	r3, r3, #8
 8009786:	2b00      	cmp	r3, #0
 8009788:	d003      	beq.n	8009792 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800978a:	79fb      	ldrb	r3, [r7, #7]
 800978c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009790:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8009792:	693b      	ldr	r3, [r7, #16]
 8009794:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800979a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80097a0:	79fb      	ldrb	r3, [r7, #7]
 80097a2:	2b01      	cmp	r3, #1
 80097a4:	bf8c      	ite	hi
 80097a6:	2301      	movhi	r3, #1
 80097a8:	2300      	movls	r3, #0
 80097aa:	b2db      	uxtb	r3, r3
 80097ac:	461a      	mov	r2, r3
 80097ae:	f107 0314 	add.w	r3, r7, #20
 80097b2:	4611      	mov	r1, r2
 80097b4:	4618      	mov	r0, r3
 80097b6:	f7fe fb5b 	bl	8007e70 <inc_lock>
 80097ba:	4602      	mov	r2, r0
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	691b      	ldr	r3, [r3, #16]
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d102      	bne.n	80097ce <f_open+0x226>
 80097c8:	2302      	movs	r3, #2
 80097ca:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 80097ce:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	f040 8095 	bne.w	8009902 <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80097d8:	693b      	ldr	r3, [r7, #16]
 80097da:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80097dc:	4611      	mov	r1, r2
 80097de:	4618      	mov	r0, r3
 80097e0:	f7ff f97c 	bl	8008adc <ld_clust>
 80097e4:	4602      	mov	r2, r0
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80097ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80097ec:	331c      	adds	r3, #28
 80097ee:	4618      	mov	r0, r3
 80097f0:	f7fe f9a7 	bl	8007b42 <ld_dword>
 80097f4:	4602      	mov	r2, r0
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	2200      	movs	r2, #0
 80097fe:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8009800:	693a      	ldr	r2, [r7, #16]
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8009806:	693b      	ldr	r3, [r7, #16]
 8009808:	88da      	ldrh	r2, [r3, #6]
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	79fa      	ldrb	r2, [r7, #7]
 8009812:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	2200      	movs	r2, #0
 8009818:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	2200      	movs	r2, #0
 800981e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	2200      	movs	r2, #0
 8009824:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	3330      	adds	r3, #48	@ 0x30
 800982a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800982e:	2100      	movs	r1, #0
 8009830:	4618      	mov	r0, r3
 8009832:	f7fe fa11 	bl	8007c58 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8009836:	79fb      	ldrb	r3, [r7, #7]
 8009838:	f003 0320 	and.w	r3, r3, #32
 800983c:	2b00      	cmp	r3, #0
 800983e:	d060      	beq.n	8009902 <f_open+0x35a>
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	68db      	ldr	r3, [r3, #12]
 8009844:	2b00      	cmp	r3, #0
 8009846:	d05c      	beq.n	8009902 <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	68da      	ldr	r2, [r3, #12]
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8009850:	693b      	ldr	r3, [r7, #16]
 8009852:	895b      	ldrh	r3, [r3, #10]
 8009854:	025b      	lsls	r3, r3, #9
 8009856:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	689b      	ldr	r3, [r3, #8]
 800985c:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	68db      	ldr	r3, [r3, #12]
 8009862:	657b      	str	r3, [r7, #84]	@ 0x54
 8009864:	e016      	b.n	8009894 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800986a:	4618      	mov	r0, r3
 800986c:	f7fe fced 	bl	800824a <get_fat>
 8009870:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8009872:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009874:	2b01      	cmp	r3, #1
 8009876:	d802      	bhi.n	800987e <f_open+0x2d6>
 8009878:	2302      	movs	r3, #2
 800987a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800987e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009880:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009884:	d102      	bne.n	800988c <f_open+0x2e4>
 8009886:	2301      	movs	r3, #1
 8009888:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800988c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800988e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009890:	1ad3      	subs	r3, r2, r3
 8009892:	657b      	str	r3, [r7, #84]	@ 0x54
 8009894:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009898:	2b00      	cmp	r3, #0
 800989a:	d103      	bne.n	80098a4 <f_open+0x2fc>
 800989c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800989e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80098a0:	429a      	cmp	r2, r3
 80098a2:	d8e0      	bhi.n	8009866 <f_open+0x2be>
				}
				fp->clust = clst;
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80098a8:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80098aa:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d127      	bne.n	8009902 <f_open+0x35a>
 80098b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80098b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d022      	beq.n	8009902 <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80098bc:	693b      	ldr	r3, [r7, #16]
 80098be:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80098c0:	4618      	mov	r0, r3
 80098c2:	f7fe fca3 	bl	800820c <clust2sect>
 80098c6:	6478      	str	r0, [r7, #68]	@ 0x44
 80098c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d103      	bne.n	80098d6 <f_open+0x32e>
						res = FR_INT_ERR;
 80098ce:	2302      	movs	r3, #2
 80098d0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80098d4:	e015      	b.n	8009902 <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80098d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80098d8:	0a5a      	lsrs	r2, r3, #9
 80098da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80098dc:	441a      	add	r2, r3
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80098e2:	693b      	ldr	r3, [r7, #16]
 80098e4:	7858      	ldrb	r0, [r3, #1]
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	6a1a      	ldr	r2, [r3, #32]
 80098f0:	2301      	movs	r3, #1
 80098f2:	f7fe f8af 	bl	8007a54 <disk_read>
 80098f6:	4603      	mov	r3, r0
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d002      	beq.n	8009902 <f_open+0x35a>
 80098fc:	2301      	movs	r3, #1
 80098fe:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8009902:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009906:	2b00      	cmp	r3, #0
 8009908:	d002      	beq.n	8009910 <f_open+0x368>
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	2200      	movs	r2, #0
 800990e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8009910:	693b      	ldr	r3, [r7, #16]
 8009912:	f897 205f 	ldrb.w	r2, [r7, #95]	@ 0x5f
 8009916:	4611      	mov	r1, r2
 8009918:	4618      	mov	r0, r3
 800991a:	f7fe fa10 	bl	8007d3e <unlock_fs>
 800991e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 8009922:	4618      	mov	r0, r3
 8009924:	3760      	adds	r7, #96	@ 0x60
 8009926:	46bd      	mov	sp, r7
 8009928:	bd80      	pop	{r7, pc}

0800992a <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800992a:	b580      	push	{r7, lr}
 800992c:	b08e      	sub	sp, #56	@ 0x38
 800992e:	af00      	add	r7, sp, #0
 8009930:	60f8      	str	r0, [r7, #12]
 8009932:	60b9      	str	r1, [r7, #8]
 8009934:	607a      	str	r2, [r7, #4]
 8009936:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8009938:	68bb      	ldr	r3, [r7, #8]
 800993a:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 800993c:	683b      	ldr	r3, [r7, #0]
 800993e:	2200      	movs	r2, #0
 8009940:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	f107 0214 	add.w	r2, r7, #20
 8009948:	4611      	mov	r1, r2
 800994a:	4618      	mov	r0, r3
 800994c:	f7ff fd80 	bl	8009450 <validate>
 8009950:	4603      	mov	r3, r0
 8009952:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8009956:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800995a:	2b00      	cmp	r3, #0
 800995c:	d107      	bne.n	800996e <f_read+0x44>
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	7d5b      	ldrb	r3, [r3, #21]
 8009962:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8009966:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800996a:	2b00      	cmp	r3, #0
 800996c:	d009      	beq.n	8009982 <f_read+0x58>
 800996e:	697b      	ldr	r3, [r7, #20]
 8009970:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8009974:	4611      	mov	r1, r2
 8009976:	4618      	mov	r0, r3
 8009978:	f7fe f9e1 	bl	8007d3e <unlock_fs>
 800997c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009980:	e13d      	b.n	8009bfe <f_read+0x2d4>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	7d1b      	ldrb	r3, [r3, #20]
 8009986:	f003 0301 	and.w	r3, r3, #1
 800998a:	2b00      	cmp	r3, #0
 800998c:	d106      	bne.n	800999c <f_read+0x72>
 800998e:	697b      	ldr	r3, [r7, #20]
 8009990:	2107      	movs	r1, #7
 8009992:	4618      	mov	r0, r3
 8009994:	f7fe f9d3 	bl	8007d3e <unlock_fs>
 8009998:	2307      	movs	r3, #7
 800999a:	e130      	b.n	8009bfe <f_read+0x2d4>
	remain = fp->obj.objsize - fp->fptr;
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	68da      	ldr	r2, [r3, #12]
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	699b      	ldr	r3, [r3, #24]
 80099a4:	1ad3      	subs	r3, r2, r3
 80099a6:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80099a8:	687a      	ldr	r2, [r7, #4]
 80099aa:	6a3b      	ldr	r3, [r7, #32]
 80099ac:	429a      	cmp	r2, r3
 80099ae:	f240 811c 	bls.w	8009bea <f_read+0x2c0>
 80099b2:	6a3b      	ldr	r3, [r7, #32]
 80099b4:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 80099b6:	e118      	b.n	8009bea <f_read+0x2c0>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	699b      	ldr	r3, [r3, #24]
 80099bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	f040 80e4 	bne.w	8009b8e <f_read+0x264>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	699b      	ldr	r3, [r3, #24]
 80099ca:	0a5b      	lsrs	r3, r3, #9
 80099cc:	697a      	ldr	r2, [r7, #20]
 80099ce:	8952      	ldrh	r2, [r2, #10]
 80099d0:	3a01      	subs	r2, #1
 80099d2:	4013      	ands	r3, r2
 80099d4:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 80099d6:	69fb      	ldr	r3, [r7, #28]
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d139      	bne.n	8009a50 <f_read+0x126>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	699b      	ldr	r3, [r3, #24]
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d103      	bne.n	80099ec <f_read+0xc2>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	689b      	ldr	r3, [r3, #8]
 80099e8:	633b      	str	r3, [r7, #48]	@ 0x30
 80099ea:	e013      	b.n	8009a14 <f_read+0xea>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d007      	beq.n	8009a04 <f_read+0xda>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	699b      	ldr	r3, [r3, #24]
 80099f8:	4619      	mov	r1, r3
 80099fa:	68f8      	ldr	r0, [r7, #12]
 80099fc:	f7fe feb3 	bl	8008766 <clmt_clust>
 8009a00:	6338      	str	r0, [r7, #48]	@ 0x30
 8009a02:	e007      	b.n	8009a14 <f_read+0xea>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8009a04:	68fa      	ldr	r2, [r7, #12]
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	69db      	ldr	r3, [r3, #28]
 8009a0a:	4619      	mov	r1, r3
 8009a0c:	4610      	mov	r0, r2
 8009a0e:	f7fe fc1c 	bl	800824a <get_fat>
 8009a12:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8009a14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a16:	2b01      	cmp	r3, #1
 8009a18:	d809      	bhi.n	8009a2e <f_read+0x104>
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	2202      	movs	r2, #2
 8009a1e:	755a      	strb	r2, [r3, #21]
 8009a20:	697b      	ldr	r3, [r7, #20]
 8009a22:	2102      	movs	r1, #2
 8009a24:	4618      	mov	r0, r3
 8009a26:	f7fe f98a 	bl	8007d3e <unlock_fs>
 8009a2a:	2302      	movs	r3, #2
 8009a2c:	e0e7      	b.n	8009bfe <f_read+0x2d4>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009a2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a34:	d109      	bne.n	8009a4a <f_read+0x120>
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	2201      	movs	r2, #1
 8009a3a:	755a      	strb	r2, [r3, #21]
 8009a3c:	697b      	ldr	r3, [r7, #20]
 8009a3e:	2101      	movs	r1, #1
 8009a40:	4618      	mov	r0, r3
 8009a42:	f7fe f97c 	bl	8007d3e <unlock_fs>
 8009a46:	2301      	movs	r3, #1
 8009a48:	e0d9      	b.n	8009bfe <f_read+0x2d4>
				fp->clust = clst;				/* Update current cluster */
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009a4e:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8009a50:	697a      	ldr	r2, [r7, #20]
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	69db      	ldr	r3, [r3, #28]
 8009a56:	4619      	mov	r1, r3
 8009a58:	4610      	mov	r0, r2
 8009a5a:	f7fe fbd7 	bl	800820c <clust2sect>
 8009a5e:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8009a60:	69bb      	ldr	r3, [r7, #24]
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d109      	bne.n	8009a7a <f_read+0x150>
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	2202      	movs	r2, #2
 8009a6a:	755a      	strb	r2, [r3, #21]
 8009a6c:	697b      	ldr	r3, [r7, #20]
 8009a6e:	2102      	movs	r1, #2
 8009a70:	4618      	mov	r0, r3
 8009a72:	f7fe f964 	bl	8007d3e <unlock_fs>
 8009a76:	2302      	movs	r3, #2
 8009a78:	e0c1      	b.n	8009bfe <f_read+0x2d4>
			sect += csect;
 8009a7a:	69ba      	ldr	r2, [r7, #24]
 8009a7c:	69fb      	ldr	r3, [r7, #28]
 8009a7e:	4413      	add	r3, r2
 8009a80:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	0a5b      	lsrs	r3, r3, #9
 8009a86:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8009a88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d03e      	beq.n	8009b0c <f_read+0x1e2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8009a8e:	69fa      	ldr	r2, [r7, #28]
 8009a90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a92:	4413      	add	r3, r2
 8009a94:	697a      	ldr	r2, [r7, #20]
 8009a96:	8952      	ldrh	r2, [r2, #10]
 8009a98:	4293      	cmp	r3, r2
 8009a9a:	d905      	bls.n	8009aa8 <f_read+0x17e>
					cc = fs->csize - csect;
 8009a9c:	697b      	ldr	r3, [r7, #20]
 8009a9e:	895b      	ldrh	r3, [r3, #10]
 8009aa0:	461a      	mov	r2, r3
 8009aa2:	69fb      	ldr	r3, [r7, #28]
 8009aa4:	1ad3      	subs	r3, r2, r3
 8009aa6:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009aa8:	697b      	ldr	r3, [r7, #20]
 8009aaa:	7858      	ldrb	r0, [r3, #1]
 8009aac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009aae:	69ba      	ldr	r2, [r7, #24]
 8009ab0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009ab2:	f7fd ffcf 	bl	8007a54 <disk_read>
 8009ab6:	4603      	mov	r3, r0
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d009      	beq.n	8009ad0 <f_read+0x1a6>
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	2201      	movs	r2, #1
 8009ac0:	755a      	strb	r2, [r3, #21]
 8009ac2:	697b      	ldr	r3, [r7, #20]
 8009ac4:	2101      	movs	r1, #1
 8009ac6:	4618      	mov	r0, r3
 8009ac8:	f7fe f939 	bl	8007d3e <unlock_fs>
 8009acc:	2301      	movs	r3, #1
 8009ace:	e096      	b.n	8009bfe <f_read+0x2d4>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	7d1b      	ldrb	r3, [r3, #20]
 8009ad4:	b25b      	sxtb	r3, r3
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	da14      	bge.n	8009b04 <f_read+0x1da>
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	6a1a      	ldr	r2, [r3, #32]
 8009ade:	69bb      	ldr	r3, [r7, #24]
 8009ae0:	1ad3      	subs	r3, r2, r3
 8009ae2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009ae4:	429a      	cmp	r2, r3
 8009ae6:	d90d      	bls.n	8009b04 <f_read+0x1da>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	6a1a      	ldr	r2, [r3, #32]
 8009aec:	69bb      	ldr	r3, [r7, #24]
 8009aee:	1ad3      	subs	r3, r2, r3
 8009af0:	025b      	lsls	r3, r3, #9
 8009af2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009af4:	18d0      	adds	r0, r2, r3
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	3330      	adds	r3, #48	@ 0x30
 8009afa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009afe:	4619      	mov	r1, r3
 8009b00:	f7fe f889 	bl	8007c16 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8009b04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b06:	025b      	lsls	r3, r3, #9
 8009b08:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 8009b0a:	e05a      	b.n	8009bc2 <f_read+0x298>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	6a1b      	ldr	r3, [r3, #32]
 8009b10:	69ba      	ldr	r2, [r7, #24]
 8009b12:	429a      	cmp	r2, r3
 8009b14:	d038      	beq.n	8009b88 <f_read+0x25e>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	7d1b      	ldrb	r3, [r3, #20]
 8009b1a:	b25b      	sxtb	r3, r3
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	da1d      	bge.n	8009b5c <f_read+0x232>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009b20:	697b      	ldr	r3, [r7, #20]
 8009b22:	7858      	ldrb	r0, [r3, #1]
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	6a1a      	ldr	r2, [r3, #32]
 8009b2e:	2301      	movs	r3, #1
 8009b30:	f7fd ffb0 	bl	8007a94 <disk_write>
 8009b34:	4603      	mov	r3, r0
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d009      	beq.n	8009b4e <f_read+0x224>
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	2201      	movs	r2, #1
 8009b3e:	755a      	strb	r2, [r3, #21]
 8009b40:	697b      	ldr	r3, [r7, #20]
 8009b42:	2101      	movs	r1, #1
 8009b44:	4618      	mov	r0, r3
 8009b46:	f7fe f8fa 	bl	8007d3e <unlock_fs>
 8009b4a:	2301      	movs	r3, #1
 8009b4c:	e057      	b.n	8009bfe <f_read+0x2d4>
					fp->flag &= (BYTE)~FA_DIRTY;
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	7d1b      	ldrb	r3, [r3, #20]
 8009b52:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009b56:	b2da      	uxtb	r2, r3
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8009b5c:	697b      	ldr	r3, [r7, #20]
 8009b5e:	7858      	ldrb	r0, [r3, #1]
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009b66:	2301      	movs	r3, #1
 8009b68:	69ba      	ldr	r2, [r7, #24]
 8009b6a:	f7fd ff73 	bl	8007a54 <disk_read>
 8009b6e:	4603      	mov	r3, r0
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d009      	beq.n	8009b88 <f_read+0x25e>
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	2201      	movs	r2, #1
 8009b78:	755a      	strb	r2, [r3, #21]
 8009b7a:	697b      	ldr	r3, [r7, #20]
 8009b7c:	2101      	movs	r1, #1
 8009b7e:	4618      	mov	r0, r3
 8009b80:	f7fe f8dd 	bl	8007d3e <unlock_fs>
 8009b84:	2301      	movs	r3, #1
 8009b86:	e03a      	b.n	8009bfe <f_read+0x2d4>
			}
#endif
			fp->sect = sect;
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	69ba      	ldr	r2, [r7, #24]
 8009b8c:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	699b      	ldr	r3, [r3, #24]
 8009b92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b96:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8009b9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8009b9c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	429a      	cmp	r2, r3
 8009ba2:	d901      	bls.n	8009ba8 <f_read+0x27e>
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	699b      	ldr	r3, [r3, #24]
 8009bb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009bb6:	4413      	add	r3, r2
 8009bb8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009bba:	4619      	mov	r1, r3
 8009bbc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009bbe:	f7fe f82a 	bl	8007c16 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8009bc2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009bc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009bc6:	4413      	add	r3, r2
 8009bc8:	627b      	str	r3, [r7, #36]	@ 0x24
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	699a      	ldr	r2, [r3, #24]
 8009bce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009bd0:	441a      	add	r2, r3
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	619a      	str	r2, [r3, #24]
 8009bd6:	683b      	ldr	r3, [r7, #0]
 8009bd8:	681a      	ldr	r2, [r3, #0]
 8009bda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009bdc:	441a      	add	r2, r3
 8009bde:	683b      	ldr	r3, [r7, #0]
 8009be0:	601a      	str	r2, [r3, #0]
 8009be2:	687a      	ldr	r2, [r7, #4]
 8009be4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009be6:	1ad3      	subs	r3, r2, r3
 8009be8:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	f47f aee3 	bne.w	80099b8 <f_read+0x8e>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8009bf2:	697b      	ldr	r3, [r7, #20]
 8009bf4:	2100      	movs	r1, #0
 8009bf6:	4618      	mov	r0, r3
 8009bf8:	f7fe f8a1 	bl	8007d3e <unlock_fs>
 8009bfc:	2300      	movs	r3, #0
}
 8009bfe:	4618      	mov	r0, r3
 8009c00:	3738      	adds	r7, #56	@ 0x38
 8009c02:	46bd      	mov	sp, r7
 8009c04:	bd80      	pop	{r7, pc}

08009c06 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8009c06:	b580      	push	{r7, lr}
 8009c08:	b086      	sub	sp, #24
 8009c0a:	af00      	add	r7, sp, #0
 8009c0c:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	f107 0208 	add.w	r2, r7, #8
 8009c14:	4611      	mov	r1, r2
 8009c16:	4618      	mov	r0, r3
 8009c18:	f7ff fc1a 	bl	8009450 <validate>
 8009c1c:	4603      	mov	r3, r0
 8009c1e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8009c20:	7dfb      	ldrb	r3, [r7, #23]
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d16d      	bne.n	8009d02 <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	7d1b      	ldrb	r3, [r3, #20]
 8009c2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d067      	beq.n	8009d02 <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	7d1b      	ldrb	r3, [r3, #20]
 8009c36:	b25b      	sxtb	r3, r3
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	da1a      	bge.n	8009c72 <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8009c3c:	68bb      	ldr	r3, [r7, #8]
 8009c3e:	7858      	ldrb	r0, [r3, #1]
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	6a1a      	ldr	r2, [r3, #32]
 8009c4a:	2301      	movs	r3, #1
 8009c4c:	f7fd ff22 	bl	8007a94 <disk_write>
 8009c50:	4603      	mov	r3, r0
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d006      	beq.n	8009c64 <f_sync+0x5e>
 8009c56:	68bb      	ldr	r3, [r7, #8]
 8009c58:	2101      	movs	r1, #1
 8009c5a:	4618      	mov	r0, r3
 8009c5c:	f7fe f86f 	bl	8007d3e <unlock_fs>
 8009c60:	2301      	movs	r3, #1
 8009c62:	e055      	b.n	8009d10 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	7d1b      	ldrb	r3, [r3, #20]
 8009c68:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009c6c:	b2da      	uxtb	r2, r3
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8009c72:	f7fd f977 	bl	8006f64 <get_fattime>
 8009c76:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8009c78:	68ba      	ldr	r2, [r7, #8]
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c7e:	4619      	mov	r1, r3
 8009c80:	4610      	mov	r0, r2
 8009c82:	f7fe fa27 	bl	80080d4 <move_window>
 8009c86:	4603      	mov	r3, r0
 8009c88:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8009c8a:	7dfb      	ldrb	r3, [r7, #23]
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d138      	bne.n	8009d02 <f_sync+0xfc>
					dir = fp->dir_ptr;
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c94:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	330b      	adds	r3, #11
 8009c9a:	781a      	ldrb	r2, [r3, #0]
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	330b      	adds	r3, #11
 8009ca0:	f042 0220 	orr.w	r2, r2, #32
 8009ca4:	b2d2      	uxtb	r2, r2
 8009ca6:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	6818      	ldr	r0, [r3, #0]
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	689b      	ldr	r3, [r3, #8]
 8009cb0:	461a      	mov	r2, r3
 8009cb2:	68f9      	ldr	r1, [r7, #12]
 8009cb4:	f7fe ff31 	bl	8008b1a <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	f103 021c 	add.w	r2, r3, #28
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	68db      	ldr	r3, [r3, #12]
 8009cc2:	4619      	mov	r1, r3
 8009cc4:	4610      	mov	r0, r2
 8009cc6:	f7fd ff7a 	bl	8007bbe <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	3316      	adds	r3, #22
 8009cce:	6939      	ldr	r1, [r7, #16]
 8009cd0:	4618      	mov	r0, r3
 8009cd2:	f7fd ff74 	bl	8007bbe <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	3312      	adds	r3, #18
 8009cda:	2100      	movs	r1, #0
 8009cdc:	4618      	mov	r0, r3
 8009cde:	f7fd ff53 	bl	8007b88 <st_word>
					fs->wflag = 1;
 8009ce2:	68bb      	ldr	r3, [r7, #8]
 8009ce4:	2201      	movs	r2, #1
 8009ce6:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8009ce8:	68bb      	ldr	r3, [r7, #8]
 8009cea:	4618      	mov	r0, r3
 8009cec:	f7fe fa20 	bl	8008130 <sync_fs>
 8009cf0:	4603      	mov	r3, r0
 8009cf2:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	7d1b      	ldrb	r3, [r3, #20]
 8009cf8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009cfc:	b2da      	uxtb	r2, r3
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8009d02:	68bb      	ldr	r3, [r7, #8]
 8009d04:	7dfa      	ldrb	r2, [r7, #23]
 8009d06:	4611      	mov	r1, r2
 8009d08:	4618      	mov	r0, r3
 8009d0a:	f7fe f818 	bl	8007d3e <unlock_fs>
 8009d0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d10:	4618      	mov	r0, r3
 8009d12:	3718      	adds	r7, #24
 8009d14:	46bd      	mov	sp, r7
 8009d16:	bd80      	pop	{r7, pc}

08009d18 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8009d18:	b580      	push	{r7, lr}
 8009d1a:	b084      	sub	sp, #16
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8009d20:	6878      	ldr	r0, [r7, #4]
 8009d22:	f7ff ff70 	bl	8009c06 <f_sync>
 8009d26:	4603      	mov	r3, r0
 8009d28:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8009d2a:	7bfb      	ldrb	r3, [r7, #15]
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d11d      	bne.n	8009d6c <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	f107 0208 	add.w	r2, r7, #8
 8009d36:	4611      	mov	r1, r2
 8009d38:	4618      	mov	r0, r3
 8009d3a:	f7ff fb89 	bl	8009450 <validate>
 8009d3e:	4603      	mov	r3, r0
 8009d40:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8009d42:	7bfb      	ldrb	r3, [r7, #15]
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d111      	bne.n	8009d6c <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	691b      	ldr	r3, [r3, #16]
 8009d4c:	4618      	mov	r0, r3
 8009d4e:	f7fe f91d 	bl	8007f8c <dec_lock>
 8009d52:	4603      	mov	r3, r0
 8009d54:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8009d56:	7bfb      	ldrb	r3, [r7, #15]
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d102      	bne.n	8009d62 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	2200      	movs	r2, #0
 8009d60:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 8009d62:	68bb      	ldr	r3, [r7, #8]
 8009d64:	2100      	movs	r1, #0
 8009d66:	4618      	mov	r0, r3
 8009d68:	f7fd ffe9 	bl	8007d3e <unlock_fs>
#endif
		}
	}
	return res;
 8009d6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d6e:	4618      	mov	r0, r3
 8009d70:	3710      	adds	r7, #16
 8009d72:	46bd      	mov	sp, r7
 8009d74:	bd80      	pop	{r7, pc}

08009d76 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8009d76:	b580      	push	{r7, lr}
 8009d78:	b088      	sub	sp, #32
 8009d7a:	af00      	add	r7, sp, #0
 8009d7c:	60f8      	str	r0, [r7, #12]
 8009d7e:	60b9      	str	r1, [r7, #8]
 8009d80:	607a      	str	r2, [r7, #4]
	int n = 0;
 8009d82:	2300      	movs	r3, #0
 8009d84:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8009d8a:	e01c      	b.n	8009dc6 <f_gets+0x50>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 8009d8c:	f107 0310 	add.w	r3, r7, #16
 8009d90:	f107 0114 	add.w	r1, r7, #20
 8009d94:	2201      	movs	r2, #1
 8009d96:	6878      	ldr	r0, [r7, #4]
 8009d98:	f7ff fdc7 	bl	800992a <f_read>
		if (rc != 1) break;
 8009d9c:	693b      	ldr	r3, [r7, #16]
 8009d9e:	2b01      	cmp	r3, #1
 8009da0:	d117      	bne.n	8009dd2 <f_gets+0x5c>
		c = s[0];
 8009da2:	7d3b      	ldrb	r3, [r7, #20]
 8009da4:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8009da6:	7dfb      	ldrb	r3, [r7, #23]
 8009da8:	2b0d      	cmp	r3, #13
 8009daa:	d00b      	beq.n	8009dc4 <f_gets+0x4e>
		*p++ = c;
 8009dac:	69bb      	ldr	r3, [r7, #24]
 8009dae:	1c5a      	adds	r2, r3, #1
 8009db0:	61ba      	str	r2, [r7, #24]
 8009db2:	7dfa      	ldrb	r2, [r7, #23]
 8009db4:	701a      	strb	r2, [r3, #0]
		n++;
 8009db6:	69fb      	ldr	r3, [r7, #28]
 8009db8:	3301      	adds	r3, #1
 8009dba:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 8009dbc:	7dfb      	ldrb	r3, [r7, #23]
 8009dbe:	2b0a      	cmp	r3, #10
 8009dc0:	d009      	beq.n	8009dd6 <f_gets+0x60>
 8009dc2:	e000      	b.n	8009dc6 <f_gets+0x50>
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8009dc4:	bf00      	nop
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8009dc6:	68bb      	ldr	r3, [r7, #8]
 8009dc8:	3b01      	subs	r3, #1
 8009dca:	69fa      	ldr	r2, [r7, #28]
 8009dcc:	429a      	cmp	r2, r3
 8009dce:	dbdd      	blt.n	8009d8c <f_gets+0x16>
 8009dd0:	e002      	b.n	8009dd8 <f_gets+0x62>
		if (rc != 1) break;
 8009dd2:	bf00      	nop
 8009dd4:	e000      	b.n	8009dd8 <f_gets+0x62>
		if (c == '\n') break;		/* Break on EOL */
 8009dd6:	bf00      	nop
	}
	*p = 0;
 8009dd8:	69bb      	ldr	r3, [r7, #24]
 8009dda:	2200      	movs	r2, #0
 8009ddc:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8009dde:	69fb      	ldr	r3, [r7, #28]
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d001      	beq.n	8009de8 <f_gets+0x72>
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	e000      	b.n	8009dea <f_gets+0x74>
 8009de8:	2300      	movs	r3, #0
}
 8009dea:	4618      	mov	r0, r3
 8009dec:	3720      	adds	r7, #32
 8009dee:	46bd      	mov	sp, r7
 8009df0:	bd80      	pop	{r7, pc}
	...

08009df4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8009df4:	b480      	push	{r7}
 8009df6:	b087      	sub	sp, #28
 8009df8:	af00      	add	r7, sp, #0
 8009dfa:	60f8      	str	r0, [r7, #12]
 8009dfc:	60b9      	str	r1, [r7, #8]
 8009dfe:	4613      	mov	r3, r2
 8009e00:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8009e02:	2301      	movs	r3, #1
 8009e04:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8009e06:	2300      	movs	r3, #0
 8009e08:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8009e0a:	4b1f      	ldr	r3, [pc, #124]	@ (8009e88 <FATFS_LinkDriverEx+0x94>)
 8009e0c:	7a5b      	ldrb	r3, [r3, #9]
 8009e0e:	b2db      	uxtb	r3, r3
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d131      	bne.n	8009e78 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8009e14:	4b1c      	ldr	r3, [pc, #112]	@ (8009e88 <FATFS_LinkDriverEx+0x94>)
 8009e16:	7a5b      	ldrb	r3, [r3, #9]
 8009e18:	b2db      	uxtb	r3, r3
 8009e1a:	461a      	mov	r2, r3
 8009e1c:	4b1a      	ldr	r3, [pc, #104]	@ (8009e88 <FATFS_LinkDriverEx+0x94>)
 8009e1e:	2100      	movs	r1, #0
 8009e20:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8009e22:	4b19      	ldr	r3, [pc, #100]	@ (8009e88 <FATFS_LinkDriverEx+0x94>)
 8009e24:	7a5b      	ldrb	r3, [r3, #9]
 8009e26:	b2db      	uxtb	r3, r3
 8009e28:	4a17      	ldr	r2, [pc, #92]	@ (8009e88 <FATFS_LinkDriverEx+0x94>)
 8009e2a:	009b      	lsls	r3, r3, #2
 8009e2c:	4413      	add	r3, r2
 8009e2e:	68fa      	ldr	r2, [r7, #12]
 8009e30:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8009e32:	4b15      	ldr	r3, [pc, #84]	@ (8009e88 <FATFS_LinkDriverEx+0x94>)
 8009e34:	7a5b      	ldrb	r3, [r3, #9]
 8009e36:	b2db      	uxtb	r3, r3
 8009e38:	461a      	mov	r2, r3
 8009e3a:	4b13      	ldr	r3, [pc, #76]	@ (8009e88 <FATFS_LinkDriverEx+0x94>)
 8009e3c:	4413      	add	r3, r2
 8009e3e:	79fa      	ldrb	r2, [r7, #7]
 8009e40:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8009e42:	4b11      	ldr	r3, [pc, #68]	@ (8009e88 <FATFS_LinkDriverEx+0x94>)
 8009e44:	7a5b      	ldrb	r3, [r3, #9]
 8009e46:	b2db      	uxtb	r3, r3
 8009e48:	1c5a      	adds	r2, r3, #1
 8009e4a:	b2d1      	uxtb	r1, r2
 8009e4c:	4a0e      	ldr	r2, [pc, #56]	@ (8009e88 <FATFS_LinkDriverEx+0x94>)
 8009e4e:	7251      	strb	r1, [r2, #9]
 8009e50:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8009e52:	7dbb      	ldrb	r3, [r7, #22]
 8009e54:	3330      	adds	r3, #48	@ 0x30
 8009e56:	b2da      	uxtb	r2, r3
 8009e58:	68bb      	ldr	r3, [r7, #8]
 8009e5a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8009e5c:	68bb      	ldr	r3, [r7, #8]
 8009e5e:	3301      	adds	r3, #1
 8009e60:	223a      	movs	r2, #58	@ 0x3a
 8009e62:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8009e64:	68bb      	ldr	r3, [r7, #8]
 8009e66:	3302      	adds	r3, #2
 8009e68:	222f      	movs	r2, #47	@ 0x2f
 8009e6a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8009e6c:	68bb      	ldr	r3, [r7, #8]
 8009e6e:	3303      	adds	r3, #3
 8009e70:	2200      	movs	r2, #0
 8009e72:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8009e74:	2300      	movs	r3, #0
 8009e76:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8009e78:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e7a:	4618      	mov	r0, r3
 8009e7c:	371c      	adds	r7, #28
 8009e7e:	46bd      	mov	sp, r7
 8009e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e84:	4770      	bx	lr
 8009e86:	bf00      	nop
 8009e88:	20000a54 	.word	0x20000a54

08009e8c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8009e8c:	b580      	push	{r7, lr}
 8009e8e:	b082      	sub	sp, #8
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	6078      	str	r0, [r7, #4]
 8009e94:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8009e96:	2200      	movs	r2, #0
 8009e98:	6839      	ldr	r1, [r7, #0]
 8009e9a:	6878      	ldr	r0, [r7, #4]
 8009e9c:	f7ff ffaa 	bl	8009df4 <FATFS_LinkDriverEx>
 8009ea0:	4603      	mov	r3, r0
}
 8009ea2:	4618      	mov	r0, r3
 8009ea4:	3708      	adds	r7, #8
 8009ea6:	46bd      	mov	sp, r7
 8009ea8:	bd80      	pop	{r7, pc}

08009eaa <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 8009eaa:	b580      	push	{r7, lr}
 8009eac:	b084      	sub	sp, #16
 8009eae:	af00      	add	r7, sp, #0
 8009eb0:	4603      	mov	r3, r0
 8009eb2:	6039      	str	r1, [r7, #0]
 8009eb4:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 8009eb6:	2200      	movs	r2, #0
 8009eb8:	2101      	movs	r1, #1
 8009eba:	2001      	movs	r0, #1
 8009ebc:	f000 f977 	bl	800a1ae <osSemaphoreNew>
 8009ec0:	4602      	mov	r2, r0
 8009ec2:	683b      	ldr	r3, [r7, #0]
 8009ec4:	601a      	str	r2, [r3, #0]
#endif

#endif
    ret = (*sobj != NULL);
 8009ec6:	683b      	ldr	r3, [r7, #0]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	bf14      	ite	ne
 8009ece:	2301      	movne	r3, #1
 8009ed0:	2300      	moveq	r3, #0
 8009ed2:	b2db      	uxtb	r3, r3
 8009ed4:	60fb      	str	r3, [r7, #12]

    return ret;
 8009ed6:	68fb      	ldr	r3, [r7, #12]
}
 8009ed8:	4618      	mov	r0, r3
 8009eda:	3710      	adds	r7, #16
 8009edc:	46bd      	mov	sp, r7
 8009ede:	bd80      	pop	{r7, pc}

08009ee0 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 8009ee0:	b580      	push	{r7, lr}
 8009ee2:	b082      	sub	sp, #8
 8009ee4:	af00      	add	r7, sp, #0
 8009ee6:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 8009ee8:	6878      	ldr	r0, [r7, #4]
 8009eea:	f000 fa9f 	bl	800a42c <osSemaphoreDelete>
#endif
    return 1;
 8009eee:	2301      	movs	r3, #1
}
 8009ef0:	4618      	mov	r0, r3
 8009ef2:	3708      	adds	r7, #8
 8009ef4:	46bd      	mov	sp, r7
 8009ef6:	bd80      	pop	{r7, pc}

08009ef8 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 8009ef8:	b580      	push	{r7, lr}
 8009efa:	b084      	sub	sp, #16
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	6078      	str	r0, [r7, #4]
  int ret = 0;
 8009f00:	2300      	movs	r3, #0
 8009f02:	60fb      	str	r3, [r7, #12]
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 8009f04:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8009f08:	6878      	ldr	r0, [r7, #4]
 8009f0a:	f000 f9d9 	bl	800a2c0 <osSemaphoreAcquire>
 8009f0e:	4603      	mov	r3, r0
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d101      	bne.n	8009f18 <ff_req_grant+0x20>
#endif

#endif
  {
    ret = 1;
 8009f14:	2301      	movs	r3, #1
 8009f16:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8009f18:	68fb      	ldr	r3, [r7, #12]
}
 8009f1a:	4618      	mov	r0, r3
 8009f1c:	3710      	adds	r7, #16
 8009f1e:	46bd      	mov	sp, r7
 8009f20:	bd80      	pop	{r7, pc}

08009f22 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 8009f22:	b580      	push	{r7, lr}
 8009f24:	b082      	sub	sp, #8
 8009f26:	af00      	add	r7, sp, #0
 8009f28:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 8009f2a:	6878      	ldr	r0, [r7, #4]
 8009f2c:	f000 fa1a 	bl	800a364 <osSemaphoreRelease>
#endif
}
 8009f30:	bf00      	nop
 8009f32:	3708      	adds	r7, #8
 8009f34:	46bd      	mov	sp, r7
 8009f36:	bd80      	pop	{r7, pc}

08009f38 <__NVIC_SetPriority>:
{
 8009f38:	b480      	push	{r7}
 8009f3a:	b083      	sub	sp, #12
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	4603      	mov	r3, r0
 8009f40:	6039      	str	r1, [r7, #0]
 8009f42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009f44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	db0a      	blt.n	8009f62 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009f4c:	683b      	ldr	r3, [r7, #0]
 8009f4e:	b2da      	uxtb	r2, r3
 8009f50:	490c      	ldr	r1, [pc, #48]	@ (8009f84 <__NVIC_SetPriority+0x4c>)
 8009f52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009f56:	0112      	lsls	r2, r2, #4
 8009f58:	b2d2      	uxtb	r2, r2
 8009f5a:	440b      	add	r3, r1
 8009f5c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8009f60:	e00a      	b.n	8009f78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009f62:	683b      	ldr	r3, [r7, #0]
 8009f64:	b2da      	uxtb	r2, r3
 8009f66:	4908      	ldr	r1, [pc, #32]	@ (8009f88 <__NVIC_SetPriority+0x50>)
 8009f68:	79fb      	ldrb	r3, [r7, #7]
 8009f6a:	f003 030f 	and.w	r3, r3, #15
 8009f6e:	3b04      	subs	r3, #4
 8009f70:	0112      	lsls	r2, r2, #4
 8009f72:	b2d2      	uxtb	r2, r2
 8009f74:	440b      	add	r3, r1
 8009f76:	761a      	strb	r2, [r3, #24]
}
 8009f78:	bf00      	nop
 8009f7a:	370c      	adds	r7, #12
 8009f7c:	46bd      	mov	sp, r7
 8009f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f82:	4770      	bx	lr
 8009f84:	e000e100 	.word	0xe000e100
 8009f88:	e000ed00 	.word	0xe000ed00

08009f8c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8009f8c:	b580      	push	{r7, lr}
 8009f8e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8009f90:	4b05      	ldr	r3, [pc, #20]	@ (8009fa8 <SysTick_Handler+0x1c>)
 8009f92:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8009f94:	f002 fb4a 	bl	800c62c <xTaskGetSchedulerState>
 8009f98:	4603      	mov	r3, r0
 8009f9a:	2b01      	cmp	r3, #1
 8009f9c:	d001      	beq.n	8009fa2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8009f9e:	f003 fa43 	bl	800d428 <xPortSysTickHandler>
  }
}
 8009fa2:	bf00      	nop
 8009fa4:	bd80      	pop	{r7, pc}
 8009fa6:	bf00      	nop
 8009fa8:	e000e010 	.word	0xe000e010

08009fac <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009fac:	b580      	push	{r7, lr}
 8009fae:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8009fb0:	2100      	movs	r1, #0
 8009fb2:	f06f 0004 	mvn.w	r0, #4
 8009fb6:	f7ff ffbf 	bl	8009f38 <__NVIC_SetPriority>
#endif
}
 8009fba:	bf00      	nop
 8009fbc:	bd80      	pop	{r7, pc}
	...

08009fc0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009fc0:	b480      	push	{r7}
 8009fc2:	b083      	sub	sp, #12
 8009fc4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009fc6:	f3ef 8305 	mrs	r3, IPSR
 8009fca:	603b      	str	r3, [r7, #0]
  return(result);
 8009fcc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d003      	beq.n	8009fda <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8009fd2:	f06f 0305 	mvn.w	r3, #5
 8009fd6:	607b      	str	r3, [r7, #4]
 8009fd8:	e00c      	b.n	8009ff4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009fda:	4b0a      	ldr	r3, [pc, #40]	@ (800a004 <osKernelInitialize+0x44>)
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d105      	bne.n	8009fee <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8009fe2:	4b08      	ldr	r3, [pc, #32]	@ (800a004 <osKernelInitialize+0x44>)
 8009fe4:	2201      	movs	r2, #1
 8009fe6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009fe8:	2300      	movs	r3, #0
 8009fea:	607b      	str	r3, [r7, #4]
 8009fec:	e002      	b.n	8009ff4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8009fee:	f04f 33ff 	mov.w	r3, #4294967295
 8009ff2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009ff4:	687b      	ldr	r3, [r7, #4]
}
 8009ff6:	4618      	mov	r0, r3
 8009ff8:	370c      	adds	r7, #12
 8009ffa:	46bd      	mov	sp, r7
 8009ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a000:	4770      	bx	lr
 800a002:	bf00      	nop
 800a004:	20000a60 	.word	0x20000a60

0800a008 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800a008:	b580      	push	{r7, lr}
 800a00a:	b082      	sub	sp, #8
 800a00c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a00e:	f3ef 8305 	mrs	r3, IPSR
 800a012:	603b      	str	r3, [r7, #0]
  return(result);
 800a014:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a016:	2b00      	cmp	r3, #0
 800a018:	d003      	beq.n	800a022 <osKernelStart+0x1a>
    stat = osErrorISR;
 800a01a:	f06f 0305 	mvn.w	r3, #5
 800a01e:	607b      	str	r3, [r7, #4]
 800a020:	e010      	b.n	800a044 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800a022:	4b0b      	ldr	r3, [pc, #44]	@ (800a050 <osKernelStart+0x48>)
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	2b01      	cmp	r3, #1
 800a028:	d109      	bne.n	800a03e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800a02a:	f7ff ffbf 	bl	8009fac <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800a02e:	4b08      	ldr	r3, [pc, #32]	@ (800a050 <osKernelStart+0x48>)
 800a030:	2202      	movs	r2, #2
 800a032:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800a034:	f001 fe96 	bl	800bd64 <vTaskStartScheduler>
      stat = osOK;
 800a038:	2300      	movs	r3, #0
 800a03a:	607b      	str	r3, [r7, #4]
 800a03c:	e002      	b.n	800a044 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800a03e:	f04f 33ff 	mov.w	r3, #4294967295
 800a042:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a044:	687b      	ldr	r3, [r7, #4]
}
 800a046:	4618      	mov	r0, r3
 800a048:	3708      	adds	r7, #8
 800a04a:	46bd      	mov	sp, r7
 800a04c:	bd80      	pop	{r7, pc}
 800a04e:	bf00      	nop
 800a050:	20000a60 	.word	0x20000a60

0800a054 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a054:	b580      	push	{r7, lr}
 800a056:	b08e      	sub	sp, #56	@ 0x38
 800a058:	af04      	add	r7, sp, #16
 800a05a:	60f8      	str	r0, [r7, #12]
 800a05c:	60b9      	str	r1, [r7, #8]
 800a05e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800a060:	2300      	movs	r3, #0
 800a062:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a064:	f3ef 8305 	mrs	r3, IPSR
 800a068:	617b      	str	r3, [r7, #20]
  return(result);
 800a06a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d17e      	bne.n	800a16e <osThreadNew+0x11a>
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	2b00      	cmp	r3, #0
 800a074:	d07b      	beq.n	800a16e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800a076:	2380      	movs	r3, #128	@ 0x80
 800a078:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800a07a:	2318      	movs	r3, #24
 800a07c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800a07e:	2300      	movs	r3, #0
 800a080:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800a082:	f04f 33ff 	mov.w	r3, #4294967295
 800a086:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d045      	beq.n	800a11a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	2b00      	cmp	r3, #0
 800a094:	d002      	beq.n	800a09c <osThreadNew+0x48>
        name = attr->name;
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	699b      	ldr	r3, [r3, #24]
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d002      	beq.n	800a0aa <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	699b      	ldr	r3, [r3, #24]
 800a0a8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800a0aa:	69fb      	ldr	r3, [r7, #28]
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d008      	beq.n	800a0c2 <osThreadNew+0x6e>
 800a0b0:	69fb      	ldr	r3, [r7, #28]
 800a0b2:	2b38      	cmp	r3, #56	@ 0x38
 800a0b4:	d805      	bhi.n	800a0c2 <osThreadNew+0x6e>
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	685b      	ldr	r3, [r3, #4]
 800a0ba:	f003 0301 	and.w	r3, r3, #1
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d001      	beq.n	800a0c6 <osThreadNew+0x72>
        return (NULL);
 800a0c2:	2300      	movs	r3, #0
 800a0c4:	e054      	b.n	800a170 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	695b      	ldr	r3, [r3, #20]
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d003      	beq.n	800a0d6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	695b      	ldr	r3, [r3, #20]
 800a0d2:	089b      	lsrs	r3, r3, #2
 800a0d4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	689b      	ldr	r3, [r3, #8]
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d00e      	beq.n	800a0fc <osThreadNew+0xa8>
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	68db      	ldr	r3, [r3, #12]
 800a0e2:	2ba7      	cmp	r3, #167	@ 0xa7
 800a0e4:	d90a      	bls.n	800a0fc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d006      	beq.n	800a0fc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	695b      	ldr	r3, [r3, #20]
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d002      	beq.n	800a0fc <osThreadNew+0xa8>
        mem = 1;
 800a0f6:	2301      	movs	r3, #1
 800a0f8:	61bb      	str	r3, [r7, #24]
 800a0fa:	e010      	b.n	800a11e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	689b      	ldr	r3, [r3, #8]
 800a100:	2b00      	cmp	r3, #0
 800a102:	d10c      	bne.n	800a11e <osThreadNew+0xca>
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	68db      	ldr	r3, [r3, #12]
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d108      	bne.n	800a11e <osThreadNew+0xca>
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	691b      	ldr	r3, [r3, #16]
 800a110:	2b00      	cmp	r3, #0
 800a112:	d104      	bne.n	800a11e <osThreadNew+0xca>
          mem = 0;
 800a114:	2300      	movs	r3, #0
 800a116:	61bb      	str	r3, [r7, #24]
 800a118:	e001      	b.n	800a11e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800a11a:	2300      	movs	r3, #0
 800a11c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a11e:	69bb      	ldr	r3, [r7, #24]
 800a120:	2b01      	cmp	r3, #1
 800a122:	d110      	bne.n	800a146 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800a128:	687a      	ldr	r2, [r7, #4]
 800a12a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a12c:	9202      	str	r2, [sp, #8]
 800a12e:	9301      	str	r3, [sp, #4]
 800a130:	69fb      	ldr	r3, [r7, #28]
 800a132:	9300      	str	r3, [sp, #0]
 800a134:	68bb      	ldr	r3, [r7, #8]
 800a136:	6a3a      	ldr	r2, [r7, #32]
 800a138:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a13a:	68f8      	ldr	r0, [r7, #12]
 800a13c:	f001 fc1e 	bl	800b97c <xTaskCreateStatic>
 800a140:	4603      	mov	r3, r0
 800a142:	613b      	str	r3, [r7, #16]
 800a144:	e013      	b.n	800a16e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800a146:	69bb      	ldr	r3, [r7, #24]
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d110      	bne.n	800a16e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800a14c:	6a3b      	ldr	r3, [r7, #32]
 800a14e:	b29a      	uxth	r2, r3
 800a150:	f107 0310 	add.w	r3, r7, #16
 800a154:	9301      	str	r3, [sp, #4]
 800a156:	69fb      	ldr	r3, [r7, #28]
 800a158:	9300      	str	r3, [sp, #0]
 800a15a:	68bb      	ldr	r3, [r7, #8]
 800a15c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a15e:	68f8      	ldr	r0, [r7, #12]
 800a160:	f001 fc6c 	bl	800ba3c <xTaskCreate>
 800a164:	4603      	mov	r3, r0
 800a166:	2b01      	cmp	r3, #1
 800a168:	d001      	beq.n	800a16e <osThreadNew+0x11a>
            hTask = NULL;
 800a16a:	2300      	movs	r3, #0
 800a16c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800a16e:	693b      	ldr	r3, [r7, #16]
}
 800a170:	4618      	mov	r0, r3
 800a172:	3728      	adds	r7, #40	@ 0x28
 800a174:	46bd      	mov	sp, r7
 800a176:	bd80      	pop	{r7, pc}

0800a178 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800a178:	b580      	push	{r7, lr}
 800a17a:	b084      	sub	sp, #16
 800a17c:	af00      	add	r7, sp, #0
 800a17e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a180:	f3ef 8305 	mrs	r3, IPSR
 800a184:	60bb      	str	r3, [r7, #8]
  return(result);
 800a186:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d003      	beq.n	800a194 <osDelay+0x1c>
    stat = osErrorISR;
 800a18c:	f06f 0305 	mvn.w	r3, #5
 800a190:	60fb      	str	r3, [r7, #12]
 800a192:	e007      	b.n	800a1a4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800a194:	2300      	movs	r3, #0
 800a196:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d002      	beq.n	800a1a4 <osDelay+0x2c>
      vTaskDelay(ticks);
 800a19e:	6878      	ldr	r0, [r7, #4]
 800a1a0:	f001 fdaa 	bl	800bcf8 <vTaskDelay>
    }
  }

  return (stat);
 800a1a4:	68fb      	ldr	r3, [r7, #12]
}
 800a1a6:	4618      	mov	r0, r3
 800a1a8:	3710      	adds	r7, #16
 800a1aa:	46bd      	mov	sp, r7
 800a1ac:	bd80      	pop	{r7, pc}

0800a1ae <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800a1ae:	b580      	push	{r7, lr}
 800a1b0:	b08a      	sub	sp, #40	@ 0x28
 800a1b2:	af02      	add	r7, sp, #8
 800a1b4:	60f8      	str	r0, [r7, #12]
 800a1b6:	60b9      	str	r1, [r7, #8]
 800a1b8:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800a1ba:	2300      	movs	r3, #0
 800a1bc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a1be:	f3ef 8305 	mrs	r3, IPSR
 800a1c2:	613b      	str	r3, [r7, #16]
  return(result);
 800a1c4:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d175      	bne.n	800a2b6 <osSemaphoreNew+0x108>
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d072      	beq.n	800a2b6 <osSemaphoreNew+0x108>
 800a1d0:	68ba      	ldr	r2, [r7, #8]
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	429a      	cmp	r2, r3
 800a1d6:	d86e      	bhi.n	800a2b6 <osSemaphoreNew+0x108>
    mem = -1;
 800a1d8:	f04f 33ff 	mov.w	r3, #4294967295
 800a1dc:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d015      	beq.n	800a210 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	689b      	ldr	r3, [r3, #8]
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d006      	beq.n	800a1fa <osSemaphoreNew+0x4c>
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	68db      	ldr	r3, [r3, #12]
 800a1f0:	2b4f      	cmp	r3, #79	@ 0x4f
 800a1f2:	d902      	bls.n	800a1fa <osSemaphoreNew+0x4c>
        mem = 1;
 800a1f4:	2301      	movs	r3, #1
 800a1f6:	61bb      	str	r3, [r7, #24]
 800a1f8:	e00c      	b.n	800a214 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	689b      	ldr	r3, [r3, #8]
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d108      	bne.n	800a214 <osSemaphoreNew+0x66>
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	68db      	ldr	r3, [r3, #12]
 800a206:	2b00      	cmp	r3, #0
 800a208:	d104      	bne.n	800a214 <osSemaphoreNew+0x66>
          mem = 0;
 800a20a:	2300      	movs	r3, #0
 800a20c:	61bb      	str	r3, [r7, #24]
 800a20e:	e001      	b.n	800a214 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800a210:	2300      	movs	r3, #0
 800a212:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800a214:	69bb      	ldr	r3, [r7, #24]
 800a216:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a21a:	d04c      	beq.n	800a2b6 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	2b01      	cmp	r3, #1
 800a220:	d128      	bne.n	800a274 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800a222:	69bb      	ldr	r3, [r7, #24]
 800a224:	2b01      	cmp	r3, #1
 800a226:	d10a      	bne.n	800a23e <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	689b      	ldr	r3, [r3, #8]
 800a22c:	2203      	movs	r2, #3
 800a22e:	9200      	str	r2, [sp, #0]
 800a230:	2200      	movs	r2, #0
 800a232:	2100      	movs	r1, #0
 800a234:	2001      	movs	r0, #1
 800a236:	f000 fba1 	bl	800a97c <xQueueGenericCreateStatic>
 800a23a:	61f8      	str	r0, [r7, #28]
 800a23c:	e005      	b.n	800a24a <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800a23e:	2203      	movs	r2, #3
 800a240:	2100      	movs	r1, #0
 800a242:	2001      	movs	r0, #1
 800a244:	f000 fc17 	bl	800aa76 <xQueueGenericCreate>
 800a248:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800a24a:	69fb      	ldr	r3, [r7, #28]
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d022      	beq.n	800a296 <osSemaphoreNew+0xe8>
 800a250:	68bb      	ldr	r3, [r7, #8]
 800a252:	2b00      	cmp	r3, #0
 800a254:	d01f      	beq.n	800a296 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800a256:	2300      	movs	r3, #0
 800a258:	2200      	movs	r2, #0
 800a25a:	2100      	movs	r1, #0
 800a25c:	69f8      	ldr	r0, [r7, #28]
 800a25e:	f000 fcd7 	bl	800ac10 <xQueueGenericSend>
 800a262:	4603      	mov	r3, r0
 800a264:	2b01      	cmp	r3, #1
 800a266:	d016      	beq.n	800a296 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800a268:	69f8      	ldr	r0, [r7, #28]
 800a26a:	f001 f9b3 	bl	800b5d4 <vQueueDelete>
            hSemaphore = NULL;
 800a26e:	2300      	movs	r3, #0
 800a270:	61fb      	str	r3, [r7, #28]
 800a272:	e010      	b.n	800a296 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800a274:	69bb      	ldr	r3, [r7, #24]
 800a276:	2b01      	cmp	r3, #1
 800a278:	d108      	bne.n	800a28c <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	689b      	ldr	r3, [r3, #8]
 800a27e:	461a      	mov	r2, r3
 800a280:	68b9      	ldr	r1, [r7, #8]
 800a282:	68f8      	ldr	r0, [r7, #12]
 800a284:	f000 fc55 	bl	800ab32 <xQueueCreateCountingSemaphoreStatic>
 800a288:	61f8      	str	r0, [r7, #28]
 800a28a:	e004      	b.n	800a296 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800a28c:	68b9      	ldr	r1, [r7, #8]
 800a28e:	68f8      	ldr	r0, [r7, #12]
 800a290:	f000 fc88 	bl	800aba4 <xQueueCreateCountingSemaphore>
 800a294:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800a296:	69fb      	ldr	r3, [r7, #28]
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d00c      	beq.n	800a2b6 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d003      	beq.n	800a2aa <osSemaphoreNew+0xfc>
          name = attr->name;
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	617b      	str	r3, [r7, #20]
 800a2a8:	e001      	b.n	800a2ae <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800a2aa:	2300      	movs	r3, #0
 800a2ac:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800a2ae:	6979      	ldr	r1, [r7, #20]
 800a2b0:	69f8      	ldr	r0, [r7, #28]
 800a2b2:	f001 fadb 	bl	800b86c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800a2b6:	69fb      	ldr	r3, [r7, #28]
}
 800a2b8:	4618      	mov	r0, r3
 800a2ba:	3720      	adds	r7, #32
 800a2bc:	46bd      	mov	sp, r7
 800a2be:	bd80      	pop	{r7, pc}

0800a2c0 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800a2c0:	b580      	push	{r7, lr}
 800a2c2:	b086      	sub	sp, #24
 800a2c4:	af00      	add	r7, sp, #0
 800a2c6:	6078      	str	r0, [r7, #4]
 800a2c8:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800a2ce:	2300      	movs	r3, #0
 800a2d0:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800a2d2:	693b      	ldr	r3, [r7, #16]
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d103      	bne.n	800a2e0 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800a2d8:	f06f 0303 	mvn.w	r3, #3
 800a2dc:	617b      	str	r3, [r7, #20]
 800a2de:	e039      	b.n	800a354 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a2e0:	f3ef 8305 	mrs	r3, IPSR
 800a2e4:	60fb      	str	r3, [r7, #12]
  return(result);
 800a2e6:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d022      	beq.n	800a332 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800a2ec:	683b      	ldr	r3, [r7, #0]
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d003      	beq.n	800a2fa <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800a2f2:	f06f 0303 	mvn.w	r3, #3
 800a2f6:	617b      	str	r3, [r7, #20]
 800a2f8:	e02c      	b.n	800a354 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800a2fa:	2300      	movs	r3, #0
 800a2fc:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800a2fe:	f107 0308 	add.w	r3, r7, #8
 800a302:	461a      	mov	r2, r3
 800a304:	2100      	movs	r1, #0
 800a306:	6938      	ldr	r0, [r7, #16]
 800a308:	f001 f8a4 	bl	800b454 <xQueueReceiveFromISR>
 800a30c:	4603      	mov	r3, r0
 800a30e:	2b01      	cmp	r3, #1
 800a310:	d003      	beq.n	800a31a <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800a312:	f06f 0302 	mvn.w	r3, #2
 800a316:	617b      	str	r3, [r7, #20]
 800a318:	e01c      	b.n	800a354 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800a31a:	68bb      	ldr	r3, [r7, #8]
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d019      	beq.n	800a354 <osSemaphoreAcquire+0x94>
 800a320:	4b0f      	ldr	r3, [pc, #60]	@ (800a360 <osSemaphoreAcquire+0xa0>)
 800a322:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a326:	601a      	str	r2, [r3, #0]
 800a328:	f3bf 8f4f 	dsb	sy
 800a32c:	f3bf 8f6f 	isb	sy
 800a330:	e010      	b.n	800a354 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800a332:	6839      	ldr	r1, [r7, #0]
 800a334:	6938      	ldr	r0, [r7, #16]
 800a336:	f000 ff7d 	bl	800b234 <xQueueSemaphoreTake>
 800a33a:	4603      	mov	r3, r0
 800a33c:	2b01      	cmp	r3, #1
 800a33e:	d009      	beq.n	800a354 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800a340:	683b      	ldr	r3, [r7, #0]
 800a342:	2b00      	cmp	r3, #0
 800a344:	d003      	beq.n	800a34e <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800a346:	f06f 0301 	mvn.w	r3, #1
 800a34a:	617b      	str	r3, [r7, #20]
 800a34c:	e002      	b.n	800a354 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800a34e:	f06f 0302 	mvn.w	r3, #2
 800a352:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800a354:	697b      	ldr	r3, [r7, #20]
}
 800a356:	4618      	mov	r0, r3
 800a358:	3718      	adds	r7, #24
 800a35a:	46bd      	mov	sp, r7
 800a35c:	bd80      	pop	{r7, pc}
 800a35e:	bf00      	nop
 800a360:	e000ed04 	.word	0xe000ed04

0800a364 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800a364:	b580      	push	{r7, lr}
 800a366:	b086      	sub	sp, #24
 800a368:	af00      	add	r7, sp, #0
 800a36a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800a370:	2300      	movs	r3, #0
 800a372:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800a374:	693b      	ldr	r3, [r7, #16]
 800a376:	2b00      	cmp	r3, #0
 800a378:	d103      	bne.n	800a382 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800a37a:	f06f 0303 	mvn.w	r3, #3
 800a37e:	617b      	str	r3, [r7, #20]
 800a380:	e02c      	b.n	800a3dc <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a382:	f3ef 8305 	mrs	r3, IPSR
 800a386:	60fb      	str	r3, [r7, #12]
  return(result);
 800a388:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d01a      	beq.n	800a3c4 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800a38e:	2300      	movs	r3, #0
 800a390:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800a392:	f107 0308 	add.w	r3, r7, #8
 800a396:	4619      	mov	r1, r3
 800a398:	6938      	ldr	r0, [r7, #16]
 800a39a:	f000 fdd9 	bl	800af50 <xQueueGiveFromISR>
 800a39e:	4603      	mov	r3, r0
 800a3a0:	2b01      	cmp	r3, #1
 800a3a2:	d003      	beq.n	800a3ac <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800a3a4:	f06f 0302 	mvn.w	r3, #2
 800a3a8:	617b      	str	r3, [r7, #20]
 800a3aa:	e017      	b.n	800a3dc <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800a3ac:	68bb      	ldr	r3, [r7, #8]
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d014      	beq.n	800a3dc <osSemaphoreRelease+0x78>
 800a3b2:	4b0d      	ldr	r3, [pc, #52]	@ (800a3e8 <osSemaphoreRelease+0x84>)
 800a3b4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a3b8:	601a      	str	r2, [r3, #0]
 800a3ba:	f3bf 8f4f 	dsb	sy
 800a3be:	f3bf 8f6f 	isb	sy
 800a3c2:	e00b      	b.n	800a3dc <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800a3c4:	2300      	movs	r3, #0
 800a3c6:	2200      	movs	r2, #0
 800a3c8:	2100      	movs	r1, #0
 800a3ca:	6938      	ldr	r0, [r7, #16]
 800a3cc:	f000 fc20 	bl	800ac10 <xQueueGenericSend>
 800a3d0:	4603      	mov	r3, r0
 800a3d2:	2b01      	cmp	r3, #1
 800a3d4:	d002      	beq.n	800a3dc <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800a3d6:	f06f 0302 	mvn.w	r3, #2
 800a3da:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800a3dc:	697b      	ldr	r3, [r7, #20]
}
 800a3de:	4618      	mov	r0, r3
 800a3e0:	3718      	adds	r7, #24
 800a3e2:	46bd      	mov	sp, r7
 800a3e4:	bd80      	pop	{r7, pc}
 800a3e6:	bf00      	nop
 800a3e8:	e000ed04 	.word	0xe000ed04

0800a3ec <osSemaphoreGetCount>:

uint32_t osSemaphoreGetCount (osSemaphoreId_t semaphore_id) {
 800a3ec:	b580      	push	{r7, lr}
 800a3ee:	b086      	sub	sp, #24
 800a3f0:	af00      	add	r7, sp, #0
 800a3f2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	613b      	str	r3, [r7, #16]
  uint32_t count;

  if (hSemaphore == NULL) {
 800a3f8:	693b      	ldr	r3, [r7, #16]
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d102      	bne.n	800a404 <osSemaphoreGetCount+0x18>
    count = 0U;
 800a3fe:	2300      	movs	r3, #0
 800a400:	617b      	str	r3, [r7, #20]
 800a402:	e00e      	b.n	800a422 <osSemaphoreGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a404:	f3ef 8305 	mrs	r3, IPSR
 800a408:	60fb      	str	r3, [r7, #12]
  return(result);
 800a40a:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d004      	beq.n	800a41a <osSemaphoreGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hSemaphore);
 800a410:	6938      	ldr	r0, [r7, #16]
 800a412:	f001 f8c0 	bl	800b596 <uxQueueMessagesWaitingFromISR>
 800a416:	6178      	str	r0, [r7, #20]
 800a418:	e003      	b.n	800a422 <osSemaphoreGetCount+0x36>
  } else {
    count = (uint32_t)uxSemaphoreGetCount (hSemaphore);
 800a41a:	6938      	ldr	r0, [r7, #16]
 800a41c:	f001 f89c 	bl	800b558 <uxQueueMessagesWaiting>
 800a420:	6178      	str	r0, [r7, #20]
  }

  return (count);
 800a422:	697b      	ldr	r3, [r7, #20]
}
 800a424:	4618      	mov	r0, r3
 800a426:	3718      	adds	r7, #24
 800a428:	46bd      	mov	sp, r7
 800a42a:	bd80      	pop	{r7, pc}

0800a42c <osSemaphoreDelete>:

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 800a42c:	b580      	push	{r7, lr}
 800a42e:	b086      	sub	sp, #24
 800a430:	af00      	add	r7, sp, #0
 800a432:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a438:	f3ef 8305 	mrs	r3, IPSR
 800a43c:	60fb      	str	r3, [r7, #12]
  return(result);
 800a43e:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 800a440:	2b00      	cmp	r3, #0
 800a442:	d003      	beq.n	800a44c <osSemaphoreDelete+0x20>
    stat = osErrorISR;
 800a444:	f06f 0305 	mvn.w	r3, #5
 800a448:	617b      	str	r3, [r7, #20]
 800a44a:	e00e      	b.n	800a46a <osSemaphoreDelete+0x3e>
  }
  else if (hSemaphore == NULL) {
 800a44c:	693b      	ldr	r3, [r7, #16]
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d103      	bne.n	800a45a <osSemaphoreDelete+0x2e>
    stat = osErrorParameter;
 800a452:	f06f 0303 	mvn.w	r3, #3
 800a456:	617b      	str	r3, [r7, #20]
 800a458:	e007      	b.n	800a46a <osSemaphoreDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 800a45a:	6938      	ldr	r0, [r7, #16]
 800a45c:	f001 fa30 	bl	800b8c0 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 800a460:	2300      	movs	r3, #0
 800a462:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hSemaphore);
 800a464:	6938      	ldr	r0, [r7, #16]
 800a466:	f001 f8b5 	bl	800b5d4 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 800a46a:	697b      	ldr	r3, [r7, #20]
}
 800a46c:	4618      	mov	r0, r3
 800a46e:	3718      	adds	r7, #24
 800a470:	46bd      	mov	sp, r7
 800a472:	bd80      	pop	{r7, pc}

0800a474 <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800a474:	b580      	push	{r7, lr}
 800a476:	b08a      	sub	sp, #40	@ 0x28
 800a478:	af02      	add	r7, sp, #8
 800a47a:	60f8      	str	r0, [r7, #12]
 800a47c:	60b9      	str	r1, [r7, #8]
 800a47e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800a480:	2300      	movs	r3, #0
 800a482:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a484:	f3ef 8305 	mrs	r3, IPSR
 800a488:	613b      	str	r3, [r7, #16]
  return(result);
 800a48a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d15f      	bne.n	800a550 <osMessageQueueNew+0xdc>
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	2b00      	cmp	r3, #0
 800a494:	d05c      	beq.n	800a550 <osMessageQueueNew+0xdc>
 800a496:	68bb      	ldr	r3, [r7, #8]
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d059      	beq.n	800a550 <osMessageQueueNew+0xdc>
    mem = -1;
 800a49c:	f04f 33ff 	mov.w	r3, #4294967295
 800a4a0:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d029      	beq.n	800a4fc <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	689b      	ldr	r3, [r3, #8]
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d012      	beq.n	800a4d6 <osMessageQueueNew+0x62>
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	68db      	ldr	r3, [r3, #12]
 800a4b4:	2b4f      	cmp	r3, #79	@ 0x4f
 800a4b6:	d90e      	bls.n	800a4d6 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d00a      	beq.n	800a4d6 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	695a      	ldr	r2, [r3, #20]
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	68b9      	ldr	r1, [r7, #8]
 800a4c8:	fb01 f303 	mul.w	r3, r1, r3
 800a4cc:	429a      	cmp	r2, r3
 800a4ce:	d302      	bcc.n	800a4d6 <osMessageQueueNew+0x62>
        mem = 1;
 800a4d0:	2301      	movs	r3, #1
 800a4d2:	61bb      	str	r3, [r7, #24]
 800a4d4:	e014      	b.n	800a500 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	689b      	ldr	r3, [r3, #8]
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d110      	bne.n	800a500 <osMessageQueueNew+0x8c>
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	68db      	ldr	r3, [r3, #12]
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d10c      	bne.n	800a500 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d108      	bne.n	800a500 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	695b      	ldr	r3, [r3, #20]
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d104      	bne.n	800a500 <osMessageQueueNew+0x8c>
          mem = 0;
 800a4f6:	2300      	movs	r3, #0
 800a4f8:	61bb      	str	r3, [r7, #24]
 800a4fa:	e001      	b.n	800a500 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800a4fc:	2300      	movs	r3, #0
 800a4fe:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a500:	69bb      	ldr	r3, [r7, #24]
 800a502:	2b01      	cmp	r3, #1
 800a504:	d10b      	bne.n	800a51e <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	691a      	ldr	r2, [r3, #16]
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	689b      	ldr	r3, [r3, #8]
 800a50e:	2100      	movs	r1, #0
 800a510:	9100      	str	r1, [sp, #0]
 800a512:	68b9      	ldr	r1, [r7, #8]
 800a514:	68f8      	ldr	r0, [r7, #12]
 800a516:	f000 fa31 	bl	800a97c <xQueueGenericCreateStatic>
 800a51a:	61f8      	str	r0, [r7, #28]
 800a51c:	e008      	b.n	800a530 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800a51e:	69bb      	ldr	r3, [r7, #24]
 800a520:	2b00      	cmp	r3, #0
 800a522:	d105      	bne.n	800a530 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800a524:	2200      	movs	r2, #0
 800a526:	68b9      	ldr	r1, [r7, #8]
 800a528:	68f8      	ldr	r0, [r7, #12]
 800a52a:	f000 faa4 	bl	800aa76 <xQueueGenericCreate>
 800a52e:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800a530:	69fb      	ldr	r3, [r7, #28]
 800a532:	2b00      	cmp	r3, #0
 800a534:	d00c      	beq.n	800a550 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d003      	beq.n	800a544 <osMessageQueueNew+0xd0>
        name = attr->name;
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	617b      	str	r3, [r7, #20]
 800a542:	e001      	b.n	800a548 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800a544:	2300      	movs	r3, #0
 800a546:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800a548:	6979      	ldr	r1, [r7, #20]
 800a54a:	69f8      	ldr	r0, [r7, #28]
 800a54c:	f001 f98e 	bl	800b86c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800a550:	69fb      	ldr	r3, [r7, #28]
}
 800a552:	4618      	mov	r0, r3
 800a554:	3720      	adds	r7, #32
 800a556:	46bd      	mov	sp, r7
 800a558:	bd80      	pop	{r7, pc}
	...

0800a55c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800a55c:	b580      	push	{r7, lr}
 800a55e:	b088      	sub	sp, #32
 800a560:	af00      	add	r7, sp, #0
 800a562:	60f8      	str	r0, [r7, #12]
 800a564:	60b9      	str	r1, [r7, #8]
 800a566:	603b      	str	r3, [r7, #0]
 800a568:	4613      	mov	r3, r2
 800a56a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800a570:	2300      	movs	r3, #0
 800a572:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a574:	f3ef 8305 	mrs	r3, IPSR
 800a578:	617b      	str	r3, [r7, #20]
  return(result);
 800a57a:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d028      	beq.n	800a5d2 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a580:	69bb      	ldr	r3, [r7, #24]
 800a582:	2b00      	cmp	r3, #0
 800a584:	d005      	beq.n	800a592 <osMessageQueuePut+0x36>
 800a586:	68bb      	ldr	r3, [r7, #8]
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d002      	beq.n	800a592 <osMessageQueuePut+0x36>
 800a58c:	683b      	ldr	r3, [r7, #0]
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d003      	beq.n	800a59a <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800a592:	f06f 0303 	mvn.w	r3, #3
 800a596:	61fb      	str	r3, [r7, #28]
 800a598:	e038      	b.n	800a60c <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800a59a:	2300      	movs	r3, #0
 800a59c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800a59e:	f107 0210 	add.w	r2, r7, #16
 800a5a2:	2300      	movs	r3, #0
 800a5a4:	68b9      	ldr	r1, [r7, #8]
 800a5a6:	69b8      	ldr	r0, [r7, #24]
 800a5a8:	f000 fc34 	bl	800ae14 <xQueueGenericSendFromISR>
 800a5ac:	4603      	mov	r3, r0
 800a5ae:	2b01      	cmp	r3, #1
 800a5b0:	d003      	beq.n	800a5ba <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800a5b2:	f06f 0302 	mvn.w	r3, #2
 800a5b6:	61fb      	str	r3, [r7, #28]
 800a5b8:	e028      	b.n	800a60c <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800a5ba:	693b      	ldr	r3, [r7, #16]
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d025      	beq.n	800a60c <osMessageQueuePut+0xb0>
 800a5c0:	4b15      	ldr	r3, [pc, #84]	@ (800a618 <osMessageQueuePut+0xbc>)
 800a5c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a5c6:	601a      	str	r2, [r3, #0]
 800a5c8:	f3bf 8f4f 	dsb	sy
 800a5cc:	f3bf 8f6f 	isb	sy
 800a5d0:	e01c      	b.n	800a60c <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800a5d2:	69bb      	ldr	r3, [r7, #24]
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d002      	beq.n	800a5de <osMessageQueuePut+0x82>
 800a5d8:	68bb      	ldr	r3, [r7, #8]
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d103      	bne.n	800a5e6 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800a5de:	f06f 0303 	mvn.w	r3, #3
 800a5e2:	61fb      	str	r3, [r7, #28]
 800a5e4:	e012      	b.n	800a60c <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800a5e6:	2300      	movs	r3, #0
 800a5e8:	683a      	ldr	r2, [r7, #0]
 800a5ea:	68b9      	ldr	r1, [r7, #8]
 800a5ec:	69b8      	ldr	r0, [r7, #24]
 800a5ee:	f000 fb0f 	bl	800ac10 <xQueueGenericSend>
 800a5f2:	4603      	mov	r3, r0
 800a5f4:	2b01      	cmp	r3, #1
 800a5f6:	d009      	beq.n	800a60c <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800a5f8:	683b      	ldr	r3, [r7, #0]
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d003      	beq.n	800a606 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800a5fe:	f06f 0301 	mvn.w	r3, #1
 800a602:	61fb      	str	r3, [r7, #28]
 800a604:	e002      	b.n	800a60c <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800a606:	f06f 0302 	mvn.w	r3, #2
 800a60a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800a60c:	69fb      	ldr	r3, [r7, #28]
}
 800a60e:	4618      	mov	r0, r3
 800a610:	3720      	adds	r7, #32
 800a612:	46bd      	mov	sp, r7
 800a614:	bd80      	pop	{r7, pc}
 800a616:	bf00      	nop
 800a618:	e000ed04 	.word	0xe000ed04

0800a61c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800a61c:	b580      	push	{r7, lr}
 800a61e:	b088      	sub	sp, #32
 800a620:	af00      	add	r7, sp, #0
 800a622:	60f8      	str	r0, [r7, #12]
 800a624:	60b9      	str	r1, [r7, #8]
 800a626:	607a      	str	r2, [r7, #4]
 800a628:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800a62e:	2300      	movs	r3, #0
 800a630:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a632:	f3ef 8305 	mrs	r3, IPSR
 800a636:	617b      	str	r3, [r7, #20]
  return(result);
 800a638:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d028      	beq.n	800a690 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a63e:	69bb      	ldr	r3, [r7, #24]
 800a640:	2b00      	cmp	r3, #0
 800a642:	d005      	beq.n	800a650 <osMessageQueueGet+0x34>
 800a644:	68bb      	ldr	r3, [r7, #8]
 800a646:	2b00      	cmp	r3, #0
 800a648:	d002      	beq.n	800a650 <osMessageQueueGet+0x34>
 800a64a:	683b      	ldr	r3, [r7, #0]
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d003      	beq.n	800a658 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800a650:	f06f 0303 	mvn.w	r3, #3
 800a654:	61fb      	str	r3, [r7, #28]
 800a656:	e037      	b.n	800a6c8 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800a658:	2300      	movs	r3, #0
 800a65a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800a65c:	f107 0310 	add.w	r3, r7, #16
 800a660:	461a      	mov	r2, r3
 800a662:	68b9      	ldr	r1, [r7, #8]
 800a664:	69b8      	ldr	r0, [r7, #24]
 800a666:	f000 fef5 	bl	800b454 <xQueueReceiveFromISR>
 800a66a:	4603      	mov	r3, r0
 800a66c:	2b01      	cmp	r3, #1
 800a66e:	d003      	beq.n	800a678 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800a670:	f06f 0302 	mvn.w	r3, #2
 800a674:	61fb      	str	r3, [r7, #28]
 800a676:	e027      	b.n	800a6c8 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800a678:	693b      	ldr	r3, [r7, #16]
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d024      	beq.n	800a6c8 <osMessageQueueGet+0xac>
 800a67e:	4b15      	ldr	r3, [pc, #84]	@ (800a6d4 <osMessageQueueGet+0xb8>)
 800a680:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a684:	601a      	str	r2, [r3, #0]
 800a686:	f3bf 8f4f 	dsb	sy
 800a68a:	f3bf 8f6f 	isb	sy
 800a68e:	e01b      	b.n	800a6c8 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800a690:	69bb      	ldr	r3, [r7, #24]
 800a692:	2b00      	cmp	r3, #0
 800a694:	d002      	beq.n	800a69c <osMessageQueueGet+0x80>
 800a696:	68bb      	ldr	r3, [r7, #8]
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d103      	bne.n	800a6a4 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800a69c:	f06f 0303 	mvn.w	r3, #3
 800a6a0:	61fb      	str	r3, [r7, #28]
 800a6a2:	e011      	b.n	800a6c8 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800a6a4:	683a      	ldr	r2, [r7, #0]
 800a6a6:	68b9      	ldr	r1, [r7, #8]
 800a6a8:	69b8      	ldr	r0, [r7, #24]
 800a6aa:	f000 fce1 	bl	800b070 <xQueueReceive>
 800a6ae:	4603      	mov	r3, r0
 800a6b0:	2b01      	cmp	r3, #1
 800a6b2:	d009      	beq.n	800a6c8 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800a6b4:	683b      	ldr	r3, [r7, #0]
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d003      	beq.n	800a6c2 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800a6ba:	f06f 0301 	mvn.w	r3, #1
 800a6be:	61fb      	str	r3, [r7, #28]
 800a6c0:	e002      	b.n	800a6c8 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800a6c2:	f06f 0302 	mvn.w	r3, #2
 800a6c6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800a6c8:	69fb      	ldr	r3, [r7, #28]
}
 800a6ca:	4618      	mov	r0, r3
 800a6cc:	3720      	adds	r7, #32
 800a6ce:	46bd      	mov	sp, r7
 800a6d0:	bd80      	pop	{r7, pc}
 800a6d2:	bf00      	nop
 800a6d4:	e000ed04 	.word	0xe000ed04

0800a6d8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a6d8:	b480      	push	{r7}
 800a6da:	b085      	sub	sp, #20
 800a6dc:	af00      	add	r7, sp, #0
 800a6de:	60f8      	str	r0, [r7, #12]
 800a6e0:	60b9      	str	r1, [r7, #8]
 800a6e2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	4a07      	ldr	r2, [pc, #28]	@ (800a704 <vApplicationGetIdleTaskMemory+0x2c>)
 800a6e8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a6ea:	68bb      	ldr	r3, [r7, #8]
 800a6ec:	4a06      	ldr	r2, [pc, #24]	@ (800a708 <vApplicationGetIdleTaskMemory+0x30>)
 800a6ee:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	2280      	movs	r2, #128	@ 0x80
 800a6f4:	601a      	str	r2, [r3, #0]
}
 800a6f6:	bf00      	nop
 800a6f8:	3714      	adds	r7, #20
 800a6fa:	46bd      	mov	sp, r7
 800a6fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a700:	4770      	bx	lr
 800a702:	bf00      	nop
 800a704:	20000a64 	.word	0x20000a64
 800a708:	20000b0c 	.word	0x20000b0c

0800a70c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a70c:	b480      	push	{r7}
 800a70e:	b085      	sub	sp, #20
 800a710:	af00      	add	r7, sp, #0
 800a712:	60f8      	str	r0, [r7, #12]
 800a714:	60b9      	str	r1, [r7, #8]
 800a716:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	4a07      	ldr	r2, [pc, #28]	@ (800a738 <vApplicationGetTimerTaskMemory+0x2c>)
 800a71c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a71e:	68bb      	ldr	r3, [r7, #8]
 800a720:	4a06      	ldr	r2, [pc, #24]	@ (800a73c <vApplicationGetTimerTaskMemory+0x30>)
 800a722:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a72a:	601a      	str	r2, [r3, #0]
}
 800a72c:	bf00      	nop
 800a72e:	3714      	adds	r7, #20
 800a730:	46bd      	mov	sp, r7
 800a732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a736:	4770      	bx	lr
 800a738:	20000d0c 	.word	0x20000d0c
 800a73c:	20000db4 	.word	0x20000db4

0800a740 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a740:	b480      	push	{r7}
 800a742:	b083      	sub	sp, #12
 800a744:	af00      	add	r7, sp, #0
 800a746:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	f103 0208 	add.w	r2, r3, #8
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	f04f 32ff 	mov.w	r2, #4294967295
 800a758:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	f103 0208 	add.w	r2, r3, #8
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	f103 0208 	add.w	r2, r3, #8
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	2200      	movs	r2, #0
 800a772:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a774:	bf00      	nop
 800a776:	370c      	adds	r7, #12
 800a778:	46bd      	mov	sp, r7
 800a77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a77e:	4770      	bx	lr

0800a780 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a780:	b480      	push	{r7}
 800a782:	b083      	sub	sp, #12
 800a784:	af00      	add	r7, sp, #0
 800a786:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	2200      	movs	r2, #0
 800a78c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a78e:	bf00      	nop
 800a790:	370c      	adds	r7, #12
 800a792:	46bd      	mov	sp, r7
 800a794:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a798:	4770      	bx	lr

0800a79a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a79a:	b480      	push	{r7}
 800a79c:	b085      	sub	sp, #20
 800a79e:	af00      	add	r7, sp, #0
 800a7a0:	6078      	str	r0, [r7, #4]
 800a7a2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	685b      	ldr	r3, [r3, #4]
 800a7a8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a7aa:	683b      	ldr	r3, [r7, #0]
 800a7ac:	68fa      	ldr	r2, [r7, #12]
 800a7ae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	689a      	ldr	r2, [r3, #8]
 800a7b4:	683b      	ldr	r3, [r7, #0]
 800a7b6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	689b      	ldr	r3, [r3, #8]
 800a7bc:	683a      	ldr	r2, [r7, #0]
 800a7be:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	683a      	ldr	r2, [r7, #0]
 800a7c4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a7c6:	683b      	ldr	r3, [r7, #0]
 800a7c8:	687a      	ldr	r2, [r7, #4]
 800a7ca:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	1c5a      	adds	r2, r3, #1
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	601a      	str	r2, [r3, #0]
}
 800a7d6:	bf00      	nop
 800a7d8:	3714      	adds	r7, #20
 800a7da:	46bd      	mov	sp, r7
 800a7dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e0:	4770      	bx	lr

0800a7e2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a7e2:	b480      	push	{r7}
 800a7e4:	b085      	sub	sp, #20
 800a7e6:	af00      	add	r7, sp, #0
 800a7e8:	6078      	str	r0, [r7, #4]
 800a7ea:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a7ec:	683b      	ldr	r3, [r7, #0]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a7f2:	68bb      	ldr	r3, [r7, #8]
 800a7f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7f8:	d103      	bne.n	800a802 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	691b      	ldr	r3, [r3, #16]
 800a7fe:	60fb      	str	r3, [r7, #12]
 800a800:	e00c      	b.n	800a81c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	3308      	adds	r3, #8
 800a806:	60fb      	str	r3, [r7, #12]
 800a808:	e002      	b.n	800a810 <vListInsert+0x2e>
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	685b      	ldr	r3, [r3, #4]
 800a80e:	60fb      	str	r3, [r7, #12]
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	685b      	ldr	r3, [r3, #4]
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	68ba      	ldr	r2, [r7, #8]
 800a818:	429a      	cmp	r2, r3
 800a81a:	d2f6      	bcs.n	800a80a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	685a      	ldr	r2, [r3, #4]
 800a820:	683b      	ldr	r3, [r7, #0]
 800a822:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a824:	683b      	ldr	r3, [r7, #0]
 800a826:	685b      	ldr	r3, [r3, #4]
 800a828:	683a      	ldr	r2, [r7, #0]
 800a82a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a82c:	683b      	ldr	r3, [r7, #0]
 800a82e:	68fa      	ldr	r2, [r7, #12]
 800a830:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	683a      	ldr	r2, [r7, #0]
 800a836:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a838:	683b      	ldr	r3, [r7, #0]
 800a83a:	687a      	ldr	r2, [r7, #4]
 800a83c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	1c5a      	adds	r2, r3, #1
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	601a      	str	r2, [r3, #0]
}
 800a848:	bf00      	nop
 800a84a:	3714      	adds	r7, #20
 800a84c:	46bd      	mov	sp, r7
 800a84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a852:	4770      	bx	lr

0800a854 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a854:	b480      	push	{r7}
 800a856:	b085      	sub	sp, #20
 800a858:	af00      	add	r7, sp, #0
 800a85a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	691b      	ldr	r3, [r3, #16]
 800a860:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	685b      	ldr	r3, [r3, #4]
 800a866:	687a      	ldr	r2, [r7, #4]
 800a868:	6892      	ldr	r2, [r2, #8]
 800a86a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	689b      	ldr	r3, [r3, #8]
 800a870:	687a      	ldr	r2, [r7, #4]
 800a872:	6852      	ldr	r2, [r2, #4]
 800a874:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	685b      	ldr	r3, [r3, #4]
 800a87a:	687a      	ldr	r2, [r7, #4]
 800a87c:	429a      	cmp	r2, r3
 800a87e:	d103      	bne.n	800a888 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	689a      	ldr	r2, [r3, #8]
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	2200      	movs	r2, #0
 800a88c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	1e5a      	subs	r2, r3, #1
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	681b      	ldr	r3, [r3, #0]
}
 800a89c:	4618      	mov	r0, r3
 800a89e:	3714      	adds	r7, #20
 800a8a0:	46bd      	mov	sp, r7
 800a8a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a6:	4770      	bx	lr

0800a8a8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a8a8:	b580      	push	{r7, lr}
 800a8aa:	b084      	sub	sp, #16
 800a8ac:	af00      	add	r7, sp, #0
 800a8ae:	6078      	str	r0, [r7, #4]
 800a8b0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d10b      	bne.n	800a8d4 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a8bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8c0:	f383 8811 	msr	BASEPRI, r3
 800a8c4:	f3bf 8f6f 	isb	sy
 800a8c8:	f3bf 8f4f 	dsb	sy
 800a8cc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a8ce:	bf00      	nop
 800a8d0:	bf00      	nop
 800a8d2:	e7fd      	b.n	800a8d0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a8d4:	f002 fd18 	bl	800d308 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	681a      	ldr	r2, [r3, #0]
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a8e0:	68f9      	ldr	r1, [r7, #12]
 800a8e2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800a8e4:	fb01 f303 	mul.w	r3, r1, r3
 800a8e8:	441a      	add	r2, r3
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	2200      	movs	r2, #0
 800a8f2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	681a      	ldr	r2, [r3, #0]
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	681a      	ldr	r2, [r3, #0]
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a904:	3b01      	subs	r3, #1
 800a906:	68f9      	ldr	r1, [r7, #12]
 800a908:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800a90a:	fb01 f303 	mul.w	r3, r1, r3
 800a90e:	441a      	add	r2, r3
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	22ff      	movs	r2, #255	@ 0xff
 800a918:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	22ff      	movs	r2, #255	@ 0xff
 800a920:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800a924:	683b      	ldr	r3, [r7, #0]
 800a926:	2b00      	cmp	r3, #0
 800a928:	d114      	bne.n	800a954 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	691b      	ldr	r3, [r3, #16]
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d01a      	beq.n	800a968 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	3310      	adds	r3, #16
 800a936:	4618      	mov	r0, r3
 800a938:	f001 fcb2 	bl	800c2a0 <xTaskRemoveFromEventList>
 800a93c:	4603      	mov	r3, r0
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d012      	beq.n	800a968 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a942:	4b0d      	ldr	r3, [pc, #52]	@ (800a978 <xQueueGenericReset+0xd0>)
 800a944:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a948:	601a      	str	r2, [r3, #0]
 800a94a:	f3bf 8f4f 	dsb	sy
 800a94e:	f3bf 8f6f 	isb	sy
 800a952:	e009      	b.n	800a968 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	3310      	adds	r3, #16
 800a958:	4618      	mov	r0, r3
 800a95a:	f7ff fef1 	bl	800a740 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	3324      	adds	r3, #36	@ 0x24
 800a962:	4618      	mov	r0, r3
 800a964:	f7ff feec 	bl	800a740 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a968:	f002 fd00 	bl	800d36c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a96c:	2301      	movs	r3, #1
}
 800a96e:	4618      	mov	r0, r3
 800a970:	3710      	adds	r7, #16
 800a972:	46bd      	mov	sp, r7
 800a974:	bd80      	pop	{r7, pc}
 800a976:	bf00      	nop
 800a978:	e000ed04 	.word	0xe000ed04

0800a97c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a97c:	b580      	push	{r7, lr}
 800a97e:	b08e      	sub	sp, #56	@ 0x38
 800a980:	af02      	add	r7, sp, #8
 800a982:	60f8      	str	r0, [r7, #12]
 800a984:	60b9      	str	r1, [r7, #8]
 800a986:	607a      	str	r2, [r7, #4]
 800a988:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d10b      	bne.n	800a9a8 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800a990:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a994:	f383 8811 	msr	BASEPRI, r3
 800a998:	f3bf 8f6f 	isb	sy
 800a99c:	f3bf 8f4f 	dsb	sy
 800a9a0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a9a2:	bf00      	nop
 800a9a4:	bf00      	nop
 800a9a6:	e7fd      	b.n	800a9a4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a9a8:	683b      	ldr	r3, [r7, #0]
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d10b      	bne.n	800a9c6 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800a9ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9b2:	f383 8811 	msr	BASEPRI, r3
 800a9b6:	f3bf 8f6f 	isb	sy
 800a9ba:	f3bf 8f4f 	dsb	sy
 800a9be:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a9c0:	bf00      	nop
 800a9c2:	bf00      	nop
 800a9c4:	e7fd      	b.n	800a9c2 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d002      	beq.n	800a9d2 <xQueueGenericCreateStatic+0x56>
 800a9cc:	68bb      	ldr	r3, [r7, #8]
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d001      	beq.n	800a9d6 <xQueueGenericCreateStatic+0x5a>
 800a9d2:	2301      	movs	r3, #1
 800a9d4:	e000      	b.n	800a9d8 <xQueueGenericCreateStatic+0x5c>
 800a9d6:	2300      	movs	r3, #0
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d10b      	bne.n	800a9f4 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800a9dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9e0:	f383 8811 	msr	BASEPRI, r3
 800a9e4:	f3bf 8f6f 	isb	sy
 800a9e8:	f3bf 8f4f 	dsb	sy
 800a9ec:	623b      	str	r3, [r7, #32]
}
 800a9ee:	bf00      	nop
 800a9f0:	bf00      	nop
 800a9f2:	e7fd      	b.n	800a9f0 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d102      	bne.n	800aa00 <xQueueGenericCreateStatic+0x84>
 800a9fa:	68bb      	ldr	r3, [r7, #8]
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d101      	bne.n	800aa04 <xQueueGenericCreateStatic+0x88>
 800aa00:	2301      	movs	r3, #1
 800aa02:	e000      	b.n	800aa06 <xQueueGenericCreateStatic+0x8a>
 800aa04:	2300      	movs	r3, #0
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d10b      	bne.n	800aa22 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800aa0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa0e:	f383 8811 	msr	BASEPRI, r3
 800aa12:	f3bf 8f6f 	isb	sy
 800aa16:	f3bf 8f4f 	dsb	sy
 800aa1a:	61fb      	str	r3, [r7, #28]
}
 800aa1c:	bf00      	nop
 800aa1e:	bf00      	nop
 800aa20:	e7fd      	b.n	800aa1e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800aa22:	2350      	movs	r3, #80	@ 0x50
 800aa24:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800aa26:	697b      	ldr	r3, [r7, #20]
 800aa28:	2b50      	cmp	r3, #80	@ 0x50
 800aa2a:	d00b      	beq.n	800aa44 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800aa2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa30:	f383 8811 	msr	BASEPRI, r3
 800aa34:	f3bf 8f6f 	isb	sy
 800aa38:	f3bf 8f4f 	dsb	sy
 800aa3c:	61bb      	str	r3, [r7, #24]
}
 800aa3e:	bf00      	nop
 800aa40:	bf00      	nop
 800aa42:	e7fd      	b.n	800aa40 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800aa44:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800aa46:	683b      	ldr	r3, [r7, #0]
 800aa48:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800aa4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d00d      	beq.n	800aa6c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800aa50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa52:	2201      	movs	r2, #1
 800aa54:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800aa58:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800aa5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa5e:	9300      	str	r3, [sp, #0]
 800aa60:	4613      	mov	r3, r2
 800aa62:	687a      	ldr	r2, [r7, #4]
 800aa64:	68b9      	ldr	r1, [r7, #8]
 800aa66:	68f8      	ldr	r0, [r7, #12]
 800aa68:	f000 f840 	bl	800aaec <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800aa6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800aa6e:	4618      	mov	r0, r3
 800aa70:	3730      	adds	r7, #48	@ 0x30
 800aa72:	46bd      	mov	sp, r7
 800aa74:	bd80      	pop	{r7, pc}

0800aa76 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800aa76:	b580      	push	{r7, lr}
 800aa78:	b08a      	sub	sp, #40	@ 0x28
 800aa7a:	af02      	add	r7, sp, #8
 800aa7c:	60f8      	str	r0, [r7, #12]
 800aa7e:	60b9      	str	r1, [r7, #8]
 800aa80:	4613      	mov	r3, r2
 800aa82:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d10b      	bne.n	800aaa2 <xQueueGenericCreate+0x2c>
	__asm volatile
 800aa8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa8e:	f383 8811 	msr	BASEPRI, r3
 800aa92:	f3bf 8f6f 	isb	sy
 800aa96:	f3bf 8f4f 	dsb	sy
 800aa9a:	613b      	str	r3, [r7, #16]
}
 800aa9c:	bf00      	nop
 800aa9e:	bf00      	nop
 800aaa0:	e7fd      	b.n	800aa9e <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	68ba      	ldr	r2, [r7, #8]
 800aaa6:	fb02 f303 	mul.w	r3, r2, r3
 800aaaa:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800aaac:	69fb      	ldr	r3, [r7, #28]
 800aaae:	3350      	adds	r3, #80	@ 0x50
 800aab0:	4618      	mov	r0, r3
 800aab2:	f002 fd4b 	bl	800d54c <pvPortMalloc>
 800aab6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800aab8:	69bb      	ldr	r3, [r7, #24]
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d011      	beq.n	800aae2 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800aabe:	69bb      	ldr	r3, [r7, #24]
 800aac0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800aac2:	697b      	ldr	r3, [r7, #20]
 800aac4:	3350      	adds	r3, #80	@ 0x50
 800aac6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800aac8:	69bb      	ldr	r3, [r7, #24]
 800aaca:	2200      	movs	r2, #0
 800aacc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800aad0:	79fa      	ldrb	r2, [r7, #7]
 800aad2:	69bb      	ldr	r3, [r7, #24]
 800aad4:	9300      	str	r3, [sp, #0]
 800aad6:	4613      	mov	r3, r2
 800aad8:	697a      	ldr	r2, [r7, #20]
 800aada:	68b9      	ldr	r1, [r7, #8]
 800aadc:	68f8      	ldr	r0, [r7, #12]
 800aade:	f000 f805 	bl	800aaec <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800aae2:	69bb      	ldr	r3, [r7, #24]
	}
 800aae4:	4618      	mov	r0, r3
 800aae6:	3720      	adds	r7, #32
 800aae8:	46bd      	mov	sp, r7
 800aaea:	bd80      	pop	{r7, pc}

0800aaec <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800aaec:	b580      	push	{r7, lr}
 800aaee:	b084      	sub	sp, #16
 800aaf0:	af00      	add	r7, sp, #0
 800aaf2:	60f8      	str	r0, [r7, #12]
 800aaf4:	60b9      	str	r1, [r7, #8]
 800aaf6:	607a      	str	r2, [r7, #4]
 800aaf8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800aafa:	68bb      	ldr	r3, [r7, #8]
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d103      	bne.n	800ab08 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ab00:	69bb      	ldr	r3, [r7, #24]
 800ab02:	69ba      	ldr	r2, [r7, #24]
 800ab04:	601a      	str	r2, [r3, #0]
 800ab06:	e002      	b.n	800ab0e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ab08:	69bb      	ldr	r3, [r7, #24]
 800ab0a:	687a      	ldr	r2, [r7, #4]
 800ab0c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800ab0e:	69bb      	ldr	r3, [r7, #24]
 800ab10:	68fa      	ldr	r2, [r7, #12]
 800ab12:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800ab14:	69bb      	ldr	r3, [r7, #24]
 800ab16:	68ba      	ldr	r2, [r7, #8]
 800ab18:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ab1a:	2101      	movs	r1, #1
 800ab1c:	69b8      	ldr	r0, [r7, #24]
 800ab1e:	f7ff fec3 	bl	800a8a8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800ab22:	69bb      	ldr	r3, [r7, #24]
 800ab24:	78fa      	ldrb	r2, [r7, #3]
 800ab26:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ab2a:	bf00      	nop
 800ab2c:	3710      	adds	r7, #16
 800ab2e:	46bd      	mov	sp, r7
 800ab30:	bd80      	pop	{r7, pc}

0800ab32 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800ab32:	b580      	push	{r7, lr}
 800ab34:	b08a      	sub	sp, #40	@ 0x28
 800ab36:	af02      	add	r7, sp, #8
 800ab38:	60f8      	str	r0, [r7, #12]
 800ab3a:	60b9      	str	r1, [r7, #8]
 800ab3c:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d10b      	bne.n	800ab5c <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 800ab44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab48:	f383 8811 	msr	BASEPRI, r3
 800ab4c:	f3bf 8f6f 	isb	sy
 800ab50:	f3bf 8f4f 	dsb	sy
 800ab54:	61bb      	str	r3, [r7, #24]
}
 800ab56:	bf00      	nop
 800ab58:	bf00      	nop
 800ab5a:	e7fd      	b.n	800ab58 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800ab5c:	68ba      	ldr	r2, [r7, #8]
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	429a      	cmp	r2, r3
 800ab62:	d90b      	bls.n	800ab7c <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 800ab64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab68:	f383 8811 	msr	BASEPRI, r3
 800ab6c:	f3bf 8f6f 	isb	sy
 800ab70:	f3bf 8f4f 	dsb	sy
 800ab74:	617b      	str	r3, [r7, #20]
}
 800ab76:	bf00      	nop
 800ab78:	bf00      	nop
 800ab7a:	e7fd      	b.n	800ab78 <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800ab7c:	2302      	movs	r3, #2
 800ab7e:	9300      	str	r3, [sp, #0]
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	2200      	movs	r2, #0
 800ab84:	2100      	movs	r1, #0
 800ab86:	68f8      	ldr	r0, [r7, #12]
 800ab88:	f7ff fef8 	bl	800a97c <xQueueGenericCreateStatic>
 800ab8c:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800ab8e:	69fb      	ldr	r3, [r7, #28]
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d002      	beq.n	800ab9a <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800ab94:	69fb      	ldr	r3, [r7, #28]
 800ab96:	68ba      	ldr	r2, [r7, #8]
 800ab98:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800ab9a:	69fb      	ldr	r3, [r7, #28]
	}
 800ab9c:	4618      	mov	r0, r3
 800ab9e:	3720      	adds	r7, #32
 800aba0:	46bd      	mov	sp, r7
 800aba2:	bd80      	pop	{r7, pc}

0800aba4 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800aba4:	b580      	push	{r7, lr}
 800aba6:	b086      	sub	sp, #24
 800aba8:	af00      	add	r7, sp, #0
 800abaa:	6078      	str	r0, [r7, #4]
 800abac:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d10b      	bne.n	800abcc <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 800abb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abb8:	f383 8811 	msr	BASEPRI, r3
 800abbc:	f3bf 8f6f 	isb	sy
 800abc0:	f3bf 8f4f 	dsb	sy
 800abc4:	613b      	str	r3, [r7, #16]
}
 800abc6:	bf00      	nop
 800abc8:	bf00      	nop
 800abca:	e7fd      	b.n	800abc8 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800abcc:	683a      	ldr	r2, [r7, #0]
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	429a      	cmp	r2, r3
 800abd2:	d90b      	bls.n	800abec <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 800abd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abd8:	f383 8811 	msr	BASEPRI, r3
 800abdc:	f3bf 8f6f 	isb	sy
 800abe0:	f3bf 8f4f 	dsb	sy
 800abe4:	60fb      	str	r3, [r7, #12]
}
 800abe6:	bf00      	nop
 800abe8:	bf00      	nop
 800abea:	e7fd      	b.n	800abe8 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800abec:	2202      	movs	r2, #2
 800abee:	2100      	movs	r1, #0
 800abf0:	6878      	ldr	r0, [r7, #4]
 800abf2:	f7ff ff40 	bl	800aa76 <xQueueGenericCreate>
 800abf6:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800abf8:	697b      	ldr	r3, [r7, #20]
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d002      	beq.n	800ac04 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800abfe:	697b      	ldr	r3, [r7, #20]
 800ac00:	683a      	ldr	r2, [r7, #0]
 800ac02:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800ac04:	697b      	ldr	r3, [r7, #20]
	}
 800ac06:	4618      	mov	r0, r3
 800ac08:	3718      	adds	r7, #24
 800ac0a:	46bd      	mov	sp, r7
 800ac0c:	bd80      	pop	{r7, pc}
	...

0800ac10 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800ac10:	b580      	push	{r7, lr}
 800ac12:	b08e      	sub	sp, #56	@ 0x38
 800ac14:	af00      	add	r7, sp, #0
 800ac16:	60f8      	str	r0, [r7, #12]
 800ac18:	60b9      	str	r1, [r7, #8]
 800ac1a:	607a      	str	r2, [r7, #4]
 800ac1c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800ac1e:	2300      	movs	r3, #0
 800ac20:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800ac26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d10b      	bne.n	800ac44 <xQueueGenericSend+0x34>
	__asm volatile
 800ac2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac30:	f383 8811 	msr	BASEPRI, r3
 800ac34:	f3bf 8f6f 	isb	sy
 800ac38:	f3bf 8f4f 	dsb	sy
 800ac3c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800ac3e:	bf00      	nop
 800ac40:	bf00      	nop
 800ac42:	e7fd      	b.n	800ac40 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ac44:	68bb      	ldr	r3, [r7, #8]
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d103      	bne.n	800ac52 <xQueueGenericSend+0x42>
 800ac4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d101      	bne.n	800ac56 <xQueueGenericSend+0x46>
 800ac52:	2301      	movs	r3, #1
 800ac54:	e000      	b.n	800ac58 <xQueueGenericSend+0x48>
 800ac56:	2300      	movs	r3, #0
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d10b      	bne.n	800ac74 <xQueueGenericSend+0x64>
	__asm volatile
 800ac5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac60:	f383 8811 	msr	BASEPRI, r3
 800ac64:	f3bf 8f6f 	isb	sy
 800ac68:	f3bf 8f4f 	dsb	sy
 800ac6c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800ac6e:	bf00      	nop
 800ac70:	bf00      	nop
 800ac72:	e7fd      	b.n	800ac70 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ac74:	683b      	ldr	r3, [r7, #0]
 800ac76:	2b02      	cmp	r3, #2
 800ac78:	d103      	bne.n	800ac82 <xQueueGenericSend+0x72>
 800ac7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ac7e:	2b01      	cmp	r3, #1
 800ac80:	d101      	bne.n	800ac86 <xQueueGenericSend+0x76>
 800ac82:	2301      	movs	r3, #1
 800ac84:	e000      	b.n	800ac88 <xQueueGenericSend+0x78>
 800ac86:	2300      	movs	r3, #0
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d10b      	bne.n	800aca4 <xQueueGenericSend+0x94>
	__asm volatile
 800ac8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac90:	f383 8811 	msr	BASEPRI, r3
 800ac94:	f3bf 8f6f 	isb	sy
 800ac98:	f3bf 8f4f 	dsb	sy
 800ac9c:	623b      	str	r3, [r7, #32]
}
 800ac9e:	bf00      	nop
 800aca0:	bf00      	nop
 800aca2:	e7fd      	b.n	800aca0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800aca4:	f001 fcc2 	bl	800c62c <xTaskGetSchedulerState>
 800aca8:	4603      	mov	r3, r0
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d102      	bne.n	800acb4 <xQueueGenericSend+0xa4>
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d101      	bne.n	800acb8 <xQueueGenericSend+0xa8>
 800acb4:	2301      	movs	r3, #1
 800acb6:	e000      	b.n	800acba <xQueueGenericSend+0xaa>
 800acb8:	2300      	movs	r3, #0
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d10b      	bne.n	800acd6 <xQueueGenericSend+0xc6>
	__asm volatile
 800acbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800acc2:	f383 8811 	msr	BASEPRI, r3
 800acc6:	f3bf 8f6f 	isb	sy
 800acca:	f3bf 8f4f 	dsb	sy
 800acce:	61fb      	str	r3, [r7, #28]
}
 800acd0:	bf00      	nop
 800acd2:	bf00      	nop
 800acd4:	e7fd      	b.n	800acd2 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800acd6:	f002 fb17 	bl	800d308 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800acda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acdc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800acde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ace0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ace2:	429a      	cmp	r2, r3
 800ace4:	d302      	bcc.n	800acec <xQueueGenericSend+0xdc>
 800ace6:	683b      	ldr	r3, [r7, #0]
 800ace8:	2b02      	cmp	r3, #2
 800acea:	d129      	bne.n	800ad40 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800acec:	683a      	ldr	r2, [r7, #0]
 800acee:	68b9      	ldr	r1, [r7, #8]
 800acf0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800acf2:	f000 fcab 	bl	800b64c <prvCopyDataToQueue>
 800acf6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800acf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d010      	beq.n	800ad22 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ad00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad02:	3324      	adds	r3, #36	@ 0x24
 800ad04:	4618      	mov	r0, r3
 800ad06:	f001 facb 	bl	800c2a0 <xTaskRemoveFromEventList>
 800ad0a:	4603      	mov	r3, r0
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d013      	beq.n	800ad38 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800ad10:	4b3f      	ldr	r3, [pc, #252]	@ (800ae10 <xQueueGenericSend+0x200>)
 800ad12:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ad16:	601a      	str	r2, [r3, #0]
 800ad18:	f3bf 8f4f 	dsb	sy
 800ad1c:	f3bf 8f6f 	isb	sy
 800ad20:	e00a      	b.n	800ad38 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800ad22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d007      	beq.n	800ad38 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800ad28:	4b39      	ldr	r3, [pc, #228]	@ (800ae10 <xQueueGenericSend+0x200>)
 800ad2a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ad2e:	601a      	str	r2, [r3, #0]
 800ad30:	f3bf 8f4f 	dsb	sy
 800ad34:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800ad38:	f002 fb18 	bl	800d36c <vPortExitCritical>
				return pdPASS;
 800ad3c:	2301      	movs	r3, #1
 800ad3e:	e063      	b.n	800ae08 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d103      	bne.n	800ad4e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ad46:	f002 fb11 	bl	800d36c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ad4a:	2300      	movs	r3, #0
 800ad4c:	e05c      	b.n	800ae08 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ad4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d106      	bne.n	800ad62 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ad54:	f107 0314 	add.w	r3, r7, #20
 800ad58:	4618      	mov	r0, r3
 800ad5a:	f001 fb05 	bl	800c368 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ad5e:	2301      	movs	r3, #1
 800ad60:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ad62:	f002 fb03 	bl	800d36c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ad66:	f001 f86d 	bl	800be44 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ad6a:	f002 facd 	bl	800d308 <vPortEnterCritical>
 800ad6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad70:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ad74:	b25b      	sxtb	r3, r3
 800ad76:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad7a:	d103      	bne.n	800ad84 <xQueueGenericSend+0x174>
 800ad7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad7e:	2200      	movs	r2, #0
 800ad80:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ad84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad86:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ad8a:	b25b      	sxtb	r3, r3
 800ad8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad90:	d103      	bne.n	800ad9a <xQueueGenericSend+0x18a>
 800ad92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad94:	2200      	movs	r2, #0
 800ad96:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ad9a:	f002 fae7 	bl	800d36c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ad9e:	1d3a      	adds	r2, r7, #4
 800ada0:	f107 0314 	add.w	r3, r7, #20
 800ada4:	4611      	mov	r1, r2
 800ada6:	4618      	mov	r0, r3
 800ada8:	f001 faf4 	bl	800c394 <xTaskCheckForTimeOut>
 800adac:	4603      	mov	r3, r0
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d124      	bne.n	800adfc <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800adb2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800adb4:	f000 fd42 	bl	800b83c <prvIsQueueFull>
 800adb8:	4603      	mov	r3, r0
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d018      	beq.n	800adf0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800adbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800adc0:	3310      	adds	r3, #16
 800adc2:	687a      	ldr	r2, [r7, #4]
 800adc4:	4611      	mov	r1, r2
 800adc6:	4618      	mov	r0, r3
 800adc8:	f001 fa18 	bl	800c1fc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800adcc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800adce:	f000 fccd 	bl	800b76c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800add2:	f001 f845 	bl	800be60 <xTaskResumeAll>
 800add6:	4603      	mov	r3, r0
 800add8:	2b00      	cmp	r3, #0
 800adda:	f47f af7c 	bne.w	800acd6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800adde:	4b0c      	ldr	r3, [pc, #48]	@ (800ae10 <xQueueGenericSend+0x200>)
 800ade0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ade4:	601a      	str	r2, [r3, #0]
 800ade6:	f3bf 8f4f 	dsb	sy
 800adea:	f3bf 8f6f 	isb	sy
 800adee:	e772      	b.n	800acd6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800adf0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800adf2:	f000 fcbb 	bl	800b76c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800adf6:	f001 f833 	bl	800be60 <xTaskResumeAll>
 800adfa:	e76c      	b.n	800acd6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800adfc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800adfe:	f000 fcb5 	bl	800b76c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ae02:	f001 f82d 	bl	800be60 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800ae06:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800ae08:	4618      	mov	r0, r3
 800ae0a:	3738      	adds	r7, #56	@ 0x38
 800ae0c:	46bd      	mov	sp, r7
 800ae0e:	bd80      	pop	{r7, pc}
 800ae10:	e000ed04 	.word	0xe000ed04

0800ae14 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800ae14:	b580      	push	{r7, lr}
 800ae16:	b090      	sub	sp, #64	@ 0x40
 800ae18:	af00      	add	r7, sp, #0
 800ae1a:	60f8      	str	r0, [r7, #12]
 800ae1c:	60b9      	str	r1, [r7, #8]
 800ae1e:	607a      	str	r2, [r7, #4]
 800ae20:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800ae26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d10b      	bne.n	800ae44 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800ae2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae30:	f383 8811 	msr	BASEPRI, r3
 800ae34:	f3bf 8f6f 	isb	sy
 800ae38:	f3bf 8f4f 	dsb	sy
 800ae3c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800ae3e:	bf00      	nop
 800ae40:	bf00      	nop
 800ae42:	e7fd      	b.n	800ae40 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ae44:	68bb      	ldr	r3, [r7, #8]
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d103      	bne.n	800ae52 <xQueueGenericSendFromISR+0x3e>
 800ae4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d101      	bne.n	800ae56 <xQueueGenericSendFromISR+0x42>
 800ae52:	2301      	movs	r3, #1
 800ae54:	e000      	b.n	800ae58 <xQueueGenericSendFromISR+0x44>
 800ae56:	2300      	movs	r3, #0
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d10b      	bne.n	800ae74 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800ae5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae60:	f383 8811 	msr	BASEPRI, r3
 800ae64:	f3bf 8f6f 	isb	sy
 800ae68:	f3bf 8f4f 	dsb	sy
 800ae6c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800ae6e:	bf00      	nop
 800ae70:	bf00      	nop
 800ae72:	e7fd      	b.n	800ae70 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ae74:	683b      	ldr	r3, [r7, #0]
 800ae76:	2b02      	cmp	r3, #2
 800ae78:	d103      	bne.n	800ae82 <xQueueGenericSendFromISR+0x6e>
 800ae7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ae7e:	2b01      	cmp	r3, #1
 800ae80:	d101      	bne.n	800ae86 <xQueueGenericSendFromISR+0x72>
 800ae82:	2301      	movs	r3, #1
 800ae84:	e000      	b.n	800ae88 <xQueueGenericSendFromISR+0x74>
 800ae86:	2300      	movs	r3, #0
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d10b      	bne.n	800aea4 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800ae8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae90:	f383 8811 	msr	BASEPRI, r3
 800ae94:	f3bf 8f6f 	isb	sy
 800ae98:	f3bf 8f4f 	dsb	sy
 800ae9c:	623b      	str	r3, [r7, #32]
}
 800ae9e:	bf00      	nop
 800aea0:	bf00      	nop
 800aea2:	e7fd      	b.n	800aea0 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800aea4:	f002 fb10 	bl	800d4c8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800aea8:	f3ef 8211 	mrs	r2, BASEPRI
 800aeac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aeb0:	f383 8811 	msr	BASEPRI, r3
 800aeb4:	f3bf 8f6f 	isb	sy
 800aeb8:	f3bf 8f4f 	dsb	sy
 800aebc:	61fa      	str	r2, [r7, #28]
 800aebe:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800aec0:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800aec2:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800aec4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aec6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800aec8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aeca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aecc:	429a      	cmp	r2, r3
 800aece:	d302      	bcc.n	800aed6 <xQueueGenericSendFromISR+0xc2>
 800aed0:	683b      	ldr	r3, [r7, #0]
 800aed2:	2b02      	cmp	r3, #2
 800aed4:	d12f      	bne.n	800af36 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800aed6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aed8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800aedc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800aee0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aee2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aee4:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800aee6:	683a      	ldr	r2, [r7, #0]
 800aee8:	68b9      	ldr	r1, [r7, #8]
 800aeea:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800aeec:	f000 fbae 	bl	800b64c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800aef0:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800aef4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aef8:	d112      	bne.n	800af20 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800aefa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aefc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d016      	beq.n	800af30 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800af02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af04:	3324      	adds	r3, #36	@ 0x24
 800af06:	4618      	mov	r0, r3
 800af08:	f001 f9ca 	bl	800c2a0 <xTaskRemoveFromEventList>
 800af0c:	4603      	mov	r3, r0
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d00e      	beq.n	800af30 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	2b00      	cmp	r3, #0
 800af16:	d00b      	beq.n	800af30 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	2201      	movs	r2, #1
 800af1c:	601a      	str	r2, [r3, #0]
 800af1e:	e007      	b.n	800af30 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800af20:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800af24:	3301      	adds	r3, #1
 800af26:	b2db      	uxtb	r3, r3
 800af28:	b25a      	sxtb	r2, r3
 800af2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af2c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800af30:	2301      	movs	r3, #1
 800af32:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800af34:	e001      	b.n	800af3a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800af36:	2300      	movs	r3, #0
 800af38:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800af3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800af3c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800af3e:	697b      	ldr	r3, [r7, #20]
 800af40:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800af44:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800af46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800af48:	4618      	mov	r0, r3
 800af4a:	3740      	adds	r7, #64	@ 0x40
 800af4c:	46bd      	mov	sp, r7
 800af4e:	bd80      	pop	{r7, pc}

0800af50 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800af50:	b580      	push	{r7, lr}
 800af52:	b08e      	sub	sp, #56	@ 0x38
 800af54:	af00      	add	r7, sp, #0
 800af56:	6078      	str	r0, [r7, #4]
 800af58:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800af5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af60:	2b00      	cmp	r3, #0
 800af62:	d10b      	bne.n	800af7c <xQueueGiveFromISR+0x2c>
	__asm volatile
 800af64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af68:	f383 8811 	msr	BASEPRI, r3
 800af6c:	f3bf 8f6f 	isb	sy
 800af70:	f3bf 8f4f 	dsb	sy
 800af74:	623b      	str	r3, [r7, #32]
}
 800af76:	bf00      	nop
 800af78:	bf00      	nop
 800af7a:	e7fd      	b.n	800af78 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800af7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af80:	2b00      	cmp	r3, #0
 800af82:	d00b      	beq.n	800af9c <xQueueGiveFromISR+0x4c>
	__asm volatile
 800af84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af88:	f383 8811 	msr	BASEPRI, r3
 800af8c:	f3bf 8f6f 	isb	sy
 800af90:	f3bf 8f4f 	dsb	sy
 800af94:	61fb      	str	r3, [r7, #28]
}
 800af96:	bf00      	nop
 800af98:	bf00      	nop
 800af9a:	e7fd      	b.n	800af98 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800af9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d103      	bne.n	800afac <xQueueGiveFromISR+0x5c>
 800afa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afa6:	689b      	ldr	r3, [r3, #8]
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d101      	bne.n	800afb0 <xQueueGiveFromISR+0x60>
 800afac:	2301      	movs	r3, #1
 800afae:	e000      	b.n	800afb2 <xQueueGiveFromISR+0x62>
 800afb0:	2300      	movs	r3, #0
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d10b      	bne.n	800afce <xQueueGiveFromISR+0x7e>
	__asm volatile
 800afb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800afba:	f383 8811 	msr	BASEPRI, r3
 800afbe:	f3bf 8f6f 	isb	sy
 800afc2:	f3bf 8f4f 	dsb	sy
 800afc6:	61bb      	str	r3, [r7, #24]
}
 800afc8:	bf00      	nop
 800afca:	bf00      	nop
 800afcc:	e7fd      	b.n	800afca <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800afce:	f002 fa7b 	bl	800d4c8 <vPortValidateInterruptPriority>
	__asm volatile
 800afd2:	f3ef 8211 	mrs	r2, BASEPRI
 800afd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800afda:	f383 8811 	msr	BASEPRI, r3
 800afde:	f3bf 8f6f 	isb	sy
 800afe2:	f3bf 8f4f 	dsb	sy
 800afe6:	617a      	str	r2, [r7, #20]
 800afe8:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800afea:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800afec:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800afee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aff0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aff2:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800aff4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aff6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aff8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800affa:	429a      	cmp	r2, r3
 800affc:	d22b      	bcs.n	800b056 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800affe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b000:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b004:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b008:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b00a:	1c5a      	adds	r2, r3, #1
 800b00c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b00e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b010:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800b014:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b018:	d112      	bne.n	800b040 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b01a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b01c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d016      	beq.n	800b050 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b022:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b024:	3324      	adds	r3, #36	@ 0x24
 800b026:	4618      	mov	r0, r3
 800b028:	f001 f93a 	bl	800c2a0 <xTaskRemoveFromEventList>
 800b02c:	4603      	mov	r3, r0
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d00e      	beq.n	800b050 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b032:	683b      	ldr	r3, [r7, #0]
 800b034:	2b00      	cmp	r3, #0
 800b036:	d00b      	beq.n	800b050 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b038:	683b      	ldr	r3, [r7, #0]
 800b03a:	2201      	movs	r2, #1
 800b03c:	601a      	str	r2, [r3, #0]
 800b03e:	e007      	b.n	800b050 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b040:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b044:	3301      	adds	r3, #1
 800b046:	b2db      	uxtb	r3, r3
 800b048:	b25a      	sxtb	r2, r3
 800b04a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b04c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800b050:	2301      	movs	r3, #1
 800b052:	637b      	str	r3, [r7, #52]	@ 0x34
 800b054:	e001      	b.n	800b05a <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b056:	2300      	movs	r3, #0
 800b058:	637b      	str	r3, [r7, #52]	@ 0x34
 800b05a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b05c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	f383 8811 	msr	BASEPRI, r3
}
 800b064:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b066:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800b068:	4618      	mov	r0, r3
 800b06a:	3738      	adds	r7, #56	@ 0x38
 800b06c:	46bd      	mov	sp, r7
 800b06e:	bd80      	pop	{r7, pc}

0800b070 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b070:	b580      	push	{r7, lr}
 800b072:	b08c      	sub	sp, #48	@ 0x30
 800b074:	af00      	add	r7, sp, #0
 800b076:	60f8      	str	r0, [r7, #12]
 800b078:	60b9      	str	r1, [r7, #8]
 800b07a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b07c:	2300      	movs	r3, #0
 800b07e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b084:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b086:	2b00      	cmp	r3, #0
 800b088:	d10b      	bne.n	800b0a2 <xQueueReceive+0x32>
	__asm volatile
 800b08a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b08e:	f383 8811 	msr	BASEPRI, r3
 800b092:	f3bf 8f6f 	isb	sy
 800b096:	f3bf 8f4f 	dsb	sy
 800b09a:	623b      	str	r3, [r7, #32]
}
 800b09c:	bf00      	nop
 800b09e:	bf00      	nop
 800b0a0:	e7fd      	b.n	800b09e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b0a2:	68bb      	ldr	r3, [r7, #8]
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d103      	bne.n	800b0b0 <xQueueReceive+0x40>
 800b0a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b0aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d101      	bne.n	800b0b4 <xQueueReceive+0x44>
 800b0b0:	2301      	movs	r3, #1
 800b0b2:	e000      	b.n	800b0b6 <xQueueReceive+0x46>
 800b0b4:	2300      	movs	r3, #0
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d10b      	bne.n	800b0d2 <xQueueReceive+0x62>
	__asm volatile
 800b0ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b0be:	f383 8811 	msr	BASEPRI, r3
 800b0c2:	f3bf 8f6f 	isb	sy
 800b0c6:	f3bf 8f4f 	dsb	sy
 800b0ca:	61fb      	str	r3, [r7, #28]
}
 800b0cc:	bf00      	nop
 800b0ce:	bf00      	nop
 800b0d0:	e7fd      	b.n	800b0ce <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b0d2:	f001 faab 	bl	800c62c <xTaskGetSchedulerState>
 800b0d6:	4603      	mov	r3, r0
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d102      	bne.n	800b0e2 <xQueueReceive+0x72>
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d101      	bne.n	800b0e6 <xQueueReceive+0x76>
 800b0e2:	2301      	movs	r3, #1
 800b0e4:	e000      	b.n	800b0e8 <xQueueReceive+0x78>
 800b0e6:	2300      	movs	r3, #0
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d10b      	bne.n	800b104 <xQueueReceive+0x94>
	__asm volatile
 800b0ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b0f0:	f383 8811 	msr	BASEPRI, r3
 800b0f4:	f3bf 8f6f 	isb	sy
 800b0f8:	f3bf 8f4f 	dsb	sy
 800b0fc:	61bb      	str	r3, [r7, #24]
}
 800b0fe:	bf00      	nop
 800b100:	bf00      	nop
 800b102:	e7fd      	b.n	800b100 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b104:	f002 f900 	bl	800d308 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b108:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b10a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b10c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b10e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b110:	2b00      	cmp	r3, #0
 800b112:	d01f      	beq.n	800b154 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b114:	68b9      	ldr	r1, [r7, #8]
 800b116:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b118:	f000 fb02 	bl	800b720 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b11c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b11e:	1e5a      	subs	r2, r3, #1
 800b120:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b122:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b124:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b126:	691b      	ldr	r3, [r3, #16]
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d00f      	beq.n	800b14c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b12c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b12e:	3310      	adds	r3, #16
 800b130:	4618      	mov	r0, r3
 800b132:	f001 f8b5 	bl	800c2a0 <xTaskRemoveFromEventList>
 800b136:	4603      	mov	r3, r0
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d007      	beq.n	800b14c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b13c:	4b3c      	ldr	r3, [pc, #240]	@ (800b230 <xQueueReceive+0x1c0>)
 800b13e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b142:	601a      	str	r2, [r3, #0]
 800b144:	f3bf 8f4f 	dsb	sy
 800b148:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b14c:	f002 f90e 	bl	800d36c <vPortExitCritical>
				return pdPASS;
 800b150:	2301      	movs	r3, #1
 800b152:	e069      	b.n	800b228 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	2b00      	cmp	r3, #0
 800b158:	d103      	bne.n	800b162 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b15a:	f002 f907 	bl	800d36c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b15e:	2300      	movs	r3, #0
 800b160:	e062      	b.n	800b228 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b162:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b164:	2b00      	cmp	r3, #0
 800b166:	d106      	bne.n	800b176 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b168:	f107 0310 	add.w	r3, r7, #16
 800b16c:	4618      	mov	r0, r3
 800b16e:	f001 f8fb 	bl	800c368 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b172:	2301      	movs	r3, #1
 800b174:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b176:	f002 f8f9 	bl	800d36c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b17a:	f000 fe63 	bl	800be44 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b17e:	f002 f8c3 	bl	800d308 <vPortEnterCritical>
 800b182:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b184:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b188:	b25b      	sxtb	r3, r3
 800b18a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b18e:	d103      	bne.n	800b198 <xQueueReceive+0x128>
 800b190:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b192:	2200      	movs	r2, #0
 800b194:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b198:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b19a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b19e:	b25b      	sxtb	r3, r3
 800b1a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1a4:	d103      	bne.n	800b1ae <xQueueReceive+0x13e>
 800b1a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1a8:	2200      	movs	r2, #0
 800b1aa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b1ae:	f002 f8dd 	bl	800d36c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b1b2:	1d3a      	adds	r2, r7, #4
 800b1b4:	f107 0310 	add.w	r3, r7, #16
 800b1b8:	4611      	mov	r1, r2
 800b1ba:	4618      	mov	r0, r3
 800b1bc:	f001 f8ea 	bl	800c394 <xTaskCheckForTimeOut>
 800b1c0:	4603      	mov	r3, r0
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d123      	bne.n	800b20e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b1c6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b1c8:	f000 fb22 	bl	800b810 <prvIsQueueEmpty>
 800b1cc:	4603      	mov	r3, r0
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d017      	beq.n	800b202 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b1d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1d4:	3324      	adds	r3, #36	@ 0x24
 800b1d6:	687a      	ldr	r2, [r7, #4]
 800b1d8:	4611      	mov	r1, r2
 800b1da:	4618      	mov	r0, r3
 800b1dc:	f001 f80e 	bl	800c1fc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b1e0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b1e2:	f000 fac3 	bl	800b76c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b1e6:	f000 fe3b 	bl	800be60 <xTaskResumeAll>
 800b1ea:	4603      	mov	r3, r0
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d189      	bne.n	800b104 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800b1f0:	4b0f      	ldr	r3, [pc, #60]	@ (800b230 <xQueueReceive+0x1c0>)
 800b1f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b1f6:	601a      	str	r2, [r3, #0]
 800b1f8:	f3bf 8f4f 	dsb	sy
 800b1fc:	f3bf 8f6f 	isb	sy
 800b200:	e780      	b.n	800b104 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b202:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b204:	f000 fab2 	bl	800b76c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b208:	f000 fe2a 	bl	800be60 <xTaskResumeAll>
 800b20c:	e77a      	b.n	800b104 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b20e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b210:	f000 faac 	bl	800b76c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b214:	f000 fe24 	bl	800be60 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b218:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b21a:	f000 faf9 	bl	800b810 <prvIsQueueEmpty>
 800b21e:	4603      	mov	r3, r0
 800b220:	2b00      	cmp	r3, #0
 800b222:	f43f af6f 	beq.w	800b104 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b226:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b228:	4618      	mov	r0, r3
 800b22a:	3730      	adds	r7, #48	@ 0x30
 800b22c:	46bd      	mov	sp, r7
 800b22e:	bd80      	pop	{r7, pc}
 800b230:	e000ed04 	.word	0xe000ed04

0800b234 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800b234:	b580      	push	{r7, lr}
 800b236:	b08e      	sub	sp, #56	@ 0x38
 800b238:	af00      	add	r7, sp, #0
 800b23a:	6078      	str	r0, [r7, #4]
 800b23c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800b23e:	2300      	movs	r3, #0
 800b240:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800b246:	2300      	movs	r3, #0
 800b248:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b24a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d10b      	bne.n	800b268 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800b250:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b254:	f383 8811 	msr	BASEPRI, r3
 800b258:	f3bf 8f6f 	isb	sy
 800b25c:	f3bf 8f4f 	dsb	sy
 800b260:	623b      	str	r3, [r7, #32]
}
 800b262:	bf00      	nop
 800b264:	bf00      	nop
 800b266:	e7fd      	b.n	800b264 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800b268:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b26a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d00b      	beq.n	800b288 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800b270:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b274:	f383 8811 	msr	BASEPRI, r3
 800b278:	f3bf 8f6f 	isb	sy
 800b27c:	f3bf 8f4f 	dsb	sy
 800b280:	61fb      	str	r3, [r7, #28]
}
 800b282:	bf00      	nop
 800b284:	bf00      	nop
 800b286:	e7fd      	b.n	800b284 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b288:	f001 f9d0 	bl	800c62c <xTaskGetSchedulerState>
 800b28c:	4603      	mov	r3, r0
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d102      	bne.n	800b298 <xQueueSemaphoreTake+0x64>
 800b292:	683b      	ldr	r3, [r7, #0]
 800b294:	2b00      	cmp	r3, #0
 800b296:	d101      	bne.n	800b29c <xQueueSemaphoreTake+0x68>
 800b298:	2301      	movs	r3, #1
 800b29a:	e000      	b.n	800b29e <xQueueSemaphoreTake+0x6a>
 800b29c:	2300      	movs	r3, #0
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d10b      	bne.n	800b2ba <xQueueSemaphoreTake+0x86>
	__asm volatile
 800b2a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2a6:	f383 8811 	msr	BASEPRI, r3
 800b2aa:	f3bf 8f6f 	isb	sy
 800b2ae:	f3bf 8f4f 	dsb	sy
 800b2b2:	61bb      	str	r3, [r7, #24]
}
 800b2b4:	bf00      	nop
 800b2b6:	bf00      	nop
 800b2b8:	e7fd      	b.n	800b2b6 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b2ba:	f002 f825 	bl	800d308 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800b2be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b2c2:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800b2c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d024      	beq.n	800b314 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800b2ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2cc:	1e5a      	subs	r2, r3, #1
 800b2ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2d0:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b2d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d104      	bne.n	800b2e4 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800b2da:	f001 fb21 	bl	800c920 <pvTaskIncrementMutexHeldCount>
 800b2de:	4602      	mov	r2, r0
 800b2e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2e2:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b2e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2e6:	691b      	ldr	r3, [r3, #16]
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d00f      	beq.n	800b30c <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b2ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2ee:	3310      	adds	r3, #16
 800b2f0:	4618      	mov	r0, r3
 800b2f2:	f000 ffd5 	bl	800c2a0 <xTaskRemoveFromEventList>
 800b2f6:	4603      	mov	r3, r0
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d007      	beq.n	800b30c <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b2fc:	4b54      	ldr	r3, [pc, #336]	@ (800b450 <xQueueSemaphoreTake+0x21c>)
 800b2fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b302:	601a      	str	r2, [r3, #0]
 800b304:	f3bf 8f4f 	dsb	sy
 800b308:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b30c:	f002 f82e 	bl	800d36c <vPortExitCritical>
				return pdPASS;
 800b310:	2301      	movs	r3, #1
 800b312:	e098      	b.n	800b446 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b314:	683b      	ldr	r3, [r7, #0]
 800b316:	2b00      	cmp	r3, #0
 800b318:	d112      	bne.n	800b340 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800b31a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d00b      	beq.n	800b338 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800b320:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b324:	f383 8811 	msr	BASEPRI, r3
 800b328:	f3bf 8f6f 	isb	sy
 800b32c:	f3bf 8f4f 	dsb	sy
 800b330:	617b      	str	r3, [r7, #20]
}
 800b332:	bf00      	nop
 800b334:	bf00      	nop
 800b336:	e7fd      	b.n	800b334 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800b338:	f002 f818 	bl	800d36c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b33c:	2300      	movs	r3, #0
 800b33e:	e082      	b.n	800b446 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b340:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b342:	2b00      	cmp	r3, #0
 800b344:	d106      	bne.n	800b354 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b346:	f107 030c 	add.w	r3, r7, #12
 800b34a:	4618      	mov	r0, r3
 800b34c:	f001 f80c 	bl	800c368 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b350:	2301      	movs	r3, #1
 800b352:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b354:	f002 f80a 	bl	800d36c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b358:	f000 fd74 	bl	800be44 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b35c:	f001 ffd4 	bl	800d308 <vPortEnterCritical>
 800b360:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b362:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b366:	b25b      	sxtb	r3, r3
 800b368:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b36c:	d103      	bne.n	800b376 <xQueueSemaphoreTake+0x142>
 800b36e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b370:	2200      	movs	r2, #0
 800b372:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b376:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b378:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b37c:	b25b      	sxtb	r3, r3
 800b37e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b382:	d103      	bne.n	800b38c <xQueueSemaphoreTake+0x158>
 800b384:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b386:	2200      	movs	r2, #0
 800b388:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b38c:	f001 ffee 	bl	800d36c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b390:	463a      	mov	r2, r7
 800b392:	f107 030c 	add.w	r3, r7, #12
 800b396:	4611      	mov	r1, r2
 800b398:	4618      	mov	r0, r3
 800b39a:	f000 fffb 	bl	800c394 <xTaskCheckForTimeOut>
 800b39e:	4603      	mov	r3, r0
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d132      	bne.n	800b40a <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b3a4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b3a6:	f000 fa33 	bl	800b810 <prvIsQueueEmpty>
 800b3aa:	4603      	mov	r3, r0
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d026      	beq.n	800b3fe <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b3b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d109      	bne.n	800b3cc <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800b3b8:	f001 ffa6 	bl	800d308 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b3bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b3be:	689b      	ldr	r3, [r3, #8]
 800b3c0:	4618      	mov	r0, r3
 800b3c2:	f001 f951 	bl	800c668 <xTaskPriorityInherit>
 800b3c6:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800b3c8:	f001 ffd0 	bl	800d36c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b3cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b3ce:	3324      	adds	r3, #36	@ 0x24
 800b3d0:	683a      	ldr	r2, [r7, #0]
 800b3d2:	4611      	mov	r1, r2
 800b3d4:	4618      	mov	r0, r3
 800b3d6:	f000 ff11 	bl	800c1fc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b3da:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b3dc:	f000 f9c6 	bl	800b76c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b3e0:	f000 fd3e 	bl	800be60 <xTaskResumeAll>
 800b3e4:	4603      	mov	r3, r0
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	f47f af67 	bne.w	800b2ba <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800b3ec:	4b18      	ldr	r3, [pc, #96]	@ (800b450 <xQueueSemaphoreTake+0x21c>)
 800b3ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b3f2:	601a      	str	r2, [r3, #0]
 800b3f4:	f3bf 8f4f 	dsb	sy
 800b3f8:	f3bf 8f6f 	isb	sy
 800b3fc:	e75d      	b.n	800b2ba <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800b3fe:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b400:	f000 f9b4 	bl	800b76c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b404:	f000 fd2c 	bl	800be60 <xTaskResumeAll>
 800b408:	e757      	b.n	800b2ba <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800b40a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b40c:	f000 f9ae 	bl	800b76c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b410:	f000 fd26 	bl	800be60 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b414:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b416:	f000 f9fb 	bl	800b810 <prvIsQueueEmpty>
 800b41a:	4603      	mov	r3, r0
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	f43f af4c 	beq.w	800b2ba <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800b422:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b424:	2b00      	cmp	r3, #0
 800b426:	d00d      	beq.n	800b444 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800b428:	f001 ff6e 	bl	800d308 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800b42c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b42e:	f000 f8f5 	bl	800b61c <prvGetDisinheritPriorityAfterTimeout>
 800b432:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800b434:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b436:	689b      	ldr	r3, [r3, #8]
 800b438:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b43a:	4618      	mov	r0, r3
 800b43c:	f001 f9ec 	bl	800c818 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800b440:	f001 ff94 	bl	800d36c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b444:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b446:	4618      	mov	r0, r3
 800b448:	3738      	adds	r7, #56	@ 0x38
 800b44a:	46bd      	mov	sp, r7
 800b44c:	bd80      	pop	{r7, pc}
 800b44e:	bf00      	nop
 800b450:	e000ed04 	.word	0xe000ed04

0800b454 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800b454:	b580      	push	{r7, lr}
 800b456:	b08e      	sub	sp, #56	@ 0x38
 800b458:	af00      	add	r7, sp, #0
 800b45a:	60f8      	str	r0, [r7, #12]
 800b45c:	60b9      	str	r1, [r7, #8]
 800b45e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800b464:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b466:	2b00      	cmp	r3, #0
 800b468:	d10b      	bne.n	800b482 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800b46a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b46e:	f383 8811 	msr	BASEPRI, r3
 800b472:	f3bf 8f6f 	isb	sy
 800b476:	f3bf 8f4f 	dsb	sy
 800b47a:	623b      	str	r3, [r7, #32]
}
 800b47c:	bf00      	nop
 800b47e:	bf00      	nop
 800b480:	e7fd      	b.n	800b47e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b482:	68bb      	ldr	r3, [r7, #8]
 800b484:	2b00      	cmp	r3, #0
 800b486:	d103      	bne.n	800b490 <xQueueReceiveFromISR+0x3c>
 800b488:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b48a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d101      	bne.n	800b494 <xQueueReceiveFromISR+0x40>
 800b490:	2301      	movs	r3, #1
 800b492:	e000      	b.n	800b496 <xQueueReceiveFromISR+0x42>
 800b494:	2300      	movs	r3, #0
 800b496:	2b00      	cmp	r3, #0
 800b498:	d10b      	bne.n	800b4b2 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800b49a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b49e:	f383 8811 	msr	BASEPRI, r3
 800b4a2:	f3bf 8f6f 	isb	sy
 800b4a6:	f3bf 8f4f 	dsb	sy
 800b4aa:	61fb      	str	r3, [r7, #28]
}
 800b4ac:	bf00      	nop
 800b4ae:	bf00      	nop
 800b4b0:	e7fd      	b.n	800b4ae <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b4b2:	f002 f809 	bl	800d4c8 <vPortValidateInterruptPriority>
	__asm volatile
 800b4b6:	f3ef 8211 	mrs	r2, BASEPRI
 800b4ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4be:	f383 8811 	msr	BASEPRI, r3
 800b4c2:	f3bf 8f6f 	isb	sy
 800b4c6:	f3bf 8f4f 	dsb	sy
 800b4ca:	61ba      	str	r2, [r7, #24]
 800b4cc:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800b4ce:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b4d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b4d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b4d6:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b4d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d02f      	beq.n	800b53e <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800b4de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4e0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b4e4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b4e8:	68b9      	ldr	r1, [r7, #8]
 800b4ea:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b4ec:	f000 f918 	bl	800b720 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b4f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4f2:	1e5a      	subs	r2, r3, #1
 800b4f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4f6:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800b4f8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800b4fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b500:	d112      	bne.n	800b528 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b502:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b504:	691b      	ldr	r3, [r3, #16]
 800b506:	2b00      	cmp	r3, #0
 800b508:	d016      	beq.n	800b538 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b50a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b50c:	3310      	adds	r3, #16
 800b50e:	4618      	mov	r0, r3
 800b510:	f000 fec6 	bl	800c2a0 <xTaskRemoveFromEventList>
 800b514:	4603      	mov	r3, r0
 800b516:	2b00      	cmp	r3, #0
 800b518:	d00e      	beq.n	800b538 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d00b      	beq.n	800b538 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	2201      	movs	r2, #1
 800b524:	601a      	str	r2, [r3, #0]
 800b526:	e007      	b.n	800b538 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800b528:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b52c:	3301      	adds	r3, #1
 800b52e:	b2db      	uxtb	r3, r3
 800b530:	b25a      	sxtb	r2, r3
 800b532:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b534:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800b538:	2301      	movs	r3, #1
 800b53a:	637b      	str	r3, [r7, #52]	@ 0x34
 800b53c:	e001      	b.n	800b542 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800b53e:	2300      	movs	r3, #0
 800b540:	637b      	str	r3, [r7, #52]	@ 0x34
 800b542:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b544:	613b      	str	r3, [r7, #16]
	__asm volatile
 800b546:	693b      	ldr	r3, [r7, #16]
 800b548:	f383 8811 	msr	BASEPRI, r3
}
 800b54c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b54e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800b550:	4618      	mov	r0, r3
 800b552:	3738      	adds	r7, #56	@ 0x38
 800b554:	46bd      	mov	sp, r7
 800b556:	bd80      	pop	{r7, pc}

0800b558 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800b558:	b580      	push	{r7, lr}
 800b55a:	b084      	sub	sp, #16
 800b55c:	af00      	add	r7, sp, #0
 800b55e:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	2b00      	cmp	r3, #0
 800b564:	d10b      	bne.n	800b57e <uxQueueMessagesWaiting+0x26>
	__asm volatile
 800b566:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b56a:	f383 8811 	msr	BASEPRI, r3
 800b56e:	f3bf 8f6f 	isb	sy
 800b572:	f3bf 8f4f 	dsb	sy
 800b576:	60bb      	str	r3, [r7, #8]
}
 800b578:	bf00      	nop
 800b57a:	bf00      	nop
 800b57c:	e7fd      	b.n	800b57a <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 800b57e:	f001 fec3 	bl	800d308 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b586:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800b588:	f001 fef0 	bl	800d36c <vPortExitCritical>

	return uxReturn;
 800b58c:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800b58e:	4618      	mov	r0, r3
 800b590:	3710      	adds	r7, #16
 800b592:	46bd      	mov	sp, r7
 800b594:	bd80      	pop	{r7, pc}

0800b596 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 800b596:	b480      	push	{r7}
 800b598:	b087      	sub	sp, #28
 800b59a:	af00      	add	r7, sp, #0
 800b59c:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800b5a2:	697b      	ldr	r3, [r7, #20]
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d10b      	bne.n	800b5c0 <uxQueueMessagesWaitingFromISR+0x2a>
	__asm volatile
 800b5a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5ac:	f383 8811 	msr	BASEPRI, r3
 800b5b0:	f3bf 8f6f 	isb	sy
 800b5b4:	f3bf 8f4f 	dsb	sy
 800b5b8:	60fb      	str	r3, [r7, #12]
}
 800b5ba:	bf00      	nop
 800b5bc:	bf00      	nop
 800b5be:	e7fd      	b.n	800b5bc <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 800b5c0:	697b      	ldr	r3, [r7, #20]
 800b5c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b5c4:	613b      	str	r3, [r7, #16]

	return uxReturn;
 800b5c6:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800b5c8:	4618      	mov	r0, r3
 800b5ca:	371c      	adds	r7, #28
 800b5cc:	46bd      	mov	sp, r7
 800b5ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5d2:	4770      	bx	lr

0800b5d4 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800b5d4:	b580      	push	{r7, lr}
 800b5d6:	b084      	sub	sp, #16
 800b5d8:	af00      	add	r7, sp, #0
 800b5da:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d10b      	bne.n	800b5fe <vQueueDelete+0x2a>
	__asm volatile
 800b5e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5ea:	f383 8811 	msr	BASEPRI, r3
 800b5ee:	f3bf 8f6f 	isb	sy
 800b5f2:	f3bf 8f4f 	dsb	sy
 800b5f6:	60bb      	str	r3, [r7, #8]
}
 800b5f8:	bf00      	nop
 800b5fa:	bf00      	nop
 800b5fc:	e7fd      	b.n	800b5fa <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800b5fe:	68f8      	ldr	r0, [r7, #12]
 800b600:	f000 f95e 	bl	800b8c0 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d102      	bne.n	800b614 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 800b60e:	68f8      	ldr	r0, [r7, #12]
 800b610:	f002 f86a 	bl	800d6e8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800b614:	bf00      	nop
 800b616:	3710      	adds	r7, #16
 800b618:	46bd      	mov	sp, r7
 800b61a:	bd80      	pop	{r7, pc}

0800b61c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800b61c:	b480      	push	{r7}
 800b61e:	b085      	sub	sp, #20
 800b620:	af00      	add	r7, sp, #0
 800b622:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d006      	beq.n	800b63a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800b636:	60fb      	str	r3, [r7, #12]
 800b638:	e001      	b.n	800b63e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800b63a:	2300      	movs	r3, #0
 800b63c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800b63e:	68fb      	ldr	r3, [r7, #12]
	}
 800b640:	4618      	mov	r0, r3
 800b642:	3714      	adds	r7, #20
 800b644:	46bd      	mov	sp, r7
 800b646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b64a:	4770      	bx	lr

0800b64c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b64c:	b580      	push	{r7, lr}
 800b64e:	b086      	sub	sp, #24
 800b650:	af00      	add	r7, sp, #0
 800b652:	60f8      	str	r0, [r7, #12]
 800b654:	60b9      	str	r1, [r7, #8]
 800b656:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b658:	2300      	movs	r3, #0
 800b65a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b660:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b666:	2b00      	cmp	r3, #0
 800b668:	d10d      	bne.n	800b686 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d14d      	bne.n	800b70e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	689b      	ldr	r3, [r3, #8]
 800b676:	4618      	mov	r0, r3
 800b678:	f001 f85e 	bl	800c738 <xTaskPriorityDisinherit>
 800b67c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	2200      	movs	r2, #0
 800b682:	609a      	str	r2, [r3, #8]
 800b684:	e043      	b.n	800b70e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d119      	bne.n	800b6c0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	6858      	ldr	r0, [r3, #4]
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b694:	461a      	mov	r2, r3
 800b696:	68b9      	ldr	r1, [r7, #8]
 800b698:	f003 fa23 	bl	800eae2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	685a      	ldr	r2, [r3, #4]
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b6a4:	441a      	add	r2, r3
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	685a      	ldr	r2, [r3, #4]
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	689b      	ldr	r3, [r3, #8]
 800b6b2:	429a      	cmp	r2, r3
 800b6b4:	d32b      	bcc.n	800b70e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	681a      	ldr	r2, [r3, #0]
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	605a      	str	r2, [r3, #4]
 800b6be:	e026      	b.n	800b70e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	68d8      	ldr	r0, [r3, #12]
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b6c8:	461a      	mov	r2, r3
 800b6ca:	68b9      	ldr	r1, [r7, #8]
 800b6cc:	f003 fa09 	bl	800eae2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	68da      	ldr	r2, [r3, #12]
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b6d8:	425b      	negs	r3, r3
 800b6da:	441a      	add	r2, r3
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	68da      	ldr	r2, [r3, #12]
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	429a      	cmp	r2, r3
 800b6ea:	d207      	bcs.n	800b6fc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	689a      	ldr	r2, [r3, #8]
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b6f4:	425b      	negs	r3, r3
 800b6f6:	441a      	add	r2, r3
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	2b02      	cmp	r3, #2
 800b700:	d105      	bne.n	800b70e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b702:	693b      	ldr	r3, [r7, #16]
 800b704:	2b00      	cmp	r3, #0
 800b706:	d002      	beq.n	800b70e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b708:	693b      	ldr	r3, [r7, #16]
 800b70a:	3b01      	subs	r3, #1
 800b70c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b70e:	693b      	ldr	r3, [r7, #16]
 800b710:	1c5a      	adds	r2, r3, #1
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800b716:	697b      	ldr	r3, [r7, #20]
}
 800b718:	4618      	mov	r0, r3
 800b71a:	3718      	adds	r7, #24
 800b71c:	46bd      	mov	sp, r7
 800b71e:	bd80      	pop	{r7, pc}

0800b720 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b720:	b580      	push	{r7, lr}
 800b722:	b082      	sub	sp, #8
 800b724:	af00      	add	r7, sp, #0
 800b726:	6078      	str	r0, [r7, #4]
 800b728:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d018      	beq.n	800b764 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	68da      	ldr	r2, [r3, #12]
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b73a:	441a      	add	r2, r3
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	68da      	ldr	r2, [r3, #12]
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	689b      	ldr	r3, [r3, #8]
 800b748:	429a      	cmp	r2, r3
 800b74a:	d303      	bcc.n	800b754 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	681a      	ldr	r2, [r3, #0]
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	68d9      	ldr	r1, [r3, #12]
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b75c:	461a      	mov	r2, r3
 800b75e:	6838      	ldr	r0, [r7, #0]
 800b760:	f003 f9bf 	bl	800eae2 <memcpy>
	}
}
 800b764:	bf00      	nop
 800b766:	3708      	adds	r7, #8
 800b768:	46bd      	mov	sp, r7
 800b76a:	bd80      	pop	{r7, pc}

0800b76c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b76c:	b580      	push	{r7, lr}
 800b76e:	b084      	sub	sp, #16
 800b770:	af00      	add	r7, sp, #0
 800b772:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b774:	f001 fdc8 	bl	800d308 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b77e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b780:	e011      	b.n	800b7a6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b786:	2b00      	cmp	r3, #0
 800b788:	d012      	beq.n	800b7b0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	3324      	adds	r3, #36	@ 0x24
 800b78e:	4618      	mov	r0, r3
 800b790:	f000 fd86 	bl	800c2a0 <xTaskRemoveFromEventList>
 800b794:	4603      	mov	r3, r0
 800b796:	2b00      	cmp	r3, #0
 800b798:	d001      	beq.n	800b79e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b79a:	f000 fe5f 	bl	800c45c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b79e:	7bfb      	ldrb	r3, [r7, #15]
 800b7a0:	3b01      	subs	r3, #1
 800b7a2:	b2db      	uxtb	r3, r3
 800b7a4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b7a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	dce9      	bgt.n	800b782 <prvUnlockQueue+0x16>
 800b7ae:	e000      	b.n	800b7b2 <prvUnlockQueue+0x46>
					break;
 800b7b0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	22ff      	movs	r2, #255	@ 0xff
 800b7b6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800b7ba:	f001 fdd7 	bl	800d36c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b7be:	f001 fda3 	bl	800d308 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b7c8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b7ca:	e011      	b.n	800b7f0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	691b      	ldr	r3, [r3, #16]
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d012      	beq.n	800b7fa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	3310      	adds	r3, #16
 800b7d8:	4618      	mov	r0, r3
 800b7da:	f000 fd61 	bl	800c2a0 <xTaskRemoveFromEventList>
 800b7de:	4603      	mov	r3, r0
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d001      	beq.n	800b7e8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b7e4:	f000 fe3a 	bl	800c45c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b7e8:	7bbb      	ldrb	r3, [r7, #14]
 800b7ea:	3b01      	subs	r3, #1
 800b7ec:	b2db      	uxtb	r3, r3
 800b7ee:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b7f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	dce9      	bgt.n	800b7cc <prvUnlockQueue+0x60>
 800b7f8:	e000      	b.n	800b7fc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b7fa:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	22ff      	movs	r2, #255	@ 0xff
 800b800:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800b804:	f001 fdb2 	bl	800d36c <vPortExitCritical>
}
 800b808:	bf00      	nop
 800b80a:	3710      	adds	r7, #16
 800b80c:	46bd      	mov	sp, r7
 800b80e:	bd80      	pop	{r7, pc}

0800b810 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b810:	b580      	push	{r7, lr}
 800b812:	b084      	sub	sp, #16
 800b814:	af00      	add	r7, sp, #0
 800b816:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b818:	f001 fd76 	bl	800d308 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b820:	2b00      	cmp	r3, #0
 800b822:	d102      	bne.n	800b82a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b824:	2301      	movs	r3, #1
 800b826:	60fb      	str	r3, [r7, #12]
 800b828:	e001      	b.n	800b82e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b82a:	2300      	movs	r3, #0
 800b82c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b82e:	f001 fd9d 	bl	800d36c <vPortExitCritical>

	return xReturn;
 800b832:	68fb      	ldr	r3, [r7, #12]
}
 800b834:	4618      	mov	r0, r3
 800b836:	3710      	adds	r7, #16
 800b838:	46bd      	mov	sp, r7
 800b83a:	bd80      	pop	{r7, pc}

0800b83c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b83c:	b580      	push	{r7, lr}
 800b83e:	b084      	sub	sp, #16
 800b840:	af00      	add	r7, sp, #0
 800b842:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b844:	f001 fd60 	bl	800d308 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b850:	429a      	cmp	r2, r3
 800b852:	d102      	bne.n	800b85a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b854:	2301      	movs	r3, #1
 800b856:	60fb      	str	r3, [r7, #12]
 800b858:	e001      	b.n	800b85e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b85a:	2300      	movs	r3, #0
 800b85c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b85e:	f001 fd85 	bl	800d36c <vPortExitCritical>

	return xReturn;
 800b862:	68fb      	ldr	r3, [r7, #12]
}
 800b864:	4618      	mov	r0, r3
 800b866:	3710      	adds	r7, #16
 800b868:	46bd      	mov	sp, r7
 800b86a:	bd80      	pop	{r7, pc}

0800b86c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b86c:	b480      	push	{r7}
 800b86e:	b085      	sub	sp, #20
 800b870:	af00      	add	r7, sp, #0
 800b872:	6078      	str	r0, [r7, #4]
 800b874:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b876:	2300      	movs	r3, #0
 800b878:	60fb      	str	r3, [r7, #12]
 800b87a:	e014      	b.n	800b8a6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b87c:	4a0f      	ldr	r2, [pc, #60]	@ (800b8bc <vQueueAddToRegistry+0x50>)
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b884:	2b00      	cmp	r3, #0
 800b886:	d10b      	bne.n	800b8a0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b888:	490c      	ldr	r1, [pc, #48]	@ (800b8bc <vQueueAddToRegistry+0x50>)
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	683a      	ldr	r2, [r7, #0]
 800b88e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b892:	4a0a      	ldr	r2, [pc, #40]	@ (800b8bc <vQueueAddToRegistry+0x50>)
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	00db      	lsls	r3, r3, #3
 800b898:	4413      	add	r3, r2
 800b89a:	687a      	ldr	r2, [r7, #4]
 800b89c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b89e:	e006      	b.n	800b8ae <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	3301      	adds	r3, #1
 800b8a4:	60fb      	str	r3, [r7, #12]
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	2b07      	cmp	r3, #7
 800b8aa:	d9e7      	bls.n	800b87c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b8ac:	bf00      	nop
 800b8ae:	bf00      	nop
 800b8b0:	3714      	adds	r7, #20
 800b8b2:	46bd      	mov	sp, r7
 800b8b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8b8:	4770      	bx	lr
 800b8ba:	bf00      	nop
 800b8bc:	200011b4 	.word	0x200011b4

0800b8c0 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800b8c0:	b480      	push	{r7}
 800b8c2:	b085      	sub	sp, #20
 800b8c4:	af00      	add	r7, sp, #0
 800b8c6:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b8c8:	2300      	movs	r3, #0
 800b8ca:	60fb      	str	r3, [r7, #12]
 800b8cc:	e016      	b.n	800b8fc <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800b8ce:	4a10      	ldr	r2, [pc, #64]	@ (800b910 <vQueueUnregisterQueue+0x50>)
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	00db      	lsls	r3, r3, #3
 800b8d4:	4413      	add	r3, r2
 800b8d6:	685b      	ldr	r3, [r3, #4]
 800b8d8:	687a      	ldr	r2, [r7, #4]
 800b8da:	429a      	cmp	r2, r3
 800b8dc:	d10b      	bne.n	800b8f6 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800b8de:	4a0c      	ldr	r2, [pc, #48]	@ (800b910 <vQueueUnregisterQueue+0x50>)
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	2100      	movs	r1, #0
 800b8e4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800b8e8:	4a09      	ldr	r2, [pc, #36]	@ (800b910 <vQueueUnregisterQueue+0x50>)
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	00db      	lsls	r3, r3, #3
 800b8ee:	4413      	add	r3, r2
 800b8f0:	2200      	movs	r2, #0
 800b8f2:	605a      	str	r2, [r3, #4]
				break;
 800b8f4:	e006      	b.n	800b904 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	3301      	adds	r3, #1
 800b8fa:	60fb      	str	r3, [r7, #12]
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	2b07      	cmp	r3, #7
 800b900:	d9e5      	bls.n	800b8ce <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800b902:	bf00      	nop
 800b904:	bf00      	nop
 800b906:	3714      	adds	r7, #20
 800b908:	46bd      	mov	sp, r7
 800b90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b90e:	4770      	bx	lr
 800b910:	200011b4 	.word	0x200011b4

0800b914 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b914:	b580      	push	{r7, lr}
 800b916:	b086      	sub	sp, #24
 800b918:	af00      	add	r7, sp, #0
 800b91a:	60f8      	str	r0, [r7, #12]
 800b91c:	60b9      	str	r1, [r7, #8]
 800b91e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b924:	f001 fcf0 	bl	800d308 <vPortEnterCritical>
 800b928:	697b      	ldr	r3, [r7, #20]
 800b92a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b92e:	b25b      	sxtb	r3, r3
 800b930:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b934:	d103      	bne.n	800b93e <vQueueWaitForMessageRestricted+0x2a>
 800b936:	697b      	ldr	r3, [r7, #20]
 800b938:	2200      	movs	r2, #0
 800b93a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b93e:	697b      	ldr	r3, [r7, #20]
 800b940:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b944:	b25b      	sxtb	r3, r3
 800b946:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b94a:	d103      	bne.n	800b954 <vQueueWaitForMessageRestricted+0x40>
 800b94c:	697b      	ldr	r3, [r7, #20]
 800b94e:	2200      	movs	r2, #0
 800b950:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b954:	f001 fd0a 	bl	800d36c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b958:	697b      	ldr	r3, [r7, #20]
 800b95a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d106      	bne.n	800b96e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b960:	697b      	ldr	r3, [r7, #20]
 800b962:	3324      	adds	r3, #36	@ 0x24
 800b964:	687a      	ldr	r2, [r7, #4]
 800b966:	68b9      	ldr	r1, [r7, #8]
 800b968:	4618      	mov	r0, r3
 800b96a:	f000 fc6d 	bl	800c248 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b96e:	6978      	ldr	r0, [r7, #20]
 800b970:	f7ff fefc 	bl	800b76c <prvUnlockQueue>
	}
 800b974:	bf00      	nop
 800b976:	3718      	adds	r7, #24
 800b978:	46bd      	mov	sp, r7
 800b97a:	bd80      	pop	{r7, pc}

0800b97c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b97c:	b580      	push	{r7, lr}
 800b97e:	b08e      	sub	sp, #56	@ 0x38
 800b980:	af04      	add	r7, sp, #16
 800b982:	60f8      	str	r0, [r7, #12]
 800b984:	60b9      	str	r1, [r7, #8]
 800b986:	607a      	str	r2, [r7, #4]
 800b988:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b98a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d10b      	bne.n	800b9a8 <xTaskCreateStatic+0x2c>
	__asm volatile
 800b990:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b994:	f383 8811 	msr	BASEPRI, r3
 800b998:	f3bf 8f6f 	isb	sy
 800b99c:	f3bf 8f4f 	dsb	sy
 800b9a0:	623b      	str	r3, [r7, #32]
}
 800b9a2:	bf00      	nop
 800b9a4:	bf00      	nop
 800b9a6:	e7fd      	b.n	800b9a4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b9a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d10b      	bne.n	800b9c6 <xTaskCreateStatic+0x4a>
	__asm volatile
 800b9ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b9b2:	f383 8811 	msr	BASEPRI, r3
 800b9b6:	f3bf 8f6f 	isb	sy
 800b9ba:	f3bf 8f4f 	dsb	sy
 800b9be:	61fb      	str	r3, [r7, #28]
}
 800b9c0:	bf00      	nop
 800b9c2:	bf00      	nop
 800b9c4:	e7fd      	b.n	800b9c2 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b9c6:	23a8      	movs	r3, #168	@ 0xa8
 800b9c8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b9ca:	693b      	ldr	r3, [r7, #16]
 800b9cc:	2ba8      	cmp	r3, #168	@ 0xa8
 800b9ce:	d00b      	beq.n	800b9e8 <xTaskCreateStatic+0x6c>
	__asm volatile
 800b9d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b9d4:	f383 8811 	msr	BASEPRI, r3
 800b9d8:	f3bf 8f6f 	isb	sy
 800b9dc:	f3bf 8f4f 	dsb	sy
 800b9e0:	61bb      	str	r3, [r7, #24]
}
 800b9e2:	bf00      	nop
 800b9e4:	bf00      	nop
 800b9e6:	e7fd      	b.n	800b9e4 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b9e8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b9ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d01e      	beq.n	800ba2e <xTaskCreateStatic+0xb2>
 800b9f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d01b      	beq.n	800ba2e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b9f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9f8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b9fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9fc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b9fe:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ba00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba02:	2202      	movs	r2, #2
 800ba04:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ba08:	2300      	movs	r3, #0
 800ba0a:	9303      	str	r3, [sp, #12]
 800ba0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba0e:	9302      	str	r3, [sp, #8]
 800ba10:	f107 0314 	add.w	r3, r7, #20
 800ba14:	9301      	str	r3, [sp, #4]
 800ba16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba18:	9300      	str	r3, [sp, #0]
 800ba1a:	683b      	ldr	r3, [r7, #0]
 800ba1c:	687a      	ldr	r2, [r7, #4]
 800ba1e:	68b9      	ldr	r1, [r7, #8]
 800ba20:	68f8      	ldr	r0, [r7, #12]
 800ba22:	f000 f851 	bl	800bac8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ba26:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ba28:	f000 f8f6 	bl	800bc18 <prvAddNewTaskToReadyList>
 800ba2c:	e001      	b.n	800ba32 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800ba2e:	2300      	movs	r3, #0
 800ba30:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ba32:	697b      	ldr	r3, [r7, #20]
	}
 800ba34:	4618      	mov	r0, r3
 800ba36:	3728      	adds	r7, #40	@ 0x28
 800ba38:	46bd      	mov	sp, r7
 800ba3a:	bd80      	pop	{r7, pc}

0800ba3c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800ba3c:	b580      	push	{r7, lr}
 800ba3e:	b08c      	sub	sp, #48	@ 0x30
 800ba40:	af04      	add	r7, sp, #16
 800ba42:	60f8      	str	r0, [r7, #12]
 800ba44:	60b9      	str	r1, [r7, #8]
 800ba46:	603b      	str	r3, [r7, #0]
 800ba48:	4613      	mov	r3, r2
 800ba4a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ba4c:	88fb      	ldrh	r3, [r7, #6]
 800ba4e:	009b      	lsls	r3, r3, #2
 800ba50:	4618      	mov	r0, r3
 800ba52:	f001 fd7b 	bl	800d54c <pvPortMalloc>
 800ba56:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ba58:	697b      	ldr	r3, [r7, #20]
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d00e      	beq.n	800ba7c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800ba5e:	20a8      	movs	r0, #168	@ 0xa8
 800ba60:	f001 fd74 	bl	800d54c <pvPortMalloc>
 800ba64:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ba66:	69fb      	ldr	r3, [r7, #28]
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d003      	beq.n	800ba74 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ba6c:	69fb      	ldr	r3, [r7, #28]
 800ba6e:	697a      	ldr	r2, [r7, #20]
 800ba70:	631a      	str	r2, [r3, #48]	@ 0x30
 800ba72:	e005      	b.n	800ba80 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800ba74:	6978      	ldr	r0, [r7, #20]
 800ba76:	f001 fe37 	bl	800d6e8 <vPortFree>
 800ba7a:	e001      	b.n	800ba80 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800ba7c:	2300      	movs	r3, #0
 800ba7e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800ba80:	69fb      	ldr	r3, [r7, #28]
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d017      	beq.n	800bab6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ba86:	69fb      	ldr	r3, [r7, #28]
 800ba88:	2200      	movs	r2, #0
 800ba8a:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ba8e:	88fa      	ldrh	r2, [r7, #6]
 800ba90:	2300      	movs	r3, #0
 800ba92:	9303      	str	r3, [sp, #12]
 800ba94:	69fb      	ldr	r3, [r7, #28]
 800ba96:	9302      	str	r3, [sp, #8]
 800ba98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba9a:	9301      	str	r3, [sp, #4]
 800ba9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba9e:	9300      	str	r3, [sp, #0]
 800baa0:	683b      	ldr	r3, [r7, #0]
 800baa2:	68b9      	ldr	r1, [r7, #8]
 800baa4:	68f8      	ldr	r0, [r7, #12]
 800baa6:	f000 f80f 	bl	800bac8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800baaa:	69f8      	ldr	r0, [r7, #28]
 800baac:	f000 f8b4 	bl	800bc18 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800bab0:	2301      	movs	r3, #1
 800bab2:	61bb      	str	r3, [r7, #24]
 800bab4:	e002      	b.n	800babc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800bab6:	f04f 33ff 	mov.w	r3, #4294967295
 800baba:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800babc:	69bb      	ldr	r3, [r7, #24]
	}
 800babe:	4618      	mov	r0, r3
 800bac0:	3720      	adds	r7, #32
 800bac2:	46bd      	mov	sp, r7
 800bac4:	bd80      	pop	{r7, pc}
	...

0800bac8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800bac8:	b580      	push	{r7, lr}
 800baca:	b088      	sub	sp, #32
 800bacc:	af00      	add	r7, sp, #0
 800bace:	60f8      	str	r0, [r7, #12]
 800bad0:	60b9      	str	r1, [r7, #8]
 800bad2:	607a      	str	r2, [r7, #4]
 800bad4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800bad6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bad8:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	009b      	lsls	r3, r3, #2
 800bade:	461a      	mov	r2, r3
 800bae0:	21a5      	movs	r1, #165	@ 0xa5
 800bae2:	f002 feff 	bl	800e8e4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800bae6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bae8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800baf0:	3b01      	subs	r3, #1
 800baf2:	009b      	lsls	r3, r3, #2
 800baf4:	4413      	add	r3, r2
 800baf6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800baf8:	69bb      	ldr	r3, [r7, #24]
 800bafa:	f023 0307 	bic.w	r3, r3, #7
 800bafe:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800bb00:	69bb      	ldr	r3, [r7, #24]
 800bb02:	f003 0307 	and.w	r3, r3, #7
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d00b      	beq.n	800bb22 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800bb0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb0e:	f383 8811 	msr	BASEPRI, r3
 800bb12:	f3bf 8f6f 	isb	sy
 800bb16:	f3bf 8f4f 	dsb	sy
 800bb1a:	617b      	str	r3, [r7, #20]
}
 800bb1c:	bf00      	nop
 800bb1e:	bf00      	nop
 800bb20:	e7fd      	b.n	800bb1e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800bb22:	68bb      	ldr	r3, [r7, #8]
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d01f      	beq.n	800bb68 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bb28:	2300      	movs	r3, #0
 800bb2a:	61fb      	str	r3, [r7, #28]
 800bb2c:	e012      	b.n	800bb54 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800bb2e:	68ba      	ldr	r2, [r7, #8]
 800bb30:	69fb      	ldr	r3, [r7, #28]
 800bb32:	4413      	add	r3, r2
 800bb34:	7819      	ldrb	r1, [r3, #0]
 800bb36:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bb38:	69fb      	ldr	r3, [r7, #28]
 800bb3a:	4413      	add	r3, r2
 800bb3c:	3334      	adds	r3, #52	@ 0x34
 800bb3e:	460a      	mov	r2, r1
 800bb40:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800bb42:	68ba      	ldr	r2, [r7, #8]
 800bb44:	69fb      	ldr	r3, [r7, #28]
 800bb46:	4413      	add	r3, r2
 800bb48:	781b      	ldrb	r3, [r3, #0]
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d006      	beq.n	800bb5c <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bb4e:	69fb      	ldr	r3, [r7, #28]
 800bb50:	3301      	adds	r3, #1
 800bb52:	61fb      	str	r3, [r7, #28]
 800bb54:	69fb      	ldr	r3, [r7, #28]
 800bb56:	2b0f      	cmp	r3, #15
 800bb58:	d9e9      	bls.n	800bb2e <prvInitialiseNewTask+0x66>
 800bb5a:	e000      	b.n	800bb5e <prvInitialiseNewTask+0x96>
			{
				break;
 800bb5c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800bb5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb60:	2200      	movs	r2, #0
 800bb62:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800bb66:	e003      	b.n	800bb70 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800bb68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb6a:	2200      	movs	r2, #0
 800bb6c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800bb70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb72:	2b37      	cmp	r3, #55	@ 0x37
 800bb74:	d901      	bls.n	800bb7a <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800bb76:	2337      	movs	r3, #55	@ 0x37
 800bb78:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800bb7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb7c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bb7e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800bb80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb82:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bb84:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800bb86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb88:	2200      	movs	r2, #0
 800bb8a:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800bb8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb8e:	3304      	adds	r3, #4
 800bb90:	4618      	mov	r0, r3
 800bb92:	f7fe fdf5 	bl	800a780 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800bb96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb98:	3318      	adds	r3, #24
 800bb9a:	4618      	mov	r0, r3
 800bb9c:	f7fe fdf0 	bl	800a780 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800bba0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bba2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bba4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bba6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bba8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800bbac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bbae:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800bbb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bbb2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bbb4:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800bbb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bbb8:	2200      	movs	r2, #0
 800bbba:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800bbbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bbc0:	2200      	movs	r2, #0
 800bbc2:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800bbc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bbc8:	3354      	adds	r3, #84	@ 0x54
 800bbca:	224c      	movs	r2, #76	@ 0x4c
 800bbcc:	2100      	movs	r1, #0
 800bbce:	4618      	mov	r0, r3
 800bbd0:	f002 fe88 	bl	800e8e4 <memset>
 800bbd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bbd6:	4a0d      	ldr	r2, [pc, #52]	@ (800bc0c <prvInitialiseNewTask+0x144>)
 800bbd8:	659a      	str	r2, [r3, #88]	@ 0x58
 800bbda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bbdc:	4a0c      	ldr	r2, [pc, #48]	@ (800bc10 <prvInitialiseNewTask+0x148>)
 800bbde:	65da      	str	r2, [r3, #92]	@ 0x5c
 800bbe0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bbe2:	4a0c      	ldr	r2, [pc, #48]	@ (800bc14 <prvInitialiseNewTask+0x14c>)
 800bbe4:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800bbe6:	683a      	ldr	r2, [r7, #0]
 800bbe8:	68f9      	ldr	r1, [r7, #12]
 800bbea:	69b8      	ldr	r0, [r7, #24]
 800bbec:	f001 fa5a 	bl	800d0a4 <pxPortInitialiseStack>
 800bbf0:	4602      	mov	r2, r0
 800bbf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bbf4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800bbf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d002      	beq.n	800bc02 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800bbfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bbfe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bc00:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bc02:	bf00      	nop
 800bc04:	3720      	adds	r7, #32
 800bc06:	46bd      	mov	sp, r7
 800bc08:	bd80      	pop	{r7, pc}
 800bc0a:	bf00      	nop
 800bc0c:	20003f58 	.word	0x20003f58
 800bc10:	20003fc0 	.word	0x20003fc0
 800bc14:	20004028 	.word	0x20004028

0800bc18 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800bc18:	b580      	push	{r7, lr}
 800bc1a:	b082      	sub	sp, #8
 800bc1c:	af00      	add	r7, sp, #0
 800bc1e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800bc20:	f001 fb72 	bl	800d308 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800bc24:	4b2d      	ldr	r3, [pc, #180]	@ (800bcdc <prvAddNewTaskToReadyList+0xc4>)
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	3301      	adds	r3, #1
 800bc2a:	4a2c      	ldr	r2, [pc, #176]	@ (800bcdc <prvAddNewTaskToReadyList+0xc4>)
 800bc2c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800bc2e:	4b2c      	ldr	r3, [pc, #176]	@ (800bce0 <prvAddNewTaskToReadyList+0xc8>)
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d109      	bne.n	800bc4a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800bc36:	4a2a      	ldr	r2, [pc, #168]	@ (800bce0 <prvAddNewTaskToReadyList+0xc8>)
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800bc3c:	4b27      	ldr	r3, [pc, #156]	@ (800bcdc <prvAddNewTaskToReadyList+0xc4>)
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	2b01      	cmp	r3, #1
 800bc42:	d110      	bne.n	800bc66 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800bc44:	f000 fc2e 	bl	800c4a4 <prvInitialiseTaskLists>
 800bc48:	e00d      	b.n	800bc66 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800bc4a:	4b26      	ldr	r3, [pc, #152]	@ (800bce4 <prvAddNewTaskToReadyList+0xcc>)
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d109      	bne.n	800bc66 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800bc52:	4b23      	ldr	r3, [pc, #140]	@ (800bce0 <prvAddNewTaskToReadyList+0xc8>)
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc5c:	429a      	cmp	r2, r3
 800bc5e:	d802      	bhi.n	800bc66 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800bc60:	4a1f      	ldr	r2, [pc, #124]	@ (800bce0 <prvAddNewTaskToReadyList+0xc8>)
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800bc66:	4b20      	ldr	r3, [pc, #128]	@ (800bce8 <prvAddNewTaskToReadyList+0xd0>)
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	3301      	adds	r3, #1
 800bc6c:	4a1e      	ldr	r2, [pc, #120]	@ (800bce8 <prvAddNewTaskToReadyList+0xd0>)
 800bc6e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800bc70:	4b1d      	ldr	r3, [pc, #116]	@ (800bce8 <prvAddNewTaskToReadyList+0xd0>)
 800bc72:	681a      	ldr	r2, [r3, #0]
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bc7c:	4b1b      	ldr	r3, [pc, #108]	@ (800bcec <prvAddNewTaskToReadyList+0xd4>)
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	429a      	cmp	r2, r3
 800bc82:	d903      	bls.n	800bc8c <prvAddNewTaskToReadyList+0x74>
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc88:	4a18      	ldr	r2, [pc, #96]	@ (800bcec <prvAddNewTaskToReadyList+0xd4>)
 800bc8a:	6013      	str	r3, [r2, #0]
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bc90:	4613      	mov	r3, r2
 800bc92:	009b      	lsls	r3, r3, #2
 800bc94:	4413      	add	r3, r2
 800bc96:	009b      	lsls	r3, r3, #2
 800bc98:	4a15      	ldr	r2, [pc, #84]	@ (800bcf0 <prvAddNewTaskToReadyList+0xd8>)
 800bc9a:	441a      	add	r2, r3
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	3304      	adds	r3, #4
 800bca0:	4619      	mov	r1, r3
 800bca2:	4610      	mov	r0, r2
 800bca4:	f7fe fd79 	bl	800a79a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800bca8:	f001 fb60 	bl	800d36c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800bcac:	4b0d      	ldr	r3, [pc, #52]	@ (800bce4 <prvAddNewTaskToReadyList+0xcc>)
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d00e      	beq.n	800bcd2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800bcb4:	4b0a      	ldr	r3, [pc, #40]	@ (800bce0 <prvAddNewTaskToReadyList+0xc8>)
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bcbe:	429a      	cmp	r2, r3
 800bcc0:	d207      	bcs.n	800bcd2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800bcc2:	4b0c      	ldr	r3, [pc, #48]	@ (800bcf4 <prvAddNewTaskToReadyList+0xdc>)
 800bcc4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bcc8:	601a      	str	r2, [r3, #0]
 800bcca:	f3bf 8f4f 	dsb	sy
 800bcce:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bcd2:	bf00      	nop
 800bcd4:	3708      	adds	r7, #8
 800bcd6:	46bd      	mov	sp, r7
 800bcd8:	bd80      	pop	{r7, pc}
 800bcda:	bf00      	nop
 800bcdc:	200016c8 	.word	0x200016c8
 800bce0:	200011f4 	.word	0x200011f4
 800bce4:	200016d4 	.word	0x200016d4
 800bce8:	200016e4 	.word	0x200016e4
 800bcec:	200016d0 	.word	0x200016d0
 800bcf0:	200011f8 	.word	0x200011f8
 800bcf4:	e000ed04 	.word	0xe000ed04

0800bcf8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800bcf8:	b580      	push	{r7, lr}
 800bcfa:	b084      	sub	sp, #16
 800bcfc:	af00      	add	r7, sp, #0
 800bcfe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800bd00:	2300      	movs	r3, #0
 800bd02:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d018      	beq.n	800bd3c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800bd0a:	4b14      	ldr	r3, [pc, #80]	@ (800bd5c <vTaskDelay+0x64>)
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d00b      	beq.n	800bd2a <vTaskDelay+0x32>
	__asm volatile
 800bd12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd16:	f383 8811 	msr	BASEPRI, r3
 800bd1a:	f3bf 8f6f 	isb	sy
 800bd1e:	f3bf 8f4f 	dsb	sy
 800bd22:	60bb      	str	r3, [r7, #8]
}
 800bd24:	bf00      	nop
 800bd26:	bf00      	nop
 800bd28:	e7fd      	b.n	800bd26 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800bd2a:	f000 f88b 	bl	800be44 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800bd2e:	2100      	movs	r1, #0
 800bd30:	6878      	ldr	r0, [r7, #4]
 800bd32:	f000 fe09 	bl	800c948 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800bd36:	f000 f893 	bl	800be60 <xTaskResumeAll>
 800bd3a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d107      	bne.n	800bd52 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800bd42:	4b07      	ldr	r3, [pc, #28]	@ (800bd60 <vTaskDelay+0x68>)
 800bd44:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bd48:	601a      	str	r2, [r3, #0]
 800bd4a:	f3bf 8f4f 	dsb	sy
 800bd4e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bd52:	bf00      	nop
 800bd54:	3710      	adds	r7, #16
 800bd56:	46bd      	mov	sp, r7
 800bd58:	bd80      	pop	{r7, pc}
 800bd5a:	bf00      	nop
 800bd5c:	200016f0 	.word	0x200016f0
 800bd60:	e000ed04 	.word	0xe000ed04

0800bd64 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800bd64:	b580      	push	{r7, lr}
 800bd66:	b08a      	sub	sp, #40	@ 0x28
 800bd68:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800bd6a:	2300      	movs	r3, #0
 800bd6c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800bd6e:	2300      	movs	r3, #0
 800bd70:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800bd72:	463a      	mov	r2, r7
 800bd74:	1d39      	adds	r1, r7, #4
 800bd76:	f107 0308 	add.w	r3, r7, #8
 800bd7a:	4618      	mov	r0, r3
 800bd7c:	f7fe fcac 	bl	800a6d8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800bd80:	6839      	ldr	r1, [r7, #0]
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	68ba      	ldr	r2, [r7, #8]
 800bd86:	9202      	str	r2, [sp, #8]
 800bd88:	9301      	str	r3, [sp, #4]
 800bd8a:	2300      	movs	r3, #0
 800bd8c:	9300      	str	r3, [sp, #0]
 800bd8e:	2300      	movs	r3, #0
 800bd90:	460a      	mov	r2, r1
 800bd92:	4924      	ldr	r1, [pc, #144]	@ (800be24 <vTaskStartScheduler+0xc0>)
 800bd94:	4824      	ldr	r0, [pc, #144]	@ (800be28 <vTaskStartScheduler+0xc4>)
 800bd96:	f7ff fdf1 	bl	800b97c <xTaskCreateStatic>
 800bd9a:	4603      	mov	r3, r0
 800bd9c:	4a23      	ldr	r2, [pc, #140]	@ (800be2c <vTaskStartScheduler+0xc8>)
 800bd9e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800bda0:	4b22      	ldr	r3, [pc, #136]	@ (800be2c <vTaskStartScheduler+0xc8>)
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d002      	beq.n	800bdae <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800bda8:	2301      	movs	r3, #1
 800bdaa:	617b      	str	r3, [r7, #20]
 800bdac:	e001      	b.n	800bdb2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800bdae:	2300      	movs	r3, #0
 800bdb0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800bdb2:	697b      	ldr	r3, [r7, #20]
 800bdb4:	2b01      	cmp	r3, #1
 800bdb6:	d102      	bne.n	800bdbe <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800bdb8:	f000 fe1a 	bl	800c9f0 <xTimerCreateTimerTask>
 800bdbc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800bdbe:	697b      	ldr	r3, [r7, #20]
 800bdc0:	2b01      	cmp	r3, #1
 800bdc2:	d11b      	bne.n	800bdfc <vTaskStartScheduler+0x98>
	__asm volatile
 800bdc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bdc8:	f383 8811 	msr	BASEPRI, r3
 800bdcc:	f3bf 8f6f 	isb	sy
 800bdd0:	f3bf 8f4f 	dsb	sy
 800bdd4:	613b      	str	r3, [r7, #16]
}
 800bdd6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800bdd8:	4b15      	ldr	r3, [pc, #84]	@ (800be30 <vTaskStartScheduler+0xcc>)
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	3354      	adds	r3, #84	@ 0x54
 800bdde:	4a15      	ldr	r2, [pc, #84]	@ (800be34 <vTaskStartScheduler+0xd0>)
 800bde0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800bde2:	4b15      	ldr	r3, [pc, #84]	@ (800be38 <vTaskStartScheduler+0xd4>)
 800bde4:	f04f 32ff 	mov.w	r2, #4294967295
 800bde8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800bdea:	4b14      	ldr	r3, [pc, #80]	@ (800be3c <vTaskStartScheduler+0xd8>)
 800bdec:	2201      	movs	r2, #1
 800bdee:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800bdf0:	4b13      	ldr	r3, [pc, #76]	@ (800be40 <vTaskStartScheduler+0xdc>)
 800bdf2:	2200      	movs	r2, #0
 800bdf4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800bdf6:	f001 f9e3 	bl	800d1c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800bdfa:	e00f      	b.n	800be1c <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800bdfc:	697b      	ldr	r3, [r7, #20]
 800bdfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be02:	d10b      	bne.n	800be1c <vTaskStartScheduler+0xb8>
	__asm volatile
 800be04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be08:	f383 8811 	msr	BASEPRI, r3
 800be0c:	f3bf 8f6f 	isb	sy
 800be10:	f3bf 8f4f 	dsb	sy
 800be14:	60fb      	str	r3, [r7, #12]
}
 800be16:	bf00      	nop
 800be18:	bf00      	nop
 800be1a:	e7fd      	b.n	800be18 <vTaskStartScheduler+0xb4>
}
 800be1c:	bf00      	nop
 800be1e:	3718      	adds	r7, #24
 800be20:	46bd      	mov	sp, r7
 800be22:	bd80      	pop	{r7, pc}
 800be24:	08010d9c 	.word	0x08010d9c
 800be28:	0800c475 	.word	0x0800c475
 800be2c:	200016ec 	.word	0x200016ec
 800be30:	200011f4 	.word	0x200011f4
 800be34:	200001a8 	.word	0x200001a8
 800be38:	200016e8 	.word	0x200016e8
 800be3c:	200016d4 	.word	0x200016d4
 800be40:	200016cc 	.word	0x200016cc

0800be44 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800be44:	b480      	push	{r7}
 800be46:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800be48:	4b04      	ldr	r3, [pc, #16]	@ (800be5c <vTaskSuspendAll+0x18>)
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	3301      	adds	r3, #1
 800be4e:	4a03      	ldr	r2, [pc, #12]	@ (800be5c <vTaskSuspendAll+0x18>)
 800be50:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800be52:	bf00      	nop
 800be54:	46bd      	mov	sp, r7
 800be56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be5a:	4770      	bx	lr
 800be5c:	200016f0 	.word	0x200016f0

0800be60 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800be60:	b580      	push	{r7, lr}
 800be62:	b084      	sub	sp, #16
 800be64:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800be66:	2300      	movs	r3, #0
 800be68:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800be6a:	2300      	movs	r3, #0
 800be6c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800be6e:	4b42      	ldr	r3, [pc, #264]	@ (800bf78 <xTaskResumeAll+0x118>)
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	2b00      	cmp	r3, #0
 800be74:	d10b      	bne.n	800be8e <xTaskResumeAll+0x2e>
	__asm volatile
 800be76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be7a:	f383 8811 	msr	BASEPRI, r3
 800be7e:	f3bf 8f6f 	isb	sy
 800be82:	f3bf 8f4f 	dsb	sy
 800be86:	603b      	str	r3, [r7, #0]
}
 800be88:	bf00      	nop
 800be8a:	bf00      	nop
 800be8c:	e7fd      	b.n	800be8a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800be8e:	f001 fa3b 	bl	800d308 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800be92:	4b39      	ldr	r3, [pc, #228]	@ (800bf78 <xTaskResumeAll+0x118>)
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	3b01      	subs	r3, #1
 800be98:	4a37      	ldr	r2, [pc, #220]	@ (800bf78 <xTaskResumeAll+0x118>)
 800be9a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800be9c:	4b36      	ldr	r3, [pc, #216]	@ (800bf78 <xTaskResumeAll+0x118>)
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d162      	bne.n	800bf6a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800bea4:	4b35      	ldr	r3, [pc, #212]	@ (800bf7c <xTaskResumeAll+0x11c>)
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d05e      	beq.n	800bf6a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800beac:	e02f      	b.n	800bf0e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800beae:	4b34      	ldr	r3, [pc, #208]	@ (800bf80 <xTaskResumeAll+0x120>)
 800beb0:	68db      	ldr	r3, [r3, #12]
 800beb2:	68db      	ldr	r3, [r3, #12]
 800beb4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	3318      	adds	r3, #24
 800beba:	4618      	mov	r0, r3
 800bebc:	f7fe fcca 	bl	800a854 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	3304      	adds	r3, #4
 800bec4:	4618      	mov	r0, r3
 800bec6:	f7fe fcc5 	bl	800a854 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bece:	4b2d      	ldr	r3, [pc, #180]	@ (800bf84 <xTaskResumeAll+0x124>)
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	429a      	cmp	r2, r3
 800bed4:	d903      	bls.n	800bede <xTaskResumeAll+0x7e>
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800beda:	4a2a      	ldr	r2, [pc, #168]	@ (800bf84 <xTaskResumeAll+0x124>)
 800bedc:	6013      	str	r3, [r2, #0]
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bee2:	4613      	mov	r3, r2
 800bee4:	009b      	lsls	r3, r3, #2
 800bee6:	4413      	add	r3, r2
 800bee8:	009b      	lsls	r3, r3, #2
 800beea:	4a27      	ldr	r2, [pc, #156]	@ (800bf88 <xTaskResumeAll+0x128>)
 800beec:	441a      	add	r2, r3
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	3304      	adds	r3, #4
 800bef2:	4619      	mov	r1, r3
 800bef4:	4610      	mov	r0, r2
 800bef6:	f7fe fc50 	bl	800a79a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800befa:	68fb      	ldr	r3, [r7, #12]
 800befc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800befe:	4b23      	ldr	r3, [pc, #140]	@ (800bf8c <xTaskResumeAll+0x12c>)
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf04:	429a      	cmp	r2, r3
 800bf06:	d302      	bcc.n	800bf0e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800bf08:	4b21      	ldr	r3, [pc, #132]	@ (800bf90 <xTaskResumeAll+0x130>)
 800bf0a:	2201      	movs	r2, #1
 800bf0c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bf0e:	4b1c      	ldr	r3, [pc, #112]	@ (800bf80 <xTaskResumeAll+0x120>)
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d1cb      	bne.n	800beae <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800bf16:	68fb      	ldr	r3, [r7, #12]
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d001      	beq.n	800bf20 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800bf1c:	f000 fb66 	bl	800c5ec <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800bf20:	4b1c      	ldr	r3, [pc, #112]	@ (800bf94 <xTaskResumeAll+0x134>)
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d010      	beq.n	800bf4e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800bf2c:	f000 f846 	bl	800bfbc <xTaskIncrementTick>
 800bf30:	4603      	mov	r3, r0
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d002      	beq.n	800bf3c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800bf36:	4b16      	ldr	r3, [pc, #88]	@ (800bf90 <xTaskResumeAll+0x130>)
 800bf38:	2201      	movs	r2, #1
 800bf3a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	3b01      	subs	r3, #1
 800bf40:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d1f1      	bne.n	800bf2c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800bf48:	4b12      	ldr	r3, [pc, #72]	@ (800bf94 <xTaskResumeAll+0x134>)
 800bf4a:	2200      	movs	r2, #0
 800bf4c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800bf4e:	4b10      	ldr	r3, [pc, #64]	@ (800bf90 <xTaskResumeAll+0x130>)
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d009      	beq.n	800bf6a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800bf56:	2301      	movs	r3, #1
 800bf58:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800bf5a:	4b0f      	ldr	r3, [pc, #60]	@ (800bf98 <xTaskResumeAll+0x138>)
 800bf5c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bf60:	601a      	str	r2, [r3, #0]
 800bf62:	f3bf 8f4f 	dsb	sy
 800bf66:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bf6a:	f001 f9ff 	bl	800d36c <vPortExitCritical>

	return xAlreadyYielded;
 800bf6e:	68bb      	ldr	r3, [r7, #8]
}
 800bf70:	4618      	mov	r0, r3
 800bf72:	3710      	adds	r7, #16
 800bf74:	46bd      	mov	sp, r7
 800bf76:	bd80      	pop	{r7, pc}
 800bf78:	200016f0 	.word	0x200016f0
 800bf7c:	200016c8 	.word	0x200016c8
 800bf80:	20001688 	.word	0x20001688
 800bf84:	200016d0 	.word	0x200016d0
 800bf88:	200011f8 	.word	0x200011f8
 800bf8c:	200011f4 	.word	0x200011f4
 800bf90:	200016dc 	.word	0x200016dc
 800bf94:	200016d8 	.word	0x200016d8
 800bf98:	e000ed04 	.word	0xe000ed04

0800bf9c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800bf9c:	b480      	push	{r7}
 800bf9e:	b083      	sub	sp, #12
 800bfa0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800bfa2:	4b05      	ldr	r3, [pc, #20]	@ (800bfb8 <xTaskGetTickCount+0x1c>)
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800bfa8:	687b      	ldr	r3, [r7, #4]
}
 800bfaa:	4618      	mov	r0, r3
 800bfac:	370c      	adds	r7, #12
 800bfae:	46bd      	mov	sp, r7
 800bfb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfb4:	4770      	bx	lr
 800bfb6:	bf00      	nop
 800bfb8:	200016cc 	.word	0x200016cc

0800bfbc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800bfbc:	b580      	push	{r7, lr}
 800bfbe:	b086      	sub	sp, #24
 800bfc0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800bfc2:	2300      	movs	r3, #0
 800bfc4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bfc6:	4b4f      	ldr	r3, [pc, #316]	@ (800c104 <xTaskIncrementTick+0x148>)
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	f040 8090 	bne.w	800c0f0 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800bfd0:	4b4d      	ldr	r3, [pc, #308]	@ (800c108 <xTaskIncrementTick+0x14c>)
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	3301      	adds	r3, #1
 800bfd6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800bfd8:	4a4b      	ldr	r2, [pc, #300]	@ (800c108 <xTaskIncrementTick+0x14c>)
 800bfda:	693b      	ldr	r3, [r7, #16]
 800bfdc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800bfde:	693b      	ldr	r3, [r7, #16]
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d121      	bne.n	800c028 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800bfe4:	4b49      	ldr	r3, [pc, #292]	@ (800c10c <xTaskIncrementTick+0x150>)
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d00b      	beq.n	800c006 <xTaskIncrementTick+0x4a>
	__asm volatile
 800bfee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bff2:	f383 8811 	msr	BASEPRI, r3
 800bff6:	f3bf 8f6f 	isb	sy
 800bffa:	f3bf 8f4f 	dsb	sy
 800bffe:	603b      	str	r3, [r7, #0]
}
 800c000:	bf00      	nop
 800c002:	bf00      	nop
 800c004:	e7fd      	b.n	800c002 <xTaskIncrementTick+0x46>
 800c006:	4b41      	ldr	r3, [pc, #260]	@ (800c10c <xTaskIncrementTick+0x150>)
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	60fb      	str	r3, [r7, #12]
 800c00c:	4b40      	ldr	r3, [pc, #256]	@ (800c110 <xTaskIncrementTick+0x154>)
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	4a3e      	ldr	r2, [pc, #248]	@ (800c10c <xTaskIncrementTick+0x150>)
 800c012:	6013      	str	r3, [r2, #0]
 800c014:	4a3e      	ldr	r2, [pc, #248]	@ (800c110 <xTaskIncrementTick+0x154>)
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	6013      	str	r3, [r2, #0]
 800c01a:	4b3e      	ldr	r3, [pc, #248]	@ (800c114 <xTaskIncrementTick+0x158>)
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	3301      	adds	r3, #1
 800c020:	4a3c      	ldr	r2, [pc, #240]	@ (800c114 <xTaskIncrementTick+0x158>)
 800c022:	6013      	str	r3, [r2, #0]
 800c024:	f000 fae2 	bl	800c5ec <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c028:	4b3b      	ldr	r3, [pc, #236]	@ (800c118 <xTaskIncrementTick+0x15c>)
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	693a      	ldr	r2, [r7, #16]
 800c02e:	429a      	cmp	r2, r3
 800c030:	d349      	bcc.n	800c0c6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c032:	4b36      	ldr	r3, [pc, #216]	@ (800c10c <xTaskIncrementTick+0x150>)
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d104      	bne.n	800c046 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c03c:	4b36      	ldr	r3, [pc, #216]	@ (800c118 <xTaskIncrementTick+0x15c>)
 800c03e:	f04f 32ff 	mov.w	r2, #4294967295
 800c042:	601a      	str	r2, [r3, #0]
					break;
 800c044:	e03f      	b.n	800c0c6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c046:	4b31      	ldr	r3, [pc, #196]	@ (800c10c <xTaskIncrementTick+0x150>)
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	68db      	ldr	r3, [r3, #12]
 800c04c:	68db      	ldr	r3, [r3, #12]
 800c04e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c050:	68bb      	ldr	r3, [r7, #8]
 800c052:	685b      	ldr	r3, [r3, #4]
 800c054:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c056:	693a      	ldr	r2, [r7, #16]
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	429a      	cmp	r2, r3
 800c05c:	d203      	bcs.n	800c066 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c05e:	4a2e      	ldr	r2, [pc, #184]	@ (800c118 <xTaskIncrementTick+0x15c>)
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c064:	e02f      	b.n	800c0c6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c066:	68bb      	ldr	r3, [r7, #8]
 800c068:	3304      	adds	r3, #4
 800c06a:	4618      	mov	r0, r3
 800c06c:	f7fe fbf2 	bl	800a854 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c070:	68bb      	ldr	r3, [r7, #8]
 800c072:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c074:	2b00      	cmp	r3, #0
 800c076:	d004      	beq.n	800c082 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c078:	68bb      	ldr	r3, [r7, #8]
 800c07a:	3318      	adds	r3, #24
 800c07c:	4618      	mov	r0, r3
 800c07e:	f7fe fbe9 	bl	800a854 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c082:	68bb      	ldr	r3, [r7, #8]
 800c084:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c086:	4b25      	ldr	r3, [pc, #148]	@ (800c11c <xTaskIncrementTick+0x160>)
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	429a      	cmp	r2, r3
 800c08c:	d903      	bls.n	800c096 <xTaskIncrementTick+0xda>
 800c08e:	68bb      	ldr	r3, [r7, #8]
 800c090:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c092:	4a22      	ldr	r2, [pc, #136]	@ (800c11c <xTaskIncrementTick+0x160>)
 800c094:	6013      	str	r3, [r2, #0]
 800c096:	68bb      	ldr	r3, [r7, #8]
 800c098:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c09a:	4613      	mov	r3, r2
 800c09c:	009b      	lsls	r3, r3, #2
 800c09e:	4413      	add	r3, r2
 800c0a0:	009b      	lsls	r3, r3, #2
 800c0a2:	4a1f      	ldr	r2, [pc, #124]	@ (800c120 <xTaskIncrementTick+0x164>)
 800c0a4:	441a      	add	r2, r3
 800c0a6:	68bb      	ldr	r3, [r7, #8]
 800c0a8:	3304      	adds	r3, #4
 800c0aa:	4619      	mov	r1, r3
 800c0ac:	4610      	mov	r0, r2
 800c0ae:	f7fe fb74 	bl	800a79a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c0b2:	68bb      	ldr	r3, [r7, #8]
 800c0b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c0b6:	4b1b      	ldr	r3, [pc, #108]	@ (800c124 <xTaskIncrementTick+0x168>)
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c0bc:	429a      	cmp	r2, r3
 800c0be:	d3b8      	bcc.n	800c032 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800c0c0:	2301      	movs	r3, #1
 800c0c2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c0c4:	e7b5      	b.n	800c032 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c0c6:	4b17      	ldr	r3, [pc, #92]	@ (800c124 <xTaskIncrementTick+0x168>)
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c0cc:	4914      	ldr	r1, [pc, #80]	@ (800c120 <xTaskIncrementTick+0x164>)
 800c0ce:	4613      	mov	r3, r2
 800c0d0:	009b      	lsls	r3, r3, #2
 800c0d2:	4413      	add	r3, r2
 800c0d4:	009b      	lsls	r3, r3, #2
 800c0d6:	440b      	add	r3, r1
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	2b01      	cmp	r3, #1
 800c0dc:	d901      	bls.n	800c0e2 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800c0de:	2301      	movs	r3, #1
 800c0e0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800c0e2:	4b11      	ldr	r3, [pc, #68]	@ (800c128 <xTaskIncrementTick+0x16c>)
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d007      	beq.n	800c0fa <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800c0ea:	2301      	movs	r3, #1
 800c0ec:	617b      	str	r3, [r7, #20]
 800c0ee:	e004      	b.n	800c0fa <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800c0f0:	4b0e      	ldr	r3, [pc, #56]	@ (800c12c <xTaskIncrementTick+0x170>)
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	3301      	adds	r3, #1
 800c0f6:	4a0d      	ldr	r2, [pc, #52]	@ (800c12c <xTaskIncrementTick+0x170>)
 800c0f8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800c0fa:	697b      	ldr	r3, [r7, #20]
}
 800c0fc:	4618      	mov	r0, r3
 800c0fe:	3718      	adds	r7, #24
 800c100:	46bd      	mov	sp, r7
 800c102:	bd80      	pop	{r7, pc}
 800c104:	200016f0 	.word	0x200016f0
 800c108:	200016cc 	.word	0x200016cc
 800c10c:	20001680 	.word	0x20001680
 800c110:	20001684 	.word	0x20001684
 800c114:	200016e0 	.word	0x200016e0
 800c118:	200016e8 	.word	0x200016e8
 800c11c:	200016d0 	.word	0x200016d0
 800c120:	200011f8 	.word	0x200011f8
 800c124:	200011f4 	.word	0x200011f4
 800c128:	200016dc 	.word	0x200016dc
 800c12c:	200016d8 	.word	0x200016d8

0800c130 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c130:	b480      	push	{r7}
 800c132:	b085      	sub	sp, #20
 800c134:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c136:	4b2b      	ldr	r3, [pc, #172]	@ (800c1e4 <vTaskSwitchContext+0xb4>)
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d003      	beq.n	800c146 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c13e:	4b2a      	ldr	r3, [pc, #168]	@ (800c1e8 <vTaskSwitchContext+0xb8>)
 800c140:	2201      	movs	r2, #1
 800c142:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c144:	e047      	b.n	800c1d6 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800c146:	4b28      	ldr	r3, [pc, #160]	@ (800c1e8 <vTaskSwitchContext+0xb8>)
 800c148:	2200      	movs	r2, #0
 800c14a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c14c:	4b27      	ldr	r3, [pc, #156]	@ (800c1ec <vTaskSwitchContext+0xbc>)
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	60fb      	str	r3, [r7, #12]
 800c152:	e011      	b.n	800c178 <vTaskSwitchContext+0x48>
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	2b00      	cmp	r3, #0
 800c158:	d10b      	bne.n	800c172 <vTaskSwitchContext+0x42>
	__asm volatile
 800c15a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c15e:	f383 8811 	msr	BASEPRI, r3
 800c162:	f3bf 8f6f 	isb	sy
 800c166:	f3bf 8f4f 	dsb	sy
 800c16a:	607b      	str	r3, [r7, #4]
}
 800c16c:	bf00      	nop
 800c16e:	bf00      	nop
 800c170:	e7fd      	b.n	800c16e <vTaskSwitchContext+0x3e>
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	3b01      	subs	r3, #1
 800c176:	60fb      	str	r3, [r7, #12]
 800c178:	491d      	ldr	r1, [pc, #116]	@ (800c1f0 <vTaskSwitchContext+0xc0>)
 800c17a:	68fa      	ldr	r2, [r7, #12]
 800c17c:	4613      	mov	r3, r2
 800c17e:	009b      	lsls	r3, r3, #2
 800c180:	4413      	add	r3, r2
 800c182:	009b      	lsls	r3, r3, #2
 800c184:	440b      	add	r3, r1
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d0e3      	beq.n	800c154 <vTaskSwitchContext+0x24>
 800c18c:	68fa      	ldr	r2, [r7, #12]
 800c18e:	4613      	mov	r3, r2
 800c190:	009b      	lsls	r3, r3, #2
 800c192:	4413      	add	r3, r2
 800c194:	009b      	lsls	r3, r3, #2
 800c196:	4a16      	ldr	r2, [pc, #88]	@ (800c1f0 <vTaskSwitchContext+0xc0>)
 800c198:	4413      	add	r3, r2
 800c19a:	60bb      	str	r3, [r7, #8]
 800c19c:	68bb      	ldr	r3, [r7, #8]
 800c19e:	685b      	ldr	r3, [r3, #4]
 800c1a0:	685a      	ldr	r2, [r3, #4]
 800c1a2:	68bb      	ldr	r3, [r7, #8]
 800c1a4:	605a      	str	r2, [r3, #4]
 800c1a6:	68bb      	ldr	r3, [r7, #8]
 800c1a8:	685a      	ldr	r2, [r3, #4]
 800c1aa:	68bb      	ldr	r3, [r7, #8]
 800c1ac:	3308      	adds	r3, #8
 800c1ae:	429a      	cmp	r2, r3
 800c1b0:	d104      	bne.n	800c1bc <vTaskSwitchContext+0x8c>
 800c1b2:	68bb      	ldr	r3, [r7, #8]
 800c1b4:	685b      	ldr	r3, [r3, #4]
 800c1b6:	685a      	ldr	r2, [r3, #4]
 800c1b8:	68bb      	ldr	r3, [r7, #8]
 800c1ba:	605a      	str	r2, [r3, #4]
 800c1bc:	68bb      	ldr	r3, [r7, #8]
 800c1be:	685b      	ldr	r3, [r3, #4]
 800c1c0:	68db      	ldr	r3, [r3, #12]
 800c1c2:	4a0c      	ldr	r2, [pc, #48]	@ (800c1f4 <vTaskSwitchContext+0xc4>)
 800c1c4:	6013      	str	r3, [r2, #0]
 800c1c6:	4a09      	ldr	r2, [pc, #36]	@ (800c1ec <vTaskSwitchContext+0xbc>)
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c1cc:	4b09      	ldr	r3, [pc, #36]	@ (800c1f4 <vTaskSwitchContext+0xc4>)
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	3354      	adds	r3, #84	@ 0x54
 800c1d2:	4a09      	ldr	r2, [pc, #36]	@ (800c1f8 <vTaskSwitchContext+0xc8>)
 800c1d4:	6013      	str	r3, [r2, #0]
}
 800c1d6:	bf00      	nop
 800c1d8:	3714      	adds	r7, #20
 800c1da:	46bd      	mov	sp, r7
 800c1dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1e0:	4770      	bx	lr
 800c1e2:	bf00      	nop
 800c1e4:	200016f0 	.word	0x200016f0
 800c1e8:	200016dc 	.word	0x200016dc
 800c1ec:	200016d0 	.word	0x200016d0
 800c1f0:	200011f8 	.word	0x200011f8
 800c1f4:	200011f4 	.word	0x200011f4
 800c1f8:	200001a8 	.word	0x200001a8

0800c1fc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c1fc:	b580      	push	{r7, lr}
 800c1fe:	b084      	sub	sp, #16
 800c200:	af00      	add	r7, sp, #0
 800c202:	6078      	str	r0, [r7, #4]
 800c204:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d10b      	bne.n	800c224 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800c20c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c210:	f383 8811 	msr	BASEPRI, r3
 800c214:	f3bf 8f6f 	isb	sy
 800c218:	f3bf 8f4f 	dsb	sy
 800c21c:	60fb      	str	r3, [r7, #12]
}
 800c21e:	bf00      	nop
 800c220:	bf00      	nop
 800c222:	e7fd      	b.n	800c220 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c224:	4b07      	ldr	r3, [pc, #28]	@ (800c244 <vTaskPlaceOnEventList+0x48>)
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	3318      	adds	r3, #24
 800c22a:	4619      	mov	r1, r3
 800c22c:	6878      	ldr	r0, [r7, #4]
 800c22e:	f7fe fad8 	bl	800a7e2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c232:	2101      	movs	r1, #1
 800c234:	6838      	ldr	r0, [r7, #0]
 800c236:	f000 fb87 	bl	800c948 <prvAddCurrentTaskToDelayedList>
}
 800c23a:	bf00      	nop
 800c23c:	3710      	adds	r7, #16
 800c23e:	46bd      	mov	sp, r7
 800c240:	bd80      	pop	{r7, pc}
 800c242:	bf00      	nop
 800c244:	200011f4 	.word	0x200011f4

0800c248 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c248:	b580      	push	{r7, lr}
 800c24a:	b086      	sub	sp, #24
 800c24c:	af00      	add	r7, sp, #0
 800c24e:	60f8      	str	r0, [r7, #12]
 800c250:	60b9      	str	r1, [r7, #8]
 800c252:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800c254:	68fb      	ldr	r3, [r7, #12]
 800c256:	2b00      	cmp	r3, #0
 800c258:	d10b      	bne.n	800c272 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800c25a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c25e:	f383 8811 	msr	BASEPRI, r3
 800c262:	f3bf 8f6f 	isb	sy
 800c266:	f3bf 8f4f 	dsb	sy
 800c26a:	617b      	str	r3, [r7, #20]
}
 800c26c:	bf00      	nop
 800c26e:	bf00      	nop
 800c270:	e7fd      	b.n	800c26e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c272:	4b0a      	ldr	r3, [pc, #40]	@ (800c29c <vTaskPlaceOnEventListRestricted+0x54>)
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	3318      	adds	r3, #24
 800c278:	4619      	mov	r1, r3
 800c27a:	68f8      	ldr	r0, [r7, #12]
 800c27c:	f7fe fa8d 	bl	800a79a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	2b00      	cmp	r3, #0
 800c284:	d002      	beq.n	800c28c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800c286:	f04f 33ff 	mov.w	r3, #4294967295
 800c28a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800c28c:	6879      	ldr	r1, [r7, #4]
 800c28e:	68b8      	ldr	r0, [r7, #8]
 800c290:	f000 fb5a 	bl	800c948 <prvAddCurrentTaskToDelayedList>
	}
 800c294:	bf00      	nop
 800c296:	3718      	adds	r7, #24
 800c298:	46bd      	mov	sp, r7
 800c29a:	bd80      	pop	{r7, pc}
 800c29c:	200011f4 	.word	0x200011f4

0800c2a0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c2a0:	b580      	push	{r7, lr}
 800c2a2:	b086      	sub	sp, #24
 800c2a4:	af00      	add	r7, sp, #0
 800c2a6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	68db      	ldr	r3, [r3, #12]
 800c2ac:	68db      	ldr	r3, [r3, #12]
 800c2ae:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c2b0:	693b      	ldr	r3, [r7, #16]
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	d10b      	bne.n	800c2ce <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800c2b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2ba:	f383 8811 	msr	BASEPRI, r3
 800c2be:	f3bf 8f6f 	isb	sy
 800c2c2:	f3bf 8f4f 	dsb	sy
 800c2c6:	60fb      	str	r3, [r7, #12]
}
 800c2c8:	bf00      	nop
 800c2ca:	bf00      	nop
 800c2cc:	e7fd      	b.n	800c2ca <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c2ce:	693b      	ldr	r3, [r7, #16]
 800c2d0:	3318      	adds	r3, #24
 800c2d2:	4618      	mov	r0, r3
 800c2d4:	f7fe fabe 	bl	800a854 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c2d8:	4b1d      	ldr	r3, [pc, #116]	@ (800c350 <xTaskRemoveFromEventList+0xb0>)
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d11d      	bne.n	800c31c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c2e0:	693b      	ldr	r3, [r7, #16]
 800c2e2:	3304      	adds	r3, #4
 800c2e4:	4618      	mov	r0, r3
 800c2e6:	f7fe fab5 	bl	800a854 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c2ea:	693b      	ldr	r3, [r7, #16]
 800c2ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c2ee:	4b19      	ldr	r3, [pc, #100]	@ (800c354 <xTaskRemoveFromEventList+0xb4>)
 800c2f0:	681b      	ldr	r3, [r3, #0]
 800c2f2:	429a      	cmp	r2, r3
 800c2f4:	d903      	bls.n	800c2fe <xTaskRemoveFromEventList+0x5e>
 800c2f6:	693b      	ldr	r3, [r7, #16]
 800c2f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c2fa:	4a16      	ldr	r2, [pc, #88]	@ (800c354 <xTaskRemoveFromEventList+0xb4>)
 800c2fc:	6013      	str	r3, [r2, #0]
 800c2fe:	693b      	ldr	r3, [r7, #16]
 800c300:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c302:	4613      	mov	r3, r2
 800c304:	009b      	lsls	r3, r3, #2
 800c306:	4413      	add	r3, r2
 800c308:	009b      	lsls	r3, r3, #2
 800c30a:	4a13      	ldr	r2, [pc, #76]	@ (800c358 <xTaskRemoveFromEventList+0xb8>)
 800c30c:	441a      	add	r2, r3
 800c30e:	693b      	ldr	r3, [r7, #16]
 800c310:	3304      	adds	r3, #4
 800c312:	4619      	mov	r1, r3
 800c314:	4610      	mov	r0, r2
 800c316:	f7fe fa40 	bl	800a79a <vListInsertEnd>
 800c31a:	e005      	b.n	800c328 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c31c:	693b      	ldr	r3, [r7, #16]
 800c31e:	3318      	adds	r3, #24
 800c320:	4619      	mov	r1, r3
 800c322:	480e      	ldr	r0, [pc, #56]	@ (800c35c <xTaskRemoveFromEventList+0xbc>)
 800c324:	f7fe fa39 	bl	800a79a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c328:	693b      	ldr	r3, [r7, #16]
 800c32a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c32c:	4b0c      	ldr	r3, [pc, #48]	@ (800c360 <xTaskRemoveFromEventList+0xc0>)
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c332:	429a      	cmp	r2, r3
 800c334:	d905      	bls.n	800c342 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c336:	2301      	movs	r3, #1
 800c338:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c33a:	4b0a      	ldr	r3, [pc, #40]	@ (800c364 <xTaskRemoveFromEventList+0xc4>)
 800c33c:	2201      	movs	r2, #1
 800c33e:	601a      	str	r2, [r3, #0]
 800c340:	e001      	b.n	800c346 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800c342:	2300      	movs	r3, #0
 800c344:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c346:	697b      	ldr	r3, [r7, #20]
}
 800c348:	4618      	mov	r0, r3
 800c34a:	3718      	adds	r7, #24
 800c34c:	46bd      	mov	sp, r7
 800c34e:	bd80      	pop	{r7, pc}
 800c350:	200016f0 	.word	0x200016f0
 800c354:	200016d0 	.word	0x200016d0
 800c358:	200011f8 	.word	0x200011f8
 800c35c:	20001688 	.word	0x20001688
 800c360:	200011f4 	.word	0x200011f4
 800c364:	200016dc 	.word	0x200016dc

0800c368 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c368:	b480      	push	{r7}
 800c36a:	b083      	sub	sp, #12
 800c36c:	af00      	add	r7, sp, #0
 800c36e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c370:	4b06      	ldr	r3, [pc, #24]	@ (800c38c <vTaskInternalSetTimeOutState+0x24>)
 800c372:	681a      	ldr	r2, [r3, #0]
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c378:	4b05      	ldr	r3, [pc, #20]	@ (800c390 <vTaskInternalSetTimeOutState+0x28>)
 800c37a:	681a      	ldr	r2, [r3, #0]
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	605a      	str	r2, [r3, #4]
}
 800c380:	bf00      	nop
 800c382:	370c      	adds	r7, #12
 800c384:	46bd      	mov	sp, r7
 800c386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c38a:	4770      	bx	lr
 800c38c:	200016e0 	.word	0x200016e0
 800c390:	200016cc 	.word	0x200016cc

0800c394 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c394:	b580      	push	{r7, lr}
 800c396:	b088      	sub	sp, #32
 800c398:	af00      	add	r7, sp, #0
 800c39a:	6078      	str	r0, [r7, #4]
 800c39c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d10b      	bne.n	800c3bc <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800c3a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3a8:	f383 8811 	msr	BASEPRI, r3
 800c3ac:	f3bf 8f6f 	isb	sy
 800c3b0:	f3bf 8f4f 	dsb	sy
 800c3b4:	613b      	str	r3, [r7, #16]
}
 800c3b6:	bf00      	nop
 800c3b8:	bf00      	nop
 800c3ba:	e7fd      	b.n	800c3b8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800c3bc:	683b      	ldr	r3, [r7, #0]
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d10b      	bne.n	800c3da <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800c3c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3c6:	f383 8811 	msr	BASEPRI, r3
 800c3ca:	f3bf 8f6f 	isb	sy
 800c3ce:	f3bf 8f4f 	dsb	sy
 800c3d2:	60fb      	str	r3, [r7, #12]
}
 800c3d4:	bf00      	nop
 800c3d6:	bf00      	nop
 800c3d8:	e7fd      	b.n	800c3d6 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800c3da:	f000 ff95 	bl	800d308 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c3de:	4b1d      	ldr	r3, [pc, #116]	@ (800c454 <xTaskCheckForTimeOut+0xc0>)
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	685b      	ldr	r3, [r3, #4]
 800c3e8:	69ba      	ldr	r2, [r7, #24]
 800c3ea:	1ad3      	subs	r3, r2, r3
 800c3ec:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c3ee:	683b      	ldr	r3, [r7, #0]
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c3f6:	d102      	bne.n	800c3fe <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c3f8:	2300      	movs	r3, #0
 800c3fa:	61fb      	str	r3, [r7, #28]
 800c3fc:	e023      	b.n	800c446 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	681a      	ldr	r2, [r3, #0]
 800c402:	4b15      	ldr	r3, [pc, #84]	@ (800c458 <xTaskCheckForTimeOut+0xc4>)
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	429a      	cmp	r2, r3
 800c408:	d007      	beq.n	800c41a <xTaskCheckForTimeOut+0x86>
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	685b      	ldr	r3, [r3, #4]
 800c40e:	69ba      	ldr	r2, [r7, #24]
 800c410:	429a      	cmp	r2, r3
 800c412:	d302      	bcc.n	800c41a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c414:	2301      	movs	r3, #1
 800c416:	61fb      	str	r3, [r7, #28]
 800c418:	e015      	b.n	800c446 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c41a:	683b      	ldr	r3, [r7, #0]
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	697a      	ldr	r2, [r7, #20]
 800c420:	429a      	cmp	r2, r3
 800c422:	d20b      	bcs.n	800c43c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c424:	683b      	ldr	r3, [r7, #0]
 800c426:	681a      	ldr	r2, [r3, #0]
 800c428:	697b      	ldr	r3, [r7, #20]
 800c42a:	1ad2      	subs	r2, r2, r3
 800c42c:	683b      	ldr	r3, [r7, #0]
 800c42e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c430:	6878      	ldr	r0, [r7, #4]
 800c432:	f7ff ff99 	bl	800c368 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c436:	2300      	movs	r3, #0
 800c438:	61fb      	str	r3, [r7, #28]
 800c43a:	e004      	b.n	800c446 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800c43c:	683b      	ldr	r3, [r7, #0]
 800c43e:	2200      	movs	r2, #0
 800c440:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c442:	2301      	movs	r3, #1
 800c444:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c446:	f000 ff91 	bl	800d36c <vPortExitCritical>

	return xReturn;
 800c44a:	69fb      	ldr	r3, [r7, #28]
}
 800c44c:	4618      	mov	r0, r3
 800c44e:	3720      	adds	r7, #32
 800c450:	46bd      	mov	sp, r7
 800c452:	bd80      	pop	{r7, pc}
 800c454:	200016cc 	.word	0x200016cc
 800c458:	200016e0 	.word	0x200016e0

0800c45c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c45c:	b480      	push	{r7}
 800c45e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c460:	4b03      	ldr	r3, [pc, #12]	@ (800c470 <vTaskMissedYield+0x14>)
 800c462:	2201      	movs	r2, #1
 800c464:	601a      	str	r2, [r3, #0]
}
 800c466:	bf00      	nop
 800c468:	46bd      	mov	sp, r7
 800c46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c46e:	4770      	bx	lr
 800c470:	200016dc 	.word	0x200016dc

0800c474 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c474:	b580      	push	{r7, lr}
 800c476:	b082      	sub	sp, #8
 800c478:	af00      	add	r7, sp, #0
 800c47a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c47c:	f000 f852 	bl	800c524 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c480:	4b06      	ldr	r3, [pc, #24]	@ (800c49c <prvIdleTask+0x28>)
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	2b01      	cmp	r3, #1
 800c486:	d9f9      	bls.n	800c47c <prvIdleTask+0x8>
			{
				taskYIELD();
 800c488:	4b05      	ldr	r3, [pc, #20]	@ (800c4a0 <prvIdleTask+0x2c>)
 800c48a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c48e:	601a      	str	r2, [r3, #0]
 800c490:	f3bf 8f4f 	dsb	sy
 800c494:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c498:	e7f0      	b.n	800c47c <prvIdleTask+0x8>
 800c49a:	bf00      	nop
 800c49c:	200011f8 	.word	0x200011f8
 800c4a0:	e000ed04 	.word	0xe000ed04

0800c4a4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c4a4:	b580      	push	{r7, lr}
 800c4a6:	b082      	sub	sp, #8
 800c4a8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c4aa:	2300      	movs	r3, #0
 800c4ac:	607b      	str	r3, [r7, #4]
 800c4ae:	e00c      	b.n	800c4ca <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c4b0:	687a      	ldr	r2, [r7, #4]
 800c4b2:	4613      	mov	r3, r2
 800c4b4:	009b      	lsls	r3, r3, #2
 800c4b6:	4413      	add	r3, r2
 800c4b8:	009b      	lsls	r3, r3, #2
 800c4ba:	4a12      	ldr	r2, [pc, #72]	@ (800c504 <prvInitialiseTaskLists+0x60>)
 800c4bc:	4413      	add	r3, r2
 800c4be:	4618      	mov	r0, r3
 800c4c0:	f7fe f93e 	bl	800a740 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	3301      	adds	r3, #1
 800c4c8:	607b      	str	r3, [r7, #4]
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	2b37      	cmp	r3, #55	@ 0x37
 800c4ce:	d9ef      	bls.n	800c4b0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c4d0:	480d      	ldr	r0, [pc, #52]	@ (800c508 <prvInitialiseTaskLists+0x64>)
 800c4d2:	f7fe f935 	bl	800a740 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c4d6:	480d      	ldr	r0, [pc, #52]	@ (800c50c <prvInitialiseTaskLists+0x68>)
 800c4d8:	f7fe f932 	bl	800a740 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c4dc:	480c      	ldr	r0, [pc, #48]	@ (800c510 <prvInitialiseTaskLists+0x6c>)
 800c4de:	f7fe f92f 	bl	800a740 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c4e2:	480c      	ldr	r0, [pc, #48]	@ (800c514 <prvInitialiseTaskLists+0x70>)
 800c4e4:	f7fe f92c 	bl	800a740 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c4e8:	480b      	ldr	r0, [pc, #44]	@ (800c518 <prvInitialiseTaskLists+0x74>)
 800c4ea:	f7fe f929 	bl	800a740 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c4ee:	4b0b      	ldr	r3, [pc, #44]	@ (800c51c <prvInitialiseTaskLists+0x78>)
 800c4f0:	4a05      	ldr	r2, [pc, #20]	@ (800c508 <prvInitialiseTaskLists+0x64>)
 800c4f2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c4f4:	4b0a      	ldr	r3, [pc, #40]	@ (800c520 <prvInitialiseTaskLists+0x7c>)
 800c4f6:	4a05      	ldr	r2, [pc, #20]	@ (800c50c <prvInitialiseTaskLists+0x68>)
 800c4f8:	601a      	str	r2, [r3, #0]
}
 800c4fa:	bf00      	nop
 800c4fc:	3708      	adds	r7, #8
 800c4fe:	46bd      	mov	sp, r7
 800c500:	bd80      	pop	{r7, pc}
 800c502:	bf00      	nop
 800c504:	200011f8 	.word	0x200011f8
 800c508:	20001658 	.word	0x20001658
 800c50c:	2000166c 	.word	0x2000166c
 800c510:	20001688 	.word	0x20001688
 800c514:	2000169c 	.word	0x2000169c
 800c518:	200016b4 	.word	0x200016b4
 800c51c:	20001680 	.word	0x20001680
 800c520:	20001684 	.word	0x20001684

0800c524 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c524:	b580      	push	{r7, lr}
 800c526:	b082      	sub	sp, #8
 800c528:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c52a:	e019      	b.n	800c560 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c52c:	f000 feec 	bl	800d308 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c530:	4b10      	ldr	r3, [pc, #64]	@ (800c574 <prvCheckTasksWaitingTermination+0x50>)
 800c532:	68db      	ldr	r3, [r3, #12]
 800c534:	68db      	ldr	r3, [r3, #12]
 800c536:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	3304      	adds	r3, #4
 800c53c:	4618      	mov	r0, r3
 800c53e:	f7fe f989 	bl	800a854 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c542:	4b0d      	ldr	r3, [pc, #52]	@ (800c578 <prvCheckTasksWaitingTermination+0x54>)
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	3b01      	subs	r3, #1
 800c548:	4a0b      	ldr	r2, [pc, #44]	@ (800c578 <prvCheckTasksWaitingTermination+0x54>)
 800c54a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c54c:	4b0b      	ldr	r3, [pc, #44]	@ (800c57c <prvCheckTasksWaitingTermination+0x58>)
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	3b01      	subs	r3, #1
 800c552:	4a0a      	ldr	r2, [pc, #40]	@ (800c57c <prvCheckTasksWaitingTermination+0x58>)
 800c554:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c556:	f000 ff09 	bl	800d36c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c55a:	6878      	ldr	r0, [r7, #4]
 800c55c:	f000 f810 	bl	800c580 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c560:	4b06      	ldr	r3, [pc, #24]	@ (800c57c <prvCheckTasksWaitingTermination+0x58>)
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	2b00      	cmp	r3, #0
 800c566:	d1e1      	bne.n	800c52c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c568:	bf00      	nop
 800c56a:	bf00      	nop
 800c56c:	3708      	adds	r7, #8
 800c56e:	46bd      	mov	sp, r7
 800c570:	bd80      	pop	{r7, pc}
 800c572:	bf00      	nop
 800c574:	2000169c 	.word	0x2000169c
 800c578:	200016c8 	.word	0x200016c8
 800c57c:	200016b0 	.word	0x200016b0

0800c580 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c580:	b580      	push	{r7, lr}
 800c582:	b084      	sub	sp, #16
 800c584:	af00      	add	r7, sp, #0
 800c586:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	3354      	adds	r3, #84	@ 0x54
 800c58c:	4618      	mov	r0, r3
 800c58e:	f002 f9e7 	bl	800e960 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d108      	bne.n	800c5ae <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c5a0:	4618      	mov	r0, r3
 800c5a2:	f001 f8a1 	bl	800d6e8 <vPortFree>
				vPortFree( pxTCB );
 800c5a6:	6878      	ldr	r0, [r7, #4]
 800c5a8:	f001 f89e 	bl	800d6e8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c5ac:	e019      	b.n	800c5e2 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800c5b4:	2b01      	cmp	r3, #1
 800c5b6:	d103      	bne.n	800c5c0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800c5b8:	6878      	ldr	r0, [r7, #4]
 800c5ba:	f001 f895 	bl	800d6e8 <vPortFree>
	}
 800c5be:	e010      	b.n	800c5e2 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800c5c6:	2b02      	cmp	r3, #2
 800c5c8:	d00b      	beq.n	800c5e2 <prvDeleteTCB+0x62>
	__asm volatile
 800c5ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c5ce:	f383 8811 	msr	BASEPRI, r3
 800c5d2:	f3bf 8f6f 	isb	sy
 800c5d6:	f3bf 8f4f 	dsb	sy
 800c5da:	60fb      	str	r3, [r7, #12]
}
 800c5dc:	bf00      	nop
 800c5de:	bf00      	nop
 800c5e0:	e7fd      	b.n	800c5de <prvDeleteTCB+0x5e>
	}
 800c5e2:	bf00      	nop
 800c5e4:	3710      	adds	r7, #16
 800c5e6:	46bd      	mov	sp, r7
 800c5e8:	bd80      	pop	{r7, pc}
	...

0800c5ec <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c5ec:	b480      	push	{r7}
 800c5ee:	b083      	sub	sp, #12
 800c5f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c5f2:	4b0c      	ldr	r3, [pc, #48]	@ (800c624 <prvResetNextTaskUnblockTime+0x38>)
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d104      	bne.n	800c606 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c5fc:	4b0a      	ldr	r3, [pc, #40]	@ (800c628 <prvResetNextTaskUnblockTime+0x3c>)
 800c5fe:	f04f 32ff 	mov.w	r2, #4294967295
 800c602:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c604:	e008      	b.n	800c618 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c606:	4b07      	ldr	r3, [pc, #28]	@ (800c624 <prvResetNextTaskUnblockTime+0x38>)
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	68db      	ldr	r3, [r3, #12]
 800c60c:	68db      	ldr	r3, [r3, #12]
 800c60e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	685b      	ldr	r3, [r3, #4]
 800c614:	4a04      	ldr	r2, [pc, #16]	@ (800c628 <prvResetNextTaskUnblockTime+0x3c>)
 800c616:	6013      	str	r3, [r2, #0]
}
 800c618:	bf00      	nop
 800c61a:	370c      	adds	r7, #12
 800c61c:	46bd      	mov	sp, r7
 800c61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c622:	4770      	bx	lr
 800c624:	20001680 	.word	0x20001680
 800c628:	200016e8 	.word	0x200016e8

0800c62c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c62c:	b480      	push	{r7}
 800c62e:	b083      	sub	sp, #12
 800c630:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c632:	4b0b      	ldr	r3, [pc, #44]	@ (800c660 <xTaskGetSchedulerState+0x34>)
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	2b00      	cmp	r3, #0
 800c638:	d102      	bne.n	800c640 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c63a:	2301      	movs	r3, #1
 800c63c:	607b      	str	r3, [r7, #4]
 800c63e:	e008      	b.n	800c652 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c640:	4b08      	ldr	r3, [pc, #32]	@ (800c664 <xTaskGetSchedulerState+0x38>)
 800c642:	681b      	ldr	r3, [r3, #0]
 800c644:	2b00      	cmp	r3, #0
 800c646:	d102      	bne.n	800c64e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c648:	2302      	movs	r3, #2
 800c64a:	607b      	str	r3, [r7, #4]
 800c64c:	e001      	b.n	800c652 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c64e:	2300      	movs	r3, #0
 800c650:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c652:	687b      	ldr	r3, [r7, #4]
	}
 800c654:	4618      	mov	r0, r3
 800c656:	370c      	adds	r7, #12
 800c658:	46bd      	mov	sp, r7
 800c65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c65e:	4770      	bx	lr
 800c660:	200016d4 	.word	0x200016d4
 800c664:	200016f0 	.word	0x200016f0

0800c668 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800c668:	b580      	push	{r7, lr}
 800c66a:	b084      	sub	sp, #16
 800c66c:	af00      	add	r7, sp, #0
 800c66e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800c674:	2300      	movs	r3, #0
 800c676:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d051      	beq.n	800c722 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800c67e:	68bb      	ldr	r3, [r7, #8]
 800c680:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c682:	4b2a      	ldr	r3, [pc, #168]	@ (800c72c <xTaskPriorityInherit+0xc4>)
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c688:	429a      	cmp	r2, r3
 800c68a:	d241      	bcs.n	800c710 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c68c:	68bb      	ldr	r3, [r7, #8]
 800c68e:	699b      	ldr	r3, [r3, #24]
 800c690:	2b00      	cmp	r3, #0
 800c692:	db06      	blt.n	800c6a2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c694:	4b25      	ldr	r3, [pc, #148]	@ (800c72c <xTaskPriorityInherit+0xc4>)
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c69a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800c69e:	68bb      	ldr	r3, [r7, #8]
 800c6a0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800c6a2:	68bb      	ldr	r3, [r7, #8]
 800c6a4:	6959      	ldr	r1, [r3, #20]
 800c6a6:	68bb      	ldr	r3, [r7, #8]
 800c6a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c6aa:	4613      	mov	r3, r2
 800c6ac:	009b      	lsls	r3, r3, #2
 800c6ae:	4413      	add	r3, r2
 800c6b0:	009b      	lsls	r3, r3, #2
 800c6b2:	4a1f      	ldr	r2, [pc, #124]	@ (800c730 <xTaskPriorityInherit+0xc8>)
 800c6b4:	4413      	add	r3, r2
 800c6b6:	4299      	cmp	r1, r3
 800c6b8:	d122      	bne.n	800c700 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c6ba:	68bb      	ldr	r3, [r7, #8]
 800c6bc:	3304      	adds	r3, #4
 800c6be:	4618      	mov	r0, r3
 800c6c0:	f7fe f8c8 	bl	800a854 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c6c4:	4b19      	ldr	r3, [pc, #100]	@ (800c72c <xTaskPriorityInherit+0xc4>)
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c6ca:	68bb      	ldr	r3, [r7, #8]
 800c6cc:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800c6ce:	68bb      	ldr	r3, [r7, #8]
 800c6d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c6d2:	4b18      	ldr	r3, [pc, #96]	@ (800c734 <xTaskPriorityInherit+0xcc>)
 800c6d4:	681b      	ldr	r3, [r3, #0]
 800c6d6:	429a      	cmp	r2, r3
 800c6d8:	d903      	bls.n	800c6e2 <xTaskPriorityInherit+0x7a>
 800c6da:	68bb      	ldr	r3, [r7, #8]
 800c6dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c6de:	4a15      	ldr	r2, [pc, #84]	@ (800c734 <xTaskPriorityInherit+0xcc>)
 800c6e0:	6013      	str	r3, [r2, #0]
 800c6e2:	68bb      	ldr	r3, [r7, #8]
 800c6e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c6e6:	4613      	mov	r3, r2
 800c6e8:	009b      	lsls	r3, r3, #2
 800c6ea:	4413      	add	r3, r2
 800c6ec:	009b      	lsls	r3, r3, #2
 800c6ee:	4a10      	ldr	r2, [pc, #64]	@ (800c730 <xTaskPriorityInherit+0xc8>)
 800c6f0:	441a      	add	r2, r3
 800c6f2:	68bb      	ldr	r3, [r7, #8]
 800c6f4:	3304      	adds	r3, #4
 800c6f6:	4619      	mov	r1, r3
 800c6f8:	4610      	mov	r0, r2
 800c6fa:	f7fe f84e 	bl	800a79a <vListInsertEnd>
 800c6fe:	e004      	b.n	800c70a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c700:	4b0a      	ldr	r3, [pc, #40]	@ (800c72c <xTaskPriorityInherit+0xc4>)
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c706:	68bb      	ldr	r3, [r7, #8]
 800c708:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800c70a:	2301      	movs	r3, #1
 800c70c:	60fb      	str	r3, [r7, #12]
 800c70e:	e008      	b.n	800c722 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800c710:	68bb      	ldr	r3, [r7, #8]
 800c712:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c714:	4b05      	ldr	r3, [pc, #20]	@ (800c72c <xTaskPriorityInherit+0xc4>)
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c71a:	429a      	cmp	r2, r3
 800c71c:	d201      	bcs.n	800c722 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800c71e:	2301      	movs	r3, #1
 800c720:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c722:	68fb      	ldr	r3, [r7, #12]
	}
 800c724:	4618      	mov	r0, r3
 800c726:	3710      	adds	r7, #16
 800c728:	46bd      	mov	sp, r7
 800c72a:	bd80      	pop	{r7, pc}
 800c72c:	200011f4 	.word	0x200011f4
 800c730:	200011f8 	.word	0x200011f8
 800c734:	200016d0 	.word	0x200016d0

0800c738 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c738:	b580      	push	{r7, lr}
 800c73a:	b086      	sub	sp, #24
 800c73c:	af00      	add	r7, sp, #0
 800c73e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c744:	2300      	movs	r3, #0
 800c746:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d058      	beq.n	800c800 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c74e:	4b2f      	ldr	r3, [pc, #188]	@ (800c80c <xTaskPriorityDisinherit+0xd4>)
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	693a      	ldr	r2, [r7, #16]
 800c754:	429a      	cmp	r2, r3
 800c756:	d00b      	beq.n	800c770 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800c758:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c75c:	f383 8811 	msr	BASEPRI, r3
 800c760:	f3bf 8f6f 	isb	sy
 800c764:	f3bf 8f4f 	dsb	sy
 800c768:	60fb      	str	r3, [r7, #12]
}
 800c76a:	bf00      	nop
 800c76c:	bf00      	nop
 800c76e:	e7fd      	b.n	800c76c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c770:	693b      	ldr	r3, [r7, #16]
 800c772:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c774:	2b00      	cmp	r3, #0
 800c776:	d10b      	bne.n	800c790 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800c778:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c77c:	f383 8811 	msr	BASEPRI, r3
 800c780:	f3bf 8f6f 	isb	sy
 800c784:	f3bf 8f4f 	dsb	sy
 800c788:	60bb      	str	r3, [r7, #8]
}
 800c78a:	bf00      	nop
 800c78c:	bf00      	nop
 800c78e:	e7fd      	b.n	800c78c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800c790:	693b      	ldr	r3, [r7, #16]
 800c792:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c794:	1e5a      	subs	r2, r3, #1
 800c796:	693b      	ldr	r3, [r7, #16]
 800c798:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c79a:	693b      	ldr	r3, [r7, #16]
 800c79c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c79e:	693b      	ldr	r3, [r7, #16]
 800c7a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c7a2:	429a      	cmp	r2, r3
 800c7a4:	d02c      	beq.n	800c800 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c7a6:	693b      	ldr	r3, [r7, #16]
 800c7a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d128      	bne.n	800c800 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c7ae:	693b      	ldr	r3, [r7, #16]
 800c7b0:	3304      	adds	r3, #4
 800c7b2:	4618      	mov	r0, r3
 800c7b4:	f7fe f84e 	bl	800a854 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c7b8:	693b      	ldr	r3, [r7, #16]
 800c7ba:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c7bc:	693b      	ldr	r3, [r7, #16]
 800c7be:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c7c0:	693b      	ldr	r3, [r7, #16]
 800c7c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c7c4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800c7c8:	693b      	ldr	r3, [r7, #16]
 800c7ca:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c7cc:	693b      	ldr	r3, [r7, #16]
 800c7ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c7d0:	4b0f      	ldr	r3, [pc, #60]	@ (800c810 <xTaskPriorityDisinherit+0xd8>)
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	429a      	cmp	r2, r3
 800c7d6:	d903      	bls.n	800c7e0 <xTaskPriorityDisinherit+0xa8>
 800c7d8:	693b      	ldr	r3, [r7, #16]
 800c7da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c7dc:	4a0c      	ldr	r2, [pc, #48]	@ (800c810 <xTaskPriorityDisinherit+0xd8>)
 800c7de:	6013      	str	r3, [r2, #0]
 800c7e0:	693b      	ldr	r3, [r7, #16]
 800c7e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c7e4:	4613      	mov	r3, r2
 800c7e6:	009b      	lsls	r3, r3, #2
 800c7e8:	4413      	add	r3, r2
 800c7ea:	009b      	lsls	r3, r3, #2
 800c7ec:	4a09      	ldr	r2, [pc, #36]	@ (800c814 <xTaskPriorityDisinherit+0xdc>)
 800c7ee:	441a      	add	r2, r3
 800c7f0:	693b      	ldr	r3, [r7, #16]
 800c7f2:	3304      	adds	r3, #4
 800c7f4:	4619      	mov	r1, r3
 800c7f6:	4610      	mov	r0, r2
 800c7f8:	f7fd ffcf 	bl	800a79a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c7fc:	2301      	movs	r3, #1
 800c7fe:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c800:	697b      	ldr	r3, [r7, #20]
	}
 800c802:	4618      	mov	r0, r3
 800c804:	3718      	adds	r7, #24
 800c806:	46bd      	mov	sp, r7
 800c808:	bd80      	pop	{r7, pc}
 800c80a:	bf00      	nop
 800c80c:	200011f4 	.word	0x200011f4
 800c810:	200016d0 	.word	0x200016d0
 800c814:	200011f8 	.word	0x200011f8

0800c818 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800c818:	b580      	push	{r7, lr}
 800c81a:	b088      	sub	sp, #32
 800c81c:	af00      	add	r7, sp, #0
 800c81e:	6078      	str	r0, [r7, #4]
 800c820:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800c826:	2301      	movs	r3, #1
 800c828:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	d06c      	beq.n	800c90a <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800c830:	69bb      	ldr	r3, [r7, #24]
 800c832:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c834:	2b00      	cmp	r3, #0
 800c836:	d10b      	bne.n	800c850 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800c838:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c83c:	f383 8811 	msr	BASEPRI, r3
 800c840:	f3bf 8f6f 	isb	sy
 800c844:	f3bf 8f4f 	dsb	sy
 800c848:	60fb      	str	r3, [r7, #12]
}
 800c84a:	bf00      	nop
 800c84c:	bf00      	nop
 800c84e:	e7fd      	b.n	800c84c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800c850:	69bb      	ldr	r3, [r7, #24]
 800c852:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c854:	683a      	ldr	r2, [r7, #0]
 800c856:	429a      	cmp	r2, r3
 800c858:	d902      	bls.n	800c860 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800c85a:	683b      	ldr	r3, [r7, #0]
 800c85c:	61fb      	str	r3, [r7, #28]
 800c85e:	e002      	b.n	800c866 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800c860:	69bb      	ldr	r3, [r7, #24]
 800c862:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c864:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800c866:	69bb      	ldr	r3, [r7, #24]
 800c868:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c86a:	69fa      	ldr	r2, [r7, #28]
 800c86c:	429a      	cmp	r2, r3
 800c86e:	d04c      	beq.n	800c90a <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800c870:	69bb      	ldr	r3, [r7, #24]
 800c872:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c874:	697a      	ldr	r2, [r7, #20]
 800c876:	429a      	cmp	r2, r3
 800c878:	d147      	bne.n	800c90a <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800c87a:	4b26      	ldr	r3, [pc, #152]	@ (800c914 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800c87c:	681b      	ldr	r3, [r3, #0]
 800c87e:	69ba      	ldr	r2, [r7, #24]
 800c880:	429a      	cmp	r2, r3
 800c882:	d10b      	bne.n	800c89c <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800c884:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c888:	f383 8811 	msr	BASEPRI, r3
 800c88c:	f3bf 8f6f 	isb	sy
 800c890:	f3bf 8f4f 	dsb	sy
 800c894:	60bb      	str	r3, [r7, #8]
}
 800c896:	bf00      	nop
 800c898:	bf00      	nop
 800c89a:	e7fd      	b.n	800c898 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800c89c:	69bb      	ldr	r3, [r7, #24]
 800c89e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c8a0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800c8a2:	69bb      	ldr	r3, [r7, #24]
 800c8a4:	69fa      	ldr	r2, [r7, #28]
 800c8a6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c8a8:	69bb      	ldr	r3, [r7, #24]
 800c8aa:	699b      	ldr	r3, [r3, #24]
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	db04      	blt.n	800c8ba <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c8b0:	69fb      	ldr	r3, [r7, #28]
 800c8b2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800c8b6:	69bb      	ldr	r3, [r7, #24]
 800c8b8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800c8ba:	69bb      	ldr	r3, [r7, #24]
 800c8bc:	6959      	ldr	r1, [r3, #20]
 800c8be:	693a      	ldr	r2, [r7, #16]
 800c8c0:	4613      	mov	r3, r2
 800c8c2:	009b      	lsls	r3, r3, #2
 800c8c4:	4413      	add	r3, r2
 800c8c6:	009b      	lsls	r3, r3, #2
 800c8c8:	4a13      	ldr	r2, [pc, #76]	@ (800c918 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800c8ca:	4413      	add	r3, r2
 800c8cc:	4299      	cmp	r1, r3
 800c8ce:	d11c      	bne.n	800c90a <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c8d0:	69bb      	ldr	r3, [r7, #24]
 800c8d2:	3304      	adds	r3, #4
 800c8d4:	4618      	mov	r0, r3
 800c8d6:	f7fd ffbd 	bl	800a854 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800c8da:	69bb      	ldr	r3, [r7, #24]
 800c8dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c8de:	4b0f      	ldr	r3, [pc, #60]	@ (800c91c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	429a      	cmp	r2, r3
 800c8e4:	d903      	bls.n	800c8ee <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800c8e6:	69bb      	ldr	r3, [r7, #24]
 800c8e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c8ea:	4a0c      	ldr	r2, [pc, #48]	@ (800c91c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800c8ec:	6013      	str	r3, [r2, #0]
 800c8ee:	69bb      	ldr	r3, [r7, #24]
 800c8f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c8f2:	4613      	mov	r3, r2
 800c8f4:	009b      	lsls	r3, r3, #2
 800c8f6:	4413      	add	r3, r2
 800c8f8:	009b      	lsls	r3, r3, #2
 800c8fa:	4a07      	ldr	r2, [pc, #28]	@ (800c918 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800c8fc:	441a      	add	r2, r3
 800c8fe:	69bb      	ldr	r3, [r7, #24]
 800c900:	3304      	adds	r3, #4
 800c902:	4619      	mov	r1, r3
 800c904:	4610      	mov	r0, r2
 800c906:	f7fd ff48 	bl	800a79a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c90a:	bf00      	nop
 800c90c:	3720      	adds	r7, #32
 800c90e:	46bd      	mov	sp, r7
 800c910:	bd80      	pop	{r7, pc}
 800c912:	bf00      	nop
 800c914:	200011f4 	.word	0x200011f4
 800c918:	200011f8 	.word	0x200011f8
 800c91c:	200016d0 	.word	0x200016d0

0800c920 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800c920:	b480      	push	{r7}
 800c922:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800c924:	4b07      	ldr	r3, [pc, #28]	@ (800c944 <pvTaskIncrementMutexHeldCount+0x24>)
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	2b00      	cmp	r3, #0
 800c92a:	d004      	beq.n	800c936 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800c92c:	4b05      	ldr	r3, [pc, #20]	@ (800c944 <pvTaskIncrementMutexHeldCount+0x24>)
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c932:	3201      	adds	r2, #1
 800c934:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800c936:	4b03      	ldr	r3, [pc, #12]	@ (800c944 <pvTaskIncrementMutexHeldCount+0x24>)
 800c938:	681b      	ldr	r3, [r3, #0]
	}
 800c93a:	4618      	mov	r0, r3
 800c93c:	46bd      	mov	sp, r7
 800c93e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c942:	4770      	bx	lr
 800c944:	200011f4 	.word	0x200011f4

0800c948 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c948:	b580      	push	{r7, lr}
 800c94a:	b084      	sub	sp, #16
 800c94c:	af00      	add	r7, sp, #0
 800c94e:	6078      	str	r0, [r7, #4]
 800c950:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c952:	4b21      	ldr	r3, [pc, #132]	@ (800c9d8 <prvAddCurrentTaskToDelayedList+0x90>)
 800c954:	681b      	ldr	r3, [r3, #0]
 800c956:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c958:	4b20      	ldr	r3, [pc, #128]	@ (800c9dc <prvAddCurrentTaskToDelayedList+0x94>)
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	3304      	adds	r3, #4
 800c95e:	4618      	mov	r0, r3
 800c960:	f7fd ff78 	bl	800a854 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c96a:	d10a      	bne.n	800c982 <prvAddCurrentTaskToDelayedList+0x3a>
 800c96c:	683b      	ldr	r3, [r7, #0]
 800c96e:	2b00      	cmp	r3, #0
 800c970:	d007      	beq.n	800c982 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c972:	4b1a      	ldr	r3, [pc, #104]	@ (800c9dc <prvAddCurrentTaskToDelayedList+0x94>)
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	3304      	adds	r3, #4
 800c978:	4619      	mov	r1, r3
 800c97a:	4819      	ldr	r0, [pc, #100]	@ (800c9e0 <prvAddCurrentTaskToDelayedList+0x98>)
 800c97c:	f7fd ff0d 	bl	800a79a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c980:	e026      	b.n	800c9d0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c982:	68fa      	ldr	r2, [r7, #12]
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	4413      	add	r3, r2
 800c988:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c98a:	4b14      	ldr	r3, [pc, #80]	@ (800c9dc <prvAddCurrentTaskToDelayedList+0x94>)
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	68ba      	ldr	r2, [r7, #8]
 800c990:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c992:	68ba      	ldr	r2, [r7, #8]
 800c994:	68fb      	ldr	r3, [r7, #12]
 800c996:	429a      	cmp	r2, r3
 800c998:	d209      	bcs.n	800c9ae <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c99a:	4b12      	ldr	r3, [pc, #72]	@ (800c9e4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800c99c:	681a      	ldr	r2, [r3, #0]
 800c99e:	4b0f      	ldr	r3, [pc, #60]	@ (800c9dc <prvAddCurrentTaskToDelayedList+0x94>)
 800c9a0:	681b      	ldr	r3, [r3, #0]
 800c9a2:	3304      	adds	r3, #4
 800c9a4:	4619      	mov	r1, r3
 800c9a6:	4610      	mov	r0, r2
 800c9a8:	f7fd ff1b 	bl	800a7e2 <vListInsert>
}
 800c9ac:	e010      	b.n	800c9d0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c9ae:	4b0e      	ldr	r3, [pc, #56]	@ (800c9e8 <prvAddCurrentTaskToDelayedList+0xa0>)
 800c9b0:	681a      	ldr	r2, [r3, #0]
 800c9b2:	4b0a      	ldr	r3, [pc, #40]	@ (800c9dc <prvAddCurrentTaskToDelayedList+0x94>)
 800c9b4:	681b      	ldr	r3, [r3, #0]
 800c9b6:	3304      	adds	r3, #4
 800c9b8:	4619      	mov	r1, r3
 800c9ba:	4610      	mov	r0, r2
 800c9bc:	f7fd ff11 	bl	800a7e2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c9c0:	4b0a      	ldr	r3, [pc, #40]	@ (800c9ec <prvAddCurrentTaskToDelayedList+0xa4>)
 800c9c2:	681b      	ldr	r3, [r3, #0]
 800c9c4:	68ba      	ldr	r2, [r7, #8]
 800c9c6:	429a      	cmp	r2, r3
 800c9c8:	d202      	bcs.n	800c9d0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800c9ca:	4a08      	ldr	r2, [pc, #32]	@ (800c9ec <prvAddCurrentTaskToDelayedList+0xa4>)
 800c9cc:	68bb      	ldr	r3, [r7, #8]
 800c9ce:	6013      	str	r3, [r2, #0]
}
 800c9d0:	bf00      	nop
 800c9d2:	3710      	adds	r7, #16
 800c9d4:	46bd      	mov	sp, r7
 800c9d6:	bd80      	pop	{r7, pc}
 800c9d8:	200016cc 	.word	0x200016cc
 800c9dc:	200011f4 	.word	0x200011f4
 800c9e0:	200016b4 	.word	0x200016b4
 800c9e4:	20001684 	.word	0x20001684
 800c9e8:	20001680 	.word	0x20001680
 800c9ec:	200016e8 	.word	0x200016e8

0800c9f0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c9f0:	b580      	push	{r7, lr}
 800c9f2:	b08a      	sub	sp, #40	@ 0x28
 800c9f4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c9f6:	2300      	movs	r3, #0
 800c9f8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c9fa:	f000 fb13 	bl	800d024 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c9fe:	4b1d      	ldr	r3, [pc, #116]	@ (800ca74 <xTimerCreateTimerTask+0x84>)
 800ca00:	681b      	ldr	r3, [r3, #0]
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d021      	beq.n	800ca4a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800ca06:	2300      	movs	r3, #0
 800ca08:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800ca0a:	2300      	movs	r3, #0
 800ca0c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800ca0e:	1d3a      	adds	r2, r7, #4
 800ca10:	f107 0108 	add.w	r1, r7, #8
 800ca14:	f107 030c 	add.w	r3, r7, #12
 800ca18:	4618      	mov	r0, r3
 800ca1a:	f7fd fe77 	bl	800a70c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800ca1e:	6879      	ldr	r1, [r7, #4]
 800ca20:	68bb      	ldr	r3, [r7, #8]
 800ca22:	68fa      	ldr	r2, [r7, #12]
 800ca24:	9202      	str	r2, [sp, #8]
 800ca26:	9301      	str	r3, [sp, #4]
 800ca28:	2302      	movs	r3, #2
 800ca2a:	9300      	str	r3, [sp, #0]
 800ca2c:	2300      	movs	r3, #0
 800ca2e:	460a      	mov	r2, r1
 800ca30:	4911      	ldr	r1, [pc, #68]	@ (800ca78 <xTimerCreateTimerTask+0x88>)
 800ca32:	4812      	ldr	r0, [pc, #72]	@ (800ca7c <xTimerCreateTimerTask+0x8c>)
 800ca34:	f7fe ffa2 	bl	800b97c <xTaskCreateStatic>
 800ca38:	4603      	mov	r3, r0
 800ca3a:	4a11      	ldr	r2, [pc, #68]	@ (800ca80 <xTimerCreateTimerTask+0x90>)
 800ca3c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800ca3e:	4b10      	ldr	r3, [pc, #64]	@ (800ca80 <xTimerCreateTimerTask+0x90>)
 800ca40:	681b      	ldr	r3, [r3, #0]
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	d001      	beq.n	800ca4a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800ca46:	2301      	movs	r3, #1
 800ca48:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800ca4a:	697b      	ldr	r3, [r7, #20]
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d10b      	bne.n	800ca68 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800ca50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca54:	f383 8811 	msr	BASEPRI, r3
 800ca58:	f3bf 8f6f 	isb	sy
 800ca5c:	f3bf 8f4f 	dsb	sy
 800ca60:	613b      	str	r3, [r7, #16]
}
 800ca62:	bf00      	nop
 800ca64:	bf00      	nop
 800ca66:	e7fd      	b.n	800ca64 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800ca68:	697b      	ldr	r3, [r7, #20]
}
 800ca6a:	4618      	mov	r0, r3
 800ca6c:	3718      	adds	r7, #24
 800ca6e:	46bd      	mov	sp, r7
 800ca70:	bd80      	pop	{r7, pc}
 800ca72:	bf00      	nop
 800ca74:	20001724 	.word	0x20001724
 800ca78:	08010da4 	.word	0x08010da4
 800ca7c:	0800cbbd 	.word	0x0800cbbd
 800ca80:	20001728 	.word	0x20001728

0800ca84 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800ca84:	b580      	push	{r7, lr}
 800ca86:	b08a      	sub	sp, #40	@ 0x28
 800ca88:	af00      	add	r7, sp, #0
 800ca8a:	60f8      	str	r0, [r7, #12]
 800ca8c:	60b9      	str	r1, [r7, #8]
 800ca8e:	607a      	str	r2, [r7, #4]
 800ca90:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800ca92:	2300      	movs	r3, #0
 800ca94:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800ca96:	68fb      	ldr	r3, [r7, #12]
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	d10b      	bne.n	800cab4 <xTimerGenericCommand+0x30>
	__asm volatile
 800ca9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800caa0:	f383 8811 	msr	BASEPRI, r3
 800caa4:	f3bf 8f6f 	isb	sy
 800caa8:	f3bf 8f4f 	dsb	sy
 800caac:	623b      	str	r3, [r7, #32]
}
 800caae:	bf00      	nop
 800cab0:	bf00      	nop
 800cab2:	e7fd      	b.n	800cab0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800cab4:	4b19      	ldr	r3, [pc, #100]	@ (800cb1c <xTimerGenericCommand+0x98>)
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	2b00      	cmp	r3, #0
 800caba:	d02a      	beq.n	800cb12 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800cabc:	68bb      	ldr	r3, [r7, #8]
 800cabe:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800cac4:	68fb      	ldr	r3, [r7, #12]
 800cac6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800cac8:	68bb      	ldr	r3, [r7, #8]
 800caca:	2b05      	cmp	r3, #5
 800cacc:	dc18      	bgt.n	800cb00 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800cace:	f7ff fdad 	bl	800c62c <xTaskGetSchedulerState>
 800cad2:	4603      	mov	r3, r0
 800cad4:	2b02      	cmp	r3, #2
 800cad6:	d109      	bne.n	800caec <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800cad8:	4b10      	ldr	r3, [pc, #64]	@ (800cb1c <xTimerGenericCommand+0x98>)
 800cada:	6818      	ldr	r0, [r3, #0]
 800cadc:	f107 0110 	add.w	r1, r7, #16
 800cae0:	2300      	movs	r3, #0
 800cae2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cae4:	f7fe f894 	bl	800ac10 <xQueueGenericSend>
 800cae8:	6278      	str	r0, [r7, #36]	@ 0x24
 800caea:	e012      	b.n	800cb12 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800caec:	4b0b      	ldr	r3, [pc, #44]	@ (800cb1c <xTimerGenericCommand+0x98>)
 800caee:	6818      	ldr	r0, [r3, #0]
 800caf0:	f107 0110 	add.w	r1, r7, #16
 800caf4:	2300      	movs	r3, #0
 800caf6:	2200      	movs	r2, #0
 800caf8:	f7fe f88a 	bl	800ac10 <xQueueGenericSend>
 800cafc:	6278      	str	r0, [r7, #36]	@ 0x24
 800cafe:	e008      	b.n	800cb12 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800cb00:	4b06      	ldr	r3, [pc, #24]	@ (800cb1c <xTimerGenericCommand+0x98>)
 800cb02:	6818      	ldr	r0, [r3, #0]
 800cb04:	f107 0110 	add.w	r1, r7, #16
 800cb08:	2300      	movs	r3, #0
 800cb0a:	683a      	ldr	r2, [r7, #0]
 800cb0c:	f7fe f982 	bl	800ae14 <xQueueGenericSendFromISR>
 800cb10:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800cb12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800cb14:	4618      	mov	r0, r3
 800cb16:	3728      	adds	r7, #40	@ 0x28
 800cb18:	46bd      	mov	sp, r7
 800cb1a:	bd80      	pop	{r7, pc}
 800cb1c:	20001724 	.word	0x20001724

0800cb20 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800cb20:	b580      	push	{r7, lr}
 800cb22:	b088      	sub	sp, #32
 800cb24:	af02      	add	r7, sp, #8
 800cb26:	6078      	str	r0, [r7, #4]
 800cb28:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cb2a:	4b23      	ldr	r3, [pc, #140]	@ (800cbb8 <prvProcessExpiredTimer+0x98>)
 800cb2c:	681b      	ldr	r3, [r3, #0]
 800cb2e:	68db      	ldr	r3, [r3, #12]
 800cb30:	68db      	ldr	r3, [r3, #12]
 800cb32:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cb34:	697b      	ldr	r3, [r7, #20]
 800cb36:	3304      	adds	r3, #4
 800cb38:	4618      	mov	r0, r3
 800cb3a:	f7fd fe8b 	bl	800a854 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cb3e:	697b      	ldr	r3, [r7, #20]
 800cb40:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cb44:	f003 0304 	and.w	r3, r3, #4
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	d023      	beq.n	800cb94 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800cb4c:	697b      	ldr	r3, [r7, #20]
 800cb4e:	699a      	ldr	r2, [r3, #24]
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	18d1      	adds	r1, r2, r3
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	683a      	ldr	r2, [r7, #0]
 800cb58:	6978      	ldr	r0, [r7, #20]
 800cb5a:	f000 f8d5 	bl	800cd08 <prvInsertTimerInActiveList>
 800cb5e:	4603      	mov	r3, r0
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	d020      	beq.n	800cba6 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800cb64:	2300      	movs	r3, #0
 800cb66:	9300      	str	r3, [sp, #0]
 800cb68:	2300      	movs	r3, #0
 800cb6a:	687a      	ldr	r2, [r7, #4]
 800cb6c:	2100      	movs	r1, #0
 800cb6e:	6978      	ldr	r0, [r7, #20]
 800cb70:	f7ff ff88 	bl	800ca84 <xTimerGenericCommand>
 800cb74:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800cb76:	693b      	ldr	r3, [r7, #16]
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d114      	bne.n	800cba6 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800cb7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb80:	f383 8811 	msr	BASEPRI, r3
 800cb84:	f3bf 8f6f 	isb	sy
 800cb88:	f3bf 8f4f 	dsb	sy
 800cb8c:	60fb      	str	r3, [r7, #12]
}
 800cb8e:	bf00      	nop
 800cb90:	bf00      	nop
 800cb92:	e7fd      	b.n	800cb90 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cb94:	697b      	ldr	r3, [r7, #20]
 800cb96:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cb9a:	f023 0301 	bic.w	r3, r3, #1
 800cb9e:	b2da      	uxtb	r2, r3
 800cba0:	697b      	ldr	r3, [r7, #20]
 800cba2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cba6:	697b      	ldr	r3, [r7, #20]
 800cba8:	6a1b      	ldr	r3, [r3, #32]
 800cbaa:	6978      	ldr	r0, [r7, #20]
 800cbac:	4798      	blx	r3
}
 800cbae:	bf00      	nop
 800cbb0:	3718      	adds	r7, #24
 800cbb2:	46bd      	mov	sp, r7
 800cbb4:	bd80      	pop	{r7, pc}
 800cbb6:	bf00      	nop
 800cbb8:	2000171c 	.word	0x2000171c

0800cbbc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800cbbc:	b580      	push	{r7, lr}
 800cbbe:	b084      	sub	sp, #16
 800cbc0:	af00      	add	r7, sp, #0
 800cbc2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800cbc4:	f107 0308 	add.w	r3, r7, #8
 800cbc8:	4618      	mov	r0, r3
 800cbca:	f000 f859 	bl	800cc80 <prvGetNextExpireTime>
 800cbce:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800cbd0:	68bb      	ldr	r3, [r7, #8]
 800cbd2:	4619      	mov	r1, r3
 800cbd4:	68f8      	ldr	r0, [r7, #12]
 800cbd6:	f000 f805 	bl	800cbe4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800cbda:	f000 f8d7 	bl	800cd8c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800cbde:	bf00      	nop
 800cbe0:	e7f0      	b.n	800cbc4 <prvTimerTask+0x8>
	...

0800cbe4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800cbe4:	b580      	push	{r7, lr}
 800cbe6:	b084      	sub	sp, #16
 800cbe8:	af00      	add	r7, sp, #0
 800cbea:	6078      	str	r0, [r7, #4]
 800cbec:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800cbee:	f7ff f929 	bl	800be44 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800cbf2:	f107 0308 	add.w	r3, r7, #8
 800cbf6:	4618      	mov	r0, r3
 800cbf8:	f000 f866 	bl	800ccc8 <prvSampleTimeNow>
 800cbfc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800cbfe:	68bb      	ldr	r3, [r7, #8]
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	d130      	bne.n	800cc66 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800cc04:	683b      	ldr	r3, [r7, #0]
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	d10a      	bne.n	800cc20 <prvProcessTimerOrBlockTask+0x3c>
 800cc0a:	687a      	ldr	r2, [r7, #4]
 800cc0c:	68fb      	ldr	r3, [r7, #12]
 800cc0e:	429a      	cmp	r2, r3
 800cc10:	d806      	bhi.n	800cc20 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800cc12:	f7ff f925 	bl	800be60 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800cc16:	68f9      	ldr	r1, [r7, #12]
 800cc18:	6878      	ldr	r0, [r7, #4]
 800cc1a:	f7ff ff81 	bl	800cb20 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800cc1e:	e024      	b.n	800cc6a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800cc20:	683b      	ldr	r3, [r7, #0]
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	d008      	beq.n	800cc38 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800cc26:	4b13      	ldr	r3, [pc, #76]	@ (800cc74 <prvProcessTimerOrBlockTask+0x90>)
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d101      	bne.n	800cc34 <prvProcessTimerOrBlockTask+0x50>
 800cc30:	2301      	movs	r3, #1
 800cc32:	e000      	b.n	800cc36 <prvProcessTimerOrBlockTask+0x52>
 800cc34:	2300      	movs	r3, #0
 800cc36:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800cc38:	4b0f      	ldr	r3, [pc, #60]	@ (800cc78 <prvProcessTimerOrBlockTask+0x94>)
 800cc3a:	6818      	ldr	r0, [r3, #0]
 800cc3c:	687a      	ldr	r2, [r7, #4]
 800cc3e:	68fb      	ldr	r3, [r7, #12]
 800cc40:	1ad3      	subs	r3, r2, r3
 800cc42:	683a      	ldr	r2, [r7, #0]
 800cc44:	4619      	mov	r1, r3
 800cc46:	f7fe fe65 	bl	800b914 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800cc4a:	f7ff f909 	bl	800be60 <xTaskResumeAll>
 800cc4e:	4603      	mov	r3, r0
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	d10a      	bne.n	800cc6a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800cc54:	4b09      	ldr	r3, [pc, #36]	@ (800cc7c <prvProcessTimerOrBlockTask+0x98>)
 800cc56:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cc5a:	601a      	str	r2, [r3, #0]
 800cc5c:	f3bf 8f4f 	dsb	sy
 800cc60:	f3bf 8f6f 	isb	sy
}
 800cc64:	e001      	b.n	800cc6a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800cc66:	f7ff f8fb 	bl	800be60 <xTaskResumeAll>
}
 800cc6a:	bf00      	nop
 800cc6c:	3710      	adds	r7, #16
 800cc6e:	46bd      	mov	sp, r7
 800cc70:	bd80      	pop	{r7, pc}
 800cc72:	bf00      	nop
 800cc74:	20001720 	.word	0x20001720
 800cc78:	20001724 	.word	0x20001724
 800cc7c:	e000ed04 	.word	0xe000ed04

0800cc80 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800cc80:	b480      	push	{r7}
 800cc82:	b085      	sub	sp, #20
 800cc84:	af00      	add	r7, sp, #0
 800cc86:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800cc88:	4b0e      	ldr	r3, [pc, #56]	@ (800ccc4 <prvGetNextExpireTime+0x44>)
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d101      	bne.n	800cc96 <prvGetNextExpireTime+0x16>
 800cc92:	2201      	movs	r2, #1
 800cc94:	e000      	b.n	800cc98 <prvGetNextExpireTime+0x18>
 800cc96:	2200      	movs	r2, #0
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	681b      	ldr	r3, [r3, #0]
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	d105      	bne.n	800ccb0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800cca4:	4b07      	ldr	r3, [pc, #28]	@ (800ccc4 <prvGetNextExpireTime+0x44>)
 800cca6:	681b      	ldr	r3, [r3, #0]
 800cca8:	68db      	ldr	r3, [r3, #12]
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	60fb      	str	r3, [r7, #12]
 800ccae:	e001      	b.n	800ccb4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800ccb0:	2300      	movs	r3, #0
 800ccb2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800ccb4:	68fb      	ldr	r3, [r7, #12]
}
 800ccb6:	4618      	mov	r0, r3
 800ccb8:	3714      	adds	r7, #20
 800ccba:	46bd      	mov	sp, r7
 800ccbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccc0:	4770      	bx	lr
 800ccc2:	bf00      	nop
 800ccc4:	2000171c 	.word	0x2000171c

0800ccc8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800ccc8:	b580      	push	{r7, lr}
 800ccca:	b084      	sub	sp, #16
 800cccc:	af00      	add	r7, sp, #0
 800ccce:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800ccd0:	f7ff f964 	bl	800bf9c <xTaskGetTickCount>
 800ccd4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800ccd6:	4b0b      	ldr	r3, [pc, #44]	@ (800cd04 <prvSampleTimeNow+0x3c>)
 800ccd8:	681b      	ldr	r3, [r3, #0]
 800ccda:	68fa      	ldr	r2, [r7, #12]
 800ccdc:	429a      	cmp	r2, r3
 800ccde:	d205      	bcs.n	800ccec <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800cce0:	f000 f93a 	bl	800cf58 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	2201      	movs	r2, #1
 800cce8:	601a      	str	r2, [r3, #0]
 800ccea:	e002      	b.n	800ccf2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	2200      	movs	r2, #0
 800ccf0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800ccf2:	4a04      	ldr	r2, [pc, #16]	@ (800cd04 <prvSampleTimeNow+0x3c>)
 800ccf4:	68fb      	ldr	r3, [r7, #12]
 800ccf6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800ccf8:	68fb      	ldr	r3, [r7, #12]
}
 800ccfa:	4618      	mov	r0, r3
 800ccfc:	3710      	adds	r7, #16
 800ccfe:	46bd      	mov	sp, r7
 800cd00:	bd80      	pop	{r7, pc}
 800cd02:	bf00      	nop
 800cd04:	2000172c 	.word	0x2000172c

0800cd08 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800cd08:	b580      	push	{r7, lr}
 800cd0a:	b086      	sub	sp, #24
 800cd0c:	af00      	add	r7, sp, #0
 800cd0e:	60f8      	str	r0, [r7, #12]
 800cd10:	60b9      	str	r1, [r7, #8]
 800cd12:	607a      	str	r2, [r7, #4]
 800cd14:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800cd16:	2300      	movs	r3, #0
 800cd18:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800cd1a:	68fb      	ldr	r3, [r7, #12]
 800cd1c:	68ba      	ldr	r2, [r7, #8]
 800cd1e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800cd20:	68fb      	ldr	r3, [r7, #12]
 800cd22:	68fa      	ldr	r2, [r7, #12]
 800cd24:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800cd26:	68ba      	ldr	r2, [r7, #8]
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	429a      	cmp	r2, r3
 800cd2c:	d812      	bhi.n	800cd54 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cd2e:	687a      	ldr	r2, [r7, #4]
 800cd30:	683b      	ldr	r3, [r7, #0]
 800cd32:	1ad2      	subs	r2, r2, r3
 800cd34:	68fb      	ldr	r3, [r7, #12]
 800cd36:	699b      	ldr	r3, [r3, #24]
 800cd38:	429a      	cmp	r2, r3
 800cd3a:	d302      	bcc.n	800cd42 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800cd3c:	2301      	movs	r3, #1
 800cd3e:	617b      	str	r3, [r7, #20]
 800cd40:	e01b      	b.n	800cd7a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800cd42:	4b10      	ldr	r3, [pc, #64]	@ (800cd84 <prvInsertTimerInActiveList+0x7c>)
 800cd44:	681a      	ldr	r2, [r3, #0]
 800cd46:	68fb      	ldr	r3, [r7, #12]
 800cd48:	3304      	adds	r3, #4
 800cd4a:	4619      	mov	r1, r3
 800cd4c:	4610      	mov	r0, r2
 800cd4e:	f7fd fd48 	bl	800a7e2 <vListInsert>
 800cd52:	e012      	b.n	800cd7a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800cd54:	687a      	ldr	r2, [r7, #4]
 800cd56:	683b      	ldr	r3, [r7, #0]
 800cd58:	429a      	cmp	r2, r3
 800cd5a:	d206      	bcs.n	800cd6a <prvInsertTimerInActiveList+0x62>
 800cd5c:	68ba      	ldr	r2, [r7, #8]
 800cd5e:	683b      	ldr	r3, [r7, #0]
 800cd60:	429a      	cmp	r2, r3
 800cd62:	d302      	bcc.n	800cd6a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800cd64:	2301      	movs	r3, #1
 800cd66:	617b      	str	r3, [r7, #20]
 800cd68:	e007      	b.n	800cd7a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800cd6a:	4b07      	ldr	r3, [pc, #28]	@ (800cd88 <prvInsertTimerInActiveList+0x80>)
 800cd6c:	681a      	ldr	r2, [r3, #0]
 800cd6e:	68fb      	ldr	r3, [r7, #12]
 800cd70:	3304      	adds	r3, #4
 800cd72:	4619      	mov	r1, r3
 800cd74:	4610      	mov	r0, r2
 800cd76:	f7fd fd34 	bl	800a7e2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800cd7a:	697b      	ldr	r3, [r7, #20]
}
 800cd7c:	4618      	mov	r0, r3
 800cd7e:	3718      	adds	r7, #24
 800cd80:	46bd      	mov	sp, r7
 800cd82:	bd80      	pop	{r7, pc}
 800cd84:	20001720 	.word	0x20001720
 800cd88:	2000171c 	.word	0x2000171c

0800cd8c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800cd8c:	b580      	push	{r7, lr}
 800cd8e:	b08e      	sub	sp, #56	@ 0x38
 800cd90:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800cd92:	e0ce      	b.n	800cf32 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	da19      	bge.n	800cdce <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800cd9a:	1d3b      	adds	r3, r7, #4
 800cd9c:	3304      	adds	r3, #4
 800cd9e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800cda0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	d10b      	bne.n	800cdbe <prvProcessReceivedCommands+0x32>
	__asm volatile
 800cda6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cdaa:	f383 8811 	msr	BASEPRI, r3
 800cdae:	f3bf 8f6f 	isb	sy
 800cdb2:	f3bf 8f4f 	dsb	sy
 800cdb6:	61fb      	str	r3, [r7, #28]
}
 800cdb8:	bf00      	nop
 800cdba:	bf00      	nop
 800cdbc:	e7fd      	b.n	800cdba <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800cdbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cdc4:	6850      	ldr	r0, [r2, #4]
 800cdc6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cdc8:	6892      	ldr	r2, [r2, #8]
 800cdca:	4611      	mov	r1, r2
 800cdcc:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	f2c0 80ae 	blt.w	800cf32 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800cdd6:	68fb      	ldr	r3, [r7, #12]
 800cdd8:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800cdda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cddc:	695b      	ldr	r3, [r3, #20]
 800cdde:	2b00      	cmp	r3, #0
 800cde0:	d004      	beq.n	800cdec <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cde2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cde4:	3304      	adds	r3, #4
 800cde6:	4618      	mov	r0, r3
 800cde8:	f7fd fd34 	bl	800a854 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800cdec:	463b      	mov	r3, r7
 800cdee:	4618      	mov	r0, r3
 800cdf0:	f7ff ff6a 	bl	800ccc8 <prvSampleTimeNow>
 800cdf4:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	2b09      	cmp	r3, #9
 800cdfa:	f200 8097 	bhi.w	800cf2c <prvProcessReceivedCommands+0x1a0>
 800cdfe:	a201      	add	r2, pc, #4	@ (adr r2, 800ce04 <prvProcessReceivedCommands+0x78>)
 800ce00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce04:	0800ce2d 	.word	0x0800ce2d
 800ce08:	0800ce2d 	.word	0x0800ce2d
 800ce0c:	0800ce2d 	.word	0x0800ce2d
 800ce10:	0800cea3 	.word	0x0800cea3
 800ce14:	0800ceb7 	.word	0x0800ceb7
 800ce18:	0800cf03 	.word	0x0800cf03
 800ce1c:	0800ce2d 	.word	0x0800ce2d
 800ce20:	0800ce2d 	.word	0x0800ce2d
 800ce24:	0800cea3 	.word	0x0800cea3
 800ce28:	0800ceb7 	.word	0x0800ceb7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ce2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce2e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ce32:	f043 0301 	orr.w	r3, r3, #1
 800ce36:	b2da      	uxtb	r2, r3
 800ce38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce3a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800ce3e:	68ba      	ldr	r2, [r7, #8]
 800ce40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce42:	699b      	ldr	r3, [r3, #24]
 800ce44:	18d1      	adds	r1, r2, r3
 800ce46:	68bb      	ldr	r3, [r7, #8]
 800ce48:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ce4a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ce4c:	f7ff ff5c 	bl	800cd08 <prvInsertTimerInActiveList>
 800ce50:	4603      	mov	r3, r0
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d06c      	beq.n	800cf30 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ce56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce58:	6a1b      	ldr	r3, [r3, #32]
 800ce5a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ce5c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ce5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce60:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ce64:	f003 0304 	and.w	r3, r3, #4
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d061      	beq.n	800cf30 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800ce6c:	68ba      	ldr	r2, [r7, #8]
 800ce6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce70:	699b      	ldr	r3, [r3, #24]
 800ce72:	441a      	add	r2, r3
 800ce74:	2300      	movs	r3, #0
 800ce76:	9300      	str	r3, [sp, #0]
 800ce78:	2300      	movs	r3, #0
 800ce7a:	2100      	movs	r1, #0
 800ce7c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ce7e:	f7ff fe01 	bl	800ca84 <xTimerGenericCommand>
 800ce82:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800ce84:	6a3b      	ldr	r3, [r7, #32]
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	d152      	bne.n	800cf30 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800ce8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce8e:	f383 8811 	msr	BASEPRI, r3
 800ce92:	f3bf 8f6f 	isb	sy
 800ce96:	f3bf 8f4f 	dsb	sy
 800ce9a:	61bb      	str	r3, [r7, #24]
}
 800ce9c:	bf00      	nop
 800ce9e:	bf00      	nop
 800cea0:	e7fd      	b.n	800ce9e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cea2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cea4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cea8:	f023 0301 	bic.w	r3, r3, #1
 800ceac:	b2da      	uxtb	r2, r3
 800ceae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ceb0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800ceb4:	e03d      	b.n	800cf32 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ceb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ceb8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cebc:	f043 0301 	orr.w	r3, r3, #1
 800cec0:	b2da      	uxtb	r2, r3
 800cec2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cec4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800cec8:	68ba      	ldr	r2, [r7, #8]
 800ceca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cecc:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800cece:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ced0:	699b      	ldr	r3, [r3, #24]
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	d10b      	bne.n	800ceee <prvProcessReceivedCommands+0x162>
	__asm volatile
 800ced6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ceda:	f383 8811 	msr	BASEPRI, r3
 800cede:	f3bf 8f6f 	isb	sy
 800cee2:	f3bf 8f4f 	dsb	sy
 800cee6:	617b      	str	r3, [r7, #20]
}
 800cee8:	bf00      	nop
 800ceea:	bf00      	nop
 800ceec:	e7fd      	b.n	800ceea <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ceee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cef0:	699a      	ldr	r2, [r3, #24]
 800cef2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cef4:	18d1      	adds	r1, r2, r3
 800cef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cef8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cefa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cefc:	f7ff ff04 	bl	800cd08 <prvInsertTimerInActiveList>
					break;
 800cf00:	e017      	b.n	800cf32 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800cf02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf04:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cf08:	f003 0302 	and.w	r3, r3, #2
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	d103      	bne.n	800cf18 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800cf10:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cf12:	f000 fbe9 	bl	800d6e8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800cf16:	e00c      	b.n	800cf32 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cf18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf1a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cf1e:	f023 0301 	bic.w	r3, r3, #1
 800cf22:	b2da      	uxtb	r2, r3
 800cf24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf26:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800cf2a:	e002      	b.n	800cf32 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800cf2c:	bf00      	nop
 800cf2e:	e000      	b.n	800cf32 <prvProcessReceivedCommands+0x1a6>
					break;
 800cf30:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800cf32:	4b08      	ldr	r3, [pc, #32]	@ (800cf54 <prvProcessReceivedCommands+0x1c8>)
 800cf34:	681b      	ldr	r3, [r3, #0]
 800cf36:	1d39      	adds	r1, r7, #4
 800cf38:	2200      	movs	r2, #0
 800cf3a:	4618      	mov	r0, r3
 800cf3c:	f7fe f898 	bl	800b070 <xQueueReceive>
 800cf40:	4603      	mov	r3, r0
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	f47f af26 	bne.w	800cd94 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800cf48:	bf00      	nop
 800cf4a:	bf00      	nop
 800cf4c:	3730      	adds	r7, #48	@ 0x30
 800cf4e:	46bd      	mov	sp, r7
 800cf50:	bd80      	pop	{r7, pc}
 800cf52:	bf00      	nop
 800cf54:	20001724 	.word	0x20001724

0800cf58 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800cf58:	b580      	push	{r7, lr}
 800cf5a:	b088      	sub	sp, #32
 800cf5c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800cf5e:	e049      	b.n	800cff4 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800cf60:	4b2e      	ldr	r3, [pc, #184]	@ (800d01c <prvSwitchTimerLists+0xc4>)
 800cf62:	681b      	ldr	r3, [r3, #0]
 800cf64:	68db      	ldr	r3, [r3, #12]
 800cf66:	681b      	ldr	r3, [r3, #0]
 800cf68:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cf6a:	4b2c      	ldr	r3, [pc, #176]	@ (800d01c <prvSwitchTimerLists+0xc4>)
 800cf6c:	681b      	ldr	r3, [r3, #0]
 800cf6e:	68db      	ldr	r3, [r3, #12]
 800cf70:	68db      	ldr	r3, [r3, #12]
 800cf72:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cf74:	68fb      	ldr	r3, [r7, #12]
 800cf76:	3304      	adds	r3, #4
 800cf78:	4618      	mov	r0, r3
 800cf7a:	f7fd fc6b 	bl	800a854 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cf7e:	68fb      	ldr	r3, [r7, #12]
 800cf80:	6a1b      	ldr	r3, [r3, #32]
 800cf82:	68f8      	ldr	r0, [r7, #12]
 800cf84:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cf86:	68fb      	ldr	r3, [r7, #12]
 800cf88:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cf8c:	f003 0304 	and.w	r3, r3, #4
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	d02f      	beq.n	800cff4 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800cf94:	68fb      	ldr	r3, [r7, #12]
 800cf96:	699b      	ldr	r3, [r3, #24]
 800cf98:	693a      	ldr	r2, [r7, #16]
 800cf9a:	4413      	add	r3, r2
 800cf9c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800cf9e:	68ba      	ldr	r2, [r7, #8]
 800cfa0:	693b      	ldr	r3, [r7, #16]
 800cfa2:	429a      	cmp	r2, r3
 800cfa4:	d90e      	bls.n	800cfc4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800cfa6:	68fb      	ldr	r3, [r7, #12]
 800cfa8:	68ba      	ldr	r2, [r7, #8]
 800cfaa:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800cfac:	68fb      	ldr	r3, [r7, #12]
 800cfae:	68fa      	ldr	r2, [r7, #12]
 800cfb0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800cfb2:	4b1a      	ldr	r3, [pc, #104]	@ (800d01c <prvSwitchTimerLists+0xc4>)
 800cfb4:	681a      	ldr	r2, [r3, #0]
 800cfb6:	68fb      	ldr	r3, [r7, #12]
 800cfb8:	3304      	adds	r3, #4
 800cfba:	4619      	mov	r1, r3
 800cfbc:	4610      	mov	r0, r2
 800cfbe:	f7fd fc10 	bl	800a7e2 <vListInsert>
 800cfc2:	e017      	b.n	800cff4 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800cfc4:	2300      	movs	r3, #0
 800cfc6:	9300      	str	r3, [sp, #0]
 800cfc8:	2300      	movs	r3, #0
 800cfca:	693a      	ldr	r2, [r7, #16]
 800cfcc:	2100      	movs	r1, #0
 800cfce:	68f8      	ldr	r0, [r7, #12]
 800cfd0:	f7ff fd58 	bl	800ca84 <xTimerGenericCommand>
 800cfd4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	d10b      	bne.n	800cff4 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800cfdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cfe0:	f383 8811 	msr	BASEPRI, r3
 800cfe4:	f3bf 8f6f 	isb	sy
 800cfe8:	f3bf 8f4f 	dsb	sy
 800cfec:	603b      	str	r3, [r7, #0]
}
 800cfee:	bf00      	nop
 800cff0:	bf00      	nop
 800cff2:	e7fd      	b.n	800cff0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800cff4:	4b09      	ldr	r3, [pc, #36]	@ (800d01c <prvSwitchTimerLists+0xc4>)
 800cff6:	681b      	ldr	r3, [r3, #0]
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	d1b0      	bne.n	800cf60 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800cffe:	4b07      	ldr	r3, [pc, #28]	@ (800d01c <prvSwitchTimerLists+0xc4>)
 800d000:	681b      	ldr	r3, [r3, #0]
 800d002:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800d004:	4b06      	ldr	r3, [pc, #24]	@ (800d020 <prvSwitchTimerLists+0xc8>)
 800d006:	681b      	ldr	r3, [r3, #0]
 800d008:	4a04      	ldr	r2, [pc, #16]	@ (800d01c <prvSwitchTimerLists+0xc4>)
 800d00a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800d00c:	4a04      	ldr	r2, [pc, #16]	@ (800d020 <prvSwitchTimerLists+0xc8>)
 800d00e:	697b      	ldr	r3, [r7, #20]
 800d010:	6013      	str	r3, [r2, #0]
}
 800d012:	bf00      	nop
 800d014:	3718      	adds	r7, #24
 800d016:	46bd      	mov	sp, r7
 800d018:	bd80      	pop	{r7, pc}
 800d01a:	bf00      	nop
 800d01c:	2000171c 	.word	0x2000171c
 800d020:	20001720 	.word	0x20001720

0800d024 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800d024:	b580      	push	{r7, lr}
 800d026:	b082      	sub	sp, #8
 800d028:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800d02a:	f000 f96d 	bl	800d308 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800d02e:	4b15      	ldr	r3, [pc, #84]	@ (800d084 <prvCheckForValidListAndQueue+0x60>)
 800d030:	681b      	ldr	r3, [r3, #0]
 800d032:	2b00      	cmp	r3, #0
 800d034:	d120      	bne.n	800d078 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800d036:	4814      	ldr	r0, [pc, #80]	@ (800d088 <prvCheckForValidListAndQueue+0x64>)
 800d038:	f7fd fb82 	bl	800a740 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800d03c:	4813      	ldr	r0, [pc, #76]	@ (800d08c <prvCheckForValidListAndQueue+0x68>)
 800d03e:	f7fd fb7f 	bl	800a740 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800d042:	4b13      	ldr	r3, [pc, #76]	@ (800d090 <prvCheckForValidListAndQueue+0x6c>)
 800d044:	4a10      	ldr	r2, [pc, #64]	@ (800d088 <prvCheckForValidListAndQueue+0x64>)
 800d046:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800d048:	4b12      	ldr	r3, [pc, #72]	@ (800d094 <prvCheckForValidListAndQueue+0x70>)
 800d04a:	4a10      	ldr	r2, [pc, #64]	@ (800d08c <prvCheckForValidListAndQueue+0x68>)
 800d04c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800d04e:	2300      	movs	r3, #0
 800d050:	9300      	str	r3, [sp, #0]
 800d052:	4b11      	ldr	r3, [pc, #68]	@ (800d098 <prvCheckForValidListAndQueue+0x74>)
 800d054:	4a11      	ldr	r2, [pc, #68]	@ (800d09c <prvCheckForValidListAndQueue+0x78>)
 800d056:	2110      	movs	r1, #16
 800d058:	200a      	movs	r0, #10
 800d05a:	f7fd fc8f 	bl	800a97c <xQueueGenericCreateStatic>
 800d05e:	4603      	mov	r3, r0
 800d060:	4a08      	ldr	r2, [pc, #32]	@ (800d084 <prvCheckForValidListAndQueue+0x60>)
 800d062:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800d064:	4b07      	ldr	r3, [pc, #28]	@ (800d084 <prvCheckForValidListAndQueue+0x60>)
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	2b00      	cmp	r3, #0
 800d06a:	d005      	beq.n	800d078 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800d06c:	4b05      	ldr	r3, [pc, #20]	@ (800d084 <prvCheckForValidListAndQueue+0x60>)
 800d06e:	681b      	ldr	r3, [r3, #0]
 800d070:	490b      	ldr	r1, [pc, #44]	@ (800d0a0 <prvCheckForValidListAndQueue+0x7c>)
 800d072:	4618      	mov	r0, r3
 800d074:	f7fe fbfa 	bl	800b86c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d078:	f000 f978 	bl	800d36c <vPortExitCritical>
}
 800d07c:	bf00      	nop
 800d07e:	46bd      	mov	sp, r7
 800d080:	bd80      	pop	{r7, pc}
 800d082:	bf00      	nop
 800d084:	20001724 	.word	0x20001724
 800d088:	200016f4 	.word	0x200016f4
 800d08c:	20001708 	.word	0x20001708
 800d090:	2000171c 	.word	0x2000171c
 800d094:	20001720 	.word	0x20001720
 800d098:	200017d0 	.word	0x200017d0
 800d09c:	20001730 	.word	0x20001730
 800d0a0:	08010dac 	.word	0x08010dac

0800d0a4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d0a4:	b480      	push	{r7}
 800d0a6:	b085      	sub	sp, #20
 800d0a8:	af00      	add	r7, sp, #0
 800d0aa:	60f8      	str	r0, [r7, #12]
 800d0ac:	60b9      	str	r1, [r7, #8]
 800d0ae:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d0b0:	68fb      	ldr	r3, [r7, #12]
 800d0b2:	3b04      	subs	r3, #4
 800d0b4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d0b6:	68fb      	ldr	r3, [r7, #12]
 800d0b8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800d0bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d0be:	68fb      	ldr	r3, [r7, #12]
 800d0c0:	3b04      	subs	r3, #4
 800d0c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d0c4:	68bb      	ldr	r3, [r7, #8]
 800d0c6:	f023 0201 	bic.w	r2, r3, #1
 800d0ca:	68fb      	ldr	r3, [r7, #12]
 800d0cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d0ce:	68fb      	ldr	r3, [r7, #12]
 800d0d0:	3b04      	subs	r3, #4
 800d0d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d0d4:	4a0c      	ldr	r2, [pc, #48]	@ (800d108 <pxPortInitialiseStack+0x64>)
 800d0d6:	68fb      	ldr	r3, [r7, #12]
 800d0d8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d0da:	68fb      	ldr	r3, [r7, #12]
 800d0dc:	3b14      	subs	r3, #20
 800d0de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d0e0:	687a      	ldr	r2, [r7, #4]
 800d0e2:	68fb      	ldr	r3, [r7, #12]
 800d0e4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d0e6:	68fb      	ldr	r3, [r7, #12]
 800d0e8:	3b04      	subs	r3, #4
 800d0ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d0ec:	68fb      	ldr	r3, [r7, #12]
 800d0ee:	f06f 0202 	mvn.w	r2, #2
 800d0f2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d0f4:	68fb      	ldr	r3, [r7, #12]
 800d0f6:	3b20      	subs	r3, #32
 800d0f8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d0fa:	68fb      	ldr	r3, [r7, #12]
}
 800d0fc:	4618      	mov	r0, r3
 800d0fe:	3714      	adds	r7, #20
 800d100:	46bd      	mov	sp, r7
 800d102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d106:	4770      	bx	lr
 800d108:	0800d10d 	.word	0x0800d10d

0800d10c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d10c:	b480      	push	{r7}
 800d10e:	b085      	sub	sp, #20
 800d110:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d112:	2300      	movs	r3, #0
 800d114:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d116:	4b13      	ldr	r3, [pc, #76]	@ (800d164 <prvTaskExitError+0x58>)
 800d118:	681b      	ldr	r3, [r3, #0]
 800d11a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d11e:	d00b      	beq.n	800d138 <prvTaskExitError+0x2c>
	__asm volatile
 800d120:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d124:	f383 8811 	msr	BASEPRI, r3
 800d128:	f3bf 8f6f 	isb	sy
 800d12c:	f3bf 8f4f 	dsb	sy
 800d130:	60fb      	str	r3, [r7, #12]
}
 800d132:	bf00      	nop
 800d134:	bf00      	nop
 800d136:	e7fd      	b.n	800d134 <prvTaskExitError+0x28>
	__asm volatile
 800d138:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d13c:	f383 8811 	msr	BASEPRI, r3
 800d140:	f3bf 8f6f 	isb	sy
 800d144:	f3bf 8f4f 	dsb	sy
 800d148:	60bb      	str	r3, [r7, #8]
}
 800d14a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d14c:	bf00      	nop
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	2b00      	cmp	r3, #0
 800d152:	d0fc      	beq.n	800d14e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d154:	bf00      	nop
 800d156:	bf00      	nop
 800d158:	3714      	adds	r7, #20
 800d15a:	46bd      	mov	sp, r7
 800d15c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d160:	4770      	bx	lr
 800d162:	bf00      	nop
 800d164:	2000002c 	.word	0x2000002c
	...

0800d170 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d170:	4b07      	ldr	r3, [pc, #28]	@ (800d190 <pxCurrentTCBConst2>)
 800d172:	6819      	ldr	r1, [r3, #0]
 800d174:	6808      	ldr	r0, [r1, #0]
 800d176:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d17a:	f380 8809 	msr	PSP, r0
 800d17e:	f3bf 8f6f 	isb	sy
 800d182:	f04f 0000 	mov.w	r0, #0
 800d186:	f380 8811 	msr	BASEPRI, r0
 800d18a:	4770      	bx	lr
 800d18c:	f3af 8000 	nop.w

0800d190 <pxCurrentTCBConst2>:
 800d190:	200011f4 	.word	0x200011f4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d194:	bf00      	nop
 800d196:	bf00      	nop

0800d198 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d198:	4808      	ldr	r0, [pc, #32]	@ (800d1bc <prvPortStartFirstTask+0x24>)
 800d19a:	6800      	ldr	r0, [r0, #0]
 800d19c:	6800      	ldr	r0, [r0, #0]
 800d19e:	f380 8808 	msr	MSP, r0
 800d1a2:	f04f 0000 	mov.w	r0, #0
 800d1a6:	f380 8814 	msr	CONTROL, r0
 800d1aa:	b662      	cpsie	i
 800d1ac:	b661      	cpsie	f
 800d1ae:	f3bf 8f4f 	dsb	sy
 800d1b2:	f3bf 8f6f 	isb	sy
 800d1b6:	df00      	svc	0
 800d1b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d1ba:	bf00      	nop
 800d1bc:	e000ed08 	.word	0xe000ed08

0800d1c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d1c0:	b580      	push	{r7, lr}
 800d1c2:	b086      	sub	sp, #24
 800d1c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800d1c6:	4b47      	ldr	r3, [pc, #284]	@ (800d2e4 <xPortStartScheduler+0x124>)
 800d1c8:	681b      	ldr	r3, [r3, #0]
 800d1ca:	4a47      	ldr	r2, [pc, #284]	@ (800d2e8 <xPortStartScheduler+0x128>)
 800d1cc:	4293      	cmp	r3, r2
 800d1ce:	d10b      	bne.n	800d1e8 <xPortStartScheduler+0x28>
	__asm volatile
 800d1d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d1d4:	f383 8811 	msr	BASEPRI, r3
 800d1d8:	f3bf 8f6f 	isb	sy
 800d1dc:	f3bf 8f4f 	dsb	sy
 800d1e0:	60fb      	str	r3, [r7, #12]
}
 800d1e2:	bf00      	nop
 800d1e4:	bf00      	nop
 800d1e6:	e7fd      	b.n	800d1e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800d1e8:	4b3e      	ldr	r3, [pc, #248]	@ (800d2e4 <xPortStartScheduler+0x124>)
 800d1ea:	681b      	ldr	r3, [r3, #0]
 800d1ec:	4a3f      	ldr	r2, [pc, #252]	@ (800d2ec <xPortStartScheduler+0x12c>)
 800d1ee:	4293      	cmp	r3, r2
 800d1f0:	d10b      	bne.n	800d20a <xPortStartScheduler+0x4a>
	__asm volatile
 800d1f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d1f6:	f383 8811 	msr	BASEPRI, r3
 800d1fa:	f3bf 8f6f 	isb	sy
 800d1fe:	f3bf 8f4f 	dsb	sy
 800d202:	613b      	str	r3, [r7, #16]
}
 800d204:	bf00      	nop
 800d206:	bf00      	nop
 800d208:	e7fd      	b.n	800d206 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d20a:	4b39      	ldr	r3, [pc, #228]	@ (800d2f0 <xPortStartScheduler+0x130>)
 800d20c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d20e:	697b      	ldr	r3, [r7, #20]
 800d210:	781b      	ldrb	r3, [r3, #0]
 800d212:	b2db      	uxtb	r3, r3
 800d214:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d216:	697b      	ldr	r3, [r7, #20]
 800d218:	22ff      	movs	r2, #255	@ 0xff
 800d21a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d21c:	697b      	ldr	r3, [r7, #20]
 800d21e:	781b      	ldrb	r3, [r3, #0]
 800d220:	b2db      	uxtb	r3, r3
 800d222:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d224:	78fb      	ldrb	r3, [r7, #3]
 800d226:	b2db      	uxtb	r3, r3
 800d228:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800d22c:	b2da      	uxtb	r2, r3
 800d22e:	4b31      	ldr	r3, [pc, #196]	@ (800d2f4 <xPortStartScheduler+0x134>)
 800d230:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d232:	4b31      	ldr	r3, [pc, #196]	@ (800d2f8 <xPortStartScheduler+0x138>)
 800d234:	2207      	movs	r2, #7
 800d236:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d238:	e009      	b.n	800d24e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800d23a:	4b2f      	ldr	r3, [pc, #188]	@ (800d2f8 <xPortStartScheduler+0x138>)
 800d23c:	681b      	ldr	r3, [r3, #0]
 800d23e:	3b01      	subs	r3, #1
 800d240:	4a2d      	ldr	r2, [pc, #180]	@ (800d2f8 <xPortStartScheduler+0x138>)
 800d242:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d244:	78fb      	ldrb	r3, [r7, #3]
 800d246:	b2db      	uxtb	r3, r3
 800d248:	005b      	lsls	r3, r3, #1
 800d24a:	b2db      	uxtb	r3, r3
 800d24c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d24e:	78fb      	ldrb	r3, [r7, #3]
 800d250:	b2db      	uxtb	r3, r3
 800d252:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d256:	2b80      	cmp	r3, #128	@ 0x80
 800d258:	d0ef      	beq.n	800d23a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d25a:	4b27      	ldr	r3, [pc, #156]	@ (800d2f8 <xPortStartScheduler+0x138>)
 800d25c:	681b      	ldr	r3, [r3, #0]
 800d25e:	f1c3 0307 	rsb	r3, r3, #7
 800d262:	2b04      	cmp	r3, #4
 800d264:	d00b      	beq.n	800d27e <xPortStartScheduler+0xbe>
	__asm volatile
 800d266:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d26a:	f383 8811 	msr	BASEPRI, r3
 800d26e:	f3bf 8f6f 	isb	sy
 800d272:	f3bf 8f4f 	dsb	sy
 800d276:	60bb      	str	r3, [r7, #8]
}
 800d278:	bf00      	nop
 800d27a:	bf00      	nop
 800d27c:	e7fd      	b.n	800d27a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d27e:	4b1e      	ldr	r3, [pc, #120]	@ (800d2f8 <xPortStartScheduler+0x138>)
 800d280:	681b      	ldr	r3, [r3, #0]
 800d282:	021b      	lsls	r3, r3, #8
 800d284:	4a1c      	ldr	r2, [pc, #112]	@ (800d2f8 <xPortStartScheduler+0x138>)
 800d286:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d288:	4b1b      	ldr	r3, [pc, #108]	@ (800d2f8 <xPortStartScheduler+0x138>)
 800d28a:	681b      	ldr	r3, [r3, #0]
 800d28c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800d290:	4a19      	ldr	r2, [pc, #100]	@ (800d2f8 <xPortStartScheduler+0x138>)
 800d292:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	b2da      	uxtb	r2, r3
 800d298:	697b      	ldr	r3, [r7, #20]
 800d29a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d29c:	4b17      	ldr	r3, [pc, #92]	@ (800d2fc <xPortStartScheduler+0x13c>)
 800d29e:	681b      	ldr	r3, [r3, #0]
 800d2a0:	4a16      	ldr	r2, [pc, #88]	@ (800d2fc <xPortStartScheduler+0x13c>)
 800d2a2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800d2a6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d2a8:	4b14      	ldr	r3, [pc, #80]	@ (800d2fc <xPortStartScheduler+0x13c>)
 800d2aa:	681b      	ldr	r3, [r3, #0]
 800d2ac:	4a13      	ldr	r2, [pc, #76]	@ (800d2fc <xPortStartScheduler+0x13c>)
 800d2ae:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800d2b2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d2b4:	f000 f8da 	bl	800d46c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d2b8:	4b11      	ldr	r3, [pc, #68]	@ (800d300 <xPortStartScheduler+0x140>)
 800d2ba:	2200      	movs	r2, #0
 800d2bc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d2be:	f000 f8f9 	bl	800d4b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d2c2:	4b10      	ldr	r3, [pc, #64]	@ (800d304 <xPortStartScheduler+0x144>)
 800d2c4:	681b      	ldr	r3, [r3, #0]
 800d2c6:	4a0f      	ldr	r2, [pc, #60]	@ (800d304 <xPortStartScheduler+0x144>)
 800d2c8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800d2cc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d2ce:	f7ff ff63 	bl	800d198 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d2d2:	f7fe ff2d 	bl	800c130 <vTaskSwitchContext>
	prvTaskExitError();
 800d2d6:	f7ff ff19 	bl	800d10c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d2da:	2300      	movs	r3, #0
}
 800d2dc:	4618      	mov	r0, r3
 800d2de:	3718      	adds	r7, #24
 800d2e0:	46bd      	mov	sp, r7
 800d2e2:	bd80      	pop	{r7, pc}
 800d2e4:	e000ed00 	.word	0xe000ed00
 800d2e8:	410fc271 	.word	0x410fc271
 800d2ec:	410fc270 	.word	0x410fc270
 800d2f0:	e000e400 	.word	0xe000e400
 800d2f4:	20001820 	.word	0x20001820
 800d2f8:	20001824 	.word	0x20001824
 800d2fc:	e000ed20 	.word	0xe000ed20
 800d300:	2000002c 	.word	0x2000002c
 800d304:	e000ef34 	.word	0xe000ef34

0800d308 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d308:	b480      	push	{r7}
 800d30a:	b083      	sub	sp, #12
 800d30c:	af00      	add	r7, sp, #0
	__asm volatile
 800d30e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d312:	f383 8811 	msr	BASEPRI, r3
 800d316:	f3bf 8f6f 	isb	sy
 800d31a:	f3bf 8f4f 	dsb	sy
 800d31e:	607b      	str	r3, [r7, #4]
}
 800d320:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d322:	4b10      	ldr	r3, [pc, #64]	@ (800d364 <vPortEnterCritical+0x5c>)
 800d324:	681b      	ldr	r3, [r3, #0]
 800d326:	3301      	adds	r3, #1
 800d328:	4a0e      	ldr	r2, [pc, #56]	@ (800d364 <vPortEnterCritical+0x5c>)
 800d32a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d32c:	4b0d      	ldr	r3, [pc, #52]	@ (800d364 <vPortEnterCritical+0x5c>)
 800d32e:	681b      	ldr	r3, [r3, #0]
 800d330:	2b01      	cmp	r3, #1
 800d332:	d110      	bne.n	800d356 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d334:	4b0c      	ldr	r3, [pc, #48]	@ (800d368 <vPortEnterCritical+0x60>)
 800d336:	681b      	ldr	r3, [r3, #0]
 800d338:	b2db      	uxtb	r3, r3
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	d00b      	beq.n	800d356 <vPortEnterCritical+0x4e>
	__asm volatile
 800d33e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d342:	f383 8811 	msr	BASEPRI, r3
 800d346:	f3bf 8f6f 	isb	sy
 800d34a:	f3bf 8f4f 	dsb	sy
 800d34e:	603b      	str	r3, [r7, #0]
}
 800d350:	bf00      	nop
 800d352:	bf00      	nop
 800d354:	e7fd      	b.n	800d352 <vPortEnterCritical+0x4a>
	}
}
 800d356:	bf00      	nop
 800d358:	370c      	adds	r7, #12
 800d35a:	46bd      	mov	sp, r7
 800d35c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d360:	4770      	bx	lr
 800d362:	bf00      	nop
 800d364:	2000002c 	.word	0x2000002c
 800d368:	e000ed04 	.word	0xe000ed04

0800d36c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d36c:	b480      	push	{r7}
 800d36e:	b083      	sub	sp, #12
 800d370:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d372:	4b12      	ldr	r3, [pc, #72]	@ (800d3bc <vPortExitCritical+0x50>)
 800d374:	681b      	ldr	r3, [r3, #0]
 800d376:	2b00      	cmp	r3, #0
 800d378:	d10b      	bne.n	800d392 <vPortExitCritical+0x26>
	__asm volatile
 800d37a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d37e:	f383 8811 	msr	BASEPRI, r3
 800d382:	f3bf 8f6f 	isb	sy
 800d386:	f3bf 8f4f 	dsb	sy
 800d38a:	607b      	str	r3, [r7, #4]
}
 800d38c:	bf00      	nop
 800d38e:	bf00      	nop
 800d390:	e7fd      	b.n	800d38e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800d392:	4b0a      	ldr	r3, [pc, #40]	@ (800d3bc <vPortExitCritical+0x50>)
 800d394:	681b      	ldr	r3, [r3, #0]
 800d396:	3b01      	subs	r3, #1
 800d398:	4a08      	ldr	r2, [pc, #32]	@ (800d3bc <vPortExitCritical+0x50>)
 800d39a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d39c:	4b07      	ldr	r3, [pc, #28]	@ (800d3bc <vPortExitCritical+0x50>)
 800d39e:	681b      	ldr	r3, [r3, #0]
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	d105      	bne.n	800d3b0 <vPortExitCritical+0x44>
 800d3a4:	2300      	movs	r3, #0
 800d3a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d3a8:	683b      	ldr	r3, [r7, #0]
 800d3aa:	f383 8811 	msr	BASEPRI, r3
}
 800d3ae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d3b0:	bf00      	nop
 800d3b2:	370c      	adds	r7, #12
 800d3b4:	46bd      	mov	sp, r7
 800d3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ba:	4770      	bx	lr
 800d3bc:	2000002c 	.word	0x2000002c

0800d3c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d3c0:	f3ef 8009 	mrs	r0, PSP
 800d3c4:	f3bf 8f6f 	isb	sy
 800d3c8:	4b15      	ldr	r3, [pc, #84]	@ (800d420 <pxCurrentTCBConst>)
 800d3ca:	681a      	ldr	r2, [r3, #0]
 800d3cc:	f01e 0f10 	tst.w	lr, #16
 800d3d0:	bf08      	it	eq
 800d3d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d3d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3da:	6010      	str	r0, [r2, #0]
 800d3dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d3e0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800d3e4:	f380 8811 	msr	BASEPRI, r0
 800d3e8:	f3bf 8f4f 	dsb	sy
 800d3ec:	f3bf 8f6f 	isb	sy
 800d3f0:	f7fe fe9e 	bl	800c130 <vTaskSwitchContext>
 800d3f4:	f04f 0000 	mov.w	r0, #0
 800d3f8:	f380 8811 	msr	BASEPRI, r0
 800d3fc:	bc09      	pop	{r0, r3}
 800d3fe:	6819      	ldr	r1, [r3, #0]
 800d400:	6808      	ldr	r0, [r1, #0]
 800d402:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d406:	f01e 0f10 	tst.w	lr, #16
 800d40a:	bf08      	it	eq
 800d40c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d410:	f380 8809 	msr	PSP, r0
 800d414:	f3bf 8f6f 	isb	sy
 800d418:	4770      	bx	lr
 800d41a:	bf00      	nop
 800d41c:	f3af 8000 	nop.w

0800d420 <pxCurrentTCBConst>:
 800d420:	200011f4 	.word	0x200011f4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d424:	bf00      	nop
 800d426:	bf00      	nop

0800d428 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d428:	b580      	push	{r7, lr}
 800d42a:	b082      	sub	sp, #8
 800d42c:	af00      	add	r7, sp, #0
	__asm volatile
 800d42e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d432:	f383 8811 	msr	BASEPRI, r3
 800d436:	f3bf 8f6f 	isb	sy
 800d43a:	f3bf 8f4f 	dsb	sy
 800d43e:	607b      	str	r3, [r7, #4]
}
 800d440:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d442:	f7fe fdbb 	bl	800bfbc <xTaskIncrementTick>
 800d446:	4603      	mov	r3, r0
 800d448:	2b00      	cmp	r3, #0
 800d44a:	d003      	beq.n	800d454 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d44c:	4b06      	ldr	r3, [pc, #24]	@ (800d468 <xPortSysTickHandler+0x40>)
 800d44e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d452:	601a      	str	r2, [r3, #0]
 800d454:	2300      	movs	r3, #0
 800d456:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d458:	683b      	ldr	r3, [r7, #0]
 800d45a:	f383 8811 	msr	BASEPRI, r3
}
 800d45e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d460:	bf00      	nop
 800d462:	3708      	adds	r7, #8
 800d464:	46bd      	mov	sp, r7
 800d466:	bd80      	pop	{r7, pc}
 800d468:	e000ed04 	.word	0xe000ed04

0800d46c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d46c:	b480      	push	{r7}
 800d46e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d470:	4b0b      	ldr	r3, [pc, #44]	@ (800d4a0 <vPortSetupTimerInterrupt+0x34>)
 800d472:	2200      	movs	r2, #0
 800d474:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d476:	4b0b      	ldr	r3, [pc, #44]	@ (800d4a4 <vPortSetupTimerInterrupt+0x38>)
 800d478:	2200      	movs	r2, #0
 800d47a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d47c:	4b0a      	ldr	r3, [pc, #40]	@ (800d4a8 <vPortSetupTimerInterrupt+0x3c>)
 800d47e:	681b      	ldr	r3, [r3, #0]
 800d480:	4a0a      	ldr	r2, [pc, #40]	@ (800d4ac <vPortSetupTimerInterrupt+0x40>)
 800d482:	fba2 2303 	umull	r2, r3, r2, r3
 800d486:	099b      	lsrs	r3, r3, #6
 800d488:	4a09      	ldr	r2, [pc, #36]	@ (800d4b0 <vPortSetupTimerInterrupt+0x44>)
 800d48a:	3b01      	subs	r3, #1
 800d48c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d48e:	4b04      	ldr	r3, [pc, #16]	@ (800d4a0 <vPortSetupTimerInterrupt+0x34>)
 800d490:	2207      	movs	r2, #7
 800d492:	601a      	str	r2, [r3, #0]
}
 800d494:	bf00      	nop
 800d496:	46bd      	mov	sp, r7
 800d498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d49c:	4770      	bx	lr
 800d49e:	bf00      	nop
 800d4a0:	e000e010 	.word	0xe000e010
 800d4a4:	e000e018 	.word	0xe000e018
 800d4a8:	20000008 	.word	0x20000008
 800d4ac:	10624dd3 	.word	0x10624dd3
 800d4b0:	e000e014 	.word	0xe000e014

0800d4b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d4b4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800d4c4 <vPortEnableVFP+0x10>
 800d4b8:	6801      	ldr	r1, [r0, #0]
 800d4ba:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800d4be:	6001      	str	r1, [r0, #0]
 800d4c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d4c2:	bf00      	nop
 800d4c4:	e000ed88 	.word	0xe000ed88

0800d4c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d4c8:	b480      	push	{r7}
 800d4ca:	b085      	sub	sp, #20
 800d4cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d4ce:	f3ef 8305 	mrs	r3, IPSR
 800d4d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d4d4:	68fb      	ldr	r3, [r7, #12]
 800d4d6:	2b0f      	cmp	r3, #15
 800d4d8:	d915      	bls.n	800d506 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d4da:	4a18      	ldr	r2, [pc, #96]	@ (800d53c <vPortValidateInterruptPriority+0x74>)
 800d4dc:	68fb      	ldr	r3, [r7, #12]
 800d4de:	4413      	add	r3, r2
 800d4e0:	781b      	ldrb	r3, [r3, #0]
 800d4e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d4e4:	4b16      	ldr	r3, [pc, #88]	@ (800d540 <vPortValidateInterruptPriority+0x78>)
 800d4e6:	781b      	ldrb	r3, [r3, #0]
 800d4e8:	7afa      	ldrb	r2, [r7, #11]
 800d4ea:	429a      	cmp	r2, r3
 800d4ec:	d20b      	bcs.n	800d506 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800d4ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d4f2:	f383 8811 	msr	BASEPRI, r3
 800d4f6:	f3bf 8f6f 	isb	sy
 800d4fa:	f3bf 8f4f 	dsb	sy
 800d4fe:	607b      	str	r3, [r7, #4]
}
 800d500:	bf00      	nop
 800d502:	bf00      	nop
 800d504:	e7fd      	b.n	800d502 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d506:	4b0f      	ldr	r3, [pc, #60]	@ (800d544 <vPortValidateInterruptPriority+0x7c>)
 800d508:	681b      	ldr	r3, [r3, #0]
 800d50a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800d50e:	4b0e      	ldr	r3, [pc, #56]	@ (800d548 <vPortValidateInterruptPriority+0x80>)
 800d510:	681b      	ldr	r3, [r3, #0]
 800d512:	429a      	cmp	r2, r3
 800d514:	d90b      	bls.n	800d52e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800d516:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d51a:	f383 8811 	msr	BASEPRI, r3
 800d51e:	f3bf 8f6f 	isb	sy
 800d522:	f3bf 8f4f 	dsb	sy
 800d526:	603b      	str	r3, [r7, #0]
}
 800d528:	bf00      	nop
 800d52a:	bf00      	nop
 800d52c:	e7fd      	b.n	800d52a <vPortValidateInterruptPriority+0x62>
	}
 800d52e:	bf00      	nop
 800d530:	3714      	adds	r7, #20
 800d532:	46bd      	mov	sp, r7
 800d534:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d538:	4770      	bx	lr
 800d53a:	bf00      	nop
 800d53c:	e000e3f0 	.word	0xe000e3f0
 800d540:	20001820 	.word	0x20001820
 800d544:	e000ed0c 	.word	0xe000ed0c
 800d548:	20001824 	.word	0x20001824

0800d54c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d54c:	b580      	push	{r7, lr}
 800d54e:	b08a      	sub	sp, #40	@ 0x28
 800d550:	af00      	add	r7, sp, #0
 800d552:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d554:	2300      	movs	r3, #0
 800d556:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d558:	f7fe fc74 	bl	800be44 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d55c:	4b5c      	ldr	r3, [pc, #368]	@ (800d6d0 <pvPortMalloc+0x184>)
 800d55e:	681b      	ldr	r3, [r3, #0]
 800d560:	2b00      	cmp	r3, #0
 800d562:	d101      	bne.n	800d568 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d564:	f000 f924 	bl	800d7b0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d568:	4b5a      	ldr	r3, [pc, #360]	@ (800d6d4 <pvPortMalloc+0x188>)
 800d56a:	681a      	ldr	r2, [r3, #0]
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	4013      	ands	r3, r2
 800d570:	2b00      	cmp	r3, #0
 800d572:	f040 8095 	bne.w	800d6a0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	2b00      	cmp	r3, #0
 800d57a:	d01e      	beq.n	800d5ba <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800d57c:	2208      	movs	r2, #8
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	4413      	add	r3, r2
 800d582:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	f003 0307 	and.w	r3, r3, #7
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	d015      	beq.n	800d5ba <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	f023 0307 	bic.w	r3, r3, #7
 800d594:	3308      	adds	r3, #8
 800d596:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	f003 0307 	and.w	r3, r3, #7
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	d00b      	beq.n	800d5ba <pvPortMalloc+0x6e>
	__asm volatile
 800d5a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d5a6:	f383 8811 	msr	BASEPRI, r3
 800d5aa:	f3bf 8f6f 	isb	sy
 800d5ae:	f3bf 8f4f 	dsb	sy
 800d5b2:	617b      	str	r3, [r7, #20]
}
 800d5b4:	bf00      	nop
 800d5b6:	bf00      	nop
 800d5b8:	e7fd      	b.n	800d5b6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	2b00      	cmp	r3, #0
 800d5be:	d06f      	beq.n	800d6a0 <pvPortMalloc+0x154>
 800d5c0:	4b45      	ldr	r3, [pc, #276]	@ (800d6d8 <pvPortMalloc+0x18c>)
 800d5c2:	681b      	ldr	r3, [r3, #0]
 800d5c4:	687a      	ldr	r2, [r7, #4]
 800d5c6:	429a      	cmp	r2, r3
 800d5c8:	d86a      	bhi.n	800d6a0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d5ca:	4b44      	ldr	r3, [pc, #272]	@ (800d6dc <pvPortMalloc+0x190>)
 800d5cc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d5ce:	4b43      	ldr	r3, [pc, #268]	@ (800d6dc <pvPortMalloc+0x190>)
 800d5d0:	681b      	ldr	r3, [r3, #0]
 800d5d2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d5d4:	e004      	b.n	800d5e0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800d5d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5d8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d5da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5dc:	681b      	ldr	r3, [r3, #0]
 800d5de:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d5e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5e2:	685b      	ldr	r3, [r3, #4]
 800d5e4:	687a      	ldr	r2, [r7, #4]
 800d5e6:	429a      	cmp	r2, r3
 800d5e8:	d903      	bls.n	800d5f2 <pvPortMalloc+0xa6>
 800d5ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5ec:	681b      	ldr	r3, [r3, #0]
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	d1f1      	bne.n	800d5d6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d5f2:	4b37      	ldr	r3, [pc, #220]	@ (800d6d0 <pvPortMalloc+0x184>)
 800d5f4:	681b      	ldr	r3, [r3, #0]
 800d5f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d5f8:	429a      	cmp	r2, r3
 800d5fa:	d051      	beq.n	800d6a0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d5fc:	6a3b      	ldr	r3, [r7, #32]
 800d5fe:	681b      	ldr	r3, [r3, #0]
 800d600:	2208      	movs	r2, #8
 800d602:	4413      	add	r3, r2
 800d604:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d608:	681a      	ldr	r2, [r3, #0]
 800d60a:	6a3b      	ldr	r3, [r7, #32]
 800d60c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d60e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d610:	685a      	ldr	r2, [r3, #4]
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	1ad2      	subs	r2, r2, r3
 800d616:	2308      	movs	r3, #8
 800d618:	005b      	lsls	r3, r3, #1
 800d61a:	429a      	cmp	r2, r3
 800d61c:	d920      	bls.n	800d660 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d61e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	4413      	add	r3, r2
 800d624:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d626:	69bb      	ldr	r3, [r7, #24]
 800d628:	f003 0307 	and.w	r3, r3, #7
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	d00b      	beq.n	800d648 <pvPortMalloc+0xfc>
	__asm volatile
 800d630:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d634:	f383 8811 	msr	BASEPRI, r3
 800d638:	f3bf 8f6f 	isb	sy
 800d63c:	f3bf 8f4f 	dsb	sy
 800d640:	613b      	str	r3, [r7, #16]
}
 800d642:	bf00      	nop
 800d644:	bf00      	nop
 800d646:	e7fd      	b.n	800d644 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d648:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d64a:	685a      	ldr	r2, [r3, #4]
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	1ad2      	subs	r2, r2, r3
 800d650:	69bb      	ldr	r3, [r7, #24]
 800d652:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d654:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d656:	687a      	ldr	r2, [r7, #4]
 800d658:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d65a:	69b8      	ldr	r0, [r7, #24]
 800d65c:	f000 f90a 	bl	800d874 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d660:	4b1d      	ldr	r3, [pc, #116]	@ (800d6d8 <pvPortMalloc+0x18c>)
 800d662:	681a      	ldr	r2, [r3, #0]
 800d664:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d666:	685b      	ldr	r3, [r3, #4]
 800d668:	1ad3      	subs	r3, r2, r3
 800d66a:	4a1b      	ldr	r2, [pc, #108]	@ (800d6d8 <pvPortMalloc+0x18c>)
 800d66c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d66e:	4b1a      	ldr	r3, [pc, #104]	@ (800d6d8 <pvPortMalloc+0x18c>)
 800d670:	681a      	ldr	r2, [r3, #0]
 800d672:	4b1b      	ldr	r3, [pc, #108]	@ (800d6e0 <pvPortMalloc+0x194>)
 800d674:	681b      	ldr	r3, [r3, #0]
 800d676:	429a      	cmp	r2, r3
 800d678:	d203      	bcs.n	800d682 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d67a:	4b17      	ldr	r3, [pc, #92]	@ (800d6d8 <pvPortMalloc+0x18c>)
 800d67c:	681b      	ldr	r3, [r3, #0]
 800d67e:	4a18      	ldr	r2, [pc, #96]	@ (800d6e0 <pvPortMalloc+0x194>)
 800d680:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d684:	685a      	ldr	r2, [r3, #4]
 800d686:	4b13      	ldr	r3, [pc, #76]	@ (800d6d4 <pvPortMalloc+0x188>)
 800d688:	681b      	ldr	r3, [r3, #0]
 800d68a:	431a      	orrs	r2, r3
 800d68c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d68e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d692:	2200      	movs	r2, #0
 800d694:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800d696:	4b13      	ldr	r3, [pc, #76]	@ (800d6e4 <pvPortMalloc+0x198>)
 800d698:	681b      	ldr	r3, [r3, #0]
 800d69a:	3301      	adds	r3, #1
 800d69c:	4a11      	ldr	r2, [pc, #68]	@ (800d6e4 <pvPortMalloc+0x198>)
 800d69e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d6a0:	f7fe fbde 	bl	800be60 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d6a4:	69fb      	ldr	r3, [r7, #28]
 800d6a6:	f003 0307 	and.w	r3, r3, #7
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	d00b      	beq.n	800d6c6 <pvPortMalloc+0x17a>
	__asm volatile
 800d6ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d6b2:	f383 8811 	msr	BASEPRI, r3
 800d6b6:	f3bf 8f6f 	isb	sy
 800d6ba:	f3bf 8f4f 	dsb	sy
 800d6be:	60fb      	str	r3, [r7, #12]
}
 800d6c0:	bf00      	nop
 800d6c2:	bf00      	nop
 800d6c4:	e7fd      	b.n	800d6c2 <pvPortMalloc+0x176>
	return pvReturn;
 800d6c6:	69fb      	ldr	r3, [r7, #28]
}
 800d6c8:	4618      	mov	r0, r3
 800d6ca:	3728      	adds	r7, #40	@ 0x28
 800d6cc:	46bd      	mov	sp, r7
 800d6ce:	bd80      	pop	{r7, pc}
 800d6d0:	20003f40 	.word	0x20003f40
 800d6d4:	20003f54 	.word	0x20003f54
 800d6d8:	20003f44 	.word	0x20003f44
 800d6dc:	20003f38 	.word	0x20003f38
 800d6e0:	20003f48 	.word	0x20003f48
 800d6e4:	20003f4c 	.word	0x20003f4c

0800d6e8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d6e8:	b580      	push	{r7, lr}
 800d6ea:	b086      	sub	sp, #24
 800d6ec:	af00      	add	r7, sp, #0
 800d6ee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	d04f      	beq.n	800d79a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d6fa:	2308      	movs	r3, #8
 800d6fc:	425b      	negs	r3, r3
 800d6fe:	697a      	ldr	r2, [r7, #20]
 800d700:	4413      	add	r3, r2
 800d702:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d704:	697b      	ldr	r3, [r7, #20]
 800d706:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d708:	693b      	ldr	r3, [r7, #16]
 800d70a:	685a      	ldr	r2, [r3, #4]
 800d70c:	4b25      	ldr	r3, [pc, #148]	@ (800d7a4 <vPortFree+0xbc>)
 800d70e:	681b      	ldr	r3, [r3, #0]
 800d710:	4013      	ands	r3, r2
 800d712:	2b00      	cmp	r3, #0
 800d714:	d10b      	bne.n	800d72e <vPortFree+0x46>
	__asm volatile
 800d716:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d71a:	f383 8811 	msr	BASEPRI, r3
 800d71e:	f3bf 8f6f 	isb	sy
 800d722:	f3bf 8f4f 	dsb	sy
 800d726:	60fb      	str	r3, [r7, #12]
}
 800d728:	bf00      	nop
 800d72a:	bf00      	nop
 800d72c:	e7fd      	b.n	800d72a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d72e:	693b      	ldr	r3, [r7, #16]
 800d730:	681b      	ldr	r3, [r3, #0]
 800d732:	2b00      	cmp	r3, #0
 800d734:	d00b      	beq.n	800d74e <vPortFree+0x66>
	__asm volatile
 800d736:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d73a:	f383 8811 	msr	BASEPRI, r3
 800d73e:	f3bf 8f6f 	isb	sy
 800d742:	f3bf 8f4f 	dsb	sy
 800d746:	60bb      	str	r3, [r7, #8]
}
 800d748:	bf00      	nop
 800d74a:	bf00      	nop
 800d74c:	e7fd      	b.n	800d74a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d74e:	693b      	ldr	r3, [r7, #16]
 800d750:	685a      	ldr	r2, [r3, #4]
 800d752:	4b14      	ldr	r3, [pc, #80]	@ (800d7a4 <vPortFree+0xbc>)
 800d754:	681b      	ldr	r3, [r3, #0]
 800d756:	4013      	ands	r3, r2
 800d758:	2b00      	cmp	r3, #0
 800d75a:	d01e      	beq.n	800d79a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d75c:	693b      	ldr	r3, [r7, #16]
 800d75e:	681b      	ldr	r3, [r3, #0]
 800d760:	2b00      	cmp	r3, #0
 800d762:	d11a      	bne.n	800d79a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d764:	693b      	ldr	r3, [r7, #16]
 800d766:	685a      	ldr	r2, [r3, #4]
 800d768:	4b0e      	ldr	r3, [pc, #56]	@ (800d7a4 <vPortFree+0xbc>)
 800d76a:	681b      	ldr	r3, [r3, #0]
 800d76c:	43db      	mvns	r3, r3
 800d76e:	401a      	ands	r2, r3
 800d770:	693b      	ldr	r3, [r7, #16]
 800d772:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d774:	f7fe fb66 	bl	800be44 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d778:	693b      	ldr	r3, [r7, #16]
 800d77a:	685a      	ldr	r2, [r3, #4]
 800d77c:	4b0a      	ldr	r3, [pc, #40]	@ (800d7a8 <vPortFree+0xc0>)
 800d77e:	681b      	ldr	r3, [r3, #0]
 800d780:	4413      	add	r3, r2
 800d782:	4a09      	ldr	r2, [pc, #36]	@ (800d7a8 <vPortFree+0xc0>)
 800d784:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d786:	6938      	ldr	r0, [r7, #16]
 800d788:	f000 f874 	bl	800d874 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800d78c:	4b07      	ldr	r3, [pc, #28]	@ (800d7ac <vPortFree+0xc4>)
 800d78e:	681b      	ldr	r3, [r3, #0]
 800d790:	3301      	adds	r3, #1
 800d792:	4a06      	ldr	r2, [pc, #24]	@ (800d7ac <vPortFree+0xc4>)
 800d794:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800d796:	f7fe fb63 	bl	800be60 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d79a:	bf00      	nop
 800d79c:	3718      	adds	r7, #24
 800d79e:	46bd      	mov	sp, r7
 800d7a0:	bd80      	pop	{r7, pc}
 800d7a2:	bf00      	nop
 800d7a4:	20003f54 	.word	0x20003f54
 800d7a8:	20003f44 	.word	0x20003f44
 800d7ac:	20003f50 	.word	0x20003f50

0800d7b0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d7b0:	b480      	push	{r7}
 800d7b2:	b085      	sub	sp, #20
 800d7b4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d7b6:	f242 7310 	movw	r3, #10000	@ 0x2710
 800d7ba:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d7bc:	4b27      	ldr	r3, [pc, #156]	@ (800d85c <prvHeapInit+0xac>)
 800d7be:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d7c0:	68fb      	ldr	r3, [r7, #12]
 800d7c2:	f003 0307 	and.w	r3, r3, #7
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	d00c      	beq.n	800d7e4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d7ca:	68fb      	ldr	r3, [r7, #12]
 800d7cc:	3307      	adds	r3, #7
 800d7ce:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d7d0:	68fb      	ldr	r3, [r7, #12]
 800d7d2:	f023 0307 	bic.w	r3, r3, #7
 800d7d6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d7d8:	68ba      	ldr	r2, [r7, #8]
 800d7da:	68fb      	ldr	r3, [r7, #12]
 800d7dc:	1ad3      	subs	r3, r2, r3
 800d7de:	4a1f      	ldr	r2, [pc, #124]	@ (800d85c <prvHeapInit+0xac>)
 800d7e0:	4413      	add	r3, r2
 800d7e2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d7e4:	68fb      	ldr	r3, [r7, #12]
 800d7e6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d7e8:	4a1d      	ldr	r2, [pc, #116]	@ (800d860 <prvHeapInit+0xb0>)
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d7ee:	4b1c      	ldr	r3, [pc, #112]	@ (800d860 <prvHeapInit+0xb0>)
 800d7f0:	2200      	movs	r2, #0
 800d7f2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	68ba      	ldr	r2, [r7, #8]
 800d7f8:	4413      	add	r3, r2
 800d7fa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d7fc:	2208      	movs	r2, #8
 800d7fe:	68fb      	ldr	r3, [r7, #12]
 800d800:	1a9b      	subs	r3, r3, r2
 800d802:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d804:	68fb      	ldr	r3, [r7, #12]
 800d806:	f023 0307 	bic.w	r3, r3, #7
 800d80a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d80c:	68fb      	ldr	r3, [r7, #12]
 800d80e:	4a15      	ldr	r2, [pc, #84]	@ (800d864 <prvHeapInit+0xb4>)
 800d810:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d812:	4b14      	ldr	r3, [pc, #80]	@ (800d864 <prvHeapInit+0xb4>)
 800d814:	681b      	ldr	r3, [r3, #0]
 800d816:	2200      	movs	r2, #0
 800d818:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d81a:	4b12      	ldr	r3, [pc, #72]	@ (800d864 <prvHeapInit+0xb4>)
 800d81c:	681b      	ldr	r3, [r3, #0]
 800d81e:	2200      	movs	r2, #0
 800d820:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d826:	683b      	ldr	r3, [r7, #0]
 800d828:	68fa      	ldr	r2, [r7, #12]
 800d82a:	1ad2      	subs	r2, r2, r3
 800d82c:	683b      	ldr	r3, [r7, #0]
 800d82e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d830:	4b0c      	ldr	r3, [pc, #48]	@ (800d864 <prvHeapInit+0xb4>)
 800d832:	681a      	ldr	r2, [r3, #0]
 800d834:	683b      	ldr	r3, [r7, #0]
 800d836:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d838:	683b      	ldr	r3, [r7, #0]
 800d83a:	685b      	ldr	r3, [r3, #4]
 800d83c:	4a0a      	ldr	r2, [pc, #40]	@ (800d868 <prvHeapInit+0xb8>)
 800d83e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d840:	683b      	ldr	r3, [r7, #0]
 800d842:	685b      	ldr	r3, [r3, #4]
 800d844:	4a09      	ldr	r2, [pc, #36]	@ (800d86c <prvHeapInit+0xbc>)
 800d846:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d848:	4b09      	ldr	r3, [pc, #36]	@ (800d870 <prvHeapInit+0xc0>)
 800d84a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800d84e:	601a      	str	r2, [r3, #0]
}
 800d850:	bf00      	nop
 800d852:	3714      	adds	r7, #20
 800d854:	46bd      	mov	sp, r7
 800d856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d85a:	4770      	bx	lr
 800d85c:	20001828 	.word	0x20001828
 800d860:	20003f38 	.word	0x20003f38
 800d864:	20003f40 	.word	0x20003f40
 800d868:	20003f48 	.word	0x20003f48
 800d86c:	20003f44 	.word	0x20003f44
 800d870:	20003f54 	.word	0x20003f54

0800d874 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d874:	b480      	push	{r7}
 800d876:	b085      	sub	sp, #20
 800d878:	af00      	add	r7, sp, #0
 800d87a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d87c:	4b28      	ldr	r3, [pc, #160]	@ (800d920 <prvInsertBlockIntoFreeList+0xac>)
 800d87e:	60fb      	str	r3, [r7, #12]
 800d880:	e002      	b.n	800d888 <prvInsertBlockIntoFreeList+0x14>
 800d882:	68fb      	ldr	r3, [r7, #12]
 800d884:	681b      	ldr	r3, [r3, #0]
 800d886:	60fb      	str	r3, [r7, #12]
 800d888:	68fb      	ldr	r3, [r7, #12]
 800d88a:	681b      	ldr	r3, [r3, #0]
 800d88c:	687a      	ldr	r2, [r7, #4]
 800d88e:	429a      	cmp	r2, r3
 800d890:	d8f7      	bhi.n	800d882 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d892:	68fb      	ldr	r3, [r7, #12]
 800d894:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d896:	68fb      	ldr	r3, [r7, #12]
 800d898:	685b      	ldr	r3, [r3, #4]
 800d89a:	68ba      	ldr	r2, [r7, #8]
 800d89c:	4413      	add	r3, r2
 800d89e:	687a      	ldr	r2, [r7, #4]
 800d8a0:	429a      	cmp	r2, r3
 800d8a2:	d108      	bne.n	800d8b6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d8a4:	68fb      	ldr	r3, [r7, #12]
 800d8a6:	685a      	ldr	r2, [r3, #4]
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	685b      	ldr	r3, [r3, #4]
 800d8ac:	441a      	add	r2, r3
 800d8ae:	68fb      	ldr	r3, [r7, #12]
 800d8b0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d8b2:	68fb      	ldr	r3, [r7, #12]
 800d8b4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	685b      	ldr	r3, [r3, #4]
 800d8be:	68ba      	ldr	r2, [r7, #8]
 800d8c0:	441a      	add	r2, r3
 800d8c2:	68fb      	ldr	r3, [r7, #12]
 800d8c4:	681b      	ldr	r3, [r3, #0]
 800d8c6:	429a      	cmp	r2, r3
 800d8c8:	d118      	bne.n	800d8fc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d8ca:	68fb      	ldr	r3, [r7, #12]
 800d8cc:	681a      	ldr	r2, [r3, #0]
 800d8ce:	4b15      	ldr	r3, [pc, #84]	@ (800d924 <prvInsertBlockIntoFreeList+0xb0>)
 800d8d0:	681b      	ldr	r3, [r3, #0]
 800d8d2:	429a      	cmp	r2, r3
 800d8d4:	d00d      	beq.n	800d8f2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	685a      	ldr	r2, [r3, #4]
 800d8da:	68fb      	ldr	r3, [r7, #12]
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	685b      	ldr	r3, [r3, #4]
 800d8e0:	441a      	add	r2, r3
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d8e6:	68fb      	ldr	r3, [r7, #12]
 800d8e8:	681b      	ldr	r3, [r3, #0]
 800d8ea:	681a      	ldr	r2, [r3, #0]
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	601a      	str	r2, [r3, #0]
 800d8f0:	e008      	b.n	800d904 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d8f2:	4b0c      	ldr	r3, [pc, #48]	@ (800d924 <prvInsertBlockIntoFreeList+0xb0>)
 800d8f4:	681a      	ldr	r2, [r3, #0]
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	601a      	str	r2, [r3, #0]
 800d8fa:	e003      	b.n	800d904 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d8fc:	68fb      	ldr	r3, [r7, #12]
 800d8fe:	681a      	ldr	r2, [r3, #0]
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d904:	68fa      	ldr	r2, [r7, #12]
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	429a      	cmp	r2, r3
 800d90a:	d002      	beq.n	800d912 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d90c:	68fb      	ldr	r3, [r7, #12]
 800d90e:	687a      	ldr	r2, [r7, #4]
 800d910:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d912:	bf00      	nop
 800d914:	3714      	adds	r7, #20
 800d916:	46bd      	mov	sp, r7
 800d918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d91c:	4770      	bx	lr
 800d91e:	bf00      	nop
 800d920:	20003f38 	.word	0x20003f38
 800d924:	20003f40 	.word	0x20003f40

0800d928 <atof>:
 800d928:	2100      	movs	r1, #0
 800d92a:	f000 be09 	b.w	800e540 <strtod>

0800d92e <atoi>:
 800d92e:	220a      	movs	r2, #10
 800d930:	2100      	movs	r1, #0
 800d932:	f000 be8b 	b.w	800e64c <strtol>

0800d936 <sulp>:
 800d936:	b570      	push	{r4, r5, r6, lr}
 800d938:	4604      	mov	r4, r0
 800d93a:	460d      	mov	r5, r1
 800d93c:	ec45 4b10 	vmov	d0, r4, r5
 800d940:	4616      	mov	r6, r2
 800d942:	f002 f895 	bl	800fa70 <__ulp>
 800d946:	ec51 0b10 	vmov	r0, r1, d0
 800d94a:	b17e      	cbz	r6, 800d96c <sulp+0x36>
 800d94c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800d950:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800d954:	2b00      	cmp	r3, #0
 800d956:	dd09      	ble.n	800d96c <sulp+0x36>
 800d958:	051b      	lsls	r3, r3, #20
 800d95a:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800d95e:	2400      	movs	r4, #0
 800d960:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800d964:	4622      	mov	r2, r4
 800d966:	462b      	mov	r3, r5
 800d968:	f7f2 fe56 	bl	8000618 <__aeabi_dmul>
 800d96c:	ec41 0b10 	vmov	d0, r0, r1
 800d970:	bd70      	pop	{r4, r5, r6, pc}
 800d972:	0000      	movs	r0, r0
 800d974:	0000      	movs	r0, r0
	...

0800d978 <_strtod_l>:
 800d978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d97c:	b09f      	sub	sp, #124	@ 0x7c
 800d97e:	460c      	mov	r4, r1
 800d980:	9217      	str	r2, [sp, #92]	@ 0x5c
 800d982:	2200      	movs	r2, #0
 800d984:	921a      	str	r2, [sp, #104]	@ 0x68
 800d986:	9005      	str	r0, [sp, #20]
 800d988:	f04f 0a00 	mov.w	sl, #0
 800d98c:	f04f 0b00 	mov.w	fp, #0
 800d990:	460a      	mov	r2, r1
 800d992:	9219      	str	r2, [sp, #100]	@ 0x64
 800d994:	7811      	ldrb	r1, [r2, #0]
 800d996:	292b      	cmp	r1, #43	@ 0x2b
 800d998:	d04a      	beq.n	800da30 <_strtod_l+0xb8>
 800d99a:	d838      	bhi.n	800da0e <_strtod_l+0x96>
 800d99c:	290d      	cmp	r1, #13
 800d99e:	d832      	bhi.n	800da06 <_strtod_l+0x8e>
 800d9a0:	2908      	cmp	r1, #8
 800d9a2:	d832      	bhi.n	800da0a <_strtod_l+0x92>
 800d9a4:	2900      	cmp	r1, #0
 800d9a6:	d03b      	beq.n	800da20 <_strtod_l+0xa8>
 800d9a8:	2200      	movs	r2, #0
 800d9aa:	920e      	str	r2, [sp, #56]	@ 0x38
 800d9ac:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800d9ae:	782a      	ldrb	r2, [r5, #0]
 800d9b0:	2a30      	cmp	r2, #48	@ 0x30
 800d9b2:	f040 80b2 	bne.w	800db1a <_strtod_l+0x1a2>
 800d9b6:	786a      	ldrb	r2, [r5, #1]
 800d9b8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800d9bc:	2a58      	cmp	r2, #88	@ 0x58
 800d9be:	d16e      	bne.n	800da9e <_strtod_l+0x126>
 800d9c0:	9302      	str	r3, [sp, #8]
 800d9c2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d9c4:	9301      	str	r3, [sp, #4]
 800d9c6:	ab1a      	add	r3, sp, #104	@ 0x68
 800d9c8:	9300      	str	r3, [sp, #0]
 800d9ca:	4a8f      	ldr	r2, [pc, #572]	@ (800dc08 <_strtod_l+0x290>)
 800d9cc:	9805      	ldr	r0, [sp, #20]
 800d9ce:	ab1b      	add	r3, sp, #108	@ 0x6c
 800d9d0:	a919      	add	r1, sp, #100	@ 0x64
 800d9d2:	f001 f94f 	bl	800ec74 <__gethex>
 800d9d6:	f010 060f 	ands.w	r6, r0, #15
 800d9da:	4604      	mov	r4, r0
 800d9dc:	d005      	beq.n	800d9ea <_strtod_l+0x72>
 800d9de:	2e06      	cmp	r6, #6
 800d9e0:	d128      	bne.n	800da34 <_strtod_l+0xbc>
 800d9e2:	3501      	adds	r5, #1
 800d9e4:	2300      	movs	r3, #0
 800d9e6:	9519      	str	r5, [sp, #100]	@ 0x64
 800d9e8:	930e      	str	r3, [sp, #56]	@ 0x38
 800d9ea:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	f040 858e 	bne.w	800e50e <_strtod_l+0xb96>
 800d9f2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d9f4:	b1cb      	cbz	r3, 800da2a <_strtod_l+0xb2>
 800d9f6:	4652      	mov	r2, sl
 800d9f8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800d9fc:	ec43 2b10 	vmov	d0, r2, r3
 800da00:	b01f      	add	sp, #124	@ 0x7c
 800da02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da06:	2920      	cmp	r1, #32
 800da08:	d1ce      	bne.n	800d9a8 <_strtod_l+0x30>
 800da0a:	3201      	adds	r2, #1
 800da0c:	e7c1      	b.n	800d992 <_strtod_l+0x1a>
 800da0e:	292d      	cmp	r1, #45	@ 0x2d
 800da10:	d1ca      	bne.n	800d9a8 <_strtod_l+0x30>
 800da12:	2101      	movs	r1, #1
 800da14:	910e      	str	r1, [sp, #56]	@ 0x38
 800da16:	1c51      	adds	r1, r2, #1
 800da18:	9119      	str	r1, [sp, #100]	@ 0x64
 800da1a:	7852      	ldrb	r2, [r2, #1]
 800da1c:	2a00      	cmp	r2, #0
 800da1e:	d1c5      	bne.n	800d9ac <_strtod_l+0x34>
 800da20:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800da22:	9419      	str	r4, [sp, #100]	@ 0x64
 800da24:	2b00      	cmp	r3, #0
 800da26:	f040 8570 	bne.w	800e50a <_strtod_l+0xb92>
 800da2a:	4652      	mov	r2, sl
 800da2c:	465b      	mov	r3, fp
 800da2e:	e7e5      	b.n	800d9fc <_strtod_l+0x84>
 800da30:	2100      	movs	r1, #0
 800da32:	e7ef      	b.n	800da14 <_strtod_l+0x9c>
 800da34:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800da36:	b13a      	cbz	r2, 800da48 <_strtod_l+0xd0>
 800da38:	2135      	movs	r1, #53	@ 0x35
 800da3a:	a81c      	add	r0, sp, #112	@ 0x70
 800da3c:	f002 f912 	bl	800fc64 <__copybits>
 800da40:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800da42:	9805      	ldr	r0, [sp, #20]
 800da44:	f001 fce8 	bl	800f418 <_Bfree>
 800da48:	3e01      	subs	r6, #1
 800da4a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800da4c:	2e04      	cmp	r6, #4
 800da4e:	d806      	bhi.n	800da5e <_strtod_l+0xe6>
 800da50:	e8df f006 	tbb	[pc, r6]
 800da54:	201d0314 	.word	0x201d0314
 800da58:	14          	.byte	0x14
 800da59:	00          	.byte	0x00
 800da5a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800da5e:	05e1      	lsls	r1, r4, #23
 800da60:	bf48      	it	mi
 800da62:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800da66:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800da6a:	0d1b      	lsrs	r3, r3, #20
 800da6c:	051b      	lsls	r3, r3, #20
 800da6e:	2b00      	cmp	r3, #0
 800da70:	d1bb      	bne.n	800d9ea <_strtod_l+0x72>
 800da72:	f001 f809 	bl	800ea88 <__errno>
 800da76:	2322      	movs	r3, #34	@ 0x22
 800da78:	6003      	str	r3, [r0, #0]
 800da7a:	e7b6      	b.n	800d9ea <_strtod_l+0x72>
 800da7c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800da80:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800da84:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800da88:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800da8c:	e7e7      	b.n	800da5e <_strtod_l+0xe6>
 800da8e:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800dc10 <_strtod_l+0x298>
 800da92:	e7e4      	b.n	800da5e <_strtod_l+0xe6>
 800da94:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800da98:	f04f 3aff 	mov.w	sl, #4294967295
 800da9c:	e7df      	b.n	800da5e <_strtod_l+0xe6>
 800da9e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800daa0:	1c5a      	adds	r2, r3, #1
 800daa2:	9219      	str	r2, [sp, #100]	@ 0x64
 800daa4:	785b      	ldrb	r3, [r3, #1]
 800daa6:	2b30      	cmp	r3, #48	@ 0x30
 800daa8:	d0f9      	beq.n	800da9e <_strtod_l+0x126>
 800daaa:	2b00      	cmp	r3, #0
 800daac:	d09d      	beq.n	800d9ea <_strtod_l+0x72>
 800daae:	2301      	movs	r3, #1
 800dab0:	2700      	movs	r7, #0
 800dab2:	9308      	str	r3, [sp, #32]
 800dab4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800dab6:	930c      	str	r3, [sp, #48]	@ 0x30
 800dab8:	970b      	str	r7, [sp, #44]	@ 0x2c
 800daba:	46b9      	mov	r9, r7
 800dabc:	220a      	movs	r2, #10
 800dabe:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800dac0:	7805      	ldrb	r5, [r0, #0]
 800dac2:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800dac6:	b2d9      	uxtb	r1, r3
 800dac8:	2909      	cmp	r1, #9
 800daca:	d928      	bls.n	800db1e <_strtod_l+0x1a6>
 800dacc:	494f      	ldr	r1, [pc, #316]	@ (800dc0c <_strtod_l+0x294>)
 800dace:	2201      	movs	r2, #1
 800dad0:	f000 ff10 	bl	800e8f4 <strncmp>
 800dad4:	2800      	cmp	r0, #0
 800dad6:	d032      	beq.n	800db3e <_strtod_l+0x1c6>
 800dad8:	2000      	movs	r0, #0
 800dada:	462a      	mov	r2, r5
 800dadc:	900a      	str	r0, [sp, #40]	@ 0x28
 800dade:	464d      	mov	r5, r9
 800dae0:	4603      	mov	r3, r0
 800dae2:	2a65      	cmp	r2, #101	@ 0x65
 800dae4:	d001      	beq.n	800daea <_strtod_l+0x172>
 800dae6:	2a45      	cmp	r2, #69	@ 0x45
 800dae8:	d114      	bne.n	800db14 <_strtod_l+0x19c>
 800daea:	b91d      	cbnz	r5, 800daf4 <_strtod_l+0x17c>
 800daec:	9a08      	ldr	r2, [sp, #32]
 800daee:	4302      	orrs	r2, r0
 800daf0:	d096      	beq.n	800da20 <_strtod_l+0xa8>
 800daf2:	2500      	movs	r5, #0
 800daf4:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800daf6:	1c62      	adds	r2, r4, #1
 800daf8:	9219      	str	r2, [sp, #100]	@ 0x64
 800dafa:	7862      	ldrb	r2, [r4, #1]
 800dafc:	2a2b      	cmp	r2, #43	@ 0x2b
 800dafe:	d07a      	beq.n	800dbf6 <_strtod_l+0x27e>
 800db00:	2a2d      	cmp	r2, #45	@ 0x2d
 800db02:	d07e      	beq.n	800dc02 <_strtod_l+0x28a>
 800db04:	f04f 0c00 	mov.w	ip, #0
 800db08:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800db0c:	2909      	cmp	r1, #9
 800db0e:	f240 8085 	bls.w	800dc1c <_strtod_l+0x2a4>
 800db12:	9419      	str	r4, [sp, #100]	@ 0x64
 800db14:	f04f 0800 	mov.w	r8, #0
 800db18:	e0a5      	b.n	800dc66 <_strtod_l+0x2ee>
 800db1a:	2300      	movs	r3, #0
 800db1c:	e7c8      	b.n	800dab0 <_strtod_l+0x138>
 800db1e:	f1b9 0f08 	cmp.w	r9, #8
 800db22:	bfd8      	it	le
 800db24:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800db26:	f100 0001 	add.w	r0, r0, #1
 800db2a:	bfda      	itte	le
 800db2c:	fb02 3301 	mlale	r3, r2, r1, r3
 800db30:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800db32:	fb02 3707 	mlagt	r7, r2, r7, r3
 800db36:	f109 0901 	add.w	r9, r9, #1
 800db3a:	9019      	str	r0, [sp, #100]	@ 0x64
 800db3c:	e7bf      	b.n	800dabe <_strtod_l+0x146>
 800db3e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800db40:	1c5a      	adds	r2, r3, #1
 800db42:	9219      	str	r2, [sp, #100]	@ 0x64
 800db44:	785a      	ldrb	r2, [r3, #1]
 800db46:	f1b9 0f00 	cmp.w	r9, #0
 800db4a:	d03b      	beq.n	800dbc4 <_strtod_l+0x24c>
 800db4c:	900a      	str	r0, [sp, #40]	@ 0x28
 800db4e:	464d      	mov	r5, r9
 800db50:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800db54:	2b09      	cmp	r3, #9
 800db56:	d912      	bls.n	800db7e <_strtod_l+0x206>
 800db58:	2301      	movs	r3, #1
 800db5a:	e7c2      	b.n	800dae2 <_strtod_l+0x16a>
 800db5c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800db5e:	1c5a      	adds	r2, r3, #1
 800db60:	9219      	str	r2, [sp, #100]	@ 0x64
 800db62:	785a      	ldrb	r2, [r3, #1]
 800db64:	3001      	adds	r0, #1
 800db66:	2a30      	cmp	r2, #48	@ 0x30
 800db68:	d0f8      	beq.n	800db5c <_strtod_l+0x1e4>
 800db6a:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800db6e:	2b08      	cmp	r3, #8
 800db70:	f200 84d2 	bhi.w	800e518 <_strtod_l+0xba0>
 800db74:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800db76:	900a      	str	r0, [sp, #40]	@ 0x28
 800db78:	2000      	movs	r0, #0
 800db7a:	930c      	str	r3, [sp, #48]	@ 0x30
 800db7c:	4605      	mov	r5, r0
 800db7e:	3a30      	subs	r2, #48	@ 0x30
 800db80:	f100 0301 	add.w	r3, r0, #1
 800db84:	d018      	beq.n	800dbb8 <_strtod_l+0x240>
 800db86:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800db88:	4419      	add	r1, r3
 800db8a:	910a      	str	r1, [sp, #40]	@ 0x28
 800db8c:	462e      	mov	r6, r5
 800db8e:	f04f 0e0a 	mov.w	lr, #10
 800db92:	1c71      	adds	r1, r6, #1
 800db94:	eba1 0c05 	sub.w	ip, r1, r5
 800db98:	4563      	cmp	r3, ip
 800db9a:	dc15      	bgt.n	800dbc8 <_strtod_l+0x250>
 800db9c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800dba0:	182b      	adds	r3, r5, r0
 800dba2:	2b08      	cmp	r3, #8
 800dba4:	f105 0501 	add.w	r5, r5, #1
 800dba8:	4405      	add	r5, r0
 800dbaa:	dc1a      	bgt.n	800dbe2 <_strtod_l+0x26a>
 800dbac:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800dbae:	230a      	movs	r3, #10
 800dbb0:	fb03 2301 	mla	r3, r3, r1, r2
 800dbb4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800dbb6:	2300      	movs	r3, #0
 800dbb8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800dbba:	1c51      	adds	r1, r2, #1
 800dbbc:	9119      	str	r1, [sp, #100]	@ 0x64
 800dbbe:	7852      	ldrb	r2, [r2, #1]
 800dbc0:	4618      	mov	r0, r3
 800dbc2:	e7c5      	b.n	800db50 <_strtod_l+0x1d8>
 800dbc4:	4648      	mov	r0, r9
 800dbc6:	e7ce      	b.n	800db66 <_strtod_l+0x1ee>
 800dbc8:	2e08      	cmp	r6, #8
 800dbca:	dc05      	bgt.n	800dbd8 <_strtod_l+0x260>
 800dbcc:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800dbce:	fb0e f606 	mul.w	r6, lr, r6
 800dbd2:	960b      	str	r6, [sp, #44]	@ 0x2c
 800dbd4:	460e      	mov	r6, r1
 800dbd6:	e7dc      	b.n	800db92 <_strtod_l+0x21a>
 800dbd8:	2910      	cmp	r1, #16
 800dbda:	bfd8      	it	le
 800dbdc:	fb0e f707 	mulle.w	r7, lr, r7
 800dbe0:	e7f8      	b.n	800dbd4 <_strtod_l+0x25c>
 800dbe2:	2b0f      	cmp	r3, #15
 800dbe4:	bfdc      	itt	le
 800dbe6:	230a      	movle	r3, #10
 800dbe8:	fb03 2707 	mlale	r7, r3, r7, r2
 800dbec:	e7e3      	b.n	800dbb6 <_strtod_l+0x23e>
 800dbee:	2300      	movs	r3, #0
 800dbf0:	930a      	str	r3, [sp, #40]	@ 0x28
 800dbf2:	2301      	movs	r3, #1
 800dbf4:	e77a      	b.n	800daec <_strtod_l+0x174>
 800dbf6:	f04f 0c00 	mov.w	ip, #0
 800dbfa:	1ca2      	adds	r2, r4, #2
 800dbfc:	9219      	str	r2, [sp, #100]	@ 0x64
 800dbfe:	78a2      	ldrb	r2, [r4, #2]
 800dc00:	e782      	b.n	800db08 <_strtod_l+0x190>
 800dc02:	f04f 0c01 	mov.w	ip, #1
 800dc06:	e7f8      	b.n	800dbfa <_strtod_l+0x282>
 800dc08:	08011068 	.word	0x08011068
 800dc0c:	08010eec 	.word	0x08010eec
 800dc10:	7ff00000 	.word	0x7ff00000
 800dc14:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800dc16:	1c51      	adds	r1, r2, #1
 800dc18:	9119      	str	r1, [sp, #100]	@ 0x64
 800dc1a:	7852      	ldrb	r2, [r2, #1]
 800dc1c:	2a30      	cmp	r2, #48	@ 0x30
 800dc1e:	d0f9      	beq.n	800dc14 <_strtod_l+0x29c>
 800dc20:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800dc24:	2908      	cmp	r1, #8
 800dc26:	f63f af75 	bhi.w	800db14 <_strtod_l+0x19c>
 800dc2a:	3a30      	subs	r2, #48	@ 0x30
 800dc2c:	9209      	str	r2, [sp, #36]	@ 0x24
 800dc2e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800dc30:	920f      	str	r2, [sp, #60]	@ 0x3c
 800dc32:	f04f 080a 	mov.w	r8, #10
 800dc36:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800dc38:	1c56      	adds	r6, r2, #1
 800dc3a:	9619      	str	r6, [sp, #100]	@ 0x64
 800dc3c:	7852      	ldrb	r2, [r2, #1]
 800dc3e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800dc42:	f1be 0f09 	cmp.w	lr, #9
 800dc46:	d939      	bls.n	800dcbc <_strtod_l+0x344>
 800dc48:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800dc4a:	1a76      	subs	r6, r6, r1
 800dc4c:	2e08      	cmp	r6, #8
 800dc4e:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800dc52:	dc03      	bgt.n	800dc5c <_strtod_l+0x2e4>
 800dc54:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800dc56:	4588      	cmp	r8, r1
 800dc58:	bfa8      	it	ge
 800dc5a:	4688      	movge	r8, r1
 800dc5c:	f1bc 0f00 	cmp.w	ip, #0
 800dc60:	d001      	beq.n	800dc66 <_strtod_l+0x2ee>
 800dc62:	f1c8 0800 	rsb	r8, r8, #0
 800dc66:	2d00      	cmp	r5, #0
 800dc68:	d14e      	bne.n	800dd08 <_strtod_l+0x390>
 800dc6a:	9908      	ldr	r1, [sp, #32]
 800dc6c:	4308      	orrs	r0, r1
 800dc6e:	f47f aebc 	bne.w	800d9ea <_strtod_l+0x72>
 800dc72:	2b00      	cmp	r3, #0
 800dc74:	f47f aed4 	bne.w	800da20 <_strtod_l+0xa8>
 800dc78:	2a69      	cmp	r2, #105	@ 0x69
 800dc7a:	d028      	beq.n	800dcce <_strtod_l+0x356>
 800dc7c:	dc25      	bgt.n	800dcca <_strtod_l+0x352>
 800dc7e:	2a49      	cmp	r2, #73	@ 0x49
 800dc80:	d025      	beq.n	800dcce <_strtod_l+0x356>
 800dc82:	2a4e      	cmp	r2, #78	@ 0x4e
 800dc84:	f47f aecc 	bne.w	800da20 <_strtod_l+0xa8>
 800dc88:	499a      	ldr	r1, [pc, #616]	@ (800def4 <_strtod_l+0x57c>)
 800dc8a:	a819      	add	r0, sp, #100	@ 0x64
 800dc8c:	f001 fa14 	bl	800f0b8 <__match>
 800dc90:	2800      	cmp	r0, #0
 800dc92:	f43f aec5 	beq.w	800da20 <_strtod_l+0xa8>
 800dc96:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800dc98:	781b      	ldrb	r3, [r3, #0]
 800dc9a:	2b28      	cmp	r3, #40	@ 0x28
 800dc9c:	d12e      	bne.n	800dcfc <_strtod_l+0x384>
 800dc9e:	4996      	ldr	r1, [pc, #600]	@ (800def8 <_strtod_l+0x580>)
 800dca0:	aa1c      	add	r2, sp, #112	@ 0x70
 800dca2:	a819      	add	r0, sp, #100	@ 0x64
 800dca4:	f001 fa1c 	bl	800f0e0 <__hexnan>
 800dca8:	2805      	cmp	r0, #5
 800dcaa:	d127      	bne.n	800dcfc <_strtod_l+0x384>
 800dcac:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800dcae:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800dcb2:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800dcb6:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800dcba:	e696      	b.n	800d9ea <_strtod_l+0x72>
 800dcbc:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800dcbe:	fb08 2101 	mla	r1, r8, r1, r2
 800dcc2:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800dcc6:	9209      	str	r2, [sp, #36]	@ 0x24
 800dcc8:	e7b5      	b.n	800dc36 <_strtod_l+0x2be>
 800dcca:	2a6e      	cmp	r2, #110	@ 0x6e
 800dccc:	e7da      	b.n	800dc84 <_strtod_l+0x30c>
 800dcce:	498b      	ldr	r1, [pc, #556]	@ (800defc <_strtod_l+0x584>)
 800dcd0:	a819      	add	r0, sp, #100	@ 0x64
 800dcd2:	f001 f9f1 	bl	800f0b8 <__match>
 800dcd6:	2800      	cmp	r0, #0
 800dcd8:	f43f aea2 	beq.w	800da20 <_strtod_l+0xa8>
 800dcdc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800dcde:	4988      	ldr	r1, [pc, #544]	@ (800df00 <_strtod_l+0x588>)
 800dce0:	3b01      	subs	r3, #1
 800dce2:	a819      	add	r0, sp, #100	@ 0x64
 800dce4:	9319      	str	r3, [sp, #100]	@ 0x64
 800dce6:	f001 f9e7 	bl	800f0b8 <__match>
 800dcea:	b910      	cbnz	r0, 800dcf2 <_strtod_l+0x37a>
 800dcec:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800dcee:	3301      	adds	r3, #1
 800dcf0:	9319      	str	r3, [sp, #100]	@ 0x64
 800dcf2:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 800df10 <_strtod_l+0x598>
 800dcf6:	f04f 0a00 	mov.w	sl, #0
 800dcfa:	e676      	b.n	800d9ea <_strtod_l+0x72>
 800dcfc:	4881      	ldr	r0, [pc, #516]	@ (800df04 <_strtod_l+0x58c>)
 800dcfe:	f000 feff 	bl	800eb00 <nan>
 800dd02:	ec5b ab10 	vmov	sl, fp, d0
 800dd06:	e670      	b.n	800d9ea <_strtod_l+0x72>
 800dd08:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dd0a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800dd0c:	eba8 0303 	sub.w	r3, r8, r3
 800dd10:	f1b9 0f00 	cmp.w	r9, #0
 800dd14:	bf08      	it	eq
 800dd16:	46a9      	moveq	r9, r5
 800dd18:	2d10      	cmp	r5, #16
 800dd1a:	9309      	str	r3, [sp, #36]	@ 0x24
 800dd1c:	462c      	mov	r4, r5
 800dd1e:	bfa8      	it	ge
 800dd20:	2410      	movge	r4, #16
 800dd22:	f7f2 fbff 	bl	8000524 <__aeabi_ui2d>
 800dd26:	2d09      	cmp	r5, #9
 800dd28:	4682      	mov	sl, r0
 800dd2a:	468b      	mov	fp, r1
 800dd2c:	dc13      	bgt.n	800dd56 <_strtod_l+0x3de>
 800dd2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dd30:	2b00      	cmp	r3, #0
 800dd32:	f43f ae5a 	beq.w	800d9ea <_strtod_l+0x72>
 800dd36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dd38:	dd78      	ble.n	800de2c <_strtod_l+0x4b4>
 800dd3a:	2b16      	cmp	r3, #22
 800dd3c:	dc5f      	bgt.n	800ddfe <_strtod_l+0x486>
 800dd3e:	4972      	ldr	r1, [pc, #456]	@ (800df08 <_strtod_l+0x590>)
 800dd40:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800dd44:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dd48:	4652      	mov	r2, sl
 800dd4a:	465b      	mov	r3, fp
 800dd4c:	f7f2 fc64 	bl	8000618 <__aeabi_dmul>
 800dd50:	4682      	mov	sl, r0
 800dd52:	468b      	mov	fp, r1
 800dd54:	e649      	b.n	800d9ea <_strtod_l+0x72>
 800dd56:	4b6c      	ldr	r3, [pc, #432]	@ (800df08 <_strtod_l+0x590>)
 800dd58:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800dd5c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800dd60:	f7f2 fc5a 	bl	8000618 <__aeabi_dmul>
 800dd64:	4682      	mov	sl, r0
 800dd66:	4638      	mov	r0, r7
 800dd68:	468b      	mov	fp, r1
 800dd6a:	f7f2 fbdb 	bl	8000524 <__aeabi_ui2d>
 800dd6e:	4602      	mov	r2, r0
 800dd70:	460b      	mov	r3, r1
 800dd72:	4650      	mov	r0, sl
 800dd74:	4659      	mov	r1, fp
 800dd76:	f7f2 fa99 	bl	80002ac <__adddf3>
 800dd7a:	2d0f      	cmp	r5, #15
 800dd7c:	4682      	mov	sl, r0
 800dd7e:	468b      	mov	fp, r1
 800dd80:	ddd5      	ble.n	800dd2e <_strtod_l+0x3b6>
 800dd82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dd84:	1b2c      	subs	r4, r5, r4
 800dd86:	441c      	add	r4, r3
 800dd88:	2c00      	cmp	r4, #0
 800dd8a:	f340 8093 	ble.w	800deb4 <_strtod_l+0x53c>
 800dd8e:	f014 030f 	ands.w	r3, r4, #15
 800dd92:	d00a      	beq.n	800ddaa <_strtod_l+0x432>
 800dd94:	495c      	ldr	r1, [pc, #368]	@ (800df08 <_strtod_l+0x590>)
 800dd96:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800dd9a:	4652      	mov	r2, sl
 800dd9c:	465b      	mov	r3, fp
 800dd9e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dda2:	f7f2 fc39 	bl	8000618 <__aeabi_dmul>
 800dda6:	4682      	mov	sl, r0
 800dda8:	468b      	mov	fp, r1
 800ddaa:	f034 040f 	bics.w	r4, r4, #15
 800ddae:	d073      	beq.n	800de98 <_strtod_l+0x520>
 800ddb0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800ddb4:	dd49      	ble.n	800de4a <_strtod_l+0x4d2>
 800ddb6:	2400      	movs	r4, #0
 800ddb8:	46a0      	mov	r8, r4
 800ddba:	940b      	str	r4, [sp, #44]	@ 0x2c
 800ddbc:	46a1      	mov	r9, r4
 800ddbe:	9a05      	ldr	r2, [sp, #20]
 800ddc0:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 800df10 <_strtod_l+0x598>
 800ddc4:	2322      	movs	r3, #34	@ 0x22
 800ddc6:	6013      	str	r3, [r2, #0]
 800ddc8:	f04f 0a00 	mov.w	sl, #0
 800ddcc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	f43f ae0b 	beq.w	800d9ea <_strtod_l+0x72>
 800ddd4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ddd6:	9805      	ldr	r0, [sp, #20]
 800ddd8:	f001 fb1e 	bl	800f418 <_Bfree>
 800dddc:	9805      	ldr	r0, [sp, #20]
 800ddde:	4649      	mov	r1, r9
 800dde0:	f001 fb1a 	bl	800f418 <_Bfree>
 800dde4:	9805      	ldr	r0, [sp, #20]
 800dde6:	4641      	mov	r1, r8
 800dde8:	f001 fb16 	bl	800f418 <_Bfree>
 800ddec:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ddee:	9805      	ldr	r0, [sp, #20]
 800ddf0:	f001 fb12 	bl	800f418 <_Bfree>
 800ddf4:	9805      	ldr	r0, [sp, #20]
 800ddf6:	4621      	mov	r1, r4
 800ddf8:	f001 fb0e 	bl	800f418 <_Bfree>
 800ddfc:	e5f5      	b.n	800d9ea <_strtod_l+0x72>
 800ddfe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800de00:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800de04:	4293      	cmp	r3, r2
 800de06:	dbbc      	blt.n	800dd82 <_strtod_l+0x40a>
 800de08:	4c3f      	ldr	r4, [pc, #252]	@ (800df08 <_strtod_l+0x590>)
 800de0a:	f1c5 050f 	rsb	r5, r5, #15
 800de0e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800de12:	4652      	mov	r2, sl
 800de14:	465b      	mov	r3, fp
 800de16:	e9d1 0100 	ldrd	r0, r1, [r1]
 800de1a:	f7f2 fbfd 	bl	8000618 <__aeabi_dmul>
 800de1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800de20:	1b5d      	subs	r5, r3, r5
 800de22:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800de26:	e9d4 2300 	ldrd	r2, r3, [r4]
 800de2a:	e78f      	b.n	800dd4c <_strtod_l+0x3d4>
 800de2c:	3316      	adds	r3, #22
 800de2e:	dba8      	blt.n	800dd82 <_strtod_l+0x40a>
 800de30:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800de32:	eba3 0808 	sub.w	r8, r3, r8
 800de36:	4b34      	ldr	r3, [pc, #208]	@ (800df08 <_strtod_l+0x590>)
 800de38:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800de3c:	e9d8 2300 	ldrd	r2, r3, [r8]
 800de40:	4650      	mov	r0, sl
 800de42:	4659      	mov	r1, fp
 800de44:	f7f2 fd12 	bl	800086c <__aeabi_ddiv>
 800de48:	e782      	b.n	800dd50 <_strtod_l+0x3d8>
 800de4a:	2300      	movs	r3, #0
 800de4c:	4f2f      	ldr	r7, [pc, #188]	@ (800df0c <_strtod_l+0x594>)
 800de4e:	1124      	asrs	r4, r4, #4
 800de50:	4650      	mov	r0, sl
 800de52:	4659      	mov	r1, fp
 800de54:	461e      	mov	r6, r3
 800de56:	2c01      	cmp	r4, #1
 800de58:	dc21      	bgt.n	800de9e <_strtod_l+0x526>
 800de5a:	b10b      	cbz	r3, 800de60 <_strtod_l+0x4e8>
 800de5c:	4682      	mov	sl, r0
 800de5e:	468b      	mov	fp, r1
 800de60:	492a      	ldr	r1, [pc, #168]	@ (800df0c <_strtod_l+0x594>)
 800de62:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800de66:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800de6a:	4652      	mov	r2, sl
 800de6c:	465b      	mov	r3, fp
 800de6e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800de72:	f7f2 fbd1 	bl	8000618 <__aeabi_dmul>
 800de76:	4b26      	ldr	r3, [pc, #152]	@ (800df10 <_strtod_l+0x598>)
 800de78:	460a      	mov	r2, r1
 800de7a:	400b      	ands	r3, r1
 800de7c:	4925      	ldr	r1, [pc, #148]	@ (800df14 <_strtod_l+0x59c>)
 800de7e:	428b      	cmp	r3, r1
 800de80:	4682      	mov	sl, r0
 800de82:	d898      	bhi.n	800ddb6 <_strtod_l+0x43e>
 800de84:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800de88:	428b      	cmp	r3, r1
 800de8a:	bf86      	itte	hi
 800de8c:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 800df18 <_strtod_l+0x5a0>
 800de90:	f04f 3aff 	movhi.w	sl, #4294967295
 800de94:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800de98:	2300      	movs	r3, #0
 800de9a:	9308      	str	r3, [sp, #32]
 800de9c:	e076      	b.n	800df8c <_strtod_l+0x614>
 800de9e:	07e2      	lsls	r2, r4, #31
 800dea0:	d504      	bpl.n	800deac <_strtod_l+0x534>
 800dea2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dea6:	f7f2 fbb7 	bl	8000618 <__aeabi_dmul>
 800deaa:	2301      	movs	r3, #1
 800deac:	3601      	adds	r6, #1
 800deae:	1064      	asrs	r4, r4, #1
 800deb0:	3708      	adds	r7, #8
 800deb2:	e7d0      	b.n	800de56 <_strtod_l+0x4de>
 800deb4:	d0f0      	beq.n	800de98 <_strtod_l+0x520>
 800deb6:	4264      	negs	r4, r4
 800deb8:	f014 020f 	ands.w	r2, r4, #15
 800debc:	d00a      	beq.n	800ded4 <_strtod_l+0x55c>
 800debe:	4b12      	ldr	r3, [pc, #72]	@ (800df08 <_strtod_l+0x590>)
 800dec0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800dec4:	4650      	mov	r0, sl
 800dec6:	4659      	mov	r1, fp
 800dec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800decc:	f7f2 fcce 	bl	800086c <__aeabi_ddiv>
 800ded0:	4682      	mov	sl, r0
 800ded2:	468b      	mov	fp, r1
 800ded4:	1124      	asrs	r4, r4, #4
 800ded6:	d0df      	beq.n	800de98 <_strtod_l+0x520>
 800ded8:	2c1f      	cmp	r4, #31
 800deda:	dd1f      	ble.n	800df1c <_strtod_l+0x5a4>
 800dedc:	2400      	movs	r4, #0
 800dede:	46a0      	mov	r8, r4
 800dee0:	940b      	str	r4, [sp, #44]	@ 0x2c
 800dee2:	46a1      	mov	r9, r4
 800dee4:	9a05      	ldr	r2, [sp, #20]
 800dee6:	2322      	movs	r3, #34	@ 0x22
 800dee8:	f04f 0a00 	mov.w	sl, #0
 800deec:	f04f 0b00 	mov.w	fp, #0
 800def0:	6013      	str	r3, [r2, #0]
 800def2:	e76b      	b.n	800ddcc <_strtod_l+0x454>
 800def4:	08010ef7 	.word	0x08010ef7
 800def8:	08011054 	.word	0x08011054
 800defc:	08010eee 	.word	0x08010eee
 800df00:	08010ef1 	.word	0x08010ef1
 800df04:	08011051 	.word	0x08011051
 800df08:	080111e0 	.word	0x080111e0
 800df0c:	080111b8 	.word	0x080111b8
 800df10:	7ff00000 	.word	0x7ff00000
 800df14:	7ca00000 	.word	0x7ca00000
 800df18:	7fefffff 	.word	0x7fefffff
 800df1c:	f014 0310 	ands.w	r3, r4, #16
 800df20:	bf18      	it	ne
 800df22:	236a      	movne	r3, #106	@ 0x6a
 800df24:	4ea9      	ldr	r6, [pc, #676]	@ (800e1cc <_strtod_l+0x854>)
 800df26:	9308      	str	r3, [sp, #32]
 800df28:	4650      	mov	r0, sl
 800df2a:	4659      	mov	r1, fp
 800df2c:	2300      	movs	r3, #0
 800df2e:	07e7      	lsls	r7, r4, #31
 800df30:	d504      	bpl.n	800df3c <_strtod_l+0x5c4>
 800df32:	e9d6 2300 	ldrd	r2, r3, [r6]
 800df36:	f7f2 fb6f 	bl	8000618 <__aeabi_dmul>
 800df3a:	2301      	movs	r3, #1
 800df3c:	1064      	asrs	r4, r4, #1
 800df3e:	f106 0608 	add.w	r6, r6, #8
 800df42:	d1f4      	bne.n	800df2e <_strtod_l+0x5b6>
 800df44:	b10b      	cbz	r3, 800df4a <_strtod_l+0x5d2>
 800df46:	4682      	mov	sl, r0
 800df48:	468b      	mov	fp, r1
 800df4a:	9b08      	ldr	r3, [sp, #32]
 800df4c:	b1b3      	cbz	r3, 800df7c <_strtod_l+0x604>
 800df4e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800df52:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800df56:	2b00      	cmp	r3, #0
 800df58:	4659      	mov	r1, fp
 800df5a:	dd0f      	ble.n	800df7c <_strtod_l+0x604>
 800df5c:	2b1f      	cmp	r3, #31
 800df5e:	dd56      	ble.n	800e00e <_strtod_l+0x696>
 800df60:	2b34      	cmp	r3, #52	@ 0x34
 800df62:	bfde      	ittt	le
 800df64:	f04f 33ff 	movle.w	r3, #4294967295
 800df68:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800df6c:	4093      	lslle	r3, r2
 800df6e:	f04f 0a00 	mov.w	sl, #0
 800df72:	bfcc      	ite	gt
 800df74:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800df78:	ea03 0b01 	andle.w	fp, r3, r1
 800df7c:	2200      	movs	r2, #0
 800df7e:	2300      	movs	r3, #0
 800df80:	4650      	mov	r0, sl
 800df82:	4659      	mov	r1, fp
 800df84:	f7f2 fdb0 	bl	8000ae8 <__aeabi_dcmpeq>
 800df88:	2800      	cmp	r0, #0
 800df8a:	d1a7      	bne.n	800dedc <_strtod_l+0x564>
 800df8c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800df8e:	9300      	str	r3, [sp, #0]
 800df90:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800df92:	9805      	ldr	r0, [sp, #20]
 800df94:	462b      	mov	r3, r5
 800df96:	464a      	mov	r2, r9
 800df98:	f001 faa6 	bl	800f4e8 <__s2b>
 800df9c:	900b      	str	r0, [sp, #44]	@ 0x2c
 800df9e:	2800      	cmp	r0, #0
 800dfa0:	f43f af09 	beq.w	800ddb6 <_strtod_l+0x43e>
 800dfa4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dfa6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dfa8:	2a00      	cmp	r2, #0
 800dfaa:	eba3 0308 	sub.w	r3, r3, r8
 800dfae:	bfa8      	it	ge
 800dfb0:	2300      	movge	r3, #0
 800dfb2:	9312      	str	r3, [sp, #72]	@ 0x48
 800dfb4:	2400      	movs	r4, #0
 800dfb6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800dfba:	9316      	str	r3, [sp, #88]	@ 0x58
 800dfbc:	46a0      	mov	r8, r4
 800dfbe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dfc0:	9805      	ldr	r0, [sp, #20]
 800dfc2:	6859      	ldr	r1, [r3, #4]
 800dfc4:	f001 f9e8 	bl	800f398 <_Balloc>
 800dfc8:	4681      	mov	r9, r0
 800dfca:	2800      	cmp	r0, #0
 800dfcc:	f43f aef7 	beq.w	800ddbe <_strtod_l+0x446>
 800dfd0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dfd2:	691a      	ldr	r2, [r3, #16]
 800dfd4:	3202      	adds	r2, #2
 800dfd6:	f103 010c 	add.w	r1, r3, #12
 800dfda:	0092      	lsls	r2, r2, #2
 800dfdc:	300c      	adds	r0, #12
 800dfde:	f000 fd80 	bl	800eae2 <memcpy>
 800dfe2:	ec4b ab10 	vmov	d0, sl, fp
 800dfe6:	9805      	ldr	r0, [sp, #20]
 800dfe8:	aa1c      	add	r2, sp, #112	@ 0x70
 800dfea:	a91b      	add	r1, sp, #108	@ 0x6c
 800dfec:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800dff0:	f001 fdae 	bl	800fb50 <__d2b>
 800dff4:	901a      	str	r0, [sp, #104]	@ 0x68
 800dff6:	2800      	cmp	r0, #0
 800dff8:	f43f aee1 	beq.w	800ddbe <_strtod_l+0x446>
 800dffc:	9805      	ldr	r0, [sp, #20]
 800dffe:	2101      	movs	r1, #1
 800e000:	f001 fb08 	bl	800f614 <__i2b>
 800e004:	4680      	mov	r8, r0
 800e006:	b948      	cbnz	r0, 800e01c <_strtod_l+0x6a4>
 800e008:	f04f 0800 	mov.w	r8, #0
 800e00c:	e6d7      	b.n	800ddbe <_strtod_l+0x446>
 800e00e:	f04f 32ff 	mov.w	r2, #4294967295
 800e012:	fa02 f303 	lsl.w	r3, r2, r3
 800e016:	ea03 0a0a 	and.w	sl, r3, sl
 800e01a:	e7af      	b.n	800df7c <_strtod_l+0x604>
 800e01c:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800e01e:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800e020:	2d00      	cmp	r5, #0
 800e022:	bfab      	itete	ge
 800e024:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800e026:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800e028:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800e02a:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800e02c:	bfac      	ite	ge
 800e02e:	18ef      	addge	r7, r5, r3
 800e030:	1b5e      	sublt	r6, r3, r5
 800e032:	9b08      	ldr	r3, [sp, #32]
 800e034:	1aed      	subs	r5, r5, r3
 800e036:	4415      	add	r5, r2
 800e038:	4b65      	ldr	r3, [pc, #404]	@ (800e1d0 <_strtod_l+0x858>)
 800e03a:	3d01      	subs	r5, #1
 800e03c:	429d      	cmp	r5, r3
 800e03e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800e042:	da50      	bge.n	800e0e6 <_strtod_l+0x76e>
 800e044:	1b5b      	subs	r3, r3, r5
 800e046:	2b1f      	cmp	r3, #31
 800e048:	eba2 0203 	sub.w	r2, r2, r3
 800e04c:	f04f 0101 	mov.w	r1, #1
 800e050:	dc3d      	bgt.n	800e0ce <_strtod_l+0x756>
 800e052:	fa01 f303 	lsl.w	r3, r1, r3
 800e056:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e058:	2300      	movs	r3, #0
 800e05a:	9310      	str	r3, [sp, #64]	@ 0x40
 800e05c:	18bd      	adds	r5, r7, r2
 800e05e:	9b08      	ldr	r3, [sp, #32]
 800e060:	42af      	cmp	r7, r5
 800e062:	4416      	add	r6, r2
 800e064:	441e      	add	r6, r3
 800e066:	463b      	mov	r3, r7
 800e068:	bfa8      	it	ge
 800e06a:	462b      	movge	r3, r5
 800e06c:	42b3      	cmp	r3, r6
 800e06e:	bfa8      	it	ge
 800e070:	4633      	movge	r3, r6
 800e072:	2b00      	cmp	r3, #0
 800e074:	bfc2      	ittt	gt
 800e076:	1aed      	subgt	r5, r5, r3
 800e078:	1af6      	subgt	r6, r6, r3
 800e07a:	1aff      	subgt	r7, r7, r3
 800e07c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e07e:	2b00      	cmp	r3, #0
 800e080:	dd16      	ble.n	800e0b0 <_strtod_l+0x738>
 800e082:	4641      	mov	r1, r8
 800e084:	9805      	ldr	r0, [sp, #20]
 800e086:	461a      	mov	r2, r3
 800e088:	f001 fb7c 	bl	800f784 <__pow5mult>
 800e08c:	4680      	mov	r8, r0
 800e08e:	2800      	cmp	r0, #0
 800e090:	d0ba      	beq.n	800e008 <_strtod_l+0x690>
 800e092:	4601      	mov	r1, r0
 800e094:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800e096:	9805      	ldr	r0, [sp, #20]
 800e098:	f001 fad2 	bl	800f640 <__multiply>
 800e09c:	900a      	str	r0, [sp, #40]	@ 0x28
 800e09e:	2800      	cmp	r0, #0
 800e0a0:	f43f ae8d 	beq.w	800ddbe <_strtod_l+0x446>
 800e0a4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e0a6:	9805      	ldr	r0, [sp, #20]
 800e0a8:	f001 f9b6 	bl	800f418 <_Bfree>
 800e0ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e0ae:	931a      	str	r3, [sp, #104]	@ 0x68
 800e0b0:	2d00      	cmp	r5, #0
 800e0b2:	dc1d      	bgt.n	800e0f0 <_strtod_l+0x778>
 800e0b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e0b6:	2b00      	cmp	r3, #0
 800e0b8:	dd23      	ble.n	800e102 <_strtod_l+0x78a>
 800e0ba:	4649      	mov	r1, r9
 800e0bc:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800e0be:	9805      	ldr	r0, [sp, #20]
 800e0c0:	f001 fb60 	bl	800f784 <__pow5mult>
 800e0c4:	4681      	mov	r9, r0
 800e0c6:	b9e0      	cbnz	r0, 800e102 <_strtod_l+0x78a>
 800e0c8:	f04f 0900 	mov.w	r9, #0
 800e0cc:	e677      	b.n	800ddbe <_strtod_l+0x446>
 800e0ce:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800e0d2:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800e0d6:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800e0da:	35e2      	adds	r5, #226	@ 0xe2
 800e0dc:	fa01 f305 	lsl.w	r3, r1, r5
 800e0e0:	9310      	str	r3, [sp, #64]	@ 0x40
 800e0e2:	9113      	str	r1, [sp, #76]	@ 0x4c
 800e0e4:	e7ba      	b.n	800e05c <_strtod_l+0x6e4>
 800e0e6:	2300      	movs	r3, #0
 800e0e8:	9310      	str	r3, [sp, #64]	@ 0x40
 800e0ea:	2301      	movs	r3, #1
 800e0ec:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e0ee:	e7b5      	b.n	800e05c <_strtod_l+0x6e4>
 800e0f0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e0f2:	9805      	ldr	r0, [sp, #20]
 800e0f4:	462a      	mov	r2, r5
 800e0f6:	f001 fb9f 	bl	800f838 <__lshift>
 800e0fa:	901a      	str	r0, [sp, #104]	@ 0x68
 800e0fc:	2800      	cmp	r0, #0
 800e0fe:	d1d9      	bne.n	800e0b4 <_strtod_l+0x73c>
 800e100:	e65d      	b.n	800ddbe <_strtod_l+0x446>
 800e102:	2e00      	cmp	r6, #0
 800e104:	dd07      	ble.n	800e116 <_strtod_l+0x79e>
 800e106:	4649      	mov	r1, r9
 800e108:	9805      	ldr	r0, [sp, #20]
 800e10a:	4632      	mov	r2, r6
 800e10c:	f001 fb94 	bl	800f838 <__lshift>
 800e110:	4681      	mov	r9, r0
 800e112:	2800      	cmp	r0, #0
 800e114:	d0d8      	beq.n	800e0c8 <_strtod_l+0x750>
 800e116:	2f00      	cmp	r7, #0
 800e118:	dd08      	ble.n	800e12c <_strtod_l+0x7b4>
 800e11a:	4641      	mov	r1, r8
 800e11c:	9805      	ldr	r0, [sp, #20]
 800e11e:	463a      	mov	r2, r7
 800e120:	f001 fb8a 	bl	800f838 <__lshift>
 800e124:	4680      	mov	r8, r0
 800e126:	2800      	cmp	r0, #0
 800e128:	f43f ae49 	beq.w	800ddbe <_strtod_l+0x446>
 800e12c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e12e:	9805      	ldr	r0, [sp, #20]
 800e130:	464a      	mov	r2, r9
 800e132:	f001 fc09 	bl	800f948 <__mdiff>
 800e136:	4604      	mov	r4, r0
 800e138:	2800      	cmp	r0, #0
 800e13a:	f43f ae40 	beq.w	800ddbe <_strtod_l+0x446>
 800e13e:	68c3      	ldr	r3, [r0, #12]
 800e140:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e142:	2300      	movs	r3, #0
 800e144:	60c3      	str	r3, [r0, #12]
 800e146:	4641      	mov	r1, r8
 800e148:	f001 fbe2 	bl	800f910 <__mcmp>
 800e14c:	2800      	cmp	r0, #0
 800e14e:	da45      	bge.n	800e1dc <_strtod_l+0x864>
 800e150:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e152:	ea53 030a 	orrs.w	r3, r3, sl
 800e156:	d16b      	bne.n	800e230 <_strtod_l+0x8b8>
 800e158:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e15c:	2b00      	cmp	r3, #0
 800e15e:	d167      	bne.n	800e230 <_strtod_l+0x8b8>
 800e160:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e164:	0d1b      	lsrs	r3, r3, #20
 800e166:	051b      	lsls	r3, r3, #20
 800e168:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800e16c:	d960      	bls.n	800e230 <_strtod_l+0x8b8>
 800e16e:	6963      	ldr	r3, [r4, #20]
 800e170:	b913      	cbnz	r3, 800e178 <_strtod_l+0x800>
 800e172:	6923      	ldr	r3, [r4, #16]
 800e174:	2b01      	cmp	r3, #1
 800e176:	dd5b      	ble.n	800e230 <_strtod_l+0x8b8>
 800e178:	4621      	mov	r1, r4
 800e17a:	2201      	movs	r2, #1
 800e17c:	9805      	ldr	r0, [sp, #20]
 800e17e:	f001 fb5b 	bl	800f838 <__lshift>
 800e182:	4641      	mov	r1, r8
 800e184:	4604      	mov	r4, r0
 800e186:	f001 fbc3 	bl	800f910 <__mcmp>
 800e18a:	2800      	cmp	r0, #0
 800e18c:	dd50      	ble.n	800e230 <_strtod_l+0x8b8>
 800e18e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e192:	9a08      	ldr	r2, [sp, #32]
 800e194:	0d1b      	lsrs	r3, r3, #20
 800e196:	051b      	lsls	r3, r3, #20
 800e198:	2a00      	cmp	r2, #0
 800e19a:	d06a      	beq.n	800e272 <_strtod_l+0x8fa>
 800e19c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800e1a0:	d867      	bhi.n	800e272 <_strtod_l+0x8fa>
 800e1a2:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800e1a6:	f67f ae9d 	bls.w	800dee4 <_strtod_l+0x56c>
 800e1aa:	4b0a      	ldr	r3, [pc, #40]	@ (800e1d4 <_strtod_l+0x85c>)
 800e1ac:	4650      	mov	r0, sl
 800e1ae:	4659      	mov	r1, fp
 800e1b0:	2200      	movs	r2, #0
 800e1b2:	f7f2 fa31 	bl	8000618 <__aeabi_dmul>
 800e1b6:	4b08      	ldr	r3, [pc, #32]	@ (800e1d8 <_strtod_l+0x860>)
 800e1b8:	400b      	ands	r3, r1
 800e1ba:	4682      	mov	sl, r0
 800e1bc:	468b      	mov	fp, r1
 800e1be:	2b00      	cmp	r3, #0
 800e1c0:	f47f ae08 	bne.w	800ddd4 <_strtod_l+0x45c>
 800e1c4:	9a05      	ldr	r2, [sp, #20]
 800e1c6:	2322      	movs	r3, #34	@ 0x22
 800e1c8:	6013      	str	r3, [r2, #0]
 800e1ca:	e603      	b.n	800ddd4 <_strtod_l+0x45c>
 800e1cc:	08011080 	.word	0x08011080
 800e1d0:	fffffc02 	.word	0xfffffc02
 800e1d4:	39500000 	.word	0x39500000
 800e1d8:	7ff00000 	.word	0x7ff00000
 800e1dc:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800e1e0:	d165      	bne.n	800e2ae <_strtod_l+0x936>
 800e1e2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800e1e4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e1e8:	b35a      	cbz	r2, 800e242 <_strtod_l+0x8ca>
 800e1ea:	4a9f      	ldr	r2, [pc, #636]	@ (800e468 <_strtod_l+0xaf0>)
 800e1ec:	4293      	cmp	r3, r2
 800e1ee:	d12b      	bne.n	800e248 <_strtod_l+0x8d0>
 800e1f0:	9b08      	ldr	r3, [sp, #32]
 800e1f2:	4651      	mov	r1, sl
 800e1f4:	b303      	cbz	r3, 800e238 <_strtod_l+0x8c0>
 800e1f6:	4b9d      	ldr	r3, [pc, #628]	@ (800e46c <_strtod_l+0xaf4>)
 800e1f8:	465a      	mov	r2, fp
 800e1fa:	4013      	ands	r3, r2
 800e1fc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800e200:	f04f 32ff 	mov.w	r2, #4294967295
 800e204:	d81b      	bhi.n	800e23e <_strtod_l+0x8c6>
 800e206:	0d1b      	lsrs	r3, r3, #20
 800e208:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800e20c:	fa02 f303 	lsl.w	r3, r2, r3
 800e210:	4299      	cmp	r1, r3
 800e212:	d119      	bne.n	800e248 <_strtod_l+0x8d0>
 800e214:	4b96      	ldr	r3, [pc, #600]	@ (800e470 <_strtod_l+0xaf8>)
 800e216:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e218:	429a      	cmp	r2, r3
 800e21a:	d102      	bne.n	800e222 <_strtod_l+0x8aa>
 800e21c:	3101      	adds	r1, #1
 800e21e:	f43f adce 	beq.w	800ddbe <_strtod_l+0x446>
 800e222:	4b92      	ldr	r3, [pc, #584]	@ (800e46c <_strtod_l+0xaf4>)
 800e224:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e226:	401a      	ands	r2, r3
 800e228:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800e22c:	f04f 0a00 	mov.w	sl, #0
 800e230:	9b08      	ldr	r3, [sp, #32]
 800e232:	2b00      	cmp	r3, #0
 800e234:	d1b9      	bne.n	800e1aa <_strtod_l+0x832>
 800e236:	e5cd      	b.n	800ddd4 <_strtod_l+0x45c>
 800e238:	f04f 33ff 	mov.w	r3, #4294967295
 800e23c:	e7e8      	b.n	800e210 <_strtod_l+0x898>
 800e23e:	4613      	mov	r3, r2
 800e240:	e7e6      	b.n	800e210 <_strtod_l+0x898>
 800e242:	ea53 030a 	orrs.w	r3, r3, sl
 800e246:	d0a2      	beq.n	800e18e <_strtod_l+0x816>
 800e248:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e24a:	b1db      	cbz	r3, 800e284 <_strtod_l+0x90c>
 800e24c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e24e:	4213      	tst	r3, r2
 800e250:	d0ee      	beq.n	800e230 <_strtod_l+0x8b8>
 800e252:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e254:	9a08      	ldr	r2, [sp, #32]
 800e256:	4650      	mov	r0, sl
 800e258:	4659      	mov	r1, fp
 800e25a:	b1bb      	cbz	r3, 800e28c <_strtod_l+0x914>
 800e25c:	f7ff fb6b 	bl	800d936 <sulp>
 800e260:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e264:	ec53 2b10 	vmov	r2, r3, d0
 800e268:	f7f2 f820 	bl	80002ac <__adddf3>
 800e26c:	4682      	mov	sl, r0
 800e26e:	468b      	mov	fp, r1
 800e270:	e7de      	b.n	800e230 <_strtod_l+0x8b8>
 800e272:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800e276:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800e27a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800e27e:	f04f 3aff 	mov.w	sl, #4294967295
 800e282:	e7d5      	b.n	800e230 <_strtod_l+0x8b8>
 800e284:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800e286:	ea13 0f0a 	tst.w	r3, sl
 800e28a:	e7e1      	b.n	800e250 <_strtod_l+0x8d8>
 800e28c:	f7ff fb53 	bl	800d936 <sulp>
 800e290:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e294:	ec53 2b10 	vmov	r2, r3, d0
 800e298:	f7f2 f806 	bl	80002a8 <__aeabi_dsub>
 800e29c:	2200      	movs	r2, #0
 800e29e:	2300      	movs	r3, #0
 800e2a0:	4682      	mov	sl, r0
 800e2a2:	468b      	mov	fp, r1
 800e2a4:	f7f2 fc20 	bl	8000ae8 <__aeabi_dcmpeq>
 800e2a8:	2800      	cmp	r0, #0
 800e2aa:	d0c1      	beq.n	800e230 <_strtod_l+0x8b8>
 800e2ac:	e61a      	b.n	800dee4 <_strtod_l+0x56c>
 800e2ae:	4641      	mov	r1, r8
 800e2b0:	4620      	mov	r0, r4
 800e2b2:	f001 fca5 	bl	800fc00 <__ratio>
 800e2b6:	ec57 6b10 	vmov	r6, r7, d0
 800e2ba:	2200      	movs	r2, #0
 800e2bc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800e2c0:	4630      	mov	r0, r6
 800e2c2:	4639      	mov	r1, r7
 800e2c4:	f7f2 fc24 	bl	8000b10 <__aeabi_dcmple>
 800e2c8:	2800      	cmp	r0, #0
 800e2ca:	d06f      	beq.n	800e3ac <_strtod_l+0xa34>
 800e2cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e2ce:	2b00      	cmp	r3, #0
 800e2d0:	d17a      	bne.n	800e3c8 <_strtod_l+0xa50>
 800e2d2:	f1ba 0f00 	cmp.w	sl, #0
 800e2d6:	d158      	bne.n	800e38a <_strtod_l+0xa12>
 800e2d8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e2da:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	d15a      	bne.n	800e398 <_strtod_l+0xa20>
 800e2e2:	4b64      	ldr	r3, [pc, #400]	@ (800e474 <_strtod_l+0xafc>)
 800e2e4:	2200      	movs	r2, #0
 800e2e6:	4630      	mov	r0, r6
 800e2e8:	4639      	mov	r1, r7
 800e2ea:	f7f2 fc07 	bl	8000afc <__aeabi_dcmplt>
 800e2ee:	2800      	cmp	r0, #0
 800e2f0:	d159      	bne.n	800e3a6 <_strtod_l+0xa2e>
 800e2f2:	4630      	mov	r0, r6
 800e2f4:	4639      	mov	r1, r7
 800e2f6:	4b60      	ldr	r3, [pc, #384]	@ (800e478 <_strtod_l+0xb00>)
 800e2f8:	2200      	movs	r2, #0
 800e2fa:	f7f2 f98d 	bl	8000618 <__aeabi_dmul>
 800e2fe:	4606      	mov	r6, r0
 800e300:	460f      	mov	r7, r1
 800e302:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800e306:	9606      	str	r6, [sp, #24]
 800e308:	9307      	str	r3, [sp, #28]
 800e30a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e30e:	4d57      	ldr	r5, [pc, #348]	@ (800e46c <_strtod_l+0xaf4>)
 800e310:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800e314:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e316:	401d      	ands	r5, r3
 800e318:	4b58      	ldr	r3, [pc, #352]	@ (800e47c <_strtod_l+0xb04>)
 800e31a:	429d      	cmp	r5, r3
 800e31c:	f040 80b2 	bne.w	800e484 <_strtod_l+0xb0c>
 800e320:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e322:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800e326:	ec4b ab10 	vmov	d0, sl, fp
 800e32a:	f001 fba1 	bl	800fa70 <__ulp>
 800e32e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e332:	ec51 0b10 	vmov	r0, r1, d0
 800e336:	f7f2 f96f 	bl	8000618 <__aeabi_dmul>
 800e33a:	4652      	mov	r2, sl
 800e33c:	465b      	mov	r3, fp
 800e33e:	f7f1 ffb5 	bl	80002ac <__adddf3>
 800e342:	460b      	mov	r3, r1
 800e344:	4949      	ldr	r1, [pc, #292]	@ (800e46c <_strtod_l+0xaf4>)
 800e346:	4a4e      	ldr	r2, [pc, #312]	@ (800e480 <_strtod_l+0xb08>)
 800e348:	4019      	ands	r1, r3
 800e34a:	4291      	cmp	r1, r2
 800e34c:	4682      	mov	sl, r0
 800e34e:	d942      	bls.n	800e3d6 <_strtod_l+0xa5e>
 800e350:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800e352:	4b47      	ldr	r3, [pc, #284]	@ (800e470 <_strtod_l+0xaf8>)
 800e354:	429a      	cmp	r2, r3
 800e356:	d103      	bne.n	800e360 <_strtod_l+0x9e8>
 800e358:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e35a:	3301      	adds	r3, #1
 800e35c:	f43f ad2f 	beq.w	800ddbe <_strtod_l+0x446>
 800e360:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800e470 <_strtod_l+0xaf8>
 800e364:	f04f 3aff 	mov.w	sl, #4294967295
 800e368:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e36a:	9805      	ldr	r0, [sp, #20]
 800e36c:	f001 f854 	bl	800f418 <_Bfree>
 800e370:	9805      	ldr	r0, [sp, #20]
 800e372:	4649      	mov	r1, r9
 800e374:	f001 f850 	bl	800f418 <_Bfree>
 800e378:	9805      	ldr	r0, [sp, #20]
 800e37a:	4641      	mov	r1, r8
 800e37c:	f001 f84c 	bl	800f418 <_Bfree>
 800e380:	9805      	ldr	r0, [sp, #20]
 800e382:	4621      	mov	r1, r4
 800e384:	f001 f848 	bl	800f418 <_Bfree>
 800e388:	e619      	b.n	800dfbe <_strtod_l+0x646>
 800e38a:	f1ba 0f01 	cmp.w	sl, #1
 800e38e:	d103      	bne.n	800e398 <_strtod_l+0xa20>
 800e390:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e392:	2b00      	cmp	r3, #0
 800e394:	f43f ada6 	beq.w	800dee4 <_strtod_l+0x56c>
 800e398:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800e448 <_strtod_l+0xad0>
 800e39c:	4f35      	ldr	r7, [pc, #212]	@ (800e474 <_strtod_l+0xafc>)
 800e39e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800e3a2:	2600      	movs	r6, #0
 800e3a4:	e7b1      	b.n	800e30a <_strtod_l+0x992>
 800e3a6:	4f34      	ldr	r7, [pc, #208]	@ (800e478 <_strtod_l+0xb00>)
 800e3a8:	2600      	movs	r6, #0
 800e3aa:	e7aa      	b.n	800e302 <_strtod_l+0x98a>
 800e3ac:	4b32      	ldr	r3, [pc, #200]	@ (800e478 <_strtod_l+0xb00>)
 800e3ae:	4630      	mov	r0, r6
 800e3b0:	4639      	mov	r1, r7
 800e3b2:	2200      	movs	r2, #0
 800e3b4:	f7f2 f930 	bl	8000618 <__aeabi_dmul>
 800e3b8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e3ba:	4606      	mov	r6, r0
 800e3bc:	460f      	mov	r7, r1
 800e3be:	2b00      	cmp	r3, #0
 800e3c0:	d09f      	beq.n	800e302 <_strtod_l+0x98a>
 800e3c2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800e3c6:	e7a0      	b.n	800e30a <_strtod_l+0x992>
 800e3c8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800e450 <_strtod_l+0xad8>
 800e3cc:	ed8d 7b06 	vstr	d7, [sp, #24]
 800e3d0:	ec57 6b17 	vmov	r6, r7, d7
 800e3d4:	e799      	b.n	800e30a <_strtod_l+0x992>
 800e3d6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800e3da:	9b08      	ldr	r3, [sp, #32]
 800e3dc:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800e3e0:	2b00      	cmp	r3, #0
 800e3e2:	d1c1      	bne.n	800e368 <_strtod_l+0x9f0>
 800e3e4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e3e8:	0d1b      	lsrs	r3, r3, #20
 800e3ea:	051b      	lsls	r3, r3, #20
 800e3ec:	429d      	cmp	r5, r3
 800e3ee:	d1bb      	bne.n	800e368 <_strtod_l+0x9f0>
 800e3f0:	4630      	mov	r0, r6
 800e3f2:	4639      	mov	r1, r7
 800e3f4:	f7f2 fc70 	bl	8000cd8 <__aeabi_d2lz>
 800e3f8:	f7f2 f8e0 	bl	80005bc <__aeabi_l2d>
 800e3fc:	4602      	mov	r2, r0
 800e3fe:	460b      	mov	r3, r1
 800e400:	4630      	mov	r0, r6
 800e402:	4639      	mov	r1, r7
 800e404:	f7f1 ff50 	bl	80002a8 <__aeabi_dsub>
 800e408:	460b      	mov	r3, r1
 800e40a:	4602      	mov	r2, r0
 800e40c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800e410:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800e414:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e416:	ea46 060a 	orr.w	r6, r6, sl
 800e41a:	431e      	orrs	r6, r3
 800e41c:	d06f      	beq.n	800e4fe <_strtod_l+0xb86>
 800e41e:	a30e      	add	r3, pc, #56	@ (adr r3, 800e458 <_strtod_l+0xae0>)
 800e420:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e424:	f7f2 fb6a 	bl	8000afc <__aeabi_dcmplt>
 800e428:	2800      	cmp	r0, #0
 800e42a:	f47f acd3 	bne.w	800ddd4 <_strtod_l+0x45c>
 800e42e:	a30c      	add	r3, pc, #48	@ (adr r3, 800e460 <_strtod_l+0xae8>)
 800e430:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e434:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e438:	f7f2 fb7e 	bl	8000b38 <__aeabi_dcmpgt>
 800e43c:	2800      	cmp	r0, #0
 800e43e:	d093      	beq.n	800e368 <_strtod_l+0x9f0>
 800e440:	e4c8      	b.n	800ddd4 <_strtod_l+0x45c>
 800e442:	bf00      	nop
 800e444:	f3af 8000 	nop.w
 800e448:	00000000 	.word	0x00000000
 800e44c:	bff00000 	.word	0xbff00000
 800e450:	00000000 	.word	0x00000000
 800e454:	3ff00000 	.word	0x3ff00000
 800e458:	94a03595 	.word	0x94a03595
 800e45c:	3fdfffff 	.word	0x3fdfffff
 800e460:	35afe535 	.word	0x35afe535
 800e464:	3fe00000 	.word	0x3fe00000
 800e468:	000fffff 	.word	0x000fffff
 800e46c:	7ff00000 	.word	0x7ff00000
 800e470:	7fefffff 	.word	0x7fefffff
 800e474:	3ff00000 	.word	0x3ff00000
 800e478:	3fe00000 	.word	0x3fe00000
 800e47c:	7fe00000 	.word	0x7fe00000
 800e480:	7c9fffff 	.word	0x7c9fffff
 800e484:	9b08      	ldr	r3, [sp, #32]
 800e486:	b323      	cbz	r3, 800e4d2 <_strtod_l+0xb5a>
 800e488:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800e48c:	d821      	bhi.n	800e4d2 <_strtod_l+0xb5a>
 800e48e:	a328      	add	r3, pc, #160	@ (adr r3, 800e530 <_strtod_l+0xbb8>)
 800e490:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e494:	4630      	mov	r0, r6
 800e496:	4639      	mov	r1, r7
 800e498:	f7f2 fb3a 	bl	8000b10 <__aeabi_dcmple>
 800e49c:	b1a0      	cbz	r0, 800e4c8 <_strtod_l+0xb50>
 800e49e:	4639      	mov	r1, r7
 800e4a0:	4630      	mov	r0, r6
 800e4a2:	f7f2 fb91 	bl	8000bc8 <__aeabi_d2uiz>
 800e4a6:	2801      	cmp	r0, #1
 800e4a8:	bf38      	it	cc
 800e4aa:	2001      	movcc	r0, #1
 800e4ac:	f7f2 f83a 	bl	8000524 <__aeabi_ui2d>
 800e4b0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e4b2:	4606      	mov	r6, r0
 800e4b4:	460f      	mov	r7, r1
 800e4b6:	b9fb      	cbnz	r3, 800e4f8 <_strtod_l+0xb80>
 800e4b8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e4bc:	9014      	str	r0, [sp, #80]	@ 0x50
 800e4be:	9315      	str	r3, [sp, #84]	@ 0x54
 800e4c0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800e4c4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800e4c8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e4ca:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800e4ce:	1b5b      	subs	r3, r3, r5
 800e4d0:	9311      	str	r3, [sp, #68]	@ 0x44
 800e4d2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800e4d6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800e4da:	f001 fac9 	bl	800fa70 <__ulp>
 800e4de:	4650      	mov	r0, sl
 800e4e0:	ec53 2b10 	vmov	r2, r3, d0
 800e4e4:	4659      	mov	r1, fp
 800e4e6:	f7f2 f897 	bl	8000618 <__aeabi_dmul>
 800e4ea:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800e4ee:	f7f1 fedd 	bl	80002ac <__adddf3>
 800e4f2:	4682      	mov	sl, r0
 800e4f4:	468b      	mov	fp, r1
 800e4f6:	e770      	b.n	800e3da <_strtod_l+0xa62>
 800e4f8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800e4fc:	e7e0      	b.n	800e4c0 <_strtod_l+0xb48>
 800e4fe:	a30e      	add	r3, pc, #56	@ (adr r3, 800e538 <_strtod_l+0xbc0>)
 800e500:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e504:	f7f2 fafa 	bl	8000afc <__aeabi_dcmplt>
 800e508:	e798      	b.n	800e43c <_strtod_l+0xac4>
 800e50a:	2300      	movs	r3, #0
 800e50c:	930e      	str	r3, [sp, #56]	@ 0x38
 800e50e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800e510:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e512:	6013      	str	r3, [r2, #0]
 800e514:	f7ff ba6d 	b.w	800d9f2 <_strtod_l+0x7a>
 800e518:	2a65      	cmp	r2, #101	@ 0x65
 800e51a:	f43f ab68 	beq.w	800dbee <_strtod_l+0x276>
 800e51e:	2a45      	cmp	r2, #69	@ 0x45
 800e520:	f43f ab65 	beq.w	800dbee <_strtod_l+0x276>
 800e524:	2301      	movs	r3, #1
 800e526:	f7ff bba0 	b.w	800dc6a <_strtod_l+0x2f2>
 800e52a:	bf00      	nop
 800e52c:	f3af 8000 	nop.w
 800e530:	ffc00000 	.word	0xffc00000
 800e534:	41dfffff 	.word	0x41dfffff
 800e538:	94a03595 	.word	0x94a03595
 800e53c:	3fcfffff 	.word	0x3fcfffff

0800e540 <strtod>:
 800e540:	460a      	mov	r2, r1
 800e542:	4601      	mov	r1, r0
 800e544:	4802      	ldr	r0, [pc, #8]	@ (800e550 <strtod+0x10>)
 800e546:	4b03      	ldr	r3, [pc, #12]	@ (800e554 <strtod+0x14>)
 800e548:	6800      	ldr	r0, [r0, #0]
 800e54a:	f7ff ba15 	b.w	800d978 <_strtod_l>
 800e54e:	bf00      	nop
 800e550:	200001a8 	.word	0x200001a8
 800e554:	2000003c 	.word	0x2000003c

0800e558 <_strtol_l.isra.0>:
 800e558:	2b24      	cmp	r3, #36	@ 0x24
 800e55a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e55e:	4686      	mov	lr, r0
 800e560:	4690      	mov	r8, r2
 800e562:	d801      	bhi.n	800e568 <_strtol_l.isra.0+0x10>
 800e564:	2b01      	cmp	r3, #1
 800e566:	d106      	bne.n	800e576 <_strtol_l.isra.0+0x1e>
 800e568:	f000 fa8e 	bl	800ea88 <__errno>
 800e56c:	2316      	movs	r3, #22
 800e56e:	6003      	str	r3, [r0, #0]
 800e570:	2000      	movs	r0, #0
 800e572:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e576:	4834      	ldr	r0, [pc, #208]	@ (800e648 <_strtol_l.isra.0+0xf0>)
 800e578:	460d      	mov	r5, r1
 800e57a:	462a      	mov	r2, r5
 800e57c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e580:	5d06      	ldrb	r6, [r0, r4]
 800e582:	f016 0608 	ands.w	r6, r6, #8
 800e586:	d1f8      	bne.n	800e57a <_strtol_l.isra.0+0x22>
 800e588:	2c2d      	cmp	r4, #45	@ 0x2d
 800e58a:	d110      	bne.n	800e5ae <_strtol_l.isra.0+0x56>
 800e58c:	782c      	ldrb	r4, [r5, #0]
 800e58e:	2601      	movs	r6, #1
 800e590:	1c95      	adds	r5, r2, #2
 800e592:	f033 0210 	bics.w	r2, r3, #16
 800e596:	d115      	bne.n	800e5c4 <_strtol_l.isra.0+0x6c>
 800e598:	2c30      	cmp	r4, #48	@ 0x30
 800e59a:	d10d      	bne.n	800e5b8 <_strtol_l.isra.0+0x60>
 800e59c:	782a      	ldrb	r2, [r5, #0]
 800e59e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800e5a2:	2a58      	cmp	r2, #88	@ 0x58
 800e5a4:	d108      	bne.n	800e5b8 <_strtol_l.isra.0+0x60>
 800e5a6:	786c      	ldrb	r4, [r5, #1]
 800e5a8:	3502      	adds	r5, #2
 800e5aa:	2310      	movs	r3, #16
 800e5ac:	e00a      	b.n	800e5c4 <_strtol_l.isra.0+0x6c>
 800e5ae:	2c2b      	cmp	r4, #43	@ 0x2b
 800e5b0:	bf04      	itt	eq
 800e5b2:	782c      	ldrbeq	r4, [r5, #0]
 800e5b4:	1c95      	addeq	r5, r2, #2
 800e5b6:	e7ec      	b.n	800e592 <_strtol_l.isra.0+0x3a>
 800e5b8:	2b00      	cmp	r3, #0
 800e5ba:	d1f6      	bne.n	800e5aa <_strtol_l.isra.0+0x52>
 800e5bc:	2c30      	cmp	r4, #48	@ 0x30
 800e5be:	bf14      	ite	ne
 800e5c0:	230a      	movne	r3, #10
 800e5c2:	2308      	moveq	r3, #8
 800e5c4:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800e5c8:	f10c 3cff 	add.w	ip, ip, #4294967295
 800e5cc:	2200      	movs	r2, #0
 800e5ce:	fbbc f9f3 	udiv	r9, ip, r3
 800e5d2:	4610      	mov	r0, r2
 800e5d4:	fb03 ca19 	mls	sl, r3, r9, ip
 800e5d8:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800e5dc:	2f09      	cmp	r7, #9
 800e5de:	d80f      	bhi.n	800e600 <_strtol_l.isra.0+0xa8>
 800e5e0:	463c      	mov	r4, r7
 800e5e2:	42a3      	cmp	r3, r4
 800e5e4:	dd1b      	ble.n	800e61e <_strtol_l.isra.0+0xc6>
 800e5e6:	1c57      	adds	r7, r2, #1
 800e5e8:	d007      	beq.n	800e5fa <_strtol_l.isra.0+0xa2>
 800e5ea:	4581      	cmp	r9, r0
 800e5ec:	d314      	bcc.n	800e618 <_strtol_l.isra.0+0xc0>
 800e5ee:	d101      	bne.n	800e5f4 <_strtol_l.isra.0+0x9c>
 800e5f0:	45a2      	cmp	sl, r4
 800e5f2:	db11      	blt.n	800e618 <_strtol_l.isra.0+0xc0>
 800e5f4:	fb00 4003 	mla	r0, r0, r3, r4
 800e5f8:	2201      	movs	r2, #1
 800e5fa:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e5fe:	e7eb      	b.n	800e5d8 <_strtol_l.isra.0+0x80>
 800e600:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800e604:	2f19      	cmp	r7, #25
 800e606:	d801      	bhi.n	800e60c <_strtol_l.isra.0+0xb4>
 800e608:	3c37      	subs	r4, #55	@ 0x37
 800e60a:	e7ea      	b.n	800e5e2 <_strtol_l.isra.0+0x8a>
 800e60c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800e610:	2f19      	cmp	r7, #25
 800e612:	d804      	bhi.n	800e61e <_strtol_l.isra.0+0xc6>
 800e614:	3c57      	subs	r4, #87	@ 0x57
 800e616:	e7e4      	b.n	800e5e2 <_strtol_l.isra.0+0x8a>
 800e618:	f04f 32ff 	mov.w	r2, #4294967295
 800e61c:	e7ed      	b.n	800e5fa <_strtol_l.isra.0+0xa2>
 800e61e:	1c53      	adds	r3, r2, #1
 800e620:	d108      	bne.n	800e634 <_strtol_l.isra.0+0xdc>
 800e622:	2322      	movs	r3, #34	@ 0x22
 800e624:	f8ce 3000 	str.w	r3, [lr]
 800e628:	4660      	mov	r0, ip
 800e62a:	f1b8 0f00 	cmp.w	r8, #0
 800e62e:	d0a0      	beq.n	800e572 <_strtol_l.isra.0+0x1a>
 800e630:	1e69      	subs	r1, r5, #1
 800e632:	e006      	b.n	800e642 <_strtol_l.isra.0+0xea>
 800e634:	b106      	cbz	r6, 800e638 <_strtol_l.isra.0+0xe0>
 800e636:	4240      	negs	r0, r0
 800e638:	f1b8 0f00 	cmp.w	r8, #0
 800e63c:	d099      	beq.n	800e572 <_strtol_l.isra.0+0x1a>
 800e63e:	2a00      	cmp	r2, #0
 800e640:	d1f6      	bne.n	800e630 <_strtol_l.isra.0+0xd8>
 800e642:	f8c8 1000 	str.w	r1, [r8]
 800e646:	e794      	b.n	800e572 <_strtol_l.isra.0+0x1a>
 800e648:	080110a9 	.word	0x080110a9

0800e64c <strtol>:
 800e64c:	4613      	mov	r3, r2
 800e64e:	460a      	mov	r2, r1
 800e650:	4601      	mov	r1, r0
 800e652:	4802      	ldr	r0, [pc, #8]	@ (800e65c <strtol+0x10>)
 800e654:	6800      	ldr	r0, [r0, #0]
 800e656:	f7ff bf7f 	b.w	800e558 <_strtol_l.isra.0>
 800e65a:	bf00      	nop
 800e65c:	200001a8 	.word	0x200001a8

0800e660 <std>:
 800e660:	2300      	movs	r3, #0
 800e662:	b510      	push	{r4, lr}
 800e664:	4604      	mov	r4, r0
 800e666:	e9c0 3300 	strd	r3, r3, [r0]
 800e66a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e66e:	6083      	str	r3, [r0, #8]
 800e670:	8181      	strh	r1, [r0, #12]
 800e672:	6643      	str	r3, [r0, #100]	@ 0x64
 800e674:	81c2      	strh	r2, [r0, #14]
 800e676:	6183      	str	r3, [r0, #24]
 800e678:	4619      	mov	r1, r3
 800e67a:	2208      	movs	r2, #8
 800e67c:	305c      	adds	r0, #92	@ 0x5c
 800e67e:	f000 f931 	bl	800e8e4 <memset>
 800e682:	4b0d      	ldr	r3, [pc, #52]	@ (800e6b8 <std+0x58>)
 800e684:	6263      	str	r3, [r4, #36]	@ 0x24
 800e686:	4b0d      	ldr	r3, [pc, #52]	@ (800e6bc <std+0x5c>)
 800e688:	62a3      	str	r3, [r4, #40]	@ 0x28
 800e68a:	4b0d      	ldr	r3, [pc, #52]	@ (800e6c0 <std+0x60>)
 800e68c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800e68e:	4b0d      	ldr	r3, [pc, #52]	@ (800e6c4 <std+0x64>)
 800e690:	6323      	str	r3, [r4, #48]	@ 0x30
 800e692:	4b0d      	ldr	r3, [pc, #52]	@ (800e6c8 <std+0x68>)
 800e694:	6224      	str	r4, [r4, #32]
 800e696:	429c      	cmp	r4, r3
 800e698:	d006      	beq.n	800e6a8 <std+0x48>
 800e69a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800e69e:	4294      	cmp	r4, r2
 800e6a0:	d002      	beq.n	800e6a8 <std+0x48>
 800e6a2:	33d0      	adds	r3, #208	@ 0xd0
 800e6a4:	429c      	cmp	r4, r3
 800e6a6:	d105      	bne.n	800e6b4 <std+0x54>
 800e6a8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800e6ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e6b0:	f000 ba14 	b.w	800eadc <__retarget_lock_init_recursive>
 800e6b4:	bd10      	pop	{r4, pc}
 800e6b6:	bf00      	nop
 800e6b8:	0800e7e5 	.word	0x0800e7e5
 800e6bc:	0800e807 	.word	0x0800e807
 800e6c0:	0800e83f 	.word	0x0800e83f
 800e6c4:	0800e863 	.word	0x0800e863
 800e6c8:	20003f58 	.word	0x20003f58

0800e6cc <stdio_exit_handler>:
 800e6cc:	4a02      	ldr	r2, [pc, #8]	@ (800e6d8 <stdio_exit_handler+0xc>)
 800e6ce:	4903      	ldr	r1, [pc, #12]	@ (800e6dc <stdio_exit_handler+0x10>)
 800e6d0:	4803      	ldr	r0, [pc, #12]	@ (800e6e0 <stdio_exit_handler+0x14>)
 800e6d2:	f000 b869 	b.w	800e7a8 <_fwalk_sglue>
 800e6d6:	bf00      	nop
 800e6d8:	20000030 	.word	0x20000030
 800e6dc:	080103d5 	.word	0x080103d5
 800e6e0:	200001ac 	.word	0x200001ac

0800e6e4 <cleanup_stdio>:
 800e6e4:	6841      	ldr	r1, [r0, #4]
 800e6e6:	4b0c      	ldr	r3, [pc, #48]	@ (800e718 <cleanup_stdio+0x34>)
 800e6e8:	4299      	cmp	r1, r3
 800e6ea:	b510      	push	{r4, lr}
 800e6ec:	4604      	mov	r4, r0
 800e6ee:	d001      	beq.n	800e6f4 <cleanup_stdio+0x10>
 800e6f0:	f001 fe70 	bl	80103d4 <_fflush_r>
 800e6f4:	68a1      	ldr	r1, [r4, #8]
 800e6f6:	4b09      	ldr	r3, [pc, #36]	@ (800e71c <cleanup_stdio+0x38>)
 800e6f8:	4299      	cmp	r1, r3
 800e6fa:	d002      	beq.n	800e702 <cleanup_stdio+0x1e>
 800e6fc:	4620      	mov	r0, r4
 800e6fe:	f001 fe69 	bl	80103d4 <_fflush_r>
 800e702:	68e1      	ldr	r1, [r4, #12]
 800e704:	4b06      	ldr	r3, [pc, #24]	@ (800e720 <cleanup_stdio+0x3c>)
 800e706:	4299      	cmp	r1, r3
 800e708:	d004      	beq.n	800e714 <cleanup_stdio+0x30>
 800e70a:	4620      	mov	r0, r4
 800e70c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e710:	f001 be60 	b.w	80103d4 <_fflush_r>
 800e714:	bd10      	pop	{r4, pc}
 800e716:	bf00      	nop
 800e718:	20003f58 	.word	0x20003f58
 800e71c:	20003fc0 	.word	0x20003fc0
 800e720:	20004028 	.word	0x20004028

0800e724 <global_stdio_init.part.0>:
 800e724:	b510      	push	{r4, lr}
 800e726:	4b0b      	ldr	r3, [pc, #44]	@ (800e754 <global_stdio_init.part.0+0x30>)
 800e728:	4c0b      	ldr	r4, [pc, #44]	@ (800e758 <global_stdio_init.part.0+0x34>)
 800e72a:	4a0c      	ldr	r2, [pc, #48]	@ (800e75c <global_stdio_init.part.0+0x38>)
 800e72c:	601a      	str	r2, [r3, #0]
 800e72e:	4620      	mov	r0, r4
 800e730:	2200      	movs	r2, #0
 800e732:	2104      	movs	r1, #4
 800e734:	f7ff ff94 	bl	800e660 <std>
 800e738:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800e73c:	2201      	movs	r2, #1
 800e73e:	2109      	movs	r1, #9
 800e740:	f7ff ff8e 	bl	800e660 <std>
 800e744:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800e748:	2202      	movs	r2, #2
 800e74a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e74e:	2112      	movs	r1, #18
 800e750:	f7ff bf86 	b.w	800e660 <std>
 800e754:	20004090 	.word	0x20004090
 800e758:	20003f58 	.word	0x20003f58
 800e75c:	0800e6cd 	.word	0x0800e6cd

0800e760 <__sfp_lock_acquire>:
 800e760:	4801      	ldr	r0, [pc, #4]	@ (800e768 <__sfp_lock_acquire+0x8>)
 800e762:	f000 b9bc 	b.w	800eade <__retarget_lock_acquire_recursive>
 800e766:	bf00      	nop
 800e768:	20004099 	.word	0x20004099

0800e76c <__sfp_lock_release>:
 800e76c:	4801      	ldr	r0, [pc, #4]	@ (800e774 <__sfp_lock_release+0x8>)
 800e76e:	f000 b9b7 	b.w	800eae0 <__retarget_lock_release_recursive>
 800e772:	bf00      	nop
 800e774:	20004099 	.word	0x20004099

0800e778 <__sinit>:
 800e778:	b510      	push	{r4, lr}
 800e77a:	4604      	mov	r4, r0
 800e77c:	f7ff fff0 	bl	800e760 <__sfp_lock_acquire>
 800e780:	6a23      	ldr	r3, [r4, #32]
 800e782:	b11b      	cbz	r3, 800e78c <__sinit+0x14>
 800e784:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e788:	f7ff bff0 	b.w	800e76c <__sfp_lock_release>
 800e78c:	4b04      	ldr	r3, [pc, #16]	@ (800e7a0 <__sinit+0x28>)
 800e78e:	6223      	str	r3, [r4, #32]
 800e790:	4b04      	ldr	r3, [pc, #16]	@ (800e7a4 <__sinit+0x2c>)
 800e792:	681b      	ldr	r3, [r3, #0]
 800e794:	2b00      	cmp	r3, #0
 800e796:	d1f5      	bne.n	800e784 <__sinit+0xc>
 800e798:	f7ff ffc4 	bl	800e724 <global_stdio_init.part.0>
 800e79c:	e7f2      	b.n	800e784 <__sinit+0xc>
 800e79e:	bf00      	nop
 800e7a0:	0800e6e5 	.word	0x0800e6e5
 800e7a4:	20004090 	.word	0x20004090

0800e7a8 <_fwalk_sglue>:
 800e7a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e7ac:	4607      	mov	r7, r0
 800e7ae:	4688      	mov	r8, r1
 800e7b0:	4614      	mov	r4, r2
 800e7b2:	2600      	movs	r6, #0
 800e7b4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e7b8:	f1b9 0901 	subs.w	r9, r9, #1
 800e7bc:	d505      	bpl.n	800e7ca <_fwalk_sglue+0x22>
 800e7be:	6824      	ldr	r4, [r4, #0]
 800e7c0:	2c00      	cmp	r4, #0
 800e7c2:	d1f7      	bne.n	800e7b4 <_fwalk_sglue+0xc>
 800e7c4:	4630      	mov	r0, r6
 800e7c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e7ca:	89ab      	ldrh	r3, [r5, #12]
 800e7cc:	2b01      	cmp	r3, #1
 800e7ce:	d907      	bls.n	800e7e0 <_fwalk_sglue+0x38>
 800e7d0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e7d4:	3301      	adds	r3, #1
 800e7d6:	d003      	beq.n	800e7e0 <_fwalk_sglue+0x38>
 800e7d8:	4629      	mov	r1, r5
 800e7da:	4638      	mov	r0, r7
 800e7dc:	47c0      	blx	r8
 800e7de:	4306      	orrs	r6, r0
 800e7e0:	3568      	adds	r5, #104	@ 0x68
 800e7e2:	e7e9      	b.n	800e7b8 <_fwalk_sglue+0x10>

0800e7e4 <__sread>:
 800e7e4:	b510      	push	{r4, lr}
 800e7e6:	460c      	mov	r4, r1
 800e7e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e7ec:	f000 f928 	bl	800ea40 <_read_r>
 800e7f0:	2800      	cmp	r0, #0
 800e7f2:	bfab      	itete	ge
 800e7f4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800e7f6:	89a3      	ldrhlt	r3, [r4, #12]
 800e7f8:	181b      	addge	r3, r3, r0
 800e7fa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800e7fe:	bfac      	ite	ge
 800e800:	6563      	strge	r3, [r4, #84]	@ 0x54
 800e802:	81a3      	strhlt	r3, [r4, #12]
 800e804:	bd10      	pop	{r4, pc}

0800e806 <__swrite>:
 800e806:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e80a:	461f      	mov	r7, r3
 800e80c:	898b      	ldrh	r3, [r1, #12]
 800e80e:	05db      	lsls	r3, r3, #23
 800e810:	4605      	mov	r5, r0
 800e812:	460c      	mov	r4, r1
 800e814:	4616      	mov	r6, r2
 800e816:	d505      	bpl.n	800e824 <__swrite+0x1e>
 800e818:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e81c:	2302      	movs	r3, #2
 800e81e:	2200      	movs	r2, #0
 800e820:	f000 f8fc 	bl	800ea1c <_lseek_r>
 800e824:	89a3      	ldrh	r3, [r4, #12]
 800e826:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e82a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800e82e:	81a3      	strh	r3, [r4, #12]
 800e830:	4632      	mov	r2, r6
 800e832:	463b      	mov	r3, r7
 800e834:	4628      	mov	r0, r5
 800e836:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e83a:	f000 b913 	b.w	800ea64 <_write_r>

0800e83e <__sseek>:
 800e83e:	b510      	push	{r4, lr}
 800e840:	460c      	mov	r4, r1
 800e842:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e846:	f000 f8e9 	bl	800ea1c <_lseek_r>
 800e84a:	1c43      	adds	r3, r0, #1
 800e84c:	89a3      	ldrh	r3, [r4, #12]
 800e84e:	bf15      	itete	ne
 800e850:	6560      	strne	r0, [r4, #84]	@ 0x54
 800e852:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800e856:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800e85a:	81a3      	strheq	r3, [r4, #12]
 800e85c:	bf18      	it	ne
 800e85e:	81a3      	strhne	r3, [r4, #12]
 800e860:	bd10      	pop	{r4, pc}

0800e862 <__sclose>:
 800e862:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e866:	f000 b86b 	b.w	800e940 <_close_r>

0800e86a <_vsniprintf_r>:
 800e86a:	b530      	push	{r4, r5, lr}
 800e86c:	4614      	mov	r4, r2
 800e86e:	2c00      	cmp	r4, #0
 800e870:	b09b      	sub	sp, #108	@ 0x6c
 800e872:	4605      	mov	r5, r0
 800e874:	461a      	mov	r2, r3
 800e876:	da05      	bge.n	800e884 <_vsniprintf_r+0x1a>
 800e878:	238b      	movs	r3, #139	@ 0x8b
 800e87a:	6003      	str	r3, [r0, #0]
 800e87c:	f04f 30ff 	mov.w	r0, #4294967295
 800e880:	b01b      	add	sp, #108	@ 0x6c
 800e882:	bd30      	pop	{r4, r5, pc}
 800e884:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800e888:	f8ad 300c 	strh.w	r3, [sp, #12]
 800e88c:	f04f 0300 	mov.w	r3, #0
 800e890:	9319      	str	r3, [sp, #100]	@ 0x64
 800e892:	bf14      	ite	ne
 800e894:	f104 33ff 	addne.w	r3, r4, #4294967295
 800e898:	4623      	moveq	r3, r4
 800e89a:	9302      	str	r3, [sp, #8]
 800e89c:	9305      	str	r3, [sp, #20]
 800e89e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800e8a2:	9100      	str	r1, [sp, #0]
 800e8a4:	9104      	str	r1, [sp, #16]
 800e8a6:	f8ad 300e 	strh.w	r3, [sp, #14]
 800e8aa:	4669      	mov	r1, sp
 800e8ac:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800e8ae:	f001 fa85 	bl	800fdbc <_svfiprintf_r>
 800e8b2:	1c43      	adds	r3, r0, #1
 800e8b4:	bfbc      	itt	lt
 800e8b6:	238b      	movlt	r3, #139	@ 0x8b
 800e8b8:	602b      	strlt	r3, [r5, #0]
 800e8ba:	2c00      	cmp	r4, #0
 800e8bc:	d0e0      	beq.n	800e880 <_vsniprintf_r+0x16>
 800e8be:	9b00      	ldr	r3, [sp, #0]
 800e8c0:	2200      	movs	r2, #0
 800e8c2:	701a      	strb	r2, [r3, #0]
 800e8c4:	e7dc      	b.n	800e880 <_vsniprintf_r+0x16>
	...

0800e8c8 <vsniprintf>:
 800e8c8:	b507      	push	{r0, r1, r2, lr}
 800e8ca:	9300      	str	r3, [sp, #0]
 800e8cc:	4613      	mov	r3, r2
 800e8ce:	460a      	mov	r2, r1
 800e8d0:	4601      	mov	r1, r0
 800e8d2:	4803      	ldr	r0, [pc, #12]	@ (800e8e0 <vsniprintf+0x18>)
 800e8d4:	6800      	ldr	r0, [r0, #0]
 800e8d6:	f7ff ffc8 	bl	800e86a <_vsniprintf_r>
 800e8da:	b003      	add	sp, #12
 800e8dc:	f85d fb04 	ldr.w	pc, [sp], #4
 800e8e0:	200001a8 	.word	0x200001a8

0800e8e4 <memset>:
 800e8e4:	4402      	add	r2, r0
 800e8e6:	4603      	mov	r3, r0
 800e8e8:	4293      	cmp	r3, r2
 800e8ea:	d100      	bne.n	800e8ee <memset+0xa>
 800e8ec:	4770      	bx	lr
 800e8ee:	f803 1b01 	strb.w	r1, [r3], #1
 800e8f2:	e7f9      	b.n	800e8e8 <memset+0x4>

0800e8f4 <strncmp>:
 800e8f4:	b510      	push	{r4, lr}
 800e8f6:	b16a      	cbz	r2, 800e914 <strncmp+0x20>
 800e8f8:	3901      	subs	r1, #1
 800e8fa:	1884      	adds	r4, r0, r2
 800e8fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e900:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800e904:	429a      	cmp	r2, r3
 800e906:	d103      	bne.n	800e910 <strncmp+0x1c>
 800e908:	42a0      	cmp	r0, r4
 800e90a:	d001      	beq.n	800e910 <strncmp+0x1c>
 800e90c:	2a00      	cmp	r2, #0
 800e90e:	d1f5      	bne.n	800e8fc <strncmp+0x8>
 800e910:	1ad0      	subs	r0, r2, r3
 800e912:	bd10      	pop	{r4, pc}
 800e914:	4610      	mov	r0, r2
 800e916:	e7fc      	b.n	800e912 <strncmp+0x1e>

0800e918 <strncpy>:
 800e918:	b510      	push	{r4, lr}
 800e91a:	3901      	subs	r1, #1
 800e91c:	4603      	mov	r3, r0
 800e91e:	b132      	cbz	r2, 800e92e <strncpy+0x16>
 800e920:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800e924:	f803 4b01 	strb.w	r4, [r3], #1
 800e928:	3a01      	subs	r2, #1
 800e92a:	2c00      	cmp	r4, #0
 800e92c:	d1f7      	bne.n	800e91e <strncpy+0x6>
 800e92e:	441a      	add	r2, r3
 800e930:	2100      	movs	r1, #0
 800e932:	4293      	cmp	r3, r2
 800e934:	d100      	bne.n	800e938 <strncpy+0x20>
 800e936:	bd10      	pop	{r4, pc}
 800e938:	f803 1b01 	strb.w	r1, [r3], #1
 800e93c:	e7f9      	b.n	800e932 <strncpy+0x1a>
	...

0800e940 <_close_r>:
 800e940:	b538      	push	{r3, r4, r5, lr}
 800e942:	4d06      	ldr	r5, [pc, #24]	@ (800e95c <_close_r+0x1c>)
 800e944:	2300      	movs	r3, #0
 800e946:	4604      	mov	r4, r0
 800e948:	4608      	mov	r0, r1
 800e94a:	602b      	str	r3, [r5, #0]
 800e94c:	f7f3 fd82 	bl	8002454 <_close>
 800e950:	1c43      	adds	r3, r0, #1
 800e952:	d102      	bne.n	800e95a <_close_r+0x1a>
 800e954:	682b      	ldr	r3, [r5, #0]
 800e956:	b103      	cbz	r3, 800e95a <_close_r+0x1a>
 800e958:	6023      	str	r3, [r4, #0]
 800e95a:	bd38      	pop	{r3, r4, r5, pc}
 800e95c:	20004094 	.word	0x20004094

0800e960 <_reclaim_reent>:
 800e960:	4b2d      	ldr	r3, [pc, #180]	@ (800ea18 <_reclaim_reent+0xb8>)
 800e962:	681b      	ldr	r3, [r3, #0]
 800e964:	4283      	cmp	r3, r0
 800e966:	b570      	push	{r4, r5, r6, lr}
 800e968:	4604      	mov	r4, r0
 800e96a:	d053      	beq.n	800ea14 <_reclaim_reent+0xb4>
 800e96c:	69c3      	ldr	r3, [r0, #28]
 800e96e:	b31b      	cbz	r3, 800e9b8 <_reclaim_reent+0x58>
 800e970:	68db      	ldr	r3, [r3, #12]
 800e972:	b163      	cbz	r3, 800e98e <_reclaim_reent+0x2e>
 800e974:	2500      	movs	r5, #0
 800e976:	69e3      	ldr	r3, [r4, #28]
 800e978:	68db      	ldr	r3, [r3, #12]
 800e97a:	5959      	ldr	r1, [r3, r5]
 800e97c:	b9b1      	cbnz	r1, 800e9ac <_reclaim_reent+0x4c>
 800e97e:	3504      	adds	r5, #4
 800e980:	2d80      	cmp	r5, #128	@ 0x80
 800e982:	d1f8      	bne.n	800e976 <_reclaim_reent+0x16>
 800e984:	69e3      	ldr	r3, [r4, #28]
 800e986:	4620      	mov	r0, r4
 800e988:	68d9      	ldr	r1, [r3, #12]
 800e98a:	f000 f8c1 	bl	800eb10 <_free_r>
 800e98e:	69e3      	ldr	r3, [r4, #28]
 800e990:	6819      	ldr	r1, [r3, #0]
 800e992:	b111      	cbz	r1, 800e99a <_reclaim_reent+0x3a>
 800e994:	4620      	mov	r0, r4
 800e996:	f000 f8bb 	bl	800eb10 <_free_r>
 800e99a:	69e3      	ldr	r3, [r4, #28]
 800e99c:	689d      	ldr	r5, [r3, #8]
 800e99e:	b15d      	cbz	r5, 800e9b8 <_reclaim_reent+0x58>
 800e9a0:	4629      	mov	r1, r5
 800e9a2:	4620      	mov	r0, r4
 800e9a4:	682d      	ldr	r5, [r5, #0]
 800e9a6:	f000 f8b3 	bl	800eb10 <_free_r>
 800e9aa:	e7f8      	b.n	800e99e <_reclaim_reent+0x3e>
 800e9ac:	680e      	ldr	r6, [r1, #0]
 800e9ae:	4620      	mov	r0, r4
 800e9b0:	f000 f8ae 	bl	800eb10 <_free_r>
 800e9b4:	4631      	mov	r1, r6
 800e9b6:	e7e1      	b.n	800e97c <_reclaim_reent+0x1c>
 800e9b8:	6961      	ldr	r1, [r4, #20]
 800e9ba:	b111      	cbz	r1, 800e9c2 <_reclaim_reent+0x62>
 800e9bc:	4620      	mov	r0, r4
 800e9be:	f000 f8a7 	bl	800eb10 <_free_r>
 800e9c2:	69e1      	ldr	r1, [r4, #28]
 800e9c4:	b111      	cbz	r1, 800e9cc <_reclaim_reent+0x6c>
 800e9c6:	4620      	mov	r0, r4
 800e9c8:	f000 f8a2 	bl	800eb10 <_free_r>
 800e9cc:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800e9ce:	b111      	cbz	r1, 800e9d6 <_reclaim_reent+0x76>
 800e9d0:	4620      	mov	r0, r4
 800e9d2:	f000 f89d 	bl	800eb10 <_free_r>
 800e9d6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e9d8:	b111      	cbz	r1, 800e9e0 <_reclaim_reent+0x80>
 800e9da:	4620      	mov	r0, r4
 800e9dc:	f000 f898 	bl	800eb10 <_free_r>
 800e9e0:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800e9e2:	b111      	cbz	r1, 800e9ea <_reclaim_reent+0x8a>
 800e9e4:	4620      	mov	r0, r4
 800e9e6:	f000 f893 	bl	800eb10 <_free_r>
 800e9ea:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800e9ec:	b111      	cbz	r1, 800e9f4 <_reclaim_reent+0x94>
 800e9ee:	4620      	mov	r0, r4
 800e9f0:	f000 f88e 	bl	800eb10 <_free_r>
 800e9f4:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800e9f6:	b111      	cbz	r1, 800e9fe <_reclaim_reent+0x9e>
 800e9f8:	4620      	mov	r0, r4
 800e9fa:	f000 f889 	bl	800eb10 <_free_r>
 800e9fe:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800ea00:	b111      	cbz	r1, 800ea08 <_reclaim_reent+0xa8>
 800ea02:	4620      	mov	r0, r4
 800ea04:	f000 f884 	bl	800eb10 <_free_r>
 800ea08:	6a23      	ldr	r3, [r4, #32]
 800ea0a:	b11b      	cbz	r3, 800ea14 <_reclaim_reent+0xb4>
 800ea0c:	4620      	mov	r0, r4
 800ea0e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ea12:	4718      	bx	r3
 800ea14:	bd70      	pop	{r4, r5, r6, pc}
 800ea16:	bf00      	nop
 800ea18:	200001a8 	.word	0x200001a8

0800ea1c <_lseek_r>:
 800ea1c:	b538      	push	{r3, r4, r5, lr}
 800ea1e:	4d07      	ldr	r5, [pc, #28]	@ (800ea3c <_lseek_r+0x20>)
 800ea20:	4604      	mov	r4, r0
 800ea22:	4608      	mov	r0, r1
 800ea24:	4611      	mov	r1, r2
 800ea26:	2200      	movs	r2, #0
 800ea28:	602a      	str	r2, [r5, #0]
 800ea2a:	461a      	mov	r2, r3
 800ea2c:	f7f3 fd39 	bl	80024a2 <_lseek>
 800ea30:	1c43      	adds	r3, r0, #1
 800ea32:	d102      	bne.n	800ea3a <_lseek_r+0x1e>
 800ea34:	682b      	ldr	r3, [r5, #0]
 800ea36:	b103      	cbz	r3, 800ea3a <_lseek_r+0x1e>
 800ea38:	6023      	str	r3, [r4, #0]
 800ea3a:	bd38      	pop	{r3, r4, r5, pc}
 800ea3c:	20004094 	.word	0x20004094

0800ea40 <_read_r>:
 800ea40:	b538      	push	{r3, r4, r5, lr}
 800ea42:	4d07      	ldr	r5, [pc, #28]	@ (800ea60 <_read_r+0x20>)
 800ea44:	4604      	mov	r4, r0
 800ea46:	4608      	mov	r0, r1
 800ea48:	4611      	mov	r1, r2
 800ea4a:	2200      	movs	r2, #0
 800ea4c:	602a      	str	r2, [r5, #0]
 800ea4e:	461a      	mov	r2, r3
 800ea50:	f7f3 fcc7 	bl	80023e2 <_read>
 800ea54:	1c43      	adds	r3, r0, #1
 800ea56:	d102      	bne.n	800ea5e <_read_r+0x1e>
 800ea58:	682b      	ldr	r3, [r5, #0]
 800ea5a:	b103      	cbz	r3, 800ea5e <_read_r+0x1e>
 800ea5c:	6023      	str	r3, [r4, #0]
 800ea5e:	bd38      	pop	{r3, r4, r5, pc}
 800ea60:	20004094 	.word	0x20004094

0800ea64 <_write_r>:
 800ea64:	b538      	push	{r3, r4, r5, lr}
 800ea66:	4d07      	ldr	r5, [pc, #28]	@ (800ea84 <_write_r+0x20>)
 800ea68:	4604      	mov	r4, r0
 800ea6a:	4608      	mov	r0, r1
 800ea6c:	4611      	mov	r1, r2
 800ea6e:	2200      	movs	r2, #0
 800ea70:	602a      	str	r2, [r5, #0]
 800ea72:	461a      	mov	r2, r3
 800ea74:	f7f3 fcd2 	bl	800241c <_write>
 800ea78:	1c43      	adds	r3, r0, #1
 800ea7a:	d102      	bne.n	800ea82 <_write_r+0x1e>
 800ea7c:	682b      	ldr	r3, [r5, #0]
 800ea7e:	b103      	cbz	r3, 800ea82 <_write_r+0x1e>
 800ea80:	6023      	str	r3, [r4, #0]
 800ea82:	bd38      	pop	{r3, r4, r5, pc}
 800ea84:	20004094 	.word	0x20004094

0800ea88 <__errno>:
 800ea88:	4b01      	ldr	r3, [pc, #4]	@ (800ea90 <__errno+0x8>)
 800ea8a:	6818      	ldr	r0, [r3, #0]
 800ea8c:	4770      	bx	lr
 800ea8e:	bf00      	nop
 800ea90:	200001a8 	.word	0x200001a8

0800ea94 <__libc_init_array>:
 800ea94:	b570      	push	{r4, r5, r6, lr}
 800ea96:	4d0d      	ldr	r5, [pc, #52]	@ (800eacc <__libc_init_array+0x38>)
 800ea98:	4c0d      	ldr	r4, [pc, #52]	@ (800ead0 <__libc_init_array+0x3c>)
 800ea9a:	1b64      	subs	r4, r4, r5
 800ea9c:	10a4      	asrs	r4, r4, #2
 800ea9e:	2600      	movs	r6, #0
 800eaa0:	42a6      	cmp	r6, r4
 800eaa2:	d109      	bne.n	800eab8 <__libc_init_array+0x24>
 800eaa4:	4d0b      	ldr	r5, [pc, #44]	@ (800ead4 <__libc_init_array+0x40>)
 800eaa6:	4c0c      	ldr	r4, [pc, #48]	@ (800ead8 <__libc_init_array+0x44>)
 800eaa8:	f002 f90e 	bl	8010cc8 <_init>
 800eaac:	1b64      	subs	r4, r4, r5
 800eaae:	10a4      	asrs	r4, r4, #2
 800eab0:	2600      	movs	r6, #0
 800eab2:	42a6      	cmp	r6, r4
 800eab4:	d105      	bne.n	800eac2 <__libc_init_array+0x2e>
 800eab6:	bd70      	pop	{r4, r5, r6, pc}
 800eab8:	f855 3b04 	ldr.w	r3, [r5], #4
 800eabc:	4798      	blx	r3
 800eabe:	3601      	adds	r6, #1
 800eac0:	e7ee      	b.n	800eaa0 <__libc_init_array+0xc>
 800eac2:	f855 3b04 	ldr.w	r3, [r5], #4
 800eac6:	4798      	blx	r3
 800eac8:	3601      	adds	r6, #1
 800eaca:	e7f2      	b.n	800eab2 <__libc_init_array+0x1e>
 800eacc:	080112c0 	.word	0x080112c0
 800ead0:	080112c0 	.word	0x080112c0
 800ead4:	080112c0 	.word	0x080112c0
 800ead8:	080112c4 	.word	0x080112c4

0800eadc <__retarget_lock_init_recursive>:
 800eadc:	4770      	bx	lr

0800eade <__retarget_lock_acquire_recursive>:
 800eade:	4770      	bx	lr

0800eae0 <__retarget_lock_release_recursive>:
 800eae0:	4770      	bx	lr

0800eae2 <memcpy>:
 800eae2:	440a      	add	r2, r1
 800eae4:	4291      	cmp	r1, r2
 800eae6:	f100 33ff 	add.w	r3, r0, #4294967295
 800eaea:	d100      	bne.n	800eaee <memcpy+0xc>
 800eaec:	4770      	bx	lr
 800eaee:	b510      	push	{r4, lr}
 800eaf0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800eaf4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800eaf8:	4291      	cmp	r1, r2
 800eafa:	d1f9      	bne.n	800eaf0 <memcpy+0xe>
 800eafc:	bd10      	pop	{r4, pc}
	...

0800eb00 <nan>:
 800eb00:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800eb08 <nan+0x8>
 800eb04:	4770      	bx	lr
 800eb06:	bf00      	nop
 800eb08:	00000000 	.word	0x00000000
 800eb0c:	7ff80000 	.word	0x7ff80000

0800eb10 <_free_r>:
 800eb10:	b538      	push	{r3, r4, r5, lr}
 800eb12:	4605      	mov	r5, r0
 800eb14:	2900      	cmp	r1, #0
 800eb16:	d041      	beq.n	800eb9c <_free_r+0x8c>
 800eb18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800eb1c:	1f0c      	subs	r4, r1, #4
 800eb1e:	2b00      	cmp	r3, #0
 800eb20:	bfb8      	it	lt
 800eb22:	18e4      	addlt	r4, r4, r3
 800eb24:	f000 fc2c 	bl	800f380 <__malloc_lock>
 800eb28:	4a1d      	ldr	r2, [pc, #116]	@ (800eba0 <_free_r+0x90>)
 800eb2a:	6813      	ldr	r3, [r2, #0]
 800eb2c:	b933      	cbnz	r3, 800eb3c <_free_r+0x2c>
 800eb2e:	6063      	str	r3, [r4, #4]
 800eb30:	6014      	str	r4, [r2, #0]
 800eb32:	4628      	mov	r0, r5
 800eb34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800eb38:	f000 bc28 	b.w	800f38c <__malloc_unlock>
 800eb3c:	42a3      	cmp	r3, r4
 800eb3e:	d908      	bls.n	800eb52 <_free_r+0x42>
 800eb40:	6820      	ldr	r0, [r4, #0]
 800eb42:	1821      	adds	r1, r4, r0
 800eb44:	428b      	cmp	r3, r1
 800eb46:	bf01      	itttt	eq
 800eb48:	6819      	ldreq	r1, [r3, #0]
 800eb4a:	685b      	ldreq	r3, [r3, #4]
 800eb4c:	1809      	addeq	r1, r1, r0
 800eb4e:	6021      	streq	r1, [r4, #0]
 800eb50:	e7ed      	b.n	800eb2e <_free_r+0x1e>
 800eb52:	461a      	mov	r2, r3
 800eb54:	685b      	ldr	r3, [r3, #4]
 800eb56:	b10b      	cbz	r3, 800eb5c <_free_r+0x4c>
 800eb58:	42a3      	cmp	r3, r4
 800eb5a:	d9fa      	bls.n	800eb52 <_free_r+0x42>
 800eb5c:	6811      	ldr	r1, [r2, #0]
 800eb5e:	1850      	adds	r0, r2, r1
 800eb60:	42a0      	cmp	r0, r4
 800eb62:	d10b      	bne.n	800eb7c <_free_r+0x6c>
 800eb64:	6820      	ldr	r0, [r4, #0]
 800eb66:	4401      	add	r1, r0
 800eb68:	1850      	adds	r0, r2, r1
 800eb6a:	4283      	cmp	r3, r0
 800eb6c:	6011      	str	r1, [r2, #0]
 800eb6e:	d1e0      	bne.n	800eb32 <_free_r+0x22>
 800eb70:	6818      	ldr	r0, [r3, #0]
 800eb72:	685b      	ldr	r3, [r3, #4]
 800eb74:	6053      	str	r3, [r2, #4]
 800eb76:	4408      	add	r0, r1
 800eb78:	6010      	str	r0, [r2, #0]
 800eb7a:	e7da      	b.n	800eb32 <_free_r+0x22>
 800eb7c:	d902      	bls.n	800eb84 <_free_r+0x74>
 800eb7e:	230c      	movs	r3, #12
 800eb80:	602b      	str	r3, [r5, #0]
 800eb82:	e7d6      	b.n	800eb32 <_free_r+0x22>
 800eb84:	6820      	ldr	r0, [r4, #0]
 800eb86:	1821      	adds	r1, r4, r0
 800eb88:	428b      	cmp	r3, r1
 800eb8a:	bf04      	itt	eq
 800eb8c:	6819      	ldreq	r1, [r3, #0]
 800eb8e:	685b      	ldreq	r3, [r3, #4]
 800eb90:	6063      	str	r3, [r4, #4]
 800eb92:	bf04      	itt	eq
 800eb94:	1809      	addeq	r1, r1, r0
 800eb96:	6021      	streq	r1, [r4, #0]
 800eb98:	6054      	str	r4, [r2, #4]
 800eb9a:	e7ca      	b.n	800eb32 <_free_r+0x22>
 800eb9c:	bd38      	pop	{r3, r4, r5, pc}
 800eb9e:	bf00      	nop
 800eba0:	200040a0 	.word	0x200040a0

0800eba4 <rshift>:
 800eba4:	6903      	ldr	r3, [r0, #16]
 800eba6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ebaa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ebae:	ea4f 1261 	mov.w	r2, r1, asr #5
 800ebb2:	f100 0414 	add.w	r4, r0, #20
 800ebb6:	dd45      	ble.n	800ec44 <rshift+0xa0>
 800ebb8:	f011 011f 	ands.w	r1, r1, #31
 800ebbc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800ebc0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ebc4:	d10c      	bne.n	800ebe0 <rshift+0x3c>
 800ebc6:	f100 0710 	add.w	r7, r0, #16
 800ebca:	4629      	mov	r1, r5
 800ebcc:	42b1      	cmp	r1, r6
 800ebce:	d334      	bcc.n	800ec3a <rshift+0x96>
 800ebd0:	1a9b      	subs	r3, r3, r2
 800ebd2:	009b      	lsls	r3, r3, #2
 800ebd4:	1eea      	subs	r2, r5, #3
 800ebd6:	4296      	cmp	r6, r2
 800ebd8:	bf38      	it	cc
 800ebda:	2300      	movcc	r3, #0
 800ebdc:	4423      	add	r3, r4
 800ebde:	e015      	b.n	800ec0c <rshift+0x68>
 800ebe0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800ebe4:	f1c1 0820 	rsb	r8, r1, #32
 800ebe8:	40cf      	lsrs	r7, r1
 800ebea:	f105 0e04 	add.w	lr, r5, #4
 800ebee:	46a1      	mov	r9, r4
 800ebf0:	4576      	cmp	r6, lr
 800ebf2:	46f4      	mov	ip, lr
 800ebf4:	d815      	bhi.n	800ec22 <rshift+0x7e>
 800ebf6:	1a9a      	subs	r2, r3, r2
 800ebf8:	0092      	lsls	r2, r2, #2
 800ebfa:	3a04      	subs	r2, #4
 800ebfc:	3501      	adds	r5, #1
 800ebfe:	42ae      	cmp	r6, r5
 800ec00:	bf38      	it	cc
 800ec02:	2200      	movcc	r2, #0
 800ec04:	18a3      	adds	r3, r4, r2
 800ec06:	50a7      	str	r7, [r4, r2]
 800ec08:	b107      	cbz	r7, 800ec0c <rshift+0x68>
 800ec0a:	3304      	adds	r3, #4
 800ec0c:	1b1a      	subs	r2, r3, r4
 800ec0e:	42a3      	cmp	r3, r4
 800ec10:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ec14:	bf08      	it	eq
 800ec16:	2300      	moveq	r3, #0
 800ec18:	6102      	str	r2, [r0, #16]
 800ec1a:	bf08      	it	eq
 800ec1c:	6143      	streq	r3, [r0, #20]
 800ec1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ec22:	f8dc c000 	ldr.w	ip, [ip]
 800ec26:	fa0c fc08 	lsl.w	ip, ip, r8
 800ec2a:	ea4c 0707 	orr.w	r7, ip, r7
 800ec2e:	f849 7b04 	str.w	r7, [r9], #4
 800ec32:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ec36:	40cf      	lsrs	r7, r1
 800ec38:	e7da      	b.n	800ebf0 <rshift+0x4c>
 800ec3a:	f851 cb04 	ldr.w	ip, [r1], #4
 800ec3e:	f847 cf04 	str.w	ip, [r7, #4]!
 800ec42:	e7c3      	b.n	800ebcc <rshift+0x28>
 800ec44:	4623      	mov	r3, r4
 800ec46:	e7e1      	b.n	800ec0c <rshift+0x68>

0800ec48 <__hexdig_fun>:
 800ec48:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800ec4c:	2b09      	cmp	r3, #9
 800ec4e:	d802      	bhi.n	800ec56 <__hexdig_fun+0xe>
 800ec50:	3820      	subs	r0, #32
 800ec52:	b2c0      	uxtb	r0, r0
 800ec54:	4770      	bx	lr
 800ec56:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800ec5a:	2b05      	cmp	r3, #5
 800ec5c:	d801      	bhi.n	800ec62 <__hexdig_fun+0x1a>
 800ec5e:	3847      	subs	r0, #71	@ 0x47
 800ec60:	e7f7      	b.n	800ec52 <__hexdig_fun+0xa>
 800ec62:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800ec66:	2b05      	cmp	r3, #5
 800ec68:	d801      	bhi.n	800ec6e <__hexdig_fun+0x26>
 800ec6a:	3827      	subs	r0, #39	@ 0x27
 800ec6c:	e7f1      	b.n	800ec52 <__hexdig_fun+0xa>
 800ec6e:	2000      	movs	r0, #0
 800ec70:	4770      	bx	lr
	...

0800ec74 <__gethex>:
 800ec74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec78:	b085      	sub	sp, #20
 800ec7a:	468a      	mov	sl, r1
 800ec7c:	9302      	str	r3, [sp, #8]
 800ec7e:	680b      	ldr	r3, [r1, #0]
 800ec80:	9001      	str	r0, [sp, #4]
 800ec82:	4690      	mov	r8, r2
 800ec84:	1c9c      	adds	r4, r3, #2
 800ec86:	46a1      	mov	r9, r4
 800ec88:	f814 0b01 	ldrb.w	r0, [r4], #1
 800ec8c:	2830      	cmp	r0, #48	@ 0x30
 800ec8e:	d0fa      	beq.n	800ec86 <__gethex+0x12>
 800ec90:	eba9 0303 	sub.w	r3, r9, r3
 800ec94:	f1a3 0b02 	sub.w	fp, r3, #2
 800ec98:	f7ff ffd6 	bl	800ec48 <__hexdig_fun>
 800ec9c:	4605      	mov	r5, r0
 800ec9e:	2800      	cmp	r0, #0
 800eca0:	d168      	bne.n	800ed74 <__gethex+0x100>
 800eca2:	49a0      	ldr	r1, [pc, #640]	@ (800ef24 <__gethex+0x2b0>)
 800eca4:	2201      	movs	r2, #1
 800eca6:	4648      	mov	r0, r9
 800eca8:	f7ff fe24 	bl	800e8f4 <strncmp>
 800ecac:	4607      	mov	r7, r0
 800ecae:	2800      	cmp	r0, #0
 800ecb0:	d167      	bne.n	800ed82 <__gethex+0x10e>
 800ecb2:	f899 0001 	ldrb.w	r0, [r9, #1]
 800ecb6:	4626      	mov	r6, r4
 800ecb8:	f7ff ffc6 	bl	800ec48 <__hexdig_fun>
 800ecbc:	2800      	cmp	r0, #0
 800ecbe:	d062      	beq.n	800ed86 <__gethex+0x112>
 800ecc0:	4623      	mov	r3, r4
 800ecc2:	7818      	ldrb	r0, [r3, #0]
 800ecc4:	2830      	cmp	r0, #48	@ 0x30
 800ecc6:	4699      	mov	r9, r3
 800ecc8:	f103 0301 	add.w	r3, r3, #1
 800eccc:	d0f9      	beq.n	800ecc2 <__gethex+0x4e>
 800ecce:	f7ff ffbb 	bl	800ec48 <__hexdig_fun>
 800ecd2:	fab0 f580 	clz	r5, r0
 800ecd6:	096d      	lsrs	r5, r5, #5
 800ecd8:	f04f 0b01 	mov.w	fp, #1
 800ecdc:	464a      	mov	r2, r9
 800ecde:	4616      	mov	r6, r2
 800ece0:	3201      	adds	r2, #1
 800ece2:	7830      	ldrb	r0, [r6, #0]
 800ece4:	f7ff ffb0 	bl	800ec48 <__hexdig_fun>
 800ece8:	2800      	cmp	r0, #0
 800ecea:	d1f8      	bne.n	800ecde <__gethex+0x6a>
 800ecec:	498d      	ldr	r1, [pc, #564]	@ (800ef24 <__gethex+0x2b0>)
 800ecee:	2201      	movs	r2, #1
 800ecf0:	4630      	mov	r0, r6
 800ecf2:	f7ff fdff 	bl	800e8f4 <strncmp>
 800ecf6:	2800      	cmp	r0, #0
 800ecf8:	d13f      	bne.n	800ed7a <__gethex+0x106>
 800ecfa:	b944      	cbnz	r4, 800ed0e <__gethex+0x9a>
 800ecfc:	1c74      	adds	r4, r6, #1
 800ecfe:	4622      	mov	r2, r4
 800ed00:	4616      	mov	r6, r2
 800ed02:	3201      	adds	r2, #1
 800ed04:	7830      	ldrb	r0, [r6, #0]
 800ed06:	f7ff ff9f 	bl	800ec48 <__hexdig_fun>
 800ed0a:	2800      	cmp	r0, #0
 800ed0c:	d1f8      	bne.n	800ed00 <__gethex+0x8c>
 800ed0e:	1ba4      	subs	r4, r4, r6
 800ed10:	00a7      	lsls	r7, r4, #2
 800ed12:	7833      	ldrb	r3, [r6, #0]
 800ed14:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800ed18:	2b50      	cmp	r3, #80	@ 0x50
 800ed1a:	d13e      	bne.n	800ed9a <__gethex+0x126>
 800ed1c:	7873      	ldrb	r3, [r6, #1]
 800ed1e:	2b2b      	cmp	r3, #43	@ 0x2b
 800ed20:	d033      	beq.n	800ed8a <__gethex+0x116>
 800ed22:	2b2d      	cmp	r3, #45	@ 0x2d
 800ed24:	d034      	beq.n	800ed90 <__gethex+0x11c>
 800ed26:	1c71      	adds	r1, r6, #1
 800ed28:	2400      	movs	r4, #0
 800ed2a:	7808      	ldrb	r0, [r1, #0]
 800ed2c:	f7ff ff8c 	bl	800ec48 <__hexdig_fun>
 800ed30:	1e43      	subs	r3, r0, #1
 800ed32:	b2db      	uxtb	r3, r3
 800ed34:	2b18      	cmp	r3, #24
 800ed36:	d830      	bhi.n	800ed9a <__gethex+0x126>
 800ed38:	f1a0 0210 	sub.w	r2, r0, #16
 800ed3c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ed40:	f7ff ff82 	bl	800ec48 <__hexdig_fun>
 800ed44:	f100 3cff 	add.w	ip, r0, #4294967295
 800ed48:	fa5f fc8c 	uxtb.w	ip, ip
 800ed4c:	f1bc 0f18 	cmp.w	ip, #24
 800ed50:	f04f 030a 	mov.w	r3, #10
 800ed54:	d91e      	bls.n	800ed94 <__gethex+0x120>
 800ed56:	b104      	cbz	r4, 800ed5a <__gethex+0xe6>
 800ed58:	4252      	negs	r2, r2
 800ed5a:	4417      	add	r7, r2
 800ed5c:	f8ca 1000 	str.w	r1, [sl]
 800ed60:	b1ed      	cbz	r5, 800ed9e <__gethex+0x12a>
 800ed62:	f1bb 0f00 	cmp.w	fp, #0
 800ed66:	bf0c      	ite	eq
 800ed68:	2506      	moveq	r5, #6
 800ed6a:	2500      	movne	r5, #0
 800ed6c:	4628      	mov	r0, r5
 800ed6e:	b005      	add	sp, #20
 800ed70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed74:	2500      	movs	r5, #0
 800ed76:	462c      	mov	r4, r5
 800ed78:	e7b0      	b.n	800ecdc <__gethex+0x68>
 800ed7a:	2c00      	cmp	r4, #0
 800ed7c:	d1c7      	bne.n	800ed0e <__gethex+0x9a>
 800ed7e:	4627      	mov	r7, r4
 800ed80:	e7c7      	b.n	800ed12 <__gethex+0x9e>
 800ed82:	464e      	mov	r6, r9
 800ed84:	462f      	mov	r7, r5
 800ed86:	2501      	movs	r5, #1
 800ed88:	e7c3      	b.n	800ed12 <__gethex+0x9e>
 800ed8a:	2400      	movs	r4, #0
 800ed8c:	1cb1      	adds	r1, r6, #2
 800ed8e:	e7cc      	b.n	800ed2a <__gethex+0xb6>
 800ed90:	2401      	movs	r4, #1
 800ed92:	e7fb      	b.n	800ed8c <__gethex+0x118>
 800ed94:	fb03 0002 	mla	r0, r3, r2, r0
 800ed98:	e7ce      	b.n	800ed38 <__gethex+0xc4>
 800ed9a:	4631      	mov	r1, r6
 800ed9c:	e7de      	b.n	800ed5c <__gethex+0xe8>
 800ed9e:	eba6 0309 	sub.w	r3, r6, r9
 800eda2:	3b01      	subs	r3, #1
 800eda4:	4629      	mov	r1, r5
 800eda6:	2b07      	cmp	r3, #7
 800eda8:	dc0a      	bgt.n	800edc0 <__gethex+0x14c>
 800edaa:	9801      	ldr	r0, [sp, #4]
 800edac:	f000 faf4 	bl	800f398 <_Balloc>
 800edb0:	4604      	mov	r4, r0
 800edb2:	b940      	cbnz	r0, 800edc6 <__gethex+0x152>
 800edb4:	4b5c      	ldr	r3, [pc, #368]	@ (800ef28 <__gethex+0x2b4>)
 800edb6:	4602      	mov	r2, r0
 800edb8:	21e4      	movs	r1, #228	@ 0xe4
 800edba:	485c      	ldr	r0, [pc, #368]	@ (800ef2c <__gethex+0x2b8>)
 800edbc:	f001 fb5c 	bl	8010478 <__assert_func>
 800edc0:	3101      	adds	r1, #1
 800edc2:	105b      	asrs	r3, r3, #1
 800edc4:	e7ef      	b.n	800eda6 <__gethex+0x132>
 800edc6:	f100 0a14 	add.w	sl, r0, #20
 800edca:	2300      	movs	r3, #0
 800edcc:	4655      	mov	r5, sl
 800edce:	469b      	mov	fp, r3
 800edd0:	45b1      	cmp	r9, r6
 800edd2:	d337      	bcc.n	800ee44 <__gethex+0x1d0>
 800edd4:	f845 bb04 	str.w	fp, [r5], #4
 800edd8:	eba5 050a 	sub.w	r5, r5, sl
 800eddc:	10ad      	asrs	r5, r5, #2
 800edde:	6125      	str	r5, [r4, #16]
 800ede0:	4658      	mov	r0, fp
 800ede2:	f000 fbcb 	bl	800f57c <__hi0bits>
 800ede6:	016d      	lsls	r5, r5, #5
 800ede8:	f8d8 6000 	ldr.w	r6, [r8]
 800edec:	1a2d      	subs	r5, r5, r0
 800edee:	42b5      	cmp	r5, r6
 800edf0:	dd54      	ble.n	800ee9c <__gethex+0x228>
 800edf2:	1bad      	subs	r5, r5, r6
 800edf4:	4629      	mov	r1, r5
 800edf6:	4620      	mov	r0, r4
 800edf8:	f000 ff57 	bl	800fcaa <__any_on>
 800edfc:	4681      	mov	r9, r0
 800edfe:	b178      	cbz	r0, 800ee20 <__gethex+0x1ac>
 800ee00:	1e6b      	subs	r3, r5, #1
 800ee02:	1159      	asrs	r1, r3, #5
 800ee04:	f003 021f 	and.w	r2, r3, #31
 800ee08:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800ee0c:	f04f 0901 	mov.w	r9, #1
 800ee10:	fa09 f202 	lsl.w	r2, r9, r2
 800ee14:	420a      	tst	r2, r1
 800ee16:	d003      	beq.n	800ee20 <__gethex+0x1ac>
 800ee18:	454b      	cmp	r3, r9
 800ee1a:	dc36      	bgt.n	800ee8a <__gethex+0x216>
 800ee1c:	f04f 0902 	mov.w	r9, #2
 800ee20:	4629      	mov	r1, r5
 800ee22:	4620      	mov	r0, r4
 800ee24:	f7ff febe 	bl	800eba4 <rshift>
 800ee28:	442f      	add	r7, r5
 800ee2a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ee2e:	42bb      	cmp	r3, r7
 800ee30:	da42      	bge.n	800eeb8 <__gethex+0x244>
 800ee32:	9801      	ldr	r0, [sp, #4]
 800ee34:	4621      	mov	r1, r4
 800ee36:	f000 faef 	bl	800f418 <_Bfree>
 800ee3a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ee3c:	2300      	movs	r3, #0
 800ee3e:	6013      	str	r3, [r2, #0]
 800ee40:	25a3      	movs	r5, #163	@ 0xa3
 800ee42:	e793      	b.n	800ed6c <__gethex+0xf8>
 800ee44:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800ee48:	2a2e      	cmp	r2, #46	@ 0x2e
 800ee4a:	d012      	beq.n	800ee72 <__gethex+0x1fe>
 800ee4c:	2b20      	cmp	r3, #32
 800ee4e:	d104      	bne.n	800ee5a <__gethex+0x1e6>
 800ee50:	f845 bb04 	str.w	fp, [r5], #4
 800ee54:	f04f 0b00 	mov.w	fp, #0
 800ee58:	465b      	mov	r3, fp
 800ee5a:	7830      	ldrb	r0, [r6, #0]
 800ee5c:	9303      	str	r3, [sp, #12]
 800ee5e:	f7ff fef3 	bl	800ec48 <__hexdig_fun>
 800ee62:	9b03      	ldr	r3, [sp, #12]
 800ee64:	f000 000f 	and.w	r0, r0, #15
 800ee68:	4098      	lsls	r0, r3
 800ee6a:	ea4b 0b00 	orr.w	fp, fp, r0
 800ee6e:	3304      	adds	r3, #4
 800ee70:	e7ae      	b.n	800edd0 <__gethex+0x15c>
 800ee72:	45b1      	cmp	r9, r6
 800ee74:	d8ea      	bhi.n	800ee4c <__gethex+0x1d8>
 800ee76:	492b      	ldr	r1, [pc, #172]	@ (800ef24 <__gethex+0x2b0>)
 800ee78:	9303      	str	r3, [sp, #12]
 800ee7a:	2201      	movs	r2, #1
 800ee7c:	4630      	mov	r0, r6
 800ee7e:	f7ff fd39 	bl	800e8f4 <strncmp>
 800ee82:	9b03      	ldr	r3, [sp, #12]
 800ee84:	2800      	cmp	r0, #0
 800ee86:	d1e1      	bne.n	800ee4c <__gethex+0x1d8>
 800ee88:	e7a2      	b.n	800edd0 <__gethex+0x15c>
 800ee8a:	1ea9      	subs	r1, r5, #2
 800ee8c:	4620      	mov	r0, r4
 800ee8e:	f000 ff0c 	bl	800fcaa <__any_on>
 800ee92:	2800      	cmp	r0, #0
 800ee94:	d0c2      	beq.n	800ee1c <__gethex+0x1a8>
 800ee96:	f04f 0903 	mov.w	r9, #3
 800ee9a:	e7c1      	b.n	800ee20 <__gethex+0x1ac>
 800ee9c:	da09      	bge.n	800eeb2 <__gethex+0x23e>
 800ee9e:	1b75      	subs	r5, r6, r5
 800eea0:	4621      	mov	r1, r4
 800eea2:	9801      	ldr	r0, [sp, #4]
 800eea4:	462a      	mov	r2, r5
 800eea6:	f000 fcc7 	bl	800f838 <__lshift>
 800eeaa:	1b7f      	subs	r7, r7, r5
 800eeac:	4604      	mov	r4, r0
 800eeae:	f100 0a14 	add.w	sl, r0, #20
 800eeb2:	f04f 0900 	mov.w	r9, #0
 800eeb6:	e7b8      	b.n	800ee2a <__gethex+0x1b6>
 800eeb8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800eebc:	42bd      	cmp	r5, r7
 800eebe:	dd6f      	ble.n	800efa0 <__gethex+0x32c>
 800eec0:	1bed      	subs	r5, r5, r7
 800eec2:	42ae      	cmp	r6, r5
 800eec4:	dc34      	bgt.n	800ef30 <__gethex+0x2bc>
 800eec6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800eeca:	2b02      	cmp	r3, #2
 800eecc:	d022      	beq.n	800ef14 <__gethex+0x2a0>
 800eece:	2b03      	cmp	r3, #3
 800eed0:	d024      	beq.n	800ef1c <__gethex+0x2a8>
 800eed2:	2b01      	cmp	r3, #1
 800eed4:	d115      	bne.n	800ef02 <__gethex+0x28e>
 800eed6:	42ae      	cmp	r6, r5
 800eed8:	d113      	bne.n	800ef02 <__gethex+0x28e>
 800eeda:	2e01      	cmp	r6, #1
 800eedc:	d10b      	bne.n	800eef6 <__gethex+0x282>
 800eede:	9a02      	ldr	r2, [sp, #8]
 800eee0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800eee4:	6013      	str	r3, [r2, #0]
 800eee6:	2301      	movs	r3, #1
 800eee8:	6123      	str	r3, [r4, #16]
 800eeea:	f8ca 3000 	str.w	r3, [sl]
 800eeee:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800eef0:	2562      	movs	r5, #98	@ 0x62
 800eef2:	601c      	str	r4, [r3, #0]
 800eef4:	e73a      	b.n	800ed6c <__gethex+0xf8>
 800eef6:	1e71      	subs	r1, r6, #1
 800eef8:	4620      	mov	r0, r4
 800eefa:	f000 fed6 	bl	800fcaa <__any_on>
 800eefe:	2800      	cmp	r0, #0
 800ef00:	d1ed      	bne.n	800eede <__gethex+0x26a>
 800ef02:	9801      	ldr	r0, [sp, #4]
 800ef04:	4621      	mov	r1, r4
 800ef06:	f000 fa87 	bl	800f418 <_Bfree>
 800ef0a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ef0c:	2300      	movs	r3, #0
 800ef0e:	6013      	str	r3, [r2, #0]
 800ef10:	2550      	movs	r5, #80	@ 0x50
 800ef12:	e72b      	b.n	800ed6c <__gethex+0xf8>
 800ef14:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ef16:	2b00      	cmp	r3, #0
 800ef18:	d1f3      	bne.n	800ef02 <__gethex+0x28e>
 800ef1a:	e7e0      	b.n	800eede <__gethex+0x26a>
 800ef1c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ef1e:	2b00      	cmp	r3, #0
 800ef20:	d1dd      	bne.n	800eede <__gethex+0x26a>
 800ef22:	e7ee      	b.n	800ef02 <__gethex+0x28e>
 800ef24:	08010eec 	.word	0x08010eec
 800ef28:	08010f02 	.word	0x08010f02
 800ef2c:	08010f13 	.word	0x08010f13
 800ef30:	1e6f      	subs	r7, r5, #1
 800ef32:	f1b9 0f00 	cmp.w	r9, #0
 800ef36:	d130      	bne.n	800ef9a <__gethex+0x326>
 800ef38:	b127      	cbz	r7, 800ef44 <__gethex+0x2d0>
 800ef3a:	4639      	mov	r1, r7
 800ef3c:	4620      	mov	r0, r4
 800ef3e:	f000 feb4 	bl	800fcaa <__any_on>
 800ef42:	4681      	mov	r9, r0
 800ef44:	117a      	asrs	r2, r7, #5
 800ef46:	2301      	movs	r3, #1
 800ef48:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800ef4c:	f007 071f 	and.w	r7, r7, #31
 800ef50:	40bb      	lsls	r3, r7
 800ef52:	4213      	tst	r3, r2
 800ef54:	4629      	mov	r1, r5
 800ef56:	4620      	mov	r0, r4
 800ef58:	bf18      	it	ne
 800ef5a:	f049 0902 	orrne.w	r9, r9, #2
 800ef5e:	f7ff fe21 	bl	800eba4 <rshift>
 800ef62:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800ef66:	1b76      	subs	r6, r6, r5
 800ef68:	2502      	movs	r5, #2
 800ef6a:	f1b9 0f00 	cmp.w	r9, #0
 800ef6e:	d047      	beq.n	800f000 <__gethex+0x38c>
 800ef70:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ef74:	2b02      	cmp	r3, #2
 800ef76:	d015      	beq.n	800efa4 <__gethex+0x330>
 800ef78:	2b03      	cmp	r3, #3
 800ef7a:	d017      	beq.n	800efac <__gethex+0x338>
 800ef7c:	2b01      	cmp	r3, #1
 800ef7e:	d109      	bne.n	800ef94 <__gethex+0x320>
 800ef80:	f019 0f02 	tst.w	r9, #2
 800ef84:	d006      	beq.n	800ef94 <__gethex+0x320>
 800ef86:	f8da 3000 	ldr.w	r3, [sl]
 800ef8a:	ea49 0903 	orr.w	r9, r9, r3
 800ef8e:	f019 0f01 	tst.w	r9, #1
 800ef92:	d10e      	bne.n	800efb2 <__gethex+0x33e>
 800ef94:	f045 0510 	orr.w	r5, r5, #16
 800ef98:	e032      	b.n	800f000 <__gethex+0x38c>
 800ef9a:	f04f 0901 	mov.w	r9, #1
 800ef9e:	e7d1      	b.n	800ef44 <__gethex+0x2d0>
 800efa0:	2501      	movs	r5, #1
 800efa2:	e7e2      	b.n	800ef6a <__gethex+0x2f6>
 800efa4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800efa6:	f1c3 0301 	rsb	r3, r3, #1
 800efaa:	930f      	str	r3, [sp, #60]	@ 0x3c
 800efac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800efae:	2b00      	cmp	r3, #0
 800efb0:	d0f0      	beq.n	800ef94 <__gethex+0x320>
 800efb2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800efb6:	f104 0314 	add.w	r3, r4, #20
 800efba:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800efbe:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800efc2:	f04f 0c00 	mov.w	ip, #0
 800efc6:	4618      	mov	r0, r3
 800efc8:	f853 2b04 	ldr.w	r2, [r3], #4
 800efcc:	f1b2 3fff 	cmp.w	r2, #4294967295
 800efd0:	d01b      	beq.n	800f00a <__gethex+0x396>
 800efd2:	3201      	adds	r2, #1
 800efd4:	6002      	str	r2, [r0, #0]
 800efd6:	2d02      	cmp	r5, #2
 800efd8:	f104 0314 	add.w	r3, r4, #20
 800efdc:	d13c      	bne.n	800f058 <__gethex+0x3e4>
 800efde:	f8d8 2000 	ldr.w	r2, [r8]
 800efe2:	3a01      	subs	r2, #1
 800efe4:	42b2      	cmp	r2, r6
 800efe6:	d109      	bne.n	800effc <__gethex+0x388>
 800efe8:	1171      	asrs	r1, r6, #5
 800efea:	2201      	movs	r2, #1
 800efec:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800eff0:	f006 061f 	and.w	r6, r6, #31
 800eff4:	fa02 f606 	lsl.w	r6, r2, r6
 800eff8:	421e      	tst	r6, r3
 800effa:	d13a      	bne.n	800f072 <__gethex+0x3fe>
 800effc:	f045 0520 	orr.w	r5, r5, #32
 800f000:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f002:	601c      	str	r4, [r3, #0]
 800f004:	9b02      	ldr	r3, [sp, #8]
 800f006:	601f      	str	r7, [r3, #0]
 800f008:	e6b0      	b.n	800ed6c <__gethex+0xf8>
 800f00a:	4299      	cmp	r1, r3
 800f00c:	f843 cc04 	str.w	ip, [r3, #-4]
 800f010:	d8d9      	bhi.n	800efc6 <__gethex+0x352>
 800f012:	68a3      	ldr	r3, [r4, #8]
 800f014:	459b      	cmp	fp, r3
 800f016:	db17      	blt.n	800f048 <__gethex+0x3d4>
 800f018:	6861      	ldr	r1, [r4, #4]
 800f01a:	9801      	ldr	r0, [sp, #4]
 800f01c:	3101      	adds	r1, #1
 800f01e:	f000 f9bb 	bl	800f398 <_Balloc>
 800f022:	4681      	mov	r9, r0
 800f024:	b918      	cbnz	r0, 800f02e <__gethex+0x3ba>
 800f026:	4b1a      	ldr	r3, [pc, #104]	@ (800f090 <__gethex+0x41c>)
 800f028:	4602      	mov	r2, r0
 800f02a:	2184      	movs	r1, #132	@ 0x84
 800f02c:	e6c5      	b.n	800edba <__gethex+0x146>
 800f02e:	6922      	ldr	r2, [r4, #16]
 800f030:	3202      	adds	r2, #2
 800f032:	f104 010c 	add.w	r1, r4, #12
 800f036:	0092      	lsls	r2, r2, #2
 800f038:	300c      	adds	r0, #12
 800f03a:	f7ff fd52 	bl	800eae2 <memcpy>
 800f03e:	4621      	mov	r1, r4
 800f040:	9801      	ldr	r0, [sp, #4]
 800f042:	f000 f9e9 	bl	800f418 <_Bfree>
 800f046:	464c      	mov	r4, r9
 800f048:	6923      	ldr	r3, [r4, #16]
 800f04a:	1c5a      	adds	r2, r3, #1
 800f04c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f050:	6122      	str	r2, [r4, #16]
 800f052:	2201      	movs	r2, #1
 800f054:	615a      	str	r2, [r3, #20]
 800f056:	e7be      	b.n	800efd6 <__gethex+0x362>
 800f058:	6922      	ldr	r2, [r4, #16]
 800f05a:	455a      	cmp	r2, fp
 800f05c:	dd0b      	ble.n	800f076 <__gethex+0x402>
 800f05e:	2101      	movs	r1, #1
 800f060:	4620      	mov	r0, r4
 800f062:	f7ff fd9f 	bl	800eba4 <rshift>
 800f066:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f06a:	3701      	adds	r7, #1
 800f06c:	42bb      	cmp	r3, r7
 800f06e:	f6ff aee0 	blt.w	800ee32 <__gethex+0x1be>
 800f072:	2501      	movs	r5, #1
 800f074:	e7c2      	b.n	800effc <__gethex+0x388>
 800f076:	f016 061f 	ands.w	r6, r6, #31
 800f07a:	d0fa      	beq.n	800f072 <__gethex+0x3fe>
 800f07c:	4453      	add	r3, sl
 800f07e:	f1c6 0620 	rsb	r6, r6, #32
 800f082:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800f086:	f000 fa79 	bl	800f57c <__hi0bits>
 800f08a:	42b0      	cmp	r0, r6
 800f08c:	dbe7      	blt.n	800f05e <__gethex+0x3ea>
 800f08e:	e7f0      	b.n	800f072 <__gethex+0x3fe>
 800f090:	08010f02 	.word	0x08010f02

0800f094 <L_shift>:
 800f094:	f1c2 0208 	rsb	r2, r2, #8
 800f098:	0092      	lsls	r2, r2, #2
 800f09a:	b570      	push	{r4, r5, r6, lr}
 800f09c:	f1c2 0620 	rsb	r6, r2, #32
 800f0a0:	6843      	ldr	r3, [r0, #4]
 800f0a2:	6804      	ldr	r4, [r0, #0]
 800f0a4:	fa03 f506 	lsl.w	r5, r3, r6
 800f0a8:	432c      	orrs	r4, r5
 800f0aa:	40d3      	lsrs	r3, r2
 800f0ac:	6004      	str	r4, [r0, #0]
 800f0ae:	f840 3f04 	str.w	r3, [r0, #4]!
 800f0b2:	4288      	cmp	r0, r1
 800f0b4:	d3f4      	bcc.n	800f0a0 <L_shift+0xc>
 800f0b6:	bd70      	pop	{r4, r5, r6, pc}

0800f0b8 <__match>:
 800f0b8:	b530      	push	{r4, r5, lr}
 800f0ba:	6803      	ldr	r3, [r0, #0]
 800f0bc:	3301      	adds	r3, #1
 800f0be:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f0c2:	b914      	cbnz	r4, 800f0ca <__match+0x12>
 800f0c4:	6003      	str	r3, [r0, #0]
 800f0c6:	2001      	movs	r0, #1
 800f0c8:	bd30      	pop	{r4, r5, pc}
 800f0ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f0ce:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800f0d2:	2d19      	cmp	r5, #25
 800f0d4:	bf98      	it	ls
 800f0d6:	3220      	addls	r2, #32
 800f0d8:	42a2      	cmp	r2, r4
 800f0da:	d0f0      	beq.n	800f0be <__match+0x6>
 800f0dc:	2000      	movs	r0, #0
 800f0de:	e7f3      	b.n	800f0c8 <__match+0x10>

0800f0e0 <__hexnan>:
 800f0e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f0e4:	680b      	ldr	r3, [r1, #0]
 800f0e6:	6801      	ldr	r1, [r0, #0]
 800f0e8:	115e      	asrs	r6, r3, #5
 800f0ea:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800f0ee:	f013 031f 	ands.w	r3, r3, #31
 800f0f2:	b087      	sub	sp, #28
 800f0f4:	bf18      	it	ne
 800f0f6:	3604      	addne	r6, #4
 800f0f8:	2500      	movs	r5, #0
 800f0fa:	1f37      	subs	r7, r6, #4
 800f0fc:	4682      	mov	sl, r0
 800f0fe:	4690      	mov	r8, r2
 800f100:	9301      	str	r3, [sp, #4]
 800f102:	f846 5c04 	str.w	r5, [r6, #-4]
 800f106:	46b9      	mov	r9, r7
 800f108:	463c      	mov	r4, r7
 800f10a:	9502      	str	r5, [sp, #8]
 800f10c:	46ab      	mov	fp, r5
 800f10e:	784a      	ldrb	r2, [r1, #1]
 800f110:	1c4b      	adds	r3, r1, #1
 800f112:	9303      	str	r3, [sp, #12]
 800f114:	b342      	cbz	r2, 800f168 <__hexnan+0x88>
 800f116:	4610      	mov	r0, r2
 800f118:	9105      	str	r1, [sp, #20]
 800f11a:	9204      	str	r2, [sp, #16]
 800f11c:	f7ff fd94 	bl	800ec48 <__hexdig_fun>
 800f120:	2800      	cmp	r0, #0
 800f122:	d151      	bne.n	800f1c8 <__hexnan+0xe8>
 800f124:	9a04      	ldr	r2, [sp, #16]
 800f126:	9905      	ldr	r1, [sp, #20]
 800f128:	2a20      	cmp	r2, #32
 800f12a:	d818      	bhi.n	800f15e <__hexnan+0x7e>
 800f12c:	9b02      	ldr	r3, [sp, #8]
 800f12e:	459b      	cmp	fp, r3
 800f130:	dd13      	ble.n	800f15a <__hexnan+0x7a>
 800f132:	454c      	cmp	r4, r9
 800f134:	d206      	bcs.n	800f144 <__hexnan+0x64>
 800f136:	2d07      	cmp	r5, #7
 800f138:	dc04      	bgt.n	800f144 <__hexnan+0x64>
 800f13a:	462a      	mov	r2, r5
 800f13c:	4649      	mov	r1, r9
 800f13e:	4620      	mov	r0, r4
 800f140:	f7ff ffa8 	bl	800f094 <L_shift>
 800f144:	4544      	cmp	r4, r8
 800f146:	d952      	bls.n	800f1ee <__hexnan+0x10e>
 800f148:	2300      	movs	r3, #0
 800f14a:	f1a4 0904 	sub.w	r9, r4, #4
 800f14e:	f844 3c04 	str.w	r3, [r4, #-4]
 800f152:	f8cd b008 	str.w	fp, [sp, #8]
 800f156:	464c      	mov	r4, r9
 800f158:	461d      	mov	r5, r3
 800f15a:	9903      	ldr	r1, [sp, #12]
 800f15c:	e7d7      	b.n	800f10e <__hexnan+0x2e>
 800f15e:	2a29      	cmp	r2, #41	@ 0x29
 800f160:	d157      	bne.n	800f212 <__hexnan+0x132>
 800f162:	3102      	adds	r1, #2
 800f164:	f8ca 1000 	str.w	r1, [sl]
 800f168:	f1bb 0f00 	cmp.w	fp, #0
 800f16c:	d051      	beq.n	800f212 <__hexnan+0x132>
 800f16e:	454c      	cmp	r4, r9
 800f170:	d206      	bcs.n	800f180 <__hexnan+0xa0>
 800f172:	2d07      	cmp	r5, #7
 800f174:	dc04      	bgt.n	800f180 <__hexnan+0xa0>
 800f176:	462a      	mov	r2, r5
 800f178:	4649      	mov	r1, r9
 800f17a:	4620      	mov	r0, r4
 800f17c:	f7ff ff8a 	bl	800f094 <L_shift>
 800f180:	4544      	cmp	r4, r8
 800f182:	d936      	bls.n	800f1f2 <__hexnan+0x112>
 800f184:	f1a8 0204 	sub.w	r2, r8, #4
 800f188:	4623      	mov	r3, r4
 800f18a:	f853 1b04 	ldr.w	r1, [r3], #4
 800f18e:	f842 1f04 	str.w	r1, [r2, #4]!
 800f192:	429f      	cmp	r7, r3
 800f194:	d2f9      	bcs.n	800f18a <__hexnan+0xaa>
 800f196:	1b3b      	subs	r3, r7, r4
 800f198:	f023 0303 	bic.w	r3, r3, #3
 800f19c:	3304      	adds	r3, #4
 800f19e:	3401      	adds	r4, #1
 800f1a0:	3e03      	subs	r6, #3
 800f1a2:	42b4      	cmp	r4, r6
 800f1a4:	bf88      	it	hi
 800f1a6:	2304      	movhi	r3, #4
 800f1a8:	4443      	add	r3, r8
 800f1aa:	2200      	movs	r2, #0
 800f1ac:	f843 2b04 	str.w	r2, [r3], #4
 800f1b0:	429f      	cmp	r7, r3
 800f1b2:	d2fb      	bcs.n	800f1ac <__hexnan+0xcc>
 800f1b4:	683b      	ldr	r3, [r7, #0]
 800f1b6:	b91b      	cbnz	r3, 800f1c0 <__hexnan+0xe0>
 800f1b8:	4547      	cmp	r7, r8
 800f1ba:	d128      	bne.n	800f20e <__hexnan+0x12e>
 800f1bc:	2301      	movs	r3, #1
 800f1be:	603b      	str	r3, [r7, #0]
 800f1c0:	2005      	movs	r0, #5
 800f1c2:	b007      	add	sp, #28
 800f1c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f1c8:	3501      	adds	r5, #1
 800f1ca:	2d08      	cmp	r5, #8
 800f1cc:	f10b 0b01 	add.w	fp, fp, #1
 800f1d0:	dd06      	ble.n	800f1e0 <__hexnan+0x100>
 800f1d2:	4544      	cmp	r4, r8
 800f1d4:	d9c1      	bls.n	800f15a <__hexnan+0x7a>
 800f1d6:	2300      	movs	r3, #0
 800f1d8:	f844 3c04 	str.w	r3, [r4, #-4]
 800f1dc:	2501      	movs	r5, #1
 800f1de:	3c04      	subs	r4, #4
 800f1e0:	6822      	ldr	r2, [r4, #0]
 800f1e2:	f000 000f 	and.w	r0, r0, #15
 800f1e6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800f1ea:	6020      	str	r0, [r4, #0]
 800f1ec:	e7b5      	b.n	800f15a <__hexnan+0x7a>
 800f1ee:	2508      	movs	r5, #8
 800f1f0:	e7b3      	b.n	800f15a <__hexnan+0x7a>
 800f1f2:	9b01      	ldr	r3, [sp, #4]
 800f1f4:	2b00      	cmp	r3, #0
 800f1f6:	d0dd      	beq.n	800f1b4 <__hexnan+0xd4>
 800f1f8:	f1c3 0320 	rsb	r3, r3, #32
 800f1fc:	f04f 32ff 	mov.w	r2, #4294967295
 800f200:	40da      	lsrs	r2, r3
 800f202:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800f206:	4013      	ands	r3, r2
 800f208:	f846 3c04 	str.w	r3, [r6, #-4]
 800f20c:	e7d2      	b.n	800f1b4 <__hexnan+0xd4>
 800f20e:	3f04      	subs	r7, #4
 800f210:	e7d0      	b.n	800f1b4 <__hexnan+0xd4>
 800f212:	2004      	movs	r0, #4
 800f214:	e7d5      	b.n	800f1c2 <__hexnan+0xe2>
	...

0800f218 <sbrk_aligned>:
 800f218:	b570      	push	{r4, r5, r6, lr}
 800f21a:	4e0f      	ldr	r6, [pc, #60]	@ (800f258 <sbrk_aligned+0x40>)
 800f21c:	460c      	mov	r4, r1
 800f21e:	6831      	ldr	r1, [r6, #0]
 800f220:	4605      	mov	r5, r0
 800f222:	b911      	cbnz	r1, 800f22a <sbrk_aligned+0x12>
 800f224:	f001 f918 	bl	8010458 <_sbrk_r>
 800f228:	6030      	str	r0, [r6, #0]
 800f22a:	4621      	mov	r1, r4
 800f22c:	4628      	mov	r0, r5
 800f22e:	f001 f913 	bl	8010458 <_sbrk_r>
 800f232:	1c43      	adds	r3, r0, #1
 800f234:	d103      	bne.n	800f23e <sbrk_aligned+0x26>
 800f236:	f04f 34ff 	mov.w	r4, #4294967295
 800f23a:	4620      	mov	r0, r4
 800f23c:	bd70      	pop	{r4, r5, r6, pc}
 800f23e:	1cc4      	adds	r4, r0, #3
 800f240:	f024 0403 	bic.w	r4, r4, #3
 800f244:	42a0      	cmp	r0, r4
 800f246:	d0f8      	beq.n	800f23a <sbrk_aligned+0x22>
 800f248:	1a21      	subs	r1, r4, r0
 800f24a:	4628      	mov	r0, r5
 800f24c:	f001 f904 	bl	8010458 <_sbrk_r>
 800f250:	3001      	adds	r0, #1
 800f252:	d1f2      	bne.n	800f23a <sbrk_aligned+0x22>
 800f254:	e7ef      	b.n	800f236 <sbrk_aligned+0x1e>
 800f256:	bf00      	nop
 800f258:	2000409c 	.word	0x2000409c

0800f25c <_malloc_r>:
 800f25c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f260:	1ccd      	adds	r5, r1, #3
 800f262:	f025 0503 	bic.w	r5, r5, #3
 800f266:	3508      	adds	r5, #8
 800f268:	2d0c      	cmp	r5, #12
 800f26a:	bf38      	it	cc
 800f26c:	250c      	movcc	r5, #12
 800f26e:	2d00      	cmp	r5, #0
 800f270:	4606      	mov	r6, r0
 800f272:	db01      	blt.n	800f278 <_malloc_r+0x1c>
 800f274:	42a9      	cmp	r1, r5
 800f276:	d904      	bls.n	800f282 <_malloc_r+0x26>
 800f278:	230c      	movs	r3, #12
 800f27a:	6033      	str	r3, [r6, #0]
 800f27c:	2000      	movs	r0, #0
 800f27e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f282:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800f358 <_malloc_r+0xfc>
 800f286:	f000 f87b 	bl	800f380 <__malloc_lock>
 800f28a:	f8d8 3000 	ldr.w	r3, [r8]
 800f28e:	461c      	mov	r4, r3
 800f290:	bb44      	cbnz	r4, 800f2e4 <_malloc_r+0x88>
 800f292:	4629      	mov	r1, r5
 800f294:	4630      	mov	r0, r6
 800f296:	f7ff ffbf 	bl	800f218 <sbrk_aligned>
 800f29a:	1c43      	adds	r3, r0, #1
 800f29c:	4604      	mov	r4, r0
 800f29e:	d158      	bne.n	800f352 <_malloc_r+0xf6>
 800f2a0:	f8d8 4000 	ldr.w	r4, [r8]
 800f2a4:	4627      	mov	r7, r4
 800f2a6:	2f00      	cmp	r7, #0
 800f2a8:	d143      	bne.n	800f332 <_malloc_r+0xd6>
 800f2aa:	2c00      	cmp	r4, #0
 800f2ac:	d04b      	beq.n	800f346 <_malloc_r+0xea>
 800f2ae:	6823      	ldr	r3, [r4, #0]
 800f2b0:	4639      	mov	r1, r7
 800f2b2:	4630      	mov	r0, r6
 800f2b4:	eb04 0903 	add.w	r9, r4, r3
 800f2b8:	f001 f8ce 	bl	8010458 <_sbrk_r>
 800f2bc:	4581      	cmp	r9, r0
 800f2be:	d142      	bne.n	800f346 <_malloc_r+0xea>
 800f2c0:	6821      	ldr	r1, [r4, #0]
 800f2c2:	1a6d      	subs	r5, r5, r1
 800f2c4:	4629      	mov	r1, r5
 800f2c6:	4630      	mov	r0, r6
 800f2c8:	f7ff ffa6 	bl	800f218 <sbrk_aligned>
 800f2cc:	3001      	adds	r0, #1
 800f2ce:	d03a      	beq.n	800f346 <_malloc_r+0xea>
 800f2d0:	6823      	ldr	r3, [r4, #0]
 800f2d2:	442b      	add	r3, r5
 800f2d4:	6023      	str	r3, [r4, #0]
 800f2d6:	f8d8 3000 	ldr.w	r3, [r8]
 800f2da:	685a      	ldr	r2, [r3, #4]
 800f2dc:	bb62      	cbnz	r2, 800f338 <_malloc_r+0xdc>
 800f2de:	f8c8 7000 	str.w	r7, [r8]
 800f2e2:	e00f      	b.n	800f304 <_malloc_r+0xa8>
 800f2e4:	6822      	ldr	r2, [r4, #0]
 800f2e6:	1b52      	subs	r2, r2, r5
 800f2e8:	d420      	bmi.n	800f32c <_malloc_r+0xd0>
 800f2ea:	2a0b      	cmp	r2, #11
 800f2ec:	d917      	bls.n	800f31e <_malloc_r+0xc2>
 800f2ee:	1961      	adds	r1, r4, r5
 800f2f0:	42a3      	cmp	r3, r4
 800f2f2:	6025      	str	r5, [r4, #0]
 800f2f4:	bf18      	it	ne
 800f2f6:	6059      	strne	r1, [r3, #4]
 800f2f8:	6863      	ldr	r3, [r4, #4]
 800f2fa:	bf08      	it	eq
 800f2fc:	f8c8 1000 	streq.w	r1, [r8]
 800f300:	5162      	str	r2, [r4, r5]
 800f302:	604b      	str	r3, [r1, #4]
 800f304:	4630      	mov	r0, r6
 800f306:	f000 f841 	bl	800f38c <__malloc_unlock>
 800f30a:	f104 000b 	add.w	r0, r4, #11
 800f30e:	1d23      	adds	r3, r4, #4
 800f310:	f020 0007 	bic.w	r0, r0, #7
 800f314:	1ac2      	subs	r2, r0, r3
 800f316:	bf1c      	itt	ne
 800f318:	1a1b      	subne	r3, r3, r0
 800f31a:	50a3      	strne	r3, [r4, r2]
 800f31c:	e7af      	b.n	800f27e <_malloc_r+0x22>
 800f31e:	6862      	ldr	r2, [r4, #4]
 800f320:	42a3      	cmp	r3, r4
 800f322:	bf0c      	ite	eq
 800f324:	f8c8 2000 	streq.w	r2, [r8]
 800f328:	605a      	strne	r2, [r3, #4]
 800f32a:	e7eb      	b.n	800f304 <_malloc_r+0xa8>
 800f32c:	4623      	mov	r3, r4
 800f32e:	6864      	ldr	r4, [r4, #4]
 800f330:	e7ae      	b.n	800f290 <_malloc_r+0x34>
 800f332:	463c      	mov	r4, r7
 800f334:	687f      	ldr	r7, [r7, #4]
 800f336:	e7b6      	b.n	800f2a6 <_malloc_r+0x4a>
 800f338:	461a      	mov	r2, r3
 800f33a:	685b      	ldr	r3, [r3, #4]
 800f33c:	42a3      	cmp	r3, r4
 800f33e:	d1fb      	bne.n	800f338 <_malloc_r+0xdc>
 800f340:	2300      	movs	r3, #0
 800f342:	6053      	str	r3, [r2, #4]
 800f344:	e7de      	b.n	800f304 <_malloc_r+0xa8>
 800f346:	230c      	movs	r3, #12
 800f348:	6033      	str	r3, [r6, #0]
 800f34a:	4630      	mov	r0, r6
 800f34c:	f000 f81e 	bl	800f38c <__malloc_unlock>
 800f350:	e794      	b.n	800f27c <_malloc_r+0x20>
 800f352:	6005      	str	r5, [r0, #0]
 800f354:	e7d6      	b.n	800f304 <_malloc_r+0xa8>
 800f356:	bf00      	nop
 800f358:	200040a0 	.word	0x200040a0

0800f35c <__ascii_mbtowc>:
 800f35c:	b082      	sub	sp, #8
 800f35e:	b901      	cbnz	r1, 800f362 <__ascii_mbtowc+0x6>
 800f360:	a901      	add	r1, sp, #4
 800f362:	b142      	cbz	r2, 800f376 <__ascii_mbtowc+0x1a>
 800f364:	b14b      	cbz	r3, 800f37a <__ascii_mbtowc+0x1e>
 800f366:	7813      	ldrb	r3, [r2, #0]
 800f368:	600b      	str	r3, [r1, #0]
 800f36a:	7812      	ldrb	r2, [r2, #0]
 800f36c:	1e10      	subs	r0, r2, #0
 800f36e:	bf18      	it	ne
 800f370:	2001      	movne	r0, #1
 800f372:	b002      	add	sp, #8
 800f374:	4770      	bx	lr
 800f376:	4610      	mov	r0, r2
 800f378:	e7fb      	b.n	800f372 <__ascii_mbtowc+0x16>
 800f37a:	f06f 0001 	mvn.w	r0, #1
 800f37e:	e7f8      	b.n	800f372 <__ascii_mbtowc+0x16>

0800f380 <__malloc_lock>:
 800f380:	4801      	ldr	r0, [pc, #4]	@ (800f388 <__malloc_lock+0x8>)
 800f382:	f7ff bbac 	b.w	800eade <__retarget_lock_acquire_recursive>
 800f386:	bf00      	nop
 800f388:	20004098 	.word	0x20004098

0800f38c <__malloc_unlock>:
 800f38c:	4801      	ldr	r0, [pc, #4]	@ (800f394 <__malloc_unlock+0x8>)
 800f38e:	f7ff bba7 	b.w	800eae0 <__retarget_lock_release_recursive>
 800f392:	bf00      	nop
 800f394:	20004098 	.word	0x20004098

0800f398 <_Balloc>:
 800f398:	b570      	push	{r4, r5, r6, lr}
 800f39a:	69c6      	ldr	r6, [r0, #28]
 800f39c:	4604      	mov	r4, r0
 800f39e:	460d      	mov	r5, r1
 800f3a0:	b976      	cbnz	r6, 800f3c0 <_Balloc+0x28>
 800f3a2:	2010      	movs	r0, #16
 800f3a4:	f001 f89a 	bl	80104dc <malloc>
 800f3a8:	4602      	mov	r2, r0
 800f3aa:	61e0      	str	r0, [r4, #28]
 800f3ac:	b920      	cbnz	r0, 800f3b8 <_Balloc+0x20>
 800f3ae:	4b18      	ldr	r3, [pc, #96]	@ (800f410 <_Balloc+0x78>)
 800f3b0:	4818      	ldr	r0, [pc, #96]	@ (800f414 <_Balloc+0x7c>)
 800f3b2:	216b      	movs	r1, #107	@ 0x6b
 800f3b4:	f001 f860 	bl	8010478 <__assert_func>
 800f3b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f3bc:	6006      	str	r6, [r0, #0]
 800f3be:	60c6      	str	r6, [r0, #12]
 800f3c0:	69e6      	ldr	r6, [r4, #28]
 800f3c2:	68f3      	ldr	r3, [r6, #12]
 800f3c4:	b183      	cbz	r3, 800f3e8 <_Balloc+0x50>
 800f3c6:	69e3      	ldr	r3, [r4, #28]
 800f3c8:	68db      	ldr	r3, [r3, #12]
 800f3ca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f3ce:	b9b8      	cbnz	r0, 800f400 <_Balloc+0x68>
 800f3d0:	2101      	movs	r1, #1
 800f3d2:	fa01 f605 	lsl.w	r6, r1, r5
 800f3d6:	1d72      	adds	r2, r6, #5
 800f3d8:	0092      	lsls	r2, r2, #2
 800f3da:	4620      	mov	r0, r4
 800f3dc:	f001 f86a 	bl	80104b4 <_calloc_r>
 800f3e0:	b160      	cbz	r0, 800f3fc <_Balloc+0x64>
 800f3e2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f3e6:	e00e      	b.n	800f406 <_Balloc+0x6e>
 800f3e8:	2221      	movs	r2, #33	@ 0x21
 800f3ea:	2104      	movs	r1, #4
 800f3ec:	4620      	mov	r0, r4
 800f3ee:	f001 f861 	bl	80104b4 <_calloc_r>
 800f3f2:	69e3      	ldr	r3, [r4, #28]
 800f3f4:	60f0      	str	r0, [r6, #12]
 800f3f6:	68db      	ldr	r3, [r3, #12]
 800f3f8:	2b00      	cmp	r3, #0
 800f3fa:	d1e4      	bne.n	800f3c6 <_Balloc+0x2e>
 800f3fc:	2000      	movs	r0, #0
 800f3fe:	bd70      	pop	{r4, r5, r6, pc}
 800f400:	6802      	ldr	r2, [r0, #0]
 800f402:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f406:	2300      	movs	r3, #0
 800f408:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f40c:	e7f7      	b.n	800f3fe <_Balloc+0x66>
 800f40e:	bf00      	nop
 800f410:	08010f73 	.word	0x08010f73
 800f414:	08010f8a 	.word	0x08010f8a

0800f418 <_Bfree>:
 800f418:	b570      	push	{r4, r5, r6, lr}
 800f41a:	69c6      	ldr	r6, [r0, #28]
 800f41c:	4605      	mov	r5, r0
 800f41e:	460c      	mov	r4, r1
 800f420:	b976      	cbnz	r6, 800f440 <_Bfree+0x28>
 800f422:	2010      	movs	r0, #16
 800f424:	f001 f85a 	bl	80104dc <malloc>
 800f428:	4602      	mov	r2, r0
 800f42a:	61e8      	str	r0, [r5, #28]
 800f42c:	b920      	cbnz	r0, 800f438 <_Bfree+0x20>
 800f42e:	4b09      	ldr	r3, [pc, #36]	@ (800f454 <_Bfree+0x3c>)
 800f430:	4809      	ldr	r0, [pc, #36]	@ (800f458 <_Bfree+0x40>)
 800f432:	218f      	movs	r1, #143	@ 0x8f
 800f434:	f001 f820 	bl	8010478 <__assert_func>
 800f438:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f43c:	6006      	str	r6, [r0, #0]
 800f43e:	60c6      	str	r6, [r0, #12]
 800f440:	b13c      	cbz	r4, 800f452 <_Bfree+0x3a>
 800f442:	69eb      	ldr	r3, [r5, #28]
 800f444:	6862      	ldr	r2, [r4, #4]
 800f446:	68db      	ldr	r3, [r3, #12]
 800f448:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f44c:	6021      	str	r1, [r4, #0]
 800f44e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f452:	bd70      	pop	{r4, r5, r6, pc}
 800f454:	08010f73 	.word	0x08010f73
 800f458:	08010f8a 	.word	0x08010f8a

0800f45c <__multadd>:
 800f45c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f460:	690d      	ldr	r5, [r1, #16]
 800f462:	4607      	mov	r7, r0
 800f464:	460c      	mov	r4, r1
 800f466:	461e      	mov	r6, r3
 800f468:	f101 0c14 	add.w	ip, r1, #20
 800f46c:	2000      	movs	r0, #0
 800f46e:	f8dc 3000 	ldr.w	r3, [ip]
 800f472:	b299      	uxth	r1, r3
 800f474:	fb02 6101 	mla	r1, r2, r1, r6
 800f478:	0c1e      	lsrs	r6, r3, #16
 800f47a:	0c0b      	lsrs	r3, r1, #16
 800f47c:	fb02 3306 	mla	r3, r2, r6, r3
 800f480:	b289      	uxth	r1, r1
 800f482:	3001      	adds	r0, #1
 800f484:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f488:	4285      	cmp	r5, r0
 800f48a:	f84c 1b04 	str.w	r1, [ip], #4
 800f48e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f492:	dcec      	bgt.n	800f46e <__multadd+0x12>
 800f494:	b30e      	cbz	r6, 800f4da <__multadd+0x7e>
 800f496:	68a3      	ldr	r3, [r4, #8]
 800f498:	42ab      	cmp	r3, r5
 800f49a:	dc19      	bgt.n	800f4d0 <__multadd+0x74>
 800f49c:	6861      	ldr	r1, [r4, #4]
 800f49e:	4638      	mov	r0, r7
 800f4a0:	3101      	adds	r1, #1
 800f4a2:	f7ff ff79 	bl	800f398 <_Balloc>
 800f4a6:	4680      	mov	r8, r0
 800f4a8:	b928      	cbnz	r0, 800f4b6 <__multadd+0x5a>
 800f4aa:	4602      	mov	r2, r0
 800f4ac:	4b0c      	ldr	r3, [pc, #48]	@ (800f4e0 <__multadd+0x84>)
 800f4ae:	480d      	ldr	r0, [pc, #52]	@ (800f4e4 <__multadd+0x88>)
 800f4b0:	21ba      	movs	r1, #186	@ 0xba
 800f4b2:	f000 ffe1 	bl	8010478 <__assert_func>
 800f4b6:	6922      	ldr	r2, [r4, #16]
 800f4b8:	3202      	adds	r2, #2
 800f4ba:	f104 010c 	add.w	r1, r4, #12
 800f4be:	0092      	lsls	r2, r2, #2
 800f4c0:	300c      	adds	r0, #12
 800f4c2:	f7ff fb0e 	bl	800eae2 <memcpy>
 800f4c6:	4621      	mov	r1, r4
 800f4c8:	4638      	mov	r0, r7
 800f4ca:	f7ff ffa5 	bl	800f418 <_Bfree>
 800f4ce:	4644      	mov	r4, r8
 800f4d0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f4d4:	3501      	adds	r5, #1
 800f4d6:	615e      	str	r6, [r3, #20]
 800f4d8:	6125      	str	r5, [r4, #16]
 800f4da:	4620      	mov	r0, r4
 800f4dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f4e0:	08010f02 	.word	0x08010f02
 800f4e4:	08010f8a 	.word	0x08010f8a

0800f4e8 <__s2b>:
 800f4e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f4ec:	460c      	mov	r4, r1
 800f4ee:	4615      	mov	r5, r2
 800f4f0:	461f      	mov	r7, r3
 800f4f2:	2209      	movs	r2, #9
 800f4f4:	3308      	adds	r3, #8
 800f4f6:	4606      	mov	r6, r0
 800f4f8:	fb93 f3f2 	sdiv	r3, r3, r2
 800f4fc:	2100      	movs	r1, #0
 800f4fe:	2201      	movs	r2, #1
 800f500:	429a      	cmp	r2, r3
 800f502:	db09      	blt.n	800f518 <__s2b+0x30>
 800f504:	4630      	mov	r0, r6
 800f506:	f7ff ff47 	bl	800f398 <_Balloc>
 800f50a:	b940      	cbnz	r0, 800f51e <__s2b+0x36>
 800f50c:	4602      	mov	r2, r0
 800f50e:	4b19      	ldr	r3, [pc, #100]	@ (800f574 <__s2b+0x8c>)
 800f510:	4819      	ldr	r0, [pc, #100]	@ (800f578 <__s2b+0x90>)
 800f512:	21d3      	movs	r1, #211	@ 0xd3
 800f514:	f000 ffb0 	bl	8010478 <__assert_func>
 800f518:	0052      	lsls	r2, r2, #1
 800f51a:	3101      	adds	r1, #1
 800f51c:	e7f0      	b.n	800f500 <__s2b+0x18>
 800f51e:	9b08      	ldr	r3, [sp, #32]
 800f520:	6143      	str	r3, [r0, #20]
 800f522:	2d09      	cmp	r5, #9
 800f524:	f04f 0301 	mov.w	r3, #1
 800f528:	6103      	str	r3, [r0, #16]
 800f52a:	dd16      	ble.n	800f55a <__s2b+0x72>
 800f52c:	f104 0909 	add.w	r9, r4, #9
 800f530:	46c8      	mov	r8, r9
 800f532:	442c      	add	r4, r5
 800f534:	f818 3b01 	ldrb.w	r3, [r8], #1
 800f538:	4601      	mov	r1, r0
 800f53a:	3b30      	subs	r3, #48	@ 0x30
 800f53c:	220a      	movs	r2, #10
 800f53e:	4630      	mov	r0, r6
 800f540:	f7ff ff8c 	bl	800f45c <__multadd>
 800f544:	45a0      	cmp	r8, r4
 800f546:	d1f5      	bne.n	800f534 <__s2b+0x4c>
 800f548:	f1a5 0408 	sub.w	r4, r5, #8
 800f54c:	444c      	add	r4, r9
 800f54e:	1b2d      	subs	r5, r5, r4
 800f550:	1963      	adds	r3, r4, r5
 800f552:	42bb      	cmp	r3, r7
 800f554:	db04      	blt.n	800f560 <__s2b+0x78>
 800f556:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f55a:	340a      	adds	r4, #10
 800f55c:	2509      	movs	r5, #9
 800f55e:	e7f6      	b.n	800f54e <__s2b+0x66>
 800f560:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f564:	4601      	mov	r1, r0
 800f566:	3b30      	subs	r3, #48	@ 0x30
 800f568:	220a      	movs	r2, #10
 800f56a:	4630      	mov	r0, r6
 800f56c:	f7ff ff76 	bl	800f45c <__multadd>
 800f570:	e7ee      	b.n	800f550 <__s2b+0x68>
 800f572:	bf00      	nop
 800f574:	08010f02 	.word	0x08010f02
 800f578:	08010f8a 	.word	0x08010f8a

0800f57c <__hi0bits>:
 800f57c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800f580:	4603      	mov	r3, r0
 800f582:	bf36      	itet	cc
 800f584:	0403      	lslcc	r3, r0, #16
 800f586:	2000      	movcs	r0, #0
 800f588:	2010      	movcc	r0, #16
 800f58a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800f58e:	bf3c      	itt	cc
 800f590:	021b      	lslcc	r3, r3, #8
 800f592:	3008      	addcc	r0, #8
 800f594:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f598:	bf3c      	itt	cc
 800f59a:	011b      	lslcc	r3, r3, #4
 800f59c:	3004      	addcc	r0, #4
 800f59e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f5a2:	bf3c      	itt	cc
 800f5a4:	009b      	lslcc	r3, r3, #2
 800f5a6:	3002      	addcc	r0, #2
 800f5a8:	2b00      	cmp	r3, #0
 800f5aa:	db05      	blt.n	800f5b8 <__hi0bits+0x3c>
 800f5ac:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800f5b0:	f100 0001 	add.w	r0, r0, #1
 800f5b4:	bf08      	it	eq
 800f5b6:	2020      	moveq	r0, #32
 800f5b8:	4770      	bx	lr

0800f5ba <__lo0bits>:
 800f5ba:	6803      	ldr	r3, [r0, #0]
 800f5bc:	4602      	mov	r2, r0
 800f5be:	f013 0007 	ands.w	r0, r3, #7
 800f5c2:	d00b      	beq.n	800f5dc <__lo0bits+0x22>
 800f5c4:	07d9      	lsls	r1, r3, #31
 800f5c6:	d421      	bmi.n	800f60c <__lo0bits+0x52>
 800f5c8:	0798      	lsls	r0, r3, #30
 800f5ca:	bf49      	itett	mi
 800f5cc:	085b      	lsrmi	r3, r3, #1
 800f5ce:	089b      	lsrpl	r3, r3, #2
 800f5d0:	2001      	movmi	r0, #1
 800f5d2:	6013      	strmi	r3, [r2, #0]
 800f5d4:	bf5c      	itt	pl
 800f5d6:	6013      	strpl	r3, [r2, #0]
 800f5d8:	2002      	movpl	r0, #2
 800f5da:	4770      	bx	lr
 800f5dc:	b299      	uxth	r1, r3
 800f5de:	b909      	cbnz	r1, 800f5e4 <__lo0bits+0x2a>
 800f5e0:	0c1b      	lsrs	r3, r3, #16
 800f5e2:	2010      	movs	r0, #16
 800f5e4:	b2d9      	uxtb	r1, r3
 800f5e6:	b909      	cbnz	r1, 800f5ec <__lo0bits+0x32>
 800f5e8:	3008      	adds	r0, #8
 800f5ea:	0a1b      	lsrs	r3, r3, #8
 800f5ec:	0719      	lsls	r1, r3, #28
 800f5ee:	bf04      	itt	eq
 800f5f0:	091b      	lsreq	r3, r3, #4
 800f5f2:	3004      	addeq	r0, #4
 800f5f4:	0799      	lsls	r1, r3, #30
 800f5f6:	bf04      	itt	eq
 800f5f8:	089b      	lsreq	r3, r3, #2
 800f5fa:	3002      	addeq	r0, #2
 800f5fc:	07d9      	lsls	r1, r3, #31
 800f5fe:	d403      	bmi.n	800f608 <__lo0bits+0x4e>
 800f600:	085b      	lsrs	r3, r3, #1
 800f602:	f100 0001 	add.w	r0, r0, #1
 800f606:	d003      	beq.n	800f610 <__lo0bits+0x56>
 800f608:	6013      	str	r3, [r2, #0]
 800f60a:	4770      	bx	lr
 800f60c:	2000      	movs	r0, #0
 800f60e:	4770      	bx	lr
 800f610:	2020      	movs	r0, #32
 800f612:	4770      	bx	lr

0800f614 <__i2b>:
 800f614:	b510      	push	{r4, lr}
 800f616:	460c      	mov	r4, r1
 800f618:	2101      	movs	r1, #1
 800f61a:	f7ff febd 	bl	800f398 <_Balloc>
 800f61e:	4602      	mov	r2, r0
 800f620:	b928      	cbnz	r0, 800f62e <__i2b+0x1a>
 800f622:	4b05      	ldr	r3, [pc, #20]	@ (800f638 <__i2b+0x24>)
 800f624:	4805      	ldr	r0, [pc, #20]	@ (800f63c <__i2b+0x28>)
 800f626:	f240 1145 	movw	r1, #325	@ 0x145
 800f62a:	f000 ff25 	bl	8010478 <__assert_func>
 800f62e:	2301      	movs	r3, #1
 800f630:	6144      	str	r4, [r0, #20]
 800f632:	6103      	str	r3, [r0, #16]
 800f634:	bd10      	pop	{r4, pc}
 800f636:	bf00      	nop
 800f638:	08010f02 	.word	0x08010f02
 800f63c:	08010f8a 	.word	0x08010f8a

0800f640 <__multiply>:
 800f640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f644:	4617      	mov	r7, r2
 800f646:	690a      	ldr	r2, [r1, #16]
 800f648:	693b      	ldr	r3, [r7, #16]
 800f64a:	429a      	cmp	r2, r3
 800f64c:	bfa8      	it	ge
 800f64e:	463b      	movge	r3, r7
 800f650:	4689      	mov	r9, r1
 800f652:	bfa4      	itt	ge
 800f654:	460f      	movge	r7, r1
 800f656:	4699      	movge	r9, r3
 800f658:	693d      	ldr	r5, [r7, #16]
 800f65a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800f65e:	68bb      	ldr	r3, [r7, #8]
 800f660:	6879      	ldr	r1, [r7, #4]
 800f662:	eb05 060a 	add.w	r6, r5, sl
 800f666:	42b3      	cmp	r3, r6
 800f668:	b085      	sub	sp, #20
 800f66a:	bfb8      	it	lt
 800f66c:	3101      	addlt	r1, #1
 800f66e:	f7ff fe93 	bl	800f398 <_Balloc>
 800f672:	b930      	cbnz	r0, 800f682 <__multiply+0x42>
 800f674:	4602      	mov	r2, r0
 800f676:	4b41      	ldr	r3, [pc, #260]	@ (800f77c <__multiply+0x13c>)
 800f678:	4841      	ldr	r0, [pc, #260]	@ (800f780 <__multiply+0x140>)
 800f67a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800f67e:	f000 fefb 	bl	8010478 <__assert_func>
 800f682:	f100 0414 	add.w	r4, r0, #20
 800f686:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800f68a:	4623      	mov	r3, r4
 800f68c:	2200      	movs	r2, #0
 800f68e:	4573      	cmp	r3, lr
 800f690:	d320      	bcc.n	800f6d4 <__multiply+0x94>
 800f692:	f107 0814 	add.w	r8, r7, #20
 800f696:	f109 0114 	add.w	r1, r9, #20
 800f69a:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800f69e:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800f6a2:	9302      	str	r3, [sp, #8]
 800f6a4:	1beb      	subs	r3, r5, r7
 800f6a6:	3b15      	subs	r3, #21
 800f6a8:	f023 0303 	bic.w	r3, r3, #3
 800f6ac:	3304      	adds	r3, #4
 800f6ae:	3715      	adds	r7, #21
 800f6b0:	42bd      	cmp	r5, r7
 800f6b2:	bf38      	it	cc
 800f6b4:	2304      	movcc	r3, #4
 800f6b6:	9301      	str	r3, [sp, #4]
 800f6b8:	9b02      	ldr	r3, [sp, #8]
 800f6ba:	9103      	str	r1, [sp, #12]
 800f6bc:	428b      	cmp	r3, r1
 800f6be:	d80c      	bhi.n	800f6da <__multiply+0x9a>
 800f6c0:	2e00      	cmp	r6, #0
 800f6c2:	dd03      	ble.n	800f6cc <__multiply+0x8c>
 800f6c4:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800f6c8:	2b00      	cmp	r3, #0
 800f6ca:	d055      	beq.n	800f778 <__multiply+0x138>
 800f6cc:	6106      	str	r6, [r0, #16]
 800f6ce:	b005      	add	sp, #20
 800f6d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f6d4:	f843 2b04 	str.w	r2, [r3], #4
 800f6d8:	e7d9      	b.n	800f68e <__multiply+0x4e>
 800f6da:	f8b1 a000 	ldrh.w	sl, [r1]
 800f6de:	f1ba 0f00 	cmp.w	sl, #0
 800f6e2:	d01f      	beq.n	800f724 <__multiply+0xe4>
 800f6e4:	46c4      	mov	ip, r8
 800f6e6:	46a1      	mov	r9, r4
 800f6e8:	2700      	movs	r7, #0
 800f6ea:	f85c 2b04 	ldr.w	r2, [ip], #4
 800f6ee:	f8d9 3000 	ldr.w	r3, [r9]
 800f6f2:	fa1f fb82 	uxth.w	fp, r2
 800f6f6:	b29b      	uxth	r3, r3
 800f6f8:	fb0a 330b 	mla	r3, sl, fp, r3
 800f6fc:	443b      	add	r3, r7
 800f6fe:	f8d9 7000 	ldr.w	r7, [r9]
 800f702:	0c12      	lsrs	r2, r2, #16
 800f704:	0c3f      	lsrs	r7, r7, #16
 800f706:	fb0a 7202 	mla	r2, sl, r2, r7
 800f70a:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800f70e:	b29b      	uxth	r3, r3
 800f710:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f714:	4565      	cmp	r5, ip
 800f716:	f849 3b04 	str.w	r3, [r9], #4
 800f71a:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800f71e:	d8e4      	bhi.n	800f6ea <__multiply+0xaa>
 800f720:	9b01      	ldr	r3, [sp, #4]
 800f722:	50e7      	str	r7, [r4, r3]
 800f724:	9b03      	ldr	r3, [sp, #12]
 800f726:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800f72a:	3104      	adds	r1, #4
 800f72c:	f1b9 0f00 	cmp.w	r9, #0
 800f730:	d020      	beq.n	800f774 <__multiply+0x134>
 800f732:	6823      	ldr	r3, [r4, #0]
 800f734:	4647      	mov	r7, r8
 800f736:	46a4      	mov	ip, r4
 800f738:	f04f 0a00 	mov.w	sl, #0
 800f73c:	f8b7 b000 	ldrh.w	fp, [r7]
 800f740:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800f744:	fb09 220b 	mla	r2, r9, fp, r2
 800f748:	4452      	add	r2, sl
 800f74a:	b29b      	uxth	r3, r3
 800f74c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f750:	f84c 3b04 	str.w	r3, [ip], #4
 800f754:	f857 3b04 	ldr.w	r3, [r7], #4
 800f758:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f75c:	f8bc 3000 	ldrh.w	r3, [ip]
 800f760:	fb09 330a 	mla	r3, r9, sl, r3
 800f764:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800f768:	42bd      	cmp	r5, r7
 800f76a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f76e:	d8e5      	bhi.n	800f73c <__multiply+0xfc>
 800f770:	9a01      	ldr	r2, [sp, #4]
 800f772:	50a3      	str	r3, [r4, r2]
 800f774:	3404      	adds	r4, #4
 800f776:	e79f      	b.n	800f6b8 <__multiply+0x78>
 800f778:	3e01      	subs	r6, #1
 800f77a:	e7a1      	b.n	800f6c0 <__multiply+0x80>
 800f77c:	08010f02 	.word	0x08010f02
 800f780:	08010f8a 	.word	0x08010f8a

0800f784 <__pow5mult>:
 800f784:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f788:	4615      	mov	r5, r2
 800f78a:	f012 0203 	ands.w	r2, r2, #3
 800f78e:	4607      	mov	r7, r0
 800f790:	460e      	mov	r6, r1
 800f792:	d007      	beq.n	800f7a4 <__pow5mult+0x20>
 800f794:	4c25      	ldr	r4, [pc, #148]	@ (800f82c <__pow5mult+0xa8>)
 800f796:	3a01      	subs	r2, #1
 800f798:	2300      	movs	r3, #0
 800f79a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f79e:	f7ff fe5d 	bl	800f45c <__multadd>
 800f7a2:	4606      	mov	r6, r0
 800f7a4:	10ad      	asrs	r5, r5, #2
 800f7a6:	d03d      	beq.n	800f824 <__pow5mult+0xa0>
 800f7a8:	69fc      	ldr	r4, [r7, #28]
 800f7aa:	b97c      	cbnz	r4, 800f7cc <__pow5mult+0x48>
 800f7ac:	2010      	movs	r0, #16
 800f7ae:	f000 fe95 	bl	80104dc <malloc>
 800f7b2:	4602      	mov	r2, r0
 800f7b4:	61f8      	str	r0, [r7, #28]
 800f7b6:	b928      	cbnz	r0, 800f7c4 <__pow5mult+0x40>
 800f7b8:	4b1d      	ldr	r3, [pc, #116]	@ (800f830 <__pow5mult+0xac>)
 800f7ba:	481e      	ldr	r0, [pc, #120]	@ (800f834 <__pow5mult+0xb0>)
 800f7bc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800f7c0:	f000 fe5a 	bl	8010478 <__assert_func>
 800f7c4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f7c8:	6004      	str	r4, [r0, #0]
 800f7ca:	60c4      	str	r4, [r0, #12]
 800f7cc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800f7d0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f7d4:	b94c      	cbnz	r4, 800f7ea <__pow5mult+0x66>
 800f7d6:	f240 2171 	movw	r1, #625	@ 0x271
 800f7da:	4638      	mov	r0, r7
 800f7dc:	f7ff ff1a 	bl	800f614 <__i2b>
 800f7e0:	2300      	movs	r3, #0
 800f7e2:	f8c8 0008 	str.w	r0, [r8, #8]
 800f7e6:	4604      	mov	r4, r0
 800f7e8:	6003      	str	r3, [r0, #0]
 800f7ea:	f04f 0900 	mov.w	r9, #0
 800f7ee:	07eb      	lsls	r3, r5, #31
 800f7f0:	d50a      	bpl.n	800f808 <__pow5mult+0x84>
 800f7f2:	4631      	mov	r1, r6
 800f7f4:	4622      	mov	r2, r4
 800f7f6:	4638      	mov	r0, r7
 800f7f8:	f7ff ff22 	bl	800f640 <__multiply>
 800f7fc:	4631      	mov	r1, r6
 800f7fe:	4680      	mov	r8, r0
 800f800:	4638      	mov	r0, r7
 800f802:	f7ff fe09 	bl	800f418 <_Bfree>
 800f806:	4646      	mov	r6, r8
 800f808:	106d      	asrs	r5, r5, #1
 800f80a:	d00b      	beq.n	800f824 <__pow5mult+0xa0>
 800f80c:	6820      	ldr	r0, [r4, #0]
 800f80e:	b938      	cbnz	r0, 800f820 <__pow5mult+0x9c>
 800f810:	4622      	mov	r2, r4
 800f812:	4621      	mov	r1, r4
 800f814:	4638      	mov	r0, r7
 800f816:	f7ff ff13 	bl	800f640 <__multiply>
 800f81a:	6020      	str	r0, [r4, #0]
 800f81c:	f8c0 9000 	str.w	r9, [r0]
 800f820:	4604      	mov	r4, r0
 800f822:	e7e4      	b.n	800f7ee <__pow5mult+0x6a>
 800f824:	4630      	mov	r0, r6
 800f826:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f82a:	bf00      	nop
 800f82c:	080111ac 	.word	0x080111ac
 800f830:	08010f73 	.word	0x08010f73
 800f834:	08010f8a 	.word	0x08010f8a

0800f838 <__lshift>:
 800f838:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f83c:	460c      	mov	r4, r1
 800f83e:	6849      	ldr	r1, [r1, #4]
 800f840:	6923      	ldr	r3, [r4, #16]
 800f842:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f846:	68a3      	ldr	r3, [r4, #8]
 800f848:	4607      	mov	r7, r0
 800f84a:	4691      	mov	r9, r2
 800f84c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f850:	f108 0601 	add.w	r6, r8, #1
 800f854:	42b3      	cmp	r3, r6
 800f856:	db0b      	blt.n	800f870 <__lshift+0x38>
 800f858:	4638      	mov	r0, r7
 800f85a:	f7ff fd9d 	bl	800f398 <_Balloc>
 800f85e:	4605      	mov	r5, r0
 800f860:	b948      	cbnz	r0, 800f876 <__lshift+0x3e>
 800f862:	4602      	mov	r2, r0
 800f864:	4b28      	ldr	r3, [pc, #160]	@ (800f908 <__lshift+0xd0>)
 800f866:	4829      	ldr	r0, [pc, #164]	@ (800f90c <__lshift+0xd4>)
 800f868:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800f86c:	f000 fe04 	bl	8010478 <__assert_func>
 800f870:	3101      	adds	r1, #1
 800f872:	005b      	lsls	r3, r3, #1
 800f874:	e7ee      	b.n	800f854 <__lshift+0x1c>
 800f876:	2300      	movs	r3, #0
 800f878:	f100 0114 	add.w	r1, r0, #20
 800f87c:	f100 0210 	add.w	r2, r0, #16
 800f880:	4618      	mov	r0, r3
 800f882:	4553      	cmp	r3, sl
 800f884:	db33      	blt.n	800f8ee <__lshift+0xb6>
 800f886:	6920      	ldr	r0, [r4, #16]
 800f888:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f88c:	f104 0314 	add.w	r3, r4, #20
 800f890:	f019 091f 	ands.w	r9, r9, #31
 800f894:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f898:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800f89c:	d02b      	beq.n	800f8f6 <__lshift+0xbe>
 800f89e:	f1c9 0e20 	rsb	lr, r9, #32
 800f8a2:	468a      	mov	sl, r1
 800f8a4:	2200      	movs	r2, #0
 800f8a6:	6818      	ldr	r0, [r3, #0]
 800f8a8:	fa00 f009 	lsl.w	r0, r0, r9
 800f8ac:	4310      	orrs	r0, r2
 800f8ae:	f84a 0b04 	str.w	r0, [sl], #4
 800f8b2:	f853 2b04 	ldr.w	r2, [r3], #4
 800f8b6:	459c      	cmp	ip, r3
 800f8b8:	fa22 f20e 	lsr.w	r2, r2, lr
 800f8bc:	d8f3      	bhi.n	800f8a6 <__lshift+0x6e>
 800f8be:	ebac 0304 	sub.w	r3, ip, r4
 800f8c2:	3b15      	subs	r3, #21
 800f8c4:	f023 0303 	bic.w	r3, r3, #3
 800f8c8:	3304      	adds	r3, #4
 800f8ca:	f104 0015 	add.w	r0, r4, #21
 800f8ce:	4560      	cmp	r0, ip
 800f8d0:	bf88      	it	hi
 800f8d2:	2304      	movhi	r3, #4
 800f8d4:	50ca      	str	r2, [r1, r3]
 800f8d6:	b10a      	cbz	r2, 800f8dc <__lshift+0xa4>
 800f8d8:	f108 0602 	add.w	r6, r8, #2
 800f8dc:	3e01      	subs	r6, #1
 800f8de:	4638      	mov	r0, r7
 800f8e0:	612e      	str	r6, [r5, #16]
 800f8e2:	4621      	mov	r1, r4
 800f8e4:	f7ff fd98 	bl	800f418 <_Bfree>
 800f8e8:	4628      	mov	r0, r5
 800f8ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f8ee:	f842 0f04 	str.w	r0, [r2, #4]!
 800f8f2:	3301      	adds	r3, #1
 800f8f4:	e7c5      	b.n	800f882 <__lshift+0x4a>
 800f8f6:	3904      	subs	r1, #4
 800f8f8:	f853 2b04 	ldr.w	r2, [r3], #4
 800f8fc:	f841 2f04 	str.w	r2, [r1, #4]!
 800f900:	459c      	cmp	ip, r3
 800f902:	d8f9      	bhi.n	800f8f8 <__lshift+0xc0>
 800f904:	e7ea      	b.n	800f8dc <__lshift+0xa4>
 800f906:	bf00      	nop
 800f908:	08010f02 	.word	0x08010f02
 800f90c:	08010f8a 	.word	0x08010f8a

0800f910 <__mcmp>:
 800f910:	690a      	ldr	r2, [r1, #16]
 800f912:	4603      	mov	r3, r0
 800f914:	6900      	ldr	r0, [r0, #16]
 800f916:	1a80      	subs	r0, r0, r2
 800f918:	b530      	push	{r4, r5, lr}
 800f91a:	d10e      	bne.n	800f93a <__mcmp+0x2a>
 800f91c:	3314      	adds	r3, #20
 800f91e:	3114      	adds	r1, #20
 800f920:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800f924:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800f928:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800f92c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800f930:	4295      	cmp	r5, r2
 800f932:	d003      	beq.n	800f93c <__mcmp+0x2c>
 800f934:	d205      	bcs.n	800f942 <__mcmp+0x32>
 800f936:	f04f 30ff 	mov.w	r0, #4294967295
 800f93a:	bd30      	pop	{r4, r5, pc}
 800f93c:	42a3      	cmp	r3, r4
 800f93e:	d3f3      	bcc.n	800f928 <__mcmp+0x18>
 800f940:	e7fb      	b.n	800f93a <__mcmp+0x2a>
 800f942:	2001      	movs	r0, #1
 800f944:	e7f9      	b.n	800f93a <__mcmp+0x2a>
	...

0800f948 <__mdiff>:
 800f948:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f94c:	4689      	mov	r9, r1
 800f94e:	4606      	mov	r6, r0
 800f950:	4611      	mov	r1, r2
 800f952:	4648      	mov	r0, r9
 800f954:	4614      	mov	r4, r2
 800f956:	f7ff ffdb 	bl	800f910 <__mcmp>
 800f95a:	1e05      	subs	r5, r0, #0
 800f95c:	d112      	bne.n	800f984 <__mdiff+0x3c>
 800f95e:	4629      	mov	r1, r5
 800f960:	4630      	mov	r0, r6
 800f962:	f7ff fd19 	bl	800f398 <_Balloc>
 800f966:	4602      	mov	r2, r0
 800f968:	b928      	cbnz	r0, 800f976 <__mdiff+0x2e>
 800f96a:	4b3f      	ldr	r3, [pc, #252]	@ (800fa68 <__mdiff+0x120>)
 800f96c:	f240 2137 	movw	r1, #567	@ 0x237
 800f970:	483e      	ldr	r0, [pc, #248]	@ (800fa6c <__mdiff+0x124>)
 800f972:	f000 fd81 	bl	8010478 <__assert_func>
 800f976:	2301      	movs	r3, #1
 800f978:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f97c:	4610      	mov	r0, r2
 800f97e:	b003      	add	sp, #12
 800f980:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f984:	bfbc      	itt	lt
 800f986:	464b      	movlt	r3, r9
 800f988:	46a1      	movlt	r9, r4
 800f98a:	4630      	mov	r0, r6
 800f98c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800f990:	bfba      	itte	lt
 800f992:	461c      	movlt	r4, r3
 800f994:	2501      	movlt	r5, #1
 800f996:	2500      	movge	r5, #0
 800f998:	f7ff fcfe 	bl	800f398 <_Balloc>
 800f99c:	4602      	mov	r2, r0
 800f99e:	b918      	cbnz	r0, 800f9a8 <__mdiff+0x60>
 800f9a0:	4b31      	ldr	r3, [pc, #196]	@ (800fa68 <__mdiff+0x120>)
 800f9a2:	f240 2145 	movw	r1, #581	@ 0x245
 800f9a6:	e7e3      	b.n	800f970 <__mdiff+0x28>
 800f9a8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800f9ac:	6926      	ldr	r6, [r4, #16]
 800f9ae:	60c5      	str	r5, [r0, #12]
 800f9b0:	f109 0310 	add.w	r3, r9, #16
 800f9b4:	f109 0514 	add.w	r5, r9, #20
 800f9b8:	f104 0e14 	add.w	lr, r4, #20
 800f9bc:	f100 0b14 	add.w	fp, r0, #20
 800f9c0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800f9c4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800f9c8:	9301      	str	r3, [sp, #4]
 800f9ca:	46d9      	mov	r9, fp
 800f9cc:	f04f 0c00 	mov.w	ip, #0
 800f9d0:	9b01      	ldr	r3, [sp, #4]
 800f9d2:	f85e 0b04 	ldr.w	r0, [lr], #4
 800f9d6:	f853 af04 	ldr.w	sl, [r3, #4]!
 800f9da:	9301      	str	r3, [sp, #4]
 800f9dc:	fa1f f38a 	uxth.w	r3, sl
 800f9e0:	4619      	mov	r1, r3
 800f9e2:	b283      	uxth	r3, r0
 800f9e4:	1acb      	subs	r3, r1, r3
 800f9e6:	0c00      	lsrs	r0, r0, #16
 800f9e8:	4463      	add	r3, ip
 800f9ea:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800f9ee:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800f9f2:	b29b      	uxth	r3, r3
 800f9f4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800f9f8:	4576      	cmp	r6, lr
 800f9fa:	f849 3b04 	str.w	r3, [r9], #4
 800f9fe:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800fa02:	d8e5      	bhi.n	800f9d0 <__mdiff+0x88>
 800fa04:	1b33      	subs	r3, r6, r4
 800fa06:	3b15      	subs	r3, #21
 800fa08:	f023 0303 	bic.w	r3, r3, #3
 800fa0c:	3415      	adds	r4, #21
 800fa0e:	3304      	adds	r3, #4
 800fa10:	42a6      	cmp	r6, r4
 800fa12:	bf38      	it	cc
 800fa14:	2304      	movcc	r3, #4
 800fa16:	441d      	add	r5, r3
 800fa18:	445b      	add	r3, fp
 800fa1a:	461e      	mov	r6, r3
 800fa1c:	462c      	mov	r4, r5
 800fa1e:	4544      	cmp	r4, r8
 800fa20:	d30e      	bcc.n	800fa40 <__mdiff+0xf8>
 800fa22:	f108 0103 	add.w	r1, r8, #3
 800fa26:	1b49      	subs	r1, r1, r5
 800fa28:	f021 0103 	bic.w	r1, r1, #3
 800fa2c:	3d03      	subs	r5, #3
 800fa2e:	45a8      	cmp	r8, r5
 800fa30:	bf38      	it	cc
 800fa32:	2100      	movcc	r1, #0
 800fa34:	440b      	add	r3, r1
 800fa36:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800fa3a:	b191      	cbz	r1, 800fa62 <__mdiff+0x11a>
 800fa3c:	6117      	str	r7, [r2, #16]
 800fa3e:	e79d      	b.n	800f97c <__mdiff+0x34>
 800fa40:	f854 1b04 	ldr.w	r1, [r4], #4
 800fa44:	46e6      	mov	lr, ip
 800fa46:	0c08      	lsrs	r0, r1, #16
 800fa48:	fa1c fc81 	uxtah	ip, ip, r1
 800fa4c:	4471      	add	r1, lr
 800fa4e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800fa52:	b289      	uxth	r1, r1
 800fa54:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800fa58:	f846 1b04 	str.w	r1, [r6], #4
 800fa5c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800fa60:	e7dd      	b.n	800fa1e <__mdiff+0xd6>
 800fa62:	3f01      	subs	r7, #1
 800fa64:	e7e7      	b.n	800fa36 <__mdiff+0xee>
 800fa66:	bf00      	nop
 800fa68:	08010f02 	.word	0x08010f02
 800fa6c:	08010f8a 	.word	0x08010f8a

0800fa70 <__ulp>:
 800fa70:	b082      	sub	sp, #8
 800fa72:	ed8d 0b00 	vstr	d0, [sp]
 800fa76:	9a01      	ldr	r2, [sp, #4]
 800fa78:	4b0f      	ldr	r3, [pc, #60]	@ (800fab8 <__ulp+0x48>)
 800fa7a:	4013      	ands	r3, r2
 800fa7c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800fa80:	2b00      	cmp	r3, #0
 800fa82:	dc08      	bgt.n	800fa96 <__ulp+0x26>
 800fa84:	425b      	negs	r3, r3
 800fa86:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800fa8a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800fa8e:	da04      	bge.n	800fa9a <__ulp+0x2a>
 800fa90:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800fa94:	4113      	asrs	r3, r2
 800fa96:	2200      	movs	r2, #0
 800fa98:	e008      	b.n	800faac <__ulp+0x3c>
 800fa9a:	f1a2 0314 	sub.w	r3, r2, #20
 800fa9e:	2b1e      	cmp	r3, #30
 800faa0:	bfda      	itte	le
 800faa2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800faa6:	40da      	lsrle	r2, r3
 800faa8:	2201      	movgt	r2, #1
 800faaa:	2300      	movs	r3, #0
 800faac:	4619      	mov	r1, r3
 800faae:	4610      	mov	r0, r2
 800fab0:	ec41 0b10 	vmov	d0, r0, r1
 800fab4:	b002      	add	sp, #8
 800fab6:	4770      	bx	lr
 800fab8:	7ff00000 	.word	0x7ff00000

0800fabc <__b2d>:
 800fabc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fac0:	6906      	ldr	r6, [r0, #16]
 800fac2:	f100 0814 	add.w	r8, r0, #20
 800fac6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800faca:	1f37      	subs	r7, r6, #4
 800facc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800fad0:	4610      	mov	r0, r2
 800fad2:	f7ff fd53 	bl	800f57c <__hi0bits>
 800fad6:	f1c0 0320 	rsb	r3, r0, #32
 800fada:	280a      	cmp	r0, #10
 800fadc:	600b      	str	r3, [r1, #0]
 800fade:	491b      	ldr	r1, [pc, #108]	@ (800fb4c <__b2d+0x90>)
 800fae0:	dc15      	bgt.n	800fb0e <__b2d+0x52>
 800fae2:	f1c0 0c0b 	rsb	ip, r0, #11
 800fae6:	fa22 f30c 	lsr.w	r3, r2, ip
 800faea:	45b8      	cmp	r8, r7
 800faec:	ea43 0501 	orr.w	r5, r3, r1
 800faf0:	bf34      	ite	cc
 800faf2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800faf6:	2300      	movcs	r3, #0
 800faf8:	3015      	adds	r0, #21
 800fafa:	fa02 f000 	lsl.w	r0, r2, r0
 800fafe:	fa23 f30c 	lsr.w	r3, r3, ip
 800fb02:	4303      	orrs	r3, r0
 800fb04:	461c      	mov	r4, r3
 800fb06:	ec45 4b10 	vmov	d0, r4, r5
 800fb0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fb0e:	45b8      	cmp	r8, r7
 800fb10:	bf3a      	itte	cc
 800fb12:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800fb16:	f1a6 0708 	subcc.w	r7, r6, #8
 800fb1a:	2300      	movcs	r3, #0
 800fb1c:	380b      	subs	r0, #11
 800fb1e:	d012      	beq.n	800fb46 <__b2d+0x8a>
 800fb20:	f1c0 0120 	rsb	r1, r0, #32
 800fb24:	fa23 f401 	lsr.w	r4, r3, r1
 800fb28:	4082      	lsls	r2, r0
 800fb2a:	4322      	orrs	r2, r4
 800fb2c:	4547      	cmp	r7, r8
 800fb2e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800fb32:	bf8c      	ite	hi
 800fb34:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800fb38:	2200      	movls	r2, #0
 800fb3a:	4083      	lsls	r3, r0
 800fb3c:	40ca      	lsrs	r2, r1
 800fb3e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800fb42:	4313      	orrs	r3, r2
 800fb44:	e7de      	b.n	800fb04 <__b2d+0x48>
 800fb46:	ea42 0501 	orr.w	r5, r2, r1
 800fb4a:	e7db      	b.n	800fb04 <__b2d+0x48>
 800fb4c:	3ff00000 	.word	0x3ff00000

0800fb50 <__d2b>:
 800fb50:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800fb54:	460f      	mov	r7, r1
 800fb56:	2101      	movs	r1, #1
 800fb58:	ec59 8b10 	vmov	r8, r9, d0
 800fb5c:	4616      	mov	r6, r2
 800fb5e:	f7ff fc1b 	bl	800f398 <_Balloc>
 800fb62:	4604      	mov	r4, r0
 800fb64:	b930      	cbnz	r0, 800fb74 <__d2b+0x24>
 800fb66:	4602      	mov	r2, r0
 800fb68:	4b23      	ldr	r3, [pc, #140]	@ (800fbf8 <__d2b+0xa8>)
 800fb6a:	4824      	ldr	r0, [pc, #144]	@ (800fbfc <__d2b+0xac>)
 800fb6c:	f240 310f 	movw	r1, #783	@ 0x30f
 800fb70:	f000 fc82 	bl	8010478 <__assert_func>
 800fb74:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800fb78:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800fb7c:	b10d      	cbz	r5, 800fb82 <__d2b+0x32>
 800fb7e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800fb82:	9301      	str	r3, [sp, #4]
 800fb84:	f1b8 0300 	subs.w	r3, r8, #0
 800fb88:	d023      	beq.n	800fbd2 <__d2b+0x82>
 800fb8a:	4668      	mov	r0, sp
 800fb8c:	9300      	str	r3, [sp, #0]
 800fb8e:	f7ff fd14 	bl	800f5ba <__lo0bits>
 800fb92:	e9dd 1200 	ldrd	r1, r2, [sp]
 800fb96:	b1d0      	cbz	r0, 800fbce <__d2b+0x7e>
 800fb98:	f1c0 0320 	rsb	r3, r0, #32
 800fb9c:	fa02 f303 	lsl.w	r3, r2, r3
 800fba0:	430b      	orrs	r3, r1
 800fba2:	40c2      	lsrs	r2, r0
 800fba4:	6163      	str	r3, [r4, #20]
 800fba6:	9201      	str	r2, [sp, #4]
 800fba8:	9b01      	ldr	r3, [sp, #4]
 800fbaa:	61a3      	str	r3, [r4, #24]
 800fbac:	2b00      	cmp	r3, #0
 800fbae:	bf0c      	ite	eq
 800fbb0:	2201      	moveq	r2, #1
 800fbb2:	2202      	movne	r2, #2
 800fbb4:	6122      	str	r2, [r4, #16]
 800fbb6:	b1a5      	cbz	r5, 800fbe2 <__d2b+0x92>
 800fbb8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800fbbc:	4405      	add	r5, r0
 800fbbe:	603d      	str	r5, [r7, #0]
 800fbc0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800fbc4:	6030      	str	r0, [r6, #0]
 800fbc6:	4620      	mov	r0, r4
 800fbc8:	b003      	add	sp, #12
 800fbca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fbce:	6161      	str	r1, [r4, #20]
 800fbd0:	e7ea      	b.n	800fba8 <__d2b+0x58>
 800fbd2:	a801      	add	r0, sp, #4
 800fbd4:	f7ff fcf1 	bl	800f5ba <__lo0bits>
 800fbd8:	9b01      	ldr	r3, [sp, #4]
 800fbda:	6163      	str	r3, [r4, #20]
 800fbdc:	3020      	adds	r0, #32
 800fbde:	2201      	movs	r2, #1
 800fbe0:	e7e8      	b.n	800fbb4 <__d2b+0x64>
 800fbe2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800fbe6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800fbea:	6038      	str	r0, [r7, #0]
 800fbec:	6918      	ldr	r0, [r3, #16]
 800fbee:	f7ff fcc5 	bl	800f57c <__hi0bits>
 800fbf2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800fbf6:	e7e5      	b.n	800fbc4 <__d2b+0x74>
 800fbf8:	08010f02 	.word	0x08010f02
 800fbfc:	08010f8a 	.word	0x08010f8a

0800fc00 <__ratio>:
 800fc00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc04:	b085      	sub	sp, #20
 800fc06:	e9cd 1000 	strd	r1, r0, [sp]
 800fc0a:	a902      	add	r1, sp, #8
 800fc0c:	f7ff ff56 	bl	800fabc <__b2d>
 800fc10:	9800      	ldr	r0, [sp, #0]
 800fc12:	a903      	add	r1, sp, #12
 800fc14:	ec55 4b10 	vmov	r4, r5, d0
 800fc18:	f7ff ff50 	bl	800fabc <__b2d>
 800fc1c:	9b01      	ldr	r3, [sp, #4]
 800fc1e:	6919      	ldr	r1, [r3, #16]
 800fc20:	9b00      	ldr	r3, [sp, #0]
 800fc22:	691b      	ldr	r3, [r3, #16]
 800fc24:	1ac9      	subs	r1, r1, r3
 800fc26:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800fc2a:	1a9b      	subs	r3, r3, r2
 800fc2c:	ec5b ab10 	vmov	sl, fp, d0
 800fc30:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800fc34:	2b00      	cmp	r3, #0
 800fc36:	bfce      	itee	gt
 800fc38:	462a      	movgt	r2, r5
 800fc3a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800fc3e:	465a      	movle	r2, fp
 800fc40:	462f      	mov	r7, r5
 800fc42:	46d9      	mov	r9, fp
 800fc44:	bfcc      	ite	gt
 800fc46:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800fc4a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800fc4e:	464b      	mov	r3, r9
 800fc50:	4652      	mov	r2, sl
 800fc52:	4620      	mov	r0, r4
 800fc54:	4639      	mov	r1, r7
 800fc56:	f7f0 fe09 	bl	800086c <__aeabi_ddiv>
 800fc5a:	ec41 0b10 	vmov	d0, r0, r1
 800fc5e:	b005      	add	sp, #20
 800fc60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800fc64 <__copybits>:
 800fc64:	3901      	subs	r1, #1
 800fc66:	b570      	push	{r4, r5, r6, lr}
 800fc68:	1149      	asrs	r1, r1, #5
 800fc6a:	6914      	ldr	r4, [r2, #16]
 800fc6c:	3101      	adds	r1, #1
 800fc6e:	f102 0314 	add.w	r3, r2, #20
 800fc72:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800fc76:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800fc7a:	1f05      	subs	r5, r0, #4
 800fc7c:	42a3      	cmp	r3, r4
 800fc7e:	d30c      	bcc.n	800fc9a <__copybits+0x36>
 800fc80:	1aa3      	subs	r3, r4, r2
 800fc82:	3b11      	subs	r3, #17
 800fc84:	f023 0303 	bic.w	r3, r3, #3
 800fc88:	3211      	adds	r2, #17
 800fc8a:	42a2      	cmp	r2, r4
 800fc8c:	bf88      	it	hi
 800fc8e:	2300      	movhi	r3, #0
 800fc90:	4418      	add	r0, r3
 800fc92:	2300      	movs	r3, #0
 800fc94:	4288      	cmp	r0, r1
 800fc96:	d305      	bcc.n	800fca4 <__copybits+0x40>
 800fc98:	bd70      	pop	{r4, r5, r6, pc}
 800fc9a:	f853 6b04 	ldr.w	r6, [r3], #4
 800fc9e:	f845 6f04 	str.w	r6, [r5, #4]!
 800fca2:	e7eb      	b.n	800fc7c <__copybits+0x18>
 800fca4:	f840 3b04 	str.w	r3, [r0], #4
 800fca8:	e7f4      	b.n	800fc94 <__copybits+0x30>

0800fcaa <__any_on>:
 800fcaa:	f100 0214 	add.w	r2, r0, #20
 800fcae:	6900      	ldr	r0, [r0, #16]
 800fcb0:	114b      	asrs	r3, r1, #5
 800fcb2:	4298      	cmp	r0, r3
 800fcb4:	b510      	push	{r4, lr}
 800fcb6:	db11      	blt.n	800fcdc <__any_on+0x32>
 800fcb8:	dd0a      	ble.n	800fcd0 <__any_on+0x26>
 800fcba:	f011 011f 	ands.w	r1, r1, #31
 800fcbe:	d007      	beq.n	800fcd0 <__any_on+0x26>
 800fcc0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800fcc4:	fa24 f001 	lsr.w	r0, r4, r1
 800fcc8:	fa00 f101 	lsl.w	r1, r0, r1
 800fccc:	428c      	cmp	r4, r1
 800fcce:	d10b      	bne.n	800fce8 <__any_on+0x3e>
 800fcd0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800fcd4:	4293      	cmp	r3, r2
 800fcd6:	d803      	bhi.n	800fce0 <__any_on+0x36>
 800fcd8:	2000      	movs	r0, #0
 800fcda:	bd10      	pop	{r4, pc}
 800fcdc:	4603      	mov	r3, r0
 800fcde:	e7f7      	b.n	800fcd0 <__any_on+0x26>
 800fce0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800fce4:	2900      	cmp	r1, #0
 800fce6:	d0f5      	beq.n	800fcd4 <__any_on+0x2a>
 800fce8:	2001      	movs	r0, #1
 800fcea:	e7f6      	b.n	800fcda <__any_on+0x30>

0800fcec <__ascii_wctomb>:
 800fcec:	4603      	mov	r3, r0
 800fcee:	4608      	mov	r0, r1
 800fcf0:	b141      	cbz	r1, 800fd04 <__ascii_wctomb+0x18>
 800fcf2:	2aff      	cmp	r2, #255	@ 0xff
 800fcf4:	d904      	bls.n	800fd00 <__ascii_wctomb+0x14>
 800fcf6:	228a      	movs	r2, #138	@ 0x8a
 800fcf8:	601a      	str	r2, [r3, #0]
 800fcfa:	f04f 30ff 	mov.w	r0, #4294967295
 800fcfe:	4770      	bx	lr
 800fd00:	700a      	strb	r2, [r1, #0]
 800fd02:	2001      	movs	r0, #1
 800fd04:	4770      	bx	lr

0800fd06 <__ssputs_r>:
 800fd06:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fd0a:	688e      	ldr	r6, [r1, #8]
 800fd0c:	461f      	mov	r7, r3
 800fd0e:	42be      	cmp	r6, r7
 800fd10:	680b      	ldr	r3, [r1, #0]
 800fd12:	4682      	mov	sl, r0
 800fd14:	460c      	mov	r4, r1
 800fd16:	4690      	mov	r8, r2
 800fd18:	d82d      	bhi.n	800fd76 <__ssputs_r+0x70>
 800fd1a:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800fd1e:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800fd22:	d026      	beq.n	800fd72 <__ssputs_r+0x6c>
 800fd24:	6965      	ldr	r5, [r4, #20]
 800fd26:	6909      	ldr	r1, [r1, #16]
 800fd28:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800fd2c:	eba3 0901 	sub.w	r9, r3, r1
 800fd30:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800fd34:	1c7b      	adds	r3, r7, #1
 800fd36:	444b      	add	r3, r9
 800fd38:	106d      	asrs	r5, r5, #1
 800fd3a:	429d      	cmp	r5, r3
 800fd3c:	bf38      	it	cc
 800fd3e:	461d      	movcc	r5, r3
 800fd40:	0553      	lsls	r3, r2, #21
 800fd42:	d527      	bpl.n	800fd94 <__ssputs_r+0x8e>
 800fd44:	4629      	mov	r1, r5
 800fd46:	f7ff fa89 	bl	800f25c <_malloc_r>
 800fd4a:	4606      	mov	r6, r0
 800fd4c:	b360      	cbz	r0, 800fda8 <__ssputs_r+0xa2>
 800fd4e:	6921      	ldr	r1, [r4, #16]
 800fd50:	464a      	mov	r2, r9
 800fd52:	f7fe fec6 	bl	800eae2 <memcpy>
 800fd56:	89a3      	ldrh	r3, [r4, #12]
 800fd58:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800fd5c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fd60:	81a3      	strh	r3, [r4, #12]
 800fd62:	6126      	str	r6, [r4, #16]
 800fd64:	6165      	str	r5, [r4, #20]
 800fd66:	444e      	add	r6, r9
 800fd68:	eba5 0509 	sub.w	r5, r5, r9
 800fd6c:	6026      	str	r6, [r4, #0]
 800fd6e:	60a5      	str	r5, [r4, #8]
 800fd70:	463e      	mov	r6, r7
 800fd72:	42be      	cmp	r6, r7
 800fd74:	d900      	bls.n	800fd78 <__ssputs_r+0x72>
 800fd76:	463e      	mov	r6, r7
 800fd78:	6820      	ldr	r0, [r4, #0]
 800fd7a:	4632      	mov	r2, r6
 800fd7c:	4641      	mov	r1, r8
 800fd7e:	f000 fb51 	bl	8010424 <memmove>
 800fd82:	68a3      	ldr	r3, [r4, #8]
 800fd84:	1b9b      	subs	r3, r3, r6
 800fd86:	60a3      	str	r3, [r4, #8]
 800fd88:	6823      	ldr	r3, [r4, #0]
 800fd8a:	4433      	add	r3, r6
 800fd8c:	6023      	str	r3, [r4, #0]
 800fd8e:	2000      	movs	r0, #0
 800fd90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fd94:	462a      	mov	r2, r5
 800fd96:	f000 fba9 	bl	80104ec <_realloc_r>
 800fd9a:	4606      	mov	r6, r0
 800fd9c:	2800      	cmp	r0, #0
 800fd9e:	d1e0      	bne.n	800fd62 <__ssputs_r+0x5c>
 800fda0:	6921      	ldr	r1, [r4, #16]
 800fda2:	4650      	mov	r0, sl
 800fda4:	f7fe feb4 	bl	800eb10 <_free_r>
 800fda8:	230c      	movs	r3, #12
 800fdaa:	f8ca 3000 	str.w	r3, [sl]
 800fdae:	89a3      	ldrh	r3, [r4, #12]
 800fdb0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fdb4:	81a3      	strh	r3, [r4, #12]
 800fdb6:	f04f 30ff 	mov.w	r0, #4294967295
 800fdba:	e7e9      	b.n	800fd90 <__ssputs_r+0x8a>

0800fdbc <_svfiprintf_r>:
 800fdbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fdc0:	4698      	mov	r8, r3
 800fdc2:	898b      	ldrh	r3, [r1, #12]
 800fdc4:	061b      	lsls	r3, r3, #24
 800fdc6:	b09d      	sub	sp, #116	@ 0x74
 800fdc8:	4607      	mov	r7, r0
 800fdca:	460d      	mov	r5, r1
 800fdcc:	4614      	mov	r4, r2
 800fdce:	d510      	bpl.n	800fdf2 <_svfiprintf_r+0x36>
 800fdd0:	690b      	ldr	r3, [r1, #16]
 800fdd2:	b973      	cbnz	r3, 800fdf2 <_svfiprintf_r+0x36>
 800fdd4:	2140      	movs	r1, #64	@ 0x40
 800fdd6:	f7ff fa41 	bl	800f25c <_malloc_r>
 800fdda:	6028      	str	r0, [r5, #0]
 800fddc:	6128      	str	r0, [r5, #16]
 800fdde:	b930      	cbnz	r0, 800fdee <_svfiprintf_r+0x32>
 800fde0:	230c      	movs	r3, #12
 800fde2:	603b      	str	r3, [r7, #0]
 800fde4:	f04f 30ff 	mov.w	r0, #4294967295
 800fde8:	b01d      	add	sp, #116	@ 0x74
 800fdea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fdee:	2340      	movs	r3, #64	@ 0x40
 800fdf0:	616b      	str	r3, [r5, #20]
 800fdf2:	2300      	movs	r3, #0
 800fdf4:	9309      	str	r3, [sp, #36]	@ 0x24
 800fdf6:	2320      	movs	r3, #32
 800fdf8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800fdfc:	f8cd 800c 	str.w	r8, [sp, #12]
 800fe00:	2330      	movs	r3, #48	@ 0x30
 800fe02:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800ffa0 <_svfiprintf_r+0x1e4>
 800fe06:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800fe0a:	f04f 0901 	mov.w	r9, #1
 800fe0e:	4623      	mov	r3, r4
 800fe10:	469a      	mov	sl, r3
 800fe12:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fe16:	b10a      	cbz	r2, 800fe1c <_svfiprintf_r+0x60>
 800fe18:	2a25      	cmp	r2, #37	@ 0x25
 800fe1a:	d1f9      	bne.n	800fe10 <_svfiprintf_r+0x54>
 800fe1c:	ebba 0b04 	subs.w	fp, sl, r4
 800fe20:	d00b      	beq.n	800fe3a <_svfiprintf_r+0x7e>
 800fe22:	465b      	mov	r3, fp
 800fe24:	4622      	mov	r2, r4
 800fe26:	4629      	mov	r1, r5
 800fe28:	4638      	mov	r0, r7
 800fe2a:	f7ff ff6c 	bl	800fd06 <__ssputs_r>
 800fe2e:	3001      	adds	r0, #1
 800fe30:	f000 80a7 	beq.w	800ff82 <_svfiprintf_r+0x1c6>
 800fe34:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fe36:	445a      	add	r2, fp
 800fe38:	9209      	str	r2, [sp, #36]	@ 0x24
 800fe3a:	f89a 3000 	ldrb.w	r3, [sl]
 800fe3e:	2b00      	cmp	r3, #0
 800fe40:	f000 809f 	beq.w	800ff82 <_svfiprintf_r+0x1c6>
 800fe44:	2300      	movs	r3, #0
 800fe46:	f04f 32ff 	mov.w	r2, #4294967295
 800fe4a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fe4e:	f10a 0a01 	add.w	sl, sl, #1
 800fe52:	9304      	str	r3, [sp, #16]
 800fe54:	9307      	str	r3, [sp, #28]
 800fe56:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800fe5a:	931a      	str	r3, [sp, #104]	@ 0x68
 800fe5c:	4654      	mov	r4, sl
 800fe5e:	2205      	movs	r2, #5
 800fe60:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fe64:	484e      	ldr	r0, [pc, #312]	@ (800ffa0 <_svfiprintf_r+0x1e4>)
 800fe66:	f7f0 f9cb 	bl	8000200 <memchr>
 800fe6a:	9a04      	ldr	r2, [sp, #16]
 800fe6c:	b9d8      	cbnz	r0, 800fea6 <_svfiprintf_r+0xea>
 800fe6e:	06d0      	lsls	r0, r2, #27
 800fe70:	bf44      	itt	mi
 800fe72:	2320      	movmi	r3, #32
 800fe74:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fe78:	0711      	lsls	r1, r2, #28
 800fe7a:	bf44      	itt	mi
 800fe7c:	232b      	movmi	r3, #43	@ 0x2b
 800fe7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fe82:	f89a 3000 	ldrb.w	r3, [sl]
 800fe86:	2b2a      	cmp	r3, #42	@ 0x2a
 800fe88:	d015      	beq.n	800feb6 <_svfiprintf_r+0xfa>
 800fe8a:	9a07      	ldr	r2, [sp, #28]
 800fe8c:	4654      	mov	r4, sl
 800fe8e:	2000      	movs	r0, #0
 800fe90:	f04f 0c0a 	mov.w	ip, #10
 800fe94:	4621      	mov	r1, r4
 800fe96:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fe9a:	3b30      	subs	r3, #48	@ 0x30
 800fe9c:	2b09      	cmp	r3, #9
 800fe9e:	d94b      	bls.n	800ff38 <_svfiprintf_r+0x17c>
 800fea0:	b1b0      	cbz	r0, 800fed0 <_svfiprintf_r+0x114>
 800fea2:	9207      	str	r2, [sp, #28]
 800fea4:	e014      	b.n	800fed0 <_svfiprintf_r+0x114>
 800fea6:	eba0 0308 	sub.w	r3, r0, r8
 800feaa:	fa09 f303 	lsl.w	r3, r9, r3
 800feae:	4313      	orrs	r3, r2
 800feb0:	9304      	str	r3, [sp, #16]
 800feb2:	46a2      	mov	sl, r4
 800feb4:	e7d2      	b.n	800fe5c <_svfiprintf_r+0xa0>
 800feb6:	9b03      	ldr	r3, [sp, #12]
 800feb8:	1d19      	adds	r1, r3, #4
 800feba:	681b      	ldr	r3, [r3, #0]
 800febc:	9103      	str	r1, [sp, #12]
 800febe:	2b00      	cmp	r3, #0
 800fec0:	bfbb      	ittet	lt
 800fec2:	425b      	neglt	r3, r3
 800fec4:	f042 0202 	orrlt.w	r2, r2, #2
 800fec8:	9307      	strge	r3, [sp, #28]
 800feca:	9307      	strlt	r3, [sp, #28]
 800fecc:	bfb8      	it	lt
 800fece:	9204      	strlt	r2, [sp, #16]
 800fed0:	7823      	ldrb	r3, [r4, #0]
 800fed2:	2b2e      	cmp	r3, #46	@ 0x2e
 800fed4:	d10a      	bne.n	800feec <_svfiprintf_r+0x130>
 800fed6:	7863      	ldrb	r3, [r4, #1]
 800fed8:	2b2a      	cmp	r3, #42	@ 0x2a
 800feda:	d132      	bne.n	800ff42 <_svfiprintf_r+0x186>
 800fedc:	9b03      	ldr	r3, [sp, #12]
 800fede:	1d1a      	adds	r2, r3, #4
 800fee0:	681b      	ldr	r3, [r3, #0]
 800fee2:	9203      	str	r2, [sp, #12]
 800fee4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800fee8:	3402      	adds	r4, #2
 800feea:	9305      	str	r3, [sp, #20]
 800feec:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800ffb0 <_svfiprintf_r+0x1f4>
 800fef0:	7821      	ldrb	r1, [r4, #0]
 800fef2:	2203      	movs	r2, #3
 800fef4:	4650      	mov	r0, sl
 800fef6:	f7f0 f983 	bl	8000200 <memchr>
 800fefa:	b138      	cbz	r0, 800ff0c <_svfiprintf_r+0x150>
 800fefc:	9b04      	ldr	r3, [sp, #16]
 800fefe:	eba0 000a 	sub.w	r0, r0, sl
 800ff02:	2240      	movs	r2, #64	@ 0x40
 800ff04:	4082      	lsls	r2, r0
 800ff06:	4313      	orrs	r3, r2
 800ff08:	3401      	adds	r4, #1
 800ff0a:	9304      	str	r3, [sp, #16]
 800ff0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ff10:	4824      	ldr	r0, [pc, #144]	@ (800ffa4 <_svfiprintf_r+0x1e8>)
 800ff12:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ff16:	2206      	movs	r2, #6
 800ff18:	f7f0 f972 	bl	8000200 <memchr>
 800ff1c:	2800      	cmp	r0, #0
 800ff1e:	d036      	beq.n	800ff8e <_svfiprintf_r+0x1d2>
 800ff20:	4b21      	ldr	r3, [pc, #132]	@ (800ffa8 <_svfiprintf_r+0x1ec>)
 800ff22:	bb1b      	cbnz	r3, 800ff6c <_svfiprintf_r+0x1b0>
 800ff24:	9b03      	ldr	r3, [sp, #12]
 800ff26:	3307      	adds	r3, #7
 800ff28:	f023 0307 	bic.w	r3, r3, #7
 800ff2c:	3308      	adds	r3, #8
 800ff2e:	9303      	str	r3, [sp, #12]
 800ff30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ff32:	4433      	add	r3, r6
 800ff34:	9309      	str	r3, [sp, #36]	@ 0x24
 800ff36:	e76a      	b.n	800fe0e <_svfiprintf_r+0x52>
 800ff38:	fb0c 3202 	mla	r2, ip, r2, r3
 800ff3c:	460c      	mov	r4, r1
 800ff3e:	2001      	movs	r0, #1
 800ff40:	e7a8      	b.n	800fe94 <_svfiprintf_r+0xd8>
 800ff42:	2300      	movs	r3, #0
 800ff44:	3401      	adds	r4, #1
 800ff46:	9305      	str	r3, [sp, #20]
 800ff48:	4619      	mov	r1, r3
 800ff4a:	f04f 0c0a 	mov.w	ip, #10
 800ff4e:	4620      	mov	r0, r4
 800ff50:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ff54:	3a30      	subs	r2, #48	@ 0x30
 800ff56:	2a09      	cmp	r2, #9
 800ff58:	d903      	bls.n	800ff62 <_svfiprintf_r+0x1a6>
 800ff5a:	2b00      	cmp	r3, #0
 800ff5c:	d0c6      	beq.n	800feec <_svfiprintf_r+0x130>
 800ff5e:	9105      	str	r1, [sp, #20]
 800ff60:	e7c4      	b.n	800feec <_svfiprintf_r+0x130>
 800ff62:	fb0c 2101 	mla	r1, ip, r1, r2
 800ff66:	4604      	mov	r4, r0
 800ff68:	2301      	movs	r3, #1
 800ff6a:	e7f0      	b.n	800ff4e <_svfiprintf_r+0x192>
 800ff6c:	ab03      	add	r3, sp, #12
 800ff6e:	9300      	str	r3, [sp, #0]
 800ff70:	462a      	mov	r2, r5
 800ff72:	4b0e      	ldr	r3, [pc, #56]	@ (800ffac <_svfiprintf_r+0x1f0>)
 800ff74:	a904      	add	r1, sp, #16
 800ff76:	4638      	mov	r0, r7
 800ff78:	f3af 8000 	nop.w
 800ff7c:	1c42      	adds	r2, r0, #1
 800ff7e:	4606      	mov	r6, r0
 800ff80:	d1d6      	bne.n	800ff30 <_svfiprintf_r+0x174>
 800ff82:	89ab      	ldrh	r3, [r5, #12]
 800ff84:	065b      	lsls	r3, r3, #25
 800ff86:	f53f af2d 	bmi.w	800fde4 <_svfiprintf_r+0x28>
 800ff8a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ff8c:	e72c      	b.n	800fde8 <_svfiprintf_r+0x2c>
 800ff8e:	ab03      	add	r3, sp, #12
 800ff90:	9300      	str	r3, [sp, #0]
 800ff92:	462a      	mov	r2, r5
 800ff94:	4b05      	ldr	r3, [pc, #20]	@ (800ffac <_svfiprintf_r+0x1f0>)
 800ff96:	a904      	add	r1, sp, #16
 800ff98:	4638      	mov	r0, r7
 800ff9a:	f000 f879 	bl	8010090 <_printf_i>
 800ff9e:	e7ed      	b.n	800ff7c <_svfiprintf_r+0x1c0>
 800ffa0:	08010fe3 	.word	0x08010fe3
 800ffa4:	08010fed 	.word	0x08010fed
 800ffa8:	00000000 	.word	0x00000000
 800ffac:	0800fd07 	.word	0x0800fd07
 800ffb0:	08010fe9 	.word	0x08010fe9

0800ffb4 <_printf_common>:
 800ffb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ffb8:	4616      	mov	r6, r2
 800ffba:	4698      	mov	r8, r3
 800ffbc:	688a      	ldr	r2, [r1, #8]
 800ffbe:	690b      	ldr	r3, [r1, #16]
 800ffc0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ffc4:	4293      	cmp	r3, r2
 800ffc6:	bfb8      	it	lt
 800ffc8:	4613      	movlt	r3, r2
 800ffca:	6033      	str	r3, [r6, #0]
 800ffcc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ffd0:	4607      	mov	r7, r0
 800ffd2:	460c      	mov	r4, r1
 800ffd4:	b10a      	cbz	r2, 800ffda <_printf_common+0x26>
 800ffd6:	3301      	adds	r3, #1
 800ffd8:	6033      	str	r3, [r6, #0]
 800ffda:	6823      	ldr	r3, [r4, #0]
 800ffdc:	0699      	lsls	r1, r3, #26
 800ffde:	bf42      	ittt	mi
 800ffe0:	6833      	ldrmi	r3, [r6, #0]
 800ffe2:	3302      	addmi	r3, #2
 800ffe4:	6033      	strmi	r3, [r6, #0]
 800ffe6:	6825      	ldr	r5, [r4, #0]
 800ffe8:	f015 0506 	ands.w	r5, r5, #6
 800ffec:	d106      	bne.n	800fffc <_printf_common+0x48>
 800ffee:	f104 0a19 	add.w	sl, r4, #25
 800fff2:	68e3      	ldr	r3, [r4, #12]
 800fff4:	6832      	ldr	r2, [r6, #0]
 800fff6:	1a9b      	subs	r3, r3, r2
 800fff8:	42ab      	cmp	r3, r5
 800fffa:	dc26      	bgt.n	801004a <_printf_common+0x96>
 800fffc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8010000:	6822      	ldr	r2, [r4, #0]
 8010002:	3b00      	subs	r3, #0
 8010004:	bf18      	it	ne
 8010006:	2301      	movne	r3, #1
 8010008:	0692      	lsls	r2, r2, #26
 801000a:	d42b      	bmi.n	8010064 <_printf_common+0xb0>
 801000c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8010010:	4641      	mov	r1, r8
 8010012:	4638      	mov	r0, r7
 8010014:	47c8      	blx	r9
 8010016:	3001      	adds	r0, #1
 8010018:	d01e      	beq.n	8010058 <_printf_common+0xa4>
 801001a:	6823      	ldr	r3, [r4, #0]
 801001c:	6922      	ldr	r2, [r4, #16]
 801001e:	f003 0306 	and.w	r3, r3, #6
 8010022:	2b04      	cmp	r3, #4
 8010024:	bf02      	ittt	eq
 8010026:	68e5      	ldreq	r5, [r4, #12]
 8010028:	6833      	ldreq	r3, [r6, #0]
 801002a:	1aed      	subeq	r5, r5, r3
 801002c:	68a3      	ldr	r3, [r4, #8]
 801002e:	bf0c      	ite	eq
 8010030:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010034:	2500      	movne	r5, #0
 8010036:	4293      	cmp	r3, r2
 8010038:	bfc4      	itt	gt
 801003a:	1a9b      	subgt	r3, r3, r2
 801003c:	18ed      	addgt	r5, r5, r3
 801003e:	2600      	movs	r6, #0
 8010040:	341a      	adds	r4, #26
 8010042:	42b5      	cmp	r5, r6
 8010044:	d11a      	bne.n	801007c <_printf_common+0xc8>
 8010046:	2000      	movs	r0, #0
 8010048:	e008      	b.n	801005c <_printf_common+0xa8>
 801004a:	2301      	movs	r3, #1
 801004c:	4652      	mov	r2, sl
 801004e:	4641      	mov	r1, r8
 8010050:	4638      	mov	r0, r7
 8010052:	47c8      	blx	r9
 8010054:	3001      	adds	r0, #1
 8010056:	d103      	bne.n	8010060 <_printf_common+0xac>
 8010058:	f04f 30ff 	mov.w	r0, #4294967295
 801005c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010060:	3501      	adds	r5, #1
 8010062:	e7c6      	b.n	800fff2 <_printf_common+0x3e>
 8010064:	18e1      	adds	r1, r4, r3
 8010066:	1c5a      	adds	r2, r3, #1
 8010068:	2030      	movs	r0, #48	@ 0x30
 801006a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801006e:	4422      	add	r2, r4
 8010070:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8010074:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8010078:	3302      	adds	r3, #2
 801007a:	e7c7      	b.n	801000c <_printf_common+0x58>
 801007c:	2301      	movs	r3, #1
 801007e:	4622      	mov	r2, r4
 8010080:	4641      	mov	r1, r8
 8010082:	4638      	mov	r0, r7
 8010084:	47c8      	blx	r9
 8010086:	3001      	adds	r0, #1
 8010088:	d0e6      	beq.n	8010058 <_printf_common+0xa4>
 801008a:	3601      	adds	r6, #1
 801008c:	e7d9      	b.n	8010042 <_printf_common+0x8e>
	...

08010090 <_printf_i>:
 8010090:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010094:	7e0f      	ldrb	r7, [r1, #24]
 8010096:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8010098:	2f78      	cmp	r7, #120	@ 0x78
 801009a:	4691      	mov	r9, r2
 801009c:	4680      	mov	r8, r0
 801009e:	460c      	mov	r4, r1
 80100a0:	469a      	mov	sl, r3
 80100a2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80100a6:	d807      	bhi.n	80100b8 <_printf_i+0x28>
 80100a8:	2f62      	cmp	r7, #98	@ 0x62
 80100aa:	d80a      	bhi.n	80100c2 <_printf_i+0x32>
 80100ac:	2f00      	cmp	r7, #0
 80100ae:	f000 80d1 	beq.w	8010254 <_printf_i+0x1c4>
 80100b2:	2f58      	cmp	r7, #88	@ 0x58
 80100b4:	f000 80b8 	beq.w	8010228 <_printf_i+0x198>
 80100b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80100bc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80100c0:	e03a      	b.n	8010138 <_printf_i+0xa8>
 80100c2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80100c6:	2b15      	cmp	r3, #21
 80100c8:	d8f6      	bhi.n	80100b8 <_printf_i+0x28>
 80100ca:	a101      	add	r1, pc, #4	@ (adr r1, 80100d0 <_printf_i+0x40>)
 80100cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80100d0:	08010129 	.word	0x08010129
 80100d4:	0801013d 	.word	0x0801013d
 80100d8:	080100b9 	.word	0x080100b9
 80100dc:	080100b9 	.word	0x080100b9
 80100e0:	080100b9 	.word	0x080100b9
 80100e4:	080100b9 	.word	0x080100b9
 80100e8:	0801013d 	.word	0x0801013d
 80100ec:	080100b9 	.word	0x080100b9
 80100f0:	080100b9 	.word	0x080100b9
 80100f4:	080100b9 	.word	0x080100b9
 80100f8:	080100b9 	.word	0x080100b9
 80100fc:	0801023b 	.word	0x0801023b
 8010100:	08010167 	.word	0x08010167
 8010104:	080101f5 	.word	0x080101f5
 8010108:	080100b9 	.word	0x080100b9
 801010c:	080100b9 	.word	0x080100b9
 8010110:	0801025d 	.word	0x0801025d
 8010114:	080100b9 	.word	0x080100b9
 8010118:	08010167 	.word	0x08010167
 801011c:	080100b9 	.word	0x080100b9
 8010120:	080100b9 	.word	0x080100b9
 8010124:	080101fd 	.word	0x080101fd
 8010128:	6833      	ldr	r3, [r6, #0]
 801012a:	1d1a      	adds	r2, r3, #4
 801012c:	681b      	ldr	r3, [r3, #0]
 801012e:	6032      	str	r2, [r6, #0]
 8010130:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010134:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8010138:	2301      	movs	r3, #1
 801013a:	e09c      	b.n	8010276 <_printf_i+0x1e6>
 801013c:	6833      	ldr	r3, [r6, #0]
 801013e:	6820      	ldr	r0, [r4, #0]
 8010140:	1d19      	adds	r1, r3, #4
 8010142:	6031      	str	r1, [r6, #0]
 8010144:	0606      	lsls	r6, r0, #24
 8010146:	d501      	bpl.n	801014c <_printf_i+0xbc>
 8010148:	681d      	ldr	r5, [r3, #0]
 801014a:	e003      	b.n	8010154 <_printf_i+0xc4>
 801014c:	0645      	lsls	r5, r0, #25
 801014e:	d5fb      	bpl.n	8010148 <_printf_i+0xb8>
 8010150:	f9b3 5000 	ldrsh.w	r5, [r3]
 8010154:	2d00      	cmp	r5, #0
 8010156:	da03      	bge.n	8010160 <_printf_i+0xd0>
 8010158:	232d      	movs	r3, #45	@ 0x2d
 801015a:	426d      	negs	r5, r5
 801015c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010160:	4858      	ldr	r0, [pc, #352]	@ (80102c4 <_printf_i+0x234>)
 8010162:	230a      	movs	r3, #10
 8010164:	e011      	b.n	801018a <_printf_i+0xfa>
 8010166:	6821      	ldr	r1, [r4, #0]
 8010168:	6833      	ldr	r3, [r6, #0]
 801016a:	0608      	lsls	r0, r1, #24
 801016c:	f853 5b04 	ldr.w	r5, [r3], #4
 8010170:	d402      	bmi.n	8010178 <_printf_i+0xe8>
 8010172:	0649      	lsls	r1, r1, #25
 8010174:	bf48      	it	mi
 8010176:	b2ad      	uxthmi	r5, r5
 8010178:	2f6f      	cmp	r7, #111	@ 0x6f
 801017a:	4852      	ldr	r0, [pc, #328]	@ (80102c4 <_printf_i+0x234>)
 801017c:	6033      	str	r3, [r6, #0]
 801017e:	bf14      	ite	ne
 8010180:	230a      	movne	r3, #10
 8010182:	2308      	moveq	r3, #8
 8010184:	2100      	movs	r1, #0
 8010186:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801018a:	6866      	ldr	r6, [r4, #4]
 801018c:	60a6      	str	r6, [r4, #8]
 801018e:	2e00      	cmp	r6, #0
 8010190:	db05      	blt.n	801019e <_printf_i+0x10e>
 8010192:	6821      	ldr	r1, [r4, #0]
 8010194:	432e      	orrs	r6, r5
 8010196:	f021 0104 	bic.w	r1, r1, #4
 801019a:	6021      	str	r1, [r4, #0]
 801019c:	d04b      	beq.n	8010236 <_printf_i+0x1a6>
 801019e:	4616      	mov	r6, r2
 80101a0:	fbb5 f1f3 	udiv	r1, r5, r3
 80101a4:	fb03 5711 	mls	r7, r3, r1, r5
 80101a8:	5dc7      	ldrb	r7, [r0, r7]
 80101aa:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80101ae:	462f      	mov	r7, r5
 80101b0:	42bb      	cmp	r3, r7
 80101b2:	460d      	mov	r5, r1
 80101b4:	d9f4      	bls.n	80101a0 <_printf_i+0x110>
 80101b6:	2b08      	cmp	r3, #8
 80101b8:	d10b      	bne.n	80101d2 <_printf_i+0x142>
 80101ba:	6823      	ldr	r3, [r4, #0]
 80101bc:	07df      	lsls	r7, r3, #31
 80101be:	d508      	bpl.n	80101d2 <_printf_i+0x142>
 80101c0:	6923      	ldr	r3, [r4, #16]
 80101c2:	6861      	ldr	r1, [r4, #4]
 80101c4:	4299      	cmp	r1, r3
 80101c6:	bfde      	ittt	le
 80101c8:	2330      	movle	r3, #48	@ 0x30
 80101ca:	f806 3c01 	strble.w	r3, [r6, #-1]
 80101ce:	f106 36ff 	addle.w	r6, r6, #4294967295
 80101d2:	1b92      	subs	r2, r2, r6
 80101d4:	6122      	str	r2, [r4, #16]
 80101d6:	f8cd a000 	str.w	sl, [sp]
 80101da:	464b      	mov	r3, r9
 80101dc:	aa03      	add	r2, sp, #12
 80101de:	4621      	mov	r1, r4
 80101e0:	4640      	mov	r0, r8
 80101e2:	f7ff fee7 	bl	800ffb4 <_printf_common>
 80101e6:	3001      	adds	r0, #1
 80101e8:	d14a      	bne.n	8010280 <_printf_i+0x1f0>
 80101ea:	f04f 30ff 	mov.w	r0, #4294967295
 80101ee:	b004      	add	sp, #16
 80101f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80101f4:	6823      	ldr	r3, [r4, #0]
 80101f6:	f043 0320 	orr.w	r3, r3, #32
 80101fa:	6023      	str	r3, [r4, #0]
 80101fc:	4832      	ldr	r0, [pc, #200]	@ (80102c8 <_printf_i+0x238>)
 80101fe:	2778      	movs	r7, #120	@ 0x78
 8010200:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8010204:	6823      	ldr	r3, [r4, #0]
 8010206:	6831      	ldr	r1, [r6, #0]
 8010208:	061f      	lsls	r7, r3, #24
 801020a:	f851 5b04 	ldr.w	r5, [r1], #4
 801020e:	d402      	bmi.n	8010216 <_printf_i+0x186>
 8010210:	065f      	lsls	r7, r3, #25
 8010212:	bf48      	it	mi
 8010214:	b2ad      	uxthmi	r5, r5
 8010216:	6031      	str	r1, [r6, #0]
 8010218:	07d9      	lsls	r1, r3, #31
 801021a:	bf44      	itt	mi
 801021c:	f043 0320 	orrmi.w	r3, r3, #32
 8010220:	6023      	strmi	r3, [r4, #0]
 8010222:	b11d      	cbz	r5, 801022c <_printf_i+0x19c>
 8010224:	2310      	movs	r3, #16
 8010226:	e7ad      	b.n	8010184 <_printf_i+0xf4>
 8010228:	4826      	ldr	r0, [pc, #152]	@ (80102c4 <_printf_i+0x234>)
 801022a:	e7e9      	b.n	8010200 <_printf_i+0x170>
 801022c:	6823      	ldr	r3, [r4, #0]
 801022e:	f023 0320 	bic.w	r3, r3, #32
 8010232:	6023      	str	r3, [r4, #0]
 8010234:	e7f6      	b.n	8010224 <_printf_i+0x194>
 8010236:	4616      	mov	r6, r2
 8010238:	e7bd      	b.n	80101b6 <_printf_i+0x126>
 801023a:	6833      	ldr	r3, [r6, #0]
 801023c:	6825      	ldr	r5, [r4, #0]
 801023e:	6961      	ldr	r1, [r4, #20]
 8010240:	1d18      	adds	r0, r3, #4
 8010242:	6030      	str	r0, [r6, #0]
 8010244:	062e      	lsls	r6, r5, #24
 8010246:	681b      	ldr	r3, [r3, #0]
 8010248:	d501      	bpl.n	801024e <_printf_i+0x1be>
 801024a:	6019      	str	r1, [r3, #0]
 801024c:	e002      	b.n	8010254 <_printf_i+0x1c4>
 801024e:	0668      	lsls	r0, r5, #25
 8010250:	d5fb      	bpl.n	801024a <_printf_i+0x1ba>
 8010252:	8019      	strh	r1, [r3, #0]
 8010254:	2300      	movs	r3, #0
 8010256:	6123      	str	r3, [r4, #16]
 8010258:	4616      	mov	r6, r2
 801025a:	e7bc      	b.n	80101d6 <_printf_i+0x146>
 801025c:	6833      	ldr	r3, [r6, #0]
 801025e:	1d1a      	adds	r2, r3, #4
 8010260:	6032      	str	r2, [r6, #0]
 8010262:	681e      	ldr	r6, [r3, #0]
 8010264:	6862      	ldr	r2, [r4, #4]
 8010266:	2100      	movs	r1, #0
 8010268:	4630      	mov	r0, r6
 801026a:	f7ef ffc9 	bl	8000200 <memchr>
 801026e:	b108      	cbz	r0, 8010274 <_printf_i+0x1e4>
 8010270:	1b80      	subs	r0, r0, r6
 8010272:	6060      	str	r0, [r4, #4]
 8010274:	6863      	ldr	r3, [r4, #4]
 8010276:	6123      	str	r3, [r4, #16]
 8010278:	2300      	movs	r3, #0
 801027a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801027e:	e7aa      	b.n	80101d6 <_printf_i+0x146>
 8010280:	6923      	ldr	r3, [r4, #16]
 8010282:	4632      	mov	r2, r6
 8010284:	4649      	mov	r1, r9
 8010286:	4640      	mov	r0, r8
 8010288:	47d0      	blx	sl
 801028a:	3001      	adds	r0, #1
 801028c:	d0ad      	beq.n	80101ea <_printf_i+0x15a>
 801028e:	6823      	ldr	r3, [r4, #0]
 8010290:	079b      	lsls	r3, r3, #30
 8010292:	d413      	bmi.n	80102bc <_printf_i+0x22c>
 8010294:	68e0      	ldr	r0, [r4, #12]
 8010296:	9b03      	ldr	r3, [sp, #12]
 8010298:	4298      	cmp	r0, r3
 801029a:	bfb8      	it	lt
 801029c:	4618      	movlt	r0, r3
 801029e:	e7a6      	b.n	80101ee <_printf_i+0x15e>
 80102a0:	2301      	movs	r3, #1
 80102a2:	4632      	mov	r2, r6
 80102a4:	4649      	mov	r1, r9
 80102a6:	4640      	mov	r0, r8
 80102a8:	47d0      	blx	sl
 80102aa:	3001      	adds	r0, #1
 80102ac:	d09d      	beq.n	80101ea <_printf_i+0x15a>
 80102ae:	3501      	adds	r5, #1
 80102b0:	68e3      	ldr	r3, [r4, #12]
 80102b2:	9903      	ldr	r1, [sp, #12]
 80102b4:	1a5b      	subs	r3, r3, r1
 80102b6:	42ab      	cmp	r3, r5
 80102b8:	dcf2      	bgt.n	80102a0 <_printf_i+0x210>
 80102ba:	e7eb      	b.n	8010294 <_printf_i+0x204>
 80102bc:	2500      	movs	r5, #0
 80102be:	f104 0619 	add.w	r6, r4, #25
 80102c2:	e7f5      	b.n	80102b0 <_printf_i+0x220>
 80102c4:	08010ff4 	.word	0x08010ff4
 80102c8:	08011005 	.word	0x08011005

080102cc <__sflush_r>:
 80102cc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80102d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80102d4:	0716      	lsls	r6, r2, #28
 80102d6:	4605      	mov	r5, r0
 80102d8:	460c      	mov	r4, r1
 80102da:	d454      	bmi.n	8010386 <__sflush_r+0xba>
 80102dc:	684b      	ldr	r3, [r1, #4]
 80102de:	2b00      	cmp	r3, #0
 80102e0:	dc02      	bgt.n	80102e8 <__sflush_r+0x1c>
 80102e2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80102e4:	2b00      	cmp	r3, #0
 80102e6:	dd48      	ble.n	801037a <__sflush_r+0xae>
 80102e8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80102ea:	2e00      	cmp	r6, #0
 80102ec:	d045      	beq.n	801037a <__sflush_r+0xae>
 80102ee:	2300      	movs	r3, #0
 80102f0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80102f4:	682f      	ldr	r7, [r5, #0]
 80102f6:	6a21      	ldr	r1, [r4, #32]
 80102f8:	602b      	str	r3, [r5, #0]
 80102fa:	d030      	beq.n	801035e <__sflush_r+0x92>
 80102fc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80102fe:	89a3      	ldrh	r3, [r4, #12]
 8010300:	0759      	lsls	r1, r3, #29
 8010302:	d505      	bpl.n	8010310 <__sflush_r+0x44>
 8010304:	6863      	ldr	r3, [r4, #4]
 8010306:	1ad2      	subs	r2, r2, r3
 8010308:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801030a:	b10b      	cbz	r3, 8010310 <__sflush_r+0x44>
 801030c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801030e:	1ad2      	subs	r2, r2, r3
 8010310:	2300      	movs	r3, #0
 8010312:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010314:	6a21      	ldr	r1, [r4, #32]
 8010316:	4628      	mov	r0, r5
 8010318:	47b0      	blx	r6
 801031a:	1c43      	adds	r3, r0, #1
 801031c:	89a3      	ldrh	r3, [r4, #12]
 801031e:	d106      	bne.n	801032e <__sflush_r+0x62>
 8010320:	6829      	ldr	r1, [r5, #0]
 8010322:	291d      	cmp	r1, #29
 8010324:	d82b      	bhi.n	801037e <__sflush_r+0xb2>
 8010326:	4a2a      	ldr	r2, [pc, #168]	@ (80103d0 <__sflush_r+0x104>)
 8010328:	40ca      	lsrs	r2, r1
 801032a:	07d6      	lsls	r6, r2, #31
 801032c:	d527      	bpl.n	801037e <__sflush_r+0xb2>
 801032e:	2200      	movs	r2, #0
 8010330:	6062      	str	r2, [r4, #4]
 8010332:	04d9      	lsls	r1, r3, #19
 8010334:	6922      	ldr	r2, [r4, #16]
 8010336:	6022      	str	r2, [r4, #0]
 8010338:	d504      	bpl.n	8010344 <__sflush_r+0x78>
 801033a:	1c42      	adds	r2, r0, #1
 801033c:	d101      	bne.n	8010342 <__sflush_r+0x76>
 801033e:	682b      	ldr	r3, [r5, #0]
 8010340:	b903      	cbnz	r3, 8010344 <__sflush_r+0x78>
 8010342:	6560      	str	r0, [r4, #84]	@ 0x54
 8010344:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010346:	602f      	str	r7, [r5, #0]
 8010348:	b1b9      	cbz	r1, 801037a <__sflush_r+0xae>
 801034a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801034e:	4299      	cmp	r1, r3
 8010350:	d002      	beq.n	8010358 <__sflush_r+0x8c>
 8010352:	4628      	mov	r0, r5
 8010354:	f7fe fbdc 	bl	800eb10 <_free_r>
 8010358:	2300      	movs	r3, #0
 801035a:	6363      	str	r3, [r4, #52]	@ 0x34
 801035c:	e00d      	b.n	801037a <__sflush_r+0xae>
 801035e:	2301      	movs	r3, #1
 8010360:	4628      	mov	r0, r5
 8010362:	47b0      	blx	r6
 8010364:	4602      	mov	r2, r0
 8010366:	1c50      	adds	r0, r2, #1
 8010368:	d1c9      	bne.n	80102fe <__sflush_r+0x32>
 801036a:	682b      	ldr	r3, [r5, #0]
 801036c:	2b00      	cmp	r3, #0
 801036e:	d0c6      	beq.n	80102fe <__sflush_r+0x32>
 8010370:	2b1d      	cmp	r3, #29
 8010372:	d001      	beq.n	8010378 <__sflush_r+0xac>
 8010374:	2b16      	cmp	r3, #22
 8010376:	d11e      	bne.n	80103b6 <__sflush_r+0xea>
 8010378:	602f      	str	r7, [r5, #0]
 801037a:	2000      	movs	r0, #0
 801037c:	e022      	b.n	80103c4 <__sflush_r+0xf8>
 801037e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010382:	b21b      	sxth	r3, r3
 8010384:	e01b      	b.n	80103be <__sflush_r+0xf2>
 8010386:	690f      	ldr	r7, [r1, #16]
 8010388:	2f00      	cmp	r7, #0
 801038a:	d0f6      	beq.n	801037a <__sflush_r+0xae>
 801038c:	0793      	lsls	r3, r2, #30
 801038e:	680e      	ldr	r6, [r1, #0]
 8010390:	bf08      	it	eq
 8010392:	694b      	ldreq	r3, [r1, #20]
 8010394:	600f      	str	r7, [r1, #0]
 8010396:	bf18      	it	ne
 8010398:	2300      	movne	r3, #0
 801039a:	eba6 0807 	sub.w	r8, r6, r7
 801039e:	608b      	str	r3, [r1, #8]
 80103a0:	f1b8 0f00 	cmp.w	r8, #0
 80103a4:	dde9      	ble.n	801037a <__sflush_r+0xae>
 80103a6:	6a21      	ldr	r1, [r4, #32]
 80103a8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80103aa:	4643      	mov	r3, r8
 80103ac:	463a      	mov	r2, r7
 80103ae:	4628      	mov	r0, r5
 80103b0:	47b0      	blx	r6
 80103b2:	2800      	cmp	r0, #0
 80103b4:	dc08      	bgt.n	80103c8 <__sflush_r+0xfc>
 80103b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80103ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80103be:	81a3      	strh	r3, [r4, #12]
 80103c0:	f04f 30ff 	mov.w	r0, #4294967295
 80103c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80103c8:	4407      	add	r7, r0
 80103ca:	eba8 0800 	sub.w	r8, r8, r0
 80103ce:	e7e7      	b.n	80103a0 <__sflush_r+0xd4>
 80103d0:	20400001 	.word	0x20400001

080103d4 <_fflush_r>:
 80103d4:	b538      	push	{r3, r4, r5, lr}
 80103d6:	690b      	ldr	r3, [r1, #16]
 80103d8:	4605      	mov	r5, r0
 80103da:	460c      	mov	r4, r1
 80103dc:	b913      	cbnz	r3, 80103e4 <_fflush_r+0x10>
 80103de:	2500      	movs	r5, #0
 80103e0:	4628      	mov	r0, r5
 80103e2:	bd38      	pop	{r3, r4, r5, pc}
 80103e4:	b118      	cbz	r0, 80103ee <_fflush_r+0x1a>
 80103e6:	6a03      	ldr	r3, [r0, #32]
 80103e8:	b90b      	cbnz	r3, 80103ee <_fflush_r+0x1a>
 80103ea:	f7fe f9c5 	bl	800e778 <__sinit>
 80103ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80103f2:	2b00      	cmp	r3, #0
 80103f4:	d0f3      	beq.n	80103de <_fflush_r+0xa>
 80103f6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80103f8:	07d0      	lsls	r0, r2, #31
 80103fa:	d404      	bmi.n	8010406 <_fflush_r+0x32>
 80103fc:	0599      	lsls	r1, r3, #22
 80103fe:	d402      	bmi.n	8010406 <_fflush_r+0x32>
 8010400:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010402:	f7fe fb6c 	bl	800eade <__retarget_lock_acquire_recursive>
 8010406:	4628      	mov	r0, r5
 8010408:	4621      	mov	r1, r4
 801040a:	f7ff ff5f 	bl	80102cc <__sflush_r>
 801040e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010410:	07da      	lsls	r2, r3, #31
 8010412:	4605      	mov	r5, r0
 8010414:	d4e4      	bmi.n	80103e0 <_fflush_r+0xc>
 8010416:	89a3      	ldrh	r3, [r4, #12]
 8010418:	059b      	lsls	r3, r3, #22
 801041a:	d4e1      	bmi.n	80103e0 <_fflush_r+0xc>
 801041c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801041e:	f7fe fb5f 	bl	800eae0 <__retarget_lock_release_recursive>
 8010422:	e7dd      	b.n	80103e0 <_fflush_r+0xc>

08010424 <memmove>:
 8010424:	4288      	cmp	r0, r1
 8010426:	b510      	push	{r4, lr}
 8010428:	eb01 0402 	add.w	r4, r1, r2
 801042c:	d902      	bls.n	8010434 <memmove+0x10>
 801042e:	4284      	cmp	r4, r0
 8010430:	4623      	mov	r3, r4
 8010432:	d807      	bhi.n	8010444 <memmove+0x20>
 8010434:	1e43      	subs	r3, r0, #1
 8010436:	42a1      	cmp	r1, r4
 8010438:	d008      	beq.n	801044c <memmove+0x28>
 801043a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801043e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010442:	e7f8      	b.n	8010436 <memmove+0x12>
 8010444:	4402      	add	r2, r0
 8010446:	4601      	mov	r1, r0
 8010448:	428a      	cmp	r2, r1
 801044a:	d100      	bne.n	801044e <memmove+0x2a>
 801044c:	bd10      	pop	{r4, pc}
 801044e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010452:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010456:	e7f7      	b.n	8010448 <memmove+0x24>

08010458 <_sbrk_r>:
 8010458:	b538      	push	{r3, r4, r5, lr}
 801045a:	4d06      	ldr	r5, [pc, #24]	@ (8010474 <_sbrk_r+0x1c>)
 801045c:	2300      	movs	r3, #0
 801045e:	4604      	mov	r4, r0
 8010460:	4608      	mov	r0, r1
 8010462:	602b      	str	r3, [r5, #0]
 8010464:	f7f2 f82a 	bl	80024bc <_sbrk>
 8010468:	1c43      	adds	r3, r0, #1
 801046a:	d102      	bne.n	8010472 <_sbrk_r+0x1a>
 801046c:	682b      	ldr	r3, [r5, #0]
 801046e:	b103      	cbz	r3, 8010472 <_sbrk_r+0x1a>
 8010470:	6023      	str	r3, [r4, #0]
 8010472:	bd38      	pop	{r3, r4, r5, pc}
 8010474:	20004094 	.word	0x20004094

08010478 <__assert_func>:
 8010478:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801047a:	4614      	mov	r4, r2
 801047c:	461a      	mov	r2, r3
 801047e:	4b09      	ldr	r3, [pc, #36]	@ (80104a4 <__assert_func+0x2c>)
 8010480:	681b      	ldr	r3, [r3, #0]
 8010482:	4605      	mov	r5, r0
 8010484:	68d8      	ldr	r0, [r3, #12]
 8010486:	b14c      	cbz	r4, 801049c <__assert_func+0x24>
 8010488:	4b07      	ldr	r3, [pc, #28]	@ (80104a8 <__assert_func+0x30>)
 801048a:	9100      	str	r1, [sp, #0]
 801048c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010490:	4906      	ldr	r1, [pc, #24]	@ (80104ac <__assert_func+0x34>)
 8010492:	462b      	mov	r3, r5
 8010494:	f000 f858 	bl	8010548 <fiprintf>
 8010498:	f000 f868 	bl	801056c <abort>
 801049c:	4b04      	ldr	r3, [pc, #16]	@ (80104b0 <__assert_func+0x38>)
 801049e:	461c      	mov	r4, r3
 80104a0:	e7f3      	b.n	801048a <__assert_func+0x12>
 80104a2:	bf00      	nop
 80104a4:	200001a8 	.word	0x200001a8
 80104a8:	08011016 	.word	0x08011016
 80104ac:	08011023 	.word	0x08011023
 80104b0:	08011051 	.word	0x08011051

080104b4 <_calloc_r>:
 80104b4:	b570      	push	{r4, r5, r6, lr}
 80104b6:	fba1 5402 	umull	r5, r4, r1, r2
 80104ba:	b934      	cbnz	r4, 80104ca <_calloc_r+0x16>
 80104bc:	4629      	mov	r1, r5
 80104be:	f7fe fecd 	bl	800f25c <_malloc_r>
 80104c2:	4606      	mov	r6, r0
 80104c4:	b928      	cbnz	r0, 80104d2 <_calloc_r+0x1e>
 80104c6:	4630      	mov	r0, r6
 80104c8:	bd70      	pop	{r4, r5, r6, pc}
 80104ca:	220c      	movs	r2, #12
 80104cc:	6002      	str	r2, [r0, #0]
 80104ce:	2600      	movs	r6, #0
 80104d0:	e7f9      	b.n	80104c6 <_calloc_r+0x12>
 80104d2:	462a      	mov	r2, r5
 80104d4:	4621      	mov	r1, r4
 80104d6:	f7fe fa05 	bl	800e8e4 <memset>
 80104da:	e7f4      	b.n	80104c6 <_calloc_r+0x12>

080104dc <malloc>:
 80104dc:	4b02      	ldr	r3, [pc, #8]	@ (80104e8 <malloc+0xc>)
 80104de:	4601      	mov	r1, r0
 80104e0:	6818      	ldr	r0, [r3, #0]
 80104e2:	f7fe bebb 	b.w	800f25c <_malloc_r>
 80104e6:	bf00      	nop
 80104e8:	200001a8 	.word	0x200001a8

080104ec <_realloc_r>:
 80104ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80104f0:	4607      	mov	r7, r0
 80104f2:	4614      	mov	r4, r2
 80104f4:	460d      	mov	r5, r1
 80104f6:	b921      	cbnz	r1, 8010502 <_realloc_r+0x16>
 80104f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80104fc:	4611      	mov	r1, r2
 80104fe:	f7fe bead 	b.w	800f25c <_malloc_r>
 8010502:	b92a      	cbnz	r2, 8010510 <_realloc_r+0x24>
 8010504:	f7fe fb04 	bl	800eb10 <_free_r>
 8010508:	4625      	mov	r5, r4
 801050a:	4628      	mov	r0, r5
 801050c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010510:	f000 f833 	bl	801057a <_malloc_usable_size_r>
 8010514:	4284      	cmp	r4, r0
 8010516:	4606      	mov	r6, r0
 8010518:	d802      	bhi.n	8010520 <_realloc_r+0x34>
 801051a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801051e:	d8f4      	bhi.n	801050a <_realloc_r+0x1e>
 8010520:	4621      	mov	r1, r4
 8010522:	4638      	mov	r0, r7
 8010524:	f7fe fe9a 	bl	800f25c <_malloc_r>
 8010528:	4680      	mov	r8, r0
 801052a:	b908      	cbnz	r0, 8010530 <_realloc_r+0x44>
 801052c:	4645      	mov	r5, r8
 801052e:	e7ec      	b.n	801050a <_realloc_r+0x1e>
 8010530:	42b4      	cmp	r4, r6
 8010532:	4622      	mov	r2, r4
 8010534:	4629      	mov	r1, r5
 8010536:	bf28      	it	cs
 8010538:	4632      	movcs	r2, r6
 801053a:	f7fe fad2 	bl	800eae2 <memcpy>
 801053e:	4629      	mov	r1, r5
 8010540:	4638      	mov	r0, r7
 8010542:	f7fe fae5 	bl	800eb10 <_free_r>
 8010546:	e7f1      	b.n	801052c <_realloc_r+0x40>

08010548 <fiprintf>:
 8010548:	b40e      	push	{r1, r2, r3}
 801054a:	b503      	push	{r0, r1, lr}
 801054c:	4601      	mov	r1, r0
 801054e:	ab03      	add	r3, sp, #12
 8010550:	4805      	ldr	r0, [pc, #20]	@ (8010568 <fiprintf+0x20>)
 8010552:	f853 2b04 	ldr.w	r2, [r3], #4
 8010556:	6800      	ldr	r0, [r0, #0]
 8010558:	9301      	str	r3, [sp, #4]
 801055a:	f000 f83f 	bl	80105dc <_vfiprintf_r>
 801055e:	b002      	add	sp, #8
 8010560:	f85d eb04 	ldr.w	lr, [sp], #4
 8010564:	b003      	add	sp, #12
 8010566:	4770      	bx	lr
 8010568:	200001a8 	.word	0x200001a8

0801056c <abort>:
 801056c:	b508      	push	{r3, lr}
 801056e:	2006      	movs	r0, #6
 8010570:	f000 fa08 	bl	8010984 <raise>
 8010574:	2001      	movs	r0, #1
 8010576:	f7f1 ff29 	bl	80023cc <_exit>

0801057a <_malloc_usable_size_r>:
 801057a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801057e:	1f18      	subs	r0, r3, #4
 8010580:	2b00      	cmp	r3, #0
 8010582:	bfbc      	itt	lt
 8010584:	580b      	ldrlt	r3, [r1, r0]
 8010586:	18c0      	addlt	r0, r0, r3
 8010588:	4770      	bx	lr

0801058a <__sfputc_r>:
 801058a:	6893      	ldr	r3, [r2, #8]
 801058c:	3b01      	subs	r3, #1
 801058e:	2b00      	cmp	r3, #0
 8010590:	b410      	push	{r4}
 8010592:	6093      	str	r3, [r2, #8]
 8010594:	da08      	bge.n	80105a8 <__sfputc_r+0x1e>
 8010596:	6994      	ldr	r4, [r2, #24]
 8010598:	42a3      	cmp	r3, r4
 801059a:	db01      	blt.n	80105a0 <__sfputc_r+0x16>
 801059c:	290a      	cmp	r1, #10
 801059e:	d103      	bne.n	80105a8 <__sfputc_r+0x1e>
 80105a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80105a4:	f000 b932 	b.w	801080c <__swbuf_r>
 80105a8:	6813      	ldr	r3, [r2, #0]
 80105aa:	1c58      	adds	r0, r3, #1
 80105ac:	6010      	str	r0, [r2, #0]
 80105ae:	7019      	strb	r1, [r3, #0]
 80105b0:	4608      	mov	r0, r1
 80105b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80105b6:	4770      	bx	lr

080105b8 <__sfputs_r>:
 80105b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80105ba:	4606      	mov	r6, r0
 80105bc:	460f      	mov	r7, r1
 80105be:	4614      	mov	r4, r2
 80105c0:	18d5      	adds	r5, r2, r3
 80105c2:	42ac      	cmp	r4, r5
 80105c4:	d101      	bne.n	80105ca <__sfputs_r+0x12>
 80105c6:	2000      	movs	r0, #0
 80105c8:	e007      	b.n	80105da <__sfputs_r+0x22>
 80105ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80105ce:	463a      	mov	r2, r7
 80105d0:	4630      	mov	r0, r6
 80105d2:	f7ff ffda 	bl	801058a <__sfputc_r>
 80105d6:	1c43      	adds	r3, r0, #1
 80105d8:	d1f3      	bne.n	80105c2 <__sfputs_r+0xa>
 80105da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080105dc <_vfiprintf_r>:
 80105dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80105e0:	460d      	mov	r5, r1
 80105e2:	b09d      	sub	sp, #116	@ 0x74
 80105e4:	4614      	mov	r4, r2
 80105e6:	4698      	mov	r8, r3
 80105e8:	4606      	mov	r6, r0
 80105ea:	b118      	cbz	r0, 80105f4 <_vfiprintf_r+0x18>
 80105ec:	6a03      	ldr	r3, [r0, #32]
 80105ee:	b90b      	cbnz	r3, 80105f4 <_vfiprintf_r+0x18>
 80105f0:	f7fe f8c2 	bl	800e778 <__sinit>
 80105f4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80105f6:	07d9      	lsls	r1, r3, #31
 80105f8:	d405      	bmi.n	8010606 <_vfiprintf_r+0x2a>
 80105fa:	89ab      	ldrh	r3, [r5, #12]
 80105fc:	059a      	lsls	r2, r3, #22
 80105fe:	d402      	bmi.n	8010606 <_vfiprintf_r+0x2a>
 8010600:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010602:	f7fe fa6c 	bl	800eade <__retarget_lock_acquire_recursive>
 8010606:	89ab      	ldrh	r3, [r5, #12]
 8010608:	071b      	lsls	r3, r3, #28
 801060a:	d501      	bpl.n	8010610 <_vfiprintf_r+0x34>
 801060c:	692b      	ldr	r3, [r5, #16]
 801060e:	b99b      	cbnz	r3, 8010638 <_vfiprintf_r+0x5c>
 8010610:	4629      	mov	r1, r5
 8010612:	4630      	mov	r0, r6
 8010614:	f000 f938 	bl	8010888 <__swsetup_r>
 8010618:	b170      	cbz	r0, 8010638 <_vfiprintf_r+0x5c>
 801061a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801061c:	07dc      	lsls	r4, r3, #31
 801061e:	d504      	bpl.n	801062a <_vfiprintf_r+0x4e>
 8010620:	f04f 30ff 	mov.w	r0, #4294967295
 8010624:	b01d      	add	sp, #116	@ 0x74
 8010626:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801062a:	89ab      	ldrh	r3, [r5, #12]
 801062c:	0598      	lsls	r0, r3, #22
 801062e:	d4f7      	bmi.n	8010620 <_vfiprintf_r+0x44>
 8010630:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010632:	f7fe fa55 	bl	800eae0 <__retarget_lock_release_recursive>
 8010636:	e7f3      	b.n	8010620 <_vfiprintf_r+0x44>
 8010638:	2300      	movs	r3, #0
 801063a:	9309      	str	r3, [sp, #36]	@ 0x24
 801063c:	2320      	movs	r3, #32
 801063e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010642:	f8cd 800c 	str.w	r8, [sp, #12]
 8010646:	2330      	movs	r3, #48	@ 0x30
 8010648:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80107f8 <_vfiprintf_r+0x21c>
 801064c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010650:	f04f 0901 	mov.w	r9, #1
 8010654:	4623      	mov	r3, r4
 8010656:	469a      	mov	sl, r3
 8010658:	f813 2b01 	ldrb.w	r2, [r3], #1
 801065c:	b10a      	cbz	r2, 8010662 <_vfiprintf_r+0x86>
 801065e:	2a25      	cmp	r2, #37	@ 0x25
 8010660:	d1f9      	bne.n	8010656 <_vfiprintf_r+0x7a>
 8010662:	ebba 0b04 	subs.w	fp, sl, r4
 8010666:	d00b      	beq.n	8010680 <_vfiprintf_r+0xa4>
 8010668:	465b      	mov	r3, fp
 801066a:	4622      	mov	r2, r4
 801066c:	4629      	mov	r1, r5
 801066e:	4630      	mov	r0, r6
 8010670:	f7ff ffa2 	bl	80105b8 <__sfputs_r>
 8010674:	3001      	adds	r0, #1
 8010676:	f000 80a7 	beq.w	80107c8 <_vfiprintf_r+0x1ec>
 801067a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801067c:	445a      	add	r2, fp
 801067e:	9209      	str	r2, [sp, #36]	@ 0x24
 8010680:	f89a 3000 	ldrb.w	r3, [sl]
 8010684:	2b00      	cmp	r3, #0
 8010686:	f000 809f 	beq.w	80107c8 <_vfiprintf_r+0x1ec>
 801068a:	2300      	movs	r3, #0
 801068c:	f04f 32ff 	mov.w	r2, #4294967295
 8010690:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010694:	f10a 0a01 	add.w	sl, sl, #1
 8010698:	9304      	str	r3, [sp, #16]
 801069a:	9307      	str	r3, [sp, #28]
 801069c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80106a0:	931a      	str	r3, [sp, #104]	@ 0x68
 80106a2:	4654      	mov	r4, sl
 80106a4:	2205      	movs	r2, #5
 80106a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80106aa:	4853      	ldr	r0, [pc, #332]	@ (80107f8 <_vfiprintf_r+0x21c>)
 80106ac:	f7ef fda8 	bl	8000200 <memchr>
 80106b0:	9a04      	ldr	r2, [sp, #16]
 80106b2:	b9d8      	cbnz	r0, 80106ec <_vfiprintf_r+0x110>
 80106b4:	06d1      	lsls	r1, r2, #27
 80106b6:	bf44      	itt	mi
 80106b8:	2320      	movmi	r3, #32
 80106ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80106be:	0713      	lsls	r3, r2, #28
 80106c0:	bf44      	itt	mi
 80106c2:	232b      	movmi	r3, #43	@ 0x2b
 80106c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80106c8:	f89a 3000 	ldrb.w	r3, [sl]
 80106cc:	2b2a      	cmp	r3, #42	@ 0x2a
 80106ce:	d015      	beq.n	80106fc <_vfiprintf_r+0x120>
 80106d0:	9a07      	ldr	r2, [sp, #28]
 80106d2:	4654      	mov	r4, sl
 80106d4:	2000      	movs	r0, #0
 80106d6:	f04f 0c0a 	mov.w	ip, #10
 80106da:	4621      	mov	r1, r4
 80106dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80106e0:	3b30      	subs	r3, #48	@ 0x30
 80106e2:	2b09      	cmp	r3, #9
 80106e4:	d94b      	bls.n	801077e <_vfiprintf_r+0x1a2>
 80106e6:	b1b0      	cbz	r0, 8010716 <_vfiprintf_r+0x13a>
 80106e8:	9207      	str	r2, [sp, #28]
 80106ea:	e014      	b.n	8010716 <_vfiprintf_r+0x13a>
 80106ec:	eba0 0308 	sub.w	r3, r0, r8
 80106f0:	fa09 f303 	lsl.w	r3, r9, r3
 80106f4:	4313      	orrs	r3, r2
 80106f6:	9304      	str	r3, [sp, #16]
 80106f8:	46a2      	mov	sl, r4
 80106fa:	e7d2      	b.n	80106a2 <_vfiprintf_r+0xc6>
 80106fc:	9b03      	ldr	r3, [sp, #12]
 80106fe:	1d19      	adds	r1, r3, #4
 8010700:	681b      	ldr	r3, [r3, #0]
 8010702:	9103      	str	r1, [sp, #12]
 8010704:	2b00      	cmp	r3, #0
 8010706:	bfbb      	ittet	lt
 8010708:	425b      	neglt	r3, r3
 801070a:	f042 0202 	orrlt.w	r2, r2, #2
 801070e:	9307      	strge	r3, [sp, #28]
 8010710:	9307      	strlt	r3, [sp, #28]
 8010712:	bfb8      	it	lt
 8010714:	9204      	strlt	r2, [sp, #16]
 8010716:	7823      	ldrb	r3, [r4, #0]
 8010718:	2b2e      	cmp	r3, #46	@ 0x2e
 801071a:	d10a      	bne.n	8010732 <_vfiprintf_r+0x156>
 801071c:	7863      	ldrb	r3, [r4, #1]
 801071e:	2b2a      	cmp	r3, #42	@ 0x2a
 8010720:	d132      	bne.n	8010788 <_vfiprintf_r+0x1ac>
 8010722:	9b03      	ldr	r3, [sp, #12]
 8010724:	1d1a      	adds	r2, r3, #4
 8010726:	681b      	ldr	r3, [r3, #0]
 8010728:	9203      	str	r2, [sp, #12]
 801072a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801072e:	3402      	adds	r4, #2
 8010730:	9305      	str	r3, [sp, #20]
 8010732:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8010808 <_vfiprintf_r+0x22c>
 8010736:	7821      	ldrb	r1, [r4, #0]
 8010738:	2203      	movs	r2, #3
 801073a:	4650      	mov	r0, sl
 801073c:	f7ef fd60 	bl	8000200 <memchr>
 8010740:	b138      	cbz	r0, 8010752 <_vfiprintf_r+0x176>
 8010742:	9b04      	ldr	r3, [sp, #16]
 8010744:	eba0 000a 	sub.w	r0, r0, sl
 8010748:	2240      	movs	r2, #64	@ 0x40
 801074a:	4082      	lsls	r2, r0
 801074c:	4313      	orrs	r3, r2
 801074e:	3401      	adds	r4, #1
 8010750:	9304      	str	r3, [sp, #16]
 8010752:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010756:	4829      	ldr	r0, [pc, #164]	@ (80107fc <_vfiprintf_r+0x220>)
 8010758:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801075c:	2206      	movs	r2, #6
 801075e:	f7ef fd4f 	bl	8000200 <memchr>
 8010762:	2800      	cmp	r0, #0
 8010764:	d03f      	beq.n	80107e6 <_vfiprintf_r+0x20a>
 8010766:	4b26      	ldr	r3, [pc, #152]	@ (8010800 <_vfiprintf_r+0x224>)
 8010768:	bb1b      	cbnz	r3, 80107b2 <_vfiprintf_r+0x1d6>
 801076a:	9b03      	ldr	r3, [sp, #12]
 801076c:	3307      	adds	r3, #7
 801076e:	f023 0307 	bic.w	r3, r3, #7
 8010772:	3308      	adds	r3, #8
 8010774:	9303      	str	r3, [sp, #12]
 8010776:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010778:	443b      	add	r3, r7
 801077a:	9309      	str	r3, [sp, #36]	@ 0x24
 801077c:	e76a      	b.n	8010654 <_vfiprintf_r+0x78>
 801077e:	fb0c 3202 	mla	r2, ip, r2, r3
 8010782:	460c      	mov	r4, r1
 8010784:	2001      	movs	r0, #1
 8010786:	e7a8      	b.n	80106da <_vfiprintf_r+0xfe>
 8010788:	2300      	movs	r3, #0
 801078a:	3401      	adds	r4, #1
 801078c:	9305      	str	r3, [sp, #20]
 801078e:	4619      	mov	r1, r3
 8010790:	f04f 0c0a 	mov.w	ip, #10
 8010794:	4620      	mov	r0, r4
 8010796:	f810 2b01 	ldrb.w	r2, [r0], #1
 801079a:	3a30      	subs	r2, #48	@ 0x30
 801079c:	2a09      	cmp	r2, #9
 801079e:	d903      	bls.n	80107a8 <_vfiprintf_r+0x1cc>
 80107a0:	2b00      	cmp	r3, #0
 80107a2:	d0c6      	beq.n	8010732 <_vfiprintf_r+0x156>
 80107a4:	9105      	str	r1, [sp, #20]
 80107a6:	e7c4      	b.n	8010732 <_vfiprintf_r+0x156>
 80107a8:	fb0c 2101 	mla	r1, ip, r1, r2
 80107ac:	4604      	mov	r4, r0
 80107ae:	2301      	movs	r3, #1
 80107b0:	e7f0      	b.n	8010794 <_vfiprintf_r+0x1b8>
 80107b2:	ab03      	add	r3, sp, #12
 80107b4:	9300      	str	r3, [sp, #0]
 80107b6:	462a      	mov	r2, r5
 80107b8:	4b12      	ldr	r3, [pc, #72]	@ (8010804 <_vfiprintf_r+0x228>)
 80107ba:	a904      	add	r1, sp, #16
 80107bc:	4630      	mov	r0, r6
 80107be:	f3af 8000 	nop.w
 80107c2:	4607      	mov	r7, r0
 80107c4:	1c78      	adds	r0, r7, #1
 80107c6:	d1d6      	bne.n	8010776 <_vfiprintf_r+0x19a>
 80107c8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80107ca:	07d9      	lsls	r1, r3, #31
 80107cc:	d405      	bmi.n	80107da <_vfiprintf_r+0x1fe>
 80107ce:	89ab      	ldrh	r3, [r5, #12]
 80107d0:	059a      	lsls	r2, r3, #22
 80107d2:	d402      	bmi.n	80107da <_vfiprintf_r+0x1fe>
 80107d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80107d6:	f7fe f983 	bl	800eae0 <__retarget_lock_release_recursive>
 80107da:	89ab      	ldrh	r3, [r5, #12]
 80107dc:	065b      	lsls	r3, r3, #25
 80107de:	f53f af1f 	bmi.w	8010620 <_vfiprintf_r+0x44>
 80107e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80107e4:	e71e      	b.n	8010624 <_vfiprintf_r+0x48>
 80107e6:	ab03      	add	r3, sp, #12
 80107e8:	9300      	str	r3, [sp, #0]
 80107ea:	462a      	mov	r2, r5
 80107ec:	4b05      	ldr	r3, [pc, #20]	@ (8010804 <_vfiprintf_r+0x228>)
 80107ee:	a904      	add	r1, sp, #16
 80107f0:	4630      	mov	r0, r6
 80107f2:	f7ff fc4d 	bl	8010090 <_printf_i>
 80107f6:	e7e4      	b.n	80107c2 <_vfiprintf_r+0x1e6>
 80107f8:	08010fe3 	.word	0x08010fe3
 80107fc:	08010fed 	.word	0x08010fed
 8010800:	00000000 	.word	0x00000000
 8010804:	080105b9 	.word	0x080105b9
 8010808:	08010fe9 	.word	0x08010fe9

0801080c <__swbuf_r>:
 801080c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801080e:	460e      	mov	r6, r1
 8010810:	4614      	mov	r4, r2
 8010812:	4605      	mov	r5, r0
 8010814:	b118      	cbz	r0, 801081e <__swbuf_r+0x12>
 8010816:	6a03      	ldr	r3, [r0, #32]
 8010818:	b90b      	cbnz	r3, 801081e <__swbuf_r+0x12>
 801081a:	f7fd ffad 	bl	800e778 <__sinit>
 801081e:	69a3      	ldr	r3, [r4, #24]
 8010820:	60a3      	str	r3, [r4, #8]
 8010822:	89a3      	ldrh	r3, [r4, #12]
 8010824:	071a      	lsls	r2, r3, #28
 8010826:	d501      	bpl.n	801082c <__swbuf_r+0x20>
 8010828:	6923      	ldr	r3, [r4, #16]
 801082a:	b943      	cbnz	r3, 801083e <__swbuf_r+0x32>
 801082c:	4621      	mov	r1, r4
 801082e:	4628      	mov	r0, r5
 8010830:	f000 f82a 	bl	8010888 <__swsetup_r>
 8010834:	b118      	cbz	r0, 801083e <__swbuf_r+0x32>
 8010836:	f04f 37ff 	mov.w	r7, #4294967295
 801083a:	4638      	mov	r0, r7
 801083c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801083e:	6823      	ldr	r3, [r4, #0]
 8010840:	6922      	ldr	r2, [r4, #16]
 8010842:	1a98      	subs	r0, r3, r2
 8010844:	6963      	ldr	r3, [r4, #20]
 8010846:	b2f6      	uxtb	r6, r6
 8010848:	4283      	cmp	r3, r0
 801084a:	4637      	mov	r7, r6
 801084c:	dc05      	bgt.n	801085a <__swbuf_r+0x4e>
 801084e:	4621      	mov	r1, r4
 8010850:	4628      	mov	r0, r5
 8010852:	f7ff fdbf 	bl	80103d4 <_fflush_r>
 8010856:	2800      	cmp	r0, #0
 8010858:	d1ed      	bne.n	8010836 <__swbuf_r+0x2a>
 801085a:	68a3      	ldr	r3, [r4, #8]
 801085c:	3b01      	subs	r3, #1
 801085e:	60a3      	str	r3, [r4, #8]
 8010860:	6823      	ldr	r3, [r4, #0]
 8010862:	1c5a      	adds	r2, r3, #1
 8010864:	6022      	str	r2, [r4, #0]
 8010866:	701e      	strb	r6, [r3, #0]
 8010868:	6962      	ldr	r2, [r4, #20]
 801086a:	1c43      	adds	r3, r0, #1
 801086c:	429a      	cmp	r2, r3
 801086e:	d004      	beq.n	801087a <__swbuf_r+0x6e>
 8010870:	89a3      	ldrh	r3, [r4, #12]
 8010872:	07db      	lsls	r3, r3, #31
 8010874:	d5e1      	bpl.n	801083a <__swbuf_r+0x2e>
 8010876:	2e0a      	cmp	r6, #10
 8010878:	d1df      	bne.n	801083a <__swbuf_r+0x2e>
 801087a:	4621      	mov	r1, r4
 801087c:	4628      	mov	r0, r5
 801087e:	f7ff fda9 	bl	80103d4 <_fflush_r>
 8010882:	2800      	cmp	r0, #0
 8010884:	d0d9      	beq.n	801083a <__swbuf_r+0x2e>
 8010886:	e7d6      	b.n	8010836 <__swbuf_r+0x2a>

08010888 <__swsetup_r>:
 8010888:	b538      	push	{r3, r4, r5, lr}
 801088a:	4b29      	ldr	r3, [pc, #164]	@ (8010930 <__swsetup_r+0xa8>)
 801088c:	4605      	mov	r5, r0
 801088e:	6818      	ldr	r0, [r3, #0]
 8010890:	460c      	mov	r4, r1
 8010892:	b118      	cbz	r0, 801089c <__swsetup_r+0x14>
 8010894:	6a03      	ldr	r3, [r0, #32]
 8010896:	b90b      	cbnz	r3, 801089c <__swsetup_r+0x14>
 8010898:	f7fd ff6e 	bl	800e778 <__sinit>
 801089c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80108a0:	0719      	lsls	r1, r3, #28
 80108a2:	d422      	bmi.n	80108ea <__swsetup_r+0x62>
 80108a4:	06da      	lsls	r2, r3, #27
 80108a6:	d407      	bmi.n	80108b8 <__swsetup_r+0x30>
 80108a8:	2209      	movs	r2, #9
 80108aa:	602a      	str	r2, [r5, #0]
 80108ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80108b0:	81a3      	strh	r3, [r4, #12]
 80108b2:	f04f 30ff 	mov.w	r0, #4294967295
 80108b6:	e033      	b.n	8010920 <__swsetup_r+0x98>
 80108b8:	0758      	lsls	r0, r3, #29
 80108ba:	d512      	bpl.n	80108e2 <__swsetup_r+0x5a>
 80108bc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80108be:	b141      	cbz	r1, 80108d2 <__swsetup_r+0x4a>
 80108c0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80108c4:	4299      	cmp	r1, r3
 80108c6:	d002      	beq.n	80108ce <__swsetup_r+0x46>
 80108c8:	4628      	mov	r0, r5
 80108ca:	f7fe f921 	bl	800eb10 <_free_r>
 80108ce:	2300      	movs	r3, #0
 80108d0:	6363      	str	r3, [r4, #52]	@ 0x34
 80108d2:	89a3      	ldrh	r3, [r4, #12]
 80108d4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80108d8:	81a3      	strh	r3, [r4, #12]
 80108da:	2300      	movs	r3, #0
 80108dc:	6063      	str	r3, [r4, #4]
 80108de:	6923      	ldr	r3, [r4, #16]
 80108e0:	6023      	str	r3, [r4, #0]
 80108e2:	89a3      	ldrh	r3, [r4, #12]
 80108e4:	f043 0308 	orr.w	r3, r3, #8
 80108e8:	81a3      	strh	r3, [r4, #12]
 80108ea:	6923      	ldr	r3, [r4, #16]
 80108ec:	b94b      	cbnz	r3, 8010902 <__swsetup_r+0x7a>
 80108ee:	89a3      	ldrh	r3, [r4, #12]
 80108f0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80108f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80108f8:	d003      	beq.n	8010902 <__swsetup_r+0x7a>
 80108fa:	4621      	mov	r1, r4
 80108fc:	4628      	mov	r0, r5
 80108fe:	f000 f883 	bl	8010a08 <__smakebuf_r>
 8010902:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010906:	f013 0201 	ands.w	r2, r3, #1
 801090a:	d00a      	beq.n	8010922 <__swsetup_r+0x9a>
 801090c:	2200      	movs	r2, #0
 801090e:	60a2      	str	r2, [r4, #8]
 8010910:	6962      	ldr	r2, [r4, #20]
 8010912:	4252      	negs	r2, r2
 8010914:	61a2      	str	r2, [r4, #24]
 8010916:	6922      	ldr	r2, [r4, #16]
 8010918:	b942      	cbnz	r2, 801092c <__swsetup_r+0xa4>
 801091a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801091e:	d1c5      	bne.n	80108ac <__swsetup_r+0x24>
 8010920:	bd38      	pop	{r3, r4, r5, pc}
 8010922:	0799      	lsls	r1, r3, #30
 8010924:	bf58      	it	pl
 8010926:	6962      	ldrpl	r2, [r4, #20]
 8010928:	60a2      	str	r2, [r4, #8]
 801092a:	e7f4      	b.n	8010916 <__swsetup_r+0x8e>
 801092c:	2000      	movs	r0, #0
 801092e:	e7f7      	b.n	8010920 <__swsetup_r+0x98>
 8010930:	200001a8 	.word	0x200001a8

08010934 <_raise_r>:
 8010934:	291f      	cmp	r1, #31
 8010936:	b538      	push	{r3, r4, r5, lr}
 8010938:	4605      	mov	r5, r0
 801093a:	460c      	mov	r4, r1
 801093c:	d904      	bls.n	8010948 <_raise_r+0x14>
 801093e:	2316      	movs	r3, #22
 8010940:	6003      	str	r3, [r0, #0]
 8010942:	f04f 30ff 	mov.w	r0, #4294967295
 8010946:	bd38      	pop	{r3, r4, r5, pc}
 8010948:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801094a:	b112      	cbz	r2, 8010952 <_raise_r+0x1e>
 801094c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010950:	b94b      	cbnz	r3, 8010966 <_raise_r+0x32>
 8010952:	4628      	mov	r0, r5
 8010954:	f000 f830 	bl	80109b8 <_getpid_r>
 8010958:	4622      	mov	r2, r4
 801095a:	4601      	mov	r1, r0
 801095c:	4628      	mov	r0, r5
 801095e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010962:	f000 b817 	b.w	8010994 <_kill_r>
 8010966:	2b01      	cmp	r3, #1
 8010968:	d00a      	beq.n	8010980 <_raise_r+0x4c>
 801096a:	1c59      	adds	r1, r3, #1
 801096c:	d103      	bne.n	8010976 <_raise_r+0x42>
 801096e:	2316      	movs	r3, #22
 8010970:	6003      	str	r3, [r0, #0]
 8010972:	2001      	movs	r0, #1
 8010974:	e7e7      	b.n	8010946 <_raise_r+0x12>
 8010976:	2100      	movs	r1, #0
 8010978:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801097c:	4620      	mov	r0, r4
 801097e:	4798      	blx	r3
 8010980:	2000      	movs	r0, #0
 8010982:	e7e0      	b.n	8010946 <_raise_r+0x12>

08010984 <raise>:
 8010984:	4b02      	ldr	r3, [pc, #8]	@ (8010990 <raise+0xc>)
 8010986:	4601      	mov	r1, r0
 8010988:	6818      	ldr	r0, [r3, #0]
 801098a:	f7ff bfd3 	b.w	8010934 <_raise_r>
 801098e:	bf00      	nop
 8010990:	200001a8 	.word	0x200001a8

08010994 <_kill_r>:
 8010994:	b538      	push	{r3, r4, r5, lr}
 8010996:	4d07      	ldr	r5, [pc, #28]	@ (80109b4 <_kill_r+0x20>)
 8010998:	2300      	movs	r3, #0
 801099a:	4604      	mov	r4, r0
 801099c:	4608      	mov	r0, r1
 801099e:	4611      	mov	r1, r2
 80109a0:	602b      	str	r3, [r5, #0]
 80109a2:	f7f1 fd03 	bl	80023ac <_kill>
 80109a6:	1c43      	adds	r3, r0, #1
 80109a8:	d102      	bne.n	80109b0 <_kill_r+0x1c>
 80109aa:	682b      	ldr	r3, [r5, #0]
 80109ac:	b103      	cbz	r3, 80109b0 <_kill_r+0x1c>
 80109ae:	6023      	str	r3, [r4, #0]
 80109b0:	bd38      	pop	{r3, r4, r5, pc}
 80109b2:	bf00      	nop
 80109b4:	20004094 	.word	0x20004094

080109b8 <_getpid_r>:
 80109b8:	f7f1 bcf0 	b.w	800239c <_getpid>

080109bc <__swhatbuf_r>:
 80109bc:	b570      	push	{r4, r5, r6, lr}
 80109be:	460c      	mov	r4, r1
 80109c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80109c4:	2900      	cmp	r1, #0
 80109c6:	b096      	sub	sp, #88	@ 0x58
 80109c8:	4615      	mov	r5, r2
 80109ca:	461e      	mov	r6, r3
 80109cc:	da0d      	bge.n	80109ea <__swhatbuf_r+0x2e>
 80109ce:	89a3      	ldrh	r3, [r4, #12]
 80109d0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80109d4:	f04f 0100 	mov.w	r1, #0
 80109d8:	bf14      	ite	ne
 80109da:	2340      	movne	r3, #64	@ 0x40
 80109dc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80109e0:	2000      	movs	r0, #0
 80109e2:	6031      	str	r1, [r6, #0]
 80109e4:	602b      	str	r3, [r5, #0]
 80109e6:	b016      	add	sp, #88	@ 0x58
 80109e8:	bd70      	pop	{r4, r5, r6, pc}
 80109ea:	466a      	mov	r2, sp
 80109ec:	f000 f848 	bl	8010a80 <_fstat_r>
 80109f0:	2800      	cmp	r0, #0
 80109f2:	dbec      	blt.n	80109ce <__swhatbuf_r+0x12>
 80109f4:	9901      	ldr	r1, [sp, #4]
 80109f6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80109fa:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80109fe:	4259      	negs	r1, r3
 8010a00:	4159      	adcs	r1, r3
 8010a02:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010a06:	e7eb      	b.n	80109e0 <__swhatbuf_r+0x24>

08010a08 <__smakebuf_r>:
 8010a08:	898b      	ldrh	r3, [r1, #12]
 8010a0a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010a0c:	079d      	lsls	r5, r3, #30
 8010a0e:	4606      	mov	r6, r0
 8010a10:	460c      	mov	r4, r1
 8010a12:	d507      	bpl.n	8010a24 <__smakebuf_r+0x1c>
 8010a14:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8010a18:	6023      	str	r3, [r4, #0]
 8010a1a:	6123      	str	r3, [r4, #16]
 8010a1c:	2301      	movs	r3, #1
 8010a1e:	6163      	str	r3, [r4, #20]
 8010a20:	b003      	add	sp, #12
 8010a22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010a24:	ab01      	add	r3, sp, #4
 8010a26:	466a      	mov	r2, sp
 8010a28:	f7ff ffc8 	bl	80109bc <__swhatbuf_r>
 8010a2c:	9f00      	ldr	r7, [sp, #0]
 8010a2e:	4605      	mov	r5, r0
 8010a30:	4639      	mov	r1, r7
 8010a32:	4630      	mov	r0, r6
 8010a34:	f7fe fc12 	bl	800f25c <_malloc_r>
 8010a38:	b948      	cbnz	r0, 8010a4e <__smakebuf_r+0x46>
 8010a3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010a3e:	059a      	lsls	r2, r3, #22
 8010a40:	d4ee      	bmi.n	8010a20 <__smakebuf_r+0x18>
 8010a42:	f023 0303 	bic.w	r3, r3, #3
 8010a46:	f043 0302 	orr.w	r3, r3, #2
 8010a4a:	81a3      	strh	r3, [r4, #12]
 8010a4c:	e7e2      	b.n	8010a14 <__smakebuf_r+0xc>
 8010a4e:	89a3      	ldrh	r3, [r4, #12]
 8010a50:	6020      	str	r0, [r4, #0]
 8010a52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010a56:	81a3      	strh	r3, [r4, #12]
 8010a58:	9b01      	ldr	r3, [sp, #4]
 8010a5a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8010a5e:	b15b      	cbz	r3, 8010a78 <__smakebuf_r+0x70>
 8010a60:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010a64:	4630      	mov	r0, r6
 8010a66:	f000 f81d 	bl	8010aa4 <_isatty_r>
 8010a6a:	b128      	cbz	r0, 8010a78 <__smakebuf_r+0x70>
 8010a6c:	89a3      	ldrh	r3, [r4, #12]
 8010a6e:	f023 0303 	bic.w	r3, r3, #3
 8010a72:	f043 0301 	orr.w	r3, r3, #1
 8010a76:	81a3      	strh	r3, [r4, #12]
 8010a78:	89a3      	ldrh	r3, [r4, #12]
 8010a7a:	431d      	orrs	r5, r3
 8010a7c:	81a5      	strh	r5, [r4, #12]
 8010a7e:	e7cf      	b.n	8010a20 <__smakebuf_r+0x18>

08010a80 <_fstat_r>:
 8010a80:	b538      	push	{r3, r4, r5, lr}
 8010a82:	4d07      	ldr	r5, [pc, #28]	@ (8010aa0 <_fstat_r+0x20>)
 8010a84:	2300      	movs	r3, #0
 8010a86:	4604      	mov	r4, r0
 8010a88:	4608      	mov	r0, r1
 8010a8a:	4611      	mov	r1, r2
 8010a8c:	602b      	str	r3, [r5, #0]
 8010a8e:	f7f1 fced 	bl	800246c <_fstat>
 8010a92:	1c43      	adds	r3, r0, #1
 8010a94:	d102      	bne.n	8010a9c <_fstat_r+0x1c>
 8010a96:	682b      	ldr	r3, [r5, #0]
 8010a98:	b103      	cbz	r3, 8010a9c <_fstat_r+0x1c>
 8010a9a:	6023      	str	r3, [r4, #0]
 8010a9c:	bd38      	pop	{r3, r4, r5, pc}
 8010a9e:	bf00      	nop
 8010aa0:	20004094 	.word	0x20004094

08010aa4 <_isatty_r>:
 8010aa4:	b538      	push	{r3, r4, r5, lr}
 8010aa6:	4d06      	ldr	r5, [pc, #24]	@ (8010ac0 <_isatty_r+0x1c>)
 8010aa8:	2300      	movs	r3, #0
 8010aaa:	4604      	mov	r4, r0
 8010aac:	4608      	mov	r0, r1
 8010aae:	602b      	str	r3, [r5, #0]
 8010ab0:	f7f1 fcec 	bl	800248c <_isatty>
 8010ab4:	1c43      	adds	r3, r0, #1
 8010ab6:	d102      	bne.n	8010abe <_isatty_r+0x1a>
 8010ab8:	682b      	ldr	r3, [r5, #0]
 8010aba:	b103      	cbz	r3, 8010abe <_isatty_r+0x1a>
 8010abc:	6023      	str	r3, [r4, #0]
 8010abe:	bd38      	pop	{r3, r4, r5, pc}
 8010ac0:	20004094 	.word	0x20004094

08010ac4 <sqrt>:
 8010ac4:	b538      	push	{r3, r4, r5, lr}
 8010ac6:	ed2d 8b02 	vpush	{d8}
 8010aca:	ec55 4b10 	vmov	r4, r5, d0
 8010ace:	f000 f825 	bl	8010b1c <__ieee754_sqrt>
 8010ad2:	4622      	mov	r2, r4
 8010ad4:	462b      	mov	r3, r5
 8010ad6:	4620      	mov	r0, r4
 8010ad8:	4629      	mov	r1, r5
 8010ada:	eeb0 8a40 	vmov.f32	s16, s0
 8010ade:	eef0 8a60 	vmov.f32	s17, s1
 8010ae2:	f7f0 f833 	bl	8000b4c <__aeabi_dcmpun>
 8010ae6:	b990      	cbnz	r0, 8010b0e <sqrt+0x4a>
 8010ae8:	2200      	movs	r2, #0
 8010aea:	2300      	movs	r3, #0
 8010aec:	4620      	mov	r0, r4
 8010aee:	4629      	mov	r1, r5
 8010af0:	f7f0 f804 	bl	8000afc <__aeabi_dcmplt>
 8010af4:	b158      	cbz	r0, 8010b0e <sqrt+0x4a>
 8010af6:	f7fd ffc7 	bl	800ea88 <__errno>
 8010afa:	2321      	movs	r3, #33	@ 0x21
 8010afc:	6003      	str	r3, [r0, #0]
 8010afe:	2200      	movs	r2, #0
 8010b00:	2300      	movs	r3, #0
 8010b02:	4610      	mov	r0, r2
 8010b04:	4619      	mov	r1, r3
 8010b06:	f7ef feb1 	bl	800086c <__aeabi_ddiv>
 8010b0a:	ec41 0b18 	vmov	d8, r0, r1
 8010b0e:	eeb0 0a48 	vmov.f32	s0, s16
 8010b12:	eef0 0a68 	vmov.f32	s1, s17
 8010b16:	ecbd 8b02 	vpop	{d8}
 8010b1a:	bd38      	pop	{r3, r4, r5, pc}

08010b1c <__ieee754_sqrt>:
 8010b1c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b20:	4a66      	ldr	r2, [pc, #408]	@ (8010cbc <__ieee754_sqrt+0x1a0>)
 8010b22:	ec55 4b10 	vmov	r4, r5, d0
 8010b26:	43aa      	bics	r2, r5
 8010b28:	462b      	mov	r3, r5
 8010b2a:	4621      	mov	r1, r4
 8010b2c:	d110      	bne.n	8010b50 <__ieee754_sqrt+0x34>
 8010b2e:	4622      	mov	r2, r4
 8010b30:	4620      	mov	r0, r4
 8010b32:	4629      	mov	r1, r5
 8010b34:	f7ef fd70 	bl	8000618 <__aeabi_dmul>
 8010b38:	4602      	mov	r2, r0
 8010b3a:	460b      	mov	r3, r1
 8010b3c:	4620      	mov	r0, r4
 8010b3e:	4629      	mov	r1, r5
 8010b40:	f7ef fbb4 	bl	80002ac <__adddf3>
 8010b44:	4604      	mov	r4, r0
 8010b46:	460d      	mov	r5, r1
 8010b48:	ec45 4b10 	vmov	d0, r4, r5
 8010b4c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b50:	2d00      	cmp	r5, #0
 8010b52:	dc0e      	bgt.n	8010b72 <__ieee754_sqrt+0x56>
 8010b54:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8010b58:	4322      	orrs	r2, r4
 8010b5a:	d0f5      	beq.n	8010b48 <__ieee754_sqrt+0x2c>
 8010b5c:	b19d      	cbz	r5, 8010b86 <__ieee754_sqrt+0x6a>
 8010b5e:	4622      	mov	r2, r4
 8010b60:	4620      	mov	r0, r4
 8010b62:	4629      	mov	r1, r5
 8010b64:	f7ef fba0 	bl	80002a8 <__aeabi_dsub>
 8010b68:	4602      	mov	r2, r0
 8010b6a:	460b      	mov	r3, r1
 8010b6c:	f7ef fe7e 	bl	800086c <__aeabi_ddiv>
 8010b70:	e7e8      	b.n	8010b44 <__ieee754_sqrt+0x28>
 8010b72:	152a      	asrs	r2, r5, #20
 8010b74:	d115      	bne.n	8010ba2 <__ieee754_sqrt+0x86>
 8010b76:	2000      	movs	r0, #0
 8010b78:	e009      	b.n	8010b8e <__ieee754_sqrt+0x72>
 8010b7a:	0acb      	lsrs	r3, r1, #11
 8010b7c:	3a15      	subs	r2, #21
 8010b7e:	0549      	lsls	r1, r1, #21
 8010b80:	2b00      	cmp	r3, #0
 8010b82:	d0fa      	beq.n	8010b7a <__ieee754_sqrt+0x5e>
 8010b84:	e7f7      	b.n	8010b76 <__ieee754_sqrt+0x5a>
 8010b86:	462a      	mov	r2, r5
 8010b88:	e7fa      	b.n	8010b80 <__ieee754_sqrt+0x64>
 8010b8a:	005b      	lsls	r3, r3, #1
 8010b8c:	3001      	adds	r0, #1
 8010b8e:	02dc      	lsls	r4, r3, #11
 8010b90:	d5fb      	bpl.n	8010b8a <__ieee754_sqrt+0x6e>
 8010b92:	1e44      	subs	r4, r0, #1
 8010b94:	1b12      	subs	r2, r2, r4
 8010b96:	f1c0 0420 	rsb	r4, r0, #32
 8010b9a:	fa21 f404 	lsr.w	r4, r1, r4
 8010b9e:	4323      	orrs	r3, r4
 8010ba0:	4081      	lsls	r1, r0
 8010ba2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010ba6:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 8010baa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8010bae:	07d2      	lsls	r2, r2, #31
 8010bb0:	bf5c      	itt	pl
 8010bb2:	005b      	lslpl	r3, r3, #1
 8010bb4:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8010bb8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8010bbc:	bf58      	it	pl
 8010bbe:	0049      	lslpl	r1, r1, #1
 8010bc0:	2600      	movs	r6, #0
 8010bc2:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8010bc6:	107f      	asrs	r7, r7, #1
 8010bc8:	0049      	lsls	r1, r1, #1
 8010bca:	2016      	movs	r0, #22
 8010bcc:	4632      	mov	r2, r6
 8010bce:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8010bd2:	1915      	adds	r5, r2, r4
 8010bd4:	429d      	cmp	r5, r3
 8010bd6:	bfde      	ittt	le
 8010bd8:	192a      	addle	r2, r5, r4
 8010bda:	1b5b      	suble	r3, r3, r5
 8010bdc:	1936      	addle	r6, r6, r4
 8010bde:	0fcd      	lsrs	r5, r1, #31
 8010be0:	3801      	subs	r0, #1
 8010be2:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8010be6:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8010bea:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8010bee:	d1f0      	bne.n	8010bd2 <__ieee754_sqrt+0xb6>
 8010bf0:	4605      	mov	r5, r0
 8010bf2:	2420      	movs	r4, #32
 8010bf4:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8010bf8:	4293      	cmp	r3, r2
 8010bfa:	eb0c 0e00 	add.w	lr, ip, r0
 8010bfe:	dc02      	bgt.n	8010c06 <__ieee754_sqrt+0xea>
 8010c00:	d113      	bne.n	8010c2a <__ieee754_sqrt+0x10e>
 8010c02:	458e      	cmp	lr, r1
 8010c04:	d811      	bhi.n	8010c2a <__ieee754_sqrt+0x10e>
 8010c06:	f1be 0f00 	cmp.w	lr, #0
 8010c0a:	eb0e 000c 	add.w	r0, lr, ip
 8010c0e:	da3f      	bge.n	8010c90 <__ieee754_sqrt+0x174>
 8010c10:	2800      	cmp	r0, #0
 8010c12:	db3d      	blt.n	8010c90 <__ieee754_sqrt+0x174>
 8010c14:	f102 0801 	add.w	r8, r2, #1
 8010c18:	1a9b      	subs	r3, r3, r2
 8010c1a:	458e      	cmp	lr, r1
 8010c1c:	bf88      	it	hi
 8010c1e:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8010c22:	eba1 010e 	sub.w	r1, r1, lr
 8010c26:	4465      	add	r5, ip
 8010c28:	4642      	mov	r2, r8
 8010c2a:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8010c2e:	3c01      	subs	r4, #1
 8010c30:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8010c34:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8010c38:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8010c3c:	d1dc      	bne.n	8010bf8 <__ieee754_sqrt+0xdc>
 8010c3e:	4319      	orrs	r1, r3
 8010c40:	d01b      	beq.n	8010c7a <__ieee754_sqrt+0x15e>
 8010c42:	f8df a07c 	ldr.w	sl, [pc, #124]	@ 8010cc0 <__ieee754_sqrt+0x1a4>
 8010c46:	f8df b07c 	ldr.w	fp, [pc, #124]	@ 8010cc4 <__ieee754_sqrt+0x1a8>
 8010c4a:	e9da 0100 	ldrd	r0, r1, [sl]
 8010c4e:	e9db 2300 	ldrd	r2, r3, [fp]
 8010c52:	f7ef fb29 	bl	80002a8 <__aeabi_dsub>
 8010c56:	e9da 8900 	ldrd	r8, r9, [sl]
 8010c5a:	4602      	mov	r2, r0
 8010c5c:	460b      	mov	r3, r1
 8010c5e:	4640      	mov	r0, r8
 8010c60:	4649      	mov	r1, r9
 8010c62:	f7ef ff55 	bl	8000b10 <__aeabi_dcmple>
 8010c66:	b140      	cbz	r0, 8010c7a <__ieee754_sqrt+0x15e>
 8010c68:	f1b5 3fff 	cmp.w	r5, #4294967295
 8010c6c:	e9da 0100 	ldrd	r0, r1, [sl]
 8010c70:	e9db 2300 	ldrd	r2, r3, [fp]
 8010c74:	d10e      	bne.n	8010c94 <__ieee754_sqrt+0x178>
 8010c76:	3601      	adds	r6, #1
 8010c78:	4625      	mov	r5, r4
 8010c7a:	1073      	asrs	r3, r6, #1
 8010c7c:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 8010c80:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 8010c84:	eb03 5107 	add.w	r1, r3, r7, lsl #20
 8010c88:	086b      	lsrs	r3, r5, #1
 8010c8a:	ea43 70c6 	orr.w	r0, r3, r6, lsl #31
 8010c8e:	e759      	b.n	8010b44 <__ieee754_sqrt+0x28>
 8010c90:	4690      	mov	r8, r2
 8010c92:	e7c1      	b.n	8010c18 <__ieee754_sqrt+0xfc>
 8010c94:	f7ef fb0a 	bl	80002ac <__adddf3>
 8010c98:	e9da 8900 	ldrd	r8, r9, [sl]
 8010c9c:	4602      	mov	r2, r0
 8010c9e:	460b      	mov	r3, r1
 8010ca0:	4640      	mov	r0, r8
 8010ca2:	4649      	mov	r1, r9
 8010ca4:	f7ef ff2a 	bl	8000afc <__aeabi_dcmplt>
 8010ca8:	b120      	cbz	r0, 8010cb4 <__ieee754_sqrt+0x198>
 8010caa:	1cab      	adds	r3, r5, #2
 8010cac:	bf08      	it	eq
 8010cae:	3601      	addeq	r6, #1
 8010cb0:	3502      	adds	r5, #2
 8010cb2:	e7e2      	b.n	8010c7a <__ieee754_sqrt+0x15e>
 8010cb4:	1c6b      	adds	r3, r5, #1
 8010cb6:	f023 0501 	bic.w	r5, r3, #1
 8010cba:	e7de      	b.n	8010c7a <__ieee754_sqrt+0x15e>
 8010cbc:	7ff00000 	.word	0x7ff00000
 8010cc0:	080112b0 	.word	0x080112b0
 8010cc4:	080112a8 	.word	0x080112a8

08010cc8 <_init>:
 8010cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010cca:	bf00      	nop
 8010ccc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010cce:	bc08      	pop	{r3}
 8010cd0:	469e      	mov	lr, r3
 8010cd2:	4770      	bx	lr

08010cd4 <_fini>:
 8010cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010cd6:	bf00      	nop
 8010cd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010cda:	bc08      	pop	{r3}
 8010cdc:	469e      	mov	lr, r3
 8010cde:	4770      	bx	lr
