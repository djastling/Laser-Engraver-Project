
Laser-Engraver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c85c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005c0  0800c9f0  0800c9f0  0000d9f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cfb0  0800cfb0  0000e208  2**0
                  CONTENTS
  4 .ARM          00000008  0800cfb0  0800cfb0  0000dfb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cfb8  0800cfb8  0000e208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cfb8  0800cfb8  0000dfb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800cfbc  0800cfbc  0000dfbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000208  20000000  0800cfc0  0000e000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004e8  20000208  0800d1c8  0000e208  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006f0  0800d1c8  0000e6f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e208  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016ef8  00000000  00000000  0000e238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003170  00000000  00000000  00025130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001528  00000000  00000000  000282a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001082  00000000  00000000  000297c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029e98  00000000  00000000  0002a84a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b05e  00000000  00000000  000546e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f8e1b  00000000  00000000  0006f740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0016855b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006d38  00000000  00000000  001685a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  0016f2d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000208 	.word	0x20000208
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c9d4 	.word	0x0800c9d4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000020c 	.word	0x2000020c
 80001cc:	0800c9d4 	.word	0x0800c9d4

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9a0 	b.w	8001000 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	@ (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	460c      	mov	r4, r1
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d14e      	bne.n	8000dee <__udivmoddi4+0xaa>
 8000d50:	4694      	mov	ip, r2
 8000d52:	458c      	cmp	ip, r1
 8000d54:	4686      	mov	lr, r0
 8000d56:	fab2 f282 	clz	r2, r2
 8000d5a:	d962      	bls.n	8000e22 <__udivmoddi4+0xde>
 8000d5c:	b14a      	cbz	r2, 8000d72 <__udivmoddi4+0x2e>
 8000d5e:	f1c2 0320 	rsb	r3, r2, #32
 8000d62:	4091      	lsls	r1, r2
 8000d64:	fa20 f303 	lsr.w	r3, r0, r3
 8000d68:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d6c:	4319      	orrs	r1, r3
 8000d6e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d76:	fa1f f68c 	uxth.w	r6, ip
 8000d7a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d7e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d82:	fb07 1114 	mls	r1, r7, r4, r1
 8000d86:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d8a:	fb04 f106 	mul.w	r1, r4, r6
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	d90a      	bls.n	8000da8 <__udivmoddi4+0x64>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d9a:	f080 8112 	bcs.w	8000fc2 <__udivmoddi4+0x27e>
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	f240 810f 	bls.w	8000fc2 <__udivmoddi4+0x27e>
 8000da4:	3c02      	subs	r4, #2
 8000da6:	4463      	add	r3, ip
 8000da8:	1a59      	subs	r1, r3, r1
 8000daa:	fa1f f38e 	uxth.w	r3, lr
 8000dae:	fbb1 f0f7 	udiv	r0, r1, r7
 8000db2:	fb07 1110 	mls	r1, r7, r0, r1
 8000db6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dba:	fb00 f606 	mul.w	r6, r0, r6
 8000dbe:	429e      	cmp	r6, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x94>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dca:	f080 80fc 	bcs.w	8000fc6 <__udivmoddi4+0x282>
 8000dce:	429e      	cmp	r6, r3
 8000dd0:	f240 80f9 	bls.w	8000fc6 <__udivmoddi4+0x282>
 8000dd4:	4463      	add	r3, ip
 8000dd6:	3802      	subs	r0, #2
 8000dd8:	1b9b      	subs	r3, r3, r6
 8000dda:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dde:	2100      	movs	r1, #0
 8000de0:	b11d      	cbz	r5, 8000dea <__udivmoddi4+0xa6>
 8000de2:	40d3      	lsrs	r3, r2
 8000de4:	2200      	movs	r2, #0
 8000de6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d905      	bls.n	8000dfe <__udivmoddi4+0xba>
 8000df2:	b10d      	cbz	r5, 8000df8 <__udivmoddi4+0xb4>
 8000df4:	e9c5 0100 	strd	r0, r1, [r5]
 8000df8:	2100      	movs	r1, #0
 8000dfa:	4608      	mov	r0, r1
 8000dfc:	e7f5      	b.n	8000dea <__udivmoddi4+0xa6>
 8000dfe:	fab3 f183 	clz	r1, r3
 8000e02:	2900      	cmp	r1, #0
 8000e04:	d146      	bne.n	8000e94 <__udivmoddi4+0x150>
 8000e06:	42a3      	cmp	r3, r4
 8000e08:	d302      	bcc.n	8000e10 <__udivmoddi4+0xcc>
 8000e0a:	4290      	cmp	r0, r2
 8000e0c:	f0c0 80f0 	bcc.w	8000ff0 <__udivmoddi4+0x2ac>
 8000e10:	1a86      	subs	r6, r0, r2
 8000e12:	eb64 0303 	sbc.w	r3, r4, r3
 8000e16:	2001      	movs	r0, #1
 8000e18:	2d00      	cmp	r5, #0
 8000e1a:	d0e6      	beq.n	8000dea <__udivmoddi4+0xa6>
 8000e1c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e20:	e7e3      	b.n	8000dea <__udivmoddi4+0xa6>
 8000e22:	2a00      	cmp	r2, #0
 8000e24:	f040 8090 	bne.w	8000f48 <__udivmoddi4+0x204>
 8000e28:	eba1 040c 	sub.w	r4, r1, ip
 8000e2c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e30:	fa1f f78c 	uxth.w	r7, ip
 8000e34:	2101      	movs	r1, #1
 8000e36:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e3a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e3e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e42:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e46:	fb07 f006 	mul.w	r0, r7, r6
 8000e4a:	4298      	cmp	r0, r3
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x11c>
 8000e4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e52:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x11a>
 8000e58:	4298      	cmp	r0, r3
 8000e5a:	f200 80cd 	bhi.w	8000ff8 <__udivmoddi4+0x2b4>
 8000e5e:	4626      	mov	r6, r4
 8000e60:	1a1c      	subs	r4, r3, r0
 8000e62:	fa1f f38e 	uxth.w	r3, lr
 8000e66:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e6a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e6e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e72:	fb00 f707 	mul.w	r7, r0, r7
 8000e76:	429f      	cmp	r7, r3
 8000e78:	d908      	bls.n	8000e8c <__udivmoddi4+0x148>
 8000e7a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e7e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e82:	d202      	bcs.n	8000e8a <__udivmoddi4+0x146>
 8000e84:	429f      	cmp	r7, r3
 8000e86:	f200 80b0 	bhi.w	8000fea <__udivmoddi4+0x2a6>
 8000e8a:	4620      	mov	r0, r4
 8000e8c:	1bdb      	subs	r3, r3, r7
 8000e8e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e92:	e7a5      	b.n	8000de0 <__udivmoddi4+0x9c>
 8000e94:	f1c1 0620 	rsb	r6, r1, #32
 8000e98:	408b      	lsls	r3, r1
 8000e9a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e9e:	431f      	orrs	r7, r3
 8000ea0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ea4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ea8:	ea43 030c 	orr.w	r3, r3, ip
 8000eac:	40f4      	lsrs	r4, r6
 8000eae:	fa00 f801 	lsl.w	r8, r0, r1
 8000eb2:	0c38      	lsrs	r0, r7, #16
 8000eb4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000eb8:	fbb4 fef0 	udiv	lr, r4, r0
 8000ebc:	fa1f fc87 	uxth.w	ip, r7
 8000ec0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ec4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ec8:	fb0e f90c 	mul.w	r9, lr, ip
 8000ecc:	45a1      	cmp	r9, r4
 8000ece:	fa02 f201 	lsl.w	r2, r2, r1
 8000ed2:	d90a      	bls.n	8000eea <__udivmoddi4+0x1a6>
 8000ed4:	193c      	adds	r4, r7, r4
 8000ed6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eda:	f080 8084 	bcs.w	8000fe6 <__udivmoddi4+0x2a2>
 8000ede:	45a1      	cmp	r9, r4
 8000ee0:	f240 8081 	bls.w	8000fe6 <__udivmoddi4+0x2a2>
 8000ee4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ee8:	443c      	add	r4, r7
 8000eea:	eba4 0409 	sub.w	r4, r4, r9
 8000eee:	fa1f f983 	uxth.w	r9, r3
 8000ef2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ef6:	fb00 4413 	mls	r4, r0, r3, r4
 8000efa:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000efe:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f02:	45a4      	cmp	ip, r4
 8000f04:	d907      	bls.n	8000f16 <__udivmoddi4+0x1d2>
 8000f06:	193c      	adds	r4, r7, r4
 8000f08:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f0c:	d267      	bcs.n	8000fde <__udivmoddi4+0x29a>
 8000f0e:	45a4      	cmp	ip, r4
 8000f10:	d965      	bls.n	8000fde <__udivmoddi4+0x29a>
 8000f12:	3b02      	subs	r3, #2
 8000f14:	443c      	add	r4, r7
 8000f16:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f1a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f1e:	eba4 040c 	sub.w	r4, r4, ip
 8000f22:	429c      	cmp	r4, r3
 8000f24:	46ce      	mov	lr, r9
 8000f26:	469c      	mov	ip, r3
 8000f28:	d351      	bcc.n	8000fce <__udivmoddi4+0x28a>
 8000f2a:	d04e      	beq.n	8000fca <__udivmoddi4+0x286>
 8000f2c:	b155      	cbz	r5, 8000f44 <__udivmoddi4+0x200>
 8000f2e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f32:	eb64 040c 	sbc.w	r4, r4, ip
 8000f36:	fa04 f606 	lsl.w	r6, r4, r6
 8000f3a:	40cb      	lsrs	r3, r1
 8000f3c:	431e      	orrs	r6, r3
 8000f3e:	40cc      	lsrs	r4, r1
 8000f40:	e9c5 6400 	strd	r6, r4, [r5]
 8000f44:	2100      	movs	r1, #0
 8000f46:	e750      	b.n	8000dea <__udivmoddi4+0xa6>
 8000f48:	f1c2 0320 	rsb	r3, r2, #32
 8000f4c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f50:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f54:	fa24 f303 	lsr.w	r3, r4, r3
 8000f58:	4094      	lsls	r4, r2
 8000f5a:	430c      	orrs	r4, r1
 8000f5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f60:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f64:	fa1f f78c 	uxth.w	r7, ip
 8000f68:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f6c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f70:	0c23      	lsrs	r3, r4, #16
 8000f72:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f76:	fb00 f107 	mul.w	r1, r0, r7
 8000f7a:	4299      	cmp	r1, r3
 8000f7c:	d908      	bls.n	8000f90 <__udivmoddi4+0x24c>
 8000f7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f82:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f86:	d22c      	bcs.n	8000fe2 <__udivmoddi4+0x29e>
 8000f88:	4299      	cmp	r1, r3
 8000f8a:	d92a      	bls.n	8000fe2 <__udivmoddi4+0x29e>
 8000f8c:	3802      	subs	r0, #2
 8000f8e:	4463      	add	r3, ip
 8000f90:	1a5b      	subs	r3, r3, r1
 8000f92:	b2a4      	uxth	r4, r4
 8000f94:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f98:	fb08 3311 	mls	r3, r8, r1, r3
 8000f9c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fa0:	fb01 f307 	mul.w	r3, r1, r7
 8000fa4:	42a3      	cmp	r3, r4
 8000fa6:	d908      	bls.n	8000fba <__udivmoddi4+0x276>
 8000fa8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fac:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fb0:	d213      	bcs.n	8000fda <__udivmoddi4+0x296>
 8000fb2:	42a3      	cmp	r3, r4
 8000fb4:	d911      	bls.n	8000fda <__udivmoddi4+0x296>
 8000fb6:	3902      	subs	r1, #2
 8000fb8:	4464      	add	r4, ip
 8000fba:	1ae4      	subs	r4, r4, r3
 8000fbc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fc0:	e739      	b.n	8000e36 <__udivmoddi4+0xf2>
 8000fc2:	4604      	mov	r4, r0
 8000fc4:	e6f0      	b.n	8000da8 <__udivmoddi4+0x64>
 8000fc6:	4608      	mov	r0, r1
 8000fc8:	e706      	b.n	8000dd8 <__udivmoddi4+0x94>
 8000fca:	45c8      	cmp	r8, r9
 8000fcc:	d2ae      	bcs.n	8000f2c <__udivmoddi4+0x1e8>
 8000fce:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fd2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fd6:	3801      	subs	r0, #1
 8000fd8:	e7a8      	b.n	8000f2c <__udivmoddi4+0x1e8>
 8000fda:	4631      	mov	r1, r6
 8000fdc:	e7ed      	b.n	8000fba <__udivmoddi4+0x276>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	e799      	b.n	8000f16 <__udivmoddi4+0x1d2>
 8000fe2:	4630      	mov	r0, r6
 8000fe4:	e7d4      	b.n	8000f90 <__udivmoddi4+0x24c>
 8000fe6:	46d6      	mov	lr, sl
 8000fe8:	e77f      	b.n	8000eea <__udivmoddi4+0x1a6>
 8000fea:	4463      	add	r3, ip
 8000fec:	3802      	subs	r0, #2
 8000fee:	e74d      	b.n	8000e8c <__udivmoddi4+0x148>
 8000ff0:	4606      	mov	r6, r0
 8000ff2:	4623      	mov	r3, r4
 8000ff4:	4608      	mov	r0, r1
 8000ff6:	e70f      	b.n	8000e18 <__udivmoddi4+0xd4>
 8000ff8:	3e02      	subs	r6, #2
 8000ffa:	4463      	add	r3, ip
 8000ffc:	e730      	b.n	8000e60 <__udivmoddi4+0x11c>
 8000ffe:	bf00      	nop

08001000 <__aeabi_idiv0>:
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop

08001004 <myprintf>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void myprintf(const char *fmt, ...)
{
 8001004:	b40f      	push	{r0, r1, r2, r3}
 8001006:	b580      	push	{r7, lr}
 8001008:	b082      	sub	sp, #8
 800100a:	af00      	add	r7, sp, #0
	static char buffer[256];
	va_list args;
	va_start(args, fmt);
 800100c:	f107 0314 	add.w	r3, r7, #20
 8001010:	603b      	str	r3, [r7, #0]
	vsnprintf(buffer, sizeof(buffer), fmt, args);
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	693a      	ldr	r2, [r7, #16]
 8001016:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800101a:	480b      	ldr	r0, [pc, #44]	@ (8001048 <myprintf+0x44>)
 800101c:	f009 fb28 	bl	800a670 <vsniprintf>
	va_end(args);

	int len = strlen(buffer);
 8001020:	4809      	ldr	r0, [pc, #36]	@ (8001048 <myprintf+0x44>)
 8001022:	f7ff f8df 	bl	80001e4 <strlen>
 8001026:	4603      	mov	r3, r0
 8001028:	607b      	str	r3, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)buffer, len, -1);
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	b29a      	uxth	r2, r3
 800102e:	f04f 33ff 	mov.w	r3, #4294967295
 8001032:	4905      	ldr	r1, [pc, #20]	@ (8001048 <myprintf+0x44>)
 8001034:	4805      	ldr	r0, [pc, #20]	@ (800104c <myprintf+0x48>)
 8001036:	f004 feef 	bl	8005e18 <HAL_UART_Transmit>

}
 800103a:	bf00      	nop
 800103c:	3708      	adds	r7, #8
 800103e:	46bd      	mov	sp, r7
 8001040:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001044:	b004      	add	sp, #16
 8001046:	4770      	bx	lr
 8001048:	20000408 	.word	0x20000408
 800104c:	2000036c 	.word	0x2000036c

08001050 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	f5ad 6d9a 	sub.w	sp, sp, #1232	@ 0x4d0
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001058:	f001 f970 	bl	800233c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800105c:	f000 f898 	bl	8001190 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001060:	f000 fa04 	bl	800146c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001064:	f000 f9d2 	bl	800140c <MX_USART2_UART_Init>
  MX_TIM16_Init();
 8001068:	f000 f980 	bl	800136c <MX_TIM16_Init>
  MX_TIM17_Init();
 800106c:	f000 f9a6 	bl	80013bc <MX_TIM17_Init>
  MX_SPI1_Init();
 8001070:	f000 f8e0 	bl	8001234 <MX_SPI1_Init>
  MX_FATFS_Init();
 8001074:	f005 fc2e 	bl	80068d4 <MX_FATFS_Init>
  MX_TIM2_Init();
 8001078:	f000 f91a 	bl	80012b0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  	  myprintf("\r\n~ SD card demo by kiwih ~\r\n\r\n");
 800107c:	483c      	ldr	r0, [pc, #240]	@ (8001170 <main+0x120>)
 800107e:	f7ff ffc1 	bl	8001004 <myprintf>

      HAL_Delay(1000); //a short delay is important to let the SD card settle
 8001082:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001086:	f001 f999 	bl	80023bc <HAL_Delay>
      FATFS FatFs; 	//Fatfs handle
      FIL fil; 		//File handle
      FRESULT fres; //Result after operations

      //Open the file system
      fres = f_mount(&FatFs, "", 1); //1=mount now
 800108a:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 800108e:	2201      	movs	r2, #1
 8001090:	4938      	ldr	r1, [pc, #224]	@ (8001174 <main+0x124>)
 8001092:	4618      	mov	r0, r3
 8001094:	f007 fea2 	bl	8008ddc <f_mount>
 8001098:	4603      	mov	r3, r0
 800109a:	f887 34ce 	strb.w	r3, [r7, #1230]	@ 0x4ce
      if (fres != FR_OK) {
 800109e:	f897 34ce 	ldrb.w	r3, [r7, #1230]	@ 0x4ce
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d007      	beq.n	80010b6 <main+0x66>
    	myprintf("f_mount error (%i)\r\n", fres);
 80010a6:	f897 34ce 	ldrb.w	r3, [r7, #1230]	@ 0x4ce
 80010aa:	4619      	mov	r1, r3
 80010ac:	4832      	ldr	r0, [pc, #200]	@ (8001178 <main+0x128>)
 80010ae:	f7ff ffa9 	bl	8001004 <myprintf>
    	while(1);
 80010b2:	bf00      	nop
 80010b4:	e7fd      	b.n	80010b2 <main+0x62>
      }

      fres = f_open(&fil, "test.txt", FA_READ);
 80010b6:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80010ba:	2201      	movs	r2, #1
 80010bc:	492f      	ldr	r1, [pc, #188]	@ (800117c <main+0x12c>)
 80010be:	4618      	mov	r0, r3
 80010c0:	f007 fed2 	bl	8008e68 <f_open>
 80010c4:	4603      	mov	r3, r0
 80010c6:	f887 34ce 	strb.w	r3, [r7, #1230]	@ 0x4ce
	  if (fres != FR_OK) {
 80010ca:	f897 34ce 	ldrb.w	r3, [r7, #1230]	@ 0x4ce
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d007      	beq.n	80010e2 <main+0x92>
		myprintf("f_open error (%i)\r\n", fres);
 80010d2:	f897 34ce 	ldrb.w	r3, [r7, #1230]	@ 0x4ce
 80010d6:	4619      	mov	r1, r3
 80010d8:	4829      	ldr	r0, [pc, #164]	@ (8001180 <main+0x130>)
 80010da:	f7ff ff93 	bl	8001004 <myprintf>
		while(1);
 80010de:	bf00      	nop
 80010e0:	e7fd      	b.n	80010de <main+0x8e>
	  }
	  myprintf("I was able to open 'gtest.txt' for reading!\r\n");
 80010e2:	4828      	ldr	r0, [pc, #160]	@ (8001184 <main+0x134>)
 80010e4:	f7ff ff8e 	bl	8001004 <myprintf>


  HAL_GPIO_WritePin(XEN_GPIO_Port, XEN_Pin,0);
 80010e8:	2200      	movs	r2, #0
 80010ea:	2120      	movs	r1, #32
 80010ec:	4826      	ldr	r0, [pc, #152]	@ (8001188 <main+0x138>)
 80010ee:	f001 fc2d 	bl	800294c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(YEN_GPIO_Port, YEN_Pin,0);
 80010f2:	2200      	movs	r2, #0
 80010f4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80010f8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010fc:	f001 fc26 	bl	800294c <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (HAL_GPIO_ReadPin(SPI1_CD_GPIO_Port, SPI1_CD_Pin))
 8001100:	2180      	movs	r1, #128	@ 0x80
 8001102:	4822      	ldr	r0, [pc, #136]	@ (800118c <main+0x13c>)
 8001104:	f001 fc0a 	bl	800291c <HAL_GPIO_ReadPin>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d01d      	beq.n	800114a <main+0xfa>
	  {
		  BYTE readBuf[100];
		  TCHAR* rres = f_gets((TCHAR*)readBuf, 100, &fil);
 800110e:	f107 0268 	add.w	r2, r7, #104	@ 0x68
 8001112:	1d3b      	adds	r3, r7, #4
 8001114:	2164      	movs	r1, #100	@ 0x64
 8001116:	4618      	mov	r0, r3
 8001118:	f008 fa47 	bl	80095aa <f_gets>
 800111c:	f8c7 04c8 	str.w	r0, [r7, #1224]	@ 0x4c8
		  if(rres != 0) {
 8001120:	f8d7 34c8 	ldr.w	r3, [r7, #1224]	@ 0x4c8
 8001124:	2b00      	cmp	r3, #0
 8001126:	d004      	beq.n	8001132 <main+0xe2>
			  GcommandParse((TCHAR*)readBuf);
 8001128:	1d3b      	adds	r3, r7, #4
 800112a:	4618      	mov	r0, r3
 800112c:	f000 fa76 	bl	800161c <GcommandParse>
 8001130:	e00b      	b.n	800114a <main+0xfa>
		  } else {
			f_close(&fil);
 8001132:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8001136:	4618      	mov	r0, r3
 8001138:	f008 fa0d 	bl	8009556 <f_close>
			f_mount(NULL, "", 0);
 800113c:	2200      	movs	r2, #0
 800113e:	490d      	ldr	r1, [pc, #52]	@ (8001174 <main+0x124>)
 8001140:	2000      	movs	r0, #0
 8001142:	f007 fe4b 	bl	8008ddc <f_mount>
			while(1){}
 8001146:	bf00      	nop
 8001148:	e7fd      	b.n	8001146 <main+0xf6>
	  }
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  // Gradually increase duty cycle
	 	  	          for (uint8_t power = 0; power <= 255; power += 5) {
 800114a:	2300      	movs	r3, #0
 800114c:	f887 34cf 	strb.w	r3, [r7, #1231]	@ 0x4cf
	 	  	              SetLaserPower(power);
 8001150:	f897 34cf 	ldrb.w	r3, [r7, #1231]	@ 0x4cf
 8001154:	4618      	mov	r0, r3
 8001156:	f000 fc73 	bl	8001a40 <SetLaserPower>
	 	  	              HAL_Delay(10);
 800115a:	200a      	movs	r0, #10
 800115c:	f001 f92e 	bl	80023bc <HAL_Delay>
	 	  	          for (uint8_t power = 0; power <= 255; power += 5) {
 8001160:	f897 34cf 	ldrb.w	r3, [r7, #1231]	@ 0x4cf
 8001164:	3305      	adds	r3, #5
 8001166:	f887 34cf 	strb.w	r3, [r7, #1231]	@ 0x4cf
 800116a:	bf00      	nop
 800116c:	e7f0      	b.n	8001150 <main+0x100>
 800116e:	bf00      	nop
 8001170:	0800c9f0 	.word	0x0800c9f0
 8001174:	0800ca10 	.word	0x0800ca10
 8001178:	0800ca14 	.word	0x0800ca14
 800117c:	0800ca2c 	.word	0x0800ca2c
 8001180:	0800ca38 	.word	0x0800ca38
 8001184:	0800ca4c 	.word	0x0800ca4c
 8001188:	48000400 	.word	0x48000400
 800118c:	48000800 	.word	0x48000800

08001190 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b096      	sub	sp, #88	@ 0x58
 8001194:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001196:	f107 0314 	add.w	r3, r7, #20
 800119a:	2244      	movs	r2, #68	@ 0x44
 800119c:	2100      	movs	r1, #0
 800119e:	4618      	mov	r0, r3
 80011a0:	f009 fa74 	bl	800a68c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011a4:	463b      	mov	r3, r7
 80011a6:	2200      	movs	r2, #0
 80011a8:	601a      	str	r2, [r3, #0]
 80011aa:	605a      	str	r2, [r3, #4]
 80011ac:	609a      	str	r2, [r3, #8]
 80011ae:	60da      	str	r2, [r3, #12]
 80011b0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80011b2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80011b6:	f001 fc21 	bl	80029fc <HAL_PWREx_ControlVoltageScaling>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d001      	beq.n	80011c4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80011c0:	f000 fd8e 	bl	8001ce0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011c4:	2302      	movs	r3, #2
 80011c6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011c8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80011cc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011ce:	2310      	movs	r3, #16
 80011d0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011d2:	2302      	movs	r3, #2
 80011d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011d6:	2302      	movs	r3, #2
 80011d8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80011da:	2301      	movs	r3, #1
 80011dc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80011de:	230a      	movs	r3, #10
 80011e0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80011e2:	2307      	movs	r3, #7
 80011e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80011e6:	2302      	movs	r3, #2
 80011e8:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80011ea:	2302      	movs	r3, #2
 80011ec:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011ee:	f107 0314 	add.w	r3, r7, #20
 80011f2:	4618      	mov	r0, r3
 80011f4:	f001 fc58 	bl	8002aa8 <HAL_RCC_OscConfig>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80011fe:	f000 fd6f 	bl	8001ce0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001202:	230f      	movs	r3, #15
 8001204:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001206:	2303      	movs	r3, #3
 8001208:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800120a:	2300      	movs	r3, #0
 800120c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800120e:	2300      	movs	r3, #0
 8001210:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001212:	2300      	movs	r3, #0
 8001214:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001216:	463b      	mov	r3, r7
 8001218:	2104      	movs	r1, #4
 800121a:	4618      	mov	r0, r3
 800121c:	f002 f820 	bl	8003260 <HAL_RCC_ClockConfig>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001226:	f000 fd5b 	bl	8001ce0 <Error_Handler>
  }
}
 800122a:	bf00      	nop
 800122c:	3758      	adds	r7, #88	@ 0x58
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
	...

08001234 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001238:	4b1b      	ldr	r3, [pc, #108]	@ (80012a8 <MX_SPI1_Init+0x74>)
 800123a:	4a1c      	ldr	r2, [pc, #112]	@ (80012ac <MX_SPI1_Init+0x78>)
 800123c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800123e:	4b1a      	ldr	r3, [pc, #104]	@ (80012a8 <MX_SPI1_Init+0x74>)
 8001240:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001244:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001246:	4b18      	ldr	r3, [pc, #96]	@ (80012a8 <MX_SPI1_Init+0x74>)
 8001248:	2200      	movs	r2, #0
 800124a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800124c:	4b16      	ldr	r3, [pc, #88]	@ (80012a8 <MX_SPI1_Init+0x74>)
 800124e:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001252:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001254:	4b14      	ldr	r3, [pc, #80]	@ (80012a8 <MX_SPI1_Init+0x74>)
 8001256:	2202      	movs	r2, #2
 8001258:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800125a:	4b13      	ldr	r3, [pc, #76]	@ (80012a8 <MX_SPI1_Init+0x74>)
 800125c:	2201      	movs	r2, #1
 800125e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001260:	4b11      	ldr	r3, [pc, #68]	@ (80012a8 <MX_SPI1_Init+0x74>)
 8001262:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001266:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001268:	4b0f      	ldr	r3, [pc, #60]	@ (80012a8 <MX_SPI1_Init+0x74>)
 800126a:	2238      	movs	r2, #56	@ 0x38
 800126c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800126e:	4b0e      	ldr	r3, [pc, #56]	@ (80012a8 <MX_SPI1_Init+0x74>)
 8001270:	2200      	movs	r2, #0
 8001272:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001274:	4b0c      	ldr	r3, [pc, #48]	@ (80012a8 <MX_SPI1_Init+0x74>)
 8001276:	2200      	movs	r2, #0
 8001278:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800127a:	4b0b      	ldr	r3, [pc, #44]	@ (80012a8 <MX_SPI1_Init+0x74>)
 800127c:	2200      	movs	r2, #0
 800127e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001280:	4b09      	ldr	r3, [pc, #36]	@ (80012a8 <MX_SPI1_Init+0x74>)
 8001282:	2207      	movs	r2, #7
 8001284:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001286:	4b08      	ldr	r3, [pc, #32]	@ (80012a8 <MX_SPI1_Init+0x74>)
 8001288:	2200      	movs	r2, #0
 800128a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800128c:	4b06      	ldr	r3, [pc, #24]	@ (80012a8 <MX_SPI1_Init+0x74>)
 800128e:	2200      	movs	r2, #0
 8001290:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001292:	4805      	ldr	r0, [pc, #20]	@ (80012a8 <MX_SPI1_Init+0x74>)
 8001294:	f002 fef6 	bl	8004084 <HAL_SPI_Init>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d001      	beq.n	80012a2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800129e:	f000 fd1f 	bl	8001ce0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80012a2:	bf00      	nop
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	20000224 	.word	0x20000224
 80012ac:	40013000 	.word	0x40013000

080012b0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b08a      	sub	sp, #40	@ 0x28
 80012b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012b6:	f107 031c 	add.w	r3, r7, #28
 80012ba:	2200      	movs	r2, #0
 80012bc:	601a      	str	r2, [r3, #0]
 80012be:	605a      	str	r2, [r3, #4]
 80012c0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012c2:	463b      	mov	r3, r7
 80012c4:	2200      	movs	r2, #0
 80012c6:	601a      	str	r2, [r3, #0]
 80012c8:	605a      	str	r2, [r3, #4]
 80012ca:	609a      	str	r2, [r3, #8]
 80012cc:	60da      	str	r2, [r3, #12]
 80012ce:	611a      	str	r2, [r3, #16]
 80012d0:	615a      	str	r2, [r3, #20]
 80012d2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80012d4:	4b23      	ldr	r3, [pc, #140]	@ (8001364 <MX_TIM2_Init+0xb4>)
 80012d6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80012da:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80012dc:	4b21      	ldr	r3, [pc, #132]	@ (8001364 <MX_TIM2_Init+0xb4>)
 80012de:	2200      	movs	r2, #0
 80012e0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012e2:	4b20      	ldr	r3, [pc, #128]	@ (8001364 <MX_TIM2_Init+0xb4>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 79999;
 80012e8:	4b1e      	ldr	r3, [pc, #120]	@ (8001364 <MX_TIM2_Init+0xb4>)
 80012ea:	4a1f      	ldr	r2, [pc, #124]	@ (8001368 <MX_TIM2_Init+0xb8>)
 80012ec:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012ee:	4b1d      	ldr	r3, [pc, #116]	@ (8001364 <MX_TIM2_Init+0xb4>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80012f4:	4b1b      	ldr	r3, [pc, #108]	@ (8001364 <MX_TIM2_Init+0xb4>)
 80012f6:	2280      	movs	r2, #128	@ 0x80
 80012f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80012fa:	481a      	ldr	r0, [pc, #104]	@ (8001364 <MX_TIM2_Init+0xb4>)
 80012fc:	f003 fd55 	bl	8004daa <HAL_TIM_PWM_Init>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d001      	beq.n	800130a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001306:	f000 fceb 	bl	8001ce0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800130a:	2300      	movs	r3, #0
 800130c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800130e:	2300      	movs	r3, #0
 8001310:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001312:	f107 031c 	add.w	r3, r7, #28
 8001316:	4619      	mov	r1, r3
 8001318:	4812      	ldr	r0, [pc, #72]	@ (8001364 <MX_TIM2_Init+0xb4>)
 800131a:	f004 fc89 	bl	8005c30 <HAL_TIMEx_MasterConfigSynchronization>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d001      	beq.n	8001328 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001324:	f000 fcdc 	bl	8001ce0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001328:	2360      	movs	r3, #96	@ 0x60
 800132a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800132c:	2300      	movs	r3, #0
 800132e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001330:	2300      	movs	r3, #0
 8001332:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001334:	2300      	movs	r3, #0
 8001336:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001338:	463b      	mov	r3, r7
 800133a:	2200      	movs	r2, #0
 800133c:	4619      	mov	r1, r3
 800133e:	4809      	ldr	r0, [pc, #36]	@ (8001364 <MX_TIM2_Init+0xb4>)
 8001340:	f003 ff98 	bl	8005274 <HAL_TIM_PWM_ConfigChannel>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 800134a:	f000 fcc9 	bl	8001ce0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800134e:	2100      	movs	r1, #0
 8001350:	4804      	ldr	r0, [pc, #16]	@ (8001364 <MX_TIM2_Init+0xb4>)
 8001352:	f003 fd81 	bl	8004e58 <HAL_TIM_PWM_Start>
  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001356:	4803      	ldr	r0, [pc, #12]	@ (8001364 <MX_TIM2_Init+0xb4>)
 8001358:	f000 fd8e 	bl	8001e78 <HAL_TIM_MspPostInit>

}
 800135c:	bf00      	nop
 800135e:	3728      	adds	r7, #40	@ 0x28
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}
 8001364:	20000288 	.word	0x20000288
 8001368:	0001387f 	.word	0x0001387f

0800136c <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001370:	4b10      	ldr	r3, [pc, #64]	@ (80013b4 <MX_TIM16_Init+0x48>)
 8001372:	4a11      	ldr	r2, [pc, #68]	@ (80013b8 <MX_TIM16_Init+0x4c>)
 8001374:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 1000;
 8001376:	4b0f      	ldr	r3, [pc, #60]	@ (80013b4 <MX_TIM16_Init+0x48>)
 8001378:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800137c:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800137e:	4b0d      	ldr	r3, [pc, #52]	@ (80013b4 <MX_TIM16_Init+0x48>)
 8001380:	2200      	movs	r2, #0
 8001382:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 400;
 8001384:	4b0b      	ldr	r3, [pc, #44]	@ (80013b4 <MX_TIM16_Init+0x48>)
 8001386:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800138a:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800138c:	4b09      	ldr	r3, [pc, #36]	@ (80013b4 <MX_TIM16_Init+0x48>)
 800138e:	2200      	movs	r2, #0
 8001390:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001392:	4b08      	ldr	r3, [pc, #32]	@ (80013b4 <MX_TIM16_Init+0x48>)
 8001394:	2200      	movs	r2, #0
 8001396:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001398:	4b06      	ldr	r3, [pc, #24]	@ (80013b4 <MX_TIM16_Init+0x48>)
 800139a:	2200      	movs	r2, #0
 800139c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800139e:	4805      	ldr	r0, [pc, #20]	@ (80013b4 <MX_TIM16_Init+0x48>)
 80013a0:	f003 fc0c 	bl	8004bbc <HAL_TIM_Base_Init>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d001      	beq.n	80013ae <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 80013aa:	f000 fc99 	bl	8001ce0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80013ae:	bf00      	nop
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	200002d4 	.word	0x200002d4
 80013b8:	40014400 	.word	0x40014400

080013bc <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80013c0:	4b10      	ldr	r3, [pc, #64]	@ (8001404 <MX_TIM17_Init+0x48>)
 80013c2:	4a11      	ldr	r2, [pc, #68]	@ (8001408 <MX_TIM17_Init+0x4c>)
 80013c4:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 1000;
 80013c6:	4b0f      	ldr	r3, [pc, #60]	@ (8001404 <MX_TIM17_Init+0x48>)
 80013c8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80013cc:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013ce:	4b0d      	ldr	r3, [pc, #52]	@ (8001404 <MX_TIM17_Init+0x48>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 400;
 80013d4:	4b0b      	ldr	r3, [pc, #44]	@ (8001404 <MX_TIM17_Init+0x48>)
 80013d6:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80013da:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013dc:	4b09      	ldr	r3, [pc, #36]	@ (8001404 <MX_TIM17_Init+0x48>)
 80013de:	2200      	movs	r2, #0
 80013e0:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80013e2:	4b08      	ldr	r3, [pc, #32]	@ (8001404 <MX_TIM17_Init+0x48>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013e8:	4b06      	ldr	r3, [pc, #24]	@ (8001404 <MX_TIM17_Init+0x48>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80013ee:	4805      	ldr	r0, [pc, #20]	@ (8001404 <MX_TIM17_Init+0x48>)
 80013f0:	f003 fbe4 	bl	8004bbc <HAL_TIM_Base_Init>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d001      	beq.n	80013fe <MX_TIM17_Init+0x42>
  {
    Error_Handler();
 80013fa:	f000 fc71 	bl	8001ce0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 80013fe:	bf00      	nop
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	20000320 	.word	0x20000320
 8001408:	40014800 	.word	0x40014800

0800140c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001410:	4b14      	ldr	r3, [pc, #80]	@ (8001464 <MX_USART2_UART_Init+0x58>)
 8001412:	4a15      	ldr	r2, [pc, #84]	@ (8001468 <MX_USART2_UART_Init+0x5c>)
 8001414:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001416:	4b13      	ldr	r3, [pc, #76]	@ (8001464 <MX_USART2_UART_Init+0x58>)
 8001418:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800141c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800141e:	4b11      	ldr	r3, [pc, #68]	@ (8001464 <MX_USART2_UART_Init+0x58>)
 8001420:	2200      	movs	r2, #0
 8001422:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001424:	4b0f      	ldr	r3, [pc, #60]	@ (8001464 <MX_USART2_UART_Init+0x58>)
 8001426:	2200      	movs	r2, #0
 8001428:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800142a:	4b0e      	ldr	r3, [pc, #56]	@ (8001464 <MX_USART2_UART_Init+0x58>)
 800142c:	2200      	movs	r2, #0
 800142e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001430:	4b0c      	ldr	r3, [pc, #48]	@ (8001464 <MX_USART2_UART_Init+0x58>)
 8001432:	220c      	movs	r2, #12
 8001434:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001436:	4b0b      	ldr	r3, [pc, #44]	@ (8001464 <MX_USART2_UART_Init+0x58>)
 8001438:	2200      	movs	r2, #0
 800143a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800143c:	4b09      	ldr	r3, [pc, #36]	@ (8001464 <MX_USART2_UART_Init+0x58>)
 800143e:	2200      	movs	r2, #0
 8001440:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001442:	4b08      	ldr	r3, [pc, #32]	@ (8001464 <MX_USART2_UART_Init+0x58>)
 8001444:	2200      	movs	r2, #0
 8001446:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001448:	4b06      	ldr	r3, [pc, #24]	@ (8001464 <MX_USART2_UART_Init+0x58>)
 800144a:	2200      	movs	r2, #0
 800144c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800144e:	4805      	ldr	r0, [pc, #20]	@ (8001464 <MX_USART2_UART_Init+0x58>)
 8001450:	f004 fc94 	bl	8005d7c <HAL_UART_Init>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d001      	beq.n	800145e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800145a:	f000 fc41 	bl	8001ce0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800145e:	bf00      	nop
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	2000036c 	.word	0x2000036c
 8001468:	40004400 	.word	0x40004400

0800146c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b08a      	sub	sp, #40	@ 0x28
 8001470:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001472:	f107 0314 	add.w	r3, r7, #20
 8001476:	2200      	movs	r2, #0
 8001478:	601a      	str	r2, [r3, #0]
 800147a:	605a      	str	r2, [r3, #4]
 800147c:	609a      	str	r2, [r3, #8]
 800147e:	60da      	str	r2, [r3, #12]
 8001480:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001482:	4b50      	ldr	r3, [pc, #320]	@ (80015c4 <MX_GPIO_Init+0x158>)
 8001484:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001486:	4a4f      	ldr	r2, [pc, #316]	@ (80015c4 <MX_GPIO_Init+0x158>)
 8001488:	f043 0304 	orr.w	r3, r3, #4
 800148c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800148e:	4b4d      	ldr	r3, [pc, #308]	@ (80015c4 <MX_GPIO_Init+0x158>)
 8001490:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001492:	f003 0304 	and.w	r3, r3, #4
 8001496:	613b      	str	r3, [r7, #16]
 8001498:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800149a:	4b4a      	ldr	r3, [pc, #296]	@ (80015c4 <MX_GPIO_Init+0x158>)
 800149c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800149e:	4a49      	ldr	r2, [pc, #292]	@ (80015c4 <MX_GPIO_Init+0x158>)
 80014a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80014a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014a6:	4b47      	ldr	r3, [pc, #284]	@ (80015c4 <MX_GPIO_Init+0x158>)
 80014a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80014ae:	60fb      	str	r3, [r7, #12]
 80014b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014b2:	4b44      	ldr	r3, [pc, #272]	@ (80015c4 <MX_GPIO_Init+0x158>)
 80014b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014b6:	4a43      	ldr	r2, [pc, #268]	@ (80015c4 <MX_GPIO_Init+0x158>)
 80014b8:	f043 0301 	orr.w	r3, r3, #1
 80014bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014be:	4b41      	ldr	r3, [pc, #260]	@ (80015c4 <MX_GPIO_Init+0x158>)
 80014c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014c2:	f003 0301 	and.w	r3, r3, #1
 80014c6:	60bb      	str	r3, [r7, #8]
 80014c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ca:	4b3e      	ldr	r3, [pc, #248]	@ (80015c4 <MX_GPIO_Init+0x158>)
 80014cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014ce:	4a3d      	ldr	r2, [pc, #244]	@ (80015c4 <MX_GPIO_Init+0x158>)
 80014d0:	f043 0302 	orr.w	r3, r3, #2
 80014d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014d6:	4b3b      	ldr	r3, [pc, #236]	@ (80015c4 <MX_GPIO_Init+0x158>)
 80014d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014da:	f003 0302 	and.w	r3, r3, #2
 80014de:	607b      	str	r3, [r7, #4]
 80014e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, shutdownButton_Pin|YEN_Pin|YDIR_Pin|XPUL_Pin, GPIO_PIN_RESET);
 80014e2:	2200      	movs	r2, #0
 80014e4:	f240 7102 	movw	r1, #1794	@ 0x702
 80014e8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014ec:	f001 fa2e 	bl	800294c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, YPUL_Pin|XDIR_Pin|XEN_Pin, GPIO_PIN_RESET);
 80014f0:	2200      	movs	r2, #0
 80014f2:	f44f 6186 	mov.w	r1, #1072	@ 0x430
 80014f6:	4834      	ldr	r0, [pc, #208]	@ (80015c8 <MX_GPIO_Init+0x15c>)
 80014f8:	f001 fa28 	bl	800294c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 80014fc:	2201      	movs	r2, #1
 80014fe:	2140      	movs	r1, #64	@ 0x40
 8001500:	4831      	ldr	r0, [pc, #196]	@ (80015c8 <MX_GPIO_Init+0x15c>)
 8001502:	f001 fa23 	bl	800294c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001506:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800150a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800150c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001510:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001512:	2300      	movs	r3, #0
 8001514:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001516:	f107 0314 	add.w	r3, r7, #20
 800151a:	4619      	mov	r1, r3
 800151c:	482b      	ldr	r0, [pc, #172]	@ (80015cc <MX_GPIO_Init+0x160>)
 800151e:	f001 f853 	bl	80025c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001522:	2301      	movs	r3, #1
 8001524:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001526:	2300      	movs	r3, #0
 8001528:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152a:	2300      	movs	r3, #0
 800152c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800152e:	f107 0314 	add.w	r3, r7, #20
 8001532:	4619      	mov	r1, r3
 8001534:	4825      	ldr	r0, [pc, #148]	@ (80015cc <MX_GPIO_Init+0x160>)
 8001536:	f001 f847 	bl	80025c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : shutdownButton_Pin YEN_Pin YDIR_Pin XPUL_Pin */
  GPIO_InitStruct.Pin = shutdownButton_Pin|YEN_Pin|YDIR_Pin|XPUL_Pin;
 800153a:	f240 7302 	movw	r3, #1794	@ 0x702
 800153e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001540:	2301      	movs	r3, #1
 8001542:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001544:	2300      	movs	r3, #0
 8001546:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001548:	2300      	movs	r3, #0
 800154a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800154c:	f107 0314 	add.w	r3, r7, #20
 8001550:	4619      	mov	r1, r3
 8001552:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001556:	f001 f837 	bl	80025c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : YPUL_Pin XDIR_Pin XEN_Pin */
  GPIO_InitStruct.Pin = YPUL_Pin|XDIR_Pin|XEN_Pin;
 800155a:	f44f 6386 	mov.w	r3, #1072	@ 0x430
 800155e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001560:	2301      	movs	r3, #1
 8001562:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001564:	2300      	movs	r3, #0
 8001566:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001568:	2300      	movs	r3, #0
 800156a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800156c:	f107 0314 	add.w	r3, r7, #20
 8001570:	4619      	mov	r1, r3
 8001572:	4815      	ldr	r0, [pc, #84]	@ (80015c8 <MX_GPIO_Init+0x15c>)
 8001574:	f001 f828 	bl	80025c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CD_Pin */
  GPIO_InitStruct.Pin = SPI1_CD_Pin;
 8001578:	2380      	movs	r3, #128	@ 0x80
 800157a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800157c:	2300      	movs	r3, #0
 800157e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001580:	2301      	movs	r3, #1
 8001582:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SPI1_CD_GPIO_Port, &GPIO_InitStruct);
 8001584:	f107 0314 	add.w	r3, r7, #20
 8001588:	4619      	mov	r1, r3
 800158a:	4810      	ldr	r0, [pc, #64]	@ (80015cc <MX_GPIO_Init+0x160>)
 800158c:	f001 f81c 	bl	80025c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8001590:	2340      	movs	r3, #64	@ 0x40
 8001592:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001594:	2301      	movs	r3, #1
 8001596:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001598:	2301      	movs	r3, #1
 800159a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800159c:	2300      	movs	r3, #0
 800159e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 80015a0:	f107 0314 	add.w	r3, r7, #20
 80015a4:	4619      	mov	r1, r3
 80015a6:	4808      	ldr	r0, [pc, #32]	@ (80015c8 <MX_GPIO_Init+0x15c>)
 80015a8:	f001 f80e 	bl	80025c8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80015ac:	2200      	movs	r2, #0
 80015ae:	2100      	movs	r1, #0
 80015b0:	2028      	movs	r0, #40	@ 0x28
 80015b2:	f000 ffdf 	bl	8002574 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80015b6:	2028      	movs	r0, #40	@ 0x28
 80015b8:	f000 fff8 	bl	80025ac <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80015bc:	bf00      	nop
 80015be:	3728      	adds	r7, #40	@ 0x28
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	40021000 	.word	0x40021000
 80015c8:	48000400 	.word	0x48000400
 80015cc:	48000800 	.word	0x48000800

080015d0 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	4603      	mov	r3, r0
 80015d8:	80fb      	strh	r3, [r7, #6]

	if (GPIO_Pin == shutdownButton_Pin)
 80015da:	88fb      	ldrh	r3, [r7, #6]
 80015dc:	2b02      	cmp	r3, #2
 80015de:	d113      	bne.n	8001608 <HAL_GPIO_EXTI_Callback+0x38>
	{
		HAL_GPIO_WritePin(XEN_GPIO_Port, XEN_Pin, 1);
 80015e0:	2201      	movs	r2, #1
 80015e2:	2120      	movs	r1, #32
 80015e4:	480a      	ldr	r0, [pc, #40]	@ (8001610 <HAL_GPIO_EXTI_Callback+0x40>)
 80015e6:	f001 f9b1 	bl	800294c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YEN_GPIO_Port, YEN_Pin, 1);
 80015ea:	2201      	movs	r2, #1
 80015ec:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80015f0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015f4:	f001 f9aa 	bl	800294c <HAL_GPIO_WritePin>

		HAL_TIM_Base_Stop_IT(&htim16);
 80015f8:	4806      	ldr	r0, [pc, #24]	@ (8001614 <HAL_GPIO_EXTI_Callback+0x44>)
 80015fa:	f003 fba7 	bl	8004d4c <HAL_TIM_Base_Stop_IT>
		HAL_TIM_Base_Stop_IT(&htim17);
 80015fe:	4806      	ldr	r0, [pc, #24]	@ (8001618 <HAL_GPIO_EXTI_Callback+0x48>)
 8001600:	f003 fba4 	bl	8004d4c <HAL_TIM_Base_Stop_IT>

		while(1){}
 8001604:	bf00      	nop
 8001606:	e7fd      	b.n	8001604 <HAL_GPIO_EXTI_Callback+0x34>

	}
}
 8001608:	bf00      	nop
 800160a:	3708      	adds	r7, #8
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}
 8001610:	48000400 	.word	0x48000400
 8001614:	200002d4 	.word	0x200002d4
 8001618:	20000320 	.word	0x20000320

0800161c <GcommandParse>:

void GcommandParse(TCHAR* line1)
{
 800161c:	b590      	push	{r4, r7, lr}
 800161e:	b09f      	sub	sp, #124	@ 0x7c
 8001620:	af04      	add	r7, sp, #16
 8001622:	6078      	str	r0, [r7, #4]

	  // Creates local variables for the different possible commands in Gcode (max 10 characters)
	  char Gcommand[10] = "";
 8001624:	2300      	movs	r3, #0
 8001626:	657b      	str	r3, [r7, #84]	@ 0x54
 8001628:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800162c:	2200      	movs	r2, #0
 800162e:	601a      	str	r2, [r3, #0]
 8001630:	809a      	strh	r2, [r3, #4]
	  char Xcoordinate[10] = "";
 8001632:	2300      	movs	r3, #0
 8001634:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001636:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800163a:	2200      	movs	r2, #0
 800163c:	601a      	str	r2, [r3, #0]
 800163e:	809a      	strh	r2, [r3, #4]
	  char Ycoordinate[10] = "";
 8001640:	2300      	movs	r3, #0
 8001642:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001644:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001648:	2200      	movs	r2, #0
 800164a:	601a      	str	r2, [r3, #0]
 800164c:	809a      	strh	r2, [r3, #4]
	  char Zcoordinate[10] = "";
 800164e:	2300      	movs	r3, #0
 8001650:	633b      	str	r3, [r7, #48]	@ 0x30
 8001652:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001656:	2200      	movs	r2, #0
 8001658:	601a      	str	r2, [r3, #0]
 800165a:	809a      	strh	r2, [r3, #4]
	  char feedRate[10] = "";
 800165c:	2300      	movs	r3, #0
 800165e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001660:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001664:	2200      	movs	r2, #0
 8001666:	601a      	str	r2, [r3, #0]
 8001668:	809a      	strh	r2, [r3, #4]
	  char laserSpeed[10] = "";
 800166a:	2300      	movs	r3, #0
 800166c:	61bb      	str	r3, [r7, #24]
 800166e:	f107 031c 	add.w	r3, r7, #28
 8001672:	2200      	movs	r2, #0
 8001674:	601a      	str	r2, [r3, #0]
 8001676:	809a      	strh	r2, [r3, #4]

	  int i = 0;
 8001678:	2300      	movs	r3, #0
 800167a:	667b      	str	r3, [r7, #100]	@ 0x64
	  // Initiates a for loop which loops each character of the Gcode line
	  while (1)
	  {

		  // Creates a temporary variable for the Gcode command and the value attached to it
		  char command = line1[i];	// assigns the first value of the Gcode as the command
 800167c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800167e:	687a      	ldr	r2, [r7, #4]
 8001680:	4413      	add	r3, r2
 8001682:	781b      	ldrb	r3, [r3, #0]
 8001684:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		  char newValue[10] = "";
 8001688:	2300      	movs	r3, #0
 800168a:	60fb      	str	r3, [r7, #12]
 800168c:	f107 0310 	add.w	r3, r7, #16
 8001690:	2200      	movs	r2, #0
 8001692:	601a      	str	r2, [r3, #0]
 8001694:	809a      	strh	r2, [r3, #4]

		  int j = 0;
 8001696:	2300      	movs	r3, #0
 8001698:	663b      	str	r3, [r7, #96]	@ 0x60
		  i++;
 800169a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800169c:	3301      	adds	r3, #1
 800169e:	667b      	str	r3, [r7, #100]	@ 0x64

		  while ((line1[i] != ' ') && (line1[i] != '\0') && (line1[i] != '\n'))	// while loop that loops through the rest of the command and stores the value in newValue
 80016a0:	e00f      	b.n	80016c2 <GcommandParse+0xa6>
		  {

			  newValue[j] = line1[i];
 80016a2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80016a4:	687a      	ldr	r2, [r7, #4]
 80016a6:	4413      	add	r3, r2
 80016a8:	7819      	ldrb	r1, [r3, #0]
 80016aa:	f107 020c 	add.w	r2, r7, #12
 80016ae:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80016b0:	4413      	add	r3, r2
 80016b2:	460a      	mov	r2, r1
 80016b4:	701a      	strb	r2, [r3, #0]
			  i++;
 80016b6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80016b8:	3301      	adds	r3, #1
 80016ba:	667b      	str	r3, [r7, #100]	@ 0x64
			  j++;
 80016bc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80016be:	3301      	adds	r3, #1
 80016c0:	663b      	str	r3, [r7, #96]	@ 0x60
		  while ((line1[i] != ' ') && (line1[i] != '\0') && (line1[i] != '\n'))	// while loop that loops through the rest of the command and stores the value in newValue
 80016c2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80016c4:	687a      	ldr	r2, [r7, #4]
 80016c6:	4413      	add	r3, r2
 80016c8:	781b      	ldrb	r3, [r3, #0]
 80016ca:	2b20      	cmp	r3, #32
 80016cc:	d00b      	beq.n	80016e6 <GcommandParse+0xca>
 80016ce:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80016d0:	687a      	ldr	r2, [r7, #4]
 80016d2:	4413      	add	r3, r2
 80016d4:	781b      	ldrb	r3, [r3, #0]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d005      	beq.n	80016e6 <GcommandParse+0xca>
 80016da:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80016dc:	687a      	ldr	r2, [r7, #4]
 80016de:	4413      	add	r3, r2
 80016e0:	781b      	ldrb	r3, [r3, #0]
 80016e2:	2b0a      	cmp	r3, #10
 80016e4:	d1dd      	bne.n	80016a2 <GcommandParse+0x86>
		  }
		  newValue[j] = '\0';	//adds the null operator to the end of the newValue
 80016e6:	f107 020c 	add.w	r2, r7, #12
 80016ea:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80016ec:	4413      	add	r3, r2
 80016ee:	2200      	movs	r2, #0
 80016f0:	701a      	strb	r2, [r3, #0]

		  // Switch statement for the value of command to split the current word into it's variable
		  switch (command)
 80016f2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80016f6:	3b46      	subs	r3, #70	@ 0x46
 80016f8:	2b14      	cmp	r3, #20
 80016fa:	d86c      	bhi.n	80017d6 <GcommandParse+0x1ba>
 80016fc:	a201      	add	r2, pc, #4	@ (adr r2, 8001704 <GcommandParse+0xe8>)
 80016fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001702:	bf00      	nop
 8001704:	080017c5 	.word	0x080017c5
 8001708:	08001759 	.word	0x08001759
 800170c:	080017d7 	.word	0x080017d7
 8001710:	080017d7 	.word	0x080017d7
 8001714:	080017d7 	.word	0x080017d7
 8001718:	080017d7 	.word	0x080017d7
 800171c:	080017d7 	.word	0x080017d7
 8001720:	080017a1 	.word	0x080017a1
 8001724:	080017d7 	.word	0x080017d7
 8001728:	080017d7 	.word	0x080017d7
 800172c:	080017d7 	.word	0x080017d7
 8001730:	080017d7 	.word	0x080017d7
 8001734:	080017d7 	.word	0x080017d7
 8001738:	080017b3 	.word	0x080017b3
 800173c:	080017d7 	.word	0x080017d7
 8001740:	080017d7 	.word	0x080017d7
 8001744:	080017d7 	.word	0x080017d7
 8001748:	080017d7 	.word	0x080017d7
 800174c:	0800176b 	.word	0x0800176b
 8001750:	0800177d 	.word	0x0800177d
 8001754:	0800178f 	.word	0x0800178f
		  {
		  case 'G':
			  strncpy(Gcommand, newValue, 10);	// copies the value in newValue to the Gcommand variable
 8001758:	f107 010c 	add.w	r1, r7, #12
 800175c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001760:	220a      	movs	r2, #10
 8001762:	4618      	mov	r0, r3
 8001764:	f008 ffac 	bl	800a6c0 <strncpy>
				break;
 8001768:	e036      	b.n	80017d8 <GcommandParse+0x1bc>
		  case 'X':
			  strncpy(Xcoordinate, newValue, 10);	// copies the value in newValue to the Xcoordinate variable
 800176a:	f107 010c 	add.w	r1, r7, #12
 800176e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001772:	220a      	movs	r2, #10
 8001774:	4618      	mov	r0, r3
 8001776:	f008 ffa3 	bl	800a6c0 <strncpy>
				break;
 800177a:	e02d      	b.n	80017d8 <GcommandParse+0x1bc>
		  case 'Y':
			  strncpy(Ycoordinate, newValue, 10);	// copies the value in newValue to the Ycoordinate variable
 800177c:	f107 010c 	add.w	r1, r7, #12
 8001780:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001784:	220a      	movs	r2, #10
 8001786:	4618      	mov	r0, r3
 8001788:	f008 ff9a 	bl	800a6c0 <strncpy>
				break;
 800178c:	e024      	b.n	80017d8 <GcommandParse+0x1bc>
		  case 'Z':
			  strncpy(Zcoordinate, newValue, 10);	// copies the value in newValue to the Zcoordinate variable
 800178e:	f107 010c 	add.w	r1, r7, #12
 8001792:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001796:	220a      	movs	r2, #10
 8001798:	4618      	mov	r0, r3
 800179a:	f008 ff91 	bl	800a6c0 <strncpy>
				break;
 800179e:	e01b      	b.n	80017d8 <GcommandParse+0x1bc>
		  case 'M':
			  strncpy(Gcommand, newValue, 10);	// copies the value in newValue to the Mcommand variable
 80017a0:	f107 010c 	add.w	r1, r7, #12
 80017a4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80017a8:	220a      	movs	r2, #10
 80017aa:	4618      	mov	r0, r3
 80017ac:	f008 ff88 	bl	800a6c0 <strncpy>
				break;
 80017b0:	e012      	b.n	80017d8 <GcommandParse+0x1bc>
		  case 'S':
			  strncpy(laserSpeed, newValue, 10);	// copies the value in newValue to the laserSpeed variable
 80017b2:	f107 010c 	add.w	r1, r7, #12
 80017b6:	f107 0318 	add.w	r3, r7, #24
 80017ba:	220a      	movs	r2, #10
 80017bc:	4618      	mov	r0, r3
 80017be:	f008 ff7f 	bl	800a6c0 <strncpy>
				break;
 80017c2:	e009      	b.n	80017d8 <GcommandParse+0x1bc>
		  case 'F':
			  strncpy(feedRate, newValue, 10);	// copies the value in newValue to the feedRate variable
 80017c4:	f107 010c 	add.w	r1, r7, #12
 80017c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017cc:	220a      	movs	r2, #10
 80017ce:	4618      	mov	r0, r3
 80017d0:	f008 ff76 	bl	800a6c0 <strncpy>
				break;
 80017d4:	e000      	b.n	80017d8 <GcommandParse+0x1bc>
		  case 'R':
				break;
		  default:
				break;
 80017d6:	bf00      	nop
		  }
		  if (line1[i] == '\n')
 80017d8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80017da:	687a      	ldr	r2, [r7, #4]
 80017dc:	4413      	add	r3, r2
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	2b0a      	cmp	r3, #10
 80017e2:	d109      	bne.n	80017f8 <GcommandParse+0x1dc>
			  break;
		  i++;
	  }
	  if (strcmp(Gcommand,"G")){
 80017e4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80017e8:	491d      	ldr	r1, [pc, #116]	@ (8001860 <GcommandParse+0x244>)
 80017ea:	4618      	mov	r0, r3
 80017ec:	f7fe fcf0 	bl	80001d0 <strcmp>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d104      	bne.n	8001800 <GcommandParse+0x1e4>
 80017f6:	e028      	b.n	800184a <GcommandParse+0x22e>
		  i++;
 80017f8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80017fa:	3301      	adds	r3, #1
 80017fc:	667b      	str	r3, [r7, #100]	@ 0x64
	  {
 80017fe:	e73d      	b.n	800167c <GcommandParse+0x60>
		  GcommandExecute(Gcommand, Xcoordinate, Ycoordinate, Zcoordinate, feedRate, laserSpeed);	// Calls the Gcommand Execute function which will execute the given command
 8001800:	f107 0430 	add.w	r4, r7, #48	@ 0x30
 8001804:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8001808:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 800180c:	f107 0054 	add.w	r0, r7, #84	@ 0x54
 8001810:	f107 0318 	add.w	r3, r7, #24
 8001814:	9301      	str	r3, [sp, #4]
 8001816:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800181a:	9300      	str	r3, [sp, #0]
 800181c:	4623      	mov	r3, r4
 800181e:	f000 f827 	bl	8001870 <GcommandExecute>
		  myprintf("Gcommand: %s Xcoordinate: %s Ycoordinate: %s Zcoordinate: %s feedRate: %s laserSpeed %s\n", Gcommand, Xcoordinate, Ycoordinate, Zcoordinate, feedRate, laserSpeed);
 8001822:	f107 003c 	add.w	r0, r7, #60	@ 0x3c
 8001826:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 800182a:	f107 0154 	add.w	r1, r7, #84	@ 0x54
 800182e:	f107 0318 	add.w	r3, r7, #24
 8001832:	9302      	str	r3, [sp, #8]
 8001834:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001838:	9301      	str	r3, [sp, #4]
 800183a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800183e:	9300      	str	r3, [sp, #0]
 8001840:	4603      	mov	r3, r0
 8001842:	4808      	ldr	r0, [pc, #32]	@ (8001864 <GcommandParse+0x248>)
 8001844:	f7ff fbde 	bl	8001004 <myprintf>
	  }
	  else if (strcmp(Gcommand,"M")){

	  }
}
 8001848:	e005      	b.n	8001856 <GcommandParse+0x23a>
	  else if (strcmp(Gcommand,"M")){
 800184a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800184e:	4906      	ldr	r1, [pc, #24]	@ (8001868 <GcommandParse+0x24c>)
 8001850:	4618      	mov	r0, r3
 8001852:	f7fe fcbd 	bl	80001d0 <strcmp>
}
 8001856:	bf00      	nop
 8001858:	376c      	adds	r7, #108	@ 0x6c
 800185a:	46bd      	mov	sp, r7
 800185c:	bd90      	pop	{r4, r7, pc}
 800185e:	bf00      	nop
 8001860:	0800ca7c 	.word	0x0800ca7c
 8001864:	0800ca80 	.word	0x0800ca80
 8001868:	0800cadc 	.word	0x0800cadc
 800186c:	00000000 	.word	0x00000000

08001870 <GcommandExecute>:
	*s = '\0';
}

// Command Execute takes the parameters from the Gcode line and controls the motors accordingly
void GcommandExecute(char Gcommand[], char Xcommand[], char Ycommand[], char Zcommand[], char feedRate[], char laserSpeed[])
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b088      	sub	sp, #32
 8001874:	af00      	add	r7, sp, #0
 8001876:	60f8      	str	r0, [r7, #12]
 8001878:	60b9      	str	r1, [r7, #8]
 800187a:	607a      	str	r2, [r7, #4]
 800187c:	603b      	str	r3, [r7, #0]

	if ((!strcmp(Gcommand,"0")) || (!strcmp(Gcommand,"1")))	// If the Gcode command is G0, runs with rapid positioning (full speed move)
 800187e:	4966      	ldr	r1, [pc, #408]	@ (8001a18 <GcommandExecute+0x1a8>)
 8001880:	68f8      	ldr	r0, [r7, #12]
 8001882:	f7fe fca5 	bl	80001d0 <strcmp>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d007      	beq.n	800189c <GcommandExecute+0x2c>
 800188c:	4963      	ldr	r1, [pc, #396]	@ (8001a1c <GcommandExecute+0x1ac>)
 800188e:	68f8      	ldr	r0, [r7, #12]
 8001890:	f7fe fc9e 	bl	80001d0 <strcmp>
 8001894:	4603      	mov	r3, r0
 8001896:	2b00      	cmp	r3, #0
 8001898:	f040 80b3 	bne.w	8001a02 <GcommandExecute+0x192>
	{
		if (Xcommand[0] != '\0')
 800189c:	68bb      	ldr	r3, [r7, #8]
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d013      	beq.n	80018cc <GcommandExecute+0x5c>
		{
			Xend = ((1600 / 43.39) * atof(Xcommand));	// Converts Xcommand to an int, changes units to .1 mms and updates the global variable
 80018a4:	68b8      	ldr	r0, [r7, #8]
 80018a6:	f007 ff1a 	bl	80096de <atof>
 80018aa:	ec51 0b10 	vmov	r0, r1, d0
 80018ae:	a358      	add	r3, pc, #352	@ (adr r3, 8001a10 <GcommandExecute+0x1a0>)
 80018b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018b4:	f7fe feb0 	bl	8000618 <__aeabi_dmul>
 80018b8:	4602      	mov	r2, r0
 80018ba:	460b      	mov	r3, r1
 80018bc:	4610      	mov	r0, r2
 80018be:	4619      	mov	r1, r3
 80018c0:	f7ff f95a 	bl	8000b78 <__aeabi_d2iz>
 80018c4:	4603      	mov	r3, r0
 80018c6:	4a56      	ldr	r2, [pc, #344]	@ (8001a20 <GcommandExecute+0x1b0>)
 80018c8:	6013      	str	r3, [r2, #0]
 80018ca:	e003      	b.n	80018d4 <GcommandExecute+0x64>
		} else
		{
			Xend = Xcurrent;
 80018cc:	4b55      	ldr	r3, [pc, #340]	@ (8001a24 <GcommandExecute+0x1b4>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a53      	ldr	r2, [pc, #332]	@ (8001a20 <GcommandExecute+0x1b0>)
 80018d2:	6013      	str	r3, [r2, #0]
		}
		if (Ycommand[0] != '\0')
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	781b      	ldrb	r3, [r3, #0]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d013      	beq.n	8001904 <GcommandExecute+0x94>
		{
			Yend = ((1600 / 43.39) * atof(Ycommand));	// Converts Ycommand to an int, changes units to .1 mms and updates the global variable
 80018dc:	6878      	ldr	r0, [r7, #4]
 80018de:	f007 fefe 	bl	80096de <atof>
 80018e2:	ec51 0b10 	vmov	r0, r1, d0
 80018e6:	a34a      	add	r3, pc, #296	@ (adr r3, 8001a10 <GcommandExecute+0x1a0>)
 80018e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ec:	f7fe fe94 	bl	8000618 <__aeabi_dmul>
 80018f0:	4602      	mov	r2, r0
 80018f2:	460b      	mov	r3, r1
 80018f4:	4610      	mov	r0, r2
 80018f6:	4619      	mov	r1, r3
 80018f8:	f7ff f93e 	bl	8000b78 <__aeabi_d2iz>
 80018fc:	4603      	mov	r3, r0
 80018fe:	4a4a      	ldr	r2, [pc, #296]	@ (8001a28 <GcommandExecute+0x1b8>)
 8001900:	6013      	str	r3, [r2, #0]
 8001902:	e003      	b.n	800190c <GcommandExecute+0x9c>
		} else
		{
			Yend = Ycurrent;
 8001904:	4b49      	ldr	r3, [pc, #292]	@ (8001a2c <GcommandExecute+0x1bc>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a47      	ldr	r2, [pc, #284]	@ (8001a28 <GcommandExecute+0x1b8>)
 800190a:	6013      	str	r3, [r2, #0]
		}

		// Calculates distance to be traveled
		float Xdistance = Xend - Xcurrent;
 800190c:	4b44      	ldr	r3, [pc, #272]	@ (8001a20 <GcommandExecute+0x1b0>)
 800190e:	681a      	ldr	r2, [r3, #0]
 8001910:	4b44      	ldr	r3, [pc, #272]	@ (8001a24 <GcommandExecute+0x1b4>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	1ad3      	subs	r3, r2, r3
 8001916:	ee07 3a90 	vmov	s15, r3
 800191a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800191e:	edc7 7a07 	vstr	s15, [r7, #28]
		float Ydistance = Yend - Ycurrent;
 8001922:	4b41      	ldr	r3, [pc, #260]	@ (8001a28 <GcommandExecute+0x1b8>)
 8001924:	681a      	ldr	r2, [r3, #0]
 8001926:	4b41      	ldr	r3, [pc, #260]	@ (8001a2c <GcommandExecute+0x1bc>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	1ad3      	subs	r3, r2, r3
 800192c:	ee07 3a90 	vmov	s15, r3
 8001930:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001934:	edc7 7a06 	vstr	s15, [r7, #24]

		// Updates the Direction variable and writes to the pin
		if (Xdistance > 0)
 8001938:	edd7 7a07 	vldr	s15, [r7, #28]
 800193c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001940:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001944:	dd08      	ble.n	8001958 <GcommandExecute+0xe8>
		{
			XDIR = 1;
 8001946:	4b3a      	ldr	r3, [pc, #232]	@ (8001a30 <GcommandExecute+0x1c0>)
 8001948:	2201      	movs	r2, #1
 800194a:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(XDIR_GPIO_Port, XDIR_Pin, 1);
 800194c:	2201      	movs	r2, #1
 800194e:	2110      	movs	r1, #16
 8001950:	4838      	ldr	r0, [pc, #224]	@ (8001a34 <GcommandExecute+0x1c4>)
 8001952:	f000 fffb 	bl	800294c <HAL_GPIO_WritePin>
 8001956:	e00e      	b.n	8001976 <GcommandExecute+0x106>
		} else if (Xdistance < 0)
 8001958:	edd7 7a07 	vldr	s15, [r7, #28]
 800195c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001960:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001964:	d507      	bpl.n	8001976 <GcommandExecute+0x106>
		{
			XDIR = 0;
 8001966:	4b32      	ldr	r3, [pc, #200]	@ (8001a30 <GcommandExecute+0x1c0>)
 8001968:	2200      	movs	r2, #0
 800196a:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(XDIR_GPIO_Port, XDIR_Pin, 0);
 800196c:	2200      	movs	r2, #0
 800196e:	2110      	movs	r1, #16
 8001970:	4830      	ldr	r0, [pc, #192]	@ (8001a34 <GcommandExecute+0x1c4>)
 8001972:	f000 ffeb 	bl	800294c <HAL_GPIO_WritePin>
		}

		if (Ydistance > 0)
 8001976:	edd7 7a06 	vldr	s15, [r7, #24]
 800197a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800197e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001982:	dd0a      	ble.n	800199a <GcommandExecute+0x12a>
		{
			YDIR = 1;
 8001984:	4b2c      	ldr	r3, [pc, #176]	@ (8001a38 <GcommandExecute+0x1c8>)
 8001986:	2201      	movs	r2, #1
 8001988:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(YDIR_GPIO_Port, YDIR_Pin, 1);
 800198a:	2201      	movs	r2, #1
 800198c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001990:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001994:	f000 ffda 	bl	800294c <HAL_GPIO_WritePin>
 8001998:	e010      	b.n	80019bc <GcommandExecute+0x14c>
		} else if (Ydistance < 0)
 800199a:	edd7 7a06 	vldr	s15, [r7, #24]
 800199e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80019a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019a6:	d509      	bpl.n	80019bc <GcommandExecute+0x14c>
		{
			YDIR = 0;
 80019a8:	4b23      	ldr	r3, [pc, #140]	@ (8001a38 <GcommandExecute+0x1c8>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(YDIR_GPIO_Port, YDIR_Pin, 0);
 80019ae:	2200      	movs	r2, #0
 80019b0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80019b4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80019b8:	f000 ffc8 	bl	800294c <HAL_GPIO_WritePin>
		}

		int laser = atoi(laserSpeed);	// Converts laserSpeed to an int
 80019bc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80019be:	f007 fe91 	bl	80096e4 <atoi>
 80019c2:	6178      	str	r0, [r7, #20]

		if (feedRate[0] != '\0')
 80019c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019c6:	781b      	ldrb	r3, [r3, #0]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d005      	beq.n	80019d8 <GcommandExecute+0x168>
		{
			feed = atoi(feedRate);	// Converts feedRate to an int
 80019cc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80019ce:	f007 fe89 	bl	80096e4 <atoi>
 80019d2:	4603      	mov	r3, r0
 80019d4:	4a19      	ldr	r2, [pc, #100]	@ (8001a3c <GcommandExecute+0x1cc>)
 80019d6:	6013      	str	r3, [r2, #0]
		}
		// Add code to turn laser on and PWM of value specified
				 laser = atoi(laserSpeed);  // Convert laserSpeed string to integer
 80019d8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80019da:	f007 fe83 	bl	80096e4 <atoi>
 80019de:	6178      	str	r0, [r7, #20]
				 SetLaserPower(laser);
 80019e0:	6978      	ldr	r0, [r7, #20]
 80019e2:	f000 f82d 	bl	8001a40 <SetLaserPower>

		laserEngrave(Xdistance, Ydistance);	// Calls the laserEngrave function
 80019e6:	edd7 7a07 	vldr	s15, [r7, #28]
 80019ea:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80019ee:	edd7 7a06 	vldr	s15, [r7, #24]
 80019f2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019f6:	ee17 1a90 	vmov	r1, s15
 80019fa:	ee17 0a10 	vmov	r0, s14
 80019fe:	f000 f82f 	bl	8001a60 <laserEngrave>

	}

	// We'll need to add all of the G commands here

}
 8001a02:	bf00      	nop
 8001a04:	3720      	adds	r7, #32
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	f3af 8000 	nop.w
 8001a10:	47af49cf 	.word	0x47af49cf
 8001a14:	40426ffb 	.word	0x40426ffb
 8001a18:	0800cae0 	.word	0x0800cae0
 8001a1c:	0800cae4 	.word	0x0800cae4
 8001a20:	200003fc 	.word	0x200003fc
 8001a24:	200003f4 	.word	0x200003f4
 8001a28:	20000400 	.word	0x20000400
 8001a2c:	200003f8 	.word	0x200003f8
 8001a30:	20000000 	.word	0x20000000
 8001a34:	48000400 	.word	0x48000400
 8001a38:	20000004 	.word	0x20000004
 8001a3c:	20000404 	.word	0x20000404

08001a40 <SetLaserPower>:


void SetLaserPower(uint8_t power) {
 8001a40:	b480      	push	{r7}
 8001a42:	b083      	sub	sp, #12
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	4603      	mov	r3, r0
 8001a48:	71fb      	strb	r3, [r7, #7]
    TIM2->CCR1 = power;  // Set duty cycle (0 = OFF, 255 = FULL POWER)
 8001a4a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001a4e:	79fb      	ldrb	r3, [r7, #7]
 8001a50:	6353      	str	r3, [r2, #52]	@ 0x34
}
 8001a52:	bf00      	nop
 8001a54:	370c      	adds	r7, #12
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr
	...

08001a60 <laserEngrave>:


void laserEngrave(int Xdistance, int Ydistance)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b086      	sub	sp, #24
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
 8001a68:	6039      	str	r1, [r7, #0]
	int Xspeed = 65535;
 8001a6a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001a6e:	617b      	str	r3, [r7, #20]
	int Yspeed = 65535;
 8001a70:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001a74:	613b      	str	r3, [r7, #16]

	float totalDistance = sqrt((Xdistance * Xdistance) + (Ydistance * Ydistance));
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	fb03 f203 	mul.w	r2, r3, r3
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	fb03 f303 	mul.w	r3, r3, r3
 8001a82:	4413      	add	r3, r2
 8001a84:	4618      	mov	r0, r3
 8001a86:	f7fe fd5d 	bl	8000544 <__aeabi_i2d>
 8001a8a:	4602      	mov	r2, r0
 8001a8c:	460b      	mov	r3, r1
 8001a8e:	ec43 2b10 	vmov	d0, r2, r3
 8001a92:	f00a fe99 	bl	800c7c8 <sqrt>
 8001a96:	ec53 2b10 	vmov	r2, r3, d0
 8001a9a:	4610      	mov	r0, r2
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	f7ff f8b3 	bl	8000c08 <__aeabi_d2f>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	60fb      	str	r3, [r7, #12]
	if (Xdistance != 0)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d026      	beq.n	8001afa <laserEngrave+0x9a>
	{
		Xspeed = 162712.482 / ((abs(Xdistance) / totalDistance) * feed);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	bfb8      	it	lt
 8001ab2:	425b      	neglt	r3, r3
 8001ab4:	ee07 3a90 	vmov	s15, r3
 8001ab8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001abc:	edd7 7a03 	vldr	s15, [r7, #12]
 8001ac0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001ac4:	4b38      	ldr	r3, [pc, #224]	@ (8001ba8 <laserEngrave+0x148>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	ee07 3a90 	vmov	s15, r3
 8001acc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ad0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ad4:	ee17 0a90 	vmov	r0, s15
 8001ad8:	f7fe fd46 	bl	8000568 <__aeabi_f2d>
 8001adc:	4602      	mov	r2, r0
 8001ade:	460b      	mov	r3, r1
 8001ae0:	a12f      	add	r1, pc, #188	@ (adr r1, 8001ba0 <laserEngrave+0x140>)
 8001ae2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001ae6:	f7fe fec1 	bl	800086c <__aeabi_ddiv>
 8001aea:	4602      	mov	r2, r0
 8001aec:	460b      	mov	r3, r1
 8001aee:	4610      	mov	r0, r2
 8001af0:	4619      	mov	r1, r3
 8001af2:	f7ff f841 	bl	8000b78 <__aeabi_d2iz>
 8001af6:	4603      	mov	r3, r0
 8001af8:	617b      	str	r3, [r7, #20]
	}
	if (Ydistance != 0)
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d026      	beq.n	8001b4e <laserEngrave+0xee>
	{
		Yspeed = 162712.482 / ((abs(Ydistance) / totalDistance) * feed);
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	bfb8      	it	lt
 8001b06:	425b      	neglt	r3, r3
 8001b08:	ee07 3a90 	vmov	s15, r3
 8001b0c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001b10:	edd7 7a03 	vldr	s15, [r7, #12]
 8001b14:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001b18:	4b23      	ldr	r3, [pc, #140]	@ (8001ba8 <laserEngrave+0x148>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	ee07 3a90 	vmov	s15, r3
 8001b20:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b28:	ee17 0a90 	vmov	r0, s15
 8001b2c:	f7fe fd1c 	bl	8000568 <__aeabi_f2d>
 8001b30:	4602      	mov	r2, r0
 8001b32:	460b      	mov	r3, r1
 8001b34:	a11a      	add	r1, pc, #104	@ (adr r1, 8001ba0 <laserEngrave+0x140>)
 8001b36:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001b3a:	f7fe fe97 	bl	800086c <__aeabi_ddiv>
 8001b3e:	4602      	mov	r2, r0
 8001b40:	460b      	mov	r3, r1
 8001b42:	4610      	mov	r0, r2
 8001b44:	4619      	mov	r1, r3
 8001b46:	f7ff f817 	bl	8000b78 <__aeabi_d2iz>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	613b      	str	r3, [r7, #16]
	}

	__HAL_TIM_SET_PRESCALER(&htim16, Xspeed);
 8001b4e:	4b17      	ldr	r3, [pc, #92]	@ (8001bac <laserEngrave+0x14c>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	697a      	ldr	r2, [r7, #20]
 8001b54:	629a      	str	r2, [r3, #40]	@ 0x28
	__HAL_TIM_SET_PRESCALER(&htim17, Yspeed);
 8001b56:	4b16      	ldr	r3, [pc, #88]	@ (8001bb0 <laserEngrave+0x150>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	693a      	ldr	r2, [r7, #16]
 8001b5c:	629a      	str	r2, [r3, #40]	@ 0x28

	// Starts the motor timers
	  HAL_TIM_Base_Start_IT(&htim16);
 8001b5e:	4813      	ldr	r0, [pc, #76]	@ (8001bac <laserEngrave+0x14c>)
 8001b60:	f003 f884 	bl	8004c6c <HAL_TIM_Base_Start_IT>
	  HAL_TIM_Base_Start_IT(&htim17);
 8001b64:	4812      	ldr	r0, [pc, #72]	@ (8001bb0 <laserEngrave+0x150>)
 8001b66:	f003 f881 	bl	8004c6c <HAL_TIM_Base_Start_IT>

      // this is where I will start the pwm
	  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1); // start PWM on Timer2’s Channel 1
 8001b6a:	2100      	movs	r1, #0
 8001b6c:	4811      	ldr	r0, [pc, #68]	@ (8001bb4 <laserEngrave+0x154>)
 8001b6e:	f003 f973 	bl	8004e58 <HAL_TIM_PWM_Start>

	  while(((Xcurrent == Xend) && (Ycurrent == Yend)) == 0){}	// Waits for the motors to be done before proceeding
 8001b72:	bf00      	nop
 8001b74:	4b10      	ldr	r3, [pc, #64]	@ (8001bb8 <laserEngrave+0x158>)
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	4b10      	ldr	r3, [pc, #64]	@ (8001bbc <laserEngrave+0x15c>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	d107      	bne.n	8001b90 <laserEngrave+0x130>
 8001b80:	4b0f      	ldr	r3, [pc, #60]	@ (8001bc0 <laserEngrave+0x160>)
 8001b82:	681a      	ldr	r2, [r3, #0]
 8001b84:	4b0f      	ldr	r3, [pc, #60]	@ (8001bc4 <laserEngrave+0x164>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	429a      	cmp	r2, r3
 8001b8a:	d101      	bne.n	8001b90 <laserEngrave+0x130>
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	e000      	b.n	8001b92 <laserEngrave+0x132>
 8001b90:	2300      	movs	r3, #0
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d0ee      	beq.n	8001b74 <laserEngrave+0x114>
}
 8001b96:	bf00      	nop
 8001b98:	bf00      	nop
 8001b9a:	3718      	adds	r7, #24
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	db22d0e5 	.word	0xdb22d0e5
 8001ba4:	4103dcc3 	.word	0x4103dcc3
 8001ba8:	20000404 	.word	0x20000404
 8001bac:	200002d4 	.word	0x200002d4
 8001bb0:	20000320 	.word	0x20000320
 8001bb4:	20000288 	.word	0x20000288
 8001bb8:	200003f4 	.word	0x200003f4
 8001bbc:	200003fc 	.word	0x200003fc
 8001bc0:	200003f8 	.word	0x200003f8
 8001bc4:	20000400 	.word	0x20000400

08001bc8 <__io_putchar>:

PUTCHAR_PROTOTYPE
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b082      	sub	sp, #8
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *) &ch, 1, 0xFFFF);
 8001bd0:	1d39      	adds	r1, r7, #4
 8001bd2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	4803      	ldr	r0, [pc, #12]	@ (8001be8 <__io_putchar+0x20>)
 8001bda:	f004 f91d 	bl	8005e18 <HAL_UART_Transmit>
	return ch;
 8001bde:	687b      	ldr	r3, [r7, #4]
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	3708      	adds	r7, #8
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	2000036c 	.word	0x2000036c

08001bec <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b082      	sub	sp, #8
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

	if (htim == &htim16)	// X motor timer
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	4a30      	ldr	r2, [pc, #192]	@ (8001cb8 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d127      	bne.n	8001c4c <HAL_TIM_PeriodElapsedCallback+0x60>
	{

		if (Xcurrent != Xend)	// Evaluates if the X motor has arrived in it's position
 8001bfc:	4b2f      	ldr	r3, [pc, #188]	@ (8001cbc <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	4b2f      	ldr	r3, [pc, #188]	@ (8001cc0 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	429a      	cmp	r2, r3
 8001c06:	d01e      	beq.n	8001c46 <HAL_TIM_PeriodElapsedCallback+0x5a>
		{

			HAL_GPIO_TogglePin(XPUL_GPIO_Port, XPUL_Pin);	// Toggles the XPUL pin
 8001c08:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001c0c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c10:	f000 feb4 	bl	800297c <HAL_GPIO_TogglePin>

			// Increments the Xcurrent value if XDIR is positive and decrements if Xcurrent value is negative
			// only increments every other cycle
			if (!HAL_GPIO_ReadPin(XPUL_GPIO_Port, XPUL_Pin))
 8001c14:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001c18:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c1c:	f000 fe7e 	bl	800291c <HAL_GPIO_ReadPin>
 8001c20:	4603      	mov	r3, r0
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d112      	bne.n	8001c4c <HAL_TIM_PeriodElapsedCallback+0x60>
			{
				if (XDIR == 1)
 8001c26:	4b27      	ldr	r3, [pc, #156]	@ (8001cc4 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	2b01      	cmp	r3, #1
 8001c2c:	d105      	bne.n	8001c3a <HAL_TIM_PeriodElapsedCallback+0x4e>
				{
					Xcurrent++;
 8001c2e:	4b23      	ldr	r3, [pc, #140]	@ (8001cbc <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	3301      	adds	r3, #1
 8001c34:	4a21      	ldr	r2, [pc, #132]	@ (8001cbc <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8001c36:	6013      	str	r3, [r2, #0]
 8001c38:	e008      	b.n	8001c4c <HAL_TIM_PeriodElapsedCallback+0x60>
				}
				else
				{
					Xcurrent--;
 8001c3a:	4b20      	ldr	r3, [pc, #128]	@ (8001cbc <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	3b01      	subs	r3, #1
 8001c40:	4a1e      	ldr	r2, [pc, #120]	@ (8001cbc <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8001c42:	6013      	str	r3, [r2, #0]
 8001c44:	e002      	b.n	8001c4c <HAL_TIM_PeriodElapsedCallback+0x60>
				}
			}
		}
		else
		{
			HAL_TIM_Base_Stop_IT(&htim16);	// Once the X motor arrives to it's final position, this stops the timer
 8001c46:	481c      	ldr	r0, [pc, #112]	@ (8001cb8 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001c48:	f003 f880 	bl	8004d4c <HAL_TIM_Base_Stop_IT>
		}
	}

	if (htim == &htim17)	// Y motor timer
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	4a1e      	ldr	r2, [pc, #120]	@ (8001cc8 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d125      	bne.n	8001ca0 <HAL_TIM_PeriodElapsedCallback+0xb4>
	{

		if (Ycurrent != Yend)	// Evaluates if the Y motor has arrived in it's position
 8001c54:	4b1d      	ldr	r3, [pc, #116]	@ (8001ccc <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	4b1d      	ldr	r3, [pc, #116]	@ (8001cd0 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	429a      	cmp	r2, r3
 8001c5e:	d01c      	beq.n	8001c9a <HAL_TIM_PeriodElapsedCallback+0xae>
		{

			HAL_GPIO_TogglePin(YPUL_GPIO_Port, YPUL_Pin);	// Toggles the YPUL pin
 8001c60:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001c64:	481b      	ldr	r0, [pc, #108]	@ (8001cd4 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8001c66:	f000 fe89 	bl	800297c <HAL_GPIO_TogglePin>

			// Increments the Ycurrent value if YDIR is positive and decrements if Ycurrent value is negative
			if (!HAL_GPIO_ReadPin(YPUL_GPIO_Port, YPUL_Pin))
 8001c6a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001c6e:	4819      	ldr	r0, [pc, #100]	@ (8001cd4 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8001c70:	f000 fe54 	bl	800291c <HAL_GPIO_ReadPin>
 8001c74:	4603      	mov	r3, r0
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d112      	bne.n	8001ca0 <HAL_TIM_PeriodElapsedCallback+0xb4>
			{
				if (YDIR == 1)
 8001c7a:	4b17      	ldr	r3, [pc, #92]	@ (8001cd8 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	2b01      	cmp	r3, #1
 8001c80:	d105      	bne.n	8001c8e <HAL_TIM_PeriodElapsedCallback+0xa2>
				{
					Ycurrent++;
 8001c82:	4b12      	ldr	r3, [pc, #72]	@ (8001ccc <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	3301      	adds	r3, #1
 8001c88:	4a10      	ldr	r2, [pc, #64]	@ (8001ccc <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001c8a:	6013      	str	r3, [r2, #0]
 8001c8c:	e008      	b.n	8001ca0 <HAL_TIM_PeriodElapsedCallback+0xb4>
				}
				else
				{
					Ycurrent--;
 8001c8e:	4b0f      	ldr	r3, [pc, #60]	@ (8001ccc <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	3b01      	subs	r3, #1
 8001c94:	4a0d      	ldr	r2, [pc, #52]	@ (8001ccc <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001c96:	6013      	str	r3, [r2, #0]
 8001c98:	e002      	b.n	8001ca0 <HAL_TIM_PeriodElapsedCallback+0xb4>
				}
			}
		}
		else
		{
		  HAL_TIM_Base_Stop_IT(&htim17);	// Once the Y motor arrives to it's final position, this stops the timer
 8001c9a:	480b      	ldr	r0, [pc, #44]	@ (8001cc8 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8001c9c:	f003 f856 	bl	8004d4c <HAL_TIM_Base_Stop_IT>
		}
	}
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a0d      	ldr	r2, [pc, #52]	@ (8001cdc <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d101      	bne.n	8001cae <HAL_TIM_PeriodElapsedCallback+0xc2>
    HAL_IncTick();
 8001caa:	f000 fb67 	bl	800237c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  /* USER CODE END Callback 1 */
}
 8001cae:	bf00      	nop
 8001cb0:	3708      	adds	r7, #8
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	200002d4 	.word	0x200002d4
 8001cbc:	200003f4 	.word	0x200003f4
 8001cc0:	200003fc 	.word	0x200003fc
 8001cc4:	20000000 	.word	0x20000000
 8001cc8:	20000320 	.word	0x20000320
 8001ccc:	200003f8 	.word	0x200003f8
 8001cd0:	20000400 	.word	0x20000400
 8001cd4:	48000400 	.word	0x48000400
 8001cd8:	20000004 	.word	0x20000004
 8001cdc:	40000400 	.word	0x40000400

08001ce0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ce4:	b672      	cpsid	i
}
 8001ce6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ce8:	bf00      	nop
 8001cea:	e7fd      	b.n	8001ce8 <Error_Handler+0x8>

08001cec <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b083      	sub	sp, #12
 8001cf0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cf2:	4b0f      	ldr	r3, [pc, #60]	@ (8001d30 <HAL_MspInit+0x44>)
 8001cf4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001cf6:	4a0e      	ldr	r2, [pc, #56]	@ (8001d30 <HAL_MspInit+0x44>)
 8001cf8:	f043 0301 	orr.w	r3, r3, #1
 8001cfc:	6613      	str	r3, [r2, #96]	@ 0x60
 8001cfe:	4b0c      	ldr	r3, [pc, #48]	@ (8001d30 <HAL_MspInit+0x44>)
 8001d00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d02:	f003 0301 	and.w	r3, r3, #1
 8001d06:	607b      	str	r3, [r7, #4]
 8001d08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d0a:	4b09      	ldr	r3, [pc, #36]	@ (8001d30 <HAL_MspInit+0x44>)
 8001d0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d0e:	4a08      	ldr	r2, [pc, #32]	@ (8001d30 <HAL_MspInit+0x44>)
 8001d10:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d14:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d16:	4b06      	ldr	r3, [pc, #24]	@ (8001d30 <HAL_MspInit+0x44>)
 8001d18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d1e:	603b      	str	r3, [r7, #0]
 8001d20:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d22:	bf00      	nop
 8001d24:	370c      	adds	r7, #12
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr
 8001d2e:	bf00      	nop
 8001d30:	40021000 	.word	0x40021000

08001d34 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b08a      	sub	sp, #40	@ 0x28
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d3c:	f107 0314 	add.w	r3, r7, #20
 8001d40:	2200      	movs	r2, #0
 8001d42:	601a      	str	r2, [r3, #0]
 8001d44:	605a      	str	r2, [r3, #4]
 8001d46:	609a      	str	r2, [r3, #8]
 8001d48:	60da      	str	r2, [r3, #12]
 8001d4a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a17      	ldr	r2, [pc, #92]	@ (8001db0 <HAL_SPI_MspInit+0x7c>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d128      	bne.n	8001da8 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001d56:	4b17      	ldr	r3, [pc, #92]	@ (8001db4 <HAL_SPI_MspInit+0x80>)
 8001d58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d5a:	4a16      	ldr	r2, [pc, #88]	@ (8001db4 <HAL_SPI_MspInit+0x80>)
 8001d5c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001d60:	6613      	str	r3, [r2, #96]	@ 0x60
 8001d62:	4b14      	ldr	r3, [pc, #80]	@ (8001db4 <HAL_SPI_MspInit+0x80>)
 8001d64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d66:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001d6a:	613b      	str	r3, [r7, #16]
 8001d6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d6e:	4b11      	ldr	r3, [pc, #68]	@ (8001db4 <HAL_SPI_MspInit+0x80>)
 8001d70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d72:	4a10      	ldr	r2, [pc, #64]	@ (8001db4 <HAL_SPI_MspInit+0x80>)
 8001d74:	f043 0301 	orr.w	r3, r3, #1
 8001d78:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d7a:	4b0e      	ldr	r3, [pc, #56]	@ (8001db4 <HAL_SPI_MspInit+0x80>)
 8001d7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d7e:	f003 0301 	and.w	r3, r3, #1
 8001d82:	60fb      	str	r3, [r7, #12]
 8001d84:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001d86:	23e0      	movs	r3, #224	@ 0xe0
 8001d88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d8a:	2302      	movs	r3, #2
 8001d8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d92:	2303      	movs	r3, #3
 8001d94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001d96:	2305      	movs	r3, #5
 8001d98:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d9a:	f107 0314 	add.w	r3, r7, #20
 8001d9e:	4619      	mov	r1, r3
 8001da0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001da4:	f000 fc10 	bl	80025c8 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001da8:	bf00      	nop
 8001daa:	3728      	adds	r7, #40	@ 0x28
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}
 8001db0:	40013000 	.word	0x40013000
 8001db4:	40021000 	.word	0x40021000

08001db8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b085      	sub	sp, #20
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001dc8:	d10b      	bne.n	8001de2 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001dca:	4b09      	ldr	r3, [pc, #36]	@ (8001df0 <HAL_TIM_PWM_MspInit+0x38>)
 8001dcc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dce:	4a08      	ldr	r2, [pc, #32]	@ (8001df0 <HAL_TIM_PWM_MspInit+0x38>)
 8001dd0:	f043 0301 	orr.w	r3, r3, #1
 8001dd4:	6593      	str	r3, [r2, #88]	@ 0x58
 8001dd6:	4b06      	ldr	r3, [pc, #24]	@ (8001df0 <HAL_TIM_PWM_MspInit+0x38>)
 8001dd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dda:	f003 0301 	and.w	r3, r3, #1
 8001dde:	60fb      	str	r3, [r7, #12]
 8001de0:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001de2:	bf00      	nop
 8001de4:	3714      	adds	r7, #20
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr
 8001dee:	bf00      	nop
 8001df0:	40021000 	.word	0x40021000

08001df4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b084      	sub	sp, #16
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a1a      	ldr	r2, [pc, #104]	@ (8001e6c <HAL_TIM_Base_MspInit+0x78>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d114      	bne.n	8001e30 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001e06:	4b1a      	ldr	r3, [pc, #104]	@ (8001e70 <HAL_TIM_Base_MspInit+0x7c>)
 8001e08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e0a:	4a19      	ldr	r2, [pc, #100]	@ (8001e70 <HAL_TIM_Base_MspInit+0x7c>)
 8001e0c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e10:	6613      	str	r3, [r2, #96]	@ 0x60
 8001e12:	4b17      	ldr	r3, [pc, #92]	@ (8001e70 <HAL_TIM_Base_MspInit+0x7c>)
 8001e14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e1a:	60fb      	str	r3, [r7, #12]
 8001e1c:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001e1e:	2200      	movs	r2, #0
 8001e20:	2100      	movs	r1, #0
 8001e22:	2019      	movs	r0, #25
 8001e24:	f000 fba6 	bl	8002574 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001e28:	2019      	movs	r0, #25
 8001e2a:	f000 fbbf 	bl	80025ac <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8001e2e:	e018      	b.n	8001e62 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM17)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a0f      	ldr	r2, [pc, #60]	@ (8001e74 <HAL_TIM_Base_MspInit+0x80>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d113      	bne.n	8001e62 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8001e3a:	4b0d      	ldr	r3, [pc, #52]	@ (8001e70 <HAL_TIM_Base_MspInit+0x7c>)
 8001e3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e3e:	4a0c      	ldr	r2, [pc, #48]	@ (8001e70 <HAL_TIM_Base_MspInit+0x7c>)
 8001e40:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001e44:	6613      	str	r3, [r2, #96]	@ 0x60
 8001e46:	4b0a      	ldr	r3, [pc, #40]	@ (8001e70 <HAL_TIM_Base_MspInit+0x7c>)
 8001e48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e4a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001e4e:	60bb      	str	r3, [r7, #8]
 8001e50:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8001e52:	2200      	movs	r2, #0
 8001e54:	2100      	movs	r1, #0
 8001e56:	201a      	movs	r0, #26
 8001e58:	f000 fb8c 	bl	8002574 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8001e5c:	201a      	movs	r0, #26
 8001e5e:	f000 fba5 	bl	80025ac <HAL_NVIC_EnableIRQ>
}
 8001e62:	bf00      	nop
 8001e64:	3710      	adds	r7, #16
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	40014400 	.word	0x40014400
 8001e70:	40021000 	.word	0x40021000
 8001e74:	40014800 	.word	0x40014800

08001e78 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b088      	sub	sp, #32
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e80:	f107 030c 	add.w	r3, r7, #12
 8001e84:	2200      	movs	r2, #0
 8001e86:	601a      	str	r2, [r3, #0]
 8001e88:	605a      	str	r2, [r3, #4]
 8001e8a:	609a      	str	r2, [r3, #8]
 8001e8c:	60da      	str	r2, [r3, #12]
 8001e8e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e98:	d11c      	bne.n	8001ed4 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e9a:	4b10      	ldr	r3, [pc, #64]	@ (8001edc <HAL_TIM_MspPostInit+0x64>)
 8001e9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e9e:	4a0f      	ldr	r2, [pc, #60]	@ (8001edc <HAL_TIM_MspPostInit+0x64>)
 8001ea0:	f043 0301 	orr.w	r3, r3, #1
 8001ea4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ea6:	4b0d      	ldr	r3, [pc, #52]	@ (8001edc <HAL_TIM_MspPostInit+0x64>)
 8001ea8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001eaa:	f003 0301 	and.w	r3, r3, #1
 8001eae:	60bb      	str	r3, [r7, #8]
 8001eb0:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eb6:	2302      	movs	r3, #2
 8001eb8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ec6:	f107 030c 	add.w	r3, r7, #12
 8001eca:	4619      	mov	r1, r3
 8001ecc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ed0:	f000 fb7a 	bl	80025c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001ed4:	bf00      	nop
 8001ed6:	3720      	adds	r7, #32
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}
 8001edc:	40021000 	.word	0x40021000

08001ee0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b0ac      	sub	sp, #176	@ 0xb0
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ee8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001eec:	2200      	movs	r2, #0
 8001eee:	601a      	str	r2, [r3, #0]
 8001ef0:	605a      	str	r2, [r3, #4]
 8001ef2:	609a      	str	r2, [r3, #8]
 8001ef4:	60da      	str	r2, [r3, #12]
 8001ef6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ef8:	f107 0314 	add.w	r3, r7, #20
 8001efc:	2288      	movs	r2, #136	@ 0x88
 8001efe:	2100      	movs	r1, #0
 8001f00:	4618      	mov	r0, r3
 8001f02:	f008 fbc3 	bl	800a68c <memset>
  if(huart->Instance==USART2)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a21      	ldr	r2, [pc, #132]	@ (8001f90 <HAL_UART_MspInit+0xb0>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d13b      	bne.n	8001f88 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001f10:	2302      	movs	r3, #2
 8001f12:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001f14:	2300      	movs	r3, #0
 8001f16:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f18:	f107 0314 	add.w	r3, r7, #20
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f001 fbf5 	bl	800370c <HAL_RCCEx_PeriphCLKConfig>
 8001f22:	4603      	mov	r3, r0
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d001      	beq.n	8001f2c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001f28:	f7ff feda 	bl	8001ce0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f2c:	4b19      	ldr	r3, [pc, #100]	@ (8001f94 <HAL_UART_MspInit+0xb4>)
 8001f2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f30:	4a18      	ldr	r2, [pc, #96]	@ (8001f94 <HAL_UART_MspInit+0xb4>)
 8001f32:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f36:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f38:	4b16      	ldr	r3, [pc, #88]	@ (8001f94 <HAL_UART_MspInit+0xb4>)
 8001f3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f3c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f40:	613b      	str	r3, [r7, #16]
 8001f42:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f44:	4b13      	ldr	r3, [pc, #76]	@ (8001f94 <HAL_UART_MspInit+0xb4>)
 8001f46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f48:	4a12      	ldr	r2, [pc, #72]	@ (8001f94 <HAL_UART_MspInit+0xb4>)
 8001f4a:	f043 0301 	orr.w	r3, r3, #1
 8001f4e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f50:	4b10      	ldr	r3, [pc, #64]	@ (8001f94 <HAL_UART_MspInit+0xb4>)
 8001f52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f54:	f003 0301 	and.w	r3, r3, #1
 8001f58:	60fb      	str	r3, [r7, #12]
 8001f5a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001f5c:	230c      	movs	r3, #12
 8001f5e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f62:	2302      	movs	r3, #2
 8001f64:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f6e:	2303      	movs	r3, #3
 8001f70:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f74:	2307      	movs	r3, #7
 8001f76:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f7a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001f7e:	4619      	mov	r1, r3
 8001f80:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f84:	f000 fb20 	bl	80025c8 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001f88:	bf00      	nop
 8001f8a:	37b0      	adds	r7, #176	@ 0xb0
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}
 8001f90:	40004400 	.word	0x40004400
 8001f94:	40021000 	.word	0x40021000

08001f98 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b08e      	sub	sp, #56	@ 0x38
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8001fa6:	4b34      	ldr	r3, [pc, #208]	@ (8002078 <HAL_InitTick+0xe0>)
 8001fa8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001faa:	4a33      	ldr	r2, [pc, #204]	@ (8002078 <HAL_InitTick+0xe0>)
 8001fac:	f043 0302 	orr.w	r3, r3, #2
 8001fb0:	6593      	str	r3, [r2, #88]	@ 0x58
 8001fb2:	4b31      	ldr	r3, [pc, #196]	@ (8002078 <HAL_InitTick+0xe0>)
 8001fb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fb6:	f003 0302 	and.w	r3, r3, #2
 8001fba:	60fb      	str	r3, [r7, #12]
 8001fbc:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001fbe:	f107 0210 	add.w	r2, r7, #16
 8001fc2:	f107 0314 	add.w	r3, r7, #20
 8001fc6:	4611      	mov	r1, r2
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f001 fb0d 	bl	80035e8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001fce:	6a3b      	ldr	r3, [r7, #32]
 8001fd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001fd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d103      	bne.n	8001fe0 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001fd8:	f001 fada 	bl	8003590 <HAL_RCC_GetPCLK1Freq>
 8001fdc:	6378      	str	r0, [r7, #52]	@ 0x34
 8001fde:	e004      	b.n	8001fea <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001fe0:	f001 fad6 	bl	8003590 <HAL_RCC_GetPCLK1Freq>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	005b      	lsls	r3, r3, #1
 8001fe8:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001fea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001fec:	4a23      	ldr	r2, [pc, #140]	@ (800207c <HAL_InitTick+0xe4>)
 8001fee:	fba2 2303 	umull	r2, r3, r2, r3
 8001ff2:	0c9b      	lsrs	r3, r3, #18
 8001ff4:	3b01      	subs	r3, #1
 8001ff6:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8001ff8:	4b21      	ldr	r3, [pc, #132]	@ (8002080 <HAL_InitTick+0xe8>)
 8001ffa:	4a22      	ldr	r2, [pc, #136]	@ (8002084 <HAL_InitTick+0xec>)
 8001ffc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 8001ffe:	4b20      	ldr	r3, [pc, #128]	@ (8002080 <HAL_InitTick+0xe8>)
 8002000:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002004:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 8002006:	4a1e      	ldr	r2, [pc, #120]	@ (8002080 <HAL_InitTick+0xe8>)
 8002008:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800200a:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 800200c:	4b1c      	ldr	r3, [pc, #112]	@ (8002080 <HAL_InitTick+0xe8>)
 800200e:	2200      	movs	r2, #0
 8002010:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002012:	4b1b      	ldr	r3, [pc, #108]	@ (8002080 <HAL_InitTick+0xe8>)
 8002014:	2200      	movs	r2, #0
 8002016:	609a      	str	r2, [r3, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002018:	4b19      	ldr	r3, [pc, #100]	@ (8002080 <HAL_InitTick+0xe8>)
 800201a:	2200      	movs	r2, #0
 800201c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim3);
 800201e:	4818      	ldr	r0, [pc, #96]	@ (8002080 <HAL_InitTick+0xe8>)
 8002020:	f002 fdcc 	bl	8004bbc <HAL_TIM_Base_Init>
 8002024:	4603      	mov	r3, r0
 8002026:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 800202a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800202e:	2b00      	cmp	r3, #0
 8002030:	d11b      	bne.n	800206a <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim3);
 8002032:	4813      	ldr	r0, [pc, #76]	@ (8002080 <HAL_InitTick+0xe8>)
 8002034:	f002 fe1a 	bl	8004c6c <HAL_TIM_Base_Start_IT>
 8002038:	4603      	mov	r3, r0
 800203a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 800203e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002042:	2b00      	cmp	r3, #0
 8002044:	d111      	bne.n	800206a <HAL_InitTick+0xd2>
    {
    /* Enable the TIM3 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002046:	201d      	movs	r0, #29
 8002048:	f000 fab0 	bl	80025ac <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2b0f      	cmp	r3, #15
 8002050:	d808      	bhi.n	8002064 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority, 0U);
 8002052:	2200      	movs	r2, #0
 8002054:	6879      	ldr	r1, [r7, #4]
 8002056:	201d      	movs	r0, #29
 8002058:	f000 fa8c 	bl	8002574 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800205c:	4a0a      	ldr	r2, [pc, #40]	@ (8002088 <HAL_InitTick+0xf0>)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6013      	str	r3, [r2, #0]
 8002062:	e002      	b.n	800206a <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8002064:	2301      	movs	r3, #1
 8002066:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800206a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 800206e:	4618      	mov	r0, r3
 8002070:	3738      	adds	r7, #56	@ 0x38
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	40021000 	.word	0x40021000
 800207c:	431bde83 	.word	0x431bde83
 8002080:	20000508 	.word	0x20000508
 8002084:	40000400 	.word	0x40000400
 8002088:	2000000c 	.word	0x2000000c

0800208c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800208c:	b480      	push	{r7}
 800208e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002090:	bf00      	nop
 8002092:	e7fd      	b.n	8002090 <NMI_Handler+0x4>

08002094 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002094:	b480      	push	{r7}
 8002096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002098:	bf00      	nop
 800209a:	e7fd      	b.n	8002098 <HardFault_Handler+0x4>

0800209c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800209c:	b480      	push	{r7}
 800209e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020a0:	bf00      	nop
 80020a2:	e7fd      	b.n	80020a0 <MemManage_Handler+0x4>

080020a4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020a4:	b480      	push	{r7}
 80020a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020a8:	bf00      	nop
 80020aa:	e7fd      	b.n	80020a8 <BusFault_Handler+0x4>

080020ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020ac:	b480      	push	{r7}
 80020ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020b0:	bf00      	nop
 80020b2:	e7fd      	b.n	80020b0 <UsageFault_Handler+0x4>

080020b4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020b4:	b480      	push	{r7}
 80020b6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020b8:	bf00      	nop
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr

080020c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020c2:	b480      	push	{r7}
 80020c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020c6:	bf00      	nop
 80020c8:	46bd      	mov	sp, r7
 80020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ce:	4770      	bx	lr

080020d0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020d0:	b480      	push	{r7}
 80020d2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020d4:	bf00      	nop
 80020d6:	46bd      	mov	sp, r7
 80020d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020dc:	4770      	bx	lr

080020de <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020de:	b480      	push	{r7}
 80020e0:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020e2:	bf00      	nop
 80020e4:	46bd      	mov	sp, r7
 80020e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ea:	4770      	bx	lr

080020ec <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80020f0:	4802      	ldr	r0, [pc, #8]	@ (80020fc <TIM1_UP_TIM16_IRQHandler+0x10>)
 80020f2:	f002 ffb7 	bl	8005064 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80020f6:	bf00      	nop
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	200002d4 	.word	0x200002d4

08002100 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8002104:	4802      	ldr	r0, [pc, #8]	@ (8002110 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8002106:	f002 ffad 	bl	8005064 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 800210a:	bf00      	nop
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	20000320 	.word	0x20000320

08002114 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002118:	4802      	ldr	r0, [pc, #8]	@ (8002124 <TIM3_IRQHandler+0x10>)
 800211a:	f002 ffa3 	bl	8005064 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800211e:	bf00      	nop
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	20000508 	.word	0x20000508

08002128 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800212c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002130:	f000 fc3e 	bl	80029b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002134:	bf00      	nop
 8002136:	bd80      	pop	{r7, pc}

08002138 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002138:	b480      	push	{r7}
 800213a:	af00      	add	r7, sp, #0
  return 1;
 800213c:	2301      	movs	r3, #1
}
 800213e:	4618      	mov	r0, r3
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr

08002148 <_kill>:

int _kill(int pid, int sig)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b082      	sub	sp, #8
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
 8002150:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002152:	f008 fb0f 	bl	800a774 <__errno>
 8002156:	4603      	mov	r3, r0
 8002158:	2216      	movs	r2, #22
 800215a:	601a      	str	r2, [r3, #0]
  return -1;
 800215c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002160:	4618      	mov	r0, r3
 8002162:	3708      	adds	r7, #8
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}

08002168 <_exit>:

void _exit (int status)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b082      	sub	sp, #8
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002170:	f04f 31ff 	mov.w	r1, #4294967295
 8002174:	6878      	ldr	r0, [r7, #4]
 8002176:	f7ff ffe7 	bl	8002148 <_kill>
  while (1) {}    /* Make sure we hang here */
 800217a:	bf00      	nop
 800217c:	e7fd      	b.n	800217a <_exit+0x12>

0800217e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800217e:	b580      	push	{r7, lr}
 8002180:	b086      	sub	sp, #24
 8002182:	af00      	add	r7, sp, #0
 8002184:	60f8      	str	r0, [r7, #12]
 8002186:	60b9      	str	r1, [r7, #8]
 8002188:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800218a:	2300      	movs	r3, #0
 800218c:	617b      	str	r3, [r7, #20]
 800218e:	e00a      	b.n	80021a6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002190:	f3af 8000 	nop.w
 8002194:	4601      	mov	r1, r0
 8002196:	68bb      	ldr	r3, [r7, #8]
 8002198:	1c5a      	adds	r2, r3, #1
 800219a:	60ba      	str	r2, [r7, #8]
 800219c:	b2ca      	uxtb	r2, r1
 800219e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	3301      	adds	r3, #1
 80021a4:	617b      	str	r3, [r7, #20]
 80021a6:	697a      	ldr	r2, [r7, #20]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	429a      	cmp	r2, r3
 80021ac:	dbf0      	blt.n	8002190 <_read+0x12>
  }

  return len;
 80021ae:	687b      	ldr	r3, [r7, #4]
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	3718      	adds	r7, #24
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}

080021b8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b086      	sub	sp, #24
 80021bc:	af00      	add	r7, sp, #0
 80021be:	60f8      	str	r0, [r7, #12]
 80021c0:	60b9      	str	r1, [r7, #8]
 80021c2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021c4:	2300      	movs	r3, #0
 80021c6:	617b      	str	r3, [r7, #20]
 80021c8:	e009      	b.n	80021de <_write+0x26>
  {
    __io_putchar(*ptr++);
 80021ca:	68bb      	ldr	r3, [r7, #8]
 80021cc:	1c5a      	adds	r2, r3, #1
 80021ce:	60ba      	str	r2, [r7, #8]
 80021d0:	781b      	ldrb	r3, [r3, #0]
 80021d2:	4618      	mov	r0, r3
 80021d4:	f7ff fcf8 	bl	8001bc8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	3301      	adds	r3, #1
 80021dc:	617b      	str	r3, [r7, #20]
 80021de:	697a      	ldr	r2, [r7, #20]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	429a      	cmp	r2, r3
 80021e4:	dbf1      	blt.n	80021ca <_write+0x12>
  }
  return len;
 80021e6:	687b      	ldr	r3, [r7, #4]
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	3718      	adds	r7, #24
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}

080021f0 <_close>:

int _close(int file)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b083      	sub	sp, #12
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80021f8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	370c      	adds	r7, #12
 8002200:	46bd      	mov	sp, r7
 8002202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002206:	4770      	bx	lr

08002208 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002208:	b480      	push	{r7}
 800220a:	b083      	sub	sp, #12
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
 8002210:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002218:	605a      	str	r2, [r3, #4]
  return 0;
 800221a:	2300      	movs	r3, #0
}
 800221c:	4618      	mov	r0, r3
 800221e:	370c      	adds	r7, #12
 8002220:	46bd      	mov	sp, r7
 8002222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002226:	4770      	bx	lr

08002228 <_isatty>:

int _isatty(int file)
{
 8002228:	b480      	push	{r7}
 800222a:	b083      	sub	sp, #12
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002230:	2301      	movs	r3, #1
}
 8002232:	4618      	mov	r0, r3
 8002234:	370c      	adds	r7, #12
 8002236:	46bd      	mov	sp, r7
 8002238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223c:	4770      	bx	lr

0800223e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800223e:	b480      	push	{r7}
 8002240:	b085      	sub	sp, #20
 8002242:	af00      	add	r7, sp, #0
 8002244:	60f8      	str	r0, [r7, #12]
 8002246:	60b9      	str	r1, [r7, #8]
 8002248:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800224a:	2300      	movs	r3, #0
}
 800224c:	4618      	mov	r0, r3
 800224e:	3714      	adds	r7, #20
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr

08002258 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b086      	sub	sp, #24
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002260:	4a14      	ldr	r2, [pc, #80]	@ (80022b4 <_sbrk+0x5c>)
 8002262:	4b15      	ldr	r3, [pc, #84]	@ (80022b8 <_sbrk+0x60>)
 8002264:	1ad3      	subs	r3, r2, r3
 8002266:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800226c:	4b13      	ldr	r3, [pc, #76]	@ (80022bc <_sbrk+0x64>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d102      	bne.n	800227a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002274:	4b11      	ldr	r3, [pc, #68]	@ (80022bc <_sbrk+0x64>)
 8002276:	4a12      	ldr	r2, [pc, #72]	@ (80022c0 <_sbrk+0x68>)
 8002278:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800227a:	4b10      	ldr	r3, [pc, #64]	@ (80022bc <_sbrk+0x64>)
 800227c:	681a      	ldr	r2, [r3, #0]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	4413      	add	r3, r2
 8002282:	693a      	ldr	r2, [r7, #16]
 8002284:	429a      	cmp	r2, r3
 8002286:	d207      	bcs.n	8002298 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002288:	f008 fa74 	bl	800a774 <__errno>
 800228c:	4603      	mov	r3, r0
 800228e:	220c      	movs	r2, #12
 8002290:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002292:	f04f 33ff 	mov.w	r3, #4294967295
 8002296:	e009      	b.n	80022ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002298:	4b08      	ldr	r3, [pc, #32]	@ (80022bc <_sbrk+0x64>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800229e:	4b07      	ldr	r3, [pc, #28]	@ (80022bc <_sbrk+0x64>)
 80022a0:	681a      	ldr	r2, [r3, #0]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	4413      	add	r3, r2
 80022a6:	4a05      	ldr	r2, [pc, #20]	@ (80022bc <_sbrk+0x64>)
 80022a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80022aa:	68fb      	ldr	r3, [r7, #12]
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	3718      	adds	r7, #24
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}
 80022b4:	20018000 	.word	0x20018000
 80022b8:	00000400 	.word	0x00000400
 80022bc:	20000554 	.word	0x20000554
 80022c0:	200006f0 	.word	0x200006f0

080022c4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80022c4:	b480      	push	{r7}
 80022c6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80022c8:	4b06      	ldr	r3, [pc, #24]	@ (80022e4 <SystemInit+0x20>)
 80022ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022ce:	4a05      	ldr	r2, [pc, #20]	@ (80022e4 <SystemInit+0x20>)
 80022d0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80022d4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80022d8:	bf00      	nop
 80022da:	46bd      	mov	sp, r7
 80022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e0:	4770      	bx	lr
 80022e2:	bf00      	nop
 80022e4:	e000ed00 	.word	0xe000ed00

080022e8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80022e8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002320 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80022ec:	f7ff ffea 	bl	80022c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80022f0:	480c      	ldr	r0, [pc, #48]	@ (8002324 <LoopForever+0x6>)
  ldr r1, =_edata
 80022f2:	490d      	ldr	r1, [pc, #52]	@ (8002328 <LoopForever+0xa>)
  ldr r2, =_sidata
 80022f4:	4a0d      	ldr	r2, [pc, #52]	@ (800232c <LoopForever+0xe>)
  movs r3, #0
 80022f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022f8:	e002      	b.n	8002300 <LoopCopyDataInit>

080022fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022fe:	3304      	adds	r3, #4

08002300 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002300:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002302:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002304:	d3f9      	bcc.n	80022fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002306:	4a0a      	ldr	r2, [pc, #40]	@ (8002330 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002308:	4c0a      	ldr	r4, [pc, #40]	@ (8002334 <LoopForever+0x16>)
  movs r3, #0
 800230a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800230c:	e001      	b.n	8002312 <LoopFillZerobss>

0800230e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800230e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002310:	3204      	adds	r2, #4

08002312 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002312:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002314:	d3fb      	bcc.n	800230e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002316:	f008 fa33 	bl	800a780 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800231a:	f7fe fe99 	bl	8001050 <main>

0800231e <LoopForever>:

LoopForever:
    b LoopForever
 800231e:	e7fe      	b.n	800231e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002320:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002324:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002328:	20000208 	.word	0x20000208
  ldr r2, =_sidata
 800232c:	0800cfc0 	.word	0x0800cfc0
  ldr r2, =_sbss
 8002330:	20000208 	.word	0x20000208
  ldr r4, =_ebss
 8002334:	200006f0 	.word	0x200006f0

08002338 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002338:	e7fe      	b.n	8002338 <ADC1_2_IRQHandler>
	...

0800233c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b082      	sub	sp, #8
 8002340:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002342:	2300      	movs	r3, #0
 8002344:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002346:	4b0c      	ldr	r3, [pc, #48]	@ (8002378 <HAL_Init+0x3c>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a0b      	ldr	r2, [pc, #44]	@ (8002378 <HAL_Init+0x3c>)
 800234c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002350:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002352:	2003      	movs	r0, #3
 8002354:	f000 f903 	bl	800255e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002358:	200f      	movs	r0, #15
 800235a:	f7ff fe1d 	bl	8001f98 <HAL_InitTick>
 800235e:	4603      	mov	r3, r0
 8002360:	2b00      	cmp	r3, #0
 8002362:	d002      	beq.n	800236a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	71fb      	strb	r3, [r7, #7]
 8002368:	e001      	b.n	800236e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800236a:	f7ff fcbf 	bl	8001cec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800236e:	79fb      	ldrb	r3, [r7, #7]
}
 8002370:	4618      	mov	r0, r3
 8002372:	3708      	adds	r7, #8
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}
 8002378:	40022000 	.word	0x40022000

0800237c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800237c:	b480      	push	{r7}
 800237e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002380:	4b06      	ldr	r3, [pc, #24]	@ (800239c <HAL_IncTick+0x20>)
 8002382:	781b      	ldrb	r3, [r3, #0]
 8002384:	461a      	mov	r2, r3
 8002386:	4b06      	ldr	r3, [pc, #24]	@ (80023a0 <HAL_IncTick+0x24>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4413      	add	r3, r2
 800238c:	4a04      	ldr	r2, [pc, #16]	@ (80023a0 <HAL_IncTick+0x24>)
 800238e:	6013      	str	r3, [r2, #0]
}
 8002390:	bf00      	nop
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr
 800239a:	bf00      	nop
 800239c:	20000010 	.word	0x20000010
 80023a0:	20000558 	.word	0x20000558

080023a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023a4:	b480      	push	{r7}
 80023a6:	af00      	add	r7, sp, #0
  return uwTick;
 80023a8:	4b03      	ldr	r3, [pc, #12]	@ (80023b8 <HAL_GetTick+0x14>)
 80023aa:	681b      	ldr	r3, [r3, #0]
}
 80023ac:	4618      	mov	r0, r3
 80023ae:	46bd      	mov	sp, r7
 80023b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b4:	4770      	bx	lr
 80023b6:	bf00      	nop
 80023b8:	20000558 	.word	0x20000558

080023bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b084      	sub	sp, #16
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023c4:	f7ff ffee 	bl	80023a4 <HAL_GetTick>
 80023c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023d4:	d005      	beq.n	80023e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80023d6:	4b0a      	ldr	r3, [pc, #40]	@ (8002400 <HAL_Delay+0x44>)
 80023d8:	781b      	ldrb	r3, [r3, #0]
 80023da:	461a      	mov	r2, r3
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	4413      	add	r3, r2
 80023e0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80023e2:	bf00      	nop
 80023e4:	f7ff ffde 	bl	80023a4 <HAL_GetTick>
 80023e8:	4602      	mov	r2, r0
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	1ad3      	subs	r3, r2, r3
 80023ee:	68fa      	ldr	r2, [r7, #12]
 80023f0:	429a      	cmp	r2, r3
 80023f2:	d8f7      	bhi.n	80023e4 <HAL_Delay+0x28>
  {
  }
}
 80023f4:	bf00      	nop
 80023f6:	bf00      	nop
 80023f8:	3710      	adds	r7, #16
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop
 8002400:	20000010 	.word	0x20000010

08002404 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002404:	b480      	push	{r7}
 8002406:	b085      	sub	sp, #20
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	f003 0307 	and.w	r3, r3, #7
 8002412:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002414:	4b0c      	ldr	r3, [pc, #48]	@ (8002448 <__NVIC_SetPriorityGrouping+0x44>)
 8002416:	68db      	ldr	r3, [r3, #12]
 8002418:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800241a:	68ba      	ldr	r2, [r7, #8]
 800241c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002420:	4013      	ands	r3, r2
 8002422:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800242c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002430:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002434:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002436:	4a04      	ldr	r2, [pc, #16]	@ (8002448 <__NVIC_SetPriorityGrouping+0x44>)
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	60d3      	str	r3, [r2, #12]
}
 800243c:	bf00      	nop
 800243e:	3714      	adds	r7, #20
 8002440:	46bd      	mov	sp, r7
 8002442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002446:	4770      	bx	lr
 8002448:	e000ed00 	.word	0xe000ed00

0800244c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800244c:	b480      	push	{r7}
 800244e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002450:	4b04      	ldr	r3, [pc, #16]	@ (8002464 <__NVIC_GetPriorityGrouping+0x18>)
 8002452:	68db      	ldr	r3, [r3, #12]
 8002454:	0a1b      	lsrs	r3, r3, #8
 8002456:	f003 0307 	and.w	r3, r3, #7
}
 800245a:	4618      	mov	r0, r3
 800245c:	46bd      	mov	sp, r7
 800245e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002462:	4770      	bx	lr
 8002464:	e000ed00 	.word	0xe000ed00

08002468 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002468:	b480      	push	{r7}
 800246a:	b083      	sub	sp, #12
 800246c:	af00      	add	r7, sp, #0
 800246e:	4603      	mov	r3, r0
 8002470:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002472:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002476:	2b00      	cmp	r3, #0
 8002478:	db0b      	blt.n	8002492 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800247a:	79fb      	ldrb	r3, [r7, #7]
 800247c:	f003 021f 	and.w	r2, r3, #31
 8002480:	4907      	ldr	r1, [pc, #28]	@ (80024a0 <__NVIC_EnableIRQ+0x38>)
 8002482:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002486:	095b      	lsrs	r3, r3, #5
 8002488:	2001      	movs	r0, #1
 800248a:	fa00 f202 	lsl.w	r2, r0, r2
 800248e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002492:	bf00      	nop
 8002494:	370c      	adds	r7, #12
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr
 800249e:	bf00      	nop
 80024a0:	e000e100 	.word	0xe000e100

080024a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b083      	sub	sp, #12
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	4603      	mov	r3, r0
 80024ac:	6039      	str	r1, [r7, #0]
 80024ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	db0a      	blt.n	80024ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	b2da      	uxtb	r2, r3
 80024bc:	490c      	ldr	r1, [pc, #48]	@ (80024f0 <__NVIC_SetPriority+0x4c>)
 80024be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024c2:	0112      	lsls	r2, r2, #4
 80024c4:	b2d2      	uxtb	r2, r2
 80024c6:	440b      	add	r3, r1
 80024c8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024cc:	e00a      	b.n	80024e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	b2da      	uxtb	r2, r3
 80024d2:	4908      	ldr	r1, [pc, #32]	@ (80024f4 <__NVIC_SetPriority+0x50>)
 80024d4:	79fb      	ldrb	r3, [r7, #7]
 80024d6:	f003 030f 	and.w	r3, r3, #15
 80024da:	3b04      	subs	r3, #4
 80024dc:	0112      	lsls	r2, r2, #4
 80024de:	b2d2      	uxtb	r2, r2
 80024e0:	440b      	add	r3, r1
 80024e2:	761a      	strb	r2, [r3, #24]
}
 80024e4:	bf00      	nop
 80024e6:	370c      	adds	r7, #12
 80024e8:	46bd      	mov	sp, r7
 80024ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ee:	4770      	bx	lr
 80024f0:	e000e100 	.word	0xe000e100
 80024f4:	e000ed00 	.word	0xe000ed00

080024f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b089      	sub	sp, #36	@ 0x24
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	60f8      	str	r0, [r7, #12]
 8002500:	60b9      	str	r1, [r7, #8]
 8002502:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	f003 0307 	and.w	r3, r3, #7
 800250a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800250c:	69fb      	ldr	r3, [r7, #28]
 800250e:	f1c3 0307 	rsb	r3, r3, #7
 8002512:	2b04      	cmp	r3, #4
 8002514:	bf28      	it	cs
 8002516:	2304      	movcs	r3, #4
 8002518:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800251a:	69fb      	ldr	r3, [r7, #28]
 800251c:	3304      	adds	r3, #4
 800251e:	2b06      	cmp	r3, #6
 8002520:	d902      	bls.n	8002528 <NVIC_EncodePriority+0x30>
 8002522:	69fb      	ldr	r3, [r7, #28]
 8002524:	3b03      	subs	r3, #3
 8002526:	e000      	b.n	800252a <NVIC_EncodePriority+0x32>
 8002528:	2300      	movs	r3, #0
 800252a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800252c:	f04f 32ff 	mov.w	r2, #4294967295
 8002530:	69bb      	ldr	r3, [r7, #24]
 8002532:	fa02 f303 	lsl.w	r3, r2, r3
 8002536:	43da      	mvns	r2, r3
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	401a      	ands	r2, r3
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002540:	f04f 31ff 	mov.w	r1, #4294967295
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	fa01 f303 	lsl.w	r3, r1, r3
 800254a:	43d9      	mvns	r1, r3
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002550:	4313      	orrs	r3, r2
         );
}
 8002552:	4618      	mov	r0, r3
 8002554:	3724      	adds	r7, #36	@ 0x24
 8002556:	46bd      	mov	sp, r7
 8002558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255c:	4770      	bx	lr

0800255e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800255e:	b580      	push	{r7, lr}
 8002560:	b082      	sub	sp, #8
 8002562:	af00      	add	r7, sp, #0
 8002564:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002566:	6878      	ldr	r0, [r7, #4]
 8002568:	f7ff ff4c 	bl	8002404 <__NVIC_SetPriorityGrouping>
}
 800256c:	bf00      	nop
 800256e:	3708      	adds	r7, #8
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}

08002574 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b086      	sub	sp, #24
 8002578:	af00      	add	r7, sp, #0
 800257a:	4603      	mov	r3, r0
 800257c:	60b9      	str	r1, [r7, #8]
 800257e:	607a      	str	r2, [r7, #4]
 8002580:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002582:	2300      	movs	r3, #0
 8002584:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002586:	f7ff ff61 	bl	800244c <__NVIC_GetPriorityGrouping>
 800258a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800258c:	687a      	ldr	r2, [r7, #4]
 800258e:	68b9      	ldr	r1, [r7, #8]
 8002590:	6978      	ldr	r0, [r7, #20]
 8002592:	f7ff ffb1 	bl	80024f8 <NVIC_EncodePriority>
 8002596:	4602      	mov	r2, r0
 8002598:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800259c:	4611      	mov	r1, r2
 800259e:	4618      	mov	r0, r3
 80025a0:	f7ff ff80 	bl	80024a4 <__NVIC_SetPriority>
}
 80025a4:	bf00      	nop
 80025a6:	3718      	adds	r7, #24
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}

080025ac <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b082      	sub	sp, #8
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	4603      	mov	r3, r0
 80025b4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ba:	4618      	mov	r0, r3
 80025bc:	f7ff ff54 	bl	8002468 <__NVIC_EnableIRQ>
}
 80025c0:	bf00      	nop
 80025c2:	3708      	adds	r7, #8
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}

080025c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b087      	sub	sp, #28
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
 80025d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80025d2:	2300      	movs	r3, #0
 80025d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025d6:	e17f      	b.n	80028d8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	681a      	ldr	r2, [r3, #0]
 80025dc:	2101      	movs	r1, #1
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	fa01 f303 	lsl.w	r3, r1, r3
 80025e4:	4013      	ands	r3, r2
 80025e6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	f000 8171 	beq.w	80028d2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	f003 0303 	and.w	r3, r3, #3
 80025f8:	2b01      	cmp	r3, #1
 80025fa:	d005      	beq.n	8002608 <HAL_GPIO_Init+0x40>
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	f003 0303 	and.w	r3, r3, #3
 8002604:	2b02      	cmp	r3, #2
 8002606:	d130      	bne.n	800266a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	005b      	lsls	r3, r3, #1
 8002612:	2203      	movs	r2, #3
 8002614:	fa02 f303 	lsl.w	r3, r2, r3
 8002618:	43db      	mvns	r3, r3
 800261a:	693a      	ldr	r2, [r7, #16]
 800261c:	4013      	ands	r3, r2
 800261e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	68da      	ldr	r2, [r3, #12]
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	005b      	lsls	r3, r3, #1
 8002628:	fa02 f303 	lsl.w	r3, r2, r3
 800262c:	693a      	ldr	r2, [r7, #16]
 800262e:	4313      	orrs	r3, r2
 8002630:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	693a      	ldr	r2, [r7, #16]
 8002636:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800263e:	2201      	movs	r2, #1
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	fa02 f303 	lsl.w	r3, r2, r3
 8002646:	43db      	mvns	r3, r3
 8002648:	693a      	ldr	r2, [r7, #16]
 800264a:	4013      	ands	r3, r2
 800264c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	091b      	lsrs	r3, r3, #4
 8002654:	f003 0201 	and.w	r2, r3, #1
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	fa02 f303 	lsl.w	r3, r2, r3
 800265e:	693a      	ldr	r2, [r7, #16]
 8002660:	4313      	orrs	r3, r2
 8002662:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	693a      	ldr	r2, [r7, #16]
 8002668:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	f003 0303 	and.w	r3, r3, #3
 8002672:	2b03      	cmp	r3, #3
 8002674:	d118      	bne.n	80026a8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800267a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800267c:	2201      	movs	r2, #1
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	fa02 f303 	lsl.w	r3, r2, r3
 8002684:	43db      	mvns	r3, r3
 8002686:	693a      	ldr	r2, [r7, #16]
 8002688:	4013      	ands	r3, r2
 800268a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	08db      	lsrs	r3, r3, #3
 8002692:	f003 0201 	and.w	r2, r3, #1
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	fa02 f303 	lsl.w	r3, r2, r3
 800269c:	693a      	ldr	r2, [r7, #16]
 800269e:	4313      	orrs	r3, r2
 80026a0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	693a      	ldr	r2, [r7, #16]
 80026a6:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	f003 0303 	and.w	r3, r3, #3
 80026b0:	2b03      	cmp	r3, #3
 80026b2:	d017      	beq.n	80026e4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	68db      	ldr	r3, [r3, #12]
 80026b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	005b      	lsls	r3, r3, #1
 80026be:	2203      	movs	r2, #3
 80026c0:	fa02 f303 	lsl.w	r3, r2, r3
 80026c4:	43db      	mvns	r3, r3
 80026c6:	693a      	ldr	r2, [r7, #16]
 80026c8:	4013      	ands	r3, r2
 80026ca:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	689a      	ldr	r2, [r3, #8]
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	005b      	lsls	r3, r3, #1
 80026d4:	fa02 f303 	lsl.w	r3, r2, r3
 80026d8:	693a      	ldr	r2, [r7, #16]
 80026da:	4313      	orrs	r3, r2
 80026dc:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	693a      	ldr	r2, [r7, #16]
 80026e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	f003 0303 	and.w	r3, r3, #3
 80026ec:	2b02      	cmp	r3, #2
 80026ee:	d123      	bne.n	8002738 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80026f0:	697b      	ldr	r3, [r7, #20]
 80026f2:	08da      	lsrs	r2, r3, #3
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	3208      	adds	r2, #8
 80026f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026fc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	f003 0307 	and.w	r3, r3, #7
 8002704:	009b      	lsls	r3, r3, #2
 8002706:	220f      	movs	r2, #15
 8002708:	fa02 f303 	lsl.w	r3, r2, r3
 800270c:	43db      	mvns	r3, r3
 800270e:	693a      	ldr	r2, [r7, #16]
 8002710:	4013      	ands	r3, r2
 8002712:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	691a      	ldr	r2, [r3, #16]
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	f003 0307 	and.w	r3, r3, #7
 800271e:	009b      	lsls	r3, r3, #2
 8002720:	fa02 f303 	lsl.w	r3, r2, r3
 8002724:	693a      	ldr	r2, [r7, #16]
 8002726:	4313      	orrs	r3, r2
 8002728:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	08da      	lsrs	r2, r3, #3
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	3208      	adds	r2, #8
 8002732:	6939      	ldr	r1, [r7, #16]
 8002734:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	005b      	lsls	r3, r3, #1
 8002742:	2203      	movs	r2, #3
 8002744:	fa02 f303 	lsl.w	r3, r2, r3
 8002748:	43db      	mvns	r3, r3
 800274a:	693a      	ldr	r2, [r7, #16]
 800274c:	4013      	ands	r3, r2
 800274e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	f003 0203 	and.w	r2, r3, #3
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	005b      	lsls	r3, r3, #1
 800275c:	fa02 f303 	lsl.w	r3, r2, r3
 8002760:	693a      	ldr	r2, [r7, #16]
 8002762:	4313      	orrs	r3, r2
 8002764:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	693a      	ldr	r2, [r7, #16]
 800276a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002774:	2b00      	cmp	r3, #0
 8002776:	f000 80ac 	beq.w	80028d2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800277a:	4b5f      	ldr	r3, [pc, #380]	@ (80028f8 <HAL_GPIO_Init+0x330>)
 800277c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800277e:	4a5e      	ldr	r2, [pc, #376]	@ (80028f8 <HAL_GPIO_Init+0x330>)
 8002780:	f043 0301 	orr.w	r3, r3, #1
 8002784:	6613      	str	r3, [r2, #96]	@ 0x60
 8002786:	4b5c      	ldr	r3, [pc, #368]	@ (80028f8 <HAL_GPIO_Init+0x330>)
 8002788:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800278a:	f003 0301 	and.w	r3, r3, #1
 800278e:	60bb      	str	r3, [r7, #8]
 8002790:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002792:	4a5a      	ldr	r2, [pc, #360]	@ (80028fc <HAL_GPIO_Init+0x334>)
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	089b      	lsrs	r3, r3, #2
 8002798:	3302      	adds	r3, #2
 800279a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800279e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	f003 0303 	and.w	r3, r3, #3
 80027a6:	009b      	lsls	r3, r3, #2
 80027a8:	220f      	movs	r2, #15
 80027aa:	fa02 f303 	lsl.w	r3, r2, r3
 80027ae:	43db      	mvns	r3, r3
 80027b0:	693a      	ldr	r2, [r7, #16]
 80027b2:	4013      	ands	r3, r2
 80027b4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80027bc:	d025      	beq.n	800280a <HAL_GPIO_Init+0x242>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	4a4f      	ldr	r2, [pc, #316]	@ (8002900 <HAL_GPIO_Init+0x338>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d01f      	beq.n	8002806 <HAL_GPIO_Init+0x23e>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	4a4e      	ldr	r2, [pc, #312]	@ (8002904 <HAL_GPIO_Init+0x33c>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d019      	beq.n	8002802 <HAL_GPIO_Init+0x23a>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	4a4d      	ldr	r2, [pc, #308]	@ (8002908 <HAL_GPIO_Init+0x340>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d013      	beq.n	80027fe <HAL_GPIO_Init+0x236>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	4a4c      	ldr	r2, [pc, #304]	@ (800290c <HAL_GPIO_Init+0x344>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d00d      	beq.n	80027fa <HAL_GPIO_Init+0x232>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	4a4b      	ldr	r2, [pc, #300]	@ (8002910 <HAL_GPIO_Init+0x348>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d007      	beq.n	80027f6 <HAL_GPIO_Init+0x22e>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	4a4a      	ldr	r2, [pc, #296]	@ (8002914 <HAL_GPIO_Init+0x34c>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d101      	bne.n	80027f2 <HAL_GPIO_Init+0x22a>
 80027ee:	2306      	movs	r3, #6
 80027f0:	e00c      	b.n	800280c <HAL_GPIO_Init+0x244>
 80027f2:	2307      	movs	r3, #7
 80027f4:	e00a      	b.n	800280c <HAL_GPIO_Init+0x244>
 80027f6:	2305      	movs	r3, #5
 80027f8:	e008      	b.n	800280c <HAL_GPIO_Init+0x244>
 80027fa:	2304      	movs	r3, #4
 80027fc:	e006      	b.n	800280c <HAL_GPIO_Init+0x244>
 80027fe:	2303      	movs	r3, #3
 8002800:	e004      	b.n	800280c <HAL_GPIO_Init+0x244>
 8002802:	2302      	movs	r3, #2
 8002804:	e002      	b.n	800280c <HAL_GPIO_Init+0x244>
 8002806:	2301      	movs	r3, #1
 8002808:	e000      	b.n	800280c <HAL_GPIO_Init+0x244>
 800280a:	2300      	movs	r3, #0
 800280c:	697a      	ldr	r2, [r7, #20]
 800280e:	f002 0203 	and.w	r2, r2, #3
 8002812:	0092      	lsls	r2, r2, #2
 8002814:	4093      	lsls	r3, r2
 8002816:	693a      	ldr	r2, [r7, #16]
 8002818:	4313      	orrs	r3, r2
 800281a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800281c:	4937      	ldr	r1, [pc, #220]	@ (80028fc <HAL_GPIO_Init+0x334>)
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	089b      	lsrs	r3, r3, #2
 8002822:	3302      	adds	r3, #2
 8002824:	693a      	ldr	r2, [r7, #16]
 8002826:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800282a:	4b3b      	ldr	r3, [pc, #236]	@ (8002918 <HAL_GPIO_Init+0x350>)
 800282c:	689b      	ldr	r3, [r3, #8]
 800282e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	43db      	mvns	r3, r3
 8002834:	693a      	ldr	r2, [r7, #16]
 8002836:	4013      	ands	r3, r2
 8002838:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002842:	2b00      	cmp	r3, #0
 8002844:	d003      	beq.n	800284e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002846:	693a      	ldr	r2, [r7, #16]
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	4313      	orrs	r3, r2
 800284c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800284e:	4a32      	ldr	r2, [pc, #200]	@ (8002918 <HAL_GPIO_Init+0x350>)
 8002850:	693b      	ldr	r3, [r7, #16]
 8002852:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002854:	4b30      	ldr	r3, [pc, #192]	@ (8002918 <HAL_GPIO_Init+0x350>)
 8002856:	68db      	ldr	r3, [r3, #12]
 8002858:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	43db      	mvns	r3, r3
 800285e:	693a      	ldr	r2, [r7, #16]
 8002860:	4013      	ands	r3, r2
 8002862:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800286c:	2b00      	cmp	r3, #0
 800286e:	d003      	beq.n	8002878 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002870:	693a      	ldr	r2, [r7, #16]
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	4313      	orrs	r3, r2
 8002876:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002878:	4a27      	ldr	r2, [pc, #156]	@ (8002918 <HAL_GPIO_Init+0x350>)
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800287e:	4b26      	ldr	r3, [pc, #152]	@ (8002918 <HAL_GPIO_Init+0x350>)
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	43db      	mvns	r3, r3
 8002888:	693a      	ldr	r2, [r7, #16]
 800288a:	4013      	ands	r3, r2
 800288c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002896:	2b00      	cmp	r3, #0
 8002898:	d003      	beq.n	80028a2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800289a:	693a      	ldr	r2, [r7, #16]
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	4313      	orrs	r3, r2
 80028a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80028a2:	4a1d      	ldr	r2, [pc, #116]	@ (8002918 <HAL_GPIO_Init+0x350>)
 80028a4:	693b      	ldr	r3, [r7, #16]
 80028a6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80028a8:	4b1b      	ldr	r3, [pc, #108]	@ (8002918 <HAL_GPIO_Init+0x350>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	43db      	mvns	r3, r3
 80028b2:	693a      	ldr	r2, [r7, #16]
 80028b4:	4013      	ands	r3, r2
 80028b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d003      	beq.n	80028cc <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80028c4:	693a      	ldr	r2, [r7, #16]
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	4313      	orrs	r3, r2
 80028ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80028cc:	4a12      	ldr	r2, [pc, #72]	@ (8002918 <HAL_GPIO_Init+0x350>)
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	3301      	adds	r3, #1
 80028d6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	681a      	ldr	r2, [r3, #0]
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	fa22 f303 	lsr.w	r3, r2, r3
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	f47f ae78 	bne.w	80025d8 <HAL_GPIO_Init+0x10>
  }
}
 80028e8:	bf00      	nop
 80028ea:	bf00      	nop
 80028ec:	371c      	adds	r7, #28
 80028ee:	46bd      	mov	sp, r7
 80028f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f4:	4770      	bx	lr
 80028f6:	bf00      	nop
 80028f8:	40021000 	.word	0x40021000
 80028fc:	40010000 	.word	0x40010000
 8002900:	48000400 	.word	0x48000400
 8002904:	48000800 	.word	0x48000800
 8002908:	48000c00 	.word	0x48000c00
 800290c:	48001000 	.word	0x48001000
 8002910:	48001400 	.word	0x48001400
 8002914:	48001800 	.word	0x48001800
 8002918:	40010400 	.word	0x40010400

0800291c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800291c:	b480      	push	{r7}
 800291e:	b085      	sub	sp, #20
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
 8002924:	460b      	mov	r3, r1
 8002926:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	691a      	ldr	r2, [r3, #16]
 800292c:	887b      	ldrh	r3, [r7, #2]
 800292e:	4013      	ands	r3, r2
 8002930:	2b00      	cmp	r3, #0
 8002932:	d002      	beq.n	800293a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002934:	2301      	movs	r3, #1
 8002936:	73fb      	strb	r3, [r7, #15]
 8002938:	e001      	b.n	800293e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800293a:	2300      	movs	r3, #0
 800293c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800293e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002940:	4618      	mov	r0, r3
 8002942:	3714      	adds	r7, #20
 8002944:	46bd      	mov	sp, r7
 8002946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294a:	4770      	bx	lr

0800294c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800294c:	b480      	push	{r7}
 800294e:	b083      	sub	sp, #12
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
 8002954:	460b      	mov	r3, r1
 8002956:	807b      	strh	r3, [r7, #2]
 8002958:	4613      	mov	r3, r2
 800295a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800295c:	787b      	ldrb	r3, [r7, #1]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d003      	beq.n	800296a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002962:	887a      	ldrh	r2, [r7, #2]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002968:	e002      	b.n	8002970 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800296a:	887a      	ldrh	r2, [r7, #2]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002970:	bf00      	nop
 8002972:	370c      	adds	r7, #12
 8002974:	46bd      	mov	sp, r7
 8002976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297a:	4770      	bx	lr

0800297c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800297c:	b480      	push	{r7}
 800297e:	b085      	sub	sp, #20
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
 8002984:	460b      	mov	r3, r1
 8002986:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	695b      	ldr	r3, [r3, #20]
 800298c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800298e:	887a      	ldrh	r2, [r7, #2]
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	4013      	ands	r3, r2
 8002994:	041a      	lsls	r2, r3, #16
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	43d9      	mvns	r1, r3
 800299a:	887b      	ldrh	r3, [r7, #2]
 800299c:	400b      	ands	r3, r1
 800299e:	431a      	orrs	r2, r3
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	619a      	str	r2, [r3, #24]
}
 80029a4:	bf00      	nop
 80029a6:	3714      	adds	r7, #20
 80029a8:	46bd      	mov	sp, r7
 80029aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ae:	4770      	bx	lr

080029b0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b082      	sub	sp, #8
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	4603      	mov	r3, r0
 80029b8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80029ba:	4b08      	ldr	r3, [pc, #32]	@ (80029dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80029bc:	695a      	ldr	r2, [r3, #20]
 80029be:	88fb      	ldrh	r3, [r7, #6]
 80029c0:	4013      	ands	r3, r2
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d006      	beq.n	80029d4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80029c6:	4a05      	ldr	r2, [pc, #20]	@ (80029dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80029c8:	88fb      	ldrh	r3, [r7, #6]
 80029ca:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80029cc:	88fb      	ldrh	r3, [r7, #6]
 80029ce:	4618      	mov	r0, r3
 80029d0:	f7fe fdfe 	bl	80015d0 <HAL_GPIO_EXTI_Callback>
  }
}
 80029d4:	bf00      	nop
 80029d6:	3708      	adds	r7, #8
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}
 80029dc:	40010400 	.word	0x40010400

080029e0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80029e0:	b480      	push	{r7}
 80029e2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80029e4:	4b04      	ldr	r3, [pc, #16]	@ (80029f8 <HAL_PWREx_GetVoltageRange+0x18>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	46bd      	mov	sp, r7
 80029f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f4:	4770      	bx	lr
 80029f6:	bf00      	nop
 80029f8:	40007000 	.word	0x40007000

080029fc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b085      	sub	sp, #20
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002a0a:	d130      	bne.n	8002a6e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002a0c:	4b23      	ldr	r3, [pc, #140]	@ (8002a9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002a14:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002a18:	d038      	beq.n	8002a8c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002a1a:	4b20      	ldr	r3, [pc, #128]	@ (8002a9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002a22:	4a1e      	ldr	r2, [pc, #120]	@ (8002a9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a24:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002a28:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002a2a:	4b1d      	ldr	r3, [pc, #116]	@ (8002aa0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	2232      	movs	r2, #50	@ 0x32
 8002a30:	fb02 f303 	mul.w	r3, r2, r3
 8002a34:	4a1b      	ldr	r2, [pc, #108]	@ (8002aa4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002a36:	fba2 2303 	umull	r2, r3, r2, r3
 8002a3a:	0c9b      	lsrs	r3, r3, #18
 8002a3c:	3301      	adds	r3, #1
 8002a3e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002a40:	e002      	b.n	8002a48 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	3b01      	subs	r3, #1
 8002a46:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002a48:	4b14      	ldr	r3, [pc, #80]	@ (8002a9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a4a:	695b      	ldr	r3, [r3, #20]
 8002a4c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a50:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a54:	d102      	bne.n	8002a5c <HAL_PWREx_ControlVoltageScaling+0x60>
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d1f2      	bne.n	8002a42 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002a5c:	4b0f      	ldr	r3, [pc, #60]	@ (8002a9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a5e:	695b      	ldr	r3, [r3, #20]
 8002a60:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a64:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a68:	d110      	bne.n	8002a8c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002a6a:	2303      	movs	r3, #3
 8002a6c:	e00f      	b.n	8002a8e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002a6e:	4b0b      	ldr	r3, [pc, #44]	@ (8002a9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002a76:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a7a:	d007      	beq.n	8002a8c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002a7c:	4b07      	ldr	r3, [pc, #28]	@ (8002a9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002a84:	4a05      	ldr	r2, [pc, #20]	@ (8002a9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a86:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002a8a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002a8c:	2300      	movs	r3, #0
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	3714      	adds	r7, #20
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr
 8002a9a:	bf00      	nop
 8002a9c:	40007000 	.word	0x40007000
 8002aa0:	20000008 	.word	0x20000008
 8002aa4:	431bde83 	.word	0x431bde83

08002aa8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b088      	sub	sp, #32
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d101      	bne.n	8002aba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e3ca      	b.n	8003250 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002aba:	4b97      	ldr	r3, [pc, #604]	@ (8002d18 <HAL_RCC_OscConfig+0x270>)
 8002abc:	689b      	ldr	r3, [r3, #8]
 8002abe:	f003 030c 	and.w	r3, r3, #12
 8002ac2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ac4:	4b94      	ldr	r3, [pc, #592]	@ (8002d18 <HAL_RCC_OscConfig+0x270>)
 8002ac6:	68db      	ldr	r3, [r3, #12]
 8002ac8:	f003 0303 	and.w	r3, r3, #3
 8002acc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f003 0310 	and.w	r3, r3, #16
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	f000 80e4 	beq.w	8002ca4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002adc:	69bb      	ldr	r3, [r7, #24]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d007      	beq.n	8002af2 <HAL_RCC_OscConfig+0x4a>
 8002ae2:	69bb      	ldr	r3, [r7, #24]
 8002ae4:	2b0c      	cmp	r3, #12
 8002ae6:	f040 808b 	bne.w	8002c00 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	2b01      	cmp	r3, #1
 8002aee:	f040 8087 	bne.w	8002c00 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002af2:	4b89      	ldr	r3, [pc, #548]	@ (8002d18 <HAL_RCC_OscConfig+0x270>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f003 0302 	and.w	r3, r3, #2
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d005      	beq.n	8002b0a <HAL_RCC_OscConfig+0x62>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	699b      	ldr	r3, [r3, #24]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d101      	bne.n	8002b0a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	e3a2      	b.n	8003250 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6a1a      	ldr	r2, [r3, #32]
 8002b0e:	4b82      	ldr	r3, [pc, #520]	@ (8002d18 <HAL_RCC_OscConfig+0x270>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f003 0308 	and.w	r3, r3, #8
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d004      	beq.n	8002b24 <HAL_RCC_OscConfig+0x7c>
 8002b1a:	4b7f      	ldr	r3, [pc, #508]	@ (8002d18 <HAL_RCC_OscConfig+0x270>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002b22:	e005      	b.n	8002b30 <HAL_RCC_OscConfig+0x88>
 8002b24:	4b7c      	ldr	r3, [pc, #496]	@ (8002d18 <HAL_RCC_OscConfig+0x270>)
 8002b26:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b2a:	091b      	lsrs	r3, r3, #4
 8002b2c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d223      	bcs.n	8002b7c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6a1b      	ldr	r3, [r3, #32]
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f000 fd87 	bl	800364c <RCC_SetFlashLatencyFromMSIRange>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d001      	beq.n	8002b48 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002b44:	2301      	movs	r3, #1
 8002b46:	e383      	b.n	8003250 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b48:	4b73      	ldr	r3, [pc, #460]	@ (8002d18 <HAL_RCC_OscConfig+0x270>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a72      	ldr	r2, [pc, #456]	@ (8002d18 <HAL_RCC_OscConfig+0x270>)
 8002b4e:	f043 0308 	orr.w	r3, r3, #8
 8002b52:	6013      	str	r3, [r2, #0]
 8002b54:	4b70      	ldr	r3, [pc, #448]	@ (8002d18 <HAL_RCC_OscConfig+0x270>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6a1b      	ldr	r3, [r3, #32]
 8002b60:	496d      	ldr	r1, [pc, #436]	@ (8002d18 <HAL_RCC_OscConfig+0x270>)
 8002b62:	4313      	orrs	r3, r2
 8002b64:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b66:	4b6c      	ldr	r3, [pc, #432]	@ (8002d18 <HAL_RCC_OscConfig+0x270>)
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	69db      	ldr	r3, [r3, #28]
 8002b72:	021b      	lsls	r3, r3, #8
 8002b74:	4968      	ldr	r1, [pc, #416]	@ (8002d18 <HAL_RCC_OscConfig+0x270>)
 8002b76:	4313      	orrs	r3, r2
 8002b78:	604b      	str	r3, [r1, #4]
 8002b7a:	e025      	b.n	8002bc8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b7c:	4b66      	ldr	r3, [pc, #408]	@ (8002d18 <HAL_RCC_OscConfig+0x270>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a65      	ldr	r2, [pc, #404]	@ (8002d18 <HAL_RCC_OscConfig+0x270>)
 8002b82:	f043 0308 	orr.w	r3, r3, #8
 8002b86:	6013      	str	r3, [r2, #0]
 8002b88:	4b63      	ldr	r3, [pc, #396]	@ (8002d18 <HAL_RCC_OscConfig+0x270>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6a1b      	ldr	r3, [r3, #32]
 8002b94:	4960      	ldr	r1, [pc, #384]	@ (8002d18 <HAL_RCC_OscConfig+0x270>)
 8002b96:	4313      	orrs	r3, r2
 8002b98:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b9a:	4b5f      	ldr	r3, [pc, #380]	@ (8002d18 <HAL_RCC_OscConfig+0x270>)
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	69db      	ldr	r3, [r3, #28]
 8002ba6:	021b      	lsls	r3, r3, #8
 8002ba8:	495b      	ldr	r1, [pc, #364]	@ (8002d18 <HAL_RCC_OscConfig+0x270>)
 8002baa:	4313      	orrs	r3, r2
 8002bac:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002bae:	69bb      	ldr	r3, [r7, #24]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d109      	bne.n	8002bc8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6a1b      	ldr	r3, [r3, #32]
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f000 fd47 	bl	800364c <RCC_SetFlashLatencyFromMSIRange>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d001      	beq.n	8002bc8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	e343      	b.n	8003250 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002bc8:	f000 fc4a 	bl	8003460 <HAL_RCC_GetSysClockFreq>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	4b52      	ldr	r3, [pc, #328]	@ (8002d18 <HAL_RCC_OscConfig+0x270>)
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	091b      	lsrs	r3, r3, #4
 8002bd4:	f003 030f 	and.w	r3, r3, #15
 8002bd8:	4950      	ldr	r1, [pc, #320]	@ (8002d1c <HAL_RCC_OscConfig+0x274>)
 8002bda:	5ccb      	ldrb	r3, [r1, r3]
 8002bdc:	f003 031f 	and.w	r3, r3, #31
 8002be0:	fa22 f303 	lsr.w	r3, r2, r3
 8002be4:	4a4e      	ldr	r2, [pc, #312]	@ (8002d20 <HAL_RCC_OscConfig+0x278>)
 8002be6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002be8:	4b4e      	ldr	r3, [pc, #312]	@ (8002d24 <HAL_RCC_OscConfig+0x27c>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4618      	mov	r0, r3
 8002bee:	f7ff f9d3 	bl	8001f98 <HAL_InitTick>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002bf6:	7bfb      	ldrb	r3, [r7, #15]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d052      	beq.n	8002ca2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002bfc:	7bfb      	ldrb	r3, [r7, #15]
 8002bfe:	e327      	b.n	8003250 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	699b      	ldr	r3, [r3, #24]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d032      	beq.n	8002c6e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002c08:	4b43      	ldr	r3, [pc, #268]	@ (8002d18 <HAL_RCC_OscConfig+0x270>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a42      	ldr	r2, [pc, #264]	@ (8002d18 <HAL_RCC_OscConfig+0x270>)
 8002c0e:	f043 0301 	orr.w	r3, r3, #1
 8002c12:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002c14:	f7ff fbc6 	bl	80023a4 <HAL_GetTick>
 8002c18:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002c1a:	e008      	b.n	8002c2e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002c1c:	f7ff fbc2 	bl	80023a4 <HAL_GetTick>
 8002c20:	4602      	mov	r2, r0
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	2b02      	cmp	r3, #2
 8002c28:	d901      	bls.n	8002c2e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002c2a:	2303      	movs	r3, #3
 8002c2c:	e310      	b.n	8003250 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002c2e:	4b3a      	ldr	r3, [pc, #232]	@ (8002d18 <HAL_RCC_OscConfig+0x270>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 0302 	and.w	r3, r3, #2
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d0f0      	beq.n	8002c1c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c3a:	4b37      	ldr	r3, [pc, #220]	@ (8002d18 <HAL_RCC_OscConfig+0x270>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a36      	ldr	r2, [pc, #216]	@ (8002d18 <HAL_RCC_OscConfig+0x270>)
 8002c40:	f043 0308 	orr.w	r3, r3, #8
 8002c44:	6013      	str	r3, [r2, #0]
 8002c46:	4b34      	ldr	r3, [pc, #208]	@ (8002d18 <HAL_RCC_OscConfig+0x270>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6a1b      	ldr	r3, [r3, #32]
 8002c52:	4931      	ldr	r1, [pc, #196]	@ (8002d18 <HAL_RCC_OscConfig+0x270>)
 8002c54:	4313      	orrs	r3, r2
 8002c56:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c58:	4b2f      	ldr	r3, [pc, #188]	@ (8002d18 <HAL_RCC_OscConfig+0x270>)
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	69db      	ldr	r3, [r3, #28]
 8002c64:	021b      	lsls	r3, r3, #8
 8002c66:	492c      	ldr	r1, [pc, #176]	@ (8002d18 <HAL_RCC_OscConfig+0x270>)
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	604b      	str	r3, [r1, #4]
 8002c6c:	e01a      	b.n	8002ca4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002c6e:	4b2a      	ldr	r3, [pc, #168]	@ (8002d18 <HAL_RCC_OscConfig+0x270>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a29      	ldr	r2, [pc, #164]	@ (8002d18 <HAL_RCC_OscConfig+0x270>)
 8002c74:	f023 0301 	bic.w	r3, r3, #1
 8002c78:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002c7a:	f7ff fb93 	bl	80023a4 <HAL_GetTick>
 8002c7e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002c80:	e008      	b.n	8002c94 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002c82:	f7ff fb8f 	bl	80023a4 <HAL_GetTick>
 8002c86:	4602      	mov	r2, r0
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	1ad3      	subs	r3, r2, r3
 8002c8c:	2b02      	cmp	r3, #2
 8002c8e:	d901      	bls.n	8002c94 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002c90:	2303      	movs	r3, #3
 8002c92:	e2dd      	b.n	8003250 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002c94:	4b20      	ldr	r3, [pc, #128]	@ (8002d18 <HAL_RCC_OscConfig+0x270>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f003 0302 	and.w	r3, r3, #2
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d1f0      	bne.n	8002c82 <HAL_RCC_OscConfig+0x1da>
 8002ca0:	e000      	b.n	8002ca4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002ca2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f003 0301 	and.w	r3, r3, #1
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d074      	beq.n	8002d9a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002cb0:	69bb      	ldr	r3, [r7, #24]
 8002cb2:	2b08      	cmp	r3, #8
 8002cb4:	d005      	beq.n	8002cc2 <HAL_RCC_OscConfig+0x21a>
 8002cb6:	69bb      	ldr	r3, [r7, #24]
 8002cb8:	2b0c      	cmp	r3, #12
 8002cba:	d10e      	bne.n	8002cda <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	2b03      	cmp	r3, #3
 8002cc0:	d10b      	bne.n	8002cda <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cc2:	4b15      	ldr	r3, [pc, #84]	@ (8002d18 <HAL_RCC_OscConfig+0x270>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d064      	beq.n	8002d98 <HAL_RCC_OscConfig+0x2f0>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d160      	bne.n	8002d98 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e2ba      	b.n	8003250 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ce2:	d106      	bne.n	8002cf2 <HAL_RCC_OscConfig+0x24a>
 8002ce4:	4b0c      	ldr	r3, [pc, #48]	@ (8002d18 <HAL_RCC_OscConfig+0x270>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a0b      	ldr	r2, [pc, #44]	@ (8002d18 <HAL_RCC_OscConfig+0x270>)
 8002cea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002cee:	6013      	str	r3, [r2, #0]
 8002cf0:	e026      	b.n	8002d40 <HAL_RCC_OscConfig+0x298>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002cfa:	d115      	bne.n	8002d28 <HAL_RCC_OscConfig+0x280>
 8002cfc:	4b06      	ldr	r3, [pc, #24]	@ (8002d18 <HAL_RCC_OscConfig+0x270>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a05      	ldr	r2, [pc, #20]	@ (8002d18 <HAL_RCC_OscConfig+0x270>)
 8002d02:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002d06:	6013      	str	r3, [r2, #0]
 8002d08:	4b03      	ldr	r3, [pc, #12]	@ (8002d18 <HAL_RCC_OscConfig+0x270>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a02      	ldr	r2, [pc, #8]	@ (8002d18 <HAL_RCC_OscConfig+0x270>)
 8002d0e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d12:	6013      	str	r3, [r2, #0]
 8002d14:	e014      	b.n	8002d40 <HAL_RCC_OscConfig+0x298>
 8002d16:	bf00      	nop
 8002d18:	40021000 	.word	0x40021000
 8002d1c:	0800cb2c 	.word	0x0800cb2c
 8002d20:	20000008 	.word	0x20000008
 8002d24:	2000000c 	.word	0x2000000c
 8002d28:	4ba0      	ldr	r3, [pc, #640]	@ (8002fac <HAL_RCC_OscConfig+0x504>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a9f      	ldr	r2, [pc, #636]	@ (8002fac <HAL_RCC_OscConfig+0x504>)
 8002d2e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d32:	6013      	str	r3, [r2, #0]
 8002d34:	4b9d      	ldr	r3, [pc, #628]	@ (8002fac <HAL_RCC_OscConfig+0x504>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a9c      	ldr	r2, [pc, #624]	@ (8002fac <HAL_RCC_OscConfig+0x504>)
 8002d3a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002d3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d013      	beq.n	8002d70 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d48:	f7ff fb2c 	bl	80023a4 <HAL_GetTick>
 8002d4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d4e:	e008      	b.n	8002d62 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d50:	f7ff fb28 	bl	80023a4 <HAL_GetTick>
 8002d54:	4602      	mov	r2, r0
 8002d56:	693b      	ldr	r3, [r7, #16]
 8002d58:	1ad3      	subs	r3, r2, r3
 8002d5a:	2b64      	cmp	r3, #100	@ 0x64
 8002d5c:	d901      	bls.n	8002d62 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002d5e:	2303      	movs	r3, #3
 8002d60:	e276      	b.n	8003250 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d62:	4b92      	ldr	r3, [pc, #584]	@ (8002fac <HAL_RCC_OscConfig+0x504>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d0f0      	beq.n	8002d50 <HAL_RCC_OscConfig+0x2a8>
 8002d6e:	e014      	b.n	8002d9a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d70:	f7ff fb18 	bl	80023a4 <HAL_GetTick>
 8002d74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002d76:	e008      	b.n	8002d8a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d78:	f7ff fb14 	bl	80023a4 <HAL_GetTick>
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	1ad3      	subs	r3, r2, r3
 8002d82:	2b64      	cmp	r3, #100	@ 0x64
 8002d84:	d901      	bls.n	8002d8a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002d86:	2303      	movs	r3, #3
 8002d88:	e262      	b.n	8003250 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002d8a:	4b88      	ldr	r3, [pc, #544]	@ (8002fac <HAL_RCC_OscConfig+0x504>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d1f0      	bne.n	8002d78 <HAL_RCC_OscConfig+0x2d0>
 8002d96:	e000      	b.n	8002d9a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 0302 	and.w	r3, r3, #2
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d060      	beq.n	8002e68 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002da6:	69bb      	ldr	r3, [r7, #24]
 8002da8:	2b04      	cmp	r3, #4
 8002daa:	d005      	beq.n	8002db8 <HAL_RCC_OscConfig+0x310>
 8002dac:	69bb      	ldr	r3, [r7, #24]
 8002dae:	2b0c      	cmp	r3, #12
 8002db0:	d119      	bne.n	8002de6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	2b02      	cmp	r3, #2
 8002db6:	d116      	bne.n	8002de6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002db8:	4b7c      	ldr	r3, [pc, #496]	@ (8002fac <HAL_RCC_OscConfig+0x504>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d005      	beq.n	8002dd0 <HAL_RCC_OscConfig+0x328>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	68db      	ldr	r3, [r3, #12]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d101      	bne.n	8002dd0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	e23f      	b.n	8003250 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dd0:	4b76      	ldr	r3, [pc, #472]	@ (8002fac <HAL_RCC_OscConfig+0x504>)
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	691b      	ldr	r3, [r3, #16]
 8002ddc:	061b      	lsls	r3, r3, #24
 8002dde:	4973      	ldr	r1, [pc, #460]	@ (8002fac <HAL_RCC_OscConfig+0x504>)
 8002de0:	4313      	orrs	r3, r2
 8002de2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002de4:	e040      	b.n	8002e68 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	68db      	ldr	r3, [r3, #12]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d023      	beq.n	8002e36 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002dee:	4b6f      	ldr	r3, [pc, #444]	@ (8002fac <HAL_RCC_OscConfig+0x504>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a6e      	ldr	r2, [pc, #440]	@ (8002fac <HAL_RCC_OscConfig+0x504>)
 8002df4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002df8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dfa:	f7ff fad3 	bl	80023a4 <HAL_GetTick>
 8002dfe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e00:	e008      	b.n	8002e14 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e02:	f7ff facf 	bl	80023a4 <HAL_GetTick>
 8002e06:	4602      	mov	r2, r0
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	1ad3      	subs	r3, r2, r3
 8002e0c:	2b02      	cmp	r3, #2
 8002e0e:	d901      	bls.n	8002e14 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002e10:	2303      	movs	r3, #3
 8002e12:	e21d      	b.n	8003250 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e14:	4b65      	ldr	r3, [pc, #404]	@ (8002fac <HAL_RCC_OscConfig+0x504>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d0f0      	beq.n	8002e02 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e20:	4b62      	ldr	r3, [pc, #392]	@ (8002fac <HAL_RCC_OscConfig+0x504>)
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	691b      	ldr	r3, [r3, #16]
 8002e2c:	061b      	lsls	r3, r3, #24
 8002e2e:	495f      	ldr	r1, [pc, #380]	@ (8002fac <HAL_RCC_OscConfig+0x504>)
 8002e30:	4313      	orrs	r3, r2
 8002e32:	604b      	str	r3, [r1, #4]
 8002e34:	e018      	b.n	8002e68 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e36:	4b5d      	ldr	r3, [pc, #372]	@ (8002fac <HAL_RCC_OscConfig+0x504>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a5c      	ldr	r2, [pc, #368]	@ (8002fac <HAL_RCC_OscConfig+0x504>)
 8002e3c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002e40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e42:	f7ff faaf 	bl	80023a4 <HAL_GetTick>
 8002e46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002e48:	e008      	b.n	8002e5c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e4a:	f7ff faab 	bl	80023a4 <HAL_GetTick>
 8002e4e:	4602      	mov	r2, r0
 8002e50:	693b      	ldr	r3, [r7, #16]
 8002e52:	1ad3      	subs	r3, r2, r3
 8002e54:	2b02      	cmp	r3, #2
 8002e56:	d901      	bls.n	8002e5c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002e58:	2303      	movs	r3, #3
 8002e5a:	e1f9      	b.n	8003250 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002e5c:	4b53      	ldr	r3, [pc, #332]	@ (8002fac <HAL_RCC_OscConfig+0x504>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d1f0      	bne.n	8002e4a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f003 0308 	and.w	r3, r3, #8
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d03c      	beq.n	8002eee <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	695b      	ldr	r3, [r3, #20]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d01c      	beq.n	8002eb6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e7c:	4b4b      	ldr	r3, [pc, #300]	@ (8002fac <HAL_RCC_OscConfig+0x504>)
 8002e7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e82:	4a4a      	ldr	r2, [pc, #296]	@ (8002fac <HAL_RCC_OscConfig+0x504>)
 8002e84:	f043 0301 	orr.w	r3, r3, #1
 8002e88:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e8c:	f7ff fa8a 	bl	80023a4 <HAL_GetTick>
 8002e90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002e92:	e008      	b.n	8002ea6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e94:	f7ff fa86 	bl	80023a4 <HAL_GetTick>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	1ad3      	subs	r3, r2, r3
 8002e9e:	2b02      	cmp	r3, #2
 8002ea0:	d901      	bls.n	8002ea6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002ea2:	2303      	movs	r3, #3
 8002ea4:	e1d4      	b.n	8003250 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002ea6:	4b41      	ldr	r3, [pc, #260]	@ (8002fac <HAL_RCC_OscConfig+0x504>)
 8002ea8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002eac:	f003 0302 	and.w	r3, r3, #2
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d0ef      	beq.n	8002e94 <HAL_RCC_OscConfig+0x3ec>
 8002eb4:	e01b      	b.n	8002eee <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002eb6:	4b3d      	ldr	r3, [pc, #244]	@ (8002fac <HAL_RCC_OscConfig+0x504>)
 8002eb8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ebc:	4a3b      	ldr	r2, [pc, #236]	@ (8002fac <HAL_RCC_OscConfig+0x504>)
 8002ebe:	f023 0301 	bic.w	r3, r3, #1
 8002ec2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ec6:	f7ff fa6d 	bl	80023a4 <HAL_GetTick>
 8002eca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ecc:	e008      	b.n	8002ee0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ece:	f7ff fa69 	bl	80023a4 <HAL_GetTick>
 8002ed2:	4602      	mov	r2, r0
 8002ed4:	693b      	ldr	r3, [r7, #16]
 8002ed6:	1ad3      	subs	r3, r2, r3
 8002ed8:	2b02      	cmp	r3, #2
 8002eda:	d901      	bls.n	8002ee0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002edc:	2303      	movs	r3, #3
 8002ede:	e1b7      	b.n	8003250 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ee0:	4b32      	ldr	r3, [pc, #200]	@ (8002fac <HAL_RCC_OscConfig+0x504>)
 8002ee2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ee6:	f003 0302 	and.w	r3, r3, #2
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d1ef      	bne.n	8002ece <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 0304 	and.w	r3, r3, #4
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	f000 80a6 	beq.w	8003048 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002efc:	2300      	movs	r3, #0
 8002efe:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002f00:	4b2a      	ldr	r3, [pc, #168]	@ (8002fac <HAL_RCC_OscConfig+0x504>)
 8002f02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f04:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d10d      	bne.n	8002f28 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f0c:	4b27      	ldr	r3, [pc, #156]	@ (8002fac <HAL_RCC_OscConfig+0x504>)
 8002f0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f10:	4a26      	ldr	r2, [pc, #152]	@ (8002fac <HAL_RCC_OscConfig+0x504>)
 8002f12:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f16:	6593      	str	r3, [r2, #88]	@ 0x58
 8002f18:	4b24      	ldr	r3, [pc, #144]	@ (8002fac <HAL_RCC_OscConfig+0x504>)
 8002f1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f1c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f20:	60bb      	str	r3, [r7, #8]
 8002f22:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f24:	2301      	movs	r3, #1
 8002f26:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f28:	4b21      	ldr	r3, [pc, #132]	@ (8002fb0 <HAL_RCC_OscConfig+0x508>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d118      	bne.n	8002f66 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f34:	4b1e      	ldr	r3, [pc, #120]	@ (8002fb0 <HAL_RCC_OscConfig+0x508>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a1d      	ldr	r2, [pc, #116]	@ (8002fb0 <HAL_RCC_OscConfig+0x508>)
 8002f3a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f3e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f40:	f7ff fa30 	bl	80023a4 <HAL_GetTick>
 8002f44:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f46:	e008      	b.n	8002f5a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f48:	f7ff fa2c 	bl	80023a4 <HAL_GetTick>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	1ad3      	subs	r3, r2, r3
 8002f52:	2b02      	cmp	r3, #2
 8002f54:	d901      	bls.n	8002f5a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002f56:	2303      	movs	r3, #3
 8002f58:	e17a      	b.n	8003250 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f5a:	4b15      	ldr	r3, [pc, #84]	@ (8002fb0 <HAL_RCC_OscConfig+0x508>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d0f0      	beq.n	8002f48 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	689b      	ldr	r3, [r3, #8]
 8002f6a:	2b01      	cmp	r3, #1
 8002f6c:	d108      	bne.n	8002f80 <HAL_RCC_OscConfig+0x4d8>
 8002f6e:	4b0f      	ldr	r3, [pc, #60]	@ (8002fac <HAL_RCC_OscConfig+0x504>)
 8002f70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f74:	4a0d      	ldr	r2, [pc, #52]	@ (8002fac <HAL_RCC_OscConfig+0x504>)
 8002f76:	f043 0301 	orr.w	r3, r3, #1
 8002f7a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002f7e:	e029      	b.n	8002fd4 <HAL_RCC_OscConfig+0x52c>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	2b05      	cmp	r3, #5
 8002f86:	d115      	bne.n	8002fb4 <HAL_RCC_OscConfig+0x50c>
 8002f88:	4b08      	ldr	r3, [pc, #32]	@ (8002fac <HAL_RCC_OscConfig+0x504>)
 8002f8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f8e:	4a07      	ldr	r2, [pc, #28]	@ (8002fac <HAL_RCC_OscConfig+0x504>)
 8002f90:	f043 0304 	orr.w	r3, r3, #4
 8002f94:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002f98:	4b04      	ldr	r3, [pc, #16]	@ (8002fac <HAL_RCC_OscConfig+0x504>)
 8002f9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f9e:	4a03      	ldr	r2, [pc, #12]	@ (8002fac <HAL_RCC_OscConfig+0x504>)
 8002fa0:	f043 0301 	orr.w	r3, r3, #1
 8002fa4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002fa8:	e014      	b.n	8002fd4 <HAL_RCC_OscConfig+0x52c>
 8002faa:	bf00      	nop
 8002fac:	40021000 	.word	0x40021000
 8002fb0:	40007000 	.word	0x40007000
 8002fb4:	4b9c      	ldr	r3, [pc, #624]	@ (8003228 <HAL_RCC_OscConfig+0x780>)
 8002fb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fba:	4a9b      	ldr	r2, [pc, #620]	@ (8003228 <HAL_RCC_OscConfig+0x780>)
 8002fbc:	f023 0301 	bic.w	r3, r3, #1
 8002fc0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002fc4:	4b98      	ldr	r3, [pc, #608]	@ (8003228 <HAL_RCC_OscConfig+0x780>)
 8002fc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fca:	4a97      	ldr	r2, [pc, #604]	@ (8003228 <HAL_RCC_OscConfig+0x780>)
 8002fcc:	f023 0304 	bic.w	r3, r3, #4
 8002fd0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d016      	beq.n	800300a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fdc:	f7ff f9e2 	bl	80023a4 <HAL_GetTick>
 8002fe0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002fe2:	e00a      	b.n	8002ffa <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fe4:	f7ff f9de 	bl	80023a4 <HAL_GetTick>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	1ad3      	subs	r3, r2, r3
 8002fee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d901      	bls.n	8002ffa <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002ff6:	2303      	movs	r3, #3
 8002ff8:	e12a      	b.n	8003250 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ffa:	4b8b      	ldr	r3, [pc, #556]	@ (8003228 <HAL_RCC_OscConfig+0x780>)
 8002ffc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003000:	f003 0302 	and.w	r3, r3, #2
 8003004:	2b00      	cmp	r3, #0
 8003006:	d0ed      	beq.n	8002fe4 <HAL_RCC_OscConfig+0x53c>
 8003008:	e015      	b.n	8003036 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800300a:	f7ff f9cb 	bl	80023a4 <HAL_GetTick>
 800300e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003010:	e00a      	b.n	8003028 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003012:	f7ff f9c7 	bl	80023a4 <HAL_GetTick>
 8003016:	4602      	mov	r2, r0
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	1ad3      	subs	r3, r2, r3
 800301c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003020:	4293      	cmp	r3, r2
 8003022:	d901      	bls.n	8003028 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003024:	2303      	movs	r3, #3
 8003026:	e113      	b.n	8003250 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003028:	4b7f      	ldr	r3, [pc, #508]	@ (8003228 <HAL_RCC_OscConfig+0x780>)
 800302a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800302e:	f003 0302 	and.w	r3, r3, #2
 8003032:	2b00      	cmp	r3, #0
 8003034:	d1ed      	bne.n	8003012 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003036:	7ffb      	ldrb	r3, [r7, #31]
 8003038:	2b01      	cmp	r3, #1
 800303a:	d105      	bne.n	8003048 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800303c:	4b7a      	ldr	r3, [pc, #488]	@ (8003228 <HAL_RCC_OscConfig+0x780>)
 800303e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003040:	4a79      	ldr	r2, [pc, #484]	@ (8003228 <HAL_RCC_OscConfig+0x780>)
 8003042:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003046:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800304c:	2b00      	cmp	r3, #0
 800304e:	f000 80fe 	beq.w	800324e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003056:	2b02      	cmp	r3, #2
 8003058:	f040 80d0 	bne.w	80031fc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800305c:	4b72      	ldr	r3, [pc, #456]	@ (8003228 <HAL_RCC_OscConfig+0x780>)
 800305e:	68db      	ldr	r3, [r3, #12]
 8003060:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	f003 0203 	and.w	r2, r3, #3
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800306c:	429a      	cmp	r2, r3
 800306e:	d130      	bne.n	80030d2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800307a:	3b01      	subs	r3, #1
 800307c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800307e:	429a      	cmp	r2, r3
 8003080:	d127      	bne.n	80030d2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003082:	697b      	ldr	r3, [r7, #20]
 8003084:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800308c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800308e:	429a      	cmp	r2, r3
 8003090:	d11f      	bne.n	80030d2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003098:	687a      	ldr	r2, [r7, #4]
 800309a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800309c:	2a07      	cmp	r2, #7
 800309e:	bf14      	ite	ne
 80030a0:	2201      	movne	r2, #1
 80030a2:	2200      	moveq	r2, #0
 80030a4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d113      	bne.n	80030d2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030b4:	085b      	lsrs	r3, r3, #1
 80030b6:	3b01      	subs	r3, #1
 80030b8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80030ba:	429a      	cmp	r2, r3
 80030bc:	d109      	bne.n	80030d2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030c8:	085b      	lsrs	r3, r3, #1
 80030ca:	3b01      	subs	r3, #1
 80030cc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80030ce:	429a      	cmp	r2, r3
 80030d0:	d06e      	beq.n	80031b0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80030d2:	69bb      	ldr	r3, [r7, #24]
 80030d4:	2b0c      	cmp	r3, #12
 80030d6:	d069      	beq.n	80031ac <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80030d8:	4b53      	ldr	r3, [pc, #332]	@ (8003228 <HAL_RCC_OscConfig+0x780>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d105      	bne.n	80030f0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80030e4:	4b50      	ldr	r3, [pc, #320]	@ (8003228 <HAL_RCC_OscConfig+0x780>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d001      	beq.n	80030f4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	e0ad      	b.n	8003250 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80030f4:	4b4c      	ldr	r3, [pc, #304]	@ (8003228 <HAL_RCC_OscConfig+0x780>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a4b      	ldr	r2, [pc, #300]	@ (8003228 <HAL_RCC_OscConfig+0x780>)
 80030fa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80030fe:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003100:	f7ff f950 	bl	80023a4 <HAL_GetTick>
 8003104:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003106:	e008      	b.n	800311a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003108:	f7ff f94c 	bl	80023a4 <HAL_GetTick>
 800310c:	4602      	mov	r2, r0
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	1ad3      	subs	r3, r2, r3
 8003112:	2b02      	cmp	r3, #2
 8003114:	d901      	bls.n	800311a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003116:	2303      	movs	r3, #3
 8003118:	e09a      	b.n	8003250 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800311a:	4b43      	ldr	r3, [pc, #268]	@ (8003228 <HAL_RCC_OscConfig+0x780>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003122:	2b00      	cmp	r3, #0
 8003124:	d1f0      	bne.n	8003108 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003126:	4b40      	ldr	r3, [pc, #256]	@ (8003228 <HAL_RCC_OscConfig+0x780>)
 8003128:	68da      	ldr	r2, [r3, #12]
 800312a:	4b40      	ldr	r3, [pc, #256]	@ (800322c <HAL_RCC_OscConfig+0x784>)
 800312c:	4013      	ands	r3, r2
 800312e:	687a      	ldr	r2, [r7, #4]
 8003130:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003132:	687a      	ldr	r2, [r7, #4]
 8003134:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003136:	3a01      	subs	r2, #1
 8003138:	0112      	lsls	r2, r2, #4
 800313a:	4311      	orrs	r1, r2
 800313c:	687a      	ldr	r2, [r7, #4]
 800313e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003140:	0212      	lsls	r2, r2, #8
 8003142:	4311      	orrs	r1, r2
 8003144:	687a      	ldr	r2, [r7, #4]
 8003146:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003148:	0852      	lsrs	r2, r2, #1
 800314a:	3a01      	subs	r2, #1
 800314c:	0552      	lsls	r2, r2, #21
 800314e:	4311      	orrs	r1, r2
 8003150:	687a      	ldr	r2, [r7, #4]
 8003152:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003154:	0852      	lsrs	r2, r2, #1
 8003156:	3a01      	subs	r2, #1
 8003158:	0652      	lsls	r2, r2, #25
 800315a:	4311      	orrs	r1, r2
 800315c:	687a      	ldr	r2, [r7, #4]
 800315e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003160:	0912      	lsrs	r2, r2, #4
 8003162:	0452      	lsls	r2, r2, #17
 8003164:	430a      	orrs	r2, r1
 8003166:	4930      	ldr	r1, [pc, #192]	@ (8003228 <HAL_RCC_OscConfig+0x780>)
 8003168:	4313      	orrs	r3, r2
 800316a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800316c:	4b2e      	ldr	r3, [pc, #184]	@ (8003228 <HAL_RCC_OscConfig+0x780>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a2d      	ldr	r2, [pc, #180]	@ (8003228 <HAL_RCC_OscConfig+0x780>)
 8003172:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003176:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003178:	4b2b      	ldr	r3, [pc, #172]	@ (8003228 <HAL_RCC_OscConfig+0x780>)
 800317a:	68db      	ldr	r3, [r3, #12]
 800317c:	4a2a      	ldr	r2, [pc, #168]	@ (8003228 <HAL_RCC_OscConfig+0x780>)
 800317e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003182:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003184:	f7ff f90e 	bl	80023a4 <HAL_GetTick>
 8003188:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800318a:	e008      	b.n	800319e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800318c:	f7ff f90a 	bl	80023a4 <HAL_GetTick>
 8003190:	4602      	mov	r2, r0
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	1ad3      	subs	r3, r2, r3
 8003196:	2b02      	cmp	r3, #2
 8003198:	d901      	bls.n	800319e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800319a:	2303      	movs	r3, #3
 800319c:	e058      	b.n	8003250 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800319e:	4b22      	ldr	r3, [pc, #136]	@ (8003228 <HAL_RCC_OscConfig+0x780>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d0f0      	beq.n	800318c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80031aa:	e050      	b.n	800324e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	e04f      	b.n	8003250 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031b0:	4b1d      	ldr	r3, [pc, #116]	@ (8003228 <HAL_RCC_OscConfig+0x780>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d148      	bne.n	800324e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80031bc:	4b1a      	ldr	r3, [pc, #104]	@ (8003228 <HAL_RCC_OscConfig+0x780>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a19      	ldr	r2, [pc, #100]	@ (8003228 <HAL_RCC_OscConfig+0x780>)
 80031c2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80031c6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80031c8:	4b17      	ldr	r3, [pc, #92]	@ (8003228 <HAL_RCC_OscConfig+0x780>)
 80031ca:	68db      	ldr	r3, [r3, #12]
 80031cc:	4a16      	ldr	r2, [pc, #88]	@ (8003228 <HAL_RCC_OscConfig+0x780>)
 80031ce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80031d2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80031d4:	f7ff f8e6 	bl	80023a4 <HAL_GetTick>
 80031d8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031da:	e008      	b.n	80031ee <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031dc:	f7ff f8e2 	bl	80023a4 <HAL_GetTick>
 80031e0:	4602      	mov	r2, r0
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	1ad3      	subs	r3, r2, r3
 80031e6:	2b02      	cmp	r3, #2
 80031e8:	d901      	bls.n	80031ee <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80031ea:	2303      	movs	r3, #3
 80031ec:	e030      	b.n	8003250 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031ee:	4b0e      	ldr	r3, [pc, #56]	@ (8003228 <HAL_RCC_OscConfig+0x780>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d0f0      	beq.n	80031dc <HAL_RCC_OscConfig+0x734>
 80031fa:	e028      	b.n	800324e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80031fc:	69bb      	ldr	r3, [r7, #24]
 80031fe:	2b0c      	cmp	r3, #12
 8003200:	d023      	beq.n	800324a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003202:	4b09      	ldr	r3, [pc, #36]	@ (8003228 <HAL_RCC_OscConfig+0x780>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a08      	ldr	r2, [pc, #32]	@ (8003228 <HAL_RCC_OscConfig+0x780>)
 8003208:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800320c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800320e:	f7ff f8c9 	bl	80023a4 <HAL_GetTick>
 8003212:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003214:	e00c      	b.n	8003230 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003216:	f7ff f8c5 	bl	80023a4 <HAL_GetTick>
 800321a:	4602      	mov	r2, r0
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	1ad3      	subs	r3, r2, r3
 8003220:	2b02      	cmp	r3, #2
 8003222:	d905      	bls.n	8003230 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003224:	2303      	movs	r3, #3
 8003226:	e013      	b.n	8003250 <HAL_RCC_OscConfig+0x7a8>
 8003228:	40021000 	.word	0x40021000
 800322c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003230:	4b09      	ldr	r3, [pc, #36]	@ (8003258 <HAL_RCC_OscConfig+0x7b0>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003238:	2b00      	cmp	r3, #0
 800323a:	d1ec      	bne.n	8003216 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800323c:	4b06      	ldr	r3, [pc, #24]	@ (8003258 <HAL_RCC_OscConfig+0x7b0>)
 800323e:	68da      	ldr	r2, [r3, #12]
 8003240:	4905      	ldr	r1, [pc, #20]	@ (8003258 <HAL_RCC_OscConfig+0x7b0>)
 8003242:	4b06      	ldr	r3, [pc, #24]	@ (800325c <HAL_RCC_OscConfig+0x7b4>)
 8003244:	4013      	ands	r3, r2
 8003246:	60cb      	str	r3, [r1, #12]
 8003248:	e001      	b.n	800324e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	e000      	b.n	8003250 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800324e:	2300      	movs	r3, #0
}
 8003250:	4618      	mov	r0, r3
 8003252:	3720      	adds	r7, #32
 8003254:	46bd      	mov	sp, r7
 8003256:	bd80      	pop	{r7, pc}
 8003258:	40021000 	.word	0x40021000
 800325c:	feeefffc 	.word	0xfeeefffc

08003260 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b084      	sub	sp, #16
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
 8003268:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d101      	bne.n	8003274 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003270:	2301      	movs	r3, #1
 8003272:	e0e7      	b.n	8003444 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003274:	4b75      	ldr	r3, [pc, #468]	@ (800344c <HAL_RCC_ClockConfig+0x1ec>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f003 0307 	and.w	r3, r3, #7
 800327c:	683a      	ldr	r2, [r7, #0]
 800327e:	429a      	cmp	r2, r3
 8003280:	d910      	bls.n	80032a4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003282:	4b72      	ldr	r3, [pc, #456]	@ (800344c <HAL_RCC_ClockConfig+0x1ec>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f023 0207 	bic.w	r2, r3, #7
 800328a:	4970      	ldr	r1, [pc, #448]	@ (800344c <HAL_RCC_ClockConfig+0x1ec>)
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	4313      	orrs	r3, r2
 8003290:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003292:	4b6e      	ldr	r3, [pc, #440]	@ (800344c <HAL_RCC_ClockConfig+0x1ec>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f003 0307 	and.w	r3, r3, #7
 800329a:	683a      	ldr	r2, [r7, #0]
 800329c:	429a      	cmp	r2, r3
 800329e:	d001      	beq.n	80032a4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80032a0:	2301      	movs	r3, #1
 80032a2:	e0cf      	b.n	8003444 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f003 0302 	and.w	r3, r3, #2
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d010      	beq.n	80032d2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	689a      	ldr	r2, [r3, #8]
 80032b4:	4b66      	ldr	r3, [pc, #408]	@ (8003450 <HAL_RCC_ClockConfig+0x1f0>)
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80032bc:	429a      	cmp	r2, r3
 80032be:	d908      	bls.n	80032d2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032c0:	4b63      	ldr	r3, [pc, #396]	@ (8003450 <HAL_RCC_ClockConfig+0x1f0>)
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	689b      	ldr	r3, [r3, #8]
 80032cc:	4960      	ldr	r1, [pc, #384]	@ (8003450 <HAL_RCC_ClockConfig+0x1f0>)
 80032ce:	4313      	orrs	r3, r2
 80032d0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f003 0301 	and.w	r3, r3, #1
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d04c      	beq.n	8003378 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	2b03      	cmp	r3, #3
 80032e4:	d107      	bne.n	80032f6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032e6:	4b5a      	ldr	r3, [pc, #360]	@ (8003450 <HAL_RCC_ClockConfig+0x1f0>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d121      	bne.n	8003336 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	e0a6      	b.n	8003444 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	2b02      	cmp	r3, #2
 80032fc:	d107      	bne.n	800330e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80032fe:	4b54      	ldr	r3, [pc, #336]	@ (8003450 <HAL_RCC_ClockConfig+0x1f0>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003306:	2b00      	cmp	r3, #0
 8003308:	d115      	bne.n	8003336 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	e09a      	b.n	8003444 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d107      	bne.n	8003326 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003316:	4b4e      	ldr	r3, [pc, #312]	@ (8003450 <HAL_RCC_ClockConfig+0x1f0>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f003 0302 	and.w	r3, r3, #2
 800331e:	2b00      	cmp	r3, #0
 8003320:	d109      	bne.n	8003336 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	e08e      	b.n	8003444 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003326:	4b4a      	ldr	r3, [pc, #296]	@ (8003450 <HAL_RCC_ClockConfig+0x1f0>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800332e:	2b00      	cmp	r3, #0
 8003330:	d101      	bne.n	8003336 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	e086      	b.n	8003444 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003336:	4b46      	ldr	r3, [pc, #280]	@ (8003450 <HAL_RCC_ClockConfig+0x1f0>)
 8003338:	689b      	ldr	r3, [r3, #8]
 800333a:	f023 0203 	bic.w	r2, r3, #3
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	4943      	ldr	r1, [pc, #268]	@ (8003450 <HAL_RCC_ClockConfig+0x1f0>)
 8003344:	4313      	orrs	r3, r2
 8003346:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003348:	f7ff f82c 	bl	80023a4 <HAL_GetTick>
 800334c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800334e:	e00a      	b.n	8003366 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003350:	f7ff f828 	bl	80023a4 <HAL_GetTick>
 8003354:	4602      	mov	r2, r0
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	1ad3      	subs	r3, r2, r3
 800335a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800335e:	4293      	cmp	r3, r2
 8003360:	d901      	bls.n	8003366 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003362:	2303      	movs	r3, #3
 8003364:	e06e      	b.n	8003444 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003366:	4b3a      	ldr	r3, [pc, #232]	@ (8003450 <HAL_RCC_ClockConfig+0x1f0>)
 8003368:	689b      	ldr	r3, [r3, #8]
 800336a:	f003 020c 	and.w	r2, r3, #12
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	009b      	lsls	r3, r3, #2
 8003374:	429a      	cmp	r2, r3
 8003376:	d1eb      	bne.n	8003350 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f003 0302 	and.w	r3, r3, #2
 8003380:	2b00      	cmp	r3, #0
 8003382:	d010      	beq.n	80033a6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	689a      	ldr	r2, [r3, #8]
 8003388:	4b31      	ldr	r3, [pc, #196]	@ (8003450 <HAL_RCC_ClockConfig+0x1f0>)
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003390:	429a      	cmp	r2, r3
 8003392:	d208      	bcs.n	80033a6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003394:	4b2e      	ldr	r3, [pc, #184]	@ (8003450 <HAL_RCC_ClockConfig+0x1f0>)
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	689b      	ldr	r3, [r3, #8]
 80033a0:	492b      	ldr	r1, [pc, #172]	@ (8003450 <HAL_RCC_ClockConfig+0x1f0>)
 80033a2:	4313      	orrs	r3, r2
 80033a4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80033a6:	4b29      	ldr	r3, [pc, #164]	@ (800344c <HAL_RCC_ClockConfig+0x1ec>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f003 0307 	and.w	r3, r3, #7
 80033ae:	683a      	ldr	r2, [r7, #0]
 80033b0:	429a      	cmp	r2, r3
 80033b2:	d210      	bcs.n	80033d6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033b4:	4b25      	ldr	r3, [pc, #148]	@ (800344c <HAL_RCC_ClockConfig+0x1ec>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f023 0207 	bic.w	r2, r3, #7
 80033bc:	4923      	ldr	r1, [pc, #140]	@ (800344c <HAL_RCC_ClockConfig+0x1ec>)
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	4313      	orrs	r3, r2
 80033c2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033c4:	4b21      	ldr	r3, [pc, #132]	@ (800344c <HAL_RCC_ClockConfig+0x1ec>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f003 0307 	and.w	r3, r3, #7
 80033cc:	683a      	ldr	r2, [r7, #0]
 80033ce:	429a      	cmp	r2, r3
 80033d0:	d001      	beq.n	80033d6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
 80033d4:	e036      	b.n	8003444 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f003 0304 	and.w	r3, r3, #4
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d008      	beq.n	80033f4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033e2:	4b1b      	ldr	r3, [pc, #108]	@ (8003450 <HAL_RCC_ClockConfig+0x1f0>)
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	68db      	ldr	r3, [r3, #12]
 80033ee:	4918      	ldr	r1, [pc, #96]	@ (8003450 <HAL_RCC_ClockConfig+0x1f0>)
 80033f0:	4313      	orrs	r3, r2
 80033f2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f003 0308 	and.w	r3, r3, #8
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d009      	beq.n	8003414 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003400:	4b13      	ldr	r3, [pc, #76]	@ (8003450 <HAL_RCC_ClockConfig+0x1f0>)
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	691b      	ldr	r3, [r3, #16]
 800340c:	00db      	lsls	r3, r3, #3
 800340e:	4910      	ldr	r1, [pc, #64]	@ (8003450 <HAL_RCC_ClockConfig+0x1f0>)
 8003410:	4313      	orrs	r3, r2
 8003412:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003414:	f000 f824 	bl	8003460 <HAL_RCC_GetSysClockFreq>
 8003418:	4602      	mov	r2, r0
 800341a:	4b0d      	ldr	r3, [pc, #52]	@ (8003450 <HAL_RCC_ClockConfig+0x1f0>)
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	091b      	lsrs	r3, r3, #4
 8003420:	f003 030f 	and.w	r3, r3, #15
 8003424:	490b      	ldr	r1, [pc, #44]	@ (8003454 <HAL_RCC_ClockConfig+0x1f4>)
 8003426:	5ccb      	ldrb	r3, [r1, r3]
 8003428:	f003 031f 	and.w	r3, r3, #31
 800342c:	fa22 f303 	lsr.w	r3, r2, r3
 8003430:	4a09      	ldr	r2, [pc, #36]	@ (8003458 <HAL_RCC_ClockConfig+0x1f8>)
 8003432:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003434:	4b09      	ldr	r3, [pc, #36]	@ (800345c <HAL_RCC_ClockConfig+0x1fc>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4618      	mov	r0, r3
 800343a:	f7fe fdad 	bl	8001f98 <HAL_InitTick>
 800343e:	4603      	mov	r3, r0
 8003440:	72fb      	strb	r3, [r7, #11]

  return status;
 8003442:	7afb      	ldrb	r3, [r7, #11]
}
 8003444:	4618      	mov	r0, r3
 8003446:	3710      	adds	r7, #16
 8003448:	46bd      	mov	sp, r7
 800344a:	bd80      	pop	{r7, pc}
 800344c:	40022000 	.word	0x40022000
 8003450:	40021000 	.word	0x40021000
 8003454:	0800cb2c 	.word	0x0800cb2c
 8003458:	20000008 	.word	0x20000008
 800345c:	2000000c 	.word	0x2000000c

08003460 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003460:	b480      	push	{r7}
 8003462:	b089      	sub	sp, #36	@ 0x24
 8003464:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003466:	2300      	movs	r3, #0
 8003468:	61fb      	str	r3, [r7, #28]
 800346a:	2300      	movs	r3, #0
 800346c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800346e:	4b3e      	ldr	r3, [pc, #248]	@ (8003568 <HAL_RCC_GetSysClockFreq+0x108>)
 8003470:	689b      	ldr	r3, [r3, #8]
 8003472:	f003 030c 	and.w	r3, r3, #12
 8003476:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003478:	4b3b      	ldr	r3, [pc, #236]	@ (8003568 <HAL_RCC_GetSysClockFreq+0x108>)
 800347a:	68db      	ldr	r3, [r3, #12]
 800347c:	f003 0303 	and.w	r3, r3, #3
 8003480:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d005      	beq.n	8003494 <HAL_RCC_GetSysClockFreq+0x34>
 8003488:	693b      	ldr	r3, [r7, #16]
 800348a:	2b0c      	cmp	r3, #12
 800348c:	d121      	bne.n	80034d2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	2b01      	cmp	r3, #1
 8003492:	d11e      	bne.n	80034d2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003494:	4b34      	ldr	r3, [pc, #208]	@ (8003568 <HAL_RCC_GetSysClockFreq+0x108>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f003 0308 	and.w	r3, r3, #8
 800349c:	2b00      	cmp	r3, #0
 800349e:	d107      	bne.n	80034b0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80034a0:	4b31      	ldr	r3, [pc, #196]	@ (8003568 <HAL_RCC_GetSysClockFreq+0x108>)
 80034a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80034a6:	0a1b      	lsrs	r3, r3, #8
 80034a8:	f003 030f 	and.w	r3, r3, #15
 80034ac:	61fb      	str	r3, [r7, #28]
 80034ae:	e005      	b.n	80034bc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80034b0:	4b2d      	ldr	r3, [pc, #180]	@ (8003568 <HAL_RCC_GetSysClockFreq+0x108>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	091b      	lsrs	r3, r3, #4
 80034b6:	f003 030f 	and.w	r3, r3, #15
 80034ba:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80034bc:	4a2b      	ldr	r2, [pc, #172]	@ (800356c <HAL_RCC_GetSysClockFreq+0x10c>)
 80034be:	69fb      	ldr	r3, [r7, #28]
 80034c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034c4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d10d      	bne.n	80034e8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80034cc:	69fb      	ldr	r3, [r7, #28]
 80034ce:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80034d0:	e00a      	b.n	80034e8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	2b04      	cmp	r3, #4
 80034d6:	d102      	bne.n	80034de <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80034d8:	4b25      	ldr	r3, [pc, #148]	@ (8003570 <HAL_RCC_GetSysClockFreq+0x110>)
 80034da:	61bb      	str	r3, [r7, #24]
 80034dc:	e004      	b.n	80034e8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	2b08      	cmp	r3, #8
 80034e2:	d101      	bne.n	80034e8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80034e4:	4b23      	ldr	r3, [pc, #140]	@ (8003574 <HAL_RCC_GetSysClockFreq+0x114>)
 80034e6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80034e8:	693b      	ldr	r3, [r7, #16]
 80034ea:	2b0c      	cmp	r3, #12
 80034ec:	d134      	bne.n	8003558 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80034ee:	4b1e      	ldr	r3, [pc, #120]	@ (8003568 <HAL_RCC_GetSysClockFreq+0x108>)
 80034f0:	68db      	ldr	r3, [r3, #12]
 80034f2:	f003 0303 	and.w	r3, r3, #3
 80034f6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	2b02      	cmp	r3, #2
 80034fc:	d003      	beq.n	8003506 <HAL_RCC_GetSysClockFreq+0xa6>
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	2b03      	cmp	r3, #3
 8003502:	d003      	beq.n	800350c <HAL_RCC_GetSysClockFreq+0xac>
 8003504:	e005      	b.n	8003512 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003506:	4b1a      	ldr	r3, [pc, #104]	@ (8003570 <HAL_RCC_GetSysClockFreq+0x110>)
 8003508:	617b      	str	r3, [r7, #20]
      break;
 800350a:	e005      	b.n	8003518 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800350c:	4b19      	ldr	r3, [pc, #100]	@ (8003574 <HAL_RCC_GetSysClockFreq+0x114>)
 800350e:	617b      	str	r3, [r7, #20]
      break;
 8003510:	e002      	b.n	8003518 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003512:	69fb      	ldr	r3, [r7, #28]
 8003514:	617b      	str	r3, [r7, #20]
      break;
 8003516:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003518:	4b13      	ldr	r3, [pc, #76]	@ (8003568 <HAL_RCC_GetSysClockFreq+0x108>)
 800351a:	68db      	ldr	r3, [r3, #12]
 800351c:	091b      	lsrs	r3, r3, #4
 800351e:	f003 0307 	and.w	r3, r3, #7
 8003522:	3301      	adds	r3, #1
 8003524:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003526:	4b10      	ldr	r3, [pc, #64]	@ (8003568 <HAL_RCC_GetSysClockFreq+0x108>)
 8003528:	68db      	ldr	r3, [r3, #12]
 800352a:	0a1b      	lsrs	r3, r3, #8
 800352c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003530:	697a      	ldr	r2, [r7, #20]
 8003532:	fb03 f202 	mul.w	r2, r3, r2
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	fbb2 f3f3 	udiv	r3, r2, r3
 800353c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800353e:	4b0a      	ldr	r3, [pc, #40]	@ (8003568 <HAL_RCC_GetSysClockFreq+0x108>)
 8003540:	68db      	ldr	r3, [r3, #12]
 8003542:	0e5b      	lsrs	r3, r3, #25
 8003544:	f003 0303 	and.w	r3, r3, #3
 8003548:	3301      	adds	r3, #1
 800354a:	005b      	lsls	r3, r3, #1
 800354c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800354e:	697a      	ldr	r2, [r7, #20]
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	fbb2 f3f3 	udiv	r3, r2, r3
 8003556:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003558:	69bb      	ldr	r3, [r7, #24]
}
 800355a:	4618      	mov	r0, r3
 800355c:	3724      	adds	r7, #36	@ 0x24
 800355e:	46bd      	mov	sp, r7
 8003560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003564:	4770      	bx	lr
 8003566:	bf00      	nop
 8003568:	40021000 	.word	0x40021000
 800356c:	0800cb44 	.word	0x0800cb44
 8003570:	00f42400 	.word	0x00f42400
 8003574:	007a1200 	.word	0x007a1200

08003578 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003578:	b480      	push	{r7}
 800357a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800357c:	4b03      	ldr	r3, [pc, #12]	@ (800358c <HAL_RCC_GetHCLKFreq+0x14>)
 800357e:	681b      	ldr	r3, [r3, #0]
}
 8003580:	4618      	mov	r0, r3
 8003582:	46bd      	mov	sp, r7
 8003584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003588:	4770      	bx	lr
 800358a:	bf00      	nop
 800358c:	20000008 	.word	0x20000008

08003590 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003594:	f7ff fff0 	bl	8003578 <HAL_RCC_GetHCLKFreq>
 8003598:	4602      	mov	r2, r0
 800359a:	4b06      	ldr	r3, [pc, #24]	@ (80035b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	0a1b      	lsrs	r3, r3, #8
 80035a0:	f003 0307 	and.w	r3, r3, #7
 80035a4:	4904      	ldr	r1, [pc, #16]	@ (80035b8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80035a6:	5ccb      	ldrb	r3, [r1, r3]
 80035a8:	f003 031f 	and.w	r3, r3, #31
 80035ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035b0:	4618      	mov	r0, r3
 80035b2:	bd80      	pop	{r7, pc}
 80035b4:	40021000 	.word	0x40021000
 80035b8:	0800cb3c 	.word	0x0800cb3c

080035bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80035c0:	f7ff ffda 	bl	8003578 <HAL_RCC_GetHCLKFreq>
 80035c4:	4602      	mov	r2, r0
 80035c6:	4b06      	ldr	r3, [pc, #24]	@ (80035e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80035c8:	689b      	ldr	r3, [r3, #8]
 80035ca:	0adb      	lsrs	r3, r3, #11
 80035cc:	f003 0307 	and.w	r3, r3, #7
 80035d0:	4904      	ldr	r1, [pc, #16]	@ (80035e4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80035d2:	5ccb      	ldrb	r3, [r1, r3]
 80035d4:	f003 031f 	and.w	r3, r3, #31
 80035d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035dc:	4618      	mov	r0, r3
 80035de:	bd80      	pop	{r7, pc}
 80035e0:	40021000 	.word	0x40021000
 80035e4:	0800cb3c 	.word	0x0800cb3c

080035e8 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b083      	sub	sp, #12
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
 80035f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	220f      	movs	r2, #15
 80035f6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80035f8:	4b12      	ldr	r3, [pc, #72]	@ (8003644 <HAL_RCC_GetClockConfig+0x5c>)
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	f003 0203 	and.w	r2, r3, #3
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003604:	4b0f      	ldr	r3, [pc, #60]	@ (8003644 <HAL_RCC_GetClockConfig+0x5c>)
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003610:	4b0c      	ldr	r3, [pc, #48]	@ (8003644 <HAL_RCC_GetClockConfig+0x5c>)
 8003612:	689b      	ldr	r3, [r3, #8]
 8003614:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800361c:	4b09      	ldr	r3, [pc, #36]	@ (8003644 <HAL_RCC_GetClockConfig+0x5c>)
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	08db      	lsrs	r3, r3, #3
 8003622:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800362a:	4b07      	ldr	r3, [pc, #28]	@ (8003648 <HAL_RCC_GetClockConfig+0x60>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f003 0207 	and.w	r2, r3, #7
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	601a      	str	r2, [r3, #0]
}
 8003636:	bf00      	nop
 8003638:	370c      	adds	r7, #12
 800363a:	46bd      	mov	sp, r7
 800363c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003640:	4770      	bx	lr
 8003642:	bf00      	nop
 8003644:	40021000 	.word	0x40021000
 8003648:	40022000 	.word	0x40022000

0800364c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b086      	sub	sp, #24
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003654:	2300      	movs	r3, #0
 8003656:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003658:	4b2a      	ldr	r3, [pc, #168]	@ (8003704 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800365a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800365c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003660:	2b00      	cmp	r3, #0
 8003662:	d003      	beq.n	800366c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003664:	f7ff f9bc 	bl	80029e0 <HAL_PWREx_GetVoltageRange>
 8003668:	6178      	str	r0, [r7, #20]
 800366a:	e014      	b.n	8003696 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800366c:	4b25      	ldr	r3, [pc, #148]	@ (8003704 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800366e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003670:	4a24      	ldr	r2, [pc, #144]	@ (8003704 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003672:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003676:	6593      	str	r3, [r2, #88]	@ 0x58
 8003678:	4b22      	ldr	r3, [pc, #136]	@ (8003704 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800367a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800367c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003680:	60fb      	str	r3, [r7, #12]
 8003682:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003684:	f7ff f9ac 	bl	80029e0 <HAL_PWREx_GetVoltageRange>
 8003688:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800368a:	4b1e      	ldr	r3, [pc, #120]	@ (8003704 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800368c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800368e:	4a1d      	ldr	r2, [pc, #116]	@ (8003704 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003690:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003694:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003696:	697b      	ldr	r3, [r7, #20]
 8003698:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800369c:	d10b      	bne.n	80036b6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2b80      	cmp	r3, #128	@ 0x80
 80036a2:	d919      	bls.n	80036d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2ba0      	cmp	r3, #160	@ 0xa0
 80036a8:	d902      	bls.n	80036b0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80036aa:	2302      	movs	r3, #2
 80036ac:	613b      	str	r3, [r7, #16]
 80036ae:	e013      	b.n	80036d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80036b0:	2301      	movs	r3, #1
 80036b2:	613b      	str	r3, [r7, #16]
 80036b4:	e010      	b.n	80036d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2b80      	cmp	r3, #128	@ 0x80
 80036ba:	d902      	bls.n	80036c2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80036bc:	2303      	movs	r3, #3
 80036be:	613b      	str	r3, [r7, #16]
 80036c0:	e00a      	b.n	80036d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2b80      	cmp	r3, #128	@ 0x80
 80036c6:	d102      	bne.n	80036ce <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80036c8:	2302      	movs	r3, #2
 80036ca:	613b      	str	r3, [r7, #16]
 80036cc:	e004      	b.n	80036d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2b70      	cmp	r3, #112	@ 0x70
 80036d2:	d101      	bne.n	80036d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80036d4:	2301      	movs	r3, #1
 80036d6:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80036d8:	4b0b      	ldr	r3, [pc, #44]	@ (8003708 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f023 0207 	bic.w	r2, r3, #7
 80036e0:	4909      	ldr	r1, [pc, #36]	@ (8003708 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	4313      	orrs	r3, r2
 80036e6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80036e8:	4b07      	ldr	r3, [pc, #28]	@ (8003708 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f003 0307 	and.w	r3, r3, #7
 80036f0:	693a      	ldr	r2, [r7, #16]
 80036f2:	429a      	cmp	r2, r3
 80036f4:	d001      	beq.n	80036fa <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	e000      	b.n	80036fc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80036fa:	2300      	movs	r3, #0
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	3718      	adds	r7, #24
 8003700:	46bd      	mov	sp, r7
 8003702:	bd80      	pop	{r7, pc}
 8003704:	40021000 	.word	0x40021000
 8003708:	40022000 	.word	0x40022000

0800370c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b086      	sub	sp, #24
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003714:	2300      	movs	r3, #0
 8003716:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003718:	2300      	movs	r3, #0
 800371a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003724:	2b00      	cmp	r3, #0
 8003726:	d041      	beq.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800372c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003730:	d02a      	beq.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003732:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003736:	d824      	bhi.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003738:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800373c:	d008      	beq.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800373e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003742:	d81e      	bhi.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003744:	2b00      	cmp	r3, #0
 8003746:	d00a      	beq.n	800375e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003748:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800374c:	d010      	beq.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800374e:	e018      	b.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003750:	4b86      	ldr	r3, [pc, #536]	@ (800396c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003752:	68db      	ldr	r3, [r3, #12]
 8003754:	4a85      	ldr	r2, [pc, #532]	@ (800396c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003756:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800375a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800375c:	e015      	b.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	3304      	adds	r3, #4
 8003762:	2100      	movs	r1, #0
 8003764:	4618      	mov	r0, r3
 8003766:	f000 fabb 	bl	8003ce0 <RCCEx_PLLSAI1_Config>
 800376a:	4603      	mov	r3, r0
 800376c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800376e:	e00c      	b.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	3320      	adds	r3, #32
 8003774:	2100      	movs	r1, #0
 8003776:	4618      	mov	r0, r3
 8003778:	f000 fba6 	bl	8003ec8 <RCCEx_PLLSAI2_Config>
 800377c:	4603      	mov	r3, r0
 800377e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003780:	e003      	b.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003782:	2301      	movs	r3, #1
 8003784:	74fb      	strb	r3, [r7, #19]
      break;
 8003786:	e000      	b.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003788:	bf00      	nop
    }

    if(ret == HAL_OK)
 800378a:	7cfb      	ldrb	r3, [r7, #19]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d10b      	bne.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003790:	4b76      	ldr	r3, [pc, #472]	@ (800396c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003792:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003796:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800379e:	4973      	ldr	r1, [pc, #460]	@ (800396c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037a0:	4313      	orrs	r3, r2
 80037a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80037a6:	e001      	b.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037a8:	7cfb      	ldrb	r3, [r7, #19]
 80037aa:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d041      	beq.n	800383c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80037bc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80037c0:	d02a      	beq.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80037c2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80037c6:	d824      	bhi.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80037c8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80037cc:	d008      	beq.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80037ce:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80037d2:	d81e      	bhi.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d00a      	beq.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80037d8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80037dc:	d010      	beq.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80037de:	e018      	b.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80037e0:	4b62      	ldr	r3, [pc, #392]	@ (800396c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037e2:	68db      	ldr	r3, [r3, #12]
 80037e4:	4a61      	ldr	r2, [pc, #388]	@ (800396c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037e6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037ea:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80037ec:	e015      	b.n	800381a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	3304      	adds	r3, #4
 80037f2:	2100      	movs	r1, #0
 80037f4:	4618      	mov	r0, r3
 80037f6:	f000 fa73 	bl	8003ce0 <RCCEx_PLLSAI1_Config>
 80037fa:	4603      	mov	r3, r0
 80037fc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80037fe:	e00c      	b.n	800381a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	3320      	adds	r3, #32
 8003804:	2100      	movs	r1, #0
 8003806:	4618      	mov	r0, r3
 8003808:	f000 fb5e 	bl	8003ec8 <RCCEx_PLLSAI2_Config>
 800380c:	4603      	mov	r3, r0
 800380e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003810:	e003      	b.n	800381a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	74fb      	strb	r3, [r7, #19]
      break;
 8003816:	e000      	b.n	800381a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003818:	bf00      	nop
    }

    if(ret == HAL_OK)
 800381a:	7cfb      	ldrb	r3, [r7, #19]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d10b      	bne.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003820:	4b52      	ldr	r3, [pc, #328]	@ (800396c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003822:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003826:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800382e:	494f      	ldr	r1, [pc, #316]	@ (800396c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003830:	4313      	orrs	r3, r2
 8003832:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003836:	e001      	b.n	800383c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003838:	7cfb      	ldrb	r3, [r7, #19]
 800383a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003844:	2b00      	cmp	r3, #0
 8003846:	f000 80a0 	beq.w	800398a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800384a:	2300      	movs	r3, #0
 800384c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800384e:	4b47      	ldr	r3, [pc, #284]	@ (800396c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003850:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003852:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003856:	2b00      	cmp	r3, #0
 8003858:	d101      	bne.n	800385e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800385a:	2301      	movs	r3, #1
 800385c:	e000      	b.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800385e:	2300      	movs	r3, #0
 8003860:	2b00      	cmp	r3, #0
 8003862:	d00d      	beq.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003864:	4b41      	ldr	r3, [pc, #260]	@ (800396c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003866:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003868:	4a40      	ldr	r2, [pc, #256]	@ (800396c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800386a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800386e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003870:	4b3e      	ldr	r3, [pc, #248]	@ (800396c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003872:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003874:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003878:	60bb      	str	r3, [r7, #8]
 800387a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800387c:	2301      	movs	r3, #1
 800387e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003880:	4b3b      	ldr	r3, [pc, #236]	@ (8003970 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a3a      	ldr	r2, [pc, #232]	@ (8003970 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003886:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800388a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800388c:	f7fe fd8a 	bl	80023a4 <HAL_GetTick>
 8003890:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003892:	e009      	b.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003894:	f7fe fd86 	bl	80023a4 <HAL_GetTick>
 8003898:	4602      	mov	r2, r0
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	1ad3      	subs	r3, r2, r3
 800389e:	2b02      	cmp	r3, #2
 80038a0:	d902      	bls.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80038a2:	2303      	movs	r3, #3
 80038a4:	74fb      	strb	r3, [r7, #19]
        break;
 80038a6:	e005      	b.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80038a8:	4b31      	ldr	r3, [pc, #196]	@ (8003970 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d0ef      	beq.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80038b4:	7cfb      	ldrb	r3, [r7, #19]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d15c      	bne.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80038ba:	4b2c      	ldr	r3, [pc, #176]	@ (800396c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038c0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80038c4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80038c6:	697b      	ldr	r3, [r7, #20]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d01f      	beq.n	800390c <HAL_RCCEx_PeriphCLKConfig+0x200>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80038d2:	697a      	ldr	r2, [r7, #20]
 80038d4:	429a      	cmp	r2, r3
 80038d6:	d019      	beq.n	800390c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80038d8:	4b24      	ldr	r3, [pc, #144]	@ (800396c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038de:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80038e2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80038e4:	4b21      	ldr	r3, [pc, #132]	@ (800396c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038ea:	4a20      	ldr	r2, [pc, #128]	@ (800396c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80038f4:	4b1d      	ldr	r3, [pc, #116]	@ (800396c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038fa:	4a1c      	ldr	r2, [pc, #112]	@ (800396c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038fc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003900:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003904:	4a19      	ldr	r2, [pc, #100]	@ (800396c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	f003 0301 	and.w	r3, r3, #1
 8003912:	2b00      	cmp	r3, #0
 8003914:	d016      	beq.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003916:	f7fe fd45 	bl	80023a4 <HAL_GetTick>
 800391a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800391c:	e00b      	b.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800391e:	f7fe fd41 	bl	80023a4 <HAL_GetTick>
 8003922:	4602      	mov	r2, r0
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	1ad3      	subs	r3, r2, r3
 8003928:	f241 3288 	movw	r2, #5000	@ 0x1388
 800392c:	4293      	cmp	r3, r2
 800392e:	d902      	bls.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003930:	2303      	movs	r3, #3
 8003932:	74fb      	strb	r3, [r7, #19]
            break;
 8003934:	e006      	b.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003936:	4b0d      	ldr	r3, [pc, #52]	@ (800396c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003938:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800393c:	f003 0302 	and.w	r3, r3, #2
 8003940:	2b00      	cmp	r3, #0
 8003942:	d0ec      	beq.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003944:	7cfb      	ldrb	r3, [r7, #19]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d10c      	bne.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800394a:	4b08      	ldr	r3, [pc, #32]	@ (800396c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800394c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003950:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800395a:	4904      	ldr	r1, [pc, #16]	@ (800396c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800395c:	4313      	orrs	r3, r2
 800395e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003962:	e009      	b.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003964:	7cfb      	ldrb	r3, [r7, #19]
 8003966:	74bb      	strb	r3, [r7, #18]
 8003968:	e006      	b.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800396a:	bf00      	nop
 800396c:	40021000 	.word	0x40021000
 8003970:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003974:	7cfb      	ldrb	r3, [r7, #19]
 8003976:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003978:	7c7b      	ldrb	r3, [r7, #17]
 800397a:	2b01      	cmp	r3, #1
 800397c:	d105      	bne.n	800398a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800397e:	4b9e      	ldr	r3, [pc, #632]	@ (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003980:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003982:	4a9d      	ldr	r2, [pc, #628]	@ (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003984:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003988:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f003 0301 	and.w	r3, r3, #1
 8003992:	2b00      	cmp	r3, #0
 8003994:	d00a      	beq.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003996:	4b98      	ldr	r3, [pc, #608]	@ (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003998:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800399c:	f023 0203 	bic.w	r2, r3, #3
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039a4:	4994      	ldr	r1, [pc, #592]	@ (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039a6:	4313      	orrs	r3, r2
 80039a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f003 0302 	and.w	r3, r3, #2
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d00a      	beq.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80039b8:	4b8f      	ldr	r3, [pc, #572]	@ (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039be:	f023 020c 	bic.w	r2, r3, #12
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039c6:	498c      	ldr	r1, [pc, #560]	@ (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039c8:	4313      	orrs	r3, r2
 80039ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f003 0304 	and.w	r3, r3, #4
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d00a      	beq.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80039da:	4b87      	ldr	r3, [pc, #540]	@ (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039e0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039e8:	4983      	ldr	r1, [pc, #524]	@ (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039ea:	4313      	orrs	r3, r2
 80039ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f003 0308 	and.w	r3, r3, #8
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d00a      	beq.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80039fc:	4b7e      	ldr	r3, [pc, #504]	@ (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a02:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a0a:	497b      	ldr	r1, [pc, #492]	@ (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f003 0310 	and.w	r3, r3, #16
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d00a      	beq.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003a1e:	4b76      	ldr	r3, [pc, #472]	@ (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a24:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a2c:	4972      	ldr	r1, [pc, #456]	@ (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f003 0320 	and.w	r3, r3, #32
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d00a      	beq.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003a40:	4b6d      	ldr	r3, [pc, #436]	@ (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a46:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a4e:	496a      	ldr	r1, [pc, #424]	@ (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a50:	4313      	orrs	r3, r2
 8003a52:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d00a      	beq.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003a62:	4b65      	ldr	r3, [pc, #404]	@ (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a68:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a70:	4961      	ldr	r1, [pc, #388]	@ (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a72:	4313      	orrs	r3, r2
 8003a74:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d00a      	beq.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003a84:	4b5c      	ldr	r3, [pc, #368]	@ (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a8a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a92:	4959      	ldr	r1, [pc, #356]	@ (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a94:	4313      	orrs	r3, r2
 8003a96:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d00a      	beq.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003aa6:	4b54      	ldr	r3, [pc, #336]	@ (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003aa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003aac:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ab4:	4950      	ldr	r1, [pc, #320]	@ (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d00a      	beq.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003ac8:	4b4b      	ldr	r3, [pc, #300]	@ (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003aca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ace:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ad6:	4948      	ldr	r1, [pc, #288]	@ (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d00a      	beq.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003aea:	4b43      	ldr	r3, [pc, #268]	@ (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003aec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003af0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003af8:	493f      	ldr	r1, [pc, #252]	@ (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003afa:	4313      	orrs	r3, r2
 8003afc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d028      	beq.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003b0c:	4b3a      	ldr	r3, [pc, #232]	@ (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b12:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003b1a:	4937      	ldr	r1, [pc, #220]	@ (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003b26:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003b2a:	d106      	bne.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b2c:	4b32      	ldr	r3, [pc, #200]	@ (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b2e:	68db      	ldr	r3, [r3, #12]
 8003b30:	4a31      	ldr	r2, [pc, #196]	@ (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b32:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003b36:	60d3      	str	r3, [r2, #12]
 8003b38:	e011      	b.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003b3e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003b42:	d10c      	bne.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	3304      	adds	r3, #4
 8003b48:	2101      	movs	r1, #1
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	f000 f8c8 	bl	8003ce0 <RCCEx_PLLSAI1_Config>
 8003b50:	4603      	mov	r3, r0
 8003b52:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003b54:	7cfb      	ldrb	r3, [r7, #19]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d001      	beq.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003b5a:	7cfb      	ldrb	r3, [r7, #19]
 8003b5c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d028      	beq.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003b6a:	4b23      	ldr	r3, [pc, #140]	@ (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b70:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b78:	491f      	ldr	r1, [pc, #124]	@ (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b84:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003b88:	d106      	bne.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b8a:	4b1b      	ldr	r3, [pc, #108]	@ (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b8c:	68db      	ldr	r3, [r3, #12]
 8003b8e:	4a1a      	ldr	r2, [pc, #104]	@ (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b90:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003b94:	60d3      	str	r3, [r2, #12]
 8003b96:	e011      	b.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b9c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003ba0:	d10c      	bne.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	3304      	adds	r3, #4
 8003ba6:	2101      	movs	r1, #1
 8003ba8:	4618      	mov	r0, r3
 8003baa:	f000 f899 	bl	8003ce0 <RCCEx_PLLSAI1_Config>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003bb2:	7cfb      	ldrb	r3, [r7, #19]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d001      	beq.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003bb8:	7cfb      	ldrb	r3, [r7, #19]
 8003bba:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d02b      	beq.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003bc8:	4b0b      	ldr	r3, [pc, #44]	@ (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bce:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003bd6:	4908      	ldr	r1, [pc, #32]	@ (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003be2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003be6:	d109      	bne.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003be8:	4b03      	ldr	r3, [pc, #12]	@ (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bea:	68db      	ldr	r3, [r3, #12]
 8003bec:	4a02      	ldr	r2, [pc, #8]	@ (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003bf2:	60d3      	str	r3, [r2, #12]
 8003bf4:	e014      	b.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003bf6:	bf00      	nop
 8003bf8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c00:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003c04:	d10c      	bne.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	3304      	adds	r3, #4
 8003c0a:	2101      	movs	r1, #1
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	f000 f867 	bl	8003ce0 <RCCEx_PLLSAI1_Config>
 8003c12:	4603      	mov	r3, r0
 8003c14:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003c16:	7cfb      	ldrb	r3, [r7, #19]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d001      	beq.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003c1c:	7cfb      	ldrb	r3, [r7, #19]
 8003c1e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d02f      	beq.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003c2c:	4b2b      	ldr	r3, [pc, #172]	@ (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003c2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c32:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003c3a:	4928      	ldr	r1, [pc, #160]	@ (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003c46:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003c4a:	d10d      	bne.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	3304      	adds	r3, #4
 8003c50:	2102      	movs	r1, #2
 8003c52:	4618      	mov	r0, r3
 8003c54:	f000 f844 	bl	8003ce0 <RCCEx_PLLSAI1_Config>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003c5c:	7cfb      	ldrb	r3, [r7, #19]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d014      	beq.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003c62:	7cfb      	ldrb	r3, [r7, #19]
 8003c64:	74bb      	strb	r3, [r7, #18]
 8003c66:	e011      	b.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003c6c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003c70:	d10c      	bne.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	3320      	adds	r3, #32
 8003c76:	2102      	movs	r1, #2
 8003c78:	4618      	mov	r0, r3
 8003c7a:	f000 f925 	bl	8003ec8 <RCCEx_PLLSAI2_Config>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003c82:	7cfb      	ldrb	r3, [r7, #19]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d001      	beq.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003c88:	7cfb      	ldrb	r3, [r7, #19]
 8003c8a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d00a      	beq.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003c98:	4b10      	ldr	r3, [pc, #64]	@ (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003c9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c9e:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003ca6:	490d      	ldr	r1, [pc, #52]	@ (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d00b      	beq.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003cba:	4b08      	ldr	r3, [pc, #32]	@ (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003cbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cc0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003cca:	4904      	ldr	r1, [pc, #16]	@ (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003cd2:	7cbb      	ldrb	r3, [r7, #18]
}
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	3718      	adds	r7, #24
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bd80      	pop	{r7, pc}
 8003cdc:	40021000 	.word	0x40021000

08003ce0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b084      	sub	sp, #16
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
 8003ce8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003cea:	2300      	movs	r3, #0
 8003cec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003cee:	4b75      	ldr	r3, [pc, #468]	@ (8003ec4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cf0:	68db      	ldr	r3, [r3, #12]
 8003cf2:	f003 0303 	and.w	r3, r3, #3
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d018      	beq.n	8003d2c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003cfa:	4b72      	ldr	r3, [pc, #456]	@ (8003ec4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cfc:	68db      	ldr	r3, [r3, #12]
 8003cfe:	f003 0203 	and.w	r2, r3, #3
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	429a      	cmp	r2, r3
 8003d08:	d10d      	bne.n	8003d26 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
       ||
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d009      	beq.n	8003d26 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003d12:	4b6c      	ldr	r3, [pc, #432]	@ (8003ec4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d14:	68db      	ldr	r3, [r3, #12]
 8003d16:	091b      	lsrs	r3, r3, #4
 8003d18:	f003 0307 	and.w	r3, r3, #7
 8003d1c:	1c5a      	adds	r2, r3, #1
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	685b      	ldr	r3, [r3, #4]
       ||
 8003d22:	429a      	cmp	r2, r3
 8003d24:	d047      	beq.n	8003db6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003d26:	2301      	movs	r3, #1
 8003d28:	73fb      	strb	r3, [r7, #15]
 8003d2a:	e044      	b.n	8003db6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	2b03      	cmp	r3, #3
 8003d32:	d018      	beq.n	8003d66 <RCCEx_PLLSAI1_Config+0x86>
 8003d34:	2b03      	cmp	r3, #3
 8003d36:	d825      	bhi.n	8003d84 <RCCEx_PLLSAI1_Config+0xa4>
 8003d38:	2b01      	cmp	r3, #1
 8003d3a:	d002      	beq.n	8003d42 <RCCEx_PLLSAI1_Config+0x62>
 8003d3c:	2b02      	cmp	r3, #2
 8003d3e:	d009      	beq.n	8003d54 <RCCEx_PLLSAI1_Config+0x74>
 8003d40:	e020      	b.n	8003d84 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003d42:	4b60      	ldr	r3, [pc, #384]	@ (8003ec4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f003 0302 	and.w	r3, r3, #2
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d11d      	bne.n	8003d8a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d52:	e01a      	b.n	8003d8a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003d54:	4b5b      	ldr	r3, [pc, #364]	@ (8003ec4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d116      	bne.n	8003d8e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003d60:	2301      	movs	r3, #1
 8003d62:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d64:	e013      	b.n	8003d8e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003d66:	4b57      	ldr	r3, [pc, #348]	@ (8003ec4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d10f      	bne.n	8003d92 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003d72:	4b54      	ldr	r3, [pc, #336]	@ (8003ec4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d109      	bne.n	8003d92 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003d82:	e006      	b.n	8003d92 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003d84:	2301      	movs	r3, #1
 8003d86:	73fb      	strb	r3, [r7, #15]
      break;
 8003d88:	e004      	b.n	8003d94 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003d8a:	bf00      	nop
 8003d8c:	e002      	b.n	8003d94 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003d8e:	bf00      	nop
 8003d90:	e000      	b.n	8003d94 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003d92:	bf00      	nop
    }

    if(status == HAL_OK)
 8003d94:	7bfb      	ldrb	r3, [r7, #15]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d10d      	bne.n	8003db6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003d9a:	4b4a      	ldr	r3, [pc, #296]	@ (8003ec4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d9c:	68db      	ldr	r3, [r3, #12]
 8003d9e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6819      	ldr	r1, [r3, #0]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	3b01      	subs	r3, #1
 8003dac:	011b      	lsls	r3, r3, #4
 8003dae:	430b      	orrs	r3, r1
 8003db0:	4944      	ldr	r1, [pc, #272]	@ (8003ec4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003db2:	4313      	orrs	r3, r2
 8003db4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003db6:	7bfb      	ldrb	r3, [r7, #15]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d17d      	bne.n	8003eb8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003dbc:	4b41      	ldr	r3, [pc, #260]	@ (8003ec4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a40      	ldr	r2, [pc, #256]	@ (8003ec4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003dc2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003dc6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003dc8:	f7fe faec 	bl	80023a4 <HAL_GetTick>
 8003dcc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003dce:	e009      	b.n	8003de4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003dd0:	f7fe fae8 	bl	80023a4 <HAL_GetTick>
 8003dd4:	4602      	mov	r2, r0
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	1ad3      	subs	r3, r2, r3
 8003dda:	2b02      	cmp	r3, #2
 8003ddc:	d902      	bls.n	8003de4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003dde:	2303      	movs	r3, #3
 8003de0:	73fb      	strb	r3, [r7, #15]
        break;
 8003de2:	e005      	b.n	8003df0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003de4:	4b37      	ldr	r3, [pc, #220]	@ (8003ec4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d1ef      	bne.n	8003dd0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003df0:	7bfb      	ldrb	r3, [r7, #15]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d160      	bne.n	8003eb8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d111      	bne.n	8003e20 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003dfc:	4b31      	ldr	r3, [pc, #196]	@ (8003ec4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003dfe:	691b      	ldr	r3, [r3, #16]
 8003e00:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003e04:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e08:	687a      	ldr	r2, [r7, #4]
 8003e0a:	6892      	ldr	r2, [r2, #8]
 8003e0c:	0211      	lsls	r1, r2, #8
 8003e0e:	687a      	ldr	r2, [r7, #4]
 8003e10:	68d2      	ldr	r2, [r2, #12]
 8003e12:	0912      	lsrs	r2, r2, #4
 8003e14:	0452      	lsls	r2, r2, #17
 8003e16:	430a      	orrs	r2, r1
 8003e18:	492a      	ldr	r1, [pc, #168]	@ (8003ec4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	610b      	str	r3, [r1, #16]
 8003e1e:	e027      	b.n	8003e70 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	2b01      	cmp	r3, #1
 8003e24:	d112      	bne.n	8003e4c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003e26:	4b27      	ldr	r3, [pc, #156]	@ (8003ec4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e28:	691b      	ldr	r3, [r3, #16]
 8003e2a:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8003e2e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003e32:	687a      	ldr	r2, [r7, #4]
 8003e34:	6892      	ldr	r2, [r2, #8]
 8003e36:	0211      	lsls	r1, r2, #8
 8003e38:	687a      	ldr	r2, [r7, #4]
 8003e3a:	6912      	ldr	r2, [r2, #16]
 8003e3c:	0852      	lsrs	r2, r2, #1
 8003e3e:	3a01      	subs	r2, #1
 8003e40:	0552      	lsls	r2, r2, #21
 8003e42:	430a      	orrs	r2, r1
 8003e44:	491f      	ldr	r1, [pc, #124]	@ (8003ec4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e46:	4313      	orrs	r3, r2
 8003e48:	610b      	str	r3, [r1, #16]
 8003e4a:	e011      	b.n	8003e70 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003e4c:	4b1d      	ldr	r3, [pc, #116]	@ (8003ec4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e4e:	691b      	ldr	r3, [r3, #16]
 8003e50:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003e54:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003e58:	687a      	ldr	r2, [r7, #4]
 8003e5a:	6892      	ldr	r2, [r2, #8]
 8003e5c:	0211      	lsls	r1, r2, #8
 8003e5e:	687a      	ldr	r2, [r7, #4]
 8003e60:	6952      	ldr	r2, [r2, #20]
 8003e62:	0852      	lsrs	r2, r2, #1
 8003e64:	3a01      	subs	r2, #1
 8003e66:	0652      	lsls	r2, r2, #25
 8003e68:	430a      	orrs	r2, r1
 8003e6a:	4916      	ldr	r1, [pc, #88]	@ (8003ec4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003e70:	4b14      	ldr	r3, [pc, #80]	@ (8003ec4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a13      	ldr	r2, [pc, #76]	@ (8003ec4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e76:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003e7a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e7c:	f7fe fa92 	bl	80023a4 <HAL_GetTick>
 8003e80:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003e82:	e009      	b.n	8003e98 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003e84:	f7fe fa8e 	bl	80023a4 <HAL_GetTick>
 8003e88:	4602      	mov	r2, r0
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	1ad3      	subs	r3, r2, r3
 8003e8e:	2b02      	cmp	r3, #2
 8003e90:	d902      	bls.n	8003e98 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003e92:	2303      	movs	r3, #3
 8003e94:	73fb      	strb	r3, [r7, #15]
          break;
 8003e96:	e005      	b.n	8003ea4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003e98:	4b0a      	ldr	r3, [pc, #40]	@ (8003ec4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d0ef      	beq.n	8003e84 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003ea4:	7bfb      	ldrb	r3, [r7, #15]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d106      	bne.n	8003eb8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003eaa:	4b06      	ldr	r3, [pc, #24]	@ (8003ec4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003eac:	691a      	ldr	r2, [r3, #16]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	699b      	ldr	r3, [r3, #24]
 8003eb2:	4904      	ldr	r1, [pc, #16]	@ (8003ec4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003eb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003eba:	4618      	mov	r0, r3
 8003ebc:	3710      	adds	r7, #16
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bd80      	pop	{r7, pc}
 8003ec2:	bf00      	nop
 8003ec4:	40021000 	.word	0x40021000

08003ec8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b084      	sub	sp, #16
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
 8003ed0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003ed6:	4b6a      	ldr	r3, [pc, #424]	@ (8004080 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ed8:	68db      	ldr	r3, [r3, #12]
 8003eda:	f003 0303 	and.w	r3, r3, #3
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d018      	beq.n	8003f14 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003ee2:	4b67      	ldr	r3, [pc, #412]	@ (8004080 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ee4:	68db      	ldr	r3, [r3, #12]
 8003ee6:	f003 0203 	and.w	r2, r3, #3
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	429a      	cmp	r2, r3
 8003ef0:	d10d      	bne.n	8003f0e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
       ||
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d009      	beq.n	8003f0e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003efa:	4b61      	ldr	r3, [pc, #388]	@ (8004080 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003efc:	68db      	ldr	r3, [r3, #12]
 8003efe:	091b      	lsrs	r3, r3, #4
 8003f00:	f003 0307 	and.w	r3, r3, #7
 8003f04:	1c5a      	adds	r2, r3, #1
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	685b      	ldr	r3, [r3, #4]
       ||
 8003f0a:	429a      	cmp	r2, r3
 8003f0c:	d047      	beq.n	8003f9e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	73fb      	strb	r3, [r7, #15]
 8003f12:	e044      	b.n	8003f9e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	2b03      	cmp	r3, #3
 8003f1a:	d018      	beq.n	8003f4e <RCCEx_PLLSAI2_Config+0x86>
 8003f1c:	2b03      	cmp	r3, #3
 8003f1e:	d825      	bhi.n	8003f6c <RCCEx_PLLSAI2_Config+0xa4>
 8003f20:	2b01      	cmp	r3, #1
 8003f22:	d002      	beq.n	8003f2a <RCCEx_PLLSAI2_Config+0x62>
 8003f24:	2b02      	cmp	r3, #2
 8003f26:	d009      	beq.n	8003f3c <RCCEx_PLLSAI2_Config+0x74>
 8003f28:	e020      	b.n	8003f6c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003f2a:	4b55      	ldr	r3, [pc, #340]	@ (8004080 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f003 0302 	and.w	r3, r3, #2
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d11d      	bne.n	8003f72 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f3a:	e01a      	b.n	8003f72 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003f3c:	4b50      	ldr	r3, [pc, #320]	@ (8004080 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d116      	bne.n	8003f76 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003f48:	2301      	movs	r3, #1
 8003f4a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f4c:	e013      	b.n	8003f76 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003f4e:	4b4c      	ldr	r3, [pc, #304]	@ (8004080 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d10f      	bne.n	8003f7a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003f5a:	4b49      	ldr	r3, [pc, #292]	@ (8004080 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d109      	bne.n	8003f7a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003f66:	2301      	movs	r3, #1
 8003f68:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003f6a:	e006      	b.n	8003f7a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	73fb      	strb	r3, [r7, #15]
      break;
 8003f70:	e004      	b.n	8003f7c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003f72:	bf00      	nop
 8003f74:	e002      	b.n	8003f7c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003f76:	bf00      	nop
 8003f78:	e000      	b.n	8003f7c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003f7a:	bf00      	nop
    }

    if(status == HAL_OK)
 8003f7c:	7bfb      	ldrb	r3, [r7, #15]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d10d      	bne.n	8003f9e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003f82:	4b3f      	ldr	r3, [pc, #252]	@ (8004080 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f84:	68db      	ldr	r3, [r3, #12]
 8003f86:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6819      	ldr	r1, [r3, #0]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	3b01      	subs	r3, #1
 8003f94:	011b      	lsls	r3, r3, #4
 8003f96:	430b      	orrs	r3, r1
 8003f98:	4939      	ldr	r1, [pc, #228]	@ (8004080 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003f9e:	7bfb      	ldrb	r3, [r7, #15]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d167      	bne.n	8004074 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003fa4:	4b36      	ldr	r3, [pc, #216]	@ (8004080 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4a35      	ldr	r2, [pc, #212]	@ (8004080 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003faa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003fae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fb0:	f7fe f9f8 	bl	80023a4 <HAL_GetTick>
 8003fb4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003fb6:	e009      	b.n	8003fcc <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003fb8:	f7fe f9f4 	bl	80023a4 <HAL_GetTick>
 8003fbc:	4602      	mov	r2, r0
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	1ad3      	subs	r3, r2, r3
 8003fc2:	2b02      	cmp	r3, #2
 8003fc4:	d902      	bls.n	8003fcc <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003fc6:	2303      	movs	r3, #3
 8003fc8:	73fb      	strb	r3, [r7, #15]
        break;
 8003fca:	e005      	b.n	8003fd8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003fcc:	4b2c      	ldr	r3, [pc, #176]	@ (8004080 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d1ef      	bne.n	8003fb8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003fd8:	7bfb      	ldrb	r3, [r7, #15]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d14a      	bne.n	8004074 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d111      	bne.n	8004008 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003fe4:	4b26      	ldr	r3, [pc, #152]	@ (8004080 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fe6:	695b      	ldr	r3, [r3, #20]
 8003fe8:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003fec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ff0:	687a      	ldr	r2, [r7, #4]
 8003ff2:	6892      	ldr	r2, [r2, #8]
 8003ff4:	0211      	lsls	r1, r2, #8
 8003ff6:	687a      	ldr	r2, [r7, #4]
 8003ff8:	68d2      	ldr	r2, [r2, #12]
 8003ffa:	0912      	lsrs	r2, r2, #4
 8003ffc:	0452      	lsls	r2, r2, #17
 8003ffe:	430a      	orrs	r2, r1
 8004000:	491f      	ldr	r1, [pc, #124]	@ (8004080 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004002:	4313      	orrs	r3, r2
 8004004:	614b      	str	r3, [r1, #20]
 8004006:	e011      	b.n	800402c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004008:	4b1d      	ldr	r3, [pc, #116]	@ (8004080 <RCCEx_PLLSAI2_Config+0x1b8>)
 800400a:	695b      	ldr	r3, [r3, #20]
 800400c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004010:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004014:	687a      	ldr	r2, [r7, #4]
 8004016:	6892      	ldr	r2, [r2, #8]
 8004018:	0211      	lsls	r1, r2, #8
 800401a:	687a      	ldr	r2, [r7, #4]
 800401c:	6912      	ldr	r2, [r2, #16]
 800401e:	0852      	lsrs	r2, r2, #1
 8004020:	3a01      	subs	r2, #1
 8004022:	0652      	lsls	r2, r2, #25
 8004024:	430a      	orrs	r2, r1
 8004026:	4916      	ldr	r1, [pc, #88]	@ (8004080 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004028:	4313      	orrs	r3, r2
 800402a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800402c:	4b14      	ldr	r3, [pc, #80]	@ (8004080 <RCCEx_PLLSAI2_Config+0x1b8>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a13      	ldr	r2, [pc, #76]	@ (8004080 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004032:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004036:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004038:	f7fe f9b4 	bl	80023a4 <HAL_GetTick>
 800403c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800403e:	e009      	b.n	8004054 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004040:	f7fe f9b0 	bl	80023a4 <HAL_GetTick>
 8004044:	4602      	mov	r2, r0
 8004046:	68bb      	ldr	r3, [r7, #8]
 8004048:	1ad3      	subs	r3, r2, r3
 800404a:	2b02      	cmp	r3, #2
 800404c:	d902      	bls.n	8004054 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800404e:	2303      	movs	r3, #3
 8004050:	73fb      	strb	r3, [r7, #15]
          break;
 8004052:	e005      	b.n	8004060 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004054:	4b0a      	ldr	r3, [pc, #40]	@ (8004080 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800405c:	2b00      	cmp	r3, #0
 800405e:	d0ef      	beq.n	8004040 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004060:	7bfb      	ldrb	r3, [r7, #15]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d106      	bne.n	8004074 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004066:	4b06      	ldr	r3, [pc, #24]	@ (8004080 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004068:	695a      	ldr	r2, [r3, #20]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	695b      	ldr	r3, [r3, #20]
 800406e:	4904      	ldr	r1, [pc, #16]	@ (8004080 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004070:	4313      	orrs	r3, r2
 8004072:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004074:	7bfb      	ldrb	r3, [r7, #15]
}
 8004076:	4618      	mov	r0, r3
 8004078:	3710      	adds	r7, #16
 800407a:	46bd      	mov	sp, r7
 800407c:	bd80      	pop	{r7, pc}
 800407e:	bf00      	nop
 8004080:	40021000 	.word	0x40021000

08004084 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b084      	sub	sp, #16
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d101      	bne.n	8004096 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004092:	2301      	movs	r3, #1
 8004094:	e095      	b.n	80041c2 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800409a:	2b00      	cmp	r3, #0
 800409c:	d108      	bne.n	80040b0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80040a6:	d009      	beq.n	80040bc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2200      	movs	r2, #0
 80040ac:	61da      	str	r2, [r3, #28]
 80040ae:	e005      	b.n	80040bc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2200      	movs	r2, #0
 80040b4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2200      	movs	r2, #0
 80040ba:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2200      	movs	r2, #0
 80040c0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80040c8:	b2db      	uxtb	r3, r3
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d106      	bne.n	80040dc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2200      	movs	r2, #0
 80040d2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80040d6:	6878      	ldr	r0, [r7, #4]
 80040d8:	f7fd fe2c 	bl	8001d34 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2202      	movs	r2, #2
 80040e0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	681a      	ldr	r2, [r3, #0]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80040f2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	68db      	ldr	r3, [r3, #12]
 80040f8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80040fc:	d902      	bls.n	8004104 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80040fe:	2300      	movs	r3, #0
 8004100:	60fb      	str	r3, [r7, #12]
 8004102:	e002      	b.n	800410a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004104:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004108:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	68db      	ldr	r3, [r3, #12]
 800410e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8004112:	d007      	beq.n	8004124 <HAL_SPI_Init+0xa0>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	68db      	ldr	r3, [r3, #12]
 8004118:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800411c:	d002      	beq.n	8004124 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2200      	movs	r2, #0
 8004122:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	689b      	ldr	r3, [r3, #8]
 8004130:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004134:	431a      	orrs	r2, r3
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	691b      	ldr	r3, [r3, #16]
 800413a:	f003 0302 	and.w	r3, r3, #2
 800413e:	431a      	orrs	r2, r3
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	695b      	ldr	r3, [r3, #20]
 8004144:	f003 0301 	and.w	r3, r3, #1
 8004148:	431a      	orrs	r2, r3
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	699b      	ldr	r3, [r3, #24]
 800414e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004152:	431a      	orrs	r2, r3
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	69db      	ldr	r3, [r3, #28]
 8004158:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800415c:	431a      	orrs	r2, r3
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6a1b      	ldr	r3, [r3, #32]
 8004162:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004166:	ea42 0103 	orr.w	r1, r2, r3
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800416e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	430a      	orrs	r2, r1
 8004178:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	699b      	ldr	r3, [r3, #24]
 800417e:	0c1b      	lsrs	r3, r3, #16
 8004180:	f003 0204 	and.w	r2, r3, #4
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004188:	f003 0310 	and.w	r3, r3, #16
 800418c:	431a      	orrs	r2, r3
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004192:	f003 0308 	and.w	r3, r3, #8
 8004196:	431a      	orrs	r2, r3
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	68db      	ldr	r3, [r3, #12]
 800419c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80041a0:	ea42 0103 	orr.w	r1, r2, r3
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	430a      	orrs	r2, r1
 80041b0:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2200      	movs	r2, #0
 80041b6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2201      	movs	r2, #1
 80041bc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80041c0:	2300      	movs	r3, #0
}
 80041c2:	4618      	mov	r0, r3
 80041c4:	3710      	adds	r7, #16
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bd80      	pop	{r7, pc}

080041ca <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041ca:	b580      	push	{r7, lr}
 80041cc:	b088      	sub	sp, #32
 80041ce:	af00      	add	r7, sp, #0
 80041d0:	60f8      	str	r0, [r7, #12]
 80041d2:	60b9      	str	r1, [r7, #8]
 80041d4:	603b      	str	r3, [r7, #0]
 80041d6:	4613      	mov	r3, r2
 80041d8:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80041da:	f7fe f8e3 	bl	80023a4 <HAL_GetTick>
 80041de:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80041e0:	88fb      	ldrh	r3, [r7, #6]
 80041e2:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80041ea:	b2db      	uxtb	r3, r3
 80041ec:	2b01      	cmp	r3, #1
 80041ee:	d001      	beq.n	80041f4 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80041f0:	2302      	movs	r3, #2
 80041f2:	e15c      	b.n	80044ae <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d002      	beq.n	8004200 <HAL_SPI_Transmit+0x36>
 80041fa:	88fb      	ldrh	r3, [r7, #6]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d101      	bne.n	8004204 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8004200:	2301      	movs	r3, #1
 8004202:	e154      	b.n	80044ae <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800420a:	2b01      	cmp	r3, #1
 800420c:	d101      	bne.n	8004212 <HAL_SPI_Transmit+0x48>
 800420e:	2302      	movs	r3, #2
 8004210:	e14d      	b.n	80044ae <HAL_SPI_Transmit+0x2e4>
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	2201      	movs	r2, #1
 8004216:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	2203      	movs	r2, #3
 800421e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	2200      	movs	r2, #0
 8004226:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	68ba      	ldr	r2, [r7, #8]
 800422c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	88fa      	ldrh	r2, [r7, #6]
 8004232:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	88fa      	ldrh	r2, [r7, #6]
 8004238:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	2200      	movs	r2, #0
 800423e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	2200      	movs	r2, #0
 8004244:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	2200      	movs	r2, #0
 800424c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	2200      	movs	r2, #0
 8004254:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	2200      	movs	r2, #0
 800425a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	689b      	ldr	r3, [r3, #8]
 8004260:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004264:	d10f      	bne.n	8004286 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	681a      	ldr	r2, [r3, #0]
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004274:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	681a      	ldr	r2, [r3, #0]
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004284:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004290:	2b40      	cmp	r3, #64	@ 0x40
 8004292:	d007      	beq.n	80042a4 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	681a      	ldr	r2, [r3, #0]
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80042a2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	68db      	ldr	r3, [r3, #12]
 80042a8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80042ac:	d952      	bls.n	8004354 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d002      	beq.n	80042bc <HAL_SPI_Transmit+0xf2>
 80042b6:	8b7b      	ldrh	r3, [r7, #26]
 80042b8:	2b01      	cmp	r3, #1
 80042ba:	d145      	bne.n	8004348 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042c0:	881a      	ldrh	r2, [r3, #0]
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042cc:	1c9a      	adds	r2, r3, #2
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80042d6:	b29b      	uxth	r3, r3
 80042d8:	3b01      	subs	r3, #1
 80042da:	b29a      	uxth	r2, r3
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80042e0:	e032      	b.n	8004348 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	689b      	ldr	r3, [r3, #8]
 80042e8:	f003 0302 	and.w	r3, r3, #2
 80042ec:	2b02      	cmp	r3, #2
 80042ee:	d112      	bne.n	8004316 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042f4:	881a      	ldrh	r2, [r3, #0]
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004300:	1c9a      	adds	r2, r3, #2
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800430a:	b29b      	uxth	r3, r3
 800430c:	3b01      	subs	r3, #1
 800430e:	b29a      	uxth	r2, r3
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004314:	e018      	b.n	8004348 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004316:	f7fe f845 	bl	80023a4 <HAL_GetTick>
 800431a:	4602      	mov	r2, r0
 800431c:	69fb      	ldr	r3, [r7, #28]
 800431e:	1ad3      	subs	r3, r2, r3
 8004320:	683a      	ldr	r2, [r7, #0]
 8004322:	429a      	cmp	r2, r3
 8004324:	d803      	bhi.n	800432e <HAL_SPI_Transmit+0x164>
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	f1b3 3fff 	cmp.w	r3, #4294967295
 800432c:	d102      	bne.n	8004334 <HAL_SPI_Transmit+0x16a>
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d109      	bne.n	8004348 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	2201      	movs	r2, #1
 8004338:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	2200      	movs	r2, #0
 8004340:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8004344:	2303      	movs	r3, #3
 8004346:	e0b2      	b.n	80044ae <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800434c:	b29b      	uxth	r3, r3
 800434e:	2b00      	cmp	r3, #0
 8004350:	d1c7      	bne.n	80042e2 <HAL_SPI_Transmit+0x118>
 8004352:	e083      	b.n	800445c <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d002      	beq.n	8004362 <HAL_SPI_Transmit+0x198>
 800435c:	8b7b      	ldrh	r3, [r7, #26]
 800435e:	2b01      	cmp	r3, #1
 8004360:	d177      	bne.n	8004452 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004366:	b29b      	uxth	r3, r3
 8004368:	2b01      	cmp	r3, #1
 800436a:	d912      	bls.n	8004392 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004370:	881a      	ldrh	r2, [r3, #0]
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800437c:	1c9a      	adds	r2, r3, #2
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004386:	b29b      	uxth	r3, r3
 8004388:	3b02      	subs	r3, #2
 800438a:	b29a      	uxth	r2, r3
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004390:	e05f      	b.n	8004452 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	330c      	adds	r3, #12
 800439c:	7812      	ldrb	r2, [r2, #0]
 800439e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043a4:	1c5a      	adds	r2, r3, #1
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80043ae:	b29b      	uxth	r3, r3
 80043b0:	3b01      	subs	r3, #1
 80043b2:	b29a      	uxth	r2, r3
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80043b8:	e04b      	b.n	8004452 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	689b      	ldr	r3, [r3, #8]
 80043c0:	f003 0302 	and.w	r3, r3, #2
 80043c4:	2b02      	cmp	r3, #2
 80043c6:	d12b      	bne.n	8004420 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80043cc:	b29b      	uxth	r3, r3
 80043ce:	2b01      	cmp	r3, #1
 80043d0:	d912      	bls.n	80043f8 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043d6:	881a      	ldrh	r2, [r3, #0]
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043e2:	1c9a      	adds	r2, r3, #2
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80043ec:	b29b      	uxth	r3, r3
 80043ee:	3b02      	subs	r3, #2
 80043f0:	b29a      	uxth	r2, r3
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80043f6:	e02c      	b.n	8004452 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	330c      	adds	r3, #12
 8004402:	7812      	ldrb	r2, [r2, #0]
 8004404:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800440a:	1c5a      	adds	r2, r3, #1
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004414:	b29b      	uxth	r3, r3
 8004416:	3b01      	subs	r3, #1
 8004418:	b29a      	uxth	r2, r3
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800441e:	e018      	b.n	8004452 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004420:	f7fd ffc0 	bl	80023a4 <HAL_GetTick>
 8004424:	4602      	mov	r2, r0
 8004426:	69fb      	ldr	r3, [r7, #28]
 8004428:	1ad3      	subs	r3, r2, r3
 800442a:	683a      	ldr	r2, [r7, #0]
 800442c:	429a      	cmp	r2, r3
 800442e:	d803      	bhi.n	8004438 <HAL_SPI_Transmit+0x26e>
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004436:	d102      	bne.n	800443e <HAL_SPI_Transmit+0x274>
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d109      	bne.n	8004452 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	2201      	movs	r2, #1
 8004442:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	2200      	movs	r2, #0
 800444a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800444e:	2303      	movs	r3, #3
 8004450:	e02d      	b.n	80044ae <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004456:	b29b      	uxth	r3, r3
 8004458:	2b00      	cmp	r3, #0
 800445a:	d1ae      	bne.n	80043ba <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800445c:	69fa      	ldr	r2, [r7, #28]
 800445e:	6839      	ldr	r1, [r7, #0]
 8004460:	68f8      	ldr	r0, [r7, #12]
 8004462:	f000 fb65 	bl	8004b30 <SPI_EndRxTxTransaction>
 8004466:	4603      	mov	r3, r0
 8004468:	2b00      	cmp	r3, #0
 800446a:	d002      	beq.n	8004472 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	2220      	movs	r2, #32
 8004470:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	689b      	ldr	r3, [r3, #8]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d10a      	bne.n	8004490 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800447a:	2300      	movs	r3, #0
 800447c:	617b      	str	r3, [r7, #20]
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	68db      	ldr	r3, [r3, #12]
 8004484:	617b      	str	r3, [r7, #20]
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	689b      	ldr	r3, [r3, #8]
 800448c:	617b      	str	r3, [r7, #20]
 800448e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	2201      	movs	r2, #1
 8004494:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	2200      	movs	r2, #0
 800449c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d001      	beq.n	80044ac <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 80044a8:	2301      	movs	r3, #1
 80044aa:	e000      	b.n	80044ae <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 80044ac:	2300      	movs	r3, #0
  }
}
 80044ae:	4618      	mov	r0, r3
 80044b0:	3720      	adds	r7, #32
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bd80      	pop	{r7, pc}

080044b6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80044b6:	b580      	push	{r7, lr}
 80044b8:	b08a      	sub	sp, #40	@ 0x28
 80044ba:	af00      	add	r7, sp, #0
 80044bc:	60f8      	str	r0, [r7, #12]
 80044be:	60b9      	str	r1, [r7, #8]
 80044c0:	607a      	str	r2, [r7, #4]
 80044c2:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80044c4:	2301      	movs	r3, #1
 80044c6:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80044c8:	f7fd ff6c 	bl	80023a4 <HAL_GetTick>
 80044cc:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80044d4:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80044dc:	887b      	ldrh	r3, [r7, #2]
 80044de:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 80044e0:	887b      	ldrh	r3, [r7, #2]
 80044e2:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80044e4:	7ffb      	ldrb	r3, [r7, #31]
 80044e6:	2b01      	cmp	r3, #1
 80044e8:	d00c      	beq.n	8004504 <HAL_SPI_TransmitReceive+0x4e>
 80044ea:	69bb      	ldr	r3, [r7, #24]
 80044ec:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80044f0:	d106      	bne.n	8004500 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	689b      	ldr	r3, [r3, #8]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d102      	bne.n	8004500 <HAL_SPI_TransmitReceive+0x4a>
 80044fa:	7ffb      	ldrb	r3, [r7, #31]
 80044fc:	2b04      	cmp	r3, #4
 80044fe:	d001      	beq.n	8004504 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8004500:	2302      	movs	r3, #2
 8004502:	e1f3      	b.n	80048ec <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d005      	beq.n	8004516 <HAL_SPI_TransmitReceive+0x60>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d002      	beq.n	8004516 <HAL_SPI_TransmitReceive+0x60>
 8004510:	887b      	ldrh	r3, [r7, #2]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d101      	bne.n	800451a <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8004516:	2301      	movs	r3, #1
 8004518:	e1e8      	b.n	80048ec <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004520:	2b01      	cmp	r3, #1
 8004522:	d101      	bne.n	8004528 <HAL_SPI_TransmitReceive+0x72>
 8004524:	2302      	movs	r3, #2
 8004526:	e1e1      	b.n	80048ec <HAL_SPI_TransmitReceive+0x436>
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	2201      	movs	r2, #1
 800452c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004536:	b2db      	uxtb	r3, r3
 8004538:	2b04      	cmp	r3, #4
 800453a:	d003      	beq.n	8004544 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	2205      	movs	r2, #5
 8004540:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	2200      	movs	r2, #0
 8004548:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	687a      	ldr	r2, [r7, #4]
 800454e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	887a      	ldrh	r2, [r7, #2]
 8004554:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	887a      	ldrh	r2, [r7, #2]
 800455c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	68ba      	ldr	r2, [r7, #8]
 8004564:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	887a      	ldrh	r2, [r7, #2]
 800456a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	887a      	ldrh	r2, [r7, #2]
 8004570:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	2200      	movs	r2, #0
 8004576:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	2200      	movs	r2, #0
 800457c:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	68db      	ldr	r3, [r3, #12]
 8004582:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004586:	d802      	bhi.n	800458e <HAL_SPI_TransmitReceive+0xd8>
 8004588:	8abb      	ldrh	r3, [r7, #20]
 800458a:	2b01      	cmp	r3, #1
 800458c:	d908      	bls.n	80045a0 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	685a      	ldr	r2, [r3, #4]
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800459c:	605a      	str	r2, [r3, #4]
 800459e:	e007      	b.n	80045b0 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	685a      	ldr	r2, [r3, #4]
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80045ae:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045ba:	2b40      	cmp	r3, #64	@ 0x40
 80045bc:	d007      	beq.n	80045ce <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	681a      	ldr	r2, [r3, #0]
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80045cc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	68db      	ldr	r3, [r3, #12]
 80045d2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80045d6:	f240 8083 	bls.w	80046e0 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d002      	beq.n	80045e8 <HAL_SPI_TransmitReceive+0x132>
 80045e2:	8afb      	ldrh	r3, [r7, #22]
 80045e4:	2b01      	cmp	r3, #1
 80045e6:	d16f      	bne.n	80046c8 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045ec:	881a      	ldrh	r2, [r3, #0]
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045f8:	1c9a      	adds	r2, r3, #2
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004602:	b29b      	uxth	r3, r3
 8004604:	3b01      	subs	r3, #1
 8004606:	b29a      	uxth	r2, r3
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800460c:	e05c      	b.n	80046c8 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	689b      	ldr	r3, [r3, #8]
 8004614:	f003 0302 	and.w	r3, r3, #2
 8004618:	2b02      	cmp	r3, #2
 800461a:	d11b      	bne.n	8004654 <HAL_SPI_TransmitReceive+0x19e>
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004620:	b29b      	uxth	r3, r3
 8004622:	2b00      	cmp	r3, #0
 8004624:	d016      	beq.n	8004654 <HAL_SPI_TransmitReceive+0x19e>
 8004626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004628:	2b01      	cmp	r3, #1
 800462a:	d113      	bne.n	8004654 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004630:	881a      	ldrh	r2, [r3, #0]
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800463c:	1c9a      	adds	r2, r3, #2
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004646:	b29b      	uxth	r3, r3
 8004648:	3b01      	subs	r3, #1
 800464a:	b29a      	uxth	r2, r3
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004650:	2300      	movs	r3, #0
 8004652:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	689b      	ldr	r3, [r3, #8]
 800465a:	f003 0301 	and.w	r3, r3, #1
 800465e:	2b01      	cmp	r3, #1
 8004660:	d11c      	bne.n	800469c <HAL_SPI_TransmitReceive+0x1e6>
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004668:	b29b      	uxth	r3, r3
 800466a:	2b00      	cmp	r3, #0
 800466c:	d016      	beq.n	800469c <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	68da      	ldr	r2, [r3, #12]
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004678:	b292      	uxth	r2, r2
 800467a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004680:	1c9a      	adds	r2, r3, #2
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800468c:	b29b      	uxth	r3, r3
 800468e:	3b01      	subs	r3, #1
 8004690:	b29a      	uxth	r2, r3
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004698:	2301      	movs	r3, #1
 800469a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800469c:	f7fd fe82 	bl	80023a4 <HAL_GetTick>
 80046a0:	4602      	mov	r2, r0
 80046a2:	6a3b      	ldr	r3, [r7, #32]
 80046a4:	1ad3      	subs	r3, r2, r3
 80046a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80046a8:	429a      	cmp	r2, r3
 80046aa:	d80d      	bhi.n	80046c8 <HAL_SPI_TransmitReceive+0x212>
 80046ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046b2:	d009      	beq.n	80046c8 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	2201      	movs	r2, #1
 80046b8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	2200      	movs	r2, #0
 80046c0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 80046c4:	2303      	movs	r3, #3
 80046c6:	e111      	b.n	80048ec <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80046cc:	b29b      	uxth	r3, r3
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d19d      	bne.n	800460e <HAL_SPI_TransmitReceive+0x158>
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80046d8:	b29b      	uxth	r3, r3
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d197      	bne.n	800460e <HAL_SPI_TransmitReceive+0x158>
 80046de:	e0e5      	b.n	80048ac <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d003      	beq.n	80046f0 <HAL_SPI_TransmitReceive+0x23a>
 80046e8:	8afb      	ldrh	r3, [r7, #22]
 80046ea:	2b01      	cmp	r3, #1
 80046ec:	f040 80d1 	bne.w	8004892 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80046f4:	b29b      	uxth	r3, r3
 80046f6:	2b01      	cmp	r3, #1
 80046f8:	d912      	bls.n	8004720 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046fe:	881a      	ldrh	r2, [r3, #0]
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800470a:	1c9a      	adds	r2, r3, #2
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004714:	b29b      	uxth	r3, r3
 8004716:	3b02      	subs	r3, #2
 8004718:	b29a      	uxth	r2, r3
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800471e:	e0b8      	b.n	8004892 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	330c      	adds	r3, #12
 800472a:	7812      	ldrb	r2, [r2, #0]
 800472c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004732:	1c5a      	adds	r2, r3, #1
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800473c:	b29b      	uxth	r3, r3
 800473e:	3b01      	subs	r3, #1
 8004740:	b29a      	uxth	r2, r3
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004746:	e0a4      	b.n	8004892 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	689b      	ldr	r3, [r3, #8]
 800474e:	f003 0302 	and.w	r3, r3, #2
 8004752:	2b02      	cmp	r3, #2
 8004754:	d134      	bne.n	80047c0 <HAL_SPI_TransmitReceive+0x30a>
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800475a:	b29b      	uxth	r3, r3
 800475c:	2b00      	cmp	r3, #0
 800475e:	d02f      	beq.n	80047c0 <HAL_SPI_TransmitReceive+0x30a>
 8004760:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004762:	2b01      	cmp	r3, #1
 8004764:	d12c      	bne.n	80047c0 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800476a:	b29b      	uxth	r3, r3
 800476c:	2b01      	cmp	r3, #1
 800476e:	d912      	bls.n	8004796 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004774:	881a      	ldrh	r2, [r3, #0]
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004780:	1c9a      	adds	r2, r3, #2
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800478a:	b29b      	uxth	r3, r3
 800478c:	3b02      	subs	r3, #2
 800478e:	b29a      	uxth	r2, r3
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004794:	e012      	b.n	80047bc <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	330c      	adds	r3, #12
 80047a0:	7812      	ldrb	r2, [r2, #0]
 80047a2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047a8:	1c5a      	adds	r2, r3, #1
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80047b2:	b29b      	uxth	r3, r3
 80047b4:	3b01      	subs	r3, #1
 80047b6:	b29a      	uxth	r2, r3
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80047bc:	2300      	movs	r3, #0
 80047be:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	689b      	ldr	r3, [r3, #8]
 80047c6:	f003 0301 	and.w	r3, r3, #1
 80047ca:	2b01      	cmp	r3, #1
 80047cc:	d148      	bne.n	8004860 <HAL_SPI_TransmitReceive+0x3aa>
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80047d4:	b29b      	uxth	r3, r3
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d042      	beq.n	8004860 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80047e0:	b29b      	uxth	r3, r3
 80047e2:	2b01      	cmp	r3, #1
 80047e4:	d923      	bls.n	800482e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	68da      	ldr	r2, [r3, #12]
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047f0:	b292      	uxth	r2, r2
 80047f2:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047f8:	1c9a      	adds	r2, r3, #2
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004804:	b29b      	uxth	r3, r3
 8004806:	3b02      	subs	r3, #2
 8004808:	b29a      	uxth	r2, r3
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004816:	b29b      	uxth	r3, r3
 8004818:	2b01      	cmp	r3, #1
 800481a:	d81f      	bhi.n	800485c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	685a      	ldr	r2, [r3, #4]
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800482a:	605a      	str	r2, [r3, #4]
 800482c:	e016      	b.n	800485c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f103 020c 	add.w	r2, r3, #12
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800483a:	7812      	ldrb	r2, [r2, #0]
 800483c:	b2d2      	uxtb	r2, r2
 800483e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004844:	1c5a      	adds	r2, r3, #1
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004850:	b29b      	uxth	r3, r3
 8004852:	3b01      	subs	r3, #1
 8004854:	b29a      	uxth	r2, r3
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800485c:	2301      	movs	r3, #1
 800485e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004860:	f7fd fda0 	bl	80023a4 <HAL_GetTick>
 8004864:	4602      	mov	r2, r0
 8004866:	6a3b      	ldr	r3, [r7, #32]
 8004868:	1ad3      	subs	r3, r2, r3
 800486a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800486c:	429a      	cmp	r2, r3
 800486e:	d803      	bhi.n	8004878 <HAL_SPI_TransmitReceive+0x3c2>
 8004870:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004872:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004876:	d102      	bne.n	800487e <HAL_SPI_TransmitReceive+0x3c8>
 8004878:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800487a:	2b00      	cmp	r3, #0
 800487c:	d109      	bne.n	8004892 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	2201      	movs	r2, #1
 8004882:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	2200      	movs	r2, #0
 800488a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 800488e:	2303      	movs	r3, #3
 8004890:	e02c      	b.n	80048ec <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004896:	b29b      	uxth	r3, r3
 8004898:	2b00      	cmp	r3, #0
 800489a:	f47f af55 	bne.w	8004748 <HAL_SPI_TransmitReceive+0x292>
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80048a4:	b29b      	uxth	r3, r3
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	f47f af4e 	bne.w	8004748 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80048ac:	6a3a      	ldr	r2, [r7, #32]
 80048ae:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80048b0:	68f8      	ldr	r0, [r7, #12]
 80048b2:	f000 f93d 	bl	8004b30 <SPI_EndRxTxTransaction>
 80048b6:	4603      	mov	r3, r0
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d008      	beq.n	80048ce <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	2220      	movs	r2, #32
 80048c0:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	2200      	movs	r2, #0
 80048c6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 80048ca:	2301      	movs	r3, #1
 80048cc:	e00e      	b.n	80048ec <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	2201      	movs	r2, #1
 80048d2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	2200      	movs	r2, #0
 80048da:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d001      	beq.n	80048ea <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 80048e6:	2301      	movs	r3, #1
 80048e8:	e000      	b.n	80048ec <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 80048ea:	2300      	movs	r3, #0
  }
}
 80048ec:	4618      	mov	r0, r3
 80048ee:	3728      	adds	r7, #40	@ 0x28
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bd80      	pop	{r7, pc}

080048f4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b088      	sub	sp, #32
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	60f8      	str	r0, [r7, #12]
 80048fc:	60b9      	str	r1, [r7, #8]
 80048fe:	603b      	str	r3, [r7, #0]
 8004900:	4613      	mov	r3, r2
 8004902:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004904:	f7fd fd4e 	bl	80023a4 <HAL_GetTick>
 8004908:	4602      	mov	r2, r0
 800490a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800490c:	1a9b      	subs	r3, r3, r2
 800490e:	683a      	ldr	r2, [r7, #0]
 8004910:	4413      	add	r3, r2
 8004912:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004914:	f7fd fd46 	bl	80023a4 <HAL_GetTick>
 8004918:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800491a:	4b39      	ldr	r3, [pc, #228]	@ (8004a00 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	015b      	lsls	r3, r3, #5
 8004920:	0d1b      	lsrs	r3, r3, #20
 8004922:	69fa      	ldr	r2, [r7, #28]
 8004924:	fb02 f303 	mul.w	r3, r2, r3
 8004928:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800492a:	e054      	b.n	80049d6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004932:	d050      	beq.n	80049d6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004934:	f7fd fd36 	bl	80023a4 <HAL_GetTick>
 8004938:	4602      	mov	r2, r0
 800493a:	69bb      	ldr	r3, [r7, #24]
 800493c:	1ad3      	subs	r3, r2, r3
 800493e:	69fa      	ldr	r2, [r7, #28]
 8004940:	429a      	cmp	r2, r3
 8004942:	d902      	bls.n	800494a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004944:	69fb      	ldr	r3, [r7, #28]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d13d      	bne.n	80049c6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	685a      	ldr	r2, [r3, #4]
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004958:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004962:	d111      	bne.n	8004988 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	689b      	ldr	r3, [r3, #8]
 8004968:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800496c:	d004      	beq.n	8004978 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	689b      	ldr	r3, [r3, #8]
 8004972:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004976:	d107      	bne.n	8004988 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	681a      	ldr	r2, [r3, #0]
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004986:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800498c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004990:	d10f      	bne.n	80049b2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	681a      	ldr	r2, [r3, #0]
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80049a0:	601a      	str	r2, [r3, #0]
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	681a      	ldr	r2, [r3, #0]
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80049b0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	2201      	movs	r2, #1
 80049b6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	2200      	movs	r2, #0
 80049be:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80049c2:	2303      	movs	r3, #3
 80049c4:	e017      	b.n	80049f6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80049c6:	697b      	ldr	r3, [r7, #20]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d101      	bne.n	80049d0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80049cc:	2300      	movs	r3, #0
 80049ce:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80049d0:	697b      	ldr	r3, [r7, #20]
 80049d2:	3b01      	subs	r3, #1
 80049d4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	689a      	ldr	r2, [r3, #8]
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	4013      	ands	r3, r2
 80049e0:	68ba      	ldr	r2, [r7, #8]
 80049e2:	429a      	cmp	r2, r3
 80049e4:	bf0c      	ite	eq
 80049e6:	2301      	moveq	r3, #1
 80049e8:	2300      	movne	r3, #0
 80049ea:	b2db      	uxtb	r3, r3
 80049ec:	461a      	mov	r2, r3
 80049ee:	79fb      	ldrb	r3, [r7, #7]
 80049f0:	429a      	cmp	r2, r3
 80049f2:	d19b      	bne.n	800492c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80049f4:	2300      	movs	r3, #0
}
 80049f6:	4618      	mov	r0, r3
 80049f8:	3720      	adds	r7, #32
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bd80      	pop	{r7, pc}
 80049fe:	bf00      	nop
 8004a00:	20000008 	.word	0x20000008

08004a04 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b08a      	sub	sp, #40	@ 0x28
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	60f8      	str	r0, [r7, #12]
 8004a0c:	60b9      	str	r1, [r7, #8]
 8004a0e:	607a      	str	r2, [r7, #4]
 8004a10:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004a12:	2300      	movs	r3, #0
 8004a14:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004a16:	f7fd fcc5 	bl	80023a4 <HAL_GetTick>
 8004a1a:	4602      	mov	r2, r0
 8004a1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a1e:	1a9b      	subs	r3, r3, r2
 8004a20:	683a      	ldr	r2, [r7, #0]
 8004a22:	4413      	add	r3, r2
 8004a24:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8004a26:	f7fd fcbd 	bl	80023a4 <HAL_GetTick>
 8004a2a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	330c      	adds	r3, #12
 8004a32:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004a34:	4b3d      	ldr	r3, [pc, #244]	@ (8004b2c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004a36:	681a      	ldr	r2, [r3, #0]
 8004a38:	4613      	mov	r3, r2
 8004a3a:	009b      	lsls	r3, r3, #2
 8004a3c:	4413      	add	r3, r2
 8004a3e:	00da      	lsls	r2, r3, #3
 8004a40:	1ad3      	subs	r3, r2, r3
 8004a42:	0d1b      	lsrs	r3, r3, #20
 8004a44:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a46:	fb02 f303 	mul.w	r3, r2, r3
 8004a4a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004a4c:	e060      	b.n	8004b10 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004a4e:	68bb      	ldr	r3, [r7, #8]
 8004a50:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004a54:	d107      	bne.n	8004a66 <SPI_WaitFifoStateUntilTimeout+0x62>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d104      	bne.n	8004a66 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004a5c:	69fb      	ldr	r3, [r7, #28]
 8004a5e:	781b      	ldrb	r3, [r3, #0]
 8004a60:	b2db      	uxtb	r3, r3
 8004a62:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004a64:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a6c:	d050      	beq.n	8004b10 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004a6e:	f7fd fc99 	bl	80023a4 <HAL_GetTick>
 8004a72:	4602      	mov	r2, r0
 8004a74:	6a3b      	ldr	r3, [r7, #32]
 8004a76:	1ad3      	subs	r3, r2, r3
 8004a78:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a7a:	429a      	cmp	r2, r3
 8004a7c:	d902      	bls.n	8004a84 <SPI_WaitFifoStateUntilTimeout+0x80>
 8004a7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d13d      	bne.n	8004b00 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	685a      	ldr	r2, [r3, #4]
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004a92:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004a9c:	d111      	bne.n	8004ac2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	689b      	ldr	r3, [r3, #8]
 8004aa2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004aa6:	d004      	beq.n	8004ab2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	689b      	ldr	r3, [r3, #8]
 8004aac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ab0:	d107      	bne.n	8004ac2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	681a      	ldr	r2, [r3, #0]
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004ac0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ac6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004aca:	d10f      	bne.n	8004aec <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	681a      	ldr	r2, [r3, #0]
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004ada:	601a      	str	r2, [r3, #0]
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	681a      	ldr	r2, [r3, #0]
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004aea:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	2201      	movs	r2, #1
 8004af0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	2200      	movs	r2, #0
 8004af8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004afc:	2303      	movs	r3, #3
 8004afe:	e010      	b.n	8004b22 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004b00:	69bb      	ldr	r3, [r7, #24]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d101      	bne.n	8004b0a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004b06:	2300      	movs	r3, #0
 8004b08:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8004b0a:	69bb      	ldr	r3, [r7, #24]
 8004b0c:	3b01      	subs	r3, #1
 8004b0e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	689a      	ldr	r2, [r3, #8]
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	4013      	ands	r3, r2
 8004b1a:	687a      	ldr	r2, [r7, #4]
 8004b1c:	429a      	cmp	r2, r3
 8004b1e:	d196      	bne.n	8004a4e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004b20:	2300      	movs	r3, #0
}
 8004b22:	4618      	mov	r0, r3
 8004b24:	3728      	adds	r7, #40	@ 0x28
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bd80      	pop	{r7, pc}
 8004b2a:	bf00      	nop
 8004b2c:	20000008 	.word	0x20000008

08004b30 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b086      	sub	sp, #24
 8004b34:	af02      	add	r7, sp, #8
 8004b36:	60f8      	str	r0, [r7, #12]
 8004b38:	60b9      	str	r1, [r7, #8]
 8004b3a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	9300      	str	r3, [sp, #0]
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	2200      	movs	r2, #0
 8004b44:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8004b48:	68f8      	ldr	r0, [r7, #12]
 8004b4a:	f7ff ff5b 	bl	8004a04 <SPI_WaitFifoStateUntilTimeout>
 8004b4e:	4603      	mov	r3, r0
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d007      	beq.n	8004b64 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b58:	f043 0220 	orr.w	r2, r3, #32
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004b60:	2303      	movs	r3, #3
 8004b62:	e027      	b.n	8004bb4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	9300      	str	r3, [sp, #0]
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	2180      	movs	r1, #128	@ 0x80
 8004b6e:	68f8      	ldr	r0, [r7, #12]
 8004b70:	f7ff fec0 	bl	80048f4 <SPI_WaitFlagStateUntilTimeout>
 8004b74:	4603      	mov	r3, r0
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d007      	beq.n	8004b8a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b7e:	f043 0220 	orr.w	r2, r3, #32
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004b86:	2303      	movs	r3, #3
 8004b88:	e014      	b.n	8004bb4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	9300      	str	r3, [sp, #0]
 8004b8e:	68bb      	ldr	r3, [r7, #8]
 8004b90:	2200      	movs	r2, #0
 8004b92:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8004b96:	68f8      	ldr	r0, [r7, #12]
 8004b98:	f7ff ff34 	bl	8004a04 <SPI_WaitFifoStateUntilTimeout>
 8004b9c:	4603      	mov	r3, r0
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d007      	beq.n	8004bb2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ba6:	f043 0220 	orr.w	r2, r3, #32
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004bae:	2303      	movs	r3, #3
 8004bb0:	e000      	b.n	8004bb4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004bb2:	2300      	movs	r3, #0
}
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	3710      	adds	r7, #16
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	bd80      	pop	{r7, pc}

08004bbc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b082      	sub	sp, #8
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d101      	bne.n	8004bce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	e049      	b.n	8004c62 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004bd4:	b2db      	uxtb	r3, r3
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d106      	bne.n	8004be8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004be2:	6878      	ldr	r0, [r7, #4]
 8004be4:	f7fd f906 	bl	8001df4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2202      	movs	r2, #2
 8004bec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681a      	ldr	r2, [r3, #0]
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	3304      	adds	r3, #4
 8004bf8:	4619      	mov	r1, r3
 8004bfa:	4610      	mov	r0, r2
 8004bfc:	f000 fc76 	bl	80054ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2201      	movs	r2, #1
 8004c04:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2201      	movs	r2, #1
 8004c0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2201      	movs	r2, #1
 8004c14:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2201      	movs	r2, #1
 8004c1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2201      	movs	r2, #1
 8004c24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2201      	movs	r2, #1
 8004c2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2201      	movs	r2, #1
 8004c34:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2201      	movs	r2, #1
 8004c44:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2201      	movs	r2, #1
 8004c54:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2201      	movs	r2, #1
 8004c5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004c60:	2300      	movs	r3, #0
}
 8004c62:	4618      	mov	r0, r3
 8004c64:	3708      	adds	r7, #8
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bd80      	pop	{r7, pc}
	...

08004c6c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	b085      	sub	sp, #20
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c7a:	b2db      	uxtb	r3, r3
 8004c7c:	2b01      	cmp	r3, #1
 8004c7e:	d001      	beq.n	8004c84 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004c80:	2301      	movs	r3, #1
 8004c82:	e04f      	b.n	8004d24 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2202      	movs	r2, #2
 8004c88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	68da      	ldr	r2, [r3, #12]
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f042 0201 	orr.w	r2, r2, #1
 8004c9a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a23      	ldr	r2, [pc, #140]	@ (8004d30 <HAL_TIM_Base_Start_IT+0xc4>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d01d      	beq.n	8004ce2 <HAL_TIM_Base_Start_IT+0x76>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004cae:	d018      	beq.n	8004ce2 <HAL_TIM_Base_Start_IT+0x76>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4a1f      	ldr	r2, [pc, #124]	@ (8004d34 <HAL_TIM_Base_Start_IT+0xc8>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d013      	beq.n	8004ce2 <HAL_TIM_Base_Start_IT+0x76>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4a1e      	ldr	r2, [pc, #120]	@ (8004d38 <HAL_TIM_Base_Start_IT+0xcc>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d00e      	beq.n	8004ce2 <HAL_TIM_Base_Start_IT+0x76>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4a1c      	ldr	r2, [pc, #112]	@ (8004d3c <HAL_TIM_Base_Start_IT+0xd0>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d009      	beq.n	8004ce2 <HAL_TIM_Base_Start_IT+0x76>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4a1b      	ldr	r2, [pc, #108]	@ (8004d40 <HAL_TIM_Base_Start_IT+0xd4>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d004      	beq.n	8004ce2 <HAL_TIM_Base_Start_IT+0x76>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a19      	ldr	r2, [pc, #100]	@ (8004d44 <HAL_TIM_Base_Start_IT+0xd8>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d115      	bne.n	8004d0e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	689a      	ldr	r2, [r3, #8]
 8004ce8:	4b17      	ldr	r3, [pc, #92]	@ (8004d48 <HAL_TIM_Base_Start_IT+0xdc>)
 8004cea:	4013      	ands	r3, r2
 8004cec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	2b06      	cmp	r3, #6
 8004cf2:	d015      	beq.n	8004d20 <HAL_TIM_Base_Start_IT+0xb4>
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004cfa:	d011      	beq.n	8004d20 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	681a      	ldr	r2, [r3, #0]
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f042 0201 	orr.w	r2, r2, #1
 8004d0a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d0c:	e008      	b.n	8004d20 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	681a      	ldr	r2, [r3, #0]
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f042 0201 	orr.w	r2, r2, #1
 8004d1c:	601a      	str	r2, [r3, #0]
 8004d1e:	e000      	b.n	8004d22 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d20:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004d22:	2300      	movs	r3, #0
}
 8004d24:	4618      	mov	r0, r3
 8004d26:	3714      	adds	r7, #20
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2e:	4770      	bx	lr
 8004d30:	40012c00 	.word	0x40012c00
 8004d34:	40000400 	.word	0x40000400
 8004d38:	40000800 	.word	0x40000800
 8004d3c:	40000c00 	.word	0x40000c00
 8004d40:	40013400 	.word	0x40013400
 8004d44:	40014000 	.word	0x40014000
 8004d48:	00010007 	.word	0x00010007

08004d4c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	b083      	sub	sp, #12
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	68da      	ldr	r2, [r3, #12]
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f022 0201 	bic.w	r2, r2, #1
 8004d62:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	6a1a      	ldr	r2, [r3, #32]
 8004d6a:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004d6e:	4013      	ands	r3, r2
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d10f      	bne.n	8004d94 <HAL_TIM_Base_Stop_IT+0x48>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	6a1a      	ldr	r2, [r3, #32]
 8004d7a:	f240 4344 	movw	r3, #1092	@ 0x444
 8004d7e:	4013      	ands	r3, r2
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d107      	bne.n	8004d94 <HAL_TIM_Base_Stop_IT+0x48>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	681a      	ldr	r2, [r3, #0]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f022 0201 	bic.w	r2, r2, #1
 8004d92:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2201      	movs	r2, #1
 8004d98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8004d9c:	2300      	movs	r3, #0
}
 8004d9e:	4618      	mov	r0, r3
 8004da0:	370c      	adds	r7, #12
 8004da2:	46bd      	mov	sp, r7
 8004da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da8:	4770      	bx	lr

08004daa <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004daa:	b580      	push	{r7, lr}
 8004dac:	b082      	sub	sp, #8
 8004dae:	af00      	add	r7, sp, #0
 8004db0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d101      	bne.n	8004dbc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004db8:	2301      	movs	r3, #1
 8004dba:	e049      	b.n	8004e50 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004dc2:	b2db      	uxtb	r3, r3
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d106      	bne.n	8004dd6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004dd0:	6878      	ldr	r0, [r7, #4]
 8004dd2:	f7fc fff1 	bl	8001db8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2202      	movs	r2, #2
 8004dda:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681a      	ldr	r2, [r3, #0]
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	3304      	adds	r3, #4
 8004de6:	4619      	mov	r1, r3
 8004de8:	4610      	mov	r0, r2
 8004dea:	f000 fb7f 	bl	80054ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2201      	movs	r2, #1
 8004df2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2201      	movs	r2, #1
 8004dfa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2201      	movs	r2, #1
 8004e02:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2201      	movs	r2, #1
 8004e0a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2201      	movs	r2, #1
 8004e12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2201      	movs	r2, #1
 8004e1a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2201      	movs	r2, #1
 8004e22:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2201      	movs	r2, #1
 8004e2a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2201      	movs	r2, #1
 8004e32:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2201      	movs	r2, #1
 8004e3a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2201      	movs	r2, #1
 8004e42:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2201      	movs	r2, #1
 8004e4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004e4e:	2300      	movs	r3, #0
}
 8004e50:	4618      	mov	r0, r3
 8004e52:	3708      	adds	r7, #8
 8004e54:	46bd      	mov	sp, r7
 8004e56:	bd80      	pop	{r7, pc}

08004e58 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b084      	sub	sp, #16
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
 8004e60:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d109      	bne.n	8004e7c <HAL_TIM_PWM_Start+0x24>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004e6e:	b2db      	uxtb	r3, r3
 8004e70:	2b01      	cmp	r3, #1
 8004e72:	bf14      	ite	ne
 8004e74:	2301      	movne	r3, #1
 8004e76:	2300      	moveq	r3, #0
 8004e78:	b2db      	uxtb	r3, r3
 8004e7a:	e03c      	b.n	8004ef6 <HAL_TIM_PWM_Start+0x9e>
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	2b04      	cmp	r3, #4
 8004e80:	d109      	bne.n	8004e96 <HAL_TIM_PWM_Start+0x3e>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004e88:	b2db      	uxtb	r3, r3
 8004e8a:	2b01      	cmp	r3, #1
 8004e8c:	bf14      	ite	ne
 8004e8e:	2301      	movne	r3, #1
 8004e90:	2300      	moveq	r3, #0
 8004e92:	b2db      	uxtb	r3, r3
 8004e94:	e02f      	b.n	8004ef6 <HAL_TIM_PWM_Start+0x9e>
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	2b08      	cmp	r3, #8
 8004e9a:	d109      	bne.n	8004eb0 <HAL_TIM_PWM_Start+0x58>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004ea2:	b2db      	uxtb	r3, r3
 8004ea4:	2b01      	cmp	r3, #1
 8004ea6:	bf14      	ite	ne
 8004ea8:	2301      	movne	r3, #1
 8004eaa:	2300      	moveq	r3, #0
 8004eac:	b2db      	uxtb	r3, r3
 8004eae:	e022      	b.n	8004ef6 <HAL_TIM_PWM_Start+0x9e>
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	2b0c      	cmp	r3, #12
 8004eb4:	d109      	bne.n	8004eca <HAL_TIM_PWM_Start+0x72>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ebc:	b2db      	uxtb	r3, r3
 8004ebe:	2b01      	cmp	r3, #1
 8004ec0:	bf14      	ite	ne
 8004ec2:	2301      	movne	r3, #1
 8004ec4:	2300      	moveq	r3, #0
 8004ec6:	b2db      	uxtb	r3, r3
 8004ec8:	e015      	b.n	8004ef6 <HAL_TIM_PWM_Start+0x9e>
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	2b10      	cmp	r3, #16
 8004ece:	d109      	bne.n	8004ee4 <HAL_TIM_PWM_Start+0x8c>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004ed6:	b2db      	uxtb	r3, r3
 8004ed8:	2b01      	cmp	r3, #1
 8004eda:	bf14      	ite	ne
 8004edc:	2301      	movne	r3, #1
 8004ede:	2300      	moveq	r3, #0
 8004ee0:	b2db      	uxtb	r3, r3
 8004ee2:	e008      	b.n	8004ef6 <HAL_TIM_PWM_Start+0x9e>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004eea:	b2db      	uxtb	r3, r3
 8004eec:	2b01      	cmp	r3, #1
 8004eee:	bf14      	ite	ne
 8004ef0:	2301      	movne	r3, #1
 8004ef2:	2300      	moveq	r3, #0
 8004ef4:	b2db      	uxtb	r3, r3
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d001      	beq.n	8004efe <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004efa:	2301      	movs	r3, #1
 8004efc:	e09c      	b.n	8005038 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d104      	bne.n	8004f0e <HAL_TIM_PWM_Start+0xb6>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2202      	movs	r2, #2
 8004f08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004f0c:	e023      	b.n	8004f56 <HAL_TIM_PWM_Start+0xfe>
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	2b04      	cmp	r3, #4
 8004f12:	d104      	bne.n	8004f1e <HAL_TIM_PWM_Start+0xc6>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2202      	movs	r2, #2
 8004f18:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004f1c:	e01b      	b.n	8004f56 <HAL_TIM_PWM_Start+0xfe>
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	2b08      	cmp	r3, #8
 8004f22:	d104      	bne.n	8004f2e <HAL_TIM_PWM_Start+0xd6>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2202      	movs	r2, #2
 8004f28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004f2c:	e013      	b.n	8004f56 <HAL_TIM_PWM_Start+0xfe>
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	2b0c      	cmp	r3, #12
 8004f32:	d104      	bne.n	8004f3e <HAL_TIM_PWM_Start+0xe6>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2202      	movs	r2, #2
 8004f38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004f3c:	e00b      	b.n	8004f56 <HAL_TIM_PWM_Start+0xfe>
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	2b10      	cmp	r3, #16
 8004f42:	d104      	bne.n	8004f4e <HAL_TIM_PWM_Start+0xf6>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2202      	movs	r2, #2
 8004f48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004f4c:	e003      	b.n	8004f56 <HAL_TIM_PWM_Start+0xfe>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2202      	movs	r2, #2
 8004f52:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	2201      	movs	r2, #1
 8004f5c:	6839      	ldr	r1, [r7, #0]
 8004f5e:	4618      	mov	r0, r3
 8004f60:	f000 fe40 	bl	8005be4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4a35      	ldr	r2, [pc, #212]	@ (8005040 <HAL_TIM_PWM_Start+0x1e8>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d013      	beq.n	8004f96 <HAL_TIM_PWM_Start+0x13e>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4a34      	ldr	r2, [pc, #208]	@ (8005044 <HAL_TIM_PWM_Start+0x1ec>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d00e      	beq.n	8004f96 <HAL_TIM_PWM_Start+0x13e>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a32      	ldr	r2, [pc, #200]	@ (8005048 <HAL_TIM_PWM_Start+0x1f0>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d009      	beq.n	8004f96 <HAL_TIM_PWM_Start+0x13e>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4a31      	ldr	r2, [pc, #196]	@ (800504c <HAL_TIM_PWM_Start+0x1f4>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d004      	beq.n	8004f96 <HAL_TIM_PWM_Start+0x13e>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4a2f      	ldr	r2, [pc, #188]	@ (8005050 <HAL_TIM_PWM_Start+0x1f8>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d101      	bne.n	8004f9a <HAL_TIM_PWM_Start+0x142>
 8004f96:	2301      	movs	r3, #1
 8004f98:	e000      	b.n	8004f9c <HAL_TIM_PWM_Start+0x144>
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d007      	beq.n	8004fb0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004fae:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	4a22      	ldr	r2, [pc, #136]	@ (8005040 <HAL_TIM_PWM_Start+0x1e8>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d01d      	beq.n	8004ff6 <HAL_TIM_PWM_Start+0x19e>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004fc2:	d018      	beq.n	8004ff6 <HAL_TIM_PWM_Start+0x19e>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4a22      	ldr	r2, [pc, #136]	@ (8005054 <HAL_TIM_PWM_Start+0x1fc>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d013      	beq.n	8004ff6 <HAL_TIM_PWM_Start+0x19e>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	4a21      	ldr	r2, [pc, #132]	@ (8005058 <HAL_TIM_PWM_Start+0x200>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d00e      	beq.n	8004ff6 <HAL_TIM_PWM_Start+0x19e>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4a1f      	ldr	r2, [pc, #124]	@ (800505c <HAL_TIM_PWM_Start+0x204>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d009      	beq.n	8004ff6 <HAL_TIM_PWM_Start+0x19e>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4a17      	ldr	r2, [pc, #92]	@ (8005044 <HAL_TIM_PWM_Start+0x1ec>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d004      	beq.n	8004ff6 <HAL_TIM_PWM_Start+0x19e>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4a15      	ldr	r2, [pc, #84]	@ (8005048 <HAL_TIM_PWM_Start+0x1f0>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d115      	bne.n	8005022 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	689a      	ldr	r2, [r3, #8]
 8004ffc:	4b18      	ldr	r3, [pc, #96]	@ (8005060 <HAL_TIM_PWM_Start+0x208>)
 8004ffe:	4013      	ands	r3, r2
 8005000:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	2b06      	cmp	r3, #6
 8005006:	d015      	beq.n	8005034 <HAL_TIM_PWM_Start+0x1dc>
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800500e:	d011      	beq.n	8005034 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	681a      	ldr	r2, [r3, #0]
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f042 0201 	orr.w	r2, r2, #1
 800501e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005020:	e008      	b.n	8005034 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	681a      	ldr	r2, [r3, #0]
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f042 0201 	orr.w	r2, r2, #1
 8005030:	601a      	str	r2, [r3, #0]
 8005032:	e000      	b.n	8005036 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005034:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005036:	2300      	movs	r3, #0
}
 8005038:	4618      	mov	r0, r3
 800503a:	3710      	adds	r7, #16
 800503c:	46bd      	mov	sp, r7
 800503e:	bd80      	pop	{r7, pc}
 8005040:	40012c00 	.word	0x40012c00
 8005044:	40013400 	.word	0x40013400
 8005048:	40014000 	.word	0x40014000
 800504c:	40014400 	.word	0x40014400
 8005050:	40014800 	.word	0x40014800
 8005054:	40000400 	.word	0x40000400
 8005058:	40000800 	.word	0x40000800
 800505c:	40000c00 	.word	0x40000c00
 8005060:	00010007 	.word	0x00010007

08005064 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b084      	sub	sp, #16
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	68db      	ldr	r3, [r3, #12]
 8005072:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	691b      	ldr	r3, [r3, #16]
 800507a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	f003 0302 	and.w	r3, r3, #2
 8005082:	2b00      	cmp	r3, #0
 8005084:	d020      	beq.n	80050c8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	f003 0302 	and.w	r3, r3, #2
 800508c:	2b00      	cmp	r3, #0
 800508e:	d01b      	beq.n	80050c8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f06f 0202 	mvn.w	r2, #2
 8005098:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2201      	movs	r2, #1
 800509e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	699b      	ldr	r3, [r3, #24]
 80050a6:	f003 0303 	and.w	r3, r3, #3
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d003      	beq.n	80050b6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80050ae:	6878      	ldr	r0, [r7, #4]
 80050b0:	f000 f9fe 	bl	80054b0 <HAL_TIM_IC_CaptureCallback>
 80050b4:	e005      	b.n	80050c2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80050b6:	6878      	ldr	r0, [r7, #4]
 80050b8:	f000 f9f0 	bl	800549c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050bc:	6878      	ldr	r0, [r7, #4]
 80050be:	f000 fa01 	bl	80054c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2200      	movs	r2, #0
 80050c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	f003 0304 	and.w	r3, r3, #4
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d020      	beq.n	8005114 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	f003 0304 	and.w	r3, r3, #4
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d01b      	beq.n	8005114 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f06f 0204 	mvn.w	r2, #4
 80050e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2202      	movs	r2, #2
 80050ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	699b      	ldr	r3, [r3, #24]
 80050f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d003      	beq.n	8005102 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050fa:	6878      	ldr	r0, [r7, #4]
 80050fc:	f000 f9d8 	bl	80054b0 <HAL_TIM_IC_CaptureCallback>
 8005100:	e005      	b.n	800510e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005102:	6878      	ldr	r0, [r7, #4]
 8005104:	f000 f9ca 	bl	800549c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005108:	6878      	ldr	r0, [r7, #4]
 800510a:	f000 f9db 	bl	80054c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2200      	movs	r2, #0
 8005112:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005114:	68bb      	ldr	r3, [r7, #8]
 8005116:	f003 0308 	and.w	r3, r3, #8
 800511a:	2b00      	cmp	r3, #0
 800511c:	d020      	beq.n	8005160 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	f003 0308 	and.w	r3, r3, #8
 8005124:	2b00      	cmp	r3, #0
 8005126:	d01b      	beq.n	8005160 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f06f 0208 	mvn.w	r2, #8
 8005130:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2204      	movs	r2, #4
 8005136:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	69db      	ldr	r3, [r3, #28]
 800513e:	f003 0303 	and.w	r3, r3, #3
 8005142:	2b00      	cmp	r3, #0
 8005144:	d003      	beq.n	800514e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005146:	6878      	ldr	r0, [r7, #4]
 8005148:	f000 f9b2 	bl	80054b0 <HAL_TIM_IC_CaptureCallback>
 800514c:	e005      	b.n	800515a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800514e:	6878      	ldr	r0, [r7, #4]
 8005150:	f000 f9a4 	bl	800549c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005154:	6878      	ldr	r0, [r7, #4]
 8005156:	f000 f9b5 	bl	80054c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2200      	movs	r2, #0
 800515e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	f003 0310 	and.w	r3, r3, #16
 8005166:	2b00      	cmp	r3, #0
 8005168:	d020      	beq.n	80051ac <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	f003 0310 	and.w	r3, r3, #16
 8005170:	2b00      	cmp	r3, #0
 8005172:	d01b      	beq.n	80051ac <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f06f 0210 	mvn.w	r2, #16
 800517c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2208      	movs	r2, #8
 8005182:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	69db      	ldr	r3, [r3, #28]
 800518a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800518e:	2b00      	cmp	r3, #0
 8005190:	d003      	beq.n	800519a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005192:	6878      	ldr	r0, [r7, #4]
 8005194:	f000 f98c 	bl	80054b0 <HAL_TIM_IC_CaptureCallback>
 8005198:	e005      	b.n	80051a6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800519a:	6878      	ldr	r0, [r7, #4]
 800519c:	f000 f97e 	bl	800549c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051a0:	6878      	ldr	r0, [r7, #4]
 80051a2:	f000 f98f 	bl	80054c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2200      	movs	r2, #0
 80051aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80051ac:	68bb      	ldr	r3, [r7, #8]
 80051ae:	f003 0301 	and.w	r3, r3, #1
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d00c      	beq.n	80051d0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	f003 0301 	and.w	r3, r3, #1
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d007      	beq.n	80051d0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f06f 0201 	mvn.w	r2, #1
 80051c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80051ca:	6878      	ldr	r0, [r7, #4]
 80051cc:	f7fc fd0e 	bl	8001bec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80051d0:	68bb      	ldr	r3, [r7, #8]
 80051d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d104      	bne.n	80051e4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d00c      	beq.n	80051fe <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d007      	beq.n	80051fe <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80051f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80051f8:	6878      	ldr	r0, [r7, #4]
 80051fa:	f000 fdab 	bl	8005d54 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80051fe:	68bb      	ldr	r3, [r7, #8]
 8005200:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005204:	2b00      	cmp	r3, #0
 8005206:	d00c      	beq.n	8005222 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800520e:	2b00      	cmp	r3, #0
 8005210:	d007      	beq.n	8005222 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800521a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800521c:	6878      	ldr	r0, [r7, #4]
 800521e:	f000 fda3 	bl	8005d68 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005228:	2b00      	cmp	r3, #0
 800522a:	d00c      	beq.n	8005246 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005232:	2b00      	cmp	r3, #0
 8005234:	d007      	beq.n	8005246 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800523e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005240:	6878      	ldr	r0, [r7, #4]
 8005242:	f000 f949 	bl	80054d8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	f003 0320 	and.w	r3, r3, #32
 800524c:	2b00      	cmp	r3, #0
 800524e:	d00c      	beq.n	800526a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	f003 0320 	and.w	r3, r3, #32
 8005256:	2b00      	cmp	r3, #0
 8005258:	d007      	beq.n	800526a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f06f 0220 	mvn.w	r2, #32
 8005262:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005264:	6878      	ldr	r0, [r7, #4]
 8005266:	f000 fd6b 	bl	8005d40 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800526a:	bf00      	nop
 800526c:	3710      	adds	r7, #16
 800526e:	46bd      	mov	sp, r7
 8005270:	bd80      	pop	{r7, pc}
	...

08005274 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b086      	sub	sp, #24
 8005278:	af00      	add	r7, sp, #0
 800527a:	60f8      	str	r0, [r7, #12]
 800527c:	60b9      	str	r1, [r7, #8]
 800527e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005280:	2300      	movs	r3, #0
 8005282:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800528a:	2b01      	cmp	r3, #1
 800528c:	d101      	bne.n	8005292 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800528e:	2302      	movs	r3, #2
 8005290:	e0ff      	b.n	8005492 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	2201      	movs	r2, #1
 8005296:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2b14      	cmp	r3, #20
 800529e:	f200 80f0 	bhi.w	8005482 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80052a2:	a201      	add	r2, pc, #4	@ (adr r2, 80052a8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80052a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052a8:	080052fd 	.word	0x080052fd
 80052ac:	08005483 	.word	0x08005483
 80052b0:	08005483 	.word	0x08005483
 80052b4:	08005483 	.word	0x08005483
 80052b8:	0800533d 	.word	0x0800533d
 80052bc:	08005483 	.word	0x08005483
 80052c0:	08005483 	.word	0x08005483
 80052c4:	08005483 	.word	0x08005483
 80052c8:	0800537f 	.word	0x0800537f
 80052cc:	08005483 	.word	0x08005483
 80052d0:	08005483 	.word	0x08005483
 80052d4:	08005483 	.word	0x08005483
 80052d8:	080053bf 	.word	0x080053bf
 80052dc:	08005483 	.word	0x08005483
 80052e0:	08005483 	.word	0x08005483
 80052e4:	08005483 	.word	0x08005483
 80052e8:	08005401 	.word	0x08005401
 80052ec:	08005483 	.word	0x08005483
 80052f0:	08005483 	.word	0x08005483
 80052f4:	08005483 	.word	0x08005483
 80052f8:	08005441 	.word	0x08005441
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	68b9      	ldr	r1, [r7, #8]
 8005302:	4618      	mov	r0, r3
 8005304:	f000 f998 	bl	8005638 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	699a      	ldr	r2, [r3, #24]
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f042 0208 	orr.w	r2, r2, #8
 8005316:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	699a      	ldr	r2, [r3, #24]
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f022 0204 	bic.w	r2, r2, #4
 8005326:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	6999      	ldr	r1, [r3, #24]
 800532e:	68bb      	ldr	r3, [r7, #8]
 8005330:	691a      	ldr	r2, [r3, #16]
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	430a      	orrs	r2, r1
 8005338:	619a      	str	r2, [r3, #24]
      break;
 800533a:	e0a5      	b.n	8005488 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	68b9      	ldr	r1, [r7, #8]
 8005342:	4618      	mov	r0, r3
 8005344:	f000 fa08 	bl	8005758 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	699a      	ldr	r2, [r3, #24]
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005356:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	699a      	ldr	r2, [r3, #24]
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005366:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	6999      	ldr	r1, [r3, #24]
 800536e:	68bb      	ldr	r3, [r7, #8]
 8005370:	691b      	ldr	r3, [r3, #16]
 8005372:	021a      	lsls	r2, r3, #8
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	430a      	orrs	r2, r1
 800537a:	619a      	str	r2, [r3, #24]
      break;
 800537c:	e084      	b.n	8005488 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	68b9      	ldr	r1, [r7, #8]
 8005384:	4618      	mov	r0, r3
 8005386:	f000 fa71 	bl	800586c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	69da      	ldr	r2, [r3, #28]
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f042 0208 	orr.w	r2, r2, #8
 8005398:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	69da      	ldr	r2, [r3, #28]
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f022 0204 	bic.w	r2, r2, #4
 80053a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	69d9      	ldr	r1, [r3, #28]
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	691a      	ldr	r2, [r3, #16]
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	430a      	orrs	r2, r1
 80053ba:	61da      	str	r2, [r3, #28]
      break;
 80053bc:	e064      	b.n	8005488 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	68b9      	ldr	r1, [r7, #8]
 80053c4:	4618      	mov	r0, r3
 80053c6:	f000 fad9 	bl	800597c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	69da      	ldr	r2, [r3, #28]
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80053d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	69da      	ldr	r2, [r3, #28]
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80053e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	69d9      	ldr	r1, [r3, #28]
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	691b      	ldr	r3, [r3, #16]
 80053f4:	021a      	lsls	r2, r3, #8
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	430a      	orrs	r2, r1
 80053fc:	61da      	str	r2, [r3, #28]
      break;
 80053fe:	e043      	b.n	8005488 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	68b9      	ldr	r1, [r7, #8]
 8005406:	4618      	mov	r0, r3
 8005408:	f000 fb22 	bl	8005a50 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f042 0208 	orr.w	r2, r2, #8
 800541a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f022 0204 	bic.w	r2, r2, #4
 800542a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	691a      	ldr	r2, [r3, #16]
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	430a      	orrs	r2, r1
 800543c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800543e:	e023      	b.n	8005488 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	68b9      	ldr	r1, [r7, #8]
 8005446:	4618      	mov	r0, r3
 8005448:	f000 fb66 	bl	8005b18 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800545a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800546a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	691b      	ldr	r3, [r3, #16]
 8005476:	021a      	lsls	r2, r3, #8
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	430a      	orrs	r2, r1
 800547e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005480:	e002      	b.n	8005488 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005482:	2301      	movs	r3, #1
 8005484:	75fb      	strb	r3, [r7, #23]
      break;
 8005486:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	2200      	movs	r2, #0
 800548c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005490:	7dfb      	ldrb	r3, [r7, #23]
}
 8005492:	4618      	mov	r0, r3
 8005494:	3718      	adds	r7, #24
 8005496:	46bd      	mov	sp, r7
 8005498:	bd80      	pop	{r7, pc}
 800549a:	bf00      	nop

0800549c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800549c:	b480      	push	{r7}
 800549e:	b083      	sub	sp, #12
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80054a4:	bf00      	nop
 80054a6:	370c      	adds	r7, #12
 80054a8:	46bd      	mov	sp, r7
 80054aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ae:	4770      	bx	lr

080054b0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80054b0:	b480      	push	{r7}
 80054b2:	b083      	sub	sp, #12
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80054b8:	bf00      	nop
 80054ba:	370c      	adds	r7, #12
 80054bc:	46bd      	mov	sp, r7
 80054be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c2:	4770      	bx	lr

080054c4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80054c4:	b480      	push	{r7}
 80054c6:	b083      	sub	sp, #12
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80054cc:	bf00      	nop
 80054ce:	370c      	adds	r7, #12
 80054d0:	46bd      	mov	sp, r7
 80054d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d6:	4770      	bx	lr

080054d8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80054d8:	b480      	push	{r7}
 80054da:	b083      	sub	sp, #12
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80054e0:	bf00      	nop
 80054e2:	370c      	adds	r7, #12
 80054e4:	46bd      	mov	sp, r7
 80054e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ea:	4770      	bx	lr

080054ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80054ec:	b480      	push	{r7}
 80054ee:	b085      	sub	sp, #20
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
 80054f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	4a46      	ldr	r2, [pc, #280]	@ (8005618 <TIM_Base_SetConfig+0x12c>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d013      	beq.n	800552c <TIM_Base_SetConfig+0x40>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800550a:	d00f      	beq.n	800552c <TIM_Base_SetConfig+0x40>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	4a43      	ldr	r2, [pc, #268]	@ (800561c <TIM_Base_SetConfig+0x130>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d00b      	beq.n	800552c <TIM_Base_SetConfig+0x40>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	4a42      	ldr	r2, [pc, #264]	@ (8005620 <TIM_Base_SetConfig+0x134>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d007      	beq.n	800552c <TIM_Base_SetConfig+0x40>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	4a41      	ldr	r2, [pc, #260]	@ (8005624 <TIM_Base_SetConfig+0x138>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d003      	beq.n	800552c <TIM_Base_SetConfig+0x40>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	4a40      	ldr	r2, [pc, #256]	@ (8005628 <TIM_Base_SetConfig+0x13c>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d108      	bne.n	800553e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005532:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	685b      	ldr	r3, [r3, #4]
 8005538:	68fa      	ldr	r2, [r7, #12]
 800553a:	4313      	orrs	r3, r2
 800553c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	4a35      	ldr	r2, [pc, #212]	@ (8005618 <TIM_Base_SetConfig+0x12c>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d01f      	beq.n	8005586 <TIM_Base_SetConfig+0x9a>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800554c:	d01b      	beq.n	8005586 <TIM_Base_SetConfig+0x9a>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	4a32      	ldr	r2, [pc, #200]	@ (800561c <TIM_Base_SetConfig+0x130>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d017      	beq.n	8005586 <TIM_Base_SetConfig+0x9a>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	4a31      	ldr	r2, [pc, #196]	@ (8005620 <TIM_Base_SetConfig+0x134>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d013      	beq.n	8005586 <TIM_Base_SetConfig+0x9a>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	4a30      	ldr	r2, [pc, #192]	@ (8005624 <TIM_Base_SetConfig+0x138>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d00f      	beq.n	8005586 <TIM_Base_SetConfig+0x9a>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	4a2f      	ldr	r2, [pc, #188]	@ (8005628 <TIM_Base_SetConfig+0x13c>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d00b      	beq.n	8005586 <TIM_Base_SetConfig+0x9a>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	4a2e      	ldr	r2, [pc, #184]	@ (800562c <TIM_Base_SetConfig+0x140>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d007      	beq.n	8005586 <TIM_Base_SetConfig+0x9a>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	4a2d      	ldr	r2, [pc, #180]	@ (8005630 <TIM_Base_SetConfig+0x144>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d003      	beq.n	8005586 <TIM_Base_SetConfig+0x9a>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	4a2c      	ldr	r2, [pc, #176]	@ (8005634 <TIM_Base_SetConfig+0x148>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d108      	bne.n	8005598 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800558c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	68db      	ldr	r3, [r3, #12]
 8005592:	68fa      	ldr	r2, [r7, #12]
 8005594:	4313      	orrs	r3, r2
 8005596:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	695b      	ldr	r3, [r3, #20]
 80055a2:	4313      	orrs	r3, r2
 80055a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	68fa      	ldr	r2, [r7, #12]
 80055aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	689a      	ldr	r2, [r3, #8]
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	681a      	ldr	r2, [r3, #0]
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	4a16      	ldr	r2, [pc, #88]	@ (8005618 <TIM_Base_SetConfig+0x12c>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d00f      	beq.n	80055e4 <TIM_Base_SetConfig+0xf8>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	4a18      	ldr	r2, [pc, #96]	@ (8005628 <TIM_Base_SetConfig+0x13c>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d00b      	beq.n	80055e4 <TIM_Base_SetConfig+0xf8>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	4a17      	ldr	r2, [pc, #92]	@ (800562c <TIM_Base_SetConfig+0x140>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d007      	beq.n	80055e4 <TIM_Base_SetConfig+0xf8>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	4a16      	ldr	r2, [pc, #88]	@ (8005630 <TIM_Base_SetConfig+0x144>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d003      	beq.n	80055e4 <TIM_Base_SetConfig+0xf8>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	4a15      	ldr	r2, [pc, #84]	@ (8005634 <TIM_Base_SetConfig+0x148>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d103      	bne.n	80055ec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	691a      	ldr	r2, [r3, #16]
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2201      	movs	r2, #1
 80055f0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	691b      	ldr	r3, [r3, #16]
 80055f6:	f003 0301 	and.w	r3, r3, #1
 80055fa:	2b01      	cmp	r3, #1
 80055fc:	d105      	bne.n	800560a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	691b      	ldr	r3, [r3, #16]
 8005602:	f023 0201 	bic.w	r2, r3, #1
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	611a      	str	r2, [r3, #16]
  }
}
 800560a:	bf00      	nop
 800560c:	3714      	adds	r7, #20
 800560e:	46bd      	mov	sp, r7
 8005610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005614:	4770      	bx	lr
 8005616:	bf00      	nop
 8005618:	40012c00 	.word	0x40012c00
 800561c:	40000400 	.word	0x40000400
 8005620:	40000800 	.word	0x40000800
 8005624:	40000c00 	.word	0x40000c00
 8005628:	40013400 	.word	0x40013400
 800562c:	40014000 	.word	0x40014000
 8005630:	40014400 	.word	0x40014400
 8005634:	40014800 	.word	0x40014800

08005638 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005638:	b480      	push	{r7}
 800563a:	b087      	sub	sp, #28
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
 8005640:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6a1b      	ldr	r3, [r3, #32]
 8005646:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6a1b      	ldr	r3, [r3, #32]
 800564c:	f023 0201 	bic.w	r2, r3, #1
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	685b      	ldr	r3, [r3, #4]
 8005658:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	699b      	ldr	r3, [r3, #24]
 800565e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005666:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800566a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	f023 0303 	bic.w	r3, r3, #3
 8005672:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	68fa      	ldr	r2, [r7, #12]
 800567a:	4313      	orrs	r3, r2
 800567c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800567e:	697b      	ldr	r3, [r7, #20]
 8005680:	f023 0302 	bic.w	r3, r3, #2
 8005684:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	689b      	ldr	r3, [r3, #8]
 800568a:	697a      	ldr	r2, [r7, #20]
 800568c:	4313      	orrs	r3, r2
 800568e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	4a2c      	ldr	r2, [pc, #176]	@ (8005744 <TIM_OC1_SetConfig+0x10c>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d00f      	beq.n	80056b8 <TIM_OC1_SetConfig+0x80>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	4a2b      	ldr	r2, [pc, #172]	@ (8005748 <TIM_OC1_SetConfig+0x110>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d00b      	beq.n	80056b8 <TIM_OC1_SetConfig+0x80>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	4a2a      	ldr	r2, [pc, #168]	@ (800574c <TIM_OC1_SetConfig+0x114>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d007      	beq.n	80056b8 <TIM_OC1_SetConfig+0x80>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	4a29      	ldr	r2, [pc, #164]	@ (8005750 <TIM_OC1_SetConfig+0x118>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d003      	beq.n	80056b8 <TIM_OC1_SetConfig+0x80>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	4a28      	ldr	r2, [pc, #160]	@ (8005754 <TIM_OC1_SetConfig+0x11c>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d10c      	bne.n	80056d2 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80056b8:	697b      	ldr	r3, [r7, #20]
 80056ba:	f023 0308 	bic.w	r3, r3, #8
 80056be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	68db      	ldr	r3, [r3, #12]
 80056c4:	697a      	ldr	r2, [r7, #20]
 80056c6:	4313      	orrs	r3, r2
 80056c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80056ca:	697b      	ldr	r3, [r7, #20]
 80056cc:	f023 0304 	bic.w	r3, r3, #4
 80056d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	4a1b      	ldr	r2, [pc, #108]	@ (8005744 <TIM_OC1_SetConfig+0x10c>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d00f      	beq.n	80056fa <TIM_OC1_SetConfig+0xc2>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	4a1a      	ldr	r2, [pc, #104]	@ (8005748 <TIM_OC1_SetConfig+0x110>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d00b      	beq.n	80056fa <TIM_OC1_SetConfig+0xc2>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	4a19      	ldr	r2, [pc, #100]	@ (800574c <TIM_OC1_SetConfig+0x114>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d007      	beq.n	80056fa <TIM_OC1_SetConfig+0xc2>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	4a18      	ldr	r2, [pc, #96]	@ (8005750 <TIM_OC1_SetConfig+0x118>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d003      	beq.n	80056fa <TIM_OC1_SetConfig+0xc2>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	4a17      	ldr	r2, [pc, #92]	@ (8005754 <TIM_OC1_SetConfig+0x11c>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d111      	bne.n	800571e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80056fa:	693b      	ldr	r3, [r7, #16]
 80056fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005700:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005702:	693b      	ldr	r3, [r7, #16]
 8005704:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005708:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	695b      	ldr	r3, [r3, #20]
 800570e:	693a      	ldr	r2, [r7, #16]
 8005710:	4313      	orrs	r3, r2
 8005712:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	699b      	ldr	r3, [r3, #24]
 8005718:	693a      	ldr	r2, [r7, #16]
 800571a:	4313      	orrs	r3, r2
 800571c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	693a      	ldr	r2, [r7, #16]
 8005722:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	68fa      	ldr	r2, [r7, #12]
 8005728:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	685a      	ldr	r2, [r3, #4]
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	697a      	ldr	r2, [r7, #20]
 8005736:	621a      	str	r2, [r3, #32]
}
 8005738:	bf00      	nop
 800573a:	371c      	adds	r7, #28
 800573c:	46bd      	mov	sp, r7
 800573e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005742:	4770      	bx	lr
 8005744:	40012c00 	.word	0x40012c00
 8005748:	40013400 	.word	0x40013400
 800574c:	40014000 	.word	0x40014000
 8005750:	40014400 	.word	0x40014400
 8005754:	40014800 	.word	0x40014800

08005758 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005758:	b480      	push	{r7}
 800575a:	b087      	sub	sp, #28
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
 8005760:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6a1b      	ldr	r3, [r3, #32]
 8005766:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6a1b      	ldr	r3, [r3, #32]
 800576c:	f023 0210 	bic.w	r2, r3, #16
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	685b      	ldr	r3, [r3, #4]
 8005778:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	699b      	ldr	r3, [r3, #24]
 800577e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005786:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800578a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005792:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	021b      	lsls	r3, r3, #8
 800579a:	68fa      	ldr	r2, [r7, #12]
 800579c:	4313      	orrs	r3, r2
 800579e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80057a0:	697b      	ldr	r3, [r7, #20]
 80057a2:	f023 0320 	bic.w	r3, r3, #32
 80057a6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	689b      	ldr	r3, [r3, #8]
 80057ac:	011b      	lsls	r3, r3, #4
 80057ae:	697a      	ldr	r2, [r7, #20]
 80057b0:	4313      	orrs	r3, r2
 80057b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	4a28      	ldr	r2, [pc, #160]	@ (8005858 <TIM_OC2_SetConfig+0x100>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d003      	beq.n	80057c4 <TIM_OC2_SetConfig+0x6c>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	4a27      	ldr	r2, [pc, #156]	@ (800585c <TIM_OC2_SetConfig+0x104>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d10d      	bne.n	80057e0 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80057c4:	697b      	ldr	r3, [r7, #20]
 80057c6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80057ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	68db      	ldr	r3, [r3, #12]
 80057d0:	011b      	lsls	r3, r3, #4
 80057d2:	697a      	ldr	r2, [r7, #20]
 80057d4:	4313      	orrs	r3, r2
 80057d6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80057d8:	697b      	ldr	r3, [r7, #20]
 80057da:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80057de:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	4a1d      	ldr	r2, [pc, #116]	@ (8005858 <TIM_OC2_SetConfig+0x100>)
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d00f      	beq.n	8005808 <TIM_OC2_SetConfig+0xb0>
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	4a1c      	ldr	r2, [pc, #112]	@ (800585c <TIM_OC2_SetConfig+0x104>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d00b      	beq.n	8005808 <TIM_OC2_SetConfig+0xb0>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	4a1b      	ldr	r2, [pc, #108]	@ (8005860 <TIM_OC2_SetConfig+0x108>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d007      	beq.n	8005808 <TIM_OC2_SetConfig+0xb0>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	4a1a      	ldr	r2, [pc, #104]	@ (8005864 <TIM_OC2_SetConfig+0x10c>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d003      	beq.n	8005808 <TIM_OC2_SetConfig+0xb0>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	4a19      	ldr	r2, [pc, #100]	@ (8005868 <TIM_OC2_SetConfig+0x110>)
 8005804:	4293      	cmp	r3, r2
 8005806:	d113      	bne.n	8005830 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005808:	693b      	ldr	r3, [r7, #16]
 800580a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800580e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005810:	693b      	ldr	r3, [r7, #16]
 8005812:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005816:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	695b      	ldr	r3, [r3, #20]
 800581c:	009b      	lsls	r3, r3, #2
 800581e:	693a      	ldr	r2, [r7, #16]
 8005820:	4313      	orrs	r3, r2
 8005822:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	699b      	ldr	r3, [r3, #24]
 8005828:	009b      	lsls	r3, r3, #2
 800582a:	693a      	ldr	r2, [r7, #16]
 800582c:	4313      	orrs	r3, r2
 800582e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	693a      	ldr	r2, [r7, #16]
 8005834:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	68fa      	ldr	r2, [r7, #12]
 800583a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	685a      	ldr	r2, [r3, #4]
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	697a      	ldr	r2, [r7, #20]
 8005848:	621a      	str	r2, [r3, #32]
}
 800584a:	bf00      	nop
 800584c:	371c      	adds	r7, #28
 800584e:	46bd      	mov	sp, r7
 8005850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005854:	4770      	bx	lr
 8005856:	bf00      	nop
 8005858:	40012c00 	.word	0x40012c00
 800585c:	40013400 	.word	0x40013400
 8005860:	40014000 	.word	0x40014000
 8005864:	40014400 	.word	0x40014400
 8005868:	40014800 	.word	0x40014800

0800586c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800586c:	b480      	push	{r7}
 800586e:	b087      	sub	sp, #28
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
 8005874:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6a1b      	ldr	r3, [r3, #32]
 800587a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6a1b      	ldr	r3, [r3, #32]
 8005880:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	685b      	ldr	r3, [r3, #4]
 800588c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	69db      	ldr	r3, [r3, #28]
 8005892:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800589a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800589e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	f023 0303 	bic.w	r3, r3, #3
 80058a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	68fa      	ldr	r2, [r7, #12]
 80058ae:	4313      	orrs	r3, r2
 80058b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80058b2:	697b      	ldr	r3, [r7, #20]
 80058b4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80058b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	689b      	ldr	r3, [r3, #8]
 80058be:	021b      	lsls	r3, r3, #8
 80058c0:	697a      	ldr	r2, [r7, #20]
 80058c2:	4313      	orrs	r3, r2
 80058c4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	4a27      	ldr	r2, [pc, #156]	@ (8005968 <TIM_OC3_SetConfig+0xfc>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d003      	beq.n	80058d6 <TIM_OC3_SetConfig+0x6a>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	4a26      	ldr	r2, [pc, #152]	@ (800596c <TIM_OC3_SetConfig+0x100>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d10d      	bne.n	80058f2 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80058d6:	697b      	ldr	r3, [r7, #20]
 80058d8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80058dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	68db      	ldr	r3, [r3, #12]
 80058e2:	021b      	lsls	r3, r3, #8
 80058e4:	697a      	ldr	r2, [r7, #20]
 80058e6:	4313      	orrs	r3, r2
 80058e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80058ea:	697b      	ldr	r3, [r7, #20]
 80058ec:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80058f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	4a1c      	ldr	r2, [pc, #112]	@ (8005968 <TIM_OC3_SetConfig+0xfc>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d00f      	beq.n	800591a <TIM_OC3_SetConfig+0xae>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	4a1b      	ldr	r2, [pc, #108]	@ (800596c <TIM_OC3_SetConfig+0x100>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d00b      	beq.n	800591a <TIM_OC3_SetConfig+0xae>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	4a1a      	ldr	r2, [pc, #104]	@ (8005970 <TIM_OC3_SetConfig+0x104>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d007      	beq.n	800591a <TIM_OC3_SetConfig+0xae>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	4a19      	ldr	r2, [pc, #100]	@ (8005974 <TIM_OC3_SetConfig+0x108>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d003      	beq.n	800591a <TIM_OC3_SetConfig+0xae>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	4a18      	ldr	r2, [pc, #96]	@ (8005978 <TIM_OC3_SetConfig+0x10c>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d113      	bne.n	8005942 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800591a:	693b      	ldr	r3, [r7, #16]
 800591c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005920:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005922:	693b      	ldr	r3, [r7, #16]
 8005924:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005928:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	695b      	ldr	r3, [r3, #20]
 800592e:	011b      	lsls	r3, r3, #4
 8005930:	693a      	ldr	r2, [r7, #16]
 8005932:	4313      	orrs	r3, r2
 8005934:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	699b      	ldr	r3, [r3, #24]
 800593a:	011b      	lsls	r3, r3, #4
 800593c:	693a      	ldr	r2, [r7, #16]
 800593e:	4313      	orrs	r3, r2
 8005940:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	693a      	ldr	r2, [r7, #16]
 8005946:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	68fa      	ldr	r2, [r7, #12]
 800594c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	685a      	ldr	r2, [r3, #4]
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	697a      	ldr	r2, [r7, #20]
 800595a:	621a      	str	r2, [r3, #32]
}
 800595c:	bf00      	nop
 800595e:	371c      	adds	r7, #28
 8005960:	46bd      	mov	sp, r7
 8005962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005966:	4770      	bx	lr
 8005968:	40012c00 	.word	0x40012c00
 800596c:	40013400 	.word	0x40013400
 8005970:	40014000 	.word	0x40014000
 8005974:	40014400 	.word	0x40014400
 8005978:	40014800 	.word	0x40014800

0800597c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800597c:	b480      	push	{r7}
 800597e:	b087      	sub	sp, #28
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
 8005984:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6a1b      	ldr	r3, [r3, #32]
 800598a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6a1b      	ldr	r3, [r3, #32]
 8005990:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	685b      	ldr	r3, [r3, #4]
 800599c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	69db      	ldr	r3, [r3, #28]
 80059a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80059aa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80059ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80059b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	021b      	lsls	r3, r3, #8
 80059be:	68fa      	ldr	r2, [r7, #12]
 80059c0:	4313      	orrs	r3, r2
 80059c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80059c4:	693b      	ldr	r3, [r7, #16]
 80059c6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80059ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	689b      	ldr	r3, [r3, #8]
 80059d0:	031b      	lsls	r3, r3, #12
 80059d2:	693a      	ldr	r2, [r7, #16]
 80059d4:	4313      	orrs	r3, r2
 80059d6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	4a18      	ldr	r2, [pc, #96]	@ (8005a3c <TIM_OC4_SetConfig+0xc0>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d00f      	beq.n	8005a00 <TIM_OC4_SetConfig+0x84>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	4a17      	ldr	r2, [pc, #92]	@ (8005a40 <TIM_OC4_SetConfig+0xc4>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d00b      	beq.n	8005a00 <TIM_OC4_SetConfig+0x84>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	4a16      	ldr	r2, [pc, #88]	@ (8005a44 <TIM_OC4_SetConfig+0xc8>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d007      	beq.n	8005a00 <TIM_OC4_SetConfig+0x84>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	4a15      	ldr	r2, [pc, #84]	@ (8005a48 <TIM_OC4_SetConfig+0xcc>)
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d003      	beq.n	8005a00 <TIM_OC4_SetConfig+0x84>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	4a14      	ldr	r2, [pc, #80]	@ (8005a4c <TIM_OC4_SetConfig+0xd0>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d109      	bne.n	8005a14 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005a00:	697b      	ldr	r3, [r7, #20]
 8005a02:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005a06:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	695b      	ldr	r3, [r3, #20]
 8005a0c:	019b      	lsls	r3, r3, #6
 8005a0e:	697a      	ldr	r2, [r7, #20]
 8005a10:	4313      	orrs	r3, r2
 8005a12:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	697a      	ldr	r2, [r7, #20]
 8005a18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	68fa      	ldr	r2, [r7, #12]
 8005a1e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	685a      	ldr	r2, [r3, #4]
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	693a      	ldr	r2, [r7, #16]
 8005a2c:	621a      	str	r2, [r3, #32]
}
 8005a2e:	bf00      	nop
 8005a30:	371c      	adds	r7, #28
 8005a32:	46bd      	mov	sp, r7
 8005a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a38:	4770      	bx	lr
 8005a3a:	bf00      	nop
 8005a3c:	40012c00 	.word	0x40012c00
 8005a40:	40013400 	.word	0x40013400
 8005a44:	40014000 	.word	0x40014000
 8005a48:	40014400 	.word	0x40014400
 8005a4c:	40014800 	.word	0x40014800

08005a50 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005a50:	b480      	push	{r7}
 8005a52:	b087      	sub	sp, #28
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
 8005a58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6a1b      	ldr	r3, [r3, #32]
 8005a5e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6a1b      	ldr	r3, [r3, #32]
 8005a64:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	685b      	ldr	r3, [r3, #4]
 8005a70:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005a7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	68fa      	ldr	r2, [r7, #12]
 8005a8a:	4313      	orrs	r3, r2
 8005a8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005a8e:	693b      	ldr	r3, [r7, #16]
 8005a90:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005a94:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	689b      	ldr	r3, [r3, #8]
 8005a9a:	041b      	lsls	r3, r3, #16
 8005a9c:	693a      	ldr	r2, [r7, #16]
 8005a9e:	4313      	orrs	r3, r2
 8005aa0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	4a17      	ldr	r2, [pc, #92]	@ (8005b04 <TIM_OC5_SetConfig+0xb4>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d00f      	beq.n	8005aca <TIM_OC5_SetConfig+0x7a>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	4a16      	ldr	r2, [pc, #88]	@ (8005b08 <TIM_OC5_SetConfig+0xb8>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d00b      	beq.n	8005aca <TIM_OC5_SetConfig+0x7a>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	4a15      	ldr	r2, [pc, #84]	@ (8005b0c <TIM_OC5_SetConfig+0xbc>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d007      	beq.n	8005aca <TIM_OC5_SetConfig+0x7a>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	4a14      	ldr	r2, [pc, #80]	@ (8005b10 <TIM_OC5_SetConfig+0xc0>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d003      	beq.n	8005aca <TIM_OC5_SetConfig+0x7a>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	4a13      	ldr	r2, [pc, #76]	@ (8005b14 <TIM_OC5_SetConfig+0xc4>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d109      	bne.n	8005ade <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005aca:	697b      	ldr	r3, [r7, #20]
 8005acc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005ad0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	695b      	ldr	r3, [r3, #20]
 8005ad6:	021b      	lsls	r3, r3, #8
 8005ad8:	697a      	ldr	r2, [r7, #20]
 8005ada:	4313      	orrs	r3, r2
 8005adc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	697a      	ldr	r2, [r7, #20]
 8005ae2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	68fa      	ldr	r2, [r7, #12]
 8005ae8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	685a      	ldr	r2, [r3, #4]
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	693a      	ldr	r2, [r7, #16]
 8005af6:	621a      	str	r2, [r3, #32]
}
 8005af8:	bf00      	nop
 8005afa:	371c      	adds	r7, #28
 8005afc:	46bd      	mov	sp, r7
 8005afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b02:	4770      	bx	lr
 8005b04:	40012c00 	.word	0x40012c00
 8005b08:	40013400 	.word	0x40013400
 8005b0c:	40014000 	.word	0x40014000
 8005b10:	40014400 	.word	0x40014400
 8005b14:	40014800 	.word	0x40014800

08005b18 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005b18:	b480      	push	{r7}
 8005b1a:	b087      	sub	sp, #28
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
 8005b20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6a1b      	ldr	r3, [r3, #32]
 8005b26:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6a1b      	ldr	r3, [r3, #32]
 8005b2c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	685b      	ldr	r3, [r3, #4]
 8005b38:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005b46:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005b4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	021b      	lsls	r3, r3, #8
 8005b52:	68fa      	ldr	r2, [r7, #12]
 8005b54:	4313      	orrs	r3, r2
 8005b56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005b58:	693b      	ldr	r3, [r7, #16]
 8005b5a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005b5e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	689b      	ldr	r3, [r3, #8]
 8005b64:	051b      	lsls	r3, r3, #20
 8005b66:	693a      	ldr	r2, [r7, #16]
 8005b68:	4313      	orrs	r3, r2
 8005b6a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	4a18      	ldr	r2, [pc, #96]	@ (8005bd0 <TIM_OC6_SetConfig+0xb8>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d00f      	beq.n	8005b94 <TIM_OC6_SetConfig+0x7c>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	4a17      	ldr	r2, [pc, #92]	@ (8005bd4 <TIM_OC6_SetConfig+0xbc>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d00b      	beq.n	8005b94 <TIM_OC6_SetConfig+0x7c>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	4a16      	ldr	r2, [pc, #88]	@ (8005bd8 <TIM_OC6_SetConfig+0xc0>)
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d007      	beq.n	8005b94 <TIM_OC6_SetConfig+0x7c>
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	4a15      	ldr	r2, [pc, #84]	@ (8005bdc <TIM_OC6_SetConfig+0xc4>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d003      	beq.n	8005b94 <TIM_OC6_SetConfig+0x7c>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	4a14      	ldr	r2, [pc, #80]	@ (8005be0 <TIM_OC6_SetConfig+0xc8>)
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d109      	bne.n	8005ba8 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005b94:	697b      	ldr	r3, [r7, #20]
 8005b96:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005b9a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	695b      	ldr	r3, [r3, #20]
 8005ba0:	029b      	lsls	r3, r3, #10
 8005ba2:	697a      	ldr	r2, [r7, #20]
 8005ba4:	4313      	orrs	r3, r2
 8005ba6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	697a      	ldr	r2, [r7, #20]
 8005bac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	68fa      	ldr	r2, [r7, #12]
 8005bb2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	685a      	ldr	r2, [r3, #4]
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	693a      	ldr	r2, [r7, #16]
 8005bc0:	621a      	str	r2, [r3, #32]
}
 8005bc2:	bf00      	nop
 8005bc4:	371c      	adds	r7, #28
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bcc:	4770      	bx	lr
 8005bce:	bf00      	nop
 8005bd0:	40012c00 	.word	0x40012c00
 8005bd4:	40013400 	.word	0x40013400
 8005bd8:	40014000 	.word	0x40014000
 8005bdc:	40014400 	.word	0x40014400
 8005be0:	40014800 	.word	0x40014800

08005be4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005be4:	b480      	push	{r7}
 8005be6:	b087      	sub	sp, #28
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	60f8      	str	r0, [r7, #12]
 8005bec:	60b9      	str	r1, [r7, #8]
 8005bee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	f003 031f 	and.w	r3, r3, #31
 8005bf6:	2201      	movs	r2, #1
 8005bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8005bfc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	6a1a      	ldr	r2, [r3, #32]
 8005c02:	697b      	ldr	r3, [r7, #20]
 8005c04:	43db      	mvns	r3, r3
 8005c06:	401a      	ands	r2, r3
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	6a1a      	ldr	r2, [r3, #32]
 8005c10:	68bb      	ldr	r3, [r7, #8]
 8005c12:	f003 031f 	and.w	r3, r3, #31
 8005c16:	6879      	ldr	r1, [r7, #4]
 8005c18:	fa01 f303 	lsl.w	r3, r1, r3
 8005c1c:	431a      	orrs	r2, r3
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	621a      	str	r2, [r3, #32]
}
 8005c22:	bf00      	nop
 8005c24:	371c      	adds	r7, #28
 8005c26:	46bd      	mov	sp, r7
 8005c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2c:	4770      	bx	lr
	...

08005c30 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005c30:	b480      	push	{r7}
 8005c32:	b085      	sub	sp, #20
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
 8005c38:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005c40:	2b01      	cmp	r3, #1
 8005c42:	d101      	bne.n	8005c48 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005c44:	2302      	movs	r3, #2
 8005c46:	e068      	b.n	8005d1a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2201      	movs	r2, #1
 8005c4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2202      	movs	r2, #2
 8005c54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	685b      	ldr	r3, [r3, #4]
 8005c5e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	689b      	ldr	r3, [r3, #8]
 8005c66:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	4a2e      	ldr	r2, [pc, #184]	@ (8005d28 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d004      	beq.n	8005c7c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	4a2d      	ldr	r2, [pc, #180]	@ (8005d2c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d108      	bne.n	8005c8e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005c82:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	685b      	ldr	r3, [r3, #4]
 8005c88:	68fa      	ldr	r2, [r7, #12]
 8005c8a:	4313      	orrs	r3, r2
 8005c8c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c94:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	68fa      	ldr	r2, [r7, #12]
 8005c9c:	4313      	orrs	r3, r2
 8005c9e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	68fa      	ldr	r2, [r7, #12]
 8005ca6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4a1e      	ldr	r2, [pc, #120]	@ (8005d28 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d01d      	beq.n	8005cee <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005cba:	d018      	beq.n	8005cee <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4a1b      	ldr	r2, [pc, #108]	@ (8005d30 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d013      	beq.n	8005cee <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	4a1a      	ldr	r2, [pc, #104]	@ (8005d34 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d00e      	beq.n	8005cee <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	4a18      	ldr	r2, [pc, #96]	@ (8005d38 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d009      	beq.n	8005cee <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	4a13      	ldr	r2, [pc, #76]	@ (8005d2c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d004      	beq.n	8005cee <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	4a14      	ldr	r2, [pc, #80]	@ (8005d3c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d10c      	bne.n	8005d08 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005cee:	68bb      	ldr	r3, [r7, #8]
 8005cf0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005cf4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	689b      	ldr	r3, [r3, #8]
 8005cfa:	68ba      	ldr	r2, [r7, #8]
 8005cfc:	4313      	orrs	r3, r2
 8005cfe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	68ba      	ldr	r2, [r7, #8]
 8005d06:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2201      	movs	r2, #1
 8005d0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2200      	movs	r2, #0
 8005d14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005d18:	2300      	movs	r3, #0
}
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	3714      	adds	r7, #20
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d24:	4770      	bx	lr
 8005d26:	bf00      	nop
 8005d28:	40012c00 	.word	0x40012c00
 8005d2c:	40013400 	.word	0x40013400
 8005d30:	40000400 	.word	0x40000400
 8005d34:	40000800 	.word	0x40000800
 8005d38:	40000c00 	.word	0x40000c00
 8005d3c:	40014000 	.word	0x40014000

08005d40 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005d40:	b480      	push	{r7}
 8005d42:	b083      	sub	sp, #12
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005d48:	bf00      	nop
 8005d4a:	370c      	adds	r7, #12
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d52:	4770      	bx	lr

08005d54 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005d54:	b480      	push	{r7}
 8005d56:	b083      	sub	sp, #12
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005d5c:	bf00      	nop
 8005d5e:	370c      	adds	r7, #12
 8005d60:	46bd      	mov	sp, r7
 8005d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d66:	4770      	bx	lr

08005d68 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005d68:	b480      	push	{r7}
 8005d6a:	b083      	sub	sp, #12
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005d70:	bf00      	nop
 8005d72:	370c      	adds	r7, #12
 8005d74:	46bd      	mov	sp, r7
 8005d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7a:	4770      	bx	lr

08005d7c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b082      	sub	sp, #8
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d101      	bne.n	8005d8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005d8a:	2301      	movs	r3, #1
 8005d8c:	e040      	b.n	8005e10 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d106      	bne.n	8005da4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2200      	movs	r2, #0
 8005d9a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005d9e:	6878      	ldr	r0, [r7, #4]
 8005da0:	f7fc f89e 	bl	8001ee0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2224      	movs	r2, #36	@ 0x24
 8005da8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	681a      	ldr	r2, [r3, #0]
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f022 0201 	bic.w	r2, r2, #1
 8005db8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d002      	beq.n	8005dc8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005dc2:	6878      	ldr	r0, [r7, #4]
 8005dc4:	f000 fb6a 	bl	800649c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005dc8:	6878      	ldr	r0, [r7, #4]
 8005dca:	f000 f8af 	bl	8005f2c <UART_SetConfig>
 8005dce:	4603      	mov	r3, r0
 8005dd0:	2b01      	cmp	r3, #1
 8005dd2:	d101      	bne.n	8005dd8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	e01b      	b.n	8005e10 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	685a      	ldr	r2, [r3, #4]
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005de6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	689a      	ldr	r2, [r3, #8]
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005df6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	681a      	ldr	r2, [r3, #0]
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f042 0201 	orr.w	r2, r2, #1
 8005e06:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005e08:	6878      	ldr	r0, [r7, #4]
 8005e0a:	f000 fbe9 	bl	80065e0 <UART_CheckIdleState>
 8005e0e:	4603      	mov	r3, r0
}
 8005e10:	4618      	mov	r0, r3
 8005e12:	3708      	adds	r7, #8
 8005e14:	46bd      	mov	sp, r7
 8005e16:	bd80      	pop	{r7, pc}

08005e18 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b08a      	sub	sp, #40	@ 0x28
 8005e1c:	af02      	add	r7, sp, #8
 8005e1e:	60f8      	str	r0, [r7, #12]
 8005e20:	60b9      	str	r1, [r7, #8]
 8005e22:	603b      	str	r3, [r7, #0]
 8005e24:	4613      	mov	r3, r2
 8005e26:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005e2c:	2b20      	cmp	r3, #32
 8005e2e:	d177      	bne.n	8005f20 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d002      	beq.n	8005e3c <HAL_UART_Transmit+0x24>
 8005e36:	88fb      	ldrh	r3, [r7, #6]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d101      	bne.n	8005e40 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005e3c:	2301      	movs	r3, #1
 8005e3e:	e070      	b.n	8005f22 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	2200      	movs	r2, #0
 8005e44:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	2221      	movs	r2, #33	@ 0x21
 8005e4c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005e4e:	f7fc faa9 	bl	80023a4 <HAL_GetTick>
 8005e52:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	88fa      	ldrh	r2, [r7, #6]
 8005e58:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	88fa      	ldrh	r2, [r7, #6]
 8005e60:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	689b      	ldr	r3, [r3, #8]
 8005e68:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e6c:	d108      	bne.n	8005e80 <HAL_UART_Transmit+0x68>
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	691b      	ldr	r3, [r3, #16]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d104      	bne.n	8005e80 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005e76:	2300      	movs	r3, #0
 8005e78:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005e7a:	68bb      	ldr	r3, [r7, #8]
 8005e7c:	61bb      	str	r3, [r7, #24]
 8005e7e:	e003      	b.n	8005e88 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005e84:	2300      	movs	r3, #0
 8005e86:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005e88:	e02f      	b.n	8005eea <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	9300      	str	r3, [sp, #0]
 8005e8e:	697b      	ldr	r3, [r7, #20]
 8005e90:	2200      	movs	r2, #0
 8005e92:	2180      	movs	r1, #128	@ 0x80
 8005e94:	68f8      	ldr	r0, [r7, #12]
 8005e96:	f000 fc4b 	bl	8006730 <UART_WaitOnFlagUntilTimeout>
 8005e9a:	4603      	mov	r3, r0
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d004      	beq.n	8005eaa <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	2220      	movs	r2, #32
 8005ea4:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8005ea6:	2303      	movs	r3, #3
 8005ea8:	e03b      	b.n	8005f22 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8005eaa:	69fb      	ldr	r3, [r7, #28]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d10b      	bne.n	8005ec8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005eb0:	69bb      	ldr	r3, [r7, #24]
 8005eb2:	881a      	ldrh	r2, [r3, #0]
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005ebc:	b292      	uxth	r2, r2
 8005ebe:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005ec0:	69bb      	ldr	r3, [r7, #24]
 8005ec2:	3302      	adds	r3, #2
 8005ec4:	61bb      	str	r3, [r7, #24]
 8005ec6:	e007      	b.n	8005ed8 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005ec8:	69fb      	ldr	r3, [r7, #28]
 8005eca:	781a      	ldrb	r2, [r3, #0]
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005ed2:	69fb      	ldr	r3, [r7, #28]
 8005ed4:	3301      	adds	r3, #1
 8005ed6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005ede:	b29b      	uxth	r3, r3
 8005ee0:	3b01      	subs	r3, #1
 8005ee2:	b29a      	uxth	r2, r3
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005ef0:	b29b      	uxth	r3, r3
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d1c9      	bne.n	8005e8a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	9300      	str	r3, [sp, #0]
 8005efa:	697b      	ldr	r3, [r7, #20]
 8005efc:	2200      	movs	r2, #0
 8005efe:	2140      	movs	r1, #64	@ 0x40
 8005f00:	68f8      	ldr	r0, [r7, #12]
 8005f02:	f000 fc15 	bl	8006730 <UART_WaitOnFlagUntilTimeout>
 8005f06:	4603      	mov	r3, r0
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d004      	beq.n	8005f16 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	2220      	movs	r2, #32
 8005f10:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8005f12:	2303      	movs	r3, #3
 8005f14:	e005      	b.n	8005f22 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	2220      	movs	r2, #32
 8005f1a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	e000      	b.n	8005f22 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8005f20:	2302      	movs	r3, #2
  }
}
 8005f22:	4618      	mov	r0, r3
 8005f24:	3720      	adds	r7, #32
 8005f26:	46bd      	mov	sp, r7
 8005f28:	bd80      	pop	{r7, pc}
	...

08005f2c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005f2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005f30:	b08a      	sub	sp, #40	@ 0x28
 8005f32:	af00      	add	r7, sp, #0
 8005f34:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005f36:	2300      	movs	r3, #0
 8005f38:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	689a      	ldr	r2, [r3, #8]
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	691b      	ldr	r3, [r3, #16]
 8005f44:	431a      	orrs	r2, r3
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	695b      	ldr	r3, [r3, #20]
 8005f4a:	431a      	orrs	r2, r3
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	69db      	ldr	r3, [r3, #28]
 8005f50:	4313      	orrs	r3, r2
 8005f52:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	681a      	ldr	r2, [r3, #0]
 8005f5a:	4ba4      	ldr	r3, [pc, #656]	@ (80061ec <UART_SetConfig+0x2c0>)
 8005f5c:	4013      	ands	r3, r2
 8005f5e:	68fa      	ldr	r2, [r7, #12]
 8005f60:	6812      	ldr	r2, [r2, #0]
 8005f62:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005f64:	430b      	orrs	r3, r1
 8005f66:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	685b      	ldr	r3, [r3, #4]
 8005f6e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	68da      	ldr	r2, [r3, #12]
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	430a      	orrs	r2, r1
 8005f7c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	699b      	ldr	r3, [r3, #24]
 8005f82:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	4a99      	ldr	r2, [pc, #612]	@ (80061f0 <UART_SetConfig+0x2c4>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d004      	beq.n	8005f98 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	6a1b      	ldr	r3, [r3, #32]
 8005f92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f94:	4313      	orrs	r3, r2
 8005f96:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	689b      	ldr	r3, [r3, #8]
 8005f9e:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005fa8:	430a      	orrs	r2, r1
 8005faa:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	4a90      	ldr	r2, [pc, #576]	@ (80061f4 <UART_SetConfig+0x2c8>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d126      	bne.n	8006004 <UART_SetConfig+0xd8>
 8005fb6:	4b90      	ldr	r3, [pc, #576]	@ (80061f8 <UART_SetConfig+0x2cc>)
 8005fb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fbc:	f003 0303 	and.w	r3, r3, #3
 8005fc0:	2b03      	cmp	r3, #3
 8005fc2:	d81b      	bhi.n	8005ffc <UART_SetConfig+0xd0>
 8005fc4:	a201      	add	r2, pc, #4	@ (adr r2, 8005fcc <UART_SetConfig+0xa0>)
 8005fc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fca:	bf00      	nop
 8005fcc:	08005fdd 	.word	0x08005fdd
 8005fd0:	08005fed 	.word	0x08005fed
 8005fd4:	08005fe5 	.word	0x08005fe5
 8005fd8:	08005ff5 	.word	0x08005ff5
 8005fdc:	2301      	movs	r3, #1
 8005fde:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005fe2:	e116      	b.n	8006212 <UART_SetConfig+0x2e6>
 8005fe4:	2302      	movs	r3, #2
 8005fe6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005fea:	e112      	b.n	8006212 <UART_SetConfig+0x2e6>
 8005fec:	2304      	movs	r3, #4
 8005fee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005ff2:	e10e      	b.n	8006212 <UART_SetConfig+0x2e6>
 8005ff4:	2308      	movs	r3, #8
 8005ff6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005ffa:	e10a      	b.n	8006212 <UART_SetConfig+0x2e6>
 8005ffc:	2310      	movs	r3, #16
 8005ffe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006002:	e106      	b.n	8006212 <UART_SetConfig+0x2e6>
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	4a7c      	ldr	r2, [pc, #496]	@ (80061fc <UART_SetConfig+0x2d0>)
 800600a:	4293      	cmp	r3, r2
 800600c:	d138      	bne.n	8006080 <UART_SetConfig+0x154>
 800600e:	4b7a      	ldr	r3, [pc, #488]	@ (80061f8 <UART_SetConfig+0x2cc>)
 8006010:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006014:	f003 030c 	and.w	r3, r3, #12
 8006018:	2b0c      	cmp	r3, #12
 800601a:	d82d      	bhi.n	8006078 <UART_SetConfig+0x14c>
 800601c:	a201      	add	r2, pc, #4	@ (adr r2, 8006024 <UART_SetConfig+0xf8>)
 800601e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006022:	bf00      	nop
 8006024:	08006059 	.word	0x08006059
 8006028:	08006079 	.word	0x08006079
 800602c:	08006079 	.word	0x08006079
 8006030:	08006079 	.word	0x08006079
 8006034:	08006069 	.word	0x08006069
 8006038:	08006079 	.word	0x08006079
 800603c:	08006079 	.word	0x08006079
 8006040:	08006079 	.word	0x08006079
 8006044:	08006061 	.word	0x08006061
 8006048:	08006079 	.word	0x08006079
 800604c:	08006079 	.word	0x08006079
 8006050:	08006079 	.word	0x08006079
 8006054:	08006071 	.word	0x08006071
 8006058:	2300      	movs	r3, #0
 800605a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800605e:	e0d8      	b.n	8006212 <UART_SetConfig+0x2e6>
 8006060:	2302      	movs	r3, #2
 8006062:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006066:	e0d4      	b.n	8006212 <UART_SetConfig+0x2e6>
 8006068:	2304      	movs	r3, #4
 800606a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800606e:	e0d0      	b.n	8006212 <UART_SetConfig+0x2e6>
 8006070:	2308      	movs	r3, #8
 8006072:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006076:	e0cc      	b.n	8006212 <UART_SetConfig+0x2e6>
 8006078:	2310      	movs	r3, #16
 800607a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800607e:	e0c8      	b.n	8006212 <UART_SetConfig+0x2e6>
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	4a5e      	ldr	r2, [pc, #376]	@ (8006200 <UART_SetConfig+0x2d4>)
 8006086:	4293      	cmp	r3, r2
 8006088:	d125      	bne.n	80060d6 <UART_SetConfig+0x1aa>
 800608a:	4b5b      	ldr	r3, [pc, #364]	@ (80061f8 <UART_SetConfig+0x2cc>)
 800608c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006090:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006094:	2b30      	cmp	r3, #48	@ 0x30
 8006096:	d016      	beq.n	80060c6 <UART_SetConfig+0x19a>
 8006098:	2b30      	cmp	r3, #48	@ 0x30
 800609a:	d818      	bhi.n	80060ce <UART_SetConfig+0x1a2>
 800609c:	2b20      	cmp	r3, #32
 800609e:	d00a      	beq.n	80060b6 <UART_SetConfig+0x18a>
 80060a0:	2b20      	cmp	r3, #32
 80060a2:	d814      	bhi.n	80060ce <UART_SetConfig+0x1a2>
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d002      	beq.n	80060ae <UART_SetConfig+0x182>
 80060a8:	2b10      	cmp	r3, #16
 80060aa:	d008      	beq.n	80060be <UART_SetConfig+0x192>
 80060ac:	e00f      	b.n	80060ce <UART_SetConfig+0x1a2>
 80060ae:	2300      	movs	r3, #0
 80060b0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80060b4:	e0ad      	b.n	8006212 <UART_SetConfig+0x2e6>
 80060b6:	2302      	movs	r3, #2
 80060b8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80060bc:	e0a9      	b.n	8006212 <UART_SetConfig+0x2e6>
 80060be:	2304      	movs	r3, #4
 80060c0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80060c4:	e0a5      	b.n	8006212 <UART_SetConfig+0x2e6>
 80060c6:	2308      	movs	r3, #8
 80060c8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80060cc:	e0a1      	b.n	8006212 <UART_SetConfig+0x2e6>
 80060ce:	2310      	movs	r3, #16
 80060d0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80060d4:	e09d      	b.n	8006212 <UART_SetConfig+0x2e6>
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	4a4a      	ldr	r2, [pc, #296]	@ (8006204 <UART_SetConfig+0x2d8>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	d125      	bne.n	800612c <UART_SetConfig+0x200>
 80060e0:	4b45      	ldr	r3, [pc, #276]	@ (80061f8 <UART_SetConfig+0x2cc>)
 80060e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060e6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80060ea:	2bc0      	cmp	r3, #192	@ 0xc0
 80060ec:	d016      	beq.n	800611c <UART_SetConfig+0x1f0>
 80060ee:	2bc0      	cmp	r3, #192	@ 0xc0
 80060f0:	d818      	bhi.n	8006124 <UART_SetConfig+0x1f8>
 80060f2:	2b80      	cmp	r3, #128	@ 0x80
 80060f4:	d00a      	beq.n	800610c <UART_SetConfig+0x1e0>
 80060f6:	2b80      	cmp	r3, #128	@ 0x80
 80060f8:	d814      	bhi.n	8006124 <UART_SetConfig+0x1f8>
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d002      	beq.n	8006104 <UART_SetConfig+0x1d8>
 80060fe:	2b40      	cmp	r3, #64	@ 0x40
 8006100:	d008      	beq.n	8006114 <UART_SetConfig+0x1e8>
 8006102:	e00f      	b.n	8006124 <UART_SetConfig+0x1f8>
 8006104:	2300      	movs	r3, #0
 8006106:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800610a:	e082      	b.n	8006212 <UART_SetConfig+0x2e6>
 800610c:	2302      	movs	r3, #2
 800610e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006112:	e07e      	b.n	8006212 <UART_SetConfig+0x2e6>
 8006114:	2304      	movs	r3, #4
 8006116:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800611a:	e07a      	b.n	8006212 <UART_SetConfig+0x2e6>
 800611c:	2308      	movs	r3, #8
 800611e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006122:	e076      	b.n	8006212 <UART_SetConfig+0x2e6>
 8006124:	2310      	movs	r3, #16
 8006126:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800612a:	e072      	b.n	8006212 <UART_SetConfig+0x2e6>
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	4a35      	ldr	r2, [pc, #212]	@ (8006208 <UART_SetConfig+0x2dc>)
 8006132:	4293      	cmp	r3, r2
 8006134:	d12a      	bne.n	800618c <UART_SetConfig+0x260>
 8006136:	4b30      	ldr	r3, [pc, #192]	@ (80061f8 <UART_SetConfig+0x2cc>)
 8006138:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800613c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006140:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006144:	d01a      	beq.n	800617c <UART_SetConfig+0x250>
 8006146:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800614a:	d81b      	bhi.n	8006184 <UART_SetConfig+0x258>
 800614c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006150:	d00c      	beq.n	800616c <UART_SetConfig+0x240>
 8006152:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006156:	d815      	bhi.n	8006184 <UART_SetConfig+0x258>
 8006158:	2b00      	cmp	r3, #0
 800615a:	d003      	beq.n	8006164 <UART_SetConfig+0x238>
 800615c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006160:	d008      	beq.n	8006174 <UART_SetConfig+0x248>
 8006162:	e00f      	b.n	8006184 <UART_SetConfig+0x258>
 8006164:	2300      	movs	r3, #0
 8006166:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800616a:	e052      	b.n	8006212 <UART_SetConfig+0x2e6>
 800616c:	2302      	movs	r3, #2
 800616e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006172:	e04e      	b.n	8006212 <UART_SetConfig+0x2e6>
 8006174:	2304      	movs	r3, #4
 8006176:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800617a:	e04a      	b.n	8006212 <UART_SetConfig+0x2e6>
 800617c:	2308      	movs	r3, #8
 800617e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006182:	e046      	b.n	8006212 <UART_SetConfig+0x2e6>
 8006184:	2310      	movs	r3, #16
 8006186:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800618a:	e042      	b.n	8006212 <UART_SetConfig+0x2e6>
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	4a17      	ldr	r2, [pc, #92]	@ (80061f0 <UART_SetConfig+0x2c4>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d13a      	bne.n	800620c <UART_SetConfig+0x2e0>
 8006196:	4b18      	ldr	r3, [pc, #96]	@ (80061f8 <UART_SetConfig+0x2cc>)
 8006198:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800619c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80061a0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80061a4:	d01a      	beq.n	80061dc <UART_SetConfig+0x2b0>
 80061a6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80061aa:	d81b      	bhi.n	80061e4 <UART_SetConfig+0x2b8>
 80061ac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80061b0:	d00c      	beq.n	80061cc <UART_SetConfig+0x2a0>
 80061b2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80061b6:	d815      	bhi.n	80061e4 <UART_SetConfig+0x2b8>
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d003      	beq.n	80061c4 <UART_SetConfig+0x298>
 80061bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80061c0:	d008      	beq.n	80061d4 <UART_SetConfig+0x2a8>
 80061c2:	e00f      	b.n	80061e4 <UART_SetConfig+0x2b8>
 80061c4:	2300      	movs	r3, #0
 80061c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80061ca:	e022      	b.n	8006212 <UART_SetConfig+0x2e6>
 80061cc:	2302      	movs	r3, #2
 80061ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80061d2:	e01e      	b.n	8006212 <UART_SetConfig+0x2e6>
 80061d4:	2304      	movs	r3, #4
 80061d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80061da:	e01a      	b.n	8006212 <UART_SetConfig+0x2e6>
 80061dc:	2308      	movs	r3, #8
 80061de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80061e2:	e016      	b.n	8006212 <UART_SetConfig+0x2e6>
 80061e4:	2310      	movs	r3, #16
 80061e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80061ea:	e012      	b.n	8006212 <UART_SetConfig+0x2e6>
 80061ec:	efff69f3 	.word	0xefff69f3
 80061f0:	40008000 	.word	0x40008000
 80061f4:	40013800 	.word	0x40013800
 80061f8:	40021000 	.word	0x40021000
 80061fc:	40004400 	.word	0x40004400
 8006200:	40004800 	.word	0x40004800
 8006204:	40004c00 	.word	0x40004c00
 8006208:	40005000 	.word	0x40005000
 800620c:	2310      	movs	r3, #16
 800620e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	4a9f      	ldr	r2, [pc, #636]	@ (8006494 <UART_SetConfig+0x568>)
 8006218:	4293      	cmp	r3, r2
 800621a:	d17a      	bne.n	8006312 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800621c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006220:	2b08      	cmp	r3, #8
 8006222:	d824      	bhi.n	800626e <UART_SetConfig+0x342>
 8006224:	a201      	add	r2, pc, #4	@ (adr r2, 800622c <UART_SetConfig+0x300>)
 8006226:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800622a:	bf00      	nop
 800622c:	08006251 	.word	0x08006251
 8006230:	0800626f 	.word	0x0800626f
 8006234:	08006259 	.word	0x08006259
 8006238:	0800626f 	.word	0x0800626f
 800623c:	0800625f 	.word	0x0800625f
 8006240:	0800626f 	.word	0x0800626f
 8006244:	0800626f 	.word	0x0800626f
 8006248:	0800626f 	.word	0x0800626f
 800624c:	08006267 	.word	0x08006267
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006250:	f7fd f99e 	bl	8003590 <HAL_RCC_GetPCLK1Freq>
 8006254:	61f8      	str	r0, [r7, #28]
        break;
 8006256:	e010      	b.n	800627a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006258:	4b8f      	ldr	r3, [pc, #572]	@ (8006498 <UART_SetConfig+0x56c>)
 800625a:	61fb      	str	r3, [r7, #28]
        break;
 800625c:	e00d      	b.n	800627a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800625e:	f7fd f8ff 	bl	8003460 <HAL_RCC_GetSysClockFreq>
 8006262:	61f8      	str	r0, [r7, #28]
        break;
 8006264:	e009      	b.n	800627a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006266:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800626a:	61fb      	str	r3, [r7, #28]
        break;
 800626c:	e005      	b.n	800627a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800626e:	2300      	movs	r3, #0
 8006270:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006272:	2301      	movs	r3, #1
 8006274:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006278:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800627a:	69fb      	ldr	r3, [r7, #28]
 800627c:	2b00      	cmp	r3, #0
 800627e:	f000 80fb 	beq.w	8006478 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	685a      	ldr	r2, [r3, #4]
 8006286:	4613      	mov	r3, r2
 8006288:	005b      	lsls	r3, r3, #1
 800628a:	4413      	add	r3, r2
 800628c:	69fa      	ldr	r2, [r7, #28]
 800628e:	429a      	cmp	r2, r3
 8006290:	d305      	bcc.n	800629e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	685b      	ldr	r3, [r3, #4]
 8006296:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006298:	69fa      	ldr	r2, [r7, #28]
 800629a:	429a      	cmp	r2, r3
 800629c:	d903      	bls.n	80062a6 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800629e:	2301      	movs	r3, #1
 80062a0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80062a4:	e0e8      	b.n	8006478 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80062a6:	69fb      	ldr	r3, [r7, #28]
 80062a8:	2200      	movs	r2, #0
 80062aa:	461c      	mov	r4, r3
 80062ac:	4615      	mov	r5, r2
 80062ae:	f04f 0200 	mov.w	r2, #0
 80062b2:	f04f 0300 	mov.w	r3, #0
 80062b6:	022b      	lsls	r3, r5, #8
 80062b8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80062bc:	0222      	lsls	r2, r4, #8
 80062be:	68f9      	ldr	r1, [r7, #12]
 80062c0:	6849      	ldr	r1, [r1, #4]
 80062c2:	0849      	lsrs	r1, r1, #1
 80062c4:	2000      	movs	r0, #0
 80062c6:	4688      	mov	r8, r1
 80062c8:	4681      	mov	r9, r0
 80062ca:	eb12 0a08 	adds.w	sl, r2, r8
 80062ce:	eb43 0b09 	adc.w	fp, r3, r9
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	685b      	ldr	r3, [r3, #4]
 80062d6:	2200      	movs	r2, #0
 80062d8:	603b      	str	r3, [r7, #0]
 80062da:	607a      	str	r2, [r7, #4]
 80062dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80062e0:	4650      	mov	r0, sl
 80062e2:	4659      	mov	r1, fp
 80062e4:	f7fa fce0 	bl	8000ca8 <__aeabi_uldivmod>
 80062e8:	4602      	mov	r2, r0
 80062ea:	460b      	mov	r3, r1
 80062ec:	4613      	mov	r3, r2
 80062ee:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80062f0:	69bb      	ldr	r3, [r7, #24]
 80062f2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80062f6:	d308      	bcc.n	800630a <UART_SetConfig+0x3de>
 80062f8:	69bb      	ldr	r3, [r7, #24]
 80062fa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80062fe:	d204      	bcs.n	800630a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	69ba      	ldr	r2, [r7, #24]
 8006306:	60da      	str	r2, [r3, #12]
 8006308:	e0b6      	b.n	8006478 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800630a:	2301      	movs	r3, #1
 800630c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006310:	e0b2      	b.n	8006478 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	69db      	ldr	r3, [r3, #28]
 8006316:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800631a:	d15e      	bne.n	80063da <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800631c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006320:	2b08      	cmp	r3, #8
 8006322:	d828      	bhi.n	8006376 <UART_SetConfig+0x44a>
 8006324:	a201      	add	r2, pc, #4	@ (adr r2, 800632c <UART_SetConfig+0x400>)
 8006326:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800632a:	bf00      	nop
 800632c:	08006351 	.word	0x08006351
 8006330:	08006359 	.word	0x08006359
 8006334:	08006361 	.word	0x08006361
 8006338:	08006377 	.word	0x08006377
 800633c:	08006367 	.word	0x08006367
 8006340:	08006377 	.word	0x08006377
 8006344:	08006377 	.word	0x08006377
 8006348:	08006377 	.word	0x08006377
 800634c:	0800636f 	.word	0x0800636f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006350:	f7fd f91e 	bl	8003590 <HAL_RCC_GetPCLK1Freq>
 8006354:	61f8      	str	r0, [r7, #28]
        break;
 8006356:	e014      	b.n	8006382 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006358:	f7fd f930 	bl	80035bc <HAL_RCC_GetPCLK2Freq>
 800635c:	61f8      	str	r0, [r7, #28]
        break;
 800635e:	e010      	b.n	8006382 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006360:	4b4d      	ldr	r3, [pc, #308]	@ (8006498 <UART_SetConfig+0x56c>)
 8006362:	61fb      	str	r3, [r7, #28]
        break;
 8006364:	e00d      	b.n	8006382 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006366:	f7fd f87b 	bl	8003460 <HAL_RCC_GetSysClockFreq>
 800636a:	61f8      	str	r0, [r7, #28]
        break;
 800636c:	e009      	b.n	8006382 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800636e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006372:	61fb      	str	r3, [r7, #28]
        break;
 8006374:	e005      	b.n	8006382 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8006376:	2300      	movs	r3, #0
 8006378:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800637a:	2301      	movs	r3, #1
 800637c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006380:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006382:	69fb      	ldr	r3, [r7, #28]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d077      	beq.n	8006478 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006388:	69fb      	ldr	r3, [r7, #28]
 800638a:	005a      	lsls	r2, r3, #1
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	685b      	ldr	r3, [r3, #4]
 8006390:	085b      	lsrs	r3, r3, #1
 8006392:	441a      	add	r2, r3
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	685b      	ldr	r3, [r3, #4]
 8006398:	fbb2 f3f3 	udiv	r3, r2, r3
 800639c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800639e:	69bb      	ldr	r3, [r7, #24]
 80063a0:	2b0f      	cmp	r3, #15
 80063a2:	d916      	bls.n	80063d2 <UART_SetConfig+0x4a6>
 80063a4:	69bb      	ldr	r3, [r7, #24]
 80063a6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80063aa:	d212      	bcs.n	80063d2 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80063ac:	69bb      	ldr	r3, [r7, #24]
 80063ae:	b29b      	uxth	r3, r3
 80063b0:	f023 030f 	bic.w	r3, r3, #15
 80063b4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80063b6:	69bb      	ldr	r3, [r7, #24]
 80063b8:	085b      	lsrs	r3, r3, #1
 80063ba:	b29b      	uxth	r3, r3
 80063bc:	f003 0307 	and.w	r3, r3, #7
 80063c0:	b29a      	uxth	r2, r3
 80063c2:	8afb      	ldrh	r3, [r7, #22]
 80063c4:	4313      	orrs	r3, r2
 80063c6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	8afa      	ldrh	r2, [r7, #22]
 80063ce:	60da      	str	r2, [r3, #12]
 80063d0:	e052      	b.n	8006478 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80063d2:	2301      	movs	r3, #1
 80063d4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80063d8:	e04e      	b.n	8006478 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80063da:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80063de:	2b08      	cmp	r3, #8
 80063e0:	d827      	bhi.n	8006432 <UART_SetConfig+0x506>
 80063e2:	a201      	add	r2, pc, #4	@ (adr r2, 80063e8 <UART_SetConfig+0x4bc>)
 80063e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063e8:	0800640d 	.word	0x0800640d
 80063ec:	08006415 	.word	0x08006415
 80063f0:	0800641d 	.word	0x0800641d
 80063f4:	08006433 	.word	0x08006433
 80063f8:	08006423 	.word	0x08006423
 80063fc:	08006433 	.word	0x08006433
 8006400:	08006433 	.word	0x08006433
 8006404:	08006433 	.word	0x08006433
 8006408:	0800642b 	.word	0x0800642b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800640c:	f7fd f8c0 	bl	8003590 <HAL_RCC_GetPCLK1Freq>
 8006410:	61f8      	str	r0, [r7, #28]
        break;
 8006412:	e014      	b.n	800643e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006414:	f7fd f8d2 	bl	80035bc <HAL_RCC_GetPCLK2Freq>
 8006418:	61f8      	str	r0, [r7, #28]
        break;
 800641a:	e010      	b.n	800643e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800641c:	4b1e      	ldr	r3, [pc, #120]	@ (8006498 <UART_SetConfig+0x56c>)
 800641e:	61fb      	str	r3, [r7, #28]
        break;
 8006420:	e00d      	b.n	800643e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006422:	f7fd f81d 	bl	8003460 <HAL_RCC_GetSysClockFreq>
 8006426:	61f8      	str	r0, [r7, #28]
        break;
 8006428:	e009      	b.n	800643e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800642a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800642e:	61fb      	str	r3, [r7, #28]
        break;
 8006430:	e005      	b.n	800643e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8006432:	2300      	movs	r3, #0
 8006434:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006436:	2301      	movs	r3, #1
 8006438:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800643c:	bf00      	nop
    }

    if (pclk != 0U)
 800643e:	69fb      	ldr	r3, [r7, #28]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d019      	beq.n	8006478 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	685b      	ldr	r3, [r3, #4]
 8006448:	085a      	lsrs	r2, r3, #1
 800644a:	69fb      	ldr	r3, [r7, #28]
 800644c:	441a      	add	r2, r3
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	685b      	ldr	r3, [r3, #4]
 8006452:	fbb2 f3f3 	udiv	r3, r2, r3
 8006456:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006458:	69bb      	ldr	r3, [r7, #24]
 800645a:	2b0f      	cmp	r3, #15
 800645c:	d909      	bls.n	8006472 <UART_SetConfig+0x546>
 800645e:	69bb      	ldr	r3, [r7, #24]
 8006460:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006464:	d205      	bcs.n	8006472 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006466:	69bb      	ldr	r3, [r7, #24]
 8006468:	b29a      	uxth	r2, r3
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	60da      	str	r2, [r3, #12]
 8006470:	e002      	b.n	8006478 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006472:	2301      	movs	r3, #1
 8006474:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	2200      	movs	r2, #0
 800647c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	2200      	movs	r2, #0
 8006482:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006484:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8006488:	4618      	mov	r0, r3
 800648a:	3728      	adds	r7, #40	@ 0x28
 800648c:	46bd      	mov	sp, r7
 800648e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006492:	bf00      	nop
 8006494:	40008000 	.word	0x40008000
 8006498:	00f42400 	.word	0x00f42400

0800649c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800649c:	b480      	push	{r7}
 800649e:	b083      	sub	sp, #12
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064a8:	f003 0308 	and.w	r3, r3, #8
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d00a      	beq.n	80064c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	685b      	ldr	r3, [r3, #4]
 80064b6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	430a      	orrs	r2, r1
 80064c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064ca:	f003 0301 	and.w	r3, r3, #1
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d00a      	beq.n	80064e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	685b      	ldr	r3, [r3, #4]
 80064d8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	430a      	orrs	r2, r1
 80064e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064ec:	f003 0302 	and.w	r3, r3, #2
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d00a      	beq.n	800650a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	685b      	ldr	r3, [r3, #4]
 80064fa:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	430a      	orrs	r2, r1
 8006508:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800650e:	f003 0304 	and.w	r3, r3, #4
 8006512:	2b00      	cmp	r3, #0
 8006514:	d00a      	beq.n	800652c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	685b      	ldr	r3, [r3, #4]
 800651c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	430a      	orrs	r2, r1
 800652a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006530:	f003 0310 	and.w	r3, r3, #16
 8006534:	2b00      	cmp	r3, #0
 8006536:	d00a      	beq.n	800654e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	689b      	ldr	r3, [r3, #8]
 800653e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	430a      	orrs	r2, r1
 800654c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006552:	f003 0320 	and.w	r3, r3, #32
 8006556:	2b00      	cmp	r3, #0
 8006558:	d00a      	beq.n	8006570 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	689b      	ldr	r3, [r3, #8]
 8006560:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	430a      	orrs	r2, r1
 800656e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006574:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006578:	2b00      	cmp	r3, #0
 800657a:	d01a      	beq.n	80065b2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	685b      	ldr	r3, [r3, #4]
 8006582:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	430a      	orrs	r2, r1
 8006590:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006596:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800659a:	d10a      	bne.n	80065b2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	685b      	ldr	r3, [r3, #4]
 80065a2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	430a      	orrs	r2, r1
 80065b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d00a      	beq.n	80065d4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	685b      	ldr	r3, [r3, #4]
 80065c4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	430a      	orrs	r2, r1
 80065d2:	605a      	str	r2, [r3, #4]
  }
}
 80065d4:	bf00      	nop
 80065d6:	370c      	adds	r7, #12
 80065d8:	46bd      	mov	sp, r7
 80065da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065de:	4770      	bx	lr

080065e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b098      	sub	sp, #96	@ 0x60
 80065e4:	af02      	add	r7, sp, #8
 80065e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2200      	movs	r2, #0
 80065ec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80065f0:	f7fb fed8 	bl	80023a4 <HAL_GetTick>
 80065f4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f003 0308 	and.w	r3, r3, #8
 8006600:	2b08      	cmp	r3, #8
 8006602:	d12e      	bne.n	8006662 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006604:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006608:	9300      	str	r3, [sp, #0]
 800660a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800660c:	2200      	movs	r2, #0
 800660e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006612:	6878      	ldr	r0, [r7, #4]
 8006614:	f000 f88c 	bl	8006730 <UART_WaitOnFlagUntilTimeout>
 8006618:	4603      	mov	r3, r0
 800661a:	2b00      	cmp	r3, #0
 800661c:	d021      	beq.n	8006662 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006624:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006626:	e853 3f00 	ldrex	r3, [r3]
 800662a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800662c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800662e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006632:	653b      	str	r3, [r7, #80]	@ 0x50
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	461a      	mov	r2, r3
 800663a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800663c:	647b      	str	r3, [r7, #68]	@ 0x44
 800663e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006640:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006642:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006644:	e841 2300 	strex	r3, r2, [r1]
 8006648:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800664a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800664c:	2b00      	cmp	r3, #0
 800664e:	d1e6      	bne.n	800661e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2220      	movs	r2, #32
 8006654:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	2200      	movs	r2, #0
 800665a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800665e:	2303      	movs	r3, #3
 8006660:	e062      	b.n	8006728 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f003 0304 	and.w	r3, r3, #4
 800666c:	2b04      	cmp	r3, #4
 800666e:	d149      	bne.n	8006704 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006670:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006674:	9300      	str	r3, [sp, #0]
 8006676:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006678:	2200      	movs	r2, #0
 800667a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800667e:	6878      	ldr	r0, [r7, #4]
 8006680:	f000 f856 	bl	8006730 <UART_WaitOnFlagUntilTimeout>
 8006684:	4603      	mov	r3, r0
 8006686:	2b00      	cmp	r3, #0
 8006688:	d03c      	beq.n	8006704 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006692:	e853 3f00 	ldrex	r3, [r3]
 8006696:	623b      	str	r3, [r7, #32]
   return(result);
 8006698:	6a3b      	ldr	r3, [r7, #32]
 800669a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800669e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	461a      	mov	r2, r3
 80066a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80066a8:	633b      	str	r3, [r7, #48]	@ 0x30
 80066aa:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066ac:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80066ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80066b0:	e841 2300 	strex	r3, r2, [r1]
 80066b4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80066b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d1e6      	bne.n	800668a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	3308      	adds	r3, #8
 80066c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066c4:	693b      	ldr	r3, [r7, #16]
 80066c6:	e853 3f00 	ldrex	r3, [r3]
 80066ca:	60fb      	str	r3, [r7, #12]
   return(result);
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	f023 0301 	bic.w	r3, r3, #1
 80066d2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	3308      	adds	r3, #8
 80066da:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80066dc:	61fa      	str	r2, [r7, #28]
 80066de:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066e0:	69b9      	ldr	r1, [r7, #24]
 80066e2:	69fa      	ldr	r2, [r7, #28]
 80066e4:	e841 2300 	strex	r3, r2, [r1]
 80066e8:	617b      	str	r3, [r7, #20]
   return(result);
 80066ea:	697b      	ldr	r3, [r7, #20]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d1e5      	bne.n	80066bc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2220      	movs	r2, #32
 80066f4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2200      	movs	r2, #0
 80066fc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006700:	2303      	movs	r3, #3
 8006702:	e011      	b.n	8006728 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2220      	movs	r2, #32
 8006708:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2220      	movs	r2, #32
 800670e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2200      	movs	r2, #0
 8006716:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2200      	movs	r2, #0
 800671c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2200      	movs	r2, #0
 8006722:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8006726:	2300      	movs	r3, #0
}
 8006728:	4618      	mov	r0, r3
 800672a:	3758      	adds	r7, #88	@ 0x58
 800672c:	46bd      	mov	sp, r7
 800672e:	bd80      	pop	{r7, pc}

08006730 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006730:	b580      	push	{r7, lr}
 8006732:	b084      	sub	sp, #16
 8006734:	af00      	add	r7, sp, #0
 8006736:	60f8      	str	r0, [r7, #12]
 8006738:	60b9      	str	r1, [r7, #8]
 800673a:	603b      	str	r3, [r7, #0]
 800673c:	4613      	mov	r3, r2
 800673e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006740:	e04f      	b.n	80067e2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006742:	69bb      	ldr	r3, [r7, #24]
 8006744:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006748:	d04b      	beq.n	80067e2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800674a:	f7fb fe2b 	bl	80023a4 <HAL_GetTick>
 800674e:	4602      	mov	r2, r0
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	1ad3      	subs	r3, r2, r3
 8006754:	69ba      	ldr	r2, [r7, #24]
 8006756:	429a      	cmp	r2, r3
 8006758:	d302      	bcc.n	8006760 <UART_WaitOnFlagUntilTimeout+0x30>
 800675a:	69bb      	ldr	r3, [r7, #24]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d101      	bne.n	8006764 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006760:	2303      	movs	r3, #3
 8006762:	e04e      	b.n	8006802 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f003 0304 	and.w	r3, r3, #4
 800676e:	2b00      	cmp	r3, #0
 8006770:	d037      	beq.n	80067e2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006772:	68bb      	ldr	r3, [r7, #8]
 8006774:	2b80      	cmp	r3, #128	@ 0x80
 8006776:	d034      	beq.n	80067e2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006778:	68bb      	ldr	r3, [r7, #8]
 800677a:	2b40      	cmp	r3, #64	@ 0x40
 800677c:	d031      	beq.n	80067e2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	69db      	ldr	r3, [r3, #28]
 8006784:	f003 0308 	and.w	r3, r3, #8
 8006788:	2b08      	cmp	r3, #8
 800678a:	d110      	bne.n	80067ae <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	2208      	movs	r2, #8
 8006792:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006794:	68f8      	ldr	r0, [r7, #12]
 8006796:	f000 f838 	bl	800680a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	2208      	movs	r2, #8
 800679e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	2200      	movs	r2, #0
 80067a6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80067aa:	2301      	movs	r3, #1
 80067ac:	e029      	b.n	8006802 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	69db      	ldr	r3, [r3, #28]
 80067b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80067b8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80067bc:	d111      	bne.n	80067e2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80067c6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80067c8:	68f8      	ldr	r0, [r7, #12]
 80067ca:	f000 f81e 	bl	800680a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	2220      	movs	r2, #32
 80067d2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	2200      	movs	r2, #0
 80067da:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80067de:	2303      	movs	r3, #3
 80067e0:	e00f      	b.n	8006802 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	69da      	ldr	r2, [r3, #28]
 80067e8:	68bb      	ldr	r3, [r7, #8]
 80067ea:	4013      	ands	r3, r2
 80067ec:	68ba      	ldr	r2, [r7, #8]
 80067ee:	429a      	cmp	r2, r3
 80067f0:	bf0c      	ite	eq
 80067f2:	2301      	moveq	r3, #1
 80067f4:	2300      	movne	r3, #0
 80067f6:	b2db      	uxtb	r3, r3
 80067f8:	461a      	mov	r2, r3
 80067fa:	79fb      	ldrb	r3, [r7, #7]
 80067fc:	429a      	cmp	r2, r3
 80067fe:	d0a0      	beq.n	8006742 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006800:	2300      	movs	r3, #0
}
 8006802:	4618      	mov	r0, r3
 8006804:	3710      	adds	r7, #16
 8006806:	46bd      	mov	sp, r7
 8006808:	bd80      	pop	{r7, pc}

0800680a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800680a:	b480      	push	{r7}
 800680c:	b095      	sub	sp, #84	@ 0x54
 800680e:	af00      	add	r7, sp, #0
 8006810:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006818:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800681a:	e853 3f00 	ldrex	r3, [r3]
 800681e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006820:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006822:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006826:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	461a      	mov	r2, r3
 800682e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006830:	643b      	str	r3, [r7, #64]	@ 0x40
 8006832:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006834:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006836:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006838:	e841 2300 	strex	r3, r2, [r1]
 800683c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800683e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006840:	2b00      	cmp	r3, #0
 8006842:	d1e6      	bne.n	8006812 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	3308      	adds	r3, #8
 800684a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800684c:	6a3b      	ldr	r3, [r7, #32]
 800684e:	e853 3f00 	ldrex	r3, [r3]
 8006852:	61fb      	str	r3, [r7, #28]
   return(result);
 8006854:	69fb      	ldr	r3, [r7, #28]
 8006856:	f023 0301 	bic.w	r3, r3, #1
 800685a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	3308      	adds	r3, #8
 8006862:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006864:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006866:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006868:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800686a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800686c:	e841 2300 	strex	r3, r2, [r1]
 8006870:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006874:	2b00      	cmp	r3, #0
 8006876:	d1e5      	bne.n	8006844 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800687c:	2b01      	cmp	r3, #1
 800687e:	d118      	bne.n	80068b2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	e853 3f00 	ldrex	r3, [r3]
 800688c:	60bb      	str	r3, [r7, #8]
   return(result);
 800688e:	68bb      	ldr	r3, [r7, #8]
 8006890:	f023 0310 	bic.w	r3, r3, #16
 8006894:	647b      	str	r3, [r7, #68]	@ 0x44
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	461a      	mov	r2, r3
 800689c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800689e:	61bb      	str	r3, [r7, #24]
 80068a0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068a2:	6979      	ldr	r1, [r7, #20]
 80068a4:	69ba      	ldr	r2, [r7, #24]
 80068a6:	e841 2300 	strex	r3, r2, [r1]
 80068aa:	613b      	str	r3, [r7, #16]
   return(result);
 80068ac:	693b      	ldr	r3, [r7, #16]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d1e6      	bne.n	8006880 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	2220      	movs	r2, #32
 80068b6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	2200      	movs	r2, #0
 80068be:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2200      	movs	r2, #0
 80068c4:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80068c6:	bf00      	nop
 80068c8:	3754      	adds	r7, #84	@ 0x54
 80068ca:	46bd      	mov	sp, r7
 80068cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d0:	4770      	bx	lr
	...

080068d4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80068d8:	4904      	ldr	r1, [pc, #16]	@ (80068ec <MX_FATFS_Init+0x18>)
 80068da:	4805      	ldr	r0, [pc, #20]	@ (80068f0 <MX_FATFS_Init+0x1c>)
 80068dc:	f002 fef0 	bl	80096c0 <FATFS_LinkDriver>
 80068e0:	4603      	mov	r3, r0
 80068e2:	461a      	mov	r2, r3
 80068e4:	4b03      	ldr	r3, [pc, #12]	@ (80068f4 <MX_FATFS_Init+0x20>)
 80068e6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80068e8:	bf00      	nop
 80068ea:	bd80      	pop	{r7, pc}
 80068ec:	20000560 	.word	0x20000560
 80068f0:	20000014 	.word	0x20000014
 80068f4:	2000055c 	.word	0x2000055c

080068f8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80068f8:	b480      	push	{r7}
 80068fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80068fc:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80068fe:	4618      	mov	r0, r3
 8006900:	46bd      	mov	sp, r7
 8006902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006906:	4770      	bx	lr

08006908 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8006908:	b580      	push	{r7, lr}
 800690a:	b082      	sub	sp, #8
 800690c:	af00      	add	r7, sp, #0
 800690e:	4603      	mov	r3, r0
 8006910:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return USER_SPI_initialize(pdrv);
 8006912:	79fb      	ldrb	r3, [r7, #7]
 8006914:	4618      	mov	r0, r3
 8006916:	f000 f9d3 	bl	8006cc0 <USER_SPI_initialize>
 800691a:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800691c:	4618      	mov	r0, r3
 800691e:	3708      	adds	r7, #8
 8006920:	46bd      	mov	sp, r7
 8006922:	bd80      	pop	{r7, pc}

08006924 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8006924:	b580      	push	{r7, lr}
 8006926:	b082      	sub	sp, #8
 8006928:	af00      	add	r7, sp, #0
 800692a:	4603      	mov	r3, r0
 800692c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return USER_SPI_status(pdrv);
 800692e:	79fb      	ldrb	r3, [r7, #7]
 8006930:	4618      	mov	r0, r3
 8006932:	f000 fab1 	bl	8006e98 <USER_SPI_status>
 8006936:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8006938:	4618      	mov	r0, r3
 800693a:	3708      	adds	r7, #8
 800693c:	46bd      	mov	sp, r7
 800693e:	bd80      	pop	{r7, pc}

08006940 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8006940:	b580      	push	{r7, lr}
 8006942:	b084      	sub	sp, #16
 8006944:	af00      	add	r7, sp, #0
 8006946:	60b9      	str	r1, [r7, #8]
 8006948:	607a      	str	r2, [r7, #4]
 800694a:	603b      	str	r3, [r7, #0]
 800694c:	4603      	mov	r3, r0
 800694e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return USER_SPI_read(pdrv, buff, sector, count);
 8006950:	7bf8      	ldrb	r0, [r7, #15]
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	687a      	ldr	r2, [r7, #4]
 8006956:	68b9      	ldr	r1, [r7, #8]
 8006958:	f000 fab4 	bl	8006ec4 <USER_SPI_read>
 800695c:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800695e:	4618      	mov	r0, r3
 8006960:	3710      	adds	r7, #16
 8006962:	46bd      	mov	sp, r7
 8006964:	bd80      	pop	{r7, pc}

08006966 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8006966:	b580      	push	{r7, lr}
 8006968:	b084      	sub	sp, #16
 800696a:	af00      	add	r7, sp, #0
 800696c:	60b9      	str	r1, [r7, #8]
 800696e:	607a      	str	r2, [r7, #4]
 8006970:	603b      	str	r3, [r7, #0]
 8006972:	4603      	mov	r3, r0
 8006974:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return USER_SPI_write(pdrv, buff, sector, count);
 8006976:	7bf8      	ldrb	r0, [r7, #15]
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	687a      	ldr	r2, [r7, #4]
 800697c:	68b9      	ldr	r1, [r7, #8]
 800697e:	f000 fb07 	bl	8006f90 <USER_SPI_write>
 8006982:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8006984:	4618      	mov	r0, r3
 8006986:	3710      	adds	r7, #16
 8006988:	46bd      	mov	sp, r7
 800698a:	bd80      	pop	{r7, pc}

0800698c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800698c:	b580      	push	{r7, lr}
 800698e:	b082      	sub	sp, #8
 8006990:	af00      	add	r7, sp, #0
 8006992:	4603      	mov	r3, r0
 8006994:	603a      	str	r2, [r7, #0]
 8006996:	71fb      	strb	r3, [r7, #7]
 8006998:	460b      	mov	r3, r1
 800699a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return USER_SPI_ioctl(pdrv, cmd, buff);
 800699c:	79b9      	ldrb	r1, [r7, #6]
 800699e:	79fb      	ldrb	r3, [r7, #7]
 80069a0:	683a      	ldr	r2, [r7, #0]
 80069a2:	4618      	mov	r0, r3
 80069a4:	f000 fb70 	bl	8007088 <USER_SPI_ioctl>
 80069a8:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 80069aa:	4618      	mov	r0, r3
 80069ac:	3708      	adds	r7, #8
 80069ae:	46bd      	mov	sp, r7
 80069b0:	bd80      	pop	{r7, pc}
	...

080069b4 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b082      	sub	sp, #8
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 80069bc:	f7fb fcf2 	bl	80023a4 <HAL_GetTick>
 80069c0:	4603      	mov	r3, r0
 80069c2:	4a04      	ldr	r2, [pc, #16]	@ (80069d4 <SPI_Timer_On+0x20>)
 80069c4:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 80069c6:	4a04      	ldr	r2, [pc, #16]	@ (80069d8 <SPI_Timer_On+0x24>)
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	6013      	str	r3, [r2, #0]
}
 80069cc:	bf00      	nop
 80069ce:	3708      	adds	r7, #8
 80069d0:	46bd      	mov	sp, r7
 80069d2:	bd80      	pop	{r7, pc}
 80069d4:	20000568 	.word	0x20000568
 80069d8:	2000056c 	.word	0x2000056c

080069dc <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 80069dc:	b580      	push	{r7, lr}
 80069de:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 80069e0:	f7fb fce0 	bl	80023a4 <HAL_GetTick>
 80069e4:	4602      	mov	r2, r0
 80069e6:	4b06      	ldr	r3, [pc, #24]	@ (8006a00 <SPI_Timer_Status+0x24>)
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	1ad2      	subs	r2, r2, r3
 80069ec:	4b05      	ldr	r3, [pc, #20]	@ (8006a04 <SPI_Timer_Status+0x28>)
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	429a      	cmp	r2, r3
 80069f2:	bf34      	ite	cc
 80069f4:	2301      	movcc	r3, #1
 80069f6:	2300      	movcs	r3, #0
 80069f8:	b2db      	uxtb	r3, r3
}
 80069fa:	4618      	mov	r0, r3
 80069fc:	bd80      	pop	{r7, pc}
 80069fe:	bf00      	nop
 8006a00:	20000568 	.word	0x20000568
 8006a04:	2000056c 	.word	0x2000056c

08006a08 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b086      	sub	sp, #24
 8006a0c:	af02      	add	r7, sp, #8
 8006a0e:	4603      	mov	r3, r0
 8006a10:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8006a12:	f107 020f 	add.w	r2, r7, #15
 8006a16:	1df9      	adds	r1, r7, #7
 8006a18:	2332      	movs	r3, #50	@ 0x32
 8006a1a:	9300      	str	r3, [sp, #0]
 8006a1c:	2301      	movs	r3, #1
 8006a1e:	4804      	ldr	r0, [pc, #16]	@ (8006a30 <xchg_spi+0x28>)
 8006a20:	f7fd fd49 	bl	80044b6 <HAL_SPI_TransmitReceive>
    return rxDat;
 8006a24:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a26:	4618      	mov	r0, r3
 8006a28:	3710      	adds	r7, #16
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	bd80      	pop	{r7, pc}
 8006a2e:	bf00      	nop
 8006a30:	20000224 	.word	0x20000224

08006a34 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8006a34:	b590      	push	{r4, r7, lr}
 8006a36:	b085      	sub	sp, #20
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
 8006a3c:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 8006a3e:	2300      	movs	r3, #0
 8006a40:	60fb      	str	r3, [r7, #12]
 8006a42:	e00a      	b.n	8006a5a <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8006a44:	687a      	ldr	r2, [r7, #4]
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	18d4      	adds	r4, r2, r3
 8006a4a:	20ff      	movs	r0, #255	@ 0xff
 8006a4c:	f7ff ffdc 	bl	8006a08 <xchg_spi>
 8006a50:	4603      	mov	r3, r0
 8006a52:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	3301      	adds	r3, #1
 8006a58:	60fb      	str	r3, [r7, #12]
 8006a5a:	68fa      	ldr	r2, [r7, #12]
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	429a      	cmp	r2, r3
 8006a60:	d3f0      	bcc.n	8006a44 <rcvr_spi_multi+0x10>
	}
}
 8006a62:	bf00      	nop
 8006a64:	bf00      	nop
 8006a66:	3714      	adds	r7, #20
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	bd90      	pop	{r4, r7, pc}

08006a6c <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	b082      	sub	sp, #8
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
 8006a74:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&SD_SPI_HANDLE, buff, btx, HAL_MAX_DELAY);
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	b29a      	uxth	r2, r3
 8006a7a:	f04f 33ff 	mov.w	r3, #4294967295
 8006a7e:	6879      	ldr	r1, [r7, #4]
 8006a80:	4803      	ldr	r0, [pc, #12]	@ (8006a90 <xmit_spi_multi+0x24>)
 8006a82:	f7fd fba2 	bl	80041ca <HAL_SPI_Transmit>
}
 8006a86:	bf00      	nop
 8006a88:	3708      	adds	r7, #8
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	bd80      	pop	{r7, pc}
 8006a8e:	bf00      	nop
 8006a90:	20000224 	.word	0x20000224

08006a94 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b086      	sub	sp, #24
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8006a9c:	f7fb fc82 	bl	80023a4 <HAL_GetTick>
 8006aa0:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8006aa6:	20ff      	movs	r0, #255	@ 0xff
 8006aa8:	f7ff ffae 	bl	8006a08 <xchg_spi>
 8006aac:	4603      	mov	r3, r0
 8006aae:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8006ab0:	7bfb      	ldrb	r3, [r7, #15]
 8006ab2:	2bff      	cmp	r3, #255	@ 0xff
 8006ab4:	d007      	beq.n	8006ac6 <wait_ready+0x32>
 8006ab6:	f7fb fc75 	bl	80023a4 <HAL_GetTick>
 8006aba:	4602      	mov	r2, r0
 8006abc:	697b      	ldr	r3, [r7, #20]
 8006abe:	1ad3      	subs	r3, r2, r3
 8006ac0:	693a      	ldr	r2, [r7, #16]
 8006ac2:	429a      	cmp	r2, r3
 8006ac4:	d8ef      	bhi.n	8006aa6 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 8006ac6:	7bfb      	ldrb	r3, [r7, #15]
 8006ac8:	2bff      	cmp	r3, #255	@ 0xff
 8006aca:	bf0c      	ite	eq
 8006acc:	2301      	moveq	r3, #1
 8006ace:	2300      	movne	r3, #0
 8006ad0:	b2db      	uxtb	r3, r3
}
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	3718      	adds	r7, #24
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	bd80      	pop	{r7, pc}
	...

08006adc <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8006ae0:	2201      	movs	r2, #1
 8006ae2:	2140      	movs	r1, #64	@ 0x40
 8006ae4:	4803      	ldr	r0, [pc, #12]	@ (8006af4 <despiselect+0x18>)
 8006ae6:	f7fb ff31 	bl	800294c <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8006aea:	20ff      	movs	r0, #255	@ 0xff
 8006aec:	f7ff ff8c 	bl	8006a08 <xchg_spi>

}
 8006af0:	bf00      	nop
 8006af2:	bd80      	pop	{r7, pc}
 8006af4:	48000400 	.word	0x48000400

08006af8 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8006afc:	2200      	movs	r2, #0
 8006afe:	2140      	movs	r1, #64	@ 0x40
 8006b00:	4809      	ldr	r0, [pc, #36]	@ (8006b28 <spiselect+0x30>)
 8006b02:	f7fb ff23 	bl	800294c <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8006b06:	20ff      	movs	r0, #255	@ 0xff
 8006b08:	f7ff ff7e 	bl	8006a08 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8006b0c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8006b10:	f7ff ffc0 	bl	8006a94 <wait_ready>
 8006b14:	4603      	mov	r3, r0
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d001      	beq.n	8006b1e <spiselect+0x26>
 8006b1a:	2301      	movs	r3, #1
 8006b1c:	e002      	b.n	8006b24 <spiselect+0x2c>

	despiselect();
 8006b1e:	f7ff ffdd 	bl	8006adc <despiselect>
	return 0;	/* Timeout */
 8006b22:	2300      	movs	r3, #0
}
 8006b24:	4618      	mov	r0, r3
 8006b26:	bd80      	pop	{r7, pc}
 8006b28:	48000400 	.word	0x48000400

08006b2c <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b084      	sub	sp, #16
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
 8006b34:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 8006b36:	20c8      	movs	r0, #200	@ 0xc8
 8006b38:	f7ff ff3c 	bl	80069b4 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8006b3c:	20ff      	movs	r0, #255	@ 0xff
 8006b3e:	f7ff ff63 	bl	8006a08 <xchg_spi>
 8006b42:	4603      	mov	r3, r0
 8006b44:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 8006b46:	7bfb      	ldrb	r3, [r7, #15]
 8006b48:	2bff      	cmp	r3, #255	@ 0xff
 8006b4a:	d104      	bne.n	8006b56 <rcvr_datablock+0x2a>
 8006b4c:	f7ff ff46 	bl	80069dc <SPI_Timer_Status>
 8006b50:	4603      	mov	r3, r0
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d1f2      	bne.n	8006b3c <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8006b56:	7bfb      	ldrb	r3, [r7, #15]
 8006b58:	2bfe      	cmp	r3, #254	@ 0xfe
 8006b5a:	d001      	beq.n	8006b60 <rcvr_datablock+0x34>
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	e00a      	b.n	8006b76 <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8006b60:	6839      	ldr	r1, [r7, #0]
 8006b62:	6878      	ldr	r0, [r7, #4]
 8006b64:	f7ff ff66 	bl	8006a34 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8006b68:	20ff      	movs	r0, #255	@ 0xff
 8006b6a:	f7ff ff4d 	bl	8006a08 <xchg_spi>
 8006b6e:	20ff      	movs	r0, #255	@ 0xff
 8006b70:	f7ff ff4a 	bl	8006a08 <xchg_spi>

	return 1;						/* Function succeeded */
 8006b74:	2301      	movs	r3, #1
}
 8006b76:	4618      	mov	r0, r3
 8006b78:	3710      	adds	r7, #16
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	bd80      	pop	{r7, pc}

08006b7e <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 8006b7e:	b580      	push	{r7, lr}
 8006b80:	b084      	sub	sp, #16
 8006b82:	af00      	add	r7, sp, #0
 8006b84:	6078      	str	r0, [r7, #4]
 8006b86:	460b      	mov	r3, r1
 8006b88:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8006b8a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8006b8e:	f7ff ff81 	bl	8006a94 <wait_ready>
 8006b92:	4603      	mov	r3, r0
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d101      	bne.n	8006b9c <xmit_datablock+0x1e>
 8006b98:	2300      	movs	r3, #0
 8006b9a:	e01e      	b.n	8006bda <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8006b9c:	78fb      	ldrb	r3, [r7, #3]
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	f7ff ff32 	bl	8006a08 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8006ba4:	78fb      	ldrb	r3, [r7, #3]
 8006ba6:	2bfd      	cmp	r3, #253	@ 0xfd
 8006ba8:	d016      	beq.n	8006bd8 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 8006baa:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8006bae:	6878      	ldr	r0, [r7, #4]
 8006bb0:	f7ff ff5c 	bl	8006a6c <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8006bb4:	20ff      	movs	r0, #255	@ 0xff
 8006bb6:	f7ff ff27 	bl	8006a08 <xchg_spi>
 8006bba:	20ff      	movs	r0, #255	@ 0xff
 8006bbc:	f7ff ff24 	bl	8006a08 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8006bc0:	20ff      	movs	r0, #255	@ 0xff
 8006bc2:	f7ff ff21 	bl	8006a08 <xchg_spi>
 8006bc6:	4603      	mov	r3, r0
 8006bc8:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8006bca:	7bfb      	ldrb	r3, [r7, #15]
 8006bcc:	f003 031f 	and.w	r3, r3, #31
 8006bd0:	2b05      	cmp	r3, #5
 8006bd2:	d001      	beq.n	8006bd8 <xmit_datablock+0x5a>
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	e000      	b.n	8006bda <xmit_datablock+0x5c>
	}
	return 1;
 8006bd8:	2301      	movs	r3, #1
}
 8006bda:	4618      	mov	r0, r3
 8006bdc:	3710      	adds	r7, #16
 8006bde:	46bd      	mov	sp, r7
 8006be0:	bd80      	pop	{r7, pc}

08006be2 <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 8006be2:	b580      	push	{r7, lr}
 8006be4:	b084      	sub	sp, #16
 8006be6:	af00      	add	r7, sp, #0
 8006be8:	4603      	mov	r3, r0
 8006bea:	6039      	str	r1, [r7, #0]
 8006bec:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8006bee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	da0e      	bge.n	8006c14 <send_cmd+0x32>
		cmd &= 0x7F;
 8006bf6:	79fb      	ldrb	r3, [r7, #7]
 8006bf8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006bfc:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 8006bfe:	2100      	movs	r1, #0
 8006c00:	2037      	movs	r0, #55	@ 0x37
 8006c02:	f7ff ffee 	bl	8006be2 <send_cmd>
 8006c06:	4603      	mov	r3, r0
 8006c08:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 8006c0a:	7bbb      	ldrb	r3, [r7, #14]
 8006c0c:	2b01      	cmp	r3, #1
 8006c0e:	d901      	bls.n	8006c14 <send_cmd+0x32>
 8006c10:	7bbb      	ldrb	r3, [r7, #14]
 8006c12:	e051      	b.n	8006cb8 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8006c14:	79fb      	ldrb	r3, [r7, #7]
 8006c16:	2b0c      	cmp	r3, #12
 8006c18:	d008      	beq.n	8006c2c <send_cmd+0x4a>
		despiselect();
 8006c1a:	f7ff ff5f 	bl	8006adc <despiselect>
		if (!spiselect()) return 0xFF;
 8006c1e:	f7ff ff6b 	bl	8006af8 <spiselect>
 8006c22:	4603      	mov	r3, r0
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d101      	bne.n	8006c2c <send_cmd+0x4a>
 8006c28:	23ff      	movs	r3, #255	@ 0xff
 8006c2a:	e045      	b.n	8006cb8 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8006c2c:	79fb      	ldrb	r3, [r7, #7]
 8006c2e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006c32:	b2db      	uxtb	r3, r3
 8006c34:	4618      	mov	r0, r3
 8006c36:	f7ff fee7 	bl	8006a08 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	0e1b      	lsrs	r3, r3, #24
 8006c3e:	b2db      	uxtb	r3, r3
 8006c40:	4618      	mov	r0, r3
 8006c42:	f7ff fee1 	bl	8006a08 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	0c1b      	lsrs	r3, r3, #16
 8006c4a:	b2db      	uxtb	r3, r3
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	f7ff fedb 	bl	8006a08 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	0a1b      	lsrs	r3, r3, #8
 8006c56:	b2db      	uxtb	r3, r3
 8006c58:	4618      	mov	r0, r3
 8006c5a:	f7ff fed5 	bl	8006a08 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	b2db      	uxtb	r3, r3
 8006c62:	4618      	mov	r0, r3
 8006c64:	f7ff fed0 	bl	8006a08 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8006c68:	2301      	movs	r3, #1
 8006c6a:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8006c6c:	79fb      	ldrb	r3, [r7, #7]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d101      	bne.n	8006c76 <send_cmd+0x94>
 8006c72:	2395      	movs	r3, #149	@ 0x95
 8006c74:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8006c76:	79fb      	ldrb	r3, [r7, #7]
 8006c78:	2b08      	cmp	r3, #8
 8006c7a:	d101      	bne.n	8006c80 <send_cmd+0x9e>
 8006c7c:	2387      	movs	r3, #135	@ 0x87
 8006c7e:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8006c80:	7bfb      	ldrb	r3, [r7, #15]
 8006c82:	4618      	mov	r0, r3
 8006c84:	f7ff fec0 	bl	8006a08 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8006c88:	79fb      	ldrb	r3, [r7, #7]
 8006c8a:	2b0c      	cmp	r3, #12
 8006c8c:	d102      	bne.n	8006c94 <send_cmd+0xb2>
 8006c8e:	20ff      	movs	r0, #255	@ 0xff
 8006c90:	f7ff feba 	bl	8006a08 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8006c94:	230a      	movs	r3, #10
 8006c96:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 8006c98:	20ff      	movs	r0, #255	@ 0xff
 8006c9a:	f7ff feb5 	bl	8006a08 <xchg_spi>
 8006c9e:	4603      	mov	r3, r0
 8006ca0:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 8006ca2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	da05      	bge.n	8006cb6 <send_cmd+0xd4>
 8006caa:	7bfb      	ldrb	r3, [r7, #15]
 8006cac:	3b01      	subs	r3, #1
 8006cae:	73fb      	strb	r3, [r7, #15]
 8006cb0:	7bfb      	ldrb	r3, [r7, #15]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d1f0      	bne.n	8006c98 <send_cmd+0xb6>

	return res;							/* Return received response */
 8006cb6:	7bbb      	ldrb	r3, [r7, #14]
}
 8006cb8:	4618      	mov	r0, r3
 8006cba:	3710      	adds	r7, #16
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	bd80      	pop	{r7, pc}

08006cc0 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8006cc0:	b590      	push	{r4, r7, lr}
 8006cc2:	b085      	sub	sp, #20
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	4603      	mov	r3, r0
 8006cc8:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 8006cca:	79fb      	ldrb	r3, [r7, #7]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d001      	beq.n	8006cd4 <USER_SPI_initialize+0x14>
 8006cd0:	2301      	movs	r3, #1
 8006cd2:	e0d6      	b.n	8006e82 <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8006cd4:	4b6d      	ldr	r3, [pc, #436]	@ (8006e8c <USER_SPI_initialize+0x1cc>)
 8006cd6:	781b      	ldrb	r3, [r3, #0]
 8006cd8:	b2db      	uxtb	r3, r3
 8006cda:	f003 0302 	and.w	r3, r3, #2
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d003      	beq.n	8006cea <USER_SPI_initialize+0x2a>
 8006ce2:	4b6a      	ldr	r3, [pc, #424]	@ (8006e8c <USER_SPI_initialize+0x1cc>)
 8006ce4:	781b      	ldrb	r3, [r3, #0]
 8006ce6:	b2db      	uxtb	r3, r3
 8006ce8:	e0cb      	b.n	8006e82 <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 8006cea:	4b69      	ldr	r3, [pc, #420]	@ (8006e90 <USER_SPI_initialize+0x1d0>)
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 8006cf4:	4b66      	ldr	r3, [pc, #408]	@ (8006e90 <USER_SPI_initialize+0x1d0>)
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	f042 0230 	orr.w	r2, r2, #48	@ 0x30
 8006cfc:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 8006cfe:	230a      	movs	r3, #10
 8006d00:	73fb      	strb	r3, [r7, #15]
 8006d02:	e005      	b.n	8006d10 <USER_SPI_initialize+0x50>
 8006d04:	20ff      	movs	r0, #255	@ 0xff
 8006d06:	f7ff fe7f 	bl	8006a08 <xchg_spi>
 8006d0a:	7bfb      	ldrb	r3, [r7, #15]
 8006d0c:	3b01      	subs	r3, #1
 8006d0e:	73fb      	strb	r3, [r7, #15]
 8006d10:	7bfb      	ldrb	r3, [r7, #15]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d1f6      	bne.n	8006d04 <USER_SPI_initialize+0x44>

	ty = 0;
 8006d16:	2300      	movs	r3, #0
 8006d18:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 8006d1a:	2100      	movs	r1, #0
 8006d1c:	2000      	movs	r0, #0
 8006d1e:	f7ff ff60 	bl	8006be2 <send_cmd>
 8006d22:	4603      	mov	r3, r0
 8006d24:	2b01      	cmp	r3, #1
 8006d26:	f040 808b 	bne.w	8006e40 <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 8006d2a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8006d2e:	f7ff fe41 	bl	80069b4 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8006d32:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8006d36:	2008      	movs	r0, #8
 8006d38:	f7ff ff53 	bl	8006be2 <send_cmd>
 8006d3c:	4603      	mov	r3, r0
 8006d3e:	2b01      	cmp	r3, #1
 8006d40:	d151      	bne.n	8006de6 <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 8006d42:	2300      	movs	r3, #0
 8006d44:	73fb      	strb	r3, [r7, #15]
 8006d46:	e00d      	b.n	8006d64 <USER_SPI_initialize+0xa4>
 8006d48:	7bfc      	ldrb	r4, [r7, #15]
 8006d4a:	20ff      	movs	r0, #255	@ 0xff
 8006d4c:	f7ff fe5c 	bl	8006a08 <xchg_spi>
 8006d50:	4603      	mov	r3, r0
 8006d52:	461a      	mov	r2, r3
 8006d54:	f104 0310 	add.w	r3, r4, #16
 8006d58:	443b      	add	r3, r7
 8006d5a:	f803 2c08 	strb.w	r2, [r3, #-8]
 8006d5e:	7bfb      	ldrb	r3, [r7, #15]
 8006d60:	3301      	adds	r3, #1
 8006d62:	73fb      	strb	r3, [r7, #15]
 8006d64:	7bfb      	ldrb	r3, [r7, #15]
 8006d66:	2b03      	cmp	r3, #3
 8006d68:	d9ee      	bls.n	8006d48 <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 8006d6a:	7abb      	ldrb	r3, [r7, #10]
 8006d6c:	2b01      	cmp	r3, #1
 8006d6e:	d167      	bne.n	8006e40 <USER_SPI_initialize+0x180>
 8006d70:	7afb      	ldrb	r3, [r7, #11]
 8006d72:	2baa      	cmp	r3, #170	@ 0xaa
 8006d74:	d164      	bne.n	8006e40 <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 8006d76:	bf00      	nop
 8006d78:	f7ff fe30 	bl	80069dc <SPI_Timer_Status>
 8006d7c:	4603      	mov	r3, r0
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d007      	beq.n	8006d92 <USER_SPI_initialize+0xd2>
 8006d82:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8006d86:	20a9      	movs	r0, #169	@ 0xa9
 8006d88:	f7ff ff2b 	bl	8006be2 <send_cmd>
 8006d8c:	4603      	mov	r3, r0
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d1f2      	bne.n	8006d78 <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8006d92:	f7ff fe23 	bl	80069dc <SPI_Timer_Status>
 8006d96:	4603      	mov	r3, r0
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d051      	beq.n	8006e40 <USER_SPI_initialize+0x180>
 8006d9c:	2100      	movs	r1, #0
 8006d9e:	203a      	movs	r0, #58	@ 0x3a
 8006da0:	f7ff ff1f 	bl	8006be2 <send_cmd>
 8006da4:	4603      	mov	r3, r0
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d14a      	bne.n	8006e40 <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 8006daa:	2300      	movs	r3, #0
 8006dac:	73fb      	strb	r3, [r7, #15]
 8006dae:	e00d      	b.n	8006dcc <USER_SPI_initialize+0x10c>
 8006db0:	7bfc      	ldrb	r4, [r7, #15]
 8006db2:	20ff      	movs	r0, #255	@ 0xff
 8006db4:	f7ff fe28 	bl	8006a08 <xchg_spi>
 8006db8:	4603      	mov	r3, r0
 8006dba:	461a      	mov	r2, r3
 8006dbc:	f104 0310 	add.w	r3, r4, #16
 8006dc0:	443b      	add	r3, r7
 8006dc2:	f803 2c08 	strb.w	r2, [r3, #-8]
 8006dc6:	7bfb      	ldrb	r3, [r7, #15]
 8006dc8:	3301      	adds	r3, #1
 8006dca:	73fb      	strb	r3, [r7, #15]
 8006dcc:	7bfb      	ldrb	r3, [r7, #15]
 8006dce:	2b03      	cmp	r3, #3
 8006dd0:	d9ee      	bls.n	8006db0 <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8006dd2:	7a3b      	ldrb	r3, [r7, #8]
 8006dd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d001      	beq.n	8006de0 <USER_SPI_initialize+0x120>
 8006ddc:	230c      	movs	r3, #12
 8006dde:	e000      	b.n	8006de2 <USER_SPI_initialize+0x122>
 8006de0:	2304      	movs	r3, #4
 8006de2:	737b      	strb	r3, [r7, #13]
 8006de4:	e02c      	b.n	8006e40 <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8006de6:	2100      	movs	r1, #0
 8006de8:	20a9      	movs	r0, #169	@ 0xa9
 8006dea:	f7ff fefa 	bl	8006be2 <send_cmd>
 8006dee:	4603      	mov	r3, r0
 8006df0:	2b01      	cmp	r3, #1
 8006df2:	d804      	bhi.n	8006dfe <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8006df4:	2302      	movs	r3, #2
 8006df6:	737b      	strb	r3, [r7, #13]
 8006df8:	23a9      	movs	r3, #169	@ 0xa9
 8006dfa:	73bb      	strb	r3, [r7, #14]
 8006dfc:	e003      	b.n	8006e06 <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 8006dfe:	2301      	movs	r3, #1
 8006e00:	737b      	strb	r3, [r7, #13]
 8006e02:	2301      	movs	r3, #1
 8006e04:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8006e06:	bf00      	nop
 8006e08:	f7ff fde8 	bl	80069dc <SPI_Timer_Status>
 8006e0c:	4603      	mov	r3, r0
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d007      	beq.n	8006e22 <USER_SPI_initialize+0x162>
 8006e12:	7bbb      	ldrb	r3, [r7, #14]
 8006e14:	2100      	movs	r1, #0
 8006e16:	4618      	mov	r0, r3
 8006e18:	f7ff fee3 	bl	8006be2 <send_cmd>
 8006e1c:	4603      	mov	r3, r0
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d1f2      	bne.n	8006e08 <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 8006e22:	f7ff fddb 	bl	80069dc <SPI_Timer_Status>
 8006e26:	4603      	mov	r3, r0
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d007      	beq.n	8006e3c <USER_SPI_initialize+0x17c>
 8006e2c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8006e30:	2010      	movs	r0, #16
 8006e32:	f7ff fed6 	bl	8006be2 <send_cmd>
 8006e36:	4603      	mov	r3, r0
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d001      	beq.n	8006e40 <USER_SPI_initialize+0x180>
				ty = 0;
 8006e3c:	2300      	movs	r3, #0
 8006e3e:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 8006e40:	4a14      	ldr	r2, [pc, #80]	@ (8006e94 <USER_SPI_initialize+0x1d4>)
 8006e42:	7b7b      	ldrb	r3, [r7, #13]
 8006e44:	7013      	strb	r3, [r2, #0]
	despiselect();
 8006e46:	f7ff fe49 	bl	8006adc <despiselect>

	if (ty) {			/* OK */
 8006e4a:	7b7b      	ldrb	r3, [r7, #13]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d012      	beq.n	8006e76 <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 8006e50:	4b0f      	ldr	r3, [pc, #60]	@ (8006e90 <USER_SPI_initialize+0x1d0>)
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 8006e5a:	4b0d      	ldr	r3, [pc, #52]	@ (8006e90 <USER_SPI_initialize+0x1d0>)
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f042 0210 	orr.w	r2, r2, #16
 8006e62:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8006e64:	4b09      	ldr	r3, [pc, #36]	@ (8006e8c <USER_SPI_initialize+0x1cc>)
 8006e66:	781b      	ldrb	r3, [r3, #0]
 8006e68:	b2db      	uxtb	r3, r3
 8006e6a:	f023 0301 	bic.w	r3, r3, #1
 8006e6e:	b2da      	uxtb	r2, r3
 8006e70:	4b06      	ldr	r3, [pc, #24]	@ (8006e8c <USER_SPI_initialize+0x1cc>)
 8006e72:	701a      	strb	r2, [r3, #0]
 8006e74:	e002      	b.n	8006e7c <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 8006e76:	4b05      	ldr	r3, [pc, #20]	@ (8006e8c <USER_SPI_initialize+0x1cc>)
 8006e78:	2201      	movs	r2, #1
 8006e7a:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8006e7c:	4b03      	ldr	r3, [pc, #12]	@ (8006e8c <USER_SPI_initialize+0x1cc>)
 8006e7e:	781b      	ldrb	r3, [r3, #0]
 8006e80:	b2db      	uxtb	r3, r3
}
 8006e82:	4618      	mov	r0, r3
 8006e84:	3714      	adds	r7, #20
 8006e86:	46bd      	mov	sp, r7
 8006e88:	bd90      	pop	{r4, r7, pc}
 8006e8a:	bf00      	nop
 8006e8c:	20000028 	.word	0x20000028
 8006e90:	20000224 	.word	0x20000224
 8006e94:	20000564 	.word	0x20000564

08006e98 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8006e98:	b480      	push	{r7}
 8006e9a:	b083      	sub	sp, #12
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	4603      	mov	r3, r0
 8006ea0:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 8006ea2:	79fb      	ldrb	r3, [r7, #7]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d001      	beq.n	8006eac <USER_SPI_status+0x14>
 8006ea8:	2301      	movs	r3, #1
 8006eaa:	e002      	b.n	8006eb2 <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 8006eac:	4b04      	ldr	r3, [pc, #16]	@ (8006ec0 <USER_SPI_status+0x28>)
 8006eae:	781b      	ldrb	r3, [r3, #0]
 8006eb0:	b2db      	uxtb	r3, r3
}
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	370c      	adds	r7, #12
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ebc:	4770      	bx	lr
 8006ebe:	bf00      	nop
 8006ec0:	20000028 	.word	0x20000028

08006ec4 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b084      	sub	sp, #16
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	60b9      	str	r1, [r7, #8]
 8006ecc:	607a      	str	r2, [r7, #4]
 8006ece:	603b      	str	r3, [r7, #0]
 8006ed0:	4603      	mov	r3, r0
 8006ed2:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8006ed4:	7bfb      	ldrb	r3, [r7, #15]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d102      	bne.n	8006ee0 <USER_SPI_read+0x1c>
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d101      	bne.n	8006ee4 <USER_SPI_read+0x20>
 8006ee0:	2304      	movs	r3, #4
 8006ee2:	e04d      	b.n	8006f80 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8006ee4:	4b28      	ldr	r3, [pc, #160]	@ (8006f88 <USER_SPI_read+0xc4>)
 8006ee6:	781b      	ldrb	r3, [r3, #0]
 8006ee8:	b2db      	uxtb	r3, r3
 8006eea:	f003 0301 	and.w	r3, r3, #1
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d001      	beq.n	8006ef6 <USER_SPI_read+0x32>
 8006ef2:	2303      	movs	r3, #3
 8006ef4:	e044      	b.n	8006f80 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 8006ef6:	4b25      	ldr	r3, [pc, #148]	@ (8006f8c <USER_SPI_read+0xc8>)
 8006ef8:	781b      	ldrb	r3, [r3, #0]
 8006efa:	f003 0308 	and.w	r3, r3, #8
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d102      	bne.n	8006f08 <USER_SPI_read+0x44>
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	025b      	lsls	r3, r3, #9
 8006f06:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	2b01      	cmp	r3, #1
 8006f0c:	d111      	bne.n	8006f32 <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 8006f0e:	6879      	ldr	r1, [r7, #4]
 8006f10:	2011      	movs	r0, #17
 8006f12:	f7ff fe66 	bl	8006be2 <send_cmd>
 8006f16:	4603      	mov	r3, r0
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d129      	bne.n	8006f70 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 8006f1c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8006f20:	68b8      	ldr	r0, [r7, #8]
 8006f22:	f7ff fe03 	bl	8006b2c <rcvr_datablock>
 8006f26:	4603      	mov	r3, r0
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d021      	beq.n	8006f70 <USER_SPI_read+0xac>
			count = 0;
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	603b      	str	r3, [r7, #0]
 8006f30:	e01e      	b.n	8006f70 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 8006f32:	6879      	ldr	r1, [r7, #4]
 8006f34:	2012      	movs	r0, #18
 8006f36:	f7ff fe54 	bl	8006be2 <send_cmd>
 8006f3a:	4603      	mov	r3, r0
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d117      	bne.n	8006f70 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8006f40:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8006f44:	68b8      	ldr	r0, [r7, #8]
 8006f46:	f7ff fdf1 	bl	8006b2c <rcvr_datablock>
 8006f4a:	4603      	mov	r3, r0
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d00a      	beq.n	8006f66 <USER_SPI_read+0xa2>
				buff += 512;
 8006f50:	68bb      	ldr	r3, [r7, #8]
 8006f52:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8006f56:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8006f58:	683b      	ldr	r3, [r7, #0]
 8006f5a:	3b01      	subs	r3, #1
 8006f5c:	603b      	str	r3, [r7, #0]
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d1ed      	bne.n	8006f40 <USER_SPI_read+0x7c>
 8006f64:	e000      	b.n	8006f68 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 8006f66:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8006f68:	2100      	movs	r1, #0
 8006f6a:	200c      	movs	r0, #12
 8006f6c:	f7ff fe39 	bl	8006be2 <send_cmd>
		}
	}
	despiselect();
 8006f70:	f7ff fdb4 	bl	8006adc <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	bf14      	ite	ne
 8006f7a:	2301      	movne	r3, #1
 8006f7c:	2300      	moveq	r3, #0
 8006f7e:	b2db      	uxtb	r3, r3
}
 8006f80:	4618      	mov	r0, r3
 8006f82:	3710      	adds	r7, #16
 8006f84:	46bd      	mov	sp, r7
 8006f86:	bd80      	pop	{r7, pc}
 8006f88:	20000028 	.word	0x20000028
 8006f8c:	20000564 	.word	0x20000564

08006f90 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b084      	sub	sp, #16
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	60b9      	str	r1, [r7, #8]
 8006f98:	607a      	str	r2, [r7, #4]
 8006f9a:	603b      	str	r3, [r7, #0]
 8006f9c:	4603      	mov	r3, r0
 8006f9e:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8006fa0:	7bfb      	ldrb	r3, [r7, #15]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d102      	bne.n	8006fac <USER_SPI_write+0x1c>
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d101      	bne.n	8006fb0 <USER_SPI_write+0x20>
 8006fac:	2304      	movs	r3, #4
 8006fae:	e063      	b.n	8007078 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8006fb0:	4b33      	ldr	r3, [pc, #204]	@ (8007080 <USER_SPI_write+0xf0>)
 8006fb2:	781b      	ldrb	r3, [r3, #0]
 8006fb4:	b2db      	uxtb	r3, r3
 8006fb6:	f003 0301 	and.w	r3, r3, #1
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d001      	beq.n	8006fc2 <USER_SPI_write+0x32>
 8006fbe:	2303      	movs	r3, #3
 8006fc0:	e05a      	b.n	8007078 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8006fc2:	4b2f      	ldr	r3, [pc, #188]	@ (8007080 <USER_SPI_write+0xf0>)
 8006fc4:	781b      	ldrb	r3, [r3, #0]
 8006fc6:	b2db      	uxtb	r3, r3
 8006fc8:	f003 0304 	and.w	r3, r3, #4
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d001      	beq.n	8006fd4 <USER_SPI_write+0x44>
 8006fd0:	2302      	movs	r3, #2
 8006fd2:	e051      	b.n	8007078 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8006fd4:	4b2b      	ldr	r3, [pc, #172]	@ (8007084 <USER_SPI_write+0xf4>)
 8006fd6:	781b      	ldrb	r3, [r3, #0]
 8006fd8:	f003 0308 	and.w	r3, r3, #8
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d102      	bne.n	8006fe6 <USER_SPI_write+0x56>
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	025b      	lsls	r3, r3, #9
 8006fe4:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 8006fe6:	683b      	ldr	r3, [r7, #0]
 8006fe8:	2b01      	cmp	r3, #1
 8006fea:	d110      	bne.n	800700e <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8006fec:	6879      	ldr	r1, [r7, #4]
 8006fee:	2018      	movs	r0, #24
 8006ff0:	f7ff fdf7 	bl	8006be2 <send_cmd>
 8006ff4:	4603      	mov	r3, r0
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d136      	bne.n	8007068 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 8006ffa:	21fe      	movs	r1, #254	@ 0xfe
 8006ffc:	68b8      	ldr	r0, [r7, #8]
 8006ffe:	f7ff fdbe 	bl	8006b7e <xmit_datablock>
 8007002:	4603      	mov	r3, r0
 8007004:	2b00      	cmp	r3, #0
 8007006:	d02f      	beq.n	8007068 <USER_SPI_write+0xd8>
			count = 0;
 8007008:	2300      	movs	r3, #0
 800700a:	603b      	str	r3, [r7, #0]
 800700c:	e02c      	b.n	8007068 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 800700e:	4b1d      	ldr	r3, [pc, #116]	@ (8007084 <USER_SPI_write+0xf4>)
 8007010:	781b      	ldrb	r3, [r3, #0]
 8007012:	f003 0306 	and.w	r3, r3, #6
 8007016:	2b00      	cmp	r3, #0
 8007018:	d003      	beq.n	8007022 <USER_SPI_write+0x92>
 800701a:	6839      	ldr	r1, [r7, #0]
 800701c:	2097      	movs	r0, #151	@ 0x97
 800701e:	f7ff fde0 	bl	8006be2 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8007022:	6879      	ldr	r1, [r7, #4]
 8007024:	2019      	movs	r0, #25
 8007026:	f7ff fddc 	bl	8006be2 <send_cmd>
 800702a:	4603      	mov	r3, r0
 800702c:	2b00      	cmp	r3, #0
 800702e:	d11b      	bne.n	8007068 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8007030:	21fc      	movs	r1, #252	@ 0xfc
 8007032:	68b8      	ldr	r0, [r7, #8]
 8007034:	f7ff fda3 	bl	8006b7e <xmit_datablock>
 8007038:	4603      	mov	r3, r0
 800703a:	2b00      	cmp	r3, #0
 800703c:	d00a      	beq.n	8007054 <USER_SPI_write+0xc4>
				buff += 512;
 800703e:	68bb      	ldr	r3, [r7, #8]
 8007040:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8007044:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	3b01      	subs	r3, #1
 800704a:	603b      	str	r3, [r7, #0]
 800704c:	683b      	ldr	r3, [r7, #0]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d1ee      	bne.n	8007030 <USER_SPI_write+0xa0>
 8007052:	e000      	b.n	8007056 <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 8007054:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 8007056:	21fd      	movs	r1, #253	@ 0xfd
 8007058:	2000      	movs	r0, #0
 800705a:	f7ff fd90 	bl	8006b7e <xmit_datablock>
 800705e:	4603      	mov	r3, r0
 8007060:	2b00      	cmp	r3, #0
 8007062:	d101      	bne.n	8007068 <USER_SPI_write+0xd8>
 8007064:	2301      	movs	r3, #1
 8007066:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8007068:	f7ff fd38 	bl	8006adc <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	2b00      	cmp	r3, #0
 8007070:	bf14      	ite	ne
 8007072:	2301      	movne	r3, #1
 8007074:	2300      	moveq	r3, #0
 8007076:	b2db      	uxtb	r3, r3
}
 8007078:	4618      	mov	r0, r3
 800707a:	3710      	adds	r7, #16
 800707c:	46bd      	mov	sp, r7
 800707e:	bd80      	pop	{r7, pc}
 8007080:	20000028 	.word	0x20000028
 8007084:	20000564 	.word	0x20000564

08007088 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8007088:	b580      	push	{r7, lr}
 800708a:	b08c      	sub	sp, #48	@ 0x30
 800708c:	af00      	add	r7, sp, #0
 800708e:	4603      	mov	r3, r0
 8007090:	603a      	str	r2, [r7, #0]
 8007092:	71fb      	strb	r3, [r7, #7]
 8007094:	460b      	mov	r3, r1
 8007096:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8007098:	79fb      	ldrb	r3, [r7, #7]
 800709a:	2b00      	cmp	r3, #0
 800709c:	d001      	beq.n	80070a2 <USER_SPI_ioctl+0x1a>
 800709e:	2304      	movs	r3, #4
 80070a0:	e15a      	b.n	8007358 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 80070a2:	4baf      	ldr	r3, [pc, #700]	@ (8007360 <USER_SPI_ioctl+0x2d8>)
 80070a4:	781b      	ldrb	r3, [r3, #0]
 80070a6:	b2db      	uxtb	r3, r3
 80070a8:	f003 0301 	and.w	r3, r3, #1
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d001      	beq.n	80070b4 <USER_SPI_ioctl+0x2c>
 80070b0:	2303      	movs	r3, #3
 80070b2:	e151      	b.n	8007358 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 80070b4:	2301      	movs	r3, #1
 80070b6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	switch (cmd) {
 80070ba:	79bb      	ldrb	r3, [r7, #6]
 80070bc:	2b04      	cmp	r3, #4
 80070be:	f200 8136 	bhi.w	800732e <USER_SPI_ioctl+0x2a6>
 80070c2:	a201      	add	r2, pc, #4	@ (adr r2, 80070c8 <USER_SPI_ioctl+0x40>)
 80070c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070c8:	080070dd 	.word	0x080070dd
 80070cc:	080070f1 	.word	0x080070f1
 80070d0:	0800732f 	.word	0x0800732f
 80070d4:	0800719d 	.word	0x0800719d
 80070d8:	08007293 	.word	0x08007293
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 80070dc:	f7ff fd0c 	bl	8006af8 <spiselect>
 80070e0:	4603      	mov	r3, r0
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	f000 8127 	beq.w	8007336 <USER_SPI_ioctl+0x2ae>
 80070e8:	2300      	movs	r3, #0
 80070ea:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 80070ee:	e122      	b.n	8007336 <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 80070f0:	2100      	movs	r1, #0
 80070f2:	2009      	movs	r0, #9
 80070f4:	f7ff fd75 	bl	8006be2 <send_cmd>
 80070f8:	4603      	mov	r3, r0
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	f040 811d 	bne.w	800733a <USER_SPI_ioctl+0x2b2>
 8007100:	f107 030c 	add.w	r3, r7, #12
 8007104:	2110      	movs	r1, #16
 8007106:	4618      	mov	r0, r3
 8007108:	f7ff fd10 	bl	8006b2c <rcvr_datablock>
 800710c:	4603      	mov	r3, r0
 800710e:	2b00      	cmp	r3, #0
 8007110:	f000 8113 	beq.w	800733a <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8007114:	7b3b      	ldrb	r3, [r7, #12]
 8007116:	099b      	lsrs	r3, r3, #6
 8007118:	b2db      	uxtb	r3, r3
 800711a:	2b01      	cmp	r3, #1
 800711c:	d111      	bne.n	8007142 <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 800711e:	7d7b      	ldrb	r3, [r7, #21]
 8007120:	461a      	mov	r2, r3
 8007122:	7d3b      	ldrb	r3, [r7, #20]
 8007124:	021b      	lsls	r3, r3, #8
 8007126:	4413      	add	r3, r2
 8007128:	461a      	mov	r2, r3
 800712a:	7cfb      	ldrb	r3, [r7, #19]
 800712c:	041b      	lsls	r3, r3, #16
 800712e:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
 8007132:	4413      	add	r3, r2
 8007134:	3301      	adds	r3, #1
 8007136:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8007138:	69fb      	ldr	r3, [r7, #28]
 800713a:	029a      	lsls	r2, r3, #10
 800713c:	683b      	ldr	r3, [r7, #0]
 800713e:	601a      	str	r2, [r3, #0]
 8007140:	e028      	b.n	8007194 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8007142:	7c7b      	ldrb	r3, [r7, #17]
 8007144:	f003 030f 	and.w	r3, r3, #15
 8007148:	b2da      	uxtb	r2, r3
 800714a:	7dbb      	ldrb	r3, [r7, #22]
 800714c:	09db      	lsrs	r3, r3, #7
 800714e:	b2db      	uxtb	r3, r3
 8007150:	4413      	add	r3, r2
 8007152:	b2da      	uxtb	r2, r3
 8007154:	7d7b      	ldrb	r3, [r7, #21]
 8007156:	005b      	lsls	r3, r3, #1
 8007158:	b2db      	uxtb	r3, r3
 800715a:	f003 0306 	and.w	r3, r3, #6
 800715e:	b2db      	uxtb	r3, r3
 8007160:	4413      	add	r3, r2
 8007162:	b2db      	uxtb	r3, r3
 8007164:	3302      	adds	r3, #2
 8007166:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 800716a:	7d3b      	ldrb	r3, [r7, #20]
 800716c:	099b      	lsrs	r3, r3, #6
 800716e:	b2db      	uxtb	r3, r3
 8007170:	461a      	mov	r2, r3
 8007172:	7cfb      	ldrb	r3, [r7, #19]
 8007174:	009b      	lsls	r3, r3, #2
 8007176:	441a      	add	r2, r3
 8007178:	7cbb      	ldrb	r3, [r7, #18]
 800717a:	029b      	lsls	r3, r3, #10
 800717c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007180:	4413      	add	r3, r2
 8007182:	3301      	adds	r3, #1
 8007184:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 8007186:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800718a:	3b09      	subs	r3, #9
 800718c:	69fa      	ldr	r2, [r7, #28]
 800718e:	409a      	lsls	r2, r3
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8007194:	2300      	movs	r3, #0
 8007196:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 800719a:	e0ce      	b.n	800733a <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 800719c:	4b71      	ldr	r3, [pc, #452]	@ (8007364 <USER_SPI_ioctl+0x2dc>)
 800719e:	781b      	ldrb	r3, [r3, #0]
 80071a0:	f003 0304 	and.w	r3, r3, #4
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d031      	beq.n	800720c <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 80071a8:	2100      	movs	r1, #0
 80071aa:	208d      	movs	r0, #141	@ 0x8d
 80071ac:	f7ff fd19 	bl	8006be2 <send_cmd>
 80071b0:	4603      	mov	r3, r0
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	f040 80c3 	bne.w	800733e <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 80071b8:	20ff      	movs	r0, #255	@ 0xff
 80071ba:	f7ff fc25 	bl	8006a08 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 80071be:	f107 030c 	add.w	r3, r7, #12
 80071c2:	2110      	movs	r1, #16
 80071c4:	4618      	mov	r0, r3
 80071c6:	f7ff fcb1 	bl	8006b2c <rcvr_datablock>
 80071ca:	4603      	mov	r3, r0
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	f000 80b6 	beq.w	800733e <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 80071d2:	2330      	movs	r3, #48	@ 0x30
 80071d4:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 80071d8:	e007      	b.n	80071ea <USER_SPI_ioctl+0x162>
 80071da:	20ff      	movs	r0, #255	@ 0xff
 80071dc:	f7ff fc14 	bl	8006a08 <xchg_spi>
 80071e0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80071e4:	3b01      	subs	r3, #1
 80071e6:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 80071ea:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d1f3      	bne.n	80071da <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 80071f2:	7dbb      	ldrb	r3, [r7, #22]
 80071f4:	091b      	lsrs	r3, r3, #4
 80071f6:	b2db      	uxtb	r3, r3
 80071f8:	461a      	mov	r2, r3
 80071fa:	2310      	movs	r3, #16
 80071fc:	fa03 f202 	lsl.w	r2, r3, r2
 8007200:	683b      	ldr	r3, [r7, #0]
 8007202:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8007204:	2300      	movs	r3, #0
 8007206:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 800720a:	e098      	b.n	800733e <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 800720c:	2100      	movs	r1, #0
 800720e:	2009      	movs	r0, #9
 8007210:	f7ff fce7 	bl	8006be2 <send_cmd>
 8007214:	4603      	mov	r3, r0
 8007216:	2b00      	cmp	r3, #0
 8007218:	f040 8091 	bne.w	800733e <USER_SPI_ioctl+0x2b6>
 800721c:	f107 030c 	add.w	r3, r7, #12
 8007220:	2110      	movs	r1, #16
 8007222:	4618      	mov	r0, r3
 8007224:	f7ff fc82 	bl	8006b2c <rcvr_datablock>
 8007228:	4603      	mov	r3, r0
 800722a:	2b00      	cmp	r3, #0
 800722c:	f000 8087 	beq.w	800733e <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8007230:	4b4c      	ldr	r3, [pc, #304]	@ (8007364 <USER_SPI_ioctl+0x2dc>)
 8007232:	781b      	ldrb	r3, [r3, #0]
 8007234:	f003 0302 	and.w	r3, r3, #2
 8007238:	2b00      	cmp	r3, #0
 800723a:	d012      	beq.n	8007262 <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 800723c:	7dbb      	ldrb	r3, [r7, #22]
 800723e:	005b      	lsls	r3, r3, #1
 8007240:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 8007244:	7dfa      	ldrb	r2, [r7, #23]
 8007246:	09d2      	lsrs	r2, r2, #7
 8007248:	b2d2      	uxtb	r2, r2
 800724a:	4413      	add	r3, r2
 800724c:	1c5a      	adds	r2, r3, #1
 800724e:	7e7b      	ldrb	r3, [r7, #25]
 8007250:	099b      	lsrs	r3, r3, #6
 8007252:	b2db      	uxtb	r3, r3
 8007254:	3b01      	subs	r3, #1
 8007256:	fa02 f303 	lsl.w	r3, r2, r3
 800725a:	461a      	mov	r2, r3
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	601a      	str	r2, [r3, #0]
 8007260:	e013      	b.n	800728a <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8007262:	7dbb      	ldrb	r3, [r7, #22]
 8007264:	109b      	asrs	r3, r3, #2
 8007266:	b29b      	uxth	r3, r3
 8007268:	f003 031f 	and.w	r3, r3, #31
 800726c:	3301      	adds	r3, #1
 800726e:	7dfa      	ldrb	r2, [r7, #23]
 8007270:	00d2      	lsls	r2, r2, #3
 8007272:	f002 0218 	and.w	r2, r2, #24
 8007276:	7df9      	ldrb	r1, [r7, #23]
 8007278:	0949      	lsrs	r1, r1, #5
 800727a:	b2c9      	uxtb	r1, r1
 800727c:	440a      	add	r2, r1
 800727e:	3201      	adds	r2, #1
 8007280:	fb02 f303 	mul.w	r3, r2, r3
 8007284:	461a      	mov	r2, r3
 8007286:	683b      	ldr	r3, [r7, #0]
 8007288:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 800728a:	2300      	movs	r3, #0
 800728c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 8007290:	e055      	b.n	800733e <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8007292:	4b34      	ldr	r3, [pc, #208]	@ (8007364 <USER_SPI_ioctl+0x2dc>)
 8007294:	781b      	ldrb	r3, [r3, #0]
 8007296:	f003 0306 	and.w	r3, r3, #6
 800729a:	2b00      	cmp	r3, #0
 800729c:	d051      	beq.n	8007342 <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800729e:	f107 020c 	add.w	r2, r7, #12
 80072a2:	79fb      	ldrb	r3, [r7, #7]
 80072a4:	210b      	movs	r1, #11
 80072a6:	4618      	mov	r0, r3
 80072a8:	f7ff feee 	bl	8007088 <USER_SPI_ioctl>
 80072ac:	4603      	mov	r3, r0
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d149      	bne.n	8007346 <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 80072b2:	7b3b      	ldrb	r3, [r7, #12]
 80072b4:	099b      	lsrs	r3, r3, #6
 80072b6:	b2db      	uxtb	r3, r3
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d104      	bne.n	80072c6 <USER_SPI_ioctl+0x23e>
 80072bc:	7dbb      	ldrb	r3, [r7, #22]
 80072be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d041      	beq.n	800734a <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	623b      	str	r3, [r7, #32]
 80072ca:	6a3b      	ldr	r3, [r7, #32]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	62bb      	str	r3, [r7, #40]	@ 0x28
 80072d0:	6a3b      	ldr	r3, [r7, #32]
 80072d2:	685b      	ldr	r3, [r3, #4]
 80072d4:	627b      	str	r3, [r7, #36]	@ 0x24
		if (!(CardType & CT_BLOCK)) {
 80072d6:	4b23      	ldr	r3, [pc, #140]	@ (8007364 <USER_SPI_ioctl+0x2dc>)
 80072d8:	781b      	ldrb	r3, [r3, #0]
 80072da:	f003 0308 	and.w	r3, r3, #8
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d105      	bne.n	80072ee <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 80072e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072e4:	025b      	lsls	r3, r3, #9
 80072e6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80072e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072ea:	025b      	lsls	r3, r3, #9
 80072ec:	627b      	str	r3, [r7, #36]	@ 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 80072ee:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80072f0:	2020      	movs	r0, #32
 80072f2:	f7ff fc76 	bl	8006be2 <send_cmd>
 80072f6:	4603      	mov	r3, r0
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d128      	bne.n	800734e <USER_SPI_ioctl+0x2c6>
 80072fc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80072fe:	2021      	movs	r0, #33	@ 0x21
 8007300:	f7ff fc6f 	bl	8006be2 <send_cmd>
 8007304:	4603      	mov	r3, r0
 8007306:	2b00      	cmp	r3, #0
 8007308:	d121      	bne.n	800734e <USER_SPI_ioctl+0x2c6>
 800730a:	2100      	movs	r1, #0
 800730c:	2026      	movs	r0, #38	@ 0x26
 800730e:	f7ff fc68 	bl	8006be2 <send_cmd>
 8007312:	4603      	mov	r3, r0
 8007314:	2b00      	cmp	r3, #0
 8007316:	d11a      	bne.n	800734e <USER_SPI_ioctl+0x2c6>
 8007318:	f247 5030 	movw	r0, #30000	@ 0x7530
 800731c:	f7ff fbba 	bl	8006a94 <wait_ready>
 8007320:	4603      	mov	r3, r0
 8007322:	2b00      	cmp	r3, #0
 8007324:	d013      	beq.n	800734e <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 8007326:	2300      	movs	r3, #0
 8007328:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 800732c:	e00f      	b.n	800734e <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 800732e:	2304      	movs	r3, #4
 8007330:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8007334:	e00c      	b.n	8007350 <USER_SPI_ioctl+0x2c8>
		break;
 8007336:	bf00      	nop
 8007338:	e00a      	b.n	8007350 <USER_SPI_ioctl+0x2c8>
		break;
 800733a:	bf00      	nop
 800733c:	e008      	b.n	8007350 <USER_SPI_ioctl+0x2c8>
		break;
 800733e:	bf00      	nop
 8007340:	e006      	b.n	8007350 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8007342:	bf00      	nop
 8007344:	e004      	b.n	8007350 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8007346:	bf00      	nop
 8007348:	e002      	b.n	8007350 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800734a:	bf00      	nop
 800734c:	e000      	b.n	8007350 <USER_SPI_ioctl+0x2c8>
		break;
 800734e:	bf00      	nop
	}

	despiselect();
 8007350:	f7ff fbc4 	bl	8006adc <despiselect>

	return res;
 8007354:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8007358:	4618      	mov	r0, r3
 800735a:	3730      	adds	r7, #48	@ 0x30
 800735c:	46bd      	mov	sp, r7
 800735e:	bd80      	pop	{r7, pc}
 8007360:	20000028 	.word	0x20000028
 8007364:	20000564 	.word	0x20000564

08007368 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8007368:	b580      	push	{r7, lr}
 800736a:	b084      	sub	sp, #16
 800736c:	af00      	add	r7, sp, #0
 800736e:	4603      	mov	r3, r0
 8007370:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8007372:	79fb      	ldrb	r3, [r7, #7]
 8007374:	4a08      	ldr	r2, [pc, #32]	@ (8007398 <disk_status+0x30>)
 8007376:	009b      	lsls	r3, r3, #2
 8007378:	4413      	add	r3, r2
 800737a:	685b      	ldr	r3, [r3, #4]
 800737c:	685b      	ldr	r3, [r3, #4]
 800737e:	79fa      	ldrb	r2, [r7, #7]
 8007380:	4905      	ldr	r1, [pc, #20]	@ (8007398 <disk_status+0x30>)
 8007382:	440a      	add	r2, r1
 8007384:	7a12      	ldrb	r2, [r2, #8]
 8007386:	4610      	mov	r0, r2
 8007388:	4798      	blx	r3
 800738a:	4603      	mov	r3, r0
 800738c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800738e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007390:	4618      	mov	r0, r3
 8007392:	3710      	adds	r7, #16
 8007394:	46bd      	mov	sp, r7
 8007396:	bd80      	pop	{r7, pc}
 8007398:	20000598 	.word	0x20000598

0800739c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800739c:	b580      	push	{r7, lr}
 800739e:	b084      	sub	sp, #16
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	4603      	mov	r3, r0
 80073a4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80073a6:	2300      	movs	r3, #0
 80073a8:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80073aa:	79fb      	ldrb	r3, [r7, #7]
 80073ac:	4a0d      	ldr	r2, [pc, #52]	@ (80073e4 <disk_initialize+0x48>)
 80073ae:	5cd3      	ldrb	r3, [r2, r3]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d111      	bne.n	80073d8 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80073b4:	79fb      	ldrb	r3, [r7, #7]
 80073b6:	4a0b      	ldr	r2, [pc, #44]	@ (80073e4 <disk_initialize+0x48>)
 80073b8:	2101      	movs	r1, #1
 80073ba:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80073bc:	79fb      	ldrb	r3, [r7, #7]
 80073be:	4a09      	ldr	r2, [pc, #36]	@ (80073e4 <disk_initialize+0x48>)
 80073c0:	009b      	lsls	r3, r3, #2
 80073c2:	4413      	add	r3, r2
 80073c4:	685b      	ldr	r3, [r3, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	79fa      	ldrb	r2, [r7, #7]
 80073ca:	4906      	ldr	r1, [pc, #24]	@ (80073e4 <disk_initialize+0x48>)
 80073cc:	440a      	add	r2, r1
 80073ce:	7a12      	ldrb	r2, [r2, #8]
 80073d0:	4610      	mov	r0, r2
 80073d2:	4798      	blx	r3
 80073d4:	4603      	mov	r3, r0
 80073d6:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80073d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80073da:	4618      	mov	r0, r3
 80073dc:	3710      	adds	r7, #16
 80073de:	46bd      	mov	sp, r7
 80073e0:	bd80      	pop	{r7, pc}
 80073e2:	bf00      	nop
 80073e4:	20000598 	.word	0x20000598

080073e8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80073e8:	b590      	push	{r4, r7, lr}
 80073ea:	b087      	sub	sp, #28
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	60b9      	str	r1, [r7, #8]
 80073f0:	607a      	str	r2, [r7, #4]
 80073f2:	603b      	str	r3, [r7, #0]
 80073f4:	4603      	mov	r3, r0
 80073f6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80073f8:	7bfb      	ldrb	r3, [r7, #15]
 80073fa:	4a0a      	ldr	r2, [pc, #40]	@ (8007424 <disk_read+0x3c>)
 80073fc:	009b      	lsls	r3, r3, #2
 80073fe:	4413      	add	r3, r2
 8007400:	685b      	ldr	r3, [r3, #4]
 8007402:	689c      	ldr	r4, [r3, #8]
 8007404:	7bfb      	ldrb	r3, [r7, #15]
 8007406:	4a07      	ldr	r2, [pc, #28]	@ (8007424 <disk_read+0x3c>)
 8007408:	4413      	add	r3, r2
 800740a:	7a18      	ldrb	r0, [r3, #8]
 800740c:	683b      	ldr	r3, [r7, #0]
 800740e:	687a      	ldr	r2, [r7, #4]
 8007410:	68b9      	ldr	r1, [r7, #8]
 8007412:	47a0      	blx	r4
 8007414:	4603      	mov	r3, r0
 8007416:	75fb      	strb	r3, [r7, #23]
  return res;
 8007418:	7dfb      	ldrb	r3, [r7, #23]
}
 800741a:	4618      	mov	r0, r3
 800741c:	371c      	adds	r7, #28
 800741e:	46bd      	mov	sp, r7
 8007420:	bd90      	pop	{r4, r7, pc}
 8007422:	bf00      	nop
 8007424:	20000598 	.word	0x20000598

08007428 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8007428:	b590      	push	{r4, r7, lr}
 800742a:	b087      	sub	sp, #28
 800742c:	af00      	add	r7, sp, #0
 800742e:	60b9      	str	r1, [r7, #8]
 8007430:	607a      	str	r2, [r7, #4]
 8007432:	603b      	str	r3, [r7, #0]
 8007434:	4603      	mov	r3, r0
 8007436:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8007438:	7bfb      	ldrb	r3, [r7, #15]
 800743a:	4a0a      	ldr	r2, [pc, #40]	@ (8007464 <disk_write+0x3c>)
 800743c:	009b      	lsls	r3, r3, #2
 800743e:	4413      	add	r3, r2
 8007440:	685b      	ldr	r3, [r3, #4]
 8007442:	68dc      	ldr	r4, [r3, #12]
 8007444:	7bfb      	ldrb	r3, [r7, #15]
 8007446:	4a07      	ldr	r2, [pc, #28]	@ (8007464 <disk_write+0x3c>)
 8007448:	4413      	add	r3, r2
 800744a:	7a18      	ldrb	r0, [r3, #8]
 800744c:	683b      	ldr	r3, [r7, #0]
 800744e:	687a      	ldr	r2, [r7, #4]
 8007450:	68b9      	ldr	r1, [r7, #8]
 8007452:	47a0      	blx	r4
 8007454:	4603      	mov	r3, r0
 8007456:	75fb      	strb	r3, [r7, #23]
  return res;
 8007458:	7dfb      	ldrb	r3, [r7, #23]
}
 800745a:	4618      	mov	r0, r3
 800745c:	371c      	adds	r7, #28
 800745e:	46bd      	mov	sp, r7
 8007460:	bd90      	pop	{r4, r7, pc}
 8007462:	bf00      	nop
 8007464:	20000598 	.word	0x20000598

08007468 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b084      	sub	sp, #16
 800746c:	af00      	add	r7, sp, #0
 800746e:	4603      	mov	r3, r0
 8007470:	603a      	str	r2, [r7, #0]
 8007472:	71fb      	strb	r3, [r7, #7]
 8007474:	460b      	mov	r3, r1
 8007476:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8007478:	79fb      	ldrb	r3, [r7, #7]
 800747a:	4a09      	ldr	r2, [pc, #36]	@ (80074a0 <disk_ioctl+0x38>)
 800747c:	009b      	lsls	r3, r3, #2
 800747e:	4413      	add	r3, r2
 8007480:	685b      	ldr	r3, [r3, #4]
 8007482:	691b      	ldr	r3, [r3, #16]
 8007484:	79fa      	ldrb	r2, [r7, #7]
 8007486:	4906      	ldr	r1, [pc, #24]	@ (80074a0 <disk_ioctl+0x38>)
 8007488:	440a      	add	r2, r1
 800748a:	7a10      	ldrb	r0, [r2, #8]
 800748c:	79b9      	ldrb	r1, [r7, #6]
 800748e:	683a      	ldr	r2, [r7, #0]
 8007490:	4798      	blx	r3
 8007492:	4603      	mov	r3, r0
 8007494:	73fb      	strb	r3, [r7, #15]
  return res;
 8007496:	7bfb      	ldrb	r3, [r7, #15]
}
 8007498:	4618      	mov	r0, r3
 800749a:	3710      	adds	r7, #16
 800749c:	46bd      	mov	sp, r7
 800749e:	bd80      	pop	{r7, pc}
 80074a0:	20000598 	.word	0x20000598

080074a4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80074a4:	b480      	push	{r7}
 80074a6:	b085      	sub	sp, #20
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	3301      	adds	r3, #1
 80074b0:	781b      	ldrb	r3, [r3, #0]
 80074b2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80074b4:	89fb      	ldrh	r3, [r7, #14]
 80074b6:	021b      	lsls	r3, r3, #8
 80074b8:	b21a      	sxth	r2, r3
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	781b      	ldrb	r3, [r3, #0]
 80074be:	b21b      	sxth	r3, r3
 80074c0:	4313      	orrs	r3, r2
 80074c2:	b21b      	sxth	r3, r3
 80074c4:	81fb      	strh	r3, [r7, #14]
	return rv;
 80074c6:	89fb      	ldrh	r3, [r7, #14]
}
 80074c8:	4618      	mov	r0, r3
 80074ca:	3714      	adds	r7, #20
 80074cc:	46bd      	mov	sp, r7
 80074ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d2:	4770      	bx	lr

080074d4 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80074d4:	b480      	push	{r7}
 80074d6:	b085      	sub	sp, #20
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	3303      	adds	r3, #3
 80074e0:	781b      	ldrb	r3, [r3, #0]
 80074e2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	021b      	lsls	r3, r3, #8
 80074e8:	687a      	ldr	r2, [r7, #4]
 80074ea:	3202      	adds	r2, #2
 80074ec:	7812      	ldrb	r2, [r2, #0]
 80074ee:	4313      	orrs	r3, r2
 80074f0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	021b      	lsls	r3, r3, #8
 80074f6:	687a      	ldr	r2, [r7, #4]
 80074f8:	3201      	adds	r2, #1
 80074fa:	7812      	ldrb	r2, [r2, #0]
 80074fc:	4313      	orrs	r3, r2
 80074fe:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	021b      	lsls	r3, r3, #8
 8007504:	687a      	ldr	r2, [r7, #4]
 8007506:	7812      	ldrb	r2, [r2, #0]
 8007508:	4313      	orrs	r3, r2
 800750a:	60fb      	str	r3, [r7, #12]
	return rv;
 800750c:	68fb      	ldr	r3, [r7, #12]
}
 800750e:	4618      	mov	r0, r3
 8007510:	3714      	adds	r7, #20
 8007512:	46bd      	mov	sp, r7
 8007514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007518:	4770      	bx	lr

0800751a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800751a:	b480      	push	{r7}
 800751c:	b083      	sub	sp, #12
 800751e:	af00      	add	r7, sp, #0
 8007520:	6078      	str	r0, [r7, #4]
 8007522:	460b      	mov	r3, r1
 8007524:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	1c5a      	adds	r2, r3, #1
 800752a:	607a      	str	r2, [r7, #4]
 800752c:	887a      	ldrh	r2, [r7, #2]
 800752e:	b2d2      	uxtb	r2, r2
 8007530:	701a      	strb	r2, [r3, #0]
 8007532:	887b      	ldrh	r3, [r7, #2]
 8007534:	0a1b      	lsrs	r3, r3, #8
 8007536:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	1c5a      	adds	r2, r3, #1
 800753c:	607a      	str	r2, [r7, #4]
 800753e:	887a      	ldrh	r2, [r7, #2]
 8007540:	b2d2      	uxtb	r2, r2
 8007542:	701a      	strb	r2, [r3, #0]
}
 8007544:	bf00      	nop
 8007546:	370c      	adds	r7, #12
 8007548:	46bd      	mov	sp, r7
 800754a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754e:	4770      	bx	lr

08007550 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8007550:	b480      	push	{r7}
 8007552:	b083      	sub	sp, #12
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
 8007558:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	1c5a      	adds	r2, r3, #1
 800755e:	607a      	str	r2, [r7, #4]
 8007560:	683a      	ldr	r2, [r7, #0]
 8007562:	b2d2      	uxtb	r2, r2
 8007564:	701a      	strb	r2, [r3, #0]
 8007566:	683b      	ldr	r3, [r7, #0]
 8007568:	0a1b      	lsrs	r3, r3, #8
 800756a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	1c5a      	adds	r2, r3, #1
 8007570:	607a      	str	r2, [r7, #4]
 8007572:	683a      	ldr	r2, [r7, #0]
 8007574:	b2d2      	uxtb	r2, r2
 8007576:	701a      	strb	r2, [r3, #0]
 8007578:	683b      	ldr	r3, [r7, #0]
 800757a:	0a1b      	lsrs	r3, r3, #8
 800757c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	1c5a      	adds	r2, r3, #1
 8007582:	607a      	str	r2, [r7, #4]
 8007584:	683a      	ldr	r2, [r7, #0]
 8007586:	b2d2      	uxtb	r2, r2
 8007588:	701a      	strb	r2, [r3, #0]
 800758a:	683b      	ldr	r3, [r7, #0]
 800758c:	0a1b      	lsrs	r3, r3, #8
 800758e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	1c5a      	adds	r2, r3, #1
 8007594:	607a      	str	r2, [r7, #4]
 8007596:	683a      	ldr	r2, [r7, #0]
 8007598:	b2d2      	uxtb	r2, r2
 800759a:	701a      	strb	r2, [r3, #0]
}
 800759c:	bf00      	nop
 800759e:	370c      	adds	r7, #12
 80075a0:	46bd      	mov	sp, r7
 80075a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a6:	4770      	bx	lr

080075a8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80075a8:	b480      	push	{r7}
 80075aa:	b087      	sub	sp, #28
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	60f8      	str	r0, [r7, #12]
 80075b0:	60b9      	str	r1, [r7, #8]
 80075b2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80075b8:	68bb      	ldr	r3, [r7, #8]
 80075ba:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d00d      	beq.n	80075de <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80075c2:	693a      	ldr	r2, [r7, #16]
 80075c4:	1c53      	adds	r3, r2, #1
 80075c6:	613b      	str	r3, [r7, #16]
 80075c8:	697b      	ldr	r3, [r7, #20]
 80075ca:	1c59      	adds	r1, r3, #1
 80075cc:	6179      	str	r1, [r7, #20]
 80075ce:	7812      	ldrb	r2, [r2, #0]
 80075d0:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	3b01      	subs	r3, #1
 80075d6:	607b      	str	r3, [r7, #4]
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d1f1      	bne.n	80075c2 <mem_cpy+0x1a>
	}
}
 80075de:	bf00      	nop
 80075e0:	371c      	adds	r7, #28
 80075e2:	46bd      	mov	sp, r7
 80075e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e8:	4770      	bx	lr

080075ea <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80075ea:	b480      	push	{r7}
 80075ec:	b087      	sub	sp, #28
 80075ee:	af00      	add	r7, sp, #0
 80075f0:	60f8      	str	r0, [r7, #12]
 80075f2:	60b9      	str	r1, [r7, #8]
 80075f4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80075fa:	697b      	ldr	r3, [r7, #20]
 80075fc:	1c5a      	adds	r2, r3, #1
 80075fe:	617a      	str	r2, [r7, #20]
 8007600:	68ba      	ldr	r2, [r7, #8]
 8007602:	b2d2      	uxtb	r2, r2
 8007604:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	3b01      	subs	r3, #1
 800760a:	607b      	str	r3, [r7, #4]
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2b00      	cmp	r3, #0
 8007610:	d1f3      	bne.n	80075fa <mem_set+0x10>
}
 8007612:	bf00      	nop
 8007614:	bf00      	nop
 8007616:	371c      	adds	r7, #28
 8007618:	46bd      	mov	sp, r7
 800761a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761e:	4770      	bx	lr

08007620 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8007620:	b480      	push	{r7}
 8007622:	b089      	sub	sp, #36	@ 0x24
 8007624:	af00      	add	r7, sp, #0
 8007626:	60f8      	str	r0, [r7, #12]
 8007628:	60b9      	str	r1, [r7, #8]
 800762a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	61fb      	str	r3, [r7, #28]
 8007630:	68bb      	ldr	r3, [r7, #8]
 8007632:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8007634:	2300      	movs	r3, #0
 8007636:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8007638:	69fb      	ldr	r3, [r7, #28]
 800763a:	1c5a      	adds	r2, r3, #1
 800763c:	61fa      	str	r2, [r7, #28]
 800763e:	781b      	ldrb	r3, [r3, #0]
 8007640:	4619      	mov	r1, r3
 8007642:	69bb      	ldr	r3, [r7, #24]
 8007644:	1c5a      	adds	r2, r3, #1
 8007646:	61ba      	str	r2, [r7, #24]
 8007648:	781b      	ldrb	r3, [r3, #0]
 800764a:	1acb      	subs	r3, r1, r3
 800764c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	3b01      	subs	r3, #1
 8007652:	607b      	str	r3, [r7, #4]
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d002      	beq.n	8007660 <mem_cmp+0x40>
 800765a:	697b      	ldr	r3, [r7, #20]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d0eb      	beq.n	8007638 <mem_cmp+0x18>

	return r;
 8007660:	697b      	ldr	r3, [r7, #20]
}
 8007662:	4618      	mov	r0, r3
 8007664:	3724      	adds	r7, #36	@ 0x24
 8007666:	46bd      	mov	sp, r7
 8007668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766c:	4770      	bx	lr

0800766e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800766e:	b480      	push	{r7}
 8007670:	b083      	sub	sp, #12
 8007672:	af00      	add	r7, sp, #0
 8007674:	6078      	str	r0, [r7, #4]
 8007676:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8007678:	e002      	b.n	8007680 <chk_chr+0x12>
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	3301      	adds	r3, #1
 800767e:	607b      	str	r3, [r7, #4]
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	781b      	ldrb	r3, [r3, #0]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d005      	beq.n	8007694 <chk_chr+0x26>
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	781b      	ldrb	r3, [r3, #0]
 800768c:	461a      	mov	r2, r3
 800768e:	683b      	ldr	r3, [r7, #0]
 8007690:	4293      	cmp	r3, r2
 8007692:	d1f2      	bne.n	800767a <chk_chr+0xc>
	return *str;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	781b      	ldrb	r3, [r3, #0]
}
 8007698:	4618      	mov	r0, r3
 800769a:	370c      	adds	r7, #12
 800769c:	46bd      	mov	sp, r7
 800769e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a2:	4770      	bx	lr

080076a4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80076a4:	b480      	push	{r7}
 80076a6:	b085      	sub	sp, #20
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
 80076ac:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80076ae:	2300      	movs	r3, #0
 80076b0:	60bb      	str	r3, [r7, #8]
 80076b2:	68bb      	ldr	r3, [r7, #8]
 80076b4:	60fb      	str	r3, [r7, #12]
 80076b6:	e029      	b.n	800770c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80076b8:	4a27      	ldr	r2, [pc, #156]	@ (8007758 <chk_lock+0xb4>)
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	011b      	lsls	r3, r3, #4
 80076be:	4413      	add	r3, r2
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d01d      	beq.n	8007702 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80076c6:	4a24      	ldr	r2, [pc, #144]	@ (8007758 <chk_lock+0xb4>)
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	011b      	lsls	r3, r3, #4
 80076cc:	4413      	add	r3, r2
 80076ce:	681a      	ldr	r2, [r3, #0]
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	429a      	cmp	r2, r3
 80076d6:	d116      	bne.n	8007706 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80076d8:	4a1f      	ldr	r2, [pc, #124]	@ (8007758 <chk_lock+0xb4>)
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	011b      	lsls	r3, r3, #4
 80076de:	4413      	add	r3, r2
 80076e0:	3304      	adds	r3, #4
 80076e2:	681a      	ldr	r2, [r3, #0]
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80076e8:	429a      	cmp	r2, r3
 80076ea:	d10c      	bne.n	8007706 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80076ec:	4a1a      	ldr	r2, [pc, #104]	@ (8007758 <chk_lock+0xb4>)
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	011b      	lsls	r3, r3, #4
 80076f2:	4413      	add	r3, r2
 80076f4:	3308      	adds	r3, #8
 80076f6:	681a      	ldr	r2, [r3, #0]
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80076fc:	429a      	cmp	r2, r3
 80076fe:	d102      	bne.n	8007706 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8007700:	e007      	b.n	8007712 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8007702:	2301      	movs	r3, #1
 8007704:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	3301      	adds	r3, #1
 800770a:	60fb      	str	r3, [r7, #12]
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	2b01      	cmp	r3, #1
 8007710:	d9d2      	bls.n	80076b8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	2b02      	cmp	r3, #2
 8007716:	d109      	bne.n	800772c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8007718:	68bb      	ldr	r3, [r7, #8]
 800771a:	2b00      	cmp	r3, #0
 800771c:	d102      	bne.n	8007724 <chk_lock+0x80>
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	2b02      	cmp	r3, #2
 8007722:	d101      	bne.n	8007728 <chk_lock+0x84>
 8007724:	2300      	movs	r3, #0
 8007726:	e010      	b.n	800774a <chk_lock+0xa6>
 8007728:	2312      	movs	r3, #18
 800772a:	e00e      	b.n	800774a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800772c:	683b      	ldr	r3, [r7, #0]
 800772e:	2b00      	cmp	r3, #0
 8007730:	d108      	bne.n	8007744 <chk_lock+0xa0>
 8007732:	4a09      	ldr	r2, [pc, #36]	@ (8007758 <chk_lock+0xb4>)
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	011b      	lsls	r3, r3, #4
 8007738:	4413      	add	r3, r2
 800773a:	330c      	adds	r3, #12
 800773c:	881b      	ldrh	r3, [r3, #0]
 800773e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007742:	d101      	bne.n	8007748 <chk_lock+0xa4>
 8007744:	2310      	movs	r3, #16
 8007746:	e000      	b.n	800774a <chk_lock+0xa6>
 8007748:	2300      	movs	r3, #0
}
 800774a:	4618      	mov	r0, r3
 800774c:	3714      	adds	r7, #20
 800774e:	46bd      	mov	sp, r7
 8007750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007754:	4770      	bx	lr
 8007756:	bf00      	nop
 8007758:	20000578 	.word	0x20000578

0800775c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800775c:	b480      	push	{r7}
 800775e:	b083      	sub	sp, #12
 8007760:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007762:	2300      	movs	r3, #0
 8007764:	607b      	str	r3, [r7, #4]
 8007766:	e002      	b.n	800776e <enq_lock+0x12>
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	3301      	adds	r3, #1
 800776c:	607b      	str	r3, [r7, #4]
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	2b01      	cmp	r3, #1
 8007772:	d806      	bhi.n	8007782 <enq_lock+0x26>
 8007774:	4a09      	ldr	r2, [pc, #36]	@ (800779c <enq_lock+0x40>)
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	011b      	lsls	r3, r3, #4
 800777a:	4413      	add	r3, r2
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	2b00      	cmp	r3, #0
 8007780:	d1f2      	bne.n	8007768 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	2b02      	cmp	r3, #2
 8007786:	bf14      	ite	ne
 8007788:	2301      	movne	r3, #1
 800778a:	2300      	moveq	r3, #0
 800778c:	b2db      	uxtb	r3, r3
}
 800778e:	4618      	mov	r0, r3
 8007790:	370c      	adds	r7, #12
 8007792:	46bd      	mov	sp, r7
 8007794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007798:	4770      	bx	lr
 800779a:	bf00      	nop
 800779c:	20000578 	.word	0x20000578

080077a0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80077a0:	b480      	push	{r7}
 80077a2:	b085      	sub	sp, #20
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
 80077a8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80077aa:	2300      	movs	r3, #0
 80077ac:	60fb      	str	r3, [r7, #12]
 80077ae:	e01f      	b.n	80077f0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80077b0:	4a41      	ldr	r2, [pc, #260]	@ (80078b8 <inc_lock+0x118>)
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	011b      	lsls	r3, r3, #4
 80077b6:	4413      	add	r3, r2
 80077b8:	681a      	ldr	r2, [r3, #0]
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	429a      	cmp	r2, r3
 80077c0:	d113      	bne.n	80077ea <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80077c2:	4a3d      	ldr	r2, [pc, #244]	@ (80078b8 <inc_lock+0x118>)
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	011b      	lsls	r3, r3, #4
 80077c8:	4413      	add	r3, r2
 80077ca:	3304      	adds	r3, #4
 80077cc:	681a      	ldr	r2, [r3, #0]
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80077d2:	429a      	cmp	r2, r3
 80077d4:	d109      	bne.n	80077ea <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80077d6:	4a38      	ldr	r2, [pc, #224]	@ (80078b8 <inc_lock+0x118>)
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	011b      	lsls	r3, r3, #4
 80077dc:	4413      	add	r3, r2
 80077de:	3308      	adds	r3, #8
 80077e0:	681a      	ldr	r2, [r3, #0]
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80077e6:	429a      	cmp	r2, r3
 80077e8:	d006      	beq.n	80077f8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	3301      	adds	r3, #1
 80077ee:	60fb      	str	r3, [r7, #12]
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	2b01      	cmp	r3, #1
 80077f4:	d9dc      	bls.n	80077b0 <inc_lock+0x10>
 80077f6:	e000      	b.n	80077fa <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80077f8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	2b02      	cmp	r3, #2
 80077fe:	d132      	bne.n	8007866 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007800:	2300      	movs	r3, #0
 8007802:	60fb      	str	r3, [r7, #12]
 8007804:	e002      	b.n	800780c <inc_lock+0x6c>
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	3301      	adds	r3, #1
 800780a:	60fb      	str	r3, [r7, #12]
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	2b01      	cmp	r3, #1
 8007810:	d806      	bhi.n	8007820 <inc_lock+0x80>
 8007812:	4a29      	ldr	r2, [pc, #164]	@ (80078b8 <inc_lock+0x118>)
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	011b      	lsls	r3, r3, #4
 8007818:	4413      	add	r3, r2
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	2b00      	cmp	r3, #0
 800781e:	d1f2      	bne.n	8007806 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	2b02      	cmp	r3, #2
 8007824:	d101      	bne.n	800782a <inc_lock+0x8a>
 8007826:	2300      	movs	r3, #0
 8007828:	e040      	b.n	80078ac <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681a      	ldr	r2, [r3, #0]
 800782e:	4922      	ldr	r1, [pc, #136]	@ (80078b8 <inc_lock+0x118>)
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	011b      	lsls	r3, r3, #4
 8007834:	440b      	add	r3, r1
 8007836:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	689a      	ldr	r2, [r3, #8]
 800783c:	491e      	ldr	r1, [pc, #120]	@ (80078b8 <inc_lock+0x118>)
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	011b      	lsls	r3, r3, #4
 8007842:	440b      	add	r3, r1
 8007844:	3304      	adds	r3, #4
 8007846:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	695a      	ldr	r2, [r3, #20]
 800784c:	491a      	ldr	r1, [pc, #104]	@ (80078b8 <inc_lock+0x118>)
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	011b      	lsls	r3, r3, #4
 8007852:	440b      	add	r3, r1
 8007854:	3308      	adds	r3, #8
 8007856:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8007858:	4a17      	ldr	r2, [pc, #92]	@ (80078b8 <inc_lock+0x118>)
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	011b      	lsls	r3, r3, #4
 800785e:	4413      	add	r3, r2
 8007860:	330c      	adds	r3, #12
 8007862:	2200      	movs	r2, #0
 8007864:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8007866:	683b      	ldr	r3, [r7, #0]
 8007868:	2b00      	cmp	r3, #0
 800786a:	d009      	beq.n	8007880 <inc_lock+0xe0>
 800786c:	4a12      	ldr	r2, [pc, #72]	@ (80078b8 <inc_lock+0x118>)
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	011b      	lsls	r3, r3, #4
 8007872:	4413      	add	r3, r2
 8007874:	330c      	adds	r3, #12
 8007876:	881b      	ldrh	r3, [r3, #0]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d001      	beq.n	8007880 <inc_lock+0xe0>
 800787c:	2300      	movs	r3, #0
 800787e:	e015      	b.n	80078ac <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8007880:	683b      	ldr	r3, [r7, #0]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d108      	bne.n	8007898 <inc_lock+0xf8>
 8007886:	4a0c      	ldr	r2, [pc, #48]	@ (80078b8 <inc_lock+0x118>)
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	011b      	lsls	r3, r3, #4
 800788c:	4413      	add	r3, r2
 800788e:	330c      	adds	r3, #12
 8007890:	881b      	ldrh	r3, [r3, #0]
 8007892:	3301      	adds	r3, #1
 8007894:	b29a      	uxth	r2, r3
 8007896:	e001      	b.n	800789c <inc_lock+0xfc>
 8007898:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800789c:	4906      	ldr	r1, [pc, #24]	@ (80078b8 <inc_lock+0x118>)
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	011b      	lsls	r3, r3, #4
 80078a2:	440b      	add	r3, r1
 80078a4:	330c      	adds	r3, #12
 80078a6:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	3301      	adds	r3, #1
}
 80078ac:	4618      	mov	r0, r3
 80078ae:	3714      	adds	r7, #20
 80078b0:	46bd      	mov	sp, r7
 80078b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b6:	4770      	bx	lr
 80078b8:	20000578 	.word	0x20000578

080078bc <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80078bc:	b480      	push	{r7}
 80078be:	b085      	sub	sp, #20
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	3b01      	subs	r3, #1
 80078c8:	607b      	str	r3, [r7, #4]
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	2b01      	cmp	r3, #1
 80078ce:	d825      	bhi.n	800791c <dec_lock+0x60>
		n = Files[i].ctr;
 80078d0:	4a17      	ldr	r2, [pc, #92]	@ (8007930 <dec_lock+0x74>)
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	011b      	lsls	r3, r3, #4
 80078d6:	4413      	add	r3, r2
 80078d8:	330c      	adds	r3, #12
 80078da:	881b      	ldrh	r3, [r3, #0]
 80078dc:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80078de:	89fb      	ldrh	r3, [r7, #14]
 80078e0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80078e4:	d101      	bne.n	80078ea <dec_lock+0x2e>
 80078e6:	2300      	movs	r3, #0
 80078e8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80078ea:	89fb      	ldrh	r3, [r7, #14]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d002      	beq.n	80078f6 <dec_lock+0x3a>
 80078f0:	89fb      	ldrh	r3, [r7, #14]
 80078f2:	3b01      	subs	r3, #1
 80078f4:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80078f6:	4a0e      	ldr	r2, [pc, #56]	@ (8007930 <dec_lock+0x74>)
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	011b      	lsls	r3, r3, #4
 80078fc:	4413      	add	r3, r2
 80078fe:	330c      	adds	r3, #12
 8007900:	89fa      	ldrh	r2, [r7, #14]
 8007902:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8007904:	89fb      	ldrh	r3, [r7, #14]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d105      	bne.n	8007916 <dec_lock+0x5a>
 800790a:	4a09      	ldr	r2, [pc, #36]	@ (8007930 <dec_lock+0x74>)
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	011b      	lsls	r3, r3, #4
 8007910:	4413      	add	r3, r2
 8007912:	2200      	movs	r2, #0
 8007914:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8007916:	2300      	movs	r3, #0
 8007918:	737b      	strb	r3, [r7, #13]
 800791a:	e001      	b.n	8007920 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800791c:	2302      	movs	r3, #2
 800791e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8007920:	7b7b      	ldrb	r3, [r7, #13]
}
 8007922:	4618      	mov	r0, r3
 8007924:	3714      	adds	r7, #20
 8007926:	46bd      	mov	sp, r7
 8007928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792c:	4770      	bx	lr
 800792e:	bf00      	nop
 8007930:	20000578 	.word	0x20000578

08007934 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8007934:	b480      	push	{r7}
 8007936:	b085      	sub	sp, #20
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800793c:	2300      	movs	r3, #0
 800793e:	60fb      	str	r3, [r7, #12]
 8007940:	e010      	b.n	8007964 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8007942:	4a0d      	ldr	r2, [pc, #52]	@ (8007978 <clear_lock+0x44>)
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	011b      	lsls	r3, r3, #4
 8007948:	4413      	add	r3, r2
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	687a      	ldr	r2, [r7, #4]
 800794e:	429a      	cmp	r2, r3
 8007950:	d105      	bne.n	800795e <clear_lock+0x2a>
 8007952:	4a09      	ldr	r2, [pc, #36]	@ (8007978 <clear_lock+0x44>)
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	011b      	lsls	r3, r3, #4
 8007958:	4413      	add	r3, r2
 800795a:	2200      	movs	r2, #0
 800795c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	3301      	adds	r3, #1
 8007962:	60fb      	str	r3, [r7, #12]
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	2b01      	cmp	r3, #1
 8007968:	d9eb      	bls.n	8007942 <clear_lock+0xe>
	}
}
 800796a:	bf00      	nop
 800796c:	bf00      	nop
 800796e:	3714      	adds	r7, #20
 8007970:	46bd      	mov	sp, r7
 8007972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007976:	4770      	bx	lr
 8007978:	20000578 	.word	0x20000578

0800797c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800797c:	b580      	push	{r7, lr}
 800797e:	b086      	sub	sp, #24
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8007984:	2300      	movs	r3, #0
 8007986:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	78db      	ldrb	r3, [r3, #3]
 800798c:	2b00      	cmp	r3, #0
 800798e:	d034      	beq.n	80079fa <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007994:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	7858      	ldrb	r0, [r3, #1]
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80079a0:	2301      	movs	r3, #1
 80079a2:	697a      	ldr	r2, [r7, #20]
 80079a4:	f7ff fd40 	bl	8007428 <disk_write>
 80079a8:	4603      	mov	r3, r0
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d002      	beq.n	80079b4 <sync_window+0x38>
			res = FR_DISK_ERR;
 80079ae:	2301      	movs	r3, #1
 80079b0:	73fb      	strb	r3, [r7, #15]
 80079b2:	e022      	b.n	80079fa <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	2200      	movs	r2, #0
 80079b8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	6a1b      	ldr	r3, [r3, #32]
 80079be:	697a      	ldr	r2, [r7, #20]
 80079c0:	1ad2      	subs	r2, r2, r3
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	699b      	ldr	r3, [r3, #24]
 80079c6:	429a      	cmp	r2, r3
 80079c8:	d217      	bcs.n	80079fa <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	789b      	ldrb	r3, [r3, #2]
 80079ce:	613b      	str	r3, [r7, #16]
 80079d0:	e010      	b.n	80079f4 <sync_window+0x78>
					wsect += fs->fsize;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	699b      	ldr	r3, [r3, #24]
 80079d6:	697a      	ldr	r2, [r7, #20]
 80079d8:	4413      	add	r3, r2
 80079da:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	7858      	ldrb	r0, [r3, #1]
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80079e6:	2301      	movs	r3, #1
 80079e8:	697a      	ldr	r2, [r7, #20]
 80079ea:	f7ff fd1d 	bl	8007428 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80079ee:	693b      	ldr	r3, [r7, #16]
 80079f0:	3b01      	subs	r3, #1
 80079f2:	613b      	str	r3, [r7, #16]
 80079f4:	693b      	ldr	r3, [r7, #16]
 80079f6:	2b01      	cmp	r3, #1
 80079f8:	d8eb      	bhi.n	80079d2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80079fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80079fc:	4618      	mov	r0, r3
 80079fe:	3718      	adds	r7, #24
 8007a00:	46bd      	mov	sp, r7
 8007a02:	bd80      	pop	{r7, pc}

08007a04 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8007a04:	b580      	push	{r7, lr}
 8007a06:	b084      	sub	sp, #16
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
 8007a0c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8007a0e:	2300      	movs	r3, #0
 8007a10:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a16:	683a      	ldr	r2, [r7, #0]
 8007a18:	429a      	cmp	r2, r3
 8007a1a:	d01b      	beq.n	8007a54 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8007a1c:	6878      	ldr	r0, [r7, #4]
 8007a1e:	f7ff ffad 	bl	800797c <sync_window>
 8007a22:	4603      	mov	r3, r0
 8007a24:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8007a26:	7bfb      	ldrb	r3, [r7, #15]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d113      	bne.n	8007a54 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	7858      	ldrb	r0, [r3, #1]
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007a36:	2301      	movs	r3, #1
 8007a38:	683a      	ldr	r2, [r7, #0]
 8007a3a:	f7ff fcd5 	bl	80073e8 <disk_read>
 8007a3e:	4603      	mov	r3, r0
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d004      	beq.n	8007a4e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8007a44:	f04f 33ff 	mov.w	r3, #4294967295
 8007a48:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8007a4a:	2301      	movs	r3, #1
 8007a4c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	683a      	ldr	r2, [r7, #0]
 8007a52:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 8007a54:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a56:	4618      	mov	r0, r3
 8007a58:	3710      	adds	r7, #16
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	bd80      	pop	{r7, pc}
	...

08007a60 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8007a60:	b580      	push	{r7, lr}
 8007a62:	b084      	sub	sp, #16
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8007a68:	6878      	ldr	r0, [r7, #4]
 8007a6a:	f7ff ff87 	bl	800797c <sync_window>
 8007a6e:	4603      	mov	r3, r0
 8007a70:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8007a72:	7bfb      	ldrb	r3, [r7, #15]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d158      	bne.n	8007b2a <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	781b      	ldrb	r3, [r3, #0]
 8007a7c:	2b03      	cmp	r3, #3
 8007a7e:	d148      	bne.n	8007b12 <sync_fs+0xb2>
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	791b      	ldrb	r3, [r3, #4]
 8007a84:	2b01      	cmp	r3, #1
 8007a86:	d144      	bne.n	8007b12 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	3330      	adds	r3, #48	@ 0x30
 8007a8c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007a90:	2100      	movs	r1, #0
 8007a92:	4618      	mov	r0, r3
 8007a94:	f7ff fda9 	bl	80075ea <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	3330      	adds	r3, #48	@ 0x30
 8007a9c:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8007aa0:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	f7ff fd38 	bl	800751a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	3330      	adds	r3, #48	@ 0x30
 8007aae:	4921      	ldr	r1, [pc, #132]	@ (8007b34 <sync_fs+0xd4>)
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	f7ff fd4d 	bl	8007550 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	3330      	adds	r3, #48	@ 0x30
 8007aba:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8007abe:	491e      	ldr	r1, [pc, #120]	@ (8007b38 <sync_fs+0xd8>)
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	f7ff fd45 	bl	8007550 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	3330      	adds	r3, #48	@ 0x30
 8007aca:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	691b      	ldr	r3, [r3, #16]
 8007ad2:	4619      	mov	r1, r3
 8007ad4:	4610      	mov	r0, r2
 8007ad6:	f7ff fd3b 	bl	8007550 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	3330      	adds	r3, #48	@ 0x30
 8007ade:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	68db      	ldr	r3, [r3, #12]
 8007ae6:	4619      	mov	r1, r3
 8007ae8:	4610      	mov	r0, r2
 8007aea:	f7ff fd31 	bl	8007550 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	69db      	ldr	r3, [r3, #28]
 8007af2:	1c5a      	adds	r2, r3, #1
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	7858      	ldrb	r0, [r3, #1]
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b06:	2301      	movs	r3, #1
 8007b08:	f7ff fc8e 	bl	8007428 <disk_write>
			fs->fsi_flag = 0;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	2200      	movs	r2, #0
 8007b10:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	785b      	ldrb	r3, [r3, #1]
 8007b16:	2200      	movs	r2, #0
 8007b18:	2100      	movs	r1, #0
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	f7ff fca4 	bl	8007468 <disk_ioctl>
 8007b20:	4603      	mov	r3, r0
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d001      	beq.n	8007b2a <sync_fs+0xca>
 8007b26:	2301      	movs	r3, #1
 8007b28:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8007b2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	3710      	adds	r7, #16
 8007b30:	46bd      	mov	sp, r7
 8007b32:	bd80      	pop	{r7, pc}
 8007b34:	41615252 	.word	0x41615252
 8007b38:	61417272 	.word	0x61417272

08007b3c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8007b3c:	b480      	push	{r7}
 8007b3e:	b083      	sub	sp, #12
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
 8007b44:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8007b46:	683b      	ldr	r3, [r7, #0]
 8007b48:	3b02      	subs	r3, #2
 8007b4a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	695b      	ldr	r3, [r3, #20]
 8007b50:	3b02      	subs	r3, #2
 8007b52:	683a      	ldr	r2, [r7, #0]
 8007b54:	429a      	cmp	r2, r3
 8007b56:	d301      	bcc.n	8007b5c <clust2sect+0x20>
 8007b58:	2300      	movs	r3, #0
 8007b5a:	e008      	b.n	8007b6e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	895b      	ldrh	r3, [r3, #10]
 8007b60:	461a      	mov	r2, r3
 8007b62:	683b      	ldr	r3, [r7, #0]
 8007b64:	fb03 f202 	mul.w	r2, r3, r2
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b6c:	4413      	add	r3, r2
}
 8007b6e:	4618      	mov	r0, r3
 8007b70:	370c      	adds	r7, #12
 8007b72:	46bd      	mov	sp, r7
 8007b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b78:	4770      	bx	lr

08007b7a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8007b7a:	b580      	push	{r7, lr}
 8007b7c:	b086      	sub	sp, #24
 8007b7e:	af00      	add	r7, sp, #0
 8007b80:	6078      	str	r0, [r7, #4]
 8007b82:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8007b8a:	683b      	ldr	r3, [r7, #0]
 8007b8c:	2b01      	cmp	r3, #1
 8007b8e:	d904      	bls.n	8007b9a <get_fat+0x20>
 8007b90:	693b      	ldr	r3, [r7, #16]
 8007b92:	695b      	ldr	r3, [r3, #20]
 8007b94:	683a      	ldr	r2, [r7, #0]
 8007b96:	429a      	cmp	r2, r3
 8007b98:	d302      	bcc.n	8007ba0 <get_fat+0x26>
		val = 1;	/* Internal error */
 8007b9a:	2301      	movs	r3, #1
 8007b9c:	617b      	str	r3, [r7, #20]
 8007b9e:	e08e      	b.n	8007cbe <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8007ba0:	f04f 33ff 	mov.w	r3, #4294967295
 8007ba4:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8007ba6:	693b      	ldr	r3, [r7, #16]
 8007ba8:	781b      	ldrb	r3, [r3, #0]
 8007baa:	2b03      	cmp	r3, #3
 8007bac:	d061      	beq.n	8007c72 <get_fat+0xf8>
 8007bae:	2b03      	cmp	r3, #3
 8007bb0:	dc7b      	bgt.n	8007caa <get_fat+0x130>
 8007bb2:	2b01      	cmp	r3, #1
 8007bb4:	d002      	beq.n	8007bbc <get_fat+0x42>
 8007bb6:	2b02      	cmp	r3, #2
 8007bb8:	d041      	beq.n	8007c3e <get_fat+0xc4>
 8007bba:	e076      	b.n	8007caa <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8007bbc:	683b      	ldr	r3, [r7, #0]
 8007bbe:	60fb      	str	r3, [r7, #12]
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	085b      	lsrs	r3, r3, #1
 8007bc4:	68fa      	ldr	r2, [r7, #12]
 8007bc6:	4413      	add	r3, r2
 8007bc8:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007bca:	693b      	ldr	r3, [r7, #16]
 8007bcc:	6a1a      	ldr	r2, [r3, #32]
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	0a5b      	lsrs	r3, r3, #9
 8007bd2:	4413      	add	r3, r2
 8007bd4:	4619      	mov	r1, r3
 8007bd6:	6938      	ldr	r0, [r7, #16]
 8007bd8:	f7ff ff14 	bl	8007a04 <move_window>
 8007bdc:	4603      	mov	r3, r0
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d166      	bne.n	8007cb0 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	1c5a      	adds	r2, r3, #1
 8007be6:	60fa      	str	r2, [r7, #12]
 8007be8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007bec:	693a      	ldr	r2, [r7, #16]
 8007bee:	4413      	add	r3, r2
 8007bf0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007bf4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007bf6:	693b      	ldr	r3, [r7, #16]
 8007bf8:	6a1a      	ldr	r2, [r3, #32]
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	0a5b      	lsrs	r3, r3, #9
 8007bfe:	4413      	add	r3, r2
 8007c00:	4619      	mov	r1, r3
 8007c02:	6938      	ldr	r0, [r7, #16]
 8007c04:	f7ff fefe 	bl	8007a04 <move_window>
 8007c08:	4603      	mov	r3, r0
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d152      	bne.n	8007cb4 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c14:	693a      	ldr	r2, [r7, #16]
 8007c16:	4413      	add	r3, r2
 8007c18:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007c1c:	021b      	lsls	r3, r3, #8
 8007c1e:	68ba      	ldr	r2, [r7, #8]
 8007c20:	4313      	orrs	r3, r2
 8007c22:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8007c24:	683b      	ldr	r3, [r7, #0]
 8007c26:	f003 0301 	and.w	r3, r3, #1
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d002      	beq.n	8007c34 <get_fat+0xba>
 8007c2e:	68bb      	ldr	r3, [r7, #8]
 8007c30:	091b      	lsrs	r3, r3, #4
 8007c32:	e002      	b.n	8007c3a <get_fat+0xc0>
 8007c34:	68bb      	ldr	r3, [r7, #8]
 8007c36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007c3a:	617b      	str	r3, [r7, #20]
			break;
 8007c3c:	e03f      	b.n	8007cbe <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007c3e:	693b      	ldr	r3, [r7, #16]
 8007c40:	6a1a      	ldr	r2, [r3, #32]
 8007c42:	683b      	ldr	r3, [r7, #0]
 8007c44:	0a1b      	lsrs	r3, r3, #8
 8007c46:	4413      	add	r3, r2
 8007c48:	4619      	mov	r1, r3
 8007c4a:	6938      	ldr	r0, [r7, #16]
 8007c4c:	f7ff feda 	bl	8007a04 <move_window>
 8007c50:	4603      	mov	r3, r0
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d130      	bne.n	8007cb8 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8007c56:	693b      	ldr	r3, [r7, #16]
 8007c58:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007c5c:	683b      	ldr	r3, [r7, #0]
 8007c5e:	005b      	lsls	r3, r3, #1
 8007c60:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8007c64:	4413      	add	r3, r2
 8007c66:	4618      	mov	r0, r3
 8007c68:	f7ff fc1c 	bl	80074a4 <ld_word>
 8007c6c:	4603      	mov	r3, r0
 8007c6e:	617b      	str	r3, [r7, #20]
			break;
 8007c70:	e025      	b.n	8007cbe <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007c72:	693b      	ldr	r3, [r7, #16]
 8007c74:	6a1a      	ldr	r2, [r3, #32]
 8007c76:	683b      	ldr	r3, [r7, #0]
 8007c78:	09db      	lsrs	r3, r3, #7
 8007c7a:	4413      	add	r3, r2
 8007c7c:	4619      	mov	r1, r3
 8007c7e:	6938      	ldr	r0, [r7, #16]
 8007c80:	f7ff fec0 	bl	8007a04 <move_window>
 8007c84:	4603      	mov	r3, r0
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d118      	bne.n	8007cbc <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8007c8a:	693b      	ldr	r3, [r7, #16]
 8007c8c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007c90:	683b      	ldr	r3, [r7, #0]
 8007c92:	009b      	lsls	r3, r3, #2
 8007c94:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8007c98:	4413      	add	r3, r2
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	f7ff fc1a 	bl	80074d4 <ld_dword>
 8007ca0:	4603      	mov	r3, r0
 8007ca2:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8007ca6:	617b      	str	r3, [r7, #20]
			break;
 8007ca8:	e009      	b.n	8007cbe <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8007caa:	2301      	movs	r3, #1
 8007cac:	617b      	str	r3, [r7, #20]
 8007cae:	e006      	b.n	8007cbe <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007cb0:	bf00      	nop
 8007cb2:	e004      	b.n	8007cbe <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007cb4:	bf00      	nop
 8007cb6:	e002      	b.n	8007cbe <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007cb8:	bf00      	nop
 8007cba:	e000      	b.n	8007cbe <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007cbc:	bf00      	nop
		}
	}

	return val;
 8007cbe:	697b      	ldr	r3, [r7, #20]
}
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	3718      	adds	r7, #24
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	bd80      	pop	{r7, pc}

08007cc8 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8007cc8:	b590      	push	{r4, r7, lr}
 8007cca:	b089      	sub	sp, #36	@ 0x24
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	60f8      	str	r0, [r7, #12]
 8007cd0:	60b9      	str	r1, [r7, #8]
 8007cd2:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8007cd4:	2302      	movs	r3, #2
 8007cd6:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8007cd8:	68bb      	ldr	r3, [r7, #8]
 8007cda:	2b01      	cmp	r3, #1
 8007cdc:	f240 80d9 	bls.w	8007e92 <put_fat+0x1ca>
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	695b      	ldr	r3, [r3, #20]
 8007ce4:	68ba      	ldr	r2, [r7, #8]
 8007ce6:	429a      	cmp	r2, r3
 8007ce8:	f080 80d3 	bcs.w	8007e92 <put_fat+0x1ca>
		switch (fs->fs_type) {
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	781b      	ldrb	r3, [r3, #0]
 8007cf0:	2b03      	cmp	r3, #3
 8007cf2:	f000 8096 	beq.w	8007e22 <put_fat+0x15a>
 8007cf6:	2b03      	cmp	r3, #3
 8007cf8:	f300 80cb 	bgt.w	8007e92 <put_fat+0x1ca>
 8007cfc:	2b01      	cmp	r3, #1
 8007cfe:	d002      	beq.n	8007d06 <put_fat+0x3e>
 8007d00:	2b02      	cmp	r3, #2
 8007d02:	d06e      	beq.n	8007de2 <put_fat+0x11a>
 8007d04:	e0c5      	b.n	8007e92 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8007d06:	68bb      	ldr	r3, [r7, #8]
 8007d08:	61bb      	str	r3, [r7, #24]
 8007d0a:	69bb      	ldr	r3, [r7, #24]
 8007d0c:	085b      	lsrs	r3, r3, #1
 8007d0e:	69ba      	ldr	r2, [r7, #24]
 8007d10:	4413      	add	r3, r2
 8007d12:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	6a1a      	ldr	r2, [r3, #32]
 8007d18:	69bb      	ldr	r3, [r7, #24]
 8007d1a:	0a5b      	lsrs	r3, r3, #9
 8007d1c:	4413      	add	r3, r2
 8007d1e:	4619      	mov	r1, r3
 8007d20:	68f8      	ldr	r0, [r7, #12]
 8007d22:	f7ff fe6f 	bl	8007a04 <move_window>
 8007d26:	4603      	mov	r3, r0
 8007d28:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007d2a:	7ffb      	ldrb	r3, [r7, #31]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	f040 80a9 	bne.w	8007e84 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007d38:	69bb      	ldr	r3, [r7, #24]
 8007d3a:	1c59      	adds	r1, r3, #1
 8007d3c:	61b9      	str	r1, [r7, #24]
 8007d3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d42:	4413      	add	r3, r2
 8007d44:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8007d46:	68bb      	ldr	r3, [r7, #8]
 8007d48:	f003 0301 	and.w	r3, r3, #1
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d00d      	beq.n	8007d6c <put_fat+0xa4>
 8007d50:	697b      	ldr	r3, [r7, #20]
 8007d52:	781b      	ldrb	r3, [r3, #0]
 8007d54:	b25b      	sxtb	r3, r3
 8007d56:	f003 030f 	and.w	r3, r3, #15
 8007d5a:	b25a      	sxtb	r2, r3
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	b2db      	uxtb	r3, r3
 8007d60:	011b      	lsls	r3, r3, #4
 8007d62:	b25b      	sxtb	r3, r3
 8007d64:	4313      	orrs	r3, r2
 8007d66:	b25b      	sxtb	r3, r3
 8007d68:	b2db      	uxtb	r3, r3
 8007d6a:	e001      	b.n	8007d70 <put_fat+0xa8>
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	b2db      	uxtb	r3, r3
 8007d70:	697a      	ldr	r2, [r7, #20]
 8007d72:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	2201      	movs	r2, #1
 8007d78:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	6a1a      	ldr	r2, [r3, #32]
 8007d7e:	69bb      	ldr	r3, [r7, #24]
 8007d80:	0a5b      	lsrs	r3, r3, #9
 8007d82:	4413      	add	r3, r2
 8007d84:	4619      	mov	r1, r3
 8007d86:	68f8      	ldr	r0, [r7, #12]
 8007d88:	f7ff fe3c 	bl	8007a04 <move_window>
 8007d8c:	4603      	mov	r3, r0
 8007d8e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007d90:	7ffb      	ldrb	r3, [r7, #31]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d178      	bne.n	8007e88 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007d9c:	69bb      	ldr	r3, [r7, #24]
 8007d9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007da2:	4413      	add	r3, r2
 8007da4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8007da6:	68bb      	ldr	r3, [r7, #8]
 8007da8:	f003 0301 	and.w	r3, r3, #1
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d003      	beq.n	8007db8 <put_fat+0xf0>
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	091b      	lsrs	r3, r3, #4
 8007db4:	b2db      	uxtb	r3, r3
 8007db6:	e00e      	b.n	8007dd6 <put_fat+0x10e>
 8007db8:	697b      	ldr	r3, [r7, #20]
 8007dba:	781b      	ldrb	r3, [r3, #0]
 8007dbc:	b25b      	sxtb	r3, r3
 8007dbe:	f023 030f 	bic.w	r3, r3, #15
 8007dc2:	b25a      	sxtb	r2, r3
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	0a1b      	lsrs	r3, r3, #8
 8007dc8:	b25b      	sxtb	r3, r3
 8007dca:	f003 030f 	and.w	r3, r3, #15
 8007dce:	b25b      	sxtb	r3, r3
 8007dd0:	4313      	orrs	r3, r2
 8007dd2:	b25b      	sxtb	r3, r3
 8007dd4:	b2db      	uxtb	r3, r3
 8007dd6:	697a      	ldr	r2, [r7, #20]
 8007dd8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	2201      	movs	r2, #1
 8007dde:	70da      	strb	r2, [r3, #3]
			break;
 8007de0:	e057      	b.n	8007e92 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	6a1a      	ldr	r2, [r3, #32]
 8007de6:	68bb      	ldr	r3, [r7, #8]
 8007de8:	0a1b      	lsrs	r3, r3, #8
 8007dea:	4413      	add	r3, r2
 8007dec:	4619      	mov	r1, r3
 8007dee:	68f8      	ldr	r0, [r7, #12]
 8007df0:	f7ff fe08 	bl	8007a04 <move_window>
 8007df4:	4603      	mov	r3, r0
 8007df6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007df8:	7ffb      	ldrb	r3, [r7, #31]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d146      	bne.n	8007e8c <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007e04:	68bb      	ldr	r3, [r7, #8]
 8007e06:	005b      	lsls	r3, r3, #1
 8007e08:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8007e0c:	4413      	add	r3, r2
 8007e0e:	687a      	ldr	r2, [r7, #4]
 8007e10:	b292      	uxth	r2, r2
 8007e12:	4611      	mov	r1, r2
 8007e14:	4618      	mov	r0, r3
 8007e16:	f7ff fb80 	bl	800751a <st_word>
			fs->wflag = 1;
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	2201      	movs	r2, #1
 8007e1e:	70da      	strb	r2, [r3, #3]
			break;
 8007e20:	e037      	b.n	8007e92 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	6a1a      	ldr	r2, [r3, #32]
 8007e26:	68bb      	ldr	r3, [r7, #8]
 8007e28:	09db      	lsrs	r3, r3, #7
 8007e2a:	4413      	add	r3, r2
 8007e2c:	4619      	mov	r1, r3
 8007e2e:	68f8      	ldr	r0, [r7, #12]
 8007e30:	f7ff fde8 	bl	8007a04 <move_window>
 8007e34:	4603      	mov	r3, r0
 8007e36:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007e38:	7ffb      	ldrb	r3, [r7, #31]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d128      	bne.n	8007e90 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007e4a:	68bb      	ldr	r3, [r7, #8]
 8007e4c:	009b      	lsls	r3, r3, #2
 8007e4e:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8007e52:	4413      	add	r3, r2
 8007e54:	4618      	mov	r0, r3
 8007e56:	f7ff fb3d 	bl	80074d4 <ld_dword>
 8007e5a:	4603      	mov	r3, r0
 8007e5c:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8007e60:	4323      	orrs	r3, r4
 8007e62:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007e6a:	68bb      	ldr	r3, [r7, #8]
 8007e6c:	009b      	lsls	r3, r3, #2
 8007e6e:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8007e72:	4413      	add	r3, r2
 8007e74:	6879      	ldr	r1, [r7, #4]
 8007e76:	4618      	mov	r0, r3
 8007e78:	f7ff fb6a 	bl	8007550 <st_dword>
			fs->wflag = 1;
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	2201      	movs	r2, #1
 8007e80:	70da      	strb	r2, [r3, #3]
			break;
 8007e82:	e006      	b.n	8007e92 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8007e84:	bf00      	nop
 8007e86:	e004      	b.n	8007e92 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8007e88:	bf00      	nop
 8007e8a:	e002      	b.n	8007e92 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8007e8c:	bf00      	nop
 8007e8e:	e000      	b.n	8007e92 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8007e90:	bf00      	nop
		}
	}
	return res;
 8007e92:	7ffb      	ldrb	r3, [r7, #31]
}
 8007e94:	4618      	mov	r0, r3
 8007e96:	3724      	adds	r7, #36	@ 0x24
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	bd90      	pop	{r4, r7, pc}

08007e9c <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	b088      	sub	sp, #32
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	60f8      	str	r0, [r7, #12]
 8007ea4:	60b9      	str	r1, [r7, #8]
 8007ea6:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8007eb2:	68bb      	ldr	r3, [r7, #8]
 8007eb4:	2b01      	cmp	r3, #1
 8007eb6:	d904      	bls.n	8007ec2 <remove_chain+0x26>
 8007eb8:	69bb      	ldr	r3, [r7, #24]
 8007eba:	695b      	ldr	r3, [r3, #20]
 8007ebc:	68ba      	ldr	r2, [r7, #8]
 8007ebe:	429a      	cmp	r2, r3
 8007ec0:	d301      	bcc.n	8007ec6 <remove_chain+0x2a>
 8007ec2:	2302      	movs	r3, #2
 8007ec4:	e04b      	b.n	8007f5e <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d00c      	beq.n	8007ee6 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8007ecc:	f04f 32ff 	mov.w	r2, #4294967295
 8007ed0:	6879      	ldr	r1, [r7, #4]
 8007ed2:	69b8      	ldr	r0, [r7, #24]
 8007ed4:	f7ff fef8 	bl	8007cc8 <put_fat>
 8007ed8:	4603      	mov	r3, r0
 8007eda:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8007edc:	7ffb      	ldrb	r3, [r7, #31]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d001      	beq.n	8007ee6 <remove_chain+0x4a>
 8007ee2:	7ffb      	ldrb	r3, [r7, #31]
 8007ee4:	e03b      	b.n	8007f5e <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8007ee6:	68b9      	ldr	r1, [r7, #8]
 8007ee8:	68f8      	ldr	r0, [r7, #12]
 8007eea:	f7ff fe46 	bl	8007b7a <get_fat>
 8007eee:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8007ef0:	697b      	ldr	r3, [r7, #20]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d031      	beq.n	8007f5a <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8007ef6:	697b      	ldr	r3, [r7, #20]
 8007ef8:	2b01      	cmp	r3, #1
 8007efa:	d101      	bne.n	8007f00 <remove_chain+0x64>
 8007efc:	2302      	movs	r3, #2
 8007efe:	e02e      	b.n	8007f5e <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8007f00:	697b      	ldr	r3, [r7, #20]
 8007f02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f06:	d101      	bne.n	8007f0c <remove_chain+0x70>
 8007f08:	2301      	movs	r3, #1
 8007f0a:	e028      	b.n	8007f5e <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8007f0c:	2200      	movs	r2, #0
 8007f0e:	68b9      	ldr	r1, [r7, #8]
 8007f10:	69b8      	ldr	r0, [r7, #24]
 8007f12:	f7ff fed9 	bl	8007cc8 <put_fat>
 8007f16:	4603      	mov	r3, r0
 8007f18:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8007f1a:	7ffb      	ldrb	r3, [r7, #31]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d001      	beq.n	8007f24 <remove_chain+0x88>
 8007f20:	7ffb      	ldrb	r3, [r7, #31]
 8007f22:	e01c      	b.n	8007f5e <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8007f24:	69bb      	ldr	r3, [r7, #24]
 8007f26:	691a      	ldr	r2, [r3, #16]
 8007f28:	69bb      	ldr	r3, [r7, #24]
 8007f2a:	695b      	ldr	r3, [r3, #20]
 8007f2c:	3b02      	subs	r3, #2
 8007f2e:	429a      	cmp	r2, r3
 8007f30:	d20b      	bcs.n	8007f4a <remove_chain+0xae>
			fs->free_clst++;
 8007f32:	69bb      	ldr	r3, [r7, #24]
 8007f34:	691b      	ldr	r3, [r3, #16]
 8007f36:	1c5a      	adds	r2, r3, #1
 8007f38:	69bb      	ldr	r3, [r7, #24]
 8007f3a:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8007f3c:	69bb      	ldr	r3, [r7, #24]
 8007f3e:	791b      	ldrb	r3, [r3, #4]
 8007f40:	f043 0301 	orr.w	r3, r3, #1
 8007f44:	b2da      	uxtb	r2, r3
 8007f46:	69bb      	ldr	r3, [r7, #24]
 8007f48:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8007f4a:	697b      	ldr	r3, [r7, #20]
 8007f4c:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8007f4e:	69bb      	ldr	r3, [r7, #24]
 8007f50:	695b      	ldr	r3, [r3, #20]
 8007f52:	68ba      	ldr	r2, [r7, #8]
 8007f54:	429a      	cmp	r2, r3
 8007f56:	d3c6      	bcc.n	8007ee6 <remove_chain+0x4a>
 8007f58:	e000      	b.n	8007f5c <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8007f5a:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8007f5c:	2300      	movs	r3, #0
}
 8007f5e:	4618      	mov	r0, r3
 8007f60:	3720      	adds	r7, #32
 8007f62:	46bd      	mov	sp, r7
 8007f64:	bd80      	pop	{r7, pc}

08007f66 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8007f66:	b580      	push	{r7, lr}
 8007f68:	b088      	sub	sp, #32
 8007f6a:	af00      	add	r7, sp, #0
 8007f6c:	6078      	str	r0, [r7, #4]
 8007f6e:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8007f76:	683b      	ldr	r3, [r7, #0]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d10d      	bne.n	8007f98 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8007f7c:	693b      	ldr	r3, [r7, #16]
 8007f7e:	68db      	ldr	r3, [r3, #12]
 8007f80:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8007f82:	69bb      	ldr	r3, [r7, #24]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d004      	beq.n	8007f92 <create_chain+0x2c>
 8007f88:	693b      	ldr	r3, [r7, #16]
 8007f8a:	695b      	ldr	r3, [r3, #20]
 8007f8c:	69ba      	ldr	r2, [r7, #24]
 8007f8e:	429a      	cmp	r2, r3
 8007f90:	d31b      	bcc.n	8007fca <create_chain+0x64>
 8007f92:	2301      	movs	r3, #1
 8007f94:	61bb      	str	r3, [r7, #24]
 8007f96:	e018      	b.n	8007fca <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8007f98:	6839      	ldr	r1, [r7, #0]
 8007f9a:	6878      	ldr	r0, [r7, #4]
 8007f9c:	f7ff fded 	bl	8007b7a <get_fat>
 8007fa0:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	2b01      	cmp	r3, #1
 8007fa6:	d801      	bhi.n	8007fac <create_chain+0x46>
 8007fa8:	2301      	movs	r3, #1
 8007faa:	e070      	b.n	800808e <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fb2:	d101      	bne.n	8007fb8 <create_chain+0x52>
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	e06a      	b.n	800808e <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8007fb8:	693b      	ldr	r3, [r7, #16]
 8007fba:	695b      	ldr	r3, [r3, #20]
 8007fbc:	68fa      	ldr	r2, [r7, #12]
 8007fbe:	429a      	cmp	r2, r3
 8007fc0:	d201      	bcs.n	8007fc6 <create_chain+0x60>
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	e063      	b.n	800808e <create_chain+0x128>
		scl = clst;
 8007fc6:	683b      	ldr	r3, [r7, #0]
 8007fc8:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8007fca:	69bb      	ldr	r3, [r7, #24]
 8007fcc:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8007fce:	69fb      	ldr	r3, [r7, #28]
 8007fd0:	3301      	adds	r3, #1
 8007fd2:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8007fd4:	693b      	ldr	r3, [r7, #16]
 8007fd6:	695b      	ldr	r3, [r3, #20]
 8007fd8:	69fa      	ldr	r2, [r7, #28]
 8007fda:	429a      	cmp	r2, r3
 8007fdc:	d307      	bcc.n	8007fee <create_chain+0x88>
				ncl = 2;
 8007fde:	2302      	movs	r3, #2
 8007fe0:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8007fe2:	69fa      	ldr	r2, [r7, #28]
 8007fe4:	69bb      	ldr	r3, [r7, #24]
 8007fe6:	429a      	cmp	r2, r3
 8007fe8:	d901      	bls.n	8007fee <create_chain+0x88>
 8007fea:	2300      	movs	r3, #0
 8007fec:	e04f      	b.n	800808e <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8007fee:	69f9      	ldr	r1, [r7, #28]
 8007ff0:	6878      	ldr	r0, [r7, #4]
 8007ff2:	f7ff fdc2 	bl	8007b7a <get_fat>
 8007ff6:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d00e      	beq.n	800801c <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	2b01      	cmp	r3, #1
 8008002:	d003      	beq.n	800800c <create_chain+0xa6>
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	f1b3 3fff 	cmp.w	r3, #4294967295
 800800a:	d101      	bne.n	8008010 <create_chain+0xaa>
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	e03e      	b.n	800808e <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8008010:	69fa      	ldr	r2, [r7, #28]
 8008012:	69bb      	ldr	r3, [r7, #24]
 8008014:	429a      	cmp	r2, r3
 8008016:	d1da      	bne.n	8007fce <create_chain+0x68>
 8008018:	2300      	movs	r3, #0
 800801a:	e038      	b.n	800808e <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800801c:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800801e:	f04f 32ff 	mov.w	r2, #4294967295
 8008022:	69f9      	ldr	r1, [r7, #28]
 8008024:	6938      	ldr	r0, [r7, #16]
 8008026:	f7ff fe4f 	bl	8007cc8 <put_fat>
 800802a:	4603      	mov	r3, r0
 800802c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800802e:	7dfb      	ldrb	r3, [r7, #23]
 8008030:	2b00      	cmp	r3, #0
 8008032:	d109      	bne.n	8008048 <create_chain+0xe2>
 8008034:	683b      	ldr	r3, [r7, #0]
 8008036:	2b00      	cmp	r3, #0
 8008038:	d006      	beq.n	8008048 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800803a:	69fa      	ldr	r2, [r7, #28]
 800803c:	6839      	ldr	r1, [r7, #0]
 800803e:	6938      	ldr	r0, [r7, #16]
 8008040:	f7ff fe42 	bl	8007cc8 <put_fat>
 8008044:	4603      	mov	r3, r0
 8008046:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8008048:	7dfb      	ldrb	r3, [r7, #23]
 800804a:	2b00      	cmp	r3, #0
 800804c:	d116      	bne.n	800807c <create_chain+0x116>
		fs->last_clst = ncl;
 800804e:	693b      	ldr	r3, [r7, #16]
 8008050:	69fa      	ldr	r2, [r7, #28]
 8008052:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8008054:	693b      	ldr	r3, [r7, #16]
 8008056:	691a      	ldr	r2, [r3, #16]
 8008058:	693b      	ldr	r3, [r7, #16]
 800805a:	695b      	ldr	r3, [r3, #20]
 800805c:	3b02      	subs	r3, #2
 800805e:	429a      	cmp	r2, r3
 8008060:	d804      	bhi.n	800806c <create_chain+0x106>
 8008062:	693b      	ldr	r3, [r7, #16]
 8008064:	691b      	ldr	r3, [r3, #16]
 8008066:	1e5a      	subs	r2, r3, #1
 8008068:	693b      	ldr	r3, [r7, #16]
 800806a:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800806c:	693b      	ldr	r3, [r7, #16]
 800806e:	791b      	ldrb	r3, [r3, #4]
 8008070:	f043 0301 	orr.w	r3, r3, #1
 8008074:	b2da      	uxtb	r2, r3
 8008076:	693b      	ldr	r3, [r7, #16]
 8008078:	711a      	strb	r2, [r3, #4]
 800807a:	e007      	b.n	800808c <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800807c:	7dfb      	ldrb	r3, [r7, #23]
 800807e:	2b01      	cmp	r3, #1
 8008080:	d102      	bne.n	8008088 <create_chain+0x122>
 8008082:	f04f 33ff 	mov.w	r3, #4294967295
 8008086:	e000      	b.n	800808a <create_chain+0x124>
 8008088:	2301      	movs	r3, #1
 800808a:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800808c:	69fb      	ldr	r3, [r7, #28]
}
 800808e:	4618      	mov	r0, r3
 8008090:	3720      	adds	r7, #32
 8008092:	46bd      	mov	sp, r7
 8008094:	bd80      	pop	{r7, pc}

08008096 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8008096:	b480      	push	{r7}
 8008098:	b087      	sub	sp, #28
 800809a:	af00      	add	r7, sp, #0
 800809c:	6078      	str	r0, [r7, #4]
 800809e:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080aa:	3304      	adds	r3, #4
 80080ac:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80080ae:	683b      	ldr	r3, [r7, #0]
 80080b0:	0a5b      	lsrs	r3, r3, #9
 80080b2:	68fa      	ldr	r2, [r7, #12]
 80080b4:	8952      	ldrh	r2, [r2, #10]
 80080b6:	fbb3 f3f2 	udiv	r3, r3, r2
 80080ba:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80080bc:	693b      	ldr	r3, [r7, #16]
 80080be:	1d1a      	adds	r2, r3, #4
 80080c0:	613a      	str	r2, [r7, #16]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80080c6:	68bb      	ldr	r3, [r7, #8]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d101      	bne.n	80080d0 <clmt_clust+0x3a>
 80080cc:	2300      	movs	r3, #0
 80080ce:	e010      	b.n	80080f2 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 80080d0:	697a      	ldr	r2, [r7, #20]
 80080d2:	68bb      	ldr	r3, [r7, #8]
 80080d4:	429a      	cmp	r2, r3
 80080d6:	d307      	bcc.n	80080e8 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 80080d8:	697a      	ldr	r2, [r7, #20]
 80080da:	68bb      	ldr	r3, [r7, #8]
 80080dc:	1ad3      	subs	r3, r2, r3
 80080de:	617b      	str	r3, [r7, #20]
 80080e0:	693b      	ldr	r3, [r7, #16]
 80080e2:	3304      	adds	r3, #4
 80080e4:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80080e6:	e7e9      	b.n	80080bc <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 80080e8:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80080ea:	693b      	ldr	r3, [r7, #16]
 80080ec:	681a      	ldr	r2, [r3, #0]
 80080ee:	697b      	ldr	r3, [r7, #20]
 80080f0:	4413      	add	r3, r2
}
 80080f2:	4618      	mov	r0, r3
 80080f4:	371c      	adds	r7, #28
 80080f6:	46bd      	mov	sp, r7
 80080f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fc:	4770      	bx	lr

080080fe <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80080fe:	b580      	push	{r7, lr}
 8008100:	b086      	sub	sp, #24
 8008102:	af00      	add	r7, sp, #0
 8008104:	6078      	str	r0, [r7, #4]
 8008106:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800810e:	683b      	ldr	r3, [r7, #0]
 8008110:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008114:	d204      	bcs.n	8008120 <dir_sdi+0x22>
 8008116:	683b      	ldr	r3, [r7, #0]
 8008118:	f003 031f 	and.w	r3, r3, #31
 800811c:	2b00      	cmp	r3, #0
 800811e:	d001      	beq.n	8008124 <dir_sdi+0x26>
		return FR_INT_ERR;
 8008120:	2302      	movs	r3, #2
 8008122:	e063      	b.n	80081ec <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	683a      	ldr	r2, [r7, #0]
 8008128:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	689b      	ldr	r3, [r3, #8]
 800812e:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8008130:	697b      	ldr	r3, [r7, #20]
 8008132:	2b00      	cmp	r3, #0
 8008134:	d106      	bne.n	8008144 <dir_sdi+0x46>
 8008136:	693b      	ldr	r3, [r7, #16]
 8008138:	781b      	ldrb	r3, [r3, #0]
 800813a:	2b02      	cmp	r3, #2
 800813c:	d902      	bls.n	8008144 <dir_sdi+0x46>
		clst = fs->dirbase;
 800813e:	693b      	ldr	r3, [r7, #16]
 8008140:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008142:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8008144:	697b      	ldr	r3, [r7, #20]
 8008146:	2b00      	cmp	r3, #0
 8008148:	d10c      	bne.n	8008164 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800814a:	683b      	ldr	r3, [r7, #0]
 800814c:	095b      	lsrs	r3, r3, #5
 800814e:	693a      	ldr	r2, [r7, #16]
 8008150:	8912      	ldrh	r2, [r2, #8]
 8008152:	4293      	cmp	r3, r2
 8008154:	d301      	bcc.n	800815a <dir_sdi+0x5c>
 8008156:	2302      	movs	r3, #2
 8008158:	e048      	b.n	80081ec <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800815a:	693b      	ldr	r3, [r7, #16]
 800815c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	61da      	str	r2, [r3, #28]
 8008162:	e029      	b.n	80081b8 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8008164:	693b      	ldr	r3, [r7, #16]
 8008166:	895b      	ldrh	r3, [r3, #10]
 8008168:	025b      	lsls	r3, r3, #9
 800816a:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800816c:	e019      	b.n	80081a2 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	6979      	ldr	r1, [r7, #20]
 8008172:	4618      	mov	r0, r3
 8008174:	f7ff fd01 	bl	8007b7a <get_fat>
 8008178:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800817a:	697b      	ldr	r3, [r7, #20]
 800817c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008180:	d101      	bne.n	8008186 <dir_sdi+0x88>
 8008182:	2301      	movs	r3, #1
 8008184:	e032      	b.n	80081ec <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8008186:	697b      	ldr	r3, [r7, #20]
 8008188:	2b01      	cmp	r3, #1
 800818a:	d904      	bls.n	8008196 <dir_sdi+0x98>
 800818c:	693b      	ldr	r3, [r7, #16]
 800818e:	695b      	ldr	r3, [r3, #20]
 8008190:	697a      	ldr	r2, [r7, #20]
 8008192:	429a      	cmp	r2, r3
 8008194:	d301      	bcc.n	800819a <dir_sdi+0x9c>
 8008196:	2302      	movs	r3, #2
 8008198:	e028      	b.n	80081ec <dir_sdi+0xee>
			ofs -= csz;
 800819a:	683a      	ldr	r2, [r7, #0]
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	1ad3      	subs	r3, r2, r3
 80081a0:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80081a2:	683a      	ldr	r2, [r7, #0]
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	429a      	cmp	r2, r3
 80081a8:	d2e1      	bcs.n	800816e <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 80081aa:	6979      	ldr	r1, [r7, #20]
 80081ac:	6938      	ldr	r0, [r7, #16]
 80081ae:	f7ff fcc5 	bl	8007b3c <clust2sect>
 80081b2:	4602      	mov	r2, r0
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	697a      	ldr	r2, [r7, #20]
 80081bc:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	69db      	ldr	r3, [r3, #28]
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d101      	bne.n	80081ca <dir_sdi+0xcc>
 80081c6:	2302      	movs	r3, #2
 80081c8:	e010      	b.n	80081ec <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	69da      	ldr	r2, [r3, #28]
 80081ce:	683b      	ldr	r3, [r7, #0]
 80081d0:	0a5b      	lsrs	r3, r3, #9
 80081d2:	441a      	add	r2, r3
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80081d8:	693b      	ldr	r3, [r7, #16]
 80081da:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80081de:	683b      	ldr	r3, [r7, #0]
 80081e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081e4:	441a      	add	r2, r3
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80081ea:	2300      	movs	r3, #0
}
 80081ec:	4618      	mov	r0, r3
 80081ee:	3718      	adds	r7, #24
 80081f0:	46bd      	mov	sp, r7
 80081f2:	bd80      	pop	{r7, pc}

080081f4 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80081f4:	b580      	push	{r7, lr}
 80081f6:	b086      	sub	sp, #24
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
 80081fc:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	695b      	ldr	r3, [r3, #20]
 8008208:	3320      	adds	r3, #32
 800820a:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	69db      	ldr	r3, [r3, #28]
 8008210:	2b00      	cmp	r3, #0
 8008212:	d003      	beq.n	800821c <dir_next+0x28>
 8008214:	68bb      	ldr	r3, [r7, #8]
 8008216:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800821a:	d301      	bcc.n	8008220 <dir_next+0x2c>
 800821c:	2304      	movs	r3, #4
 800821e:	e0aa      	b.n	8008376 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8008220:	68bb      	ldr	r3, [r7, #8]
 8008222:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008226:	2b00      	cmp	r3, #0
 8008228:	f040 8098 	bne.w	800835c <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	69db      	ldr	r3, [r3, #28]
 8008230:	1c5a      	adds	r2, r3, #1
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	699b      	ldr	r3, [r3, #24]
 800823a:	2b00      	cmp	r3, #0
 800823c:	d10b      	bne.n	8008256 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800823e:	68bb      	ldr	r3, [r7, #8]
 8008240:	095b      	lsrs	r3, r3, #5
 8008242:	68fa      	ldr	r2, [r7, #12]
 8008244:	8912      	ldrh	r2, [r2, #8]
 8008246:	4293      	cmp	r3, r2
 8008248:	f0c0 8088 	bcc.w	800835c <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	2200      	movs	r2, #0
 8008250:	61da      	str	r2, [r3, #28]
 8008252:	2304      	movs	r3, #4
 8008254:	e08f      	b.n	8008376 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8008256:	68bb      	ldr	r3, [r7, #8]
 8008258:	0a5b      	lsrs	r3, r3, #9
 800825a:	68fa      	ldr	r2, [r7, #12]
 800825c:	8952      	ldrh	r2, [r2, #10]
 800825e:	3a01      	subs	r2, #1
 8008260:	4013      	ands	r3, r2
 8008262:	2b00      	cmp	r3, #0
 8008264:	d17a      	bne.n	800835c <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8008266:	687a      	ldr	r2, [r7, #4]
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	699b      	ldr	r3, [r3, #24]
 800826c:	4619      	mov	r1, r3
 800826e:	4610      	mov	r0, r2
 8008270:	f7ff fc83 	bl	8007b7a <get_fat>
 8008274:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8008276:	697b      	ldr	r3, [r7, #20]
 8008278:	2b01      	cmp	r3, #1
 800827a:	d801      	bhi.n	8008280 <dir_next+0x8c>
 800827c:	2302      	movs	r3, #2
 800827e:	e07a      	b.n	8008376 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8008280:	697b      	ldr	r3, [r7, #20]
 8008282:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008286:	d101      	bne.n	800828c <dir_next+0x98>
 8008288:	2301      	movs	r3, #1
 800828a:	e074      	b.n	8008376 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	695b      	ldr	r3, [r3, #20]
 8008290:	697a      	ldr	r2, [r7, #20]
 8008292:	429a      	cmp	r2, r3
 8008294:	d358      	bcc.n	8008348 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8008296:	683b      	ldr	r3, [r7, #0]
 8008298:	2b00      	cmp	r3, #0
 800829a:	d104      	bne.n	80082a6 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	2200      	movs	r2, #0
 80082a0:	61da      	str	r2, [r3, #28]
 80082a2:	2304      	movs	r3, #4
 80082a4:	e067      	b.n	8008376 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80082a6:	687a      	ldr	r2, [r7, #4]
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	699b      	ldr	r3, [r3, #24]
 80082ac:	4619      	mov	r1, r3
 80082ae:	4610      	mov	r0, r2
 80082b0:	f7ff fe59 	bl	8007f66 <create_chain>
 80082b4:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80082b6:	697b      	ldr	r3, [r7, #20]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d101      	bne.n	80082c0 <dir_next+0xcc>
 80082bc:	2307      	movs	r3, #7
 80082be:	e05a      	b.n	8008376 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80082c0:	697b      	ldr	r3, [r7, #20]
 80082c2:	2b01      	cmp	r3, #1
 80082c4:	d101      	bne.n	80082ca <dir_next+0xd6>
 80082c6:	2302      	movs	r3, #2
 80082c8:	e055      	b.n	8008376 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80082ca:	697b      	ldr	r3, [r7, #20]
 80082cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082d0:	d101      	bne.n	80082d6 <dir_next+0xe2>
 80082d2:	2301      	movs	r3, #1
 80082d4:	e04f      	b.n	8008376 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80082d6:	68f8      	ldr	r0, [r7, #12]
 80082d8:	f7ff fb50 	bl	800797c <sync_window>
 80082dc:	4603      	mov	r3, r0
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d001      	beq.n	80082e6 <dir_next+0xf2>
 80082e2:	2301      	movs	r3, #1
 80082e4:	e047      	b.n	8008376 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	3330      	adds	r3, #48	@ 0x30
 80082ea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80082ee:	2100      	movs	r1, #0
 80082f0:	4618      	mov	r0, r3
 80082f2:	f7ff f97a 	bl	80075ea <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80082f6:	2300      	movs	r3, #0
 80082f8:	613b      	str	r3, [r7, #16]
 80082fa:	6979      	ldr	r1, [r7, #20]
 80082fc:	68f8      	ldr	r0, [r7, #12]
 80082fe:	f7ff fc1d 	bl	8007b3c <clust2sect>
 8008302:	4602      	mov	r2, r0
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	62da      	str	r2, [r3, #44]	@ 0x2c
 8008308:	e012      	b.n	8008330 <dir_next+0x13c>
						fs->wflag = 1;
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	2201      	movs	r2, #1
 800830e:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8008310:	68f8      	ldr	r0, [r7, #12]
 8008312:	f7ff fb33 	bl	800797c <sync_window>
 8008316:	4603      	mov	r3, r0
 8008318:	2b00      	cmp	r3, #0
 800831a:	d001      	beq.n	8008320 <dir_next+0x12c>
 800831c:	2301      	movs	r3, #1
 800831e:	e02a      	b.n	8008376 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008320:	693b      	ldr	r3, [r7, #16]
 8008322:	3301      	adds	r3, #1
 8008324:	613b      	str	r3, [r7, #16]
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800832a:	1c5a      	adds	r2, r3, #1
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	895b      	ldrh	r3, [r3, #10]
 8008334:	461a      	mov	r2, r3
 8008336:	693b      	ldr	r3, [r7, #16]
 8008338:	4293      	cmp	r3, r2
 800833a:	d3e6      	bcc.n	800830a <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008340:	693b      	ldr	r3, [r7, #16]
 8008342:	1ad2      	subs	r2, r2, r3
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	697a      	ldr	r2, [r7, #20]
 800834c:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800834e:	6979      	ldr	r1, [r7, #20]
 8008350:	68f8      	ldr	r0, [r7, #12]
 8008352:	f7ff fbf3 	bl	8007b3c <clust2sect>
 8008356:	4602      	mov	r2, r0
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	68ba      	ldr	r2, [r7, #8]
 8008360:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008368:	68bb      	ldr	r3, [r7, #8]
 800836a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800836e:	441a      	add	r2, r3
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8008374:	2300      	movs	r3, #0
}
 8008376:	4618      	mov	r0, r3
 8008378:	3718      	adds	r7, #24
 800837a:	46bd      	mov	sp, r7
 800837c:	bd80      	pop	{r7, pc}

0800837e <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800837e:	b580      	push	{r7, lr}
 8008380:	b086      	sub	sp, #24
 8008382:	af00      	add	r7, sp, #0
 8008384:	6078      	str	r0, [r7, #4]
 8008386:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800838e:	2100      	movs	r1, #0
 8008390:	6878      	ldr	r0, [r7, #4]
 8008392:	f7ff feb4 	bl	80080fe <dir_sdi>
 8008396:	4603      	mov	r3, r0
 8008398:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800839a:	7dfb      	ldrb	r3, [r7, #23]
 800839c:	2b00      	cmp	r3, #0
 800839e:	d12b      	bne.n	80083f8 <dir_alloc+0x7a>
		n = 0;
 80083a0:	2300      	movs	r3, #0
 80083a2:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	69db      	ldr	r3, [r3, #28]
 80083a8:	4619      	mov	r1, r3
 80083aa:	68f8      	ldr	r0, [r7, #12]
 80083ac:	f7ff fb2a 	bl	8007a04 <move_window>
 80083b0:	4603      	mov	r3, r0
 80083b2:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80083b4:	7dfb      	ldrb	r3, [r7, #23]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d11d      	bne.n	80083f6 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	6a1b      	ldr	r3, [r3, #32]
 80083be:	781b      	ldrb	r3, [r3, #0]
 80083c0:	2be5      	cmp	r3, #229	@ 0xe5
 80083c2:	d004      	beq.n	80083ce <dir_alloc+0x50>
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	6a1b      	ldr	r3, [r3, #32]
 80083c8:	781b      	ldrb	r3, [r3, #0]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d107      	bne.n	80083de <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80083ce:	693b      	ldr	r3, [r7, #16]
 80083d0:	3301      	adds	r3, #1
 80083d2:	613b      	str	r3, [r7, #16]
 80083d4:	693a      	ldr	r2, [r7, #16]
 80083d6:	683b      	ldr	r3, [r7, #0]
 80083d8:	429a      	cmp	r2, r3
 80083da:	d102      	bne.n	80083e2 <dir_alloc+0x64>
 80083dc:	e00c      	b.n	80083f8 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80083de:	2300      	movs	r3, #0
 80083e0:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80083e2:	2101      	movs	r1, #1
 80083e4:	6878      	ldr	r0, [r7, #4]
 80083e6:	f7ff ff05 	bl	80081f4 <dir_next>
 80083ea:	4603      	mov	r3, r0
 80083ec:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80083ee:	7dfb      	ldrb	r3, [r7, #23]
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d0d7      	beq.n	80083a4 <dir_alloc+0x26>
 80083f4:	e000      	b.n	80083f8 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80083f6:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80083f8:	7dfb      	ldrb	r3, [r7, #23]
 80083fa:	2b04      	cmp	r3, #4
 80083fc:	d101      	bne.n	8008402 <dir_alloc+0x84>
 80083fe:	2307      	movs	r3, #7
 8008400:	75fb      	strb	r3, [r7, #23]
	return res;
 8008402:	7dfb      	ldrb	r3, [r7, #23]
}
 8008404:	4618      	mov	r0, r3
 8008406:	3718      	adds	r7, #24
 8008408:	46bd      	mov	sp, r7
 800840a:	bd80      	pop	{r7, pc}

0800840c <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800840c:	b580      	push	{r7, lr}
 800840e:	b084      	sub	sp, #16
 8008410:	af00      	add	r7, sp, #0
 8008412:	6078      	str	r0, [r7, #4]
 8008414:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8008416:	683b      	ldr	r3, [r7, #0]
 8008418:	331a      	adds	r3, #26
 800841a:	4618      	mov	r0, r3
 800841c:	f7ff f842 	bl	80074a4 <ld_word>
 8008420:	4603      	mov	r3, r0
 8008422:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	781b      	ldrb	r3, [r3, #0]
 8008428:	2b03      	cmp	r3, #3
 800842a:	d109      	bne.n	8008440 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800842c:	683b      	ldr	r3, [r7, #0]
 800842e:	3314      	adds	r3, #20
 8008430:	4618      	mov	r0, r3
 8008432:	f7ff f837 	bl	80074a4 <ld_word>
 8008436:	4603      	mov	r3, r0
 8008438:	041b      	lsls	r3, r3, #16
 800843a:	68fa      	ldr	r2, [r7, #12]
 800843c:	4313      	orrs	r3, r2
 800843e:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8008440:	68fb      	ldr	r3, [r7, #12]
}
 8008442:	4618      	mov	r0, r3
 8008444:	3710      	adds	r7, #16
 8008446:	46bd      	mov	sp, r7
 8008448:	bd80      	pop	{r7, pc}

0800844a <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800844a:	b580      	push	{r7, lr}
 800844c:	b084      	sub	sp, #16
 800844e:	af00      	add	r7, sp, #0
 8008450:	60f8      	str	r0, [r7, #12]
 8008452:	60b9      	str	r1, [r7, #8]
 8008454:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8008456:	68bb      	ldr	r3, [r7, #8]
 8008458:	331a      	adds	r3, #26
 800845a:	687a      	ldr	r2, [r7, #4]
 800845c:	b292      	uxth	r2, r2
 800845e:	4611      	mov	r1, r2
 8008460:	4618      	mov	r0, r3
 8008462:	f7ff f85a 	bl	800751a <st_word>
	if (fs->fs_type == FS_FAT32) {
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	781b      	ldrb	r3, [r3, #0]
 800846a:	2b03      	cmp	r3, #3
 800846c:	d109      	bne.n	8008482 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800846e:	68bb      	ldr	r3, [r7, #8]
 8008470:	f103 0214 	add.w	r2, r3, #20
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	0c1b      	lsrs	r3, r3, #16
 8008478:	b29b      	uxth	r3, r3
 800847a:	4619      	mov	r1, r3
 800847c:	4610      	mov	r0, r2
 800847e:	f7ff f84c 	bl	800751a <st_word>
	}
}
 8008482:	bf00      	nop
 8008484:	3710      	adds	r7, #16
 8008486:	46bd      	mov	sp, r7
 8008488:	bd80      	pop	{r7, pc}

0800848a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800848a:	b580      	push	{r7, lr}
 800848c:	b086      	sub	sp, #24
 800848e:	af00      	add	r7, sp, #0
 8008490:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8008498:	2100      	movs	r1, #0
 800849a:	6878      	ldr	r0, [r7, #4]
 800849c:	f7ff fe2f 	bl	80080fe <dir_sdi>
 80084a0:	4603      	mov	r3, r0
 80084a2:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80084a4:	7dfb      	ldrb	r3, [r7, #23]
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d001      	beq.n	80084ae <dir_find+0x24>
 80084aa:	7dfb      	ldrb	r3, [r7, #23]
 80084ac:	e03e      	b.n	800852c <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	69db      	ldr	r3, [r3, #28]
 80084b2:	4619      	mov	r1, r3
 80084b4:	6938      	ldr	r0, [r7, #16]
 80084b6:	f7ff faa5 	bl	8007a04 <move_window>
 80084ba:	4603      	mov	r3, r0
 80084bc:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80084be:	7dfb      	ldrb	r3, [r7, #23]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d12f      	bne.n	8008524 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	6a1b      	ldr	r3, [r3, #32]
 80084c8:	781b      	ldrb	r3, [r3, #0]
 80084ca:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80084cc:	7bfb      	ldrb	r3, [r7, #15]
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d102      	bne.n	80084d8 <dir_find+0x4e>
 80084d2:	2304      	movs	r3, #4
 80084d4:	75fb      	strb	r3, [r7, #23]
 80084d6:	e028      	b.n	800852a <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	6a1b      	ldr	r3, [r3, #32]
 80084dc:	330b      	adds	r3, #11
 80084de:	781b      	ldrb	r3, [r3, #0]
 80084e0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80084e4:	b2da      	uxtb	r2, r3
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	6a1b      	ldr	r3, [r3, #32]
 80084ee:	330b      	adds	r3, #11
 80084f0:	781b      	ldrb	r3, [r3, #0]
 80084f2:	f003 0308 	and.w	r3, r3, #8
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d10a      	bne.n	8008510 <dir_find+0x86>
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	6a18      	ldr	r0, [r3, #32]
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	3324      	adds	r3, #36	@ 0x24
 8008502:	220b      	movs	r2, #11
 8008504:	4619      	mov	r1, r3
 8008506:	f7ff f88b 	bl	8007620 <mem_cmp>
 800850a:	4603      	mov	r3, r0
 800850c:	2b00      	cmp	r3, #0
 800850e:	d00b      	beq.n	8008528 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8008510:	2100      	movs	r1, #0
 8008512:	6878      	ldr	r0, [r7, #4]
 8008514:	f7ff fe6e 	bl	80081f4 <dir_next>
 8008518:	4603      	mov	r3, r0
 800851a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800851c:	7dfb      	ldrb	r3, [r7, #23]
 800851e:	2b00      	cmp	r3, #0
 8008520:	d0c5      	beq.n	80084ae <dir_find+0x24>
 8008522:	e002      	b.n	800852a <dir_find+0xa0>
		if (res != FR_OK) break;
 8008524:	bf00      	nop
 8008526:	e000      	b.n	800852a <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8008528:	bf00      	nop

	return res;
 800852a:	7dfb      	ldrb	r3, [r7, #23]
}
 800852c:	4618      	mov	r0, r3
 800852e:	3718      	adds	r7, #24
 8008530:	46bd      	mov	sp, r7
 8008532:	bd80      	pop	{r7, pc}

08008534 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8008534:	b580      	push	{r7, lr}
 8008536:	b084      	sub	sp, #16
 8008538:	af00      	add	r7, sp, #0
 800853a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8008542:	2101      	movs	r1, #1
 8008544:	6878      	ldr	r0, [r7, #4]
 8008546:	f7ff ff1a 	bl	800837e <dir_alloc>
 800854a:	4603      	mov	r3, r0
 800854c:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800854e:	7bfb      	ldrb	r3, [r7, #15]
 8008550:	2b00      	cmp	r3, #0
 8008552:	d11c      	bne.n	800858e <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	69db      	ldr	r3, [r3, #28]
 8008558:	4619      	mov	r1, r3
 800855a:	68b8      	ldr	r0, [r7, #8]
 800855c:	f7ff fa52 	bl	8007a04 <move_window>
 8008560:	4603      	mov	r3, r0
 8008562:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008564:	7bfb      	ldrb	r3, [r7, #15]
 8008566:	2b00      	cmp	r3, #0
 8008568:	d111      	bne.n	800858e <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	6a1b      	ldr	r3, [r3, #32]
 800856e:	2220      	movs	r2, #32
 8008570:	2100      	movs	r1, #0
 8008572:	4618      	mov	r0, r3
 8008574:	f7ff f839 	bl	80075ea <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	6a18      	ldr	r0, [r3, #32]
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	3324      	adds	r3, #36	@ 0x24
 8008580:	220b      	movs	r2, #11
 8008582:	4619      	mov	r1, r3
 8008584:	f7ff f810 	bl	80075a8 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8008588:	68bb      	ldr	r3, [r7, #8]
 800858a:	2201      	movs	r2, #1
 800858c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800858e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008590:	4618      	mov	r0, r3
 8008592:	3710      	adds	r7, #16
 8008594:	46bd      	mov	sp, r7
 8008596:	bd80      	pop	{r7, pc}

08008598 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8008598:	b580      	push	{r7, lr}
 800859a:	b088      	sub	sp, #32
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
 80085a0:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 80085a2:	683b      	ldr	r3, [r7, #0]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	60fb      	str	r3, [r7, #12]
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	3324      	adds	r3, #36	@ 0x24
 80085ac:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80085ae:	220b      	movs	r2, #11
 80085b0:	2120      	movs	r1, #32
 80085b2:	68b8      	ldr	r0, [r7, #8]
 80085b4:	f7ff f819 	bl	80075ea <mem_set>
	si = i = 0; ni = 8;
 80085b8:	2300      	movs	r3, #0
 80085ba:	613b      	str	r3, [r7, #16]
 80085bc:	693b      	ldr	r3, [r7, #16]
 80085be:	61fb      	str	r3, [r7, #28]
 80085c0:	2308      	movs	r3, #8
 80085c2:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80085c4:	69fb      	ldr	r3, [r7, #28]
 80085c6:	1c5a      	adds	r2, r3, #1
 80085c8:	61fa      	str	r2, [r7, #28]
 80085ca:	68fa      	ldr	r2, [r7, #12]
 80085cc:	4413      	add	r3, r2
 80085ce:	781b      	ldrb	r3, [r3, #0]
 80085d0:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 80085d2:	7efb      	ldrb	r3, [r7, #27]
 80085d4:	2b20      	cmp	r3, #32
 80085d6:	d94e      	bls.n	8008676 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80085d8:	7efb      	ldrb	r3, [r7, #27]
 80085da:	2b2f      	cmp	r3, #47	@ 0x2f
 80085dc:	d006      	beq.n	80085ec <create_name+0x54>
 80085de:	7efb      	ldrb	r3, [r7, #27]
 80085e0:	2b5c      	cmp	r3, #92	@ 0x5c
 80085e2:	d110      	bne.n	8008606 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80085e4:	e002      	b.n	80085ec <create_name+0x54>
 80085e6:	69fb      	ldr	r3, [r7, #28]
 80085e8:	3301      	adds	r3, #1
 80085ea:	61fb      	str	r3, [r7, #28]
 80085ec:	68fa      	ldr	r2, [r7, #12]
 80085ee:	69fb      	ldr	r3, [r7, #28]
 80085f0:	4413      	add	r3, r2
 80085f2:	781b      	ldrb	r3, [r3, #0]
 80085f4:	2b2f      	cmp	r3, #47	@ 0x2f
 80085f6:	d0f6      	beq.n	80085e6 <create_name+0x4e>
 80085f8:	68fa      	ldr	r2, [r7, #12]
 80085fa:	69fb      	ldr	r3, [r7, #28]
 80085fc:	4413      	add	r3, r2
 80085fe:	781b      	ldrb	r3, [r3, #0]
 8008600:	2b5c      	cmp	r3, #92	@ 0x5c
 8008602:	d0f0      	beq.n	80085e6 <create_name+0x4e>
			break;
 8008604:	e038      	b.n	8008678 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8008606:	7efb      	ldrb	r3, [r7, #27]
 8008608:	2b2e      	cmp	r3, #46	@ 0x2e
 800860a:	d003      	beq.n	8008614 <create_name+0x7c>
 800860c:	693a      	ldr	r2, [r7, #16]
 800860e:	697b      	ldr	r3, [r7, #20]
 8008610:	429a      	cmp	r2, r3
 8008612:	d30c      	bcc.n	800862e <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8008614:	697b      	ldr	r3, [r7, #20]
 8008616:	2b0b      	cmp	r3, #11
 8008618:	d002      	beq.n	8008620 <create_name+0x88>
 800861a:	7efb      	ldrb	r3, [r7, #27]
 800861c:	2b2e      	cmp	r3, #46	@ 0x2e
 800861e:	d001      	beq.n	8008624 <create_name+0x8c>
 8008620:	2306      	movs	r3, #6
 8008622:	e044      	b.n	80086ae <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8008624:	2308      	movs	r3, #8
 8008626:	613b      	str	r3, [r7, #16]
 8008628:	230b      	movs	r3, #11
 800862a:	617b      	str	r3, [r7, #20]
			continue;
 800862c:	e022      	b.n	8008674 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800862e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8008632:	2b00      	cmp	r3, #0
 8008634:	da04      	bge.n	8008640 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8008636:	7efb      	ldrb	r3, [r7, #27]
 8008638:	3b80      	subs	r3, #128	@ 0x80
 800863a:	4a1f      	ldr	r2, [pc, #124]	@ (80086b8 <create_name+0x120>)
 800863c:	5cd3      	ldrb	r3, [r2, r3]
 800863e:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8008640:	7efb      	ldrb	r3, [r7, #27]
 8008642:	4619      	mov	r1, r3
 8008644:	481d      	ldr	r0, [pc, #116]	@ (80086bc <create_name+0x124>)
 8008646:	f7ff f812 	bl	800766e <chk_chr>
 800864a:	4603      	mov	r3, r0
 800864c:	2b00      	cmp	r3, #0
 800864e:	d001      	beq.n	8008654 <create_name+0xbc>
 8008650:	2306      	movs	r3, #6
 8008652:	e02c      	b.n	80086ae <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8008654:	7efb      	ldrb	r3, [r7, #27]
 8008656:	2b60      	cmp	r3, #96	@ 0x60
 8008658:	d905      	bls.n	8008666 <create_name+0xce>
 800865a:	7efb      	ldrb	r3, [r7, #27]
 800865c:	2b7a      	cmp	r3, #122	@ 0x7a
 800865e:	d802      	bhi.n	8008666 <create_name+0xce>
 8008660:	7efb      	ldrb	r3, [r7, #27]
 8008662:	3b20      	subs	r3, #32
 8008664:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8008666:	693b      	ldr	r3, [r7, #16]
 8008668:	1c5a      	adds	r2, r3, #1
 800866a:	613a      	str	r2, [r7, #16]
 800866c:	68ba      	ldr	r2, [r7, #8]
 800866e:	4413      	add	r3, r2
 8008670:	7efa      	ldrb	r2, [r7, #27]
 8008672:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8008674:	e7a6      	b.n	80085c4 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8008676:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8008678:	68fa      	ldr	r2, [r7, #12]
 800867a:	69fb      	ldr	r3, [r7, #28]
 800867c:	441a      	add	r2, r3
 800867e:	683b      	ldr	r3, [r7, #0]
 8008680:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8008682:	693b      	ldr	r3, [r7, #16]
 8008684:	2b00      	cmp	r3, #0
 8008686:	d101      	bne.n	800868c <create_name+0xf4>
 8008688:	2306      	movs	r3, #6
 800868a:	e010      	b.n	80086ae <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800868c:	68bb      	ldr	r3, [r7, #8]
 800868e:	781b      	ldrb	r3, [r3, #0]
 8008690:	2be5      	cmp	r3, #229	@ 0xe5
 8008692:	d102      	bne.n	800869a <create_name+0x102>
 8008694:	68bb      	ldr	r3, [r7, #8]
 8008696:	2205      	movs	r2, #5
 8008698:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800869a:	7efb      	ldrb	r3, [r7, #27]
 800869c:	2b20      	cmp	r3, #32
 800869e:	d801      	bhi.n	80086a4 <create_name+0x10c>
 80086a0:	2204      	movs	r2, #4
 80086a2:	e000      	b.n	80086a6 <create_name+0x10e>
 80086a4:	2200      	movs	r2, #0
 80086a6:	68bb      	ldr	r3, [r7, #8]
 80086a8:	330b      	adds	r3, #11
 80086aa:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80086ac:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 80086ae:	4618      	mov	r0, r3
 80086b0:	3720      	adds	r7, #32
 80086b2:	46bd      	mov	sp, r7
 80086b4:	bd80      	pop	{r7, pc}
 80086b6:	bf00      	nop
 80086b8:	0800cb74 	.word	0x0800cb74
 80086bc:	0800cae8 	.word	0x0800cae8

080086c0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80086c0:	b580      	push	{r7, lr}
 80086c2:	b086      	sub	sp, #24
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	6078      	str	r0, [r7, #4]
 80086c8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80086ce:	693b      	ldr	r3, [r7, #16]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80086d4:	e002      	b.n	80086dc <follow_path+0x1c>
 80086d6:	683b      	ldr	r3, [r7, #0]
 80086d8:	3301      	adds	r3, #1
 80086da:	603b      	str	r3, [r7, #0]
 80086dc:	683b      	ldr	r3, [r7, #0]
 80086de:	781b      	ldrb	r3, [r3, #0]
 80086e0:	2b2f      	cmp	r3, #47	@ 0x2f
 80086e2:	d0f8      	beq.n	80086d6 <follow_path+0x16>
 80086e4:	683b      	ldr	r3, [r7, #0]
 80086e6:	781b      	ldrb	r3, [r3, #0]
 80086e8:	2b5c      	cmp	r3, #92	@ 0x5c
 80086ea:	d0f4      	beq.n	80086d6 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80086ec:	693b      	ldr	r3, [r7, #16]
 80086ee:	2200      	movs	r2, #0
 80086f0:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80086f2:	683b      	ldr	r3, [r7, #0]
 80086f4:	781b      	ldrb	r3, [r3, #0]
 80086f6:	2b1f      	cmp	r3, #31
 80086f8:	d80a      	bhi.n	8008710 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	2280      	movs	r2, #128	@ 0x80
 80086fe:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 8008702:	2100      	movs	r1, #0
 8008704:	6878      	ldr	r0, [r7, #4]
 8008706:	f7ff fcfa 	bl	80080fe <dir_sdi>
 800870a:	4603      	mov	r3, r0
 800870c:	75fb      	strb	r3, [r7, #23]
 800870e:	e043      	b.n	8008798 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008710:	463b      	mov	r3, r7
 8008712:	4619      	mov	r1, r3
 8008714:	6878      	ldr	r0, [r7, #4]
 8008716:	f7ff ff3f 	bl	8008598 <create_name>
 800871a:	4603      	mov	r3, r0
 800871c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800871e:	7dfb      	ldrb	r3, [r7, #23]
 8008720:	2b00      	cmp	r3, #0
 8008722:	d134      	bne.n	800878e <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8008724:	6878      	ldr	r0, [r7, #4]
 8008726:	f7ff feb0 	bl	800848a <dir_find>
 800872a:	4603      	mov	r3, r0
 800872c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8008734:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8008736:	7dfb      	ldrb	r3, [r7, #23]
 8008738:	2b00      	cmp	r3, #0
 800873a:	d00a      	beq.n	8008752 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800873c:	7dfb      	ldrb	r3, [r7, #23]
 800873e:	2b04      	cmp	r3, #4
 8008740:	d127      	bne.n	8008792 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8008742:	7afb      	ldrb	r3, [r7, #11]
 8008744:	f003 0304 	and.w	r3, r3, #4
 8008748:	2b00      	cmp	r3, #0
 800874a:	d122      	bne.n	8008792 <follow_path+0xd2>
 800874c:	2305      	movs	r3, #5
 800874e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8008750:	e01f      	b.n	8008792 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008752:	7afb      	ldrb	r3, [r7, #11]
 8008754:	f003 0304 	and.w	r3, r3, #4
 8008758:	2b00      	cmp	r3, #0
 800875a:	d11c      	bne.n	8008796 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800875c:	693b      	ldr	r3, [r7, #16]
 800875e:	799b      	ldrb	r3, [r3, #6]
 8008760:	f003 0310 	and.w	r3, r3, #16
 8008764:	2b00      	cmp	r3, #0
 8008766:	d102      	bne.n	800876e <follow_path+0xae>
				res = FR_NO_PATH; break;
 8008768:	2305      	movs	r3, #5
 800876a:	75fb      	strb	r3, [r7, #23]
 800876c:	e014      	b.n	8008798 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	695b      	ldr	r3, [r3, #20]
 8008778:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800877c:	4413      	add	r3, r2
 800877e:	4619      	mov	r1, r3
 8008780:	68f8      	ldr	r0, [r7, #12]
 8008782:	f7ff fe43 	bl	800840c <ld_clust>
 8008786:	4602      	mov	r2, r0
 8008788:	693b      	ldr	r3, [r7, #16]
 800878a:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800878c:	e7c0      	b.n	8008710 <follow_path+0x50>
			if (res != FR_OK) break;
 800878e:	bf00      	nop
 8008790:	e002      	b.n	8008798 <follow_path+0xd8>
				break;
 8008792:	bf00      	nop
 8008794:	e000      	b.n	8008798 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008796:	bf00      	nop
			}
		}
	}

	return res;
 8008798:	7dfb      	ldrb	r3, [r7, #23]
}
 800879a:	4618      	mov	r0, r3
 800879c:	3718      	adds	r7, #24
 800879e:	46bd      	mov	sp, r7
 80087a0:	bd80      	pop	{r7, pc}

080087a2 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80087a2:	b480      	push	{r7}
 80087a4:	b087      	sub	sp, #28
 80087a6:	af00      	add	r7, sp, #0
 80087a8:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80087aa:	f04f 33ff 	mov.w	r3, #4294967295
 80087ae:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d031      	beq.n	800881c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	617b      	str	r3, [r7, #20]
 80087be:	e002      	b.n	80087c6 <get_ldnumber+0x24>
 80087c0:	697b      	ldr	r3, [r7, #20]
 80087c2:	3301      	adds	r3, #1
 80087c4:	617b      	str	r3, [r7, #20]
 80087c6:	697b      	ldr	r3, [r7, #20]
 80087c8:	781b      	ldrb	r3, [r3, #0]
 80087ca:	2b20      	cmp	r3, #32
 80087cc:	d903      	bls.n	80087d6 <get_ldnumber+0x34>
 80087ce:	697b      	ldr	r3, [r7, #20]
 80087d0:	781b      	ldrb	r3, [r3, #0]
 80087d2:	2b3a      	cmp	r3, #58	@ 0x3a
 80087d4:	d1f4      	bne.n	80087c0 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80087d6:	697b      	ldr	r3, [r7, #20]
 80087d8:	781b      	ldrb	r3, [r3, #0]
 80087da:	2b3a      	cmp	r3, #58	@ 0x3a
 80087dc:	d11c      	bne.n	8008818 <get_ldnumber+0x76>
			tp = *path;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	1c5a      	adds	r2, r3, #1
 80087e8:	60fa      	str	r2, [r7, #12]
 80087ea:	781b      	ldrb	r3, [r3, #0]
 80087ec:	3b30      	subs	r3, #48	@ 0x30
 80087ee:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80087f0:	68bb      	ldr	r3, [r7, #8]
 80087f2:	2b09      	cmp	r3, #9
 80087f4:	d80e      	bhi.n	8008814 <get_ldnumber+0x72>
 80087f6:	68fa      	ldr	r2, [r7, #12]
 80087f8:	697b      	ldr	r3, [r7, #20]
 80087fa:	429a      	cmp	r2, r3
 80087fc:	d10a      	bne.n	8008814 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80087fe:	68bb      	ldr	r3, [r7, #8]
 8008800:	2b00      	cmp	r3, #0
 8008802:	d107      	bne.n	8008814 <get_ldnumber+0x72>
					vol = (int)i;
 8008804:	68bb      	ldr	r3, [r7, #8]
 8008806:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8008808:	697b      	ldr	r3, [r7, #20]
 800880a:	3301      	adds	r3, #1
 800880c:	617b      	str	r3, [r7, #20]
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	697a      	ldr	r2, [r7, #20]
 8008812:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8008814:	693b      	ldr	r3, [r7, #16]
 8008816:	e002      	b.n	800881e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8008818:	2300      	movs	r3, #0
 800881a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800881c:	693b      	ldr	r3, [r7, #16]
}
 800881e:	4618      	mov	r0, r3
 8008820:	371c      	adds	r7, #28
 8008822:	46bd      	mov	sp, r7
 8008824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008828:	4770      	bx	lr
	...

0800882c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800882c:	b580      	push	{r7, lr}
 800882e:	b082      	sub	sp, #8
 8008830:	af00      	add	r7, sp, #0
 8008832:	6078      	str	r0, [r7, #4]
 8008834:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	2200      	movs	r2, #0
 800883a:	70da      	strb	r2, [r3, #3]
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	f04f 32ff 	mov.w	r2, #4294967295
 8008842:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8008844:	6839      	ldr	r1, [r7, #0]
 8008846:	6878      	ldr	r0, [r7, #4]
 8008848:	f7ff f8dc 	bl	8007a04 <move_window>
 800884c:	4603      	mov	r3, r0
 800884e:	2b00      	cmp	r3, #0
 8008850:	d001      	beq.n	8008856 <check_fs+0x2a>
 8008852:	2304      	movs	r3, #4
 8008854:	e038      	b.n	80088c8 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	3330      	adds	r3, #48	@ 0x30
 800885a:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800885e:	4618      	mov	r0, r3
 8008860:	f7fe fe20 	bl	80074a4 <ld_word>
 8008864:	4603      	mov	r3, r0
 8008866:	461a      	mov	r2, r3
 8008868:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800886c:	429a      	cmp	r2, r3
 800886e:	d001      	beq.n	8008874 <check_fs+0x48>
 8008870:	2303      	movs	r3, #3
 8008872:	e029      	b.n	80088c8 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800887a:	2be9      	cmp	r3, #233	@ 0xe9
 800887c:	d009      	beq.n	8008892 <check_fs+0x66>
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008884:	2beb      	cmp	r3, #235	@ 0xeb
 8008886:	d11e      	bne.n	80088c6 <check_fs+0x9a>
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800888e:	2b90      	cmp	r3, #144	@ 0x90
 8008890:	d119      	bne.n	80088c6 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	3330      	adds	r3, #48	@ 0x30
 8008896:	3336      	adds	r3, #54	@ 0x36
 8008898:	4618      	mov	r0, r3
 800889a:	f7fe fe1b 	bl	80074d4 <ld_dword>
 800889e:	4603      	mov	r3, r0
 80088a0:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80088a4:	4a0a      	ldr	r2, [pc, #40]	@ (80088d0 <check_fs+0xa4>)
 80088a6:	4293      	cmp	r3, r2
 80088a8:	d101      	bne.n	80088ae <check_fs+0x82>
 80088aa:	2300      	movs	r3, #0
 80088ac:	e00c      	b.n	80088c8 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	3330      	adds	r3, #48	@ 0x30
 80088b2:	3352      	adds	r3, #82	@ 0x52
 80088b4:	4618      	mov	r0, r3
 80088b6:	f7fe fe0d 	bl	80074d4 <ld_dword>
 80088ba:	4603      	mov	r3, r0
 80088bc:	4a05      	ldr	r2, [pc, #20]	@ (80088d4 <check_fs+0xa8>)
 80088be:	4293      	cmp	r3, r2
 80088c0:	d101      	bne.n	80088c6 <check_fs+0x9a>
 80088c2:	2300      	movs	r3, #0
 80088c4:	e000      	b.n	80088c8 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80088c6:	2302      	movs	r3, #2
}
 80088c8:	4618      	mov	r0, r3
 80088ca:	3708      	adds	r7, #8
 80088cc:	46bd      	mov	sp, r7
 80088ce:	bd80      	pop	{r7, pc}
 80088d0:	00544146 	.word	0x00544146
 80088d4:	33544146 	.word	0x33544146

080088d8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80088d8:	b580      	push	{r7, lr}
 80088da:	b096      	sub	sp, #88	@ 0x58
 80088dc:	af00      	add	r7, sp, #0
 80088de:	60f8      	str	r0, [r7, #12]
 80088e0:	60b9      	str	r1, [r7, #8]
 80088e2:	4613      	mov	r3, r2
 80088e4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80088e6:	68bb      	ldr	r3, [r7, #8]
 80088e8:	2200      	movs	r2, #0
 80088ea:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80088ec:	68f8      	ldr	r0, [r7, #12]
 80088ee:	f7ff ff58 	bl	80087a2 <get_ldnumber>
 80088f2:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80088f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	da01      	bge.n	80088fe <find_volume+0x26>
 80088fa:	230b      	movs	r3, #11
 80088fc:	e22d      	b.n	8008d5a <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80088fe:	4aa1      	ldr	r2, [pc, #644]	@ (8008b84 <find_volume+0x2ac>)
 8008900:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008902:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008906:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8008908:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800890a:	2b00      	cmp	r3, #0
 800890c:	d101      	bne.n	8008912 <find_volume+0x3a>
 800890e:	230c      	movs	r3, #12
 8008910:	e223      	b.n	8008d5a <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8008912:	68bb      	ldr	r3, [r7, #8]
 8008914:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008916:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8008918:	79fb      	ldrb	r3, [r7, #7]
 800891a:	f023 0301 	bic.w	r3, r3, #1
 800891e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8008920:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008922:	781b      	ldrb	r3, [r3, #0]
 8008924:	2b00      	cmp	r3, #0
 8008926:	d01a      	beq.n	800895e <find_volume+0x86>
		stat = disk_status(fs->drv);
 8008928:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800892a:	785b      	ldrb	r3, [r3, #1]
 800892c:	4618      	mov	r0, r3
 800892e:	f7fe fd1b 	bl	8007368 <disk_status>
 8008932:	4603      	mov	r3, r0
 8008934:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8008938:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800893c:	f003 0301 	and.w	r3, r3, #1
 8008940:	2b00      	cmp	r3, #0
 8008942:	d10c      	bne.n	800895e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8008944:	79fb      	ldrb	r3, [r7, #7]
 8008946:	2b00      	cmp	r3, #0
 8008948:	d007      	beq.n	800895a <find_volume+0x82>
 800894a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800894e:	f003 0304 	and.w	r3, r3, #4
 8008952:	2b00      	cmp	r3, #0
 8008954:	d001      	beq.n	800895a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8008956:	230a      	movs	r3, #10
 8008958:	e1ff      	b.n	8008d5a <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800895a:	2300      	movs	r3, #0
 800895c:	e1fd      	b.n	8008d5a <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800895e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008960:	2200      	movs	r2, #0
 8008962:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8008964:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008966:	b2da      	uxtb	r2, r3
 8008968:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800896a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800896c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800896e:	785b      	ldrb	r3, [r3, #1]
 8008970:	4618      	mov	r0, r3
 8008972:	f7fe fd13 	bl	800739c <disk_initialize>
 8008976:	4603      	mov	r3, r0
 8008978:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800897c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008980:	f003 0301 	and.w	r3, r3, #1
 8008984:	2b00      	cmp	r3, #0
 8008986:	d001      	beq.n	800898c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8008988:	2303      	movs	r3, #3
 800898a:	e1e6      	b.n	8008d5a <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800898c:	79fb      	ldrb	r3, [r7, #7]
 800898e:	2b00      	cmp	r3, #0
 8008990:	d007      	beq.n	80089a2 <find_volume+0xca>
 8008992:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008996:	f003 0304 	and.w	r3, r3, #4
 800899a:	2b00      	cmp	r3, #0
 800899c:	d001      	beq.n	80089a2 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800899e:	230a      	movs	r3, #10
 80089a0:	e1db      	b.n	8008d5a <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80089a2:	2300      	movs	r3, #0
 80089a4:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80089a6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80089a8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80089aa:	f7ff ff3f 	bl	800882c <check_fs>
 80089ae:	4603      	mov	r3, r0
 80089b0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80089b4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80089b8:	2b02      	cmp	r3, #2
 80089ba:	d149      	bne.n	8008a50 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80089bc:	2300      	movs	r3, #0
 80089be:	643b      	str	r3, [r7, #64]	@ 0x40
 80089c0:	e01e      	b.n	8008a00 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80089c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089c4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80089c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80089ca:	011b      	lsls	r3, r3, #4
 80089cc:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 80089d0:	4413      	add	r3, r2
 80089d2:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80089d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089d6:	3304      	adds	r3, #4
 80089d8:	781b      	ldrb	r3, [r3, #0]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d006      	beq.n	80089ec <find_volume+0x114>
 80089de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089e0:	3308      	adds	r3, #8
 80089e2:	4618      	mov	r0, r3
 80089e4:	f7fe fd76 	bl	80074d4 <ld_dword>
 80089e8:	4602      	mov	r2, r0
 80089ea:	e000      	b.n	80089ee <find_volume+0x116>
 80089ec:	2200      	movs	r2, #0
 80089ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80089f0:	009b      	lsls	r3, r3, #2
 80089f2:	3358      	adds	r3, #88	@ 0x58
 80089f4:	443b      	add	r3, r7
 80089f6:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80089fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80089fc:	3301      	adds	r3, #1
 80089fe:	643b      	str	r3, [r7, #64]	@ 0x40
 8008a00:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008a02:	2b03      	cmp	r3, #3
 8008a04:	d9dd      	bls.n	80089c2 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8008a06:	2300      	movs	r3, #0
 8008a08:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8008a0a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d002      	beq.n	8008a16 <find_volume+0x13e>
 8008a10:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008a12:	3b01      	subs	r3, #1
 8008a14:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8008a16:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008a18:	009b      	lsls	r3, r3, #2
 8008a1a:	3358      	adds	r3, #88	@ 0x58
 8008a1c:	443b      	add	r3, r7
 8008a1e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8008a22:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8008a24:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d005      	beq.n	8008a36 <find_volume+0x15e>
 8008a2a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008a2c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008a2e:	f7ff fefd 	bl	800882c <check_fs>
 8008a32:	4603      	mov	r3, r0
 8008a34:	e000      	b.n	8008a38 <find_volume+0x160>
 8008a36:	2303      	movs	r3, #3
 8008a38:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8008a3c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008a40:	2b01      	cmp	r3, #1
 8008a42:	d905      	bls.n	8008a50 <find_volume+0x178>
 8008a44:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008a46:	3301      	adds	r3, #1
 8008a48:	643b      	str	r3, [r7, #64]	@ 0x40
 8008a4a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008a4c:	2b03      	cmp	r3, #3
 8008a4e:	d9e2      	bls.n	8008a16 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8008a50:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008a54:	2b04      	cmp	r3, #4
 8008a56:	d101      	bne.n	8008a5c <find_volume+0x184>
 8008a58:	2301      	movs	r3, #1
 8008a5a:	e17e      	b.n	8008d5a <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8008a5c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008a60:	2b01      	cmp	r3, #1
 8008a62:	d901      	bls.n	8008a68 <find_volume+0x190>
 8008a64:	230d      	movs	r3, #13
 8008a66:	e178      	b.n	8008d5a <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8008a68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a6a:	3330      	adds	r3, #48	@ 0x30
 8008a6c:	330b      	adds	r3, #11
 8008a6e:	4618      	mov	r0, r3
 8008a70:	f7fe fd18 	bl	80074a4 <ld_word>
 8008a74:	4603      	mov	r3, r0
 8008a76:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008a7a:	d001      	beq.n	8008a80 <find_volume+0x1a8>
 8008a7c:	230d      	movs	r3, #13
 8008a7e:	e16c      	b.n	8008d5a <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8008a80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a82:	3330      	adds	r3, #48	@ 0x30
 8008a84:	3316      	adds	r3, #22
 8008a86:	4618      	mov	r0, r3
 8008a88:	f7fe fd0c 	bl	80074a4 <ld_word>
 8008a8c:	4603      	mov	r3, r0
 8008a8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8008a90:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d106      	bne.n	8008aa4 <find_volume+0x1cc>
 8008a96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a98:	3330      	adds	r3, #48	@ 0x30
 8008a9a:	3324      	adds	r3, #36	@ 0x24
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	f7fe fd19 	bl	80074d4 <ld_dword>
 8008aa2:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8008aa4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008aa6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008aa8:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8008aaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008aac:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 8008ab0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ab2:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8008ab4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ab6:	789b      	ldrb	r3, [r3, #2]
 8008ab8:	2b01      	cmp	r3, #1
 8008aba:	d005      	beq.n	8008ac8 <find_volume+0x1f0>
 8008abc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008abe:	789b      	ldrb	r3, [r3, #2]
 8008ac0:	2b02      	cmp	r3, #2
 8008ac2:	d001      	beq.n	8008ac8 <find_volume+0x1f0>
 8008ac4:	230d      	movs	r3, #13
 8008ac6:	e148      	b.n	8008d5a <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8008ac8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008aca:	789b      	ldrb	r3, [r3, #2]
 8008acc:	461a      	mov	r2, r3
 8008ace:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008ad0:	fb02 f303 	mul.w	r3, r2, r3
 8008ad4:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8008ad6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ad8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008adc:	461a      	mov	r2, r3
 8008ade:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ae0:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8008ae2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ae4:	895b      	ldrh	r3, [r3, #10]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d008      	beq.n	8008afc <find_volume+0x224>
 8008aea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008aec:	895b      	ldrh	r3, [r3, #10]
 8008aee:	461a      	mov	r2, r3
 8008af0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008af2:	895b      	ldrh	r3, [r3, #10]
 8008af4:	3b01      	subs	r3, #1
 8008af6:	4013      	ands	r3, r2
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d001      	beq.n	8008b00 <find_volume+0x228>
 8008afc:	230d      	movs	r3, #13
 8008afe:	e12c      	b.n	8008d5a <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8008b00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b02:	3330      	adds	r3, #48	@ 0x30
 8008b04:	3311      	adds	r3, #17
 8008b06:	4618      	mov	r0, r3
 8008b08:	f7fe fccc 	bl	80074a4 <ld_word>
 8008b0c:	4603      	mov	r3, r0
 8008b0e:	461a      	mov	r2, r3
 8008b10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b12:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8008b14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b16:	891b      	ldrh	r3, [r3, #8]
 8008b18:	f003 030f 	and.w	r3, r3, #15
 8008b1c:	b29b      	uxth	r3, r3
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d001      	beq.n	8008b26 <find_volume+0x24e>
 8008b22:	230d      	movs	r3, #13
 8008b24:	e119      	b.n	8008d5a <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8008b26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b28:	3330      	adds	r3, #48	@ 0x30
 8008b2a:	3313      	adds	r3, #19
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	f7fe fcb9 	bl	80074a4 <ld_word>
 8008b32:	4603      	mov	r3, r0
 8008b34:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8008b36:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d106      	bne.n	8008b4a <find_volume+0x272>
 8008b3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b3e:	3330      	adds	r3, #48	@ 0x30
 8008b40:	3320      	adds	r3, #32
 8008b42:	4618      	mov	r0, r3
 8008b44:	f7fe fcc6 	bl	80074d4 <ld_dword>
 8008b48:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8008b4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b4c:	3330      	adds	r3, #48	@ 0x30
 8008b4e:	330e      	adds	r3, #14
 8008b50:	4618      	mov	r0, r3
 8008b52:	f7fe fca7 	bl	80074a4 <ld_word>
 8008b56:	4603      	mov	r3, r0
 8008b58:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8008b5a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d101      	bne.n	8008b64 <find_volume+0x28c>
 8008b60:	230d      	movs	r3, #13
 8008b62:	e0fa      	b.n	8008d5a <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8008b64:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8008b66:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008b68:	4413      	add	r3, r2
 8008b6a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008b6c:	8912      	ldrh	r2, [r2, #8]
 8008b6e:	0912      	lsrs	r2, r2, #4
 8008b70:	b292      	uxth	r2, r2
 8008b72:	4413      	add	r3, r2
 8008b74:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8008b76:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008b78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b7a:	429a      	cmp	r2, r3
 8008b7c:	d204      	bcs.n	8008b88 <find_volume+0x2b0>
 8008b7e:	230d      	movs	r3, #13
 8008b80:	e0eb      	b.n	8008d5a <find_volume+0x482>
 8008b82:	bf00      	nop
 8008b84:	20000570 	.word	0x20000570
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8008b88:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008b8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b8c:	1ad3      	subs	r3, r2, r3
 8008b8e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008b90:	8952      	ldrh	r2, [r2, #10]
 8008b92:	fbb3 f3f2 	udiv	r3, r3, r2
 8008b96:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8008b98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d101      	bne.n	8008ba2 <find_volume+0x2ca>
 8008b9e:	230d      	movs	r3, #13
 8008ba0:	e0db      	b.n	8008d5a <find_volume+0x482>
		fmt = FS_FAT32;
 8008ba2:	2303      	movs	r3, #3
 8008ba4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8008ba8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008baa:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8008bae:	4293      	cmp	r3, r2
 8008bb0:	d802      	bhi.n	8008bb8 <find_volume+0x2e0>
 8008bb2:	2302      	movs	r3, #2
 8008bb4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8008bb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bba:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8008bbe:	4293      	cmp	r3, r2
 8008bc0:	d802      	bhi.n	8008bc8 <find_volume+0x2f0>
 8008bc2:	2301      	movs	r3, #1
 8008bc4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8008bc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bca:	1c9a      	adds	r2, r3, #2
 8008bcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bce:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8008bd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bd2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008bd4:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8008bd6:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8008bd8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008bda:	441a      	add	r2, r3
 8008bdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bde:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8008be0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008be2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008be4:	441a      	add	r2, r3
 8008be6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008be8:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 8008bea:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008bee:	2b03      	cmp	r3, #3
 8008bf0:	d11e      	bne.n	8008c30 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8008bf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bf4:	3330      	adds	r3, #48	@ 0x30
 8008bf6:	332a      	adds	r3, #42	@ 0x2a
 8008bf8:	4618      	mov	r0, r3
 8008bfa:	f7fe fc53 	bl	80074a4 <ld_word>
 8008bfe:	4603      	mov	r3, r0
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d001      	beq.n	8008c08 <find_volume+0x330>
 8008c04:	230d      	movs	r3, #13
 8008c06:	e0a8      	b.n	8008d5a <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8008c08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c0a:	891b      	ldrh	r3, [r3, #8]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d001      	beq.n	8008c14 <find_volume+0x33c>
 8008c10:	230d      	movs	r3, #13
 8008c12:	e0a2      	b.n	8008d5a <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8008c14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c16:	3330      	adds	r3, #48	@ 0x30
 8008c18:	332c      	adds	r3, #44	@ 0x2c
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	f7fe fc5a 	bl	80074d4 <ld_dword>
 8008c20:	4602      	mov	r2, r0
 8008c22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c24:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8008c26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c28:	695b      	ldr	r3, [r3, #20]
 8008c2a:	009b      	lsls	r3, r3, #2
 8008c2c:	647b      	str	r3, [r7, #68]	@ 0x44
 8008c2e:	e01f      	b.n	8008c70 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8008c30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c32:	891b      	ldrh	r3, [r3, #8]
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d101      	bne.n	8008c3c <find_volume+0x364>
 8008c38:	230d      	movs	r3, #13
 8008c3a:	e08e      	b.n	8008d5a <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8008c3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c3e:	6a1a      	ldr	r2, [r3, #32]
 8008c40:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008c42:	441a      	add	r2, r3
 8008c44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c46:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8008c48:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008c4c:	2b02      	cmp	r3, #2
 8008c4e:	d103      	bne.n	8008c58 <find_volume+0x380>
 8008c50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c52:	695b      	ldr	r3, [r3, #20]
 8008c54:	005b      	lsls	r3, r3, #1
 8008c56:	e00a      	b.n	8008c6e <find_volume+0x396>
 8008c58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c5a:	695a      	ldr	r2, [r3, #20]
 8008c5c:	4613      	mov	r3, r2
 8008c5e:	005b      	lsls	r3, r3, #1
 8008c60:	4413      	add	r3, r2
 8008c62:	085a      	lsrs	r2, r3, #1
 8008c64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c66:	695b      	ldr	r3, [r3, #20]
 8008c68:	f003 0301 	and.w	r3, r3, #1
 8008c6c:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8008c6e:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8008c70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c72:	699a      	ldr	r2, [r3, #24]
 8008c74:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008c76:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 8008c7a:	0a5b      	lsrs	r3, r3, #9
 8008c7c:	429a      	cmp	r2, r3
 8008c7e:	d201      	bcs.n	8008c84 <find_volume+0x3ac>
 8008c80:	230d      	movs	r3, #13
 8008c82:	e06a      	b.n	8008d5a <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8008c84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c86:	f04f 32ff 	mov.w	r2, #4294967295
 8008c8a:	611a      	str	r2, [r3, #16]
 8008c8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c8e:	691a      	ldr	r2, [r3, #16]
 8008c90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c92:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8008c94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c96:	2280      	movs	r2, #128	@ 0x80
 8008c98:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8008c9a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008c9e:	2b03      	cmp	r3, #3
 8008ca0:	d149      	bne.n	8008d36 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8008ca2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ca4:	3330      	adds	r3, #48	@ 0x30
 8008ca6:	3330      	adds	r3, #48	@ 0x30
 8008ca8:	4618      	mov	r0, r3
 8008caa:	f7fe fbfb 	bl	80074a4 <ld_word>
 8008cae:	4603      	mov	r3, r0
 8008cb0:	2b01      	cmp	r3, #1
 8008cb2:	d140      	bne.n	8008d36 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8008cb4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008cb6:	3301      	adds	r3, #1
 8008cb8:	4619      	mov	r1, r3
 8008cba:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008cbc:	f7fe fea2 	bl	8007a04 <move_window>
 8008cc0:	4603      	mov	r3, r0
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d137      	bne.n	8008d36 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8008cc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cc8:	2200      	movs	r2, #0
 8008cca:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8008ccc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cce:	3330      	adds	r3, #48	@ 0x30
 8008cd0:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8008cd4:	4618      	mov	r0, r3
 8008cd6:	f7fe fbe5 	bl	80074a4 <ld_word>
 8008cda:	4603      	mov	r3, r0
 8008cdc:	461a      	mov	r2, r3
 8008cde:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8008ce2:	429a      	cmp	r2, r3
 8008ce4:	d127      	bne.n	8008d36 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8008ce6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ce8:	3330      	adds	r3, #48	@ 0x30
 8008cea:	4618      	mov	r0, r3
 8008cec:	f7fe fbf2 	bl	80074d4 <ld_dword>
 8008cf0:	4603      	mov	r3, r0
 8008cf2:	4a1c      	ldr	r2, [pc, #112]	@ (8008d64 <find_volume+0x48c>)
 8008cf4:	4293      	cmp	r3, r2
 8008cf6:	d11e      	bne.n	8008d36 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8008cf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cfa:	3330      	adds	r3, #48	@ 0x30
 8008cfc:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8008d00:	4618      	mov	r0, r3
 8008d02:	f7fe fbe7 	bl	80074d4 <ld_dword>
 8008d06:	4603      	mov	r3, r0
 8008d08:	4a17      	ldr	r2, [pc, #92]	@ (8008d68 <find_volume+0x490>)
 8008d0a:	4293      	cmp	r3, r2
 8008d0c:	d113      	bne.n	8008d36 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8008d0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d10:	3330      	adds	r3, #48	@ 0x30
 8008d12:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8008d16:	4618      	mov	r0, r3
 8008d18:	f7fe fbdc 	bl	80074d4 <ld_dword>
 8008d1c:	4602      	mov	r2, r0
 8008d1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d20:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8008d22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d24:	3330      	adds	r3, #48	@ 0x30
 8008d26:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8008d2a:	4618      	mov	r0, r3
 8008d2c:	f7fe fbd2 	bl	80074d4 <ld_dword>
 8008d30:	4602      	mov	r2, r0
 8008d32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d34:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8008d36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d38:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8008d3c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8008d3e:	4b0b      	ldr	r3, [pc, #44]	@ (8008d6c <find_volume+0x494>)
 8008d40:	881b      	ldrh	r3, [r3, #0]
 8008d42:	3301      	adds	r3, #1
 8008d44:	b29a      	uxth	r2, r3
 8008d46:	4b09      	ldr	r3, [pc, #36]	@ (8008d6c <find_volume+0x494>)
 8008d48:	801a      	strh	r2, [r3, #0]
 8008d4a:	4b08      	ldr	r3, [pc, #32]	@ (8008d6c <find_volume+0x494>)
 8008d4c:	881a      	ldrh	r2, [r3, #0]
 8008d4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d50:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8008d52:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008d54:	f7fe fdee 	bl	8007934 <clear_lock>
#endif
	return FR_OK;
 8008d58:	2300      	movs	r3, #0
}
 8008d5a:	4618      	mov	r0, r3
 8008d5c:	3758      	adds	r7, #88	@ 0x58
 8008d5e:	46bd      	mov	sp, r7
 8008d60:	bd80      	pop	{r7, pc}
 8008d62:	bf00      	nop
 8008d64:	41615252 	.word	0x41615252
 8008d68:	61417272 	.word	0x61417272
 8008d6c:	20000574 	.word	0x20000574

08008d70 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8008d70:	b580      	push	{r7, lr}
 8008d72:	b084      	sub	sp, #16
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	6078      	str	r0, [r7, #4]
 8008d78:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8008d7a:	2309      	movs	r3, #9
 8008d7c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d01c      	beq.n	8008dbe <validate+0x4e>
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d018      	beq.n	8008dbe <validate+0x4e>
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	781b      	ldrb	r3, [r3, #0]
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d013      	beq.n	8008dbe <validate+0x4e>
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	889a      	ldrh	r2, [r3, #4]
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	88db      	ldrh	r3, [r3, #6]
 8008da0:	429a      	cmp	r2, r3
 8008da2:	d10c      	bne.n	8008dbe <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	785b      	ldrb	r3, [r3, #1]
 8008daa:	4618      	mov	r0, r3
 8008dac:	f7fe fadc 	bl	8007368 <disk_status>
 8008db0:	4603      	mov	r3, r0
 8008db2:	f003 0301 	and.w	r3, r3, #1
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d101      	bne.n	8008dbe <validate+0x4e>
			res = FR_OK;
 8008dba:	2300      	movs	r3, #0
 8008dbc:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8008dbe:	7bfb      	ldrb	r3, [r7, #15]
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d102      	bne.n	8008dca <validate+0x5a>
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	e000      	b.n	8008dcc <validate+0x5c>
 8008dca:	2300      	movs	r3, #0
 8008dcc:	683a      	ldr	r2, [r7, #0]
 8008dce:	6013      	str	r3, [r2, #0]
	return res;
 8008dd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	3710      	adds	r7, #16
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	bd80      	pop	{r7, pc}
	...

08008ddc <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8008ddc:	b580      	push	{r7, lr}
 8008dde:	b088      	sub	sp, #32
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	60f8      	str	r0, [r7, #12]
 8008de4:	60b9      	str	r1, [r7, #8]
 8008de6:	4613      	mov	r3, r2
 8008de8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8008dea:	68bb      	ldr	r3, [r7, #8]
 8008dec:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8008dee:	f107 0310 	add.w	r3, r7, #16
 8008df2:	4618      	mov	r0, r3
 8008df4:	f7ff fcd5 	bl	80087a2 <get_ldnumber>
 8008df8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8008dfa:	69fb      	ldr	r3, [r7, #28]
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	da01      	bge.n	8008e04 <f_mount+0x28>
 8008e00:	230b      	movs	r3, #11
 8008e02:	e02b      	b.n	8008e5c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8008e04:	4a17      	ldr	r2, [pc, #92]	@ (8008e64 <f_mount+0x88>)
 8008e06:	69fb      	ldr	r3, [r7, #28]
 8008e08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008e0c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8008e0e:	69bb      	ldr	r3, [r7, #24]
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d005      	beq.n	8008e20 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8008e14:	69b8      	ldr	r0, [r7, #24]
 8008e16:	f7fe fd8d 	bl	8007934 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8008e1a:	69bb      	ldr	r3, [r7, #24]
 8008e1c:	2200      	movs	r2, #0
 8008e1e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d002      	beq.n	8008e2c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	2200      	movs	r2, #0
 8008e2a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8008e2c:	68fa      	ldr	r2, [r7, #12]
 8008e2e:	490d      	ldr	r1, [pc, #52]	@ (8008e64 <f_mount+0x88>)
 8008e30:	69fb      	ldr	r3, [r7, #28]
 8008e32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d002      	beq.n	8008e42 <f_mount+0x66>
 8008e3c:	79fb      	ldrb	r3, [r7, #7]
 8008e3e:	2b01      	cmp	r3, #1
 8008e40:	d001      	beq.n	8008e46 <f_mount+0x6a>
 8008e42:	2300      	movs	r3, #0
 8008e44:	e00a      	b.n	8008e5c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8008e46:	f107 010c 	add.w	r1, r7, #12
 8008e4a:	f107 0308 	add.w	r3, r7, #8
 8008e4e:	2200      	movs	r2, #0
 8008e50:	4618      	mov	r0, r3
 8008e52:	f7ff fd41 	bl	80088d8 <find_volume>
 8008e56:	4603      	mov	r3, r0
 8008e58:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8008e5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e5c:	4618      	mov	r0, r3
 8008e5e:	3720      	adds	r7, #32
 8008e60:	46bd      	mov	sp, r7
 8008e62:	bd80      	pop	{r7, pc}
 8008e64:	20000570 	.word	0x20000570

08008e68 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8008e68:	b580      	push	{r7, lr}
 8008e6a:	b098      	sub	sp, #96	@ 0x60
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	60f8      	str	r0, [r7, #12]
 8008e70:	60b9      	str	r1, [r7, #8]
 8008e72:	4613      	mov	r3, r2
 8008e74:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d101      	bne.n	8008e80 <f_open+0x18>
 8008e7c:	2309      	movs	r3, #9
 8008e7e:	e1a9      	b.n	80091d4 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8008e80:	79fb      	ldrb	r3, [r7, #7]
 8008e82:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008e86:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8008e88:	79fa      	ldrb	r2, [r7, #7]
 8008e8a:	f107 0110 	add.w	r1, r7, #16
 8008e8e:	f107 0308 	add.w	r3, r7, #8
 8008e92:	4618      	mov	r0, r3
 8008e94:	f7ff fd20 	bl	80088d8 <find_volume>
 8008e98:	4603      	mov	r3, r0
 8008e9a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 8008e9e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	f040 818d 	bne.w	80091c2 <f_open+0x35a>
		dj.obj.fs = fs;
 8008ea8:	693b      	ldr	r3, [r7, #16]
 8008eaa:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8008eac:	68ba      	ldr	r2, [r7, #8]
 8008eae:	f107 0314 	add.w	r3, r7, #20
 8008eb2:	4611      	mov	r1, r2
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	f7ff fc03 	bl	80086c0 <follow_path>
 8008eba:	4603      	mov	r3, r0
 8008ebc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8008ec0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d118      	bne.n	8008efa <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8008ec8:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008ecc:	b25b      	sxtb	r3, r3
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	da03      	bge.n	8008eda <f_open+0x72>
				res = FR_INVALID_NAME;
 8008ed2:	2306      	movs	r3, #6
 8008ed4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8008ed8:	e00f      	b.n	8008efa <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008eda:	79fb      	ldrb	r3, [r7, #7]
 8008edc:	2b01      	cmp	r3, #1
 8008ede:	bf8c      	ite	hi
 8008ee0:	2301      	movhi	r3, #1
 8008ee2:	2300      	movls	r3, #0
 8008ee4:	b2db      	uxtb	r3, r3
 8008ee6:	461a      	mov	r2, r3
 8008ee8:	f107 0314 	add.w	r3, r7, #20
 8008eec:	4611      	mov	r1, r2
 8008eee:	4618      	mov	r0, r3
 8008ef0:	f7fe fbd8 	bl	80076a4 <chk_lock>
 8008ef4:	4603      	mov	r3, r0
 8008ef6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8008efa:	79fb      	ldrb	r3, [r7, #7]
 8008efc:	f003 031c 	and.w	r3, r3, #28
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d07f      	beq.n	8009004 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 8008f04:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d017      	beq.n	8008f3c <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8008f0c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008f10:	2b04      	cmp	r3, #4
 8008f12:	d10e      	bne.n	8008f32 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8008f14:	f7fe fc22 	bl	800775c <enq_lock>
 8008f18:	4603      	mov	r3, r0
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d006      	beq.n	8008f2c <f_open+0xc4>
 8008f1e:	f107 0314 	add.w	r3, r7, #20
 8008f22:	4618      	mov	r0, r3
 8008f24:	f7ff fb06 	bl	8008534 <dir_register>
 8008f28:	4603      	mov	r3, r0
 8008f2a:	e000      	b.n	8008f2e <f_open+0xc6>
 8008f2c:	2312      	movs	r3, #18
 8008f2e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8008f32:	79fb      	ldrb	r3, [r7, #7]
 8008f34:	f043 0308 	orr.w	r3, r3, #8
 8008f38:	71fb      	strb	r3, [r7, #7]
 8008f3a:	e010      	b.n	8008f5e <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8008f3c:	7ebb      	ldrb	r3, [r7, #26]
 8008f3e:	f003 0311 	and.w	r3, r3, #17
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d003      	beq.n	8008f4e <f_open+0xe6>
					res = FR_DENIED;
 8008f46:	2307      	movs	r3, #7
 8008f48:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8008f4c:	e007      	b.n	8008f5e <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8008f4e:	79fb      	ldrb	r3, [r7, #7]
 8008f50:	f003 0304 	and.w	r3, r3, #4
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d002      	beq.n	8008f5e <f_open+0xf6>
 8008f58:	2308      	movs	r3, #8
 8008f5a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8008f5e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d168      	bne.n	8009038 <f_open+0x1d0>
 8008f66:	79fb      	ldrb	r3, [r7, #7]
 8008f68:	f003 0308 	and.w	r3, r3, #8
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d063      	beq.n	8009038 <f_open+0x1d0>
				dw = GET_FATTIME();
 8008f70:	f7fd fcc2 	bl	80068f8 <get_fattime>
 8008f74:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8008f76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f78:	330e      	adds	r3, #14
 8008f7a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008f7c:	4618      	mov	r0, r3
 8008f7e:	f7fe fae7 	bl	8007550 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8008f82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f84:	3316      	adds	r3, #22
 8008f86:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008f88:	4618      	mov	r0, r3
 8008f8a:	f7fe fae1 	bl	8007550 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8008f8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f90:	330b      	adds	r3, #11
 8008f92:	2220      	movs	r2, #32
 8008f94:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8008f96:	693b      	ldr	r3, [r7, #16]
 8008f98:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008f9a:	4611      	mov	r1, r2
 8008f9c:	4618      	mov	r0, r3
 8008f9e:	f7ff fa35 	bl	800840c <ld_clust>
 8008fa2:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8008fa4:	693b      	ldr	r3, [r7, #16]
 8008fa6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8008fa8:	2200      	movs	r2, #0
 8008faa:	4618      	mov	r0, r3
 8008fac:	f7ff fa4d 	bl	800844a <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8008fb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008fb2:	331c      	adds	r3, #28
 8008fb4:	2100      	movs	r1, #0
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	f7fe faca 	bl	8007550 <st_dword>
					fs->wflag = 1;
 8008fbc:	693b      	ldr	r3, [r7, #16]
 8008fbe:	2201      	movs	r2, #1
 8008fc0:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8008fc2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d037      	beq.n	8009038 <f_open+0x1d0>
						dw = fs->winsect;
 8008fc8:	693b      	ldr	r3, [r7, #16]
 8008fca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fcc:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8008fce:	f107 0314 	add.w	r3, r7, #20
 8008fd2:	2200      	movs	r2, #0
 8008fd4:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	f7fe ff60 	bl	8007e9c <remove_chain>
 8008fdc:	4603      	mov	r3, r0
 8008fde:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 8008fe2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d126      	bne.n	8009038 <f_open+0x1d0>
							res = move_window(fs, dw);
 8008fea:	693b      	ldr	r3, [r7, #16]
 8008fec:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008fee:	4618      	mov	r0, r3
 8008ff0:	f7fe fd08 	bl	8007a04 <move_window>
 8008ff4:	4603      	mov	r3, r0
 8008ff6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8008ffa:	693b      	ldr	r3, [r7, #16]
 8008ffc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008ffe:	3a01      	subs	r2, #1
 8009000:	60da      	str	r2, [r3, #12]
 8009002:	e019      	b.n	8009038 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8009004:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009008:	2b00      	cmp	r3, #0
 800900a:	d115      	bne.n	8009038 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800900c:	7ebb      	ldrb	r3, [r7, #26]
 800900e:	f003 0310 	and.w	r3, r3, #16
 8009012:	2b00      	cmp	r3, #0
 8009014:	d003      	beq.n	800901e <f_open+0x1b6>
					res = FR_NO_FILE;
 8009016:	2304      	movs	r3, #4
 8009018:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800901c:	e00c      	b.n	8009038 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800901e:	79fb      	ldrb	r3, [r7, #7]
 8009020:	f003 0302 	and.w	r3, r3, #2
 8009024:	2b00      	cmp	r3, #0
 8009026:	d007      	beq.n	8009038 <f_open+0x1d0>
 8009028:	7ebb      	ldrb	r3, [r7, #26]
 800902a:	f003 0301 	and.w	r3, r3, #1
 800902e:	2b00      	cmp	r3, #0
 8009030:	d002      	beq.n	8009038 <f_open+0x1d0>
						res = FR_DENIED;
 8009032:	2307      	movs	r3, #7
 8009034:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8009038:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800903c:	2b00      	cmp	r3, #0
 800903e:	d126      	bne.n	800908e <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8009040:	79fb      	ldrb	r3, [r7, #7]
 8009042:	f003 0308 	and.w	r3, r3, #8
 8009046:	2b00      	cmp	r3, #0
 8009048:	d003      	beq.n	8009052 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800904a:	79fb      	ldrb	r3, [r7, #7]
 800904c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009050:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8009052:	693b      	ldr	r3, [r7, #16]
 8009054:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800905a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009060:	79fb      	ldrb	r3, [r7, #7]
 8009062:	2b01      	cmp	r3, #1
 8009064:	bf8c      	ite	hi
 8009066:	2301      	movhi	r3, #1
 8009068:	2300      	movls	r3, #0
 800906a:	b2db      	uxtb	r3, r3
 800906c:	461a      	mov	r2, r3
 800906e:	f107 0314 	add.w	r3, r7, #20
 8009072:	4611      	mov	r1, r2
 8009074:	4618      	mov	r0, r3
 8009076:	f7fe fb93 	bl	80077a0 <inc_lock>
 800907a:	4602      	mov	r2, r0
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	691b      	ldr	r3, [r3, #16]
 8009084:	2b00      	cmp	r3, #0
 8009086:	d102      	bne.n	800908e <f_open+0x226>
 8009088:	2302      	movs	r3, #2
 800908a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800908e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009092:	2b00      	cmp	r3, #0
 8009094:	f040 8095 	bne.w	80091c2 <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8009098:	693b      	ldr	r3, [r7, #16]
 800909a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800909c:	4611      	mov	r1, r2
 800909e:	4618      	mov	r0, r3
 80090a0:	f7ff f9b4 	bl	800840c <ld_clust>
 80090a4:	4602      	mov	r2, r0
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80090aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80090ac:	331c      	adds	r3, #28
 80090ae:	4618      	mov	r0, r3
 80090b0:	f7fe fa10 	bl	80074d4 <ld_dword>
 80090b4:	4602      	mov	r2, r0
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	2200      	movs	r2, #0
 80090be:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80090c0:	693a      	ldr	r2, [r7, #16]
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80090c6:	693b      	ldr	r3, [r7, #16]
 80090c8:	88da      	ldrh	r2, [r3, #6]
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	79fa      	ldrb	r2, [r7, #7]
 80090d2:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	2200      	movs	r2, #0
 80090d8:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	2200      	movs	r2, #0
 80090de:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	2200      	movs	r2, #0
 80090e4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	3330      	adds	r3, #48	@ 0x30
 80090ea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80090ee:	2100      	movs	r1, #0
 80090f0:	4618      	mov	r0, r3
 80090f2:	f7fe fa7a 	bl	80075ea <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80090f6:	79fb      	ldrb	r3, [r7, #7]
 80090f8:	f003 0320 	and.w	r3, r3, #32
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d060      	beq.n	80091c2 <f_open+0x35a>
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	68db      	ldr	r3, [r3, #12]
 8009104:	2b00      	cmp	r3, #0
 8009106:	d05c      	beq.n	80091c2 <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	68da      	ldr	r2, [r3, #12]
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8009110:	693b      	ldr	r3, [r7, #16]
 8009112:	895b      	ldrh	r3, [r3, #10]
 8009114:	025b      	lsls	r3, r3, #9
 8009116:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	689b      	ldr	r3, [r3, #8]
 800911c:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	68db      	ldr	r3, [r3, #12]
 8009122:	657b      	str	r3, [r7, #84]	@ 0x54
 8009124:	e016      	b.n	8009154 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800912a:	4618      	mov	r0, r3
 800912c:	f7fe fd25 	bl	8007b7a <get_fat>
 8009130:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8009132:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009134:	2b01      	cmp	r3, #1
 8009136:	d802      	bhi.n	800913e <f_open+0x2d6>
 8009138:	2302      	movs	r3, #2
 800913a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800913e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009140:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009144:	d102      	bne.n	800914c <f_open+0x2e4>
 8009146:	2301      	movs	r3, #1
 8009148:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800914c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800914e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009150:	1ad3      	subs	r3, r2, r3
 8009152:	657b      	str	r3, [r7, #84]	@ 0x54
 8009154:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009158:	2b00      	cmp	r3, #0
 800915a:	d103      	bne.n	8009164 <f_open+0x2fc>
 800915c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800915e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009160:	429a      	cmp	r2, r3
 8009162:	d8e0      	bhi.n	8009126 <f_open+0x2be>
				}
				fp->clust = clst;
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009168:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800916a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800916e:	2b00      	cmp	r3, #0
 8009170:	d127      	bne.n	80091c2 <f_open+0x35a>
 8009172:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009174:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009178:	2b00      	cmp	r3, #0
 800917a:	d022      	beq.n	80091c2 <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800917c:	693b      	ldr	r3, [r7, #16]
 800917e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8009180:	4618      	mov	r0, r3
 8009182:	f7fe fcdb 	bl	8007b3c <clust2sect>
 8009186:	6478      	str	r0, [r7, #68]	@ 0x44
 8009188:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800918a:	2b00      	cmp	r3, #0
 800918c:	d103      	bne.n	8009196 <f_open+0x32e>
						res = FR_INT_ERR;
 800918e:	2302      	movs	r3, #2
 8009190:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8009194:	e015      	b.n	80091c2 <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8009196:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009198:	0a5a      	lsrs	r2, r3, #9
 800919a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800919c:	441a      	add	r2, r3
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80091a2:	693b      	ldr	r3, [r7, #16]
 80091a4:	7858      	ldrb	r0, [r3, #1]
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	6a1a      	ldr	r2, [r3, #32]
 80091b0:	2301      	movs	r3, #1
 80091b2:	f7fe f919 	bl	80073e8 <disk_read>
 80091b6:	4603      	mov	r3, r0
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d002      	beq.n	80091c2 <f_open+0x35a>
 80091bc:	2301      	movs	r3, #1
 80091be:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80091c2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d002      	beq.n	80091d0 <f_open+0x368>
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	2200      	movs	r2, #0
 80091ce:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80091d0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 80091d4:	4618      	mov	r0, r3
 80091d6:	3760      	adds	r7, #96	@ 0x60
 80091d8:	46bd      	mov	sp, r7
 80091da:	bd80      	pop	{r7, pc}

080091dc <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80091dc:	b580      	push	{r7, lr}
 80091de:	b08e      	sub	sp, #56	@ 0x38
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	60f8      	str	r0, [r7, #12]
 80091e4:	60b9      	str	r1, [r7, #8]
 80091e6:	607a      	str	r2, [r7, #4]
 80091e8:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 80091ea:	68bb      	ldr	r3, [r7, #8]
 80091ec:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 80091ee:	683b      	ldr	r3, [r7, #0]
 80091f0:	2200      	movs	r2, #0
 80091f2:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	f107 0214 	add.w	r2, r7, #20
 80091fa:	4611      	mov	r1, r2
 80091fc:	4618      	mov	r0, r3
 80091fe:	f7ff fdb7 	bl	8008d70 <validate>
 8009202:	4603      	mov	r3, r0
 8009204:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8009208:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800920c:	2b00      	cmp	r3, #0
 800920e:	d107      	bne.n	8009220 <f_read+0x44>
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	7d5b      	ldrb	r3, [r3, #21]
 8009214:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8009218:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800921c:	2b00      	cmp	r3, #0
 800921e:	d002      	beq.n	8009226 <f_read+0x4a>
 8009220:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009224:	e115      	b.n	8009452 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	7d1b      	ldrb	r3, [r3, #20]
 800922a:	f003 0301 	and.w	r3, r3, #1
 800922e:	2b00      	cmp	r3, #0
 8009230:	d101      	bne.n	8009236 <f_read+0x5a>
 8009232:	2307      	movs	r3, #7
 8009234:	e10d      	b.n	8009452 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	68da      	ldr	r2, [r3, #12]
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	699b      	ldr	r3, [r3, #24]
 800923e:	1ad3      	subs	r3, r2, r3
 8009240:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8009242:	687a      	ldr	r2, [r7, #4]
 8009244:	6a3b      	ldr	r3, [r7, #32]
 8009246:	429a      	cmp	r2, r3
 8009248:	f240 80fe 	bls.w	8009448 <f_read+0x26c>
 800924c:	6a3b      	ldr	r3, [r7, #32]
 800924e:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8009250:	e0fa      	b.n	8009448 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	699b      	ldr	r3, [r3, #24]
 8009256:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800925a:	2b00      	cmp	r3, #0
 800925c:	f040 80c6 	bne.w	80093ec <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	699b      	ldr	r3, [r3, #24]
 8009264:	0a5b      	lsrs	r3, r3, #9
 8009266:	697a      	ldr	r2, [r7, #20]
 8009268:	8952      	ldrh	r2, [r2, #10]
 800926a:	3a01      	subs	r2, #1
 800926c:	4013      	ands	r3, r2
 800926e:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8009270:	69fb      	ldr	r3, [r7, #28]
 8009272:	2b00      	cmp	r3, #0
 8009274:	d12f      	bne.n	80092d6 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	699b      	ldr	r3, [r3, #24]
 800927a:	2b00      	cmp	r3, #0
 800927c:	d103      	bne.n	8009286 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	689b      	ldr	r3, [r3, #8]
 8009282:	633b      	str	r3, [r7, #48]	@ 0x30
 8009284:	e013      	b.n	80092ae <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800928a:	2b00      	cmp	r3, #0
 800928c:	d007      	beq.n	800929e <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	699b      	ldr	r3, [r3, #24]
 8009292:	4619      	mov	r1, r3
 8009294:	68f8      	ldr	r0, [r7, #12]
 8009296:	f7fe fefe 	bl	8008096 <clmt_clust>
 800929a:	6338      	str	r0, [r7, #48]	@ 0x30
 800929c:	e007      	b.n	80092ae <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800929e:	68fa      	ldr	r2, [r7, #12]
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	69db      	ldr	r3, [r3, #28]
 80092a4:	4619      	mov	r1, r3
 80092a6:	4610      	mov	r0, r2
 80092a8:	f7fe fc67 	bl	8007b7a <get_fat>
 80092ac:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80092ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092b0:	2b01      	cmp	r3, #1
 80092b2:	d804      	bhi.n	80092be <f_read+0xe2>
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	2202      	movs	r2, #2
 80092b8:	755a      	strb	r2, [r3, #21]
 80092ba:	2302      	movs	r3, #2
 80092bc:	e0c9      	b.n	8009452 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80092be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092c4:	d104      	bne.n	80092d0 <f_read+0xf4>
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	2201      	movs	r2, #1
 80092ca:	755a      	strb	r2, [r3, #21]
 80092cc:	2301      	movs	r3, #1
 80092ce:	e0c0      	b.n	8009452 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80092d4:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80092d6:	697a      	ldr	r2, [r7, #20]
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	69db      	ldr	r3, [r3, #28]
 80092dc:	4619      	mov	r1, r3
 80092de:	4610      	mov	r0, r2
 80092e0:	f7fe fc2c 	bl	8007b3c <clust2sect>
 80092e4:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80092e6:	69bb      	ldr	r3, [r7, #24]
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d104      	bne.n	80092f6 <f_read+0x11a>
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	2202      	movs	r2, #2
 80092f0:	755a      	strb	r2, [r3, #21]
 80092f2:	2302      	movs	r3, #2
 80092f4:	e0ad      	b.n	8009452 <f_read+0x276>
			sect += csect;
 80092f6:	69ba      	ldr	r2, [r7, #24]
 80092f8:	69fb      	ldr	r3, [r7, #28]
 80092fa:	4413      	add	r3, r2
 80092fc:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	0a5b      	lsrs	r3, r3, #9
 8009302:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8009304:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009306:	2b00      	cmp	r3, #0
 8009308:	d039      	beq.n	800937e <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800930a:	69fa      	ldr	r2, [r7, #28]
 800930c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800930e:	4413      	add	r3, r2
 8009310:	697a      	ldr	r2, [r7, #20]
 8009312:	8952      	ldrh	r2, [r2, #10]
 8009314:	4293      	cmp	r3, r2
 8009316:	d905      	bls.n	8009324 <f_read+0x148>
					cc = fs->csize - csect;
 8009318:	697b      	ldr	r3, [r7, #20]
 800931a:	895b      	ldrh	r3, [r3, #10]
 800931c:	461a      	mov	r2, r3
 800931e:	69fb      	ldr	r3, [r7, #28]
 8009320:	1ad3      	subs	r3, r2, r3
 8009322:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009324:	697b      	ldr	r3, [r7, #20]
 8009326:	7858      	ldrb	r0, [r3, #1]
 8009328:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800932a:	69ba      	ldr	r2, [r7, #24]
 800932c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800932e:	f7fe f85b 	bl	80073e8 <disk_read>
 8009332:	4603      	mov	r3, r0
 8009334:	2b00      	cmp	r3, #0
 8009336:	d004      	beq.n	8009342 <f_read+0x166>
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	2201      	movs	r2, #1
 800933c:	755a      	strb	r2, [r3, #21]
 800933e:	2301      	movs	r3, #1
 8009340:	e087      	b.n	8009452 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	7d1b      	ldrb	r3, [r3, #20]
 8009346:	b25b      	sxtb	r3, r3
 8009348:	2b00      	cmp	r3, #0
 800934a:	da14      	bge.n	8009376 <f_read+0x19a>
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	6a1a      	ldr	r2, [r3, #32]
 8009350:	69bb      	ldr	r3, [r7, #24]
 8009352:	1ad3      	subs	r3, r2, r3
 8009354:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009356:	429a      	cmp	r2, r3
 8009358:	d90d      	bls.n	8009376 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	6a1a      	ldr	r2, [r3, #32]
 800935e:	69bb      	ldr	r3, [r7, #24]
 8009360:	1ad3      	subs	r3, r2, r3
 8009362:	025b      	lsls	r3, r3, #9
 8009364:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009366:	18d0      	adds	r0, r2, r3
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	3330      	adds	r3, #48	@ 0x30
 800936c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009370:	4619      	mov	r1, r3
 8009372:	f7fe f919 	bl	80075a8 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8009376:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009378:	025b      	lsls	r3, r3, #9
 800937a:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 800937c:	e050      	b.n	8009420 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	6a1b      	ldr	r3, [r3, #32]
 8009382:	69ba      	ldr	r2, [r7, #24]
 8009384:	429a      	cmp	r2, r3
 8009386:	d02e      	beq.n	80093e6 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	7d1b      	ldrb	r3, [r3, #20]
 800938c:	b25b      	sxtb	r3, r3
 800938e:	2b00      	cmp	r3, #0
 8009390:	da18      	bge.n	80093c4 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009392:	697b      	ldr	r3, [r7, #20]
 8009394:	7858      	ldrb	r0, [r3, #1]
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	6a1a      	ldr	r2, [r3, #32]
 80093a0:	2301      	movs	r3, #1
 80093a2:	f7fe f841 	bl	8007428 <disk_write>
 80093a6:	4603      	mov	r3, r0
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d004      	beq.n	80093b6 <f_read+0x1da>
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	2201      	movs	r2, #1
 80093b0:	755a      	strb	r2, [r3, #21]
 80093b2:	2301      	movs	r3, #1
 80093b4:	e04d      	b.n	8009452 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	7d1b      	ldrb	r3, [r3, #20]
 80093ba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80093be:	b2da      	uxtb	r2, r3
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80093c4:	697b      	ldr	r3, [r7, #20]
 80093c6:	7858      	ldrb	r0, [r3, #1]
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80093ce:	2301      	movs	r3, #1
 80093d0:	69ba      	ldr	r2, [r7, #24]
 80093d2:	f7fe f809 	bl	80073e8 <disk_read>
 80093d6:	4603      	mov	r3, r0
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d004      	beq.n	80093e6 <f_read+0x20a>
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	2201      	movs	r2, #1
 80093e0:	755a      	strb	r2, [r3, #21]
 80093e2:	2301      	movs	r3, #1
 80093e4:	e035      	b.n	8009452 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	69ba      	ldr	r2, [r7, #24]
 80093ea:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	699b      	ldr	r3, [r3, #24]
 80093f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093f4:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 80093f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80093fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	429a      	cmp	r2, r3
 8009400:	d901      	bls.n	8009406 <f_read+0x22a>
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	699b      	ldr	r3, [r3, #24]
 8009410:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009414:	4413      	add	r3, r2
 8009416:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009418:	4619      	mov	r1, r3
 800941a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800941c:	f7fe f8c4 	bl	80075a8 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8009420:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009422:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009424:	4413      	add	r3, r2
 8009426:	627b      	str	r3, [r7, #36]	@ 0x24
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	699a      	ldr	r2, [r3, #24]
 800942c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800942e:	441a      	add	r2, r3
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	619a      	str	r2, [r3, #24]
 8009434:	683b      	ldr	r3, [r7, #0]
 8009436:	681a      	ldr	r2, [r3, #0]
 8009438:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800943a:	441a      	add	r2, r3
 800943c:	683b      	ldr	r3, [r7, #0]
 800943e:	601a      	str	r2, [r3, #0]
 8009440:	687a      	ldr	r2, [r7, #4]
 8009442:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009444:	1ad3      	subs	r3, r2, r3
 8009446:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	2b00      	cmp	r3, #0
 800944c:	f47f af01 	bne.w	8009252 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8009450:	2300      	movs	r3, #0
}
 8009452:	4618      	mov	r0, r3
 8009454:	3738      	adds	r7, #56	@ 0x38
 8009456:	46bd      	mov	sp, r7
 8009458:	bd80      	pop	{r7, pc}

0800945a <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800945a:	b580      	push	{r7, lr}
 800945c:	b086      	sub	sp, #24
 800945e:	af00      	add	r7, sp, #0
 8009460:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	f107 0208 	add.w	r2, r7, #8
 8009468:	4611      	mov	r1, r2
 800946a:	4618      	mov	r0, r3
 800946c:	f7ff fc80 	bl	8008d70 <validate>
 8009470:	4603      	mov	r3, r0
 8009472:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8009474:	7dfb      	ldrb	r3, [r7, #23]
 8009476:	2b00      	cmp	r3, #0
 8009478:	d168      	bne.n	800954c <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	7d1b      	ldrb	r3, [r3, #20]
 800947e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009482:	2b00      	cmp	r3, #0
 8009484:	d062      	beq.n	800954c <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	7d1b      	ldrb	r3, [r3, #20]
 800948a:	b25b      	sxtb	r3, r3
 800948c:	2b00      	cmp	r3, #0
 800948e:	da15      	bge.n	80094bc <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8009490:	68bb      	ldr	r3, [r7, #8]
 8009492:	7858      	ldrb	r0, [r3, #1]
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	6a1a      	ldr	r2, [r3, #32]
 800949e:	2301      	movs	r3, #1
 80094a0:	f7fd ffc2 	bl	8007428 <disk_write>
 80094a4:	4603      	mov	r3, r0
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d001      	beq.n	80094ae <f_sync+0x54>
 80094aa:	2301      	movs	r3, #1
 80094ac:	e04f      	b.n	800954e <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	7d1b      	ldrb	r3, [r3, #20]
 80094b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80094b6:	b2da      	uxtb	r2, r3
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80094bc:	f7fd fa1c 	bl	80068f8 <get_fattime>
 80094c0:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80094c2:	68ba      	ldr	r2, [r7, #8]
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094c8:	4619      	mov	r1, r3
 80094ca:	4610      	mov	r0, r2
 80094cc:	f7fe fa9a 	bl	8007a04 <move_window>
 80094d0:	4603      	mov	r3, r0
 80094d2:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80094d4:	7dfb      	ldrb	r3, [r7, #23]
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d138      	bne.n	800954c <f_sync+0xf2>
					dir = fp->dir_ptr;
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094de:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	330b      	adds	r3, #11
 80094e4:	781a      	ldrb	r2, [r3, #0]
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	330b      	adds	r3, #11
 80094ea:	f042 0220 	orr.w	r2, r2, #32
 80094ee:	b2d2      	uxtb	r2, r2
 80094f0:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	6818      	ldr	r0, [r3, #0]
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	689b      	ldr	r3, [r3, #8]
 80094fa:	461a      	mov	r2, r3
 80094fc:	68f9      	ldr	r1, [r7, #12]
 80094fe:	f7fe ffa4 	bl	800844a <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	f103 021c 	add.w	r2, r3, #28
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	68db      	ldr	r3, [r3, #12]
 800950c:	4619      	mov	r1, r3
 800950e:	4610      	mov	r0, r2
 8009510:	f7fe f81e 	bl	8007550 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	3316      	adds	r3, #22
 8009518:	6939      	ldr	r1, [r7, #16]
 800951a:	4618      	mov	r0, r3
 800951c:	f7fe f818 	bl	8007550 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	3312      	adds	r3, #18
 8009524:	2100      	movs	r1, #0
 8009526:	4618      	mov	r0, r3
 8009528:	f7fd fff7 	bl	800751a <st_word>
					fs->wflag = 1;
 800952c:	68bb      	ldr	r3, [r7, #8]
 800952e:	2201      	movs	r2, #1
 8009530:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8009532:	68bb      	ldr	r3, [r7, #8]
 8009534:	4618      	mov	r0, r3
 8009536:	f7fe fa93 	bl	8007a60 <sync_fs>
 800953a:	4603      	mov	r3, r0
 800953c:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	7d1b      	ldrb	r3, [r3, #20]
 8009542:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009546:	b2da      	uxtb	r2, r3
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800954c:	7dfb      	ldrb	r3, [r7, #23]
}
 800954e:	4618      	mov	r0, r3
 8009550:	3718      	adds	r7, #24
 8009552:	46bd      	mov	sp, r7
 8009554:	bd80      	pop	{r7, pc}

08009556 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8009556:	b580      	push	{r7, lr}
 8009558:	b084      	sub	sp, #16
 800955a:	af00      	add	r7, sp, #0
 800955c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800955e:	6878      	ldr	r0, [r7, #4]
 8009560:	f7ff ff7b 	bl	800945a <f_sync>
 8009564:	4603      	mov	r3, r0
 8009566:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8009568:	7bfb      	ldrb	r3, [r7, #15]
 800956a:	2b00      	cmp	r3, #0
 800956c:	d118      	bne.n	80095a0 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	f107 0208 	add.w	r2, r7, #8
 8009574:	4611      	mov	r1, r2
 8009576:	4618      	mov	r0, r3
 8009578:	f7ff fbfa 	bl	8008d70 <validate>
 800957c:	4603      	mov	r3, r0
 800957e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8009580:	7bfb      	ldrb	r3, [r7, #15]
 8009582:	2b00      	cmp	r3, #0
 8009584:	d10c      	bne.n	80095a0 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	691b      	ldr	r3, [r3, #16]
 800958a:	4618      	mov	r0, r3
 800958c:	f7fe f996 	bl	80078bc <dec_lock>
 8009590:	4603      	mov	r3, r0
 8009592:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8009594:	7bfb      	ldrb	r3, [r7, #15]
 8009596:	2b00      	cmp	r3, #0
 8009598:	d102      	bne.n	80095a0 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	2200      	movs	r2, #0
 800959e:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80095a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80095a2:	4618      	mov	r0, r3
 80095a4:	3710      	adds	r7, #16
 80095a6:	46bd      	mov	sp, r7
 80095a8:	bd80      	pop	{r7, pc}

080095aa <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 80095aa:	b580      	push	{r7, lr}
 80095ac:	b088      	sub	sp, #32
 80095ae:	af00      	add	r7, sp, #0
 80095b0:	60f8      	str	r0, [r7, #12]
 80095b2:	60b9      	str	r1, [r7, #8]
 80095b4:	607a      	str	r2, [r7, #4]
	int n = 0;
 80095b6:	2300      	movs	r3, #0
 80095b8:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 80095be:	e01c      	b.n	80095fa <f_gets+0x50>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 80095c0:	f107 0310 	add.w	r3, r7, #16
 80095c4:	f107 0114 	add.w	r1, r7, #20
 80095c8:	2201      	movs	r2, #1
 80095ca:	6878      	ldr	r0, [r7, #4]
 80095cc:	f7ff fe06 	bl	80091dc <f_read>
		if (rc != 1) break;
 80095d0:	693b      	ldr	r3, [r7, #16]
 80095d2:	2b01      	cmp	r3, #1
 80095d4:	d117      	bne.n	8009606 <f_gets+0x5c>
		c = s[0];
 80095d6:	7d3b      	ldrb	r3, [r7, #20]
 80095d8:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 80095da:	7dfb      	ldrb	r3, [r7, #23]
 80095dc:	2b0d      	cmp	r3, #13
 80095de:	d00b      	beq.n	80095f8 <f_gets+0x4e>
		*p++ = c;
 80095e0:	69bb      	ldr	r3, [r7, #24]
 80095e2:	1c5a      	adds	r2, r3, #1
 80095e4:	61ba      	str	r2, [r7, #24]
 80095e6:	7dfa      	ldrb	r2, [r7, #23]
 80095e8:	701a      	strb	r2, [r3, #0]
		n++;
 80095ea:	69fb      	ldr	r3, [r7, #28]
 80095ec:	3301      	adds	r3, #1
 80095ee:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 80095f0:	7dfb      	ldrb	r3, [r7, #23]
 80095f2:	2b0a      	cmp	r3, #10
 80095f4:	d009      	beq.n	800960a <f_gets+0x60>
 80095f6:	e000      	b.n	80095fa <f_gets+0x50>
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 80095f8:	bf00      	nop
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 80095fa:	68bb      	ldr	r3, [r7, #8]
 80095fc:	3b01      	subs	r3, #1
 80095fe:	69fa      	ldr	r2, [r7, #28]
 8009600:	429a      	cmp	r2, r3
 8009602:	dbdd      	blt.n	80095c0 <f_gets+0x16>
 8009604:	e002      	b.n	800960c <f_gets+0x62>
		if (rc != 1) break;
 8009606:	bf00      	nop
 8009608:	e000      	b.n	800960c <f_gets+0x62>
		if (c == '\n') break;		/* Break on EOL */
 800960a:	bf00      	nop
	}
	*p = 0;
 800960c:	69bb      	ldr	r3, [r7, #24]
 800960e:	2200      	movs	r2, #0
 8009610:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8009612:	69fb      	ldr	r3, [r7, #28]
 8009614:	2b00      	cmp	r3, #0
 8009616:	d001      	beq.n	800961c <f_gets+0x72>
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	e000      	b.n	800961e <f_gets+0x74>
 800961c:	2300      	movs	r3, #0
}
 800961e:	4618      	mov	r0, r3
 8009620:	3720      	adds	r7, #32
 8009622:	46bd      	mov	sp, r7
 8009624:	bd80      	pop	{r7, pc}
	...

08009628 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8009628:	b480      	push	{r7}
 800962a:	b087      	sub	sp, #28
 800962c:	af00      	add	r7, sp, #0
 800962e:	60f8      	str	r0, [r7, #12]
 8009630:	60b9      	str	r1, [r7, #8]
 8009632:	4613      	mov	r3, r2
 8009634:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8009636:	2301      	movs	r3, #1
 8009638:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800963a:	2300      	movs	r3, #0
 800963c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800963e:	4b1f      	ldr	r3, [pc, #124]	@ (80096bc <FATFS_LinkDriverEx+0x94>)
 8009640:	7a5b      	ldrb	r3, [r3, #9]
 8009642:	b2db      	uxtb	r3, r3
 8009644:	2b00      	cmp	r3, #0
 8009646:	d131      	bne.n	80096ac <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8009648:	4b1c      	ldr	r3, [pc, #112]	@ (80096bc <FATFS_LinkDriverEx+0x94>)
 800964a:	7a5b      	ldrb	r3, [r3, #9]
 800964c:	b2db      	uxtb	r3, r3
 800964e:	461a      	mov	r2, r3
 8009650:	4b1a      	ldr	r3, [pc, #104]	@ (80096bc <FATFS_LinkDriverEx+0x94>)
 8009652:	2100      	movs	r1, #0
 8009654:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8009656:	4b19      	ldr	r3, [pc, #100]	@ (80096bc <FATFS_LinkDriverEx+0x94>)
 8009658:	7a5b      	ldrb	r3, [r3, #9]
 800965a:	b2db      	uxtb	r3, r3
 800965c:	4a17      	ldr	r2, [pc, #92]	@ (80096bc <FATFS_LinkDriverEx+0x94>)
 800965e:	009b      	lsls	r3, r3, #2
 8009660:	4413      	add	r3, r2
 8009662:	68fa      	ldr	r2, [r7, #12]
 8009664:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8009666:	4b15      	ldr	r3, [pc, #84]	@ (80096bc <FATFS_LinkDriverEx+0x94>)
 8009668:	7a5b      	ldrb	r3, [r3, #9]
 800966a:	b2db      	uxtb	r3, r3
 800966c:	461a      	mov	r2, r3
 800966e:	4b13      	ldr	r3, [pc, #76]	@ (80096bc <FATFS_LinkDriverEx+0x94>)
 8009670:	4413      	add	r3, r2
 8009672:	79fa      	ldrb	r2, [r7, #7]
 8009674:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8009676:	4b11      	ldr	r3, [pc, #68]	@ (80096bc <FATFS_LinkDriverEx+0x94>)
 8009678:	7a5b      	ldrb	r3, [r3, #9]
 800967a:	b2db      	uxtb	r3, r3
 800967c:	1c5a      	adds	r2, r3, #1
 800967e:	b2d1      	uxtb	r1, r2
 8009680:	4a0e      	ldr	r2, [pc, #56]	@ (80096bc <FATFS_LinkDriverEx+0x94>)
 8009682:	7251      	strb	r1, [r2, #9]
 8009684:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8009686:	7dbb      	ldrb	r3, [r7, #22]
 8009688:	3330      	adds	r3, #48	@ 0x30
 800968a:	b2da      	uxtb	r2, r3
 800968c:	68bb      	ldr	r3, [r7, #8]
 800968e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8009690:	68bb      	ldr	r3, [r7, #8]
 8009692:	3301      	adds	r3, #1
 8009694:	223a      	movs	r2, #58	@ 0x3a
 8009696:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8009698:	68bb      	ldr	r3, [r7, #8]
 800969a:	3302      	adds	r3, #2
 800969c:	222f      	movs	r2, #47	@ 0x2f
 800969e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80096a0:	68bb      	ldr	r3, [r7, #8]
 80096a2:	3303      	adds	r3, #3
 80096a4:	2200      	movs	r2, #0
 80096a6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80096a8:	2300      	movs	r3, #0
 80096aa:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80096ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80096ae:	4618      	mov	r0, r3
 80096b0:	371c      	adds	r7, #28
 80096b2:	46bd      	mov	sp, r7
 80096b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b8:	4770      	bx	lr
 80096ba:	bf00      	nop
 80096bc:	20000598 	.word	0x20000598

080096c0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80096c0:	b580      	push	{r7, lr}
 80096c2:	b082      	sub	sp, #8
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	6078      	str	r0, [r7, #4]
 80096c8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80096ca:	2200      	movs	r2, #0
 80096cc:	6839      	ldr	r1, [r7, #0]
 80096ce:	6878      	ldr	r0, [r7, #4]
 80096d0:	f7ff ffaa 	bl	8009628 <FATFS_LinkDriverEx>
 80096d4:	4603      	mov	r3, r0
}
 80096d6:	4618      	mov	r0, r3
 80096d8:	3708      	adds	r7, #8
 80096da:	46bd      	mov	sp, r7
 80096dc:	bd80      	pop	{r7, pc}

080096de <atof>:
 80096de:	2100      	movs	r1, #0
 80096e0:	f000 be06 	b.w	800a2f0 <strtod>

080096e4 <atoi>:
 80096e4:	220a      	movs	r2, #10
 80096e6:	2100      	movs	r1, #0
 80096e8:	f000 be88 	b.w	800a3fc <strtol>

080096ec <sulp>:
 80096ec:	b570      	push	{r4, r5, r6, lr}
 80096ee:	4604      	mov	r4, r0
 80096f0:	460d      	mov	r5, r1
 80096f2:	ec45 4b10 	vmov	d0, r4, r5
 80096f6:	4616      	mov	r6, r2
 80096f8:	f002 f83a 	bl	800b770 <__ulp>
 80096fc:	ec51 0b10 	vmov	r0, r1, d0
 8009700:	b17e      	cbz	r6, 8009722 <sulp+0x36>
 8009702:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009706:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800970a:	2b00      	cmp	r3, #0
 800970c:	dd09      	ble.n	8009722 <sulp+0x36>
 800970e:	051b      	lsls	r3, r3, #20
 8009710:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8009714:	2400      	movs	r4, #0
 8009716:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800971a:	4622      	mov	r2, r4
 800971c:	462b      	mov	r3, r5
 800971e:	f7f6 ff7b 	bl	8000618 <__aeabi_dmul>
 8009722:	ec41 0b10 	vmov	d0, r0, r1
 8009726:	bd70      	pop	{r4, r5, r6, pc}

08009728 <_strtod_l>:
 8009728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800972c:	b09f      	sub	sp, #124	@ 0x7c
 800972e:	460c      	mov	r4, r1
 8009730:	9217      	str	r2, [sp, #92]	@ 0x5c
 8009732:	2200      	movs	r2, #0
 8009734:	921a      	str	r2, [sp, #104]	@ 0x68
 8009736:	9005      	str	r0, [sp, #20]
 8009738:	f04f 0a00 	mov.w	sl, #0
 800973c:	f04f 0b00 	mov.w	fp, #0
 8009740:	460a      	mov	r2, r1
 8009742:	9219      	str	r2, [sp, #100]	@ 0x64
 8009744:	7811      	ldrb	r1, [r2, #0]
 8009746:	292b      	cmp	r1, #43	@ 0x2b
 8009748:	d04a      	beq.n	80097e0 <_strtod_l+0xb8>
 800974a:	d838      	bhi.n	80097be <_strtod_l+0x96>
 800974c:	290d      	cmp	r1, #13
 800974e:	d832      	bhi.n	80097b6 <_strtod_l+0x8e>
 8009750:	2908      	cmp	r1, #8
 8009752:	d832      	bhi.n	80097ba <_strtod_l+0x92>
 8009754:	2900      	cmp	r1, #0
 8009756:	d03b      	beq.n	80097d0 <_strtod_l+0xa8>
 8009758:	2200      	movs	r2, #0
 800975a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800975c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800975e:	782a      	ldrb	r2, [r5, #0]
 8009760:	2a30      	cmp	r2, #48	@ 0x30
 8009762:	f040 80b3 	bne.w	80098cc <_strtod_l+0x1a4>
 8009766:	786a      	ldrb	r2, [r5, #1]
 8009768:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800976c:	2a58      	cmp	r2, #88	@ 0x58
 800976e:	d16e      	bne.n	800984e <_strtod_l+0x126>
 8009770:	9302      	str	r3, [sp, #8]
 8009772:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009774:	9301      	str	r3, [sp, #4]
 8009776:	ab1a      	add	r3, sp, #104	@ 0x68
 8009778:	9300      	str	r3, [sp, #0]
 800977a:	4a8e      	ldr	r2, [pc, #568]	@ (80099b4 <_strtod_l+0x28c>)
 800977c:	9805      	ldr	r0, [sp, #20]
 800977e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8009780:	a919      	add	r1, sp, #100	@ 0x64
 8009782:	f001 f8ef 	bl	800a964 <__gethex>
 8009786:	f010 060f 	ands.w	r6, r0, #15
 800978a:	4604      	mov	r4, r0
 800978c:	d005      	beq.n	800979a <_strtod_l+0x72>
 800978e:	2e06      	cmp	r6, #6
 8009790:	d128      	bne.n	80097e4 <_strtod_l+0xbc>
 8009792:	3501      	adds	r5, #1
 8009794:	2300      	movs	r3, #0
 8009796:	9519      	str	r5, [sp, #100]	@ 0x64
 8009798:	930b      	str	r3, [sp, #44]	@ 0x2c
 800979a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800979c:	2b00      	cmp	r3, #0
 800979e:	f040 858e 	bne.w	800a2be <_strtod_l+0xb96>
 80097a2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80097a4:	b1cb      	cbz	r3, 80097da <_strtod_l+0xb2>
 80097a6:	4652      	mov	r2, sl
 80097a8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 80097ac:	ec43 2b10 	vmov	d0, r2, r3
 80097b0:	b01f      	add	sp, #124	@ 0x7c
 80097b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097b6:	2920      	cmp	r1, #32
 80097b8:	d1ce      	bne.n	8009758 <_strtod_l+0x30>
 80097ba:	3201      	adds	r2, #1
 80097bc:	e7c1      	b.n	8009742 <_strtod_l+0x1a>
 80097be:	292d      	cmp	r1, #45	@ 0x2d
 80097c0:	d1ca      	bne.n	8009758 <_strtod_l+0x30>
 80097c2:	2101      	movs	r1, #1
 80097c4:	910b      	str	r1, [sp, #44]	@ 0x2c
 80097c6:	1c51      	adds	r1, r2, #1
 80097c8:	9119      	str	r1, [sp, #100]	@ 0x64
 80097ca:	7852      	ldrb	r2, [r2, #1]
 80097cc:	2a00      	cmp	r2, #0
 80097ce:	d1c5      	bne.n	800975c <_strtod_l+0x34>
 80097d0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80097d2:	9419      	str	r4, [sp, #100]	@ 0x64
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	f040 8570 	bne.w	800a2ba <_strtod_l+0xb92>
 80097da:	4652      	mov	r2, sl
 80097dc:	465b      	mov	r3, fp
 80097de:	e7e5      	b.n	80097ac <_strtod_l+0x84>
 80097e0:	2100      	movs	r1, #0
 80097e2:	e7ef      	b.n	80097c4 <_strtod_l+0x9c>
 80097e4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80097e6:	b13a      	cbz	r2, 80097f8 <_strtod_l+0xd0>
 80097e8:	2135      	movs	r1, #53	@ 0x35
 80097ea:	a81c      	add	r0, sp, #112	@ 0x70
 80097ec:	f002 f8ba 	bl	800b964 <__copybits>
 80097f0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80097f2:	9805      	ldr	r0, [sp, #20]
 80097f4:	f001 fc88 	bl	800b108 <_Bfree>
 80097f8:	3e01      	subs	r6, #1
 80097fa:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80097fc:	2e04      	cmp	r6, #4
 80097fe:	d806      	bhi.n	800980e <_strtod_l+0xe6>
 8009800:	e8df f006 	tbb	[pc, r6]
 8009804:	201d0314 	.word	0x201d0314
 8009808:	14          	.byte	0x14
 8009809:	00          	.byte	0x00
 800980a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800980e:	05e1      	lsls	r1, r4, #23
 8009810:	bf48      	it	mi
 8009812:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8009816:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800981a:	0d1b      	lsrs	r3, r3, #20
 800981c:	051b      	lsls	r3, r3, #20
 800981e:	2b00      	cmp	r3, #0
 8009820:	d1bb      	bne.n	800979a <_strtod_l+0x72>
 8009822:	f000 ffa7 	bl	800a774 <__errno>
 8009826:	2322      	movs	r3, #34	@ 0x22
 8009828:	6003      	str	r3, [r0, #0]
 800982a:	e7b6      	b.n	800979a <_strtod_l+0x72>
 800982c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8009830:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8009834:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8009838:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800983c:	e7e7      	b.n	800980e <_strtod_l+0xe6>
 800983e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 80099bc <_strtod_l+0x294>
 8009842:	e7e4      	b.n	800980e <_strtod_l+0xe6>
 8009844:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8009848:	f04f 3aff 	mov.w	sl, #4294967295
 800984c:	e7df      	b.n	800980e <_strtod_l+0xe6>
 800984e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009850:	1c5a      	adds	r2, r3, #1
 8009852:	9219      	str	r2, [sp, #100]	@ 0x64
 8009854:	785b      	ldrb	r3, [r3, #1]
 8009856:	2b30      	cmp	r3, #48	@ 0x30
 8009858:	d0f9      	beq.n	800984e <_strtod_l+0x126>
 800985a:	2b00      	cmp	r3, #0
 800985c:	d09d      	beq.n	800979a <_strtod_l+0x72>
 800985e:	2301      	movs	r3, #1
 8009860:	9309      	str	r3, [sp, #36]	@ 0x24
 8009862:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009864:	930c      	str	r3, [sp, #48]	@ 0x30
 8009866:	2300      	movs	r3, #0
 8009868:	9308      	str	r3, [sp, #32]
 800986a:	930a      	str	r3, [sp, #40]	@ 0x28
 800986c:	461f      	mov	r7, r3
 800986e:	220a      	movs	r2, #10
 8009870:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8009872:	7805      	ldrb	r5, [r0, #0]
 8009874:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8009878:	b2d9      	uxtb	r1, r3
 800987a:	2909      	cmp	r1, #9
 800987c:	d928      	bls.n	80098d0 <_strtod_l+0x1a8>
 800987e:	494e      	ldr	r1, [pc, #312]	@ (80099b8 <_strtod_l+0x290>)
 8009880:	2201      	movs	r2, #1
 8009882:	f000 ff0b 	bl	800a69c <strncmp>
 8009886:	2800      	cmp	r0, #0
 8009888:	d032      	beq.n	80098f0 <_strtod_l+0x1c8>
 800988a:	2000      	movs	r0, #0
 800988c:	462a      	mov	r2, r5
 800988e:	4681      	mov	r9, r0
 8009890:	463d      	mov	r5, r7
 8009892:	4603      	mov	r3, r0
 8009894:	2a65      	cmp	r2, #101	@ 0x65
 8009896:	d001      	beq.n	800989c <_strtod_l+0x174>
 8009898:	2a45      	cmp	r2, #69	@ 0x45
 800989a:	d114      	bne.n	80098c6 <_strtod_l+0x19e>
 800989c:	b91d      	cbnz	r5, 80098a6 <_strtod_l+0x17e>
 800989e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80098a0:	4302      	orrs	r2, r0
 80098a2:	d095      	beq.n	80097d0 <_strtod_l+0xa8>
 80098a4:	2500      	movs	r5, #0
 80098a6:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80098a8:	1c62      	adds	r2, r4, #1
 80098aa:	9219      	str	r2, [sp, #100]	@ 0x64
 80098ac:	7862      	ldrb	r2, [r4, #1]
 80098ae:	2a2b      	cmp	r2, #43	@ 0x2b
 80098b0:	d077      	beq.n	80099a2 <_strtod_l+0x27a>
 80098b2:	2a2d      	cmp	r2, #45	@ 0x2d
 80098b4:	d07b      	beq.n	80099ae <_strtod_l+0x286>
 80098b6:	f04f 0c00 	mov.w	ip, #0
 80098ba:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80098be:	2909      	cmp	r1, #9
 80098c0:	f240 8082 	bls.w	80099c8 <_strtod_l+0x2a0>
 80098c4:	9419      	str	r4, [sp, #100]	@ 0x64
 80098c6:	f04f 0800 	mov.w	r8, #0
 80098ca:	e0a2      	b.n	8009a12 <_strtod_l+0x2ea>
 80098cc:	2300      	movs	r3, #0
 80098ce:	e7c7      	b.n	8009860 <_strtod_l+0x138>
 80098d0:	2f08      	cmp	r7, #8
 80098d2:	bfd5      	itete	le
 80098d4:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 80098d6:	9908      	ldrgt	r1, [sp, #32]
 80098d8:	fb02 3301 	mlale	r3, r2, r1, r3
 80098dc:	fb02 3301 	mlagt	r3, r2, r1, r3
 80098e0:	f100 0001 	add.w	r0, r0, #1
 80098e4:	bfd4      	ite	le
 80098e6:	930a      	strle	r3, [sp, #40]	@ 0x28
 80098e8:	9308      	strgt	r3, [sp, #32]
 80098ea:	3701      	adds	r7, #1
 80098ec:	9019      	str	r0, [sp, #100]	@ 0x64
 80098ee:	e7bf      	b.n	8009870 <_strtod_l+0x148>
 80098f0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80098f2:	1c5a      	adds	r2, r3, #1
 80098f4:	9219      	str	r2, [sp, #100]	@ 0x64
 80098f6:	785a      	ldrb	r2, [r3, #1]
 80098f8:	b37f      	cbz	r7, 800995a <_strtod_l+0x232>
 80098fa:	4681      	mov	r9, r0
 80098fc:	463d      	mov	r5, r7
 80098fe:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8009902:	2b09      	cmp	r3, #9
 8009904:	d912      	bls.n	800992c <_strtod_l+0x204>
 8009906:	2301      	movs	r3, #1
 8009908:	e7c4      	b.n	8009894 <_strtod_l+0x16c>
 800990a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800990c:	1c5a      	adds	r2, r3, #1
 800990e:	9219      	str	r2, [sp, #100]	@ 0x64
 8009910:	785a      	ldrb	r2, [r3, #1]
 8009912:	3001      	adds	r0, #1
 8009914:	2a30      	cmp	r2, #48	@ 0x30
 8009916:	d0f8      	beq.n	800990a <_strtod_l+0x1e2>
 8009918:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800991c:	2b08      	cmp	r3, #8
 800991e:	f200 84d3 	bhi.w	800a2c8 <_strtod_l+0xba0>
 8009922:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009924:	930c      	str	r3, [sp, #48]	@ 0x30
 8009926:	4681      	mov	r9, r0
 8009928:	2000      	movs	r0, #0
 800992a:	4605      	mov	r5, r0
 800992c:	3a30      	subs	r2, #48	@ 0x30
 800992e:	f100 0301 	add.w	r3, r0, #1
 8009932:	d02a      	beq.n	800998a <_strtod_l+0x262>
 8009934:	4499      	add	r9, r3
 8009936:	eb00 0c05 	add.w	ip, r0, r5
 800993a:	462b      	mov	r3, r5
 800993c:	210a      	movs	r1, #10
 800993e:	4563      	cmp	r3, ip
 8009940:	d10d      	bne.n	800995e <_strtod_l+0x236>
 8009942:	1c69      	adds	r1, r5, #1
 8009944:	4401      	add	r1, r0
 8009946:	4428      	add	r0, r5
 8009948:	2808      	cmp	r0, #8
 800994a:	dc16      	bgt.n	800997a <_strtod_l+0x252>
 800994c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800994e:	230a      	movs	r3, #10
 8009950:	fb03 2300 	mla	r3, r3, r0, r2
 8009954:	930a      	str	r3, [sp, #40]	@ 0x28
 8009956:	2300      	movs	r3, #0
 8009958:	e018      	b.n	800998c <_strtod_l+0x264>
 800995a:	4638      	mov	r0, r7
 800995c:	e7da      	b.n	8009914 <_strtod_l+0x1ec>
 800995e:	2b08      	cmp	r3, #8
 8009960:	f103 0301 	add.w	r3, r3, #1
 8009964:	dc03      	bgt.n	800996e <_strtod_l+0x246>
 8009966:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8009968:	434e      	muls	r6, r1
 800996a:	960a      	str	r6, [sp, #40]	@ 0x28
 800996c:	e7e7      	b.n	800993e <_strtod_l+0x216>
 800996e:	2b10      	cmp	r3, #16
 8009970:	bfde      	ittt	le
 8009972:	9e08      	ldrle	r6, [sp, #32]
 8009974:	434e      	mulle	r6, r1
 8009976:	9608      	strle	r6, [sp, #32]
 8009978:	e7e1      	b.n	800993e <_strtod_l+0x216>
 800997a:	280f      	cmp	r0, #15
 800997c:	dceb      	bgt.n	8009956 <_strtod_l+0x22e>
 800997e:	9808      	ldr	r0, [sp, #32]
 8009980:	230a      	movs	r3, #10
 8009982:	fb03 2300 	mla	r3, r3, r0, r2
 8009986:	9308      	str	r3, [sp, #32]
 8009988:	e7e5      	b.n	8009956 <_strtod_l+0x22e>
 800998a:	4629      	mov	r1, r5
 800998c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800998e:	1c50      	adds	r0, r2, #1
 8009990:	9019      	str	r0, [sp, #100]	@ 0x64
 8009992:	7852      	ldrb	r2, [r2, #1]
 8009994:	4618      	mov	r0, r3
 8009996:	460d      	mov	r5, r1
 8009998:	e7b1      	b.n	80098fe <_strtod_l+0x1d6>
 800999a:	f04f 0900 	mov.w	r9, #0
 800999e:	2301      	movs	r3, #1
 80099a0:	e77d      	b.n	800989e <_strtod_l+0x176>
 80099a2:	f04f 0c00 	mov.w	ip, #0
 80099a6:	1ca2      	adds	r2, r4, #2
 80099a8:	9219      	str	r2, [sp, #100]	@ 0x64
 80099aa:	78a2      	ldrb	r2, [r4, #2]
 80099ac:	e785      	b.n	80098ba <_strtod_l+0x192>
 80099ae:	f04f 0c01 	mov.w	ip, #1
 80099b2:	e7f8      	b.n	80099a6 <_strtod_l+0x27e>
 80099b4:	0800cc18 	.word	0x0800cc18
 80099b8:	0800cbf4 	.word	0x0800cbf4
 80099bc:	7ff00000 	.word	0x7ff00000
 80099c0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80099c2:	1c51      	adds	r1, r2, #1
 80099c4:	9119      	str	r1, [sp, #100]	@ 0x64
 80099c6:	7852      	ldrb	r2, [r2, #1]
 80099c8:	2a30      	cmp	r2, #48	@ 0x30
 80099ca:	d0f9      	beq.n	80099c0 <_strtod_l+0x298>
 80099cc:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80099d0:	2908      	cmp	r1, #8
 80099d2:	f63f af78 	bhi.w	80098c6 <_strtod_l+0x19e>
 80099d6:	3a30      	subs	r2, #48	@ 0x30
 80099d8:	920e      	str	r2, [sp, #56]	@ 0x38
 80099da:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80099dc:	920f      	str	r2, [sp, #60]	@ 0x3c
 80099de:	f04f 080a 	mov.w	r8, #10
 80099e2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80099e4:	1c56      	adds	r6, r2, #1
 80099e6:	9619      	str	r6, [sp, #100]	@ 0x64
 80099e8:	7852      	ldrb	r2, [r2, #1]
 80099ea:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80099ee:	f1be 0f09 	cmp.w	lr, #9
 80099f2:	d939      	bls.n	8009a68 <_strtod_l+0x340>
 80099f4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80099f6:	1a76      	subs	r6, r6, r1
 80099f8:	2e08      	cmp	r6, #8
 80099fa:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80099fe:	dc03      	bgt.n	8009a08 <_strtod_l+0x2e0>
 8009a00:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8009a02:	4588      	cmp	r8, r1
 8009a04:	bfa8      	it	ge
 8009a06:	4688      	movge	r8, r1
 8009a08:	f1bc 0f00 	cmp.w	ip, #0
 8009a0c:	d001      	beq.n	8009a12 <_strtod_l+0x2ea>
 8009a0e:	f1c8 0800 	rsb	r8, r8, #0
 8009a12:	2d00      	cmp	r5, #0
 8009a14:	d14e      	bne.n	8009ab4 <_strtod_l+0x38c>
 8009a16:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009a18:	4308      	orrs	r0, r1
 8009a1a:	f47f aebe 	bne.w	800979a <_strtod_l+0x72>
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	f47f aed6 	bne.w	80097d0 <_strtod_l+0xa8>
 8009a24:	2a69      	cmp	r2, #105	@ 0x69
 8009a26:	d028      	beq.n	8009a7a <_strtod_l+0x352>
 8009a28:	dc25      	bgt.n	8009a76 <_strtod_l+0x34e>
 8009a2a:	2a49      	cmp	r2, #73	@ 0x49
 8009a2c:	d025      	beq.n	8009a7a <_strtod_l+0x352>
 8009a2e:	2a4e      	cmp	r2, #78	@ 0x4e
 8009a30:	f47f aece 	bne.w	80097d0 <_strtod_l+0xa8>
 8009a34:	499b      	ldr	r1, [pc, #620]	@ (8009ca4 <_strtod_l+0x57c>)
 8009a36:	a819      	add	r0, sp, #100	@ 0x64
 8009a38:	f001 f9b6 	bl	800ada8 <__match>
 8009a3c:	2800      	cmp	r0, #0
 8009a3e:	f43f aec7 	beq.w	80097d0 <_strtod_l+0xa8>
 8009a42:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009a44:	781b      	ldrb	r3, [r3, #0]
 8009a46:	2b28      	cmp	r3, #40	@ 0x28
 8009a48:	d12e      	bne.n	8009aa8 <_strtod_l+0x380>
 8009a4a:	4997      	ldr	r1, [pc, #604]	@ (8009ca8 <_strtod_l+0x580>)
 8009a4c:	aa1c      	add	r2, sp, #112	@ 0x70
 8009a4e:	a819      	add	r0, sp, #100	@ 0x64
 8009a50:	f001 f9be 	bl	800add0 <__hexnan>
 8009a54:	2805      	cmp	r0, #5
 8009a56:	d127      	bne.n	8009aa8 <_strtod_l+0x380>
 8009a58:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009a5a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8009a5e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8009a62:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8009a66:	e698      	b.n	800979a <_strtod_l+0x72>
 8009a68:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8009a6a:	fb08 2101 	mla	r1, r8, r1, r2
 8009a6e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8009a72:	920e      	str	r2, [sp, #56]	@ 0x38
 8009a74:	e7b5      	b.n	80099e2 <_strtod_l+0x2ba>
 8009a76:	2a6e      	cmp	r2, #110	@ 0x6e
 8009a78:	e7da      	b.n	8009a30 <_strtod_l+0x308>
 8009a7a:	498c      	ldr	r1, [pc, #560]	@ (8009cac <_strtod_l+0x584>)
 8009a7c:	a819      	add	r0, sp, #100	@ 0x64
 8009a7e:	f001 f993 	bl	800ada8 <__match>
 8009a82:	2800      	cmp	r0, #0
 8009a84:	f43f aea4 	beq.w	80097d0 <_strtod_l+0xa8>
 8009a88:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009a8a:	4989      	ldr	r1, [pc, #548]	@ (8009cb0 <_strtod_l+0x588>)
 8009a8c:	3b01      	subs	r3, #1
 8009a8e:	a819      	add	r0, sp, #100	@ 0x64
 8009a90:	9319      	str	r3, [sp, #100]	@ 0x64
 8009a92:	f001 f989 	bl	800ada8 <__match>
 8009a96:	b910      	cbnz	r0, 8009a9e <_strtod_l+0x376>
 8009a98:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009a9a:	3301      	adds	r3, #1
 8009a9c:	9319      	str	r3, [sp, #100]	@ 0x64
 8009a9e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8009cc0 <_strtod_l+0x598>
 8009aa2:	f04f 0a00 	mov.w	sl, #0
 8009aa6:	e678      	b.n	800979a <_strtod_l+0x72>
 8009aa8:	4882      	ldr	r0, [pc, #520]	@ (8009cb4 <_strtod_l+0x58c>)
 8009aaa:	f000 fea1 	bl	800a7f0 <nan>
 8009aae:	ec5b ab10 	vmov	sl, fp, d0
 8009ab2:	e672      	b.n	800979a <_strtod_l+0x72>
 8009ab4:	eba8 0309 	sub.w	r3, r8, r9
 8009ab8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009aba:	9309      	str	r3, [sp, #36]	@ 0x24
 8009abc:	2f00      	cmp	r7, #0
 8009abe:	bf08      	it	eq
 8009ac0:	462f      	moveq	r7, r5
 8009ac2:	2d10      	cmp	r5, #16
 8009ac4:	462c      	mov	r4, r5
 8009ac6:	bfa8      	it	ge
 8009ac8:	2410      	movge	r4, #16
 8009aca:	f7f6 fd2b 	bl	8000524 <__aeabi_ui2d>
 8009ace:	2d09      	cmp	r5, #9
 8009ad0:	4682      	mov	sl, r0
 8009ad2:	468b      	mov	fp, r1
 8009ad4:	dc13      	bgt.n	8009afe <_strtod_l+0x3d6>
 8009ad6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	f43f ae5e 	beq.w	800979a <_strtod_l+0x72>
 8009ade:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ae0:	dd78      	ble.n	8009bd4 <_strtod_l+0x4ac>
 8009ae2:	2b16      	cmp	r3, #22
 8009ae4:	dc5f      	bgt.n	8009ba6 <_strtod_l+0x47e>
 8009ae6:	4974      	ldr	r1, [pc, #464]	@ (8009cb8 <_strtod_l+0x590>)
 8009ae8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009aec:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009af0:	4652      	mov	r2, sl
 8009af2:	465b      	mov	r3, fp
 8009af4:	f7f6 fd90 	bl	8000618 <__aeabi_dmul>
 8009af8:	4682      	mov	sl, r0
 8009afa:	468b      	mov	fp, r1
 8009afc:	e64d      	b.n	800979a <_strtod_l+0x72>
 8009afe:	4b6e      	ldr	r3, [pc, #440]	@ (8009cb8 <_strtod_l+0x590>)
 8009b00:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009b04:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8009b08:	f7f6 fd86 	bl	8000618 <__aeabi_dmul>
 8009b0c:	4682      	mov	sl, r0
 8009b0e:	9808      	ldr	r0, [sp, #32]
 8009b10:	468b      	mov	fp, r1
 8009b12:	f7f6 fd07 	bl	8000524 <__aeabi_ui2d>
 8009b16:	4602      	mov	r2, r0
 8009b18:	460b      	mov	r3, r1
 8009b1a:	4650      	mov	r0, sl
 8009b1c:	4659      	mov	r1, fp
 8009b1e:	f7f6 fbc5 	bl	80002ac <__adddf3>
 8009b22:	2d0f      	cmp	r5, #15
 8009b24:	4682      	mov	sl, r0
 8009b26:	468b      	mov	fp, r1
 8009b28:	ddd5      	ble.n	8009ad6 <_strtod_l+0x3ae>
 8009b2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b2c:	1b2c      	subs	r4, r5, r4
 8009b2e:	441c      	add	r4, r3
 8009b30:	2c00      	cmp	r4, #0
 8009b32:	f340 8096 	ble.w	8009c62 <_strtod_l+0x53a>
 8009b36:	f014 030f 	ands.w	r3, r4, #15
 8009b3a:	d00a      	beq.n	8009b52 <_strtod_l+0x42a>
 8009b3c:	495e      	ldr	r1, [pc, #376]	@ (8009cb8 <_strtod_l+0x590>)
 8009b3e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009b42:	4652      	mov	r2, sl
 8009b44:	465b      	mov	r3, fp
 8009b46:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009b4a:	f7f6 fd65 	bl	8000618 <__aeabi_dmul>
 8009b4e:	4682      	mov	sl, r0
 8009b50:	468b      	mov	fp, r1
 8009b52:	f034 040f 	bics.w	r4, r4, #15
 8009b56:	d073      	beq.n	8009c40 <_strtod_l+0x518>
 8009b58:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8009b5c:	dd48      	ble.n	8009bf0 <_strtod_l+0x4c8>
 8009b5e:	2400      	movs	r4, #0
 8009b60:	46a0      	mov	r8, r4
 8009b62:	940a      	str	r4, [sp, #40]	@ 0x28
 8009b64:	46a1      	mov	r9, r4
 8009b66:	9a05      	ldr	r2, [sp, #20]
 8009b68:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8009cc0 <_strtod_l+0x598>
 8009b6c:	2322      	movs	r3, #34	@ 0x22
 8009b6e:	6013      	str	r3, [r2, #0]
 8009b70:	f04f 0a00 	mov.w	sl, #0
 8009b74:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	f43f ae0f 	beq.w	800979a <_strtod_l+0x72>
 8009b7c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009b7e:	9805      	ldr	r0, [sp, #20]
 8009b80:	f001 fac2 	bl	800b108 <_Bfree>
 8009b84:	9805      	ldr	r0, [sp, #20]
 8009b86:	4649      	mov	r1, r9
 8009b88:	f001 fabe 	bl	800b108 <_Bfree>
 8009b8c:	9805      	ldr	r0, [sp, #20]
 8009b8e:	4641      	mov	r1, r8
 8009b90:	f001 faba 	bl	800b108 <_Bfree>
 8009b94:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009b96:	9805      	ldr	r0, [sp, #20]
 8009b98:	f001 fab6 	bl	800b108 <_Bfree>
 8009b9c:	9805      	ldr	r0, [sp, #20]
 8009b9e:	4621      	mov	r1, r4
 8009ba0:	f001 fab2 	bl	800b108 <_Bfree>
 8009ba4:	e5f9      	b.n	800979a <_strtod_l+0x72>
 8009ba6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009ba8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8009bac:	4293      	cmp	r3, r2
 8009bae:	dbbc      	blt.n	8009b2a <_strtod_l+0x402>
 8009bb0:	4c41      	ldr	r4, [pc, #260]	@ (8009cb8 <_strtod_l+0x590>)
 8009bb2:	f1c5 050f 	rsb	r5, r5, #15
 8009bb6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8009bba:	4652      	mov	r2, sl
 8009bbc:	465b      	mov	r3, fp
 8009bbe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009bc2:	f7f6 fd29 	bl	8000618 <__aeabi_dmul>
 8009bc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009bc8:	1b5d      	subs	r5, r3, r5
 8009bca:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8009bce:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009bd2:	e78f      	b.n	8009af4 <_strtod_l+0x3cc>
 8009bd4:	3316      	adds	r3, #22
 8009bd6:	dba8      	blt.n	8009b2a <_strtod_l+0x402>
 8009bd8:	4b37      	ldr	r3, [pc, #220]	@ (8009cb8 <_strtod_l+0x590>)
 8009bda:	eba9 0808 	sub.w	r8, r9, r8
 8009bde:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8009be2:	e9d8 2300 	ldrd	r2, r3, [r8]
 8009be6:	4650      	mov	r0, sl
 8009be8:	4659      	mov	r1, fp
 8009bea:	f7f6 fe3f 	bl	800086c <__aeabi_ddiv>
 8009bee:	e783      	b.n	8009af8 <_strtod_l+0x3d0>
 8009bf0:	4b32      	ldr	r3, [pc, #200]	@ (8009cbc <_strtod_l+0x594>)
 8009bf2:	9308      	str	r3, [sp, #32]
 8009bf4:	2300      	movs	r3, #0
 8009bf6:	1124      	asrs	r4, r4, #4
 8009bf8:	4650      	mov	r0, sl
 8009bfa:	4659      	mov	r1, fp
 8009bfc:	461e      	mov	r6, r3
 8009bfe:	2c01      	cmp	r4, #1
 8009c00:	dc21      	bgt.n	8009c46 <_strtod_l+0x51e>
 8009c02:	b10b      	cbz	r3, 8009c08 <_strtod_l+0x4e0>
 8009c04:	4682      	mov	sl, r0
 8009c06:	468b      	mov	fp, r1
 8009c08:	492c      	ldr	r1, [pc, #176]	@ (8009cbc <_strtod_l+0x594>)
 8009c0a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8009c0e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8009c12:	4652      	mov	r2, sl
 8009c14:	465b      	mov	r3, fp
 8009c16:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009c1a:	f7f6 fcfd 	bl	8000618 <__aeabi_dmul>
 8009c1e:	4b28      	ldr	r3, [pc, #160]	@ (8009cc0 <_strtod_l+0x598>)
 8009c20:	460a      	mov	r2, r1
 8009c22:	400b      	ands	r3, r1
 8009c24:	4927      	ldr	r1, [pc, #156]	@ (8009cc4 <_strtod_l+0x59c>)
 8009c26:	428b      	cmp	r3, r1
 8009c28:	4682      	mov	sl, r0
 8009c2a:	d898      	bhi.n	8009b5e <_strtod_l+0x436>
 8009c2c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8009c30:	428b      	cmp	r3, r1
 8009c32:	bf86      	itte	hi
 8009c34:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8009cc8 <_strtod_l+0x5a0>
 8009c38:	f04f 3aff 	movhi.w	sl, #4294967295
 8009c3c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8009c40:	2300      	movs	r3, #0
 8009c42:	9308      	str	r3, [sp, #32]
 8009c44:	e07a      	b.n	8009d3c <_strtod_l+0x614>
 8009c46:	07e2      	lsls	r2, r4, #31
 8009c48:	d505      	bpl.n	8009c56 <_strtod_l+0x52e>
 8009c4a:	9b08      	ldr	r3, [sp, #32]
 8009c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c50:	f7f6 fce2 	bl	8000618 <__aeabi_dmul>
 8009c54:	2301      	movs	r3, #1
 8009c56:	9a08      	ldr	r2, [sp, #32]
 8009c58:	3208      	adds	r2, #8
 8009c5a:	3601      	adds	r6, #1
 8009c5c:	1064      	asrs	r4, r4, #1
 8009c5e:	9208      	str	r2, [sp, #32]
 8009c60:	e7cd      	b.n	8009bfe <_strtod_l+0x4d6>
 8009c62:	d0ed      	beq.n	8009c40 <_strtod_l+0x518>
 8009c64:	4264      	negs	r4, r4
 8009c66:	f014 020f 	ands.w	r2, r4, #15
 8009c6a:	d00a      	beq.n	8009c82 <_strtod_l+0x55a>
 8009c6c:	4b12      	ldr	r3, [pc, #72]	@ (8009cb8 <_strtod_l+0x590>)
 8009c6e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009c72:	4650      	mov	r0, sl
 8009c74:	4659      	mov	r1, fp
 8009c76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c7a:	f7f6 fdf7 	bl	800086c <__aeabi_ddiv>
 8009c7e:	4682      	mov	sl, r0
 8009c80:	468b      	mov	fp, r1
 8009c82:	1124      	asrs	r4, r4, #4
 8009c84:	d0dc      	beq.n	8009c40 <_strtod_l+0x518>
 8009c86:	2c1f      	cmp	r4, #31
 8009c88:	dd20      	ble.n	8009ccc <_strtod_l+0x5a4>
 8009c8a:	2400      	movs	r4, #0
 8009c8c:	46a0      	mov	r8, r4
 8009c8e:	940a      	str	r4, [sp, #40]	@ 0x28
 8009c90:	46a1      	mov	r9, r4
 8009c92:	9a05      	ldr	r2, [sp, #20]
 8009c94:	2322      	movs	r3, #34	@ 0x22
 8009c96:	f04f 0a00 	mov.w	sl, #0
 8009c9a:	f04f 0b00 	mov.w	fp, #0
 8009c9e:	6013      	str	r3, [r2, #0]
 8009ca0:	e768      	b.n	8009b74 <_strtod_l+0x44c>
 8009ca2:	bf00      	nop
 8009ca4:	0800cbff 	.word	0x0800cbff
 8009ca8:	0800cc04 	.word	0x0800cc04
 8009cac:	0800cbf6 	.word	0x0800cbf6
 8009cb0:	0800cbf9 	.word	0x0800cbf9
 8009cb4:	0800cfae 	.word	0x0800cfae
 8009cb8:	0800ce78 	.word	0x0800ce78
 8009cbc:	0800ce50 	.word	0x0800ce50
 8009cc0:	7ff00000 	.word	0x7ff00000
 8009cc4:	7ca00000 	.word	0x7ca00000
 8009cc8:	7fefffff 	.word	0x7fefffff
 8009ccc:	f014 0310 	ands.w	r3, r4, #16
 8009cd0:	bf18      	it	ne
 8009cd2:	236a      	movne	r3, #106	@ 0x6a
 8009cd4:	4ea9      	ldr	r6, [pc, #676]	@ (8009f7c <_strtod_l+0x854>)
 8009cd6:	9308      	str	r3, [sp, #32]
 8009cd8:	4650      	mov	r0, sl
 8009cda:	4659      	mov	r1, fp
 8009cdc:	2300      	movs	r3, #0
 8009cde:	07e2      	lsls	r2, r4, #31
 8009ce0:	d504      	bpl.n	8009cec <_strtod_l+0x5c4>
 8009ce2:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009ce6:	f7f6 fc97 	bl	8000618 <__aeabi_dmul>
 8009cea:	2301      	movs	r3, #1
 8009cec:	1064      	asrs	r4, r4, #1
 8009cee:	f106 0608 	add.w	r6, r6, #8
 8009cf2:	d1f4      	bne.n	8009cde <_strtod_l+0x5b6>
 8009cf4:	b10b      	cbz	r3, 8009cfa <_strtod_l+0x5d2>
 8009cf6:	4682      	mov	sl, r0
 8009cf8:	468b      	mov	fp, r1
 8009cfa:	9b08      	ldr	r3, [sp, #32]
 8009cfc:	b1b3      	cbz	r3, 8009d2c <_strtod_l+0x604>
 8009cfe:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8009d02:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	4659      	mov	r1, fp
 8009d0a:	dd0f      	ble.n	8009d2c <_strtod_l+0x604>
 8009d0c:	2b1f      	cmp	r3, #31
 8009d0e:	dd55      	ble.n	8009dbc <_strtod_l+0x694>
 8009d10:	2b34      	cmp	r3, #52	@ 0x34
 8009d12:	bfde      	ittt	le
 8009d14:	f04f 33ff 	movle.w	r3, #4294967295
 8009d18:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8009d1c:	4093      	lslle	r3, r2
 8009d1e:	f04f 0a00 	mov.w	sl, #0
 8009d22:	bfcc      	ite	gt
 8009d24:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8009d28:	ea03 0b01 	andle.w	fp, r3, r1
 8009d2c:	2200      	movs	r2, #0
 8009d2e:	2300      	movs	r3, #0
 8009d30:	4650      	mov	r0, sl
 8009d32:	4659      	mov	r1, fp
 8009d34:	f7f6 fed8 	bl	8000ae8 <__aeabi_dcmpeq>
 8009d38:	2800      	cmp	r0, #0
 8009d3a:	d1a6      	bne.n	8009c8a <_strtod_l+0x562>
 8009d3c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009d3e:	9300      	str	r3, [sp, #0]
 8009d40:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8009d42:	9805      	ldr	r0, [sp, #20]
 8009d44:	462b      	mov	r3, r5
 8009d46:	463a      	mov	r2, r7
 8009d48:	f001 fa46 	bl	800b1d8 <__s2b>
 8009d4c:	900a      	str	r0, [sp, #40]	@ 0x28
 8009d4e:	2800      	cmp	r0, #0
 8009d50:	f43f af05 	beq.w	8009b5e <_strtod_l+0x436>
 8009d54:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009d56:	2a00      	cmp	r2, #0
 8009d58:	eba9 0308 	sub.w	r3, r9, r8
 8009d5c:	bfa8      	it	ge
 8009d5e:	2300      	movge	r3, #0
 8009d60:	9312      	str	r3, [sp, #72]	@ 0x48
 8009d62:	2400      	movs	r4, #0
 8009d64:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8009d68:	9316      	str	r3, [sp, #88]	@ 0x58
 8009d6a:	46a0      	mov	r8, r4
 8009d6c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009d6e:	9805      	ldr	r0, [sp, #20]
 8009d70:	6859      	ldr	r1, [r3, #4]
 8009d72:	f001 f989 	bl	800b088 <_Balloc>
 8009d76:	4681      	mov	r9, r0
 8009d78:	2800      	cmp	r0, #0
 8009d7a:	f43f aef4 	beq.w	8009b66 <_strtod_l+0x43e>
 8009d7e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009d80:	691a      	ldr	r2, [r3, #16]
 8009d82:	3202      	adds	r2, #2
 8009d84:	f103 010c 	add.w	r1, r3, #12
 8009d88:	0092      	lsls	r2, r2, #2
 8009d8a:	300c      	adds	r0, #12
 8009d8c:	f000 fd1f 	bl	800a7ce <memcpy>
 8009d90:	ec4b ab10 	vmov	d0, sl, fp
 8009d94:	9805      	ldr	r0, [sp, #20]
 8009d96:	aa1c      	add	r2, sp, #112	@ 0x70
 8009d98:	a91b      	add	r1, sp, #108	@ 0x6c
 8009d9a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8009d9e:	f001 fd57 	bl	800b850 <__d2b>
 8009da2:	901a      	str	r0, [sp, #104]	@ 0x68
 8009da4:	2800      	cmp	r0, #0
 8009da6:	f43f aede 	beq.w	8009b66 <_strtod_l+0x43e>
 8009daa:	9805      	ldr	r0, [sp, #20]
 8009dac:	2101      	movs	r1, #1
 8009dae:	f001 faa9 	bl	800b304 <__i2b>
 8009db2:	4680      	mov	r8, r0
 8009db4:	b948      	cbnz	r0, 8009dca <_strtod_l+0x6a2>
 8009db6:	f04f 0800 	mov.w	r8, #0
 8009dba:	e6d4      	b.n	8009b66 <_strtod_l+0x43e>
 8009dbc:	f04f 32ff 	mov.w	r2, #4294967295
 8009dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8009dc4:	ea03 0a0a 	and.w	sl, r3, sl
 8009dc8:	e7b0      	b.n	8009d2c <_strtod_l+0x604>
 8009dca:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8009dcc:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8009dce:	2d00      	cmp	r5, #0
 8009dd0:	bfab      	itete	ge
 8009dd2:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8009dd4:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8009dd6:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8009dd8:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8009dda:	bfac      	ite	ge
 8009ddc:	18ef      	addge	r7, r5, r3
 8009dde:	1b5e      	sublt	r6, r3, r5
 8009de0:	9b08      	ldr	r3, [sp, #32]
 8009de2:	1aed      	subs	r5, r5, r3
 8009de4:	4415      	add	r5, r2
 8009de6:	4b66      	ldr	r3, [pc, #408]	@ (8009f80 <_strtod_l+0x858>)
 8009de8:	3d01      	subs	r5, #1
 8009dea:	429d      	cmp	r5, r3
 8009dec:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8009df0:	da50      	bge.n	8009e94 <_strtod_l+0x76c>
 8009df2:	1b5b      	subs	r3, r3, r5
 8009df4:	2b1f      	cmp	r3, #31
 8009df6:	eba2 0203 	sub.w	r2, r2, r3
 8009dfa:	f04f 0101 	mov.w	r1, #1
 8009dfe:	dc3d      	bgt.n	8009e7c <_strtod_l+0x754>
 8009e00:	fa01 f303 	lsl.w	r3, r1, r3
 8009e04:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009e06:	2300      	movs	r3, #0
 8009e08:	9310      	str	r3, [sp, #64]	@ 0x40
 8009e0a:	18bd      	adds	r5, r7, r2
 8009e0c:	9b08      	ldr	r3, [sp, #32]
 8009e0e:	42af      	cmp	r7, r5
 8009e10:	4416      	add	r6, r2
 8009e12:	441e      	add	r6, r3
 8009e14:	463b      	mov	r3, r7
 8009e16:	bfa8      	it	ge
 8009e18:	462b      	movge	r3, r5
 8009e1a:	42b3      	cmp	r3, r6
 8009e1c:	bfa8      	it	ge
 8009e1e:	4633      	movge	r3, r6
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	bfc2      	ittt	gt
 8009e24:	1aed      	subgt	r5, r5, r3
 8009e26:	1af6      	subgt	r6, r6, r3
 8009e28:	1aff      	subgt	r7, r7, r3
 8009e2a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	dd16      	ble.n	8009e5e <_strtod_l+0x736>
 8009e30:	4641      	mov	r1, r8
 8009e32:	9805      	ldr	r0, [sp, #20]
 8009e34:	461a      	mov	r2, r3
 8009e36:	f001 fb25 	bl	800b484 <__pow5mult>
 8009e3a:	4680      	mov	r8, r0
 8009e3c:	2800      	cmp	r0, #0
 8009e3e:	d0ba      	beq.n	8009db6 <_strtod_l+0x68e>
 8009e40:	4601      	mov	r1, r0
 8009e42:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009e44:	9805      	ldr	r0, [sp, #20]
 8009e46:	f001 fa73 	bl	800b330 <__multiply>
 8009e4a:	900e      	str	r0, [sp, #56]	@ 0x38
 8009e4c:	2800      	cmp	r0, #0
 8009e4e:	f43f ae8a 	beq.w	8009b66 <_strtod_l+0x43e>
 8009e52:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009e54:	9805      	ldr	r0, [sp, #20]
 8009e56:	f001 f957 	bl	800b108 <_Bfree>
 8009e5a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009e5c:	931a      	str	r3, [sp, #104]	@ 0x68
 8009e5e:	2d00      	cmp	r5, #0
 8009e60:	dc1d      	bgt.n	8009e9e <_strtod_l+0x776>
 8009e62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	dd23      	ble.n	8009eb0 <_strtod_l+0x788>
 8009e68:	4649      	mov	r1, r9
 8009e6a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8009e6c:	9805      	ldr	r0, [sp, #20]
 8009e6e:	f001 fb09 	bl	800b484 <__pow5mult>
 8009e72:	4681      	mov	r9, r0
 8009e74:	b9e0      	cbnz	r0, 8009eb0 <_strtod_l+0x788>
 8009e76:	f04f 0900 	mov.w	r9, #0
 8009e7a:	e674      	b.n	8009b66 <_strtod_l+0x43e>
 8009e7c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8009e80:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8009e84:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8009e88:	35e2      	adds	r5, #226	@ 0xe2
 8009e8a:	fa01 f305 	lsl.w	r3, r1, r5
 8009e8e:	9310      	str	r3, [sp, #64]	@ 0x40
 8009e90:	9113      	str	r1, [sp, #76]	@ 0x4c
 8009e92:	e7ba      	b.n	8009e0a <_strtod_l+0x6e2>
 8009e94:	2300      	movs	r3, #0
 8009e96:	9310      	str	r3, [sp, #64]	@ 0x40
 8009e98:	2301      	movs	r3, #1
 8009e9a:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009e9c:	e7b5      	b.n	8009e0a <_strtod_l+0x6e2>
 8009e9e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009ea0:	9805      	ldr	r0, [sp, #20]
 8009ea2:	462a      	mov	r2, r5
 8009ea4:	f001 fb48 	bl	800b538 <__lshift>
 8009ea8:	901a      	str	r0, [sp, #104]	@ 0x68
 8009eaa:	2800      	cmp	r0, #0
 8009eac:	d1d9      	bne.n	8009e62 <_strtod_l+0x73a>
 8009eae:	e65a      	b.n	8009b66 <_strtod_l+0x43e>
 8009eb0:	2e00      	cmp	r6, #0
 8009eb2:	dd07      	ble.n	8009ec4 <_strtod_l+0x79c>
 8009eb4:	4649      	mov	r1, r9
 8009eb6:	9805      	ldr	r0, [sp, #20]
 8009eb8:	4632      	mov	r2, r6
 8009eba:	f001 fb3d 	bl	800b538 <__lshift>
 8009ebe:	4681      	mov	r9, r0
 8009ec0:	2800      	cmp	r0, #0
 8009ec2:	d0d8      	beq.n	8009e76 <_strtod_l+0x74e>
 8009ec4:	2f00      	cmp	r7, #0
 8009ec6:	dd08      	ble.n	8009eda <_strtod_l+0x7b2>
 8009ec8:	4641      	mov	r1, r8
 8009eca:	9805      	ldr	r0, [sp, #20]
 8009ecc:	463a      	mov	r2, r7
 8009ece:	f001 fb33 	bl	800b538 <__lshift>
 8009ed2:	4680      	mov	r8, r0
 8009ed4:	2800      	cmp	r0, #0
 8009ed6:	f43f ae46 	beq.w	8009b66 <_strtod_l+0x43e>
 8009eda:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009edc:	9805      	ldr	r0, [sp, #20]
 8009ede:	464a      	mov	r2, r9
 8009ee0:	f001 fbb2 	bl	800b648 <__mdiff>
 8009ee4:	4604      	mov	r4, r0
 8009ee6:	2800      	cmp	r0, #0
 8009ee8:	f43f ae3d 	beq.w	8009b66 <_strtod_l+0x43e>
 8009eec:	68c3      	ldr	r3, [r0, #12]
 8009eee:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009ef0:	2300      	movs	r3, #0
 8009ef2:	60c3      	str	r3, [r0, #12]
 8009ef4:	4641      	mov	r1, r8
 8009ef6:	f001 fb8b 	bl	800b610 <__mcmp>
 8009efa:	2800      	cmp	r0, #0
 8009efc:	da46      	bge.n	8009f8c <_strtod_l+0x864>
 8009efe:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009f00:	ea53 030a 	orrs.w	r3, r3, sl
 8009f04:	d16c      	bne.n	8009fe0 <_strtod_l+0x8b8>
 8009f06:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d168      	bne.n	8009fe0 <_strtod_l+0x8b8>
 8009f0e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009f12:	0d1b      	lsrs	r3, r3, #20
 8009f14:	051b      	lsls	r3, r3, #20
 8009f16:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009f1a:	d961      	bls.n	8009fe0 <_strtod_l+0x8b8>
 8009f1c:	6963      	ldr	r3, [r4, #20]
 8009f1e:	b913      	cbnz	r3, 8009f26 <_strtod_l+0x7fe>
 8009f20:	6923      	ldr	r3, [r4, #16]
 8009f22:	2b01      	cmp	r3, #1
 8009f24:	dd5c      	ble.n	8009fe0 <_strtod_l+0x8b8>
 8009f26:	4621      	mov	r1, r4
 8009f28:	2201      	movs	r2, #1
 8009f2a:	9805      	ldr	r0, [sp, #20]
 8009f2c:	f001 fb04 	bl	800b538 <__lshift>
 8009f30:	4641      	mov	r1, r8
 8009f32:	4604      	mov	r4, r0
 8009f34:	f001 fb6c 	bl	800b610 <__mcmp>
 8009f38:	2800      	cmp	r0, #0
 8009f3a:	dd51      	ble.n	8009fe0 <_strtod_l+0x8b8>
 8009f3c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009f40:	9a08      	ldr	r2, [sp, #32]
 8009f42:	0d1b      	lsrs	r3, r3, #20
 8009f44:	051b      	lsls	r3, r3, #20
 8009f46:	2a00      	cmp	r2, #0
 8009f48:	d06b      	beq.n	800a022 <_strtod_l+0x8fa>
 8009f4a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009f4e:	d868      	bhi.n	800a022 <_strtod_l+0x8fa>
 8009f50:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8009f54:	f67f ae9d 	bls.w	8009c92 <_strtod_l+0x56a>
 8009f58:	4b0a      	ldr	r3, [pc, #40]	@ (8009f84 <_strtod_l+0x85c>)
 8009f5a:	4650      	mov	r0, sl
 8009f5c:	4659      	mov	r1, fp
 8009f5e:	2200      	movs	r2, #0
 8009f60:	f7f6 fb5a 	bl	8000618 <__aeabi_dmul>
 8009f64:	4b08      	ldr	r3, [pc, #32]	@ (8009f88 <_strtod_l+0x860>)
 8009f66:	400b      	ands	r3, r1
 8009f68:	4682      	mov	sl, r0
 8009f6a:	468b      	mov	fp, r1
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	f47f ae05 	bne.w	8009b7c <_strtod_l+0x454>
 8009f72:	9a05      	ldr	r2, [sp, #20]
 8009f74:	2322      	movs	r3, #34	@ 0x22
 8009f76:	6013      	str	r3, [r2, #0]
 8009f78:	e600      	b.n	8009b7c <_strtod_l+0x454>
 8009f7a:	bf00      	nop
 8009f7c:	0800cc30 	.word	0x0800cc30
 8009f80:	fffffc02 	.word	0xfffffc02
 8009f84:	39500000 	.word	0x39500000
 8009f88:	7ff00000 	.word	0x7ff00000
 8009f8c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009f90:	d165      	bne.n	800a05e <_strtod_l+0x936>
 8009f92:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8009f94:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009f98:	b35a      	cbz	r2, 8009ff2 <_strtod_l+0x8ca>
 8009f9a:	4a9f      	ldr	r2, [pc, #636]	@ (800a218 <_strtod_l+0xaf0>)
 8009f9c:	4293      	cmp	r3, r2
 8009f9e:	d12b      	bne.n	8009ff8 <_strtod_l+0x8d0>
 8009fa0:	9b08      	ldr	r3, [sp, #32]
 8009fa2:	4651      	mov	r1, sl
 8009fa4:	b303      	cbz	r3, 8009fe8 <_strtod_l+0x8c0>
 8009fa6:	4b9d      	ldr	r3, [pc, #628]	@ (800a21c <_strtod_l+0xaf4>)
 8009fa8:	465a      	mov	r2, fp
 8009faa:	4013      	ands	r3, r2
 8009fac:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8009fb0:	f04f 32ff 	mov.w	r2, #4294967295
 8009fb4:	d81b      	bhi.n	8009fee <_strtod_l+0x8c6>
 8009fb6:	0d1b      	lsrs	r3, r3, #20
 8009fb8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8009fc0:	4299      	cmp	r1, r3
 8009fc2:	d119      	bne.n	8009ff8 <_strtod_l+0x8d0>
 8009fc4:	4b96      	ldr	r3, [pc, #600]	@ (800a220 <_strtod_l+0xaf8>)
 8009fc6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009fc8:	429a      	cmp	r2, r3
 8009fca:	d102      	bne.n	8009fd2 <_strtod_l+0x8aa>
 8009fcc:	3101      	adds	r1, #1
 8009fce:	f43f adca 	beq.w	8009b66 <_strtod_l+0x43e>
 8009fd2:	4b92      	ldr	r3, [pc, #584]	@ (800a21c <_strtod_l+0xaf4>)
 8009fd4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009fd6:	401a      	ands	r2, r3
 8009fd8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8009fdc:	f04f 0a00 	mov.w	sl, #0
 8009fe0:	9b08      	ldr	r3, [sp, #32]
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d1b8      	bne.n	8009f58 <_strtod_l+0x830>
 8009fe6:	e5c9      	b.n	8009b7c <_strtod_l+0x454>
 8009fe8:	f04f 33ff 	mov.w	r3, #4294967295
 8009fec:	e7e8      	b.n	8009fc0 <_strtod_l+0x898>
 8009fee:	4613      	mov	r3, r2
 8009ff0:	e7e6      	b.n	8009fc0 <_strtod_l+0x898>
 8009ff2:	ea53 030a 	orrs.w	r3, r3, sl
 8009ff6:	d0a1      	beq.n	8009f3c <_strtod_l+0x814>
 8009ff8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009ffa:	b1db      	cbz	r3, 800a034 <_strtod_l+0x90c>
 8009ffc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009ffe:	4213      	tst	r3, r2
 800a000:	d0ee      	beq.n	8009fe0 <_strtod_l+0x8b8>
 800a002:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a004:	9a08      	ldr	r2, [sp, #32]
 800a006:	4650      	mov	r0, sl
 800a008:	4659      	mov	r1, fp
 800a00a:	b1bb      	cbz	r3, 800a03c <_strtod_l+0x914>
 800a00c:	f7ff fb6e 	bl	80096ec <sulp>
 800a010:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a014:	ec53 2b10 	vmov	r2, r3, d0
 800a018:	f7f6 f948 	bl	80002ac <__adddf3>
 800a01c:	4682      	mov	sl, r0
 800a01e:	468b      	mov	fp, r1
 800a020:	e7de      	b.n	8009fe0 <_strtod_l+0x8b8>
 800a022:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800a026:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800a02a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800a02e:	f04f 3aff 	mov.w	sl, #4294967295
 800a032:	e7d5      	b.n	8009fe0 <_strtod_l+0x8b8>
 800a034:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a036:	ea13 0f0a 	tst.w	r3, sl
 800a03a:	e7e1      	b.n	800a000 <_strtod_l+0x8d8>
 800a03c:	f7ff fb56 	bl	80096ec <sulp>
 800a040:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a044:	ec53 2b10 	vmov	r2, r3, d0
 800a048:	f7f6 f92e 	bl	80002a8 <__aeabi_dsub>
 800a04c:	2200      	movs	r2, #0
 800a04e:	2300      	movs	r3, #0
 800a050:	4682      	mov	sl, r0
 800a052:	468b      	mov	fp, r1
 800a054:	f7f6 fd48 	bl	8000ae8 <__aeabi_dcmpeq>
 800a058:	2800      	cmp	r0, #0
 800a05a:	d0c1      	beq.n	8009fe0 <_strtod_l+0x8b8>
 800a05c:	e619      	b.n	8009c92 <_strtod_l+0x56a>
 800a05e:	4641      	mov	r1, r8
 800a060:	4620      	mov	r0, r4
 800a062:	f001 fc4d 	bl	800b900 <__ratio>
 800a066:	ec57 6b10 	vmov	r6, r7, d0
 800a06a:	2200      	movs	r2, #0
 800a06c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800a070:	4630      	mov	r0, r6
 800a072:	4639      	mov	r1, r7
 800a074:	f7f6 fd4c 	bl	8000b10 <__aeabi_dcmple>
 800a078:	2800      	cmp	r0, #0
 800a07a:	d06f      	beq.n	800a15c <_strtod_l+0xa34>
 800a07c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d17a      	bne.n	800a178 <_strtod_l+0xa50>
 800a082:	f1ba 0f00 	cmp.w	sl, #0
 800a086:	d158      	bne.n	800a13a <_strtod_l+0xa12>
 800a088:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a08a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d15a      	bne.n	800a148 <_strtod_l+0xa20>
 800a092:	4b64      	ldr	r3, [pc, #400]	@ (800a224 <_strtod_l+0xafc>)
 800a094:	2200      	movs	r2, #0
 800a096:	4630      	mov	r0, r6
 800a098:	4639      	mov	r1, r7
 800a09a:	f7f6 fd2f 	bl	8000afc <__aeabi_dcmplt>
 800a09e:	2800      	cmp	r0, #0
 800a0a0:	d159      	bne.n	800a156 <_strtod_l+0xa2e>
 800a0a2:	4630      	mov	r0, r6
 800a0a4:	4639      	mov	r1, r7
 800a0a6:	4b60      	ldr	r3, [pc, #384]	@ (800a228 <_strtod_l+0xb00>)
 800a0a8:	2200      	movs	r2, #0
 800a0aa:	f7f6 fab5 	bl	8000618 <__aeabi_dmul>
 800a0ae:	4606      	mov	r6, r0
 800a0b0:	460f      	mov	r7, r1
 800a0b2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800a0b6:	9606      	str	r6, [sp, #24]
 800a0b8:	9307      	str	r3, [sp, #28]
 800a0ba:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a0be:	4d57      	ldr	r5, [pc, #348]	@ (800a21c <_strtod_l+0xaf4>)
 800a0c0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800a0c4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a0c6:	401d      	ands	r5, r3
 800a0c8:	4b58      	ldr	r3, [pc, #352]	@ (800a22c <_strtod_l+0xb04>)
 800a0ca:	429d      	cmp	r5, r3
 800a0cc:	f040 80b2 	bne.w	800a234 <_strtod_l+0xb0c>
 800a0d0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a0d2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800a0d6:	ec4b ab10 	vmov	d0, sl, fp
 800a0da:	f001 fb49 	bl	800b770 <__ulp>
 800a0de:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a0e2:	ec51 0b10 	vmov	r0, r1, d0
 800a0e6:	f7f6 fa97 	bl	8000618 <__aeabi_dmul>
 800a0ea:	4652      	mov	r2, sl
 800a0ec:	465b      	mov	r3, fp
 800a0ee:	f7f6 f8dd 	bl	80002ac <__adddf3>
 800a0f2:	460b      	mov	r3, r1
 800a0f4:	4949      	ldr	r1, [pc, #292]	@ (800a21c <_strtod_l+0xaf4>)
 800a0f6:	4a4e      	ldr	r2, [pc, #312]	@ (800a230 <_strtod_l+0xb08>)
 800a0f8:	4019      	ands	r1, r3
 800a0fa:	4291      	cmp	r1, r2
 800a0fc:	4682      	mov	sl, r0
 800a0fe:	d942      	bls.n	800a186 <_strtod_l+0xa5e>
 800a100:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a102:	4b47      	ldr	r3, [pc, #284]	@ (800a220 <_strtod_l+0xaf8>)
 800a104:	429a      	cmp	r2, r3
 800a106:	d103      	bne.n	800a110 <_strtod_l+0x9e8>
 800a108:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a10a:	3301      	adds	r3, #1
 800a10c:	f43f ad2b 	beq.w	8009b66 <_strtod_l+0x43e>
 800a110:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800a220 <_strtod_l+0xaf8>
 800a114:	f04f 3aff 	mov.w	sl, #4294967295
 800a118:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a11a:	9805      	ldr	r0, [sp, #20]
 800a11c:	f000 fff4 	bl	800b108 <_Bfree>
 800a120:	9805      	ldr	r0, [sp, #20]
 800a122:	4649      	mov	r1, r9
 800a124:	f000 fff0 	bl	800b108 <_Bfree>
 800a128:	9805      	ldr	r0, [sp, #20]
 800a12a:	4641      	mov	r1, r8
 800a12c:	f000 ffec 	bl	800b108 <_Bfree>
 800a130:	9805      	ldr	r0, [sp, #20]
 800a132:	4621      	mov	r1, r4
 800a134:	f000 ffe8 	bl	800b108 <_Bfree>
 800a138:	e618      	b.n	8009d6c <_strtod_l+0x644>
 800a13a:	f1ba 0f01 	cmp.w	sl, #1
 800a13e:	d103      	bne.n	800a148 <_strtod_l+0xa20>
 800a140:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a142:	2b00      	cmp	r3, #0
 800a144:	f43f ada5 	beq.w	8009c92 <_strtod_l+0x56a>
 800a148:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800a1f8 <_strtod_l+0xad0>
 800a14c:	4f35      	ldr	r7, [pc, #212]	@ (800a224 <_strtod_l+0xafc>)
 800a14e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a152:	2600      	movs	r6, #0
 800a154:	e7b1      	b.n	800a0ba <_strtod_l+0x992>
 800a156:	4f34      	ldr	r7, [pc, #208]	@ (800a228 <_strtod_l+0xb00>)
 800a158:	2600      	movs	r6, #0
 800a15a:	e7aa      	b.n	800a0b2 <_strtod_l+0x98a>
 800a15c:	4b32      	ldr	r3, [pc, #200]	@ (800a228 <_strtod_l+0xb00>)
 800a15e:	4630      	mov	r0, r6
 800a160:	4639      	mov	r1, r7
 800a162:	2200      	movs	r2, #0
 800a164:	f7f6 fa58 	bl	8000618 <__aeabi_dmul>
 800a168:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a16a:	4606      	mov	r6, r0
 800a16c:	460f      	mov	r7, r1
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d09f      	beq.n	800a0b2 <_strtod_l+0x98a>
 800a172:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800a176:	e7a0      	b.n	800a0ba <_strtod_l+0x992>
 800a178:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800a200 <_strtod_l+0xad8>
 800a17c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a180:	ec57 6b17 	vmov	r6, r7, d7
 800a184:	e799      	b.n	800a0ba <_strtod_l+0x992>
 800a186:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800a18a:	9b08      	ldr	r3, [sp, #32]
 800a18c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800a190:	2b00      	cmp	r3, #0
 800a192:	d1c1      	bne.n	800a118 <_strtod_l+0x9f0>
 800a194:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a198:	0d1b      	lsrs	r3, r3, #20
 800a19a:	051b      	lsls	r3, r3, #20
 800a19c:	429d      	cmp	r5, r3
 800a19e:	d1bb      	bne.n	800a118 <_strtod_l+0x9f0>
 800a1a0:	4630      	mov	r0, r6
 800a1a2:	4639      	mov	r1, r7
 800a1a4:	f7f6 fd98 	bl	8000cd8 <__aeabi_d2lz>
 800a1a8:	f7f6 fa08 	bl	80005bc <__aeabi_l2d>
 800a1ac:	4602      	mov	r2, r0
 800a1ae:	460b      	mov	r3, r1
 800a1b0:	4630      	mov	r0, r6
 800a1b2:	4639      	mov	r1, r7
 800a1b4:	f7f6 f878 	bl	80002a8 <__aeabi_dsub>
 800a1b8:	460b      	mov	r3, r1
 800a1ba:	4602      	mov	r2, r0
 800a1bc:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800a1c0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800a1c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a1c6:	ea46 060a 	orr.w	r6, r6, sl
 800a1ca:	431e      	orrs	r6, r3
 800a1cc:	d06f      	beq.n	800a2ae <_strtod_l+0xb86>
 800a1ce:	a30e      	add	r3, pc, #56	@ (adr r3, 800a208 <_strtod_l+0xae0>)
 800a1d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1d4:	f7f6 fc92 	bl	8000afc <__aeabi_dcmplt>
 800a1d8:	2800      	cmp	r0, #0
 800a1da:	f47f accf 	bne.w	8009b7c <_strtod_l+0x454>
 800a1de:	a30c      	add	r3, pc, #48	@ (adr r3, 800a210 <_strtod_l+0xae8>)
 800a1e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1e4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a1e8:	f7f6 fca6 	bl	8000b38 <__aeabi_dcmpgt>
 800a1ec:	2800      	cmp	r0, #0
 800a1ee:	d093      	beq.n	800a118 <_strtod_l+0x9f0>
 800a1f0:	e4c4      	b.n	8009b7c <_strtod_l+0x454>
 800a1f2:	bf00      	nop
 800a1f4:	f3af 8000 	nop.w
 800a1f8:	00000000 	.word	0x00000000
 800a1fc:	bff00000 	.word	0xbff00000
 800a200:	00000000 	.word	0x00000000
 800a204:	3ff00000 	.word	0x3ff00000
 800a208:	94a03595 	.word	0x94a03595
 800a20c:	3fdfffff 	.word	0x3fdfffff
 800a210:	35afe535 	.word	0x35afe535
 800a214:	3fe00000 	.word	0x3fe00000
 800a218:	000fffff 	.word	0x000fffff
 800a21c:	7ff00000 	.word	0x7ff00000
 800a220:	7fefffff 	.word	0x7fefffff
 800a224:	3ff00000 	.word	0x3ff00000
 800a228:	3fe00000 	.word	0x3fe00000
 800a22c:	7fe00000 	.word	0x7fe00000
 800a230:	7c9fffff 	.word	0x7c9fffff
 800a234:	9b08      	ldr	r3, [sp, #32]
 800a236:	b323      	cbz	r3, 800a282 <_strtod_l+0xb5a>
 800a238:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800a23c:	d821      	bhi.n	800a282 <_strtod_l+0xb5a>
 800a23e:	a328      	add	r3, pc, #160	@ (adr r3, 800a2e0 <_strtod_l+0xbb8>)
 800a240:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a244:	4630      	mov	r0, r6
 800a246:	4639      	mov	r1, r7
 800a248:	f7f6 fc62 	bl	8000b10 <__aeabi_dcmple>
 800a24c:	b1a0      	cbz	r0, 800a278 <_strtod_l+0xb50>
 800a24e:	4639      	mov	r1, r7
 800a250:	4630      	mov	r0, r6
 800a252:	f7f6 fcb9 	bl	8000bc8 <__aeabi_d2uiz>
 800a256:	2801      	cmp	r0, #1
 800a258:	bf38      	it	cc
 800a25a:	2001      	movcc	r0, #1
 800a25c:	f7f6 f962 	bl	8000524 <__aeabi_ui2d>
 800a260:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a262:	4606      	mov	r6, r0
 800a264:	460f      	mov	r7, r1
 800a266:	b9fb      	cbnz	r3, 800a2a8 <_strtod_l+0xb80>
 800a268:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a26c:	9014      	str	r0, [sp, #80]	@ 0x50
 800a26e:	9315      	str	r3, [sp, #84]	@ 0x54
 800a270:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800a274:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800a278:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a27a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800a27e:	1b5b      	subs	r3, r3, r5
 800a280:	9311      	str	r3, [sp, #68]	@ 0x44
 800a282:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800a286:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800a28a:	f001 fa71 	bl	800b770 <__ulp>
 800a28e:	4650      	mov	r0, sl
 800a290:	ec53 2b10 	vmov	r2, r3, d0
 800a294:	4659      	mov	r1, fp
 800a296:	f7f6 f9bf 	bl	8000618 <__aeabi_dmul>
 800a29a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800a29e:	f7f6 f805 	bl	80002ac <__adddf3>
 800a2a2:	4682      	mov	sl, r0
 800a2a4:	468b      	mov	fp, r1
 800a2a6:	e770      	b.n	800a18a <_strtod_l+0xa62>
 800a2a8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800a2ac:	e7e0      	b.n	800a270 <_strtod_l+0xb48>
 800a2ae:	a30e      	add	r3, pc, #56	@ (adr r3, 800a2e8 <_strtod_l+0xbc0>)
 800a2b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2b4:	f7f6 fc22 	bl	8000afc <__aeabi_dcmplt>
 800a2b8:	e798      	b.n	800a1ec <_strtod_l+0xac4>
 800a2ba:	2300      	movs	r3, #0
 800a2bc:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a2be:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800a2c0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a2c2:	6013      	str	r3, [r2, #0]
 800a2c4:	f7ff ba6d 	b.w	80097a2 <_strtod_l+0x7a>
 800a2c8:	2a65      	cmp	r2, #101	@ 0x65
 800a2ca:	f43f ab66 	beq.w	800999a <_strtod_l+0x272>
 800a2ce:	2a45      	cmp	r2, #69	@ 0x45
 800a2d0:	f43f ab63 	beq.w	800999a <_strtod_l+0x272>
 800a2d4:	2301      	movs	r3, #1
 800a2d6:	f7ff bb9e 	b.w	8009a16 <_strtod_l+0x2ee>
 800a2da:	bf00      	nop
 800a2dc:	f3af 8000 	nop.w
 800a2e0:	ffc00000 	.word	0xffc00000
 800a2e4:	41dfffff 	.word	0x41dfffff
 800a2e8:	94a03595 	.word	0x94a03595
 800a2ec:	3fcfffff 	.word	0x3fcfffff

0800a2f0 <strtod>:
 800a2f0:	460a      	mov	r2, r1
 800a2f2:	4601      	mov	r1, r0
 800a2f4:	4802      	ldr	r0, [pc, #8]	@ (800a300 <strtod+0x10>)
 800a2f6:	4b03      	ldr	r3, [pc, #12]	@ (800a304 <strtod+0x14>)
 800a2f8:	6800      	ldr	r0, [r0, #0]
 800a2fa:	f7ff ba15 	b.w	8009728 <_strtod_l>
 800a2fe:	bf00      	nop
 800a300:	200001a4 	.word	0x200001a4
 800a304:	20000038 	.word	0x20000038

0800a308 <_strtol_l.constprop.0>:
 800a308:	2b24      	cmp	r3, #36	@ 0x24
 800a30a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a30e:	4686      	mov	lr, r0
 800a310:	4690      	mov	r8, r2
 800a312:	d801      	bhi.n	800a318 <_strtol_l.constprop.0+0x10>
 800a314:	2b01      	cmp	r3, #1
 800a316:	d106      	bne.n	800a326 <_strtol_l.constprop.0+0x1e>
 800a318:	f000 fa2c 	bl	800a774 <__errno>
 800a31c:	2316      	movs	r3, #22
 800a31e:	6003      	str	r3, [r0, #0]
 800a320:	2000      	movs	r0, #0
 800a322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a326:	4834      	ldr	r0, [pc, #208]	@ (800a3f8 <_strtol_l.constprop.0+0xf0>)
 800a328:	460d      	mov	r5, r1
 800a32a:	462a      	mov	r2, r5
 800a32c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a330:	5d06      	ldrb	r6, [r0, r4]
 800a332:	f016 0608 	ands.w	r6, r6, #8
 800a336:	d1f8      	bne.n	800a32a <_strtol_l.constprop.0+0x22>
 800a338:	2c2d      	cmp	r4, #45	@ 0x2d
 800a33a:	d12d      	bne.n	800a398 <_strtol_l.constprop.0+0x90>
 800a33c:	782c      	ldrb	r4, [r5, #0]
 800a33e:	2601      	movs	r6, #1
 800a340:	1c95      	adds	r5, r2, #2
 800a342:	f033 0210 	bics.w	r2, r3, #16
 800a346:	d109      	bne.n	800a35c <_strtol_l.constprop.0+0x54>
 800a348:	2c30      	cmp	r4, #48	@ 0x30
 800a34a:	d12a      	bne.n	800a3a2 <_strtol_l.constprop.0+0x9a>
 800a34c:	782a      	ldrb	r2, [r5, #0]
 800a34e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a352:	2a58      	cmp	r2, #88	@ 0x58
 800a354:	d125      	bne.n	800a3a2 <_strtol_l.constprop.0+0x9a>
 800a356:	786c      	ldrb	r4, [r5, #1]
 800a358:	2310      	movs	r3, #16
 800a35a:	3502      	adds	r5, #2
 800a35c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800a360:	f10c 3cff 	add.w	ip, ip, #4294967295
 800a364:	2200      	movs	r2, #0
 800a366:	fbbc f9f3 	udiv	r9, ip, r3
 800a36a:	4610      	mov	r0, r2
 800a36c:	fb03 ca19 	mls	sl, r3, r9, ip
 800a370:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800a374:	2f09      	cmp	r7, #9
 800a376:	d81b      	bhi.n	800a3b0 <_strtol_l.constprop.0+0xa8>
 800a378:	463c      	mov	r4, r7
 800a37a:	42a3      	cmp	r3, r4
 800a37c:	dd27      	ble.n	800a3ce <_strtol_l.constprop.0+0xc6>
 800a37e:	1c57      	adds	r7, r2, #1
 800a380:	d007      	beq.n	800a392 <_strtol_l.constprop.0+0x8a>
 800a382:	4581      	cmp	r9, r0
 800a384:	d320      	bcc.n	800a3c8 <_strtol_l.constprop.0+0xc0>
 800a386:	d101      	bne.n	800a38c <_strtol_l.constprop.0+0x84>
 800a388:	45a2      	cmp	sl, r4
 800a38a:	db1d      	blt.n	800a3c8 <_strtol_l.constprop.0+0xc0>
 800a38c:	fb00 4003 	mla	r0, r0, r3, r4
 800a390:	2201      	movs	r2, #1
 800a392:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a396:	e7eb      	b.n	800a370 <_strtol_l.constprop.0+0x68>
 800a398:	2c2b      	cmp	r4, #43	@ 0x2b
 800a39a:	bf04      	itt	eq
 800a39c:	782c      	ldrbeq	r4, [r5, #0]
 800a39e:	1c95      	addeq	r5, r2, #2
 800a3a0:	e7cf      	b.n	800a342 <_strtol_l.constprop.0+0x3a>
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d1da      	bne.n	800a35c <_strtol_l.constprop.0+0x54>
 800a3a6:	2c30      	cmp	r4, #48	@ 0x30
 800a3a8:	bf0c      	ite	eq
 800a3aa:	2308      	moveq	r3, #8
 800a3ac:	230a      	movne	r3, #10
 800a3ae:	e7d5      	b.n	800a35c <_strtol_l.constprop.0+0x54>
 800a3b0:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800a3b4:	2f19      	cmp	r7, #25
 800a3b6:	d801      	bhi.n	800a3bc <_strtol_l.constprop.0+0xb4>
 800a3b8:	3c37      	subs	r4, #55	@ 0x37
 800a3ba:	e7de      	b.n	800a37a <_strtol_l.constprop.0+0x72>
 800a3bc:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800a3c0:	2f19      	cmp	r7, #25
 800a3c2:	d804      	bhi.n	800a3ce <_strtol_l.constprop.0+0xc6>
 800a3c4:	3c57      	subs	r4, #87	@ 0x57
 800a3c6:	e7d8      	b.n	800a37a <_strtol_l.constprop.0+0x72>
 800a3c8:	f04f 32ff 	mov.w	r2, #4294967295
 800a3cc:	e7e1      	b.n	800a392 <_strtol_l.constprop.0+0x8a>
 800a3ce:	1c53      	adds	r3, r2, #1
 800a3d0:	d108      	bne.n	800a3e4 <_strtol_l.constprop.0+0xdc>
 800a3d2:	2322      	movs	r3, #34	@ 0x22
 800a3d4:	f8ce 3000 	str.w	r3, [lr]
 800a3d8:	4660      	mov	r0, ip
 800a3da:	f1b8 0f00 	cmp.w	r8, #0
 800a3de:	d0a0      	beq.n	800a322 <_strtol_l.constprop.0+0x1a>
 800a3e0:	1e69      	subs	r1, r5, #1
 800a3e2:	e006      	b.n	800a3f2 <_strtol_l.constprop.0+0xea>
 800a3e4:	b106      	cbz	r6, 800a3e8 <_strtol_l.constprop.0+0xe0>
 800a3e6:	4240      	negs	r0, r0
 800a3e8:	f1b8 0f00 	cmp.w	r8, #0
 800a3ec:	d099      	beq.n	800a322 <_strtol_l.constprop.0+0x1a>
 800a3ee:	2a00      	cmp	r2, #0
 800a3f0:	d1f6      	bne.n	800a3e0 <_strtol_l.constprop.0+0xd8>
 800a3f2:	f8c8 1000 	str.w	r1, [r8]
 800a3f6:	e794      	b.n	800a322 <_strtol_l.constprop.0+0x1a>
 800a3f8:	0800cc59 	.word	0x0800cc59

0800a3fc <strtol>:
 800a3fc:	4613      	mov	r3, r2
 800a3fe:	460a      	mov	r2, r1
 800a400:	4601      	mov	r1, r0
 800a402:	4802      	ldr	r0, [pc, #8]	@ (800a40c <strtol+0x10>)
 800a404:	6800      	ldr	r0, [r0, #0]
 800a406:	f7ff bf7f 	b.w	800a308 <_strtol_l.constprop.0>
 800a40a:	bf00      	nop
 800a40c:	200001a4 	.word	0x200001a4

0800a410 <std>:
 800a410:	2300      	movs	r3, #0
 800a412:	b510      	push	{r4, lr}
 800a414:	4604      	mov	r4, r0
 800a416:	e9c0 3300 	strd	r3, r3, [r0]
 800a41a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a41e:	6083      	str	r3, [r0, #8]
 800a420:	8181      	strh	r1, [r0, #12]
 800a422:	6643      	str	r3, [r0, #100]	@ 0x64
 800a424:	81c2      	strh	r2, [r0, #14]
 800a426:	6183      	str	r3, [r0, #24]
 800a428:	4619      	mov	r1, r3
 800a42a:	2208      	movs	r2, #8
 800a42c:	305c      	adds	r0, #92	@ 0x5c
 800a42e:	f000 f92d 	bl	800a68c <memset>
 800a432:	4b0d      	ldr	r3, [pc, #52]	@ (800a468 <std+0x58>)
 800a434:	6263      	str	r3, [r4, #36]	@ 0x24
 800a436:	4b0d      	ldr	r3, [pc, #52]	@ (800a46c <std+0x5c>)
 800a438:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a43a:	4b0d      	ldr	r3, [pc, #52]	@ (800a470 <std+0x60>)
 800a43c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a43e:	4b0d      	ldr	r3, [pc, #52]	@ (800a474 <std+0x64>)
 800a440:	6323      	str	r3, [r4, #48]	@ 0x30
 800a442:	4b0d      	ldr	r3, [pc, #52]	@ (800a478 <std+0x68>)
 800a444:	6224      	str	r4, [r4, #32]
 800a446:	429c      	cmp	r4, r3
 800a448:	d006      	beq.n	800a458 <std+0x48>
 800a44a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a44e:	4294      	cmp	r4, r2
 800a450:	d002      	beq.n	800a458 <std+0x48>
 800a452:	33d0      	adds	r3, #208	@ 0xd0
 800a454:	429c      	cmp	r4, r3
 800a456:	d105      	bne.n	800a464 <std+0x54>
 800a458:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a45c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a460:	f000 b9b2 	b.w	800a7c8 <__retarget_lock_init_recursive>
 800a464:	bd10      	pop	{r4, pc}
 800a466:	bf00      	nop
 800a468:	0800a595 	.word	0x0800a595
 800a46c:	0800a5b7 	.word	0x0800a5b7
 800a470:	0800a5ef 	.word	0x0800a5ef
 800a474:	0800a613 	.word	0x0800a613
 800a478:	200005a4 	.word	0x200005a4

0800a47c <stdio_exit_handler>:
 800a47c:	4a02      	ldr	r2, [pc, #8]	@ (800a488 <stdio_exit_handler+0xc>)
 800a47e:	4903      	ldr	r1, [pc, #12]	@ (800a48c <stdio_exit_handler+0x10>)
 800a480:	4803      	ldr	r0, [pc, #12]	@ (800a490 <stdio_exit_handler+0x14>)
 800a482:	f000 b869 	b.w	800a558 <_fwalk_sglue>
 800a486:	bf00      	nop
 800a488:	2000002c 	.word	0x2000002c
 800a48c:	0800c0d9 	.word	0x0800c0d9
 800a490:	200001a8 	.word	0x200001a8

0800a494 <cleanup_stdio>:
 800a494:	6841      	ldr	r1, [r0, #4]
 800a496:	4b0c      	ldr	r3, [pc, #48]	@ (800a4c8 <cleanup_stdio+0x34>)
 800a498:	4299      	cmp	r1, r3
 800a49a:	b510      	push	{r4, lr}
 800a49c:	4604      	mov	r4, r0
 800a49e:	d001      	beq.n	800a4a4 <cleanup_stdio+0x10>
 800a4a0:	f001 fe1a 	bl	800c0d8 <_fflush_r>
 800a4a4:	68a1      	ldr	r1, [r4, #8]
 800a4a6:	4b09      	ldr	r3, [pc, #36]	@ (800a4cc <cleanup_stdio+0x38>)
 800a4a8:	4299      	cmp	r1, r3
 800a4aa:	d002      	beq.n	800a4b2 <cleanup_stdio+0x1e>
 800a4ac:	4620      	mov	r0, r4
 800a4ae:	f001 fe13 	bl	800c0d8 <_fflush_r>
 800a4b2:	68e1      	ldr	r1, [r4, #12]
 800a4b4:	4b06      	ldr	r3, [pc, #24]	@ (800a4d0 <cleanup_stdio+0x3c>)
 800a4b6:	4299      	cmp	r1, r3
 800a4b8:	d004      	beq.n	800a4c4 <cleanup_stdio+0x30>
 800a4ba:	4620      	mov	r0, r4
 800a4bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a4c0:	f001 be0a 	b.w	800c0d8 <_fflush_r>
 800a4c4:	bd10      	pop	{r4, pc}
 800a4c6:	bf00      	nop
 800a4c8:	200005a4 	.word	0x200005a4
 800a4cc:	2000060c 	.word	0x2000060c
 800a4d0:	20000674 	.word	0x20000674

0800a4d4 <global_stdio_init.part.0>:
 800a4d4:	b510      	push	{r4, lr}
 800a4d6:	4b0b      	ldr	r3, [pc, #44]	@ (800a504 <global_stdio_init.part.0+0x30>)
 800a4d8:	4c0b      	ldr	r4, [pc, #44]	@ (800a508 <global_stdio_init.part.0+0x34>)
 800a4da:	4a0c      	ldr	r2, [pc, #48]	@ (800a50c <global_stdio_init.part.0+0x38>)
 800a4dc:	601a      	str	r2, [r3, #0]
 800a4de:	4620      	mov	r0, r4
 800a4e0:	2200      	movs	r2, #0
 800a4e2:	2104      	movs	r1, #4
 800a4e4:	f7ff ff94 	bl	800a410 <std>
 800a4e8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a4ec:	2201      	movs	r2, #1
 800a4ee:	2109      	movs	r1, #9
 800a4f0:	f7ff ff8e 	bl	800a410 <std>
 800a4f4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a4f8:	2202      	movs	r2, #2
 800a4fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a4fe:	2112      	movs	r1, #18
 800a500:	f7ff bf86 	b.w	800a410 <std>
 800a504:	200006dc 	.word	0x200006dc
 800a508:	200005a4 	.word	0x200005a4
 800a50c:	0800a47d 	.word	0x0800a47d

0800a510 <__sfp_lock_acquire>:
 800a510:	4801      	ldr	r0, [pc, #4]	@ (800a518 <__sfp_lock_acquire+0x8>)
 800a512:	f000 b95a 	b.w	800a7ca <__retarget_lock_acquire_recursive>
 800a516:	bf00      	nop
 800a518:	200006e5 	.word	0x200006e5

0800a51c <__sfp_lock_release>:
 800a51c:	4801      	ldr	r0, [pc, #4]	@ (800a524 <__sfp_lock_release+0x8>)
 800a51e:	f000 b955 	b.w	800a7cc <__retarget_lock_release_recursive>
 800a522:	bf00      	nop
 800a524:	200006e5 	.word	0x200006e5

0800a528 <__sinit>:
 800a528:	b510      	push	{r4, lr}
 800a52a:	4604      	mov	r4, r0
 800a52c:	f7ff fff0 	bl	800a510 <__sfp_lock_acquire>
 800a530:	6a23      	ldr	r3, [r4, #32]
 800a532:	b11b      	cbz	r3, 800a53c <__sinit+0x14>
 800a534:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a538:	f7ff bff0 	b.w	800a51c <__sfp_lock_release>
 800a53c:	4b04      	ldr	r3, [pc, #16]	@ (800a550 <__sinit+0x28>)
 800a53e:	6223      	str	r3, [r4, #32]
 800a540:	4b04      	ldr	r3, [pc, #16]	@ (800a554 <__sinit+0x2c>)
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	2b00      	cmp	r3, #0
 800a546:	d1f5      	bne.n	800a534 <__sinit+0xc>
 800a548:	f7ff ffc4 	bl	800a4d4 <global_stdio_init.part.0>
 800a54c:	e7f2      	b.n	800a534 <__sinit+0xc>
 800a54e:	bf00      	nop
 800a550:	0800a495 	.word	0x0800a495
 800a554:	200006dc 	.word	0x200006dc

0800a558 <_fwalk_sglue>:
 800a558:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a55c:	4607      	mov	r7, r0
 800a55e:	4688      	mov	r8, r1
 800a560:	4614      	mov	r4, r2
 800a562:	2600      	movs	r6, #0
 800a564:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a568:	f1b9 0901 	subs.w	r9, r9, #1
 800a56c:	d505      	bpl.n	800a57a <_fwalk_sglue+0x22>
 800a56e:	6824      	ldr	r4, [r4, #0]
 800a570:	2c00      	cmp	r4, #0
 800a572:	d1f7      	bne.n	800a564 <_fwalk_sglue+0xc>
 800a574:	4630      	mov	r0, r6
 800a576:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a57a:	89ab      	ldrh	r3, [r5, #12]
 800a57c:	2b01      	cmp	r3, #1
 800a57e:	d907      	bls.n	800a590 <_fwalk_sglue+0x38>
 800a580:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a584:	3301      	adds	r3, #1
 800a586:	d003      	beq.n	800a590 <_fwalk_sglue+0x38>
 800a588:	4629      	mov	r1, r5
 800a58a:	4638      	mov	r0, r7
 800a58c:	47c0      	blx	r8
 800a58e:	4306      	orrs	r6, r0
 800a590:	3568      	adds	r5, #104	@ 0x68
 800a592:	e7e9      	b.n	800a568 <_fwalk_sglue+0x10>

0800a594 <__sread>:
 800a594:	b510      	push	{r4, lr}
 800a596:	460c      	mov	r4, r1
 800a598:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a59c:	f000 f8c6 	bl	800a72c <_read_r>
 800a5a0:	2800      	cmp	r0, #0
 800a5a2:	bfab      	itete	ge
 800a5a4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a5a6:	89a3      	ldrhlt	r3, [r4, #12]
 800a5a8:	181b      	addge	r3, r3, r0
 800a5aa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a5ae:	bfac      	ite	ge
 800a5b0:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a5b2:	81a3      	strhlt	r3, [r4, #12]
 800a5b4:	bd10      	pop	{r4, pc}

0800a5b6 <__swrite>:
 800a5b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a5ba:	461f      	mov	r7, r3
 800a5bc:	898b      	ldrh	r3, [r1, #12]
 800a5be:	05db      	lsls	r3, r3, #23
 800a5c0:	4605      	mov	r5, r0
 800a5c2:	460c      	mov	r4, r1
 800a5c4:	4616      	mov	r6, r2
 800a5c6:	d505      	bpl.n	800a5d4 <__swrite+0x1e>
 800a5c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5cc:	2302      	movs	r3, #2
 800a5ce:	2200      	movs	r2, #0
 800a5d0:	f000 f89a 	bl	800a708 <_lseek_r>
 800a5d4:	89a3      	ldrh	r3, [r4, #12]
 800a5d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a5da:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a5de:	81a3      	strh	r3, [r4, #12]
 800a5e0:	4632      	mov	r2, r6
 800a5e2:	463b      	mov	r3, r7
 800a5e4:	4628      	mov	r0, r5
 800a5e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a5ea:	f000 b8b1 	b.w	800a750 <_write_r>

0800a5ee <__sseek>:
 800a5ee:	b510      	push	{r4, lr}
 800a5f0:	460c      	mov	r4, r1
 800a5f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5f6:	f000 f887 	bl	800a708 <_lseek_r>
 800a5fa:	1c43      	adds	r3, r0, #1
 800a5fc:	89a3      	ldrh	r3, [r4, #12]
 800a5fe:	bf15      	itete	ne
 800a600:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a602:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a606:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a60a:	81a3      	strheq	r3, [r4, #12]
 800a60c:	bf18      	it	ne
 800a60e:	81a3      	strhne	r3, [r4, #12]
 800a610:	bd10      	pop	{r4, pc}

0800a612 <__sclose>:
 800a612:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a616:	f000 b867 	b.w	800a6e8 <_close_r>

0800a61a <_vsniprintf_r>:
 800a61a:	b530      	push	{r4, r5, lr}
 800a61c:	4614      	mov	r4, r2
 800a61e:	2c00      	cmp	r4, #0
 800a620:	b09b      	sub	sp, #108	@ 0x6c
 800a622:	4605      	mov	r5, r0
 800a624:	461a      	mov	r2, r3
 800a626:	da05      	bge.n	800a634 <_vsniprintf_r+0x1a>
 800a628:	238b      	movs	r3, #139	@ 0x8b
 800a62a:	6003      	str	r3, [r0, #0]
 800a62c:	f04f 30ff 	mov.w	r0, #4294967295
 800a630:	b01b      	add	sp, #108	@ 0x6c
 800a632:	bd30      	pop	{r4, r5, pc}
 800a634:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800a638:	f8ad 300c 	strh.w	r3, [sp, #12]
 800a63c:	bf14      	ite	ne
 800a63e:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a642:	4623      	moveq	r3, r4
 800a644:	9302      	str	r3, [sp, #8]
 800a646:	9305      	str	r3, [sp, #20]
 800a648:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a64c:	9100      	str	r1, [sp, #0]
 800a64e:	9104      	str	r1, [sp, #16]
 800a650:	f8ad 300e 	strh.w	r3, [sp, #14]
 800a654:	4669      	mov	r1, sp
 800a656:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800a658:	f001 fa30 	bl	800babc <_svfiprintf_r>
 800a65c:	1c43      	adds	r3, r0, #1
 800a65e:	bfbc      	itt	lt
 800a660:	238b      	movlt	r3, #139	@ 0x8b
 800a662:	602b      	strlt	r3, [r5, #0]
 800a664:	2c00      	cmp	r4, #0
 800a666:	d0e3      	beq.n	800a630 <_vsniprintf_r+0x16>
 800a668:	9b00      	ldr	r3, [sp, #0]
 800a66a:	2200      	movs	r2, #0
 800a66c:	701a      	strb	r2, [r3, #0]
 800a66e:	e7df      	b.n	800a630 <_vsniprintf_r+0x16>

0800a670 <vsniprintf>:
 800a670:	b507      	push	{r0, r1, r2, lr}
 800a672:	9300      	str	r3, [sp, #0]
 800a674:	4613      	mov	r3, r2
 800a676:	460a      	mov	r2, r1
 800a678:	4601      	mov	r1, r0
 800a67a:	4803      	ldr	r0, [pc, #12]	@ (800a688 <vsniprintf+0x18>)
 800a67c:	6800      	ldr	r0, [r0, #0]
 800a67e:	f7ff ffcc 	bl	800a61a <_vsniprintf_r>
 800a682:	b003      	add	sp, #12
 800a684:	f85d fb04 	ldr.w	pc, [sp], #4
 800a688:	200001a4 	.word	0x200001a4

0800a68c <memset>:
 800a68c:	4402      	add	r2, r0
 800a68e:	4603      	mov	r3, r0
 800a690:	4293      	cmp	r3, r2
 800a692:	d100      	bne.n	800a696 <memset+0xa>
 800a694:	4770      	bx	lr
 800a696:	f803 1b01 	strb.w	r1, [r3], #1
 800a69a:	e7f9      	b.n	800a690 <memset+0x4>

0800a69c <strncmp>:
 800a69c:	b510      	push	{r4, lr}
 800a69e:	b16a      	cbz	r2, 800a6bc <strncmp+0x20>
 800a6a0:	3901      	subs	r1, #1
 800a6a2:	1884      	adds	r4, r0, r2
 800a6a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a6a8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a6ac:	429a      	cmp	r2, r3
 800a6ae:	d103      	bne.n	800a6b8 <strncmp+0x1c>
 800a6b0:	42a0      	cmp	r0, r4
 800a6b2:	d001      	beq.n	800a6b8 <strncmp+0x1c>
 800a6b4:	2a00      	cmp	r2, #0
 800a6b6:	d1f5      	bne.n	800a6a4 <strncmp+0x8>
 800a6b8:	1ad0      	subs	r0, r2, r3
 800a6ba:	bd10      	pop	{r4, pc}
 800a6bc:	4610      	mov	r0, r2
 800a6be:	e7fc      	b.n	800a6ba <strncmp+0x1e>

0800a6c0 <strncpy>:
 800a6c0:	b510      	push	{r4, lr}
 800a6c2:	3901      	subs	r1, #1
 800a6c4:	4603      	mov	r3, r0
 800a6c6:	b132      	cbz	r2, 800a6d6 <strncpy+0x16>
 800a6c8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800a6cc:	f803 4b01 	strb.w	r4, [r3], #1
 800a6d0:	3a01      	subs	r2, #1
 800a6d2:	2c00      	cmp	r4, #0
 800a6d4:	d1f7      	bne.n	800a6c6 <strncpy+0x6>
 800a6d6:	441a      	add	r2, r3
 800a6d8:	2100      	movs	r1, #0
 800a6da:	4293      	cmp	r3, r2
 800a6dc:	d100      	bne.n	800a6e0 <strncpy+0x20>
 800a6de:	bd10      	pop	{r4, pc}
 800a6e0:	f803 1b01 	strb.w	r1, [r3], #1
 800a6e4:	e7f9      	b.n	800a6da <strncpy+0x1a>
	...

0800a6e8 <_close_r>:
 800a6e8:	b538      	push	{r3, r4, r5, lr}
 800a6ea:	4d06      	ldr	r5, [pc, #24]	@ (800a704 <_close_r+0x1c>)
 800a6ec:	2300      	movs	r3, #0
 800a6ee:	4604      	mov	r4, r0
 800a6f0:	4608      	mov	r0, r1
 800a6f2:	602b      	str	r3, [r5, #0]
 800a6f4:	f7f7 fd7c 	bl	80021f0 <_close>
 800a6f8:	1c43      	adds	r3, r0, #1
 800a6fa:	d102      	bne.n	800a702 <_close_r+0x1a>
 800a6fc:	682b      	ldr	r3, [r5, #0]
 800a6fe:	b103      	cbz	r3, 800a702 <_close_r+0x1a>
 800a700:	6023      	str	r3, [r4, #0]
 800a702:	bd38      	pop	{r3, r4, r5, pc}
 800a704:	200006e0 	.word	0x200006e0

0800a708 <_lseek_r>:
 800a708:	b538      	push	{r3, r4, r5, lr}
 800a70a:	4d07      	ldr	r5, [pc, #28]	@ (800a728 <_lseek_r+0x20>)
 800a70c:	4604      	mov	r4, r0
 800a70e:	4608      	mov	r0, r1
 800a710:	4611      	mov	r1, r2
 800a712:	2200      	movs	r2, #0
 800a714:	602a      	str	r2, [r5, #0]
 800a716:	461a      	mov	r2, r3
 800a718:	f7f7 fd91 	bl	800223e <_lseek>
 800a71c:	1c43      	adds	r3, r0, #1
 800a71e:	d102      	bne.n	800a726 <_lseek_r+0x1e>
 800a720:	682b      	ldr	r3, [r5, #0]
 800a722:	b103      	cbz	r3, 800a726 <_lseek_r+0x1e>
 800a724:	6023      	str	r3, [r4, #0]
 800a726:	bd38      	pop	{r3, r4, r5, pc}
 800a728:	200006e0 	.word	0x200006e0

0800a72c <_read_r>:
 800a72c:	b538      	push	{r3, r4, r5, lr}
 800a72e:	4d07      	ldr	r5, [pc, #28]	@ (800a74c <_read_r+0x20>)
 800a730:	4604      	mov	r4, r0
 800a732:	4608      	mov	r0, r1
 800a734:	4611      	mov	r1, r2
 800a736:	2200      	movs	r2, #0
 800a738:	602a      	str	r2, [r5, #0]
 800a73a:	461a      	mov	r2, r3
 800a73c:	f7f7 fd1f 	bl	800217e <_read>
 800a740:	1c43      	adds	r3, r0, #1
 800a742:	d102      	bne.n	800a74a <_read_r+0x1e>
 800a744:	682b      	ldr	r3, [r5, #0]
 800a746:	b103      	cbz	r3, 800a74a <_read_r+0x1e>
 800a748:	6023      	str	r3, [r4, #0]
 800a74a:	bd38      	pop	{r3, r4, r5, pc}
 800a74c:	200006e0 	.word	0x200006e0

0800a750 <_write_r>:
 800a750:	b538      	push	{r3, r4, r5, lr}
 800a752:	4d07      	ldr	r5, [pc, #28]	@ (800a770 <_write_r+0x20>)
 800a754:	4604      	mov	r4, r0
 800a756:	4608      	mov	r0, r1
 800a758:	4611      	mov	r1, r2
 800a75a:	2200      	movs	r2, #0
 800a75c:	602a      	str	r2, [r5, #0]
 800a75e:	461a      	mov	r2, r3
 800a760:	f7f7 fd2a 	bl	80021b8 <_write>
 800a764:	1c43      	adds	r3, r0, #1
 800a766:	d102      	bne.n	800a76e <_write_r+0x1e>
 800a768:	682b      	ldr	r3, [r5, #0]
 800a76a:	b103      	cbz	r3, 800a76e <_write_r+0x1e>
 800a76c:	6023      	str	r3, [r4, #0]
 800a76e:	bd38      	pop	{r3, r4, r5, pc}
 800a770:	200006e0 	.word	0x200006e0

0800a774 <__errno>:
 800a774:	4b01      	ldr	r3, [pc, #4]	@ (800a77c <__errno+0x8>)
 800a776:	6818      	ldr	r0, [r3, #0]
 800a778:	4770      	bx	lr
 800a77a:	bf00      	nop
 800a77c:	200001a4 	.word	0x200001a4

0800a780 <__libc_init_array>:
 800a780:	b570      	push	{r4, r5, r6, lr}
 800a782:	4d0d      	ldr	r5, [pc, #52]	@ (800a7b8 <__libc_init_array+0x38>)
 800a784:	4c0d      	ldr	r4, [pc, #52]	@ (800a7bc <__libc_init_array+0x3c>)
 800a786:	1b64      	subs	r4, r4, r5
 800a788:	10a4      	asrs	r4, r4, #2
 800a78a:	2600      	movs	r6, #0
 800a78c:	42a6      	cmp	r6, r4
 800a78e:	d109      	bne.n	800a7a4 <__libc_init_array+0x24>
 800a790:	4d0b      	ldr	r5, [pc, #44]	@ (800a7c0 <__libc_init_array+0x40>)
 800a792:	4c0c      	ldr	r4, [pc, #48]	@ (800a7c4 <__libc_init_array+0x44>)
 800a794:	f002 f91e 	bl	800c9d4 <_init>
 800a798:	1b64      	subs	r4, r4, r5
 800a79a:	10a4      	asrs	r4, r4, #2
 800a79c:	2600      	movs	r6, #0
 800a79e:	42a6      	cmp	r6, r4
 800a7a0:	d105      	bne.n	800a7ae <__libc_init_array+0x2e>
 800a7a2:	bd70      	pop	{r4, r5, r6, pc}
 800a7a4:	f855 3b04 	ldr.w	r3, [r5], #4
 800a7a8:	4798      	blx	r3
 800a7aa:	3601      	adds	r6, #1
 800a7ac:	e7ee      	b.n	800a78c <__libc_init_array+0xc>
 800a7ae:	f855 3b04 	ldr.w	r3, [r5], #4
 800a7b2:	4798      	blx	r3
 800a7b4:	3601      	adds	r6, #1
 800a7b6:	e7f2      	b.n	800a79e <__libc_init_array+0x1e>
 800a7b8:	0800cfb8 	.word	0x0800cfb8
 800a7bc:	0800cfb8 	.word	0x0800cfb8
 800a7c0:	0800cfb8 	.word	0x0800cfb8
 800a7c4:	0800cfbc 	.word	0x0800cfbc

0800a7c8 <__retarget_lock_init_recursive>:
 800a7c8:	4770      	bx	lr

0800a7ca <__retarget_lock_acquire_recursive>:
 800a7ca:	4770      	bx	lr

0800a7cc <__retarget_lock_release_recursive>:
 800a7cc:	4770      	bx	lr

0800a7ce <memcpy>:
 800a7ce:	440a      	add	r2, r1
 800a7d0:	4291      	cmp	r1, r2
 800a7d2:	f100 33ff 	add.w	r3, r0, #4294967295
 800a7d6:	d100      	bne.n	800a7da <memcpy+0xc>
 800a7d8:	4770      	bx	lr
 800a7da:	b510      	push	{r4, lr}
 800a7dc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a7e0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a7e4:	4291      	cmp	r1, r2
 800a7e6:	d1f9      	bne.n	800a7dc <memcpy+0xe>
 800a7e8:	bd10      	pop	{r4, pc}
 800a7ea:	0000      	movs	r0, r0
 800a7ec:	0000      	movs	r0, r0
	...

0800a7f0 <nan>:
 800a7f0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800a7f8 <nan+0x8>
 800a7f4:	4770      	bx	lr
 800a7f6:	bf00      	nop
 800a7f8:	00000000 	.word	0x00000000
 800a7fc:	7ff80000 	.word	0x7ff80000

0800a800 <_free_r>:
 800a800:	b538      	push	{r3, r4, r5, lr}
 800a802:	4605      	mov	r5, r0
 800a804:	2900      	cmp	r1, #0
 800a806:	d041      	beq.n	800a88c <_free_r+0x8c>
 800a808:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a80c:	1f0c      	subs	r4, r1, #4
 800a80e:	2b00      	cmp	r3, #0
 800a810:	bfb8      	it	lt
 800a812:	18e4      	addlt	r4, r4, r3
 800a814:	f000 fc2c 	bl	800b070 <__malloc_lock>
 800a818:	4a1d      	ldr	r2, [pc, #116]	@ (800a890 <_free_r+0x90>)
 800a81a:	6813      	ldr	r3, [r2, #0]
 800a81c:	b933      	cbnz	r3, 800a82c <_free_r+0x2c>
 800a81e:	6063      	str	r3, [r4, #4]
 800a820:	6014      	str	r4, [r2, #0]
 800a822:	4628      	mov	r0, r5
 800a824:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a828:	f000 bc28 	b.w	800b07c <__malloc_unlock>
 800a82c:	42a3      	cmp	r3, r4
 800a82e:	d908      	bls.n	800a842 <_free_r+0x42>
 800a830:	6820      	ldr	r0, [r4, #0]
 800a832:	1821      	adds	r1, r4, r0
 800a834:	428b      	cmp	r3, r1
 800a836:	bf01      	itttt	eq
 800a838:	6819      	ldreq	r1, [r3, #0]
 800a83a:	685b      	ldreq	r3, [r3, #4]
 800a83c:	1809      	addeq	r1, r1, r0
 800a83e:	6021      	streq	r1, [r4, #0]
 800a840:	e7ed      	b.n	800a81e <_free_r+0x1e>
 800a842:	461a      	mov	r2, r3
 800a844:	685b      	ldr	r3, [r3, #4]
 800a846:	b10b      	cbz	r3, 800a84c <_free_r+0x4c>
 800a848:	42a3      	cmp	r3, r4
 800a84a:	d9fa      	bls.n	800a842 <_free_r+0x42>
 800a84c:	6811      	ldr	r1, [r2, #0]
 800a84e:	1850      	adds	r0, r2, r1
 800a850:	42a0      	cmp	r0, r4
 800a852:	d10b      	bne.n	800a86c <_free_r+0x6c>
 800a854:	6820      	ldr	r0, [r4, #0]
 800a856:	4401      	add	r1, r0
 800a858:	1850      	adds	r0, r2, r1
 800a85a:	4283      	cmp	r3, r0
 800a85c:	6011      	str	r1, [r2, #0]
 800a85e:	d1e0      	bne.n	800a822 <_free_r+0x22>
 800a860:	6818      	ldr	r0, [r3, #0]
 800a862:	685b      	ldr	r3, [r3, #4]
 800a864:	6053      	str	r3, [r2, #4]
 800a866:	4408      	add	r0, r1
 800a868:	6010      	str	r0, [r2, #0]
 800a86a:	e7da      	b.n	800a822 <_free_r+0x22>
 800a86c:	d902      	bls.n	800a874 <_free_r+0x74>
 800a86e:	230c      	movs	r3, #12
 800a870:	602b      	str	r3, [r5, #0]
 800a872:	e7d6      	b.n	800a822 <_free_r+0x22>
 800a874:	6820      	ldr	r0, [r4, #0]
 800a876:	1821      	adds	r1, r4, r0
 800a878:	428b      	cmp	r3, r1
 800a87a:	bf04      	itt	eq
 800a87c:	6819      	ldreq	r1, [r3, #0]
 800a87e:	685b      	ldreq	r3, [r3, #4]
 800a880:	6063      	str	r3, [r4, #4]
 800a882:	bf04      	itt	eq
 800a884:	1809      	addeq	r1, r1, r0
 800a886:	6021      	streq	r1, [r4, #0]
 800a888:	6054      	str	r4, [r2, #4]
 800a88a:	e7ca      	b.n	800a822 <_free_r+0x22>
 800a88c:	bd38      	pop	{r3, r4, r5, pc}
 800a88e:	bf00      	nop
 800a890:	200006ec 	.word	0x200006ec

0800a894 <rshift>:
 800a894:	6903      	ldr	r3, [r0, #16]
 800a896:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a89a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a89e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a8a2:	f100 0414 	add.w	r4, r0, #20
 800a8a6:	dd45      	ble.n	800a934 <rshift+0xa0>
 800a8a8:	f011 011f 	ands.w	r1, r1, #31
 800a8ac:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a8b0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a8b4:	d10c      	bne.n	800a8d0 <rshift+0x3c>
 800a8b6:	f100 0710 	add.w	r7, r0, #16
 800a8ba:	4629      	mov	r1, r5
 800a8bc:	42b1      	cmp	r1, r6
 800a8be:	d334      	bcc.n	800a92a <rshift+0x96>
 800a8c0:	1a9b      	subs	r3, r3, r2
 800a8c2:	009b      	lsls	r3, r3, #2
 800a8c4:	1eea      	subs	r2, r5, #3
 800a8c6:	4296      	cmp	r6, r2
 800a8c8:	bf38      	it	cc
 800a8ca:	2300      	movcc	r3, #0
 800a8cc:	4423      	add	r3, r4
 800a8ce:	e015      	b.n	800a8fc <rshift+0x68>
 800a8d0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a8d4:	f1c1 0820 	rsb	r8, r1, #32
 800a8d8:	40cf      	lsrs	r7, r1
 800a8da:	f105 0e04 	add.w	lr, r5, #4
 800a8de:	46a1      	mov	r9, r4
 800a8e0:	4576      	cmp	r6, lr
 800a8e2:	46f4      	mov	ip, lr
 800a8e4:	d815      	bhi.n	800a912 <rshift+0x7e>
 800a8e6:	1a9a      	subs	r2, r3, r2
 800a8e8:	0092      	lsls	r2, r2, #2
 800a8ea:	3a04      	subs	r2, #4
 800a8ec:	3501      	adds	r5, #1
 800a8ee:	42ae      	cmp	r6, r5
 800a8f0:	bf38      	it	cc
 800a8f2:	2200      	movcc	r2, #0
 800a8f4:	18a3      	adds	r3, r4, r2
 800a8f6:	50a7      	str	r7, [r4, r2]
 800a8f8:	b107      	cbz	r7, 800a8fc <rshift+0x68>
 800a8fa:	3304      	adds	r3, #4
 800a8fc:	1b1a      	subs	r2, r3, r4
 800a8fe:	42a3      	cmp	r3, r4
 800a900:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a904:	bf08      	it	eq
 800a906:	2300      	moveq	r3, #0
 800a908:	6102      	str	r2, [r0, #16]
 800a90a:	bf08      	it	eq
 800a90c:	6143      	streq	r3, [r0, #20]
 800a90e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a912:	f8dc c000 	ldr.w	ip, [ip]
 800a916:	fa0c fc08 	lsl.w	ip, ip, r8
 800a91a:	ea4c 0707 	orr.w	r7, ip, r7
 800a91e:	f849 7b04 	str.w	r7, [r9], #4
 800a922:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a926:	40cf      	lsrs	r7, r1
 800a928:	e7da      	b.n	800a8e0 <rshift+0x4c>
 800a92a:	f851 cb04 	ldr.w	ip, [r1], #4
 800a92e:	f847 cf04 	str.w	ip, [r7, #4]!
 800a932:	e7c3      	b.n	800a8bc <rshift+0x28>
 800a934:	4623      	mov	r3, r4
 800a936:	e7e1      	b.n	800a8fc <rshift+0x68>

0800a938 <__hexdig_fun>:
 800a938:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800a93c:	2b09      	cmp	r3, #9
 800a93e:	d802      	bhi.n	800a946 <__hexdig_fun+0xe>
 800a940:	3820      	subs	r0, #32
 800a942:	b2c0      	uxtb	r0, r0
 800a944:	4770      	bx	lr
 800a946:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800a94a:	2b05      	cmp	r3, #5
 800a94c:	d801      	bhi.n	800a952 <__hexdig_fun+0x1a>
 800a94e:	3847      	subs	r0, #71	@ 0x47
 800a950:	e7f7      	b.n	800a942 <__hexdig_fun+0xa>
 800a952:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800a956:	2b05      	cmp	r3, #5
 800a958:	d801      	bhi.n	800a95e <__hexdig_fun+0x26>
 800a95a:	3827      	subs	r0, #39	@ 0x27
 800a95c:	e7f1      	b.n	800a942 <__hexdig_fun+0xa>
 800a95e:	2000      	movs	r0, #0
 800a960:	4770      	bx	lr
	...

0800a964 <__gethex>:
 800a964:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a968:	b085      	sub	sp, #20
 800a96a:	468a      	mov	sl, r1
 800a96c:	9302      	str	r3, [sp, #8]
 800a96e:	680b      	ldr	r3, [r1, #0]
 800a970:	9001      	str	r0, [sp, #4]
 800a972:	4690      	mov	r8, r2
 800a974:	1c9c      	adds	r4, r3, #2
 800a976:	46a1      	mov	r9, r4
 800a978:	f814 0b01 	ldrb.w	r0, [r4], #1
 800a97c:	2830      	cmp	r0, #48	@ 0x30
 800a97e:	d0fa      	beq.n	800a976 <__gethex+0x12>
 800a980:	eba9 0303 	sub.w	r3, r9, r3
 800a984:	f1a3 0b02 	sub.w	fp, r3, #2
 800a988:	f7ff ffd6 	bl	800a938 <__hexdig_fun>
 800a98c:	4605      	mov	r5, r0
 800a98e:	2800      	cmp	r0, #0
 800a990:	d168      	bne.n	800aa64 <__gethex+0x100>
 800a992:	49a0      	ldr	r1, [pc, #640]	@ (800ac14 <__gethex+0x2b0>)
 800a994:	2201      	movs	r2, #1
 800a996:	4648      	mov	r0, r9
 800a998:	f7ff fe80 	bl	800a69c <strncmp>
 800a99c:	4607      	mov	r7, r0
 800a99e:	2800      	cmp	r0, #0
 800a9a0:	d167      	bne.n	800aa72 <__gethex+0x10e>
 800a9a2:	f899 0001 	ldrb.w	r0, [r9, #1]
 800a9a6:	4626      	mov	r6, r4
 800a9a8:	f7ff ffc6 	bl	800a938 <__hexdig_fun>
 800a9ac:	2800      	cmp	r0, #0
 800a9ae:	d062      	beq.n	800aa76 <__gethex+0x112>
 800a9b0:	4623      	mov	r3, r4
 800a9b2:	7818      	ldrb	r0, [r3, #0]
 800a9b4:	2830      	cmp	r0, #48	@ 0x30
 800a9b6:	4699      	mov	r9, r3
 800a9b8:	f103 0301 	add.w	r3, r3, #1
 800a9bc:	d0f9      	beq.n	800a9b2 <__gethex+0x4e>
 800a9be:	f7ff ffbb 	bl	800a938 <__hexdig_fun>
 800a9c2:	fab0 f580 	clz	r5, r0
 800a9c6:	096d      	lsrs	r5, r5, #5
 800a9c8:	f04f 0b01 	mov.w	fp, #1
 800a9cc:	464a      	mov	r2, r9
 800a9ce:	4616      	mov	r6, r2
 800a9d0:	3201      	adds	r2, #1
 800a9d2:	7830      	ldrb	r0, [r6, #0]
 800a9d4:	f7ff ffb0 	bl	800a938 <__hexdig_fun>
 800a9d8:	2800      	cmp	r0, #0
 800a9da:	d1f8      	bne.n	800a9ce <__gethex+0x6a>
 800a9dc:	498d      	ldr	r1, [pc, #564]	@ (800ac14 <__gethex+0x2b0>)
 800a9de:	2201      	movs	r2, #1
 800a9e0:	4630      	mov	r0, r6
 800a9e2:	f7ff fe5b 	bl	800a69c <strncmp>
 800a9e6:	2800      	cmp	r0, #0
 800a9e8:	d13f      	bne.n	800aa6a <__gethex+0x106>
 800a9ea:	b944      	cbnz	r4, 800a9fe <__gethex+0x9a>
 800a9ec:	1c74      	adds	r4, r6, #1
 800a9ee:	4622      	mov	r2, r4
 800a9f0:	4616      	mov	r6, r2
 800a9f2:	3201      	adds	r2, #1
 800a9f4:	7830      	ldrb	r0, [r6, #0]
 800a9f6:	f7ff ff9f 	bl	800a938 <__hexdig_fun>
 800a9fa:	2800      	cmp	r0, #0
 800a9fc:	d1f8      	bne.n	800a9f0 <__gethex+0x8c>
 800a9fe:	1ba4      	subs	r4, r4, r6
 800aa00:	00a7      	lsls	r7, r4, #2
 800aa02:	7833      	ldrb	r3, [r6, #0]
 800aa04:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800aa08:	2b50      	cmp	r3, #80	@ 0x50
 800aa0a:	d13e      	bne.n	800aa8a <__gethex+0x126>
 800aa0c:	7873      	ldrb	r3, [r6, #1]
 800aa0e:	2b2b      	cmp	r3, #43	@ 0x2b
 800aa10:	d033      	beq.n	800aa7a <__gethex+0x116>
 800aa12:	2b2d      	cmp	r3, #45	@ 0x2d
 800aa14:	d034      	beq.n	800aa80 <__gethex+0x11c>
 800aa16:	1c71      	adds	r1, r6, #1
 800aa18:	2400      	movs	r4, #0
 800aa1a:	7808      	ldrb	r0, [r1, #0]
 800aa1c:	f7ff ff8c 	bl	800a938 <__hexdig_fun>
 800aa20:	1e43      	subs	r3, r0, #1
 800aa22:	b2db      	uxtb	r3, r3
 800aa24:	2b18      	cmp	r3, #24
 800aa26:	d830      	bhi.n	800aa8a <__gethex+0x126>
 800aa28:	f1a0 0210 	sub.w	r2, r0, #16
 800aa2c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800aa30:	f7ff ff82 	bl	800a938 <__hexdig_fun>
 800aa34:	f100 3cff 	add.w	ip, r0, #4294967295
 800aa38:	fa5f fc8c 	uxtb.w	ip, ip
 800aa3c:	f1bc 0f18 	cmp.w	ip, #24
 800aa40:	f04f 030a 	mov.w	r3, #10
 800aa44:	d91e      	bls.n	800aa84 <__gethex+0x120>
 800aa46:	b104      	cbz	r4, 800aa4a <__gethex+0xe6>
 800aa48:	4252      	negs	r2, r2
 800aa4a:	4417      	add	r7, r2
 800aa4c:	f8ca 1000 	str.w	r1, [sl]
 800aa50:	b1ed      	cbz	r5, 800aa8e <__gethex+0x12a>
 800aa52:	f1bb 0f00 	cmp.w	fp, #0
 800aa56:	bf0c      	ite	eq
 800aa58:	2506      	moveq	r5, #6
 800aa5a:	2500      	movne	r5, #0
 800aa5c:	4628      	mov	r0, r5
 800aa5e:	b005      	add	sp, #20
 800aa60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa64:	2500      	movs	r5, #0
 800aa66:	462c      	mov	r4, r5
 800aa68:	e7b0      	b.n	800a9cc <__gethex+0x68>
 800aa6a:	2c00      	cmp	r4, #0
 800aa6c:	d1c7      	bne.n	800a9fe <__gethex+0x9a>
 800aa6e:	4627      	mov	r7, r4
 800aa70:	e7c7      	b.n	800aa02 <__gethex+0x9e>
 800aa72:	464e      	mov	r6, r9
 800aa74:	462f      	mov	r7, r5
 800aa76:	2501      	movs	r5, #1
 800aa78:	e7c3      	b.n	800aa02 <__gethex+0x9e>
 800aa7a:	2400      	movs	r4, #0
 800aa7c:	1cb1      	adds	r1, r6, #2
 800aa7e:	e7cc      	b.n	800aa1a <__gethex+0xb6>
 800aa80:	2401      	movs	r4, #1
 800aa82:	e7fb      	b.n	800aa7c <__gethex+0x118>
 800aa84:	fb03 0002 	mla	r0, r3, r2, r0
 800aa88:	e7ce      	b.n	800aa28 <__gethex+0xc4>
 800aa8a:	4631      	mov	r1, r6
 800aa8c:	e7de      	b.n	800aa4c <__gethex+0xe8>
 800aa8e:	eba6 0309 	sub.w	r3, r6, r9
 800aa92:	3b01      	subs	r3, #1
 800aa94:	4629      	mov	r1, r5
 800aa96:	2b07      	cmp	r3, #7
 800aa98:	dc0a      	bgt.n	800aab0 <__gethex+0x14c>
 800aa9a:	9801      	ldr	r0, [sp, #4]
 800aa9c:	f000 faf4 	bl	800b088 <_Balloc>
 800aaa0:	4604      	mov	r4, r0
 800aaa2:	b940      	cbnz	r0, 800aab6 <__gethex+0x152>
 800aaa4:	4b5c      	ldr	r3, [pc, #368]	@ (800ac18 <__gethex+0x2b4>)
 800aaa6:	4602      	mov	r2, r0
 800aaa8:	21e4      	movs	r1, #228	@ 0xe4
 800aaaa:	485c      	ldr	r0, [pc, #368]	@ (800ac1c <__gethex+0x2b8>)
 800aaac:	f001 fb66 	bl	800c17c <__assert_func>
 800aab0:	3101      	adds	r1, #1
 800aab2:	105b      	asrs	r3, r3, #1
 800aab4:	e7ef      	b.n	800aa96 <__gethex+0x132>
 800aab6:	f100 0a14 	add.w	sl, r0, #20
 800aaba:	2300      	movs	r3, #0
 800aabc:	4655      	mov	r5, sl
 800aabe:	469b      	mov	fp, r3
 800aac0:	45b1      	cmp	r9, r6
 800aac2:	d337      	bcc.n	800ab34 <__gethex+0x1d0>
 800aac4:	f845 bb04 	str.w	fp, [r5], #4
 800aac8:	eba5 050a 	sub.w	r5, r5, sl
 800aacc:	10ad      	asrs	r5, r5, #2
 800aace:	6125      	str	r5, [r4, #16]
 800aad0:	4658      	mov	r0, fp
 800aad2:	f000 fbcb 	bl	800b26c <__hi0bits>
 800aad6:	016d      	lsls	r5, r5, #5
 800aad8:	f8d8 6000 	ldr.w	r6, [r8]
 800aadc:	1a2d      	subs	r5, r5, r0
 800aade:	42b5      	cmp	r5, r6
 800aae0:	dd54      	ble.n	800ab8c <__gethex+0x228>
 800aae2:	1bad      	subs	r5, r5, r6
 800aae4:	4629      	mov	r1, r5
 800aae6:	4620      	mov	r0, r4
 800aae8:	f000 ff5f 	bl	800b9aa <__any_on>
 800aaec:	4681      	mov	r9, r0
 800aaee:	b178      	cbz	r0, 800ab10 <__gethex+0x1ac>
 800aaf0:	1e6b      	subs	r3, r5, #1
 800aaf2:	1159      	asrs	r1, r3, #5
 800aaf4:	f003 021f 	and.w	r2, r3, #31
 800aaf8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800aafc:	f04f 0901 	mov.w	r9, #1
 800ab00:	fa09 f202 	lsl.w	r2, r9, r2
 800ab04:	420a      	tst	r2, r1
 800ab06:	d003      	beq.n	800ab10 <__gethex+0x1ac>
 800ab08:	454b      	cmp	r3, r9
 800ab0a:	dc36      	bgt.n	800ab7a <__gethex+0x216>
 800ab0c:	f04f 0902 	mov.w	r9, #2
 800ab10:	4629      	mov	r1, r5
 800ab12:	4620      	mov	r0, r4
 800ab14:	f7ff febe 	bl	800a894 <rshift>
 800ab18:	442f      	add	r7, r5
 800ab1a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ab1e:	42bb      	cmp	r3, r7
 800ab20:	da42      	bge.n	800aba8 <__gethex+0x244>
 800ab22:	9801      	ldr	r0, [sp, #4]
 800ab24:	4621      	mov	r1, r4
 800ab26:	f000 faef 	bl	800b108 <_Bfree>
 800ab2a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ab2c:	2300      	movs	r3, #0
 800ab2e:	6013      	str	r3, [r2, #0]
 800ab30:	25a3      	movs	r5, #163	@ 0xa3
 800ab32:	e793      	b.n	800aa5c <__gethex+0xf8>
 800ab34:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800ab38:	2a2e      	cmp	r2, #46	@ 0x2e
 800ab3a:	d012      	beq.n	800ab62 <__gethex+0x1fe>
 800ab3c:	2b20      	cmp	r3, #32
 800ab3e:	d104      	bne.n	800ab4a <__gethex+0x1e6>
 800ab40:	f845 bb04 	str.w	fp, [r5], #4
 800ab44:	f04f 0b00 	mov.w	fp, #0
 800ab48:	465b      	mov	r3, fp
 800ab4a:	7830      	ldrb	r0, [r6, #0]
 800ab4c:	9303      	str	r3, [sp, #12]
 800ab4e:	f7ff fef3 	bl	800a938 <__hexdig_fun>
 800ab52:	9b03      	ldr	r3, [sp, #12]
 800ab54:	f000 000f 	and.w	r0, r0, #15
 800ab58:	4098      	lsls	r0, r3
 800ab5a:	ea4b 0b00 	orr.w	fp, fp, r0
 800ab5e:	3304      	adds	r3, #4
 800ab60:	e7ae      	b.n	800aac0 <__gethex+0x15c>
 800ab62:	45b1      	cmp	r9, r6
 800ab64:	d8ea      	bhi.n	800ab3c <__gethex+0x1d8>
 800ab66:	492b      	ldr	r1, [pc, #172]	@ (800ac14 <__gethex+0x2b0>)
 800ab68:	9303      	str	r3, [sp, #12]
 800ab6a:	2201      	movs	r2, #1
 800ab6c:	4630      	mov	r0, r6
 800ab6e:	f7ff fd95 	bl	800a69c <strncmp>
 800ab72:	9b03      	ldr	r3, [sp, #12]
 800ab74:	2800      	cmp	r0, #0
 800ab76:	d1e1      	bne.n	800ab3c <__gethex+0x1d8>
 800ab78:	e7a2      	b.n	800aac0 <__gethex+0x15c>
 800ab7a:	1ea9      	subs	r1, r5, #2
 800ab7c:	4620      	mov	r0, r4
 800ab7e:	f000 ff14 	bl	800b9aa <__any_on>
 800ab82:	2800      	cmp	r0, #0
 800ab84:	d0c2      	beq.n	800ab0c <__gethex+0x1a8>
 800ab86:	f04f 0903 	mov.w	r9, #3
 800ab8a:	e7c1      	b.n	800ab10 <__gethex+0x1ac>
 800ab8c:	da09      	bge.n	800aba2 <__gethex+0x23e>
 800ab8e:	1b75      	subs	r5, r6, r5
 800ab90:	4621      	mov	r1, r4
 800ab92:	9801      	ldr	r0, [sp, #4]
 800ab94:	462a      	mov	r2, r5
 800ab96:	f000 fccf 	bl	800b538 <__lshift>
 800ab9a:	1b7f      	subs	r7, r7, r5
 800ab9c:	4604      	mov	r4, r0
 800ab9e:	f100 0a14 	add.w	sl, r0, #20
 800aba2:	f04f 0900 	mov.w	r9, #0
 800aba6:	e7b8      	b.n	800ab1a <__gethex+0x1b6>
 800aba8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800abac:	42bd      	cmp	r5, r7
 800abae:	dd6f      	ble.n	800ac90 <__gethex+0x32c>
 800abb0:	1bed      	subs	r5, r5, r7
 800abb2:	42ae      	cmp	r6, r5
 800abb4:	dc34      	bgt.n	800ac20 <__gethex+0x2bc>
 800abb6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800abba:	2b02      	cmp	r3, #2
 800abbc:	d022      	beq.n	800ac04 <__gethex+0x2a0>
 800abbe:	2b03      	cmp	r3, #3
 800abc0:	d024      	beq.n	800ac0c <__gethex+0x2a8>
 800abc2:	2b01      	cmp	r3, #1
 800abc4:	d115      	bne.n	800abf2 <__gethex+0x28e>
 800abc6:	42ae      	cmp	r6, r5
 800abc8:	d113      	bne.n	800abf2 <__gethex+0x28e>
 800abca:	2e01      	cmp	r6, #1
 800abcc:	d10b      	bne.n	800abe6 <__gethex+0x282>
 800abce:	9a02      	ldr	r2, [sp, #8]
 800abd0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800abd4:	6013      	str	r3, [r2, #0]
 800abd6:	2301      	movs	r3, #1
 800abd8:	6123      	str	r3, [r4, #16]
 800abda:	f8ca 3000 	str.w	r3, [sl]
 800abde:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800abe0:	2562      	movs	r5, #98	@ 0x62
 800abe2:	601c      	str	r4, [r3, #0]
 800abe4:	e73a      	b.n	800aa5c <__gethex+0xf8>
 800abe6:	1e71      	subs	r1, r6, #1
 800abe8:	4620      	mov	r0, r4
 800abea:	f000 fede 	bl	800b9aa <__any_on>
 800abee:	2800      	cmp	r0, #0
 800abf0:	d1ed      	bne.n	800abce <__gethex+0x26a>
 800abf2:	9801      	ldr	r0, [sp, #4]
 800abf4:	4621      	mov	r1, r4
 800abf6:	f000 fa87 	bl	800b108 <_Bfree>
 800abfa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800abfc:	2300      	movs	r3, #0
 800abfe:	6013      	str	r3, [r2, #0]
 800ac00:	2550      	movs	r5, #80	@ 0x50
 800ac02:	e72b      	b.n	800aa5c <__gethex+0xf8>
 800ac04:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d1f3      	bne.n	800abf2 <__gethex+0x28e>
 800ac0a:	e7e0      	b.n	800abce <__gethex+0x26a>
 800ac0c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d1dd      	bne.n	800abce <__gethex+0x26a>
 800ac12:	e7ee      	b.n	800abf2 <__gethex+0x28e>
 800ac14:	0800cbf4 	.word	0x0800cbf4
 800ac18:	0800cd61 	.word	0x0800cd61
 800ac1c:	0800cd72 	.word	0x0800cd72
 800ac20:	1e6f      	subs	r7, r5, #1
 800ac22:	f1b9 0f00 	cmp.w	r9, #0
 800ac26:	d130      	bne.n	800ac8a <__gethex+0x326>
 800ac28:	b127      	cbz	r7, 800ac34 <__gethex+0x2d0>
 800ac2a:	4639      	mov	r1, r7
 800ac2c:	4620      	mov	r0, r4
 800ac2e:	f000 febc 	bl	800b9aa <__any_on>
 800ac32:	4681      	mov	r9, r0
 800ac34:	117a      	asrs	r2, r7, #5
 800ac36:	2301      	movs	r3, #1
 800ac38:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800ac3c:	f007 071f 	and.w	r7, r7, #31
 800ac40:	40bb      	lsls	r3, r7
 800ac42:	4213      	tst	r3, r2
 800ac44:	4629      	mov	r1, r5
 800ac46:	4620      	mov	r0, r4
 800ac48:	bf18      	it	ne
 800ac4a:	f049 0902 	orrne.w	r9, r9, #2
 800ac4e:	f7ff fe21 	bl	800a894 <rshift>
 800ac52:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800ac56:	1b76      	subs	r6, r6, r5
 800ac58:	2502      	movs	r5, #2
 800ac5a:	f1b9 0f00 	cmp.w	r9, #0
 800ac5e:	d047      	beq.n	800acf0 <__gethex+0x38c>
 800ac60:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ac64:	2b02      	cmp	r3, #2
 800ac66:	d015      	beq.n	800ac94 <__gethex+0x330>
 800ac68:	2b03      	cmp	r3, #3
 800ac6a:	d017      	beq.n	800ac9c <__gethex+0x338>
 800ac6c:	2b01      	cmp	r3, #1
 800ac6e:	d109      	bne.n	800ac84 <__gethex+0x320>
 800ac70:	f019 0f02 	tst.w	r9, #2
 800ac74:	d006      	beq.n	800ac84 <__gethex+0x320>
 800ac76:	f8da 3000 	ldr.w	r3, [sl]
 800ac7a:	ea49 0903 	orr.w	r9, r9, r3
 800ac7e:	f019 0f01 	tst.w	r9, #1
 800ac82:	d10e      	bne.n	800aca2 <__gethex+0x33e>
 800ac84:	f045 0510 	orr.w	r5, r5, #16
 800ac88:	e032      	b.n	800acf0 <__gethex+0x38c>
 800ac8a:	f04f 0901 	mov.w	r9, #1
 800ac8e:	e7d1      	b.n	800ac34 <__gethex+0x2d0>
 800ac90:	2501      	movs	r5, #1
 800ac92:	e7e2      	b.n	800ac5a <__gethex+0x2f6>
 800ac94:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ac96:	f1c3 0301 	rsb	r3, r3, #1
 800ac9a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ac9c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d0f0      	beq.n	800ac84 <__gethex+0x320>
 800aca2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800aca6:	f104 0314 	add.w	r3, r4, #20
 800acaa:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800acae:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800acb2:	f04f 0c00 	mov.w	ip, #0
 800acb6:	4618      	mov	r0, r3
 800acb8:	f853 2b04 	ldr.w	r2, [r3], #4
 800acbc:	f1b2 3fff 	cmp.w	r2, #4294967295
 800acc0:	d01b      	beq.n	800acfa <__gethex+0x396>
 800acc2:	3201      	adds	r2, #1
 800acc4:	6002      	str	r2, [r0, #0]
 800acc6:	2d02      	cmp	r5, #2
 800acc8:	f104 0314 	add.w	r3, r4, #20
 800accc:	d13c      	bne.n	800ad48 <__gethex+0x3e4>
 800acce:	f8d8 2000 	ldr.w	r2, [r8]
 800acd2:	3a01      	subs	r2, #1
 800acd4:	42b2      	cmp	r2, r6
 800acd6:	d109      	bne.n	800acec <__gethex+0x388>
 800acd8:	1171      	asrs	r1, r6, #5
 800acda:	2201      	movs	r2, #1
 800acdc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ace0:	f006 061f 	and.w	r6, r6, #31
 800ace4:	fa02 f606 	lsl.w	r6, r2, r6
 800ace8:	421e      	tst	r6, r3
 800acea:	d13a      	bne.n	800ad62 <__gethex+0x3fe>
 800acec:	f045 0520 	orr.w	r5, r5, #32
 800acf0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800acf2:	601c      	str	r4, [r3, #0]
 800acf4:	9b02      	ldr	r3, [sp, #8]
 800acf6:	601f      	str	r7, [r3, #0]
 800acf8:	e6b0      	b.n	800aa5c <__gethex+0xf8>
 800acfa:	4299      	cmp	r1, r3
 800acfc:	f843 cc04 	str.w	ip, [r3, #-4]
 800ad00:	d8d9      	bhi.n	800acb6 <__gethex+0x352>
 800ad02:	68a3      	ldr	r3, [r4, #8]
 800ad04:	459b      	cmp	fp, r3
 800ad06:	db17      	blt.n	800ad38 <__gethex+0x3d4>
 800ad08:	6861      	ldr	r1, [r4, #4]
 800ad0a:	9801      	ldr	r0, [sp, #4]
 800ad0c:	3101      	adds	r1, #1
 800ad0e:	f000 f9bb 	bl	800b088 <_Balloc>
 800ad12:	4681      	mov	r9, r0
 800ad14:	b918      	cbnz	r0, 800ad1e <__gethex+0x3ba>
 800ad16:	4b1a      	ldr	r3, [pc, #104]	@ (800ad80 <__gethex+0x41c>)
 800ad18:	4602      	mov	r2, r0
 800ad1a:	2184      	movs	r1, #132	@ 0x84
 800ad1c:	e6c5      	b.n	800aaaa <__gethex+0x146>
 800ad1e:	6922      	ldr	r2, [r4, #16]
 800ad20:	3202      	adds	r2, #2
 800ad22:	f104 010c 	add.w	r1, r4, #12
 800ad26:	0092      	lsls	r2, r2, #2
 800ad28:	300c      	adds	r0, #12
 800ad2a:	f7ff fd50 	bl	800a7ce <memcpy>
 800ad2e:	4621      	mov	r1, r4
 800ad30:	9801      	ldr	r0, [sp, #4]
 800ad32:	f000 f9e9 	bl	800b108 <_Bfree>
 800ad36:	464c      	mov	r4, r9
 800ad38:	6923      	ldr	r3, [r4, #16]
 800ad3a:	1c5a      	adds	r2, r3, #1
 800ad3c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ad40:	6122      	str	r2, [r4, #16]
 800ad42:	2201      	movs	r2, #1
 800ad44:	615a      	str	r2, [r3, #20]
 800ad46:	e7be      	b.n	800acc6 <__gethex+0x362>
 800ad48:	6922      	ldr	r2, [r4, #16]
 800ad4a:	455a      	cmp	r2, fp
 800ad4c:	dd0b      	ble.n	800ad66 <__gethex+0x402>
 800ad4e:	2101      	movs	r1, #1
 800ad50:	4620      	mov	r0, r4
 800ad52:	f7ff fd9f 	bl	800a894 <rshift>
 800ad56:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ad5a:	3701      	adds	r7, #1
 800ad5c:	42bb      	cmp	r3, r7
 800ad5e:	f6ff aee0 	blt.w	800ab22 <__gethex+0x1be>
 800ad62:	2501      	movs	r5, #1
 800ad64:	e7c2      	b.n	800acec <__gethex+0x388>
 800ad66:	f016 061f 	ands.w	r6, r6, #31
 800ad6a:	d0fa      	beq.n	800ad62 <__gethex+0x3fe>
 800ad6c:	4453      	add	r3, sl
 800ad6e:	f1c6 0620 	rsb	r6, r6, #32
 800ad72:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800ad76:	f000 fa79 	bl	800b26c <__hi0bits>
 800ad7a:	42b0      	cmp	r0, r6
 800ad7c:	dbe7      	blt.n	800ad4e <__gethex+0x3ea>
 800ad7e:	e7f0      	b.n	800ad62 <__gethex+0x3fe>
 800ad80:	0800cd61 	.word	0x0800cd61

0800ad84 <L_shift>:
 800ad84:	f1c2 0208 	rsb	r2, r2, #8
 800ad88:	0092      	lsls	r2, r2, #2
 800ad8a:	b570      	push	{r4, r5, r6, lr}
 800ad8c:	f1c2 0620 	rsb	r6, r2, #32
 800ad90:	6843      	ldr	r3, [r0, #4]
 800ad92:	6804      	ldr	r4, [r0, #0]
 800ad94:	fa03 f506 	lsl.w	r5, r3, r6
 800ad98:	432c      	orrs	r4, r5
 800ad9a:	40d3      	lsrs	r3, r2
 800ad9c:	6004      	str	r4, [r0, #0]
 800ad9e:	f840 3f04 	str.w	r3, [r0, #4]!
 800ada2:	4288      	cmp	r0, r1
 800ada4:	d3f4      	bcc.n	800ad90 <L_shift+0xc>
 800ada6:	bd70      	pop	{r4, r5, r6, pc}

0800ada8 <__match>:
 800ada8:	b530      	push	{r4, r5, lr}
 800adaa:	6803      	ldr	r3, [r0, #0]
 800adac:	3301      	adds	r3, #1
 800adae:	f811 4b01 	ldrb.w	r4, [r1], #1
 800adb2:	b914      	cbnz	r4, 800adba <__match+0x12>
 800adb4:	6003      	str	r3, [r0, #0]
 800adb6:	2001      	movs	r0, #1
 800adb8:	bd30      	pop	{r4, r5, pc}
 800adba:	f813 2b01 	ldrb.w	r2, [r3], #1
 800adbe:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800adc2:	2d19      	cmp	r5, #25
 800adc4:	bf98      	it	ls
 800adc6:	3220      	addls	r2, #32
 800adc8:	42a2      	cmp	r2, r4
 800adca:	d0f0      	beq.n	800adae <__match+0x6>
 800adcc:	2000      	movs	r0, #0
 800adce:	e7f3      	b.n	800adb8 <__match+0x10>

0800add0 <__hexnan>:
 800add0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800add4:	680b      	ldr	r3, [r1, #0]
 800add6:	6801      	ldr	r1, [r0, #0]
 800add8:	115e      	asrs	r6, r3, #5
 800adda:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800adde:	f013 031f 	ands.w	r3, r3, #31
 800ade2:	b087      	sub	sp, #28
 800ade4:	bf18      	it	ne
 800ade6:	3604      	addne	r6, #4
 800ade8:	2500      	movs	r5, #0
 800adea:	1f37      	subs	r7, r6, #4
 800adec:	4682      	mov	sl, r0
 800adee:	4690      	mov	r8, r2
 800adf0:	9301      	str	r3, [sp, #4]
 800adf2:	f846 5c04 	str.w	r5, [r6, #-4]
 800adf6:	46b9      	mov	r9, r7
 800adf8:	463c      	mov	r4, r7
 800adfa:	9502      	str	r5, [sp, #8]
 800adfc:	46ab      	mov	fp, r5
 800adfe:	784a      	ldrb	r2, [r1, #1]
 800ae00:	1c4b      	adds	r3, r1, #1
 800ae02:	9303      	str	r3, [sp, #12]
 800ae04:	b342      	cbz	r2, 800ae58 <__hexnan+0x88>
 800ae06:	4610      	mov	r0, r2
 800ae08:	9105      	str	r1, [sp, #20]
 800ae0a:	9204      	str	r2, [sp, #16]
 800ae0c:	f7ff fd94 	bl	800a938 <__hexdig_fun>
 800ae10:	2800      	cmp	r0, #0
 800ae12:	d151      	bne.n	800aeb8 <__hexnan+0xe8>
 800ae14:	9a04      	ldr	r2, [sp, #16]
 800ae16:	9905      	ldr	r1, [sp, #20]
 800ae18:	2a20      	cmp	r2, #32
 800ae1a:	d818      	bhi.n	800ae4e <__hexnan+0x7e>
 800ae1c:	9b02      	ldr	r3, [sp, #8]
 800ae1e:	459b      	cmp	fp, r3
 800ae20:	dd13      	ble.n	800ae4a <__hexnan+0x7a>
 800ae22:	454c      	cmp	r4, r9
 800ae24:	d206      	bcs.n	800ae34 <__hexnan+0x64>
 800ae26:	2d07      	cmp	r5, #7
 800ae28:	dc04      	bgt.n	800ae34 <__hexnan+0x64>
 800ae2a:	462a      	mov	r2, r5
 800ae2c:	4649      	mov	r1, r9
 800ae2e:	4620      	mov	r0, r4
 800ae30:	f7ff ffa8 	bl	800ad84 <L_shift>
 800ae34:	4544      	cmp	r4, r8
 800ae36:	d952      	bls.n	800aede <__hexnan+0x10e>
 800ae38:	2300      	movs	r3, #0
 800ae3a:	f1a4 0904 	sub.w	r9, r4, #4
 800ae3e:	f844 3c04 	str.w	r3, [r4, #-4]
 800ae42:	f8cd b008 	str.w	fp, [sp, #8]
 800ae46:	464c      	mov	r4, r9
 800ae48:	461d      	mov	r5, r3
 800ae4a:	9903      	ldr	r1, [sp, #12]
 800ae4c:	e7d7      	b.n	800adfe <__hexnan+0x2e>
 800ae4e:	2a29      	cmp	r2, #41	@ 0x29
 800ae50:	d157      	bne.n	800af02 <__hexnan+0x132>
 800ae52:	3102      	adds	r1, #2
 800ae54:	f8ca 1000 	str.w	r1, [sl]
 800ae58:	f1bb 0f00 	cmp.w	fp, #0
 800ae5c:	d051      	beq.n	800af02 <__hexnan+0x132>
 800ae5e:	454c      	cmp	r4, r9
 800ae60:	d206      	bcs.n	800ae70 <__hexnan+0xa0>
 800ae62:	2d07      	cmp	r5, #7
 800ae64:	dc04      	bgt.n	800ae70 <__hexnan+0xa0>
 800ae66:	462a      	mov	r2, r5
 800ae68:	4649      	mov	r1, r9
 800ae6a:	4620      	mov	r0, r4
 800ae6c:	f7ff ff8a 	bl	800ad84 <L_shift>
 800ae70:	4544      	cmp	r4, r8
 800ae72:	d936      	bls.n	800aee2 <__hexnan+0x112>
 800ae74:	f1a8 0204 	sub.w	r2, r8, #4
 800ae78:	4623      	mov	r3, r4
 800ae7a:	f853 1b04 	ldr.w	r1, [r3], #4
 800ae7e:	f842 1f04 	str.w	r1, [r2, #4]!
 800ae82:	429f      	cmp	r7, r3
 800ae84:	d2f9      	bcs.n	800ae7a <__hexnan+0xaa>
 800ae86:	1b3b      	subs	r3, r7, r4
 800ae88:	f023 0303 	bic.w	r3, r3, #3
 800ae8c:	3304      	adds	r3, #4
 800ae8e:	3401      	adds	r4, #1
 800ae90:	3e03      	subs	r6, #3
 800ae92:	42b4      	cmp	r4, r6
 800ae94:	bf88      	it	hi
 800ae96:	2304      	movhi	r3, #4
 800ae98:	4443      	add	r3, r8
 800ae9a:	2200      	movs	r2, #0
 800ae9c:	f843 2b04 	str.w	r2, [r3], #4
 800aea0:	429f      	cmp	r7, r3
 800aea2:	d2fb      	bcs.n	800ae9c <__hexnan+0xcc>
 800aea4:	683b      	ldr	r3, [r7, #0]
 800aea6:	b91b      	cbnz	r3, 800aeb0 <__hexnan+0xe0>
 800aea8:	4547      	cmp	r7, r8
 800aeaa:	d128      	bne.n	800aefe <__hexnan+0x12e>
 800aeac:	2301      	movs	r3, #1
 800aeae:	603b      	str	r3, [r7, #0]
 800aeb0:	2005      	movs	r0, #5
 800aeb2:	b007      	add	sp, #28
 800aeb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aeb8:	3501      	adds	r5, #1
 800aeba:	2d08      	cmp	r5, #8
 800aebc:	f10b 0b01 	add.w	fp, fp, #1
 800aec0:	dd06      	ble.n	800aed0 <__hexnan+0x100>
 800aec2:	4544      	cmp	r4, r8
 800aec4:	d9c1      	bls.n	800ae4a <__hexnan+0x7a>
 800aec6:	2300      	movs	r3, #0
 800aec8:	f844 3c04 	str.w	r3, [r4, #-4]
 800aecc:	2501      	movs	r5, #1
 800aece:	3c04      	subs	r4, #4
 800aed0:	6822      	ldr	r2, [r4, #0]
 800aed2:	f000 000f 	and.w	r0, r0, #15
 800aed6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800aeda:	6020      	str	r0, [r4, #0]
 800aedc:	e7b5      	b.n	800ae4a <__hexnan+0x7a>
 800aede:	2508      	movs	r5, #8
 800aee0:	e7b3      	b.n	800ae4a <__hexnan+0x7a>
 800aee2:	9b01      	ldr	r3, [sp, #4]
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d0dd      	beq.n	800aea4 <__hexnan+0xd4>
 800aee8:	f1c3 0320 	rsb	r3, r3, #32
 800aeec:	f04f 32ff 	mov.w	r2, #4294967295
 800aef0:	40da      	lsrs	r2, r3
 800aef2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800aef6:	4013      	ands	r3, r2
 800aef8:	f846 3c04 	str.w	r3, [r6, #-4]
 800aefc:	e7d2      	b.n	800aea4 <__hexnan+0xd4>
 800aefe:	3f04      	subs	r7, #4
 800af00:	e7d0      	b.n	800aea4 <__hexnan+0xd4>
 800af02:	2004      	movs	r0, #4
 800af04:	e7d5      	b.n	800aeb2 <__hexnan+0xe2>
	...

0800af08 <sbrk_aligned>:
 800af08:	b570      	push	{r4, r5, r6, lr}
 800af0a:	4e0f      	ldr	r6, [pc, #60]	@ (800af48 <sbrk_aligned+0x40>)
 800af0c:	460c      	mov	r4, r1
 800af0e:	6831      	ldr	r1, [r6, #0]
 800af10:	4605      	mov	r5, r0
 800af12:	b911      	cbnz	r1, 800af1a <sbrk_aligned+0x12>
 800af14:	f001 f922 	bl	800c15c <_sbrk_r>
 800af18:	6030      	str	r0, [r6, #0]
 800af1a:	4621      	mov	r1, r4
 800af1c:	4628      	mov	r0, r5
 800af1e:	f001 f91d 	bl	800c15c <_sbrk_r>
 800af22:	1c43      	adds	r3, r0, #1
 800af24:	d103      	bne.n	800af2e <sbrk_aligned+0x26>
 800af26:	f04f 34ff 	mov.w	r4, #4294967295
 800af2a:	4620      	mov	r0, r4
 800af2c:	bd70      	pop	{r4, r5, r6, pc}
 800af2e:	1cc4      	adds	r4, r0, #3
 800af30:	f024 0403 	bic.w	r4, r4, #3
 800af34:	42a0      	cmp	r0, r4
 800af36:	d0f8      	beq.n	800af2a <sbrk_aligned+0x22>
 800af38:	1a21      	subs	r1, r4, r0
 800af3a:	4628      	mov	r0, r5
 800af3c:	f001 f90e 	bl	800c15c <_sbrk_r>
 800af40:	3001      	adds	r0, #1
 800af42:	d1f2      	bne.n	800af2a <sbrk_aligned+0x22>
 800af44:	e7ef      	b.n	800af26 <sbrk_aligned+0x1e>
 800af46:	bf00      	nop
 800af48:	200006e8 	.word	0x200006e8

0800af4c <_malloc_r>:
 800af4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800af50:	1ccd      	adds	r5, r1, #3
 800af52:	f025 0503 	bic.w	r5, r5, #3
 800af56:	3508      	adds	r5, #8
 800af58:	2d0c      	cmp	r5, #12
 800af5a:	bf38      	it	cc
 800af5c:	250c      	movcc	r5, #12
 800af5e:	2d00      	cmp	r5, #0
 800af60:	4606      	mov	r6, r0
 800af62:	db01      	blt.n	800af68 <_malloc_r+0x1c>
 800af64:	42a9      	cmp	r1, r5
 800af66:	d904      	bls.n	800af72 <_malloc_r+0x26>
 800af68:	230c      	movs	r3, #12
 800af6a:	6033      	str	r3, [r6, #0]
 800af6c:	2000      	movs	r0, #0
 800af6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800af72:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b048 <_malloc_r+0xfc>
 800af76:	f000 f87b 	bl	800b070 <__malloc_lock>
 800af7a:	f8d8 3000 	ldr.w	r3, [r8]
 800af7e:	461c      	mov	r4, r3
 800af80:	bb44      	cbnz	r4, 800afd4 <_malloc_r+0x88>
 800af82:	4629      	mov	r1, r5
 800af84:	4630      	mov	r0, r6
 800af86:	f7ff ffbf 	bl	800af08 <sbrk_aligned>
 800af8a:	1c43      	adds	r3, r0, #1
 800af8c:	4604      	mov	r4, r0
 800af8e:	d158      	bne.n	800b042 <_malloc_r+0xf6>
 800af90:	f8d8 4000 	ldr.w	r4, [r8]
 800af94:	4627      	mov	r7, r4
 800af96:	2f00      	cmp	r7, #0
 800af98:	d143      	bne.n	800b022 <_malloc_r+0xd6>
 800af9a:	2c00      	cmp	r4, #0
 800af9c:	d04b      	beq.n	800b036 <_malloc_r+0xea>
 800af9e:	6823      	ldr	r3, [r4, #0]
 800afa0:	4639      	mov	r1, r7
 800afa2:	4630      	mov	r0, r6
 800afa4:	eb04 0903 	add.w	r9, r4, r3
 800afa8:	f001 f8d8 	bl	800c15c <_sbrk_r>
 800afac:	4581      	cmp	r9, r0
 800afae:	d142      	bne.n	800b036 <_malloc_r+0xea>
 800afb0:	6821      	ldr	r1, [r4, #0]
 800afb2:	1a6d      	subs	r5, r5, r1
 800afb4:	4629      	mov	r1, r5
 800afb6:	4630      	mov	r0, r6
 800afb8:	f7ff ffa6 	bl	800af08 <sbrk_aligned>
 800afbc:	3001      	adds	r0, #1
 800afbe:	d03a      	beq.n	800b036 <_malloc_r+0xea>
 800afc0:	6823      	ldr	r3, [r4, #0]
 800afc2:	442b      	add	r3, r5
 800afc4:	6023      	str	r3, [r4, #0]
 800afc6:	f8d8 3000 	ldr.w	r3, [r8]
 800afca:	685a      	ldr	r2, [r3, #4]
 800afcc:	bb62      	cbnz	r2, 800b028 <_malloc_r+0xdc>
 800afce:	f8c8 7000 	str.w	r7, [r8]
 800afd2:	e00f      	b.n	800aff4 <_malloc_r+0xa8>
 800afd4:	6822      	ldr	r2, [r4, #0]
 800afd6:	1b52      	subs	r2, r2, r5
 800afd8:	d420      	bmi.n	800b01c <_malloc_r+0xd0>
 800afda:	2a0b      	cmp	r2, #11
 800afdc:	d917      	bls.n	800b00e <_malloc_r+0xc2>
 800afde:	1961      	adds	r1, r4, r5
 800afe0:	42a3      	cmp	r3, r4
 800afe2:	6025      	str	r5, [r4, #0]
 800afe4:	bf18      	it	ne
 800afe6:	6059      	strne	r1, [r3, #4]
 800afe8:	6863      	ldr	r3, [r4, #4]
 800afea:	bf08      	it	eq
 800afec:	f8c8 1000 	streq.w	r1, [r8]
 800aff0:	5162      	str	r2, [r4, r5]
 800aff2:	604b      	str	r3, [r1, #4]
 800aff4:	4630      	mov	r0, r6
 800aff6:	f000 f841 	bl	800b07c <__malloc_unlock>
 800affa:	f104 000b 	add.w	r0, r4, #11
 800affe:	1d23      	adds	r3, r4, #4
 800b000:	f020 0007 	bic.w	r0, r0, #7
 800b004:	1ac2      	subs	r2, r0, r3
 800b006:	bf1c      	itt	ne
 800b008:	1a1b      	subne	r3, r3, r0
 800b00a:	50a3      	strne	r3, [r4, r2]
 800b00c:	e7af      	b.n	800af6e <_malloc_r+0x22>
 800b00e:	6862      	ldr	r2, [r4, #4]
 800b010:	42a3      	cmp	r3, r4
 800b012:	bf0c      	ite	eq
 800b014:	f8c8 2000 	streq.w	r2, [r8]
 800b018:	605a      	strne	r2, [r3, #4]
 800b01a:	e7eb      	b.n	800aff4 <_malloc_r+0xa8>
 800b01c:	4623      	mov	r3, r4
 800b01e:	6864      	ldr	r4, [r4, #4]
 800b020:	e7ae      	b.n	800af80 <_malloc_r+0x34>
 800b022:	463c      	mov	r4, r7
 800b024:	687f      	ldr	r7, [r7, #4]
 800b026:	e7b6      	b.n	800af96 <_malloc_r+0x4a>
 800b028:	461a      	mov	r2, r3
 800b02a:	685b      	ldr	r3, [r3, #4]
 800b02c:	42a3      	cmp	r3, r4
 800b02e:	d1fb      	bne.n	800b028 <_malloc_r+0xdc>
 800b030:	2300      	movs	r3, #0
 800b032:	6053      	str	r3, [r2, #4]
 800b034:	e7de      	b.n	800aff4 <_malloc_r+0xa8>
 800b036:	230c      	movs	r3, #12
 800b038:	6033      	str	r3, [r6, #0]
 800b03a:	4630      	mov	r0, r6
 800b03c:	f000 f81e 	bl	800b07c <__malloc_unlock>
 800b040:	e794      	b.n	800af6c <_malloc_r+0x20>
 800b042:	6005      	str	r5, [r0, #0]
 800b044:	e7d6      	b.n	800aff4 <_malloc_r+0xa8>
 800b046:	bf00      	nop
 800b048:	200006ec 	.word	0x200006ec

0800b04c <__ascii_mbtowc>:
 800b04c:	b082      	sub	sp, #8
 800b04e:	b901      	cbnz	r1, 800b052 <__ascii_mbtowc+0x6>
 800b050:	a901      	add	r1, sp, #4
 800b052:	b142      	cbz	r2, 800b066 <__ascii_mbtowc+0x1a>
 800b054:	b14b      	cbz	r3, 800b06a <__ascii_mbtowc+0x1e>
 800b056:	7813      	ldrb	r3, [r2, #0]
 800b058:	600b      	str	r3, [r1, #0]
 800b05a:	7812      	ldrb	r2, [r2, #0]
 800b05c:	1e10      	subs	r0, r2, #0
 800b05e:	bf18      	it	ne
 800b060:	2001      	movne	r0, #1
 800b062:	b002      	add	sp, #8
 800b064:	4770      	bx	lr
 800b066:	4610      	mov	r0, r2
 800b068:	e7fb      	b.n	800b062 <__ascii_mbtowc+0x16>
 800b06a:	f06f 0001 	mvn.w	r0, #1
 800b06e:	e7f8      	b.n	800b062 <__ascii_mbtowc+0x16>

0800b070 <__malloc_lock>:
 800b070:	4801      	ldr	r0, [pc, #4]	@ (800b078 <__malloc_lock+0x8>)
 800b072:	f7ff bbaa 	b.w	800a7ca <__retarget_lock_acquire_recursive>
 800b076:	bf00      	nop
 800b078:	200006e4 	.word	0x200006e4

0800b07c <__malloc_unlock>:
 800b07c:	4801      	ldr	r0, [pc, #4]	@ (800b084 <__malloc_unlock+0x8>)
 800b07e:	f7ff bba5 	b.w	800a7cc <__retarget_lock_release_recursive>
 800b082:	bf00      	nop
 800b084:	200006e4 	.word	0x200006e4

0800b088 <_Balloc>:
 800b088:	b570      	push	{r4, r5, r6, lr}
 800b08a:	69c6      	ldr	r6, [r0, #28]
 800b08c:	4604      	mov	r4, r0
 800b08e:	460d      	mov	r5, r1
 800b090:	b976      	cbnz	r6, 800b0b0 <_Balloc+0x28>
 800b092:	2010      	movs	r0, #16
 800b094:	f001 f8a4 	bl	800c1e0 <malloc>
 800b098:	4602      	mov	r2, r0
 800b09a:	61e0      	str	r0, [r4, #28]
 800b09c:	b920      	cbnz	r0, 800b0a8 <_Balloc+0x20>
 800b09e:	4b18      	ldr	r3, [pc, #96]	@ (800b100 <_Balloc+0x78>)
 800b0a0:	4818      	ldr	r0, [pc, #96]	@ (800b104 <_Balloc+0x7c>)
 800b0a2:	216b      	movs	r1, #107	@ 0x6b
 800b0a4:	f001 f86a 	bl	800c17c <__assert_func>
 800b0a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b0ac:	6006      	str	r6, [r0, #0]
 800b0ae:	60c6      	str	r6, [r0, #12]
 800b0b0:	69e6      	ldr	r6, [r4, #28]
 800b0b2:	68f3      	ldr	r3, [r6, #12]
 800b0b4:	b183      	cbz	r3, 800b0d8 <_Balloc+0x50>
 800b0b6:	69e3      	ldr	r3, [r4, #28]
 800b0b8:	68db      	ldr	r3, [r3, #12]
 800b0ba:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b0be:	b9b8      	cbnz	r0, 800b0f0 <_Balloc+0x68>
 800b0c0:	2101      	movs	r1, #1
 800b0c2:	fa01 f605 	lsl.w	r6, r1, r5
 800b0c6:	1d72      	adds	r2, r6, #5
 800b0c8:	0092      	lsls	r2, r2, #2
 800b0ca:	4620      	mov	r0, r4
 800b0cc:	f001 f874 	bl	800c1b8 <_calloc_r>
 800b0d0:	b160      	cbz	r0, 800b0ec <_Balloc+0x64>
 800b0d2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b0d6:	e00e      	b.n	800b0f6 <_Balloc+0x6e>
 800b0d8:	2221      	movs	r2, #33	@ 0x21
 800b0da:	2104      	movs	r1, #4
 800b0dc:	4620      	mov	r0, r4
 800b0de:	f001 f86b 	bl	800c1b8 <_calloc_r>
 800b0e2:	69e3      	ldr	r3, [r4, #28]
 800b0e4:	60f0      	str	r0, [r6, #12]
 800b0e6:	68db      	ldr	r3, [r3, #12]
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d1e4      	bne.n	800b0b6 <_Balloc+0x2e>
 800b0ec:	2000      	movs	r0, #0
 800b0ee:	bd70      	pop	{r4, r5, r6, pc}
 800b0f0:	6802      	ldr	r2, [r0, #0]
 800b0f2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b0f6:	2300      	movs	r3, #0
 800b0f8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b0fc:	e7f7      	b.n	800b0ee <_Balloc+0x66>
 800b0fe:	bf00      	nop
 800b100:	0800cdd2 	.word	0x0800cdd2
 800b104:	0800cde9 	.word	0x0800cde9

0800b108 <_Bfree>:
 800b108:	b570      	push	{r4, r5, r6, lr}
 800b10a:	69c6      	ldr	r6, [r0, #28]
 800b10c:	4605      	mov	r5, r0
 800b10e:	460c      	mov	r4, r1
 800b110:	b976      	cbnz	r6, 800b130 <_Bfree+0x28>
 800b112:	2010      	movs	r0, #16
 800b114:	f001 f864 	bl	800c1e0 <malloc>
 800b118:	4602      	mov	r2, r0
 800b11a:	61e8      	str	r0, [r5, #28]
 800b11c:	b920      	cbnz	r0, 800b128 <_Bfree+0x20>
 800b11e:	4b09      	ldr	r3, [pc, #36]	@ (800b144 <_Bfree+0x3c>)
 800b120:	4809      	ldr	r0, [pc, #36]	@ (800b148 <_Bfree+0x40>)
 800b122:	218f      	movs	r1, #143	@ 0x8f
 800b124:	f001 f82a 	bl	800c17c <__assert_func>
 800b128:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b12c:	6006      	str	r6, [r0, #0]
 800b12e:	60c6      	str	r6, [r0, #12]
 800b130:	b13c      	cbz	r4, 800b142 <_Bfree+0x3a>
 800b132:	69eb      	ldr	r3, [r5, #28]
 800b134:	6862      	ldr	r2, [r4, #4]
 800b136:	68db      	ldr	r3, [r3, #12]
 800b138:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b13c:	6021      	str	r1, [r4, #0]
 800b13e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b142:	bd70      	pop	{r4, r5, r6, pc}
 800b144:	0800cdd2 	.word	0x0800cdd2
 800b148:	0800cde9 	.word	0x0800cde9

0800b14c <__multadd>:
 800b14c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b150:	690d      	ldr	r5, [r1, #16]
 800b152:	4607      	mov	r7, r0
 800b154:	460c      	mov	r4, r1
 800b156:	461e      	mov	r6, r3
 800b158:	f101 0c14 	add.w	ip, r1, #20
 800b15c:	2000      	movs	r0, #0
 800b15e:	f8dc 3000 	ldr.w	r3, [ip]
 800b162:	b299      	uxth	r1, r3
 800b164:	fb02 6101 	mla	r1, r2, r1, r6
 800b168:	0c1e      	lsrs	r6, r3, #16
 800b16a:	0c0b      	lsrs	r3, r1, #16
 800b16c:	fb02 3306 	mla	r3, r2, r6, r3
 800b170:	b289      	uxth	r1, r1
 800b172:	3001      	adds	r0, #1
 800b174:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b178:	4285      	cmp	r5, r0
 800b17a:	f84c 1b04 	str.w	r1, [ip], #4
 800b17e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b182:	dcec      	bgt.n	800b15e <__multadd+0x12>
 800b184:	b30e      	cbz	r6, 800b1ca <__multadd+0x7e>
 800b186:	68a3      	ldr	r3, [r4, #8]
 800b188:	42ab      	cmp	r3, r5
 800b18a:	dc19      	bgt.n	800b1c0 <__multadd+0x74>
 800b18c:	6861      	ldr	r1, [r4, #4]
 800b18e:	4638      	mov	r0, r7
 800b190:	3101      	adds	r1, #1
 800b192:	f7ff ff79 	bl	800b088 <_Balloc>
 800b196:	4680      	mov	r8, r0
 800b198:	b928      	cbnz	r0, 800b1a6 <__multadd+0x5a>
 800b19a:	4602      	mov	r2, r0
 800b19c:	4b0c      	ldr	r3, [pc, #48]	@ (800b1d0 <__multadd+0x84>)
 800b19e:	480d      	ldr	r0, [pc, #52]	@ (800b1d4 <__multadd+0x88>)
 800b1a0:	21ba      	movs	r1, #186	@ 0xba
 800b1a2:	f000 ffeb 	bl	800c17c <__assert_func>
 800b1a6:	6922      	ldr	r2, [r4, #16]
 800b1a8:	3202      	adds	r2, #2
 800b1aa:	f104 010c 	add.w	r1, r4, #12
 800b1ae:	0092      	lsls	r2, r2, #2
 800b1b0:	300c      	adds	r0, #12
 800b1b2:	f7ff fb0c 	bl	800a7ce <memcpy>
 800b1b6:	4621      	mov	r1, r4
 800b1b8:	4638      	mov	r0, r7
 800b1ba:	f7ff ffa5 	bl	800b108 <_Bfree>
 800b1be:	4644      	mov	r4, r8
 800b1c0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b1c4:	3501      	adds	r5, #1
 800b1c6:	615e      	str	r6, [r3, #20]
 800b1c8:	6125      	str	r5, [r4, #16]
 800b1ca:	4620      	mov	r0, r4
 800b1cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b1d0:	0800cd61 	.word	0x0800cd61
 800b1d4:	0800cde9 	.word	0x0800cde9

0800b1d8 <__s2b>:
 800b1d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b1dc:	460c      	mov	r4, r1
 800b1de:	4615      	mov	r5, r2
 800b1e0:	461f      	mov	r7, r3
 800b1e2:	2209      	movs	r2, #9
 800b1e4:	3308      	adds	r3, #8
 800b1e6:	4606      	mov	r6, r0
 800b1e8:	fb93 f3f2 	sdiv	r3, r3, r2
 800b1ec:	2100      	movs	r1, #0
 800b1ee:	2201      	movs	r2, #1
 800b1f0:	429a      	cmp	r2, r3
 800b1f2:	db09      	blt.n	800b208 <__s2b+0x30>
 800b1f4:	4630      	mov	r0, r6
 800b1f6:	f7ff ff47 	bl	800b088 <_Balloc>
 800b1fa:	b940      	cbnz	r0, 800b20e <__s2b+0x36>
 800b1fc:	4602      	mov	r2, r0
 800b1fe:	4b19      	ldr	r3, [pc, #100]	@ (800b264 <__s2b+0x8c>)
 800b200:	4819      	ldr	r0, [pc, #100]	@ (800b268 <__s2b+0x90>)
 800b202:	21d3      	movs	r1, #211	@ 0xd3
 800b204:	f000 ffba 	bl	800c17c <__assert_func>
 800b208:	0052      	lsls	r2, r2, #1
 800b20a:	3101      	adds	r1, #1
 800b20c:	e7f0      	b.n	800b1f0 <__s2b+0x18>
 800b20e:	9b08      	ldr	r3, [sp, #32]
 800b210:	6143      	str	r3, [r0, #20]
 800b212:	2d09      	cmp	r5, #9
 800b214:	f04f 0301 	mov.w	r3, #1
 800b218:	6103      	str	r3, [r0, #16]
 800b21a:	dd16      	ble.n	800b24a <__s2b+0x72>
 800b21c:	f104 0909 	add.w	r9, r4, #9
 800b220:	46c8      	mov	r8, r9
 800b222:	442c      	add	r4, r5
 800b224:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b228:	4601      	mov	r1, r0
 800b22a:	3b30      	subs	r3, #48	@ 0x30
 800b22c:	220a      	movs	r2, #10
 800b22e:	4630      	mov	r0, r6
 800b230:	f7ff ff8c 	bl	800b14c <__multadd>
 800b234:	45a0      	cmp	r8, r4
 800b236:	d1f5      	bne.n	800b224 <__s2b+0x4c>
 800b238:	f1a5 0408 	sub.w	r4, r5, #8
 800b23c:	444c      	add	r4, r9
 800b23e:	1b2d      	subs	r5, r5, r4
 800b240:	1963      	adds	r3, r4, r5
 800b242:	42bb      	cmp	r3, r7
 800b244:	db04      	blt.n	800b250 <__s2b+0x78>
 800b246:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b24a:	340a      	adds	r4, #10
 800b24c:	2509      	movs	r5, #9
 800b24e:	e7f6      	b.n	800b23e <__s2b+0x66>
 800b250:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b254:	4601      	mov	r1, r0
 800b256:	3b30      	subs	r3, #48	@ 0x30
 800b258:	220a      	movs	r2, #10
 800b25a:	4630      	mov	r0, r6
 800b25c:	f7ff ff76 	bl	800b14c <__multadd>
 800b260:	e7ee      	b.n	800b240 <__s2b+0x68>
 800b262:	bf00      	nop
 800b264:	0800cd61 	.word	0x0800cd61
 800b268:	0800cde9 	.word	0x0800cde9

0800b26c <__hi0bits>:
 800b26c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800b270:	4603      	mov	r3, r0
 800b272:	bf36      	itet	cc
 800b274:	0403      	lslcc	r3, r0, #16
 800b276:	2000      	movcs	r0, #0
 800b278:	2010      	movcc	r0, #16
 800b27a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b27e:	bf3c      	itt	cc
 800b280:	021b      	lslcc	r3, r3, #8
 800b282:	3008      	addcc	r0, #8
 800b284:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b288:	bf3c      	itt	cc
 800b28a:	011b      	lslcc	r3, r3, #4
 800b28c:	3004      	addcc	r0, #4
 800b28e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b292:	bf3c      	itt	cc
 800b294:	009b      	lslcc	r3, r3, #2
 800b296:	3002      	addcc	r0, #2
 800b298:	2b00      	cmp	r3, #0
 800b29a:	db05      	blt.n	800b2a8 <__hi0bits+0x3c>
 800b29c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800b2a0:	f100 0001 	add.w	r0, r0, #1
 800b2a4:	bf08      	it	eq
 800b2a6:	2020      	moveq	r0, #32
 800b2a8:	4770      	bx	lr

0800b2aa <__lo0bits>:
 800b2aa:	6803      	ldr	r3, [r0, #0]
 800b2ac:	4602      	mov	r2, r0
 800b2ae:	f013 0007 	ands.w	r0, r3, #7
 800b2b2:	d00b      	beq.n	800b2cc <__lo0bits+0x22>
 800b2b4:	07d9      	lsls	r1, r3, #31
 800b2b6:	d421      	bmi.n	800b2fc <__lo0bits+0x52>
 800b2b8:	0798      	lsls	r0, r3, #30
 800b2ba:	bf49      	itett	mi
 800b2bc:	085b      	lsrmi	r3, r3, #1
 800b2be:	089b      	lsrpl	r3, r3, #2
 800b2c0:	2001      	movmi	r0, #1
 800b2c2:	6013      	strmi	r3, [r2, #0]
 800b2c4:	bf5c      	itt	pl
 800b2c6:	6013      	strpl	r3, [r2, #0]
 800b2c8:	2002      	movpl	r0, #2
 800b2ca:	4770      	bx	lr
 800b2cc:	b299      	uxth	r1, r3
 800b2ce:	b909      	cbnz	r1, 800b2d4 <__lo0bits+0x2a>
 800b2d0:	0c1b      	lsrs	r3, r3, #16
 800b2d2:	2010      	movs	r0, #16
 800b2d4:	b2d9      	uxtb	r1, r3
 800b2d6:	b909      	cbnz	r1, 800b2dc <__lo0bits+0x32>
 800b2d8:	3008      	adds	r0, #8
 800b2da:	0a1b      	lsrs	r3, r3, #8
 800b2dc:	0719      	lsls	r1, r3, #28
 800b2de:	bf04      	itt	eq
 800b2e0:	091b      	lsreq	r3, r3, #4
 800b2e2:	3004      	addeq	r0, #4
 800b2e4:	0799      	lsls	r1, r3, #30
 800b2e6:	bf04      	itt	eq
 800b2e8:	089b      	lsreq	r3, r3, #2
 800b2ea:	3002      	addeq	r0, #2
 800b2ec:	07d9      	lsls	r1, r3, #31
 800b2ee:	d403      	bmi.n	800b2f8 <__lo0bits+0x4e>
 800b2f0:	085b      	lsrs	r3, r3, #1
 800b2f2:	f100 0001 	add.w	r0, r0, #1
 800b2f6:	d003      	beq.n	800b300 <__lo0bits+0x56>
 800b2f8:	6013      	str	r3, [r2, #0]
 800b2fa:	4770      	bx	lr
 800b2fc:	2000      	movs	r0, #0
 800b2fe:	4770      	bx	lr
 800b300:	2020      	movs	r0, #32
 800b302:	4770      	bx	lr

0800b304 <__i2b>:
 800b304:	b510      	push	{r4, lr}
 800b306:	460c      	mov	r4, r1
 800b308:	2101      	movs	r1, #1
 800b30a:	f7ff febd 	bl	800b088 <_Balloc>
 800b30e:	4602      	mov	r2, r0
 800b310:	b928      	cbnz	r0, 800b31e <__i2b+0x1a>
 800b312:	4b05      	ldr	r3, [pc, #20]	@ (800b328 <__i2b+0x24>)
 800b314:	4805      	ldr	r0, [pc, #20]	@ (800b32c <__i2b+0x28>)
 800b316:	f240 1145 	movw	r1, #325	@ 0x145
 800b31a:	f000 ff2f 	bl	800c17c <__assert_func>
 800b31e:	2301      	movs	r3, #1
 800b320:	6144      	str	r4, [r0, #20]
 800b322:	6103      	str	r3, [r0, #16]
 800b324:	bd10      	pop	{r4, pc}
 800b326:	bf00      	nop
 800b328:	0800cd61 	.word	0x0800cd61
 800b32c:	0800cde9 	.word	0x0800cde9

0800b330 <__multiply>:
 800b330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b334:	4614      	mov	r4, r2
 800b336:	690a      	ldr	r2, [r1, #16]
 800b338:	6923      	ldr	r3, [r4, #16]
 800b33a:	429a      	cmp	r2, r3
 800b33c:	bfa8      	it	ge
 800b33e:	4623      	movge	r3, r4
 800b340:	460f      	mov	r7, r1
 800b342:	bfa4      	itt	ge
 800b344:	460c      	movge	r4, r1
 800b346:	461f      	movge	r7, r3
 800b348:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800b34c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800b350:	68a3      	ldr	r3, [r4, #8]
 800b352:	6861      	ldr	r1, [r4, #4]
 800b354:	eb0a 0609 	add.w	r6, sl, r9
 800b358:	42b3      	cmp	r3, r6
 800b35a:	b085      	sub	sp, #20
 800b35c:	bfb8      	it	lt
 800b35e:	3101      	addlt	r1, #1
 800b360:	f7ff fe92 	bl	800b088 <_Balloc>
 800b364:	b930      	cbnz	r0, 800b374 <__multiply+0x44>
 800b366:	4602      	mov	r2, r0
 800b368:	4b44      	ldr	r3, [pc, #272]	@ (800b47c <__multiply+0x14c>)
 800b36a:	4845      	ldr	r0, [pc, #276]	@ (800b480 <__multiply+0x150>)
 800b36c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800b370:	f000 ff04 	bl	800c17c <__assert_func>
 800b374:	f100 0514 	add.w	r5, r0, #20
 800b378:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b37c:	462b      	mov	r3, r5
 800b37e:	2200      	movs	r2, #0
 800b380:	4543      	cmp	r3, r8
 800b382:	d321      	bcc.n	800b3c8 <__multiply+0x98>
 800b384:	f107 0114 	add.w	r1, r7, #20
 800b388:	f104 0214 	add.w	r2, r4, #20
 800b38c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800b390:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800b394:	9302      	str	r3, [sp, #8]
 800b396:	1b13      	subs	r3, r2, r4
 800b398:	3b15      	subs	r3, #21
 800b39a:	f023 0303 	bic.w	r3, r3, #3
 800b39e:	3304      	adds	r3, #4
 800b3a0:	f104 0715 	add.w	r7, r4, #21
 800b3a4:	42ba      	cmp	r2, r7
 800b3a6:	bf38      	it	cc
 800b3a8:	2304      	movcc	r3, #4
 800b3aa:	9301      	str	r3, [sp, #4]
 800b3ac:	9b02      	ldr	r3, [sp, #8]
 800b3ae:	9103      	str	r1, [sp, #12]
 800b3b0:	428b      	cmp	r3, r1
 800b3b2:	d80c      	bhi.n	800b3ce <__multiply+0x9e>
 800b3b4:	2e00      	cmp	r6, #0
 800b3b6:	dd03      	ble.n	800b3c0 <__multiply+0x90>
 800b3b8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d05b      	beq.n	800b478 <__multiply+0x148>
 800b3c0:	6106      	str	r6, [r0, #16]
 800b3c2:	b005      	add	sp, #20
 800b3c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3c8:	f843 2b04 	str.w	r2, [r3], #4
 800b3cc:	e7d8      	b.n	800b380 <__multiply+0x50>
 800b3ce:	f8b1 a000 	ldrh.w	sl, [r1]
 800b3d2:	f1ba 0f00 	cmp.w	sl, #0
 800b3d6:	d024      	beq.n	800b422 <__multiply+0xf2>
 800b3d8:	f104 0e14 	add.w	lr, r4, #20
 800b3dc:	46a9      	mov	r9, r5
 800b3de:	f04f 0c00 	mov.w	ip, #0
 800b3e2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b3e6:	f8d9 3000 	ldr.w	r3, [r9]
 800b3ea:	fa1f fb87 	uxth.w	fp, r7
 800b3ee:	b29b      	uxth	r3, r3
 800b3f0:	fb0a 330b 	mla	r3, sl, fp, r3
 800b3f4:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800b3f8:	f8d9 7000 	ldr.w	r7, [r9]
 800b3fc:	4463      	add	r3, ip
 800b3fe:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b402:	fb0a c70b 	mla	r7, sl, fp, ip
 800b406:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800b40a:	b29b      	uxth	r3, r3
 800b40c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b410:	4572      	cmp	r2, lr
 800b412:	f849 3b04 	str.w	r3, [r9], #4
 800b416:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b41a:	d8e2      	bhi.n	800b3e2 <__multiply+0xb2>
 800b41c:	9b01      	ldr	r3, [sp, #4]
 800b41e:	f845 c003 	str.w	ip, [r5, r3]
 800b422:	9b03      	ldr	r3, [sp, #12]
 800b424:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800b428:	3104      	adds	r1, #4
 800b42a:	f1b9 0f00 	cmp.w	r9, #0
 800b42e:	d021      	beq.n	800b474 <__multiply+0x144>
 800b430:	682b      	ldr	r3, [r5, #0]
 800b432:	f104 0c14 	add.w	ip, r4, #20
 800b436:	46ae      	mov	lr, r5
 800b438:	f04f 0a00 	mov.w	sl, #0
 800b43c:	f8bc b000 	ldrh.w	fp, [ip]
 800b440:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800b444:	fb09 770b 	mla	r7, r9, fp, r7
 800b448:	4457      	add	r7, sl
 800b44a:	b29b      	uxth	r3, r3
 800b44c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b450:	f84e 3b04 	str.w	r3, [lr], #4
 800b454:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b458:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b45c:	f8be 3000 	ldrh.w	r3, [lr]
 800b460:	fb09 330a 	mla	r3, r9, sl, r3
 800b464:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800b468:	4562      	cmp	r2, ip
 800b46a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b46e:	d8e5      	bhi.n	800b43c <__multiply+0x10c>
 800b470:	9f01      	ldr	r7, [sp, #4]
 800b472:	51eb      	str	r3, [r5, r7]
 800b474:	3504      	adds	r5, #4
 800b476:	e799      	b.n	800b3ac <__multiply+0x7c>
 800b478:	3e01      	subs	r6, #1
 800b47a:	e79b      	b.n	800b3b4 <__multiply+0x84>
 800b47c:	0800cd61 	.word	0x0800cd61
 800b480:	0800cde9 	.word	0x0800cde9

0800b484 <__pow5mult>:
 800b484:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b488:	4615      	mov	r5, r2
 800b48a:	f012 0203 	ands.w	r2, r2, #3
 800b48e:	4607      	mov	r7, r0
 800b490:	460e      	mov	r6, r1
 800b492:	d007      	beq.n	800b4a4 <__pow5mult+0x20>
 800b494:	4c25      	ldr	r4, [pc, #148]	@ (800b52c <__pow5mult+0xa8>)
 800b496:	3a01      	subs	r2, #1
 800b498:	2300      	movs	r3, #0
 800b49a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b49e:	f7ff fe55 	bl	800b14c <__multadd>
 800b4a2:	4606      	mov	r6, r0
 800b4a4:	10ad      	asrs	r5, r5, #2
 800b4a6:	d03d      	beq.n	800b524 <__pow5mult+0xa0>
 800b4a8:	69fc      	ldr	r4, [r7, #28]
 800b4aa:	b97c      	cbnz	r4, 800b4cc <__pow5mult+0x48>
 800b4ac:	2010      	movs	r0, #16
 800b4ae:	f000 fe97 	bl	800c1e0 <malloc>
 800b4b2:	4602      	mov	r2, r0
 800b4b4:	61f8      	str	r0, [r7, #28]
 800b4b6:	b928      	cbnz	r0, 800b4c4 <__pow5mult+0x40>
 800b4b8:	4b1d      	ldr	r3, [pc, #116]	@ (800b530 <__pow5mult+0xac>)
 800b4ba:	481e      	ldr	r0, [pc, #120]	@ (800b534 <__pow5mult+0xb0>)
 800b4bc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800b4c0:	f000 fe5c 	bl	800c17c <__assert_func>
 800b4c4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b4c8:	6004      	str	r4, [r0, #0]
 800b4ca:	60c4      	str	r4, [r0, #12]
 800b4cc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800b4d0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b4d4:	b94c      	cbnz	r4, 800b4ea <__pow5mult+0x66>
 800b4d6:	f240 2171 	movw	r1, #625	@ 0x271
 800b4da:	4638      	mov	r0, r7
 800b4dc:	f7ff ff12 	bl	800b304 <__i2b>
 800b4e0:	2300      	movs	r3, #0
 800b4e2:	f8c8 0008 	str.w	r0, [r8, #8]
 800b4e6:	4604      	mov	r4, r0
 800b4e8:	6003      	str	r3, [r0, #0]
 800b4ea:	f04f 0900 	mov.w	r9, #0
 800b4ee:	07eb      	lsls	r3, r5, #31
 800b4f0:	d50a      	bpl.n	800b508 <__pow5mult+0x84>
 800b4f2:	4631      	mov	r1, r6
 800b4f4:	4622      	mov	r2, r4
 800b4f6:	4638      	mov	r0, r7
 800b4f8:	f7ff ff1a 	bl	800b330 <__multiply>
 800b4fc:	4631      	mov	r1, r6
 800b4fe:	4680      	mov	r8, r0
 800b500:	4638      	mov	r0, r7
 800b502:	f7ff fe01 	bl	800b108 <_Bfree>
 800b506:	4646      	mov	r6, r8
 800b508:	106d      	asrs	r5, r5, #1
 800b50a:	d00b      	beq.n	800b524 <__pow5mult+0xa0>
 800b50c:	6820      	ldr	r0, [r4, #0]
 800b50e:	b938      	cbnz	r0, 800b520 <__pow5mult+0x9c>
 800b510:	4622      	mov	r2, r4
 800b512:	4621      	mov	r1, r4
 800b514:	4638      	mov	r0, r7
 800b516:	f7ff ff0b 	bl	800b330 <__multiply>
 800b51a:	6020      	str	r0, [r4, #0]
 800b51c:	f8c0 9000 	str.w	r9, [r0]
 800b520:	4604      	mov	r4, r0
 800b522:	e7e4      	b.n	800b4ee <__pow5mult+0x6a>
 800b524:	4630      	mov	r0, r6
 800b526:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b52a:	bf00      	nop
 800b52c:	0800ce44 	.word	0x0800ce44
 800b530:	0800cdd2 	.word	0x0800cdd2
 800b534:	0800cde9 	.word	0x0800cde9

0800b538 <__lshift>:
 800b538:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b53c:	460c      	mov	r4, r1
 800b53e:	6849      	ldr	r1, [r1, #4]
 800b540:	6923      	ldr	r3, [r4, #16]
 800b542:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b546:	68a3      	ldr	r3, [r4, #8]
 800b548:	4607      	mov	r7, r0
 800b54a:	4691      	mov	r9, r2
 800b54c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b550:	f108 0601 	add.w	r6, r8, #1
 800b554:	42b3      	cmp	r3, r6
 800b556:	db0b      	blt.n	800b570 <__lshift+0x38>
 800b558:	4638      	mov	r0, r7
 800b55a:	f7ff fd95 	bl	800b088 <_Balloc>
 800b55e:	4605      	mov	r5, r0
 800b560:	b948      	cbnz	r0, 800b576 <__lshift+0x3e>
 800b562:	4602      	mov	r2, r0
 800b564:	4b28      	ldr	r3, [pc, #160]	@ (800b608 <__lshift+0xd0>)
 800b566:	4829      	ldr	r0, [pc, #164]	@ (800b60c <__lshift+0xd4>)
 800b568:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800b56c:	f000 fe06 	bl	800c17c <__assert_func>
 800b570:	3101      	adds	r1, #1
 800b572:	005b      	lsls	r3, r3, #1
 800b574:	e7ee      	b.n	800b554 <__lshift+0x1c>
 800b576:	2300      	movs	r3, #0
 800b578:	f100 0114 	add.w	r1, r0, #20
 800b57c:	f100 0210 	add.w	r2, r0, #16
 800b580:	4618      	mov	r0, r3
 800b582:	4553      	cmp	r3, sl
 800b584:	db33      	blt.n	800b5ee <__lshift+0xb6>
 800b586:	6920      	ldr	r0, [r4, #16]
 800b588:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b58c:	f104 0314 	add.w	r3, r4, #20
 800b590:	f019 091f 	ands.w	r9, r9, #31
 800b594:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b598:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b59c:	d02b      	beq.n	800b5f6 <__lshift+0xbe>
 800b59e:	f1c9 0e20 	rsb	lr, r9, #32
 800b5a2:	468a      	mov	sl, r1
 800b5a4:	2200      	movs	r2, #0
 800b5a6:	6818      	ldr	r0, [r3, #0]
 800b5a8:	fa00 f009 	lsl.w	r0, r0, r9
 800b5ac:	4310      	orrs	r0, r2
 800b5ae:	f84a 0b04 	str.w	r0, [sl], #4
 800b5b2:	f853 2b04 	ldr.w	r2, [r3], #4
 800b5b6:	459c      	cmp	ip, r3
 800b5b8:	fa22 f20e 	lsr.w	r2, r2, lr
 800b5bc:	d8f3      	bhi.n	800b5a6 <__lshift+0x6e>
 800b5be:	ebac 0304 	sub.w	r3, ip, r4
 800b5c2:	3b15      	subs	r3, #21
 800b5c4:	f023 0303 	bic.w	r3, r3, #3
 800b5c8:	3304      	adds	r3, #4
 800b5ca:	f104 0015 	add.w	r0, r4, #21
 800b5ce:	4584      	cmp	ip, r0
 800b5d0:	bf38      	it	cc
 800b5d2:	2304      	movcc	r3, #4
 800b5d4:	50ca      	str	r2, [r1, r3]
 800b5d6:	b10a      	cbz	r2, 800b5dc <__lshift+0xa4>
 800b5d8:	f108 0602 	add.w	r6, r8, #2
 800b5dc:	3e01      	subs	r6, #1
 800b5de:	4638      	mov	r0, r7
 800b5e0:	612e      	str	r6, [r5, #16]
 800b5e2:	4621      	mov	r1, r4
 800b5e4:	f7ff fd90 	bl	800b108 <_Bfree>
 800b5e8:	4628      	mov	r0, r5
 800b5ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b5ee:	f842 0f04 	str.w	r0, [r2, #4]!
 800b5f2:	3301      	adds	r3, #1
 800b5f4:	e7c5      	b.n	800b582 <__lshift+0x4a>
 800b5f6:	3904      	subs	r1, #4
 800b5f8:	f853 2b04 	ldr.w	r2, [r3], #4
 800b5fc:	f841 2f04 	str.w	r2, [r1, #4]!
 800b600:	459c      	cmp	ip, r3
 800b602:	d8f9      	bhi.n	800b5f8 <__lshift+0xc0>
 800b604:	e7ea      	b.n	800b5dc <__lshift+0xa4>
 800b606:	bf00      	nop
 800b608:	0800cd61 	.word	0x0800cd61
 800b60c:	0800cde9 	.word	0x0800cde9

0800b610 <__mcmp>:
 800b610:	690a      	ldr	r2, [r1, #16]
 800b612:	4603      	mov	r3, r0
 800b614:	6900      	ldr	r0, [r0, #16]
 800b616:	1a80      	subs	r0, r0, r2
 800b618:	b530      	push	{r4, r5, lr}
 800b61a:	d10e      	bne.n	800b63a <__mcmp+0x2a>
 800b61c:	3314      	adds	r3, #20
 800b61e:	3114      	adds	r1, #20
 800b620:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b624:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b628:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b62c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b630:	4295      	cmp	r5, r2
 800b632:	d003      	beq.n	800b63c <__mcmp+0x2c>
 800b634:	d205      	bcs.n	800b642 <__mcmp+0x32>
 800b636:	f04f 30ff 	mov.w	r0, #4294967295
 800b63a:	bd30      	pop	{r4, r5, pc}
 800b63c:	42a3      	cmp	r3, r4
 800b63e:	d3f3      	bcc.n	800b628 <__mcmp+0x18>
 800b640:	e7fb      	b.n	800b63a <__mcmp+0x2a>
 800b642:	2001      	movs	r0, #1
 800b644:	e7f9      	b.n	800b63a <__mcmp+0x2a>
	...

0800b648 <__mdiff>:
 800b648:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b64c:	4689      	mov	r9, r1
 800b64e:	4606      	mov	r6, r0
 800b650:	4611      	mov	r1, r2
 800b652:	4648      	mov	r0, r9
 800b654:	4614      	mov	r4, r2
 800b656:	f7ff ffdb 	bl	800b610 <__mcmp>
 800b65a:	1e05      	subs	r5, r0, #0
 800b65c:	d112      	bne.n	800b684 <__mdiff+0x3c>
 800b65e:	4629      	mov	r1, r5
 800b660:	4630      	mov	r0, r6
 800b662:	f7ff fd11 	bl	800b088 <_Balloc>
 800b666:	4602      	mov	r2, r0
 800b668:	b928      	cbnz	r0, 800b676 <__mdiff+0x2e>
 800b66a:	4b3f      	ldr	r3, [pc, #252]	@ (800b768 <__mdiff+0x120>)
 800b66c:	f240 2137 	movw	r1, #567	@ 0x237
 800b670:	483e      	ldr	r0, [pc, #248]	@ (800b76c <__mdiff+0x124>)
 800b672:	f000 fd83 	bl	800c17c <__assert_func>
 800b676:	2301      	movs	r3, #1
 800b678:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b67c:	4610      	mov	r0, r2
 800b67e:	b003      	add	sp, #12
 800b680:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b684:	bfbc      	itt	lt
 800b686:	464b      	movlt	r3, r9
 800b688:	46a1      	movlt	r9, r4
 800b68a:	4630      	mov	r0, r6
 800b68c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800b690:	bfba      	itte	lt
 800b692:	461c      	movlt	r4, r3
 800b694:	2501      	movlt	r5, #1
 800b696:	2500      	movge	r5, #0
 800b698:	f7ff fcf6 	bl	800b088 <_Balloc>
 800b69c:	4602      	mov	r2, r0
 800b69e:	b918      	cbnz	r0, 800b6a8 <__mdiff+0x60>
 800b6a0:	4b31      	ldr	r3, [pc, #196]	@ (800b768 <__mdiff+0x120>)
 800b6a2:	f240 2145 	movw	r1, #581	@ 0x245
 800b6a6:	e7e3      	b.n	800b670 <__mdiff+0x28>
 800b6a8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800b6ac:	6926      	ldr	r6, [r4, #16]
 800b6ae:	60c5      	str	r5, [r0, #12]
 800b6b0:	f109 0310 	add.w	r3, r9, #16
 800b6b4:	f109 0514 	add.w	r5, r9, #20
 800b6b8:	f104 0e14 	add.w	lr, r4, #20
 800b6bc:	f100 0b14 	add.w	fp, r0, #20
 800b6c0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800b6c4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800b6c8:	9301      	str	r3, [sp, #4]
 800b6ca:	46d9      	mov	r9, fp
 800b6cc:	f04f 0c00 	mov.w	ip, #0
 800b6d0:	9b01      	ldr	r3, [sp, #4]
 800b6d2:	f85e 0b04 	ldr.w	r0, [lr], #4
 800b6d6:	f853 af04 	ldr.w	sl, [r3, #4]!
 800b6da:	9301      	str	r3, [sp, #4]
 800b6dc:	fa1f f38a 	uxth.w	r3, sl
 800b6e0:	4619      	mov	r1, r3
 800b6e2:	b283      	uxth	r3, r0
 800b6e4:	1acb      	subs	r3, r1, r3
 800b6e6:	0c00      	lsrs	r0, r0, #16
 800b6e8:	4463      	add	r3, ip
 800b6ea:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800b6ee:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800b6f2:	b29b      	uxth	r3, r3
 800b6f4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b6f8:	4576      	cmp	r6, lr
 800b6fa:	f849 3b04 	str.w	r3, [r9], #4
 800b6fe:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b702:	d8e5      	bhi.n	800b6d0 <__mdiff+0x88>
 800b704:	1b33      	subs	r3, r6, r4
 800b706:	3b15      	subs	r3, #21
 800b708:	f023 0303 	bic.w	r3, r3, #3
 800b70c:	3415      	adds	r4, #21
 800b70e:	3304      	adds	r3, #4
 800b710:	42a6      	cmp	r6, r4
 800b712:	bf38      	it	cc
 800b714:	2304      	movcc	r3, #4
 800b716:	441d      	add	r5, r3
 800b718:	445b      	add	r3, fp
 800b71a:	461e      	mov	r6, r3
 800b71c:	462c      	mov	r4, r5
 800b71e:	4544      	cmp	r4, r8
 800b720:	d30e      	bcc.n	800b740 <__mdiff+0xf8>
 800b722:	f108 0103 	add.w	r1, r8, #3
 800b726:	1b49      	subs	r1, r1, r5
 800b728:	f021 0103 	bic.w	r1, r1, #3
 800b72c:	3d03      	subs	r5, #3
 800b72e:	45a8      	cmp	r8, r5
 800b730:	bf38      	it	cc
 800b732:	2100      	movcc	r1, #0
 800b734:	440b      	add	r3, r1
 800b736:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b73a:	b191      	cbz	r1, 800b762 <__mdiff+0x11a>
 800b73c:	6117      	str	r7, [r2, #16]
 800b73e:	e79d      	b.n	800b67c <__mdiff+0x34>
 800b740:	f854 1b04 	ldr.w	r1, [r4], #4
 800b744:	46e6      	mov	lr, ip
 800b746:	0c08      	lsrs	r0, r1, #16
 800b748:	fa1c fc81 	uxtah	ip, ip, r1
 800b74c:	4471      	add	r1, lr
 800b74e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800b752:	b289      	uxth	r1, r1
 800b754:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800b758:	f846 1b04 	str.w	r1, [r6], #4
 800b75c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b760:	e7dd      	b.n	800b71e <__mdiff+0xd6>
 800b762:	3f01      	subs	r7, #1
 800b764:	e7e7      	b.n	800b736 <__mdiff+0xee>
 800b766:	bf00      	nop
 800b768:	0800cd61 	.word	0x0800cd61
 800b76c:	0800cde9 	.word	0x0800cde9

0800b770 <__ulp>:
 800b770:	b082      	sub	sp, #8
 800b772:	ed8d 0b00 	vstr	d0, [sp]
 800b776:	9a01      	ldr	r2, [sp, #4]
 800b778:	4b0f      	ldr	r3, [pc, #60]	@ (800b7b8 <__ulp+0x48>)
 800b77a:	4013      	ands	r3, r2
 800b77c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800b780:	2b00      	cmp	r3, #0
 800b782:	dc08      	bgt.n	800b796 <__ulp+0x26>
 800b784:	425b      	negs	r3, r3
 800b786:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800b78a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b78e:	da04      	bge.n	800b79a <__ulp+0x2a>
 800b790:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800b794:	4113      	asrs	r3, r2
 800b796:	2200      	movs	r2, #0
 800b798:	e008      	b.n	800b7ac <__ulp+0x3c>
 800b79a:	f1a2 0314 	sub.w	r3, r2, #20
 800b79e:	2b1e      	cmp	r3, #30
 800b7a0:	bfda      	itte	le
 800b7a2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800b7a6:	40da      	lsrle	r2, r3
 800b7a8:	2201      	movgt	r2, #1
 800b7aa:	2300      	movs	r3, #0
 800b7ac:	4619      	mov	r1, r3
 800b7ae:	4610      	mov	r0, r2
 800b7b0:	ec41 0b10 	vmov	d0, r0, r1
 800b7b4:	b002      	add	sp, #8
 800b7b6:	4770      	bx	lr
 800b7b8:	7ff00000 	.word	0x7ff00000

0800b7bc <__b2d>:
 800b7bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b7c0:	6906      	ldr	r6, [r0, #16]
 800b7c2:	f100 0814 	add.w	r8, r0, #20
 800b7c6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800b7ca:	1f37      	subs	r7, r6, #4
 800b7cc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b7d0:	4610      	mov	r0, r2
 800b7d2:	f7ff fd4b 	bl	800b26c <__hi0bits>
 800b7d6:	f1c0 0320 	rsb	r3, r0, #32
 800b7da:	280a      	cmp	r0, #10
 800b7dc:	600b      	str	r3, [r1, #0]
 800b7de:	491b      	ldr	r1, [pc, #108]	@ (800b84c <__b2d+0x90>)
 800b7e0:	dc15      	bgt.n	800b80e <__b2d+0x52>
 800b7e2:	f1c0 0c0b 	rsb	ip, r0, #11
 800b7e6:	fa22 f30c 	lsr.w	r3, r2, ip
 800b7ea:	45b8      	cmp	r8, r7
 800b7ec:	ea43 0501 	orr.w	r5, r3, r1
 800b7f0:	bf34      	ite	cc
 800b7f2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b7f6:	2300      	movcs	r3, #0
 800b7f8:	3015      	adds	r0, #21
 800b7fa:	fa02 f000 	lsl.w	r0, r2, r0
 800b7fe:	fa23 f30c 	lsr.w	r3, r3, ip
 800b802:	4303      	orrs	r3, r0
 800b804:	461c      	mov	r4, r3
 800b806:	ec45 4b10 	vmov	d0, r4, r5
 800b80a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b80e:	45b8      	cmp	r8, r7
 800b810:	bf3a      	itte	cc
 800b812:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b816:	f1a6 0708 	subcc.w	r7, r6, #8
 800b81a:	2300      	movcs	r3, #0
 800b81c:	380b      	subs	r0, #11
 800b81e:	d012      	beq.n	800b846 <__b2d+0x8a>
 800b820:	f1c0 0120 	rsb	r1, r0, #32
 800b824:	fa23 f401 	lsr.w	r4, r3, r1
 800b828:	4082      	lsls	r2, r0
 800b82a:	4322      	orrs	r2, r4
 800b82c:	4547      	cmp	r7, r8
 800b82e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800b832:	bf8c      	ite	hi
 800b834:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800b838:	2200      	movls	r2, #0
 800b83a:	4083      	lsls	r3, r0
 800b83c:	40ca      	lsrs	r2, r1
 800b83e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800b842:	4313      	orrs	r3, r2
 800b844:	e7de      	b.n	800b804 <__b2d+0x48>
 800b846:	ea42 0501 	orr.w	r5, r2, r1
 800b84a:	e7db      	b.n	800b804 <__b2d+0x48>
 800b84c:	3ff00000 	.word	0x3ff00000

0800b850 <__d2b>:
 800b850:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b854:	460f      	mov	r7, r1
 800b856:	2101      	movs	r1, #1
 800b858:	ec59 8b10 	vmov	r8, r9, d0
 800b85c:	4616      	mov	r6, r2
 800b85e:	f7ff fc13 	bl	800b088 <_Balloc>
 800b862:	4604      	mov	r4, r0
 800b864:	b930      	cbnz	r0, 800b874 <__d2b+0x24>
 800b866:	4602      	mov	r2, r0
 800b868:	4b23      	ldr	r3, [pc, #140]	@ (800b8f8 <__d2b+0xa8>)
 800b86a:	4824      	ldr	r0, [pc, #144]	@ (800b8fc <__d2b+0xac>)
 800b86c:	f240 310f 	movw	r1, #783	@ 0x30f
 800b870:	f000 fc84 	bl	800c17c <__assert_func>
 800b874:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b878:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b87c:	b10d      	cbz	r5, 800b882 <__d2b+0x32>
 800b87e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b882:	9301      	str	r3, [sp, #4]
 800b884:	f1b8 0300 	subs.w	r3, r8, #0
 800b888:	d023      	beq.n	800b8d2 <__d2b+0x82>
 800b88a:	4668      	mov	r0, sp
 800b88c:	9300      	str	r3, [sp, #0]
 800b88e:	f7ff fd0c 	bl	800b2aa <__lo0bits>
 800b892:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b896:	b1d0      	cbz	r0, 800b8ce <__d2b+0x7e>
 800b898:	f1c0 0320 	rsb	r3, r0, #32
 800b89c:	fa02 f303 	lsl.w	r3, r2, r3
 800b8a0:	430b      	orrs	r3, r1
 800b8a2:	40c2      	lsrs	r2, r0
 800b8a4:	6163      	str	r3, [r4, #20]
 800b8a6:	9201      	str	r2, [sp, #4]
 800b8a8:	9b01      	ldr	r3, [sp, #4]
 800b8aa:	61a3      	str	r3, [r4, #24]
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	bf0c      	ite	eq
 800b8b0:	2201      	moveq	r2, #1
 800b8b2:	2202      	movne	r2, #2
 800b8b4:	6122      	str	r2, [r4, #16]
 800b8b6:	b1a5      	cbz	r5, 800b8e2 <__d2b+0x92>
 800b8b8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800b8bc:	4405      	add	r5, r0
 800b8be:	603d      	str	r5, [r7, #0]
 800b8c0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800b8c4:	6030      	str	r0, [r6, #0]
 800b8c6:	4620      	mov	r0, r4
 800b8c8:	b003      	add	sp, #12
 800b8ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b8ce:	6161      	str	r1, [r4, #20]
 800b8d0:	e7ea      	b.n	800b8a8 <__d2b+0x58>
 800b8d2:	a801      	add	r0, sp, #4
 800b8d4:	f7ff fce9 	bl	800b2aa <__lo0bits>
 800b8d8:	9b01      	ldr	r3, [sp, #4]
 800b8da:	6163      	str	r3, [r4, #20]
 800b8dc:	3020      	adds	r0, #32
 800b8de:	2201      	movs	r2, #1
 800b8e0:	e7e8      	b.n	800b8b4 <__d2b+0x64>
 800b8e2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b8e6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800b8ea:	6038      	str	r0, [r7, #0]
 800b8ec:	6918      	ldr	r0, [r3, #16]
 800b8ee:	f7ff fcbd 	bl	800b26c <__hi0bits>
 800b8f2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b8f6:	e7e5      	b.n	800b8c4 <__d2b+0x74>
 800b8f8:	0800cd61 	.word	0x0800cd61
 800b8fc:	0800cde9 	.word	0x0800cde9

0800b900 <__ratio>:
 800b900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b904:	b085      	sub	sp, #20
 800b906:	e9cd 1000 	strd	r1, r0, [sp]
 800b90a:	a902      	add	r1, sp, #8
 800b90c:	f7ff ff56 	bl	800b7bc <__b2d>
 800b910:	9800      	ldr	r0, [sp, #0]
 800b912:	a903      	add	r1, sp, #12
 800b914:	ec55 4b10 	vmov	r4, r5, d0
 800b918:	f7ff ff50 	bl	800b7bc <__b2d>
 800b91c:	9b01      	ldr	r3, [sp, #4]
 800b91e:	6919      	ldr	r1, [r3, #16]
 800b920:	9b00      	ldr	r3, [sp, #0]
 800b922:	691b      	ldr	r3, [r3, #16]
 800b924:	1ac9      	subs	r1, r1, r3
 800b926:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800b92a:	1a9b      	subs	r3, r3, r2
 800b92c:	ec5b ab10 	vmov	sl, fp, d0
 800b930:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800b934:	2b00      	cmp	r3, #0
 800b936:	bfce      	itee	gt
 800b938:	462a      	movgt	r2, r5
 800b93a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b93e:	465a      	movle	r2, fp
 800b940:	462f      	mov	r7, r5
 800b942:	46d9      	mov	r9, fp
 800b944:	bfcc      	ite	gt
 800b946:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b94a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800b94e:	464b      	mov	r3, r9
 800b950:	4652      	mov	r2, sl
 800b952:	4620      	mov	r0, r4
 800b954:	4639      	mov	r1, r7
 800b956:	f7f4 ff89 	bl	800086c <__aeabi_ddiv>
 800b95a:	ec41 0b10 	vmov	d0, r0, r1
 800b95e:	b005      	add	sp, #20
 800b960:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b964 <__copybits>:
 800b964:	3901      	subs	r1, #1
 800b966:	b570      	push	{r4, r5, r6, lr}
 800b968:	1149      	asrs	r1, r1, #5
 800b96a:	6914      	ldr	r4, [r2, #16]
 800b96c:	3101      	adds	r1, #1
 800b96e:	f102 0314 	add.w	r3, r2, #20
 800b972:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b976:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b97a:	1f05      	subs	r5, r0, #4
 800b97c:	42a3      	cmp	r3, r4
 800b97e:	d30c      	bcc.n	800b99a <__copybits+0x36>
 800b980:	1aa3      	subs	r3, r4, r2
 800b982:	3b11      	subs	r3, #17
 800b984:	f023 0303 	bic.w	r3, r3, #3
 800b988:	3211      	adds	r2, #17
 800b98a:	42a2      	cmp	r2, r4
 800b98c:	bf88      	it	hi
 800b98e:	2300      	movhi	r3, #0
 800b990:	4418      	add	r0, r3
 800b992:	2300      	movs	r3, #0
 800b994:	4288      	cmp	r0, r1
 800b996:	d305      	bcc.n	800b9a4 <__copybits+0x40>
 800b998:	bd70      	pop	{r4, r5, r6, pc}
 800b99a:	f853 6b04 	ldr.w	r6, [r3], #4
 800b99e:	f845 6f04 	str.w	r6, [r5, #4]!
 800b9a2:	e7eb      	b.n	800b97c <__copybits+0x18>
 800b9a4:	f840 3b04 	str.w	r3, [r0], #4
 800b9a8:	e7f4      	b.n	800b994 <__copybits+0x30>

0800b9aa <__any_on>:
 800b9aa:	f100 0214 	add.w	r2, r0, #20
 800b9ae:	6900      	ldr	r0, [r0, #16]
 800b9b0:	114b      	asrs	r3, r1, #5
 800b9b2:	4298      	cmp	r0, r3
 800b9b4:	b510      	push	{r4, lr}
 800b9b6:	db11      	blt.n	800b9dc <__any_on+0x32>
 800b9b8:	dd0a      	ble.n	800b9d0 <__any_on+0x26>
 800b9ba:	f011 011f 	ands.w	r1, r1, #31
 800b9be:	d007      	beq.n	800b9d0 <__any_on+0x26>
 800b9c0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b9c4:	fa24 f001 	lsr.w	r0, r4, r1
 800b9c8:	fa00 f101 	lsl.w	r1, r0, r1
 800b9cc:	428c      	cmp	r4, r1
 800b9ce:	d10b      	bne.n	800b9e8 <__any_on+0x3e>
 800b9d0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b9d4:	4293      	cmp	r3, r2
 800b9d6:	d803      	bhi.n	800b9e0 <__any_on+0x36>
 800b9d8:	2000      	movs	r0, #0
 800b9da:	bd10      	pop	{r4, pc}
 800b9dc:	4603      	mov	r3, r0
 800b9de:	e7f7      	b.n	800b9d0 <__any_on+0x26>
 800b9e0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b9e4:	2900      	cmp	r1, #0
 800b9e6:	d0f5      	beq.n	800b9d4 <__any_on+0x2a>
 800b9e8:	2001      	movs	r0, #1
 800b9ea:	e7f6      	b.n	800b9da <__any_on+0x30>

0800b9ec <__ascii_wctomb>:
 800b9ec:	4603      	mov	r3, r0
 800b9ee:	4608      	mov	r0, r1
 800b9f0:	b141      	cbz	r1, 800ba04 <__ascii_wctomb+0x18>
 800b9f2:	2aff      	cmp	r2, #255	@ 0xff
 800b9f4:	d904      	bls.n	800ba00 <__ascii_wctomb+0x14>
 800b9f6:	228a      	movs	r2, #138	@ 0x8a
 800b9f8:	601a      	str	r2, [r3, #0]
 800b9fa:	f04f 30ff 	mov.w	r0, #4294967295
 800b9fe:	4770      	bx	lr
 800ba00:	700a      	strb	r2, [r1, #0]
 800ba02:	2001      	movs	r0, #1
 800ba04:	4770      	bx	lr

0800ba06 <__ssputs_r>:
 800ba06:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba0a:	688e      	ldr	r6, [r1, #8]
 800ba0c:	461f      	mov	r7, r3
 800ba0e:	42be      	cmp	r6, r7
 800ba10:	680b      	ldr	r3, [r1, #0]
 800ba12:	4682      	mov	sl, r0
 800ba14:	460c      	mov	r4, r1
 800ba16:	4690      	mov	r8, r2
 800ba18:	d82d      	bhi.n	800ba76 <__ssputs_r+0x70>
 800ba1a:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ba1e:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800ba22:	d026      	beq.n	800ba72 <__ssputs_r+0x6c>
 800ba24:	6965      	ldr	r5, [r4, #20]
 800ba26:	6909      	ldr	r1, [r1, #16]
 800ba28:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ba2c:	eba3 0901 	sub.w	r9, r3, r1
 800ba30:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ba34:	1c7b      	adds	r3, r7, #1
 800ba36:	444b      	add	r3, r9
 800ba38:	106d      	asrs	r5, r5, #1
 800ba3a:	429d      	cmp	r5, r3
 800ba3c:	bf38      	it	cc
 800ba3e:	461d      	movcc	r5, r3
 800ba40:	0553      	lsls	r3, r2, #21
 800ba42:	d527      	bpl.n	800ba94 <__ssputs_r+0x8e>
 800ba44:	4629      	mov	r1, r5
 800ba46:	f7ff fa81 	bl	800af4c <_malloc_r>
 800ba4a:	4606      	mov	r6, r0
 800ba4c:	b360      	cbz	r0, 800baa8 <__ssputs_r+0xa2>
 800ba4e:	6921      	ldr	r1, [r4, #16]
 800ba50:	464a      	mov	r2, r9
 800ba52:	f7fe febc 	bl	800a7ce <memcpy>
 800ba56:	89a3      	ldrh	r3, [r4, #12]
 800ba58:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ba5c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ba60:	81a3      	strh	r3, [r4, #12]
 800ba62:	6126      	str	r6, [r4, #16]
 800ba64:	6165      	str	r5, [r4, #20]
 800ba66:	444e      	add	r6, r9
 800ba68:	eba5 0509 	sub.w	r5, r5, r9
 800ba6c:	6026      	str	r6, [r4, #0]
 800ba6e:	60a5      	str	r5, [r4, #8]
 800ba70:	463e      	mov	r6, r7
 800ba72:	42be      	cmp	r6, r7
 800ba74:	d900      	bls.n	800ba78 <__ssputs_r+0x72>
 800ba76:	463e      	mov	r6, r7
 800ba78:	6820      	ldr	r0, [r4, #0]
 800ba7a:	4632      	mov	r2, r6
 800ba7c:	4641      	mov	r1, r8
 800ba7e:	f000 fb53 	bl	800c128 <memmove>
 800ba82:	68a3      	ldr	r3, [r4, #8]
 800ba84:	1b9b      	subs	r3, r3, r6
 800ba86:	60a3      	str	r3, [r4, #8]
 800ba88:	6823      	ldr	r3, [r4, #0]
 800ba8a:	4433      	add	r3, r6
 800ba8c:	6023      	str	r3, [r4, #0]
 800ba8e:	2000      	movs	r0, #0
 800ba90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba94:	462a      	mov	r2, r5
 800ba96:	f000 fbab 	bl	800c1f0 <_realloc_r>
 800ba9a:	4606      	mov	r6, r0
 800ba9c:	2800      	cmp	r0, #0
 800ba9e:	d1e0      	bne.n	800ba62 <__ssputs_r+0x5c>
 800baa0:	6921      	ldr	r1, [r4, #16]
 800baa2:	4650      	mov	r0, sl
 800baa4:	f7fe feac 	bl	800a800 <_free_r>
 800baa8:	230c      	movs	r3, #12
 800baaa:	f8ca 3000 	str.w	r3, [sl]
 800baae:	89a3      	ldrh	r3, [r4, #12]
 800bab0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bab4:	81a3      	strh	r3, [r4, #12]
 800bab6:	f04f 30ff 	mov.w	r0, #4294967295
 800baba:	e7e9      	b.n	800ba90 <__ssputs_r+0x8a>

0800babc <_svfiprintf_r>:
 800babc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bac0:	4698      	mov	r8, r3
 800bac2:	898b      	ldrh	r3, [r1, #12]
 800bac4:	061b      	lsls	r3, r3, #24
 800bac6:	b09d      	sub	sp, #116	@ 0x74
 800bac8:	4607      	mov	r7, r0
 800baca:	460d      	mov	r5, r1
 800bacc:	4614      	mov	r4, r2
 800bace:	d510      	bpl.n	800baf2 <_svfiprintf_r+0x36>
 800bad0:	690b      	ldr	r3, [r1, #16]
 800bad2:	b973      	cbnz	r3, 800baf2 <_svfiprintf_r+0x36>
 800bad4:	2140      	movs	r1, #64	@ 0x40
 800bad6:	f7ff fa39 	bl	800af4c <_malloc_r>
 800bada:	6028      	str	r0, [r5, #0]
 800badc:	6128      	str	r0, [r5, #16]
 800bade:	b930      	cbnz	r0, 800baee <_svfiprintf_r+0x32>
 800bae0:	230c      	movs	r3, #12
 800bae2:	603b      	str	r3, [r7, #0]
 800bae4:	f04f 30ff 	mov.w	r0, #4294967295
 800bae8:	b01d      	add	sp, #116	@ 0x74
 800baea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800baee:	2340      	movs	r3, #64	@ 0x40
 800baf0:	616b      	str	r3, [r5, #20]
 800baf2:	2300      	movs	r3, #0
 800baf4:	9309      	str	r3, [sp, #36]	@ 0x24
 800baf6:	2320      	movs	r3, #32
 800baf8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bafc:	f8cd 800c 	str.w	r8, [sp, #12]
 800bb00:	2330      	movs	r3, #48	@ 0x30
 800bb02:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800bca0 <_svfiprintf_r+0x1e4>
 800bb06:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bb0a:	f04f 0901 	mov.w	r9, #1
 800bb0e:	4623      	mov	r3, r4
 800bb10:	469a      	mov	sl, r3
 800bb12:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bb16:	b10a      	cbz	r2, 800bb1c <_svfiprintf_r+0x60>
 800bb18:	2a25      	cmp	r2, #37	@ 0x25
 800bb1a:	d1f9      	bne.n	800bb10 <_svfiprintf_r+0x54>
 800bb1c:	ebba 0b04 	subs.w	fp, sl, r4
 800bb20:	d00b      	beq.n	800bb3a <_svfiprintf_r+0x7e>
 800bb22:	465b      	mov	r3, fp
 800bb24:	4622      	mov	r2, r4
 800bb26:	4629      	mov	r1, r5
 800bb28:	4638      	mov	r0, r7
 800bb2a:	f7ff ff6c 	bl	800ba06 <__ssputs_r>
 800bb2e:	3001      	adds	r0, #1
 800bb30:	f000 80a7 	beq.w	800bc82 <_svfiprintf_r+0x1c6>
 800bb34:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bb36:	445a      	add	r2, fp
 800bb38:	9209      	str	r2, [sp, #36]	@ 0x24
 800bb3a:	f89a 3000 	ldrb.w	r3, [sl]
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	f000 809f 	beq.w	800bc82 <_svfiprintf_r+0x1c6>
 800bb44:	2300      	movs	r3, #0
 800bb46:	f04f 32ff 	mov.w	r2, #4294967295
 800bb4a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bb4e:	f10a 0a01 	add.w	sl, sl, #1
 800bb52:	9304      	str	r3, [sp, #16]
 800bb54:	9307      	str	r3, [sp, #28]
 800bb56:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bb5a:	931a      	str	r3, [sp, #104]	@ 0x68
 800bb5c:	4654      	mov	r4, sl
 800bb5e:	2205      	movs	r2, #5
 800bb60:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb64:	484e      	ldr	r0, [pc, #312]	@ (800bca0 <_svfiprintf_r+0x1e4>)
 800bb66:	f7f4 fb4b 	bl	8000200 <memchr>
 800bb6a:	9a04      	ldr	r2, [sp, #16]
 800bb6c:	b9d8      	cbnz	r0, 800bba6 <_svfiprintf_r+0xea>
 800bb6e:	06d0      	lsls	r0, r2, #27
 800bb70:	bf44      	itt	mi
 800bb72:	2320      	movmi	r3, #32
 800bb74:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bb78:	0711      	lsls	r1, r2, #28
 800bb7a:	bf44      	itt	mi
 800bb7c:	232b      	movmi	r3, #43	@ 0x2b
 800bb7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bb82:	f89a 3000 	ldrb.w	r3, [sl]
 800bb86:	2b2a      	cmp	r3, #42	@ 0x2a
 800bb88:	d015      	beq.n	800bbb6 <_svfiprintf_r+0xfa>
 800bb8a:	9a07      	ldr	r2, [sp, #28]
 800bb8c:	4654      	mov	r4, sl
 800bb8e:	2000      	movs	r0, #0
 800bb90:	f04f 0c0a 	mov.w	ip, #10
 800bb94:	4621      	mov	r1, r4
 800bb96:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bb9a:	3b30      	subs	r3, #48	@ 0x30
 800bb9c:	2b09      	cmp	r3, #9
 800bb9e:	d94b      	bls.n	800bc38 <_svfiprintf_r+0x17c>
 800bba0:	b1b0      	cbz	r0, 800bbd0 <_svfiprintf_r+0x114>
 800bba2:	9207      	str	r2, [sp, #28]
 800bba4:	e014      	b.n	800bbd0 <_svfiprintf_r+0x114>
 800bba6:	eba0 0308 	sub.w	r3, r0, r8
 800bbaa:	fa09 f303 	lsl.w	r3, r9, r3
 800bbae:	4313      	orrs	r3, r2
 800bbb0:	9304      	str	r3, [sp, #16]
 800bbb2:	46a2      	mov	sl, r4
 800bbb4:	e7d2      	b.n	800bb5c <_svfiprintf_r+0xa0>
 800bbb6:	9b03      	ldr	r3, [sp, #12]
 800bbb8:	1d19      	adds	r1, r3, #4
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	9103      	str	r1, [sp, #12]
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	bfbb      	ittet	lt
 800bbc2:	425b      	neglt	r3, r3
 800bbc4:	f042 0202 	orrlt.w	r2, r2, #2
 800bbc8:	9307      	strge	r3, [sp, #28]
 800bbca:	9307      	strlt	r3, [sp, #28]
 800bbcc:	bfb8      	it	lt
 800bbce:	9204      	strlt	r2, [sp, #16]
 800bbd0:	7823      	ldrb	r3, [r4, #0]
 800bbd2:	2b2e      	cmp	r3, #46	@ 0x2e
 800bbd4:	d10a      	bne.n	800bbec <_svfiprintf_r+0x130>
 800bbd6:	7863      	ldrb	r3, [r4, #1]
 800bbd8:	2b2a      	cmp	r3, #42	@ 0x2a
 800bbda:	d132      	bne.n	800bc42 <_svfiprintf_r+0x186>
 800bbdc:	9b03      	ldr	r3, [sp, #12]
 800bbde:	1d1a      	adds	r2, r3, #4
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	9203      	str	r2, [sp, #12]
 800bbe4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bbe8:	3402      	adds	r4, #2
 800bbea:	9305      	str	r3, [sp, #20]
 800bbec:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800bcb0 <_svfiprintf_r+0x1f4>
 800bbf0:	7821      	ldrb	r1, [r4, #0]
 800bbf2:	2203      	movs	r2, #3
 800bbf4:	4650      	mov	r0, sl
 800bbf6:	f7f4 fb03 	bl	8000200 <memchr>
 800bbfa:	b138      	cbz	r0, 800bc0c <_svfiprintf_r+0x150>
 800bbfc:	9b04      	ldr	r3, [sp, #16]
 800bbfe:	eba0 000a 	sub.w	r0, r0, sl
 800bc02:	2240      	movs	r2, #64	@ 0x40
 800bc04:	4082      	lsls	r2, r0
 800bc06:	4313      	orrs	r3, r2
 800bc08:	3401      	adds	r4, #1
 800bc0a:	9304      	str	r3, [sp, #16]
 800bc0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc10:	4824      	ldr	r0, [pc, #144]	@ (800bca4 <_svfiprintf_r+0x1e8>)
 800bc12:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bc16:	2206      	movs	r2, #6
 800bc18:	f7f4 faf2 	bl	8000200 <memchr>
 800bc1c:	2800      	cmp	r0, #0
 800bc1e:	d036      	beq.n	800bc8e <_svfiprintf_r+0x1d2>
 800bc20:	4b21      	ldr	r3, [pc, #132]	@ (800bca8 <_svfiprintf_r+0x1ec>)
 800bc22:	bb1b      	cbnz	r3, 800bc6c <_svfiprintf_r+0x1b0>
 800bc24:	9b03      	ldr	r3, [sp, #12]
 800bc26:	3307      	adds	r3, #7
 800bc28:	f023 0307 	bic.w	r3, r3, #7
 800bc2c:	3308      	adds	r3, #8
 800bc2e:	9303      	str	r3, [sp, #12]
 800bc30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc32:	4433      	add	r3, r6
 800bc34:	9309      	str	r3, [sp, #36]	@ 0x24
 800bc36:	e76a      	b.n	800bb0e <_svfiprintf_r+0x52>
 800bc38:	fb0c 3202 	mla	r2, ip, r2, r3
 800bc3c:	460c      	mov	r4, r1
 800bc3e:	2001      	movs	r0, #1
 800bc40:	e7a8      	b.n	800bb94 <_svfiprintf_r+0xd8>
 800bc42:	2300      	movs	r3, #0
 800bc44:	3401      	adds	r4, #1
 800bc46:	9305      	str	r3, [sp, #20]
 800bc48:	4619      	mov	r1, r3
 800bc4a:	f04f 0c0a 	mov.w	ip, #10
 800bc4e:	4620      	mov	r0, r4
 800bc50:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bc54:	3a30      	subs	r2, #48	@ 0x30
 800bc56:	2a09      	cmp	r2, #9
 800bc58:	d903      	bls.n	800bc62 <_svfiprintf_r+0x1a6>
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d0c6      	beq.n	800bbec <_svfiprintf_r+0x130>
 800bc5e:	9105      	str	r1, [sp, #20]
 800bc60:	e7c4      	b.n	800bbec <_svfiprintf_r+0x130>
 800bc62:	fb0c 2101 	mla	r1, ip, r1, r2
 800bc66:	4604      	mov	r4, r0
 800bc68:	2301      	movs	r3, #1
 800bc6a:	e7f0      	b.n	800bc4e <_svfiprintf_r+0x192>
 800bc6c:	ab03      	add	r3, sp, #12
 800bc6e:	9300      	str	r3, [sp, #0]
 800bc70:	462a      	mov	r2, r5
 800bc72:	4b0e      	ldr	r3, [pc, #56]	@ (800bcac <_svfiprintf_r+0x1f0>)
 800bc74:	a904      	add	r1, sp, #16
 800bc76:	4638      	mov	r0, r7
 800bc78:	f3af 8000 	nop.w
 800bc7c:	1c42      	adds	r2, r0, #1
 800bc7e:	4606      	mov	r6, r0
 800bc80:	d1d6      	bne.n	800bc30 <_svfiprintf_r+0x174>
 800bc82:	89ab      	ldrh	r3, [r5, #12]
 800bc84:	065b      	lsls	r3, r3, #25
 800bc86:	f53f af2d 	bmi.w	800bae4 <_svfiprintf_r+0x28>
 800bc8a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bc8c:	e72c      	b.n	800bae8 <_svfiprintf_r+0x2c>
 800bc8e:	ab03      	add	r3, sp, #12
 800bc90:	9300      	str	r3, [sp, #0]
 800bc92:	462a      	mov	r2, r5
 800bc94:	4b05      	ldr	r3, [pc, #20]	@ (800bcac <_svfiprintf_r+0x1f0>)
 800bc96:	a904      	add	r1, sp, #16
 800bc98:	4638      	mov	r0, r7
 800bc9a:	f000 f879 	bl	800bd90 <_printf_i>
 800bc9e:	e7ed      	b.n	800bc7c <_svfiprintf_r+0x1c0>
 800bca0:	0800cf40 	.word	0x0800cf40
 800bca4:	0800cf4a 	.word	0x0800cf4a
 800bca8:	00000000 	.word	0x00000000
 800bcac:	0800ba07 	.word	0x0800ba07
 800bcb0:	0800cf46 	.word	0x0800cf46

0800bcb4 <_printf_common>:
 800bcb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bcb8:	4616      	mov	r6, r2
 800bcba:	4698      	mov	r8, r3
 800bcbc:	688a      	ldr	r2, [r1, #8]
 800bcbe:	690b      	ldr	r3, [r1, #16]
 800bcc0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800bcc4:	4293      	cmp	r3, r2
 800bcc6:	bfb8      	it	lt
 800bcc8:	4613      	movlt	r3, r2
 800bcca:	6033      	str	r3, [r6, #0]
 800bccc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800bcd0:	4607      	mov	r7, r0
 800bcd2:	460c      	mov	r4, r1
 800bcd4:	b10a      	cbz	r2, 800bcda <_printf_common+0x26>
 800bcd6:	3301      	adds	r3, #1
 800bcd8:	6033      	str	r3, [r6, #0]
 800bcda:	6823      	ldr	r3, [r4, #0]
 800bcdc:	0699      	lsls	r1, r3, #26
 800bcde:	bf42      	ittt	mi
 800bce0:	6833      	ldrmi	r3, [r6, #0]
 800bce2:	3302      	addmi	r3, #2
 800bce4:	6033      	strmi	r3, [r6, #0]
 800bce6:	6825      	ldr	r5, [r4, #0]
 800bce8:	f015 0506 	ands.w	r5, r5, #6
 800bcec:	d106      	bne.n	800bcfc <_printf_common+0x48>
 800bcee:	f104 0a19 	add.w	sl, r4, #25
 800bcf2:	68e3      	ldr	r3, [r4, #12]
 800bcf4:	6832      	ldr	r2, [r6, #0]
 800bcf6:	1a9b      	subs	r3, r3, r2
 800bcf8:	42ab      	cmp	r3, r5
 800bcfa:	dc26      	bgt.n	800bd4a <_printf_common+0x96>
 800bcfc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800bd00:	6822      	ldr	r2, [r4, #0]
 800bd02:	3b00      	subs	r3, #0
 800bd04:	bf18      	it	ne
 800bd06:	2301      	movne	r3, #1
 800bd08:	0692      	lsls	r2, r2, #26
 800bd0a:	d42b      	bmi.n	800bd64 <_printf_common+0xb0>
 800bd0c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800bd10:	4641      	mov	r1, r8
 800bd12:	4638      	mov	r0, r7
 800bd14:	47c8      	blx	r9
 800bd16:	3001      	adds	r0, #1
 800bd18:	d01e      	beq.n	800bd58 <_printf_common+0xa4>
 800bd1a:	6823      	ldr	r3, [r4, #0]
 800bd1c:	6922      	ldr	r2, [r4, #16]
 800bd1e:	f003 0306 	and.w	r3, r3, #6
 800bd22:	2b04      	cmp	r3, #4
 800bd24:	bf02      	ittt	eq
 800bd26:	68e5      	ldreq	r5, [r4, #12]
 800bd28:	6833      	ldreq	r3, [r6, #0]
 800bd2a:	1aed      	subeq	r5, r5, r3
 800bd2c:	68a3      	ldr	r3, [r4, #8]
 800bd2e:	bf0c      	ite	eq
 800bd30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bd34:	2500      	movne	r5, #0
 800bd36:	4293      	cmp	r3, r2
 800bd38:	bfc4      	itt	gt
 800bd3a:	1a9b      	subgt	r3, r3, r2
 800bd3c:	18ed      	addgt	r5, r5, r3
 800bd3e:	2600      	movs	r6, #0
 800bd40:	341a      	adds	r4, #26
 800bd42:	42b5      	cmp	r5, r6
 800bd44:	d11a      	bne.n	800bd7c <_printf_common+0xc8>
 800bd46:	2000      	movs	r0, #0
 800bd48:	e008      	b.n	800bd5c <_printf_common+0xa8>
 800bd4a:	2301      	movs	r3, #1
 800bd4c:	4652      	mov	r2, sl
 800bd4e:	4641      	mov	r1, r8
 800bd50:	4638      	mov	r0, r7
 800bd52:	47c8      	blx	r9
 800bd54:	3001      	adds	r0, #1
 800bd56:	d103      	bne.n	800bd60 <_printf_common+0xac>
 800bd58:	f04f 30ff 	mov.w	r0, #4294967295
 800bd5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd60:	3501      	adds	r5, #1
 800bd62:	e7c6      	b.n	800bcf2 <_printf_common+0x3e>
 800bd64:	18e1      	adds	r1, r4, r3
 800bd66:	1c5a      	adds	r2, r3, #1
 800bd68:	2030      	movs	r0, #48	@ 0x30
 800bd6a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800bd6e:	4422      	add	r2, r4
 800bd70:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800bd74:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800bd78:	3302      	adds	r3, #2
 800bd7a:	e7c7      	b.n	800bd0c <_printf_common+0x58>
 800bd7c:	2301      	movs	r3, #1
 800bd7e:	4622      	mov	r2, r4
 800bd80:	4641      	mov	r1, r8
 800bd82:	4638      	mov	r0, r7
 800bd84:	47c8      	blx	r9
 800bd86:	3001      	adds	r0, #1
 800bd88:	d0e6      	beq.n	800bd58 <_printf_common+0xa4>
 800bd8a:	3601      	adds	r6, #1
 800bd8c:	e7d9      	b.n	800bd42 <_printf_common+0x8e>
	...

0800bd90 <_printf_i>:
 800bd90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bd94:	7e0f      	ldrb	r7, [r1, #24]
 800bd96:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800bd98:	2f78      	cmp	r7, #120	@ 0x78
 800bd9a:	4691      	mov	r9, r2
 800bd9c:	4680      	mov	r8, r0
 800bd9e:	460c      	mov	r4, r1
 800bda0:	469a      	mov	sl, r3
 800bda2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800bda6:	d807      	bhi.n	800bdb8 <_printf_i+0x28>
 800bda8:	2f62      	cmp	r7, #98	@ 0x62
 800bdaa:	d80a      	bhi.n	800bdc2 <_printf_i+0x32>
 800bdac:	2f00      	cmp	r7, #0
 800bdae:	f000 80d2 	beq.w	800bf56 <_printf_i+0x1c6>
 800bdb2:	2f58      	cmp	r7, #88	@ 0x58
 800bdb4:	f000 80b9 	beq.w	800bf2a <_printf_i+0x19a>
 800bdb8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bdbc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800bdc0:	e03a      	b.n	800be38 <_printf_i+0xa8>
 800bdc2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800bdc6:	2b15      	cmp	r3, #21
 800bdc8:	d8f6      	bhi.n	800bdb8 <_printf_i+0x28>
 800bdca:	a101      	add	r1, pc, #4	@ (adr r1, 800bdd0 <_printf_i+0x40>)
 800bdcc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bdd0:	0800be29 	.word	0x0800be29
 800bdd4:	0800be3d 	.word	0x0800be3d
 800bdd8:	0800bdb9 	.word	0x0800bdb9
 800bddc:	0800bdb9 	.word	0x0800bdb9
 800bde0:	0800bdb9 	.word	0x0800bdb9
 800bde4:	0800bdb9 	.word	0x0800bdb9
 800bde8:	0800be3d 	.word	0x0800be3d
 800bdec:	0800bdb9 	.word	0x0800bdb9
 800bdf0:	0800bdb9 	.word	0x0800bdb9
 800bdf4:	0800bdb9 	.word	0x0800bdb9
 800bdf8:	0800bdb9 	.word	0x0800bdb9
 800bdfc:	0800bf3d 	.word	0x0800bf3d
 800be00:	0800be67 	.word	0x0800be67
 800be04:	0800bef7 	.word	0x0800bef7
 800be08:	0800bdb9 	.word	0x0800bdb9
 800be0c:	0800bdb9 	.word	0x0800bdb9
 800be10:	0800bf5f 	.word	0x0800bf5f
 800be14:	0800bdb9 	.word	0x0800bdb9
 800be18:	0800be67 	.word	0x0800be67
 800be1c:	0800bdb9 	.word	0x0800bdb9
 800be20:	0800bdb9 	.word	0x0800bdb9
 800be24:	0800beff 	.word	0x0800beff
 800be28:	6833      	ldr	r3, [r6, #0]
 800be2a:	1d1a      	adds	r2, r3, #4
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	6032      	str	r2, [r6, #0]
 800be30:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800be34:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800be38:	2301      	movs	r3, #1
 800be3a:	e09d      	b.n	800bf78 <_printf_i+0x1e8>
 800be3c:	6833      	ldr	r3, [r6, #0]
 800be3e:	6820      	ldr	r0, [r4, #0]
 800be40:	1d19      	adds	r1, r3, #4
 800be42:	6031      	str	r1, [r6, #0]
 800be44:	0606      	lsls	r6, r0, #24
 800be46:	d501      	bpl.n	800be4c <_printf_i+0xbc>
 800be48:	681d      	ldr	r5, [r3, #0]
 800be4a:	e003      	b.n	800be54 <_printf_i+0xc4>
 800be4c:	0645      	lsls	r5, r0, #25
 800be4e:	d5fb      	bpl.n	800be48 <_printf_i+0xb8>
 800be50:	f9b3 5000 	ldrsh.w	r5, [r3]
 800be54:	2d00      	cmp	r5, #0
 800be56:	da03      	bge.n	800be60 <_printf_i+0xd0>
 800be58:	232d      	movs	r3, #45	@ 0x2d
 800be5a:	426d      	negs	r5, r5
 800be5c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800be60:	4859      	ldr	r0, [pc, #356]	@ (800bfc8 <_printf_i+0x238>)
 800be62:	230a      	movs	r3, #10
 800be64:	e011      	b.n	800be8a <_printf_i+0xfa>
 800be66:	6821      	ldr	r1, [r4, #0]
 800be68:	6833      	ldr	r3, [r6, #0]
 800be6a:	0608      	lsls	r0, r1, #24
 800be6c:	f853 5b04 	ldr.w	r5, [r3], #4
 800be70:	d402      	bmi.n	800be78 <_printf_i+0xe8>
 800be72:	0649      	lsls	r1, r1, #25
 800be74:	bf48      	it	mi
 800be76:	b2ad      	uxthmi	r5, r5
 800be78:	2f6f      	cmp	r7, #111	@ 0x6f
 800be7a:	4853      	ldr	r0, [pc, #332]	@ (800bfc8 <_printf_i+0x238>)
 800be7c:	6033      	str	r3, [r6, #0]
 800be7e:	bf14      	ite	ne
 800be80:	230a      	movne	r3, #10
 800be82:	2308      	moveq	r3, #8
 800be84:	2100      	movs	r1, #0
 800be86:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800be8a:	6866      	ldr	r6, [r4, #4]
 800be8c:	60a6      	str	r6, [r4, #8]
 800be8e:	2e00      	cmp	r6, #0
 800be90:	bfa2      	ittt	ge
 800be92:	6821      	ldrge	r1, [r4, #0]
 800be94:	f021 0104 	bicge.w	r1, r1, #4
 800be98:	6021      	strge	r1, [r4, #0]
 800be9a:	b90d      	cbnz	r5, 800bea0 <_printf_i+0x110>
 800be9c:	2e00      	cmp	r6, #0
 800be9e:	d04b      	beq.n	800bf38 <_printf_i+0x1a8>
 800bea0:	4616      	mov	r6, r2
 800bea2:	fbb5 f1f3 	udiv	r1, r5, r3
 800bea6:	fb03 5711 	mls	r7, r3, r1, r5
 800beaa:	5dc7      	ldrb	r7, [r0, r7]
 800beac:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800beb0:	462f      	mov	r7, r5
 800beb2:	42bb      	cmp	r3, r7
 800beb4:	460d      	mov	r5, r1
 800beb6:	d9f4      	bls.n	800bea2 <_printf_i+0x112>
 800beb8:	2b08      	cmp	r3, #8
 800beba:	d10b      	bne.n	800bed4 <_printf_i+0x144>
 800bebc:	6823      	ldr	r3, [r4, #0]
 800bebe:	07df      	lsls	r7, r3, #31
 800bec0:	d508      	bpl.n	800bed4 <_printf_i+0x144>
 800bec2:	6923      	ldr	r3, [r4, #16]
 800bec4:	6861      	ldr	r1, [r4, #4]
 800bec6:	4299      	cmp	r1, r3
 800bec8:	bfde      	ittt	le
 800beca:	2330      	movle	r3, #48	@ 0x30
 800becc:	f806 3c01 	strble.w	r3, [r6, #-1]
 800bed0:	f106 36ff 	addle.w	r6, r6, #4294967295
 800bed4:	1b92      	subs	r2, r2, r6
 800bed6:	6122      	str	r2, [r4, #16]
 800bed8:	f8cd a000 	str.w	sl, [sp]
 800bedc:	464b      	mov	r3, r9
 800bede:	aa03      	add	r2, sp, #12
 800bee0:	4621      	mov	r1, r4
 800bee2:	4640      	mov	r0, r8
 800bee4:	f7ff fee6 	bl	800bcb4 <_printf_common>
 800bee8:	3001      	adds	r0, #1
 800beea:	d14a      	bne.n	800bf82 <_printf_i+0x1f2>
 800beec:	f04f 30ff 	mov.w	r0, #4294967295
 800bef0:	b004      	add	sp, #16
 800bef2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bef6:	6823      	ldr	r3, [r4, #0]
 800bef8:	f043 0320 	orr.w	r3, r3, #32
 800befc:	6023      	str	r3, [r4, #0]
 800befe:	4833      	ldr	r0, [pc, #204]	@ (800bfcc <_printf_i+0x23c>)
 800bf00:	2778      	movs	r7, #120	@ 0x78
 800bf02:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800bf06:	6823      	ldr	r3, [r4, #0]
 800bf08:	6831      	ldr	r1, [r6, #0]
 800bf0a:	061f      	lsls	r7, r3, #24
 800bf0c:	f851 5b04 	ldr.w	r5, [r1], #4
 800bf10:	d402      	bmi.n	800bf18 <_printf_i+0x188>
 800bf12:	065f      	lsls	r7, r3, #25
 800bf14:	bf48      	it	mi
 800bf16:	b2ad      	uxthmi	r5, r5
 800bf18:	6031      	str	r1, [r6, #0]
 800bf1a:	07d9      	lsls	r1, r3, #31
 800bf1c:	bf44      	itt	mi
 800bf1e:	f043 0320 	orrmi.w	r3, r3, #32
 800bf22:	6023      	strmi	r3, [r4, #0]
 800bf24:	b11d      	cbz	r5, 800bf2e <_printf_i+0x19e>
 800bf26:	2310      	movs	r3, #16
 800bf28:	e7ac      	b.n	800be84 <_printf_i+0xf4>
 800bf2a:	4827      	ldr	r0, [pc, #156]	@ (800bfc8 <_printf_i+0x238>)
 800bf2c:	e7e9      	b.n	800bf02 <_printf_i+0x172>
 800bf2e:	6823      	ldr	r3, [r4, #0]
 800bf30:	f023 0320 	bic.w	r3, r3, #32
 800bf34:	6023      	str	r3, [r4, #0]
 800bf36:	e7f6      	b.n	800bf26 <_printf_i+0x196>
 800bf38:	4616      	mov	r6, r2
 800bf3a:	e7bd      	b.n	800beb8 <_printf_i+0x128>
 800bf3c:	6833      	ldr	r3, [r6, #0]
 800bf3e:	6825      	ldr	r5, [r4, #0]
 800bf40:	6961      	ldr	r1, [r4, #20]
 800bf42:	1d18      	adds	r0, r3, #4
 800bf44:	6030      	str	r0, [r6, #0]
 800bf46:	062e      	lsls	r6, r5, #24
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	d501      	bpl.n	800bf50 <_printf_i+0x1c0>
 800bf4c:	6019      	str	r1, [r3, #0]
 800bf4e:	e002      	b.n	800bf56 <_printf_i+0x1c6>
 800bf50:	0668      	lsls	r0, r5, #25
 800bf52:	d5fb      	bpl.n	800bf4c <_printf_i+0x1bc>
 800bf54:	8019      	strh	r1, [r3, #0]
 800bf56:	2300      	movs	r3, #0
 800bf58:	6123      	str	r3, [r4, #16]
 800bf5a:	4616      	mov	r6, r2
 800bf5c:	e7bc      	b.n	800bed8 <_printf_i+0x148>
 800bf5e:	6833      	ldr	r3, [r6, #0]
 800bf60:	1d1a      	adds	r2, r3, #4
 800bf62:	6032      	str	r2, [r6, #0]
 800bf64:	681e      	ldr	r6, [r3, #0]
 800bf66:	6862      	ldr	r2, [r4, #4]
 800bf68:	2100      	movs	r1, #0
 800bf6a:	4630      	mov	r0, r6
 800bf6c:	f7f4 f948 	bl	8000200 <memchr>
 800bf70:	b108      	cbz	r0, 800bf76 <_printf_i+0x1e6>
 800bf72:	1b80      	subs	r0, r0, r6
 800bf74:	6060      	str	r0, [r4, #4]
 800bf76:	6863      	ldr	r3, [r4, #4]
 800bf78:	6123      	str	r3, [r4, #16]
 800bf7a:	2300      	movs	r3, #0
 800bf7c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bf80:	e7aa      	b.n	800bed8 <_printf_i+0x148>
 800bf82:	6923      	ldr	r3, [r4, #16]
 800bf84:	4632      	mov	r2, r6
 800bf86:	4649      	mov	r1, r9
 800bf88:	4640      	mov	r0, r8
 800bf8a:	47d0      	blx	sl
 800bf8c:	3001      	adds	r0, #1
 800bf8e:	d0ad      	beq.n	800beec <_printf_i+0x15c>
 800bf90:	6823      	ldr	r3, [r4, #0]
 800bf92:	079b      	lsls	r3, r3, #30
 800bf94:	d413      	bmi.n	800bfbe <_printf_i+0x22e>
 800bf96:	68e0      	ldr	r0, [r4, #12]
 800bf98:	9b03      	ldr	r3, [sp, #12]
 800bf9a:	4298      	cmp	r0, r3
 800bf9c:	bfb8      	it	lt
 800bf9e:	4618      	movlt	r0, r3
 800bfa0:	e7a6      	b.n	800bef0 <_printf_i+0x160>
 800bfa2:	2301      	movs	r3, #1
 800bfa4:	4632      	mov	r2, r6
 800bfa6:	4649      	mov	r1, r9
 800bfa8:	4640      	mov	r0, r8
 800bfaa:	47d0      	blx	sl
 800bfac:	3001      	adds	r0, #1
 800bfae:	d09d      	beq.n	800beec <_printf_i+0x15c>
 800bfb0:	3501      	adds	r5, #1
 800bfb2:	68e3      	ldr	r3, [r4, #12]
 800bfb4:	9903      	ldr	r1, [sp, #12]
 800bfb6:	1a5b      	subs	r3, r3, r1
 800bfb8:	42ab      	cmp	r3, r5
 800bfba:	dcf2      	bgt.n	800bfa2 <_printf_i+0x212>
 800bfbc:	e7eb      	b.n	800bf96 <_printf_i+0x206>
 800bfbe:	2500      	movs	r5, #0
 800bfc0:	f104 0619 	add.w	r6, r4, #25
 800bfc4:	e7f5      	b.n	800bfb2 <_printf_i+0x222>
 800bfc6:	bf00      	nop
 800bfc8:	0800cf51 	.word	0x0800cf51
 800bfcc:	0800cf62 	.word	0x0800cf62

0800bfd0 <__sflush_r>:
 800bfd0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bfd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bfd8:	0716      	lsls	r6, r2, #28
 800bfda:	4605      	mov	r5, r0
 800bfdc:	460c      	mov	r4, r1
 800bfde:	d454      	bmi.n	800c08a <__sflush_r+0xba>
 800bfe0:	684b      	ldr	r3, [r1, #4]
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	dc02      	bgt.n	800bfec <__sflush_r+0x1c>
 800bfe6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	dd48      	ble.n	800c07e <__sflush_r+0xae>
 800bfec:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bfee:	2e00      	cmp	r6, #0
 800bff0:	d045      	beq.n	800c07e <__sflush_r+0xae>
 800bff2:	2300      	movs	r3, #0
 800bff4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800bff8:	682f      	ldr	r7, [r5, #0]
 800bffa:	6a21      	ldr	r1, [r4, #32]
 800bffc:	602b      	str	r3, [r5, #0]
 800bffe:	d030      	beq.n	800c062 <__sflush_r+0x92>
 800c000:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c002:	89a3      	ldrh	r3, [r4, #12]
 800c004:	0759      	lsls	r1, r3, #29
 800c006:	d505      	bpl.n	800c014 <__sflush_r+0x44>
 800c008:	6863      	ldr	r3, [r4, #4]
 800c00a:	1ad2      	subs	r2, r2, r3
 800c00c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c00e:	b10b      	cbz	r3, 800c014 <__sflush_r+0x44>
 800c010:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c012:	1ad2      	subs	r2, r2, r3
 800c014:	2300      	movs	r3, #0
 800c016:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c018:	6a21      	ldr	r1, [r4, #32]
 800c01a:	4628      	mov	r0, r5
 800c01c:	47b0      	blx	r6
 800c01e:	1c43      	adds	r3, r0, #1
 800c020:	89a3      	ldrh	r3, [r4, #12]
 800c022:	d106      	bne.n	800c032 <__sflush_r+0x62>
 800c024:	6829      	ldr	r1, [r5, #0]
 800c026:	291d      	cmp	r1, #29
 800c028:	d82b      	bhi.n	800c082 <__sflush_r+0xb2>
 800c02a:	4a2a      	ldr	r2, [pc, #168]	@ (800c0d4 <__sflush_r+0x104>)
 800c02c:	410a      	asrs	r2, r1
 800c02e:	07d6      	lsls	r6, r2, #31
 800c030:	d427      	bmi.n	800c082 <__sflush_r+0xb2>
 800c032:	2200      	movs	r2, #0
 800c034:	6062      	str	r2, [r4, #4]
 800c036:	04d9      	lsls	r1, r3, #19
 800c038:	6922      	ldr	r2, [r4, #16]
 800c03a:	6022      	str	r2, [r4, #0]
 800c03c:	d504      	bpl.n	800c048 <__sflush_r+0x78>
 800c03e:	1c42      	adds	r2, r0, #1
 800c040:	d101      	bne.n	800c046 <__sflush_r+0x76>
 800c042:	682b      	ldr	r3, [r5, #0]
 800c044:	b903      	cbnz	r3, 800c048 <__sflush_r+0x78>
 800c046:	6560      	str	r0, [r4, #84]	@ 0x54
 800c048:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c04a:	602f      	str	r7, [r5, #0]
 800c04c:	b1b9      	cbz	r1, 800c07e <__sflush_r+0xae>
 800c04e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c052:	4299      	cmp	r1, r3
 800c054:	d002      	beq.n	800c05c <__sflush_r+0x8c>
 800c056:	4628      	mov	r0, r5
 800c058:	f7fe fbd2 	bl	800a800 <_free_r>
 800c05c:	2300      	movs	r3, #0
 800c05e:	6363      	str	r3, [r4, #52]	@ 0x34
 800c060:	e00d      	b.n	800c07e <__sflush_r+0xae>
 800c062:	2301      	movs	r3, #1
 800c064:	4628      	mov	r0, r5
 800c066:	47b0      	blx	r6
 800c068:	4602      	mov	r2, r0
 800c06a:	1c50      	adds	r0, r2, #1
 800c06c:	d1c9      	bne.n	800c002 <__sflush_r+0x32>
 800c06e:	682b      	ldr	r3, [r5, #0]
 800c070:	2b00      	cmp	r3, #0
 800c072:	d0c6      	beq.n	800c002 <__sflush_r+0x32>
 800c074:	2b1d      	cmp	r3, #29
 800c076:	d001      	beq.n	800c07c <__sflush_r+0xac>
 800c078:	2b16      	cmp	r3, #22
 800c07a:	d11e      	bne.n	800c0ba <__sflush_r+0xea>
 800c07c:	602f      	str	r7, [r5, #0]
 800c07e:	2000      	movs	r0, #0
 800c080:	e022      	b.n	800c0c8 <__sflush_r+0xf8>
 800c082:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c086:	b21b      	sxth	r3, r3
 800c088:	e01b      	b.n	800c0c2 <__sflush_r+0xf2>
 800c08a:	690f      	ldr	r7, [r1, #16]
 800c08c:	2f00      	cmp	r7, #0
 800c08e:	d0f6      	beq.n	800c07e <__sflush_r+0xae>
 800c090:	0793      	lsls	r3, r2, #30
 800c092:	680e      	ldr	r6, [r1, #0]
 800c094:	bf08      	it	eq
 800c096:	694b      	ldreq	r3, [r1, #20]
 800c098:	600f      	str	r7, [r1, #0]
 800c09a:	bf18      	it	ne
 800c09c:	2300      	movne	r3, #0
 800c09e:	eba6 0807 	sub.w	r8, r6, r7
 800c0a2:	608b      	str	r3, [r1, #8]
 800c0a4:	f1b8 0f00 	cmp.w	r8, #0
 800c0a8:	dde9      	ble.n	800c07e <__sflush_r+0xae>
 800c0aa:	6a21      	ldr	r1, [r4, #32]
 800c0ac:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c0ae:	4643      	mov	r3, r8
 800c0b0:	463a      	mov	r2, r7
 800c0b2:	4628      	mov	r0, r5
 800c0b4:	47b0      	blx	r6
 800c0b6:	2800      	cmp	r0, #0
 800c0b8:	dc08      	bgt.n	800c0cc <__sflush_r+0xfc>
 800c0ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c0be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c0c2:	81a3      	strh	r3, [r4, #12]
 800c0c4:	f04f 30ff 	mov.w	r0, #4294967295
 800c0c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c0cc:	4407      	add	r7, r0
 800c0ce:	eba8 0800 	sub.w	r8, r8, r0
 800c0d2:	e7e7      	b.n	800c0a4 <__sflush_r+0xd4>
 800c0d4:	dfbffffe 	.word	0xdfbffffe

0800c0d8 <_fflush_r>:
 800c0d8:	b538      	push	{r3, r4, r5, lr}
 800c0da:	690b      	ldr	r3, [r1, #16]
 800c0dc:	4605      	mov	r5, r0
 800c0de:	460c      	mov	r4, r1
 800c0e0:	b913      	cbnz	r3, 800c0e8 <_fflush_r+0x10>
 800c0e2:	2500      	movs	r5, #0
 800c0e4:	4628      	mov	r0, r5
 800c0e6:	bd38      	pop	{r3, r4, r5, pc}
 800c0e8:	b118      	cbz	r0, 800c0f2 <_fflush_r+0x1a>
 800c0ea:	6a03      	ldr	r3, [r0, #32]
 800c0ec:	b90b      	cbnz	r3, 800c0f2 <_fflush_r+0x1a>
 800c0ee:	f7fe fa1b 	bl	800a528 <__sinit>
 800c0f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d0f3      	beq.n	800c0e2 <_fflush_r+0xa>
 800c0fa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c0fc:	07d0      	lsls	r0, r2, #31
 800c0fe:	d404      	bmi.n	800c10a <_fflush_r+0x32>
 800c100:	0599      	lsls	r1, r3, #22
 800c102:	d402      	bmi.n	800c10a <_fflush_r+0x32>
 800c104:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c106:	f7fe fb60 	bl	800a7ca <__retarget_lock_acquire_recursive>
 800c10a:	4628      	mov	r0, r5
 800c10c:	4621      	mov	r1, r4
 800c10e:	f7ff ff5f 	bl	800bfd0 <__sflush_r>
 800c112:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c114:	07da      	lsls	r2, r3, #31
 800c116:	4605      	mov	r5, r0
 800c118:	d4e4      	bmi.n	800c0e4 <_fflush_r+0xc>
 800c11a:	89a3      	ldrh	r3, [r4, #12]
 800c11c:	059b      	lsls	r3, r3, #22
 800c11e:	d4e1      	bmi.n	800c0e4 <_fflush_r+0xc>
 800c120:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c122:	f7fe fb53 	bl	800a7cc <__retarget_lock_release_recursive>
 800c126:	e7dd      	b.n	800c0e4 <_fflush_r+0xc>

0800c128 <memmove>:
 800c128:	4288      	cmp	r0, r1
 800c12a:	b510      	push	{r4, lr}
 800c12c:	eb01 0402 	add.w	r4, r1, r2
 800c130:	d902      	bls.n	800c138 <memmove+0x10>
 800c132:	4284      	cmp	r4, r0
 800c134:	4623      	mov	r3, r4
 800c136:	d807      	bhi.n	800c148 <memmove+0x20>
 800c138:	1e43      	subs	r3, r0, #1
 800c13a:	42a1      	cmp	r1, r4
 800c13c:	d008      	beq.n	800c150 <memmove+0x28>
 800c13e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c142:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c146:	e7f8      	b.n	800c13a <memmove+0x12>
 800c148:	4402      	add	r2, r0
 800c14a:	4601      	mov	r1, r0
 800c14c:	428a      	cmp	r2, r1
 800c14e:	d100      	bne.n	800c152 <memmove+0x2a>
 800c150:	bd10      	pop	{r4, pc}
 800c152:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c156:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c15a:	e7f7      	b.n	800c14c <memmove+0x24>

0800c15c <_sbrk_r>:
 800c15c:	b538      	push	{r3, r4, r5, lr}
 800c15e:	4d06      	ldr	r5, [pc, #24]	@ (800c178 <_sbrk_r+0x1c>)
 800c160:	2300      	movs	r3, #0
 800c162:	4604      	mov	r4, r0
 800c164:	4608      	mov	r0, r1
 800c166:	602b      	str	r3, [r5, #0]
 800c168:	f7f6 f876 	bl	8002258 <_sbrk>
 800c16c:	1c43      	adds	r3, r0, #1
 800c16e:	d102      	bne.n	800c176 <_sbrk_r+0x1a>
 800c170:	682b      	ldr	r3, [r5, #0]
 800c172:	b103      	cbz	r3, 800c176 <_sbrk_r+0x1a>
 800c174:	6023      	str	r3, [r4, #0]
 800c176:	bd38      	pop	{r3, r4, r5, pc}
 800c178:	200006e0 	.word	0x200006e0

0800c17c <__assert_func>:
 800c17c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c17e:	4614      	mov	r4, r2
 800c180:	461a      	mov	r2, r3
 800c182:	4b09      	ldr	r3, [pc, #36]	@ (800c1a8 <__assert_func+0x2c>)
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	4605      	mov	r5, r0
 800c188:	68d8      	ldr	r0, [r3, #12]
 800c18a:	b954      	cbnz	r4, 800c1a2 <__assert_func+0x26>
 800c18c:	4b07      	ldr	r3, [pc, #28]	@ (800c1ac <__assert_func+0x30>)
 800c18e:	461c      	mov	r4, r3
 800c190:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c194:	9100      	str	r1, [sp, #0]
 800c196:	462b      	mov	r3, r5
 800c198:	4905      	ldr	r1, [pc, #20]	@ (800c1b0 <__assert_func+0x34>)
 800c19a:	f000 f857 	bl	800c24c <fiprintf>
 800c19e:	f000 f867 	bl	800c270 <abort>
 800c1a2:	4b04      	ldr	r3, [pc, #16]	@ (800c1b4 <__assert_func+0x38>)
 800c1a4:	e7f4      	b.n	800c190 <__assert_func+0x14>
 800c1a6:	bf00      	nop
 800c1a8:	200001a4 	.word	0x200001a4
 800c1ac:	0800cfae 	.word	0x0800cfae
 800c1b0:	0800cf80 	.word	0x0800cf80
 800c1b4:	0800cf73 	.word	0x0800cf73

0800c1b8 <_calloc_r>:
 800c1b8:	b570      	push	{r4, r5, r6, lr}
 800c1ba:	fba1 5402 	umull	r5, r4, r1, r2
 800c1be:	b93c      	cbnz	r4, 800c1d0 <_calloc_r+0x18>
 800c1c0:	4629      	mov	r1, r5
 800c1c2:	f7fe fec3 	bl	800af4c <_malloc_r>
 800c1c6:	4606      	mov	r6, r0
 800c1c8:	b928      	cbnz	r0, 800c1d6 <_calloc_r+0x1e>
 800c1ca:	2600      	movs	r6, #0
 800c1cc:	4630      	mov	r0, r6
 800c1ce:	bd70      	pop	{r4, r5, r6, pc}
 800c1d0:	220c      	movs	r2, #12
 800c1d2:	6002      	str	r2, [r0, #0]
 800c1d4:	e7f9      	b.n	800c1ca <_calloc_r+0x12>
 800c1d6:	462a      	mov	r2, r5
 800c1d8:	4621      	mov	r1, r4
 800c1da:	f7fe fa57 	bl	800a68c <memset>
 800c1de:	e7f5      	b.n	800c1cc <_calloc_r+0x14>

0800c1e0 <malloc>:
 800c1e0:	4b02      	ldr	r3, [pc, #8]	@ (800c1ec <malloc+0xc>)
 800c1e2:	4601      	mov	r1, r0
 800c1e4:	6818      	ldr	r0, [r3, #0]
 800c1e6:	f7fe beb1 	b.w	800af4c <_malloc_r>
 800c1ea:	bf00      	nop
 800c1ec:	200001a4 	.word	0x200001a4

0800c1f0 <_realloc_r>:
 800c1f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c1f4:	4680      	mov	r8, r0
 800c1f6:	4615      	mov	r5, r2
 800c1f8:	460c      	mov	r4, r1
 800c1fa:	b921      	cbnz	r1, 800c206 <_realloc_r+0x16>
 800c1fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c200:	4611      	mov	r1, r2
 800c202:	f7fe bea3 	b.w	800af4c <_malloc_r>
 800c206:	b92a      	cbnz	r2, 800c214 <_realloc_r+0x24>
 800c208:	f7fe fafa 	bl	800a800 <_free_r>
 800c20c:	2400      	movs	r4, #0
 800c20e:	4620      	mov	r0, r4
 800c210:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c214:	f000 f833 	bl	800c27e <_malloc_usable_size_r>
 800c218:	4285      	cmp	r5, r0
 800c21a:	4606      	mov	r6, r0
 800c21c:	d802      	bhi.n	800c224 <_realloc_r+0x34>
 800c21e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800c222:	d8f4      	bhi.n	800c20e <_realloc_r+0x1e>
 800c224:	4629      	mov	r1, r5
 800c226:	4640      	mov	r0, r8
 800c228:	f7fe fe90 	bl	800af4c <_malloc_r>
 800c22c:	4607      	mov	r7, r0
 800c22e:	2800      	cmp	r0, #0
 800c230:	d0ec      	beq.n	800c20c <_realloc_r+0x1c>
 800c232:	42b5      	cmp	r5, r6
 800c234:	462a      	mov	r2, r5
 800c236:	4621      	mov	r1, r4
 800c238:	bf28      	it	cs
 800c23a:	4632      	movcs	r2, r6
 800c23c:	f7fe fac7 	bl	800a7ce <memcpy>
 800c240:	4621      	mov	r1, r4
 800c242:	4640      	mov	r0, r8
 800c244:	f7fe fadc 	bl	800a800 <_free_r>
 800c248:	463c      	mov	r4, r7
 800c24a:	e7e0      	b.n	800c20e <_realloc_r+0x1e>

0800c24c <fiprintf>:
 800c24c:	b40e      	push	{r1, r2, r3}
 800c24e:	b503      	push	{r0, r1, lr}
 800c250:	4601      	mov	r1, r0
 800c252:	ab03      	add	r3, sp, #12
 800c254:	4805      	ldr	r0, [pc, #20]	@ (800c26c <fiprintf+0x20>)
 800c256:	f853 2b04 	ldr.w	r2, [r3], #4
 800c25a:	6800      	ldr	r0, [r0, #0]
 800c25c:	9301      	str	r3, [sp, #4]
 800c25e:	f000 f83f 	bl	800c2e0 <_vfiprintf_r>
 800c262:	b002      	add	sp, #8
 800c264:	f85d eb04 	ldr.w	lr, [sp], #4
 800c268:	b003      	add	sp, #12
 800c26a:	4770      	bx	lr
 800c26c:	200001a4 	.word	0x200001a4

0800c270 <abort>:
 800c270:	b508      	push	{r3, lr}
 800c272:	2006      	movs	r0, #6
 800c274:	f000 fa08 	bl	800c688 <raise>
 800c278:	2001      	movs	r0, #1
 800c27a:	f7f5 ff75 	bl	8002168 <_exit>

0800c27e <_malloc_usable_size_r>:
 800c27e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c282:	1f18      	subs	r0, r3, #4
 800c284:	2b00      	cmp	r3, #0
 800c286:	bfbc      	itt	lt
 800c288:	580b      	ldrlt	r3, [r1, r0]
 800c28a:	18c0      	addlt	r0, r0, r3
 800c28c:	4770      	bx	lr

0800c28e <__sfputc_r>:
 800c28e:	6893      	ldr	r3, [r2, #8]
 800c290:	3b01      	subs	r3, #1
 800c292:	2b00      	cmp	r3, #0
 800c294:	b410      	push	{r4}
 800c296:	6093      	str	r3, [r2, #8]
 800c298:	da08      	bge.n	800c2ac <__sfputc_r+0x1e>
 800c29a:	6994      	ldr	r4, [r2, #24]
 800c29c:	42a3      	cmp	r3, r4
 800c29e:	db01      	blt.n	800c2a4 <__sfputc_r+0x16>
 800c2a0:	290a      	cmp	r1, #10
 800c2a2:	d103      	bne.n	800c2ac <__sfputc_r+0x1e>
 800c2a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c2a8:	f000 b932 	b.w	800c510 <__swbuf_r>
 800c2ac:	6813      	ldr	r3, [r2, #0]
 800c2ae:	1c58      	adds	r0, r3, #1
 800c2b0:	6010      	str	r0, [r2, #0]
 800c2b2:	7019      	strb	r1, [r3, #0]
 800c2b4:	4608      	mov	r0, r1
 800c2b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c2ba:	4770      	bx	lr

0800c2bc <__sfputs_r>:
 800c2bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2be:	4606      	mov	r6, r0
 800c2c0:	460f      	mov	r7, r1
 800c2c2:	4614      	mov	r4, r2
 800c2c4:	18d5      	adds	r5, r2, r3
 800c2c6:	42ac      	cmp	r4, r5
 800c2c8:	d101      	bne.n	800c2ce <__sfputs_r+0x12>
 800c2ca:	2000      	movs	r0, #0
 800c2cc:	e007      	b.n	800c2de <__sfputs_r+0x22>
 800c2ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c2d2:	463a      	mov	r2, r7
 800c2d4:	4630      	mov	r0, r6
 800c2d6:	f7ff ffda 	bl	800c28e <__sfputc_r>
 800c2da:	1c43      	adds	r3, r0, #1
 800c2dc:	d1f3      	bne.n	800c2c6 <__sfputs_r+0xa>
 800c2de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c2e0 <_vfiprintf_r>:
 800c2e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2e4:	460d      	mov	r5, r1
 800c2e6:	b09d      	sub	sp, #116	@ 0x74
 800c2e8:	4614      	mov	r4, r2
 800c2ea:	4698      	mov	r8, r3
 800c2ec:	4606      	mov	r6, r0
 800c2ee:	b118      	cbz	r0, 800c2f8 <_vfiprintf_r+0x18>
 800c2f0:	6a03      	ldr	r3, [r0, #32]
 800c2f2:	b90b      	cbnz	r3, 800c2f8 <_vfiprintf_r+0x18>
 800c2f4:	f7fe f918 	bl	800a528 <__sinit>
 800c2f8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c2fa:	07d9      	lsls	r1, r3, #31
 800c2fc:	d405      	bmi.n	800c30a <_vfiprintf_r+0x2a>
 800c2fe:	89ab      	ldrh	r3, [r5, #12]
 800c300:	059a      	lsls	r2, r3, #22
 800c302:	d402      	bmi.n	800c30a <_vfiprintf_r+0x2a>
 800c304:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c306:	f7fe fa60 	bl	800a7ca <__retarget_lock_acquire_recursive>
 800c30a:	89ab      	ldrh	r3, [r5, #12]
 800c30c:	071b      	lsls	r3, r3, #28
 800c30e:	d501      	bpl.n	800c314 <_vfiprintf_r+0x34>
 800c310:	692b      	ldr	r3, [r5, #16]
 800c312:	b99b      	cbnz	r3, 800c33c <_vfiprintf_r+0x5c>
 800c314:	4629      	mov	r1, r5
 800c316:	4630      	mov	r0, r6
 800c318:	f000 f938 	bl	800c58c <__swsetup_r>
 800c31c:	b170      	cbz	r0, 800c33c <_vfiprintf_r+0x5c>
 800c31e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c320:	07dc      	lsls	r4, r3, #31
 800c322:	d504      	bpl.n	800c32e <_vfiprintf_r+0x4e>
 800c324:	f04f 30ff 	mov.w	r0, #4294967295
 800c328:	b01d      	add	sp, #116	@ 0x74
 800c32a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c32e:	89ab      	ldrh	r3, [r5, #12]
 800c330:	0598      	lsls	r0, r3, #22
 800c332:	d4f7      	bmi.n	800c324 <_vfiprintf_r+0x44>
 800c334:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c336:	f7fe fa49 	bl	800a7cc <__retarget_lock_release_recursive>
 800c33a:	e7f3      	b.n	800c324 <_vfiprintf_r+0x44>
 800c33c:	2300      	movs	r3, #0
 800c33e:	9309      	str	r3, [sp, #36]	@ 0x24
 800c340:	2320      	movs	r3, #32
 800c342:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c346:	f8cd 800c 	str.w	r8, [sp, #12]
 800c34a:	2330      	movs	r3, #48	@ 0x30
 800c34c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800c4fc <_vfiprintf_r+0x21c>
 800c350:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c354:	f04f 0901 	mov.w	r9, #1
 800c358:	4623      	mov	r3, r4
 800c35a:	469a      	mov	sl, r3
 800c35c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c360:	b10a      	cbz	r2, 800c366 <_vfiprintf_r+0x86>
 800c362:	2a25      	cmp	r2, #37	@ 0x25
 800c364:	d1f9      	bne.n	800c35a <_vfiprintf_r+0x7a>
 800c366:	ebba 0b04 	subs.w	fp, sl, r4
 800c36a:	d00b      	beq.n	800c384 <_vfiprintf_r+0xa4>
 800c36c:	465b      	mov	r3, fp
 800c36e:	4622      	mov	r2, r4
 800c370:	4629      	mov	r1, r5
 800c372:	4630      	mov	r0, r6
 800c374:	f7ff ffa2 	bl	800c2bc <__sfputs_r>
 800c378:	3001      	adds	r0, #1
 800c37a:	f000 80a7 	beq.w	800c4cc <_vfiprintf_r+0x1ec>
 800c37e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c380:	445a      	add	r2, fp
 800c382:	9209      	str	r2, [sp, #36]	@ 0x24
 800c384:	f89a 3000 	ldrb.w	r3, [sl]
 800c388:	2b00      	cmp	r3, #0
 800c38a:	f000 809f 	beq.w	800c4cc <_vfiprintf_r+0x1ec>
 800c38e:	2300      	movs	r3, #0
 800c390:	f04f 32ff 	mov.w	r2, #4294967295
 800c394:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c398:	f10a 0a01 	add.w	sl, sl, #1
 800c39c:	9304      	str	r3, [sp, #16]
 800c39e:	9307      	str	r3, [sp, #28]
 800c3a0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c3a4:	931a      	str	r3, [sp, #104]	@ 0x68
 800c3a6:	4654      	mov	r4, sl
 800c3a8:	2205      	movs	r2, #5
 800c3aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c3ae:	4853      	ldr	r0, [pc, #332]	@ (800c4fc <_vfiprintf_r+0x21c>)
 800c3b0:	f7f3 ff26 	bl	8000200 <memchr>
 800c3b4:	9a04      	ldr	r2, [sp, #16]
 800c3b6:	b9d8      	cbnz	r0, 800c3f0 <_vfiprintf_r+0x110>
 800c3b8:	06d1      	lsls	r1, r2, #27
 800c3ba:	bf44      	itt	mi
 800c3bc:	2320      	movmi	r3, #32
 800c3be:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c3c2:	0713      	lsls	r3, r2, #28
 800c3c4:	bf44      	itt	mi
 800c3c6:	232b      	movmi	r3, #43	@ 0x2b
 800c3c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c3cc:	f89a 3000 	ldrb.w	r3, [sl]
 800c3d0:	2b2a      	cmp	r3, #42	@ 0x2a
 800c3d2:	d015      	beq.n	800c400 <_vfiprintf_r+0x120>
 800c3d4:	9a07      	ldr	r2, [sp, #28]
 800c3d6:	4654      	mov	r4, sl
 800c3d8:	2000      	movs	r0, #0
 800c3da:	f04f 0c0a 	mov.w	ip, #10
 800c3de:	4621      	mov	r1, r4
 800c3e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c3e4:	3b30      	subs	r3, #48	@ 0x30
 800c3e6:	2b09      	cmp	r3, #9
 800c3e8:	d94b      	bls.n	800c482 <_vfiprintf_r+0x1a2>
 800c3ea:	b1b0      	cbz	r0, 800c41a <_vfiprintf_r+0x13a>
 800c3ec:	9207      	str	r2, [sp, #28]
 800c3ee:	e014      	b.n	800c41a <_vfiprintf_r+0x13a>
 800c3f0:	eba0 0308 	sub.w	r3, r0, r8
 800c3f4:	fa09 f303 	lsl.w	r3, r9, r3
 800c3f8:	4313      	orrs	r3, r2
 800c3fa:	9304      	str	r3, [sp, #16]
 800c3fc:	46a2      	mov	sl, r4
 800c3fe:	e7d2      	b.n	800c3a6 <_vfiprintf_r+0xc6>
 800c400:	9b03      	ldr	r3, [sp, #12]
 800c402:	1d19      	adds	r1, r3, #4
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	9103      	str	r1, [sp, #12]
 800c408:	2b00      	cmp	r3, #0
 800c40a:	bfbb      	ittet	lt
 800c40c:	425b      	neglt	r3, r3
 800c40e:	f042 0202 	orrlt.w	r2, r2, #2
 800c412:	9307      	strge	r3, [sp, #28]
 800c414:	9307      	strlt	r3, [sp, #28]
 800c416:	bfb8      	it	lt
 800c418:	9204      	strlt	r2, [sp, #16]
 800c41a:	7823      	ldrb	r3, [r4, #0]
 800c41c:	2b2e      	cmp	r3, #46	@ 0x2e
 800c41e:	d10a      	bne.n	800c436 <_vfiprintf_r+0x156>
 800c420:	7863      	ldrb	r3, [r4, #1]
 800c422:	2b2a      	cmp	r3, #42	@ 0x2a
 800c424:	d132      	bne.n	800c48c <_vfiprintf_r+0x1ac>
 800c426:	9b03      	ldr	r3, [sp, #12]
 800c428:	1d1a      	adds	r2, r3, #4
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	9203      	str	r2, [sp, #12]
 800c42e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c432:	3402      	adds	r4, #2
 800c434:	9305      	str	r3, [sp, #20]
 800c436:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c50c <_vfiprintf_r+0x22c>
 800c43a:	7821      	ldrb	r1, [r4, #0]
 800c43c:	2203      	movs	r2, #3
 800c43e:	4650      	mov	r0, sl
 800c440:	f7f3 fede 	bl	8000200 <memchr>
 800c444:	b138      	cbz	r0, 800c456 <_vfiprintf_r+0x176>
 800c446:	9b04      	ldr	r3, [sp, #16]
 800c448:	eba0 000a 	sub.w	r0, r0, sl
 800c44c:	2240      	movs	r2, #64	@ 0x40
 800c44e:	4082      	lsls	r2, r0
 800c450:	4313      	orrs	r3, r2
 800c452:	3401      	adds	r4, #1
 800c454:	9304      	str	r3, [sp, #16]
 800c456:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c45a:	4829      	ldr	r0, [pc, #164]	@ (800c500 <_vfiprintf_r+0x220>)
 800c45c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c460:	2206      	movs	r2, #6
 800c462:	f7f3 fecd 	bl	8000200 <memchr>
 800c466:	2800      	cmp	r0, #0
 800c468:	d03f      	beq.n	800c4ea <_vfiprintf_r+0x20a>
 800c46a:	4b26      	ldr	r3, [pc, #152]	@ (800c504 <_vfiprintf_r+0x224>)
 800c46c:	bb1b      	cbnz	r3, 800c4b6 <_vfiprintf_r+0x1d6>
 800c46e:	9b03      	ldr	r3, [sp, #12]
 800c470:	3307      	adds	r3, #7
 800c472:	f023 0307 	bic.w	r3, r3, #7
 800c476:	3308      	adds	r3, #8
 800c478:	9303      	str	r3, [sp, #12]
 800c47a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c47c:	443b      	add	r3, r7
 800c47e:	9309      	str	r3, [sp, #36]	@ 0x24
 800c480:	e76a      	b.n	800c358 <_vfiprintf_r+0x78>
 800c482:	fb0c 3202 	mla	r2, ip, r2, r3
 800c486:	460c      	mov	r4, r1
 800c488:	2001      	movs	r0, #1
 800c48a:	e7a8      	b.n	800c3de <_vfiprintf_r+0xfe>
 800c48c:	2300      	movs	r3, #0
 800c48e:	3401      	adds	r4, #1
 800c490:	9305      	str	r3, [sp, #20]
 800c492:	4619      	mov	r1, r3
 800c494:	f04f 0c0a 	mov.w	ip, #10
 800c498:	4620      	mov	r0, r4
 800c49a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c49e:	3a30      	subs	r2, #48	@ 0x30
 800c4a0:	2a09      	cmp	r2, #9
 800c4a2:	d903      	bls.n	800c4ac <_vfiprintf_r+0x1cc>
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d0c6      	beq.n	800c436 <_vfiprintf_r+0x156>
 800c4a8:	9105      	str	r1, [sp, #20]
 800c4aa:	e7c4      	b.n	800c436 <_vfiprintf_r+0x156>
 800c4ac:	fb0c 2101 	mla	r1, ip, r1, r2
 800c4b0:	4604      	mov	r4, r0
 800c4b2:	2301      	movs	r3, #1
 800c4b4:	e7f0      	b.n	800c498 <_vfiprintf_r+0x1b8>
 800c4b6:	ab03      	add	r3, sp, #12
 800c4b8:	9300      	str	r3, [sp, #0]
 800c4ba:	462a      	mov	r2, r5
 800c4bc:	4b12      	ldr	r3, [pc, #72]	@ (800c508 <_vfiprintf_r+0x228>)
 800c4be:	a904      	add	r1, sp, #16
 800c4c0:	4630      	mov	r0, r6
 800c4c2:	f3af 8000 	nop.w
 800c4c6:	4607      	mov	r7, r0
 800c4c8:	1c78      	adds	r0, r7, #1
 800c4ca:	d1d6      	bne.n	800c47a <_vfiprintf_r+0x19a>
 800c4cc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c4ce:	07d9      	lsls	r1, r3, #31
 800c4d0:	d405      	bmi.n	800c4de <_vfiprintf_r+0x1fe>
 800c4d2:	89ab      	ldrh	r3, [r5, #12]
 800c4d4:	059a      	lsls	r2, r3, #22
 800c4d6:	d402      	bmi.n	800c4de <_vfiprintf_r+0x1fe>
 800c4d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c4da:	f7fe f977 	bl	800a7cc <__retarget_lock_release_recursive>
 800c4de:	89ab      	ldrh	r3, [r5, #12]
 800c4e0:	065b      	lsls	r3, r3, #25
 800c4e2:	f53f af1f 	bmi.w	800c324 <_vfiprintf_r+0x44>
 800c4e6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c4e8:	e71e      	b.n	800c328 <_vfiprintf_r+0x48>
 800c4ea:	ab03      	add	r3, sp, #12
 800c4ec:	9300      	str	r3, [sp, #0]
 800c4ee:	462a      	mov	r2, r5
 800c4f0:	4b05      	ldr	r3, [pc, #20]	@ (800c508 <_vfiprintf_r+0x228>)
 800c4f2:	a904      	add	r1, sp, #16
 800c4f4:	4630      	mov	r0, r6
 800c4f6:	f7ff fc4b 	bl	800bd90 <_printf_i>
 800c4fa:	e7e4      	b.n	800c4c6 <_vfiprintf_r+0x1e6>
 800c4fc:	0800cf40 	.word	0x0800cf40
 800c500:	0800cf4a 	.word	0x0800cf4a
 800c504:	00000000 	.word	0x00000000
 800c508:	0800c2bd 	.word	0x0800c2bd
 800c50c:	0800cf46 	.word	0x0800cf46

0800c510 <__swbuf_r>:
 800c510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c512:	460e      	mov	r6, r1
 800c514:	4614      	mov	r4, r2
 800c516:	4605      	mov	r5, r0
 800c518:	b118      	cbz	r0, 800c522 <__swbuf_r+0x12>
 800c51a:	6a03      	ldr	r3, [r0, #32]
 800c51c:	b90b      	cbnz	r3, 800c522 <__swbuf_r+0x12>
 800c51e:	f7fe f803 	bl	800a528 <__sinit>
 800c522:	69a3      	ldr	r3, [r4, #24]
 800c524:	60a3      	str	r3, [r4, #8]
 800c526:	89a3      	ldrh	r3, [r4, #12]
 800c528:	071a      	lsls	r2, r3, #28
 800c52a:	d501      	bpl.n	800c530 <__swbuf_r+0x20>
 800c52c:	6923      	ldr	r3, [r4, #16]
 800c52e:	b943      	cbnz	r3, 800c542 <__swbuf_r+0x32>
 800c530:	4621      	mov	r1, r4
 800c532:	4628      	mov	r0, r5
 800c534:	f000 f82a 	bl	800c58c <__swsetup_r>
 800c538:	b118      	cbz	r0, 800c542 <__swbuf_r+0x32>
 800c53a:	f04f 37ff 	mov.w	r7, #4294967295
 800c53e:	4638      	mov	r0, r7
 800c540:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c542:	6823      	ldr	r3, [r4, #0]
 800c544:	6922      	ldr	r2, [r4, #16]
 800c546:	1a98      	subs	r0, r3, r2
 800c548:	6963      	ldr	r3, [r4, #20]
 800c54a:	b2f6      	uxtb	r6, r6
 800c54c:	4283      	cmp	r3, r0
 800c54e:	4637      	mov	r7, r6
 800c550:	dc05      	bgt.n	800c55e <__swbuf_r+0x4e>
 800c552:	4621      	mov	r1, r4
 800c554:	4628      	mov	r0, r5
 800c556:	f7ff fdbf 	bl	800c0d8 <_fflush_r>
 800c55a:	2800      	cmp	r0, #0
 800c55c:	d1ed      	bne.n	800c53a <__swbuf_r+0x2a>
 800c55e:	68a3      	ldr	r3, [r4, #8]
 800c560:	3b01      	subs	r3, #1
 800c562:	60a3      	str	r3, [r4, #8]
 800c564:	6823      	ldr	r3, [r4, #0]
 800c566:	1c5a      	adds	r2, r3, #1
 800c568:	6022      	str	r2, [r4, #0]
 800c56a:	701e      	strb	r6, [r3, #0]
 800c56c:	6962      	ldr	r2, [r4, #20]
 800c56e:	1c43      	adds	r3, r0, #1
 800c570:	429a      	cmp	r2, r3
 800c572:	d004      	beq.n	800c57e <__swbuf_r+0x6e>
 800c574:	89a3      	ldrh	r3, [r4, #12]
 800c576:	07db      	lsls	r3, r3, #31
 800c578:	d5e1      	bpl.n	800c53e <__swbuf_r+0x2e>
 800c57a:	2e0a      	cmp	r6, #10
 800c57c:	d1df      	bne.n	800c53e <__swbuf_r+0x2e>
 800c57e:	4621      	mov	r1, r4
 800c580:	4628      	mov	r0, r5
 800c582:	f7ff fda9 	bl	800c0d8 <_fflush_r>
 800c586:	2800      	cmp	r0, #0
 800c588:	d0d9      	beq.n	800c53e <__swbuf_r+0x2e>
 800c58a:	e7d6      	b.n	800c53a <__swbuf_r+0x2a>

0800c58c <__swsetup_r>:
 800c58c:	b538      	push	{r3, r4, r5, lr}
 800c58e:	4b29      	ldr	r3, [pc, #164]	@ (800c634 <__swsetup_r+0xa8>)
 800c590:	4605      	mov	r5, r0
 800c592:	6818      	ldr	r0, [r3, #0]
 800c594:	460c      	mov	r4, r1
 800c596:	b118      	cbz	r0, 800c5a0 <__swsetup_r+0x14>
 800c598:	6a03      	ldr	r3, [r0, #32]
 800c59a:	b90b      	cbnz	r3, 800c5a0 <__swsetup_r+0x14>
 800c59c:	f7fd ffc4 	bl	800a528 <__sinit>
 800c5a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c5a4:	0719      	lsls	r1, r3, #28
 800c5a6:	d422      	bmi.n	800c5ee <__swsetup_r+0x62>
 800c5a8:	06da      	lsls	r2, r3, #27
 800c5aa:	d407      	bmi.n	800c5bc <__swsetup_r+0x30>
 800c5ac:	2209      	movs	r2, #9
 800c5ae:	602a      	str	r2, [r5, #0]
 800c5b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c5b4:	81a3      	strh	r3, [r4, #12]
 800c5b6:	f04f 30ff 	mov.w	r0, #4294967295
 800c5ba:	e033      	b.n	800c624 <__swsetup_r+0x98>
 800c5bc:	0758      	lsls	r0, r3, #29
 800c5be:	d512      	bpl.n	800c5e6 <__swsetup_r+0x5a>
 800c5c0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c5c2:	b141      	cbz	r1, 800c5d6 <__swsetup_r+0x4a>
 800c5c4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c5c8:	4299      	cmp	r1, r3
 800c5ca:	d002      	beq.n	800c5d2 <__swsetup_r+0x46>
 800c5cc:	4628      	mov	r0, r5
 800c5ce:	f7fe f917 	bl	800a800 <_free_r>
 800c5d2:	2300      	movs	r3, #0
 800c5d4:	6363      	str	r3, [r4, #52]	@ 0x34
 800c5d6:	89a3      	ldrh	r3, [r4, #12]
 800c5d8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c5dc:	81a3      	strh	r3, [r4, #12]
 800c5de:	2300      	movs	r3, #0
 800c5e0:	6063      	str	r3, [r4, #4]
 800c5e2:	6923      	ldr	r3, [r4, #16]
 800c5e4:	6023      	str	r3, [r4, #0]
 800c5e6:	89a3      	ldrh	r3, [r4, #12]
 800c5e8:	f043 0308 	orr.w	r3, r3, #8
 800c5ec:	81a3      	strh	r3, [r4, #12]
 800c5ee:	6923      	ldr	r3, [r4, #16]
 800c5f0:	b94b      	cbnz	r3, 800c606 <__swsetup_r+0x7a>
 800c5f2:	89a3      	ldrh	r3, [r4, #12]
 800c5f4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c5f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c5fc:	d003      	beq.n	800c606 <__swsetup_r+0x7a>
 800c5fe:	4621      	mov	r1, r4
 800c600:	4628      	mov	r0, r5
 800c602:	f000 f883 	bl	800c70c <__smakebuf_r>
 800c606:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c60a:	f013 0201 	ands.w	r2, r3, #1
 800c60e:	d00a      	beq.n	800c626 <__swsetup_r+0x9a>
 800c610:	2200      	movs	r2, #0
 800c612:	60a2      	str	r2, [r4, #8]
 800c614:	6962      	ldr	r2, [r4, #20]
 800c616:	4252      	negs	r2, r2
 800c618:	61a2      	str	r2, [r4, #24]
 800c61a:	6922      	ldr	r2, [r4, #16]
 800c61c:	b942      	cbnz	r2, 800c630 <__swsetup_r+0xa4>
 800c61e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c622:	d1c5      	bne.n	800c5b0 <__swsetup_r+0x24>
 800c624:	bd38      	pop	{r3, r4, r5, pc}
 800c626:	0799      	lsls	r1, r3, #30
 800c628:	bf58      	it	pl
 800c62a:	6962      	ldrpl	r2, [r4, #20]
 800c62c:	60a2      	str	r2, [r4, #8]
 800c62e:	e7f4      	b.n	800c61a <__swsetup_r+0x8e>
 800c630:	2000      	movs	r0, #0
 800c632:	e7f7      	b.n	800c624 <__swsetup_r+0x98>
 800c634:	200001a4 	.word	0x200001a4

0800c638 <_raise_r>:
 800c638:	291f      	cmp	r1, #31
 800c63a:	b538      	push	{r3, r4, r5, lr}
 800c63c:	4605      	mov	r5, r0
 800c63e:	460c      	mov	r4, r1
 800c640:	d904      	bls.n	800c64c <_raise_r+0x14>
 800c642:	2316      	movs	r3, #22
 800c644:	6003      	str	r3, [r0, #0]
 800c646:	f04f 30ff 	mov.w	r0, #4294967295
 800c64a:	bd38      	pop	{r3, r4, r5, pc}
 800c64c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c64e:	b112      	cbz	r2, 800c656 <_raise_r+0x1e>
 800c650:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c654:	b94b      	cbnz	r3, 800c66a <_raise_r+0x32>
 800c656:	4628      	mov	r0, r5
 800c658:	f000 f830 	bl	800c6bc <_getpid_r>
 800c65c:	4622      	mov	r2, r4
 800c65e:	4601      	mov	r1, r0
 800c660:	4628      	mov	r0, r5
 800c662:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c666:	f000 b817 	b.w	800c698 <_kill_r>
 800c66a:	2b01      	cmp	r3, #1
 800c66c:	d00a      	beq.n	800c684 <_raise_r+0x4c>
 800c66e:	1c59      	adds	r1, r3, #1
 800c670:	d103      	bne.n	800c67a <_raise_r+0x42>
 800c672:	2316      	movs	r3, #22
 800c674:	6003      	str	r3, [r0, #0]
 800c676:	2001      	movs	r0, #1
 800c678:	e7e7      	b.n	800c64a <_raise_r+0x12>
 800c67a:	2100      	movs	r1, #0
 800c67c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c680:	4620      	mov	r0, r4
 800c682:	4798      	blx	r3
 800c684:	2000      	movs	r0, #0
 800c686:	e7e0      	b.n	800c64a <_raise_r+0x12>

0800c688 <raise>:
 800c688:	4b02      	ldr	r3, [pc, #8]	@ (800c694 <raise+0xc>)
 800c68a:	4601      	mov	r1, r0
 800c68c:	6818      	ldr	r0, [r3, #0]
 800c68e:	f7ff bfd3 	b.w	800c638 <_raise_r>
 800c692:	bf00      	nop
 800c694:	200001a4 	.word	0x200001a4

0800c698 <_kill_r>:
 800c698:	b538      	push	{r3, r4, r5, lr}
 800c69a:	4d07      	ldr	r5, [pc, #28]	@ (800c6b8 <_kill_r+0x20>)
 800c69c:	2300      	movs	r3, #0
 800c69e:	4604      	mov	r4, r0
 800c6a0:	4608      	mov	r0, r1
 800c6a2:	4611      	mov	r1, r2
 800c6a4:	602b      	str	r3, [r5, #0]
 800c6a6:	f7f5 fd4f 	bl	8002148 <_kill>
 800c6aa:	1c43      	adds	r3, r0, #1
 800c6ac:	d102      	bne.n	800c6b4 <_kill_r+0x1c>
 800c6ae:	682b      	ldr	r3, [r5, #0]
 800c6b0:	b103      	cbz	r3, 800c6b4 <_kill_r+0x1c>
 800c6b2:	6023      	str	r3, [r4, #0]
 800c6b4:	bd38      	pop	{r3, r4, r5, pc}
 800c6b6:	bf00      	nop
 800c6b8:	200006e0 	.word	0x200006e0

0800c6bc <_getpid_r>:
 800c6bc:	f7f5 bd3c 	b.w	8002138 <_getpid>

0800c6c0 <__swhatbuf_r>:
 800c6c0:	b570      	push	{r4, r5, r6, lr}
 800c6c2:	460c      	mov	r4, r1
 800c6c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c6c8:	2900      	cmp	r1, #0
 800c6ca:	b096      	sub	sp, #88	@ 0x58
 800c6cc:	4615      	mov	r5, r2
 800c6ce:	461e      	mov	r6, r3
 800c6d0:	da0d      	bge.n	800c6ee <__swhatbuf_r+0x2e>
 800c6d2:	89a3      	ldrh	r3, [r4, #12]
 800c6d4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c6d8:	f04f 0100 	mov.w	r1, #0
 800c6dc:	bf14      	ite	ne
 800c6de:	2340      	movne	r3, #64	@ 0x40
 800c6e0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c6e4:	2000      	movs	r0, #0
 800c6e6:	6031      	str	r1, [r6, #0]
 800c6e8:	602b      	str	r3, [r5, #0]
 800c6ea:	b016      	add	sp, #88	@ 0x58
 800c6ec:	bd70      	pop	{r4, r5, r6, pc}
 800c6ee:	466a      	mov	r2, sp
 800c6f0:	f000 f848 	bl	800c784 <_fstat_r>
 800c6f4:	2800      	cmp	r0, #0
 800c6f6:	dbec      	blt.n	800c6d2 <__swhatbuf_r+0x12>
 800c6f8:	9901      	ldr	r1, [sp, #4]
 800c6fa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c6fe:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c702:	4259      	negs	r1, r3
 800c704:	4159      	adcs	r1, r3
 800c706:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c70a:	e7eb      	b.n	800c6e4 <__swhatbuf_r+0x24>

0800c70c <__smakebuf_r>:
 800c70c:	898b      	ldrh	r3, [r1, #12]
 800c70e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c710:	079d      	lsls	r5, r3, #30
 800c712:	4606      	mov	r6, r0
 800c714:	460c      	mov	r4, r1
 800c716:	d507      	bpl.n	800c728 <__smakebuf_r+0x1c>
 800c718:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c71c:	6023      	str	r3, [r4, #0]
 800c71e:	6123      	str	r3, [r4, #16]
 800c720:	2301      	movs	r3, #1
 800c722:	6163      	str	r3, [r4, #20]
 800c724:	b003      	add	sp, #12
 800c726:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c728:	ab01      	add	r3, sp, #4
 800c72a:	466a      	mov	r2, sp
 800c72c:	f7ff ffc8 	bl	800c6c0 <__swhatbuf_r>
 800c730:	9f00      	ldr	r7, [sp, #0]
 800c732:	4605      	mov	r5, r0
 800c734:	4639      	mov	r1, r7
 800c736:	4630      	mov	r0, r6
 800c738:	f7fe fc08 	bl	800af4c <_malloc_r>
 800c73c:	b948      	cbnz	r0, 800c752 <__smakebuf_r+0x46>
 800c73e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c742:	059a      	lsls	r2, r3, #22
 800c744:	d4ee      	bmi.n	800c724 <__smakebuf_r+0x18>
 800c746:	f023 0303 	bic.w	r3, r3, #3
 800c74a:	f043 0302 	orr.w	r3, r3, #2
 800c74e:	81a3      	strh	r3, [r4, #12]
 800c750:	e7e2      	b.n	800c718 <__smakebuf_r+0xc>
 800c752:	89a3      	ldrh	r3, [r4, #12]
 800c754:	6020      	str	r0, [r4, #0]
 800c756:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c75a:	81a3      	strh	r3, [r4, #12]
 800c75c:	9b01      	ldr	r3, [sp, #4]
 800c75e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c762:	b15b      	cbz	r3, 800c77c <__smakebuf_r+0x70>
 800c764:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c768:	4630      	mov	r0, r6
 800c76a:	f000 f81d 	bl	800c7a8 <_isatty_r>
 800c76e:	b128      	cbz	r0, 800c77c <__smakebuf_r+0x70>
 800c770:	89a3      	ldrh	r3, [r4, #12]
 800c772:	f023 0303 	bic.w	r3, r3, #3
 800c776:	f043 0301 	orr.w	r3, r3, #1
 800c77a:	81a3      	strh	r3, [r4, #12]
 800c77c:	89a3      	ldrh	r3, [r4, #12]
 800c77e:	431d      	orrs	r5, r3
 800c780:	81a5      	strh	r5, [r4, #12]
 800c782:	e7cf      	b.n	800c724 <__smakebuf_r+0x18>

0800c784 <_fstat_r>:
 800c784:	b538      	push	{r3, r4, r5, lr}
 800c786:	4d07      	ldr	r5, [pc, #28]	@ (800c7a4 <_fstat_r+0x20>)
 800c788:	2300      	movs	r3, #0
 800c78a:	4604      	mov	r4, r0
 800c78c:	4608      	mov	r0, r1
 800c78e:	4611      	mov	r1, r2
 800c790:	602b      	str	r3, [r5, #0]
 800c792:	f7f5 fd39 	bl	8002208 <_fstat>
 800c796:	1c43      	adds	r3, r0, #1
 800c798:	d102      	bne.n	800c7a0 <_fstat_r+0x1c>
 800c79a:	682b      	ldr	r3, [r5, #0]
 800c79c:	b103      	cbz	r3, 800c7a0 <_fstat_r+0x1c>
 800c79e:	6023      	str	r3, [r4, #0]
 800c7a0:	bd38      	pop	{r3, r4, r5, pc}
 800c7a2:	bf00      	nop
 800c7a4:	200006e0 	.word	0x200006e0

0800c7a8 <_isatty_r>:
 800c7a8:	b538      	push	{r3, r4, r5, lr}
 800c7aa:	4d06      	ldr	r5, [pc, #24]	@ (800c7c4 <_isatty_r+0x1c>)
 800c7ac:	2300      	movs	r3, #0
 800c7ae:	4604      	mov	r4, r0
 800c7b0:	4608      	mov	r0, r1
 800c7b2:	602b      	str	r3, [r5, #0]
 800c7b4:	f7f5 fd38 	bl	8002228 <_isatty>
 800c7b8:	1c43      	adds	r3, r0, #1
 800c7ba:	d102      	bne.n	800c7c2 <_isatty_r+0x1a>
 800c7bc:	682b      	ldr	r3, [r5, #0]
 800c7be:	b103      	cbz	r3, 800c7c2 <_isatty_r+0x1a>
 800c7c0:	6023      	str	r3, [r4, #0]
 800c7c2:	bd38      	pop	{r3, r4, r5, pc}
 800c7c4:	200006e0 	.word	0x200006e0

0800c7c8 <sqrt>:
 800c7c8:	b538      	push	{r3, r4, r5, lr}
 800c7ca:	ed2d 8b02 	vpush	{d8}
 800c7ce:	ec55 4b10 	vmov	r4, r5, d0
 800c7d2:	f000 f825 	bl	800c820 <__ieee754_sqrt>
 800c7d6:	4622      	mov	r2, r4
 800c7d8:	462b      	mov	r3, r5
 800c7da:	4620      	mov	r0, r4
 800c7dc:	4629      	mov	r1, r5
 800c7de:	eeb0 8a40 	vmov.f32	s16, s0
 800c7e2:	eef0 8a60 	vmov.f32	s17, s1
 800c7e6:	f7f4 f9b1 	bl	8000b4c <__aeabi_dcmpun>
 800c7ea:	b990      	cbnz	r0, 800c812 <sqrt+0x4a>
 800c7ec:	2200      	movs	r2, #0
 800c7ee:	2300      	movs	r3, #0
 800c7f0:	4620      	mov	r0, r4
 800c7f2:	4629      	mov	r1, r5
 800c7f4:	f7f4 f982 	bl	8000afc <__aeabi_dcmplt>
 800c7f8:	b158      	cbz	r0, 800c812 <sqrt+0x4a>
 800c7fa:	f7fd ffbb 	bl	800a774 <__errno>
 800c7fe:	2321      	movs	r3, #33	@ 0x21
 800c800:	6003      	str	r3, [r0, #0]
 800c802:	2200      	movs	r2, #0
 800c804:	2300      	movs	r3, #0
 800c806:	4610      	mov	r0, r2
 800c808:	4619      	mov	r1, r3
 800c80a:	f7f4 f82f 	bl	800086c <__aeabi_ddiv>
 800c80e:	ec41 0b18 	vmov	d8, r0, r1
 800c812:	eeb0 0a48 	vmov.f32	s0, s16
 800c816:	eef0 0a68 	vmov.f32	s1, s17
 800c81a:	ecbd 8b02 	vpop	{d8}
 800c81e:	bd38      	pop	{r3, r4, r5, pc}

0800c820 <__ieee754_sqrt>:
 800c820:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c824:	4a68      	ldr	r2, [pc, #416]	@ (800c9c8 <__ieee754_sqrt+0x1a8>)
 800c826:	ec55 4b10 	vmov	r4, r5, d0
 800c82a:	43aa      	bics	r2, r5
 800c82c:	462b      	mov	r3, r5
 800c82e:	4621      	mov	r1, r4
 800c830:	d110      	bne.n	800c854 <__ieee754_sqrt+0x34>
 800c832:	4622      	mov	r2, r4
 800c834:	4620      	mov	r0, r4
 800c836:	4629      	mov	r1, r5
 800c838:	f7f3 feee 	bl	8000618 <__aeabi_dmul>
 800c83c:	4602      	mov	r2, r0
 800c83e:	460b      	mov	r3, r1
 800c840:	4620      	mov	r0, r4
 800c842:	4629      	mov	r1, r5
 800c844:	f7f3 fd32 	bl	80002ac <__adddf3>
 800c848:	4604      	mov	r4, r0
 800c84a:	460d      	mov	r5, r1
 800c84c:	ec45 4b10 	vmov	d0, r4, r5
 800c850:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c854:	2d00      	cmp	r5, #0
 800c856:	dc0e      	bgt.n	800c876 <__ieee754_sqrt+0x56>
 800c858:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800c85c:	4322      	orrs	r2, r4
 800c85e:	d0f5      	beq.n	800c84c <__ieee754_sqrt+0x2c>
 800c860:	b19d      	cbz	r5, 800c88a <__ieee754_sqrt+0x6a>
 800c862:	4622      	mov	r2, r4
 800c864:	4620      	mov	r0, r4
 800c866:	4629      	mov	r1, r5
 800c868:	f7f3 fd1e 	bl	80002a8 <__aeabi_dsub>
 800c86c:	4602      	mov	r2, r0
 800c86e:	460b      	mov	r3, r1
 800c870:	f7f3 fffc 	bl	800086c <__aeabi_ddiv>
 800c874:	e7e8      	b.n	800c848 <__ieee754_sqrt+0x28>
 800c876:	152a      	asrs	r2, r5, #20
 800c878:	d115      	bne.n	800c8a6 <__ieee754_sqrt+0x86>
 800c87a:	2000      	movs	r0, #0
 800c87c:	e009      	b.n	800c892 <__ieee754_sqrt+0x72>
 800c87e:	0acb      	lsrs	r3, r1, #11
 800c880:	3a15      	subs	r2, #21
 800c882:	0549      	lsls	r1, r1, #21
 800c884:	2b00      	cmp	r3, #0
 800c886:	d0fa      	beq.n	800c87e <__ieee754_sqrt+0x5e>
 800c888:	e7f7      	b.n	800c87a <__ieee754_sqrt+0x5a>
 800c88a:	462a      	mov	r2, r5
 800c88c:	e7fa      	b.n	800c884 <__ieee754_sqrt+0x64>
 800c88e:	005b      	lsls	r3, r3, #1
 800c890:	3001      	adds	r0, #1
 800c892:	02dc      	lsls	r4, r3, #11
 800c894:	d5fb      	bpl.n	800c88e <__ieee754_sqrt+0x6e>
 800c896:	1e44      	subs	r4, r0, #1
 800c898:	1b12      	subs	r2, r2, r4
 800c89a:	f1c0 0420 	rsb	r4, r0, #32
 800c89e:	fa21 f404 	lsr.w	r4, r1, r4
 800c8a2:	4323      	orrs	r3, r4
 800c8a4:	4081      	lsls	r1, r0
 800c8a6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c8aa:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800c8ae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c8b2:	07d2      	lsls	r2, r2, #31
 800c8b4:	bf5c      	itt	pl
 800c8b6:	005b      	lslpl	r3, r3, #1
 800c8b8:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800c8bc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c8c0:	bf58      	it	pl
 800c8c2:	0049      	lslpl	r1, r1, #1
 800c8c4:	2600      	movs	r6, #0
 800c8c6:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800c8ca:	106d      	asrs	r5, r5, #1
 800c8cc:	0049      	lsls	r1, r1, #1
 800c8ce:	2016      	movs	r0, #22
 800c8d0:	4632      	mov	r2, r6
 800c8d2:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800c8d6:	1917      	adds	r7, r2, r4
 800c8d8:	429f      	cmp	r7, r3
 800c8da:	bfde      	ittt	le
 800c8dc:	193a      	addle	r2, r7, r4
 800c8de:	1bdb      	suble	r3, r3, r7
 800c8e0:	1936      	addle	r6, r6, r4
 800c8e2:	0fcf      	lsrs	r7, r1, #31
 800c8e4:	3801      	subs	r0, #1
 800c8e6:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800c8ea:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800c8ee:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800c8f2:	d1f0      	bne.n	800c8d6 <__ieee754_sqrt+0xb6>
 800c8f4:	4604      	mov	r4, r0
 800c8f6:	2720      	movs	r7, #32
 800c8f8:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800c8fc:	429a      	cmp	r2, r3
 800c8fe:	eb00 0e0c 	add.w	lr, r0, ip
 800c902:	db02      	blt.n	800c90a <__ieee754_sqrt+0xea>
 800c904:	d113      	bne.n	800c92e <__ieee754_sqrt+0x10e>
 800c906:	458e      	cmp	lr, r1
 800c908:	d811      	bhi.n	800c92e <__ieee754_sqrt+0x10e>
 800c90a:	f1be 0f00 	cmp.w	lr, #0
 800c90e:	eb0e 000c 	add.w	r0, lr, ip
 800c912:	da42      	bge.n	800c99a <__ieee754_sqrt+0x17a>
 800c914:	2800      	cmp	r0, #0
 800c916:	db40      	blt.n	800c99a <__ieee754_sqrt+0x17a>
 800c918:	f102 0801 	add.w	r8, r2, #1
 800c91c:	1a9b      	subs	r3, r3, r2
 800c91e:	458e      	cmp	lr, r1
 800c920:	bf88      	it	hi
 800c922:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800c926:	eba1 010e 	sub.w	r1, r1, lr
 800c92a:	4464      	add	r4, ip
 800c92c:	4642      	mov	r2, r8
 800c92e:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800c932:	3f01      	subs	r7, #1
 800c934:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800c938:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800c93c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800c940:	d1dc      	bne.n	800c8fc <__ieee754_sqrt+0xdc>
 800c942:	4319      	orrs	r1, r3
 800c944:	d01b      	beq.n	800c97e <__ieee754_sqrt+0x15e>
 800c946:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800c9cc <__ieee754_sqrt+0x1ac>
 800c94a:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800c9d0 <__ieee754_sqrt+0x1b0>
 800c94e:	e9da 0100 	ldrd	r0, r1, [sl]
 800c952:	e9db 2300 	ldrd	r2, r3, [fp]
 800c956:	f7f3 fca7 	bl	80002a8 <__aeabi_dsub>
 800c95a:	e9da 8900 	ldrd	r8, r9, [sl]
 800c95e:	4602      	mov	r2, r0
 800c960:	460b      	mov	r3, r1
 800c962:	4640      	mov	r0, r8
 800c964:	4649      	mov	r1, r9
 800c966:	f7f4 f8d3 	bl	8000b10 <__aeabi_dcmple>
 800c96a:	b140      	cbz	r0, 800c97e <__ieee754_sqrt+0x15e>
 800c96c:	f1b4 3fff 	cmp.w	r4, #4294967295
 800c970:	e9da 0100 	ldrd	r0, r1, [sl]
 800c974:	e9db 2300 	ldrd	r2, r3, [fp]
 800c978:	d111      	bne.n	800c99e <__ieee754_sqrt+0x17e>
 800c97a:	3601      	adds	r6, #1
 800c97c:	463c      	mov	r4, r7
 800c97e:	1072      	asrs	r2, r6, #1
 800c980:	0863      	lsrs	r3, r4, #1
 800c982:	07f1      	lsls	r1, r6, #31
 800c984:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800c988:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800c98c:	bf48      	it	mi
 800c98e:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800c992:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800c996:	4618      	mov	r0, r3
 800c998:	e756      	b.n	800c848 <__ieee754_sqrt+0x28>
 800c99a:	4690      	mov	r8, r2
 800c99c:	e7be      	b.n	800c91c <__ieee754_sqrt+0xfc>
 800c99e:	f7f3 fc85 	bl	80002ac <__adddf3>
 800c9a2:	e9da 8900 	ldrd	r8, r9, [sl]
 800c9a6:	4602      	mov	r2, r0
 800c9a8:	460b      	mov	r3, r1
 800c9aa:	4640      	mov	r0, r8
 800c9ac:	4649      	mov	r1, r9
 800c9ae:	f7f4 f8a5 	bl	8000afc <__aeabi_dcmplt>
 800c9b2:	b120      	cbz	r0, 800c9be <__ieee754_sqrt+0x19e>
 800c9b4:	1ca0      	adds	r0, r4, #2
 800c9b6:	bf08      	it	eq
 800c9b8:	3601      	addeq	r6, #1
 800c9ba:	3402      	adds	r4, #2
 800c9bc:	e7df      	b.n	800c97e <__ieee754_sqrt+0x15e>
 800c9be:	1c63      	adds	r3, r4, #1
 800c9c0:	f023 0401 	bic.w	r4, r3, #1
 800c9c4:	e7db      	b.n	800c97e <__ieee754_sqrt+0x15e>
 800c9c6:	bf00      	nop
 800c9c8:	7ff00000 	.word	0x7ff00000
 800c9cc:	20000200 	.word	0x20000200
 800c9d0:	200001f8 	.word	0x200001f8

0800c9d4 <_init>:
 800c9d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9d6:	bf00      	nop
 800c9d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c9da:	bc08      	pop	{r3}
 800c9dc:	469e      	mov	lr, r3
 800c9de:	4770      	bx	lr

0800c9e0 <_fini>:
 800c9e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9e2:	bf00      	nop
 800c9e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c9e6:	bc08      	pop	{r3}
 800c9e8:	469e      	mov	lr, r3
 800c9ea:	4770      	bx	lr
