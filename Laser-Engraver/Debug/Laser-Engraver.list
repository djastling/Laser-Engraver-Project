
Laser-Engraver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bb9c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005c0  0800bd30  0800bd30  0000cd30  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c2f0  0800c2f0  0000e208  2**0
                  CONTENTS
  4 .ARM          00000008  0800c2f0  0800c2f0  0000d2f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c2f8  0800c2f8  0000e208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c2f8  0800c2f8  0000d2f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c2fc  0800c2fc  0000d2fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000208  20000000  0800c300  0000e000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000049c  20000208  0800c508  0000e208  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006a4  0800c508  0000e6a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e208  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016ca4  00000000  00000000  0000e238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003143  00000000  00000000  00024edc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001518  00000000  00000000  00028020  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001076  00000000  00000000  00029538  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029ea4  00000000  00000000  0002a5ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001afea  00000000  00000000  00054452  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f8e2e  00000000  00000000  0006f43c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0016826a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006cd8  00000000  00000000  001682b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  0016ef88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000208 	.word	0x20000208
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800bd14 	.word	0x0800bd14

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000020c 	.word	0x2000020c
 80001cc:	0800bd14 	.word	0x0800bd14

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9a0 	b.w	8001000 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	@ (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	460c      	mov	r4, r1
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d14e      	bne.n	8000dee <__udivmoddi4+0xaa>
 8000d50:	4694      	mov	ip, r2
 8000d52:	458c      	cmp	ip, r1
 8000d54:	4686      	mov	lr, r0
 8000d56:	fab2 f282 	clz	r2, r2
 8000d5a:	d962      	bls.n	8000e22 <__udivmoddi4+0xde>
 8000d5c:	b14a      	cbz	r2, 8000d72 <__udivmoddi4+0x2e>
 8000d5e:	f1c2 0320 	rsb	r3, r2, #32
 8000d62:	4091      	lsls	r1, r2
 8000d64:	fa20 f303 	lsr.w	r3, r0, r3
 8000d68:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d6c:	4319      	orrs	r1, r3
 8000d6e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d76:	fa1f f68c 	uxth.w	r6, ip
 8000d7a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d7e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d82:	fb07 1114 	mls	r1, r7, r4, r1
 8000d86:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d8a:	fb04 f106 	mul.w	r1, r4, r6
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	d90a      	bls.n	8000da8 <__udivmoddi4+0x64>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d9a:	f080 8112 	bcs.w	8000fc2 <__udivmoddi4+0x27e>
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	f240 810f 	bls.w	8000fc2 <__udivmoddi4+0x27e>
 8000da4:	3c02      	subs	r4, #2
 8000da6:	4463      	add	r3, ip
 8000da8:	1a59      	subs	r1, r3, r1
 8000daa:	fa1f f38e 	uxth.w	r3, lr
 8000dae:	fbb1 f0f7 	udiv	r0, r1, r7
 8000db2:	fb07 1110 	mls	r1, r7, r0, r1
 8000db6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dba:	fb00 f606 	mul.w	r6, r0, r6
 8000dbe:	429e      	cmp	r6, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x94>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dca:	f080 80fc 	bcs.w	8000fc6 <__udivmoddi4+0x282>
 8000dce:	429e      	cmp	r6, r3
 8000dd0:	f240 80f9 	bls.w	8000fc6 <__udivmoddi4+0x282>
 8000dd4:	4463      	add	r3, ip
 8000dd6:	3802      	subs	r0, #2
 8000dd8:	1b9b      	subs	r3, r3, r6
 8000dda:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dde:	2100      	movs	r1, #0
 8000de0:	b11d      	cbz	r5, 8000dea <__udivmoddi4+0xa6>
 8000de2:	40d3      	lsrs	r3, r2
 8000de4:	2200      	movs	r2, #0
 8000de6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d905      	bls.n	8000dfe <__udivmoddi4+0xba>
 8000df2:	b10d      	cbz	r5, 8000df8 <__udivmoddi4+0xb4>
 8000df4:	e9c5 0100 	strd	r0, r1, [r5]
 8000df8:	2100      	movs	r1, #0
 8000dfa:	4608      	mov	r0, r1
 8000dfc:	e7f5      	b.n	8000dea <__udivmoddi4+0xa6>
 8000dfe:	fab3 f183 	clz	r1, r3
 8000e02:	2900      	cmp	r1, #0
 8000e04:	d146      	bne.n	8000e94 <__udivmoddi4+0x150>
 8000e06:	42a3      	cmp	r3, r4
 8000e08:	d302      	bcc.n	8000e10 <__udivmoddi4+0xcc>
 8000e0a:	4290      	cmp	r0, r2
 8000e0c:	f0c0 80f0 	bcc.w	8000ff0 <__udivmoddi4+0x2ac>
 8000e10:	1a86      	subs	r6, r0, r2
 8000e12:	eb64 0303 	sbc.w	r3, r4, r3
 8000e16:	2001      	movs	r0, #1
 8000e18:	2d00      	cmp	r5, #0
 8000e1a:	d0e6      	beq.n	8000dea <__udivmoddi4+0xa6>
 8000e1c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e20:	e7e3      	b.n	8000dea <__udivmoddi4+0xa6>
 8000e22:	2a00      	cmp	r2, #0
 8000e24:	f040 8090 	bne.w	8000f48 <__udivmoddi4+0x204>
 8000e28:	eba1 040c 	sub.w	r4, r1, ip
 8000e2c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e30:	fa1f f78c 	uxth.w	r7, ip
 8000e34:	2101      	movs	r1, #1
 8000e36:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e3a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e3e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e42:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e46:	fb07 f006 	mul.w	r0, r7, r6
 8000e4a:	4298      	cmp	r0, r3
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x11c>
 8000e4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e52:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x11a>
 8000e58:	4298      	cmp	r0, r3
 8000e5a:	f200 80cd 	bhi.w	8000ff8 <__udivmoddi4+0x2b4>
 8000e5e:	4626      	mov	r6, r4
 8000e60:	1a1c      	subs	r4, r3, r0
 8000e62:	fa1f f38e 	uxth.w	r3, lr
 8000e66:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e6a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e6e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e72:	fb00 f707 	mul.w	r7, r0, r7
 8000e76:	429f      	cmp	r7, r3
 8000e78:	d908      	bls.n	8000e8c <__udivmoddi4+0x148>
 8000e7a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e7e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e82:	d202      	bcs.n	8000e8a <__udivmoddi4+0x146>
 8000e84:	429f      	cmp	r7, r3
 8000e86:	f200 80b0 	bhi.w	8000fea <__udivmoddi4+0x2a6>
 8000e8a:	4620      	mov	r0, r4
 8000e8c:	1bdb      	subs	r3, r3, r7
 8000e8e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e92:	e7a5      	b.n	8000de0 <__udivmoddi4+0x9c>
 8000e94:	f1c1 0620 	rsb	r6, r1, #32
 8000e98:	408b      	lsls	r3, r1
 8000e9a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e9e:	431f      	orrs	r7, r3
 8000ea0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ea4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ea8:	ea43 030c 	orr.w	r3, r3, ip
 8000eac:	40f4      	lsrs	r4, r6
 8000eae:	fa00 f801 	lsl.w	r8, r0, r1
 8000eb2:	0c38      	lsrs	r0, r7, #16
 8000eb4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000eb8:	fbb4 fef0 	udiv	lr, r4, r0
 8000ebc:	fa1f fc87 	uxth.w	ip, r7
 8000ec0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ec4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ec8:	fb0e f90c 	mul.w	r9, lr, ip
 8000ecc:	45a1      	cmp	r9, r4
 8000ece:	fa02 f201 	lsl.w	r2, r2, r1
 8000ed2:	d90a      	bls.n	8000eea <__udivmoddi4+0x1a6>
 8000ed4:	193c      	adds	r4, r7, r4
 8000ed6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eda:	f080 8084 	bcs.w	8000fe6 <__udivmoddi4+0x2a2>
 8000ede:	45a1      	cmp	r9, r4
 8000ee0:	f240 8081 	bls.w	8000fe6 <__udivmoddi4+0x2a2>
 8000ee4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ee8:	443c      	add	r4, r7
 8000eea:	eba4 0409 	sub.w	r4, r4, r9
 8000eee:	fa1f f983 	uxth.w	r9, r3
 8000ef2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ef6:	fb00 4413 	mls	r4, r0, r3, r4
 8000efa:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000efe:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f02:	45a4      	cmp	ip, r4
 8000f04:	d907      	bls.n	8000f16 <__udivmoddi4+0x1d2>
 8000f06:	193c      	adds	r4, r7, r4
 8000f08:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f0c:	d267      	bcs.n	8000fde <__udivmoddi4+0x29a>
 8000f0e:	45a4      	cmp	ip, r4
 8000f10:	d965      	bls.n	8000fde <__udivmoddi4+0x29a>
 8000f12:	3b02      	subs	r3, #2
 8000f14:	443c      	add	r4, r7
 8000f16:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f1a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f1e:	eba4 040c 	sub.w	r4, r4, ip
 8000f22:	429c      	cmp	r4, r3
 8000f24:	46ce      	mov	lr, r9
 8000f26:	469c      	mov	ip, r3
 8000f28:	d351      	bcc.n	8000fce <__udivmoddi4+0x28a>
 8000f2a:	d04e      	beq.n	8000fca <__udivmoddi4+0x286>
 8000f2c:	b155      	cbz	r5, 8000f44 <__udivmoddi4+0x200>
 8000f2e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f32:	eb64 040c 	sbc.w	r4, r4, ip
 8000f36:	fa04 f606 	lsl.w	r6, r4, r6
 8000f3a:	40cb      	lsrs	r3, r1
 8000f3c:	431e      	orrs	r6, r3
 8000f3e:	40cc      	lsrs	r4, r1
 8000f40:	e9c5 6400 	strd	r6, r4, [r5]
 8000f44:	2100      	movs	r1, #0
 8000f46:	e750      	b.n	8000dea <__udivmoddi4+0xa6>
 8000f48:	f1c2 0320 	rsb	r3, r2, #32
 8000f4c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f50:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f54:	fa24 f303 	lsr.w	r3, r4, r3
 8000f58:	4094      	lsls	r4, r2
 8000f5a:	430c      	orrs	r4, r1
 8000f5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f60:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f64:	fa1f f78c 	uxth.w	r7, ip
 8000f68:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f6c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f70:	0c23      	lsrs	r3, r4, #16
 8000f72:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f76:	fb00 f107 	mul.w	r1, r0, r7
 8000f7a:	4299      	cmp	r1, r3
 8000f7c:	d908      	bls.n	8000f90 <__udivmoddi4+0x24c>
 8000f7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f82:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f86:	d22c      	bcs.n	8000fe2 <__udivmoddi4+0x29e>
 8000f88:	4299      	cmp	r1, r3
 8000f8a:	d92a      	bls.n	8000fe2 <__udivmoddi4+0x29e>
 8000f8c:	3802      	subs	r0, #2
 8000f8e:	4463      	add	r3, ip
 8000f90:	1a5b      	subs	r3, r3, r1
 8000f92:	b2a4      	uxth	r4, r4
 8000f94:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f98:	fb08 3311 	mls	r3, r8, r1, r3
 8000f9c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fa0:	fb01 f307 	mul.w	r3, r1, r7
 8000fa4:	42a3      	cmp	r3, r4
 8000fa6:	d908      	bls.n	8000fba <__udivmoddi4+0x276>
 8000fa8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fac:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fb0:	d213      	bcs.n	8000fda <__udivmoddi4+0x296>
 8000fb2:	42a3      	cmp	r3, r4
 8000fb4:	d911      	bls.n	8000fda <__udivmoddi4+0x296>
 8000fb6:	3902      	subs	r1, #2
 8000fb8:	4464      	add	r4, ip
 8000fba:	1ae4      	subs	r4, r4, r3
 8000fbc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fc0:	e739      	b.n	8000e36 <__udivmoddi4+0xf2>
 8000fc2:	4604      	mov	r4, r0
 8000fc4:	e6f0      	b.n	8000da8 <__udivmoddi4+0x64>
 8000fc6:	4608      	mov	r0, r1
 8000fc8:	e706      	b.n	8000dd8 <__udivmoddi4+0x94>
 8000fca:	45c8      	cmp	r8, r9
 8000fcc:	d2ae      	bcs.n	8000f2c <__udivmoddi4+0x1e8>
 8000fce:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fd2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fd6:	3801      	subs	r0, #1
 8000fd8:	e7a8      	b.n	8000f2c <__udivmoddi4+0x1e8>
 8000fda:	4631      	mov	r1, r6
 8000fdc:	e7ed      	b.n	8000fba <__udivmoddi4+0x276>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	e799      	b.n	8000f16 <__udivmoddi4+0x1d2>
 8000fe2:	4630      	mov	r0, r6
 8000fe4:	e7d4      	b.n	8000f90 <__udivmoddi4+0x24c>
 8000fe6:	46d6      	mov	lr, sl
 8000fe8:	e77f      	b.n	8000eea <__udivmoddi4+0x1a6>
 8000fea:	4463      	add	r3, ip
 8000fec:	3802      	subs	r0, #2
 8000fee:	e74d      	b.n	8000e8c <__udivmoddi4+0x148>
 8000ff0:	4606      	mov	r6, r0
 8000ff2:	4623      	mov	r3, r4
 8000ff4:	4608      	mov	r0, r1
 8000ff6:	e70f      	b.n	8000e18 <__udivmoddi4+0xd4>
 8000ff8:	3e02      	subs	r6, #2
 8000ffa:	4463      	add	r3, ip
 8000ffc:	e730      	b.n	8000e60 <__udivmoddi4+0x11c>
 8000ffe:	bf00      	nop

08001000 <__aeabi_idiv0>:
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop

08001004 <myprintf>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void myprintf(const char *fmt, ...)
{
 8001004:	b40f      	push	{r0, r1, r2, r3}
 8001006:	b580      	push	{r7, lr}
 8001008:	b082      	sub	sp, #8
 800100a:	af00      	add	r7, sp, #0
	static char buffer[256];
	va_list args;
	va_start(args, fmt);
 800100c:	f107 0314 	add.w	r3, r7, #20
 8001010:	603b      	str	r3, [r7, #0]
	vsnprintf(buffer, sizeof(buffer), fmt, args);
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	693a      	ldr	r2, [r7, #16]
 8001016:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800101a:	480b      	ldr	r0, [pc, #44]	@ (8001048 <myprintf+0x44>)
 800101c:	f008 fcc8 	bl	80099b0 <vsniprintf>
	va_end(args);

	int len = strlen(buffer);
 8001020:	4809      	ldr	r0, [pc, #36]	@ (8001048 <myprintf+0x44>)
 8001022:	f7ff f8df 	bl	80001e4 <strlen>
 8001026:	4603      	mov	r3, r0
 8001028:	607b      	str	r3, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)buffer, len, -1);
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	b29a      	uxth	r2, r3
 800102e:	f04f 33ff 	mov.w	r3, #4294967295
 8001032:	4905      	ldr	r1, [pc, #20]	@ (8001048 <myprintf+0x44>)
 8001034:	4805      	ldr	r0, [pc, #20]	@ (800104c <myprintf+0x48>)
 8001036:	f004 f88d 	bl	8005154 <HAL_UART_Transmit>

}
 800103a:	bf00      	nop
 800103c:	3708      	adds	r7, #8
 800103e:	46bd      	mov	sp, r7
 8001040:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001044:	b004      	add	sp, #16
 8001046:	4770      	bx	lr
 8001048:	200003bc 	.word	0x200003bc
 800104c:	20000320 	.word	0x20000320

08001050 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	f5ad 6d9a 	sub.w	sp, sp, #1232	@ 0x4d0
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001058:	f001 f904 	bl	8002264 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800105c:	f000 f886 	bl	800116c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001060:	f000 f994 	bl	800138c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001064:	f000 f962 	bl	800132c <MX_USART2_UART_Init>
  MX_TIM16_Init();
 8001068:	f000 f910 	bl	800128c <MX_TIM16_Init>
  MX_TIM17_Init();
 800106c:	f000 f936 	bl	80012dc <MX_TIM17_Init>
  MX_SPI1_Init();
 8001070:	f000 f8ce 	bl	8001210 <MX_SPI1_Init>
  MX_FATFS_Init();
 8001074:	f004 fdcc 	bl	8005c10 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  	  myprintf("\r\n~ SD card demo by kiwih ~\r\n\r\n");
 8001078:	4834      	ldr	r0, [pc, #208]	@ (800114c <main+0xfc>)
 800107a:	f7ff ffc3 	bl	8001004 <myprintf>

      HAL_Delay(1000); //a short delay is important to let the SD card settle
 800107e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001082:	f001 f92f 	bl	80022e4 <HAL_Delay>
      FATFS FatFs; 	//Fatfs handle
      FIL fil; 		//File handle
      FRESULT fres; //Result after operations

      //Open the file system
      fres = f_mount(&FatFs, "", 1); //1=mount now
 8001086:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 800108a:	2201      	movs	r2, #1
 800108c:	4930      	ldr	r1, [pc, #192]	@ (8001150 <main+0x100>)
 800108e:	4618      	mov	r0, r3
 8001090:	f007 f842 	bl	8008118 <f_mount>
 8001094:	4603      	mov	r3, r0
 8001096:	f887 34cf 	strb.w	r3, [r7, #1231]	@ 0x4cf
      if (fres != FR_OK) {
 800109a:	f897 34cf 	ldrb.w	r3, [r7, #1231]	@ 0x4cf
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d007      	beq.n	80010b2 <main+0x62>
    	myprintf("f_mount error (%i)\r\n", fres);
 80010a2:	f897 34cf 	ldrb.w	r3, [r7, #1231]	@ 0x4cf
 80010a6:	4619      	mov	r1, r3
 80010a8:	482a      	ldr	r0, [pc, #168]	@ (8001154 <main+0x104>)
 80010aa:	f7ff ffab 	bl	8001004 <myprintf>
    	while(1);
 80010ae:	bf00      	nop
 80010b0:	e7fd      	b.n	80010ae <main+0x5e>
      }

      fres = f_open(&fil, "test.txt", FA_READ);
 80010b2:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80010b6:	2201      	movs	r2, #1
 80010b8:	4927      	ldr	r1, [pc, #156]	@ (8001158 <main+0x108>)
 80010ba:	4618      	mov	r0, r3
 80010bc:	f007 f872 	bl	80081a4 <f_open>
 80010c0:	4603      	mov	r3, r0
 80010c2:	f887 34cf 	strb.w	r3, [r7, #1231]	@ 0x4cf
	  if (fres != FR_OK) {
 80010c6:	f897 34cf 	ldrb.w	r3, [r7, #1231]	@ 0x4cf
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d007      	beq.n	80010de <main+0x8e>
		myprintf("f_open error (%i)\r\n", fres);
 80010ce:	f897 34cf 	ldrb.w	r3, [r7, #1231]	@ 0x4cf
 80010d2:	4619      	mov	r1, r3
 80010d4:	4821      	ldr	r0, [pc, #132]	@ (800115c <main+0x10c>)
 80010d6:	f7ff ff95 	bl	8001004 <myprintf>
		while(1);
 80010da:	bf00      	nop
 80010dc:	e7fd      	b.n	80010da <main+0x8a>
	  }
	  myprintf("I was able to open 'gtest.txt' for reading!\r\n");
 80010de:	4820      	ldr	r0, [pc, #128]	@ (8001160 <main+0x110>)
 80010e0:	f7ff ff90 	bl	8001004 <myprintf>


  HAL_GPIO_WritePin(XEN_GPIO_Port, XEN_Pin,0);
 80010e4:	2200      	movs	r2, #0
 80010e6:	2120      	movs	r1, #32
 80010e8:	481e      	ldr	r0, [pc, #120]	@ (8001164 <main+0x114>)
 80010ea:	f001 fbc3 	bl	8002874 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(YEN_GPIO_Port, YEN_Pin,0);
 80010ee:	2200      	movs	r2, #0
 80010f0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80010f4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010f8:	f001 fbbc 	bl	8002874 <HAL_GPIO_WritePin>

  InitiateMotors();
 80010fc:	f000 fa0e 	bl	800151c <InitiateMotors>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (HAL_GPIO_ReadPin(SPI1_CD_GPIO_Port, SPI1_CD_Pin))
 8001100:	2180      	movs	r1, #128	@ 0x80
 8001102:	4819      	ldr	r0, [pc, #100]	@ (8001168 <main+0x118>)
 8001104:	f001 fb9e 	bl	8002844 <HAL_GPIO_ReadPin>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d0f8      	beq.n	8001100 <main+0xb0>
	  {
		  BYTE readBuf[100];
		  TCHAR* rres = f_gets((TCHAR*)readBuf, 100, &fil);
 800110e:	f107 0268 	add.w	r2, r7, #104	@ 0x68
 8001112:	1d3b      	adds	r3, r7, #4
 8001114:	2164      	movs	r1, #100	@ 0x64
 8001116:	4618      	mov	r0, r3
 8001118:	f007 fbe5 	bl	80088e6 <f_gets>
 800111c:	f8c7 04c8 	str.w	r0, [r7, #1224]	@ 0x4c8
		  if(rres != 0) {
 8001120:	f8d7 34c8 	ldr.w	r3, [r7, #1224]	@ 0x4c8
 8001124:	2b00      	cmp	r3, #0
 8001126:	d004      	beq.n	8001132 <main+0xe2>
			  GcommandParse((TCHAR*)readBuf);
 8001128:	1d3b      	adds	r3, r7, #4
 800112a:	4618      	mov	r0, r3
 800112c:	f000 fa54 	bl	80015d8 <GcommandParse>
 8001130:	e7e6      	b.n	8001100 <main+0xb0>
		  } else {
			f_close(&fil);
 8001132:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8001136:	4618      	mov	r0, r3
 8001138:	f007 fbab 	bl	8008892 <f_close>
			f_mount(NULL, "", 0);
 800113c:	2200      	movs	r2, #0
 800113e:	4904      	ldr	r1, [pc, #16]	@ (8001150 <main+0x100>)
 8001140:	2000      	movs	r0, #0
 8001142:	f006 ffe9 	bl	8008118 <f_mount>
			while(1){}
 8001146:	bf00      	nop
 8001148:	e7fd      	b.n	8001146 <main+0xf6>
 800114a:	bf00      	nop
 800114c:	0800bd30 	.word	0x0800bd30
 8001150:	0800bd50 	.word	0x0800bd50
 8001154:	0800bd54 	.word	0x0800bd54
 8001158:	0800bd6c 	.word	0x0800bd6c
 800115c:	0800bd78 	.word	0x0800bd78
 8001160:	0800bd8c 	.word	0x0800bd8c
 8001164:	48000400 	.word	0x48000400
 8001168:	48000800 	.word	0x48000800

0800116c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b096      	sub	sp, #88	@ 0x58
 8001170:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001172:	f107 0314 	add.w	r3, r7, #20
 8001176:	2244      	movs	r2, #68	@ 0x44
 8001178:	2100      	movs	r1, #0
 800117a:	4618      	mov	r0, r3
 800117c:	f008 fc26 	bl	80099cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001180:	463b      	mov	r3, r7
 8001182:	2200      	movs	r2, #0
 8001184:	601a      	str	r2, [r3, #0]
 8001186:	605a      	str	r2, [r3, #4]
 8001188:	609a      	str	r2, [r3, #8]
 800118a:	60da      	str	r2, [r3, #12]
 800118c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800118e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001192:	f001 fbc7 	bl	8002924 <HAL_PWREx_ControlVoltageScaling>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d001      	beq.n	80011a0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800119c:	f000 fd7e 	bl	8001c9c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011a0:	2302      	movs	r3, #2
 80011a2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011a4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80011a8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011aa:	2310      	movs	r3, #16
 80011ac:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011ae:	2302      	movs	r3, #2
 80011b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011b2:	2302      	movs	r3, #2
 80011b4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80011b6:	2301      	movs	r3, #1
 80011b8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80011ba:	230a      	movs	r3, #10
 80011bc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80011be:	2307      	movs	r3, #7
 80011c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80011c2:	2302      	movs	r3, #2
 80011c4:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80011c6:	2302      	movs	r3, #2
 80011c8:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011ca:	f107 0314 	add.w	r3, r7, #20
 80011ce:	4618      	mov	r0, r3
 80011d0:	f001 fbfe 	bl	80029d0 <HAL_RCC_OscConfig>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <SystemClock_Config+0x72>
  {
    Error_Handler();
 80011da:	f000 fd5f 	bl	8001c9c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011de:	230f      	movs	r3, #15
 80011e0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011e2:	2303      	movs	r3, #3
 80011e4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011e6:	2300      	movs	r3, #0
 80011e8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011ea:	2300      	movs	r3, #0
 80011ec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011ee:	2300      	movs	r3, #0
 80011f0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80011f2:	463b      	mov	r3, r7
 80011f4:	2104      	movs	r1, #4
 80011f6:	4618      	mov	r0, r3
 80011f8:	f001 ffc6 	bl	8003188 <HAL_RCC_ClockConfig>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001202:	f000 fd4b 	bl	8001c9c <Error_Handler>
  }
}
 8001206:	bf00      	nop
 8001208:	3758      	adds	r7, #88	@ 0x58
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
	...

08001210 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001214:	4b1b      	ldr	r3, [pc, #108]	@ (8001284 <MX_SPI1_Init+0x74>)
 8001216:	4a1c      	ldr	r2, [pc, #112]	@ (8001288 <MX_SPI1_Init+0x78>)
 8001218:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800121a:	4b1a      	ldr	r3, [pc, #104]	@ (8001284 <MX_SPI1_Init+0x74>)
 800121c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001220:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001222:	4b18      	ldr	r3, [pc, #96]	@ (8001284 <MX_SPI1_Init+0x74>)
 8001224:	2200      	movs	r2, #0
 8001226:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001228:	4b16      	ldr	r3, [pc, #88]	@ (8001284 <MX_SPI1_Init+0x74>)
 800122a:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800122e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001230:	4b14      	ldr	r3, [pc, #80]	@ (8001284 <MX_SPI1_Init+0x74>)
 8001232:	2202      	movs	r2, #2
 8001234:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001236:	4b13      	ldr	r3, [pc, #76]	@ (8001284 <MX_SPI1_Init+0x74>)
 8001238:	2201      	movs	r2, #1
 800123a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800123c:	4b11      	ldr	r3, [pc, #68]	@ (8001284 <MX_SPI1_Init+0x74>)
 800123e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001242:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001244:	4b0f      	ldr	r3, [pc, #60]	@ (8001284 <MX_SPI1_Init+0x74>)
 8001246:	2238      	movs	r2, #56	@ 0x38
 8001248:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800124a:	4b0e      	ldr	r3, [pc, #56]	@ (8001284 <MX_SPI1_Init+0x74>)
 800124c:	2200      	movs	r2, #0
 800124e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001250:	4b0c      	ldr	r3, [pc, #48]	@ (8001284 <MX_SPI1_Init+0x74>)
 8001252:	2200      	movs	r2, #0
 8001254:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001256:	4b0b      	ldr	r3, [pc, #44]	@ (8001284 <MX_SPI1_Init+0x74>)
 8001258:	2200      	movs	r2, #0
 800125a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 800125c:	4b09      	ldr	r3, [pc, #36]	@ (8001284 <MX_SPI1_Init+0x74>)
 800125e:	2207      	movs	r2, #7
 8001260:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001262:	4b08      	ldr	r3, [pc, #32]	@ (8001284 <MX_SPI1_Init+0x74>)
 8001264:	2200      	movs	r2, #0
 8001266:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001268:	4b06      	ldr	r3, [pc, #24]	@ (8001284 <MX_SPI1_Init+0x74>)
 800126a:	2200      	movs	r2, #0
 800126c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800126e:	4805      	ldr	r0, [pc, #20]	@ (8001284 <MX_SPI1_Init+0x74>)
 8001270:	f002 fe9c 	bl	8003fac <HAL_SPI_Init>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800127a:	f000 fd0f 	bl	8001c9c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800127e:	bf00      	nop
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	20000224 	.word	0x20000224
 8001288:	40013000 	.word	0x40013000

0800128c <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001290:	4b10      	ldr	r3, [pc, #64]	@ (80012d4 <MX_TIM16_Init+0x48>)
 8001292:	4a11      	ldr	r2, [pc, #68]	@ (80012d8 <MX_TIM16_Init+0x4c>)
 8001294:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 1000;
 8001296:	4b0f      	ldr	r3, [pc, #60]	@ (80012d4 <MX_TIM16_Init+0x48>)
 8001298:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800129c:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800129e:	4b0d      	ldr	r3, [pc, #52]	@ (80012d4 <MX_TIM16_Init+0x48>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 400;
 80012a4:	4b0b      	ldr	r3, [pc, #44]	@ (80012d4 <MX_TIM16_Init+0x48>)
 80012a6:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80012aa:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012ac:	4b09      	ldr	r3, [pc, #36]	@ (80012d4 <MX_TIM16_Init+0x48>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80012b2:	4b08      	ldr	r3, [pc, #32]	@ (80012d4 <MX_TIM16_Init+0x48>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012b8:	4b06      	ldr	r3, [pc, #24]	@ (80012d4 <MX_TIM16_Init+0x48>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80012be:	4805      	ldr	r0, [pc, #20]	@ (80012d4 <MX_TIM16_Init+0x48>)
 80012c0:	f003 fc10 	bl	8004ae4 <HAL_TIM_Base_Init>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 80012ca:	f000 fce7 	bl	8001c9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80012ce:	bf00      	nop
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	20000288 	.word	0x20000288
 80012d8:	40014400 	.word	0x40014400

080012dc <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80012e0:	4b10      	ldr	r3, [pc, #64]	@ (8001324 <MX_TIM17_Init+0x48>)
 80012e2:	4a11      	ldr	r2, [pc, #68]	@ (8001328 <MX_TIM17_Init+0x4c>)
 80012e4:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 1000;
 80012e6:	4b0f      	ldr	r3, [pc, #60]	@ (8001324 <MX_TIM17_Init+0x48>)
 80012e8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80012ec:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012ee:	4b0d      	ldr	r3, [pc, #52]	@ (8001324 <MX_TIM17_Init+0x48>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 400;
 80012f4:	4b0b      	ldr	r3, [pc, #44]	@ (8001324 <MX_TIM17_Init+0x48>)
 80012f6:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80012fa:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012fc:	4b09      	ldr	r3, [pc, #36]	@ (8001324 <MX_TIM17_Init+0x48>)
 80012fe:	2200      	movs	r2, #0
 8001300:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8001302:	4b08      	ldr	r3, [pc, #32]	@ (8001324 <MX_TIM17_Init+0x48>)
 8001304:	2200      	movs	r2, #0
 8001306:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001308:	4b06      	ldr	r3, [pc, #24]	@ (8001324 <MX_TIM17_Init+0x48>)
 800130a:	2200      	movs	r2, #0
 800130c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 800130e:	4805      	ldr	r0, [pc, #20]	@ (8001324 <MX_TIM17_Init+0x48>)
 8001310:	f003 fbe8 	bl	8004ae4 <HAL_TIM_Base_Init>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <MX_TIM17_Init+0x42>
  {
    Error_Handler();
 800131a:	f000 fcbf 	bl	8001c9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 800131e:	bf00      	nop
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	200002d4 	.word	0x200002d4
 8001328:	40014800 	.word	0x40014800

0800132c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001330:	4b14      	ldr	r3, [pc, #80]	@ (8001384 <MX_USART2_UART_Init+0x58>)
 8001332:	4a15      	ldr	r2, [pc, #84]	@ (8001388 <MX_USART2_UART_Init+0x5c>)
 8001334:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001336:	4b13      	ldr	r3, [pc, #76]	@ (8001384 <MX_USART2_UART_Init+0x58>)
 8001338:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800133c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800133e:	4b11      	ldr	r3, [pc, #68]	@ (8001384 <MX_USART2_UART_Init+0x58>)
 8001340:	2200      	movs	r2, #0
 8001342:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001344:	4b0f      	ldr	r3, [pc, #60]	@ (8001384 <MX_USART2_UART_Init+0x58>)
 8001346:	2200      	movs	r2, #0
 8001348:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800134a:	4b0e      	ldr	r3, [pc, #56]	@ (8001384 <MX_USART2_UART_Init+0x58>)
 800134c:	2200      	movs	r2, #0
 800134e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001350:	4b0c      	ldr	r3, [pc, #48]	@ (8001384 <MX_USART2_UART_Init+0x58>)
 8001352:	220c      	movs	r2, #12
 8001354:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001356:	4b0b      	ldr	r3, [pc, #44]	@ (8001384 <MX_USART2_UART_Init+0x58>)
 8001358:	2200      	movs	r2, #0
 800135a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800135c:	4b09      	ldr	r3, [pc, #36]	@ (8001384 <MX_USART2_UART_Init+0x58>)
 800135e:	2200      	movs	r2, #0
 8001360:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001362:	4b08      	ldr	r3, [pc, #32]	@ (8001384 <MX_USART2_UART_Init+0x58>)
 8001364:	2200      	movs	r2, #0
 8001366:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001368:	4b06      	ldr	r3, [pc, #24]	@ (8001384 <MX_USART2_UART_Init+0x58>)
 800136a:	2200      	movs	r2, #0
 800136c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800136e:	4805      	ldr	r0, [pc, #20]	@ (8001384 <MX_USART2_UART_Init+0x58>)
 8001370:	f003 fea2 	bl	80050b8 <HAL_UART_Init>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d001      	beq.n	800137e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800137a:	f000 fc8f 	bl	8001c9c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800137e:	bf00      	nop
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	20000320 	.word	0x20000320
 8001388:	40004400 	.word	0x40004400

0800138c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b08a      	sub	sp, #40	@ 0x28
 8001390:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001392:	f107 0314 	add.w	r3, r7, #20
 8001396:	2200      	movs	r2, #0
 8001398:	601a      	str	r2, [r3, #0]
 800139a:	605a      	str	r2, [r3, #4]
 800139c:	609a      	str	r2, [r3, #8]
 800139e:	60da      	str	r2, [r3, #12]
 80013a0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013a2:	4b5b      	ldr	r3, [pc, #364]	@ (8001510 <MX_GPIO_Init+0x184>)
 80013a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013a6:	4a5a      	ldr	r2, [pc, #360]	@ (8001510 <MX_GPIO_Init+0x184>)
 80013a8:	f043 0304 	orr.w	r3, r3, #4
 80013ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013ae:	4b58      	ldr	r3, [pc, #352]	@ (8001510 <MX_GPIO_Init+0x184>)
 80013b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013b2:	f003 0304 	and.w	r3, r3, #4
 80013b6:	613b      	str	r3, [r7, #16]
 80013b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013ba:	4b55      	ldr	r3, [pc, #340]	@ (8001510 <MX_GPIO_Init+0x184>)
 80013bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013be:	4a54      	ldr	r2, [pc, #336]	@ (8001510 <MX_GPIO_Init+0x184>)
 80013c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80013c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013c6:	4b52      	ldr	r3, [pc, #328]	@ (8001510 <MX_GPIO_Init+0x184>)
 80013c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80013ce:	60fb      	str	r3, [r7, #12]
 80013d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013d2:	4b4f      	ldr	r3, [pc, #316]	@ (8001510 <MX_GPIO_Init+0x184>)
 80013d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013d6:	4a4e      	ldr	r2, [pc, #312]	@ (8001510 <MX_GPIO_Init+0x184>)
 80013d8:	f043 0301 	orr.w	r3, r3, #1
 80013dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013de:	4b4c      	ldr	r3, [pc, #304]	@ (8001510 <MX_GPIO_Init+0x184>)
 80013e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013e2:	f003 0301 	and.w	r3, r3, #1
 80013e6:	60bb      	str	r3, [r7, #8]
 80013e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ea:	4b49      	ldr	r3, [pc, #292]	@ (8001510 <MX_GPIO_Init+0x184>)
 80013ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013ee:	4a48      	ldr	r2, [pc, #288]	@ (8001510 <MX_GPIO_Init+0x184>)
 80013f0:	f043 0302 	orr.w	r3, r3, #2
 80013f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013f6:	4b46      	ldr	r3, [pc, #280]	@ (8001510 <MX_GPIO_Init+0x184>)
 80013f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013fa:	f003 0302 	and.w	r3, r3, #2
 80013fe:	607b      	str	r3, [r7, #4]
 8001400:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, YPUL_Pin|XDIR_Pin|XEN_Pin, GPIO_PIN_RESET);
 8001402:	2200      	movs	r2, #0
 8001404:	f44f 6186 	mov.w	r1, #1072	@ 0x430
 8001408:	4842      	ldr	r0, [pc, #264]	@ (8001514 <MX_GPIO_Init+0x188>)
 800140a:	f001 fa33 	bl	8002874 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, YEN_Pin|YDIR_Pin|XPUL_Pin, GPIO_PIN_RESET);
 800140e:	2200      	movs	r2, #0
 8001410:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 8001414:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001418:	f001 fa2c 	bl	8002874 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 800141c:	2201      	movs	r2, #1
 800141e:	2140      	movs	r1, #64	@ 0x40
 8001420:	483c      	ldr	r0, [pc, #240]	@ (8001514 <MX_GPIO_Init+0x188>)
 8001422:	f001 fa27 	bl	8002874 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001426:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800142a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800142c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001430:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001432:	2300      	movs	r3, #0
 8001434:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001436:	f107 0314 	add.w	r3, r7, #20
 800143a:	4619      	mov	r1, r3
 800143c:	4836      	ldr	r0, [pc, #216]	@ (8001518 <MX_GPIO_Init+0x18c>)
 800143e:	f001 f857 	bl	80024f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001442:	2301      	movs	r3, #1
 8001444:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001446:	2300      	movs	r3, #0
 8001448:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144a:	2300      	movs	r3, #0
 800144c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800144e:	f107 0314 	add.w	r3, r7, #20
 8001452:	4619      	mov	r1, r3
 8001454:	4830      	ldr	r0, [pc, #192]	@ (8001518 <MX_GPIO_Init+0x18c>)
 8001456:	f001 f84b 	bl	80024f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : shutdownButton_Pin */
  GPIO_InitStruct.Pin = shutdownButton_Pin;
 800145a:	2301      	movs	r3, #1
 800145c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800145e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001462:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001464:	2300      	movs	r3, #0
 8001466:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(shutdownButton_GPIO_Port, &GPIO_InitStruct);
 8001468:	f107 0314 	add.w	r3, r7, #20
 800146c:	4619      	mov	r1, r3
 800146e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001472:	f001 f83d 	bl	80024f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : YPUL_Pin XDIR_Pin XEN_Pin */
  GPIO_InitStruct.Pin = YPUL_Pin|XDIR_Pin|XEN_Pin;
 8001476:	f44f 6386 	mov.w	r3, #1072	@ 0x430
 800147a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800147c:	2301      	movs	r3, #1
 800147e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001480:	2300      	movs	r3, #0
 8001482:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001484:	2300      	movs	r3, #0
 8001486:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001488:	f107 0314 	add.w	r3, r7, #20
 800148c:	4619      	mov	r1, r3
 800148e:	4821      	ldr	r0, [pc, #132]	@ (8001514 <MX_GPIO_Init+0x188>)
 8001490:	f001 f82e 	bl	80024f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CD_Pin */
  GPIO_InitStruct.Pin = SPI1_CD_Pin;
 8001494:	2380      	movs	r3, #128	@ 0x80
 8001496:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001498:	2300      	movs	r3, #0
 800149a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800149c:	2301      	movs	r3, #1
 800149e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SPI1_CD_GPIO_Port, &GPIO_InitStruct);
 80014a0:	f107 0314 	add.w	r3, r7, #20
 80014a4:	4619      	mov	r1, r3
 80014a6:	481c      	ldr	r0, [pc, #112]	@ (8001518 <MX_GPIO_Init+0x18c>)
 80014a8:	f001 f822 	bl	80024f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : YEN_Pin YDIR_Pin XPUL_Pin */
  GPIO_InitStruct.Pin = YEN_Pin|YDIR_Pin|XPUL_Pin;
 80014ac:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 80014b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014b2:	2301      	movs	r3, #1
 80014b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b6:	2300      	movs	r3, #0
 80014b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ba:	2300      	movs	r3, #0
 80014bc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014be:	f107 0314 	add.w	r3, r7, #20
 80014c2:	4619      	mov	r1, r3
 80014c4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014c8:	f001 f812 	bl	80024f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 80014cc:	2340      	movs	r3, #64	@ 0x40
 80014ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014d0:	2301      	movs	r3, #1
 80014d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014d4:	2301      	movs	r3, #1
 80014d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d8:	2300      	movs	r3, #0
 80014da:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 80014dc:	f107 0314 	add.w	r3, r7, #20
 80014e0:	4619      	mov	r1, r3
 80014e2:	480c      	ldr	r0, [pc, #48]	@ (8001514 <MX_GPIO_Init+0x188>)
 80014e4:	f001 f804 	bl	80024f0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 10, 0);
 80014e8:	2200      	movs	r2, #0
 80014ea:	210a      	movs	r1, #10
 80014ec:	2006      	movs	r0, #6
 80014ee:	f000 ffd5 	bl	800249c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80014f2:	2006      	movs	r0, #6
 80014f4:	f000 ffee 	bl	80024d4 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80014f8:	2200      	movs	r2, #0
 80014fa:	2100      	movs	r1, #0
 80014fc:	2028      	movs	r0, #40	@ 0x28
 80014fe:	f000 ffcd 	bl	800249c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001502:	2028      	movs	r0, #40	@ 0x28
 8001504:	f000 ffe6 	bl	80024d4 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001508:	bf00      	nop
 800150a:	3728      	adds	r7, #40	@ 0x28
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	40021000 	.word	0x40021000
 8001514:	48000400 	.word	0x48000400
 8001518:	48000800 	.word	0x48000800

0800151c <InitiateMotors>:

/* USER CODE BEGIN 4 */

void InitiateMotors()
{
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_PRESCALER(&htim16, 100);
 8001520:	4b07      	ldr	r3, [pc, #28]	@ (8001540 <InitiateMotors+0x24>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	2264      	movs	r2, #100	@ 0x64
 8001526:	629a      	str	r2, [r3, #40]	@ 0x28
	__HAL_TIM_SET_PRESCALER(&htim17, 100);
 8001528:	4b06      	ldr	r3, [pc, #24]	@ (8001544 <InitiateMotors+0x28>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	2264      	movs	r2, #100	@ 0x64
 800152e:	629a      	str	r2, [r3, #40]	@ 0x28

	// Starts the motor timers
	  HAL_TIM_Base_Start_IT(&htim16);
 8001530:	4803      	ldr	r0, [pc, #12]	@ (8001540 <InitiateMotors+0x24>)
 8001532:	f003 fb2f 	bl	8004b94 <HAL_TIM_Base_Start_IT>
	  HAL_TIM_Base_Start_IT(&htim17);
 8001536:	4803      	ldr	r0, [pc, #12]	@ (8001544 <InitiateMotors+0x28>)
 8001538:	f003 fb2c 	bl	8004b94 <HAL_TIM_Base_Start_IT>
}
 800153c:	bf00      	nop
 800153e:	bd80      	pop	{r7, pc}
 8001540:	20000288 	.word	0x20000288
 8001544:	200002d4 	.word	0x200002d4

08001548 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
 800154e:	4603      	mov	r3, r0
 8001550:	80fb      	strh	r3, [r7, #6]

	if (GPIO_Pin == shutdownButton_Pin)
 8001552:	88fb      	ldrh	r3, [r7, #6]
 8001554:	2b01      	cmp	r3, #1
 8001556:	d12c      	bne.n	80015b2 <HAL_GPIO_EXTI_Callback+0x6a>
	{
		if (setup == 1)
 8001558:	4b18      	ldr	r3, [pc, #96]	@ (80015bc <HAL_GPIO_EXTI_Callback+0x74>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	2b01      	cmp	r3, #1
 800155e:	d114      	bne.n	800158a <HAL_GPIO_EXTI_Callback+0x42>
		{
			HAL_TIM_Base_Stop_IT(&htim16);
 8001560:	4817      	ldr	r0, [pc, #92]	@ (80015c0 <HAL_GPIO_EXTI_Callback+0x78>)
 8001562:	f003 fb87 	bl	8004c74 <HAL_TIM_Base_Stop_IT>
			HAL_TIM_Base_Stop_IT(&htim17);
 8001566:	4817      	ldr	r0, [pc, #92]	@ (80015c4 <HAL_GPIO_EXTI_Callback+0x7c>)
 8001568:	f003 fb84 	bl	8004c74 <HAL_TIM_Base_Stop_IT>

			feed = 5000;
 800156c:	4b16      	ldr	r3, [pc, #88]	@ (80015c8 <HAL_GPIO_EXTI_Callback+0x80>)
 800156e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001572:	601a      	str	r2, [r3, #0]
			LaserEngrave(50, 50);
 8001574:	2132      	movs	r1, #50	@ 0x32
 8001576:	2032      	movs	r0, #50	@ 0x32
 8001578:	f000 fa56 	bl	8001a28 <LaserEngrave>
			Xcurrent = 0;
 800157c:	4b13      	ldr	r3, [pc, #76]	@ (80015cc <HAL_GPIO_EXTI_Callback+0x84>)
 800157e:	2200      	movs	r2, #0
 8001580:	601a      	str	r2, [r3, #0]
			Ycurrent = 0;
 8001582:	4b13      	ldr	r3, [pc, #76]	@ (80015d0 <HAL_GPIO_EXTI_Callback+0x88>)
 8001584:	2200      	movs	r2, #0
 8001586:	601a      	str	r2, [r3, #0]
			HAL_TIM_Base_Stop_IT(&htim17);

			while(1){}
		}
	}
}
 8001588:	e013      	b.n	80015b2 <HAL_GPIO_EXTI_Callback+0x6a>
			HAL_GPIO_WritePin(XEN_GPIO_Port, XEN_Pin, 1);
 800158a:	2201      	movs	r2, #1
 800158c:	2120      	movs	r1, #32
 800158e:	4811      	ldr	r0, [pc, #68]	@ (80015d4 <HAL_GPIO_EXTI_Callback+0x8c>)
 8001590:	f001 f970 	bl	8002874 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YEN_GPIO_Port, YEN_Pin, 1);
 8001594:	2201      	movs	r2, #1
 8001596:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800159a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800159e:	f001 f969 	bl	8002874 <HAL_GPIO_WritePin>
			HAL_TIM_Base_Stop_IT(&htim16);
 80015a2:	4807      	ldr	r0, [pc, #28]	@ (80015c0 <HAL_GPIO_EXTI_Callback+0x78>)
 80015a4:	f003 fb66 	bl	8004c74 <HAL_TIM_Base_Stop_IT>
			HAL_TIM_Base_Stop_IT(&htim17);
 80015a8:	4806      	ldr	r0, [pc, #24]	@ (80015c4 <HAL_GPIO_EXTI_Callback+0x7c>)
 80015aa:	f003 fb63 	bl	8004c74 <HAL_TIM_Base_Stop_IT>
			while(1){}
 80015ae:	bf00      	nop
 80015b0:	e7fd      	b.n	80015ae <HAL_GPIO_EXTI_Callback+0x66>
}
 80015b2:	bf00      	nop
 80015b4:	3708      	adds	r7, #8
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	20000008 	.word	0x20000008
 80015c0:	20000288 	.word	0x20000288
 80015c4:	200002d4 	.word	0x200002d4
 80015c8:	200003b8 	.word	0x200003b8
 80015cc:	200003a8 	.word	0x200003a8
 80015d0:	200003ac 	.word	0x200003ac
 80015d4:	48000400 	.word	0x48000400

080015d8 <GcommandParse>:

void GcommandParse(TCHAR* line1)
{
 80015d8:	b590      	push	{r4, r7, lr}
 80015da:	b09f      	sub	sp, #124	@ 0x7c
 80015dc:	af04      	add	r7, sp, #16
 80015de:	6078      	str	r0, [r7, #4]

	  // Creates local variables for the different possible commands in Gcode (max 10 characters)
	  char Gcommand[10] = "";
 80015e0:	2300      	movs	r3, #0
 80015e2:	657b      	str	r3, [r7, #84]	@ 0x54
 80015e4:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80015e8:	2200      	movs	r2, #0
 80015ea:	601a      	str	r2, [r3, #0]
 80015ec:	809a      	strh	r2, [r3, #4]
	  char Xcoordinate[10] = "";
 80015ee:	2300      	movs	r3, #0
 80015f0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80015f2:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80015f6:	2200      	movs	r2, #0
 80015f8:	601a      	str	r2, [r3, #0]
 80015fa:	809a      	strh	r2, [r3, #4]
	  char Ycoordinate[10] = "";
 80015fc:	2300      	movs	r3, #0
 80015fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001600:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001604:	2200      	movs	r2, #0
 8001606:	601a      	str	r2, [r3, #0]
 8001608:	809a      	strh	r2, [r3, #4]
	  char Zcoordinate[10] = "";
 800160a:	2300      	movs	r3, #0
 800160c:	633b      	str	r3, [r7, #48]	@ 0x30
 800160e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001612:	2200      	movs	r2, #0
 8001614:	601a      	str	r2, [r3, #0]
 8001616:	809a      	strh	r2, [r3, #4]
	  char feedRate[10] = "";
 8001618:	2300      	movs	r3, #0
 800161a:	627b      	str	r3, [r7, #36]	@ 0x24
 800161c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001620:	2200      	movs	r2, #0
 8001622:	601a      	str	r2, [r3, #0]
 8001624:	809a      	strh	r2, [r3, #4]
	  char laserSpeed[10] = "";
 8001626:	2300      	movs	r3, #0
 8001628:	61bb      	str	r3, [r7, #24]
 800162a:	f107 031c 	add.w	r3, r7, #28
 800162e:	2200      	movs	r2, #0
 8001630:	601a      	str	r2, [r3, #0]
 8001632:	809a      	strh	r2, [r3, #4]

	  int i = 0;
 8001634:	2300      	movs	r3, #0
 8001636:	667b      	str	r3, [r7, #100]	@ 0x64
	  // Initiates a for loop which loops each character of the Gcode line
	  while (1)
	  {

		  // Creates a temporary variable for the Gcode command and the value attached to it
		  char command = line1[i];	// assigns the first value of the Gcode as the command
 8001638:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800163a:	687a      	ldr	r2, [r7, #4]
 800163c:	4413      	add	r3, r2
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		  char newValue[10] = "";
 8001644:	2300      	movs	r3, #0
 8001646:	60fb      	str	r3, [r7, #12]
 8001648:	f107 0310 	add.w	r3, r7, #16
 800164c:	2200      	movs	r2, #0
 800164e:	601a      	str	r2, [r3, #0]
 8001650:	809a      	strh	r2, [r3, #4]

		  int j = 0;
 8001652:	2300      	movs	r3, #0
 8001654:	663b      	str	r3, [r7, #96]	@ 0x60
		  i++;
 8001656:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001658:	3301      	adds	r3, #1
 800165a:	667b      	str	r3, [r7, #100]	@ 0x64

		  while ((line1[i] != ' ') && (line1[i] != '\0') && (line1[i] != '\n'))	// while loop that loops through the rest of the command and stores the value in newValue
 800165c:	e00f      	b.n	800167e <GcommandParse+0xa6>
		  {

			  newValue[j] = line1[i];
 800165e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001660:	687a      	ldr	r2, [r7, #4]
 8001662:	4413      	add	r3, r2
 8001664:	7819      	ldrb	r1, [r3, #0]
 8001666:	f107 020c 	add.w	r2, r7, #12
 800166a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800166c:	4413      	add	r3, r2
 800166e:	460a      	mov	r2, r1
 8001670:	701a      	strb	r2, [r3, #0]
			  i++;
 8001672:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001674:	3301      	adds	r3, #1
 8001676:	667b      	str	r3, [r7, #100]	@ 0x64
			  j++;
 8001678:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800167a:	3301      	adds	r3, #1
 800167c:	663b      	str	r3, [r7, #96]	@ 0x60
		  while ((line1[i] != ' ') && (line1[i] != '\0') && (line1[i] != '\n'))	// while loop that loops through the rest of the command and stores the value in newValue
 800167e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001680:	687a      	ldr	r2, [r7, #4]
 8001682:	4413      	add	r3, r2
 8001684:	781b      	ldrb	r3, [r3, #0]
 8001686:	2b20      	cmp	r3, #32
 8001688:	d00b      	beq.n	80016a2 <GcommandParse+0xca>
 800168a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800168c:	687a      	ldr	r2, [r7, #4]
 800168e:	4413      	add	r3, r2
 8001690:	781b      	ldrb	r3, [r3, #0]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d005      	beq.n	80016a2 <GcommandParse+0xca>
 8001696:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001698:	687a      	ldr	r2, [r7, #4]
 800169a:	4413      	add	r3, r2
 800169c:	781b      	ldrb	r3, [r3, #0]
 800169e:	2b0a      	cmp	r3, #10
 80016a0:	d1dd      	bne.n	800165e <GcommandParse+0x86>
		  }
		  newValue[j] = '\0';	//adds the null operator to the end of the newValue
 80016a2:	f107 020c 	add.w	r2, r7, #12
 80016a6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80016a8:	4413      	add	r3, r2
 80016aa:	2200      	movs	r2, #0
 80016ac:	701a      	strb	r2, [r3, #0]

		  // Switch statement for the value of command to split the current word into it's variable
		  switch (command)
 80016ae:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80016b2:	3b46      	subs	r3, #70	@ 0x46
 80016b4:	2b14      	cmp	r3, #20
 80016b6:	d86c      	bhi.n	8001792 <GcommandParse+0x1ba>
 80016b8:	a201      	add	r2, pc, #4	@ (adr r2, 80016c0 <GcommandParse+0xe8>)
 80016ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016be:	bf00      	nop
 80016c0:	08001781 	.word	0x08001781
 80016c4:	08001715 	.word	0x08001715
 80016c8:	08001793 	.word	0x08001793
 80016cc:	08001793 	.word	0x08001793
 80016d0:	08001793 	.word	0x08001793
 80016d4:	08001793 	.word	0x08001793
 80016d8:	08001793 	.word	0x08001793
 80016dc:	0800175d 	.word	0x0800175d
 80016e0:	08001793 	.word	0x08001793
 80016e4:	08001793 	.word	0x08001793
 80016e8:	08001793 	.word	0x08001793
 80016ec:	08001793 	.word	0x08001793
 80016f0:	08001793 	.word	0x08001793
 80016f4:	0800176f 	.word	0x0800176f
 80016f8:	08001793 	.word	0x08001793
 80016fc:	08001793 	.word	0x08001793
 8001700:	08001793 	.word	0x08001793
 8001704:	08001793 	.word	0x08001793
 8001708:	08001727 	.word	0x08001727
 800170c:	08001739 	.word	0x08001739
 8001710:	0800174b 	.word	0x0800174b
		  {
		  case 'G':
			  strncpy(Gcommand, newValue, 10);	// copies the value in newValue to the Gcommand variable
 8001714:	f107 010c 	add.w	r1, r7, #12
 8001718:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800171c:	220a      	movs	r2, #10
 800171e:	4618      	mov	r0, r3
 8001720:	f008 f96e 	bl	8009a00 <strncpy>
				break;
 8001724:	e036      	b.n	8001794 <GcommandParse+0x1bc>
		  case 'X':
			  strncpy(Xcoordinate, newValue, 10);	// copies the value in newValue to the Xcoordinate variable
 8001726:	f107 010c 	add.w	r1, r7, #12
 800172a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800172e:	220a      	movs	r2, #10
 8001730:	4618      	mov	r0, r3
 8001732:	f008 f965 	bl	8009a00 <strncpy>
				break;
 8001736:	e02d      	b.n	8001794 <GcommandParse+0x1bc>
		  case 'Y':
			  strncpy(Ycoordinate, newValue, 10);	// copies the value in newValue to the Ycoordinate variable
 8001738:	f107 010c 	add.w	r1, r7, #12
 800173c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001740:	220a      	movs	r2, #10
 8001742:	4618      	mov	r0, r3
 8001744:	f008 f95c 	bl	8009a00 <strncpy>
				break;
 8001748:	e024      	b.n	8001794 <GcommandParse+0x1bc>
		  case 'Z':
			  strncpy(Zcoordinate, newValue, 10);	// copies the value in newValue to the Zcoordinate variable
 800174a:	f107 010c 	add.w	r1, r7, #12
 800174e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001752:	220a      	movs	r2, #10
 8001754:	4618      	mov	r0, r3
 8001756:	f008 f953 	bl	8009a00 <strncpy>
				break;
 800175a:	e01b      	b.n	8001794 <GcommandParse+0x1bc>
		  case 'M':
			  strncpy(Gcommand, newValue, 10);	// copies the value in newValue to the Mcommand variable
 800175c:	f107 010c 	add.w	r1, r7, #12
 8001760:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001764:	220a      	movs	r2, #10
 8001766:	4618      	mov	r0, r3
 8001768:	f008 f94a 	bl	8009a00 <strncpy>
				break;
 800176c:	e012      	b.n	8001794 <GcommandParse+0x1bc>
		  case 'S':
			  strncpy(laserSpeed, newValue, 10);	// copies the value in newValue to the laserSpeed variable
 800176e:	f107 010c 	add.w	r1, r7, #12
 8001772:	f107 0318 	add.w	r3, r7, #24
 8001776:	220a      	movs	r2, #10
 8001778:	4618      	mov	r0, r3
 800177a:	f008 f941 	bl	8009a00 <strncpy>
				break;
 800177e:	e009      	b.n	8001794 <GcommandParse+0x1bc>
		  case 'F':
			  strncpy(feedRate, newValue, 10);	// copies the value in newValue to the feedRate variable
 8001780:	f107 010c 	add.w	r1, r7, #12
 8001784:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001788:	220a      	movs	r2, #10
 800178a:	4618      	mov	r0, r3
 800178c:	f008 f938 	bl	8009a00 <strncpy>
				break;
 8001790:	e000      	b.n	8001794 <GcommandParse+0x1bc>
		  case 'R':
				break;
		  default:
				break;
 8001792:	bf00      	nop
		  }
		  if (line1[i] == '\n')
 8001794:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001796:	687a      	ldr	r2, [r7, #4]
 8001798:	4413      	add	r3, r2
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	2b0a      	cmp	r3, #10
 800179e:	d109      	bne.n	80017b4 <GcommandParse+0x1dc>
			  break;
		  i++;
	  }
	  if (strcmp(Gcommand,"G")){
 80017a0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80017a4:	4921      	ldr	r1, [pc, #132]	@ (800182c <GcommandParse+0x254>)
 80017a6:	4618      	mov	r0, r3
 80017a8:	f7fe fd12 	bl	80001d0 <strcmp>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d104      	bne.n	80017bc <GcommandParse+0x1e4>
 80017b2:	e028      	b.n	8001806 <GcommandParse+0x22e>
		  i++;
 80017b4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80017b6:	3301      	adds	r3, #1
 80017b8:	667b      	str	r3, [r7, #100]	@ 0x64
	  {
 80017ba:	e73d      	b.n	8001638 <GcommandParse+0x60>
		  GcommandExecute(Gcommand, Xcoordinate, Ycoordinate, Zcoordinate, feedRate, laserSpeed);	// Calls the Gcommand Execute function which will execute the given command
 80017bc:	f107 0430 	add.w	r4, r7, #48	@ 0x30
 80017c0:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 80017c4:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 80017c8:	f107 0054 	add.w	r0, r7, #84	@ 0x54
 80017cc:	f107 0318 	add.w	r3, r7, #24
 80017d0:	9301      	str	r3, [sp, #4]
 80017d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017d6:	9300      	str	r3, [sp, #0]
 80017d8:	4623      	mov	r3, r4
 80017da:	f000 f82d 	bl	8001838 <GcommandExecute>
		  myprintf("Gcommand: %s Xcoordinate: %s Ycoordinate: %s Zcoordinate: %s feedRate: %s laserSpeed %s\n", Gcommand, Xcoordinate, Ycoordinate, Zcoordinate, feedRate, laserSpeed);
 80017de:	f107 003c 	add.w	r0, r7, #60	@ 0x3c
 80017e2:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 80017e6:	f107 0154 	add.w	r1, r7, #84	@ 0x54
 80017ea:	f107 0318 	add.w	r3, r7, #24
 80017ee:	9302      	str	r3, [sp, #8]
 80017f0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017f4:	9301      	str	r3, [sp, #4]
 80017f6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80017fa:	9300      	str	r3, [sp, #0]
 80017fc:	4603      	mov	r3, r0
 80017fe:	480c      	ldr	r0, [pc, #48]	@ (8001830 <GcommandParse+0x258>)
 8001800:	f7ff fc00 	bl	8001004 <myprintf>
	  }
	  else if (strcmp(Gcommand,"M")){
		  McommandExecute(Gcommand);
	  }
}
 8001804:	e00d      	b.n	8001822 <GcommandParse+0x24a>
	  else if (strcmp(Gcommand,"M")){
 8001806:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800180a:	490a      	ldr	r1, [pc, #40]	@ (8001834 <GcommandParse+0x25c>)
 800180c:	4618      	mov	r0, r3
 800180e:	f7fe fcdf 	bl	80001d0 <strcmp>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d004      	beq.n	8001822 <GcommandParse+0x24a>
		  McommandExecute(Gcommand);
 8001818:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800181c:	4618      	mov	r0, r3
 800181e:	f000 f8eb 	bl	80019f8 <McommandExecute>
}
 8001822:	bf00      	nop
 8001824:	376c      	adds	r7, #108	@ 0x6c
 8001826:	46bd      	mov	sp, r7
 8001828:	bd90      	pop	{r4, r7, pc}
 800182a:	bf00      	nop
 800182c:	0800bdbc 	.word	0x0800bdbc
 8001830:	0800bdc0 	.word	0x0800bdc0
 8001834:	0800be1c 	.word	0x0800be1c

08001838 <GcommandExecute>:
	*s = '\0';
}

// Command Execute takes the parameters from the Gcode line and controls the motors accordingly
void GcommandExecute(char Gcommand[], char Xcommand[], char Ycommand[], char Zcommand[], char feedRate[], char laserSpeed[])
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b088      	sub	sp, #32
 800183c:	af00      	add	r7, sp, #0
 800183e:	60f8      	str	r0, [r7, #12]
 8001840:	60b9      	str	r1, [r7, #8]
 8001842:	607a      	str	r2, [r7, #4]
 8001844:	603b      	str	r3, [r7, #0]

	if ((!strcmp(Gcommand,"0")) || (!strcmp(Gcommand,"1")))	// If the Gcode command is G0, runs with rapid positioning (full speed move)
 8001846:	4962      	ldr	r1, [pc, #392]	@ (80019d0 <GcommandExecute+0x198>)
 8001848:	68f8      	ldr	r0, [r7, #12]
 800184a:	f7fe fcc1 	bl	80001d0 <strcmp>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	d007      	beq.n	8001864 <GcommandExecute+0x2c>
 8001854:	495f      	ldr	r1, [pc, #380]	@ (80019d4 <GcommandExecute+0x19c>)
 8001856:	68f8      	ldr	r0, [r7, #12]
 8001858:	f7fe fcba 	bl	80001d0 <strcmp>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	f040 80ac 	bne.w	80019bc <GcommandExecute+0x184>
	{
		if (Xcommand[0] != '\0')
 8001864:	68bb      	ldr	r3, [r7, #8]
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d013      	beq.n	8001894 <GcommandExecute+0x5c>
		{
			Xend = ((1600 / 43.39) * atof(Xcommand));	// Converts Xcommand to an int, changes units to .1 mms and updates the global variable
 800186c:	68b8      	ldr	r0, [r7, #8]
 800186e:	f007 f8d4 	bl	8008a1a <atof>
 8001872:	ec51 0b10 	vmov	r0, r1, d0
 8001876:	a354      	add	r3, pc, #336	@ (adr r3, 80019c8 <GcommandExecute+0x190>)
 8001878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800187c:	f7fe fecc 	bl	8000618 <__aeabi_dmul>
 8001880:	4602      	mov	r2, r0
 8001882:	460b      	mov	r3, r1
 8001884:	4610      	mov	r0, r2
 8001886:	4619      	mov	r1, r3
 8001888:	f7ff f976 	bl	8000b78 <__aeabi_d2iz>
 800188c:	4603      	mov	r3, r0
 800188e:	4a52      	ldr	r2, [pc, #328]	@ (80019d8 <GcommandExecute+0x1a0>)
 8001890:	6013      	str	r3, [r2, #0]
 8001892:	e003      	b.n	800189c <GcommandExecute+0x64>
		} else
		{
			Xend = Xcurrent;
 8001894:	4b51      	ldr	r3, [pc, #324]	@ (80019dc <GcommandExecute+0x1a4>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a4f      	ldr	r2, [pc, #316]	@ (80019d8 <GcommandExecute+0x1a0>)
 800189a:	6013      	str	r3, [r2, #0]
		}
		if (Ycommand[0] != '\0')
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d013      	beq.n	80018cc <GcommandExecute+0x94>
		{
			Yend = ((1600 / 43.39) * atof(Ycommand));	// Converts Ycommand to an int, changes units to .1 mms and updates the global variable
 80018a4:	6878      	ldr	r0, [r7, #4]
 80018a6:	f007 f8b8 	bl	8008a1a <atof>
 80018aa:	ec51 0b10 	vmov	r0, r1, d0
 80018ae:	a346      	add	r3, pc, #280	@ (adr r3, 80019c8 <GcommandExecute+0x190>)
 80018b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018b4:	f7fe feb0 	bl	8000618 <__aeabi_dmul>
 80018b8:	4602      	mov	r2, r0
 80018ba:	460b      	mov	r3, r1
 80018bc:	4610      	mov	r0, r2
 80018be:	4619      	mov	r1, r3
 80018c0:	f7ff f95a 	bl	8000b78 <__aeabi_d2iz>
 80018c4:	4603      	mov	r3, r0
 80018c6:	4a46      	ldr	r2, [pc, #280]	@ (80019e0 <GcommandExecute+0x1a8>)
 80018c8:	6013      	str	r3, [r2, #0]
 80018ca:	e003      	b.n	80018d4 <GcommandExecute+0x9c>
		} else
		{
			Yend = Ycurrent;
 80018cc:	4b45      	ldr	r3, [pc, #276]	@ (80019e4 <GcommandExecute+0x1ac>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a43      	ldr	r2, [pc, #268]	@ (80019e0 <GcommandExecute+0x1a8>)
 80018d2:	6013      	str	r3, [r2, #0]
		}

		// Calculates distance to be traveled
		float Xdistance = Xend - Xcurrent;
 80018d4:	4b40      	ldr	r3, [pc, #256]	@ (80019d8 <GcommandExecute+0x1a0>)
 80018d6:	681a      	ldr	r2, [r3, #0]
 80018d8:	4b40      	ldr	r3, [pc, #256]	@ (80019dc <GcommandExecute+0x1a4>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	1ad3      	subs	r3, r2, r3
 80018de:	ee07 3a90 	vmov	s15, r3
 80018e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018e6:	edc7 7a07 	vstr	s15, [r7, #28]
		float Ydistance = Yend - Ycurrent;
 80018ea:	4b3d      	ldr	r3, [pc, #244]	@ (80019e0 <GcommandExecute+0x1a8>)
 80018ec:	681a      	ldr	r2, [r3, #0]
 80018ee:	4b3d      	ldr	r3, [pc, #244]	@ (80019e4 <GcommandExecute+0x1ac>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	1ad3      	subs	r3, r2, r3
 80018f4:	ee07 3a90 	vmov	s15, r3
 80018f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018fc:	edc7 7a06 	vstr	s15, [r7, #24]

		// Updates the Direction variable and writes to the pin
		if (Xdistance > 0)
 8001900:	edd7 7a07 	vldr	s15, [r7, #28]
 8001904:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001908:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800190c:	dd08      	ble.n	8001920 <GcommandExecute+0xe8>
		{
			XDIR = 1;
 800190e:	4b36      	ldr	r3, [pc, #216]	@ (80019e8 <GcommandExecute+0x1b0>)
 8001910:	2201      	movs	r2, #1
 8001912:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(XDIR_GPIO_Port, XDIR_Pin, 1);
 8001914:	2201      	movs	r2, #1
 8001916:	2110      	movs	r1, #16
 8001918:	4834      	ldr	r0, [pc, #208]	@ (80019ec <GcommandExecute+0x1b4>)
 800191a:	f000 ffab 	bl	8002874 <HAL_GPIO_WritePin>
 800191e:	e00e      	b.n	800193e <GcommandExecute+0x106>
		} else if (Xdistance < 0)
 8001920:	edd7 7a07 	vldr	s15, [r7, #28]
 8001924:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001928:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800192c:	d507      	bpl.n	800193e <GcommandExecute+0x106>
		{
			XDIR = 0;
 800192e:	4b2e      	ldr	r3, [pc, #184]	@ (80019e8 <GcommandExecute+0x1b0>)
 8001930:	2200      	movs	r2, #0
 8001932:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(XDIR_GPIO_Port, XDIR_Pin, 0);
 8001934:	2200      	movs	r2, #0
 8001936:	2110      	movs	r1, #16
 8001938:	482c      	ldr	r0, [pc, #176]	@ (80019ec <GcommandExecute+0x1b4>)
 800193a:	f000 ff9b 	bl	8002874 <HAL_GPIO_WritePin>
		}

		if (Ydistance > 0)
 800193e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001942:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001946:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800194a:	dd0a      	ble.n	8001962 <GcommandExecute+0x12a>
		{
			YDIR = 1;
 800194c:	4b28      	ldr	r3, [pc, #160]	@ (80019f0 <GcommandExecute+0x1b8>)
 800194e:	2201      	movs	r2, #1
 8001950:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(YDIR_GPIO_Port, YDIR_Pin, 1);
 8001952:	2201      	movs	r2, #1
 8001954:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001958:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800195c:	f000 ff8a 	bl	8002874 <HAL_GPIO_WritePin>
 8001960:	e010      	b.n	8001984 <GcommandExecute+0x14c>
		} else if (Ydistance < 0)
 8001962:	edd7 7a06 	vldr	s15, [r7, #24]
 8001966:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800196a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800196e:	d509      	bpl.n	8001984 <GcommandExecute+0x14c>
		{
			YDIR = 0;
 8001970:	4b1f      	ldr	r3, [pc, #124]	@ (80019f0 <GcommandExecute+0x1b8>)
 8001972:	2200      	movs	r2, #0
 8001974:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(YDIR_GPIO_Port, YDIR_Pin, 0);
 8001976:	2200      	movs	r2, #0
 8001978:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800197c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001980:	f000 ff78 	bl	8002874 <HAL_GPIO_WritePin>
		}

		int laser = atoi(laserSpeed);	// Converts laserSpeed to an int
 8001984:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001986:	f007 f84b 	bl	8008a20 <atoi>
 800198a:	6178      	str	r0, [r7, #20]

		if (feedRate[0] != '\0')
 800198c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800198e:	781b      	ldrb	r3, [r3, #0]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d005      	beq.n	80019a0 <GcommandExecute+0x168>
		{
			feed = atoi(feedRate);	// Converts feedRate to an int
 8001994:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001996:	f007 f843 	bl	8008a20 <atoi>
 800199a:	4603      	mov	r3, r0
 800199c:	4a15      	ldr	r2, [pc, #84]	@ (80019f4 <GcommandExecute+0x1bc>)
 800199e:	6013      	str	r3, [r2, #0]
		}

		LaserEngrave(Xdistance, Ydistance);	// Calls the laserEngrave function
 80019a0:	edd7 7a07 	vldr	s15, [r7, #28]
 80019a4:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80019a8:	edd7 7a06 	vldr	s15, [r7, #24]
 80019ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019b0:	ee17 1a90 	vmov	r1, s15
 80019b4:	ee17 0a10 	vmov	r0, s14
 80019b8:	f000 f836 	bl	8001a28 <LaserEngrave>

	}

	// We'll need to add all of the G commands here

}
 80019bc:	bf00      	nop
 80019be:	3720      	adds	r7, #32
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	f3af 8000 	nop.w
 80019c8:	47af49cf 	.word	0x47af49cf
 80019cc:	40426ffb 	.word	0x40426ffb
 80019d0:	0800be20 	.word	0x0800be20
 80019d4:	0800be24 	.word	0x0800be24
 80019d8:	200003b0 	.word	0x200003b0
 80019dc:	200003a8 	.word	0x200003a8
 80019e0:	200003b4 	.word	0x200003b4
 80019e4:	200003ac 	.word	0x200003ac
 80019e8:	20000000 	.word	0x20000000
 80019ec:	48000400 	.word	0x48000400
 80019f0:	20000004 	.word	0x20000004
 80019f4:	200003b8 	.word	0x200003b8

080019f8 <McommandExecute>:

void McommandExecute(char Mcommand[])
{
 80019f8:	b480      	push	{r7}
 80019fa:	b083      	sub	sp, #12
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
	if ((Mcommand[1] == '5') && Mcommand[2] == '\0')
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	3301      	adds	r3, #1
 8001a04:	781b      	ldrb	r3, [r3, #0]
 8001a06:	2b35      	cmp	r3, #53	@ 0x35
	{
		// Add code that turns the laser off
	}
	if ((Mcommand[1] == '3') && ((Mcommand[2] == '\0') || (Mcommand[2] == ' ')))
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	3301      	adds	r3, #1
 8001a0c:	781b      	ldrb	r3, [r3, #0]
 8001a0e:	2b33      	cmp	r3, #51	@ 0x33
 8001a10:	d103      	bne.n	8001a1a <McommandExecute+0x22>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	3302      	adds	r3, #2
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	2b00      	cmp	r3, #0
	{
		// Add code to turn laser on and PWM of value specified
	}
}
 8001a1a:	bf00      	nop
 8001a1c:	370c      	adds	r7, #12
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr
	...

08001a28 <LaserEngrave>:


void LaserEngrave(int Xdistance, int Ydistance)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b086      	sub	sp, #24
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
 8001a30:	6039      	str	r1, [r7, #0]
	int Xspeed = 65535;
 8001a32:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001a36:	617b      	str	r3, [r7, #20]
	int Yspeed = 65535;
 8001a38:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001a3c:	613b      	str	r3, [r7, #16]

	float totalDistance = sqrt((Xdistance * Xdistance) + (Ydistance * Ydistance));
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	fb03 f203 	mul.w	r2, r3, r3
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	fb03 f303 	mul.w	r3, r3, r3
 8001a4a:	4413      	add	r3, r2
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f7fe fd79 	bl	8000544 <__aeabi_i2d>
 8001a52:	4602      	mov	r2, r0
 8001a54:	460b      	mov	r3, r1
 8001a56:	ec43 2b10 	vmov	d0, r2, r3
 8001a5a:	f00a f855 	bl	800bb08 <sqrt>
 8001a5e:	ec53 2b10 	vmov	r2, r3, d0
 8001a62:	4610      	mov	r0, r2
 8001a64:	4619      	mov	r1, r3
 8001a66:	f7ff f8cf 	bl	8000c08 <__aeabi_d2f>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	60fb      	str	r3, [r7, #12]
	if (Xdistance != 0)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d026      	beq.n	8001ac2 <LaserEngrave+0x9a>
	{
		Xspeed = 162712.482 / ((abs(Xdistance) / totalDistance) * feed);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	bfb8      	it	lt
 8001a7a:	425b      	neglt	r3, r3
 8001a7c:	ee07 3a90 	vmov	s15, r3
 8001a80:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001a84:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a88:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001a8c:	4b36      	ldr	r3, [pc, #216]	@ (8001b68 <LaserEngrave+0x140>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	ee07 3a90 	vmov	s15, r3
 8001a94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a9c:	ee17 0a90 	vmov	r0, s15
 8001aa0:	f7fe fd62 	bl	8000568 <__aeabi_f2d>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	460b      	mov	r3, r1
 8001aa8:	a12d      	add	r1, pc, #180	@ (adr r1, 8001b60 <LaserEngrave+0x138>)
 8001aaa:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001aae:	f7fe fedd 	bl	800086c <__aeabi_ddiv>
 8001ab2:	4602      	mov	r2, r0
 8001ab4:	460b      	mov	r3, r1
 8001ab6:	4610      	mov	r0, r2
 8001ab8:	4619      	mov	r1, r3
 8001aba:	f7ff f85d 	bl	8000b78 <__aeabi_d2iz>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	617b      	str	r3, [r7, #20]
	}
	if (Ydistance != 0)
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d026      	beq.n	8001b16 <LaserEngrave+0xee>
	{
		Yspeed = 162712.482 / ((abs(Ydistance) / totalDistance) * feed);
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	bfb8      	it	lt
 8001ace:	425b      	neglt	r3, r3
 8001ad0:	ee07 3a90 	vmov	s15, r3
 8001ad4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001ad8:	edd7 7a03 	vldr	s15, [r7, #12]
 8001adc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001ae0:	4b21      	ldr	r3, [pc, #132]	@ (8001b68 <LaserEngrave+0x140>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	ee07 3a90 	vmov	s15, r3
 8001ae8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001aec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001af0:	ee17 0a90 	vmov	r0, s15
 8001af4:	f7fe fd38 	bl	8000568 <__aeabi_f2d>
 8001af8:	4602      	mov	r2, r0
 8001afa:	460b      	mov	r3, r1
 8001afc:	a118      	add	r1, pc, #96	@ (adr r1, 8001b60 <LaserEngrave+0x138>)
 8001afe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001b02:	f7fe feb3 	bl	800086c <__aeabi_ddiv>
 8001b06:	4602      	mov	r2, r0
 8001b08:	460b      	mov	r3, r1
 8001b0a:	4610      	mov	r0, r2
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	f7ff f833 	bl	8000b78 <__aeabi_d2iz>
 8001b12:	4603      	mov	r3, r0
 8001b14:	613b      	str	r3, [r7, #16]
	}

	__HAL_TIM_SET_PRESCALER(&htim16, Xspeed);
 8001b16:	4b15      	ldr	r3, [pc, #84]	@ (8001b6c <LaserEngrave+0x144>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	697a      	ldr	r2, [r7, #20]
 8001b1c:	629a      	str	r2, [r3, #40]	@ 0x28
	__HAL_TIM_SET_PRESCALER(&htim17, Yspeed);
 8001b1e:	4b14      	ldr	r3, [pc, #80]	@ (8001b70 <LaserEngrave+0x148>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	693a      	ldr	r2, [r7, #16]
 8001b24:	629a      	str	r2, [r3, #40]	@ 0x28

	// Starts the motor timers
	  HAL_TIM_Base_Start_IT(&htim16);
 8001b26:	4811      	ldr	r0, [pc, #68]	@ (8001b6c <LaserEngrave+0x144>)
 8001b28:	f003 f834 	bl	8004b94 <HAL_TIM_Base_Start_IT>
	  HAL_TIM_Base_Start_IT(&htim17);
 8001b2c:	4810      	ldr	r0, [pc, #64]	@ (8001b70 <LaserEngrave+0x148>)
 8001b2e:	f003 f831 	bl	8004b94 <HAL_TIM_Base_Start_IT>
	  // Here is where the PWM starts

	  while(((Xcurrent == Xend) && (Ycurrent == Yend)) == 0){}	// Waits for the motors to be done before proceeding
 8001b32:	bf00      	nop
 8001b34:	4b0f      	ldr	r3, [pc, #60]	@ (8001b74 <LaserEngrave+0x14c>)
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	4b0f      	ldr	r3, [pc, #60]	@ (8001b78 <LaserEngrave+0x150>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	d107      	bne.n	8001b50 <LaserEngrave+0x128>
 8001b40:	4b0e      	ldr	r3, [pc, #56]	@ (8001b7c <LaserEngrave+0x154>)
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	4b0e      	ldr	r3, [pc, #56]	@ (8001b80 <LaserEngrave+0x158>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	d101      	bne.n	8001b50 <LaserEngrave+0x128>
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	e000      	b.n	8001b52 <LaserEngrave+0x12a>
 8001b50:	2300      	movs	r3, #0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d0ee      	beq.n	8001b34 <LaserEngrave+0x10c>
}
 8001b56:	bf00      	nop
 8001b58:	bf00      	nop
 8001b5a:	3718      	adds	r7, #24
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	db22d0e5 	.word	0xdb22d0e5
 8001b64:	4103dcc3 	.word	0x4103dcc3
 8001b68:	200003b8 	.word	0x200003b8
 8001b6c:	20000288 	.word	0x20000288
 8001b70:	200002d4 	.word	0x200002d4
 8001b74:	200003a8 	.word	0x200003a8
 8001b78:	200003b0 	.word	0x200003b0
 8001b7c:	200003ac 	.word	0x200003ac
 8001b80:	200003b4 	.word	0x200003b4

08001b84 <__io_putchar>:

PUTCHAR_PROTOTYPE
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b082      	sub	sp, #8
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *) &ch, 1, 0xFFFF);
 8001b8c:	1d39      	adds	r1, r7, #4
 8001b8e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001b92:	2201      	movs	r2, #1
 8001b94:	4803      	ldr	r0, [pc, #12]	@ (8001ba4 <__io_putchar+0x20>)
 8001b96:	f003 fadd 	bl	8005154 <HAL_UART_Transmit>
	return ch;
 8001b9a:	687b      	ldr	r3, [r7, #4]
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	3708      	adds	r7, #8
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	20000320 	.word	0x20000320

08001ba8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b082      	sub	sp, #8
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

	if (htim == &htim16)	// X motor timer
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	4a30      	ldr	r2, [pc, #192]	@ (8001c74 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d127      	bne.n	8001c08 <HAL_TIM_PeriodElapsedCallback+0x60>
	{

		if (Xcurrent != Xend)	// Evaluates if the X motor has arrived in it's position
 8001bb8:	4b2f      	ldr	r3, [pc, #188]	@ (8001c78 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8001bba:	681a      	ldr	r2, [r3, #0]
 8001bbc:	4b2f      	ldr	r3, [pc, #188]	@ (8001c7c <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	d01e      	beq.n	8001c02 <HAL_TIM_PeriodElapsedCallback+0x5a>
		{

			HAL_GPIO_TogglePin(XPUL_GPIO_Port, XPUL_Pin);	// Toggles the XPUL pin
 8001bc4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001bc8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001bcc:	f000 fe6a 	bl	80028a4 <HAL_GPIO_TogglePin>

			// Increments the Xcurrent value if XDIR is positive and decrements if Xcurrent value is negative
			// only increments every other cycle
			if (!HAL_GPIO_ReadPin(XPUL_GPIO_Port, XPUL_Pin))
 8001bd0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001bd4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001bd8:	f000 fe34 	bl	8002844 <HAL_GPIO_ReadPin>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d112      	bne.n	8001c08 <HAL_TIM_PeriodElapsedCallback+0x60>
			{
				if (XDIR == 1)
 8001be2:	4b27      	ldr	r3, [pc, #156]	@ (8001c80 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	2b01      	cmp	r3, #1
 8001be8:	d105      	bne.n	8001bf6 <HAL_TIM_PeriodElapsedCallback+0x4e>
				{
					Xcurrent++;
 8001bea:	4b23      	ldr	r3, [pc, #140]	@ (8001c78 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	3301      	adds	r3, #1
 8001bf0:	4a21      	ldr	r2, [pc, #132]	@ (8001c78 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8001bf2:	6013      	str	r3, [r2, #0]
 8001bf4:	e008      	b.n	8001c08 <HAL_TIM_PeriodElapsedCallback+0x60>
				}
				else
				{
					Xcurrent--;
 8001bf6:	4b20      	ldr	r3, [pc, #128]	@ (8001c78 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	3b01      	subs	r3, #1
 8001bfc:	4a1e      	ldr	r2, [pc, #120]	@ (8001c78 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8001bfe:	6013      	str	r3, [r2, #0]
 8001c00:	e002      	b.n	8001c08 <HAL_TIM_PeriodElapsedCallback+0x60>
				}
			}
		}
		else
		{
			HAL_TIM_Base_Stop_IT(&htim16);	// Once the X motor arrives to it's final position, this stops the timer
 8001c02:	481c      	ldr	r0, [pc, #112]	@ (8001c74 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001c04:	f003 f836 	bl	8004c74 <HAL_TIM_Base_Stop_IT>
		}
	}

	if (htim == &htim17)	// Y motor timer
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	4a1e      	ldr	r2, [pc, #120]	@ (8001c84 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d125      	bne.n	8001c5c <HAL_TIM_PeriodElapsedCallback+0xb4>
	{

		if (Ycurrent != Yend)	// Evaluates if the Y motor has arrived in it's position
 8001c10:	4b1d      	ldr	r3, [pc, #116]	@ (8001c88 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001c12:	681a      	ldr	r2, [r3, #0]
 8001c14:	4b1d      	ldr	r3, [pc, #116]	@ (8001c8c <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	d01c      	beq.n	8001c56 <HAL_TIM_PeriodElapsedCallback+0xae>
		{

			HAL_GPIO_TogglePin(YPUL_GPIO_Port, YPUL_Pin);	// Toggles the YPUL pin
 8001c1c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001c20:	481b      	ldr	r0, [pc, #108]	@ (8001c90 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8001c22:	f000 fe3f 	bl	80028a4 <HAL_GPIO_TogglePin>

			// Increments the Ycurrent value if YDIR is positive and decrements if Ycurrent value is negative
			if (!HAL_GPIO_ReadPin(YPUL_GPIO_Port, YPUL_Pin))
 8001c26:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001c2a:	4819      	ldr	r0, [pc, #100]	@ (8001c90 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8001c2c:	f000 fe0a 	bl	8002844 <HAL_GPIO_ReadPin>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d112      	bne.n	8001c5c <HAL_TIM_PeriodElapsedCallback+0xb4>
			{
				if (YDIR == 1)
 8001c36:	4b17      	ldr	r3, [pc, #92]	@ (8001c94 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	2b01      	cmp	r3, #1
 8001c3c:	d105      	bne.n	8001c4a <HAL_TIM_PeriodElapsedCallback+0xa2>
				{
					Ycurrent++;
 8001c3e:	4b12      	ldr	r3, [pc, #72]	@ (8001c88 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	3301      	adds	r3, #1
 8001c44:	4a10      	ldr	r2, [pc, #64]	@ (8001c88 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001c46:	6013      	str	r3, [r2, #0]
 8001c48:	e008      	b.n	8001c5c <HAL_TIM_PeriodElapsedCallback+0xb4>
				}
				else
				{
					Ycurrent--;
 8001c4a:	4b0f      	ldr	r3, [pc, #60]	@ (8001c88 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	3b01      	subs	r3, #1
 8001c50:	4a0d      	ldr	r2, [pc, #52]	@ (8001c88 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001c52:	6013      	str	r3, [r2, #0]
 8001c54:	e002      	b.n	8001c5c <HAL_TIM_PeriodElapsedCallback+0xb4>
				}
			}
		}
		else
		{
		  HAL_TIM_Base_Stop_IT(&htim17);	// Once the Y motor arrives to it's final position, this stops the timer
 8001c56:	480b      	ldr	r0, [pc, #44]	@ (8001c84 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8001c58:	f003 f80c 	bl	8004c74 <HAL_TIM_Base_Stop_IT>
		}
	}
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a0d      	ldr	r2, [pc, #52]	@ (8001c98 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d101      	bne.n	8001c6a <HAL_TIM_PeriodElapsedCallback+0xc2>
    HAL_IncTick();
 8001c66:	f000 fb1d 	bl	80022a4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  /* USER CODE END Callback 1 */
}
 8001c6a:	bf00      	nop
 8001c6c:	3708      	adds	r7, #8
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	20000288 	.word	0x20000288
 8001c78:	200003a8 	.word	0x200003a8
 8001c7c:	200003b0 	.word	0x200003b0
 8001c80:	20000000 	.word	0x20000000
 8001c84:	200002d4 	.word	0x200002d4
 8001c88:	200003ac 	.word	0x200003ac
 8001c8c:	200003b4 	.word	0x200003b4
 8001c90:	48000400 	.word	0x48000400
 8001c94:	20000004 	.word	0x20000004
 8001c98:	40000400 	.word	0x40000400

08001c9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ca0:	b672      	cpsid	i
}
 8001ca2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ca4:	bf00      	nop
 8001ca6:	e7fd      	b.n	8001ca4 <Error_Handler+0x8>

08001ca8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b083      	sub	sp, #12
 8001cac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cae:	4b0f      	ldr	r3, [pc, #60]	@ (8001cec <HAL_MspInit+0x44>)
 8001cb0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001cb2:	4a0e      	ldr	r2, [pc, #56]	@ (8001cec <HAL_MspInit+0x44>)
 8001cb4:	f043 0301 	orr.w	r3, r3, #1
 8001cb8:	6613      	str	r3, [r2, #96]	@ 0x60
 8001cba:	4b0c      	ldr	r3, [pc, #48]	@ (8001cec <HAL_MspInit+0x44>)
 8001cbc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001cbe:	f003 0301 	and.w	r3, r3, #1
 8001cc2:	607b      	str	r3, [r7, #4]
 8001cc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cc6:	4b09      	ldr	r3, [pc, #36]	@ (8001cec <HAL_MspInit+0x44>)
 8001cc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cca:	4a08      	ldr	r2, [pc, #32]	@ (8001cec <HAL_MspInit+0x44>)
 8001ccc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001cd0:	6593      	str	r3, [r2, #88]	@ 0x58
 8001cd2:	4b06      	ldr	r3, [pc, #24]	@ (8001cec <HAL_MspInit+0x44>)
 8001cd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cd6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cda:	603b      	str	r3, [r7, #0]
 8001cdc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cde:	bf00      	nop
 8001ce0:	370c      	adds	r7, #12
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr
 8001cea:	bf00      	nop
 8001cec:	40021000 	.word	0x40021000

08001cf0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b08a      	sub	sp, #40	@ 0x28
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cf8:	f107 0314 	add.w	r3, r7, #20
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	601a      	str	r2, [r3, #0]
 8001d00:	605a      	str	r2, [r3, #4]
 8001d02:	609a      	str	r2, [r3, #8]
 8001d04:	60da      	str	r2, [r3, #12]
 8001d06:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a17      	ldr	r2, [pc, #92]	@ (8001d6c <HAL_SPI_MspInit+0x7c>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d128      	bne.n	8001d64 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001d12:	4b17      	ldr	r3, [pc, #92]	@ (8001d70 <HAL_SPI_MspInit+0x80>)
 8001d14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d16:	4a16      	ldr	r2, [pc, #88]	@ (8001d70 <HAL_SPI_MspInit+0x80>)
 8001d18:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001d1c:	6613      	str	r3, [r2, #96]	@ 0x60
 8001d1e:	4b14      	ldr	r3, [pc, #80]	@ (8001d70 <HAL_SPI_MspInit+0x80>)
 8001d20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d22:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001d26:	613b      	str	r3, [r7, #16]
 8001d28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d2a:	4b11      	ldr	r3, [pc, #68]	@ (8001d70 <HAL_SPI_MspInit+0x80>)
 8001d2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d2e:	4a10      	ldr	r2, [pc, #64]	@ (8001d70 <HAL_SPI_MspInit+0x80>)
 8001d30:	f043 0301 	orr.w	r3, r3, #1
 8001d34:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d36:	4b0e      	ldr	r3, [pc, #56]	@ (8001d70 <HAL_SPI_MspInit+0x80>)
 8001d38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d3a:	f003 0301 	and.w	r3, r3, #1
 8001d3e:	60fb      	str	r3, [r7, #12]
 8001d40:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001d42:	23e0      	movs	r3, #224	@ 0xe0
 8001d44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d46:	2302      	movs	r3, #2
 8001d48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d4e:	2303      	movs	r3, #3
 8001d50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001d52:	2305      	movs	r3, #5
 8001d54:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d56:	f107 0314 	add.w	r3, r7, #20
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d60:	f000 fbc6 	bl	80024f0 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001d64:	bf00      	nop
 8001d66:	3728      	adds	r7, #40	@ 0x28
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}
 8001d6c:	40013000 	.word	0x40013000
 8001d70:	40021000 	.word	0x40021000

08001d74 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b084      	sub	sp, #16
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a1a      	ldr	r2, [pc, #104]	@ (8001dec <HAL_TIM_Base_MspInit+0x78>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d114      	bne.n	8001db0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001d86:	4b1a      	ldr	r3, [pc, #104]	@ (8001df0 <HAL_TIM_Base_MspInit+0x7c>)
 8001d88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d8a:	4a19      	ldr	r2, [pc, #100]	@ (8001df0 <HAL_TIM_Base_MspInit+0x7c>)
 8001d8c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d90:	6613      	str	r3, [r2, #96]	@ 0x60
 8001d92:	4b17      	ldr	r3, [pc, #92]	@ (8001df0 <HAL_TIM_Base_MspInit+0x7c>)
 8001d94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d9a:	60fb      	str	r3, [r7, #12]
 8001d9c:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001d9e:	2200      	movs	r2, #0
 8001da0:	2100      	movs	r1, #0
 8001da2:	2019      	movs	r0, #25
 8001da4:	f000 fb7a 	bl	800249c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001da8:	2019      	movs	r0, #25
 8001daa:	f000 fb93 	bl	80024d4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8001dae:	e018      	b.n	8001de2 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM17)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a0f      	ldr	r2, [pc, #60]	@ (8001df4 <HAL_TIM_Base_MspInit+0x80>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d113      	bne.n	8001de2 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8001dba:	4b0d      	ldr	r3, [pc, #52]	@ (8001df0 <HAL_TIM_Base_MspInit+0x7c>)
 8001dbc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001dbe:	4a0c      	ldr	r2, [pc, #48]	@ (8001df0 <HAL_TIM_Base_MspInit+0x7c>)
 8001dc0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001dc4:	6613      	str	r3, [r2, #96]	@ 0x60
 8001dc6:	4b0a      	ldr	r3, [pc, #40]	@ (8001df0 <HAL_TIM_Base_MspInit+0x7c>)
 8001dc8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001dca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001dce:	60bb      	str	r3, [r7, #8]
 8001dd0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	2100      	movs	r1, #0
 8001dd6:	201a      	movs	r0, #26
 8001dd8:	f000 fb60 	bl	800249c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8001ddc:	201a      	movs	r0, #26
 8001dde:	f000 fb79 	bl	80024d4 <HAL_NVIC_EnableIRQ>
}
 8001de2:	bf00      	nop
 8001de4:	3710      	adds	r7, #16
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	40014400 	.word	0x40014400
 8001df0:	40021000 	.word	0x40021000
 8001df4:	40014800 	.word	0x40014800

08001df8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b0ac      	sub	sp, #176	@ 0xb0
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e00:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001e04:	2200      	movs	r2, #0
 8001e06:	601a      	str	r2, [r3, #0]
 8001e08:	605a      	str	r2, [r3, #4]
 8001e0a:	609a      	str	r2, [r3, #8]
 8001e0c:	60da      	str	r2, [r3, #12]
 8001e0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e10:	f107 0314 	add.w	r3, r7, #20
 8001e14:	2288      	movs	r2, #136	@ 0x88
 8001e16:	2100      	movs	r1, #0
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f007 fdd7 	bl	80099cc <memset>
  if(huart->Instance==USART2)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a21      	ldr	r2, [pc, #132]	@ (8001ea8 <HAL_UART_MspInit+0xb0>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d13b      	bne.n	8001ea0 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001e28:	2302      	movs	r3, #2
 8001e2a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e30:	f107 0314 	add.w	r3, r7, #20
 8001e34:	4618      	mov	r0, r3
 8001e36:	f001 fbfd 	bl	8003634 <HAL_RCCEx_PeriphCLKConfig>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d001      	beq.n	8001e44 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001e40:	f7ff ff2c 	bl	8001c9c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e44:	4b19      	ldr	r3, [pc, #100]	@ (8001eac <HAL_UART_MspInit+0xb4>)
 8001e46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e48:	4a18      	ldr	r2, [pc, #96]	@ (8001eac <HAL_UART_MspInit+0xb4>)
 8001e4a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e4e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e50:	4b16      	ldr	r3, [pc, #88]	@ (8001eac <HAL_UART_MspInit+0xb4>)
 8001e52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e58:	613b      	str	r3, [r7, #16]
 8001e5a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e5c:	4b13      	ldr	r3, [pc, #76]	@ (8001eac <HAL_UART_MspInit+0xb4>)
 8001e5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e60:	4a12      	ldr	r2, [pc, #72]	@ (8001eac <HAL_UART_MspInit+0xb4>)
 8001e62:	f043 0301 	orr.w	r3, r3, #1
 8001e66:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e68:	4b10      	ldr	r3, [pc, #64]	@ (8001eac <HAL_UART_MspInit+0xb4>)
 8001e6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e6c:	f003 0301 	and.w	r3, r3, #1
 8001e70:	60fb      	str	r3, [r7, #12]
 8001e72:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001e74:	230c      	movs	r3, #12
 8001e76:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e7a:	2302      	movs	r3, #2
 8001e7c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e80:	2300      	movs	r3, #0
 8001e82:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e86:	2303      	movs	r3, #3
 8001e88:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e8c:	2307      	movs	r3, #7
 8001e8e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e92:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001e96:	4619      	mov	r1, r3
 8001e98:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e9c:	f000 fb28 	bl	80024f0 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001ea0:	bf00      	nop
 8001ea2:	37b0      	adds	r7, #176	@ 0xb0
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	40004400 	.word	0x40004400
 8001eac:	40021000 	.word	0x40021000

08001eb0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b08e      	sub	sp, #56	@ 0x38
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8001ebe:	4b34      	ldr	r3, [pc, #208]	@ (8001f90 <HAL_InitTick+0xe0>)
 8001ec0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ec2:	4a33      	ldr	r2, [pc, #204]	@ (8001f90 <HAL_InitTick+0xe0>)
 8001ec4:	f043 0302 	orr.w	r3, r3, #2
 8001ec8:	6593      	str	r3, [r2, #88]	@ 0x58
 8001eca:	4b31      	ldr	r3, [pc, #196]	@ (8001f90 <HAL_InitTick+0xe0>)
 8001ecc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ece:	f003 0302 	and.w	r3, r3, #2
 8001ed2:	60fb      	str	r3, [r7, #12]
 8001ed4:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001ed6:	f107 0210 	add.w	r2, r7, #16
 8001eda:	f107 0314 	add.w	r3, r7, #20
 8001ede:	4611      	mov	r1, r2
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f001 fb15 	bl	8003510 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001ee6:	6a3b      	ldr	r3, [r7, #32]
 8001ee8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001eea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d103      	bne.n	8001ef8 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001ef0:	f001 fae2 	bl	80034b8 <HAL_RCC_GetPCLK1Freq>
 8001ef4:	6378      	str	r0, [r7, #52]	@ 0x34
 8001ef6:	e004      	b.n	8001f02 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001ef8:	f001 fade 	bl	80034b8 <HAL_RCC_GetPCLK1Freq>
 8001efc:	4603      	mov	r3, r0
 8001efe:	005b      	lsls	r3, r3, #1
 8001f00:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001f02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f04:	4a23      	ldr	r2, [pc, #140]	@ (8001f94 <HAL_InitTick+0xe4>)
 8001f06:	fba2 2303 	umull	r2, r3, r2, r3
 8001f0a:	0c9b      	lsrs	r3, r3, #18
 8001f0c:	3b01      	subs	r3, #1
 8001f0e:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8001f10:	4b21      	ldr	r3, [pc, #132]	@ (8001f98 <HAL_InitTick+0xe8>)
 8001f12:	4a22      	ldr	r2, [pc, #136]	@ (8001f9c <HAL_InitTick+0xec>)
 8001f14:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 8001f16:	4b20      	ldr	r3, [pc, #128]	@ (8001f98 <HAL_InitTick+0xe8>)
 8001f18:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001f1c:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 8001f1e:	4a1e      	ldr	r2, [pc, #120]	@ (8001f98 <HAL_InitTick+0xe8>)
 8001f20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f22:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 8001f24:	4b1c      	ldr	r3, [pc, #112]	@ (8001f98 <HAL_InitTick+0xe8>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f2a:	4b1b      	ldr	r3, [pc, #108]	@ (8001f98 <HAL_InitTick+0xe8>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	609a      	str	r2, [r3, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f30:	4b19      	ldr	r3, [pc, #100]	@ (8001f98 <HAL_InitTick+0xe8>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim3);
 8001f36:	4818      	ldr	r0, [pc, #96]	@ (8001f98 <HAL_InitTick+0xe8>)
 8001f38:	f002 fdd4 	bl	8004ae4 <HAL_TIM_Base_Init>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001f42:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d11b      	bne.n	8001f82 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim3);
 8001f4a:	4813      	ldr	r0, [pc, #76]	@ (8001f98 <HAL_InitTick+0xe8>)
 8001f4c:	f002 fe22 	bl	8004b94 <HAL_TIM_Base_Start_IT>
 8001f50:	4603      	mov	r3, r0
 8001f52:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001f56:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d111      	bne.n	8001f82 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM3 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001f5e:	201d      	movs	r0, #29
 8001f60:	f000 fab8 	bl	80024d4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2b0f      	cmp	r3, #15
 8001f68:	d808      	bhi.n	8001f7c <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority, 0U);
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	6879      	ldr	r1, [r7, #4]
 8001f6e:	201d      	movs	r0, #29
 8001f70:	f000 fa94 	bl	800249c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001f74:	4a0a      	ldr	r2, [pc, #40]	@ (8001fa0 <HAL_InitTick+0xf0>)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6013      	str	r3, [r2, #0]
 8001f7a:	e002      	b.n	8001f82 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001f82:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	3738      	adds	r7, #56	@ 0x38
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	40021000 	.word	0x40021000
 8001f94:	431bde83 	.word	0x431bde83
 8001f98:	200004bc 	.word	0x200004bc
 8001f9c:	40000400 	.word	0x40000400
 8001fa0:	20000010 	.word	0x20000010

08001fa4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001fa8:	bf00      	nop
 8001faa:	e7fd      	b.n	8001fa8 <NMI_Handler+0x4>

08001fac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fac:	b480      	push	{r7}
 8001fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fb0:	bf00      	nop
 8001fb2:	e7fd      	b.n	8001fb0 <HardFault_Handler+0x4>

08001fb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fb8:	bf00      	nop
 8001fba:	e7fd      	b.n	8001fb8 <MemManage_Handler+0x4>

08001fbc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fc0:	bf00      	nop
 8001fc2:	e7fd      	b.n	8001fc0 <BusFault_Handler+0x4>

08001fc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fc8:	bf00      	nop
 8001fca:	e7fd      	b.n	8001fc8 <UsageFault_Handler+0x4>

08001fcc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fd0:	bf00      	nop
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr

08001fda <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fda:	b480      	push	{r7}
 8001fdc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fde:	bf00      	nop
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr

08001fe8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fec:	bf00      	nop
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff4:	4770      	bx	lr

08001ff6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ff6:	b480      	push	{r7}
 8001ff8:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ffa:	bf00      	nop
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr

08002004 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(shutdownButton_Pin);
 8002008:	2001      	movs	r0, #1
 800200a:	f000 fc65 	bl	80028d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800200e:	bf00      	nop
 8002010:	bd80      	pop	{r7, pc}
	...

08002014 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8002018:	4802      	ldr	r0, [pc, #8]	@ (8002024 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800201a:	f002 fe5a 	bl	8004cd2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800201e:	bf00      	nop
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	20000288 	.word	0x20000288

08002028 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 800202c:	4802      	ldr	r0, [pc, #8]	@ (8002038 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 800202e:	f002 fe50 	bl	8004cd2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8002032:	bf00      	nop
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	200002d4 	.word	0x200002d4

0800203c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002040:	4802      	ldr	r0, [pc, #8]	@ (800204c <TIM3_IRQHandler+0x10>)
 8002042:	f002 fe46 	bl	8004cd2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002046:	bf00      	nop
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	200004bc 	.word	0x200004bc

08002050 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002054:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002058:	f000 fc3e 	bl	80028d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800205c:	bf00      	nop
 800205e:	bd80      	pop	{r7, pc}

08002060 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002060:	b480      	push	{r7}
 8002062:	af00      	add	r7, sp, #0
  return 1;
 8002064:	2301      	movs	r3, #1
}
 8002066:	4618      	mov	r0, r3
 8002068:	46bd      	mov	sp, r7
 800206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206e:	4770      	bx	lr

08002070 <_kill>:

int _kill(int pid, int sig)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b082      	sub	sp, #8
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
 8002078:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800207a:	f007 fd1b 	bl	8009ab4 <__errno>
 800207e:	4603      	mov	r3, r0
 8002080:	2216      	movs	r2, #22
 8002082:	601a      	str	r2, [r3, #0]
  return -1;
 8002084:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002088:	4618      	mov	r0, r3
 800208a:	3708      	adds	r7, #8
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}

08002090 <_exit>:

void _exit (int status)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b082      	sub	sp, #8
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002098:	f04f 31ff 	mov.w	r1, #4294967295
 800209c:	6878      	ldr	r0, [r7, #4]
 800209e:	f7ff ffe7 	bl	8002070 <_kill>
  while (1) {}    /* Make sure we hang here */
 80020a2:	bf00      	nop
 80020a4:	e7fd      	b.n	80020a2 <_exit+0x12>

080020a6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80020a6:	b580      	push	{r7, lr}
 80020a8:	b086      	sub	sp, #24
 80020aa:	af00      	add	r7, sp, #0
 80020ac:	60f8      	str	r0, [r7, #12]
 80020ae:	60b9      	str	r1, [r7, #8]
 80020b0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020b2:	2300      	movs	r3, #0
 80020b4:	617b      	str	r3, [r7, #20]
 80020b6:	e00a      	b.n	80020ce <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80020b8:	f3af 8000 	nop.w
 80020bc:	4601      	mov	r1, r0
 80020be:	68bb      	ldr	r3, [r7, #8]
 80020c0:	1c5a      	adds	r2, r3, #1
 80020c2:	60ba      	str	r2, [r7, #8]
 80020c4:	b2ca      	uxtb	r2, r1
 80020c6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	3301      	adds	r3, #1
 80020cc:	617b      	str	r3, [r7, #20]
 80020ce:	697a      	ldr	r2, [r7, #20]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	429a      	cmp	r2, r3
 80020d4:	dbf0      	blt.n	80020b8 <_read+0x12>
  }

  return len;
 80020d6:	687b      	ldr	r3, [r7, #4]
}
 80020d8:	4618      	mov	r0, r3
 80020da:	3718      	adds	r7, #24
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}

080020e0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b086      	sub	sp, #24
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	60f8      	str	r0, [r7, #12]
 80020e8:	60b9      	str	r1, [r7, #8]
 80020ea:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020ec:	2300      	movs	r3, #0
 80020ee:	617b      	str	r3, [r7, #20]
 80020f0:	e009      	b.n	8002106 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80020f2:	68bb      	ldr	r3, [r7, #8]
 80020f4:	1c5a      	adds	r2, r3, #1
 80020f6:	60ba      	str	r2, [r7, #8]
 80020f8:	781b      	ldrb	r3, [r3, #0]
 80020fa:	4618      	mov	r0, r3
 80020fc:	f7ff fd42 	bl	8001b84 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	3301      	adds	r3, #1
 8002104:	617b      	str	r3, [r7, #20]
 8002106:	697a      	ldr	r2, [r7, #20]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	429a      	cmp	r2, r3
 800210c:	dbf1      	blt.n	80020f2 <_write+0x12>
  }
  return len;
 800210e:	687b      	ldr	r3, [r7, #4]
}
 8002110:	4618      	mov	r0, r3
 8002112:	3718      	adds	r7, #24
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}

08002118 <_close>:

int _close(int file)
{
 8002118:	b480      	push	{r7}
 800211a:	b083      	sub	sp, #12
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002120:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002124:	4618      	mov	r0, r3
 8002126:	370c      	adds	r7, #12
 8002128:	46bd      	mov	sp, r7
 800212a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212e:	4770      	bx	lr

08002130 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002130:	b480      	push	{r7}
 8002132:	b083      	sub	sp, #12
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
 8002138:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002140:	605a      	str	r2, [r3, #4]
  return 0;
 8002142:	2300      	movs	r3, #0
}
 8002144:	4618      	mov	r0, r3
 8002146:	370c      	adds	r7, #12
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr

08002150 <_isatty>:

int _isatty(int file)
{
 8002150:	b480      	push	{r7}
 8002152:	b083      	sub	sp, #12
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002158:	2301      	movs	r3, #1
}
 800215a:	4618      	mov	r0, r3
 800215c:	370c      	adds	r7, #12
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr

08002166 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002166:	b480      	push	{r7}
 8002168:	b085      	sub	sp, #20
 800216a:	af00      	add	r7, sp, #0
 800216c:	60f8      	str	r0, [r7, #12]
 800216e:	60b9      	str	r1, [r7, #8]
 8002170:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002172:	2300      	movs	r3, #0
}
 8002174:	4618      	mov	r0, r3
 8002176:	3714      	adds	r7, #20
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr

08002180 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b086      	sub	sp, #24
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002188:	4a14      	ldr	r2, [pc, #80]	@ (80021dc <_sbrk+0x5c>)
 800218a:	4b15      	ldr	r3, [pc, #84]	@ (80021e0 <_sbrk+0x60>)
 800218c:	1ad3      	subs	r3, r2, r3
 800218e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002194:	4b13      	ldr	r3, [pc, #76]	@ (80021e4 <_sbrk+0x64>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d102      	bne.n	80021a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800219c:	4b11      	ldr	r3, [pc, #68]	@ (80021e4 <_sbrk+0x64>)
 800219e:	4a12      	ldr	r2, [pc, #72]	@ (80021e8 <_sbrk+0x68>)
 80021a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021a2:	4b10      	ldr	r3, [pc, #64]	@ (80021e4 <_sbrk+0x64>)
 80021a4:	681a      	ldr	r2, [r3, #0]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	4413      	add	r3, r2
 80021aa:	693a      	ldr	r2, [r7, #16]
 80021ac:	429a      	cmp	r2, r3
 80021ae:	d207      	bcs.n	80021c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021b0:	f007 fc80 	bl	8009ab4 <__errno>
 80021b4:	4603      	mov	r3, r0
 80021b6:	220c      	movs	r2, #12
 80021b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021ba:	f04f 33ff 	mov.w	r3, #4294967295
 80021be:	e009      	b.n	80021d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021c0:	4b08      	ldr	r3, [pc, #32]	@ (80021e4 <_sbrk+0x64>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021c6:	4b07      	ldr	r3, [pc, #28]	@ (80021e4 <_sbrk+0x64>)
 80021c8:	681a      	ldr	r2, [r3, #0]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	4413      	add	r3, r2
 80021ce:	4a05      	ldr	r2, [pc, #20]	@ (80021e4 <_sbrk+0x64>)
 80021d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021d2:	68fb      	ldr	r3, [r7, #12]
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	3718      	adds	r7, #24
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}
 80021dc:	20018000 	.word	0x20018000
 80021e0:	00000400 	.word	0x00000400
 80021e4:	20000508 	.word	0x20000508
 80021e8:	200006a8 	.word	0x200006a8

080021ec <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80021ec:	b480      	push	{r7}
 80021ee:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80021f0:	4b06      	ldr	r3, [pc, #24]	@ (800220c <SystemInit+0x20>)
 80021f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021f6:	4a05      	ldr	r2, [pc, #20]	@ (800220c <SystemInit+0x20>)
 80021f8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80021fc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8002200:	bf00      	nop
 8002202:	46bd      	mov	sp, r7
 8002204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002208:	4770      	bx	lr
 800220a:	bf00      	nop
 800220c:	e000ed00 	.word	0xe000ed00

08002210 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002210:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002248 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002214:	f7ff ffea 	bl	80021ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002218:	480c      	ldr	r0, [pc, #48]	@ (800224c <LoopForever+0x6>)
  ldr r1, =_edata
 800221a:	490d      	ldr	r1, [pc, #52]	@ (8002250 <LoopForever+0xa>)
  ldr r2, =_sidata
 800221c:	4a0d      	ldr	r2, [pc, #52]	@ (8002254 <LoopForever+0xe>)
  movs r3, #0
 800221e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002220:	e002      	b.n	8002228 <LoopCopyDataInit>

08002222 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002222:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002224:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002226:	3304      	adds	r3, #4

08002228 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002228:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800222a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800222c:	d3f9      	bcc.n	8002222 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800222e:	4a0a      	ldr	r2, [pc, #40]	@ (8002258 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002230:	4c0a      	ldr	r4, [pc, #40]	@ (800225c <LoopForever+0x16>)
  movs r3, #0
 8002232:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002234:	e001      	b.n	800223a <LoopFillZerobss>

08002236 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002236:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002238:	3204      	adds	r2, #4

0800223a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800223a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800223c:	d3fb      	bcc.n	8002236 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800223e:	f007 fc3f 	bl	8009ac0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002242:	f7fe ff05 	bl	8001050 <main>

08002246 <LoopForever>:

LoopForever:
    b LoopForever
 8002246:	e7fe      	b.n	8002246 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002248:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800224c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002250:	20000208 	.word	0x20000208
  ldr r2, =_sidata
 8002254:	0800c300 	.word	0x0800c300
  ldr r2, =_sbss
 8002258:	20000208 	.word	0x20000208
  ldr r4, =_ebss
 800225c:	200006a4 	.word	0x200006a4

08002260 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002260:	e7fe      	b.n	8002260 <ADC1_2_IRQHandler>
	...

08002264 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b082      	sub	sp, #8
 8002268:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800226a:	2300      	movs	r3, #0
 800226c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800226e:	4b0c      	ldr	r3, [pc, #48]	@ (80022a0 <HAL_Init+0x3c>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a0b      	ldr	r2, [pc, #44]	@ (80022a0 <HAL_Init+0x3c>)
 8002274:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002278:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800227a:	2003      	movs	r0, #3
 800227c:	f000 f903 	bl	8002486 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002280:	200f      	movs	r0, #15
 8002282:	f7ff fe15 	bl	8001eb0 <HAL_InitTick>
 8002286:	4603      	mov	r3, r0
 8002288:	2b00      	cmp	r3, #0
 800228a:	d002      	beq.n	8002292 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800228c:	2301      	movs	r3, #1
 800228e:	71fb      	strb	r3, [r7, #7]
 8002290:	e001      	b.n	8002296 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002292:	f7ff fd09 	bl	8001ca8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002296:	79fb      	ldrb	r3, [r7, #7]
}
 8002298:	4618      	mov	r0, r3
 800229a:	3708      	adds	r7, #8
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}
 80022a0:	40022000 	.word	0x40022000

080022a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022a4:	b480      	push	{r7}
 80022a6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80022a8:	4b06      	ldr	r3, [pc, #24]	@ (80022c4 <HAL_IncTick+0x20>)
 80022aa:	781b      	ldrb	r3, [r3, #0]
 80022ac:	461a      	mov	r2, r3
 80022ae:	4b06      	ldr	r3, [pc, #24]	@ (80022c8 <HAL_IncTick+0x24>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4413      	add	r3, r2
 80022b4:	4a04      	ldr	r2, [pc, #16]	@ (80022c8 <HAL_IncTick+0x24>)
 80022b6:	6013      	str	r3, [r2, #0]
}
 80022b8:	bf00      	nop
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr
 80022c2:	bf00      	nop
 80022c4:	20000014 	.word	0x20000014
 80022c8:	2000050c 	.word	0x2000050c

080022cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022cc:	b480      	push	{r7}
 80022ce:	af00      	add	r7, sp, #0
  return uwTick;
 80022d0:	4b03      	ldr	r3, [pc, #12]	@ (80022e0 <HAL_GetTick+0x14>)
 80022d2:	681b      	ldr	r3, [r3, #0]
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr
 80022de:	bf00      	nop
 80022e0:	2000050c 	.word	0x2000050c

080022e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b084      	sub	sp, #16
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022ec:	f7ff ffee 	bl	80022cc <HAL_GetTick>
 80022f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022fc:	d005      	beq.n	800230a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80022fe:	4b0a      	ldr	r3, [pc, #40]	@ (8002328 <HAL_Delay+0x44>)
 8002300:	781b      	ldrb	r3, [r3, #0]
 8002302:	461a      	mov	r2, r3
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	4413      	add	r3, r2
 8002308:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800230a:	bf00      	nop
 800230c:	f7ff ffde 	bl	80022cc <HAL_GetTick>
 8002310:	4602      	mov	r2, r0
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	1ad3      	subs	r3, r2, r3
 8002316:	68fa      	ldr	r2, [r7, #12]
 8002318:	429a      	cmp	r2, r3
 800231a:	d8f7      	bhi.n	800230c <HAL_Delay+0x28>
  {
  }
}
 800231c:	bf00      	nop
 800231e:	bf00      	nop
 8002320:	3710      	adds	r7, #16
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}
 8002326:	bf00      	nop
 8002328:	20000014 	.word	0x20000014

0800232c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800232c:	b480      	push	{r7}
 800232e:	b085      	sub	sp, #20
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	f003 0307 	and.w	r3, r3, #7
 800233a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800233c:	4b0c      	ldr	r3, [pc, #48]	@ (8002370 <__NVIC_SetPriorityGrouping+0x44>)
 800233e:	68db      	ldr	r3, [r3, #12]
 8002340:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002342:	68ba      	ldr	r2, [r7, #8]
 8002344:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002348:	4013      	ands	r3, r2
 800234a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002354:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002358:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800235c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800235e:	4a04      	ldr	r2, [pc, #16]	@ (8002370 <__NVIC_SetPriorityGrouping+0x44>)
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	60d3      	str	r3, [r2, #12]
}
 8002364:	bf00      	nop
 8002366:	3714      	adds	r7, #20
 8002368:	46bd      	mov	sp, r7
 800236a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236e:	4770      	bx	lr
 8002370:	e000ed00 	.word	0xe000ed00

08002374 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002374:	b480      	push	{r7}
 8002376:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002378:	4b04      	ldr	r3, [pc, #16]	@ (800238c <__NVIC_GetPriorityGrouping+0x18>)
 800237a:	68db      	ldr	r3, [r3, #12]
 800237c:	0a1b      	lsrs	r3, r3, #8
 800237e:	f003 0307 	and.w	r3, r3, #7
}
 8002382:	4618      	mov	r0, r3
 8002384:	46bd      	mov	sp, r7
 8002386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238a:	4770      	bx	lr
 800238c:	e000ed00 	.word	0xe000ed00

08002390 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002390:	b480      	push	{r7}
 8002392:	b083      	sub	sp, #12
 8002394:	af00      	add	r7, sp, #0
 8002396:	4603      	mov	r3, r0
 8002398:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800239a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	db0b      	blt.n	80023ba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023a2:	79fb      	ldrb	r3, [r7, #7]
 80023a4:	f003 021f 	and.w	r2, r3, #31
 80023a8:	4907      	ldr	r1, [pc, #28]	@ (80023c8 <__NVIC_EnableIRQ+0x38>)
 80023aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ae:	095b      	lsrs	r3, r3, #5
 80023b0:	2001      	movs	r0, #1
 80023b2:	fa00 f202 	lsl.w	r2, r0, r2
 80023b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80023ba:	bf00      	nop
 80023bc:	370c      	adds	r7, #12
 80023be:	46bd      	mov	sp, r7
 80023c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c4:	4770      	bx	lr
 80023c6:	bf00      	nop
 80023c8:	e000e100 	.word	0xe000e100

080023cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b083      	sub	sp, #12
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	4603      	mov	r3, r0
 80023d4:	6039      	str	r1, [r7, #0]
 80023d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	db0a      	blt.n	80023f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	b2da      	uxtb	r2, r3
 80023e4:	490c      	ldr	r1, [pc, #48]	@ (8002418 <__NVIC_SetPriority+0x4c>)
 80023e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ea:	0112      	lsls	r2, r2, #4
 80023ec:	b2d2      	uxtb	r2, r2
 80023ee:	440b      	add	r3, r1
 80023f0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023f4:	e00a      	b.n	800240c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	b2da      	uxtb	r2, r3
 80023fa:	4908      	ldr	r1, [pc, #32]	@ (800241c <__NVIC_SetPriority+0x50>)
 80023fc:	79fb      	ldrb	r3, [r7, #7]
 80023fe:	f003 030f 	and.w	r3, r3, #15
 8002402:	3b04      	subs	r3, #4
 8002404:	0112      	lsls	r2, r2, #4
 8002406:	b2d2      	uxtb	r2, r2
 8002408:	440b      	add	r3, r1
 800240a:	761a      	strb	r2, [r3, #24]
}
 800240c:	bf00      	nop
 800240e:	370c      	adds	r7, #12
 8002410:	46bd      	mov	sp, r7
 8002412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002416:	4770      	bx	lr
 8002418:	e000e100 	.word	0xe000e100
 800241c:	e000ed00 	.word	0xe000ed00

08002420 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002420:	b480      	push	{r7}
 8002422:	b089      	sub	sp, #36	@ 0x24
 8002424:	af00      	add	r7, sp, #0
 8002426:	60f8      	str	r0, [r7, #12]
 8002428:	60b9      	str	r1, [r7, #8]
 800242a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	f003 0307 	and.w	r3, r3, #7
 8002432:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002434:	69fb      	ldr	r3, [r7, #28]
 8002436:	f1c3 0307 	rsb	r3, r3, #7
 800243a:	2b04      	cmp	r3, #4
 800243c:	bf28      	it	cs
 800243e:	2304      	movcs	r3, #4
 8002440:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	3304      	adds	r3, #4
 8002446:	2b06      	cmp	r3, #6
 8002448:	d902      	bls.n	8002450 <NVIC_EncodePriority+0x30>
 800244a:	69fb      	ldr	r3, [r7, #28]
 800244c:	3b03      	subs	r3, #3
 800244e:	e000      	b.n	8002452 <NVIC_EncodePriority+0x32>
 8002450:	2300      	movs	r3, #0
 8002452:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002454:	f04f 32ff 	mov.w	r2, #4294967295
 8002458:	69bb      	ldr	r3, [r7, #24]
 800245a:	fa02 f303 	lsl.w	r3, r2, r3
 800245e:	43da      	mvns	r2, r3
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	401a      	ands	r2, r3
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002468:	f04f 31ff 	mov.w	r1, #4294967295
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	fa01 f303 	lsl.w	r3, r1, r3
 8002472:	43d9      	mvns	r1, r3
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002478:	4313      	orrs	r3, r2
         );
}
 800247a:	4618      	mov	r0, r3
 800247c:	3724      	adds	r7, #36	@ 0x24
 800247e:	46bd      	mov	sp, r7
 8002480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002484:	4770      	bx	lr

08002486 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002486:	b580      	push	{r7, lr}
 8002488:	b082      	sub	sp, #8
 800248a:	af00      	add	r7, sp, #0
 800248c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800248e:	6878      	ldr	r0, [r7, #4]
 8002490:	f7ff ff4c 	bl	800232c <__NVIC_SetPriorityGrouping>
}
 8002494:	bf00      	nop
 8002496:	3708      	adds	r7, #8
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}

0800249c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b086      	sub	sp, #24
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	4603      	mov	r3, r0
 80024a4:	60b9      	str	r1, [r7, #8]
 80024a6:	607a      	str	r2, [r7, #4]
 80024a8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80024aa:	2300      	movs	r3, #0
 80024ac:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80024ae:	f7ff ff61 	bl	8002374 <__NVIC_GetPriorityGrouping>
 80024b2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024b4:	687a      	ldr	r2, [r7, #4]
 80024b6:	68b9      	ldr	r1, [r7, #8]
 80024b8:	6978      	ldr	r0, [r7, #20]
 80024ba:	f7ff ffb1 	bl	8002420 <NVIC_EncodePriority>
 80024be:	4602      	mov	r2, r0
 80024c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024c4:	4611      	mov	r1, r2
 80024c6:	4618      	mov	r0, r3
 80024c8:	f7ff ff80 	bl	80023cc <__NVIC_SetPriority>
}
 80024cc:	bf00      	nop
 80024ce:	3718      	adds	r7, #24
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}

080024d4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b082      	sub	sp, #8
 80024d8:	af00      	add	r7, sp, #0
 80024da:	4603      	mov	r3, r0
 80024dc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024e2:	4618      	mov	r0, r3
 80024e4:	f7ff ff54 	bl	8002390 <__NVIC_EnableIRQ>
}
 80024e8:	bf00      	nop
 80024ea:	3708      	adds	r7, #8
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}

080024f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b087      	sub	sp, #28
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
 80024f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80024fa:	2300      	movs	r3, #0
 80024fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024fe:	e17f      	b.n	8002800 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	681a      	ldr	r2, [r3, #0]
 8002504:	2101      	movs	r1, #1
 8002506:	697b      	ldr	r3, [r7, #20]
 8002508:	fa01 f303 	lsl.w	r3, r1, r3
 800250c:	4013      	ands	r3, r2
 800250e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	2b00      	cmp	r3, #0
 8002514:	f000 8171 	beq.w	80027fa <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	f003 0303 	and.w	r3, r3, #3
 8002520:	2b01      	cmp	r3, #1
 8002522:	d005      	beq.n	8002530 <HAL_GPIO_Init+0x40>
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	f003 0303 	and.w	r3, r3, #3
 800252c:	2b02      	cmp	r3, #2
 800252e:	d130      	bne.n	8002592 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	005b      	lsls	r3, r3, #1
 800253a:	2203      	movs	r2, #3
 800253c:	fa02 f303 	lsl.w	r3, r2, r3
 8002540:	43db      	mvns	r3, r3
 8002542:	693a      	ldr	r2, [r7, #16]
 8002544:	4013      	ands	r3, r2
 8002546:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	68da      	ldr	r2, [r3, #12]
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	005b      	lsls	r3, r3, #1
 8002550:	fa02 f303 	lsl.w	r3, r2, r3
 8002554:	693a      	ldr	r2, [r7, #16]
 8002556:	4313      	orrs	r3, r2
 8002558:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	693a      	ldr	r2, [r7, #16]
 800255e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002566:	2201      	movs	r2, #1
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	fa02 f303 	lsl.w	r3, r2, r3
 800256e:	43db      	mvns	r3, r3
 8002570:	693a      	ldr	r2, [r7, #16]
 8002572:	4013      	ands	r3, r2
 8002574:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	091b      	lsrs	r3, r3, #4
 800257c:	f003 0201 	and.w	r2, r3, #1
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	fa02 f303 	lsl.w	r3, r2, r3
 8002586:	693a      	ldr	r2, [r7, #16]
 8002588:	4313      	orrs	r3, r2
 800258a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	693a      	ldr	r2, [r7, #16]
 8002590:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	f003 0303 	and.w	r3, r3, #3
 800259a:	2b03      	cmp	r3, #3
 800259c:	d118      	bne.n	80025d0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025a2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80025a4:	2201      	movs	r2, #1
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ac:	43db      	mvns	r3, r3
 80025ae:	693a      	ldr	r2, [r7, #16]
 80025b0:	4013      	ands	r3, r2
 80025b2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	08db      	lsrs	r3, r3, #3
 80025ba:	f003 0201 	and.w	r2, r3, #1
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	fa02 f303 	lsl.w	r3, r2, r3
 80025c4:	693a      	ldr	r2, [r7, #16]
 80025c6:	4313      	orrs	r3, r2
 80025c8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	693a      	ldr	r2, [r7, #16]
 80025ce:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	f003 0303 	and.w	r3, r3, #3
 80025d8:	2b03      	cmp	r3, #3
 80025da:	d017      	beq.n	800260c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	68db      	ldr	r3, [r3, #12]
 80025e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	005b      	lsls	r3, r3, #1
 80025e6:	2203      	movs	r2, #3
 80025e8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ec:	43db      	mvns	r3, r3
 80025ee:	693a      	ldr	r2, [r7, #16]
 80025f0:	4013      	ands	r3, r2
 80025f2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	689a      	ldr	r2, [r3, #8]
 80025f8:	697b      	ldr	r3, [r7, #20]
 80025fa:	005b      	lsls	r3, r3, #1
 80025fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002600:	693a      	ldr	r2, [r7, #16]
 8002602:	4313      	orrs	r3, r2
 8002604:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	693a      	ldr	r2, [r7, #16]
 800260a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	f003 0303 	and.w	r3, r3, #3
 8002614:	2b02      	cmp	r3, #2
 8002616:	d123      	bne.n	8002660 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	08da      	lsrs	r2, r3, #3
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	3208      	adds	r2, #8
 8002620:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002624:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	f003 0307 	and.w	r3, r3, #7
 800262c:	009b      	lsls	r3, r3, #2
 800262e:	220f      	movs	r2, #15
 8002630:	fa02 f303 	lsl.w	r3, r2, r3
 8002634:	43db      	mvns	r3, r3
 8002636:	693a      	ldr	r2, [r7, #16]
 8002638:	4013      	ands	r3, r2
 800263a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	691a      	ldr	r2, [r3, #16]
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	f003 0307 	and.w	r3, r3, #7
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	fa02 f303 	lsl.w	r3, r2, r3
 800264c:	693a      	ldr	r2, [r7, #16]
 800264e:	4313      	orrs	r3, r2
 8002650:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	08da      	lsrs	r2, r3, #3
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	3208      	adds	r2, #8
 800265a:	6939      	ldr	r1, [r7, #16]
 800265c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	005b      	lsls	r3, r3, #1
 800266a:	2203      	movs	r2, #3
 800266c:	fa02 f303 	lsl.w	r3, r2, r3
 8002670:	43db      	mvns	r3, r3
 8002672:	693a      	ldr	r2, [r7, #16]
 8002674:	4013      	ands	r3, r2
 8002676:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	f003 0203 	and.w	r2, r3, #3
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	005b      	lsls	r3, r3, #1
 8002684:	fa02 f303 	lsl.w	r3, r2, r3
 8002688:	693a      	ldr	r2, [r7, #16]
 800268a:	4313      	orrs	r3, r2
 800268c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	693a      	ldr	r2, [r7, #16]
 8002692:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800269c:	2b00      	cmp	r3, #0
 800269e:	f000 80ac 	beq.w	80027fa <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026a2:	4b5f      	ldr	r3, [pc, #380]	@ (8002820 <HAL_GPIO_Init+0x330>)
 80026a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026a6:	4a5e      	ldr	r2, [pc, #376]	@ (8002820 <HAL_GPIO_Init+0x330>)
 80026a8:	f043 0301 	orr.w	r3, r3, #1
 80026ac:	6613      	str	r3, [r2, #96]	@ 0x60
 80026ae:	4b5c      	ldr	r3, [pc, #368]	@ (8002820 <HAL_GPIO_Init+0x330>)
 80026b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026b2:	f003 0301 	and.w	r3, r3, #1
 80026b6:	60bb      	str	r3, [r7, #8]
 80026b8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80026ba:	4a5a      	ldr	r2, [pc, #360]	@ (8002824 <HAL_GPIO_Init+0x334>)
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	089b      	lsrs	r3, r3, #2
 80026c0:	3302      	adds	r3, #2
 80026c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026c6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	f003 0303 	and.w	r3, r3, #3
 80026ce:	009b      	lsls	r3, r3, #2
 80026d0:	220f      	movs	r2, #15
 80026d2:	fa02 f303 	lsl.w	r3, r2, r3
 80026d6:	43db      	mvns	r3, r3
 80026d8:	693a      	ldr	r2, [r7, #16]
 80026da:	4013      	ands	r3, r2
 80026dc:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80026e4:	d025      	beq.n	8002732 <HAL_GPIO_Init+0x242>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	4a4f      	ldr	r2, [pc, #316]	@ (8002828 <HAL_GPIO_Init+0x338>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d01f      	beq.n	800272e <HAL_GPIO_Init+0x23e>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	4a4e      	ldr	r2, [pc, #312]	@ (800282c <HAL_GPIO_Init+0x33c>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d019      	beq.n	800272a <HAL_GPIO_Init+0x23a>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	4a4d      	ldr	r2, [pc, #308]	@ (8002830 <HAL_GPIO_Init+0x340>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d013      	beq.n	8002726 <HAL_GPIO_Init+0x236>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	4a4c      	ldr	r2, [pc, #304]	@ (8002834 <HAL_GPIO_Init+0x344>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d00d      	beq.n	8002722 <HAL_GPIO_Init+0x232>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	4a4b      	ldr	r2, [pc, #300]	@ (8002838 <HAL_GPIO_Init+0x348>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d007      	beq.n	800271e <HAL_GPIO_Init+0x22e>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	4a4a      	ldr	r2, [pc, #296]	@ (800283c <HAL_GPIO_Init+0x34c>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d101      	bne.n	800271a <HAL_GPIO_Init+0x22a>
 8002716:	2306      	movs	r3, #6
 8002718:	e00c      	b.n	8002734 <HAL_GPIO_Init+0x244>
 800271a:	2307      	movs	r3, #7
 800271c:	e00a      	b.n	8002734 <HAL_GPIO_Init+0x244>
 800271e:	2305      	movs	r3, #5
 8002720:	e008      	b.n	8002734 <HAL_GPIO_Init+0x244>
 8002722:	2304      	movs	r3, #4
 8002724:	e006      	b.n	8002734 <HAL_GPIO_Init+0x244>
 8002726:	2303      	movs	r3, #3
 8002728:	e004      	b.n	8002734 <HAL_GPIO_Init+0x244>
 800272a:	2302      	movs	r3, #2
 800272c:	e002      	b.n	8002734 <HAL_GPIO_Init+0x244>
 800272e:	2301      	movs	r3, #1
 8002730:	e000      	b.n	8002734 <HAL_GPIO_Init+0x244>
 8002732:	2300      	movs	r3, #0
 8002734:	697a      	ldr	r2, [r7, #20]
 8002736:	f002 0203 	and.w	r2, r2, #3
 800273a:	0092      	lsls	r2, r2, #2
 800273c:	4093      	lsls	r3, r2
 800273e:	693a      	ldr	r2, [r7, #16]
 8002740:	4313      	orrs	r3, r2
 8002742:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002744:	4937      	ldr	r1, [pc, #220]	@ (8002824 <HAL_GPIO_Init+0x334>)
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	089b      	lsrs	r3, r3, #2
 800274a:	3302      	adds	r3, #2
 800274c:	693a      	ldr	r2, [r7, #16]
 800274e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002752:	4b3b      	ldr	r3, [pc, #236]	@ (8002840 <HAL_GPIO_Init+0x350>)
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	43db      	mvns	r3, r3
 800275c:	693a      	ldr	r2, [r7, #16]
 800275e:	4013      	ands	r3, r2
 8002760:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800276a:	2b00      	cmp	r3, #0
 800276c:	d003      	beq.n	8002776 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800276e:	693a      	ldr	r2, [r7, #16]
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	4313      	orrs	r3, r2
 8002774:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002776:	4a32      	ldr	r2, [pc, #200]	@ (8002840 <HAL_GPIO_Init+0x350>)
 8002778:	693b      	ldr	r3, [r7, #16]
 800277a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800277c:	4b30      	ldr	r3, [pc, #192]	@ (8002840 <HAL_GPIO_Init+0x350>)
 800277e:	68db      	ldr	r3, [r3, #12]
 8002780:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	43db      	mvns	r3, r3
 8002786:	693a      	ldr	r2, [r7, #16]
 8002788:	4013      	ands	r3, r2
 800278a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002794:	2b00      	cmp	r3, #0
 8002796:	d003      	beq.n	80027a0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002798:	693a      	ldr	r2, [r7, #16]
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	4313      	orrs	r3, r2
 800279e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80027a0:	4a27      	ldr	r2, [pc, #156]	@ (8002840 <HAL_GPIO_Init+0x350>)
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80027a6:	4b26      	ldr	r3, [pc, #152]	@ (8002840 <HAL_GPIO_Init+0x350>)
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	43db      	mvns	r3, r3
 80027b0:	693a      	ldr	r2, [r7, #16]
 80027b2:	4013      	ands	r3, r2
 80027b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d003      	beq.n	80027ca <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80027c2:	693a      	ldr	r2, [r7, #16]
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	4313      	orrs	r3, r2
 80027c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80027ca:	4a1d      	ldr	r2, [pc, #116]	@ (8002840 <HAL_GPIO_Init+0x350>)
 80027cc:	693b      	ldr	r3, [r7, #16]
 80027ce:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80027d0:	4b1b      	ldr	r3, [pc, #108]	@ (8002840 <HAL_GPIO_Init+0x350>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	43db      	mvns	r3, r3
 80027da:	693a      	ldr	r2, [r7, #16]
 80027dc:	4013      	ands	r3, r2
 80027de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d003      	beq.n	80027f4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80027ec:	693a      	ldr	r2, [r7, #16]
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	4313      	orrs	r3, r2
 80027f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80027f4:	4a12      	ldr	r2, [pc, #72]	@ (8002840 <HAL_GPIO_Init+0x350>)
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	3301      	adds	r3, #1
 80027fe:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	681a      	ldr	r2, [r3, #0]
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	fa22 f303 	lsr.w	r3, r2, r3
 800280a:	2b00      	cmp	r3, #0
 800280c:	f47f ae78 	bne.w	8002500 <HAL_GPIO_Init+0x10>
  }
}
 8002810:	bf00      	nop
 8002812:	bf00      	nop
 8002814:	371c      	adds	r7, #28
 8002816:	46bd      	mov	sp, r7
 8002818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281c:	4770      	bx	lr
 800281e:	bf00      	nop
 8002820:	40021000 	.word	0x40021000
 8002824:	40010000 	.word	0x40010000
 8002828:	48000400 	.word	0x48000400
 800282c:	48000800 	.word	0x48000800
 8002830:	48000c00 	.word	0x48000c00
 8002834:	48001000 	.word	0x48001000
 8002838:	48001400 	.word	0x48001400
 800283c:	48001800 	.word	0x48001800
 8002840:	40010400 	.word	0x40010400

08002844 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002844:	b480      	push	{r7}
 8002846:	b085      	sub	sp, #20
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
 800284c:	460b      	mov	r3, r1
 800284e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	691a      	ldr	r2, [r3, #16]
 8002854:	887b      	ldrh	r3, [r7, #2]
 8002856:	4013      	ands	r3, r2
 8002858:	2b00      	cmp	r3, #0
 800285a:	d002      	beq.n	8002862 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800285c:	2301      	movs	r3, #1
 800285e:	73fb      	strb	r3, [r7, #15]
 8002860:	e001      	b.n	8002866 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002862:	2300      	movs	r3, #0
 8002864:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002866:	7bfb      	ldrb	r3, [r7, #15]
}
 8002868:	4618      	mov	r0, r3
 800286a:	3714      	adds	r7, #20
 800286c:	46bd      	mov	sp, r7
 800286e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002872:	4770      	bx	lr

08002874 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002874:	b480      	push	{r7}
 8002876:	b083      	sub	sp, #12
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
 800287c:	460b      	mov	r3, r1
 800287e:	807b      	strh	r3, [r7, #2]
 8002880:	4613      	mov	r3, r2
 8002882:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002884:	787b      	ldrb	r3, [r7, #1]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d003      	beq.n	8002892 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800288a:	887a      	ldrh	r2, [r7, #2]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002890:	e002      	b.n	8002898 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002892:	887a      	ldrh	r2, [r7, #2]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002898:	bf00      	nop
 800289a:	370c      	adds	r7, #12
 800289c:	46bd      	mov	sp, r7
 800289e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a2:	4770      	bx	lr

080028a4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b085      	sub	sp, #20
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
 80028ac:	460b      	mov	r3, r1
 80028ae:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	695b      	ldr	r3, [r3, #20]
 80028b4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80028b6:	887a      	ldrh	r2, [r7, #2]
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	4013      	ands	r3, r2
 80028bc:	041a      	lsls	r2, r3, #16
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	43d9      	mvns	r1, r3
 80028c2:	887b      	ldrh	r3, [r7, #2]
 80028c4:	400b      	ands	r3, r1
 80028c6:	431a      	orrs	r2, r3
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	619a      	str	r2, [r3, #24]
}
 80028cc:	bf00      	nop
 80028ce:	3714      	adds	r7, #20
 80028d0:	46bd      	mov	sp, r7
 80028d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d6:	4770      	bx	lr

080028d8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b082      	sub	sp, #8
 80028dc:	af00      	add	r7, sp, #0
 80028de:	4603      	mov	r3, r0
 80028e0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80028e2:	4b08      	ldr	r3, [pc, #32]	@ (8002904 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80028e4:	695a      	ldr	r2, [r3, #20]
 80028e6:	88fb      	ldrh	r3, [r7, #6]
 80028e8:	4013      	ands	r3, r2
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d006      	beq.n	80028fc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80028ee:	4a05      	ldr	r2, [pc, #20]	@ (8002904 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80028f0:	88fb      	ldrh	r3, [r7, #6]
 80028f2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80028f4:	88fb      	ldrh	r3, [r7, #6]
 80028f6:	4618      	mov	r0, r3
 80028f8:	f7fe fe26 	bl	8001548 <HAL_GPIO_EXTI_Callback>
  }
}
 80028fc:	bf00      	nop
 80028fe:	3708      	adds	r7, #8
 8002900:	46bd      	mov	sp, r7
 8002902:	bd80      	pop	{r7, pc}
 8002904:	40010400 	.word	0x40010400

08002908 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002908:	b480      	push	{r7}
 800290a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800290c:	4b04      	ldr	r3, [pc, #16]	@ (8002920 <HAL_PWREx_GetVoltageRange+0x18>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002914:	4618      	mov	r0, r3
 8002916:	46bd      	mov	sp, r7
 8002918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291c:	4770      	bx	lr
 800291e:	bf00      	nop
 8002920:	40007000 	.word	0x40007000

08002924 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002924:	b480      	push	{r7}
 8002926:	b085      	sub	sp, #20
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002932:	d130      	bne.n	8002996 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002934:	4b23      	ldr	r3, [pc, #140]	@ (80029c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800293c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002940:	d038      	beq.n	80029b4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002942:	4b20      	ldr	r3, [pc, #128]	@ (80029c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800294a:	4a1e      	ldr	r2, [pc, #120]	@ (80029c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800294c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002950:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002952:	4b1d      	ldr	r3, [pc, #116]	@ (80029c8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	2232      	movs	r2, #50	@ 0x32
 8002958:	fb02 f303 	mul.w	r3, r2, r3
 800295c:	4a1b      	ldr	r2, [pc, #108]	@ (80029cc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800295e:	fba2 2303 	umull	r2, r3, r2, r3
 8002962:	0c9b      	lsrs	r3, r3, #18
 8002964:	3301      	adds	r3, #1
 8002966:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002968:	e002      	b.n	8002970 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	3b01      	subs	r3, #1
 800296e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002970:	4b14      	ldr	r3, [pc, #80]	@ (80029c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002972:	695b      	ldr	r3, [r3, #20]
 8002974:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002978:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800297c:	d102      	bne.n	8002984 <HAL_PWREx_ControlVoltageScaling+0x60>
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d1f2      	bne.n	800296a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002984:	4b0f      	ldr	r3, [pc, #60]	@ (80029c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002986:	695b      	ldr	r3, [r3, #20]
 8002988:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800298c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002990:	d110      	bne.n	80029b4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002992:	2303      	movs	r3, #3
 8002994:	e00f      	b.n	80029b6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002996:	4b0b      	ldr	r3, [pc, #44]	@ (80029c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800299e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80029a2:	d007      	beq.n	80029b4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80029a4:	4b07      	ldr	r3, [pc, #28]	@ (80029c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80029ac:	4a05      	ldr	r2, [pc, #20]	@ (80029c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029ae:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80029b2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80029b4:	2300      	movs	r3, #0
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	3714      	adds	r7, #20
 80029ba:	46bd      	mov	sp, r7
 80029bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c0:	4770      	bx	lr
 80029c2:	bf00      	nop
 80029c4:	40007000 	.word	0x40007000
 80029c8:	2000000c 	.word	0x2000000c
 80029cc:	431bde83 	.word	0x431bde83

080029d0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b088      	sub	sp, #32
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d101      	bne.n	80029e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	e3ca      	b.n	8003178 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029e2:	4b97      	ldr	r3, [pc, #604]	@ (8002c40 <HAL_RCC_OscConfig+0x270>)
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	f003 030c 	and.w	r3, r3, #12
 80029ea:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80029ec:	4b94      	ldr	r3, [pc, #592]	@ (8002c40 <HAL_RCC_OscConfig+0x270>)
 80029ee:	68db      	ldr	r3, [r3, #12]
 80029f0:	f003 0303 	and.w	r3, r3, #3
 80029f4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f003 0310 	and.w	r3, r3, #16
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	f000 80e4 	beq.w	8002bcc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002a04:	69bb      	ldr	r3, [r7, #24]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d007      	beq.n	8002a1a <HAL_RCC_OscConfig+0x4a>
 8002a0a:	69bb      	ldr	r3, [r7, #24]
 8002a0c:	2b0c      	cmp	r3, #12
 8002a0e:	f040 808b 	bne.w	8002b28 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	2b01      	cmp	r3, #1
 8002a16:	f040 8087 	bne.w	8002b28 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002a1a:	4b89      	ldr	r3, [pc, #548]	@ (8002c40 <HAL_RCC_OscConfig+0x270>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 0302 	and.w	r3, r3, #2
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d005      	beq.n	8002a32 <HAL_RCC_OscConfig+0x62>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	699b      	ldr	r3, [r3, #24]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d101      	bne.n	8002a32 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e3a2      	b.n	8003178 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6a1a      	ldr	r2, [r3, #32]
 8002a36:	4b82      	ldr	r3, [pc, #520]	@ (8002c40 <HAL_RCC_OscConfig+0x270>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f003 0308 	and.w	r3, r3, #8
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d004      	beq.n	8002a4c <HAL_RCC_OscConfig+0x7c>
 8002a42:	4b7f      	ldr	r3, [pc, #508]	@ (8002c40 <HAL_RCC_OscConfig+0x270>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002a4a:	e005      	b.n	8002a58 <HAL_RCC_OscConfig+0x88>
 8002a4c:	4b7c      	ldr	r3, [pc, #496]	@ (8002c40 <HAL_RCC_OscConfig+0x270>)
 8002a4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a52:	091b      	lsrs	r3, r3, #4
 8002a54:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d223      	bcs.n	8002aa4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6a1b      	ldr	r3, [r3, #32]
 8002a60:	4618      	mov	r0, r3
 8002a62:	f000 fd87 	bl	8003574 <RCC_SetFlashLatencyFromMSIRange>
 8002a66:	4603      	mov	r3, r0
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d001      	beq.n	8002a70 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	e383      	b.n	8003178 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a70:	4b73      	ldr	r3, [pc, #460]	@ (8002c40 <HAL_RCC_OscConfig+0x270>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a72      	ldr	r2, [pc, #456]	@ (8002c40 <HAL_RCC_OscConfig+0x270>)
 8002a76:	f043 0308 	orr.w	r3, r3, #8
 8002a7a:	6013      	str	r3, [r2, #0]
 8002a7c:	4b70      	ldr	r3, [pc, #448]	@ (8002c40 <HAL_RCC_OscConfig+0x270>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6a1b      	ldr	r3, [r3, #32]
 8002a88:	496d      	ldr	r1, [pc, #436]	@ (8002c40 <HAL_RCC_OscConfig+0x270>)
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a8e:	4b6c      	ldr	r3, [pc, #432]	@ (8002c40 <HAL_RCC_OscConfig+0x270>)
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	69db      	ldr	r3, [r3, #28]
 8002a9a:	021b      	lsls	r3, r3, #8
 8002a9c:	4968      	ldr	r1, [pc, #416]	@ (8002c40 <HAL_RCC_OscConfig+0x270>)
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	604b      	str	r3, [r1, #4]
 8002aa2:	e025      	b.n	8002af0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002aa4:	4b66      	ldr	r3, [pc, #408]	@ (8002c40 <HAL_RCC_OscConfig+0x270>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a65      	ldr	r2, [pc, #404]	@ (8002c40 <HAL_RCC_OscConfig+0x270>)
 8002aaa:	f043 0308 	orr.w	r3, r3, #8
 8002aae:	6013      	str	r3, [r2, #0]
 8002ab0:	4b63      	ldr	r3, [pc, #396]	@ (8002c40 <HAL_RCC_OscConfig+0x270>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6a1b      	ldr	r3, [r3, #32]
 8002abc:	4960      	ldr	r1, [pc, #384]	@ (8002c40 <HAL_RCC_OscConfig+0x270>)
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ac2:	4b5f      	ldr	r3, [pc, #380]	@ (8002c40 <HAL_RCC_OscConfig+0x270>)
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	69db      	ldr	r3, [r3, #28]
 8002ace:	021b      	lsls	r3, r3, #8
 8002ad0:	495b      	ldr	r1, [pc, #364]	@ (8002c40 <HAL_RCC_OscConfig+0x270>)
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002ad6:	69bb      	ldr	r3, [r7, #24]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d109      	bne.n	8002af0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6a1b      	ldr	r3, [r3, #32]
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f000 fd47 	bl	8003574 <RCC_SetFlashLatencyFromMSIRange>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d001      	beq.n	8002af0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002aec:	2301      	movs	r3, #1
 8002aee:	e343      	b.n	8003178 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002af0:	f000 fc4a 	bl	8003388 <HAL_RCC_GetSysClockFreq>
 8002af4:	4602      	mov	r2, r0
 8002af6:	4b52      	ldr	r3, [pc, #328]	@ (8002c40 <HAL_RCC_OscConfig+0x270>)
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	091b      	lsrs	r3, r3, #4
 8002afc:	f003 030f 	and.w	r3, r3, #15
 8002b00:	4950      	ldr	r1, [pc, #320]	@ (8002c44 <HAL_RCC_OscConfig+0x274>)
 8002b02:	5ccb      	ldrb	r3, [r1, r3]
 8002b04:	f003 031f 	and.w	r3, r3, #31
 8002b08:	fa22 f303 	lsr.w	r3, r2, r3
 8002b0c:	4a4e      	ldr	r2, [pc, #312]	@ (8002c48 <HAL_RCC_OscConfig+0x278>)
 8002b0e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002b10:	4b4e      	ldr	r3, [pc, #312]	@ (8002c4c <HAL_RCC_OscConfig+0x27c>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4618      	mov	r0, r3
 8002b16:	f7ff f9cb 	bl	8001eb0 <HAL_InitTick>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002b1e:	7bfb      	ldrb	r3, [r7, #15]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d052      	beq.n	8002bca <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002b24:	7bfb      	ldrb	r3, [r7, #15]
 8002b26:	e327      	b.n	8003178 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	699b      	ldr	r3, [r3, #24]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d032      	beq.n	8002b96 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002b30:	4b43      	ldr	r3, [pc, #268]	@ (8002c40 <HAL_RCC_OscConfig+0x270>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a42      	ldr	r2, [pc, #264]	@ (8002c40 <HAL_RCC_OscConfig+0x270>)
 8002b36:	f043 0301 	orr.w	r3, r3, #1
 8002b3a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002b3c:	f7ff fbc6 	bl	80022cc <HAL_GetTick>
 8002b40:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b42:	e008      	b.n	8002b56 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002b44:	f7ff fbc2 	bl	80022cc <HAL_GetTick>
 8002b48:	4602      	mov	r2, r0
 8002b4a:	693b      	ldr	r3, [r7, #16]
 8002b4c:	1ad3      	subs	r3, r2, r3
 8002b4e:	2b02      	cmp	r3, #2
 8002b50:	d901      	bls.n	8002b56 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002b52:	2303      	movs	r3, #3
 8002b54:	e310      	b.n	8003178 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b56:	4b3a      	ldr	r3, [pc, #232]	@ (8002c40 <HAL_RCC_OscConfig+0x270>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f003 0302 	and.w	r3, r3, #2
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d0f0      	beq.n	8002b44 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b62:	4b37      	ldr	r3, [pc, #220]	@ (8002c40 <HAL_RCC_OscConfig+0x270>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a36      	ldr	r2, [pc, #216]	@ (8002c40 <HAL_RCC_OscConfig+0x270>)
 8002b68:	f043 0308 	orr.w	r3, r3, #8
 8002b6c:	6013      	str	r3, [r2, #0]
 8002b6e:	4b34      	ldr	r3, [pc, #208]	@ (8002c40 <HAL_RCC_OscConfig+0x270>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6a1b      	ldr	r3, [r3, #32]
 8002b7a:	4931      	ldr	r1, [pc, #196]	@ (8002c40 <HAL_RCC_OscConfig+0x270>)
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b80:	4b2f      	ldr	r3, [pc, #188]	@ (8002c40 <HAL_RCC_OscConfig+0x270>)
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	69db      	ldr	r3, [r3, #28]
 8002b8c:	021b      	lsls	r3, r3, #8
 8002b8e:	492c      	ldr	r1, [pc, #176]	@ (8002c40 <HAL_RCC_OscConfig+0x270>)
 8002b90:	4313      	orrs	r3, r2
 8002b92:	604b      	str	r3, [r1, #4]
 8002b94:	e01a      	b.n	8002bcc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002b96:	4b2a      	ldr	r3, [pc, #168]	@ (8002c40 <HAL_RCC_OscConfig+0x270>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a29      	ldr	r2, [pc, #164]	@ (8002c40 <HAL_RCC_OscConfig+0x270>)
 8002b9c:	f023 0301 	bic.w	r3, r3, #1
 8002ba0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002ba2:	f7ff fb93 	bl	80022cc <HAL_GetTick>
 8002ba6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002ba8:	e008      	b.n	8002bbc <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002baa:	f7ff fb8f 	bl	80022cc <HAL_GetTick>
 8002bae:	4602      	mov	r2, r0
 8002bb0:	693b      	ldr	r3, [r7, #16]
 8002bb2:	1ad3      	subs	r3, r2, r3
 8002bb4:	2b02      	cmp	r3, #2
 8002bb6:	d901      	bls.n	8002bbc <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002bb8:	2303      	movs	r3, #3
 8002bba:	e2dd      	b.n	8003178 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002bbc:	4b20      	ldr	r3, [pc, #128]	@ (8002c40 <HAL_RCC_OscConfig+0x270>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f003 0302 	and.w	r3, r3, #2
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d1f0      	bne.n	8002baa <HAL_RCC_OscConfig+0x1da>
 8002bc8:	e000      	b.n	8002bcc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002bca:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f003 0301 	and.w	r3, r3, #1
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d074      	beq.n	8002cc2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002bd8:	69bb      	ldr	r3, [r7, #24]
 8002bda:	2b08      	cmp	r3, #8
 8002bdc:	d005      	beq.n	8002bea <HAL_RCC_OscConfig+0x21a>
 8002bde:	69bb      	ldr	r3, [r7, #24]
 8002be0:	2b0c      	cmp	r3, #12
 8002be2:	d10e      	bne.n	8002c02 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	2b03      	cmp	r3, #3
 8002be8:	d10b      	bne.n	8002c02 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bea:	4b15      	ldr	r3, [pc, #84]	@ (8002c40 <HAL_RCC_OscConfig+0x270>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d064      	beq.n	8002cc0 <HAL_RCC_OscConfig+0x2f0>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d160      	bne.n	8002cc0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e2ba      	b.n	8003178 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c0a:	d106      	bne.n	8002c1a <HAL_RCC_OscConfig+0x24a>
 8002c0c:	4b0c      	ldr	r3, [pc, #48]	@ (8002c40 <HAL_RCC_OscConfig+0x270>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a0b      	ldr	r2, [pc, #44]	@ (8002c40 <HAL_RCC_OscConfig+0x270>)
 8002c12:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c16:	6013      	str	r3, [r2, #0]
 8002c18:	e026      	b.n	8002c68 <HAL_RCC_OscConfig+0x298>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002c22:	d115      	bne.n	8002c50 <HAL_RCC_OscConfig+0x280>
 8002c24:	4b06      	ldr	r3, [pc, #24]	@ (8002c40 <HAL_RCC_OscConfig+0x270>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a05      	ldr	r2, [pc, #20]	@ (8002c40 <HAL_RCC_OscConfig+0x270>)
 8002c2a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002c2e:	6013      	str	r3, [r2, #0]
 8002c30:	4b03      	ldr	r3, [pc, #12]	@ (8002c40 <HAL_RCC_OscConfig+0x270>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a02      	ldr	r2, [pc, #8]	@ (8002c40 <HAL_RCC_OscConfig+0x270>)
 8002c36:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c3a:	6013      	str	r3, [r2, #0]
 8002c3c:	e014      	b.n	8002c68 <HAL_RCC_OscConfig+0x298>
 8002c3e:	bf00      	nop
 8002c40:	40021000 	.word	0x40021000
 8002c44:	0800be6c 	.word	0x0800be6c
 8002c48:	2000000c 	.word	0x2000000c
 8002c4c:	20000010 	.word	0x20000010
 8002c50:	4ba0      	ldr	r3, [pc, #640]	@ (8002ed4 <HAL_RCC_OscConfig+0x504>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a9f      	ldr	r2, [pc, #636]	@ (8002ed4 <HAL_RCC_OscConfig+0x504>)
 8002c56:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c5a:	6013      	str	r3, [r2, #0]
 8002c5c:	4b9d      	ldr	r3, [pc, #628]	@ (8002ed4 <HAL_RCC_OscConfig+0x504>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a9c      	ldr	r2, [pc, #624]	@ (8002ed4 <HAL_RCC_OscConfig+0x504>)
 8002c62:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002c66:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d013      	beq.n	8002c98 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c70:	f7ff fb2c 	bl	80022cc <HAL_GetTick>
 8002c74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c76:	e008      	b.n	8002c8a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c78:	f7ff fb28 	bl	80022cc <HAL_GetTick>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	1ad3      	subs	r3, r2, r3
 8002c82:	2b64      	cmp	r3, #100	@ 0x64
 8002c84:	d901      	bls.n	8002c8a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002c86:	2303      	movs	r3, #3
 8002c88:	e276      	b.n	8003178 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c8a:	4b92      	ldr	r3, [pc, #584]	@ (8002ed4 <HAL_RCC_OscConfig+0x504>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d0f0      	beq.n	8002c78 <HAL_RCC_OscConfig+0x2a8>
 8002c96:	e014      	b.n	8002cc2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c98:	f7ff fb18 	bl	80022cc <HAL_GetTick>
 8002c9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c9e:	e008      	b.n	8002cb2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ca0:	f7ff fb14 	bl	80022cc <HAL_GetTick>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	1ad3      	subs	r3, r2, r3
 8002caa:	2b64      	cmp	r3, #100	@ 0x64
 8002cac:	d901      	bls.n	8002cb2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002cae:	2303      	movs	r3, #3
 8002cb0:	e262      	b.n	8003178 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002cb2:	4b88      	ldr	r3, [pc, #544]	@ (8002ed4 <HAL_RCC_OscConfig+0x504>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d1f0      	bne.n	8002ca0 <HAL_RCC_OscConfig+0x2d0>
 8002cbe:	e000      	b.n	8002cc2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cc0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f003 0302 	and.w	r3, r3, #2
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d060      	beq.n	8002d90 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002cce:	69bb      	ldr	r3, [r7, #24]
 8002cd0:	2b04      	cmp	r3, #4
 8002cd2:	d005      	beq.n	8002ce0 <HAL_RCC_OscConfig+0x310>
 8002cd4:	69bb      	ldr	r3, [r7, #24]
 8002cd6:	2b0c      	cmp	r3, #12
 8002cd8:	d119      	bne.n	8002d0e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	2b02      	cmp	r3, #2
 8002cde:	d116      	bne.n	8002d0e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ce0:	4b7c      	ldr	r3, [pc, #496]	@ (8002ed4 <HAL_RCC_OscConfig+0x504>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d005      	beq.n	8002cf8 <HAL_RCC_OscConfig+0x328>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	68db      	ldr	r3, [r3, #12]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d101      	bne.n	8002cf8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	e23f      	b.n	8003178 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cf8:	4b76      	ldr	r3, [pc, #472]	@ (8002ed4 <HAL_RCC_OscConfig+0x504>)
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	691b      	ldr	r3, [r3, #16]
 8002d04:	061b      	lsls	r3, r3, #24
 8002d06:	4973      	ldr	r1, [pc, #460]	@ (8002ed4 <HAL_RCC_OscConfig+0x504>)
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d0c:	e040      	b.n	8002d90 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	68db      	ldr	r3, [r3, #12]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d023      	beq.n	8002d5e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d16:	4b6f      	ldr	r3, [pc, #444]	@ (8002ed4 <HAL_RCC_OscConfig+0x504>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a6e      	ldr	r2, [pc, #440]	@ (8002ed4 <HAL_RCC_OscConfig+0x504>)
 8002d1c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d22:	f7ff fad3 	bl	80022cc <HAL_GetTick>
 8002d26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d28:	e008      	b.n	8002d3c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d2a:	f7ff facf 	bl	80022cc <HAL_GetTick>
 8002d2e:	4602      	mov	r2, r0
 8002d30:	693b      	ldr	r3, [r7, #16]
 8002d32:	1ad3      	subs	r3, r2, r3
 8002d34:	2b02      	cmp	r3, #2
 8002d36:	d901      	bls.n	8002d3c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002d38:	2303      	movs	r3, #3
 8002d3a:	e21d      	b.n	8003178 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d3c:	4b65      	ldr	r3, [pc, #404]	@ (8002ed4 <HAL_RCC_OscConfig+0x504>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d0f0      	beq.n	8002d2a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d48:	4b62      	ldr	r3, [pc, #392]	@ (8002ed4 <HAL_RCC_OscConfig+0x504>)
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	691b      	ldr	r3, [r3, #16]
 8002d54:	061b      	lsls	r3, r3, #24
 8002d56:	495f      	ldr	r1, [pc, #380]	@ (8002ed4 <HAL_RCC_OscConfig+0x504>)
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	604b      	str	r3, [r1, #4]
 8002d5c:	e018      	b.n	8002d90 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d5e:	4b5d      	ldr	r3, [pc, #372]	@ (8002ed4 <HAL_RCC_OscConfig+0x504>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a5c      	ldr	r2, [pc, #368]	@ (8002ed4 <HAL_RCC_OscConfig+0x504>)
 8002d64:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002d68:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d6a:	f7ff faaf 	bl	80022cc <HAL_GetTick>
 8002d6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d70:	e008      	b.n	8002d84 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d72:	f7ff faab 	bl	80022cc <HAL_GetTick>
 8002d76:	4602      	mov	r2, r0
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	1ad3      	subs	r3, r2, r3
 8002d7c:	2b02      	cmp	r3, #2
 8002d7e:	d901      	bls.n	8002d84 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002d80:	2303      	movs	r3, #3
 8002d82:	e1f9      	b.n	8003178 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d84:	4b53      	ldr	r3, [pc, #332]	@ (8002ed4 <HAL_RCC_OscConfig+0x504>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d1f0      	bne.n	8002d72 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f003 0308 	and.w	r3, r3, #8
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d03c      	beq.n	8002e16 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	695b      	ldr	r3, [r3, #20]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d01c      	beq.n	8002dde <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002da4:	4b4b      	ldr	r3, [pc, #300]	@ (8002ed4 <HAL_RCC_OscConfig+0x504>)
 8002da6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002daa:	4a4a      	ldr	r2, [pc, #296]	@ (8002ed4 <HAL_RCC_OscConfig+0x504>)
 8002dac:	f043 0301 	orr.w	r3, r3, #1
 8002db0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002db4:	f7ff fa8a 	bl	80022cc <HAL_GetTick>
 8002db8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002dba:	e008      	b.n	8002dce <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dbc:	f7ff fa86 	bl	80022cc <HAL_GetTick>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	693b      	ldr	r3, [r7, #16]
 8002dc4:	1ad3      	subs	r3, r2, r3
 8002dc6:	2b02      	cmp	r3, #2
 8002dc8:	d901      	bls.n	8002dce <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002dca:	2303      	movs	r3, #3
 8002dcc:	e1d4      	b.n	8003178 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002dce:	4b41      	ldr	r3, [pc, #260]	@ (8002ed4 <HAL_RCC_OscConfig+0x504>)
 8002dd0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002dd4:	f003 0302 	and.w	r3, r3, #2
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d0ef      	beq.n	8002dbc <HAL_RCC_OscConfig+0x3ec>
 8002ddc:	e01b      	b.n	8002e16 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002dde:	4b3d      	ldr	r3, [pc, #244]	@ (8002ed4 <HAL_RCC_OscConfig+0x504>)
 8002de0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002de4:	4a3b      	ldr	r2, [pc, #236]	@ (8002ed4 <HAL_RCC_OscConfig+0x504>)
 8002de6:	f023 0301 	bic.w	r3, r3, #1
 8002dea:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dee:	f7ff fa6d 	bl	80022cc <HAL_GetTick>
 8002df2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002df4:	e008      	b.n	8002e08 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002df6:	f7ff fa69 	bl	80022cc <HAL_GetTick>
 8002dfa:	4602      	mov	r2, r0
 8002dfc:	693b      	ldr	r3, [r7, #16]
 8002dfe:	1ad3      	subs	r3, r2, r3
 8002e00:	2b02      	cmp	r3, #2
 8002e02:	d901      	bls.n	8002e08 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002e04:	2303      	movs	r3, #3
 8002e06:	e1b7      	b.n	8003178 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e08:	4b32      	ldr	r3, [pc, #200]	@ (8002ed4 <HAL_RCC_OscConfig+0x504>)
 8002e0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e0e:	f003 0302 	and.w	r3, r3, #2
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d1ef      	bne.n	8002df6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f003 0304 	and.w	r3, r3, #4
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	f000 80a6 	beq.w	8002f70 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e24:	2300      	movs	r3, #0
 8002e26:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002e28:	4b2a      	ldr	r3, [pc, #168]	@ (8002ed4 <HAL_RCC_OscConfig+0x504>)
 8002e2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e2c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d10d      	bne.n	8002e50 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e34:	4b27      	ldr	r3, [pc, #156]	@ (8002ed4 <HAL_RCC_OscConfig+0x504>)
 8002e36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e38:	4a26      	ldr	r2, [pc, #152]	@ (8002ed4 <HAL_RCC_OscConfig+0x504>)
 8002e3a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e3e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002e40:	4b24      	ldr	r3, [pc, #144]	@ (8002ed4 <HAL_RCC_OscConfig+0x504>)
 8002e42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e44:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e48:	60bb      	str	r3, [r7, #8]
 8002e4a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e50:	4b21      	ldr	r3, [pc, #132]	@ (8002ed8 <HAL_RCC_OscConfig+0x508>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d118      	bne.n	8002e8e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e5c:	4b1e      	ldr	r3, [pc, #120]	@ (8002ed8 <HAL_RCC_OscConfig+0x508>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a1d      	ldr	r2, [pc, #116]	@ (8002ed8 <HAL_RCC_OscConfig+0x508>)
 8002e62:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e66:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e68:	f7ff fa30 	bl	80022cc <HAL_GetTick>
 8002e6c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e6e:	e008      	b.n	8002e82 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e70:	f7ff fa2c 	bl	80022cc <HAL_GetTick>
 8002e74:	4602      	mov	r2, r0
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	1ad3      	subs	r3, r2, r3
 8002e7a:	2b02      	cmp	r3, #2
 8002e7c:	d901      	bls.n	8002e82 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002e7e:	2303      	movs	r3, #3
 8002e80:	e17a      	b.n	8003178 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e82:	4b15      	ldr	r3, [pc, #84]	@ (8002ed8 <HAL_RCC_OscConfig+0x508>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d0f0      	beq.n	8002e70 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	689b      	ldr	r3, [r3, #8]
 8002e92:	2b01      	cmp	r3, #1
 8002e94:	d108      	bne.n	8002ea8 <HAL_RCC_OscConfig+0x4d8>
 8002e96:	4b0f      	ldr	r3, [pc, #60]	@ (8002ed4 <HAL_RCC_OscConfig+0x504>)
 8002e98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e9c:	4a0d      	ldr	r2, [pc, #52]	@ (8002ed4 <HAL_RCC_OscConfig+0x504>)
 8002e9e:	f043 0301 	orr.w	r3, r3, #1
 8002ea2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002ea6:	e029      	b.n	8002efc <HAL_RCC_OscConfig+0x52c>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	2b05      	cmp	r3, #5
 8002eae:	d115      	bne.n	8002edc <HAL_RCC_OscConfig+0x50c>
 8002eb0:	4b08      	ldr	r3, [pc, #32]	@ (8002ed4 <HAL_RCC_OscConfig+0x504>)
 8002eb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002eb6:	4a07      	ldr	r2, [pc, #28]	@ (8002ed4 <HAL_RCC_OscConfig+0x504>)
 8002eb8:	f043 0304 	orr.w	r3, r3, #4
 8002ebc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002ec0:	4b04      	ldr	r3, [pc, #16]	@ (8002ed4 <HAL_RCC_OscConfig+0x504>)
 8002ec2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ec6:	4a03      	ldr	r2, [pc, #12]	@ (8002ed4 <HAL_RCC_OscConfig+0x504>)
 8002ec8:	f043 0301 	orr.w	r3, r3, #1
 8002ecc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002ed0:	e014      	b.n	8002efc <HAL_RCC_OscConfig+0x52c>
 8002ed2:	bf00      	nop
 8002ed4:	40021000 	.word	0x40021000
 8002ed8:	40007000 	.word	0x40007000
 8002edc:	4b9c      	ldr	r3, [pc, #624]	@ (8003150 <HAL_RCC_OscConfig+0x780>)
 8002ede:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ee2:	4a9b      	ldr	r2, [pc, #620]	@ (8003150 <HAL_RCC_OscConfig+0x780>)
 8002ee4:	f023 0301 	bic.w	r3, r3, #1
 8002ee8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002eec:	4b98      	ldr	r3, [pc, #608]	@ (8003150 <HAL_RCC_OscConfig+0x780>)
 8002eee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ef2:	4a97      	ldr	r2, [pc, #604]	@ (8003150 <HAL_RCC_OscConfig+0x780>)
 8002ef4:	f023 0304 	bic.w	r3, r3, #4
 8002ef8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d016      	beq.n	8002f32 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f04:	f7ff f9e2 	bl	80022cc <HAL_GetTick>
 8002f08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f0a:	e00a      	b.n	8002f22 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f0c:	f7ff f9de 	bl	80022cc <HAL_GetTick>
 8002f10:	4602      	mov	r2, r0
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	1ad3      	subs	r3, r2, r3
 8002f16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d901      	bls.n	8002f22 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002f1e:	2303      	movs	r3, #3
 8002f20:	e12a      	b.n	8003178 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f22:	4b8b      	ldr	r3, [pc, #556]	@ (8003150 <HAL_RCC_OscConfig+0x780>)
 8002f24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f28:	f003 0302 	and.w	r3, r3, #2
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d0ed      	beq.n	8002f0c <HAL_RCC_OscConfig+0x53c>
 8002f30:	e015      	b.n	8002f5e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f32:	f7ff f9cb 	bl	80022cc <HAL_GetTick>
 8002f36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f38:	e00a      	b.n	8002f50 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f3a:	f7ff f9c7 	bl	80022cc <HAL_GetTick>
 8002f3e:	4602      	mov	r2, r0
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	1ad3      	subs	r3, r2, r3
 8002f44:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d901      	bls.n	8002f50 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002f4c:	2303      	movs	r3, #3
 8002f4e:	e113      	b.n	8003178 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f50:	4b7f      	ldr	r3, [pc, #508]	@ (8003150 <HAL_RCC_OscConfig+0x780>)
 8002f52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f56:	f003 0302 	and.w	r3, r3, #2
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d1ed      	bne.n	8002f3a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f5e:	7ffb      	ldrb	r3, [r7, #31]
 8002f60:	2b01      	cmp	r3, #1
 8002f62:	d105      	bne.n	8002f70 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f64:	4b7a      	ldr	r3, [pc, #488]	@ (8003150 <HAL_RCC_OscConfig+0x780>)
 8002f66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f68:	4a79      	ldr	r2, [pc, #484]	@ (8003150 <HAL_RCC_OscConfig+0x780>)
 8002f6a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f6e:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	f000 80fe 	beq.w	8003176 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f7e:	2b02      	cmp	r3, #2
 8002f80:	f040 80d0 	bne.w	8003124 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002f84:	4b72      	ldr	r3, [pc, #456]	@ (8003150 <HAL_RCC_OscConfig+0x780>)
 8002f86:	68db      	ldr	r3, [r3, #12]
 8002f88:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	f003 0203 	and.w	r2, r3, #3
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f94:	429a      	cmp	r2, r3
 8002f96:	d130      	bne.n	8002ffa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fa2:	3b01      	subs	r3, #1
 8002fa4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fa6:	429a      	cmp	r2, r3
 8002fa8:	d127      	bne.n	8002ffa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fb4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002fb6:	429a      	cmp	r2, r3
 8002fb8:	d11f      	bne.n	8002ffa <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fc0:	687a      	ldr	r2, [r7, #4]
 8002fc2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002fc4:	2a07      	cmp	r2, #7
 8002fc6:	bf14      	ite	ne
 8002fc8:	2201      	movne	r2, #1
 8002fca:	2200      	moveq	r2, #0
 8002fcc:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d113      	bne.n	8002ffa <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fdc:	085b      	lsrs	r3, r3, #1
 8002fde:	3b01      	subs	r3, #1
 8002fe0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002fe2:	429a      	cmp	r2, r3
 8002fe4:	d109      	bne.n	8002ffa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ff0:	085b      	lsrs	r3, r3, #1
 8002ff2:	3b01      	subs	r3, #1
 8002ff4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ff6:	429a      	cmp	r2, r3
 8002ff8:	d06e      	beq.n	80030d8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002ffa:	69bb      	ldr	r3, [r7, #24]
 8002ffc:	2b0c      	cmp	r3, #12
 8002ffe:	d069      	beq.n	80030d4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003000:	4b53      	ldr	r3, [pc, #332]	@ (8003150 <HAL_RCC_OscConfig+0x780>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003008:	2b00      	cmp	r3, #0
 800300a:	d105      	bne.n	8003018 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800300c:	4b50      	ldr	r3, [pc, #320]	@ (8003150 <HAL_RCC_OscConfig+0x780>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003014:	2b00      	cmp	r3, #0
 8003016:	d001      	beq.n	800301c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003018:	2301      	movs	r3, #1
 800301a:	e0ad      	b.n	8003178 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800301c:	4b4c      	ldr	r3, [pc, #304]	@ (8003150 <HAL_RCC_OscConfig+0x780>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a4b      	ldr	r2, [pc, #300]	@ (8003150 <HAL_RCC_OscConfig+0x780>)
 8003022:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003026:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003028:	f7ff f950 	bl	80022cc <HAL_GetTick>
 800302c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800302e:	e008      	b.n	8003042 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003030:	f7ff f94c 	bl	80022cc <HAL_GetTick>
 8003034:	4602      	mov	r2, r0
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	1ad3      	subs	r3, r2, r3
 800303a:	2b02      	cmp	r3, #2
 800303c:	d901      	bls.n	8003042 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800303e:	2303      	movs	r3, #3
 8003040:	e09a      	b.n	8003178 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003042:	4b43      	ldr	r3, [pc, #268]	@ (8003150 <HAL_RCC_OscConfig+0x780>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800304a:	2b00      	cmp	r3, #0
 800304c:	d1f0      	bne.n	8003030 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800304e:	4b40      	ldr	r3, [pc, #256]	@ (8003150 <HAL_RCC_OscConfig+0x780>)
 8003050:	68da      	ldr	r2, [r3, #12]
 8003052:	4b40      	ldr	r3, [pc, #256]	@ (8003154 <HAL_RCC_OscConfig+0x784>)
 8003054:	4013      	ands	r3, r2
 8003056:	687a      	ldr	r2, [r7, #4]
 8003058:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800305a:	687a      	ldr	r2, [r7, #4]
 800305c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800305e:	3a01      	subs	r2, #1
 8003060:	0112      	lsls	r2, r2, #4
 8003062:	4311      	orrs	r1, r2
 8003064:	687a      	ldr	r2, [r7, #4]
 8003066:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003068:	0212      	lsls	r2, r2, #8
 800306a:	4311      	orrs	r1, r2
 800306c:	687a      	ldr	r2, [r7, #4]
 800306e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003070:	0852      	lsrs	r2, r2, #1
 8003072:	3a01      	subs	r2, #1
 8003074:	0552      	lsls	r2, r2, #21
 8003076:	4311      	orrs	r1, r2
 8003078:	687a      	ldr	r2, [r7, #4]
 800307a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800307c:	0852      	lsrs	r2, r2, #1
 800307e:	3a01      	subs	r2, #1
 8003080:	0652      	lsls	r2, r2, #25
 8003082:	4311      	orrs	r1, r2
 8003084:	687a      	ldr	r2, [r7, #4]
 8003086:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003088:	0912      	lsrs	r2, r2, #4
 800308a:	0452      	lsls	r2, r2, #17
 800308c:	430a      	orrs	r2, r1
 800308e:	4930      	ldr	r1, [pc, #192]	@ (8003150 <HAL_RCC_OscConfig+0x780>)
 8003090:	4313      	orrs	r3, r2
 8003092:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003094:	4b2e      	ldr	r3, [pc, #184]	@ (8003150 <HAL_RCC_OscConfig+0x780>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a2d      	ldr	r2, [pc, #180]	@ (8003150 <HAL_RCC_OscConfig+0x780>)
 800309a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800309e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80030a0:	4b2b      	ldr	r3, [pc, #172]	@ (8003150 <HAL_RCC_OscConfig+0x780>)
 80030a2:	68db      	ldr	r3, [r3, #12]
 80030a4:	4a2a      	ldr	r2, [pc, #168]	@ (8003150 <HAL_RCC_OscConfig+0x780>)
 80030a6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80030aa:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80030ac:	f7ff f90e 	bl	80022cc <HAL_GetTick>
 80030b0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030b2:	e008      	b.n	80030c6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030b4:	f7ff f90a 	bl	80022cc <HAL_GetTick>
 80030b8:	4602      	mov	r2, r0
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	1ad3      	subs	r3, r2, r3
 80030be:	2b02      	cmp	r3, #2
 80030c0:	d901      	bls.n	80030c6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80030c2:	2303      	movs	r3, #3
 80030c4:	e058      	b.n	8003178 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030c6:	4b22      	ldr	r3, [pc, #136]	@ (8003150 <HAL_RCC_OscConfig+0x780>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d0f0      	beq.n	80030b4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80030d2:	e050      	b.n	8003176 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80030d4:	2301      	movs	r3, #1
 80030d6:	e04f      	b.n	8003178 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030d8:	4b1d      	ldr	r3, [pc, #116]	@ (8003150 <HAL_RCC_OscConfig+0x780>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d148      	bne.n	8003176 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80030e4:	4b1a      	ldr	r3, [pc, #104]	@ (8003150 <HAL_RCC_OscConfig+0x780>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a19      	ldr	r2, [pc, #100]	@ (8003150 <HAL_RCC_OscConfig+0x780>)
 80030ea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80030ee:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80030f0:	4b17      	ldr	r3, [pc, #92]	@ (8003150 <HAL_RCC_OscConfig+0x780>)
 80030f2:	68db      	ldr	r3, [r3, #12]
 80030f4:	4a16      	ldr	r2, [pc, #88]	@ (8003150 <HAL_RCC_OscConfig+0x780>)
 80030f6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80030fa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80030fc:	f7ff f8e6 	bl	80022cc <HAL_GetTick>
 8003100:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003102:	e008      	b.n	8003116 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003104:	f7ff f8e2 	bl	80022cc <HAL_GetTick>
 8003108:	4602      	mov	r2, r0
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	1ad3      	subs	r3, r2, r3
 800310e:	2b02      	cmp	r3, #2
 8003110:	d901      	bls.n	8003116 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003112:	2303      	movs	r3, #3
 8003114:	e030      	b.n	8003178 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003116:	4b0e      	ldr	r3, [pc, #56]	@ (8003150 <HAL_RCC_OscConfig+0x780>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800311e:	2b00      	cmp	r3, #0
 8003120:	d0f0      	beq.n	8003104 <HAL_RCC_OscConfig+0x734>
 8003122:	e028      	b.n	8003176 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003124:	69bb      	ldr	r3, [r7, #24]
 8003126:	2b0c      	cmp	r3, #12
 8003128:	d023      	beq.n	8003172 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800312a:	4b09      	ldr	r3, [pc, #36]	@ (8003150 <HAL_RCC_OscConfig+0x780>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a08      	ldr	r2, [pc, #32]	@ (8003150 <HAL_RCC_OscConfig+0x780>)
 8003130:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003134:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003136:	f7ff f8c9 	bl	80022cc <HAL_GetTick>
 800313a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800313c:	e00c      	b.n	8003158 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800313e:	f7ff f8c5 	bl	80022cc <HAL_GetTick>
 8003142:	4602      	mov	r2, r0
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	1ad3      	subs	r3, r2, r3
 8003148:	2b02      	cmp	r3, #2
 800314a:	d905      	bls.n	8003158 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800314c:	2303      	movs	r3, #3
 800314e:	e013      	b.n	8003178 <HAL_RCC_OscConfig+0x7a8>
 8003150:	40021000 	.word	0x40021000
 8003154:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003158:	4b09      	ldr	r3, [pc, #36]	@ (8003180 <HAL_RCC_OscConfig+0x7b0>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003160:	2b00      	cmp	r3, #0
 8003162:	d1ec      	bne.n	800313e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003164:	4b06      	ldr	r3, [pc, #24]	@ (8003180 <HAL_RCC_OscConfig+0x7b0>)
 8003166:	68da      	ldr	r2, [r3, #12]
 8003168:	4905      	ldr	r1, [pc, #20]	@ (8003180 <HAL_RCC_OscConfig+0x7b0>)
 800316a:	4b06      	ldr	r3, [pc, #24]	@ (8003184 <HAL_RCC_OscConfig+0x7b4>)
 800316c:	4013      	ands	r3, r2
 800316e:	60cb      	str	r3, [r1, #12]
 8003170:	e001      	b.n	8003176 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	e000      	b.n	8003178 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003176:	2300      	movs	r3, #0
}
 8003178:	4618      	mov	r0, r3
 800317a:	3720      	adds	r7, #32
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}
 8003180:	40021000 	.word	0x40021000
 8003184:	feeefffc 	.word	0xfeeefffc

08003188 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b084      	sub	sp, #16
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
 8003190:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d101      	bne.n	800319c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	e0e7      	b.n	800336c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800319c:	4b75      	ldr	r3, [pc, #468]	@ (8003374 <HAL_RCC_ClockConfig+0x1ec>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f003 0307 	and.w	r3, r3, #7
 80031a4:	683a      	ldr	r2, [r7, #0]
 80031a6:	429a      	cmp	r2, r3
 80031a8:	d910      	bls.n	80031cc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031aa:	4b72      	ldr	r3, [pc, #456]	@ (8003374 <HAL_RCC_ClockConfig+0x1ec>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f023 0207 	bic.w	r2, r3, #7
 80031b2:	4970      	ldr	r1, [pc, #448]	@ (8003374 <HAL_RCC_ClockConfig+0x1ec>)
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	4313      	orrs	r3, r2
 80031b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031ba:	4b6e      	ldr	r3, [pc, #440]	@ (8003374 <HAL_RCC_ClockConfig+0x1ec>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f003 0307 	and.w	r3, r3, #7
 80031c2:	683a      	ldr	r2, [r7, #0]
 80031c4:	429a      	cmp	r2, r3
 80031c6:	d001      	beq.n	80031cc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	e0cf      	b.n	800336c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f003 0302 	and.w	r3, r3, #2
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d010      	beq.n	80031fa <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	689a      	ldr	r2, [r3, #8]
 80031dc:	4b66      	ldr	r3, [pc, #408]	@ (8003378 <HAL_RCC_ClockConfig+0x1f0>)
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80031e4:	429a      	cmp	r2, r3
 80031e6:	d908      	bls.n	80031fa <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031e8:	4b63      	ldr	r3, [pc, #396]	@ (8003378 <HAL_RCC_ClockConfig+0x1f0>)
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	689b      	ldr	r3, [r3, #8]
 80031f4:	4960      	ldr	r1, [pc, #384]	@ (8003378 <HAL_RCC_ClockConfig+0x1f0>)
 80031f6:	4313      	orrs	r3, r2
 80031f8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f003 0301 	and.w	r3, r3, #1
 8003202:	2b00      	cmp	r3, #0
 8003204:	d04c      	beq.n	80032a0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	2b03      	cmp	r3, #3
 800320c:	d107      	bne.n	800321e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800320e:	4b5a      	ldr	r3, [pc, #360]	@ (8003378 <HAL_RCC_ClockConfig+0x1f0>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003216:	2b00      	cmp	r3, #0
 8003218:	d121      	bne.n	800325e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	e0a6      	b.n	800336c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	2b02      	cmp	r3, #2
 8003224:	d107      	bne.n	8003236 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003226:	4b54      	ldr	r3, [pc, #336]	@ (8003378 <HAL_RCC_ClockConfig+0x1f0>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800322e:	2b00      	cmp	r3, #0
 8003230:	d115      	bne.n	800325e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	e09a      	b.n	800336c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d107      	bne.n	800324e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800323e:	4b4e      	ldr	r3, [pc, #312]	@ (8003378 <HAL_RCC_ClockConfig+0x1f0>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f003 0302 	and.w	r3, r3, #2
 8003246:	2b00      	cmp	r3, #0
 8003248:	d109      	bne.n	800325e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	e08e      	b.n	800336c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800324e:	4b4a      	ldr	r3, [pc, #296]	@ (8003378 <HAL_RCC_ClockConfig+0x1f0>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003256:	2b00      	cmp	r3, #0
 8003258:	d101      	bne.n	800325e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	e086      	b.n	800336c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800325e:	4b46      	ldr	r3, [pc, #280]	@ (8003378 <HAL_RCC_ClockConfig+0x1f0>)
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	f023 0203 	bic.w	r2, r3, #3
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	4943      	ldr	r1, [pc, #268]	@ (8003378 <HAL_RCC_ClockConfig+0x1f0>)
 800326c:	4313      	orrs	r3, r2
 800326e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003270:	f7ff f82c 	bl	80022cc <HAL_GetTick>
 8003274:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003276:	e00a      	b.n	800328e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003278:	f7ff f828 	bl	80022cc <HAL_GetTick>
 800327c:	4602      	mov	r2, r0
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	1ad3      	subs	r3, r2, r3
 8003282:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003286:	4293      	cmp	r3, r2
 8003288:	d901      	bls.n	800328e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800328a:	2303      	movs	r3, #3
 800328c:	e06e      	b.n	800336c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800328e:	4b3a      	ldr	r3, [pc, #232]	@ (8003378 <HAL_RCC_ClockConfig+0x1f0>)
 8003290:	689b      	ldr	r3, [r3, #8]
 8003292:	f003 020c 	and.w	r2, r3, #12
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	009b      	lsls	r3, r3, #2
 800329c:	429a      	cmp	r2, r3
 800329e:	d1eb      	bne.n	8003278 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f003 0302 	and.w	r3, r3, #2
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d010      	beq.n	80032ce <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	689a      	ldr	r2, [r3, #8]
 80032b0:	4b31      	ldr	r3, [pc, #196]	@ (8003378 <HAL_RCC_ClockConfig+0x1f0>)
 80032b2:	689b      	ldr	r3, [r3, #8]
 80032b4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80032b8:	429a      	cmp	r2, r3
 80032ba:	d208      	bcs.n	80032ce <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032bc:	4b2e      	ldr	r3, [pc, #184]	@ (8003378 <HAL_RCC_ClockConfig+0x1f0>)
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	492b      	ldr	r1, [pc, #172]	@ (8003378 <HAL_RCC_ClockConfig+0x1f0>)
 80032ca:	4313      	orrs	r3, r2
 80032cc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80032ce:	4b29      	ldr	r3, [pc, #164]	@ (8003374 <HAL_RCC_ClockConfig+0x1ec>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f003 0307 	and.w	r3, r3, #7
 80032d6:	683a      	ldr	r2, [r7, #0]
 80032d8:	429a      	cmp	r2, r3
 80032da:	d210      	bcs.n	80032fe <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032dc:	4b25      	ldr	r3, [pc, #148]	@ (8003374 <HAL_RCC_ClockConfig+0x1ec>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f023 0207 	bic.w	r2, r3, #7
 80032e4:	4923      	ldr	r1, [pc, #140]	@ (8003374 <HAL_RCC_ClockConfig+0x1ec>)
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	4313      	orrs	r3, r2
 80032ea:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032ec:	4b21      	ldr	r3, [pc, #132]	@ (8003374 <HAL_RCC_ClockConfig+0x1ec>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f003 0307 	and.w	r3, r3, #7
 80032f4:	683a      	ldr	r2, [r7, #0]
 80032f6:	429a      	cmp	r2, r3
 80032f8:	d001      	beq.n	80032fe <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	e036      	b.n	800336c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f003 0304 	and.w	r3, r3, #4
 8003306:	2b00      	cmp	r3, #0
 8003308:	d008      	beq.n	800331c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800330a:	4b1b      	ldr	r3, [pc, #108]	@ (8003378 <HAL_RCC_ClockConfig+0x1f0>)
 800330c:	689b      	ldr	r3, [r3, #8]
 800330e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	68db      	ldr	r3, [r3, #12]
 8003316:	4918      	ldr	r1, [pc, #96]	@ (8003378 <HAL_RCC_ClockConfig+0x1f0>)
 8003318:	4313      	orrs	r3, r2
 800331a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f003 0308 	and.w	r3, r3, #8
 8003324:	2b00      	cmp	r3, #0
 8003326:	d009      	beq.n	800333c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003328:	4b13      	ldr	r3, [pc, #76]	@ (8003378 <HAL_RCC_ClockConfig+0x1f0>)
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	691b      	ldr	r3, [r3, #16]
 8003334:	00db      	lsls	r3, r3, #3
 8003336:	4910      	ldr	r1, [pc, #64]	@ (8003378 <HAL_RCC_ClockConfig+0x1f0>)
 8003338:	4313      	orrs	r3, r2
 800333a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800333c:	f000 f824 	bl	8003388 <HAL_RCC_GetSysClockFreq>
 8003340:	4602      	mov	r2, r0
 8003342:	4b0d      	ldr	r3, [pc, #52]	@ (8003378 <HAL_RCC_ClockConfig+0x1f0>)
 8003344:	689b      	ldr	r3, [r3, #8]
 8003346:	091b      	lsrs	r3, r3, #4
 8003348:	f003 030f 	and.w	r3, r3, #15
 800334c:	490b      	ldr	r1, [pc, #44]	@ (800337c <HAL_RCC_ClockConfig+0x1f4>)
 800334e:	5ccb      	ldrb	r3, [r1, r3]
 8003350:	f003 031f 	and.w	r3, r3, #31
 8003354:	fa22 f303 	lsr.w	r3, r2, r3
 8003358:	4a09      	ldr	r2, [pc, #36]	@ (8003380 <HAL_RCC_ClockConfig+0x1f8>)
 800335a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800335c:	4b09      	ldr	r3, [pc, #36]	@ (8003384 <HAL_RCC_ClockConfig+0x1fc>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4618      	mov	r0, r3
 8003362:	f7fe fda5 	bl	8001eb0 <HAL_InitTick>
 8003366:	4603      	mov	r3, r0
 8003368:	72fb      	strb	r3, [r7, #11]

  return status;
 800336a:	7afb      	ldrb	r3, [r7, #11]
}
 800336c:	4618      	mov	r0, r3
 800336e:	3710      	adds	r7, #16
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}
 8003374:	40022000 	.word	0x40022000
 8003378:	40021000 	.word	0x40021000
 800337c:	0800be6c 	.word	0x0800be6c
 8003380:	2000000c 	.word	0x2000000c
 8003384:	20000010 	.word	0x20000010

08003388 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003388:	b480      	push	{r7}
 800338a:	b089      	sub	sp, #36	@ 0x24
 800338c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800338e:	2300      	movs	r3, #0
 8003390:	61fb      	str	r3, [r7, #28]
 8003392:	2300      	movs	r3, #0
 8003394:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003396:	4b3e      	ldr	r3, [pc, #248]	@ (8003490 <HAL_RCC_GetSysClockFreq+0x108>)
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	f003 030c 	and.w	r3, r3, #12
 800339e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80033a0:	4b3b      	ldr	r3, [pc, #236]	@ (8003490 <HAL_RCC_GetSysClockFreq+0x108>)
 80033a2:	68db      	ldr	r3, [r3, #12]
 80033a4:	f003 0303 	and.w	r3, r3, #3
 80033a8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80033aa:	693b      	ldr	r3, [r7, #16]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d005      	beq.n	80033bc <HAL_RCC_GetSysClockFreq+0x34>
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	2b0c      	cmp	r3, #12
 80033b4:	d121      	bne.n	80033fa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	2b01      	cmp	r3, #1
 80033ba:	d11e      	bne.n	80033fa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80033bc:	4b34      	ldr	r3, [pc, #208]	@ (8003490 <HAL_RCC_GetSysClockFreq+0x108>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f003 0308 	and.w	r3, r3, #8
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d107      	bne.n	80033d8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80033c8:	4b31      	ldr	r3, [pc, #196]	@ (8003490 <HAL_RCC_GetSysClockFreq+0x108>)
 80033ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80033ce:	0a1b      	lsrs	r3, r3, #8
 80033d0:	f003 030f 	and.w	r3, r3, #15
 80033d4:	61fb      	str	r3, [r7, #28]
 80033d6:	e005      	b.n	80033e4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80033d8:	4b2d      	ldr	r3, [pc, #180]	@ (8003490 <HAL_RCC_GetSysClockFreq+0x108>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	091b      	lsrs	r3, r3, #4
 80033de:	f003 030f 	and.w	r3, r3, #15
 80033e2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80033e4:	4a2b      	ldr	r2, [pc, #172]	@ (8003494 <HAL_RCC_GetSysClockFreq+0x10c>)
 80033e6:	69fb      	ldr	r3, [r7, #28]
 80033e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033ec:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d10d      	bne.n	8003410 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80033f4:	69fb      	ldr	r3, [r7, #28]
 80033f6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80033f8:	e00a      	b.n	8003410 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80033fa:	693b      	ldr	r3, [r7, #16]
 80033fc:	2b04      	cmp	r3, #4
 80033fe:	d102      	bne.n	8003406 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003400:	4b25      	ldr	r3, [pc, #148]	@ (8003498 <HAL_RCC_GetSysClockFreq+0x110>)
 8003402:	61bb      	str	r3, [r7, #24]
 8003404:	e004      	b.n	8003410 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	2b08      	cmp	r3, #8
 800340a:	d101      	bne.n	8003410 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800340c:	4b23      	ldr	r3, [pc, #140]	@ (800349c <HAL_RCC_GetSysClockFreq+0x114>)
 800340e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	2b0c      	cmp	r3, #12
 8003414:	d134      	bne.n	8003480 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003416:	4b1e      	ldr	r3, [pc, #120]	@ (8003490 <HAL_RCC_GetSysClockFreq+0x108>)
 8003418:	68db      	ldr	r3, [r3, #12]
 800341a:	f003 0303 	and.w	r3, r3, #3
 800341e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	2b02      	cmp	r3, #2
 8003424:	d003      	beq.n	800342e <HAL_RCC_GetSysClockFreq+0xa6>
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	2b03      	cmp	r3, #3
 800342a:	d003      	beq.n	8003434 <HAL_RCC_GetSysClockFreq+0xac>
 800342c:	e005      	b.n	800343a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800342e:	4b1a      	ldr	r3, [pc, #104]	@ (8003498 <HAL_RCC_GetSysClockFreq+0x110>)
 8003430:	617b      	str	r3, [r7, #20]
      break;
 8003432:	e005      	b.n	8003440 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003434:	4b19      	ldr	r3, [pc, #100]	@ (800349c <HAL_RCC_GetSysClockFreq+0x114>)
 8003436:	617b      	str	r3, [r7, #20]
      break;
 8003438:	e002      	b.n	8003440 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800343a:	69fb      	ldr	r3, [r7, #28]
 800343c:	617b      	str	r3, [r7, #20]
      break;
 800343e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003440:	4b13      	ldr	r3, [pc, #76]	@ (8003490 <HAL_RCC_GetSysClockFreq+0x108>)
 8003442:	68db      	ldr	r3, [r3, #12]
 8003444:	091b      	lsrs	r3, r3, #4
 8003446:	f003 0307 	and.w	r3, r3, #7
 800344a:	3301      	adds	r3, #1
 800344c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800344e:	4b10      	ldr	r3, [pc, #64]	@ (8003490 <HAL_RCC_GetSysClockFreq+0x108>)
 8003450:	68db      	ldr	r3, [r3, #12]
 8003452:	0a1b      	lsrs	r3, r3, #8
 8003454:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003458:	697a      	ldr	r2, [r7, #20]
 800345a:	fb03 f202 	mul.w	r2, r3, r2
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	fbb2 f3f3 	udiv	r3, r2, r3
 8003464:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003466:	4b0a      	ldr	r3, [pc, #40]	@ (8003490 <HAL_RCC_GetSysClockFreq+0x108>)
 8003468:	68db      	ldr	r3, [r3, #12]
 800346a:	0e5b      	lsrs	r3, r3, #25
 800346c:	f003 0303 	and.w	r3, r3, #3
 8003470:	3301      	adds	r3, #1
 8003472:	005b      	lsls	r3, r3, #1
 8003474:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003476:	697a      	ldr	r2, [r7, #20]
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	fbb2 f3f3 	udiv	r3, r2, r3
 800347e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003480:	69bb      	ldr	r3, [r7, #24]
}
 8003482:	4618      	mov	r0, r3
 8003484:	3724      	adds	r7, #36	@ 0x24
 8003486:	46bd      	mov	sp, r7
 8003488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348c:	4770      	bx	lr
 800348e:	bf00      	nop
 8003490:	40021000 	.word	0x40021000
 8003494:	0800be84 	.word	0x0800be84
 8003498:	00f42400 	.word	0x00f42400
 800349c:	007a1200 	.word	0x007a1200

080034a0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034a0:	b480      	push	{r7}
 80034a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034a4:	4b03      	ldr	r3, [pc, #12]	@ (80034b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80034a6:	681b      	ldr	r3, [r3, #0]
}
 80034a8:	4618      	mov	r0, r3
 80034aa:	46bd      	mov	sp, r7
 80034ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b0:	4770      	bx	lr
 80034b2:	bf00      	nop
 80034b4:	2000000c 	.word	0x2000000c

080034b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80034bc:	f7ff fff0 	bl	80034a0 <HAL_RCC_GetHCLKFreq>
 80034c0:	4602      	mov	r2, r0
 80034c2:	4b06      	ldr	r3, [pc, #24]	@ (80034dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80034c4:	689b      	ldr	r3, [r3, #8]
 80034c6:	0a1b      	lsrs	r3, r3, #8
 80034c8:	f003 0307 	and.w	r3, r3, #7
 80034cc:	4904      	ldr	r1, [pc, #16]	@ (80034e0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80034ce:	5ccb      	ldrb	r3, [r1, r3]
 80034d0:	f003 031f 	and.w	r3, r3, #31
 80034d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034d8:	4618      	mov	r0, r3
 80034da:	bd80      	pop	{r7, pc}
 80034dc:	40021000 	.word	0x40021000
 80034e0:	0800be7c 	.word	0x0800be7c

080034e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80034e8:	f7ff ffda 	bl	80034a0 <HAL_RCC_GetHCLKFreq>
 80034ec:	4602      	mov	r2, r0
 80034ee:	4b06      	ldr	r3, [pc, #24]	@ (8003508 <HAL_RCC_GetPCLK2Freq+0x24>)
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	0adb      	lsrs	r3, r3, #11
 80034f4:	f003 0307 	and.w	r3, r3, #7
 80034f8:	4904      	ldr	r1, [pc, #16]	@ (800350c <HAL_RCC_GetPCLK2Freq+0x28>)
 80034fa:	5ccb      	ldrb	r3, [r1, r3]
 80034fc:	f003 031f 	and.w	r3, r3, #31
 8003500:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003504:	4618      	mov	r0, r3
 8003506:	bd80      	pop	{r7, pc}
 8003508:	40021000 	.word	0x40021000
 800350c:	0800be7c 	.word	0x0800be7c

08003510 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003510:	b480      	push	{r7}
 8003512:	b083      	sub	sp, #12
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
 8003518:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	220f      	movs	r2, #15
 800351e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003520:	4b12      	ldr	r3, [pc, #72]	@ (800356c <HAL_RCC_GetClockConfig+0x5c>)
 8003522:	689b      	ldr	r3, [r3, #8]
 8003524:	f003 0203 	and.w	r2, r3, #3
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800352c:	4b0f      	ldr	r3, [pc, #60]	@ (800356c <HAL_RCC_GetClockConfig+0x5c>)
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003538:	4b0c      	ldr	r3, [pc, #48]	@ (800356c <HAL_RCC_GetClockConfig+0x5c>)
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003544:	4b09      	ldr	r3, [pc, #36]	@ (800356c <HAL_RCC_GetClockConfig+0x5c>)
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	08db      	lsrs	r3, r3, #3
 800354a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003552:	4b07      	ldr	r3, [pc, #28]	@ (8003570 <HAL_RCC_GetClockConfig+0x60>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f003 0207 	and.w	r2, r3, #7
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	601a      	str	r2, [r3, #0]
}
 800355e:	bf00      	nop
 8003560:	370c      	adds	r7, #12
 8003562:	46bd      	mov	sp, r7
 8003564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003568:	4770      	bx	lr
 800356a:	bf00      	nop
 800356c:	40021000 	.word	0x40021000
 8003570:	40022000 	.word	0x40022000

08003574 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b086      	sub	sp, #24
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800357c:	2300      	movs	r3, #0
 800357e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003580:	4b2a      	ldr	r3, [pc, #168]	@ (800362c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003582:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003584:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003588:	2b00      	cmp	r3, #0
 800358a:	d003      	beq.n	8003594 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800358c:	f7ff f9bc 	bl	8002908 <HAL_PWREx_GetVoltageRange>
 8003590:	6178      	str	r0, [r7, #20]
 8003592:	e014      	b.n	80035be <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003594:	4b25      	ldr	r3, [pc, #148]	@ (800362c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003596:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003598:	4a24      	ldr	r2, [pc, #144]	@ (800362c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800359a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800359e:	6593      	str	r3, [r2, #88]	@ 0x58
 80035a0:	4b22      	ldr	r3, [pc, #136]	@ (800362c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80035a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035a8:	60fb      	str	r3, [r7, #12]
 80035aa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80035ac:	f7ff f9ac 	bl	8002908 <HAL_PWREx_GetVoltageRange>
 80035b0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80035b2:	4b1e      	ldr	r3, [pc, #120]	@ (800362c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80035b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035b6:	4a1d      	ldr	r2, [pc, #116]	@ (800362c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80035b8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80035bc:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80035c4:	d10b      	bne.n	80035de <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2b80      	cmp	r3, #128	@ 0x80
 80035ca:	d919      	bls.n	8003600 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2ba0      	cmp	r3, #160	@ 0xa0
 80035d0:	d902      	bls.n	80035d8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80035d2:	2302      	movs	r3, #2
 80035d4:	613b      	str	r3, [r7, #16]
 80035d6:	e013      	b.n	8003600 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80035d8:	2301      	movs	r3, #1
 80035da:	613b      	str	r3, [r7, #16]
 80035dc:	e010      	b.n	8003600 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2b80      	cmp	r3, #128	@ 0x80
 80035e2:	d902      	bls.n	80035ea <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80035e4:	2303      	movs	r3, #3
 80035e6:	613b      	str	r3, [r7, #16]
 80035e8:	e00a      	b.n	8003600 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2b80      	cmp	r3, #128	@ 0x80
 80035ee:	d102      	bne.n	80035f6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80035f0:	2302      	movs	r3, #2
 80035f2:	613b      	str	r3, [r7, #16]
 80035f4:	e004      	b.n	8003600 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2b70      	cmp	r3, #112	@ 0x70
 80035fa:	d101      	bne.n	8003600 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80035fc:	2301      	movs	r3, #1
 80035fe:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003600:	4b0b      	ldr	r3, [pc, #44]	@ (8003630 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f023 0207 	bic.w	r2, r3, #7
 8003608:	4909      	ldr	r1, [pc, #36]	@ (8003630 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800360a:	693b      	ldr	r3, [r7, #16]
 800360c:	4313      	orrs	r3, r2
 800360e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003610:	4b07      	ldr	r3, [pc, #28]	@ (8003630 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f003 0307 	and.w	r3, r3, #7
 8003618:	693a      	ldr	r2, [r7, #16]
 800361a:	429a      	cmp	r2, r3
 800361c:	d001      	beq.n	8003622 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	e000      	b.n	8003624 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003622:	2300      	movs	r3, #0
}
 8003624:	4618      	mov	r0, r3
 8003626:	3718      	adds	r7, #24
 8003628:	46bd      	mov	sp, r7
 800362a:	bd80      	pop	{r7, pc}
 800362c:	40021000 	.word	0x40021000
 8003630:	40022000 	.word	0x40022000

08003634 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b086      	sub	sp, #24
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800363c:	2300      	movs	r3, #0
 800363e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003640:	2300      	movs	r3, #0
 8003642:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800364c:	2b00      	cmp	r3, #0
 800364e:	d041      	beq.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003654:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003658:	d02a      	beq.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800365a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800365e:	d824      	bhi.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003660:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003664:	d008      	beq.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003666:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800366a:	d81e      	bhi.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0x76>
 800366c:	2b00      	cmp	r3, #0
 800366e:	d00a      	beq.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003670:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003674:	d010      	beq.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003676:	e018      	b.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003678:	4b86      	ldr	r3, [pc, #536]	@ (8003894 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800367a:	68db      	ldr	r3, [r3, #12]
 800367c:	4a85      	ldr	r2, [pc, #532]	@ (8003894 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800367e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003682:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003684:	e015      	b.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	3304      	adds	r3, #4
 800368a:	2100      	movs	r1, #0
 800368c:	4618      	mov	r0, r3
 800368e:	f000 fabb 	bl	8003c08 <RCCEx_PLLSAI1_Config>
 8003692:	4603      	mov	r3, r0
 8003694:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003696:	e00c      	b.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	3320      	adds	r3, #32
 800369c:	2100      	movs	r1, #0
 800369e:	4618      	mov	r0, r3
 80036a0:	f000 fba6 	bl	8003df0 <RCCEx_PLLSAI2_Config>
 80036a4:	4603      	mov	r3, r0
 80036a6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80036a8:	e003      	b.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	74fb      	strb	r3, [r7, #19]
      break;
 80036ae:	e000      	b.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80036b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80036b2:	7cfb      	ldrb	r3, [r7, #19]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d10b      	bne.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80036b8:	4b76      	ldr	r3, [pc, #472]	@ (8003894 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036be:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80036c6:	4973      	ldr	r1, [pc, #460]	@ (8003894 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036c8:	4313      	orrs	r3, r2
 80036ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80036ce:	e001      	b.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036d0:	7cfb      	ldrb	r3, [r7, #19]
 80036d2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d041      	beq.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80036e4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80036e8:	d02a      	beq.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80036ea:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80036ee:	d824      	bhi.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x106>
 80036f0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80036f4:	d008      	beq.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80036f6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80036fa:	d81e      	bhi.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x106>
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d00a      	beq.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003700:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003704:	d010      	beq.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003706:	e018      	b.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003708:	4b62      	ldr	r3, [pc, #392]	@ (8003894 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800370a:	68db      	ldr	r3, [r3, #12]
 800370c:	4a61      	ldr	r2, [pc, #388]	@ (8003894 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800370e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003712:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003714:	e015      	b.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	3304      	adds	r3, #4
 800371a:	2100      	movs	r1, #0
 800371c:	4618      	mov	r0, r3
 800371e:	f000 fa73 	bl	8003c08 <RCCEx_PLLSAI1_Config>
 8003722:	4603      	mov	r3, r0
 8003724:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003726:	e00c      	b.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	3320      	adds	r3, #32
 800372c:	2100      	movs	r1, #0
 800372e:	4618      	mov	r0, r3
 8003730:	f000 fb5e 	bl	8003df0 <RCCEx_PLLSAI2_Config>
 8003734:	4603      	mov	r3, r0
 8003736:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003738:	e003      	b.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	74fb      	strb	r3, [r7, #19]
      break;
 800373e:	e000      	b.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003740:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003742:	7cfb      	ldrb	r3, [r7, #19]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d10b      	bne.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003748:	4b52      	ldr	r3, [pc, #328]	@ (8003894 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800374a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800374e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003756:	494f      	ldr	r1, [pc, #316]	@ (8003894 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003758:	4313      	orrs	r3, r2
 800375a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800375e:	e001      	b.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003760:	7cfb      	ldrb	r3, [r7, #19]
 8003762:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800376c:	2b00      	cmp	r3, #0
 800376e:	f000 80a0 	beq.w	80038b2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003772:	2300      	movs	r3, #0
 8003774:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003776:	4b47      	ldr	r3, [pc, #284]	@ (8003894 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003778:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800377a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800377e:	2b00      	cmp	r3, #0
 8003780:	d101      	bne.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003782:	2301      	movs	r3, #1
 8003784:	e000      	b.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003786:	2300      	movs	r3, #0
 8003788:	2b00      	cmp	r3, #0
 800378a:	d00d      	beq.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800378c:	4b41      	ldr	r3, [pc, #260]	@ (8003894 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800378e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003790:	4a40      	ldr	r2, [pc, #256]	@ (8003894 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003792:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003796:	6593      	str	r3, [r2, #88]	@ 0x58
 8003798:	4b3e      	ldr	r3, [pc, #248]	@ (8003894 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800379a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800379c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037a0:	60bb      	str	r3, [r7, #8]
 80037a2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037a4:	2301      	movs	r3, #1
 80037a6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80037a8:	4b3b      	ldr	r3, [pc, #236]	@ (8003898 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a3a      	ldr	r2, [pc, #232]	@ (8003898 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80037ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80037b2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80037b4:	f7fe fd8a 	bl	80022cc <HAL_GetTick>
 80037b8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80037ba:	e009      	b.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037bc:	f7fe fd86 	bl	80022cc <HAL_GetTick>
 80037c0:	4602      	mov	r2, r0
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	1ad3      	subs	r3, r2, r3
 80037c6:	2b02      	cmp	r3, #2
 80037c8:	d902      	bls.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80037ca:	2303      	movs	r3, #3
 80037cc:	74fb      	strb	r3, [r7, #19]
        break;
 80037ce:	e005      	b.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80037d0:	4b31      	ldr	r3, [pc, #196]	@ (8003898 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d0ef      	beq.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80037dc:	7cfb      	ldrb	r3, [r7, #19]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d15c      	bne.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80037e2:	4b2c      	ldr	r3, [pc, #176]	@ (8003894 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037e8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80037ec:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d01f      	beq.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80037fa:	697a      	ldr	r2, [r7, #20]
 80037fc:	429a      	cmp	r2, r3
 80037fe:	d019      	beq.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003800:	4b24      	ldr	r3, [pc, #144]	@ (8003894 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003802:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003806:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800380a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800380c:	4b21      	ldr	r3, [pc, #132]	@ (8003894 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800380e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003812:	4a20      	ldr	r2, [pc, #128]	@ (8003894 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003814:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003818:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800381c:	4b1d      	ldr	r3, [pc, #116]	@ (8003894 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800381e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003822:	4a1c      	ldr	r2, [pc, #112]	@ (8003894 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003824:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003828:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800382c:	4a19      	ldr	r2, [pc, #100]	@ (8003894 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003834:	697b      	ldr	r3, [r7, #20]
 8003836:	f003 0301 	and.w	r3, r3, #1
 800383a:	2b00      	cmp	r3, #0
 800383c:	d016      	beq.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800383e:	f7fe fd45 	bl	80022cc <HAL_GetTick>
 8003842:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003844:	e00b      	b.n	800385e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003846:	f7fe fd41 	bl	80022cc <HAL_GetTick>
 800384a:	4602      	mov	r2, r0
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	1ad3      	subs	r3, r2, r3
 8003850:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003854:	4293      	cmp	r3, r2
 8003856:	d902      	bls.n	800385e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003858:	2303      	movs	r3, #3
 800385a:	74fb      	strb	r3, [r7, #19]
            break;
 800385c:	e006      	b.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800385e:	4b0d      	ldr	r3, [pc, #52]	@ (8003894 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003860:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003864:	f003 0302 	and.w	r3, r3, #2
 8003868:	2b00      	cmp	r3, #0
 800386a:	d0ec      	beq.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800386c:	7cfb      	ldrb	r3, [r7, #19]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d10c      	bne.n	800388c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003872:	4b08      	ldr	r3, [pc, #32]	@ (8003894 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003874:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003878:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003882:	4904      	ldr	r1, [pc, #16]	@ (8003894 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003884:	4313      	orrs	r3, r2
 8003886:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800388a:	e009      	b.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800388c:	7cfb      	ldrb	r3, [r7, #19]
 800388e:	74bb      	strb	r3, [r7, #18]
 8003890:	e006      	b.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003892:	bf00      	nop
 8003894:	40021000 	.word	0x40021000
 8003898:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800389c:	7cfb      	ldrb	r3, [r7, #19]
 800389e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80038a0:	7c7b      	ldrb	r3, [r7, #17]
 80038a2:	2b01      	cmp	r3, #1
 80038a4:	d105      	bne.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038a6:	4b9e      	ldr	r3, [pc, #632]	@ (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038aa:	4a9d      	ldr	r2, [pc, #628]	@ (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038ac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80038b0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f003 0301 	and.w	r3, r3, #1
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d00a      	beq.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80038be:	4b98      	ldr	r3, [pc, #608]	@ (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038c4:	f023 0203 	bic.w	r2, r3, #3
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038cc:	4994      	ldr	r1, [pc, #592]	@ (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038ce:	4313      	orrs	r3, r2
 80038d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f003 0302 	and.w	r3, r3, #2
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d00a      	beq.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80038e0:	4b8f      	ldr	r3, [pc, #572]	@ (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038e6:	f023 020c 	bic.w	r2, r3, #12
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038ee:	498c      	ldr	r1, [pc, #560]	@ (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038f0:	4313      	orrs	r3, r2
 80038f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f003 0304 	and.w	r3, r3, #4
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d00a      	beq.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003902:	4b87      	ldr	r3, [pc, #540]	@ (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003904:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003908:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003910:	4983      	ldr	r1, [pc, #524]	@ (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003912:	4313      	orrs	r3, r2
 8003914:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f003 0308 	and.w	r3, r3, #8
 8003920:	2b00      	cmp	r3, #0
 8003922:	d00a      	beq.n	800393a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003924:	4b7e      	ldr	r3, [pc, #504]	@ (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003926:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800392a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003932:	497b      	ldr	r1, [pc, #492]	@ (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003934:	4313      	orrs	r3, r2
 8003936:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f003 0310 	and.w	r3, r3, #16
 8003942:	2b00      	cmp	r3, #0
 8003944:	d00a      	beq.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003946:	4b76      	ldr	r3, [pc, #472]	@ (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003948:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800394c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003954:	4972      	ldr	r1, [pc, #456]	@ (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003956:	4313      	orrs	r3, r2
 8003958:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f003 0320 	and.w	r3, r3, #32
 8003964:	2b00      	cmp	r3, #0
 8003966:	d00a      	beq.n	800397e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003968:	4b6d      	ldr	r3, [pc, #436]	@ (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800396a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800396e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003976:	496a      	ldr	r1, [pc, #424]	@ (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003978:	4313      	orrs	r3, r2
 800397a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003986:	2b00      	cmp	r3, #0
 8003988:	d00a      	beq.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800398a:	4b65      	ldr	r3, [pc, #404]	@ (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800398c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003990:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003998:	4961      	ldr	r1, [pc, #388]	@ (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800399a:	4313      	orrs	r3, r2
 800399c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d00a      	beq.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80039ac:	4b5c      	ldr	r3, [pc, #368]	@ (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039b2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039ba:	4959      	ldr	r1, [pc, #356]	@ (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039bc:	4313      	orrs	r3, r2
 80039be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d00a      	beq.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80039ce:	4b54      	ldr	r3, [pc, #336]	@ (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039d4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039dc:	4950      	ldr	r1, [pc, #320]	@ (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039de:	4313      	orrs	r3, r2
 80039e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d00a      	beq.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80039f0:	4b4b      	ldr	r3, [pc, #300]	@ (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039f6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039fe:	4948      	ldr	r1, [pc, #288]	@ (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a00:	4313      	orrs	r3, r2
 8003a02:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d00a      	beq.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003a12:	4b43      	ldr	r3, [pc, #268]	@ (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a18:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a20:	493f      	ldr	r1, [pc, #252]	@ (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a22:	4313      	orrs	r3, r2
 8003a24:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d028      	beq.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003a34:	4b3a      	ldr	r3, [pc, #232]	@ (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a3a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003a42:	4937      	ldr	r1, [pc, #220]	@ (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a44:	4313      	orrs	r3, r2
 8003a46:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003a4e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003a52:	d106      	bne.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a54:	4b32      	ldr	r3, [pc, #200]	@ (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a56:	68db      	ldr	r3, [r3, #12]
 8003a58:	4a31      	ldr	r2, [pc, #196]	@ (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a5a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003a5e:	60d3      	str	r3, [r2, #12]
 8003a60:	e011      	b.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003a66:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003a6a:	d10c      	bne.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	3304      	adds	r3, #4
 8003a70:	2101      	movs	r1, #1
 8003a72:	4618      	mov	r0, r3
 8003a74:	f000 f8c8 	bl	8003c08 <RCCEx_PLLSAI1_Config>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003a7c:	7cfb      	ldrb	r3, [r7, #19]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d001      	beq.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003a82:	7cfb      	ldrb	r3, [r7, #19]
 8003a84:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d028      	beq.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003a92:	4b23      	ldr	r3, [pc, #140]	@ (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a98:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003aa0:	491f      	ldr	r1, [pc, #124]	@ (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003aac:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003ab0:	d106      	bne.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ab2:	4b1b      	ldr	r3, [pc, #108]	@ (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ab4:	68db      	ldr	r3, [r3, #12]
 8003ab6:	4a1a      	ldr	r2, [pc, #104]	@ (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ab8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003abc:	60d3      	str	r3, [r2, #12]
 8003abe:	e011      	b.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ac4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003ac8:	d10c      	bne.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	3304      	adds	r3, #4
 8003ace:	2101      	movs	r1, #1
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	f000 f899 	bl	8003c08 <RCCEx_PLLSAI1_Config>
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003ada:	7cfb      	ldrb	r3, [r7, #19]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d001      	beq.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003ae0:	7cfb      	ldrb	r3, [r7, #19]
 8003ae2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d02b      	beq.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003af0:	4b0b      	ldr	r3, [pc, #44]	@ (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003af2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003af6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003afe:	4908      	ldr	r1, [pc, #32]	@ (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b00:	4313      	orrs	r3, r2
 8003b02:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b0a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003b0e:	d109      	bne.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b10:	4b03      	ldr	r3, [pc, #12]	@ (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b12:	68db      	ldr	r3, [r3, #12]
 8003b14:	4a02      	ldr	r2, [pc, #8]	@ (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b16:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003b1a:	60d3      	str	r3, [r2, #12]
 8003b1c:	e014      	b.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003b1e:	bf00      	nop
 8003b20:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b28:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003b2c:	d10c      	bne.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	3304      	adds	r3, #4
 8003b32:	2101      	movs	r1, #1
 8003b34:	4618      	mov	r0, r3
 8003b36:	f000 f867 	bl	8003c08 <RCCEx_PLLSAI1_Config>
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003b3e:	7cfb      	ldrb	r3, [r7, #19]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d001      	beq.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003b44:	7cfb      	ldrb	r3, [r7, #19]
 8003b46:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d02f      	beq.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003b54:	4b2b      	ldr	r3, [pc, #172]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003b56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b5a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003b62:	4928      	ldr	r1, [pc, #160]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003b64:	4313      	orrs	r3, r2
 8003b66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003b6e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003b72:	d10d      	bne.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	3304      	adds	r3, #4
 8003b78:	2102      	movs	r1, #2
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f000 f844 	bl	8003c08 <RCCEx_PLLSAI1_Config>
 8003b80:	4603      	mov	r3, r0
 8003b82:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003b84:	7cfb      	ldrb	r3, [r7, #19]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d014      	beq.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003b8a:	7cfb      	ldrb	r3, [r7, #19]
 8003b8c:	74bb      	strb	r3, [r7, #18]
 8003b8e:	e011      	b.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003b94:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003b98:	d10c      	bne.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	3320      	adds	r3, #32
 8003b9e:	2102      	movs	r1, #2
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	f000 f925 	bl	8003df0 <RCCEx_PLLSAI2_Config>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003baa:	7cfb      	ldrb	r3, [r7, #19]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d001      	beq.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003bb0:	7cfb      	ldrb	r3, [r7, #19]
 8003bb2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d00a      	beq.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003bc0:	4b10      	ldr	r3, [pc, #64]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003bc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bc6:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003bce:	490d      	ldr	r1, [pc, #52]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d00b      	beq.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003be2:	4b08      	ldr	r3, [pc, #32]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003be4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003be8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003bf2:	4904      	ldr	r1, [pc, #16]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003bfa:	7cbb      	ldrb	r3, [r7, #18]
}
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	3718      	adds	r7, #24
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bd80      	pop	{r7, pc}
 8003c04:	40021000 	.word	0x40021000

08003c08 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b084      	sub	sp, #16
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
 8003c10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003c12:	2300      	movs	r3, #0
 8003c14:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003c16:	4b75      	ldr	r3, [pc, #468]	@ (8003dec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c18:	68db      	ldr	r3, [r3, #12]
 8003c1a:	f003 0303 	and.w	r3, r3, #3
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d018      	beq.n	8003c54 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003c22:	4b72      	ldr	r3, [pc, #456]	@ (8003dec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c24:	68db      	ldr	r3, [r3, #12]
 8003c26:	f003 0203 	and.w	r2, r3, #3
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	429a      	cmp	r2, r3
 8003c30:	d10d      	bne.n	8003c4e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
       ||
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d009      	beq.n	8003c4e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003c3a:	4b6c      	ldr	r3, [pc, #432]	@ (8003dec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c3c:	68db      	ldr	r3, [r3, #12]
 8003c3e:	091b      	lsrs	r3, r3, #4
 8003c40:	f003 0307 	and.w	r3, r3, #7
 8003c44:	1c5a      	adds	r2, r3, #1
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	685b      	ldr	r3, [r3, #4]
       ||
 8003c4a:	429a      	cmp	r2, r3
 8003c4c:	d047      	beq.n	8003cde <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	73fb      	strb	r3, [r7, #15]
 8003c52:	e044      	b.n	8003cde <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	2b03      	cmp	r3, #3
 8003c5a:	d018      	beq.n	8003c8e <RCCEx_PLLSAI1_Config+0x86>
 8003c5c:	2b03      	cmp	r3, #3
 8003c5e:	d825      	bhi.n	8003cac <RCCEx_PLLSAI1_Config+0xa4>
 8003c60:	2b01      	cmp	r3, #1
 8003c62:	d002      	beq.n	8003c6a <RCCEx_PLLSAI1_Config+0x62>
 8003c64:	2b02      	cmp	r3, #2
 8003c66:	d009      	beq.n	8003c7c <RCCEx_PLLSAI1_Config+0x74>
 8003c68:	e020      	b.n	8003cac <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003c6a:	4b60      	ldr	r3, [pc, #384]	@ (8003dec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f003 0302 	and.w	r3, r3, #2
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d11d      	bne.n	8003cb2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c7a:	e01a      	b.n	8003cb2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003c7c:	4b5b      	ldr	r3, [pc, #364]	@ (8003dec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d116      	bne.n	8003cb6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c8c:	e013      	b.n	8003cb6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003c8e:	4b57      	ldr	r3, [pc, #348]	@ (8003dec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d10f      	bne.n	8003cba <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003c9a:	4b54      	ldr	r3, [pc, #336]	@ (8003dec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d109      	bne.n	8003cba <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003caa:	e006      	b.n	8003cba <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003cac:	2301      	movs	r3, #1
 8003cae:	73fb      	strb	r3, [r7, #15]
      break;
 8003cb0:	e004      	b.n	8003cbc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003cb2:	bf00      	nop
 8003cb4:	e002      	b.n	8003cbc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003cb6:	bf00      	nop
 8003cb8:	e000      	b.n	8003cbc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003cba:	bf00      	nop
    }

    if(status == HAL_OK)
 8003cbc:	7bfb      	ldrb	r3, [r7, #15]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d10d      	bne.n	8003cde <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003cc2:	4b4a      	ldr	r3, [pc, #296]	@ (8003dec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cc4:	68db      	ldr	r3, [r3, #12]
 8003cc6:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6819      	ldr	r1, [r3, #0]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	3b01      	subs	r3, #1
 8003cd4:	011b      	lsls	r3, r3, #4
 8003cd6:	430b      	orrs	r3, r1
 8003cd8:	4944      	ldr	r1, [pc, #272]	@ (8003dec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003cde:	7bfb      	ldrb	r3, [r7, #15]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d17d      	bne.n	8003de0 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003ce4:	4b41      	ldr	r3, [pc, #260]	@ (8003dec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a40      	ldr	r2, [pc, #256]	@ (8003dec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cea:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003cee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cf0:	f7fe faec 	bl	80022cc <HAL_GetTick>
 8003cf4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003cf6:	e009      	b.n	8003d0c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003cf8:	f7fe fae8 	bl	80022cc <HAL_GetTick>
 8003cfc:	4602      	mov	r2, r0
 8003cfe:	68bb      	ldr	r3, [r7, #8]
 8003d00:	1ad3      	subs	r3, r2, r3
 8003d02:	2b02      	cmp	r3, #2
 8003d04:	d902      	bls.n	8003d0c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003d06:	2303      	movs	r3, #3
 8003d08:	73fb      	strb	r3, [r7, #15]
        break;
 8003d0a:	e005      	b.n	8003d18 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003d0c:	4b37      	ldr	r3, [pc, #220]	@ (8003dec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d1ef      	bne.n	8003cf8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003d18:	7bfb      	ldrb	r3, [r7, #15]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d160      	bne.n	8003de0 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d111      	bne.n	8003d48 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003d24:	4b31      	ldr	r3, [pc, #196]	@ (8003dec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d26:	691b      	ldr	r3, [r3, #16]
 8003d28:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003d2c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d30:	687a      	ldr	r2, [r7, #4]
 8003d32:	6892      	ldr	r2, [r2, #8]
 8003d34:	0211      	lsls	r1, r2, #8
 8003d36:	687a      	ldr	r2, [r7, #4]
 8003d38:	68d2      	ldr	r2, [r2, #12]
 8003d3a:	0912      	lsrs	r2, r2, #4
 8003d3c:	0452      	lsls	r2, r2, #17
 8003d3e:	430a      	orrs	r2, r1
 8003d40:	492a      	ldr	r1, [pc, #168]	@ (8003dec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d42:	4313      	orrs	r3, r2
 8003d44:	610b      	str	r3, [r1, #16]
 8003d46:	e027      	b.n	8003d98 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	2b01      	cmp	r3, #1
 8003d4c:	d112      	bne.n	8003d74 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003d4e:	4b27      	ldr	r3, [pc, #156]	@ (8003dec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d50:	691b      	ldr	r3, [r3, #16]
 8003d52:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8003d56:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003d5a:	687a      	ldr	r2, [r7, #4]
 8003d5c:	6892      	ldr	r2, [r2, #8]
 8003d5e:	0211      	lsls	r1, r2, #8
 8003d60:	687a      	ldr	r2, [r7, #4]
 8003d62:	6912      	ldr	r2, [r2, #16]
 8003d64:	0852      	lsrs	r2, r2, #1
 8003d66:	3a01      	subs	r2, #1
 8003d68:	0552      	lsls	r2, r2, #21
 8003d6a:	430a      	orrs	r2, r1
 8003d6c:	491f      	ldr	r1, [pc, #124]	@ (8003dec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	610b      	str	r3, [r1, #16]
 8003d72:	e011      	b.n	8003d98 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003d74:	4b1d      	ldr	r3, [pc, #116]	@ (8003dec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d76:	691b      	ldr	r3, [r3, #16]
 8003d78:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003d7c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003d80:	687a      	ldr	r2, [r7, #4]
 8003d82:	6892      	ldr	r2, [r2, #8]
 8003d84:	0211      	lsls	r1, r2, #8
 8003d86:	687a      	ldr	r2, [r7, #4]
 8003d88:	6952      	ldr	r2, [r2, #20]
 8003d8a:	0852      	lsrs	r2, r2, #1
 8003d8c:	3a01      	subs	r2, #1
 8003d8e:	0652      	lsls	r2, r2, #25
 8003d90:	430a      	orrs	r2, r1
 8003d92:	4916      	ldr	r1, [pc, #88]	@ (8003dec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d94:	4313      	orrs	r3, r2
 8003d96:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003d98:	4b14      	ldr	r3, [pc, #80]	@ (8003dec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a13      	ldr	r2, [pc, #76]	@ (8003dec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d9e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003da2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003da4:	f7fe fa92 	bl	80022cc <HAL_GetTick>
 8003da8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003daa:	e009      	b.n	8003dc0 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003dac:	f7fe fa8e 	bl	80022cc <HAL_GetTick>
 8003db0:	4602      	mov	r2, r0
 8003db2:	68bb      	ldr	r3, [r7, #8]
 8003db4:	1ad3      	subs	r3, r2, r3
 8003db6:	2b02      	cmp	r3, #2
 8003db8:	d902      	bls.n	8003dc0 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003dba:	2303      	movs	r3, #3
 8003dbc:	73fb      	strb	r3, [r7, #15]
          break;
 8003dbe:	e005      	b.n	8003dcc <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003dc0:	4b0a      	ldr	r3, [pc, #40]	@ (8003dec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d0ef      	beq.n	8003dac <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003dcc:	7bfb      	ldrb	r3, [r7, #15]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d106      	bne.n	8003de0 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003dd2:	4b06      	ldr	r3, [pc, #24]	@ (8003dec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003dd4:	691a      	ldr	r2, [r3, #16]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	699b      	ldr	r3, [r3, #24]
 8003dda:	4904      	ldr	r1, [pc, #16]	@ (8003dec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003de0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003de2:	4618      	mov	r0, r3
 8003de4:	3710      	adds	r7, #16
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}
 8003dea:	bf00      	nop
 8003dec:	40021000 	.word	0x40021000

08003df0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b084      	sub	sp, #16
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
 8003df8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003dfe:	4b6a      	ldr	r3, [pc, #424]	@ (8003fa8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e00:	68db      	ldr	r3, [r3, #12]
 8003e02:	f003 0303 	and.w	r3, r3, #3
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d018      	beq.n	8003e3c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003e0a:	4b67      	ldr	r3, [pc, #412]	@ (8003fa8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e0c:	68db      	ldr	r3, [r3, #12]
 8003e0e:	f003 0203 	and.w	r2, r3, #3
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	429a      	cmp	r2, r3
 8003e18:	d10d      	bne.n	8003e36 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
       ||
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d009      	beq.n	8003e36 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003e22:	4b61      	ldr	r3, [pc, #388]	@ (8003fa8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e24:	68db      	ldr	r3, [r3, #12]
 8003e26:	091b      	lsrs	r3, r3, #4
 8003e28:	f003 0307 	and.w	r3, r3, #7
 8003e2c:	1c5a      	adds	r2, r3, #1
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	685b      	ldr	r3, [r3, #4]
       ||
 8003e32:	429a      	cmp	r2, r3
 8003e34:	d047      	beq.n	8003ec6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003e36:	2301      	movs	r3, #1
 8003e38:	73fb      	strb	r3, [r7, #15]
 8003e3a:	e044      	b.n	8003ec6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	2b03      	cmp	r3, #3
 8003e42:	d018      	beq.n	8003e76 <RCCEx_PLLSAI2_Config+0x86>
 8003e44:	2b03      	cmp	r3, #3
 8003e46:	d825      	bhi.n	8003e94 <RCCEx_PLLSAI2_Config+0xa4>
 8003e48:	2b01      	cmp	r3, #1
 8003e4a:	d002      	beq.n	8003e52 <RCCEx_PLLSAI2_Config+0x62>
 8003e4c:	2b02      	cmp	r3, #2
 8003e4e:	d009      	beq.n	8003e64 <RCCEx_PLLSAI2_Config+0x74>
 8003e50:	e020      	b.n	8003e94 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003e52:	4b55      	ldr	r3, [pc, #340]	@ (8003fa8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f003 0302 	and.w	r3, r3, #2
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d11d      	bne.n	8003e9a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e62:	e01a      	b.n	8003e9a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003e64:	4b50      	ldr	r3, [pc, #320]	@ (8003fa8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d116      	bne.n	8003e9e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003e70:	2301      	movs	r3, #1
 8003e72:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e74:	e013      	b.n	8003e9e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003e76:	4b4c      	ldr	r3, [pc, #304]	@ (8003fa8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d10f      	bne.n	8003ea2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003e82:	4b49      	ldr	r3, [pc, #292]	@ (8003fa8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d109      	bne.n	8003ea2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003e92:	e006      	b.n	8003ea2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003e94:	2301      	movs	r3, #1
 8003e96:	73fb      	strb	r3, [r7, #15]
      break;
 8003e98:	e004      	b.n	8003ea4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003e9a:	bf00      	nop
 8003e9c:	e002      	b.n	8003ea4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003e9e:	bf00      	nop
 8003ea0:	e000      	b.n	8003ea4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003ea2:	bf00      	nop
    }

    if(status == HAL_OK)
 8003ea4:	7bfb      	ldrb	r3, [r7, #15]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d10d      	bne.n	8003ec6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003eaa:	4b3f      	ldr	r3, [pc, #252]	@ (8003fa8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003eac:	68db      	ldr	r3, [r3, #12]
 8003eae:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6819      	ldr	r1, [r3, #0]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	3b01      	subs	r3, #1
 8003ebc:	011b      	lsls	r3, r3, #4
 8003ebe:	430b      	orrs	r3, r1
 8003ec0:	4939      	ldr	r1, [pc, #228]	@ (8003fa8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003ec6:	7bfb      	ldrb	r3, [r7, #15]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d167      	bne.n	8003f9c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003ecc:	4b36      	ldr	r3, [pc, #216]	@ (8003fa8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a35      	ldr	r2, [pc, #212]	@ (8003fa8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ed2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003ed6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ed8:	f7fe f9f8 	bl	80022cc <HAL_GetTick>
 8003edc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003ede:	e009      	b.n	8003ef4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003ee0:	f7fe f9f4 	bl	80022cc <HAL_GetTick>
 8003ee4:	4602      	mov	r2, r0
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	1ad3      	subs	r3, r2, r3
 8003eea:	2b02      	cmp	r3, #2
 8003eec:	d902      	bls.n	8003ef4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003eee:	2303      	movs	r3, #3
 8003ef0:	73fb      	strb	r3, [r7, #15]
        break;
 8003ef2:	e005      	b.n	8003f00 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003ef4:	4b2c      	ldr	r3, [pc, #176]	@ (8003fa8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d1ef      	bne.n	8003ee0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003f00:	7bfb      	ldrb	r3, [r7, #15]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d14a      	bne.n	8003f9c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d111      	bne.n	8003f30 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003f0c:	4b26      	ldr	r3, [pc, #152]	@ (8003fa8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f0e:	695b      	ldr	r3, [r3, #20]
 8003f10:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003f14:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f18:	687a      	ldr	r2, [r7, #4]
 8003f1a:	6892      	ldr	r2, [r2, #8]
 8003f1c:	0211      	lsls	r1, r2, #8
 8003f1e:	687a      	ldr	r2, [r7, #4]
 8003f20:	68d2      	ldr	r2, [r2, #12]
 8003f22:	0912      	lsrs	r2, r2, #4
 8003f24:	0452      	lsls	r2, r2, #17
 8003f26:	430a      	orrs	r2, r1
 8003f28:	491f      	ldr	r1, [pc, #124]	@ (8003fa8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	614b      	str	r3, [r1, #20]
 8003f2e:	e011      	b.n	8003f54 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003f30:	4b1d      	ldr	r3, [pc, #116]	@ (8003fa8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f32:	695b      	ldr	r3, [r3, #20]
 8003f34:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003f38:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003f3c:	687a      	ldr	r2, [r7, #4]
 8003f3e:	6892      	ldr	r2, [r2, #8]
 8003f40:	0211      	lsls	r1, r2, #8
 8003f42:	687a      	ldr	r2, [r7, #4]
 8003f44:	6912      	ldr	r2, [r2, #16]
 8003f46:	0852      	lsrs	r2, r2, #1
 8003f48:	3a01      	subs	r2, #1
 8003f4a:	0652      	lsls	r2, r2, #25
 8003f4c:	430a      	orrs	r2, r1
 8003f4e:	4916      	ldr	r1, [pc, #88]	@ (8003fa8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f50:	4313      	orrs	r3, r2
 8003f52:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003f54:	4b14      	ldr	r3, [pc, #80]	@ (8003fa8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a13      	ldr	r2, [pc, #76]	@ (8003fa8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f5a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f5e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f60:	f7fe f9b4 	bl	80022cc <HAL_GetTick>
 8003f64:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003f66:	e009      	b.n	8003f7c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003f68:	f7fe f9b0 	bl	80022cc <HAL_GetTick>
 8003f6c:	4602      	mov	r2, r0
 8003f6e:	68bb      	ldr	r3, [r7, #8]
 8003f70:	1ad3      	subs	r3, r2, r3
 8003f72:	2b02      	cmp	r3, #2
 8003f74:	d902      	bls.n	8003f7c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003f76:	2303      	movs	r3, #3
 8003f78:	73fb      	strb	r3, [r7, #15]
          break;
 8003f7a:	e005      	b.n	8003f88 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003f7c:	4b0a      	ldr	r3, [pc, #40]	@ (8003fa8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d0ef      	beq.n	8003f68 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003f88:	7bfb      	ldrb	r3, [r7, #15]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d106      	bne.n	8003f9c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003f8e:	4b06      	ldr	r3, [pc, #24]	@ (8003fa8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f90:	695a      	ldr	r2, [r3, #20]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	695b      	ldr	r3, [r3, #20]
 8003f96:	4904      	ldr	r1, [pc, #16]	@ (8003fa8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003f9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	3710      	adds	r7, #16
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bd80      	pop	{r7, pc}
 8003fa6:	bf00      	nop
 8003fa8:	40021000 	.word	0x40021000

08003fac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b084      	sub	sp, #16
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d101      	bne.n	8003fbe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	e095      	b.n	80040ea <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d108      	bne.n	8003fd8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003fce:	d009      	beq.n	8003fe4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	61da      	str	r2, [r3, #28]
 8003fd6:	e005      	b.n	8003fe4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003ff0:	b2db      	uxtb	r3, r3
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d106      	bne.n	8004004 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	f7fd fe76 	bl	8001cf0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2202      	movs	r2, #2
 8004008:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	681a      	ldr	r2, [r3, #0]
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800401a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	68db      	ldr	r3, [r3, #12]
 8004020:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004024:	d902      	bls.n	800402c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004026:	2300      	movs	r3, #0
 8004028:	60fb      	str	r3, [r7, #12]
 800402a:	e002      	b.n	8004032 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800402c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004030:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	68db      	ldr	r3, [r3, #12]
 8004036:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800403a:	d007      	beq.n	800404c <HAL_SPI_Init+0xa0>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	68db      	ldr	r3, [r3, #12]
 8004040:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004044:	d002      	beq.n	800404c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2200      	movs	r2, #0
 800404a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	689b      	ldr	r3, [r3, #8]
 8004058:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800405c:	431a      	orrs	r2, r3
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	691b      	ldr	r3, [r3, #16]
 8004062:	f003 0302 	and.w	r3, r3, #2
 8004066:	431a      	orrs	r2, r3
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	695b      	ldr	r3, [r3, #20]
 800406c:	f003 0301 	and.w	r3, r3, #1
 8004070:	431a      	orrs	r2, r3
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	699b      	ldr	r3, [r3, #24]
 8004076:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800407a:	431a      	orrs	r2, r3
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	69db      	ldr	r3, [r3, #28]
 8004080:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004084:	431a      	orrs	r2, r3
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6a1b      	ldr	r3, [r3, #32]
 800408a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800408e:	ea42 0103 	orr.w	r1, r2, r3
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004096:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	430a      	orrs	r2, r1
 80040a0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	699b      	ldr	r3, [r3, #24]
 80040a6:	0c1b      	lsrs	r3, r3, #16
 80040a8:	f003 0204 	and.w	r2, r3, #4
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040b0:	f003 0310 	and.w	r3, r3, #16
 80040b4:	431a      	orrs	r2, r3
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040ba:	f003 0308 	and.w	r3, r3, #8
 80040be:	431a      	orrs	r2, r3
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	68db      	ldr	r3, [r3, #12]
 80040c4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80040c8:	ea42 0103 	orr.w	r1, r2, r3
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	430a      	orrs	r2, r1
 80040d8:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2200      	movs	r2, #0
 80040de:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2201      	movs	r2, #1
 80040e4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80040e8:	2300      	movs	r3, #0
}
 80040ea:	4618      	mov	r0, r3
 80040ec:	3710      	adds	r7, #16
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd80      	pop	{r7, pc}

080040f2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040f2:	b580      	push	{r7, lr}
 80040f4:	b088      	sub	sp, #32
 80040f6:	af00      	add	r7, sp, #0
 80040f8:	60f8      	str	r0, [r7, #12]
 80040fa:	60b9      	str	r1, [r7, #8]
 80040fc:	603b      	str	r3, [r7, #0]
 80040fe:	4613      	mov	r3, r2
 8004100:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004102:	f7fe f8e3 	bl	80022cc <HAL_GetTick>
 8004106:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8004108:	88fb      	ldrh	r3, [r7, #6]
 800410a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004112:	b2db      	uxtb	r3, r3
 8004114:	2b01      	cmp	r3, #1
 8004116:	d001      	beq.n	800411c <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8004118:	2302      	movs	r3, #2
 800411a:	e15c      	b.n	80043d6 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d002      	beq.n	8004128 <HAL_SPI_Transmit+0x36>
 8004122:	88fb      	ldrh	r3, [r7, #6]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d101      	bne.n	800412c <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8004128:	2301      	movs	r3, #1
 800412a:	e154      	b.n	80043d6 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004132:	2b01      	cmp	r3, #1
 8004134:	d101      	bne.n	800413a <HAL_SPI_Transmit+0x48>
 8004136:	2302      	movs	r3, #2
 8004138:	e14d      	b.n	80043d6 <HAL_SPI_Transmit+0x2e4>
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	2201      	movs	r2, #1
 800413e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	2203      	movs	r2, #3
 8004146:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	2200      	movs	r2, #0
 800414e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	68ba      	ldr	r2, [r7, #8]
 8004154:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	88fa      	ldrh	r2, [r7, #6]
 800415a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	88fa      	ldrh	r2, [r7, #6]
 8004160:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	2200      	movs	r2, #0
 8004166:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	2200      	movs	r2, #0
 800416c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	2200      	movs	r2, #0
 8004174:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	2200      	movs	r2, #0
 800417c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	2200      	movs	r2, #0
 8004182:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800418c:	d10f      	bne.n	80041ae <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	681a      	ldr	r2, [r3, #0]
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800419c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	681a      	ldr	r2, [r3, #0]
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80041ac:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041b8:	2b40      	cmp	r3, #64	@ 0x40
 80041ba:	d007      	beq.n	80041cc <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	681a      	ldr	r2, [r3, #0]
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80041ca:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	68db      	ldr	r3, [r3, #12]
 80041d0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80041d4:	d952      	bls.n	800427c <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d002      	beq.n	80041e4 <HAL_SPI_Transmit+0xf2>
 80041de:	8b7b      	ldrh	r3, [r7, #26]
 80041e0:	2b01      	cmp	r3, #1
 80041e2:	d145      	bne.n	8004270 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041e8:	881a      	ldrh	r2, [r3, #0]
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041f4:	1c9a      	adds	r2, r3, #2
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80041fe:	b29b      	uxth	r3, r3
 8004200:	3b01      	subs	r3, #1
 8004202:	b29a      	uxth	r2, r3
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004208:	e032      	b.n	8004270 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	689b      	ldr	r3, [r3, #8]
 8004210:	f003 0302 	and.w	r3, r3, #2
 8004214:	2b02      	cmp	r3, #2
 8004216:	d112      	bne.n	800423e <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800421c:	881a      	ldrh	r2, [r3, #0]
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004228:	1c9a      	adds	r2, r3, #2
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004232:	b29b      	uxth	r3, r3
 8004234:	3b01      	subs	r3, #1
 8004236:	b29a      	uxth	r2, r3
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800423c:	e018      	b.n	8004270 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800423e:	f7fe f845 	bl	80022cc <HAL_GetTick>
 8004242:	4602      	mov	r2, r0
 8004244:	69fb      	ldr	r3, [r7, #28]
 8004246:	1ad3      	subs	r3, r2, r3
 8004248:	683a      	ldr	r2, [r7, #0]
 800424a:	429a      	cmp	r2, r3
 800424c:	d803      	bhi.n	8004256 <HAL_SPI_Transmit+0x164>
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004254:	d102      	bne.n	800425c <HAL_SPI_Transmit+0x16a>
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d109      	bne.n	8004270 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	2201      	movs	r2, #1
 8004260:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	2200      	movs	r2, #0
 8004268:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800426c:	2303      	movs	r3, #3
 800426e:	e0b2      	b.n	80043d6 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004274:	b29b      	uxth	r3, r3
 8004276:	2b00      	cmp	r3, #0
 8004278:	d1c7      	bne.n	800420a <HAL_SPI_Transmit+0x118>
 800427a:	e083      	b.n	8004384 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d002      	beq.n	800428a <HAL_SPI_Transmit+0x198>
 8004284:	8b7b      	ldrh	r3, [r7, #26]
 8004286:	2b01      	cmp	r3, #1
 8004288:	d177      	bne.n	800437a <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800428e:	b29b      	uxth	r3, r3
 8004290:	2b01      	cmp	r3, #1
 8004292:	d912      	bls.n	80042ba <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004298:	881a      	ldrh	r2, [r3, #0]
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042a4:	1c9a      	adds	r2, r3, #2
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80042ae:	b29b      	uxth	r3, r3
 80042b0:	3b02      	subs	r3, #2
 80042b2:	b29a      	uxth	r2, r3
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80042b8:	e05f      	b.n	800437a <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	330c      	adds	r3, #12
 80042c4:	7812      	ldrb	r2, [r2, #0]
 80042c6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042cc:	1c5a      	adds	r2, r3, #1
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80042d6:	b29b      	uxth	r3, r3
 80042d8:	3b01      	subs	r3, #1
 80042da:	b29a      	uxth	r2, r3
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80042e0:	e04b      	b.n	800437a <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	689b      	ldr	r3, [r3, #8]
 80042e8:	f003 0302 	and.w	r3, r3, #2
 80042ec:	2b02      	cmp	r3, #2
 80042ee:	d12b      	bne.n	8004348 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80042f4:	b29b      	uxth	r3, r3
 80042f6:	2b01      	cmp	r3, #1
 80042f8:	d912      	bls.n	8004320 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042fe:	881a      	ldrh	r2, [r3, #0]
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800430a:	1c9a      	adds	r2, r3, #2
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004314:	b29b      	uxth	r3, r3
 8004316:	3b02      	subs	r3, #2
 8004318:	b29a      	uxth	r2, r3
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800431e:	e02c      	b.n	800437a <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	330c      	adds	r3, #12
 800432a:	7812      	ldrb	r2, [r2, #0]
 800432c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004332:	1c5a      	adds	r2, r3, #1
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800433c:	b29b      	uxth	r3, r3
 800433e:	3b01      	subs	r3, #1
 8004340:	b29a      	uxth	r2, r3
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004346:	e018      	b.n	800437a <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004348:	f7fd ffc0 	bl	80022cc <HAL_GetTick>
 800434c:	4602      	mov	r2, r0
 800434e:	69fb      	ldr	r3, [r7, #28]
 8004350:	1ad3      	subs	r3, r2, r3
 8004352:	683a      	ldr	r2, [r7, #0]
 8004354:	429a      	cmp	r2, r3
 8004356:	d803      	bhi.n	8004360 <HAL_SPI_Transmit+0x26e>
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800435e:	d102      	bne.n	8004366 <HAL_SPI_Transmit+0x274>
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d109      	bne.n	800437a <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	2201      	movs	r2, #1
 800436a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	2200      	movs	r2, #0
 8004372:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8004376:	2303      	movs	r3, #3
 8004378:	e02d      	b.n	80043d6 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800437e:	b29b      	uxth	r3, r3
 8004380:	2b00      	cmp	r3, #0
 8004382:	d1ae      	bne.n	80042e2 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004384:	69fa      	ldr	r2, [r7, #28]
 8004386:	6839      	ldr	r1, [r7, #0]
 8004388:	68f8      	ldr	r0, [r7, #12]
 800438a:	f000 fb65 	bl	8004a58 <SPI_EndRxTxTransaction>
 800438e:	4603      	mov	r3, r0
 8004390:	2b00      	cmp	r3, #0
 8004392:	d002      	beq.n	800439a <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	2220      	movs	r2, #32
 8004398:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	689b      	ldr	r3, [r3, #8]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d10a      	bne.n	80043b8 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80043a2:	2300      	movs	r3, #0
 80043a4:	617b      	str	r3, [r7, #20]
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	68db      	ldr	r3, [r3, #12]
 80043ac:	617b      	str	r3, [r7, #20]
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	689b      	ldr	r3, [r3, #8]
 80043b4:	617b      	str	r3, [r7, #20]
 80043b6:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	2201      	movs	r2, #1
 80043bc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	2200      	movs	r2, #0
 80043c4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d001      	beq.n	80043d4 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 80043d0:	2301      	movs	r3, #1
 80043d2:	e000      	b.n	80043d6 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 80043d4:	2300      	movs	r3, #0
  }
}
 80043d6:	4618      	mov	r0, r3
 80043d8:	3720      	adds	r7, #32
 80043da:	46bd      	mov	sp, r7
 80043dc:	bd80      	pop	{r7, pc}

080043de <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80043de:	b580      	push	{r7, lr}
 80043e0:	b08a      	sub	sp, #40	@ 0x28
 80043e2:	af00      	add	r7, sp, #0
 80043e4:	60f8      	str	r0, [r7, #12]
 80043e6:	60b9      	str	r1, [r7, #8]
 80043e8:	607a      	str	r2, [r7, #4]
 80043ea:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80043ec:	2301      	movs	r3, #1
 80043ee:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80043f0:	f7fd ff6c 	bl	80022cc <HAL_GetTick>
 80043f4:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80043fc:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8004404:	887b      	ldrh	r3, [r7, #2]
 8004406:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8004408:	887b      	ldrh	r3, [r7, #2]
 800440a:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800440c:	7ffb      	ldrb	r3, [r7, #31]
 800440e:	2b01      	cmp	r3, #1
 8004410:	d00c      	beq.n	800442c <HAL_SPI_TransmitReceive+0x4e>
 8004412:	69bb      	ldr	r3, [r7, #24]
 8004414:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004418:	d106      	bne.n	8004428 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	689b      	ldr	r3, [r3, #8]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d102      	bne.n	8004428 <HAL_SPI_TransmitReceive+0x4a>
 8004422:	7ffb      	ldrb	r3, [r7, #31]
 8004424:	2b04      	cmp	r3, #4
 8004426:	d001      	beq.n	800442c <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8004428:	2302      	movs	r3, #2
 800442a:	e1f3      	b.n	8004814 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d005      	beq.n	800443e <HAL_SPI_TransmitReceive+0x60>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d002      	beq.n	800443e <HAL_SPI_TransmitReceive+0x60>
 8004438:	887b      	ldrh	r3, [r7, #2]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d101      	bne.n	8004442 <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 800443e:	2301      	movs	r3, #1
 8004440:	e1e8      	b.n	8004814 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004448:	2b01      	cmp	r3, #1
 800444a:	d101      	bne.n	8004450 <HAL_SPI_TransmitReceive+0x72>
 800444c:	2302      	movs	r3, #2
 800444e:	e1e1      	b.n	8004814 <HAL_SPI_TransmitReceive+0x436>
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	2201      	movs	r2, #1
 8004454:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800445e:	b2db      	uxtb	r3, r3
 8004460:	2b04      	cmp	r3, #4
 8004462:	d003      	beq.n	800446c <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	2205      	movs	r2, #5
 8004468:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	2200      	movs	r2, #0
 8004470:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	687a      	ldr	r2, [r7, #4]
 8004476:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	887a      	ldrh	r2, [r7, #2]
 800447c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	887a      	ldrh	r2, [r7, #2]
 8004484:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	68ba      	ldr	r2, [r7, #8]
 800448c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	887a      	ldrh	r2, [r7, #2]
 8004492:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	887a      	ldrh	r2, [r7, #2]
 8004498:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	2200      	movs	r2, #0
 800449e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	2200      	movs	r2, #0
 80044a4:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	68db      	ldr	r3, [r3, #12]
 80044aa:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80044ae:	d802      	bhi.n	80044b6 <HAL_SPI_TransmitReceive+0xd8>
 80044b0:	8abb      	ldrh	r3, [r7, #20]
 80044b2:	2b01      	cmp	r3, #1
 80044b4:	d908      	bls.n	80044c8 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	685a      	ldr	r2, [r3, #4]
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80044c4:	605a      	str	r2, [r3, #4]
 80044c6:	e007      	b.n	80044d8 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	685a      	ldr	r2, [r3, #4]
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80044d6:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044e2:	2b40      	cmp	r3, #64	@ 0x40
 80044e4:	d007      	beq.n	80044f6 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	681a      	ldr	r2, [r3, #0]
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80044f4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	68db      	ldr	r3, [r3, #12]
 80044fa:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80044fe:	f240 8083 	bls.w	8004608 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d002      	beq.n	8004510 <HAL_SPI_TransmitReceive+0x132>
 800450a:	8afb      	ldrh	r3, [r7, #22]
 800450c:	2b01      	cmp	r3, #1
 800450e:	d16f      	bne.n	80045f0 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004514:	881a      	ldrh	r2, [r3, #0]
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004520:	1c9a      	adds	r2, r3, #2
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800452a:	b29b      	uxth	r3, r3
 800452c:	3b01      	subs	r3, #1
 800452e:	b29a      	uxth	r2, r3
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004534:	e05c      	b.n	80045f0 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	689b      	ldr	r3, [r3, #8]
 800453c:	f003 0302 	and.w	r3, r3, #2
 8004540:	2b02      	cmp	r3, #2
 8004542:	d11b      	bne.n	800457c <HAL_SPI_TransmitReceive+0x19e>
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004548:	b29b      	uxth	r3, r3
 800454a:	2b00      	cmp	r3, #0
 800454c:	d016      	beq.n	800457c <HAL_SPI_TransmitReceive+0x19e>
 800454e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004550:	2b01      	cmp	r3, #1
 8004552:	d113      	bne.n	800457c <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004558:	881a      	ldrh	r2, [r3, #0]
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004564:	1c9a      	adds	r2, r3, #2
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800456e:	b29b      	uxth	r3, r3
 8004570:	3b01      	subs	r3, #1
 8004572:	b29a      	uxth	r2, r3
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004578:	2300      	movs	r3, #0
 800457a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	689b      	ldr	r3, [r3, #8]
 8004582:	f003 0301 	and.w	r3, r3, #1
 8004586:	2b01      	cmp	r3, #1
 8004588:	d11c      	bne.n	80045c4 <HAL_SPI_TransmitReceive+0x1e6>
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004590:	b29b      	uxth	r3, r3
 8004592:	2b00      	cmp	r3, #0
 8004594:	d016      	beq.n	80045c4 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	68da      	ldr	r2, [r3, #12]
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045a0:	b292      	uxth	r2, r2
 80045a2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045a8:	1c9a      	adds	r2, r3, #2
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80045b4:	b29b      	uxth	r3, r3
 80045b6:	3b01      	subs	r3, #1
 80045b8:	b29a      	uxth	r2, r3
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80045c0:	2301      	movs	r3, #1
 80045c2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80045c4:	f7fd fe82 	bl	80022cc <HAL_GetTick>
 80045c8:	4602      	mov	r2, r0
 80045ca:	6a3b      	ldr	r3, [r7, #32]
 80045cc:	1ad3      	subs	r3, r2, r3
 80045ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80045d0:	429a      	cmp	r2, r3
 80045d2:	d80d      	bhi.n	80045f0 <HAL_SPI_TransmitReceive+0x212>
 80045d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045da:	d009      	beq.n	80045f0 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	2201      	movs	r2, #1
 80045e0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	2200      	movs	r2, #0
 80045e8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 80045ec:	2303      	movs	r3, #3
 80045ee:	e111      	b.n	8004814 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80045f4:	b29b      	uxth	r3, r3
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d19d      	bne.n	8004536 <HAL_SPI_TransmitReceive+0x158>
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004600:	b29b      	uxth	r3, r3
 8004602:	2b00      	cmp	r3, #0
 8004604:	d197      	bne.n	8004536 <HAL_SPI_TransmitReceive+0x158>
 8004606:	e0e5      	b.n	80047d4 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d003      	beq.n	8004618 <HAL_SPI_TransmitReceive+0x23a>
 8004610:	8afb      	ldrh	r3, [r7, #22]
 8004612:	2b01      	cmp	r3, #1
 8004614:	f040 80d1 	bne.w	80047ba <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800461c:	b29b      	uxth	r3, r3
 800461e:	2b01      	cmp	r3, #1
 8004620:	d912      	bls.n	8004648 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004626:	881a      	ldrh	r2, [r3, #0]
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004632:	1c9a      	adds	r2, r3, #2
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800463c:	b29b      	uxth	r3, r3
 800463e:	3b02      	subs	r3, #2
 8004640:	b29a      	uxth	r2, r3
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004646:	e0b8      	b.n	80047ba <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	330c      	adds	r3, #12
 8004652:	7812      	ldrb	r2, [r2, #0]
 8004654:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800465a:	1c5a      	adds	r2, r3, #1
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004664:	b29b      	uxth	r3, r3
 8004666:	3b01      	subs	r3, #1
 8004668:	b29a      	uxth	r2, r3
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800466e:	e0a4      	b.n	80047ba <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	689b      	ldr	r3, [r3, #8]
 8004676:	f003 0302 	and.w	r3, r3, #2
 800467a:	2b02      	cmp	r3, #2
 800467c:	d134      	bne.n	80046e8 <HAL_SPI_TransmitReceive+0x30a>
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004682:	b29b      	uxth	r3, r3
 8004684:	2b00      	cmp	r3, #0
 8004686:	d02f      	beq.n	80046e8 <HAL_SPI_TransmitReceive+0x30a>
 8004688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800468a:	2b01      	cmp	r3, #1
 800468c:	d12c      	bne.n	80046e8 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004692:	b29b      	uxth	r3, r3
 8004694:	2b01      	cmp	r3, #1
 8004696:	d912      	bls.n	80046be <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800469c:	881a      	ldrh	r2, [r3, #0]
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046a8:	1c9a      	adds	r2, r3, #2
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80046b2:	b29b      	uxth	r3, r3
 80046b4:	3b02      	subs	r3, #2
 80046b6:	b29a      	uxth	r2, r3
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80046bc:	e012      	b.n	80046e4 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	330c      	adds	r3, #12
 80046c8:	7812      	ldrb	r2, [r2, #0]
 80046ca:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046d0:	1c5a      	adds	r2, r3, #1
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80046da:	b29b      	uxth	r3, r3
 80046dc:	3b01      	subs	r3, #1
 80046de:	b29a      	uxth	r2, r3
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80046e4:	2300      	movs	r3, #0
 80046e6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	689b      	ldr	r3, [r3, #8]
 80046ee:	f003 0301 	and.w	r3, r3, #1
 80046f2:	2b01      	cmp	r3, #1
 80046f4:	d148      	bne.n	8004788 <HAL_SPI_TransmitReceive+0x3aa>
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80046fc:	b29b      	uxth	r3, r3
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d042      	beq.n	8004788 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004708:	b29b      	uxth	r3, r3
 800470a:	2b01      	cmp	r3, #1
 800470c:	d923      	bls.n	8004756 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	68da      	ldr	r2, [r3, #12]
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004718:	b292      	uxth	r2, r2
 800471a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004720:	1c9a      	adds	r2, r3, #2
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800472c:	b29b      	uxth	r3, r3
 800472e:	3b02      	subs	r3, #2
 8004730:	b29a      	uxth	r2, r3
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800473e:	b29b      	uxth	r3, r3
 8004740:	2b01      	cmp	r3, #1
 8004742:	d81f      	bhi.n	8004784 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	685a      	ldr	r2, [r3, #4]
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004752:	605a      	str	r2, [r3, #4]
 8004754:	e016      	b.n	8004784 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f103 020c 	add.w	r2, r3, #12
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004762:	7812      	ldrb	r2, [r2, #0]
 8004764:	b2d2      	uxtb	r2, r2
 8004766:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800476c:	1c5a      	adds	r2, r3, #1
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004778:	b29b      	uxth	r3, r3
 800477a:	3b01      	subs	r3, #1
 800477c:	b29a      	uxth	r2, r3
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004784:	2301      	movs	r3, #1
 8004786:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004788:	f7fd fda0 	bl	80022cc <HAL_GetTick>
 800478c:	4602      	mov	r2, r0
 800478e:	6a3b      	ldr	r3, [r7, #32]
 8004790:	1ad3      	subs	r3, r2, r3
 8004792:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004794:	429a      	cmp	r2, r3
 8004796:	d803      	bhi.n	80047a0 <HAL_SPI_TransmitReceive+0x3c2>
 8004798:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800479a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800479e:	d102      	bne.n	80047a6 <HAL_SPI_TransmitReceive+0x3c8>
 80047a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d109      	bne.n	80047ba <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	2201      	movs	r2, #1
 80047aa:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	2200      	movs	r2, #0
 80047b2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 80047b6:	2303      	movs	r3, #3
 80047b8:	e02c      	b.n	8004814 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80047be:	b29b      	uxth	r3, r3
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	f47f af55 	bne.w	8004670 <HAL_SPI_TransmitReceive+0x292>
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80047cc:	b29b      	uxth	r3, r3
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	f47f af4e 	bne.w	8004670 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80047d4:	6a3a      	ldr	r2, [r7, #32]
 80047d6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80047d8:	68f8      	ldr	r0, [r7, #12]
 80047da:	f000 f93d 	bl	8004a58 <SPI_EndRxTxTransaction>
 80047de:	4603      	mov	r3, r0
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d008      	beq.n	80047f6 <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	2220      	movs	r2, #32
 80047e8:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	2200      	movs	r2, #0
 80047ee:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 80047f2:	2301      	movs	r3, #1
 80047f4:	e00e      	b.n	8004814 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	2201      	movs	r2, #1
 80047fa:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	2200      	movs	r2, #0
 8004802:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800480a:	2b00      	cmp	r3, #0
 800480c:	d001      	beq.n	8004812 <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 800480e:	2301      	movs	r3, #1
 8004810:	e000      	b.n	8004814 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8004812:	2300      	movs	r3, #0
  }
}
 8004814:	4618      	mov	r0, r3
 8004816:	3728      	adds	r7, #40	@ 0x28
 8004818:	46bd      	mov	sp, r7
 800481a:	bd80      	pop	{r7, pc}

0800481c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b088      	sub	sp, #32
 8004820:	af00      	add	r7, sp, #0
 8004822:	60f8      	str	r0, [r7, #12]
 8004824:	60b9      	str	r1, [r7, #8]
 8004826:	603b      	str	r3, [r7, #0]
 8004828:	4613      	mov	r3, r2
 800482a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800482c:	f7fd fd4e 	bl	80022cc <HAL_GetTick>
 8004830:	4602      	mov	r2, r0
 8004832:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004834:	1a9b      	subs	r3, r3, r2
 8004836:	683a      	ldr	r2, [r7, #0]
 8004838:	4413      	add	r3, r2
 800483a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800483c:	f7fd fd46 	bl	80022cc <HAL_GetTick>
 8004840:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004842:	4b39      	ldr	r3, [pc, #228]	@ (8004928 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	015b      	lsls	r3, r3, #5
 8004848:	0d1b      	lsrs	r3, r3, #20
 800484a:	69fa      	ldr	r2, [r7, #28]
 800484c:	fb02 f303 	mul.w	r3, r2, r3
 8004850:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004852:	e054      	b.n	80048fe <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	f1b3 3fff 	cmp.w	r3, #4294967295
 800485a:	d050      	beq.n	80048fe <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800485c:	f7fd fd36 	bl	80022cc <HAL_GetTick>
 8004860:	4602      	mov	r2, r0
 8004862:	69bb      	ldr	r3, [r7, #24]
 8004864:	1ad3      	subs	r3, r2, r3
 8004866:	69fa      	ldr	r2, [r7, #28]
 8004868:	429a      	cmp	r2, r3
 800486a:	d902      	bls.n	8004872 <SPI_WaitFlagStateUntilTimeout+0x56>
 800486c:	69fb      	ldr	r3, [r7, #28]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d13d      	bne.n	80048ee <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	685a      	ldr	r2, [r3, #4]
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004880:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800488a:	d111      	bne.n	80048b0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	689b      	ldr	r3, [r3, #8]
 8004890:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004894:	d004      	beq.n	80048a0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	689b      	ldr	r3, [r3, #8]
 800489a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800489e:	d107      	bne.n	80048b0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	681a      	ldr	r2, [r3, #0]
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80048ae:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048b4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80048b8:	d10f      	bne.n	80048da <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	681a      	ldr	r2, [r3, #0]
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80048c8:	601a      	str	r2, [r3, #0]
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	681a      	ldr	r2, [r3, #0]
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80048d8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	2201      	movs	r2, #1
 80048de:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	2200      	movs	r2, #0
 80048e6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80048ea:	2303      	movs	r3, #3
 80048ec:	e017      	b.n	800491e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80048ee:	697b      	ldr	r3, [r7, #20]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d101      	bne.n	80048f8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80048f4:	2300      	movs	r3, #0
 80048f6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	3b01      	subs	r3, #1
 80048fc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	689a      	ldr	r2, [r3, #8]
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	4013      	ands	r3, r2
 8004908:	68ba      	ldr	r2, [r7, #8]
 800490a:	429a      	cmp	r2, r3
 800490c:	bf0c      	ite	eq
 800490e:	2301      	moveq	r3, #1
 8004910:	2300      	movne	r3, #0
 8004912:	b2db      	uxtb	r3, r3
 8004914:	461a      	mov	r2, r3
 8004916:	79fb      	ldrb	r3, [r7, #7]
 8004918:	429a      	cmp	r2, r3
 800491a:	d19b      	bne.n	8004854 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800491c:	2300      	movs	r3, #0
}
 800491e:	4618      	mov	r0, r3
 8004920:	3720      	adds	r7, #32
 8004922:	46bd      	mov	sp, r7
 8004924:	bd80      	pop	{r7, pc}
 8004926:	bf00      	nop
 8004928:	2000000c 	.word	0x2000000c

0800492c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b08a      	sub	sp, #40	@ 0x28
 8004930:	af00      	add	r7, sp, #0
 8004932:	60f8      	str	r0, [r7, #12]
 8004934:	60b9      	str	r1, [r7, #8]
 8004936:	607a      	str	r2, [r7, #4]
 8004938:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800493a:	2300      	movs	r3, #0
 800493c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800493e:	f7fd fcc5 	bl	80022cc <HAL_GetTick>
 8004942:	4602      	mov	r2, r0
 8004944:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004946:	1a9b      	subs	r3, r3, r2
 8004948:	683a      	ldr	r2, [r7, #0]
 800494a:	4413      	add	r3, r2
 800494c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800494e:	f7fd fcbd 	bl	80022cc <HAL_GetTick>
 8004952:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	330c      	adds	r3, #12
 800495a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800495c:	4b3d      	ldr	r3, [pc, #244]	@ (8004a54 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800495e:	681a      	ldr	r2, [r3, #0]
 8004960:	4613      	mov	r3, r2
 8004962:	009b      	lsls	r3, r3, #2
 8004964:	4413      	add	r3, r2
 8004966:	00da      	lsls	r2, r3, #3
 8004968:	1ad3      	subs	r3, r2, r3
 800496a:	0d1b      	lsrs	r3, r3, #20
 800496c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800496e:	fb02 f303 	mul.w	r3, r2, r3
 8004972:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004974:	e060      	b.n	8004a38 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004976:	68bb      	ldr	r3, [r7, #8]
 8004978:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800497c:	d107      	bne.n	800498e <SPI_WaitFifoStateUntilTimeout+0x62>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d104      	bne.n	800498e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004984:	69fb      	ldr	r3, [r7, #28]
 8004986:	781b      	ldrb	r3, [r3, #0]
 8004988:	b2db      	uxtb	r3, r3
 800498a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800498c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004994:	d050      	beq.n	8004a38 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004996:	f7fd fc99 	bl	80022cc <HAL_GetTick>
 800499a:	4602      	mov	r2, r0
 800499c:	6a3b      	ldr	r3, [r7, #32]
 800499e:	1ad3      	subs	r3, r2, r3
 80049a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80049a2:	429a      	cmp	r2, r3
 80049a4:	d902      	bls.n	80049ac <SPI_WaitFifoStateUntilTimeout+0x80>
 80049a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d13d      	bne.n	8004a28 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	685a      	ldr	r2, [r3, #4]
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80049ba:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80049c4:	d111      	bne.n	80049ea <SPI_WaitFifoStateUntilTimeout+0xbe>
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	689b      	ldr	r3, [r3, #8]
 80049ca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80049ce:	d004      	beq.n	80049da <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	689b      	ldr	r3, [r3, #8]
 80049d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80049d8:	d107      	bne.n	80049ea <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	681a      	ldr	r2, [r3, #0]
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80049e8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80049f2:	d10f      	bne.n	8004a14 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	681a      	ldr	r2, [r3, #0]
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004a02:	601a      	str	r2, [r3, #0]
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	681a      	ldr	r2, [r3, #0]
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004a12:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	2201      	movs	r2, #1
 8004a18:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	2200      	movs	r2, #0
 8004a20:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004a24:	2303      	movs	r3, #3
 8004a26:	e010      	b.n	8004a4a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004a28:	69bb      	ldr	r3, [r7, #24]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d101      	bne.n	8004a32 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004a2e:	2300      	movs	r3, #0
 8004a30:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8004a32:	69bb      	ldr	r3, [r7, #24]
 8004a34:	3b01      	subs	r3, #1
 8004a36:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	689a      	ldr	r2, [r3, #8]
 8004a3e:	68bb      	ldr	r3, [r7, #8]
 8004a40:	4013      	ands	r3, r2
 8004a42:	687a      	ldr	r2, [r7, #4]
 8004a44:	429a      	cmp	r2, r3
 8004a46:	d196      	bne.n	8004976 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004a48:	2300      	movs	r3, #0
}
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	3728      	adds	r7, #40	@ 0x28
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bd80      	pop	{r7, pc}
 8004a52:	bf00      	nop
 8004a54:	2000000c 	.word	0x2000000c

08004a58 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b086      	sub	sp, #24
 8004a5c:	af02      	add	r7, sp, #8
 8004a5e:	60f8      	str	r0, [r7, #12]
 8004a60:	60b9      	str	r1, [r7, #8]
 8004a62:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	9300      	str	r3, [sp, #0]
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8004a70:	68f8      	ldr	r0, [r7, #12]
 8004a72:	f7ff ff5b 	bl	800492c <SPI_WaitFifoStateUntilTimeout>
 8004a76:	4603      	mov	r3, r0
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d007      	beq.n	8004a8c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a80:	f043 0220 	orr.w	r2, r3, #32
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004a88:	2303      	movs	r3, #3
 8004a8a:	e027      	b.n	8004adc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	9300      	str	r3, [sp, #0]
 8004a90:	68bb      	ldr	r3, [r7, #8]
 8004a92:	2200      	movs	r2, #0
 8004a94:	2180      	movs	r1, #128	@ 0x80
 8004a96:	68f8      	ldr	r0, [r7, #12]
 8004a98:	f7ff fec0 	bl	800481c <SPI_WaitFlagStateUntilTimeout>
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d007      	beq.n	8004ab2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004aa6:	f043 0220 	orr.w	r2, r3, #32
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004aae:	2303      	movs	r3, #3
 8004ab0:	e014      	b.n	8004adc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	9300      	str	r3, [sp, #0]
 8004ab6:	68bb      	ldr	r3, [r7, #8]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8004abe:	68f8      	ldr	r0, [r7, #12]
 8004ac0:	f7ff ff34 	bl	800492c <SPI_WaitFifoStateUntilTimeout>
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d007      	beq.n	8004ada <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ace:	f043 0220 	orr.w	r2, r3, #32
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004ad6:	2303      	movs	r3, #3
 8004ad8:	e000      	b.n	8004adc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004ada:	2300      	movs	r3, #0
}
 8004adc:	4618      	mov	r0, r3
 8004ade:	3710      	adds	r7, #16
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	bd80      	pop	{r7, pc}

08004ae4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b082      	sub	sp, #8
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d101      	bne.n	8004af6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004af2:	2301      	movs	r3, #1
 8004af4:	e049      	b.n	8004b8a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004afc:	b2db      	uxtb	r3, r3
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d106      	bne.n	8004b10 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2200      	movs	r2, #0
 8004b06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004b0a:	6878      	ldr	r0, [r7, #4]
 8004b0c:	f7fd f932 	bl	8001d74 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2202      	movs	r2, #2
 8004b14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681a      	ldr	r2, [r3, #0]
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	3304      	adds	r3, #4
 8004b20:	4619      	mov	r1, r3
 8004b22:	4610      	mov	r0, r2
 8004b24:	f000 fa04 	bl	8004f30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2201      	movs	r2, #1
 8004b34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2201      	movs	r2, #1
 8004b3c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2201      	movs	r2, #1
 8004b44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2201      	movs	r2, #1
 8004b4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2201      	movs	r2, #1
 8004b54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2201      	movs	r2, #1
 8004b5c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2201      	movs	r2, #1
 8004b64:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2201      	movs	r2, #1
 8004b6c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2201      	movs	r2, #1
 8004b74:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2201      	movs	r2, #1
 8004b7c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2201      	movs	r2, #1
 8004b84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004b88:	2300      	movs	r3, #0
}
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	3708      	adds	r7, #8
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bd80      	pop	{r7, pc}
	...

08004b94 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004b94:	b480      	push	{r7}
 8004b96:	b085      	sub	sp, #20
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ba2:	b2db      	uxtb	r3, r3
 8004ba4:	2b01      	cmp	r3, #1
 8004ba6:	d001      	beq.n	8004bac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004ba8:	2301      	movs	r3, #1
 8004baa:	e04f      	b.n	8004c4c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2202      	movs	r2, #2
 8004bb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	68da      	ldr	r2, [r3, #12]
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f042 0201 	orr.w	r2, r2, #1
 8004bc2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a23      	ldr	r2, [pc, #140]	@ (8004c58 <HAL_TIM_Base_Start_IT+0xc4>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d01d      	beq.n	8004c0a <HAL_TIM_Base_Start_IT+0x76>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004bd6:	d018      	beq.n	8004c0a <HAL_TIM_Base_Start_IT+0x76>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a1f      	ldr	r2, [pc, #124]	@ (8004c5c <HAL_TIM_Base_Start_IT+0xc8>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d013      	beq.n	8004c0a <HAL_TIM_Base_Start_IT+0x76>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a1e      	ldr	r2, [pc, #120]	@ (8004c60 <HAL_TIM_Base_Start_IT+0xcc>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d00e      	beq.n	8004c0a <HAL_TIM_Base_Start_IT+0x76>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4a1c      	ldr	r2, [pc, #112]	@ (8004c64 <HAL_TIM_Base_Start_IT+0xd0>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d009      	beq.n	8004c0a <HAL_TIM_Base_Start_IT+0x76>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4a1b      	ldr	r2, [pc, #108]	@ (8004c68 <HAL_TIM_Base_Start_IT+0xd4>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d004      	beq.n	8004c0a <HAL_TIM_Base_Start_IT+0x76>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a19      	ldr	r2, [pc, #100]	@ (8004c6c <HAL_TIM_Base_Start_IT+0xd8>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d115      	bne.n	8004c36 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	689a      	ldr	r2, [r3, #8]
 8004c10:	4b17      	ldr	r3, [pc, #92]	@ (8004c70 <HAL_TIM_Base_Start_IT+0xdc>)
 8004c12:	4013      	ands	r3, r2
 8004c14:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	2b06      	cmp	r3, #6
 8004c1a:	d015      	beq.n	8004c48 <HAL_TIM_Base_Start_IT+0xb4>
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c22:	d011      	beq.n	8004c48 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	681a      	ldr	r2, [r3, #0]
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f042 0201 	orr.w	r2, r2, #1
 8004c32:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c34:	e008      	b.n	8004c48 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	681a      	ldr	r2, [r3, #0]
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f042 0201 	orr.w	r2, r2, #1
 8004c44:	601a      	str	r2, [r3, #0]
 8004c46:	e000      	b.n	8004c4a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c48:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004c4a:	2300      	movs	r3, #0
}
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	3714      	adds	r7, #20
 8004c50:	46bd      	mov	sp, r7
 8004c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c56:	4770      	bx	lr
 8004c58:	40012c00 	.word	0x40012c00
 8004c5c:	40000400 	.word	0x40000400
 8004c60:	40000800 	.word	0x40000800
 8004c64:	40000c00 	.word	0x40000c00
 8004c68:	40013400 	.word	0x40013400
 8004c6c:	40014000 	.word	0x40014000
 8004c70:	00010007 	.word	0x00010007

08004c74 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004c74:	b480      	push	{r7}
 8004c76:	b083      	sub	sp, #12
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	68da      	ldr	r2, [r3, #12]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f022 0201 	bic.w	r2, r2, #1
 8004c8a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	6a1a      	ldr	r2, [r3, #32]
 8004c92:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004c96:	4013      	ands	r3, r2
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d10f      	bne.n	8004cbc <HAL_TIM_Base_Stop_IT+0x48>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	6a1a      	ldr	r2, [r3, #32]
 8004ca2:	f240 4344 	movw	r3, #1092	@ 0x444
 8004ca6:	4013      	ands	r3, r2
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d107      	bne.n	8004cbc <HAL_TIM_Base_Stop_IT+0x48>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	681a      	ldr	r2, [r3, #0]
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f022 0201 	bic.w	r2, r2, #1
 8004cba:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2201      	movs	r2, #1
 8004cc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8004cc4:	2300      	movs	r3, #0
}
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	370c      	adds	r7, #12
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd0:	4770      	bx	lr

08004cd2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004cd2:	b580      	push	{r7, lr}
 8004cd4:	b084      	sub	sp, #16
 8004cd6:	af00      	add	r7, sp, #0
 8004cd8:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	68db      	ldr	r3, [r3, #12]
 8004ce0:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	691b      	ldr	r3, [r3, #16]
 8004ce8:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004cea:	68bb      	ldr	r3, [r7, #8]
 8004cec:	f003 0302 	and.w	r3, r3, #2
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d020      	beq.n	8004d36 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	f003 0302 	and.w	r3, r3, #2
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d01b      	beq.n	8004d36 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f06f 0202 	mvn.w	r2, #2
 8004d06:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2201      	movs	r2, #1
 8004d0c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	699b      	ldr	r3, [r3, #24]
 8004d14:	f003 0303 	and.w	r3, r3, #3
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d003      	beq.n	8004d24 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004d1c:	6878      	ldr	r0, [r7, #4]
 8004d1e:	f000 f8e9 	bl	8004ef4 <HAL_TIM_IC_CaptureCallback>
 8004d22:	e005      	b.n	8004d30 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d24:	6878      	ldr	r0, [r7, #4]
 8004d26:	f000 f8db 	bl	8004ee0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d2a:	6878      	ldr	r0, [r7, #4]
 8004d2c:	f000 f8ec 	bl	8004f08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2200      	movs	r2, #0
 8004d34:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	f003 0304 	and.w	r3, r3, #4
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d020      	beq.n	8004d82 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	f003 0304 	and.w	r3, r3, #4
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d01b      	beq.n	8004d82 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f06f 0204 	mvn.w	r2, #4
 8004d52:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2202      	movs	r2, #2
 8004d58:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	699b      	ldr	r3, [r3, #24]
 8004d60:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d003      	beq.n	8004d70 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d68:	6878      	ldr	r0, [r7, #4]
 8004d6a:	f000 f8c3 	bl	8004ef4 <HAL_TIM_IC_CaptureCallback>
 8004d6e:	e005      	b.n	8004d7c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d70:	6878      	ldr	r0, [r7, #4]
 8004d72:	f000 f8b5 	bl	8004ee0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d76:	6878      	ldr	r0, [r7, #4]
 8004d78:	f000 f8c6 	bl	8004f08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	f003 0308 	and.w	r3, r3, #8
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d020      	beq.n	8004dce <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	f003 0308 	and.w	r3, r3, #8
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d01b      	beq.n	8004dce <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f06f 0208 	mvn.w	r2, #8
 8004d9e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2204      	movs	r2, #4
 8004da4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	69db      	ldr	r3, [r3, #28]
 8004dac:	f003 0303 	and.w	r3, r3, #3
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d003      	beq.n	8004dbc <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004db4:	6878      	ldr	r0, [r7, #4]
 8004db6:	f000 f89d 	bl	8004ef4 <HAL_TIM_IC_CaptureCallback>
 8004dba:	e005      	b.n	8004dc8 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dbc:	6878      	ldr	r0, [r7, #4]
 8004dbe:	f000 f88f 	bl	8004ee0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004dc2:	6878      	ldr	r0, [r7, #4]
 8004dc4:	f000 f8a0 	bl	8004f08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	f003 0310 	and.w	r3, r3, #16
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d020      	beq.n	8004e1a <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	f003 0310 	and.w	r3, r3, #16
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d01b      	beq.n	8004e1a <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f06f 0210 	mvn.w	r2, #16
 8004dea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2208      	movs	r2, #8
 8004df0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	69db      	ldr	r3, [r3, #28]
 8004df8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d003      	beq.n	8004e08 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e00:	6878      	ldr	r0, [r7, #4]
 8004e02:	f000 f877 	bl	8004ef4 <HAL_TIM_IC_CaptureCallback>
 8004e06:	e005      	b.n	8004e14 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e08:	6878      	ldr	r0, [r7, #4]
 8004e0a:	f000 f869 	bl	8004ee0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e0e:	6878      	ldr	r0, [r7, #4]
 8004e10:	f000 f87a 	bl	8004f08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2200      	movs	r2, #0
 8004e18:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004e1a:	68bb      	ldr	r3, [r7, #8]
 8004e1c:	f003 0301 	and.w	r3, r3, #1
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d00c      	beq.n	8004e3e <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	f003 0301 	and.w	r3, r3, #1
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d007      	beq.n	8004e3e <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f06f 0201 	mvn.w	r2, #1
 8004e36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004e38:	6878      	ldr	r0, [r7, #4]
 8004e3a:	f7fc feb5 	bl	8001ba8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004e3e:	68bb      	ldr	r3, [r7, #8]
 8004e40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d104      	bne.n	8004e52 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d00c      	beq.n	8004e6c <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d007      	beq.n	8004e6c <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8004e64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004e66:	6878      	ldr	r0, [r7, #4]
 8004e68:	f000 f912 	bl	8005090 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d00c      	beq.n	8004e90 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d007      	beq.n	8004e90 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004e88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004e8a:	6878      	ldr	r0, [r7, #4]
 8004e8c:	f000 f90a 	bl	80050a4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d00c      	beq.n	8004eb4 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d007      	beq.n	8004eb4 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004eac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004eae:	6878      	ldr	r0, [r7, #4]
 8004eb0:	f000 f834 	bl	8004f1c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	f003 0320 	and.w	r3, r3, #32
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d00c      	beq.n	8004ed8 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	f003 0320 	and.w	r3, r3, #32
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d007      	beq.n	8004ed8 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f06f 0220 	mvn.w	r2, #32
 8004ed0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004ed2:	6878      	ldr	r0, [r7, #4]
 8004ed4:	f000 f8d2 	bl	800507c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004ed8:	bf00      	nop
 8004eda:	3710      	adds	r7, #16
 8004edc:	46bd      	mov	sp, r7
 8004ede:	bd80      	pop	{r7, pc}

08004ee0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	b083      	sub	sp, #12
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004ee8:	bf00      	nop
 8004eea:	370c      	adds	r7, #12
 8004eec:	46bd      	mov	sp, r7
 8004eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef2:	4770      	bx	lr

08004ef4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	b083      	sub	sp, #12
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004efc:	bf00      	nop
 8004efe:	370c      	adds	r7, #12
 8004f00:	46bd      	mov	sp, r7
 8004f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f06:	4770      	bx	lr

08004f08 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004f08:	b480      	push	{r7}
 8004f0a:	b083      	sub	sp, #12
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004f10:	bf00      	nop
 8004f12:	370c      	adds	r7, #12
 8004f14:	46bd      	mov	sp, r7
 8004f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1a:	4770      	bx	lr

08004f1c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	b083      	sub	sp, #12
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004f24:	bf00      	nop
 8004f26:	370c      	adds	r7, #12
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2e:	4770      	bx	lr

08004f30 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004f30:	b480      	push	{r7}
 8004f32:	b085      	sub	sp, #20
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
 8004f38:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	4a46      	ldr	r2, [pc, #280]	@ (800505c <TIM_Base_SetConfig+0x12c>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d013      	beq.n	8004f70 <TIM_Base_SetConfig+0x40>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f4e:	d00f      	beq.n	8004f70 <TIM_Base_SetConfig+0x40>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	4a43      	ldr	r2, [pc, #268]	@ (8005060 <TIM_Base_SetConfig+0x130>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d00b      	beq.n	8004f70 <TIM_Base_SetConfig+0x40>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	4a42      	ldr	r2, [pc, #264]	@ (8005064 <TIM_Base_SetConfig+0x134>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d007      	beq.n	8004f70 <TIM_Base_SetConfig+0x40>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	4a41      	ldr	r2, [pc, #260]	@ (8005068 <TIM_Base_SetConfig+0x138>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d003      	beq.n	8004f70 <TIM_Base_SetConfig+0x40>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	4a40      	ldr	r2, [pc, #256]	@ (800506c <TIM_Base_SetConfig+0x13c>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d108      	bne.n	8004f82 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	685b      	ldr	r3, [r3, #4]
 8004f7c:	68fa      	ldr	r2, [r7, #12]
 8004f7e:	4313      	orrs	r3, r2
 8004f80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	4a35      	ldr	r2, [pc, #212]	@ (800505c <TIM_Base_SetConfig+0x12c>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d01f      	beq.n	8004fca <TIM_Base_SetConfig+0x9a>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f90:	d01b      	beq.n	8004fca <TIM_Base_SetConfig+0x9a>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	4a32      	ldr	r2, [pc, #200]	@ (8005060 <TIM_Base_SetConfig+0x130>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d017      	beq.n	8004fca <TIM_Base_SetConfig+0x9a>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	4a31      	ldr	r2, [pc, #196]	@ (8005064 <TIM_Base_SetConfig+0x134>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d013      	beq.n	8004fca <TIM_Base_SetConfig+0x9a>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	4a30      	ldr	r2, [pc, #192]	@ (8005068 <TIM_Base_SetConfig+0x138>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d00f      	beq.n	8004fca <TIM_Base_SetConfig+0x9a>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	4a2f      	ldr	r2, [pc, #188]	@ (800506c <TIM_Base_SetConfig+0x13c>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d00b      	beq.n	8004fca <TIM_Base_SetConfig+0x9a>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	4a2e      	ldr	r2, [pc, #184]	@ (8005070 <TIM_Base_SetConfig+0x140>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d007      	beq.n	8004fca <TIM_Base_SetConfig+0x9a>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	4a2d      	ldr	r2, [pc, #180]	@ (8005074 <TIM_Base_SetConfig+0x144>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d003      	beq.n	8004fca <TIM_Base_SetConfig+0x9a>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	4a2c      	ldr	r2, [pc, #176]	@ (8005078 <TIM_Base_SetConfig+0x148>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d108      	bne.n	8004fdc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004fd0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	68db      	ldr	r3, [r3, #12]
 8004fd6:	68fa      	ldr	r2, [r7, #12]
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	695b      	ldr	r3, [r3, #20]
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	68fa      	ldr	r2, [r7, #12]
 8004fee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	689a      	ldr	r2, [r3, #8]
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	681a      	ldr	r2, [r3, #0]
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	4a16      	ldr	r2, [pc, #88]	@ (800505c <TIM_Base_SetConfig+0x12c>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d00f      	beq.n	8005028 <TIM_Base_SetConfig+0xf8>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	4a18      	ldr	r2, [pc, #96]	@ (800506c <TIM_Base_SetConfig+0x13c>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d00b      	beq.n	8005028 <TIM_Base_SetConfig+0xf8>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	4a17      	ldr	r2, [pc, #92]	@ (8005070 <TIM_Base_SetConfig+0x140>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d007      	beq.n	8005028 <TIM_Base_SetConfig+0xf8>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	4a16      	ldr	r2, [pc, #88]	@ (8005074 <TIM_Base_SetConfig+0x144>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d003      	beq.n	8005028 <TIM_Base_SetConfig+0xf8>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	4a15      	ldr	r2, [pc, #84]	@ (8005078 <TIM_Base_SetConfig+0x148>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d103      	bne.n	8005030 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	691a      	ldr	r2, [r3, #16]
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2201      	movs	r2, #1
 8005034:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	691b      	ldr	r3, [r3, #16]
 800503a:	f003 0301 	and.w	r3, r3, #1
 800503e:	2b01      	cmp	r3, #1
 8005040:	d105      	bne.n	800504e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	691b      	ldr	r3, [r3, #16]
 8005046:	f023 0201 	bic.w	r2, r3, #1
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	611a      	str	r2, [r3, #16]
  }
}
 800504e:	bf00      	nop
 8005050:	3714      	adds	r7, #20
 8005052:	46bd      	mov	sp, r7
 8005054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005058:	4770      	bx	lr
 800505a:	bf00      	nop
 800505c:	40012c00 	.word	0x40012c00
 8005060:	40000400 	.word	0x40000400
 8005064:	40000800 	.word	0x40000800
 8005068:	40000c00 	.word	0x40000c00
 800506c:	40013400 	.word	0x40013400
 8005070:	40014000 	.word	0x40014000
 8005074:	40014400 	.word	0x40014400
 8005078:	40014800 	.word	0x40014800

0800507c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800507c:	b480      	push	{r7}
 800507e:	b083      	sub	sp, #12
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005084:	bf00      	nop
 8005086:	370c      	adds	r7, #12
 8005088:	46bd      	mov	sp, r7
 800508a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508e:	4770      	bx	lr

08005090 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005090:	b480      	push	{r7}
 8005092:	b083      	sub	sp, #12
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005098:	bf00      	nop
 800509a:	370c      	adds	r7, #12
 800509c:	46bd      	mov	sp, r7
 800509e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a2:	4770      	bx	lr

080050a4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80050a4:	b480      	push	{r7}
 80050a6:	b083      	sub	sp, #12
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80050ac:	bf00      	nop
 80050ae:	370c      	adds	r7, #12
 80050b0:	46bd      	mov	sp, r7
 80050b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b6:	4770      	bx	lr

080050b8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b082      	sub	sp, #8
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d101      	bne.n	80050ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80050c6:	2301      	movs	r3, #1
 80050c8:	e040      	b.n	800514c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d106      	bne.n	80050e0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2200      	movs	r2, #0
 80050d6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80050da:	6878      	ldr	r0, [r7, #4]
 80050dc:	f7fc fe8c 	bl	8001df8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2224      	movs	r2, #36	@ 0x24
 80050e4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	681a      	ldr	r2, [r3, #0]
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f022 0201 	bic.w	r2, r2, #1
 80050f4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d002      	beq.n	8005104 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80050fe:	6878      	ldr	r0, [r7, #4]
 8005100:	f000 fb6a 	bl	80057d8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005104:	6878      	ldr	r0, [r7, #4]
 8005106:	f000 f8af 	bl	8005268 <UART_SetConfig>
 800510a:	4603      	mov	r3, r0
 800510c:	2b01      	cmp	r3, #1
 800510e:	d101      	bne.n	8005114 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005110:	2301      	movs	r3, #1
 8005112:	e01b      	b.n	800514c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	685a      	ldr	r2, [r3, #4]
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005122:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	689a      	ldr	r2, [r3, #8]
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005132:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	681a      	ldr	r2, [r3, #0]
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f042 0201 	orr.w	r2, r2, #1
 8005142:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005144:	6878      	ldr	r0, [r7, #4]
 8005146:	f000 fbe9 	bl	800591c <UART_CheckIdleState>
 800514a:	4603      	mov	r3, r0
}
 800514c:	4618      	mov	r0, r3
 800514e:	3708      	adds	r7, #8
 8005150:	46bd      	mov	sp, r7
 8005152:	bd80      	pop	{r7, pc}

08005154 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b08a      	sub	sp, #40	@ 0x28
 8005158:	af02      	add	r7, sp, #8
 800515a:	60f8      	str	r0, [r7, #12]
 800515c:	60b9      	str	r1, [r7, #8]
 800515e:	603b      	str	r3, [r7, #0]
 8005160:	4613      	mov	r3, r2
 8005162:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005168:	2b20      	cmp	r3, #32
 800516a:	d177      	bne.n	800525c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800516c:	68bb      	ldr	r3, [r7, #8]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d002      	beq.n	8005178 <HAL_UART_Transmit+0x24>
 8005172:	88fb      	ldrh	r3, [r7, #6]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d101      	bne.n	800517c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005178:	2301      	movs	r3, #1
 800517a:	e070      	b.n	800525e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	2200      	movs	r2, #0
 8005180:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	2221      	movs	r2, #33	@ 0x21
 8005188:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800518a:	f7fd f89f 	bl	80022cc <HAL_GetTick>
 800518e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	88fa      	ldrh	r2, [r7, #6]
 8005194:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	88fa      	ldrh	r2, [r7, #6]
 800519c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	689b      	ldr	r3, [r3, #8]
 80051a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80051a8:	d108      	bne.n	80051bc <HAL_UART_Transmit+0x68>
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	691b      	ldr	r3, [r3, #16]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d104      	bne.n	80051bc <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80051b2:	2300      	movs	r3, #0
 80051b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80051b6:	68bb      	ldr	r3, [r7, #8]
 80051b8:	61bb      	str	r3, [r7, #24]
 80051ba:	e003      	b.n	80051c4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80051bc:	68bb      	ldr	r3, [r7, #8]
 80051be:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80051c0:	2300      	movs	r3, #0
 80051c2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80051c4:	e02f      	b.n	8005226 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	9300      	str	r3, [sp, #0]
 80051ca:	697b      	ldr	r3, [r7, #20]
 80051cc:	2200      	movs	r2, #0
 80051ce:	2180      	movs	r1, #128	@ 0x80
 80051d0:	68f8      	ldr	r0, [r7, #12]
 80051d2:	f000 fc4b 	bl	8005a6c <UART_WaitOnFlagUntilTimeout>
 80051d6:	4603      	mov	r3, r0
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d004      	beq.n	80051e6 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	2220      	movs	r2, #32
 80051e0:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80051e2:	2303      	movs	r3, #3
 80051e4:	e03b      	b.n	800525e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80051e6:	69fb      	ldr	r3, [r7, #28]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d10b      	bne.n	8005204 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80051ec:	69bb      	ldr	r3, [r7, #24]
 80051ee:	881a      	ldrh	r2, [r3, #0]
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80051f8:	b292      	uxth	r2, r2
 80051fa:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80051fc:	69bb      	ldr	r3, [r7, #24]
 80051fe:	3302      	adds	r3, #2
 8005200:	61bb      	str	r3, [r7, #24]
 8005202:	e007      	b.n	8005214 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005204:	69fb      	ldr	r3, [r7, #28]
 8005206:	781a      	ldrb	r2, [r3, #0]
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800520e:	69fb      	ldr	r3, [r7, #28]
 8005210:	3301      	adds	r3, #1
 8005212:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800521a:	b29b      	uxth	r3, r3
 800521c:	3b01      	subs	r3, #1
 800521e:	b29a      	uxth	r2, r3
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800522c:	b29b      	uxth	r3, r3
 800522e:	2b00      	cmp	r3, #0
 8005230:	d1c9      	bne.n	80051c6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	9300      	str	r3, [sp, #0]
 8005236:	697b      	ldr	r3, [r7, #20]
 8005238:	2200      	movs	r2, #0
 800523a:	2140      	movs	r1, #64	@ 0x40
 800523c:	68f8      	ldr	r0, [r7, #12]
 800523e:	f000 fc15 	bl	8005a6c <UART_WaitOnFlagUntilTimeout>
 8005242:	4603      	mov	r3, r0
 8005244:	2b00      	cmp	r3, #0
 8005246:	d004      	beq.n	8005252 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	2220      	movs	r2, #32
 800524c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800524e:	2303      	movs	r3, #3
 8005250:	e005      	b.n	800525e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	2220      	movs	r2, #32
 8005256:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005258:	2300      	movs	r3, #0
 800525a:	e000      	b.n	800525e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800525c:	2302      	movs	r3, #2
  }
}
 800525e:	4618      	mov	r0, r3
 8005260:	3720      	adds	r7, #32
 8005262:	46bd      	mov	sp, r7
 8005264:	bd80      	pop	{r7, pc}
	...

08005268 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005268:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800526c:	b08a      	sub	sp, #40	@ 0x28
 800526e:	af00      	add	r7, sp, #0
 8005270:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005272:	2300      	movs	r3, #0
 8005274:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	689a      	ldr	r2, [r3, #8]
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	691b      	ldr	r3, [r3, #16]
 8005280:	431a      	orrs	r2, r3
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	695b      	ldr	r3, [r3, #20]
 8005286:	431a      	orrs	r2, r3
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	69db      	ldr	r3, [r3, #28]
 800528c:	4313      	orrs	r3, r2
 800528e:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	681a      	ldr	r2, [r3, #0]
 8005296:	4ba4      	ldr	r3, [pc, #656]	@ (8005528 <UART_SetConfig+0x2c0>)
 8005298:	4013      	ands	r3, r2
 800529a:	68fa      	ldr	r2, [r7, #12]
 800529c:	6812      	ldr	r2, [r2, #0]
 800529e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80052a0:	430b      	orrs	r3, r1
 80052a2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	685b      	ldr	r3, [r3, #4]
 80052aa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	68da      	ldr	r2, [r3, #12]
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	430a      	orrs	r2, r1
 80052b8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	699b      	ldr	r3, [r3, #24]
 80052be:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4a99      	ldr	r2, [pc, #612]	@ (800552c <UART_SetConfig+0x2c4>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d004      	beq.n	80052d4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	6a1b      	ldr	r3, [r3, #32]
 80052ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80052d0:	4313      	orrs	r3, r2
 80052d2:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	689b      	ldr	r3, [r3, #8]
 80052da:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80052e4:	430a      	orrs	r2, r1
 80052e6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	4a90      	ldr	r2, [pc, #576]	@ (8005530 <UART_SetConfig+0x2c8>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d126      	bne.n	8005340 <UART_SetConfig+0xd8>
 80052f2:	4b90      	ldr	r3, [pc, #576]	@ (8005534 <UART_SetConfig+0x2cc>)
 80052f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052f8:	f003 0303 	and.w	r3, r3, #3
 80052fc:	2b03      	cmp	r3, #3
 80052fe:	d81b      	bhi.n	8005338 <UART_SetConfig+0xd0>
 8005300:	a201      	add	r2, pc, #4	@ (adr r2, 8005308 <UART_SetConfig+0xa0>)
 8005302:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005306:	bf00      	nop
 8005308:	08005319 	.word	0x08005319
 800530c:	08005329 	.word	0x08005329
 8005310:	08005321 	.word	0x08005321
 8005314:	08005331 	.word	0x08005331
 8005318:	2301      	movs	r3, #1
 800531a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800531e:	e116      	b.n	800554e <UART_SetConfig+0x2e6>
 8005320:	2302      	movs	r3, #2
 8005322:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005326:	e112      	b.n	800554e <UART_SetConfig+0x2e6>
 8005328:	2304      	movs	r3, #4
 800532a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800532e:	e10e      	b.n	800554e <UART_SetConfig+0x2e6>
 8005330:	2308      	movs	r3, #8
 8005332:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005336:	e10a      	b.n	800554e <UART_SetConfig+0x2e6>
 8005338:	2310      	movs	r3, #16
 800533a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800533e:	e106      	b.n	800554e <UART_SetConfig+0x2e6>
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	4a7c      	ldr	r2, [pc, #496]	@ (8005538 <UART_SetConfig+0x2d0>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d138      	bne.n	80053bc <UART_SetConfig+0x154>
 800534a:	4b7a      	ldr	r3, [pc, #488]	@ (8005534 <UART_SetConfig+0x2cc>)
 800534c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005350:	f003 030c 	and.w	r3, r3, #12
 8005354:	2b0c      	cmp	r3, #12
 8005356:	d82d      	bhi.n	80053b4 <UART_SetConfig+0x14c>
 8005358:	a201      	add	r2, pc, #4	@ (adr r2, 8005360 <UART_SetConfig+0xf8>)
 800535a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800535e:	bf00      	nop
 8005360:	08005395 	.word	0x08005395
 8005364:	080053b5 	.word	0x080053b5
 8005368:	080053b5 	.word	0x080053b5
 800536c:	080053b5 	.word	0x080053b5
 8005370:	080053a5 	.word	0x080053a5
 8005374:	080053b5 	.word	0x080053b5
 8005378:	080053b5 	.word	0x080053b5
 800537c:	080053b5 	.word	0x080053b5
 8005380:	0800539d 	.word	0x0800539d
 8005384:	080053b5 	.word	0x080053b5
 8005388:	080053b5 	.word	0x080053b5
 800538c:	080053b5 	.word	0x080053b5
 8005390:	080053ad 	.word	0x080053ad
 8005394:	2300      	movs	r3, #0
 8005396:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800539a:	e0d8      	b.n	800554e <UART_SetConfig+0x2e6>
 800539c:	2302      	movs	r3, #2
 800539e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80053a2:	e0d4      	b.n	800554e <UART_SetConfig+0x2e6>
 80053a4:	2304      	movs	r3, #4
 80053a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80053aa:	e0d0      	b.n	800554e <UART_SetConfig+0x2e6>
 80053ac:	2308      	movs	r3, #8
 80053ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80053b2:	e0cc      	b.n	800554e <UART_SetConfig+0x2e6>
 80053b4:	2310      	movs	r3, #16
 80053b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80053ba:	e0c8      	b.n	800554e <UART_SetConfig+0x2e6>
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4a5e      	ldr	r2, [pc, #376]	@ (800553c <UART_SetConfig+0x2d4>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d125      	bne.n	8005412 <UART_SetConfig+0x1aa>
 80053c6:	4b5b      	ldr	r3, [pc, #364]	@ (8005534 <UART_SetConfig+0x2cc>)
 80053c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053cc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80053d0:	2b30      	cmp	r3, #48	@ 0x30
 80053d2:	d016      	beq.n	8005402 <UART_SetConfig+0x19a>
 80053d4:	2b30      	cmp	r3, #48	@ 0x30
 80053d6:	d818      	bhi.n	800540a <UART_SetConfig+0x1a2>
 80053d8:	2b20      	cmp	r3, #32
 80053da:	d00a      	beq.n	80053f2 <UART_SetConfig+0x18a>
 80053dc:	2b20      	cmp	r3, #32
 80053de:	d814      	bhi.n	800540a <UART_SetConfig+0x1a2>
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d002      	beq.n	80053ea <UART_SetConfig+0x182>
 80053e4:	2b10      	cmp	r3, #16
 80053e6:	d008      	beq.n	80053fa <UART_SetConfig+0x192>
 80053e8:	e00f      	b.n	800540a <UART_SetConfig+0x1a2>
 80053ea:	2300      	movs	r3, #0
 80053ec:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80053f0:	e0ad      	b.n	800554e <UART_SetConfig+0x2e6>
 80053f2:	2302      	movs	r3, #2
 80053f4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80053f8:	e0a9      	b.n	800554e <UART_SetConfig+0x2e6>
 80053fa:	2304      	movs	r3, #4
 80053fc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005400:	e0a5      	b.n	800554e <UART_SetConfig+0x2e6>
 8005402:	2308      	movs	r3, #8
 8005404:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005408:	e0a1      	b.n	800554e <UART_SetConfig+0x2e6>
 800540a:	2310      	movs	r3, #16
 800540c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005410:	e09d      	b.n	800554e <UART_SetConfig+0x2e6>
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4a4a      	ldr	r2, [pc, #296]	@ (8005540 <UART_SetConfig+0x2d8>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d125      	bne.n	8005468 <UART_SetConfig+0x200>
 800541c:	4b45      	ldr	r3, [pc, #276]	@ (8005534 <UART_SetConfig+0x2cc>)
 800541e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005422:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005426:	2bc0      	cmp	r3, #192	@ 0xc0
 8005428:	d016      	beq.n	8005458 <UART_SetConfig+0x1f0>
 800542a:	2bc0      	cmp	r3, #192	@ 0xc0
 800542c:	d818      	bhi.n	8005460 <UART_SetConfig+0x1f8>
 800542e:	2b80      	cmp	r3, #128	@ 0x80
 8005430:	d00a      	beq.n	8005448 <UART_SetConfig+0x1e0>
 8005432:	2b80      	cmp	r3, #128	@ 0x80
 8005434:	d814      	bhi.n	8005460 <UART_SetConfig+0x1f8>
 8005436:	2b00      	cmp	r3, #0
 8005438:	d002      	beq.n	8005440 <UART_SetConfig+0x1d8>
 800543a:	2b40      	cmp	r3, #64	@ 0x40
 800543c:	d008      	beq.n	8005450 <UART_SetConfig+0x1e8>
 800543e:	e00f      	b.n	8005460 <UART_SetConfig+0x1f8>
 8005440:	2300      	movs	r3, #0
 8005442:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005446:	e082      	b.n	800554e <UART_SetConfig+0x2e6>
 8005448:	2302      	movs	r3, #2
 800544a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800544e:	e07e      	b.n	800554e <UART_SetConfig+0x2e6>
 8005450:	2304      	movs	r3, #4
 8005452:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005456:	e07a      	b.n	800554e <UART_SetConfig+0x2e6>
 8005458:	2308      	movs	r3, #8
 800545a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800545e:	e076      	b.n	800554e <UART_SetConfig+0x2e6>
 8005460:	2310      	movs	r3, #16
 8005462:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005466:	e072      	b.n	800554e <UART_SetConfig+0x2e6>
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4a35      	ldr	r2, [pc, #212]	@ (8005544 <UART_SetConfig+0x2dc>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d12a      	bne.n	80054c8 <UART_SetConfig+0x260>
 8005472:	4b30      	ldr	r3, [pc, #192]	@ (8005534 <UART_SetConfig+0x2cc>)
 8005474:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005478:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800547c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005480:	d01a      	beq.n	80054b8 <UART_SetConfig+0x250>
 8005482:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005486:	d81b      	bhi.n	80054c0 <UART_SetConfig+0x258>
 8005488:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800548c:	d00c      	beq.n	80054a8 <UART_SetConfig+0x240>
 800548e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005492:	d815      	bhi.n	80054c0 <UART_SetConfig+0x258>
 8005494:	2b00      	cmp	r3, #0
 8005496:	d003      	beq.n	80054a0 <UART_SetConfig+0x238>
 8005498:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800549c:	d008      	beq.n	80054b0 <UART_SetConfig+0x248>
 800549e:	e00f      	b.n	80054c0 <UART_SetConfig+0x258>
 80054a0:	2300      	movs	r3, #0
 80054a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80054a6:	e052      	b.n	800554e <UART_SetConfig+0x2e6>
 80054a8:	2302      	movs	r3, #2
 80054aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80054ae:	e04e      	b.n	800554e <UART_SetConfig+0x2e6>
 80054b0:	2304      	movs	r3, #4
 80054b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80054b6:	e04a      	b.n	800554e <UART_SetConfig+0x2e6>
 80054b8:	2308      	movs	r3, #8
 80054ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80054be:	e046      	b.n	800554e <UART_SetConfig+0x2e6>
 80054c0:	2310      	movs	r3, #16
 80054c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80054c6:	e042      	b.n	800554e <UART_SetConfig+0x2e6>
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4a17      	ldr	r2, [pc, #92]	@ (800552c <UART_SetConfig+0x2c4>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d13a      	bne.n	8005548 <UART_SetConfig+0x2e0>
 80054d2:	4b18      	ldr	r3, [pc, #96]	@ (8005534 <UART_SetConfig+0x2cc>)
 80054d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054d8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80054dc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80054e0:	d01a      	beq.n	8005518 <UART_SetConfig+0x2b0>
 80054e2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80054e6:	d81b      	bhi.n	8005520 <UART_SetConfig+0x2b8>
 80054e8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80054ec:	d00c      	beq.n	8005508 <UART_SetConfig+0x2a0>
 80054ee:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80054f2:	d815      	bhi.n	8005520 <UART_SetConfig+0x2b8>
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d003      	beq.n	8005500 <UART_SetConfig+0x298>
 80054f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80054fc:	d008      	beq.n	8005510 <UART_SetConfig+0x2a8>
 80054fe:	e00f      	b.n	8005520 <UART_SetConfig+0x2b8>
 8005500:	2300      	movs	r3, #0
 8005502:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005506:	e022      	b.n	800554e <UART_SetConfig+0x2e6>
 8005508:	2302      	movs	r3, #2
 800550a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800550e:	e01e      	b.n	800554e <UART_SetConfig+0x2e6>
 8005510:	2304      	movs	r3, #4
 8005512:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005516:	e01a      	b.n	800554e <UART_SetConfig+0x2e6>
 8005518:	2308      	movs	r3, #8
 800551a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800551e:	e016      	b.n	800554e <UART_SetConfig+0x2e6>
 8005520:	2310      	movs	r3, #16
 8005522:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005526:	e012      	b.n	800554e <UART_SetConfig+0x2e6>
 8005528:	efff69f3 	.word	0xefff69f3
 800552c:	40008000 	.word	0x40008000
 8005530:	40013800 	.word	0x40013800
 8005534:	40021000 	.word	0x40021000
 8005538:	40004400 	.word	0x40004400
 800553c:	40004800 	.word	0x40004800
 8005540:	40004c00 	.word	0x40004c00
 8005544:	40005000 	.word	0x40005000
 8005548:	2310      	movs	r3, #16
 800554a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	4a9f      	ldr	r2, [pc, #636]	@ (80057d0 <UART_SetConfig+0x568>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d17a      	bne.n	800564e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005558:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800555c:	2b08      	cmp	r3, #8
 800555e:	d824      	bhi.n	80055aa <UART_SetConfig+0x342>
 8005560:	a201      	add	r2, pc, #4	@ (adr r2, 8005568 <UART_SetConfig+0x300>)
 8005562:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005566:	bf00      	nop
 8005568:	0800558d 	.word	0x0800558d
 800556c:	080055ab 	.word	0x080055ab
 8005570:	08005595 	.word	0x08005595
 8005574:	080055ab 	.word	0x080055ab
 8005578:	0800559b 	.word	0x0800559b
 800557c:	080055ab 	.word	0x080055ab
 8005580:	080055ab 	.word	0x080055ab
 8005584:	080055ab 	.word	0x080055ab
 8005588:	080055a3 	.word	0x080055a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800558c:	f7fd ff94 	bl	80034b8 <HAL_RCC_GetPCLK1Freq>
 8005590:	61f8      	str	r0, [r7, #28]
        break;
 8005592:	e010      	b.n	80055b6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005594:	4b8f      	ldr	r3, [pc, #572]	@ (80057d4 <UART_SetConfig+0x56c>)
 8005596:	61fb      	str	r3, [r7, #28]
        break;
 8005598:	e00d      	b.n	80055b6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800559a:	f7fd fef5 	bl	8003388 <HAL_RCC_GetSysClockFreq>
 800559e:	61f8      	str	r0, [r7, #28]
        break;
 80055a0:	e009      	b.n	80055b6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80055a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80055a6:	61fb      	str	r3, [r7, #28]
        break;
 80055a8:	e005      	b.n	80055b6 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80055aa:	2300      	movs	r3, #0
 80055ac:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80055ae:	2301      	movs	r3, #1
 80055b0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80055b4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80055b6:	69fb      	ldr	r3, [r7, #28]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	f000 80fb 	beq.w	80057b4 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	685a      	ldr	r2, [r3, #4]
 80055c2:	4613      	mov	r3, r2
 80055c4:	005b      	lsls	r3, r3, #1
 80055c6:	4413      	add	r3, r2
 80055c8:	69fa      	ldr	r2, [r7, #28]
 80055ca:	429a      	cmp	r2, r3
 80055cc:	d305      	bcc.n	80055da <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	685b      	ldr	r3, [r3, #4]
 80055d2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80055d4:	69fa      	ldr	r2, [r7, #28]
 80055d6:	429a      	cmp	r2, r3
 80055d8:	d903      	bls.n	80055e2 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80055da:	2301      	movs	r3, #1
 80055dc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80055e0:	e0e8      	b.n	80057b4 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80055e2:	69fb      	ldr	r3, [r7, #28]
 80055e4:	2200      	movs	r2, #0
 80055e6:	461c      	mov	r4, r3
 80055e8:	4615      	mov	r5, r2
 80055ea:	f04f 0200 	mov.w	r2, #0
 80055ee:	f04f 0300 	mov.w	r3, #0
 80055f2:	022b      	lsls	r3, r5, #8
 80055f4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80055f8:	0222      	lsls	r2, r4, #8
 80055fa:	68f9      	ldr	r1, [r7, #12]
 80055fc:	6849      	ldr	r1, [r1, #4]
 80055fe:	0849      	lsrs	r1, r1, #1
 8005600:	2000      	movs	r0, #0
 8005602:	4688      	mov	r8, r1
 8005604:	4681      	mov	r9, r0
 8005606:	eb12 0a08 	adds.w	sl, r2, r8
 800560a:	eb43 0b09 	adc.w	fp, r3, r9
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	685b      	ldr	r3, [r3, #4]
 8005612:	2200      	movs	r2, #0
 8005614:	603b      	str	r3, [r7, #0]
 8005616:	607a      	str	r2, [r7, #4]
 8005618:	e9d7 2300 	ldrd	r2, r3, [r7]
 800561c:	4650      	mov	r0, sl
 800561e:	4659      	mov	r1, fp
 8005620:	f7fb fb42 	bl	8000ca8 <__aeabi_uldivmod>
 8005624:	4602      	mov	r2, r0
 8005626:	460b      	mov	r3, r1
 8005628:	4613      	mov	r3, r2
 800562a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800562c:	69bb      	ldr	r3, [r7, #24]
 800562e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005632:	d308      	bcc.n	8005646 <UART_SetConfig+0x3de>
 8005634:	69bb      	ldr	r3, [r7, #24]
 8005636:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800563a:	d204      	bcs.n	8005646 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	69ba      	ldr	r2, [r7, #24]
 8005642:	60da      	str	r2, [r3, #12]
 8005644:	e0b6      	b.n	80057b4 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8005646:	2301      	movs	r3, #1
 8005648:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800564c:	e0b2      	b.n	80057b4 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	69db      	ldr	r3, [r3, #28]
 8005652:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005656:	d15e      	bne.n	8005716 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005658:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800565c:	2b08      	cmp	r3, #8
 800565e:	d828      	bhi.n	80056b2 <UART_SetConfig+0x44a>
 8005660:	a201      	add	r2, pc, #4	@ (adr r2, 8005668 <UART_SetConfig+0x400>)
 8005662:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005666:	bf00      	nop
 8005668:	0800568d 	.word	0x0800568d
 800566c:	08005695 	.word	0x08005695
 8005670:	0800569d 	.word	0x0800569d
 8005674:	080056b3 	.word	0x080056b3
 8005678:	080056a3 	.word	0x080056a3
 800567c:	080056b3 	.word	0x080056b3
 8005680:	080056b3 	.word	0x080056b3
 8005684:	080056b3 	.word	0x080056b3
 8005688:	080056ab 	.word	0x080056ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800568c:	f7fd ff14 	bl	80034b8 <HAL_RCC_GetPCLK1Freq>
 8005690:	61f8      	str	r0, [r7, #28]
        break;
 8005692:	e014      	b.n	80056be <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005694:	f7fd ff26 	bl	80034e4 <HAL_RCC_GetPCLK2Freq>
 8005698:	61f8      	str	r0, [r7, #28]
        break;
 800569a:	e010      	b.n	80056be <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800569c:	4b4d      	ldr	r3, [pc, #308]	@ (80057d4 <UART_SetConfig+0x56c>)
 800569e:	61fb      	str	r3, [r7, #28]
        break;
 80056a0:	e00d      	b.n	80056be <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80056a2:	f7fd fe71 	bl	8003388 <HAL_RCC_GetSysClockFreq>
 80056a6:	61f8      	str	r0, [r7, #28]
        break;
 80056a8:	e009      	b.n	80056be <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80056aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80056ae:	61fb      	str	r3, [r7, #28]
        break;
 80056b0:	e005      	b.n	80056be <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80056b2:	2300      	movs	r3, #0
 80056b4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80056b6:	2301      	movs	r3, #1
 80056b8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80056bc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80056be:	69fb      	ldr	r3, [r7, #28]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d077      	beq.n	80057b4 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80056c4:	69fb      	ldr	r3, [r7, #28]
 80056c6:	005a      	lsls	r2, r3, #1
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	685b      	ldr	r3, [r3, #4]
 80056cc:	085b      	lsrs	r3, r3, #1
 80056ce:	441a      	add	r2, r3
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	685b      	ldr	r3, [r3, #4]
 80056d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80056d8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80056da:	69bb      	ldr	r3, [r7, #24]
 80056dc:	2b0f      	cmp	r3, #15
 80056de:	d916      	bls.n	800570e <UART_SetConfig+0x4a6>
 80056e0:	69bb      	ldr	r3, [r7, #24]
 80056e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80056e6:	d212      	bcs.n	800570e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80056e8:	69bb      	ldr	r3, [r7, #24]
 80056ea:	b29b      	uxth	r3, r3
 80056ec:	f023 030f 	bic.w	r3, r3, #15
 80056f0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80056f2:	69bb      	ldr	r3, [r7, #24]
 80056f4:	085b      	lsrs	r3, r3, #1
 80056f6:	b29b      	uxth	r3, r3
 80056f8:	f003 0307 	and.w	r3, r3, #7
 80056fc:	b29a      	uxth	r2, r3
 80056fe:	8afb      	ldrh	r3, [r7, #22]
 8005700:	4313      	orrs	r3, r2
 8005702:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	8afa      	ldrh	r2, [r7, #22]
 800570a:	60da      	str	r2, [r3, #12]
 800570c:	e052      	b.n	80057b4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800570e:	2301      	movs	r3, #1
 8005710:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005714:	e04e      	b.n	80057b4 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005716:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800571a:	2b08      	cmp	r3, #8
 800571c:	d827      	bhi.n	800576e <UART_SetConfig+0x506>
 800571e:	a201      	add	r2, pc, #4	@ (adr r2, 8005724 <UART_SetConfig+0x4bc>)
 8005720:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005724:	08005749 	.word	0x08005749
 8005728:	08005751 	.word	0x08005751
 800572c:	08005759 	.word	0x08005759
 8005730:	0800576f 	.word	0x0800576f
 8005734:	0800575f 	.word	0x0800575f
 8005738:	0800576f 	.word	0x0800576f
 800573c:	0800576f 	.word	0x0800576f
 8005740:	0800576f 	.word	0x0800576f
 8005744:	08005767 	.word	0x08005767
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005748:	f7fd feb6 	bl	80034b8 <HAL_RCC_GetPCLK1Freq>
 800574c:	61f8      	str	r0, [r7, #28]
        break;
 800574e:	e014      	b.n	800577a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005750:	f7fd fec8 	bl	80034e4 <HAL_RCC_GetPCLK2Freq>
 8005754:	61f8      	str	r0, [r7, #28]
        break;
 8005756:	e010      	b.n	800577a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005758:	4b1e      	ldr	r3, [pc, #120]	@ (80057d4 <UART_SetConfig+0x56c>)
 800575a:	61fb      	str	r3, [r7, #28]
        break;
 800575c:	e00d      	b.n	800577a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800575e:	f7fd fe13 	bl	8003388 <HAL_RCC_GetSysClockFreq>
 8005762:	61f8      	str	r0, [r7, #28]
        break;
 8005764:	e009      	b.n	800577a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005766:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800576a:	61fb      	str	r3, [r7, #28]
        break;
 800576c:	e005      	b.n	800577a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800576e:	2300      	movs	r3, #0
 8005770:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005772:	2301      	movs	r3, #1
 8005774:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005778:	bf00      	nop
    }

    if (pclk != 0U)
 800577a:	69fb      	ldr	r3, [r7, #28]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d019      	beq.n	80057b4 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	685b      	ldr	r3, [r3, #4]
 8005784:	085a      	lsrs	r2, r3, #1
 8005786:	69fb      	ldr	r3, [r7, #28]
 8005788:	441a      	add	r2, r3
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	685b      	ldr	r3, [r3, #4]
 800578e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005792:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005794:	69bb      	ldr	r3, [r7, #24]
 8005796:	2b0f      	cmp	r3, #15
 8005798:	d909      	bls.n	80057ae <UART_SetConfig+0x546>
 800579a:	69bb      	ldr	r3, [r7, #24]
 800579c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80057a0:	d205      	bcs.n	80057ae <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80057a2:	69bb      	ldr	r3, [r7, #24]
 80057a4:	b29a      	uxth	r2, r3
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	60da      	str	r2, [r3, #12]
 80057ac:	e002      	b.n	80057b4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80057ae:	2301      	movs	r3, #1
 80057b0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	2200      	movs	r2, #0
 80057b8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	2200      	movs	r2, #0
 80057be:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80057c0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80057c4:	4618      	mov	r0, r3
 80057c6:	3728      	adds	r7, #40	@ 0x28
 80057c8:	46bd      	mov	sp, r7
 80057ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80057ce:	bf00      	nop
 80057d0:	40008000 	.word	0x40008000
 80057d4:	00f42400 	.word	0x00f42400

080057d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80057d8:	b480      	push	{r7}
 80057da:	b083      	sub	sp, #12
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057e4:	f003 0308 	and.w	r3, r3, #8
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d00a      	beq.n	8005802 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	685b      	ldr	r3, [r3, #4]
 80057f2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	430a      	orrs	r2, r1
 8005800:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005806:	f003 0301 	and.w	r3, r3, #1
 800580a:	2b00      	cmp	r3, #0
 800580c:	d00a      	beq.n	8005824 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	685b      	ldr	r3, [r3, #4]
 8005814:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	430a      	orrs	r2, r1
 8005822:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005828:	f003 0302 	and.w	r3, r3, #2
 800582c:	2b00      	cmp	r3, #0
 800582e:	d00a      	beq.n	8005846 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	685b      	ldr	r3, [r3, #4]
 8005836:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	430a      	orrs	r2, r1
 8005844:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800584a:	f003 0304 	and.w	r3, r3, #4
 800584e:	2b00      	cmp	r3, #0
 8005850:	d00a      	beq.n	8005868 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	685b      	ldr	r3, [r3, #4]
 8005858:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	430a      	orrs	r2, r1
 8005866:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800586c:	f003 0310 	and.w	r3, r3, #16
 8005870:	2b00      	cmp	r3, #0
 8005872:	d00a      	beq.n	800588a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	689b      	ldr	r3, [r3, #8]
 800587a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	430a      	orrs	r2, r1
 8005888:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800588e:	f003 0320 	and.w	r3, r3, #32
 8005892:	2b00      	cmp	r3, #0
 8005894:	d00a      	beq.n	80058ac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	689b      	ldr	r3, [r3, #8]
 800589c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	430a      	orrs	r2, r1
 80058aa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d01a      	beq.n	80058ee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	685b      	ldr	r3, [r3, #4]
 80058be:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	430a      	orrs	r2, r1
 80058cc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058d2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80058d6:	d10a      	bne.n	80058ee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	685b      	ldr	r3, [r3, #4]
 80058de:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	430a      	orrs	r2, r1
 80058ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d00a      	beq.n	8005910 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	685b      	ldr	r3, [r3, #4]
 8005900:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	430a      	orrs	r2, r1
 800590e:	605a      	str	r2, [r3, #4]
  }
}
 8005910:	bf00      	nop
 8005912:	370c      	adds	r7, #12
 8005914:	46bd      	mov	sp, r7
 8005916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591a:	4770      	bx	lr

0800591c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800591c:	b580      	push	{r7, lr}
 800591e:	b098      	sub	sp, #96	@ 0x60
 8005920:	af02      	add	r7, sp, #8
 8005922:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2200      	movs	r2, #0
 8005928:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800592c:	f7fc fcce 	bl	80022cc <HAL_GetTick>
 8005930:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f003 0308 	and.w	r3, r3, #8
 800593c:	2b08      	cmp	r3, #8
 800593e:	d12e      	bne.n	800599e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005940:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005944:	9300      	str	r3, [sp, #0]
 8005946:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005948:	2200      	movs	r2, #0
 800594a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800594e:	6878      	ldr	r0, [r7, #4]
 8005950:	f000 f88c 	bl	8005a6c <UART_WaitOnFlagUntilTimeout>
 8005954:	4603      	mov	r3, r0
 8005956:	2b00      	cmp	r3, #0
 8005958:	d021      	beq.n	800599e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005960:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005962:	e853 3f00 	ldrex	r3, [r3]
 8005966:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005968:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800596a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800596e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	461a      	mov	r2, r3
 8005976:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005978:	647b      	str	r3, [r7, #68]	@ 0x44
 800597a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800597c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800597e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005980:	e841 2300 	strex	r3, r2, [r1]
 8005984:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005986:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005988:	2b00      	cmp	r3, #0
 800598a:	d1e6      	bne.n	800595a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2220      	movs	r2, #32
 8005990:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2200      	movs	r2, #0
 8005996:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800599a:	2303      	movs	r3, #3
 800599c:	e062      	b.n	8005a64 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f003 0304 	and.w	r3, r3, #4
 80059a8:	2b04      	cmp	r3, #4
 80059aa:	d149      	bne.n	8005a40 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80059ac:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80059b0:	9300      	str	r3, [sp, #0]
 80059b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80059b4:	2200      	movs	r2, #0
 80059b6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80059ba:	6878      	ldr	r0, [r7, #4]
 80059bc:	f000 f856 	bl	8005a6c <UART_WaitOnFlagUntilTimeout>
 80059c0:	4603      	mov	r3, r0
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d03c      	beq.n	8005a40 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059ce:	e853 3f00 	ldrex	r3, [r3]
 80059d2:	623b      	str	r3, [r7, #32]
   return(result);
 80059d4:	6a3b      	ldr	r3, [r7, #32]
 80059d6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80059da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	461a      	mov	r2, r3
 80059e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80059e4:	633b      	str	r3, [r7, #48]	@ 0x30
 80059e6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059e8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80059ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80059ec:	e841 2300 	strex	r3, r2, [r1]
 80059f0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80059f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d1e6      	bne.n	80059c6 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	3308      	adds	r3, #8
 80059fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a00:	693b      	ldr	r3, [r7, #16]
 8005a02:	e853 3f00 	ldrex	r3, [r3]
 8005a06:	60fb      	str	r3, [r7, #12]
   return(result);
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	f023 0301 	bic.w	r3, r3, #1
 8005a0e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	3308      	adds	r3, #8
 8005a16:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005a18:	61fa      	str	r2, [r7, #28]
 8005a1a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a1c:	69b9      	ldr	r1, [r7, #24]
 8005a1e:	69fa      	ldr	r2, [r7, #28]
 8005a20:	e841 2300 	strex	r3, r2, [r1]
 8005a24:	617b      	str	r3, [r7, #20]
   return(result);
 8005a26:	697b      	ldr	r3, [r7, #20]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d1e5      	bne.n	80059f8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2220      	movs	r2, #32
 8005a30:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2200      	movs	r2, #0
 8005a38:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005a3c:	2303      	movs	r3, #3
 8005a3e:	e011      	b.n	8005a64 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2220      	movs	r2, #32
 8005a44:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2220      	movs	r2, #32
 8005a4a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2200      	movs	r2, #0
 8005a52:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2200      	movs	r2, #0
 8005a58:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005a62:	2300      	movs	r3, #0
}
 8005a64:	4618      	mov	r0, r3
 8005a66:	3758      	adds	r7, #88	@ 0x58
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	bd80      	pop	{r7, pc}

08005a6c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b084      	sub	sp, #16
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	60f8      	str	r0, [r7, #12]
 8005a74:	60b9      	str	r1, [r7, #8]
 8005a76:	603b      	str	r3, [r7, #0]
 8005a78:	4613      	mov	r3, r2
 8005a7a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a7c:	e04f      	b.n	8005b1e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a7e:	69bb      	ldr	r3, [r7, #24]
 8005a80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a84:	d04b      	beq.n	8005b1e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a86:	f7fc fc21 	bl	80022cc <HAL_GetTick>
 8005a8a:	4602      	mov	r2, r0
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	1ad3      	subs	r3, r2, r3
 8005a90:	69ba      	ldr	r2, [r7, #24]
 8005a92:	429a      	cmp	r2, r3
 8005a94:	d302      	bcc.n	8005a9c <UART_WaitOnFlagUntilTimeout+0x30>
 8005a96:	69bb      	ldr	r3, [r7, #24]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d101      	bne.n	8005aa0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005a9c:	2303      	movs	r3, #3
 8005a9e:	e04e      	b.n	8005b3e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f003 0304 	and.w	r3, r3, #4
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d037      	beq.n	8005b1e <UART_WaitOnFlagUntilTimeout+0xb2>
 8005aae:	68bb      	ldr	r3, [r7, #8]
 8005ab0:	2b80      	cmp	r3, #128	@ 0x80
 8005ab2:	d034      	beq.n	8005b1e <UART_WaitOnFlagUntilTimeout+0xb2>
 8005ab4:	68bb      	ldr	r3, [r7, #8]
 8005ab6:	2b40      	cmp	r3, #64	@ 0x40
 8005ab8:	d031      	beq.n	8005b1e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	69db      	ldr	r3, [r3, #28]
 8005ac0:	f003 0308 	and.w	r3, r3, #8
 8005ac4:	2b08      	cmp	r3, #8
 8005ac6:	d110      	bne.n	8005aea <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	2208      	movs	r2, #8
 8005ace:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005ad0:	68f8      	ldr	r0, [r7, #12]
 8005ad2:	f000 f838 	bl	8005b46 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	2208      	movs	r2, #8
 8005ada:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005ae6:	2301      	movs	r3, #1
 8005ae8:	e029      	b.n	8005b3e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	69db      	ldr	r3, [r3, #28]
 8005af0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005af4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005af8:	d111      	bne.n	8005b1e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005b02:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005b04:	68f8      	ldr	r0, [r7, #12]
 8005b06:	f000 f81e 	bl	8005b46 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	2220      	movs	r2, #32
 8005b0e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	2200      	movs	r2, #0
 8005b16:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005b1a:	2303      	movs	r3, #3
 8005b1c:	e00f      	b.n	8005b3e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	69da      	ldr	r2, [r3, #28]
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	4013      	ands	r3, r2
 8005b28:	68ba      	ldr	r2, [r7, #8]
 8005b2a:	429a      	cmp	r2, r3
 8005b2c:	bf0c      	ite	eq
 8005b2e:	2301      	moveq	r3, #1
 8005b30:	2300      	movne	r3, #0
 8005b32:	b2db      	uxtb	r3, r3
 8005b34:	461a      	mov	r2, r3
 8005b36:	79fb      	ldrb	r3, [r7, #7]
 8005b38:	429a      	cmp	r2, r3
 8005b3a:	d0a0      	beq.n	8005a7e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005b3c:	2300      	movs	r3, #0
}
 8005b3e:	4618      	mov	r0, r3
 8005b40:	3710      	adds	r7, #16
 8005b42:	46bd      	mov	sp, r7
 8005b44:	bd80      	pop	{r7, pc}

08005b46 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005b46:	b480      	push	{r7}
 8005b48:	b095      	sub	sp, #84	@ 0x54
 8005b4a:	af00      	add	r7, sp, #0
 8005b4c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b56:	e853 3f00 	ldrex	r3, [r3]
 8005b5a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005b5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b5e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005b62:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	461a      	mov	r2, r3
 8005b6a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005b6c:	643b      	str	r3, [r7, #64]	@ 0x40
 8005b6e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b70:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005b72:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005b74:	e841 2300 	strex	r3, r2, [r1]
 8005b78:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005b7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d1e6      	bne.n	8005b4e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	3308      	adds	r3, #8
 8005b86:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b88:	6a3b      	ldr	r3, [r7, #32]
 8005b8a:	e853 3f00 	ldrex	r3, [r3]
 8005b8e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005b90:	69fb      	ldr	r3, [r7, #28]
 8005b92:	f023 0301 	bic.w	r3, r3, #1
 8005b96:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	3308      	adds	r3, #8
 8005b9e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005ba0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005ba2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ba4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005ba6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005ba8:	e841 2300 	strex	r3, r2, [r1]
 8005bac:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005bae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d1e5      	bne.n	8005b80 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005bb8:	2b01      	cmp	r3, #1
 8005bba:	d118      	bne.n	8005bee <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	e853 3f00 	ldrex	r3, [r3]
 8005bc8:	60bb      	str	r3, [r7, #8]
   return(result);
 8005bca:	68bb      	ldr	r3, [r7, #8]
 8005bcc:	f023 0310 	bic.w	r3, r3, #16
 8005bd0:	647b      	str	r3, [r7, #68]	@ 0x44
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	461a      	mov	r2, r3
 8005bd8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005bda:	61bb      	str	r3, [r7, #24]
 8005bdc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bde:	6979      	ldr	r1, [r7, #20]
 8005be0:	69ba      	ldr	r2, [r7, #24]
 8005be2:	e841 2300 	strex	r3, r2, [r1]
 8005be6:	613b      	str	r3, [r7, #16]
   return(result);
 8005be8:	693b      	ldr	r3, [r7, #16]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d1e6      	bne.n	8005bbc <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2220      	movs	r2, #32
 8005bf2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2200      	movs	r2, #0
 8005c00:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005c02:	bf00      	nop
 8005c04:	3754      	adds	r7, #84	@ 0x54
 8005c06:	46bd      	mov	sp, r7
 8005c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0c:	4770      	bx	lr
	...

08005c10 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8005c14:	4904      	ldr	r1, [pc, #16]	@ (8005c28 <MX_FATFS_Init+0x18>)
 8005c16:	4805      	ldr	r0, [pc, #20]	@ (8005c2c <MX_FATFS_Init+0x1c>)
 8005c18:	f002 fef0 	bl	80089fc <FATFS_LinkDriver>
 8005c1c:	4603      	mov	r3, r0
 8005c1e:	461a      	mov	r2, r3
 8005c20:	4b03      	ldr	r3, [pc, #12]	@ (8005c30 <MX_FATFS_Init+0x20>)
 8005c22:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8005c24:	bf00      	nop
 8005c26:	bd80      	pop	{r7, pc}
 8005c28:	20000514 	.word	0x20000514
 8005c2c:	20000018 	.word	0x20000018
 8005c30:	20000510 	.word	0x20000510

08005c34 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8005c34:	b480      	push	{r7}
 8005c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8005c38:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c42:	4770      	bx	lr

08005c44 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b082      	sub	sp, #8
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	4603      	mov	r3, r0
 8005c4c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return USER_SPI_initialize(pdrv);
 8005c4e:	79fb      	ldrb	r3, [r7, #7]
 8005c50:	4618      	mov	r0, r3
 8005c52:	f000 f9d3 	bl	8005ffc <USER_SPI_initialize>
 8005c56:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8005c58:	4618      	mov	r0, r3
 8005c5a:	3708      	adds	r7, #8
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	bd80      	pop	{r7, pc}

08005c60 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b082      	sub	sp, #8
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	4603      	mov	r3, r0
 8005c68:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return USER_SPI_status(pdrv);
 8005c6a:	79fb      	ldrb	r3, [r7, #7]
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	f000 fab1 	bl	80061d4 <USER_SPI_status>
 8005c72:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8005c74:	4618      	mov	r0, r3
 8005c76:	3708      	adds	r7, #8
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	bd80      	pop	{r7, pc}

08005c7c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b084      	sub	sp, #16
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	60b9      	str	r1, [r7, #8]
 8005c84:	607a      	str	r2, [r7, #4]
 8005c86:	603b      	str	r3, [r7, #0]
 8005c88:	4603      	mov	r3, r0
 8005c8a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return USER_SPI_read(pdrv, buff, sector, count);
 8005c8c:	7bf8      	ldrb	r0, [r7, #15]
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	687a      	ldr	r2, [r7, #4]
 8005c92:	68b9      	ldr	r1, [r7, #8]
 8005c94:	f000 fab4 	bl	8006200 <USER_SPI_read>
 8005c98:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	3710      	adds	r7, #16
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	bd80      	pop	{r7, pc}

08005ca2 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8005ca2:	b580      	push	{r7, lr}
 8005ca4:	b084      	sub	sp, #16
 8005ca6:	af00      	add	r7, sp, #0
 8005ca8:	60b9      	str	r1, [r7, #8]
 8005caa:	607a      	str	r2, [r7, #4]
 8005cac:	603b      	str	r3, [r7, #0]
 8005cae:	4603      	mov	r3, r0
 8005cb0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return USER_SPI_write(pdrv, buff, sector, count);
 8005cb2:	7bf8      	ldrb	r0, [r7, #15]
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	687a      	ldr	r2, [r7, #4]
 8005cb8:	68b9      	ldr	r1, [r7, #8]
 8005cba:	f000 fb07 	bl	80062cc <USER_SPI_write>
 8005cbe:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	3710      	adds	r7, #16
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	bd80      	pop	{r7, pc}

08005cc8 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b082      	sub	sp, #8
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	4603      	mov	r3, r0
 8005cd0:	603a      	str	r2, [r7, #0]
 8005cd2:	71fb      	strb	r3, [r7, #7]
 8005cd4:	460b      	mov	r3, r1
 8005cd6:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return USER_SPI_ioctl(pdrv, cmd, buff);
 8005cd8:	79b9      	ldrb	r1, [r7, #6]
 8005cda:	79fb      	ldrb	r3, [r7, #7]
 8005cdc:	683a      	ldr	r2, [r7, #0]
 8005cde:	4618      	mov	r0, r3
 8005ce0:	f000 fb70 	bl	80063c4 <USER_SPI_ioctl>
 8005ce4:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	3708      	adds	r7, #8
 8005cea:	46bd      	mov	sp, r7
 8005cec:	bd80      	pop	{r7, pc}
	...

08005cf0 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b082      	sub	sp, #8
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8005cf8:	f7fc fae8 	bl	80022cc <HAL_GetTick>
 8005cfc:	4603      	mov	r3, r0
 8005cfe:	4a04      	ldr	r2, [pc, #16]	@ (8005d10 <SPI_Timer_On+0x20>)
 8005d00:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 8005d02:	4a04      	ldr	r2, [pc, #16]	@ (8005d14 <SPI_Timer_On+0x24>)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6013      	str	r3, [r2, #0]
}
 8005d08:	bf00      	nop
 8005d0a:	3708      	adds	r7, #8
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	bd80      	pop	{r7, pc}
 8005d10:	2000051c 	.word	0x2000051c
 8005d14:	20000520 	.word	0x20000520

08005d18 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8005d1c:	f7fc fad6 	bl	80022cc <HAL_GetTick>
 8005d20:	4602      	mov	r2, r0
 8005d22:	4b06      	ldr	r3, [pc, #24]	@ (8005d3c <SPI_Timer_Status+0x24>)
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	1ad2      	subs	r2, r2, r3
 8005d28:	4b05      	ldr	r3, [pc, #20]	@ (8005d40 <SPI_Timer_Status+0x28>)
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	429a      	cmp	r2, r3
 8005d2e:	bf34      	ite	cc
 8005d30:	2301      	movcc	r3, #1
 8005d32:	2300      	movcs	r3, #0
 8005d34:	b2db      	uxtb	r3, r3
}
 8005d36:	4618      	mov	r0, r3
 8005d38:	bd80      	pop	{r7, pc}
 8005d3a:	bf00      	nop
 8005d3c:	2000051c 	.word	0x2000051c
 8005d40:	20000520 	.word	0x20000520

08005d44 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b086      	sub	sp, #24
 8005d48:	af02      	add	r7, sp, #8
 8005d4a:	4603      	mov	r3, r0
 8005d4c:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8005d4e:	f107 020f 	add.w	r2, r7, #15
 8005d52:	1df9      	adds	r1, r7, #7
 8005d54:	2332      	movs	r3, #50	@ 0x32
 8005d56:	9300      	str	r3, [sp, #0]
 8005d58:	2301      	movs	r3, #1
 8005d5a:	4804      	ldr	r0, [pc, #16]	@ (8005d6c <xchg_spi+0x28>)
 8005d5c:	f7fe fb3f 	bl	80043de <HAL_SPI_TransmitReceive>
    return rxDat;
 8005d60:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d62:	4618      	mov	r0, r3
 8005d64:	3710      	adds	r7, #16
 8005d66:	46bd      	mov	sp, r7
 8005d68:	bd80      	pop	{r7, pc}
 8005d6a:	bf00      	nop
 8005d6c:	20000224 	.word	0x20000224

08005d70 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8005d70:	b590      	push	{r4, r7, lr}
 8005d72:	b085      	sub	sp, #20
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
 8005d78:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	60fb      	str	r3, [r7, #12]
 8005d7e:	e00a      	b.n	8005d96 <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8005d80:	687a      	ldr	r2, [r7, #4]
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	18d4      	adds	r4, r2, r3
 8005d86:	20ff      	movs	r0, #255	@ 0xff
 8005d88:	f7ff ffdc 	bl	8005d44 <xchg_spi>
 8005d8c:	4603      	mov	r3, r0
 8005d8e:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	3301      	adds	r3, #1
 8005d94:	60fb      	str	r3, [r7, #12]
 8005d96:	68fa      	ldr	r2, [r7, #12]
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	429a      	cmp	r2, r3
 8005d9c:	d3f0      	bcc.n	8005d80 <rcvr_spi_multi+0x10>
	}
}
 8005d9e:	bf00      	nop
 8005da0:	bf00      	nop
 8005da2:	3714      	adds	r7, #20
 8005da4:	46bd      	mov	sp, r7
 8005da6:	bd90      	pop	{r4, r7, pc}

08005da8 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b082      	sub	sp, #8
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
 8005db0:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&SD_SPI_HANDLE, buff, btx, HAL_MAX_DELAY);
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	b29a      	uxth	r2, r3
 8005db6:	f04f 33ff 	mov.w	r3, #4294967295
 8005dba:	6879      	ldr	r1, [r7, #4]
 8005dbc:	4803      	ldr	r0, [pc, #12]	@ (8005dcc <xmit_spi_multi+0x24>)
 8005dbe:	f7fe f998 	bl	80040f2 <HAL_SPI_Transmit>
}
 8005dc2:	bf00      	nop
 8005dc4:	3708      	adds	r7, #8
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	bd80      	pop	{r7, pc}
 8005dca:	bf00      	nop
 8005dcc:	20000224 	.word	0x20000224

08005dd0 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b086      	sub	sp, #24
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8005dd8:	f7fc fa78 	bl	80022cc <HAL_GetTick>
 8005ddc:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8005de2:	20ff      	movs	r0, #255	@ 0xff
 8005de4:	f7ff ffae 	bl	8005d44 <xchg_spi>
 8005de8:	4603      	mov	r3, r0
 8005dea:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8005dec:	7bfb      	ldrb	r3, [r7, #15]
 8005dee:	2bff      	cmp	r3, #255	@ 0xff
 8005df0:	d007      	beq.n	8005e02 <wait_ready+0x32>
 8005df2:	f7fc fa6b 	bl	80022cc <HAL_GetTick>
 8005df6:	4602      	mov	r2, r0
 8005df8:	697b      	ldr	r3, [r7, #20]
 8005dfa:	1ad3      	subs	r3, r2, r3
 8005dfc:	693a      	ldr	r2, [r7, #16]
 8005dfe:	429a      	cmp	r2, r3
 8005e00:	d8ef      	bhi.n	8005de2 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 8005e02:	7bfb      	ldrb	r3, [r7, #15]
 8005e04:	2bff      	cmp	r3, #255	@ 0xff
 8005e06:	bf0c      	ite	eq
 8005e08:	2301      	moveq	r3, #1
 8005e0a:	2300      	movne	r3, #0
 8005e0c:	b2db      	uxtb	r3, r3
}
 8005e0e:	4618      	mov	r0, r3
 8005e10:	3718      	adds	r7, #24
 8005e12:	46bd      	mov	sp, r7
 8005e14:	bd80      	pop	{r7, pc}
	...

08005e18 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8005e1c:	2201      	movs	r2, #1
 8005e1e:	2140      	movs	r1, #64	@ 0x40
 8005e20:	4803      	ldr	r0, [pc, #12]	@ (8005e30 <despiselect+0x18>)
 8005e22:	f7fc fd27 	bl	8002874 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8005e26:	20ff      	movs	r0, #255	@ 0xff
 8005e28:	f7ff ff8c 	bl	8005d44 <xchg_spi>

}
 8005e2c:	bf00      	nop
 8005e2e:	bd80      	pop	{r7, pc}
 8005e30:	48000400 	.word	0x48000400

08005e34 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8005e38:	2200      	movs	r2, #0
 8005e3a:	2140      	movs	r1, #64	@ 0x40
 8005e3c:	4809      	ldr	r0, [pc, #36]	@ (8005e64 <spiselect+0x30>)
 8005e3e:	f7fc fd19 	bl	8002874 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8005e42:	20ff      	movs	r0, #255	@ 0xff
 8005e44:	f7ff ff7e 	bl	8005d44 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8005e48:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8005e4c:	f7ff ffc0 	bl	8005dd0 <wait_ready>
 8005e50:	4603      	mov	r3, r0
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d001      	beq.n	8005e5a <spiselect+0x26>
 8005e56:	2301      	movs	r3, #1
 8005e58:	e002      	b.n	8005e60 <spiselect+0x2c>

	despiselect();
 8005e5a:	f7ff ffdd 	bl	8005e18 <despiselect>
	return 0;	/* Timeout */
 8005e5e:	2300      	movs	r3, #0
}
 8005e60:	4618      	mov	r0, r3
 8005e62:	bd80      	pop	{r7, pc}
 8005e64:	48000400 	.word	0x48000400

08005e68 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b084      	sub	sp, #16
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
 8005e70:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 8005e72:	20c8      	movs	r0, #200	@ 0xc8
 8005e74:	f7ff ff3c 	bl	8005cf0 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8005e78:	20ff      	movs	r0, #255	@ 0xff
 8005e7a:	f7ff ff63 	bl	8005d44 <xchg_spi>
 8005e7e:	4603      	mov	r3, r0
 8005e80:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 8005e82:	7bfb      	ldrb	r3, [r7, #15]
 8005e84:	2bff      	cmp	r3, #255	@ 0xff
 8005e86:	d104      	bne.n	8005e92 <rcvr_datablock+0x2a>
 8005e88:	f7ff ff46 	bl	8005d18 <SPI_Timer_Status>
 8005e8c:	4603      	mov	r3, r0
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d1f2      	bne.n	8005e78 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8005e92:	7bfb      	ldrb	r3, [r7, #15]
 8005e94:	2bfe      	cmp	r3, #254	@ 0xfe
 8005e96:	d001      	beq.n	8005e9c <rcvr_datablock+0x34>
 8005e98:	2300      	movs	r3, #0
 8005e9a:	e00a      	b.n	8005eb2 <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8005e9c:	6839      	ldr	r1, [r7, #0]
 8005e9e:	6878      	ldr	r0, [r7, #4]
 8005ea0:	f7ff ff66 	bl	8005d70 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8005ea4:	20ff      	movs	r0, #255	@ 0xff
 8005ea6:	f7ff ff4d 	bl	8005d44 <xchg_spi>
 8005eaa:	20ff      	movs	r0, #255	@ 0xff
 8005eac:	f7ff ff4a 	bl	8005d44 <xchg_spi>

	return 1;						/* Function succeeded */
 8005eb0:	2301      	movs	r3, #1
}
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	3710      	adds	r7, #16
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	bd80      	pop	{r7, pc}

08005eba <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 8005eba:	b580      	push	{r7, lr}
 8005ebc:	b084      	sub	sp, #16
 8005ebe:	af00      	add	r7, sp, #0
 8005ec0:	6078      	str	r0, [r7, #4]
 8005ec2:	460b      	mov	r3, r1
 8005ec4:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8005ec6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8005eca:	f7ff ff81 	bl	8005dd0 <wait_ready>
 8005ece:	4603      	mov	r3, r0
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d101      	bne.n	8005ed8 <xmit_datablock+0x1e>
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	e01e      	b.n	8005f16 <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8005ed8:	78fb      	ldrb	r3, [r7, #3]
 8005eda:	4618      	mov	r0, r3
 8005edc:	f7ff ff32 	bl	8005d44 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8005ee0:	78fb      	ldrb	r3, [r7, #3]
 8005ee2:	2bfd      	cmp	r3, #253	@ 0xfd
 8005ee4:	d016      	beq.n	8005f14 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 8005ee6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8005eea:	6878      	ldr	r0, [r7, #4]
 8005eec:	f7ff ff5c 	bl	8005da8 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8005ef0:	20ff      	movs	r0, #255	@ 0xff
 8005ef2:	f7ff ff27 	bl	8005d44 <xchg_spi>
 8005ef6:	20ff      	movs	r0, #255	@ 0xff
 8005ef8:	f7ff ff24 	bl	8005d44 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8005efc:	20ff      	movs	r0, #255	@ 0xff
 8005efe:	f7ff ff21 	bl	8005d44 <xchg_spi>
 8005f02:	4603      	mov	r3, r0
 8005f04:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8005f06:	7bfb      	ldrb	r3, [r7, #15]
 8005f08:	f003 031f 	and.w	r3, r3, #31
 8005f0c:	2b05      	cmp	r3, #5
 8005f0e:	d001      	beq.n	8005f14 <xmit_datablock+0x5a>
 8005f10:	2300      	movs	r3, #0
 8005f12:	e000      	b.n	8005f16 <xmit_datablock+0x5c>
	}
	return 1;
 8005f14:	2301      	movs	r3, #1
}
 8005f16:	4618      	mov	r0, r3
 8005f18:	3710      	adds	r7, #16
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	bd80      	pop	{r7, pc}

08005f1e <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 8005f1e:	b580      	push	{r7, lr}
 8005f20:	b084      	sub	sp, #16
 8005f22:	af00      	add	r7, sp, #0
 8005f24:	4603      	mov	r3, r0
 8005f26:	6039      	str	r1, [r7, #0]
 8005f28:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8005f2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	da0e      	bge.n	8005f50 <send_cmd+0x32>
		cmd &= 0x7F;
 8005f32:	79fb      	ldrb	r3, [r7, #7]
 8005f34:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005f38:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 8005f3a:	2100      	movs	r1, #0
 8005f3c:	2037      	movs	r0, #55	@ 0x37
 8005f3e:	f7ff ffee 	bl	8005f1e <send_cmd>
 8005f42:	4603      	mov	r3, r0
 8005f44:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 8005f46:	7bbb      	ldrb	r3, [r7, #14]
 8005f48:	2b01      	cmp	r3, #1
 8005f4a:	d901      	bls.n	8005f50 <send_cmd+0x32>
 8005f4c:	7bbb      	ldrb	r3, [r7, #14]
 8005f4e:	e051      	b.n	8005ff4 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8005f50:	79fb      	ldrb	r3, [r7, #7]
 8005f52:	2b0c      	cmp	r3, #12
 8005f54:	d008      	beq.n	8005f68 <send_cmd+0x4a>
		despiselect();
 8005f56:	f7ff ff5f 	bl	8005e18 <despiselect>
		if (!spiselect()) return 0xFF;
 8005f5a:	f7ff ff6b 	bl	8005e34 <spiselect>
 8005f5e:	4603      	mov	r3, r0
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d101      	bne.n	8005f68 <send_cmd+0x4a>
 8005f64:	23ff      	movs	r3, #255	@ 0xff
 8005f66:	e045      	b.n	8005ff4 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8005f68:	79fb      	ldrb	r3, [r7, #7]
 8005f6a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005f6e:	b2db      	uxtb	r3, r3
 8005f70:	4618      	mov	r0, r3
 8005f72:	f7ff fee7 	bl	8005d44 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	0e1b      	lsrs	r3, r3, #24
 8005f7a:	b2db      	uxtb	r3, r3
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	f7ff fee1 	bl	8005d44 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	0c1b      	lsrs	r3, r3, #16
 8005f86:	b2db      	uxtb	r3, r3
 8005f88:	4618      	mov	r0, r3
 8005f8a:	f7ff fedb 	bl	8005d44 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	0a1b      	lsrs	r3, r3, #8
 8005f92:	b2db      	uxtb	r3, r3
 8005f94:	4618      	mov	r0, r3
 8005f96:	f7ff fed5 	bl	8005d44 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	b2db      	uxtb	r3, r3
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	f7ff fed0 	bl	8005d44 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8005fa4:	2301      	movs	r3, #1
 8005fa6:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8005fa8:	79fb      	ldrb	r3, [r7, #7]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d101      	bne.n	8005fb2 <send_cmd+0x94>
 8005fae:	2395      	movs	r3, #149	@ 0x95
 8005fb0:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8005fb2:	79fb      	ldrb	r3, [r7, #7]
 8005fb4:	2b08      	cmp	r3, #8
 8005fb6:	d101      	bne.n	8005fbc <send_cmd+0x9e>
 8005fb8:	2387      	movs	r3, #135	@ 0x87
 8005fba:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8005fbc:	7bfb      	ldrb	r3, [r7, #15]
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	f7ff fec0 	bl	8005d44 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8005fc4:	79fb      	ldrb	r3, [r7, #7]
 8005fc6:	2b0c      	cmp	r3, #12
 8005fc8:	d102      	bne.n	8005fd0 <send_cmd+0xb2>
 8005fca:	20ff      	movs	r0, #255	@ 0xff
 8005fcc:	f7ff feba 	bl	8005d44 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8005fd0:	230a      	movs	r3, #10
 8005fd2:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 8005fd4:	20ff      	movs	r0, #255	@ 0xff
 8005fd6:	f7ff feb5 	bl	8005d44 <xchg_spi>
 8005fda:	4603      	mov	r3, r0
 8005fdc:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 8005fde:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	da05      	bge.n	8005ff2 <send_cmd+0xd4>
 8005fe6:	7bfb      	ldrb	r3, [r7, #15]
 8005fe8:	3b01      	subs	r3, #1
 8005fea:	73fb      	strb	r3, [r7, #15]
 8005fec:	7bfb      	ldrb	r3, [r7, #15]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d1f0      	bne.n	8005fd4 <send_cmd+0xb6>

	return res;							/* Return received response */
 8005ff2:	7bbb      	ldrb	r3, [r7, #14]
}
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	3710      	adds	r7, #16
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	bd80      	pop	{r7, pc}

08005ffc <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8005ffc:	b590      	push	{r4, r7, lr}
 8005ffe:	b085      	sub	sp, #20
 8006000:	af00      	add	r7, sp, #0
 8006002:	4603      	mov	r3, r0
 8006004:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 8006006:	79fb      	ldrb	r3, [r7, #7]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d001      	beq.n	8006010 <USER_SPI_initialize+0x14>
 800600c:	2301      	movs	r3, #1
 800600e:	e0d6      	b.n	80061be <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8006010:	4b6d      	ldr	r3, [pc, #436]	@ (80061c8 <USER_SPI_initialize+0x1cc>)
 8006012:	781b      	ldrb	r3, [r3, #0]
 8006014:	b2db      	uxtb	r3, r3
 8006016:	f003 0302 	and.w	r3, r3, #2
 800601a:	2b00      	cmp	r3, #0
 800601c:	d003      	beq.n	8006026 <USER_SPI_initialize+0x2a>
 800601e:	4b6a      	ldr	r3, [pc, #424]	@ (80061c8 <USER_SPI_initialize+0x1cc>)
 8006020:	781b      	ldrb	r3, [r3, #0]
 8006022:	b2db      	uxtb	r3, r3
 8006024:	e0cb      	b.n	80061be <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 8006026:	4b69      	ldr	r3, [pc, #420]	@ (80061cc <USER_SPI_initialize+0x1d0>)
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 8006030:	4b66      	ldr	r3, [pc, #408]	@ (80061cc <USER_SPI_initialize+0x1d0>)
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f042 0230 	orr.w	r2, r2, #48	@ 0x30
 8006038:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 800603a:	230a      	movs	r3, #10
 800603c:	73fb      	strb	r3, [r7, #15]
 800603e:	e005      	b.n	800604c <USER_SPI_initialize+0x50>
 8006040:	20ff      	movs	r0, #255	@ 0xff
 8006042:	f7ff fe7f 	bl	8005d44 <xchg_spi>
 8006046:	7bfb      	ldrb	r3, [r7, #15]
 8006048:	3b01      	subs	r3, #1
 800604a:	73fb      	strb	r3, [r7, #15]
 800604c:	7bfb      	ldrb	r3, [r7, #15]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d1f6      	bne.n	8006040 <USER_SPI_initialize+0x44>

	ty = 0;
 8006052:	2300      	movs	r3, #0
 8006054:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 8006056:	2100      	movs	r1, #0
 8006058:	2000      	movs	r0, #0
 800605a:	f7ff ff60 	bl	8005f1e <send_cmd>
 800605e:	4603      	mov	r3, r0
 8006060:	2b01      	cmp	r3, #1
 8006062:	f040 808b 	bne.w	800617c <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 8006066:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800606a:	f7ff fe41 	bl	8005cf0 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 800606e:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8006072:	2008      	movs	r0, #8
 8006074:	f7ff ff53 	bl	8005f1e <send_cmd>
 8006078:	4603      	mov	r3, r0
 800607a:	2b01      	cmp	r3, #1
 800607c:	d151      	bne.n	8006122 <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 800607e:	2300      	movs	r3, #0
 8006080:	73fb      	strb	r3, [r7, #15]
 8006082:	e00d      	b.n	80060a0 <USER_SPI_initialize+0xa4>
 8006084:	7bfc      	ldrb	r4, [r7, #15]
 8006086:	20ff      	movs	r0, #255	@ 0xff
 8006088:	f7ff fe5c 	bl	8005d44 <xchg_spi>
 800608c:	4603      	mov	r3, r0
 800608e:	461a      	mov	r2, r3
 8006090:	f104 0310 	add.w	r3, r4, #16
 8006094:	443b      	add	r3, r7
 8006096:	f803 2c08 	strb.w	r2, [r3, #-8]
 800609a:	7bfb      	ldrb	r3, [r7, #15]
 800609c:	3301      	adds	r3, #1
 800609e:	73fb      	strb	r3, [r7, #15]
 80060a0:	7bfb      	ldrb	r3, [r7, #15]
 80060a2:	2b03      	cmp	r3, #3
 80060a4:	d9ee      	bls.n	8006084 <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 80060a6:	7abb      	ldrb	r3, [r7, #10]
 80060a8:	2b01      	cmp	r3, #1
 80060aa:	d167      	bne.n	800617c <USER_SPI_initialize+0x180>
 80060ac:	7afb      	ldrb	r3, [r7, #11]
 80060ae:	2baa      	cmp	r3, #170	@ 0xaa
 80060b0:	d164      	bne.n	800617c <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 80060b2:	bf00      	nop
 80060b4:	f7ff fe30 	bl	8005d18 <SPI_Timer_Status>
 80060b8:	4603      	mov	r3, r0
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d007      	beq.n	80060ce <USER_SPI_initialize+0xd2>
 80060be:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80060c2:	20a9      	movs	r0, #169	@ 0xa9
 80060c4:	f7ff ff2b 	bl	8005f1e <send_cmd>
 80060c8:	4603      	mov	r3, r0
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d1f2      	bne.n	80060b4 <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 80060ce:	f7ff fe23 	bl	8005d18 <SPI_Timer_Status>
 80060d2:	4603      	mov	r3, r0
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d051      	beq.n	800617c <USER_SPI_initialize+0x180>
 80060d8:	2100      	movs	r1, #0
 80060da:	203a      	movs	r0, #58	@ 0x3a
 80060dc:	f7ff ff1f 	bl	8005f1e <send_cmd>
 80060e0:	4603      	mov	r3, r0
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d14a      	bne.n	800617c <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 80060e6:	2300      	movs	r3, #0
 80060e8:	73fb      	strb	r3, [r7, #15]
 80060ea:	e00d      	b.n	8006108 <USER_SPI_initialize+0x10c>
 80060ec:	7bfc      	ldrb	r4, [r7, #15]
 80060ee:	20ff      	movs	r0, #255	@ 0xff
 80060f0:	f7ff fe28 	bl	8005d44 <xchg_spi>
 80060f4:	4603      	mov	r3, r0
 80060f6:	461a      	mov	r2, r3
 80060f8:	f104 0310 	add.w	r3, r4, #16
 80060fc:	443b      	add	r3, r7
 80060fe:	f803 2c08 	strb.w	r2, [r3, #-8]
 8006102:	7bfb      	ldrb	r3, [r7, #15]
 8006104:	3301      	adds	r3, #1
 8006106:	73fb      	strb	r3, [r7, #15]
 8006108:	7bfb      	ldrb	r3, [r7, #15]
 800610a:	2b03      	cmp	r3, #3
 800610c:	d9ee      	bls.n	80060ec <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 800610e:	7a3b      	ldrb	r3, [r7, #8]
 8006110:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006114:	2b00      	cmp	r3, #0
 8006116:	d001      	beq.n	800611c <USER_SPI_initialize+0x120>
 8006118:	230c      	movs	r3, #12
 800611a:	e000      	b.n	800611e <USER_SPI_initialize+0x122>
 800611c:	2304      	movs	r3, #4
 800611e:	737b      	strb	r3, [r7, #13]
 8006120:	e02c      	b.n	800617c <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8006122:	2100      	movs	r1, #0
 8006124:	20a9      	movs	r0, #169	@ 0xa9
 8006126:	f7ff fefa 	bl	8005f1e <send_cmd>
 800612a:	4603      	mov	r3, r0
 800612c:	2b01      	cmp	r3, #1
 800612e:	d804      	bhi.n	800613a <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8006130:	2302      	movs	r3, #2
 8006132:	737b      	strb	r3, [r7, #13]
 8006134:	23a9      	movs	r3, #169	@ 0xa9
 8006136:	73bb      	strb	r3, [r7, #14]
 8006138:	e003      	b.n	8006142 <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 800613a:	2301      	movs	r3, #1
 800613c:	737b      	strb	r3, [r7, #13]
 800613e:	2301      	movs	r3, #1
 8006140:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8006142:	bf00      	nop
 8006144:	f7ff fde8 	bl	8005d18 <SPI_Timer_Status>
 8006148:	4603      	mov	r3, r0
 800614a:	2b00      	cmp	r3, #0
 800614c:	d007      	beq.n	800615e <USER_SPI_initialize+0x162>
 800614e:	7bbb      	ldrb	r3, [r7, #14]
 8006150:	2100      	movs	r1, #0
 8006152:	4618      	mov	r0, r3
 8006154:	f7ff fee3 	bl	8005f1e <send_cmd>
 8006158:	4603      	mov	r3, r0
 800615a:	2b00      	cmp	r3, #0
 800615c:	d1f2      	bne.n	8006144 <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 800615e:	f7ff fddb 	bl	8005d18 <SPI_Timer_Status>
 8006162:	4603      	mov	r3, r0
 8006164:	2b00      	cmp	r3, #0
 8006166:	d007      	beq.n	8006178 <USER_SPI_initialize+0x17c>
 8006168:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800616c:	2010      	movs	r0, #16
 800616e:	f7ff fed6 	bl	8005f1e <send_cmd>
 8006172:	4603      	mov	r3, r0
 8006174:	2b00      	cmp	r3, #0
 8006176:	d001      	beq.n	800617c <USER_SPI_initialize+0x180>
				ty = 0;
 8006178:	2300      	movs	r3, #0
 800617a:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 800617c:	4a14      	ldr	r2, [pc, #80]	@ (80061d0 <USER_SPI_initialize+0x1d4>)
 800617e:	7b7b      	ldrb	r3, [r7, #13]
 8006180:	7013      	strb	r3, [r2, #0]
	despiselect();
 8006182:	f7ff fe49 	bl	8005e18 <despiselect>

	if (ty) {			/* OK */
 8006186:	7b7b      	ldrb	r3, [r7, #13]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d012      	beq.n	80061b2 <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 800618c:	4b0f      	ldr	r3, [pc, #60]	@ (80061cc <USER_SPI_initialize+0x1d0>)
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 8006196:	4b0d      	ldr	r3, [pc, #52]	@ (80061cc <USER_SPI_initialize+0x1d0>)
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f042 0210 	orr.w	r2, r2, #16
 800619e:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 80061a0:	4b09      	ldr	r3, [pc, #36]	@ (80061c8 <USER_SPI_initialize+0x1cc>)
 80061a2:	781b      	ldrb	r3, [r3, #0]
 80061a4:	b2db      	uxtb	r3, r3
 80061a6:	f023 0301 	bic.w	r3, r3, #1
 80061aa:	b2da      	uxtb	r2, r3
 80061ac:	4b06      	ldr	r3, [pc, #24]	@ (80061c8 <USER_SPI_initialize+0x1cc>)
 80061ae:	701a      	strb	r2, [r3, #0]
 80061b0:	e002      	b.n	80061b8 <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 80061b2:	4b05      	ldr	r3, [pc, #20]	@ (80061c8 <USER_SPI_initialize+0x1cc>)
 80061b4:	2201      	movs	r2, #1
 80061b6:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 80061b8:	4b03      	ldr	r3, [pc, #12]	@ (80061c8 <USER_SPI_initialize+0x1cc>)
 80061ba:	781b      	ldrb	r3, [r3, #0]
 80061bc:	b2db      	uxtb	r3, r3
}
 80061be:	4618      	mov	r0, r3
 80061c0:	3714      	adds	r7, #20
 80061c2:	46bd      	mov	sp, r7
 80061c4:	bd90      	pop	{r4, r7, pc}
 80061c6:	bf00      	nop
 80061c8:	2000002c 	.word	0x2000002c
 80061cc:	20000224 	.word	0x20000224
 80061d0:	20000518 	.word	0x20000518

080061d4 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 80061d4:	b480      	push	{r7}
 80061d6:	b083      	sub	sp, #12
 80061d8:	af00      	add	r7, sp, #0
 80061da:	4603      	mov	r3, r0
 80061dc:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 80061de:	79fb      	ldrb	r3, [r7, #7]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d001      	beq.n	80061e8 <USER_SPI_status+0x14>
 80061e4:	2301      	movs	r3, #1
 80061e6:	e002      	b.n	80061ee <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 80061e8:	4b04      	ldr	r3, [pc, #16]	@ (80061fc <USER_SPI_status+0x28>)
 80061ea:	781b      	ldrb	r3, [r3, #0]
 80061ec:	b2db      	uxtb	r3, r3
}
 80061ee:	4618      	mov	r0, r3
 80061f0:	370c      	adds	r7, #12
 80061f2:	46bd      	mov	sp, r7
 80061f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f8:	4770      	bx	lr
 80061fa:	bf00      	nop
 80061fc:	2000002c 	.word	0x2000002c

08006200 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8006200:	b580      	push	{r7, lr}
 8006202:	b084      	sub	sp, #16
 8006204:	af00      	add	r7, sp, #0
 8006206:	60b9      	str	r1, [r7, #8]
 8006208:	607a      	str	r2, [r7, #4]
 800620a:	603b      	str	r3, [r7, #0]
 800620c:	4603      	mov	r3, r0
 800620e:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8006210:	7bfb      	ldrb	r3, [r7, #15]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d102      	bne.n	800621c <USER_SPI_read+0x1c>
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d101      	bne.n	8006220 <USER_SPI_read+0x20>
 800621c:	2304      	movs	r3, #4
 800621e:	e04d      	b.n	80062bc <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8006220:	4b28      	ldr	r3, [pc, #160]	@ (80062c4 <USER_SPI_read+0xc4>)
 8006222:	781b      	ldrb	r3, [r3, #0]
 8006224:	b2db      	uxtb	r3, r3
 8006226:	f003 0301 	and.w	r3, r3, #1
 800622a:	2b00      	cmp	r3, #0
 800622c:	d001      	beq.n	8006232 <USER_SPI_read+0x32>
 800622e:	2303      	movs	r3, #3
 8006230:	e044      	b.n	80062bc <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 8006232:	4b25      	ldr	r3, [pc, #148]	@ (80062c8 <USER_SPI_read+0xc8>)
 8006234:	781b      	ldrb	r3, [r3, #0]
 8006236:	f003 0308 	and.w	r3, r3, #8
 800623a:	2b00      	cmp	r3, #0
 800623c:	d102      	bne.n	8006244 <USER_SPI_read+0x44>
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	025b      	lsls	r3, r3, #9
 8006242:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	2b01      	cmp	r3, #1
 8006248:	d111      	bne.n	800626e <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 800624a:	6879      	ldr	r1, [r7, #4]
 800624c:	2011      	movs	r0, #17
 800624e:	f7ff fe66 	bl	8005f1e <send_cmd>
 8006252:	4603      	mov	r3, r0
 8006254:	2b00      	cmp	r3, #0
 8006256:	d129      	bne.n	80062ac <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 8006258:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800625c:	68b8      	ldr	r0, [r7, #8]
 800625e:	f7ff fe03 	bl	8005e68 <rcvr_datablock>
 8006262:	4603      	mov	r3, r0
 8006264:	2b00      	cmp	r3, #0
 8006266:	d021      	beq.n	80062ac <USER_SPI_read+0xac>
			count = 0;
 8006268:	2300      	movs	r3, #0
 800626a:	603b      	str	r3, [r7, #0]
 800626c:	e01e      	b.n	80062ac <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 800626e:	6879      	ldr	r1, [r7, #4]
 8006270:	2012      	movs	r0, #18
 8006272:	f7ff fe54 	bl	8005f1e <send_cmd>
 8006276:	4603      	mov	r3, r0
 8006278:	2b00      	cmp	r3, #0
 800627a:	d117      	bne.n	80062ac <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 800627c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8006280:	68b8      	ldr	r0, [r7, #8]
 8006282:	f7ff fdf1 	bl	8005e68 <rcvr_datablock>
 8006286:	4603      	mov	r3, r0
 8006288:	2b00      	cmp	r3, #0
 800628a:	d00a      	beq.n	80062a2 <USER_SPI_read+0xa2>
				buff += 512;
 800628c:	68bb      	ldr	r3, [r7, #8]
 800628e:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8006292:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	3b01      	subs	r3, #1
 8006298:	603b      	str	r3, [r7, #0]
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d1ed      	bne.n	800627c <USER_SPI_read+0x7c>
 80062a0:	e000      	b.n	80062a4 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 80062a2:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 80062a4:	2100      	movs	r1, #0
 80062a6:	200c      	movs	r0, #12
 80062a8:	f7ff fe39 	bl	8005f1e <send_cmd>
		}
	}
	despiselect();
 80062ac:	f7ff fdb4 	bl	8005e18 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	bf14      	ite	ne
 80062b6:	2301      	movne	r3, #1
 80062b8:	2300      	moveq	r3, #0
 80062ba:	b2db      	uxtb	r3, r3
}
 80062bc:	4618      	mov	r0, r3
 80062be:	3710      	adds	r7, #16
 80062c0:	46bd      	mov	sp, r7
 80062c2:	bd80      	pop	{r7, pc}
 80062c4:	2000002c 	.word	0x2000002c
 80062c8:	20000518 	.word	0x20000518

080062cc <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b084      	sub	sp, #16
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	60b9      	str	r1, [r7, #8]
 80062d4:	607a      	str	r2, [r7, #4]
 80062d6:	603b      	str	r3, [r7, #0]
 80062d8:	4603      	mov	r3, r0
 80062da:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 80062dc:	7bfb      	ldrb	r3, [r7, #15]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d102      	bne.n	80062e8 <USER_SPI_write+0x1c>
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d101      	bne.n	80062ec <USER_SPI_write+0x20>
 80062e8:	2304      	movs	r3, #4
 80062ea:	e063      	b.n	80063b4 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 80062ec:	4b33      	ldr	r3, [pc, #204]	@ (80063bc <USER_SPI_write+0xf0>)
 80062ee:	781b      	ldrb	r3, [r3, #0]
 80062f0:	b2db      	uxtb	r3, r3
 80062f2:	f003 0301 	and.w	r3, r3, #1
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d001      	beq.n	80062fe <USER_SPI_write+0x32>
 80062fa:	2303      	movs	r3, #3
 80062fc:	e05a      	b.n	80063b4 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 80062fe:	4b2f      	ldr	r3, [pc, #188]	@ (80063bc <USER_SPI_write+0xf0>)
 8006300:	781b      	ldrb	r3, [r3, #0]
 8006302:	b2db      	uxtb	r3, r3
 8006304:	f003 0304 	and.w	r3, r3, #4
 8006308:	2b00      	cmp	r3, #0
 800630a:	d001      	beq.n	8006310 <USER_SPI_write+0x44>
 800630c:	2302      	movs	r3, #2
 800630e:	e051      	b.n	80063b4 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8006310:	4b2b      	ldr	r3, [pc, #172]	@ (80063c0 <USER_SPI_write+0xf4>)
 8006312:	781b      	ldrb	r3, [r3, #0]
 8006314:	f003 0308 	and.w	r3, r3, #8
 8006318:	2b00      	cmp	r3, #0
 800631a:	d102      	bne.n	8006322 <USER_SPI_write+0x56>
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	025b      	lsls	r3, r3, #9
 8006320:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	2b01      	cmp	r3, #1
 8006326:	d110      	bne.n	800634a <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8006328:	6879      	ldr	r1, [r7, #4]
 800632a:	2018      	movs	r0, #24
 800632c:	f7ff fdf7 	bl	8005f1e <send_cmd>
 8006330:	4603      	mov	r3, r0
 8006332:	2b00      	cmp	r3, #0
 8006334:	d136      	bne.n	80063a4 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 8006336:	21fe      	movs	r1, #254	@ 0xfe
 8006338:	68b8      	ldr	r0, [r7, #8]
 800633a:	f7ff fdbe 	bl	8005eba <xmit_datablock>
 800633e:	4603      	mov	r3, r0
 8006340:	2b00      	cmp	r3, #0
 8006342:	d02f      	beq.n	80063a4 <USER_SPI_write+0xd8>
			count = 0;
 8006344:	2300      	movs	r3, #0
 8006346:	603b      	str	r3, [r7, #0]
 8006348:	e02c      	b.n	80063a4 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 800634a:	4b1d      	ldr	r3, [pc, #116]	@ (80063c0 <USER_SPI_write+0xf4>)
 800634c:	781b      	ldrb	r3, [r3, #0]
 800634e:	f003 0306 	and.w	r3, r3, #6
 8006352:	2b00      	cmp	r3, #0
 8006354:	d003      	beq.n	800635e <USER_SPI_write+0x92>
 8006356:	6839      	ldr	r1, [r7, #0]
 8006358:	2097      	movs	r0, #151	@ 0x97
 800635a:	f7ff fde0 	bl	8005f1e <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 800635e:	6879      	ldr	r1, [r7, #4]
 8006360:	2019      	movs	r0, #25
 8006362:	f7ff fddc 	bl	8005f1e <send_cmd>
 8006366:	4603      	mov	r3, r0
 8006368:	2b00      	cmp	r3, #0
 800636a:	d11b      	bne.n	80063a4 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 800636c:	21fc      	movs	r1, #252	@ 0xfc
 800636e:	68b8      	ldr	r0, [r7, #8]
 8006370:	f7ff fda3 	bl	8005eba <xmit_datablock>
 8006374:	4603      	mov	r3, r0
 8006376:	2b00      	cmp	r3, #0
 8006378:	d00a      	beq.n	8006390 <USER_SPI_write+0xc4>
				buff += 512;
 800637a:	68bb      	ldr	r3, [r7, #8]
 800637c:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8006380:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	3b01      	subs	r3, #1
 8006386:	603b      	str	r3, [r7, #0]
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d1ee      	bne.n	800636c <USER_SPI_write+0xa0>
 800638e:	e000      	b.n	8006392 <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 8006390:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 8006392:	21fd      	movs	r1, #253	@ 0xfd
 8006394:	2000      	movs	r0, #0
 8006396:	f7ff fd90 	bl	8005eba <xmit_datablock>
 800639a:	4603      	mov	r3, r0
 800639c:	2b00      	cmp	r3, #0
 800639e:	d101      	bne.n	80063a4 <USER_SPI_write+0xd8>
 80063a0:	2301      	movs	r3, #1
 80063a2:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 80063a4:	f7ff fd38 	bl	8005e18 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	bf14      	ite	ne
 80063ae:	2301      	movne	r3, #1
 80063b0:	2300      	moveq	r3, #0
 80063b2:	b2db      	uxtb	r3, r3
}
 80063b4:	4618      	mov	r0, r3
 80063b6:	3710      	adds	r7, #16
 80063b8:	46bd      	mov	sp, r7
 80063ba:	bd80      	pop	{r7, pc}
 80063bc:	2000002c 	.word	0x2000002c
 80063c0:	20000518 	.word	0x20000518

080063c4 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b08c      	sub	sp, #48	@ 0x30
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	4603      	mov	r3, r0
 80063cc:	603a      	str	r2, [r7, #0]
 80063ce:	71fb      	strb	r3, [r7, #7]
 80063d0:	460b      	mov	r3, r1
 80063d2:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 80063d4:	79fb      	ldrb	r3, [r7, #7]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d001      	beq.n	80063de <USER_SPI_ioctl+0x1a>
 80063da:	2304      	movs	r3, #4
 80063dc:	e15a      	b.n	8006694 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 80063de:	4baf      	ldr	r3, [pc, #700]	@ (800669c <USER_SPI_ioctl+0x2d8>)
 80063e0:	781b      	ldrb	r3, [r3, #0]
 80063e2:	b2db      	uxtb	r3, r3
 80063e4:	f003 0301 	and.w	r3, r3, #1
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d001      	beq.n	80063f0 <USER_SPI_ioctl+0x2c>
 80063ec:	2303      	movs	r3, #3
 80063ee:	e151      	b.n	8006694 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 80063f0:	2301      	movs	r3, #1
 80063f2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	switch (cmd) {
 80063f6:	79bb      	ldrb	r3, [r7, #6]
 80063f8:	2b04      	cmp	r3, #4
 80063fa:	f200 8136 	bhi.w	800666a <USER_SPI_ioctl+0x2a6>
 80063fe:	a201      	add	r2, pc, #4	@ (adr r2, 8006404 <USER_SPI_ioctl+0x40>)
 8006400:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006404:	08006419 	.word	0x08006419
 8006408:	0800642d 	.word	0x0800642d
 800640c:	0800666b 	.word	0x0800666b
 8006410:	080064d9 	.word	0x080064d9
 8006414:	080065cf 	.word	0x080065cf
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8006418:	f7ff fd0c 	bl	8005e34 <spiselect>
 800641c:	4603      	mov	r3, r0
 800641e:	2b00      	cmp	r3, #0
 8006420:	f000 8127 	beq.w	8006672 <USER_SPI_ioctl+0x2ae>
 8006424:	2300      	movs	r3, #0
 8006426:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 800642a:	e122      	b.n	8006672 <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 800642c:	2100      	movs	r1, #0
 800642e:	2009      	movs	r0, #9
 8006430:	f7ff fd75 	bl	8005f1e <send_cmd>
 8006434:	4603      	mov	r3, r0
 8006436:	2b00      	cmp	r3, #0
 8006438:	f040 811d 	bne.w	8006676 <USER_SPI_ioctl+0x2b2>
 800643c:	f107 030c 	add.w	r3, r7, #12
 8006440:	2110      	movs	r1, #16
 8006442:	4618      	mov	r0, r3
 8006444:	f7ff fd10 	bl	8005e68 <rcvr_datablock>
 8006448:	4603      	mov	r3, r0
 800644a:	2b00      	cmp	r3, #0
 800644c:	f000 8113 	beq.w	8006676 <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8006450:	7b3b      	ldrb	r3, [r7, #12]
 8006452:	099b      	lsrs	r3, r3, #6
 8006454:	b2db      	uxtb	r3, r3
 8006456:	2b01      	cmp	r3, #1
 8006458:	d111      	bne.n	800647e <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 800645a:	7d7b      	ldrb	r3, [r7, #21]
 800645c:	461a      	mov	r2, r3
 800645e:	7d3b      	ldrb	r3, [r7, #20]
 8006460:	021b      	lsls	r3, r3, #8
 8006462:	4413      	add	r3, r2
 8006464:	461a      	mov	r2, r3
 8006466:	7cfb      	ldrb	r3, [r7, #19]
 8006468:	041b      	lsls	r3, r3, #16
 800646a:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
 800646e:	4413      	add	r3, r2
 8006470:	3301      	adds	r3, #1
 8006472:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8006474:	69fb      	ldr	r3, [r7, #28]
 8006476:	029a      	lsls	r2, r3, #10
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	601a      	str	r2, [r3, #0]
 800647c:	e028      	b.n	80064d0 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800647e:	7c7b      	ldrb	r3, [r7, #17]
 8006480:	f003 030f 	and.w	r3, r3, #15
 8006484:	b2da      	uxtb	r2, r3
 8006486:	7dbb      	ldrb	r3, [r7, #22]
 8006488:	09db      	lsrs	r3, r3, #7
 800648a:	b2db      	uxtb	r3, r3
 800648c:	4413      	add	r3, r2
 800648e:	b2da      	uxtb	r2, r3
 8006490:	7d7b      	ldrb	r3, [r7, #21]
 8006492:	005b      	lsls	r3, r3, #1
 8006494:	b2db      	uxtb	r3, r3
 8006496:	f003 0306 	and.w	r3, r3, #6
 800649a:	b2db      	uxtb	r3, r3
 800649c:	4413      	add	r3, r2
 800649e:	b2db      	uxtb	r3, r3
 80064a0:	3302      	adds	r3, #2
 80064a2:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 80064a6:	7d3b      	ldrb	r3, [r7, #20]
 80064a8:	099b      	lsrs	r3, r3, #6
 80064aa:	b2db      	uxtb	r3, r3
 80064ac:	461a      	mov	r2, r3
 80064ae:	7cfb      	ldrb	r3, [r7, #19]
 80064b0:	009b      	lsls	r3, r3, #2
 80064b2:	441a      	add	r2, r3
 80064b4:	7cbb      	ldrb	r3, [r7, #18]
 80064b6:	029b      	lsls	r3, r3, #10
 80064b8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80064bc:	4413      	add	r3, r2
 80064be:	3301      	adds	r3, #1
 80064c0:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 80064c2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80064c6:	3b09      	subs	r3, #9
 80064c8:	69fa      	ldr	r2, [r7, #28]
 80064ca:	409a      	lsls	r2, r3
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 80064d0:	2300      	movs	r3, #0
 80064d2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 80064d6:	e0ce      	b.n	8006676 <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 80064d8:	4b71      	ldr	r3, [pc, #452]	@ (80066a0 <USER_SPI_ioctl+0x2dc>)
 80064da:	781b      	ldrb	r3, [r3, #0]
 80064dc:	f003 0304 	and.w	r3, r3, #4
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d031      	beq.n	8006548 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 80064e4:	2100      	movs	r1, #0
 80064e6:	208d      	movs	r0, #141	@ 0x8d
 80064e8:	f7ff fd19 	bl	8005f1e <send_cmd>
 80064ec:	4603      	mov	r3, r0
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	f040 80c3 	bne.w	800667a <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 80064f4:	20ff      	movs	r0, #255	@ 0xff
 80064f6:	f7ff fc25 	bl	8005d44 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 80064fa:	f107 030c 	add.w	r3, r7, #12
 80064fe:	2110      	movs	r1, #16
 8006500:	4618      	mov	r0, r3
 8006502:	f7ff fcb1 	bl	8005e68 <rcvr_datablock>
 8006506:	4603      	mov	r3, r0
 8006508:	2b00      	cmp	r3, #0
 800650a:	f000 80b6 	beq.w	800667a <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 800650e:	2330      	movs	r3, #48	@ 0x30
 8006510:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8006514:	e007      	b.n	8006526 <USER_SPI_ioctl+0x162>
 8006516:	20ff      	movs	r0, #255	@ 0xff
 8006518:	f7ff fc14 	bl	8005d44 <xchg_spi>
 800651c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006520:	3b01      	subs	r3, #1
 8006522:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8006526:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800652a:	2b00      	cmp	r3, #0
 800652c:	d1f3      	bne.n	8006516 <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 800652e:	7dbb      	ldrb	r3, [r7, #22]
 8006530:	091b      	lsrs	r3, r3, #4
 8006532:	b2db      	uxtb	r3, r3
 8006534:	461a      	mov	r2, r3
 8006536:	2310      	movs	r3, #16
 8006538:	fa03 f202 	lsl.w	r2, r3, r2
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8006540:	2300      	movs	r3, #0
 8006542:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 8006546:	e098      	b.n	800667a <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8006548:	2100      	movs	r1, #0
 800654a:	2009      	movs	r0, #9
 800654c:	f7ff fce7 	bl	8005f1e <send_cmd>
 8006550:	4603      	mov	r3, r0
 8006552:	2b00      	cmp	r3, #0
 8006554:	f040 8091 	bne.w	800667a <USER_SPI_ioctl+0x2b6>
 8006558:	f107 030c 	add.w	r3, r7, #12
 800655c:	2110      	movs	r1, #16
 800655e:	4618      	mov	r0, r3
 8006560:	f7ff fc82 	bl	8005e68 <rcvr_datablock>
 8006564:	4603      	mov	r3, r0
 8006566:	2b00      	cmp	r3, #0
 8006568:	f000 8087 	beq.w	800667a <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 800656c:	4b4c      	ldr	r3, [pc, #304]	@ (80066a0 <USER_SPI_ioctl+0x2dc>)
 800656e:	781b      	ldrb	r3, [r3, #0]
 8006570:	f003 0302 	and.w	r3, r3, #2
 8006574:	2b00      	cmp	r3, #0
 8006576:	d012      	beq.n	800659e <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8006578:	7dbb      	ldrb	r3, [r7, #22]
 800657a:	005b      	lsls	r3, r3, #1
 800657c:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 8006580:	7dfa      	ldrb	r2, [r7, #23]
 8006582:	09d2      	lsrs	r2, r2, #7
 8006584:	b2d2      	uxtb	r2, r2
 8006586:	4413      	add	r3, r2
 8006588:	1c5a      	adds	r2, r3, #1
 800658a:	7e7b      	ldrb	r3, [r7, #25]
 800658c:	099b      	lsrs	r3, r3, #6
 800658e:	b2db      	uxtb	r3, r3
 8006590:	3b01      	subs	r3, #1
 8006592:	fa02 f303 	lsl.w	r3, r2, r3
 8006596:	461a      	mov	r2, r3
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	601a      	str	r2, [r3, #0]
 800659c:	e013      	b.n	80065c6 <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 800659e:	7dbb      	ldrb	r3, [r7, #22]
 80065a0:	109b      	asrs	r3, r3, #2
 80065a2:	b29b      	uxth	r3, r3
 80065a4:	f003 031f 	and.w	r3, r3, #31
 80065a8:	3301      	adds	r3, #1
 80065aa:	7dfa      	ldrb	r2, [r7, #23]
 80065ac:	00d2      	lsls	r2, r2, #3
 80065ae:	f002 0218 	and.w	r2, r2, #24
 80065b2:	7df9      	ldrb	r1, [r7, #23]
 80065b4:	0949      	lsrs	r1, r1, #5
 80065b6:	b2c9      	uxtb	r1, r1
 80065b8:	440a      	add	r2, r1
 80065ba:	3201      	adds	r2, #1
 80065bc:	fb02 f303 	mul.w	r3, r2, r3
 80065c0:	461a      	mov	r2, r3
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 80065c6:	2300      	movs	r3, #0
 80065c8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 80065cc:	e055      	b.n	800667a <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 80065ce:	4b34      	ldr	r3, [pc, #208]	@ (80066a0 <USER_SPI_ioctl+0x2dc>)
 80065d0:	781b      	ldrb	r3, [r3, #0]
 80065d2:	f003 0306 	and.w	r3, r3, #6
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d051      	beq.n	800667e <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 80065da:	f107 020c 	add.w	r2, r7, #12
 80065de:	79fb      	ldrb	r3, [r7, #7]
 80065e0:	210b      	movs	r1, #11
 80065e2:	4618      	mov	r0, r3
 80065e4:	f7ff feee 	bl	80063c4 <USER_SPI_ioctl>
 80065e8:	4603      	mov	r3, r0
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d149      	bne.n	8006682 <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 80065ee:	7b3b      	ldrb	r3, [r7, #12]
 80065f0:	099b      	lsrs	r3, r3, #6
 80065f2:	b2db      	uxtb	r3, r3
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d104      	bne.n	8006602 <USER_SPI_ioctl+0x23e>
 80065f8:	7dbb      	ldrb	r3, [r7, #22]
 80065fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d041      	beq.n	8006686 <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	623b      	str	r3, [r7, #32]
 8006606:	6a3b      	ldr	r3, [r7, #32]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800660c:	6a3b      	ldr	r3, [r7, #32]
 800660e:	685b      	ldr	r3, [r3, #4]
 8006610:	627b      	str	r3, [r7, #36]	@ 0x24
		if (!(CardType & CT_BLOCK)) {
 8006612:	4b23      	ldr	r3, [pc, #140]	@ (80066a0 <USER_SPI_ioctl+0x2dc>)
 8006614:	781b      	ldrb	r3, [r3, #0]
 8006616:	f003 0308 	and.w	r3, r3, #8
 800661a:	2b00      	cmp	r3, #0
 800661c:	d105      	bne.n	800662a <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 800661e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006620:	025b      	lsls	r3, r3, #9
 8006622:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006624:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006626:	025b      	lsls	r3, r3, #9
 8006628:	627b      	str	r3, [r7, #36]	@ 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 800662a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800662c:	2020      	movs	r0, #32
 800662e:	f7ff fc76 	bl	8005f1e <send_cmd>
 8006632:	4603      	mov	r3, r0
 8006634:	2b00      	cmp	r3, #0
 8006636:	d128      	bne.n	800668a <USER_SPI_ioctl+0x2c6>
 8006638:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800663a:	2021      	movs	r0, #33	@ 0x21
 800663c:	f7ff fc6f 	bl	8005f1e <send_cmd>
 8006640:	4603      	mov	r3, r0
 8006642:	2b00      	cmp	r3, #0
 8006644:	d121      	bne.n	800668a <USER_SPI_ioctl+0x2c6>
 8006646:	2100      	movs	r1, #0
 8006648:	2026      	movs	r0, #38	@ 0x26
 800664a:	f7ff fc68 	bl	8005f1e <send_cmd>
 800664e:	4603      	mov	r3, r0
 8006650:	2b00      	cmp	r3, #0
 8006652:	d11a      	bne.n	800668a <USER_SPI_ioctl+0x2c6>
 8006654:	f247 5030 	movw	r0, #30000	@ 0x7530
 8006658:	f7ff fbba 	bl	8005dd0 <wait_ready>
 800665c:	4603      	mov	r3, r0
 800665e:	2b00      	cmp	r3, #0
 8006660:	d013      	beq.n	800668a <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 8006662:	2300      	movs	r3, #0
 8006664:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 8006668:	e00f      	b.n	800668a <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 800666a:	2304      	movs	r3, #4
 800666c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8006670:	e00c      	b.n	800668c <USER_SPI_ioctl+0x2c8>
		break;
 8006672:	bf00      	nop
 8006674:	e00a      	b.n	800668c <USER_SPI_ioctl+0x2c8>
		break;
 8006676:	bf00      	nop
 8006678:	e008      	b.n	800668c <USER_SPI_ioctl+0x2c8>
		break;
 800667a:	bf00      	nop
 800667c:	e006      	b.n	800668c <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800667e:	bf00      	nop
 8006680:	e004      	b.n	800668c <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8006682:	bf00      	nop
 8006684:	e002      	b.n	800668c <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8006686:	bf00      	nop
 8006688:	e000      	b.n	800668c <USER_SPI_ioctl+0x2c8>
		break;
 800668a:	bf00      	nop
	}

	despiselect();
 800668c:	f7ff fbc4 	bl	8005e18 <despiselect>

	return res;
 8006690:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8006694:	4618      	mov	r0, r3
 8006696:	3730      	adds	r7, #48	@ 0x30
 8006698:	46bd      	mov	sp, r7
 800669a:	bd80      	pop	{r7, pc}
 800669c:	2000002c 	.word	0x2000002c
 80066a0:	20000518 	.word	0x20000518

080066a4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b084      	sub	sp, #16
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	4603      	mov	r3, r0
 80066ac:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80066ae:	79fb      	ldrb	r3, [r7, #7]
 80066b0:	4a08      	ldr	r2, [pc, #32]	@ (80066d4 <disk_status+0x30>)
 80066b2:	009b      	lsls	r3, r3, #2
 80066b4:	4413      	add	r3, r2
 80066b6:	685b      	ldr	r3, [r3, #4]
 80066b8:	685b      	ldr	r3, [r3, #4]
 80066ba:	79fa      	ldrb	r2, [r7, #7]
 80066bc:	4905      	ldr	r1, [pc, #20]	@ (80066d4 <disk_status+0x30>)
 80066be:	440a      	add	r2, r1
 80066c0:	7a12      	ldrb	r2, [r2, #8]
 80066c2:	4610      	mov	r0, r2
 80066c4:	4798      	blx	r3
 80066c6:	4603      	mov	r3, r0
 80066c8:	73fb      	strb	r3, [r7, #15]
  return stat;
 80066ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80066cc:	4618      	mov	r0, r3
 80066ce:	3710      	adds	r7, #16
 80066d0:	46bd      	mov	sp, r7
 80066d2:	bd80      	pop	{r7, pc}
 80066d4:	2000054c 	.word	0x2000054c

080066d8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b084      	sub	sp, #16
 80066dc:	af00      	add	r7, sp, #0
 80066de:	4603      	mov	r3, r0
 80066e0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80066e2:	2300      	movs	r3, #0
 80066e4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80066e6:	79fb      	ldrb	r3, [r7, #7]
 80066e8:	4a0d      	ldr	r2, [pc, #52]	@ (8006720 <disk_initialize+0x48>)
 80066ea:	5cd3      	ldrb	r3, [r2, r3]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d111      	bne.n	8006714 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80066f0:	79fb      	ldrb	r3, [r7, #7]
 80066f2:	4a0b      	ldr	r2, [pc, #44]	@ (8006720 <disk_initialize+0x48>)
 80066f4:	2101      	movs	r1, #1
 80066f6:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80066f8:	79fb      	ldrb	r3, [r7, #7]
 80066fa:	4a09      	ldr	r2, [pc, #36]	@ (8006720 <disk_initialize+0x48>)
 80066fc:	009b      	lsls	r3, r3, #2
 80066fe:	4413      	add	r3, r2
 8006700:	685b      	ldr	r3, [r3, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	79fa      	ldrb	r2, [r7, #7]
 8006706:	4906      	ldr	r1, [pc, #24]	@ (8006720 <disk_initialize+0x48>)
 8006708:	440a      	add	r2, r1
 800670a:	7a12      	ldrb	r2, [r2, #8]
 800670c:	4610      	mov	r0, r2
 800670e:	4798      	blx	r3
 8006710:	4603      	mov	r3, r0
 8006712:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8006714:	7bfb      	ldrb	r3, [r7, #15]
}
 8006716:	4618      	mov	r0, r3
 8006718:	3710      	adds	r7, #16
 800671a:	46bd      	mov	sp, r7
 800671c:	bd80      	pop	{r7, pc}
 800671e:	bf00      	nop
 8006720:	2000054c 	.word	0x2000054c

08006724 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8006724:	b590      	push	{r4, r7, lr}
 8006726:	b087      	sub	sp, #28
 8006728:	af00      	add	r7, sp, #0
 800672a:	60b9      	str	r1, [r7, #8]
 800672c:	607a      	str	r2, [r7, #4]
 800672e:	603b      	str	r3, [r7, #0]
 8006730:	4603      	mov	r3, r0
 8006732:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8006734:	7bfb      	ldrb	r3, [r7, #15]
 8006736:	4a0a      	ldr	r2, [pc, #40]	@ (8006760 <disk_read+0x3c>)
 8006738:	009b      	lsls	r3, r3, #2
 800673a:	4413      	add	r3, r2
 800673c:	685b      	ldr	r3, [r3, #4]
 800673e:	689c      	ldr	r4, [r3, #8]
 8006740:	7bfb      	ldrb	r3, [r7, #15]
 8006742:	4a07      	ldr	r2, [pc, #28]	@ (8006760 <disk_read+0x3c>)
 8006744:	4413      	add	r3, r2
 8006746:	7a18      	ldrb	r0, [r3, #8]
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	687a      	ldr	r2, [r7, #4]
 800674c:	68b9      	ldr	r1, [r7, #8]
 800674e:	47a0      	blx	r4
 8006750:	4603      	mov	r3, r0
 8006752:	75fb      	strb	r3, [r7, #23]
  return res;
 8006754:	7dfb      	ldrb	r3, [r7, #23]
}
 8006756:	4618      	mov	r0, r3
 8006758:	371c      	adds	r7, #28
 800675a:	46bd      	mov	sp, r7
 800675c:	bd90      	pop	{r4, r7, pc}
 800675e:	bf00      	nop
 8006760:	2000054c 	.word	0x2000054c

08006764 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8006764:	b590      	push	{r4, r7, lr}
 8006766:	b087      	sub	sp, #28
 8006768:	af00      	add	r7, sp, #0
 800676a:	60b9      	str	r1, [r7, #8]
 800676c:	607a      	str	r2, [r7, #4]
 800676e:	603b      	str	r3, [r7, #0]
 8006770:	4603      	mov	r3, r0
 8006772:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8006774:	7bfb      	ldrb	r3, [r7, #15]
 8006776:	4a0a      	ldr	r2, [pc, #40]	@ (80067a0 <disk_write+0x3c>)
 8006778:	009b      	lsls	r3, r3, #2
 800677a:	4413      	add	r3, r2
 800677c:	685b      	ldr	r3, [r3, #4]
 800677e:	68dc      	ldr	r4, [r3, #12]
 8006780:	7bfb      	ldrb	r3, [r7, #15]
 8006782:	4a07      	ldr	r2, [pc, #28]	@ (80067a0 <disk_write+0x3c>)
 8006784:	4413      	add	r3, r2
 8006786:	7a18      	ldrb	r0, [r3, #8]
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	687a      	ldr	r2, [r7, #4]
 800678c:	68b9      	ldr	r1, [r7, #8]
 800678e:	47a0      	blx	r4
 8006790:	4603      	mov	r3, r0
 8006792:	75fb      	strb	r3, [r7, #23]
  return res;
 8006794:	7dfb      	ldrb	r3, [r7, #23]
}
 8006796:	4618      	mov	r0, r3
 8006798:	371c      	adds	r7, #28
 800679a:	46bd      	mov	sp, r7
 800679c:	bd90      	pop	{r4, r7, pc}
 800679e:	bf00      	nop
 80067a0:	2000054c 	.word	0x2000054c

080067a4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b084      	sub	sp, #16
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	4603      	mov	r3, r0
 80067ac:	603a      	str	r2, [r7, #0]
 80067ae:	71fb      	strb	r3, [r7, #7]
 80067b0:	460b      	mov	r3, r1
 80067b2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80067b4:	79fb      	ldrb	r3, [r7, #7]
 80067b6:	4a09      	ldr	r2, [pc, #36]	@ (80067dc <disk_ioctl+0x38>)
 80067b8:	009b      	lsls	r3, r3, #2
 80067ba:	4413      	add	r3, r2
 80067bc:	685b      	ldr	r3, [r3, #4]
 80067be:	691b      	ldr	r3, [r3, #16]
 80067c0:	79fa      	ldrb	r2, [r7, #7]
 80067c2:	4906      	ldr	r1, [pc, #24]	@ (80067dc <disk_ioctl+0x38>)
 80067c4:	440a      	add	r2, r1
 80067c6:	7a10      	ldrb	r0, [r2, #8]
 80067c8:	79b9      	ldrb	r1, [r7, #6]
 80067ca:	683a      	ldr	r2, [r7, #0]
 80067cc:	4798      	blx	r3
 80067ce:	4603      	mov	r3, r0
 80067d0:	73fb      	strb	r3, [r7, #15]
  return res;
 80067d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80067d4:	4618      	mov	r0, r3
 80067d6:	3710      	adds	r7, #16
 80067d8:	46bd      	mov	sp, r7
 80067da:	bd80      	pop	{r7, pc}
 80067dc:	2000054c 	.word	0x2000054c

080067e0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80067e0:	b480      	push	{r7}
 80067e2:	b085      	sub	sp, #20
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	3301      	adds	r3, #1
 80067ec:	781b      	ldrb	r3, [r3, #0]
 80067ee:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80067f0:	89fb      	ldrh	r3, [r7, #14]
 80067f2:	021b      	lsls	r3, r3, #8
 80067f4:	b21a      	sxth	r2, r3
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	781b      	ldrb	r3, [r3, #0]
 80067fa:	b21b      	sxth	r3, r3
 80067fc:	4313      	orrs	r3, r2
 80067fe:	b21b      	sxth	r3, r3
 8006800:	81fb      	strh	r3, [r7, #14]
	return rv;
 8006802:	89fb      	ldrh	r3, [r7, #14]
}
 8006804:	4618      	mov	r0, r3
 8006806:	3714      	adds	r7, #20
 8006808:	46bd      	mov	sp, r7
 800680a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680e:	4770      	bx	lr

08006810 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8006810:	b480      	push	{r7}
 8006812:	b085      	sub	sp, #20
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	3303      	adds	r3, #3
 800681c:	781b      	ldrb	r3, [r3, #0]
 800681e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	021b      	lsls	r3, r3, #8
 8006824:	687a      	ldr	r2, [r7, #4]
 8006826:	3202      	adds	r2, #2
 8006828:	7812      	ldrb	r2, [r2, #0]
 800682a:	4313      	orrs	r3, r2
 800682c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	021b      	lsls	r3, r3, #8
 8006832:	687a      	ldr	r2, [r7, #4]
 8006834:	3201      	adds	r2, #1
 8006836:	7812      	ldrb	r2, [r2, #0]
 8006838:	4313      	orrs	r3, r2
 800683a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	021b      	lsls	r3, r3, #8
 8006840:	687a      	ldr	r2, [r7, #4]
 8006842:	7812      	ldrb	r2, [r2, #0]
 8006844:	4313      	orrs	r3, r2
 8006846:	60fb      	str	r3, [r7, #12]
	return rv;
 8006848:	68fb      	ldr	r3, [r7, #12]
}
 800684a:	4618      	mov	r0, r3
 800684c:	3714      	adds	r7, #20
 800684e:	46bd      	mov	sp, r7
 8006850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006854:	4770      	bx	lr

08006856 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8006856:	b480      	push	{r7}
 8006858:	b083      	sub	sp, #12
 800685a:	af00      	add	r7, sp, #0
 800685c:	6078      	str	r0, [r7, #4]
 800685e:	460b      	mov	r3, r1
 8006860:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	1c5a      	adds	r2, r3, #1
 8006866:	607a      	str	r2, [r7, #4]
 8006868:	887a      	ldrh	r2, [r7, #2]
 800686a:	b2d2      	uxtb	r2, r2
 800686c:	701a      	strb	r2, [r3, #0]
 800686e:	887b      	ldrh	r3, [r7, #2]
 8006870:	0a1b      	lsrs	r3, r3, #8
 8006872:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	1c5a      	adds	r2, r3, #1
 8006878:	607a      	str	r2, [r7, #4]
 800687a:	887a      	ldrh	r2, [r7, #2]
 800687c:	b2d2      	uxtb	r2, r2
 800687e:	701a      	strb	r2, [r3, #0]
}
 8006880:	bf00      	nop
 8006882:	370c      	adds	r7, #12
 8006884:	46bd      	mov	sp, r7
 8006886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688a:	4770      	bx	lr

0800688c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800688c:	b480      	push	{r7}
 800688e:	b083      	sub	sp, #12
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
 8006894:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	1c5a      	adds	r2, r3, #1
 800689a:	607a      	str	r2, [r7, #4]
 800689c:	683a      	ldr	r2, [r7, #0]
 800689e:	b2d2      	uxtb	r2, r2
 80068a0:	701a      	strb	r2, [r3, #0]
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	0a1b      	lsrs	r3, r3, #8
 80068a6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	1c5a      	adds	r2, r3, #1
 80068ac:	607a      	str	r2, [r7, #4]
 80068ae:	683a      	ldr	r2, [r7, #0]
 80068b0:	b2d2      	uxtb	r2, r2
 80068b2:	701a      	strb	r2, [r3, #0]
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	0a1b      	lsrs	r3, r3, #8
 80068b8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	1c5a      	adds	r2, r3, #1
 80068be:	607a      	str	r2, [r7, #4]
 80068c0:	683a      	ldr	r2, [r7, #0]
 80068c2:	b2d2      	uxtb	r2, r2
 80068c4:	701a      	strb	r2, [r3, #0]
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	0a1b      	lsrs	r3, r3, #8
 80068ca:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	1c5a      	adds	r2, r3, #1
 80068d0:	607a      	str	r2, [r7, #4]
 80068d2:	683a      	ldr	r2, [r7, #0]
 80068d4:	b2d2      	uxtb	r2, r2
 80068d6:	701a      	strb	r2, [r3, #0]
}
 80068d8:	bf00      	nop
 80068da:	370c      	adds	r7, #12
 80068dc:	46bd      	mov	sp, r7
 80068de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e2:	4770      	bx	lr

080068e4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80068e4:	b480      	push	{r7}
 80068e6:	b087      	sub	sp, #28
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	60f8      	str	r0, [r7, #12]
 80068ec:	60b9      	str	r1, [r7, #8]
 80068ee:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80068f4:	68bb      	ldr	r3, [r7, #8]
 80068f6:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d00d      	beq.n	800691a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80068fe:	693a      	ldr	r2, [r7, #16]
 8006900:	1c53      	adds	r3, r2, #1
 8006902:	613b      	str	r3, [r7, #16]
 8006904:	697b      	ldr	r3, [r7, #20]
 8006906:	1c59      	adds	r1, r3, #1
 8006908:	6179      	str	r1, [r7, #20]
 800690a:	7812      	ldrb	r2, [r2, #0]
 800690c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	3b01      	subs	r3, #1
 8006912:	607b      	str	r3, [r7, #4]
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d1f1      	bne.n	80068fe <mem_cpy+0x1a>
	}
}
 800691a:	bf00      	nop
 800691c:	371c      	adds	r7, #28
 800691e:	46bd      	mov	sp, r7
 8006920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006924:	4770      	bx	lr

08006926 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8006926:	b480      	push	{r7}
 8006928:	b087      	sub	sp, #28
 800692a:	af00      	add	r7, sp, #0
 800692c:	60f8      	str	r0, [r7, #12]
 800692e:	60b9      	str	r1, [r7, #8]
 8006930:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8006936:	697b      	ldr	r3, [r7, #20]
 8006938:	1c5a      	adds	r2, r3, #1
 800693a:	617a      	str	r2, [r7, #20]
 800693c:	68ba      	ldr	r2, [r7, #8]
 800693e:	b2d2      	uxtb	r2, r2
 8006940:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	3b01      	subs	r3, #1
 8006946:	607b      	str	r3, [r7, #4]
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d1f3      	bne.n	8006936 <mem_set+0x10>
}
 800694e:	bf00      	nop
 8006950:	bf00      	nop
 8006952:	371c      	adds	r7, #28
 8006954:	46bd      	mov	sp, r7
 8006956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695a:	4770      	bx	lr

0800695c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800695c:	b480      	push	{r7}
 800695e:	b089      	sub	sp, #36	@ 0x24
 8006960:	af00      	add	r7, sp, #0
 8006962:	60f8      	str	r0, [r7, #12]
 8006964:	60b9      	str	r1, [r7, #8]
 8006966:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	61fb      	str	r3, [r7, #28]
 800696c:	68bb      	ldr	r3, [r7, #8]
 800696e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8006970:	2300      	movs	r3, #0
 8006972:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8006974:	69fb      	ldr	r3, [r7, #28]
 8006976:	1c5a      	adds	r2, r3, #1
 8006978:	61fa      	str	r2, [r7, #28]
 800697a:	781b      	ldrb	r3, [r3, #0]
 800697c:	4619      	mov	r1, r3
 800697e:	69bb      	ldr	r3, [r7, #24]
 8006980:	1c5a      	adds	r2, r3, #1
 8006982:	61ba      	str	r2, [r7, #24]
 8006984:	781b      	ldrb	r3, [r3, #0]
 8006986:	1acb      	subs	r3, r1, r3
 8006988:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	3b01      	subs	r3, #1
 800698e:	607b      	str	r3, [r7, #4]
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d002      	beq.n	800699c <mem_cmp+0x40>
 8006996:	697b      	ldr	r3, [r7, #20]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d0eb      	beq.n	8006974 <mem_cmp+0x18>

	return r;
 800699c:	697b      	ldr	r3, [r7, #20]
}
 800699e:	4618      	mov	r0, r3
 80069a0:	3724      	adds	r7, #36	@ 0x24
 80069a2:	46bd      	mov	sp, r7
 80069a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a8:	4770      	bx	lr

080069aa <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80069aa:	b480      	push	{r7}
 80069ac:	b083      	sub	sp, #12
 80069ae:	af00      	add	r7, sp, #0
 80069b0:	6078      	str	r0, [r7, #4]
 80069b2:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80069b4:	e002      	b.n	80069bc <chk_chr+0x12>
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	3301      	adds	r3, #1
 80069ba:	607b      	str	r3, [r7, #4]
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	781b      	ldrb	r3, [r3, #0]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d005      	beq.n	80069d0 <chk_chr+0x26>
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	781b      	ldrb	r3, [r3, #0]
 80069c8:	461a      	mov	r2, r3
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	4293      	cmp	r3, r2
 80069ce:	d1f2      	bne.n	80069b6 <chk_chr+0xc>
	return *str;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	781b      	ldrb	r3, [r3, #0]
}
 80069d4:	4618      	mov	r0, r3
 80069d6:	370c      	adds	r7, #12
 80069d8:	46bd      	mov	sp, r7
 80069da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069de:	4770      	bx	lr

080069e0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80069e0:	b480      	push	{r7}
 80069e2:	b085      	sub	sp, #20
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
 80069e8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80069ea:	2300      	movs	r3, #0
 80069ec:	60bb      	str	r3, [r7, #8]
 80069ee:	68bb      	ldr	r3, [r7, #8]
 80069f0:	60fb      	str	r3, [r7, #12]
 80069f2:	e029      	b.n	8006a48 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80069f4:	4a27      	ldr	r2, [pc, #156]	@ (8006a94 <chk_lock+0xb4>)
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	011b      	lsls	r3, r3, #4
 80069fa:	4413      	add	r3, r2
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d01d      	beq.n	8006a3e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006a02:	4a24      	ldr	r2, [pc, #144]	@ (8006a94 <chk_lock+0xb4>)
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	011b      	lsls	r3, r3, #4
 8006a08:	4413      	add	r3, r2
 8006a0a:	681a      	ldr	r2, [r3, #0]
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	429a      	cmp	r2, r3
 8006a12:	d116      	bne.n	8006a42 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8006a14:	4a1f      	ldr	r2, [pc, #124]	@ (8006a94 <chk_lock+0xb4>)
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	011b      	lsls	r3, r3, #4
 8006a1a:	4413      	add	r3, r2
 8006a1c:	3304      	adds	r3, #4
 8006a1e:	681a      	ldr	r2, [r3, #0]
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006a24:	429a      	cmp	r2, r3
 8006a26:	d10c      	bne.n	8006a42 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006a28:	4a1a      	ldr	r2, [pc, #104]	@ (8006a94 <chk_lock+0xb4>)
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	011b      	lsls	r3, r3, #4
 8006a2e:	4413      	add	r3, r2
 8006a30:	3308      	adds	r3, #8
 8006a32:	681a      	ldr	r2, [r3, #0]
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8006a38:	429a      	cmp	r2, r3
 8006a3a:	d102      	bne.n	8006a42 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006a3c:	e007      	b.n	8006a4e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8006a3e:	2301      	movs	r3, #1
 8006a40:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	3301      	adds	r3, #1
 8006a46:	60fb      	str	r3, [r7, #12]
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	2b01      	cmp	r3, #1
 8006a4c:	d9d2      	bls.n	80069f4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	2b02      	cmp	r3, #2
 8006a52:	d109      	bne.n	8006a68 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8006a54:	68bb      	ldr	r3, [r7, #8]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d102      	bne.n	8006a60 <chk_lock+0x80>
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	2b02      	cmp	r3, #2
 8006a5e:	d101      	bne.n	8006a64 <chk_lock+0x84>
 8006a60:	2300      	movs	r3, #0
 8006a62:	e010      	b.n	8006a86 <chk_lock+0xa6>
 8006a64:	2312      	movs	r3, #18
 8006a66:	e00e      	b.n	8006a86 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d108      	bne.n	8006a80 <chk_lock+0xa0>
 8006a6e:	4a09      	ldr	r2, [pc, #36]	@ (8006a94 <chk_lock+0xb4>)
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	011b      	lsls	r3, r3, #4
 8006a74:	4413      	add	r3, r2
 8006a76:	330c      	adds	r3, #12
 8006a78:	881b      	ldrh	r3, [r3, #0]
 8006a7a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006a7e:	d101      	bne.n	8006a84 <chk_lock+0xa4>
 8006a80:	2310      	movs	r3, #16
 8006a82:	e000      	b.n	8006a86 <chk_lock+0xa6>
 8006a84:	2300      	movs	r3, #0
}
 8006a86:	4618      	mov	r0, r3
 8006a88:	3714      	adds	r7, #20
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a90:	4770      	bx	lr
 8006a92:	bf00      	nop
 8006a94:	2000052c 	.word	0x2000052c

08006a98 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8006a98:	b480      	push	{r7}
 8006a9a:	b083      	sub	sp, #12
 8006a9c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	607b      	str	r3, [r7, #4]
 8006aa2:	e002      	b.n	8006aaa <enq_lock+0x12>
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	3301      	adds	r3, #1
 8006aa8:	607b      	str	r3, [r7, #4]
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	2b01      	cmp	r3, #1
 8006aae:	d806      	bhi.n	8006abe <enq_lock+0x26>
 8006ab0:	4a09      	ldr	r2, [pc, #36]	@ (8006ad8 <enq_lock+0x40>)
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	011b      	lsls	r3, r3, #4
 8006ab6:	4413      	add	r3, r2
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d1f2      	bne.n	8006aa4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	2b02      	cmp	r3, #2
 8006ac2:	bf14      	ite	ne
 8006ac4:	2301      	movne	r3, #1
 8006ac6:	2300      	moveq	r3, #0
 8006ac8:	b2db      	uxtb	r3, r3
}
 8006aca:	4618      	mov	r0, r3
 8006acc:	370c      	adds	r7, #12
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad4:	4770      	bx	lr
 8006ad6:	bf00      	nop
 8006ad8:	2000052c 	.word	0x2000052c

08006adc <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006adc:	b480      	push	{r7}
 8006ade:	b085      	sub	sp, #20
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
 8006ae4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	60fb      	str	r3, [r7, #12]
 8006aea:	e01f      	b.n	8006b2c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8006aec:	4a41      	ldr	r2, [pc, #260]	@ (8006bf4 <inc_lock+0x118>)
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	011b      	lsls	r3, r3, #4
 8006af2:	4413      	add	r3, r2
 8006af4:	681a      	ldr	r2, [r3, #0]
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	429a      	cmp	r2, r3
 8006afc:	d113      	bne.n	8006b26 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8006afe:	4a3d      	ldr	r2, [pc, #244]	@ (8006bf4 <inc_lock+0x118>)
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	011b      	lsls	r3, r3, #4
 8006b04:	4413      	add	r3, r2
 8006b06:	3304      	adds	r3, #4
 8006b08:	681a      	ldr	r2, [r3, #0]
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8006b0e:	429a      	cmp	r2, r3
 8006b10:	d109      	bne.n	8006b26 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8006b12:	4a38      	ldr	r2, [pc, #224]	@ (8006bf4 <inc_lock+0x118>)
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	011b      	lsls	r3, r3, #4
 8006b18:	4413      	add	r3, r2
 8006b1a:	3308      	adds	r3, #8
 8006b1c:	681a      	ldr	r2, [r3, #0]
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8006b22:	429a      	cmp	r2, r3
 8006b24:	d006      	beq.n	8006b34 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	3301      	adds	r3, #1
 8006b2a:	60fb      	str	r3, [r7, #12]
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	2b01      	cmp	r3, #1
 8006b30:	d9dc      	bls.n	8006aec <inc_lock+0x10>
 8006b32:	e000      	b.n	8006b36 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8006b34:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	2b02      	cmp	r3, #2
 8006b3a:	d132      	bne.n	8006ba2 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	60fb      	str	r3, [r7, #12]
 8006b40:	e002      	b.n	8006b48 <inc_lock+0x6c>
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	3301      	adds	r3, #1
 8006b46:	60fb      	str	r3, [r7, #12]
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	2b01      	cmp	r3, #1
 8006b4c:	d806      	bhi.n	8006b5c <inc_lock+0x80>
 8006b4e:	4a29      	ldr	r2, [pc, #164]	@ (8006bf4 <inc_lock+0x118>)
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	011b      	lsls	r3, r3, #4
 8006b54:	4413      	add	r3, r2
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d1f2      	bne.n	8006b42 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	2b02      	cmp	r3, #2
 8006b60:	d101      	bne.n	8006b66 <inc_lock+0x8a>
 8006b62:	2300      	movs	r3, #0
 8006b64:	e040      	b.n	8006be8 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681a      	ldr	r2, [r3, #0]
 8006b6a:	4922      	ldr	r1, [pc, #136]	@ (8006bf4 <inc_lock+0x118>)
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	011b      	lsls	r3, r3, #4
 8006b70:	440b      	add	r3, r1
 8006b72:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	689a      	ldr	r2, [r3, #8]
 8006b78:	491e      	ldr	r1, [pc, #120]	@ (8006bf4 <inc_lock+0x118>)
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	011b      	lsls	r3, r3, #4
 8006b7e:	440b      	add	r3, r1
 8006b80:	3304      	adds	r3, #4
 8006b82:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	695a      	ldr	r2, [r3, #20]
 8006b88:	491a      	ldr	r1, [pc, #104]	@ (8006bf4 <inc_lock+0x118>)
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	011b      	lsls	r3, r3, #4
 8006b8e:	440b      	add	r3, r1
 8006b90:	3308      	adds	r3, #8
 8006b92:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8006b94:	4a17      	ldr	r2, [pc, #92]	@ (8006bf4 <inc_lock+0x118>)
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	011b      	lsls	r3, r3, #4
 8006b9a:	4413      	add	r3, r2
 8006b9c:	330c      	adds	r3, #12
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d009      	beq.n	8006bbc <inc_lock+0xe0>
 8006ba8:	4a12      	ldr	r2, [pc, #72]	@ (8006bf4 <inc_lock+0x118>)
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	011b      	lsls	r3, r3, #4
 8006bae:	4413      	add	r3, r2
 8006bb0:	330c      	adds	r3, #12
 8006bb2:	881b      	ldrh	r3, [r3, #0]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d001      	beq.n	8006bbc <inc_lock+0xe0>
 8006bb8:	2300      	movs	r3, #0
 8006bba:	e015      	b.n	8006be8 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d108      	bne.n	8006bd4 <inc_lock+0xf8>
 8006bc2:	4a0c      	ldr	r2, [pc, #48]	@ (8006bf4 <inc_lock+0x118>)
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	011b      	lsls	r3, r3, #4
 8006bc8:	4413      	add	r3, r2
 8006bca:	330c      	adds	r3, #12
 8006bcc:	881b      	ldrh	r3, [r3, #0]
 8006bce:	3301      	adds	r3, #1
 8006bd0:	b29a      	uxth	r2, r3
 8006bd2:	e001      	b.n	8006bd8 <inc_lock+0xfc>
 8006bd4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006bd8:	4906      	ldr	r1, [pc, #24]	@ (8006bf4 <inc_lock+0x118>)
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	011b      	lsls	r3, r3, #4
 8006bde:	440b      	add	r3, r1
 8006be0:	330c      	adds	r3, #12
 8006be2:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	3301      	adds	r3, #1
}
 8006be8:	4618      	mov	r0, r3
 8006bea:	3714      	adds	r7, #20
 8006bec:	46bd      	mov	sp, r7
 8006bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf2:	4770      	bx	lr
 8006bf4:	2000052c 	.word	0x2000052c

08006bf8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8006bf8:	b480      	push	{r7}
 8006bfa:	b085      	sub	sp, #20
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	3b01      	subs	r3, #1
 8006c04:	607b      	str	r3, [r7, #4]
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2b01      	cmp	r3, #1
 8006c0a:	d825      	bhi.n	8006c58 <dec_lock+0x60>
		n = Files[i].ctr;
 8006c0c:	4a17      	ldr	r2, [pc, #92]	@ (8006c6c <dec_lock+0x74>)
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	011b      	lsls	r3, r3, #4
 8006c12:	4413      	add	r3, r2
 8006c14:	330c      	adds	r3, #12
 8006c16:	881b      	ldrh	r3, [r3, #0]
 8006c18:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8006c1a:	89fb      	ldrh	r3, [r7, #14]
 8006c1c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006c20:	d101      	bne.n	8006c26 <dec_lock+0x2e>
 8006c22:	2300      	movs	r3, #0
 8006c24:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8006c26:	89fb      	ldrh	r3, [r7, #14]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d002      	beq.n	8006c32 <dec_lock+0x3a>
 8006c2c:	89fb      	ldrh	r3, [r7, #14]
 8006c2e:	3b01      	subs	r3, #1
 8006c30:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8006c32:	4a0e      	ldr	r2, [pc, #56]	@ (8006c6c <dec_lock+0x74>)
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	011b      	lsls	r3, r3, #4
 8006c38:	4413      	add	r3, r2
 8006c3a:	330c      	adds	r3, #12
 8006c3c:	89fa      	ldrh	r2, [r7, #14]
 8006c3e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8006c40:	89fb      	ldrh	r3, [r7, #14]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d105      	bne.n	8006c52 <dec_lock+0x5a>
 8006c46:	4a09      	ldr	r2, [pc, #36]	@ (8006c6c <dec_lock+0x74>)
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	011b      	lsls	r3, r3, #4
 8006c4c:	4413      	add	r3, r2
 8006c4e:	2200      	movs	r2, #0
 8006c50:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8006c52:	2300      	movs	r3, #0
 8006c54:	737b      	strb	r3, [r7, #13]
 8006c56:	e001      	b.n	8006c5c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8006c58:	2302      	movs	r3, #2
 8006c5a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8006c5c:	7b7b      	ldrb	r3, [r7, #13]
}
 8006c5e:	4618      	mov	r0, r3
 8006c60:	3714      	adds	r7, #20
 8006c62:	46bd      	mov	sp, r7
 8006c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c68:	4770      	bx	lr
 8006c6a:	bf00      	nop
 8006c6c:	2000052c 	.word	0x2000052c

08006c70 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8006c70:	b480      	push	{r7}
 8006c72:	b085      	sub	sp, #20
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8006c78:	2300      	movs	r3, #0
 8006c7a:	60fb      	str	r3, [r7, #12]
 8006c7c:	e010      	b.n	8006ca0 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8006c7e:	4a0d      	ldr	r2, [pc, #52]	@ (8006cb4 <clear_lock+0x44>)
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	011b      	lsls	r3, r3, #4
 8006c84:	4413      	add	r3, r2
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	687a      	ldr	r2, [r7, #4]
 8006c8a:	429a      	cmp	r2, r3
 8006c8c:	d105      	bne.n	8006c9a <clear_lock+0x2a>
 8006c8e:	4a09      	ldr	r2, [pc, #36]	@ (8006cb4 <clear_lock+0x44>)
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	011b      	lsls	r3, r3, #4
 8006c94:	4413      	add	r3, r2
 8006c96:	2200      	movs	r2, #0
 8006c98:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	3301      	adds	r3, #1
 8006c9e:	60fb      	str	r3, [r7, #12]
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	2b01      	cmp	r3, #1
 8006ca4:	d9eb      	bls.n	8006c7e <clear_lock+0xe>
	}
}
 8006ca6:	bf00      	nop
 8006ca8:	bf00      	nop
 8006caa:	3714      	adds	r7, #20
 8006cac:	46bd      	mov	sp, r7
 8006cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb2:	4770      	bx	lr
 8006cb4:	2000052c 	.word	0x2000052c

08006cb8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b086      	sub	sp, #24
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	78db      	ldrb	r3, [r3, #3]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d034      	beq.n	8006d36 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cd0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	7858      	ldrb	r0, [r3, #1]
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8006cdc:	2301      	movs	r3, #1
 8006cde:	697a      	ldr	r2, [r7, #20]
 8006ce0:	f7ff fd40 	bl	8006764 <disk_write>
 8006ce4:	4603      	mov	r3, r0
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d002      	beq.n	8006cf0 <sync_window+0x38>
			res = FR_DISK_ERR;
 8006cea:	2301      	movs	r3, #1
 8006cec:	73fb      	strb	r3, [r7, #15]
 8006cee:	e022      	b.n	8006d36 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	6a1b      	ldr	r3, [r3, #32]
 8006cfa:	697a      	ldr	r2, [r7, #20]
 8006cfc:	1ad2      	subs	r2, r2, r3
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	699b      	ldr	r3, [r3, #24]
 8006d02:	429a      	cmp	r2, r3
 8006d04:	d217      	bcs.n	8006d36 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	789b      	ldrb	r3, [r3, #2]
 8006d0a:	613b      	str	r3, [r7, #16]
 8006d0c:	e010      	b.n	8006d30 <sync_window+0x78>
					wsect += fs->fsize;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	699b      	ldr	r3, [r3, #24]
 8006d12:	697a      	ldr	r2, [r7, #20]
 8006d14:	4413      	add	r3, r2
 8006d16:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	7858      	ldrb	r0, [r3, #1]
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8006d22:	2301      	movs	r3, #1
 8006d24:	697a      	ldr	r2, [r7, #20]
 8006d26:	f7ff fd1d 	bl	8006764 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006d2a:	693b      	ldr	r3, [r7, #16]
 8006d2c:	3b01      	subs	r3, #1
 8006d2e:	613b      	str	r3, [r7, #16]
 8006d30:	693b      	ldr	r3, [r7, #16]
 8006d32:	2b01      	cmp	r3, #1
 8006d34:	d8eb      	bhi.n	8006d0e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8006d36:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d38:	4618      	mov	r0, r3
 8006d3a:	3718      	adds	r7, #24
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	bd80      	pop	{r7, pc}

08006d40 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b084      	sub	sp, #16
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
 8006d48:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d52:	683a      	ldr	r2, [r7, #0]
 8006d54:	429a      	cmp	r2, r3
 8006d56:	d01b      	beq.n	8006d90 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8006d58:	6878      	ldr	r0, [r7, #4]
 8006d5a:	f7ff ffad 	bl	8006cb8 <sync_window>
 8006d5e:	4603      	mov	r3, r0
 8006d60:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8006d62:	7bfb      	ldrb	r3, [r7, #15]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d113      	bne.n	8006d90 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	7858      	ldrb	r0, [r3, #1]
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8006d72:	2301      	movs	r3, #1
 8006d74:	683a      	ldr	r2, [r7, #0]
 8006d76:	f7ff fcd5 	bl	8006724 <disk_read>
 8006d7a:	4603      	mov	r3, r0
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d004      	beq.n	8006d8a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8006d80:	f04f 33ff 	mov.w	r3, #4294967295
 8006d84:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8006d86:	2301      	movs	r3, #1
 8006d88:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	683a      	ldr	r2, [r7, #0]
 8006d8e:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 8006d90:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d92:	4618      	mov	r0, r3
 8006d94:	3710      	adds	r7, #16
 8006d96:	46bd      	mov	sp, r7
 8006d98:	bd80      	pop	{r7, pc}
	...

08006d9c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	b084      	sub	sp, #16
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8006da4:	6878      	ldr	r0, [r7, #4]
 8006da6:	f7ff ff87 	bl	8006cb8 <sync_window>
 8006daa:	4603      	mov	r3, r0
 8006dac:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8006dae:	7bfb      	ldrb	r3, [r7, #15]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d158      	bne.n	8006e66 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	781b      	ldrb	r3, [r3, #0]
 8006db8:	2b03      	cmp	r3, #3
 8006dba:	d148      	bne.n	8006e4e <sync_fs+0xb2>
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	791b      	ldrb	r3, [r3, #4]
 8006dc0:	2b01      	cmp	r3, #1
 8006dc2:	d144      	bne.n	8006e4e <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	3330      	adds	r3, #48	@ 0x30
 8006dc8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006dcc:	2100      	movs	r1, #0
 8006dce:	4618      	mov	r0, r3
 8006dd0:	f7ff fda9 	bl	8006926 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	3330      	adds	r3, #48	@ 0x30
 8006dd8:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8006ddc:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8006de0:	4618      	mov	r0, r3
 8006de2:	f7ff fd38 	bl	8006856 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	3330      	adds	r3, #48	@ 0x30
 8006dea:	4921      	ldr	r1, [pc, #132]	@ (8006e70 <sync_fs+0xd4>)
 8006dec:	4618      	mov	r0, r3
 8006dee:	f7ff fd4d 	bl	800688c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	3330      	adds	r3, #48	@ 0x30
 8006df6:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8006dfa:	491e      	ldr	r1, [pc, #120]	@ (8006e74 <sync_fs+0xd8>)
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	f7ff fd45 	bl	800688c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	3330      	adds	r3, #48	@ 0x30
 8006e06:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	691b      	ldr	r3, [r3, #16]
 8006e0e:	4619      	mov	r1, r3
 8006e10:	4610      	mov	r0, r2
 8006e12:	f7ff fd3b 	bl	800688c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	3330      	adds	r3, #48	@ 0x30
 8006e1a:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	68db      	ldr	r3, [r3, #12]
 8006e22:	4619      	mov	r1, r3
 8006e24:	4610      	mov	r0, r2
 8006e26:	f7ff fd31 	bl	800688c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	69db      	ldr	r3, [r3, #28]
 8006e2e:	1c5a      	adds	r2, r3, #1
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	7858      	ldrb	r0, [r3, #1]
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e42:	2301      	movs	r3, #1
 8006e44:	f7ff fc8e 	bl	8006764 <disk_write>
			fs->fsi_flag = 0;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	785b      	ldrb	r3, [r3, #1]
 8006e52:	2200      	movs	r2, #0
 8006e54:	2100      	movs	r1, #0
 8006e56:	4618      	mov	r0, r3
 8006e58:	f7ff fca4 	bl	80067a4 <disk_ioctl>
 8006e5c:	4603      	mov	r3, r0
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d001      	beq.n	8006e66 <sync_fs+0xca>
 8006e62:	2301      	movs	r3, #1
 8006e64:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8006e66:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e68:	4618      	mov	r0, r3
 8006e6a:	3710      	adds	r7, #16
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	bd80      	pop	{r7, pc}
 8006e70:	41615252 	.word	0x41615252
 8006e74:	61417272 	.word	0x61417272

08006e78 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8006e78:	b480      	push	{r7}
 8006e7a:	b083      	sub	sp, #12
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
 8006e80:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	3b02      	subs	r3, #2
 8006e86:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	695b      	ldr	r3, [r3, #20]
 8006e8c:	3b02      	subs	r3, #2
 8006e8e:	683a      	ldr	r2, [r7, #0]
 8006e90:	429a      	cmp	r2, r3
 8006e92:	d301      	bcc.n	8006e98 <clust2sect+0x20>
 8006e94:	2300      	movs	r3, #0
 8006e96:	e008      	b.n	8006eaa <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	895b      	ldrh	r3, [r3, #10]
 8006e9c:	461a      	mov	r2, r3
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	fb03 f202 	mul.w	r2, r3, r2
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ea8:	4413      	add	r3, r2
}
 8006eaa:	4618      	mov	r0, r3
 8006eac:	370c      	adds	r7, #12
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb4:	4770      	bx	lr

08006eb6 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8006eb6:	b580      	push	{r7, lr}
 8006eb8:	b086      	sub	sp, #24
 8006eba:	af00      	add	r7, sp, #0
 8006ebc:	6078      	str	r0, [r7, #4]
 8006ebe:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	2b01      	cmp	r3, #1
 8006eca:	d904      	bls.n	8006ed6 <get_fat+0x20>
 8006ecc:	693b      	ldr	r3, [r7, #16]
 8006ece:	695b      	ldr	r3, [r3, #20]
 8006ed0:	683a      	ldr	r2, [r7, #0]
 8006ed2:	429a      	cmp	r2, r3
 8006ed4:	d302      	bcc.n	8006edc <get_fat+0x26>
		val = 1;	/* Internal error */
 8006ed6:	2301      	movs	r3, #1
 8006ed8:	617b      	str	r3, [r7, #20]
 8006eda:	e08e      	b.n	8006ffa <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8006edc:	f04f 33ff 	mov.w	r3, #4294967295
 8006ee0:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8006ee2:	693b      	ldr	r3, [r7, #16]
 8006ee4:	781b      	ldrb	r3, [r3, #0]
 8006ee6:	2b03      	cmp	r3, #3
 8006ee8:	d061      	beq.n	8006fae <get_fat+0xf8>
 8006eea:	2b03      	cmp	r3, #3
 8006eec:	dc7b      	bgt.n	8006fe6 <get_fat+0x130>
 8006eee:	2b01      	cmp	r3, #1
 8006ef0:	d002      	beq.n	8006ef8 <get_fat+0x42>
 8006ef2:	2b02      	cmp	r3, #2
 8006ef4:	d041      	beq.n	8006f7a <get_fat+0xc4>
 8006ef6:	e076      	b.n	8006fe6 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	60fb      	str	r3, [r7, #12]
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	085b      	lsrs	r3, r3, #1
 8006f00:	68fa      	ldr	r2, [r7, #12]
 8006f02:	4413      	add	r3, r2
 8006f04:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006f06:	693b      	ldr	r3, [r7, #16]
 8006f08:	6a1a      	ldr	r2, [r3, #32]
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	0a5b      	lsrs	r3, r3, #9
 8006f0e:	4413      	add	r3, r2
 8006f10:	4619      	mov	r1, r3
 8006f12:	6938      	ldr	r0, [r7, #16]
 8006f14:	f7ff ff14 	bl	8006d40 <move_window>
 8006f18:	4603      	mov	r3, r0
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d166      	bne.n	8006fec <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	1c5a      	adds	r2, r3, #1
 8006f22:	60fa      	str	r2, [r7, #12]
 8006f24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f28:	693a      	ldr	r2, [r7, #16]
 8006f2a:	4413      	add	r3, r2
 8006f2c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006f30:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006f32:	693b      	ldr	r3, [r7, #16]
 8006f34:	6a1a      	ldr	r2, [r3, #32]
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	0a5b      	lsrs	r3, r3, #9
 8006f3a:	4413      	add	r3, r2
 8006f3c:	4619      	mov	r1, r3
 8006f3e:	6938      	ldr	r0, [r7, #16]
 8006f40:	f7ff fefe 	bl	8006d40 <move_window>
 8006f44:	4603      	mov	r3, r0
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d152      	bne.n	8006ff0 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f50:	693a      	ldr	r2, [r7, #16]
 8006f52:	4413      	add	r3, r2
 8006f54:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006f58:	021b      	lsls	r3, r3, #8
 8006f5a:	68ba      	ldr	r2, [r7, #8]
 8006f5c:	4313      	orrs	r3, r2
 8006f5e:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	f003 0301 	and.w	r3, r3, #1
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d002      	beq.n	8006f70 <get_fat+0xba>
 8006f6a:	68bb      	ldr	r3, [r7, #8]
 8006f6c:	091b      	lsrs	r3, r3, #4
 8006f6e:	e002      	b.n	8006f76 <get_fat+0xc0>
 8006f70:	68bb      	ldr	r3, [r7, #8]
 8006f72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006f76:	617b      	str	r3, [r7, #20]
			break;
 8006f78:	e03f      	b.n	8006ffa <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006f7a:	693b      	ldr	r3, [r7, #16]
 8006f7c:	6a1a      	ldr	r2, [r3, #32]
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	0a1b      	lsrs	r3, r3, #8
 8006f82:	4413      	add	r3, r2
 8006f84:	4619      	mov	r1, r3
 8006f86:	6938      	ldr	r0, [r7, #16]
 8006f88:	f7ff feda 	bl	8006d40 <move_window>
 8006f8c:	4603      	mov	r3, r0
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d130      	bne.n	8006ff4 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8006f92:	693b      	ldr	r3, [r7, #16]
 8006f94:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	005b      	lsls	r3, r3, #1
 8006f9c:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8006fa0:	4413      	add	r3, r2
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	f7ff fc1c 	bl	80067e0 <ld_word>
 8006fa8:	4603      	mov	r3, r0
 8006faa:	617b      	str	r3, [r7, #20]
			break;
 8006fac:	e025      	b.n	8006ffa <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006fae:	693b      	ldr	r3, [r7, #16]
 8006fb0:	6a1a      	ldr	r2, [r3, #32]
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	09db      	lsrs	r3, r3, #7
 8006fb6:	4413      	add	r3, r2
 8006fb8:	4619      	mov	r1, r3
 8006fba:	6938      	ldr	r0, [r7, #16]
 8006fbc:	f7ff fec0 	bl	8006d40 <move_window>
 8006fc0:	4603      	mov	r3, r0
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d118      	bne.n	8006ff8 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8006fc6:	693b      	ldr	r3, [r7, #16]
 8006fc8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	009b      	lsls	r3, r3, #2
 8006fd0:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8006fd4:	4413      	add	r3, r2
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	f7ff fc1a 	bl	8006810 <ld_dword>
 8006fdc:	4603      	mov	r3, r0
 8006fde:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8006fe2:	617b      	str	r3, [r7, #20]
			break;
 8006fe4:	e009      	b.n	8006ffa <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8006fe6:	2301      	movs	r3, #1
 8006fe8:	617b      	str	r3, [r7, #20]
 8006fea:	e006      	b.n	8006ffa <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006fec:	bf00      	nop
 8006fee:	e004      	b.n	8006ffa <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006ff0:	bf00      	nop
 8006ff2:	e002      	b.n	8006ffa <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006ff4:	bf00      	nop
 8006ff6:	e000      	b.n	8006ffa <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006ff8:	bf00      	nop
		}
	}

	return val;
 8006ffa:	697b      	ldr	r3, [r7, #20]
}
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	3718      	adds	r7, #24
 8007000:	46bd      	mov	sp, r7
 8007002:	bd80      	pop	{r7, pc}

08007004 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8007004:	b590      	push	{r4, r7, lr}
 8007006:	b089      	sub	sp, #36	@ 0x24
 8007008:	af00      	add	r7, sp, #0
 800700a:	60f8      	str	r0, [r7, #12]
 800700c:	60b9      	str	r1, [r7, #8]
 800700e:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8007010:	2302      	movs	r3, #2
 8007012:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8007014:	68bb      	ldr	r3, [r7, #8]
 8007016:	2b01      	cmp	r3, #1
 8007018:	f240 80d9 	bls.w	80071ce <put_fat+0x1ca>
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	695b      	ldr	r3, [r3, #20]
 8007020:	68ba      	ldr	r2, [r7, #8]
 8007022:	429a      	cmp	r2, r3
 8007024:	f080 80d3 	bcs.w	80071ce <put_fat+0x1ca>
		switch (fs->fs_type) {
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	781b      	ldrb	r3, [r3, #0]
 800702c:	2b03      	cmp	r3, #3
 800702e:	f000 8096 	beq.w	800715e <put_fat+0x15a>
 8007032:	2b03      	cmp	r3, #3
 8007034:	f300 80cb 	bgt.w	80071ce <put_fat+0x1ca>
 8007038:	2b01      	cmp	r3, #1
 800703a:	d002      	beq.n	8007042 <put_fat+0x3e>
 800703c:	2b02      	cmp	r3, #2
 800703e:	d06e      	beq.n	800711e <put_fat+0x11a>
 8007040:	e0c5      	b.n	80071ce <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8007042:	68bb      	ldr	r3, [r7, #8]
 8007044:	61bb      	str	r3, [r7, #24]
 8007046:	69bb      	ldr	r3, [r7, #24]
 8007048:	085b      	lsrs	r3, r3, #1
 800704a:	69ba      	ldr	r2, [r7, #24]
 800704c:	4413      	add	r3, r2
 800704e:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	6a1a      	ldr	r2, [r3, #32]
 8007054:	69bb      	ldr	r3, [r7, #24]
 8007056:	0a5b      	lsrs	r3, r3, #9
 8007058:	4413      	add	r3, r2
 800705a:	4619      	mov	r1, r3
 800705c:	68f8      	ldr	r0, [r7, #12]
 800705e:	f7ff fe6f 	bl	8006d40 <move_window>
 8007062:	4603      	mov	r3, r0
 8007064:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007066:	7ffb      	ldrb	r3, [r7, #31]
 8007068:	2b00      	cmp	r3, #0
 800706a:	f040 80a9 	bne.w	80071c0 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007074:	69bb      	ldr	r3, [r7, #24]
 8007076:	1c59      	adds	r1, r3, #1
 8007078:	61b9      	str	r1, [r7, #24]
 800707a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800707e:	4413      	add	r3, r2
 8007080:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8007082:	68bb      	ldr	r3, [r7, #8]
 8007084:	f003 0301 	and.w	r3, r3, #1
 8007088:	2b00      	cmp	r3, #0
 800708a:	d00d      	beq.n	80070a8 <put_fat+0xa4>
 800708c:	697b      	ldr	r3, [r7, #20]
 800708e:	781b      	ldrb	r3, [r3, #0]
 8007090:	b25b      	sxtb	r3, r3
 8007092:	f003 030f 	and.w	r3, r3, #15
 8007096:	b25a      	sxtb	r2, r3
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	b2db      	uxtb	r3, r3
 800709c:	011b      	lsls	r3, r3, #4
 800709e:	b25b      	sxtb	r3, r3
 80070a0:	4313      	orrs	r3, r2
 80070a2:	b25b      	sxtb	r3, r3
 80070a4:	b2db      	uxtb	r3, r3
 80070a6:	e001      	b.n	80070ac <put_fat+0xa8>
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	b2db      	uxtb	r3, r3
 80070ac:	697a      	ldr	r2, [r7, #20]
 80070ae:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	2201      	movs	r2, #1
 80070b4:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	6a1a      	ldr	r2, [r3, #32]
 80070ba:	69bb      	ldr	r3, [r7, #24]
 80070bc:	0a5b      	lsrs	r3, r3, #9
 80070be:	4413      	add	r3, r2
 80070c0:	4619      	mov	r1, r3
 80070c2:	68f8      	ldr	r0, [r7, #12]
 80070c4:	f7ff fe3c 	bl	8006d40 <move_window>
 80070c8:	4603      	mov	r3, r0
 80070ca:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80070cc:	7ffb      	ldrb	r3, [r7, #31]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d178      	bne.n	80071c4 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80070d8:	69bb      	ldr	r3, [r7, #24]
 80070da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070de:	4413      	add	r3, r2
 80070e0:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80070e2:	68bb      	ldr	r3, [r7, #8]
 80070e4:	f003 0301 	and.w	r3, r3, #1
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d003      	beq.n	80070f4 <put_fat+0xf0>
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	091b      	lsrs	r3, r3, #4
 80070f0:	b2db      	uxtb	r3, r3
 80070f2:	e00e      	b.n	8007112 <put_fat+0x10e>
 80070f4:	697b      	ldr	r3, [r7, #20]
 80070f6:	781b      	ldrb	r3, [r3, #0]
 80070f8:	b25b      	sxtb	r3, r3
 80070fa:	f023 030f 	bic.w	r3, r3, #15
 80070fe:	b25a      	sxtb	r2, r3
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	0a1b      	lsrs	r3, r3, #8
 8007104:	b25b      	sxtb	r3, r3
 8007106:	f003 030f 	and.w	r3, r3, #15
 800710a:	b25b      	sxtb	r3, r3
 800710c:	4313      	orrs	r3, r2
 800710e:	b25b      	sxtb	r3, r3
 8007110:	b2db      	uxtb	r3, r3
 8007112:	697a      	ldr	r2, [r7, #20]
 8007114:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	2201      	movs	r2, #1
 800711a:	70da      	strb	r2, [r3, #3]
			break;
 800711c:	e057      	b.n	80071ce <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	6a1a      	ldr	r2, [r3, #32]
 8007122:	68bb      	ldr	r3, [r7, #8]
 8007124:	0a1b      	lsrs	r3, r3, #8
 8007126:	4413      	add	r3, r2
 8007128:	4619      	mov	r1, r3
 800712a:	68f8      	ldr	r0, [r7, #12]
 800712c:	f7ff fe08 	bl	8006d40 <move_window>
 8007130:	4603      	mov	r3, r0
 8007132:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007134:	7ffb      	ldrb	r3, [r7, #31]
 8007136:	2b00      	cmp	r3, #0
 8007138:	d146      	bne.n	80071c8 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007140:	68bb      	ldr	r3, [r7, #8]
 8007142:	005b      	lsls	r3, r3, #1
 8007144:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8007148:	4413      	add	r3, r2
 800714a:	687a      	ldr	r2, [r7, #4]
 800714c:	b292      	uxth	r2, r2
 800714e:	4611      	mov	r1, r2
 8007150:	4618      	mov	r0, r3
 8007152:	f7ff fb80 	bl	8006856 <st_word>
			fs->wflag = 1;
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	2201      	movs	r2, #1
 800715a:	70da      	strb	r2, [r3, #3]
			break;
 800715c:	e037      	b.n	80071ce <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	6a1a      	ldr	r2, [r3, #32]
 8007162:	68bb      	ldr	r3, [r7, #8]
 8007164:	09db      	lsrs	r3, r3, #7
 8007166:	4413      	add	r3, r2
 8007168:	4619      	mov	r1, r3
 800716a:	68f8      	ldr	r0, [r7, #12]
 800716c:	f7ff fde8 	bl	8006d40 <move_window>
 8007170:	4603      	mov	r3, r0
 8007172:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007174:	7ffb      	ldrb	r3, [r7, #31]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d128      	bne.n	80071cc <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007186:	68bb      	ldr	r3, [r7, #8]
 8007188:	009b      	lsls	r3, r3, #2
 800718a:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800718e:	4413      	add	r3, r2
 8007190:	4618      	mov	r0, r3
 8007192:	f7ff fb3d 	bl	8006810 <ld_dword>
 8007196:	4603      	mov	r3, r0
 8007198:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800719c:	4323      	orrs	r3, r4
 800719e:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80071a6:	68bb      	ldr	r3, [r7, #8]
 80071a8:	009b      	lsls	r3, r3, #2
 80071aa:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 80071ae:	4413      	add	r3, r2
 80071b0:	6879      	ldr	r1, [r7, #4]
 80071b2:	4618      	mov	r0, r3
 80071b4:	f7ff fb6a 	bl	800688c <st_dword>
			fs->wflag = 1;
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	2201      	movs	r2, #1
 80071bc:	70da      	strb	r2, [r3, #3]
			break;
 80071be:	e006      	b.n	80071ce <put_fat+0x1ca>
			if (res != FR_OK) break;
 80071c0:	bf00      	nop
 80071c2:	e004      	b.n	80071ce <put_fat+0x1ca>
			if (res != FR_OK) break;
 80071c4:	bf00      	nop
 80071c6:	e002      	b.n	80071ce <put_fat+0x1ca>
			if (res != FR_OK) break;
 80071c8:	bf00      	nop
 80071ca:	e000      	b.n	80071ce <put_fat+0x1ca>
			if (res != FR_OK) break;
 80071cc:	bf00      	nop
		}
	}
	return res;
 80071ce:	7ffb      	ldrb	r3, [r7, #31]
}
 80071d0:	4618      	mov	r0, r3
 80071d2:	3724      	adds	r7, #36	@ 0x24
 80071d4:	46bd      	mov	sp, r7
 80071d6:	bd90      	pop	{r4, r7, pc}

080071d8 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b088      	sub	sp, #32
 80071dc:	af00      	add	r7, sp, #0
 80071de:	60f8      	str	r0, [r7, #12]
 80071e0:	60b9      	str	r1, [r7, #8]
 80071e2:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80071e4:	2300      	movs	r3, #0
 80071e6:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80071ee:	68bb      	ldr	r3, [r7, #8]
 80071f0:	2b01      	cmp	r3, #1
 80071f2:	d904      	bls.n	80071fe <remove_chain+0x26>
 80071f4:	69bb      	ldr	r3, [r7, #24]
 80071f6:	695b      	ldr	r3, [r3, #20]
 80071f8:	68ba      	ldr	r2, [r7, #8]
 80071fa:	429a      	cmp	r2, r3
 80071fc:	d301      	bcc.n	8007202 <remove_chain+0x2a>
 80071fe:	2302      	movs	r3, #2
 8007200:	e04b      	b.n	800729a <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d00c      	beq.n	8007222 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8007208:	f04f 32ff 	mov.w	r2, #4294967295
 800720c:	6879      	ldr	r1, [r7, #4]
 800720e:	69b8      	ldr	r0, [r7, #24]
 8007210:	f7ff fef8 	bl	8007004 <put_fat>
 8007214:	4603      	mov	r3, r0
 8007216:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8007218:	7ffb      	ldrb	r3, [r7, #31]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d001      	beq.n	8007222 <remove_chain+0x4a>
 800721e:	7ffb      	ldrb	r3, [r7, #31]
 8007220:	e03b      	b.n	800729a <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8007222:	68b9      	ldr	r1, [r7, #8]
 8007224:	68f8      	ldr	r0, [r7, #12]
 8007226:	f7ff fe46 	bl	8006eb6 <get_fat>
 800722a:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800722c:	697b      	ldr	r3, [r7, #20]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d031      	beq.n	8007296 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8007232:	697b      	ldr	r3, [r7, #20]
 8007234:	2b01      	cmp	r3, #1
 8007236:	d101      	bne.n	800723c <remove_chain+0x64>
 8007238:	2302      	movs	r3, #2
 800723a:	e02e      	b.n	800729a <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800723c:	697b      	ldr	r3, [r7, #20]
 800723e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007242:	d101      	bne.n	8007248 <remove_chain+0x70>
 8007244:	2301      	movs	r3, #1
 8007246:	e028      	b.n	800729a <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8007248:	2200      	movs	r2, #0
 800724a:	68b9      	ldr	r1, [r7, #8]
 800724c:	69b8      	ldr	r0, [r7, #24]
 800724e:	f7ff fed9 	bl	8007004 <put_fat>
 8007252:	4603      	mov	r3, r0
 8007254:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8007256:	7ffb      	ldrb	r3, [r7, #31]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d001      	beq.n	8007260 <remove_chain+0x88>
 800725c:	7ffb      	ldrb	r3, [r7, #31]
 800725e:	e01c      	b.n	800729a <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8007260:	69bb      	ldr	r3, [r7, #24]
 8007262:	691a      	ldr	r2, [r3, #16]
 8007264:	69bb      	ldr	r3, [r7, #24]
 8007266:	695b      	ldr	r3, [r3, #20]
 8007268:	3b02      	subs	r3, #2
 800726a:	429a      	cmp	r2, r3
 800726c:	d20b      	bcs.n	8007286 <remove_chain+0xae>
			fs->free_clst++;
 800726e:	69bb      	ldr	r3, [r7, #24]
 8007270:	691b      	ldr	r3, [r3, #16]
 8007272:	1c5a      	adds	r2, r3, #1
 8007274:	69bb      	ldr	r3, [r7, #24]
 8007276:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8007278:	69bb      	ldr	r3, [r7, #24]
 800727a:	791b      	ldrb	r3, [r3, #4]
 800727c:	f043 0301 	orr.w	r3, r3, #1
 8007280:	b2da      	uxtb	r2, r3
 8007282:	69bb      	ldr	r3, [r7, #24]
 8007284:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8007286:	697b      	ldr	r3, [r7, #20]
 8007288:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800728a:	69bb      	ldr	r3, [r7, #24]
 800728c:	695b      	ldr	r3, [r3, #20]
 800728e:	68ba      	ldr	r2, [r7, #8]
 8007290:	429a      	cmp	r2, r3
 8007292:	d3c6      	bcc.n	8007222 <remove_chain+0x4a>
 8007294:	e000      	b.n	8007298 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8007296:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8007298:	2300      	movs	r3, #0
}
 800729a:	4618      	mov	r0, r3
 800729c:	3720      	adds	r7, #32
 800729e:	46bd      	mov	sp, r7
 80072a0:	bd80      	pop	{r7, pc}

080072a2 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80072a2:	b580      	push	{r7, lr}
 80072a4:	b088      	sub	sp, #32
 80072a6:	af00      	add	r7, sp, #0
 80072a8:	6078      	str	r0, [r7, #4]
 80072aa:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d10d      	bne.n	80072d4 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80072b8:	693b      	ldr	r3, [r7, #16]
 80072ba:	68db      	ldr	r3, [r3, #12]
 80072bc:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80072be:	69bb      	ldr	r3, [r7, #24]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d004      	beq.n	80072ce <create_chain+0x2c>
 80072c4:	693b      	ldr	r3, [r7, #16]
 80072c6:	695b      	ldr	r3, [r3, #20]
 80072c8:	69ba      	ldr	r2, [r7, #24]
 80072ca:	429a      	cmp	r2, r3
 80072cc:	d31b      	bcc.n	8007306 <create_chain+0x64>
 80072ce:	2301      	movs	r3, #1
 80072d0:	61bb      	str	r3, [r7, #24]
 80072d2:	e018      	b.n	8007306 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80072d4:	6839      	ldr	r1, [r7, #0]
 80072d6:	6878      	ldr	r0, [r7, #4]
 80072d8:	f7ff fded 	bl	8006eb6 <get_fat>
 80072dc:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	2b01      	cmp	r3, #1
 80072e2:	d801      	bhi.n	80072e8 <create_chain+0x46>
 80072e4:	2301      	movs	r3, #1
 80072e6:	e070      	b.n	80073ca <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072ee:	d101      	bne.n	80072f4 <create_chain+0x52>
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	e06a      	b.n	80073ca <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80072f4:	693b      	ldr	r3, [r7, #16]
 80072f6:	695b      	ldr	r3, [r3, #20]
 80072f8:	68fa      	ldr	r2, [r7, #12]
 80072fa:	429a      	cmp	r2, r3
 80072fc:	d201      	bcs.n	8007302 <create_chain+0x60>
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	e063      	b.n	80073ca <create_chain+0x128>
		scl = clst;
 8007302:	683b      	ldr	r3, [r7, #0]
 8007304:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8007306:	69bb      	ldr	r3, [r7, #24]
 8007308:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800730a:	69fb      	ldr	r3, [r7, #28]
 800730c:	3301      	adds	r3, #1
 800730e:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8007310:	693b      	ldr	r3, [r7, #16]
 8007312:	695b      	ldr	r3, [r3, #20]
 8007314:	69fa      	ldr	r2, [r7, #28]
 8007316:	429a      	cmp	r2, r3
 8007318:	d307      	bcc.n	800732a <create_chain+0x88>
				ncl = 2;
 800731a:	2302      	movs	r3, #2
 800731c:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800731e:	69fa      	ldr	r2, [r7, #28]
 8007320:	69bb      	ldr	r3, [r7, #24]
 8007322:	429a      	cmp	r2, r3
 8007324:	d901      	bls.n	800732a <create_chain+0x88>
 8007326:	2300      	movs	r3, #0
 8007328:	e04f      	b.n	80073ca <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800732a:	69f9      	ldr	r1, [r7, #28]
 800732c:	6878      	ldr	r0, [r7, #4]
 800732e:	f7ff fdc2 	bl	8006eb6 <get_fat>
 8007332:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d00e      	beq.n	8007358 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	2b01      	cmp	r3, #1
 800733e:	d003      	beq.n	8007348 <create_chain+0xa6>
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007346:	d101      	bne.n	800734c <create_chain+0xaa>
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	e03e      	b.n	80073ca <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800734c:	69fa      	ldr	r2, [r7, #28]
 800734e:	69bb      	ldr	r3, [r7, #24]
 8007350:	429a      	cmp	r2, r3
 8007352:	d1da      	bne.n	800730a <create_chain+0x68>
 8007354:	2300      	movs	r3, #0
 8007356:	e038      	b.n	80073ca <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8007358:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800735a:	f04f 32ff 	mov.w	r2, #4294967295
 800735e:	69f9      	ldr	r1, [r7, #28]
 8007360:	6938      	ldr	r0, [r7, #16]
 8007362:	f7ff fe4f 	bl	8007004 <put_fat>
 8007366:	4603      	mov	r3, r0
 8007368:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800736a:	7dfb      	ldrb	r3, [r7, #23]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d109      	bne.n	8007384 <create_chain+0xe2>
 8007370:	683b      	ldr	r3, [r7, #0]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d006      	beq.n	8007384 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8007376:	69fa      	ldr	r2, [r7, #28]
 8007378:	6839      	ldr	r1, [r7, #0]
 800737a:	6938      	ldr	r0, [r7, #16]
 800737c:	f7ff fe42 	bl	8007004 <put_fat>
 8007380:	4603      	mov	r3, r0
 8007382:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8007384:	7dfb      	ldrb	r3, [r7, #23]
 8007386:	2b00      	cmp	r3, #0
 8007388:	d116      	bne.n	80073b8 <create_chain+0x116>
		fs->last_clst = ncl;
 800738a:	693b      	ldr	r3, [r7, #16]
 800738c:	69fa      	ldr	r2, [r7, #28]
 800738e:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8007390:	693b      	ldr	r3, [r7, #16]
 8007392:	691a      	ldr	r2, [r3, #16]
 8007394:	693b      	ldr	r3, [r7, #16]
 8007396:	695b      	ldr	r3, [r3, #20]
 8007398:	3b02      	subs	r3, #2
 800739a:	429a      	cmp	r2, r3
 800739c:	d804      	bhi.n	80073a8 <create_chain+0x106>
 800739e:	693b      	ldr	r3, [r7, #16]
 80073a0:	691b      	ldr	r3, [r3, #16]
 80073a2:	1e5a      	subs	r2, r3, #1
 80073a4:	693b      	ldr	r3, [r7, #16]
 80073a6:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 80073a8:	693b      	ldr	r3, [r7, #16]
 80073aa:	791b      	ldrb	r3, [r3, #4]
 80073ac:	f043 0301 	orr.w	r3, r3, #1
 80073b0:	b2da      	uxtb	r2, r3
 80073b2:	693b      	ldr	r3, [r7, #16]
 80073b4:	711a      	strb	r2, [r3, #4]
 80073b6:	e007      	b.n	80073c8 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80073b8:	7dfb      	ldrb	r3, [r7, #23]
 80073ba:	2b01      	cmp	r3, #1
 80073bc:	d102      	bne.n	80073c4 <create_chain+0x122>
 80073be:	f04f 33ff 	mov.w	r3, #4294967295
 80073c2:	e000      	b.n	80073c6 <create_chain+0x124>
 80073c4:	2301      	movs	r3, #1
 80073c6:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80073c8:	69fb      	ldr	r3, [r7, #28]
}
 80073ca:	4618      	mov	r0, r3
 80073cc:	3720      	adds	r7, #32
 80073ce:	46bd      	mov	sp, r7
 80073d0:	bd80      	pop	{r7, pc}

080073d2 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80073d2:	b480      	push	{r7}
 80073d4:	b087      	sub	sp, #28
 80073d6:	af00      	add	r7, sp, #0
 80073d8:	6078      	str	r0, [r7, #4]
 80073da:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073e6:	3304      	adds	r3, #4
 80073e8:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	0a5b      	lsrs	r3, r3, #9
 80073ee:	68fa      	ldr	r2, [r7, #12]
 80073f0:	8952      	ldrh	r2, [r2, #10]
 80073f2:	fbb3 f3f2 	udiv	r3, r3, r2
 80073f6:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80073f8:	693b      	ldr	r3, [r7, #16]
 80073fa:	1d1a      	adds	r2, r3, #4
 80073fc:	613a      	str	r2, [r7, #16]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8007402:	68bb      	ldr	r3, [r7, #8]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d101      	bne.n	800740c <clmt_clust+0x3a>
 8007408:	2300      	movs	r3, #0
 800740a:	e010      	b.n	800742e <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800740c:	697a      	ldr	r2, [r7, #20]
 800740e:	68bb      	ldr	r3, [r7, #8]
 8007410:	429a      	cmp	r2, r3
 8007412:	d307      	bcc.n	8007424 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8007414:	697a      	ldr	r2, [r7, #20]
 8007416:	68bb      	ldr	r3, [r7, #8]
 8007418:	1ad3      	subs	r3, r2, r3
 800741a:	617b      	str	r3, [r7, #20]
 800741c:	693b      	ldr	r3, [r7, #16]
 800741e:	3304      	adds	r3, #4
 8007420:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007422:	e7e9      	b.n	80073f8 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8007424:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8007426:	693b      	ldr	r3, [r7, #16]
 8007428:	681a      	ldr	r2, [r3, #0]
 800742a:	697b      	ldr	r3, [r7, #20]
 800742c:	4413      	add	r3, r2
}
 800742e:	4618      	mov	r0, r3
 8007430:	371c      	adds	r7, #28
 8007432:	46bd      	mov	sp, r7
 8007434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007438:	4770      	bx	lr

0800743a <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800743a:	b580      	push	{r7, lr}
 800743c:	b086      	sub	sp, #24
 800743e:	af00      	add	r7, sp, #0
 8007440:	6078      	str	r0, [r7, #4]
 8007442:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800744a:	683b      	ldr	r3, [r7, #0]
 800744c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007450:	d204      	bcs.n	800745c <dir_sdi+0x22>
 8007452:	683b      	ldr	r3, [r7, #0]
 8007454:	f003 031f 	and.w	r3, r3, #31
 8007458:	2b00      	cmp	r3, #0
 800745a:	d001      	beq.n	8007460 <dir_sdi+0x26>
		return FR_INT_ERR;
 800745c:	2302      	movs	r3, #2
 800745e:	e063      	b.n	8007528 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	683a      	ldr	r2, [r7, #0]
 8007464:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	689b      	ldr	r3, [r3, #8]
 800746a:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800746c:	697b      	ldr	r3, [r7, #20]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d106      	bne.n	8007480 <dir_sdi+0x46>
 8007472:	693b      	ldr	r3, [r7, #16]
 8007474:	781b      	ldrb	r3, [r3, #0]
 8007476:	2b02      	cmp	r3, #2
 8007478:	d902      	bls.n	8007480 <dir_sdi+0x46>
		clst = fs->dirbase;
 800747a:	693b      	ldr	r3, [r7, #16]
 800747c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800747e:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8007480:	697b      	ldr	r3, [r7, #20]
 8007482:	2b00      	cmp	r3, #0
 8007484:	d10c      	bne.n	80074a0 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	095b      	lsrs	r3, r3, #5
 800748a:	693a      	ldr	r2, [r7, #16]
 800748c:	8912      	ldrh	r2, [r2, #8]
 800748e:	4293      	cmp	r3, r2
 8007490:	d301      	bcc.n	8007496 <dir_sdi+0x5c>
 8007492:	2302      	movs	r3, #2
 8007494:	e048      	b.n	8007528 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8007496:	693b      	ldr	r3, [r7, #16]
 8007498:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	61da      	str	r2, [r3, #28]
 800749e:	e029      	b.n	80074f4 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80074a0:	693b      	ldr	r3, [r7, #16]
 80074a2:	895b      	ldrh	r3, [r3, #10]
 80074a4:	025b      	lsls	r3, r3, #9
 80074a6:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80074a8:	e019      	b.n	80074de <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	6979      	ldr	r1, [r7, #20]
 80074ae:	4618      	mov	r0, r3
 80074b0:	f7ff fd01 	bl	8006eb6 <get_fat>
 80074b4:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80074b6:	697b      	ldr	r3, [r7, #20]
 80074b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074bc:	d101      	bne.n	80074c2 <dir_sdi+0x88>
 80074be:	2301      	movs	r3, #1
 80074c0:	e032      	b.n	8007528 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80074c2:	697b      	ldr	r3, [r7, #20]
 80074c4:	2b01      	cmp	r3, #1
 80074c6:	d904      	bls.n	80074d2 <dir_sdi+0x98>
 80074c8:	693b      	ldr	r3, [r7, #16]
 80074ca:	695b      	ldr	r3, [r3, #20]
 80074cc:	697a      	ldr	r2, [r7, #20]
 80074ce:	429a      	cmp	r2, r3
 80074d0:	d301      	bcc.n	80074d6 <dir_sdi+0x9c>
 80074d2:	2302      	movs	r3, #2
 80074d4:	e028      	b.n	8007528 <dir_sdi+0xee>
			ofs -= csz;
 80074d6:	683a      	ldr	r2, [r7, #0]
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	1ad3      	subs	r3, r2, r3
 80074dc:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80074de:	683a      	ldr	r2, [r7, #0]
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	429a      	cmp	r2, r3
 80074e4:	d2e1      	bcs.n	80074aa <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 80074e6:	6979      	ldr	r1, [r7, #20]
 80074e8:	6938      	ldr	r0, [r7, #16]
 80074ea:	f7ff fcc5 	bl	8006e78 <clust2sect>
 80074ee:	4602      	mov	r2, r0
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	697a      	ldr	r2, [r7, #20]
 80074f8:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	69db      	ldr	r3, [r3, #28]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d101      	bne.n	8007506 <dir_sdi+0xcc>
 8007502:	2302      	movs	r3, #2
 8007504:	e010      	b.n	8007528 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	69da      	ldr	r2, [r3, #28]
 800750a:	683b      	ldr	r3, [r7, #0]
 800750c:	0a5b      	lsrs	r3, r3, #9
 800750e:	441a      	add	r2, r3
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8007514:	693b      	ldr	r3, [r7, #16]
 8007516:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800751a:	683b      	ldr	r3, [r7, #0]
 800751c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007520:	441a      	add	r2, r3
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007526:	2300      	movs	r3, #0
}
 8007528:	4618      	mov	r0, r3
 800752a:	3718      	adds	r7, #24
 800752c:	46bd      	mov	sp, r7
 800752e:	bd80      	pop	{r7, pc}

08007530 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8007530:	b580      	push	{r7, lr}
 8007532:	b086      	sub	sp, #24
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
 8007538:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	695b      	ldr	r3, [r3, #20]
 8007544:	3320      	adds	r3, #32
 8007546:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	69db      	ldr	r3, [r3, #28]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d003      	beq.n	8007558 <dir_next+0x28>
 8007550:	68bb      	ldr	r3, [r7, #8]
 8007552:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007556:	d301      	bcc.n	800755c <dir_next+0x2c>
 8007558:	2304      	movs	r3, #4
 800755a:	e0aa      	b.n	80076b2 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800755c:	68bb      	ldr	r3, [r7, #8]
 800755e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007562:	2b00      	cmp	r3, #0
 8007564:	f040 8098 	bne.w	8007698 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	69db      	ldr	r3, [r3, #28]
 800756c:	1c5a      	adds	r2, r3, #1
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	699b      	ldr	r3, [r3, #24]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d10b      	bne.n	8007592 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800757a:	68bb      	ldr	r3, [r7, #8]
 800757c:	095b      	lsrs	r3, r3, #5
 800757e:	68fa      	ldr	r2, [r7, #12]
 8007580:	8912      	ldrh	r2, [r2, #8]
 8007582:	4293      	cmp	r3, r2
 8007584:	f0c0 8088 	bcc.w	8007698 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2200      	movs	r2, #0
 800758c:	61da      	str	r2, [r3, #28]
 800758e:	2304      	movs	r3, #4
 8007590:	e08f      	b.n	80076b2 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8007592:	68bb      	ldr	r3, [r7, #8]
 8007594:	0a5b      	lsrs	r3, r3, #9
 8007596:	68fa      	ldr	r2, [r7, #12]
 8007598:	8952      	ldrh	r2, [r2, #10]
 800759a:	3a01      	subs	r2, #1
 800759c:	4013      	ands	r3, r2
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d17a      	bne.n	8007698 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80075a2:	687a      	ldr	r2, [r7, #4]
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	699b      	ldr	r3, [r3, #24]
 80075a8:	4619      	mov	r1, r3
 80075aa:	4610      	mov	r0, r2
 80075ac:	f7ff fc83 	bl	8006eb6 <get_fat>
 80075b0:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80075b2:	697b      	ldr	r3, [r7, #20]
 80075b4:	2b01      	cmp	r3, #1
 80075b6:	d801      	bhi.n	80075bc <dir_next+0x8c>
 80075b8:	2302      	movs	r3, #2
 80075ba:	e07a      	b.n	80076b2 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80075bc:	697b      	ldr	r3, [r7, #20]
 80075be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075c2:	d101      	bne.n	80075c8 <dir_next+0x98>
 80075c4:	2301      	movs	r3, #1
 80075c6:	e074      	b.n	80076b2 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	695b      	ldr	r3, [r3, #20]
 80075cc:	697a      	ldr	r2, [r7, #20]
 80075ce:	429a      	cmp	r2, r3
 80075d0:	d358      	bcc.n	8007684 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80075d2:	683b      	ldr	r3, [r7, #0]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d104      	bne.n	80075e2 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2200      	movs	r2, #0
 80075dc:	61da      	str	r2, [r3, #28]
 80075de:	2304      	movs	r3, #4
 80075e0:	e067      	b.n	80076b2 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80075e2:	687a      	ldr	r2, [r7, #4]
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	699b      	ldr	r3, [r3, #24]
 80075e8:	4619      	mov	r1, r3
 80075ea:	4610      	mov	r0, r2
 80075ec:	f7ff fe59 	bl	80072a2 <create_chain>
 80075f0:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80075f2:	697b      	ldr	r3, [r7, #20]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d101      	bne.n	80075fc <dir_next+0xcc>
 80075f8:	2307      	movs	r3, #7
 80075fa:	e05a      	b.n	80076b2 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80075fc:	697b      	ldr	r3, [r7, #20]
 80075fe:	2b01      	cmp	r3, #1
 8007600:	d101      	bne.n	8007606 <dir_next+0xd6>
 8007602:	2302      	movs	r3, #2
 8007604:	e055      	b.n	80076b2 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007606:	697b      	ldr	r3, [r7, #20]
 8007608:	f1b3 3fff 	cmp.w	r3, #4294967295
 800760c:	d101      	bne.n	8007612 <dir_next+0xe2>
 800760e:	2301      	movs	r3, #1
 8007610:	e04f      	b.n	80076b2 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8007612:	68f8      	ldr	r0, [r7, #12]
 8007614:	f7ff fb50 	bl	8006cb8 <sync_window>
 8007618:	4603      	mov	r3, r0
 800761a:	2b00      	cmp	r3, #0
 800761c:	d001      	beq.n	8007622 <dir_next+0xf2>
 800761e:	2301      	movs	r3, #1
 8007620:	e047      	b.n	80076b2 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	3330      	adds	r3, #48	@ 0x30
 8007626:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800762a:	2100      	movs	r1, #0
 800762c:	4618      	mov	r0, r3
 800762e:	f7ff f97a 	bl	8006926 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007632:	2300      	movs	r3, #0
 8007634:	613b      	str	r3, [r7, #16]
 8007636:	6979      	ldr	r1, [r7, #20]
 8007638:	68f8      	ldr	r0, [r7, #12]
 800763a:	f7ff fc1d 	bl	8006e78 <clust2sect>
 800763e:	4602      	mov	r2, r0
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	62da      	str	r2, [r3, #44]	@ 0x2c
 8007644:	e012      	b.n	800766c <dir_next+0x13c>
						fs->wflag = 1;
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	2201      	movs	r2, #1
 800764a:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800764c:	68f8      	ldr	r0, [r7, #12]
 800764e:	f7ff fb33 	bl	8006cb8 <sync_window>
 8007652:	4603      	mov	r3, r0
 8007654:	2b00      	cmp	r3, #0
 8007656:	d001      	beq.n	800765c <dir_next+0x12c>
 8007658:	2301      	movs	r3, #1
 800765a:	e02a      	b.n	80076b2 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800765c:	693b      	ldr	r3, [r7, #16]
 800765e:	3301      	adds	r3, #1
 8007660:	613b      	str	r3, [r7, #16]
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007666:	1c5a      	adds	r2, r3, #1
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	895b      	ldrh	r3, [r3, #10]
 8007670:	461a      	mov	r2, r3
 8007672:	693b      	ldr	r3, [r7, #16]
 8007674:	4293      	cmp	r3, r2
 8007676:	d3e6      	bcc.n	8007646 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800767c:	693b      	ldr	r3, [r7, #16]
 800767e:	1ad2      	subs	r2, r2, r3
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	697a      	ldr	r2, [r7, #20]
 8007688:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800768a:	6979      	ldr	r1, [r7, #20]
 800768c:	68f8      	ldr	r0, [r7, #12]
 800768e:	f7ff fbf3 	bl	8006e78 <clust2sect>
 8007692:	4602      	mov	r2, r0
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	68ba      	ldr	r2, [r7, #8]
 800769c:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80076a4:	68bb      	ldr	r3, [r7, #8]
 80076a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076aa:	441a      	add	r2, r3
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80076b0:	2300      	movs	r3, #0
}
 80076b2:	4618      	mov	r0, r3
 80076b4:	3718      	adds	r7, #24
 80076b6:	46bd      	mov	sp, r7
 80076b8:	bd80      	pop	{r7, pc}

080076ba <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80076ba:	b580      	push	{r7, lr}
 80076bc:	b086      	sub	sp, #24
 80076be:	af00      	add	r7, sp, #0
 80076c0:	6078      	str	r0, [r7, #4]
 80076c2:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80076ca:	2100      	movs	r1, #0
 80076cc:	6878      	ldr	r0, [r7, #4]
 80076ce:	f7ff feb4 	bl	800743a <dir_sdi>
 80076d2:	4603      	mov	r3, r0
 80076d4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80076d6:	7dfb      	ldrb	r3, [r7, #23]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d12b      	bne.n	8007734 <dir_alloc+0x7a>
		n = 0;
 80076dc:	2300      	movs	r3, #0
 80076de:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	69db      	ldr	r3, [r3, #28]
 80076e4:	4619      	mov	r1, r3
 80076e6:	68f8      	ldr	r0, [r7, #12]
 80076e8:	f7ff fb2a 	bl	8006d40 <move_window>
 80076ec:	4603      	mov	r3, r0
 80076ee:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80076f0:	7dfb      	ldrb	r3, [r7, #23]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d11d      	bne.n	8007732 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	6a1b      	ldr	r3, [r3, #32]
 80076fa:	781b      	ldrb	r3, [r3, #0]
 80076fc:	2be5      	cmp	r3, #229	@ 0xe5
 80076fe:	d004      	beq.n	800770a <dir_alloc+0x50>
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	6a1b      	ldr	r3, [r3, #32]
 8007704:	781b      	ldrb	r3, [r3, #0]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d107      	bne.n	800771a <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800770a:	693b      	ldr	r3, [r7, #16]
 800770c:	3301      	adds	r3, #1
 800770e:	613b      	str	r3, [r7, #16]
 8007710:	693a      	ldr	r2, [r7, #16]
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	429a      	cmp	r2, r3
 8007716:	d102      	bne.n	800771e <dir_alloc+0x64>
 8007718:	e00c      	b.n	8007734 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800771a:	2300      	movs	r3, #0
 800771c:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800771e:	2101      	movs	r1, #1
 8007720:	6878      	ldr	r0, [r7, #4]
 8007722:	f7ff ff05 	bl	8007530 <dir_next>
 8007726:	4603      	mov	r3, r0
 8007728:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800772a:	7dfb      	ldrb	r3, [r7, #23]
 800772c:	2b00      	cmp	r3, #0
 800772e:	d0d7      	beq.n	80076e0 <dir_alloc+0x26>
 8007730:	e000      	b.n	8007734 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8007732:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8007734:	7dfb      	ldrb	r3, [r7, #23]
 8007736:	2b04      	cmp	r3, #4
 8007738:	d101      	bne.n	800773e <dir_alloc+0x84>
 800773a:	2307      	movs	r3, #7
 800773c:	75fb      	strb	r3, [r7, #23]
	return res;
 800773e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007740:	4618      	mov	r0, r3
 8007742:	3718      	adds	r7, #24
 8007744:	46bd      	mov	sp, r7
 8007746:	bd80      	pop	{r7, pc}

08007748 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8007748:	b580      	push	{r7, lr}
 800774a:	b084      	sub	sp, #16
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
 8007750:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	331a      	adds	r3, #26
 8007756:	4618      	mov	r0, r3
 8007758:	f7ff f842 	bl	80067e0 <ld_word>
 800775c:	4603      	mov	r3, r0
 800775e:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	781b      	ldrb	r3, [r3, #0]
 8007764:	2b03      	cmp	r3, #3
 8007766:	d109      	bne.n	800777c <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8007768:	683b      	ldr	r3, [r7, #0]
 800776a:	3314      	adds	r3, #20
 800776c:	4618      	mov	r0, r3
 800776e:	f7ff f837 	bl	80067e0 <ld_word>
 8007772:	4603      	mov	r3, r0
 8007774:	041b      	lsls	r3, r3, #16
 8007776:	68fa      	ldr	r2, [r7, #12]
 8007778:	4313      	orrs	r3, r2
 800777a:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800777c:	68fb      	ldr	r3, [r7, #12]
}
 800777e:	4618      	mov	r0, r3
 8007780:	3710      	adds	r7, #16
 8007782:	46bd      	mov	sp, r7
 8007784:	bd80      	pop	{r7, pc}

08007786 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8007786:	b580      	push	{r7, lr}
 8007788:	b084      	sub	sp, #16
 800778a:	af00      	add	r7, sp, #0
 800778c:	60f8      	str	r0, [r7, #12]
 800778e:	60b9      	str	r1, [r7, #8]
 8007790:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8007792:	68bb      	ldr	r3, [r7, #8]
 8007794:	331a      	adds	r3, #26
 8007796:	687a      	ldr	r2, [r7, #4]
 8007798:	b292      	uxth	r2, r2
 800779a:	4611      	mov	r1, r2
 800779c:	4618      	mov	r0, r3
 800779e:	f7ff f85a 	bl	8006856 <st_word>
	if (fs->fs_type == FS_FAT32) {
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	781b      	ldrb	r3, [r3, #0]
 80077a6:	2b03      	cmp	r3, #3
 80077a8:	d109      	bne.n	80077be <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80077aa:	68bb      	ldr	r3, [r7, #8]
 80077ac:	f103 0214 	add.w	r2, r3, #20
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	0c1b      	lsrs	r3, r3, #16
 80077b4:	b29b      	uxth	r3, r3
 80077b6:	4619      	mov	r1, r3
 80077b8:	4610      	mov	r0, r2
 80077ba:	f7ff f84c 	bl	8006856 <st_word>
	}
}
 80077be:	bf00      	nop
 80077c0:	3710      	adds	r7, #16
 80077c2:	46bd      	mov	sp, r7
 80077c4:	bd80      	pop	{r7, pc}

080077c6 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80077c6:	b580      	push	{r7, lr}
 80077c8:	b086      	sub	sp, #24
 80077ca:	af00      	add	r7, sp, #0
 80077cc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80077d4:	2100      	movs	r1, #0
 80077d6:	6878      	ldr	r0, [r7, #4]
 80077d8:	f7ff fe2f 	bl	800743a <dir_sdi>
 80077dc:	4603      	mov	r3, r0
 80077de:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80077e0:	7dfb      	ldrb	r3, [r7, #23]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d001      	beq.n	80077ea <dir_find+0x24>
 80077e6:	7dfb      	ldrb	r3, [r7, #23]
 80077e8:	e03e      	b.n	8007868 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	69db      	ldr	r3, [r3, #28]
 80077ee:	4619      	mov	r1, r3
 80077f0:	6938      	ldr	r0, [r7, #16]
 80077f2:	f7ff faa5 	bl	8006d40 <move_window>
 80077f6:	4603      	mov	r3, r0
 80077f8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80077fa:	7dfb      	ldrb	r3, [r7, #23]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d12f      	bne.n	8007860 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	6a1b      	ldr	r3, [r3, #32]
 8007804:	781b      	ldrb	r3, [r3, #0]
 8007806:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8007808:	7bfb      	ldrb	r3, [r7, #15]
 800780a:	2b00      	cmp	r3, #0
 800780c:	d102      	bne.n	8007814 <dir_find+0x4e>
 800780e:	2304      	movs	r3, #4
 8007810:	75fb      	strb	r3, [r7, #23]
 8007812:	e028      	b.n	8007866 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	6a1b      	ldr	r3, [r3, #32]
 8007818:	330b      	adds	r3, #11
 800781a:	781b      	ldrb	r3, [r3, #0]
 800781c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007820:	b2da      	uxtb	r2, r3
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	6a1b      	ldr	r3, [r3, #32]
 800782a:	330b      	adds	r3, #11
 800782c:	781b      	ldrb	r3, [r3, #0]
 800782e:	f003 0308 	and.w	r3, r3, #8
 8007832:	2b00      	cmp	r3, #0
 8007834:	d10a      	bne.n	800784c <dir_find+0x86>
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	6a18      	ldr	r0, [r3, #32]
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	3324      	adds	r3, #36	@ 0x24
 800783e:	220b      	movs	r2, #11
 8007840:	4619      	mov	r1, r3
 8007842:	f7ff f88b 	bl	800695c <mem_cmp>
 8007846:	4603      	mov	r3, r0
 8007848:	2b00      	cmp	r3, #0
 800784a:	d00b      	beq.n	8007864 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800784c:	2100      	movs	r1, #0
 800784e:	6878      	ldr	r0, [r7, #4]
 8007850:	f7ff fe6e 	bl	8007530 <dir_next>
 8007854:	4603      	mov	r3, r0
 8007856:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8007858:	7dfb      	ldrb	r3, [r7, #23]
 800785a:	2b00      	cmp	r3, #0
 800785c:	d0c5      	beq.n	80077ea <dir_find+0x24>
 800785e:	e002      	b.n	8007866 <dir_find+0xa0>
		if (res != FR_OK) break;
 8007860:	bf00      	nop
 8007862:	e000      	b.n	8007866 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8007864:	bf00      	nop

	return res;
 8007866:	7dfb      	ldrb	r3, [r7, #23]
}
 8007868:	4618      	mov	r0, r3
 800786a:	3718      	adds	r7, #24
 800786c:	46bd      	mov	sp, r7
 800786e:	bd80      	pop	{r7, pc}

08007870 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b084      	sub	sp, #16
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800787e:	2101      	movs	r1, #1
 8007880:	6878      	ldr	r0, [r7, #4]
 8007882:	f7ff ff1a 	bl	80076ba <dir_alloc>
 8007886:	4603      	mov	r3, r0
 8007888:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800788a:	7bfb      	ldrb	r3, [r7, #15]
 800788c:	2b00      	cmp	r3, #0
 800788e:	d11c      	bne.n	80078ca <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	69db      	ldr	r3, [r3, #28]
 8007894:	4619      	mov	r1, r3
 8007896:	68b8      	ldr	r0, [r7, #8]
 8007898:	f7ff fa52 	bl	8006d40 <move_window>
 800789c:	4603      	mov	r3, r0
 800789e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80078a0:	7bfb      	ldrb	r3, [r7, #15]
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d111      	bne.n	80078ca <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	6a1b      	ldr	r3, [r3, #32]
 80078aa:	2220      	movs	r2, #32
 80078ac:	2100      	movs	r1, #0
 80078ae:	4618      	mov	r0, r3
 80078b0:	f7ff f839 	bl	8006926 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	6a18      	ldr	r0, [r3, #32]
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	3324      	adds	r3, #36	@ 0x24
 80078bc:	220b      	movs	r2, #11
 80078be:	4619      	mov	r1, r3
 80078c0:	f7ff f810 	bl	80068e4 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 80078c4:	68bb      	ldr	r3, [r7, #8]
 80078c6:	2201      	movs	r2, #1
 80078c8:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80078ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80078cc:	4618      	mov	r0, r3
 80078ce:	3710      	adds	r7, #16
 80078d0:	46bd      	mov	sp, r7
 80078d2:	bd80      	pop	{r7, pc}

080078d4 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80078d4:	b580      	push	{r7, lr}
 80078d6:	b088      	sub	sp, #32
 80078d8:	af00      	add	r7, sp, #0
 80078da:	6078      	str	r0, [r7, #4]
 80078dc:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 80078de:	683b      	ldr	r3, [r7, #0]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	60fb      	str	r3, [r7, #12]
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	3324      	adds	r3, #36	@ 0x24
 80078e8:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80078ea:	220b      	movs	r2, #11
 80078ec:	2120      	movs	r1, #32
 80078ee:	68b8      	ldr	r0, [r7, #8]
 80078f0:	f7ff f819 	bl	8006926 <mem_set>
	si = i = 0; ni = 8;
 80078f4:	2300      	movs	r3, #0
 80078f6:	613b      	str	r3, [r7, #16]
 80078f8:	693b      	ldr	r3, [r7, #16]
 80078fa:	61fb      	str	r3, [r7, #28]
 80078fc:	2308      	movs	r3, #8
 80078fe:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8007900:	69fb      	ldr	r3, [r7, #28]
 8007902:	1c5a      	adds	r2, r3, #1
 8007904:	61fa      	str	r2, [r7, #28]
 8007906:	68fa      	ldr	r2, [r7, #12]
 8007908:	4413      	add	r3, r2
 800790a:	781b      	ldrb	r3, [r3, #0]
 800790c:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800790e:	7efb      	ldrb	r3, [r7, #27]
 8007910:	2b20      	cmp	r3, #32
 8007912:	d94e      	bls.n	80079b2 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8007914:	7efb      	ldrb	r3, [r7, #27]
 8007916:	2b2f      	cmp	r3, #47	@ 0x2f
 8007918:	d006      	beq.n	8007928 <create_name+0x54>
 800791a:	7efb      	ldrb	r3, [r7, #27]
 800791c:	2b5c      	cmp	r3, #92	@ 0x5c
 800791e:	d110      	bne.n	8007942 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8007920:	e002      	b.n	8007928 <create_name+0x54>
 8007922:	69fb      	ldr	r3, [r7, #28]
 8007924:	3301      	adds	r3, #1
 8007926:	61fb      	str	r3, [r7, #28]
 8007928:	68fa      	ldr	r2, [r7, #12]
 800792a:	69fb      	ldr	r3, [r7, #28]
 800792c:	4413      	add	r3, r2
 800792e:	781b      	ldrb	r3, [r3, #0]
 8007930:	2b2f      	cmp	r3, #47	@ 0x2f
 8007932:	d0f6      	beq.n	8007922 <create_name+0x4e>
 8007934:	68fa      	ldr	r2, [r7, #12]
 8007936:	69fb      	ldr	r3, [r7, #28]
 8007938:	4413      	add	r3, r2
 800793a:	781b      	ldrb	r3, [r3, #0]
 800793c:	2b5c      	cmp	r3, #92	@ 0x5c
 800793e:	d0f0      	beq.n	8007922 <create_name+0x4e>
			break;
 8007940:	e038      	b.n	80079b4 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8007942:	7efb      	ldrb	r3, [r7, #27]
 8007944:	2b2e      	cmp	r3, #46	@ 0x2e
 8007946:	d003      	beq.n	8007950 <create_name+0x7c>
 8007948:	693a      	ldr	r2, [r7, #16]
 800794a:	697b      	ldr	r3, [r7, #20]
 800794c:	429a      	cmp	r2, r3
 800794e:	d30c      	bcc.n	800796a <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8007950:	697b      	ldr	r3, [r7, #20]
 8007952:	2b0b      	cmp	r3, #11
 8007954:	d002      	beq.n	800795c <create_name+0x88>
 8007956:	7efb      	ldrb	r3, [r7, #27]
 8007958:	2b2e      	cmp	r3, #46	@ 0x2e
 800795a:	d001      	beq.n	8007960 <create_name+0x8c>
 800795c:	2306      	movs	r3, #6
 800795e:	e044      	b.n	80079ea <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8007960:	2308      	movs	r3, #8
 8007962:	613b      	str	r3, [r7, #16]
 8007964:	230b      	movs	r3, #11
 8007966:	617b      	str	r3, [r7, #20]
			continue;
 8007968:	e022      	b.n	80079b0 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800796a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800796e:	2b00      	cmp	r3, #0
 8007970:	da04      	bge.n	800797c <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8007972:	7efb      	ldrb	r3, [r7, #27]
 8007974:	3b80      	subs	r3, #128	@ 0x80
 8007976:	4a1f      	ldr	r2, [pc, #124]	@ (80079f4 <create_name+0x120>)
 8007978:	5cd3      	ldrb	r3, [r2, r3]
 800797a:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800797c:	7efb      	ldrb	r3, [r7, #27]
 800797e:	4619      	mov	r1, r3
 8007980:	481d      	ldr	r0, [pc, #116]	@ (80079f8 <create_name+0x124>)
 8007982:	f7ff f812 	bl	80069aa <chk_chr>
 8007986:	4603      	mov	r3, r0
 8007988:	2b00      	cmp	r3, #0
 800798a:	d001      	beq.n	8007990 <create_name+0xbc>
 800798c:	2306      	movs	r3, #6
 800798e:	e02c      	b.n	80079ea <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8007990:	7efb      	ldrb	r3, [r7, #27]
 8007992:	2b60      	cmp	r3, #96	@ 0x60
 8007994:	d905      	bls.n	80079a2 <create_name+0xce>
 8007996:	7efb      	ldrb	r3, [r7, #27]
 8007998:	2b7a      	cmp	r3, #122	@ 0x7a
 800799a:	d802      	bhi.n	80079a2 <create_name+0xce>
 800799c:	7efb      	ldrb	r3, [r7, #27]
 800799e:	3b20      	subs	r3, #32
 80079a0:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 80079a2:	693b      	ldr	r3, [r7, #16]
 80079a4:	1c5a      	adds	r2, r3, #1
 80079a6:	613a      	str	r2, [r7, #16]
 80079a8:	68ba      	ldr	r2, [r7, #8]
 80079aa:	4413      	add	r3, r2
 80079ac:	7efa      	ldrb	r2, [r7, #27]
 80079ae:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 80079b0:	e7a6      	b.n	8007900 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 80079b2:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 80079b4:	68fa      	ldr	r2, [r7, #12]
 80079b6:	69fb      	ldr	r3, [r7, #28]
 80079b8:	441a      	add	r2, r3
 80079ba:	683b      	ldr	r3, [r7, #0]
 80079bc:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 80079be:	693b      	ldr	r3, [r7, #16]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d101      	bne.n	80079c8 <create_name+0xf4>
 80079c4:	2306      	movs	r3, #6
 80079c6:	e010      	b.n	80079ea <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80079c8:	68bb      	ldr	r3, [r7, #8]
 80079ca:	781b      	ldrb	r3, [r3, #0]
 80079cc:	2be5      	cmp	r3, #229	@ 0xe5
 80079ce:	d102      	bne.n	80079d6 <create_name+0x102>
 80079d0:	68bb      	ldr	r3, [r7, #8]
 80079d2:	2205      	movs	r2, #5
 80079d4:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80079d6:	7efb      	ldrb	r3, [r7, #27]
 80079d8:	2b20      	cmp	r3, #32
 80079da:	d801      	bhi.n	80079e0 <create_name+0x10c>
 80079dc:	2204      	movs	r2, #4
 80079de:	e000      	b.n	80079e2 <create_name+0x10e>
 80079e0:	2200      	movs	r2, #0
 80079e2:	68bb      	ldr	r3, [r7, #8]
 80079e4:	330b      	adds	r3, #11
 80079e6:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80079e8:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 80079ea:	4618      	mov	r0, r3
 80079ec:	3720      	adds	r7, #32
 80079ee:	46bd      	mov	sp, r7
 80079f0:	bd80      	pop	{r7, pc}
 80079f2:	bf00      	nop
 80079f4:	0800beb4 	.word	0x0800beb4
 80079f8:	0800be28 	.word	0x0800be28

080079fc <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80079fc:	b580      	push	{r7, lr}
 80079fe:	b086      	sub	sp, #24
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
 8007a04:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8007a0a:	693b      	ldr	r3, [r7, #16]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8007a10:	e002      	b.n	8007a18 <follow_path+0x1c>
 8007a12:	683b      	ldr	r3, [r7, #0]
 8007a14:	3301      	adds	r3, #1
 8007a16:	603b      	str	r3, [r7, #0]
 8007a18:	683b      	ldr	r3, [r7, #0]
 8007a1a:	781b      	ldrb	r3, [r3, #0]
 8007a1c:	2b2f      	cmp	r3, #47	@ 0x2f
 8007a1e:	d0f8      	beq.n	8007a12 <follow_path+0x16>
 8007a20:	683b      	ldr	r3, [r7, #0]
 8007a22:	781b      	ldrb	r3, [r3, #0]
 8007a24:	2b5c      	cmp	r3, #92	@ 0x5c
 8007a26:	d0f4      	beq.n	8007a12 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8007a28:	693b      	ldr	r3, [r7, #16]
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8007a2e:	683b      	ldr	r3, [r7, #0]
 8007a30:	781b      	ldrb	r3, [r3, #0]
 8007a32:	2b1f      	cmp	r3, #31
 8007a34:	d80a      	bhi.n	8007a4c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	2280      	movs	r2, #128	@ 0x80
 8007a3a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 8007a3e:	2100      	movs	r1, #0
 8007a40:	6878      	ldr	r0, [r7, #4]
 8007a42:	f7ff fcfa 	bl	800743a <dir_sdi>
 8007a46:	4603      	mov	r3, r0
 8007a48:	75fb      	strb	r3, [r7, #23]
 8007a4a:	e043      	b.n	8007ad4 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007a4c:	463b      	mov	r3, r7
 8007a4e:	4619      	mov	r1, r3
 8007a50:	6878      	ldr	r0, [r7, #4]
 8007a52:	f7ff ff3f 	bl	80078d4 <create_name>
 8007a56:	4603      	mov	r3, r0
 8007a58:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007a5a:	7dfb      	ldrb	r3, [r7, #23]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d134      	bne.n	8007aca <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8007a60:	6878      	ldr	r0, [r7, #4]
 8007a62:	f7ff feb0 	bl	80077c6 <dir_find>
 8007a66:	4603      	mov	r3, r0
 8007a68:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8007a70:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8007a72:	7dfb      	ldrb	r3, [r7, #23]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d00a      	beq.n	8007a8e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8007a78:	7dfb      	ldrb	r3, [r7, #23]
 8007a7a:	2b04      	cmp	r3, #4
 8007a7c:	d127      	bne.n	8007ace <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8007a7e:	7afb      	ldrb	r3, [r7, #11]
 8007a80:	f003 0304 	and.w	r3, r3, #4
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d122      	bne.n	8007ace <follow_path+0xd2>
 8007a88:	2305      	movs	r3, #5
 8007a8a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8007a8c:	e01f      	b.n	8007ace <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007a8e:	7afb      	ldrb	r3, [r7, #11]
 8007a90:	f003 0304 	and.w	r3, r3, #4
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d11c      	bne.n	8007ad2 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8007a98:	693b      	ldr	r3, [r7, #16]
 8007a9a:	799b      	ldrb	r3, [r3, #6]
 8007a9c:	f003 0310 	and.w	r3, r3, #16
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d102      	bne.n	8007aaa <follow_path+0xae>
				res = FR_NO_PATH; break;
 8007aa4:	2305      	movs	r3, #5
 8007aa6:	75fb      	strb	r3, [r7, #23]
 8007aa8:	e014      	b.n	8007ad4 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	695b      	ldr	r3, [r3, #20]
 8007ab4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ab8:	4413      	add	r3, r2
 8007aba:	4619      	mov	r1, r3
 8007abc:	68f8      	ldr	r0, [r7, #12]
 8007abe:	f7ff fe43 	bl	8007748 <ld_clust>
 8007ac2:	4602      	mov	r2, r0
 8007ac4:	693b      	ldr	r3, [r7, #16]
 8007ac6:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007ac8:	e7c0      	b.n	8007a4c <follow_path+0x50>
			if (res != FR_OK) break;
 8007aca:	bf00      	nop
 8007acc:	e002      	b.n	8007ad4 <follow_path+0xd8>
				break;
 8007ace:	bf00      	nop
 8007ad0:	e000      	b.n	8007ad4 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007ad2:	bf00      	nop
			}
		}
	}

	return res;
 8007ad4:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ad6:	4618      	mov	r0, r3
 8007ad8:	3718      	adds	r7, #24
 8007ada:	46bd      	mov	sp, r7
 8007adc:	bd80      	pop	{r7, pc}

08007ade <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8007ade:	b480      	push	{r7}
 8007ae0:	b087      	sub	sp, #28
 8007ae2:	af00      	add	r7, sp, #0
 8007ae4:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8007ae6:	f04f 33ff 	mov.w	r3, #4294967295
 8007aea:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d031      	beq.n	8007b58 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	617b      	str	r3, [r7, #20]
 8007afa:	e002      	b.n	8007b02 <get_ldnumber+0x24>
 8007afc:	697b      	ldr	r3, [r7, #20]
 8007afe:	3301      	adds	r3, #1
 8007b00:	617b      	str	r3, [r7, #20]
 8007b02:	697b      	ldr	r3, [r7, #20]
 8007b04:	781b      	ldrb	r3, [r3, #0]
 8007b06:	2b20      	cmp	r3, #32
 8007b08:	d903      	bls.n	8007b12 <get_ldnumber+0x34>
 8007b0a:	697b      	ldr	r3, [r7, #20]
 8007b0c:	781b      	ldrb	r3, [r3, #0]
 8007b0e:	2b3a      	cmp	r3, #58	@ 0x3a
 8007b10:	d1f4      	bne.n	8007afc <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8007b12:	697b      	ldr	r3, [r7, #20]
 8007b14:	781b      	ldrb	r3, [r3, #0]
 8007b16:	2b3a      	cmp	r3, #58	@ 0x3a
 8007b18:	d11c      	bne.n	8007b54 <get_ldnumber+0x76>
			tp = *path;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	1c5a      	adds	r2, r3, #1
 8007b24:	60fa      	str	r2, [r7, #12]
 8007b26:	781b      	ldrb	r3, [r3, #0]
 8007b28:	3b30      	subs	r3, #48	@ 0x30
 8007b2a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8007b2c:	68bb      	ldr	r3, [r7, #8]
 8007b2e:	2b09      	cmp	r3, #9
 8007b30:	d80e      	bhi.n	8007b50 <get_ldnumber+0x72>
 8007b32:	68fa      	ldr	r2, [r7, #12]
 8007b34:	697b      	ldr	r3, [r7, #20]
 8007b36:	429a      	cmp	r2, r3
 8007b38:	d10a      	bne.n	8007b50 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8007b3a:	68bb      	ldr	r3, [r7, #8]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d107      	bne.n	8007b50 <get_ldnumber+0x72>
					vol = (int)i;
 8007b40:	68bb      	ldr	r3, [r7, #8]
 8007b42:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8007b44:	697b      	ldr	r3, [r7, #20]
 8007b46:	3301      	adds	r3, #1
 8007b48:	617b      	str	r3, [r7, #20]
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	697a      	ldr	r2, [r7, #20]
 8007b4e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8007b50:	693b      	ldr	r3, [r7, #16]
 8007b52:	e002      	b.n	8007b5a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8007b54:	2300      	movs	r3, #0
 8007b56:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8007b58:	693b      	ldr	r3, [r7, #16]
}
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	371c      	adds	r7, #28
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b64:	4770      	bx	lr
	...

08007b68 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b082      	sub	sp, #8
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
 8007b70:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	2200      	movs	r2, #0
 8007b76:	70da      	strb	r2, [r3, #3]
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	f04f 32ff 	mov.w	r2, #4294967295
 8007b7e:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8007b80:	6839      	ldr	r1, [r7, #0]
 8007b82:	6878      	ldr	r0, [r7, #4]
 8007b84:	f7ff f8dc 	bl	8006d40 <move_window>
 8007b88:	4603      	mov	r3, r0
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d001      	beq.n	8007b92 <check_fs+0x2a>
 8007b8e:	2304      	movs	r3, #4
 8007b90:	e038      	b.n	8007c04 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	3330      	adds	r3, #48	@ 0x30
 8007b96:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	f7fe fe20 	bl	80067e0 <ld_word>
 8007ba0:	4603      	mov	r3, r0
 8007ba2:	461a      	mov	r2, r3
 8007ba4:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8007ba8:	429a      	cmp	r2, r3
 8007baa:	d001      	beq.n	8007bb0 <check_fs+0x48>
 8007bac:	2303      	movs	r3, #3
 8007bae:	e029      	b.n	8007c04 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007bb6:	2be9      	cmp	r3, #233	@ 0xe9
 8007bb8:	d009      	beq.n	8007bce <check_fs+0x66>
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007bc0:	2beb      	cmp	r3, #235	@ 0xeb
 8007bc2:	d11e      	bne.n	8007c02 <check_fs+0x9a>
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8007bca:	2b90      	cmp	r3, #144	@ 0x90
 8007bcc:	d119      	bne.n	8007c02 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	3330      	adds	r3, #48	@ 0x30
 8007bd2:	3336      	adds	r3, #54	@ 0x36
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	f7fe fe1b 	bl	8006810 <ld_dword>
 8007bda:	4603      	mov	r3, r0
 8007bdc:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8007be0:	4a0a      	ldr	r2, [pc, #40]	@ (8007c0c <check_fs+0xa4>)
 8007be2:	4293      	cmp	r3, r2
 8007be4:	d101      	bne.n	8007bea <check_fs+0x82>
 8007be6:	2300      	movs	r3, #0
 8007be8:	e00c      	b.n	8007c04 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	3330      	adds	r3, #48	@ 0x30
 8007bee:	3352      	adds	r3, #82	@ 0x52
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	f7fe fe0d 	bl	8006810 <ld_dword>
 8007bf6:	4603      	mov	r3, r0
 8007bf8:	4a05      	ldr	r2, [pc, #20]	@ (8007c10 <check_fs+0xa8>)
 8007bfa:	4293      	cmp	r3, r2
 8007bfc:	d101      	bne.n	8007c02 <check_fs+0x9a>
 8007bfe:	2300      	movs	r3, #0
 8007c00:	e000      	b.n	8007c04 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8007c02:	2302      	movs	r3, #2
}
 8007c04:	4618      	mov	r0, r3
 8007c06:	3708      	adds	r7, #8
 8007c08:	46bd      	mov	sp, r7
 8007c0a:	bd80      	pop	{r7, pc}
 8007c0c:	00544146 	.word	0x00544146
 8007c10:	33544146 	.word	0x33544146

08007c14 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8007c14:	b580      	push	{r7, lr}
 8007c16:	b096      	sub	sp, #88	@ 0x58
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	60f8      	str	r0, [r7, #12]
 8007c1c:	60b9      	str	r1, [r7, #8]
 8007c1e:	4613      	mov	r3, r2
 8007c20:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8007c22:	68bb      	ldr	r3, [r7, #8]
 8007c24:	2200      	movs	r2, #0
 8007c26:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8007c28:	68f8      	ldr	r0, [r7, #12]
 8007c2a:	f7ff ff58 	bl	8007ade <get_ldnumber>
 8007c2e:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8007c30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	da01      	bge.n	8007c3a <find_volume+0x26>
 8007c36:	230b      	movs	r3, #11
 8007c38:	e22d      	b.n	8008096 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8007c3a:	4aa1      	ldr	r2, [pc, #644]	@ (8007ec0 <find_volume+0x2ac>)
 8007c3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007c42:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8007c44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d101      	bne.n	8007c4e <find_volume+0x3a>
 8007c4a:	230c      	movs	r3, #12
 8007c4c:	e223      	b.n	8008096 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8007c4e:	68bb      	ldr	r3, [r7, #8]
 8007c50:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007c52:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8007c54:	79fb      	ldrb	r3, [r7, #7]
 8007c56:	f023 0301 	bic.w	r3, r3, #1
 8007c5a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8007c5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c5e:	781b      	ldrb	r3, [r3, #0]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d01a      	beq.n	8007c9a <find_volume+0x86>
		stat = disk_status(fs->drv);
 8007c64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c66:	785b      	ldrb	r3, [r3, #1]
 8007c68:	4618      	mov	r0, r3
 8007c6a:	f7fe fd1b 	bl	80066a4 <disk_status>
 8007c6e:	4603      	mov	r3, r0
 8007c70:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8007c74:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007c78:	f003 0301 	and.w	r3, r3, #1
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d10c      	bne.n	8007c9a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8007c80:	79fb      	ldrb	r3, [r7, #7]
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d007      	beq.n	8007c96 <find_volume+0x82>
 8007c86:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007c8a:	f003 0304 	and.w	r3, r3, #4
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d001      	beq.n	8007c96 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8007c92:	230a      	movs	r3, #10
 8007c94:	e1ff      	b.n	8008096 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8007c96:	2300      	movs	r3, #0
 8007c98:	e1fd      	b.n	8008096 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8007c9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8007ca0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007ca2:	b2da      	uxtb	r2, r3
 8007ca4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ca6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8007ca8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007caa:	785b      	ldrb	r3, [r3, #1]
 8007cac:	4618      	mov	r0, r3
 8007cae:	f7fe fd13 	bl	80066d8 <disk_initialize>
 8007cb2:	4603      	mov	r3, r0
 8007cb4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8007cb8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007cbc:	f003 0301 	and.w	r3, r3, #1
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d001      	beq.n	8007cc8 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8007cc4:	2303      	movs	r3, #3
 8007cc6:	e1e6      	b.n	8008096 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8007cc8:	79fb      	ldrb	r3, [r7, #7]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d007      	beq.n	8007cde <find_volume+0xca>
 8007cce:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007cd2:	f003 0304 	and.w	r3, r3, #4
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d001      	beq.n	8007cde <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8007cda:	230a      	movs	r3, #10
 8007cdc:	e1db      	b.n	8008096 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8007cde:	2300      	movs	r3, #0
 8007ce0:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8007ce2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007ce4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007ce6:	f7ff ff3f 	bl	8007b68 <check_fs>
 8007cea:	4603      	mov	r3, r0
 8007cec:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8007cf0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007cf4:	2b02      	cmp	r3, #2
 8007cf6:	d149      	bne.n	8007d8c <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	643b      	str	r3, [r7, #64]	@ 0x40
 8007cfc:	e01e      	b.n	8007d3c <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8007cfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d00:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007d04:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007d06:	011b      	lsls	r3, r3, #4
 8007d08:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8007d0c:	4413      	add	r3, r2
 8007d0e:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8007d10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d12:	3304      	adds	r3, #4
 8007d14:	781b      	ldrb	r3, [r3, #0]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d006      	beq.n	8007d28 <find_volume+0x114>
 8007d1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d1c:	3308      	adds	r3, #8
 8007d1e:	4618      	mov	r0, r3
 8007d20:	f7fe fd76 	bl	8006810 <ld_dword>
 8007d24:	4602      	mov	r2, r0
 8007d26:	e000      	b.n	8007d2a <find_volume+0x116>
 8007d28:	2200      	movs	r2, #0
 8007d2a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007d2c:	009b      	lsls	r3, r3, #2
 8007d2e:	3358      	adds	r3, #88	@ 0x58
 8007d30:	443b      	add	r3, r7
 8007d32:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007d36:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007d38:	3301      	adds	r3, #1
 8007d3a:	643b      	str	r3, [r7, #64]	@ 0x40
 8007d3c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007d3e:	2b03      	cmp	r3, #3
 8007d40:	d9dd      	bls.n	8007cfe <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8007d42:	2300      	movs	r3, #0
 8007d44:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8007d46:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d002      	beq.n	8007d52 <find_volume+0x13e>
 8007d4c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007d4e:	3b01      	subs	r3, #1
 8007d50:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8007d52:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007d54:	009b      	lsls	r3, r3, #2
 8007d56:	3358      	adds	r3, #88	@ 0x58
 8007d58:	443b      	add	r3, r7
 8007d5a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8007d5e:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8007d60:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d005      	beq.n	8007d72 <find_volume+0x15e>
 8007d66:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007d68:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007d6a:	f7ff fefd 	bl	8007b68 <check_fs>
 8007d6e:	4603      	mov	r3, r0
 8007d70:	e000      	b.n	8007d74 <find_volume+0x160>
 8007d72:	2303      	movs	r3, #3
 8007d74:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8007d78:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007d7c:	2b01      	cmp	r3, #1
 8007d7e:	d905      	bls.n	8007d8c <find_volume+0x178>
 8007d80:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007d82:	3301      	adds	r3, #1
 8007d84:	643b      	str	r3, [r7, #64]	@ 0x40
 8007d86:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007d88:	2b03      	cmp	r3, #3
 8007d8a:	d9e2      	bls.n	8007d52 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8007d8c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007d90:	2b04      	cmp	r3, #4
 8007d92:	d101      	bne.n	8007d98 <find_volume+0x184>
 8007d94:	2301      	movs	r3, #1
 8007d96:	e17e      	b.n	8008096 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8007d98:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007d9c:	2b01      	cmp	r3, #1
 8007d9e:	d901      	bls.n	8007da4 <find_volume+0x190>
 8007da0:	230d      	movs	r3, #13
 8007da2:	e178      	b.n	8008096 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8007da4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007da6:	3330      	adds	r3, #48	@ 0x30
 8007da8:	330b      	adds	r3, #11
 8007daa:	4618      	mov	r0, r3
 8007dac:	f7fe fd18 	bl	80067e0 <ld_word>
 8007db0:	4603      	mov	r3, r0
 8007db2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007db6:	d001      	beq.n	8007dbc <find_volume+0x1a8>
 8007db8:	230d      	movs	r3, #13
 8007dba:	e16c      	b.n	8008096 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8007dbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007dbe:	3330      	adds	r3, #48	@ 0x30
 8007dc0:	3316      	adds	r3, #22
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	f7fe fd0c 	bl	80067e0 <ld_word>
 8007dc8:	4603      	mov	r3, r0
 8007dca:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8007dcc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d106      	bne.n	8007de0 <find_volume+0x1cc>
 8007dd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007dd4:	3330      	adds	r3, #48	@ 0x30
 8007dd6:	3324      	adds	r3, #36	@ 0x24
 8007dd8:	4618      	mov	r0, r3
 8007dda:	f7fe fd19 	bl	8006810 <ld_dword>
 8007dde:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8007de0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007de2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007de4:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8007de6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007de8:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 8007dec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007dee:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8007df0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007df2:	789b      	ldrb	r3, [r3, #2]
 8007df4:	2b01      	cmp	r3, #1
 8007df6:	d005      	beq.n	8007e04 <find_volume+0x1f0>
 8007df8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007dfa:	789b      	ldrb	r3, [r3, #2]
 8007dfc:	2b02      	cmp	r3, #2
 8007dfe:	d001      	beq.n	8007e04 <find_volume+0x1f0>
 8007e00:	230d      	movs	r3, #13
 8007e02:	e148      	b.n	8008096 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8007e04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e06:	789b      	ldrb	r3, [r3, #2]
 8007e08:	461a      	mov	r2, r3
 8007e0a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007e0c:	fb02 f303 	mul.w	r3, r2, r3
 8007e10:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8007e12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e14:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007e18:	461a      	mov	r2, r3
 8007e1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e1c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8007e1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e20:	895b      	ldrh	r3, [r3, #10]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d008      	beq.n	8007e38 <find_volume+0x224>
 8007e26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e28:	895b      	ldrh	r3, [r3, #10]
 8007e2a:	461a      	mov	r2, r3
 8007e2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e2e:	895b      	ldrh	r3, [r3, #10]
 8007e30:	3b01      	subs	r3, #1
 8007e32:	4013      	ands	r3, r2
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d001      	beq.n	8007e3c <find_volume+0x228>
 8007e38:	230d      	movs	r3, #13
 8007e3a:	e12c      	b.n	8008096 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8007e3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e3e:	3330      	adds	r3, #48	@ 0x30
 8007e40:	3311      	adds	r3, #17
 8007e42:	4618      	mov	r0, r3
 8007e44:	f7fe fccc 	bl	80067e0 <ld_word>
 8007e48:	4603      	mov	r3, r0
 8007e4a:	461a      	mov	r2, r3
 8007e4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e4e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8007e50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e52:	891b      	ldrh	r3, [r3, #8]
 8007e54:	f003 030f 	and.w	r3, r3, #15
 8007e58:	b29b      	uxth	r3, r3
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d001      	beq.n	8007e62 <find_volume+0x24e>
 8007e5e:	230d      	movs	r3, #13
 8007e60:	e119      	b.n	8008096 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8007e62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e64:	3330      	adds	r3, #48	@ 0x30
 8007e66:	3313      	adds	r3, #19
 8007e68:	4618      	mov	r0, r3
 8007e6a:	f7fe fcb9 	bl	80067e0 <ld_word>
 8007e6e:	4603      	mov	r3, r0
 8007e70:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8007e72:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d106      	bne.n	8007e86 <find_volume+0x272>
 8007e78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e7a:	3330      	adds	r3, #48	@ 0x30
 8007e7c:	3320      	adds	r3, #32
 8007e7e:	4618      	mov	r0, r3
 8007e80:	f7fe fcc6 	bl	8006810 <ld_dword>
 8007e84:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8007e86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e88:	3330      	adds	r3, #48	@ 0x30
 8007e8a:	330e      	adds	r3, #14
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	f7fe fca7 	bl	80067e0 <ld_word>
 8007e92:	4603      	mov	r3, r0
 8007e94:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8007e96:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d101      	bne.n	8007ea0 <find_volume+0x28c>
 8007e9c:	230d      	movs	r3, #13
 8007e9e:	e0fa      	b.n	8008096 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8007ea0:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8007ea2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007ea4:	4413      	add	r3, r2
 8007ea6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007ea8:	8912      	ldrh	r2, [r2, #8]
 8007eaa:	0912      	lsrs	r2, r2, #4
 8007eac:	b292      	uxth	r2, r2
 8007eae:	4413      	add	r3, r2
 8007eb0:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8007eb2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007eb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007eb6:	429a      	cmp	r2, r3
 8007eb8:	d204      	bcs.n	8007ec4 <find_volume+0x2b0>
 8007eba:	230d      	movs	r3, #13
 8007ebc:	e0eb      	b.n	8008096 <find_volume+0x482>
 8007ebe:	bf00      	nop
 8007ec0:	20000524 	.word	0x20000524
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8007ec4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007ec6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ec8:	1ad3      	subs	r3, r2, r3
 8007eca:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007ecc:	8952      	ldrh	r2, [r2, #10]
 8007ece:	fbb3 f3f2 	udiv	r3, r3, r2
 8007ed2:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8007ed4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d101      	bne.n	8007ede <find_volume+0x2ca>
 8007eda:	230d      	movs	r3, #13
 8007edc:	e0db      	b.n	8008096 <find_volume+0x482>
		fmt = FS_FAT32;
 8007ede:	2303      	movs	r3, #3
 8007ee0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8007ee4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ee6:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8007eea:	4293      	cmp	r3, r2
 8007eec:	d802      	bhi.n	8007ef4 <find_volume+0x2e0>
 8007eee:	2302      	movs	r3, #2
 8007ef0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8007ef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ef6:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8007efa:	4293      	cmp	r3, r2
 8007efc:	d802      	bhi.n	8007f04 <find_volume+0x2f0>
 8007efe:	2301      	movs	r3, #1
 8007f00:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8007f04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f06:	1c9a      	adds	r2, r3, #2
 8007f08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f0a:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8007f0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f0e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007f10:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8007f12:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8007f14:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007f16:	441a      	add	r2, r3
 8007f18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f1a:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8007f1c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007f1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f20:	441a      	add	r2, r3
 8007f22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f24:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 8007f26:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007f2a:	2b03      	cmp	r3, #3
 8007f2c:	d11e      	bne.n	8007f6c <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8007f2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f30:	3330      	adds	r3, #48	@ 0x30
 8007f32:	332a      	adds	r3, #42	@ 0x2a
 8007f34:	4618      	mov	r0, r3
 8007f36:	f7fe fc53 	bl	80067e0 <ld_word>
 8007f3a:	4603      	mov	r3, r0
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d001      	beq.n	8007f44 <find_volume+0x330>
 8007f40:	230d      	movs	r3, #13
 8007f42:	e0a8      	b.n	8008096 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8007f44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f46:	891b      	ldrh	r3, [r3, #8]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d001      	beq.n	8007f50 <find_volume+0x33c>
 8007f4c:	230d      	movs	r3, #13
 8007f4e:	e0a2      	b.n	8008096 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8007f50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f52:	3330      	adds	r3, #48	@ 0x30
 8007f54:	332c      	adds	r3, #44	@ 0x2c
 8007f56:	4618      	mov	r0, r3
 8007f58:	f7fe fc5a 	bl	8006810 <ld_dword>
 8007f5c:	4602      	mov	r2, r0
 8007f5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f60:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8007f62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f64:	695b      	ldr	r3, [r3, #20]
 8007f66:	009b      	lsls	r3, r3, #2
 8007f68:	647b      	str	r3, [r7, #68]	@ 0x44
 8007f6a:	e01f      	b.n	8007fac <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8007f6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f6e:	891b      	ldrh	r3, [r3, #8]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d101      	bne.n	8007f78 <find_volume+0x364>
 8007f74:	230d      	movs	r3, #13
 8007f76:	e08e      	b.n	8008096 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8007f78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f7a:	6a1a      	ldr	r2, [r3, #32]
 8007f7c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007f7e:	441a      	add	r2, r3
 8007f80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f82:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8007f84:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007f88:	2b02      	cmp	r3, #2
 8007f8a:	d103      	bne.n	8007f94 <find_volume+0x380>
 8007f8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f8e:	695b      	ldr	r3, [r3, #20]
 8007f90:	005b      	lsls	r3, r3, #1
 8007f92:	e00a      	b.n	8007faa <find_volume+0x396>
 8007f94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f96:	695a      	ldr	r2, [r3, #20]
 8007f98:	4613      	mov	r3, r2
 8007f9a:	005b      	lsls	r3, r3, #1
 8007f9c:	4413      	add	r3, r2
 8007f9e:	085a      	lsrs	r2, r3, #1
 8007fa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fa2:	695b      	ldr	r3, [r3, #20]
 8007fa4:	f003 0301 	and.w	r3, r3, #1
 8007fa8:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8007faa:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8007fac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fae:	699a      	ldr	r2, [r3, #24]
 8007fb0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007fb2:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 8007fb6:	0a5b      	lsrs	r3, r3, #9
 8007fb8:	429a      	cmp	r2, r3
 8007fba:	d201      	bcs.n	8007fc0 <find_volume+0x3ac>
 8007fbc:	230d      	movs	r3, #13
 8007fbe:	e06a      	b.n	8008096 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8007fc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fc2:	f04f 32ff 	mov.w	r2, #4294967295
 8007fc6:	611a      	str	r2, [r3, #16]
 8007fc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fca:	691a      	ldr	r2, [r3, #16]
 8007fcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fce:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8007fd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fd2:	2280      	movs	r2, #128	@ 0x80
 8007fd4:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8007fd6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007fda:	2b03      	cmp	r3, #3
 8007fdc:	d149      	bne.n	8008072 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8007fde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fe0:	3330      	adds	r3, #48	@ 0x30
 8007fe2:	3330      	adds	r3, #48	@ 0x30
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	f7fe fbfb 	bl	80067e0 <ld_word>
 8007fea:	4603      	mov	r3, r0
 8007fec:	2b01      	cmp	r3, #1
 8007fee:	d140      	bne.n	8008072 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8007ff0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007ff2:	3301      	adds	r3, #1
 8007ff4:	4619      	mov	r1, r3
 8007ff6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007ff8:	f7fe fea2 	bl	8006d40 <move_window>
 8007ffc:	4603      	mov	r3, r0
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d137      	bne.n	8008072 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8008002:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008004:	2200      	movs	r2, #0
 8008006:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8008008:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800800a:	3330      	adds	r3, #48	@ 0x30
 800800c:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8008010:	4618      	mov	r0, r3
 8008012:	f7fe fbe5 	bl	80067e0 <ld_word>
 8008016:	4603      	mov	r3, r0
 8008018:	461a      	mov	r2, r3
 800801a:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800801e:	429a      	cmp	r2, r3
 8008020:	d127      	bne.n	8008072 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8008022:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008024:	3330      	adds	r3, #48	@ 0x30
 8008026:	4618      	mov	r0, r3
 8008028:	f7fe fbf2 	bl	8006810 <ld_dword>
 800802c:	4603      	mov	r3, r0
 800802e:	4a1c      	ldr	r2, [pc, #112]	@ (80080a0 <find_volume+0x48c>)
 8008030:	4293      	cmp	r3, r2
 8008032:	d11e      	bne.n	8008072 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8008034:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008036:	3330      	adds	r3, #48	@ 0x30
 8008038:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800803c:	4618      	mov	r0, r3
 800803e:	f7fe fbe7 	bl	8006810 <ld_dword>
 8008042:	4603      	mov	r3, r0
 8008044:	4a17      	ldr	r2, [pc, #92]	@ (80080a4 <find_volume+0x490>)
 8008046:	4293      	cmp	r3, r2
 8008048:	d113      	bne.n	8008072 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800804a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800804c:	3330      	adds	r3, #48	@ 0x30
 800804e:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8008052:	4618      	mov	r0, r3
 8008054:	f7fe fbdc 	bl	8006810 <ld_dword>
 8008058:	4602      	mov	r2, r0
 800805a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800805c:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800805e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008060:	3330      	adds	r3, #48	@ 0x30
 8008062:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8008066:	4618      	mov	r0, r3
 8008068:	f7fe fbd2 	bl	8006810 <ld_dword>
 800806c:	4602      	mov	r2, r0
 800806e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008070:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8008072:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008074:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8008078:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800807a:	4b0b      	ldr	r3, [pc, #44]	@ (80080a8 <find_volume+0x494>)
 800807c:	881b      	ldrh	r3, [r3, #0]
 800807e:	3301      	adds	r3, #1
 8008080:	b29a      	uxth	r2, r3
 8008082:	4b09      	ldr	r3, [pc, #36]	@ (80080a8 <find_volume+0x494>)
 8008084:	801a      	strh	r2, [r3, #0]
 8008086:	4b08      	ldr	r3, [pc, #32]	@ (80080a8 <find_volume+0x494>)
 8008088:	881a      	ldrh	r2, [r3, #0]
 800808a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800808c:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800808e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008090:	f7fe fdee 	bl	8006c70 <clear_lock>
#endif
	return FR_OK;
 8008094:	2300      	movs	r3, #0
}
 8008096:	4618      	mov	r0, r3
 8008098:	3758      	adds	r7, #88	@ 0x58
 800809a:	46bd      	mov	sp, r7
 800809c:	bd80      	pop	{r7, pc}
 800809e:	bf00      	nop
 80080a0:	41615252 	.word	0x41615252
 80080a4:	61417272 	.word	0x61417272
 80080a8:	20000528 	.word	0x20000528

080080ac <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80080ac:	b580      	push	{r7, lr}
 80080ae:	b084      	sub	sp, #16
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	6078      	str	r0, [r7, #4]
 80080b4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80080b6:	2309      	movs	r3, #9
 80080b8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d01c      	beq.n	80080fa <validate+0x4e>
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d018      	beq.n	80080fa <validate+0x4e>
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	781b      	ldrb	r3, [r3, #0]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d013      	beq.n	80080fa <validate+0x4e>
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	889a      	ldrh	r2, [r3, #4]
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	88db      	ldrh	r3, [r3, #6]
 80080dc:	429a      	cmp	r2, r3
 80080de:	d10c      	bne.n	80080fa <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	785b      	ldrb	r3, [r3, #1]
 80080e6:	4618      	mov	r0, r3
 80080e8:	f7fe fadc 	bl	80066a4 <disk_status>
 80080ec:	4603      	mov	r3, r0
 80080ee:	f003 0301 	and.w	r3, r3, #1
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d101      	bne.n	80080fa <validate+0x4e>
			res = FR_OK;
 80080f6:	2300      	movs	r3, #0
 80080f8:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80080fa:	7bfb      	ldrb	r3, [r7, #15]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d102      	bne.n	8008106 <validate+0x5a>
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	e000      	b.n	8008108 <validate+0x5c>
 8008106:	2300      	movs	r3, #0
 8008108:	683a      	ldr	r2, [r7, #0]
 800810a:	6013      	str	r3, [r2, #0]
	return res;
 800810c:	7bfb      	ldrb	r3, [r7, #15]
}
 800810e:	4618      	mov	r0, r3
 8008110:	3710      	adds	r7, #16
 8008112:	46bd      	mov	sp, r7
 8008114:	bd80      	pop	{r7, pc}
	...

08008118 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8008118:	b580      	push	{r7, lr}
 800811a:	b088      	sub	sp, #32
 800811c:	af00      	add	r7, sp, #0
 800811e:	60f8      	str	r0, [r7, #12]
 8008120:	60b9      	str	r1, [r7, #8]
 8008122:	4613      	mov	r3, r2
 8008124:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8008126:	68bb      	ldr	r3, [r7, #8]
 8008128:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800812a:	f107 0310 	add.w	r3, r7, #16
 800812e:	4618      	mov	r0, r3
 8008130:	f7ff fcd5 	bl	8007ade <get_ldnumber>
 8008134:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8008136:	69fb      	ldr	r3, [r7, #28]
 8008138:	2b00      	cmp	r3, #0
 800813a:	da01      	bge.n	8008140 <f_mount+0x28>
 800813c:	230b      	movs	r3, #11
 800813e:	e02b      	b.n	8008198 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8008140:	4a17      	ldr	r2, [pc, #92]	@ (80081a0 <f_mount+0x88>)
 8008142:	69fb      	ldr	r3, [r7, #28]
 8008144:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008148:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800814a:	69bb      	ldr	r3, [r7, #24]
 800814c:	2b00      	cmp	r3, #0
 800814e:	d005      	beq.n	800815c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8008150:	69b8      	ldr	r0, [r7, #24]
 8008152:	f7fe fd8d 	bl	8006c70 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8008156:	69bb      	ldr	r3, [r7, #24]
 8008158:	2200      	movs	r2, #0
 800815a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	2b00      	cmp	r3, #0
 8008160:	d002      	beq.n	8008168 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	2200      	movs	r2, #0
 8008166:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8008168:	68fa      	ldr	r2, [r7, #12]
 800816a:	490d      	ldr	r1, [pc, #52]	@ (80081a0 <f_mount+0x88>)
 800816c:	69fb      	ldr	r3, [r7, #28]
 800816e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	2b00      	cmp	r3, #0
 8008176:	d002      	beq.n	800817e <f_mount+0x66>
 8008178:	79fb      	ldrb	r3, [r7, #7]
 800817a:	2b01      	cmp	r3, #1
 800817c:	d001      	beq.n	8008182 <f_mount+0x6a>
 800817e:	2300      	movs	r3, #0
 8008180:	e00a      	b.n	8008198 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8008182:	f107 010c 	add.w	r1, r7, #12
 8008186:	f107 0308 	add.w	r3, r7, #8
 800818a:	2200      	movs	r2, #0
 800818c:	4618      	mov	r0, r3
 800818e:	f7ff fd41 	bl	8007c14 <find_volume>
 8008192:	4603      	mov	r3, r0
 8008194:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8008196:	7dfb      	ldrb	r3, [r7, #23]
}
 8008198:	4618      	mov	r0, r3
 800819a:	3720      	adds	r7, #32
 800819c:	46bd      	mov	sp, r7
 800819e:	bd80      	pop	{r7, pc}
 80081a0:	20000524 	.word	0x20000524

080081a4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80081a4:	b580      	push	{r7, lr}
 80081a6:	b098      	sub	sp, #96	@ 0x60
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	60f8      	str	r0, [r7, #12]
 80081ac:	60b9      	str	r1, [r7, #8]
 80081ae:	4613      	mov	r3, r2
 80081b0:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d101      	bne.n	80081bc <f_open+0x18>
 80081b8:	2309      	movs	r3, #9
 80081ba:	e1a9      	b.n	8008510 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80081bc:	79fb      	ldrb	r3, [r7, #7]
 80081be:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80081c2:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80081c4:	79fa      	ldrb	r2, [r7, #7]
 80081c6:	f107 0110 	add.w	r1, r7, #16
 80081ca:	f107 0308 	add.w	r3, r7, #8
 80081ce:	4618      	mov	r0, r3
 80081d0:	f7ff fd20 	bl	8007c14 <find_volume>
 80081d4:	4603      	mov	r3, r0
 80081d6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 80081da:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80081de:	2b00      	cmp	r3, #0
 80081e0:	f040 818d 	bne.w	80084fe <f_open+0x35a>
		dj.obj.fs = fs;
 80081e4:	693b      	ldr	r3, [r7, #16]
 80081e6:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80081e8:	68ba      	ldr	r2, [r7, #8]
 80081ea:	f107 0314 	add.w	r3, r7, #20
 80081ee:	4611      	mov	r1, r2
 80081f0:	4618      	mov	r0, r3
 80081f2:	f7ff fc03 	bl	80079fc <follow_path>
 80081f6:	4603      	mov	r3, r0
 80081f8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80081fc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008200:	2b00      	cmp	r3, #0
 8008202:	d118      	bne.n	8008236 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8008204:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008208:	b25b      	sxtb	r3, r3
 800820a:	2b00      	cmp	r3, #0
 800820c:	da03      	bge.n	8008216 <f_open+0x72>
				res = FR_INVALID_NAME;
 800820e:	2306      	movs	r3, #6
 8008210:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8008214:	e00f      	b.n	8008236 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008216:	79fb      	ldrb	r3, [r7, #7]
 8008218:	2b01      	cmp	r3, #1
 800821a:	bf8c      	ite	hi
 800821c:	2301      	movhi	r3, #1
 800821e:	2300      	movls	r3, #0
 8008220:	b2db      	uxtb	r3, r3
 8008222:	461a      	mov	r2, r3
 8008224:	f107 0314 	add.w	r3, r7, #20
 8008228:	4611      	mov	r1, r2
 800822a:	4618      	mov	r0, r3
 800822c:	f7fe fbd8 	bl	80069e0 <chk_lock>
 8008230:	4603      	mov	r3, r0
 8008232:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8008236:	79fb      	ldrb	r3, [r7, #7]
 8008238:	f003 031c 	and.w	r3, r3, #28
 800823c:	2b00      	cmp	r3, #0
 800823e:	d07f      	beq.n	8008340 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 8008240:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008244:	2b00      	cmp	r3, #0
 8008246:	d017      	beq.n	8008278 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8008248:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800824c:	2b04      	cmp	r3, #4
 800824e:	d10e      	bne.n	800826e <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8008250:	f7fe fc22 	bl	8006a98 <enq_lock>
 8008254:	4603      	mov	r3, r0
 8008256:	2b00      	cmp	r3, #0
 8008258:	d006      	beq.n	8008268 <f_open+0xc4>
 800825a:	f107 0314 	add.w	r3, r7, #20
 800825e:	4618      	mov	r0, r3
 8008260:	f7ff fb06 	bl	8007870 <dir_register>
 8008264:	4603      	mov	r3, r0
 8008266:	e000      	b.n	800826a <f_open+0xc6>
 8008268:	2312      	movs	r3, #18
 800826a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800826e:	79fb      	ldrb	r3, [r7, #7]
 8008270:	f043 0308 	orr.w	r3, r3, #8
 8008274:	71fb      	strb	r3, [r7, #7]
 8008276:	e010      	b.n	800829a <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8008278:	7ebb      	ldrb	r3, [r7, #26]
 800827a:	f003 0311 	and.w	r3, r3, #17
 800827e:	2b00      	cmp	r3, #0
 8008280:	d003      	beq.n	800828a <f_open+0xe6>
					res = FR_DENIED;
 8008282:	2307      	movs	r3, #7
 8008284:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8008288:	e007      	b.n	800829a <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800828a:	79fb      	ldrb	r3, [r7, #7]
 800828c:	f003 0304 	and.w	r3, r3, #4
 8008290:	2b00      	cmp	r3, #0
 8008292:	d002      	beq.n	800829a <f_open+0xf6>
 8008294:	2308      	movs	r3, #8
 8008296:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800829a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d168      	bne.n	8008374 <f_open+0x1d0>
 80082a2:	79fb      	ldrb	r3, [r7, #7]
 80082a4:	f003 0308 	and.w	r3, r3, #8
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d063      	beq.n	8008374 <f_open+0x1d0>
				dw = GET_FATTIME();
 80082ac:	f7fd fcc2 	bl	8005c34 <get_fattime>
 80082b0:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80082b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80082b4:	330e      	adds	r3, #14
 80082b6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80082b8:	4618      	mov	r0, r3
 80082ba:	f7fe fae7 	bl	800688c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80082be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80082c0:	3316      	adds	r3, #22
 80082c2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80082c4:	4618      	mov	r0, r3
 80082c6:	f7fe fae1 	bl	800688c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80082ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80082cc:	330b      	adds	r3, #11
 80082ce:	2220      	movs	r2, #32
 80082d0:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80082d2:	693b      	ldr	r3, [r7, #16]
 80082d4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80082d6:	4611      	mov	r1, r2
 80082d8:	4618      	mov	r0, r3
 80082da:	f7ff fa35 	bl	8007748 <ld_clust>
 80082de:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80082e0:	693b      	ldr	r3, [r7, #16]
 80082e2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80082e4:	2200      	movs	r2, #0
 80082e6:	4618      	mov	r0, r3
 80082e8:	f7ff fa4d 	bl	8007786 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80082ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80082ee:	331c      	adds	r3, #28
 80082f0:	2100      	movs	r1, #0
 80082f2:	4618      	mov	r0, r3
 80082f4:	f7fe faca 	bl	800688c <st_dword>
					fs->wflag = 1;
 80082f8:	693b      	ldr	r3, [r7, #16]
 80082fa:	2201      	movs	r2, #1
 80082fc:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80082fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008300:	2b00      	cmp	r3, #0
 8008302:	d037      	beq.n	8008374 <f_open+0x1d0>
						dw = fs->winsect;
 8008304:	693b      	ldr	r3, [r7, #16]
 8008306:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008308:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800830a:	f107 0314 	add.w	r3, r7, #20
 800830e:	2200      	movs	r2, #0
 8008310:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8008312:	4618      	mov	r0, r3
 8008314:	f7fe ff60 	bl	80071d8 <remove_chain>
 8008318:	4603      	mov	r3, r0
 800831a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 800831e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008322:	2b00      	cmp	r3, #0
 8008324:	d126      	bne.n	8008374 <f_open+0x1d0>
							res = move_window(fs, dw);
 8008326:	693b      	ldr	r3, [r7, #16]
 8008328:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800832a:	4618      	mov	r0, r3
 800832c:	f7fe fd08 	bl	8006d40 <move_window>
 8008330:	4603      	mov	r3, r0
 8008332:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8008336:	693b      	ldr	r3, [r7, #16]
 8008338:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800833a:	3a01      	subs	r2, #1
 800833c:	60da      	str	r2, [r3, #12]
 800833e:	e019      	b.n	8008374 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8008340:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008344:	2b00      	cmp	r3, #0
 8008346:	d115      	bne.n	8008374 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8008348:	7ebb      	ldrb	r3, [r7, #26]
 800834a:	f003 0310 	and.w	r3, r3, #16
 800834e:	2b00      	cmp	r3, #0
 8008350:	d003      	beq.n	800835a <f_open+0x1b6>
					res = FR_NO_FILE;
 8008352:	2304      	movs	r3, #4
 8008354:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8008358:	e00c      	b.n	8008374 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800835a:	79fb      	ldrb	r3, [r7, #7]
 800835c:	f003 0302 	and.w	r3, r3, #2
 8008360:	2b00      	cmp	r3, #0
 8008362:	d007      	beq.n	8008374 <f_open+0x1d0>
 8008364:	7ebb      	ldrb	r3, [r7, #26]
 8008366:	f003 0301 	and.w	r3, r3, #1
 800836a:	2b00      	cmp	r3, #0
 800836c:	d002      	beq.n	8008374 <f_open+0x1d0>
						res = FR_DENIED;
 800836e:	2307      	movs	r3, #7
 8008370:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8008374:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008378:	2b00      	cmp	r3, #0
 800837a:	d126      	bne.n	80083ca <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800837c:	79fb      	ldrb	r3, [r7, #7]
 800837e:	f003 0308 	and.w	r3, r3, #8
 8008382:	2b00      	cmp	r3, #0
 8008384:	d003      	beq.n	800838e <f_open+0x1ea>
				mode |= FA_MODIFIED;
 8008386:	79fb      	ldrb	r3, [r7, #7]
 8008388:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800838c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800838e:	693b      	ldr	r3, [r7, #16]
 8008390:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8008396:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800839c:	79fb      	ldrb	r3, [r7, #7]
 800839e:	2b01      	cmp	r3, #1
 80083a0:	bf8c      	ite	hi
 80083a2:	2301      	movhi	r3, #1
 80083a4:	2300      	movls	r3, #0
 80083a6:	b2db      	uxtb	r3, r3
 80083a8:	461a      	mov	r2, r3
 80083aa:	f107 0314 	add.w	r3, r7, #20
 80083ae:	4611      	mov	r1, r2
 80083b0:	4618      	mov	r0, r3
 80083b2:	f7fe fb93 	bl	8006adc <inc_lock>
 80083b6:	4602      	mov	r2, r0
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	691b      	ldr	r3, [r3, #16]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d102      	bne.n	80083ca <f_open+0x226>
 80083c4:	2302      	movs	r3, #2
 80083c6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 80083ca:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	f040 8095 	bne.w	80084fe <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80083d4:	693b      	ldr	r3, [r7, #16]
 80083d6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80083d8:	4611      	mov	r1, r2
 80083da:	4618      	mov	r0, r3
 80083dc:	f7ff f9b4 	bl	8007748 <ld_clust>
 80083e0:	4602      	mov	r2, r0
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80083e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80083e8:	331c      	adds	r3, #28
 80083ea:	4618      	mov	r0, r3
 80083ec:	f7fe fa10 	bl	8006810 <ld_dword>
 80083f0:	4602      	mov	r2, r0
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	2200      	movs	r2, #0
 80083fa:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80083fc:	693a      	ldr	r2, [r7, #16]
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8008402:	693b      	ldr	r3, [r7, #16]
 8008404:	88da      	ldrh	r2, [r3, #6]
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	79fa      	ldrb	r2, [r7, #7]
 800840e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	2200      	movs	r2, #0
 8008414:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	2200      	movs	r2, #0
 800841a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	2200      	movs	r2, #0
 8008420:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	3330      	adds	r3, #48	@ 0x30
 8008426:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800842a:	2100      	movs	r1, #0
 800842c:	4618      	mov	r0, r3
 800842e:	f7fe fa7a 	bl	8006926 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8008432:	79fb      	ldrb	r3, [r7, #7]
 8008434:	f003 0320 	and.w	r3, r3, #32
 8008438:	2b00      	cmp	r3, #0
 800843a:	d060      	beq.n	80084fe <f_open+0x35a>
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	68db      	ldr	r3, [r3, #12]
 8008440:	2b00      	cmp	r3, #0
 8008442:	d05c      	beq.n	80084fe <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	68da      	ldr	r2, [r3, #12]
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800844c:	693b      	ldr	r3, [r7, #16]
 800844e:	895b      	ldrh	r3, [r3, #10]
 8008450:	025b      	lsls	r3, r3, #9
 8008452:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	689b      	ldr	r3, [r3, #8]
 8008458:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	68db      	ldr	r3, [r3, #12]
 800845e:	657b      	str	r3, [r7, #84]	@ 0x54
 8008460:	e016      	b.n	8008490 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8008466:	4618      	mov	r0, r3
 8008468:	f7fe fd25 	bl	8006eb6 <get_fat>
 800846c:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800846e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008470:	2b01      	cmp	r3, #1
 8008472:	d802      	bhi.n	800847a <f_open+0x2d6>
 8008474:	2302      	movs	r3, #2
 8008476:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800847a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800847c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008480:	d102      	bne.n	8008488 <f_open+0x2e4>
 8008482:	2301      	movs	r3, #1
 8008484:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008488:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800848a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800848c:	1ad3      	subs	r3, r2, r3
 800848e:	657b      	str	r3, [r7, #84]	@ 0x54
 8008490:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008494:	2b00      	cmp	r3, #0
 8008496:	d103      	bne.n	80084a0 <f_open+0x2fc>
 8008498:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800849a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800849c:	429a      	cmp	r2, r3
 800849e:	d8e0      	bhi.n	8008462 <f_open+0x2be>
				}
				fp->clust = clst;
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80084a4:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80084a6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d127      	bne.n	80084fe <f_open+0x35a>
 80084ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80084b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d022      	beq.n	80084fe <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80084b8:	693b      	ldr	r3, [r7, #16]
 80084ba:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80084bc:	4618      	mov	r0, r3
 80084be:	f7fe fcdb 	bl	8006e78 <clust2sect>
 80084c2:	6478      	str	r0, [r7, #68]	@ 0x44
 80084c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d103      	bne.n	80084d2 <f_open+0x32e>
						res = FR_INT_ERR;
 80084ca:	2302      	movs	r3, #2
 80084cc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80084d0:	e015      	b.n	80084fe <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80084d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80084d4:	0a5a      	lsrs	r2, r3, #9
 80084d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80084d8:	441a      	add	r2, r3
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80084de:	693b      	ldr	r3, [r7, #16]
 80084e0:	7858      	ldrb	r0, [r3, #1]
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	6a1a      	ldr	r2, [r3, #32]
 80084ec:	2301      	movs	r3, #1
 80084ee:	f7fe f919 	bl	8006724 <disk_read>
 80084f2:	4603      	mov	r3, r0
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d002      	beq.n	80084fe <f_open+0x35a>
 80084f8:	2301      	movs	r3, #1
 80084fa:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80084fe:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008502:	2b00      	cmp	r3, #0
 8008504:	d002      	beq.n	800850c <f_open+0x368>
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	2200      	movs	r2, #0
 800850a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800850c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 8008510:	4618      	mov	r0, r3
 8008512:	3760      	adds	r7, #96	@ 0x60
 8008514:	46bd      	mov	sp, r7
 8008516:	bd80      	pop	{r7, pc}

08008518 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8008518:	b580      	push	{r7, lr}
 800851a:	b08e      	sub	sp, #56	@ 0x38
 800851c:	af00      	add	r7, sp, #0
 800851e:	60f8      	str	r0, [r7, #12]
 8008520:	60b9      	str	r1, [r7, #8]
 8008522:	607a      	str	r2, [r7, #4]
 8008524:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8008526:	68bb      	ldr	r3, [r7, #8]
 8008528:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 800852a:	683b      	ldr	r3, [r7, #0]
 800852c:	2200      	movs	r2, #0
 800852e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	f107 0214 	add.w	r2, r7, #20
 8008536:	4611      	mov	r1, r2
 8008538:	4618      	mov	r0, r3
 800853a:	f7ff fdb7 	bl	80080ac <validate>
 800853e:	4603      	mov	r3, r0
 8008540:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8008544:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008548:	2b00      	cmp	r3, #0
 800854a:	d107      	bne.n	800855c <f_read+0x44>
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	7d5b      	ldrb	r3, [r3, #21]
 8008550:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8008554:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008558:	2b00      	cmp	r3, #0
 800855a:	d002      	beq.n	8008562 <f_read+0x4a>
 800855c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008560:	e115      	b.n	800878e <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	7d1b      	ldrb	r3, [r3, #20]
 8008566:	f003 0301 	and.w	r3, r3, #1
 800856a:	2b00      	cmp	r3, #0
 800856c:	d101      	bne.n	8008572 <f_read+0x5a>
 800856e:	2307      	movs	r3, #7
 8008570:	e10d      	b.n	800878e <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	68da      	ldr	r2, [r3, #12]
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	699b      	ldr	r3, [r3, #24]
 800857a:	1ad3      	subs	r3, r2, r3
 800857c:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800857e:	687a      	ldr	r2, [r7, #4]
 8008580:	6a3b      	ldr	r3, [r7, #32]
 8008582:	429a      	cmp	r2, r3
 8008584:	f240 80fe 	bls.w	8008784 <f_read+0x26c>
 8008588:	6a3b      	ldr	r3, [r7, #32]
 800858a:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800858c:	e0fa      	b.n	8008784 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	699b      	ldr	r3, [r3, #24]
 8008592:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008596:	2b00      	cmp	r3, #0
 8008598:	f040 80c6 	bne.w	8008728 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	699b      	ldr	r3, [r3, #24]
 80085a0:	0a5b      	lsrs	r3, r3, #9
 80085a2:	697a      	ldr	r2, [r7, #20]
 80085a4:	8952      	ldrh	r2, [r2, #10]
 80085a6:	3a01      	subs	r2, #1
 80085a8:	4013      	ands	r3, r2
 80085aa:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 80085ac:	69fb      	ldr	r3, [r7, #28]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d12f      	bne.n	8008612 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	699b      	ldr	r3, [r3, #24]
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d103      	bne.n	80085c2 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	689b      	ldr	r3, [r3, #8]
 80085be:	633b      	str	r3, [r7, #48]	@ 0x30
 80085c0:	e013      	b.n	80085ea <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d007      	beq.n	80085da <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	699b      	ldr	r3, [r3, #24]
 80085ce:	4619      	mov	r1, r3
 80085d0:	68f8      	ldr	r0, [r7, #12]
 80085d2:	f7fe fefe 	bl	80073d2 <clmt_clust>
 80085d6:	6338      	str	r0, [r7, #48]	@ 0x30
 80085d8:	e007      	b.n	80085ea <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 80085da:	68fa      	ldr	r2, [r7, #12]
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	69db      	ldr	r3, [r3, #28]
 80085e0:	4619      	mov	r1, r3
 80085e2:	4610      	mov	r0, r2
 80085e4:	f7fe fc67 	bl	8006eb6 <get_fat>
 80085e8:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80085ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085ec:	2b01      	cmp	r3, #1
 80085ee:	d804      	bhi.n	80085fa <f_read+0xe2>
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	2202      	movs	r2, #2
 80085f4:	755a      	strb	r2, [r3, #21]
 80085f6:	2302      	movs	r3, #2
 80085f8:	e0c9      	b.n	800878e <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80085fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008600:	d104      	bne.n	800860c <f_read+0xf4>
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	2201      	movs	r2, #1
 8008606:	755a      	strb	r2, [r3, #21]
 8008608:	2301      	movs	r3, #1
 800860a:	e0c0      	b.n	800878e <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008610:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8008612:	697a      	ldr	r2, [r7, #20]
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	69db      	ldr	r3, [r3, #28]
 8008618:	4619      	mov	r1, r3
 800861a:	4610      	mov	r0, r2
 800861c:	f7fe fc2c 	bl	8006e78 <clust2sect>
 8008620:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8008622:	69bb      	ldr	r3, [r7, #24]
 8008624:	2b00      	cmp	r3, #0
 8008626:	d104      	bne.n	8008632 <f_read+0x11a>
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	2202      	movs	r2, #2
 800862c:	755a      	strb	r2, [r3, #21]
 800862e:	2302      	movs	r3, #2
 8008630:	e0ad      	b.n	800878e <f_read+0x276>
			sect += csect;
 8008632:	69ba      	ldr	r2, [r7, #24]
 8008634:	69fb      	ldr	r3, [r7, #28]
 8008636:	4413      	add	r3, r2
 8008638:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	0a5b      	lsrs	r3, r3, #9
 800863e:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8008640:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008642:	2b00      	cmp	r3, #0
 8008644:	d039      	beq.n	80086ba <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8008646:	69fa      	ldr	r2, [r7, #28]
 8008648:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800864a:	4413      	add	r3, r2
 800864c:	697a      	ldr	r2, [r7, #20]
 800864e:	8952      	ldrh	r2, [r2, #10]
 8008650:	4293      	cmp	r3, r2
 8008652:	d905      	bls.n	8008660 <f_read+0x148>
					cc = fs->csize - csect;
 8008654:	697b      	ldr	r3, [r7, #20]
 8008656:	895b      	ldrh	r3, [r3, #10]
 8008658:	461a      	mov	r2, r3
 800865a:	69fb      	ldr	r3, [r7, #28]
 800865c:	1ad3      	subs	r3, r2, r3
 800865e:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008660:	697b      	ldr	r3, [r7, #20]
 8008662:	7858      	ldrb	r0, [r3, #1]
 8008664:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008666:	69ba      	ldr	r2, [r7, #24]
 8008668:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800866a:	f7fe f85b 	bl	8006724 <disk_read>
 800866e:	4603      	mov	r3, r0
 8008670:	2b00      	cmp	r3, #0
 8008672:	d004      	beq.n	800867e <f_read+0x166>
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	2201      	movs	r2, #1
 8008678:	755a      	strb	r2, [r3, #21]
 800867a:	2301      	movs	r3, #1
 800867c:	e087      	b.n	800878e <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	7d1b      	ldrb	r3, [r3, #20]
 8008682:	b25b      	sxtb	r3, r3
 8008684:	2b00      	cmp	r3, #0
 8008686:	da14      	bge.n	80086b2 <f_read+0x19a>
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	6a1a      	ldr	r2, [r3, #32]
 800868c:	69bb      	ldr	r3, [r7, #24]
 800868e:	1ad3      	subs	r3, r2, r3
 8008690:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008692:	429a      	cmp	r2, r3
 8008694:	d90d      	bls.n	80086b2 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	6a1a      	ldr	r2, [r3, #32]
 800869a:	69bb      	ldr	r3, [r7, #24]
 800869c:	1ad3      	subs	r3, r2, r3
 800869e:	025b      	lsls	r3, r3, #9
 80086a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80086a2:	18d0      	adds	r0, r2, r3
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	3330      	adds	r3, #48	@ 0x30
 80086a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80086ac:	4619      	mov	r1, r3
 80086ae:	f7fe f919 	bl	80068e4 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 80086b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086b4:	025b      	lsls	r3, r3, #9
 80086b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 80086b8:	e050      	b.n	800875c <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	6a1b      	ldr	r3, [r3, #32]
 80086be:	69ba      	ldr	r2, [r7, #24]
 80086c0:	429a      	cmp	r2, r3
 80086c2:	d02e      	beq.n	8008722 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	7d1b      	ldrb	r3, [r3, #20]
 80086c8:	b25b      	sxtb	r3, r3
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	da18      	bge.n	8008700 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80086ce:	697b      	ldr	r3, [r7, #20]
 80086d0:	7858      	ldrb	r0, [r3, #1]
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	6a1a      	ldr	r2, [r3, #32]
 80086dc:	2301      	movs	r3, #1
 80086de:	f7fe f841 	bl	8006764 <disk_write>
 80086e2:	4603      	mov	r3, r0
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d004      	beq.n	80086f2 <f_read+0x1da>
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	2201      	movs	r2, #1
 80086ec:	755a      	strb	r2, [r3, #21]
 80086ee:	2301      	movs	r3, #1
 80086f0:	e04d      	b.n	800878e <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	7d1b      	ldrb	r3, [r3, #20]
 80086f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80086fa:	b2da      	uxtb	r2, r3
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8008700:	697b      	ldr	r3, [r7, #20]
 8008702:	7858      	ldrb	r0, [r3, #1]
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800870a:	2301      	movs	r3, #1
 800870c:	69ba      	ldr	r2, [r7, #24]
 800870e:	f7fe f809 	bl	8006724 <disk_read>
 8008712:	4603      	mov	r3, r0
 8008714:	2b00      	cmp	r3, #0
 8008716:	d004      	beq.n	8008722 <f_read+0x20a>
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	2201      	movs	r2, #1
 800871c:	755a      	strb	r2, [r3, #21]
 800871e:	2301      	movs	r3, #1
 8008720:	e035      	b.n	800878e <f_read+0x276>
			}
#endif
			fp->sect = sect;
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	69ba      	ldr	r2, [r7, #24]
 8008726:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	699b      	ldr	r3, [r3, #24]
 800872c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008730:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8008734:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8008736:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	429a      	cmp	r2, r3
 800873c:	d901      	bls.n	8008742 <f_read+0x22a>
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	699b      	ldr	r3, [r3, #24]
 800874c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008750:	4413      	add	r3, r2
 8008752:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008754:	4619      	mov	r1, r3
 8008756:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008758:	f7fe f8c4 	bl	80068e4 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800875c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800875e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008760:	4413      	add	r3, r2
 8008762:	627b      	str	r3, [r7, #36]	@ 0x24
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	699a      	ldr	r2, [r3, #24]
 8008768:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800876a:	441a      	add	r2, r3
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	619a      	str	r2, [r3, #24]
 8008770:	683b      	ldr	r3, [r7, #0]
 8008772:	681a      	ldr	r2, [r3, #0]
 8008774:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008776:	441a      	add	r2, r3
 8008778:	683b      	ldr	r3, [r7, #0]
 800877a:	601a      	str	r2, [r3, #0]
 800877c:	687a      	ldr	r2, [r7, #4]
 800877e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008780:	1ad3      	subs	r3, r2, r3
 8008782:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	2b00      	cmp	r3, #0
 8008788:	f47f af01 	bne.w	800858e <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800878c:	2300      	movs	r3, #0
}
 800878e:	4618      	mov	r0, r3
 8008790:	3738      	adds	r7, #56	@ 0x38
 8008792:	46bd      	mov	sp, r7
 8008794:	bd80      	pop	{r7, pc}

08008796 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8008796:	b580      	push	{r7, lr}
 8008798:	b086      	sub	sp, #24
 800879a:	af00      	add	r7, sp, #0
 800879c:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	f107 0208 	add.w	r2, r7, #8
 80087a4:	4611      	mov	r1, r2
 80087a6:	4618      	mov	r0, r3
 80087a8:	f7ff fc80 	bl	80080ac <validate>
 80087ac:	4603      	mov	r3, r0
 80087ae:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80087b0:	7dfb      	ldrb	r3, [r7, #23]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d168      	bne.n	8008888 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	7d1b      	ldrb	r3, [r3, #20]
 80087ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d062      	beq.n	8008888 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	7d1b      	ldrb	r3, [r3, #20]
 80087c6:	b25b      	sxtb	r3, r3
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	da15      	bge.n	80087f8 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80087cc:	68bb      	ldr	r3, [r7, #8]
 80087ce:	7858      	ldrb	r0, [r3, #1]
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	6a1a      	ldr	r2, [r3, #32]
 80087da:	2301      	movs	r3, #1
 80087dc:	f7fd ffc2 	bl	8006764 <disk_write>
 80087e0:	4603      	mov	r3, r0
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d001      	beq.n	80087ea <f_sync+0x54>
 80087e6:	2301      	movs	r3, #1
 80087e8:	e04f      	b.n	800888a <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	7d1b      	ldrb	r3, [r3, #20]
 80087ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80087f2:	b2da      	uxtb	r2, r3
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80087f8:	f7fd fa1c 	bl	8005c34 <get_fattime>
 80087fc:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80087fe:	68ba      	ldr	r2, [r7, #8]
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008804:	4619      	mov	r1, r3
 8008806:	4610      	mov	r0, r2
 8008808:	f7fe fa9a 	bl	8006d40 <move_window>
 800880c:	4603      	mov	r3, r0
 800880e:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8008810:	7dfb      	ldrb	r3, [r7, #23]
 8008812:	2b00      	cmp	r3, #0
 8008814:	d138      	bne.n	8008888 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800881a:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	330b      	adds	r3, #11
 8008820:	781a      	ldrb	r2, [r3, #0]
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	330b      	adds	r3, #11
 8008826:	f042 0220 	orr.w	r2, r2, #32
 800882a:	b2d2      	uxtb	r2, r2
 800882c:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	6818      	ldr	r0, [r3, #0]
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	689b      	ldr	r3, [r3, #8]
 8008836:	461a      	mov	r2, r3
 8008838:	68f9      	ldr	r1, [r7, #12]
 800883a:	f7fe ffa4 	bl	8007786 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	f103 021c 	add.w	r2, r3, #28
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	68db      	ldr	r3, [r3, #12]
 8008848:	4619      	mov	r1, r3
 800884a:	4610      	mov	r0, r2
 800884c:	f7fe f81e 	bl	800688c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	3316      	adds	r3, #22
 8008854:	6939      	ldr	r1, [r7, #16]
 8008856:	4618      	mov	r0, r3
 8008858:	f7fe f818 	bl	800688c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	3312      	adds	r3, #18
 8008860:	2100      	movs	r1, #0
 8008862:	4618      	mov	r0, r3
 8008864:	f7fd fff7 	bl	8006856 <st_word>
					fs->wflag = 1;
 8008868:	68bb      	ldr	r3, [r7, #8]
 800886a:	2201      	movs	r2, #1
 800886c:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800886e:	68bb      	ldr	r3, [r7, #8]
 8008870:	4618      	mov	r0, r3
 8008872:	f7fe fa93 	bl	8006d9c <sync_fs>
 8008876:	4603      	mov	r3, r0
 8008878:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	7d1b      	ldrb	r3, [r3, #20]
 800887e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008882:	b2da      	uxtb	r2, r3
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8008888:	7dfb      	ldrb	r3, [r7, #23]
}
 800888a:	4618      	mov	r0, r3
 800888c:	3718      	adds	r7, #24
 800888e:	46bd      	mov	sp, r7
 8008890:	bd80      	pop	{r7, pc}

08008892 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8008892:	b580      	push	{r7, lr}
 8008894:	b084      	sub	sp, #16
 8008896:	af00      	add	r7, sp, #0
 8008898:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800889a:	6878      	ldr	r0, [r7, #4]
 800889c:	f7ff ff7b 	bl	8008796 <f_sync>
 80088a0:	4603      	mov	r3, r0
 80088a2:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80088a4:	7bfb      	ldrb	r3, [r7, #15]
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d118      	bne.n	80088dc <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	f107 0208 	add.w	r2, r7, #8
 80088b0:	4611      	mov	r1, r2
 80088b2:	4618      	mov	r0, r3
 80088b4:	f7ff fbfa 	bl	80080ac <validate>
 80088b8:	4603      	mov	r3, r0
 80088ba:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80088bc:	7bfb      	ldrb	r3, [r7, #15]
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d10c      	bne.n	80088dc <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	691b      	ldr	r3, [r3, #16]
 80088c6:	4618      	mov	r0, r3
 80088c8:	f7fe f996 	bl	8006bf8 <dec_lock>
 80088cc:	4603      	mov	r3, r0
 80088ce:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80088d0:	7bfb      	ldrb	r3, [r7, #15]
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d102      	bne.n	80088dc <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	2200      	movs	r2, #0
 80088da:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80088dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80088de:	4618      	mov	r0, r3
 80088e0:	3710      	adds	r7, #16
 80088e2:	46bd      	mov	sp, r7
 80088e4:	bd80      	pop	{r7, pc}

080088e6 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 80088e6:	b580      	push	{r7, lr}
 80088e8:	b088      	sub	sp, #32
 80088ea:	af00      	add	r7, sp, #0
 80088ec:	60f8      	str	r0, [r7, #12]
 80088ee:	60b9      	str	r1, [r7, #8]
 80088f0:	607a      	str	r2, [r7, #4]
	int n = 0;
 80088f2:	2300      	movs	r3, #0
 80088f4:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 80088fa:	e01c      	b.n	8008936 <f_gets+0x50>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 80088fc:	f107 0310 	add.w	r3, r7, #16
 8008900:	f107 0114 	add.w	r1, r7, #20
 8008904:	2201      	movs	r2, #1
 8008906:	6878      	ldr	r0, [r7, #4]
 8008908:	f7ff fe06 	bl	8008518 <f_read>
		if (rc != 1) break;
 800890c:	693b      	ldr	r3, [r7, #16]
 800890e:	2b01      	cmp	r3, #1
 8008910:	d117      	bne.n	8008942 <f_gets+0x5c>
		c = s[0];
 8008912:	7d3b      	ldrb	r3, [r7, #20]
 8008914:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8008916:	7dfb      	ldrb	r3, [r7, #23]
 8008918:	2b0d      	cmp	r3, #13
 800891a:	d00b      	beq.n	8008934 <f_gets+0x4e>
		*p++ = c;
 800891c:	69bb      	ldr	r3, [r7, #24]
 800891e:	1c5a      	adds	r2, r3, #1
 8008920:	61ba      	str	r2, [r7, #24]
 8008922:	7dfa      	ldrb	r2, [r7, #23]
 8008924:	701a      	strb	r2, [r3, #0]
		n++;
 8008926:	69fb      	ldr	r3, [r7, #28]
 8008928:	3301      	adds	r3, #1
 800892a:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 800892c:	7dfb      	ldrb	r3, [r7, #23]
 800892e:	2b0a      	cmp	r3, #10
 8008930:	d009      	beq.n	8008946 <f_gets+0x60>
 8008932:	e000      	b.n	8008936 <f_gets+0x50>
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8008934:	bf00      	nop
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8008936:	68bb      	ldr	r3, [r7, #8]
 8008938:	3b01      	subs	r3, #1
 800893a:	69fa      	ldr	r2, [r7, #28]
 800893c:	429a      	cmp	r2, r3
 800893e:	dbdd      	blt.n	80088fc <f_gets+0x16>
 8008940:	e002      	b.n	8008948 <f_gets+0x62>
		if (rc != 1) break;
 8008942:	bf00      	nop
 8008944:	e000      	b.n	8008948 <f_gets+0x62>
		if (c == '\n') break;		/* Break on EOL */
 8008946:	bf00      	nop
	}
	*p = 0;
 8008948:	69bb      	ldr	r3, [r7, #24]
 800894a:	2200      	movs	r2, #0
 800894c:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 800894e:	69fb      	ldr	r3, [r7, #28]
 8008950:	2b00      	cmp	r3, #0
 8008952:	d001      	beq.n	8008958 <f_gets+0x72>
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	e000      	b.n	800895a <f_gets+0x74>
 8008958:	2300      	movs	r3, #0
}
 800895a:	4618      	mov	r0, r3
 800895c:	3720      	adds	r7, #32
 800895e:	46bd      	mov	sp, r7
 8008960:	bd80      	pop	{r7, pc}
	...

08008964 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8008964:	b480      	push	{r7}
 8008966:	b087      	sub	sp, #28
 8008968:	af00      	add	r7, sp, #0
 800896a:	60f8      	str	r0, [r7, #12]
 800896c:	60b9      	str	r1, [r7, #8]
 800896e:	4613      	mov	r3, r2
 8008970:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8008972:	2301      	movs	r3, #1
 8008974:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8008976:	2300      	movs	r3, #0
 8008978:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800897a:	4b1f      	ldr	r3, [pc, #124]	@ (80089f8 <FATFS_LinkDriverEx+0x94>)
 800897c:	7a5b      	ldrb	r3, [r3, #9]
 800897e:	b2db      	uxtb	r3, r3
 8008980:	2b00      	cmp	r3, #0
 8008982:	d131      	bne.n	80089e8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8008984:	4b1c      	ldr	r3, [pc, #112]	@ (80089f8 <FATFS_LinkDriverEx+0x94>)
 8008986:	7a5b      	ldrb	r3, [r3, #9]
 8008988:	b2db      	uxtb	r3, r3
 800898a:	461a      	mov	r2, r3
 800898c:	4b1a      	ldr	r3, [pc, #104]	@ (80089f8 <FATFS_LinkDriverEx+0x94>)
 800898e:	2100      	movs	r1, #0
 8008990:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8008992:	4b19      	ldr	r3, [pc, #100]	@ (80089f8 <FATFS_LinkDriverEx+0x94>)
 8008994:	7a5b      	ldrb	r3, [r3, #9]
 8008996:	b2db      	uxtb	r3, r3
 8008998:	4a17      	ldr	r2, [pc, #92]	@ (80089f8 <FATFS_LinkDriverEx+0x94>)
 800899a:	009b      	lsls	r3, r3, #2
 800899c:	4413      	add	r3, r2
 800899e:	68fa      	ldr	r2, [r7, #12]
 80089a0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80089a2:	4b15      	ldr	r3, [pc, #84]	@ (80089f8 <FATFS_LinkDriverEx+0x94>)
 80089a4:	7a5b      	ldrb	r3, [r3, #9]
 80089a6:	b2db      	uxtb	r3, r3
 80089a8:	461a      	mov	r2, r3
 80089aa:	4b13      	ldr	r3, [pc, #76]	@ (80089f8 <FATFS_LinkDriverEx+0x94>)
 80089ac:	4413      	add	r3, r2
 80089ae:	79fa      	ldrb	r2, [r7, #7]
 80089b0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80089b2:	4b11      	ldr	r3, [pc, #68]	@ (80089f8 <FATFS_LinkDriverEx+0x94>)
 80089b4:	7a5b      	ldrb	r3, [r3, #9]
 80089b6:	b2db      	uxtb	r3, r3
 80089b8:	1c5a      	adds	r2, r3, #1
 80089ba:	b2d1      	uxtb	r1, r2
 80089bc:	4a0e      	ldr	r2, [pc, #56]	@ (80089f8 <FATFS_LinkDriverEx+0x94>)
 80089be:	7251      	strb	r1, [r2, #9]
 80089c0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80089c2:	7dbb      	ldrb	r3, [r7, #22]
 80089c4:	3330      	adds	r3, #48	@ 0x30
 80089c6:	b2da      	uxtb	r2, r3
 80089c8:	68bb      	ldr	r3, [r7, #8]
 80089ca:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80089cc:	68bb      	ldr	r3, [r7, #8]
 80089ce:	3301      	adds	r3, #1
 80089d0:	223a      	movs	r2, #58	@ 0x3a
 80089d2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80089d4:	68bb      	ldr	r3, [r7, #8]
 80089d6:	3302      	adds	r3, #2
 80089d8:	222f      	movs	r2, #47	@ 0x2f
 80089da:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80089dc:	68bb      	ldr	r3, [r7, #8]
 80089de:	3303      	adds	r3, #3
 80089e0:	2200      	movs	r2, #0
 80089e2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80089e4:	2300      	movs	r3, #0
 80089e6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80089e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80089ea:	4618      	mov	r0, r3
 80089ec:	371c      	adds	r7, #28
 80089ee:	46bd      	mov	sp, r7
 80089f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f4:	4770      	bx	lr
 80089f6:	bf00      	nop
 80089f8:	2000054c 	.word	0x2000054c

080089fc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80089fc:	b580      	push	{r7, lr}
 80089fe:	b082      	sub	sp, #8
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	6078      	str	r0, [r7, #4]
 8008a04:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8008a06:	2200      	movs	r2, #0
 8008a08:	6839      	ldr	r1, [r7, #0]
 8008a0a:	6878      	ldr	r0, [r7, #4]
 8008a0c:	f7ff ffaa 	bl	8008964 <FATFS_LinkDriverEx>
 8008a10:	4603      	mov	r3, r0
}
 8008a12:	4618      	mov	r0, r3
 8008a14:	3708      	adds	r7, #8
 8008a16:	46bd      	mov	sp, r7
 8008a18:	bd80      	pop	{r7, pc}

08008a1a <atof>:
 8008a1a:	2100      	movs	r1, #0
 8008a1c:	f000 be08 	b.w	8009630 <strtod>

08008a20 <atoi>:
 8008a20:	220a      	movs	r2, #10
 8008a22:	2100      	movs	r1, #0
 8008a24:	f000 be8a 	b.w	800973c <strtol>

08008a28 <sulp>:
 8008a28:	b570      	push	{r4, r5, r6, lr}
 8008a2a:	4604      	mov	r4, r0
 8008a2c:	460d      	mov	r5, r1
 8008a2e:	ec45 4b10 	vmov	d0, r4, r5
 8008a32:	4616      	mov	r6, r2
 8008a34:	f002 f83c 	bl	800aab0 <__ulp>
 8008a38:	ec51 0b10 	vmov	r0, r1, d0
 8008a3c:	b17e      	cbz	r6, 8008a5e <sulp+0x36>
 8008a3e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008a42:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	dd09      	ble.n	8008a5e <sulp+0x36>
 8008a4a:	051b      	lsls	r3, r3, #20
 8008a4c:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8008a50:	2400      	movs	r4, #0
 8008a52:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8008a56:	4622      	mov	r2, r4
 8008a58:	462b      	mov	r3, r5
 8008a5a:	f7f7 fddd 	bl	8000618 <__aeabi_dmul>
 8008a5e:	ec41 0b10 	vmov	d0, r0, r1
 8008a62:	bd70      	pop	{r4, r5, r6, pc}
 8008a64:	0000      	movs	r0, r0
	...

08008a68 <_strtod_l>:
 8008a68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a6c:	b09f      	sub	sp, #124	@ 0x7c
 8008a6e:	460c      	mov	r4, r1
 8008a70:	9217      	str	r2, [sp, #92]	@ 0x5c
 8008a72:	2200      	movs	r2, #0
 8008a74:	921a      	str	r2, [sp, #104]	@ 0x68
 8008a76:	9005      	str	r0, [sp, #20]
 8008a78:	f04f 0a00 	mov.w	sl, #0
 8008a7c:	f04f 0b00 	mov.w	fp, #0
 8008a80:	460a      	mov	r2, r1
 8008a82:	9219      	str	r2, [sp, #100]	@ 0x64
 8008a84:	7811      	ldrb	r1, [r2, #0]
 8008a86:	292b      	cmp	r1, #43	@ 0x2b
 8008a88:	d04a      	beq.n	8008b20 <_strtod_l+0xb8>
 8008a8a:	d838      	bhi.n	8008afe <_strtod_l+0x96>
 8008a8c:	290d      	cmp	r1, #13
 8008a8e:	d832      	bhi.n	8008af6 <_strtod_l+0x8e>
 8008a90:	2908      	cmp	r1, #8
 8008a92:	d832      	bhi.n	8008afa <_strtod_l+0x92>
 8008a94:	2900      	cmp	r1, #0
 8008a96:	d03b      	beq.n	8008b10 <_strtod_l+0xa8>
 8008a98:	2200      	movs	r2, #0
 8008a9a:	920b      	str	r2, [sp, #44]	@ 0x2c
 8008a9c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8008a9e:	782a      	ldrb	r2, [r5, #0]
 8008aa0:	2a30      	cmp	r2, #48	@ 0x30
 8008aa2:	f040 80b3 	bne.w	8008c0c <_strtod_l+0x1a4>
 8008aa6:	786a      	ldrb	r2, [r5, #1]
 8008aa8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008aac:	2a58      	cmp	r2, #88	@ 0x58
 8008aae:	d16e      	bne.n	8008b8e <_strtod_l+0x126>
 8008ab0:	9302      	str	r3, [sp, #8]
 8008ab2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008ab4:	9301      	str	r3, [sp, #4]
 8008ab6:	ab1a      	add	r3, sp, #104	@ 0x68
 8008ab8:	9300      	str	r3, [sp, #0]
 8008aba:	4a8e      	ldr	r2, [pc, #568]	@ (8008cf4 <_strtod_l+0x28c>)
 8008abc:	9805      	ldr	r0, [sp, #20]
 8008abe:	ab1b      	add	r3, sp, #108	@ 0x6c
 8008ac0:	a919      	add	r1, sp, #100	@ 0x64
 8008ac2:	f001 f8ef 	bl	8009ca4 <__gethex>
 8008ac6:	f010 060f 	ands.w	r6, r0, #15
 8008aca:	4604      	mov	r4, r0
 8008acc:	d005      	beq.n	8008ada <_strtod_l+0x72>
 8008ace:	2e06      	cmp	r6, #6
 8008ad0:	d128      	bne.n	8008b24 <_strtod_l+0xbc>
 8008ad2:	3501      	adds	r5, #1
 8008ad4:	2300      	movs	r3, #0
 8008ad6:	9519      	str	r5, [sp, #100]	@ 0x64
 8008ad8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008ada:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	f040 858e 	bne.w	80095fe <_strtod_l+0xb96>
 8008ae2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008ae4:	b1cb      	cbz	r3, 8008b1a <_strtod_l+0xb2>
 8008ae6:	4652      	mov	r2, sl
 8008ae8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8008aec:	ec43 2b10 	vmov	d0, r2, r3
 8008af0:	b01f      	add	sp, #124	@ 0x7c
 8008af2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008af6:	2920      	cmp	r1, #32
 8008af8:	d1ce      	bne.n	8008a98 <_strtod_l+0x30>
 8008afa:	3201      	adds	r2, #1
 8008afc:	e7c1      	b.n	8008a82 <_strtod_l+0x1a>
 8008afe:	292d      	cmp	r1, #45	@ 0x2d
 8008b00:	d1ca      	bne.n	8008a98 <_strtod_l+0x30>
 8008b02:	2101      	movs	r1, #1
 8008b04:	910b      	str	r1, [sp, #44]	@ 0x2c
 8008b06:	1c51      	adds	r1, r2, #1
 8008b08:	9119      	str	r1, [sp, #100]	@ 0x64
 8008b0a:	7852      	ldrb	r2, [r2, #1]
 8008b0c:	2a00      	cmp	r2, #0
 8008b0e:	d1c5      	bne.n	8008a9c <_strtod_l+0x34>
 8008b10:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008b12:	9419      	str	r4, [sp, #100]	@ 0x64
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	f040 8570 	bne.w	80095fa <_strtod_l+0xb92>
 8008b1a:	4652      	mov	r2, sl
 8008b1c:	465b      	mov	r3, fp
 8008b1e:	e7e5      	b.n	8008aec <_strtod_l+0x84>
 8008b20:	2100      	movs	r1, #0
 8008b22:	e7ef      	b.n	8008b04 <_strtod_l+0x9c>
 8008b24:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008b26:	b13a      	cbz	r2, 8008b38 <_strtod_l+0xd0>
 8008b28:	2135      	movs	r1, #53	@ 0x35
 8008b2a:	a81c      	add	r0, sp, #112	@ 0x70
 8008b2c:	f002 f8ba 	bl	800aca4 <__copybits>
 8008b30:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008b32:	9805      	ldr	r0, [sp, #20]
 8008b34:	f001 fc88 	bl	800a448 <_Bfree>
 8008b38:	3e01      	subs	r6, #1
 8008b3a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8008b3c:	2e04      	cmp	r6, #4
 8008b3e:	d806      	bhi.n	8008b4e <_strtod_l+0xe6>
 8008b40:	e8df f006 	tbb	[pc, r6]
 8008b44:	201d0314 	.word	0x201d0314
 8008b48:	14          	.byte	0x14
 8008b49:	00          	.byte	0x00
 8008b4a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8008b4e:	05e1      	lsls	r1, r4, #23
 8008b50:	bf48      	it	mi
 8008b52:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8008b56:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008b5a:	0d1b      	lsrs	r3, r3, #20
 8008b5c:	051b      	lsls	r3, r3, #20
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d1bb      	bne.n	8008ada <_strtod_l+0x72>
 8008b62:	f000 ffa7 	bl	8009ab4 <__errno>
 8008b66:	2322      	movs	r3, #34	@ 0x22
 8008b68:	6003      	str	r3, [r0, #0]
 8008b6a:	e7b6      	b.n	8008ada <_strtod_l+0x72>
 8008b6c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8008b70:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8008b74:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8008b78:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008b7c:	e7e7      	b.n	8008b4e <_strtod_l+0xe6>
 8008b7e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8008cfc <_strtod_l+0x294>
 8008b82:	e7e4      	b.n	8008b4e <_strtod_l+0xe6>
 8008b84:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8008b88:	f04f 3aff 	mov.w	sl, #4294967295
 8008b8c:	e7df      	b.n	8008b4e <_strtod_l+0xe6>
 8008b8e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008b90:	1c5a      	adds	r2, r3, #1
 8008b92:	9219      	str	r2, [sp, #100]	@ 0x64
 8008b94:	785b      	ldrb	r3, [r3, #1]
 8008b96:	2b30      	cmp	r3, #48	@ 0x30
 8008b98:	d0f9      	beq.n	8008b8e <_strtod_l+0x126>
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d09d      	beq.n	8008ada <_strtod_l+0x72>
 8008b9e:	2301      	movs	r3, #1
 8008ba0:	9309      	str	r3, [sp, #36]	@ 0x24
 8008ba2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008ba4:	930c      	str	r3, [sp, #48]	@ 0x30
 8008ba6:	2300      	movs	r3, #0
 8008ba8:	9308      	str	r3, [sp, #32]
 8008baa:	930a      	str	r3, [sp, #40]	@ 0x28
 8008bac:	461f      	mov	r7, r3
 8008bae:	220a      	movs	r2, #10
 8008bb0:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8008bb2:	7805      	ldrb	r5, [r0, #0]
 8008bb4:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8008bb8:	b2d9      	uxtb	r1, r3
 8008bba:	2909      	cmp	r1, #9
 8008bbc:	d928      	bls.n	8008c10 <_strtod_l+0x1a8>
 8008bbe:	494e      	ldr	r1, [pc, #312]	@ (8008cf8 <_strtod_l+0x290>)
 8008bc0:	2201      	movs	r2, #1
 8008bc2:	f000 ff0b 	bl	80099dc <strncmp>
 8008bc6:	2800      	cmp	r0, #0
 8008bc8:	d032      	beq.n	8008c30 <_strtod_l+0x1c8>
 8008bca:	2000      	movs	r0, #0
 8008bcc:	462a      	mov	r2, r5
 8008bce:	4681      	mov	r9, r0
 8008bd0:	463d      	mov	r5, r7
 8008bd2:	4603      	mov	r3, r0
 8008bd4:	2a65      	cmp	r2, #101	@ 0x65
 8008bd6:	d001      	beq.n	8008bdc <_strtod_l+0x174>
 8008bd8:	2a45      	cmp	r2, #69	@ 0x45
 8008bda:	d114      	bne.n	8008c06 <_strtod_l+0x19e>
 8008bdc:	b91d      	cbnz	r5, 8008be6 <_strtod_l+0x17e>
 8008bde:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008be0:	4302      	orrs	r2, r0
 8008be2:	d095      	beq.n	8008b10 <_strtod_l+0xa8>
 8008be4:	2500      	movs	r5, #0
 8008be6:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8008be8:	1c62      	adds	r2, r4, #1
 8008bea:	9219      	str	r2, [sp, #100]	@ 0x64
 8008bec:	7862      	ldrb	r2, [r4, #1]
 8008bee:	2a2b      	cmp	r2, #43	@ 0x2b
 8008bf0:	d077      	beq.n	8008ce2 <_strtod_l+0x27a>
 8008bf2:	2a2d      	cmp	r2, #45	@ 0x2d
 8008bf4:	d07b      	beq.n	8008cee <_strtod_l+0x286>
 8008bf6:	f04f 0c00 	mov.w	ip, #0
 8008bfa:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8008bfe:	2909      	cmp	r1, #9
 8008c00:	f240 8082 	bls.w	8008d08 <_strtod_l+0x2a0>
 8008c04:	9419      	str	r4, [sp, #100]	@ 0x64
 8008c06:	f04f 0800 	mov.w	r8, #0
 8008c0a:	e0a2      	b.n	8008d52 <_strtod_l+0x2ea>
 8008c0c:	2300      	movs	r3, #0
 8008c0e:	e7c7      	b.n	8008ba0 <_strtod_l+0x138>
 8008c10:	2f08      	cmp	r7, #8
 8008c12:	bfd5      	itete	le
 8008c14:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8008c16:	9908      	ldrgt	r1, [sp, #32]
 8008c18:	fb02 3301 	mlale	r3, r2, r1, r3
 8008c1c:	fb02 3301 	mlagt	r3, r2, r1, r3
 8008c20:	f100 0001 	add.w	r0, r0, #1
 8008c24:	bfd4      	ite	le
 8008c26:	930a      	strle	r3, [sp, #40]	@ 0x28
 8008c28:	9308      	strgt	r3, [sp, #32]
 8008c2a:	3701      	adds	r7, #1
 8008c2c:	9019      	str	r0, [sp, #100]	@ 0x64
 8008c2e:	e7bf      	b.n	8008bb0 <_strtod_l+0x148>
 8008c30:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008c32:	1c5a      	adds	r2, r3, #1
 8008c34:	9219      	str	r2, [sp, #100]	@ 0x64
 8008c36:	785a      	ldrb	r2, [r3, #1]
 8008c38:	b37f      	cbz	r7, 8008c9a <_strtod_l+0x232>
 8008c3a:	4681      	mov	r9, r0
 8008c3c:	463d      	mov	r5, r7
 8008c3e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8008c42:	2b09      	cmp	r3, #9
 8008c44:	d912      	bls.n	8008c6c <_strtod_l+0x204>
 8008c46:	2301      	movs	r3, #1
 8008c48:	e7c4      	b.n	8008bd4 <_strtod_l+0x16c>
 8008c4a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008c4c:	1c5a      	adds	r2, r3, #1
 8008c4e:	9219      	str	r2, [sp, #100]	@ 0x64
 8008c50:	785a      	ldrb	r2, [r3, #1]
 8008c52:	3001      	adds	r0, #1
 8008c54:	2a30      	cmp	r2, #48	@ 0x30
 8008c56:	d0f8      	beq.n	8008c4a <_strtod_l+0x1e2>
 8008c58:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8008c5c:	2b08      	cmp	r3, #8
 8008c5e:	f200 84d3 	bhi.w	8009608 <_strtod_l+0xba0>
 8008c62:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008c64:	930c      	str	r3, [sp, #48]	@ 0x30
 8008c66:	4681      	mov	r9, r0
 8008c68:	2000      	movs	r0, #0
 8008c6a:	4605      	mov	r5, r0
 8008c6c:	3a30      	subs	r2, #48	@ 0x30
 8008c6e:	f100 0301 	add.w	r3, r0, #1
 8008c72:	d02a      	beq.n	8008cca <_strtod_l+0x262>
 8008c74:	4499      	add	r9, r3
 8008c76:	eb00 0c05 	add.w	ip, r0, r5
 8008c7a:	462b      	mov	r3, r5
 8008c7c:	210a      	movs	r1, #10
 8008c7e:	4563      	cmp	r3, ip
 8008c80:	d10d      	bne.n	8008c9e <_strtod_l+0x236>
 8008c82:	1c69      	adds	r1, r5, #1
 8008c84:	4401      	add	r1, r0
 8008c86:	4428      	add	r0, r5
 8008c88:	2808      	cmp	r0, #8
 8008c8a:	dc16      	bgt.n	8008cba <_strtod_l+0x252>
 8008c8c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008c8e:	230a      	movs	r3, #10
 8008c90:	fb03 2300 	mla	r3, r3, r0, r2
 8008c94:	930a      	str	r3, [sp, #40]	@ 0x28
 8008c96:	2300      	movs	r3, #0
 8008c98:	e018      	b.n	8008ccc <_strtod_l+0x264>
 8008c9a:	4638      	mov	r0, r7
 8008c9c:	e7da      	b.n	8008c54 <_strtod_l+0x1ec>
 8008c9e:	2b08      	cmp	r3, #8
 8008ca0:	f103 0301 	add.w	r3, r3, #1
 8008ca4:	dc03      	bgt.n	8008cae <_strtod_l+0x246>
 8008ca6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8008ca8:	434e      	muls	r6, r1
 8008caa:	960a      	str	r6, [sp, #40]	@ 0x28
 8008cac:	e7e7      	b.n	8008c7e <_strtod_l+0x216>
 8008cae:	2b10      	cmp	r3, #16
 8008cb0:	bfde      	ittt	le
 8008cb2:	9e08      	ldrle	r6, [sp, #32]
 8008cb4:	434e      	mulle	r6, r1
 8008cb6:	9608      	strle	r6, [sp, #32]
 8008cb8:	e7e1      	b.n	8008c7e <_strtod_l+0x216>
 8008cba:	280f      	cmp	r0, #15
 8008cbc:	dceb      	bgt.n	8008c96 <_strtod_l+0x22e>
 8008cbe:	9808      	ldr	r0, [sp, #32]
 8008cc0:	230a      	movs	r3, #10
 8008cc2:	fb03 2300 	mla	r3, r3, r0, r2
 8008cc6:	9308      	str	r3, [sp, #32]
 8008cc8:	e7e5      	b.n	8008c96 <_strtod_l+0x22e>
 8008cca:	4629      	mov	r1, r5
 8008ccc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008cce:	1c50      	adds	r0, r2, #1
 8008cd0:	9019      	str	r0, [sp, #100]	@ 0x64
 8008cd2:	7852      	ldrb	r2, [r2, #1]
 8008cd4:	4618      	mov	r0, r3
 8008cd6:	460d      	mov	r5, r1
 8008cd8:	e7b1      	b.n	8008c3e <_strtod_l+0x1d6>
 8008cda:	f04f 0900 	mov.w	r9, #0
 8008cde:	2301      	movs	r3, #1
 8008ce0:	e77d      	b.n	8008bde <_strtod_l+0x176>
 8008ce2:	f04f 0c00 	mov.w	ip, #0
 8008ce6:	1ca2      	adds	r2, r4, #2
 8008ce8:	9219      	str	r2, [sp, #100]	@ 0x64
 8008cea:	78a2      	ldrb	r2, [r4, #2]
 8008cec:	e785      	b.n	8008bfa <_strtod_l+0x192>
 8008cee:	f04f 0c01 	mov.w	ip, #1
 8008cf2:	e7f8      	b.n	8008ce6 <_strtod_l+0x27e>
 8008cf4:	0800bf58 	.word	0x0800bf58
 8008cf8:	0800bf34 	.word	0x0800bf34
 8008cfc:	7ff00000 	.word	0x7ff00000
 8008d00:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008d02:	1c51      	adds	r1, r2, #1
 8008d04:	9119      	str	r1, [sp, #100]	@ 0x64
 8008d06:	7852      	ldrb	r2, [r2, #1]
 8008d08:	2a30      	cmp	r2, #48	@ 0x30
 8008d0a:	d0f9      	beq.n	8008d00 <_strtod_l+0x298>
 8008d0c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8008d10:	2908      	cmp	r1, #8
 8008d12:	f63f af78 	bhi.w	8008c06 <_strtod_l+0x19e>
 8008d16:	3a30      	subs	r2, #48	@ 0x30
 8008d18:	920e      	str	r2, [sp, #56]	@ 0x38
 8008d1a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008d1c:	920f      	str	r2, [sp, #60]	@ 0x3c
 8008d1e:	f04f 080a 	mov.w	r8, #10
 8008d22:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008d24:	1c56      	adds	r6, r2, #1
 8008d26:	9619      	str	r6, [sp, #100]	@ 0x64
 8008d28:	7852      	ldrb	r2, [r2, #1]
 8008d2a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8008d2e:	f1be 0f09 	cmp.w	lr, #9
 8008d32:	d939      	bls.n	8008da8 <_strtod_l+0x340>
 8008d34:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8008d36:	1a76      	subs	r6, r6, r1
 8008d38:	2e08      	cmp	r6, #8
 8008d3a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8008d3e:	dc03      	bgt.n	8008d48 <_strtod_l+0x2e0>
 8008d40:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8008d42:	4588      	cmp	r8, r1
 8008d44:	bfa8      	it	ge
 8008d46:	4688      	movge	r8, r1
 8008d48:	f1bc 0f00 	cmp.w	ip, #0
 8008d4c:	d001      	beq.n	8008d52 <_strtod_l+0x2ea>
 8008d4e:	f1c8 0800 	rsb	r8, r8, #0
 8008d52:	2d00      	cmp	r5, #0
 8008d54:	d14e      	bne.n	8008df4 <_strtod_l+0x38c>
 8008d56:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008d58:	4308      	orrs	r0, r1
 8008d5a:	f47f aebe 	bne.w	8008ada <_strtod_l+0x72>
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	f47f aed6 	bne.w	8008b10 <_strtod_l+0xa8>
 8008d64:	2a69      	cmp	r2, #105	@ 0x69
 8008d66:	d028      	beq.n	8008dba <_strtod_l+0x352>
 8008d68:	dc25      	bgt.n	8008db6 <_strtod_l+0x34e>
 8008d6a:	2a49      	cmp	r2, #73	@ 0x49
 8008d6c:	d025      	beq.n	8008dba <_strtod_l+0x352>
 8008d6e:	2a4e      	cmp	r2, #78	@ 0x4e
 8008d70:	f47f aece 	bne.w	8008b10 <_strtod_l+0xa8>
 8008d74:	499b      	ldr	r1, [pc, #620]	@ (8008fe4 <_strtod_l+0x57c>)
 8008d76:	a819      	add	r0, sp, #100	@ 0x64
 8008d78:	f001 f9b6 	bl	800a0e8 <__match>
 8008d7c:	2800      	cmp	r0, #0
 8008d7e:	f43f aec7 	beq.w	8008b10 <_strtod_l+0xa8>
 8008d82:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008d84:	781b      	ldrb	r3, [r3, #0]
 8008d86:	2b28      	cmp	r3, #40	@ 0x28
 8008d88:	d12e      	bne.n	8008de8 <_strtod_l+0x380>
 8008d8a:	4997      	ldr	r1, [pc, #604]	@ (8008fe8 <_strtod_l+0x580>)
 8008d8c:	aa1c      	add	r2, sp, #112	@ 0x70
 8008d8e:	a819      	add	r0, sp, #100	@ 0x64
 8008d90:	f001 f9be 	bl	800a110 <__hexnan>
 8008d94:	2805      	cmp	r0, #5
 8008d96:	d127      	bne.n	8008de8 <_strtod_l+0x380>
 8008d98:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008d9a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8008d9e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8008da2:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8008da6:	e698      	b.n	8008ada <_strtod_l+0x72>
 8008da8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8008daa:	fb08 2101 	mla	r1, r8, r1, r2
 8008dae:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8008db2:	920e      	str	r2, [sp, #56]	@ 0x38
 8008db4:	e7b5      	b.n	8008d22 <_strtod_l+0x2ba>
 8008db6:	2a6e      	cmp	r2, #110	@ 0x6e
 8008db8:	e7da      	b.n	8008d70 <_strtod_l+0x308>
 8008dba:	498c      	ldr	r1, [pc, #560]	@ (8008fec <_strtod_l+0x584>)
 8008dbc:	a819      	add	r0, sp, #100	@ 0x64
 8008dbe:	f001 f993 	bl	800a0e8 <__match>
 8008dc2:	2800      	cmp	r0, #0
 8008dc4:	f43f aea4 	beq.w	8008b10 <_strtod_l+0xa8>
 8008dc8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008dca:	4989      	ldr	r1, [pc, #548]	@ (8008ff0 <_strtod_l+0x588>)
 8008dcc:	3b01      	subs	r3, #1
 8008dce:	a819      	add	r0, sp, #100	@ 0x64
 8008dd0:	9319      	str	r3, [sp, #100]	@ 0x64
 8008dd2:	f001 f989 	bl	800a0e8 <__match>
 8008dd6:	b910      	cbnz	r0, 8008dde <_strtod_l+0x376>
 8008dd8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008dda:	3301      	adds	r3, #1
 8008ddc:	9319      	str	r3, [sp, #100]	@ 0x64
 8008dde:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8009000 <_strtod_l+0x598>
 8008de2:	f04f 0a00 	mov.w	sl, #0
 8008de6:	e678      	b.n	8008ada <_strtod_l+0x72>
 8008de8:	4882      	ldr	r0, [pc, #520]	@ (8008ff4 <_strtod_l+0x58c>)
 8008dea:	f000 fea1 	bl	8009b30 <nan>
 8008dee:	ec5b ab10 	vmov	sl, fp, d0
 8008df2:	e672      	b.n	8008ada <_strtod_l+0x72>
 8008df4:	eba8 0309 	sub.w	r3, r8, r9
 8008df8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008dfa:	9309      	str	r3, [sp, #36]	@ 0x24
 8008dfc:	2f00      	cmp	r7, #0
 8008dfe:	bf08      	it	eq
 8008e00:	462f      	moveq	r7, r5
 8008e02:	2d10      	cmp	r5, #16
 8008e04:	462c      	mov	r4, r5
 8008e06:	bfa8      	it	ge
 8008e08:	2410      	movge	r4, #16
 8008e0a:	f7f7 fb8b 	bl	8000524 <__aeabi_ui2d>
 8008e0e:	2d09      	cmp	r5, #9
 8008e10:	4682      	mov	sl, r0
 8008e12:	468b      	mov	fp, r1
 8008e14:	dc13      	bgt.n	8008e3e <_strtod_l+0x3d6>
 8008e16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	f43f ae5e 	beq.w	8008ada <_strtod_l+0x72>
 8008e1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e20:	dd78      	ble.n	8008f14 <_strtod_l+0x4ac>
 8008e22:	2b16      	cmp	r3, #22
 8008e24:	dc5f      	bgt.n	8008ee6 <_strtod_l+0x47e>
 8008e26:	4974      	ldr	r1, [pc, #464]	@ (8008ff8 <_strtod_l+0x590>)
 8008e28:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008e2c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008e30:	4652      	mov	r2, sl
 8008e32:	465b      	mov	r3, fp
 8008e34:	f7f7 fbf0 	bl	8000618 <__aeabi_dmul>
 8008e38:	4682      	mov	sl, r0
 8008e3a:	468b      	mov	fp, r1
 8008e3c:	e64d      	b.n	8008ada <_strtod_l+0x72>
 8008e3e:	4b6e      	ldr	r3, [pc, #440]	@ (8008ff8 <_strtod_l+0x590>)
 8008e40:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008e44:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8008e48:	f7f7 fbe6 	bl	8000618 <__aeabi_dmul>
 8008e4c:	4682      	mov	sl, r0
 8008e4e:	9808      	ldr	r0, [sp, #32]
 8008e50:	468b      	mov	fp, r1
 8008e52:	f7f7 fb67 	bl	8000524 <__aeabi_ui2d>
 8008e56:	4602      	mov	r2, r0
 8008e58:	460b      	mov	r3, r1
 8008e5a:	4650      	mov	r0, sl
 8008e5c:	4659      	mov	r1, fp
 8008e5e:	f7f7 fa25 	bl	80002ac <__adddf3>
 8008e62:	2d0f      	cmp	r5, #15
 8008e64:	4682      	mov	sl, r0
 8008e66:	468b      	mov	fp, r1
 8008e68:	ddd5      	ble.n	8008e16 <_strtod_l+0x3ae>
 8008e6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e6c:	1b2c      	subs	r4, r5, r4
 8008e6e:	441c      	add	r4, r3
 8008e70:	2c00      	cmp	r4, #0
 8008e72:	f340 8096 	ble.w	8008fa2 <_strtod_l+0x53a>
 8008e76:	f014 030f 	ands.w	r3, r4, #15
 8008e7a:	d00a      	beq.n	8008e92 <_strtod_l+0x42a>
 8008e7c:	495e      	ldr	r1, [pc, #376]	@ (8008ff8 <_strtod_l+0x590>)
 8008e7e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008e82:	4652      	mov	r2, sl
 8008e84:	465b      	mov	r3, fp
 8008e86:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008e8a:	f7f7 fbc5 	bl	8000618 <__aeabi_dmul>
 8008e8e:	4682      	mov	sl, r0
 8008e90:	468b      	mov	fp, r1
 8008e92:	f034 040f 	bics.w	r4, r4, #15
 8008e96:	d073      	beq.n	8008f80 <_strtod_l+0x518>
 8008e98:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8008e9c:	dd48      	ble.n	8008f30 <_strtod_l+0x4c8>
 8008e9e:	2400      	movs	r4, #0
 8008ea0:	46a0      	mov	r8, r4
 8008ea2:	940a      	str	r4, [sp, #40]	@ 0x28
 8008ea4:	46a1      	mov	r9, r4
 8008ea6:	9a05      	ldr	r2, [sp, #20]
 8008ea8:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8009000 <_strtod_l+0x598>
 8008eac:	2322      	movs	r3, #34	@ 0x22
 8008eae:	6013      	str	r3, [r2, #0]
 8008eb0:	f04f 0a00 	mov.w	sl, #0
 8008eb4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	f43f ae0f 	beq.w	8008ada <_strtod_l+0x72>
 8008ebc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008ebe:	9805      	ldr	r0, [sp, #20]
 8008ec0:	f001 fac2 	bl	800a448 <_Bfree>
 8008ec4:	9805      	ldr	r0, [sp, #20]
 8008ec6:	4649      	mov	r1, r9
 8008ec8:	f001 fabe 	bl	800a448 <_Bfree>
 8008ecc:	9805      	ldr	r0, [sp, #20]
 8008ece:	4641      	mov	r1, r8
 8008ed0:	f001 faba 	bl	800a448 <_Bfree>
 8008ed4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008ed6:	9805      	ldr	r0, [sp, #20]
 8008ed8:	f001 fab6 	bl	800a448 <_Bfree>
 8008edc:	9805      	ldr	r0, [sp, #20]
 8008ede:	4621      	mov	r1, r4
 8008ee0:	f001 fab2 	bl	800a448 <_Bfree>
 8008ee4:	e5f9      	b.n	8008ada <_strtod_l+0x72>
 8008ee6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008ee8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8008eec:	4293      	cmp	r3, r2
 8008eee:	dbbc      	blt.n	8008e6a <_strtod_l+0x402>
 8008ef0:	4c41      	ldr	r4, [pc, #260]	@ (8008ff8 <_strtod_l+0x590>)
 8008ef2:	f1c5 050f 	rsb	r5, r5, #15
 8008ef6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8008efa:	4652      	mov	r2, sl
 8008efc:	465b      	mov	r3, fp
 8008efe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008f02:	f7f7 fb89 	bl	8000618 <__aeabi_dmul>
 8008f06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f08:	1b5d      	subs	r5, r3, r5
 8008f0a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8008f0e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008f12:	e78f      	b.n	8008e34 <_strtod_l+0x3cc>
 8008f14:	3316      	adds	r3, #22
 8008f16:	dba8      	blt.n	8008e6a <_strtod_l+0x402>
 8008f18:	4b37      	ldr	r3, [pc, #220]	@ (8008ff8 <_strtod_l+0x590>)
 8008f1a:	eba9 0808 	sub.w	r8, r9, r8
 8008f1e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8008f22:	e9d8 2300 	ldrd	r2, r3, [r8]
 8008f26:	4650      	mov	r0, sl
 8008f28:	4659      	mov	r1, fp
 8008f2a:	f7f7 fc9f 	bl	800086c <__aeabi_ddiv>
 8008f2e:	e783      	b.n	8008e38 <_strtod_l+0x3d0>
 8008f30:	4b32      	ldr	r3, [pc, #200]	@ (8008ffc <_strtod_l+0x594>)
 8008f32:	9308      	str	r3, [sp, #32]
 8008f34:	2300      	movs	r3, #0
 8008f36:	1124      	asrs	r4, r4, #4
 8008f38:	4650      	mov	r0, sl
 8008f3a:	4659      	mov	r1, fp
 8008f3c:	461e      	mov	r6, r3
 8008f3e:	2c01      	cmp	r4, #1
 8008f40:	dc21      	bgt.n	8008f86 <_strtod_l+0x51e>
 8008f42:	b10b      	cbz	r3, 8008f48 <_strtod_l+0x4e0>
 8008f44:	4682      	mov	sl, r0
 8008f46:	468b      	mov	fp, r1
 8008f48:	492c      	ldr	r1, [pc, #176]	@ (8008ffc <_strtod_l+0x594>)
 8008f4a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8008f4e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8008f52:	4652      	mov	r2, sl
 8008f54:	465b      	mov	r3, fp
 8008f56:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008f5a:	f7f7 fb5d 	bl	8000618 <__aeabi_dmul>
 8008f5e:	4b28      	ldr	r3, [pc, #160]	@ (8009000 <_strtod_l+0x598>)
 8008f60:	460a      	mov	r2, r1
 8008f62:	400b      	ands	r3, r1
 8008f64:	4927      	ldr	r1, [pc, #156]	@ (8009004 <_strtod_l+0x59c>)
 8008f66:	428b      	cmp	r3, r1
 8008f68:	4682      	mov	sl, r0
 8008f6a:	d898      	bhi.n	8008e9e <_strtod_l+0x436>
 8008f6c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8008f70:	428b      	cmp	r3, r1
 8008f72:	bf86      	itte	hi
 8008f74:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8009008 <_strtod_l+0x5a0>
 8008f78:	f04f 3aff 	movhi.w	sl, #4294967295
 8008f7c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8008f80:	2300      	movs	r3, #0
 8008f82:	9308      	str	r3, [sp, #32]
 8008f84:	e07a      	b.n	800907c <_strtod_l+0x614>
 8008f86:	07e2      	lsls	r2, r4, #31
 8008f88:	d505      	bpl.n	8008f96 <_strtod_l+0x52e>
 8008f8a:	9b08      	ldr	r3, [sp, #32]
 8008f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f90:	f7f7 fb42 	bl	8000618 <__aeabi_dmul>
 8008f94:	2301      	movs	r3, #1
 8008f96:	9a08      	ldr	r2, [sp, #32]
 8008f98:	3208      	adds	r2, #8
 8008f9a:	3601      	adds	r6, #1
 8008f9c:	1064      	asrs	r4, r4, #1
 8008f9e:	9208      	str	r2, [sp, #32]
 8008fa0:	e7cd      	b.n	8008f3e <_strtod_l+0x4d6>
 8008fa2:	d0ed      	beq.n	8008f80 <_strtod_l+0x518>
 8008fa4:	4264      	negs	r4, r4
 8008fa6:	f014 020f 	ands.w	r2, r4, #15
 8008faa:	d00a      	beq.n	8008fc2 <_strtod_l+0x55a>
 8008fac:	4b12      	ldr	r3, [pc, #72]	@ (8008ff8 <_strtod_l+0x590>)
 8008fae:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008fb2:	4650      	mov	r0, sl
 8008fb4:	4659      	mov	r1, fp
 8008fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fba:	f7f7 fc57 	bl	800086c <__aeabi_ddiv>
 8008fbe:	4682      	mov	sl, r0
 8008fc0:	468b      	mov	fp, r1
 8008fc2:	1124      	asrs	r4, r4, #4
 8008fc4:	d0dc      	beq.n	8008f80 <_strtod_l+0x518>
 8008fc6:	2c1f      	cmp	r4, #31
 8008fc8:	dd20      	ble.n	800900c <_strtod_l+0x5a4>
 8008fca:	2400      	movs	r4, #0
 8008fcc:	46a0      	mov	r8, r4
 8008fce:	940a      	str	r4, [sp, #40]	@ 0x28
 8008fd0:	46a1      	mov	r9, r4
 8008fd2:	9a05      	ldr	r2, [sp, #20]
 8008fd4:	2322      	movs	r3, #34	@ 0x22
 8008fd6:	f04f 0a00 	mov.w	sl, #0
 8008fda:	f04f 0b00 	mov.w	fp, #0
 8008fde:	6013      	str	r3, [r2, #0]
 8008fe0:	e768      	b.n	8008eb4 <_strtod_l+0x44c>
 8008fe2:	bf00      	nop
 8008fe4:	0800bf3f 	.word	0x0800bf3f
 8008fe8:	0800bf44 	.word	0x0800bf44
 8008fec:	0800bf36 	.word	0x0800bf36
 8008ff0:	0800bf39 	.word	0x0800bf39
 8008ff4:	0800c2ee 	.word	0x0800c2ee
 8008ff8:	0800c1b8 	.word	0x0800c1b8
 8008ffc:	0800c190 	.word	0x0800c190
 8009000:	7ff00000 	.word	0x7ff00000
 8009004:	7ca00000 	.word	0x7ca00000
 8009008:	7fefffff 	.word	0x7fefffff
 800900c:	f014 0310 	ands.w	r3, r4, #16
 8009010:	bf18      	it	ne
 8009012:	236a      	movne	r3, #106	@ 0x6a
 8009014:	4ea9      	ldr	r6, [pc, #676]	@ (80092bc <_strtod_l+0x854>)
 8009016:	9308      	str	r3, [sp, #32]
 8009018:	4650      	mov	r0, sl
 800901a:	4659      	mov	r1, fp
 800901c:	2300      	movs	r3, #0
 800901e:	07e2      	lsls	r2, r4, #31
 8009020:	d504      	bpl.n	800902c <_strtod_l+0x5c4>
 8009022:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009026:	f7f7 faf7 	bl	8000618 <__aeabi_dmul>
 800902a:	2301      	movs	r3, #1
 800902c:	1064      	asrs	r4, r4, #1
 800902e:	f106 0608 	add.w	r6, r6, #8
 8009032:	d1f4      	bne.n	800901e <_strtod_l+0x5b6>
 8009034:	b10b      	cbz	r3, 800903a <_strtod_l+0x5d2>
 8009036:	4682      	mov	sl, r0
 8009038:	468b      	mov	fp, r1
 800903a:	9b08      	ldr	r3, [sp, #32]
 800903c:	b1b3      	cbz	r3, 800906c <_strtod_l+0x604>
 800903e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8009042:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8009046:	2b00      	cmp	r3, #0
 8009048:	4659      	mov	r1, fp
 800904a:	dd0f      	ble.n	800906c <_strtod_l+0x604>
 800904c:	2b1f      	cmp	r3, #31
 800904e:	dd55      	ble.n	80090fc <_strtod_l+0x694>
 8009050:	2b34      	cmp	r3, #52	@ 0x34
 8009052:	bfde      	ittt	le
 8009054:	f04f 33ff 	movle.w	r3, #4294967295
 8009058:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800905c:	4093      	lslle	r3, r2
 800905e:	f04f 0a00 	mov.w	sl, #0
 8009062:	bfcc      	ite	gt
 8009064:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8009068:	ea03 0b01 	andle.w	fp, r3, r1
 800906c:	2200      	movs	r2, #0
 800906e:	2300      	movs	r3, #0
 8009070:	4650      	mov	r0, sl
 8009072:	4659      	mov	r1, fp
 8009074:	f7f7 fd38 	bl	8000ae8 <__aeabi_dcmpeq>
 8009078:	2800      	cmp	r0, #0
 800907a:	d1a6      	bne.n	8008fca <_strtod_l+0x562>
 800907c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800907e:	9300      	str	r3, [sp, #0]
 8009080:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8009082:	9805      	ldr	r0, [sp, #20]
 8009084:	462b      	mov	r3, r5
 8009086:	463a      	mov	r2, r7
 8009088:	f001 fa46 	bl	800a518 <__s2b>
 800908c:	900a      	str	r0, [sp, #40]	@ 0x28
 800908e:	2800      	cmp	r0, #0
 8009090:	f43f af05 	beq.w	8008e9e <_strtod_l+0x436>
 8009094:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009096:	2a00      	cmp	r2, #0
 8009098:	eba9 0308 	sub.w	r3, r9, r8
 800909c:	bfa8      	it	ge
 800909e:	2300      	movge	r3, #0
 80090a0:	9312      	str	r3, [sp, #72]	@ 0x48
 80090a2:	2400      	movs	r4, #0
 80090a4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80090a8:	9316      	str	r3, [sp, #88]	@ 0x58
 80090aa:	46a0      	mov	r8, r4
 80090ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80090ae:	9805      	ldr	r0, [sp, #20]
 80090b0:	6859      	ldr	r1, [r3, #4]
 80090b2:	f001 f989 	bl	800a3c8 <_Balloc>
 80090b6:	4681      	mov	r9, r0
 80090b8:	2800      	cmp	r0, #0
 80090ba:	f43f aef4 	beq.w	8008ea6 <_strtod_l+0x43e>
 80090be:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80090c0:	691a      	ldr	r2, [r3, #16]
 80090c2:	3202      	adds	r2, #2
 80090c4:	f103 010c 	add.w	r1, r3, #12
 80090c8:	0092      	lsls	r2, r2, #2
 80090ca:	300c      	adds	r0, #12
 80090cc:	f000 fd1f 	bl	8009b0e <memcpy>
 80090d0:	ec4b ab10 	vmov	d0, sl, fp
 80090d4:	9805      	ldr	r0, [sp, #20]
 80090d6:	aa1c      	add	r2, sp, #112	@ 0x70
 80090d8:	a91b      	add	r1, sp, #108	@ 0x6c
 80090da:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80090de:	f001 fd57 	bl	800ab90 <__d2b>
 80090e2:	901a      	str	r0, [sp, #104]	@ 0x68
 80090e4:	2800      	cmp	r0, #0
 80090e6:	f43f aede 	beq.w	8008ea6 <_strtod_l+0x43e>
 80090ea:	9805      	ldr	r0, [sp, #20]
 80090ec:	2101      	movs	r1, #1
 80090ee:	f001 faa9 	bl	800a644 <__i2b>
 80090f2:	4680      	mov	r8, r0
 80090f4:	b948      	cbnz	r0, 800910a <_strtod_l+0x6a2>
 80090f6:	f04f 0800 	mov.w	r8, #0
 80090fa:	e6d4      	b.n	8008ea6 <_strtod_l+0x43e>
 80090fc:	f04f 32ff 	mov.w	r2, #4294967295
 8009100:	fa02 f303 	lsl.w	r3, r2, r3
 8009104:	ea03 0a0a 	and.w	sl, r3, sl
 8009108:	e7b0      	b.n	800906c <_strtod_l+0x604>
 800910a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800910c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800910e:	2d00      	cmp	r5, #0
 8009110:	bfab      	itete	ge
 8009112:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8009114:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8009116:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8009118:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800911a:	bfac      	ite	ge
 800911c:	18ef      	addge	r7, r5, r3
 800911e:	1b5e      	sublt	r6, r3, r5
 8009120:	9b08      	ldr	r3, [sp, #32]
 8009122:	1aed      	subs	r5, r5, r3
 8009124:	4415      	add	r5, r2
 8009126:	4b66      	ldr	r3, [pc, #408]	@ (80092c0 <_strtod_l+0x858>)
 8009128:	3d01      	subs	r5, #1
 800912a:	429d      	cmp	r5, r3
 800912c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8009130:	da50      	bge.n	80091d4 <_strtod_l+0x76c>
 8009132:	1b5b      	subs	r3, r3, r5
 8009134:	2b1f      	cmp	r3, #31
 8009136:	eba2 0203 	sub.w	r2, r2, r3
 800913a:	f04f 0101 	mov.w	r1, #1
 800913e:	dc3d      	bgt.n	80091bc <_strtod_l+0x754>
 8009140:	fa01 f303 	lsl.w	r3, r1, r3
 8009144:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009146:	2300      	movs	r3, #0
 8009148:	9310      	str	r3, [sp, #64]	@ 0x40
 800914a:	18bd      	adds	r5, r7, r2
 800914c:	9b08      	ldr	r3, [sp, #32]
 800914e:	42af      	cmp	r7, r5
 8009150:	4416      	add	r6, r2
 8009152:	441e      	add	r6, r3
 8009154:	463b      	mov	r3, r7
 8009156:	bfa8      	it	ge
 8009158:	462b      	movge	r3, r5
 800915a:	42b3      	cmp	r3, r6
 800915c:	bfa8      	it	ge
 800915e:	4633      	movge	r3, r6
 8009160:	2b00      	cmp	r3, #0
 8009162:	bfc2      	ittt	gt
 8009164:	1aed      	subgt	r5, r5, r3
 8009166:	1af6      	subgt	r6, r6, r3
 8009168:	1aff      	subgt	r7, r7, r3
 800916a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800916c:	2b00      	cmp	r3, #0
 800916e:	dd16      	ble.n	800919e <_strtod_l+0x736>
 8009170:	4641      	mov	r1, r8
 8009172:	9805      	ldr	r0, [sp, #20]
 8009174:	461a      	mov	r2, r3
 8009176:	f001 fb25 	bl	800a7c4 <__pow5mult>
 800917a:	4680      	mov	r8, r0
 800917c:	2800      	cmp	r0, #0
 800917e:	d0ba      	beq.n	80090f6 <_strtod_l+0x68e>
 8009180:	4601      	mov	r1, r0
 8009182:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009184:	9805      	ldr	r0, [sp, #20]
 8009186:	f001 fa73 	bl	800a670 <__multiply>
 800918a:	900e      	str	r0, [sp, #56]	@ 0x38
 800918c:	2800      	cmp	r0, #0
 800918e:	f43f ae8a 	beq.w	8008ea6 <_strtod_l+0x43e>
 8009192:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009194:	9805      	ldr	r0, [sp, #20]
 8009196:	f001 f957 	bl	800a448 <_Bfree>
 800919a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800919c:	931a      	str	r3, [sp, #104]	@ 0x68
 800919e:	2d00      	cmp	r5, #0
 80091a0:	dc1d      	bgt.n	80091de <_strtod_l+0x776>
 80091a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	dd23      	ble.n	80091f0 <_strtod_l+0x788>
 80091a8:	4649      	mov	r1, r9
 80091aa:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80091ac:	9805      	ldr	r0, [sp, #20]
 80091ae:	f001 fb09 	bl	800a7c4 <__pow5mult>
 80091b2:	4681      	mov	r9, r0
 80091b4:	b9e0      	cbnz	r0, 80091f0 <_strtod_l+0x788>
 80091b6:	f04f 0900 	mov.w	r9, #0
 80091ba:	e674      	b.n	8008ea6 <_strtod_l+0x43e>
 80091bc:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 80091c0:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 80091c4:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80091c8:	35e2      	adds	r5, #226	@ 0xe2
 80091ca:	fa01 f305 	lsl.w	r3, r1, r5
 80091ce:	9310      	str	r3, [sp, #64]	@ 0x40
 80091d0:	9113      	str	r1, [sp, #76]	@ 0x4c
 80091d2:	e7ba      	b.n	800914a <_strtod_l+0x6e2>
 80091d4:	2300      	movs	r3, #0
 80091d6:	9310      	str	r3, [sp, #64]	@ 0x40
 80091d8:	2301      	movs	r3, #1
 80091da:	9313      	str	r3, [sp, #76]	@ 0x4c
 80091dc:	e7b5      	b.n	800914a <_strtod_l+0x6e2>
 80091de:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80091e0:	9805      	ldr	r0, [sp, #20]
 80091e2:	462a      	mov	r2, r5
 80091e4:	f001 fb48 	bl	800a878 <__lshift>
 80091e8:	901a      	str	r0, [sp, #104]	@ 0x68
 80091ea:	2800      	cmp	r0, #0
 80091ec:	d1d9      	bne.n	80091a2 <_strtod_l+0x73a>
 80091ee:	e65a      	b.n	8008ea6 <_strtod_l+0x43e>
 80091f0:	2e00      	cmp	r6, #0
 80091f2:	dd07      	ble.n	8009204 <_strtod_l+0x79c>
 80091f4:	4649      	mov	r1, r9
 80091f6:	9805      	ldr	r0, [sp, #20]
 80091f8:	4632      	mov	r2, r6
 80091fa:	f001 fb3d 	bl	800a878 <__lshift>
 80091fe:	4681      	mov	r9, r0
 8009200:	2800      	cmp	r0, #0
 8009202:	d0d8      	beq.n	80091b6 <_strtod_l+0x74e>
 8009204:	2f00      	cmp	r7, #0
 8009206:	dd08      	ble.n	800921a <_strtod_l+0x7b2>
 8009208:	4641      	mov	r1, r8
 800920a:	9805      	ldr	r0, [sp, #20]
 800920c:	463a      	mov	r2, r7
 800920e:	f001 fb33 	bl	800a878 <__lshift>
 8009212:	4680      	mov	r8, r0
 8009214:	2800      	cmp	r0, #0
 8009216:	f43f ae46 	beq.w	8008ea6 <_strtod_l+0x43e>
 800921a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800921c:	9805      	ldr	r0, [sp, #20]
 800921e:	464a      	mov	r2, r9
 8009220:	f001 fbb2 	bl	800a988 <__mdiff>
 8009224:	4604      	mov	r4, r0
 8009226:	2800      	cmp	r0, #0
 8009228:	f43f ae3d 	beq.w	8008ea6 <_strtod_l+0x43e>
 800922c:	68c3      	ldr	r3, [r0, #12]
 800922e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009230:	2300      	movs	r3, #0
 8009232:	60c3      	str	r3, [r0, #12]
 8009234:	4641      	mov	r1, r8
 8009236:	f001 fb8b 	bl	800a950 <__mcmp>
 800923a:	2800      	cmp	r0, #0
 800923c:	da46      	bge.n	80092cc <_strtod_l+0x864>
 800923e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009240:	ea53 030a 	orrs.w	r3, r3, sl
 8009244:	d16c      	bne.n	8009320 <_strtod_l+0x8b8>
 8009246:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800924a:	2b00      	cmp	r3, #0
 800924c:	d168      	bne.n	8009320 <_strtod_l+0x8b8>
 800924e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009252:	0d1b      	lsrs	r3, r3, #20
 8009254:	051b      	lsls	r3, r3, #20
 8009256:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800925a:	d961      	bls.n	8009320 <_strtod_l+0x8b8>
 800925c:	6963      	ldr	r3, [r4, #20]
 800925e:	b913      	cbnz	r3, 8009266 <_strtod_l+0x7fe>
 8009260:	6923      	ldr	r3, [r4, #16]
 8009262:	2b01      	cmp	r3, #1
 8009264:	dd5c      	ble.n	8009320 <_strtod_l+0x8b8>
 8009266:	4621      	mov	r1, r4
 8009268:	2201      	movs	r2, #1
 800926a:	9805      	ldr	r0, [sp, #20]
 800926c:	f001 fb04 	bl	800a878 <__lshift>
 8009270:	4641      	mov	r1, r8
 8009272:	4604      	mov	r4, r0
 8009274:	f001 fb6c 	bl	800a950 <__mcmp>
 8009278:	2800      	cmp	r0, #0
 800927a:	dd51      	ble.n	8009320 <_strtod_l+0x8b8>
 800927c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009280:	9a08      	ldr	r2, [sp, #32]
 8009282:	0d1b      	lsrs	r3, r3, #20
 8009284:	051b      	lsls	r3, r3, #20
 8009286:	2a00      	cmp	r2, #0
 8009288:	d06b      	beq.n	8009362 <_strtod_l+0x8fa>
 800928a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800928e:	d868      	bhi.n	8009362 <_strtod_l+0x8fa>
 8009290:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8009294:	f67f ae9d 	bls.w	8008fd2 <_strtod_l+0x56a>
 8009298:	4b0a      	ldr	r3, [pc, #40]	@ (80092c4 <_strtod_l+0x85c>)
 800929a:	4650      	mov	r0, sl
 800929c:	4659      	mov	r1, fp
 800929e:	2200      	movs	r2, #0
 80092a0:	f7f7 f9ba 	bl	8000618 <__aeabi_dmul>
 80092a4:	4b08      	ldr	r3, [pc, #32]	@ (80092c8 <_strtod_l+0x860>)
 80092a6:	400b      	ands	r3, r1
 80092a8:	4682      	mov	sl, r0
 80092aa:	468b      	mov	fp, r1
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	f47f ae05 	bne.w	8008ebc <_strtod_l+0x454>
 80092b2:	9a05      	ldr	r2, [sp, #20]
 80092b4:	2322      	movs	r3, #34	@ 0x22
 80092b6:	6013      	str	r3, [r2, #0]
 80092b8:	e600      	b.n	8008ebc <_strtod_l+0x454>
 80092ba:	bf00      	nop
 80092bc:	0800bf70 	.word	0x0800bf70
 80092c0:	fffffc02 	.word	0xfffffc02
 80092c4:	39500000 	.word	0x39500000
 80092c8:	7ff00000 	.word	0x7ff00000
 80092cc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80092d0:	d165      	bne.n	800939e <_strtod_l+0x936>
 80092d2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80092d4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80092d8:	b35a      	cbz	r2, 8009332 <_strtod_l+0x8ca>
 80092da:	4a9f      	ldr	r2, [pc, #636]	@ (8009558 <_strtod_l+0xaf0>)
 80092dc:	4293      	cmp	r3, r2
 80092de:	d12b      	bne.n	8009338 <_strtod_l+0x8d0>
 80092e0:	9b08      	ldr	r3, [sp, #32]
 80092e2:	4651      	mov	r1, sl
 80092e4:	b303      	cbz	r3, 8009328 <_strtod_l+0x8c0>
 80092e6:	4b9d      	ldr	r3, [pc, #628]	@ (800955c <_strtod_l+0xaf4>)
 80092e8:	465a      	mov	r2, fp
 80092ea:	4013      	ands	r3, r2
 80092ec:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80092f0:	f04f 32ff 	mov.w	r2, #4294967295
 80092f4:	d81b      	bhi.n	800932e <_strtod_l+0x8c6>
 80092f6:	0d1b      	lsrs	r3, r3, #20
 80092f8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80092fc:	fa02 f303 	lsl.w	r3, r2, r3
 8009300:	4299      	cmp	r1, r3
 8009302:	d119      	bne.n	8009338 <_strtod_l+0x8d0>
 8009304:	4b96      	ldr	r3, [pc, #600]	@ (8009560 <_strtod_l+0xaf8>)
 8009306:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009308:	429a      	cmp	r2, r3
 800930a:	d102      	bne.n	8009312 <_strtod_l+0x8aa>
 800930c:	3101      	adds	r1, #1
 800930e:	f43f adca 	beq.w	8008ea6 <_strtod_l+0x43e>
 8009312:	4b92      	ldr	r3, [pc, #584]	@ (800955c <_strtod_l+0xaf4>)
 8009314:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009316:	401a      	ands	r2, r3
 8009318:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800931c:	f04f 0a00 	mov.w	sl, #0
 8009320:	9b08      	ldr	r3, [sp, #32]
 8009322:	2b00      	cmp	r3, #0
 8009324:	d1b8      	bne.n	8009298 <_strtod_l+0x830>
 8009326:	e5c9      	b.n	8008ebc <_strtod_l+0x454>
 8009328:	f04f 33ff 	mov.w	r3, #4294967295
 800932c:	e7e8      	b.n	8009300 <_strtod_l+0x898>
 800932e:	4613      	mov	r3, r2
 8009330:	e7e6      	b.n	8009300 <_strtod_l+0x898>
 8009332:	ea53 030a 	orrs.w	r3, r3, sl
 8009336:	d0a1      	beq.n	800927c <_strtod_l+0x814>
 8009338:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800933a:	b1db      	cbz	r3, 8009374 <_strtod_l+0x90c>
 800933c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800933e:	4213      	tst	r3, r2
 8009340:	d0ee      	beq.n	8009320 <_strtod_l+0x8b8>
 8009342:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009344:	9a08      	ldr	r2, [sp, #32]
 8009346:	4650      	mov	r0, sl
 8009348:	4659      	mov	r1, fp
 800934a:	b1bb      	cbz	r3, 800937c <_strtod_l+0x914>
 800934c:	f7ff fb6c 	bl	8008a28 <sulp>
 8009350:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009354:	ec53 2b10 	vmov	r2, r3, d0
 8009358:	f7f6 ffa8 	bl	80002ac <__adddf3>
 800935c:	4682      	mov	sl, r0
 800935e:	468b      	mov	fp, r1
 8009360:	e7de      	b.n	8009320 <_strtod_l+0x8b8>
 8009362:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8009366:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800936a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800936e:	f04f 3aff 	mov.w	sl, #4294967295
 8009372:	e7d5      	b.n	8009320 <_strtod_l+0x8b8>
 8009374:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009376:	ea13 0f0a 	tst.w	r3, sl
 800937a:	e7e1      	b.n	8009340 <_strtod_l+0x8d8>
 800937c:	f7ff fb54 	bl	8008a28 <sulp>
 8009380:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009384:	ec53 2b10 	vmov	r2, r3, d0
 8009388:	f7f6 ff8e 	bl	80002a8 <__aeabi_dsub>
 800938c:	2200      	movs	r2, #0
 800938e:	2300      	movs	r3, #0
 8009390:	4682      	mov	sl, r0
 8009392:	468b      	mov	fp, r1
 8009394:	f7f7 fba8 	bl	8000ae8 <__aeabi_dcmpeq>
 8009398:	2800      	cmp	r0, #0
 800939a:	d0c1      	beq.n	8009320 <_strtod_l+0x8b8>
 800939c:	e619      	b.n	8008fd2 <_strtod_l+0x56a>
 800939e:	4641      	mov	r1, r8
 80093a0:	4620      	mov	r0, r4
 80093a2:	f001 fc4d 	bl	800ac40 <__ratio>
 80093a6:	ec57 6b10 	vmov	r6, r7, d0
 80093aa:	2200      	movs	r2, #0
 80093ac:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80093b0:	4630      	mov	r0, r6
 80093b2:	4639      	mov	r1, r7
 80093b4:	f7f7 fbac 	bl	8000b10 <__aeabi_dcmple>
 80093b8:	2800      	cmp	r0, #0
 80093ba:	d06f      	beq.n	800949c <_strtod_l+0xa34>
 80093bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d17a      	bne.n	80094b8 <_strtod_l+0xa50>
 80093c2:	f1ba 0f00 	cmp.w	sl, #0
 80093c6:	d158      	bne.n	800947a <_strtod_l+0xa12>
 80093c8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80093ca:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d15a      	bne.n	8009488 <_strtod_l+0xa20>
 80093d2:	4b64      	ldr	r3, [pc, #400]	@ (8009564 <_strtod_l+0xafc>)
 80093d4:	2200      	movs	r2, #0
 80093d6:	4630      	mov	r0, r6
 80093d8:	4639      	mov	r1, r7
 80093da:	f7f7 fb8f 	bl	8000afc <__aeabi_dcmplt>
 80093de:	2800      	cmp	r0, #0
 80093e0:	d159      	bne.n	8009496 <_strtod_l+0xa2e>
 80093e2:	4630      	mov	r0, r6
 80093e4:	4639      	mov	r1, r7
 80093e6:	4b60      	ldr	r3, [pc, #384]	@ (8009568 <_strtod_l+0xb00>)
 80093e8:	2200      	movs	r2, #0
 80093ea:	f7f7 f915 	bl	8000618 <__aeabi_dmul>
 80093ee:	4606      	mov	r6, r0
 80093f0:	460f      	mov	r7, r1
 80093f2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 80093f6:	9606      	str	r6, [sp, #24]
 80093f8:	9307      	str	r3, [sp, #28]
 80093fa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80093fe:	4d57      	ldr	r5, [pc, #348]	@ (800955c <_strtod_l+0xaf4>)
 8009400:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009404:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009406:	401d      	ands	r5, r3
 8009408:	4b58      	ldr	r3, [pc, #352]	@ (800956c <_strtod_l+0xb04>)
 800940a:	429d      	cmp	r5, r3
 800940c:	f040 80b2 	bne.w	8009574 <_strtod_l+0xb0c>
 8009410:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009412:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8009416:	ec4b ab10 	vmov	d0, sl, fp
 800941a:	f001 fb49 	bl	800aab0 <__ulp>
 800941e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009422:	ec51 0b10 	vmov	r0, r1, d0
 8009426:	f7f7 f8f7 	bl	8000618 <__aeabi_dmul>
 800942a:	4652      	mov	r2, sl
 800942c:	465b      	mov	r3, fp
 800942e:	f7f6 ff3d 	bl	80002ac <__adddf3>
 8009432:	460b      	mov	r3, r1
 8009434:	4949      	ldr	r1, [pc, #292]	@ (800955c <_strtod_l+0xaf4>)
 8009436:	4a4e      	ldr	r2, [pc, #312]	@ (8009570 <_strtod_l+0xb08>)
 8009438:	4019      	ands	r1, r3
 800943a:	4291      	cmp	r1, r2
 800943c:	4682      	mov	sl, r0
 800943e:	d942      	bls.n	80094c6 <_strtod_l+0xa5e>
 8009440:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009442:	4b47      	ldr	r3, [pc, #284]	@ (8009560 <_strtod_l+0xaf8>)
 8009444:	429a      	cmp	r2, r3
 8009446:	d103      	bne.n	8009450 <_strtod_l+0x9e8>
 8009448:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800944a:	3301      	adds	r3, #1
 800944c:	f43f ad2b 	beq.w	8008ea6 <_strtod_l+0x43e>
 8009450:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8009560 <_strtod_l+0xaf8>
 8009454:	f04f 3aff 	mov.w	sl, #4294967295
 8009458:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800945a:	9805      	ldr	r0, [sp, #20]
 800945c:	f000 fff4 	bl	800a448 <_Bfree>
 8009460:	9805      	ldr	r0, [sp, #20]
 8009462:	4649      	mov	r1, r9
 8009464:	f000 fff0 	bl	800a448 <_Bfree>
 8009468:	9805      	ldr	r0, [sp, #20]
 800946a:	4641      	mov	r1, r8
 800946c:	f000 ffec 	bl	800a448 <_Bfree>
 8009470:	9805      	ldr	r0, [sp, #20]
 8009472:	4621      	mov	r1, r4
 8009474:	f000 ffe8 	bl	800a448 <_Bfree>
 8009478:	e618      	b.n	80090ac <_strtod_l+0x644>
 800947a:	f1ba 0f01 	cmp.w	sl, #1
 800947e:	d103      	bne.n	8009488 <_strtod_l+0xa20>
 8009480:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009482:	2b00      	cmp	r3, #0
 8009484:	f43f ada5 	beq.w	8008fd2 <_strtod_l+0x56a>
 8009488:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8009538 <_strtod_l+0xad0>
 800948c:	4f35      	ldr	r7, [pc, #212]	@ (8009564 <_strtod_l+0xafc>)
 800948e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009492:	2600      	movs	r6, #0
 8009494:	e7b1      	b.n	80093fa <_strtod_l+0x992>
 8009496:	4f34      	ldr	r7, [pc, #208]	@ (8009568 <_strtod_l+0xb00>)
 8009498:	2600      	movs	r6, #0
 800949a:	e7aa      	b.n	80093f2 <_strtod_l+0x98a>
 800949c:	4b32      	ldr	r3, [pc, #200]	@ (8009568 <_strtod_l+0xb00>)
 800949e:	4630      	mov	r0, r6
 80094a0:	4639      	mov	r1, r7
 80094a2:	2200      	movs	r2, #0
 80094a4:	f7f7 f8b8 	bl	8000618 <__aeabi_dmul>
 80094a8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80094aa:	4606      	mov	r6, r0
 80094ac:	460f      	mov	r7, r1
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d09f      	beq.n	80093f2 <_strtod_l+0x98a>
 80094b2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80094b6:	e7a0      	b.n	80093fa <_strtod_l+0x992>
 80094b8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8009540 <_strtod_l+0xad8>
 80094bc:	ed8d 7b06 	vstr	d7, [sp, #24]
 80094c0:	ec57 6b17 	vmov	r6, r7, d7
 80094c4:	e799      	b.n	80093fa <_strtod_l+0x992>
 80094c6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80094ca:	9b08      	ldr	r3, [sp, #32]
 80094cc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d1c1      	bne.n	8009458 <_strtod_l+0x9f0>
 80094d4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80094d8:	0d1b      	lsrs	r3, r3, #20
 80094da:	051b      	lsls	r3, r3, #20
 80094dc:	429d      	cmp	r5, r3
 80094de:	d1bb      	bne.n	8009458 <_strtod_l+0x9f0>
 80094e0:	4630      	mov	r0, r6
 80094e2:	4639      	mov	r1, r7
 80094e4:	f7f7 fbf8 	bl	8000cd8 <__aeabi_d2lz>
 80094e8:	f7f7 f868 	bl	80005bc <__aeabi_l2d>
 80094ec:	4602      	mov	r2, r0
 80094ee:	460b      	mov	r3, r1
 80094f0:	4630      	mov	r0, r6
 80094f2:	4639      	mov	r1, r7
 80094f4:	f7f6 fed8 	bl	80002a8 <__aeabi_dsub>
 80094f8:	460b      	mov	r3, r1
 80094fa:	4602      	mov	r2, r0
 80094fc:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8009500:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8009504:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009506:	ea46 060a 	orr.w	r6, r6, sl
 800950a:	431e      	orrs	r6, r3
 800950c:	d06f      	beq.n	80095ee <_strtod_l+0xb86>
 800950e:	a30e      	add	r3, pc, #56	@ (adr r3, 8009548 <_strtod_l+0xae0>)
 8009510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009514:	f7f7 faf2 	bl	8000afc <__aeabi_dcmplt>
 8009518:	2800      	cmp	r0, #0
 800951a:	f47f accf 	bne.w	8008ebc <_strtod_l+0x454>
 800951e:	a30c      	add	r3, pc, #48	@ (adr r3, 8009550 <_strtod_l+0xae8>)
 8009520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009524:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009528:	f7f7 fb06 	bl	8000b38 <__aeabi_dcmpgt>
 800952c:	2800      	cmp	r0, #0
 800952e:	d093      	beq.n	8009458 <_strtod_l+0x9f0>
 8009530:	e4c4      	b.n	8008ebc <_strtod_l+0x454>
 8009532:	bf00      	nop
 8009534:	f3af 8000 	nop.w
 8009538:	00000000 	.word	0x00000000
 800953c:	bff00000 	.word	0xbff00000
 8009540:	00000000 	.word	0x00000000
 8009544:	3ff00000 	.word	0x3ff00000
 8009548:	94a03595 	.word	0x94a03595
 800954c:	3fdfffff 	.word	0x3fdfffff
 8009550:	35afe535 	.word	0x35afe535
 8009554:	3fe00000 	.word	0x3fe00000
 8009558:	000fffff 	.word	0x000fffff
 800955c:	7ff00000 	.word	0x7ff00000
 8009560:	7fefffff 	.word	0x7fefffff
 8009564:	3ff00000 	.word	0x3ff00000
 8009568:	3fe00000 	.word	0x3fe00000
 800956c:	7fe00000 	.word	0x7fe00000
 8009570:	7c9fffff 	.word	0x7c9fffff
 8009574:	9b08      	ldr	r3, [sp, #32]
 8009576:	b323      	cbz	r3, 80095c2 <_strtod_l+0xb5a>
 8009578:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800957c:	d821      	bhi.n	80095c2 <_strtod_l+0xb5a>
 800957e:	a328      	add	r3, pc, #160	@ (adr r3, 8009620 <_strtod_l+0xbb8>)
 8009580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009584:	4630      	mov	r0, r6
 8009586:	4639      	mov	r1, r7
 8009588:	f7f7 fac2 	bl	8000b10 <__aeabi_dcmple>
 800958c:	b1a0      	cbz	r0, 80095b8 <_strtod_l+0xb50>
 800958e:	4639      	mov	r1, r7
 8009590:	4630      	mov	r0, r6
 8009592:	f7f7 fb19 	bl	8000bc8 <__aeabi_d2uiz>
 8009596:	2801      	cmp	r0, #1
 8009598:	bf38      	it	cc
 800959a:	2001      	movcc	r0, #1
 800959c:	f7f6 ffc2 	bl	8000524 <__aeabi_ui2d>
 80095a0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80095a2:	4606      	mov	r6, r0
 80095a4:	460f      	mov	r7, r1
 80095a6:	b9fb      	cbnz	r3, 80095e8 <_strtod_l+0xb80>
 80095a8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80095ac:	9014      	str	r0, [sp, #80]	@ 0x50
 80095ae:	9315      	str	r3, [sp, #84]	@ 0x54
 80095b0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80095b4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80095b8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80095ba:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80095be:	1b5b      	subs	r3, r3, r5
 80095c0:	9311      	str	r3, [sp, #68]	@ 0x44
 80095c2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80095c6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 80095ca:	f001 fa71 	bl	800aab0 <__ulp>
 80095ce:	4650      	mov	r0, sl
 80095d0:	ec53 2b10 	vmov	r2, r3, d0
 80095d4:	4659      	mov	r1, fp
 80095d6:	f7f7 f81f 	bl	8000618 <__aeabi_dmul>
 80095da:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80095de:	f7f6 fe65 	bl	80002ac <__adddf3>
 80095e2:	4682      	mov	sl, r0
 80095e4:	468b      	mov	fp, r1
 80095e6:	e770      	b.n	80094ca <_strtod_l+0xa62>
 80095e8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 80095ec:	e7e0      	b.n	80095b0 <_strtod_l+0xb48>
 80095ee:	a30e      	add	r3, pc, #56	@ (adr r3, 8009628 <_strtod_l+0xbc0>)
 80095f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095f4:	f7f7 fa82 	bl	8000afc <__aeabi_dcmplt>
 80095f8:	e798      	b.n	800952c <_strtod_l+0xac4>
 80095fa:	2300      	movs	r3, #0
 80095fc:	930b      	str	r3, [sp, #44]	@ 0x2c
 80095fe:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8009600:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009602:	6013      	str	r3, [r2, #0]
 8009604:	f7ff ba6d 	b.w	8008ae2 <_strtod_l+0x7a>
 8009608:	2a65      	cmp	r2, #101	@ 0x65
 800960a:	f43f ab66 	beq.w	8008cda <_strtod_l+0x272>
 800960e:	2a45      	cmp	r2, #69	@ 0x45
 8009610:	f43f ab63 	beq.w	8008cda <_strtod_l+0x272>
 8009614:	2301      	movs	r3, #1
 8009616:	f7ff bb9e 	b.w	8008d56 <_strtod_l+0x2ee>
 800961a:	bf00      	nop
 800961c:	f3af 8000 	nop.w
 8009620:	ffc00000 	.word	0xffc00000
 8009624:	41dfffff 	.word	0x41dfffff
 8009628:	94a03595 	.word	0x94a03595
 800962c:	3fcfffff 	.word	0x3fcfffff

08009630 <strtod>:
 8009630:	460a      	mov	r2, r1
 8009632:	4601      	mov	r1, r0
 8009634:	4802      	ldr	r0, [pc, #8]	@ (8009640 <strtod+0x10>)
 8009636:	4b03      	ldr	r3, [pc, #12]	@ (8009644 <strtod+0x14>)
 8009638:	6800      	ldr	r0, [r0, #0]
 800963a:	f7ff ba15 	b.w	8008a68 <_strtod_l>
 800963e:	bf00      	nop
 8009640:	200001a8 	.word	0x200001a8
 8009644:	2000003c 	.word	0x2000003c

08009648 <_strtol_l.constprop.0>:
 8009648:	2b24      	cmp	r3, #36	@ 0x24
 800964a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800964e:	4686      	mov	lr, r0
 8009650:	4690      	mov	r8, r2
 8009652:	d801      	bhi.n	8009658 <_strtol_l.constprop.0+0x10>
 8009654:	2b01      	cmp	r3, #1
 8009656:	d106      	bne.n	8009666 <_strtol_l.constprop.0+0x1e>
 8009658:	f000 fa2c 	bl	8009ab4 <__errno>
 800965c:	2316      	movs	r3, #22
 800965e:	6003      	str	r3, [r0, #0]
 8009660:	2000      	movs	r0, #0
 8009662:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009666:	4834      	ldr	r0, [pc, #208]	@ (8009738 <_strtol_l.constprop.0+0xf0>)
 8009668:	460d      	mov	r5, r1
 800966a:	462a      	mov	r2, r5
 800966c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009670:	5d06      	ldrb	r6, [r0, r4]
 8009672:	f016 0608 	ands.w	r6, r6, #8
 8009676:	d1f8      	bne.n	800966a <_strtol_l.constprop.0+0x22>
 8009678:	2c2d      	cmp	r4, #45	@ 0x2d
 800967a:	d12d      	bne.n	80096d8 <_strtol_l.constprop.0+0x90>
 800967c:	782c      	ldrb	r4, [r5, #0]
 800967e:	2601      	movs	r6, #1
 8009680:	1c95      	adds	r5, r2, #2
 8009682:	f033 0210 	bics.w	r2, r3, #16
 8009686:	d109      	bne.n	800969c <_strtol_l.constprop.0+0x54>
 8009688:	2c30      	cmp	r4, #48	@ 0x30
 800968a:	d12a      	bne.n	80096e2 <_strtol_l.constprop.0+0x9a>
 800968c:	782a      	ldrb	r2, [r5, #0]
 800968e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009692:	2a58      	cmp	r2, #88	@ 0x58
 8009694:	d125      	bne.n	80096e2 <_strtol_l.constprop.0+0x9a>
 8009696:	786c      	ldrb	r4, [r5, #1]
 8009698:	2310      	movs	r3, #16
 800969a:	3502      	adds	r5, #2
 800969c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80096a0:	f10c 3cff 	add.w	ip, ip, #4294967295
 80096a4:	2200      	movs	r2, #0
 80096a6:	fbbc f9f3 	udiv	r9, ip, r3
 80096aa:	4610      	mov	r0, r2
 80096ac:	fb03 ca19 	mls	sl, r3, r9, ip
 80096b0:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80096b4:	2f09      	cmp	r7, #9
 80096b6:	d81b      	bhi.n	80096f0 <_strtol_l.constprop.0+0xa8>
 80096b8:	463c      	mov	r4, r7
 80096ba:	42a3      	cmp	r3, r4
 80096bc:	dd27      	ble.n	800970e <_strtol_l.constprop.0+0xc6>
 80096be:	1c57      	adds	r7, r2, #1
 80096c0:	d007      	beq.n	80096d2 <_strtol_l.constprop.0+0x8a>
 80096c2:	4581      	cmp	r9, r0
 80096c4:	d320      	bcc.n	8009708 <_strtol_l.constprop.0+0xc0>
 80096c6:	d101      	bne.n	80096cc <_strtol_l.constprop.0+0x84>
 80096c8:	45a2      	cmp	sl, r4
 80096ca:	db1d      	blt.n	8009708 <_strtol_l.constprop.0+0xc0>
 80096cc:	fb00 4003 	mla	r0, r0, r3, r4
 80096d0:	2201      	movs	r2, #1
 80096d2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80096d6:	e7eb      	b.n	80096b0 <_strtol_l.constprop.0+0x68>
 80096d8:	2c2b      	cmp	r4, #43	@ 0x2b
 80096da:	bf04      	itt	eq
 80096dc:	782c      	ldrbeq	r4, [r5, #0]
 80096de:	1c95      	addeq	r5, r2, #2
 80096e0:	e7cf      	b.n	8009682 <_strtol_l.constprop.0+0x3a>
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d1da      	bne.n	800969c <_strtol_l.constprop.0+0x54>
 80096e6:	2c30      	cmp	r4, #48	@ 0x30
 80096e8:	bf0c      	ite	eq
 80096ea:	2308      	moveq	r3, #8
 80096ec:	230a      	movne	r3, #10
 80096ee:	e7d5      	b.n	800969c <_strtol_l.constprop.0+0x54>
 80096f0:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80096f4:	2f19      	cmp	r7, #25
 80096f6:	d801      	bhi.n	80096fc <_strtol_l.constprop.0+0xb4>
 80096f8:	3c37      	subs	r4, #55	@ 0x37
 80096fa:	e7de      	b.n	80096ba <_strtol_l.constprop.0+0x72>
 80096fc:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8009700:	2f19      	cmp	r7, #25
 8009702:	d804      	bhi.n	800970e <_strtol_l.constprop.0+0xc6>
 8009704:	3c57      	subs	r4, #87	@ 0x57
 8009706:	e7d8      	b.n	80096ba <_strtol_l.constprop.0+0x72>
 8009708:	f04f 32ff 	mov.w	r2, #4294967295
 800970c:	e7e1      	b.n	80096d2 <_strtol_l.constprop.0+0x8a>
 800970e:	1c53      	adds	r3, r2, #1
 8009710:	d108      	bne.n	8009724 <_strtol_l.constprop.0+0xdc>
 8009712:	2322      	movs	r3, #34	@ 0x22
 8009714:	f8ce 3000 	str.w	r3, [lr]
 8009718:	4660      	mov	r0, ip
 800971a:	f1b8 0f00 	cmp.w	r8, #0
 800971e:	d0a0      	beq.n	8009662 <_strtol_l.constprop.0+0x1a>
 8009720:	1e69      	subs	r1, r5, #1
 8009722:	e006      	b.n	8009732 <_strtol_l.constprop.0+0xea>
 8009724:	b106      	cbz	r6, 8009728 <_strtol_l.constprop.0+0xe0>
 8009726:	4240      	negs	r0, r0
 8009728:	f1b8 0f00 	cmp.w	r8, #0
 800972c:	d099      	beq.n	8009662 <_strtol_l.constprop.0+0x1a>
 800972e:	2a00      	cmp	r2, #0
 8009730:	d1f6      	bne.n	8009720 <_strtol_l.constprop.0+0xd8>
 8009732:	f8c8 1000 	str.w	r1, [r8]
 8009736:	e794      	b.n	8009662 <_strtol_l.constprop.0+0x1a>
 8009738:	0800bf99 	.word	0x0800bf99

0800973c <strtol>:
 800973c:	4613      	mov	r3, r2
 800973e:	460a      	mov	r2, r1
 8009740:	4601      	mov	r1, r0
 8009742:	4802      	ldr	r0, [pc, #8]	@ (800974c <strtol+0x10>)
 8009744:	6800      	ldr	r0, [r0, #0]
 8009746:	f7ff bf7f 	b.w	8009648 <_strtol_l.constprop.0>
 800974a:	bf00      	nop
 800974c:	200001a8 	.word	0x200001a8

08009750 <std>:
 8009750:	2300      	movs	r3, #0
 8009752:	b510      	push	{r4, lr}
 8009754:	4604      	mov	r4, r0
 8009756:	e9c0 3300 	strd	r3, r3, [r0]
 800975a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800975e:	6083      	str	r3, [r0, #8]
 8009760:	8181      	strh	r1, [r0, #12]
 8009762:	6643      	str	r3, [r0, #100]	@ 0x64
 8009764:	81c2      	strh	r2, [r0, #14]
 8009766:	6183      	str	r3, [r0, #24]
 8009768:	4619      	mov	r1, r3
 800976a:	2208      	movs	r2, #8
 800976c:	305c      	adds	r0, #92	@ 0x5c
 800976e:	f000 f92d 	bl	80099cc <memset>
 8009772:	4b0d      	ldr	r3, [pc, #52]	@ (80097a8 <std+0x58>)
 8009774:	6263      	str	r3, [r4, #36]	@ 0x24
 8009776:	4b0d      	ldr	r3, [pc, #52]	@ (80097ac <std+0x5c>)
 8009778:	62a3      	str	r3, [r4, #40]	@ 0x28
 800977a:	4b0d      	ldr	r3, [pc, #52]	@ (80097b0 <std+0x60>)
 800977c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800977e:	4b0d      	ldr	r3, [pc, #52]	@ (80097b4 <std+0x64>)
 8009780:	6323      	str	r3, [r4, #48]	@ 0x30
 8009782:	4b0d      	ldr	r3, [pc, #52]	@ (80097b8 <std+0x68>)
 8009784:	6224      	str	r4, [r4, #32]
 8009786:	429c      	cmp	r4, r3
 8009788:	d006      	beq.n	8009798 <std+0x48>
 800978a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800978e:	4294      	cmp	r4, r2
 8009790:	d002      	beq.n	8009798 <std+0x48>
 8009792:	33d0      	adds	r3, #208	@ 0xd0
 8009794:	429c      	cmp	r4, r3
 8009796:	d105      	bne.n	80097a4 <std+0x54>
 8009798:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800979c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80097a0:	f000 b9b2 	b.w	8009b08 <__retarget_lock_init_recursive>
 80097a4:	bd10      	pop	{r4, pc}
 80097a6:	bf00      	nop
 80097a8:	080098d5 	.word	0x080098d5
 80097ac:	080098f7 	.word	0x080098f7
 80097b0:	0800992f 	.word	0x0800992f
 80097b4:	08009953 	.word	0x08009953
 80097b8:	20000558 	.word	0x20000558

080097bc <stdio_exit_handler>:
 80097bc:	4a02      	ldr	r2, [pc, #8]	@ (80097c8 <stdio_exit_handler+0xc>)
 80097be:	4903      	ldr	r1, [pc, #12]	@ (80097cc <stdio_exit_handler+0x10>)
 80097c0:	4803      	ldr	r0, [pc, #12]	@ (80097d0 <stdio_exit_handler+0x14>)
 80097c2:	f000 b869 	b.w	8009898 <_fwalk_sglue>
 80097c6:	bf00      	nop
 80097c8:	20000030 	.word	0x20000030
 80097cc:	0800b419 	.word	0x0800b419
 80097d0:	200001ac 	.word	0x200001ac

080097d4 <cleanup_stdio>:
 80097d4:	6841      	ldr	r1, [r0, #4]
 80097d6:	4b0c      	ldr	r3, [pc, #48]	@ (8009808 <cleanup_stdio+0x34>)
 80097d8:	4299      	cmp	r1, r3
 80097da:	b510      	push	{r4, lr}
 80097dc:	4604      	mov	r4, r0
 80097de:	d001      	beq.n	80097e4 <cleanup_stdio+0x10>
 80097e0:	f001 fe1a 	bl	800b418 <_fflush_r>
 80097e4:	68a1      	ldr	r1, [r4, #8]
 80097e6:	4b09      	ldr	r3, [pc, #36]	@ (800980c <cleanup_stdio+0x38>)
 80097e8:	4299      	cmp	r1, r3
 80097ea:	d002      	beq.n	80097f2 <cleanup_stdio+0x1e>
 80097ec:	4620      	mov	r0, r4
 80097ee:	f001 fe13 	bl	800b418 <_fflush_r>
 80097f2:	68e1      	ldr	r1, [r4, #12]
 80097f4:	4b06      	ldr	r3, [pc, #24]	@ (8009810 <cleanup_stdio+0x3c>)
 80097f6:	4299      	cmp	r1, r3
 80097f8:	d004      	beq.n	8009804 <cleanup_stdio+0x30>
 80097fa:	4620      	mov	r0, r4
 80097fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009800:	f001 be0a 	b.w	800b418 <_fflush_r>
 8009804:	bd10      	pop	{r4, pc}
 8009806:	bf00      	nop
 8009808:	20000558 	.word	0x20000558
 800980c:	200005c0 	.word	0x200005c0
 8009810:	20000628 	.word	0x20000628

08009814 <global_stdio_init.part.0>:
 8009814:	b510      	push	{r4, lr}
 8009816:	4b0b      	ldr	r3, [pc, #44]	@ (8009844 <global_stdio_init.part.0+0x30>)
 8009818:	4c0b      	ldr	r4, [pc, #44]	@ (8009848 <global_stdio_init.part.0+0x34>)
 800981a:	4a0c      	ldr	r2, [pc, #48]	@ (800984c <global_stdio_init.part.0+0x38>)
 800981c:	601a      	str	r2, [r3, #0]
 800981e:	4620      	mov	r0, r4
 8009820:	2200      	movs	r2, #0
 8009822:	2104      	movs	r1, #4
 8009824:	f7ff ff94 	bl	8009750 <std>
 8009828:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800982c:	2201      	movs	r2, #1
 800982e:	2109      	movs	r1, #9
 8009830:	f7ff ff8e 	bl	8009750 <std>
 8009834:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009838:	2202      	movs	r2, #2
 800983a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800983e:	2112      	movs	r1, #18
 8009840:	f7ff bf86 	b.w	8009750 <std>
 8009844:	20000690 	.word	0x20000690
 8009848:	20000558 	.word	0x20000558
 800984c:	080097bd 	.word	0x080097bd

08009850 <__sfp_lock_acquire>:
 8009850:	4801      	ldr	r0, [pc, #4]	@ (8009858 <__sfp_lock_acquire+0x8>)
 8009852:	f000 b95a 	b.w	8009b0a <__retarget_lock_acquire_recursive>
 8009856:	bf00      	nop
 8009858:	20000699 	.word	0x20000699

0800985c <__sfp_lock_release>:
 800985c:	4801      	ldr	r0, [pc, #4]	@ (8009864 <__sfp_lock_release+0x8>)
 800985e:	f000 b955 	b.w	8009b0c <__retarget_lock_release_recursive>
 8009862:	bf00      	nop
 8009864:	20000699 	.word	0x20000699

08009868 <__sinit>:
 8009868:	b510      	push	{r4, lr}
 800986a:	4604      	mov	r4, r0
 800986c:	f7ff fff0 	bl	8009850 <__sfp_lock_acquire>
 8009870:	6a23      	ldr	r3, [r4, #32]
 8009872:	b11b      	cbz	r3, 800987c <__sinit+0x14>
 8009874:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009878:	f7ff bff0 	b.w	800985c <__sfp_lock_release>
 800987c:	4b04      	ldr	r3, [pc, #16]	@ (8009890 <__sinit+0x28>)
 800987e:	6223      	str	r3, [r4, #32]
 8009880:	4b04      	ldr	r3, [pc, #16]	@ (8009894 <__sinit+0x2c>)
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	2b00      	cmp	r3, #0
 8009886:	d1f5      	bne.n	8009874 <__sinit+0xc>
 8009888:	f7ff ffc4 	bl	8009814 <global_stdio_init.part.0>
 800988c:	e7f2      	b.n	8009874 <__sinit+0xc>
 800988e:	bf00      	nop
 8009890:	080097d5 	.word	0x080097d5
 8009894:	20000690 	.word	0x20000690

08009898 <_fwalk_sglue>:
 8009898:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800989c:	4607      	mov	r7, r0
 800989e:	4688      	mov	r8, r1
 80098a0:	4614      	mov	r4, r2
 80098a2:	2600      	movs	r6, #0
 80098a4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80098a8:	f1b9 0901 	subs.w	r9, r9, #1
 80098ac:	d505      	bpl.n	80098ba <_fwalk_sglue+0x22>
 80098ae:	6824      	ldr	r4, [r4, #0]
 80098b0:	2c00      	cmp	r4, #0
 80098b2:	d1f7      	bne.n	80098a4 <_fwalk_sglue+0xc>
 80098b4:	4630      	mov	r0, r6
 80098b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80098ba:	89ab      	ldrh	r3, [r5, #12]
 80098bc:	2b01      	cmp	r3, #1
 80098be:	d907      	bls.n	80098d0 <_fwalk_sglue+0x38>
 80098c0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80098c4:	3301      	adds	r3, #1
 80098c6:	d003      	beq.n	80098d0 <_fwalk_sglue+0x38>
 80098c8:	4629      	mov	r1, r5
 80098ca:	4638      	mov	r0, r7
 80098cc:	47c0      	blx	r8
 80098ce:	4306      	orrs	r6, r0
 80098d0:	3568      	adds	r5, #104	@ 0x68
 80098d2:	e7e9      	b.n	80098a8 <_fwalk_sglue+0x10>

080098d4 <__sread>:
 80098d4:	b510      	push	{r4, lr}
 80098d6:	460c      	mov	r4, r1
 80098d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098dc:	f000 f8c6 	bl	8009a6c <_read_r>
 80098e0:	2800      	cmp	r0, #0
 80098e2:	bfab      	itete	ge
 80098e4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80098e6:	89a3      	ldrhlt	r3, [r4, #12]
 80098e8:	181b      	addge	r3, r3, r0
 80098ea:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80098ee:	bfac      	ite	ge
 80098f0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80098f2:	81a3      	strhlt	r3, [r4, #12]
 80098f4:	bd10      	pop	{r4, pc}

080098f6 <__swrite>:
 80098f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098fa:	461f      	mov	r7, r3
 80098fc:	898b      	ldrh	r3, [r1, #12]
 80098fe:	05db      	lsls	r3, r3, #23
 8009900:	4605      	mov	r5, r0
 8009902:	460c      	mov	r4, r1
 8009904:	4616      	mov	r6, r2
 8009906:	d505      	bpl.n	8009914 <__swrite+0x1e>
 8009908:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800990c:	2302      	movs	r3, #2
 800990e:	2200      	movs	r2, #0
 8009910:	f000 f89a 	bl	8009a48 <_lseek_r>
 8009914:	89a3      	ldrh	r3, [r4, #12]
 8009916:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800991a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800991e:	81a3      	strh	r3, [r4, #12]
 8009920:	4632      	mov	r2, r6
 8009922:	463b      	mov	r3, r7
 8009924:	4628      	mov	r0, r5
 8009926:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800992a:	f000 b8b1 	b.w	8009a90 <_write_r>

0800992e <__sseek>:
 800992e:	b510      	push	{r4, lr}
 8009930:	460c      	mov	r4, r1
 8009932:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009936:	f000 f887 	bl	8009a48 <_lseek_r>
 800993a:	1c43      	adds	r3, r0, #1
 800993c:	89a3      	ldrh	r3, [r4, #12]
 800993e:	bf15      	itete	ne
 8009940:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009942:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009946:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800994a:	81a3      	strheq	r3, [r4, #12]
 800994c:	bf18      	it	ne
 800994e:	81a3      	strhne	r3, [r4, #12]
 8009950:	bd10      	pop	{r4, pc}

08009952 <__sclose>:
 8009952:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009956:	f000 b867 	b.w	8009a28 <_close_r>

0800995a <_vsniprintf_r>:
 800995a:	b530      	push	{r4, r5, lr}
 800995c:	4614      	mov	r4, r2
 800995e:	2c00      	cmp	r4, #0
 8009960:	b09b      	sub	sp, #108	@ 0x6c
 8009962:	4605      	mov	r5, r0
 8009964:	461a      	mov	r2, r3
 8009966:	da05      	bge.n	8009974 <_vsniprintf_r+0x1a>
 8009968:	238b      	movs	r3, #139	@ 0x8b
 800996a:	6003      	str	r3, [r0, #0]
 800996c:	f04f 30ff 	mov.w	r0, #4294967295
 8009970:	b01b      	add	sp, #108	@ 0x6c
 8009972:	bd30      	pop	{r4, r5, pc}
 8009974:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8009978:	f8ad 300c 	strh.w	r3, [sp, #12]
 800997c:	bf14      	ite	ne
 800997e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8009982:	4623      	moveq	r3, r4
 8009984:	9302      	str	r3, [sp, #8]
 8009986:	9305      	str	r3, [sp, #20]
 8009988:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800998c:	9100      	str	r1, [sp, #0]
 800998e:	9104      	str	r1, [sp, #16]
 8009990:	f8ad 300e 	strh.w	r3, [sp, #14]
 8009994:	4669      	mov	r1, sp
 8009996:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8009998:	f001 fa30 	bl	800adfc <_svfiprintf_r>
 800999c:	1c43      	adds	r3, r0, #1
 800999e:	bfbc      	itt	lt
 80099a0:	238b      	movlt	r3, #139	@ 0x8b
 80099a2:	602b      	strlt	r3, [r5, #0]
 80099a4:	2c00      	cmp	r4, #0
 80099a6:	d0e3      	beq.n	8009970 <_vsniprintf_r+0x16>
 80099a8:	9b00      	ldr	r3, [sp, #0]
 80099aa:	2200      	movs	r2, #0
 80099ac:	701a      	strb	r2, [r3, #0]
 80099ae:	e7df      	b.n	8009970 <_vsniprintf_r+0x16>

080099b0 <vsniprintf>:
 80099b0:	b507      	push	{r0, r1, r2, lr}
 80099b2:	9300      	str	r3, [sp, #0]
 80099b4:	4613      	mov	r3, r2
 80099b6:	460a      	mov	r2, r1
 80099b8:	4601      	mov	r1, r0
 80099ba:	4803      	ldr	r0, [pc, #12]	@ (80099c8 <vsniprintf+0x18>)
 80099bc:	6800      	ldr	r0, [r0, #0]
 80099be:	f7ff ffcc 	bl	800995a <_vsniprintf_r>
 80099c2:	b003      	add	sp, #12
 80099c4:	f85d fb04 	ldr.w	pc, [sp], #4
 80099c8:	200001a8 	.word	0x200001a8

080099cc <memset>:
 80099cc:	4402      	add	r2, r0
 80099ce:	4603      	mov	r3, r0
 80099d0:	4293      	cmp	r3, r2
 80099d2:	d100      	bne.n	80099d6 <memset+0xa>
 80099d4:	4770      	bx	lr
 80099d6:	f803 1b01 	strb.w	r1, [r3], #1
 80099da:	e7f9      	b.n	80099d0 <memset+0x4>

080099dc <strncmp>:
 80099dc:	b510      	push	{r4, lr}
 80099de:	b16a      	cbz	r2, 80099fc <strncmp+0x20>
 80099e0:	3901      	subs	r1, #1
 80099e2:	1884      	adds	r4, r0, r2
 80099e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80099e8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80099ec:	429a      	cmp	r2, r3
 80099ee:	d103      	bne.n	80099f8 <strncmp+0x1c>
 80099f0:	42a0      	cmp	r0, r4
 80099f2:	d001      	beq.n	80099f8 <strncmp+0x1c>
 80099f4:	2a00      	cmp	r2, #0
 80099f6:	d1f5      	bne.n	80099e4 <strncmp+0x8>
 80099f8:	1ad0      	subs	r0, r2, r3
 80099fa:	bd10      	pop	{r4, pc}
 80099fc:	4610      	mov	r0, r2
 80099fe:	e7fc      	b.n	80099fa <strncmp+0x1e>

08009a00 <strncpy>:
 8009a00:	b510      	push	{r4, lr}
 8009a02:	3901      	subs	r1, #1
 8009a04:	4603      	mov	r3, r0
 8009a06:	b132      	cbz	r2, 8009a16 <strncpy+0x16>
 8009a08:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8009a0c:	f803 4b01 	strb.w	r4, [r3], #1
 8009a10:	3a01      	subs	r2, #1
 8009a12:	2c00      	cmp	r4, #0
 8009a14:	d1f7      	bne.n	8009a06 <strncpy+0x6>
 8009a16:	441a      	add	r2, r3
 8009a18:	2100      	movs	r1, #0
 8009a1a:	4293      	cmp	r3, r2
 8009a1c:	d100      	bne.n	8009a20 <strncpy+0x20>
 8009a1e:	bd10      	pop	{r4, pc}
 8009a20:	f803 1b01 	strb.w	r1, [r3], #1
 8009a24:	e7f9      	b.n	8009a1a <strncpy+0x1a>
	...

08009a28 <_close_r>:
 8009a28:	b538      	push	{r3, r4, r5, lr}
 8009a2a:	4d06      	ldr	r5, [pc, #24]	@ (8009a44 <_close_r+0x1c>)
 8009a2c:	2300      	movs	r3, #0
 8009a2e:	4604      	mov	r4, r0
 8009a30:	4608      	mov	r0, r1
 8009a32:	602b      	str	r3, [r5, #0]
 8009a34:	f7f8 fb70 	bl	8002118 <_close>
 8009a38:	1c43      	adds	r3, r0, #1
 8009a3a:	d102      	bne.n	8009a42 <_close_r+0x1a>
 8009a3c:	682b      	ldr	r3, [r5, #0]
 8009a3e:	b103      	cbz	r3, 8009a42 <_close_r+0x1a>
 8009a40:	6023      	str	r3, [r4, #0]
 8009a42:	bd38      	pop	{r3, r4, r5, pc}
 8009a44:	20000694 	.word	0x20000694

08009a48 <_lseek_r>:
 8009a48:	b538      	push	{r3, r4, r5, lr}
 8009a4a:	4d07      	ldr	r5, [pc, #28]	@ (8009a68 <_lseek_r+0x20>)
 8009a4c:	4604      	mov	r4, r0
 8009a4e:	4608      	mov	r0, r1
 8009a50:	4611      	mov	r1, r2
 8009a52:	2200      	movs	r2, #0
 8009a54:	602a      	str	r2, [r5, #0]
 8009a56:	461a      	mov	r2, r3
 8009a58:	f7f8 fb85 	bl	8002166 <_lseek>
 8009a5c:	1c43      	adds	r3, r0, #1
 8009a5e:	d102      	bne.n	8009a66 <_lseek_r+0x1e>
 8009a60:	682b      	ldr	r3, [r5, #0]
 8009a62:	b103      	cbz	r3, 8009a66 <_lseek_r+0x1e>
 8009a64:	6023      	str	r3, [r4, #0]
 8009a66:	bd38      	pop	{r3, r4, r5, pc}
 8009a68:	20000694 	.word	0x20000694

08009a6c <_read_r>:
 8009a6c:	b538      	push	{r3, r4, r5, lr}
 8009a6e:	4d07      	ldr	r5, [pc, #28]	@ (8009a8c <_read_r+0x20>)
 8009a70:	4604      	mov	r4, r0
 8009a72:	4608      	mov	r0, r1
 8009a74:	4611      	mov	r1, r2
 8009a76:	2200      	movs	r2, #0
 8009a78:	602a      	str	r2, [r5, #0]
 8009a7a:	461a      	mov	r2, r3
 8009a7c:	f7f8 fb13 	bl	80020a6 <_read>
 8009a80:	1c43      	adds	r3, r0, #1
 8009a82:	d102      	bne.n	8009a8a <_read_r+0x1e>
 8009a84:	682b      	ldr	r3, [r5, #0]
 8009a86:	b103      	cbz	r3, 8009a8a <_read_r+0x1e>
 8009a88:	6023      	str	r3, [r4, #0]
 8009a8a:	bd38      	pop	{r3, r4, r5, pc}
 8009a8c:	20000694 	.word	0x20000694

08009a90 <_write_r>:
 8009a90:	b538      	push	{r3, r4, r5, lr}
 8009a92:	4d07      	ldr	r5, [pc, #28]	@ (8009ab0 <_write_r+0x20>)
 8009a94:	4604      	mov	r4, r0
 8009a96:	4608      	mov	r0, r1
 8009a98:	4611      	mov	r1, r2
 8009a9a:	2200      	movs	r2, #0
 8009a9c:	602a      	str	r2, [r5, #0]
 8009a9e:	461a      	mov	r2, r3
 8009aa0:	f7f8 fb1e 	bl	80020e0 <_write>
 8009aa4:	1c43      	adds	r3, r0, #1
 8009aa6:	d102      	bne.n	8009aae <_write_r+0x1e>
 8009aa8:	682b      	ldr	r3, [r5, #0]
 8009aaa:	b103      	cbz	r3, 8009aae <_write_r+0x1e>
 8009aac:	6023      	str	r3, [r4, #0]
 8009aae:	bd38      	pop	{r3, r4, r5, pc}
 8009ab0:	20000694 	.word	0x20000694

08009ab4 <__errno>:
 8009ab4:	4b01      	ldr	r3, [pc, #4]	@ (8009abc <__errno+0x8>)
 8009ab6:	6818      	ldr	r0, [r3, #0]
 8009ab8:	4770      	bx	lr
 8009aba:	bf00      	nop
 8009abc:	200001a8 	.word	0x200001a8

08009ac0 <__libc_init_array>:
 8009ac0:	b570      	push	{r4, r5, r6, lr}
 8009ac2:	4d0d      	ldr	r5, [pc, #52]	@ (8009af8 <__libc_init_array+0x38>)
 8009ac4:	4c0d      	ldr	r4, [pc, #52]	@ (8009afc <__libc_init_array+0x3c>)
 8009ac6:	1b64      	subs	r4, r4, r5
 8009ac8:	10a4      	asrs	r4, r4, #2
 8009aca:	2600      	movs	r6, #0
 8009acc:	42a6      	cmp	r6, r4
 8009ace:	d109      	bne.n	8009ae4 <__libc_init_array+0x24>
 8009ad0:	4d0b      	ldr	r5, [pc, #44]	@ (8009b00 <__libc_init_array+0x40>)
 8009ad2:	4c0c      	ldr	r4, [pc, #48]	@ (8009b04 <__libc_init_array+0x44>)
 8009ad4:	f002 f91e 	bl	800bd14 <_init>
 8009ad8:	1b64      	subs	r4, r4, r5
 8009ada:	10a4      	asrs	r4, r4, #2
 8009adc:	2600      	movs	r6, #0
 8009ade:	42a6      	cmp	r6, r4
 8009ae0:	d105      	bne.n	8009aee <__libc_init_array+0x2e>
 8009ae2:	bd70      	pop	{r4, r5, r6, pc}
 8009ae4:	f855 3b04 	ldr.w	r3, [r5], #4
 8009ae8:	4798      	blx	r3
 8009aea:	3601      	adds	r6, #1
 8009aec:	e7ee      	b.n	8009acc <__libc_init_array+0xc>
 8009aee:	f855 3b04 	ldr.w	r3, [r5], #4
 8009af2:	4798      	blx	r3
 8009af4:	3601      	adds	r6, #1
 8009af6:	e7f2      	b.n	8009ade <__libc_init_array+0x1e>
 8009af8:	0800c2f8 	.word	0x0800c2f8
 8009afc:	0800c2f8 	.word	0x0800c2f8
 8009b00:	0800c2f8 	.word	0x0800c2f8
 8009b04:	0800c2fc 	.word	0x0800c2fc

08009b08 <__retarget_lock_init_recursive>:
 8009b08:	4770      	bx	lr

08009b0a <__retarget_lock_acquire_recursive>:
 8009b0a:	4770      	bx	lr

08009b0c <__retarget_lock_release_recursive>:
 8009b0c:	4770      	bx	lr

08009b0e <memcpy>:
 8009b0e:	440a      	add	r2, r1
 8009b10:	4291      	cmp	r1, r2
 8009b12:	f100 33ff 	add.w	r3, r0, #4294967295
 8009b16:	d100      	bne.n	8009b1a <memcpy+0xc>
 8009b18:	4770      	bx	lr
 8009b1a:	b510      	push	{r4, lr}
 8009b1c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009b20:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009b24:	4291      	cmp	r1, r2
 8009b26:	d1f9      	bne.n	8009b1c <memcpy+0xe>
 8009b28:	bd10      	pop	{r4, pc}
 8009b2a:	0000      	movs	r0, r0
 8009b2c:	0000      	movs	r0, r0
	...

08009b30 <nan>:
 8009b30:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8009b38 <nan+0x8>
 8009b34:	4770      	bx	lr
 8009b36:	bf00      	nop
 8009b38:	00000000 	.word	0x00000000
 8009b3c:	7ff80000 	.word	0x7ff80000

08009b40 <_free_r>:
 8009b40:	b538      	push	{r3, r4, r5, lr}
 8009b42:	4605      	mov	r5, r0
 8009b44:	2900      	cmp	r1, #0
 8009b46:	d041      	beq.n	8009bcc <_free_r+0x8c>
 8009b48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009b4c:	1f0c      	subs	r4, r1, #4
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	bfb8      	it	lt
 8009b52:	18e4      	addlt	r4, r4, r3
 8009b54:	f000 fc2c 	bl	800a3b0 <__malloc_lock>
 8009b58:	4a1d      	ldr	r2, [pc, #116]	@ (8009bd0 <_free_r+0x90>)
 8009b5a:	6813      	ldr	r3, [r2, #0]
 8009b5c:	b933      	cbnz	r3, 8009b6c <_free_r+0x2c>
 8009b5e:	6063      	str	r3, [r4, #4]
 8009b60:	6014      	str	r4, [r2, #0]
 8009b62:	4628      	mov	r0, r5
 8009b64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009b68:	f000 bc28 	b.w	800a3bc <__malloc_unlock>
 8009b6c:	42a3      	cmp	r3, r4
 8009b6e:	d908      	bls.n	8009b82 <_free_r+0x42>
 8009b70:	6820      	ldr	r0, [r4, #0]
 8009b72:	1821      	adds	r1, r4, r0
 8009b74:	428b      	cmp	r3, r1
 8009b76:	bf01      	itttt	eq
 8009b78:	6819      	ldreq	r1, [r3, #0]
 8009b7a:	685b      	ldreq	r3, [r3, #4]
 8009b7c:	1809      	addeq	r1, r1, r0
 8009b7e:	6021      	streq	r1, [r4, #0]
 8009b80:	e7ed      	b.n	8009b5e <_free_r+0x1e>
 8009b82:	461a      	mov	r2, r3
 8009b84:	685b      	ldr	r3, [r3, #4]
 8009b86:	b10b      	cbz	r3, 8009b8c <_free_r+0x4c>
 8009b88:	42a3      	cmp	r3, r4
 8009b8a:	d9fa      	bls.n	8009b82 <_free_r+0x42>
 8009b8c:	6811      	ldr	r1, [r2, #0]
 8009b8e:	1850      	adds	r0, r2, r1
 8009b90:	42a0      	cmp	r0, r4
 8009b92:	d10b      	bne.n	8009bac <_free_r+0x6c>
 8009b94:	6820      	ldr	r0, [r4, #0]
 8009b96:	4401      	add	r1, r0
 8009b98:	1850      	adds	r0, r2, r1
 8009b9a:	4283      	cmp	r3, r0
 8009b9c:	6011      	str	r1, [r2, #0]
 8009b9e:	d1e0      	bne.n	8009b62 <_free_r+0x22>
 8009ba0:	6818      	ldr	r0, [r3, #0]
 8009ba2:	685b      	ldr	r3, [r3, #4]
 8009ba4:	6053      	str	r3, [r2, #4]
 8009ba6:	4408      	add	r0, r1
 8009ba8:	6010      	str	r0, [r2, #0]
 8009baa:	e7da      	b.n	8009b62 <_free_r+0x22>
 8009bac:	d902      	bls.n	8009bb4 <_free_r+0x74>
 8009bae:	230c      	movs	r3, #12
 8009bb0:	602b      	str	r3, [r5, #0]
 8009bb2:	e7d6      	b.n	8009b62 <_free_r+0x22>
 8009bb4:	6820      	ldr	r0, [r4, #0]
 8009bb6:	1821      	adds	r1, r4, r0
 8009bb8:	428b      	cmp	r3, r1
 8009bba:	bf04      	itt	eq
 8009bbc:	6819      	ldreq	r1, [r3, #0]
 8009bbe:	685b      	ldreq	r3, [r3, #4]
 8009bc0:	6063      	str	r3, [r4, #4]
 8009bc2:	bf04      	itt	eq
 8009bc4:	1809      	addeq	r1, r1, r0
 8009bc6:	6021      	streq	r1, [r4, #0]
 8009bc8:	6054      	str	r4, [r2, #4]
 8009bca:	e7ca      	b.n	8009b62 <_free_r+0x22>
 8009bcc:	bd38      	pop	{r3, r4, r5, pc}
 8009bce:	bf00      	nop
 8009bd0:	200006a0 	.word	0x200006a0

08009bd4 <rshift>:
 8009bd4:	6903      	ldr	r3, [r0, #16]
 8009bd6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009bda:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009bde:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009be2:	f100 0414 	add.w	r4, r0, #20
 8009be6:	dd45      	ble.n	8009c74 <rshift+0xa0>
 8009be8:	f011 011f 	ands.w	r1, r1, #31
 8009bec:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009bf0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009bf4:	d10c      	bne.n	8009c10 <rshift+0x3c>
 8009bf6:	f100 0710 	add.w	r7, r0, #16
 8009bfa:	4629      	mov	r1, r5
 8009bfc:	42b1      	cmp	r1, r6
 8009bfe:	d334      	bcc.n	8009c6a <rshift+0x96>
 8009c00:	1a9b      	subs	r3, r3, r2
 8009c02:	009b      	lsls	r3, r3, #2
 8009c04:	1eea      	subs	r2, r5, #3
 8009c06:	4296      	cmp	r6, r2
 8009c08:	bf38      	it	cc
 8009c0a:	2300      	movcc	r3, #0
 8009c0c:	4423      	add	r3, r4
 8009c0e:	e015      	b.n	8009c3c <rshift+0x68>
 8009c10:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009c14:	f1c1 0820 	rsb	r8, r1, #32
 8009c18:	40cf      	lsrs	r7, r1
 8009c1a:	f105 0e04 	add.w	lr, r5, #4
 8009c1e:	46a1      	mov	r9, r4
 8009c20:	4576      	cmp	r6, lr
 8009c22:	46f4      	mov	ip, lr
 8009c24:	d815      	bhi.n	8009c52 <rshift+0x7e>
 8009c26:	1a9a      	subs	r2, r3, r2
 8009c28:	0092      	lsls	r2, r2, #2
 8009c2a:	3a04      	subs	r2, #4
 8009c2c:	3501      	adds	r5, #1
 8009c2e:	42ae      	cmp	r6, r5
 8009c30:	bf38      	it	cc
 8009c32:	2200      	movcc	r2, #0
 8009c34:	18a3      	adds	r3, r4, r2
 8009c36:	50a7      	str	r7, [r4, r2]
 8009c38:	b107      	cbz	r7, 8009c3c <rshift+0x68>
 8009c3a:	3304      	adds	r3, #4
 8009c3c:	1b1a      	subs	r2, r3, r4
 8009c3e:	42a3      	cmp	r3, r4
 8009c40:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009c44:	bf08      	it	eq
 8009c46:	2300      	moveq	r3, #0
 8009c48:	6102      	str	r2, [r0, #16]
 8009c4a:	bf08      	it	eq
 8009c4c:	6143      	streq	r3, [r0, #20]
 8009c4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009c52:	f8dc c000 	ldr.w	ip, [ip]
 8009c56:	fa0c fc08 	lsl.w	ip, ip, r8
 8009c5a:	ea4c 0707 	orr.w	r7, ip, r7
 8009c5e:	f849 7b04 	str.w	r7, [r9], #4
 8009c62:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009c66:	40cf      	lsrs	r7, r1
 8009c68:	e7da      	b.n	8009c20 <rshift+0x4c>
 8009c6a:	f851 cb04 	ldr.w	ip, [r1], #4
 8009c6e:	f847 cf04 	str.w	ip, [r7, #4]!
 8009c72:	e7c3      	b.n	8009bfc <rshift+0x28>
 8009c74:	4623      	mov	r3, r4
 8009c76:	e7e1      	b.n	8009c3c <rshift+0x68>

08009c78 <__hexdig_fun>:
 8009c78:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8009c7c:	2b09      	cmp	r3, #9
 8009c7e:	d802      	bhi.n	8009c86 <__hexdig_fun+0xe>
 8009c80:	3820      	subs	r0, #32
 8009c82:	b2c0      	uxtb	r0, r0
 8009c84:	4770      	bx	lr
 8009c86:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8009c8a:	2b05      	cmp	r3, #5
 8009c8c:	d801      	bhi.n	8009c92 <__hexdig_fun+0x1a>
 8009c8e:	3847      	subs	r0, #71	@ 0x47
 8009c90:	e7f7      	b.n	8009c82 <__hexdig_fun+0xa>
 8009c92:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8009c96:	2b05      	cmp	r3, #5
 8009c98:	d801      	bhi.n	8009c9e <__hexdig_fun+0x26>
 8009c9a:	3827      	subs	r0, #39	@ 0x27
 8009c9c:	e7f1      	b.n	8009c82 <__hexdig_fun+0xa>
 8009c9e:	2000      	movs	r0, #0
 8009ca0:	4770      	bx	lr
	...

08009ca4 <__gethex>:
 8009ca4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ca8:	b085      	sub	sp, #20
 8009caa:	468a      	mov	sl, r1
 8009cac:	9302      	str	r3, [sp, #8]
 8009cae:	680b      	ldr	r3, [r1, #0]
 8009cb0:	9001      	str	r0, [sp, #4]
 8009cb2:	4690      	mov	r8, r2
 8009cb4:	1c9c      	adds	r4, r3, #2
 8009cb6:	46a1      	mov	r9, r4
 8009cb8:	f814 0b01 	ldrb.w	r0, [r4], #1
 8009cbc:	2830      	cmp	r0, #48	@ 0x30
 8009cbe:	d0fa      	beq.n	8009cb6 <__gethex+0x12>
 8009cc0:	eba9 0303 	sub.w	r3, r9, r3
 8009cc4:	f1a3 0b02 	sub.w	fp, r3, #2
 8009cc8:	f7ff ffd6 	bl	8009c78 <__hexdig_fun>
 8009ccc:	4605      	mov	r5, r0
 8009cce:	2800      	cmp	r0, #0
 8009cd0:	d168      	bne.n	8009da4 <__gethex+0x100>
 8009cd2:	49a0      	ldr	r1, [pc, #640]	@ (8009f54 <__gethex+0x2b0>)
 8009cd4:	2201      	movs	r2, #1
 8009cd6:	4648      	mov	r0, r9
 8009cd8:	f7ff fe80 	bl	80099dc <strncmp>
 8009cdc:	4607      	mov	r7, r0
 8009cde:	2800      	cmp	r0, #0
 8009ce0:	d167      	bne.n	8009db2 <__gethex+0x10e>
 8009ce2:	f899 0001 	ldrb.w	r0, [r9, #1]
 8009ce6:	4626      	mov	r6, r4
 8009ce8:	f7ff ffc6 	bl	8009c78 <__hexdig_fun>
 8009cec:	2800      	cmp	r0, #0
 8009cee:	d062      	beq.n	8009db6 <__gethex+0x112>
 8009cf0:	4623      	mov	r3, r4
 8009cf2:	7818      	ldrb	r0, [r3, #0]
 8009cf4:	2830      	cmp	r0, #48	@ 0x30
 8009cf6:	4699      	mov	r9, r3
 8009cf8:	f103 0301 	add.w	r3, r3, #1
 8009cfc:	d0f9      	beq.n	8009cf2 <__gethex+0x4e>
 8009cfe:	f7ff ffbb 	bl	8009c78 <__hexdig_fun>
 8009d02:	fab0 f580 	clz	r5, r0
 8009d06:	096d      	lsrs	r5, r5, #5
 8009d08:	f04f 0b01 	mov.w	fp, #1
 8009d0c:	464a      	mov	r2, r9
 8009d0e:	4616      	mov	r6, r2
 8009d10:	3201      	adds	r2, #1
 8009d12:	7830      	ldrb	r0, [r6, #0]
 8009d14:	f7ff ffb0 	bl	8009c78 <__hexdig_fun>
 8009d18:	2800      	cmp	r0, #0
 8009d1a:	d1f8      	bne.n	8009d0e <__gethex+0x6a>
 8009d1c:	498d      	ldr	r1, [pc, #564]	@ (8009f54 <__gethex+0x2b0>)
 8009d1e:	2201      	movs	r2, #1
 8009d20:	4630      	mov	r0, r6
 8009d22:	f7ff fe5b 	bl	80099dc <strncmp>
 8009d26:	2800      	cmp	r0, #0
 8009d28:	d13f      	bne.n	8009daa <__gethex+0x106>
 8009d2a:	b944      	cbnz	r4, 8009d3e <__gethex+0x9a>
 8009d2c:	1c74      	adds	r4, r6, #1
 8009d2e:	4622      	mov	r2, r4
 8009d30:	4616      	mov	r6, r2
 8009d32:	3201      	adds	r2, #1
 8009d34:	7830      	ldrb	r0, [r6, #0]
 8009d36:	f7ff ff9f 	bl	8009c78 <__hexdig_fun>
 8009d3a:	2800      	cmp	r0, #0
 8009d3c:	d1f8      	bne.n	8009d30 <__gethex+0x8c>
 8009d3e:	1ba4      	subs	r4, r4, r6
 8009d40:	00a7      	lsls	r7, r4, #2
 8009d42:	7833      	ldrb	r3, [r6, #0]
 8009d44:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8009d48:	2b50      	cmp	r3, #80	@ 0x50
 8009d4a:	d13e      	bne.n	8009dca <__gethex+0x126>
 8009d4c:	7873      	ldrb	r3, [r6, #1]
 8009d4e:	2b2b      	cmp	r3, #43	@ 0x2b
 8009d50:	d033      	beq.n	8009dba <__gethex+0x116>
 8009d52:	2b2d      	cmp	r3, #45	@ 0x2d
 8009d54:	d034      	beq.n	8009dc0 <__gethex+0x11c>
 8009d56:	1c71      	adds	r1, r6, #1
 8009d58:	2400      	movs	r4, #0
 8009d5a:	7808      	ldrb	r0, [r1, #0]
 8009d5c:	f7ff ff8c 	bl	8009c78 <__hexdig_fun>
 8009d60:	1e43      	subs	r3, r0, #1
 8009d62:	b2db      	uxtb	r3, r3
 8009d64:	2b18      	cmp	r3, #24
 8009d66:	d830      	bhi.n	8009dca <__gethex+0x126>
 8009d68:	f1a0 0210 	sub.w	r2, r0, #16
 8009d6c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009d70:	f7ff ff82 	bl	8009c78 <__hexdig_fun>
 8009d74:	f100 3cff 	add.w	ip, r0, #4294967295
 8009d78:	fa5f fc8c 	uxtb.w	ip, ip
 8009d7c:	f1bc 0f18 	cmp.w	ip, #24
 8009d80:	f04f 030a 	mov.w	r3, #10
 8009d84:	d91e      	bls.n	8009dc4 <__gethex+0x120>
 8009d86:	b104      	cbz	r4, 8009d8a <__gethex+0xe6>
 8009d88:	4252      	negs	r2, r2
 8009d8a:	4417      	add	r7, r2
 8009d8c:	f8ca 1000 	str.w	r1, [sl]
 8009d90:	b1ed      	cbz	r5, 8009dce <__gethex+0x12a>
 8009d92:	f1bb 0f00 	cmp.w	fp, #0
 8009d96:	bf0c      	ite	eq
 8009d98:	2506      	moveq	r5, #6
 8009d9a:	2500      	movne	r5, #0
 8009d9c:	4628      	mov	r0, r5
 8009d9e:	b005      	add	sp, #20
 8009da0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009da4:	2500      	movs	r5, #0
 8009da6:	462c      	mov	r4, r5
 8009da8:	e7b0      	b.n	8009d0c <__gethex+0x68>
 8009daa:	2c00      	cmp	r4, #0
 8009dac:	d1c7      	bne.n	8009d3e <__gethex+0x9a>
 8009dae:	4627      	mov	r7, r4
 8009db0:	e7c7      	b.n	8009d42 <__gethex+0x9e>
 8009db2:	464e      	mov	r6, r9
 8009db4:	462f      	mov	r7, r5
 8009db6:	2501      	movs	r5, #1
 8009db8:	e7c3      	b.n	8009d42 <__gethex+0x9e>
 8009dba:	2400      	movs	r4, #0
 8009dbc:	1cb1      	adds	r1, r6, #2
 8009dbe:	e7cc      	b.n	8009d5a <__gethex+0xb6>
 8009dc0:	2401      	movs	r4, #1
 8009dc2:	e7fb      	b.n	8009dbc <__gethex+0x118>
 8009dc4:	fb03 0002 	mla	r0, r3, r2, r0
 8009dc8:	e7ce      	b.n	8009d68 <__gethex+0xc4>
 8009dca:	4631      	mov	r1, r6
 8009dcc:	e7de      	b.n	8009d8c <__gethex+0xe8>
 8009dce:	eba6 0309 	sub.w	r3, r6, r9
 8009dd2:	3b01      	subs	r3, #1
 8009dd4:	4629      	mov	r1, r5
 8009dd6:	2b07      	cmp	r3, #7
 8009dd8:	dc0a      	bgt.n	8009df0 <__gethex+0x14c>
 8009dda:	9801      	ldr	r0, [sp, #4]
 8009ddc:	f000 faf4 	bl	800a3c8 <_Balloc>
 8009de0:	4604      	mov	r4, r0
 8009de2:	b940      	cbnz	r0, 8009df6 <__gethex+0x152>
 8009de4:	4b5c      	ldr	r3, [pc, #368]	@ (8009f58 <__gethex+0x2b4>)
 8009de6:	4602      	mov	r2, r0
 8009de8:	21e4      	movs	r1, #228	@ 0xe4
 8009dea:	485c      	ldr	r0, [pc, #368]	@ (8009f5c <__gethex+0x2b8>)
 8009dec:	f001 fb66 	bl	800b4bc <__assert_func>
 8009df0:	3101      	adds	r1, #1
 8009df2:	105b      	asrs	r3, r3, #1
 8009df4:	e7ef      	b.n	8009dd6 <__gethex+0x132>
 8009df6:	f100 0a14 	add.w	sl, r0, #20
 8009dfa:	2300      	movs	r3, #0
 8009dfc:	4655      	mov	r5, sl
 8009dfe:	469b      	mov	fp, r3
 8009e00:	45b1      	cmp	r9, r6
 8009e02:	d337      	bcc.n	8009e74 <__gethex+0x1d0>
 8009e04:	f845 bb04 	str.w	fp, [r5], #4
 8009e08:	eba5 050a 	sub.w	r5, r5, sl
 8009e0c:	10ad      	asrs	r5, r5, #2
 8009e0e:	6125      	str	r5, [r4, #16]
 8009e10:	4658      	mov	r0, fp
 8009e12:	f000 fbcb 	bl	800a5ac <__hi0bits>
 8009e16:	016d      	lsls	r5, r5, #5
 8009e18:	f8d8 6000 	ldr.w	r6, [r8]
 8009e1c:	1a2d      	subs	r5, r5, r0
 8009e1e:	42b5      	cmp	r5, r6
 8009e20:	dd54      	ble.n	8009ecc <__gethex+0x228>
 8009e22:	1bad      	subs	r5, r5, r6
 8009e24:	4629      	mov	r1, r5
 8009e26:	4620      	mov	r0, r4
 8009e28:	f000 ff5f 	bl	800acea <__any_on>
 8009e2c:	4681      	mov	r9, r0
 8009e2e:	b178      	cbz	r0, 8009e50 <__gethex+0x1ac>
 8009e30:	1e6b      	subs	r3, r5, #1
 8009e32:	1159      	asrs	r1, r3, #5
 8009e34:	f003 021f 	and.w	r2, r3, #31
 8009e38:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8009e3c:	f04f 0901 	mov.w	r9, #1
 8009e40:	fa09 f202 	lsl.w	r2, r9, r2
 8009e44:	420a      	tst	r2, r1
 8009e46:	d003      	beq.n	8009e50 <__gethex+0x1ac>
 8009e48:	454b      	cmp	r3, r9
 8009e4a:	dc36      	bgt.n	8009eba <__gethex+0x216>
 8009e4c:	f04f 0902 	mov.w	r9, #2
 8009e50:	4629      	mov	r1, r5
 8009e52:	4620      	mov	r0, r4
 8009e54:	f7ff febe 	bl	8009bd4 <rshift>
 8009e58:	442f      	add	r7, r5
 8009e5a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009e5e:	42bb      	cmp	r3, r7
 8009e60:	da42      	bge.n	8009ee8 <__gethex+0x244>
 8009e62:	9801      	ldr	r0, [sp, #4]
 8009e64:	4621      	mov	r1, r4
 8009e66:	f000 faef 	bl	800a448 <_Bfree>
 8009e6a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009e6c:	2300      	movs	r3, #0
 8009e6e:	6013      	str	r3, [r2, #0]
 8009e70:	25a3      	movs	r5, #163	@ 0xa3
 8009e72:	e793      	b.n	8009d9c <__gethex+0xf8>
 8009e74:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8009e78:	2a2e      	cmp	r2, #46	@ 0x2e
 8009e7a:	d012      	beq.n	8009ea2 <__gethex+0x1fe>
 8009e7c:	2b20      	cmp	r3, #32
 8009e7e:	d104      	bne.n	8009e8a <__gethex+0x1e6>
 8009e80:	f845 bb04 	str.w	fp, [r5], #4
 8009e84:	f04f 0b00 	mov.w	fp, #0
 8009e88:	465b      	mov	r3, fp
 8009e8a:	7830      	ldrb	r0, [r6, #0]
 8009e8c:	9303      	str	r3, [sp, #12]
 8009e8e:	f7ff fef3 	bl	8009c78 <__hexdig_fun>
 8009e92:	9b03      	ldr	r3, [sp, #12]
 8009e94:	f000 000f 	and.w	r0, r0, #15
 8009e98:	4098      	lsls	r0, r3
 8009e9a:	ea4b 0b00 	orr.w	fp, fp, r0
 8009e9e:	3304      	adds	r3, #4
 8009ea0:	e7ae      	b.n	8009e00 <__gethex+0x15c>
 8009ea2:	45b1      	cmp	r9, r6
 8009ea4:	d8ea      	bhi.n	8009e7c <__gethex+0x1d8>
 8009ea6:	492b      	ldr	r1, [pc, #172]	@ (8009f54 <__gethex+0x2b0>)
 8009ea8:	9303      	str	r3, [sp, #12]
 8009eaa:	2201      	movs	r2, #1
 8009eac:	4630      	mov	r0, r6
 8009eae:	f7ff fd95 	bl	80099dc <strncmp>
 8009eb2:	9b03      	ldr	r3, [sp, #12]
 8009eb4:	2800      	cmp	r0, #0
 8009eb6:	d1e1      	bne.n	8009e7c <__gethex+0x1d8>
 8009eb8:	e7a2      	b.n	8009e00 <__gethex+0x15c>
 8009eba:	1ea9      	subs	r1, r5, #2
 8009ebc:	4620      	mov	r0, r4
 8009ebe:	f000 ff14 	bl	800acea <__any_on>
 8009ec2:	2800      	cmp	r0, #0
 8009ec4:	d0c2      	beq.n	8009e4c <__gethex+0x1a8>
 8009ec6:	f04f 0903 	mov.w	r9, #3
 8009eca:	e7c1      	b.n	8009e50 <__gethex+0x1ac>
 8009ecc:	da09      	bge.n	8009ee2 <__gethex+0x23e>
 8009ece:	1b75      	subs	r5, r6, r5
 8009ed0:	4621      	mov	r1, r4
 8009ed2:	9801      	ldr	r0, [sp, #4]
 8009ed4:	462a      	mov	r2, r5
 8009ed6:	f000 fccf 	bl	800a878 <__lshift>
 8009eda:	1b7f      	subs	r7, r7, r5
 8009edc:	4604      	mov	r4, r0
 8009ede:	f100 0a14 	add.w	sl, r0, #20
 8009ee2:	f04f 0900 	mov.w	r9, #0
 8009ee6:	e7b8      	b.n	8009e5a <__gethex+0x1b6>
 8009ee8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009eec:	42bd      	cmp	r5, r7
 8009eee:	dd6f      	ble.n	8009fd0 <__gethex+0x32c>
 8009ef0:	1bed      	subs	r5, r5, r7
 8009ef2:	42ae      	cmp	r6, r5
 8009ef4:	dc34      	bgt.n	8009f60 <__gethex+0x2bc>
 8009ef6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009efa:	2b02      	cmp	r3, #2
 8009efc:	d022      	beq.n	8009f44 <__gethex+0x2a0>
 8009efe:	2b03      	cmp	r3, #3
 8009f00:	d024      	beq.n	8009f4c <__gethex+0x2a8>
 8009f02:	2b01      	cmp	r3, #1
 8009f04:	d115      	bne.n	8009f32 <__gethex+0x28e>
 8009f06:	42ae      	cmp	r6, r5
 8009f08:	d113      	bne.n	8009f32 <__gethex+0x28e>
 8009f0a:	2e01      	cmp	r6, #1
 8009f0c:	d10b      	bne.n	8009f26 <__gethex+0x282>
 8009f0e:	9a02      	ldr	r2, [sp, #8]
 8009f10:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009f14:	6013      	str	r3, [r2, #0]
 8009f16:	2301      	movs	r3, #1
 8009f18:	6123      	str	r3, [r4, #16]
 8009f1a:	f8ca 3000 	str.w	r3, [sl]
 8009f1e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009f20:	2562      	movs	r5, #98	@ 0x62
 8009f22:	601c      	str	r4, [r3, #0]
 8009f24:	e73a      	b.n	8009d9c <__gethex+0xf8>
 8009f26:	1e71      	subs	r1, r6, #1
 8009f28:	4620      	mov	r0, r4
 8009f2a:	f000 fede 	bl	800acea <__any_on>
 8009f2e:	2800      	cmp	r0, #0
 8009f30:	d1ed      	bne.n	8009f0e <__gethex+0x26a>
 8009f32:	9801      	ldr	r0, [sp, #4]
 8009f34:	4621      	mov	r1, r4
 8009f36:	f000 fa87 	bl	800a448 <_Bfree>
 8009f3a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009f3c:	2300      	movs	r3, #0
 8009f3e:	6013      	str	r3, [r2, #0]
 8009f40:	2550      	movs	r5, #80	@ 0x50
 8009f42:	e72b      	b.n	8009d9c <__gethex+0xf8>
 8009f44:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d1f3      	bne.n	8009f32 <__gethex+0x28e>
 8009f4a:	e7e0      	b.n	8009f0e <__gethex+0x26a>
 8009f4c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d1dd      	bne.n	8009f0e <__gethex+0x26a>
 8009f52:	e7ee      	b.n	8009f32 <__gethex+0x28e>
 8009f54:	0800bf34 	.word	0x0800bf34
 8009f58:	0800c0a1 	.word	0x0800c0a1
 8009f5c:	0800c0b2 	.word	0x0800c0b2
 8009f60:	1e6f      	subs	r7, r5, #1
 8009f62:	f1b9 0f00 	cmp.w	r9, #0
 8009f66:	d130      	bne.n	8009fca <__gethex+0x326>
 8009f68:	b127      	cbz	r7, 8009f74 <__gethex+0x2d0>
 8009f6a:	4639      	mov	r1, r7
 8009f6c:	4620      	mov	r0, r4
 8009f6e:	f000 febc 	bl	800acea <__any_on>
 8009f72:	4681      	mov	r9, r0
 8009f74:	117a      	asrs	r2, r7, #5
 8009f76:	2301      	movs	r3, #1
 8009f78:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8009f7c:	f007 071f 	and.w	r7, r7, #31
 8009f80:	40bb      	lsls	r3, r7
 8009f82:	4213      	tst	r3, r2
 8009f84:	4629      	mov	r1, r5
 8009f86:	4620      	mov	r0, r4
 8009f88:	bf18      	it	ne
 8009f8a:	f049 0902 	orrne.w	r9, r9, #2
 8009f8e:	f7ff fe21 	bl	8009bd4 <rshift>
 8009f92:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8009f96:	1b76      	subs	r6, r6, r5
 8009f98:	2502      	movs	r5, #2
 8009f9a:	f1b9 0f00 	cmp.w	r9, #0
 8009f9e:	d047      	beq.n	800a030 <__gethex+0x38c>
 8009fa0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009fa4:	2b02      	cmp	r3, #2
 8009fa6:	d015      	beq.n	8009fd4 <__gethex+0x330>
 8009fa8:	2b03      	cmp	r3, #3
 8009faa:	d017      	beq.n	8009fdc <__gethex+0x338>
 8009fac:	2b01      	cmp	r3, #1
 8009fae:	d109      	bne.n	8009fc4 <__gethex+0x320>
 8009fb0:	f019 0f02 	tst.w	r9, #2
 8009fb4:	d006      	beq.n	8009fc4 <__gethex+0x320>
 8009fb6:	f8da 3000 	ldr.w	r3, [sl]
 8009fba:	ea49 0903 	orr.w	r9, r9, r3
 8009fbe:	f019 0f01 	tst.w	r9, #1
 8009fc2:	d10e      	bne.n	8009fe2 <__gethex+0x33e>
 8009fc4:	f045 0510 	orr.w	r5, r5, #16
 8009fc8:	e032      	b.n	800a030 <__gethex+0x38c>
 8009fca:	f04f 0901 	mov.w	r9, #1
 8009fce:	e7d1      	b.n	8009f74 <__gethex+0x2d0>
 8009fd0:	2501      	movs	r5, #1
 8009fd2:	e7e2      	b.n	8009f9a <__gethex+0x2f6>
 8009fd4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009fd6:	f1c3 0301 	rsb	r3, r3, #1
 8009fda:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009fdc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d0f0      	beq.n	8009fc4 <__gethex+0x320>
 8009fe2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009fe6:	f104 0314 	add.w	r3, r4, #20
 8009fea:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009fee:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009ff2:	f04f 0c00 	mov.w	ip, #0
 8009ff6:	4618      	mov	r0, r3
 8009ff8:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ffc:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a000:	d01b      	beq.n	800a03a <__gethex+0x396>
 800a002:	3201      	adds	r2, #1
 800a004:	6002      	str	r2, [r0, #0]
 800a006:	2d02      	cmp	r5, #2
 800a008:	f104 0314 	add.w	r3, r4, #20
 800a00c:	d13c      	bne.n	800a088 <__gethex+0x3e4>
 800a00e:	f8d8 2000 	ldr.w	r2, [r8]
 800a012:	3a01      	subs	r2, #1
 800a014:	42b2      	cmp	r2, r6
 800a016:	d109      	bne.n	800a02c <__gethex+0x388>
 800a018:	1171      	asrs	r1, r6, #5
 800a01a:	2201      	movs	r2, #1
 800a01c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a020:	f006 061f 	and.w	r6, r6, #31
 800a024:	fa02 f606 	lsl.w	r6, r2, r6
 800a028:	421e      	tst	r6, r3
 800a02a:	d13a      	bne.n	800a0a2 <__gethex+0x3fe>
 800a02c:	f045 0520 	orr.w	r5, r5, #32
 800a030:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a032:	601c      	str	r4, [r3, #0]
 800a034:	9b02      	ldr	r3, [sp, #8]
 800a036:	601f      	str	r7, [r3, #0]
 800a038:	e6b0      	b.n	8009d9c <__gethex+0xf8>
 800a03a:	4299      	cmp	r1, r3
 800a03c:	f843 cc04 	str.w	ip, [r3, #-4]
 800a040:	d8d9      	bhi.n	8009ff6 <__gethex+0x352>
 800a042:	68a3      	ldr	r3, [r4, #8]
 800a044:	459b      	cmp	fp, r3
 800a046:	db17      	blt.n	800a078 <__gethex+0x3d4>
 800a048:	6861      	ldr	r1, [r4, #4]
 800a04a:	9801      	ldr	r0, [sp, #4]
 800a04c:	3101      	adds	r1, #1
 800a04e:	f000 f9bb 	bl	800a3c8 <_Balloc>
 800a052:	4681      	mov	r9, r0
 800a054:	b918      	cbnz	r0, 800a05e <__gethex+0x3ba>
 800a056:	4b1a      	ldr	r3, [pc, #104]	@ (800a0c0 <__gethex+0x41c>)
 800a058:	4602      	mov	r2, r0
 800a05a:	2184      	movs	r1, #132	@ 0x84
 800a05c:	e6c5      	b.n	8009dea <__gethex+0x146>
 800a05e:	6922      	ldr	r2, [r4, #16]
 800a060:	3202      	adds	r2, #2
 800a062:	f104 010c 	add.w	r1, r4, #12
 800a066:	0092      	lsls	r2, r2, #2
 800a068:	300c      	adds	r0, #12
 800a06a:	f7ff fd50 	bl	8009b0e <memcpy>
 800a06e:	4621      	mov	r1, r4
 800a070:	9801      	ldr	r0, [sp, #4]
 800a072:	f000 f9e9 	bl	800a448 <_Bfree>
 800a076:	464c      	mov	r4, r9
 800a078:	6923      	ldr	r3, [r4, #16]
 800a07a:	1c5a      	adds	r2, r3, #1
 800a07c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a080:	6122      	str	r2, [r4, #16]
 800a082:	2201      	movs	r2, #1
 800a084:	615a      	str	r2, [r3, #20]
 800a086:	e7be      	b.n	800a006 <__gethex+0x362>
 800a088:	6922      	ldr	r2, [r4, #16]
 800a08a:	455a      	cmp	r2, fp
 800a08c:	dd0b      	ble.n	800a0a6 <__gethex+0x402>
 800a08e:	2101      	movs	r1, #1
 800a090:	4620      	mov	r0, r4
 800a092:	f7ff fd9f 	bl	8009bd4 <rshift>
 800a096:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a09a:	3701      	adds	r7, #1
 800a09c:	42bb      	cmp	r3, r7
 800a09e:	f6ff aee0 	blt.w	8009e62 <__gethex+0x1be>
 800a0a2:	2501      	movs	r5, #1
 800a0a4:	e7c2      	b.n	800a02c <__gethex+0x388>
 800a0a6:	f016 061f 	ands.w	r6, r6, #31
 800a0aa:	d0fa      	beq.n	800a0a2 <__gethex+0x3fe>
 800a0ac:	4453      	add	r3, sl
 800a0ae:	f1c6 0620 	rsb	r6, r6, #32
 800a0b2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a0b6:	f000 fa79 	bl	800a5ac <__hi0bits>
 800a0ba:	42b0      	cmp	r0, r6
 800a0bc:	dbe7      	blt.n	800a08e <__gethex+0x3ea>
 800a0be:	e7f0      	b.n	800a0a2 <__gethex+0x3fe>
 800a0c0:	0800c0a1 	.word	0x0800c0a1

0800a0c4 <L_shift>:
 800a0c4:	f1c2 0208 	rsb	r2, r2, #8
 800a0c8:	0092      	lsls	r2, r2, #2
 800a0ca:	b570      	push	{r4, r5, r6, lr}
 800a0cc:	f1c2 0620 	rsb	r6, r2, #32
 800a0d0:	6843      	ldr	r3, [r0, #4]
 800a0d2:	6804      	ldr	r4, [r0, #0]
 800a0d4:	fa03 f506 	lsl.w	r5, r3, r6
 800a0d8:	432c      	orrs	r4, r5
 800a0da:	40d3      	lsrs	r3, r2
 800a0dc:	6004      	str	r4, [r0, #0]
 800a0de:	f840 3f04 	str.w	r3, [r0, #4]!
 800a0e2:	4288      	cmp	r0, r1
 800a0e4:	d3f4      	bcc.n	800a0d0 <L_shift+0xc>
 800a0e6:	bd70      	pop	{r4, r5, r6, pc}

0800a0e8 <__match>:
 800a0e8:	b530      	push	{r4, r5, lr}
 800a0ea:	6803      	ldr	r3, [r0, #0]
 800a0ec:	3301      	adds	r3, #1
 800a0ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a0f2:	b914      	cbnz	r4, 800a0fa <__match+0x12>
 800a0f4:	6003      	str	r3, [r0, #0]
 800a0f6:	2001      	movs	r0, #1
 800a0f8:	bd30      	pop	{r4, r5, pc}
 800a0fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a0fe:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800a102:	2d19      	cmp	r5, #25
 800a104:	bf98      	it	ls
 800a106:	3220      	addls	r2, #32
 800a108:	42a2      	cmp	r2, r4
 800a10a:	d0f0      	beq.n	800a0ee <__match+0x6>
 800a10c:	2000      	movs	r0, #0
 800a10e:	e7f3      	b.n	800a0f8 <__match+0x10>

0800a110 <__hexnan>:
 800a110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a114:	680b      	ldr	r3, [r1, #0]
 800a116:	6801      	ldr	r1, [r0, #0]
 800a118:	115e      	asrs	r6, r3, #5
 800a11a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a11e:	f013 031f 	ands.w	r3, r3, #31
 800a122:	b087      	sub	sp, #28
 800a124:	bf18      	it	ne
 800a126:	3604      	addne	r6, #4
 800a128:	2500      	movs	r5, #0
 800a12a:	1f37      	subs	r7, r6, #4
 800a12c:	4682      	mov	sl, r0
 800a12e:	4690      	mov	r8, r2
 800a130:	9301      	str	r3, [sp, #4]
 800a132:	f846 5c04 	str.w	r5, [r6, #-4]
 800a136:	46b9      	mov	r9, r7
 800a138:	463c      	mov	r4, r7
 800a13a:	9502      	str	r5, [sp, #8]
 800a13c:	46ab      	mov	fp, r5
 800a13e:	784a      	ldrb	r2, [r1, #1]
 800a140:	1c4b      	adds	r3, r1, #1
 800a142:	9303      	str	r3, [sp, #12]
 800a144:	b342      	cbz	r2, 800a198 <__hexnan+0x88>
 800a146:	4610      	mov	r0, r2
 800a148:	9105      	str	r1, [sp, #20]
 800a14a:	9204      	str	r2, [sp, #16]
 800a14c:	f7ff fd94 	bl	8009c78 <__hexdig_fun>
 800a150:	2800      	cmp	r0, #0
 800a152:	d151      	bne.n	800a1f8 <__hexnan+0xe8>
 800a154:	9a04      	ldr	r2, [sp, #16]
 800a156:	9905      	ldr	r1, [sp, #20]
 800a158:	2a20      	cmp	r2, #32
 800a15a:	d818      	bhi.n	800a18e <__hexnan+0x7e>
 800a15c:	9b02      	ldr	r3, [sp, #8]
 800a15e:	459b      	cmp	fp, r3
 800a160:	dd13      	ble.n	800a18a <__hexnan+0x7a>
 800a162:	454c      	cmp	r4, r9
 800a164:	d206      	bcs.n	800a174 <__hexnan+0x64>
 800a166:	2d07      	cmp	r5, #7
 800a168:	dc04      	bgt.n	800a174 <__hexnan+0x64>
 800a16a:	462a      	mov	r2, r5
 800a16c:	4649      	mov	r1, r9
 800a16e:	4620      	mov	r0, r4
 800a170:	f7ff ffa8 	bl	800a0c4 <L_shift>
 800a174:	4544      	cmp	r4, r8
 800a176:	d952      	bls.n	800a21e <__hexnan+0x10e>
 800a178:	2300      	movs	r3, #0
 800a17a:	f1a4 0904 	sub.w	r9, r4, #4
 800a17e:	f844 3c04 	str.w	r3, [r4, #-4]
 800a182:	f8cd b008 	str.w	fp, [sp, #8]
 800a186:	464c      	mov	r4, r9
 800a188:	461d      	mov	r5, r3
 800a18a:	9903      	ldr	r1, [sp, #12]
 800a18c:	e7d7      	b.n	800a13e <__hexnan+0x2e>
 800a18e:	2a29      	cmp	r2, #41	@ 0x29
 800a190:	d157      	bne.n	800a242 <__hexnan+0x132>
 800a192:	3102      	adds	r1, #2
 800a194:	f8ca 1000 	str.w	r1, [sl]
 800a198:	f1bb 0f00 	cmp.w	fp, #0
 800a19c:	d051      	beq.n	800a242 <__hexnan+0x132>
 800a19e:	454c      	cmp	r4, r9
 800a1a0:	d206      	bcs.n	800a1b0 <__hexnan+0xa0>
 800a1a2:	2d07      	cmp	r5, #7
 800a1a4:	dc04      	bgt.n	800a1b0 <__hexnan+0xa0>
 800a1a6:	462a      	mov	r2, r5
 800a1a8:	4649      	mov	r1, r9
 800a1aa:	4620      	mov	r0, r4
 800a1ac:	f7ff ff8a 	bl	800a0c4 <L_shift>
 800a1b0:	4544      	cmp	r4, r8
 800a1b2:	d936      	bls.n	800a222 <__hexnan+0x112>
 800a1b4:	f1a8 0204 	sub.w	r2, r8, #4
 800a1b8:	4623      	mov	r3, r4
 800a1ba:	f853 1b04 	ldr.w	r1, [r3], #4
 800a1be:	f842 1f04 	str.w	r1, [r2, #4]!
 800a1c2:	429f      	cmp	r7, r3
 800a1c4:	d2f9      	bcs.n	800a1ba <__hexnan+0xaa>
 800a1c6:	1b3b      	subs	r3, r7, r4
 800a1c8:	f023 0303 	bic.w	r3, r3, #3
 800a1cc:	3304      	adds	r3, #4
 800a1ce:	3401      	adds	r4, #1
 800a1d0:	3e03      	subs	r6, #3
 800a1d2:	42b4      	cmp	r4, r6
 800a1d4:	bf88      	it	hi
 800a1d6:	2304      	movhi	r3, #4
 800a1d8:	4443      	add	r3, r8
 800a1da:	2200      	movs	r2, #0
 800a1dc:	f843 2b04 	str.w	r2, [r3], #4
 800a1e0:	429f      	cmp	r7, r3
 800a1e2:	d2fb      	bcs.n	800a1dc <__hexnan+0xcc>
 800a1e4:	683b      	ldr	r3, [r7, #0]
 800a1e6:	b91b      	cbnz	r3, 800a1f0 <__hexnan+0xe0>
 800a1e8:	4547      	cmp	r7, r8
 800a1ea:	d128      	bne.n	800a23e <__hexnan+0x12e>
 800a1ec:	2301      	movs	r3, #1
 800a1ee:	603b      	str	r3, [r7, #0]
 800a1f0:	2005      	movs	r0, #5
 800a1f2:	b007      	add	sp, #28
 800a1f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1f8:	3501      	adds	r5, #1
 800a1fa:	2d08      	cmp	r5, #8
 800a1fc:	f10b 0b01 	add.w	fp, fp, #1
 800a200:	dd06      	ble.n	800a210 <__hexnan+0x100>
 800a202:	4544      	cmp	r4, r8
 800a204:	d9c1      	bls.n	800a18a <__hexnan+0x7a>
 800a206:	2300      	movs	r3, #0
 800a208:	f844 3c04 	str.w	r3, [r4, #-4]
 800a20c:	2501      	movs	r5, #1
 800a20e:	3c04      	subs	r4, #4
 800a210:	6822      	ldr	r2, [r4, #0]
 800a212:	f000 000f 	and.w	r0, r0, #15
 800a216:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a21a:	6020      	str	r0, [r4, #0]
 800a21c:	e7b5      	b.n	800a18a <__hexnan+0x7a>
 800a21e:	2508      	movs	r5, #8
 800a220:	e7b3      	b.n	800a18a <__hexnan+0x7a>
 800a222:	9b01      	ldr	r3, [sp, #4]
 800a224:	2b00      	cmp	r3, #0
 800a226:	d0dd      	beq.n	800a1e4 <__hexnan+0xd4>
 800a228:	f1c3 0320 	rsb	r3, r3, #32
 800a22c:	f04f 32ff 	mov.w	r2, #4294967295
 800a230:	40da      	lsrs	r2, r3
 800a232:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800a236:	4013      	ands	r3, r2
 800a238:	f846 3c04 	str.w	r3, [r6, #-4]
 800a23c:	e7d2      	b.n	800a1e4 <__hexnan+0xd4>
 800a23e:	3f04      	subs	r7, #4
 800a240:	e7d0      	b.n	800a1e4 <__hexnan+0xd4>
 800a242:	2004      	movs	r0, #4
 800a244:	e7d5      	b.n	800a1f2 <__hexnan+0xe2>
	...

0800a248 <sbrk_aligned>:
 800a248:	b570      	push	{r4, r5, r6, lr}
 800a24a:	4e0f      	ldr	r6, [pc, #60]	@ (800a288 <sbrk_aligned+0x40>)
 800a24c:	460c      	mov	r4, r1
 800a24e:	6831      	ldr	r1, [r6, #0]
 800a250:	4605      	mov	r5, r0
 800a252:	b911      	cbnz	r1, 800a25a <sbrk_aligned+0x12>
 800a254:	f001 f922 	bl	800b49c <_sbrk_r>
 800a258:	6030      	str	r0, [r6, #0]
 800a25a:	4621      	mov	r1, r4
 800a25c:	4628      	mov	r0, r5
 800a25e:	f001 f91d 	bl	800b49c <_sbrk_r>
 800a262:	1c43      	adds	r3, r0, #1
 800a264:	d103      	bne.n	800a26e <sbrk_aligned+0x26>
 800a266:	f04f 34ff 	mov.w	r4, #4294967295
 800a26a:	4620      	mov	r0, r4
 800a26c:	bd70      	pop	{r4, r5, r6, pc}
 800a26e:	1cc4      	adds	r4, r0, #3
 800a270:	f024 0403 	bic.w	r4, r4, #3
 800a274:	42a0      	cmp	r0, r4
 800a276:	d0f8      	beq.n	800a26a <sbrk_aligned+0x22>
 800a278:	1a21      	subs	r1, r4, r0
 800a27a:	4628      	mov	r0, r5
 800a27c:	f001 f90e 	bl	800b49c <_sbrk_r>
 800a280:	3001      	adds	r0, #1
 800a282:	d1f2      	bne.n	800a26a <sbrk_aligned+0x22>
 800a284:	e7ef      	b.n	800a266 <sbrk_aligned+0x1e>
 800a286:	bf00      	nop
 800a288:	2000069c 	.word	0x2000069c

0800a28c <_malloc_r>:
 800a28c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a290:	1ccd      	adds	r5, r1, #3
 800a292:	f025 0503 	bic.w	r5, r5, #3
 800a296:	3508      	adds	r5, #8
 800a298:	2d0c      	cmp	r5, #12
 800a29a:	bf38      	it	cc
 800a29c:	250c      	movcc	r5, #12
 800a29e:	2d00      	cmp	r5, #0
 800a2a0:	4606      	mov	r6, r0
 800a2a2:	db01      	blt.n	800a2a8 <_malloc_r+0x1c>
 800a2a4:	42a9      	cmp	r1, r5
 800a2a6:	d904      	bls.n	800a2b2 <_malloc_r+0x26>
 800a2a8:	230c      	movs	r3, #12
 800a2aa:	6033      	str	r3, [r6, #0]
 800a2ac:	2000      	movs	r0, #0
 800a2ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a2b2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a388 <_malloc_r+0xfc>
 800a2b6:	f000 f87b 	bl	800a3b0 <__malloc_lock>
 800a2ba:	f8d8 3000 	ldr.w	r3, [r8]
 800a2be:	461c      	mov	r4, r3
 800a2c0:	bb44      	cbnz	r4, 800a314 <_malloc_r+0x88>
 800a2c2:	4629      	mov	r1, r5
 800a2c4:	4630      	mov	r0, r6
 800a2c6:	f7ff ffbf 	bl	800a248 <sbrk_aligned>
 800a2ca:	1c43      	adds	r3, r0, #1
 800a2cc:	4604      	mov	r4, r0
 800a2ce:	d158      	bne.n	800a382 <_malloc_r+0xf6>
 800a2d0:	f8d8 4000 	ldr.w	r4, [r8]
 800a2d4:	4627      	mov	r7, r4
 800a2d6:	2f00      	cmp	r7, #0
 800a2d8:	d143      	bne.n	800a362 <_malloc_r+0xd6>
 800a2da:	2c00      	cmp	r4, #0
 800a2dc:	d04b      	beq.n	800a376 <_malloc_r+0xea>
 800a2de:	6823      	ldr	r3, [r4, #0]
 800a2e0:	4639      	mov	r1, r7
 800a2e2:	4630      	mov	r0, r6
 800a2e4:	eb04 0903 	add.w	r9, r4, r3
 800a2e8:	f001 f8d8 	bl	800b49c <_sbrk_r>
 800a2ec:	4581      	cmp	r9, r0
 800a2ee:	d142      	bne.n	800a376 <_malloc_r+0xea>
 800a2f0:	6821      	ldr	r1, [r4, #0]
 800a2f2:	1a6d      	subs	r5, r5, r1
 800a2f4:	4629      	mov	r1, r5
 800a2f6:	4630      	mov	r0, r6
 800a2f8:	f7ff ffa6 	bl	800a248 <sbrk_aligned>
 800a2fc:	3001      	adds	r0, #1
 800a2fe:	d03a      	beq.n	800a376 <_malloc_r+0xea>
 800a300:	6823      	ldr	r3, [r4, #0]
 800a302:	442b      	add	r3, r5
 800a304:	6023      	str	r3, [r4, #0]
 800a306:	f8d8 3000 	ldr.w	r3, [r8]
 800a30a:	685a      	ldr	r2, [r3, #4]
 800a30c:	bb62      	cbnz	r2, 800a368 <_malloc_r+0xdc>
 800a30e:	f8c8 7000 	str.w	r7, [r8]
 800a312:	e00f      	b.n	800a334 <_malloc_r+0xa8>
 800a314:	6822      	ldr	r2, [r4, #0]
 800a316:	1b52      	subs	r2, r2, r5
 800a318:	d420      	bmi.n	800a35c <_malloc_r+0xd0>
 800a31a:	2a0b      	cmp	r2, #11
 800a31c:	d917      	bls.n	800a34e <_malloc_r+0xc2>
 800a31e:	1961      	adds	r1, r4, r5
 800a320:	42a3      	cmp	r3, r4
 800a322:	6025      	str	r5, [r4, #0]
 800a324:	bf18      	it	ne
 800a326:	6059      	strne	r1, [r3, #4]
 800a328:	6863      	ldr	r3, [r4, #4]
 800a32a:	bf08      	it	eq
 800a32c:	f8c8 1000 	streq.w	r1, [r8]
 800a330:	5162      	str	r2, [r4, r5]
 800a332:	604b      	str	r3, [r1, #4]
 800a334:	4630      	mov	r0, r6
 800a336:	f000 f841 	bl	800a3bc <__malloc_unlock>
 800a33a:	f104 000b 	add.w	r0, r4, #11
 800a33e:	1d23      	adds	r3, r4, #4
 800a340:	f020 0007 	bic.w	r0, r0, #7
 800a344:	1ac2      	subs	r2, r0, r3
 800a346:	bf1c      	itt	ne
 800a348:	1a1b      	subne	r3, r3, r0
 800a34a:	50a3      	strne	r3, [r4, r2]
 800a34c:	e7af      	b.n	800a2ae <_malloc_r+0x22>
 800a34e:	6862      	ldr	r2, [r4, #4]
 800a350:	42a3      	cmp	r3, r4
 800a352:	bf0c      	ite	eq
 800a354:	f8c8 2000 	streq.w	r2, [r8]
 800a358:	605a      	strne	r2, [r3, #4]
 800a35a:	e7eb      	b.n	800a334 <_malloc_r+0xa8>
 800a35c:	4623      	mov	r3, r4
 800a35e:	6864      	ldr	r4, [r4, #4]
 800a360:	e7ae      	b.n	800a2c0 <_malloc_r+0x34>
 800a362:	463c      	mov	r4, r7
 800a364:	687f      	ldr	r7, [r7, #4]
 800a366:	e7b6      	b.n	800a2d6 <_malloc_r+0x4a>
 800a368:	461a      	mov	r2, r3
 800a36a:	685b      	ldr	r3, [r3, #4]
 800a36c:	42a3      	cmp	r3, r4
 800a36e:	d1fb      	bne.n	800a368 <_malloc_r+0xdc>
 800a370:	2300      	movs	r3, #0
 800a372:	6053      	str	r3, [r2, #4]
 800a374:	e7de      	b.n	800a334 <_malloc_r+0xa8>
 800a376:	230c      	movs	r3, #12
 800a378:	6033      	str	r3, [r6, #0]
 800a37a:	4630      	mov	r0, r6
 800a37c:	f000 f81e 	bl	800a3bc <__malloc_unlock>
 800a380:	e794      	b.n	800a2ac <_malloc_r+0x20>
 800a382:	6005      	str	r5, [r0, #0]
 800a384:	e7d6      	b.n	800a334 <_malloc_r+0xa8>
 800a386:	bf00      	nop
 800a388:	200006a0 	.word	0x200006a0

0800a38c <__ascii_mbtowc>:
 800a38c:	b082      	sub	sp, #8
 800a38e:	b901      	cbnz	r1, 800a392 <__ascii_mbtowc+0x6>
 800a390:	a901      	add	r1, sp, #4
 800a392:	b142      	cbz	r2, 800a3a6 <__ascii_mbtowc+0x1a>
 800a394:	b14b      	cbz	r3, 800a3aa <__ascii_mbtowc+0x1e>
 800a396:	7813      	ldrb	r3, [r2, #0]
 800a398:	600b      	str	r3, [r1, #0]
 800a39a:	7812      	ldrb	r2, [r2, #0]
 800a39c:	1e10      	subs	r0, r2, #0
 800a39e:	bf18      	it	ne
 800a3a0:	2001      	movne	r0, #1
 800a3a2:	b002      	add	sp, #8
 800a3a4:	4770      	bx	lr
 800a3a6:	4610      	mov	r0, r2
 800a3a8:	e7fb      	b.n	800a3a2 <__ascii_mbtowc+0x16>
 800a3aa:	f06f 0001 	mvn.w	r0, #1
 800a3ae:	e7f8      	b.n	800a3a2 <__ascii_mbtowc+0x16>

0800a3b0 <__malloc_lock>:
 800a3b0:	4801      	ldr	r0, [pc, #4]	@ (800a3b8 <__malloc_lock+0x8>)
 800a3b2:	f7ff bbaa 	b.w	8009b0a <__retarget_lock_acquire_recursive>
 800a3b6:	bf00      	nop
 800a3b8:	20000698 	.word	0x20000698

0800a3bc <__malloc_unlock>:
 800a3bc:	4801      	ldr	r0, [pc, #4]	@ (800a3c4 <__malloc_unlock+0x8>)
 800a3be:	f7ff bba5 	b.w	8009b0c <__retarget_lock_release_recursive>
 800a3c2:	bf00      	nop
 800a3c4:	20000698 	.word	0x20000698

0800a3c8 <_Balloc>:
 800a3c8:	b570      	push	{r4, r5, r6, lr}
 800a3ca:	69c6      	ldr	r6, [r0, #28]
 800a3cc:	4604      	mov	r4, r0
 800a3ce:	460d      	mov	r5, r1
 800a3d0:	b976      	cbnz	r6, 800a3f0 <_Balloc+0x28>
 800a3d2:	2010      	movs	r0, #16
 800a3d4:	f001 f8a4 	bl	800b520 <malloc>
 800a3d8:	4602      	mov	r2, r0
 800a3da:	61e0      	str	r0, [r4, #28]
 800a3dc:	b920      	cbnz	r0, 800a3e8 <_Balloc+0x20>
 800a3de:	4b18      	ldr	r3, [pc, #96]	@ (800a440 <_Balloc+0x78>)
 800a3e0:	4818      	ldr	r0, [pc, #96]	@ (800a444 <_Balloc+0x7c>)
 800a3e2:	216b      	movs	r1, #107	@ 0x6b
 800a3e4:	f001 f86a 	bl	800b4bc <__assert_func>
 800a3e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a3ec:	6006      	str	r6, [r0, #0]
 800a3ee:	60c6      	str	r6, [r0, #12]
 800a3f0:	69e6      	ldr	r6, [r4, #28]
 800a3f2:	68f3      	ldr	r3, [r6, #12]
 800a3f4:	b183      	cbz	r3, 800a418 <_Balloc+0x50>
 800a3f6:	69e3      	ldr	r3, [r4, #28]
 800a3f8:	68db      	ldr	r3, [r3, #12]
 800a3fa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a3fe:	b9b8      	cbnz	r0, 800a430 <_Balloc+0x68>
 800a400:	2101      	movs	r1, #1
 800a402:	fa01 f605 	lsl.w	r6, r1, r5
 800a406:	1d72      	adds	r2, r6, #5
 800a408:	0092      	lsls	r2, r2, #2
 800a40a:	4620      	mov	r0, r4
 800a40c:	f001 f874 	bl	800b4f8 <_calloc_r>
 800a410:	b160      	cbz	r0, 800a42c <_Balloc+0x64>
 800a412:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a416:	e00e      	b.n	800a436 <_Balloc+0x6e>
 800a418:	2221      	movs	r2, #33	@ 0x21
 800a41a:	2104      	movs	r1, #4
 800a41c:	4620      	mov	r0, r4
 800a41e:	f001 f86b 	bl	800b4f8 <_calloc_r>
 800a422:	69e3      	ldr	r3, [r4, #28]
 800a424:	60f0      	str	r0, [r6, #12]
 800a426:	68db      	ldr	r3, [r3, #12]
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d1e4      	bne.n	800a3f6 <_Balloc+0x2e>
 800a42c:	2000      	movs	r0, #0
 800a42e:	bd70      	pop	{r4, r5, r6, pc}
 800a430:	6802      	ldr	r2, [r0, #0]
 800a432:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a436:	2300      	movs	r3, #0
 800a438:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a43c:	e7f7      	b.n	800a42e <_Balloc+0x66>
 800a43e:	bf00      	nop
 800a440:	0800c112 	.word	0x0800c112
 800a444:	0800c129 	.word	0x0800c129

0800a448 <_Bfree>:
 800a448:	b570      	push	{r4, r5, r6, lr}
 800a44a:	69c6      	ldr	r6, [r0, #28]
 800a44c:	4605      	mov	r5, r0
 800a44e:	460c      	mov	r4, r1
 800a450:	b976      	cbnz	r6, 800a470 <_Bfree+0x28>
 800a452:	2010      	movs	r0, #16
 800a454:	f001 f864 	bl	800b520 <malloc>
 800a458:	4602      	mov	r2, r0
 800a45a:	61e8      	str	r0, [r5, #28]
 800a45c:	b920      	cbnz	r0, 800a468 <_Bfree+0x20>
 800a45e:	4b09      	ldr	r3, [pc, #36]	@ (800a484 <_Bfree+0x3c>)
 800a460:	4809      	ldr	r0, [pc, #36]	@ (800a488 <_Bfree+0x40>)
 800a462:	218f      	movs	r1, #143	@ 0x8f
 800a464:	f001 f82a 	bl	800b4bc <__assert_func>
 800a468:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a46c:	6006      	str	r6, [r0, #0]
 800a46e:	60c6      	str	r6, [r0, #12]
 800a470:	b13c      	cbz	r4, 800a482 <_Bfree+0x3a>
 800a472:	69eb      	ldr	r3, [r5, #28]
 800a474:	6862      	ldr	r2, [r4, #4]
 800a476:	68db      	ldr	r3, [r3, #12]
 800a478:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a47c:	6021      	str	r1, [r4, #0]
 800a47e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a482:	bd70      	pop	{r4, r5, r6, pc}
 800a484:	0800c112 	.word	0x0800c112
 800a488:	0800c129 	.word	0x0800c129

0800a48c <__multadd>:
 800a48c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a490:	690d      	ldr	r5, [r1, #16]
 800a492:	4607      	mov	r7, r0
 800a494:	460c      	mov	r4, r1
 800a496:	461e      	mov	r6, r3
 800a498:	f101 0c14 	add.w	ip, r1, #20
 800a49c:	2000      	movs	r0, #0
 800a49e:	f8dc 3000 	ldr.w	r3, [ip]
 800a4a2:	b299      	uxth	r1, r3
 800a4a4:	fb02 6101 	mla	r1, r2, r1, r6
 800a4a8:	0c1e      	lsrs	r6, r3, #16
 800a4aa:	0c0b      	lsrs	r3, r1, #16
 800a4ac:	fb02 3306 	mla	r3, r2, r6, r3
 800a4b0:	b289      	uxth	r1, r1
 800a4b2:	3001      	adds	r0, #1
 800a4b4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a4b8:	4285      	cmp	r5, r0
 800a4ba:	f84c 1b04 	str.w	r1, [ip], #4
 800a4be:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a4c2:	dcec      	bgt.n	800a49e <__multadd+0x12>
 800a4c4:	b30e      	cbz	r6, 800a50a <__multadd+0x7e>
 800a4c6:	68a3      	ldr	r3, [r4, #8]
 800a4c8:	42ab      	cmp	r3, r5
 800a4ca:	dc19      	bgt.n	800a500 <__multadd+0x74>
 800a4cc:	6861      	ldr	r1, [r4, #4]
 800a4ce:	4638      	mov	r0, r7
 800a4d0:	3101      	adds	r1, #1
 800a4d2:	f7ff ff79 	bl	800a3c8 <_Balloc>
 800a4d6:	4680      	mov	r8, r0
 800a4d8:	b928      	cbnz	r0, 800a4e6 <__multadd+0x5a>
 800a4da:	4602      	mov	r2, r0
 800a4dc:	4b0c      	ldr	r3, [pc, #48]	@ (800a510 <__multadd+0x84>)
 800a4de:	480d      	ldr	r0, [pc, #52]	@ (800a514 <__multadd+0x88>)
 800a4e0:	21ba      	movs	r1, #186	@ 0xba
 800a4e2:	f000 ffeb 	bl	800b4bc <__assert_func>
 800a4e6:	6922      	ldr	r2, [r4, #16]
 800a4e8:	3202      	adds	r2, #2
 800a4ea:	f104 010c 	add.w	r1, r4, #12
 800a4ee:	0092      	lsls	r2, r2, #2
 800a4f0:	300c      	adds	r0, #12
 800a4f2:	f7ff fb0c 	bl	8009b0e <memcpy>
 800a4f6:	4621      	mov	r1, r4
 800a4f8:	4638      	mov	r0, r7
 800a4fa:	f7ff ffa5 	bl	800a448 <_Bfree>
 800a4fe:	4644      	mov	r4, r8
 800a500:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a504:	3501      	adds	r5, #1
 800a506:	615e      	str	r6, [r3, #20]
 800a508:	6125      	str	r5, [r4, #16]
 800a50a:	4620      	mov	r0, r4
 800a50c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a510:	0800c0a1 	.word	0x0800c0a1
 800a514:	0800c129 	.word	0x0800c129

0800a518 <__s2b>:
 800a518:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a51c:	460c      	mov	r4, r1
 800a51e:	4615      	mov	r5, r2
 800a520:	461f      	mov	r7, r3
 800a522:	2209      	movs	r2, #9
 800a524:	3308      	adds	r3, #8
 800a526:	4606      	mov	r6, r0
 800a528:	fb93 f3f2 	sdiv	r3, r3, r2
 800a52c:	2100      	movs	r1, #0
 800a52e:	2201      	movs	r2, #1
 800a530:	429a      	cmp	r2, r3
 800a532:	db09      	blt.n	800a548 <__s2b+0x30>
 800a534:	4630      	mov	r0, r6
 800a536:	f7ff ff47 	bl	800a3c8 <_Balloc>
 800a53a:	b940      	cbnz	r0, 800a54e <__s2b+0x36>
 800a53c:	4602      	mov	r2, r0
 800a53e:	4b19      	ldr	r3, [pc, #100]	@ (800a5a4 <__s2b+0x8c>)
 800a540:	4819      	ldr	r0, [pc, #100]	@ (800a5a8 <__s2b+0x90>)
 800a542:	21d3      	movs	r1, #211	@ 0xd3
 800a544:	f000 ffba 	bl	800b4bc <__assert_func>
 800a548:	0052      	lsls	r2, r2, #1
 800a54a:	3101      	adds	r1, #1
 800a54c:	e7f0      	b.n	800a530 <__s2b+0x18>
 800a54e:	9b08      	ldr	r3, [sp, #32]
 800a550:	6143      	str	r3, [r0, #20]
 800a552:	2d09      	cmp	r5, #9
 800a554:	f04f 0301 	mov.w	r3, #1
 800a558:	6103      	str	r3, [r0, #16]
 800a55a:	dd16      	ble.n	800a58a <__s2b+0x72>
 800a55c:	f104 0909 	add.w	r9, r4, #9
 800a560:	46c8      	mov	r8, r9
 800a562:	442c      	add	r4, r5
 800a564:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a568:	4601      	mov	r1, r0
 800a56a:	3b30      	subs	r3, #48	@ 0x30
 800a56c:	220a      	movs	r2, #10
 800a56e:	4630      	mov	r0, r6
 800a570:	f7ff ff8c 	bl	800a48c <__multadd>
 800a574:	45a0      	cmp	r8, r4
 800a576:	d1f5      	bne.n	800a564 <__s2b+0x4c>
 800a578:	f1a5 0408 	sub.w	r4, r5, #8
 800a57c:	444c      	add	r4, r9
 800a57e:	1b2d      	subs	r5, r5, r4
 800a580:	1963      	adds	r3, r4, r5
 800a582:	42bb      	cmp	r3, r7
 800a584:	db04      	blt.n	800a590 <__s2b+0x78>
 800a586:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a58a:	340a      	adds	r4, #10
 800a58c:	2509      	movs	r5, #9
 800a58e:	e7f6      	b.n	800a57e <__s2b+0x66>
 800a590:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a594:	4601      	mov	r1, r0
 800a596:	3b30      	subs	r3, #48	@ 0x30
 800a598:	220a      	movs	r2, #10
 800a59a:	4630      	mov	r0, r6
 800a59c:	f7ff ff76 	bl	800a48c <__multadd>
 800a5a0:	e7ee      	b.n	800a580 <__s2b+0x68>
 800a5a2:	bf00      	nop
 800a5a4:	0800c0a1 	.word	0x0800c0a1
 800a5a8:	0800c129 	.word	0x0800c129

0800a5ac <__hi0bits>:
 800a5ac:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a5b0:	4603      	mov	r3, r0
 800a5b2:	bf36      	itet	cc
 800a5b4:	0403      	lslcc	r3, r0, #16
 800a5b6:	2000      	movcs	r0, #0
 800a5b8:	2010      	movcc	r0, #16
 800a5ba:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a5be:	bf3c      	itt	cc
 800a5c0:	021b      	lslcc	r3, r3, #8
 800a5c2:	3008      	addcc	r0, #8
 800a5c4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a5c8:	bf3c      	itt	cc
 800a5ca:	011b      	lslcc	r3, r3, #4
 800a5cc:	3004      	addcc	r0, #4
 800a5ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a5d2:	bf3c      	itt	cc
 800a5d4:	009b      	lslcc	r3, r3, #2
 800a5d6:	3002      	addcc	r0, #2
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	db05      	blt.n	800a5e8 <__hi0bits+0x3c>
 800a5dc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a5e0:	f100 0001 	add.w	r0, r0, #1
 800a5e4:	bf08      	it	eq
 800a5e6:	2020      	moveq	r0, #32
 800a5e8:	4770      	bx	lr

0800a5ea <__lo0bits>:
 800a5ea:	6803      	ldr	r3, [r0, #0]
 800a5ec:	4602      	mov	r2, r0
 800a5ee:	f013 0007 	ands.w	r0, r3, #7
 800a5f2:	d00b      	beq.n	800a60c <__lo0bits+0x22>
 800a5f4:	07d9      	lsls	r1, r3, #31
 800a5f6:	d421      	bmi.n	800a63c <__lo0bits+0x52>
 800a5f8:	0798      	lsls	r0, r3, #30
 800a5fa:	bf49      	itett	mi
 800a5fc:	085b      	lsrmi	r3, r3, #1
 800a5fe:	089b      	lsrpl	r3, r3, #2
 800a600:	2001      	movmi	r0, #1
 800a602:	6013      	strmi	r3, [r2, #0]
 800a604:	bf5c      	itt	pl
 800a606:	6013      	strpl	r3, [r2, #0]
 800a608:	2002      	movpl	r0, #2
 800a60a:	4770      	bx	lr
 800a60c:	b299      	uxth	r1, r3
 800a60e:	b909      	cbnz	r1, 800a614 <__lo0bits+0x2a>
 800a610:	0c1b      	lsrs	r3, r3, #16
 800a612:	2010      	movs	r0, #16
 800a614:	b2d9      	uxtb	r1, r3
 800a616:	b909      	cbnz	r1, 800a61c <__lo0bits+0x32>
 800a618:	3008      	adds	r0, #8
 800a61a:	0a1b      	lsrs	r3, r3, #8
 800a61c:	0719      	lsls	r1, r3, #28
 800a61e:	bf04      	itt	eq
 800a620:	091b      	lsreq	r3, r3, #4
 800a622:	3004      	addeq	r0, #4
 800a624:	0799      	lsls	r1, r3, #30
 800a626:	bf04      	itt	eq
 800a628:	089b      	lsreq	r3, r3, #2
 800a62a:	3002      	addeq	r0, #2
 800a62c:	07d9      	lsls	r1, r3, #31
 800a62e:	d403      	bmi.n	800a638 <__lo0bits+0x4e>
 800a630:	085b      	lsrs	r3, r3, #1
 800a632:	f100 0001 	add.w	r0, r0, #1
 800a636:	d003      	beq.n	800a640 <__lo0bits+0x56>
 800a638:	6013      	str	r3, [r2, #0]
 800a63a:	4770      	bx	lr
 800a63c:	2000      	movs	r0, #0
 800a63e:	4770      	bx	lr
 800a640:	2020      	movs	r0, #32
 800a642:	4770      	bx	lr

0800a644 <__i2b>:
 800a644:	b510      	push	{r4, lr}
 800a646:	460c      	mov	r4, r1
 800a648:	2101      	movs	r1, #1
 800a64a:	f7ff febd 	bl	800a3c8 <_Balloc>
 800a64e:	4602      	mov	r2, r0
 800a650:	b928      	cbnz	r0, 800a65e <__i2b+0x1a>
 800a652:	4b05      	ldr	r3, [pc, #20]	@ (800a668 <__i2b+0x24>)
 800a654:	4805      	ldr	r0, [pc, #20]	@ (800a66c <__i2b+0x28>)
 800a656:	f240 1145 	movw	r1, #325	@ 0x145
 800a65a:	f000 ff2f 	bl	800b4bc <__assert_func>
 800a65e:	2301      	movs	r3, #1
 800a660:	6144      	str	r4, [r0, #20]
 800a662:	6103      	str	r3, [r0, #16]
 800a664:	bd10      	pop	{r4, pc}
 800a666:	bf00      	nop
 800a668:	0800c0a1 	.word	0x0800c0a1
 800a66c:	0800c129 	.word	0x0800c129

0800a670 <__multiply>:
 800a670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a674:	4614      	mov	r4, r2
 800a676:	690a      	ldr	r2, [r1, #16]
 800a678:	6923      	ldr	r3, [r4, #16]
 800a67a:	429a      	cmp	r2, r3
 800a67c:	bfa8      	it	ge
 800a67e:	4623      	movge	r3, r4
 800a680:	460f      	mov	r7, r1
 800a682:	bfa4      	itt	ge
 800a684:	460c      	movge	r4, r1
 800a686:	461f      	movge	r7, r3
 800a688:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800a68c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800a690:	68a3      	ldr	r3, [r4, #8]
 800a692:	6861      	ldr	r1, [r4, #4]
 800a694:	eb0a 0609 	add.w	r6, sl, r9
 800a698:	42b3      	cmp	r3, r6
 800a69a:	b085      	sub	sp, #20
 800a69c:	bfb8      	it	lt
 800a69e:	3101      	addlt	r1, #1
 800a6a0:	f7ff fe92 	bl	800a3c8 <_Balloc>
 800a6a4:	b930      	cbnz	r0, 800a6b4 <__multiply+0x44>
 800a6a6:	4602      	mov	r2, r0
 800a6a8:	4b44      	ldr	r3, [pc, #272]	@ (800a7bc <__multiply+0x14c>)
 800a6aa:	4845      	ldr	r0, [pc, #276]	@ (800a7c0 <__multiply+0x150>)
 800a6ac:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a6b0:	f000 ff04 	bl	800b4bc <__assert_func>
 800a6b4:	f100 0514 	add.w	r5, r0, #20
 800a6b8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a6bc:	462b      	mov	r3, r5
 800a6be:	2200      	movs	r2, #0
 800a6c0:	4543      	cmp	r3, r8
 800a6c2:	d321      	bcc.n	800a708 <__multiply+0x98>
 800a6c4:	f107 0114 	add.w	r1, r7, #20
 800a6c8:	f104 0214 	add.w	r2, r4, #20
 800a6cc:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800a6d0:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800a6d4:	9302      	str	r3, [sp, #8]
 800a6d6:	1b13      	subs	r3, r2, r4
 800a6d8:	3b15      	subs	r3, #21
 800a6da:	f023 0303 	bic.w	r3, r3, #3
 800a6de:	3304      	adds	r3, #4
 800a6e0:	f104 0715 	add.w	r7, r4, #21
 800a6e4:	42ba      	cmp	r2, r7
 800a6e6:	bf38      	it	cc
 800a6e8:	2304      	movcc	r3, #4
 800a6ea:	9301      	str	r3, [sp, #4]
 800a6ec:	9b02      	ldr	r3, [sp, #8]
 800a6ee:	9103      	str	r1, [sp, #12]
 800a6f0:	428b      	cmp	r3, r1
 800a6f2:	d80c      	bhi.n	800a70e <__multiply+0x9e>
 800a6f4:	2e00      	cmp	r6, #0
 800a6f6:	dd03      	ble.n	800a700 <__multiply+0x90>
 800a6f8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d05b      	beq.n	800a7b8 <__multiply+0x148>
 800a700:	6106      	str	r6, [r0, #16]
 800a702:	b005      	add	sp, #20
 800a704:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a708:	f843 2b04 	str.w	r2, [r3], #4
 800a70c:	e7d8      	b.n	800a6c0 <__multiply+0x50>
 800a70e:	f8b1 a000 	ldrh.w	sl, [r1]
 800a712:	f1ba 0f00 	cmp.w	sl, #0
 800a716:	d024      	beq.n	800a762 <__multiply+0xf2>
 800a718:	f104 0e14 	add.w	lr, r4, #20
 800a71c:	46a9      	mov	r9, r5
 800a71e:	f04f 0c00 	mov.w	ip, #0
 800a722:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a726:	f8d9 3000 	ldr.w	r3, [r9]
 800a72a:	fa1f fb87 	uxth.w	fp, r7
 800a72e:	b29b      	uxth	r3, r3
 800a730:	fb0a 330b 	mla	r3, sl, fp, r3
 800a734:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800a738:	f8d9 7000 	ldr.w	r7, [r9]
 800a73c:	4463      	add	r3, ip
 800a73e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a742:	fb0a c70b 	mla	r7, sl, fp, ip
 800a746:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800a74a:	b29b      	uxth	r3, r3
 800a74c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a750:	4572      	cmp	r2, lr
 800a752:	f849 3b04 	str.w	r3, [r9], #4
 800a756:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a75a:	d8e2      	bhi.n	800a722 <__multiply+0xb2>
 800a75c:	9b01      	ldr	r3, [sp, #4]
 800a75e:	f845 c003 	str.w	ip, [r5, r3]
 800a762:	9b03      	ldr	r3, [sp, #12]
 800a764:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a768:	3104      	adds	r1, #4
 800a76a:	f1b9 0f00 	cmp.w	r9, #0
 800a76e:	d021      	beq.n	800a7b4 <__multiply+0x144>
 800a770:	682b      	ldr	r3, [r5, #0]
 800a772:	f104 0c14 	add.w	ip, r4, #20
 800a776:	46ae      	mov	lr, r5
 800a778:	f04f 0a00 	mov.w	sl, #0
 800a77c:	f8bc b000 	ldrh.w	fp, [ip]
 800a780:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800a784:	fb09 770b 	mla	r7, r9, fp, r7
 800a788:	4457      	add	r7, sl
 800a78a:	b29b      	uxth	r3, r3
 800a78c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a790:	f84e 3b04 	str.w	r3, [lr], #4
 800a794:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a798:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a79c:	f8be 3000 	ldrh.w	r3, [lr]
 800a7a0:	fb09 330a 	mla	r3, r9, sl, r3
 800a7a4:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800a7a8:	4562      	cmp	r2, ip
 800a7aa:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a7ae:	d8e5      	bhi.n	800a77c <__multiply+0x10c>
 800a7b0:	9f01      	ldr	r7, [sp, #4]
 800a7b2:	51eb      	str	r3, [r5, r7]
 800a7b4:	3504      	adds	r5, #4
 800a7b6:	e799      	b.n	800a6ec <__multiply+0x7c>
 800a7b8:	3e01      	subs	r6, #1
 800a7ba:	e79b      	b.n	800a6f4 <__multiply+0x84>
 800a7bc:	0800c0a1 	.word	0x0800c0a1
 800a7c0:	0800c129 	.word	0x0800c129

0800a7c4 <__pow5mult>:
 800a7c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a7c8:	4615      	mov	r5, r2
 800a7ca:	f012 0203 	ands.w	r2, r2, #3
 800a7ce:	4607      	mov	r7, r0
 800a7d0:	460e      	mov	r6, r1
 800a7d2:	d007      	beq.n	800a7e4 <__pow5mult+0x20>
 800a7d4:	4c25      	ldr	r4, [pc, #148]	@ (800a86c <__pow5mult+0xa8>)
 800a7d6:	3a01      	subs	r2, #1
 800a7d8:	2300      	movs	r3, #0
 800a7da:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a7de:	f7ff fe55 	bl	800a48c <__multadd>
 800a7e2:	4606      	mov	r6, r0
 800a7e4:	10ad      	asrs	r5, r5, #2
 800a7e6:	d03d      	beq.n	800a864 <__pow5mult+0xa0>
 800a7e8:	69fc      	ldr	r4, [r7, #28]
 800a7ea:	b97c      	cbnz	r4, 800a80c <__pow5mult+0x48>
 800a7ec:	2010      	movs	r0, #16
 800a7ee:	f000 fe97 	bl	800b520 <malloc>
 800a7f2:	4602      	mov	r2, r0
 800a7f4:	61f8      	str	r0, [r7, #28]
 800a7f6:	b928      	cbnz	r0, 800a804 <__pow5mult+0x40>
 800a7f8:	4b1d      	ldr	r3, [pc, #116]	@ (800a870 <__pow5mult+0xac>)
 800a7fa:	481e      	ldr	r0, [pc, #120]	@ (800a874 <__pow5mult+0xb0>)
 800a7fc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a800:	f000 fe5c 	bl	800b4bc <__assert_func>
 800a804:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a808:	6004      	str	r4, [r0, #0]
 800a80a:	60c4      	str	r4, [r0, #12]
 800a80c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a810:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a814:	b94c      	cbnz	r4, 800a82a <__pow5mult+0x66>
 800a816:	f240 2171 	movw	r1, #625	@ 0x271
 800a81a:	4638      	mov	r0, r7
 800a81c:	f7ff ff12 	bl	800a644 <__i2b>
 800a820:	2300      	movs	r3, #0
 800a822:	f8c8 0008 	str.w	r0, [r8, #8]
 800a826:	4604      	mov	r4, r0
 800a828:	6003      	str	r3, [r0, #0]
 800a82a:	f04f 0900 	mov.w	r9, #0
 800a82e:	07eb      	lsls	r3, r5, #31
 800a830:	d50a      	bpl.n	800a848 <__pow5mult+0x84>
 800a832:	4631      	mov	r1, r6
 800a834:	4622      	mov	r2, r4
 800a836:	4638      	mov	r0, r7
 800a838:	f7ff ff1a 	bl	800a670 <__multiply>
 800a83c:	4631      	mov	r1, r6
 800a83e:	4680      	mov	r8, r0
 800a840:	4638      	mov	r0, r7
 800a842:	f7ff fe01 	bl	800a448 <_Bfree>
 800a846:	4646      	mov	r6, r8
 800a848:	106d      	asrs	r5, r5, #1
 800a84a:	d00b      	beq.n	800a864 <__pow5mult+0xa0>
 800a84c:	6820      	ldr	r0, [r4, #0]
 800a84e:	b938      	cbnz	r0, 800a860 <__pow5mult+0x9c>
 800a850:	4622      	mov	r2, r4
 800a852:	4621      	mov	r1, r4
 800a854:	4638      	mov	r0, r7
 800a856:	f7ff ff0b 	bl	800a670 <__multiply>
 800a85a:	6020      	str	r0, [r4, #0]
 800a85c:	f8c0 9000 	str.w	r9, [r0]
 800a860:	4604      	mov	r4, r0
 800a862:	e7e4      	b.n	800a82e <__pow5mult+0x6a>
 800a864:	4630      	mov	r0, r6
 800a866:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a86a:	bf00      	nop
 800a86c:	0800c184 	.word	0x0800c184
 800a870:	0800c112 	.word	0x0800c112
 800a874:	0800c129 	.word	0x0800c129

0800a878 <__lshift>:
 800a878:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a87c:	460c      	mov	r4, r1
 800a87e:	6849      	ldr	r1, [r1, #4]
 800a880:	6923      	ldr	r3, [r4, #16]
 800a882:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a886:	68a3      	ldr	r3, [r4, #8]
 800a888:	4607      	mov	r7, r0
 800a88a:	4691      	mov	r9, r2
 800a88c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a890:	f108 0601 	add.w	r6, r8, #1
 800a894:	42b3      	cmp	r3, r6
 800a896:	db0b      	blt.n	800a8b0 <__lshift+0x38>
 800a898:	4638      	mov	r0, r7
 800a89a:	f7ff fd95 	bl	800a3c8 <_Balloc>
 800a89e:	4605      	mov	r5, r0
 800a8a0:	b948      	cbnz	r0, 800a8b6 <__lshift+0x3e>
 800a8a2:	4602      	mov	r2, r0
 800a8a4:	4b28      	ldr	r3, [pc, #160]	@ (800a948 <__lshift+0xd0>)
 800a8a6:	4829      	ldr	r0, [pc, #164]	@ (800a94c <__lshift+0xd4>)
 800a8a8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a8ac:	f000 fe06 	bl	800b4bc <__assert_func>
 800a8b0:	3101      	adds	r1, #1
 800a8b2:	005b      	lsls	r3, r3, #1
 800a8b4:	e7ee      	b.n	800a894 <__lshift+0x1c>
 800a8b6:	2300      	movs	r3, #0
 800a8b8:	f100 0114 	add.w	r1, r0, #20
 800a8bc:	f100 0210 	add.w	r2, r0, #16
 800a8c0:	4618      	mov	r0, r3
 800a8c2:	4553      	cmp	r3, sl
 800a8c4:	db33      	blt.n	800a92e <__lshift+0xb6>
 800a8c6:	6920      	ldr	r0, [r4, #16]
 800a8c8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a8cc:	f104 0314 	add.w	r3, r4, #20
 800a8d0:	f019 091f 	ands.w	r9, r9, #31
 800a8d4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a8d8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a8dc:	d02b      	beq.n	800a936 <__lshift+0xbe>
 800a8de:	f1c9 0e20 	rsb	lr, r9, #32
 800a8e2:	468a      	mov	sl, r1
 800a8e4:	2200      	movs	r2, #0
 800a8e6:	6818      	ldr	r0, [r3, #0]
 800a8e8:	fa00 f009 	lsl.w	r0, r0, r9
 800a8ec:	4310      	orrs	r0, r2
 800a8ee:	f84a 0b04 	str.w	r0, [sl], #4
 800a8f2:	f853 2b04 	ldr.w	r2, [r3], #4
 800a8f6:	459c      	cmp	ip, r3
 800a8f8:	fa22 f20e 	lsr.w	r2, r2, lr
 800a8fc:	d8f3      	bhi.n	800a8e6 <__lshift+0x6e>
 800a8fe:	ebac 0304 	sub.w	r3, ip, r4
 800a902:	3b15      	subs	r3, #21
 800a904:	f023 0303 	bic.w	r3, r3, #3
 800a908:	3304      	adds	r3, #4
 800a90a:	f104 0015 	add.w	r0, r4, #21
 800a90e:	4584      	cmp	ip, r0
 800a910:	bf38      	it	cc
 800a912:	2304      	movcc	r3, #4
 800a914:	50ca      	str	r2, [r1, r3]
 800a916:	b10a      	cbz	r2, 800a91c <__lshift+0xa4>
 800a918:	f108 0602 	add.w	r6, r8, #2
 800a91c:	3e01      	subs	r6, #1
 800a91e:	4638      	mov	r0, r7
 800a920:	612e      	str	r6, [r5, #16]
 800a922:	4621      	mov	r1, r4
 800a924:	f7ff fd90 	bl	800a448 <_Bfree>
 800a928:	4628      	mov	r0, r5
 800a92a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a92e:	f842 0f04 	str.w	r0, [r2, #4]!
 800a932:	3301      	adds	r3, #1
 800a934:	e7c5      	b.n	800a8c2 <__lshift+0x4a>
 800a936:	3904      	subs	r1, #4
 800a938:	f853 2b04 	ldr.w	r2, [r3], #4
 800a93c:	f841 2f04 	str.w	r2, [r1, #4]!
 800a940:	459c      	cmp	ip, r3
 800a942:	d8f9      	bhi.n	800a938 <__lshift+0xc0>
 800a944:	e7ea      	b.n	800a91c <__lshift+0xa4>
 800a946:	bf00      	nop
 800a948:	0800c0a1 	.word	0x0800c0a1
 800a94c:	0800c129 	.word	0x0800c129

0800a950 <__mcmp>:
 800a950:	690a      	ldr	r2, [r1, #16]
 800a952:	4603      	mov	r3, r0
 800a954:	6900      	ldr	r0, [r0, #16]
 800a956:	1a80      	subs	r0, r0, r2
 800a958:	b530      	push	{r4, r5, lr}
 800a95a:	d10e      	bne.n	800a97a <__mcmp+0x2a>
 800a95c:	3314      	adds	r3, #20
 800a95e:	3114      	adds	r1, #20
 800a960:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a964:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a968:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a96c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a970:	4295      	cmp	r5, r2
 800a972:	d003      	beq.n	800a97c <__mcmp+0x2c>
 800a974:	d205      	bcs.n	800a982 <__mcmp+0x32>
 800a976:	f04f 30ff 	mov.w	r0, #4294967295
 800a97a:	bd30      	pop	{r4, r5, pc}
 800a97c:	42a3      	cmp	r3, r4
 800a97e:	d3f3      	bcc.n	800a968 <__mcmp+0x18>
 800a980:	e7fb      	b.n	800a97a <__mcmp+0x2a>
 800a982:	2001      	movs	r0, #1
 800a984:	e7f9      	b.n	800a97a <__mcmp+0x2a>
	...

0800a988 <__mdiff>:
 800a988:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a98c:	4689      	mov	r9, r1
 800a98e:	4606      	mov	r6, r0
 800a990:	4611      	mov	r1, r2
 800a992:	4648      	mov	r0, r9
 800a994:	4614      	mov	r4, r2
 800a996:	f7ff ffdb 	bl	800a950 <__mcmp>
 800a99a:	1e05      	subs	r5, r0, #0
 800a99c:	d112      	bne.n	800a9c4 <__mdiff+0x3c>
 800a99e:	4629      	mov	r1, r5
 800a9a0:	4630      	mov	r0, r6
 800a9a2:	f7ff fd11 	bl	800a3c8 <_Balloc>
 800a9a6:	4602      	mov	r2, r0
 800a9a8:	b928      	cbnz	r0, 800a9b6 <__mdiff+0x2e>
 800a9aa:	4b3f      	ldr	r3, [pc, #252]	@ (800aaa8 <__mdiff+0x120>)
 800a9ac:	f240 2137 	movw	r1, #567	@ 0x237
 800a9b0:	483e      	ldr	r0, [pc, #248]	@ (800aaac <__mdiff+0x124>)
 800a9b2:	f000 fd83 	bl	800b4bc <__assert_func>
 800a9b6:	2301      	movs	r3, #1
 800a9b8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a9bc:	4610      	mov	r0, r2
 800a9be:	b003      	add	sp, #12
 800a9c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9c4:	bfbc      	itt	lt
 800a9c6:	464b      	movlt	r3, r9
 800a9c8:	46a1      	movlt	r9, r4
 800a9ca:	4630      	mov	r0, r6
 800a9cc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a9d0:	bfba      	itte	lt
 800a9d2:	461c      	movlt	r4, r3
 800a9d4:	2501      	movlt	r5, #1
 800a9d6:	2500      	movge	r5, #0
 800a9d8:	f7ff fcf6 	bl	800a3c8 <_Balloc>
 800a9dc:	4602      	mov	r2, r0
 800a9de:	b918      	cbnz	r0, 800a9e8 <__mdiff+0x60>
 800a9e0:	4b31      	ldr	r3, [pc, #196]	@ (800aaa8 <__mdiff+0x120>)
 800a9e2:	f240 2145 	movw	r1, #581	@ 0x245
 800a9e6:	e7e3      	b.n	800a9b0 <__mdiff+0x28>
 800a9e8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a9ec:	6926      	ldr	r6, [r4, #16]
 800a9ee:	60c5      	str	r5, [r0, #12]
 800a9f0:	f109 0310 	add.w	r3, r9, #16
 800a9f4:	f109 0514 	add.w	r5, r9, #20
 800a9f8:	f104 0e14 	add.w	lr, r4, #20
 800a9fc:	f100 0b14 	add.w	fp, r0, #20
 800aa00:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800aa04:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800aa08:	9301      	str	r3, [sp, #4]
 800aa0a:	46d9      	mov	r9, fp
 800aa0c:	f04f 0c00 	mov.w	ip, #0
 800aa10:	9b01      	ldr	r3, [sp, #4]
 800aa12:	f85e 0b04 	ldr.w	r0, [lr], #4
 800aa16:	f853 af04 	ldr.w	sl, [r3, #4]!
 800aa1a:	9301      	str	r3, [sp, #4]
 800aa1c:	fa1f f38a 	uxth.w	r3, sl
 800aa20:	4619      	mov	r1, r3
 800aa22:	b283      	uxth	r3, r0
 800aa24:	1acb      	subs	r3, r1, r3
 800aa26:	0c00      	lsrs	r0, r0, #16
 800aa28:	4463      	add	r3, ip
 800aa2a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800aa2e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800aa32:	b29b      	uxth	r3, r3
 800aa34:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800aa38:	4576      	cmp	r6, lr
 800aa3a:	f849 3b04 	str.w	r3, [r9], #4
 800aa3e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800aa42:	d8e5      	bhi.n	800aa10 <__mdiff+0x88>
 800aa44:	1b33      	subs	r3, r6, r4
 800aa46:	3b15      	subs	r3, #21
 800aa48:	f023 0303 	bic.w	r3, r3, #3
 800aa4c:	3415      	adds	r4, #21
 800aa4e:	3304      	adds	r3, #4
 800aa50:	42a6      	cmp	r6, r4
 800aa52:	bf38      	it	cc
 800aa54:	2304      	movcc	r3, #4
 800aa56:	441d      	add	r5, r3
 800aa58:	445b      	add	r3, fp
 800aa5a:	461e      	mov	r6, r3
 800aa5c:	462c      	mov	r4, r5
 800aa5e:	4544      	cmp	r4, r8
 800aa60:	d30e      	bcc.n	800aa80 <__mdiff+0xf8>
 800aa62:	f108 0103 	add.w	r1, r8, #3
 800aa66:	1b49      	subs	r1, r1, r5
 800aa68:	f021 0103 	bic.w	r1, r1, #3
 800aa6c:	3d03      	subs	r5, #3
 800aa6e:	45a8      	cmp	r8, r5
 800aa70:	bf38      	it	cc
 800aa72:	2100      	movcc	r1, #0
 800aa74:	440b      	add	r3, r1
 800aa76:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800aa7a:	b191      	cbz	r1, 800aaa2 <__mdiff+0x11a>
 800aa7c:	6117      	str	r7, [r2, #16]
 800aa7e:	e79d      	b.n	800a9bc <__mdiff+0x34>
 800aa80:	f854 1b04 	ldr.w	r1, [r4], #4
 800aa84:	46e6      	mov	lr, ip
 800aa86:	0c08      	lsrs	r0, r1, #16
 800aa88:	fa1c fc81 	uxtah	ip, ip, r1
 800aa8c:	4471      	add	r1, lr
 800aa8e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800aa92:	b289      	uxth	r1, r1
 800aa94:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800aa98:	f846 1b04 	str.w	r1, [r6], #4
 800aa9c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800aaa0:	e7dd      	b.n	800aa5e <__mdiff+0xd6>
 800aaa2:	3f01      	subs	r7, #1
 800aaa4:	e7e7      	b.n	800aa76 <__mdiff+0xee>
 800aaa6:	bf00      	nop
 800aaa8:	0800c0a1 	.word	0x0800c0a1
 800aaac:	0800c129 	.word	0x0800c129

0800aab0 <__ulp>:
 800aab0:	b082      	sub	sp, #8
 800aab2:	ed8d 0b00 	vstr	d0, [sp]
 800aab6:	9a01      	ldr	r2, [sp, #4]
 800aab8:	4b0f      	ldr	r3, [pc, #60]	@ (800aaf8 <__ulp+0x48>)
 800aaba:	4013      	ands	r3, r2
 800aabc:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	dc08      	bgt.n	800aad6 <__ulp+0x26>
 800aac4:	425b      	negs	r3, r3
 800aac6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800aaca:	ea4f 5223 	mov.w	r2, r3, asr #20
 800aace:	da04      	bge.n	800aada <__ulp+0x2a>
 800aad0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800aad4:	4113      	asrs	r3, r2
 800aad6:	2200      	movs	r2, #0
 800aad8:	e008      	b.n	800aaec <__ulp+0x3c>
 800aada:	f1a2 0314 	sub.w	r3, r2, #20
 800aade:	2b1e      	cmp	r3, #30
 800aae0:	bfda      	itte	le
 800aae2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800aae6:	40da      	lsrle	r2, r3
 800aae8:	2201      	movgt	r2, #1
 800aaea:	2300      	movs	r3, #0
 800aaec:	4619      	mov	r1, r3
 800aaee:	4610      	mov	r0, r2
 800aaf0:	ec41 0b10 	vmov	d0, r0, r1
 800aaf4:	b002      	add	sp, #8
 800aaf6:	4770      	bx	lr
 800aaf8:	7ff00000 	.word	0x7ff00000

0800aafc <__b2d>:
 800aafc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab00:	6906      	ldr	r6, [r0, #16]
 800ab02:	f100 0814 	add.w	r8, r0, #20
 800ab06:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800ab0a:	1f37      	subs	r7, r6, #4
 800ab0c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800ab10:	4610      	mov	r0, r2
 800ab12:	f7ff fd4b 	bl	800a5ac <__hi0bits>
 800ab16:	f1c0 0320 	rsb	r3, r0, #32
 800ab1a:	280a      	cmp	r0, #10
 800ab1c:	600b      	str	r3, [r1, #0]
 800ab1e:	491b      	ldr	r1, [pc, #108]	@ (800ab8c <__b2d+0x90>)
 800ab20:	dc15      	bgt.n	800ab4e <__b2d+0x52>
 800ab22:	f1c0 0c0b 	rsb	ip, r0, #11
 800ab26:	fa22 f30c 	lsr.w	r3, r2, ip
 800ab2a:	45b8      	cmp	r8, r7
 800ab2c:	ea43 0501 	orr.w	r5, r3, r1
 800ab30:	bf34      	ite	cc
 800ab32:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800ab36:	2300      	movcs	r3, #0
 800ab38:	3015      	adds	r0, #21
 800ab3a:	fa02 f000 	lsl.w	r0, r2, r0
 800ab3e:	fa23 f30c 	lsr.w	r3, r3, ip
 800ab42:	4303      	orrs	r3, r0
 800ab44:	461c      	mov	r4, r3
 800ab46:	ec45 4b10 	vmov	d0, r4, r5
 800ab4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab4e:	45b8      	cmp	r8, r7
 800ab50:	bf3a      	itte	cc
 800ab52:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800ab56:	f1a6 0708 	subcc.w	r7, r6, #8
 800ab5a:	2300      	movcs	r3, #0
 800ab5c:	380b      	subs	r0, #11
 800ab5e:	d012      	beq.n	800ab86 <__b2d+0x8a>
 800ab60:	f1c0 0120 	rsb	r1, r0, #32
 800ab64:	fa23 f401 	lsr.w	r4, r3, r1
 800ab68:	4082      	lsls	r2, r0
 800ab6a:	4322      	orrs	r2, r4
 800ab6c:	4547      	cmp	r7, r8
 800ab6e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800ab72:	bf8c      	ite	hi
 800ab74:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800ab78:	2200      	movls	r2, #0
 800ab7a:	4083      	lsls	r3, r0
 800ab7c:	40ca      	lsrs	r2, r1
 800ab7e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800ab82:	4313      	orrs	r3, r2
 800ab84:	e7de      	b.n	800ab44 <__b2d+0x48>
 800ab86:	ea42 0501 	orr.w	r5, r2, r1
 800ab8a:	e7db      	b.n	800ab44 <__b2d+0x48>
 800ab8c:	3ff00000 	.word	0x3ff00000

0800ab90 <__d2b>:
 800ab90:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ab94:	460f      	mov	r7, r1
 800ab96:	2101      	movs	r1, #1
 800ab98:	ec59 8b10 	vmov	r8, r9, d0
 800ab9c:	4616      	mov	r6, r2
 800ab9e:	f7ff fc13 	bl	800a3c8 <_Balloc>
 800aba2:	4604      	mov	r4, r0
 800aba4:	b930      	cbnz	r0, 800abb4 <__d2b+0x24>
 800aba6:	4602      	mov	r2, r0
 800aba8:	4b23      	ldr	r3, [pc, #140]	@ (800ac38 <__d2b+0xa8>)
 800abaa:	4824      	ldr	r0, [pc, #144]	@ (800ac3c <__d2b+0xac>)
 800abac:	f240 310f 	movw	r1, #783	@ 0x30f
 800abb0:	f000 fc84 	bl	800b4bc <__assert_func>
 800abb4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800abb8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800abbc:	b10d      	cbz	r5, 800abc2 <__d2b+0x32>
 800abbe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800abc2:	9301      	str	r3, [sp, #4]
 800abc4:	f1b8 0300 	subs.w	r3, r8, #0
 800abc8:	d023      	beq.n	800ac12 <__d2b+0x82>
 800abca:	4668      	mov	r0, sp
 800abcc:	9300      	str	r3, [sp, #0]
 800abce:	f7ff fd0c 	bl	800a5ea <__lo0bits>
 800abd2:	e9dd 1200 	ldrd	r1, r2, [sp]
 800abd6:	b1d0      	cbz	r0, 800ac0e <__d2b+0x7e>
 800abd8:	f1c0 0320 	rsb	r3, r0, #32
 800abdc:	fa02 f303 	lsl.w	r3, r2, r3
 800abe0:	430b      	orrs	r3, r1
 800abe2:	40c2      	lsrs	r2, r0
 800abe4:	6163      	str	r3, [r4, #20]
 800abe6:	9201      	str	r2, [sp, #4]
 800abe8:	9b01      	ldr	r3, [sp, #4]
 800abea:	61a3      	str	r3, [r4, #24]
 800abec:	2b00      	cmp	r3, #0
 800abee:	bf0c      	ite	eq
 800abf0:	2201      	moveq	r2, #1
 800abf2:	2202      	movne	r2, #2
 800abf4:	6122      	str	r2, [r4, #16]
 800abf6:	b1a5      	cbz	r5, 800ac22 <__d2b+0x92>
 800abf8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800abfc:	4405      	add	r5, r0
 800abfe:	603d      	str	r5, [r7, #0]
 800ac00:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800ac04:	6030      	str	r0, [r6, #0]
 800ac06:	4620      	mov	r0, r4
 800ac08:	b003      	add	sp, #12
 800ac0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ac0e:	6161      	str	r1, [r4, #20]
 800ac10:	e7ea      	b.n	800abe8 <__d2b+0x58>
 800ac12:	a801      	add	r0, sp, #4
 800ac14:	f7ff fce9 	bl	800a5ea <__lo0bits>
 800ac18:	9b01      	ldr	r3, [sp, #4]
 800ac1a:	6163      	str	r3, [r4, #20]
 800ac1c:	3020      	adds	r0, #32
 800ac1e:	2201      	movs	r2, #1
 800ac20:	e7e8      	b.n	800abf4 <__d2b+0x64>
 800ac22:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ac26:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800ac2a:	6038      	str	r0, [r7, #0]
 800ac2c:	6918      	ldr	r0, [r3, #16]
 800ac2e:	f7ff fcbd 	bl	800a5ac <__hi0bits>
 800ac32:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ac36:	e7e5      	b.n	800ac04 <__d2b+0x74>
 800ac38:	0800c0a1 	.word	0x0800c0a1
 800ac3c:	0800c129 	.word	0x0800c129

0800ac40 <__ratio>:
 800ac40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac44:	b085      	sub	sp, #20
 800ac46:	e9cd 1000 	strd	r1, r0, [sp]
 800ac4a:	a902      	add	r1, sp, #8
 800ac4c:	f7ff ff56 	bl	800aafc <__b2d>
 800ac50:	9800      	ldr	r0, [sp, #0]
 800ac52:	a903      	add	r1, sp, #12
 800ac54:	ec55 4b10 	vmov	r4, r5, d0
 800ac58:	f7ff ff50 	bl	800aafc <__b2d>
 800ac5c:	9b01      	ldr	r3, [sp, #4]
 800ac5e:	6919      	ldr	r1, [r3, #16]
 800ac60:	9b00      	ldr	r3, [sp, #0]
 800ac62:	691b      	ldr	r3, [r3, #16]
 800ac64:	1ac9      	subs	r1, r1, r3
 800ac66:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800ac6a:	1a9b      	subs	r3, r3, r2
 800ac6c:	ec5b ab10 	vmov	sl, fp, d0
 800ac70:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	bfce      	itee	gt
 800ac78:	462a      	movgt	r2, r5
 800ac7a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800ac7e:	465a      	movle	r2, fp
 800ac80:	462f      	mov	r7, r5
 800ac82:	46d9      	mov	r9, fp
 800ac84:	bfcc      	ite	gt
 800ac86:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800ac8a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800ac8e:	464b      	mov	r3, r9
 800ac90:	4652      	mov	r2, sl
 800ac92:	4620      	mov	r0, r4
 800ac94:	4639      	mov	r1, r7
 800ac96:	f7f5 fde9 	bl	800086c <__aeabi_ddiv>
 800ac9a:	ec41 0b10 	vmov	d0, r0, r1
 800ac9e:	b005      	add	sp, #20
 800aca0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800aca4 <__copybits>:
 800aca4:	3901      	subs	r1, #1
 800aca6:	b570      	push	{r4, r5, r6, lr}
 800aca8:	1149      	asrs	r1, r1, #5
 800acaa:	6914      	ldr	r4, [r2, #16]
 800acac:	3101      	adds	r1, #1
 800acae:	f102 0314 	add.w	r3, r2, #20
 800acb2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800acb6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800acba:	1f05      	subs	r5, r0, #4
 800acbc:	42a3      	cmp	r3, r4
 800acbe:	d30c      	bcc.n	800acda <__copybits+0x36>
 800acc0:	1aa3      	subs	r3, r4, r2
 800acc2:	3b11      	subs	r3, #17
 800acc4:	f023 0303 	bic.w	r3, r3, #3
 800acc8:	3211      	adds	r2, #17
 800acca:	42a2      	cmp	r2, r4
 800accc:	bf88      	it	hi
 800acce:	2300      	movhi	r3, #0
 800acd0:	4418      	add	r0, r3
 800acd2:	2300      	movs	r3, #0
 800acd4:	4288      	cmp	r0, r1
 800acd6:	d305      	bcc.n	800ace4 <__copybits+0x40>
 800acd8:	bd70      	pop	{r4, r5, r6, pc}
 800acda:	f853 6b04 	ldr.w	r6, [r3], #4
 800acde:	f845 6f04 	str.w	r6, [r5, #4]!
 800ace2:	e7eb      	b.n	800acbc <__copybits+0x18>
 800ace4:	f840 3b04 	str.w	r3, [r0], #4
 800ace8:	e7f4      	b.n	800acd4 <__copybits+0x30>

0800acea <__any_on>:
 800acea:	f100 0214 	add.w	r2, r0, #20
 800acee:	6900      	ldr	r0, [r0, #16]
 800acf0:	114b      	asrs	r3, r1, #5
 800acf2:	4298      	cmp	r0, r3
 800acf4:	b510      	push	{r4, lr}
 800acf6:	db11      	blt.n	800ad1c <__any_on+0x32>
 800acf8:	dd0a      	ble.n	800ad10 <__any_on+0x26>
 800acfa:	f011 011f 	ands.w	r1, r1, #31
 800acfe:	d007      	beq.n	800ad10 <__any_on+0x26>
 800ad00:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ad04:	fa24 f001 	lsr.w	r0, r4, r1
 800ad08:	fa00 f101 	lsl.w	r1, r0, r1
 800ad0c:	428c      	cmp	r4, r1
 800ad0e:	d10b      	bne.n	800ad28 <__any_on+0x3e>
 800ad10:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ad14:	4293      	cmp	r3, r2
 800ad16:	d803      	bhi.n	800ad20 <__any_on+0x36>
 800ad18:	2000      	movs	r0, #0
 800ad1a:	bd10      	pop	{r4, pc}
 800ad1c:	4603      	mov	r3, r0
 800ad1e:	e7f7      	b.n	800ad10 <__any_on+0x26>
 800ad20:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ad24:	2900      	cmp	r1, #0
 800ad26:	d0f5      	beq.n	800ad14 <__any_on+0x2a>
 800ad28:	2001      	movs	r0, #1
 800ad2a:	e7f6      	b.n	800ad1a <__any_on+0x30>

0800ad2c <__ascii_wctomb>:
 800ad2c:	4603      	mov	r3, r0
 800ad2e:	4608      	mov	r0, r1
 800ad30:	b141      	cbz	r1, 800ad44 <__ascii_wctomb+0x18>
 800ad32:	2aff      	cmp	r2, #255	@ 0xff
 800ad34:	d904      	bls.n	800ad40 <__ascii_wctomb+0x14>
 800ad36:	228a      	movs	r2, #138	@ 0x8a
 800ad38:	601a      	str	r2, [r3, #0]
 800ad3a:	f04f 30ff 	mov.w	r0, #4294967295
 800ad3e:	4770      	bx	lr
 800ad40:	700a      	strb	r2, [r1, #0]
 800ad42:	2001      	movs	r0, #1
 800ad44:	4770      	bx	lr

0800ad46 <__ssputs_r>:
 800ad46:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ad4a:	688e      	ldr	r6, [r1, #8]
 800ad4c:	461f      	mov	r7, r3
 800ad4e:	42be      	cmp	r6, r7
 800ad50:	680b      	ldr	r3, [r1, #0]
 800ad52:	4682      	mov	sl, r0
 800ad54:	460c      	mov	r4, r1
 800ad56:	4690      	mov	r8, r2
 800ad58:	d82d      	bhi.n	800adb6 <__ssputs_r+0x70>
 800ad5a:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ad5e:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800ad62:	d026      	beq.n	800adb2 <__ssputs_r+0x6c>
 800ad64:	6965      	ldr	r5, [r4, #20]
 800ad66:	6909      	ldr	r1, [r1, #16]
 800ad68:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ad6c:	eba3 0901 	sub.w	r9, r3, r1
 800ad70:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ad74:	1c7b      	adds	r3, r7, #1
 800ad76:	444b      	add	r3, r9
 800ad78:	106d      	asrs	r5, r5, #1
 800ad7a:	429d      	cmp	r5, r3
 800ad7c:	bf38      	it	cc
 800ad7e:	461d      	movcc	r5, r3
 800ad80:	0553      	lsls	r3, r2, #21
 800ad82:	d527      	bpl.n	800add4 <__ssputs_r+0x8e>
 800ad84:	4629      	mov	r1, r5
 800ad86:	f7ff fa81 	bl	800a28c <_malloc_r>
 800ad8a:	4606      	mov	r6, r0
 800ad8c:	b360      	cbz	r0, 800ade8 <__ssputs_r+0xa2>
 800ad8e:	6921      	ldr	r1, [r4, #16]
 800ad90:	464a      	mov	r2, r9
 800ad92:	f7fe febc 	bl	8009b0e <memcpy>
 800ad96:	89a3      	ldrh	r3, [r4, #12]
 800ad98:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ad9c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ada0:	81a3      	strh	r3, [r4, #12]
 800ada2:	6126      	str	r6, [r4, #16]
 800ada4:	6165      	str	r5, [r4, #20]
 800ada6:	444e      	add	r6, r9
 800ada8:	eba5 0509 	sub.w	r5, r5, r9
 800adac:	6026      	str	r6, [r4, #0]
 800adae:	60a5      	str	r5, [r4, #8]
 800adb0:	463e      	mov	r6, r7
 800adb2:	42be      	cmp	r6, r7
 800adb4:	d900      	bls.n	800adb8 <__ssputs_r+0x72>
 800adb6:	463e      	mov	r6, r7
 800adb8:	6820      	ldr	r0, [r4, #0]
 800adba:	4632      	mov	r2, r6
 800adbc:	4641      	mov	r1, r8
 800adbe:	f000 fb53 	bl	800b468 <memmove>
 800adc2:	68a3      	ldr	r3, [r4, #8]
 800adc4:	1b9b      	subs	r3, r3, r6
 800adc6:	60a3      	str	r3, [r4, #8]
 800adc8:	6823      	ldr	r3, [r4, #0]
 800adca:	4433      	add	r3, r6
 800adcc:	6023      	str	r3, [r4, #0]
 800adce:	2000      	movs	r0, #0
 800add0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800add4:	462a      	mov	r2, r5
 800add6:	f000 fbab 	bl	800b530 <_realloc_r>
 800adda:	4606      	mov	r6, r0
 800addc:	2800      	cmp	r0, #0
 800adde:	d1e0      	bne.n	800ada2 <__ssputs_r+0x5c>
 800ade0:	6921      	ldr	r1, [r4, #16]
 800ade2:	4650      	mov	r0, sl
 800ade4:	f7fe feac 	bl	8009b40 <_free_r>
 800ade8:	230c      	movs	r3, #12
 800adea:	f8ca 3000 	str.w	r3, [sl]
 800adee:	89a3      	ldrh	r3, [r4, #12]
 800adf0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800adf4:	81a3      	strh	r3, [r4, #12]
 800adf6:	f04f 30ff 	mov.w	r0, #4294967295
 800adfa:	e7e9      	b.n	800add0 <__ssputs_r+0x8a>

0800adfc <_svfiprintf_r>:
 800adfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae00:	4698      	mov	r8, r3
 800ae02:	898b      	ldrh	r3, [r1, #12]
 800ae04:	061b      	lsls	r3, r3, #24
 800ae06:	b09d      	sub	sp, #116	@ 0x74
 800ae08:	4607      	mov	r7, r0
 800ae0a:	460d      	mov	r5, r1
 800ae0c:	4614      	mov	r4, r2
 800ae0e:	d510      	bpl.n	800ae32 <_svfiprintf_r+0x36>
 800ae10:	690b      	ldr	r3, [r1, #16]
 800ae12:	b973      	cbnz	r3, 800ae32 <_svfiprintf_r+0x36>
 800ae14:	2140      	movs	r1, #64	@ 0x40
 800ae16:	f7ff fa39 	bl	800a28c <_malloc_r>
 800ae1a:	6028      	str	r0, [r5, #0]
 800ae1c:	6128      	str	r0, [r5, #16]
 800ae1e:	b930      	cbnz	r0, 800ae2e <_svfiprintf_r+0x32>
 800ae20:	230c      	movs	r3, #12
 800ae22:	603b      	str	r3, [r7, #0]
 800ae24:	f04f 30ff 	mov.w	r0, #4294967295
 800ae28:	b01d      	add	sp, #116	@ 0x74
 800ae2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae2e:	2340      	movs	r3, #64	@ 0x40
 800ae30:	616b      	str	r3, [r5, #20]
 800ae32:	2300      	movs	r3, #0
 800ae34:	9309      	str	r3, [sp, #36]	@ 0x24
 800ae36:	2320      	movs	r3, #32
 800ae38:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ae3c:	f8cd 800c 	str.w	r8, [sp, #12]
 800ae40:	2330      	movs	r3, #48	@ 0x30
 800ae42:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800afe0 <_svfiprintf_r+0x1e4>
 800ae46:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ae4a:	f04f 0901 	mov.w	r9, #1
 800ae4e:	4623      	mov	r3, r4
 800ae50:	469a      	mov	sl, r3
 800ae52:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ae56:	b10a      	cbz	r2, 800ae5c <_svfiprintf_r+0x60>
 800ae58:	2a25      	cmp	r2, #37	@ 0x25
 800ae5a:	d1f9      	bne.n	800ae50 <_svfiprintf_r+0x54>
 800ae5c:	ebba 0b04 	subs.w	fp, sl, r4
 800ae60:	d00b      	beq.n	800ae7a <_svfiprintf_r+0x7e>
 800ae62:	465b      	mov	r3, fp
 800ae64:	4622      	mov	r2, r4
 800ae66:	4629      	mov	r1, r5
 800ae68:	4638      	mov	r0, r7
 800ae6a:	f7ff ff6c 	bl	800ad46 <__ssputs_r>
 800ae6e:	3001      	adds	r0, #1
 800ae70:	f000 80a7 	beq.w	800afc2 <_svfiprintf_r+0x1c6>
 800ae74:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ae76:	445a      	add	r2, fp
 800ae78:	9209      	str	r2, [sp, #36]	@ 0x24
 800ae7a:	f89a 3000 	ldrb.w	r3, [sl]
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	f000 809f 	beq.w	800afc2 <_svfiprintf_r+0x1c6>
 800ae84:	2300      	movs	r3, #0
 800ae86:	f04f 32ff 	mov.w	r2, #4294967295
 800ae8a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ae8e:	f10a 0a01 	add.w	sl, sl, #1
 800ae92:	9304      	str	r3, [sp, #16]
 800ae94:	9307      	str	r3, [sp, #28]
 800ae96:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ae9a:	931a      	str	r3, [sp, #104]	@ 0x68
 800ae9c:	4654      	mov	r4, sl
 800ae9e:	2205      	movs	r2, #5
 800aea0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aea4:	484e      	ldr	r0, [pc, #312]	@ (800afe0 <_svfiprintf_r+0x1e4>)
 800aea6:	f7f5 f9ab 	bl	8000200 <memchr>
 800aeaa:	9a04      	ldr	r2, [sp, #16]
 800aeac:	b9d8      	cbnz	r0, 800aee6 <_svfiprintf_r+0xea>
 800aeae:	06d0      	lsls	r0, r2, #27
 800aeb0:	bf44      	itt	mi
 800aeb2:	2320      	movmi	r3, #32
 800aeb4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800aeb8:	0711      	lsls	r1, r2, #28
 800aeba:	bf44      	itt	mi
 800aebc:	232b      	movmi	r3, #43	@ 0x2b
 800aebe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800aec2:	f89a 3000 	ldrb.w	r3, [sl]
 800aec6:	2b2a      	cmp	r3, #42	@ 0x2a
 800aec8:	d015      	beq.n	800aef6 <_svfiprintf_r+0xfa>
 800aeca:	9a07      	ldr	r2, [sp, #28]
 800aecc:	4654      	mov	r4, sl
 800aece:	2000      	movs	r0, #0
 800aed0:	f04f 0c0a 	mov.w	ip, #10
 800aed4:	4621      	mov	r1, r4
 800aed6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aeda:	3b30      	subs	r3, #48	@ 0x30
 800aedc:	2b09      	cmp	r3, #9
 800aede:	d94b      	bls.n	800af78 <_svfiprintf_r+0x17c>
 800aee0:	b1b0      	cbz	r0, 800af10 <_svfiprintf_r+0x114>
 800aee2:	9207      	str	r2, [sp, #28]
 800aee4:	e014      	b.n	800af10 <_svfiprintf_r+0x114>
 800aee6:	eba0 0308 	sub.w	r3, r0, r8
 800aeea:	fa09 f303 	lsl.w	r3, r9, r3
 800aeee:	4313      	orrs	r3, r2
 800aef0:	9304      	str	r3, [sp, #16]
 800aef2:	46a2      	mov	sl, r4
 800aef4:	e7d2      	b.n	800ae9c <_svfiprintf_r+0xa0>
 800aef6:	9b03      	ldr	r3, [sp, #12]
 800aef8:	1d19      	adds	r1, r3, #4
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	9103      	str	r1, [sp, #12]
 800aefe:	2b00      	cmp	r3, #0
 800af00:	bfbb      	ittet	lt
 800af02:	425b      	neglt	r3, r3
 800af04:	f042 0202 	orrlt.w	r2, r2, #2
 800af08:	9307      	strge	r3, [sp, #28]
 800af0a:	9307      	strlt	r3, [sp, #28]
 800af0c:	bfb8      	it	lt
 800af0e:	9204      	strlt	r2, [sp, #16]
 800af10:	7823      	ldrb	r3, [r4, #0]
 800af12:	2b2e      	cmp	r3, #46	@ 0x2e
 800af14:	d10a      	bne.n	800af2c <_svfiprintf_r+0x130>
 800af16:	7863      	ldrb	r3, [r4, #1]
 800af18:	2b2a      	cmp	r3, #42	@ 0x2a
 800af1a:	d132      	bne.n	800af82 <_svfiprintf_r+0x186>
 800af1c:	9b03      	ldr	r3, [sp, #12]
 800af1e:	1d1a      	adds	r2, r3, #4
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	9203      	str	r2, [sp, #12]
 800af24:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800af28:	3402      	adds	r4, #2
 800af2a:	9305      	str	r3, [sp, #20]
 800af2c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800aff0 <_svfiprintf_r+0x1f4>
 800af30:	7821      	ldrb	r1, [r4, #0]
 800af32:	2203      	movs	r2, #3
 800af34:	4650      	mov	r0, sl
 800af36:	f7f5 f963 	bl	8000200 <memchr>
 800af3a:	b138      	cbz	r0, 800af4c <_svfiprintf_r+0x150>
 800af3c:	9b04      	ldr	r3, [sp, #16]
 800af3e:	eba0 000a 	sub.w	r0, r0, sl
 800af42:	2240      	movs	r2, #64	@ 0x40
 800af44:	4082      	lsls	r2, r0
 800af46:	4313      	orrs	r3, r2
 800af48:	3401      	adds	r4, #1
 800af4a:	9304      	str	r3, [sp, #16]
 800af4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af50:	4824      	ldr	r0, [pc, #144]	@ (800afe4 <_svfiprintf_r+0x1e8>)
 800af52:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800af56:	2206      	movs	r2, #6
 800af58:	f7f5 f952 	bl	8000200 <memchr>
 800af5c:	2800      	cmp	r0, #0
 800af5e:	d036      	beq.n	800afce <_svfiprintf_r+0x1d2>
 800af60:	4b21      	ldr	r3, [pc, #132]	@ (800afe8 <_svfiprintf_r+0x1ec>)
 800af62:	bb1b      	cbnz	r3, 800afac <_svfiprintf_r+0x1b0>
 800af64:	9b03      	ldr	r3, [sp, #12]
 800af66:	3307      	adds	r3, #7
 800af68:	f023 0307 	bic.w	r3, r3, #7
 800af6c:	3308      	adds	r3, #8
 800af6e:	9303      	str	r3, [sp, #12]
 800af70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af72:	4433      	add	r3, r6
 800af74:	9309      	str	r3, [sp, #36]	@ 0x24
 800af76:	e76a      	b.n	800ae4e <_svfiprintf_r+0x52>
 800af78:	fb0c 3202 	mla	r2, ip, r2, r3
 800af7c:	460c      	mov	r4, r1
 800af7e:	2001      	movs	r0, #1
 800af80:	e7a8      	b.n	800aed4 <_svfiprintf_r+0xd8>
 800af82:	2300      	movs	r3, #0
 800af84:	3401      	adds	r4, #1
 800af86:	9305      	str	r3, [sp, #20]
 800af88:	4619      	mov	r1, r3
 800af8a:	f04f 0c0a 	mov.w	ip, #10
 800af8e:	4620      	mov	r0, r4
 800af90:	f810 2b01 	ldrb.w	r2, [r0], #1
 800af94:	3a30      	subs	r2, #48	@ 0x30
 800af96:	2a09      	cmp	r2, #9
 800af98:	d903      	bls.n	800afa2 <_svfiprintf_r+0x1a6>
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d0c6      	beq.n	800af2c <_svfiprintf_r+0x130>
 800af9e:	9105      	str	r1, [sp, #20]
 800afa0:	e7c4      	b.n	800af2c <_svfiprintf_r+0x130>
 800afa2:	fb0c 2101 	mla	r1, ip, r1, r2
 800afa6:	4604      	mov	r4, r0
 800afa8:	2301      	movs	r3, #1
 800afaa:	e7f0      	b.n	800af8e <_svfiprintf_r+0x192>
 800afac:	ab03      	add	r3, sp, #12
 800afae:	9300      	str	r3, [sp, #0]
 800afb0:	462a      	mov	r2, r5
 800afb2:	4b0e      	ldr	r3, [pc, #56]	@ (800afec <_svfiprintf_r+0x1f0>)
 800afb4:	a904      	add	r1, sp, #16
 800afb6:	4638      	mov	r0, r7
 800afb8:	f3af 8000 	nop.w
 800afbc:	1c42      	adds	r2, r0, #1
 800afbe:	4606      	mov	r6, r0
 800afc0:	d1d6      	bne.n	800af70 <_svfiprintf_r+0x174>
 800afc2:	89ab      	ldrh	r3, [r5, #12]
 800afc4:	065b      	lsls	r3, r3, #25
 800afc6:	f53f af2d 	bmi.w	800ae24 <_svfiprintf_r+0x28>
 800afca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800afcc:	e72c      	b.n	800ae28 <_svfiprintf_r+0x2c>
 800afce:	ab03      	add	r3, sp, #12
 800afd0:	9300      	str	r3, [sp, #0]
 800afd2:	462a      	mov	r2, r5
 800afd4:	4b05      	ldr	r3, [pc, #20]	@ (800afec <_svfiprintf_r+0x1f0>)
 800afd6:	a904      	add	r1, sp, #16
 800afd8:	4638      	mov	r0, r7
 800afda:	f000 f879 	bl	800b0d0 <_printf_i>
 800afde:	e7ed      	b.n	800afbc <_svfiprintf_r+0x1c0>
 800afe0:	0800c280 	.word	0x0800c280
 800afe4:	0800c28a 	.word	0x0800c28a
 800afe8:	00000000 	.word	0x00000000
 800afec:	0800ad47 	.word	0x0800ad47
 800aff0:	0800c286 	.word	0x0800c286

0800aff4 <_printf_common>:
 800aff4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aff8:	4616      	mov	r6, r2
 800affa:	4698      	mov	r8, r3
 800affc:	688a      	ldr	r2, [r1, #8]
 800affe:	690b      	ldr	r3, [r1, #16]
 800b000:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b004:	4293      	cmp	r3, r2
 800b006:	bfb8      	it	lt
 800b008:	4613      	movlt	r3, r2
 800b00a:	6033      	str	r3, [r6, #0]
 800b00c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b010:	4607      	mov	r7, r0
 800b012:	460c      	mov	r4, r1
 800b014:	b10a      	cbz	r2, 800b01a <_printf_common+0x26>
 800b016:	3301      	adds	r3, #1
 800b018:	6033      	str	r3, [r6, #0]
 800b01a:	6823      	ldr	r3, [r4, #0]
 800b01c:	0699      	lsls	r1, r3, #26
 800b01e:	bf42      	ittt	mi
 800b020:	6833      	ldrmi	r3, [r6, #0]
 800b022:	3302      	addmi	r3, #2
 800b024:	6033      	strmi	r3, [r6, #0]
 800b026:	6825      	ldr	r5, [r4, #0]
 800b028:	f015 0506 	ands.w	r5, r5, #6
 800b02c:	d106      	bne.n	800b03c <_printf_common+0x48>
 800b02e:	f104 0a19 	add.w	sl, r4, #25
 800b032:	68e3      	ldr	r3, [r4, #12]
 800b034:	6832      	ldr	r2, [r6, #0]
 800b036:	1a9b      	subs	r3, r3, r2
 800b038:	42ab      	cmp	r3, r5
 800b03a:	dc26      	bgt.n	800b08a <_printf_common+0x96>
 800b03c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b040:	6822      	ldr	r2, [r4, #0]
 800b042:	3b00      	subs	r3, #0
 800b044:	bf18      	it	ne
 800b046:	2301      	movne	r3, #1
 800b048:	0692      	lsls	r2, r2, #26
 800b04a:	d42b      	bmi.n	800b0a4 <_printf_common+0xb0>
 800b04c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b050:	4641      	mov	r1, r8
 800b052:	4638      	mov	r0, r7
 800b054:	47c8      	blx	r9
 800b056:	3001      	adds	r0, #1
 800b058:	d01e      	beq.n	800b098 <_printf_common+0xa4>
 800b05a:	6823      	ldr	r3, [r4, #0]
 800b05c:	6922      	ldr	r2, [r4, #16]
 800b05e:	f003 0306 	and.w	r3, r3, #6
 800b062:	2b04      	cmp	r3, #4
 800b064:	bf02      	ittt	eq
 800b066:	68e5      	ldreq	r5, [r4, #12]
 800b068:	6833      	ldreq	r3, [r6, #0]
 800b06a:	1aed      	subeq	r5, r5, r3
 800b06c:	68a3      	ldr	r3, [r4, #8]
 800b06e:	bf0c      	ite	eq
 800b070:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b074:	2500      	movne	r5, #0
 800b076:	4293      	cmp	r3, r2
 800b078:	bfc4      	itt	gt
 800b07a:	1a9b      	subgt	r3, r3, r2
 800b07c:	18ed      	addgt	r5, r5, r3
 800b07e:	2600      	movs	r6, #0
 800b080:	341a      	adds	r4, #26
 800b082:	42b5      	cmp	r5, r6
 800b084:	d11a      	bne.n	800b0bc <_printf_common+0xc8>
 800b086:	2000      	movs	r0, #0
 800b088:	e008      	b.n	800b09c <_printf_common+0xa8>
 800b08a:	2301      	movs	r3, #1
 800b08c:	4652      	mov	r2, sl
 800b08e:	4641      	mov	r1, r8
 800b090:	4638      	mov	r0, r7
 800b092:	47c8      	blx	r9
 800b094:	3001      	adds	r0, #1
 800b096:	d103      	bne.n	800b0a0 <_printf_common+0xac>
 800b098:	f04f 30ff 	mov.w	r0, #4294967295
 800b09c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b0a0:	3501      	adds	r5, #1
 800b0a2:	e7c6      	b.n	800b032 <_printf_common+0x3e>
 800b0a4:	18e1      	adds	r1, r4, r3
 800b0a6:	1c5a      	adds	r2, r3, #1
 800b0a8:	2030      	movs	r0, #48	@ 0x30
 800b0aa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b0ae:	4422      	add	r2, r4
 800b0b0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b0b4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b0b8:	3302      	adds	r3, #2
 800b0ba:	e7c7      	b.n	800b04c <_printf_common+0x58>
 800b0bc:	2301      	movs	r3, #1
 800b0be:	4622      	mov	r2, r4
 800b0c0:	4641      	mov	r1, r8
 800b0c2:	4638      	mov	r0, r7
 800b0c4:	47c8      	blx	r9
 800b0c6:	3001      	adds	r0, #1
 800b0c8:	d0e6      	beq.n	800b098 <_printf_common+0xa4>
 800b0ca:	3601      	adds	r6, #1
 800b0cc:	e7d9      	b.n	800b082 <_printf_common+0x8e>
	...

0800b0d0 <_printf_i>:
 800b0d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b0d4:	7e0f      	ldrb	r7, [r1, #24]
 800b0d6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b0d8:	2f78      	cmp	r7, #120	@ 0x78
 800b0da:	4691      	mov	r9, r2
 800b0dc:	4680      	mov	r8, r0
 800b0de:	460c      	mov	r4, r1
 800b0e0:	469a      	mov	sl, r3
 800b0e2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b0e6:	d807      	bhi.n	800b0f8 <_printf_i+0x28>
 800b0e8:	2f62      	cmp	r7, #98	@ 0x62
 800b0ea:	d80a      	bhi.n	800b102 <_printf_i+0x32>
 800b0ec:	2f00      	cmp	r7, #0
 800b0ee:	f000 80d2 	beq.w	800b296 <_printf_i+0x1c6>
 800b0f2:	2f58      	cmp	r7, #88	@ 0x58
 800b0f4:	f000 80b9 	beq.w	800b26a <_printf_i+0x19a>
 800b0f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b0fc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b100:	e03a      	b.n	800b178 <_printf_i+0xa8>
 800b102:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b106:	2b15      	cmp	r3, #21
 800b108:	d8f6      	bhi.n	800b0f8 <_printf_i+0x28>
 800b10a:	a101      	add	r1, pc, #4	@ (adr r1, 800b110 <_printf_i+0x40>)
 800b10c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b110:	0800b169 	.word	0x0800b169
 800b114:	0800b17d 	.word	0x0800b17d
 800b118:	0800b0f9 	.word	0x0800b0f9
 800b11c:	0800b0f9 	.word	0x0800b0f9
 800b120:	0800b0f9 	.word	0x0800b0f9
 800b124:	0800b0f9 	.word	0x0800b0f9
 800b128:	0800b17d 	.word	0x0800b17d
 800b12c:	0800b0f9 	.word	0x0800b0f9
 800b130:	0800b0f9 	.word	0x0800b0f9
 800b134:	0800b0f9 	.word	0x0800b0f9
 800b138:	0800b0f9 	.word	0x0800b0f9
 800b13c:	0800b27d 	.word	0x0800b27d
 800b140:	0800b1a7 	.word	0x0800b1a7
 800b144:	0800b237 	.word	0x0800b237
 800b148:	0800b0f9 	.word	0x0800b0f9
 800b14c:	0800b0f9 	.word	0x0800b0f9
 800b150:	0800b29f 	.word	0x0800b29f
 800b154:	0800b0f9 	.word	0x0800b0f9
 800b158:	0800b1a7 	.word	0x0800b1a7
 800b15c:	0800b0f9 	.word	0x0800b0f9
 800b160:	0800b0f9 	.word	0x0800b0f9
 800b164:	0800b23f 	.word	0x0800b23f
 800b168:	6833      	ldr	r3, [r6, #0]
 800b16a:	1d1a      	adds	r2, r3, #4
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	6032      	str	r2, [r6, #0]
 800b170:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b174:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b178:	2301      	movs	r3, #1
 800b17a:	e09d      	b.n	800b2b8 <_printf_i+0x1e8>
 800b17c:	6833      	ldr	r3, [r6, #0]
 800b17e:	6820      	ldr	r0, [r4, #0]
 800b180:	1d19      	adds	r1, r3, #4
 800b182:	6031      	str	r1, [r6, #0]
 800b184:	0606      	lsls	r6, r0, #24
 800b186:	d501      	bpl.n	800b18c <_printf_i+0xbc>
 800b188:	681d      	ldr	r5, [r3, #0]
 800b18a:	e003      	b.n	800b194 <_printf_i+0xc4>
 800b18c:	0645      	lsls	r5, r0, #25
 800b18e:	d5fb      	bpl.n	800b188 <_printf_i+0xb8>
 800b190:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b194:	2d00      	cmp	r5, #0
 800b196:	da03      	bge.n	800b1a0 <_printf_i+0xd0>
 800b198:	232d      	movs	r3, #45	@ 0x2d
 800b19a:	426d      	negs	r5, r5
 800b19c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b1a0:	4859      	ldr	r0, [pc, #356]	@ (800b308 <_printf_i+0x238>)
 800b1a2:	230a      	movs	r3, #10
 800b1a4:	e011      	b.n	800b1ca <_printf_i+0xfa>
 800b1a6:	6821      	ldr	r1, [r4, #0]
 800b1a8:	6833      	ldr	r3, [r6, #0]
 800b1aa:	0608      	lsls	r0, r1, #24
 800b1ac:	f853 5b04 	ldr.w	r5, [r3], #4
 800b1b0:	d402      	bmi.n	800b1b8 <_printf_i+0xe8>
 800b1b2:	0649      	lsls	r1, r1, #25
 800b1b4:	bf48      	it	mi
 800b1b6:	b2ad      	uxthmi	r5, r5
 800b1b8:	2f6f      	cmp	r7, #111	@ 0x6f
 800b1ba:	4853      	ldr	r0, [pc, #332]	@ (800b308 <_printf_i+0x238>)
 800b1bc:	6033      	str	r3, [r6, #0]
 800b1be:	bf14      	ite	ne
 800b1c0:	230a      	movne	r3, #10
 800b1c2:	2308      	moveq	r3, #8
 800b1c4:	2100      	movs	r1, #0
 800b1c6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b1ca:	6866      	ldr	r6, [r4, #4]
 800b1cc:	60a6      	str	r6, [r4, #8]
 800b1ce:	2e00      	cmp	r6, #0
 800b1d0:	bfa2      	ittt	ge
 800b1d2:	6821      	ldrge	r1, [r4, #0]
 800b1d4:	f021 0104 	bicge.w	r1, r1, #4
 800b1d8:	6021      	strge	r1, [r4, #0]
 800b1da:	b90d      	cbnz	r5, 800b1e0 <_printf_i+0x110>
 800b1dc:	2e00      	cmp	r6, #0
 800b1de:	d04b      	beq.n	800b278 <_printf_i+0x1a8>
 800b1e0:	4616      	mov	r6, r2
 800b1e2:	fbb5 f1f3 	udiv	r1, r5, r3
 800b1e6:	fb03 5711 	mls	r7, r3, r1, r5
 800b1ea:	5dc7      	ldrb	r7, [r0, r7]
 800b1ec:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b1f0:	462f      	mov	r7, r5
 800b1f2:	42bb      	cmp	r3, r7
 800b1f4:	460d      	mov	r5, r1
 800b1f6:	d9f4      	bls.n	800b1e2 <_printf_i+0x112>
 800b1f8:	2b08      	cmp	r3, #8
 800b1fa:	d10b      	bne.n	800b214 <_printf_i+0x144>
 800b1fc:	6823      	ldr	r3, [r4, #0]
 800b1fe:	07df      	lsls	r7, r3, #31
 800b200:	d508      	bpl.n	800b214 <_printf_i+0x144>
 800b202:	6923      	ldr	r3, [r4, #16]
 800b204:	6861      	ldr	r1, [r4, #4]
 800b206:	4299      	cmp	r1, r3
 800b208:	bfde      	ittt	le
 800b20a:	2330      	movle	r3, #48	@ 0x30
 800b20c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b210:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b214:	1b92      	subs	r2, r2, r6
 800b216:	6122      	str	r2, [r4, #16]
 800b218:	f8cd a000 	str.w	sl, [sp]
 800b21c:	464b      	mov	r3, r9
 800b21e:	aa03      	add	r2, sp, #12
 800b220:	4621      	mov	r1, r4
 800b222:	4640      	mov	r0, r8
 800b224:	f7ff fee6 	bl	800aff4 <_printf_common>
 800b228:	3001      	adds	r0, #1
 800b22a:	d14a      	bne.n	800b2c2 <_printf_i+0x1f2>
 800b22c:	f04f 30ff 	mov.w	r0, #4294967295
 800b230:	b004      	add	sp, #16
 800b232:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b236:	6823      	ldr	r3, [r4, #0]
 800b238:	f043 0320 	orr.w	r3, r3, #32
 800b23c:	6023      	str	r3, [r4, #0]
 800b23e:	4833      	ldr	r0, [pc, #204]	@ (800b30c <_printf_i+0x23c>)
 800b240:	2778      	movs	r7, #120	@ 0x78
 800b242:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b246:	6823      	ldr	r3, [r4, #0]
 800b248:	6831      	ldr	r1, [r6, #0]
 800b24a:	061f      	lsls	r7, r3, #24
 800b24c:	f851 5b04 	ldr.w	r5, [r1], #4
 800b250:	d402      	bmi.n	800b258 <_printf_i+0x188>
 800b252:	065f      	lsls	r7, r3, #25
 800b254:	bf48      	it	mi
 800b256:	b2ad      	uxthmi	r5, r5
 800b258:	6031      	str	r1, [r6, #0]
 800b25a:	07d9      	lsls	r1, r3, #31
 800b25c:	bf44      	itt	mi
 800b25e:	f043 0320 	orrmi.w	r3, r3, #32
 800b262:	6023      	strmi	r3, [r4, #0]
 800b264:	b11d      	cbz	r5, 800b26e <_printf_i+0x19e>
 800b266:	2310      	movs	r3, #16
 800b268:	e7ac      	b.n	800b1c4 <_printf_i+0xf4>
 800b26a:	4827      	ldr	r0, [pc, #156]	@ (800b308 <_printf_i+0x238>)
 800b26c:	e7e9      	b.n	800b242 <_printf_i+0x172>
 800b26e:	6823      	ldr	r3, [r4, #0]
 800b270:	f023 0320 	bic.w	r3, r3, #32
 800b274:	6023      	str	r3, [r4, #0]
 800b276:	e7f6      	b.n	800b266 <_printf_i+0x196>
 800b278:	4616      	mov	r6, r2
 800b27a:	e7bd      	b.n	800b1f8 <_printf_i+0x128>
 800b27c:	6833      	ldr	r3, [r6, #0]
 800b27e:	6825      	ldr	r5, [r4, #0]
 800b280:	6961      	ldr	r1, [r4, #20]
 800b282:	1d18      	adds	r0, r3, #4
 800b284:	6030      	str	r0, [r6, #0]
 800b286:	062e      	lsls	r6, r5, #24
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	d501      	bpl.n	800b290 <_printf_i+0x1c0>
 800b28c:	6019      	str	r1, [r3, #0]
 800b28e:	e002      	b.n	800b296 <_printf_i+0x1c6>
 800b290:	0668      	lsls	r0, r5, #25
 800b292:	d5fb      	bpl.n	800b28c <_printf_i+0x1bc>
 800b294:	8019      	strh	r1, [r3, #0]
 800b296:	2300      	movs	r3, #0
 800b298:	6123      	str	r3, [r4, #16]
 800b29a:	4616      	mov	r6, r2
 800b29c:	e7bc      	b.n	800b218 <_printf_i+0x148>
 800b29e:	6833      	ldr	r3, [r6, #0]
 800b2a0:	1d1a      	adds	r2, r3, #4
 800b2a2:	6032      	str	r2, [r6, #0]
 800b2a4:	681e      	ldr	r6, [r3, #0]
 800b2a6:	6862      	ldr	r2, [r4, #4]
 800b2a8:	2100      	movs	r1, #0
 800b2aa:	4630      	mov	r0, r6
 800b2ac:	f7f4 ffa8 	bl	8000200 <memchr>
 800b2b0:	b108      	cbz	r0, 800b2b6 <_printf_i+0x1e6>
 800b2b2:	1b80      	subs	r0, r0, r6
 800b2b4:	6060      	str	r0, [r4, #4]
 800b2b6:	6863      	ldr	r3, [r4, #4]
 800b2b8:	6123      	str	r3, [r4, #16]
 800b2ba:	2300      	movs	r3, #0
 800b2bc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b2c0:	e7aa      	b.n	800b218 <_printf_i+0x148>
 800b2c2:	6923      	ldr	r3, [r4, #16]
 800b2c4:	4632      	mov	r2, r6
 800b2c6:	4649      	mov	r1, r9
 800b2c8:	4640      	mov	r0, r8
 800b2ca:	47d0      	blx	sl
 800b2cc:	3001      	adds	r0, #1
 800b2ce:	d0ad      	beq.n	800b22c <_printf_i+0x15c>
 800b2d0:	6823      	ldr	r3, [r4, #0]
 800b2d2:	079b      	lsls	r3, r3, #30
 800b2d4:	d413      	bmi.n	800b2fe <_printf_i+0x22e>
 800b2d6:	68e0      	ldr	r0, [r4, #12]
 800b2d8:	9b03      	ldr	r3, [sp, #12]
 800b2da:	4298      	cmp	r0, r3
 800b2dc:	bfb8      	it	lt
 800b2de:	4618      	movlt	r0, r3
 800b2e0:	e7a6      	b.n	800b230 <_printf_i+0x160>
 800b2e2:	2301      	movs	r3, #1
 800b2e4:	4632      	mov	r2, r6
 800b2e6:	4649      	mov	r1, r9
 800b2e8:	4640      	mov	r0, r8
 800b2ea:	47d0      	blx	sl
 800b2ec:	3001      	adds	r0, #1
 800b2ee:	d09d      	beq.n	800b22c <_printf_i+0x15c>
 800b2f0:	3501      	adds	r5, #1
 800b2f2:	68e3      	ldr	r3, [r4, #12]
 800b2f4:	9903      	ldr	r1, [sp, #12]
 800b2f6:	1a5b      	subs	r3, r3, r1
 800b2f8:	42ab      	cmp	r3, r5
 800b2fa:	dcf2      	bgt.n	800b2e2 <_printf_i+0x212>
 800b2fc:	e7eb      	b.n	800b2d6 <_printf_i+0x206>
 800b2fe:	2500      	movs	r5, #0
 800b300:	f104 0619 	add.w	r6, r4, #25
 800b304:	e7f5      	b.n	800b2f2 <_printf_i+0x222>
 800b306:	bf00      	nop
 800b308:	0800c291 	.word	0x0800c291
 800b30c:	0800c2a2 	.word	0x0800c2a2

0800b310 <__sflush_r>:
 800b310:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b314:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b318:	0716      	lsls	r6, r2, #28
 800b31a:	4605      	mov	r5, r0
 800b31c:	460c      	mov	r4, r1
 800b31e:	d454      	bmi.n	800b3ca <__sflush_r+0xba>
 800b320:	684b      	ldr	r3, [r1, #4]
 800b322:	2b00      	cmp	r3, #0
 800b324:	dc02      	bgt.n	800b32c <__sflush_r+0x1c>
 800b326:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b328:	2b00      	cmp	r3, #0
 800b32a:	dd48      	ble.n	800b3be <__sflush_r+0xae>
 800b32c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b32e:	2e00      	cmp	r6, #0
 800b330:	d045      	beq.n	800b3be <__sflush_r+0xae>
 800b332:	2300      	movs	r3, #0
 800b334:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b338:	682f      	ldr	r7, [r5, #0]
 800b33a:	6a21      	ldr	r1, [r4, #32]
 800b33c:	602b      	str	r3, [r5, #0]
 800b33e:	d030      	beq.n	800b3a2 <__sflush_r+0x92>
 800b340:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b342:	89a3      	ldrh	r3, [r4, #12]
 800b344:	0759      	lsls	r1, r3, #29
 800b346:	d505      	bpl.n	800b354 <__sflush_r+0x44>
 800b348:	6863      	ldr	r3, [r4, #4]
 800b34a:	1ad2      	subs	r2, r2, r3
 800b34c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b34e:	b10b      	cbz	r3, 800b354 <__sflush_r+0x44>
 800b350:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b352:	1ad2      	subs	r2, r2, r3
 800b354:	2300      	movs	r3, #0
 800b356:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b358:	6a21      	ldr	r1, [r4, #32]
 800b35a:	4628      	mov	r0, r5
 800b35c:	47b0      	blx	r6
 800b35e:	1c43      	adds	r3, r0, #1
 800b360:	89a3      	ldrh	r3, [r4, #12]
 800b362:	d106      	bne.n	800b372 <__sflush_r+0x62>
 800b364:	6829      	ldr	r1, [r5, #0]
 800b366:	291d      	cmp	r1, #29
 800b368:	d82b      	bhi.n	800b3c2 <__sflush_r+0xb2>
 800b36a:	4a2a      	ldr	r2, [pc, #168]	@ (800b414 <__sflush_r+0x104>)
 800b36c:	410a      	asrs	r2, r1
 800b36e:	07d6      	lsls	r6, r2, #31
 800b370:	d427      	bmi.n	800b3c2 <__sflush_r+0xb2>
 800b372:	2200      	movs	r2, #0
 800b374:	6062      	str	r2, [r4, #4]
 800b376:	04d9      	lsls	r1, r3, #19
 800b378:	6922      	ldr	r2, [r4, #16]
 800b37a:	6022      	str	r2, [r4, #0]
 800b37c:	d504      	bpl.n	800b388 <__sflush_r+0x78>
 800b37e:	1c42      	adds	r2, r0, #1
 800b380:	d101      	bne.n	800b386 <__sflush_r+0x76>
 800b382:	682b      	ldr	r3, [r5, #0]
 800b384:	b903      	cbnz	r3, 800b388 <__sflush_r+0x78>
 800b386:	6560      	str	r0, [r4, #84]	@ 0x54
 800b388:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b38a:	602f      	str	r7, [r5, #0]
 800b38c:	b1b9      	cbz	r1, 800b3be <__sflush_r+0xae>
 800b38e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b392:	4299      	cmp	r1, r3
 800b394:	d002      	beq.n	800b39c <__sflush_r+0x8c>
 800b396:	4628      	mov	r0, r5
 800b398:	f7fe fbd2 	bl	8009b40 <_free_r>
 800b39c:	2300      	movs	r3, #0
 800b39e:	6363      	str	r3, [r4, #52]	@ 0x34
 800b3a0:	e00d      	b.n	800b3be <__sflush_r+0xae>
 800b3a2:	2301      	movs	r3, #1
 800b3a4:	4628      	mov	r0, r5
 800b3a6:	47b0      	blx	r6
 800b3a8:	4602      	mov	r2, r0
 800b3aa:	1c50      	adds	r0, r2, #1
 800b3ac:	d1c9      	bne.n	800b342 <__sflush_r+0x32>
 800b3ae:	682b      	ldr	r3, [r5, #0]
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d0c6      	beq.n	800b342 <__sflush_r+0x32>
 800b3b4:	2b1d      	cmp	r3, #29
 800b3b6:	d001      	beq.n	800b3bc <__sflush_r+0xac>
 800b3b8:	2b16      	cmp	r3, #22
 800b3ba:	d11e      	bne.n	800b3fa <__sflush_r+0xea>
 800b3bc:	602f      	str	r7, [r5, #0]
 800b3be:	2000      	movs	r0, #0
 800b3c0:	e022      	b.n	800b408 <__sflush_r+0xf8>
 800b3c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b3c6:	b21b      	sxth	r3, r3
 800b3c8:	e01b      	b.n	800b402 <__sflush_r+0xf2>
 800b3ca:	690f      	ldr	r7, [r1, #16]
 800b3cc:	2f00      	cmp	r7, #0
 800b3ce:	d0f6      	beq.n	800b3be <__sflush_r+0xae>
 800b3d0:	0793      	lsls	r3, r2, #30
 800b3d2:	680e      	ldr	r6, [r1, #0]
 800b3d4:	bf08      	it	eq
 800b3d6:	694b      	ldreq	r3, [r1, #20]
 800b3d8:	600f      	str	r7, [r1, #0]
 800b3da:	bf18      	it	ne
 800b3dc:	2300      	movne	r3, #0
 800b3de:	eba6 0807 	sub.w	r8, r6, r7
 800b3e2:	608b      	str	r3, [r1, #8]
 800b3e4:	f1b8 0f00 	cmp.w	r8, #0
 800b3e8:	dde9      	ble.n	800b3be <__sflush_r+0xae>
 800b3ea:	6a21      	ldr	r1, [r4, #32]
 800b3ec:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b3ee:	4643      	mov	r3, r8
 800b3f0:	463a      	mov	r2, r7
 800b3f2:	4628      	mov	r0, r5
 800b3f4:	47b0      	blx	r6
 800b3f6:	2800      	cmp	r0, #0
 800b3f8:	dc08      	bgt.n	800b40c <__sflush_r+0xfc>
 800b3fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b3fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b402:	81a3      	strh	r3, [r4, #12]
 800b404:	f04f 30ff 	mov.w	r0, #4294967295
 800b408:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b40c:	4407      	add	r7, r0
 800b40e:	eba8 0800 	sub.w	r8, r8, r0
 800b412:	e7e7      	b.n	800b3e4 <__sflush_r+0xd4>
 800b414:	dfbffffe 	.word	0xdfbffffe

0800b418 <_fflush_r>:
 800b418:	b538      	push	{r3, r4, r5, lr}
 800b41a:	690b      	ldr	r3, [r1, #16]
 800b41c:	4605      	mov	r5, r0
 800b41e:	460c      	mov	r4, r1
 800b420:	b913      	cbnz	r3, 800b428 <_fflush_r+0x10>
 800b422:	2500      	movs	r5, #0
 800b424:	4628      	mov	r0, r5
 800b426:	bd38      	pop	{r3, r4, r5, pc}
 800b428:	b118      	cbz	r0, 800b432 <_fflush_r+0x1a>
 800b42a:	6a03      	ldr	r3, [r0, #32]
 800b42c:	b90b      	cbnz	r3, 800b432 <_fflush_r+0x1a>
 800b42e:	f7fe fa1b 	bl	8009868 <__sinit>
 800b432:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b436:	2b00      	cmp	r3, #0
 800b438:	d0f3      	beq.n	800b422 <_fflush_r+0xa>
 800b43a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b43c:	07d0      	lsls	r0, r2, #31
 800b43e:	d404      	bmi.n	800b44a <_fflush_r+0x32>
 800b440:	0599      	lsls	r1, r3, #22
 800b442:	d402      	bmi.n	800b44a <_fflush_r+0x32>
 800b444:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b446:	f7fe fb60 	bl	8009b0a <__retarget_lock_acquire_recursive>
 800b44a:	4628      	mov	r0, r5
 800b44c:	4621      	mov	r1, r4
 800b44e:	f7ff ff5f 	bl	800b310 <__sflush_r>
 800b452:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b454:	07da      	lsls	r2, r3, #31
 800b456:	4605      	mov	r5, r0
 800b458:	d4e4      	bmi.n	800b424 <_fflush_r+0xc>
 800b45a:	89a3      	ldrh	r3, [r4, #12]
 800b45c:	059b      	lsls	r3, r3, #22
 800b45e:	d4e1      	bmi.n	800b424 <_fflush_r+0xc>
 800b460:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b462:	f7fe fb53 	bl	8009b0c <__retarget_lock_release_recursive>
 800b466:	e7dd      	b.n	800b424 <_fflush_r+0xc>

0800b468 <memmove>:
 800b468:	4288      	cmp	r0, r1
 800b46a:	b510      	push	{r4, lr}
 800b46c:	eb01 0402 	add.w	r4, r1, r2
 800b470:	d902      	bls.n	800b478 <memmove+0x10>
 800b472:	4284      	cmp	r4, r0
 800b474:	4623      	mov	r3, r4
 800b476:	d807      	bhi.n	800b488 <memmove+0x20>
 800b478:	1e43      	subs	r3, r0, #1
 800b47a:	42a1      	cmp	r1, r4
 800b47c:	d008      	beq.n	800b490 <memmove+0x28>
 800b47e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b482:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b486:	e7f8      	b.n	800b47a <memmove+0x12>
 800b488:	4402      	add	r2, r0
 800b48a:	4601      	mov	r1, r0
 800b48c:	428a      	cmp	r2, r1
 800b48e:	d100      	bne.n	800b492 <memmove+0x2a>
 800b490:	bd10      	pop	{r4, pc}
 800b492:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b496:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b49a:	e7f7      	b.n	800b48c <memmove+0x24>

0800b49c <_sbrk_r>:
 800b49c:	b538      	push	{r3, r4, r5, lr}
 800b49e:	4d06      	ldr	r5, [pc, #24]	@ (800b4b8 <_sbrk_r+0x1c>)
 800b4a0:	2300      	movs	r3, #0
 800b4a2:	4604      	mov	r4, r0
 800b4a4:	4608      	mov	r0, r1
 800b4a6:	602b      	str	r3, [r5, #0]
 800b4a8:	f7f6 fe6a 	bl	8002180 <_sbrk>
 800b4ac:	1c43      	adds	r3, r0, #1
 800b4ae:	d102      	bne.n	800b4b6 <_sbrk_r+0x1a>
 800b4b0:	682b      	ldr	r3, [r5, #0]
 800b4b2:	b103      	cbz	r3, 800b4b6 <_sbrk_r+0x1a>
 800b4b4:	6023      	str	r3, [r4, #0]
 800b4b6:	bd38      	pop	{r3, r4, r5, pc}
 800b4b8:	20000694 	.word	0x20000694

0800b4bc <__assert_func>:
 800b4bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b4be:	4614      	mov	r4, r2
 800b4c0:	461a      	mov	r2, r3
 800b4c2:	4b09      	ldr	r3, [pc, #36]	@ (800b4e8 <__assert_func+0x2c>)
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	4605      	mov	r5, r0
 800b4c8:	68d8      	ldr	r0, [r3, #12]
 800b4ca:	b954      	cbnz	r4, 800b4e2 <__assert_func+0x26>
 800b4cc:	4b07      	ldr	r3, [pc, #28]	@ (800b4ec <__assert_func+0x30>)
 800b4ce:	461c      	mov	r4, r3
 800b4d0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b4d4:	9100      	str	r1, [sp, #0]
 800b4d6:	462b      	mov	r3, r5
 800b4d8:	4905      	ldr	r1, [pc, #20]	@ (800b4f0 <__assert_func+0x34>)
 800b4da:	f000 f857 	bl	800b58c <fiprintf>
 800b4de:	f000 f867 	bl	800b5b0 <abort>
 800b4e2:	4b04      	ldr	r3, [pc, #16]	@ (800b4f4 <__assert_func+0x38>)
 800b4e4:	e7f4      	b.n	800b4d0 <__assert_func+0x14>
 800b4e6:	bf00      	nop
 800b4e8:	200001a8 	.word	0x200001a8
 800b4ec:	0800c2ee 	.word	0x0800c2ee
 800b4f0:	0800c2c0 	.word	0x0800c2c0
 800b4f4:	0800c2b3 	.word	0x0800c2b3

0800b4f8 <_calloc_r>:
 800b4f8:	b570      	push	{r4, r5, r6, lr}
 800b4fa:	fba1 5402 	umull	r5, r4, r1, r2
 800b4fe:	b93c      	cbnz	r4, 800b510 <_calloc_r+0x18>
 800b500:	4629      	mov	r1, r5
 800b502:	f7fe fec3 	bl	800a28c <_malloc_r>
 800b506:	4606      	mov	r6, r0
 800b508:	b928      	cbnz	r0, 800b516 <_calloc_r+0x1e>
 800b50a:	2600      	movs	r6, #0
 800b50c:	4630      	mov	r0, r6
 800b50e:	bd70      	pop	{r4, r5, r6, pc}
 800b510:	220c      	movs	r2, #12
 800b512:	6002      	str	r2, [r0, #0]
 800b514:	e7f9      	b.n	800b50a <_calloc_r+0x12>
 800b516:	462a      	mov	r2, r5
 800b518:	4621      	mov	r1, r4
 800b51a:	f7fe fa57 	bl	80099cc <memset>
 800b51e:	e7f5      	b.n	800b50c <_calloc_r+0x14>

0800b520 <malloc>:
 800b520:	4b02      	ldr	r3, [pc, #8]	@ (800b52c <malloc+0xc>)
 800b522:	4601      	mov	r1, r0
 800b524:	6818      	ldr	r0, [r3, #0]
 800b526:	f7fe beb1 	b.w	800a28c <_malloc_r>
 800b52a:	bf00      	nop
 800b52c:	200001a8 	.word	0x200001a8

0800b530 <_realloc_r>:
 800b530:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b534:	4680      	mov	r8, r0
 800b536:	4615      	mov	r5, r2
 800b538:	460c      	mov	r4, r1
 800b53a:	b921      	cbnz	r1, 800b546 <_realloc_r+0x16>
 800b53c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b540:	4611      	mov	r1, r2
 800b542:	f7fe bea3 	b.w	800a28c <_malloc_r>
 800b546:	b92a      	cbnz	r2, 800b554 <_realloc_r+0x24>
 800b548:	f7fe fafa 	bl	8009b40 <_free_r>
 800b54c:	2400      	movs	r4, #0
 800b54e:	4620      	mov	r0, r4
 800b550:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b554:	f000 f833 	bl	800b5be <_malloc_usable_size_r>
 800b558:	4285      	cmp	r5, r0
 800b55a:	4606      	mov	r6, r0
 800b55c:	d802      	bhi.n	800b564 <_realloc_r+0x34>
 800b55e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b562:	d8f4      	bhi.n	800b54e <_realloc_r+0x1e>
 800b564:	4629      	mov	r1, r5
 800b566:	4640      	mov	r0, r8
 800b568:	f7fe fe90 	bl	800a28c <_malloc_r>
 800b56c:	4607      	mov	r7, r0
 800b56e:	2800      	cmp	r0, #0
 800b570:	d0ec      	beq.n	800b54c <_realloc_r+0x1c>
 800b572:	42b5      	cmp	r5, r6
 800b574:	462a      	mov	r2, r5
 800b576:	4621      	mov	r1, r4
 800b578:	bf28      	it	cs
 800b57a:	4632      	movcs	r2, r6
 800b57c:	f7fe fac7 	bl	8009b0e <memcpy>
 800b580:	4621      	mov	r1, r4
 800b582:	4640      	mov	r0, r8
 800b584:	f7fe fadc 	bl	8009b40 <_free_r>
 800b588:	463c      	mov	r4, r7
 800b58a:	e7e0      	b.n	800b54e <_realloc_r+0x1e>

0800b58c <fiprintf>:
 800b58c:	b40e      	push	{r1, r2, r3}
 800b58e:	b503      	push	{r0, r1, lr}
 800b590:	4601      	mov	r1, r0
 800b592:	ab03      	add	r3, sp, #12
 800b594:	4805      	ldr	r0, [pc, #20]	@ (800b5ac <fiprintf+0x20>)
 800b596:	f853 2b04 	ldr.w	r2, [r3], #4
 800b59a:	6800      	ldr	r0, [r0, #0]
 800b59c:	9301      	str	r3, [sp, #4]
 800b59e:	f000 f83f 	bl	800b620 <_vfiprintf_r>
 800b5a2:	b002      	add	sp, #8
 800b5a4:	f85d eb04 	ldr.w	lr, [sp], #4
 800b5a8:	b003      	add	sp, #12
 800b5aa:	4770      	bx	lr
 800b5ac:	200001a8 	.word	0x200001a8

0800b5b0 <abort>:
 800b5b0:	b508      	push	{r3, lr}
 800b5b2:	2006      	movs	r0, #6
 800b5b4:	f000 fa08 	bl	800b9c8 <raise>
 800b5b8:	2001      	movs	r0, #1
 800b5ba:	f7f6 fd69 	bl	8002090 <_exit>

0800b5be <_malloc_usable_size_r>:
 800b5be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b5c2:	1f18      	subs	r0, r3, #4
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	bfbc      	itt	lt
 800b5c8:	580b      	ldrlt	r3, [r1, r0]
 800b5ca:	18c0      	addlt	r0, r0, r3
 800b5cc:	4770      	bx	lr

0800b5ce <__sfputc_r>:
 800b5ce:	6893      	ldr	r3, [r2, #8]
 800b5d0:	3b01      	subs	r3, #1
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	b410      	push	{r4}
 800b5d6:	6093      	str	r3, [r2, #8]
 800b5d8:	da08      	bge.n	800b5ec <__sfputc_r+0x1e>
 800b5da:	6994      	ldr	r4, [r2, #24]
 800b5dc:	42a3      	cmp	r3, r4
 800b5de:	db01      	blt.n	800b5e4 <__sfputc_r+0x16>
 800b5e0:	290a      	cmp	r1, #10
 800b5e2:	d103      	bne.n	800b5ec <__sfputc_r+0x1e>
 800b5e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b5e8:	f000 b932 	b.w	800b850 <__swbuf_r>
 800b5ec:	6813      	ldr	r3, [r2, #0]
 800b5ee:	1c58      	adds	r0, r3, #1
 800b5f0:	6010      	str	r0, [r2, #0]
 800b5f2:	7019      	strb	r1, [r3, #0]
 800b5f4:	4608      	mov	r0, r1
 800b5f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b5fa:	4770      	bx	lr

0800b5fc <__sfputs_r>:
 800b5fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5fe:	4606      	mov	r6, r0
 800b600:	460f      	mov	r7, r1
 800b602:	4614      	mov	r4, r2
 800b604:	18d5      	adds	r5, r2, r3
 800b606:	42ac      	cmp	r4, r5
 800b608:	d101      	bne.n	800b60e <__sfputs_r+0x12>
 800b60a:	2000      	movs	r0, #0
 800b60c:	e007      	b.n	800b61e <__sfputs_r+0x22>
 800b60e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b612:	463a      	mov	r2, r7
 800b614:	4630      	mov	r0, r6
 800b616:	f7ff ffda 	bl	800b5ce <__sfputc_r>
 800b61a:	1c43      	adds	r3, r0, #1
 800b61c:	d1f3      	bne.n	800b606 <__sfputs_r+0xa>
 800b61e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b620 <_vfiprintf_r>:
 800b620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b624:	460d      	mov	r5, r1
 800b626:	b09d      	sub	sp, #116	@ 0x74
 800b628:	4614      	mov	r4, r2
 800b62a:	4698      	mov	r8, r3
 800b62c:	4606      	mov	r6, r0
 800b62e:	b118      	cbz	r0, 800b638 <_vfiprintf_r+0x18>
 800b630:	6a03      	ldr	r3, [r0, #32]
 800b632:	b90b      	cbnz	r3, 800b638 <_vfiprintf_r+0x18>
 800b634:	f7fe f918 	bl	8009868 <__sinit>
 800b638:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b63a:	07d9      	lsls	r1, r3, #31
 800b63c:	d405      	bmi.n	800b64a <_vfiprintf_r+0x2a>
 800b63e:	89ab      	ldrh	r3, [r5, #12]
 800b640:	059a      	lsls	r2, r3, #22
 800b642:	d402      	bmi.n	800b64a <_vfiprintf_r+0x2a>
 800b644:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b646:	f7fe fa60 	bl	8009b0a <__retarget_lock_acquire_recursive>
 800b64a:	89ab      	ldrh	r3, [r5, #12]
 800b64c:	071b      	lsls	r3, r3, #28
 800b64e:	d501      	bpl.n	800b654 <_vfiprintf_r+0x34>
 800b650:	692b      	ldr	r3, [r5, #16]
 800b652:	b99b      	cbnz	r3, 800b67c <_vfiprintf_r+0x5c>
 800b654:	4629      	mov	r1, r5
 800b656:	4630      	mov	r0, r6
 800b658:	f000 f938 	bl	800b8cc <__swsetup_r>
 800b65c:	b170      	cbz	r0, 800b67c <_vfiprintf_r+0x5c>
 800b65e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b660:	07dc      	lsls	r4, r3, #31
 800b662:	d504      	bpl.n	800b66e <_vfiprintf_r+0x4e>
 800b664:	f04f 30ff 	mov.w	r0, #4294967295
 800b668:	b01d      	add	sp, #116	@ 0x74
 800b66a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b66e:	89ab      	ldrh	r3, [r5, #12]
 800b670:	0598      	lsls	r0, r3, #22
 800b672:	d4f7      	bmi.n	800b664 <_vfiprintf_r+0x44>
 800b674:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b676:	f7fe fa49 	bl	8009b0c <__retarget_lock_release_recursive>
 800b67a:	e7f3      	b.n	800b664 <_vfiprintf_r+0x44>
 800b67c:	2300      	movs	r3, #0
 800b67e:	9309      	str	r3, [sp, #36]	@ 0x24
 800b680:	2320      	movs	r3, #32
 800b682:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b686:	f8cd 800c 	str.w	r8, [sp, #12]
 800b68a:	2330      	movs	r3, #48	@ 0x30
 800b68c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b83c <_vfiprintf_r+0x21c>
 800b690:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b694:	f04f 0901 	mov.w	r9, #1
 800b698:	4623      	mov	r3, r4
 800b69a:	469a      	mov	sl, r3
 800b69c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b6a0:	b10a      	cbz	r2, 800b6a6 <_vfiprintf_r+0x86>
 800b6a2:	2a25      	cmp	r2, #37	@ 0x25
 800b6a4:	d1f9      	bne.n	800b69a <_vfiprintf_r+0x7a>
 800b6a6:	ebba 0b04 	subs.w	fp, sl, r4
 800b6aa:	d00b      	beq.n	800b6c4 <_vfiprintf_r+0xa4>
 800b6ac:	465b      	mov	r3, fp
 800b6ae:	4622      	mov	r2, r4
 800b6b0:	4629      	mov	r1, r5
 800b6b2:	4630      	mov	r0, r6
 800b6b4:	f7ff ffa2 	bl	800b5fc <__sfputs_r>
 800b6b8:	3001      	adds	r0, #1
 800b6ba:	f000 80a7 	beq.w	800b80c <_vfiprintf_r+0x1ec>
 800b6be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b6c0:	445a      	add	r2, fp
 800b6c2:	9209      	str	r2, [sp, #36]	@ 0x24
 800b6c4:	f89a 3000 	ldrb.w	r3, [sl]
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	f000 809f 	beq.w	800b80c <_vfiprintf_r+0x1ec>
 800b6ce:	2300      	movs	r3, #0
 800b6d0:	f04f 32ff 	mov.w	r2, #4294967295
 800b6d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b6d8:	f10a 0a01 	add.w	sl, sl, #1
 800b6dc:	9304      	str	r3, [sp, #16]
 800b6de:	9307      	str	r3, [sp, #28]
 800b6e0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b6e4:	931a      	str	r3, [sp, #104]	@ 0x68
 800b6e6:	4654      	mov	r4, sl
 800b6e8:	2205      	movs	r2, #5
 800b6ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b6ee:	4853      	ldr	r0, [pc, #332]	@ (800b83c <_vfiprintf_r+0x21c>)
 800b6f0:	f7f4 fd86 	bl	8000200 <memchr>
 800b6f4:	9a04      	ldr	r2, [sp, #16]
 800b6f6:	b9d8      	cbnz	r0, 800b730 <_vfiprintf_r+0x110>
 800b6f8:	06d1      	lsls	r1, r2, #27
 800b6fa:	bf44      	itt	mi
 800b6fc:	2320      	movmi	r3, #32
 800b6fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b702:	0713      	lsls	r3, r2, #28
 800b704:	bf44      	itt	mi
 800b706:	232b      	movmi	r3, #43	@ 0x2b
 800b708:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b70c:	f89a 3000 	ldrb.w	r3, [sl]
 800b710:	2b2a      	cmp	r3, #42	@ 0x2a
 800b712:	d015      	beq.n	800b740 <_vfiprintf_r+0x120>
 800b714:	9a07      	ldr	r2, [sp, #28]
 800b716:	4654      	mov	r4, sl
 800b718:	2000      	movs	r0, #0
 800b71a:	f04f 0c0a 	mov.w	ip, #10
 800b71e:	4621      	mov	r1, r4
 800b720:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b724:	3b30      	subs	r3, #48	@ 0x30
 800b726:	2b09      	cmp	r3, #9
 800b728:	d94b      	bls.n	800b7c2 <_vfiprintf_r+0x1a2>
 800b72a:	b1b0      	cbz	r0, 800b75a <_vfiprintf_r+0x13a>
 800b72c:	9207      	str	r2, [sp, #28]
 800b72e:	e014      	b.n	800b75a <_vfiprintf_r+0x13a>
 800b730:	eba0 0308 	sub.w	r3, r0, r8
 800b734:	fa09 f303 	lsl.w	r3, r9, r3
 800b738:	4313      	orrs	r3, r2
 800b73a:	9304      	str	r3, [sp, #16]
 800b73c:	46a2      	mov	sl, r4
 800b73e:	e7d2      	b.n	800b6e6 <_vfiprintf_r+0xc6>
 800b740:	9b03      	ldr	r3, [sp, #12]
 800b742:	1d19      	adds	r1, r3, #4
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	9103      	str	r1, [sp, #12]
 800b748:	2b00      	cmp	r3, #0
 800b74a:	bfbb      	ittet	lt
 800b74c:	425b      	neglt	r3, r3
 800b74e:	f042 0202 	orrlt.w	r2, r2, #2
 800b752:	9307      	strge	r3, [sp, #28]
 800b754:	9307      	strlt	r3, [sp, #28]
 800b756:	bfb8      	it	lt
 800b758:	9204      	strlt	r2, [sp, #16]
 800b75a:	7823      	ldrb	r3, [r4, #0]
 800b75c:	2b2e      	cmp	r3, #46	@ 0x2e
 800b75e:	d10a      	bne.n	800b776 <_vfiprintf_r+0x156>
 800b760:	7863      	ldrb	r3, [r4, #1]
 800b762:	2b2a      	cmp	r3, #42	@ 0x2a
 800b764:	d132      	bne.n	800b7cc <_vfiprintf_r+0x1ac>
 800b766:	9b03      	ldr	r3, [sp, #12]
 800b768:	1d1a      	adds	r2, r3, #4
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	9203      	str	r2, [sp, #12]
 800b76e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b772:	3402      	adds	r4, #2
 800b774:	9305      	str	r3, [sp, #20]
 800b776:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b84c <_vfiprintf_r+0x22c>
 800b77a:	7821      	ldrb	r1, [r4, #0]
 800b77c:	2203      	movs	r2, #3
 800b77e:	4650      	mov	r0, sl
 800b780:	f7f4 fd3e 	bl	8000200 <memchr>
 800b784:	b138      	cbz	r0, 800b796 <_vfiprintf_r+0x176>
 800b786:	9b04      	ldr	r3, [sp, #16]
 800b788:	eba0 000a 	sub.w	r0, r0, sl
 800b78c:	2240      	movs	r2, #64	@ 0x40
 800b78e:	4082      	lsls	r2, r0
 800b790:	4313      	orrs	r3, r2
 800b792:	3401      	adds	r4, #1
 800b794:	9304      	str	r3, [sp, #16]
 800b796:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b79a:	4829      	ldr	r0, [pc, #164]	@ (800b840 <_vfiprintf_r+0x220>)
 800b79c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b7a0:	2206      	movs	r2, #6
 800b7a2:	f7f4 fd2d 	bl	8000200 <memchr>
 800b7a6:	2800      	cmp	r0, #0
 800b7a8:	d03f      	beq.n	800b82a <_vfiprintf_r+0x20a>
 800b7aa:	4b26      	ldr	r3, [pc, #152]	@ (800b844 <_vfiprintf_r+0x224>)
 800b7ac:	bb1b      	cbnz	r3, 800b7f6 <_vfiprintf_r+0x1d6>
 800b7ae:	9b03      	ldr	r3, [sp, #12]
 800b7b0:	3307      	adds	r3, #7
 800b7b2:	f023 0307 	bic.w	r3, r3, #7
 800b7b6:	3308      	adds	r3, #8
 800b7b8:	9303      	str	r3, [sp, #12]
 800b7ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b7bc:	443b      	add	r3, r7
 800b7be:	9309      	str	r3, [sp, #36]	@ 0x24
 800b7c0:	e76a      	b.n	800b698 <_vfiprintf_r+0x78>
 800b7c2:	fb0c 3202 	mla	r2, ip, r2, r3
 800b7c6:	460c      	mov	r4, r1
 800b7c8:	2001      	movs	r0, #1
 800b7ca:	e7a8      	b.n	800b71e <_vfiprintf_r+0xfe>
 800b7cc:	2300      	movs	r3, #0
 800b7ce:	3401      	adds	r4, #1
 800b7d0:	9305      	str	r3, [sp, #20]
 800b7d2:	4619      	mov	r1, r3
 800b7d4:	f04f 0c0a 	mov.w	ip, #10
 800b7d8:	4620      	mov	r0, r4
 800b7da:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b7de:	3a30      	subs	r2, #48	@ 0x30
 800b7e0:	2a09      	cmp	r2, #9
 800b7e2:	d903      	bls.n	800b7ec <_vfiprintf_r+0x1cc>
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d0c6      	beq.n	800b776 <_vfiprintf_r+0x156>
 800b7e8:	9105      	str	r1, [sp, #20]
 800b7ea:	e7c4      	b.n	800b776 <_vfiprintf_r+0x156>
 800b7ec:	fb0c 2101 	mla	r1, ip, r1, r2
 800b7f0:	4604      	mov	r4, r0
 800b7f2:	2301      	movs	r3, #1
 800b7f4:	e7f0      	b.n	800b7d8 <_vfiprintf_r+0x1b8>
 800b7f6:	ab03      	add	r3, sp, #12
 800b7f8:	9300      	str	r3, [sp, #0]
 800b7fa:	462a      	mov	r2, r5
 800b7fc:	4b12      	ldr	r3, [pc, #72]	@ (800b848 <_vfiprintf_r+0x228>)
 800b7fe:	a904      	add	r1, sp, #16
 800b800:	4630      	mov	r0, r6
 800b802:	f3af 8000 	nop.w
 800b806:	4607      	mov	r7, r0
 800b808:	1c78      	adds	r0, r7, #1
 800b80a:	d1d6      	bne.n	800b7ba <_vfiprintf_r+0x19a>
 800b80c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b80e:	07d9      	lsls	r1, r3, #31
 800b810:	d405      	bmi.n	800b81e <_vfiprintf_r+0x1fe>
 800b812:	89ab      	ldrh	r3, [r5, #12]
 800b814:	059a      	lsls	r2, r3, #22
 800b816:	d402      	bmi.n	800b81e <_vfiprintf_r+0x1fe>
 800b818:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b81a:	f7fe f977 	bl	8009b0c <__retarget_lock_release_recursive>
 800b81e:	89ab      	ldrh	r3, [r5, #12]
 800b820:	065b      	lsls	r3, r3, #25
 800b822:	f53f af1f 	bmi.w	800b664 <_vfiprintf_r+0x44>
 800b826:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b828:	e71e      	b.n	800b668 <_vfiprintf_r+0x48>
 800b82a:	ab03      	add	r3, sp, #12
 800b82c:	9300      	str	r3, [sp, #0]
 800b82e:	462a      	mov	r2, r5
 800b830:	4b05      	ldr	r3, [pc, #20]	@ (800b848 <_vfiprintf_r+0x228>)
 800b832:	a904      	add	r1, sp, #16
 800b834:	4630      	mov	r0, r6
 800b836:	f7ff fc4b 	bl	800b0d0 <_printf_i>
 800b83a:	e7e4      	b.n	800b806 <_vfiprintf_r+0x1e6>
 800b83c:	0800c280 	.word	0x0800c280
 800b840:	0800c28a 	.word	0x0800c28a
 800b844:	00000000 	.word	0x00000000
 800b848:	0800b5fd 	.word	0x0800b5fd
 800b84c:	0800c286 	.word	0x0800c286

0800b850 <__swbuf_r>:
 800b850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b852:	460e      	mov	r6, r1
 800b854:	4614      	mov	r4, r2
 800b856:	4605      	mov	r5, r0
 800b858:	b118      	cbz	r0, 800b862 <__swbuf_r+0x12>
 800b85a:	6a03      	ldr	r3, [r0, #32]
 800b85c:	b90b      	cbnz	r3, 800b862 <__swbuf_r+0x12>
 800b85e:	f7fe f803 	bl	8009868 <__sinit>
 800b862:	69a3      	ldr	r3, [r4, #24]
 800b864:	60a3      	str	r3, [r4, #8]
 800b866:	89a3      	ldrh	r3, [r4, #12]
 800b868:	071a      	lsls	r2, r3, #28
 800b86a:	d501      	bpl.n	800b870 <__swbuf_r+0x20>
 800b86c:	6923      	ldr	r3, [r4, #16]
 800b86e:	b943      	cbnz	r3, 800b882 <__swbuf_r+0x32>
 800b870:	4621      	mov	r1, r4
 800b872:	4628      	mov	r0, r5
 800b874:	f000 f82a 	bl	800b8cc <__swsetup_r>
 800b878:	b118      	cbz	r0, 800b882 <__swbuf_r+0x32>
 800b87a:	f04f 37ff 	mov.w	r7, #4294967295
 800b87e:	4638      	mov	r0, r7
 800b880:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b882:	6823      	ldr	r3, [r4, #0]
 800b884:	6922      	ldr	r2, [r4, #16]
 800b886:	1a98      	subs	r0, r3, r2
 800b888:	6963      	ldr	r3, [r4, #20]
 800b88a:	b2f6      	uxtb	r6, r6
 800b88c:	4283      	cmp	r3, r0
 800b88e:	4637      	mov	r7, r6
 800b890:	dc05      	bgt.n	800b89e <__swbuf_r+0x4e>
 800b892:	4621      	mov	r1, r4
 800b894:	4628      	mov	r0, r5
 800b896:	f7ff fdbf 	bl	800b418 <_fflush_r>
 800b89a:	2800      	cmp	r0, #0
 800b89c:	d1ed      	bne.n	800b87a <__swbuf_r+0x2a>
 800b89e:	68a3      	ldr	r3, [r4, #8]
 800b8a0:	3b01      	subs	r3, #1
 800b8a2:	60a3      	str	r3, [r4, #8]
 800b8a4:	6823      	ldr	r3, [r4, #0]
 800b8a6:	1c5a      	adds	r2, r3, #1
 800b8a8:	6022      	str	r2, [r4, #0]
 800b8aa:	701e      	strb	r6, [r3, #0]
 800b8ac:	6962      	ldr	r2, [r4, #20]
 800b8ae:	1c43      	adds	r3, r0, #1
 800b8b0:	429a      	cmp	r2, r3
 800b8b2:	d004      	beq.n	800b8be <__swbuf_r+0x6e>
 800b8b4:	89a3      	ldrh	r3, [r4, #12]
 800b8b6:	07db      	lsls	r3, r3, #31
 800b8b8:	d5e1      	bpl.n	800b87e <__swbuf_r+0x2e>
 800b8ba:	2e0a      	cmp	r6, #10
 800b8bc:	d1df      	bne.n	800b87e <__swbuf_r+0x2e>
 800b8be:	4621      	mov	r1, r4
 800b8c0:	4628      	mov	r0, r5
 800b8c2:	f7ff fda9 	bl	800b418 <_fflush_r>
 800b8c6:	2800      	cmp	r0, #0
 800b8c8:	d0d9      	beq.n	800b87e <__swbuf_r+0x2e>
 800b8ca:	e7d6      	b.n	800b87a <__swbuf_r+0x2a>

0800b8cc <__swsetup_r>:
 800b8cc:	b538      	push	{r3, r4, r5, lr}
 800b8ce:	4b29      	ldr	r3, [pc, #164]	@ (800b974 <__swsetup_r+0xa8>)
 800b8d0:	4605      	mov	r5, r0
 800b8d2:	6818      	ldr	r0, [r3, #0]
 800b8d4:	460c      	mov	r4, r1
 800b8d6:	b118      	cbz	r0, 800b8e0 <__swsetup_r+0x14>
 800b8d8:	6a03      	ldr	r3, [r0, #32]
 800b8da:	b90b      	cbnz	r3, 800b8e0 <__swsetup_r+0x14>
 800b8dc:	f7fd ffc4 	bl	8009868 <__sinit>
 800b8e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b8e4:	0719      	lsls	r1, r3, #28
 800b8e6:	d422      	bmi.n	800b92e <__swsetup_r+0x62>
 800b8e8:	06da      	lsls	r2, r3, #27
 800b8ea:	d407      	bmi.n	800b8fc <__swsetup_r+0x30>
 800b8ec:	2209      	movs	r2, #9
 800b8ee:	602a      	str	r2, [r5, #0]
 800b8f0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b8f4:	81a3      	strh	r3, [r4, #12]
 800b8f6:	f04f 30ff 	mov.w	r0, #4294967295
 800b8fa:	e033      	b.n	800b964 <__swsetup_r+0x98>
 800b8fc:	0758      	lsls	r0, r3, #29
 800b8fe:	d512      	bpl.n	800b926 <__swsetup_r+0x5a>
 800b900:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b902:	b141      	cbz	r1, 800b916 <__swsetup_r+0x4a>
 800b904:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b908:	4299      	cmp	r1, r3
 800b90a:	d002      	beq.n	800b912 <__swsetup_r+0x46>
 800b90c:	4628      	mov	r0, r5
 800b90e:	f7fe f917 	bl	8009b40 <_free_r>
 800b912:	2300      	movs	r3, #0
 800b914:	6363      	str	r3, [r4, #52]	@ 0x34
 800b916:	89a3      	ldrh	r3, [r4, #12]
 800b918:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b91c:	81a3      	strh	r3, [r4, #12]
 800b91e:	2300      	movs	r3, #0
 800b920:	6063      	str	r3, [r4, #4]
 800b922:	6923      	ldr	r3, [r4, #16]
 800b924:	6023      	str	r3, [r4, #0]
 800b926:	89a3      	ldrh	r3, [r4, #12]
 800b928:	f043 0308 	orr.w	r3, r3, #8
 800b92c:	81a3      	strh	r3, [r4, #12]
 800b92e:	6923      	ldr	r3, [r4, #16]
 800b930:	b94b      	cbnz	r3, 800b946 <__swsetup_r+0x7a>
 800b932:	89a3      	ldrh	r3, [r4, #12]
 800b934:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b938:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b93c:	d003      	beq.n	800b946 <__swsetup_r+0x7a>
 800b93e:	4621      	mov	r1, r4
 800b940:	4628      	mov	r0, r5
 800b942:	f000 f883 	bl	800ba4c <__smakebuf_r>
 800b946:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b94a:	f013 0201 	ands.w	r2, r3, #1
 800b94e:	d00a      	beq.n	800b966 <__swsetup_r+0x9a>
 800b950:	2200      	movs	r2, #0
 800b952:	60a2      	str	r2, [r4, #8]
 800b954:	6962      	ldr	r2, [r4, #20]
 800b956:	4252      	negs	r2, r2
 800b958:	61a2      	str	r2, [r4, #24]
 800b95a:	6922      	ldr	r2, [r4, #16]
 800b95c:	b942      	cbnz	r2, 800b970 <__swsetup_r+0xa4>
 800b95e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b962:	d1c5      	bne.n	800b8f0 <__swsetup_r+0x24>
 800b964:	bd38      	pop	{r3, r4, r5, pc}
 800b966:	0799      	lsls	r1, r3, #30
 800b968:	bf58      	it	pl
 800b96a:	6962      	ldrpl	r2, [r4, #20]
 800b96c:	60a2      	str	r2, [r4, #8]
 800b96e:	e7f4      	b.n	800b95a <__swsetup_r+0x8e>
 800b970:	2000      	movs	r0, #0
 800b972:	e7f7      	b.n	800b964 <__swsetup_r+0x98>
 800b974:	200001a8 	.word	0x200001a8

0800b978 <_raise_r>:
 800b978:	291f      	cmp	r1, #31
 800b97a:	b538      	push	{r3, r4, r5, lr}
 800b97c:	4605      	mov	r5, r0
 800b97e:	460c      	mov	r4, r1
 800b980:	d904      	bls.n	800b98c <_raise_r+0x14>
 800b982:	2316      	movs	r3, #22
 800b984:	6003      	str	r3, [r0, #0]
 800b986:	f04f 30ff 	mov.w	r0, #4294967295
 800b98a:	bd38      	pop	{r3, r4, r5, pc}
 800b98c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b98e:	b112      	cbz	r2, 800b996 <_raise_r+0x1e>
 800b990:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b994:	b94b      	cbnz	r3, 800b9aa <_raise_r+0x32>
 800b996:	4628      	mov	r0, r5
 800b998:	f000 f830 	bl	800b9fc <_getpid_r>
 800b99c:	4622      	mov	r2, r4
 800b99e:	4601      	mov	r1, r0
 800b9a0:	4628      	mov	r0, r5
 800b9a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b9a6:	f000 b817 	b.w	800b9d8 <_kill_r>
 800b9aa:	2b01      	cmp	r3, #1
 800b9ac:	d00a      	beq.n	800b9c4 <_raise_r+0x4c>
 800b9ae:	1c59      	adds	r1, r3, #1
 800b9b0:	d103      	bne.n	800b9ba <_raise_r+0x42>
 800b9b2:	2316      	movs	r3, #22
 800b9b4:	6003      	str	r3, [r0, #0]
 800b9b6:	2001      	movs	r0, #1
 800b9b8:	e7e7      	b.n	800b98a <_raise_r+0x12>
 800b9ba:	2100      	movs	r1, #0
 800b9bc:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b9c0:	4620      	mov	r0, r4
 800b9c2:	4798      	blx	r3
 800b9c4:	2000      	movs	r0, #0
 800b9c6:	e7e0      	b.n	800b98a <_raise_r+0x12>

0800b9c8 <raise>:
 800b9c8:	4b02      	ldr	r3, [pc, #8]	@ (800b9d4 <raise+0xc>)
 800b9ca:	4601      	mov	r1, r0
 800b9cc:	6818      	ldr	r0, [r3, #0]
 800b9ce:	f7ff bfd3 	b.w	800b978 <_raise_r>
 800b9d2:	bf00      	nop
 800b9d4:	200001a8 	.word	0x200001a8

0800b9d8 <_kill_r>:
 800b9d8:	b538      	push	{r3, r4, r5, lr}
 800b9da:	4d07      	ldr	r5, [pc, #28]	@ (800b9f8 <_kill_r+0x20>)
 800b9dc:	2300      	movs	r3, #0
 800b9de:	4604      	mov	r4, r0
 800b9e0:	4608      	mov	r0, r1
 800b9e2:	4611      	mov	r1, r2
 800b9e4:	602b      	str	r3, [r5, #0]
 800b9e6:	f7f6 fb43 	bl	8002070 <_kill>
 800b9ea:	1c43      	adds	r3, r0, #1
 800b9ec:	d102      	bne.n	800b9f4 <_kill_r+0x1c>
 800b9ee:	682b      	ldr	r3, [r5, #0]
 800b9f0:	b103      	cbz	r3, 800b9f4 <_kill_r+0x1c>
 800b9f2:	6023      	str	r3, [r4, #0]
 800b9f4:	bd38      	pop	{r3, r4, r5, pc}
 800b9f6:	bf00      	nop
 800b9f8:	20000694 	.word	0x20000694

0800b9fc <_getpid_r>:
 800b9fc:	f7f6 bb30 	b.w	8002060 <_getpid>

0800ba00 <__swhatbuf_r>:
 800ba00:	b570      	push	{r4, r5, r6, lr}
 800ba02:	460c      	mov	r4, r1
 800ba04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba08:	2900      	cmp	r1, #0
 800ba0a:	b096      	sub	sp, #88	@ 0x58
 800ba0c:	4615      	mov	r5, r2
 800ba0e:	461e      	mov	r6, r3
 800ba10:	da0d      	bge.n	800ba2e <__swhatbuf_r+0x2e>
 800ba12:	89a3      	ldrh	r3, [r4, #12]
 800ba14:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ba18:	f04f 0100 	mov.w	r1, #0
 800ba1c:	bf14      	ite	ne
 800ba1e:	2340      	movne	r3, #64	@ 0x40
 800ba20:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ba24:	2000      	movs	r0, #0
 800ba26:	6031      	str	r1, [r6, #0]
 800ba28:	602b      	str	r3, [r5, #0]
 800ba2a:	b016      	add	sp, #88	@ 0x58
 800ba2c:	bd70      	pop	{r4, r5, r6, pc}
 800ba2e:	466a      	mov	r2, sp
 800ba30:	f000 f848 	bl	800bac4 <_fstat_r>
 800ba34:	2800      	cmp	r0, #0
 800ba36:	dbec      	blt.n	800ba12 <__swhatbuf_r+0x12>
 800ba38:	9901      	ldr	r1, [sp, #4]
 800ba3a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ba3e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ba42:	4259      	negs	r1, r3
 800ba44:	4159      	adcs	r1, r3
 800ba46:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ba4a:	e7eb      	b.n	800ba24 <__swhatbuf_r+0x24>

0800ba4c <__smakebuf_r>:
 800ba4c:	898b      	ldrh	r3, [r1, #12]
 800ba4e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ba50:	079d      	lsls	r5, r3, #30
 800ba52:	4606      	mov	r6, r0
 800ba54:	460c      	mov	r4, r1
 800ba56:	d507      	bpl.n	800ba68 <__smakebuf_r+0x1c>
 800ba58:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ba5c:	6023      	str	r3, [r4, #0]
 800ba5e:	6123      	str	r3, [r4, #16]
 800ba60:	2301      	movs	r3, #1
 800ba62:	6163      	str	r3, [r4, #20]
 800ba64:	b003      	add	sp, #12
 800ba66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ba68:	ab01      	add	r3, sp, #4
 800ba6a:	466a      	mov	r2, sp
 800ba6c:	f7ff ffc8 	bl	800ba00 <__swhatbuf_r>
 800ba70:	9f00      	ldr	r7, [sp, #0]
 800ba72:	4605      	mov	r5, r0
 800ba74:	4639      	mov	r1, r7
 800ba76:	4630      	mov	r0, r6
 800ba78:	f7fe fc08 	bl	800a28c <_malloc_r>
 800ba7c:	b948      	cbnz	r0, 800ba92 <__smakebuf_r+0x46>
 800ba7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ba82:	059a      	lsls	r2, r3, #22
 800ba84:	d4ee      	bmi.n	800ba64 <__smakebuf_r+0x18>
 800ba86:	f023 0303 	bic.w	r3, r3, #3
 800ba8a:	f043 0302 	orr.w	r3, r3, #2
 800ba8e:	81a3      	strh	r3, [r4, #12]
 800ba90:	e7e2      	b.n	800ba58 <__smakebuf_r+0xc>
 800ba92:	89a3      	ldrh	r3, [r4, #12]
 800ba94:	6020      	str	r0, [r4, #0]
 800ba96:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ba9a:	81a3      	strh	r3, [r4, #12]
 800ba9c:	9b01      	ldr	r3, [sp, #4]
 800ba9e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800baa2:	b15b      	cbz	r3, 800babc <__smakebuf_r+0x70>
 800baa4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800baa8:	4630      	mov	r0, r6
 800baaa:	f000 f81d 	bl	800bae8 <_isatty_r>
 800baae:	b128      	cbz	r0, 800babc <__smakebuf_r+0x70>
 800bab0:	89a3      	ldrh	r3, [r4, #12]
 800bab2:	f023 0303 	bic.w	r3, r3, #3
 800bab6:	f043 0301 	orr.w	r3, r3, #1
 800baba:	81a3      	strh	r3, [r4, #12]
 800babc:	89a3      	ldrh	r3, [r4, #12]
 800babe:	431d      	orrs	r5, r3
 800bac0:	81a5      	strh	r5, [r4, #12]
 800bac2:	e7cf      	b.n	800ba64 <__smakebuf_r+0x18>

0800bac4 <_fstat_r>:
 800bac4:	b538      	push	{r3, r4, r5, lr}
 800bac6:	4d07      	ldr	r5, [pc, #28]	@ (800bae4 <_fstat_r+0x20>)
 800bac8:	2300      	movs	r3, #0
 800baca:	4604      	mov	r4, r0
 800bacc:	4608      	mov	r0, r1
 800bace:	4611      	mov	r1, r2
 800bad0:	602b      	str	r3, [r5, #0]
 800bad2:	f7f6 fb2d 	bl	8002130 <_fstat>
 800bad6:	1c43      	adds	r3, r0, #1
 800bad8:	d102      	bne.n	800bae0 <_fstat_r+0x1c>
 800bada:	682b      	ldr	r3, [r5, #0]
 800badc:	b103      	cbz	r3, 800bae0 <_fstat_r+0x1c>
 800bade:	6023      	str	r3, [r4, #0]
 800bae0:	bd38      	pop	{r3, r4, r5, pc}
 800bae2:	bf00      	nop
 800bae4:	20000694 	.word	0x20000694

0800bae8 <_isatty_r>:
 800bae8:	b538      	push	{r3, r4, r5, lr}
 800baea:	4d06      	ldr	r5, [pc, #24]	@ (800bb04 <_isatty_r+0x1c>)
 800baec:	2300      	movs	r3, #0
 800baee:	4604      	mov	r4, r0
 800baf0:	4608      	mov	r0, r1
 800baf2:	602b      	str	r3, [r5, #0]
 800baf4:	f7f6 fb2c 	bl	8002150 <_isatty>
 800baf8:	1c43      	adds	r3, r0, #1
 800bafa:	d102      	bne.n	800bb02 <_isatty_r+0x1a>
 800bafc:	682b      	ldr	r3, [r5, #0]
 800bafe:	b103      	cbz	r3, 800bb02 <_isatty_r+0x1a>
 800bb00:	6023      	str	r3, [r4, #0]
 800bb02:	bd38      	pop	{r3, r4, r5, pc}
 800bb04:	20000694 	.word	0x20000694

0800bb08 <sqrt>:
 800bb08:	b538      	push	{r3, r4, r5, lr}
 800bb0a:	ed2d 8b02 	vpush	{d8}
 800bb0e:	ec55 4b10 	vmov	r4, r5, d0
 800bb12:	f000 f825 	bl	800bb60 <__ieee754_sqrt>
 800bb16:	4622      	mov	r2, r4
 800bb18:	462b      	mov	r3, r5
 800bb1a:	4620      	mov	r0, r4
 800bb1c:	4629      	mov	r1, r5
 800bb1e:	eeb0 8a40 	vmov.f32	s16, s0
 800bb22:	eef0 8a60 	vmov.f32	s17, s1
 800bb26:	f7f5 f811 	bl	8000b4c <__aeabi_dcmpun>
 800bb2a:	b990      	cbnz	r0, 800bb52 <sqrt+0x4a>
 800bb2c:	2200      	movs	r2, #0
 800bb2e:	2300      	movs	r3, #0
 800bb30:	4620      	mov	r0, r4
 800bb32:	4629      	mov	r1, r5
 800bb34:	f7f4 ffe2 	bl	8000afc <__aeabi_dcmplt>
 800bb38:	b158      	cbz	r0, 800bb52 <sqrt+0x4a>
 800bb3a:	f7fd ffbb 	bl	8009ab4 <__errno>
 800bb3e:	2321      	movs	r3, #33	@ 0x21
 800bb40:	6003      	str	r3, [r0, #0]
 800bb42:	2200      	movs	r2, #0
 800bb44:	2300      	movs	r3, #0
 800bb46:	4610      	mov	r0, r2
 800bb48:	4619      	mov	r1, r3
 800bb4a:	f7f4 fe8f 	bl	800086c <__aeabi_ddiv>
 800bb4e:	ec41 0b18 	vmov	d8, r0, r1
 800bb52:	eeb0 0a48 	vmov.f32	s0, s16
 800bb56:	eef0 0a68 	vmov.f32	s1, s17
 800bb5a:	ecbd 8b02 	vpop	{d8}
 800bb5e:	bd38      	pop	{r3, r4, r5, pc}

0800bb60 <__ieee754_sqrt>:
 800bb60:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb64:	4a68      	ldr	r2, [pc, #416]	@ (800bd08 <__ieee754_sqrt+0x1a8>)
 800bb66:	ec55 4b10 	vmov	r4, r5, d0
 800bb6a:	43aa      	bics	r2, r5
 800bb6c:	462b      	mov	r3, r5
 800bb6e:	4621      	mov	r1, r4
 800bb70:	d110      	bne.n	800bb94 <__ieee754_sqrt+0x34>
 800bb72:	4622      	mov	r2, r4
 800bb74:	4620      	mov	r0, r4
 800bb76:	4629      	mov	r1, r5
 800bb78:	f7f4 fd4e 	bl	8000618 <__aeabi_dmul>
 800bb7c:	4602      	mov	r2, r0
 800bb7e:	460b      	mov	r3, r1
 800bb80:	4620      	mov	r0, r4
 800bb82:	4629      	mov	r1, r5
 800bb84:	f7f4 fb92 	bl	80002ac <__adddf3>
 800bb88:	4604      	mov	r4, r0
 800bb8a:	460d      	mov	r5, r1
 800bb8c:	ec45 4b10 	vmov	d0, r4, r5
 800bb90:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb94:	2d00      	cmp	r5, #0
 800bb96:	dc0e      	bgt.n	800bbb6 <__ieee754_sqrt+0x56>
 800bb98:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800bb9c:	4322      	orrs	r2, r4
 800bb9e:	d0f5      	beq.n	800bb8c <__ieee754_sqrt+0x2c>
 800bba0:	b19d      	cbz	r5, 800bbca <__ieee754_sqrt+0x6a>
 800bba2:	4622      	mov	r2, r4
 800bba4:	4620      	mov	r0, r4
 800bba6:	4629      	mov	r1, r5
 800bba8:	f7f4 fb7e 	bl	80002a8 <__aeabi_dsub>
 800bbac:	4602      	mov	r2, r0
 800bbae:	460b      	mov	r3, r1
 800bbb0:	f7f4 fe5c 	bl	800086c <__aeabi_ddiv>
 800bbb4:	e7e8      	b.n	800bb88 <__ieee754_sqrt+0x28>
 800bbb6:	152a      	asrs	r2, r5, #20
 800bbb8:	d115      	bne.n	800bbe6 <__ieee754_sqrt+0x86>
 800bbba:	2000      	movs	r0, #0
 800bbbc:	e009      	b.n	800bbd2 <__ieee754_sqrt+0x72>
 800bbbe:	0acb      	lsrs	r3, r1, #11
 800bbc0:	3a15      	subs	r2, #21
 800bbc2:	0549      	lsls	r1, r1, #21
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d0fa      	beq.n	800bbbe <__ieee754_sqrt+0x5e>
 800bbc8:	e7f7      	b.n	800bbba <__ieee754_sqrt+0x5a>
 800bbca:	462a      	mov	r2, r5
 800bbcc:	e7fa      	b.n	800bbc4 <__ieee754_sqrt+0x64>
 800bbce:	005b      	lsls	r3, r3, #1
 800bbd0:	3001      	adds	r0, #1
 800bbd2:	02dc      	lsls	r4, r3, #11
 800bbd4:	d5fb      	bpl.n	800bbce <__ieee754_sqrt+0x6e>
 800bbd6:	1e44      	subs	r4, r0, #1
 800bbd8:	1b12      	subs	r2, r2, r4
 800bbda:	f1c0 0420 	rsb	r4, r0, #32
 800bbde:	fa21 f404 	lsr.w	r4, r1, r4
 800bbe2:	4323      	orrs	r3, r4
 800bbe4:	4081      	lsls	r1, r0
 800bbe6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bbea:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800bbee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800bbf2:	07d2      	lsls	r2, r2, #31
 800bbf4:	bf5c      	itt	pl
 800bbf6:	005b      	lslpl	r3, r3, #1
 800bbf8:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800bbfc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800bc00:	bf58      	it	pl
 800bc02:	0049      	lslpl	r1, r1, #1
 800bc04:	2600      	movs	r6, #0
 800bc06:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800bc0a:	106d      	asrs	r5, r5, #1
 800bc0c:	0049      	lsls	r1, r1, #1
 800bc0e:	2016      	movs	r0, #22
 800bc10:	4632      	mov	r2, r6
 800bc12:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800bc16:	1917      	adds	r7, r2, r4
 800bc18:	429f      	cmp	r7, r3
 800bc1a:	bfde      	ittt	le
 800bc1c:	193a      	addle	r2, r7, r4
 800bc1e:	1bdb      	suble	r3, r3, r7
 800bc20:	1936      	addle	r6, r6, r4
 800bc22:	0fcf      	lsrs	r7, r1, #31
 800bc24:	3801      	subs	r0, #1
 800bc26:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800bc2a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800bc2e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800bc32:	d1f0      	bne.n	800bc16 <__ieee754_sqrt+0xb6>
 800bc34:	4604      	mov	r4, r0
 800bc36:	2720      	movs	r7, #32
 800bc38:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800bc3c:	429a      	cmp	r2, r3
 800bc3e:	eb00 0e0c 	add.w	lr, r0, ip
 800bc42:	db02      	blt.n	800bc4a <__ieee754_sqrt+0xea>
 800bc44:	d113      	bne.n	800bc6e <__ieee754_sqrt+0x10e>
 800bc46:	458e      	cmp	lr, r1
 800bc48:	d811      	bhi.n	800bc6e <__ieee754_sqrt+0x10e>
 800bc4a:	f1be 0f00 	cmp.w	lr, #0
 800bc4e:	eb0e 000c 	add.w	r0, lr, ip
 800bc52:	da42      	bge.n	800bcda <__ieee754_sqrt+0x17a>
 800bc54:	2800      	cmp	r0, #0
 800bc56:	db40      	blt.n	800bcda <__ieee754_sqrt+0x17a>
 800bc58:	f102 0801 	add.w	r8, r2, #1
 800bc5c:	1a9b      	subs	r3, r3, r2
 800bc5e:	458e      	cmp	lr, r1
 800bc60:	bf88      	it	hi
 800bc62:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800bc66:	eba1 010e 	sub.w	r1, r1, lr
 800bc6a:	4464      	add	r4, ip
 800bc6c:	4642      	mov	r2, r8
 800bc6e:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800bc72:	3f01      	subs	r7, #1
 800bc74:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800bc78:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800bc7c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800bc80:	d1dc      	bne.n	800bc3c <__ieee754_sqrt+0xdc>
 800bc82:	4319      	orrs	r1, r3
 800bc84:	d01b      	beq.n	800bcbe <__ieee754_sqrt+0x15e>
 800bc86:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800bd0c <__ieee754_sqrt+0x1ac>
 800bc8a:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800bd10 <__ieee754_sqrt+0x1b0>
 800bc8e:	e9da 0100 	ldrd	r0, r1, [sl]
 800bc92:	e9db 2300 	ldrd	r2, r3, [fp]
 800bc96:	f7f4 fb07 	bl	80002a8 <__aeabi_dsub>
 800bc9a:	e9da 8900 	ldrd	r8, r9, [sl]
 800bc9e:	4602      	mov	r2, r0
 800bca0:	460b      	mov	r3, r1
 800bca2:	4640      	mov	r0, r8
 800bca4:	4649      	mov	r1, r9
 800bca6:	f7f4 ff33 	bl	8000b10 <__aeabi_dcmple>
 800bcaa:	b140      	cbz	r0, 800bcbe <__ieee754_sqrt+0x15e>
 800bcac:	f1b4 3fff 	cmp.w	r4, #4294967295
 800bcb0:	e9da 0100 	ldrd	r0, r1, [sl]
 800bcb4:	e9db 2300 	ldrd	r2, r3, [fp]
 800bcb8:	d111      	bne.n	800bcde <__ieee754_sqrt+0x17e>
 800bcba:	3601      	adds	r6, #1
 800bcbc:	463c      	mov	r4, r7
 800bcbe:	1072      	asrs	r2, r6, #1
 800bcc0:	0863      	lsrs	r3, r4, #1
 800bcc2:	07f1      	lsls	r1, r6, #31
 800bcc4:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800bcc8:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800bccc:	bf48      	it	mi
 800bcce:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800bcd2:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800bcd6:	4618      	mov	r0, r3
 800bcd8:	e756      	b.n	800bb88 <__ieee754_sqrt+0x28>
 800bcda:	4690      	mov	r8, r2
 800bcdc:	e7be      	b.n	800bc5c <__ieee754_sqrt+0xfc>
 800bcde:	f7f4 fae5 	bl	80002ac <__adddf3>
 800bce2:	e9da 8900 	ldrd	r8, r9, [sl]
 800bce6:	4602      	mov	r2, r0
 800bce8:	460b      	mov	r3, r1
 800bcea:	4640      	mov	r0, r8
 800bcec:	4649      	mov	r1, r9
 800bcee:	f7f4 ff05 	bl	8000afc <__aeabi_dcmplt>
 800bcf2:	b120      	cbz	r0, 800bcfe <__ieee754_sqrt+0x19e>
 800bcf4:	1ca0      	adds	r0, r4, #2
 800bcf6:	bf08      	it	eq
 800bcf8:	3601      	addeq	r6, #1
 800bcfa:	3402      	adds	r4, #2
 800bcfc:	e7df      	b.n	800bcbe <__ieee754_sqrt+0x15e>
 800bcfe:	1c63      	adds	r3, r4, #1
 800bd00:	f023 0401 	bic.w	r4, r3, #1
 800bd04:	e7db      	b.n	800bcbe <__ieee754_sqrt+0x15e>
 800bd06:	bf00      	nop
 800bd08:	7ff00000 	.word	0x7ff00000
 800bd0c:	20000200 	.word	0x20000200
 800bd10:	200001f8 	.word	0x200001f8

0800bd14 <_init>:
 800bd14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd16:	bf00      	nop
 800bd18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd1a:	bc08      	pop	{r3}
 800bd1c:	469e      	mov	lr, r3
 800bd1e:	4770      	bx	lr

0800bd20 <_fini>:
 800bd20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd22:	bf00      	nop
 800bd24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd26:	bc08      	pop	{r3}
 800bd28:	469e      	mov	lr, r3
 800bd2a:	4770      	bx	lr
