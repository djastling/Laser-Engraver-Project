
Laser-Engraver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000044c0  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08004648  08004648  00005648  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004690  08004690  0000600c  2**0
                  CONTENTS
  4 .ARM          00000008  08004690  08004690  00005690  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004698  08004698  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004698  08004698  00005698  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800469c  0800469c  0000569c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080046a0  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000010c  2000000c  080046ac  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000118  080046ac  00006118  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e4d0  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d23  00000000  00000000  0001450c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c88  00000000  00000000  00016230  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009ae  00000000  00000000  00016eb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026a76  00000000  00000000  00017866  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e393  00000000  00000000  0003e2dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f6fef  00000000  00000000  0004c66f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014365e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000034ac  00000000  00000000  001436a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  00146b50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004630 	.word	0x08004630

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08004630 	.word	0x08004630

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b082      	sub	sp, #8
 80004bc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004be:	f000 fadf 	bl	8000a80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c2:	f000 f825 	bl	8000510 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004c6:	f000 f91b 	bl	8000700 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004ca:	f000 f8e9 	bl	80006a0 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80004ce:	f000 f871 	bl	80005b4 <MX_ADC1_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_ADC_Start(&hadc1);
 80004d2:	480d      	ldr	r0, [pc, #52]	@ (8000508 <main+0x50>)
 80004d4:	f000 fea8 	bl	8001228 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80004d8:	f04f 31ff 	mov.w	r1, #4294967295
 80004dc:	480a      	ldr	r0, [pc, #40]	@ (8000508 <main+0x50>)
 80004de:	f000 ff5d 	bl	800139c <HAL_ADC_PollForConversion>
	  int potValue = HAL_ADC_GetValue(&hadc1);
 80004e2:	4809      	ldr	r0, [pc, #36]	@ (8000508 <main+0x50>)
 80004e4:	f001 f832 	bl	800154c <HAL_ADC_GetValue>
 80004e8:	4603      	mov	r3, r0
 80004ea:	607b      	str	r3, [r7, #4]

	  //HAL_GPIO_TogglePin(PUL_GPIO_Port, PUL_Pin);
	  HAL_Delay((4000 + potValue) / 100);
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	f503 637a 	add.w	r3, r3, #4000	@ 0xfa0
 80004f2:	4a06      	ldr	r2, [pc, #24]	@ (800050c <main+0x54>)
 80004f4:	fb82 1203 	smull	r1, r2, r2, r3
 80004f8:	1152      	asrs	r2, r2, #5
 80004fa:	17db      	asrs	r3, r3, #31
 80004fc:	1ad3      	subs	r3, r2, r3
 80004fe:	4618      	mov	r0, r3
 8000500:	f000 fb3a 	bl	8000b78 <HAL_Delay>
  {
 8000504:	bf00      	nop
 8000506:	e7e4      	b.n	80004d2 <main+0x1a>
 8000508:	20000028 	.word	0x20000028
 800050c:	51eb851f 	.word	0x51eb851f

08000510 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b096      	sub	sp, #88	@ 0x58
 8000514:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000516:	f107 0314 	add.w	r3, r7, #20
 800051a:	2244      	movs	r2, #68	@ 0x44
 800051c:	2100      	movs	r1, #0
 800051e:	4618      	mov	r0, r3
 8000520:	f004 f859 	bl	80045d6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000524:	463b      	mov	r3, r7
 8000526:	2200      	movs	r2, #0
 8000528:	601a      	str	r2, [r3, #0]
 800052a:	605a      	str	r2, [r3, #4]
 800052c:	609a      	str	r2, [r3, #8]
 800052e:	60da      	str	r2, [r3, #12]
 8000530:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000532:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000536:	f002 f81b 	bl	8002570 <HAL_PWREx_ControlVoltageScaling>
 800053a:	4603      	mov	r3, r0
 800053c:	2b00      	cmp	r3, #0
 800053e:	d001      	beq.n	8000544 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000540:	f000 f944 	bl	80007cc <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000544:	2302      	movs	r3, #2
 8000546:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000548:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800054c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800054e:	2310      	movs	r3, #16
 8000550:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000552:	2302      	movs	r3, #2
 8000554:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000556:	2302      	movs	r3, #2
 8000558:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800055a:	2301      	movs	r3, #1
 800055c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800055e:	230a      	movs	r3, #10
 8000560:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000562:	2307      	movs	r3, #7
 8000564:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000566:	2302      	movs	r3, #2
 8000568:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800056a:	2302      	movs	r3, #2
 800056c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800056e:	f107 0314 	add.w	r3, r7, #20
 8000572:	4618      	mov	r0, r3
 8000574:	f002 f852 	bl	800261c <HAL_RCC_OscConfig>
 8000578:	4603      	mov	r3, r0
 800057a:	2b00      	cmp	r3, #0
 800057c:	d001      	beq.n	8000582 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800057e:	f000 f925 	bl	80007cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000582:	230f      	movs	r3, #15
 8000584:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000586:	2303      	movs	r3, #3
 8000588:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800058a:	2300      	movs	r3, #0
 800058c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800058e:	2300      	movs	r3, #0
 8000590:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000592:	2300      	movs	r3, #0
 8000594:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000596:	463b      	mov	r3, r7
 8000598:	2104      	movs	r1, #4
 800059a:	4618      	mov	r0, r3
 800059c:	f002 fc1a 	bl	8002dd4 <HAL_RCC_ClockConfig>
 80005a0:	4603      	mov	r3, r0
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d001      	beq.n	80005aa <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80005a6:	f000 f911 	bl	80007cc <Error_Handler>
  }
}
 80005aa:	bf00      	nop
 80005ac:	3758      	adds	r7, #88	@ 0x58
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}
	...

080005b4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b08a      	sub	sp, #40	@ 0x28
 80005b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80005ba:	f107 031c 	add.w	r3, r7, #28
 80005be:	2200      	movs	r2, #0
 80005c0:	601a      	str	r2, [r3, #0]
 80005c2:	605a      	str	r2, [r3, #4]
 80005c4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80005c6:	1d3b      	adds	r3, r7, #4
 80005c8:	2200      	movs	r2, #0
 80005ca:	601a      	str	r2, [r3, #0]
 80005cc:	605a      	str	r2, [r3, #4]
 80005ce:	609a      	str	r2, [r3, #8]
 80005d0:	60da      	str	r2, [r3, #12]
 80005d2:	611a      	str	r2, [r3, #16]
 80005d4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80005d6:	4b2f      	ldr	r3, [pc, #188]	@ (8000694 <MX_ADC1_Init+0xe0>)
 80005d8:	4a2f      	ldr	r2, [pc, #188]	@ (8000698 <MX_ADC1_Init+0xe4>)
 80005da:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80005dc:	4b2d      	ldr	r3, [pc, #180]	@ (8000694 <MX_ADC1_Init+0xe0>)
 80005de:	2200      	movs	r2, #0
 80005e0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005e2:	4b2c      	ldr	r3, [pc, #176]	@ (8000694 <MX_ADC1_Init+0xe0>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005e8:	4b2a      	ldr	r3, [pc, #168]	@ (8000694 <MX_ADC1_Init+0xe0>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80005ee:	4b29      	ldr	r3, [pc, #164]	@ (8000694 <MX_ADC1_Init+0xe0>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005f4:	4b27      	ldr	r3, [pc, #156]	@ (8000694 <MX_ADC1_Init+0xe0>)
 80005f6:	2204      	movs	r2, #4
 80005f8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80005fa:	4b26      	ldr	r3, [pc, #152]	@ (8000694 <MX_ADC1_Init+0xe0>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000600:	4b24      	ldr	r3, [pc, #144]	@ (8000694 <MX_ADC1_Init+0xe0>)
 8000602:	2200      	movs	r2, #0
 8000604:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000606:	4b23      	ldr	r3, [pc, #140]	@ (8000694 <MX_ADC1_Init+0xe0>)
 8000608:	2201      	movs	r2, #1
 800060a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800060c:	4b21      	ldr	r3, [pc, #132]	@ (8000694 <MX_ADC1_Init+0xe0>)
 800060e:	2200      	movs	r2, #0
 8000610:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000614:	4b1f      	ldr	r3, [pc, #124]	@ (8000694 <MX_ADC1_Init+0xe0>)
 8000616:	2200      	movs	r2, #0
 8000618:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800061a:	4b1e      	ldr	r3, [pc, #120]	@ (8000694 <MX_ADC1_Init+0xe0>)
 800061c:	2200      	movs	r2, #0
 800061e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000620:	4b1c      	ldr	r3, [pc, #112]	@ (8000694 <MX_ADC1_Init+0xe0>)
 8000622:	2200      	movs	r2, #0
 8000624:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000628:	4b1a      	ldr	r3, [pc, #104]	@ (8000694 <MX_ADC1_Init+0xe0>)
 800062a:	2200      	movs	r2, #0
 800062c:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800062e:	4b19      	ldr	r3, [pc, #100]	@ (8000694 <MX_ADC1_Init+0xe0>)
 8000630:	2200      	movs	r2, #0
 8000632:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000636:	4817      	ldr	r0, [pc, #92]	@ (8000694 <MX_ADC1_Init+0xe0>)
 8000638:	f000 fca6 	bl	8000f88 <HAL_ADC_Init>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000642:	f000 f8c3 	bl	80007cc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000646:	2300      	movs	r3, #0
 8000648:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800064a:	f107 031c 	add.w	r3, r7, #28
 800064e:	4619      	mov	r1, r3
 8000650:	4810      	ldr	r0, [pc, #64]	@ (8000694 <MX_ADC1_Init+0xe0>)
 8000652:	f001 fc27 	bl	8001ea4 <HAL_ADCEx_MultiModeConfigChannel>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d001      	beq.n	8000660 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800065c:	f000 f8b6 	bl	80007cc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000660:	4b0e      	ldr	r3, [pc, #56]	@ (800069c <MX_ADC1_Init+0xe8>)
 8000662:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000664:	2306      	movs	r3, #6
 8000666:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000668:	2300      	movs	r3, #0
 800066a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800066c:	237f      	movs	r3, #127	@ 0x7f
 800066e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000670:	2304      	movs	r3, #4
 8000672:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000674:	2300      	movs	r3, #0
 8000676:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000678:	1d3b      	adds	r3, r7, #4
 800067a:	4619      	mov	r1, r3
 800067c:	4805      	ldr	r0, [pc, #20]	@ (8000694 <MX_ADC1_Init+0xe0>)
 800067e:	f000 ff73 	bl	8001568 <HAL_ADC_ConfigChannel>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000688:	f000 f8a0 	bl	80007cc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800068c:	bf00      	nop
 800068e:	3728      	adds	r7, #40	@ 0x28
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	20000028 	.word	0x20000028
 8000698:	50040000 	.word	0x50040000
 800069c:	14f00020 	.word	0x14f00020

080006a0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006a4:	4b14      	ldr	r3, [pc, #80]	@ (80006f8 <MX_USART2_UART_Init+0x58>)
 80006a6:	4a15      	ldr	r2, [pc, #84]	@ (80006fc <MX_USART2_UART_Init+0x5c>)
 80006a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006aa:	4b13      	ldr	r3, [pc, #76]	@ (80006f8 <MX_USART2_UART_Init+0x58>)
 80006ac:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80006b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006b2:	4b11      	ldr	r3, [pc, #68]	@ (80006f8 <MX_USART2_UART_Init+0x58>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006b8:	4b0f      	ldr	r3, [pc, #60]	@ (80006f8 <MX_USART2_UART_Init+0x58>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006be:	4b0e      	ldr	r3, [pc, #56]	@ (80006f8 <MX_USART2_UART_Init+0x58>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006c4:	4b0c      	ldr	r3, [pc, #48]	@ (80006f8 <MX_USART2_UART_Init+0x58>)
 80006c6:	220c      	movs	r2, #12
 80006c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006ca:	4b0b      	ldr	r3, [pc, #44]	@ (80006f8 <MX_USART2_UART_Init+0x58>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006d0:	4b09      	ldr	r3, [pc, #36]	@ (80006f8 <MX_USART2_UART_Init+0x58>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006d6:	4b08      	ldr	r3, [pc, #32]	@ (80006f8 <MX_USART2_UART_Init+0x58>)
 80006d8:	2200      	movs	r2, #0
 80006da:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006dc:	4b06      	ldr	r3, [pc, #24]	@ (80006f8 <MX_USART2_UART_Init+0x58>)
 80006de:	2200      	movs	r2, #0
 80006e0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006e2:	4805      	ldr	r0, [pc, #20]	@ (80006f8 <MX_USART2_UART_Init+0x58>)
 80006e4:	f003 fa56 	bl	8003b94 <HAL_UART_Init>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80006ee:	f000 f86d 	bl	80007cc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006f2:	bf00      	nop
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	2000008c 	.word	0x2000008c
 80006fc:	40004400 	.word	0x40004400

08000700 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b08a      	sub	sp, #40	@ 0x28
 8000704:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000706:	f107 0314 	add.w	r3, r7, #20
 800070a:	2200      	movs	r2, #0
 800070c:	601a      	str	r2, [r3, #0]
 800070e:	605a      	str	r2, [r3, #4]
 8000710:	609a      	str	r2, [r3, #8]
 8000712:	60da      	str	r2, [r3, #12]
 8000714:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000716:	4b2b      	ldr	r3, [pc, #172]	@ (80007c4 <MX_GPIO_Init+0xc4>)
 8000718:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800071a:	4a2a      	ldr	r2, [pc, #168]	@ (80007c4 <MX_GPIO_Init+0xc4>)
 800071c:	f043 0304 	orr.w	r3, r3, #4
 8000720:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000722:	4b28      	ldr	r3, [pc, #160]	@ (80007c4 <MX_GPIO_Init+0xc4>)
 8000724:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000726:	f003 0304 	and.w	r3, r3, #4
 800072a:	613b      	str	r3, [r7, #16]
 800072c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800072e:	4b25      	ldr	r3, [pc, #148]	@ (80007c4 <MX_GPIO_Init+0xc4>)
 8000730:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000732:	4a24      	ldr	r2, [pc, #144]	@ (80007c4 <MX_GPIO_Init+0xc4>)
 8000734:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000738:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800073a:	4b22      	ldr	r3, [pc, #136]	@ (80007c4 <MX_GPIO_Init+0xc4>)
 800073c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800073e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000742:	60fb      	str	r3, [r7, #12]
 8000744:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000746:	4b1f      	ldr	r3, [pc, #124]	@ (80007c4 <MX_GPIO_Init+0xc4>)
 8000748:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800074a:	4a1e      	ldr	r2, [pc, #120]	@ (80007c4 <MX_GPIO_Init+0xc4>)
 800074c:	f043 0301 	orr.w	r3, r3, #1
 8000750:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000752:	4b1c      	ldr	r3, [pc, #112]	@ (80007c4 <MX_GPIO_Init+0xc4>)
 8000754:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000756:	f003 0301 	and.w	r3, r3, #1
 800075a:	60bb      	str	r3, [r7, #8]
 800075c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800075e:	4b19      	ldr	r3, [pc, #100]	@ (80007c4 <MX_GPIO_Init+0xc4>)
 8000760:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000762:	4a18      	ldr	r2, [pc, #96]	@ (80007c4 <MX_GPIO_Init+0xc4>)
 8000764:	f043 0302 	orr.w	r3, r3, #2
 8000768:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800076a:	4b16      	ldr	r3, [pc, #88]	@ (80007c4 <MX_GPIO_Init+0xc4>)
 800076c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800076e:	f003 0302 	and.w	r3, r3, #2
 8000772:	607b      	str	r3, [r7, #4]
 8000774:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DIR_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000776:	2200      	movs	r2, #0
 8000778:	2122      	movs	r1, #34	@ 0x22
 800077a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800077e:	f001 fed1 	bl	8002524 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000782:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000786:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000788:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800078c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078e:	2300      	movs	r3, #0
 8000790:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000792:	f107 0314 	add.w	r3, r7, #20
 8000796:	4619      	mov	r1, r3
 8000798:	480b      	ldr	r0, [pc, #44]	@ (80007c8 <MX_GPIO_Init+0xc8>)
 800079a:	f001 fd19 	bl	80021d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIR_Pin LD2_Pin */
  GPIO_InitStruct.Pin = DIR_Pin|LD2_Pin;
 800079e:	2322      	movs	r3, #34	@ 0x22
 80007a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007a2:	2301      	movs	r3, #1
 80007a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a6:	2300      	movs	r3, #0
 80007a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007aa:	2300      	movs	r3, #0
 80007ac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ae:	f107 0314 	add.w	r3, r7, #20
 80007b2:	4619      	mov	r1, r3
 80007b4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007b8:	f001 fd0a 	bl	80021d0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007bc:	bf00      	nop
 80007be:	3728      	adds	r7, #40	@ 0x28
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	40021000 	.word	0x40021000
 80007c8:	48000800 	.word	0x48000800

080007cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007d0:	b672      	cpsid	i
}
 80007d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007d4:	bf00      	nop
 80007d6:	e7fd      	b.n	80007d4 <Error_Handler+0x8>

080007d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	b083      	sub	sp, #12
 80007dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007de:	4b0f      	ldr	r3, [pc, #60]	@ (800081c <HAL_MspInit+0x44>)
 80007e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80007e2:	4a0e      	ldr	r2, [pc, #56]	@ (800081c <HAL_MspInit+0x44>)
 80007e4:	f043 0301 	orr.w	r3, r3, #1
 80007e8:	6613      	str	r3, [r2, #96]	@ 0x60
 80007ea:	4b0c      	ldr	r3, [pc, #48]	@ (800081c <HAL_MspInit+0x44>)
 80007ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80007ee:	f003 0301 	and.w	r3, r3, #1
 80007f2:	607b      	str	r3, [r7, #4]
 80007f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007f6:	4b09      	ldr	r3, [pc, #36]	@ (800081c <HAL_MspInit+0x44>)
 80007f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007fa:	4a08      	ldr	r2, [pc, #32]	@ (800081c <HAL_MspInit+0x44>)
 80007fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000800:	6593      	str	r3, [r2, #88]	@ 0x58
 8000802:	4b06      	ldr	r3, [pc, #24]	@ (800081c <HAL_MspInit+0x44>)
 8000804:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000806:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800080a:	603b      	str	r3, [r7, #0]
 800080c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800080e:	bf00      	nop
 8000810:	370c      	adds	r7, #12
 8000812:	46bd      	mov	sp, r7
 8000814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000818:	4770      	bx	lr
 800081a:	bf00      	nop
 800081c:	40021000 	.word	0x40021000

08000820 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b0ac      	sub	sp, #176	@ 0xb0
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000828:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800082c:	2200      	movs	r2, #0
 800082e:	601a      	str	r2, [r3, #0]
 8000830:	605a      	str	r2, [r3, #4]
 8000832:	609a      	str	r2, [r3, #8]
 8000834:	60da      	str	r2, [r3, #12]
 8000836:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000838:	f107 0314 	add.w	r3, r7, #20
 800083c:	2288      	movs	r2, #136	@ 0x88
 800083e:	2100      	movs	r1, #0
 8000840:	4618      	mov	r0, r3
 8000842:	f003 fec8 	bl	80045d6 <memset>
  if(hadc->Instance==ADC1)
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	4a27      	ldr	r2, [pc, #156]	@ (80008e8 <HAL_ADC_MspInit+0xc8>)
 800084c:	4293      	cmp	r3, r2
 800084e:	d147      	bne.n	80008e0 <HAL_ADC_MspInit+0xc0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000850:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000854:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000856:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800085a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 800085e:	2302      	movs	r3, #2
 8000860:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000862:	2301      	movs	r3, #1
 8000864:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000866:	2308      	movs	r3, #8
 8000868:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800086a:	2307      	movs	r3, #7
 800086c:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800086e:	2302      	movs	r3, #2
 8000870:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000872:	2302      	movs	r3, #2
 8000874:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000876:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800087a:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800087c:	f107 0314 	add.w	r3, r7, #20
 8000880:	4618      	mov	r0, r3
 8000882:	f002 fccb 	bl	800321c <HAL_RCCEx_PeriphCLKConfig>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 800088c:	f7ff ff9e 	bl	80007cc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000890:	4b16      	ldr	r3, [pc, #88]	@ (80008ec <HAL_ADC_MspInit+0xcc>)
 8000892:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000894:	4a15      	ldr	r2, [pc, #84]	@ (80008ec <HAL_ADC_MspInit+0xcc>)
 8000896:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800089a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800089c:	4b13      	ldr	r3, [pc, #76]	@ (80008ec <HAL_ADC_MspInit+0xcc>)
 800089e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008a0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80008a4:	613b      	str	r3, [r7, #16]
 80008a6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008a8:	4b10      	ldr	r3, [pc, #64]	@ (80008ec <HAL_ADC_MspInit+0xcc>)
 80008aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008ac:	4a0f      	ldr	r2, [pc, #60]	@ (80008ec <HAL_ADC_MspInit+0xcc>)
 80008ae:	f043 0301 	orr.w	r3, r3, #1
 80008b2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008b4:	4b0d      	ldr	r3, [pc, #52]	@ (80008ec <HAL_ADC_MspInit+0xcc>)
 80008b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008b8:	f003 0301 	and.w	r3, r3, #1
 80008bc:	60fb      	str	r3, [r7, #12]
 80008be:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80008c0:	2301      	movs	r3, #1
 80008c2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80008c6:	230b      	movs	r3, #11
 80008c8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008cc:	2300      	movs	r3, #0
 80008ce:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008d2:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80008d6:	4619      	mov	r1, r3
 80008d8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008dc:	f001 fc78 	bl	80021d0 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80008e0:	bf00      	nop
 80008e2:	37b0      	adds	r7, #176	@ 0xb0
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	50040000 	.word	0x50040000
 80008ec:	40021000 	.word	0x40021000

080008f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b0ac      	sub	sp, #176	@ 0xb0
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80008fc:	2200      	movs	r2, #0
 80008fe:	601a      	str	r2, [r3, #0]
 8000900:	605a      	str	r2, [r3, #4]
 8000902:	609a      	str	r2, [r3, #8]
 8000904:	60da      	str	r2, [r3, #12]
 8000906:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000908:	f107 0314 	add.w	r3, r7, #20
 800090c:	2288      	movs	r2, #136	@ 0x88
 800090e:	2100      	movs	r1, #0
 8000910:	4618      	mov	r0, r3
 8000912:	f003 fe60 	bl	80045d6 <memset>
  if(huart->Instance==USART2)
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	4a21      	ldr	r2, [pc, #132]	@ (80009a0 <HAL_UART_MspInit+0xb0>)
 800091c:	4293      	cmp	r3, r2
 800091e:	d13b      	bne.n	8000998 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000920:	2302      	movs	r3, #2
 8000922:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000924:	2300      	movs	r3, #0
 8000926:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000928:	f107 0314 	add.w	r3, r7, #20
 800092c:	4618      	mov	r0, r3
 800092e:	f002 fc75 	bl	800321c <HAL_RCCEx_PeriphCLKConfig>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000938:	f7ff ff48 	bl	80007cc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800093c:	4b19      	ldr	r3, [pc, #100]	@ (80009a4 <HAL_UART_MspInit+0xb4>)
 800093e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000940:	4a18      	ldr	r2, [pc, #96]	@ (80009a4 <HAL_UART_MspInit+0xb4>)
 8000942:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000946:	6593      	str	r3, [r2, #88]	@ 0x58
 8000948:	4b16      	ldr	r3, [pc, #88]	@ (80009a4 <HAL_UART_MspInit+0xb4>)
 800094a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800094c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000950:	613b      	str	r3, [r7, #16]
 8000952:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000954:	4b13      	ldr	r3, [pc, #76]	@ (80009a4 <HAL_UART_MspInit+0xb4>)
 8000956:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000958:	4a12      	ldr	r2, [pc, #72]	@ (80009a4 <HAL_UART_MspInit+0xb4>)
 800095a:	f043 0301 	orr.w	r3, r3, #1
 800095e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000960:	4b10      	ldr	r3, [pc, #64]	@ (80009a4 <HAL_UART_MspInit+0xb4>)
 8000962:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000964:	f003 0301 	and.w	r3, r3, #1
 8000968:	60fb      	str	r3, [r7, #12]
 800096a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800096c:	230c      	movs	r3, #12
 800096e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000972:	2302      	movs	r3, #2
 8000974:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000978:	2300      	movs	r3, #0
 800097a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800097e:	2303      	movs	r3, #3
 8000980:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000984:	2307      	movs	r3, #7
 8000986:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800098a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800098e:	4619      	mov	r1, r3
 8000990:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000994:	f001 fc1c 	bl	80021d0 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000998:	bf00      	nop
 800099a:	37b0      	adds	r7, #176	@ 0xb0
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	40004400 	.word	0x40004400
 80009a4:	40021000 	.word	0x40021000

080009a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009ac:	bf00      	nop
 80009ae:	e7fd      	b.n	80009ac <NMI_Handler+0x4>

080009b0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009b4:	bf00      	nop
 80009b6:	e7fd      	b.n	80009b4 <HardFault_Handler+0x4>

080009b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009bc:	bf00      	nop
 80009be:	e7fd      	b.n	80009bc <MemManage_Handler+0x4>

080009c0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009c4:	bf00      	nop
 80009c6:	e7fd      	b.n	80009c4 <BusFault_Handler+0x4>

080009c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009cc:	bf00      	nop
 80009ce:	e7fd      	b.n	80009cc <UsageFault_Handler+0x4>

080009d0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009d4:	bf00      	nop
 80009d6:	46bd      	mov	sp, r7
 80009d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009dc:	4770      	bx	lr

080009de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009de:	b480      	push	{r7}
 80009e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009e2:	bf00      	nop
 80009e4:	46bd      	mov	sp, r7
 80009e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ea:	4770      	bx	lr

080009ec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009f0:	bf00      	nop
 80009f2:	46bd      	mov	sp, r7
 80009f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f8:	4770      	bx	lr

080009fa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009fa:	b580      	push	{r7, lr}
 80009fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009fe:	f000 f89b 	bl	8000b38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a02:	bf00      	nop
 8000a04:	bd80      	pop	{r7, pc}
	...

08000a08 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000a0c:	4b06      	ldr	r3, [pc, #24]	@ (8000a28 <SystemInit+0x20>)
 8000a0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a12:	4a05      	ldr	r2, [pc, #20]	@ (8000a28 <SystemInit+0x20>)
 8000a14:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a18:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000a1c:	bf00      	nop
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop
 8000a28:	e000ed00 	.word	0xe000ed00

08000a2c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000a2c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000a64 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a30:	f7ff ffea 	bl	8000a08 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a34:	480c      	ldr	r0, [pc, #48]	@ (8000a68 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a36:	490d      	ldr	r1, [pc, #52]	@ (8000a6c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a38:	4a0d      	ldr	r2, [pc, #52]	@ (8000a70 <LoopForever+0xe>)
  movs r3, #0
 8000a3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a3c:	e002      	b.n	8000a44 <LoopCopyDataInit>

08000a3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a42:	3304      	adds	r3, #4

08000a44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a48:	d3f9      	bcc.n	8000a3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a4a:	4a0a      	ldr	r2, [pc, #40]	@ (8000a74 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a4c:	4c0a      	ldr	r4, [pc, #40]	@ (8000a78 <LoopForever+0x16>)
  movs r3, #0
 8000a4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a50:	e001      	b.n	8000a56 <LoopFillZerobss>

08000a52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a54:	3204      	adds	r2, #4

08000a56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a58:	d3fb      	bcc.n	8000a52 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a5a:	f003 fdc5 	bl	80045e8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a5e:	f7ff fd2b 	bl	80004b8 <main>

08000a62 <LoopForever>:

LoopForever:
    b LoopForever
 8000a62:	e7fe      	b.n	8000a62 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000a64:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000a68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a6c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a70:	080046a0 	.word	0x080046a0
  ldr r2, =_sbss
 8000a74:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a78:	20000118 	.word	0x20000118

08000a7c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a7c:	e7fe      	b.n	8000a7c <ADC1_2_IRQHandler>
	...

08000a80 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a86:	2300      	movs	r3, #0
 8000a88:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a8a:	4b0c      	ldr	r3, [pc, #48]	@ (8000abc <HAL_Init+0x3c>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	4a0b      	ldr	r2, [pc, #44]	@ (8000abc <HAL_Init+0x3c>)
 8000a90:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000a94:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a96:	2003      	movs	r0, #3
 8000a98:	f001 fb66 	bl	8002168 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a9c:	2000      	movs	r0, #0
 8000a9e:	f000 f80f 	bl	8000ac0 <HAL_InitTick>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d002      	beq.n	8000aae <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000aa8:	2301      	movs	r3, #1
 8000aaa:	71fb      	strb	r3, [r7, #7]
 8000aac:	e001      	b.n	8000ab2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000aae:	f7ff fe93 	bl	80007d8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ab2:	79fb      	ldrb	r3, [r7, #7]
}
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	3708      	adds	r7, #8
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	40022000 	.word	0x40022000

08000ac0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b084      	sub	sp, #16
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000acc:	4b17      	ldr	r3, [pc, #92]	@ (8000b2c <HAL_InitTick+0x6c>)
 8000ace:	781b      	ldrb	r3, [r3, #0]
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d023      	beq.n	8000b1c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000ad4:	4b16      	ldr	r3, [pc, #88]	@ (8000b30 <HAL_InitTick+0x70>)
 8000ad6:	681a      	ldr	r2, [r3, #0]
 8000ad8:	4b14      	ldr	r3, [pc, #80]	@ (8000b2c <HAL_InitTick+0x6c>)
 8000ada:	781b      	ldrb	r3, [r3, #0]
 8000adc:	4619      	mov	r1, r3
 8000ade:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ae2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ae6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000aea:	4618      	mov	r0, r3
 8000aec:	f001 fb63 	bl	80021b6 <HAL_SYSTICK_Config>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d10f      	bne.n	8000b16 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	2b0f      	cmp	r3, #15
 8000afa:	d809      	bhi.n	8000b10 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000afc:	2200      	movs	r2, #0
 8000afe:	6879      	ldr	r1, [r7, #4]
 8000b00:	f04f 30ff 	mov.w	r0, #4294967295
 8000b04:	f001 fb3b 	bl	800217e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b08:	4a0a      	ldr	r2, [pc, #40]	@ (8000b34 <HAL_InitTick+0x74>)
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	6013      	str	r3, [r2, #0]
 8000b0e:	e007      	b.n	8000b20 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000b10:	2301      	movs	r3, #1
 8000b12:	73fb      	strb	r3, [r7, #15]
 8000b14:	e004      	b.n	8000b20 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b16:	2301      	movs	r3, #1
 8000b18:	73fb      	strb	r3, [r7, #15]
 8000b1a:	e001      	b.n	8000b20 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000b20:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b22:	4618      	mov	r0, r3
 8000b24:	3710      	adds	r7, #16
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	20000008 	.word	0x20000008
 8000b30:	20000000 	.word	0x20000000
 8000b34:	20000004 	.word	0x20000004

08000b38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b3c:	4b06      	ldr	r3, [pc, #24]	@ (8000b58 <HAL_IncTick+0x20>)
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	461a      	mov	r2, r3
 8000b42:	4b06      	ldr	r3, [pc, #24]	@ (8000b5c <HAL_IncTick+0x24>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	4413      	add	r3, r2
 8000b48:	4a04      	ldr	r2, [pc, #16]	@ (8000b5c <HAL_IncTick+0x24>)
 8000b4a:	6013      	str	r3, [r2, #0]
}
 8000b4c:	bf00      	nop
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop
 8000b58:	20000008 	.word	0x20000008
 8000b5c:	20000114 	.word	0x20000114

08000b60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  return uwTick;
 8000b64:	4b03      	ldr	r3, [pc, #12]	@ (8000b74 <HAL_GetTick+0x14>)
 8000b66:	681b      	ldr	r3, [r3, #0]
}
 8000b68:	4618      	mov	r0, r3
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop
 8000b74:	20000114 	.word	0x20000114

08000b78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b084      	sub	sp, #16
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b80:	f7ff ffee 	bl	8000b60 <HAL_GetTick>
 8000b84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b90:	d005      	beq.n	8000b9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000b92:	4b0a      	ldr	r3, [pc, #40]	@ (8000bbc <HAL_Delay+0x44>)
 8000b94:	781b      	ldrb	r3, [r3, #0]
 8000b96:	461a      	mov	r2, r3
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	4413      	add	r3, r2
 8000b9c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b9e:	bf00      	nop
 8000ba0:	f7ff ffde 	bl	8000b60 <HAL_GetTick>
 8000ba4:	4602      	mov	r2, r0
 8000ba6:	68bb      	ldr	r3, [r7, #8]
 8000ba8:	1ad3      	subs	r3, r2, r3
 8000baa:	68fa      	ldr	r2, [r7, #12]
 8000bac:	429a      	cmp	r2, r3
 8000bae:	d8f7      	bhi.n	8000ba0 <HAL_Delay+0x28>
  {
  }
}
 8000bb0:	bf00      	nop
 8000bb2:	bf00      	nop
 8000bb4:	3710      	adds	r7, #16
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	20000008 	.word	0x20000008

08000bc0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b083      	sub	sp, #12
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
 8000bc8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	689b      	ldr	r3, [r3, #8]
 8000bce:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	431a      	orrs	r2, r3
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	609a      	str	r2, [r3, #8]
}
 8000bda:	bf00      	nop
 8000bdc:	370c      	adds	r7, #12
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr

08000be6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000be6:	b480      	push	{r7}
 8000be8:	b083      	sub	sp, #12
 8000bea:	af00      	add	r7, sp, #0
 8000bec:	6078      	str	r0, [r7, #4]
 8000bee:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	689b      	ldr	r3, [r3, #8]
 8000bf4:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8000bf8:	683b      	ldr	r3, [r7, #0]
 8000bfa:	431a      	orrs	r2, r3
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	609a      	str	r2, [r3, #8]
}
 8000c00:	bf00      	nop
 8000c02:	370c      	adds	r7, #12
 8000c04:	46bd      	mov	sp, r7
 8000c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0a:	4770      	bx	lr

08000c0c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b083      	sub	sp, #12
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	689b      	ldr	r3, [r3, #8]
 8000c18:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	370c      	adds	r7, #12
 8000c20:	46bd      	mov	sp, r7
 8000c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c26:	4770      	bx	lr

08000c28 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b087      	sub	sp, #28
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	60f8      	str	r0, [r7, #12]
 8000c30:	60b9      	str	r1, [r7, #8]
 8000c32:	607a      	str	r2, [r7, #4]
 8000c34:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	3360      	adds	r3, #96	@ 0x60
 8000c3a:	461a      	mov	r2, r3
 8000c3c:	68bb      	ldr	r3, [r7, #8]
 8000c3e:	009b      	lsls	r3, r3, #2
 8000c40:	4413      	add	r3, r2
 8000c42:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000c44:	697b      	ldr	r3, [r7, #20]
 8000c46:	681a      	ldr	r2, [r3, #0]
 8000c48:	4b08      	ldr	r3, [pc, #32]	@ (8000c6c <LL_ADC_SetOffset+0x44>)
 8000c4a:	4013      	ands	r3, r2
 8000c4c:	687a      	ldr	r2, [r7, #4]
 8000c4e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8000c52:	683a      	ldr	r2, [r7, #0]
 8000c54:	430a      	orrs	r2, r1
 8000c56:	4313      	orrs	r3, r2
 8000c58:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8000c5c:	697b      	ldr	r3, [r7, #20]
 8000c5e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000c60:	bf00      	nop
 8000c62:	371c      	adds	r7, #28
 8000c64:	46bd      	mov	sp, r7
 8000c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6a:	4770      	bx	lr
 8000c6c:	03fff000 	.word	0x03fff000

08000c70 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b085      	sub	sp, #20
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
 8000c78:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	3360      	adds	r3, #96	@ 0x60
 8000c7e:	461a      	mov	r2, r3
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	009b      	lsls	r3, r3, #2
 8000c84:	4413      	add	r3, r2
 8000c86:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8000c90:	4618      	mov	r0, r3
 8000c92:	3714      	adds	r7, #20
 8000c94:	46bd      	mov	sp, r7
 8000c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9a:	4770      	bx	lr

08000c9c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b087      	sub	sp, #28
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	60f8      	str	r0, [r7, #12]
 8000ca4:	60b9      	str	r1, [r7, #8]
 8000ca6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	3360      	adds	r3, #96	@ 0x60
 8000cac:	461a      	mov	r2, r3
 8000cae:	68bb      	ldr	r3, [r7, #8]
 8000cb0:	009b      	lsls	r3, r3, #2
 8000cb2:	4413      	add	r3, r2
 8000cb4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000cb6:	697b      	ldr	r3, [r7, #20]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	431a      	orrs	r2, r3
 8000cc2:	697b      	ldr	r3, [r7, #20]
 8000cc4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000cc6:	bf00      	nop
 8000cc8:	371c      	adds	r7, #28
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr

08000cd2 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8000cd2:	b480      	push	{r7}
 8000cd4:	b083      	sub	sp, #12
 8000cd6:	af00      	add	r7, sp, #0
 8000cd8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	68db      	ldr	r3, [r3, #12]
 8000cde:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d101      	bne.n	8000cea <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	e000      	b.n	8000cec <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000cea:	2300      	movs	r3, #0
}
 8000cec:	4618      	mov	r0, r3
 8000cee:	370c      	adds	r7, #12
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf6:	4770      	bx	lr

08000cf8 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	b087      	sub	sp, #28
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	60f8      	str	r0, [r7, #12]
 8000d00:	60b9      	str	r1, [r7, #8]
 8000d02:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	3330      	adds	r3, #48	@ 0x30
 8000d08:	461a      	mov	r2, r3
 8000d0a:	68bb      	ldr	r3, [r7, #8]
 8000d0c:	0a1b      	lsrs	r3, r3, #8
 8000d0e:	009b      	lsls	r3, r3, #2
 8000d10:	f003 030c 	and.w	r3, r3, #12
 8000d14:	4413      	add	r3, r2
 8000d16:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8000d18:	697b      	ldr	r3, [r7, #20]
 8000d1a:	681a      	ldr	r2, [r3, #0]
 8000d1c:	68bb      	ldr	r3, [r7, #8]
 8000d1e:	f003 031f 	and.w	r3, r3, #31
 8000d22:	211f      	movs	r1, #31
 8000d24:	fa01 f303 	lsl.w	r3, r1, r3
 8000d28:	43db      	mvns	r3, r3
 8000d2a:	401a      	ands	r2, r3
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	0e9b      	lsrs	r3, r3, #26
 8000d30:	f003 011f 	and.w	r1, r3, #31
 8000d34:	68bb      	ldr	r3, [r7, #8]
 8000d36:	f003 031f 	and.w	r3, r3, #31
 8000d3a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d3e:	431a      	orrs	r2, r3
 8000d40:	697b      	ldr	r3, [r7, #20]
 8000d42:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000d44:	bf00      	nop
 8000d46:	371c      	adds	r7, #28
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4e:	4770      	bx	lr

08000d50 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b087      	sub	sp, #28
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	60f8      	str	r0, [r7, #12]
 8000d58:	60b9      	str	r1, [r7, #8]
 8000d5a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	3314      	adds	r3, #20
 8000d60:	461a      	mov	r2, r3
 8000d62:	68bb      	ldr	r3, [r7, #8]
 8000d64:	0e5b      	lsrs	r3, r3, #25
 8000d66:	009b      	lsls	r3, r3, #2
 8000d68:	f003 0304 	and.w	r3, r3, #4
 8000d6c:	4413      	add	r3, r2
 8000d6e:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	681a      	ldr	r2, [r3, #0]
 8000d74:	68bb      	ldr	r3, [r7, #8]
 8000d76:	0d1b      	lsrs	r3, r3, #20
 8000d78:	f003 031f 	and.w	r3, r3, #31
 8000d7c:	2107      	movs	r1, #7
 8000d7e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d82:	43db      	mvns	r3, r3
 8000d84:	401a      	ands	r2, r3
 8000d86:	68bb      	ldr	r3, [r7, #8]
 8000d88:	0d1b      	lsrs	r3, r3, #20
 8000d8a:	f003 031f 	and.w	r3, r3, #31
 8000d8e:	6879      	ldr	r1, [r7, #4]
 8000d90:	fa01 f303 	lsl.w	r3, r1, r3
 8000d94:	431a      	orrs	r2, r3
 8000d96:	697b      	ldr	r3, [r7, #20]
 8000d98:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000d9a:	bf00      	nop
 8000d9c:	371c      	adds	r7, #28
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr
	...

08000da8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b085      	sub	sp, #20
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	60f8      	str	r0, [r7, #12]
 8000db0:	60b9      	str	r1, [r7, #8]
 8000db2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8000dba:	68bb      	ldr	r3, [r7, #8]
 8000dbc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000dc0:	43db      	mvns	r3, r3
 8000dc2:	401a      	ands	r2, r3
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	f003 0318 	and.w	r3, r3, #24
 8000dca:	4908      	ldr	r1, [pc, #32]	@ (8000dec <LL_ADC_SetChannelSingleDiff+0x44>)
 8000dcc:	40d9      	lsrs	r1, r3
 8000dce:	68bb      	ldr	r3, [r7, #8]
 8000dd0:	400b      	ands	r3, r1
 8000dd2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000dd6:	431a      	orrs	r2, r3
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000dde:	bf00      	nop
 8000de0:	3714      	adds	r7, #20
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop
 8000dec:	0007ffff 	.word	0x0007ffff

08000df0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b083      	sub	sp, #12
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	689b      	ldr	r3, [r3, #8]
 8000dfc:	f003 031f 	and.w	r3, r3, #31
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	370c      	adds	r7, #12
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr

08000e0c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b083      	sub	sp, #12
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	689b      	ldr	r3, [r3, #8]
 8000e18:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	370c      	adds	r7, #12
 8000e20:	46bd      	mov	sp, r7
 8000e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e26:	4770      	bx	lr

08000e28 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b083      	sub	sp, #12
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	689b      	ldr	r3, [r3, #8]
 8000e34:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8000e38:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000e3c:	687a      	ldr	r2, [r7, #4]
 8000e3e:	6093      	str	r3, [r2, #8]
}
 8000e40:	bf00      	nop
 8000e42:	370c      	adds	r7, #12
 8000e44:	46bd      	mov	sp, r7
 8000e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4a:	4770      	bx	lr

08000e4c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b083      	sub	sp, #12
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	689b      	ldr	r3, [r3, #8]
 8000e58:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000e5c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000e60:	d101      	bne.n	8000e66 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000e62:	2301      	movs	r3, #1
 8000e64:	e000      	b.n	8000e68 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000e66:	2300      	movs	r3, #0
}
 8000e68:	4618      	mov	r0, r3
 8000e6a:	370c      	adds	r7, #12
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e72:	4770      	bx	lr

08000e74 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b083      	sub	sp, #12
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	689b      	ldr	r3, [r3, #8]
 8000e80:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8000e84:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000e88:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000e90:	bf00      	nop
 8000e92:	370c      	adds	r7, #12
 8000e94:	46bd      	mov	sp, r7
 8000e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9a:	4770      	bx	lr

08000e9c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b083      	sub	sp, #12
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	689b      	ldr	r3, [r3, #8]
 8000ea8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000eac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8000eb0:	d101      	bne.n	8000eb6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	e000      	b.n	8000eb8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000eb6:	2300      	movs	r3, #0
}
 8000eb8:	4618      	mov	r0, r3
 8000eba:	370c      	adds	r7, #12
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec2:	4770      	bx	lr

08000ec4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b083      	sub	sp, #12
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	689b      	ldr	r3, [r3, #8]
 8000ed0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8000ed4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000ed8:	f043 0201 	orr.w	r2, r3, #1
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000ee0:	bf00      	nop
 8000ee2:	370c      	adds	r7, #12
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eea:	4770      	bx	lr

08000eec <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b083      	sub	sp, #12
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	689b      	ldr	r3, [r3, #8]
 8000ef8:	f003 0301 	and.w	r3, r3, #1
 8000efc:	2b01      	cmp	r3, #1
 8000efe:	d101      	bne.n	8000f04 <LL_ADC_IsEnabled+0x18>
 8000f00:	2301      	movs	r3, #1
 8000f02:	e000      	b.n	8000f06 <LL_ADC_IsEnabled+0x1a>
 8000f04:	2300      	movs	r3, #0
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	370c      	adds	r7, #12
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr

08000f12 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8000f12:	b480      	push	{r7}
 8000f14:	b083      	sub	sp, #12
 8000f16:	af00      	add	r7, sp, #0
 8000f18:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	689b      	ldr	r3, [r3, #8]
 8000f1e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8000f22:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000f26:	f043 0204 	orr.w	r2, r3, #4
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8000f2e:	bf00      	nop
 8000f30:	370c      	adds	r7, #12
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr

08000f3a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8000f3a:	b480      	push	{r7}
 8000f3c:	b083      	sub	sp, #12
 8000f3e:	af00      	add	r7, sp, #0
 8000f40:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	689b      	ldr	r3, [r3, #8]
 8000f46:	f003 0304 	and.w	r3, r3, #4
 8000f4a:	2b04      	cmp	r3, #4
 8000f4c:	d101      	bne.n	8000f52 <LL_ADC_REG_IsConversionOngoing+0x18>
 8000f4e:	2301      	movs	r3, #1
 8000f50:	e000      	b.n	8000f54 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000f52:	2300      	movs	r3, #0
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	370c      	adds	r7, #12
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5e:	4770      	bx	lr

08000f60 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b083      	sub	sp, #12
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	689b      	ldr	r3, [r3, #8]
 8000f6c:	f003 0308 	and.w	r3, r3, #8
 8000f70:	2b08      	cmp	r3, #8
 8000f72:	d101      	bne.n	8000f78 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8000f74:	2301      	movs	r3, #1
 8000f76:	e000      	b.n	8000f7a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8000f78:	2300      	movs	r3, #0
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	370c      	adds	r7, #12
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr
	...

08000f88 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000f88:	b590      	push	{r4, r7, lr}
 8000f8a:	b089      	sub	sp, #36	@ 0x24
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f90:	2300      	movs	r3, #0
 8000f92:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8000f94:	2300      	movs	r3, #0
 8000f96:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d101      	bne.n	8000fa2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	e130      	b.n	8001204 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	691b      	ldr	r3, [r3, #16]
 8000fa6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d109      	bne.n	8000fc4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000fb0:	6878      	ldr	r0, [r7, #4]
 8000fb2:	f7ff fc35 	bl	8000820 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	2200      	movs	r2, #0
 8000fba:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f7ff ff3f 	bl	8000e4c <LL_ADC_IsDeepPowerDownEnabled>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d004      	beq.n	8000fde <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f7ff ff25 	bl	8000e28 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f7ff ff5a 	bl	8000e9c <LL_ADC_IsInternalRegulatorEnabled>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d115      	bne.n	800101a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f7ff ff3e 	bl	8000e74 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8000ff8:	4b84      	ldr	r3, [pc, #528]	@ (800120c <HAL_ADC_Init+0x284>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	099b      	lsrs	r3, r3, #6
 8000ffe:	4a84      	ldr	r2, [pc, #528]	@ (8001210 <HAL_ADC_Init+0x288>)
 8001000:	fba2 2303 	umull	r2, r3, r2, r3
 8001004:	099b      	lsrs	r3, r3, #6
 8001006:	3301      	adds	r3, #1
 8001008:	005b      	lsls	r3, r3, #1
 800100a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800100c:	e002      	b.n	8001014 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	3b01      	subs	r3, #1
 8001012:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d1f9      	bne.n	800100e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	4618      	mov	r0, r3
 8001020:	f7ff ff3c 	bl	8000e9c <LL_ADC_IsInternalRegulatorEnabled>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d10d      	bne.n	8001046 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800102e:	f043 0210 	orr.w	r2, r3, #16
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800103a:	f043 0201 	orr.w	r2, r3, #1
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001042:	2301      	movs	r3, #1
 8001044:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4618      	mov	r0, r3
 800104c:	f7ff ff75 	bl	8000f3a <LL_ADC_REG_IsConversionOngoing>
 8001050:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001056:	f003 0310 	and.w	r3, r3, #16
 800105a:	2b00      	cmp	r3, #0
 800105c:	f040 80c9 	bne.w	80011f2 <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	2b00      	cmp	r3, #0
 8001064:	f040 80c5 	bne.w	80011f2 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800106c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001070:	f043 0202 	orr.w	r2, r3, #2
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4618      	mov	r0, r3
 800107e:	f7ff ff35 	bl	8000eec <LL_ADC_IsEnabled>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d115      	bne.n	80010b4 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001088:	4862      	ldr	r0, [pc, #392]	@ (8001214 <HAL_ADC_Init+0x28c>)
 800108a:	f7ff ff2f 	bl	8000eec <LL_ADC_IsEnabled>
 800108e:	4604      	mov	r4, r0
 8001090:	4861      	ldr	r0, [pc, #388]	@ (8001218 <HAL_ADC_Init+0x290>)
 8001092:	f7ff ff2b 	bl	8000eec <LL_ADC_IsEnabled>
 8001096:	4603      	mov	r3, r0
 8001098:	431c      	orrs	r4, r3
 800109a:	4860      	ldr	r0, [pc, #384]	@ (800121c <HAL_ADC_Init+0x294>)
 800109c:	f7ff ff26 	bl	8000eec <LL_ADC_IsEnabled>
 80010a0:	4603      	mov	r3, r0
 80010a2:	4323      	orrs	r3, r4
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d105      	bne.n	80010b4 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	4619      	mov	r1, r3
 80010ae:	485c      	ldr	r0, [pc, #368]	@ (8001220 <HAL_ADC_Init+0x298>)
 80010b0:	f7ff fd86 	bl	8000bc0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	7e5b      	ldrb	r3, [r3, #25]
 80010b8:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80010be:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80010c4:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80010ca:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010d2:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80010d4:	4313      	orrs	r3, r2
 80010d6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010de:	2b01      	cmp	r3, #1
 80010e0:	d106      	bne.n	80010f0 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010e6:	3b01      	subs	r3, #1
 80010e8:	045b      	lsls	r3, r3, #17
 80010ea:	69ba      	ldr	r2, [r7, #24]
 80010ec:	4313      	orrs	r3, r2
 80010ee:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d009      	beq.n	800110c <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010fc:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001104:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001106:	69ba      	ldr	r2, [r7, #24]
 8001108:	4313      	orrs	r3, r2
 800110a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	68da      	ldr	r2, [r3, #12]
 8001112:	4b44      	ldr	r3, [pc, #272]	@ (8001224 <HAL_ADC_Init+0x29c>)
 8001114:	4013      	ands	r3, r2
 8001116:	687a      	ldr	r2, [r7, #4]
 8001118:	6812      	ldr	r2, [r2, #0]
 800111a:	69b9      	ldr	r1, [r7, #24]
 800111c:	430b      	orrs	r3, r1
 800111e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4618      	mov	r0, r3
 8001126:	f7ff ff1b 	bl	8000f60 <LL_ADC_INJ_IsConversionOngoing>
 800112a:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d13d      	bne.n	80011ae <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001132:	693b      	ldr	r3, [r7, #16]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d13a      	bne.n	80011ae <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800113c:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001144:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001146:	4313      	orrs	r3, r2
 8001148:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	68db      	ldr	r3, [r3, #12]
 8001150:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001154:	f023 0302 	bic.w	r3, r3, #2
 8001158:	687a      	ldr	r2, [r7, #4]
 800115a:	6812      	ldr	r2, [r2, #0]
 800115c:	69b9      	ldr	r1, [r7, #24]
 800115e:	430b      	orrs	r3, r1
 8001160:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001168:	2b01      	cmp	r3, #1
 800116a:	d118      	bne.n	800119e <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	691b      	ldr	r3, [r3, #16]
 8001172:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001176:	f023 0304 	bic.w	r3, r3, #4
 800117a:	687a      	ldr	r2, [r7, #4]
 800117c:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 800117e:	687a      	ldr	r2, [r7, #4]
 8001180:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001182:	4311      	orrs	r1, r2
 8001184:	687a      	ldr	r2, [r7, #4]
 8001186:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001188:	4311      	orrs	r1, r2
 800118a:	687a      	ldr	r2, [r7, #4]
 800118c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800118e:	430a      	orrs	r2, r1
 8001190:	431a      	orrs	r2, r3
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f042 0201 	orr.w	r2, r2, #1
 800119a:	611a      	str	r2, [r3, #16]
 800119c:	e007      	b.n	80011ae <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	691a      	ldr	r2, [r3, #16]
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f022 0201 	bic.w	r2, r2, #1
 80011ac:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	691b      	ldr	r3, [r3, #16]
 80011b2:	2b01      	cmp	r3, #1
 80011b4:	d10c      	bne.n	80011d0 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011bc:	f023 010f 	bic.w	r1, r3, #15
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	69db      	ldr	r3, [r3, #28]
 80011c4:	1e5a      	subs	r2, r3, #1
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	430a      	orrs	r2, r1
 80011cc:	631a      	str	r2, [r3, #48]	@ 0x30
 80011ce:	e007      	b.n	80011e0 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f022 020f 	bic.w	r2, r2, #15
 80011de:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80011e4:	f023 0303 	bic.w	r3, r3, #3
 80011e8:	f043 0201 	orr.w	r2, r3, #1
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	655a      	str	r2, [r3, #84]	@ 0x54
 80011f0:	e007      	b.n	8001202 <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80011f6:	f043 0210 	orr.w	r2, r3, #16
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80011fe:	2301      	movs	r3, #1
 8001200:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001202:	7ffb      	ldrb	r3, [r7, #31]
}
 8001204:	4618      	mov	r0, r3
 8001206:	3724      	adds	r7, #36	@ 0x24
 8001208:	46bd      	mov	sp, r7
 800120a:	bd90      	pop	{r4, r7, pc}
 800120c:	20000000 	.word	0x20000000
 8001210:	053e2d63 	.word	0x053e2d63
 8001214:	50040000 	.word	0x50040000
 8001218:	50040100 	.word	0x50040100
 800121c:	50040200 	.word	0x50040200
 8001220:	50040300 	.word	0x50040300
 8001224:	fff0c007 	.word	0xfff0c007

08001228 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b086      	sub	sp, #24
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001230:	4857      	ldr	r0, [pc, #348]	@ (8001390 <HAL_ADC_Start+0x168>)
 8001232:	f7ff fddd 	bl	8000df0 <LL_ADC_GetMultimode>
 8001236:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4618      	mov	r0, r3
 800123e:	f7ff fe7c 	bl	8000f3a <LL_ADC_REG_IsConversionOngoing>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	f040 809c 	bne.w	8001382 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001250:	2b01      	cmp	r3, #1
 8001252:	d101      	bne.n	8001258 <HAL_ADC_Start+0x30>
 8001254:	2302      	movs	r3, #2
 8001256:	e097      	b.n	8001388 <HAL_ADC_Start+0x160>
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	2201      	movs	r2, #1
 800125c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001260:	6878      	ldr	r0, [r7, #4]
 8001262:	f000 fd73 	bl	8001d4c <ADC_Enable>
 8001266:	4603      	mov	r3, r0
 8001268:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800126a:	7dfb      	ldrb	r3, [r7, #23]
 800126c:	2b00      	cmp	r3, #0
 800126e:	f040 8083 	bne.w	8001378 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001276:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800127a:	f023 0301 	bic.w	r3, r3, #1
 800127e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	655a      	str	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	4a42      	ldr	r2, [pc, #264]	@ (8001394 <HAL_ADC_Start+0x16c>)
 800128c:	4293      	cmp	r3, r2
 800128e:	d002      	beq.n	8001296 <HAL_ADC_Start+0x6e>
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	e000      	b.n	8001298 <HAL_ADC_Start+0x70>
 8001296:	4b40      	ldr	r3, [pc, #256]	@ (8001398 <HAL_ADC_Start+0x170>)
 8001298:	687a      	ldr	r2, [r7, #4]
 800129a:	6812      	ldr	r2, [r2, #0]
 800129c:	4293      	cmp	r3, r2
 800129e:	d002      	beq.n	80012a6 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80012a0:	693b      	ldr	r3, [r7, #16]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d105      	bne.n	80012b2 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80012aa:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	655a      	str	r2, [r3, #84]	@ 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80012b6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80012ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80012be:	d106      	bne.n	80012ce <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012c4:	f023 0206 	bic.w	r2, r3, #6
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	659a      	str	r2, [r3, #88]	@ 0x58
 80012cc:	e002      	b.n	80012d4 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	2200      	movs	r2, #0
 80012d2:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	221c      	movs	r2, #28
 80012da:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	2200      	movs	r2, #0
 80012e0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a2a      	ldr	r2, [pc, #168]	@ (8001394 <HAL_ADC_Start+0x16c>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d002      	beq.n	80012f4 <HAL_ADC_Start+0xcc>
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	e000      	b.n	80012f6 <HAL_ADC_Start+0xce>
 80012f4:	4b28      	ldr	r3, [pc, #160]	@ (8001398 <HAL_ADC_Start+0x170>)
 80012f6:	687a      	ldr	r2, [r7, #4]
 80012f8:	6812      	ldr	r2, [r2, #0]
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d008      	beq.n	8001310 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80012fe:	693b      	ldr	r3, [r7, #16]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d005      	beq.n	8001310 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001304:	693b      	ldr	r3, [r7, #16]
 8001306:	2b05      	cmp	r3, #5
 8001308:	d002      	beq.n	8001310 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800130a:	693b      	ldr	r3, [r7, #16]
 800130c:	2b09      	cmp	r3, #9
 800130e:	d114      	bne.n	800133a <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	68db      	ldr	r3, [r3, #12]
 8001316:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800131a:	2b00      	cmp	r3, #0
 800131c:	d007      	beq.n	800132e <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001322:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001326:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4618      	mov	r0, r3
 8001334:	f7ff fded 	bl	8000f12 <LL_ADC_REG_StartConversion>
 8001338:	e025      	b.n	8001386 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800133e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4a12      	ldr	r2, [pc, #72]	@ (8001394 <HAL_ADC_Start+0x16c>)
 800134c:	4293      	cmp	r3, r2
 800134e:	d002      	beq.n	8001356 <HAL_ADC_Start+0x12e>
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	e000      	b.n	8001358 <HAL_ADC_Start+0x130>
 8001356:	4b10      	ldr	r3, [pc, #64]	@ (8001398 <HAL_ADC_Start+0x170>)
 8001358:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	68db      	ldr	r3, [r3, #12]
 800135e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001362:	2b00      	cmp	r3, #0
 8001364:	d00f      	beq.n	8001386 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800136a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800136e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	655a      	str	r2, [r3, #84]	@ 0x54
 8001376:	e006      	b.n	8001386 <HAL_ADC_Start+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	2200      	movs	r2, #0
 800137c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8001380:	e001      	b.n	8001386 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001382:	2302      	movs	r3, #2
 8001384:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001386:	7dfb      	ldrb	r3, [r7, #23]
}
 8001388:	4618      	mov	r0, r3
 800138a:	3718      	adds	r7, #24
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}
 8001390:	50040300 	.word	0x50040300
 8001394:	50040100 	.word	0x50040100
 8001398:	50040000 	.word	0x50040000

0800139c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b088      	sub	sp, #32
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
 80013a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80013a6:	4866      	ldr	r0, [pc, #408]	@ (8001540 <HAL_ADC_PollForConversion+0x1a4>)
 80013a8:	f7ff fd22 	bl	8000df0 <LL_ADC_GetMultimode>
 80013ac:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	695b      	ldr	r3, [r3, #20]
 80013b2:	2b08      	cmp	r3, #8
 80013b4:	d102      	bne.n	80013bc <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80013b6:	2308      	movs	r3, #8
 80013b8:	61fb      	str	r3, [r7, #28]
 80013ba:	e02a      	b.n	8001412 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d005      	beq.n	80013ce <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80013c2:	697b      	ldr	r3, [r7, #20]
 80013c4:	2b05      	cmp	r3, #5
 80013c6:	d002      	beq.n	80013ce <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	2b09      	cmp	r3, #9
 80013cc:	d111      	bne.n	80013f2 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	68db      	ldr	r3, [r3, #12]
 80013d4:	f003 0301 	and.w	r3, r3, #1
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d007      	beq.n	80013ec <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80013e0:	f043 0220 	orr.w	r2, r3, #32
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 80013e8:	2301      	movs	r3, #1
 80013ea:	e0a4      	b.n	8001536 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80013ec:	2304      	movs	r3, #4
 80013ee:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80013f0:	e00f      	b.n	8001412 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80013f2:	4853      	ldr	r0, [pc, #332]	@ (8001540 <HAL_ADC_PollForConversion+0x1a4>)
 80013f4:	f7ff fd0a 	bl	8000e0c <LL_ADC_GetMultiDMATransfer>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d007      	beq.n	800140e <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001402:	f043 0220 	orr.w	r2, r3, #32
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 800140a:	2301      	movs	r3, #1
 800140c:	e093      	b.n	8001536 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800140e:	2304      	movs	r3, #4
 8001410:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001412:	f7ff fba5 	bl	8000b60 <HAL_GetTick>
 8001416:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001418:	e021      	b.n	800145e <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001420:	d01d      	beq.n	800145e <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001422:	f7ff fb9d 	bl	8000b60 <HAL_GetTick>
 8001426:	4602      	mov	r2, r0
 8001428:	693b      	ldr	r3, [r7, #16]
 800142a:	1ad3      	subs	r3, r2, r3
 800142c:	683a      	ldr	r2, [r7, #0]
 800142e:	429a      	cmp	r2, r3
 8001430:	d302      	bcc.n	8001438 <HAL_ADC_PollForConversion+0x9c>
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d112      	bne.n	800145e <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	681a      	ldr	r2, [r3, #0]
 800143e:	69fb      	ldr	r3, [r7, #28]
 8001440:	4013      	ands	r3, r2
 8001442:	2b00      	cmp	r3, #0
 8001444:	d10b      	bne.n	800145e <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800144a:	f043 0204 	orr.w	r2, r3, #4
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	2200      	movs	r2, #0
 8001456:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 800145a:	2303      	movs	r3, #3
 800145c:	e06b      	b.n	8001536 <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	681a      	ldr	r2, [r3, #0]
 8001464:	69fb      	ldr	r3, [r7, #28]
 8001466:	4013      	ands	r3, r2
 8001468:	2b00      	cmp	r3, #0
 800146a:	d0d6      	beq.n	800141a <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001470:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4618      	mov	r0, r3
 800147e:	f7ff fc28 	bl	8000cd2 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d01c      	beq.n	80014c2 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	7e5b      	ldrb	r3, [r3, #25]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d118      	bne.n	80014c2 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f003 0308 	and.w	r3, r3, #8
 800149a:	2b08      	cmp	r3, #8
 800149c:	d111      	bne.n	80014c2 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80014a2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80014ae:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d105      	bne.n	80014c2 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80014ba:	f043 0201 	orr.w	r2, r3, #1
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4a1f      	ldr	r2, [pc, #124]	@ (8001544 <HAL_ADC_PollForConversion+0x1a8>)
 80014c8:	4293      	cmp	r3, r2
 80014ca:	d002      	beq.n	80014d2 <HAL_ADC_PollForConversion+0x136>
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	e000      	b.n	80014d4 <HAL_ADC_PollForConversion+0x138>
 80014d2:	4b1d      	ldr	r3, [pc, #116]	@ (8001548 <HAL_ADC_PollForConversion+0x1ac>)
 80014d4:	687a      	ldr	r2, [r7, #4]
 80014d6:	6812      	ldr	r2, [r2, #0]
 80014d8:	4293      	cmp	r3, r2
 80014da:	d008      	beq.n	80014ee <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d005      	beq.n	80014ee <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80014e2:	697b      	ldr	r3, [r7, #20]
 80014e4:	2b05      	cmp	r3, #5
 80014e6:	d002      	beq.n	80014ee <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	2b09      	cmp	r3, #9
 80014ec:	d104      	bne.n	80014f8 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	68db      	ldr	r3, [r3, #12]
 80014f4:	61bb      	str	r3, [r7, #24]
 80014f6:	e00c      	b.n	8001512 <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a11      	ldr	r2, [pc, #68]	@ (8001544 <HAL_ADC_PollForConversion+0x1a8>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d002      	beq.n	8001508 <HAL_ADC_PollForConversion+0x16c>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	e000      	b.n	800150a <HAL_ADC_PollForConversion+0x16e>
 8001508:	4b0f      	ldr	r3, [pc, #60]	@ (8001548 <HAL_ADC_PollForConversion+0x1ac>)
 800150a:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	68db      	ldr	r3, [r3, #12]
 8001510:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001512:	69fb      	ldr	r3, [r7, #28]
 8001514:	2b08      	cmp	r3, #8
 8001516:	d104      	bne.n	8001522 <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	2208      	movs	r2, #8
 800151e:	601a      	str	r2, [r3, #0]
 8001520:	e008      	b.n	8001534 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8001522:	69bb      	ldr	r3, [r7, #24]
 8001524:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001528:	2b00      	cmp	r3, #0
 800152a:	d103      	bne.n	8001534 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	220c      	movs	r2, #12
 8001532:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8001534:	2300      	movs	r3, #0
}
 8001536:	4618      	mov	r0, r3
 8001538:	3720      	adds	r7, #32
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	50040300 	.word	0x50040300
 8001544:	50040100 	.word	0x50040100
 8001548:	50040000 	.word	0x50040000

0800154c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 800154c:	b480      	push	{r7}
 800154e:	b083      	sub	sp, #12
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800155a:	4618      	mov	r0, r3
 800155c:	370c      	adds	r7, #12
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr
	...

08001568 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b0b6      	sub	sp, #216	@ 0xd8
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
 8001570:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001572:	2300      	movs	r3, #0
 8001574:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001578:	2300      	movs	r3, #0
 800157a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001582:	2b01      	cmp	r3, #1
 8001584:	d101      	bne.n	800158a <HAL_ADC_ConfigChannel+0x22>
 8001586:	2302      	movs	r3, #2
 8001588:	e3c9      	b.n	8001d1e <HAL_ADC_ConfigChannel+0x7b6>
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2201      	movs	r2, #1
 800158e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4618      	mov	r0, r3
 8001598:	f7ff fccf 	bl	8000f3a <LL_ADC_REG_IsConversionOngoing>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	f040 83aa 	bne.w	8001cf8 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	2b05      	cmp	r3, #5
 80015b2:	d824      	bhi.n	80015fe <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	3b02      	subs	r3, #2
 80015ba:	2b03      	cmp	r3, #3
 80015bc:	d81b      	bhi.n	80015f6 <HAL_ADC_ConfigChannel+0x8e>
 80015be:	a201      	add	r2, pc, #4	@ (adr r2, 80015c4 <HAL_ADC_ConfigChannel+0x5c>)
 80015c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015c4:	080015d5 	.word	0x080015d5
 80015c8:	080015dd 	.word	0x080015dd
 80015cc:	080015e5 	.word	0x080015e5
 80015d0:	080015ed 	.word	0x080015ed
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 80015d4:	230c      	movs	r3, #12
 80015d6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80015da:	e010      	b.n	80015fe <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 80015dc:	2312      	movs	r3, #18
 80015de:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80015e2:	e00c      	b.n	80015fe <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 80015e4:	2318      	movs	r3, #24
 80015e6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80015ea:	e008      	b.n	80015fe <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 80015ec:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80015f0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80015f4:	e003      	b.n	80015fe <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 80015f6:	2306      	movs	r3, #6
 80015f8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80015fc:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6818      	ldr	r0, [r3, #0]
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	461a      	mov	r2, r3
 8001608:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 800160c:	f7ff fb74 	bl	8000cf8 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4618      	mov	r0, r3
 8001616:	f7ff fc90 	bl	8000f3a <LL_ADC_REG_IsConversionOngoing>
 800161a:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4618      	mov	r0, r3
 8001624:	f7ff fc9c 	bl	8000f60 <LL_ADC_INJ_IsConversionOngoing>
 8001628:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800162c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001630:	2b00      	cmp	r3, #0
 8001632:	f040 81a4 	bne.w	800197e <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001636:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800163a:	2b00      	cmp	r3, #0
 800163c:	f040 819f 	bne.w	800197e <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6818      	ldr	r0, [r3, #0]
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	6819      	ldr	r1, [r3, #0]
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	689b      	ldr	r3, [r3, #8]
 800164c:	461a      	mov	r2, r3
 800164e:	f7ff fb7f 	bl	8000d50 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	695a      	ldr	r2, [r3, #20]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	68db      	ldr	r3, [r3, #12]
 800165c:	08db      	lsrs	r3, r3, #3
 800165e:	f003 0303 	and.w	r3, r3, #3
 8001662:	005b      	lsls	r3, r3, #1
 8001664:	fa02 f303 	lsl.w	r3, r2, r3
 8001668:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	691b      	ldr	r3, [r3, #16]
 8001670:	2b04      	cmp	r3, #4
 8001672:	d00a      	beq.n	800168a <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6818      	ldr	r0, [r3, #0]
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	6919      	ldr	r1, [r3, #16]
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	681a      	ldr	r2, [r3, #0]
 8001680:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001684:	f7ff fad0 	bl	8000c28 <LL_ADC_SetOffset>
 8001688:	e179      	b.n	800197e <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	2100      	movs	r1, #0
 8001690:	4618      	mov	r0, r3
 8001692:	f7ff faed 	bl	8000c70 <LL_ADC_GetOffsetChannel>
 8001696:	4603      	mov	r3, r0
 8001698:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800169c:	2b00      	cmp	r3, #0
 800169e:	d10a      	bne.n	80016b6 <HAL_ADC_ConfigChannel+0x14e>
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	2100      	movs	r1, #0
 80016a6:	4618      	mov	r0, r3
 80016a8:	f7ff fae2 	bl	8000c70 <LL_ADC_GetOffsetChannel>
 80016ac:	4603      	mov	r3, r0
 80016ae:	0e9b      	lsrs	r3, r3, #26
 80016b0:	f003 021f 	and.w	r2, r3, #31
 80016b4:	e01e      	b.n	80016f4 <HAL_ADC_ConfigChannel+0x18c>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	2100      	movs	r1, #0
 80016bc:	4618      	mov	r0, r3
 80016be:	f7ff fad7 	bl	8000c70 <LL_ADC_GetOffsetChannel>
 80016c2:	4603      	mov	r3, r0
 80016c4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016c8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80016cc:	fa93 f3a3 	rbit	r3, r3
 80016d0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80016d4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80016d8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80016dc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d101      	bne.n	80016e8 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 80016e4:	2320      	movs	r3, #32
 80016e6:	e004      	b.n	80016f2 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 80016e8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80016ec:	fab3 f383 	clz	r3, r3
 80016f0:	b2db      	uxtb	r3, r3
 80016f2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d105      	bne.n	800170c <HAL_ADC_ConfigChannel+0x1a4>
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	0e9b      	lsrs	r3, r3, #26
 8001706:	f003 031f 	and.w	r3, r3, #31
 800170a:	e018      	b.n	800173e <HAL_ADC_ConfigChannel+0x1d6>
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001714:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001718:	fa93 f3a3 	rbit	r3, r3
 800171c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8001720:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001724:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8001728:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800172c:	2b00      	cmp	r3, #0
 800172e:	d101      	bne.n	8001734 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8001730:	2320      	movs	r3, #32
 8001732:	e004      	b.n	800173e <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8001734:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001738:	fab3 f383 	clz	r3, r3
 800173c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800173e:	429a      	cmp	r2, r3
 8001740:	d106      	bne.n	8001750 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	2200      	movs	r2, #0
 8001748:	2100      	movs	r1, #0
 800174a:	4618      	mov	r0, r3
 800174c:	f7ff faa6 	bl	8000c9c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	2101      	movs	r1, #1
 8001756:	4618      	mov	r0, r3
 8001758:	f7ff fa8a 	bl	8000c70 <LL_ADC_GetOffsetChannel>
 800175c:	4603      	mov	r3, r0
 800175e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001762:	2b00      	cmp	r3, #0
 8001764:	d10a      	bne.n	800177c <HAL_ADC_ConfigChannel+0x214>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	2101      	movs	r1, #1
 800176c:	4618      	mov	r0, r3
 800176e:	f7ff fa7f 	bl	8000c70 <LL_ADC_GetOffsetChannel>
 8001772:	4603      	mov	r3, r0
 8001774:	0e9b      	lsrs	r3, r3, #26
 8001776:	f003 021f 	and.w	r2, r3, #31
 800177a:	e01e      	b.n	80017ba <HAL_ADC_ConfigChannel+0x252>
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	2101      	movs	r1, #1
 8001782:	4618      	mov	r0, r3
 8001784:	f7ff fa74 	bl	8000c70 <LL_ADC_GetOffsetChannel>
 8001788:	4603      	mov	r3, r0
 800178a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800178e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001792:	fa93 f3a3 	rbit	r3, r3
 8001796:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 800179a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800179e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 80017a2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d101      	bne.n	80017ae <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 80017aa:	2320      	movs	r3, #32
 80017ac:	e004      	b.n	80017b8 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 80017ae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80017b2:	fab3 f383 	clz	r3, r3
 80017b6:	b2db      	uxtb	r3, r3
 80017b8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d105      	bne.n	80017d2 <HAL_ADC_ConfigChannel+0x26a>
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	0e9b      	lsrs	r3, r3, #26
 80017cc:	f003 031f 	and.w	r3, r3, #31
 80017d0:	e018      	b.n	8001804 <HAL_ADC_ConfigChannel+0x29c>
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017da:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80017de:	fa93 f3a3 	rbit	r3, r3
 80017e2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 80017e6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80017ea:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 80017ee:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d101      	bne.n	80017fa <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 80017f6:	2320      	movs	r3, #32
 80017f8:	e004      	b.n	8001804 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 80017fa:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80017fe:	fab3 f383 	clz	r3, r3
 8001802:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001804:	429a      	cmp	r2, r3
 8001806:	d106      	bne.n	8001816 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	2200      	movs	r2, #0
 800180e:	2101      	movs	r1, #1
 8001810:	4618      	mov	r0, r3
 8001812:	f7ff fa43 	bl	8000c9c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	2102      	movs	r1, #2
 800181c:	4618      	mov	r0, r3
 800181e:	f7ff fa27 	bl	8000c70 <LL_ADC_GetOffsetChannel>
 8001822:	4603      	mov	r3, r0
 8001824:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001828:	2b00      	cmp	r3, #0
 800182a:	d10a      	bne.n	8001842 <HAL_ADC_ConfigChannel+0x2da>
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	2102      	movs	r1, #2
 8001832:	4618      	mov	r0, r3
 8001834:	f7ff fa1c 	bl	8000c70 <LL_ADC_GetOffsetChannel>
 8001838:	4603      	mov	r3, r0
 800183a:	0e9b      	lsrs	r3, r3, #26
 800183c:	f003 021f 	and.w	r2, r3, #31
 8001840:	e01e      	b.n	8001880 <HAL_ADC_ConfigChannel+0x318>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	2102      	movs	r1, #2
 8001848:	4618      	mov	r0, r3
 800184a:	f7ff fa11 	bl	8000c70 <LL_ADC_GetOffsetChannel>
 800184e:	4603      	mov	r3, r0
 8001850:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001854:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001858:	fa93 f3a3 	rbit	r3, r3
 800185c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8001860:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001864:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8001868:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800186c:	2b00      	cmp	r3, #0
 800186e:	d101      	bne.n	8001874 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8001870:	2320      	movs	r3, #32
 8001872:	e004      	b.n	800187e <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8001874:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001878:	fab3 f383 	clz	r3, r3
 800187c:	b2db      	uxtb	r3, r3
 800187e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001888:	2b00      	cmp	r3, #0
 800188a:	d105      	bne.n	8001898 <HAL_ADC_ConfigChannel+0x330>
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	0e9b      	lsrs	r3, r3, #26
 8001892:	f003 031f 	and.w	r3, r3, #31
 8001896:	e014      	b.n	80018c2 <HAL_ADC_ConfigChannel+0x35a>
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800189e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80018a0:	fa93 f3a3 	rbit	r3, r3
 80018a4:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 80018a6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80018a8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 80018ac:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d101      	bne.n	80018b8 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 80018b4:	2320      	movs	r3, #32
 80018b6:	e004      	b.n	80018c2 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 80018b8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80018bc:	fab3 f383 	clz	r3, r3
 80018c0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80018c2:	429a      	cmp	r2, r3
 80018c4:	d106      	bne.n	80018d4 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	2200      	movs	r2, #0
 80018cc:	2102      	movs	r1, #2
 80018ce:	4618      	mov	r0, r3
 80018d0:	f7ff f9e4 	bl	8000c9c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	2103      	movs	r1, #3
 80018da:	4618      	mov	r0, r3
 80018dc:	f7ff f9c8 	bl	8000c70 <LL_ADC_GetOffsetChannel>
 80018e0:	4603      	mov	r3, r0
 80018e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d10a      	bne.n	8001900 <HAL_ADC_ConfigChannel+0x398>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	2103      	movs	r1, #3
 80018f0:	4618      	mov	r0, r3
 80018f2:	f7ff f9bd 	bl	8000c70 <LL_ADC_GetOffsetChannel>
 80018f6:	4603      	mov	r3, r0
 80018f8:	0e9b      	lsrs	r3, r3, #26
 80018fa:	f003 021f 	and.w	r2, r3, #31
 80018fe:	e017      	b.n	8001930 <HAL_ADC_ConfigChannel+0x3c8>
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	2103      	movs	r1, #3
 8001906:	4618      	mov	r0, r3
 8001908:	f7ff f9b2 	bl	8000c70 <LL_ADC_GetOffsetChannel>
 800190c:	4603      	mov	r3, r0
 800190e:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001910:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001912:	fa93 f3a3 	rbit	r3, r3
 8001916:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8001918:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800191a:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 800191c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800191e:	2b00      	cmp	r3, #0
 8001920:	d101      	bne.n	8001926 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8001922:	2320      	movs	r3, #32
 8001924:	e003      	b.n	800192e <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8001926:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001928:	fab3 f383 	clz	r3, r3
 800192c:	b2db      	uxtb	r3, r3
 800192e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001938:	2b00      	cmp	r3, #0
 800193a:	d105      	bne.n	8001948 <HAL_ADC_ConfigChannel+0x3e0>
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	0e9b      	lsrs	r3, r3, #26
 8001942:	f003 031f 	and.w	r3, r3, #31
 8001946:	e011      	b.n	800196c <HAL_ADC_ConfigChannel+0x404>
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800194e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001950:	fa93 f3a3 	rbit	r3, r3
 8001954:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8001956:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001958:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 800195a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800195c:	2b00      	cmp	r3, #0
 800195e:	d101      	bne.n	8001964 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8001960:	2320      	movs	r3, #32
 8001962:	e003      	b.n	800196c <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8001964:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001966:	fab3 f383 	clz	r3, r3
 800196a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800196c:	429a      	cmp	r2, r3
 800196e:	d106      	bne.n	800197e <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	2200      	movs	r2, #0
 8001976:	2103      	movs	r1, #3
 8001978:	4618      	mov	r0, r3
 800197a:	f7ff f98f 	bl	8000c9c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4618      	mov	r0, r3
 8001984:	f7ff fab2 	bl	8000eec <LL_ADC_IsEnabled>
 8001988:	4603      	mov	r3, r0
 800198a:	2b00      	cmp	r3, #0
 800198c:	f040 8140 	bne.w	8001c10 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6818      	ldr	r0, [r3, #0]
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	6819      	ldr	r1, [r3, #0]
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	68db      	ldr	r3, [r3, #12]
 800199c:	461a      	mov	r2, r3
 800199e:	f7ff fa03 	bl	8000da8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	68db      	ldr	r3, [r3, #12]
 80019a6:	4a8f      	ldr	r2, [pc, #572]	@ (8001be4 <HAL_ADC_ConfigChannel+0x67c>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	f040 8131 	bne.w	8001c10 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d10b      	bne.n	80019d6 <HAL_ADC_ConfigChannel+0x46e>
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	0e9b      	lsrs	r3, r3, #26
 80019c4:	3301      	adds	r3, #1
 80019c6:	f003 031f 	and.w	r3, r3, #31
 80019ca:	2b09      	cmp	r3, #9
 80019cc:	bf94      	ite	ls
 80019ce:	2301      	movls	r3, #1
 80019d0:	2300      	movhi	r3, #0
 80019d2:	b2db      	uxtb	r3, r3
 80019d4:	e019      	b.n	8001a0a <HAL_ADC_ConfigChannel+0x4a2>
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019dc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80019de:	fa93 f3a3 	rbit	r3, r3
 80019e2:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80019e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80019e6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80019e8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d101      	bne.n	80019f2 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 80019ee:	2320      	movs	r3, #32
 80019f0:	e003      	b.n	80019fa <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 80019f2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80019f4:	fab3 f383 	clz	r3, r3
 80019f8:	b2db      	uxtb	r3, r3
 80019fa:	3301      	adds	r3, #1
 80019fc:	f003 031f 	and.w	r3, r3, #31
 8001a00:	2b09      	cmp	r3, #9
 8001a02:	bf94      	ite	ls
 8001a04:	2301      	movls	r3, #1
 8001a06:	2300      	movhi	r3, #0
 8001a08:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d079      	beq.n	8001b02 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d107      	bne.n	8001a2a <HAL_ADC_ConfigChannel+0x4c2>
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	0e9b      	lsrs	r3, r3, #26
 8001a20:	3301      	adds	r3, #1
 8001a22:	069b      	lsls	r3, r3, #26
 8001a24:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001a28:	e015      	b.n	8001a56 <HAL_ADC_ConfigChannel+0x4ee>
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a30:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001a32:	fa93 f3a3 	rbit	r3, r3
 8001a36:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8001a38:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001a3a:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8001a3c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d101      	bne.n	8001a46 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8001a42:	2320      	movs	r3, #32
 8001a44:	e003      	b.n	8001a4e <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8001a46:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001a48:	fab3 f383 	clz	r3, r3
 8001a4c:	b2db      	uxtb	r3, r3
 8001a4e:	3301      	adds	r3, #1
 8001a50:	069b      	lsls	r3, r3, #26
 8001a52:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d109      	bne.n	8001a76 <HAL_ADC_ConfigChannel+0x50e>
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	0e9b      	lsrs	r3, r3, #26
 8001a68:	3301      	adds	r3, #1
 8001a6a:	f003 031f 	and.w	r3, r3, #31
 8001a6e:	2101      	movs	r1, #1
 8001a70:	fa01 f303 	lsl.w	r3, r1, r3
 8001a74:	e017      	b.n	8001aa6 <HAL_ADC_ConfigChannel+0x53e>
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a7c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001a7e:	fa93 f3a3 	rbit	r3, r3
 8001a82:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8001a84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001a86:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8001a88:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d101      	bne.n	8001a92 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8001a8e:	2320      	movs	r3, #32
 8001a90:	e003      	b.n	8001a9a <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8001a92:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001a94:	fab3 f383 	clz	r3, r3
 8001a98:	b2db      	uxtb	r3, r3
 8001a9a:	3301      	adds	r3, #1
 8001a9c:	f003 031f 	and.w	r3, r3, #31
 8001aa0:	2101      	movs	r1, #1
 8001aa2:	fa01 f303 	lsl.w	r3, r1, r3
 8001aa6:	ea42 0103 	orr.w	r1, r2, r3
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d10a      	bne.n	8001acc <HAL_ADC_ConfigChannel+0x564>
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	0e9b      	lsrs	r3, r3, #26
 8001abc:	3301      	adds	r3, #1
 8001abe:	f003 021f 	and.w	r2, r3, #31
 8001ac2:	4613      	mov	r3, r2
 8001ac4:	005b      	lsls	r3, r3, #1
 8001ac6:	4413      	add	r3, r2
 8001ac8:	051b      	lsls	r3, r3, #20
 8001aca:	e018      	b.n	8001afe <HAL_ADC_ConfigChannel+0x596>
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ad2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ad4:	fa93 f3a3 	rbit	r3, r3
 8001ad8:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8001ada:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001adc:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8001ade:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d101      	bne.n	8001ae8 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8001ae4:	2320      	movs	r3, #32
 8001ae6:	e003      	b.n	8001af0 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8001ae8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001aea:	fab3 f383 	clz	r3, r3
 8001aee:	b2db      	uxtb	r3, r3
 8001af0:	3301      	adds	r3, #1
 8001af2:	f003 021f 	and.w	r2, r3, #31
 8001af6:	4613      	mov	r3, r2
 8001af8:	005b      	lsls	r3, r3, #1
 8001afa:	4413      	add	r3, r2
 8001afc:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001afe:	430b      	orrs	r3, r1
 8001b00:	e081      	b.n	8001c06 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d107      	bne.n	8001b1e <HAL_ADC_ConfigChannel+0x5b6>
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	0e9b      	lsrs	r3, r3, #26
 8001b14:	3301      	adds	r3, #1
 8001b16:	069b      	lsls	r3, r3, #26
 8001b18:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001b1c:	e015      	b.n	8001b4a <HAL_ADC_ConfigChannel+0x5e2>
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b26:	fa93 f3a3 	rbit	r3, r3
 8001b2a:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8001b2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8001b30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d101      	bne.n	8001b3a <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8001b36:	2320      	movs	r3, #32
 8001b38:	e003      	b.n	8001b42 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8001b3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b3c:	fab3 f383 	clz	r3, r3
 8001b40:	b2db      	uxtb	r3, r3
 8001b42:	3301      	adds	r3, #1
 8001b44:	069b      	lsls	r3, r3, #26
 8001b46:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d109      	bne.n	8001b6a <HAL_ADC_ConfigChannel+0x602>
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	0e9b      	lsrs	r3, r3, #26
 8001b5c:	3301      	adds	r3, #1
 8001b5e:	f003 031f 	and.w	r3, r3, #31
 8001b62:	2101      	movs	r1, #1
 8001b64:	fa01 f303 	lsl.w	r3, r1, r3
 8001b68:	e017      	b.n	8001b9a <HAL_ADC_ConfigChannel+0x632>
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b70:	69fb      	ldr	r3, [r7, #28]
 8001b72:	fa93 f3a3 	rbit	r3, r3
 8001b76:	61bb      	str	r3, [r7, #24]
  return result;
 8001b78:	69bb      	ldr	r3, [r7, #24]
 8001b7a:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8001b7c:	6a3b      	ldr	r3, [r7, #32]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d101      	bne.n	8001b86 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8001b82:	2320      	movs	r3, #32
 8001b84:	e003      	b.n	8001b8e <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8001b86:	6a3b      	ldr	r3, [r7, #32]
 8001b88:	fab3 f383 	clz	r3, r3
 8001b8c:	b2db      	uxtb	r3, r3
 8001b8e:	3301      	adds	r3, #1
 8001b90:	f003 031f 	and.w	r3, r3, #31
 8001b94:	2101      	movs	r1, #1
 8001b96:	fa01 f303 	lsl.w	r3, r1, r3
 8001b9a:	ea42 0103 	orr.w	r1, r2, r3
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d10d      	bne.n	8001bc6 <HAL_ADC_ConfigChannel+0x65e>
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	0e9b      	lsrs	r3, r3, #26
 8001bb0:	3301      	adds	r3, #1
 8001bb2:	f003 021f 	and.w	r2, r3, #31
 8001bb6:	4613      	mov	r3, r2
 8001bb8:	005b      	lsls	r3, r3, #1
 8001bba:	4413      	add	r3, r2
 8001bbc:	3b1e      	subs	r3, #30
 8001bbe:	051b      	lsls	r3, r3, #20
 8001bc0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001bc4:	e01e      	b.n	8001c04 <HAL_ADC_ConfigChannel+0x69c>
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bcc:	693b      	ldr	r3, [r7, #16]
 8001bce:	fa93 f3a3 	rbit	r3, r3
 8001bd2:	60fb      	str	r3, [r7, #12]
  return result;
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d104      	bne.n	8001be8 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8001bde:	2320      	movs	r3, #32
 8001be0:	e006      	b.n	8001bf0 <HAL_ADC_ConfigChannel+0x688>
 8001be2:	bf00      	nop
 8001be4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	fab3 f383 	clz	r3, r3
 8001bee:	b2db      	uxtb	r3, r3
 8001bf0:	3301      	adds	r3, #1
 8001bf2:	f003 021f 	and.w	r2, r3, #31
 8001bf6:	4613      	mov	r3, r2
 8001bf8:	005b      	lsls	r3, r3, #1
 8001bfa:	4413      	add	r3, r2
 8001bfc:	3b1e      	subs	r3, #30
 8001bfe:	051b      	lsls	r3, r3, #20
 8001c00:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001c04:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8001c06:	683a      	ldr	r2, [r7, #0]
 8001c08:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	f7ff f8a0 	bl	8000d50 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	681a      	ldr	r2, [r3, #0]
 8001c14:	4b44      	ldr	r3, [pc, #272]	@ (8001d28 <HAL_ADC_ConfigChannel+0x7c0>)
 8001c16:	4013      	ands	r3, r2
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d07a      	beq.n	8001d12 <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001c1c:	4843      	ldr	r0, [pc, #268]	@ (8001d2c <HAL_ADC_ConfigChannel+0x7c4>)
 8001c1e:	f7fe fff5 	bl	8000c0c <LL_ADC_GetCommonPathInternalCh>
 8001c22:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a41      	ldr	r2, [pc, #260]	@ (8001d30 <HAL_ADC_ConfigChannel+0x7c8>)
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d12c      	bne.n	8001c8a <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001c30:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001c34:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d126      	bne.n	8001c8a <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a3c      	ldr	r2, [pc, #240]	@ (8001d34 <HAL_ADC_ConfigChannel+0x7cc>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d004      	beq.n	8001c50 <HAL_ADC_ConfigChannel+0x6e8>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a3b      	ldr	r2, [pc, #236]	@ (8001d38 <HAL_ADC_ConfigChannel+0x7d0>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d15d      	bne.n	8001d0c <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001c50:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001c54:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001c58:	4619      	mov	r1, r3
 8001c5a:	4834      	ldr	r0, [pc, #208]	@ (8001d2c <HAL_ADC_ConfigChannel+0x7c4>)
 8001c5c:	f7fe ffc3 	bl	8000be6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001c60:	4b36      	ldr	r3, [pc, #216]	@ (8001d3c <HAL_ADC_ConfigChannel+0x7d4>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	099b      	lsrs	r3, r3, #6
 8001c66:	4a36      	ldr	r2, [pc, #216]	@ (8001d40 <HAL_ADC_ConfigChannel+0x7d8>)
 8001c68:	fba2 2303 	umull	r2, r3, r2, r3
 8001c6c:	099b      	lsrs	r3, r3, #6
 8001c6e:	1c5a      	adds	r2, r3, #1
 8001c70:	4613      	mov	r3, r2
 8001c72:	005b      	lsls	r3, r3, #1
 8001c74:	4413      	add	r3, r2
 8001c76:	009b      	lsls	r3, r3, #2
 8001c78:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001c7a:	e002      	b.n	8001c82 <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	3b01      	subs	r3, #1
 8001c80:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001c82:	68bb      	ldr	r3, [r7, #8]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d1f9      	bne.n	8001c7c <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001c88:	e040      	b.n	8001d0c <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a2d      	ldr	r2, [pc, #180]	@ (8001d44 <HAL_ADC_ConfigChannel+0x7dc>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d118      	bne.n	8001cc6 <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001c94:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001c98:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d112      	bne.n	8001cc6 <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a23      	ldr	r2, [pc, #140]	@ (8001d34 <HAL_ADC_ConfigChannel+0x7cc>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d004      	beq.n	8001cb4 <HAL_ADC_ConfigChannel+0x74c>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4a22      	ldr	r2, [pc, #136]	@ (8001d38 <HAL_ADC_ConfigChannel+0x7d0>)
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d12d      	bne.n	8001d10 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001cb4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001cb8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001cbc:	4619      	mov	r1, r3
 8001cbe:	481b      	ldr	r0, [pc, #108]	@ (8001d2c <HAL_ADC_ConfigChannel+0x7c4>)
 8001cc0:	f7fe ff91 	bl	8000be6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001cc4:	e024      	b.n	8001d10 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a1f      	ldr	r2, [pc, #124]	@ (8001d48 <HAL_ADC_ConfigChannel+0x7e0>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d120      	bne.n	8001d12 <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001cd0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001cd4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d11a      	bne.n	8001d12 <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a14      	ldr	r2, [pc, #80]	@ (8001d34 <HAL_ADC_ConfigChannel+0x7cc>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d115      	bne.n	8001d12 <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001ce6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001cea:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001cee:	4619      	mov	r1, r3
 8001cf0:	480e      	ldr	r0, [pc, #56]	@ (8001d2c <HAL_ADC_ConfigChannel+0x7c4>)
 8001cf2:	f7fe ff78 	bl	8000be6 <LL_ADC_SetCommonPathInternalCh>
 8001cf6:	e00c      	b.n	8001d12 <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cfc:	f043 0220 	orr.w	r2, r3, #32
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001d04:	2301      	movs	r3, #1
 8001d06:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8001d0a:	e002      	b.n	8001d12 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001d0c:	bf00      	nop
 8001d0e:	e000      	b.n	8001d12 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001d10:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2200      	movs	r2, #0
 8001d16:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8001d1a:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	37d8      	adds	r7, #216	@ 0xd8
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	80080000 	.word	0x80080000
 8001d2c:	50040300 	.word	0x50040300
 8001d30:	c7520000 	.word	0xc7520000
 8001d34:	50040000 	.word	0x50040000
 8001d38:	50040200 	.word	0x50040200
 8001d3c:	20000000 	.word	0x20000000
 8001d40:	053e2d63 	.word	0x053e2d63
 8001d44:	cb840000 	.word	0xcb840000
 8001d48:	80000001 	.word	0x80000001

08001d4c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b084      	sub	sp, #16
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001d54:	2300      	movs	r3, #0
 8001d56:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f7ff f8c5 	bl	8000eec <LL_ADC_IsEnabled>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d169      	bne.n	8001e3c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	689a      	ldr	r2, [r3, #8]
 8001d6e:	4b36      	ldr	r3, [pc, #216]	@ (8001e48 <ADC_Enable+0xfc>)
 8001d70:	4013      	ands	r3, r2
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d00d      	beq.n	8001d92 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d7a:	f043 0210 	orr.w	r2, r3, #16
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d86:	f043 0201 	orr.w	r2, r3, #1
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e055      	b.n	8001e3e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4618      	mov	r0, r3
 8001d98:	f7ff f894 	bl	8000ec4 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8001d9c:	482b      	ldr	r0, [pc, #172]	@ (8001e4c <ADC_Enable+0x100>)
 8001d9e:	f7fe ff35 	bl	8000c0c <LL_ADC_GetCommonPathInternalCh>
 8001da2:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8001da4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d013      	beq.n	8001dd4 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001dac:	4b28      	ldr	r3, [pc, #160]	@ (8001e50 <ADC_Enable+0x104>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	099b      	lsrs	r3, r3, #6
 8001db2:	4a28      	ldr	r2, [pc, #160]	@ (8001e54 <ADC_Enable+0x108>)
 8001db4:	fba2 2303 	umull	r2, r3, r2, r3
 8001db8:	099b      	lsrs	r3, r3, #6
 8001dba:	1c5a      	adds	r2, r3, #1
 8001dbc:	4613      	mov	r3, r2
 8001dbe:	005b      	lsls	r3, r3, #1
 8001dc0:	4413      	add	r3, r2
 8001dc2:	009b      	lsls	r3, r3, #2
 8001dc4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001dc6:	e002      	b.n	8001dce <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	3b01      	subs	r3, #1
 8001dcc:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001dce:	68bb      	ldr	r3, [r7, #8]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d1f9      	bne.n	8001dc8 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8001dd4:	f7fe fec4 	bl	8000b60 <HAL_GetTick>
 8001dd8:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001dda:	e028      	b.n	8001e2e <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4618      	mov	r0, r3
 8001de2:	f7ff f883 	bl	8000eec <LL_ADC_IsEnabled>
 8001de6:	4603      	mov	r3, r0
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d104      	bne.n	8001df6 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4618      	mov	r0, r3
 8001df2:	f7ff f867 	bl	8000ec4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001df6:	f7fe feb3 	bl	8000b60 <HAL_GetTick>
 8001dfa:	4602      	mov	r2, r0
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	1ad3      	subs	r3, r2, r3
 8001e00:	2b02      	cmp	r3, #2
 8001e02:	d914      	bls.n	8001e2e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f003 0301 	and.w	r3, r3, #1
 8001e0e:	2b01      	cmp	r3, #1
 8001e10:	d00d      	beq.n	8001e2e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e16:	f043 0210 	orr.w	r2, r3, #16
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e22:	f043 0201 	orr.w	r2, r3, #1
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e007      	b.n	8001e3e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f003 0301 	and.w	r3, r3, #1
 8001e38:	2b01      	cmp	r3, #1
 8001e3a:	d1cf      	bne.n	8001ddc <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001e3c:	2300      	movs	r3, #0
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	3710      	adds	r7, #16
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	8000003f 	.word	0x8000003f
 8001e4c:	50040300 	.word	0x50040300
 8001e50:	20000000 	.word	0x20000000
 8001e54:	053e2d63 	.word	0x053e2d63

08001e58 <LL_ADC_IsEnabled>:
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b083      	sub	sp, #12
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	f003 0301 	and.w	r3, r3, #1
 8001e68:	2b01      	cmp	r3, #1
 8001e6a:	d101      	bne.n	8001e70 <LL_ADC_IsEnabled+0x18>
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	e000      	b.n	8001e72 <LL_ADC_IsEnabled+0x1a>
 8001e70:	2300      	movs	r3, #0
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	370c      	adds	r7, #12
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr

08001e7e <LL_ADC_REG_IsConversionOngoing>:
{
 8001e7e:	b480      	push	{r7}
 8001e80:	b083      	sub	sp, #12
 8001e82:	af00      	add	r7, sp, #0
 8001e84:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	689b      	ldr	r3, [r3, #8]
 8001e8a:	f003 0304 	and.w	r3, r3, #4
 8001e8e:	2b04      	cmp	r3, #4
 8001e90:	d101      	bne.n	8001e96 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001e92:	2301      	movs	r3, #1
 8001e94:	e000      	b.n	8001e98 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001e96:	2300      	movs	r3, #0
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	370c      	adds	r7, #12
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr

08001ea4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8001ea4:	b590      	push	{r4, r7, lr}
 8001ea6:	b09f      	sub	sp, #124	@ 0x7c
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
 8001eac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001eba:	2b01      	cmp	r3, #1
 8001ebc:	d101      	bne.n	8001ec2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8001ebe:	2302      	movs	r3, #2
 8001ec0:	e093      	b.n	8001fea <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8001eca:	2300      	movs	r3, #0
 8001ecc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8001ece:	2300      	movs	r3, #0
 8001ed0:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a47      	ldr	r2, [pc, #284]	@ (8001ff4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d102      	bne.n	8001ee2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8001edc:	4b46      	ldr	r3, [pc, #280]	@ (8001ff8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8001ede:	60bb      	str	r3, [r7, #8]
 8001ee0:	e001      	b.n	8001ee6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8001ee6:	68bb      	ldr	r3, [r7, #8]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d10b      	bne.n	8001f04 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ef0:	f043 0220 	orr.w	r2, r3, #32
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2200      	movs	r2, #0
 8001efc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8001f00:	2301      	movs	r3, #1
 8001f02:	e072      	b.n	8001fea <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	4618      	mov	r0, r3
 8001f08:	f7ff ffb9 	bl	8001e7e <LL_ADC_REG_IsConversionOngoing>
 8001f0c:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4618      	mov	r0, r3
 8001f14:	f7ff ffb3 	bl	8001e7e <LL_ADC_REG_IsConversionOngoing>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d154      	bne.n	8001fc8 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8001f1e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d151      	bne.n	8001fc8 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8001f24:	4b35      	ldr	r3, [pc, #212]	@ (8001ffc <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8001f26:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d02c      	beq.n	8001f8a <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8001f30:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001f32:	689b      	ldr	r3, [r3, #8]
 8001f34:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	6859      	ldr	r1, [r3, #4]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001f42:	035b      	lsls	r3, r3, #13
 8001f44:	430b      	orrs	r3, r1
 8001f46:	431a      	orrs	r2, r3
 8001f48:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001f4a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001f4c:	4829      	ldr	r0, [pc, #164]	@ (8001ff4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8001f4e:	f7ff ff83 	bl	8001e58 <LL_ADC_IsEnabled>
 8001f52:	4604      	mov	r4, r0
 8001f54:	4828      	ldr	r0, [pc, #160]	@ (8001ff8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8001f56:	f7ff ff7f 	bl	8001e58 <LL_ADC_IsEnabled>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	431c      	orrs	r4, r3
 8001f5e:	4828      	ldr	r0, [pc, #160]	@ (8002000 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8001f60:	f7ff ff7a 	bl	8001e58 <LL_ADC_IsEnabled>
 8001f64:	4603      	mov	r3, r0
 8001f66:	4323      	orrs	r3, r4
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d137      	bne.n	8001fdc <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8001f6c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8001f74:	f023 030f 	bic.w	r3, r3, #15
 8001f78:	683a      	ldr	r2, [r7, #0]
 8001f7a:	6811      	ldr	r1, [r2, #0]
 8001f7c:	683a      	ldr	r2, [r7, #0]
 8001f7e:	6892      	ldr	r2, [r2, #8]
 8001f80:	430a      	orrs	r2, r1
 8001f82:	431a      	orrs	r2, r3
 8001f84:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001f86:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8001f88:	e028      	b.n	8001fdc <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001f8a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001f92:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001f94:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001f96:	4817      	ldr	r0, [pc, #92]	@ (8001ff4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8001f98:	f7ff ff5e 	bl	8001e58 <LL_ADC_IsEnabled>
 8001f9c:	4604      	mov	r4, r0
 8001f9e:	4816      	ldr	r0, [pc, #88]	@ (8001ff8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8001fa0:	f7ff ff5a 	bl	8001e58 <LL_ADC_IsEnabled>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	431c      	orrs	r4, r3
 8001fa8:	4815      	ldr	r0, [pc, #84]	@ (8002000 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8001faa:	f7ff ff55 	bl	8001e58 <LL_ADC_IsEnabled>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	4323      	orrs	r3, r4
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d112      	bne.n	8001fdc <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8001fb6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001fb8:	689b      	ldr	r3, [r3, #8]
 8001fba:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8001fbe:	f023 030f 	bic.w	r3, r3, #15
 8001fc2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8001fc4:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8001fc6:	e009      	b.n	8001fdc <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fcc:	f043 0220 	orr.w	r2, r3, #32
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8001fda:	e000      	b.n	8001fde <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8001fdc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8001fe6:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	377c      	adds	r7, #124	@ 0x7c
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd90      	pop	{r4, r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	50040000 	.word	0x50040000
 8001ff8:	50040100 	.word	0x50040100
 8001ffc:	50040300 	.word	0x50040300
 8002000:	50040200 	.word	0x50040200

08002004 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002004:	b480      	push	{r7}
 8002006:	b085      	sub	sp, #20
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	f003 0307 	and.w	r3, r3, #7
 8002012:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002014:	4b0c      	ldr	r3, [pc, #48]	@ (8002048 <__NVIC_SetPriorityGrouping+0x44>)
 8002016:	68db      	ldr	r3, [r3, #12]
 8002018:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800201a:	68ba      	ldr	r2, [r7, #8]
 800201c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002020:	4013      	ands	r3, r2
 8002022:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800202c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002030:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002034:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002036:	4a04      	ldr	r2, [pc, #16]	@ (8002048 <__NVIC_SetPriorityGrouping+0x44>)
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	60d3      	str	r3, [r2, #12]
}
 800203c:	bf00      	nop
 800203e:	3714      	adds	r7, #20
 8002040:	46bd      	mov	sp, r7
 8002042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002046:	4770      	bx	lr
 8002048:	e000ed00 	.word	0xe000ed00

0800204c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800204c:	b480      	push	{r7}
 800204e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002050:	4b04      	ldr	r3, [pc, #16]	@ (8002064 <__NVIC_GetPriorityGrouping+0x18>)
 8002052:	68db      	ldr	r3, [r3, #12]
 8002054:	0a1b      	lsrs	r3, r3, #8
 8002056:	f003 0307 	and.w	r3, r3, #7
}
 800205a:	4618      	mov	r0, r3
 800205c:	46bd      	mov	sp, r7
 800205e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002062:	4770      	bx	lr
 8002064:	e000ed00 	.word	0xe000ed00

08002068 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002068:	b480      	push	{r7}
 800206a:	b083      	sub	sp, #12
 800206c:	af00      	add	r7, sp, #0
 800206e:	4603      	mov	r3, r0
 8002070:	6039      	str	r1, [r7, #0]
 8002072:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002074:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002078:	2b00      	cmp	r3, #0
 800207a:	db0a      	blt.n	8002092 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	b2da      	uxtb	r2, r3
 8002080:	490c      	ldr	r1, [pc, #48]	@ (80020b4 <__NVIC_SetPriority+0x4c>)
 8002082:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002086:	0112      	lsls	r2, r2, #4
 8002088:	b2d2      	uxtb	r2, r2
 800208a:	440b      	add	r3, r1
 800208c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002090:	e00a      	b.n	80020a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	b2da      	uxtb	r2, r3
 8002096:	4908      	ldr	r1, [pc, #32]	@ (80020b8 <__NVIC_SetPriority+0x50>)
 8002098:	79fb      	ldrb	r3, [r7, #7]
 800209a:	f003 030f 	and.w	r3, r3, #15
 800209e:	3b04      	subs	r3, #4
 80020a0:	0112      	lsls	r2, r2, #4
 80020a2:	b2d2      	uxtb	r2, r2
 80020a4:	440b      	add	r3, r1
 80020a6:	761a      	strb	r2, [r3, #24]
}
 80020a8:	bf00      	nop
 80020aa:	370c      	adds	r7, #12
 80020ac:	46bd      	mov	sp, r7
 80020ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b2:	4770      	bx	lr
 80020b4:	e000e100 	.word	0xe000e100
 80020b8:	e000ed00 	.word	0xe000ed00

080020bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020bc:	b480      	push	{r7}
 80020be:	b089      	sub	sp, #36	@ 0x24
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	60f8      	str	r0, [r7, #12]
 80020c4:	60b9      	str	r1, [r7, #8]
 80020c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	f003 0307 	and.w	r3, r3, #7
 80020ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020d0:	69fb      	ldr	r3, [r7, #28]
 80020d2:	f1c3 0307 	rsb	r3, r3, #7
 80020d6:	2b04      	cmp	r3, #4
 80020d8:	bf28      	it	cs
 80020da:	2304      	movcs	r3, #4
 80020dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020de:	69fb      	ldr	r3, [r7, #28]
 80020e0:	3304      	adds	r3, #4
 80020e2:	2b06      	cmp	r3, #6
 80020e4:	d902      	bls.n	80020ec <NVIC_EncodePriority+0x30>
 80020e6:	69fb      	ldr	r3, [r7, #28]
 80020e8:	3b03      	subs	r3, #3
 80020ea:	e000      	b.n	80020ee <NVIC_EncodePriority+0x32>
 80020ec:	2300      	movs	r3, #0
 80020ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020f0:	f04f 32ff 	mov.w	r2, #4294967295
 80020f4:	69bb      	ldr	r3, [r7, #24]
 80020f6:	fa02 f303 	lsl.w	r3, r2, r3
 80020fa:	43da      	mvns	r2, r3
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	401a      	ands	r2, r3
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002104:	f04f 31ff 	mov.w	r1, #4294967295
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	fa01 f303 	lsl.w	r3, r1, r3
 800210e:	43d9      	mvns	r1, r3
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002114:	4313      	orrs	r3, r2
         );
}
 8002116:	4618      	mov	r0, r3
 8002118:	3724      	adds	r7, #36	@ 0x24
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr
	...

08002124 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b082      	sub	sp, #8
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	3b01      	subs	r3, #1
 8002130:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002134:	d301      	bcc.n	800213a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002136:	2301      	movs	r3, #1
 8002138:	e00f      	b.n	800215a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800213a:	4a0a      	ldr	r2, [pc, #40]	@ (8002164 <SysTick_Config+0x40>)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	3b01      	subs	r3, #1
 8002140:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002142:	210f      	movs	r1, #15
 8002144:	f04f 30ff 	mov.w	r0, #4294967295
 8002148:	f7ff ff8e 	bl	8002068 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800214c:	4b05      	ldr	r3, [pc, #20]	@ (8002164 <SysTick_Config+0x40>)
 800214e:	2200      	movs	r2, #0
 8002150:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002152:	4b04      	ldr	r3, [pc, #16]	@ (8002164 <SysTick_Config+0x40>)
 8002154:	2207      	movs	r2, #7
 8002156:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002158:	2300      	movs	r3, #0
}
 800215a:	4618      	mov	r0, r3
 800215c:	3708      	adds	r7, #8
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	e000e010 	.word	0xe000e010

08002168 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b082      	sub	sp, #8
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002170:	6878      	ldr	r0, [r7, #4]
 8002172:	f7ff ff47 	bl	8002004 <__NVIC_SetPriorityGrouping>
}
 8002176:	bf00      	nop
 8002178:	3708      	adds	r7, #8
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}

0800217e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800217e:	b580      	push	{r7, lr}
 8002180:	b086      	sub	sp, #24
 8002182:	af00      	add	r7, sp, #0
 8002184:	4603      	mov	r3, r0
 8002186:	60b9      	str	r1, [r7, #8]
 8002188:	607a      	str	r2, [r7, #4]
 800218a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800218c:	2300      	movs	r3, #0
 800218e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002190:	f7ff ff5c 	bl	800204c <__NVIC_GetPriorityGrouping>
 8002194:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002196:	687a      	ldr	r2, [r7, #4]
 8002198:	68b9      	ldr	r1, [r7, #8]
 800219a:	6978      	ldr	r0, [r7, #20]
 800219c:	f7ff ff8e 	bl	80020bc <NVIC_EncodePriority>
 80021a0:	4602      	mov	r2, r0
 80021a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021a6:	4611      	mov	r1, r2
 80021a8:	4618      	mov	r0, r3
 80021aa:	f7ff ff5d 	bl	8002068 <__NVIC_SetPriority>
}
 80021ae:	bf00      	nop
 80021b0:	3718      	adds	r7, #24
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}

080021b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021b6:	b580      	push	{r7, lr}
 80021b8:	b082      	sub	sp, #8
 80021ba:	af00      	add	r7, sp, #0
 80021bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021be:	6878      	ldr	r0, [r7, #4]
 80021c0:	f7ff ffb0 	bl	8002124 <SysTick_Config>
 80021c4:	4603      	mov	r3, r0
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	3708      	adds	r7, #8
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}
	...

080021d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b087      	sub	sp, #28
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
 80021d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80021da:	2300      	movs	r3, #0
 80021dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021de:	e17f      	b.n	80024e0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	681a      	ldr	r2, [r3, #0]
 80021e4:	2101      	movs	r1, #1
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	fa01 f303 	lsl.w	r3, r1, r3
 80021ec:	4013      	ands	r3, r2
 80021ee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	f000 8171 	beq.w	80024da <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	f003 0303 	and.w	r3, r3, #3
 8002200:	2b01      	cmp	r3, #1
 8002202:	d005      	beq.n	8002210 <HAL_GPIO_Init+0x40>
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	f003 0303 	and.w	r3, r3, #3
 800220c:	2b02      	cmp	r3, #2
 800220e:	d130      	bne.n	8002272 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002216:	697b      	ldr	r3, [r7, #20]
 8002218:	005b      	lsls	r3, r3, #1
 800221a:	2203      	movs	r2, #3
 800221c:	fa02 f303 	lsl.w	r3, r2, r3
 8002220:	43db      	mvns	r3, r3
 8002222:	693a      	ldr	r2, [r7, #16]
 8002224:	4013      	ands	r3, r2
 8002226:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	68da      	ldr	r2, [r3, #12]
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	005b      	lsls	r3, r3, #1
 8002230:	fa02 f303 	lsl.w	r3, r2, r3
 8002234:	693a      	ldr	r2, [r7, #16]
 8002236:	4313      	orrs	r3, r2
 8002238:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	693a      	ldr	r2, [r7, #16]
 800223e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002246:	2201      	movs	r2, #1
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	fa02 f303 	lsl.w	r3, r2, r3
 800224e:	43db      	mvns	r3, r3
 8002250:	693a      	ldr	r2, [r7, #16]
 8002252:	4013      	ands	r3, r2
 8002254:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	091b      	lsrs	r3, r3, #4
 800225c:	f003 0201 	and.w	r2, r3, #1
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	fa02 f303 	lsl.w	r3, r2, r3
 8002266:	693a      	ldr	r2, [r7, #16]
 8002268:	4313      	orrs	r3, r2
 800226a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	693a      	ldr	r2, [r7, #16]
 8002270:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	f003 0303 	and.w	r3, r3, #3
 800227a:	2b03      	cmp	r3, #3
 800227c:	d118      	bne.n	80022b0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002282:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002284:	2201      	movs	r2, #1
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	fa02 f303 	lsl.w	r3, r2, r3
 800228c:	43db      	mvns	r3, r3
 800228e:	693a      	ldr	r2, [r7, #16]
 8002290:	4013      	ands	r3, r2
 8002292:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	08db      	lsrs	r3, r3, #3
 800229a:	f003 0201 	and.w	r2, r3, #1
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	fa02 f303 	lsl.w	r3, r2, r3
 80022a4:	693a      	ldr	r2, [r7, #16]
 80022a6:	4313      	orrs	r3, r2
 80022a8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	693a      	ldr	r2, [r7, #16]
 80022ae:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	f003 0303 	and.w	r3, r3, #3
 80022b8:	2b03      	cmp	r3, #3
 80022ba:	d017      	beq.n	80022ec <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	68db      	ldr	r3, [r3, #12]
 80022c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	005b      	lsls	r3, r3, #1
 80022c6:	2203      	movs	r2, #3
 80022c8:	fa02 f303 	lsl.w	r3, r2, r3
 80022cc:	43db      	mvns	r3, r3
 80022ce:	693a      	ldr	r2, [r7, #16]
 80022d0:	4013      	ands	r3, r2
 80022d2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	689a      	ldr	r2, [r3, #8]
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	005b      	lsls	r3, r3, #1
 80022dc:	fa02 f303 	lsl.w	r3, r2, r3
 80022e0:	693a      	ldr	r2, [r7, #16]
 80022e2:	4313      	orrs	r3, r2
 80022e4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	693a      	ldr	r2, [r7, #16]
 80022ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	f003 0303 	and.w	r3, r3, #3
 80022f4:	2b02      	cmp	r3, #2
 80022f6:	d123      	bne.n	8002340 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	08da      	lsrs	r2, r3, #3
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	3208      	adds	r2, #8
 8002300:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002304:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	f003 0307 	and.w	r3, r3, #7
 800230c:	009b      	lsls	r3, r3, #2
 800230e:	220f      	movs	r2, #15
 8002310:	fa02 f303 	lsl.w	r3, r2, r3
 8002314:	43db      	mvns	r3, r3
 8002316:	693a      	ldr	r2, [r7, #16]
 8002318:	4013      	ands	r3, r2
 800231a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	691a      	ldr	r2, [r3, #16]
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	f003 0307 	and.w	r3, r3, #7
 8002326:	009b      	lsls	r3, r3, #2
 8002328:	fa02 f303 	lsl.w	r3, r2, r3
 800232c:	693a      	ldr	r2, [r7, #16]
 800232e:	4313      	orrs	r3, r2
 8002330:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	08da      	lsrs	r2, r3, #3
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	3208      	adds	r2, #8
 800233a:	6939      	ldr	r1, [r7, #16]
 800233c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	005b      	lsls	r3, r3, #1
 800234a:	2203      	movs	r2, #3
 800234c:	fa02 f303 	lsl.w	r3, r2, r3
 8002350:	43db      	mvns	r3, r3
 8002352:	693a      	ldr	r2, [r7, #16]
 8002354:	4013      	ands	r3, r2
 8002356:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	f003 0203 	and.w	r2, r3, #3
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	005b      	lsls	r3, r3, #1
 8002364:	fa02 f303 	lsl.w	r3, r2, r3
 8002368:	693a      	ldr	r2, [r7, #16]
 800236a:	4313      	orrs	r3, r2
 800236c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	693a      	ldr	r2, [r7, #16]
 8002372:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800237c:	2b00      	cmp	r3, #0
 800237e:	f000 80ac 	beq.w	80024da <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002382:	4b5f      	ldr	r3, [pc, #380]	@ (8002500 <HAL_GPIO_Init+0x330>)
 8002384:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002386:	4a5e      	ldr	r2, [pc, #376]	@ (8002500 <HAL_GPIO_Init+0x330>)
 8002388:	f043 0301 	orr.w	r3, r3, #1
 800238c:	6613      	str	r3, [r2, #96]	@ 0x60
 800238e:	4b5c      	ldr	r3, [pc, #368]	@ (8002500 <HAL_GPIO_Init+0x330>)
 8002390:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002392:	f003 0301 	and.w	r3, r3, #1
 8002396:	60bb      	str	r3, [r7, #8]
 8002398:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800239a:	4a5a      	ldr	r2, [pc, #360]	@ (8002504 <HAL_GPIO_Init+0x334>)
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	089b      	lsrs	r3, r3, #2
 80023a0:	3302      	adds	r3, #2
 80023a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023a6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	f003 0303 	and.w	r3, r3, #3
 80023ae:	009b      	lsls	r3, r3, #2
 80023b0:	220f      	movs	r2, #15
 80023b2:	fa02 f303 	lsl.w	r3, r2, r3
 80023b6:	43db      	mvns	r3, r3
 80023b8:	693a      	ldr	r2, [r7, #16]
 80023ba:	4013      	ands	r3, r2
 80023bc:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80023c4:	d025      	beq.n	8002412 <HAL_GPIO_Init+0x242>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	4a4f      	ldr	r2, [pc, #316]	@ (8002508 <HAL_GPIO_Init+0x338>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d01f      	beq.n	800240e <HAL_GPIO_Init+0x23e>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	4a4e      	ldr	r2, [pc, #312]	@ (800250c <HAL_GPIO_Init+0x33c>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d019      	beq.n	800240a <HAL_GPIO_Init+0x23a>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	4a4d      	ldr	r2, [pc, #308]	@ (8002510 <HAL_GPIO_Init+0x340>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d013      	beq.n	8002406 <HAL_GPIO_Init+0x236>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	4a4c      	ldr	r2, [pc, #304]	@ (8002514 <HAL_GPIO_Init+0x344>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d00d      	beq.n	8002402 <HAL_GPIO_Init+0x232>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	4a4b      	ldr	r2, [pc, #300]	@ (8002518 <HAL_GPIO_Init+0x348>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d007      	beq.n	80023fe <HAL_GPIO_Init+0x22e>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	4a4a      	ldr	r2, [pc, #296]	@ (800251c <HAL_GPIO_Init+0x34c>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d101      	bne.n	80023fa <HAL_GPIO_Init+0x22a>
 80023f6:	2306      	movs	r3, #6
 80023f8:	e00c      	b.n	8002414 <HAL_GPIO_Init+0x244>
 80023fa:	2307      	movs	r3, #7
 80023fc:	e00a      	b.n	8002414 <HAL_GPIO_Init+0x244>
 80023fe:	2305      	movs	r3, #5
 8002400:	e008      	b.n	8002414 <HAL_GPIO_Init+0x244>
 8002402:	2304      	movs	r3, #4
 8002404:	e006      	b.n	8002414 <HAL_GPIO_Init+0x244>
 8002406:	2303      	movs	r3, #3
 8002408:	e004      	b.n	8002414 <HAL_GPIO_Init+0x244>
 800240a:	2302      	movs	r3, #2
 800240c:	e002      	b.n	8002414 <HAL_GPIO_Init+0x244>
 800240e:	2301      	movs	r3, #1
 8002410:	e000      	b.n	8002414 <HAL_GPIO_Init+0x244>
 8002412:	2300      	movs	r3, #0
 8002414:	697a      	ldr	r2, [r7, #20]
 8002416:	f002 0203 	and.w	r2, r2, #3
 800241a:	0092      	lsls	r2, r2, #2
 800241c:	4093      	lsls	r3, r2
 800241e:	693a      	ldr	r2, [r7, #16]
 8002420:	4313      	orrs	r3, r2
 8002422:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002424:	4937      	ldr	r1, [pc, #220]	@ (8002504 <HAL_GPIO_Init+0x334>)
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	089b      	lsrs	r3, r3, #2
 800242a:	3302      	adds	r3, #2
 800242c:	693a      	ldr	r2, [r7, #16]
 800242e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002432:	4b3b      	ldr	r3, [pc, #236]	@ (8002520 <HAL_GPIO_Init+0x350>)
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	43db      	mvns	r3, r3
 800243c:	693a      	ldr	r2, [r7, #16]
 800243e:	4013      	ands	r3, r2
 8002440:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800244a:	2b00      	cmp	r3, #0
 800244c:	d003      	beq.n	8002456 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800244e:	693a      	ldr	r2, [r7, #16]
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	4313      	orrs	r3, r2
 8002454:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002456:	4a32      	ldr	r2, [pc, #200]	@ (8002520 <HAL_GPIO_Init+0x350>)
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800245c:	4b30      	ldr	r3, [pc, #192]	@ (8002520 <HAL_GPIO_Init+0x350>)
 800245e:	68db      	ldr	r3, [r3, #12]
 8002460:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	43db      	mvns	r3, r3
 8002466:	693a      	ldr	r2, [r7, #16]
 8002468:	4013      	ands	r3, r2
 800246a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002474:	2b00      	cmp	r3, #0
 8002476:	d003      	beq.n	8002480 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002478:	693a      	ldr	r2, [r7, #16]
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	4313      	orrs	r3, r2
 800247e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002480:	4a27      	ldr	r2, [pc, #156]	@ (8002520 <HAL_GPIO_Init+0x350>)
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002486:	4b26      	ldr	r3, [pc, #152]	@ (8002520 <HAL_GPIO_Init+0x350>)
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	43db      	mvns	r3, r3
 8002490:	693a      	ldr	r2, [r7, #16]
 8002492:	4013      	ands	r3, r2
 8002494:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d003      	beq.n	80024aa <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80024a2:	693a      	ldr	r2, [r7, #16]
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	4313      	orrs	r3, r2
 80024a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80024aa:	4a1d      	ldr	r2, [pc, #116]	@ (8002520 <HAL_GPIO_Init+0x350>)
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80024b0:	4b1b      	ldr	r3, [pc, #108]	@ (8002520 <HAL_GPIO_Init+0x350>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	43db      	mvns	r3, r3
 80024ba:	693a      	ldr	r2, [r7, #16]
 80024bc:	4013      	ands	r3, r2
 80024be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d003      	beq.n	80024d4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80024cc:	693a      	ldr	r2, [r7, #16]
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	4313      	orrs	r3, r2
 80024d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80024d4:	4a12      	ldr	r2, [pc, #72]	@ (8002520 <HAL_GPIO_Init+0x350>)
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	3301      	adds	r3, #1
 80024de:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	681a      	ldr	r2, [r3, #0]
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	fa22 f303 	lsr.w	r3, r2, r3
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	f47f ae78 	bne.w	80021e0 <HAL_GPIO_Init+0x10>
  }
}
 80024f0:	bf00      	nop
 80024f2:	bf00      	nop
 80024f4:	371c      	adds	r7, #28
 80024f6:	46bd      	mov	sp, r7
 80024f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fc:	4770      	bx	lr
 80024fe:	bf00      	nop
 8002500:	40021000 	.word	0x40021000
 8002504:	40010000 	.word	0x40010000
 8002508:	48000400 	.word	0x48000400
 800250c:	48000800 	.word	0x48000800
 8002510:	48000c00 	.word	0x48000c00
 8002514:	48001000 	.word	0x48001000
 8002518:	48001400 	.word	0x48001400
 800251c:	48001800 	.word	0x48001800
 8002520:	40010400 	.word	0x40010400

08002524 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002524:	b480      	push	{r7}
 8002526:	b083      	sub	sp, #12
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
 800252c:	460b      	mov	r3, r1
 800252e:	807b      	strh	r3, [r7, #2]
 8002530:	4613      	mov	r3, r2
 8002532:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002534:	787b      	ldrb	r3, [r7, #1]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d003      	beq.n	8002542 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800253a:	887a      	ldrh	r2, [r7, #2]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002540:	e002      	b.n	8002548 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002542:	887a      	ldrh	r2, [r7, #2]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002548:	bf00      	nop
 800254a:	370c      	adds	r7, #12
 800254c:	46bd      	mov	sp, r7
 800254e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002552:	4770      	bx	lr

08002554 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002554:	b480      	push	{r7}
 8002556:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002558:	4b04      	ldr	r3, [pc, #16]	@ (800256c <HAL_PWREx_GetVoltageRange+0x18>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002560:	4618      	mov	r0, r3
 8002562:	46bd      	mov	sp, r7
 8002564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002568:	4770      	bx	lr
 800256a:	bf00      	nop
 800256c:	40007000 	.word	0x40007000

08002570 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002570:	b480      	push	{r7}
 8002572:	b085      	sub	sp, #20
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800257e:	d130      	bne.n	80025e2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002580:	4b23      	ldr	r3, [pc, #140]	@ (8002610 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002588:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800258c:	d038      	beq.n	8002600 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800258e:	4b20      	ldr	r3, [pc, #128]	@ (8002610 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002596:	4a1e      	ldr	r2, [pc, #120]	@ (8002610 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002598:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800259c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800259e:	4b1d      	ldr	r3, [pc, #116]	@ (8002614 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	2232      	movs	r2, #50	@ 0x32
 80025a4:	fb02 f303 	mul.w	r3, r2, r3
 80025a8:	4a1b      	ldr	r2, [pc, #108]	@ (8002618 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80025aa:	fba2 2303 	umull	r2, r3, r2, r3
 80025ae:	0c9b      	lsrs	r3, r3, #18
 80025b0:	3301      	adds	r3, #1
 80025b2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80025b4:	e002      	b.n	80025bc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	3b01      	subs	r3, #1
 80025ba:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80025bc:	4b14      	ldr	r3, [pc, #80]	@ (8002610 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025be:	695b      	ldr	r3, [r3, #20]
 80025c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80025c8:	d102      	bne.n	80025d0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d1f2      	bne.n	80025b6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80025d0:	4b0f      	ldr	r3, [pc, #60]	@ (8002610 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025d2:	695b      	ldr	r3, [r3, #20]
 80025d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80025dc:	d110      	bne.n	8002600 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80025de:	2303      	movs	r3, #3
 80025e0:	e00f      	b.n	8002602 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80025e2:	4b0b      	ldr	r3, [pc, #44]	@ (8002610 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80025ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80025ee:	d007      	beq.n	8002600 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80025f0:	4b07      	ldr	r3, [pc, #28]	@ (8002610 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80025f8:	4a05      	ldr	r2, [pc, #20]	@ (8002610 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025fa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80025fe:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002600:	2300      	movs	r3, #0
}
 8002602:	4618      	mov	r0, r3
 8002604:	3714      	adds	r7, #20
 8002606:	46bd      	mov	sp, r7
 8002608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260c:	4770      	bx	lr
 800260e:	bf00      	nop
 8002610:	40007000 	.word	0x40007000
 8002614:	20000000 	.word	0x20000000
 8002618:	431bde83 	.word	0x431bde83

0800261c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b088      	sub	sp, #32
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d101      	bne.n	800262e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	e3ca      	b.n	8002dc4 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800262e:	4b97      	ldr	r3, [pc, #604]	@ (800288c <HAL_RCC_OscConfig+0x270>)
 8002630:	689b      	ldr	r3, [r3, #8]
 8002632:	f003 030c 	and.w	r3, r3, #12
 8002636:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002638:	4b94      	ldr	r3, [pc, #592]	@ (800288c <HAL_RCC_OscConfig+0x270>)
 800263a:	68db      	ldr	r3, [r3, #12]
 800263c:	f003 0303 	and.w	r3, r3, #3
 8002640:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f003 0310 	and.w	r3, r3, #16
 800264a:	2b00      	cmp	r3, #0
 800264c:	f000 80e4 	beq.w	8002818 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002650:	69bb      	ldr	r3, [r7, #24]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d007      	beq.n	8002666 <HAL_RCC_OscConfig+0x4a>
 8002656:	69bb      	ldr	r3, [r7, #24]
 8002658:	2b0c      	cmp	r3, #12
 800265a:	f040 808b 	bne.w	8002774 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800265e:	697b      	ldr	r3, [r7, #20]
 8002660:	2b01      	cmp	r3, #1
 8002662:	f040 8087 	bne.w	8002774 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002666:	4b89      	ldr	r3, [pc, #548]	@ (800288c <HAL_RCC_OscConfig+0x270>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 0302 	and.w	r3, r3, #2
 800266e:	2b00      	cmp	r3, #0
 8002670:	d005      	beq.n	800267e <HAL_RCC_OscConfig+0x62>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	699b      	ldr	r3, [r3, #24]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d101      	bne.n	800267e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	e3a2      	b.n	8002dc4 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6a1a      	ldr	r2, [r3, #32]
 8002682:	4b82      	ldr	r3, [pc, #520]	@ (800288c <HAL_RCC_OscConfig+0x270>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 0308 	and.w	r3, r3, #8
 800268a:	2b00      	cmp	r3, #0
 800268c:	d004      	beq.n	8002698 <HAL_RCC_OscConfig+0x7c>
 800268e:	4b7f      	ldr	r3, [pc, #508]	@ (800288c <HAL_RCC_OscConfig+0x270>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002696:	e005      	b.n	80026a4 <HAL_RCC_OscConfig+0x88>
 8002698:	4b7c      	ldr	r3, [pc, #496]	@ (800288c <HAL_RCC_OscConfig+0x270>)
 800269a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800269e:	091b      	lsrs	r3, r3, #4
 80026a0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d223      	bcs.n	80026f0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6a1b      	ldr	r3, [r3, #32]
 80026ac:	4618      	mov	r0, r3
 80026ae:	f000 fd55 	bl	800315c <RCC_SetFlashLatencyFromMSIRange>
 80026b2:	4603      	mov	r3, r0
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d001      	beq.n	80026bc <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	e383      	b.n	8002dc4 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80026bc:	4b73      	ldr	r3, [pc, #460]	@ (800288c <HAL_RCC_OscConfig+0x270>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a72      	ldr	r2, [pc, #456]	@ (800288c <HAL_RCC_OscConfig+0x270>)
 80026c2:	f043 0308 	orr.w	r3, r3, #8
 80026c6:	6013      	str	r3, [r2, #0]
 80026c8:	4b70      	ldr	r3, [pc, #448]	@ (800288c <HAL_RCC_OscConfig+0x270>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6a1b      	ldr	r3, [r3, #32]
 80026d4:	496d      	ldr	r1, [pc, #436]	@ (800288c <HAL_RCC_OscConfig+0x270>)
 80026d6:	4313      	orrs	r3, r2
 80026d8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80026da:	4b6c      	ldr	r3, [pc, #432]	@ (800288c <HAL_RCC_OscConfig+0x270>)
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	69db      	ldr	r3, [r3, #28]
 80026e6:	021b      	lsls	r3, r3, #8
 80026e8:	4968      	ldr	r1, [pc, #416]	@ (800288c <HAL_RCC_OscConfig+0x270>)
 80026ea:	4313      	orrs	r3, r2
 80026ec:	604b      	str	r3, [r1, #4]
 80026ee:	e025      	b.n	800273c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80026f0:	4b66      	ldr	r3, [pc, #408]	@ (800288c <HAL_RCC_OscConfig+0x270>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a65      	ldr	r2, [pc, #404]	@ (800288c <HAL_RCC_OscConfig+0x270>)
 80026f6:	f043 0308 	orr.w	r3, r3, #8
 80026fa:	6013      	str	r3, [r2, #0]
 80026fc:	4b63      	ldr	r3, [pc, #396]	@ (800288c <HAL_RCC_OscConfig+0x270>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6a1b      	ldr	r3, [r3, #32]
 8002708:	4960      	ldr	r1, [pc, #384]	@ (800288c <HAL_RCC_OscConfig+0x270>)
 800270a:	4313      	orrs	r3, r2
 800270c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800270e:	4b5f      	ldr	r3, [pc, #380]	@ (800288c <HAL_RCC_OscConfig+0x270>)
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	69db      	ldr	r3, [r3, #28]
 800271a:	021b      	lsls	r3, r3, #8
 800271c:	495b      	ldr	r1, [pc, #364]	@ (800288c <HAL_RCC_OscConfig+0x270>)
 800271e:	4313      	orrs	r3, r2
 8002720:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002722:	69bb      	ldr	r3, [r7, #24]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d109      	bne.n	800273c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6a1b      	ldr	r3, [r3, #32]
 800272c:	4618      	mov	r0, r3
 800272e:	f000 fd15 	bl	800315c <RCC_SetFlashLatencyFromMSIRange>
 8002732:	4603      	mov	r3, r0
 8002734:	2b00      	cmp	r3, #0
 8002736:	d001      	beq.n	800273c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002738:	2301      	movs	r3, #1
 800273a:	e343      	b.n	8002dc4 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800273c:	f000 fc4a 	bl	8002fd4 <HAL_RCC_GetSysClockFreq>
 8002740:	4602      	mov	r2, r0
 8002742:	4b52      	ldr	r3, [pc, #328]	@ (800288c <HAL_RCC_OscConfig+0x270>)
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	091b      	lsrs	r3, r3, #4
 8002748:	f003 030f 	and.w	r3, r3, #15
 800274c:	4950      	ldr	r1, [pc, #320]	@ (8002890 <HAL_RCC_OscConfig+0x274>)
 800274e:	5ccb      	ldrb	r3, [r1, r3]
 8002750:	f003 031f 	and.w	r3, r3, #31
 8002754:	fa22 f303 	lsr.w	r3, r2, r3
 8002758:	4a4e      	ldr	r2, [pc, #312]	@ (8002894 <HAL_RCC_OscConfig+0x278>)
 800275a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800275c:	4b4e      	ldr	r3, [pc, #312]	@ (8002898 <HAL_RCC_OscConfig+0x27c>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4618      	mov	r0, r3
 8002762:	f7fe f9ad 	bl	8000ac0 <HAL_InitTick>
 8002766:	4603      	mov	r3, r0
 8002768:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800276a:	7bfb      	ldrb	r3, [r7, #15]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d052      	beq.n	8002816 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002770:	7bfb      	ldrb	r3, [r7, #15]
 8002772:	e327      	b.n	8002dc4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	699b      	ldr	r3, [r3, #24]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d032      	beq.n	80027e2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800277c:	4b43      	ldr	r3, [pc, #268]	@ (800288c <HAL_RCC_OscConfig+0x270>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a42      	ldr	r2, [pc, #264]	@ (800288c <HAL_RCC_OscConfig+0x270>)
 8002782:	f043 0301 	orr.w	r3, r3, #1
 8002786:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002788:	f7fe f9ea 	bl	8000b60 <HAL_GetTick>
 800278c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800278e:	e008      	b.n	80027a2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002790:	f7fe f9e6 	bl	8000b60 <HAL_GetTick>
 8002794:	4602      	mov	r2, r0
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	1ad3      	subs	r3, r2, r3
 800279a:	2b02      	cmp	r3, #2
 800279c:	d901      	bls.n	80027a2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800279e:	2303      	movs	r3, #3
 80027a0:	e310      	b.n	8002dc4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80027a2:	4b3a      	ldr	r3, [pc, #232]	@ (800288c <HAL_RCC_OscConfig+0x270>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f003 0302 	and.w	r3, r3, #2
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d0f0      	beq.n	8002790 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80027ae:	4b37      	ldr	r3, [pc, #220]	@ (800288c <HAL_RCC_OscConfig+0x270>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a36      	ldr	r2, [pc, #216]	@ (800288c <HAL_RCC_OscConfig+0x270>)
 80027b4:	f043 0308 	orr.w	r3, r3, #8
 80027b8:	6013      	str	r3, [r2, #0]
 80027ba:	4b34      	ldr	r3, [pc, #208]	@ (800288c <HAL_RCC_OscConfig+0x270>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6a1b      	ldr	r3, [r3, #32]
 80027c6:	4931      	ldr	r1, [pc, #196]	@ (800288c <HAL_RCC_OscConfig+0x270>)
 80027c8:	4313      	orrs	r3, r2
 80027ca:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80027cc:	4b2f      	ldr	r3, [pc, #188]	@ (800288c <HAL_RCC_OscConfig+0x270>)
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	69db      	ldr	r3, [r3, #28]
 80027d8:	021b      	lsls	r3, r3, #8
 80027da:	492c      	ldr	r1, [pc, #176]	@ (800288c <HAL_RCC_OscConfig+0x270>)
 80027dc:	4313      	orrs	r3, r2
 80027de:	604b      	str	r3, [r1, #4]
 80027e0:	e01a      	b.n	8002818 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80027e2:	4b2a      	ldr	r3, [pc, #168]	@ (800288c <HAL_RCC_OscConfig+0x270>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a29      	ldr	r2, [pc, #164]	@ (800288c <HAL_RCC_OscConfig+0x270>)
 80027e8:	f023 0301 	bic.w	r3, r3, #1
 80027ec:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80027ee:	f7fe f9b7 	bl	8000b60 <HAL_GetTick>
 80027f2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80027f4:	e008      	b.n	8002808 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80027f6:	f7fe f9b3 	bl	8000b60 <HAL_GetTick>
 80027fa:	4602      	mov	r2, r0
 80027fc:	693b      	ldr	r3, [r7, #16]
 80027fe:	1ad3      	subs	r3, r2, r3
 8002800:	2b02      	cmp	r3, #2
 8002802:	d901      	bls.n	8002808 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002804:	2303      	movs	r3, #3
 8002806:	e2dd      	b.n	8002dc4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002808:	4b20      	ldr	r3, [pc, #128]	@ (800288c <HAL_RCC_OscConfig+0x270>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f003 0302 	and.w	r3, r3, #2
 8002810:	2b00      	cmp	r3, #0
 8002812:	d1f0      	bne.n	80027f6 <HAL_RCC_OscConfig+0x1da>
 8002814:	e000      	b.n	8002818 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002816:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f003 0301 	and.w	r3, r3, #1
 8002820:	2b00      	cmp	r3, #0
 8002822:	d074      	beq.n	800290e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002824:	69bb      	ldr	r3, [r7, #24]
 8002826:	2b08      	cmp	r3, #8
 8002828:	d005      	beq.n	8002836 <HAL_RCC_OscConfig+0x21a>
 800282a:	69bb      	ldr	r3, [r7, #24]
 800282c:	2b0c      	cmp	r3, #12
 800282e:	d10e      	bne.n	800284e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	2b03      	cmp	r3, #3
 8002834:	d10b      	bne.n	800284e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002836:	4b15      	ldr	r3, [pc, #84]	@ (800288c <HAL_RCC_OscConfig+0x270>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800283e:	2b00      	cmp	r3, #0
 8002840:	d064      	beq.n	800290c <HAL_RCC_OscConfig+0x2f0>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d160      	bne.n	800290c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	e2ba      	b.n	8002dc4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002856:	d106      	bne.n	8002866 <HAL_RCC_OscConfig+0x24a>
 8002858:	4b0c      	ldr	r3, [pc, #48]	@ (800288c <HAL_RCC_OscConfig+0x270>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a0b      	ldr	r2, [pc, #44]	@ (800288c <HAL_RCC_OscConfig+0x270>)
 800285e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002862:	6013      	str	r3, [r2, #0]
 8002864:	e026      	b.n	80028b4 <HAL_RCC_OscConfig+0x298>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800286e:	d115      	bne.n	800289c <HAL_RCC_OscConfig+0x280>
 8002870:	4b06      	ldr	r3, [pc, #24]	@ (800288c <HAL_RCC_OscConfig+0x270>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a05      	ldr	r2, [pc, #20]	@ (800288c <HAL_RCC_OscConfig+0x270>)
 8002876:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800287a:	6013      	str	r3, [r2, #0]
 800287c:	4b03      	ldr	r3, [pc, #12]	@ (800288c <HAL_RCC_OscConfig+0x270>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a02      	ldr	r2, [pc, #8]	@ (800288c <HAL_RCC_OscConfig+0x270>)
 8002882:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002886:	6013      	str	r3, [r2, #0]
 8002888:	e014      	b.n	80028b4 <HAL_RCC_OscConfig+0x298>
 800288a:	bf00      	nop
 800288c:	40021000 	.word	0x40021000
 8002890:	08004648 	.word	0x08004648
 8002894:	20000000 	.word	0x20000000
 8002898:	20000004 	.word	0x20000004
 800289c:	4ba0      	ldr	r3, [pc, #640]	@ (8002b20 <HAL_RCC_OscConfig+0x504>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a9f      	ldr	r2, [pc, #636]	@ (8002b20 <HAL_RCC_OscConfig+0x504>)
 80028a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80028a6:	6013      	str	r3, [r2, #0]
 80028a8:	4b9d      	ldr	r3, [pc, #628]	@ (8002b20 <HAL_RCC_OscConfig+0x504>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a9c      	ldr	r2, [pc, #624]	@ (8002b20 <HAL_RCC_OscConfig+0x504>)
 80028ae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80028b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d013      	beq.n	80028e4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028bc:	f7fe f950 	bl	8000b60 <HAL_GetTick>
 80028c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80028c2:	e008      	b.n	80028d6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028c4:	f7fe f94c 	bl	8000b60 <HAL_GetTick>
 80028c8:	4602      	mov	r2, r0
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	1ad3      	subs	r3, r2, r3
 80028ce:	2b64      	cmp	r3, #100	@ 0x64
 80028d0:	d901      	bls.n	80028d6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80028d2:	2303      	movs	r3, #3
 80028d4:	e276      	b.n	8002dc4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80028d6:	4b92      	ldr	r3, [pc, #584]	@ (8002b20 <HAL_RCC_OscConfig+0x504>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d0f0      	beq.n	80028c4 <HAL_RCC_OscConfig+0x2a8>
 80028e2:	e014      	b.n	800290e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028e4:	f7fe f93c 	bl	8000b60 <HAL_GetTick>
 80028e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80028ea:	e008      	b.n	80028fe <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028ec:	f7fe f938 	bl	8000b60 <HAL_GetTick>
 80028f0:	4602      	mov	r2, r0
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	1ad3      	subs	r3, r2, r3
 80028f6:	2b64      	cmp	r3, #100	@ 0x64
 80028f8:	d901      	bls.n	80028fe <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80028fa:	2303      	movs	r3, #3
 80028fc:	e262      	b.n	8002dc4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80028fe:	4b88      	ldr	r3, [pc, #544]	@ (8002b20 <HAL_RCC_OscConfig+0x504>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002906:	2b00      	cmp	r3, #0
 8002908:	d1f0      	bne.n	80028ec <HAL_RCC_OscConfig+0x2d0>
 800290a:	e000      	b.n	800290e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800290c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f003 0302 	and.w	r3, r3, #2
 8002916:	2b00      	cmp	r3, #0
 8002918:	d060      	beq.n	80029dc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800291a:	69bb      	ldr	r3, [r7, #24]
 800291c:	2b04      	cmp	r3, #4
 800291e:	d005      	beq.n	800292c <HAL_RCC_OscConfig+0x310>
 8002920:	69bb      	ldr	r3, [r7, #24]
 8002922:	2b0c      	cmp	r3, #12
 8002924:	d119      	bne.n	800295a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	2b02      	cmp	r3, #2
 800292a:	d116      	bne.n	800295a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800292c:	4b7c      	ldr	r3, [pc, #496]	@ (8002b20 <HAL_RCC_OscConfig+0x504>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002934:	2b00      	cmp	r3, #0
 8002936:	d005      	beq.n	8002944 <HAL_RCC_OscConfig+0x328>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	68db      	ldr	r3, [r3, #12]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d101      	bne.n	8002944 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	e23f      	b.n	8002dc4 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002944:	4b76      	ldr	r3, [pc, #472]	@ (8002b20 <HAL_RCC_OscConfig+0x504>)
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	691b      	ldr	r3, [r3, #16]
 8002950:	061b      	lsls	r3, r3, #24
 8002952:	4973      	ldr	r1, [pc, #460]	@ (8002b20 <HAL_RCC_OscConfig+0x504>)
 8002954:	4313      	orrs	r3, r2
 8002956:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002958:	e040      	b.n	80029dc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	68db      	ldr	r3, [r3, #12]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d023      	beq.n	80029aa <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002962:	4b6f      	ldr	r3, [pc, #444]	@ (8002b20 <HAL_RCC_OscConfig+0x504>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a6e      	ldr	r2, [pc, #440]	@ (8002b20 <HAL_RCC_OscConfig+0x504>)
 8002968:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800296c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800296e:	f7fe f8f7 	bl	8000b60 <HAL_GetTick>
 8002972:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002974:	e008      	b.n	8002988 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002976:	f7fe f8f3 	bl	8000b60 <HAL_GetTick>
 800297a:	4602      	mov	r2, r0
 800297c:	693b      	ldr	r3, [r7, #16]
 800297e:	1ad3      	subs	r3, r2, r3
 8002980:	2b02      	cmp	r3, #2
 8002982:	d901      	bls.n	8002988 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002984:	2303      	movs	r3, #3
 8002986:	e21d      	b.n	8002dc4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002988:	4b65      	ldr	r3, [pc, #404]	@ (8002b20 <HAL_RCC_OscConfig+0x504>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002990:	2b00      	cmp	r3, #0
 8002992:	d0f0      	beq.n	8002976 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002994:	4b62      	ldr	r3, [pc, #392]	@ (8002b20 <HAL_RCC_OscConfig+0x504>)
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	691b      	ldr	r3, [r3, #16]
 80029a0:	061b      	lsls	r3, r3, #24
 80029a2:	495f      	ldr	r1, [pc, #380]	@ (8002b20 <HAL_RCC_OscConfig+0x504>)
 80029a4:	4313      	orrs	r3, r2
 80029a6:	604b      	str	r3, [r1, #4]
 80029a8:	e018      	b.n	80029dc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029aa:	4b5d      	ldr	r3, [pc, #372]	@ (8002b20 <HAL_RCC_OscConfig+0x504>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a5c      	ldr	r2, [pc, #368]	@ (8002b20 <HAL_RCC_OscConfig+0x504>)
 80029b0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80029b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029b6:	f7fe f8d3 	bl	8000b60 <HAL_GetTick>
 80029ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80029bc:	e008      	b.n	80029d0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029be:	f7fe f8cf 	bl	8000b60 <HAL_GetTick>
 80029c2:	4602      	mov	r2, r0
 80029c4:	693b      	ldr	r3, [r7, #16]
 80029c6:	1ad3      	subs	r3, r2, r3
 80029c8:	2b02      	cmp	r3, #2
 80029ca:	d901      	bls.n	80029d0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80029cc:	2303      	movs	r3, #3
 80029ce:	e1f9      	b.n	8002dc4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80029d0:	4b53      	ldr	r3, [pc, #332]	@ (8002b20 <HAL_RCC_OscConfig+0x504>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d1f0      	bne.n	80029be <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f003 0308 	and.w	r3, r3, #8
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d03c      	beq.n	8002a62 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	695b      	ldr	r3, [r3, #20]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d01c      	beq.n	8002a2a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029f0:	4b4b      	ldr	r3, [pc, #300]	@ (8002b20 <HAL_RCC_OscConfig+0x504>)
 80029f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80029f6:	4a4a      	ldr	r2, [pc, #296]	@ (8002b20 <HAL_RCC_OscConfig+0x504>)
 80029f8:	f043 0301 	orr.w	r3, r3, #1
 80029fc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a00:	f7fe f8ae 	bl	8000b60 <HAL_GetTick>
 8002a04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002a06:	e008      	b.n	8002a1a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a08:	f7fe f8aa 	bl	8000b60 <HAL_GetTick>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	1ad3      	subs	r3, r2, r3
 8002a12:	2b02      	cmp	r3, #2
 8002a14:	d901      	bls.n	8002a1a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002a16:	2303      	movs	r3, #3
 8002a18:	e1d4      	b.n	8002dc4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002a1a:	4b41      	ldr	r3, [pc, #260]	@ (8002b20 <HAL_RCC_OscConfig+0x504>)
 8002a1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a20:	f003 0302 	and.w	r3, r3, #2
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d0ef      	beq.n	8002a08 <HAL_RCC_OscConfig+0x3ec>
 8002a28:	e01b      	b.n	8002a62 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a2a:	4b3d      	ldr	r3, [pc, #244]	@ (8002b20 <HAL_RCC_OscConfig+0x504>)
 8002a2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a30:	4a3b      	ldr	r2, [pc, #236]	@ (8002b20 <HAL_RCC_OscConfig+0x504>)
 8002a32:	f023 0301 	bic.w	r3, r3, #1
 8002a36:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a3a:	f7fe f891 	bl	8000b60 <HAL_GetTick>
 8002a3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002a40:	e008      	b.n	8002a54 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a42:	f7fe f88d 	bl	8000b60 <HAL_GetTick>
 8002a46:	4602      	mov	r2, r0
 8002a48:	693b      	ldr	r3, [r7, #16]
 8002a4a:	1ad3      	subs	r3, r2, r3
 8002a4c:	2b02      	cmp	r3, #2
 8002a4e:	d901      	bls.n	8002a54 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002a50:	2303      	movs	r3, #3
 8002a52:	e1b7      	b.n	8002dc4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002a54:	4b32      	ldr	r3, [pc, #200]	@ (8002b20 <HAL_RCC_OscConfig+0x504>)
 8002a56:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a5a:	f003 0302 	and.w	r3, r3, #2
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d1ef      	bne.n	8002a42 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f003 0304 	and.w	r3, r3, #4
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	f000 80a6 	beq.w	8002bbc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a70:	2300      	movs	r3, #0
 8002a72:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002a74:	4b2a      	ldr	r3, [pc, #168]	@ (8002b20 <HAL_RCC_OscConfig+0x504>)
 8002a76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a78:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d10d      	bne.n	8002a9c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a80:	4b27      	ldr	r3, [pc, #156]	@ (8002b20 <HAL_RCC_OscConfig+0x504>)
 8002a82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a84:	4a26      	ldr	r2, [pc, #152]	@ (8002b20 <HAL_RCC_OscConfig+0x504>)
 8002a86:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a8a:	6593      	str	r3, [r2, #88]	@ 0x58
 8002a8c:	4b24      	ldr	r3, [pc, #144]	@ (8002b20 <HAL_RCC_OscConfig+0x504>)
 8002a8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a90:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a94:	60bb      	str	r3, [r7, #8]
 8002a96:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a9c:	4b21      	ldr	r3, [pc, #132]	@ (8002b24 <HAL_RCC_OscConfig+0x508>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d118      	bne.n	8002ada <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002aa8:	4b1e      	ldr	r3, [pc, #120]	@ (8002b24 <HAL_RCC_OscConfig+0x508>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a1d      	ldr	r2, [pc, #116]	@ (8002b24 <HAL_RCC_OscConfig+0x508>)
 8002aae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ab2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ab4:	f7fe f854 	bl	8000b60 <HAL_GetTick>
 8002ab8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002aba:	e008      	b.n	8002ace <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002abc:	f7fe f850 	bl	8000b60 <HAL_GetTick>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	1ad3      	subs	r3, r2, r3
 8002ac6:	2b02      	cmp	r3, #2
 8002ac8:	d901      	bls.n	8002ace <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002aca:	2303      	movs	r3, #3
 8002acc:	e17a      	b.n	8002dc4 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ace:	4b15      	ldr	r3, [pc, #84]	@ (8002b24 <HAL_RCC_OscConfig+0x508>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d0f0      	beq.n	8002abc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	2b01      	cmp	r3, #1
 8002ae0:	d108      	bne.n	8002af4 <HAL_RCC_OscConfig+0x4d8>
 8002ae2:	4b0f      	ldr	r3, [pc, #60]	@ (8002b20 <HAL_RCC_OscConfig+0x504>)
 8002ae4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ae8:	4a0d      	ldr	r2, [pc, #52]	@ (8002b20 <HAL_RCC_OscConfig+0x504>)
 8002aea:	f043 0301 	orr.w	r3, r3, #1
 8002aee:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002af2:	e029      	b.n	8002b48 <HAL_RCC_OscConfig+0x52c>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	2b05      	cmp	r3, #5
 8002afa:	d115      	bne.n	8002b28 <HAL_RCC_OscConfig+0x50c>
 8002afc:	4b08      	ldr	r3, [pc, #32]	@ (8002b20 <HAL_RCC_OscConfig+0x504>)
 8002afe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b02:	4a07      	ldr	r2, [pc, #28]	@ (8002b20 <HAL_RCC_OscConfig+0x504>)
 8002b04:	f043 0304 	orr.w	r3, r3, #4
 8002b08:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002b0c:	4b04      	ldr	r3, [pc, #16]	@ (8002b20 <HAL_RCC_OscConfig+0x504>)
 8002b0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b12:	4a03      	ldr	r2, [pc, #12]	@ (8002b20 <HAL_RCC_OscConfig+0x504>)
 8002b14:	f043 0301 	orr.w	r3, r3, #1
 8002b18:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002b1c:	e014      	b.n	8002b48 <HAL_RCC_OscConfig+0x52c>
 8002b1e:	bf00      	nop
 8002b20:	40021000 	.word	0x40021000
 8002b24:	40007000 	.word	0x40007000
 8002b28:	4b9c      	ldr	r3, [pc, #624]	@ (8002d9c <HAL_RCC_OscConfig+0x780>)
 8002b2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b2e:	4a9b      	ldr	r2, [pc, #620]	@ (8002d9c <HAL_RCC_OscConfig+0x780>)
 8002b30:	f023 0301 	bic.w	r3, r3, #1
 8002b34:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002b38:	4b98      	ldr	r3, [pc, #608]	@ (8002d9c <HAL_RCC_OscConfig+0x780>)
 8002b3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b3e:	4a97      	ldr	r2, [pc, #604]	@ (8002d9c <HAL_RCC_OscConfig+0x780>)
 8002b40:	f023 0304 	bic.w	r3, r3, #4
 8002b44:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d016      	beq.n	8002b7e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b50:	f7fe f806 	bl	8000b60 <HAL_GetTick>
 8002b54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b56:	e00a      	b.n	8002b6e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b58:	f7fe f802 	bl	8000b60 <HAL_GetTick>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	1ad3      	subs	r3, r2, r3
 8002b62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d901      	bls.n	8002b6e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002b6a:	2303      	movs	r3, #3
 8002b6c:	e12a      	b.n	8002dc4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b6e:	4b8b      	ldr	r3, [pc, #556]	@ (8002d9c <HAL_RCC_OscConfig+0x780>)
 8002b70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b74:	f003 0302 	and.w	r3, r3, #2
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d0ed      	beq.n	8002b58 <HAL_RCC_OscConfig+0x53c>
 8002b7c:	e015      	b.n	8002baa <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b7e:	f7fd ffef 	bl	8000b60 <HAL_GetTick>
 8002b82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b84:	e00a      	b.n	8002b9c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b86:	f7fd ffeb 	bl	8000b60 <HAL_GetTick>
 8002b8a:	4602      	mov	r2, r0
 8002b8c:	693b      	ldr	r3, [r7, #16]
 8002b8e:	1ad3      	subs	r3, r2, r3
 8002b90:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d901      	bls.n	8002b9c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002b98:	2303      	movs	r3, #3
 8002b9a:	e113      	b.n	8002dc4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b9c:	4b7f      	ldr	r3, [pc, #508]	@ (8002d9c <HAL_RCC_OscConfig+0x780>)
 8002b9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ba2:	f003 0302 	and.w	r3, r3, #2
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d1ed      	bne.n	8002b86 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002baa:	7ffb      	ldrb	r3, [r7, #31]
 8002bac:	2b01      	cmp	r3, #1
 8002bae:	d105      	bne.n	8002bbc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bb0:	4b7a      	ldr	r3, [pc, #488]	@ (8002d9c <HAL_RCC_OscConfig+0x780>)
 8002bb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bb4:	4a79      	ldr	r2, [pc, #484]	@ (8002d9c <HAL_RCC_OscConfig+0x780>)
 8002bb6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002bba:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	f000 80fe 	beq.w	8002dc2 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bca:	2b02      	cmp	r3, #2
 8002bcc:	f040 80d0 	bne.w	8002d70 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002bd0:	4b72      	ldr	r3, [pc, #456]	@ (8002d9c <HAL_RCC_OscConfig+0x780>)
 8002bd2:	68db      	ldr	r3, [r3, #12]
 8002bd4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	f003 0203 	and.w	r2, r3, #3
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002be0:	429a      	cmp	r2, r3
 8002be2:	d130      	bne.n	8002c46 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bee:	3b01      	subs	r3, #1
 8002bf0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bf2:	429a      	cmp	r2, r3
 8002bf4:	d127      	bne.n	8002c46 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c00:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002c02:	429a      	cmp	r2, r3
 8002c04:	d11f      	bne.n	8002c46 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c0c:	687a      	ldr	r2, [r7, #4]
 8002c0e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002c10:	2a07      	cmp	r2, #7
 8002c12:	bf14      	ite	ne
 8002c14:	2201      	movne	r2, #1
 8002c16:	2200      	moveq	r2, #0
 8002c18:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d113      	bne.n	8002c46 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c28:	085b      	lsrs	r3, r3, #1
 8002c2a:	3b01      	subs	r3, #1
 8002c2c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002c2e:	429a      	cmp	r2, r3
 8002c30:	d109      	bne.n	8002c46 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c3c:	085b      	lsrs	r3, r3, #1
 8002c3e:	3b01      	subs	r3, #1
 8002c40:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c42:	429a      	cmp	r2, r3
 8002c44:	d06e      	beq.n	8002d24 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002c46:	69bb      	ldr	r3, [r7, #24]
 8002c48:	2b0c      	cmp	r3, #12
 8002c4a:	d069      	beq.n	8002d20 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002c4c:	4b53      	ldr	r3, [pc, #332]	@ (8002d9c <HAL_RCC_OscConfig+0x780>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d105      	bne.n	8002c64 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002c58:	4b50      	ldr	r3, [pc, #320]	@ (8002d9c <HAL_RCC_OscConfig+0x780>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d001      	beq.n	8002c68 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002c64:	2301      	movs	r3, #1
 8002c66:	e0ad      	b.n	8002dc4 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002c68:	4b4c      	ldr	r3, [pc, #304]	@ (8002d9c <HAL_RCC_OscConfig+0x780>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a4b      	ldr	r2, [pc, #300]	@ (8002d9c <HAL_RCC_OscConfig+0x780>)
 8002c6e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002c72:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002c74:	f7fd ff74 	bl	8000b60 <HAL_GetTick>
 8002c78:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c7a:	e008      	b.n	8002c8e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c7c:	f7fd ff70 	bl	8000b60 <HAL_GetTick>
 8002c80:	4602      	mov	r2, r0
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	1ad3      	subs	r3, r2, r3
 8002c86:	2b02      	cmp	r3, #2
 8002c88:	d901      	bls.n	8002c8e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002c8a:	2303      	movs	r3, #3
 8002c8c:	e09a      	b.n	8002dc4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c8e:	4b43      	ldr	r3, [pc, #268]	@ (8002d9c <HAL_RCC_OscConfig+0x780>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d1f0      	bne.n	8002c7c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c9a:	4b40      	ldr	r3, [pc, #256]	@ (8002d9c <HAL_RCC_OscConfig+0x780>)
 8002c9c:	68da      	ldr	r2, [r3, #12]
 8002c9e:	4b40      	ldr	r3, [pc, #256]	@ (8002da0 <HAL_RCC_OscConfig+0x784>)
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	687a      	ldr	r2, [r7, #4]
 8002ca4:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002ca6:	687a      	ldr	r2, [r7, #4]
 8002ca8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002caa:	3a01      	subs	r2, #1
 8002cac:	0112      	lsls	r2, r2, #4
 8002cae:	4311      	orrs	r1, r2
 8002cb0:	687a      	ldr	r2, [r7, #4]
 8002cb2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002cb4:	0212      	lsls	r2, r2, #8
 8002cb6:	4311      	orrs	r1, r2
 8002cb8:	687a      	ldr	r2, [r7, #4]
 8002cba:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002cbc:	0852      	lsrs	r2, r2, #1
 8002cbe:	3a01      	subs	r2, #1
 8002cc0:	0552      	lsls	r2, r2, #21
 8002cc2:	4311      	orrs	r1, r2
 8002cc4:	687a      	ldr	r2, [r7, #4]
 8002cc6:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002cc8:	0852      	lsrs	r2, r2, #1
 8002cca:	3a01      	subs	r2, #1
 8002ccc:	0652      	lsls	r2, r2, #25
 8002cce:	4311      	orrs	r1, r2
 8002cd0:	687a      	ldr	r2, [r7, #4]
 8002cd2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002cd4:	0912      	lsrs	r2, r2, #4
 8002cd6:	0452      	lsls	r2, r2, #17
 8002cd8:	430a      	orrs	r2, r1
 8002cda:	4930      	ldr	r1, [pc, #192]	@ (8002d9c <HAL_RCC_OscConfig+0x780>)
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002ce0:	4b2e      	ldr	r3, [pc, #184]	@ (8002d9c <HAL_RCC_OscConfig+0x780>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a2d      	ldr	r2, [pc, #180]	@ (8002d9c <HAL_RCC_OscConfig+0x780>)
 8002ce6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002cea:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002cec:	4b2b      	ldr	r3, [pc, #172]	@ (8002d9c <HAL_RCC_OscConfig+0x780>)
 8002cee:	68db      	ldr	r3, [r3, #12]
 8002cf0:	4a2a      	ldr	r2, [pc, #168]	@ (8002d9c <HAL_RCC_OscConfig+0x780>)
 8002cf2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002cf6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002cf8:	f7fd ff32 	bl	8000b60 <HAL_GetTick>
 8002cfc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cfe:	e008      	b.n	8002d12 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d00:	f7fd ff2e 	bl	8000b60 <HAL_GetTick>
 8002d04:	4602      	mov	r2, r0
 8002d06:	693b      	ldr	r3, [r7, #16]
 8002d08:	1ad3      	subs	r3, r2, r3
 8002d0a:	2b02      	cmp	r3, #2
 8002d0c:	d901      	bls.n	8002d12 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002d0e:	2303      	movs	r3, #3
 8002d10:	e058      	b.n	8002dc4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d12:	4b22      	ldr	r3, [pc, #136]	@ (8002d9c <HAL_RCC_OscConfig+0x780>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d0f0      	beq.n	8002d00 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002d1e:	e050      	b.n	8002dc2 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002d20:	2301      	movs	r3, #1
 8002d22:	e04f      	b.n	8002dc4 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d24:	4b1d      	ldr	r3, [pc, #116]	@ (8002d9c <HAL_RCC_OscConfig+0x780>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d148      	bne.n	8002dc2 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002d30:	4b1a      	ldr	r3, [pc, #104]	@ (8002d9c <HAL_RCC_OscConfig+0x780>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a19      	ldr	r2, [pc, #100]	@ (8002d9c <HAL_RCC_OscConfig+0x780>)
 8002d36:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002d3a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002d3c:	4b17      	ldr	r3, [pc, #92]	@ (8002d9c <HAL_RCC_OscConfig+0x780>)
 8002d3e:	68db      	ldr	r3, [r3, #12]
 8002d40:	4a16      	ldr	r2, [pc, #88]	@ (8002d9c <HAL_RCC_OscConfig+0x780>)
 8002d42:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002d46:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002d48:	f7fd ff0a 	bl	8000b60 <HAL_GetTick>
 8002d4c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d4e:	e008      	b.n	8002d62 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d50:	f7fd ff06 	bl	8000b60 <HAL_GetTick>
 8002d54:	4602      	mov	r2, r0
 8002d56:	693b      	ldr	r3, [r7, #16]
 8002d58:	1ad3      	subs	r3, r2, r3
 8002d5a:	2b02      	cmp	r3, #2
 8002d5c:	d901      	bls.n	8002d62 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002d5e:	2303      	movs	r3, #3
 8002d60:	e030      	b.n	8002dc4 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d62:	4b0e      	ldr	r3, [pc, #56]	@ (8002d9c <HAL_RCC_OscConfig+0x780>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d0f0      	beq.n	8002d50 <HAL_RCC_OscConfig+0x734>
 8002d6e:	e028      	b.n	8002dc2 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002d70:	69bb      	ldr	r3, [r7, #24]
 8002d72:	2b0c      	cmp	r3, #12
 8002d74:	d023      	beq.n	8002dbe <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d76:	4b09      	ldr	r3, [pc, #36]	@ (8002d9c <HAL_RCC_OscConfig+0x780>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a08      	ldr	r2, [pc, #32]	@ (8002d9c <HAL_RCC_OscConfig+0x780>)
 8002d7c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002d80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d82:	f7fd feed 	bl	8000b60 <HAL_GetTick>
 8002d86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d88:	e00c      	b.n	8002da4 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d8a:	f7fd fee9 	bl	8000b60 <HAL_GetTick>
 8002d8e:	4602      	mov	r2, r0
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	1ad3      	subs	r3, r2, r3
 8002d94:	2b02      	cmp	r3, #2
 8002d96:	d905      	bls.n	8002da4 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002d98:	2303      	movs	r3, #3
 8002d9a:	e013      	b.n	8002dc4 <HAL_RCC_OscConfig+0x7a8>
 8002d9c:	40021000 	.word	0x40021000
 8002da0:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002da4:	4b09      	ldr	r3, [pc, #36]	@ (8002dcc <HAL_RCC_OscConfig+0x7b0>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d1ec      	bne.n	8002d8a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002db0:	4b06      	ldr	r3, [pc, #24]	@ (8002dcc <HAL_RCC_OscConfig+0x7b0>)
 8002db2:	68da      	ldr	r2, [r3, #12]
 8002db4:	4905      	ldr	r1, [pc, #20]	@ (8002dcc <HAL_RCC_OscConfig+0x7b0>)
 8002db6:	4b06      	ldr	r3, [pc, #24]	@ (8002dd0 <HAL_RCC_OscConfig+0x7b4>)
 8002db8:	4013      	ands	r3, r2
 8002dba:	60cb      	str	r3, [r1, #12]
 8002dbc:	e001      	b.n	8002dc2 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e000      	b.n	8002dc4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002dc2:	2300      	movs	r3, #0
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	3720      	adds	r7, #32
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}
 8002dcc:	40021000 	.word	0x40021000
 8002dd0:	feeefffc 	.word	0xfeeefffc

08002dd4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b084      	sub	sp, #16
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
 8002ddc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d101      	bne.n	8002de8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002de4:	2301      	movs	r3, #1
 8002de6:	e0e7      	b.n	8002fb8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002de8:	4b75      	ldr	r3, [pc, #468]	@ (8002fc0 <HAL_RCC_ClockConfig+0x1ec>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f003 0307 	and.w	r3, r3, #7
 8002df0:	683a      	ldr	r2, [r7, #0]
 8002df2:	429a      	cmp	r2, r3
 8002df4:	d910      	bls.n	8002e18 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002df6:	4b72      	ldr	r3, [pc, #456]	@ (8002fc0 <HAL_RCC_ClockConfig+0x1ec>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f023 0207 	bic.w	r2, r3, #7
 8002dfe:	4970      	ldr	r1, [pc, #448]	@ (8002fc0 <HAL_RCC_ClockConfig+0x1ec>)
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	4313      	orrs	r3, r2
 8002e04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e06:	4b6e      	ldr	r3, [pc, #440]	@ (8002fc0 <HAL_RCC_ClockConfig+0x1ec>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 0307 	and.w	r3, r3, #7
 8002e0e:	683a      	ldr	r2, [r7, #0]
 8002e10:	429a      	cmp	r2, r3
 8002e12:	d001      	beq.n	8002e18 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002e14:	2301      	movs	r3, #1
 8002e16:	e0cf      	b.n	8002fb8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f003 0302 	and.w	r3, r3, #2
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d010      	beq.n	8002e46 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	689a      	ldr	r2, [r3, #8]
 8002e28:	4b66      	ldr	r3, [pc, #408]	@ (8002fc4 <HAL_RCC_ClockConfig+0x1f0>)
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002e30:	429a      	cmp	r2, r3
 8002e32:	d908      	bls.n	8002e46 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e34:	4b63      	ldr	r3, [pc, #396]	@ (8002fc4 <HAL_RCC_ClockConfig+0x1f0>)
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	4960      	ldr	r1, [pc, #384]	@ (8002fc4 <HAL_RCC_ClockConfig+0x1f0>)
 8002e42:	4313      	orrs	r3, r2
 8002e44:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f003 0301 	and.w	r3, r3, #1
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d04c      	beq.n	8002eec <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	2b03      	cmp	r3, #3
 8002e58:	d107      	bne.n	8002e6a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e5a:	4b5a      	ldr	r3, [pc, #360]	@ (8002fc4 <HAL_RCC_ClockConfig+0x1f0>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d121      	bne.n	8002eaa <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	e0a6      	b.n	8002fb8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	2b02      	cmp	r3, #2
 8002e70:	d107      	bne.n	8002e82 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e72:	4b54      	ldr	r3, [pc, #336]	@ (8002fc4 <HAL_RCC_ClockConfig+0x1f0>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d115      	bne.n	8002eaa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e09a      	b.n	8002fb8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d107      	bne.n	8002e9a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e8a:	4b4e      	ldr	r3, [pc, #312]	@ (8002fc4 <HAL_RCC_ClockConfig+0x1f0>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f003 0302 	and.w	r3, r3, #2
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d109      	bne.n	8002eaa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
 8002e98:	e08e      	b.n	8002fb8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e9a:	4b4a      	ldr	r3, [pc, #296]	@ (8002fc4 <HAL_RCC_ClockConfig+0x1f0>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d101      	bne.n	8002eaa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e086      	b.n	8002fb8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002eaa:	4b46      	ldr	r3, [pc, #280]	@ (8002fc4 <HAL_RCC_ClockConfig+0x1f0>)
 8002eac:	689b      	ldr	r3, [r3, #8]
 8002eae:	f023 0203 	bic.w	r2, r3, #3
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	4943      	ldr	r1, [pc, #268]	@ (8002fc4 <HAL_RCC_ClockConfig+0x1f0>)
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ebc:	f7fd fe50 	bl	8000b60 <HAL_GetTick>
 8002ec0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ec2:	e00a      	b.n	8002eda <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ec4:	f7fd fe4c 	bl	8000b60 <HAL_GetTick>
 8002ec8:	4602      	mov	r2, r0
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	1ad3      	subs	r3, r2, r3
 8002ece:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d901      	bls.n	8002eda <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002ed6:	2303      	movs	r3, #3
 8002ed8:	e06e      	b.n	8002fb8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002eda:	4b3a      	ldr	r3, [pc, #232]	@ (8002fc4 <HAL_RCC_ClockConfig+0x1f0>)
 8002edc:	689b      	ldr	r3, [r3, #8]
 8002ede:	f003 020c 	and.w	r2, r3, #12
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	009b      	lsls	r3, r3, #2
 8002ee8:	429a      	cmp	r2, r3
 8002eea:	d1eb      	bne.n	8002ec4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f003 0302 	and.w	r3, r3, #2
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d010      	beq.n	8002f1a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	689a      	ldr	r2, [r3, #8]
 8002efc:	4b31      	ldr	r3, [pc, #196]	@ (8002fc4 <HAL_RCC_ClockConfig+0x1f0>)
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002f04:	429a      	cmp	r2, r3
 8002f06:	d208      	bcs.n	8002f1a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f08:	4b2e      	ldr	r3, [pc, #184]	@ (8002fc4 <HAL_RCC_ClockConfig+0x1f0>)
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	492b      	ldr	r1, [pc, #172]	@ (8002fc4 <HAL_RCC_ClockConfig+0x1f0>)
 8002f16:	4313      	orrs	r3, r2
 8002f18:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f1a:	4b29      	ldr	r3, [pc, #164]	@ (8002fc0 <HAL_RCC_ClockConfig+0x1ec>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f003 0307 	and.w	r3, r3, #7
 8002f22:	683a      	ldr	r2, [r7, #0]
 8002f24:	429a      	cmp	r2, r3
 8002f26:	d210      	bcs.n	8002f4a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f28:	4b25      	ldr	r3, [pc, #148]	@ (8002fc0 <HAL_RCC_ClockConfig+0x1ec>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f023 0207 	bic.w	r2, r3, #7
 8002f30:	4923      	ldr	r1, [pc, #140]	@ (8002fc0 <HAL_RCC_ClockConfig+0x1ec>)
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	4313      	orrs	r3, r2
 8002f36:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f38:	4b21      	ldr	r3, [pc, #132]	@ (8002fc0 <HAL_RCC_ClockConfig+0x1ec>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f003 0307 	and.w	r3, r3, #7
 8002f40:	683a      	ldr	r2, [r7, #0]
 8002f42:	429a      	cmp	r2, r3
 8002f44:	d001      	beq.n	8002f4a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	e036      	b.n	8002fb8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f003 0304 	and.w	r3, r3, #4
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d008      	beq.n	8002f68 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f56:	4b1b      	ldr	r3, [pc, #108]	@ (8002fc4 <HAL_RCC_ClockConfig+0x1f0>)
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	68db      	ldr	r3, [r3, #12]
 8002f62:	4918      	ldr	r1, [pc, #96]	@ (8002fc4 <HAL_RCC_ClockConfig+0x1f0>)
 8002f64:	4313      	orrs	r3, r2
 8002f66:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f003 0308 	and.w	r3, r3, #8
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d009      	beq.n	8002f88 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f74:	4b13      	ldr	r3, [pc, #76]	@ (8002fc4 <HAL_RCC_ClockConfig+0x1f0>)
 8002f76:	689b      	ldr	r3, [r3, #8]
 8002f78:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	691b      	ldr	r3, [r3, #16]
 8002f80:	00db      	lsls	r3, r3, #3
 8002f82:	4910      	ldr	r1, [pc, #64]	@ (8002fc4 <HAL_RCC_ClockConfig+0x1f0>)
 8002f84:	4313      	orrs	r3, r2
 8002f86:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002f88:	f000 f824 	bl	8002fd4 <HAL_RCC_GetSysClockFreq>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	4b0d      	ldr	r3, [pc, #52]	@ (8002fc4 <HAL_RCC_ClockConfig+0x1f0>)
 8002f90:	689b      	ldr	r3, [r3, #8]
 8002f92:	091b      	lsrs	r3, r3, #4
 8002f94:	f003 030f 	and.w	r3, r3, #15
 8002f98:	490b      	ldr	r1, [pc, #44]	@ (8002fc8 <HAL_RCC_ClockConfig+0x1f4>)
 8002f9a:	5ccb      	ldrb	r3, [r1, r3]
 8002f9c:	f003 031f 	and.w	r3, r3, #31
 8002fa0:	fa22 f303 	lsr.w	r3, r2, r3
 8002fa4:	4a09      	ldr	r2, [pc, #36]	@ (8002fcc <HAL_RCC_ClockConfig+0x1f8>)
 8002fa6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002fa8:	4b09      	ldr	r3, [pc, #36]	@ (8002fd0 <HAL_RCC_ClockConfig+0x1fc>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4618      	mov	r0, r3
 8002fae:	f7fd fd87 	bl	8000ac0 <HAL_InitTick>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	72fb      	strb	r3, [r7, #11]

  return status;
 8002fb6:	7afb      	ldrb	r3, [r7, #11]
}
 8002fb8:	4618      	mov	r0, r3
 8002fba:	3710      	adds	r7, #16
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}
 8002fc0:	40022000 	.word	0x40022000
 8002fc4:	40021000 	.word	0x40021000
 8002fc8:	08004648 	.word	0x08004648
 8002fcc:	20000000 	.word	0x20000000
 8002fd0:	20000004 	.word	0x20000004

08002fd4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b089      	sub	sp, #36	@ 0x24
 8002fd8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	61fb      	str	r3, [r7, #28]
 8002fde:	2300      	movs	r3, #0
 8002fe0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002fe2:	4b3e      	ldr	r3, [pc, #248]	@ (80030dc <HAL_RCC_GetSysClockFreq+0x108>)
 8002fe4:	689b      	ldr	r3, [r3, #8]
 8002fe6:	f003 030c 	and.w	r3, r3, #12
 8002fea:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002fec:	4b3b      	ldr	r3, [pc, #236]	@ (80030dc <HAL_RCC_GetSysClockFreq+0x108>)
 8002fee:	68db      	ldr	r3, [r3, #12]
 8002ff0:	f003 0303 	and.w	r3, r3, #3
 8002ff4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d005      	beq.n	8003008 <HAL_RCC_GetSysClockFreq+0x34>
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	2b0c      	cmp	r3, #12
 8003000:	d121      	bne.n	8003046 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2b01      	cmp	r3, #1
 8003006:	d11e      	bne.n	8003046 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003008:	4b34      	ldr	r3, [pc, #208]	@ (80030dc <HAL_RCC_GetSysClockFreq+0x108>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f003 0308 	and.w	r3, r3, #8
 8003010:	2b00      	cmp	r3, #0
 8003012:	d107      	bne.n	8003024 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003014:	4b31      	ldr	r3, [pc, #196]	@ (80030dc <HAL_RCC_GetSysClockFreq+0x108>)
 8003016:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800301a:	0a1b      	lsrs	r3, r3, #8
 800301c:	f003 030f 	and.w	r3, r3, #15
 8003020:	61fb      	str	r3, [r7, #28]
 8003022:	e005      	b.n	8003030 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003024:	4b2d      	ldr	r3, [pc, #180]	@ (80030dc <HAL_RCC_GetSysClockFreq+0x108>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	091b      	lsrs	r3, r3, #4
 800302a:	f003 030f 	and.w	r3, r3, #15
 800302e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003030:	4a2b      	ldr	r2, [pc, #172]	@ (80030e0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003032:	69fb      	ldr	r3, [r7, #28]
 8003034:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003038:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d10d      	bne.n	800305c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003040:	69fb      	ldr	r3, [r7, #28]
 8003042:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003044:	e00a      	b.n	800305c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	2b04      	cmp	r3, #4
 800304a:	d102      	bne.n	8003052 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800304c:	4b25      	ldr	r3, [pc, #148]	@ (80030e4 <HAL_RCC_GetSysClockFreq+0x110>)
 800304e:	61bb      	str	r3, [r7, #24]
 8003050:	e004      	b.n	800305c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	2b08      	cmp	r3, #8
 8003056:	d101      	bne.n	800305c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003058:	4b23      	ldr	r3, [pc, #140]	@ (80030e8 <HAL_RCC_GetSysClockFreq+0x114>)
 800305a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	2b0c      	cmp	r3, #12
 8003060:	d134      	bne.n	80030cc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003062:	4b1e      	ldr	r3, [pc, #120]	@ (80030dc <HAL_RCC_GetSysClockFreq+0x108>)
 8003064:	68db      	ldr	r3, [r3, #12]
 8003066:	f003 0303 	and.w	r3, r3, #3
 800306a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	2b02      	cmp	r3, #2
 8003070:	d003      	beq.n	800307a <HAL_RCC_GetSysClockFreq+0xa6>
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	2b03      	cmp	r3, #3
 8003076:	d003      	beq.n	8003080 <HAL_RCC_GetSysClockFreq+0xac>
 8003078:	e005      	b.n	8003086 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800307a:	4b1a      	ldr	r3, [pc, #104]	@ (80030e4 <HAL_RCC_GetSysClockFreq+0x110>)
 800307c:	617b      	str	r3, [r7, #20]
      break;
 800307e:	e005      	b.n	800308c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003080:	4b19      	ldr	r3, [pc, #100]	@ (80030e8 <HAL_RCC_GetSysClockFreq+0x114>)
 8003082:	617b      	str	r3, [r7, #20]
      break;
 8003084:	e002      	b.n	800308c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003086:	69fb      	ldr	r3, [r7, #28]
 8003088:	617b      	str	r3, [r7, #20]
      break;
 800308a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800308c:	4b13      	ldr	r3, [pc, #76]	@ (80030dc <HAL_RCC_GetSysClockFreq+0x108>)
 800308e:	68db      	ldr	r3, [r3, #12]
 8003090:	091b      	lsrs	r3, r3, #4
 8003092:	f003 0307 	and.w	r3, r3, #7
 8003096:	3301      	adds	r3, #1
 8003098:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800309a:	4b10      	ldr	r3, [pc, #64]	@ (80030dc <HAL_RCC_GetSysClockFreq+0x108>)
 800309c:	68db      	ldr	r3, [r3, #12]
 800309e:	0a1b      	lsrs	r3, r3, #8
 80030a0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80030a4:	697a      	ldr	r2, [r7, #20]
 80030a6:	fb03 f202 	mul.w	r2, r3, r2
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80030b0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80030b2:	4b0a      	ldr	r3, [pc, #40]	@ (80030dc <HAL_RCC_GetSysClockFreq+0x108>)
 80030b4:	68db      	ldr	r3, [r3, #12]
 80030b6:	0e5b      	lsrs	r3, r3, #25
 80030b8:	f003 0303 	and.w	r3, r3, #3
 80030bc:	3301      	adds	r3, #1
 80030be:	005b      	lsls	r3, r3, #1
 80030c0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80030c2:	697a      	ldr	r2, [r7, #20]
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80030ca:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80030cc:	69bb      	ldr	r3, [r7, #24]
}
 80030ce:	4618      	mov	r0, r3
 80030d0:	3724      	adds	r7, #36	@ 0x24
 80030d2:	46bd      	mov	sp, r7
 80030d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d8:	4770      	bx	lr
 80030da:	bf00      	nop
 80030dc:	40021000 	.word	0x40021000
 80030e0:	08004660 	.word	0x08004660
 80030e4:	00f42400 	.word	0x00f42400
 80030e8:	007a1200 	.word	0x007a1200

080030ec <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030ec:	b480      	push	{r7}
 80030ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030f0:	4b03      	ldr	r3, [pc, #12]	@ (8003100 <HAL_RCC_GetHCLKFreq+0x14>)
 80030f2:	681b      	ldr	r3, [r3, #0]
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	46bd      	mov	sp, r7
 80030f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fc:	4770      	bx	lr
 80030fe:	bf00      	nop
 8003100:	20000000 	.word	0x20000000

08003104 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003108:	f7ff fff0 	bl	80030ec <HAL_RCC_GetHCLKFreq>
 800310c:	4602      	mov	r2, r0
 800310e:	4b06      	ldr	r3, [pc, #24]	@ (8003128 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	0a1b      	lsrs	r3, r3, #8
 8003114:	f003 0307 	and.w	r3, r3, #7
 8003118:	4904      	ldr	r1, [pc, #16]	@ (800312c <HAL_RCC_GetPCLK1Freq+0x28>)
 800311a:	5ccb      	ldrb	r3, [r1, r3]
 800311c:	f003 031f 	and.w	r3, r3, #31
 8003120:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003124:	4618      	mov	r0, r3
 8003126:	bd80      	pop	{r7, pc}
 8003128:	40021000 	.word	0x40021000
 800312c:	08004658 	.word	0x08004658

08003130 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003134:	f7ff ffda 	bl	80030ec <HAL_RCC_GetHCLKFreq>
 8003138:	4602      	mov	r2, r0
 800313a:	4b06      	ldr	r3, [pc, #24]	@ (8003154 <HAL_RCC_GetPCLK2Freq+0x24>)
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	0adb      	lsrs	r3, r3, #11
 8003140:	f003 0307 	and.w	r3, r3, #7
 8003144:	4904      	ldr	r1, [pc, #16]	@ (8003158 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003146:	5ccb      	ldrb	r3, [r1, r3]
 8003148:	f003 031f 	and.w	r3, r3, #31
 800314c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003150:	4618      	mov	r0, r3
 8003152:	bd80      	pop	{r7, pc}
 8003154:	40021000 	.word	0x40021000
 8003158:	08004658 	.word	0x08004658

0800315c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b086      	sub	sp, #24
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003164:	2300      	movs	r3, #0
 8003166:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003168:	4b2a      	ldr	r3, [pc, #168]	@ (8003214 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800316a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800316c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003170:	2b00      	cmp	r3, #0
 8003172:	d003      	beq.n	800317c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003174:	f7ff f9ee 	bl	8002554 <HAL_PWREx_GetVoltageRange>
 8003178:	6178      	str	r0, [r7, #20]
 800317a:	e014      	b.n	80031a6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800317c:	4b25      	ldr	r3, [pc, #148]	@ (8003214 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800317e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003180:	4a24      	ldr	r2, [pc, #144]	@ (8003214 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003182:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003186:	6593      	str	r3, [r2, #88]	@ 0x58
 8003188:	4b22      	ldr	r3, [pc, #136]	@ (8003214 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800318a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800318c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003190:	60fb      	str	r3, [r7, #12]
 8003192:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003194:	f7ff f9de 	bl	8002554 <HAL_PWREx_GetVoltageRange>
 8003198:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800319a:	4b1e      	ldr	r3, [pc, #120]	@ (8003214 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800319c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800319e:	4a1d      	ldr	r2, [pc, #116]	@ (8003214 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80031a0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80031a4:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80031ac:	d10b      	bne.n	80031c6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2b80      	cmp	r3, #128	@ 0x80
 80031b2:	d919      	bls.n	80031e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2ba0      	cmp	r3, #160	@ 0xa0
 80031b8:	d902      	bls.n	80031c0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80031ba:	2302      	movs	r3, #2
 80031bc:	613b      	str	r3, [r7, #16]
 80031be:	e013      	b.n	80031e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80031c0:	2301      	movs	r3, #1
 80031c2:	613b      	str	r3, [r7, #16]
 80031c4:	e010      	b.n	80031e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2b80      	cmp	r3, #128	@ 0x80
 80031ca:	d902      	bls.n	80031d2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80031cc:	2303      	movs	r3, #3
 80031ce:	613b      	str	r3, [r7, #16]
 80031d0:	e00a      	b.n	80031e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2b80      	cmp	r3, #128	@ 0x80
 80031d6:	d102      	bne.n	80031de <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80031d8:	2302      	movs	r3, #2
 80031da:	613b      	str	r3, [r7, #16]
 80031dc:	e004      	b.n	80031e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2b70      	cmp	r3, #112	@ 0x70
 80031e2:	d101      	bne.n	80031e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80031e4:	2301      	movs	r3, #1
 80031e6:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80031e8:	4b0b      	ldr	r3, [pc, #44]	@ (8003218 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f023 0207 	bic.w	r2, r3, #7
 80031f0:	4909      	ldr	r1, [pc, #36]	@ (8003218 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	4313      	orrs	r3, r2
 80031f6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80031f8:	4b07      	ldr	r3, [pc, #28]	@ (8003218 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f003 0307 	and.w	r3, r3, #7
 8003200:	693a      	ldr	r2, [r7, #16]
 8003202:	429a      	cmp	r2, r3
 8003204:	d001      	beq.n	800320a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	e000      	b.n	800320c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800320a:	2300      	movs	r3, #0
}
 800320c:	4618      	mov	r0, r3
 800320e:	3718      	adds	r7, #24
 8003210:	46bd      	mov	sp, r7
 8003212:	bd80      	pop	{r7, pc}
 8003214:	40021000 	.word	0x40021000
 8003218:	40022000 	.word	0x40022000

0800321c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b086      	sub	sp, #24
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003224:	2300      	movs	r3, #0
 8003226:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003228:	2300      	movs	r3, #0
 800322a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003234:	2b00      	cmp	r3, #0
 8003236:	d041      	beq.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800323c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003240:	d02a      	beq.n	8003298 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003242:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003246:	d824      	bhi.n	8003292 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003248:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800324c:	d008      	beq.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800324e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003252:	d81e      	bhi.n	8003292 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003254:	2b00      	cmp	r3, #0
 8003256:	d00a      	beq.n	800326e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003258:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800325c:	d010      	beq.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800325e:	e018      	b.n	8003292 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003260:	4b86      	ldr	r3, [pc, #536]	@ (800347c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003262:	68db      	ldr	r3, [r3, #12]
 8003264:	4a85      	ldr	r2, [pc, #532]	@ (800347c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003266:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800326a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800326c:	e015      	b.n	800329a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	3304      	adds	r3, #4
 8003272:	2100      	movs	r1, #0
 8003274:	4618      	mov	r0, r3
 8003276:	f000 fabb 	bl	80037f0 <RCCEx_PLLSAI1_Config>
 800327a:	4603      	mov	r3, r0
 800327c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800327e:	e00c      	b.n	800329a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	3320      	adds	r3, #32
 8003284:	2100      	movs	r1, #0
 8003286:	4618      	mov	r0, r3
 8003288:	f000 fba6 	bl	80039d8 <RCCEx_PLLSAI2_Config>
 800328c:	4603      	mov	r3, r0
 800328e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003290:	e003      	b.n	800329a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	74fb      	strb	r3, [r7, #19]
      break;
 8003296:	e000      	b.n	800329a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003298:	bf00      	nop
    }

    if(ret == HAL_OK)
 800329a:	7cfb      	ldrb	r3, [r7, #19]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d10b      	bne.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80032a0:	4b76      	ldr	r3, [pc, #472]	@ (800347c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032a6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80032ae:	4973      	ldr	r1, [pc, #460]	@ (800347c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032b0:	4313      	orrs	r3, r2
 80032b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80032b6:	e001      	b.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032b8:	7cfb      	ldrb	r3, [r7, #19]
 80032ba:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d041      	beq.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80032cc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80032d0:	d02a      	beq.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80032d2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80032d6:	d824      	bhi.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80032d8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80032dc:	d008      	beq.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80032de:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80032e2:	d81e      	bhi.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d00a      	beq.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80032e8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80032ec:	d010      	beq.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80032ee:	e018      	b.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80032f0:	4b62      	ldr	r3, [pc, #392]	@ (800347c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032f2:	68db      	ldr	r3, [r3, #12]
 80032f4:	4a61      	ldr	r2, [pc, #388]	@ (800347c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032f6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032fa:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80032fc:	e015      	b.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	3304      	adds	r3, #4
 8003302:	2100      	movs	r1, #0
 8003304:	4618      	mov	r0, r3
 8003306:	f000 fa73 	bl	80037f0 <RCCEx_PLLSAI1_Config>
 800330a:	4603      	mov	r3, r0
 800330c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800330e:	e00c      	b.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	3320      	adds	r3, #32
 8003314:	2100      	movs	r1, #0
 8003316:	4618      	mov	r0, r3
 8003318:	f000 fb5e 	bl	80039d8 <RCCEx_PLLSAI2_Config>
 800331c:	4603      	mov	r3, r0
 800331e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003320:	e003      	b.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	74fb      	strb	r3, [r7, #19]
      break;
 8003326:	e000      	b.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003328:	bf00      	nop
    }

    if(ret == HAL_OK)
 800332a:	7cfb      	ldrb	r3, [r7, #19]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d10b      	bne.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003330:	4b52      	ldr	r3, [pc, #328]	@ (800347c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003332:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003336:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800333e:	494f      	ldr	r1, [pc, #316]	@ (800347c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003340:	4313      	orrs	r3, r2
 8003342:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003346:	e001      	b.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003348:	7cfb      	ldrb	r3, [r7, #19]
 800334a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003354:	2b00      	cmp	r3, #0
 8003356:	f000 80a0 	beq.w	800349a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800335a:	2300      	movs	r3, #0
 800335c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800335e:	4b47      	ldr	r3, [pc, #284]	@ (800347c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003360:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003362:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003366:	2b00      	cmp	r3, #0
 8003368:	d101      	bne.n	800336e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800336a:	2301      	movs	r3, #1
 800336c:	e000      	b.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800336e:	2300      	movs	r3, #0
 8003370:	2b00      	cmp	r3, #0
 8003372:	d00d      	beq.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003374:	4b41      	ldr	r3, [pc, #260]	@ (800347c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003376:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003378:	4a40      	ldr	r2, [pc, #256]	@ (800347c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800337a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800337e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003380:	4b3e      	ldr	r3, [pc, #248]	@ (800347c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003382:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003384:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003388:	60bb      	str	r3, [r7, #8]
 800338a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800338c:	2301      	movs	r3, #1
 800338e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003390:	4b3b      	ldr	r3, [pc, #236]	@ (8003480 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a3a      	ldr	r2, [pc, #232]	@ (8003480 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003396:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800339a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800339c:	f7fd fbe0 	bl	8000b60 <HAL_GetTick>
 80033a0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80033a2:	e009      	b.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033a4:	f7fd fbdc 	bl	8000b60 <HAL_GetTick>
 80033a8:	4602      	mov	r2, r0
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	1ad3      	subs	r3, r2, r3
 80033ae:	2b02      	cmp	r3, #2
 80033b0:	d902      	bls.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80033b2:	2303      	movs	r3, #3
 80033b4:	74fb      	strb	r3, [r7, #19]
        break;
 80033b6:	e005      	b.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80033b8:	4b31      	ldr	r3, [pc, #196]	@ (8003480 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d0ef      	beq.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80033c4:	7cfb      	ldrb	r3, [r7, #19]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d15c      	bne.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80033ca:	4b2c      	ldr	r3, [pc, #176]	@ (800347c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033d0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80033d4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d01f      	beq.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x200>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80033e2:	697a      	ldr	r2, [r7, #20]
 80033e4:	429a      	cmp	r2, r3
 80033e6:	d019      	beq.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80033e8:	4b24      	ldr	r3, [pc, #144]	@ (800347c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033ee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80033f2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80033f4:	4b21      	ldr	r3, [pc, #132]	@ (800347c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033fa:	4a20      	ldr	r2, [pc, #128]	@ (800347c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003400:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003404:	4b1d      	ldr	r3, [pc, #116]	@ (800347c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003406:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800340a:	4a1c      	ldr	r2, [pc, #112]	@ (800347c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800340c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003410:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003414:	4a19      	ldr	r2, [pc, #100]	@ (800347c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	f003 0301 	and.w	r3, r3, #1
 8003422:	2b00      	cmp	r3, #0
 8003424:	d016      	beq.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003426:	f7fd fb9b 	bl	8000b60 <HAL_GetTick>
 800342a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800342c:	e00b      	b.n	8003446 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800342e:	f7fd fb97 	bl	8000b60 <HAL_GetTick>
 8003432:	4602      	mov	r2, r0
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	1ad3      	subs	r3, r2, r3
 8003438:	f241 3288 	movw	r2, #5000	@ 0x1388
 800343c:	4293      	cmp	r3, r2
 800343e:	d902      	bls.n	8003446 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003440:	2303      	movs	r3, #3
 8003442:	74fb      	strb	r3, [r7, #19]
            break;
 8003444:	e006      	b.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003446:	4b0d      	ldr	r3, [pc, #52]	@ (800347c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003448:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800344c:	f003 0302 	and.w	r3, r3, #2
 8003450:	2b00      	cmp	r3, #0
 8003452:	d0ec      	beq.n	800342e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003454:	7cfb      	ldrb	r3, [r7, #19]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d10c      	bne.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800345a:	4b08      	ldr	r3, [pc, #32]	@ (800347c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800345c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003460:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800346a:	4904      	ldr	r1, [pc, #16]	@ (800347c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800346c:	4313      	orrs	r3, r2
 800346e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003472:	e009      	b.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003474:	7cfb      	ldrb	r3, [r7, #19]
 8003476:	74bb      	strb	r3, [r7, #18]
 8003478:	e006      	b.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800347a:	bf00      	nop
 800347c:	40021000 	.word	0x40021000
 8003480:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003484:	7cfb      	ldrb	r3, [r7, #19]
 8003486:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003488:	7c7b      	ldrb	r3, [r7, #17]
 800348a:	2b01      	cmp	r3, #1
 800348c:	d105      	bne.n	800349a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800348e:	4b9e      	ldr	r3, [pc, #632]	@ (8003708 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003490:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003492:	4a9d      	ldr	r2, [pc, #628]	@ (8003708 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003494:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003498:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f003 0301 	and.w	r3, r3, #1
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d00a      	beq.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80034a6:	4b98      	ldr	r3, [pc, #608]	@ (8003708 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034ac:	f023 0203 	bic.w	r2, r3, #3
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034b4:	4994      	ldr	r1, [pc, #592]	@ (8003708 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034b6:	4313      	orrs	r3, r2
 80034b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f003 0302 	and.w	r3, r3, #2
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d00a      	beq.n	80034de <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80034c8:	4b8f      	ldr	r3, [pc, #572]	@ (8003708 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034ce:	f023 020c 	bic.w	r2, r3, #12
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034d6:	498c      	ldr	r1, [pc, #560]	@ (8003708 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034d8:	4313      	orrs	r3, r2
 80034da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f003 0304 	and.w	r3, r3, #4
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d00a      	beq.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80034ea:	4b87      	ldr	r3, [pc, #540]	@ (8003708 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034f0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034f8:	4983      	ldr	r1, [pc, #524]	@ (8003708 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034fa:	4313      	orrs	r3, r2
 80034fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f003 0308 	and.w	r3, r3, #8
 8003508:	2b00      	cmp	r3, #0
 800350a:	d00a      	beq.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800350c:	4b7e      	ldr	r3, [pc, #504]	@ (8003708 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800350e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003512:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800351a:	497b      	ldr	r1, [pc, #492]	@ (8003708 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800351c:	4313      	orrs	r3, r2
 800351e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f003 0310 	and.w	r3, r3, #16
 800352a:	2b00      	cmp	r3, #0
 800352c:	d00a      	beq.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800352e:	4b76      	ldr	r3, [pc, #472]	@ (8003708 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003530:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003534:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800353c:	4972      	ldr	r1, [pc, #456]	@ (8003708 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800353e:	4313      	orrs	r3, r2
 8003540:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f003 0320 	and.w	r3, r3, #32
 800354c:	2b00      	cmp	r3, #0
 800354e:	d00a      	beq.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003550:	4b6d      	ldr	r3, [pc, #436]	@ (8003708 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003552:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003556:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800355e:	496a      	ldr	r1, [pc, #424]	@ (8003708 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003560:	4313      	orrs	r3, r2
 8003562:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800356e:	2b00      	cmp	r3, #0
 8003570:	d00a      	beq.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003572:	4b65      	ldr	r3, [pc, #404]	@ (8003708 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003574:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003578:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003580:	4961      	ldr	r1, [pc, #388]	@ (8003708 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003582:	4313      	orrs	r3, r2
 8003584:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003590:	2b00      	cmp	r3, #0
 8003592:	d00a      	beq.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003594:	4b5c      	ldr	r3, [pc, #368]	@ (8003708 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003596:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800359a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035a2:	4959      	ldr	r1, [pc, #356]	@ (8003708 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035a4:	4313      	orrs	r3, r2
 80035a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d00a      	beq.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80035b6:	4b54      	ldr	r3, [pc, #336]	@ (8003708 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035bc:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035c4:	4950      	ldr	r1, [pc, #320]	@ (8003708 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035c6:	4313      	orrs	r3, r2
 80035c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d00a      	beq.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80035d8:	4b4b      	ldr	r3, [pc, #300]	@ (8003708 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035de:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035e6:	4948      	ldr	r1, [pc, #288]	@ (8003708 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035e8:	4313      	orrs	r3, r2
 80035ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d00a      	beq.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80035fa:	4b43      	ldr	r3, [pc, #268]	@ (8003708 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003600:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003608:	493f      	ldr	r1, [pc, #252]	@ (8003708 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800360a:	4313      	orrs	r3, r2
 800360c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003618:	2b00      	cmp	r3, #0
 800361a:	d028      	beq.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800361c:	4b3a      	ldr	r3, [pc, #232]	@ (8003708 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800361e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003622:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800362a:	4937      	ldr	r1, [pc, #220]	@ (8003708 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800362c:	4313      	orrs	r3, r2
 800362e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003636:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800363a:	d106      	bne.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800363c:	4b32      	ldr	r3, [pc, #200]	@ (8003708 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800363e:	68db      	ldr	r3, [r3, #12]
 8003640:	4a31      	ldr	r2, [pc, #196]	@ (8003708 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003642:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003646:	60d3      	str	r3, [r2, #12]
 8003648:	e011      	b.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800364e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003652:	d10c      	bne.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	3304      	adds	r3, #4
 8003658:	2101      	movs	r1, #1
 800365a:	4618      	mov	r0, r3
 800365c:	f000 f8c8 	bl	80037f0 <RCCEx_PLLSAI1_Config>
 8003660:	4603      	mov	r3, r0
 8003662:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003664:	7cfb      	ldrb	r3, [r7, #19]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d001      	beq.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800366a:	7cfb      	ldrb	r3, [r7, #19]
 800366c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003676:	2b00      	cmp	r3, #0
 8003678:	d028      	beq.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800367a:	4b23      	ldr	r3, [pc, #140]	@ (8003708 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800367c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003680:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003688:	491f      	ldr	r1, [pc, #124]	@ (8003708 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800368a:	4313      	orrs	r3, r2
 800368c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003694:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003698:	d106      	bne.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800369a:	4b1b      	ldr	r3, [pc, #108]	@ (8003708 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800369c:	68db      	ldr	r3, [r3, #12]
 800369e:	4a1a      	ldr	r2, [pc, #104]	@ (8003708 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036a0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80036a4:	60d3      	str	r3, [r2, #12]
 80036a6:	e011      	b.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036ac:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80036b0:	d10c      	bne.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	3304      	adds	r3, #4
 80036b6:	2101      	movs	r1, #1
 80036b8:	4618      	mov	r0, r3
 80036ba:	f000 f899 	bl	80037f0 <RCCEx_PLLSAI1_Config>
 80036be:	4603      	mov	r3, r0
 80036c0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80036c2:	7cfb      	ldrb	r3, [r7, #19]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d001      	beq.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80036c8:	7cfb      	ldrb	r3, [r7, #19]
 80036ca:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d02b      	beq.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80036d8:	4b0b      	ldr	r3, [pc, #44]	@ (8003708 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036de:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036e6:	4908      	ldr	r1, [pc, #32]	@ (8003708 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036e8:	4313      	orrs	r3, r2
 80036ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036f2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80036f6:	d109      	bne.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80036f8:	4b03      	ldr	r3, [pc, #12]	@ (8003708 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036fa:	68db      	ldr	r3, [r3, #12]
 80036fc:	4a02      	ldr	r2, [pc, #8]	@ (8003708 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036fe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003702:	60d3      	str	r3, [r2, #12]
 8003704:	e014      	b.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003706:	bf00      	nop
 8003708:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003710:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003714:	d10c      	bne.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	3304      	adds	r3, #4
 800371a:	2101      	movs	r1, #1
 800371c:	4618      	mov	r0, r3
 800371e:	f000 f867 	bl	80037f0 <RCCEx_PLLSAI1_Config>
 8003722:	4603      	mov	r3, r0
 8003724:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003726:	7cfb      	ldrb	r3, [r7, #19]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d001      	beq.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800372c:	7cfb      	ldrb	r3, [r7, #19]
 800372e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003738:	2b00      	cmp	r3, #0
 800373a:	d02f      	beq.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800373c:	4b2b      	ldr	r3, [pc, #172]	@ (80037ec <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800373e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003742:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800374a:	4928      	ldr	r1, [pc, #160]	@ (80037ec <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800374c:	4313      	orrs	r3, r2
 800374e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003756:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800375a:	d10d      	bne.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	3304      	adds	r3, #4
 8003760:	2102      	movs	r1, #2
 8003762:	4618      	mov	r0, r3
 8003764:	f000 f844 	bl	80037f0 <RCCEx_PLLSAI1_Config>
 8003768:	4603      	mov	r3, r0
 800376a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800376c:	7cfb      	ldrb	r3, [r7, #19]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d014      	beq.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003772:	7cfb      	ldrb	r3, [r7, #19]
 8003774:	74bb      	strb	r3, [r7, #18]
 8003776:	e011      	b.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800377c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003780:	d10c      	bne.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	3320      	adds	r3, #32
 8003786:	2102      	movs	r1, #2
 8003788:	4618      	mov	r0, r3
 800378a:	f000 f925 	bl	80039d8 <RCCEx_PLLSAI2_Config>
 800378e:	4603      	mov	r3, r0
 8003790:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003792:	7cfb      	ldrb	r3, [r7, #19]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d001      	beq.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003798:	7cfb      	ldrb	r3, [r7, #19]
 800379a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d00a      	beq.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80037a8:	4b10      	ldr	r3, [pc, #64]	@ (80037ec <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80037aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037ae:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80037b6:	490d      	ldr	r1, [pc, #52]	@ (80037ec <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80037b8:	4313      	orrs	r3, r2
 80037ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d00b      	beq.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80037ca:	4b08      	ldr	r3, [pc, #32]	@ (80037ec <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80037cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037d0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80037da:	4904      	ldr	r1, [pc, #16]	@ (80037ec <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80037dc:	4313      	orrs	r3, r2
 80037de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80037e2:	7cbb      	ldrb	r3, [r7, #18]
}
 80037e4:	4618      	mov	r0, r3
 80037e6:	3718      	adds	r7, #24
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bd80      	pop	{r7, pc}
 80037ec:	40021000 	.word	0x40021000

080037f0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b084      	sub	sp, #16
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
 80037f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80037fa:	2300      	movs	r3, #0
 80037fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80037fe:	4b75      	ldr	r3, [pc, #468]	@ (80039d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003800:	68db      	ldr	r3, [r3, #12]
 8003802:	f003 0303 	and.w	r3, r3, #3
 8003806:	2b00      	cmp	r3, #0
 8003808:	d018      	beq.n	800383c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800380a:	4b72      	ldr	r3, [pc, #456]	@ (80039d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800380c:	68db      	ldr	r3, [r3, #12]
 800380e:	f003 0203 	and.w	r2, r3, #3
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	429a      	cmp	r2, r3
 8003818:	d10d      	bne.n	8003836 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
       ||
 800381e:	2b00      	cmp	r3, #0
 8003820:	d009      	beq.n	8003836 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003822:	4b6c      	ldr	r3, [pc, #432]	@ (80039d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003824:	68db      	ldr	r3, [r3, #12]
 8003826:	091b      	lsrs	r3, r3, #4
 8003828:	f003 0307 	and.w	r3, r3, #7
 800382c:	1c5a      	adds	r2, r3, #1
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	685b      	ldr	r3, [r3, #4]
       ||
 8003832:	429a      	cmp	r2, r3
 8003834:	d047      	beq.n	80038c6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003836:	2301      	movs	r3, #1
 8003838:	73fb      	strb	r3, [r7, #15]
 800383a:	e044      	b.n	80038c6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	2b03      	cmp	r3, #3
 8003842:	d018      	beq.n	8003876 <RCCEx_PLLSAI1_Config+0x86>
 8003844:	2b03      	cmp	r3, #3
 8003846:	d825      	bhi.n	8003894 <RCCEx_PLLSAI1_Config+0xa4>
 8003848:	2b01      	cmp	r3, #1
 800384a:	d002      	beq.n	8003852 <RCCEx_PLLSAI1_Config+0x62>
 800384c:	2b02      	cmp	r3, #2
 800384e:	d009      	beq.n	8003864 <RCCEx_PLLSAI1_Config+0x74>
 8003850:	e020      	b.n	8003894 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003852:	4b60      	ldr	r3, [pc, #384]	@ (80039d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f003 0302 	and.w	r3, r3, #2
 800385a:	2b00      	cmp	r3, #0
 800385c:	d11d      	bne.n	800389a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800385e:	2301      	movs	r3, #1
 8003860:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003862:	e01a      	b.n	800389a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003864:	4b5b      	ldr	r3, [pc, #364]	@ (80039d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800386c:	2b00      	cmp	r3, #0
 800386e:	d116      	bne.n	800389e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003870:	2301      	movs	r3, #1
 8003872:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003874:	e013      	b.n	800389e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003876:	4b57      	ldr	r3, [pc, #348]	@ (80039d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800387e:	2b00      	cmp	r3, #0
 8003880:	d10f      	bne.n	80038a2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003882:	4b54      	ldr	r3, [pc, #336]	@ (80039d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800388a:	2b00      	cmp	r3, #0
 800388c:	d109      	bne.n	80038a2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800388e:	2301      	movs	r3, #1
 8003890:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003892:	e006      	b.n	80038a2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003894:	2301      	movs	r3, #1
 8003896:	73fb      	strb	r3, [r7, #15]
      break;
 8003898:	e004      	b.n	80038a4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800389a:	bf00      	nop
 800389c:	e002      	b.n	80038a4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800389e:	bf00      	nop
 80038a0:	e000      	b.n	80038a4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80038a2:	bf00      	nop
    }

    if(status == HAL_OK)
 80038a4:	7bfb      	ldrb	r3, [r7, #15]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d10d      	bne.n	80038c6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80038aa:	4b4a      	ldr	r3, [pc, #296]	@ (80039d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038ac:	68db      	ldr	r3, [r3, #12]
 80038ae:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6819      	ldr	r1, [r3, #0]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	3b01      	subs	r3, #1
 80038bc:	011b      	lsls	r3, r3, #4
 80038be:	430b      	orrs	r3, r1
 80038c0:	4944      	ldr	r1, [pc, #272]	@ (80039d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038c2:	4313      	orrs	r3, r2
 80038c4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80038c6:	7bfb      	ldrb	r3, [r7, #15]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d17d      	bne.n	80039c8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80038cc:	4b41      	ldr	r3, [pc, #260]	@ (80039d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a40      	ldr	r2, [pc, #256]	@ (80039d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038d2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80038d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038d8:	f7fd f942 	bl	8000b60 <HAL_GetTick>
 80038dc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80038de:	e009      	b.n	80038f4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80038e0:	f7fd f93e 	bl	8000b60 <HAL_GetTick>
 80038e4:	4602      	mov	r2, r0
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	1ad3      	subs	r3, r2, r3
 80038ea:	2b02      	cmp	r3, #2
 80038ec:	d902      	bls.n	80038f4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80038ee:	2303      	movs	r3, #3
 80038f0:	73fb      	strb	r3, [r7, #15]
        break;
 80038f2:	e005      	b.n	8003900 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80038f4:	4b37      	ldr	r3, [pc, #220]	@ (80039d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d1ef      	bne.n	80038e0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003900:	7bfb      	ldrb	r3, [r7, #15]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d160      	bne.n	80039c8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d111      	bne.n	8003930 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800390c:	4b31      	ldr	r3, [pc, #196]	@ (80039d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800390e:	691b      	ldr	r3, [r3, #16]
 8003910:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003914:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003918:	687a      	ldr	r2, [r7, #4]
 800391a:	6892      	ldr	r2, [r2, #8]
 800391c:	0211      	lsls	r1, r2, #8
 800391e:	687a      	ldr	r2, [r7, #4]
 8003920:	68d2      	ldr	r2, [r2, #12]
 8003922:	0912      	lsrs	r2, r2, #4
 8003924:	0452      	lsls	r2, r2, #17
 8003926:	430a      	orrs	r2, r1
 8003928:	492a      	ldr	r1, [pc, #168]	@ (80039d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800392a:	4313      	orrs	r3, r2
 800392c:	610b      	str	r3, [r1, #16]
 800392e:	e027      	b.n	8003980 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	2b01      	cmp	r3, #1
 8003934:	d112      	bne.n	800395c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003936:	4b27      	ldr	r3, [pc, #156]	@ (80039d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003938:	691b      	ldr	r3, [r3, #16]
 800393a:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800393e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003942:	687a      	ldr	r2, [r7, #4]
 8003944:	6892      	ldr	r2, [r2, #8]
 8003946:	0211      	lsls	r1, r2, #8
 8003948:	687a      	ldr	r2, [r7, #4]
 800394a:	6912      	ldr	r2, [r2, #16]
 800394c:	0852      	lsrs	r2, r2, #1
 800394e:	3a01      	subs	r2, #1
 8003950:	0552      	lsls	r2, r2, #21
 8003952:	430a      	orrs	r2, r1
 8003954:	491f      	ldr	r1, [pc, #124]	@ (80039d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003956:	4313      	orrs	r3, r2
 8003958:	610b      	str	r3, [r1, #16]
 800395a:	e011      	b.n	8003980 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800395c:	4b1d      	ldr	r3, [pc, #116]	@ (80039d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800395e:	691b      	ldr	r3, [r3, #16]
 8003960:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003964:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003968:	687a      	ldr	r2, [r7, #4]
 800396a:	6892      	ldr	r2, [r2, #8]
 800396c:	0211      	lsls	r1, r2, #8
 800396e:	687a      	ldr	r2, [r7, #4]
 8003970:	6952      	ldr	r2, [r2, #20]
 8003972:	0852      	lsrs	r2, r2, #1
 8003974:	3a01      	subs	r2, #1
 8003976:	0652      	lsls	r2, r2, #25
 8003978:	430a      	orrs	r2, r1
 800397a:	4916      	ldr	r1, [pc, #88]	@ (80039d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800397c:	4313      	orrs	r3, r2
 800397e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003980:	4b14      	ldr	r3, [pc, #80]	@ (80039d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a13      	ldr	r2, [pc, #76]	@ (80039d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003986:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800398a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800398c:	f7fd f8e8 	bl	8000b60 <HAL_GetTick>
 8003990:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003992:	e009      	b.n	80039a8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003994:	f7fd f8e4 	bl	8000b60 <HAL_GetTick>
 8003998:	4602      	mov	r2, r0
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	1ad3      	subs	r3, r2, r3
 800399e:	2b02      	cmp	r3, #2
 80039a0:	d902      	bls.n	80039a8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80039a2:	2303      	movs	r3, #3
 80039a4:	73fb      	strb	r3, [r7, #15]
          break;
 80039a6:	e005      	b.n	80039b4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80039a8:	4b0a      	ldr	r3, [pc, #40]	@ (80039d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d0ef      	beq.n	8003994 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80039b4:	7bfb      	ldrb	r3, [r7, #15]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d106      	bne.n	80039c8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80039ba:	4b06      	ldr	r3, [pc, #24]	@ (80039d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039bc:	691a      	ldr	r2, [r3, #16]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	699b      	ldr	r3, [r3, #24]
 80039c2:	4904      	ldr	r1, [pc, #16]	@ (80039d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039c4:	4313      	orrs	r3, r2
 80039c6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80039c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80039ca:	4618      	mov	r0, r3
 80039cc:	3710      	adds	r7, #16
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}
 80039d2:	bf00      	nop
 80039d4:	40021000 	.word	0x40021000

080039d8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b084      	sub	sp, #16
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
 80039e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80039e2:	2300      	movs	r3, #0
 80039e4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80039e6:	4b6a      	ldr	r3, [pc, #424]	@ (8003b90 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039e8:	68db      	ldr	r3, [r3, #12]
 80039ea:	f003 0303 	and.w	r3, r3, #3
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d018      	beq.n	8003a24 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80039f2:	4b67      	ldr	r3, [pc, #412]	@ (8003b90 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039f4:	68db      	ldr	r3, [r3, #12]
 80039f6:	f003 0203 	and.w	r2, r3, #3
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	429a      	cmp	r2, r3
 8003a00:	d10d      	bne.n	8003a1e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
       ||
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d009      	beq.n	8003a1e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003a0a:	4b61      	ldr	r3, [pc, #388]	@ (8003b90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a0c:	68db      	ldr	r3, [r3, #12]
 8003a0e:	091b      	lsrs	r3, r3, #4
 8003a10:	f003 0307 	and.w	r3, r3, #7
 8003a14:	1c5a      	adds	r2, r3, #1
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	685b      	ldr	r3, [r3, #4]
       ||
 8003a1a:	429a      	cmp	r2, r3
 8003a1c:	d047      	beq.n	8003aae <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	73fb      	strb	r3, [r7, #15]
 8003a22:	e044      	b.n	8003aae <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	2b03      	cmp	r3, #3
 8003a2a:	d018      	beq.n	8003a5e <RCCEx_PLLSAI2_Config+0x86>
 8003a2c:	2b03      	cmp	r3, #3
 8003a2e:	d825      	bhi.n	8003a7c <RCCEx_PLLSAI2_Config+0xa4>
 8003a30:	2b01      	cmp	r3, #1
 8003a32:	d002      	beq.n	8003a3a <RCCEx_PLLSAI2_Config+0x62>
 8003a34:	2b02      	cmp	r3, #2
 8003a36:	d009      	beq.n	8003a4c <RCCEx_PLLSAI2_Config+0x74>
 8003a38:	e020      	b.n	8003a7c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003a3a:	4b55      	ldr	r3, [pc, #340]	@ (8003b90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f003 0302 	and.w	r3, r3, #2
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d11d      	bne.n	8003a82 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003a46:	2301      	movs	r3, #1
 8003a48:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a4a:	e01a      	b.n	8003a82 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003a4c:	4b50      	ldr	r3, [pc, #320]	@ (8003b90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d116      	bne.n	8003a86 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a5c:	e013      	b.n	8003a86 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003a5e:	4b4c      	ldr	r3, [pc, #304]	@ (8003b90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d10f      	bne.n	8003a8a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003a6a:	4b49      	ldr	r3, [pc, #292]	@ (8003b90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d109      	bne.n	8003a8a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003a76:	2301      	movs	r3, #1
 8003a78:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003a7a:	e006      	b.n	8003a8a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	73fb      	strb	r3, [r7, #15]
      break;
 8003a80:	e004      	b.n	8003a8c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003a82:	bf00      	nop
 8003a84:	e002      	b.n	8003a8c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003a86:	bf00      	nop
 8003a88:	e000      	b.n	8003a8c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003a8a:	bf00      	nop
    }

    if(status == HAL_OK)
 8003a8c:	7bfb      	ldrb	r3, [r7, #15]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d10d      	bne.n	8003aae <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003a92:	4b3f      	ldr	r3, [pc, #252]	@ (8003b90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a94:	68db      	ldr	r3, [r3, #12]
 8003a96:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6819      	ldr	r1, [r3, #0]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	3b01      	subs	r3, #1
 8003aa4:	011b      	lsls	r3, r3, #4
 8003aa6:	430b      	orrs	r3, r1
 8003aa8:	4939      	ldr	r1, [pc, #228]	@ (8003b90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003aae:	7bfb      	ldrb	r3, [r7, #15]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d167      	bne.n	8003b84 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003ab4:	4b36      	ldr	r3, [pc, #216]	@ (8003b90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a35      	ldr	r2, [pc, #212]	@ (8003b90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003aba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003abe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ac0:	f7fd f84e 	bl	8000b60 <HAL_GetTick>
 8003ac4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003ac6:	e009      	b.n	8003adc <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003ac8:	f7fd f84a 	bl	8000b60 <HAL_GetTick>
 8003acc:	4602      	mov	r2, r0
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	1ad3      	subs	r3, r2, r3
 8003ad2:	2b02      	cmp	r3, #2
 8003ad4:	d902      	bls.n	8003adc <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003ad6:	2303      	movs	r3, #3
 8003ad8:	73fb      	strb	r3, [r7, #15]
        break;
 8003ada:	e005      	b.n	8003ae8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003adc:	4b2c      	ldr	r3, [pc, #176]	@ (8003b90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d1ef      	bne.n	8003ac8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003ae8:	7bfb      	ldrb	r3, [r7, #15]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d14a      	bne.n	8003b84 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d111      	bne.n	8003b18 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003af4:	4b26      	ldr	r3, [pc, #152]	@ (8003b90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003af6:	695b      	ldr	r3, [r3, #20]
 8003af8:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003afc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b00:	687a      	ldr	r2, [r7, #4]
 8003b02:	6892      	ldr	r2, [r2, #8]
 8003b04:	0211      	lsls	r1, r2, #8
 8003b06:	687a      	ldr	r2, [r7, #4]
 8003b08:	68d2      	ldr	r2, [r2, #12]
 8003b0a:	0912      	lsrs	r2, r2, #4
 8003b0c:	0452      	lsls	r2, r2, #17
 8003b0e:	430a      	orrs	r2, r1
 8003b10:	491f      	ldr	r1, [pc, #124]	@ (8003b90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b12:	4313      	orrs	r3, r2
 8003b14:	614b      	str	r3, [r1, #20]
 8003b16:	e011      	b.n	8003b3c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003b18:	4b1d      	ldr	r3, [pc, #116]	@ (8003b90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b1a:	695b      	ldr	r3, [r3, #20]
 8003b1c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003b20:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003b24:	687a      	ldr	r2, [r7, #4]
 8003b26:	6892      	ldr	r2, [r2, #8]
 8003b28:	0211      	lsls	r1, r2, #8
 8003b2a:	687a      	ldr	r2, [r7, #4]
 8003b2c:	6912      	ldr	r2, [r2, #16]
 8003b2e:	0852      	lsrs	r2, r2, #1
 8003b30:	3a01      	subs	r2, #1
 8003b32:	0652      	lsls	r2, r2, #25
 8003b34:	430a      	orrs	r2, r1
 8003b36:	4916      	ldr	r1, [pc, #88]	@ (8003b90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003b3c:	4b14      	ldr	r3, [pc, #80]	@ (8003b90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a13      	ldr	r2, [pc, #76]	@ (8003b90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b42:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b46:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b48:	f7fd f80a 	bl	8000b60 <HAL_GetTick>
 8003b4c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003b4e:	e009      	b.n	8003b64 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003b50:	f7fd f806 	bl	8000b60 <HAL_GetTick>
 8003b54:	4602      	mov	r2, r0
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	1ad3      	subs	r3, r2, r3
 8003b5a:	2b02      	cmp	r3, #2
 8003b5c:	d902      	bls.n	8003b64 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003b5e:	2303      	movs	r3, #3
 8003b60:	73fb      	strb	r3, [r7, #15]
          break;
 8003b62:	e005      	b.n	8003b70 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003b64:	4b0a      	ldr	r3, [pc, #40]	@ (8003b90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d0ef      	beq.n	8003b50 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003b70:	7bfb      	ldrb	r3, [r7, #15]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d106      	bne.n	8003b84 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003b76:	4b06      	ldr	r3, [pc, #24]	@ (8003b90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b78:	695a      	ldr	r2, [r3, #20]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	695b      	ldr	r3, [r3, #20]
 8003b7e:	4904      	ldr	r1, [pc, #16]	@ (8003b90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b80:	4313      	orrs	r3, r2
 8003b82:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003b84:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	3710      	adds	r7, #16
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}
 8003b8e:	bf00      	nop
 8003b90:	40021000 	.word	0x40021000

08003b94 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b082      	sub	sp, #8
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d101      	bne.n	8003ba6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	e040      	b.n	8003c28 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d106      	bne.n	8003bbc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003bb6:	6878      	ldr	r0, [r7, #4]
 8003bb8:	f7fc fe9a 	bl	80008f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2224      	movs	r2, #36	@ 0x24
 8003bc0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	681a      	ldr	r2, [r3, #0]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f022 0201 	bic.w	r2, r2, #1
 8003bd0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d002      	beq.n	8003be0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003bda:	6878      	ldr	r0, [r7, #4]
 8003bdc:	f000 fae0 	bl	80041a0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003be0:	6878      	ldr	r0, [r7, #4]
 8003be2:	f000 f825 	bl	8003c30 <UART_SetConfig>
 8003be6:	4603      	mov	r3, r0
 8003be8:	2b01      	cmp	r3, #1
 8003bea:	d101      	bne.n	8003bf0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003bec:	2301      	movs	r3, #1
 8003bee:	e01b      	b.n	8003c28 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	685a      	ldr	r2, [r3, #4]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003bfe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	689a      	ldr	r2, [r3, #8]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003c0e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	681a      	ldr	r2, [r3, #0]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f042 0201 	orr.w	r2, r2, #1
 8003c1e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003c20:	6878      	ldr	r0, [r7, #4]
 8003c22:	f000 fb5f 	bl	80042e4 <UART_CheckIdleState>
 8003c26:	4603      	mov	r3, r0
}
 8003c28:	4618      	mov	r0, r3
 8003c2a:	3708      	adds	r7, #8
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bd80      	pop	{r7, pc}

08003c30 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c34:	b08a      	sub	sp, #40	@ 0x28
 8003c36:	af00      	add	r7, sp, #0
 8003c38:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	689a      	ldr	r2, [r3, #8]
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	691b      	ldr	r3, [r3, #16]
 8003c48:	431a      	orrs	r2, r3
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	695b      	ldr	r3, [r3, #20]
 8003c4e:	431a      	orrs	r2, r3
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	69db      	ldr	r3, [r3, #28]
 8003c54:	4313      	orrs	r3, r2
 8003c56:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	681a      	ldr	r2, [r3, #0]
 8003c5e:	4ba4      	ldr	r3, [pc, #656]	@ (8003ef0 <UART_SetConfig+0x2c0>)
 8003c60:	4013      	ands	r3, r2
 8003c62:	68fa      	ldr	r2, [r7, #12]
 8003c64:	6812      	ldr	r2, [r2, #0]
 8003c66:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003c68:	430b      	orrs	r3, r1
 8003c6a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	68da      	ldr	r2, [r3, #12]
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	430a      	orrs	r2, r1
 8003c80:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	699b      	ldr	r3, [r3, #24]
 8003c86:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a99      	ldr	r2, [pc, #612]	@ (8003ef4 <UART_SetConfig+0x2c4>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d004      	beq.n	8003c9c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	6a1b      	ldr	r3, [r3, #32]
 8003c96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	689b      	ldr	r3, [r3, #8]
 8003ca2:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003cac:	430a      	orrs	r2, r1
 8003cae:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a90      	ldr	r2, [pc, #576]	@ (8003ef8 <UART_SetConfig+0x2c8>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d126      	bne.n	8003d08 <UART_SetConfig+0xd8>
 8003cba:	4b90      	ldr	r3, [pc, #576]	@ (8003efc <UART_SetConfig+0x2cc>)
 8003cbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cc0:	f003 0303 	and.w	r3, r3, #3
 8003cc4:	2b03      	cmp	r3, #3
 8003cc6:	d81b      	bhi.n	8003d00 <UART_SetConfig+0xd0>
 8003cc8:	a201      	add	r2, pc, #4	@ (adr r2, 8003cd0 <UART_SetConfig+0xa0>)
 8003cca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cce:	bf00      	nop
 8003cd0:	08003ce1 	.word	0x08003ce1
 8003cd4:	08003cf1 	.word	0x08003cf1
 8003cd8:	08003ce9 	.word	0x08003ce9
 8003cdc:	08003cf9 	.word	0x08003cf9
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ce6:	e116      	b.n	8003f16 <UART_SetConfig+0x2e6>
 8003ce8:	2302      	movs	r3, #2
 8003cea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003cee:	e112      	b.n	8003f16 <UART_SetConfig+0x2e6>
 8003cf0:	2304      	movs	r3, #4
 8003cf2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003cf6:	e10e      	b.n	8003f16 <UART_SetConfig+0x2e6>
 8003cf8:	2308      	movs	r3, #8
 8003cfa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003cfe:	e10a      	b.n	8003f16 <UART_SetConfig+0x2e6>
 8003d00:	2310      	movs	r3, #16
 8003d02:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d06:	e106      	b.n	8003f16 <UART_SetConfig+0x2e6>
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a7c      	ldr	r2, [pc, #496]	@ (8003f00 <UART_SetConfig+0x2d0>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d138      	bne.n	8003d84 <UART_SetConfig+0x154>
 8003d12:	4b7a      	ldr	r3, [pc, #488]	@ (8003efc <UART_SetConfig+0x2cc>)
 8003d14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d18:	f003 030c 	and.w	r3, r3, #12
 8003d1c:	2b0c      	cmp	r3, #12
 8003d1e:	d82d      	bhi.n	8003d7c <UART_SetConfig+0x14c>
 8003d20:	a201      	add	r2, pc, #4	@ (adr r2, 8003d28 <UART_SetConfig+0xf8>)
 8003d22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d26:	bf00      	nop
 8003d28:	08003d5d 	.word	0x08003d5d
 8003d2c:	08003d7d 	.word	0x08003d7d
 8003d30:	08003d7d 	.word	0x08003d7d
 8003d34:	08003d7d 	.word	0x08003d7d
 8003d38:	08003d6d 	.word	0x08003d6d
 8003d3c:	08003d7d 	.word	0x08003d7d
 8003d40:	08003d7d 	.word	0x08003d7d
 8003d44:	08003d7d 	.word	0x08003d7d
 8003d48:	08003d65 	.word	0x08003d65
 8003d4c:	08003d7d 	.word	0x08003d7d
 8003d50:	08003d7d 	.word	0x08003d7d
 8003d54:	08003d7d 	.word	0x08003d7d
 8003d58:	08003d75 	.word	0x08003d75
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d62:	e0d8      	b.n	8003f16 <UART_SetConfig+0x2e6>
 8003d64:	2302      	movs	r3, #2
 8003d66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d6a:	e0d4      	b.n	8003f16 <UART_SetConfig+0x2e6>
 8003d6c:	2304      	movs	r3, #4
 8003d6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d72:	e0d0      	b.n	8003f16 <UART_SetConfig+0x2e6>
 8003d74:	2308      	movs	r3, #8
 8003d76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d7a:	e0cc      	b.n	8003f16 <UART_SetConfig+0x2e6>
 8003d7c:	2310      	movs	r3, #16
 8003d7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d82:	e0c8      	b.n	8003f16 <UART_SetConfig+0x2e6>
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a5e      	ldr	r2, [pc, #376]	@ (8003f04 <UART_SetConfig+0x2d4>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d125      	bne.n	8003dda <UART_SetConfig+0x1aa>
 8003d8e:	4b5b      	ldr	r3, [pc, #364]	@ (8003efc <UART_SetConfig+0x2cc>)
 8003d90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d94:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003d98:	2b30      	cmp	r3, #48	@ 0x30
 8003d9a:	d016      	beq.n	8003dca <UART_SetConfig+0x19a>
 8003d9c:	2b30      	cmp	r3, #48	@ 0x30
 8003d9e:	d818      	bhi.n	8003dd2 <UART_SetConfig+0x1a2>
 8003da0:	2b20      	cmp	r3, #32
 8003da2:	d00a      	beq.n	8003dba <UART_SetConfig+0x18a>
 8003da4:	2b20      	cmp	r3, #32
 8003da6:	d814      	bhi.n	8003dd2 <UART_SetConfig+0x1a2>
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d002      	beq.n	8003db2 <UART_SetConfig+0x182>
 8003dac:	2b10      	cmp	r3, #16
 8003dae:	d008      	beq.n	8003dc2 <UART_SetConfig+0x192>
 8003db0:	e00f      	b.n	8003dd2 <UART_SetConfig+0x1a2>
 8003db2:	2300      	movs	r3, #0
 8003db4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003db8:	e0ad      	b.n	8003f16 <UART_SetConfig+0x2e6>
 8003dba:	2302      	movs	r3, #2
 8003dbc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003dc0:	e0a9      	b.n	8003f16 <UART_SetConfig+0x2e6>
 8003dc2:	2304      	movs	r3, #4
 8003dc4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003dc8:	e0a5      	b.n	8003f16 <UART_SetConfig+0x2e6>
 8003dca:	2308      	movs	r3, #8
 8003dcc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003dd0:	e0a1      	b.n	8003f16 <UART_SetConfig+0x2e6>
 8003dd2:	2310      	movs	r3, #16
 8003dd4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003dd8:	e09d      	b.n	8003f16 <UART_SetConfig+0x2e6>
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a4a      	ldr	r2, [pc, #296]	@ (8003f08 <UART_SetConfig+0x2d8>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d125      	bne.n	8003e30 <UART_SetConfig+0x200>
 8003de4:	4b45      	ldr	r3, [pc, #276]	@ (8003efc <UART_SetConfig+0x2cc>)
 8003de6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dea:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003dee:	2bc0      	cmp	r3, #192	@ 0xc0
 8003df0:	d016      	beq.n	8003e20 <UART_SetConfig+0x1f0>
 8003df2:	2bc0      	cmp	r3, #192	@ 0xc0
 8003df4:	d818      	bhi.n	8003e28 <UART_SetConfig+0x1f8>
 8003df6:	2b80      	cmp	r3, #128	@ 0x80
 8003df8:	d00a      	beq.n	8003e10 <UART_SetConfig+0x1e0>
 8003dfa:	2b80      	cmp	r3, #128	@ 0x80
 8003dfc:	d814      	bhi.n	8003e28 <UART_SetConfig+0x1f8>
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d002      	beq.n	8003e08 <UART_SetConfig+0x1d8>
 8003e02:	2b40      	cmp	r3, #64	@ 0x40
 8003e04:	d008      	beq.n	8003e18 <UART_SetConfig+0x1e8>
 8003e06:	e00f      	b.n	8003e28 <UART_SetConfig+0x1f8>
 8003e08:	2300      	movs	r3, #0
 8003e0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e0e:	e082      	b.n	8003f16 <UART_SetConfig+0x2e6>
 8003e10:	2302      	movs	r3, #2
 8003e12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e16:	e07e      	b.n	8003f16 <UART_SetConfig+0x2e6>
 8003e18:	2304      	movs	r3, #4
 8003e1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e1e:	e07a      	b.n	8003f16 <UART_SetConfig+0x2e6>
 8003e20:	2308      	movs	r3, #8
 8003e22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e26:	e076      	b.n	8003f16 <UART_SetConfig+0x2e6>
 8003e28:	2310      	movs	r3, #16
 8003e2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e2e:	e072      	b.n	8003f16 <UART_SetConfig+0x2e6>
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a35      	ldr	r2, [pc, #212]	@ (8003f0c <UART_SetConfig+0x2dc>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d12a      	bne.n	8003e90 <UART_SetConfig+0x260>
 8003e3a:	4b30      	ldr	r3, [pc, #192]	@ (8003efc <UART_SetConfig+0x2cc>)
 8003e3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e40:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e44:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003e48:	d01a      	beq.n	8003e80 <UART_SetConfig+0x250>
 8003e4a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003e4e:	d81b      	bhi.n	8003e88 <UART_SetConfig+0x258>
 8003e50:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003e54:	d00c      	beq.n	8003e70 <UART_SetConfig+0x240>
 8003e56:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003e5a:	d815      	bhi.n	8003e88 <UART_SetConfig+0x258>
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d003      	beq.n	8003e68 <UART_SetConfig+0x238>
 8003e60:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e64:	d008      	beq.n	8003e78 <UART_SetConfig+0x248>
 8003e66:	e00f      	b.n	8003e88 <UART_SetConfig+0x258>
 8003e68:	2300      	movs	r3, #0
 8003e6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e6e:	e052      	b.n	8003f16 <UART_SetConfig+0x2e6>
 8003e70:	2302      	movs	r3, #2
 8003e72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e76:	e04e      	b.n	8003f16 <UART_SetConfig+0x2e6>
 8003e78:	2304      	movs	r3, #4
 8003e7a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e7e:	e04a      	b.n	8003f16 <UART_SetConfig+0x2e6>
 8003e80:	2308      	movs	r3, #8
 8003e82:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e86:	e046      	b.n	8003f16 <UART_SetConfig+0x2e6>
 8003e88:	2310      	movs	r3, #16
 8003e8a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e8e:	e042      	b.n	8003f16 <UART_SetConfig+0x2e6>
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a17      	ldr	r2, [pc, #92]	@ (8003ef4 <UART_SetConfig+0x2c4>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d13a      	bne.n	8003f10 <UART_SetConfig+0x2e0>
 8003e9a:	4b18      	ldr	r3, [pc, #96]	@ (8003efc <UART_SetConfig+0x2cc>)
 8003e9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ea0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003ea4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003ea8:	d01a      	beq.n	8003ee0 <UART_SetConfig+0x2b0>
 8003eaa:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003eae:	d81b      	bhi.n	8003ee8 <UART_SetConfig+0x2b8>
 8003eb0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003eb4:	d00c      	beq.n	8003ed0 <UART_SetConfig+0x2a0>
 8003eb6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003eba:	d815      	bhi.n	8003ee8 <UART_SetConfig+0x2b8>
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d003      	beq.n	8003ec8 <UART_SetConfig+0x298>
 8003ec0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ec4:	d008      	beq.n	8003ed8 <UART_SetConfig+0x2a8>
 8003ec6:	e00f      	b.n	8003ee8 <UART_SetConfig+0x2b8>
 8003ec8:	2300      	movs	r3, #0
 8003eca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ece:	e022      	b.n	8003f16 <UART_SetConfig+0x2e6>
 8003ed0:	2302      	movs	r3, #2
 8003ed2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ed6:	e01e      	b.n	8003f16 <UART_SetConfig+0x2e6>
 8003ed8:	2304      	movs	r3, #4
 8003eda:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ede:	e01a      	b.n	8003f16 <UART_SetConfig+0x2e6>
 8003ee0:	2308      	movs	r3, #8
 8003ee2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ee6:	e016      	b.n	8003f16 <UART_SetConfig+0x2e6>
 8003ee8:	2310      	movs	r3, #16
 8003eea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003eee:	e012      	b.n	8003f16 <UART_SetConfig+0x2e6>
 8003ef0:	efff69f3 	.word	0xefff69f3
 8003ef4:	40008000 	.word	0x40008000
 8003ef8:	40013800 	.word	0x40013800
 8003efc:	40021000 	.word	0x40021000
 8003f00:	40004400 	.word	0x40004400
 8003f04:	40004800 	.word	0x40004800
 8003f08:	40004c00 	.word	0x40004c00
 8003f0c:	40005000 	.word	0x40005000
 8003f10:	2310      	movs	r3, #16
 8003f12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a9f      	ldr	r2, [pc, #636]	@ (8004198 <UART_SetConfig+0x568>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d17a      	bne.n	8004016 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003f20:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003f24:	2b08      	cmp	r3, #8
 8003f26:	d824      	bhi.n	8003f72 <UART_SetConfig+0x342>
 8003f28:	a201      	add	r2, pc, #4	@ (adr r2, 8003f30 <UART_SetConfig+0x300>)
 8003f2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f2e:	bf00      	nop
 8003f30:	08003f55 	.word	0x08003f55
 8003f34:	08003f73 	.word	0x08003f73
 8003f38:	08003f5d 	.word	0x08003f5d
 8003f3c:	08003f73 	.word	0x08003f73
 8003f40:	08003f63 	.word	0x08003f63
 8003f44:	08003f73 	.word	0x08003f73
 8003f48:	08003f73 	.word	0x08003f73
 8003f4c:	08003f73 	.word	0x08003f73
 8003f50:	08003f6b 	.word	0x08003f6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f54:	f7ff f8d6 	bl	8003104 <HAL_RCC_GetPCLK1Freq>
 8003f58:	61f8      	str	r0, [r7, #28]
        break;
 8003f5a:	e010      	b.n	8003f7e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f5c:	4b8f      	ldr	r3, [pc, #572]	@ (800419c <UART_SetConfig+0x56c>)
 8003f5e:	61fb      	str	r3, [r7, #28]
        break;
 8003f60:	e00d      	b.n	8003f7e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f62:	f7ff f837 	bl	8002fd4 <HAL_RCC_GetSysClockFreq>
 8003f66:	61f8      	str	r0, [r7, #28]
        break;
 8003f68:	e009      	b.n	8003f7e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f6a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003f6e:	61fb      	str	r3, [r7, #28]
        break;
 8003f70:	e005      	b.n	8003f7e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003f72:	2300      	movs	r3, #0
 8003f74:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003f76:	2301      	movs	r3, #1
 8003f78:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003f7c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003f7e:	69fb      	ldr	r3, [r7, #28]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	f000 80fb 	beq.w	800417c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	685a      	ldr	r2, [r3, #4]
 8003f8a:	4613      	mov	r3, r2
 8003f8c:	005b      	lsls	r3, r3, #1
 8003f8e:	4413      	add	r3, r2
 8003f90:	69fa      	ldr	r2, [r7, #28]
 8003f92:	429a      	cmp	r2, r3
 8003f94:	d305      	bcc.n	8003fa2 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003f9c:	69fa      	ldr	r2, [r7, #28]
 8003f9e:	429a      	cmp	r2, r3
 8003fa0:	d903      	bls.n	8003faa <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003fa8:	e0e8      	b.n	800417c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003faa:	69fb      	ldr	r3, [r7, #28]
 8003fac:	2200      	movs	r2, #0
 8003fae:	461c      	mov	r4, r3
 8003fb0:	4615      	mov	r5, r2
 8003fb2:	f04f 0200 	mov.w	r2, #0
 8003fb6:	f04f 0300 	mov.w	r3, #0
 8003fba:	022b      	lsls	r3, r5, #8
 8003fbc:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003fc0:	0222      	lsls	r2, r4, #8
 8003fc2:	68f9      	ldr	r1, [r7, #12]
 8003fc4:	6849      	ldr	r1, [r1, #4]
 8003fc6:	0849      	lsrs	r1, r1, #1
 8003fc8:	2000      	movs	r0, #0
 8003fca:	4688      	mov	r8, r1
 8003fcc:	4681      	mov	r9, r0
 8003fce:	eb12 0a08 	adds.w	sl, r2, r8
 8003fd2:	eb43 0b09 	adc.w	fp, r3, r9
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	603b      	str	r3, [r7, #0]
 8003fde:	607a      	str	r2, [r7, #4]
 8003fe0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003fe4:	4650      	mov	r0, sl
 8003fe6:	4659      	mov	r1, fp
 8003fe8:	f7fc f8ee 	bl	80001c8 <__aeabi_uldivmod>
 8003fec:	4602      	mov	r2, r0
 8003fee:	460b      	mov	r3, r1
 8003ff0:	4613      	mov	r3, r2
 8003ff2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003ff4:	69bb      	ldr	r3, [r7, #24]
 8003ff6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003ffa:	d308      	bcc.n	800400e <UART_SetConfig+0x3de>
 8003ffc:	69bb      	ldr	r3, [r7, #24]
 8003ffe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004002:	d204      	bcs.n	800400e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	69ba      	ldr	r2, [r7, #24]
 800400a:	60da      	str	r2, [r3, #12]
 800400c:	e0b6      	b.n	800417c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800400e:	2301      	movs	r3, #1
 8004010:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004014:	e0b2      	b.n	800417c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	69db      	ldr	r3, [r3, #28]
 800401a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800401e:	d15e      	bne.n	80040de <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004020:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004024:	2b08      	cmp	r3, #8
 8004026:	d828      	bhi.n	800407a <UART_SetConfig+0x44a>
 8004028:	a201      	add	r2, pc, #4	@ (adr r2, 8004030 <UART_SetConfig+0x400>)
 800402a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800402e:	bf00      	nop
 8004030:	08004055 	.word	0x08004055
 8004034:	0800405d 	.word	0x0800405d
 8004038:	08004065 	.word	0x08004065
 800403c:	0800407b 	.word	0x0800407b
 8004040:	0800406b 	.word	0x0800406b
 8004044:	0800407b 	.word	0x0800407b
 8004048:	0800407b 	.word	0x0800407b
 800404c:	0800407b 	.word	0x0800407b
 8004050:	08004073 	.word	0x08004073
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004054:	f7ff f856 	bl	8003104 <HAL_RCC_GetPCLK1Freq>
 8004058:	61f8      	str	r0, [r7, #28]
        break;
 800405a:	e014      	b.n	8004086 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800405c:	f7ff f868 	bl	8003130 <HAL_RCC_GetPCLK2Freq>
 8004060:	61f8      	str	r0, [r7, #28]
        break;
 8004062:	e010      	b.n	8004086 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004064:	4b4d      	ldr	r3, [pc, #308]	@ (800419c <UART_SetConfig+0x56c>)
 8004066:	61fb      	str	r3, [r7, #28]
        break;
 8004068:	e00d      	b.n	8004086 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800406a:	f7fe ffb3 	bl	8002fd4 <HAL_RCC_GetSysClockFreq>
 800406e:	61f8      	str	r0, [r7, #28]
        break;
 8004070:	e009      	b.n	8004086 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004072:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004076:	61fb      	str	r3, [r7, #28]
        break;
 8004078:	e005      	b.n	8004086 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800407a:	2300      	movs	r3, #0
 800407c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800407e:	2301      	movs	r3, #1
 8004080:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004084:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004086:	69fb      	ldr	r3, [r7, #28]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d077      	beq.n	800417c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800408c:	69fb      	ldr	r3, [r7, #28]
 800408e:	005a      	lsls	r2, r3, #1
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	085b      	lsrs	r3, r3, #1
 8004096:	441a      	add	r2, r3
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	fbb2 f3f3 	udiv	r3, r2, r3
 80040a0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80040a2:	69bb      	ldr	r3, [r7, #24]
 80040a4:	2b0f      	cmp	r3, #15
 80040a6:	d916      	bls.n	80040d6 <UART_SetConfig+0x4a6>
 80040a8:	69bb      	ldr	r3, [r7, #24]
 80040aa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80040ae:	d212      	bcs.n	80040d6 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80040b0:	69bb      	ldr	r3, [r7, #24]
 80040b2:	b29b      	uxth	r3, r3
 80040b4:	f023 030f 	bic.w	r3, r3, #15
 80040b8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80040ba:	69bb      	ldr	r3, [r7, #24]
 80040bc:	085b      	lsrs	r3, r3, #1
 80040be:	b29b      	uxth	r3, r3
 80040c0:	f003 0307 	and.w	r3, r3, #7
 80040c4:	b29a      	uxth	r2, r3
 80040c6:	8afb      	ldrh	r3, [r7, #22]
 80040c8:	4313      	orrs	r3, r2
 80040ca:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	8afa      	ldrh	r2, [r7, #22]
 80040d2:	60da      	str	r2, [r3, #12]
 80040d4:	e052      	b.n	800417c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80040d6:	2301      	movs	r3, #1
 80040d8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80040dc:	e04e      	b.n	800417c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80040de:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80040e2:	2b08      	cmp	r3, #8
 80040e4:	d827      	bhi.n	8004136 <UART_SetConfig+0x506>
 80040e6:	a201      	add	r2, pc, #4	@ (adr r2, 80040ec <UART_SetConfig+0x4bc>)
 80040e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040ec:	08004111 	.word	0x08004111
 80040f0:	08004119 	.word	0x08004119
 80040f4:	08004121 	.word	0x08004121
 80040f8:	08004137 	.word	0x08004137
 80040fc:	08004127 	.word	0x08004127
 8004100:	08004137 	.word	0x08004137
 8004104:	08004137 	.word	0x08004137
 8004108:	08004137 	.word	0x08004137
 800410c:	0800412f 	.word	0x0800412f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004110:	f7fe fff8 	bl	8003104 <HAL_RCC_GetPCLK1Freq>
 8004114:	61f8      	str	r0, [r7, #28]
        break;
 8004116:	e014      	b.n	8004142 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004118:	f7ff f80a 	bl	8003130 <HAL_RCC_GetPCLK2Freq>
 800411c:	61f8      	str	r0, [r7, #28]
        break;
 800411e:	e010      	b.n	8004142 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004120:	4b1e      	ldr	r3, [pc, #120]	@ (800419c <UART_SetConfig+0x56c>)
 8004122:	61fb      	str	r3, [r7, #28]
        break;
 8004124:	e00d      	b.n	8004142 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004126:	f7fe ff55 	bl	8002fd4 <HAL_RCC_GetSysClockFreq>
 800412a:	61f8      	str	r0, [r7, #28]
        break;
 800412c:	e009      	b.n	8004142 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800412e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004132:	61fb      	str	r3, [r7, #28]
        break;
 8004134:	e005      	b.n	8004142 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004136:	2300      	movs	r3, #0
 8004138:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800413a:	2301      	movs	r3, #1
 800413c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004140:	bf00      	nop
    }

    if (pclk != 0U)
 8004142:	69fb      	ldr	r3, [r7, #28]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d019      	beq.n	800417c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	085a      	lsrs	r2, r3, #1
 800414e:	69fb      	ldr	r3, [r7, #28]
 8004150:	441a      	add	r2, r3
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	fbb2 f3f3 	udiv	r3, r2, r3
 800415a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800415c:	69bb      	ldr	r3, [r7, #24]
 800415e:	2b0f      	cmp	r3, #15
 8004160:	d909      	bls.n	8004176 <UART_SetConfig+0x546>
 8004162:	69bb      	ldr	r3, [r7, #24]
 8004164:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004168:	d205      	bcs.n	8004176 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800416a:	69bb      	ldr	r3, [r7, #24]
 800416c:	b29a      	uxth	r2, r3
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	60da      	str	r2, [r3, #12]
 8004174:	e002      	b.n	800417c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004176:	2301      	movs	r3, #1
 8004178:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	2200      	movs	r2, #0
 8004180:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	2200      	movs	r2, #0
 8004186:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004188:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 800418c:	4618      	mov	r0, r3
 800418e:	3728      	adds	r7, #40	@ 0x28
 8004190:	46bd      	mov	sp, r7
 8004192:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004196:	bf00      	nop
 8004198:	40008000 	.word	0x40008000
 800419c:	00f42400 	.word	0x00f42400

080041a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80041a0:	b480      	push	{r7}
 80041a2:	b083      	sub	sp, #12
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041ac:	f003 0308 	and.w	r3, r3, #8
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d00a      	beq.n	80041ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	430a      	orrs	r2, r1
 80041c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041ce:	f003 0301 	and.w	r3, r3, #1
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d00a      	beq.n	80041ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	430a      	orrs	r2, r1
 80041ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041f0:	f003 0302 	and.w	r3, r3, #2
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d00a      	beq.n	800420e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	430a      	orrs	r2, r1
 800420c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004212:	f003 0304 	and.w	r3, r3, #4
 8004216:	2b00      	cmp	r3, #0
 8004218:	d00a      	beq.n	8004230 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	430a      	orrs	r2, r1
 800422e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004234:	f003 0310 	and.w	r3, r3, #16
 8004238:	2b00      	cmp	r3, #0
 800423a:	d00a      	beq.n	8004252 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	689b      	ldr	r3, [r3, #8]
 8004242:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	430a      	orrs	r2, r1
 8004250:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004256:	f003 0320 	and.w	r3, r3, #32
 800425a:	2b00      	cmp	r3, #0
 800425c:	d00a      	beq.n	8004274 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	689b      	ldr	r3, [r3, #8]
 8004264:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	430a      	orrs	r2, r1
 8004272:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004278:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800427c:	2b00      	cmp	r3, #0
 800427e:	d01a      	beq.n	80042b6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	430a      	orrs	r2, r1
 8004294:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800429a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800429e:	d10a      	bne.n	80042b6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	430a      	orrs	r2, r1
 80042b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d00a      	beq.n	80042d8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	430a      	orrs	r2, r1
 80042d6:	605a      	str	r2, [r3, #4]
  }
}
 80042d8:	bf00      	nop
 80042da:	370c      	adds	r7, #12
 80042dc:	46bd      	mov	sp, r7
 80042de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e2:	4770      	bx	lr

080042e4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b098      	sub	sp, #96	@ 0x60
 80042e8:	af02      	add	r7, sp, #8
 80042ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2200      	movs	r2, #0
 80042f0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80042f4:	f7fc fc34 	bl	8000b60 <HAL_GetTick>
 80042f8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f003 0308 	and.w	r3, r3, #8
 8004304:	2b08      	cmp	r3, #8
 8004306:	d12e      	bne.n	8004366 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004308:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800430c:	9300      	str	r3, [sp, #0]
 800430e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004310:	2200      	movs	r2, #0
 8004312:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004316:	6878      	ldr	r0, [r7, #4]
 8004318:	f000 f88c 	bl	8004434 <UART_WaitOnFlagUntilTimeout>
 800431c:	4603      	mov	r3, r0
 800431e:	2b00      	cmp	r3, #0
 8004320:	d021      	beq.n	8004366 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004328:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800432a:	e853 3f00 	ldrex	r3, [r3]
 800432e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004330:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004332:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004336:	653b      	str	r3, [r7, #80]	@ 0x50
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	461a      	mov	r2, r3
 800433e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004340:	647b      	str	r3, [r7, #68]	@ 0x44
 8004342:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004344:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004346:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004348:	e841 2300 	strex	r3, r2, [r1]
 800434c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800434e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004350:	2b00      	cmp	r3, #0
 8004352:	d1e6      	bne.n	8004322 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2220      	movs	r2, #32
 8004358:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2200      	movs	r2, #0
 800435e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004362:	2303      	movs	r3, #3
 8004364:	e062      	b.n	800442c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f003 0304 	and.w	r3, r3, #4
 8004370:	2b04      	cmp	r3, #4
 8004372:	d149      	bne.n	8004408 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004374:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004378:	9300      	str	r3, [sp, #0]
 800437a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800437c:	2200      	movs	r2, #0
 800437e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004382:	6878      	ldr	r0, [r7, #4]
 8004384:	f000 f856 	bl	8004434 <UART_WaitOnFlagUntilTimeout>
 8004388:	4603      	mov	r3, r0
 800438a:	2b00      	cmp	r3, #0
 800438c:	d03c      	beq.n	8004408 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004394:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004396:	e853 3f00 	ldrex	r3, [r3]
 800439a:	623b      	str	r3, [r7, #32]
   return(result);
 800439c:	6a3b      	ldr	r3, [r7, #32]
 800439e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80043a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	461a      	mov	r2, r3
 80043aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80043ac:	633b      	str	r3, [r7, #48]	@ 0x30
 80043ae:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043b0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80043b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80043b4:	e841 2300 	strex	r3, r2, [r1]
 80043b8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80043ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d1e6      	bne.n	800438e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	3308      	adds	r3, #8
 80043c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043c8:	693b      	ldr	r3, [r7, #16]
 80043ca:	e853 3f00 	ldrex	r3, [r3]
 80043ce:	60fb      	str	r3, [r7, #12]
   return(result);
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	f023 0301 	bic.w	r3, r3, #1
 80043d6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	3308      	adds	r3, #8
 80043de:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80043e0:	61fa      	str	r2, [r7, #28]
 80043e2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043e4:	69b9      	ldr	r1, [r7, #24]
 80043e6:	69fa      	ldr	r2, [r7, #28]
 80043e8:	e841 2300 	strex	r3, r2, [r1]
 80043ec:	617b      	str	r3, [r7, #20]
   return(result);
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d1e5      	bne.n	80043c0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2220      	movs	r2, #32
 80043f8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2200      	movs	r2, #0
 8004400:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004404:	2303      	movs	r3, #3
 8004406:	e011      	b.n	800442c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2220      	movs	r2, #32
 800440c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2220      	movs	r2, #32
 8004412:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2200      	movs	r2, #0
 800441a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2200      	movs	r2, #0
 8004420:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2200      	movs	r2, #0
 8004426:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800442a:	2300      	movs	r3, #0
}
 800442c:	4618      	mov	r0, r3
 800442e:	3758      	adds	r7, #88	@ 0x58
 8004430:	46bd      	mov	sp, r7
 8004432:	bd80      	pop	{r7, pc}

08004434 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b084      	sub	sp, #16
 8004438:	af00      	add	r7, sp, #0
 800443a:	60f8      	str	r0, [r7, #12]
 800443c:	60b9      	str	r1, [r7, #8]
 800443e:	603b      	str	r3, [r7, #0]
 8004440:	4613      	mov	r3, r2
 8004442:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004444:	e04f      	b.n	80044e6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004446:	69bb      	ldr	r3, [r7, #24]
 8004448:	f1b3 3fff 	cmp.w	r3, #4294967295
 800444c:	d04b      	beq.n	80044e6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800444e:	f7fc fb87 	bl	8000b60 <HAL_GetTick>
 8004452:	4602      	mov	r2, r0
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	1ad3      	subs	r3, r2, r3
 8004458:	69ba      	ldr	r2, [r7, #24]
 800445a:	429a      	cmp	r2, r3
 800445c:	d302      	bcc.n	8004464 <UART_WaitOnFlagUntilTimeout+0x30>
 800445e:	69bb      	ldr	r3, [r7, #24]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d101      	bne.n	8004468 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004464:	2303      	movs	r3, #3
 8004466:	e04e      	b.n	8004506 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f003 0304 	and.w	r3, r3, #4
 8004472:	2b00      	cmp	r3, #0
 8004474:	d037      	beq.n	80044e6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	2b80      	cmp	r3, #128	@ 0x80
 800447a:	d034      	beq.n	80044e6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	2b40      	cmp	r3, #64	@ 0x40
 8004480:	d031      	beq.n	80044e6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	69db      	ldr	r3, [r3, #28]
 8004488:	f003 0308 	and.w	r3, r3, #8
 800448c:	2b08      	cmp	r3, #8
 800448e:	d110      	bne.n	80044b2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	2208      	movs	r2, #8
 8004496:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004498:	68f8      	ldr	r0, [r7, #12]
 800449a:	f000 f838 	bl	800450e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	2208      	movs	r2, #8
 80044a2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	2200      	movs	r2, #0
 80044aa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80044ae:	2301      	movs	r3, #1
 80044b0:	e029      	b.n	8004506 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	69db      	ldr	r3, [r3, #28]
 80044b8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80044bc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80044c0:	d111      	bne.n	80044e6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80044ca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80044cc:	68f8      	ldr	r0, [r7, #12]
 80044ce:	f000 f81e 	bl	800450e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	2220      	movs	r2, #32
 80044d6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	2200      	movs	r2, #0
 80044de:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80044e2:	2303      	movs	r3, #3
 80044e4:	e00f      	b.n	8004506 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	69da      	ldr	r2, [r3, #28]
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	4013      	ands	r3, r2
 80044f0:	68ba      	ldr	r2, [r7, #8]
 80044f2:	429a      	cmp	r2, r3
 80044f4:	bf0c      	ite	eq
 80044f6:	2301      	moveq	r3, #1
 80044f8:	2300      	movne	r3, #0
 80044fa:	b2db      	uxtb	r3, r3
 80044fc:	461a      	mov	r2, r3
 80044fe:	79fb      	ldrb	r3, [r7, #7]
 8004500:	429a      	cmp	r2, r3
 8004502:	d0a0      	beq.n	8004446 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004504:	2300      	movs	r3, #0
}
 8004506:	4618      	mov	r0, r3
 8004508:	3710      	adds	r7, #16
 800450a:	46bd      	mov	sp, r7
 800450c:	bd80      	pop	{r7, pc}

0800450e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800450e:	b480      	push	{r7}
 8004510:	b095      	sub	sp, #84	@ 0x54
 8004512:	af00      	add	r7, sp, #0
 8004514:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800451c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800451e:	e853 3f00 	ldrex	r3, [r3]
 8004522:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004524:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004526:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800452a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	461a      	mov	r2, r3
 8004532:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004534:	643b      	str	r3, [r7, #64]	@ 0x40
 8004536:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004538:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800453a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800453c:	e841 2300 	strex	r3, r2, [r1]
 8004540:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004542:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004544:	2b00      	cmp	r3, #0
 8004546:	d1e6      	bne.n	8004516 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	3308      	adds	r3, #8
 800454e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004550:	6a3b      	ldr	r3, [r7, #32]
 8004552:	e853 3f00 	ldrex	r3, [r3]
 8004556:	61fb      	str	r3, [r7, #28]
   return(result);
 8004558:	69fb      	ldr	r3, [r7, #28]
 800455a:	f023 0301 	bic.w	r3, r3, #1
 800455e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	3308      	adds	r3, #8
 8004566:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004568:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800456a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800456c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800456e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004570:	e841 2300 	strex	r3, r2, [r1]
 8004574:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004578:	2b00      	cmp	r3, #0
 800457a:	d1e5      	bne.n	8004548 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004580:	2b01      	cmp	r3, #1
 8004582:	d118      	bne.n	80045b6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	e853 3f00 	ldrex	r3, [r3]
 8004590:	60bb      	str	r3, [r7, #8]
   return(result);
 8004592:	68bb      	ldr	r3, [r7, #8]
 8004594:	f023 0310 	bic.w	r3, r3, #16
 8004598:	647b      	str	r3, [r7, #68]	@ 0x44
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	461a      	mov	r2, r3
 80045a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80045a2:	61bb      	str	r3, [r7, #24]
 80045a4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045a6:	6979      	ldr	r1, [r7, #20]
 80045a8:	69ba      	ldr	r2, [r7, #24]
 80045aa:	e841 2300 	strex	r3, r2, [r1]
 80045ae:	613b      	str	r3, [r7, #16]
   return(result);
 80045b0:	693b      	ldr	r3, [r7, #16]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d1e6      	bne.n	8004584 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2220      	movs	r2, #32
 80045ba:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2200      	movs	r2, #0
 80045c2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2200      	movs	r2, #0
 80045c8:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80045ca:	bf00      	nop
 80045cc:	3754      	adds	r7, #84	@ 0x54
 80045ce:	46bd      	mov	sp, r7
 80045d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d4:	4770      	bx	lr

080045d6 <memset>:
 80045d6:	4402      	add	r2, r0
 80045d8:	4603      	mov	r3, r0
 80045da:	4293      	cmp	r3, r2
 80045dc:	d100      	bne.n	80045e0 <memset+0xa>
 80045de:	4770      	bx	lr
 80045e0:	f803 1b01 	strb.w	r1, [r3], #1
 80045e4:	e7f9      	b.n	80045da <memset+0x4>
	...

080045e8 <__libc_init_array>:
 80045e8:	b570      	push	{r4, r5, r6, lr}
 80045ea:	4d0d      	ldr	r5, [pc, #52]	@ (8004620 <__libc_init_array+0x38>)
 80045ec:	4c0d      	ldr	r4, [pc, #52]	@ (8004624 <__libc_init_array+0x3c>)
 80045ee:	1b64      	subs	r4, r4, r5
 80045f0:	10a4      	asrs	r4, r4, #2
 80045f2:	2600      	movs	r6, #0
 80045f4:	42a6      	cmp	r6, r4
 80045f6:	d109      	bne.n	800460c <__libc_init_array+0x24>
 80045f8:	4d0b      	ldr	r5, [pc, #44]	@ (8004628 <__libc_init_array+0x40>)
 80045fa:	4c0c      	ldr	r4, [pc, #48]	@ (800462c <__libc_init_array+0x44>)
 80045fc:	f000 f818 	bl	8004630 <_init>
 8004600:	1b64      	subs	r4, r4, r5
 8004602:	10a4      	asrs	r4, r4, #2
 8004604:	2600      	movs	r6, #0
 8004606:	42a6      	cmp	r6, r4
 8004608:	d105      	bne.n	8004616 <__libc_init_array+0x2e>
 800460a:	bd70      	pop	{r4, r5, r6, pc}
 800460c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004610:	4798      	blx	r3
 8004612:	3601      	adds	r6, #1
 8004614:	e7ee      	b.n	80045f4 <__libc_init_array+0xc>
 8004616:	f855 3b04 	ldr.w	r3, [r5], #4
 800461a:	4798      	blx	r3
 800461c:	3601      	adds	r6, #1
 800461e:	e7f2      	b.n	8004606 <__libc_init_array+0x1e>
 8004620:	08004698 	.word	0x08004698
 8004624:	08004698 	.word	0x08004698
 8004628:	08004698 	.word	0x08004698
 800462c:	0800469c 	.word	0x0800469c

08004630 <_init>:
 8004630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004632:	bf00      	nop
 8004634:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004636:	bc08      	pop	{r3}
 8004638:	469e      	mov	lr, r3
 800463a:	4770      	bx	lr

0800463c <_fini>:
 800463c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800463e:	bf00      	nop
 8004640:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004642:	bc08      	pop	{r3}
 8004644:	469e      	mov	lr, r3
 8004646:	4770      	bx	lr
