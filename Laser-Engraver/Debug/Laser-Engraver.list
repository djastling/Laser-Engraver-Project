
Laser-Engraver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007850  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000110  080079e0  080079e0  000089e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007af0  08007af0  00009070  2**0
                  CONTENTS
  4 .ARM          00000008  08007af0  08007af0  00008af0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007af8  08007af8  00009070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007af8  08007af8  00008af8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007afc  08007afc  00008afc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  08007b00  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001cec  20000070  08007b70  00009070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001d5c  08007b70  00009d5c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f688  00000000  00000000  000090a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003bbd  00000000  00000000  00028728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a88  00000000  00000000  0002c2e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000014b4  00000000  00000000  0002dd70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000038de  00000000  00000000  0002f224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d097  00000000  00000000  00032b02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010fc4c  00000000  00000000  0004fb99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015f7e5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000074ac  00000000  00000000  0015f828  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  00166cd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080079c8 	.word	0x080079c8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	080079c8 	.word	0x080079c8

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b96a 	b.w	80004bc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	460c      	mov	r4, r1
 8000208:	2b00      	cmp	r3, #0
 800020a:	d14e      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020c:	4694      	mov	ip, r2
 800020e:	458c      	cmp	ip, r1
 8000210:	4686      	mov	lr, r0
 8000212:	fab2 f282 	clz	r2, r2
 8000216:	d962      	bls.n	80002de <__udivmoddi4+0xde>
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0320 	rsb	r3, r2, #32
 800021e:	4091      	lsls	r1, r2
 8000220:	fa20 f303 	lsr.w	r3, r0, r3
 8000224:	fa0c fc02 	lsl.w	ip, ip, r2
 8000228:	4319      	orrs	r1, r3
 800022a:	fa00 fe02 	lsl.w	lr, r0, r2
 800022e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000232:	fa1f f68c 	uxth.w	r6, ip
 8000236:	fbb1 f4f7 	udiv	r4, r1, r7
 800023a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800023e:	fb07 1114 	mls	r1, r7, r4, r1
 8000242:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000246:	fb04 f106 	mul.w	r1, r4, r6
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f104 30ff 	add.w	r0, r4, #4294967295
 8000256:	f080 8112 	bcs.w	800047e <__udivmoddi4+0x27e>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 810f 	bls.w	800047e <__udivmoddi4+0x27e>
 8000260:	3c02      	subs	r4, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a59      	subs	r1, r3, r1
 8000266:	fa1f f38e 	uxth.w	r3, lr
 800026a:	fbb1 f0f7 	udiv	r0, r1, r7
 800026e:	fb07 1110 	mls	r1, r7, r0, r1
 8000272:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000276:	fb00 f606 	mul.w	r6, r0, r6
 800027a:	429e      	cmp	r6, r3
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x94>
 800027e:	eb1c 0303 	adds.w	r3, ip, r3
 8000282:	f100 31ff 	add.w	r1, r0, #4294967295
 8000286:	f080 80fc 	bcs.w	8000482 <__udivmoddi4+0x282>
 800028a:	429e      	cmp	r6, r3
 800028c:	f240 80f9 	bls.w	8000482 <__udivmoddi4+0x282>
 8000290:	4463      	add	r3, ip
 8000292:	3802      	subs	r0, #2
 8000294:	1b9b      	subs	r3, r3, r6
 8000296:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029a:	2100      	movs	r1, #0
 800029c:	b11d      	cbz	r5, 80002a6 <__udivmoddi4+0xa6>
 800029e:	40d3      	lsrs	r3, r2
 80002a0:	2200      	movs	r2, #0
 80002a2:	e9c5 3200 	strd	r3, r2, [r5]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d905      	bls.n	80002ba <__udivmoddi4+0xba>
 80002ae:	b10d      	cbz	r5, 80002b4 <__udivmoddi4+0xb4>
 80002b0:	e9c5 0100 	strd	r0, r1, [r5]
 80002b4:	2100      	movs	r1, #0
 80002b6:	4608      	mov	r0, r1
 80002b8:	e7f5      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002ba:	fab3 f183 	clz	r1, r3
 80002be:	2900      	cmp	r1, #0
 80002c0:	d146      	bne.n	8000350 <__udivmoddi4+0x150>
 80002c2:	42a3      	cmp	r3, r4
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xcc>
 80002c6:	4290      	cmp	r0, r2
 80002c8:	f0c0 80f0 	bcc.w	80004ac <__udivmoddi4+0x2ac>
 80002cc:	1a86      	subs	r6, r0, r2
 80002ce:	eb64 0303 	sbc.w	r3, r4, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	2d00      	cmp	r5, #0
 80002d6:	d0e6      	beq.n	80002a6 <__udivmoddi4+0xa6>
 80002d8:	e9c5 6300 	strd	r6, r3, [r5]
 80002dc:	e7e3      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002de:	2a00      	cmp	r2, #0
 80002e0:	f040 8090 	bne.w	8000404 <__udivmoddi4+0x204>
 80002e4:	eba1 040c 	sub.w	r4, r1, ip
 80002e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002ec:	fa1f f78c 	uxth.w	r7, ip
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb4 f6f8 	udiv	r6, r4, r8
 80002f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fa:	fb08 4416 	mls	r4, r8, r6, r4
 80002fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000302:	fb07 f006 	mul.w	r0, r7, r6
 8000306:	4298      	cmp	r0, r3
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x11c>
 800030a:	eb1c 0303 	adds.w	r3, ip, r3
 800030e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x11a>
 8000314:	4298      	cmp	r0, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 800031a:	4626      	mov	r6, r4
 800031c:	1a1c      	subs	r4, r3, r0
 800031e:	fa1f f38e 	uxth.w	r3, lr
 8000322:	fbb4 f0f8 	udiv	r0, r4, r8
 8000326:	fb08 4410 	mls	r4, r8, r0, r4
 800032a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800032e:	fb00 f707 	mul.w	r7, r0, r7
 8000332:	429f      	cmp	r7, r3
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x148>
 8000336:	eb1c 0303 	adds.w	r3, ip, r3
 800033a:	f100 34ff 	add.w	r4, r0, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x146>
 8000340:	429f      	cmp	r7, r3
 8000342:	f200 80b0 	bhi.w	80004a6 <__udivmoddi4+0x2a6>
 8000346:	4620      	mov	r0, r4
 8000348:	1bdb      	subs	r3, r3, r7
 800034a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800034e:	e7a5      	b.n	800029c <__udivmoddi4+0x9c>
 8000350:	f1c1 0620 	rsb	r6, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 f706 	lsr.w	r7, r2, r6
 800035a:	431f      	orrs	r7, r3
 800035c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000360:	fa04 f301 	lsl.w	r3, r4, r1
 8000364:	ea43 030c 	orr.w	r3, r3, ip
 8000368:	40f4      	lsrs	r4, r6
 800036a:	fa00 f801 	lsl.w	r8, r0, r1
 800036e:	0c38      	lsrs	r0, r7, #16
 8000370:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000374:	fbb4 fef0 	udiv	lr, r4, r0
 8000378:	fa1f fc87 	uxth.w	ip, r7
 800037c:	fb00 441e 	mls	r4, r0, lr, r4
 8000380:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000384:	fb0e f90c 	mul.w	r9, lr, ip
 8000388:	45a1      	cmp	r9, r4
 800038a:	fa02 f201 	lsl.w	r2, r2, r1
 800038e:	d90a      	bls.n	80003a6 <__udivmoddi4+0x1a6>
 8000390:	193c      	adds	r4, r7, r4
 8000392:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000396:	f080 8084 	bcs.w	80004a2 <__udivmoddi4+0x2a2>
 800039a:	45a1      	cmp	r9, r4
 800039c:	f240 8081 	bls.w	80004a2 <__udivmoddi4+0x2a2>
 80003a0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a4:	443c      	add	r4, r7
 80003a6:	eba4 0409 	sub.w	r4, r4, r9
 80003aa:	fa1f f983 	uxth.w	r9, r3
 80003ae:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b2:	fb00 4413 	mls	r4, r0, r3, r4
 80003b6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ba:	fb03 fc0c 	mul.w	ip, r3, ip
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d907      	bls.n	80003d2 <__udivmoddi4+0x1d2>
 80003c2:	193c      	adds	r4, r7, r4
 80003c4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c8:	d267      	bcs.n	800049a <__udivmoddi4+0x29a>
 80003ca:	45a4      	cmp	ip, r4
 80003cc:	d965      	bls.n	800049a <__udivmoddi4+0x29a>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003d6:	fba0 9302 	umull	r9, r3, r0, r2
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	429c      	cmp	r4, r3
 80003e0:	46ce      	mov	lr, r9
 80003e2:	469c      	mov	ip, r3
 80003e4:	d351      	bcc.n	800048a <__udivmoddi4+0x28a>
 80003e6:	d04e      	beq.n	8000486 <__udivmoddi4+0x286>
 80003e8:	b155      	cbz	r5, 8000400 <__udivmoddi4+0x200>
 80003ea:	ebb8 030e 	subs.w	r3, r8, lr
 80003ee:	eb64 040c 	sbc.w	r4, r4, ip
 80003f2:	fa04 f606 	lsl.w	r6, r4, r6
 80003f6:	40cb      	lsrs	r3, r1
 80003f8:	431e      	orrs	r6, r3
 80003fa:	40cc      	lsrs	r4, r1
 80003fc:	e9c5 6400 	strd	r6, r4, [r5]
 8000400:	2100      	movs	r1, #0
 8000402:	e750      	b.n	80002a6 <__udivmoddi4+0xa6>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f103 	lsr.w	r1, r0, r3
 800040c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000410:	fa24 f303 	lsr.w	r3, r4, r3
 8000414:	4094      	lsls	r4, r2
 8000416:	430c      	orrs	r4, r1
 8000418:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800041c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000420:	fa1f f78c 	uxth.w	r7, ip
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3110 	mls	r1, r8, r0, r3
 800042c:	0c23      	lsrs	r3, r4, #16
 800042e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000432:	fb00 f107 	mul.w	r1, r0, r7
 8000436:	4299      	cmp	r1, r3
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x24c>
 800043a:	eb1c 0303 	adds.w	r3, ip, r3
 800043e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000442:	d22c      	bcs.n	800049e <__udivmoddi4+0x29e>
 8000444:	4299      	cmp	r1, r3
 8000446:	d92a      	bls.n	800049e <__udivmoddi4+0x29e>
 8000448:	3802      	subs	r0, #2
 800044a:	4463      	add	r3, ip
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb3 f1f8 	udiv	r1, r3, r8
 8000454:	fb08 3311 	mls	r3, r8, r1, r3
 8000458:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800045c:	fb01 f307 	mul.w	r3, r1, r7
 8000460:	42a3      	cmp	r3, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x276>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f101 36ff 	add.w	r6, r1, #4294967295
 800046c:	d213      	bcs.n	8000496 <__udivmoddi4+0x296>
 800046e:	42a3      	cmp	r3, r4
 8000470:	d911      	bls.n	8000496 <__udivmoddi4+0x296>
 8000472:	3902      	subs	r1, #2
 8000474:	4464      	add	r4, ip
 8000476:	1ae4      	subs	r4, r4, r3
 8000478:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800047c:	e739      	b.n	80002f2 <__udivmoddi4+0xf2>
 800047e:	4604      	mov	r4, r0
 8000480:	e6f0      	b.n	8000264 <__udivmoddi4+0x64>
 8000482:	4608      	mov	r0, r1
 8000484:	e706      	b.n	8000294 <__udivmoddi4+0x94>
 8000486:	45c8      	cmp	r8, r9
 8000488:	d2ae      	bcs.n	80003e8 <__udivmoddi4+0x1e8>
 800048a:	ebb9 0e02 	subs.w	lr, r9, r2
 800048e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000492:	3801      	subs	r0, #1
 8000494:	e7a8      	b.n	80003e8 <__udivmoddi4+0x1e8>
 8000496:	4631      	mov	r1, r6
 8000498:	e7ed      	b.n	8000476 <__udivmoddi4+0x276>
 800049a:	4603      	mov	r3, r0
 800049c:	e799      	b.n	80003d2 <__udivmoddi4+0x1d2>
 800049e:	4630      	mov	r0, r6
 80004a0:	e7d4      	b.n	800044c <__udivmoddi4+0x24c>
 80004a2:	46d6      	mov	lr, sl
 80004a4:	e77f      	b.n	80003a6 <__udivmoddi4+0x1a6>
 80004a6:	4463      	add	r3, ip
 80004a8:	3802      	subs	r0, #2
 80004aa:	e74d      	b.n	8000348 <__udivmoddi4+0x148>
 80004ac:	4606      	mov	r6, r0
 80004ae:	4623      	mov	r3, r4
 80004b0:	4608      	mov	r0, r1
 80004b2:	e70f      	b.n	80002d4 <__udivmoddi4+0xd4>
 80004b4:	3e02      	subs	r6, #2
 80004b6:	4463      	add	r3, ip
 80004b8:	e730      	b.n	800031c <__udivmoddi4+0x11c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c4:	f000 fdb2 	bl	800102c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c8:	f000 f85c 	bl	8000584 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004cc:	f000 f99e 	bl	800080c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004d0:	f000 f96c 	bl	80007ac <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80004d4:	f000 f8a8 	bl	8000628 <MX_ADC1_Init>
  MX_TIM16_Init();
 80004d8:	f000 f91c 	bl	8000714 <MX_TIM16_Init>
  MX_TIM17_Init();
 80004dc:	f000 f940 	bl	8000760 <MX_TIM17_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80004e0:	f004 fbde 	bl	8004ca0 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80004e4:	4a1a      	ldr	r2, [pc, #104]	@ (8000550 <main+0x90>)
 80004e6:	2100      	movs	r1, #0
 80004e8:	481a      	ldr	r0, [pc, #104]	@ (8000554 <main+0x94>)
 80004ea:	f004 fc23 	bl	8004d34 <osThreadNew>
 80004ee:	4603      	mov	r3, r0
 80004f0:	4a19      	ldr	r2, [pc, #100]	@ (8000558 <main+0x98>)
 80004f2:	6013      	str	r3, [r2, #0]

  /* creation of turnXMotor */
  turnXMotorHandle = osThreadNew(StartXMotor, NULL, &turnXMotor_attributes);
 80004f4:	4a19      	ldr	r2, [pc, #100]	@ (800055c <main+0x9c>)
 80004f6:	2100      	movs	r1, #0
 80004f8:	4819      	ldr	r0, [pc, #100]	@ (8000560 <main+0xa0>)
 80004fa:	f004 fc1b 	bl	8004d34 <osThreadNew>
 80004fe:	4603      	mov	r3, r0
 8000500:	4a18      	ldr	r2, [pc, #96]	@ (8000564 <main+0xa4>)
 8000502:	6013      	str	r3, [r2, #0]

  /* creation of turnYMotor */
  turnYMotorHandle = osThreadNew(StartYMotor, NULL, &turnYMotor_attributes);
 8000504:	4a18      	ldr	r2, [pc, #96]	@ (8000568 <main+0xa8>)
 8000506:	2100      	movs	r1, #0
 8000508:	4818      	ldr	r0, [pc, #96]	@ (800056c <main+0xac>)
 800050a:	f004 fc13 	bl	8004d34 <osThreadNew>
 800050e:	4603      	mov	r3, r0
 8000510:	4a17      	ldr	r2, [pc, #92]	@ (8000570 <main+0xb0>)
 8000512:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  osThreadNew(StartXMotor, "Start X Motor", &turnXMotor_attributes);
 8000514:	4a11      	ldr	r2, [pc, #68]	@ (800055c <main+0x9c>)
 8000516:	4917      	ldr	r1, [pc, #92]	@ (8000574 <main+0xb4>)
 8000518:	4811      	ldr	r0, [pc, #68]	@ (8000560 <main+0xa0>)
 800051a:	f004 fc0b 	bl	8004d34 <osThreadNew>
  osThreadNew(StartYMotor, "Start Y Motor", &turnYMotor_attributes);
 800051e:	4a12      	ldr	r2, [pc, #72]	@ (8000568 <main+0xa8>)
 8000520:	4915      	ldr	r1, [pc, #84]	@ (8000578 <main+0xb8>)
 8000522:	4812      	ldr	r0, [pc, #72]	@ (800056c <main+0xac>)
 8000524:	f004 fc06 	bl	8004d34 <osThreadNew>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000528:	f004 fbde 	bl	8004ce8 <osKernelStart>
	  for(int i = 0; i<numberoflines; i++)
	  {

	  }
	  **/
	  Xend = 100;
 800052c:	4b13      	ldr	r3, [pc, #76]	@ (800057c <main+0xbc>)
 800052e:	2264      	movs	r2, #100	@ 0x64
 8000530:	601a      	str	r2, [r3, #0]
	  Yend = 100;
 8000532:	4b13      	ldr	r3, [pc, #76]	@ (8000580 <main+0xc0>)
 8000534:	2264      	movs	r2, #100	@ 0x64
 8000536:	601a      	str	r2, [r3, #0]
	  MotorStraightLine();
 8000538:	f000 fa14 	bl	8000964 <MotorStraightLine>
	  Xend = 0;
 800053c:	4b0f      	ldr	r3, [pc, #60]	@ (800057c <main+0xbc>)
 800053e:	2200      	movs	r2, #0
 8000540:	601a      	str	r2, [r3, #0]
	  Yend = 0;
 8000542:	4b0f      	ldr	r3, [pc, #60]	@ (8000580 <main+0xc0>)
 8000544:	2200      	movs	r2, #0
 8000546:	601a      	str	r2, [r3, #0]
	  MotorStraightLine();
 8000548:	f000 fa0c 	bl	8000964 <MotorStraightLine>
	  Xend = 100;
 800054c:	bf00      	nop
 800054e:	e7ed      	b.n	800052c <main+0x6c>
 8000550:	08007a3c 	.word	0x08007a3c
 8000554:	080009e9 	.word	0x080009e9
 8000558:	20000210 	.word	0x20000210
 800055c:	08007a60 	.word	0x08007a60
 8000560:	08000a2d 	.word	0x08000a2d
 8000564:	20000214 	.word	0x20000214
 8000568:	08007a84 	.word	0x08007a84
 800056c:	08000aad 	.word	0x08000aad
 8000570:	20000218 	.word	0x20000218
 8000574:	08007a04 	.word	0x08007a04
 8000578:	08007a14 	.word	0x08007a14
 800057c:	20000008 	.word	0x20000008
 8000580:	2000000c 	.word	0x2000000c

08000584 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b096      	sub	sp, #88	@ 0x58
 8000588:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800058a:	f107 0314 	add.w	r3, r7, #20
 800058e:	2244      	movs	r2, #68	@ 0x44
 8000590:	2100      	movs	r1, #0
 8000592:	4618      	mov	r0, r3
 8000594:	f007 f930 	bl	80077f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000598:	463b      	mov	r3, r7
 800059a:	2200      	movs	r2, #0
 800059c:	601a      	str	r2, [r3, #0]
 800059e:	605a      	str	r2, [r3, #4]
 80005a0:	609a      	str	r2, [r3, #8]
 80005a2:	60da      	str	r2, [r3, #12]
 80005a4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005a6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80005aa:	f002 f813 	bl	80025d4 <HAL_PWREx_ControlVoltageScaling>
 80005ae:	4603      	mov	r3, r0
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d001      	beq.n	80005b8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80005b4:	f000 fb08 	bl	8000bc8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005b8:	2302      	movs	r3, #2
 80005ba:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005bc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80005c0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005c2:	2310      	movs	r3, #16
 80005c4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005c6:	2302      	movs	r3, #2
 80005c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005ca:	2302      	movs	r3, #2
 80005cc:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80005ce:	2301      	movs	r3, #1
 80005d0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80005d2:	230a      	movs	r3, #10
 80005d4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80005d6:	2307      	movs	r3, #7
 80005d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005da:	2302      	movs	r3, #2
 80005dc:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005de:	2302      	movs	r3, #2
 80005e0:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005e2:	f107 0314 	add.w	r3, r7, #20
 80005e6:	4618      	mov	r0, r3
 80005e8:	f002 f84a 	bl	8002680 <HAL_RCC_OscConfig>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d001      	beq.n	80005f6 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80005f2:	f000 fae9 	bl	8000bc8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005f6:	230f      	movs	r3, #15
 80005f8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005fa:	2303      	movs	r3, #3
 80005fc:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005fe:	2300      	movs	r3, #0
 8000600:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000602:	2300      	movs	r3, #0
 8000604:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000606:	2300      	movs	r3, #0
 8000608:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800060a:	463b      	mov	r3, r7
 800060c:	2104      	movs	r1, #4
 800060e:	4618      	mov	r0, r3
 8000610:	f002 fc12 	bl	8002e38 <HAL_RCC_ClockConfig>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d001      	beq.n	800061e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800061a:	f000 fad5 	bl	8000bc8 <Error_Handler>
  }
}
 800061e:	bf00      	nop
 8000620:	3758      	adds	r7, #88	@ 0x58
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}
	...

08000628 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b08a      	sub	sp, #40	@ 0x28
 800062c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800062e:	f107 031c 	add.w	r3, r7, #28
 8000632:	2200      	movs	r2, #0
 8000634:	601a      	str	r2, [r3, #0]
 8000636:	605a      	str	r2, [r3, #4]
 8000638:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800063a:	1d3b      	adds	r3, r7, #4
 800063c:	2200      	movs	r2, #0
 800063e:	601a      	str	r2, [r3, #0]
 8000640:	605a      	str	r2, [r3, #4]
 8000642:	609a      	str	r2, [r3, #8]
 8000644:	60da      	str	r2, [r3, #12]
 8000646:	611a      	str	r2, [r3, #16]
 8000648:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800064a:	4b2f      	ldr	r3, [pc, #188]	@ (8000708 <MX_ADC1_Init+0xe0>)
 800064c:	4a2f      	ldr	r2, [pc, #188]	@ (800070c <MX_ADC1_Init+0xe4>)
 800064e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000650:	4b2d      	ldr	r3, [pc, #180]	@ (8000708 <MX_ADC1_Init+0xe0>)
 8000652:	2200      	movs	r2, #0
 8000654:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000656:	4b2c      	ldr	r3, [pc, #176]	@ (8000708 <MX_ADC1_Init+0xe0>)
 8000658:	2200      	movs	r2, #0
 800065a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800065c:	4b2a      	ldr	r3, [pc, #168]	@ (8000708 <MX_ADC1_Init+0xe0>)
 800065e:	2200      	movs	r2, #0
 8000660:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000662:	4b29      	ldr	r3, [pc, #164]	@ (8000708 <MX_ADC1_Init+0xe0>)
 8000664:	2200      	movs	r2, #0
 8000666:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000668:	4b27      	ldr	r3, [pc, #156]	@ (8000708 <MX_ADC1_Init+0xe0>)
 800066a:	2204      	movs	r2, #4
 800066c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800066e:	4b26      	ldr	r3, [pc, #152]	@ (8000708 <MX_ADC1_Init+0xe0>)
 8000670:	2200      	movs	r2, #0
 8000672:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000674:	4b24      	ldr	r3, [pc, #144]	@ (8000708 <MX_ADC1_Init+0xe0>)
 8000676:	2200      	movs	r2, #0
 8000678:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800067a:	4b23      	ldr	r3, [pc, #140]	@ (8000708 <MX_ADC1_Init+0xe0>)
 800067c:	2201      	movs	r2, #1
 800067e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000680:	4b21      	ldr	r3, [pc, #132]	@ (8000708 <MX_ADC1_Init+0xe0>)
 8000682:	2200      	movs	r2, #0
 8000684:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000688:	4b1f      	ldr	r3, [pc, #124]	@ (8000708 <MX_ADC1_Init+0xe0>)
 800068a:	2200      	movs	r2, #0
 800068c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800068e:	4b1e      	ldr	r3, [pc, #120]	@ (8000708 <MX_ADC1_Init+0xe0>)
 8000690:	2200      	movs	r2, #0
 8000692:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000694:	4b1c      	ldr	r3, [pc, #112]	@ (8000708 <MX_ADC1_Init+0xe0>)
 8000696:	2200      	movs	r2, #0
 8000698:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800069c:	4b1a      	ldr	r3, [pc, #104]	@ (8000708 <MX_ADC1_Init+0xe0>)
 800069e:	2200      	movs	r2, #0
 80006a0:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80006a2:	4b19      	ldr	r3, [pc, #100]	@ (8000708 <MX_ADC1_Init+0xe0>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006aa:	4817      	ldr	r0, [pc, #92]	@ (8000708 <MX_ADC1_Init+0xe0>)
 80006ac:	f000 fe8a 	bl	80013c4 <HAL_ADC_Init>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80006b6:	f000 fa87 	bl	8000bc8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80006ba:	2300      	movs	r3, #0
 80006bc:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80006be:	f107 031c 	add.w	r3, r7, #28
 80006c2:	4619      	mov	r1, r3
 80006c4:	4810      	ldr	r0, [pc, #64]	@ (8000708 <MX_ADC1_Init+0xe0>)
 80006c6:	f001 fbe5 	bl	8001e94 <HAL_ADCEx_MultiModeConfigChannel>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80006d0:	f000 fa7a 	bl	8000bc8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80006d4:	4b0e      	ldr	r3, [pc, #56]	@ (8000710 <MX_ADC1_Init+0xe8>)
 80006d6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006d8:	2306      	movs	r3, #6
 80006da:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80006dc:	2300      	movs	r3, #0
 80006de:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80006e0:	237f      	movs	r3, #127	@ 0x7f
 80006e2:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006e4:	2304      	movs	r3, #4
 80006e6:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80006e8:	2300      	movs	r3, #0
 80006ea:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006ec:	1d3b      	adds	r3, r7, #4
 80006ee:	4619      	mov	r1, r3
 80006f0:	4805      	ldr	r0, [pc, #20]	@ (8000708 <MX_ADC1_Init+0xe0>)
 80006f2:	f000 ffb7 	bl	8001664 <HAL_ADC_ConfigChannel>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 80006fc:	f000 fa64 	bl	8000bc8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000700:	bf00      	nop
 8000702:	3728      	adds	r7, #40	@ 0x28
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}
 8000708:	2000008c 	.word	0x2000008c
 800070c:	50040000 	.word	0x50040000
 8000710:	14f00020 	.word	0x14f00020

08000714 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000718:	4b0f      	ldr	r3, [pc, #60]	@ (8000758 <MX_TIM16_Init+0x44>)
 800071a:	4a10      	ldr	r2, [pc, #64]	@ (800075c <MX_TIM16_Init+0x48>)
 800071c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 8000;
 800071e:	4b0e      	ldr	r3, [pc, #56]	@ (8000758 <MX_TIM16_Init+0x44>)
 8000720:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8000724:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000726:	4b0c      	ldr	r3, [pc, #48]	@ (8000758 <MX_TIM16_Init+0x44>)
 8000728:	2200      	movs	r2, #0
 800072a:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 50;
 800072c:	4b0a      	ldr	r3, [pc, #40]	@ (8000758 <MX_TIM16_Init+0x44>)
 800072e:	2232      	movs	r2, #50	@ 0x32
 8000730:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000732:	4b09      	ldr	r3, [pc, #36]	@ (8000758 <MX_TIM16_Init+0x44>)
 8000734:	2200      	movs	r2, #0
 8000736:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000738:	4b07      	ldr	r3, [pc, #28]	@ (8000758 <MX_TIM16_Init+0x44>)
 800073a:	2200      	movs	r2, #0
 800073c:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800073e:	4b06      	ldr	r3, [pc, #24]	@ (8000758 <MX_TIM16_Init+0x44>)
 8000740:	2200      	movs	r2, #0
 8000742:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000744:	4804      	ldr	r0, [pc, #16]	@ (8000758 <MX_TIM16_Init+0x44>)
 8000746:	f003 fa89 	bl	8003c5c <HAL_TIM_Base_Init>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8000750:	f000 fa3a 	bl	8000bc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8000754:	bf00      	nop
 8000756:	bd80      	pop	{r7, pc}
 8000758:	200000f0 	.word	0x200000f0
 800075c:	40014400 	.word	0x40014400

08000760 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000764:	4b0f      	ldr	r3, [pc, #60]	@ (80007a4 <MX_TIM17_Init+0x44>)
 8000766:	4a10      	ldr	r2, [pc, #64]	@ (80007a8 <MX_TIM17_Init+0x48>)
 8000768:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 8000;
 800076a:	4b0e      	ldr	r3, [pc, #56]	@ (80007a4 <MX_TIM17_Init+0x44>)
 800076c:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8000770:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000772:	4b0c      	ldr	r3, [pc, #48]	@ (80007a4 <MX_TIM17_Init+0x44>)
 8000774:	2200      	movs	r2, #0
 8000776:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 50;
 8000778:	4b0a      	ldr	r3, [pc, #40]	@ (80007a4 <MX_TIM17_Init+0x44>)
 800077a:	2232      	movs	r2, #50	@ 0x32
 800077c:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800077e:	4b09      	ldr	r3, [pc, #36]	@ (80007a4 <MX_TIM17_Init+0x44>)
 8000780:	2200      	movs	r2, #0
 8000782:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000784:	4b07      	ldr	r3, [pc, #28]	@ (80007a4 <MX_TIM17_Init+0x44>)
 8000786:	2200      	movs	r2, #0
 8000788:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800078a:	4b06      	ldr	r3, [pc, #24]	@ (80007a4 <MX_TIM17_Init+0x44>)
 800078c:	2200      	movs	r2, #0
 800078e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000790:	4804      	ldr	r0, [pc, #16]	@ (80007a4 <MX_TIM17_Init+0x44>)
 8000792:	f003 fa63 	bl	8003c5c <HAL_TIM_Base_Init>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 800079c:	f000 fa14 	bl	8000bc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 80007a0:	bf00      	nop
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	2000013c 	.word	0x2000013c
 80007a8:	40014800 	.word	0x40014800

080007ac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007b0:	4b14      	ldr	r3, [pc, #80]	@ (8000804 <MX_USART2_UART_Init+0x58>)
 80007b2:	4a15      	ldr	r2, [pc, #84]	@ (8000808 <MX_USART2_UART_Init+0x5c>)
 80007b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007b6:	4b13      	ldr	r3, [pc, #76]	@ (8000804 <MX_USART2_UART_Init+0x58>)
 80007b8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007bc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007be:	4b11      	ldr	r3, [pc, #68]	@ (8000804 <MX_USART2_UART_Init+0x58>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007c4:	4b0f      	ldr	r3, [pc, #60]	@ (8000804 <MX_USART2_UART_Init+0x58>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007ca:	4b0e      	ldr	r3, [pc, #56]	@ (8000804 <MX_USART2_UART_Init+0x58>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007d0:	4b0c      	ldr	r3, [pc, #48]	@ (8000804 <MX_USART2_UART_Init+0x58>)
 80007d2:	220c      	movs	r2, #12
 80007d4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007d6:	4b0b      	ldr	r3, [pc, #44]	@ (8000804 <MX_USART2_UART_Init+0x58>)
 80007d8:	2200      	movs	r2, #0
 80007da:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007dc:	4b09      	ldr	r3, [pc, #36]	@ (8000804 <MX_USART2_UART_Init+0x58>)
 80007de:	2200      	movs	r2, #0
 80007e0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007e2:	4b08      	ldr	r3, [pc, #32]	@ (8000804 <MX_USART2_UART_Init+0x58>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007e8:	4b06      	ldr	r3, [pc, #24]	@ (8000804 <MX_USART2_UART_Init+0x58>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007ee:	4805      	ldr	r0, [pc, #20]	@ (8000804 <MX_USART2_UART_Init+0x58>)
 80007f0:	f003 fcf0 	bl	80041d4 <HAL_UART_Init>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80007fa:	f000 f9e5 	bl	8000bc8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007fe:	bf00      	nop
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	20000188 	.word	0x20000188
 8000808:	40004400 	.word	0x40004400

0800080c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b08a      	sub	sp, #40	@ 0x28
 8000810:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000812:	f107 0314 	add.w	r3, r7, #20
 8000816:	2200      	movs	r2, #0
 8000818:	601a      	str	r2, [r3, #0]
 800081a:	605a      	str	r2, [r3, #4]
 800081c:	609a      	str	r2, [r3, #8]
 800081e:	60da      	str	r2, [r3, #12]
 8000820:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000822:	4b4d      	ldr	r3, [pc, #308]	@ (8000958 <MX_GPIO_Init+0x14c>)
 8000824:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000826:	4a4c      	ldr	r2, [pc, #304]	@ (8000958 <MX_GPIO_Init+0x14c>)
 8000828:	f043 0304 	orr.w	r3, r3, #4
 800082c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800082e:	4b4a      	ldr	r3, [pc, #296]	@ (8000958 <MX_GPIO_Init+0x14c>)
 8000830:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000832:	f003 0304 	and.w	r3, r3, #4
 8000836:	613b      	str	r3, [r7, #16]
 8000838:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800083a:	4b47      	ldr	r3, [pc, #284]	@ (8000958 <MX_GPIO_Init+0x14c>)
 800083c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800083e:	4a46      	ldr	r2, [pc, #280]	@ (8000958 <MX_GPIO_Init+0x14c>)
 8000840:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000844:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000846:	4b44      	ldr	r3, [pc, #272]	@ (8000958 <MX_GPIO_Init+0x14c>)
 8000848:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800084a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800084e:	60fb      	str	r3, [r7, #12]
 8000850:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000852:	4b41      	ldr	r3, [pc, #260]	@ (8000958 <MX_GPIO_Init+0x14c>)
 8000854:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000856:	4a40      	ldr	r2, [pc, #256]	@ (8000958 <MX_GPIO_Init+0x14c>)
 8000858:	f043 0301 	orr.w	r3, r3, #1
 800085c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800085e:	4b3e      	ldr	r3, [pc, #248]	@ (8000958 <MX_GPIO_Init+0x14c>)
 8000860:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000862:	f003 0301 	and.w	r3, r3, #1
 8000866:	60bb      	str	r3, [r7, #8]
 8000868:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800086a:	4b3b      	ldr	r3, [pc, #236]	@ (8000958 <MX_GPIO_Init+0x14c>)
 800086c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800086e:	4a3a      	ldr	r2, [pc, #232]	@ (8000958 <MX_GPIO_Init+0x14c>)
 8000870:	f043 0302 	orr.w	r3, r3, #2
 8000874:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000876:	4b38      	ldr	r3, [pc, #224]	@ (8000958 <MX_GPIO_Init+0x14c>)
 8000878:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800087a:	f003 0302 	and.w	r3, r3, #2
 800087e:	607b      	str	r3, [r7, #4]
 8000880:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(YPUL_GPIO_Port, YPUL_Pin, GPIO_PIN_SET);
 8000882:	2201      	movs	r2, #1
 8000884:	2102      	movs	r1, #2
 8000886:	4835      	ldr	r0, [pc, #212]	@ (800095c <MX_GPIO_Init+0x150>)
 8000888:	f001 fe40 	bl	800250c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, XDIR_Pin|XPUL_Pin|LD2_Pin, GPIO_PIN_SET);
 800088c:	2201      	movs	r2, #1
 800088e:	2132      	movs	r1, #50	@ 0x32
 8000890:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000894:	f001 fe3a 	bl	800250c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(YDIR_GPIO_Port, YDIR_Pin, GPIO_PIN_SET);
 8000898:	2201      	movs	r2, #1
 800089a:	2101      	movs	r1, #1
 800089c:	4830      	ldr	r0, [pc, #192]	@ (8000960 <MX_GPIO_Init+0x154>)
 800089e:	f001 fe35 	bl	800250c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008a2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008a8:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80008ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ae:	2300      	movs	r3, #0
 80008b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008b2:	f107 0314 	add.w	r3, r7, #20
 80008b6:	4619      	mov	r1, r3
 80008b8:	4828      	ldr	r0, [pc, #160]	@ (800095c <MX_GPIO_Init+0x150>)
 80008ba:	f001 fc7d 	bl	80021b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : YPUL_Pin */
  GPIO_InitStruct.Pin = YPUL_Pin;
 80008be:	2302      	movs	r3, #2
 80008c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c2:	2301      	movs	r3, #1
 80008c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c6:	2300      	movs	r3, #0
 80008c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ca:	2300      	movs	r3, #0
 80008cc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(YPUL_GPIO_Port, &GPIO_InitStruct);
 80008ce:	f107 0314 	add.w	r3, r7, #20
 80008d2:	4619      	mov	r1, r3
 80008d4:	4821      	ldr	r0, [pc, #132]	@ (800095c <MX_GPIO_Init+0x150>)
 80008d6:	f001 fc6f 	bl	80021b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : XDIR_Pin XPUL_Pin LD2_Pin */
  GPIO_InitStruct.Pin = XDIR_Pin|XPUL_Pin|LD2_Pin;
 80008da:	2332      	movs	r3, #50	@ 0x32
 80008dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008de:	2301      	movs	r3, #1
 80008e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e2:	2300      	movs	r3, #0
 80008e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e6:	2300      	movs	r3, #0
 80008e8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ea:	f107 0314 	add.w	r3, r7, #20
 80008ee:	4619      	mov	r1, r3
 80008f0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008f4:	f001 fc60 	bl	80021b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : test_interrupt_Pin */
  GPIO_InitStruct.Pin = test_interrupt_Pin;
 80008f8:	2340      	movs	r3, #64	@ 0x40
 80008fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008fc:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000900:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000902:	2300      	movs	r3, #0
 8000904:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(test_interrupt_GPIO_Port, &GPIO_InitStruct);
 8000906:	f107 0314 	add.w	r3, r7, #20
 800090a:	4619      	mov	r1, r3
 800090c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000910:	f001 fc52 	bl	80021b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : YDIR_Pin */
  GPIO_InitStruct.Pin = YDIR_Pin;
 8000914:	2301      	movs	r3, #1
 8000916:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000918:	2301      	movs	r3, #1
 800091a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091c:	2300      	movs	r3, #0
 800091e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000920:	2300      	movs	r3, #0
 8000922:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(YDIR_GPIO_Port, &GPIO_InitStruct);
 8000924:	f107 0314 	add.w	r3, r7, #20
 8000928:	4619      	mov	r1, r3
 800092a:	480d      	ldr	r0, [pc, #52]	@ (8000960 <MX_GPIO_Init+0x154>)
 800092c:	f001 fc44 	bl	80021b8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8000930:	2200      	movs	r2, #0
 8000932:	2105      	movs	r1, #5
 8000934:	2017      	movs	r0, #23
 8000936:	f001 fc15 	bl	8002164 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800093a:	2017      	movs	r0, #23
 800093c:	f001 fc2e 	bl	800219c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000940:	2200      	movs	r2, #0
 8000942:	2105      	movs	r1, #5
 8000944:	2028      	movs	r0, #40	@ 0x28
 8000946:	f001 fc0d 	bl	8002164 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800094a:	2028      	movs	r0, #40	@ 0x28
 800094c:	f001 fc26 	bl	800219c <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000950:	bf00      	nop
 8000952:	3728      	adds	r7, #40	@ 0x28
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	40021000 	.word	0x40021000
 800095c:	48000800 	.word	0x48000800
 8000960:	48000400 	.word	0x48000400

08000964 <MotorStraightLine>:

/* USER CODE BEGIN 4 */
void MotorStraightLine() {
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
	if (Xend > Xcurrent){
 8000968:	4b18      	ldr	r3, [pc, #96]	@ (80009cc <MotorStraightLine+0x68>)
 800096a:	681a      	ldr	r2, [r3, #0]
 800096c:	4b18      	ldr	r3, [pc, #96]	@ (80009d0 <MotorStraightLine+0x6c>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	429a      	cmp	r2, r3
 8000972:	dd09      	ble.n	8000988 <MotorStraightLine+0x24>
		XDIR = 1;
 8000974:	4b17      	ldr	r3, [pc, #92]	@ (80009d4 <MotorStraightLine+0x70>)
 8000976:	2201      	movs	r2, #1
 8000978:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(XDIR_GPIO_Port, XDIR_Pin, 1);
 800097a:	2201      	movs	r2, #1
 800097c:	2102      	movs	r1, #2
 800097e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000982:	f001 fdc3 	bl	800250c <HAL_GPIO_WritePin>
 8000986:	e008      	b.n	800099a <MotorStraightLine+0x36>
	} else {
		HAL_GPIO_WritePin(XDIR_GPIO_Port, XDIR_Pin, 0);
 8000988:	2200      	movs	r2, #0
 800098a:	2102      	movs	r1, #2
 800098c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000990:	f001 fdbc 	bl	800250c <HAL_GPIO_WritePin>
		XDIR = 0;
 8000994:	4b0f      	ldr	r3, [pc, #60]	@ (80009d4 <MotorStraightLine+0x70>)
 8000996:	2200      	movs	r2, #0
 8000998:	601a      	str	r2, [r3, #0]
	}
	if (Yend > Ycurrent){
 800099a:	4b0f      	ldr	r3, [pc, #60]	@ (80009d8 <MotorStraightLine+0x74>)
 800099c:	681a      	ldr	r2, [r3, #0]
 800099e:	4b0f      	ldr	r3, [pc, #60]	@ (80009dc <MotorStraightLine+0x78>)
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	429a      	cmp	r2, r3
 80009a4:	dd08      	ble.n	80009b8 <MotorStraightLine+0x54>
		YDIR = 1;
 80009a6:	4b0e      	ldr	r3, [pc, #56]	@ (80009e0 <MotorStraightLine+0x7c>)
 80009a8:	2201      	movs	r2, #1
 80009aa:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(YDIR_GPIO_Port, YDIR_Pin, 1);
 80009ac:	2201      	movs	r2, #1
 80009ae:	2101      	movs	r1, #1
 80009b0:	480c      	ldr	r0, [pc, #48]	@ (80009e4 <MotorStraightLine+0x80>)
 80009b2:	f001 fdab 	bl	800250c <HAL_GPIO_WritePin>
	}

	//osThreadResume(turnXMotorHandle);
	//osThreadResume(turnYMotorHandle);

}
 80009b6:	e007      	b.n	80009c8 <MotorStraightLine+0x64>
		YDIR = 0;
 80009b8:	4b09      	ldr	r3, [pc, #36]	@ (80009e0 <MotorStraightLine+0x7c>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(YDIR_GPIO_Port, YDIR_Pin, 0);
 80009be:	2200      	movs	r2, #0
 80009c0:	2101      	movs	r1, #1
 80009c2:	4808      	ldr	r0, [pc, #32]	@ (80009e4 <MotorStraightLine+0x80>)
 80009c4:	f001 fda2 	bl	800250c <HAL_GPIO_WritePin>
}
 80009c8:	bf00      	nop
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	20000008 	.word	0x20000008
 80009d0:	2000021c 	.word	0x2000021c
 80009d4:	20000224 	.word	0x20000224
 80009d8:	2000000c 	.word	0x2000000c
 80009dc:	20000220 	.word	0x20000220
 80009e0:	20000228 	.word	0x20000228
 80009e4:	48000400 	.word	0x48000400

080009e8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80009f0:	2001      	movs	r0, #1
 80009f2:	f004 fa31 	bl	8004e58 <osDelay>
	Xend = 100;
 80009f6:	4b09      	ldr	r3, [pc, #36]	@ (8000a1c <StartDefaultTask+0x34>)
 80009f8:	2264      	movs	r2, #100	@ 0x64
 80009fa:	601a      	str	r2, [r3, #0]
	Yend = 100;
 80009fc:	4b08      	ldr	r3, [pc, #32]	@ (8000a20 <StartDefaultTask+0x38>)
 80009fe:	2264      	movs	r2, #100	@ 0x64
 8000a00:	601a      	str	r2, [r3, #0]
	XDIR = 1;
 8000a02:	4b08      	ldr	r3, [pc, #32]	@ (8000a24 <StartDefaultTask+0x3c>)
 8000a04:	2201      	movs	r2, #1
 8000a06:	601a      	str	r2, [r3, #0]
	YDIR = 1;
 8000a08:	4b07      	ldr	r3, [pc, #28]	@ (8000a28 <StartDefaultTask+0x40>)
 8000a0a:	2201      	movs	r2, #1
 8000a0c:	601a      	str	r2, [r3, #0]
	osDelay(1000);
 8000a0e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000a12:	f004 fa21 	bl	8004e58 <osDelay>
    osDelay(1);
 8000a16:	bf00      	nop
 8000a18:	e7ea      	b.n	80009f0 <StartDefaultTask+0x8>
 8000a1a:	bf00      	nop
 8000a1c:	20000008 	.word	0x20000008
 8000a20:	2000000c 	.word	0x2000000c
 8000a24:	20000224 	.word	0x20000224
 8000a28:	20000228 	.word	0x20000228

08000a2c <StartXMotor>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartXMotor */
void StartXMotor(void *argument)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b082      	sub	sp, #8
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartXMotor */
  /* Infinite loop */
  for(;;)
  {
	if (Xend != Xcurrent){
 8000a34:	4b19      	ldr	r3, [pc, #100]	@ (8000a9c <StartXMotor+0x70>)
 8000a36:	681a      	ldr	r2, [r3, #0]
 8000a38:	4b19      	ldr	r3, [pc, #100]	@ (8000aa0 <StartXMotor+0x74>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	429a      	cmp	r2, r3
 8000a3e:	d028      	beq.n	8000a92 <StartXMotor+0x66>
		HAL_GPIO_TogglePin(XPUL_GPIO_Port, XPUL_Pin);
 8000a40:	2110      	movs	r1, #16
 8000a42:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a46:	f001 fd79 	bl	800253c <HAL_GPIO_TogglePin>
	    osDelay(XMotorTime/2);
 8000a4a:	4b16      	ldr	r3, [pc, #88]	@ (8000aa4 <StartXMotor+0x78>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	0fda      	lsrs	r2, r3, #31
 8000a50:	4413      	add	r3, r2
 8000a52:	105b      	asrs	r3, r3, #1
 8000a54:	4618      	mov	r0, r3
 8000a56:	f004 f9ff 	bl	8004e58 <osDelay>
	    HAL_GPIO_TogglePin(XPUL_GPIO_Port, XPUL_Pin);
 8000a5a:	2110      	movs	r1, #16
 8000a5c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a60:	f001 fd6c 	bl	800253c <HAL_GPIO_TogglePin>
	    osDelay(XMotorTime/2);
 8000a64:	4b0f      	ldr	r3, [pc, #60]	@ (8000aa4 <StartXMotor+0x78>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	0fda      	lsrs	r2, r3, #31
 8000a6a:	4413      	add	r3, r2
 8000a6c:	105b      	asrs	r3, r3, #1
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f004 f9f2 	bl	8004e58 <osDelay>
	    if (XDIR == 0)
 8000a74:	4b0c      	ldr	r3, [pc, #48]	@ (8000aa8 <StartXMotor+0x7c>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d105      	bne.n	8000a88 <StartXMotor+0x5c>
	    {
	    	Xcurrent -= 1;
 8000a7c:	4b08      	ldr	r3, [pc, #32]	@ (8000aa0 <StartXMotor+0x74>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	3b01      	subs	r3, #1
 8000a82:	4a07      	ldr	r2, [pc, #28]	@ (8000aa0 <StartXMotor+0x74>)
 8000a84:	6013      	str	r3, [r2, #0]
 8000a86:	e004      	b.n	8000a92 <StartXMotor+0x66>
	    }
	    else
	    {
	    	Xcurrent += 1;
 8000a88:	4b05      	ldr	r3, [pc, #20]	@ (8000aa0 <StartXMotor+0x74>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	3301      	adds	r3, #1
 8000a8e:	4a04      	ldr	r2, [pc, #16]	@ (8000aa0 <StartXMotor+0x74>)
 8000a90:	6013      	str	r3, [r2, #0]
	    }
	}
	osDelay(1);
 8000a92:	2001      	movs	r0, #1
 8000a94:	f004 f9e0 	bl	8004e58 <osDelay>
	if (Xend != Xcurrent){
 8000a98:	e7cc      	b.n	8000a34 <StartXMotor+0x8>
 8000a9a:	bf00      	nop
 8000a9c:	20000008 	.word	0x20000008
 8000aa0:	2000021c 	.word	0x2000021c
 8000aa4:	20000004 	.word	0x20000004
 8000aa8:	20000224 	.word	0x20000224

08000aac <StartYMotor>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartYMotor */
void StartYMotor(void *argument)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartYMotor */
  /* Infinite loop */
  for(;;)
  {
	if (Yend != Ycurrent){
 8000ab4:	4b18      	ldr	r3, [pc, #96]	@ (8000b18 <StartYMotor+0x6c>)
 8000ab6:	681a      	ldr	r2, [r3, #0]
 8000ab8:	4b18      	ldr	r3, [pc, #96]	@ (8000b1c <StartYMotor+0x70>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	429a      	cmp	r2, r3
 8000abe:	d026      	beq.n	8000b0e <StartYMotor+0x62>
		HAL_GPIO_TogglePin(YPUL_GPIO_Port, YPUL_Pin);
 8000ac0:	2102      	movs	r1, #2
 8000ac2:	4817      	ldr	r0, [pc, #92]	@ (8000b20 <StartYMotor+0x74>)
 8000ac4:	f001 fd3a 	bl	800253c <HAL_GPIO_TogglePin>
		osDelay(YMotorTime/2);
 8000ac8:	4b16      	ldr	r3, [pc, #88]	@ (8000b24 <StartYMotor+0x78>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	0fda      	lsrs	r2, r3, #31
 8000ace:	4413      	add	r3, r2
 8000ad0:	105b      	asrs	r3, r3, #1
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f004 f9c0 	bl	8004e58 <osDelay>
		HAL_GPIO_TogglePin(YPUL_GPIO_Port, YPUL_Pin);
 8000ad8:	2102      	movs	r1, #2
 8000ada:	4811      	ldr	r0, [pc, #68]	@ (8000b20 <StartYMotor+0x74>)
 8000adc:	f001 fd2e 	bl	800253c <HAL_GPIO_TogglePin>
		osDelay(YMotorTime/2);
 8000ae0:	4b10      	ldr	r3, [pc, #64]	@ (8000b24 <StartYMotor+0x78>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	0fda      	lsrs	r2, r3, #31
 8000ae6:	4413      	add	r3, r2
 8000ae8:	105b      	asrs	r3, r3, #1
 8000aea:	4618      	mov	r0, r3
 8000aec:	f004 f9b4 	bl	8004e58 <osDelay>
		if (YDIR == 0)
 8000af0:	4b0d      	ldr	r3, [pc, #52]	@ (8000b28 <StartYMotor+0x7c>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d105      	bne.n	8000b04 <StartYMotor+0x58>
		{
			Ycurrent -= 1;
 8000af8:	4b08      	ldr	r3, [pc, #32]	@ (8000b1c <StartYMotor+0x70>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	3b01      	subs	r3, #1
 8000afe:	4a07      	ldr	r2, [pc, #28]	@ (8000b1c <StartYMotor+0x70>)
 8000b00:	6013      	str	r3, [r2, #0]
 8000b02:	e004      	b.n	8000b0e <StartYMotor+0x62>
		}
		else
		{
			Ycurrent += 1;
 8000b04:	4b05      	ldr	r3, [pc, #20]	@ (8000b1c <StartYMotor+0x70>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	3301      	adds	r3, #1
 8000b0a:	4a04      	ldr	r2, [pc, #16]	@ (8000b1c <StartYMotor+0x70>)
 8000b0c:	6013      	str	r3, [r2, #0]
		}
	}
	osDelay(1);
 8000b0e:	2001      	movs	r0, #1
 8000b10:	f004 f9a2 	bl	8004e58 <osDelay>
	if (Yend != Ycurrent){
 8000b14:	e7ce      	b.n	8000ab4 <StartYMotor+0x8>
 8000b16:	bf00      	nop
 8000b18:	2000000c 	.word	0x2000000c
 8000b1c:	20000220 	.word	0x20000220
 8000b20:	48000800 	.word	0x48000800
 8000b24:	20000000 	.word	0x20000000
 8000b28:	20000228 	.word	0x20000228

08000b2c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4a1b      	ldr	r2, [pc, #108]	@ (8000ba8 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000b3a:	4293      	cmp	r3, r2
 8000b3c:	d101      	bne.n	8000b42 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b3e:	f000 fa95 	bl	800106c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
	if (htim == &htim16)
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	4a19      	ldr	r2, [pc, #100]	@ (8000bac <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000b46:	4293      	cmp	r3, r2
 8000b48:	d113      	bne.n	8000b72 <HAL_TIM_PeriodElapsedCallback+0x46>
	{
		HAL_GPIO_TogglePin(XPUL_GPIO_Port, XPUL_Pin);
 8000b4a:	2110      	movs	r1, #16
 8000b4c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b50:	f001 fcf4 	bl	800253c <HAL_GPIO_TogglePin>
		if (XDIR == 1)
 8000b54:	4b16      	ldr	r3, [pc, #88]	@ (8000bb0 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	2b01      	cmp	r3, #1
 8000b5a:	d105      	bne.n	8000b68 <HAL_TIM_PeriodElapsedCallback+0x3c>
		{
			Xcurrent ++;
 8000b5c:	4b15      	ldr	r3, [pc, #84]	@ (8000bb4 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	3301      	adds	r3, #1
 8000b62:	4a14      	ldr	r2, [pc, #80]	@ (8000bb4 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000b64:	6013      	str	r3, [r2, #0]
 8000b66:	e004      	b.n	8000b72 <HAL_TIM_PeriodElapsedCallback+0x46>
		} else {
			Xcurrent --;
 8000b68:	4b12      	ldr	r3, [pc, #72]	@ (8000bb4 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	3b01      	subs	r3, #1
 8000b6e:	4a11      	ldr	r2, [pc, #68]	@ (8000bb4 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000b70:	6013      	str	r3, [r2, #0]
		}
	}
	if (htim == &htim17)
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	4a10      	ldr	r2, [pc, #64]	@ (8000bb8 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000b76:	4293      	cmp	r3, r2
 8000b78:	d112      	bne.n	8000ba0 <HAL_TIM_PeriodElapsedCallback+0x74>
	{
		HAL_GPIO_TogglePin(YPUL_GPIO_Port, YPUL_Pin);
 8000b7a:	2102      	movs	r1, #2
 8000b7c:	480f      	ldr	r0, [pc, #60]	@ (8000bbc <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000b7e:	f001 fcdd 	bl	800253c <HAL_GPIO_TogglePin>
		if (YDIR == 1)
 8000b82:	4b0f      	ldr	r3, [pc, #60]	@ (8000bc0 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	2b01      	cmp	r3, #1
 8000b88:	d105      	bne.n	8000b96 <HAL_TIM_PeriodElapsedCallback+0x6a>
		{
			Ycurrent ++;
 8000b8a:	4b0e      	ldr	r3, [pc, #56]	@ (8000bc4 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	3301      	adds	r3, #1
 8000b90:	4a0c      	ldr	r2, [pc, #48]	@ (8000bc4 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8000b92:	6013      	str	r3, [r2, #0]
		} else {
			Ycurrent --;
		}
	}
  /* USER CODE END Callback 1 */
}
 8000b94:	e004      	b.n	8000ba0 <HAL_TIM_PeriodElapsedCallback+0x74>
			Ycurrent --;
 8000b96:	4b0b      	ldr	r3, [pc, #44]	@ (8000bc4 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	3b01      	subs	r3, #1
 8000b9c:	4a09      	ldr	r2, [pc, #36]	@ (8000bc4 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8000b9e:	6013      	str	r3, [r2, #0]
}
 8000ba0:	bf00      	nop
 8000ba2:	3708      	adds	r7, #8
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	40000400 	.word	0x40000400
 8000bac:	200000f0 	.word	0x200000f0
 8000bb0:	20000224 	.word	0x20000224
 8000bb4:	2000021c 	.word	0x2000021c
 8000bb8:	2000013c 	.word	0x2000013c
 8000bbc:	48000800 	.word	0x48000800
 8000bc0:	20000228 	.word	0x20000228
 8000bc4:	20000220 	.word	0x20000220

08000bc8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bcc:	b672      	cpsid	i
}
 8000bce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bd0:	bf00      	nop
 8000bd2:	e7fd      	b.n	8000bd0 <Error_Handler+0x8>

08000bd4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bda:	4b11      	ldr	r3, [pc, #68]	@ (8000c20 <HAL_MspInit+0x4c>)
 8000bdc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000bde:	4a10      	ldr	r2, [pc, #64]	@ (8000c20 <HAL_MspInit+0x4c>)
 8000be0:	f043 0301 	orr.w	r3, r3, #1
 8000be4:	6613      	str	r3, [r2, #96]	@ 0x60
 8000be6:	4b0e      	ldr	r3, [pc, #56]	@ (8000c20 <HAL_MspInit+0x4c>)
 8000be8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000bea:	f003 0301 	and.w	r3, r3, #1
 8000bee:	607b      	str	r3, [r7, #4]
 8000bf0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bf2:	4b0b      	ldr	r3, [pc, #44]	@ (8000c20 <HAL_MspInit+0x4c>)
 8000bf4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bf6:	4a0a      	ldr	r2, [pc, #40]	@ (8000c20 <HAL_MspInit+0x4c>)
 8000bf8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000bfc:	6593      	str	r3, [r2, #88]	@ 0x58
 8000bfe:	4b08      	ldr	r3, [pc, #32]	@ (8000c20 <HAL_MspInit+0x4c>)
 8000c00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c06:	603b      	str	r3, [r7, #0]
 8000c08:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	210f      	movs	r1, #15
 8000c0e:	f06f 0001 	mvn.w	r0, #1
 8000c12:	f001 faa7 	bl	8002164 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c16:	bf00      	nop
 8000c18:	3708      	adds	r7, #8
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	40021000 	.word	0x40021000

08000c24 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b0ac      	sub	sp, #176	@ 0xb0
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c2c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000c30:	2200      	movs	r2, #0
 8000c32:	601a      	str	r2, [r3, #0]
 8000c34:	605a      	str	r2, [r3, #4]
 8000c36:	609a      	str	r2, [r3, #8]
 8000c38:	60da      	str	r2, [r3, #12]
 8000c3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c3c:	f107 0314 	add.w	r3, r7, #20
 8000c40:	2288      	movs	r2, #136	@ 0x88
 8000c42:	2100      	movs	r1, #0
 8000c44:	4618      	mov	r0, r3
 8000c46:	f006 fdd7 	bl	80077f8 <memset>
  if(hadc->Instance==ADC1)
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	4a27      	ldr	r2, [pc, #156]	@ (8000cec <HAL_ADC_MspInit+0xc8>)
 8000c50:	4293      	cmp	r3, r2
 8000c52:	d147      	bne.n	8000ce4 <HAL_ADC_MspInit+0xc0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000c54:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000c58:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000c5a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000c5e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000c62:	2302      	movs	r3, #2
 8000c64:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000c66:	2301      	movs	r3, #1
 8000c68:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000c6a:	2308      	movs	r3, #8
 8000c6c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000c6e:	2307      	movs	r3, #7
 8000c70:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000c72:	2302      	movs	r3, #2
 8000c74:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000c76:	2302      	movs	r3, #2
 8000c78:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000c7a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000c7e:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c80:	f107 0314 	add.w	r3, r7, #20
 8000c84:	4618      	mov	r0, r3
 8000c86:	f002 fb2d 	bl	80032e4 <HAL_RCCEx_PeriphCLKConfig>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d001      	beq.n	8000c94 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8000c90:	f7ff ff9a 	bl	8000bc8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000c94:	4b16      	ldr	r3, [pc, #88]	@ (8000cf0 <HAL_ADC_MspInit+0xcc>)
 8000c96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c98:	4a15      	ldr	r2, [pc, #84]	@ (8000cf0 <HAL_ADC_MspInit+0xcc>)
 8000c9a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000c9e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ca0:	4b13      	ldr	r3, [pc, #76]	@ (8000cf0 <HAL_ADC_MspInit+0xcc>)
 8000ca2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ca4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000ca8:	613b      	str	r3, [r7, #16]
 8000caa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cac:	4b10      	ldr	r3, [pc, #64]	@ (8000cf0 <HAL_ADC_MspInit+0xcc>)
 8000cae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cb0:	4a0f      	ldr	r2, [pc, #60]	@ (8000cf0 <HAL_ADC_MspInit+0xcc>)
 8000cb2:	f043 0301 	orr.w	r3, r3, #1
 8000cb6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cb8:	4b0d      	ldr	r3, [pc, #52]	@ (8000cf0 <HAL_ADC_MspInit+0xcc>)
 8000cba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cbc:	f003 0301 	and.w	r3, r3, #1
 8000cc0:	60fb      	str	r3, [r7, #12]
 8000cc2:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000cc4:	2301      	movs	r3, #1
 8000cc6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000cca:	230b      	movs	r3, #11
 8000ccc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cd6:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000cda:	4619      	mov	r1, r3
 8000cdc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ce0:	f001 fa6a 	bl	80021b8 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000ce4:	bf00      	nop
 8000ce6:	37b0      	adds	r7, #176	@ 0xb0
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	50040000 	.word	0x50040000
 8000cf0:	40021000 	.word	0x40021000

08000cf4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b084      	sub	sp, #16
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	4a1a      	ldr	r2, [pc, #104]	@ (8000d6c <HAL_TIM_Base_MspInit+0x78>)
 8000d02:	4293      	cmp	r3, r2
 8000d04:	d114      	bne.n	8000d30 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000d06:	4b1a      	ldr	r3, [pc, #104]	@ (8000d70 <HAL_TIM_Base_MspInit+0x7c>)
 8000d08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d0a:	4a19      	ldr	r2, [pc, #100]	@ (8000d70 <HAL_TIM_Base_MspInit+0x7c>)
 8000d0c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d10:	6613      	str	r3, [r2, #96]	@ 0x60
 8000d12:	4b17      	ldr	r3, [pc, #92]	@ (8000d70 <HAL_TIM_Base_MspInit+0x7c>)
 8000d14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d1a:	60fb      	str	r3, [r7, #12]
 8000d1c:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 5, 0);
 8000d1e:	2200      	movs	r2, #0
 8000d20:	2105      	movs	r1, #5
 8000d22:	2019      	movs	r0, #25
 8000d24:	f001 fa1e 	bl	8002164 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000d28:	2019      	movs	r0, #25
 8000d2a:	f001 fa37 	bl	800219c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8000d2e:	e018      	b.n	8000d62 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM17)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4a0f      	ldr	r2, [pc, #60]	@ (8000d74 <HAL_TIM_Base_MspInit+0x80>)
 8000d36:	4293      	cmp	r3, r2
 8000d38:	d113      	bne.n	8000d62 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8000d3a:	4b0d      	ldr	r3, [pc, #52]	@ (8000d70 <HAL_TIM_Base_MspInit+0x7c>)
 8000d3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d3e:	4a0c      	ldr	r2, [pc, #48]	@ (8000d70 <HAL_TIM_Base_MspInit+0x7c>)
 8000d40:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000d44:	6613      	str	r3, [r2, #96]	@ 0x60
 8000d46:	4b0a      	ldr	r3, [pc, #40]	@ (8000d70 <HAL_TIM_Base_MspInit+0x7c>)
 8000d48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d4a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000d4e:	60bb      	str	r3, [r7, #8]
 8000d50:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 5, 0);
 8000d52:	2200      	movs	r2, #0
 8000d54:	2105      	movs	r1, #5
 8000d56:	201a      	movs	r0, #26
 8000d58:	f001 fa04 	bl	8002164 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8000d5c:	201a      	movs	r0, #26
 8000d5e:	f001 fa1d 	bl	800219c <HAL_NVIC_EnableIRQ>
}
 8000d62:	bf00      	nop
 8000d64:	3710      	adds	r7, #16
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	40014400 	.word	0x40014400
 8000d70:	40021000 	.word	0x40021000
 8000d74:	40014800 	.word	0x40014800

08000d78 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b0ac      	sub	sp, #176	@ 0xb0
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d80:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000d84:	2200      	movs	r2, #0
 8000d86:	601a      	str	r2, [r3, #0]
 8000d88:	605a      	str	r2, [r3, #4]
 8000d8a:	609a      	str	r2, [r3, #8]
 8000d8c:	60da      	str	r2, [r3, #12]
 8000d8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d90:	f107 0314 	add.w	r3, r7, #20
 8000d94:	2288      	movs	r2, #136	@ 0x88
 8000d96:	2100      	movs	r1, #0
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f006 fd2d 	bl	80077f8 <memset>
  if(huart->Instance==USART2)
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	4a21      	ldr	r2, [pc, #132]	@ (8000e28 <HAL_UART_MspInit+0xb0>)
 8000da4:	4293      	cmp	r3, r2
 8000da6:	d13b      	bne.n	8000e20 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000da8:	2302      	movs	r3, #2
 8000daa:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000dac:	2300      	movs	r3, #0
 8000dae:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000db0:	f107 0314 	add.w	r3, r7, #20
 8000db4:	4618      	mov	r0, r3
 8000db6:	f002 fa95 	bl	80032e4 <HAL_RCCEx_PeriphCLKConfig>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d001      	beq.n	8000dc4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000dc0:	f7ff ff02 	bl	8000bc8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000dc4:	4b19      	ldr	r3, [pc, #100]	@ (8000e2c <HAL_UART_MspInit+0xb4>)
 8000dc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000dc8:	4a18      	ldr	r2, [pc, #96]	@ (8000e2c <HAL_UART_MspInit+0xb4>)
 8000dca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000dce:	6593      	str	r3, [r2, #88]	@ 0x58
 8000dd0:	4b16      	ldr	r3, [pc, #88]	@ (8000e2c <HAL_UART_MspInit+0xb4>)
 8000dd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000dd4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000dd8:	613b      	str	r3, [r7, #16]
 8000dda:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ddc:	4b13      	ldr	r3, [pc, #76]	@ (8000e2c <HAL_UART_MspInit+0xb4>)
 8000dde:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000de0:	4a12      	ldr	r2, [pc, #72]	@ (8000e2c <HAL_UART_MspInit+0xb4>)
 8000de2:	f043 0301 	orr.w	r3, r3, #1
 8000de6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000de8:	4b10      	ldr	r3, [pc, #64]	@ (8000e2c <HAL_UART_MspInit+0xb4>)
 8000dea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dec:	f003 0301 	and.w	r3, r3, #1
 8000df0:	60fb      	str	r3, [r7, #12]
 8000df2:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000df4:	230c      	movs	r3, #12
 8000df6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dfa:	2302      	movs	r3, #2
 8000dfc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e00:	2300      	movs	r3, #0
 8000e02:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e06:	2303      	movs	r3, #3
 8000e08:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e0c:	2307      	movs	r3, #7
 8000e0e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e12:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000e16:	4619      	mov	r1, r3
 8000e18:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e1c:	f001 f9cc 	bl	80021b8 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000e20:	bf00      	nop
 8000e22:	37b0      	adds	r7, #176	@ 0xb0
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	40004400 	.word	0x40004400
 8000e2c:	40021000 	.word	0x40021000

08000e30 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b08e      	sub	sp, #56	@ 0x38
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8000e3e:	4b34      	ldr	r3, [pc, #208]	@ (8000f10 <HAL_InitTick+0xe0>)
 8000e40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e42:	4a33      	ldr	r2, [pc, #204]	@ (8000f10 <HAL_InitTick+0xe0>)
 8000e44:	f043 0302 	orr.w	r3, r3, #2
 8000e48:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e4a:	4b31      	ldr	r3, [pc, #196]	@ (8000f10 <HAL_InitTick+0xe0>)
 8000e4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e4e:	f003 0302 	and.w	r3, r3, #2
 8000e52:	60fb      	str	r3, [r7, #12]
 8000e54:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e56:	f107 0210 	add.w	r2, r7, #16
 8000e5a:	f107 0314 	add.w	r3, r7, #20
 8000e5e:	4611      	mov	r1, r2
 8000e60:	4618      	mov	r0, r3
 8000e62:	f002 f9ad 	bl	80031c0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000e66:	6a3b      	ldr	r3, [r7, #32]
 8000e68:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000e6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d103      	bne.n	8000e78 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000e70:	f002 f97a 	bl	8003168 <HAL_RCC_GetPCLK1Freq>
 8000e74:	6378      	str	r0, [r7, #52]	@ 0x34
 8000e76:	e004      	b.n	8000e82 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000e78:	f002 f976 	bl	8003168 <HAL_RCC_GetPCLK1Freq>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	005b      	lsls	r3, r3, #1
 8000e80:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e84:	4a23      	ldr	r2, [pc, #140]	@ (8000f14 <HAL_InitTick+0xe4>)
 8000e86:	fba2 2303 	umull	r2, r3, r2, r3
 8000e8a:	0c9b      	lsrs	r3, r3, #18
 8000e8c:	3b01      	subs	r3, #1
 8000e8e:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8000e90:	4b21      	ldr	r3, [pc, #132]	@ (8000f18 <HAL_InitTick+0xe8>)
 8000e92:	4a22      	ldr	r2, [pc, #136]	@ (8000f1c <HAL_InitTick+0xec>)
 8000e94:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 8000e96:	4b20      	ldr	r3, [pc, #128]	@ (8000f18 <HAL_InitTick+0xe8>)
 8000e98:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000e9c:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 8000e9e:	4a1e      	ldr	r2, [pc, #120]	@ (8000f18 <HAL_InitTick+0xe8>)
 8000ea0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000ea2:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 8000ea4:	4b1c      	ldr	r3, [pc, #112]	@ (8000f18 <HAL_InitTick+0xe8>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eaa:	4b1b      	ldr	r3, [pc, #108]	@ (8000f18 <HAL_InitTick+0xe8>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	609a      	str	r2, [r3, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000eb0:	4b19      	ldr	r3, [pc, #100]	@ (8000f18 <HAL_InitTick+0xe8>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim3);
 8000eb6:	4818      	ldr	r0, [pc, #96]	@ (8000f18 <HAL_InitTick+0xe8>)
 8000eb8:	f002 fed0 	bl	8003c5c <HAL_TIM_Base_Init>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000ec2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d11b      	bne.n	8000f02 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim3);
 8000eca:	4813      	ldr	r0, [pc, #76]	@ (8000f18 <HAL_InitTick+0xe8>)
 8000ecc:	f002 ff1e 	bl	8003d0c <HAL_TIM_Base_Start_IT>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000ed6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d111      	bne.n	8000f02 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM3 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000ede:	201d      	movs	r0, #29
 8000ee0:	f001 f95c 	bl	800219c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	2b0f      	cmp	r3, #15
 8000ee8:	d808      	bhi.n	8000efc <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority, 0U);
 8000eea:	2200      	movs	r2, #0
 8000eec:	6879      	ldr	r1, [r7, #4]
 8000eee:	201d      	movs	r0, #29
 8000ef0:	f001 f938 	bl	8002164 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ef4:	4a0a      	ldr	r2, [pc, #40]	@ (8000f20 <HAL_InitTick+0xf0>)
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	6013      	str	r3, [r2, #0]
 8000efa:	e002      	b.n	8000f02 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8000efc:	2301      	movs	r3, #1
 8000efe:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000f02:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	3738      	adds	r7, #56	@ 0x38
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	40021000 	.word	0x40021000
 8000f14:	431bde83 	.word	0x431bde83
 8000f18:	2000022c 	.word	0x2000022c
 8000f1c:	40000400 	.word	0x40000400
 8000f20:	20000014 	.word	0x20000014

08000f24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f28:	bf00      	nop
 8000f2a:	e7fd      	b.n	8000f28 <NMI_Handler+0x4>

08000f2c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f30:	bf00      	nop
 8000f32:	e7fd      	b.n	8000f30 <HardFault_Handler+0x4>

08000f34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f38:	bf00      	nop
 8000f3a:	e7fd      	b.n	8000f38 <MemManage_Handler+0x4>

08000f3c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f40:	bf00      	nop
 8000f42:	e7fd      	b.n	8000f40 <BusFault_Handler+0x4>

08000f44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f48:	bf00      	nop
 8000f4a:	e7fd      	b.n	8000f48 <UsageFault_Handler+0x4>

08000f4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f50:	bf00      	nop
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr

08000f5a <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000f5a:	b580      	push	{r7, lr}
 8000f5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(test_interrupt_Pin);
 8000f5e:	2040      	movs	r0, #64	@ 0x40
 8000f60:	f001 fb06 	bl	8002570 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000f64:	bf00      	nop
 8000f66:	bd80      	pop	{r7, pc}

08000f68 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8000f6c:	4802      	ldr	r0, [pc, #8]	@ (8000f78 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000f6e:	f002 ff3d 	bl	8003dec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000f72:	bf00      	nop
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	200000f0 	.word	0x200000f0

08000f7c <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8000f80:	4802      	ldr	r0, [pc, #8]	@ (8000f8c <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8000f82:	f002 ff33 	bl	8003dec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8000f86:	bf00      	nop
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	2000013c 	.word	0x2000013c

08000f90 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000f94:	4802      	ldr	r0, [pc, #8]	@ (8000fa0 <TIM3_IRQHandler+0x10>)
 8000f96:	f002 ff29 	bl	8003dec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000f9a:	bf00      	nop
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	2000022c 	.word	0x2000022c

08000fa4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000fa8:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000fac:	f001 fae0 	bl	8002570 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000fb0:	bf00      	nop
 8000fb2:	bd80      	pop	{r7, pc}

08000fb4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000fb8:	4b06      	ldr	r3, [pc, #24]	@ (8000fd4 <SystemInit+0x20>)
 8000fba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000fbe:	4a05      	ldr	r2, [pc, #20]	@ (8000fd4 <SystemInit+0x20>)
 8000fc0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000fc4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000fc8:	bf00      	nop
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop
 8000fd4:	e000ed00 	.word	0xe000ed00

08000fd8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000fd8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001010 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000fdc:	f7ff ffea 	bl	8000fb4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fe0:	480c      	ldr	r0, [pc, #48]	@ (8001014 <LoopForever+0x6>)
  ldr r1, =_edata
 8000fe2:	490d      	ldr	r1, [pc, #52]	@ (8001018 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000fe4:	4a0d      	ldr	r2, [pc, #52]	@ (800101c <LoopForever+0xe>)
  movs r3, #0
 8000fe6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fe8:	e002      	b.n	8000ff0 <LoopCopyDataInit>

08000fea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fee:	3304      	adds	r3, #4

08000ff0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ff0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ff2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ff4:	d3f9      	bcc.n	8000fea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ff6:	4a0a      	ldr	r2, [pc, #40]	@ (8001020 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ff8:	4c0a      	ldr	r4, [pc, #40]	@ (8001024 <LoopForever+0x16>)
  movs r3, #0
 8000ffa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ffc:	e001      	b.n	8001002 <LoopFillZerobss>

08000ffe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ffe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001000:	3204      	adds	r2, #4

08001002 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001002:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001004:	d3fb      	bcc.n	8000ffe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001006:	f006 fc55 	bl	80078b4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800100a:	f7ff fa59 	bl	80004c0 <main>

0800100e <LoopForever>:

LoopForever:
    b LoopForever
 800100e:	e7fe      	b.n	800100e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001010:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001014:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001018:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800101c:	08007b00 	.word	0x08007b00
  ldr r2, =_sbss
 8001020:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001024:	20001d5c 	.word	0x20001d5c

08001028 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001028:	e7fe      	b.n	8001028 <ADC1_2_IRQHandler>
	...

0800102c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001032:	2300      	movs	r3, #0
 8001034:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001036:	4b0c      	ldr	r3, [pc, #48]	@ (8001068 <HAL_Init+0x3c>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	4a0b      	ldr	r2, [pc, #44]	@ (8001068 <HAL_Init+0x3c>)
 800103c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001040:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001042:	2003      	movs	r0, #3
 8001044:	f001 f883 	bl	800214e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001048:	200f      	movs	r0, #15
 800104a:	f7ff fef1 	bl	8000e30 <HAL_InitTick>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d002      	beq.n	800105a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001054:	2301      	movs	r3, #1
 8001056:	71fb      	strb	r3, [r7, #7]
 8001058:	e001      	b.n	800105e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800105a:	f7ff fdbb 	bl	8000bd4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800105e:	79fb      	ldrb	r3, [r7, #7]
}
 8001060:	4618      	mov	r0, r3
 8001062:	3708      	adds	r7, #8
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	40022000 	.word	0x40022000

0800106c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001070:	4b06      	ldr	r3, [pc, #24]	@ (800108c <HAL_IncTick+0x20>)
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	461a      	mov	r2, r3
 8001076:	4b06      	ldr	r3, [pc, #24]	@ (8001090 <HAL_IncTick+0x24>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	4413      	add	r3, r2
 800107c:	4a04      	ldr	r2, [pc, #16]	@ (8001090 <HAL_IncTick+0x24>)
 800107e:	6013      	str	r3, [r2, #0]
}
 8001080:	bf00      	nop
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr
 800108a:	bf00      	nop
 800108c:	20000018 	.word	0x20000018
 8001090:	20000278 	.word	0x20000278

08001094 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  return uwTick;
 8001098:	4b03      	ldr	r3, [pc, #12]	@ (80010a8 <HAL_GetTick+0x14>)
 800109a:	681b      	ldr	r3, [r3, #0]
}
 800109c:	4618      	mov	r0, r3
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop
 80010a8:	20000278 	.word	0x20000278

080010ac <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b083      	sub	sp, #12
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
 80010b4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	689b      	ldr	r3, [r3, #8]
 80010ba:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	431a      	orrs	r2, r3
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	609a      	str	r2, [r3, #8]
}
 80010c6:	bf00      	nop
 80010c8:	370c      	adds	r7, #12
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr

080010d2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80010d2:	b480      	push	{r7}
 80010d4:	b083      	sub	sp, #12
 80010d6:	af00      	add	r7, sp, #0
 80010d8:	6078      	str	r0, [r7, #4]
 80010da:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	689b      	ldr	r3, [r3, #8]
 80010e0:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	431a      	orrs	r2, r3
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	609a      	str	r2, [r3, #8]
}
 80010ec:	bf00      	nop
 80010ee:	370c      	adds	r7, #12
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr

080010f8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	689b      	ldr	r3, [r3, #8]
 8001104:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001108:	4618      	mov	r0, r3
 800110a:	370c      	adds	r7, #12
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr

08001114 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001114:	b480      	push	{r7}
 8001116:	b087      	sub	sp, #28
 8001118:	af00      	add	r7, sp, #0
 800111a:	60f8      	str	r0, [r7, #12]
 800111c:	60b9      	str	r1, [r7, #8]
 800111e:	607a      	str	r2, [r7, #4]
 8001120:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	3360      	adds	r3, #96	@ 0x60
 8001126:	461a      	mov	r2, r3
 8001128:	68bb      	ldr	r3, [r7, #8]
 800112a:	009b      	lsls	r3, r3, #2
 800112c:	4413      	add	r3, r2
 800112e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	681a      	ldr	r2, [r3, #0]
 8001134:	4b08      	ldr	r3, [pc, #32]	@ (8001158 <LL_ADC_SetOffset+0x44>)
 8001136:	4013      	ands	r3, r2
 8001138:	687a      	ldr	r2, [r7, #4]
 800113a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800113e:	683a      	ldr	r2, [r7, #0]
 8001140:	430a      	orrs	r2, r1
 8001142:	4313      	orrs	r3, r2
 8001144:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800114c:	bf00      	nop
 800114e:	371c      	adds	r7, #28
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr
 8001158:	03fff000 	.word	0x03fff000

0800115c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800115c:	b480      	push	{r7}
 800115e:	b085      	sub	sp, #20
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
 8001164:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	3360      	adds	r3, #96	@ 0x60
 800116a:	461a      	mov	r2, r3
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	009b      	lsls	r3, r3, #2
 8001170:	4413      	add	r3, r2
 8001172:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 800117c:	4618      	mov	r0, r3
 800117e:	3714      	adds	r7, #20
 8001180:	46bd      	mov	sp, r7
 8001182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001186:	4770      	bx	lr

08001188 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001188:	b480      	push	{r7}
 800118a:	b087      	sub	sp, #28
 800118c:	af00      	add	r7, sp, #0
 800118e:	60f8      	str	r0, [r7, #12]
 8001190:	60b9      	str	r1, [r7, #8]
 8001192:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	3360      	adds	r3, #96	@ 0x60
 8001198:	461a      	mov	r2, r3
 800119a:	68bb      	ldr	r3, [r7, #8]
 800119c:	009b      	lsls	r3, r3, #2
 800119e:	4413      	add	r3, r2
 80011a0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80011a2:	697b      	ldr	r3, [r7, #20]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	431a      	orrs	r2, r3
 80011ae:	697b      	ldr	r3, [r7, #20]
 80011b0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80011b2:	bf00      	nop
 80011b4:	371c      	adds	r7, #28
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr

080011be <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80011be:	b480      	push	{r7}
 80011c0:	b087      	sub	sp, #28
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	60f8      	str	r0, [r7, #12]
 80011c6:	60b9      	str	r1, [r7, #8]
 80011c8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	3330      	adds	r3, #48	@ 0x30
 80011ce:	461a      	mov	r2, r3
 80011d0:	68bb      	ldr	r3, [r7, #8]
 80011d2:	0a1b      	lsrs	r3, r3, #8
 80011d4:	009b      	lsls	r3, r3, #2
 80011d6:	f003 030c 	and.w	r3, r3, #12
 80011da:	4413      	add	r3, r2
 80011dc:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80011de:	697b      	ldr	r3, [r7, #20]
 80011e0:	681a      	ldr	r2, [r3, #0]
 80011e2:	68bb      	ldr	r3, [r7, #8]
 80011e4:	f003 031f 	and.w	r3, r3, #31
 80011e8:	211f      	movs	r1, #31
 80011ea:	fa01 f303 	lsl.w	r3, r1, r3
 80011ee:	43db      	mvns	r3, r3
 80011f0:	401a      	ands	r2, r3
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	0e9b      	lsrs	r3, r3, #26
 80011f6:	f003 011f 	and.w	r1, r3, #31
 80011fa:	68bb      	ldr	r3, [r7, #8]
 80011fc:	f003 031f 	and.w	r3, r3, #31
 8001200:	fa01 f303 	lsl.w	r3, r1, r3
 8001204:	431a      	orrs	r2, r3
 8001206:	697b      	ldr	r3, [r7, #20]
 8001208:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800120a:	bf00      	nop
 800120c:	371c      	adds	r7, #28
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr

08001216 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001216:	b480      	push	{r7}
 8001218:	b087      	sub	sp, #28
 800121a:	af00      	add	r7, sp, #0
 800121c:	60f8      	str	r0, [r7, #12]
 800121e:	60b9      	str	r1, [r7, #8]
 8001220:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	3314      	adds	r3, #20
 8001226:	461a      	mov	r2, r3
 8001228:	68bb      	ldr	r3, [r7, #8]
 800122a:	0e5b      	lsrs	r3, r3, #25
 800122c:	009b      	lsls	r3, r3, #2
 800122e:	f003 0304 	and.w	r3, r3, #4
 8001232:	4413      	add	r3, r2
 8001234:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001236:	697b      	ldr	r3, [r7, #20]
 8001238:	681a      	ldr	r2, [r3, #0]
 800123a:	68bb      	ldr	r3, [r7, #8]
 800123c:	0d1b      	lsrs	r3, r3, #20
 800123e:	f003 031f 	and.w	r3, r3, #31
 8001242:	2107      	movs	r1, #7
 8001244:	fa01 f303 	lsl.w	r3, r1, r3
 8001248:	43db      	mvns	r3, r3
 800124a:	401a      	ands	r2, r3
 800124c:	68bb      	ldr	r3, [r7, #8]
 800124e:	0d1b      	lsrs	r3, r3, #20
 8001250:	f003 031f 	and.w	r3, r3, #31
 8001254:	6879      	ldr	r1, [r7, #4]
 8001256:	fa01 f303 	lsl.w	r3, r1, r3
 800125a:	431a      	orrs	r2, r3
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001260:	bf00      	nop
 8001262:	371c      	adds	r7, #28
 8001264:	46bd      	mov	sp, r7
 8001266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126a:	4770      	bx	lr

0800126c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800126c:	b480      	push	{r7}
 800126e:	b085      	sub	sp, #20
 8001270:	af00      	add	r7, sp, #0
 8001272:	60f8      	str	r0, [r7, #12]
 8001274:	60b9      	str	r1, [r7, #8]
 8001276:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800127e:	68bb      	ldr	r3, [r7, #8]
 8001280:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001284:	43db      	mvns	r3, r3
 8001286:	401a      	ands	r2, r3
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	f003 0318 	and.w	r3, r3, #24
 800128e:	4908      	ldr	r1, [pc, #32]	@ (80012b0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001290:	40d9      	lsrs	r1, r3
 8001292:	68bb      	ldr	r3, [r7, #8]
 8001294:	400b      	ands	r3, r1
 8001296:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800129a:	431a      	orrs	r2, r3
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80012a2:	bf00      	nop
 80012a4:	3714      	adds	r7, #20
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr
 80012ae:	bf00      	nop
 80012b0:	0007ffff 	.word	0x0007ffff

080012b4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b083      	sub	sp, #12
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	689b      	ldr	r3, [r3, #8]
 80012c0:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80012c4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80012c8:	687a      	ldr	r2, [r7, #4]
 80012ca:	6093      	str	r3, [r2, #8]
}
 80012cc:	bf00      	nop
 80012ce:	370c      	adds	r7, #12
 80012d0:	46bd      	mov	sp, r7
 80012d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d6:	4770      	bx	lr

080012d8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80012d8:	b480      	push	{r7}
 80012da:	b083      	sub	sp, #12
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	689b      	ldr	r3, [r3, #8]
 80012e4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80012e8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80012ec:	d101      	bne.n	80012f2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80012ee:	2301      	movs	r3, #1
 80012f0:	e000      	b.n	80012f4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80012f2:	2300      	movs	r3, #0
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	370c      	adds	r7, #12
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr

08001300 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001300:	b480      	push	{r7}
 8001302:	b083      	sub	sp, #12
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	689b      	ldr	r3, [r3, #8]
 800130c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001310:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001314:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800131c:	bf00      	nop
 800131e:	370c      	adds	r7, #12
 8001320:	46bd      	mov	sp, r7
 8001322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001326:	4770      	bx	lr

08001328 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001328:	b480      	push	{r7}
 800132a:	b083      	sub	sp, #12
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	689b      	ldr	r3, [r3, #8]
 8001334:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001338:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800133c:	d101      	bne.n	8001342 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800133e:	2301      	movs	r3, #1
 8001340:	e000      	b.n	8001344 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001342:	2300      	movs	r3, #0
}
 8001344:	4618      	mov	r0, r3
 8001346:	370c      	adds	r7, #12
 8001348:	46bd      	mov	sp, r7
 800134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134e:	4770      	bx	lr

08001350 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001350:	b480      	push	{r7}
 8001352:	b083      	sub	sp, #12
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	689b      	ldr	r3, [r3, #8]
 800135c:	f003 0301 	and.w	r3, r3, #1
 8001360:	2b01      	cmp	r3, #1
 8001362:	d101      	bne.n	8001368 <LL_ADC_IsEnabled+0x18>
 8001364:	2301      	movs	r3, #1
 8001366:	e000      	b.n	800136a <LL_ADC_IsEnabled+0x1a>
 8001368:	2300      	movs	r3, #0
}
 800136a:	4618      	mov	r0, r3
 800136c:	370c      	adds	r7, #12
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr

08001376 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001376:	b480      	push	{r7}
 8001378:	b083      	sub	sp, #12
 800137a:	af00      	add	r7, sp, #0
 800137c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	689b      	ldr	r3, [r3, #8]
 8001382:	f003 0304 	and.w	r3, r3, #4
 8001386:	2b04      	cmp	r3, #4
 8001388:	d101      	bne.n	800138e <LL_ADC_REG_IsConversionOngoing+0x18>
 800138a:	2301      	movs	r3, #1
 800138c:	e000      	b.n	8001390 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800138e:	2300      	movs	r3, #0
}
 8001390:	4618      	mov	r0, r3
 8001392:	370c      	adds	r7, #12
 8001394:	46bd      	mov	sp, r7
 8001396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139a:	4770      	bx	lr

0800139c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	689b      	ldr	r3, [r3, #8]
 80013a8:	f003 0308 	and.w	r3, r3, #8
 80013ac:	2b08      	cmp	r3, #8
 80013ae:	d101      	bne.n	80013b4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80013b0:	2301      	movs	r3, #1
 80013b2:	e000      	b.n	80013b6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80013b4:	2300      	movs	r3, #0
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	370c      	adds	r7, #12
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr
	...

080013c4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80013c4:	b590      	push	{r4, r7, lr}
 80013c6:	b089      	sub	sp, #36	@ 0x24
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013cc:	2300      	movs	r3, #0
 80013ce:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80013d0:	2300      	movs	r3, #0
 80013d2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d101      	bne.n	80013de <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80013da:	2301      	movs	r3, #1
 80013dc:	e130      	b.n	8001640 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	691b      	ldr	r3, [r3, #16]
 80013e2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d109      	bne.n	8001400 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80013ec:	6878      	ldr	r0, [r7, #4]
 80013ee:	f7ff fc19 	bl	8000c24 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	2200      	movs	r2, #0
 80013f6:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2200      	movs	r2, #0
 80013fc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4618      	mov	r0, r3
 8001406:	f7ff ff67 	bl	80012d8 <LL_ADC_IsDeepPowerDownEnabled>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d004      	beq.n	800141a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4618      	mov	r0, r3
 8001416:	f7ff ff4d 	bl	80012b4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4618      	mov	r0, r3
 8001420:	f7ff ff82 	bl	8001328 <LL_ADC_IsInternalRegulatorEnabled>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d115      	bne.n	8001456 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4618      	mov	r0, r3
 8001430:	f7ff ff66 	bl	8001300 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001434:	4b84      	ldr	r3, [pc, #528]	@ (8001648 <HAL_ADC_Init+0x284>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	099b      	lsrs	r3, r3, #6
 800143a:	4a84      	ldr	r2, [pc, #528]	@ (800164c <HAL_ADC_Init+0x288>)
 800143c:	fba2 2303 	umull	r2, r3, r2, r3
 8001440:	099b      	lsrs	r3, r3, #6
 8001442:	3301      	adds	r3, #1
 8001444:	005b      	lsls	r3, r3, #1
 8001446:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001448:	e002      	b.n	8001450 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	3b01      	subs	r3, #1
 800144e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d1f9      	bne.n	800144a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4618      	mov	r0, r3
 800145c:	f7ff ff64 	bl	8001328 <LL_ADC_IsInternalRegulatorEnabled>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d10d      	bne.n	8001482 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800146a:	f043 0210 	orr.w	r2, r3, #16
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001476:	f043 0201 	orr.w	r2, r3, #1
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800147e:	2301      	movs	r3, #1
 8001480:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4618      	mov	r0, r3
 8001488:	f7ff ff75 	bl	8001376 <LL_ADC_REG_IsConversionOngoing>
 800148c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001492:	f003 0310 	and.w	r3, r3, #16
 8001496:	2b00      	cmp	r3, #0
 8001498:	f040 80c9 	bne.w	800162e <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	f040 80c5 	bne.w	800162e <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80014a8:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80014ac:	f043 0202 	orr.w	r2, r3, #2
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4618      	mov	r0, r3
 80014ba:	f7ff ff49 	bl	8001350 <LL_ADC_IsEnabled>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d115      	bne.n	80014f0 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80014c4:	4862      	ldr	r0, [pc, #392]	@ (8001650 <HAL_ADC_Init+0x28c>)
 80014c6:	f7ff ff43 	bl	8001350 <LL_ADC_IsEnabled>
 80014ca:	4604      	mov	r4, r0
 80014cc:	4861      	ldr	r0, [pc, #388]	@ (8001654 <HAL_ADC_Init+0x290>)
 80014ce:	f7ff ff3f 	bl	8001350 <LL_ADC_IsEnabled>
 80014d2:	4603      	mov	r3, r0
 80014d4:	431c      	orrs	r4, r3
 80014d6:	4860      	ldr	r0, [pc, #384]	@ (8001658 <HAL_ADC_Init+0x294>)
 80014d8:	f7ff ff3a 	bl	8001350 <LL_ADC_IsEnabled>
 80014dc:	4603      	mov	r3, r0
 80014de:	4323      	orrs	r3, r4
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d105      	bne.n	80014f0 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	4619      	mov	r1, r3
 80014ea:	485c      	ldr	r0, [pc, #368]	@ (800165c <HAL_ADC_Init+0x298>)
 80014ec:	f7ff fdde 	bl	80010ac <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	7e5b      	ldrb	r3, [r3, #25]
 80014f4:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80014fa:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001500:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001506:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800150e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001510:	4313      	orrs	r3, r2
 8001512:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	f893 3020 	ldrb.w	r3, [r3, #32]
 800151a:	2b01      	cmp	r3, #1
 800151c:	d106      	bne.n	800152c <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001522:	3b01      	subs	r3, #1
 8001524:	045b      	lsls	r3, r3, #17
 8001526:	69ba      	ldr	r2, [r7, #24]
 8001528:	4313      	orrs	r3, r2
 800152a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001530:	2b00      	cmp	r3, #0
 8001532:	d009      	beq.n	8001548 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001538:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001540:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001542:	69ba      	ldr	r2, [r7, #24]
 8001544:	4313      	orrs	r3, r2
 8001546:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	68da      	ldr	r2, [r3, #12]
 800154e:	4b44      	ldr	r3, [pc, #272]	@ (8001660 <HAL_ADC_Init+0x29c>)
 8001550:	4013      	ands	r3, r2
 8001552:	687a      	ldr	r2, [r7, #4]
 8001554:	6812      	ldr	r2, [r2, #0]
 8001556:	69b9      	ldr	r1, [r7, #24]
 8001558:	430b      	orrs	r3, r1
 800155a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4618      	mov	r0, r3
 8001562:	f7ff ff1b 	bl	800139c <LL_ADC_INJ_IsConversionOngoing>
 8001566:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d13d      	bne.n	80015ea <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800156e:	693b      	ldr	r3, [r7, #16]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d13a      	bne.n	80015ea <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001578:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001580:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001582:	4313      	orrs	r3, r2
 8001584:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	68db      	ldr	r3, [r3, #12]
 800158c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001590:	f023 0302 	bic.w	r3, r3, #2
 8001594:	687a      	ldr	r2, [r7, #4]
 8001596:	6812      	ldr	r2, [r2, #0]
 8001598:	69b9      	ldr	r1, [r7, #24]
 800159a:	430b      	orrs	r3, r1
 800159c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80015a4:	2b01      	cmp	r3, #1
 80015a6:	d118      	bne.n	80015da <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	691b      	ldr	r3, [r3, #16]
 80015ae:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80015b2:	f023 0304 	bic.w	r3, r3, #4
 80015b6:	687a      	ldr	r2, [r7, #4]
 80015b8:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80015ba:	687a      	ldr	r2, [r7, #4]
 80015bc:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80015be:	4311      	orrs	r1, r2
 80015c0:	687a      	ldr	r2, [r7, #4]
 80015c2:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80015c4:	4311      	orrs	r1, r2
 80015c6:	687a      	ldr	r2, [r7, #4]
 80015c8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80015ca:	430a      	orrs	r2, r1
 80015cc:	431a      	orrs	r2, r3
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f042 0201 	orr.w	r2, r2, #1
 80015d6:	611a      	str	r2, [r3, #16]
 80015d8:	e007      	b.n	80015ea <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	691a      	ldr	r2, [r3, #16]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f022 0201 	bic.w	r2, r2, #1
 80015e8:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	691b      	ldr	r3, [r3, #16]
 80015ee:	2b01      	cmp	r3, #1
 80015f0:	d10c      	bne.n	800160c <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015f8:	f023 010f 	bic.w	r1, r3, #15
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	69db      	ldr	r3, [r3, #28]
 8001600:	1e5a      	subs	r2, r3, #1
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	430a      	orrs	r2, r1
 8001608:	631a      	str	r2, [r3, #48]	@ 0x30
 800160a:	e007      	b.n	800161c <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f022 020f 	bic.w	r2, r2, #15
 800161a:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001620:	f023 0303 	bic.w	r3, r3, #3
 8001624:	f043 0201 	orr.w	r2, r3, #1
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	655a      	str	r2, [r3, #84]	@ 0x54
 800162c:	e007      	b.n	800163e <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001632:	f043 0210 	orr.w	r2, r3, #16
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800163a:	2301      	movs	r3, #1
 800163c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800163e:	7ffb      	ldrb	r3, [r7, #31]
}
 8001640:	4618      	mov	r0, r3
 8001642:	3724      	adds	r7, #36	@ 0x24
 8001644:	46bd      	mov	sp, r7
 8001646:	bd90      	pop	{r4, r7, pc}
 8001648:	20000010 	.word	0x20000010
 800164c:	053e2d63 	.word	0x053e2d63
 8001650:	50040000 	.word	0x50040000
 8001654:	50040100 	.word	0x50040100
 8001658:	50040200 	.word	0x50040200
 800165c:	50040300 	.word	0x50040300
 8001660:	fff0c007 	.word	0xfff0c007

08001664 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b0b6      	sub	sp, #216	@ 0xd8
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
 800166c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800166e:	2300      	movs	r3, #0
 8001670:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001674:	2300      	movs	r3, #0
 8001676:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800167e:	2b01      	cmp	r3, #1
 8001680:	d101      	bne.n	8001686 <HAL_ADC_ConfigChannel+0x22>
 8001682:	2302      	movs	r3, #2
 8001684:	e3c9      	b.n	8001e1a <HAL_ADC_ConfigChannel+0x7b6>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2201      	movs	r2, #1
 800168a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4618      	mov	r0, r3
 8001694:	f7ff fe6f 	bl	8001376 <LL_ADC_REG_IsConversionOngoing>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	f040 83aa 	bne.w	8001df4 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	2b05      	cmp	r3, #5
 80016ae:	d824      	bhi.n	80016fa <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	3b02      	subs	r3, #2
 80016b6:	2b03      	cmp	r3, #3
 80016b8:	d81b      	bhi.n	80016f2 <HAL_ADC_ConfigChannel+0x8e>
 80016ba:	a201      	add	r2, pc, #4	@ (adr r2, 80016c0 <HAL_ADC_ConfigChannel+0x5c>)
 80016bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016c0:	080016d1 	.word	0x080016d1
 80016c4:	080016d9 	.word	0x080016d9
 80016c8:	080016e1 	.word	0x080016e1
 80016cc:	080016e9 	.word	0x080016e9
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 80016d0:	230c      	movs	r3, #12
 80016d2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80016d6:	e010      	b.n	80016fa <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 80016d8:	2312      	movs	r3, #18
 80016da:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80016de:	e00c      	b.n	80016fa <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 80016e0:	2318      	movs	r3, #24
 80016e2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80016e6:	e008      	b.n	80016fa <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 80016e8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80016ec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80016f0:	e003      	b.n	80016fa <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 80016f2:	2306      	movs	r3, #6
 80016f4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80016f8:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6818      	ldr	r0, [r3, #0]
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	461a      	mov	r2, r3
 8001704:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8001708:	f7ff fd59 	bl	80011be <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4618      	mov	r0, r3
 8001712:	f7ff fe30 	bl	8001376 <LL_ADC_REG_IsConversionOngoing>
 8001716:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4618      	mov	r0, r3
 8001720:	f7ff fe3c 	bl	800139c <LL_ADC_INJ_IsConversionOngoing>
 8001724:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001728:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800172c:	2b00      	cmp	r3, #0
 800172e:	f040 81a4 	bne.w	8001a7a <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001732:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001736:	2b00      	cmp	r3, #0
 8001738:	f040 819f 	bne.w	8001a7a <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6818      	ldr	r0, [r3, #0]
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	6819      	ldr	r1, [r3, #0]
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	689b      	ldr	r3, [r3, #8]
 8001748:	461a      	mov	r2, r3
 800174a:	f7ff fd64 	bl	8001216 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	695a      	ldr	r2, [r3, #20]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	68db      	ldr	r3, [r3, #12]
 8001758:	08db      	lsrs	r3, r3, #3
 800175a:	f003 0303 	and.w	r3, r3, #3
 800175e:	005b      	lsls	r3, r3, #1
 8001760:	fa02 f303 	lsl.w	r3, r2, r3
 8001764:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	691b      	ldr	r3, [r3, #16]
 800176c:	2b04      	cmp	r3, #4
 800176e:	d00a      	beq.n	8001786 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6818      	ldr	r0, [r3, #0]
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	6919      	ldr	r1, [r3, #16]
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	681a      	ldr	r2, [r3, #0]
 800177c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001780:	f7ff fcc8 	bl	8001114 <LL_ADC_SetOffset>
 8001784:	e179      	b.n	8001a7a <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	2100      	movs	r1, #0
 800178c:	4618      	mov	r0, r3
 800178e:	f7ff fce5 	bl	800115c <LL_ADC_GetOffsetChannel>
 8001792:	4603      	mov	r3, r0
 8001794:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001798:	2b00      	cmp	r3, #0
 800179a:	d10a      	bne.n	80017b2 <HAL_ADC_ConfigChannel+0x14e>
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	2100      	movs	r1, #0
 80017a2:	4618      	mov	r0, r3
 80017a4:	f7ff fcda 	bl	800115c <LL_ADC_GetOffsetChannel>
 80017a8:	4603      	mov	r3, r0
 80017aa:	0e9b      	lsrs	r3, r3, #26
 80017ac:	f003 021f 	and.w	r2, r3, #31
 80017b0:	e01e      	b.n	80017f0 <HAL_ADC_ConfigChannel+0x18c>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	2100      	movs	r1, #0
 80017b8:	4618      	mov	r0, r3
 80017ba:	f7ff fccf 	bl	800115c <LL_ADC_GetOffsetChannel>
 80017be:	4603      	mov	r3, r0
 80017c0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017c4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80017c8:	fa93 f3a3 	rbit	r3, r3
 80017cc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80017d0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80017d4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80017d8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d101      	bne.n	80017e4 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 80017e0:	2320      	movs	r3, #32
 80017e2:	e004      	b.n	80017ee <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 80017e4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80017e8:	fab3 f383 	clz	r3, r3
 80017ec:	b2db      	uxtb	r3, r3
 80017ee:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d105      	bne.n	8001808 <HAL_ADC_ConfigChannel+0x1a4>
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	0e9b      	lsrs	r3, r3, #26
 8001802:	f003 031f 	and.w	r3, r3, #31
 8001806:	e018      	b.n	800183a <HAL_ADC_ConfigChannel+0x1d6>
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001810:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001814:	fa93 f3a3 	rbit	r3, r3
 8001818:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 800181c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001820:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8001824:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001828:	2b00      	cmp	r3, #0
 800182a:	d101      	bne.n	8001830 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 800182c:	2320      	movs	r3, #32
 800182e:	e004      	b.n	800183a <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8001830:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001834:	fab3 f383 	clz	r3, r3
 8001838:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800183a:	429a      	cmp	r2, r3
 800183c:	d106      	bne.n	800184c <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	2200      	movs	r2, #0
 8001844:	2100      	movs	r1, #0
 8001846:	4618      	mov	r0, r3
 8001848:	f7ff fc9e 	bl	8001188 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	2101      	movs	r1, #1
 8001852:	4618      	mov	r0, r3
 8001854:	f7ff fc82 	bl	800115c <LL_ADC_GetOffsetChannel>
 8001858:	4603      	mov	r3, r0
 800185a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800185e:	2b00      	cmp	r3, #0
 8001860:	d10a      	bne.n	8001878 <HAL_ADC_ConfigChannel+0x214>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	2101      	movs	r1, #1
 8001868:	4618      	mov	r0, r3
 800186a:	f7ff fc77 	bl	800115c <LL_ADC_GetOffsetChannel>
 800186e:	4603      	mov	r3, r0
 8001870:	0e9b      	lsrs	r3, r3, #26
 8001872:	f003 021f 	and.w	r2, r3, #31
 8001876:	e01e      	b.n	80018b6 <HAL_ADC_ConfigChannel+0x252>
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	2101      	movs	r1, #1
 800187e:	4618      	mov	r0, r3
 8001880:	f7ff fc6c 	bl	800115c <LL_ADC_GetOffsetChannel>
 8001884:	4603      	mov	r3, r0
 8001886:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800188a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800188e:	fa93 f3a3 	rbit	r3, r3
 8001892:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8001896:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800189a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 800189e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d101      	bne.n	80018aa <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 80018a6:	2320      	movs	r3, #32
 80018a8:	e004      	b.n	80018b4 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 80018aa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80018ae:	fab3 f383 	clz	r3, r3
 80018b2:	b2db      	uxtb	r3, r3
 80018b4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d105      	bne.n	80018ce <HAL_ADC_ConfigChannel+0x26a>
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	0e9b      	lsrs	r3, r3, #26
 80018c8:	f003 031f 	and.w	r3, r3, #31
 80018cc:	e018      	b.n	8001900 <HAL_ADC_ConfigChannel+0x29c>
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018d6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80018da:	fa93 f3a3 	rbit	r3, r3
 80018de:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 80018e2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80018e6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 80018ea:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d101      	bne.n	80018f6 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 80018f2:	2320      	movs	r3, #32
 80018f4:	e004      	b.n	8001900 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 80018f6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80018fa:	fab3 f383 	clz	r3, r3
 80018fe:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001900:	429a      	cmp	r2, r3
 8001902:	d106      	bne.n	8001912 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	2200      	movs	r2, #0
 800190a:	2101      	movs	r1, #1
 800190c:	4618      	mov	r0, r3
 800190e:	f7ff fc3b 	bl	8001188 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	2102      	movs	r1, #2
 8001918:	4618      	mov	r0, r3
 800191a:	f7ff fc1f 	bl	800115c <LL_ADC_GetOffsetChannel>
 800191e:	4603      	mov	r3, r0
 8001920:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001924:	2b00      	cmp	r3, #0
 8001926:	d10a      	bne.n	800193e <HAL_ADC_ConfigChannel+0x2da>
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	2102      	movs	r1, #2
 800192e:	4618      	mov	r0, r3
 8001930:	f7ff fc14 	bl	800115c <LL_ADC_GetOffsetChannel>
 8001934:	4603      	mov	r3, r0
 8001936:	0e9b      	lsrs	r3, r3, #26
 8001938:	f003 021f 	and.w	r2, r3, #31
 800193c:	e01e      	b.n	800197c <HAL_ADC_ConfigChannel+0x318>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	2102      	movs	r1, #2
 8001944:	4618      	mov	r0, r3
 8001946:	f7ff fc09 	bl	800115c <LL_ADC_GetOffsetChannel>
 800194a:	4603      	mov	r3, r0
 800194c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001950:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001954:	fa93 f3a3 	rbit	r3, r3
 8001958:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 800195c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001960:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8001964:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001968:	2b00      	cmp	r3, #0
 800196a:	d101      	bne.n	8001970 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 800196c:	2320      	movs	r3, #32
 800196e:	e004      	b.n	800197a <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8001970:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001974:	fab3 f383 	clz	r3, r3
 8001978:	b2db      	uxtb	r3, r3
 800197a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001984:	2b00      	cmp	r3, #0
 8001986:	d105      	bne.n	8001994 <HAL_ADC_ConfigChannel+0x330>
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	0e9b      	lsrs	r3, r3, #26
 800198e:	f003 031f 	and.w	r3, r3, #31
 8001992:	e014      	b.n	80019be <HAL_ADC_ConfigChannel+0x35a>
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800199a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800199c:	fa93 f3a3 	rbit	r3, r3
 80019a0:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 80019a2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80019a4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 80019a8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d101      	bne.n	80019b4 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 80019b0:	2320      	movs	r3, #32
 80019b2:	e004      	b.n	80019be <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 80019b4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80019b8:	fab3 f383 	clz	r3, r3
 80019bc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80019be:	429a      	cmp	r2, r3
 80019c0:	d106      	bne.n	80019d0 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	2200      	movs	r2, #0
 80019c8:	2102      	movs	r1, #2
 80019ca:	4618      	mov	r0, r3
 80019cc:	f7ff fbdc 	bl	8001188 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	2103      	movs	r1, #3
 80019d6:	4618      	mov	r0, r3
 80019d8:	f7ff fbc0 	bl	800115c <LL_ADC_GetOffsetChannel>
 80019dc:	4603      	mov	r3, r0
 80019de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d10a      	bne.n	80019fc <HAL_ADC_ConfigChannel+0x398>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	2103      	movs	r1, #3
 80019ec:	4618      	mov	r0, r3
 80019ee:	f7ff fbb5 	bl	800115c <LL_ADC_GetOffsetChannel>
 80019f2:	4603      	mov	r3, r0
 80019f4:	0e9b      	lsrs	r3, r3, #26
 80019f6:	f003 021f 	and.w	r2, r3, #31
 80019fa:	e017      	b.n	8001a2c <HAL_ADC_ConfigChannel+0x3c8>
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	2103      	movs	r1, #3
 8001a02:	4618      	mov	r0, r3
 8001a04:	f7ff fbaa 	bl	800115c <LL_ADC_GetOffsetChannel>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a0c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001a0e:	fa93 f3a3 	rbit	r3, r3
 8001a12:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8001a14:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001a16:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8001a18:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d101      	bne.n	8001a22 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8001a1e:	2320      	movs	r3, #32
 8001a20:	e003      	b.n	8001a2a <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8001a22:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001a24:	fab3 f383 	clz	r3, r3
 8001a28:	b2db      	uxtb	r3, r3
 8001a2a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d105      	bne.n	8001a44 <HAL_ADC_ConfigChannel+0x3e0>
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	0e9b      	lsrs	r3, r3, #26
 8001a3e:	f003 031f 	and.w	r3, r3, #31
 8001a42:	e011      	b.n	8001a68 <HAL_ADC_ConfigChannel+0x404>
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a4a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001a4c:	fa93 f3a3 	rbit	r3, r3
 8001a50:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8001a52:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001a54:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8001a56:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d101      	bne.n	8001a60 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8001a5c:	2320      	movs	r3, #32
 8001a5e:	e003      	b.n	8001a68 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8001a60:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001a62:	fab3 f383 	clz	r3, r3
 8001a66:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	d106      	bne.n	8001a7a <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	2200      	movs	r2, #0
 8001a72:	2103      	movs	r1, #3
 8001a74:	4618      	mov	r0, r3
 8001a76:	f7ff fb87 	bl	8001188 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f7ff fc66 	bl	8001350 <LL_ADC_IsEnabled>
 8001a84:	4603      	mov	r3, r0
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	f040 8140 	bne.w	8001d0c <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6818      	ldr	r0, [r3, #0]
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	6819      	ldr	r1, [r3, #0]
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	68db      	ldr	r3, [r3, #12]
 8001a98:	461a      	mov	r2, r3
 8001a9a:	f7ff fbe7 	bl	800126c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	68db      	ldr	r3, [r3, #12]
 8001aa2:	4a8f      	ldr	r2, [pc, #572]	@ (8001ce0 <HAL_ADC_ConfigChannel+0x67c>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	f040 8131 	bne.w	8001d0c <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d10b      	bne.n	8001ad2 <HAL_ADC_ConfigChannel+0x46e>
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	0e9b      	lsrs	r3, r3, #26
 8001ac0:	3301      	adds	r3, #1
 8001ac2:	f003 031f 	and.w	r3, r3, #31
 8001ac6:	2b09      	cmp	r3, #9
 8001ac8:	bf94      	ite	ls
 8001aca:	2301      	movls	r3, #1
 8001acc:	2300      	movhi	r3, #0
 8001ace:	b2db      	uxtb	r3, r3
 8001ad0:	e019      	b.n	8001b06 <HAL_ADC_ConfigChannel+0x4a2>
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ad8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001ada:	fa93 f3a3 	rbit	r3, r3
 8001ade:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8001ae0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ae2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8001ae4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d101      	bne.n	8001aee <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8001aea:	2320      	movs	r3, #32
 8001aec:	e003      	b.n	8001af6 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8001aee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001af0:	fab3 f383 	clz	r3, r3
 8001af4:	b2db      	uxtb	r3, r3
 8001af6:	3301      	adds	r3, #1
 8001af8:	f003 031f 	and.w	r3, r3, #31
 8001afc:	2b09      	cmp	r3, #9
 8001afe:	bf94      	ite	ls
 8001b00:	2301      	movls	r3, #1
 8001b02:	2300      	movhi	r3, #0
 8001b04:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d079      	beq.n	8001bfe <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d107      	bne.n	8001b26 <HAL_ADC_ConfigChannel+0x4c2>
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	0e9b      	lsrs	r3, r3, #26
 8001b1c:	3301      	adds	r3, #1
 8001b1e:	069b      	lsls	r3, r3, #26
 8001b20:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001b24:	e015      	b.n	8001b52 <HAL_ADC_ConfigChannel+0x4ee>
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b2c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001b2e:	fa93 f3a3 	rbit	r3, r3
 8001b32:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8001b34:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001b36:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8001b38:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d101      	bne.n	8001b42 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8001b3e:	2320      	movs	r3, #32
 8001b40:	e003      	b.n	8001b4a <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8001b42:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001b44:	fab3 f383 	clz	r3, r3
 8001b48:	b2db      	uxtb	r3, r3
 8001b4a:	3301      	adds	r3, #1
 8001b4c:	069b      	lsls	r3, r3, #26
 8001b4e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d109      	bne.n	8001b72 <HAL_ADC_ConfigChannel+0x50e>
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	0e9b      	lsrs	r3, r3, #26
 8001b64:	3301      	adds	r3, #1
 8001b66:	f003 031f 	and.w	r3, r3, #31
 8001b6a:	2101      	movs	r1, #1
 8001b6c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b70:	e017      	b.n	8001ba2 <HAL_ADC_ConfigChannel+0x53e>
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b78:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001b7a:	fa93 f3a3 	rbit	r3, r3
 8001b7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8001b80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001b82:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8001b84:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d101      	bne.n	8001b8e <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8001b8a:	2320      	movs	r3, #32
 8001b8c:	e003      	b.n	8001b96 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8001b8e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001b90:	fab3 f383 	clz	r3, r3
 8001b94:	b2db      	uxtb	r3, r3
 8001b96:	3301      	adds	r3, #1
 8001b98:	f003 031f 	and.w	r3, r3, #31
 8001b9c:	2101      	movs	r1, #1
 8001b9e:	fa01 f303 	lsl.w	r3, r1, r3
 8001ba2:	ea42 0103 	orr.w	r1, r2, r3
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d10a      	bne.n	8001bc8 <HAL_ADC_ConfigChannel+0x564>
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	0e9b      	lsrs	r3, r3, #26
 8001bb8:	3301      	adds	r3, #1
 8001bba:	f003 021f 	and.w	r2, r3, #31
 8001bbe:	4613      	mov	r3, r2
 8001bc0:	005b      	lsls	r3, r3, #1
 8001bc2:	4413      	add	r3, r2
 8001bc4:	051b      	lsls	r3, r3, #20
 8001bc6:	e018      	b.n	8001bfa <HAL_ADC_ConfigChannel+0x596>
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001bd0:	fa93 f3a3 	rbit	r3, r3
 8001bd4:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8001bd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001bd8:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8001bda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d101      	bne.n	8001be4 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8001be0:	2320      	movs	r3, #32
 8001be2:	e003      	b.n	8001bec <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8001be4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001be6:	fab3 f383 	clz	r3, r3
 8001bea:	b2db      	uxtb	r3, r3
 8001bec:	3301      	adds	r3, #1
 8001bee:	f003 021f 	and.w	r2, r3, #31
 8001bf2:	4613      	mov	r3, r2
 8001bf4:	005b      	lsls	r3, r3, #1
 8001bf6:	4413      	add	r3, r2
 8001bf8:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001bfa:	430b      	orrs	r3, r1
 8001bfc:	e081      	b.n	8001d02 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d107      	bne.n	8001c1a <HAL_ADC_ConfigChannel+0x5b6>
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	0e9b      	lsrs	r3, r3, #26
 8001c10:	3301      	adds	r3, #1
 8001c12:	069b      	lsls	r3, r3, #26
 8001c14:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001c18:	e015      	b.n	8001c46 <HAL_ADC_ConfigChannel+0x5e2>
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c22:	fa93 f3a3 	rbit	r3, r3
 8001c26:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8001c28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8001c2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d101      	bne.n	8001c36 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8001c32:	2320      	movs	r3, #32
 8001c34:	e003      	b.n	8001c3e <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8001c36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c38:	fab3 f383 	clz	r3, r3
 8001c3c:	b2db      	uxtb	r3, r3
 8001c3e:	3301      	adds	r3, #1
 8001c40:	069b      	lsls	r3, r3, #26
 8001c42:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d109      	bne.n	8001c66 <HAL_ADC_ConfigChannel+0x602>
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	0e9b      	lsrs	r3, r3, #26
 8001c58:	3301      	adds	r3, #1
 8001c5a:	f003 031f 	and.w	r3, r3, #31
 8001c5e:	2101      	movs	r1, #1
 8001c60:	fa01 f303 	lsl.w	r3, r1, r3
 8001c64:	e017      	b.n	8001c96 <HAL_ADC_ConfigChannel+0x632>
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c6c:	69fb      	ldr	r3, [r7, #28]
 8001c6e:	fa93 f3a3 	rbit	r3, r3
 8001c72:	61bb      	str	r3, [r7, #24]
  return result;
 8001c74:	69bb      	ldr	r3, [r7, #24]
 8001c76:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8001c78:	6a3b      	ldr	r3, [r7, #32]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d101      	bne.n	8001c82 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8001c7e:	2320      	movs	r3, #32
 8001c80:	e003      	b.n	8001c8a <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8001c82:	6a3b      	ldr	r3, [r7, #32]
 8001c84:	fab3 f383 	clz	r3, r3
 8001c88:	b2db      	uxtb	r3, r3
 8001c8a:	3301      	adds	r3, #1
 8001c8c:	f003 031f 	and.w	r3, r3, #31
 8001c90:	2101      	movs	r1, #1
 8001c92:	fa01 f303 	lsl.w	r3, r1, r3
 8001c96:	ea42 0103 	orr.w	r1, r2, r3
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d10d      	bne.n	8001cc2 <HAL_ADC_ConfigChannel+0x65e>
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	0e9b      	lsrs	r3, r3, #26
 8001cac:	3301      	adds	r3, #1
 8001cae:	f003 021f 	and.w	r2, r3, #31
 8001cb2:	4613      	mov	r3, r2
 8001cb4:	005b      	lsls	r3, r3, #1
 8001cb6:	4413      	add	r3, r2
 8001cb8:	3b1e      	subs	r3, #30
 8001cba:	051b      	lsls	r3, r3, #20
 8001cbc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001cc0:	e01e      	b.n	8001d00 <HAL_ADC_ConfigChannel+0x69c>
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	fa93 f3a3 	rbit	r3, r3
 8001cce:	60fb      	str	r3, [r7, #12]
  return result;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d104      	bne.n	8001ce4 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8001cda:	2320      	movs	r3, #32
 8001cdc:	e006      	b.n	8001cec <HAL_ADC_ConfigChannel+0x688>
 8001cde:	bf00      	nop
 8001ce0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	fab3 f383 	clz	r3, r3
 8001cea:	b2db      	uxtb	r3, r3
 8001cec:	3301      	adds	r3, #1
 8001cee:	f003 021f 	and.w	r2, r3, #31
 8001cf2:	4613      	mov	r3, r2
 8001cf4:	005b      	lsls	r3, r3, #1
 8001cf6:	4413      	add	r3, r2
 8001cf8:	3b1e      	subs	r3, #30
 8001cfa:	051b      	lsls	r3, r3, #20
 8001cfc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d00:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8001d02:	683a      	ldr	r2, [r7, #0]
 8001d04:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d06:	4619      	mov	r1, r3
 8001d08:	f7ff fa85 	bl	8001216 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	4b44      	ldr	r3, [pc, #272]	@ (8001e24 <HAL_ADC_ConfigChannel+0x7c0>)
 8001d12:	4013      	ands	r3, r2
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d07a      	beq.n	8001e0e <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001d18:	4843      	ldr	r0, [pc, #268]	@ (8001e28 <HAL_ADC_ConfigChannel+0x7c4>)
 8001d1a:	f7ff f9ed 	bl	80010f8 <LL_ADC_GetCommonPathInternalCh>
 8001d1e:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a41      	ldr	r2, [pc, #260]	@ (8001e2c <HAL_ADC_ConfigChannel+0x7c8>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d12c      	bne.n	8001d86 <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001d2c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001d30:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d126      	bne.n	8001d86 <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a3c      	ldr	r2, [pc, #240]	@ (8001e30 <HAL_ADC_ConfigChannel+0x7cc>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d004      	beq.n	8001d4c <HAL_ADC_ConfigChannel+0x6e8>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a3b      	ldr	r2, [pc, #236]	@ (8001e34 <HAL_ADC_ConfigChannel+0x7d0>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d15d      	bne.n	8001e08 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001d4c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001d50:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001d54:	4619      	mov	r1, r3
 8001d56:	4834      	ldr	r0, [pc, #208]	@ (8001e28 <HAL_ADC_ConfigChannel+0x7c4>)
 8001d58:	f7ff f9bb 	bl	80010d2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001d5c:	4b36      	ldr	r3, [pc, #216]	@ (8001e38 <HAL_ADC_ConfigChannel+0x7d4>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	099b      	lsrs	r3, r3, #6
 8001d62:	4a36      	ldr	r2, [pc, #216]	@ (8001e3c <HAL_ADC_ConfigChannel+0x7d8>)
 8001d64:	fba2 2303 	umull	r2, r3, r2, r3
 8001d68:	099b      	lsrs	r3, r3, #6
 8001d6a:	1c5a      	adds	r2, r3, #1
 8001d6c:	4613      	mov	r3, r2
 8001d6e:	005b      	lsls	r3, r3, #1
 8001d70:	4413      	add	r3, r2
 8001d72:	009b      	lsls	r3, r3, #2
 8001d74:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001d76:	e002      	b.n	8001d7e <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	3b01      	subs	r3, #1
 8001d7c:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001d7e:	68bb      	ldr	r3, [r7, #8]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d1f9      	bne.n	8001d78 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001d84:	e040      	b.n	8001e08 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a2d      	ldr	r2, [pc, #180]	@ (8001e40 <HAL_ADC_ConfigChannel+0x7dc>)
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d118      	bne.n	8001dc2 <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001d90:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001d94:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d112      	bne.n	8001dc2 <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a23      	ldr	r2, [pc, #140]	@ (8001e30 <HAL_ADC_ConfigChannel+0x7cc>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d004      	beq.n	8001db0 <HAL_ADC_ConfigChannel+0x74c>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4a22      	ldr	r2, [pc, #136]	@ (8001e34 <HAL_ADC_ConfigChannel+0x7d0>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d12d      	bne.n	8001e0c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001db0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001db4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001db8:	4619      	mov	r1, r3
 8001dba:	481b      	ldr	r0, [pc, #108]	@ (8001e28 <HAL_ADC_ConfigChannel+0x7c4>)
 8001dbc:	f7ff f989 	bl	80010d2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001dc0:	e024      	b.n	8001e0c <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a1f      	ldr	r2, [pc, #124]	@ (8001e44 <HAL_ADC_ConfigChannel+0x7e0>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d120      	bne.n	8001e0e <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001dcc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001dd0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d11a      	bne.n	8001e0e <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a14      	ldr	r2, [pc, #80]	@ (8001e30 <HAL_ADC_ConfigChannel+0x7cc>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d115      	bne.n	8001e0e <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001de2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001de6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001dea:	4619      	mov	r1, r3
 8001dec:	480e      	ldr	r0, [pc, #56]	@ (8001e28 <HAL_ADC_ConfigChannel+0x7c4>)
 8001dee:	f7ff f970 	bl	80010d2 <LL_ADC_SetCommonPathInternalCh>
 8001df2:	e00c      	b.n	8001e0e <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001df8:	f043 0220 	orr.w	r2, r3, #32
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001e00:	2301      	movs	r3, #1
 8001e02:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8001e06:	e002      	b.n	8001e0e <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001e08:	bf00      	nop
 8001e0a:	e000      	b.n	8001e0e <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001e0c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2200      	movs	r2, #0
 8001e12:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8001e16:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	37d8      	adds	r7, #216	@ 0xd8
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	80080000 	.word	0x80080000
 8001e28:	50040300 	.word	0x50040300
 8001e2c:	c7520000 	.word	0xc7520000
 8001e30:	50040000 	.word	0x50040000
 8001e34:	50040200 	.word	0x50040200
 8001e38:	20000010 	.word	0x20000010
 8001e3c:	053e2d63 	.word	0x053e2d63
 8001e40:	cb840000 	.word	0xcb840000
 8001e44:	80000001 	.word	0x80000001

08001e48 <LL_ADC_IsEnabled>:
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b083      	sub	sp, #12
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	f003 0301 	and.w	r3, r3, #1
 8001e58:	2b01      	cmp	r3, #1
 8001e5a:	d101      	bne.n	8001e60 <LL_ADC_IsEnabled+0x18>
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	e000      	b.n	8001e62 <LL_ADC_IsEnabled+0x1a>
 8001e60:	2300      	movs	r3, #0
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	370c      	adds	r7, #12
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr

08001e6e <LL_ADC_REG_IsConversionOngoing>:
{
 8001e6e:	b480      	push	{r7}
 8001e70:	b083      	sub	sp, #12
 8001e72:	af00      	add	r7, sp, #0
 8001e74:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	689b      	ldr	r3, [r3, #8]
 8001e7a:	f003 0304 	and.w	r3, r3, #4
 8001e7e:	2b04      	cmp	r3, #4
 8001e80:	d101      	bne.n	8001e86 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001e82:	2301      	movs	r3, #1
 8001e84:	e000      	b.n	8001e88 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001e86:	2300      	movs	r3, #0
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	370c      	adds	r7, #12
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e92:	4770      	bx	lr

08001e94 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8001e94:	b590      	push	{r4, r7, lr}
 8001e96:	b09f      	sub	sp, #124	@ 0x7c
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
 8001e9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	d101      	bne.n	8001eb2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8001eae:	2302      	movs	r3, #2
 8001eb0:	e093      	b.n	8001fda <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2201      	movs	r2, #1
 8001eb6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8001eba:	2300      	movs	r3, #0
 8001ebc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a47      	ldr	r2, [pc, #284]	@ (8001fe4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d102      	bne.n	8001ed2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8001ecc:	4b46      	ldr	r3, [pc, #280]	@ (8001fe8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8001ece:	60bb      	str	r3, [r7, #8]
 8001ed0:	e001      	b.n	8001ed6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8001ed6:	68bb      	ldr	r3, [r7, #8]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d10b      	bne.n	8001ef4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ee0:	f043 0220 	orr.w	r2, r3, #32
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2200      	movs	r2, #0
 8001eec:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	e072      	b.n	8001fda <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f7ff ffb9 	bl	8001e6e <LL_ADC_REG_IsConversionOngoing>
 8001efc:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4618      	mov	r0, r3
 8001f04:	f7ff ffb3 	bl	8001e6e <LL_ADC_REG_IsConversionOngoing>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d154      	bne.n	8001fb8 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8001f0e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d151      	bne.n	8001fb8 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8001f14:	4b35      	ldr	r3, [pc, #212]	@ (8001fec <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8001f16:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d02c      	beq.n	8001f7a <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8001f20:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	6859      	ldr	r1, [r3, #4]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001f32:	035b      	lsls	r3, r3, #13
 8001f34:	430b      	orrs	r3, r1
 8001f36:	431a      	orrs	r2, r3
 8001f38:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001f3a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001f3c:	4829      	ldr	r0, [pc, #164]	@ (8001fe4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8001f3e:	f7ff ff83 	bl	8001e48 <LL_ADC_IsEnabled>
 8001f42:	4604      	mov	r4, r0
 8001f44:	4828      	ldr	r0, [pc, #160]	@ (8001fe8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8001f46:	f7ff ff7f 	bl	8001e48 <LL_ADC_IsEnabled>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	431c      	orrs	r4, r3
 8001f4e:	4828      	ldr	r0, [pc, #160]	@ (8001ff0 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8001f50:	f7ff ff7a 	bl	8001e48 <LL_ADC_IsEnabled>
 8001f54:	4603      	mov	r3, r0
 8001f56:	4323      	orrs	r3, r4
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d137      	bne.n	8001fcc <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8001f5c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001f5e:	689b      	ldr	r3, [r3, #8]
 8001f60:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8001f64:	f023 030f 	bic.w	r3, r3, #15
 8001f68:	683a      	ldr	r2, [r7, #0]
 8001f6a:	6811      	ldr	r1, [r2, #0]
 8001f6c:	683a      	ldr	r2, [r7, #0]
 8001f6e:	6892      	ldr	r2, [r2, #8]
 8001f70:	430a      	orrs	r2, r1
 8001f72:	431a      	orrs	r2, r3
 8001f74:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001f76:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8001f78:	e028      	b.n	8001fcc <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001f7a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001f82:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001f84:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001f86:	4817      	ldr	r0, [pc, #92]	@ (8001fe4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8001f88:	f7ff ff5e 	bl	8001e48 <LL_ADC_IsEnabled>
 8001f8c:	4604      	mov	r4, r0
 8001f8e:	4816      	ldr	r0, [pc, #88]	@ (8001fe8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8001f90:	f7ff ff5a 	bl	8001e48 <LL_ADC_IsEnabled>
 8001f94:	4603      	mov	r3, r0
 8001f96:	431c      	orrs	r4, r3
 8001f98:	4815      	ldr	r0, [pc, #84]	@ (8001ff0 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8001f9a:	f7ff ff55 	bl	8001e48 <LL_ADC_IsEnabled>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	4323      	orrs	r3, r4
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d112      	bne.n	8001fcc <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8001fa6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8001fae:	f023 030f 	bic.w	r3, r3, #15
 8001fb2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8001fb4:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8001fb6:	e009      	b.n	8001fcc <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fbc:	f043 0220 	orr.w	r2, r3, #32
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8001fca:	e000      	b.n	8001fce <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8001fcc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8001fd6:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	377c      	adds	r7, #124	@ 0x7c
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd90      	pop	{r4, r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	50040000 	.word	0x50040000
 8001fe8:	50040100 	.word	0x50040100
 8001fec:	50040300 	.word	0x50040300
 8001ff0:	50040200 	.word	0x50040200

08001ff4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b085      	sub	sp, #20
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	f003 0307 	and.w	r3, r3, #7
 8002002:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002004:	4b0c      	ldr	r3, [pc, #48]	@ (8002038 <__NVIC_SetPriorityGrouping+0x44>)
 8002006:	68db      	ldr	r3, [r3, #12]
 8002008:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800200a:	68ba      	ldr	r2, [r7, #8]
 800200c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002010:	4013      	ands	r3, r2
 8002012:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800201c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002020:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002024:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002026:	4a04      	ldr	r2, [pc, #16]	@ (8002038 <__NVIC_SetPriorityGrouping+0x44>)
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	60d3      	str	r3, [r2, #12]
}
 800202c:	bf00      	nop
 800202e:	3714      	adds	r7, #20
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr
 8002038:	e000ed00 	.word	0xe000ed00

0800203c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800203c:	b480      	push	{r7}
 800203e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002040:	4b04      	ldr	r3, [pc, #16]	@ (8002054 <__NVIC_GetPriorityGrouping+0x18>)
 8002042:	68db      	ldr	r3, [r3, #12]
 8002044:	0a1b      	lsrs	r3, r3, #8
 8002046:	f003 0307 	and.w	r3, r3, #7
}
 800204a:	4618      	mov	r0, r3
 800204c:	46bd      	mov	sp, r7
 800204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002052:	4770      	bx	lr
 8002054:	e000ed00 	.word	0xe000ed00

08002058 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002058:	b480      	push	{r7}
 800205a:	b083      	sub	sp, #12
 800205c:	af00      	add	r7, sp, #0
 800205e:	4603      	mov	r3, r0
 8002060:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002062:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002066:	2b00      	cmp	r3, #0
 8002068:	db0b      	blt.n	8002082 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800206a:	79fb      	ldrb	r3, [r7, #7]
 800206c:	f003 021f 	and.w	r2, r3, #31
 8002070:	4907      	ldr	r1, [pc, #28]	@ (8002090 <__NVIC_EnableIRQ+0x38>)
 8002072:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002076:	095b      	lsrs	r3, r3, #5
 8002078:	2001      	movs	r0, #1
 800207a:	fa00 f202 	lsl.w	r2, r0, r2
 800207e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002082:	bf00      	nop
 8002084:	370c      	adds	r7, #12
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr
 800208e:	bf00      	nop
 8002090:	e000e100 	.word	0xe000e100

08002094 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002094:	b480      	push	{r7}
 8002096:	b083      	sub	sp, #12
 8002098:	af00      	add	r7, sp, #0
 800209a:	4603      	mov	r3, r0
 800209c:	6039      	str	r1, [r7, #0]
 800209e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	db0a      	blt.n	80020be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	b2da      	uxtb	r2, r3
 80020ac:	490c      	ldr	r1, [pc, #48]	@ (80020e0 <__NVIC_SetPriority+0x4c>)
 80020ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020b2:	0112      	lsls	r2, r2, #4
 80020b4:	b2d2      	uxtb	r2, r2
 80020b6:	440b      	add	r3, r1
 80020b8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020bc:	e00a      	b.n	80020d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	b2da      	uxtb	r2, r3
 80020c2:	4908      	ldr	r1, [pc, #32]	@ (80020e4 <__NVIC_SetPriority+0x50>)
 80020c4:	79fb      	ldrb	r3, [r7, #7]
 80020c6:	f003 030f 	and.w	r3, r3, #15
 80020ca:	3b04      	subs	r3, #4
 80020cc:	0112      	lsls	r2, r2, #4
 80020ce:	b2d2      	uxtb	r2, r2
 80020d0:	440b      	add	r3, r1
 80020d2:	761a      	strb	r2, [r3, #24]
}
 80020d4:	bf00      	nop
 80020d6:	370c      	adds	r7, #12
 80020d8:	46bd      	mov	sp, r7
 80020da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020de:	4770      	bx	lr
 80020e0:	e000e100 	.word	0xe000e100
 80020e4:	e000ed00 	.word	0xe000ed00

080020e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b089      	sub	sp, #36	@ 0x24
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	60f8      	str	r0, [r7, #12]
 80020f0:	60b9      	str	r1, [r7, #8]
 80020f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	f003 0307 	and.w	r3, r3, #7
 80020fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020fc:	69fb      	ldr	r3, [r7, #28]
 80020fe:	f1c3 0307 	rsb	r3, r3, #7
 8002102:	2b04      	cmp	r3, #4
 8002104:	bf28      	it	cs
 8002106:	2304      	movcs	r3, #4
 8002108:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800210a:	69fb      	ldr	r3, [r7, #28]
 800210c:	3304      	adds	r3, #4
 800210e:	2b06      	cmp	r3, #6
 8002110:	d902      	bls.n	8002118 <NVIC_EncodePriority+0x30>
 8002112:	69fb      	ldr	r3, [r7, #28]
 8002114:	3b03      	subs	r3, #3
 8002116:	e000      	b.n	800211a <NVIC_EncodePriority+0x32>
 8002118:	2300      	movs	r3, #0
 800211a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800211c:	f04f 32ff 	mov.w	r2, #4294967295
 8002120:	69bb      	ldr	r3, [r7, #24]
 8002122:	fa02 f303 	lsl.w	r3, r2, r3
 8002126:	43da      	mvns	r2, r3
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	401a      	ands	r2, r3
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002130:	f04f 31ff 	mov.w	r1, #4294967295
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	fa01 f303 	lsl.w	r3, r1, r3
 800213a:	43d9      	mvns	r1, r3
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002140:	4313      	orrs	r3, r2
         );
}
 8002142:	4618      	mov	r0, r3
 8002144:	3724      	adds	r7, #36	@ 0x24
 8002146:	46bd      	mov	sp, r7
 8002148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214c:	4770      	bx	lr

0800214e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800214e:	b580      	push	{r7, lr}
 8002150:	b082      	sub	sp, #8
 8002152:	af00      	add	r7, sp, #0
 8002154:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002156:	6878      	ldr	r0, [r7, #4]
 8002158:	f7ff ff4c 	bl	8001ff4 <__NVIC_SetPriorityGrouping>
}
 800215c:	bf00      	nop
 800215e:	3708      	adds	r7, #8
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}

08002164 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b086      	sub	sp, #24
 8002168:	af00      	add	r7, sp, #0
 800216a:	4603      	mov	r3, r0
 800216c:	60b9      	str	r1, [r7, #8]
 800216e:	607a      	str	r2, [r7, #4]
 8002170:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002172:	2300      	movs	r3, #0
 8002174:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002176:	f7ff ff61 	bl	800203c <__NVIC_GetPriorityGrouping>
 800217a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800217c:	687a      	ldr	r2, [r7, #4]
 800217e:	68b9      	ldr	r1, [r7, #8]
 8002180:	6978      	ldr	r0, [r7, #20]
 8002182:	f7ff ffb1 	bl	80020e8 <NVIC_EncodePriority>
 8002186:	4602      	mov	r2, r0
 8002188:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800218c:	4611      	mov	r1, r2
 800218e:	4618      	mov	r0, r3
 8002190:	f7ff ff80 	bl	8002094 <__NVIC_SetPriority>
}
 8002194:	bf00      	nop
 8002196:	3718      	adds	r7, #24
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}

0800219c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b082      	sub	sp, #8
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	4603      	mov	r3, r0
 80021a4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021aa:	4618      	mov	r0, r3
 80021ac:	f7ff ff54 	bl	8002058 <__NVIC_EnableIRQ>
}
 80021b0:	bf00      	nop
 80021b2:	3708      	adds	r7, #8
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}

080021b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b087      	sub	sp, #28
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
 80021c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80021c2:	2300      	movs	r3, #0
 80021c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021c6:	e17f      	b.n	80024c8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	681a      	ldr	r2, [r3, #0]
 80021cc:	2101      	movs	r1, #1
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	fa01 f303 	lsl.w	r3, r1, r3
 80021d4:	4013      	ands	r3, r2
 80021d6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	f000 8171 	beq.w	80024c2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	f003 0303 	and.w	r3, r3, #3
 80021e8:	2b01      	cmp	r3, #1
 80021ea:	d005      	beq.n	80021f8 <HAL_GPIO_Init+0x40>
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	f003 0303 	and.w	r3, r3, #3
 80021f4:	2b02      	cmp	r3, #2
 80021f6:	d130      	bne.n	800225a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80021fe:	697b      	ldr	r3, [r7, #20]
 8002200:	005b      	lsls	r3, r3, #1
 8002202:	2203      	movs	r2, #3
 8002204:	fa02 f303 	lsl.w	r3, r2, r3
 8002208:	43db      	mvns	r3, r3
 800220a:	693a      	ldr	r2, [r7, #16]
 800220c:	4013      	ands	r3, r2
 800220e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	68da      	ldr	r2, [r3, #12]
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	005b      	lsls	r3, r3, #1
 8002218:	fa02 f303 	lsl.w	r3, r2, r3
 800221c:	693a      	ldr	r2, [r7, #16]
 800221e:	4313      	orrs	r3, r2
 8002220:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	693a      	ldr	r2, [r7, #16]
 8002226:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800222e:	2201      	movs	r2, #1
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	fa02 f303 	lsl.w	r3, r2, r3
 8002236:	43db      	mvns	r3, r3
 8002238:	693a      	ldr	r2, [r7, #16]
 800223a:	4013      	ands	r3, r2
 800223c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	091b      	lsrs	r3, r3, #4
 8002244:	f003 0201 	and.w	r2, r3, #1
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	fa02 f303 	lsl.w	r3, r2, r3
 800224e:	693a      	ldr	r2, [r7, #16]
 8002250:	4313      	orrs	r3, r2
 8002252:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	693a      	ldr	r2, [r7, #16]
 8002258:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	f003 0303 	and.w	r3, r3, #3
 8002262:	2b03      	cmp	r3, #3
 8002264:	d118      	bne.n	8002298 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800226a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800226c:	2201      	movs	r2, #1
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	fa02 f303 	lsl.w	r3, r2, r3
 8002274:	43db      	mvns	r3, r3
 8002276:	693a      	ldr	r2, [r7, #16]
 8002278:	4013      	ands	r3, r2
 800227a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	08db      	lsrs	r3, r3, #3
 8002282:	f003 0201 	and.w	r2, r3, #1
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	fa02 f303 	lsl.w	r3, r2, r3
 800228c:	693a      	ldr	r2, [r7, #16]
 800228e:	4313      	orrs	r3, r2
 8002290:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	693a      	ldr	r2, [r7, #16]
 8002296:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	f003 0303 	and.w	r3, r3, #3
 80022a0:	2b03      	cmp	r3, #3
 80022a2:	d017      	beq.n	80022d4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	68db      	ldr	r3, [r3, #12]
 80022a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80022aa:	697b      	ldr	r3, [r7, #20]
 80022ac:	005b      	lsls	r3, r3, #1
 80022ae:	2203      	movs	r2, #3
 80022b0:	fa02 f303 	lsl.w	r3, r2, r3
 80022b4:	43db      	mvns	r3, r3
 80022b6:	693a      	ldr	r2, [r7, #16]
 80022b8:	4013      	ands	r3, r2
 80022ba:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	689a      	ldr	r2, [r3, #8]
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	005b      	lsls	r3, r3, #1
 80022c4:	fa02 f303 	lsl.w	r3, r2, r3
 80022c8:	693a      	ldr	r2, [r7, #16]
 80022ca:	4313      	orrs	r3, r2
 80022cc:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	693a      	ldr	r2, [r7, #16]
 80022d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	f003 0303 	and.w	r3, r3, #3
 80022dc:	2b02      	cmp	r3, #2
 80022de:	d123      	bne.n	8002328 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	08da      	lsrs	r2, r3, #3
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	3208      	adds	r2, #8
 80022e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022ec:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	f003 0307 	and.w	r3, r3, #7
 80022f4:	009b      	lsls	r3, r3, #2
 80022f6:	220f      	movs	r2, #15
 80022f8:	fa02 f303 	lsl.w	r3, r2, r3
 80022fc:	43db      	mvns	r3, r3
 80022fe:	693a      	ldr	r2, [r7, #16]
 8002300:	4013      	ands	r3, r2
 8002302:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	691a      	ldr	r2, [r3, #16]
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	f003 0307 	and.w	r3, r3, #7
 800230e:	009b      	lsls	r3, r3, #2
 8002310:	fa02 f303 	lsl.w	r3, r2, r3
 8002314:	693a      	ldr	r2, [r7, #16]
 8002316:	4313      	orrs	r3, r2
 8002318:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	08da      	lsrs	r2, r3, #3
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	3208      	adds	r2, #8
 8002322:	6939      	ldr	r1, [r7, #16]
 8002324:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	005b      	lsls	r3, r3, #1
 8002332:	2203      	movs	r2, #3
 8002334:	fa02 f303 	lsl.w	r3, r2, r3
 8002338:	43db      	mvns	r3, r3
 800233a:	693a      	ldr	r2, [r7, #16]
 800233c:	4013      	ands	r3, r2
 800233e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	f003 0203 	and.w	r2, r3, #3
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	005b      	lsls	r3, r3, #1
 800234c:	fa02 f303 	lsl.w	r3, r2, r3
 8002350:	693a      	ldr	r2, [r7, #16]
 8002352:	4313      	orrs	r3, r2
 8002354:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	693a      	ldr	r2, [r7, #16]
 800235a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002364:	2b00      	cmp	r3, #0
 8002366:	f000 80ac 	beq.w	80024c2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800236a:	4b5f      	ldr	r3, [pc, #380]	@ (80024e8 <HAL_GPIO_Init+0x330>)
 800236c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800236e:	4a5e      	ldr	r2, [pc, #376]	@ (80024e8 <HAL_GPIO_Init+0x330>)
 8002370:	f043 0301 	orr.w	r3, r3, #1
 8002374:	6613      	str	r3, [r2, #96]	@ 0x60
 8002376:	4b5c      	ldr	r3, [pc, #368]	@ (80024e8 <HAL_GPIO_Init+0x330>)
 8002378:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800237a:	f003 0301 	and.w	r3, r3, #1
 800237e:	60bb      	str	r3, [r7, #8]
 8002380:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002382:	4a5a      	ldr	r2, [pc, #360]	@ (80024ec <HAL_GPIO_Init+0x334>)
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	089b      	lsrs	r3, r3, #2
 8002388:	3302      	adds	r3, #2
 800238a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800238e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	f003 0303 	and.w	r3, r3, #3
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	220f      	movs	r2, #15
 800239a:	fa02 f303 	lsl.w	r3, r2, r3
 800239e:	43db      	mvns	r3, r3
 80023a0:	693a      	ldr	r2, [r7, #16]
 80023a2:	4013      	ands	r3, r2
 80023a4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80023ac:	d025      	beq.n	80023fa <HAL_GPIO_Init+0x242>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	4a4f      	ldr	r2, [pc, #316]	@ (80024f0 <HAL_GPIO_Init+0x338>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d01f      	beq.n	80023f6 <HAL_GPIO_Init+0x23e>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	4a4e      	ldr	r2, [pc, #312]	@ (80024f4 <HAL_GPIO_Init+0x33c>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d019      	beq.n	80023f2 <HAL_GPIO_Init+0x23a>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	4a4d      	ldr	r2, [pc, #308]	@ (80024f8 <HAL_GPIO_Init+0x340>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d013      	beq.n	80023ee <HAL_GPIO_Init+0x236>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	4a4c      	ldr	r2, [pc, #304]	@ (80024fc <HAL_GPIO_Init+0x344>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d00d      	beq.n	80023ea <HAL_GPIO_Init+0x232>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	4a4b      	ldr	r2, [pc, #300]	@ (8002500 <HAL_GPIO_Init+0x348>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d007      	beq.n	80023e6 <HAL_GPIO_Init+0x22e>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	4a4a      	ldr	r2, [pc, #296]	@ (8002504 <HAL_GPIO_Init+0x34c>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d101      	bne.n	80023e2 <HAL_GPIO_Init+0x22a>
 80023de:	2306      	movs	r3, #6
 80023e0:	e00c      	b.n	80023fc <HAL_GPIO_Init+0x244>
 80023e2:	2307      	movs	r3, #7
 80023e4:	e00a      	b.n	80023fc <HAL_GPIO_Init+0x244>
 80023e6:	2305      	movs	r3, #5
 80023e8:	e008      	b.n	80023fc <HAL_GPIO_Init+0x244>
 80023ea:	2304      	movs	r3, #4
 80023ec:	e006      	b.n	80023fc <HAL_GPIO_Init+0x244>
 80023ee:	2303      	movs	r3, #3
 80023f0:	e004      	b.n	80023fc <HAL_GPIO_Init+0x244>
 80023f2:	2302      	movs	r3, #2
 80023f4:	e002      	b.n	80023fc <HAL_GPIO_Init+0x244>
 80023f6:	2301      	movs	r3, #1
 80023f8:	e000      	b.n	80023fc <HAL_GPIO_Init+0x244>
 80023fa:	2300      	movs	r3, #0
 80023fc:	697a      	ldr	r2, [r7, #20]
 80023fe:	f002 0203 	and.w	r2, r2, #3
 8002402:	0092      	lsls	r2, r2, #2
 8002404:	4093      	lsls	r3, r2
 8002406:	693a      	ldr	r2, [r7, #16]
 8002408:	4313      	orrs	r3, r2
 800240a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800240c:	4937      	ldr	r1, [pc, #220]	@ (80024ec <HAL_GPIO_Init+0x334>)
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	089b      	lsrs	r3, r3, #2
 8002412:	3302      	adds	r3, #2
 8002414:	693a      	ldr	r2, [r7, #16]
 8002416:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800241a:	4b3b      	ldr	r3, [pc, #236]	@ (8002508 <HAL_GPIO_Init+0x350>)
 800241c:	689b      	ldr	r3, [r3, #8]
 800241e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	43db      	mvns	r3, r3
 8002424:	693a      	ldr	r2, [r7, #16]
 8002426:	4013      	ands	r3, r2
 8002428:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002432:	2b00      	cmp	r3, #0
 8002434:	d003      	beq.n	800243e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002436:	693a      	ldr	r2, [r7, #16]
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	4313      	orrs	r3, r2
 800243c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800243e:	4a32      	ldr	r2, [pc, #200]	@ (8002508 <HAL_GPIO_Init+0x350>)
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002444:	4b30      	ldr	r3, [pc, #192]	@ (8002508 <HAL_GPIO_Init+0x350>)
 8002446:	68db      	ldr	r3, [r3, #12]
 8002448:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	43db      	mvns	r3, r3
 800244e:	693a      	ldr	r2, [r7, #16]
 8002450:	4013      	ands	r3, r2
 8002452:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800245c:	2b00      	cmp	r3, #0
 800245e:	d003      	beq.n	8002468 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002460:	693a      	ldr	r2, [r7, #16]
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	4313      	orrs	r3, r2
 8002466:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002468:	4a27      	ldr	r2, [pc, #156]	@ (8002508 <HAL_GPIO_Init+0x350>)
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800246e:	4b26      	ldr	r3, [pc, #152]	@ (8002508 <HAL_GPIO_Init+0x350>)
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	43db      	mvns	r3, r3
 8002478:	693a      	ldr	r2, [r7, #16]
 800247a:	4013      	ands	r3, r2
 800247c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002486:	2b00      	cmp	r3, #0
 8002488:	d003      	beq.n	8002492 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800248a:	693a      	ldr	r2, [r7, #16]
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	4313      	orrs	r3, r2
 8002490:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002492:	4a1d      	ldr	r2, [pc, #116]	@ (8002508 <HAL_GPIO_Init+0x350>)
 8002494:	693b      	ldr	r3, [r7, #16]
 8002496:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002498:	4b1b      	ldr	r3, [pc, #108]	@ (8002508 <HAL_GPIO_Init+0x350>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	43db      	mvns	r3, r3
 80024a2:	693a      	ldr	r2, [r7, #16]
 80024a4:	4013      	ands	r3, r2
 80024a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d003      	beq.n	80024bc <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80024b4:	693a      	ldr	r2, [r7, #16]
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	4313      	orrs	r3, r2
 80024ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80024bc:	4a12      	ldr	r2, [pc, #72]	@ (8002508 <HAL_GPIO_Init+0x350>)
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	3301      	adds	r3, #1
 80024c6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	681a      	ldr	r2, [r3, #0]
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	fa22 f303 	lsr.w	r3, r2, r3
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	f47f ae78 	bne.w	80021c8 <HAL_GPIO_Init+0x10>
  }
}
 80024d8:	bf00      	nop
 80024da:	bf00      	nop
 80024dc:	371c      	adds	r7, #28
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr
 80024e6:	bf00      	nop
 80024e8:	40021000 	.word	0x40021000
 80024ec:	40010000 	.word	0x40010000
 80024f0:	48000400 	.word	0x48000400
 80024f4:	48000800 	.word	0x48000800
 80024f8:	48000c00 	.word	0x48000c00
 80024fc:	48001000 	.word	0x48001000
 8002500:	48001400 	.word	0x48001400
 8002504:	48001800 	.word	0x48001800
 8002508:	40010400 	.word	0x40010400

0800250c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800250c:	b480      	push	{r7}
 800250e:	b083      	sub	sp, #12
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
 8002514:	460b      	mov	r3, r1
 8002516:	807b      	strh	r3, [r7, #2]
 8002518:	4613      	mov	r3, r2
 800251a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800251c:	787b      	ldrb	r3, [r7, #1]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d003      	beq.n	800252a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002522:	887a      	ldrh	r2, [r7, #2]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002528:	e002      	b.n	8002530 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800252a:	887a      	ldrh	r2, [r7, #2]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002530:	bf00      	nop
 8002532:	370c      	adds	r7, #12
 8002534:	46bd      	mov	sp, r7
 8002536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253a:	4770      	bx	lr

0800253c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800253c:	b480      	push	{r7}
 800253e:	b085      	sub	sp, #20
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
 8002544:	460b      	mov	r3, r1
 8002546:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	695b      	ldr	r3, [r3, #20]
 800254c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800254e:	887a      	ldrh	r2, [r7, #2]
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	4013      	ands	r3, r2
 8002554:	041a      	lsls	r2, r3, #16
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	43d9      	mvns	r1, r3
 800255a:	887b      	ldrh	r3, [r7, #2]
 800255c:	400b      	ands	r3, r1
 800255e:	431a      	orrs	r2, r3
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	619a      	str	r2, [r3, #24]
}
 8002564:	bf00      	nop
 8002566:	3714      	adds	r7, #20
 8002568:	46bd      	mov	sp, r7
 800256a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256e:	4770      	bx	lr

08002570 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b082      	sub	sp, #8
 8002574:	af00      	add	r7, sp, #0
 8002576:	4603      	mov	r3, r0
 8002578:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800257a:	4b08      	ldr	r3, [pc, #32]	@ (800259c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800257c:	695a      	ldr	r2, [r3, #20]
 800257e:	88fb      	ldrh	r3, [r7, #6]
 8002580:	4013      	ands	r3, r2
 8002582:	2b00      	cmp	r3, #0
 8002584:	d006      	beq.n	8002594 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002586:	4a05      	ldr	r2, [pc, #20]	@ (800259c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002588:	88fb      	ldrh	r3, [r7, #6]
 800258a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800258c:	88fb      	ldrh	r3, [r7, #6]
 800258e:	4618      	mov	r0, r3
 8002590:	f000 f806 	bl	80025a0 <HAL_GPIO_EXTI_Callback>
  }
}
 8002594:	bf00      	nop
 8002596:	3708      	adds	r7, #8
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}
 800259c:	40010400 	.word	0x40010400

080025a0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b083      	sub	sp, #12
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	4603      	mov	r3, r0
 80025a8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80025aa:	bf00      	nop
 80025ac:	370c      	adds	r7, #12
 80025ae:	46bd      	mov	sp, r7
 80025b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b4:	4770      	bx	lr
	...

080025b8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80025b8:	b480      	push	{r7}
 80025ba:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80025bc:	4b04      	ldr	r3, [pc, #16]	@ (80025d0 <HAL_PWREx_GetVoltageRange+0x18>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	46bd      	mov	sp, r7
 80025c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025cc:	4770      	bx	lr
 80025ce:	bf00      	nop
 80025d0:	40007000 	.word	0x40007000

080025d4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b085      	sub	sp, #20
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80025e2:	d130      	bne.n	8002646 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80025e4:	4b23      	ldr	r3, [pc, #140]	@ (8002674 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80025ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80025f0:	d038      	beq.n	8002664 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80025f2:	4b20      	ldr	r3, [pc, #128]	@ (8002674 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80025fa:	4a1e      	ldr	r2, [pc, #120]	@ (8002674 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025fc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002600:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002602:	4b1d      	ldr	r3, [pc, #116]	@ (8002678 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	2232      	movs	r2, #50	@ 0x32
 8002608:	fb02 f303 	mul.w	r3, r2, r3
 800260c:	4a1b      	ldr	r2, [pc, #108]	@ (800267c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800260e:	fba2 2303 	umull	r2, r3, r2, r3
 8002612:	0c9b      	lsrs	r3, r3, #18
 8002614:	3301      	adds	r3, #1
 8002616:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002618:	e002      	b.n	8002620 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	3b01      	subs	r3, #1
 800261e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002620:	4b14      	ldr	r3, [pc, #80]	@ (8002674 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002622:	695b      	ldr	r3, [r3, #20]
 8002624:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002628:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800262c:	d102      	bne.n	8002634 <HAL_PWREx_ControlVoltageScaling+0x60>
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d1f2      	bne.n	800261a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002634:	4b0f      	ldr	r3, [pc, #60]	@ (8002674 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002636:	695b      	ldr	r3, [r3, #20]
 8002638:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800263c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002640:	d110      	bne.n	8002664 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002642:	2303      	movs	r3, #3
 8002644:	e00f      	b.n	8002666 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002646:	4b0b      	ldr	r3, [pc, #44]	@ (8002674 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800264e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002652:	d007      	beq.n	8002664 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002654:	4b07      	ldr	r3, [pc, #28]	@ (8002674 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800265c:	4a05      	ldr	r2, [pc, #20]	@ (8002674 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800265e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002662:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002664:	2300      	movs	r3, #0
}
 8002666:	4618      	mov	r0, r3
 8002668:	3714      	adds	r7, #20
 800266a:	46bd      	mov	sp, r7
 800266c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002670:	4770      	bx	lr
 8002672:	bf00      	nop
 8002674:	40007000 	.word	0x40007000
 8002678:	20000010 	.word	0x20000010
 800267c:	431bde83 	.word	0x431bde83

08002680 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b088      	sub	sp, #32
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d101      	bne.n	8002692 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	e3ca      	b.n	8002e28 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002692:	4b97      	ldr	r3, [pc, #604]	@ (80028f0 <HAL_RCC_OscConfig+0x270>)
 8002694:	689b      	ldr	r3, [r3, #8]
 8002696:	f003 030c 	and.w	r3, r3, #12
 800269a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800269c:	4b94      	ldr	r3, [pc, #592]	@ (80028f0 <HAL_RCC_OscConfig+0x270>)
 800269e:	68db      	ldr	r3, [r3, #12]
 80026a0:	f003 0303 	and.w	r3, r3, #3
 80026a4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f003 0310 	and.w	r3, r3, #16
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	f000 80e4 	beq.w	800287c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80026b4:	69bb      	ldr	r3, [r7, #24]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d007      	beq.n	80026ca <HAL_RCC_OscConfig+0x4a>
 80026ba:	69bb      	ldr	r3, [r7, #24]
 80026bc:	2b0c      	cmp	r3, #12
 80026be:	f040 808b 	bne.w	80027d8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	2b01      	cmp	r3, #1
 80026c6:	f040 8087 	bne.w	80027d8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80026ca:	4b89      	ldr	r3, [pc, #548]	@ (80028f0 <HAL_RCC_OscConfig+0x270>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 0302 	and.w	r3, r3, #2
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d005      	beq.n	80026e2 <HAL_RCC_OscConfig+0x62>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	699b      	ldr	r3, [r3, #24]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d101      	bne.n	80026e2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	e3a2      	b.n	8002e28 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6a1a      	ldr	r2, [r3, #32]
 80026e6:	4b82      	ldr	r3, [pc, #520]	@ (80028f0 <HAL_RCC_OscConfig+0x270>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f003 0308 	and.w	r3, r3, #8
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d004      	beq.n	80026fc <HAL_RCC_OscConfig+0x7c>
 80026f2:	4b7f      	ldr	r3, [pc, #508]	@ (80028f0 <HAL_RCC_OscConfig+0x270>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80026fa:	e005      	b.n	8002708 <HAL_RCC_OscConfig+0x88>
 80026fc:	4b7c      	ldr	r3, [pc, #496]	@ (80028f0 <HAL_RCC_OscConfig+0x270>)
 80026fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002702:	091b      	lsrs	r3, r3, #4
 8002704:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002708:	4293      	cmp	r3, r2
 800270a:	d223      	bcs.n	8002754 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6a1b      	ldr	r3, [r3, #32]
 8002710:	4618      	mov	r0, r3
 8002712:	f000 fd87 	bl	8003224 <RCC_SetFlashLatencyFromMSIRange>
 8002716:	4603      	mov	r3, r0
 8002718:	2b00      	cmp	r3, #0
 800271a:	d001      	beq.n	8002720 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800271c:	2301      	movs	r3, #1
 800271e:	e383      	b.n	8002e28 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002720:	4b73      	ldr	r3, [pc, #460]	@ (80028f0 <HAL_RCC_OscConfig+0x270>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a72      	ldr	r2, [pc, #456]	@ (80028f0 <HAL_RCC_OscConfig+0x270>)
 8002726:	f043 0308 	orr.w	r3, r3, #8
 800272a:	6013      	str	r3, [r2, #0]
 800272c:	4b70      	ldr	r3, [pc, #448]	@ (80028f0 <HAL_RCC_OscConfig+0x270>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6a1b      	ldr	r3, [r3, #32]
 8002738:	496d      	ldr	r1, [pc, #436]	@ (80028f0 <HAL_RCC_OscConfig+0x270>)
 800273a:	4313      	orrs	r3, r2
 800273c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800273e:	4b6c      	ldr	r3, [pc, #432]	@ (80028f0 <HAL_RCC_OscConfig+0x270>)
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	69db      	ldr	r3, [r3, #28]
 800274a:	021b      	lsls	r3, r3, #8
 800274c:	4968      	ldr	r1, [pc, #416]	@ (80028f0 <HAL_RCC_OscConfig+0x270>)
 800274e:	4313      	orrs	r3, r2
 8002750:	604b      	str	r3, [r1, #4]
 8002752:	e025      	b.n	80027a0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002754:	4b66      	ldr	r3, [pc, #408]	@ (80028f0 <HAL_RCC_OscConfig+0x270>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a65      	ldr	r2, [pc, #404]	@ (80028f0 <HAL_RCC_OscConfig+0x270>)
 800275a:	f043 0308 	orr.w	r3, r3, #8
 800275e:	6013      	str	r3, [r2, #0]
 8002760:	4b63      	ldr	r3, [pc, #396]	@ (80028f0 <HAL_RCC_OscConfig+0x270>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6a1b      	ldr	r3, [r3, #32]
 800276c:	4960      	ldr	r1, [pc, #384]	@ (80028f0 <HAL_RCC_OscConfig+0x270>)
 800276e:	4313      	orrs	r3, r2
 8002770:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002772:	4b5f      	ldr	r3, [pc, #380]	@ (80028f0 <HAL_RCC_OscConfig+0x270>)
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	69db      	ldr	r3, [r3, #28]
 800277e:	021b      	lsls	r3, r3, #8
 8002780:	495b      	ldr	r1, [pc, #364]	@ (80028f0 <HAL_RCC_OscConfig+0x270>)
 8002782:	4313      	orrs	r3, r2
 8002784:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002786:	69bb      	ldr	r3, [r7, #24]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d109      	bne.n	80027a0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6a1b      	ldr	r3, [r3, #32]
 8002790:	4618      	mov	r0, r3
 8002792:	f000 fd47 	bl	8003224 <RCC_SetFlashLatencyFromMSIRange>
 8002796:	4603      	mov	r3, r0
 8002798:	2b00      	cmp	r3, #0
 800279a:	d001      	beq.n	80027a0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800279c:	2301      	movs	r3, #1
 800279e:	e343      	b.n	8002e28 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80027a0:	f000 fc4a 	bl	8003038 <HAL_RCC_GetSysClockFreq>
 80027a4:	4602      	mov	r2, r0
 80027a6:	4b52      	ldr	r3, [pc, #328]	@ (80028f0 <HAL_RCC_OscConfig+0x270>)
 80027a8:	689b      	ldr	r3, [r3, #8]
 80027aa:	091b      	lsrs	r3, r3, #4
 80027ac:	f003 030f 	and.w	r3, r3, #15
 80027b0:	4950      	ldr	r1, [pc, #320]	@ (80028f4 <HAL_RCC_OscConfig+0x274>)
 80027b2:	5ccb      	ldrb	r3, [r1, r3]
 80027b4:	f003 031f 	and.w	r3, r3, #31
 80027b8:	fa22 f303 	lsr.w	r3, r2, r3
 80027bc:	4a4e      	ldr	r2, [pc, #312]	@ (80028f8 <HAL_RCC_OscConfig+0x278>)
 80027be:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80027c0:	4b4e      	ldr	r3, [pc, #312]	@ (80028fc <HAL_RCC_OscConfig+0x27c>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4618      	mov	r0, r3
 80027c6:	f7fe fb33 	bl	8000e30 <HAL_InitTick>
 80027ca:	4603      	mov	r3, r0
 80027cc:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80027ce:	7bfb      	ldrb	r3, [r7, #15]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d052      	beq.n	800287a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80027d4:	7bfb      	ldrb	r3, [r7, #15]
 80027d6:	e327      	b.n	8002e28 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	699b      	ldr	r3, [r3, #24]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d032      	beq.n	8002846 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80027e0:	4b43      	ldr	r3, [pc, #268]	@ (80028f0 <HAL_RCC_OscConfig+0x270>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a42      	ldr	r2, [pc, #264]	@ (80028f0 <HAL_RCC_OscConfig+0x270>)
 80027e6:	f043 0301 	orr.w	r3, r3, #1
 80027ea:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80027ec:	f7fe fc52 	bl	8001094 <HAL_GetTick>
 80027f0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80027f2:	e008      	b.n	8002806 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80027f4:	f7fe fc4e 	bl	8001094 <HAL_GetTick>
 80027f8:	4602      	mov	r2, r0
 80027fa:	693b      	ldr	r3, [r7, #16]
 80027fc:	1ad3      	subs	r3, r2, r3
 80027fe:	2b02      	cmp	r3, #2
 8002800:	d901      	bls.n	8002806 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002802:	2303      	movs	r3, #3
 8002804:	e310      	b.n	8002e28 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002806:	4b3a      	ldr	r3, [pc, #232]	@ (80028f0 <HAL_RCC_OscConfig+0x270>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f003 0302 	and.w	r3, r3, #2
 800280e:	2b00      	cmp	r3, #0
 8002810:	d0f0      	beq.n	80027f4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002812:	4b37      	ldr	r3, [pc, #220]	@ (80028f0 <HAL_RCC_OscConfig+0x270>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a36      	ldr	r2, [pc, #216]	@ (80028f0 <HAL_RCC_OscConfig+0x270>)
 8002818:	f043 0308 	orr.w	r3, r3, #8
 800281c:	6013      	str	r3, [r2, #0]
 800281e:	4b34      	ldr	r3, [pc, #208]	@ (80028f0 <HAL_RCC_OscConfig+0x270>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6a1b      	ldr	r3, [r3, #32]
 800282a:	4931      	ldr	r1, [pc, #196]	@ (80028f0 <HAL_RCC_OscConfig+0x270>)
 800282c:	4313      	orrs	r3, r2
 800282e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002830:	4b2f      	ldr	r3, [pc, #188]	@ (80028f0 <HAL_RCC_OscConfig+0x270>)
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	69db      	ldr	r3, [r3, #28]
 800283c:	021b      	lsls	r3, r3, #8
 800283e:	492c      	ldr	r1, [pc, #176]	@ (80028f0 <HAL_RCC_OscConfig+0x270>)
 8002840:	4313      	orrs	r3, r2
 8002842:	604b      	str	r3, [r1, #4]
 8002844:	e01a      	b.n	800287c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002846:	4b2a      	ldr	r3, [pc, #168]	@ (80028f0 <HAL_RCC_OscConfig+0x270>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a29      	ldr	r2, [pc, #164]	@ (80028f0 <HAL_RCC_OscConfig+0x270>)
 800284c:	f023 0301 	bic.w	r3, r3, #1
 8002850:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002852:	f7fe fc1f 	bl	8001094 <HAL_GetTick>
 8002856:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002858:	e008      	b.n	800286c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800285a:	f7fe fc1b 	bl	8001094 <HAL_GetTick>
 800285e:	4602      	mov	r2, r0
 8002860:	693b      	ldr	r3, [r7, #16]
 8002862:	1ad3      	subs	r3, r2, r3
 8002864:	2b02      	cmp	r3, #2
 8002866:	d901      	bls.n	800286c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002868:	2303      	movs	r3, #3
 800286a:	e2dd      	b.n	8002e28 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800286c:	4b20      	ldr	r3, [pc, #128]	@ (80028f0 <HAL_RCC_OscConfig+0x270>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f003 0302 	and.w	r3, r3, #2
 8002874:	2b00      	cmp	r3, #0
 8002876:	d1f0      	bne.n	800285a <HAL_RCC_OscConfig+0x1da>
 8002878:	e000      	b.n	800287c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800287a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f003 0301 	and.w	r3, r3, #1
 8002884:	2b00      	cmp	r3, #0
 8002886:	d074      	beq.n	8002972 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002888:	69bb      	ldr	r3, [r7, #24]
 800288a:	2b08      	cmp	r3, #8
 800288c:	d005      	beq.n	800289a <HAL_RCC_OscConfig+0x21a>
 800288e:	69bb      	ldr	r3, [r7, #24]
 8002890:	2b0c      	cmp	r3, #12
 8002892:	d10e      	bne.n	80028b2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	2b03      	cmp	r3, #3
 8002898:	d10b      	bne.n	80028b2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800289a:	4b15      	ldr	r3, [pc, #84]	@ (80028f0 <HAL_RCC_OscConfig+0x270>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d064      	beq.n	8002970 <HAL_RCC_OscConfig+0x2f0>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d160      	bne.n	8002970 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	e2ba      	b.n	8002e28 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80028ba:	d106      	bne.n	80028ca <HAL_RCC_OscConfig+0x24a>
 80028bc:	4b0c      	ldr	r3, [pc, #48]	@ (80028f0 <HAL_RCC_OscConfig+0x270>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a0b      	ldr	r2, [pc, #44]	@ (80028f0 <HAL_RCC_OscConfig+0x270>)
 80028c2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028c6:	6013      	str	r3, [r2, #0]
 80028c8:	e026      	b.n	8002918 <HAL_RCC_OscConfig+0x298>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80028d2:	d115      	bne.n	8002900 <HAL_RCC_OscConfig+0x280>
 80028d4:	4b06      	ldr	r3, [pc, #24]	@ (80028f0 <HAL_RCC_OscConfig+0x270>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a05      	ldr	r2, [pc, #20]	@ (80028f0 <HAL_RCC_OscConfig+0x270>)
 80028da:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80028de:	6013      	str	r3, [r2, #0]
 80028e0:	4b03      	ldr	r3, [pc, #12]	@ (80028f0 <HAL_RCC_OscConfig+0x270>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a02      	ldr	r2, [pc, #8]	@ (80028f0 <HAL_RCC_OscConfig+0x270>)
 80028e6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028ea:	6013      	str	r3, [r2, #0]
 80028ec:	e014      	b.n	8002918 <HAL_RCC_OscConfig+0x298>
 80028ee:	bf00      	nop
 80028f0:	40021000 	.word	0x40021000
 80028f4:	08007aa8 	.word	0x08007aa8
 80028f8:	20000010 	.word	0x20000010
 80028fc:	20000014 	.word	0x20000014
 8002900:	4ba0      	ldr	r3, [pc, #640]	@ (8002b84 <HAL_RCC_OscConfig+0x504>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a9f      	ldr	r2, [pc, #636]	@ (8002b84 <HAL_RCC_OscConfig+0x504>)
 8002906:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800290a:	6013      	str	r3, [r2, #0]
 800290c:	4b9d      	ldr	r3, [pc, #628]	@ (8002b84 <HAL_RCC_OscConfig+0x504>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a9c      	ldr	r2, [pc, #624]	@ (8002b84 <HAL_RCC_OscConfig+0x504>)
 8002912:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002916:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d013      	beq.n	8002948 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002920:	f7fe fbb8 	bl	8001094 <HAL_GetTick>
 8002924:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002926:	e008      	b.n	800293a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002928:	f7fe fbb4 	bl	8001094 <HAL_GetTick>
 800292c:	4602      	mov	r2, r0
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	1ad3      	subs	r3, r2, r3
 8002932:	2b64      	cmp	r3, #100	@ 0x64
 8002934:	d901      	bls.n	800293a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002936:	2303      	movs	r3, #3
 8002938:	e276      	b.n	8002e28 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800293a:	4b92      	ldr	r3, [pc, #584]	@ (8002b84 <HAL_RCC_OscConfig+0x504>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002942:	2b00      	cmp	r3, #0
 8002944:	d0f0      	beq.n	8002928 <HAL_RCC_OscConfig+0x2a8>
 8002946:	e014      	b.n	8002972 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002948:	f7fe fba4 	bl	8001094 <HAL_GetTick>
 800294c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800294e:	e008      	b.n	8002962 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002950:	f7fe fba0 	bl	8001094 <HAL_GetTick>
 8002954:	4602      	mov	r2, r0
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	1ad3      	subs	r3, r2, r3
 800295a:	2b64      	cmp	r3, #100	@ 0x64
 800295c:	d901      	bls.n	8002962 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800295e:	2303      	movs	r3, #3
 8002960:	e262      	b.n	8002e28 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002962:	4b88      	ldr	r3, [pc, #544]	@ (8002b84 <HAL_RCC_OscConfig+0x504>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800296a:	2b00      	cmp	r3, #0
 800296c:	d1f0      	bne.n	8002950 <HAL_RCC_OscConfig+0x2d0>
 800296e:	e000      	b.n	8002972 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002970:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 0302 	and.w	r3, r3, #2
 800297a:	2b00      	cmp	r3, #0
 800297c:	d060      	beq.n	8002a40 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800297e:	69bb      	ldr	r3, [r7, #24]
 8002980:	2b04      	cmp	r3, #4
 8002982:	d005      	beq.n	8002990 <HAL_RCC_OscConfig+0x310>
 8002984:	69bb      	ldr	r3, [r7, #24]
 8002986:	2b0c      	cmp	r3, #12
 8002988:	d119      	bne.n	80029be <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	2b02      	cmp	r3, #2
 800298e:	d116      	bne.n	80029be <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002990:	4b7c      	ldr	r3, [pc, #496]	@ (8002b84 <HAL_RCC_OscConfig+0x504>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002998:	2b00      	cmp	r3, #0
 800299a:	d005      	beq.n	80029a8 <HAL_RCC_OscConfig+0x328>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	68db      	ldr	r3, [r3, #12]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d101      	bne.n	80029a8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	e23f      	b.n	8002e28 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029a8:	4b76      	ldr	r3, [pc, #472]	@ (8002b84 <HAL_RCC_OscConfig+0x504>)
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	691b      	ldr	r3, [r3, #16]
 80029b4:	061b      	lsls	r3, r3, #24
 80029b6:	4973      	ldr	r1, [pc, #460]	@ (8002b84 <HAL_RCC_OscConfig+0x504>)
 80029b8:	4313      	orrs	r3, r2
 80029ba:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80029bc:	e040      	b.n	8002a40 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	68db      	ldr	r3, [r3, #12]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d023      	beq.n	8002a0e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029c6:	4b6f      	ldr	r3, [pc, #444]	@ (8002b84 <HAL_RCC_OscConfig+0x504>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a6e      	ldr	r2, [pc, #440]	@ (8002b84 <HAL_RCC_OscConfig+0x504>)
 80029cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029d2:	f7fe fb5f 	bl	8001094 <HAL_GetTick>
 80029d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80029d8:	e008      	b.n	80029ec <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029da:	f7fe fb5b 	bl	8001094 <HAL_GetTick>
 80029de:	4602      	mov	r2, r0
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	1ad3      	subs	r3, r2, r3
 80029e4:	2b02      	cmp	r3, #2
 80029e6:	d901      	bls.n	80029ec <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80029e8:	2303      	movs	r3, #3
 80029ea:	e21d      	b.n	8002e28 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80029ec:	4b65      	ldr	r3, [pc, #404]	@ (8002b84 <HAL_RCC_OscConfig+0x504>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d0f0      	beq.n	80029da <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029f8:	4b62      	ldr	r3, [pc, #392]	@ (8002b84 <HAL_RCC_OscConfig+0x504>)
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	691b      	ldr	r3, [r3, #16]
 8002a04:	061b      	lsls	r3, r3, #24
 8002a06:	495f      	ldr	r1, [pc, #380]	@ (8002b84 <HAL_RCC_OscConfig+0x504>)
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	604b      	str	r3, [r1, #4]
 8002a0c:	e018      	b.n	8002a40 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a0e:	4b5d      	ldr	r3, [pc, #372]	@ (8002b84 <HAL_RCC_OscConfig+0x504>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a5c      	ldr	r2, [pc, #368]	@ (8002b84 <HAL_RCC_OscConfig+0x504>)
 8002a14:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002a18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a1a:	f7fe fb3b 	bl	8001094 <HAL_GetTick>
 8002a1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002a20:	e008      	b.n	8002a34 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a22:	f7fe fb37 	bl	8001094 <HAL_GetTick>
 8002a26:	4602      	mov	r2, r0
 8002a28:	693b      	ldr	r3, [r7, #16]
 8002a2a:	1ad3      	subs	r3, r2, r3
 8002a2c:	2b02      	cmp	r3, #2
 8002a2e:	d901      	bls.n	8002a34 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002a30:	2303      	movs	r3, #3
 8002a32:	e1f9      	b.n	8002e28 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002a34:	4b53      	ldr	r3, [pc, #332]	@ (8002b84 <HAL_RCC_OscConfig+0x504>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d1f0      	bne.n	8002a22 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f003 0308 	and.w	r3, r3, #8
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d03c      	beq.n	8002ac6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	695b      	ldr	r3, [r3, #20]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d01c      	beq.n	8002a8e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a54:	4b4b      	ldr	r3, [pc, #300]	@ (8002b84 <HAL_RCC_OscConfig+0x504>)
 8002a56:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a5a:	4a4a      	ldr	r2, [pc, #296]	@ (8002b84 <HAL_RCC_OscConfig+0x504>)
 8002a5c:	f043 0301 	orr.w	r3, r3, #1
 8002a60:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a64:	f7fe fb16 	bl	8001094 <HAL_GetTick>
 8002a68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002a6a:	e008      	b.n	8002a7e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a6c:	f7fe fb12 	bl	8001094 <HAL_GetTick>
 8002a70:	4602      	mov	r2, r0
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	1ad3      	subs	r3, r2, r3
 8002a76:	2b02      	cmp	r3, #2
 8002a78:	d901      	bls.n	8002a7e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002a7a:	2303      	movs	r3, #3
 8002a7c:	e1d4      	b.n	8002e28 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002a7e:	4b41      	ldr	r3, [pc, #260]	@ (8002b84 <HAL_RCC_OscConfig+0x504>)
 8002a80:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a84:	f003 0302 	and.w	r3, r3, #2
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d0ef      	beq.n	8002a6c <HAL_RCC_OscConfig+0x3ec>
 8002a8c:	e01b      	b.n	8002ac6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a8e:	4b3d      	ldr	r3, [pc, #244]	@ (8002b84 <HAL_RCC_OscConfig+0x504>)
 8002a90:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a94:	4a3b      	ldr	r2, [pc, #236]	@ (8002b84 <HAL_RCC_OscConfig+0x504>)
 8002a96:	f023 0301 	bic.w	r3, r3, #1
 8002a9a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a9e:	f7fe faf9 	bl	8001094 <HAL_GetTick>
 8002aa2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002aa4:	e008      	b.n	8002ab8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002aa6:	f7fe faf5 	bl	8001094 <HAL_GetTick>
 8002aaa:	4602      	mov	r2, r0
 8002aac:	693b      	ldr	r3, [r7, #16]
 8002aae:	1ad3      	subs	r3, r2, r3
 8002ab0:	2b02      	cmp	r3, #2
 8002ab2:	d901      	bls.n	8002ab8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002ab4:	2303      	movs	r3, #3
 8002ab6:	e1b7      	b.n	8002e28 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ab8:	4b32      	ldr	r3, [pc, #200]	@ (8002b84 <HAL_RCC_OscConfig+0x504>)
 8002aba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002abe:	f003 0302 	and.w	r3, r3, #2
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d1ef      	bne.n	8002aa6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f003 0304 	and.w	r3, r3, #4
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	f000 80a6 	beq.w	8002c20 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002ad8:	4b2a      	ldr	r3, [pc, #168]	@ (8002b84 <HAL_RCC_OscConfig+0x504>)
 8002ada:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002adc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d10d      	bne.n	8002b00 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ae4:	4b27      	ldr	r3, [pc, #156]	@ (8002b84 <HAL_RCC_OscConfig+0x504>)
 8002ae6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ae8:	4a26      	ldr	r2, [pc, #152]	@ (8002b84 <HAL_RCC_OscConfig+0x504>)
 8002aea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002aee:	6593      	str	r3, [r2, #88]	@ 0x58
 8002af0:	4b24      	ldr	r3, [pc, #144]	@ (8002b84 <HAL_RCC_OscConfig+0x504>)
 8002af2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002af4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002af8:	60bb      	str	r3, [r7, #8]
 8002afa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002afc:	2301      	movs	r3, #1
 8002afe:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b00:	4b21      	ldr	r3, [pc, #132]	@ (8002b88 <HAL_RCC_OscConfig+0x508>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d118      	bne.n	8002b3e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b0c:	4b1e      	ldr	r3, [pc, #120]	@ (8002b88 <HAL_RCC_OscConfig+0x508>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a1d      	ldr	r2, [pc, #116]	@ (8002b88 <HAL_RCC_OscConfig+0x508>)
 8002b12:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b16:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b18:	f7fe fabc 	bl	8001094 <HAL_GetTick>
 8002b1c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b1e:	e008      	b.n	8002b32 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b20:	f7fe fab8 	bl	8001094 <HAL_GetTick>
 8002b24:	4602      	mov	r2, r0
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	1ad3      	subs	r3, r2, r3
 8002b2a:	2b02      	cmp	r3, #2
 8002b2c:	d901      	bls.n	8002b32 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002b2e:	2303      	movs	r3, #3
 8002b30:	e17a      	b.n	8002e28 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b32:	4b15      	ldr	r3, [pc, #84]	@ (8002b88 <HAL_RCC_OscConfig+0x508>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d0f0      	beq.n	8002b20 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	d108      	bne.n	8002b58 <HAL_RCC_OscConfig+0x4d8>
 8002b46:	4b0f      	ldr	r3, [pc, #60]	@ (8002b84 <HAL_RCC_OscConfig+0x504>)
 8002b48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b4c:	4a0d      	ldr	r2, [pc, #52]	@ (8002b84 <HAL_RCC_OscConfig+0x504>)
 8002b4e:	f043 0301 	orr.w	r3, r3, #1
 8002b52:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002b56:	e029      	b.n	8002bac <HAL_RCC_OscConfig+0x52c>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	2b05      	cmp	r3, #5
 8002b5e:	d115      	bne.n	8002b8c <HAL_RCC_OscConfig+0x50c>
 8002b60:	4b08      	ldr	r3, [pc, #32]	@ (8002b84 <HAL_RCC_OscConfig+0x504>)
 8002b62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b66:	4a07      	ldr	r2, [pc, #28]	@ (8002b84 <HAL_RCC_OscConfig+0x504>)
 8002b68:	f043 0304 	orr.w	r3, r3, #4
 8002b6c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002b70:	4b04      	ldr	r3, [pc, #16]	@ (8002b84 <HAL_RCC_OscConfig+0x504>)
 8002b72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b76:	4a03      	ldr	r2, [pc, #12]	@ (8002b84 <HAL_RCC_OscConfig+0x504>)
 8002b78:	f043 0301 	orr.w	r3, r3, #1
 8002b7c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002b80:	e014      	b.n	8002bac <HAL_RCC_OscConfig+0x52c>
 8002b82:	bf00      	nop
 8002b84:	40021000 	.word	0x40021000
 8002b88:	40007000 	.word	0x40007000
 8002b8c:	4b9c      	ldr	r3, [pc, #624]	@ (8002e00 <HAL_RCC_OscConfig+0x780>)
 8002b8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b92:	4a9b      	ldr	r2, [pc, #620]	@ (8002e00 <HAL_RCC_OscConfig+0x780>)
 8002b94:	f023 0301 	bic.w	r3, r3, #1
 8002b98:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002b9c:	4b98      	ldr	r3, [pc, #608]	@ (8002e00 <HAL_RCC_OscConfig+0x780>)
 8002b9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ba2:	4a97      	ldr	r2, [pc, #604]	@ (8002e00 <HAL_RCC_OscConfig+0x780>)
 8002ba4:	f023 0304 	bic.w	r3, r3, #4
 8002ba8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d016      	beq.n	8002be2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bb4:	f7fe fa6e 	bl	8001094 <HAL_GetTick>
 8002bb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002bba:	e00a      	b.n	8002bd2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bbc:	f7fe fa6a 	bl	8001094 <HAL_GetTick>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	693b      	ldr	r3, [r7, #16]
 8002bc4:	1ad3      	subs	r3, r2, r3
 8002bc6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d901      	bls.n	8002bd2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002bce:	2303      	movs	r3, #3
 8002bd0:	e12a      	b.n	8002e28 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002bd2:	4b8b      	ldr	r3, [pc, #556]	@ (8002e00 <HAL_RCC_OscConfig+0x780>)
 8002bd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bd8:	f003 0302 	and.w	r3, r3, #2
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d0ed      	beq.n	8002bbc <HAL_RCC_OscConfig+0x53c>
 8002be0:	e015      	b.n	8002c0e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002be2:	f7fe fa57 	bl	8001094 <HAL_GetTick>
 8002be6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002be8:	e00a      	b.n	8002c00 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bea:	f7fe fa53 	bl	8001094 <HAL_GetTick>
 8002bee:	4602      	mov	r2, r0
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	1ad3      	subs	r3, r2, r3
 8002bf4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d901      	bls.n	8002c00 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002bfc:	2303      	movs	r3, #3
 8002bfe:	e113      	b.n	8002e28 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002c00:	4b7f      	ldr	r3, [pc, #508]	@ (8002e00 <HAL_RCC_OscConfig+0x780>)
 8002c02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c06:	f003 0302 	and.w	r3, r3, #2
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d1ed      	bne.n	8002bea <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c0e:	7ffb      	ldrb	r3, [r7, #31]
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	d105      	bne.n	8002c20 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c14:	4b7a      	ldr	r3, [pc, #488]	@ (8002e00 <HAL_RCC_OscConfig+0x780>)
 8002c16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c18:	4a79      	ldr	r2, [pc, #484]	@ (8002e00 <HAL_RCC_OscConfig+0x780>)
 8002c1a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002c1e:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	f000 80fe 	beq.w	8002e26 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c2e:	2b02      	cmp	r3, #2
 8002c30:	f040 80d0 	bne.w	8002dd4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002c34:	4b72      	ldr	r3, [pc, #456]	@ (8002e00 <HAL_RCC_OscConfig+0x780>)
 8002c36:	68db      	ldr	r3, [r3, #12]
 8002c38:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	f003 0203 	and.w	r2, r3, #3
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c44:	429a      	cmp	r2, r3
 8002c46:	d130      	bne.n	8002caa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c52:	3b01      	subs	r3, #1
 8002c54:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c56:	429a      	cmp	r2, r3
 8002c58:	d127      	bne.n	8002caa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c64:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002c66:	429a      	cmp	r2, r3
 8002c68:	d11f      	bne.n	8002caa <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c70:	687a      	ldr	r2, [r7, #4]
 8002c72:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002c74:	2a07      	cmp	r2, #7
 8002c76:	bf14      	ite	ne
 8002c78:	2201      	movne	r2, #1
 8002c7a:	2200      	moveq	r2, #0
 8002c7c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d113      	bne.n	8002caa <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c8c:	085b      	lsrs	r3, r3, #1
 8002c8e:	3b01      	subs	r3, #1
 8002c90:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002c92:	429a      	cmp	r2, r3
 8002c94:	d109      	bne.n	8002caa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ca0:	085b      	lsrs	r3, r3, #1
 8002ca2:	3b01      	subs	r3, #1
 8002ca4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ca6:	429a      	cmp	r2, r3
 8002ca8:	d06e      	beq.n	8002d88 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002caa:	69bb      	ldr	r3, [r7, #24]
 8002cac:	2b0c      	cmp	r3, #12
 8002cae:	d069      	beq.n	8002d84 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002cb0:	4b53      	ldr	r3, [pc, #332]	@ (8002e00 <HAL_RCC_OscConfig+0x780>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d105      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002cbc:	4b50      	ldr	r3, [pc, #320]	@ (8002e00 <HAL_RCC_OscConfig+0x780>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d001      	beq.n	8002ccc <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	e0ad      	b.n	8002e28 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002ccc:	4b4c      	ldr	r3, [pc, #304]	@ (8002e00 <HAL_RCC_OscConfig+0x780>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a4b      	ldr	r2, [pc, #300]	@ (8002e00 <HAL_RCC_OscConfig+0x780>)
 8002cd2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002cd6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002cd8:	f7fe f9dc 	bl	8001094 <HAL_GetTick>
 8002cdc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002cde:	e008      	b.n	8002cf2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ce0:	f7fe f9d8 	bl	8001094 <HAL_GetTick>
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	1ad3      	subs	r3, r2, r3
 8002cea:	2b02      	cmp	r3, #2
 8002cec:	d901      	bls.n	8002cf2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002cee:	2303      	movs	r3, #3
 8002cf0:	e09a      	b.n	8002e28 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002cf2:	4b43      	ldr	r3, [pc, #268]	@ (8002e00 <HAL_RCC_OscConfig+0x780>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d1f0      	bne.n	8002ce0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002cfe:	4b40      	ldr	r3, [pc, #256]	@ (8002e00 <HAL_RCC_OscConfig+0x780>)
 8002d00:	68da      	ldr	r2, [r3, #12]
 8002d02:	4b40      	ldr	r3, [pc, #256]	@ (8002e04 <HAL_RCC_OscConfig+0x784>)
 8002d04:	4013      	ands	r3, r2
 8002d06:	687a      	ldr	r2, [r7, #4]
 8002d08:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002d0a:	687a      	ldr	r2, [r7, #4]
 8002d0c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002d0e:	3a01      	subs	r2, #1
 8002d10:	0112      	lsls	r2, r2, #4
 8002d12:	4311      	orrs	r1, r2
 8002d14:	687a      	ldr	r2, [r7, #4]
 8002d16:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002d18:	0212      	lsls	r2, r2, #8
 8002d1a:	4311      	orrs	r1, r2
 8002d1c:	687a      	ldr	r2, [r7, #4]
 8002d1e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002d20:	0852      	lsrs	r2, r2, #1
 8002d22:	3a01      	subs	r2, #1
 8002d24:	0552      	lsls	r2, r2, #21
 8002d26:	4311      	orrs	r1, r2
 8002d28:	687a      	ldr	r2, [r7, #4]
 8002d2a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002d2c:	0852      	lsrs	r2, r2, #1
 8002d2e:	3a01      	subs	r2, #1
 8002d30:	0652      	lsls	r2, r2, #25
 8002d32:	4311      	orrs	r1, r2
 8002d34:	687a      	ldr	r2, [r7, #4]
 8002d36:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002d38:	0912      	lsrs	r2, r2, #4
 8002d3a:	0452      	lsls	r2, r2, #17
 8002d3c:	430a      	orrs	r2, r1
 8002d3e:	4930      	ldr	r1, [pc, #192]	@ (8002e00 <HAL_RCC_OscConfig+0x780>)
 8002d40:	4313      	orrs	r3, r2
 8002d42:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002d44:	4b2e      	ldr	r3, [pc, #184]	@ (8002e00 <HAL_RCC_OscConfig+0x780>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a2d      	ldr	r2, [pc, #180]	@ (8002e00 <HAL_RCC_OscConfig+0x780>)
 8002d4a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002d4e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002d50:	4b2b      	ldr	r3, [pc, #172]	@ (8002e00 <HAL_RCC_OscConfig+0x780>)
 8002d52:	68db      	ldr	r3, [r3, #12]
 8002d54:	4a2a      	ldr	r2, [pc, #168]	@ (8002e00 <HAL_RCC_OscConfig+0x780>)
 8002d56:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002d5a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002d5c:	f7fe f99a 	bl	8001094 <HAL_GetTick>
 8002d60:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d62:	e008      	b.n	8002d76 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d64:	f7fe f996 	bl	8001094 <HAL_GetTick>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	1ad3      	subs	r3, r2, r3
 8002d6e:	2b02      	cmp	r3, #2
 8002d70:	d901      	bls.n	8002d76 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002d72:	2303      	movs	r3, #3
 8002d74:	e058      	b.n	8002e28 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d76:	4b22      	ldr	r3, [pc, #136]	@ (8002e00 <HAL_RCC_OscConfig+0x780>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d0f0      	beq.n	8002d64 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002d82:	e050      	b.n	8002e26 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002d84:	2301      	movs	r3, #1
 8002d86:	e04f      	b.n	8002e28 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d88:	4b1d      	ldr	r3, [pc, #116]	@ (8002e00 <HAL_RCC_OscConfig+0x780>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d148      	bne.n	8002e26 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002d94:	4b1a      	ldr	r3, [pc, #104]	@ (8002e00 <HAL_RCC_OscConfig+0x780>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a19      	ldr	r2, [pc, #100]	@ (8002e00 <HAL_RCC_OscConfig+0x780>)
 8002d9a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002d9e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002da0:	4b17      	ldr	r3, [pc, #92]	@ (8002e00 <HAL_RCC_OscConfig+0x780>)
 8002da2:	68db      	ldr	r3, [r3, #12]
 8002da4:	4a16      	ldr	r2, [pc, #88]	@ (8002e00 <HAL_RCC_OscConfig+0x780>)
 8002da6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002daa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002dac:	f7fe f972 	bl	8001094 <HAL_GetTick>
 8002db0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002db2:	e008      	b.n	8002dc6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002db4:	f7fe f96e 	bl	8001094 <HAL_GetTick>
 8002db8:	4602      	mov	r2, r0
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	1ad3      	subs	r3, r2, r3
 8002dbe:	2b02      	cmp	r3, #2
 8002dc0:	d901      	bls.n	8002dc6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002dc2:	2303      	movs	r3, #3
 8002dc4:	e030      	b.n	8002e28 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002dc6:	4b0e      	ldr	r3, [pc, #56]	@ (8002e00 <HAL_RCC_OscConfig+0x780>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d0f0      	beq.n	8002db4 <HAL_RCC_OscConfig+0x734>
 8002dd2:	e028      	b.n	8002e26 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002dd4:	69bb      	ldr	r3, [r7, #24]
 8002dd6:	2b0c      	cmp	r3, #12
 8002dd8:	d023      	beq.n	8002e22 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dda:	4b09      	ldr	r3, [pc, #36]	@ (8002e00 <HAL_RCC_OscConfig+0x780>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a08      	ldr	r2, [pc, #32]	@ (8002e00 <HAL_RCC_OscConfig+0x780>)
 8002de0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002de4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002de6:	f7fe f955 	bl	8001094 <HAL_GetTick>
 8002dea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002dec:	e00c      	b.n	8002e08 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dee:	f7fe f951 	bl	8001094 <HAL_GetTick>
 8002df2:	4602      	mov	r2, r0
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	1ad3      	subs	r3, r2, r3
 8002df8:	2b02      	cmp	r3, #2
 8002dfa:	d905      	bls.n	8002e08 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002dfc:	2303      	movs	r3, #3
 8002dfe:	e013      	b.n	8002e28 <HAL_RCC_OscConfig+0x7a8>
 8002e00:	40021000 	.word	0x40021000
 8002e04:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e08:	4b09      	ldr	r3, [pc, #36]	@ (8002e30 <HAL_RCC_OscConfig+0x7b0>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d1ec      	bne.n	8002dee <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002e14:	4b06      	ldr	r3, [pc, #24]	@ (8002e30 <HAL_RCC_OscConfig+0x7b0>)
 8002e16:	68da      	ldr	r2, [r3, #12]
 8002e18:	4905      	ldr	r1, [pc, #20]	@ (8002e30 <HAL_RCC_OscConfig+0x7b0>)
 8002e1a:	4b06      	ldr	r3, [pc, #24]	@ (8002e34 <HAL_RCC_OscConfig+0x7b4>)
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	60cb      	str	r3, [r1, #12]
 8002e20:	e001      	b.n	8002e26 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	e000      	b.n	8002e28 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002e26:	2300      	movs	r3, #0
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	3720      	adds	r7, #32
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}
 8002e30:	40021000 	.word	0x40021000
 8002e34:	feeefffc 	.word	0xfeeefffc

08002e38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b084      	sub	sp, #16
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
 8002e40:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d101      	bne.n	8002e4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	e0e7      	b.n	800301c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e4c:	4b75      	ldr	r3, [pc, #468]	@ (8003024 <HAL_RCC_ClockConfig+0x1ec>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f003 0307 	and.w	r3, r3, #7
 8002e54:	683a      	ldr	r2, [r7, #0]
 8002e56:	429a      	cmp	r2, r3
 8002e58:	d910      	bls.n	8002e7c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e5a:	4b72      	ldr	r3, [pc, #456]	@ (8003024 <HAL_RCC_ClockConfig+0x1ec>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f023 0207 	bic.w	r2, r3, #7
 8002e62:	4970      	ldr	r1, [pc, #448]	@ (8003024 <HAL_RCC_ClockConfig+0x1ec>)
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	4313      	orrs	r3, r2
 8002e68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e6a:	4b6e      	ldr	r3, [pc, #440]	@ (8003024 <HAL_RCC_ClockConfig+0x1ec>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f003 0307 	and.w	r3, r3, #7
 8002e72:	683a      	ldr	r2, [r7, #0]
 8002e74:	429a      	cmp	r2, r3
 8002e76:	d001      	beq.n	8002e7c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	e0cf      	b.n	800301c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f003 0302 	and.w	r3, r3, #2
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d010      	beq.n	8002eaa <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	689a      	ldr	r2, [r3, #8]
 8002e8c:	4b66      	ldr	r3, [pc, #408]	@ (8003028 <HAL_RCC_ClockConfig+0x1f0>)
 8002e8e:	689b      	ldr	r3, [r3, #8]
 8002e90:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002e94:	429a      	cmp	r2, r3
 8002e96:	d908      	bls.n	8002eaa <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e98:	4b63      	ldr	r3, [pc, #396]	@ (8003028 <HAL_RCC_ClockConfig+0x1f0>)
 8002e9a:	689b      	ldr	r3, [r3, #8]
 8002e9c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	4960      	ldr	r1, [pc, #384]	@ (8003028 <HAL_RCC_ClockConfig+0x1f0>)
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f003 0301 	and.w	r3, r3, #1
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d04c      	beq.n	8002f50 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	2b03      	cmp	r3, #3
 8002ebc:	d107      	bne.n	8002ece <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ebe:	4b5a      	ldr	r3, [pc, #360]	@ (8003028 <HAL_RCC_ClockConfig+0x1f0>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d121      	bne.n	8002f0e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e0a6      	b.n	800301c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	2b02      	cmp	r3, #2
 8002ed4:	d107      	bne.n	8002ee6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ed6:	4b54      	ldr	r3, [pc, #336]	@ (8003028 <HAL_RCC_ClockConfig+0x1f0>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d115      	bne.n	8002f0e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e09a      	b.n	800301c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d107      	bne.n	8002efe <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002eee:	4b4e      	ldr	r3, [pc, #312]	@ (8003028 <HAL_RCC_ClockConfig+0x1f0>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 0302 	and.w	r3, r3, #2
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d109      	bne.n	8002f0e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	e08e      	b.n	800301c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002efe:	4b4a      	ldr	r3, [pc, #296]	@ (8003028 <HAL_RCC_ClockConfig+0x1f0>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d101      	bne.n	8002f0e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e086      	b.n	800301c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002f0e:	4b46      	ldr	r3, [pc, #280]	@ (8003028 <HAL_RCC_ClockConfig+0x1f0>)
 8002f10:	689b      	ldr	r3, [r3, #8]
 8002f12:	f023 0203 	bic.w	r2, r3, #3
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	4943      	ldr	r1, [pc, #268]	@ (8003028 <HAL_RCC_ClockConfig+0x1f0>)
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f20:	f7fe f8b8 	bl	8001094 <HAL_GetTick>
 8002f24:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f26:	e00a      	b.n	8002f3e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f28:	f7fe f8b4 	bl	8001094 <HAL_GetTick>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	1ad3      	subs	r3, r2, r3
 8002f32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d901      	bls.n	8002f3e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002f3a:	2303      	movs	r3, #3
 8002f3c:	e06e      	b.n	800301c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f3e:	4b3a      	ldr	r3, [pc, #232]	@ (8003028 <HAL_RCC_ClockConfig+0x1f0>)
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	f003 020c 	and.w	r2, r3, #12
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	009b      	lsls	r3, r3, #2
 8002f4c:	429a      	cmp	r2, r3
 8002f4e:	d1eb      	bne.n	8002f28 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f003 0302 	and.w	r3, r3, #2
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d010      	beq.n	8002f7e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	689a      	ldr	r2, [r3, #8]
 8002f60:	4b31      	ldr	r3, [pc, #196]	@ (8003028 <HAL_RCC_ClockConfig+0x1f0>)
 8002f62:	689b      	ldr	r3, [r3, #8]
 8002f64:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002f68:	429a      	cmp	r2, r3
 8002f6a:	d208      	bcs.n	8002f7e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f6c:	4b2e      	ldr	r3, [pc, #184]	@ (8003028 <HAL_RCC_ClockConfig+0x1f0>)
 8002f6e:	689b      	ldr	r3, [r3, #8]
 8002f70:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	689b      	ldr	r3, [r3, #8]
 8002f78:	492b      	ldr	r1, [pc, #172]	@ (8003028 <HAL_RCC_ClockConfig+0x1f0>)
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f7e:	4b29      	ldr	r3, [pc, #164]	@ (8003024 <HAL_RCC_ClockConfig+0x1ec>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f003 0307 	and.w	r3, r3, #7
 8002f86:	683a      	ldr	r2, [r7, #0]
 8002f88:	429a      	cmp	r2, r3
 8002f8a:	d210      	bcs.n	8002fae <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f8c:	4b25      	ldr	r3, [pc, #148]	@ (8003024 <HAL_RCC_ClockConfig+0x1ec>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f023 0207 	bic.w	r2, r3, #7
 8002f94:	4923      	ldr	r1, [pc, #140]	@ (8003024 <HAL_RCC_ClockConfig+0x1ec>)
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f9c:	4b21      	ldr	r3, [pc, #132]	@ (8003024 <HAL_RCC_ClockConfig+0x1ec>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f003 0307 	and.w	r3, r3, #7
 8002fa4:	683a      	ldr	r2, [r7, #0]
 8002fa6:	429a      	cmp	r2, r3
 8002fa8:	d001      	beq.n	8002fae <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	e036      	b.n	800301c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f003 0304 	and.w	r3, r3, #4
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d008      	beq.n	8002fcc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fba:	4b1b      	ldr	r3, [pc, #108]	@ (8003028 <HAL_RCC_ClockConfig+0x1f0>)
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	68db      	ldr	r3, [r3, #12]
 8002fc6:	4918      	ldr	r1, [pc, #96]	@ (8003028 <HAL_RCC_ClockConfig+0x1f0>)
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f003 0308 	and.w	r3, r3, #8
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d009      	beq.n	8002fec <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002fd8:	4b13      	ldr	r3, [pc, #76]	@ (8003028 <HAL_RCC_ClockConfig+0x1f0>)
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	691b      	ldr	r3, [r3, #16]
 8002fe4:	00db      	lsls	r3, r3, #3
 8002fe6:	4910      	ldr	r1, [pc, #64]	@ (8003028 <HAL_RCC_ClockConfig+0x1f0>)
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002fec:	f000 f824 	bl	8003038 <HAL_RCC_GetSysClockFreq>
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	4b0d      	ldr	r3, [pc, #52]	@ (8003028 <HAL_RCC_ClockConfig+0x1f0>)
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	091b      	lsrs	r3, r3, #4
 8002ff8:	f003 030f 	and.w	r3, r3, #15
 8002ffc:	490b      	ldr	r1, [pc, #44]	@ (800302c <HAL_RCC_ClockConfig+0x1f4>)
 8002ffe:	5ccb      	ldrb	r3, [r1, r3]
 8003000:	f003 031f 	and.w	r3, r3, #31
 8003004:	fa22 f303 	lsr.w	r3, r2, r3
 8003008:	4a09      	ldr	r2, [pc, #36]	@ (8003030 <HAL_RCC_ClockConfig+0x1f8>)
 800300a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800300c:	4b09      	ldr	r3, [pc, #36]	@ (8003034 <HAL_RCC_ClockConfig+0x1fc>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4618      	mov	r0, r3
 8003012:	f7fd ff0d 	bl	8000e30 <HAL_InitTick>
 8003016:	4603      	mov	r3, r0
 8003018:	72fb      	strb	r3, [r7, #11]

  return status;
 800301a:	7afb      	ldrb	r3, [r7, #11]
}
 800301c:	4618      	mov	r0, r3
 800301e:	3710      	adds	r7, #16
 8003020:	46bd      	mov	sp, r7
 8003022:	bd80      	pop	{r7, pc}
 8003024:	40022000 	.word	0x40022000
 8003028:	40021000 	.word	0x40021000
 800302c:	08007aa8 	.word	0x08007aa8
 8003030:	20000010 	.word	0x20000010
 8003034:	20000014 	.word	0x20000014

08003038 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003038:	b480      	push	{r7}
 800303a:	b089      	sub	sp, #36	@ 0x24
 800303c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800303e:	2300      	movs	r3, #0
 8003040:	61fb      	str	r3, [r7, #28]
 8003042:	2300      	movs	r3, #0
 8003044:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003046:	4b3e      	ldr	r3, [pc, #248]	@ (8003140 <HAL_RCC_GetSysClockFreq+0x108>)
 8003048:	689b      	ldr	r3, [r3, #8]
 800304a:	f003 030c 	and.w	r3, r3, #12
 800304e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003050:	4b3b      	ldr	r3, [pc, #236]	@ (8003140 <HAL_RCC_GetSysClockFreq+0x108>)
 8003052:	68db      	ldr	r3, [r3, #12]
 8003054:	f003 0303 	and.w	r3, r3, #3
 8003058:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d005      	beq.n	800306c <HAL_RCC_GetSysClockFreq+0x34>
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	2b0c      	cmp	r3, #12
 8003064:	d121      	bne.n	80030aa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	2b01      	cmp	r3, #1
 800306a:	d11e      	bne.n	80030aa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800306c:	4b34      	ldr	r3, [pc, #208]	@ (8003140 <HAL_RCC_GetSysClockFreq+0x108>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f003 0308 	and.w	r3, r3, #8
 8003074:	2b00      	cmp	r3, #0
 8003076:	d107      	bne.n	8003088 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003078:	4b31      	ldr	r3, [pc, #196]	@ (8003140 <HAL_RCC_GetSysClockFreq+0x108>)
 800307a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800307e:	0a1b      	lsrs	r3, r3, #8
 8003080:	f003 030f 	and.w	r3, r3, #15
 8003084:	61fb      	str	r3, [r7, #28]
 8003086:	e005      	b.n	8003094 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003088:	4b2d      	ldr	r3, [pc, #180]	@ (8003140 <HAL_RCC_GetSysClockFreq+0x108>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	091b      	lsrs	r3, r3, #4
 800308e:	f003 030f 	and.w	r3, r3, #15
 8003092:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003094:	4a2b      	ldr	r2, [pc, #172]	@ (8003144 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003096:	69fb      	ldr	r3, [r7, #28]
 8003098:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800309c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d10d      	bne.n	80030c0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80030a4:	69fb      	ldr	r3, [r7, #28]
 80030a6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80030a8:	e00a      	b.n	80030c0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	2b04      	cmp	r3, #4
 80030ae:	d102      	bne.n	80030b6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80030b0:	4b25      	ldr	r3, [pc, #148]	@ (8003148 <HAL_RCC_GetSysClockFreq+0x110>)
 80030b2:	61bb      	str	r3, [r7, #24]
 80030b4:	e004      	b.n	80030c0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	2b08      	cmp	r3, #8
 80030ba:	d101      	bne.n	80030c0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80030bc:	4b23      	ldr	r3, [pc, #140]	@ (800314c <HAL_RCC_GetSysClockFreq+0x114>)
 80030be:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	2b0c      	cmp	r3, #12
 80030c4:	d134      	bne.n	8003130 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80030c6:	4b1e      	ldr	r3, [pc, #120]	@ (8003140 <HAL_RCC_GetSysClockFreq+0x108>)
 80030c8:	68db      	ldr	r3, [r3, #12]
 80030ca:	f003 0303 	and.w	r3, r3, #3
 80030ce:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	2b02      	cmp	r3, #2
 80030d4:	d003      	beq.n	80030de <HAL_RCC_GetSysClockFreq+0xa6>
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	2b03      	cmp	r3, #3
 80030da:	d003      	beq.n	80030e4 <HAL_RCC_GetSysClockFreq+0xac>
 80030dc:	e005      	b.n	80030ea <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80030de:	4b1a      	ldr	r3, [pc, #104]	@ (8003148 <HAL_RCC_GetSysClockFreq+0x110>)
 80030e0:	617b      	str	r3, [r7, #20]
      break;
 80030e2:	e005      	b.n	80030f0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80030e4:	4b19      	ldr	r3, [pc, #100]	@ (800314c <HAL_RCC_GetSysClockFreq+0x114>)
 80030e6:	617b      	str	r3, [r7, #20]
      break;
 80030e8:	e002      	b.n	80030f0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80030ea:	69fb      	ldr	r3, [r7, #28]
 80030ec:	617b      	str	r3, [r7, #20]
      break;
 80030ee:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80030f0:	4b13      	ldr	r3, [pc, #76]	@ (8003140 <HAL_RCC_GetSysClockFreq+0x108>)
 80030f2:	68db      	ldr	r3, [r3, #12]
 80030f4:	091b      	lsrs	r3, r3, #4
 80030f6:	f003 0307 	and.w	r3, r3, #7
 80030fa:	3301      	adds	r3, #1
 80030fc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80030fe:	4b10      	ldr	r3, [pc, #64]	@ (8003140 <HAL_RCC_GetSysClockFreq+0x108>)
 8003100:	68db      	ldr	r3, [r3, #12]
 8003102:	0a1b      	lsrs	r3, r3, #8
 8003104:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003108:	697a      	ldr	r2, [r7, #20]
 800310a:	fb03 f202 	mul.w	r2, r3, r2
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	fbb2 f3f3 	udiv	r3, r2, r3
 8003114:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003116:	4b0a      	ldr	r3, [pc, #40]	@ (8003140 <HAL_RCC_GetSysClockFreq+0x108>)
 8003118:	68db      	ldr	r3, [r3, #12]
 800311a:	0e5b      	lsrs	r3, r3, #25
 800311c:	f003 0303 	and.w	r3, r3, #3
 8003120:	3301      	adds	r3, #1
 8003122:	005b      	lsls	r3, r3, #1
 8003124:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003126:	697a      	ldr	r2, [r7, #20]
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	fbb2 f3f3 	udiv	r3, r2, r3
 800312e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003130:	69bb      	ldr	r3, [r7, #24]
}
 8003132:	4618      	mov	r0, r3
 8003134:	3724      	adds	r7, #36	@ 0x24
 8003136:	46bd      	mov	sp, r7
 8003138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313c:	4770      	bx	lr
 800313e:	bf00      	nop
 8003140:	40021000 	.word	0x40021000
 8003144:	08007ac0 	.word	0x08007ac0
 8003148:	00f42400 	.word	0x00f42400
 800314c:	007a1200 	.word	0x007a1200

08003150 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003150:	b480      	push	{r7}
 8003152:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003154:	4b03      	ldr	r3, [pc, #12]	@ (8003164 <HAL_RCC_GetHCLKFreq+0x14>)
 8003156:	681b      	ldr	r3, [r3, #0]
}
 8003158:	4618      	mov	r0, r3
 800315a:	46bd      	mov	sp, r7
 800315c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003160:	4770      	bx	lr
 8003162:	bf00      	nop
 8003164:	20000010 	.word	0x20000010

08003168 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800316c:	f7ff fff0 	bl	8003150 <HAL_RCC_GetHCLKFreq>
 8003170:	4602      	mov	r2, r0
 8003172:	4b06      	ldr	r3, [pc, #24]	@ (800318c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003174:	689b      	ldr	r3, [r3, #8]
 8003176:	0a1b      	lsrs	r3, r3, #8
 8003178:	f003 0307 	and.w	r3, r3, #7
 800317c:	4904      	ldr	r1, [pc, #16]	@ (8003190 <HAL_RCC_GetPCLK1Freq+0x28>)
 800317e:	5ccb      	ldrb	r3, [r1, r3]
 8003180:	f003 031f 	and.w	r3, r3, #31
 8003184:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003188:	4618      	mov	r0, r3
 800318a:	bd80      	pop	{r7, pc}
 800318c:	40021000 	.word	0x40021000
 8003190:	08007ab8 	.word	0x08007ab8

08003194 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003198:	f7ff ffda 	bl	8003150 <HAL_RCC_GetHCLKFreq>
 800319c:	4602      	mov	r2, r0
 800319e:	4b06      	ldr	r3, [pc, #24]	@ (80031b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	0adb      	lsrs	r3, r3, #11
 80031a4:	f003 0307 	and.w	r3, r3, #7
 80031a8:	4904      	ldr	r1, [pc, #16]	@ (80031bc <HAL_RCC_GetPCLK2Freq+0x28>)
 80031aa:	5ccb      	ldrb	r3, [r1, r3]
 80031ac:	f003 031f 	and.w	r3, r3, #31
 80031b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	bd80      	pop	{r7, pc}
 80031b8:	40021000 	.word	0x40021000
 80031bc:	08007ab8 	.word	0x08007ab8

080031c0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80031c0:	b480      	push	{r7}
 80031c2:	b083      	sub	sp, #12
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
 80031c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	220f      	movs	r2, #15
 80031ce:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80031d0:	4b12      	ldr	r3, [pc, #72]	@ (800321c <HAL_RCC_GetClockConfig+0x5c>)
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	f003 0203 	and.w	r2, r3, #3
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80031dc:	4b0f      	ldr	r3, [pc, #60]	@ (800321c <HAL_RCC_GetClockConfig+0x5c>)
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80031e8:	4b0c      	ldr	r3, [pc, #48]	@ (800321c <HAL_RCC_GetClockConfig+0x5c>)
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80031f4:	4b09      	ldr	r3, [pc, #36]	@ (800321c <HAL_RCC_GetClockConfig+0x5c>)
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	08db      	lsrs	r3, r3, #3
 80031fa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003202:	4b07      	ldr	r3, [pc, #28]	@ (8003220 <HAL_RCC_GetClockConfig+0x60>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f003 0207 	and.w	r2, r3, #7
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	601a      	str	r2, [r3, #0]
}
 800320e:	bf00      	nop
 8003210:	370c      	adds	r7, #12
 8003212:	46bd      	mov	sp, r7
 8003214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003218:	4770      	bx	lr
 800321a:	bf00      	nop
 800321c:	40021000 	.word	0x40021000
 8003220:	40022000 	.word	0x40022000

08003224 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b086      	sub	sp, #24
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800322c:	2300      	movs	r3, #0
 800322e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003230:	4b2a      	ldr	r3, [pc, #168]	@ (80032dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003232:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003234:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003238:	2b00      	cmp	r3, #0
 800323a:	d003      	beq.n	8003244 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800323c:	f7ff f9bc 	bl	80025b8 <HAL_PWREx_GetVoltageRange>
 8003240:	6178      	str	r0, [r7, #20]
 8003242:	e014      	b.n	800326e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003244:	4b25      	ldr	r3, [pc, #148]	@ (80032dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003246:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003248:	4a24      	ldr	r2, [pc, #144]	@ (80032dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800324a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800324e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003250:	4b22      	ldr	r3, [pc, #136]	@ (80032dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003252:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003254:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003258:	60fb      	str	r3, [r7, #12]
 800325a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800325c:	f7ff f9ac 	bl	80025b8 <HAL_PWREx_GetVoltageRange>
 8003260:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003262:	4b1e      	ldr	r3, [pc, #120]	@ (80032dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003264:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003266:	4a1d      	ldr	r2, [pc, #116]	@ (80032dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003268:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800326c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003274:	d10b      	bne.n	800328e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2b80      	cmp	r3, #128	@ 0x80
 800327a:	d919      	bls.n	80032b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2ba0      	cmp	r3, #160	@ 0xa0
 8003280:	d902      	bls.n	8003288 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003282:	2302      	movs	r3, #2
 8003284:	613b      	str	r3, [r7, #16]
 8003286:	e013      	b.n	80032b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003288:	2301      	movs	r3, #1
 800328a:	613b      	str	r3, [r7, #16]
 800328c:	e010      	b.n	80032b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2b80      	cmp	r3, #128	@ 0x80
 8003292:	d902      	bls.n	800329a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003294:	2303      	movs	r3, #3
 8003296:	613b      	str	r3, [r7, #16]
 8003298:	e00a      	b.n	80032b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2b80      	cmp	r3, #128	@ 0x80
 800329e:	d102      	bne.n	80032a6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80032a0:	2302      	movs	r3, #2
 80032a2:	613b      	str	r3, [r7, #16]
 80032a4:	e004      	b.n	80032b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2b70      	cmp	r3, #112	@ 0x70
 80032aa:	d101      	bne.n	80032b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80032ac:	2301      	movs	r3, #1
 80032ae:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80032b0:	4b0b      	ldr	r3, [pc, #44]	@ (80032e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f023 0207 	bic.w	r2, r3, #7
 80032b8:	4909      	ldr	r1, [pc, #36]	@ (80032e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80032ba:	693b      	ldr	r3, [r7, #16]
 80032bc:	4313      	orrs	r3, r2
 80032be:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80032c0:	4b07      	ldr	r3, [pc, #28]	@ (80032e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f003 0307 	and.w	r3, r3, #7
 80032c8:	693a      	ldr	r2, [r7, #16]
 80032ca:	429a      	cmp	r2, r3
 80032cc:	d001      	beq.n	80032d2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	e000      	b.n	80032d4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80032d2:	2300      	movs	r3, #0
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	3718      	adds	r7, #24
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd80      	pop	{r7, pc}
 80032dc:	40021000 	.word	0x40021000
 80032e0:	40022000 	.word	0x40022000

080032e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b086      	sub	sp, #24
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80032ec:	2300      	movs	r3, #0
 80032ee:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80032f0:	2300      	movs	r3, #0
 80032f2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d041      	beq.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003304:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003308:	d02a      	beq.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800330a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800330e:	d824      	bhi.n	800335a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003310:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003314:	d008      	beq.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003316:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800331a:	d81e      	bhi.n	800335a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800331c:	2b00      	cmp	r3, #0
 800331e:	d00a      	beq.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003320:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003324:	d010      	beq.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003326:	e018      	b.n	800335a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003328:	4b86      	ldr	r3, [pc, #536]	@ (8003544 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800332a:	68db      	ldr	r3, [r3, #12]
 800332c:	4a85      	ldr	r2, [pc, #532]	@ (8003544 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800332e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003332:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003334:	e015      	b.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	3304      	adds	r3, #4
 800333a:	2100      	movs	r1, #0
 800333c:	4618      	mov	r0, r3
 800333e:	f000 fabb 	bl	80038b8 <RCCEx_PLLSAI1_Config>
 8003342:	4603      	mov	r3, r0
 8003344:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003346:	e00c      	b.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	3320      	adds	r3, #32
 800334c:	2100      	movs	r1, #0
 800334e:	4618      	mov	r0, r3
 8003350:	f000 fba6 	bl	8003aa0 <RCCEx_PLLSAI2_Config>
 8003354:	4603      	mov	r3, r0
 8003356:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003358:	e003      	b.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	74fb      	strb	r3, [r7, #19]
      break;
 800335e:	e000      	b.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003360:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003362:	7cfb      	ldrb	r3, [r7, #19]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d10b      	bne.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003368:	4b76      	ldr	r3, [pc, #472]	@ (8003544 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800336a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800336e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003376:	4973      	ldr	r1, [pc, #460]	@ (8003544 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003378:	4313      	orrs	r3, r2
 800337a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800337e:	e001      	b.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003380:	7cfb      	ldrb	r3, [r7, #19]
 8003382:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800338c:	2b00      	cmp	r3, #0
 800338e:	d041      	beq.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003394:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003398:	d02a      	beq.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800339a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800339e:	d824      	bhi.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0x106>
 80033a0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80033a4:	d008      	beq.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80033a6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80033aa:	d81e      	bhi.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0x106>
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d00a      	beq.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80033b0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80033b4:	d010      	beq.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80033b6:	e018      	b.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80033b8:	4b62      	ldr	r3, [pc, #392]	@ (8003544 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033ba:	68db      	ldr	r3, [r3, #12]
 80033bc:	4a61      	ldr	r2, [pc, #388]	@ (8003544 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033c2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80033c4:	e015      	b.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	3304      	adds	r3, #4
 80033ca:	2100      	movs	r1, #0
 80033cc:	4618      	mov	r0, r3
 80033ce:	f000 fa73 	bl	80038b8 <RCCEx_PLLSAI1_Config>
 80033d2:	4603      	mov	r3, r0
 80033d4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80033d6:	e00c      	b.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	3320      	adds	r3, #32
 80033dc:	2100      	movs	r1, #0
 80033de:	4618      	mov	r0, r3
 80033e0:	f000 fb5e 	bl	8003aa0 <RCCEx_PLLSAI2_Config>
 80033e4:	4603      	mov	r3, r0
 80033e6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80033e8:	e003      	b.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	74fb      	strb	r3, [r7, #19]
      break;
 80033ee:	e000      	b.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80033f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80033f2:	7cfb      	ldrb	r3, [r7, #19]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d10b      	bne.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80033f8:	4b52      	ldr	r3, [pc, #328]	@ (8003544 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033fe:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003406:	494f      	ldr	r1, [pc, #316]	@ (8003544 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003408:	4313      	orrs	r3, r2
 800340a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800340e:	e001      	b.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003410:	7cfb      	ldrb	r3, [r7, #19]
 8003412:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800341c:	2b00      	cmp	r3, #0
 800341e:	f000 80a0 	beq.w	8003562 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003422:	2300      	movs	r3, #0
 8003424:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003426:	4b47      	ldr	r3, [pc, #284]	@ (8003544 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003428:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800342a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800342e:	2b00      	cmp	r3, #0
 8003430:	d101      	bne.n	8003436 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003432:	2301      	movs	r3, #1
 8003434:	e000      	b.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003436:	2300      	movs	r3, #0
 8003438:	2b00      	cmp	r3, #0
 800343a:	d00d      	beq.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800343c:	4b41      	ldr	r3, [pc, #260]	@ (8003544 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800343e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003440:	4a40      	ldr	r2, [pc, #256]	@ (8003544 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003442:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003446:	6593      	str	r3, [r2, #88]	@ 0x58
 8003448:	4b3e      	ldr	r3, [pc, #248]	@ (8003544 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800344a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800344c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003450:	60bb      	str	r3, [r7, #8]
 8003452:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003454:	2301      	movs	r3, #1
 8003456:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003458:	4b3b      	ldr	r3, [pc, #236]	@ (8003548 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a3a      	ldr	r2, [pc, #232]	@ (8003548 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800345e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003462:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003464:	f7fd fe16 	bl	8001094 <HAL_GetTick>
 8003468:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800346a:	e009      	b.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800346c:	f7fd fe12 	bl	8001094 <HAL_GetTick>
 8003470:	4602      	mov	r2, r0
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	1ad3      	subs	r3, r2, r3
 8003476:	2b02      	cmp	r3, #2
 8003478:	d902      	bls.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800347a:	2303      	movs	r3, #3
 800347c:	74fb      	strb	r3, [r7, #19]
        break;
 800347e:	e005      	b.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003480:	4b31      	ldr	r3, [pc, #196]	@ (8003548 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003488:	2b00      	cmp	r3, #0
 800348a:	d0ef      	beq.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800348c:	7cfb      	ldrb	r3, [r7, #19]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d15c      	bne.n	800354c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003492:	4b2c      	ldr	r3, [pc, #176]	@ (8003544 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003494:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003498:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800349c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d01f      	beq.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80034aa:	697a      	ldr	r2, [r7, #20]
 80034ac:	429a      	cmp	r2, r3
 80034ae:	d019      	beq.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80034b0:	4b24      	ldr	r3, [pc, #144]	@ (8003544 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80034ba:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80034bc:	4b21      	ldr	r3, [pc, #132]	@ (8003544 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034c2:	4a20      	ldr	r2, [pc, #128]	@ (8003544 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80034cc:	4b1d      	ldr	r3, [pc, #116]	@ (8003544 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034d2:	4a1c      	ldr	r2, [pc, #112]	@ (8003544 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034d4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80034d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80034dc:	4a19      	ldr	r2, [pc, #100]	@ (8003544 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80034e4:	697b      	ldr	r3, [r7, #20]
 80034e6:	f003 0301 	and.w	r3, r3, #1
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d016      	beq.n	800351c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034ee:	f7fd fdd1 	bl	8001094 <HAL_GetTick>
 80034f2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034f4:	e00b      	b.n	800350e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034f6:	f7fd fdcd 	bl	8001094 <HAL_GetTick>
 80034fa:	4602      	mov	r2, r0
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	1ad3      	subs	r3, r2, r3
 8003500:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003504:	4293      	cmp	r3, r2
 8003506:	d902      	bls.n	800350e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003508:	2303      	movs	r3, #3
 800350a:	74fb      	strb	r3, [r7, #19]
            break;
 800350c:	e006      	b.n	800351c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800350e:	4b0d      	ldr	r3, [pc, #52]	@ (8003544 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003510:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003514:	f003 0302 	and.w	r3, r3, #2
 8003518:	2b00      	cmp	r3, #0
 800351a:	d0ec      	beq.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800351c:	7cfb      	ldrb	r3, [r7, #19]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d10c      	bne.n	800353c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003522:	4b08      	ldr	r3, [pc, #32]	@ (8003544 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003524:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003528:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003532:	4904      	ldr	r1, [pc, #16]	@ (8003544 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003534:	4313      	orrs	r3, r2
 8003536:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800353a:	e009      	b.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800353c:	7cfb      	ldrb	r3, [r7, #19]
 800353e:	74bb      	strb	r3, [r7, #18]
 8003540:	e006      	b.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003542:	bf00      	nop
 8003544:	40021000 	.word	0x40021000
 8003548:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800354c:	7cfb      	ldrb	r3, [r7, #19]
 800354e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003550:	7c7b      	ldrb	r3, [r7, #17]
 8003552:	2b01      	cmp	r3, #1
 8003554:	d105      	bne.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003556:	4b9e      	ldr	r3, [pc, #632]	@ (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003558:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800355a:	4a9d      	ldr	r2, [pc, #628]	@ (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800355c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003560:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f003 0301 	and.w	r3, r3, #1
 800356a:	2b00      	cmp	r3, #0
 800356c:	d00a      	beq.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800356e:	4b98      	ldr	r3, [pc, #608]	@ (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003570:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003574:	f023 0203 	bic.w	r2, r3, #3
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800357c:	4994      	ldr	r1, [pc, #592]	@ (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800357e:	4313      	orrs	r3, r2
 8003580:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f003 0302 	and.w	r3, r3, #2
 800358c:	2b00      	cmp	r3, #0
 800358e:	d00a      	beq.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003590:	4b8f      	ldr	r3, [pc, #572]	@ (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003592:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003596:	f023 020c 	bic.w	r2, r3, #12
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800359e:	498c      	ldr	r1, [pc, #560]	@ (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035a0:	4313      	orrs	r3, r2
 80035a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f003 0304 	and.w	r3, r3, #4
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d00a      	beq.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80035b2:	4b87      	ldr	r3, [pc, #540]	@ (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035b8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035c0:	4983      	ldr	r1, [pc, #524]	@ (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035c2:	4313      	orrs	r3, r2
 80035c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f003 0308 	and.w	r3, r3, #8
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d00a      	beq.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80035d4:	4b7e      	ldr	r3, [pc, #504]	@ (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035da:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035e2:	497b      	ldr	r1, [pc, #492]	@ (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035e4:	4313      	orrs	r3, r2
 80035e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f003 0310 	and.w	r3, r3, #16
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d00a      	beq.n	800360c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80035f6:	4b76      	ldr	r3, [pc, #472]	@ (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035fc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003604:	4972      	ldr	r1, [pc, #456]	@ (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003606:	4313      	orrs	r3, r2
 8003608:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f003 0320 	and.w	r3, r3, #32
 8003614:	2b00      	cmp	r3, #0
 8003616:	d00a      	beq.n	800362e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003618:	4b6d      	ldr	r3, [pc, #436]	@ (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800361a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800361e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003626:	496a      	ldr	r1, [pc, #424]	@ (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003628:	4313      	orrs	r3, r2
 800362a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003636:	2b00      	cmp	r3, #0
 8003638:	d00a      	beq.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800363a:	4b65      	ldr	r3, [pc, #404]	@ (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800363c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003640:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003648:	4961      	ldr	r1, [pc, #388]	@ (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800364a:	4313      	orrs	r3, r2
 800364c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003658:	2b00      	cmp	r3, #0
 800365a:	d00a      	beq.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800365c:	4b5c      	ldr	r3, [pc, #368]	@ (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800365e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003662:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800366a:	4959      	ldr	r1, [pc, #356]	@ (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800366c:	4313      	orrs	r3, r2
 800366e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800367a:	2b00      	cmp	r3, #0
 800367c:	d00a      	beq.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800367e:	4b54      	ldr	r3, [pc, #336]	@ (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003680:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003684:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800368c:	4950      	ldr	r1, [pc, #320]	@ (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800368e:	4313      	orrs	r3, r2
 8003690:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800369c:	2b00      	cmp	r3, #0
 800369e:	d00a      	beq.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80036a0:	4b4b      	ldr	r3, [pc, #300]	@ (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036a6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036ae:	4948      	ldr	r1, [pc, #288]	@ (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036b0:	4313      	orrs	r3, r2
 80036b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d00a      	beq.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80036c2:	4b43      	ldr	r3, [pc, #268]	@ (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036c8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036d0:	493f      	ldr	r1, [pc, #252]	@ (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036d2:	4313      	orrs	r3, r2
 80036d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d028      	beq.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80036e4:	4b3a      	ldr	r3, [pc, #232]	@ (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036ea:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80036f2:	4937      	ldr	r1, [pc, #220]	@ (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036f4:	4313      	orrs	r3, r2
 80036f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80036fe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003702:	d106      	bne.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003704:	4b32      	ldr	r3, [pc, #200]	@ (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003706:	68db      	ldr	r3, [r3, #12]
 8003708:	4a31      	ldr	r2, [pc, #196]	@ (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800370a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800370e:	60d3      	str	r3, [r2, #12]
 8003710:	e011      	b.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003716:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800371a:	d10c      	bne.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	3304      	adds	r3, #4
 8003720:	2101      	movs	r1, #1
 8003722:	4618      	mov	r0, r3
 8003724:	f000 f8c8 	bl	80038b8 <RCCEx_PLLSAI1_Config>
 8003728:	4603      	mov	r3, r0
 800372a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800372c:	7cfb      	ldrb	r3, [r7, #19]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d001      	beq.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003732:	7cfb      	ldrb	r3, [r7, #19]
 8003734:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800373e:	2b00      	cmp	r3, #0
 8003740:	d028      	beq.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003742:	4b23      	ldr	r3, [pc, #140]	@ (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003744:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003748:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003750:	491f      	ldr	r1, [pc, #124]	@ (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003752:	4313      	orrs	r3, r2
 8003754:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800375c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003760:	d106      	bne.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003762:	4b1b      	ldr	r3, [pc, #108]	@ (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003764:	68db      	ldr	r3, [r3, #12]
 8003766:	4a1a      	ldr	r2, [pc, #104]	@ (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003768:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800376c:	60d3      	str	r3, [r2, #12]
 800376e:	e011      	b.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003774:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003778:	d10c      	bne.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	3304      	adds	r3, #4
 800377e:	2101      	movs	r1, #1
 8003780:	4618      	mov	r0, r3
 8003782:	f000 f899 	bl	80038b8 <RCCEx_PLLSAI1_Config>
 8003786:	4603      	mov	r3, r0
 8003788:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800378a:	7cfb      	ldrb	r3, [r7, #19]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d001      	beq.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003790:	7cfb      	ldrb	r3, [r7, #19]
 8003792:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800379c:	2b00      	cmp	r3, #0
 800379e:	d02b      	beq.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80037a0:	4b0b      	ldr	r3, [pc, #44]	@ (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037a6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037ae:	4908      	ldr	r1, [pc, #32]	@ (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037b0:	4313      	orrs	r3, r2
 80037b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037ba:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80037be:	d109      	bne.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80037c0:	4b03      	ldr	r3, [pc, #12]	@ (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037c2:	68db      	ldr	r3, [r3, #12]
 80037c4:	4a02      	ldr	r2, [pc, #8]	@ (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037c6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80037ca:	60d3      	str	r3, [r2, #12]
 80037cc:	e014      	b.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80037ce:	bf00      	nop
 80037d0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037d8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80037dc:	d10c      	bne.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	3304      	adds	r3, #4
 80037e2:	2101      	movs	r1, #1
 80037e4:	4618      	mov	r0, r3
 80037e6:	f000 f867 	bl	80038b8 <RCCEx_PLLSAI1_Config>
 80037ea:	4603      	mov	r3, r0
 80037ec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80037ee:	7cfb      	ldrb	r3, [r7, #19]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d001      	beq.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80037f4:	7cfb      	ldrb	r3, [r7, #19]
 80037f6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003800:	2b00      	cmp	r3, #0
 8003802:	d02f      	beq.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003804:	4b2b      	ldr	r3, [pc, #172]	@ (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003806:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800380a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003812:	4928      	ldr	r1, [pc, #160]	@ (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003814:	4313      	orrs	r3, r2
 8003816:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800381e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003822:	d10d      	bne.n	8003840 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	3304      	adds	r3, #4
 8003828:	2102      	movs	r1, #2
 800382a:	4618      	mov	r0, r3
 800382c:	f000 f844 	bl	80038b8 <RCCEx_PLLSAI1_Config>
 8003830:	4603      	mov	r3, r0
 8003832:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003834:	7cfb      	ldrb	r3, [r7, #19]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d014      	beq.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800383a:	7cfb      	ldrb	r3, [r7, #19]
 800383c:	74bb      	strb	r3, [r7, #18]
 800383e:	e011      	b.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003844:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003848:	d10c      	bne.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	3320      	adds	r3, #32
 800384e:	2102      	movs	r1, #2
 8003850:	4618      	mov	r0, r3
 8003852:	f000 f925 	bl	8003aa0 <RCCEx_PLLSAI2_Config>
 8003856:	4603      	mov	r3, r0
 8003858:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800385a:	7cfb      	ldrb	r3, [r7, #19]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d001      	beq.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003860:	7cfb      	ldrb	r3, [r7, #19]
 8003862:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800386c:	2b00      	cmp	r3, #0
 800386e:	d00a      	beq.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003870:	4b10      	ldr	r3, [pc, #64]	@ (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003872:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003876:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800387e:	490d      	ldr	r1, [pc, #52]	@ (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003880:	4313      	orrs	r3, r2
 8003882:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800388e:	2b00      	cmp	r3, #0
 8003890:	d00b      	beq.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003892:	4b08      	ldr	r3, [pc, #32]	@ (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003894:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003898:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80038a2:	4904      	ldr	r1, [pc, #16]	@ (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80038a4:	4313      	orrs	r3, r2
 80038a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80038aa:	7cbb      	ldrb	r3, [r7, #18]
}
 80038ac:	4618      	mov	r0, r3
 80038ae:	3718      	adds	r7, #24
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bd80      	pop	{r7, pc}
 80038b4:	40021000 	.word	0x40021000

080038b8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b084      	sub	sp, #16
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
 80038c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80038c2:	2300      	movs	r3, #0
 80038c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80038c6:	4b75      	ldr	r3, [pc, #468]	@ (8003a9c <RCCEx_PLLSAI1_Config+0x1e4>)
 80038c8:	68db      	ldr	r3, [r3, #12]
 80038ca:	f003 0303 	and.w	r3, r3, #3
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d018      	beq.n	8003904 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80038d2:	4b72      	ldr	r3, [pc, #456]	@ (8003a9c <RCCEx_PLLSAI1_Config+0x1e4>)
 80038d4:	68db      	ldr	r3, [r3, #12]
 80038d6:	f003 0203 	and.w	r2, r3, #3
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	429a      	cmp	r2, r3
 80038e0:	d10d      	bne.n	80038fe <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
       ||
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d009      	beq.n	80038fe <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80038ea:	4b6c      	ldr	r3, [pc, #432]	@ (8003a9c <RCCEx_PLLSAI1_Config+0x1e4>)
 80038ec:	68db      	ldr	r3, [r3, #12]
 80038ee:	091b      	lsrs	r3, r3, #4
 80038f0:	f003 0307 	and.w	r3, r3, #7
 80038f4:	1c5a      	adds	r2, r3, #1
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	685b      	ldr	r3, [r3, #4]
       ||
 80038fa:	429a      	cmp	r2, r3
 80038fc:	d047      	beq.n	800398e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80038fe:	2301      	movs	r3, #1
 8003900:	73fb      	strb	r3, [r7, #15]
 8003902:	e044      	b.n	800398e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	2b03      	cmp	r3, #3
 800390a:	d018      	beq.n	800393e <RCCEx_PLLSAI1_Config+0x86>
 800390c:	2b03      	cmp	r3, #3
 800390e:	d825      	bhi.n	800395c <RCCEx_PLLSAI1_Config+0xa4>
 8003910:	2b01      	cmp	r3, #1
 8003912:	d002      	beq.n	800391a <RCCEx_PLLSAI1_Config+0x62>
 8003914:	2b02      	cmp	r3, #2
 8003916:	d009      	beq.n	800392c <RCCEx_PLLSAI1_Config+0x74>
 8003918:	e020      	b.n	800395c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800391a:	4b60      	ldr	r3, [pc, #384]	@ (8003a9c <RCCEx_PLLSAI1_Config+0x1e4>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f003 0302 	and.w	r3, r3, #2
 8003922:	2b00      	cmp	r3, #0
 8003924:	d11d      	bne.n	8003962 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800392a:	e01a      	b.n	8003962 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800392c:	4b5b      	ldr	r3, [pc, #364]	@ (8003a9c <RCCEx_PLLSAI1_Config+0x1e4>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003934:	2b00      	cmp	r3, #0
 8003936:	d116      	bne.n	8003966 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003938:	2301      	movs	r3, #1
 800393a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800393c:	e013      	b.n	8003966 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800393e:	4b57      	ldr	r3, [pc, #348]	@ (8003a9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003946:	2b00      	cmp	r3, #0
 8003948:	d10f      	bne.n	800396a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800394a:	4b54      	ldr	r3, [pc, #336]	@ (8003a9c <RCCEx_PLLSAI1_Config+0x1e4>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003952:	2b00      	cmp	r3, #0
 8003954:	d109      	bne.n	800396a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800395a:	e006      	b.n	800396a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800395c:	2301      	movs	r3, #1
 800395e:	73fb      	strb	r3, [r7, #15]
      break;
 8003960:	e004      	b.n	800396c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003962:	bf00      	nop
 8003964:	e002      	b.n	800396c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003966:	bf00      	nop
 8003968:	e000      	b.n	800396c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800396a:	bf00      	nop
    }

    if(status == HAL_OK)
 800396c:	7bfb      	ldrb	r3, [r7, #15]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d10d      	bne.n	800398e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003972:	4b4a      	ldr	r3, [pc, #296]	@ (8003a9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003974:	68db      	ldr	r3, [r3, #12]
 8003976:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6819      	ldr	r1, [r3, #0]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	3b01      	subs	r3, #1
 8003984:	011b      	lsls	r3, r3, #4
 8003986:	430b      	orrs	r3, r1
 8003988:	4944      	ldr	r1, [pc, #272]	@ (8003a9c <RCCEx_PLLSAI1_Config+0x1e4>)
 800398a:	4313      	orrs	r3, r2
 800398c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800398e:	7bfb      	ldrb	r3, [r7, #15]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d17d      	bne.n	8003a90 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003994:	4b41      	ldr	r3, [pc, #260]	@ (8003a9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a40      	ldr	r2, [pc, #256]	@ (8003a9c <RCCEx_PLLSAI1_Config+0x1e4>)
 800399a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800399e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039a0:	f7fd fb78 	bl	8001094 <HAL_GetTick>
 80039a4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80039a6:	e009      	b.n	80039bc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80039a8:	f7fd fb74 	bl	8001094 <HAL_GetTick>
 80039ac:	4602      	mov	r2, r0
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	1ad3      	subs	r3, r2, r3
 80039b2:	2b02      	cmp	r3, #2
 80039b4:	d902      	bls.n	80039bc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80039b6:	2303      	movs	r3, #3
 80039b8:	73fb      	strb	r3, [r7, #15]
        break;
 80039ba:	e005      	b.n	80039c8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80039bc:	4b37      	ldr	r3, [pc, #220]	@ (8003a9c <RCCEx_PLLSAI1_Config+0x1e4>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d1ef      	bne.n	80039a8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80039c8:	7bfb      	ldrb	r3, [r7, #15]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d160      	bne.n	8003a90 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d111      	bne.n	80039f8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80039d4:	4b31      	ldr	r3, [pc, #196]	@ (8003a9c <RCCEx_PLLSAI1_Config+0x1e4>)
 80039d6:	691b      	ldr	r3, [r3, #16]
 80039d8:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80039dc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80039e0:	687a      	ldr	r2, [r7, #4]
 80039e2:	6892      	ldr	r2, [r2, #8]
 80039e4:	0211      	lsls	r1, r2, #8
 80039e6:	687a      	ldr	r2, [r7, #4]
 80039e8:	68d2      	ldr	r2, [r2, #12]
 80039ea:	0912      	lsrs	r2, r2, #4
 80039ec:	0452      	lsls	r2, r2, #17
 80039ee:	430a      	orrs	r2, r1
 80039f0:	492a      	ldr	r1, [pc, #168]	@ (8003a9c <RCCEx_PLLSAI1_Config+0x1e4>)
 80039f2:	4313      	orrs	r3, r2
 80039f4:	610b      	str	r3, [r1, #16]
 80039f6:	e027      	b.n	8003a48 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	2b01      	cmp	r3, #1
 80039fc:	d112      	bne.n	8003a24 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80039fe:	4b27      	ldr	r3, [pc, #156]	@ (8003a9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a00:	691b      	ldr	r3, [r3, #16]
 8003a02:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8003a06:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003a0a:	687a      	ldr	r2, [r7, #4]
 8003a0c:	6892      	ldr	r2, [r2, #8]
 8003a0e:	0211      	lsls	r1, r2, #8
 8003a10:	687a      	ldr	r2, [r7, #4]
 8003a12:	6912      	ldr	r2, [r2, #16]
 8003a14:	0852      	lsrs	r2, r2, #1
 8003a16:	3a01      	subs	r2, #1
 8003a18:	0552      	lsls	r2, r2, #21
 8003a1a:	430a      	orrs	r2, r1
 8003a1c:	491f      	ldr	r1, [pc, #124]	@ (8003a9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	610b      	str	r3, [r1, #16]
 8003a22:	e011      	b.n	8003a48 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003a24:	4b1d      	ldr	r3, [pc, #116]	@ (8003a9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a26:	691b      	ldr	r3, [r3, #16]
 8003a28:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003a2c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003a30:	687a      	ldr	r2, [r7, #4]
 8003a32:	6892      	ldr	r2, [r2, #8]
 8003a34:	0211      	lsls	r1, r2, #8
 8003a36:	687a      	ldr	r2, [r7, #4]
 8003a38:	6952      	ldr	r2, [r2, #20]
 8003a3a:	0852      	lsrs	r2, r2, #1
 8003a3c:	3a01      	subs	r2, #1
 8003a3e:	0652      	lsls	r2, r2, #25
 8003a40:	430a      	orrs	r2, r1
 8003a42:	4916      	ldr	r1, [pc, #88]	@ (8003a9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a44:	4313      	orrs	r3, r2
 8003a46:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003a48:	4b14      	ldr	r3, [pc, #80]	@ (8003a9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a13      	ldr	r2, [pc, #76]	@ (8003a9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a4e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003a52:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a54:	f7fd fb1e 	bl	8001094 <HAL_GetTick>
 8003a58:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003a5a:	e009      	b.n	8003a70 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003a5c:	f7fd fb1a 	bl	8001094 <HAL_GetTick>
 8003a60:	4602      	mov	r2, r0
 8003a62:	68bb      	ldr	r3, [r7, #8]
 8003a64:	1ad3      	subs	r3, r2, r3
 8003a66:	2b02      	cmp	r3, #2
 8003a68:	d902      	bls.n	8003a70 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003a6a:	2303      	movs	r3, #3
 8003a6c:	73fb      	strb	r3, [r7, #15]
          break;
 8003a6e:	e005      	b.n	8003a7c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003a70:	4b0a      	ldr	r3, [pc, #40]	@ (8003a9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d0ef      	beq.n	8003a5c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003a7c:	7bfb      	ldrb	r3, [r7, #15]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d106      	bne.n	8003a90 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003a82:	4b06      	ldr	r3, [pc, #24]	@ (8003a9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a84:	691a      	ldr	r2, [r3, #16]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	699b      	ldr	r3, [r3, #24]
 8003a8a:	4904      	ldr	r1, [pc, #16]	@ (8003a9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003a90:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	3710      	adds	r7, #16
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}
 8003a9a:	bf00      	nop
 8003a9c:	40021000 	.word	0x40021000

08003aa0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b084      	sub	sp, #16
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
 8003aa8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003aae:	4b6a      	ldr	r3, [pc, #424]	@ (8003c58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ab0:	68db      	ldr	r3, [r3, #12]
 8003ab2:	f003 0303 	and.w	r3, r3, #3
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d018      	beq.n	8003aec <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003aba:	4b67      	ldr	r3, [pc, #412]	@ (8003c58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003abc:	68db      	ldr	r3, [r3, #12]
 8003abe:	f003 0203 	and.w	r2, r3, #3
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	429a      	cmp	r2, r3
 8003ac8:	d10d      	bne.n	8003ae6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
       ||
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d009      	beq.n	8003ae6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003ad2:	4b61      	ldr	r3, [pc, #388]	@ (8003c58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ad4:	68db      	ldr	r3, [r3, #12]
 8003ad6:	091b      	lsrs	r3, r3, #4
 8003ad8:	f003 0307 	and.w	r3, r3, #7
 8003adc:	1c5a      	adds	r2, r3, #1
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	685b      	ldr	r3, [r3, #4]
       ||
 8003ae2:	429a      	cmp	r2, r3
 8003ae4:	d047      	beq.n	8003b76 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	73fb      	strb	r3, [r7, #15]
 8003aea:	e044      	b.n	8003b76 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	2b03      	cmp	r3, #3
 8003af2:	d018      	beq.n	8003b26 <RCCEx_PLLSAI2_Config+0x86>
 8003af4:	2b03      	cmp	r3, #3
 8003af6:	d825      	bhi.n	8003b44 <RCCEx_PLLSAI2_Config+0xa4>
 8003af8:	2b01      	cmp	r3, #1
 8003afa:	d002      	beq.n	8003b02 <RCCEx_PLLSAI2_Config+0x62>
 8003afc:	2b02      	cmp	r3, #2
 8003afe:	d009      	beq.n	8003b14 <RCCEx_PLLSAI2_Config+0x74>
 8003b00:	e020      	b.n	8003b44 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003b02:	4b55      	ldr	r3, [pc, #340]	@ (8003c58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f003 0302 	and.w	r3, r3, #2
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d11d      	bne.n	8003b4a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b12:	e01a      	b.n	8003b4a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003b14:	4b50      	ldr	r3, [pc, #320]	@ (8003c58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d116      	bne.n	8003b4e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003b20:	2301      	movs	r3, #1
 8003b22:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b24:	e013      	b.n	8003b4e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003b26:	4b4c      	ldr	r3, [pc, #304]	@ (8003c58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d10f      	bne.n	8003b52 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003b32:	4b49      	ldr	r3, [pc, #292]	@ (8003c58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d109      	bne.n	8003b52 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003b42:	e006      	b.n	8003b52 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003b44:	2301      	movs	r3, #1
 8003b46:	73fb      	strb	r3, [r7, #15]
      break;
 8003b48:	e004      	b.n	8003b54 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003b4a:	bf00      	nop
 8003b4c:	e002      	b.n	8003b54 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003b4e:	bf00      	nop
 8003b50:	e000      	b.n	8003b54 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003b52:	bf00      	nop
    }

    if(status == HAL_OK)
 8003b54:	7bfb      	ldrb	r3, [r7, #15]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d10d      	bne.n	8003b76 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003b5a:	4b3f      	ldr	r3, [pc, #252]	@ (8003c58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b5c:	68db      	ldr	r3, [r3, #12]
 8003b5e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6819      	ldr	r1, [r3, #0]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	3b01      	subs	r3, #1
 8003b6c:	011b      	lsls	r3, r3, #4
 8003b6e:	430b      	orrs	r3, r1
 8003b70:	4939      	ldr	r1, [pc, #228]	@ (8003c58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b72:	4313      	orrs	r3, r2
 8003b74:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003b76:	7bfb      	ldrb	r3, [r7, #15]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d167      	bne.n	8003c4c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003b7c:	4b36      	ldr	r3, [pc, #216]	@ (8003c58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a35      	ldr	r2, [pc, #212]	@ (8003c58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b82:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b86:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b88:	f7fd fa84 	bl	8001094 <HAL_GetTick>
 8003b8c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003b8e:	e009      	b.n	8003ba4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003b90:	f7fd fa80 	bl	8001094 <HAL_GetTick>
 8003b94:	4602      	mov	r2, r0
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	1ad3      	subs	r3, r2, r3
 8003b9a:	2b02      	cmp	r3, #2
 8003b9c:	d902      	bls.n	8003ba4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003b9e:	2303      	movs	r3, #3
 8003ba0:	73fb      	strb	r3, [r7, #15]
        break;
 8003ba2:	e005      	b.n	8003bb0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003ba4:	4b2c      	ldr	r3, [pc, #176]	@ (8003c58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d1ef      	bne.n	8003b90 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003bb0:	7bfb      	ldrb	r3, [r7, #15]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d14a      	bne.n	8003c4c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d111      	bne.n	8003be0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003bbc:	4b26      	ldr	r3, [pc, #152]	@ (8003c58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bbe:	695b      	ldr	r3, [r3, #20]
 8003bc0:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003bc4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003bc8:	687a      	ldr	r2, [r7, #4]
 8003bca:	6892      	ldr	r2, [r2, #8]
 8003bcc:	0211      	lsls	r1, r2, #8
 8003bce:	687a      	ldr	r2, [r7, #4]
 8003bd0:	68d2      	ldr	r2, [r2, #12]
 8003bd2:	0912      	lsrs	r2, r2, #4
 8003bd4:	0452      	lsls	r2, r2, #17
 8003bd6:	430a      	orrs	r2, r1
 8003bd8:	491f      	ldr	r1, [pc, #124]	@ (8003c58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	614b      	str	r3, [r1, #20]
 8003bde:	e011      	b.n	8003c04 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003be0:	4b1d      	ldr	r3, [pc, #116]	@ (8003c58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003be2:	695b      	ldr	r3, [r3, #20]
 8003be4:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003be8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003bec:	687a      	ldr	r2, [r7, #4]
 8003bee:	6892      	ldr	r2, [r2, #8]
 8003bf0:	0211      	lsls	r1, r2, #8
 8003bf2:	687a      	ldr	r2, [r7, #4]
 8003bf4:	6912      	ldr	r2, [r2, #16]
 8003bf6:	0852      	lsrs	r2, r2, #1
 8003bf8:	3a01      	subs	r2, #1
 8003bfa:	0652      	lsls	r2, r2, #25
 8003bfc:	430a      	orrs	r2, r1
 8003bfe:	4916      	ldr	r1, [pc, #88]	@ (8003c58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c00:	4313      	orrs	r3, r2
 8003c02:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003c04:	4b14      	ldr	r3, [pc, #80]	@ (8003c58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a13      	ldr	r2, [pc, #76]	@ (8003c58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c0a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c0e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c10:	f7fd fa40 	bl	8001094 <HAL_GetTick>
 8003c14:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003c16:	e009      	b.n	8003c2c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003c18:	f7fd fa3c 	bl	8001094 <HAL_GetTick>
 8003c1c:	4602      	mov	r2, r0
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	1ad3      	subs	r3, r2, r3
 8003c22:	2b02      	cmp	r3, #2
 8003c24:	d902      	bls.n	8003c2c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003c26:	2303      	movs	r3, #3
 8003c28:	73fb      	strb	r3, [r7, #15]
          break;
 8003c2a:	e005      	b.n	8003c38 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003c2c:	4b0a      	ldr	r3, [pc, #40]	@ (8003c58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d0ef      	beq.n	8003c18 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003c38:	7bfb      	ldrb	r3, [r7, #15]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d106      	bne.n	8003c4c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003c3e:	4b06      	ldr	r3, [pc, #24]	@ (8003c58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c40:	695a      	ldr	r2, [r3, #20]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	695b      	ldr	r3, [r3, #20]
 8003c46:	4904      	ldr	r1, [pc, #16]	@ (8003c58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003c4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c4e:	4618      	mov	r0, r3
 8003c50:	3710      	adds	r7, #16
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}
 8003c56:	bf00      	nop
 8003c58:	40021000 	.word	0x40021000

08003c5c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b082      	sub	sp, #8
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d101      	bne.n	8003c6e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	e049      	b.n	8003d02 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c74:	b2db      	uxtb	r3, r3
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d106      	bne.n	8003c88 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	f7fd f836 	bl	8000cf4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2202      	movs	r2, #2
 8003c8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681a      	ldr	r2, [r3, #0]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	3304      	adds	r3, #4
 8003c98:	4619      	mov	r1, r3
 8003c9a:	4610      	mov	r0, r2
 8003c9c:	f000 f9d6 	bl	800404c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2201      	movs	r2, #1
 8003cac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2201      	movs	r2, #1
 8003cbc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2201      	movs	r2, #1
 8003cc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2201      	movs	r2, #1
 8003ccc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2201      	movs	r2, #1
 8003cdc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2201      	movs	r2, #1
 8003cec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2201      	movs	r2, #1
 8003cfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003d00:	2300      	movs	r3, #0
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	3708      	adds	r7, #8
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}
	...

08003d0c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b085      	sub	sp, #20
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d1a:	b2db      	uxtb	r3, r3
 8003d1c:	2b01      	cmp	r3, #1
 8003d1e:	d001      	beq.n	8003d24 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003d20:	2301      	movs	r3, #1
 8003d22:	e04f      	b.n	8003dc4 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2202      	movs	r2, #2
 8003d28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	68da      	ldr	r2, [r3, #12]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f042 0201 	orr.w	r2, r2, #1
 8003d3a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a23      	ldr	r2, [pc, #140]	@ (8003dd0 <HAL_TIM_Base_Start_IT+0xc4>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d01d      	beq.n	8003d82 <HAL_TIM_Base_Start_IT+0x76>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d4e:	d018      	beq.n	8003d82 <HAL_TIM_Base_Start_IT+0x76>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a1f      	ldr	r2, [pc, #124]	@ (8003dd4 <HAL_TIM_Base_Start_IT+0xc8>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d013      	beq.n	8003d82 <HAL_TIM_Base_Start_IT+0x76>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a1e      	ldr	r2, [pc, #120]	@ (8003dd8 <HAL_TIM_Base_Start_IT+0xcc>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d00e      	beq.n	8003d82 <HAL_TIM_Base_Start_IT+0x76>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a1c      	ldr	r2, [pc, #112]	@ (8003ddc <HAL_TIM_Base_Start_IT+0xd0>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d009      	beq.n	8003d82 <HAL_TIM_Base_Start_IT+0x76>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a1b      	ldr	r2, [pc, #108]	@ (8003de0 <HAL_TIM_Base_Start_IT+0xd4>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d004      	beq.n	8003d82 <HAL_TIM_Base_Start_IT+0x76>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a19      	ldr	r2, [pc, #100]	@ (8003de4 <HAL_TIM_Base_Start_IT+0xd8>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d115      	bne.n	8003dae <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	689a      	ldr	r2, [r3, #8]
 8003d88:	4b17      	ldr	r3, [pc, #92]	@ (8003de8 <HAL_TIM_Base_Start_IT+0xdc>)
 8003d8a:	4013      	ands	r3, r2
 8003d8c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	2b06      	cmp	r3, #6
 8003d92:	d015      	beq.n	8003dc0 <HAL_TIM_Base_Start_IT+0xb4>
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d9a:	d011      	beq.n	8003dc0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	681a      	ldr	r2, [r3, #0]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f042 0201 	orr.w	r2, r2, #1
 8003daa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dac:	e008      	b.n	8003dc0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	681a      	ldr	r2, [r3, #0]
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f042 0201 	orr.w	r2, r2, #1
 8003dbc:	601a      	str	r2, [r3, #0]
 8003dbe:	e000      	b.n	8003dc2 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dc0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003dc2:	2300      	movs	r3, #0
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	3714      	adds	r7, #20
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dce:	4770      	bx	lr
 8003dd0:	40012c00 	.word	0x40012c00
 8003dd4:	40000400 	.word	0x40000400
 8003dd8:	40000800 	.word	0x40000800
 8003ddc:	40000c00 	.word	0x40000c00
 8003de0:	40013400 	.word	0x40013400
 8003de4:	40014000 	.word	0x40014000
 8003de8:	00010007 	.word	0x00010007

08003dec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b084      	sub	sp, #16
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	68db      	ldr	r3, [r3, #12]
 8003dfa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	691b      	ldr	r3, [r3, #16]
 8003e02:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	f003 0302 	and.w	r3, r3, #2
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d020      	beq.n	8003e50 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	f003 0302 	and.w	r3, r3, #2
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d01b      	beq.n	8003e50 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f06f 0202 	mvn.w	r2, #2
 8003e20:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2201      	movs	r2, #1
 8003e26:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	699b      	ldr	r3, [r3, #24]
 8003e2e:	f003 0303 	and.w	r3, r3, #3
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d003      	beq.n	8003e3e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003e36:	6878      	ldr	r0, [r7, #4]
 8003e38:	f000 f8e9 	bl	800400e <HAL_TIM_IC_CaptureCallback>
 8003e3c:	e005      	b.n	8003e4a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e3e:	6878      	ldr	r0, [r7, #4]
 8003e40:	f000 f8db 	bl	8003ffa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e44:	6878      	ldr	r0, [r7, #4]
 8003e46:	f000 f8ec 	bl	8004022 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	f003 0304 	and.w	r3, r3, #4
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d020      	beq.n	8003e9c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	f003 0304 	and.w	r3, r3, #4
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d01b      	beq.n	8003e9c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f06f 0204 	mvn.w	r2, #4
 8003e6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2202      	movs	r2, #2
 8003e72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	699b      	ldr	r3, [r3, #24]
 8003e7a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d003      	beq.n	8003e8a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	f000 f8c3 	bl	800400e <HAL_TIM_IC_CaptureCallback>
 8003e88:	e005      	b.n	8003e96 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	f000 f8b5 	bl	8003ffa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e90:	6878      	ldr	r0, [r7, #4]
 8003e92:	f000 f8c6 	bl	8004022 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	f003 0308 	and.w	r3, r3, #8
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d020      	beq.n	8003ee8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	f003 0308 	and.w	r3, r3, #8
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d01b      	beq.n	8003ee8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f06f 0208 	mvn.w	r2, #8
 8003eb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2204      	movs	r2, #4
 8003ebe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	69db      	ldr	r3, [r3, #28]
 8003ec6:	f003 0303 	and.w	r3, r3, #3
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d003      	beq.n	8003ed6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ece:	6878      	ldr	r0, [r7, #4]
 8003ed0:	f000 f89d 	bl	800400e <HAL_TIM_IC_CaptureCallback>
 8003ed4:	e005      	b.n	8003ee2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ed6:	6878      	ldr	r0, [r7, #4]
 8003ed8:	f000 f88f 	bl	8003ffa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003edc:	6878      	ldr	r0, [r7, #4]
 8003ede:	f000 f8a0 	bl	8004022 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	f003 0310 	and.w	r3, r3, #16
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d020      	beq.n	8003f34 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	f003 0310 	and.w	r3, r3, #16
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d01b      	beq.n	8003f34 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f06f 0210 	mvn.w	r2, #16
 8003f04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2208      	movs	r2, #8
 8003f0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	69db      	ldr	r3, [r3, #28]
 8003f12:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d003      	beq.n	8003f22 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f1a:	6878      	ldr	r0, [r7, #4]
 8003f1c:	f000 f877 	bl	800400e <HAL_TIM_IC_CaptureCallback>
 8003f20:	e005      	b.n	8003f2e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f22:	6878      	ldr	r0, [r7, #4]
 8003f24:	f000 f869 	bl	8003ffa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f28:	6878      	ldr	r0, [r7, #4]
 8003f2a:	f000 f87a 	bl	8004022 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2200      	movs	r2, #0
 8003f32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	f003 0301 	and.w	r3, r3, #1
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d00c      	beq.n	8003f58 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	f003 0301 	and.w	r3, r3, #1
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d007      	beq.n	8003f58 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f06f 0201 	mvn.w	r2, #1
 8003f50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	f7fc fdea 	bl	8000b2c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d104      	bne.n	8003f6c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8003f62:	68bb      	ldr	r3, [r7, #8]
 8003f64:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d00c      	beq.n	8003f86 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d007      	beq.n	8003f86 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8003f7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003f80:	6878      	ldr	r0, [r7, #4]
 8003f82:	f000 f913 	bl	80041ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d00c      	beq.n	8003faa <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d007      	beq.n	8003faa <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003fa2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003fa4:	6878      	ldr	r0, [r7, #4]
 8003fa6:	f000 f90b 	bl	80041c0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003faa:	68bb      	ldr	r3, [r7, #8]
 8003fac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d00c      	beq.n	8003fce <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d007      	beq.n	8003fce <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003fc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003fc8:	6878      	ldr	r0, [r7, #4]
 8003fca:	f000 f834 	bl	8004036 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	f003 0320 	and.w	r3, r3, #32
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d00c      	beq.n	8003ff2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	f003 0320 	and.w	r3, r3, #32
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d007      	beq.n	8003ff2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f06f 0220 	mvn.w	r2, #32
 8003fea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003fec:	6878      	ldr	r0, [r7, #4]
 8003fee:	f000 f8d3 	bl	8004198 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003ff2:	bf00      	nop
 8003ff4:	3710      	adds	r7, #16
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}

08003ffa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ffa:	b480      	push	{r7}
 8003ffc:	b083      	sub	sp, #12
 8003ffe:	af00      	add	r7, sp, #0
 8004000:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004002:	bf00      	nop
 8004004:	370c      	adds	r7, #12
 8004006:	46bd      	mov	sp, r7
 8004008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400c:	4770      	bx	lr

0800400e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800400e:	b480      	push	{r7}
 8004010:	b083      	sub	sp, #12
 8004012:	af00      	add	r7, sp, #0
 8004014:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004016:	bf00      	nop
 8004018:	370c      	adds	r7, #12
 800401a:	46bd      	mov	sp, r7
 800401c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004020:	4770      	bx	lr

08004022 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004022:	b480      	push	{r7}
 8004024:	b083      	sub	sp, #12
 8004026:	af00      	add	r7, sp, #0
 8004028:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800402a:	bf00      	nop
 800402c:	370c      	adds	r7, #12
 800402e:	46bd      	mov	sp, r7
 8004030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004034:	4770      	bx	lr

08004036 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004036:	b480      	push	{r7}
 8004038:	b083      	sub	sp, #12
 800403a:	af00      	add	r7, sp, #0
 800403c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800403e:	bf00      	nop
 8004040:	370c      	adds	r7, #12
 8004042:	46bd      	mov	sp, r7
 8004044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004048:	4770      	bx	lr
	...

0800404c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800404c:	b480      	push	{r7}
 800404e:	b085      	sub	sp, #20
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
 8004054:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	4a46      	ldr	r2, [pc, #280]	@ (8004178 <TIM_Base_SetConfig+0x12c>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d013      	beq.n	800408c <TIM_Base_SetConfig+0x40>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800406a:	d00f      	beq.n	800408c <TIM_Base_SetConfig+0x40>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	4a43      	ldr	r2, [pc, #268]	@ (800417c <TIM_Base_SetConfig+0x130>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d00b      	beq.n	800408c <TIM_Base_SetConfig+0x40>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	4a42      	ldr	r2, [pc, #264]	@ (8004180 <TIM_Base_SetConfig+0x134>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d007      	beq.n	800408c <TIM_Base_SetConfig+0x40>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	4a41      	ldr	r2, [pc, #260]	@ (8004184 <TIM_Base_SetConfig+0x138>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d003      	beq.n	800408c <TIM_Base_SetConfig+0x40>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	4a40      	ldr	r2, [pc, #256]	@ (8004188 <TIM_Base_SetConfig+0x13c>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d108      	bne.n	800409e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004092:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	68fa      	ldr	r2, [r7, #12]
 800409a:	4313      	orrs	r3, r2
 800409c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	4a35      	ldr	r2, [pc, #212]	@ (8004178 <TIM_Base_SetConfig+0x12c>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d01f      	beq.n	80040e6 <TIM_Base_SetConfig+0x9a>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040ac:	d01b      	beq.n	80040e6 <TIM_Base_SetConfig+0x9a>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	4a32      	ldr	r2, [pc, #200]	@ (800417c <TIM_Base_SetConfig+0x130>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d017      	beq.n	80040e6 <TIM_Base_SetConfig+0x9a>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	4a31      	ldr	r2, [pc, #196]	@ (8004180 <TIM_Base_SetConfig+0x134>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d013      	beq.n	80040e6 <TIM_Base_SetConfig+0x9a>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	4a30      	ldr	r2, [pc, #192]	@ (8004184 <TIM_Base_SetConfig+0x138>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d00f      	beq.n	80040e6 <TIM_Base_SetConfig+0x9a>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	4a2f      	ldr	r2, [pc, #188]	@ (8004188 <TIM_Base_SetConfig+0x13c>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d00b      	beq.n	80040e6 <TIM_Base_SetConfig+0x9a>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	4a2e      	ldr	r2, [pc, #184]	@ (800418c <TIM_Base_SetConfig+0x140>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d007      	beq.n	80040e6 <TIM_Base_SetConfig+0x9a>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	4a2d      	ldr	r2, [pc, #180]	@ (8004190 <TIM_Base_SetConfig+0x144>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d003      	beq.n	80040e6 <TIM_Base_SetConfig+0x9a>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	4a2c      	ldr	r2, [pc, #176]	@ (8004194 <TIM_Base_SetConfig+0x148>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d108      	bne.n	80040f8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80040ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	68db      	ldr	r3, [r3, #12]
 80040f2:	68fa      	ldr	r2, [r7, #12]
 80040f4:	4313      	orrs	r3, r2
 80040f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	695b      	ldr	r3, [r3, #20]
 8004102:	4313      	orrs	r3, r2
 8004104:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	68fa      	ldr	r2, [r7, #12]
 800410a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	689a      	ldr	r2, [r3, #8]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	681a      	ldr	r2, [r3, #0]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	4a16      	ldr	r2, [pc, #88]	@ (8004178 <TIM_Base_SetConfig+0x12c>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d00f      	beq.n	8004144 <TIM_Base_SetConfig+0xf8>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	4a18      	ldr	r2, [pc, #96]	@ (8004188 <TIM_Base_SetConfig+0x13c>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d00b      	beq.n	8004144 <TIM_Base_SetConfig+0xf8>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	4a17      	ldr	r2, [pc, #92]	@ (800418c <TIM_Base_SetConfig+0x140>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d007      	beq.n	8004144 <TIM_Base_SetConfig+0xf8>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	4a16      	ldr	r2, [pc, #88]	@ (8004190 <TIM_Base_SetConfig+0x144>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d003      	beq.n	8004144 <TIM_Base_SetConfig+0xf8>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	4a15      	ldr	r2, [pc, #84]	@ (8004194 <TIM_Base_SetConfig+0x148>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d103      	bne.n	800414c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	691a      	ldr	r2, [r3, #16]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2201      	movs	r2, #1
 8004150:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	691b      	ldr	r3, [r3, #16]
 8004156:	f003 0301 	and.w	r3, r3, #1
 800415a:	2b01      	cmp	r3, #1
 800415c:	d105      	bne.n	800416a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	691b      	ldr	r3, [r3, #16]
 8004162:	f023 0201 	bic.w	r2, r3, #1
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	611a      	str	r2, [r3, #16]
  }
}
 800416a:	bf00      	nop
 800416c:	3714      	adds	r7, #20
 800416e:	46bd      	mov	sp, r7
 8004170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004174:	4770      	bx	lr
 8004176:	bf00      	nop
 8004178:	40012c00 	.word	0x40012c00
 800417c:	40000400 	.word	0x40000400
 8004180:	40000800 	.word	0x40000800
 8004184:	40000c00 	.word	0x40000c00
 8004188:	40013400 	.word	0x40013400
 800418c:	40014000 	.word	0x40014000
 8004190:	40014400 	.word	0x40014400
 8004194:	40014800 	.word	0x40014800

08004198 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004198:	b480      	push	{r7}
 800419a:	b083      	sub	sp, #12
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80041a0:	bf00      	nop
 80041a2:	370c      	adds	r7, #12
 80041a4:	46bd      	mov	sp, r7
 80041a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041aa:	4770      	bx	lr

080041ac <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80041ac:	b480      	push	{r7}
 80041ae:	b083      	sub	sp, #12
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80041b4:	bf00      	nop
 80041b6:	370c      	adds	r7, #12
 80041b8:	46bd      	mov	sp, r7
 80041ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041be:	4770      	bx	lr

080041c0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b083      	sub	sp, #12
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80041c8:	bf00      	nop
 80041ca:	370c      	adds	r7, #12
 80041cc:	46bd      	mov	sp, r7
 80041ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d2:	4770      	bx	lr

080041d4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b082      	sub	sp, #8
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d101      	bne.n	80041e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80041e2:	2301      	movs	r3, #1
 80041e4:	e040      	b.n	8004268 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d106      	bne.n	80041fc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2200      	movs	r2, #0
 80041f2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80041f6:	6878      	ldr	r0, [r7, #4]
 80041f8:	f7fc fdbe 	bl	8000d78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2224      	movs	r2, #36	@ 0x24
 8004200:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	681a      	ldr	r2, [r3, #0]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f022 0201 	bic.w	r2, r2, #1
 8004210:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004216:	2b00      	cmp	r3, #0
 8004218:	d002      	beq.n	8004220 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800421a:	6878      	ldr	r0, [r7, #4]
 800421c:	f000 fae0 	bl	80047e0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004220:	6878      	ldr	r0, [r7, #4]
 8004222:	f000 f825 	bl	8004270 <UART_SetConfig>
 8004226:	4603      	mov	r3, r0
 8004228:	2b01      	cmp	r3, #1
 800422a:	d101      	bne.n	8004230 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800422c:	2301      	movs	r3, #1
 800422e:	e01b      	b.n	8004268 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	685a      	ldr	r2, [r3, #4]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800423e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	689a      	ldr	r2, [r3, #8]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800424e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	681a      	ldr	r2, [r3, #0]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f042 0201 	orr.w	r2, r2, #1
 800425e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004260:	6878      	ldr	r0, [r7, #4]
 8004262:	f000 fb5f 	bl	8004924 <UART_CheckIdleState>
 8004266:	4603      	mov	r3, r0
}
 8004268:	4618      	mov	r0, r3
 800426a:	3708      	adds	r7, #8
 800426c:	46bd      	mov	sp, r7
 800426e:	bd80      	pop	{r7, pc}

08004270 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004270:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004274:	b08a      	sub	sp, #40	@ 0x28
 8004276:	af00      	add	r7, sp, #0
 8004278:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800427a:	2300      	movs	r3, #0
 800427c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	689a      	ldr	r2, [r3, #8]
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	691b      	ldr	r3, [r3, #16]
 8004288:	431a      	orrs	r2, r3
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	695b      	ldr	r3, [r3, #20]
 800428e:	431a      	orrs	r2, r3
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	69db      	ldr	r3, [r3, #28]
 8004294:	4313      	orrs	r3, r2
 8004296:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	681a      	ldr	r2, [r3, #0]
 800429e:	4ba4      	ldr	r3, [pc, #656]	@ (8004530 <UART_SetConfig+0x2c0>)
 80042a0:	4013      	ands	r3, r2
 80042a2:	68fa      	ldr	r2, [r7, #12]
 80042a4:	6812      	ldr	r2, [r2, #0]
 80042a6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80042a8:	430b      	orrs	r3, r1
 80042aa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	68da      	ldr	r2, [r3, #12]
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	430a      	orrs	r2, r1
 80042c0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	699b      	ldr	r3, [r3, #24]
 80042c6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a99      	ldr	r2, [pc, #612]	@ (8004534 <UART_SetConfig+0x2c4>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d004      	beq.n	80042dc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	6a1b      	ldr	r3, [r3, #32]
 80042d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042d8:	4313      	orrs	r3, r2
 80042da:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	689b      	ldr	r3, [r3, #8]
 80042e2:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042ec:	430a      	orrs	r2, r1
 80042ee:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a90      	ldr	r2, [pc, #576]	@ (8004538 <UART_SetConfig+0x2c8>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d126      	bne.n	8004348 <UART_SetConfig+0xd8>
 80042fa:	4b90      	ldr	r3, [pc, #576]	@ (800453c <UART_SetConfig+0x2cc>)
 80042fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004300:	f003 0303 	and.w	r3, r3, #3
 8004304:	2b03      	cmp	r3, #3
 8004306:	d81b      	bhi.n	8004340 <UART_SetConfig+0xd0>
 8004308:	a201      	add	r2, pc, #4	@ (adr r2, 8004310 <UART_SetConfig+0xa0>)
 800430a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800430e:	bf00      	nop
 8004310:	08004321 	.word	0x08004321
 8004314:	08004331 	.word	0x08004331
 8004318:	08004329 	.word	0x08004329
 800431c:	08004339 	.word	0x08004339
 8004320:	2301      	movs	r3, #1
 8004322:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004326:	e116      	b.n	8004556 <UART_SetConfig+0x2e6>
 8004328:	2302      	movs	r3, #2
 800432a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800432e:	e112      	b.n	8004556 <UART_SetConfig+0x2e6>
 8004330:	2304      	movs	r3, #4
 8004332:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004336:	e10e      	b.n	8004556 <UART_SetConfig+0x2e6>
 8004338:	2308      	movs	r3, #8
 800433a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800433e:	e10a      	b.n	8004556 <UART_SetConfig+0x2e6>
 8004340:	2310      	movs	r3, #16
 8004342:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004346:	e106      	b.n	8004556 <UART_SetConfig+0x2e6>
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a7c      	ldr	r2, [pc, #496]	@ (8004540 <UART_SetConfig+0x2d0>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d138      	bne.n	80043c4 <UART_SetConfig+0x154>
 8004352:	4b7a      	ldr	r3, [pc, #488]	@ (800453c <UART_SetConfig+0x2cc>)
 8004354:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004358:	f003 030c 	and.w	r3, r3, #12
 800435c:	2b0c      	cmp	r3, #12
 800435e:	d82d      	bhi.n	80043bc <UART_SetConfig+0x14c>
 8004360:	a201      	add	r2, pc, #4	@ (adr r2, 8004368 <UART_SetConfig+0xf8>)
 8004362:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004366:	bf00      	nop
 8004368:	0800439d 	.word	0x0800439d
 800436c:	080043bd 	.word	0x080043bd
 8004370:	080043bd 	.word	0x080043bd
 8004374:	080043bd 	.word	0x080043bd
 8004378:	080043ad 	.word	0x080043ad
 800437c:	080043bd 	.word	0x080043bd
 8004380:	080043bd 	.word	0x080043bd
 8004384:	080043bd 	.word	0x080043bd
 8004388:	080043a5 	.word	0x080043a5
 800438c:	080043bd 	.word	0x080043bd
 8004390:	080043bd 	.word	0x080043bd
 8004394:	080043bd 	.word	0x080043bd
 8004398:	080043b5 	.word	0x080043b5
 800439c:	2300      	movs	r3, #0
 800439e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80043a2:	e0d8      	b.n	8004556 <UART_SetConfig+0x2e6>
 80043a4:	2302      	movs	r3, #2
 80043a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80043aa:	e0d4      	b.n	8004556 <UART_SetConfig+0x2e6>
 80043ac:	2304      	movs	r3, #4
 80043ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80043b2:	e0d0      	b.n	8004556 <UART_SetConfig+0x2e6>
 80043b4:	2308      	movs	r3, #8
 80043b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80043ba:	e0cc      	b.n	8004556 <UART_SetConfig+0x2e6>
 80043bc:	2310      	movs	r3, #16
 80043be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80043c2:	e0c8      	b.n	8004556 <UART_SetConfig+0x2e6>
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a5e      	ldr	r2, [pc, #376]	@ (8004544 <UART_SetConfig+0x2d4>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d125      	bne.n	800441a <UART_SetConfig+0x1aa>
 80043ce:	4b5b      	ldr	r3, [pc, #364]	@ (800453c <UART_SetConfig+0x2cc>)
 80043d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043d4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80043d8:	2b30      	cmp	r3, #48	@ 0x30
 80043da:	d016      	beq.n	800440a <UART_SetConfig+0x19a>
 80043dc:	2b30      	cmp	r3, #48	@ 0x30
 80043de:	d818      	bhi.n	8004412 <UART_SetConfig+0x1a2>
 80043e0:	2b20      	cmp	r3, #32
 80043e2:	d00a      	beq.n	80043fa <UART_SetConfig+0x18a>
 80043e4:	2b20      	cmp	r3, #32
 80043e6:	d814      	bhi.n	8004412 <UART_SetConfig+0x1a2>
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d002      	beq.n	80043f2 <UART_SetConfig+0x182>
 80043ec:	2b10      	cmp	r3, #16
 80043ee:	d008      	beq.n	8004402 <UART_SetConfig+0x192>
 80043f0:	e00f      	b.n	8004412 <UART_SetConfig+0x1a2>
 80043f2:	2300      	movs	r3, #0
 80043f4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80043f8:	e0ad      	b.n	8004556 <UART_SetConfig+0x2e6>
 80043fa:	2302      	movs	r3, #2
 80043fc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004400:	e0a9      	b.n	8004556 <UART_SetConfig+0x2e6>
 8004402:	2304      	movs	r3, #4
 8004404:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004408:	e0a5      	b.n	8004556 <UART_SetConfig+0x2e6>
 800440a:	2308      	movs	r3, #8
 800440c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004410:	e0a1      	b.n	8004556 <UART_SetConfig+0x2e6>
 8004412:	2310      	movs	r3, #16
 8004414:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004418:	e09d      	b.n	8004556 <UART_SetConfig+0x2e6>
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4a4a      	ldr	r2, [pc, #296]	@ (8004548 <UART_SetConfig+0x2d8>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d125      	bne.n	8004470 <UART_SetConfig+0x200>
 8004424:	4b45      	ldr	r3, [pc, #276]	@ (800453c <UART_SetConfig+0x2cc>)
 8004426:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800442a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800442e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004430:	d016      	beq.n	8004460 <UART_SetConfig+0x1f0>
 8004432:	2bc0      	cmp	r3, #192	@ 0xc0
 8004434:	d818      	bhi.n	8004468 <UART_SetConfig+0x1f8>
 8004436:	2b80      	cmp	r3, #128	@ 0x80
 8004438:	d00a      	beq.n	8004450 <UART_SetConfig+0x1e0>
 800443a:	2b80      	cmp	r3, #128	@ 0x80
 800443c:	d814      	bhi.n	8004468 <UART_SetConfig+0x1f8>
 800443e:	2b00      	cmp	r3, #0
 8004440:	d002      	beq.n	8004448 <UART_SetConfig+0x1d8>
 8004442:	2b40      	cmp	r3, #64	@ 0x40
 8004444:	d008      	beq.n	8004458 <UART_SetConfig+0x1e8>
 8004446:	e00f      	b.n	8004468 <UART_SetConfig+0x1f8>
 8004448:	2300      	movs	r3, #0
 800444a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800444e:	e082      	b.n	8004556 <UART_SetConfig+0x2e6>
 8004450:	2302      	movs	r3, #2
 8004452:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004456:	e07e      	b.n	8004556 <UART_SetConfig+0x2e6>
 8004458:	2304      	movs	r3, #4
 800445a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800445e:	e07a      	b.n	8004556 <UART_SetConfig+0x2e6>
 8004460:	2308      	movs	r3, #8
 8004462:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004466:	e076      	b.n	8004556 <UART_SetConfig+0x2e6>
 8004468:	2310      	movs	r3, #16
 800446a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800446e:	e072      	b.n	8004556 <UART_SetConfig+0x2e6>
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4a35      	ldr	r2, [pc, #212]	@ (800454c <UART_SetConfig+0x2dc>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d12a      	bne.n	80044d0 <UART_SetConfig+0x260>
 800447a:	4b30      	ldr	r3, [pc, #192]	@ (800453c <UART_SetConfig+0x2cc>)
 800447c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004480:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004484:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004488:	d01a      	beq.n	80044c0 <UART_SetConfig+0x250>
 800448a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800448e:	d81b      	bhi.n	80044c8 <UART_SetConfig+0x258>
 8004490:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004494:	d00c      	beq.n	80044b0 <UART_SetConfig+0x240>
 8004496:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800449a:	d815      	bhi.n	80044c8 <UART_SetConfig+0x258>
 800449c:	2b00      	cmp	r3, #0
 800449e:	d003      	beq.n	80044a8 <UART_SetConfig+0x238>
 80044a0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80044a4:	d008      	beq.n	80044b8 <UART_SetConfig+0x248>
 80044a6:	e00f      	b.n	80044c8 <UART_SetConfig+0x258>
 80044a8:	2300      	movs	r3, #0
 80044aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80044ae:	e052      	b.n	8004556 <UART_SetConfig+0x2e6>
 80044b0:	2302      	movs	r3, #2
 80044b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80044b6:	e04e      	b.n	8004556 <UART_SetConfig+0x2e6>
 80044b8:	2304      	movs	r3, #4
 80044ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80044be:	e04a      	b.n	8004556 <UART_SetConfig+0x2e6>
 80044c0:	2308      	movs	r3, #8
 80044c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80044c6:	e046      	b.n	8004556 <UART_SetConfig+0x2e6>
 80044c8:	2310      	movs	r3, #16
 80044ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80044ce:	e042      	b.n	8004556 <UART_SetConfig+0x2e6>
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a17      	ldr	r2, [pc, #92]	@ (8004534 <UART_SetConfig+0x2c4>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d13a      	bne.n	8004550 <UART_SetConfig+0x2e0>
 80044da:	4b18      	ldr	r3, [pc, #96]	@ (800453c <UART_SetConfig+0x2cc>)
 80044dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044e0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80044e4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80044e8:	d01a      	beq.n	8004520 <UART_SetConfig+0x2b0>
 80044ea:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80044ee:	d81b      	bhi.n	8004528 <UART_SetConfig+0x2b8>
 80044f0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80044f4:	d00c      	beq.n	8004510 <UART_SetConfig+0x2a0>
 80044f6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80044fa:	d815      	bhi.n	8004528 <UART_SetConfig+0x2b8>
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d003      	beq.n	8004508 <UART_SetConfig+0x298>
 8004500:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004504:	d008      	beq.n	8004518 <UART_SetConfig+0x2a8>
 8004506:	e00f      	b.n	8004528 <UART_SetConfig+0x2b8>
 8004508:	2300      	movs	r3, #0
 800450a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800450e:	e022      	b.n	8004556 <UART_SetConfig+0x2e6>
 8004510:	2302      	movs	r3, #2
 8004512:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004516:	e01e      	b.n	8004556 <UART_SetConfig+0x2e6>
 8004518:	2304      	movs	r3, #4
 800451a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800451e:	e01a      	b.n	8004556 <UART_SetConfig+0x2e6>
 8004520:	2308      	movs	r3, #8
 8004522:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004526:	e016      	b.n	8004556 <UART_SetConfig+0x2e6>
 8004528:	2310      	movs	r3, #16
 800452a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800452e:	e012      	b.n	8004556 <UART_SetConfig+0x2e6>
 8004530:	efff69f3 	.word	0xefff69f3
 8004534:	40008000 	.word	0x40008000
 8004538:	40013800 	.word	0x40013800
 800453c:	40021000 	.word	0x40021000
 8004540:	40004400 	.word	0x40004400
 8004544:	40004800 	.word	0x40004800
 8004548:	40004c00 	.word	0x40004c00
 800454c:	40005000 	.word	0x40005000
 8004550:	2310      	movs	r3, #16
 8004552:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a9f      	ldr	r2, [pc, #636]	@ (80047d8 <UART_SetConfig+0x568>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d17a      	bne.n	8004656 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004560:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004564:	2b08      	cmp	r3, #8
 8004566:	d824      	bhi.n	80045b2 <UART_SetConfig+0x342>
 8004568:	a201      	add	r2, pc, #4	@ (adr r2, 8004570 <UART_SetConfig+0x300>)
 800456a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800456e:	bf00      	nop
 8004570:	08004595 	.word	0x08004595
 8004574:	080045b3 	.word	0x080045b3
 8004578:	0800459d 	.word	0x0800459d
 800457c:	080045b3 	.word	0x080045b3
 8004580:	080045a3 	.word	0x080045a3
 8004584:	080045b3 	.word	0x080045b3
 8004588:	080045b3 	.word	0x080045b3
 800458c:	080045b3 	.word	0x080045b3
 8004590:	080045ab 	.word	0x080045ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004594:	f7fe fde8 	bl	8003168 <HAL_RCC_GetPCLK1Freq>
 8004598:	61f8      	str	r0, [r7, #28]
        break;
 800459a:	e010      	b.n	80045be <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800459c:	4b8f      	ldr	r3, [pc, #572]	@ (80047dc <UART_SetConfig+0x56c>)
 800459e:	61fb      	str	r3, [r7, #28]
        break;
 80045a0:	e00d      	b.n	80045be <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80045a2:	f7fe fd49 	bl	8003038 <HAL_RCC_GetSysClockFreq>
 80045a6:	61f8      	str	r0, [r7, #28]
        break;
 80045a8:	e009      	b.n	80045be <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80045aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80045ae:	61fb      	str	r3, [r7, #28]
        break;
 80045b0:	e005      	b.n	80045be <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80045b2:	2300      	movs	r3, #0
 80045b4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80045b6:	2301      	movs	r3, #1
 80045b8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80045bc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80045be:	69fb      	ldr	r3, [r7, #28]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	f000 80fb 	beq.w	80047bc <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	685a      	ldr	r2, [r3, #4]
 80045ca:	4613      	mov	r3, r2
 80045cc:	005b      	lsls	r3, r3, #1
 80045ce:	4413      	add	r3, r2
 80045d0:	69fa      	ldr	r2, [r7, #28]
 80045d2:	429a      	cmp	r2, r3
 80045d4:	d305      	bcc.n	80045e2 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80045dc:	69fa      	ldr	r2, [r7, #28]
 80045de:	429a      	cmp	r2, r3
 80045e0:	d903      	bls.n	80045ea <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80045e2:	2301      	movs	r3, #1
 80045e4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80045e8:	e0e8      	b.n	80047bc <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80045ea:	69fb      	ldr	r3, [r7, #28]
 80045ec:	2200      	movs	r2, #0
 80045ee:	461c      	mov	r4, r3
 80045f0:	4615      	mov	r5, r2
 80045f2:	f04f 0200 	mov.w	r2, #0
 80045f6:	f04f 0300 	mov.w	r3, #0
 80045fa:	022b      	lsls	r3, r5, #8
 80045fc:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004600:	0222      	lsls	r2, r4, #8
 8004602:	68f9      	ldr	r1, [r7, #12]
 8004604:	6849      	ldr	r1, [r1, #4]
 8004606:	0849      	lsrs	r1, r1, #1
 8004608:	2000      	movs	r0, #0
 800460a:	4688      	mov	r8, r1
 800460c:	4681      	mov	r9, r0
 800460e:	eb12 0a08 	adds.w	sl, r2, r8
 8004612:	eb43 0b09 	adc.w	fp, r3, r9
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	2200      	movs	r2, #0
 800461c:	603b      	str	r3, [r7, #0]
 800461e:	607a      	str	r2, [r7, #4]
 8004620:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004624:	4650      	mov	r0, sl
 8004626:	4659      	mov	r1, fp
 8004628:	f7fb fdd2 	bl	80001d0 <__aeabi_uldivmod>
 800462c:	4602      	mov	r2, r0
 800462e:	460b      	mov	r3, r1
 8004630:	4613      	mov	r3, r2
 8004632:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004634:	69bb      	ldr	r3, [r7, #24]
 8004636:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800463a:	d308      	bcc.n	800464e <UART_SetConfig+0x3de>
 800463c:	69bb      	ldr	r3, [r7, #24]
 800463e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004642:	d204      	bcs.n	800464e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	69ba      	ldr	r2, [r7, #24]
 800464a:	60da      	str	r2, [r3, #12]
 800464c:	e0b6      	b.n	80047bc <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800464e:	2301      	movs	r3, #1
 8004650:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004654:	e0b2      	b.n	80047bc <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	69db      	ldr	r3, [r3, #28]
 800465a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800465e:	d15e      	bne.n	800471e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004660:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004664:	2b08      	cmp	r3, #8
 8004666:	d828      	bhi.n	80046ba <UART_SetConfig+0x44a>
 8004668:	a201      	add	r2, pc, #4	@ (adr r2, 8004670 <UART_SetConfig+0x400>)
 800466a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800466e:	bf00      	nop
 8004670:	08004695 	.word	0x08004695
 8004674:	0800469d 	.word	0x0800469d
 8004678:	080046a5 	.word	0x080046a5
 800467c:	080046bb 	.word	0x080046bb
 8004680:	080046ab 	.word	0x080046ab
 8004684:	080046bb 	.word	0x080046bb
 8004688:	080046bb 	.word	0x080046bb
 800468c:	080046bb 	.word	0x080046bb
 8004690:	080046b3 	.word	0x080046b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004694:	f7fe fd68 	bl	8003168 <HAL_RCC_GetPCLK1Freq>
 8004698:	61f8      	str	r0, [r7, #28]
        break;
 800469a:	e014      	b.n	80046c6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800469c:	f7fe fd7a 	bl	8003194 <HAL_RCC_GetPCLK2Freq>
 80046a0:	61f8      	str	r0, [r7, #28]
        break;
 80046a2:	e010      	b.n	80046c6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80046a4:	4b4d      	ldr	r3, [pc, #308]	@ (80047dc <UART_SetConfig+0x56c>)
 80046a6:	61fb      	str	r3, [r7, #28]
        break;
 80046a8:	e00d      	b.n	80046c6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80046aa:	f7fe fcc5 	bl	8003038 <HAL_RCC_GetSysClockFreq>
 80046ae:	61f8      	str	r0, [r7, #28]
        break;
 80046b0:	e009      	b.n	80046c6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80046b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80046b6:	61fb      	str	r3, [r7, #28]
        break;
 80046b8:	e005      	b.n	80046c6 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80046ba:	2300      	movs	r3, #0
 80046bc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80046be:	2301      	movs	r3, #1
 80046c0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80046c4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80046c6:	69fb      	ldr	r3, [r7, #28]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d077      	beq.n	80047bc <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80046cc:	69fb      	ldr	r3, [r7, #28]
 80046ce:	005a      	lsls	r2, r3, #1
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	085b      	lsrs	r3, r3, #1
 80046d6:	441a      	add	r2, r3
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80046e0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80046e2:	69bb      	ldr	r3, [r7, #24]
 80046e4:	2b0f      	cmp	r3, #15
 80046e6:	d916      	bls.n	8004716 <UART_SetConfig+0x4a6>
 80046e8:	69bb      	ldr	r3, [r7, #24]
 80046ea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80046ee:	d212      	bcs.n	8004716 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80046f0:	69bb      	ldr	r3, [r7, #24]
 80046f2:	b29b      	uxth	r3, r3
 80046f4:	f023 030f 	bic.w	r3, r3, #15
 80046f8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80046fa:	69bb      	ldr	r3, [r7, #24]
 80046fc:	085b      	lsrs	r3, r3, #1
 80046fe:	b29b      	uxth	r3, r3
 8004700:	f003 0307 	and.w	r3, r3, #7
 8004704:	b29a      	uxth	r2, r3
 8004706:	8afb      	ldrh	r3, [r7, #22]
 8004708:	4313      	orrs	r3, r2
 800470a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	8afa      	ldrh	r2, [r7, #22]
 8004712:	60da      	str	r2, [r3, #12]
 8004714:	e052      	b.n	80047bc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004716:	2301      	movs	r3, #1
 8004718:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800471c:	e04e      	b.n	80047bc <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800471e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004722:	2b08      	cmp	r3, #8
 8004724:	d827      	bhi.n	8004776 <UART_SetConfig+0x506>
 8004726:	a201      	add	r2, pc, #4	@ (adr r2, 800472c <UART_SetConfig+0x4bc>)
 8004728:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800472c:	08004751 	.word	0x08004751
 8004730:	08004759 	.word	0x08004759
 8004734:	08004761 	.word	0x08004761
 8004738:	08004777 	.word	0x08004777
 800473c:	08004767 	.word	0x08004767
 8004740:	08004777 	.word	0x08004777
 8004744:	08004777 	.word	0x08004777
 8004748:	08004777 	.word	0x08004777
 800474c:	0800476f 	.word	0x0800476f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004750:	f7fe fd0a 	bl	8003168 <HAL_RCC_GetPCLK1Freq>
 8004754:	61f8      	str	r0, [r7, #28]
        break;
 8004756:	e014      	b.n	8004782 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004758:	f7fe fd1c 	bl	8003194 <HAL_RCC_GetPCLK2Freq>
 800475c:	61f8      	str	r0, [r7, #28]
        break;
 800475e:	e010      	b.n	8004782 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004760:	4b1e      	ldr	r3, [pc, #120]	@ (80047dc <UART_SetConfig+0x56c>)
 8004762:	61fb      	str	r3, [r7, #28]
        break;
 8004764:	e00d      	b.n	8004782 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004766:	f7fe fc67 	bl	8003038 <HAL_RCC_GetSysClockFreq>
 800476a:	61f8      	str	r0, [r7, #28]
        break;
 800476c:	e009      	b.n	8004782 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800476e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004772:	61fb      	str	r3, [r7, #28]
        break;
 8004774:	e005      	b.n	8004782 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004776:	2300      	movs	r3, #0
 8004778:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800477a:	2301      	movs	r3, #1
 800477c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004780:	bf00      	nop
    }

    if (pclk != 0U)
 8004782:	69fb      	ldr	r3, [r7, #28]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d019      	beq.n	80047bc <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	085a      	lsrs	r2, r3, #1
 800478e:	69fb      	ldr	r3, [r7, #28]
 8004790:	441a      	add	r2, r3
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	fbb2 f3f3 	udiv	r3, r2, r3
 800479a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800479c:	69bb      	ldr	r3, [r7, #24]
 800479e:	2b0f      	cmp	r3, #15
 80047a0:	d909      	bls.n	80047b6 <UART_SetConfig+0x546>
 80047a2:	69bb      	ldr	r3, [r7, #24]
 80047a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80047a8:	d205      	bcs.n	80047b6 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80047aa:	69bb      	ldr	r3, [r7, #24]
 80047ac:	b29a      	uxth	r2, r3
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	60da      	str	r2, [r3, #12]
 80047b4:	e002      	b.n	80047bc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80047b6:	2301      	movs	r3, #1
 80047b8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	2200      	movs	r2, #0
 80047c0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	2200      	movs	r2, #0
 80047c6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80047c8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80047cc:	4618      	mov	r0, r3
 80047ce:	3728      	adds	r7, #40	@ 0x28
 80047d0:	46bd      	mov	sp, r7
 80047d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80047d6:	bf00      	nop
 80047d8:	40008000 	.word	0x40008000
 80047dc:	00f42400 	.word	0x00f42400

080047e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80047e0:	b480      	push	{r7}
 80047e2:	b083      	sub	sp, #12
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047ec:	f003 0308 	and.w	r3, r3, #8
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d00a      	beq.n	800480a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	430a      	orrs	r2, r1
 8004808:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800480e:	f003 0301 	and.w	r3, r3, #1
 8004812:	2b00      	cmp	r3, #0
 8004814:	d00a      	beq.n	800482c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	430a      	orrs	r2, r1
 800482a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004830:	f003 0302 	and.w	r3, r3, #2
 8004834:	2b00      	cmp	r3, #0
 8004836:	d00a      	beq.n	800484e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	430a      	orrs	r2, r1
 800484c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004852:	f003 0304 	and.w	r3, r3, #4
 8004856:	2b00      	cmp	r3, #0
 8004858:	d00a      	beq.n	8004870 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	430a      	orrs	r2, r1
 800486e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004874:	f003 0310 	and.w	r3, r3, #16
 8004878:	2b00      	cmp	r3, #0
 800487a:	d00a      	beq.n	8004892 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	689b      	ldr	r3, [r3, #8]
 8004882:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	430a      	orrs	r2, r1
 8004890:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004896:	f003 0320 	and.w	r3, r3, #32
 800489a:	2b00      	cmp	r3, #0
 800489c:	d00a      	beq.n	80048b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	689b      	ldr	r3, [r3, #8]
 80048a4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	430a      	orrs	r2, r1
 80048b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d01a      	beq.n	80048f6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	430a      	orrs	r2, r1
 80048d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048da:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80048de:	d10a      	bne.n	80048f6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	430a      	orrs	r2, r1
 80048f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d00a      	beq.n	8004918 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	430a      	orrs	r2, r1
 8004916:	605a      	str	r2, [r3, #4]
  }
}
 8004918:	bf00      	nop
 800491a:	370c      	adds	r7, #12
 800491c:	46bd      	mov	sp, r7
 800491e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004922:	4770      	bx	lr

08004924 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b098      	sub	sp, #96	@ 0x60
 8004928:	af02      	add	r7, sp, #8
 800492a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2200      	movs	r2, #0
 8004930:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004934:	f7fc fbae 	bl	8001094 <HAL_GetTick>
 8004938:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f003 0308 	and.w	r3, r3, #8
 8004944:	2b08      	cmp	r3, #8
 8004946:	d12e      	bne.n	80049a6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004948:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800494c:	9300      	str	r3, [sp, #0]
 800494e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004950:	2200      	movs	r2, #0
 8004952:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004956:	6878      	ldr	r0, [r7, #4]
 8004958:	f000 f88c 	bl	8004a74 <UART_WaitOnFlagUntilTimeout>
 800495c:	4603      	mov	r3, r0
 800495e:	2b00      	cmp	r3, #0
 8004960:	d021      	beq.n	80049a6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004968:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800496a:	e853 3f00 	ldrex	r3, [r3]
 800496e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004970:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004972:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004976:	653b      	str	r3, [r7, #80]	@ 0x50
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	461a      	mov	r2, r3
 800497e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004980:	647b      	str	r3, [r7, #68]	@ 0x44
 8004982:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004984:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004986:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004988:	e841 2300 	strex	r3, r2, [r1]
 800498c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800498e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004990:	2b00      	cmp	r3, #0
 8004992:	d1e6      	bne.n	8004962 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2220      	movs	r2, #32
 8004998:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2200      	movs	r2, #0
 800499e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80049a2:	2303      	movs	r3, #3
 80049a4:	e062      	b.n	8004a6c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f003 0304 	and.w	r3, r3, #4
 80049b0:	2b04      	cmp	r3, #4
 80049b2:	d149      	bne.n	8004a48 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80049b4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80049b8:	9300      	str	r3, [sp, #0]
 80049ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80049bc:	2200      	movs	r2, #0
 80049be:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80049c2:	6878      	ldr	r0, [r7, #4]
 80049c4:	f000 f856 	bl	8004a74 <UART_WaitOnFlagUntilTimeout>
 80049c8:	4603      	mov	r3, r0
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d03c      	beq.n	8004a48 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049d6:	e853 3f00 	ldrex	r3, [r3]
 80049da:	623b      	str	r3, [r7, #32]
   return(result);
 80049dc:	6a3b      	ldr	r3, [r7, #32]
 80049de:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80049e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	461a      	mov	r2, r3
 80049ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80049ec:	633b      	str	r3, [r7, #48]	@ 0x30
 80049ee:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049f0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80049f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80049f4:	e841 2300 	strex	r3, r2, [r1]
 80049f8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80049fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d1e6      	bne.n	80049ce <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	3308      	adds	r3, #8
 8004a06:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a08:	693b      	ldr	r3, [r7, #16]
 8004a0a:	e853 3f00 	ldrex	r3, [r3]
 8004a0e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	f023 0301 	bic.w	r3, r3, #1
 8004a16:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	3308      	adds	r3, #8
 8004a1e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004a20:	61fa      	str	r2, [r7, #28]
 8004a22:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a24:	69b9      	ldr	r1, [r7, #24]
 8004a26:	69fa      	ldr	r2, [r7, #28]
 8004a28:	e841 2300 	strex	r3, r2, [r1]
 8004a2c:	617b      	str	r3, [r7, #20]
   return(result);
 8004a2e:	697b      	ldr	r3, [r7, #20]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d1e5      	bne.n	8004a00 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2220      	movs	r2, #32
 8004a38:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2200      	movs	r2, #0
 8004a40:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004a44:	2303      	movs	r3, #3
 8004a46:	e011      	b.n	8004a6c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2220      	movs	r2, #32
 8004a4c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2220      	movs	r2, #32
 8004a52:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2200      	movs	r2, #0
 8004a5a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2200      	movs	r2, #0
 8004a66:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004a6a:	2300      	movs	r3, #0
}
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	3758      	adds	r7, #88	@ 0x58
 8004a70:	46bd      	mov	sp, r7
 8004a72:	bd80      	pop	{r7, pc}

08004a74 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b084      	sub	sp, #16
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	60f8      	str	r0, [r7, #12]
 8004a7c:	60b9      	str	r1, [r7, #8]
 8004a7e:	603b      	str	r3, [r7, #0]
 8004a80:	4613      	mov	r3, r2
 8004a82:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a84:	e04f      	b.n	8004b26 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a86:	69bb      	ldr	r3, [r7, #24]
 8004a88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a8c:	d04b      	beq.n	8004b26 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a8e:	f7fc fb01 	bl	8001094 <HAL_GetTick>
 8004a92:	4602      	mov	r2, r0
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	1ad3      	subs	r3, r2, r3
 8004a98:	69ba      	ldr	r2, [r7, #24]
 8004a9a:	429a      	cmp	r2, r3
 8004a9c:	d302      	bcc.n	8004aa4 <UART_WaitOnFlagUntilTimeout+0x30>
 8004a9e:	69bb      	ldr	r3, [r7, #24]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d101      	bne.n	8004aa8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004aa4:	2303      	movs	r3, #3
 8004aa6:	e04e      	b.n	8004b46 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f003 0304 	and.w	r3, r3, #4
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d037      	beq.n	8004b26 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004ab6:	68bb      	ldr	r3, [r7, #8]
 8004ab8:	2b80      	cmp	r3, #128	@ 0x80
 8004aba:	d034      	beq.n	8004b26 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004abc:	68bb      	ldr	r3, [r7, #8]
 8004abe:	2b40      	cmp	r3, #64	@ 0x40
 8004ac0:	d031      	beq.n	8004b26 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	69db      	ldr	r3, [r3, #28]
 8004ac8:	f003 0308 	and.w	r3, r3, #8
 8004acc:	2b08      	cmp	r3, #8
 8004ace:	d110      	bne.n	8004af2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	2208      	movs	r2, #8
 8004ad6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004ad8:	68f8      	ldr	r0, [r7, #12]
 8004ada:	f000 f838 	bl	8004b4e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	2208      	movs	r2, #8
 8004ae2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	2200      	movs	r2, #0
 8004aea:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004aee:	2301      	movs	r3, #1
 8004af0:	e029      	b.n	8004b46 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	69db      	ldr	r3, [r3, #28]
 8004af8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004afc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004b00:	d111      	bne.n	8004b26 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004b0a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004b0c:	68f8      	ldr	r0, [r7, #12]
 8004b0e:	f000 f81e 	bl	8004b4e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	2220      	movs	r2, #32
 8004b16:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004b22:	2303      	movs	r3, #3
 8004b24:	e00f      	b.n	8004b46 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	69da      	ldr	r2, [r3, #28]
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	4013      	ands	r3, r2
 8004b30:	68ba      	ldr	r2, [r7, #8]
 8004b32:	429a      	cmp	r2, r3
 8004b34:	bf0c      	ite	eq
 8004b36:	2301      	moveq	r3, #1
 8004b38:	2300      	movne	r3, #0
 8004b3a:	b2db      	uxtb	r3, r3
 8004b3c:	461a      	mov	r2, r3
 8004b3e:	79fb      	ldrb	r3, [r7, #7]
 8004b40:	429a      	cmp	r2, r3
 8004b42:	d0a0      	beq.n	8004a86 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004b44:	2300      	movs	r3, #0
}
 8004b46:	4618      	mov	r0, r3
 8004b48:	3710      	adds	r7, #16
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	bd80      	pop	{r7, pc}

08004b4e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004b4e:	b480      	push	{r7}
 8004b50:	b095      	sub	sp, #84	@ 0x54
 8004b52:	af00      	add	r7, sp, #0
 8004b54:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b5e:	e853 3f00 	ldrex	r3, [r3]
 8004b62:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004b64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b66:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004b6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	461a      	mov	r2, r3
 8004b72:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004b74:	643b      	str	r3, [r7, #64]	@ 0x40
 8004b76:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b78:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004b7a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004b7c:	e841 2300 	strex	r3, r2, [r1]
 8004b80:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004b82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d1e6      	bne.n	8004b56 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	3308      	adds	r3, #8
 8004b8e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b90:	6a3b      	ldr	r3, [r7, #32]
 8004b92:	e853 3f00 	ldrex	r3, [r3]
 8004b96:	61fb      	str	r3, [r7, #28]
   return(result);
 8004b98:	69fb      	ldr	r3, [r7, #28]
 8004b9a:	f023 0301 	bic.w	r3, r3, #1
 8004b9e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	3308      	adds	r3, #8
 8004ba6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004ba8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004baa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004bae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004bb0:	e841 2300 	strex	r3, r2, [r1]
 8004bb4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004bb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d1e5      	bne.n	8004b88 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004bc0:	2b01      	cmp	r3, #1
 8004bc2:	d118      	bne.n	8004bf6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	e853 3f00 	ldrex	r3, [r3]
 8004bd0:	60bb      	str	r3, [r7, #8]
   return(result);
 8004bd2:	68bb      	ldr	r3, [r7, #8]
 8004bd4:	f023 0310 	bic.w	r3, r3, #16
 8004bd8:	647b      	str	r3, [r7, #68]	@ 0x44
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	461a      	mov	r2, r3
 8004be0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004be2:	61bb      	str	r3, [r7, #24]
 8004be4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004be6:	6979      	ldr	r1, [r7, #20]
 8004be8:	69ba      	ldr	r2, [r7, #24]
 8004bea:	e841 2300 	strex	r3, r2, [r1]
 8004bee:	613b      	str	r3, [r7, #16]
   return(result);
 8004bf0:	693b      	ldr	r3, [r7, #16]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d1e6      	bne.n	8004bc4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2220      	movs	r2, #32
 8004bfa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2200      	movs	r2, #0
 8004c02:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2200      	movs	r2, #0
 8004c08:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004c0a:	bf00      	nop
 8004c0c:	3754      	adds	r7, #84	@ 0x54
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c14:	4770      	bx	lr
	...

08004c18 <__NVIC_SetPriority>:
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b083      	sub	sp, #12
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	4603      	mov	r3, r0
 8004c20:	6039      	str	r1, [r7, #0]
 8004c22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	db0a      	blt.n	8004c42 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	b2da      	uxtb	r2, r3
 8004c30:	490c      	ldr	r1, [pc, #48]	@ (8004c64 <__NVIC_SetPriority+0x4c>)
 8004c32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c36:	0112      	lsls	r2, r2, #4
 8004c38:	b2d2      	uxtb	r2, r2
 8004c3a:	440b      	add	r3, r1
 8004c3c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004c40:	e00a      	b.n	8004c58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	b2da      	uxtb	r2, r3
 8004c46:	4908      	ldr	r1, [pc, #32]	@ (8004c68 <__NVIC_SetPriority+0x50>)
 8004c48:	79fb      	ldrb	r3, [r7, #7]
 8004c4a:	f003 030f 	and.w	r3, r3, #15
 8004c4e:	3b04      	subs	r3, #4
 8004c50:	0112      	lsls	r2, r2, #4
 8004c52:	b2d2      	uxtb	r2, r2
 8004c54:	440b      	add	r3, r1
 8004c56:	761a      	strb	r2, [r3, #24]
}
 8004c58:	bf00      	nop
 8004c5a:	370c      	adds	r7, #12
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c62:	4770      	bx	lr
 8004c64:	e000e100 	.word	0xe000e100
 8004c68:	e000ed00 	.word	0xe000ed00

08004c6c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004c70:	4b05      	ldr	r3, [pc, #20]	@ (8004c88 <SysTick_Handler+0x1c>)
 8004c72:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004c74:	f001 fd46 	bl	8006704 <xTaskGetSchedulerState>
 8004c78:	4603      	mov	r3, r0
 8004c7a:	2b01      	cmp	r3, #1
 8004c7c:	d001      	beq.n	8004c82 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004c7e:	f002 fb3b 	bl	80072f8 <xPortSysTickHandler>
  }
}
 8004c82:	bf00      	nop
 8004c84:	bd80      	pop	{r7, pc}
 8004c86:	bf00      	nop
 8004c88:	e000e010 	.word	0xe000e010

08004c8c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004c90:	2100      	movs	r1, #0
 8004c92:	f06f 0004 	mvn.w	r0, #4
 8004c96:	f7ff ffbf 	bl	8004c18 <__NVIC_SetPriority>
#endif
}
 8004c9a:	bf00      	nop
 8004c9c:	bd80      	pop	{r7, pc}
	...

08004ca0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004ca0:	b480      	push	{r7}
 8004ca2:	b083      	sub	sp, #12
 8004ca4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004ca6:	f3ef 8305 	mrs	r3, IPSR
 8004caa:	603b      	str	r3, [r7, #0]
  return(result);
 8004cac:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d003      	beq.n	8004cba <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004cb2:	f06f 0305 	mvn.w	r3, #5
 8004cb6:	607b      	str	r3, [r7, #4]
 8004cb8:	e00c      	b.n	8004cd4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004cba:	4b0a      	ldr	r3, [pc, #40]	@ (8004ce4 <osKernelInitialize+0x44>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d105      	bne.n	8004cce <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004cc2:	4b08      	ldr	r3, [pc, #32]	@ (8004ce4 <osKernelInitialize+0x44>)
 8004cc4:	2201      	movs	r2, #1
 8004cc6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004cc8:	2300      	movs	r3, #0
 8004cca:	607b      	str	r3, [r7, #4]
 8004ccc:	e002      	b.n	8004cd4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004cce:	f04f 33ff 	mov.w	r3, #4294967295
 8004cd2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004cd4:	687b      	ldr	r3, [r7, #4]
}
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	370c      	adds	r7, #12
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce0:	4770      	bx	lr
 8004ce2:	bf00      	nop
 8004ce4:	2000027c 	.word	0x2000027c

08004ce8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b082      	sub	sp, #8
 8004cec:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004cee:	f3ef 8305 	mrs	r3, IPSR
 8004cf2:	603b      	str	r3, [r7, #0]
  return(result);
 8004cf4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d003      	beq.n	8004d02 <osKernelStart+0x1a>
    stat = osErrorISR;
 8004cfa:	f06f 0305 	mvn.w	r3, #5
 8004cfe:	607b      	str	r3, [r7, #4]
 8004d00:	e010      	b.n	8004d24 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004d02:	4b0b      	ldr	r3, [pc, #44]	@ (8004d30 <osKernelStart+0x48>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	2b01      	cmp	r3, #1
 8004d08:	d109      	bne.n	8004d1e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004d0a:	f7ff ffbf 	bl	8004c8c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004d0e:	4b08      	ldr	r3, [pc, #32]	@ (8004d30 <osKernelStart+0x48>)
 8004d10:	2202      	movs	r2, #2
 8004d12:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004d14:	f001 f892 	bl	8005e3c <vTaskStartScheduler>
      stat = osOK;
 8004d18:	2300      	movs	r3, #0
 8004d1a:	607b      	str	r3, [r7, #4]
 8004d1c:	e002      	b.n	8004d24 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004d1e:	f04f 33ff 	mov.w	r3, #4294967295
 8004d22:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004d24:	687b      	ldr	r3, [r7, #4]
}
 8004d26:	4618      	mov	r0, r3
 8004d28:	3708      	adds	r7, #8
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	bd80      	pop	{r7, pc}
 8004d2e:	bf00      	nop
 8004d30:	2000027c 	.word	0x2000027c

08004d34 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b08e      	sub	sp, #56	@ 0x38
 8004d38:	af04      	add	r7, sp, #16
 8004d3a:	60f8      	str	r0, [r7, #12]
 8004d3c:	60b9      	str	r1, [r7, #8]
 8004d3e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004d40:	2300      	movs	r3, #0
 8004d42:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004d44:	f3ef 8305 	mrs	r3, IPSR
 8004d48:	617b      	str	r3, [r7, #20]
  return(result);
 8004d4a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d17e      	bne.n	8004e4e <osThreadNew+0x11a>
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d07b      	beq.n	8004e4e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004d56:	2380      	movs	r3, #128	@ 0x80
 8004d58:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004d5a:	2318      	movs	r3, #24
 8004d5c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004d5e:	2300      	movs	r3, #0
 8004d60:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8004d62:	f04f 33ff 	mov.w	r3, #4294967295
 8004d66:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d045      	beq.n	8004dfa <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d002      	beq.n	8004d7c <osThreadNew+0x48>
        name = attr->name;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	699b      	ldr	r3, [r3, #24]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d002      	beq.n	8004d8a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	699b      	ldr	r3, [r3, #24]
 8004d88:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004d8a:	69fb      	ldr	r3, [r7, #28]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d008      	beq.n	8004da2 <osThreadNew+0x6e>
 8004d90:	69fb      	ldr	r3, [r7, #28]
 8004d92:	2b38      	cmp	r3, #56	@ 0x38
 8004d94:	d805      	bhi.n	8004da2 <osThreadNew+0x6e>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	685b      	ldr	r3, [r3, #4]
 8004d9a:	f003 0301 	and.w	r3, r3, #1
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d001      	beq.n	8004da6 <osThreadNew+0x72>
        return (NULL);
 8004da2:	2300      	movs	r3, #0
 8004da4:	e054      	b.n	8004e50 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	695b      	ldr	r3, [r3, #20]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d003      	beq.n	8004db6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	695b      	ldr	r3, [r3, #20]
 8004db2:	089b      	lsrs	r3, r3, #2
 8004db4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	689b      	ldr	r3, [r3, #8]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d00e      	beq.n	8004ddc <osThreadNew+0xa8>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	68db      	ldr	r3, [r3, #12]
 8004dc2:	2ba7      	cmp	r3, #167	@ 0xa7
 8004dc4:	d90a      	bls.n	8004ddc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d006      	beq.n	8004ddc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	695b      	ldr	r3, [r3, #20]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d002      	beq.n	8004ddc <osThreadNew+0xa8>
        mem = 1;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	61bb      	str	r3, [r7, #24]
 8004dda:	e010      	b.n	8004dfe <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	689b      	ldr	r3, [r3, #8]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d10c      	bne.n	8004dfe <osThreadNew+0xca>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	68db      	ldr	r3, [r3, #12]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d108      	bne.n	8004dfe <osThreadNew+0xca>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	691b      	ldr	r3, [r3, #16]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d104      	bne.n	8004dfe <osThreadNew+0xca>
          mem = 0;
 8004df4:	2300      	movs	r3, #0
 8004df6:	61bb      	str	r3, [r7, #24]
 8004df8:	e001      	b.n	8004dfe <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004dfe:	69bb      	ldr	r3, [r7, #24]
 8004e00:	2b01      	cmp	r3, #1
 8004e02:	d110      	bne.n	8004e26 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004e08:	687a      	ldr	r2, [r7, #4]
 8004e0a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004e0c:	9202      	str	r2, [sp, #8]
 8004e0e:	9301      	str	r3, [sp, #4]
 8004e10:	69fb      	ldr	r3, [r7, #28]
 8004e12:	9300      	str	r3, [sp, #0]
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	6a3a      	ldr	r2, [r7, #32]
 8004e18:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004e1a:	68f8      	ldr	r0, [r7, #12]
 8004e1c:	f000 fe1a 	bl	8005a54 <xTaskCreateStatic>
 8004e20:	4603      	mov	r3, r0
 8004e22:	613b      	str	r3, [r7, #16]
 8004e24:	e013      	b.n	8004e4e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004e26:	69bb      	ldr	r3, [r7, #24]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d110      	bne.n	8004e4e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004e2c:	6a3b      	ldr	r3, [r7, #32]
 8004e2e:	b29a      	uxth	r2, r3
 8004e30:	f107 0310 	add.w	r3, r7, #16
 8004e34:	9301      	str	r3, [sp, #4]
 8004e36:	69fb      	ldr	r3, [r7, #28]
 8004e38:	9300      	str	r3, [sp, #0]
 8004e3a:	68bb      	ldr	r3, [r7, #8]
 8004e3c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004e3e:	68f8      	ldr	r0, [r7, #12]
 8004e40:	f000 fe68 	bl	8005b14 <xTaskCreate>
 8004e44:	4603      	mov	r3, r0
 8004e46:	2b01      	cmp	r3, #1
 8004e48:	d001      	beq.n	8004e4e <osThreadNew+0x11a>
            hTask = NULL;
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004e4e:	693b      	ldr	r3, [r7, #16]
}
 8004e50:	4618      	mov	r0, r3
 8004e52:	3728      	adds	r7, #40	@ 0x28
 8004e54:	46bd      	mov	sp, r7
 8004e56:	bd80      	pop	{r7, pc}

08004e58 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b084      	sub	sp, #16
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004e60:	f3ef 8305 	mrs	r3, IPSR
 8004e64:	60bb      	str	r3, [r7, #8]
  return(result);
 8004e66:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d003      	beq.n	8004e74 <osDelay+0x1c>
    stat = osErrorISR;
 8004e6c:	f06f 0305 	mvn.w	r3, #5
 8004e70:	60fb      	str	r3, [r7, #12]
 8004e72:	e007      	b.n	8004e84 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004e74:	2300      	movs	r3, #0
 8004e76:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d002      	beq.n	8004e84 <osDelay+0x2c>
      vTaskDelay(ticks);
 8004e7e:	6878      	ldr	r0, [r7, #4]
 8004e80:	f000 ffa6 	bl	8005dd0 <vTaskDelay>
    }
  }

  return (stat);
 8004e84:	68fb      	ldr	r3, [r7, #12]
}
 8004e86:	4618      	mov	r0, r3
 8004e88:	3710      	adds	r7, #16
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bd80      	pop	{r7, pc}
	...

08004e90 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004e90:	b480      	push	{r7}
 8004e92:	b085      	sub	sp, #20
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	60f8      	str	r0, [r7, #12]
 8004e98:	60b9      	str	r1, [r7, #8]
 8004e9a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	4a07      	ldr	r2, [pc, #28]	@ (8004ebc <vApplicationGetIdleTaskMemory+0x2c>)
 8004ea0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004ea2:	68bb      	ldr	r3, [r7, #8]
 8004ea4:	4a06      	ldr	r2, [pc, #24]	@ (8004ec0 <vApplicationGetIdleTaskMemory+0x30>)
 8004ea6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2280      	movs	r2, #128	@ 0x80
 8004eac:	601a      	str	r2, [r3, #0]
}
 8004eae:	bf00      	nop
 8004eb0:	3714      	adds	r7, #20
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb8:	4770      	bx	lr
 8004eba:	bf00      	nop
 8004ebc:	20000280 	.word	0x20000280
 8004ec0:	20000328 	.word	0x20000328

08004ec4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004ec4:	b480      	push	{r7}
 8004ec6:	b085      	sub	sp, #20
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	60f8      	str	r0, [r7, #12]
 8004ecc:	60b9      	str	r1, [r7, #8]
 8004ece:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	4a07      	ldr	r2, [pc, #28]	@ (8004ef0 <vApplicationGetTimerTaskMemory+0x2c>)
 8004ed4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004ed6:	68bb      	ldr	r3, [r7, #8]
 8004ed8:	4a06      	ldr	r2, [pc, #24]	@ (8004ef4 <vApplicationGetTimerTaskMemory+0x30>)
 8004eda:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004ee2:	601a      	str	r2, [r3, #0]
}
 8004ee4:	bf00      	nop
 8004ee6:	3714      	adds	r7, #20
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eee:	4770      	bx	lr
 8004ef0:	20000528 	.word	0x20000528
 8004ef4:	200005d0 	.word	0x200005d0

08004ef8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004ef8:	b480      	push	{r7}
 8004efa:	b083      	sub	sp, #12
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	f103 0208 	add.w	r2, r3, #8
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	f04f 32ff 	mov.w	r2, #4294967295
 8004f10:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	f103 0208 	add.w	r2, r3, #8
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	f103 0208 	add.w	r2, r3, #8
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004f2c:	bf00      	nop
 8004f2e:	370c      	adds	r7, #12
 8004f30:	46bd      	mov	sp, r7
 8004f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f36:	4770      	bx	lr

08004f38 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004f38:	b480      	push	{r7}
 8004f3a:	b083      	sub	sp, #12
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2200      	movs	r2, #0
 8004f44:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004f46:	bf00      	nop
 8004f48:	370c      	adds	r7, #12
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f50:	4770      	bx	lr

08004f52 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004f52:	b480      	push	{r7}
 8004f54:	b085      	sub	sp, #20
 8004f56:	af00      	add	r7, sp, #0
 8004f58:	6078      	str	r0, [r7, #4]
 8004f5a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	685b      	ldr	r3, [r3, #4]
 8004f60:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	68fa      	ldr	r2, [r7, #12]
 8004f66:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	689a      	ldr	r2, [r3, #8]
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	689b      	ldr	r3, [r3, #8]
 8004f74:	683a      	ldr	r2, [r7, #0]
 8004f76:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	683a      	ldr	r2, [r7, #0]
 8004f7c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	687a      	ldr	r2, [r7, #4]
 8004f82:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	1c5a      	adds	r2, r3, #1
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	601a      	str	r2, [r3, #0]
}
 8004f8e:	bf00      	nop
 8004f90:	3714      	adds	r7, #20
 8004f92:	46bd      	mov	sp, r7
 8004f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f98:	4770      	bx	lr

08004f9a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004f9a:	b480      	push	{r7}
 8004f9c:	b085      	sub	sp, #20
 8004f9e:	af00      	add	r7, sp, #0
 8004fa0:	6078      	str	r0, [r7, #4]
 8004fa2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004faa:	68bb      	ldr	r3, [r7, #8]
 8004fac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fb0:	d103      	bne.n	8004fba <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	691b      	ldr	r3, [r3, #16]
 8004fb6:	60fb      	str	r3, [r7, #12]
 8004fb8:	e00c      	b.n	8004fd4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	3308      	adds	r3, #8
 8004fbe:	60fb      	str	r3, [r7, #12]
 8004fc0:	e002      	b.n	8004fc8 <vListInsert+0x2e>
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	685b      	ldr	r3, [r3, #4]
 8004fc6:	60fb      	str	r3, [r7, #12]
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	68ba      	ldr	r2, [r7, #8]
 8004fd0:	429a      	cmp	r2, r3
 8004fd2:	d2f6      	bcs.n	8004fc2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	685a      	ldr	r2, [r3, #4]
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	685b      	ldr	r3, [r3, #4]
 8004fe0:	683a      	ldr	r2, [r7, #0]
 8004fe2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	68fa      	ldr	r2, [r7, #12]
 8004fe8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	683a      	ldr	r2, [r7, #0]
 8004fee:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	687a      	ldr	r2, [r7, #4]
 8004ff4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	1c5a      	adds	r2, r3, #1
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	601a      	str	r2, [r3, #0]
}
 8005000:	bf00      	nop
 8005002:	3714      	adds	r7, #20
 8005004:	46bd      	mov	sp, r7
 8005006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500a:	4770      	bx	lr

0800500c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800500c:	b480      	push	{r7}
 800500e:	b085      	sub	sp, #20
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	691b      	ldr	r3, [r3, #16]
 8005018:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	685b      	ldr	r3, [r3, #4]
 800501e:	687a      	ldr	r2, [r7, #4]
 8005020:	6892      	ldr	r2, [r2, #8]
 8005022:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	689b      	ldr	r3, [r3, #8]
 8005028:	687a      	ldr	r2, [r7, #4]
 800502a:	6852      	ldr	r2, [r2, #4]
 800502c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	685b      	ldr	r3, [r3, #4]
 8005032:	687a      	ldr	r2, [r7, #4]
 8005034:	429a      	cmp	r2, r3
 8005036:	d103      	bne.n	8005040 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	689a      	ldr	r2, [r3, #8]
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2200      	movs	r2, #0
 8005044:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	1e5a      	subs	r2, r3, #1
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
}
 8005054:	4618      	mov	r0, r3
 8005056:	3714      	adds	r7, #20
 8005058:	46bd      	mov	sp, r7
 800505a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505e:	4770      	bx	lr

08005060 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b084      	sub	sp, #16
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
 8005068:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d10b      	bne.n	800508c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005074:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005078:	f383 8811 	msr	BASEPRI, r3
 800507c:	f3bf 8f6f 	isb	sy
 8005080:	f3bf 8f4f 	dsb	sy
 8005084:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005086:	bf00      	nop
 8005088:	bf00      	nop
 800508a:	e7fd      	b.n	8005088 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800508c:	f002 f8a4 	bl	80071d8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681a      	ldr	r2, [r3, #0]
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005098:	68f9      	ldr	r1, [r7, #12]
 800509a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800509c:	fb01 f303 	mul.w	r3, r1, r3
 80050a0:	441a      	add	r2, r3
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	2200      	movs	r2, #0
 80050aa:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681a      	ldr	r2, [r3, #0]
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681a      	ldr	r2, [r3, #0]
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050bc:	3b01      	subs	r3, #1
 80050be:	68f9      	ldr	r1, [r7, #12]
 80050c0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80050c2:	fb01 f303 	mul.w	r3, r1, r3
 80050c6:	441a      	add	r2, r3
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	22ff      	movs	r2, #255	@ 0xff
 80050d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	22ff      	movs	r2, #255	@ 0xff
 80050d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d114      	bne.n	800510c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	691b      	ldr	r3, [r3, #16]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d01a      	beq.n	8005120 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	3310      	adds	r3, #16
 80050ee:	4618      	mov	r0, r3
 80050f0:	f001 f942 	bl	8006378 <xTaskRemoveFromEventList>
 80050f4:	4603      	mov	r3, r0
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d012      	beq.n	8005120 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80050fa:	4b0d      	ldr	r3, [pc, #52]	@ (8005130 <xQueueGenericReset+0xd0>)
 80050fc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005100:	601a      	str	r2, [r3, #0]
 8005102:	f3bf 8f4f 	dsb	sy
 8005106:	f3bf 8f6f 	isb	sy
 800510a:	e009      	b.n	8005120 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	3310      	adds	r3, #16
 8005110:	4618      	mov	r0, r3
 8005112:	f7ff fef1 	bl	8004ef8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	3324      	adds	r3, #36	@ 0x24
 800511a:	4618      	mov	r0, r3
 800511c:	f7ff feec 	bl	8004ef8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005120:	f002 f88c 	bl	800723c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005124:	2301      	movs	r3, #1
}
 8005126:	4618      	mov	r0, r3
 8005128:	3710      	adds	r7, #16
 800512a:	46bd      	mov	sp, r7
 800512c:	bd80      	pop	{r7, pc}
 800512e:	bf00      	nop
 8005130:	e000ed04 	.word	0xe000ed04

08005134 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005134:	b580      	push	{r7, lr}
 8005136:	b08e      	sub	sp, #56	@ 0x38
 8005138:	af02      	add	r7, sp, #8
 800513a:	60f8      	str	r0, [r7, #12]
 800513c:	60b9      	str	r1, [r7, #8]
 800513e:	607a      	str	r2, [r7, #4]
 8005140:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d10b      	bne.n	8005160 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8005148:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800514c:	f383 8811 	msr	BASEPRI, r3
 8005150:	f3bf 8f6f 	isb	sy
 8005154:	f3bf 8f4f 	dsb	sy
 8005158:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800515a:	bf00      	nop
 800515c:	bf00      	nop
 800515e:	e7fd      	b.n	800515c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d10b      	bne.n	800517e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8005166:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800516a:	f383 8811 	msr	BASEPRI, r3
 800516e:	f3bf 8f6f 	isb	sy
 8005172:	f3bf 8f4f 	dsb	sy
 8005176:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005178:	bf00      	nop
 800517a:	bf00      	nop
 800517c:	e7fd      	b.n	800517a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d002      	beq.n	800518a <xQueueGenericCreateStatic+0x56>
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d001      	beq.n	800518e <xQueueGenericCreateStatic+0x5a>
 800518a:	2301      	movs	r3, #1
 800518c:	e000      	b.n	8005190 <xQueueGenericCreateStatic+0x5c>
 800518e:	2300      	movs	r3, #0
 8005190:	2b00      	cmp	r3, #0
 8005192:	d10b      	bne.n	80051ac <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8005194:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005198:	f383 8811 	msr	BASEPRI, r3
 800519c:	f3bf 8f6f 	isb	sy
 80051a0:	f3bf 8f4f 	dsb	sy
 80051a4:	623b      	str	r3, [r7, #32]
}
 80051a6:	bf00      	nop
 80051a8:	bf00      	nop
 80051aa:	e7fd      	b.n	80051a8 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d102      	bne.n	80051b8 <xQueueGenericCreateStatic+0x84>
 80051b2:	68bb      	ldr	r3, [r7, #8]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d101      	bne.n	80051bc <xQueueGenericCreateStatic+0x88>
 80051b8:	2301      	movs	r3, #1
 80051ba:	e000      	b.n	80051be <xQueueGenericCreateStatic+0x8a>
 80051bc:	2300      	movs	r3, #0
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d10b      	bne.n	80051da <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80051c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051c6:	f383 8811 	msr	BASEPRI, r3
 80051ca:	f3bf 8f6f 	isb	sy
 80051ce:	f3bf 8f4f 	dsb	sy
 80051d2:	61fb      	str	r3, [r7, #28]
}
 80051d4:	bf00      	nop
 80051d6:	bf00      	nop
 80051d8:	e7fd      	b.n	80051d6 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80051da:	2350      	movs	r3, #80	@ 0x50
 80051dc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80051de:	697b      	ldr	r3, [r7, #20]
 80051e0:	2b50      	cmp	r3, #80	@ 0x50
 80051e2:	d00b      	beq.n	80051fc <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80051e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051e8:	f383 8811 	msr	BASEPRI, r3
 80051ec:	f3bf 8f6f 	isb	sy
 80051f0:	f3bf 8f4f 	dsb	sy
 80051f4:	61bb      	str	r3, [r7, #24]
}
 80051f6:	bf00      	nop
 80051f8:	bf00      	nop
 80051fa:	e7fd      	b.n	80051f8 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80051fc:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8005202:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005204:	2b00      	cmp	r3, #0
 8005206:	d00d      	beq.n	8005224 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005208:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800520a:	2201      	movs	r2, #1
 800520c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005210:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8005214:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005216:	9300      	str	r3, [sp, #0]
 8005218:	4613      	mov	r3, r2
 800521a:	687a      	ldr	r2, [r7, #4]
 800521c:	68b9      	ldr	r1, [r7, #8]
 800521e:	68f8      	ldr	r0, [r7, #12]
 8005220:	f000 f805 	bl	800522e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005224:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8005226:	4618      	mov	r0, r3
 8005228:	3730      	adds	r7, #48	@ 0x30
 800522a:	46bd      	mov	sp, r7
 800522c:	bd80      	pop	{r7, pc}

0800522e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800522e:	b580      	push	{r7, lr}
 8005230:	b084      	sub	sp, #16
 8005232:	af00      	add	r7, sp, #0
 8005234:	60f8      	str	r0, [r7, #12]
 8005236:	60b9      	str	r1, [r7, #8]
 8005238:	607a      	str	r2, [r7, #4]
 800523a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d103      	bne.n	800524a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005242:	69bb      	ldr	r3, [r7, #24]
 8005244:	69ba      	ldr	r2, [r7, #24]
 8005246:	601a      	str	r2, [r3, #0]
 8005248:	e002      	b.n	8005250 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800524a:	69bb      	ldr	r3, [r7, #24]
 800524c:	687a      	ldr	r2, [r7, #4]
 800524e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005250:	69bb      	ldr	r3, [r7, #24]
 8005252:	68fa      	ldr	r2, [r7, #12]
 8005254:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005256:	69bb      	ldr	r3, [r7, #24]
 8005258:	68ba      	ldr	r2, [r7, #8]
 800525a:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800525c:	2101      	movs	r1, #1
 800525e:	69b8      	ldr	r0, [r7, #24]
 8005260:	f7ff fefe 	bl	8005060 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005264:	69bb      	ldr	r3, [r7, #24]
 8005266:	78fa      	ldrb	r2, [r7, #3]
 8005268:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800526c:	bf00      	nop
 800526e:	3710      	adds	r7, #16
 8005270:	46bd      	mov	sp, r7
 8005272:	bd80      	pop	{r7, pc}

08005274 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b08e      	sub	sp, #56	@ 0x38
 8005278:	af00      	add	r7, sp, #0
 800527a:	60f8      	str	r0, [r7, #12]
 800527c:	60b9      	str	r1, [r7, #8]
 800527e:	607a      	str	r2, [r7, #4]
 8005280:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005282:	2300      	movs	r3, #0
 8005284:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800528a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800528c:	2b00      	cmp	r3, #0
 800528e:	d10b      	bne.n	80052a8 <xQueueGenericSend+0x34>
	__asm volatile
 8005290:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005294:	f383 8811 	msr	BASEPRI, r3
 8005298:	f3bf 8f6f 	isb	sy
 800529c:	f3bf 8f4f 	dsb	sy
 80052a0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80052a2:	bf00      	nop
 80052a4:	bf00      	nop
 80052a6:	e7fd      	b.n	80052a4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d103      	bne.n	80052b6 <xQueueGenericSend+0x42>
 80052ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d101      	bne.n	80052ba <xQueueGenericSend+0x46>
 80052b6:	2301      	movs	r3, #1
 80052b8:	e000      	b.n	80052bc <xQueueGenericSend+0x48>
 80052ba:	2300      	movs	r3, #0
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d10b      	bne.n	80052d8 <xQueueGenericSend+0x64>
	__asm volatile
 80052c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052c4:	f383 8811 	msr	BASEPRI, r3
 80052c8:	f3bf 8f6f 	isb	sy
 80052cc:	f3bf 8f4f 	dsb	sy
 80052d0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80052d2:	bf00      	nop
 80052d4:	bf00      	nop
 80052d6:	e7fd      	b.n	80052d4 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	2b02      	cmp	r3, #2
 80052dc:	d103      	bne.n	80052e6 <xQueueGenericSend+0x72>
 80052de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052e2:	2b01      	cmp	r3, #1
 80052e4:	d101      	bne.n	80052ea <xQueueGenericSend+0x76>
 80052e6:	2301      	movs	r3, #1
 80052e8:	e000      	b.n	80052ec <xQueueGenericSend+0x78>
 80052ea:	2300      	movs	r3, #0
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d10b      	bne.n	8005308 <xQueueGenericSend+0x94>
	__asm volatile
 80052f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052f4:	f383 8811 	msr	BASEPRI, r3
 80052f8:	f3bf 8f6f 	isb	sy
 80052fc:	f3bf 8f4f 	dsb	sy
 8005300:	623b      	str	r3, [r7, #32]
}
 8005302:	bf00      	nop
 8005304:	bf00      	nop
 8005306:	e7fd      	b.n	8005304 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005308:	f001 f9fc 	bl	8006704 <xTaskGetSchedulerState>
 800530c:	4603      	mov	r3, r0
 800530e:	2b00      	cmp	r3, #0
 8005310:	d102      	bne.n	8005318 <xQueueGenericSend+0xa4>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d101      	bne.n	800531c <xQueueGenericSend+0xa8>
 8005318:	2301      	movs	r3, #1
 800531a:	e000      	b.n	800531e <xQueueGenericSend+0xaa>
 800531c:	2300      	movs	r3, #0
 800531e:	2b00      	cmp	r3, #0
 8005320:	d10b      	bne.n	800533a <xQueueGenericSend+0xc6>
	__asm volatile
 8005322:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005326:	f383 8811 	msr	BASEPRI, r3
 800532a:	f3bf 8f6f 	isb	sy
 800532e:	f3bf 8f4f 	dsb	sy
 8005332:	61fb      	str	r3, [r7, #28]
}
 8005334:	bf00      	nop
 8005336:	bf00      	nop
 8005338:	e7fd      	b.n	8005336 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800533a:	f001 ff4d 	bl	80071d8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800533e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005340:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005342:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005344:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005346:	429a      	cmp	r2, r3
 8005348:	d302      	bcc.n	8005350 <xQueueGenericSend+0xdc>
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	2b02      	cmp	r3, #2
 800534e:	d129      	bne.n	80053a4 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005350:	683a      	ldr	r2, [r7, #0]
 8005352:	68b9      	ldr	r1, [r7, #8]
 8005354:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005356:	f000 fa0f 	bl	8005778 <prvCopyDataToQueue>
 800535a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800535c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800535e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005360:	2b00      	cmp	r3, #0
 8005362:	d010      	beq.n	8005386 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005364:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005366:	3324      	adds	r3, #36	@ 0x24
 8005368:	4618      	mov	r0, r3
 800536a:	f001 f805 	bl	8006378 <xTaskRemoveFromEventList>
 800536e:	4603      	mov	r3, r0
 8005370:	2b00      	cmp	r3, #0
 8005372:	d013      	beq.n	800539c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005374:	4b3f      	ldr	r3, [pc, #252]	@ (8005474 <xQueueGenericSend+0x200>)
 8005376:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800537a:	601a      	str	r2, [r3, #0]
 800537c:	f3bf 8f4f 	dsb	sy
 8005380:	f3bf 8f6f 	isb	sy
 8005384:	e00a      	b.n	800539c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005386:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005388:	2b00      	cmp	r3, #0
 800538a:	d007      	beq.n	800539c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800538c:	4b39      	ldr	r3, [pc, #228]	@ (8005474 <xQueueGenericSend+0x200>)
 800538e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005392:	601a      	str	r2, [r3, #0]
 8005394:	f3bf 8f4f 	dsb	sy
 8005398:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800539c:	f001 ff4e 	bl	800723c <vPortExitCritical>
				return pdPASS;
 80053a0:	2301      	movs	r3, #1
 80053a2:	e063      	b.n	800546c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d103      	bne.n	80053b2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80053aa:	f001 ff47 	bl	800723c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80053ae:	2300      	movs	r3, #0
 80053b0:	e05c      	b.n	800546c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80053b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d106      	bne.n	80053c6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80053b8:	f107 0314 	add.w	r3, r7, #20
 80053bc:	4618      	mov	r0, r3
 80053be:	f001 f83f 	bl	8006440 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80053c2:	2301      	movs	r3, #1
 80053c4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80053c6:	f001 ff39 	bl	800723c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80053ca:	f000 fda7 	bl	8005f1c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80053ce:	f001 ff03 	bl	80071d8 <vPortEnterCritical>
 80053d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053d4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80053d8:	b25b      	sxtb	r3, r3
 80053da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053de:	d103      	bne.n	80053e8 <xQueueGenericSend+0x174>
 80053e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053e2:	2200      	movs	r2, #0
 80053e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80053e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053ea:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80053ee:	b25b      	sxtb	r3, r3
 80053f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053f4:	d103      	bne.n	80053fe <xQueueGenericSend+0x18a>
 80053f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053f8:	2200      	movs	r2, #0
 80053fa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80053fe:	f001 ff1d 	bl	800723c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005402:	1d3a      	adds	r2, r7, #4
 8005404:	f107 0314 	add.w	r3, r7, #20
 8005408:	4611      	mov	r1, r2
 800540a:	4618      	mov	r0, r3
 800540c:	f001 f82e 	bl	800646c <xTaskCheckForTimeOut>
 8005410:	4603      	mov	r3, r0
 8005412:	2b00      	cmp	r3, #0
 8005414:	d124      	bne.n	8005460 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005416:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005418:	f000 faa6 	bl	8005968 <prvIsQueueFull>
 800541c:	4603      	mov	r3, r0
 800541e:	2b00      	cmp	r3, #0
 8005420:	d018      	beq.n	8005454 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005422:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005424:	3310      	adds	r3, #16
 8005426:	687a      	ldr	r2, [r7, #4]
 8005428:	4611      	mov	r1, r2
 800542a:	4618      	mov	r0, r3
 800542c:	f000 ff52 	bl	80062d4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005430:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005432:	f000 fa31 	bl	8005898 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005436:	f000 fd7f 	bl	8005f38 <xTaskResumeAll>
 800543a:	4603      	mov	r3, r0
 800543c:	2b00      	cmp	r3, #0
 800543e:	f47f af7c 	bne.w	800533a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8005442:	4b0c      	ldr	r3, [pc, #48]	@ (8005474 <xQueueGenericSend+0x200>)
 8005444:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005448:	601a      	str	r2, [r3, #0]
 800544a:	f3bf 8f4f 	dsb	sy
 800544e:	f3bf 8f6f 	isb	sy
 8005452:	e772      	b.n	800533a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005454:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005456:	f000 fa1f 	bl	8005898 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800545a:	f000 fd6d 	bl	8005f38 <xTaskResumeAll>
 800545e:	e76c      	b.n	800533a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005460:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005462:	f000 fa19 	bl	8005898 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005466:	f000 fd67 	bl	8005f38 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800546a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800546c:	4618      	mov	r0, r3
 800546e:	3738      	adds	r7, #56	@ 0x38
 8005470:	46bd      	mov	sp, r7
 8005472:	bd80      	pop	{r7, pc}
 8005474:	e000ed04 	.word	0xe000ed04

08005478 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b090      	sub	sp, #64	@ 0x40
 800547c:	af00      	add	r7, sp, #0
 800547e:	60f8      	str	r0, [r7, #12]
 8005480:	60b9      	str	r1, [r7, #8]
 8005482:	607a      	str	r2, [r7, #4]
 8005484:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800548a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800548c:	2b00      	cmp	r3, #0
 800548e:	d10b      	bne.n	80054a8 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8005490:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005494:	f383 8811 	msr	BASEPRI, r3
 8005498:	f3bf 8f6f 	isb	sy
 800549c:	f3bf 8f4f 	dsb	sy
 80054a0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80054a2:	bf00      	nop
 80054a4:	bf00      	nop
 80054a6:	e7fd      	b.n	80054a4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d103      	bne.n	80054b6 <xQueueGenericSendFromISR+0x3e>
 80054ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d101      	bne.n	80054ba <xQueueGenericSendFromISR+0x42>
 80054b6:	2301      	movs	r3, #1
 80054b8:	e000      	b.n	80054bc <xQueueGenericSendFromISR+0x44>
 80054ba:	2300      	movs	r3, #0
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d10b      	bne.n	80054d8 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80054c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054c4:	f383 8811 	msr	BASEPRI, r3
 80054c8:	f3bf 8f6f 	isb	sy
 80054cc:	f3bf 8f4f 	dsb	sy
 80054d0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80054d2:	bf00      	nop
 80054d4:	bf00      	nop
 80054d6:	e7fd      	b.n	80054d4 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	2b02      	cmp	r3, #2
 80054dc:	d103      	bne.n	80054e6 <xQueueGenericSendFromISR+0x6e>
 80054de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054e2:	2b01      	cmp	r3, #1
 80054e4:	d101      	bne.n	80054ea <xQueueGenericSendFromISR+0x72>
 80054e6:	2301      	movs	r3, #1
 80054e8:	e000      	b.n	80054ec <xQueueGenericSendFromISR+0x74>
 80054ea:	2300      	movs	r3, #0
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d10b      	bne.n	8005508 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80054f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054f4:	f383 8811 	msr	BASEPRI, r3
 80054f8:	f3bf 8f6f 	isb	sy
 80054fc:	f3bf 8f4f 	dsb	sy
 8005500:	623b      	str	r3, [r7, #32]
}
 8005502:	bf00      	nop
 8005504:	bf00      	nop
 8005506:	e7fd      	b.n	8005504 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005508:	f001 ff46 	bl	8007398 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800550c:	f3ef 8211 	mrs	r2, BASEPRI
 8005510:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005514:	f383 8811 	msr	BASEPRI, r3
 8005518:	f3bf 8f6f 	isb	sy
 800551c:	f3bf 8f4f 	dsb	sy
 8005520:	61fa      	str	r2, [r7, #28]
 8005522:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005524:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005526:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005528:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800552a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800552c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800552e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005530:	429a      	cmp	r2, r3
 8005532:	d302      	bcc.n	800553a <xQueueGenericSendFromISR+0xc2>
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	2b02      	cmp	r3, #2
 8005538:	d12f      	bne.n	800559a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800553a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800553c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005540:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005544:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005546:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005548:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800554a:	683a      	ldr	r2, [r7, #0]
 800554c:	68b9      	ldr	r1, [r7, #8]
 800554e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005550:	f000 f912 	bl	8005778 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005554:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8005558:	f1b3 3fff 	cmp.w	r3, #4294967295
 800555c:	d112      	bne.n	8005584 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800555e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005560:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005562:	2b00      	cmp	r3, #0
 8005564:	d016      	beq.n	8005594 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005566:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005568:	3324      	adds	r3, #36	@ 0x24
 800556a:	4618      	mov	r0, r3
 800556c:	f000 ff04 	bl	8006378 <xTaskRemoveFromEventList>
 8005570:	4603      	mov	r3, r0
 8005572:	2b00      	cmp	r3, #0
 8005574:	d00e      	beq.n	8005594 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d00b      	beq.n	8005594 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2201      	movs	r2, #1
 8005580:	601a      	str	r2, [r3, #0]
 8005582:	e007      	b.n	8005594 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005584:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005588:	3301      	adds	r3, #1
 800558a:	b2db      	uxtb	r3, r3
 800558c:	b25a      	sxtb	r2, r3
 800558e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005590:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005594:	2301      	movs	r3, #1
 8005596:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8005598:	e001      	b.n	800559e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800559a:	2300      	movs	r3, #0
 800559c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800559e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055a0:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80055a2:	697b      	ldr	r3, [r7, #20]
 80055a4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80055a8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80055aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80055ac:	4618      	mov	r0, r3
 80055ae:	3740      	adds	r7, #64	@ 0x40
 80055b0:	46bd      	mov	sp, r7
 80055b2:	bd80      	pop	{r7, pc}

080055b4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b08c      	sub	sp, #48	@ 0x30
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	60f8      	str	r0, [r7, #12]
 80055bc:	60b9      	str	r1, [r7, #8]
 80055be:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80055c0:	2300      	movs	r3, #0
 80055c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80055c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d10b      	bne.n	80055e6 <xQueueReceive+0x32>
	__asm volatile
 80055ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055d2:	f383 8811 	msr	BASEPRI, r3
 80055d6:	f3bf 8f6f 	isb	sy
 80055da:	f3bf 8f4f 	dsb	sy
 80055de:	623b      	str	r3, [r7, #32]
}
 80055e0:	bf00      	nop
 80055e2:	bf00      	nop
 80055e4:	e7fd      	b.n	80055e2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80055e6:	68bb      	ldr	r3, [r7, #8]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d103      	bne.n	80055f4 <xQueueReceive+0x40>
 80055ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d101      	bne.n	80055f8 <xQueueReceive+0x44>
 80055f4:	2301      	movs	r3, #1
 80055f6:	e000      	b.n	80055fa <xQueueReceive+0x46>
 80055f8:	2300      	movs	r3, #0
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d10b      	bne.n	8005616 <xQueueReceive+0x62>
	__asm volatile
 80055fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005602:	f383 8811 	msr	BASEPRI, r3
 8005606:	f3bf 8f6f 	isb	sy
 800560a:	f3bf 8f4f 	dsb	sy
 800560e:	61fb      	str	r3, [r7, #28]
}
 8005610:	bf00      	nop
 8005612:	bf00      	nop
 8005614:	e7fd      	b.n	8005612 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005616:	f001 f875 	bl	8006704 <xTaskGetSchedulerState>
 800561a:	4603      	mov	r3, r0
 800561c:	2b00      	cmp	r3, #0
 800561e:	d102      	bne.n	8005626 <xQueueReceive+0x72>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d101      	bne.n	800562a <xQueueReceive+0x76>
 8005626:	2301      	movs	r3, #1
 8005628:	e000      	b.n	800562c <xQueueReceive+0x78>
 800562a:	2300      	movs	r3, #0
 800562c:	2b00      	cmp	r3, #0
 800562e:	d10b      	bne.n	8005648 <xQueueReceive+0x94>
	__asm volatile
 8005630:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005634:	f383 8811 	msr	BASEPRI, r3
 8005638:	f3bf 8f6f 	isb	sy
 800563c:	f3bf 8f4f 	dsb	sy
 8005640:	61bb      	str	r3, [r7, #24]
}
 8005642:	bf00      	nop
 8005644:	bf00      	nop
 8005646:	e7fd      	b.n	8005644 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005648:	f001 fdc6 	bl	80071d8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800564c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800564e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005650:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005654:	2b00      	cmp	r3, #0
 8005656:	d01f      	beq.n	8005698 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005658:	68b9      	ldr	r1, [r7, #8]
 800565a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800565c:	f000 f8f6 	bl	800584c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005660:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005662:	1e5a      	subs	r2, r3, #1
 8005664:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005666:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005668:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800566a:	691b      	ldr	r3, [r3, #16]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d00f      	beq.n	8005690 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005670:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005672:	3310      	adds	r3, #16
 8005674:	4618      	mov	r0, r3
 8005676:	f000 fe7f 	bl	8006378 <xTaskRemoveFromEventList>
 800567a:	4603      	mov	r3, r0
 800567c:	2b00      	cmp	r3, #0
 800567e:	d007      	beq.n	8005690 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005680:	4b3c      	ldr	r3, [pc, #240]	@ (8005774 <xQueueReceive+0x1c0>)
 8005682:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005686:	601a      	str	r2, [r3, #0]
 8005688:	f3bf 8f4f 	dsb	sy
 800568c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005690:	f001 fdd4 	bl	800723c <vPortExitCritical>
				return pdPASS;
 8005694:	2301      	movs	r3, #1
 8005696:	e069      	b.n	800576c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d103      	bne.n	80056a6 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800569e:	f001 fdcd 	bl	800723c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80056a2:	2300      	movs	r3, #0
 80056a4:	e062      	b.n	800576c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80056a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d106      	bne.n	80056ba <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80056ac:	f107 0310 	add.w	r3, r7, #16
 80056b0:	4618      	mov	r0, r3
 80056b2:	f000 fec5 	bl	8006440 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80056b6:	2301      	movs	r3, #1
 80056b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80056ba:	f001 fdbf 	bl	800723c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80056be:	f000 fc2d 	bl	8005f1c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80056c2:	f001 fd89 	bl	80071d8 <vPortEnterCritical>
 80056c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056c8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80056cc:	b25b      	sxtb	r3, r3
 80056ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056d2:	d103      	bne.n	80056dc <xQueueReceive+0x128>
 80056d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056d6:	2200      	movs	r2, #0
 80056d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80056dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056de:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80056e2:	b25b      	sxtb	r3, r3
 80056e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056e8:	d103      	bne.n	80056f2 <xQueueReceive+0x13e>
 80056ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056ec:	2200      	movs	r2, #0
 80056ee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80056f2:	f001 fda3 	bl	800723c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80056f6:	1d3a      	adds	r2, r7, #4
 80056f8:	f107 0310 	add.w	r3, r7, #16
 80056fc:	4611      	mov	r1, r2
 80056fe:	4618      	mov	r0, r3
 8005700:	f000 feb4 	bl	800646c <xTaskCheckForTimeOut>
 8005704:	4603      	mov	r3, r0
 8005706:	2b00      	cmp	r3, #0
 8005708:	d123      	bne.n	8005752 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800570a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800570c:	f000 f916 	bl	800593c <prvIsQueueEmpty>
 8005710:	4603      	mov	r3, r0
 8005712:	2b00      	cmp	r3, #0
 8005714:	d017      	beq.n	8005746 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005716:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005718:	3324      	adds	r3, #36	@ 0x24
 800571a:	687a      	ldr	r2, [r7, #4]
 800571c:	4611      	mov	r1, r2
 800571e:	4618      	mov	r0, r3
 8005720:	f000 fdd8 	bl	80062d4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005724:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005726:	f000 f8b7 	bl	8005898 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800572a:	f000 fc05 	bl	8005f38 <xTaskResumeAll>
 800572e:	4603      	mov	r3, r0
 8005730:	2b00      	cmp	r3, #0
 8005732:	d189      	bne.n	8005648 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8005734:	4b0f      	ldr	r3, [pc, #60]	@ (8005774 <xQueueReceive+0x1c0>)
 8005736:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800573a:	601a      	str	r2, [r3, #0]
 800573c:	f3bf 8f4f 	dsb	sy
 8005740:	f3bf 8f6f 	isb	sy
 8005744:	e780      	b.n	8005648 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005746:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005748:	f000 f8a6 	bl	8005898 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800574c:	f000 fbf4 	bl	8005f38 <xTaskResumeAll>
 8005750:	e77a      	b.n	8005648 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005752:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005754:	f000 f8a0 	bl	8005898 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005758:	f000 fbee 	bl	8005f38 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800575c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800575e:	f000 f8ed 	bl	800593c <prvIsQueueEmpty>
 8005762:	4603      	mov	r3, r0
 8005764:	2b00      	cmp	r3, #0
 8005766:	f43f af6f 	beq.w	8005648 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800576a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800576c:	4618      	mov	r0, r3
 800576e:	3730      	adds	r7, #48	@ 0x30
 8005770:	46bd      	mov	sp, r7
 8005772:	bd80      	pop	{r7, pc}
 8005774:	e000ed04 	.word	0xe000ed04

08005778 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b086      	sub	sp, #24
 800577c:	af00      	add	r7, sp, #0
 800577e:	60f8      	str	r0, [r7, #12]
 8005780:	60b9      	str	r1, [r7, #8]
 8005782:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005784:	2300      	movs	r3, #0
 8005786:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800578c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005792:	2b00      	cmp	r3, #0
 8005794:	d10d      	bne.n	80057b2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d14d      	bne.n	800583a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	689b      	ldr	r3, [r3, #8]
 80057a2:	4618      	mov	r0, r3
 80057a4:	f000 ffcc 	bl	8006740 <xTaskPriorityDisinherit>
 80057a8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	2200      	movs	r2, #0
 80057ae:	609a      	str	r2, [r3, #8]
 80057b0:	e043      	b.n	800583a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d119      	bne.n	80057ec <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	6858      	ldr	r0, [r3, #4]
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057c0:	461a      	mov	r2, r3
 80057c2:	68b9      	ldr	r1, [r7, #8]
 80057c4:	f002 f89c 	bl	8007900 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	685a      	ldr	r2, [r3, #4]
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057d0:	441a      	add	r2, r3
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	685a      	ldr	r2, [r3, #4]
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	689b      	ldr	r3, [r3, #8]
 80057de:	429a      	cmp	r2, r3
 80057e0:	d32b      	bcc.n	800583a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681a      	ldr	r2, [r3, #0]
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	605a      	str	r2, [r3, #4]
 80057ea:	e026      	b.n	800583a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	68d8      	ldr	r0, [r3, #12]
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057f4:	461a      	mov	r2, r3
 80057f6:	68b9      	ldr	r1, [r7, #8]
 80057f8:	f002 f882 	bl	8007900 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	68da      	ldr	r2, [r3, #12]
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005804:	425b      	negs	r3, r3
 8005806:	441a      	add	r2, r3
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	68da      	ldr	r2, [r3, #12]
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	429a      	cmp	r2, r3
 8005816:	d207      	bcs.n	8005828 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	689a      	ldr	r2, [r3, #8]
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005820:	425b      	negs	r3, r3
 8005822:	441a      	add	r2, r3
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2b02      	cmp	r3, #2
 800582c:	d105      	bne.n	800583a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800582e:	693b      	ldr	r3, [r7, #16]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d002      	beq.n	800583a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005834:	693b      	ldr	r3, [r7, #16]
 8005836:	3b01      	subs	r3, #1
 8005838:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800583a:	693b      	ldr	r3, [r7, #16]
 800583c:	1c5a      	adds	r2, r3, #1
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8005842:	697b      	ldr	r3, [r7, #20]
}
 8005844:	4618      	mov	r0, r3
 8005846:	3718      	adds	r7, #24
 8005848:	46bd      	mov	sp, r7
 800584a:	bd80      	pop	{r7, pc}

0800584c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b082      	sub	sp, #8
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
 8005854:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800585a:	2b00      	cmp	r3, #0
 800585c:	d018      	beq.n	8005890 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	68da      	ldr	r2, [r3, #12]
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005866:	441a      	add	r2, r3
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	68da      	ldr	r2, [r3, #12]
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	689b      	ldr	r3, [r3, #8]
 8005874:	429a      	cmp	r2, r3
 8005876:	d303      	bcc.n	8005880 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681a      	ldr	r2, [r3, #0]
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	68d9      	ldr	r1, [r3, #12]
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005888:	461a      	mov	r2, r3
 800588a:	6838      	ldr	r0, [r7, #0]
 800588c:	f002 f838 	bl	8007900 <memcpy>
	}
}
 8005890:	bf00      	nop
 8005892:	3708      	adds	r7, #8
 8005894:	46bd      	mov	sp, r7
 8005896:	bd80      	pop	{r7, pc}

08005898 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b084      	sub	sp, #16
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80058a0:	f001 fc9a 	bl	80071d8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80058aa:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80058ac:	e011      	b.n	80058d2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d012      	beq.n	80058dc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	3324      	adds	r3, #36	@ 0x24
 80058ba:	4618      	mov	r0, r3
 80058bc:	f000 fd5c 	bl	8006378 <xTaskRemoveFromEventList>
 80058c0:	4603      	mov	r3, r0
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d001      	beq.n	80058ca <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80058c6:	f000 fe35 	bl	8006534 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80058ca:	7bfb      	ldrb	r3, [r7, #15]
 80058cc:	3b01      	subs	r3, #1
 80058ce:	b2db      	uxtb	r3, r3
 80058d0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80058d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	dce9      	bgt.n	80058ae <prvUnlockQueue+0x16>
 80058da:	e000      	b.n	80058de <prvUnlockQueue+0x46>
					break;
 80058dc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	22ff      	movs	r2, #255	@ 0xff
 80058e2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80058e6:	f001 fca9 	bl	800723c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80058ea:	f001 fc75 	bl	80071d8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80058f4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80058f6:	e011      	b.n	800591c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	691b      	ldr	r3, [r3, #16]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d012      	beq.n	8005926 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	3310      	adds	r3, #16
 8005904:	4618      	mov	r0, r3
 8005906:	f000 fd37 	bl	8006378 <xTaskRemoveFromEventList>
 800590a:	4603      	mov	r3, r0
 800590c:	2b00      	cmp	r3, #0
 800590e:	d001      	beq.n	8005914 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005910:	f000 fe10 	bl	8006534 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005914:	7bbb      	ldrb	r3, [r7, #14]
 8005916:	3b01      	subs	r3, #1
 8005918:	b2db      	uxtb	r3, r3
 800591a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800591c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005920:	2b00      	cmp	r3, #0
 8005922:	dce9      	bgt.n	80058f8 <prvUnlockQueue+0x60>
 8005924:	e000      	b.n	8005928 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005926:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	22ff      	movs	r2, #255	@ 0xff
 800592c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005930:	f001 fc84 	bl	800723c <vPortExitCritical>
}
 8005934:	bf00      	nop
 8005936:	3710      	adds	r7, #16
 8005938:	46bd      	mov	sp, r7
 800593a:	bd80      	pop	{r7, pc}

0800593c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b084      	sub	sp, #16
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005944:	f001 fc48 	bl	80071d8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800594c:	2b00      	cmp	r3, #0
 800594e:	d102      	bne.n	8005956 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005950:	2301      	movs	r3, #1
 8005952:	60fb      	str	r3, [r7, #12]
 8005954:	e001      	b.n	800595a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005956:	2300      	movs	r3, #0
 8005958:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800595a:	f001 fc6f 	bl	800723c <vPortExitCritical>

	return xReturn;
 800595e:	68fb      	ldr	r3, [r7, #12]
}
 8005960:	4618      	mov	r0, r3
 8005962:	3710      	adds	r7, #16
 8005964:	46bd      	mov	sp, r7
 8005966:	bd80      	pop	{r7, pc}

08005968 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b084      	sub	sp, #16
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005970:	f001 fc32 	bl	80071d8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800597c:	429a      	cmp	r2, r3
 800597e:	d102      	bne.n	8005986 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005980:	2301      	movs	r3, #1
 8005982:	60fb      	str	r3, [r7, #12]
 8005984:	e001      	b.n	800598a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005986:	2300      	movs	r3, #0
 8005988:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800598a:	f001 fc57 	bl	800723c <vPortExitCritical>

	return xReturn;
 800598e:	68fb      	ldr	r3, [r7, #12]
}
 8005990:	4618      	mov	r0, r3
 8005992:	3710      	adds	r7, #16
 8005994:	46bd      	mov	sp, r7
 8005996:	bd80      	pop	{r7, pc}

08005998 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005998:	b480      	push	{r7}
 800599a:	b085      	sub	sp, #20
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
 80059a0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80059a2:	2300      	movs	r3, #0
 80059a4:	60fb      	str	r3, [r7, #12]
 80059a6:	e014      	b.n	80059d2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80059a8:	4a0f      	ldr	r2, [pc, #60]	@ (80059e8 <vQueueAddToRegistry+0x50>)
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d10b      	bne.n	80059cc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80059b4:	490c      	ldr	r1, [pc, #48]	@ (80059e8 <vQueueAddToRegistry+0x50>)
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	683a      	ldr	r2, [r7, #0]
 80059ba:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80059be:	4a0a      	ldr	r2, [pc, #40]	@ (80059e8 <vQueueAddToRegistry+0x50>)
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	00db      	lsls	r3, r3, #3
 80059c4:	4413      	add	r3, r2
 80059c6:	687a      	ldr	r2, [r7, #4]
 80059c8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80059ca:	e006      	b.n	80059da <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	3301      	adds	r3, #1
 80059d0:	60fb      	str	r3, [r7, #12]
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	2b07      	cmp	r3, #7
 80059d6:	d9e7      	bls.n	80059a8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80059d8:	bf00      	nop
 80059da:	bf00      	nop
 80059dc:	3714      	adds	r7, #20
 80059de:	46bd      	mov	sp, r7
 80059e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e4:	4770      	bx	lr
 80059e6:	bf00      	nop
 80059e8:	200009d0 	.word	0x200009d0

080059ec <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b086      	sub	sp, #24
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	60f8      	str	r0, [r7, #12]
 80059f4:	60b9      	str	r1, [r7, #8]
 80059f6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80059fc:	f001 fbec 	bl	80071d8 <vPortEnterCritical>
 8005a00:	697b      	ldr	r3, [r7, #20]
 8005a02:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005a06:	b25b      	sxtb	r3, r3
 8005a08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a0c:	d103      	bne.n	8005a16 <vQueueWaitForMessageRestricted+0x2a>
 8005a0e:	697b      	ldr	r3, [r7, #20]
 8005a10:	2200      	movs	r2, #0
 8005a12:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005a16:	697b      	ldr	r3, [r7, #20]
 8005a18:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005a1c:	b25b      	sxtb	r3, r3
 8005a1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a22:	d103      	bne.n	8005a2c <vQueueWaitForMessageRestricted+0x40>
 8005a24:	697b      	ldr	r3, [r7, #20]
 8005a26:	2200      	movs	r2, #0
 8005a28:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005a2c:	f001 fc06 	bl	800723c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005a30:	697b      	ldr	r3, [r7, #20]
 8005a32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d106      	bne.n	8005a46 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005a38:	697b      	ldr	r3, [r7, #20]
 8005a3a:	3324      	adds	r3, #36	@ 0x24
 8005a3c:	687a      	ldr	r2, [r7, #4]
 8005a3e:	68b9      	ldr	r1, [r7, #8]
 8005a40:	4618      	mov	r0, r3
 8005a42:	f000 fc6d 	bl	8006320 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005a46:	6978      	ldr	r0, [r7, #20]
 8005a48:	f7ff ff26 	bl	8005898 <prvUnlockQueue>
	}
 8005a4c:	bf00      	nop
 8005a4e:	3718      	adds	r7, #24
 8005a50:	46bd      	mov	sp, r7
 8005a52:	bd80      	pop	{r7, pc}

08005a54 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b08e      	sub	sp, #56	@ 0x38
 8005a58:	af04      	add	r7, sp, #16
 8005a5a:	60f8      	str	r0, [r7, #12]
 8005a5c:	60b9      	str	r1, [r7, #8]
 8005a5e:	607a      	str	r2, [r7, #4]
 8005a60:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005a62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d10b      	bne.n	8005a80 <xTaskCreateStatic+0x2c>
	__asm volatile
 8005a68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a6c:	f383 8811 	msr	BASEPRI, r3
 8005a70:	f3bf 8f6f 	isb	sy
 8005a74:	f3bf 8f4f 	dsb	sy
 8005a78:	623b      	str	r3, [r7, #32]
}
 8005a7a:	bf00      	nop
 8005a7c:	bf00      	nop
 8005a7e:	e7fd      	b.n	8005a7c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005a80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d10b      	bne.n	8005a9e <xTaskCreateStatic+0x4a>
	__asm volatile
 8005a86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a8a:	f383 8811 	msr	BASEPRI, r3
 8005a8e:	f3bf 8f6f 	isb	sy
 8005a92:	f3bf 8f4f 	dsb	sy
 8005a96:	61fb      	str	r3, [r7, #28]
}
 8005a98:	bf00      	nop
 8005a9a:	bf00      	nop
 8005a9c:	e7fd      	b.n	8005a9a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005a9e:	23a8      	movs	r3, #168	@ 0xa8
 8005aa0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005aa2:	693b      	ldr	r3, [r7, #16]
 8005aa4:	2ba8      	cmp	r3, #168	@ 0xa8
 8005aa6:	d00b      	beq.n	8005ac0 <xTaskCreateStatic+0x6c>
	__asm volatile
 8005aa8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005aac:	f383 8811 	msr	BASEPRI, r3
 8005ab0:	f3bf 8f6f 	isb	sy
 8005ab4:	f3bf 8f4f 	dsb	sy
 8005ab8:	61bb      	str	r3, [r7, #24]
}
 8005aba:	bf00      	nop
 8005abc:	bf00      	nop
 8005abe:	e7fd      	b.n	8005abc <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005ac0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005ac2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d01e      	beq.n	8005b06 <xTaskCreateStatic+0xb2>
 8005ac8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d01b      	beq.n	8005b06 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005ace:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ad0:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005ad2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ad4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005ad6:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005ad8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ada:	2202      	movs	r2, #2
 8005adc:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	9303      	str	r3, [sp, #12]
 8005ae4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ae6:	9302      	str	r3, [sp, #8]
 8005ae8:	f107 0314 	add.w	r3, r7, #20
 8005aec:	9301      	str	r3, [sp, #4]
 8005aee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005af0:	9300      	str	r3, [sp, #0]
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	687a      	ldr	r2, [r7, #4]
 8005af6:	68b9      	ldr	r1, [r7, #8]
 8005af8:	68f8      	ldr	r0, [r7, #12]
 8005afa:	f000 f851 	bl	8005ba0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005afe:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005b00:	f000 f8f6 	bl	8005cf0 <prvAddNewTaskToReadyList>
 8005b04:	e001      	b.n	8005b0a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8005b06:	2300      	movs	r3, #0
 8005b08:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005b0a:	697b      	ldr	r3, [r7, #20]
	}
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	3728      	adds	r7, #40	@ 0x28
 8005b10:	46bd      	mov	sp, r7
 8005b12:	bd80      	pop	{r7, pc}

08005b14 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b08c      	sub	sp, #48	@ 0x30
 8005b18:	af04      	add	r7, sp, #16
 8005b1a:	60f8      	str	r0, [r7, #12]
 8005b1c:	60b9      	str	r1, [r7, #8]
 8005b1e:	603b      	str	r3, [r7, #0]
 8005b20:	4613      	mov	r3, r2
 8005b22:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005b24:	88fb      	ldrh	r3, [r7, #6]
 8005b26:	009b      	lsls	r3, r3, #2
 8005b28:	4618      	mov	r0, r3
 8005b2a:	f001 fc77 	bl	800741c <pvPortMalloc>
 8005b2e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005b30:	697b      	ldr	r3, [r7, #20]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d00e      	beq.n	8005b54 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005b36:	20a8      	movs	r0, #168	@ 0xa8
 8005b38:	f001 fc70 	bl	800741c <pvPortMalloc>
 8005b3c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005b3e:	69fb      	ldr	r3, [r7, #28]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d003      	beq.n	8005b4c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005b44:	69fb      	ldr	r3, [r7, #28]
 8005b46:	697a      	ldr	r2, [r7, #20]
 8005b48:	631a      	str	r2, [r3, #48]	@ 0x30
 8005b4a:	e005      	b.n	8005b58 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005b4c:	6978      	ldr	r0, [r7, #20]
 8005b4e:	f001 fd33 	bl	80075b8 <vPortFree>
 8005b52:	e001      	b.n	8005b58 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005b54:	2300      	movs	r3, #0
 8005b56:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005b58:	69fb      	ldr	r3, [r7, #28]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d017      	beq.n	8005b8e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005b5e:	69fb      	ldr	r3, [r7, #28]
 8005b60:	2200      	movs	r2, #0
 8005b62:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005b66:	88fa      	ldrh	r2, [r7, #6]
 8005b68:	2300      	movs	r3, #0
 8005b6a:	9303      	str	r3, [sp, #12]
 8005b6c:	69fb      	ldr	r3, [r7, #28]
 8005b6e:	9302      	str	r3, [sp, #8]
 8005b70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b72:	9301      	str	r3, [sp, #4]
 8005b74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b76:	9300      	str	r3, [sp, #0]
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	68b9      	ldr	r1, [r7, #8]
 8005b7c:	68f8      	ldr	r0, [r7, #12]
 8005b7e:	f000 f80f 	bl	8005ba0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005b82:	69f8      	ldr	r0, [r7, #28]
 8005b84:	f000 f8b4 	bl	8005cf0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005b88:	2301      	movs	r3, #1
 8005b8a:	61bb      	str	r3, [r7, #24]
 8005b8c:	e002      	b.n	8005b94 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005b8e:	f04f 33ff 	mov.w	r3, #4294967295
 8005b92:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005b94:	69bb      	ldr	r3, [r7, #24]
	}
 8005b96:	4618      	mov	r0, r3
 8005b98:	3720      	adds	r7, #32
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	bd80      	pop	{r7, pc}
	...

08005ba0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b088      	sub	sp, #32
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	60f8      	str	r0, [r7, #12]
 8005ba8:	60b9      	str	r1, [r7, #8]
 8005baa:	607a      	str	r2, [r7, #4]
 8005bac:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005bae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bb0:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	009b      	lsls	r3, r3, #2
 8005bb6:	461a      	mov	r2, r3
 8005bb8:	21a5      	movs	r1, #165	@ 0xa5
 8005bba:	f001 fe1d 	bl	80077f8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005bbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bc0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005bc8:	3b01      	subs	r3, #1
 8005bca:	009b      	lsls	r3, r3, #2
 8005bcc:	4413      	add	r3, r2
 8005bce:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005bd0:	69bb      	ldr	r3, [r7, #24]
 8005bd2:	f023 0307 	bic.w	r3, r3, #7
 8005bd6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005bd8:	69bb      	ldr	r3, [r7, #24]
 8005bda:	f003 0307 	and.w	r3, r3, #7
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d00b      	beq.n	8005bfa <prvInitialiseNewTask+0x5a>
	__asm volatile
 8005be2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005be6:	f383 8811 	msr	BASEPRI, r3
 8005bea:	f3bf 8f6f 	isb	sy
 8005bee:	f3bf 8f4f 	dsb	sy
 8005bf2:	617b      	str	r3, [r7, #20]
}
 8005bf4:	bf00      	nop
 8005bf6:	bf00      	nop
 8005bf8:	e7fd      	b.n	8005bf6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d01f      	beq.n	8005c40 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005c00:	2300      	movs	r3, #0
 8005c02:	61fb      	str	r3, [r7, #28]
 8005c04:	e012      	b.n	8005c2c <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005c06:	68ba      	ldr	r2, [r7, #8]
 8005c08:	69fb      	ldr	r3, [r7, #28]
 8005c0a:	4413      	add	r3, r2
 8005c0c:	7819      	ldrb	r1, [r3, #0]
 8005c0e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005c10:	69fb      	ldr	r3, [r7, #28]
 8005c12:	4413      	add	r3, r2
 8005c14:	3334      	adds	r3, #52	@ 0x34
 8005c16:	460a      	mov	r2, r1
 8005c18:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005c1a:	68ba      	ldr	r2, [r7, #8]
 8005c1c:	69fb      	ldr	r3, [r7, #28]
 8005c1e:	4413      	add	r3, r2
 8005c20:	781b      	ldrb	r3, [r3, #0]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d006      	beq.n	8005c34 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005c26:	69fb      	ldr	r3, [r7, #28]
 8005c28:	3301      	adds	r3, #1
 8005c2a:	61fb      	str	r3, [r7, #28]
 8005c2c:	69fb      	ldr	r3, [r7, #28]
 8005c2e:	2b0f      	cmp	r3, #15
 8005c30:	d9e9      	bls.n	8005c06 <prvInitialiseNewTask+0x66>
 8005c32:	e000      	b.n	8005c36 <prvInitialiseNewTask+0x96>
			{
				break;
 8005c34:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005c36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c38:	2200      	movs	r2, #0
 8005c3a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005c3e:	e003      	b.n	8005c48 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005c40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c42:	2200      	movs	r2, #0
 8005c44:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005c48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c4a:	2b37      	cmp	r3, #55	@ 0x37
 8005c4c:	d901      	bls.n	8005c52 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005c4e:	2337      	movs	r3, #55	@ 0x37
 8005c50:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005c52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c54:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005c56:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005c58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c5a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005c5c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005c5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c60:	2200      	movs	r2, #0
 8005c62:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005c64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c66:	3304      	adds	r3, #4
 8005c68:	4618      	mov	r0, r3
 8005c6a:	f7ff f965 	bl	8004f38 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005c6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c70:	3318      	adds	r3, #24
 8005c72:	4618      	mov	r0, r3
 8005c74:	f7ff f960 	bl	8004f38 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005c78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c7a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005c7c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c80:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005c84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c86:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005c88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c8a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005c8c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005c8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c90:	2200      	movs	r2, #0
 8005c92:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005c96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c98:	2200      	movs	r2, #0
 8005c9a:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005c9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ca0:	3354      	adds	r3, #84	@ 0x54
 8005ca2:	224c      	movs	r2, #76	@ 0x4c
 8005ca4:	2100      	movs	r1, #0
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	f001 fda6 	bl	80077f8 <memset>
 8005cac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cae:	4a0d      	ldr	r2, [pc, #52]	@ (8005ce4 <prvInitialiseNewTask+0x144>)
 8005cb0:	659a      	str	r2, [r3, #88]	@ 0x58
 8005cb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cb4:	4a0c      	ldr	r2, [pc, #48]	@ (8005ce8 <prvInitialiseNewTask+0x148>)
 8005cb6:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005cb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cba:	4a0c      	ldr	r2, [pc, #48]	@ (8005cec <prvInitialiseNewTask+0x14c>)
 8005cbc:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005cbe:	683a      	ldr	r2, [r7, #0]
 8005cc0:	68f9      	ldr	r1, [r7, #12]
 8005cc2:	69b8      	ldr	r0, [r7, #24]
 8005cc4:	f001 f95a 	bl	8006f7c <pxPortInitialiseStack>
 8005cc8:	4602      	mov	r2, r0
 8005cca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ccc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005cce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d002      	beq.n	8005cda <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005cd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cd6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005cd8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005cda:	bf00      	nop
 8005cdc:	3720      	adds	r7, #32
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	bd80      	pop	{r7, pc}
 8005ce2:	bf00      	nop
 8005ce4:	20001c1c 	.word	0x20001c1c
 8005ce8:	20001c84 	.word	0x20001c84
 8005cec:	20001cec 	.word	0x20001cec

08005cf0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b082      	sub	sp, #8
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005cf8:	f001 fa6e 	bl	80071d8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005cfc:	4b2d      	ldr	r3, [pc, #180]	@ (8005db4 <prvAddNewTaskToReadyList+0xc4>)
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	3301      	adds	r3, #1
 8005d02:	4a2c      	ldr	r2, [pc, #176]	@ (8005db4 <prvAddNewTaskToReadyList+0xc4>)
 8005d04:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005d06:	4b2c      	ldr	r3, [pc, #176]	@ (8005db8 <prvAddNewTaskToReadyList+0xc8>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d109      	bne.n	8005d22 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005d0e:	4a2a      	ldr	r2, [pc, #168]	@ (8005db8 <prvAddNewTaskToReadyList+0xc8>)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005d14:	4b27      	ldr	r3, [pc, #156]	@ (8005db4 <prvAddNewTaskToReadyList+0xc4>)
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	2b01      	cmp	r3, #1
 8005d1a:	d110      	bne.n	8005d3e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005d1c:	f000 fc2e 	bl	800657c <prvInitialiseTaskLists>
 8005d20:	e00d      	b.n	8005d3e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005d22:	4b26      	ldr	r3, [pc, #152]	@ (8005dbc <prvAddNewTaskToReadyList+0xcc>)
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d109      	bne.n	8005d3e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005d2a:	4b23      	ldr	r3, [pc, #140]	@ (8005db8 <prvAddNewTaskToReadyList+0xc8>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d34:	429a      	cmp	r2, r3
 8005d36:	d802      	bhi.n	8005d3e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005d38:	4a1f      	ldr	r2, [pc, #124]	@ (8005db8 <prvAddNewTaskToReadyList+0xc8>)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005d3e:	4b20      	ldr	r3, [pc, #128]	@ (8005dc0 <prvAddNewTaskToReadyList+0xd0>)
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	3301      	adds	r3, #1
 8005d44:	4a1e      	ldr	r2, [pc, #120]	@ (8005dc0 <prvAddNewTaskToReadyList+0xd0>)
 8005d46:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005d48:	4b1d      	ldr	r3, [pc, #116]	@ (8005dc0 <prvAddNewTaskToReadyList+0xd0>)
 8005d4a:	681a      	ldr	r2, [r3, #0]
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d54:	4b1b      	ldr	r3, [pc, #108]	@ (8005dc4 <prvAddNewTaskToReadyList+0xd4>)
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	429a      	cmp	r2, r3
 8005d5a:	d903      	bls.n	8005d64 <prvAddNewTaskToReadyList+0x74>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d60:	4a18      	ldr	r2, [pc, #96]	@ (8005dc4 <prvAddNewTaskToReadyList+0xd4>)
 8005d62:	6013      	str	r3, [r2, #0]
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d68:	4613      	mov	r3, r2
 8005d6a:	009b      	lsls	r3, r3, #2
 8005d6c:	4413      	add	r3, r2
 8005d6e:	009b      	lsls	r3, r3, #2
 8005d70:	4a15      	ldr	r2, [pc, #84]	@ (8005dc8 <prvAddNewTaskToReadyList+0xd8>)
 8005d72:	441a      	add	r2, r3
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	3304      	adds	r3, #4
 8005d78:	4619      	mov	r1, r3
 8005d7a:	4610      	mov	r0, r2
 8005d7c:	f7ff f8e9 	bl	8004f52 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005d80:	f001 fa5c 	bl	800723c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005d84:	4b0d      	ldr	r3, [pc, #52]	@ (8005dbc <prvAddNewTaskToReadyList+0xcc>)
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d00e      	beq.n	8005daa <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005d8c:	4b0a      	ldr	r3, [pc, #40]	@ (8005db8 <prvAddNewTaskToReadyList+0xc8>)
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d96:	429a      	cmp	r2, r3
 8005d98:	d207      	bcs.n	8005daa <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005d9a:	4b0c      	ldr	r3, [pc, #48]	@ (8005dcc <prvAddNewTaskToReadyList+0xdc>)
 8005d9c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005da0:	601a      	str	r2, [r3, #0]
 8005da2:	f3bf 8f4f 	dsb	sy
 8005da6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005daa:	bf00      	nop
 8005dac:	3708      	adds	r7, #8
 8005dae:	46bd      	mov	sp, r7
 8005db0:	bd80      	pop	{r7, pc}
 8005db2:	bf00      	nop
 8005db4:	20000ee4 	.word	0x20000ee4
 8005db8:	20000a10 	.word	0x20000a10
 8005dbc:	20000ef0 	.word	0x20000ef0
 8005dc0:	20000f00 	.word	0x20000f00
 8005dc4:	20000eec 	.word	0x20000eec
 8005dc8:	20000a14 	.word	0x20000a14
 8005dcc:	e000ed04 	.word	0xe000ed04

08005dd0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b084      	sub	sp, #16
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005dd8:	2300      	movs	r3, #0
 8005dda:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d018      	beq.n	8005e14 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005de2:	4b14      	ldr	r3, [pc, #80]	@ (8005e34 <vTaskDelay+0x64>)
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d00b      	beq.n	8005e02 <vTaskDelay+0x32>
	__asm volatile
 8005dea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dee:	f383 8811 	msr	BASEPRI, r3
 8005df2:	f3bf 8f6f 	isb	sy
 8005df6:	f3bf 8f4f 	dsb	sy
 8005dfa:	60bb      	str	r3, [r7, #8]
}
 8005dfc:	bf00      	nop
 8005dfe:	bf00      	nop
 8005e00:	e7fd      	b.n	8005dfe <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005e02:	f000 f88b 	bl	8005f1c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005e06:	2100      	movs	r1, #0
 8005e08:	6878      	ldr	r0, [r7, #4]
 8005e0a:	f000 fd09 	bl	8006820 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005e0e:	f000 f893 	bl	8005f38 <xTaskResumeAll>
 8005e12:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d107      	bne.n	8005e2a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8005e1a:	4b07      	ldr	r3, [pc, #28]	@ (8005e38 <vTaskDelay+0x68>)
 8005e1c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005e20:	601a      	str	r2, [r3, #0]
 8005e22:	f3bf 8f4f 	dsb	sy
 8005e26:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005e2a:	bf00      	nop
 8005e2c:	3710      	adds	r7, #16
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	bd80      	pop	{r7, pc}
 8005e32:	bf00      	nop
 8005e34:	20000f0c 	.word	0x20000f0c
 8005e38:	e000ed04 	.word	0xe000ed04

08005e3c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b08a      	sub	sp, #40	@ 0x28
 8005e40:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005e42:	2300      	movs	r3, #0
 8005e44:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005e46:	2300      	movs	r3, #0
 8005e48:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005e4a:	463a      	mov	r2, r7
 8005e4c:	1d39      	adds	r1, r7, #4
 8005e4e:	f107 0308 	add.w	r3, r7, #8
 8005e52:	4618      	mov	r0, r3
 8005e54:	f7ff f81c 	bl	8004e90 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005e58:	6839      	ldr	r1, [r7, #0]
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	68ba      	ldr	r2, [r7, #8]
 8005e5e:	9202      	str	r2, [sp, #8]
 8005e60:	9301      	str	r3, [sp, #4]
 8005e62:	2300      	movs	r3, #0
 8005e64:	9300      	str	r3, [sp, #0]
 8005e66:	2300      	movs	r3, #0
 8005e68:	460a      	mov	r2, r1
 8005e6a:	4924      	ldr	r1, [pc, #144]	@ (8005efc <vTaskStartScheduler+0xc0>)
 8005e6c:	4824      	ldr	r0, [pc, #144]	@ (8005f00 <vTaskStartScheduler+0xc4>)
 8005e6e:	f7ff fdf1 	bl	8005a54 <xTaskCreateStatic>
 8005e72:	4603      	mov	r3, r0
 8005e74:	4a23      	ldr	r2, [pc, #140]	@ (8005f04 <vTaskStartScheduler+0xc8>)
 8005e76:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005e78:	4b22      	ldr	r3, [pc, #136]	@ (8005f04 <vTaskStartScheduler+0xc8>)
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d002      	beq.n	8005e86 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005e80:	2301      	movs	r3, #1
 8005e82:	617b      	str	r3, [r7, #20]
 8005e84:	e001      	b.n	8005e8a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005e86:	2300      	movs	r3, #0
 8005e88:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005e8a:	697b      	ldr	r3, [r7, #20]
 8005e8c:	2b01      	cmp	r3, #1
 8005e8e:	d102      	bne.n	8005e96 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005e90:	f000 fd1a 	bl	80068c8 <xTimerCreateTimerTask>
 8005e94:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005e96:	697b      	ldr	r3, [r7, #20]
 8005e98:	2b01      	cmp	r3, #1
 8005e9a:	d11b      	bne.n	8005ed4 <vTaskStartScheduler+0x98>
	__asm volatile
 8005e9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ea0:	f383 8811 	msr	BASEPRI, r3
 8005ea4:	f3bf 8f6f 	isb	sy
 8005ea8:	f3bf 8f4f 	dsb	sy
 8005eac:	613b      	str	r3, [r7, #16]
}
 8005eae:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005eb0:	4b15      	ldr	r3, [pc, #84]	@ (8005f08 <vTaskStartScheduler+0xcc>)
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	3354      	adds	r3, #84	@ 0x54
 8005eb6:	4a15      	ldr	r2, [pc, #84]	@ (8005f0c <vTaskStartScheduler+0xd0>)
 8005eb8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005eba:	4b15      	ldr	r3, [pc, #84]	@ (8005f10 <vTaskStartScheduler+0xd4>)
 8005ebc:	f04f 32ff 	mov.w	r2, #4294967295
 8005ec0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005ec2:	4b14      	ldr	r3, [pc, #80]	@ (8005f14 <vTaskStartScheduler+0xd8>)
 8005ec4:	2201      	movs	r2, #1
 8005ec6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005ec8:	4b13      	ldr	r3, [pc, #76]	@ (8005f18 <vTaskStartScheduler+0xdc>)
 8005eca:	2200      	movs	r2, #0
 8005ecc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005ece:	f001 f8df 	bl	8007090 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005ed2:	e00f      	b.n	8005ef4 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005ed4:	697b      	ldr	r3, [r7, #20]
 8005ed6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005eda:	d10b      	bne.n	8005ef4 <vTaskStartScheduler+0xb8>
	__asm volatile
 8005edc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ee0:	f383 8811 	msr	BASEPRI, r3
 8005ee4:	f3bf 8f6f 	isb	sy
 8005ee8:	f3bf 8f4f 	dsb	sy
 8005eec:	60fb      	str	r3, [r7, #12]
}
 8005eee:	bf00      	nop
 8005ef0:	bf00      	nop
 8005ef2:	e7fd      	b.n	8005ef0 <vTaskStartScheduler+0xb4>
}
 8005ef4:	bf00      	nop
 8005ef6:	3718      	adds	r7, #24
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	bd80      	pop	{r7, pc}
 8005efc:	08007a24 	.word	0x08007a24
 8005f00:	0800654d 	.word	0x0800654d
 8005f04:	20000f08 	.word	0x20000f08
 8005f08:	20000a10 	.word	0x20000a10
 8005f0c:	20000020 	.word	0x20000020
 8005f10:	20000f04 	.word	0x20000f04
 8005f14:	20000ef0 	.word	0x20000ef0
 8005f18:	20000ee8 	.word	0x20000ee8

08005f1c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005f1c:	b480      	push	{r7}
 8005f1e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005f20:	4b04      	ldr	r3, [pc, #16]	@ (8005f34 <vTaskSuspendAll+0x18>)
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	3301      	adds	r3, #1
 8005f26:	4a03      	ldr	r2, [pc, #12]	@ (8005f34 <vTaskSuspendAll+0x18>)
 8005f28:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005f2a:	bf00      	nop
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f32:	4770      	bx	lr
 8005f34:	20000f0c 	.word	0x20000f0c

08005f38 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b084      	sub	sp, #16
 8005f3c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005f3e:	2300      	movs	r3, #0
 8005f40:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005f42:	2300      	movs	r3, #0
 8005f44:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005f46:	4b42      	ldr	r3, [pc, #264]	@ (8006050 <xTaskResumeAll+0x118>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d10b      	bne.n	8005f66 <xTaskResumeAll+0x2e>
	__asm volatile
 8005f4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f52:	f383 8811 	msr	BASEPRI, r3
 8005f56:	f3bf 8f6f 	isb	sy
 8005f5a:	f3bf 8f4f 	dsb	sy
 8005f5e:	603b      	str	r3, [r7, #0]
}
 8005f60:	bf00      	nop
 8005f62:	bf00      	nop
 8005f64:	e7fd      	b.n	8005f62 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005f66:	f001 f937 	bl	80071d8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005f6a:	4b39      	ldr	r3, [pc, #228]	@ (8006050 <xTaskResumeAll+0x118>)
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	3b01      	subs	r3, #1
 8005f70:	4a37      	ldr	r2, [pc, #220]	@ (8006050 <xTaskResumeAll+0x118>)
 8005f72:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005f74:	4b36      	ldr	r3, [pc, #216]	@ (8006050 <xTaskResumeAll+0x118>)
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d162      	bne.n	8006042 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005f7c:	4b35      	ldr	r3, [pc, #212]	@ (8006054 <xTaskResumeAll+0x11c>)
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d05e      	beq.n	8006042 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005f84:	e02f      	b.n	8005fe6 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f86:	4b34      	ldr	r3, [pc, #208]	@ (8006058 <xTaskResumeAll+0x120>)
 8005f88:	68db      	ldr	r3, [r3, #12]
 8005f8a:	68db      	ldr	r3, [r3, #12]
 8005f8c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	3318      	adds	r3, #24
 8005f92:	4618      	mov	r0, r3
 8005f94:	f7ff f83a 	bl	800500c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	3304      	adds	r3, #4
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	f7ff f835 	bl	800500c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005fa6:	4b2d      	ldr	r3, [pc, #180]	@ (800605c <xTaskResumeAll+0x124>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	429a      	cmp	r2, r3
 8005fac:	d903      	bls.n	8005fb6 <xTaskResumeAll+0x7e>
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fb2:	4a2a      	ldr	r2, [pc, #168]	@ (800605c <xTaskResumeAll+0x124>)
 8005fb4:	6013      	str	r3, [r2, #0]
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005fba:	4613      	mov	r3, r2
 8005fbc:	009b      	lsls	r3, r3, #2
 8005fbe:	4413      	add	r3, r2
 8005fc0:	009b      	lsls	r3, r3, #2
 8005fc2:	4a27      	ldr	r2, [pc, #156]	@ (8006060 <xTaskResumeAll+0x128>)
 8005fc4:	441a      	add	r2, r3
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	3304      	adds	r3, #4
 8005fca:	4619      	mov	r1, r3
 8005fcc:	4610      	mov	r0, r2
 8005fce:	f7fe ffc0 	bl	8004f52 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005fd6:	4b23      	ldr	r3, [pc, #140]	@ (8006064 <xTaskResumeAll+0x12c>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fdc:	429a      	cmp	r2, r3
 8005fde:	d302      	bcc.n	8005fe6 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8005fe0:	4b21      	ldr	r3, [pc, #132]	@ (8006068 <xTaskResumeAll+0x130>)
 8005fe2:	2201      	movs	r2, #1
 8005fe4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005fe6:	4b1c      	ldr	r3, [pc, #112]	@ (8006058 <xTaskResumeAll+0x120>)
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d1cb      	bne.n	8005f86 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d001      	beq.n	8005ff8 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005ff4:	f000 fb66 	bl	80066c4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005ff8:	4b1c      	ldr	r3, [pc, #112]	@ (800606c <xTaskResumeAll+0x134>)
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d010      	beq.n	8006026 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006004:	f000 f846 	bl	8006094 <xTaskIncrementTick>
 8006008:	4603      	mov	r3, r0
 800600a:	2b00      	cmp	r3, #0
 800600c:	d002      	beq.n	8006014 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800600e:	4b16      	ldr	r3, [pc, #88]	@ (8006068 <xTaskResumeAll+0x130>)
 8006010:	2201      	movs	r2, #1
 8006012:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	3b01      	subs	r3, #1
 8006018:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d1f1      	bne.n	8006004 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8006020:	4b12      	ldr	r3, [pc, #72]	@ (800606c <xTaskResumeAll+0x134>)
 8006022:	2200      	movs	r2, #0
 8006024:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006026:	4b10      	ldr	r3, [pc, #64]	@ (8006068 <xTaskResumeAll+0x130>)
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d009      	beq.n	8006042 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800602e:	2301      	movs	r3, #1
 8006030:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006032:	4b0f      	ldr	r3, [pc, #60]	@ (8006070 <xTaskResumeAll+0x138>)
 8006034:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006038:	601a      	str	r2, [r3, #0]
 800603a:	f3bf 8f4f 	dsb	sy
 800603e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006042:	f001 f8fb 	bl	800723c <vPortExitCritical>

	return xAlreadyYielded;
 8006046:	68bb      	ldr	r3, [r7, #8]
}
 8006048:	4618      	mov	r0, r3
 800604a:	3710      	adds	r7, #16
 800604c:	46bd      	mov	sp, r7
 800604e:	bd80      	pop	{r7, pc}
 8006050:	20000f0c 	.word	0x20000f0c
 8006054:	20000ee4 	.word	0x20000ee4
 8006058:	20000ea4 	.word	0x20000ea4
 800605c:	20000eec 	.word	0x20000eec
 8006060:	20000a14 	.word	0x20000a14
 8006064:	20000a10 	.word	0x20000a10
 8006068:	20000ef8 	.word	0x20000ef8
 800606c:	20000ef4 	.word	0x20000ef4
 8006070:	e000ed04 	.word	0xe000ed04

08006074 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006074:	b480      	push	{r7}
 8006076:	b083      	sub	sp, #12
 8006078:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800607a:	4b05      	ldr	r3, [pc, #20]	@ (8006090 <xTaskGetTickCount+0x1c>)
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006080:	687b      	ldr	r3, [r7, #4]
}
 8006082:	4618      	mov	r0, r3
 8006084:	370c      	adds	r7, #12
 8006086:	46bd      	mov	sp, r7
 8006088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608c:	4770      	bx	lr
 800608e:	bf00      	nop
 8006090:	20000ee8 	.word	0x20000ee8

08006094 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b086      	sub	sp, #24
 8006098:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800609a:	2300      	movs	r3, #0
 800609c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800609e:	4b4f      	ldr	r3, [pc, #316]	@ (80061dc <xTaskIncrementTick+0x148>)
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	f040 8090 	bne.w	80061c8 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80060a8:	4b4d      	ldr	r3, [pc, #308]	@ (80061e0 <xTaskIncrementTick+0x14c>)
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	3301      	adds	r3, #1
 80060ae:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80060b0:	4a4b      	ldr	r2, [pc, #300]	@ (80061e0 <xTaskIncrementTick+0x14c>)
 80060b2:	693b      	ldr	r3, [r7, #16]
 80060b4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80060b6:	693b      	ldr	r3, [r7, #16]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d121      	bne.n	8006100 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80060bc:	4b49      	ldr	r3, [pc, #292]	@ (80061e4 <xTaskIncrementTick+0x150>)
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d00b      	beq.n	80060de <xTaskIncrementTick+0x4a>
	__asm volatile
 80060c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060ca:	f383 8811 	msr	BASEPRI, r3
 80060ce:	f3bf 8f6f 	isb	sy
 80060d2:	f3bf 8f4f 	dsb	sy
 80060d6:	603b      	str	r3, [r7, #0]
}
 80060d8:	bf00      	nop
 80060da:	bf00      	nop
 80060dc:	e7fd      	b.n	80060da <xTaskIncrementTick+0x46>
 80060de:	4b41      	ldr	r3, [pc, #260]	@ (80061e4 <xTaskIncrementTick+0x150>)
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	60fb      	str	r3, [r7, #12]
 80060e4:	4b40      	ldr	r3, [pc, #256]	@ (80061e8 <xTaskIncrementTick+0x154>)
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	4a3e      	ldr	r2, [pc, #248]	@ (80061e4 <xTaskIncrementTick+0x150>)
 80060ea:	6013      	str	r3, [r2, #0]
 80060ec:	4a3e      	ldr	r2, [pc, #248]	@ (80061e8 <xTaskIncrementTick+0x154>)
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	6013      	str	r3, [r2, #0]
 80060f2:	4b3e      	ldr	r3, [pc, #248]	@ (80061ec <xTaskIncrementTick+0x158>)
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	3301      	adds	r3, #1
 80060f8:	4a3c      	ldr	r2, [pc, #240]	@ (80061ec <xTaskIncrementTick+0x158>)
 80060fa:	6013      	str	r3, [r2, #0]
 80060fc:	f000 fae2 	bl	80066c4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006100:	4b3b      	ldr	r3, [pc, #236]	@ (80061f0 <xTaskIncrementTick+0x15c>)
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	693a      	ldr	r2, [r7, #16]
 8006106:	429a      	cmp	r2, r3
 8006108:	d349      	bcc.n	800619e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800610a:	4b36      	ldr	r3, [pc, #216]	@ (80061e4 <xTaskIncrementTick+0x150>)
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d104      	bne.n	800611e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006114:	4b36      	ldr	r3, [pc, #216]	@ (80061f0 <xTaskIncrementTick+0x15c>)
 8006116:	f04f 32ff 	mov.w	r2, #4294967295
 800611a:	601a      	str	r2, [r3, #0]
					break;
 800611c:	e03f      	b.n	800619e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800611e:	4b31      	ldr	r3, [pc, #196]	@ (80061e4 <xTaskIncrementTick+0x150>)
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	68db      	ldr	r3, [r3, #12]
 8006124:	68db      	ldr	r3, [r3, #12]
 8006126:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006128:	68bb      	ldr	r3, [r7, #8]
 800612a:	685b      	ldr	r3, [r3, #4]
 800612c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800612e:	693a      	ldr	r2, [r7, #16]
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	429a      	cmp	r2, r3
 8006134:	d203      	bcs.n	800613e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006136:	4a2e      	ldr	r2, [pc, #184]	@ (80061f0 <xTaskIncrementTick+0x15c>)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800613c:	e02f      	b.n	800619e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800613e:	68bb      	ldr	r3, [r7, #8]
 8006140:	3304      	adds	r3, #4
 8006142:	4618      	mov	r0, r3
 8006144:	f7fe ff62 	bl	800500c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006148:	68bb      	ldr	r3, [r7, #8]
 800614a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800614c:	2b00      	cmp	r3, #0
 800614e:	d004      	beq.n	800615a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006150:	68bb      	ldr	r3, [r7, #8]
 8006152:	3318      	adds	r3, #24
 8006154:	4618      	mov	r0, r3
 8006156:	f7fe ff59 	bl	800500c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800615a:	68bb      	ldr	r3, [r7, #8]
 800615c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800615e:	4b25      	ldr	r3, [pc, #148]	@ (80061f4 <xTaskIncrementTick+0x160>)
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	429a      	cmp	r2, r3
 8006164:	d903      	bls.n	800616e <xTaskIncrementTick+0xda>
 8006166:	68bb      	ldr	r3, [r7, #8]
 8006168:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800616a:	4a22      	ldr	r2, [pc, #136]	@ (80061f4 <xTaskIncrementTick+0x160>)
 800616c:	6013      	str	r3, [r2, #0]
 800616e:	68bb      	ldr	r3, [r7, #8]
 8006170:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006172:	4613      	mov	r3, r2
 8006174:	009b      	lsls	r3, r3, #2
 8006176:	4413      	add	r3, r2
 8006178:	009b      	lsls	r3, r3, #2
 800617a:	4a1f      	ldr	r2, [pc, #124]	@ (80061f8 <xTaskIncrementTick+0x164>)
 800617c:	441a      	add	r2, r3
 800617e:	68bb      	ldr	r3, [r7, #8]
 8006180:	3304      	adds	r3, #4
 8006182:	4619      	mov	r1, r3
 8006184:	4610      	mov	r0, r2
 8006186:	f7fe fee4 	bl	8004f52 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800618a:	68bb      	ldr	r3, [r7, #8]
 800618c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800618e:	4b1b      	ldr	r3, [pc, #108]	@ (80061fc <xTaskIncrementTick+0x168>)
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006194:	429a      	cmp	r2, r3
 8006196:	d3b8      	bcc.n	800610a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8006198:	2301      	movs	r3, #1
 800619a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800619c:	e7b5      	b.n	800610a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800619e:	4b17      	ldr	r3, [pc, #92]	@ (80061fc <xTaskIncrementTick+0x168>)
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80061a4:	4914      	ldr	r1, [pc, #80]	@ (80061f8 <xTaskIncrementTick+0x164>)
 80061a6:	4613      	mov	r3, r2
 80061a8:	009b      	lsls	r3, r3, #2
 80061aa:	4413      	add	r3, r2
 80061ac:	009b      	lsls	r3, r3, #2
 80061ae:	440b      	add	r3, r1
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	2b01      	cmp	r3, #1
 80061b4:	d901      	bls.n	80061ba <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80061b6:	2301      	movs	r3, #1
 80061b8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80061ba:	4b11      	ldr	r3, [pc, #68]	@ (8006200 <xTaskIncrementTick+0x16c>)
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d007      	beq.n	80061d2 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80061c2:	2301      	movs	r3, #1
 80061c4:	617b      	str	r3, [r7, #20]
 80061c6:	e004      	b.n	80061d2 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80061c8:	4b0e      	ldr	r3, [pc, #56]	@ (8006204 <xTaskIncrementTick+0x170>)
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	3301      	adds	r3, #1
 80061ce:	4a0d      	ldr	r2, [pc, #52]	@ (8006204 <xTaskIncrementTick+0x170>)
 80061d0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80061d2:	697b      	ldr	r3, [r7, #20]
}
 80061d4:	4618      	mov	r0, r3
 80061d6:	3718      	adds	r7, #24
 80061d8:	46bd      	mov	sp, r7
 80061da:	bd80      	pop	{r7, pc}
 80061dc:	20000f0c 	.word	0x20000f0c
 80061e0:	20000ee8 	.word	0x20000ee8
 80061e4:	20000e9c 	.word	0x20000e9c
 80061e8:	20000ea0 	.word	0x20000ea0
 80061ec:	20000efc 	.word	0x20000efc
 80061f0:	20000f04 	.word	0x20000f04
 80061f4:	20000eec 	.word	0x20000eec
 80061f8:	20000a14 	.word	0x20000a14
 80061fc:	20000a10 	.word	0x20000a10
 8006200:	20000ef8 	.word	0x20000ef8
 8006204:	20000ef4 	.word	0x20000ef4

08006208 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006208:	b480      	push	{r7}
 800620a:	b085      	sub	sp, #20
 800620c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800620e:	4b2b      	ldr	r3, [pc, #172]	@ (80062bc <vTaskSwitchContext+0xb4>)
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d003      	beq.n	800621e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006216:	4b2a      	ldr	r3, [pc, #168]	@ (80062c0 <vTaskSwitchContext+0xb8>)
 8006218:	2201      	movs	r2, #1
 800621a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800621c:	e047      	b.n	80062ae <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800621e:	4b28      	ldr	r3, [pc, #160]	@ (80062c0 <vTaskSwitchContext+0xb8>)
 8006220:	2200      	movs	r2, #0
 8006222:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006224:	4b27      	ldr	r3, [pc, #156]	@ (80062c4 <vTaskSwitchContext+0xbc>)
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	60fb      	str	r3, [r7, #12]
 800622a:	e011      	b.n	8006250 <vTaskSwitchContext+0x48>
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d10b      	bne.n	800624a <vTaskSwitchContext+0x42>
	__asm volatile
 8006232:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006236:	f383 8811 	msr	BASEPRI, r3
 800623a:	f3bf 8f6f 	isb	sy
 800623e:	f3bf 8f4f 	dsb	sy
 8006242:	607b      	str	r3, [r7, #4]
}
 8006244:	bf00      	nop
 8006246:	bf00      	nop
 8006248:	e7fd      	b.n	8006246 <vTaskSwitchContext+0x3e>
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	3b01      	subs	r3, #1
 800624e:	60fb      	str	r3, [r7, #12]
 8006250:	491d      	ldr	r1, [pc, #116]	@ (80062c8 <vTaskSwitchContext+0xc0>)
 8006252:	68fa      	ldr	r2, [r7, #12]
 8006254:	4613      	mov	r3, r2
 8006256:	009b      	lsls	r3, r3, #2
 8006258:	4413      	add	r3, r2
 800625a:	009b      	lsls	r3, r3, #2
 800625c:	440b      	add	r3, r1
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d0e3      	beq.n	800622c <vTaskSwitchContext+0x24>
 8006264:	68fa      	ldr	r2, [r7, #12]
 8006266:	4613      	mov	r3, r2
 8006268:	009b      	lsls	r3, r3, #2
 800626a:	4413      	add	r3, r2
 800626c:	009b      	lsls	r3, r3, #2
 800626e:	4a16      	ldr	r2, [pc, #88]	@ (80062c8 <vTaskSwitchContext+0xc0>)
 8006270:	4413      	add	r3, r2
 8006272:	60bb      	str	r3, [r7, #8]
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	685b      	ldr	r3, [r3, #4]
 8006278:	685a      	ldr	r2, [r3, #4]
 800627a:	68bb      	ldr	r3, [r7, #8]
 800627c:	605a      	str	r2, [r3, #4]
 800627e:	68bb      	ldr	r3, [r7, #8]
 8006280:	685a      	ldr	r2, [r3, #4]
 8006282:	68bb      	ldr	r3, [r7, #8]
 8006284:	3308      	adds	r3, #8
 8006286:	429a      	cmp	r2, r3
 8006288:	d104      	bne.n	8006294 <vTaskSwitchContext+0x8c>
 800628a:	68bb      	ldr	r3, [r7, #8]
 800628c:	685b      	ldr	r3, [r3, #4]
 800628e:	685a      	ldr	r2, [r3, #4]
 8006290:	68bb      	ldr	r3, [r7, #8]
 8006292:	605a      	str	r2, [r3, #4]
 8006294:	68bb      	ldr	r3, [r7, #8]
 8006296:	685b      	ldr	r3, [r3, #4]
 8006298:	68db      	ldr	r3, [r3, #12]
 800629a:	4a0c      	ldr	r2, [pc, #48]	@ (80062cc <vTaskSwitchContext+0xc4>)
 800629c:	6013      	str	r3, [r2, #0]
 800629e:	4a09      	ldr	r2, [pc, #36]	@ (80062c4 <vTaskSwitchContext+0xbc>)
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80062a4:	4b09      	ldr	r3, [pc, #36]	@ (80062cc <vTaskSwitchContext+0xc4>)
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	3354      	adds	r3, #84	@ 0x54
 80062aa:	4a09      	ldr	r2, [pc, #36]	@ (80062d0 <vTaskSwitchContext+0xc8>)
 80062ac:	6013      	str	r3, [r2, #0]
}
 80062ae:	bf00      	nop
 80062b0:	3714      	adds	r7, #20
 80062b2:	46bd      	mov	sp, r7
 80062b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b8:	4770      	bx	lr
 80062ba:	bf00      	nop
 80062bc:	20000f0c 	.word	0x20000f0c
 80062c0:	20000ef8 	.word	0x20000ef8
 80062c4:	20000eec 	.word	0x20000eec
 80062c8:	20000a14 	.word	0x20000a14
 80062cc:	20000a10 	.word	0x20000a10
 80062d0:	20000020 	.word	0x20000020

080062d4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b084      	sub	sp, #16
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
 80062dc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d10b      	bne.n	80062fc <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80062e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062e8:	f383 8811 	msr	BASEPRI, r3
 80062ec:	f3bf 8f6f 	isb	sy
 80062f0:	f3bf 8f4f 	dsb	sy
 80062f4:	60fb      	str	r3, [r7, #12]
}
 80062f6:	bf00      	nop
 80062f8:	bf00      	nop
 80062fa:	e7fd      	b.n	80062f8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80062fc:	4b07      	ldr	r3, [pc, #28]	@ (800631c <vTaskPlaceOnEventList+0x48>)
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	3318      	adds	r3, #24
 8006302:	4619      	mov	r1, r3
 8006304:	6878      	ldr	r0, [r7, #4]
 8006306:	f7fe fe48 	bl	8004f9a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800630a:	2101      	movs	r1, #1
 800630c:	6838      	ldr	r0, [r7, #0]
 800630e:	f000 fa87 	bl	8006820 <prvAddCurrentTaskToDelayedList>
}
 8006312:	bf00      	nop
 8006314:	3710      	adds	r7, #16
 8006316:	46bd      	mov	sp, r7
 8006318:	bd80      	pop	{r7, pc}
 800631a:	bf00      	nop
 800631c:	20000a10 	.word	0x20000a10

08006320 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006320:	b580      	push	{r7, lr}
 8006322:	b086      	sub	sp, #24
 8006324:	af00      	add	r7, sp, #0
 8006326:	60f8      	str	r0, [r7, #12]
 8006328:	60b9      	str	r1, [r7, #8]
 800632a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d10b      	bne.n	800634a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8006332:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006336:	f383 8811 	msr	BASEPRI, r3
 800633a:	f3bf 8f6f 	isb	sy
 800633e:	f3bf 8f4f 	dsb	sy
 8006342:	617b      	str	r3, [r7, #20]
}
 8006344:	bf00      	nop
 8006346:	bf00      	nop
 8006348:	e7fd      	b.n	8006346 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800634a:	4b0a      	ldr	r3, [pc, #40]	@ (8006374 <vTaskPlaceOnEventListRestricted+0x54>)
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	3318      	adds	r3, #24
 8006350:	4619      	mov	r1, r3
 8006352:	68f8      	ldr	r0, [r7, #12]
 8006354:	f7fe fdfd 	bl	8004f52 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d002      	beq.n	8006364 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800635e:	f04f 33ff 	mov.w	r3, #4294967295
 8006362:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006364:	6879      	ldr	r1, [r7, #4]
 8006366:	68b8      	ldr	r0, [r7, #8]
 8006368:	f000 fa5a 	bl	8006820 <prvAddCurrentTaskToDelayedList>
	}
 800636c:	bf00      	nop
 800636e:	3718      	adds	r7, #24
 8006370:	46bd      	mov	sp, r7
 8006372:	bd80      	pop	{r7, pc}
 8006374:	20000a10 	.word	0x20000a10

08006378 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006378:	b580      	push	{r7, lr}
 800637a:	b086      	sub	sp, #24
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	68db      	ldr	r3, [r3, #12]
 8006384:	68db      	ldr	r3, [r3, #12]
 8006386:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006388:	693b      	ldr	r3, [r7, #16]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d10b      	bne.n	80063a6 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800638e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006392:	f383 8811 	msr	BASEPRI, r3
 8006396:	f3bf 8f6f 	isb	sy
 800639a:	f3bf 8f4f 	dsb	sy
 800639e:	60fb      	str	r3, [r7, #12]
}
 80063a0:	bf00      	nop
 80063a2:	bf00      	nop
 80063a4:	e7fd      	b.n	80063a2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80063a6:	693b      	ldr	r3, [r7, #16]
 80063a8:	3318      	adds	r3, #24
 80063aa:	4618      	mov	r0, r3
 80063ac:	f7fe fe2e 	bl	800500c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80063b0:	4b1d      	ldr	r3, [pc, #116]	@ (8006428 <xTaskRemoveFromEventList+0xb0>)
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d11d      	bne.n	80063f4 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80063b8:	693b      	ldr	r3, [r7, #16]
 80063ba:	3304      	adds	r3, #4
 80063bc:	4618      	mov	r0, r3
 80063be:	f7fe fe25 	bl	800500c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80063c2:	693b      	ldr	r3, [r7, #16]
 80063c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80063c6:	4b19      	ldr	r3, [pc, #100]	@ (800642c <xTaskRemoveFromEventList+0xb4>)
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	429a      	cmp	r2, r3
 80063cc:	d903      	bls.n	80063d6 <xTaskRemoveFromEventList+0x5e>
 80063ce:	693b      	ldr	r3, [r7, #16]
 80063d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063d2:	4a16      	ldr	r2, [pc, #88]	@ (800642c <xTaskRemoveFromEventList+0xb4>)
 80063d4:	6013      	str	r3, [r2, #0]
 80063d6:	693b      	ldr	r3, [r7, #16]
 80063d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80063da:	4613      	mov	r3, r2
 80063dc:	009b      	lsls	r3, r3, #2
 80063de:	4413      	add	r3, r2
 80063e0:	009b      	lsls	r3, r3, #2
 80063e2:	4a13      	ldr	r2, [pc, #76]	@ (8006430 <xTaskRemoveFromEventList+0xb8>)
 80063e4:	441a      	add	r2, r3
 80063e6:	693b      	ldr	r3, [r7, #16]
 80063e8:	3304      	adds	r3, #4
 80063ea:	4619      	mov	r1, r3
 80063ec:	4610      	mov	r0, r2
 80063ee:	f7fe fdb0 	bl	8004f52 <vListInsertEnd>
 80063f2:	e005      	b.n	8006400 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80063f4:	693b      	ldr	r3, [r7, #16]
 80063f6:	3318      	adds	r3, #24
 80063f8:	4619      	mov	r1, r3
 80063fa:	480e      	ldr	r0, [pc, #56]	@ (8006434 <xTaskRemoveFromEventList+0xbc>)
 80063fc:	f7fe fda9 	bl	8004f52 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006400:	693b      	ldr	r3, [r7, #16]
 8006402:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006404:	4b0c      	ldr	r3, [pc, #48]	@ (8006438 <xTaskRemoveFromEventList+0xc0>)
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800640a:	429a      	cmp	r2, r3
 800640c:	d905      	bls.n	800641a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800640e:	2301      	movs	r3, #1
 8006410:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006412:	4b0a      	ldr	r3, [pc, #40]	@ (800643c <xTaskRemoveFromEventList+0xc4>)
 8006414:	2201      	movs	r2, #1
 8006416:	601a      	str	r2, [r3, #0]
 8006418:	e001      	b.n	800641e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800641a:	2300      	movs	r3, #0
 800641c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800641e:	697b      	ldr	r3, [r7, #20]
}
 8006420:	4618      	mov	r0, r3
 8006422:	3718      	adds	r7, #24
 8006424:	46bd      	mov	sp, r7
 8006426:	bd80      	pop	{r7, pc}
 8006428:	20000f0c 	.word	0x20000f0c
 800642c:	20000eec 	.word	0x20000eec
 8006430:	20000a14 	.word	0x20000a14
 8006434:	20000ea4 	.word	0x20000ea4
 8006438:	20000a10 	.word	0x20000a10
 800643c:	20000ef8 	.word	0x20000ef8

08006440 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006440:	b480      	push	{r7}
 8006442:	b083      	sub	sp, #12
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006448:	4b06      	ldr	r3, [pc, #24]	@ (8006464 <vTaskInternalSetTimeOutState+0x24>)
 800644a:	681a      	ldr	r2, [r3, #0]
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006450:	4b05      	ldr	r3, [pc, #20]	@ (8006468 <vTaskInternalSetTimeOutState+0x28>)
 8006452:	681a      	ldr	r2, [r3, #0]
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	605a      	str	r2, [r3, #4]
}
 8006458:	bf00      	nop
 800645a:	370c      	adds	r7, #12
 800645c:	46bd      	mov	sp, r7
 800645e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006462:	4770      	bx	lr
 8006464:	20000efc 	.word	0x20000efc
 8006468:	20000ee8 	.word	0x20000ee8

0800646c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b088      	sub	sp, #32
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
 8006474:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d10b      	bne.n	8006494 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800647c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006480:	f383 8811 	msr	BASEPRI, r3
 8006484:	f3bf 8f6f 	isb	sy
 8006488:	f3bf 8f4f 	dsb	sy
 800648c:	613b      	str	r3, [r7, #16]
}
 800648e:	bf00      	nop
 8006490:	bf00      	nop
 8006492:	e7fd      	b.n	8006490 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d10b      	bne.n	80064b2 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800649a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800649e:	f383 8811 	msr	BASEPRI, r3
 80064a2:	f3bf 8f6f 	isb	sy
 80064a6:	f3bf 8f4f 	dsb	sy
 80064aa:	60fb      	str	r3, [r7, #12]
}
 80064ac:	bf00      	nop
 80064ae:	bf00      	nop
 80064b0:	e7fd      	b.n	80064ae <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80064b2:	f000 fe91 	bl	80071d8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80064b6:	4b1d      	ldr	r3, [pc, #116]	@ (800652c <xTaskCheckForTimeOut+0xc0>)
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	685b      	ldr	r3, [r3, #4]
 80064c0:	69ba      	ldr	r2, [r7, #24]
 80064c2:	1ad3      	subs	r3, r2, r3
 80064c4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064ce:	d102      	bne.n	80064d6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80064d0:	2300      	movs	r3, #0
 80064d2:	61fb      	str	r3, [r7, #28]
 80064d4:	e023      	b.n	800651e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681a      	ldr	r2, [r3, #0]
 80064da:	4b15      	ldr	r3, [pc, #84]	@ (8006530 <xTaskCheckForTimeOut+0xc4>)
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	429a      	cmp	r2, r3
 80064e0:	d007      	beq.n	80064f2 <xTaskCheckForTimeOut+0x86>
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	685b      	ldr	r3, [r3, #4]
 80064e6:	69ba      	ldr	r2, [r7, #24]
 80064e8:	429a      	cmp	r2, r3
 80064ea:	d302      	bcc.n	80064f2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80064ec:	2301      	movs	r3, #1
 80064ee:	61fb      	str	r3, [r7, #28]
 80064f0:	e015      	b.n	800651e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	697a      	ldr	r2, [r7, #20]
 80064f8:	429a      	cmp	r2, r3
 80064fa:	d20b      	bcs.n	8006514 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	681a      	ldr	r2, [r3, #0]
 8006500:	697b      	ldr	r3, [r7, #20]
 8006502:	1ad2      	subs	r2, r2, r3
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006508:	6878      	ldr	r0, [r7, #4]
 800650a:	f7ff ff99 	bl	8006440 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800650e:	2300      	movs	r3, #0
 8006510:	61fb      	str	r3, [r7, #28]
 8006512:	e004      	b.n	800651e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	2200      	movs	r2, #0
 8006518:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800651a:	2301      	movs	r3, #1
 800651c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800651e:	f000 fe8d 	bl	800723c <vPortExitCritical>

	return xReturn;
 8006522:	69fb      	ldr	r3, [r7, #28]
}
 8006524:	4618      	mov	r0, r3
 8006526:	3720      	adds	r7, #32
 8006528:	46bd      	mov	sp, r7
 800652a:	bd80      	pop	{r7, pc}
 800652c:	20000ee8 	.word	0x20000ee8
 8006530:	20000efc 	.word	0x20000efc

08006534 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006534:	b480      	push	{r7}
 8006536:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006538:	4b03      	ldr	r3, [pc, #12]	@ (8006548 <vTaskMissedYield+0x14>)
 800653a:	2201      	movs	r2, #1
 800653c:	601a      	str	r2, [r3, #0]
}
 800653e:	bf00      	nop
 8006540:	46bd      	mov	sp, r7
 8006542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006546:	4770      	bx	lr
 8006548:	20000ef8 	.word	0x20000ef8

0800654c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800654c:	b580      	push	{r7, lr}
 800654e:	b082      	sub	sp, #8
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006554:	f000 f852 	bl	80065fc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006558:	4b06      	ldr	r3, [pc, #24]	@ (8006574 <prvIdleTask+0x28>)
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	2b01      	cmp	r3, #1
 800655e:	d9f9      	bls.n	8006554 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006560:	4b05      	ldr	r3, [pc, #20]	@ (8006578 <prvIdleTask+0x2c>)
 8006562:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006566:	601a      	str	r2, [r3, #0]
 8006568:	f3bf 8f4f 	dsb	sy
 800656c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006570:	e7f0      	b.n	8006554 <prvIdleTask+0x8>
 8006572:	bf00      	nop
 8006574:	20000a14 	.word	0x20000a14
 8006578:	e000ed04 	.word	0xe000ed04

0800657c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800657c:	b580      	push	{r7, lr}
 800657e:	b082      	sub	sp, #8
 8006580:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006582:	2300      	movs	r3, #0
 8006584:	607b      	str	r3, [r7, #4]
 8006586:	e00c      	b.n	80065a2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006588:	687a      	ldr	r2, [r7, #4]
 800658a:	4613      	mov	r3, r2
 800658c:	009b      	lsls	r3, r3, #2
 800658e:	4413      	add	r3, r2
 8006590:	009b      	lsls	r3, r3, #2
 8006592:	4a12      	ldr	r2, [pc, #72]	@ (80065dc <prvInitialiseTaskLists+0x60>)
 8006594:	4413      	add	r3, r2
 8006596:	4618      	mov	r0, r3
 8006598:	f7fe fcae 	bl	8004ef8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	3301      	adds	r3, #1
 80065a0:	607b      	str	r3, [r7, #4]
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	2b37      	cmp	r3, #55	@ 0x37
 80065a6:	d9ef      	bls.n	8006588 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80065a8:	480d      	ldr	r0, [pc, #52]	@ (80065e0 <prvInitialiseTaskLists+0x64>)
 80065aa:	f7fe fca5 	bl	8004ef8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80065ae:	480d      	ldr	r0, [pc, #52]	@ (80065e4 <prvInitialiseTaskLists+0x68>)
 80065b0:	f7fe fca2 	bl	8004ef8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80065b4:	480c      	ldr	r0, [pc, #48]	@ (80065e8 <prvInitialiseTaskLists+0x6c>)
 80065b6:	f7fe fc9f 	bl	8004ef8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80065ba:	480c      	ldr	r0, [pc, #48]	@ (80065ec <prvInitialiseTaskLists+0x70>)
 80065bc:	f7fe fc9c 	bl	8004ef8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80065c0:	480b      	ldr	r0, [pc, #44]	@ (80065f0 <prvInitialiseTaskLists+0x74>)
 80065c2:	f7fe fc99 	bl	8004ef8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80065c6:	4b0b      	ldr	r3, [pc, #44]	@ (80065f4 <prvInitialiseTaskLists+0x78>)
 80065c8:	4a05      	ldr	r2, [pc, #20]	@ (80065e0 <prvInitialiseTaskLists+0x64>)
 80065ca:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80065cc:	4b0a      	ldr	r3, [pc, #40]	@ (80065f8 <prvInitialiseTaskLists+0x7c>)
 80065ce:	4a05      	ldr	r2, [pc, #20]	@ (80065e4 <prvInitialiseTaskLists+0x68>)
 80065d0:	601a      	str	r2, [r3, #0]
}
 80065d2:	bf00      	nop
 80065d4:	3708      	adds	r7, #8
 80065d6:	46bd      	mov	sp, r7
 80065d8:	bd80      	pop	{r7, pc}
 80065da:	bf00      	nop
 80065dc:	20000a14 	.word	0x20000a14
 80065e0:	20000e74 	.word	0x20000e74
 80065e4:	20000e88 	.word	0x20000e88
 80065e8:	20000ea4 	.word	0x20000ea4
 80065ec:	20000eb8 	.word	0x20000eb8
 80065f0:	20000ed0 	.word	0x20000ed0
 80065f4:	20000e9c 	.word	0x20000e9c
 80065f8:	20000ea0 	.word	0x20000ea0

080065fc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b082      	sub	sp, #8
 8006600:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006602:	e019      	b.n	8006638 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006604:	f000 fde8 	bl	80071d8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006608:	4b10      	ldr	r3, [pc, #64]	@ (800664c <prvCheckTasksWaitingTermination+0x50>)
 800660a:	68db      	ldr	r3, [r3, #12]
 800660c:	68db      	ldr	r3, [r3, #12]
 800660e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	3304      	adds	r3, #4
 8006614:	4618      	mov	r0, r3
 8006616:	f7fe fcf9 	bl	800500c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800661a:	4b0d      	ldr	r3, [pc, #52]	@ (8006650 <prvCheckTasksWaitingTermination+0x54>)
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	3b01      	subs	r3, #1
 8006620:	4a0b      	ldr	r2, [pc, #44]	@ (8006650 <prvCheckTasksWaitingTermination+0x54>)
 8006622:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006624:	4b0b      	ldr	r3, [pc, #44]	@ (8006654 <prvCheckTasksWaitingTermination+0x58>)
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	3b01      	subs	r3, #1
 800662a:	4a0a      	ldr	r2, [pc, #40]	@ (8006654 <prvCheckTasksWaitingTermination+0x58>)
 800662c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800662e:	f000 fe05 	bl	800723c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006632:	6878      	ldr	r0, [r7, #4]
 8006634:	f000 f810 	bl	8006658 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006638:	4b06      	ldr	r3, [pc, #24]	@ (8006654 <prvCheckTasksWaitingTermination+0x58>)
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d1e1      	bne.n	8006604 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006640:	bf00      	nop
 8006642:	bf00      	nop
 8006644:	3708      	adds	r7, #8
 8006646:	46bd      	mov	sp, r7
 8006648:	bd80      	pop	{r7, pc}
 800664a:	bf00      	nop
 800664c:	20000eb8 	.word	0x20000eb8
 8006650:	20000ee4 	.word	0x20000ee4
 8006654:	20000ecc 	.word	0x20000ecc

08006658 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006658:	b580      	push	{r7, lr}
 800665a:	b084      	sub	sp, #16
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	3354      	adds	r3, #84	@ 0x54
 8006664:	4618      	mov	r0, r3
 8006666:	f001 f8cf 	bl	8007808 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006670:	2b00      	cmp	r3, #0
 8006672:	d108      	bne.n	8006686 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006678:	4618      	mov	r0, r3
 800667a:	f000 ff9d 	bl	80075b8 <vPortFree>
				vPortFree( pxTCB );
 800667e:	6878      	ldr	r0, [r7, #4]
 8006680:	f000 ff9a 	bl	80075b8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006684:	e019      	b.n	80066ba <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800668c:	2b01      	cmp	r3, #1
 800668e:	d103      	bne.n	8006698 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006690:	6878      	ldr	r0, [r7, #4]
 8006692:	f000 ff91 	bl	80075b8 <vPortFree>
	}
 8006696:	e010      	b.n	80066ba <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800669e:	2b02      	cmp	r3, #2
 80066a0:	d00b      	beq.n	80066ba <prvDeleteTCB+0x62>
	__asm volatile
 80066a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066a6:	f383 8811 	msr	BASEPRI, r3
 80066aa:	f3bf 8f6f 	isb	sy
 80066ae:	f3bf 8f4f 	dsb	sy
 80066b2:	60fb      	str	r3, [r7, #12]
}
 80066b4:	bf00      	nop
 80066b6:	bf00      	nop
 80066b8:	e7fd      	b.n	80066b6 <prvDeleteTCB+0x5e>
	}
 80066ba:	bf00      	nop
 80066bc:	3710      	adds	r7, #16
 80066be:	46bd      	mov	sp, r7
 80066c0:	bd80      	pop	{r7, pc}
	...

080066c4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80066c4:	b480      	push	{r7}
 80066c6:	b083      	sub	sp, #12
 80066c8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80066ca:	4b0c      	ldr	r3, [pc, #48]	@ (80066fc <prvResetNextTaskUnblockTime+0x38>)
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d104      	bne.n	80066de <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80066d4:	4b0a      	ldr	r3, [pc, #40]	@ (8006700 <prvResetNextTaskUnblockTime+0x3c>)
 80066d6:	f04f 32ff 	mov.w	r2, #4294967295
 80066da:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80066dc:	e008      	b.n	80066f0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80066de:	4b07      	ldr	r3, [pc, #28]	@ (80066fc <prvResetNextTaskUnblockTime+0x38>)
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	68db      	ldr	r3, [r3, #12]
 80066e4:	68db      	ldr	r3, [r3, #12]
 80066e6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	685b      	ldr	r3, [r3, #4]
 80066ec:	4a04      	ldr	r2, [pc, #16]	@ (8006700 <prvResetNextTaskUnblockTime+0x3c>)
 80066ee:	6013      	str	r3, [r2, #0]
}
 80066f0:	bf00      	nop
 80066f2:	370c      	adds	r7, #12
 80066f4:	46bd      	mov	sp, r7
 80066f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fa:	4770      	bx	lr
 80066fc:	20000e9c 	.word	0x20000e9c
 8006700:	20000f04 	.word	0x20000f04

08006704 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006704:	b480      	push	{r7}
 8006706:	b083      	sub	sp, #12
 8006708:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800670a:	4b0b      	ldr	r3, [pc, #44]	@ (8006738 <xTaskGetSchedulerState+0x34>)
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d102      	bne.n	8006718 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006712:	2301      	movs	r3, #1
 8006714:	607b      	str	r3, [r7, #4]
 8006716:	e008      	b.n	800672a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006718:	4b08      	ldr	r3, [pc, #32]	@ (800673c <xTaskGetSchedulerState+0x38>)
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d102      	bne.n	8006726 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006720:	2302      	movs	r3, #2
 8006722:	607b      	str	r3, [r7, #4]
 8006724:	e001      	b.n	800672a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006726:	2300      	movs	r3, #0
 8006728:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800672a:	687b      	ldr	r3, [r7, #4]
	}
 800672c:	4618      	mov	r0, r3
 800672e:	370c      	adds	r7, #12
 8006730:	46bd      	mov	sp, r7
 8006732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006736:	4770      	bx	lr
 8006738:	20000ef0 	.word	0x20000ef0
 800673c:	20000f0c 	.word	0x20000f0c

08006740 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006740:	b580      	push	{r7, lr}
 8006742:	b086      	sub	sp, #24
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800674c:	2300      	movs	r3, #0
 800674e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d058      	beq.n	8006808 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006756:	4b2f      	ldr	r3, [pc, #188]	@ (8006814 <xTaskPriorityDisinherit+0xd4>)
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	693a      	ldr	r2, [r7, #16]
 800675c:	429a      	cmp	r2, r3
 800675e:	d00b      	beq.n	8006778 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8006760:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006764:	f383 8811 	msr	BASEPRI, r3
 8006768:	f3bf 8f6f 	isb	sy
 800676c:	f3bf 8f4f 	dsb	sy
 8006770:	60fb      	str	r3, [r7, #12]
}
 8006772:	bf00      	nop
 8006774:	bf00      	nop
 8006776:	e7fd      	b.n	8006774 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006778:	693b      	ldr	r3, [r7, #16]
 800677a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800677c:	2b00      	cmp	r3, #0
 800677e:	d10b      	bne.n	8006798 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8006780:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006784:	f383 8811 	msr	BASEPRI, r3
 8006788:	f3bf 8f6f 	isb	sy
 800678c:	f3bf 8f4f 	dsb	sy
 8006790:	60bb      	str	r3, [r7, #8]
}
 8006792:	bf00      	nop
 8006794:	bf00      	nop
 8006796:	e7fd      	b.n	8006794 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8006798:	693b      	ldr	r3, [r7, #16]
 800679a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800679c:	1e5a      	subs	r2, r3, #1
 800679e:	693b      	ldr	r3, [r7, #16]
 80067a0:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80067a2:	693b      	ldr	r3, [r7, #16]
 80067a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067a6:	693b      	ldr	r3, [r7, #16]
 80067a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80067aa:	429a      	cmp	r2, r3
 80067ac:	d02c      	beq.n	8006808 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80067ae:	693b      	ldr	r3, [r7, #16]
 80067b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d128      	bne.n	8006808 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80067b6:	693b      	ldr	r3, [r7, #16]
 80067b8:	3304      	adds	r3, #4
 80067ba:	4618      	mov	r0, r3
 80067bc:	f7fe fc26 	bl	800500c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80067c0:	693b      	ldr	r3, [r7, #16]
 80067c2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80067c4:	693b      	ldr	r3, [r7, #16]
 80067c6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80067c8:	693b      	ldr	r3, [r7, #16]
 80067ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067cc:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80067d0:	693b      	ldr	r3, [r7, #16]
 80067d2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80067d4:	693b      	ldr	r3, [r7, #16]
 80067d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067d8:	4b0f      	ldr	r3, [pc, #60]	@ (8006818 <xTaskPriorityDisinherit+0xd8>)
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	429a      	cmp	r2, r3
 80067de:	d903      	bls.n	80067e8 <xTaskPriorityDisinherit+0xa8>
 80067e0:	693b      	ldr	r3, [r7, #16]
 80067e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067e4:	4a0c      	ldr	r2, [pc, #48]	@ (8006818 <xTaskPriorityDisinherit+0xd8>)
 80067e6:	6013      	str	r3, [r2, #0]
 80067e8:	693b      	ldr	r3, [r7, #16]
 80067ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067ec:	4613      	mov	r3, r2
 80067ee:	009b      	lsls	r3, r3, #2
 80067f0:	4413      	add	r3, r2
 80067f2:	009b      	lsls	r3, r3, #2
 80067f4:	4a09      	ldr	r2, [pc, #36]	@ (800681c <xTaskPriorityDisinherit+0xdc>)
 80067f6:	441a      	add	r2, r3
 80067f8:	693b      	ldr	r3, [r7, #16]
 80067fa:	3304      	adds	r3, #4
 80067fc:	4619      	mov	r1, r3
 80067fe:	4610      	mov	r0, r2
 8006800:	f7fe fba7 	bl	8004f52 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006804:	2301      	movs	r3, #1
 8006806:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006808:	697b      	ldr	r3, [r7, #20]
	}
 800680a:	4618      	mov	r0, r3
 800680c:	3718      	adds	r7, #24
 800680e:	46bd      	mov	sp, r7
 8006810:	bd80      	pop	{r7, pc}
 8006812:	bf00      	nop
 8006814:	20000a10 	.word	0x20000a10
 8006818:	20000eec 	.word	0x20000eec
 800681c:	20000a14 	.word	0x20000a14

08006820 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b084      	sub	sp, #16
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
 8006828:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800682a:	4b21      	ldr	r3, [pc, #132]	@ (80068b0 <prvAddCurrentTaskToDelayedList+0x90>)
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006830:	4b20      	ldr	r3, [pc, #128]	@ (80068b4 <prvAddCurrentTaskToDelayedList+0x94>)
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	3304      	adds	r3, #4
 8006836:	4618      	mov	r0, r3
 8006838:	f7fe fbe8 	bl	800500c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006842:	d10a      	bne.n	800685a <prvAddCurrentTaskToDelayedList+0x3a>
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d007      	beq.n	800685a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800684a:	4b1a      	ldr	r3, [pc, #104]	@ (80068b4 <prvAddCurrentTaskToDelayedList+0x94>)
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	3304      	adds	r3, #4
 8006850:	4619      	mov	r1, r3
 8006852:	4819      	ldr	r0, [pc, #100]	@ (80068b8 <prvAddCurrentTaskToDelayedList+0x98>)
 8006854:	f7fe fb7d 	bl	8004f52 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006858:	e026      	b.n	80068a8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800685a:	68fa      	ldr	r2, [r7, #12]
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	4413      	add	r3, r2
 8006860:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006862:	4b14      	ldr	r3, [pc, #80]	@ (80068b4 <prvAddCurrentTaskToDelayedList+0x94>)
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	68ba      	ldr	r2, [r7, #8]
 8006868:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800686a:	68ba      	ldr	r2, [r7, #8]
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	429a      	cmp	r2, r3
 8006870:	d209      	bcs.n	8006886 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006872:	4b12      	ldr	r3, [pc, #72]	@ (80068bc <prvAddCurrentTaskToDelayedList+0x9c>)
 8006874:	681a      	ldr	r2, [r3, #0]
 8006876:	4b0f      	ldr	r3, [pc, #60]	@ (80068b4 <prvAddCurrentTaskToDelayedList+0x94>)
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	3304      	adds	r3, #4
 800687c:	4619      	mov	r1, r3
 800687e:	4610      	mov	r0, r2
 8006880:	f7fe fb8b 	bl	8004f9a <vListInsert>
}
 8006884:	e010      	b.n	80068a8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006886:	4b0e      	ldr	r3, [pc, #56]	@ (80068c0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006888:	681a      	ldr	r2, [r3, #0]
 800688a:	4b0a      	ldr	r3, [pc, #40]	@ (80068b4 <prvAddCurrentTaskToDelayedList+0x94>)
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	3304      	adds	r3, #4
 8006890:	4619      	mov	r1, r3
 8006892:	4610      	mov	r0, r2
 8006894:	f7fe fb81 	bl	8004f9a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006898:	4b0a      	ldr	r3, [pc, #40]	@ (80068c4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	68ba      	ldr	r2, [r7, #8]
 800689e:	429a      	cmp	r2, r3
 80068a0:	d202      	bcs.n	80068a8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80068a2:	4a08      	ldr	r2, [pc, #32]	@ (80068c4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80068a4:	68bb      	ldr	r3, [r7, #8]
 80068a6:	6013      	str	r3, [r2, #0]
}
 80068a8:	bf00      	nop
 80068aa:	3710      	adds	r7, #16
 80068ac:	46bd      	mov	sp, r7
 80068ae:	bd80      	pop	{r7, pc}
 80068b0:	20000ee8 	.word	0x20000ee8
 80068b4:	20000a10 	.word	0x20000a10
 80068b8:	20000ed0 	.word	0x20000ed0
 80068bc:	20000ea0 	.word	0x20000ea0
 80068c0:	20000e9c 	.word	0x20000e9c
 80068c4:	20000f04 	.word	0x20000f04

080068c8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b08a      	sub	sp, #40	@ 0x28
 80068cc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80068ce:	2300      	movs	r3, #0
 80068d0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80068d2:	f000 fb13 	bl	8006efc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80068d6:	4b1d      	ldr	r3, [pc, #116]	@ (800694c <xTimerCreateTimerTask+0x84>)
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d021      	beq.n	8006922 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80068de:	2300      	movs	r3, #0
 80068e0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80068e2:	2300      	movs	r3, #0
 80068e4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80068e6:	1d3a      	adds	r2, r7, #4
 80068e8:	f107 0108 	add.w	r1, r7, #8
 80068ec:	f107 030c 	add.w	r3, r7, #12
 80068f0:	4618      	mov	r0, r3
 80068f2:	f7fe fae7 	bl	8004ec4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80068f6:	6879      	ldr	r1, [r7, #4]
 80068f8:	68bb      	ldr	r3, [r7, #8]
 80068fa:	68fa      	ldr	r2, [r7, #12]
 80068fc:	9202      	str	r2, [sp, #8]
 80068fe:	9301      	str	r3, [sp, #4]
 8006900:	2302      	movs	r3, #2
 8006902:	9300      	str	r3, [sp, #0]
 8006904:	2300      	movs	r3, #0
 8006906:	460a      	mov	r2, r1
 8006908:	4911      	ldr	r1, [pc, #68]	@ (8006950 <xTimerCreateTimerTask+0x88>)
 800690a:	4812      	ldr	r0, [pc, #72]	@ (8006954 <xTimerCreateTimerTask+0x8c>)
 800690c:	f7ff f8a2 	bl	8005a54 <xTaskCreateStatic>
 8006910:	4603      	mov	r3, r0
 8006912:	4a11      	ldr	r2, [pc, #68]	@ (8006958 <xTimerCreateTimerTask+0x90>)
 8006914:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006916:	4b10      	ldr	r3, [pc, #64]	@ (8006958 <xTimerCreateTimerTask+0x90>)
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d001      	beq.n	8006922 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800691e:	2301      	movs	r3, #1
 8006920:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006922:	697b      	ldr	r3, [r7, #20]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d10b      	bne.n	8006940 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8006928:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800692c:	f383 8811 	msr	BASEPRI, r3
 8006930:	f3bf 8f6f 	isb	sy
 8006934:	f3bf 8f4f 	dsb	sy
 8006938:	613b      	str	r3, [r7, #16]
}
 800693a:	bf00      	nop
 800693c:	bf00      	nop
 800693e:	e7fd      	b.n	800693c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006940:	697b      	ldr	r3, [r7, #20]
}
 8006942:	4618      	mov	r0, r3
 8006944:	3718      	adds	r7, #24
 8006946:	46bd      	mov	sp, r7
 8006948:	bd80      	pop	{r7, pc}
 800694a:	bf00      	nop
 800694c:	20000f40 	.word	0x20000f40
 8006950:	08007a2c 	.word	0x08007a2c
 8006954:	08006a95 	.word	0x08006a95
 8006958:	20000f44 	.word	0x20000f44

0800695c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800695c:	b580      	push	{r7, lr}
 800695e:	b08a      	sub	sp, #40	@ 0x28
 8006960:	af00      	add	r7, sp, #0
 8006962:	60f8      	str	r0, [r7, #12]
 8006964:	60b9      	str	r1, [r7, #8]
 8006966:	607a      	str	r2, [r7, #4]
 8006968:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800696a:	2300      	movs	r3, #0
 800696c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d10b      	bne.n	800698c <xTimerGenericCommand+0x30>
	__asm volatile
 8006974:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006978:	f383 8811 	msr	BASEPRI, r3
 800697c:	f3bf 8f6f 	isb	sy
 8006980:	f3bf 8f4f 	dsb	sy
 8006984:	623b      	str	r3, [r7, #32]
}
 8006986:	bf00      	nop
 8006988:	bf00      	nop
 800698a:	e7fd      	b.n	8006988 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800698c:	4b19      	ldr	r3, [pc, #100]	@ (80069f4 <xTimerGenericCommand+0x98>)
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d02a      	beq.n	80069ea <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006994:	68bb      	ldr	r3, [r7, #8]
 8006996:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80069a0:	68bb      	ldr	r3, [r7, #8]
 80069a2:	2b05      	cmp	r3, #5
 80069a4:	dc18      	bgt.n	80069d8 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80069a6:	f7ff fead 	bl	8006704 <xTaskGetSchedulerState>
 80069aa:	4603      	mov	r3, r0
 80069ac:	2b02      	cmp	r3, #2
 80069ae:	d109      	bne.n	80069c4 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80069b0:	4b10      	ldr	r3, [pc, #64]	@ (80069f4 <xTimerGenericCommand+0x98>)
 80069b2:	6818      	ldr	r0, [r3, #0]
 80069b4:	f107 0110 	add.w	r1, r7, #16
 80069b8:	2300      	movs	r3, #0
 80069ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80069bc:	f7fe fc5a 	bl	8005274 <xQueueGenericSend>
 80069c0:	6278      	str	r0, [r7, #36]	@ 0x24
 80069c2:	e012      	b.n	80069ea <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80069c4:	4b0b      	ldr	r3, [pc, #44]	@ (80069f4 <xTimerGenericCommand+0x98>)
 80069c6:	6818      	ldr	r0, [r3, #0]
 80069c8:	f107 0110 	add.w	r1, r7, #16
 80069cc:	2300      	movs	r3, #0
 80069ce:	2200      	movs	r2, #0
 80069d0:	f7fe fc50 	bl	8005274 <xQueueGenericSend>
 80069d4:	6278      	str	r0, [r7, #36]	@ 0x24
 80069d6:	e008      	b.n	80069ea <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80069d8:	4b06      	ldr	r3, [pc, #24]	@ (80069f4 <xTimerGenericCommand+0x98>)
 80069da:	6818      	ldr	r0, [r3, #0]
 80069dc:	f107 0110 	add.w	r1, r7, #16
 80069e0:	2300      	movs	r3, #0
 80069e2:	683a      	ldr	r2, [r7, #0]
 80069e4:	f7fe fd48 	bl	8005478 <xQueueGenericSendFromISR>
 80069e8:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80069ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80069ec:	4618      	mov	r0, r3
 80069ee:	3728      	adds	r7, #40	@ 0x28
 80069f0:	46bd      	mov	sp, r7
 80069f2:	bd80      	pop	{r7, pc}
 80069f4:	20000f40 	.word	0x20000f40

080069f8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80069f8:	b580      	push	{r7, lr}
 80069fa:	b088      	sub	sp, #32
 80069fc:	af02      	add	r7, sp, #8
 80069fe:	6078      	str	r0, [r7, #4]
 8006a00:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a02:	4b23      	ldr	r3, [pc, #140]	@ (8006a90 <prvProcessExpiredTimer+0x98>)
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	68db      	ldr	r3, [r3, #12]
 8006a08:	68db      	ldr	r3, [r3, #12]
 8006a0a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006a0c:	697b      	ldr	r3, [r7, #20]
 8006a0e:	3304      	adds	r3, #4
 8006a10:	4618      	mov	r0, r3
 8006a12:	f7fe fafb 	bl	800500c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006a16:	697b      	ldr	r3, [r7, #20]
 8006a18:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006a1c:	f003 0304 	and.w	r3, r3, #4
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d023      	beq.n	8006a6c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006a24:	697b      	ldr	r3, [r7, #20]
 8006a26:	699a      	ldr	r2, [r3, #24]
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	18d1      	adds	r1, r2, r3
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	683a      	ldr	r2, [r7, #0]
 8006a30:	6978      	ldr	r0, [r7, #20]
 8006a32:	f000 f8d5 	bl	8006be0 <prvInsertTimerInActiveList>
 8006a36:	4603      	mov	r3, r0
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d020      	beq.n	8006a7e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	9300      	str	r3, [sp, #0]
 8006a40:	2300      	movs	r3, #0
 8006a42:	687a      	ldr	r2, [r7, #4]
 8006a44:	2100      	movs	r1, #0
 8006a46:	6978      	ldr	r0, [r7, #20]
 8006a48:	f7ff ff88 	bl	800695c <xTimerGenericCommand>
 8006a4c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006a4e:	693b      	ldr	r3, [r7, #16]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d114      	bne.n	8006a7e <prvProcessExpiredTimer+0x86>
	__asm volatile
 8006a54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a58:	f383 8811 	msr	BASEPRI, r3
 8006a5c:	f3bf 8f6f 	isb	sy
 8006a60:	f3bf 8f4f 	dsb	sy
 8006a64:	60fb      	str	r3, [r7, #12]
}
 8006a66:	bf00      	nop
 8006a68:	bf00      	nop
 8006a6a:	e7fd      	b.n	8006a68 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006a6c:	697b      	ldr	r3, [r7, #20]
 8006a6e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006a72:	f023 0301 	bic.w	r3, r3, #1
 8006a76:	b2da      	uxtb	r2, r3
 8006a78:	697b      	ldr	r3, [r7, #20]
 8006a7a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006a7e:	697b      	ldr	r3, [r7, #20]
 8006a80:	6a1b      	ldr	r3, [r3, #32]
 8006a82:	6978      	ldr	r0, [r7, #20]
 8006a84:	4798      	blx	r3
}
 8006a86:	bf00      	nop
 8006a88:	3718      	adds	r7, #24
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	bd80      	pop	{r7, pc}
 8006a8e:	bf00      	nop
 8006a90:	20000f38 	.word	0x20000f38

08006a94 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b084      	sub	sp, #16
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006a9c:	f107 0308 	add.w	r3, r7, #8
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	f000 f859 	bl	8006b58 <prvGetNextExpireTime>
 8006aa6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006aa8:	68bb      	ldr	r3, [r7, #8]
 8006aaa:	4619      	mov	r1, r3
 8006aac:	68f8      	ldr	r0, [r7, #12]
 8006aae:	f000 f805 	bl	8006abc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006ab2:	f000 f8d7 	bl	8006c64 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006ab6:	bf00      	nop
 8006ab8:	e7f0      	b.n	8006a9c <prvTimerTask+0x8>
	...

08006abc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b084      	sub	sp, #16
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
 8006ac4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006ac6:	f7ff fa29 	bl	8005f1c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006aca:	f107 0308 	add.w	r3, r7, #8
 8006ace:	4618      	mov	r0, r3
 8006ad0:	f000 f866 	bl	8006ba0 <prvSampleTimeNow>
 8006ad4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006ad6:	68bb      	ldr	r3, [r7, #8]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d130      	bne.n	8006b3e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d10a      	bne.n	8006af8 <prvProcessTimerOrBlockTask+0x3c>
 8006ae2:	687a      	ldr	r2, [r7, #4]
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	429a      	cmp	r2, r3
 8006ae8:	d806      	bhi.n	8006af8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006aea:	f7ff fa25 	bl	8005f38 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006aee:	68f9      	ldr	r1, [r7, #12]
 8006af0:	6878      	ldr	r0, [r7, #4]
 8006af2:	f7ff ff81 	bl	80069f8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006af6:	e024      	b.n	8006b42 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d008      	beq.n	8006b10 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006afe:	4b13      	ldr	r3, [pc, #76]	@ (8006b4c <prvProcessTimerOrBlockTask+0x90>)
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d101      	bne.n	8006b0c <prvProcessTimerOrBlockTask+0x50>
 8006b08:	2301      	movs	r3, #1
 8006b0a:	e000      	b.n	8006b0e <prvProcessTimerOrBlockTask+0x52>
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006b10:	4b0f      	ldr	r3, [pc, #60]	@ (8006b50 <prvProcessTimerOrBlockTask+0x94>)
 8006b12:	6818      	ldr	r0, [r3, #0]
 8006b14:	687a      	ldr	r2, [r7, #4]
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	1ad3      	subs	r3, r2, r3
 8006b1a:	683a      	ldr	r2, [r7, #0]
 8006b1c:	4619      	mov	r1, r3
 8006b1e:	f7fe ff65 	bl	80059ec <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006b22:	f7ff fa09 	bl	8005f38 <xTaskResumeAll>
 8006b26:	4603      	mov	r3, r0
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d10a      	bne.n	8006b42 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006b2c:	4b09      	ldr	r3, [pc, #36]	@ (8006b54 <prvProcessTimerOrBlockTask+0x98>)
 8006b2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006b32:	601a      	str	r2, [r3, #0]
 8006b34:	f3bf 8f4f 	dsb	sy
 8006b38:	f3bf 8f6f 	isb	sy
}
 8006b3c:	e001      	b.n	8006b42 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006b3e:	f7ff f9fb 	bl	8005f38 <xTaskResumeAll>
}
 8006b42:	bf00      	nop
 8006b44:	3710      	adds	r7, #16
 8006b46:	46bd      	mov	sp, r7
 8006b48:	bd80      	pop	{r7, pc}
 8006b4a:	bf00      	nop
 8006b4c:	20000f3c 	.word	0x20000f3c
 8006b50:	20000f40 	.word	0x20000f40
 8006b54:	e000ed04 	.word	0xe000ed04

08006b58 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006b58:	b480      	push	{r7}
 8006b5a:	b085      	sub	sp, #20
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006b60:	4b0e      	ldr	r3, [pc, #56]	@ (8006b9c <prvGetNextExpireTime+0x44>)
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d101      	bne.n	8006b6e <prvGetNextExpireTime+0x16>
 8006b6a:	2201      	movs	r2, #1
 8006b6c:	e000      	b.n	8006b70 <prvGetNextExpireTime+0x18>
 8006b6e:	2200      	movs	r2, #0
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d105      	bne.n	8006b88 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006b7c:	4b07      	ldr	r3, [pc, #28]	@ (8006b9c <prvGetNextExpireTime+0x44>)
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	68db      	ldr	r3, [r3, #12]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	60fb      	str	r3, [r7, #12]
 8006b86:	e001      	b.n	8006b8c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006b88:	2300      	movs	r3, #0
 8006b8a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
}
 8006b8e:	4618      	mov	r0, r3
 8006b90:	3714      	adds	r7, #20
 8006b92:	46bd      	mov	sp, r7
 8006b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b98:	4770      	bx	lr
 8006b9a:	bf00      	nop
 8006b9c:	20000f38 	.word	0x20000f38

08006ba0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b084      	sub	sp, #16
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006ba8:	f7ff fa64 	bl	8006074 <xTaskGetTickCount>
 8006bac:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006bae:	4b0b      	ldr	r3, [pc, #44]	@ (8006bdc <prvSampleTimeNow+0x3c>)
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	68fa      	ldr	r2, [r7, #12]
 8006bb4:	429a      	cmp	r2, r3
 8006bb6:	d205      	bcs.n	8006bc4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006bb8:	f000 f93a 	bl	8006e30 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2201      	movs	r2, #1
 8006bc0:	601a      	str	r2, [r3, #0]
 8006bc2:	e002      	b.n	8006bca <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006bca:	4a04      	ldr	r2, [pc, #16]	@ (8006bdc <prvSampleTimeNow+0x3c>)
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
}
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	3710      	adds	r7, #16
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	bd80      	pop	{r7, pc}
 8006bda:	bf00      	nop
 8006bdc:	20000f48 	.word	0x20000f48

08006be0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b086      	sub	sp, #24
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	60f8      	str	r0, [r7, #12]
 8006be8:	60b9      	str	r1, [r7, #8]
 8006bea:	607a      	str	r2, [r7, #4]
 8006bec:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006bee:	2300      	movs	r3, #0
 8006bf0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	68ba      	ldr	r2, [r7, #8]
 8006bf6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	68fa      	ldr	r2, [r7, #12]
 8006bfc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006bfe:	68ba      	ldr	r2, [r7, #8]
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	429a      	cmp	r2, r3
 8006c04:	d812      	bhi.n	8006c2c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c06:	687a      	ldr	r2, [r7, #4]
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	1ad2      	subs	r2, r2, r3
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	699b      	ldr	r3, [r3, #24]
 8006c10:	429a      	cmp	r2, r3
 8006c12:	d302      	bcc.n	8006c1a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006c14:	2301      	movs	r3, #1
 8006c16:	617b      	str	r3, [r7, #20]
 8006c18:	e01b      	b.n	8006c52 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006c1a:	4b10      	ldr	r3, [pc, #64]	@ (8006c5c <prvInsertTimerInActiveList+0x7c>)
 8006c1c:	681a      	ldr	r2, [r3, #0]
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	3304      	adds	r3, #4
 8006c22:	4619      	mov	r1, r3
 8006c24:	4610      	mov	r0, r2
 8006c26:	f7fe f9b8 	bl	8004f9a <vListInsert>
 8006c2a:	e012      	b.n	8006c52 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006c2c:	687a      	ldr	r2, [r7, #4]
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	429a      	cmp	r2, r3
 8006c32:	d206      	bcs.n	8006c42 <prvInsertTimerInActiveList+0x62>
 8006c34:	68ba      	ldr	r2, [r7, #8]
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	429a      	cmp	r2, r3
 8006c3a:	d302      	bcc.n	8006c42 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006c3c:	2301      	movs	r3, #1
 8006c3e:	617b      	str	r3, [r7, #20]
 8006c40:	e007      	b.n	8006c52 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006c42:	4b07      	ldr	r3, [pc, #28]	@ (8006c60 <prvInsertTimerInActiveList+0x80>)
 8006c44:	681a      	ldr	r2, [r3, #0]
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	3304      	adds	r3, #4
 8006c4a:	4619      	mov	r1, r3
 8006c4c:	4610      	mov	r0, r2
 8006c4e:	f7fe f9a4 	bl	8004f9a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006c52:	697b      	ldr	r3, [r7, #20]
}
 8006c54:	4618      	mov	r0, r3
 8006c56:	3718      	adds	r7, #24
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	bd80      	pop	{r7, pc}
 8006c5c:	20000f3c 	.word	0x20000f3c
 8006c60:	20000f38 	.word	0x20000f38

08006c64 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b08e      	sub	sp, #56	@ 0x38
 8006c68:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006c6a:	e0ce      	b.n	8006e0a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	da19      	bge.n	8006ca6 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006c72:	1d3b      	adds	r3, r7, #4
 8006c74:	3304      	adds	r3, #4
 8006c76:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006c78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d10b      	bne.n	8006c96 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8006c7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c82:	f383 8811 	msr	BASEPRI, r3
 8006c86:	f3bf 8f6f 	isb	sy
 8006c8a:	f3bf 8f4f 	dsb	sy
 8006c8e:	61fb      	str	r3, [r7, #28]
}
 8006c90:	bf00      	nop
 8006c92:	bf00      	nop
 8006c94:	e7fd      	b.n	8006c92 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006c96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006c9c:	6850      	ldr	r0, [r2, #4]
 8006c9e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006ca0:	6892      	ldr	r2, [r2, #8]
 8006ca2:	4611      	mov	r1, r2
 8006ca4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	f2c0 80ae 	blt.w	8006e0a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006cb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cb4:	695b      	ldr	r3, [r3, #20]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d004      	beq.n	8006cc4 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006cba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cbc:	3304      	adds	r3, #4
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	f7fe f9a4 	bl	800500c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006cc4:	463b      	mov	r3, r7
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	f7ff ff6a 	bl	8006ba0 <prvSampleTimeNow>
 8006ccc:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	2b09      	cmp	r3, #9
 8006cd2:	f200 8097 	bhi.w	8006e04 <prvProcessReceivedCommands+0x1a0>
 8006cd6:	a201      	add	r2, pc, #4	@ (adr r2, 8006cdc <prvProcessReceivedCommands+0x78>)
 8006cd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cdc:	08006d05 	.word	0x08006d05
 8006ce0:	08006d05 	.word	0x08006d05
 8006ce4:	08006d05 	.word	0x08006d05
 8006ce8:	08006d7b 	.word	0x08006d7b
 8006cec:	08006d8f 	.word	0x08006d8f
 8006cf0:	08006ddb 	.word	0x08006ddb
 8006cf4:	08006d05 	.word	0x08006d05
 8006cf8:	08006d05 	.word	0x08006d05
 8006cfc:	08006d7b 	.word	0x08006d7b
 8006d00:	08006d8f 	.word	0x08006d8f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006d04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d06:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006d0a:	f043 0301 	orr.w	r3, r3, #1
 8006d0e:	b2da      	uxtb	r2, r3
 8006d10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d12:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006d16:	68ba      	ldr	r2, [r7, #8]
 8006d18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d1a:	699b      	ldr	r3, [r3, #24]
 8006d1c:	18d1      	adds	r1, r2, r3
 8006d1e:	68bb      	ldr	r3, [r7, #8]
 8006d20:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006d22:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006d24:	f7ff ff5c 	bl	8006be0 <prvInsertTimerInActiveList>
 8006d28:	4603      	mov	r3, r0
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d06c      	beq.n	8006e08 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006d2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d30:	6a1b      	ldr	r3, [r3, #32]
 8006d32:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006d34:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006d36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d38:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006d3c:	f003 0304 	and.w	r3, r3, #4
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d061      	beq.n	8006e08 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006d44:	68ba      	ldr	r2, [r7, #8]
 8006d46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d48:	699b      	ldr	r3, [r3, #24]
 8006d4a:	441a      	add	r2, r3
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	9300      	str	r3, [sp, #0]
 8006d50:	2300      	movs	r3, #0
 8006d52:	2100      	movs	r1, #0
 8006d54:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006d56:	f7ff fe01 	bl	800695c <xTimerGenericCommand>
 8006d5a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006d5c:	6a3b      	ldr	r3, [r7, #32]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d152      	bne.n	8006e08 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8006d62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d66:	f383 8811 	msr	BASEPRI, r3
 8006d6a:	f3bf 8f6f 	isb	sy
 8006d6e:	f3bf 8f4f 	dsb	sy
 8006d72:	61bb      	str	r3, [r7, #24]
}
 8006d74:	bf00      	nop
 8006d76:	bf00      	nop
 8006d78:	e7fd      	b.n	8006d76 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006d7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d7c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006d80:	f023 0301 	bic.w	r3, r3, #1
 8006d84:	b2da      	uxtb	r2, r3
 8006d86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d88:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006d8c:	e03d      	b.n	8006e0a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006d8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d90:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006d94:	f043 0301 	orr.w	r3, r3, #1
 8006d98:	b2da      	uxtb	r2, r3
 8006d9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d9c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006da0:	68ba      	ldr	r2, [r7, #8]
 8006da2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006da4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006da6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006da8:	699b      	ldr	r3, [r3, #24]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d10b      	bne.n	8006dc6 <prvProcessReceivedCommands+0x162>
	__asm volatile
 8006dae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006db2:	f383 8811 	msr	BASEPRI, r3
 8006db6:	f3bf 8f6f 	isb	sy
 8006dba:	f3bf 8f4f 	dsb	sy
 8006dbe:	617b      	str	r3, [r7, #20]
}
 8006dc0:	bf00      	nop
 8006dc2:	bf00      	nop
 8006dc4:	e7fd      	b.n	8006dc2 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006dc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dc8:	699a      	ldr	r2, [r3, #24]
 8006dca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dcc:	18d1      	adds	r1, r2, r3
 8006dce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dd0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006dd2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006dd4:	f7ff ff04 	bl	8006be0 <prvInsertTimerInActiveList>
					break;
 8006dd8:	e017      	b.n	8006e0a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006dda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ddc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006de0:	f003 0302 	and.w	r3, r3, #2
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d103      	bne.n	8006df0 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8006de8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006dea:	f000 fbe5 	bl	80075b8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006dee:	e00c      	b.n	8006e0a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006df0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006df2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006df6:	f023 0301 	bic.w	r3, r3, #1
 8006dfa:	b2da      	uxtb	r2, r3
 8006dfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dfe:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006e02:	e002      	b.n	8006e0a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8006e04:	bf00      	nop
 8006e06:	e000      	b.n	8006e0a <prvProcessReceivedCommands+0x1a6>
					break;
 8006e08:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006e0a:	4b08      	ldr	r3, [pc, #32]	@ (8006e2c <prvProcessReceivedCommands+0x1c8>)
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	1d39      	adds	r1, r7, #4
 8006e10:	2200      	movs	r2, #0
 8006e12:	4618      	mov	r0, r3
 8006e14:	f7fe fbce 	bl	80055b4 <xQueueReceive>
 8006e18:	4603      	mov	r3, r0
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	f47f af26 	bne.w	8006c6c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006e20:	bf00      	nop
 8006e22:	bf00      	nop
 8006e24:	3730      	adds	r7, #48	@ 0x30
 8006e26:	46bd      	mov	sp, r7
 8006e28:	bd80      	pop	{r7, pc}
 8006e2a:	bf00      	nop
 8006e2c:	20000f40 	.word	0x20000f40

08006e30 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b088      	sub	sp, #32
 8006e34:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006e36:	e049      	b.n	8006ecc <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006e38:	4b2e      	ldr	r3, [pc, #184]	@ (8006ef4 <prvSwitchTimerLists+0xc4>)
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	68db      	ldr	r3, [r3, #12]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e42:	4b2c      	ldr	r3, [pc, #176]	@ (8006ef4 <prvSwitchTimerLists+0xc4>)
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	68db      	ldr	r3, [r3, #12]
 8006e48:	68db      	ldr	r3, [r3, #12]
 8006e4a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	3304      	adds	r3, #4
 8006e50:	4618      	mov	r0, r3
 8006e52:	f7fe f8db 	bl	800500c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	6a1b      	ldr	r3, [r3, #32]
 8006e5a:	68f8      	ldr	r0, [r7, #12]
 8006e5c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006e64:	f003 0304 	and.w	r3, r3, #4
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d02f      	beq.n	8006ecc <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	699b      	ldr	r3, [r3, #24]
 8006e70:	693a      	ldr	r2, [r7, #16]
 8006e72:	4413      	add	r3, r2
 8006e74:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006e76:	68ba      	ldr	r2, [r7, #8]
 8006e78:	693b      	ldr	r3, [r7, #16]
 8006e7a:	429a      	cmp	r2, r3
 8006e7c:	d90e      	bls.n	8006e9c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	68ba      	ldr	r2, [r7, #8]
 8006e82:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	68fa      	ldr	r2, [r7, #12]
 8006e88:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006e8a:	4b1a      	ldr	r3, [pc, #104]	@ (8006ef4 <prvSwitchTimerLists+0xc4>)
 8006e8c:	681a      	ldr	r2, [r3, #0]
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	3304      	adds	r3, #4
 8006e92:	4619      	mov	r1, r3
 8006e94:	4610      	mov	r0, r2
 8006e96:	f7fe f880 	bl	8004f9a <vListInsert>
 8006e9a:	e017      	b.n	8006ecc <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006e9c:	2300      	movs	r3, #0
 8006e9e:	9300      	str	r3, [sp, #0]
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	693a      	ldr	r2, [r7, #16]
 8006ea4:	2100      	movs	r1, #0
 8006ea6:	68f8      	ldr	r0, [r7, #12]
 8006ea8:	f7ff fd58 	bl	800695c <xTimerGenericCommand>
 8006eac:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d10b      	bne.n	8006ecc <prvSwitchTimerLists+0x9c>
	__asm volatile
 8006eb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006eb8:	f383 8811 	msr	BASEPRI, r3
 8006ebc:	f3bf 8f6f 	isb	sy
 8006ec0:	f3bf 8f4f 	dsb	sy
 8006ec4:	603b      	str	r3, [r7, #0]
}
 8006ec6:	bf00      	nop
 8006ec8:	bf00      	nop
 8006eca:	e7fd      	b.n	8006ec8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006ecc:	4b09      	ldr	r3, [pc, #36]	@ (8006ef4 <prvSwitchTimerLists+0xc4>)
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d1b0      	bne.n	8006e38 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006ed6:	4b07      	ldr	r3, [pc, #28]	@ (8006ef4 <prvSwitchTimerLists+0xc4>)
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006edc:	4b06      	ldr	r3, [pc, #24]	@ (8006ef8 <prvSwitchTimerLists+0xc8>)
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	4a04      	ldr	r2, [pc, #16]	@ (8006ef4 <prvSwitchTimerLists+0xc4>)
 8006ee2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006ee4:	4a04      	ldr	r2, [pc, #16]	@ (8006ef8 <prvSwitchTimerLists+0xc8>)
 8006ee6:	697b      	ldr	r3, [r7, #20]
 8006ee8:	6013      	str	r3, [r2, #0]
}
 8006eea:	bf00      	nop
 8006eec:	3718      	adds	r7, #24
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	bd80      	pop	{r7, pc}
 8006ef2:	bf00      	nop
 8006ef4:	20000f38 	.word	0x20000f38
 8006ef8:	20000f3c 	.word	0x20000f3c

08006efc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b082      	sub	sp, #8
 8006f00:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006f02:	f000 f969 	bl	80071d8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006f06:	4b15      	ldr	r3, [pc, #84]	@ (8006f5c <prvCheckForValidListAndQueue+0x60>)
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d120      	bne.n	8006f50 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006f0e:	4814      	ldr	r0, [pc, #80]	@ (8006f60 <prvCheckForValidListAndQueue+0x64>)
 8006f10:	f7fd fff2 	bl	8004ef8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006f14:	4813      	ldr	r0, [pc, #76]	@ (8006f64 <prvCheckForValidListAndQueue+0x68>)
 8006f16:	f7fd ffef 	bl	8004ef8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006f1a:	4b13      	ldr	r3, [pc, #76]	@ (8006f68 <prvCheckForValidListAndQueue+0x6c>)
 8006f1c:	4a10      	ldr	r2, [pc, #64]	@ (8006f60 <prvCheckForValidListAndQueue+0x64>)
 8006f1e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006f20:	4b12      	ldr	r3, [pc, #72]	@ (8006f6c <prvCheckForValidListAndQueue+0x70>)
 8006f22:	4a10      	ldr	r2, [pc, #64]	@ (8006f64 <prvCheckForValidListAndQueue+0x68>)
 8006f24:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006f26:	2300      	movs	r3, #0
 8006f28:	9300      	str	r3, [sp, #0]
 8006f2a:	4b11      	ldr	r3, [pc, #68]	@ (8006f70 <prvCheckForValidListAndQueue+0x74>)
 8006f2c:	4a11      	ldr	r2, [pc, #68]	@ (8006f74 <prvCheckForValidListAndQueue+0x78>)
 8006f2e:	2110      	movs	r1, #16
 8006f30:	200a      	movs	r0, #10
 8006f32:	f7fe f8ff 	bl	8005134 <xQueueGenericCreateStatic>
 8006f36:	4603      	mov	r3, r0
 8006f38:	4a08      	ldr	r2, [pc, #32]	@ (8006f5c <prvCheckForValidListAndQueue+0x60>)
 8006f3a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006f3c:	4b07      	ldr	r3, [pc, #28]	@ (8006f5c <prvCheckForValidListAndQueue+0x60>)
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d005      	beq.n	8006f50 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006f44:	4b05      	ldr	r3, [pc, #20]	@ (8006f5c <prvCheckForValidListAndQueue+0x60>)
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	490b      	ldr	r1, [pc, #44]	@ (8006f78 <prvCheckForValidListAndQueue+0x7c>)
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	f7fe fd24 	bl	8005998 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006f50:	f000 f974 	bl	800723c <vPortExitCritical>
}
 8006f54:	bf00      	nop
 8006f56:	46bd      	mov	sp, r7
 8006f58:	bd80      	pop	{r7, pc}
 8006f5a:	bf00      	nop
 8006f5c:	20000f40 	.word	0x20000f40
 8006f60:	20000f10 	.word	0x20000f10
 8006f64:	20000f24 	.word	0x20000f24
 8006f68:	20000f38 	.word	0x20000f38
 8006f6c:	20000f3c 	.word	0x20000f3c
 8006f70:	20000fec 	.word	0x20000fec
 8006f74:	20000f4c 	.word	0x20000f4c
 8006f78:	08007a34 	.word	0x08007a34

08006f7c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006f7c:	b480      	push	{r7}
 8006f7e:	b085      	sub	sp, #20
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	60f8      	str	r0, [r7, #12]
 8006f84:	60b9      	str	r1, [r7, #8]
 8006f86:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	3b04      	subs	r3, #4
 8006f8c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006f94:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	3b04      	subs	r3, #4
 8006f9a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006f9c:	68bb      	ldr	r3, [r7, #8]
 8006f9e:	f023 0201 	bic.w	r2, r3, #1
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	3b04      	subs	r3, #4
 8006faa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006fac:	4a0c      	ldr	r2, [pc, #48]	@ (8006fe0 <pxPortInitialiseStack+0x64>)
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	3b14      	subs	r3, #20
 8006fb6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006fb8:	687a      	ldr	r2, [r7, #4]
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	3b04      	subs	r3, #4
 8006fc2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	f06f 0202 	mvn.w	r2, #2
 8006fca:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	3b20      	subs	r3, #32
 8006fd0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
}
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	3714      	adds	r7, #20
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fde:	4770      	bx	lr
 8006fe0:	08006fe5 	.word	0x08006fe5

08006fe4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006fe4:	b480      	push	{r7}
 8006fe6:	b085      	sub	sp, #20
 8006fe8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006fea:	2300      	movs	r3, #0
 8006fec:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006fee:	4b13      	ldr	r3, [pc, #76]	@ (800703c <prvTaskExitError+0x58>)
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ff6:	d00b      	beq.n	8007010 <prvTaskExitError+0x2c>
	__asm volatile
 8006ff8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ffc:	f383 8811 	msr	BASEPRI, r3
 8007000:	f3bf 8f6f 	isb	sy
 8007004:	f3bf 8f4f 	dsb	sy
 8007008:	60fb      	str	r3, [r7, #12]
}
 800700a:	bf00      	nop
 800700c:	bf00      	nop
 800700e:	e7fd      	b.n	800700c <prvTaskExitError+0x28>
	__asm volatile
 8007010:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007014:	f383 8811 	msr	BASEPRI, r3
 8007018:	f3bf 8f6f 	isb	sy
 800701c:	f3bf 8f4f 	dsb	sy
 8007020:	60bb      	str	r3, [r7, #8]
}
 8007022:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007024:	bf00      	nop
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d0fc      	beq.n	8007026 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800702c:	bf00      	nop
 800702e:	bf00      	nop
 8007030:	3714      	adds	r7, #20
 8007032:	46bd      	mov	sp, r7
 8007034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007038:	4770      	bx	lr
 800703a:	bf00      	nop
 800703c:	2000001c 	.word	0x2000001c

08007040 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007040:	4b07      	ldr	r3, [pc, #28]	@ (8007060 <pxCurrentTCBConst2>)
 8007042:	6819      	ldr	r1, [r3, #0]
 8007044:	6808      	ldr	r0, [r1, #0]
 8007046:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800704a:	f380 8809 	msr	PSP, r0
 800704e:	f3bf 8f6f 	isb	sy
 8007052:	f04f 0000 	mov.w	r0, #0
 8007056:	f380 8811 	msr	BASEPRI, r0
 800705a:	4770      	bx	lr
 800705c:	f3af 8000 	nop.w

08007060 <pxCurrentTCBConst2>:
 8007060:	20000a10 	.word	0x20000a10
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007064:	bf00      	nop
 8007066:	bf00      	nop

08007068 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007068:	4808      	ldr	r0, [pc, #32]	@ (800708c <prvPortStartFirstTask+0x24>)
 800706a:	6800      	ldr	r0, [r0, #0]
 800706c:	6800      	ldr	r0, [r0, #0]
 800706e:	f380 8808 	msr	MSP, r0
 8007072:	f04f 0000 	mov.w	r0, #0
 8007076:	f380 8814 	msr	CONTROL, r0
 800707a:	b662      	cpsie	i
 800707c:	b661      	cpsie	f
 800707e:	f3bf 8f4f 	dsb	sy
 8007082:	f3bf 8f6f 	isb	sy
 8007086:	df00      	svc	0
 8007088:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800708a:	bf00      	nop
 800708c:	e000ed08 	.word	0xe000ed08

08007090 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007090:	b580      	push	{r7, lr}
 8007092:	b086      	sub	sp, #24
 8007094:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007096:	4b47      	ldr	r3, [pc, #284]	@ (80071b4 <xPortStartScheduler+0x124>)
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	4a47      	ldr	r2, [pc, #284]	@ (80071b8 <xPortStartScheduler+0x128>)
 800709c:	4293      	cmp	r3, r2
 800709e:	d10b      	bne.n	80070b8 <xPortStartScheduler+0x28>
	__asm volatile
 80070a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070a4:	f383 8811 	msr	BASEPRI, r3
 80070a8:	f3bf 8f6f 	isb	sy
 80070ac:	f3bf 8f4f 	dsb	sy
 80070b0:	613b      	str	r3, [r7, #16]
}
 80070b2:	bf00      	nop
 80070b4:	bf00      	nop
 80070b6:	e7fd      	b.n	80070b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80070b8:	4b3e      	ldr	r3, [pc, #248]	@ (80071b4 <xPortStartScheduler+0x124>)
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	4a3f      	ldr	r2, [pc, #252]	@ (80071bc <xPortStartScheduler+0x12c>)
 80070be:	4293      	cmp	r3, r2
 80070c0:	d10b      	bne.n	80070da <xPortStartScheduler+0x4a>
	__asm volatile
 80070c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070c6:	f383 8811 	msr	BASEPRI, r3
 80070ca:	f3bf 8f6f 	isb	sy
 80070ce:	f3bf 8f4f 	dsb	sy
 80070d2:	60fb      	str	r3, [r7, #12]
}
 80070d4:	bf00      	nop
 80070d6:	bf00      	nop
 80070d8:	e7fd      	b.n	80070d6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80070da:	4b39      	ldr	r3, [pc, #228]	@ (80071c0 <xPortStartScheduler+0x130>)
 80070dc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80070de:	697b      	ldr	r3, [r7, #20]
 80070e0:	781b      	ldrb	r3, [r3, #0]
 80070e2:	b2db      	uxtb	r3, r3
 80070e4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80070e6:	697b      	ldr	r3, [r7, #20]
 80070e8:	22ff      	movs	r2, #255	@ 0xff
 80070ea:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80070ec:	697b      	ldr	r3, [r7, #20]
 80070ee:	781b      	ldrb	r3, [r3, #0]
 80070f0:	b2db      	uxtb	r3, r3
 80070f2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80070f4:	78fb      	ldrb	r3, [r7, #3]
 80070f6:	b2db      	uxtb	r3, r3
 80070f8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80070fc:	b2da      	uxtb	r2, r3
 80070fe:	4b31      	ldr	r3, [pc, #196]	@ (80071c4 <xPortStartScheduler+0x134>)
 8007100:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007102:	4b31      	ldr	r3, [pc, #196]	@ (80071c8 <xPortStartScheduler+0x138>)
 8007104:	2207      	movs	r2, #7
 8007106:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007108:	e009      	b.n	800711e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800710a:	4b2f      	ldr	r3, [pc, #188]	@ (80071c8 <xPortStartScheduler+0x138>)
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	3b01      	subs	r3, #1
 8007110:	4a2d      	ldr	r2, [pc, #180]	@ (80071c8 <xPortStartScheduler+0x138>)
 8007112:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007114:	78fb      	ldrb	r3, [r7, #3]
 8007116:	b2db      	uxtb	r3, r3
 8007118:	005b      	lsls	r3, r3, #1
 800711a:	b2db      	uxtb	r3, r3
 800711c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800711e:	78fb      	ldrb	r3, [r7, #3]
 8007120:	b2db      	uxtb	r3, r3
 8007122:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007126:	2b80      	cmp	r3, #128	@ 0x80
 8007128:	d0ef      	beq.n	800710a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800712a:	4b27      	ldr	r3, [pc, #156]	@ (80071c8 <xPortStartScheduler+0x138>)
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	f1c3 0307 	rsb	r3, r3, #7
 8007132:	2b04      	cmp	r3, #4
 8007134:	d00b      	beq.n	800714e <xPortStartScheduler+0xbe>
	__asm volatile
 8007136:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800713a:	f383 8811 	msr	BASEPRI, r3
 800713e:	f3bf 8f6f 	isb	sy
 8007142:	f3bf 8f4f 	dsb	sy
 8007146:	60bb      	str	r3, [r7, #8]
}
 8007148:	bf00      	nop
 800714a:	bf00      	nop
 800714c:	e7fd      	b.n	800714a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800714e:	4b1e      	ldr	r3, [pc, #120]	@ (80071c8 <xPortStartScheduler+0x138>)
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	021b      	lsls	r3, r3, #8
 8007154:	4a1c      	ldr	r2, [pc, #112]	@ (80071c8 <xPortStartScheduler+0x138>)
 8007156:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007158:	4b1b      	ldr	r3, [pc, #108]	@ (80071c8 <xPortStartScheduler+0x138>)
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007160:	4a19      	ldr	r2, [pc, #100]	@ (80071c8 <xPortStartScheduler+0x138>)
 8007162:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	b2da      	uxtb	r2, r3
 8007168:	697b      	ldr	r3, [r7, #20]
 800716a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800716c:	4b17      	ldr	r3, [pc, #92]	@ (80071cc <xPortStartScheduler+0x13c>)
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	4a16      	ldr	r2, [pc, #88]	@ (80071cc <xPortStartScheduler+0x13c>)
 8007172:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007176:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007178:	4b14      	ldr	r3, [pc, #80]	@ (80071cc <xPortStartScheduler+0x13c>)
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	4a13      	ldr	r2, [pc, #76]	@ (80071cc <xPortStartScheduler+0x13c>)
 800717e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007182:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007184:	f000 f8da 	bl	800733c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007188:	4b11      	ldr	r3, [pc, #68]	@ (80071d0 <xPortStartScheduler+0x140>)
 800718a:	2200      	movs	r2, #0
 800718c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800718e:	f000 f8f9 	bl	8007384 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007192:	4b10      	ldr	r3, [pc, #64]	@ (80071d4 <xPortStartScheduler+0x144>)
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	4a0f      	ldr	r2, [pc, #60]	@ (80071d4 <xPortStartScheduler+0x144>)
 8007198:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800719c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800719e:	f7ff ff63 	bl	8007068 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80071a2:	f7ff f831 	bl	8006208 <vTaskSwitchContext>
	prvTaskExitError();
 80071a6:	f7ff ff1d 	bl	8006fe4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80071aa:	2300      	movs	r3, #0
}
 80071ac:	4618      	mov	r0, r3
 80071ae:	3718      	adds	r7, #24
 80071b0:	46bd      	mov	sp, r7
 80071b2:	bd80      	pop	{r7, pc}
 80071b4:	e000ed00 	.word	0xe000ed00
 80071b8:	410fc271 	.word	0x410fc271
 80071bc:	410fc270 	.word	0x410fc270
 80071c0:	e000e400 	.word	0xe000e400
 80071c4:	2000103c 	.word	0x2000103c
 80071c8:	20001040 	.word	0x20001040
 80071cc:	e000ed20 	.word	0xe000ed20
 80071d0:	2000001c 	.word	0x2000001c
 80071d4:	e000ef34 	.word	0xe000ef34

080071d8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80071d8:	b480      	push	{r7}
 80071da:	b083      	sub	sp, #12
 80071dc:	af00      	add	r7, sp, #0
	__asm volatile
 80071de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071e2:	f383 8811 	msr	BASEPRI, r3
 80071e6:	f3bf 8f6f 	isb	sy
 80071ea:	f3bf 8f4f 	dsb	sy
 80071ee:	607b      	str	r3, [r7, #4]
}
 80071f0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80071f2:	4b10      	ldr	r3, [pc, #64]	@ (8007234 <vPortEnterCritical+0x5c>)
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	3301      	adds	r3, #1
 80071f8:	4a0e      	ldr	r2, [pc, #56]	@ (8007234 <vPortEnterCritical+0x5c>)
 80071fa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80071fc:	4b0d      	ldr	r3, [pc, #52]	@ (8007234 <vPortEnterCritical+0x5c>)
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	2b01      	cmp	r3, #1
 8007202:	d110      	bne.n	8007226 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007204:	4b0c      	ldr	r3, [pc, #48]	@ (8007238 <vPortEnterCritical+0x60>)
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	b2db      	uxtb	r3, r3
 800720a:	2b00      	cmp	r3, #0
 800720c:	d00b      	beq.n	8007226 <vPortEnterCritical+0x4e>
	__asm volatile
 800720e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007212:	f383 8811 	msr	BASEPRI, r3
 8007216:	f3bf 8f6f 	isb	sy
 800721a:	f3bf 8f4f 	dsb	sy
 800721e:	603b      	str	r3, [r7, #0]
}
 8007220:	bf00      	nop
 8007222:	bf00      	nop
 8007224:	e7fd      	b.n	8007222 <vPortEnterCritical+0x4a>
	}
}
 8007226:	bf00      	nop
 8007228:	370c      	adds	r7, #12
 800722a:	46bd      	mov	sp, r7
 800722c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007230:	4770      	bx	lr
 8007232:	bf00      	nop
 8007234:	2000001c 	.word	0x2000001c
 8007238:	e000ed04 	.word	0xe000ed04

0800723c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800723c:	b480      	push	{r7}
 800723e:	b083      	sub	sp, #12
 8007240:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007242:	4b12      	ldr	r3, [pc, #72]	@ (800728c <vPortExitCritical+0x50>)
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d10b      	bne.n	8007262 <vPortExitCritical+0x26>
	__asm volatile
 800724a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800724e:	f383 8811 	msr	BASEPRI, r3
 8007252:	f3bf 8f6f 	isb	sy
 8007256:	f3bf 8f4f 	dsb	sy
 800725a:	607b      	str	r3, [r7, #4]
}
 800725c:	bf00      	nop
 800725e:	bf00      	nop
 8007260:	e7fd      	b.n	800725e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007262:	4b0a      	ldr	r3, [pc, #40]	@ (800728c <vPortExitCritical+0x50>)
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	3b01      	subs	r3, #1
 8007268:	4a08      	ldr	r2, [pc, #32]	@ (800728c <vPortExitCritical+0x50>)
 800726a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800726c:	4b07      	ldr	r3, [pc, #28]	@ (800728c <vPortExitCritical+0x50>)
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d105      	bne.n	8007280 <vPortExitCritical+0x44>
 8007274:	2300      	movs	r3, #0
 8007276:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	f383 8811 	msr	BASEPRI, r3
}
 800727e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007280:	bf00      	nop
 8007282:	370c      	adds	r7, #12
 8007284:	46bd      	mov	sp, r7
 8007286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728a:	4770      	bx	lr
 800728c:	2000001c 	.word	0x2000001c

08007290 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007290:	f3ef 8009 	mrs	r0, PSP
 8007294:	f3bf 8f6f 	isb	sy
 8007298:	4b15      	ldr	r3, [pc, #84]	@ (80072f0 <pxCurrentTCBConst>)
 800729a:	681a      	ldr	r2, [r3, #0]
 800729c:	f01e 0f10 	tst.w	lr, #16
 80072a0:	bf08      	it	eq
 80072a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80072a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072aa:	6010      	str	r0, [r2, #0]
 80072ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80072b0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80072b4:	f380 8811 	msr	BASEPRI, r0
 80072b8:	f3bf 8f4f 	dsb	sy
 80072bc:	f3bf 8f6f 	isb	sy
 80072c0:	f7fe ffa2 	bl	8006208 <vTaskSwitchContext>
 80072c4:	f04f 0000 	mov.w	r0, #0
 80072c8:	f380 8811 	msr	BASEPRI, r0
 80072cc:	bc09      	pop	{r0, r3}
 80072ce:	6819      	ldr	r1, [r3, #0]
 80072d0:	6808      	ldr	r0, [r1, #0]
 80072d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072d6:	f01e 0f10 	tst.w	lr, #16
 80072da:	bf08      	it	eq
 80072dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80072e0:	f380 8809 	msr	PSP, r0
 80072e4:	f3bf 8f6f 	isb	sy
 80072e8:	4770      	bx	lr
 80072ea:	bf00      	nop
 80072ec:	f3af 8000 	nop.w

080072f0 <pxCurrentTCBConst>:
 80072f0:	20000a10 	.word	0x20000a10
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80072f4:	bf00      	nop
 80072f6:	bf00      	nop

080072f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b082      	sub	sp, #8
 80072fc:	af00      	add	r7, sp, #0
	__asm volatile
 80072fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007302:	f383 8811 	msr	BASEPRI, r3
 8007306:	f3bf 8f6f 	isb	sy
 800730a:	f3bf 8f4f 	dsb	sy
 800730e:	607b      	str	r3, [r7, #4]
}
 8007310:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007312:	f7fe febf 	bl	8006094 <xTaskIncrementTick>
 8007316:	4603      	mov	r3, r0
 8007318:	2b00      	cmp	r3, #0
 800731a:	d003      	beq.n	8007324 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800731c:	4b06      	ldr	r3, [pc, #24]	@ (8007338 <xPortSysTickHandler+0x40>)
 800731e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007322:	601a      	str	r2, [r3, #0]
 8007324:	2300      	movs	r3, #0
 8007326:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007328:	683b      	ldr	r3, [r7, #0]
 800732a:	f383 8811 	msr	BASEPRI, r3
}
 800732e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007330:	bf00      	nop
 8007332:	3708      	adds	r7, #8
 8007334:	46bd      	mov	sp, r7
 8007336:	bd80      	pop	{r7, pc}
 8007338:	e000ed04 	.word	0xe000ed04

0800733c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800733c:	b480      	push	{r7}
 800733e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007340:	4b0b      	ldr	r3, [pc, #44]	@ (8007370 <vPortSetupTimerInterrupt+0x34>)
 8007342:	2200      	movs	r2, #0
 8007344:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007346:	4b0b      	ldr	r3, [pc, #44]	@ (8007374 <vPortSetupTimerInterrupt+0x38>)
 8007348:	2200      	movs	r2, #0
 800734a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800734c:	4b0a      	ldr	r3, [pc, #40]	@ (8007378 <vPortSetupTimerInterrupt+0x3c>)
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	4a0a      	ldr	r2, [pc, #40]	@ (800737c <vPortSetupTimerInterrupt+0x40>)
 8007352:	fba2 2303 	umull	r2, r3, r2, r3
 8007356:	099b      	lsrs	r3, r3, #6
 8007358:	4a09      	ldr	r2, [pc, #36]	@ (8007380 <vPortSetupTimerInterrupt+0x44>)
 800735a:	3b01      	subs	r3, #1
 800735c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800735e:	4b04      	ldr	r3, [pc, #16]	@ (8007370 <vPortSetupTimerInterrupt+0x34>)
 8007360:	2207      	movs	r2, #7
 8007362:	601a      	str	r2, [r3, #0]
}
 8007364:	bf00      	nop
 8007366:	46bd      	mov	sp, r7
 8007368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736c:	4770      	bx	lr
 800736e:	bf00      	nop
 8007370:	e000e010 	.word	0xe000e010
 8007374:	e000e018 	.word	0xe000e018
 8007378:	20000010 	.word	0x20000010
 800737c:	10624dd3 	.word	0x10624dd3
 8007380:	e000e014 	.word	0xe000e014

08007384 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007384:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007394 <vPortEnableVFP+0x10>
 8007388:	6801      	ldr	r1, [r0, #0]
 800738a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800738e:	6001      	str	r1, [r0, #0]
 8007390:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007392:	bf00      	nop
 8007394:	e000ed88 	.word	0xe000ed88

08007398 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007398:	b480      	push	{r7}
 800739a:	b085      	sub	sp, #20
 800739c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800739e:	f3ef 8305 	mrs	r3, IPSR
 80073a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	2b0f      	cmp	r3, #15
 80073a8:	d915      	bls.n	80073d6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80073aa:	4a18      	ldr	r2, [pc, #96]	@ (800740c <vPortValidateInterruptPriority+0x74>)
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	4413      	add	r3, r2
 80073b0:	781b      	ldrb	r3, [r3, #0]
 80073b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80073b4:	4b16      	ldr	r3, [pc, #88]	@ (8007410 <vPortValidateInterruptPriority+0x78>)
 80073b6:	781b      	ldrb	r3, [r3, #0]
 80073b8:	7afa      	ldrb	r2, [r7, #11]
 80073ba:	429a      	cmp	r2, r3
 80073bc:	d20b      	bcs.n	80073d6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80073be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073c2:	f383 8811 	msr	BASEPRI, r3
 80073c6:	f3bf 8f6f 	isb	sy
 80073ca:	f3bf 8f4f 	dsb	sy
 80073ce:	607b      	str	r3, [r7, #4]
}
 80073d0:	bf00      	nop
 80073d2:	bf00      	nop
 80073d4:	e7fd      	b.n	80073d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80073d6:	4b0f      	ldr	r3, [pc, #60]	@ (8007414 <vPortValidateInterruptPriority+0x7c>)
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80073de:	4b0e      	ldr	r3, [pc, #56]	@ (8007418 <vPortValidateInterruptPriority+0x80>)
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	429a      	cmp	r2, r3
 80073e4:	d90b      	bls.n	80073fe <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80073e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073ea:	f383 8811 	msr	BASEPRI, r3
 80073ee:	f3bf 8f6f 	isb	sy
 80073f2:	f3bf 8f4f 	dsb	sy
 80073f6:	603b      	str	r3, [r7, #0]
}
 80073f8:	bf00      	nop
 80073fa:	bf00      	nop
 80073fc:	e7fd      	b.n	80073fa <vPortValidateInterruptPriority+0x62>
	}
 80073fe:	bf00      	nop
 8007400:	3714      	adds	r7, #20
 8007402:	46bd      	mov	sp, r7
 8007404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007408:	4770      	bx	lr
 800740a:	bf00      	nop
 800740c:	e000e3f0 	.word	0xe000e3f0
 8007410:	2000103c 	.word	0x2000103c
 8007414:	e000ed0c 	.word	0xe000ed0c
 8007418:	20001040 	.word	0x20001040

0800741c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800741c:	b580      	push	{r7, lr}
 800741e:	b08a      	sub	sp, #40	@ 0x28
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007424:	2300      	movs	r3, #0
 8007426:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007428:	f7fe fd78 	bl	8005f1c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800742c:	4b5c      	ldr	r3, [pc, #368]	@ (80075a0 <pvPortMalloc+0x184>)
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d101      	bne.n	8007438 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007434:	f000 f924 	bl	8007680 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007438:	4b5a      	ldr	r3, [pc, #360]	@ (80075a4 <pvPortMalloc+0x188>)
 800743a:	681a      	ldr	r2, [r3, #0]
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	4013      	ands	r3, r2
 8007440:	2b00      	cmp	r3, #0
 8007442:	f040 8095 	bne.w	8007570 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d01e      	beq.n	800748a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800744c:	2208      	movs	r2, #8
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	4413      	add	r3, r2
 8007452:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	f003 0307 	and.w	r3, r3, #7
 800745a:	2b00      	cmp	r3, #0
 800745c:	d015      	beq.n	800748a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	f023 0307 	bic.w	r3, r3, #7
 8007464:	3308      	adds	r3, #8
 8007466:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	f003 0307 	and.w	r3, r3, #7
 800746e:	2b00      	cmp	r3, #0
 8007470:	d00b      	beq.n	800748a <pvPortMalloc+0x6e>
	__asm volatile
 8007472:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007476:	f383 8811 	msr	BASEPRI, r3
 800747a:	f3bf 8f6f 	isb	sy
 800747e:	f3bf 8f4f 	dsb	sy
 8007482:	617b      	str	r3, [r7, #20]
}
 8007484:	bf00      	nop
 8007486:	bf00      	nop
 8007488:	e7fd      	b.n	8007486 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d06f      	beq.n	8007570 <pvPortMalloc+0x154>
 8007490:	4b45      	ldr	r3, [pc, #276]	@ (80075a8 <pvPortMalloc+0x18c>)
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	687a      	ldr	r2, [r7, #4]
 8007496:	429a      	cmp	r2, r3
 8007498:	d86a      	bhi.n	8007570 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800749a:	4b44      	ldr	r3, [pc, #272]	@ (80075ac <pvPortMalloc+0x190>)
 800749c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800749e:	4b43      	ldr	r3, [pc, #268]	@ (80075ac <pvPortMalloc+0x190>)
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80074a4:	e004      	b.n	80074b0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80074a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074a8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80074aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80074b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074b2:	685b      	ldr	r3, [r3, #4]
 80074b4:	687a      	ldr	r2, [r7, #4]
 80074b6:	429a      	cmp	r2, r3
 80074b8:	d903      	bls.n	80074c2 <pvPortMalloc+0xa6>
 80074ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d1f1      	bne.n	80074a6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80074c2:	4b37      	ldr	r3, [pc, #220]	@ (80075a0 <pvPortMalloc+0x184>)
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80074c8:	429a      	cmp	r2, r3
 80074ca:	d051      	beq.n	8007570 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80074cc:	6a3b      	ldr	r3, [r7, #32]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	2208      	movs	r2, #8
 80074d2:	4413      	add	r3, r2
 80074d4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80074d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074d8:	681a      	ldr	r2, [r3, #0]
 80074da:	6a3b      	ldr	r3, [r7, #32]
 80074dc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80074de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074e0:	685a      	ldr	r2, [r3, #4]
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	1ad2      	subs	r2, r2, r3
 80074e6:	2308      	movs	r3, #8
 80074e8:	005b      	lsls	r3, r3, #1
 80074ea:	429a      	cmp	r2, r3
 80074ec:	d920      	bls.n	8007530 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80074ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	4413      	add	r3, r2
 80074f4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80074f6:	69bb      	ldr	r3, [r7, #24]
 80074f8:	f003 0307 	and.w	r3, r3, #7
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d00b      	beq.n	8007518 <pvPortMalloc+0xfc>
	__asm volatile
 8007500:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007504:	f383 8811 	msr	BASEPRI, r3
 8007508:	f3bf 8f6f 	isb	sy
 800750c:	f3bf 8f4f 	dsb	sy
 8007510:	613b      	str	r3, [r7, #16]
}
 8007512:	bf00      	nop
 8007514:	bf00      	nop
 8007516:	e7fd      	b.n	8007514 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007518:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800751a:	685a      	ldr	r2, [r3, #4]
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	1ad2      	subs	r2, r2, r3
 8007520:	69bb      	ldr	r3, [r7, #24]
 8007522:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007526:	687a      	ldr	r2, [r7, #4]
 8007528:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800752a:	69b8      	ldr	r0, [r7, #24]
 800752c:	f000 f90a 	bl	8007744 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007530:	4b1d      	ldr	r3, [pc, #116]	@ (80075a8 <pvPortMalloc+0x18c>)
 8007532:	681a      	ldr	r2, [r3, #0]
 8007534:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007536:	685b      	ldr	r3, [r3, #4]
 8007538:	1ad3      	subs	r3, r2, r3
 800753a:	4a1b      	ldr	r2, [pc, #108]	@ (80075a8 <pvPortMalloc+0x18c>)
 800753c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800753e:	4b1a      	ldr	r3, [pc, #104]	@ (80075a8 <pvPortMalloc+0x18c>)
 8007540:	681a      	ldr	r2, [r3, #0]
 8007542:	4b1b      	ldr	r3, [pc, #108]	@ (80075b0 <pvPortMalloc+0x194>)
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	429a      	cmp	r2, r3
 8007548:	d203      	bcs.n	8007552 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800754a:	4b17      	ldr	r3, [pc, #92]	@ (80075a8 <pvPortMalloc+0x18c>)
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	4a18      	ldr	r2, [pc, #96]	@ (80075b0 <pvPortMalloc+0x194>)
 8007550:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007554:	685a      	ldr	r2, [r3, #4]
 8007556:	4b13      	ldr	r3, [pc, #76]	@ (80075a4 <pvPortMalloc+0x188>)
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	431a      	orrs	r2, r3
 800755c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800755e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007560:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007562:	2200      	movs	r2, #0
 8007564:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007566:	4b13      	ldr	r3, [pc, #76]	@ (80075b4 <pvPortMalloc+0x198>)
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	3301      	adds	r3, #1
 800756c:	4a11      	ldr	r2, [pc, #68]	@ (80075b4 <pvPortMalloc+0x198>)
 800756e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007570:	f7fe fce2 	bl	8005f38 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007574:	69fb      	ldr	r3, [r7, #28]
 8007576:	f003 0307 	and.w	r3, r3, #7
 800757a:	2b00      	cmp	r3, #0
 800757c:	d00b      	beq.n	8007596 <pvPortMalloc+0x17a>
	__asm volatile
 800757e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007582:	f383 8811 	msr	BASEPRI, r3
 8007586:	f3bf 8f6f 	isb	sy
 800758a:	f3bf 8f4f 	dsb	sy
 800758e:	60fb      	str	r3, [r7, #12]
}
 8007590:	bf00      	nop
 8007592:	bf00      	nop
 8007594:	e7fd      	b.n	8007592 <pvPortMalloc+0x176>
	return pvReturn;
 8007596:	69fb      	ldr	r3, [r7, #28]
}
 8007598:	4618      	mov	r0, r3
 800759a:	3728      	adds	r7, #40	@ 0x28
 800759c:	46bd      	mov	sp, r7
 800759e:	bd80      	pop	{r7, pc}
 80075a0:	20001c04 	.word	0x20001c04
 80075a4:	20001c18 	.word	0x20001c18
 80075a8:	20001c08 	.word	0x20001c08
 80075ac:	20001bfc 	.word	0x20001bfc
 80075b0:	20001c0c 	.word	0x20001c0c
 80075b4:	20001c10 	.word	0x20001c10

080075b8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80075b8:	b580      	push	{r7, lr}
 80075ba:	b086      	sub	sp, #24
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d04f      	beq.n	800766a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80075ca:	2308      	movs	r3, #8
 80075cc:	425b      	negs	r3, r3
 80075ce:	697a      	ldr	r2, [r7, #20]
 80075d0:	4413      	add	r3, r2
 80075d2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80075d4:	697b      	ldr	r3, [r7, #20]
 80075d6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80075d8:	693b      	ldr	r3, [r7, #16]
 80075da:	685a      	ldr	r2, [r3, #4]
 80075dc:	4b25      	ldr	r3, [pc, #148]	@ (8007674 <vPortFree+0xbc>)
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	4013      	ands	r3, r2
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d10b      	bne.n	80075fe <vPortFree+0x46>
	__asm volatile
 80075e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075ea:	f383 8811 	msr	BASEPRI, r3
 80075ee:	f3bf 8f6f 	isb	sy
 80075f2:	f3bf 8f4f 	dsb	sy
 80075f6:	60fb      	str	r3, [r7, #12]
}
 80075f8:	bf00      	nop
 80075fa:	bf00      	nop
 80075fc:	e7fd      	b.n	80075fa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80075fe:	693b      	ldr	r3, [r7, #16]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d00b      	beq.n	800761e <vPortFree+0x66>
	__asm volatile
 8007606:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800760a:	f383 8811 	msr	BASEPRI, r3
 800760e:	f3bf 8f6f 	isb	sy
 8007612:	f3bf 8f4f 	dsb	sy
 8007616:	60bb      	str	r3, [r7, #8]
}
 8007618:	bf00      	nop
 800761a:	bf00      	nop
 800761c:	e7fd      	b.n	800761a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800761e:	693b      	ldr	r3, [r7, #16]
 8007620:	685a      	ldr	r2, [r3, #4]
 8007622:	4b14      	ldr	r3, [pc, #80]	@ (8007674 <vPortFree+0xbc>)
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	4013      	ands	r3, r2
 8007628:	2b00      	cmp	r3, #0
 800762a:	d01e      	beq.n	800766a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800762c:	693b      	ldr	r3, [r7, #16]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	2b00      	cmp	r3, #0
 8007632:	d11a      	bne.n	800766a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007634:	693b      	ldr	r3, [r7, #16]
 8007636:	685a      	ldr	r2, [r3, #4]
 8007638:	4b0e      	ldr	r3, [pc, #56]	@ (8007674 <vPortFree+0xbc>)
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	43db      	mvns	r3, r3
 800763e:	401a      	ands	r2, r3
 8007640:	693b      	ldr	r3, [r7, #16]
 8007642:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007644:	f7fe fc6a 	bl	8005f1c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007648:	693b      	ldr	r3, [r7, #16]
 800764a:	685a      	ldr	r2, [r3, #4]
 800764c:	4b0a      	ldr	r3, [pc, #40]	@ (8007678 <vPortFree+0xc0>)
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	4413      	add	r3, r2
 8007652:	4a09      	ldr	r2, [pc, #36]	@ (8007678 <vPortFree+0xc0>)
 8007654:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007656:	6938      	ldr	r0, [r7, #16]
 8007658:	f000 f874 	bl	8007744 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800765c:	4b07      	ldr	r3, [pc, #28]	@ (800767c <vPortFree+0xc4>)
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	3301      	adds	r3, #1
 8007662:	4a06      	ldr	r2, [pc, #24]	@ (800767c <vPortFree+0xc4>)
 8007664:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007666:	f7fe fc67 	bl	8005f38 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800766a:	bf00      	nop
 800766c:	3718      	adds	r7, #24
 800766e:	46bd      	mov	sp, r7
 8007670:	bd80      	pop	{r7, pc}
 8007672:	bf00      	nop
 8007674:	20001c18 	.word	0x20001c18
 8007678:	20001c08 	.word	0x20001c08
 800767c:	20001c14 	.word	0x20001c14

08007680 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007680:	b480      	push	{r7}
 8007682:	b085      	sub	sp, #20
 8007684:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007686:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800768a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800768c:	4b27      	ldr	r3, [pc, #156]	@ (800772c <prvHeapInit+0xac>)
 800768e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	f003 0307 	and.w	r3, r3, #7
 8007696:	2b00      	cmp	r3, #0
 8007698:	d00c      	beq.n	80076b4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	3307      	adds	r3, #7
 800769e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	f023 0307 	bic.w	r3, r3, #7
 80076a6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80076a8:	68ba      	ldr	r2, [r7, #8]
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	1ad3      	subs	r3, r2, r3
 80076ae:	4a1f      	ldr	r2, [pc, #124]	@ (800772c <prvHeapInit+0xac>)
 80076b0:	4413      	add	r3, r2
 80076b2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80076b8:	4a1d      	ldr	r2, [pc, #116]	@ (8007730 <prvHeapInit+0xb0>)
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80076be:	4b1c      	ldr	r3, [pc, #112]	@ (8007730 <prvHeapInit+0xb0>)
 80076c0:	2200      	movs	r2, #0
 80076c2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	68ba      	ldr	r2, [r7, #8]
 80076c8:	4413      	add	r3, r2
 80076ca:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80076cc:	2208      	movs	r2, #8
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	1a9b      	subs	r3, r3, r2
 80076d2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	f023 0307 	bic.w	r3, r3, #7
 80076da:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	4a15      	ldr	r2, [pc, #84]	@ (8007734 <prvHeapInit+0xb4>)
 80076e0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80076e2:	4b14      	ldr	r3, [pc, #80]	@ (8007734 <prvHeapInit+0xb4>)
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	2200      	movs	r2, #0
 80076e8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80076ea:	4b12      	ldr	r3, [pc, #72]	@ (8007734 <prvHeapInit+0xb4>)
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	2200      	movs	r2, #0
 80076f0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80076f6:	683b      	ldr	r3, [r7, #0]
 80076f8:	68fa      	ldr	r2, [r7, #12]
 80076fa:	1ad2      	subs	r2, r2, r3
 80076fc:	683b      	ldr	r3, [r7, #0]
 80076fe:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007700:	4b0c      	ldr	r3, [pc, #48]	@ (8007734 <prvHeapInit+0xb4>)
 8007702:	681a      	ldr	r2, [r3, #0]
 8007704:	683b      	ldr	r3, [r7, #0]
 8007706:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007708:	683b      	ldr	r3, [r7, #0]
 800770a:	685b      	ldr	r3, [r3, #4]
 800770c:	4a0a      	ldr	r2, [pc, #40]	@ (8007738 <prvHeapInit+0xb8>)
 800770e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007710:	683b      	ldr	r3, [r7, #0]
 8007712:	685b      	ldr	r3, [r3, #4]
 8007714:	4a09      	ldr	r2, [pc, #36]	@ (800773c <prvHeapInit+0xbc>)
 8007716:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007718:	4b09      	ldr	r3, [pc, #36]	@ (8007740 <prvHeapInit+0xc0>)
 800771a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800771e:	601a      	str	r2, [r3, #0]
}
 8007720:	bf00      	nop
 8007722:	3714      	adds	r7, #20
 8007724:	46bd      	mov	sp, r7
 8007726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772a:	4770      	bx	lr
 800772c:	20001044 	.word	0x20001044
 8007730:	20001bfc 	.word	0x20001bfc
 8007734:	20001c04 	.word	0x20001c04
 8007738:	20001c0c 	.word	0x20001c0c
 800773c:	20001c08 	.word	0x20001c08
 8007740:	20001c18 	.word	0x20001c18

08007744 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007744:	b480      	push	{r7}
 8007746:	b085      	sub	sp, #20
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800774c:	4b28      	ldr	r3, [pc, #160]	@ (80077f0 <prvInsertBlockIntoFreeList+0xac>)
 800774e:	60fb      	str	r3, [r7, #12]
 8007750:	e002      	b.n	8007758 <prvInsertBlockIntoFreeList+0x14>
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	60fb      	str	r3, [r7, #12]
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	687a      	ldr	r2, [r7, #4]
 800775e:	429a      	cmp	r2, r3
 8007760:	d8f7      	bhi.n	8007752 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	685b      	ldr	r3, [r3, #4]
 800776a:	68ba      	ldr	r2, [r7, #8]
 800776c:	4413      	add	r3, r2
 800776e:	687a      	ldr	r2, [r7, #4]
 8007770:	429a      	cmp	r2, r3
 8007772:	d108      	bne.n	8007786 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	685a      	ldr	r2, [r3, #4]
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	685b      	ldr	r3, [r3, #4]
 800777c:	441a      	add	r2, r3
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	685b      	ldr	r3, [r3, #4]
 800778e:	68ba      	ldr	r2, [r7, #8]
 8007790:	441a      	add	r2, r3
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	429a      	cmp	r2, r3
 8007798:	d118      	bne.n	80077cc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	681a      	ldr	r2, [r3, #0]
 800779e:	4b15      	ldr	r3, [pc, #84]	@ (80077f4 <prvInsertBlockIntoFreeList+0xb0>)
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	429a      	cmp	r2, r3
 80077a4:	d00d      	beq.n	80077c2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	685a      	ldr	r2, [r3, #4]
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	685b      	ldr	r3, [r3, #4]
 80077b0:	441a      	add	r2, r3
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	681a      	ldr	r2, [r3, #0]
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	601a      	str	r2, [r3, #0]
 80077c0:	e008      	b.n	80077d4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80077c2:	4b0c      	ldr	r3, [pc, #48]	@ (80077f4 <prvInsertBlockIntoFreeList+0xb0>)
 80077c4:	681a      	ldr	r2, [r3, #0]
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	601a      	str	r2, [r3, #0]
 80077ca:	e003      	b.n	80077d4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	681a      	ldr	r2, [r3, #0]
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80077d4:	68fa      	ldr	r2, [r7, #12]
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	429a      	cmp	r2, r3
 80077da:	d002      	beq.n	80077e2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	687a      	ldr	r2, [r7, #4]
 80077e0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80077e2:	bf00      	nop
 80077e4:	3714      	adds	r7, #20
 80077e6:	46bd      	mov	sp, r7
 80077e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ec:	4770      	bx	lr
 80077ee:	bf00      	nop
 80077f0:	20001bfc 	.word	0x20001bfc
 80077f4:	20001c04 	.word	0x20001c04

080077f8 <memset>:
 80077f8:	4402      	add	r2, r0
 80077fa:	4603      	mov	r3, r0
 80077fc:	4293      	cmp	r3, r2
 80077fe:	d100      	bne.n	8007802 <memset+0xa>
 8007800:	4770      	bx	lr
 8007802:	f803 1b01 	strb.w	r1, [r3], #1
 8007806:	e7f9      	b.n	80077fc <memset+0x4>

08007808 <_reclaim_reent>:
 8007808:	4b29      	ldr	r3, [pc, #164]	@ (80078b0 <_reclaim_reent+0xa8>)
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	4283      	cmp	r3, r0
 800780e:	b570      	push	{r4, r5, r6, lr}
 8007810:	4604      	mov	r4, r0
 8007812:	d04b      	beq.n	80078ac <_reclaim_reent+0xa4>
 8007814:	69c3      	ldr	r3, [r0, #28]
 8007816:	b1ab      	cbz	r3, 8007844 <_reclaim_reent+0x3c>
 8007818:	68db      	ldr	r3, [r3, #12]
 800781a:	b16b      	cbz	r3, 8007838 <_reclaim_reent+0x30>
 800781c:	2500      	movs	r5, #0
 800781e:	69e3      	ldr	r3, [r4, #28]
 8007820:	68db      	ldr	r3, [r3, #12]
 8007822:	5959      	ldr	r1, [r3, r5]
 8007824:	2900      	cmp	r1, #0
 8007826:	d13b      	bne.n	80078a0 <_reclaim_reent+0x98>
 8007828:	3504      	adds	r5, #4
 800782a:	2d80      	cmp	r5, #128	@ 0x80
 800782c:	d1f7      	bne.n	800781e <_reclaim_reent+0x16>
 800782e:	69e3      	ldr	r3, [r4, #28]
 8007830:	4620      	mov	r0, r4
 8007832:	68d9      	ldr	r1, [r3, #12]
 8007834:	f000 f872 	bl	800791c <_free_r>
 8007838:	69e3      	ldr	r3, [r4, #28]
 800783a:	6819      	ldr	r1, [r3, #0]
 800783c:	b111      	cbz	r1, 8007844 <_reclaim_reent+0x3c>
 800783e:	4620      	mov	r0, r4
 8007840:	f000 f86c 	bl	800791c <_free_r>
 8007844:	6961      	ldr	r1, [r4, #20]
 8007846:	b111      	cbz	r1, 800784e <_reclaim_reent+0x46>
 8007848:	4620      	mov	r0, r4
 800784a:	f000 f867 	bl	800791c <_free_r>
 800784e:	69e1      	ldr	r1, [r4, #28]
 8007850:	b111      	cbz	r1, 8007858 <_reclaim_reent+0x50>
 8007852:	4620      	mov	r0, r4
 8007854:	f000 f862 	bl	800791c <_free_r>
 8007858:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800785a:	b111      	cbz	r1, 8007862 <_reclaim_reent+0x5a>
 800785c:	4620      	mov	r0, r4
 800785e:	f000 f85d 	bl	800791c <_free_r>
 8007862:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007864:	b111      	cbz	r1, 800786c <_reclaim_reent+0x64>
 8007866:	4620      	mov	r0, r4
 8007868:	f000 f858 	bl	800791c <_free_r>
 800786c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800786e:	b111      	cbz	r1, 8007876 <_reclaim_reent+0x6e>
 8007870:	4620      	mov	r0, r4
 8007872:	f000 f853 	bl	800791c <_free_r>
 8007876:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8007878:	b111      	cbz	r1, 8007880 <_reclaim_reent+0x78>
 800787a:	4620      	mov	r0, r4
 800787c:	f000 f84e 	bl	800791c <_free_r>
 8007880:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8007882:	b111      	cbz	r1, 800788a <_reclaim_reent+0x82>
 8007884:	4620      	mov	r0, r4
 8007886:	f000 f849 	bl	800791c <_free_r>
 800788a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800788c:	b111      	cbz	r1, 8007894 <_reclaim_reent+0x8c>
 800788e:	4620      	mov	r0, r4
 8007890:	f000 f844 	bl	800791c <_free_r>
 8007894:	6a23      	ldr	r3, [r4, #32]
 8007896:	b14b      	cbz	r3, 80078ac <_reclaim_reent+0xa4>
 8007898:	4620      	mov	r0, r4
 800789a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800789e:	4718      	bx	r3
 80078a0:	680e      	ldr	r6, [r1, #0]
 80078a2:	4620      	mov	r0, r4
 80078a4:	f000 f83a 	bl	800791c <_free_r>
 80078a8:	4631      	mov	r1, r6
 80078aa:	e7bb      	b.n	8007824 <_reclaim_reent+0x1c>
 80078ac:	bd70      	pop	{r4, r5, r6, pc}
 80078ae:	bf00      	nop
 80078b0:	20000020 	.word	0x20000020

080078b4 <__libc_init_array>:
 80078b4:	b570      	push	{r4, r5, r6, lr}
 80078b6:	4d0d      	ldr	r5, [pc, #52]	@ (80078ec <__libc_init_array+0x38>)
 80078b8:	4c0d      	ldr	r4, [pc, #52]	@ (80078f0 <__libc_init_array+0x3c>)
 80078ba:	1b64      	subs	r4, r4, r5
 80078bc:	10a4      	asrs	r4, r4, #2
 80078be:	2600      	movs	r6, #0
 80078c0:	42a6      	cmp	r6, r4
 80078c2:	d109      	bne.n	80078d8 <__libc_init_array+0x24>
 80078c4:	4d0b      	ldr	r5, [pc, #44]	@ (80078f4 <__libc_init_array+0x40>)
 80078c6:	4c0c      	ldr	r4, [pc, #48]	@ (80078f8 <__libc_init_array+0x44>)
 80078c8:	f000 f87e 	bl	80079c8 <_init>
 80078cc:	1b64      	subs	r4, r4, r5
 80078ce:	10a4      	asrs	r4, r4, #2
 80078d0:	2600      	movs	r6, #0
 80078d2:	42a6      	cmp	r6, r4
 80078d4:	d105      	bne.n	80078e2 <__libc_init_array+0x2e>
 80078d6:	bd70      	pop	{r4, r5, r6, pc}
 80078d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80078dc:	4798      	blx	r3
 80078de:	3601      	adds	r6, #1
 80078e0:	e7ee      	b.n	80078c0 <__libc_init_array+0xc>
 80078e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80078e6:	4798      	blx	r3
 80078e8:	3601      	adds	r6, #1
 80078ea:	e7f2      	b.n	80078d2 <__libc_init_array+0x1e>
 80078ec:	08007af8 	.word	0x08007af8
 80078f0:	08007af8 	.word	0x08007af8
 80078f4:	08007af8 	.word	0x08007af8
 80078f8:	08007afc 	.word	0x08007afc

080078fc <__retarget_lock_acquire_recursive>:
 80078fc:	4770      	bx	lr

080078fe <__retarget_lock_release_recursive>:
 80078fe:	4770      	bx	lr

08007900 <memcpy>:
 8007900:	440a      	add	r2, r1
 8007902:	4291      	cmp	r1, r2
 8007904:	f100 33ff 	add.w	r3, r0, #4294967295
 8007908:	d100      	bne.n	800790c <memcpy+0xc>
 800790a:	4770      	bx	lr
 800790c:	b510      	push	{r4, lr}
 800790e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007912:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007916:	4291      	cmp	r1, r2
 8007918:	d1f9      	bne.n	800790e <memcpy+0xe>
 800791a:	bd10      	pop	{r4, pc}

0800791c <_free_r>:
 800791c:	b538      	push	{r3, r4, r5, lr}
 800791e:	4605      	mov	r5, r0
 8007920:	2900      	cmp	r1, #0
 8007922:	d041      	beq.n	80079a8 <_free_r+0x8c>
 8007924:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007928:	1f0c      	subs	r4, r1, #4
 800792a:	2b00      	cmp	r3, #0
 800792c:	bfb8      	it	lt
 800792e:	18e4      	addlt	r4, r4, r3
 8007930:	f000 f83e 	bl	80079b0 <__malloc_lock>
 8007934:	4a1d      	ldr	r2, [pc, #116]	@ (80079ac <_free_r+0x90>)
 8007936:	6813      	ldr	r3, [r2, #0]
 8007938:	b933      	cbnz	r3, 8007948 <_free_r+0x2c>
 800793a:	6063      	str	r3, [r4, #4]
 800793c:	6014      	str	r4, [r2, #0]
 800793e:	4628      	mov	r0, r5
 8007940:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007944:	f000 b83a 	b.w	80079bc <__malloc_unlock>
 8007948:	42a3      	cmp	r3, r4
 800794a:	d908      	bls.n	800795e <_free_r+0x42>
 800794c:	6820      	ldr	r0, [r4, #0]
 800794e:	1821      	adds	r1, r4, r0
 8007950:	428b      	cmp	r3, r1
 8007952:	bf01      	itttt	eq
 8007954:	6819      	ldreq	r1, [r3, #0]
 8007956:	685b      	ldreq	r3, [r3, #4]
 8007958:	1809      	addeq	r1, r1, r0
 800795a:	6021      	streq	r1, [r4, #0]
 800795c:	e7ed      	b.n	800793a <_free_r+0x1e>
 800795e:	461a      	mov	r2, r3
 8007960:	685b      	ldr	r3, [r3, #4]
 8007962:	b10b      	cbz	r3, 8007968 <_free_r+0x4c>
 8007964:	42a3      	cmp	r3, r4
 8007966:	d9fa      	bls.n	800795e <_free_r+0x42>
 8007968:	6811      	ldr	r1, [r2, #0]
 800796a:	1850      	adds	r0, r2, r1
 800796c:	42a0      	cmp	r0, r4
 800796e:	d10b      	bne.n	8007988 <_free_r+0x6c>
 8007970:	6820      	ldr	r0, [r4, #0]
 8007972:	4401      	add	r1, r0
 8007974:	1850      	adds	r0, r2, r1
 8007976:	4283      	cmp	r3, r0
 8007978:	6011      	str	r1, [r2, #0]
 800797a:	d1e0      	bne.n	800793e <_free_r+0x22>
 800797c:	6818      	ldr	r0, [r3, #0]
 800797e:	685b      	ldr	r3, [r3, #4]
 8007980:	6053      	str	r3, [r2, #4]
 8007982:	4408      	add	r0, r1
 8007984:	6010      	str	r0, [r2, #0]
 8007986:	e7da      	b.n	800793e <_free_r+0x22>
 8007988:	d902      	bls.n	8007990 <_free_r+0x74>
 800798a:	230c      	movs	r3, #12
 800798c:	602b      	str	r3, [r5, #0]
 800798e:	e7d6      	b.n	800793e <_free_r+0x22>
 8007990:	6820      	ldr	r0, [r4, #0]
 8007992:	1821      	adds	r1, r4, r0
 8007994:	428b      	cmp	r3, r1
 8007996:	bf04      	itt	eq
 8007998:	6819      	ldreq	r1, [r3, #0]
 800799a:	685b      	ldreq	r3, [r3, #4]
 800799c:	6063      	str	r3, [r4, #4]
 800799e:	bf04      	itt	eq
 80079a0:	1809      	addeq	r1, r1, r0
 80079a2:	6021      	streq	r1, [r4, #0]
 80079a4:	6054      	str	r4, [r2, #4]
 80079a6:	e7ca      	b.n	800793e <_free_r+0x22>
 80079a8:	bd38      	pop	{r3, r4, r5, pc}
 80079aa:	bf00      	nop
 80079ac:	20001d58 	.word	0x20001d58

080079b0 <__malloc_lock>:
 80079b0:	4801      	ldr	r0, [pc, #4]	@ (80079b8 <__malloc_lock+0x8>)
 80079b2:	f7ff bfa3 	b.w	80078fc <__retarget_lock_acquire_recursive>
 80079b6:	bf00      	nop
 80079b8:	20001d54 	.word	0x20001d54

080079bc <__malloc_unlock>:
 80079bc:	4801      	ldr	r0, [pc, #4]	@ (80079c4 <__malloc_unlock+0x8>)
 80079be:	f7ff bf9e 	b.w	80078fe <__retarget_lock_release_recursive>
 80079c2:	bf00      	nop
 80079c4:	20001d54 	.word	0x20001d54

080079c8 <_init>:
 80079c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079ca:	bf00      	nop
 80079cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079ce:	bc08      	pop	{r3}
 80079d0:	469e      	mov	lr, r3
 80079d2:	4770      	bx	lr

080079d4 <_fini>:
 80079d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079d6:	bf00      	nop
 80079d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079da:	bc08      	pop	{r3}
 80079dc:	469e      	mov	lr, r3
 80079de:	4770      	bx	lr
