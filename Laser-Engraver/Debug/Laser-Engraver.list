
Laser-Engraver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
<<<<<<< Updated upstream
  1 .text         00010d30  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005f0  08010ec0  08010ec0  00011ec0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080114b0  080114b0  000131fc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080114b0  080114b0  000124b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080114b8  080114b8  000131fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080114b8  080114b8  000124b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080114bc  080114bc  000124bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001fc  20000000  080114c0  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003eb0  200001fc  080116bc  000131fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200040ac  080116bc  000140ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000131fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022604  00000000  00000000  0001322c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004899  00000000  00000000  00035830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d90  00000000  00000000  0003a0d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000016fd  00000000  00000000  0003be60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00006c79  00000000  00000000  0003d55d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000245ff  00000000  00000000  000441d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00103b21  00000000  00000000  000687d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0016c2f6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000090a8  00000000  00000000  0016c33c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  001753e4  2**0
=======
  1 .text         0000d5f0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005e8  0800d780  0800d780  0000e780  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dd68  0800dd68  0000f208  2**0
                  CONTENTS
  4 .ARM          00000008  0800dd68  0800dd68  0000ed68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dd70  0800dd70  0000f208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dd70  0800dd70  0000ed70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800dd74  0800dd74  0000ed74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000208  20000000  0800dd78  0000f000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000590  20000208  0800df80  0000f208  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000798  0800df80  0000f798  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f208  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a8cc  00000000  00000000  0000f238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003845  00000000  00000000  00029b04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001890  00000000  00000000  0002d350  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000133e  00000000  00000000  0002ebe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002abe0  00000000  00000000  0002ff1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020496  00000000  00000000  0005aafe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fbea0  00000000  00000000  0007af94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00176e34  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007ca8  00000000  00000000  00176e78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  0017eb20  2**0
>>>>>>> Stashed changes
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001fc 	.word	0x200001fc
 80001ac:	00000000 	.word	0x00000000
<<<<<<< Updated upstream
 80001b0:	08010ea8 	.word	0x08010ea8
=======
 80001b0:	0800d768 	.word	0x0800d768
>>>>>>> Stashed changes

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
<<<<<<< Updated upstream
 80001c8:	20000200 	.word	0x20000200
 80001cc:	08010ea8 	.word	0x08010ea8
=======
 80001c8:	2000020c 	.word	0x2000020c
 80001cc:	0800d768 	.word	0x0800d768
>>>>>>> Stashed changes

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9be 	b.w	800103c <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	@ (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	468e      	mov	lr, r1
 8000d4c:	4604      	mov	r4, r0
 8000d4e:	4688      	mov	r8, r1
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d14a      	bne.n	8000dea <__udivmoddi4+0xa6>
 8000d54:	428a      	cmp	r2, r1
 8000d56:	4617      	mov	r7, r2
 8000d58:	d962      	bls.n	8000e20 <__udivmoddi4+0xdc>
 8000d5a:	fab2 f682 	clz	r6, r2
 8000d5e:	b14e      	cbz	r6, 8000d74 <__udivmoddi4+0x30>
 8000d60:	f1c6 0320 	rsb	r3, r6, #32
 8000d64:	fa01 f806 	lsl.w	r8, r1, r6
 8000d68:	fa20 f303 	lsr.w	r3, r0, r3
 8000d6c:	40b7      	lsls	r7, r6
 8000d6e:	ea43 0808 	orr.w	r8, r3, r8
 8000d72:	40b4      	lsls	r4, r6
 8000d74:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d78:	fa1f fc87 	uxth.w	ip, r7
 8000d7c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d80:	0c23      	lsrs	r3, r4, #16
 8000d82:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d86:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d8a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d8e:	429a      	cmp	r2, r3
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0x62>
 8000d92:	18fb      	adds	r3, r7, r3
 8000d94:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d98:	f080 80ea 	bcs.w	8000f70 <__udivmoddi4+0x22c>
 8000d9c:	429a      	cmp	r2, r3
 8000d9e:	f240 80e7 	bls.w	8000f70 <__udivmoddi4+0x22c>
 8000da2:	3902      	subs	r1, #2
 8000da4:	443b      	add	r3, r7
 8000da6:	1a9a      	subs	r2, r3, r2
 8000da8:	b2a3      	uxth	r3, r4
 8000daa:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dae:	fb0e 2210 	mls	r2, lr, r0, r2
 8000db2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000db6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000dba:	459c      	cmp	ip, r3
 8000dbc:	d909      	bls.n	8000dd2 <__udivmoddi4+0x8e>
 8000dbe:	18fb      	adds	r3, r7, r3
 8000dc0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dc4:	f080 80d6 	bcs.w	8000f74 <__udivmoddi4+0x230>
 8000dc8:	459c      	cmp	ip, r3
 8000dca:	f240 80d3 	bls.w	8000f74 <__udivmoddi4+0x230>
 8000dce:	443b      	add	r3, r7
 8000dd0:	3802      	subs	r0, #2
 8000dd2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dd6:	eba3 030c 	sub.w	r3, r3, ip
 8000dda:	2100      	movs	r1, #0
 8000ddc:	b11d      	cbz	r5, 8000de6 <__udivmoddi4+0xa2>
 8000dde:	40f3      	lsrs	r3, r6
 8000de0:	2200      	movs	r2, #0
 8000de2:	e9c5 3200 	strd	r3, r2, [r5]
 8000de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dea:	428b      	cmp	r3, r1
 8000dec:	d905      	bls.n	8000dfa <__udivmoddi4+0xb6>
 8000dee:	b10d      	cbz	r5, 8000df4 <__udivmoddi4+0xb0>
 8000df0:	e9c5 0100 	strd	r0, r1, [r5]
 8000df4:	2100      	movs	r1, #0
 8000df6:	4608      	mov	r0, r1
 8000df8:	e7f5      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000dfa:	fab3 f183 	clz	r1, r3
 8000dfe:	2900      	cmp	r1, #0
 8000e00:	d146      	bne.n	8000e90 <__udivmoddi4+0x14c>
 8000e02:	4573      	cmp	r3, lr
 8000e04:	d302      	bcc.n	8000e0c <__udivmoddi4+0xc8>
 8000e06:	4282      	cmp	r2, r0
 8000e08:	f200 8105 	bhi.w	8001016 <__udivmoddi4+0x2d2>
 8000e0c:	1a84      	subs	r4, r0, r2
 8000e0e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e12:	2001      	movs	r0, #1
 8000e14:	4690      	mov	r8, r2
 8000e16:	2d00      	cmp	r5, #0
 8000e18:	d0e5      	beq.n	8000de6 <__udivmoddi4+0xa2>
 8000e1a:	e9c5 4800 	strd	r4, r8, [r5]
 8000e1e:	e7e2      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000e20:	2a00      	cmp	r2, #0
 8000e22:	f000 8090 	beq.w	8000f46 <__udivmoddi4+0x202>
 8000e26:	fab2 f682 	clz	r6, r2
 8000e2a:	2e00      	cmp	r6, #0
 8000e2c:	f040 80a4 	bne.w	8000f78 <__udivmoddi4+0x234>
 8000e30:	1a8a      	subs	r2, r1, r2
 8000e32:	0c03      	lsrs	r3, r0, #16
 8000e34:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e38:	b280      	uxth	r0, r0
 8000e3a:	b2bc      	uxth	r4, r7
 8000e3c:	2101      	movs	r1, #1
 8000e3e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e42:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e4a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e4e:	429a      	cmp	r2, r3
 8000e50:	d907      	bls.n	8000e62 <__udivmoddi4+0x11e>
 8000e52:	18fb      	adds	r3, r7, r3
 8000e54:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e58:	d202      	bcs.n	8000e60 <__udivmoddi4+0x11c>
 8000e5a:	429a      	cmp	r2, r3
 8000e5c:	f200 80e0 	bhi.w	8001020 <__udivmoddi4+0x2dc>
 8000e60:	46c4      	mov	ip, r8
 8000e62:	1a9b      	subs	r3, r3, r2
 8000e64:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e68:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e6c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e70:	fb02 f404 	mul.w	r4, r2, r4
 8000e74:	429c      	cmp	r4, r3
 8000e76:	d907      	bls.n	8000e88 <__udivmoddi4+0x144>
 8000e78:	18fb      	adds	r3, r7, r3
 8000e7a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e7e:	d202      	bcs.n	8000e86 <__udivmoddi4+0x142>
 8000e80:	429c      	cmp	r4, r3
 8000e82:	f200 80ca 	bhi.w	800101a <__udivmoddi4+0x2d6>
 8000e86:	4602      	mov	r2, r0
 8000e88:	1b1b      	subs	r3, r3, r4
 8000e8a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e8e:	e7a5      	b.n	8000ddc <__udivmoddi4+0x98>
 8000e90:	f1c1 0620 	rsb	r6, r1, #32
 8000e94:	408b      	lsls	r3, r1
 8000e96:	fa22 f706 	lsr.w	r7, r2, r6
 8000e9a:	431f      	orrs	r7, r3
 8000e9c:	fa0e f401 	lsl.w	r4, lr, r1
 8000ea0:	fa20 f306 	lsr.w	r3, r0, r6
 8000ea4:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ea8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000eac:	4323      	orrs	r3, r4
 8000eae:	fa00 f801 	lsl.w	r8, r0, r1
 8000eb2:	fa1f fc87 	uxth.w	ip, r7
 8000eb6:	fbbe f0f9 	udiv	r0, lr, r9
 8000eba:	0c1c      	lsrs	r4, r3, #16
 8000ebc:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ec0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ec4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ec8:	45a6      	cmp	lr, r4
 8000eca:	fa02 f201 	lsl.w	r2, r2, r1
 8000ece:	d909      	bls.n	8000ee4 <__udivmoddi4+0x1a0>
 8000ed0:	193c      	adds	r4, r7, r4
 8000ed2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000ed6:	f080 809c 	bcs.w	8001012 <__udivmoddi4+0x2ce>
 8000eda:	45a6      	cmp	lr, r4
 8000edc:	f240 8099 	bls.w	8001012 <__udivmoddi4+0x2ce>
 8000ee0:	3802      	subs	r0, #2
 8000ee2:	443c      	add	r4, r7
 8000ee4:	eba4 040e 	sub.w	r4, r4, lr
 8000ee8:	fa1f fe83 	uxth.w	lr, r3
 8000eec:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ef0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ef4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ef8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000efc:	45a4      	cmp	ip, r4
 8000efe:	d908      	bls.n	8000f12 <__udivmoddi4+0x1ce>
 8000f00:	193c      	adds	r4, r7, r4
 8000f02:	f103 3eff 	add.w	lr, r3, #4294967295
 8000f06:	f080 8082 	bcs.w	800100e <__udivmoddi4+0x2ca>
 8000f0a:	45a4      	cmp	ip, r4
 8000f0c:	d97f      	bls.n	800100e <__udivmoddi4+0x2ca>
 8000f0e:	3b02      	subs	r3, #2
 8000f10:	443c      	add	r4, r7
 8000f12:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f16:	eba4 040c 	sub.w	r4, r4, ip
 8000f1a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f1e:	4564      	cmp	r4, ip
 8000f20:	4673      	mov	r3, lr
 8000f22:	46e1      	mov	r9, ip
 8000f24:	d362      	bcc.n	8000fec <__udivmoddi4+0x2a8>
 8000f26:	d05f      	beq.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f28:	b15d      	cbz	r5, 8000f42 <__udivmoddi4+0x1fe>
 8000f2a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f2e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f32:	fa04 f606 	lsl.w	r6, r4, r6
 8000f36:	fa22 f301 	lsr.w	r3, r2, r1
 8000f3a:	431e      	orrs	r6, r3
 8000f3c:	40cc      	lsrs	r4, r1
 8000f3e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f42:	2100      	movs	r1, #0
 8000f44:	e74f      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000f46:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f4a:	0c01      	lsrs	r1, r0, #16
 8000f4c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f50:	b280      	uxth	r0, r0
 8000f52:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f56:	463b      	mov	r3, r7
 8000f58:	4638      	mov	r0, r7
 8000f5a:	463c      	mov	r4, r7
 8000f5c:	46b8      	mov	r8, r7
 8000f5e:	46be      	mov	lr, r7
 8000f60:	2620      	movs	r6, #32
 8000f62:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f66:	eba2 0208 	sub.w	r2, r2, r8
 8000f6a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f6e:	e766      	b.n	8000e3e <__udivmoddi4+0xfa>
 8000f70:	4601      	mov	r1, r0
 8000f72:	e718      	b.n	8000da6 <__udivmoddi4+0x62>
 8000f74:	4610      	mov	r0, r2
 8000f76:	e72c      	b.n	8000dd2 <__udivmoddi4+0x8e>
 8000f78:	f1c6 0220 	rsb	r2, r6, #32
 8000f7c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f80:	40b7      	lsls	r7, r6
 8000f82:	40b1      	lsls	r1, r6
 8000f84:	fa20 f202 	lsr.w	r2, r0, r2
 8000f88:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f8c:	430a      	orrs	r2, r1
 8000f8e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f92:	b2bc      	uxth	r4, r7
 8000f94:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f98:	0c11      	lsrs	r1, r2, #16
 8000f9a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f9e:	fb08 f904 	mul.w	r9, r8, r4
 8000fa2:	40b0      	lsls	r0, r6
 8000fa4:	4589      	cmp	r9, r1
 8000fa6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000faa:	b280      	uxth	r0, r0
 8000fac:	d93e      	bls.n	800102c <__udivmoddi4+0x2e8>
 8000fae:	1879      	adds	r1, r7, r1
 8000fb0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000fb4:	d201      	bcs.n	8000fba <__udivmoddi4+0x276>
 8000fb6:	4589      	cmp	r9, r1
 8000fb8:	d81f      	bhi.n	8000ffa <__udivmoddi4+0x2b6>
 8000fba:	eba1 0109 	sub.w	r1, r1, r9
 8000fbe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fc2:	fb09 f804 	mul.w	r8, r9, r4
 8000fc6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fca:	b292      	uxth	r2, r2
 8000fcc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fd0:	4542      	cmp	r2, r8
 8000fd2:	d229      	bcs.n	8001028 <__udivmoddi4+0x2e4>
 8000fd4:	18ba      	adds	r2, r7, r2
 8000fd6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000fda:	d2c4      	bcs.n	8000f66 <__udivmoddi4+0x222>
 8000fdc:	4542      	cmp	r2, r8
 8000fde:	d2c2      	bcs.n	8000f66 <__udivmoddi4+0x222>
 8000fe0:	f1a9 0102 	sub.w	r1, r9, #2
 8000fe4:	443a      	add	r2, r7
 8000fe6:	e7be      	b.n	8000f66 <__udivmoddi4+0x222>
 8000fe8:	45f0      	cmp	r8, lr
 8000fea:	d29d      	bcs.n	8000f28 <__udivmoddi4+0x1e4>
 8000fec:	ebbe 0302 	subs.w	r3, lr, r2
 8000ff0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ff4:	3801      	subs	r0, #1
 8000ff6:	46e1      	mov	r9, ip
 8000ff8:	e796      	b.n	8000f28 <__udivmoddi4+0x1e4>
 8000ffa:	eba7 0909 	sub.w	r9, r7, r9
 8000ffe:	4449      	add	r1, r9
 8001000:	f1a8 0c02 	sub.w	ip, r8, #2
 8001004:	fbb1 f9fe 	udiv	r9, r1, lr
 8001008:	fb09 f804 	mul.w	r8, r9, r4
 800100c:	e7db      	b.n	8000fc6 <__udivmoddi4+0x282>
 800100e:	4673      	mov	r3, lr
 8001010:	e77f      	b.n	8000f12 <__udivmoddi4+0x1ce>
 8001012:	4650      	mov	r0, sl
 8001014:	e766      	b.n	8000ee4 <__udivmoddi4+0x1a0>
 8001016:	4608      	mov	r0, r1
 8001018:	e6fd      	b.n	8000e16 <__udivmoddi4+0xd2>
 800101a:	443b      	add	r3, r7
 800101c:	3a02      	subs	r2, #2
 800101e:	e733      	b.n	8000e88 <__udivmoddi4+0x144>
 8001020:	f1ac 0c02 	sub.w	ip, ip, #2
 8001024:	443b      	add	r3, r7
 8001026:	e71c      	b.n	8000e62 <__udivmoddi4+0x11e>
 8001028:	4649      	mov	r1, r9
 800102a:	e79c      	b.n	8000f66 <__udivmoddi4+0x222>
 800102c:	eba1 0109 	sub.w	r1, r1, r9
 8001030:	46c4      	mov	ip, r8
 8001032:	fbb1 f9fe 	udiv	r9, r1, lr
 8001036:	fb09 f804 	mul.w	r8, r9, r4
 800103a:	e7c4      	b.n	8000fc6 <__udivmoddi4+0x282>

0800103c <__aeabi_idiv0>:
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop

<<<<<<< Updated upstream
08001040 <myprintf>:
=======
08001004 <lcd_write_nibble>:
#define LCD_ROWS 2 // Number of rows on the LCD
#define LCD_COLS 16 // Number of columns on the LCD

uint8_t backlight_state = 1;

void lcd_write_nibble(uint8_t nibble, uint8_t rs) {
 8001004:	b580      	push	{r7, lr}
 8001006:	b086      	sub	sp, #24
 8001008:	af02      	add	r7, sp, #8
 800100a:	4603      	mov	r3, r0
 800100c:	460a      	mov	r2, r1
 800100e:	71fb      	strb	r3, [r7, #7]
 8001010:	4613      	mov	r3, r2
 8001012:	71bb      	strb	r3, [r7, #6]
 uint8_t data = nibble << D4_BIT;
 8001014:	79fb      	ldrb	r3, [r7, #7]
 8001016:	011b      	lsls	r3, r3, #4
 8001018:	b2db      	uxtb	r3, r3
 800101a:	73fb      	strb	r3, [r7, #15]
 data |= rs << RS_BIT;
 800101c:	7bfa      	ldrb	r2, [r7, #15]
 800101e:	79bb      	ldrb	r3, [r7, #6]
 8001020:	4313      	orrs	r3, r2
 8001022:	b2db      	uxtb	r3, r3
 8001024:	73fb      	strb	r3, [r7, #15]
 data |= backlight_state << BL_BIT; // Include backlight state in data
 8001026:	4b16      	ldr	r3, [pc, #88]	@ (8001080 <lcd_write_nibble+0x7c>)
 8001028:	781b      	ldrb	r3, [r3, #0]
 800102a:	00db      	lsls	r3, r3, #3
 800102c:	b25a      	sxtb	r2, r3
 800102e:	7bfb      	ldrb	r3, [r7, #15]
 8001030:	b25b      	sxtb	r3, r3
 8001032:	4313      	orrs	r3, r2
 8001034:	b25b      	sxtb	r3, r3
 8001036:	b2db      	uxtb	r3, r3
 8001038:	73fb      	strb	r3, [r7, #15]
 data |= 1 << EN_BIT;
 800103a:	7bfb      	ldrb	r3, [r7, #15]
 800103c:	f043 0304 	orr.w	r3, r3, #4
 8001040:	b2db      	uxtb	r3, r3
 8001042:	73fb      	strb	r3, [r7, #15]
 HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8001044:	f107 020f 	add.w	r2, r7, #15
 8001048:	2364      	movs	r3, #100	@ 0x64
 800104a:	9300      	str	r3, [sp, #0]
 800104c:	2301      	movs	r3, #1
 800104e:	214e      	movs	r1, #78	@ 0x4e
 8001050:	480c      	ldr	r0, [pc, #48]	@ (8001084 <lcd_write_nibble+0x80>)
 8001052:	f001 ffb3 	bl	8002fbc <HAL_I2C_Master_Transmit>
 HAL_Delay(1);
 8001056:	2001      	movs	r0, #1
 8001058:	f001 fc02 	bl	8002860 <HAL_Delay>
 data &= ~(1 << EN_BIT);
 800105c:	7bfb      	ldrb	r3, [r7, #15]
 800105e:	f023 0304 	bic.w	r3, r3, #4
 8001062:	b2db      	uxtb	r3, r3
 8001064:	73fb      	strb	r3, [r7, #15]
 HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8001066:	f107 020f 	add.w	r2, r7, #15
 800106a:	2364      	movs	r3, #100	@ 0x64
 800106c:	9300      	str	r3, [sp, #0]
 800106e:	2301      	movs	r3, #1
 8001070:	214e      	movs	r1, #78	@ 0x4e
 8001072:	4804      	ldr	r0, [pc, #16]	@ (8001084 <lcd_write_nibble+0x80>)
 8001074:	f001 ffa2 	bl	8002fbc <HAL_I2C_Master_Transmit>
}
 8001078:	bf00      	nop
 800107a:	3710      	adds	r7, #16
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	20000000 	.word	0x20000000
 8001084:	20000224 	.word	0x20000224

08001088 <lcd_write_byte>:

HAL_StatusTypeDef lcd_write_byte(uint8_t byte){
 8001088:	b580      	push	{r7, lr}
 800108a:	b086      	sub	sp, #24
 800108c:	af02      	add	r7, sp, #8
 800108e:	4603      	mov	r3, r0
 8001090:	71fb      	strb	r3, [r7, #7]
	char data_upper, data_lower;
	uint8_t data[4];
	data_upper = (byte&0xf0);
 8001092:	79fb      	ldrb	r3, [r7, #7]
 8001094:	f023 030f 	bic.w	r3, r3, #15
 8001098:	73fb      	strb	r3, [r7, #15]
	data_lower = ((byte<<4)&0xf0);
 800109a:	79fb      	ldrb	r3, [r7, #7]
 800109c:	011b      	lsls	r3, r3, #4
 800109e:	73bb      	strb	r3, [r7, #14]
	data[0] = data_upper|0x0D;  //en=1, rs=0 -> bxxxx1101
 80010a0:	7bfb      	ldrb	r3, [r7, #15]
 80010a2:	f043 030d 	orr.w	r3, r3, #13
 80010a6:	b2db      	uxtb	r3, r3
 80010a8:	723b      	strb	r3, [r7, #8]
	data[1] = data_upper|0x09;  //en=0, rs=0 -> bxxxx1001
 80010aa:	7bfb      	ldrb	r3, [r7, #15]
 80010ac:	f043 0309 	orr.w	r3, r3, #9
 80010b0:	b2db      	uxtb	r3, r3
 80010b2:	727b      	strb	r3, [r7, #9]
	data[2] = data_lower|0x0D;  //en=1, rs=0 -> bxxxx1101
 80010b4:	7bbb      	ldrb	r3, [r7, #14]
 80010b6:	f043 030d 	orr.w	r3, r3, #13
 80010ba:	b2db      	uxtb	r3, r3
 80010bc:	72bb      	strb	r3, [r7, #10]
	data[3] = data_lower|0x09;  //en=0, rs=0 -> bxxxx1001
 80010be:	7bbb      	ldrb	r3, [r7, #14]
 80010c0:	f043 0309 	orr.w	r3, r3, #9
 80010c4:	b2db      	uxtb	r3, r3
 80010c6:	72fb      	strb	r3, [r7, #11]
	return HAL_I2C_Master_Transmit (&hi2c1, I2C_ADDR << 1, (uint8_t *) data, 4, 100);
 80010c8:	f107 0208 	add.w	r2, r7, #8
 80010cc:	2364      	movs	r3, #100	@ 0x64
 80010ce:	9300      	str	r3, [sp, #0]
 80010d0:	2304      	movs	r3, #4
 80010d2:	214e      	movs	r1, #78	@ 0x4e
 80010d4:	4803      	ldr	r0, [pc, #12]	@ (80010e4 <lcd_write_byte+0x5c>)
 80010d6:	f001 ff71 	bl	8002fbc <HAL_I2C_Master_Transmit>
 80010da:	4603      	mov	r3, r0
}
 80010dc:	4618      	mov	r0, r3
 80010de:	3710      	adds	r7, #16
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	20000224 	.word	0x20000224

080010e8 <lcd_send_cmd>:
void lcd_send_cmd(uint8_t cmd) {
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b084      	sub	sp, #16
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	4603      	mov	r3, r0
 80010f0:	71fb      	strb	r3, [r7, #7]
 uint8_t upper_nibble = cmd >> 4;
 80010f2:	79fb      	ldrb	r3, [r7, #7]
 80010f4:	091b      	lsrs	r3, r3, #4
 80010f6:	73fb      	strb	r3, [r7, #15]
 uint8_t lower_nibble = cmd & 0x0F;
 80010f8:	79fb      	ldrb	r3, [r7, #7]
 80010fa:	f003 030f 	and.w	r3, r3, #15
 80010fe:	73bb      	strb	r3, [r7, #14]
 lcd_write_nibble(upper_nibble, 0);
 8001100:	7bfb      	ldrb	r3, [r7, #15]
 8001102:	2100      	movs	r1, #0
 8001104:	4618      	mov	r0, r3
 8001106:	f7ff ff7d 	bl	8001004 <lcd_write_nibble>
 lcd_write_nibble(lower_nibble, 0);
 800110a:	7bbb      	ldrb	r3, [r7, #14]
 800110c:	2100      	movs	r1, #0
 800110e:	4618      	mov	r0, r3
 8001110:	f7ff ff78 	bl	8001004 <lcd_write_nibble>
 if (cmd == 0x01 || cmd == 0x02) {
 8001114:	79fb      	ldrb	r3, [r7, #7]
 8001116:	2b01      	cmp	r3, #1
 8001118:	d002      	beq.n	8001120 <lcd_send_cmd+0x38>
 800111a:	79fb      	ldrb	r3, [r7, #7]
 800111c:	2b02      	cmp	r3, #2
 800111e:	d102      	bne.n	8001126 <lcd_send_cmd+0x3e>
 HAL_Delay(2);
 8001120:	2002      	movs	r0, #2
 8001122:	f001 fb9d 	bl	8002860 <HAL_Delay>
 }
}
 8001126:	bf00      	nop
 8001128:	3710      	adds	r7, #16
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}

0800112e <lcd_init>:
 uint8_t lower_nibble = data & 0x0F;
 lcd_write_nibble(upper_nibble, 1);
 lcd_write_nibble(lower_nibble, 1);
}

void lcd_init() {
 800112e:	b580      	push	{r7, lr}
 8001130:	af00      	add	r7, sp, #0
 HAL_Delay(50);
 8001132:	2032      	movs	r0, #50	@ 0x32
 8001134:	f001 fb94 	bl	8002860 <HAL_Delay>
 lcd_write_nibble(0x03, 0);
 8001138:	2100      	movs	r1, #0
 800113a:	2003      	movs	r0, #3
 800113c:	f7ff ff62 	bl	8001004 <lcd_write_nibble>
 HAL_Delay(5);
 8001140:	2005      	movs	r0, #5
 8001142:	f001 fb8d 	bl	8002860 <HAL_Delay>
 lcd_write_nibble(0x03, 0);
 8001146:	2100      	movs	r1, #0
 8001148:	2003      	movs	r0, #3
 800114a:	f7ff ff5b 	bl	8001004 <lcd_write_nibble>
 HAL_Delay(1);
 800114e:	2001      	movs	r0, #1
 8001150:	f001 fb86 	bl	8002860 <HAL_Delay>
 lcd_write_nibble(0x03, 0);
 8001154:	2100      	movs	r1, #0
 8001156:	2003      	movs	r0, #3
 8001158:	f7ff ff54 	bl	8001004 <lcd_write_nibble>
 HAL_Delay(1);
 800115c:	2001      	movs	r0, #1
 800115e:	f001 fb7f 	bl	8002860 <HAL_Delay>
 lcd_write_nibble(0x02, 0);
 8001162:	2100      	movs	r1, #0
 8001164:	2002      	movs	r0, #2
 8001166:	f7ff ff4d 	bl	8001004 <lcd_write_nibble>
 lcd_send_cmd(0x28);
 800116a:	2028      	movs	r0, #40	@ 0x28
 800116c:	f7ff ffbc 	bl	80010e8 <lcd_send_cmd>
 lcd_send_cmd(0x0C);
 8001170:	200c      	movs	r0, #12
 8001172:	f7ff ffb9 	bl	80010e8 <lcd_send_cmd>
 lcd_send_cmd(0x06);
 8001176:	2006      	movs	r0, #6
 8001178:	f7ff ffb6 	bl	80010e8 <lcd_send_cmd>
 lcd_send_cmd(0x01);
 800117c:	2001      	movs	r0, #1
 800117e:	f7ff ffb3 	bl	80010e8 <lcd_send_cmd>
 HAL_Delay(2);
 8001182:	2002      	movs	r0, #2
 8001184:	f001 fb6c 	bl	8002860 <HAL_Delay>
}
 8001188:	bf00      	nop
 800118a:	bd80      	pop	{r7, pc}

0800118c <lcd_write_string>:
void lcd_write_string(char *str) {
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
	 while (*str) {
 8001194:	e019      	b.n	80011ca <lcd_write_string+0x3e>
		 if (*str == '\n' || *str == '\r'){
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	781b      	ldrb	r3, [r3, #0]
 800119a:	2b0a      	cmp	r3, #10
 800119c:	d003      	beq.n	80011a6 <lcd_write_string+0x1a>
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	2b0d      	cmp	r3, #13
 80011a4:	d103      	bne.n	80011ae <lcd_write_string+0x22>
			 str++;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	3301      	adds	r3, #1
 80011aa:	607b      	str	r3, [r7, #4]
 80011ac:	e00d      	b.n	80011ca <lcd_write_string+0x3e>
		 }
		 else{
			 if (lcd_write_byte((uint8_t)*str++) == HAL_ERROR){
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	1c5a      	adds	r2, r3, #1
 80011b2:	607a      	str	r2, [r7, #4]
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	4618      	mov	r0, r3
 80011b8:	f7ff ff66 	bl	8001088 <lcd_write_byte>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b01      	cmp	r3, #1
 80011c0:	d103      	bne.n	80011ca <lcd_write_string+0x3e>
				 printf("Failed to Transmit over I2C\n\r");
 80011c2:	4806      	ldr	r0, [pc, #24]	@ (80011dc <lcd_write_string+0x50>)
 80011c4:	f00a f89e 	bl	800b304 <iprintf>
				 return;		// Return Without Continuing, if unable to transmit
 80011c8:	e004      	b.n	80011d4 <lcd_write_string+0x48>
	 while (*str) {
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	781b      	ldrb	r3, [r3, #0]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d1e1      	bne.n	8001196 <lcd_write_string+0xa>
			 }
		 }
	 }
	 return;
 80011d2:	bf00      	nop
}
 80011d4:	3708      	adds	r7, #8
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	0800d780 	.word	0x0800d780

080011e0 <lcd_set_cursor>:
void lcd_set_cursor(uint8_t row, uint8_t column) {
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b084      	sub	sp, #16
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	4603      	mov	r3, r0
 80011e8:	460a      	mov	r2, r1
 80011ea:	71fb      	strb	r3, [r7, #7]
 80011ec:	4613      	mov	r3, r2
 80011ee:	71bb      	strb	r3, [r7, #6]
 uint8_t address;
 switch (row) {
 80011f0:	79fb      	ldrb	r3, [r7, #7]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d002      	beq.n	80011fc <lcd_set_cursor+0x1c>
 80011f6:	2b01      	cmp	r3, #1
 80011f8:	d003      	beq.n	8001202 <lcd_set_cursor+0x22>
 80011fa:	e005      	b.n	8001208 <lcd_set_cursor+0x28>
 case 0:
 address = 0x00;
 80011fc:	2300      	movs	r3, #0
 80011fe:	73fb      	strb	r3, [r7, #15]
 break;
 8001200:	e004      	b.n	800120c <lcd_set_cursor+0x2c>
 case 1:
 address = 0x40;
 8001202:	2340      	movs	r3, #64	@ 0x40
 8001204:	73fb      	strb	r3, [r7, #15]
 break;
 8001206:	e001      	b.n	800120c <lcd_set_cursor+0x2c>
 default:
 address = 0x00;
 8001208:	2300      	movs	r3, #0
 800120a:	73fb      	strb	r3, [r7, #15]
 }
 address += column;
 800120c:	7bfa      	ldrb	r2, [r7, #15]
 800120e:	79bb      	ldrb	r3, [r7, #6]
 8001210:	4413      	add	r3, r2
 8001212:	73fb      	strb	r3, [r7, #15]
 lcd_send_cmd(0x80 | address);
 8001214:	7bfb      	ldrb	r3, [r7, #15]
 8001216:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800121a:	b2db      	uxtb	r3, r3
 800121c:	4618      	mov	r0, r3
 800121e:	f7ff ff63 	bl	80010e8 <lcd_send_cmd>
}
 8001222:	bf00      	nop
 8001224:	3710      	adds	r7, #16
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}

0800122a <lcd_clear>:
void lcd_clear(void) {
 800122a:	b580      	push	{r7, lr}
 800122c:	af00      	add	r7, sp, #0
lcd_send_cmd(0x01);
 800122e:	2001      	movs	r0, #1
 8001230:	f7ff ff5a 	bl	80010e8 <lcd_send_cmd>
 HAL_Delay(2);
 8001234:	2002      	movs	r0, #2
 8001236:	f001 fb13 	bl	8002860 <HAL_Delay>
}
 800123a:	bf00      	nop
 800123c:	bd80      	pop	{r7, pc}
	...

08001240 <myprintf>:
>>>>>>> Stashed changes

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void myprintf(const char *fmt, ...)	// Function to print over UART nicely
{
<<<<<<< Updated upstream
 8001040:	b40f      	push	{r0, r1, r2, r3}
 8001042:	b580      	push	{r7, lr}
 8001044:	b082      	sub	sp, #8
 8001046:	af00      	add	r7, sp, #0
	static char buffer[256];
	va_list args;
	va_start(args, fmt);
 8001048:	f107 0314 	add.w	r3, r7, #20
 800104c:	603b      	str	r3, [r7, #0]
	vsnprintf(buffer, sizeof(buffer), fmt, args);
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	693a      	ldr	r2, [r7, #16]
 8001052:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001056:	480b      	ldr	r0, [pc, #44]	@ (8001084 <myprintf+0x44>)
 8001058:	f00d fd26 	bl	800eaa8 <vsniprintf>
	va_end(args);

	int len = strlen(buffer);
 800105c:	4809      	ldr	r0, [pc, #36]	@ (8001084 <myprintf+0x44>)
 800105e:	f7ff f8c1 	bl	80001e4 <strlen>
 8001062:	4603      	mov	r3, r0
 8001064:	607b      	str	r3, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)buffer, len, -1);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	b29a      	uxth	r2, r3
 800106a:	f04f 33ff 	mov.w	r3, #4294967295
 800106e:	4905      	ldr	r1, [pc, #20]	@ (8001084 <myprintf+0x44>)
 8001070:	4805      	ldr	r0, [pc, #20]	@ (8001088 <myprintf+0x48>)
 8001072:	f005 faf9 	bl	8006668 <HAL_UART_Transmit>

}
 8001076:	bf00      	nop
 8001078:	3708      	adds	r7, #8
 800107a:	46bd      	mov	sp, r7
 800107c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001080:	b004      	add	sp, #16
 8001082:	4770      	bx	lr
 8001084:	200008cc 	.word	0x200008cc
 8001088:	200003ac 	.word	0x200003ac

0800108c <main>:
=======
 8001240:	b40f      	push	{r0, r1, r2, r3}
 8001242:	b580      	push	{r7, lr}
 8001244:	b082      	sub	sp, #8
 8001246:	af00      	add	r7, sp, #0
	static char buffer[256];
	va_list args;
	va_start(args, fmt);
 8001248:	f107 0314 	add.w	r3, r7, #20
 800124c:	603b      	str	r3, [r7, #0]
	vsnprintf(buffer, sizeof(buffer), fmt, args);
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	693a      	ldr	r2, [r7, #16]
 8001252:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001256:	480b      	ldr	r0, [pc, #44]	@ (8001284 <myprintf+0x44>)
 8001258:	f00a f8d4 	bl	800b404 <vsniprintf>
	va_end(args);

	int len = strlen(buffer);
 800125c:	4809      	ldr	r0, [pc, #36]	@ (8001284 <myprintf+0x44>)
 800125e:	f7fe ffc1 	bl	80001e4 <strlen>
 8001262:	4603      	mov	r3, r0
 8001264:	607b      	str	r3, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)buffer, len, -1);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	b29a      	uxth	r2, r3
 800126a:	f04f 33ff 	mov.w	r3, #4294967295
 800126e:	4905      	ldr	r1, [pc, #20]	@ (8001284 <myprintf+0x44>)
 8001270:	4805      	ldr	r0, [pc, #20]	@ (8001288 <myprintf+0x48>)
 8001272:	f005 fc89 	bl	8006b88 <HAL_UART_Transmit>

}
 8001276:	bf00      	nop
 8001278:	3708      	adds	r7, #8
 800127a:	46bd      	mov	sp, r7
 800127c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001280:	b004      	add	sp, #16
 8001282:	4770      	bx	lr
 8001284:	200004b0 	.word	0x200004b0
 8001288:	20000414 	.word	0x20000414

0800128c <main>:
>>>>>>> Stashed changes
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
<<<<<<< Updated upstream
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0
=======
 800128c:	b580      	push	{r7, lr}
 800128e:	f5ad 6d9a 	sub.w	sp, sp, #1232	@ 0x4d0
 8001292:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
<<<<<<< Updated upstream
 8001090:	f001 fb78 	bl	8002784 <HAL_Init>
=======
 8001294:	f001 faa4 	bl	80027e0 <HAL_Init>
>>>>>>> Stashed changes
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
<<<<<<< Updated upstream
 8001094:	f000 f894 	bl	80011c0 <SystemClock_Config>
=======
 8001298:	f000 f8ac 	bl	80013f4 <SystemClock_Config>
>>>>>>> Stashed changes
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
<<<<<<< Updated upstream
 8001098:	f000 fa50 	bl	800153c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800109c:	f000 fa1e 	bl	80014dc <MX_USART2_UART_Init>
  MX_TIM16_Init();
 80010a0:	f000 f9cc 	bl	800143c <MX_TIM16_Init>
  MX_TIM17_Init();
 80010a4:	f000 f9f2 	bl	800148c <MX_TIM17_Init>
  MX_SPI1_Init();
 80010a8:	f000 f8dc 	bl	8001264 <MX_SPI1_Init>
  MX_FATFS_Init();
 80010ac:	f006 f83a 	bl	8007124 <MX_FATFS_Init>
  MX_TIM2_Init();
 80010b0:	f000 f916 	bl	80012e0 <MX_TIM2_Init>
  MX_TIM7_Init();
 80010b4:	f000 f98c 	bl	80013d0 <MX_TIM7_Init>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80010b8:	f009 f874 	bl	800a1a4 <osKernelInitialize>

  /* USER CODE BEGIN RTOS_MUTEX */

  //Open the file system
  fres = f_mount(&FatFs, "", 1); //1=mount now
 80010bc:	2201      	movs	r2, #1
 80010be:	492c      	ldr	r1, [pc, #176]	@ (8001170 <main+0xe4>)
 80010c0:	482c      	ldr	r0, [pc, #176]	@ (8001174 <main+0xe8>)
 80010c2:	f008 faff 	bl	80096c4 <f_mount>
 80010c6:	4603      	mov	r3, r0
 80010c8:	461a      	mov	r2, r3
 80010ca:	4b2b      	ldr	r3, [pc, #172]	@ (8001178 <main+0xec>)
 80010cc:	701a      	strb	r2, [r3, #0]
  if (fres != FR_OK) {
 80010ce:	4b2a      	ldr	r3, [pc, #168]	@ (8001178 <main+0xec>)
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d007      	beq.n	80010e6 <main+0x5a>
	myprintf("f_mount error (%i)\r\n", fres);
 80010d6:	4b28      	ldr	r3, [pc, #160]	@ (8001178 <main+0xec>)
 80010d8:	781b      	ldrb	r3, [r3, #0]
 80010da:	4619      	mov	r1, r3
 80010dc:	4827      	ldr	r0, [pc, #156]	@ (800117c <main+0xf0>)
 80010de:	f7ff ffaf 	bl	8001040 <myprintf>
	while(1);
 80010e2:	bf00      	nop
 80010e4:	e7fd      	b.n	80010e2 <main+0x56>
  }

  fres = f_open(&fil, "test.txt", FA_READ);
 80010e6:	2201      	movs	r2, #1
 80010e8:	4925      	ldr	r1, [pc, #148]	@ (8001180 <main+0xf4>)
 80010ea:	4826      	ldr	r0, [pc, #152]	@ (8001184 <main+0xf8>)
 80010ec:	f008 fb4e 	bl	800978c <f_open>
 80010f0:	4603      	mov	r3, r0
 80010f2:	461a      	mov	r2, r3
 80010f4:	4b20      	ldr	r3, [pc, #128]	@ (8001178 <main+0xec>)
 80010f6:	701a      	strb	r2, [r3, #0]
	  if (fres != FR_OK) {
 80010f8:	4b1f      	ldr	r3, [pc, #124]	@ (8001178 <main+0xec>)
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d007      	beq.n	8001110 <main+0x84>
		myprintf("f_open error (%i)\r\n", fres);
 8001100:	4b1d      	ldr	r3, [pc, #116]	@ (8001178 <main+0xec>)
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	4619      	mov	r1, r3
 8001106:	4820      	ldr	r0, [pc, #128]	@ (8001188 <main+0xfc>)
 8001108:	f7ff ff9a 	bl	8001040 <myprintf>
		while(1);
 800110c:	bf00      	nop
 800110e:	e7fd      	b.n	800110c <main+0x80>
	  }

  HAL_TIM_Base_Start_IT(&htim2);	// Starts the timer for PWM
 8001110:	481e      	ldr	r0, [pc, #120]	@ (800118c <main+0x100>)
 8001112:	f003 ffcf 	bl	80050b4 <HAL_TIM_Base_Start_IT>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of running */
  runningHandle = osSemaphoreNew(1, 0, &running_attributes);
 8001116:	4a1e      	ldr	r2, [pc, #120]	@ (8001190 <main+0x104>)
 8001118:	2100      	movs	r1, #0
 800111a:	2001      	movs	r0, #1
 800111c:	f009 f939 	bl	800a392 <osSemaphoreNew>
 8001120:	4603      	mov	r3, r0
 8001122:	4a1c      	ldr	r2, [pc, #112]	@ (8001194 <main+0x108>)
 8001124:	6013      	str	r3, [r2, #0]

  /* creation of setup */
  setupHandle = osSemaphoreNew(2, 0, &setup_attributes);
 8001126:	4a1c      	ldr	r2, [pc, #112]	@ (8001198 <main+0x10c>)
 8001128:	2100      	movs	r1, #0
 800112a:	2002      	movs	r0, #2
 800112c:	f009 f931 	bl	800a392 <osSemaphoreNew>
 8001130:	4603      	mov	r3, r0
 8001132:	4a1a      	ldr	r2, [pc, #104]	@ (800119c <main+0x110>)
 8001134:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of valuesQueue */
  valuesQueueHandle = osMessageQueueNew (100, 20, &valuesQueue_attributes);
 8001136:	4a1a      	ldr	r2, [pc, #104]	@ (80011a0 <main+0x114>)
 8001138:	2114      	movs	r1, #20
 800113a:	2064      	movs	r0, #100	@ 0x64
 800113c:	f009 fa8c 	bl	800a658 <osMessageQueueNew>
 8001140:	4603      	mov	r3, r0
 8001142:	4a18      	ldr	r2, [pc, #96]	@ (80011a4 <main+0x118>)
 8001144:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of LaserEngrave */
  LaserEngraveHandle = osThreadNew(LaserEngraveTask, NULL, &LaserEngrave_attributes);
 8001146:	4a18      	ldr	r2, [pc, #96]	@ (80011a8 <main+0x11c>)
 8001148:	2100      	movs	r1, #0
 800114a:	4818      	ldr	r0, [pc, #96]	@ (80011ac <main+0x120>)
 800114c:	f009 f874 	bl	800a238 <osThreadNew>
 8001150:	4603      	mov	r3, r0
 8001152:	4a17      	ldr	r2, [pc, #92]	@ (80011b0 <main+0x124>)
 8001154:	6013      	str	r3, [r2, #0]

  /* creation of LoadInstruction */
  LoadInstructionHandle = osThreadNew(StartLoadInstruction, NULL, &LoadInstruction_attributes);
 8001156:	4a17      	ldr	r2, [pc, #92]	@ (80011b4 <main+0x128>)
 8001158:	2100      	movs	r1, #0
 800115a:	4817      	ldr	r0, [pc, #92]	@ (80011b8 <main+0x12c>)
 800115c:	f009 f86c 	bl	800a238 <osThreadNew>
 8001160:	4603      	mov	r3, r0
 8001162:	4a16      	ldr	r2, [pc, #88]	@ (80011bc <main+0x130>)
 8001164:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001166:	f009 f841 	bl	800a1ec <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
=======
 800129c:	f000 fa98 	bl	80017d0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80012a0:	f000 fa66 	bl	8001770 <MX_USART2_UART_Init>
  MX_TIM16_Init();
 80012a4:	f000 fa14 	bl	80016d0 <MX_TIM16_Init>
  MX_TIM17_Init();
 80012a8:	f000 fa3a 	bl	8001720 <MX_TIM17_Init>
  MX_SPI1_Init();
 80012ac:	f000 f974 	bl	8001598 <MX_SPI1_Init>
  MX_FATFS_Init();
 80012b0:	f006 f9c8 	bl	8007644 <MX_FATFS_Init>
  MX_TIM2_Init();
 80012b4:	f000 f9ae 	bl	8001614 <MX_TIM2_Init>
  MX_I2C1_Init();
 80012b8:	f000 f8ee 	bl	8001498 <MX_I2C1_Init>
  MX_I2C2_Init();
 80012bc:	f000 f92c 	bl	8001518 <MX_I2C2_Init>

  /* USER CODE BEGIN 2 */
  myprintf("\r\n~ SD card demo by kiwih ~\r\n\r\n");
 80012c0:	4843      	ldr	r0, [pc, #268]	@ (80013d0 <main+0x144>)
 80012c2:	f7ff ffbd 	bl	8001240 <myprintf>

  HAL_Delay(1000); //a short delay is important to let the SD card settle
 80012c6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80012ca:	f001 fac9 	bl	8002860 <HAL_Delay>
  FATFS FatFs;    //Fatfs handle
  FIL fil;         //File handle
  FRESULT fres;    //Result after operations

  //Open the file system
  fres = f_mount(&FatFs, "", 1); //1=mount now
 80012ce:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 80012d2:	2201      	movs	r2, #1
 80012d4:	493f      	ldr	r1, [pc, #252]	@ (80013d4 <main+0x148>)
 80012d6:	4618      	mov	r0, r3
 80012d8:	f008 fc38 	bl	8009b4c <f_mount>
 80012dc:	4603      	mov	r3, r0
 80012de:	f887 34ce 	strb.w	r3, [r7, #1230]	@ 0x4ce
  if (fres != FR_OK) {
 80012e2:	f897 34ce 	ldrb.w	r3, [r7, #1230]	@ 0x4ce
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d007      	beq.n	80012fa <main+0x6e>
    myprintf("f_mount error (%i)\r\n", fres);
 80012ea:	f897 34ce 	ldrb.w	r3, [r7, #1230]	@ 0x4ce
 80012ee:	4619      	mov	r1, r3
 80012f0:	4839      	ldr	r0, [pc, #228]	@ (80013d8 <main+0x14c>)
 80012f2:	f7ff ffa5 	bl	8001240 <myprintf>
    while(1);
 80012f6:	bf00      	nop
 80012f8:	e7fd      	b.n	80012f6 <main+0x6a>
  }

  fres = f_open(&fil, "test.txt", FA_READ);
 80012fa:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80012fe:	2201      	movs	r2, #1
 8001300:	4936      	ldr	r1, [pc, #216]	@ (80013dc <main+0x150>)
 8001302:	4618      	mov	r0, r3
 8001304:	f008 fc68 	bl	8009bd8 <f_open>
 8001308:	4603      	mov	r3, r0
 800130a:	f887 34ce 	strb.w	r3, [r7, #1230]	@ 0x4ce
  if (fres != FR_OK) {
 800130e:	f897 34ce 	ldrb.w	r3, [r7, #1230]	@ 0x4ce
 8001312:	2b00      	cmp	r3, #0
 8001314:	d007      	beq.n	8001326 <main+0x9a>
    myprintf("f_open error (%i)\r\n", fres);
 8001316:	f897 34ce 	ldrb.w	r3, [r7, #1230]	@ 0x4ce
 800131a:	4619      	mov	r1, r3
 800131c:	4830      	ldr	r0, [pc, #192]	@ (80013e0 <main+0x154>)
 800131e:	f7ff ff8f 	bl	8001240 <myprintf>
    while(1);
 8001322:	bf00      	nop
 8001324:	e7fd      	b.n	8001322 <main+0x96>
  }
  myprintf("I was able to open 'test.txt' for reading!\r\n");
 8001326:	482f      	ldr	r0, [pc, #188]	@ (80013e4 <main+0x158>)
 8001328:	f7ff ff8a 	bl	8001240 <myprintf>

  HAL_GPIO_WritePin(XEN_GPIO_Port, XEN_Pin,0);
 800132c:	2200      	movs	r2, #0
 800132e:	2120      	movs	r1, #32
 8001330:	482d      	ldr	r0, [pc, #180]	@ (80013e8 <main+0x15c>)
 8001332:	f001 fd5d 	bl	8002df0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(YEN_GPIO_Port, YEN_Pin,0);
 8001336:	2200      	movs	r2, #0
 8001338:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800133c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001340:	f001 fd56 	bl	8002df0 <HAL_GPIO_WritePin>


  // Display Strings

      lcd_init ();
 8001344:	f7ff fef3 	bl	800112e <lcd_init>
      lcd_set_cursor(0, 0);
 8001348:	2100      	movs	r1, #0
 800134a:	2000      	movs	r0, #0
 800134c:	f7ff ff48 	bl	80011e0 <lcd_set_cursor>
      lcd_clear();
 8001350:	f7ff ff6b 	bl	800122a <lcd_clear>
      lcd_set_cursor(0, 0);
 8001354:	2100      	movs	r1, #0
 8001356:	2000      	movs	r0, #0
 8001358:	f7ff ff42 	bl	80011e0 <lcd_set_cursor>
      lcd_write_string ("HELLO");
 800135c:	4823      	ldr	r0, [pc, #140]	@ (80013ec <main+0x160>)
 800135e:	f7ff ff15 	bl	800118c <lcd_write_string>
>>>>>>> Stashed changes

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
<<<<<<< Updated upstream
 800116a:	bf00      	nop
 800116c:	e7fd      	b.n	800116a <main+0xde>
 800116e:	bf00      	nop
 8001170:	08010efc 	.word	0x08010efc
 8001174:	20000468 	.word	0x20000468
 8001178:	20000464 	.word	0x20000464
 800117c:	08010f00 	.word	0x08010f00
 8001180:	08010f18 	.word	0x08010f18
 8001184:	2000069c 	.word	0x2000069c
 8001188:	08010f24 	.word	0x08010f24
 800118c:	2000027c 	.word	0x2000027c
 8001190:	08010ffc 	.word	0x08010ffc
 8001194:	20000440 	.word	0x20000440
 8001198:	0801100c 	.word	0x0801100c
 800119c:	20000444 	.word	0x20000444
 80011a0:	08010fe4 	.word	0x08010fe4
 80011a4:	2000043c 	.word	0x2000043c
 80011a8:	08010f9c 	.word	0x08010f9c
 80011ac:	08001eb5 	.word	0x08001eb5
 80011b0:	20000434 	.word	0x20000434
 80011b4:	08010fc0 	.word	0x08010fc0
 80011b8:	08001f45 	.word	0x08001f45
 80011bc:	20000438 	.word	0x20000438

080011c0 <SystemClock_Config>:
=======
  {
    if (HAL_GPIO_ReadPin(SPI1_CD_GPIO_Port, SPI1_CD_Pin))
 8001362:	2180      	movs	r1, #128	@ 0x80
 8001364:	4822      	ldr	r0, [pc, #136]	@ (80013f0 <main+0x164>)
 8001366:	f001 fd2b 	bl	8002dc0 <HAL_GPIO_ReadPin>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d01d      	beq.n	80013ac <main+0x120>
    {
      BYTE readBuf[100];
      TCHAR* rres = f_gets((TCHAR*)readBuf, 100, &fil);
 8001370:	f107 0268 	add.w	r2, r7, #104	@ 0x68
 8001374:	1d3b      	adds	r3, r7, #4
 8001376:	2164      	movs	r1, #100	@ 0x64
 8001378:	4618      	mov	r0, r3
 800137a:	f008 ffce 	bl	800a31a <f_gets>
 800137e:	f8c7 04c8 	str.w	r0, [r7, #1224]	@ 0x4c8
      if(rres != 0) {
 8001382:	f8d7 34c8 	ldr.w	r3, [r7, #1224]	@ 0x4c8
 8001386:	2b00      	cmp	r3, #0
 8001388:	d004      	beq.n	8001394 <main+0x108>
        GcommandParse((TCHAR*)readBuf);
 800138a:	1d3b      	adds	r3, r7, #4
 800138c:	4618      	mov	r0, r3
 800138e:	f000 faf7 	bl	8001980 <GcommandParse>
 8001392:	e00b      	b.n	80013ac <main+0x120>
      } else {
        f_close(&fil);
 8001394:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8001398:	4618      	mov	r0, r3
 800139a:	f008 ff94 	bl	800a2c6 <f_close>
        f_mount(NULL, "", 0);
 800139e:	2200      	movs	r2, #0
 80013a0:	490c      	ldr	r1, [pc, #48]	@ (80013d4 <main+0x148>)
 80013a2:	2000      	movs	r0, #0
 80013a4:	f008 fbd2 	bl	8009b4c <f_mount>
        while(1){}
 80013a8:	bf00      	nop
 80013aa:	e7fd      	b.n	80013a8 <main+0x11c>
    }
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    // Gradually increase duty cycle
    for (uint8_t power = 0; power <= 255; power += 5) {
 80013ac:	2300      	movs	r3, #0
 80013ae:	f887 34cf 	strb.w	r3, [r7, #1231]	@ 0x4cf
      SetLaserPower(power);
 80013b2:	f897 34cf 	ldrb.w	r3, [r7, #1231]	@ 0x4cf
 80013b6:	4618      	mov	r0, r3
 80013b8:	f000 fcf2 	bl	8001da0 <SetLaserPower>
      HAL_Delay(10);
 80013bc:	200a      	movs	r0, #10
 80013be:	f001 fa4f 	bl	8002860 <HAL_Delay>
    for (uint8_t power = 0; power <= 255; power += 5) {
 80013c2:	f897 34cf 	ldrb.w	r3, [r7, #1231]	@ 0x4cf
 80013c6:	3305      	adds	r3, #5
 80013c8:	f887 34cf 	strb.w	r3, [r7, #1231]	@ 0x4cf
 80013cc:	bf00      	nop
 80013ce:	e7f0      	b.n	80013b2 <main+0x126>
 80013d0:	0800d7a0 	.word	0x0800d7a0
 80013d4:	0800d7c0 	.word	0x0800d7c0
 80013d8:	0800d7c4 	.word	0x0800d7c4
 80013dc:	0800d7dc 	.word	0x0800d7dc
 80013e0:	0800d7e8 	.word	0x0800d7e8
 80013e4:	0800d7fc 	.word	0x0800d7fc
 80013e8:	48000400 	.word	0x48000400
 80013ec:	0800d82c 	.word	0x0800d82c
 80013f0:	48000800 	.word	0x48000800

080013f4 <SystemClock_Config>:
>>>>>>> Stashed changes
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
<<<<<<< Updated upstream
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b096      	sub	sp, #88	@ 0x58
 80011c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011c6:	f107 0314 	add.w	r3, r7, #20
 80011ca:	2244      	movs	r2, #68	@ 0x44
 80011cc:	2100      	movs	r1, #0
 80011ce:	4618      	mov	r0, r3
 80011d0:	f00d fc78 	bl	800eac4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011d4:	463b      	mov	r3, r7
 80011d6:	2200      	movs	r2, #0
 80011d8:	601a      	str	r2, [r3, #0]
 80011da:	605a      	str	r2, [r3, #4]
 80011dc:	609a      	str	r2, [r3, #8]
 80011de:	60da      	str	r2, [r3, #12]
 80011e0:	611a      	str	r2, [r3, #16]
=======
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b096      	sub	sp, #88	@ 0x58
 80013f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013fa:	f107 0314 	add.w	r3, r7, #20
 80013fe:	2244      	movs	r2, #68	@ 0x44
 8001400:	2100      	movs	r1, #0
 8001402:	4618      	mov	r0, r3
 8001404:	f00a f80c 	bl	800b420 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001408:	463b      	mov	r3, r7
 800140a:	2200      	movs	r2, #0
 800140c:	601a      	str	r2, [r3, #0]
 800140e:	605a      	str	r2, [r3, #4]
 8001410:	609a      	str	r2, [r3, #8]
 8001412:	60da      	str	r2, [r3, #12]
 8001414:	611a      	str	r2, [r3, #16]
>>>>>>> Stashed changes

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
<<<<<<< Updated upstream
 80011e2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80011e6:	f001 fe2d 	bl	8002e44 <HAL_PWREx_ControlVoltageScaling>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d001      	beq.n	80011f4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80011f0:	f000 ff9c 	bl	800212c <Error_Handler>
=======
 8001416:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800141a:	f002 f9a7 	bl	800376c <HAL_PWREx_ControlVoltageScaling>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d001      	beq.n	8001428 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001424:	f000 fe0c 	bl	8002040 <Error_Handler>
>>>>>>> Stashed changes
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
<<<<<<< Updated upstream
 80011f4:	2302      	movs	r3, #2
 80011f6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011f8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80011fc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011fe:	2310      	movs	r3, #16
 8001200:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001202:	2302      	movs	r3, #2
 8001204:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001206:	2302      	movs	r3, #2
 8001208:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800120a:	2301      	movs	r3, #1
 800120c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800120e:	230a      	movs	r3, #10
 8001210:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001212:	2307      	movs	r3, #7
 8001214:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001216:	2302      	movs	r3, #2
 8001218:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800121a:	2302      	movs	r3, #2
 800121c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800121e:	f107 0314 	add.w	r3, r7, #20
 8001222:	4618      	mov	r0, r3
 8001224:	f001 fe64 	bl	8002ef0 <HAL_RCC_OscConfig>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800122e:	f000 ff7d 	bl	800212c <Error_Handler>
=======
 8001428:	2302      	movs	r3, #2
 800142a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800142c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001430:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001432:	2310      	movs	r3, #16
 8001434:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001436:	2302      	movs	r3, #2
 8001438:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800143a:	2302      	movs	r3, #2
 800143c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800143e:	2301      	movs	r3, #1
 8001440:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001442:	230a      	movs	r3, #10
 8001444:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001446:	2307      	movs	r3, #7
 8001448:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800144a:	2302      	movs	r3, #2
 800144c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800144e:	2302      	movs	r3, #2
 8001450:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001452:	f107 0314 	add.w	r3, r7, #20
 8001456:	4618      	mov	r0, r3
 8001458:	f002 f9de 	bl	8003818 <HAL_RCC_OscConfig>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001462:	f000 fded 	bl	8002040 <Error_Handler>
>>>>>>> Stashed changes
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
<<<<<<< Updated upstream
 8001232:	230f      	movs	r3, #15
 8001234:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001236:	2303      	movs	r3, #3
 8001238:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800123a:	2300      	movs	r3, #0
 800123c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800123e:	2300      	movs	r3, #0
 8001240:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001242:	2300      	movs	r3, #0
 8001244:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001246:	463b      	mov	r3, r7
 8001248:	2104      	movs	r1, #4
 800124a:	4618      	mov	r0, r3
 800124c:	f002 fa2c 	bl	80036a8 <HAL_RCC_ClockConfig>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001256:	f000 ff69 	bl	800212c <Error_Handler>
  }
}
 800125a:	bf00      	nop
 800125c:	3758      	adds	r7, #88	@ 0x58
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
	...

08001264 <MX_SPI1_Init>:
=======
 8001466:	230f      	movs	r3, #15
 8001468:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800146a:	2303      	movs	r3, #3
 800146c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800146e:	2300      	movs	r3, #0
 8001470:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001472:	2300      	movs	r3, #0
 8001474:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001476:	2300      	movs	r3, #0
 8001478:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800147a:	463b      	mov	r3, r7
 800147c:	2104      	movs	r1, #4
 800147e:	4618      	mov	r0, r3
 8001480:	f002 fda6 	bl	8003fd0 <HAL_RCC_ClockConfig>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800148a:	f000 fdd9 	bl	8002040 <Error_Handler>
  }
}
 800148e:	bf00      	nop
 8001490:	3758      	adds	r7, #88	@ 0x58
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
	...

08001498 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800149c:	4b1b      	ldr	r3, [pc, #108]	@ (800150c <MX_I2C1_Init+0x74>)
 800149e:	4a1c      	ldr	r2, [pc, #112]	@ (8001510 <MX_I2C1_Init+0x78>)
 80014a0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10D19CE4;
 80014a2:	4b1a      	ldr	r3, [pc, #104]	@ (800150c <MX_I2C1_Init+0x74>)
 80014a4:	4a1b      	ldr	r2, [pc, #108]	@ (8001514 <MX_I2C1_Init+0x7c>)
 80014a6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80014a8:	4b18      	ldr	r3, [pc, #96]	@ (800150c <MX_I2C1_Init+0x74>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014ae:	4b17      	ldr	r3, [pc, #92]	@ (800150c <MX_I2C1_Init+0x74>)
 80014b0:	2201      	movs	r2, #1
 80014b2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014b4:	4b15      	ldr	r3, [pc, #84]	@ (800150c <MX_I2C1_Init+0x74>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80014ba:	4b14      	ldr	r3, [pc, #80]	@ (800150c <MX_I2C1_Init+0x74>)
 80014bc:	2200      	movs	r2, #0
 80014be:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80014c0:	4b12      	ldr	r3, [pc, #72]	@ (800150c <MX_I2C1_Init+0x74>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014c6:	4b11      	ldr	r3, [pc, #68]	@ (800150c <MX_I2C1_Init+0x74>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014cc:	4b0f      	ldr	r3, [pc, #60]	@ (800150c <MX_I2C1_Init+0x74>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80014d2:	480e      	ldr	r0, [pc, #56]	@ (800150c <MX_I2C1_Init+0x74>)
 80014d4:	f001 fcd6 	bl	8002e84 <HAL_I2C_Init>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80014de:	f000 fdaf 	bl	8002040 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80014e2:	2100      	movs	r1, #0
 80014e4:	4809      	ldr	r0, [pc, #36]	@ (800150c <MX_I2C1_Init+0x74>)
 80014e6:	f002 f89b 	bl	8003620 <HAL_I2CEx_ConfigAnalogFilter>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d001      	beq.n	80014f4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80014f0:	f000 fda6 	bl	8002040 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80014f4:	2100      	movs	r1, #0
 80014f6:	4805      	ldr	r0, [pc, #20]	@ (800150c <MX_I2C1_Init+0x74>)
 80014f8:	f002 f8dd 	bl	80036b6 <HAL_I2CEx_ConfigDigitalFilter>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d001      	beq.n	8001506 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001502:	f000 fd9d 	bl	8002040 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001506:	bf00      	nop
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	20000224 	.word	0x20000224
 8001510:	40005400 	.word	0x40005400
 8001514:	10d19ce4 	.word	0x10d19ce4

08001518 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800151c:	4b1b      	ldr	r3, [pc, #108]	@ (800158c <MX_I2C2_Init+0x74>)
 800151e:	4a1c      	ldr	r2, [pc, #112]	@ (8001590 <MX_I2C2_Init+0x78>)
 8001520:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10D19CE4;
 8001522:	4b1a      	ldr	r3, [pc, #104]	@ (800158c <MX_I2C2_Init+0x74>)
 8001524:	4a1b      	ldr	r2, [pc, #108]	@ (8001594 <MX_I2C2_Init+0x7c>)
 8001526:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001528:	4b18      	ldr	r3, [pc, #96]	@ (800158c <MX_I2C2_Init+0x74>)
 800152a:	2200      	movs	r2, #0
 800152c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800152e:	4b17      	ldr	r3, [pc, #92]	@ (800158c <MX_I2C2_Init+0x74>)
 8001530:	2201      	movs	r2, #1
 8001532:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001534:	4b15      	ldr	r3, [pc, #84]	@ (800158c <MX_I2C2_Init+0x74>)
 8001536:	2200      	movs	r2, #0
 8001538:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800153a:	4b14      	ldr	r3, [pc, #80]	@ (800158c <MX_I2C2_Init+0x74>)
 800153c:	2200      	movs	r2, #0
 800153e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001540:	4b12      	ldr	r3, [pc, #72]	@ (800158c <MX_I2C2_Init+0x74>)
 8001542:	2200      	movs	r2, #0
 8001544:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001546:	4b11      	ldr	r3, [pc, #68]	@ (800158c <MX_I2C2_Init+0x74>)
 8001548:	2200      	movs	r2, #0
 800154a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800154c:	4b0f      	ldr	r3, [pc, #60]	@ (800158c <MX_I2C2_Init+0x74>)
 800154e:	2200      	movs	r2, #0
 8001550:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001552:	480e      	ldr	r0, [pc, #56]	@ (800158c <MX_I2C2_Init+0x74>)
 8001554:	f001 fc96 	bl	8002e84 <HAL_I2C_Init>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800155e:	f000 fd6f 	bl	8002040 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001562:	2100      	movs	r1, #0
 8001564:	4809      	ldr	r0, [pc, #36]	@ (800158c <MX_I2C2_Init+0x74>)
 8001566:	f002 f85b 	bl	8003620 <HAL_I2CEx_ConfigAnalogFilter>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d001      	beq.n	8001574 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001570:	f000 fd66 	bl	8002040 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001574:	2100      	movs	r1, #0
 8001576:	4805      	ldr	r0, [pc, #20]	@ (800158c <MX_I2C2_Init+0x74>)
 8001578:	f002 f89d 	bl	80036b6 <HAL_I2CEx_ConfigDigitalFilter>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001582:	f000 fd5d 	bl	8002040 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001586:	bf00      	nop
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	20000278 	.word	0x20000278
 8001590:	40005800 	.word	0x40005800
 8001594:	10d19ce4 	.word	0x10d19ce4

08001598 <MX_SPI1_Init>:
>>>>>>> Stashed changes
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
<<<<<<< Updated upstream
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0
=======
 8001598:	b580      	push	{r7, lr}
 800159a:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
<<<<<<< Updated upstream
 8001268:	4b1b      	ldr	r3, [pc, #108]	@ (80012d8 <MX_SPI1_Init+0x74>)
 800126a:	4a1c      	ldr	r2, [pc, #112]	@ (80012dc <MX_SPI1_Init+0x78>)
 800126c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800126e:	4b1a      	ldr	r3, [pc, #104]	@ (80012d8 <MX_SPI1_Init+0x74>)
 8001270:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001274:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001276:	4b18      	ldr	r3, [pc, #96]	@ (80012d8 <MX_SPI1_Init+0x74>)
 8001278:	2200      	movs	r2, #0
 800127a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800127c:	4b16      	ldr	r3, [pc, #88]	@ (80012d8 <MX_SPI1_Init+0x74>)
 800127e:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001282:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001284:	4b14      	ldr	r3, [pc, #80]	@ (80012d8 <MX_SPI1_Init+0x74>)
 8001286:	2202      	movs	r2, #2
 8001288:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800128a:	4b13      	ldr	r3, [pc, #76]	@ (80012d8 <MX_SPI1_Init+0x74>)
 800128c:	2201      	movs	r2, #1
 800128e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001290:	4b11      	ldr	r3, [pc, #68]	@ (80012d8 <MX_SPI1_Init+0x74>)
 8001292:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001296:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001298:	4b0f      	ldr	r3, [pc, #60]	@ (80012d8 <MX_SPI1_Init+0x74>)
 800129a:	2210      	movs	r2, #16
 800129c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800129e:	4b0e      	ldr	r3, [pc, #56]	@ (80012d8 <MX_SPI1_Init+0x74>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80012a4:	4b0c      	ldr	r3, [pc, #48]	@ (80012d8 <MX_SPI1_Init+0x74>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012aa:	4b0b      	ldr	r3, [pc, #44]	@ (80012d8 <MX_SPI1_Init+0x74>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80012b0:	4b09      	ldr	r3, [pc, #36]	@ (80012d8 <MX_SPI1_Init+0x74>)
 80012b2:	2207      	movs	r2, #7
 80012b4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80012b6:	4b08      	ldr	r3, [pc, #32]	@ (80012d8 <MX_SPI1_Init+0x74>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80012bc:	4b06      	ldr	r3, [pc, #24]	@ (80012d8 <MX_SPI1_Init+0x74>)
 80012be:	2200      	movs	r2, #0
 80012c0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80012c2:	4805      	ldr	r0, [pc, #20]	@ (80012d8 <MX_SPI1_Init+0x74>)
 80012c4:	f003 f902 	bl	80044cc <HAL_SPI_Init>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80012ce:	f000 ff2d 	bl	800212c <Error_Handler>
=======
 800159c:	4b1b      	ldr	r3, [pc, #108]	@ (800160c <MX_SPI1_Init+0x74>)
 800159e:	4a1c      	ldr	r2, [pc, #112]	@ (8001610 <MX_SPI1_Init+0x78>)
 80015a0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80015a2:	4b1a      	ldr	r3, [pc, #104]	@ (800160c <MX_SPI1_Init+0x74>)
 80015a4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80015a8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80015aa:	4b18      	ldr	r3, [pc, #96]	@ (800160c <MX_SPI1_Init+0x74>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80015b0:	4b16      	ldr	r3, [pc, #88]	@ (800160c <MX_SPI1_Init+0x74>)
 80015b2:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80015b6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80015b8:	4b14      	ldr	r3, [pc, #80]	@ (800160c <MX_SPI1_Init+0x74>)
 80015ba:	2202      	movs	r2, #2
 80015bc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80015be:	4b13      	ldr	r3, [pc, #76]	@ (800160c <MX_SPI1_Init+0x74>)
 80015c0:	2201      	movs	r2, #1
 80015c2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80015c4:	4b11      	ldr	r3, [pc, #68]	@ (800160c <MX_SPI1_Init+0x74>)
 80015c6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80015ca:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80015cc:	4b0f      	ldr	r3, [pc, #60]	@ (800160c <MX_SPI1_Init+0x74>)
 80015ce:	2238      	movs	r2, #56	@ 0x38
 80015d0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015d2:	4b0e      	ldr	r3, [pc, #56]	@ (800160c <MX_SPI1_Init+0x74>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80015d8:	4b0c      	ldr	r3, [pc, #48]	@ (800160c <MX_SPI1_Init+0x74>)
 80015da:	2200      	movs	r2, #0
 80015dc:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015de:	4b0b      	ldr	r3, [pc, #44]	@ (800160c <MX_SPI1_Init+0x74>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80015e4:	4b09      	ldr	r3, [pc, #36]	@ (800160c <MX_SPI1_Init+0x74>)
 80015e6:	2207      	movs	r2, #7
 80015e8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80015ea:	4b08      	ldr	r3, [pc, #32]	@ (800160c <MX_SPI1_Init+0x74>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80015f0:	4b06      	ldr	r3, [pc, #24]	@ (800160c <MX_SPI1_Init+0x74>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80015f6:	4805      	ldr	r0, [pc, #20]	@ (800160c <MX_SPI1_Init+0x74>)
 80015f8:	f003 fbfc 	bl	8004df4 <HAL_SPI_Init>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d001      	beq.n	8001606 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001602:	f000 fd1d 	bl	8002040 <Error_Handler>
>>>>>>> Stashed changes
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
<<<<<<< Updated upstream
 80012d2:	bf00      	nop
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	20000218 	.word	0x20000218
 80012dc:	40013000 	.word	0x40013000

080012e0 <MX_TIM2_Init>:
=======
 8001606:	bf00      	nop
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	200002cc 	.word	0x200002cc
 8001610:	40013000 	.word	0x40013000

08001614 <MX_TIM2_Init>:
>>>>>>> Stashed changes
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
<<<<<<< Updated upstream
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b08e      	sub	sp, #56	@ 0x38
 80012e4:	af00      	add	r7, sp, #0
=======
 8001614:	b580      	push	{r7, lr}
 8001616:	b08a      	sub	sp, #40	@ 0x28
 8001618:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012e6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80012ea:	2200      	movs	r2, #0
 80012ec:	601a      	str	r2, [r3, #0]
 80012ee:	605a      	str	r2, [r3, #4]
 80012f0:	609a      	str	r2, [r3, #8]
 80012f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
<<<<<<< Updated upstream
 80012f4:	f107 031c 	add.w	r3, r7, #28
 80012f8:	2200      	movs	r2, #0
 80012fa:	601a      	str	r2, [r3, #0]
 80012fc:	605a      	str	r2, [r3, #4]
 80012fe:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001300:	463b      	mov	r3, r7
 8001302:	2200      	movs	r2, #0
 8001304:	601a      	str	r2, [r3, #0]
 8001306:	605a      	str	r2, [r3, #4]
 8001308:	609a      	str	r2, [r3, #8]
 800130a:	60da      	str	r2, [r3, #12]
 800130c:	611a      	str	r2, [r3, #16]
 800130e:	615a      	str	r2, [r3, #20]
 8001310:	619a      	str	r2, [r3, #24]
=======
 800161a:	f107 031c 	add.w	r3, r7, #28
 800161e:	2200      	movs	r2, #0
 8001620:	601a      	str	r2, [r3, #0]
 8001622:	605a      	str	r2, [r3, #4]
 8001624:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001626:	463b      	mov	r3, r7
 8001628:	2200      	movs	r2, #0
 800162a:	601a      	str	r2, [r3, #0]
 800162c:	605a      	str	r2, [r3, #4]
 800162e:	609a      	str	r2, [r3, #8]
 8001630:	60da      	str	r2, [r3, #12]
 8001632:	611a      	str	r2, [r3, #16]
 8001634:	615a      	str	r2, [r3, #20]
 8001636:	619a      	str	r2, [r3, #24]
>>>>>>> Stashed changes

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
<<<<<<< Updated upstream
 8001312:	4b2d      	ldr	r3, [pc, #180]	@ (80013c8 <MX_TIM2_Init+0xe8>)
 8001314:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001318:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800131a:	4b2b      	ldr	r3, [pc, #172]	@ (80013c8 <MX_TIM2_Init+0xe8>)
 800131c:	2200      	movs	r2, #0
 800131e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001320:	4b29      	ldr	r3, [pc, #164]	@ (80013c8 <MX_TIM2_Init+0xe8>)
 8001322:	2200      	movs	r2, #0
 8001324:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 79999;
 8001326:	4b28      	ldr	r3, [pc, #160]	@ (80013c8 <MX_TIM2_Init+0xe8>)
 8001328:	4a28      	ldr	r2, [pc, #160]	@ (80013cc <MX_TIM2_Init+0xec>)
 800132a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800132c:	4b26      	ldr	r3, [pc, #152]	@ (80013c8 <MX_TIM2_Init+0xe8>)
 800132e:	2200      	movs	r2, #0
 8001330:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001332:	4b25      	ldr	r3, [pc, #148]	@ (80013c8 <MX_TIM2_Init+0xe8>)
 8001334:	2280      	movs	r2, #128	@ 0x80
 8001336:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001338:	4823      	ldr	r0, [pc, #140]	@ (80013c8 <MX_TIM2_Init+0xe8>)
 800133a:	f003 fe63 	bl	8005004 <HAL_TIM_Base_Init>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d001      	beq.n	8001348 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001344:	f000 fef2 	bl	800212c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001348:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800134c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800134e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001352:	4619      	mov	r1, r3
 8001354:	481c      	ldr	r0, [pc, #112]	@ (80013c8 <MX_TIM2_Init+0xe8>)
 8001356:	f004 fb65 	bl	8005a24 <HAL_TIM_ConfigClockSource>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d001      	beq.n	8001364 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001360:	f000 fee4 	bl	800212c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001364:	4818      	ldr	r0, [pc, #96]	@ (80013c8 <MX_TIM2_Init+0xe8>)
 8001366:	f003 ff44 	bl	80051f2 <HAL_TIM_PWM_Init>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d001      	beq.n	8001374 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001370:	f000 fedc 	bl	800212c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001374:	2300      	movs	r3, #0
 8001376:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001378:	2300      	movs	r3, #0
 800137a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800137c:	f107 031c 	add.w	r3, r7, #28
 8001380:	4619      	mov	r1, r3
 8001382:	4811      	ldr	r0, [pc, #68]	@ (80013c8 <MX_TIM2_Init+0xe8>)
 8001384:	f005 f87c 	bl	8006480 <HAL_TIMEx_MasterConfigSynchronization>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d001      	beq.n	8001392 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800138e:	f000 fecd 	bl	800212c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001392:	2360      	movs	r3, #96	@ 0x60
 8001394:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001396:	2300      	movs	r3, #0
 8001398:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800139a:	2300      	movs	r3, #0
 800139c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800139e:	2300      	movs	r3, #0
 80013a0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013a2:	463b      	mov	r3, r7
 80013a4:	2200      	movs	r2, #0
 80013a6:	4619      	mov	r1, r3
 80013a8:	4807      	ldr	r0, [pc, #28]	@ (80013c8 <MX_TIM2_Init+0xe8>)
 80013aa:	f004 fa27 	bl	80057fc <HAL_TIM_PWM_ConfigChannel>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d001      	beq.n	80013b8 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80013b4:	f000 feba 	bl	800212c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80013b8:	4803      	ldr	r0, [pc, #12]	@ (80013c8 <MX_TIM2_Init+0xe8>)
 80013ba:	f000 ff8f 	bl	80022dc <HAL_TIM_MspPostInit>

}
 80013be:	bf00      	nop
 80013c0:	3738      	adds	r7, #56	@ 0x38
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	2000027c 	.word	0x2000027c
 80013cc:	0001387f 	.word	0x0001387f

080013d0 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b084      	sub	sp, #16
 80013d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013d6:	1d3b      	adds	r3, r7, #4
 80013d8:	2200      	movs	r2, #0
 80013da:	601a      	str	r2, [r3, #0]
 80013dc:	605a      	str	r2, [r3, #4]
 80013de:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80013e0:	4b14      	ldr	r3, [pc, #80]	@ (8001434 <MX_TIM7_Init+0x64>)
 80013e2:	4a15      	ldr	r2, [pc, #84]	@ (8001438 <MX_TIM7_Init+0x68>)
 80013e4:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 7;
 80013e6:	4b13      	ldr	r3, [pc, #76]	@ (8001434 <MX_TIM7_Init+0x64>)
 80013e8:	2207      	movs	r2, #7
 80013ea:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013ec:	4b11      	ldr	r3, [pc, #68]	@ (8001434 <MX_TIM7_Init+0x64>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 80013f2:	4b10      	ldr	r3, [pc, #64]	@ (8001434 <MX_TIM7_Init+0x64>)
 80013f4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80013f8:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013fa:	4b0e      	ldr	r3, [pc, #56]	@ (8001434 <MX_TIM7_Init+0x64>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001400:	480c      	ldr	r0, [pc, #48]	@ (8001434 <MX_TIM7_Init+0x64>)
 8001402:	f003 fdff 	bl	8005004 <HAL_TIM_Base_Init>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 800140c:	f000 fe8e 	bl	800212c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001410:	2300      	movs	r3, #0
 8001412:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001414:	2300      	movs	r3, #0
 8001416:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001418:	1d3b      	adds	r3, r7, #4
 800141a:	4619      	mov	r1, r3
 800141c:	4805      	ldr	r0, [pc, #20]	@ (8001434 <MX_TIM7_Init+0x64>)
 800141e:	f005 f82f 	bl	8006480 <HAL_TIMEx_MasterConfigSynchronization>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d001      	beq.n	800142c <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8001428:	f000 fe80 	bl	800212c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800142c:	bf00      	nop
 800142e:	3710      	adds	r7, #16
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	200002c8 	.word	0x200002c8
 8001438:	40001400 	.word	0x40001400

0800143c <MX_TIM16_Init>:
=======
 8001638:	4b23      	ldr	r3, [pc, #140]	@ (80016c8 <MX_TIM2_Init+0xb4>)
 800163a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800163e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001640:	4b21      	ldr	r3, [pc, #132]	@ (80016c8 <MX_TIM2_Init+0xb4>)
 8001642:	2200      	movs	r2, #0
 8001644:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001646:	4b20      	ldr	r3, [pc, #128]	@ (80016c8 <MX_TIM2_Init+0xb4>)
 8001648:	2200      	movs	r2, #0
 800164a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 79999;
 800164c:	4b1e      	ldr	r3, [pc, #120]	@ (80016c8 <MX_TIM2_Init+0xb4>)
 800164e:	4a1f      	ldr	r2, [pc, #124]	@ (80016cc <MX_TIM2_Init+0xb8>)
 8001650:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001652:	4b1d      	ldr	r3, [pc, #116]	@ (80016c8 <MX_TIM2_Init+0xb4>)
 8001654:	2200      	movs	r2, #0
 8001656:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001658:	4b1b      	ldr	r3, [pc, #108]	@ (80016c8 <MX_TIM2_Init+0xb4>)
 800165a:	2280      	movs	r2, #128	@ 0x80
 800165c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800165e:	481a      	ldr	r0, [pc, #104]	@ (80016c8 <MX_TIM2_Init+0xb4>)
 8001660:	f004 fa5b 	bl	8005b1a <HAL_TIM_PWM_Init>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d001      	beq.n	800166e <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800166a:	f000 fce9 	bl	8002040 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800166e:	2300      	movs	r3, #0
 8001670:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001672:	2300      	movs	r3, #0
 8001674:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001676:	f107 031c 	add.w	r3, r7, #28
 800167a:	4619      	mov	r1, r3
 800167c:	4812      	ldr	r0, [pc, #72]	@ (80016c8 <MX_TIM2_Init+0xb4>)
 800167e:	f005 f98f 	bl	80069a0 <HAL_TIMEx_MasterConfigSynchronization>
 8001682:	4603      	mov	r3, r0
 8001684:	2b00      	cmp	r3, #0
 8001686:	d001      	beq.n	800168c <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001688:	f000 fcda 	bl	8002040 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800168c:	2360      	movs	r3, #96	@ 0x60
 800168e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001690:	2300      	movs	r3, #0
 8001692:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001694:	2300      	movs	r3, #0
 8001696:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001698:	2300      	movs	r3, #0
 800169a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800169c:	463b      	mov	r3, r7
 800169e:	2200      	movs	r2, #0
 80016a0:	4619      	mov	r1, r3
 80016a2:	4809      	ldr	r0, [pc, #36]	@ (80016c8 <MX_TIM2_Init+0xb4>)
 80016a4:	f004 fc9e 	bl	8005fe4 <HAL_TIM_PWM_ConfigChannel>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d001      	beq.n	80016b2 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 80016ae:	f000 fcc7 	bl	8002040 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80016b2:	2100      	movs	r1, #0
 80016b4:	4804      	ldr	r0, [pc, #16]	@ (80016c8 <MX_TIM2_Init+0xb4>)
 80016b6:	f004 fa87 	bl	8005bc8 <HAL_TIM_PWM_Start>
  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80016ba:	4803      	ldr	r0, [pc, #12]	@ (80016c8 <MX_TIM2_Init+0xb4>)
 80016bc:	f000 fe2e 	bl	800231c <HAL_TIM_MspPostInit>

}
 80016c0:	bf00      	nop
 80016c2:	3728      	adds	r7, #40	@ 0x28
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	20000330 	.word	0x20000330
 80016cc:	0001387f 	.word	0x0001387f

080016d0 <MX_TIM16_Init>:
>>>>>>> Stashed changes
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
<<<<<<< Updated upstream
 800143c:	b580      	push	{r7, lr}
 800143e:	af00      	add	r7, sp, #0
=======
 80016d0:	b580      	push	{r7, lr}
 80016d2:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
<<<<<<< Updated upstream
 8001440:	4b10      	ldr	r3, [pc, #64]	@ (8001484 <MX_TIM16_Init+0x48>)
 8001442:	4a11      	ldr	r2, [pc, #68]	@ (8001488 <MX_TIM16_Init+0x4c>)
 8001444:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 1000;
 8001446:	4b0f      	ldr	r3, [pc, #60]	@ (8001484 <MX_TIM16_Init+0x48>)
 8001448:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800144c:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800144e:	4b0d      	ldr	r3, [pc, #52]	@ (8001484 <MX_TIM16_Init+0x48>)
 8001450:	2200      	movs	r2, #0
 8001452:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 400;
 8001454:	4b0b      	ldr	r3, [pc, #44]	@ (8001484 <MX_TIM16_Init+0x48>)
 8001456:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800145a:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800145c:	4b09      	ldr	r3, [pc, #36]	@ (8001484 <MX_TIM16_Init+0x48>)
 800145e:	2200      	movs	r2, #0
 8001460:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001462:	4b08      	ldr	r3, [pc, #32]	@ (8001484 <MX_TIM16_Init+0x48>)
 8001464:	2200      	movs	r2, #0
 8001466:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001468:	4b06      	ldr	r3, [pc, #24]	@ (8001484 <MX_TIM16_Init+0x48>)
 800146a:	2200      	movs	r2, #0
 800146c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800146e:	4805      	ldr	r0, [pc, #20]	@ (8001484 <MX_TIM16_Init+0x48>)
 8001470:	f003 fdc8 	bl	8005004 <HAL_TIM_Base_Init>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 800147a:	f000 fe57 	bl	800212c <Error_Handler>
=======
 80016d4:	4b10      	ldr	r3, [pc, #64]	@ (8001718 <MX_TIM16_Init+0x48>)
 80016d6:	4a11      	ldr	r2, [pc, #68]	@ (800171c <MX_TIM16_Init+0x4c>)
 80016d8:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 1000;
 80016da:	4b0f      	ldr	r3, [pc, #60]	@ (8001718 <MX_TIM16_Init+0x48>)
 80016dc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80016e0:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016e2:	4b0d      	ldr	r3, [pc, #52]	@ (8001718 <MX_TIM16_Init+0x48>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 400;
 80016e8:	4b0b      	ldr	r3, [pc, #44]	@ (8001718 <MX_TIM16_Init+0x48>)
 80016ea:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80016ee:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016f0:	4b09      	ldr	r3, [pc, #36]	@ (8001718 <MX_TIM16_Init+0x48>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80016f6:	4b08      	ldr	r3, [pc, #32]	@ (8001718 <MX_TIM16_Init+0x48>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016fc:	4b06      	ldr	r3, [pc, #24]	@ (8001718 <MX_TIM16_Init+0x48>)
 80016fe:	2200      	movs	r2, #0
 8001700:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001702:	4805      	ldr	r0, [pc, #20]	@ (8001718 <MX_TIM16_Init+0x48>)
 8001704:	f004 f912 	bl	800592c <HAL_TIM_Base_Init>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d001      	beq.n	8001712 <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 800170e:	f000 fc97 	bl	8002040 <Error_Handler>
>>>>>>> Stashed changes
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
<<<<<<< Updated upstream
 800147e:	bf00      	nop
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	20000314 	.word	0x20000314
 8001488:	40014400 	.word	0x40014400

0800148c <MX_TIM17_Init>:
=======
 8001712:	bf00      	nop
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	2000037c 	.word	0x2000037c
 800171c:	40014400 	.word	0x40014400

08001720 <MX_TIM17_Init>:
>>>>>>> Stashed changes
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
<<<<<<< Updated upstream
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
=======
 8001720:	b580      	push	{r7, lr}
 8001722:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
<<<<<<< Updated upstream
 8001490:	4b10      	ldr	r3, [pc, #64]	@ (80014d4 <MX_TIM17_Init+0x48>)
 8001492:	4a11      	ldr	r2, [pc, #68]	@ (80014d8 <MX_TIM17_Init+0x4c>)
 8001494:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 1000;
 8001496:	4b0f      	ldr	r3, [pc, #60]	@ (80014d4 <MX_TIM17_Init+0x48>)
 8001498:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800149c:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 800149e:	4b0d      	ldr	r3, [pc, #52]	@ (80014d4 <MX_TIM17_Init+0x48>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 400;
 80014a4:	4b0b      	ldr	r3, [pc, #44]	@ (80014d4 <MX_TIM17_Init+0x48>)
 80014a6:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80014aa:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014ac:	4b09      	ldr	r3, [pc, #36]	@ (80014d4 <MX_TIM17_Init+0x48>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80014b2:	4b08      	ldr	r3, [pc, #32]	@ (80014d4 <MX_TIM17_Init+0x48>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014b8:	4b06      	ldr	r3, [pc, #24]	@ (80014d4 <MX_TIM17_Init+0x48>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80014be:	4805      	ldr	r0, [pc, #20]	@ (80014d4 <MX_TIM17_Init+0x48>)
 80014c0:	f003 fda0 	bl	8005004 <HAL_TIM_Base_Init>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d001      	beq.n	80014ce <MX_TIM17_Init+0x42>
  {
    Error_Handler();
 80014ca:	f000 fe2f 	bl	800212c <Error_Handler>
=======
 8001724:	4b10      	ldr	r3, [pc, #64]	@ (8001768 <MX_TIM17_Init+0x48>)
 8001726:	4a11      	ldr	r2, [pc, #68]	@ (800176c <MX_TIM17_Init+0x4c>)
 8001728:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 1000;
 800172a:	4b0f      	ldr	r3, [pc, #60]	@ (8001768 <MX_TIM17_Init+0x48>)
 800172c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001730:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001732:	4b0d      	ldr	r3, [pc, #52]	@ (8001768 <MX_TIM17_Init+0x48>)
 8001734:	2200      	movs	r2, #0
 8001736:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 400;
 8001738:	4b0b      	ldr	r3, [pc, #44]	@ (8001768 <MX_TIM17_Init+0x48>)
 800173a:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800173e:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001740:	4b09      	ldr	r3, [pc, #36]	@ (8001768 <MX_TIM17_Init+0x48>)
 8001742:	2200      	movs	r2, #0
 8001744:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8001746:	4b08      	ldr	r3, [pc, #32]	@ (8001768 <MX_TIM17_Init+0x48>)
 8001748:	2200      	movs	r2, #0
 800174a:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800174c:	4b06      	ldr	r3, [pc, #24]	@ (8001768 <MX_TIM17_Init+0x48>)
 800174e:	2200      	movs	r2, #0
 8001750:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8001752:	4805      	ldr	r0, [pc, #20]	@ (8001768 <MX_TIM17_Init+0x48>)
 8001754:	f004 f8ea 	bl	800592c <HAL_TIM_Base_Init>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d001      	beq.n	8001762 <MX_TIM17_Init+0x42>
  {
    Error_Handler();
 800175e:	f000 fc6f 	bl	8002040 <Error_Handler>
>>>>>>> Stashed changes
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
<<<<<<< Updated upstream
 80014ce:	bf00      	nop
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	20000360 	.word	0x20000360
 80014d8:	40014800 	.word	0x40014800

080014dc <MX_USART2_UART_Init>:
=======
 8001762:	bf00      	nop
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	200003c8 	.word	0x200003c8
 800176c:	40014800 	.word	0x40014800

08001770 <MX_USART2_UART_Init>:
>>>>>>> Stashed changes
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
<<<<<<< Updated upstream
 80014dc:	b580      	push	{r7, lr}
 80014de:	af00      	add	r7, sp, #0
=======
 8001770:	b580      	push	{r7, lr}
 8001772:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
<<<<<<< Updated upstream
 80014e0:	4b14      	ldr	r3, [pc, #80]	@ (8001534 <MX_USART2_UART_Init+0x58>)
 80014e2:	4a15      	ldr	r2, [pc, #84]	@ (8001538 <MX_USART2_UART_Init+0x5c>)
 80014e4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80014e6:	4b13      	ldr	r3, [pc, #76]	@ (8001534 <MX_USART2_UART_Init+0x58>)
 80014e8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80014ec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80014ee:	4b11      	ldr	r3, [pc, #68]	@ (8001534 <MX_USART2_UART_Init+0x58>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80014f4:	4b0f      	ldr	r3, [pc, #60]	@ (8001534 <MX_USART2_UART_Init+0x58>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80014fa:	4b0e      	ldr	r3, [pc, #56]	@ (8001534 <MX_USART2_UART_Init+0x58>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001500:	4b0c      	ldr	r3, [pc, #48]	@ (8001534 <MX_USART2_UART_Init+0x58>)
 8001502:	220c      	movs	r2, #12
 8001504:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001506:	4b0b      	ldr	r3, [pc, #44]	@ (8001534 <MX_USART2_UART_Init+0x58>)
 8001508:	2200      	movs	r2, #0
 800150a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800150c:	4b09      	ldr	r3, [pc, #36]	@ (8001534 <MX_USART2_UART_Init+0x58>)
 800150e:	2200      	movs	r2, #0
 8001510:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001512:	4b08      	ldr	r3, [pc, #32]	@ (8001534 <MX_USART2_UART_Init+0x58>)
 8001514:	2200      	movs	r2, #0
 8001516:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001518:	4b06      	ldr	r3, [pc, #24]	@ (8001534 <MX_USART2_UART_Init+0x58>)
 800151a:	2200      	movs	r2, #0
 800151c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800151e:	4805      	ldr	r0, [pc, #20]	@ (8001534 <MX_USART2_UART_Init+0x58>)
 8001520:	f005 f854 	bl	80065cc <HAL_UART_Init>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800152a:	f000 fdff 	bl	800212c <Error_Handler>
=======
 8001774:	4b14      	ldr	r3, [pc, #80]	@ (80017c8 <MX_USART2_UART_Init+0x58>)
 8001776:	4a15      	ldr	r2, [pc, #84]	@ (80017cc <MX_USART2_UART_Init+0x5c>)
 8001778:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800177a:	4b13      	ldr	r3, [pc, #76]	@ (80017c8 <MX_USART2_UART_Init+0x58>)
 800177c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001780:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001782:	4b11      	ldr	r3, [pc, #68]	@ (80017c8 <MX_USART2_UART_Init+0x58>)
 8001784:	2200      	movs	r2, #0
 8001786:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001788:	4b0f      	ldr	r3, [pc, #60]	@ (80017c8 <MX_USART2_UART_Init+0x58>)
 800178a:	2200      	movs	r2, #0
 800178c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800178e:	4b0e      	ldr	r3, [pc, #56]	@ (80017c8 <MX_USART2_UART_Init+0x58>)
 8001790:	2200      	movs	r2, #0
 8001792:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001794:	4b0c      	ldr	r3, [pc, #48]	@ (80017c8 <MX_USART2_UART_Init+0x58>)
 8001796:	220c      	movs	r2, #12
 8001798:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800179a:	4b0b      	ldr	r3, [pc, #44]	@ (80017c8 <MX_USART2_UART_Init+0x58>)
 800179c:	2200      	movs	r2, #0
 800179e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80017a0:	4b09      	ldr	r3, [pc, #36]	@ (80017c8 <MX_USART2_UART_Init+0x58>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017a6:	4b08      	ldr	r3, [pc, #32]	@ (80017c8 <MX_USART2_UART_Init+0x58>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017ac:	4b06      	ldr	r3, [pc, #24]	@ (80017c8 <MX_USART2_UART_Init+0x58>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80017b2:	4805      	ldr	r0, [pc, #20]	@ (80017c8 <MX_USART2_UART_Init+0x58>)
 80017b4:	f005 f99a 	bl	8006aec <HAL_UART_Init>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d001      	beq.n	80017c2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80017be:	f000 fc3f 	bl	8002040 <Error_Handler>
>>>>>>> Stashed changes
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
<<<<<<< Updated upstream
 800152e:	bf00      	nop
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	200003ac 	.word	0x200003ac
 8001538:	40004400 	.word	0x40004400

0800153c <MX_GPIO_Init>:
=======
 80017c2:	bf00      	nop
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	20000414 	.word	0x20000414
 80017cc:	40004400 	.word	0x40004400

080017d0 <MX_GPIO_Init>:
>>>>>>> Stashed changes
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
<<<<<<< Updated upstream
 800153c:	b580      	push	{r7, lr}
 800153e:	b08a      	sub	sp, #40	@ 0x28
 8001540:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001542:	f107 0314 	add.w	r3, r7, #20
 8001546:	2200      	movs	r2, #0
 8001548:	601a      	str	r2, [r3, #0]
 800154a:	605a      	str	r2, [r3, #4]
 800154c:	609a      	str	r2, [r3, #8]
 800154e:	60da      	str	r2, [r3, #12]
 8001550:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001552:	4b5b      	ldr	r3, [pc, #364]	@ (80016c0 <MX_GPIO_Init+0x184>)
 8001554:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001556:	4a5a      	ldr	r2, [pc, #360]	@ (80016c0 <MX_GPIO_Init+0x184>)
 8001558:	f043 0304 	orr.w	r3, r3, #4
 800155c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800155e:	4b58      	ldr	r3, [pc, #352]	@ (80016c0 <MX_GPIO_Init+0x184>)
 8001560:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001562:	f003 0304 	and.w	r3, r3, #4
 8001566:	613b      	str	r3, [r7, #16]
 8001568:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800156a:	4b55      	ldr	r3, [pc, #340]	@ (80016c0 <MX_GPIO_Init+0x184>)
 800156c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800156e:	4a54      	ldr	r2, [pc, #336]	@ (80016c0 <MX_GPIO_Init+0x184>)
 8001570:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001574:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001576:	4b52      	ldr	r3, [pc, #328]	@ (80016c0 <MX_GPIO_Init+0x184>)
 8001578:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800157a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800157e:	60fb      	str	r3, [r7, #12]
 8001580:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001582:	4b4f      	ldr	r3, [pc, #316]	@ (80016c0 <MX_GPIO_Init+0x184>)
 8001584:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001586:	4a4e      	ldr	r2, [pc, #312]	@ (80016c0 <MX_GPIO_Init+0x184>)
 8001588:	f043 0301 	orr.w	r3, r3, #1
 800158c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800158e:	4b4c      	ldr	r3, [pc, #304]	@ (80016c0 <MX_GPIO_Init+0x184>)
 8001590:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001592:	f003 0301 	and.w	r3, r3, #1
 8001596:	60bb      	str	r3, [r7, #8]
 8001598:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800159a:	4b49      	ldr	r3, [pc, #292]	@ (80016c0 <MX_GPIO_Init+0x184>)
 800159c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800159e:	4a48      	ldr	r2, [pc, #288]	@ (80016c0 <MX_GPIO_Init+0x184>)
 80015a0:	f043 0302 	orr.w	r3, r3, #2
 80015a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015a6:	4b46      	ldr	r3, [pc, #280]	@ (80016c0 <MX_GPIO_Init+0x184>)
 80015a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015aa:	f003 0302 	and.w	r3, r3, #2
 80015ae:	607b      	str	r3, [r7, #4]
 80015b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, YPUL_Pin|XDIR_Pin|XEN_Pin, GPIO_PIN_RESET);
 80015b2:	2200      	movs	r2, #0
 80015b4:	f44f 6186 	mov.w	r1, #1072	@ 0x430
 80015b8:	4842      	ldr	r0, [pc, #264]	@ (80016c4 <MX_GPIO_Init+0x188>)
 80015ba:	f001 fbeb 	bl	8002d94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, YEN_Pin|YDIR_Pin|XPUL_Pin, GPIO_PIN_RESET);
 80015be:	2200      	movs	r2, #0
 80015c0:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 80015c4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015c8:	f001 fbe4 	bl	8002d94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 80015cc:	2201      	movs	r2, #1
 80015ce:	2140      	movs	r1, #64	@ 0x40
 80015d0:	483c      	ldr	r0, [pc, #240]	@ (80016c4 <MX_GPIO_Init+0x188>)
 80015d2:	f001 fbdf 	bl	8002d94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80015d6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80015da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80015dc:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80015e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e2:	2300      	movs	r3, #0
 80015e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80015e6:	f107 0314 	add.w	r3, r7, #20
 80015ea:	4619      	mov	r1, r3
 80015ec:	4836      	ldr	r0, [pc, #216]	@ (80016c8 <MX_GPIO_Init+0x18c>)
 80015ee:	f001 fa0f 	bl	8002a10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80015f2:	2301      	movs	r3, #1
 80015f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015f6:	2300      	movs	r3, #0
 80015f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fa:	2300      	movs	r3, #0
 80015fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015fe:	f107 0314 	add.w	r3, r7, #20
 8001602:	4619      	mov	r1, r3
 8001604:	4830      	ldr	r0, [pc, #192]	@ (80016c8 <MX_GPIO_Init+0x18c>)
 8001606:	f001 fa03 	bl	8002a10 <HAL_GPIO_Init>

  /*Configure GPIO pin : shutdownButton_Pin */
  GPIO_InitStruct.Pin = shutdownButton_Pin;
 800160a:	2302      	movs	r3, #2
 800160c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800160e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001612:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001614:	2302      	movs	r3, #2
 8001616:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(shutdownButton_GPIO_Port, &GPIO_InitStruct);
 8001618:	f107 0314 	add.w	r3, r7, #20
 800161c:	4619      	mov	r1, r3
 800161e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001622:	f001 f9f5 	bl	8002a10 <HAL_GPIO_Init>

  /*Configure GPIO pins : YPUL_Pin XDIR_Pin XEN_Pin */
  GPIO_InitStruct.Pin = YPUL_Pin|XDIR_Pin|XEN_Pin;
 8001626:	f44f 6386 	mov.w	r3, #1072	@ 0x430
 800162a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800162c:	2301      	movs	r3, #1
 800162e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001630:	2300      	movs	r3, #0
 8001632:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001634:	2300      	movs	r3, #0
 8001636:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001638:	f107 0314 	add.w	r3, r7, #20
 800163c:	4619      	mov	r1, r3
 800163e:	4821      	ldr	r0, [pc, #132]	@ (80016c4 <MX_GPIO_Init+0x188>)
 8001640:	f001 f9e6 	bl	8002a10 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CD_Pin */
  GPIO_InitStruct.Pin = SPI1_CD_Pin;
 8001644:	2380      	movs	r3, #128	@ 0x80
 8001646:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001648:	2300      	movs	r3, #0
 800164a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800164c:	2301      	movs	r3, #1
 800164e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SPI1_CD_GPIO_Port, &GPIO_InitStruct);
 8001650:	f107 0314 	add.w	r3, r7, #20
 8001654:	4619      	mov	r1, r3
 8001656:	481c      	ldr	r0, [pc, #112]	@ (80016c8 <MX_GPIO_Init+0x18c>)
 8001658:	f001 f9da 	bl	8002a10 <HAL_GPIO_Init>

  /*Configure GPIO pins : YEN_Pin YDIR_Pin XPUL_Pin */
  GPIO_InitStruct.Pin = YEN_Pin|YDIR_Pin|XPUL_Pin;
 800165c:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8001660:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001662:	2301      	movs	r3, #1
 8001664:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001666:	2300      	movs	r3, #0
 8001668:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800166a:	2300      	movs	r3, #0
 800166c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800166e:	f107 0314 	add.w	r3, r7, #20
 8001672:	4619      	mov	r1, r3
 8001674:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001678:	f001 f9ca 	bl	8002a10 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 800167c:	2340      	movs	r3, #64	@ 0x40
 800167e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001680:	2301      	movs	r3, #1
 8001682:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001684:	2301      	movs	r3, #1
 8001686:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001688:	2300      	movs	r3, #0
 800168a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 800168c:	f107 0314 	add.w	r3, r7, #20
 8001690:	4619      	mov	r1, r3
 8001692:	480c      	ldr	r0, [pc, #48]	@ (80016c4 <MX_GPIO_Init+0x188>)
 8001694:	f001 f9bc 	bl	8002a10 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8001698:	2200      	movs	r2, #0
 800169a:	2105      	movs	r1, #5
 800169c:	2007      	movs	r0, #7
 800169e:	f001 f98d 	bl	80029bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80016a2:	2007      	movs	r0, #7
 80016a4:	f001 f9a6 	bl	80029f4 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80016a8:	2200      	movs	r2, #0
 80016aa:	2105      	movs	r1, #5
 80016ac:	2028      	movs	r0, #40	@ 0x28
 80016ae:	f001 f985 	bl	80029bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80016b2:	2028      	movs	r0, #40	@ 0x28
 80016b4:	f001 f99e 	bl	80029f4 <HAL_NVIC_EnableIRQ>
=======
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b08a      	sub	sp, #40	@ 0x28
 80017d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017d6:	f107 0314 	add.w	r3, r7, #20
 80017da:	2200      	movs	r2, #0
 80017dc:	601a      	str	r2, [r3, #0]
 80017de:	605a      	str	r2, [r3, #4]
 80017e0:	609a      	str	r2, [r3, #8]
 80017e2:	60da      	str	r2, [r3, #12]
 80017e4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017e6:	4b50      	ldr	r3, [pc, #320]	@ (8001928 <MX_GPIO_Init+0x158>)
 80017e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017ea:	4a4f      	ldr	r2, [pc, #316]	@ (8001928 <MX_GPIO_Init+0x158>)
 80017ec:	f043 0304 	orr.w	r3, r3, #4
 80017f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017f2:	4b4d      	ldr	r3, [pc, #308]	@ (8001928 <MX_GPIO_Init+0x158>)
 80017f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017f6:	f003 0304 	and.w	r3, r3, #4
 80017fa:	613b      	str	r3, [r7, #16]
 80017fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017fe:	4b4a      	ldr	r3, [pc, #296]	@ (8001928 <MX_GPIO_Init+0x158>)
 8001800:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001802:	4a49      	ldr	r2, [pc, #292]	@ (8001928 <MX_GPIO_Init+0x158>)
 8001804:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001808:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800180a:	4b47      	ldr	r3, [pc, #284]	@ (8001928 <MX_GPIO_Init+0x158>)
 800180c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800180e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001812:	60fb      	str	r3, [r7, #12]
 8001814:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001816:	4b44      	ldr	r3, [pc, #272]	@ (8001928 <MX_GPIO_Init+0x158>)
 8001818:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800181a:	4a43      	ldr	r2, [pc, #268]	@ (8001928 <MX_GPIO_Init+0x158>)
 800181c:	f043 0301 	orr.w	r3, r3, #1
 8001820:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001822:	4b41      	ldr	r3, [pc, #260]	@ (8001928 <MX_GPIO_Init+0x158>)
 8001824:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001826:	f003 0301 	and.w	r3, r3, #1
 800182a:	60bb      	str	r3, [r7, #8]
 800182c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800182e:	4b3e      	ldr	r3, [pc, #248]	@ (8001928 <MX_GPIO_Init+0x158>)
 8001830:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001832:	4a3d      	ldr	r2, [pc, #244]	@ (8001928 <MX_GPIO_Init+0x158>)
 8001834:	f043 0302 	orr.w	r3, r3, #2
 8001838:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800183a:	4b3b      	ldr	r3, [pc, #236]	@ (8001928 <MX_GPIO_Init+0x158>)
 800183c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800183e:	f003 0302 	and.w	r3, r3, #2
 8001842:	607b      	str	r3, [r7, #4]
 8001844:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, shutdownButton_Pin|YEN_Pin|YDIR_Pin|XPUL_Pin, GPIO_PIN_RESET);
 8001846:	2200      	movs	r2, #0
 8001848:	f240 7102 	movw	r1, #1794	@ 0x702
 800184c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001850:	f001 face 	bl	8002df0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, YPUL_Pin|XDIR_Pin|XEN_Pin, GPIO_PIN_RESET);
 8001854:	2200      	movs	r2, #0
 8001856:	f44f 6186 	mov.w	r1, #1072	@ 0x430
 800185a:	4834      	ldr	r0, [pc, #208]	@ (800192c <MX_GPIO_Init+0x15c>)
 800185c:	f001 fac8 	bl	8002df0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8001860:	2201      	movs	r2, #1
 8001862:	2140      	movs	r1, #64	@ 0x40
 8001864:	4831      	ldr	r0, [pc, #196]	@ (800192c <MX_GPIO_Init+0x15c>)
 8001866:	f001 fac3 	bl	8002df0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800186a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800186e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001870:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001874:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001876:	2300      	movs	r3, #0
 8001878:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800187a:	f107 0314 	add.w	r3, r7, #20
 800187e:	4619      	mov	r1, r3
 8001880:	482b      	ldr	r0, [pc, #172]	@ (8001930 <MX_GPIO_Init+0x160>)
 8001882:	f001 f8f3 	bl	8002a6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001886:	2301      	movs	r3, #1
 8001888:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800188a:	2300      	movs	r3, #0
 800188c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188e:	2300      	movs	r3, #0
 8001890:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001892:	f107 0314 	add.w	r3, r7, #20
 8001896:	4619      	mov	r1, r3
 8001898:	4825      	ldr	r0, [pc, #148]	@ (8001930 <MX_GPIO_Init+0x160>)
 800189a:	f001 f8e7 	bl	8002a6c <HAL_GPIO_Init>

  /*Configure GPIO pins : shutdownButton_Pin YEN_Pin YDIR_Pin XPUL_Pin */
  GPIO_InitStruct.Pin = shutdownButton_Pin|YEN_Pin|YDIR_Pin|XPUL_Pin;
 800189e:	f240 7302 	movw	r3, #1794	@ 0x702
 80018a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018a4:	2301      	movs	r3, #1
 80018a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a8:	2300      	movs	r3, #0
 80018aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ac:	2300      	movs	r3, #0
 80018ae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018b0:	f107 0314 	add.w	r3, r7, #20
 80018b4:	4619      	mov	r1, r3
 80018b6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80018ba:	f001 f8d7 	bl	8002a6c <HAL_GPIO_Init>

  /*Configure GPIO pins : YPUL_Pin XDIR_Pin XEN_Pin */
  GPIO_InitStruct.Pin = YPUL_Pin|XDIR_Pin|XEN_Pin;
 80018be:	f44f 6386 	mov.w	r3, #1072	@ 0x430
 80018c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018c4:	2301      	movs	r3, #1
 80018c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c8:	2300      	movs	r3, #0
 80018ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018cc:	2300      	movs	r3, #0
 80018ce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018d0:	f107 0314 	add.w	r3, r7, #20
 80018d4:	4619      	mov	r1, r3
 80018d6:	4815      	ldr	r0, [pc, #84]	@ (800192c <MX_GPIO_Init+0x15c>)
 80018d8:	f001 f8c8 	bl	8002a6c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CD_Pin */
  GPIO_InitStruct.Pin = SPI1_CD_Pin;
 80018dc:	2380      	movs	r3, #128	@ 0x80
 80018de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018e0:	2300      	movs	r3, #0
 80018e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018e4:	2301      	movs	r3, #1
 80018e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SPI1_CD_GPIO_Port, &GPIO_InitStruct);
 80018e8:	f107 0314 	add.w	r3, r7, #20
 80018ec:	4619      	mov	r1, r3
 80018ee:	4810      	ldr	r0, [pc, #64]	@ (8001930 <MX_GPIO_Init+0x160>)
 80018f0:	f001 f8bc 	bl	8002a6c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 80018f4:	2340      	movs	r3, #64	@ 0x40
 80018f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018f8:	2301      	movs	r3, #1
 80018fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018fc:	2301      	movs	r3, #1
 80018fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001900:	2300      	movs	r3, #0
 8001902:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8001904:	f107 0314 	add.w	r3, r7, #20
 8001908:	4619      	mov	r1, r3
 800190a:	4808      	ldr	r0, [pc, #32]	@ (800192c <MX_GPIO_Init+0x15c>)
 800190c:	f001 f8ae 	bl	8002a6c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001910:	2200      	movs	r2, #0
 8001912:	2100      	movs	r1, #0
 8001914:	2028      	movs	r0, #40	@ 0x28
 8001916:	f001 f87f 	bl	8002a18 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800191a:	2028      	movs	r0, #40	@ 0x28
 800191c:	f001 f898 	bl	8002a50 <HAL_NVIC_EnableIRQ>
>>>>>>> Stashed changes

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
<<<<<<< Updated upstream
 80016b8:	bf00      	nop
 80016ba:	3728      	adds	r7, #40	@ 0x28
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	40021000 	.word	0x40021000
 80016c4:	48000400 	.word	0x48000400
 80016c8:	48000800 	.word	0x48000800

080016cc <InitiateMotors>:
=======
 8001920:	bf00      	nop
 8001922:	3728      	adds	r7, #40	@ 0x28
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}
 8001928:	40021000 	.word	0x40021000
 800192c:	48000400 	.word	0x48000400
 8001930:	48000800 	.word	0x48000800

08001934 <HAL_GPIO_EXTI_Callback>:
>>>>>>> Stashed changes

/* USER CODE BEGIN 4 */

// function call to find 0 0 and align the motors to the correct starting position
void InitiateMotors()
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	af00      	add	r7, sp, #0

	// setup variable which ensures the enable pins don't shut the system down during setup
	setup = 2;
 80016d0:	4b52      	ldr	r3, [pc, #328]	@ (800181c <InitiateMotors+0x150>)
 80016d2:	2202      	movs	r2, #2
 80016d4:	601a      	str	r2, [r3, #0]

	// writes a 0 to the enable pins to disable the motors
	HAL_GPIO_WritePin(XEN_GPIO_Port, XEN_Pin, 0);
 80016d6:	2200      	movs	r2, #0
 80016d8:	2120      	movs	r1, #32
 80016da:	4851      	ldr	r0, [pc, #324]	@ (8001820 <InitiateMotors+0x154>)
 80016dc:	f001 fb5a 	bl	8002d94 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YEN_GPIO_Port, YEN_Pin, 0);
 80016e0:	2200      	movs	r2, #0
 80016e2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80016e6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016ea:	f001 fb53 	bl	8002d94 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(YDIR_GPIO_Port, YDIR_Pin, 1);
 80016ee:	2201      	movs	r2, #1
 80016f0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80016f4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016f8:	f001 fb4c 	bl	8002d94 <HAL_GPIO_WritePin>

	// Sets the Y end point, motor prescaler value and starts the motor
	Yend = 99999999;
 80016fc:	4b49      	ldr	r3, [pc, #292]	@ (8001824 <InitiateMotors+0x158>)
 80016fe:	4a4a      	ldr	r2, [pc, #296]	@ (8001828 <InitiateMotors+0x15c>)
 8001700:	601a      	str	r2, [r3, #0]
	__HAL_TIM_SET_PRESCALER(&htim17, 200);
 8001702:	4b4a      	ldr	r3, [pc, #296]	@ (800182c <InitiateMotors+0x160>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	22c8      	movs	r2, #200	@ 0xc8
 8001708:	629a      	str	r2, [r3, #40]	@ 0x28
	HAL_TIM_Base_Start_IT(&htim17);
 800170a:	4848      	ldr	r0, [pc, #288]	@ (800182c <InitiateMotors+0x160>)
 800170c:	f003 fcd2 	bl	80050b4 <HAL_TIM_Base_Start_IT>

	// Waits for the out of bounds button to be hit
	osSemaphoreAcquire(setupHandle, osWaitForever);
 8001710:	4b47      	ldr	r3, [pc, #284]	@ (8001830 <InitiateMotors+0x164>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f04f 31ff 	mov.w	r1, #4294967295
 8001718:	4618      	mov	r0, r3
 800171a:	f008 fec3 	bl	800a4a4 <osSemaphoreAcquire>
	HAL_Delay(500);
 800171e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001722:	f001 f86f 	bl	8002804 <HAL_Delay>
	setup--;
 8001726:	4b3d      	ldr	r3, [pc, #244]	@ (800181c <InitiateMotors+0x150>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	3b01      	subs	r3, #1
 800172c:	4a3b      	ldr	r2, [pc, #236]	@ (800181c <InitiateMotors+0x150>)
 800172e:	6013      	str	r3, [r2, #0]
	Xcurrent = 0;
 8001730:	4b40      	ldr	r3, [pc, #256]	@ (8001834 <InitiateMotors+0x168>)
 8001732:	2200      	movs	r2, #0
 8001734:	601a      	str	r2, [r3, #0]
	Xend = 0;
 8001736:	4b40      	ldr	r3, [pc, #256]	@ (8001838 <InitiateMotors+0x16c>)
 8001738:	2200      	movs	r2, #0
 800173a:	601a      	str	r2, [r3, #0]
	Ycurrent = 0;
 800173c:	4b3f      	ldr	r3, [pc, #252]	@ (800183c <InitiateMotors+0x170>)
 800173e:	2200      	movs	r2, #0
 8001740:	601a      	str	r2, [r3, #0]
	Yend = -3200;
 8001742:	4b38      	ldr	r3, [pc, #224]	@ (8001824 <InitiateMotors+0x158>)
 8001744:	4a3e      	ldr	r2, [pc, #248]	@ (8001840 <InitiateMotors+0x174>)
 8001746:	601a      	str	r2, [r3, #0]

	HAL_GPIO_WritePin(YDIR_GPIO_Port, YDIR_Pin, 0);
 8001748:	2200      	movs	r2, #0
 800174a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800174e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001752:	f001 fb1f 	bl	8002d94 <HAL_GPIO_WritePin>
	YDIR = 0;
 8001756:	4b3b      	ldr	r3, [pc, #236]	@ (8001844 <InitiateMotors+0x178>)
 8001758:	2200      	movs	r2, #0
 800175a:	601a      	str	r2, [r3, #0]
	__HAL_TIM_SET_PRESCALER(&htim17, 50);
 800175c:	4b33      	ldr	r3, [pc, #204]	@ (800182c <InitiateMotors+0x160>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	2232      	movs	r2, #50	@ 0x32
 8001762:	629a      	str	r2, [r3, #40]	@ 0x28
	HAL_TIM_Base_Start_IT(&htim17);
 8001764:	4831      	ldr	r0, [pc, #196]	@ (800182c <InitiateMotors+0x160>)
 8001766:	f003 fca5 	bl	80050b4 <HAL_TIM_Base_Start_IT>

	osSemaphoreAcquire(runningHandle, osWaitForever);
 800176a:	4b37      	ldr	r3, [pc, #220]	@ (8001848 <InitiateMotors+0x17c>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f04f 31ff 	mov.w	r1, #4294967295
 8001772:	4618      	mov	r0, r3
 8001774:	f008 fe96 	bl	800a4a4 <osSemaphoreAcquire>

	HAL_Delay(500);
 8001778:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800177c:	f001 f842 	bl	8002804 <HAL_Delay>

	HAL_GPIO_WritePin(XDIR_GPIO_Port, XDIR_Pin, 1);
 8001780:	2201      	movs	r2, #1
 8001782:	2110      	movs	r1, #16
 8001784:	4826      	ldr	r0, [pc, #152]	@ (8001820 <InitiateMotors+0x154>)
 8001786:	f001 fb05 	bl	8002d94 <HAL_GPIO_WritePin>

	// Sets the X end point, motor prescaler value and starts the motor
	Xend = 99999999;
 800178a:	4b2b      	ldr	r3, [pc, #172]	@ (8001838 <InitiateMotors+0x16c>)
 800178c:	4a26      	ldr	r2, [pc, #152]	@ (8001828 <InitiateMotors+0x15c>)
 800178e:	601a      	str	r2, [r3, #0]
	__HAL_TIM_SET_PRESCALER(&htim16, 200);
 8001790:	4b2e      	ldr	r3, [pc, #184]	@ (800184c <InitiateMotors+0x180>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	22c8      	movs	r2, #200	@ 0xc8
 8001796:	629a      	str	r2, [r3, #40]	@ 0x28
	HAL_TIM_Base_Start_IT(&htim16);
 8001798:	482c      	ldr	r0, [pc, #176]	@ (800184c <InitiateMotors+0x180>)
 800179a:	f003 fc8b 	bl	80050b4 <HAL_TIM_Base_Start_IT>

	// Waits for the out of bounds button to be hit
	osSemaphoreAcquire(setupHandle, osWaitForever);
 800179e:	4b24      	ldr	r3, [pc, #144]	@ (8001830 <InitiateMotors+0x164>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f04f 31ff 	mov.w	r1, #4294967295
 80017a6:	4618      	mov	r0, r3
 80017a8:	f008 fe7c 	bl	800a4a4 <osSemaphoreAcquire>
	HAL_Delay(500);
 80017ac:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80017b0:	f001 f828 	bl	8002804 <HAL_Delay>
	setup--;
 80017b4:	4b19      	ldr	r3, [pc, #100]	@ (800181c <InitiateMotors+0x150>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	3b01      	subs	r3, #1
 80017ba:	4a18      	ldr	r2, [pc, #96]	@ (800181c <InitiateMotors+0x150>)
 80017bc:	6013      	str	r3, [r2, #0]
	Xcurrent = 0;
 80017be:	4b1d      	ldr	r3, [pc, #116]	@ (8001834 <InitiateMotors+0x168>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	601a      	str	r2, [r3, #0]
	Xend = -3200;
 80017c4:	4b1c      	ldr	r3, [pc, #112]	@ (8001838 <InitiateMotors+0x16c>)
 80017c6:	4a1e      	ldr	r2, [pc, #120]	@ (8001840 <InitiateMotors+0x174>)
 80017c8:	601a      	str	r2, [r3, #0]
	Ycurrent = 0;
 80017ca:	4b1c      	ldr	r3, [pc, #112]	@ (800183c <InitiateMotors+0x170>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	601a      	str	r2, [r3, #0]
	Yend = 0;
 80017d0:	4b14      	ldr	r3, [pc, #80]	@ (8001824 <InitiateMotors+0x158>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	601a      	str	r2, [r3, #0]

	HAL_GPIO_WritePin(XDIR_GPIO_Port, XDIR_Pin, 0);
 80017d6:	2200      	movs	r2, #0
 80017d8:	2110      	movs	r1, #16
 80017da:	4811      	ldr	r0, [pc, #68]	@ (8001820 <InitiateMotors+0x154>)
 80017dc:	f001 fada 	bl	8002d94 <HAL_GPIO_WritePin>
	XDIR = 0;
 80017e0:	4b1b      	ldr	r3, [pc, #108]	@ (8001850 <InitiateMotors+0x184>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	601a      	str	r2, [r3, #0]
	__HAL_TIM_SET_PRESCALER(&htim16, 50);
 80017e6:	4b19      	ldr	r3, [pc, #100]	@ (800184c <InitiateMotors+0x180>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	2232      	movs	r2, #50	@ 0x32
 80017ec:	629a      	str	r2, [r3, #40]	@ 0x28
	HAL_TIM_Base_Start_IT(&htim16);
 80017ee:	4817      	ldr	r0, [pc, #92]	@ (800184c <InitiateMotors+0x180>)
 80017f0:	f003 fc60 	bl	80050b4 <HAL_TIM_Base_Start_IT>

	osSemaphoreAcquire(runningHandle, osWaitForever);
 80017f4:	4b14      	ldr	r3, [pc, #80]	@ (8001848 <InitiateMotors+0x17c>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f04f 31ff 	mov.w	r1, #4294967295
 80017fc:	4618      	mov	r0, r3
 80017fe:	f008 fe51 	bl	800a4a4 <osSemaphoreAcquire>

	HAL_Delay(500);
 8001802:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001806:	f000 fffd 	bl	8002804 <HAL_Delay>

	Xcurrent = 0;
 800180a:	4b0a      	ldr	r3, [pc, #40]	@ (8001834 <InitiateMotors+0x168>)
 800180c:	2200      	movs	r2, #0
 800180e:	601a      	str	r2, [r3, #0]
	Ycurrent = 0;
 8001810:	4b0a      	ldr	r3, [pc, #40]	@ (800183c <InitiateMotors+0x170>)
 8001812:	2200      	movs	r2, #0
 8001814:	601a      	str	r2, [r3, #0]

}
 8001816:	bf00      	nop
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	20000008 	.word	0x20000008
 8001820:	48000400 	.word	0x48000400
 8001824:	20000454 	.word	0x20000454
 8001828:	05f5e0ff 	.word	0x05f5e0ff
 800182c:	20000360 	.word	0x20000360
 8001830:	20000444 	.word	0x20000444
 8001834:	20000448 	.word	0x20000448
 8001838:	20000450 	.word	0x20000450
 800183c:	2000044c 	.word	0x2000044c
 8001840:	fffff380 	.word	0xfffff380
 8001844:	20000004 	.word	0x20000004
 8001848:	20000440 	.word	0x20000440
 800184c:	20000314 	.word	0x20000314
 8001850:	20000000 	.word	0x20000000

08001854 <HAL_GPIO_EXTI_Callback>:

// Interrupt Handler
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
<<<<<<< Updated upstream
 8001854:	b580      	push	{r7, lr}
 8001856:	b082      	sub	sp, #8
 8001858:	af00      	add	r7, sp, #0
 800185a:	4603      	mov	r3, r0
 800185c:	80fb      	strh	r3, [r7, #6]
=======
 8001934:	b580      	push	{r7, lr}
 8001936:	b082      	sub	sp, #8
 8001938:	af00      	add	r7, sp, #0
 800193a:	4603      	mov	r3, r0
 800193c:	80fb      	strh	r3, [r7, #6]
>>>>>>> Stashed changes

	// code for the shutdown buttons which trigger if the motors run out of bounds
	if (GPIO_Pin == shutdownButton_Pin)
<<<<<<< Updated upstream
 800185e:	88fb      	ldrh	r3, [r7, #6]
 8001860:	2b02      	cmp	r3, #2
 8001862:	d122      	bne.n	80018aa <HAL_GPIO_EXTI_Callback+0x56>
	{
=======
 800193e:	88fb      	ldrh	r3, [r7, #6]
 8001940:	2b02      	cmp	r3, #2
 8001942:	d113      	bne.n	800196c <HAL_GPIO_EXTI_Callback+0x38>
	{
		HAL_GPIO_WritePin(XEN_GPIO_Port, XEN_Pin, 1);
 8001944:	2201      	movs	r2, #1
 8001946:	2120      	movs	r1, #32
 8001948:	480a      	ldr	r0, [pc, #40]	@ (8001974 <HAL_GPIO_EXTI_Callback+0x40>)
 800194a:	f001 fa51 	bl	8002df0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YEN_GPIO_Port, YEN_Pin, 1);
 800194e:	2201      	movs	r2, #1
 8001950:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001954:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001958:	f001 fa4a 	bl	8002df0 <HAL_GPIO_WritePin>
>>>>>>> Stashed changes

		// Turns off the motor timers so they don't send a signal anymore
		HAL_TIM_Base_Stop_IT(&htim16);
<<<<<<< Updated upstream
 8001864:	4813      	ldr	r0, [pc, #76]	@ (80018b4 <HAL_GPIO_EXTI_Callback+0x60>)
 8001866:	f003 fc95 	bl	8005194 <HAL_TIM_Base_Stop_IT>
		HAL_TIM_Base_Stop_IT(&htim17);
 800186a:	4813      	ldr	r0, [pc, #76]	@ (80018b8 <HAL_GPIO_EXTI_Callback+0x64>)
 800186c:	f003 fc92 	bl	8005194 <HAL_TIM_Base_Stop_IT>

		// Turns of the laser's PWM
		HAL_TIM_PWM_Stop(&htim7, TIM_CHANNEL_1);
 8001870:	2100      	movs	r1, #0
 8001872:	4812      	ldr	r0, [pc, #72]	@ (80018bc <HAL_GPIO_EXTI_Callback+0x68>)
 8001874:	f003 fe24 	bl	80054c0 <HAL_TIM_PWM_Stop>
		HAL_TIM_Base_Stop_IT(&htim7);
 8001878:	4810      	ldr	r0, [pc, #64]	@ (80018bc <HAL_GPIO_EXTI_Callback+0x68>)
 800187a:	f003 fc8b 	bl	8005194 <HAL_TIM_Base_Stop_IT>
=======
 800195c:	4806      	ldr	r0, [pc, #24]	@ (8001978 <HAL_GPIO_EXTI_Callback+0x44>)
 800195e:	f004 f8ad 	bl	8005abc <HAL_TIM_Base_Stop_IT>
		HAL_TIM_Base_Stop_IT(&htim17);
 8001962:	4806      	ldr	r0, [pc, #24]	@ (800197c <HAL_GPIO_EXTI_Callback+0x48>)
 8001964:	f004 f8aa 	bl	8005abc <HAL_TIM_Base_Stop_IT>

		while(1){}
 8001968:	bf00      	nop
 800196a:	e7fd      	b.n	8001968 <HAL_GPIO_EXTI_Callback+0x34>
>>>>>>> Stashed changes

		// Puts the code in a while loop so the program has to be reset if it enters this state
		while(setup == 0){
 800187e:	e00b      	b.n	8001898 <HAL_GPIO_EXTI_Callback+0x44>
			// writes a 1 to the enable pins to disable the motors
			HAL_GPIO_WritePin(XEN_GPIO_Port, XEN_Pin, 1);
 8001880:	2201      	movs	r2, #1
 8001882:	2120      	movs	r1, #32
 8001884:	480e      	ldr	r0, [pc, #56]	@ (80018c0 <HAL_GPIO_EXTI_Callback+0x6c>)
 8001886:	f001 fa85 	bl	8002d94 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YEN_GPIO_Port, YEN_Pin, 1);
 800188a:	2201      	movs	r2, #1
 800188c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001890:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001894:	f001 fa7e 	bl	8002d94 <HAL_GPIO_WritePin>
		while(setup == 0){
 8001898:	4b0a      	ldr	r3, [pc, #40]	@ (80018c4 <HAL_GPIO_EXTI_Callback+0x70>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d0ef      	beq.n	8001880 <HAL_GPIO_EXTI_Callback+0x2c>
		}
		osSemaphoreRelease(setupHandle);
 80018a0:	4b09      	ldr	r3, [pc, #36]	@ (80018c8 <HAL_GPIO_EXTI_Callback+0x74>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4618      	mov	r0, r3
 80018a6:	f008 fe4f 	bl	800a548 <osSemaphoreRelease>
	}
}
<<<<<<< Updated upstream
 80018aa:	bf00      	nop
 80018ac:	3708      	adds	r7, #8
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	20000314 	.word	0x20000314
 80018b8:	20000360 	.word	0x20000360
 80018bc:	200002c8 	.word	0x200002c8
 80018c0:	48000400 	.word	0x48000400
 80018c4:	20000008 	.word	0x20000008
 80018c8:	20000444 	.word	0x20000444

080018cc <GCommandParse>:
=======
 800196c:	bf00      	nop
 800196e:	3708      	adds	r7, #8
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}
 8001974:	48000400 	.word	0x48000400
 8001978:	2000037c 	.word	0x2000037c
 800197c:	200003c8 	.word	0x200003c8

08001980 <GcommandParse>:
>>>>>>> Stashed changes

Executable GCommandParse(TCHAR* line1)
{
<<<<<<< Updated upstream
 80018cc:	b5b0      	push	{r4, r5, r7, lr}
 80018ce:	b0a2      	sub	sp, #136	@ 0x88
 80018d0:	af04      	add	r7, sp, #16
 80018d2:	6078      	str	r0, [r7, #4]
 80018d4:	6039      	str	r1, [r7, #0]

	  // Creates local variables for the different possible commands in Gcode (max 10 characters)
	  char Gcommand[10] = "";
 80018d6:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80018da:	2200      	movs	r2, #0
 80018dc:	601a      	str	r2, [r3, #0]
 80018de:	605a      	str	r2, [r3, #4]
 80018e0:	811a      	strh	r2, [r3, #8]
	  char Xcoordinate[10] = "";
 80018e2:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80018e6:	2200      	movs	r2, #0
 80018e8:	601a      	str	r2, [r3, #0]
 80018ea:	605a      	str	r2, [r3, #4]
 80018ec:	811a      	strh	r2, [r3, #8]
	  char Ycoordinate[10] = "";
 80018ee:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80018f2:	2200      	movs	r2, #0
 80018f4:	601a      	str	r2, [r3, #0]
 80018f6:	605a      	str	r2, [r3, #4]
 80018f8:	811a      	strh	r2, [r3, #8]
	  char Zcoordinate[10] = "";
 80018fa:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80018fe:	2200      	movs	r2, #0
 8001900:	601a      	str	r2, [r3, #0]
 8001902:	605a      	str	r2, [r3, #4]
 8001904:	811a      	strh	r2, [r3, #8]
	  char feedRate[10] = "";
 8001906:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800190a:	2200      	movs	r2, #0
 800190c:	601a      	str	r2, [r3, #0]
 800190e:	605a      	str	r2, [r3, #4]
 8001910:	811a      	strh	r2, [r3, #8]
	  char laserSpeed[10] = "";
 8001912:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001916:	2200      	movs	r2, #0
 8001918:	601a      	str	r2, [r3, #0]
 800191a:	605a      	str	r2, [r3, #4]
 800191c:	811a      	strh	r2, [r3, #8]

	  // New struct to save the values of the executables which are calculated in these functions
	  Executable newExecutable;

	  int i = 0;
 800191e:	2300      	movs	r3, #0
 8001920:	677b      	str	r3, [r7, #116]	@ 0x74
=======
 8001980:	b590      	push	{r4, r7, lr}
 8001982:	b09f      	sub	sp, #124	@ 0x7c
 8001984:	af04      	add	r7, sp, #16
 8001986:	6078      	str	r0, [r7, #4]

	  // Creates local variables for the different possible commands in Gcode (max 10 characters)
	  char Gcommand[10] = "";
 8001988:	2300      	movs	r3, #0
 800198a:	657b      	str	r3, [r7, #84]	@ 0x54
 800198c:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001990:	2200      	movs	r2, #0
 8001992:	601a      	str	r2, [r3, #0]
 8001994:	809a      	strh	r2, [r3, #4]
	  char Xcoordinate[10] = "";
 8001996:	2300      	movs	r3, #0
 8001998:	64bb      	str	r3, [r7, #72]	@ 0x48
 800199a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800199e:	2200      	movs	r2, #0
 80019a0:	601a      	str	r2, [r3, #0]
 80019a2:	809a      	strh	r2, [r3, #4]
	  char Ycoordinate[10] = "";
 80019a4:	2300      	movs	r3, #0
 80019a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80019a8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80019ac:	2200      	movs	r2, #0
 80019ae:	601a      	str	r2, [r3, #0]
 80019b0:	809a      	strh	r2, [r3, #4]
	  char Zcoordinate[10] = "";
 80019b2:	2300      	movs	r3, #0
 80019b4:	633b      	str	r3, [r7, #48]	@ 0x30
 80019b6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80019ba:	2200      	movs	r2, #0
 80019bc:	601a      	str	r2, [r3, #0]
 80019be:	809a      	strh	r2, [r3, #4]
	  char feedRate[10] = "";
 80019c0:	2300      	movs	r3, #0
 80019c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80019c4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80019c8:	2200      	movs	r2, #0
 80019ca:	601a      	str	r2, [r3, #0]
 80019cc:	809a      	strh	r2, [r3, #4]
	  char laserSpeed[10] = "";
 80019ce:	2300      	movs	r3, #0
 80019d0:	61bb      	str	r3, [r7, #24]
 80019d2:	f107 031c 	add.w	r3, r7, #28
 80019d6:	2200      	movs	r2, #0
 80019d8:	601a      	str	r2, [r3, #0]
 80019da:	809a      	strh	r2, [r3, #4]

	  int i = 0;
 80019dc:	2300      	movs	r3, #0
 80019de:	667b      	str	r3, [r7, #100]	@ 0x64
>>>>>>> Stashed changes
	  // Initiates a for loop which loops each character of the Gcode line
	  while (1)
	  {

		  // Creates a temporary variable for the Gcode command and the value attached to it
		  char command = line1[i];	// assigns the first value of the Gcode as the command
<<<<<<< Updated upstream
 8001922:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001924:	683a      	ldr	r2, [r7, #0]
 8001926:	4413      	add	r3, r2
 8001928:	781b      	ldrb	r3, [r3, #0]
 800192a:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		  char newValue[10] = "";
 800192e:	f107 0308 	add.w	r3, r7, #8
 8001932:	2200      	movs	r2, #0
 8001934:	601a      	str	r2, [r3, #0]
 8001936:	605a      	str	r2, [r3, #4]
 8001938:	811a      	strh	r2, [r3, #8]

		  // Temporary, incrementing variables
		  int j = 0;	// represents the current charcter in the word
 800193a:	2300      	movs	r3, #0
 800193c:	673b      	str	r3, [r7, #112]	@ 0x70
		  i++;		// indicates the total character in the line
 800193e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001940:	3301      	adds	r3, #1
 8001942:	677b      	str	r3, [r7, #116]	@ 0x74

		  // while loop that loops through the rest of the command and stores the value in newValue
		  while ((line1[i] != ' ') && (line1[i] != '\0') && (line1[i] != '\n'))
 8001944:	e00f      	b.n	8001966 <GCommandParse+0x9a>
=======
 80019e0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80019e2:	687a      	ldr	r2, [r7, #4]
 80019e4:	4413      	add	r3, r2
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		  char newValue[10] = "";
 80019ec:	2300      	movs	r3, #0
 80019ee:	60fb      	str	r3, [r7, #12]
 80019f0:	f107 0310 	add.w	r3, r7, #16
 80019f4:	2200      	movs	r2, #0
 80019f6:	601a      	str	r2, [r3, #0]
 80019f8:	809a      	strh	r2, [r3, #4]

		  int j = 0;
 80019fa:	2300      	movs	r3, #0
 80019fc:	663b      	str	r3, [r7, #96]	@ 0x60
		  i++;
 80019fe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001a00:	3301      	adds	r3, #1
 8001a02:	667b      	str	r3, [r7, #100]	@ 0x64

		  while ((line1[i] != ' ') && (line1[i] != '\0') && (line1[i] != '\n'))	// while loop that loops through the rest of the command and stores the value in newValue
 8001a04:	e00f      	b.n	8001a26 <GcommandParse+0xa6>
>>>>>>> Stashed changes
		  {
			  newValue[j] = line1[i];
<<<<<<< Updated upstream
 8001946:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001948:	683a      	ldr	r2, [r7, #0]
 800194a:	4413      	add	r3, r2
 800194c:	7819      	ldrb	r1, [r3, #0]
 800194e:	f107 0208 	add.w	r2, r7, #8
 8001952:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001954:	4413      	add	r3, r2
 8001956:	460a      	mov	r2, r1
 8001958:	701a      	strb	r2, [r3, #0]
			  i++;
 800195a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800195c:	3301      	adds	r3, #1
 800195e:	677b      	str	r3, [r7, #116]	@ 0x74
			  j++;
 8001960:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001962:	3301      	adds	r3, #1
 8001964:	673b      	str	r3, [r7, #112]	@ 0x70
		  while ((line1[i] != ' ') && (line1[i] != '\0') && (line1[i] != '\n'))
 8001966:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001968:	683a      	ldr	r2, [r7, #0]
 800196a:	4413      	add	r3, r2
 800196c:	781b      	ldrb	r3, [r3, #0]
 800196e:	2b20      	cmp	r3, #32
 8001970:	d00b      	beq.n	800198a <GCommandParse+0xbe>
 8001972:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001974:	683a      	ldr	r2, [r7, #0]
 8001976:	4413      	add	r3, r2
 8001978:	781b      	ldrb	r3, [r3, #0]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d005      	beq.n	800198a <GCommandParse+0xbe>
 800197e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001980:	683a      	ldr	r2, [r7, #0]
 8001982:	4413      	add	r3, r2
 8001984:	781b      	ldrb	r3, [r3, #0]
 8001986:	2b0a      	cmp	r3, #10
 8001988:	d1dd      	bne.n	8001946 <GCommandParse+0x7a>
		  }

		  //adds the null operator to the end of the newValue
		  newValue[j] = '\0';
 800198a:	f107 0208 	add.w	r2, r7, #8
 800198e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001990:	4413      	add	r3, r2
 8001992:	2200      	movs	r2, #0
 8001994:	701a      	strb	r2, [r3, #0]

		  // Switch statement for the value of command to split the current word into it's variable
		  switch (command)
 8001996:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800199a:	3b46      	subs	r3, #70	@ 0x46
 800199c:	2b14      	cmp	r3, #20
 800199e:	d86c      	bhi.n	8001a7a <GCommandParse+0x1ae>
 80019a0:	a201      	add	r2, pc, #4	@ (adr r2, 80019a8 <GCommandParse+0xdc>)
 80019a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019a6:	bf00      	nop
 80019a8:	08001a69 	.word	0x08001a69
 80019ac:	080019fd 	.word	0x080019fd
 80019b0:	08001a7b 	.word	0x08001a7b
 80019b4:	08001a7b 	.word	0x08001a7b
 80019b8:	08001a7b 	.word	0x08001a7b
 80019bc:	08001a7b 	.word	0x08001a7b
 80019c0:	08001a7b 	.word	0x08001a7b
 80019c4:	08001a45 	.word	0x08001a45
 80019c8:	08001a7b 	.word	0x08001a7b
 80019cc:	08001a7b 	.word	0x08001a7b
 80019d0:	08001a7b 	.word	0x08001a7b
 80019d4:	08001a7b 	.word	0x08001a7b
 80019d8:	08001a7b 	.word	0x08001a7b
 80019dc:	08001a57 	.word	0x08001a57
 80019e0:	08001a7b 	.word	0x08001a7b
 80019e4:	08001a7b 	.word	0x08001a7b
 80019e8:	08001a7b 	.word	0x08001a7b
 80019ec:	08001a7b 	.word	0x08001a7b
 80019f0:	08001a0f 	.word	0x08001a0f
 80019f4:	08001a21 	.word	0x08001a21
 80019f8:	08001a33 	.word	0x08001a33
		  {
		  case 'G':
			  strncpy(Gcommand, newValue, 10);	// copies the value in newValue to the Gcommand variable
 80019fc:	f107 0108 	add.w	r1, r7, #8
 8001a00:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001a04:	220a      	movs	r2, #10
 8001a06:	4618      	mov	r0, r3
 8001a08:	f00d f876 	bl	800eaf8 <strncpy>
				break;
 8001a0c:	e036      	b.n	8001a7c <GCommandParse+0x1b0>
		  case 'X':
			  strncpy(Xcoordinate, newValue, 10);	// copies the value in newValue to the Xcoordinate variable
 8001a0e:	f107 0108 	add.w	r1, r7, #8
 8001a12:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001a16:	220a      	movs	r2, #10
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f00d f86d 	bl	800eaf8 <strncpy>
				break;
 8001a1e:	e02d      	b.n	8001a7c <GCommandParse+0x1b0>
		  case 'Y':
			  strncpy(Ycoordinate, newValue, 10);	// copies the value in newValue to the Ycoordinate variable
 8001a20:	f107 0108 	add.w	r1, r7, #8
 8001a24:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001a28:	220a      	movs	r2, #10
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f00d f864 	bl	800eaf8 <strncpy>
				break;
 8001a30:	e024      	b.n	8001a7c <GCommandParse+0x1b0>
		  case 'Z':
			  strncpy(Zcoordinate, newValue, 10);	// copies the value in newValue to the Zcoordinate variable
 8001a32:	f107 0108 	add.w	r1, r7, #8
 8001a36:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001a3a:	220a      	movs	r2, #10
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f00d f85b 	bl	800eaf8 <strncpy>
				break;
 8001a42:	e01b      	b.n	8001a7c <GCommandParse+0x1b0>
		  case 'M':
			  strncpy(Gcommand, newValue, 10);	// copies the value in newValue to the Mcommand variable
 8001a44:	f107 0108 	add.w	r1, r7, #8
 8001a48:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001a4c:	220a      	movs	r2, #10
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f00d f852 	bl	800eaf8 <strncpy>
				break;
 8001a54:	e012      	b.n	8001a7c <GCommandParse+0x1b0>
		  case 'S':
			  strncpy(laserSpeed, newValue, 10);	// copies the value in newValue to the laserSpeed variable
 8001a56:	f107 0108 	add.w	r1, r7, #8
 8001a5a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001a5e:	220a      	movs	r2, #10
 8001a60:	4618      	mov	r0, r3
 8001a62:	f00d f849 	bl	800eaf8 <strncpy>
				break;
 8001a66:	e009      	b.n	8001a7c <GCommandParse+0x1b0>
		  case 'F':
			  strncpy(feedRate, newValue, 10);	// copies the value in newValue to the feedRate variable
 8001a68:	f107 0108 	add.w	r1, r7, #8
 8001a6c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001a70:	220a      	movs	r2, #10
 8001a72:	4618      	mov	r0, r3
 8001a74:	f00d f840 	bl	800eaf8 <strncpy>
				break;
 8001a78:	e000      	b.n	8001a7c <GCommandParse+0x1b0>
=======
 8001a06:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001a08:	687a      	ldr	r2, [r7, #4]
 8001a0a:	4413      	add	r3, r2
 8001a0c:	7819      	ldrb	r1, [r3, #0]
 8001a0e:	f107 020c 	add.w	r2, r7, #12
 8001a12:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001a14:	4413      	add	r3, r2
 8001a16:	460a      	mov	r2, r1
 8001a18:	701a      	strb	r2, [r3, #0]
			  i++;
 8001a1a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001a1c:	3301      	adds	r3, #1
 8001a1e:	667b      	str	r3, [r7, #100]	@ 0x64
			  j++;
 8001a20:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001a22:	3301      	adds	r3, #1
 8001a24:	663b      	str	r3, [r7, #96]	@ 0x60
		  while ((line1[i] != ' ') && (line1[i] != '\0') && (line1[i] != '\n'))	// while loop that loops through the rest of the command and stores the value in newValue
 8001a26:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001a28:	687a      	ldr	r2, [r7, #4]
 8001a2a:	4413      	add	r3, r2
 8001a2c:	781b      	ldrb	r3, [r3, #0]
 8001a2e:	2b20      	cmp	r3, #32
 8001a30:	d00b      	beq.n	8001a4a <GcommandParse+0xca>
 8001a32:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001a34:	687a      	ldr	r2, [r7, #4]
 8001a36:	4413      	add	r3, r2
 8001a38:	781b      	ldrb	r3, [r3, #0]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d005      	beq.n	8001a4a <GcommandParse+0xca>
 8001a3e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001a40:	687a      	ldr	r2, [r7, #4]
 8001a42:	4413      	add	r3, r2
 8001a44:	781b      	ldrb	r3, [r3, #0]
 8001a46:	2b0a      	cmp	r3, #10
 8001a48:	d1dd      	bne.n	8001a06 <GcommandParse+0x86>
		  }
		  newValue[j] = '\0';	//adds the null operator to the end of the newValue
 8001a4a:	f107 020c 	add.w	r2, r7, #12
 8001a4e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001a50:	4413      	add	r3, r2
 8001a52:	2200      	movs	r2, #0
 8001a54:	701a      	strb	r2, [r3, #0]

		  // Switch statement for the value of command to split the current word into it's variable
		  switch (command)
 8001a56:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8001a5a:	3b46      	subs	r3, #70	@ 0x46
 8001a5c:	2b14      	cmp	r3, #20
 8001a5e:	d86c      	bhi.n	8001b3a <GcommandParse+0x1ba>
 8001a60:	a201      	add	r2, pc, #4	@ (adr r2, 8001a68 <GcommandParse+0xe8>)
 8001a62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a66:	bf00      	nop
 8001a68:	08001b29 	.word	0x08001b29
 8001a6c:	08001abd 	.word	0x08001abd
 8001a70:	08001b3b 	.word	0x08001b3b
 8001a74:	08001b3b 	.word	0x08001b3b
 8001a78:	08001b3b 	.word	0x08001b3b
 8001a7c:	08001b3b 	.word	0x08001b3b
 8001a80:	08001b3b 	.word	0x08001b3b
 8001a84:	08001b05 	.word	0x08001b05
 8001a88:	08001b3b 	.word	0x08001b3b
 8001a8c:	08001b3b 	.word	0x08001b3b
 8001a90:	08001b3b 	.word	0x08001b3b
 8001a94:	08001b3b 	.word	0x08001b3b
 8001a98:	08001b3b 	.word	0x08001b3b
 8001a9c:	08001b17 	.word	0x08001b17
 8001aa0:	08001b3b 	.word	0x08001b3b
 8001aa4:	08001b3b 	.word	0x08001b3b
 8001aa8:	08001b3b 	.word	0x08001b3b
 8001aac:	08001b3b 	.word	0x08001b3b
 8001ab0:	08001acf 	.word	0x08001acf
 8001ab4:	08001ae1 	.word	0x08001ae1
 8001ab8:	08001af3 	.word	0x08001af3
		  {
		  case 'G':
			  strncpy(Gcommand, newValue, 10);	// copies the value in newValue to the Gcommand variable
 8001abc:	f107 010c 	add.w	r1, r7, #12
 8001ac0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001ac4:	220a      	movs	r2, #10
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f009 fcc4 	bl	800b454 <strncpy>
				break;
 8001acc:	e036      	b.n	8001b3c <GcommandParse+0x1bc>
		  case 'X':
			  strncpy(Xcoordinate, newValue, 10);	// copies the value in newValue to the Xcoordinate variable
 8001ace:	f107 010c 	add.w	r1, r7, #12
 8001ad2:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001ad6:	220a      	movs	r2, #10
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f009 fcbb 	bl	800b454 <strncpy>
				break;
 8001ade:	e02d      	b.n	8001b3c <GcommandParse+0x1bc>
		  case 'Y':
			  strncpy(Ycoordinate, newValue, 10);	// copies the value in newValue to the Ycoordinate variable
 8001ae0:	f107 010c 	add.w	r1, r7, #12
 8001ae4:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001ae8:	220a      	movs	r2, #10
 8001aea:	4618      	mov	r0, r3
 8001aec:	f009 fcb2 	bl	800b454 <strncpy>
				break;
 8001af0:	e024      	b.n	8001b3c <GcommandParse+0x1bc>
		  case 'Z':
			  strncpy(Zcoordinate, newValue, 10);	// copies the value in newValue to the Zcoordinate variable
 8001af2:	f107 010c 	add.w	r1, r7, #12
 8001af6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001afa:	220a      	movs	r2, #10
 8001afc:	4618      	mov	r0, r3
 8001afe:	f009 fca9 	bl	800b454 <strncpy>
				break;
 8001b02:	e01b      	b.n	8001b3c <GcommandParse+0x1bc>
		  case 'M':
			  strncpy(Gcommand, newValue, 10);	// copies the value in newValue to the Mcommand variable
 8001b04:	f107 010c 	add.w	r1, r7, #12
 8001b08:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001b0c:	220a      	movs	r2, #10
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f009 fca0 	bl	800b454 <strncpy>
				break;
 8001b14:	e012      	b.n	8001b3c <GcommandParse+0x1bc>
		  case 'S':
			  strncpy(laserSpeed, newValue, 10);	// copies the value in newValue to the laserSpeed variable
 8001b16:	f107 010c 	add.w	r1, r7, #12
 8001b1a:	f107 0318 	add.w	r3, r7, #24
 8001b1e:	220a      	movs	r2, #10
 8001b20:	4618      	mov	r0, r3
 8001b22:	f009 fc97 	bl	800b454 <strncpy>
				break;
 8001b26:	e009      	b.n	8001b3c <GcommandParse+0x1bc>
		  case 'F':
			  strncpy(feedRate, newValue, 10);	// copies the value in newValue to the feedRate variable
 8001b28:	f107 010c 	add.w	r1, r7, #12
 8001b2c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b30:	220a      	movs	r2, #10
 8001b32:	4618      	mov	r0, r3
 8001b34:	f009 fc8e 	bl	800b454 <strncpy>
				break;
 8001b38:	e000      	b.n	8001b3c <GcommandParse+0x1bc>
>>>>>>> Stashed changes
		  case 'R':
				break;
		  default:
				break;
<<<<<<< Updated upstream
 8001a7a:	bf00      	nop
=======
 8001b3a:	bf00      	nop
>>>>>>> Stashed changes
		  }

		  // When the new line operator occurs, this means the line is over, so we break the while loop
		  if (line1[i] == '\n')
<<<<<<< Updated upstream
 8001a7c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001a7e:	683a      	ldr	r2, [r7, #0]
 8001a80:	4413      	add	r3, r2
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	2b0a      	cmp	r3, #10
 8001a86:	d11c      	bne.n	8001ac2 <GCommandParse+0x1f6>
		  // increments i to the value of the first character of the next command
		  i++;
	  }

	  // Calls the Compute Executables command which computes the output Executables
	  newExecutable = ComputeExecutables(Gcommand, Xcoordinate, Ycoordinate, Zcoordinate, feedRate, laserSpeed);
 8001a88:	f107 0014 	add.w	r0, r7, #20
 8001a8c:	f107 044c 	add.w	r4, r7, #76	@ 0x4c
 8001a90:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 8001a94:	f107 0164 	add.w	r1, r7, #100	@ 0x64
 8001a98:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001a9c:	9302      	str	r3, [sp, #8]
 8001a9e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001aa2:	9301      	str	r3, [sp, #4]
 8001aa4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001aa8:	9300      	str	r3, [sp, #0]
 8001aaa:	4623      	mov	r3, r4
 8001aac:	f000 f814 	bl	8001ad8 <ComputeExecutables>

	  // Returns the values in the Executable struct
	  return newExecutable;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	461d      	mov	r5, r3
 8001ab4:	f107 0414 	add.w	r4, r7, #20
 8001ab8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001aba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001abc:	6823      	ldr	r3, [r4, #0]
 8001abe:	602b      	str	r3, [r5, #0]
 8001ac0:	e003      	b.n	8001aca <GCommandParse+0x1fe>
		  i++;
 8001ac2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001ac4:	3301      	adds	r3, #1
 8001ac6:	677b      	str	r3, [r7, #116]	@ 0x74
	  {
 8001ac8:	e72b      	b.n	8001922 <GCommandParse+0x56>
}
 8001aca:	6878      	ldr	r0, [r7, #4]
 8001acc:	3778      	adds	r7, #120	@ 0x78
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bdb0      	pop	{r4, r5, r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	0000      	movs	r0, r0
	...

08001ad8 <ComputeExecutables>:
=======
 8001b3c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001b3e:	687a      	ldr	r2, [r7, #4]
 8001b40:	4413      	add	r3, r2
 8001b42:	781b      	ldrb	r3, [r3, #0]
 8001b44:	2b0a      	cmp	r3, #10
 8001b46:	d109      	bne.n	8001b5c <GcommandParse+0x1dc>
			  break;
		  i++;
	  }
	  if (strcmp(Gcommand,"G")){
 8001b48:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001b4c:	491d      	ldr	r1, [pc, #116]	@ (8001bc4 <GcommandParse+0x244>)
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f7fe fb3e 	bl	80001d0 <strcmp>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d104      	bne.n	8001b64 <GcommandParse+0x1e4>
 8001b5a:	e028      	b.n	8001bae <GcommandParse+0x22e>
		  i++;
 8001b5c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001b5e:	3301      	adds	r3, #1
 8001b60:	667b      	str	r3, [r7, #100]	@ 0x64
	  {
 8001b62:	e73d      	b.n	80019e0 <GcommandParse+0x60>
		  GcommandExecute(Gcommand, Xcoordinate, Ycoordinate, Zcoordinate, feedRate, laserSpeed);	// Calls the Gcommand Execute function which will execute the given command
 8001b64:	f107 0430 	add.w	r4, r7, #48	@ 0x30
 8001b68:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8001b6c:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8001b70:	f107 0054 	add.w	r0, r7, #84	@ 0x54
 8001b74:	f107 0318 	add.w	r3, r7, #24
 8001b78:	9301      	str	r3, [sp, #4]
 8001b7a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b7e:	9300      	str	r3, [sp, #0]
 8001b80:	4623      	mov	r3, r4
 8001b82:	f000 f825 	bl	8001bd0 <GcommandExecute>
		  myprintf("Gcommand: %s Xcoordinate: %s Ycoordinate: %s Zcoordinate: %s feedRate: %s laserSpeed %s\n", Gcommand, Xcoordinate, Ycoordinate, Zcoordinate, feedRate, laserSpeed);
 8001b86:	f107 003c 	add.w	r0, r7, #60	@ 0x3c
 8001b8a:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8001b8e:	f107 0154 	add.w	r1, r7, #84	@ 0x54
 8001b92:	f107 0318 	add.w	r3, r7, #24
 8001b96:	9302      	str	r3, [sp, #8]
 8001b98:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b9c:	9301      	str	r3, [sp, #4]
 8001b9e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001ba2:	9300      	str	r3, [sp, #0]
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	4808      	ldr	r0, [pc, #32]	@ (8001bc8 <GcommandParse+0x248>)
 8001ba8:	f7ff fb4a 	bl	8001240 <myprintf>
	  }
	  else if (strcmp(Gcommand,"M")){

	  }
}
 8001bac:	e005      	b.n	8001bba <GcommandParse+0x23a>
	  else if (strcmp(Gcommand,"M")){
 8001bae:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001bb2:	4906      	ldr	r1, [pc, #24]	@ (8001bcc <GcommandParse+0x24c>)
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f7fe fb0b 	bl	80001d0 <strcmp>
}
 8001bba:	bf00      	nop
 8001bbc:	376c      	adds	r7, #108	@ 0x6c
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd90      	pop	{r4, r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	0800d834 	.word	0x0800d834
 8001bc8:	0800d838 	.word	0x0800d838
 8001bcc:	0800d894 	.word	0x0800d894

08001bd0 <GcommandExecute>:
>>>>>>> Stashed changes
	*s = '\0';
}

// Command Execute takes the parameters from the Gcode line and controls the motors accordingly
Executable ComputeExecutables(char Gcommand[], char Xcommand[], char Ycommand[], char Zcommand[], char feedRate[], char laserSpeed[])
{
<<<<<<< Updated upstream
 8001ad8:	b5b0      	push	{r4, r5, r7, lr}
 8001ada:	b08c      	sub	sp, #48	@ 0x30
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	60f8      	str	r0, [r7, #12]
 8001ae0:	60b9      	str	r1, [r7, #8]
 8001ae2:	607a      	str	r2, [r7, #4]
 8001ae4:	603b      	str	r3, [r7, #0]

	// creates a temporary Executable struct to save the values we compute
	Executable newExecutable;

	// If the Gcode command is G0, runs with rapid positioning (full speed move)
	if ((!strcmp(Gcommand,"0")) || (!strcmp(Gcommand,"1")))
 8001ae6:	4984      	ldr	r1, [pc, #528]	@ (8001cf8 <ComputeExecutables+0x220>)
 8001ae8:	68b8      	ldr	r0, [r7, #8]
 8001aea:	f7fe fb71 	bl	80001d0 <strcmp>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d007      	beq.n	8001b04 <ComputeExecutables+0x2c>
 8001af4:	4981      	ldr	r1, [pc, #516]	@ (8001cfc <ComputeExecutables+0x224>)
 8001af6:	68b8      	ldr	r0, [r7, #8]
 8001af8:	f7fe fb6a 	bl	80001d0 <strcmp>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	f040 80e3 	bne.w	8001cca <ComputeExecutables+0x1f2>
=======
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b088      	sub	sp, #32
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	60f8      	str	r0, [r7, #12]
 8001bd8:	60b9      	str	r1, [r7, #8]
 8001bda:	607a      	str	r2, [r7, #4]
 8001bdc:	603b      	str	r3, [r7, #0]

	if ((!strcmp(Gcommand,"0")) || (!strcmp(Gcommand,"1")))	// If the Gcode command is G0, runs with rapid positioning (full speed move)
 8001bde:	4966      	ldr	r1, [pc, #408]	@ (8001d78 <GcommandExecute+0x1a8>)
 8001be0:	68f8      	ldr	r0, [r7, #12]
 8001be2:	f7fe faf5 	bl	80001d0 <strcmp>
 8001be6:	4603      	mov	r3, r0
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d007      	beq.n	8001bfc <GcommandExecute+0x2c>
 8001bec:	4963      	ldr	r1, [pc, #396]	@ (8001d7c <GcommandExecute+0x1ac>)
 8001bee:	68f8      	ldr	r0, [r7, #12]
 8001bf0:	f7fe faee 	bl	80001d0 <strcmp>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	f040 80b3 	bne.w	8001d62 <GcommandExecute+0x192>
>>>>>>> Stashed changes
	{

		// If there is a value in Xcommand, it computes the end point of the system (1600 pulses per motor rotation, 43.39 mm per rotation)
		if (Xcommand[0] != '\0')
<<<<<<< Updated upstream
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d012      	beq.n	8001b32 <ComputeExecutables+0x5a>
		{
			newExecutable.Xend = ((1600 / 43.39) * atof(Xcommand));	// Converts Xcommand to an int, changes units to .1 mms and updates the global variable
 8001b0c:	6878      	ldr	r0, [r7, #4]
 8001b0e:	f00b fffb 	bl	800db08 <atof>
 8001b12:	ec51 0b10 	vmov	r0, r1, d0
 8001b16:	a374      	add	r3, pc, #464	@ (adr r3, 8001ce8 <ComputeExecutables+0x210>)
 8001b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b1c:	f7fe fd7c 	bl	8000618 <__aeabi_dmul>
 8001b20:	4602      	mov	r2, r0
 8001b22:	460b      	mov	r3, r1
 8001b24:	4610      	mov	r0, r2
 8001b26:	4619      	mov	r1, r3
 8001b28:	f7ff f826 	bl	8000b78 <__aeabi_d2iz>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	613b      	str	r3, [r7, #16]
 8001b30:	e002      	b.n	8001b38 <ComputeExecutables+0x60>
=======
 8001bfc:	68bb      	ldr	r3, [r7, #8]
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d013      	beq.n	8001c2c <GcommandExecute+0x5c>
		{
			Xend = ((1600 / 43.39) * atof(Xcommand));	// Converts Xcommand to an int, changes units to .1 mms and updates the global variable
 8001c04:	68b8      	ldr	r0, [r7, #8]
 8001c06:	f008 fc22 	bl	800a44e <atof>
 8001c0a:	ec51 0b10 	vmov	r0, r1, d0
 8001c0e:	a358      	add	r3, pc, #352	@ (adr r3, 8001d70 <GcommandExecute+0x1a0>)
 8001c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c14:	f7fe fd00 	bl	8000618 <__aeabi_dmul>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	460b      	mov	r3, r1
 8001c1c:	4610      	mov	r0, r2
 8001c1e:	4619      	mov	r1, r3
 8001c20:	f7fe ffaa 	bl	8000b78 <__aeabi_d2iz>
 8001c24:	4603      	mov	r3, r0
 8001c26:	4a56      	ldr	r2, [pc, #344]	@ (8001d80 <GcommandExecute+0x1b0>)
 8001c28:	6013      	str	r3, [r2, #0]
 8001c2a:	e003      	b.n	8001c34 <GcommandExecute+0x64>
		} else
		{
			Xend = Xcurrent;
 8001c2c:	4b55      	ldr	r3, [pc, #340]	@ (8001d84 <GcommandExecute+0x1b4>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a53      	ldr	r2, [pc, #332]	@ (8001d80 <GcommandExecute+0x1b0>)
 8001c32:	6013      	str	r3, [r2, #0]
>>>>>>> Stashed changes
		}

		// If there is no value in Xcommand, Xend equals the current Xvalue (Xcurrent is a global variable that stores the X position that is currently being calculated
		else
		{
			newExecutable.Xend = XCurrentCalculate;
 8001b32:	4b73      	ldr	r3, [pc, #460]	@ (8001d00 <ComputeExecutables+0x228>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	613b      	str	r3, [r7, #16]
		}

		// If there is a value in Ycommand, it computes the end point of the system (1600 pulses per motor rotation, 43.39 mm per rotation)
		if (Ycommand[0] != '\0')
<<<<<<< Updated upstream
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	781b      	ldrb	r3, [r3, #0]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d012      	beq.n	8001b66 <ComputeExecutables+0x8e>
		{
			newExecutable.Yend = ((1600 / 43.39) * atof(Ycommand));	// Converts Ycommand to an int, changes units to .1 mms and updates the global variable
 8001b40:	6838      	ldr	r0, [r7, #0]
 8001b42:	f00b ffe1 	bl	800db08 <atof>
 8001b46:	ec51 0b10 	vmov	r0, r1, d0
 8001b4a:	a367      	add	r3, pc, #412	@ (adr r3, 8001ce8 <ComputeExecutables+0x210>)
 8001b4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b50:	f7fe fd62 	bl	8000618 <__aeabi_dmul>
 8001b54:	4602      	mov	r2, r0
 8001b56:	460b      	mov	r3, r1
 8001b58:	4610      	mov	r0, r2
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	f7ff f80c 	bl	8000b78 <__aeabi_d2iz>
 8001b60:	4603      	mov	r3, r0
 8001b62:	617b      	str	r3, [r7, #20]
 8001b64:	e002      	b.n	8001b6c <ComputeExecutables+0x94>
		}

		// If there is no value in Xcommand, Xend equals the current Xvalue (Xcurrent is a global variable that stores the X position that is currently being calculated
		else
		{
			newExecutable.Yend = YCurrentCalculate;
 8001b66:	4b67      	ldr	r3, [pc, #412]	@ (8001d04 <ComputeExecutables+0x22c>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	617b      	str	r3, [r7, #20]
		}

		// Calculates distance to be traveled in the current engrave
		float Xdistance = newExecutable.Xend - XCurrentCalculate;
 8001b6c:	693a      	ldr	r2, [r7, #16]
 8001b6e:	4b64      	ldr	r3, [pc, #400]	@ (8001d00 <ComputeExecutables+0x228>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	1ad3      	subs	r3, r2, r3
 8001b74:	ee07 3a90 	vmov	s15, r3
 8001b78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b7c:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
		float Ydistance = newExecutable.Yend - YCurrentCalculate;
 8001b80:	697a      	ldr	r2, [r7, #20]
 8001b82:	4b60      	ldr	r3, [pc, #384]	@ (8001d04 <ComputeExecutables+0x22c>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	1ad3      	subs	r3, r2, r3
 8001b88:	ee07 3a90 	vmov	s15, r3
 8001b8c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b90:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28

		// sets the current calculate global variable for the next line to use
		XCurrentCalculate = newExecutable.Xend;
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	4a5a      	ldr	r2, [pc, #360]	@ (8001d00 <ComputeExecutables+0x228>)
 8001b98:	6013      	str	r3, [r2, #0]
		YCurrentCalculate = newExecutable.Yend;
 8001b9a:	697b      	ldr	r3, [r7, #20]
 8001b9c:	4a59      	ldr	r2, [pc, #356]	@ (8001d04 <ComputeExecutables+0x22c>)
 8001b9e:	6013      	str	r3, [r2, #0]
=======
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d013      	beq.n	8001c64 <GcommandExecute+0x94>
		{
			Yend = ((1600 / 43.39) * atof(Ycommand));	// Converts Ycommand to an int, changes units to .1 mms and updates the global variable
 8001c3c:	6878      	ldr	r0, [r7, #4]
 8001c3e:	f008 fc06 	bl	800a44e <atof>
 8001c42:	ec51 0b10 	vmov	r0, r1, d0
 8001c46:	a34a      	add	r3, pc, #296	@ (adr r3, 8001d70 <GcommandExecute+0x1a0>)
 8001c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c4c:	f7fe fce4 	bl	8000618 <__aeabi_dmul>
 8001c50:	4602      	mov	r2, r0
 8001c52:	460b      	mov	r3, r1
 8001c54:	4610      	mov	r0, r2
 8001c56:	4619      	mov	r1, r3
 8001c58:	f7fe ff8e 	bl	8000b78 <__aeabi_d2iz>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	4a4a      	ldr	r2, [pc, #296]	@ (8001d88 <GcommandExecute+0x1b8>)
 8001c60:	6013      	str	r3, [r2, #0]
 8001c62:	e003      	b.n	8001c6c <GcommandExecute+0x9c>
		} else
		{
			Yend = Ycurrent;
 8001c64:	4b49      	ldr	r3, [pc, #292]	@ (8001d8c <GcommandExecute+0x1bc>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a47      	ldr	r2, [pc, #284]	@ (8001d88 <GcommandExecute+0x1b8>)
 8001c6a:	6013      	str	r3, [r2, #0]
		}

		// Calculates distance to be traveled
		float Xdistance = Xend - Xcurrent;
 8001c6c:	4b44      	ldr	r3, [pc, #272]	@ (8001d80 <GcommandExecute+0x1b0>)
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	4b44      	ldr	r3, [pc, #272]	@ (8001d84 <GcommandExecute+0x1b4>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	1ad3      	subs	r3, r2, r3
 8001c76:	ee07 3a90 	vmov	s15, r3
 8001c7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c7e:	edc7 7a07 	vstr	s15, [r7, #28]
		float Ydistance = Yend - Ycurrent;
 8001c82:	4b41      	ldr	r3, [pc, #260]	@ (8001d88 <GcommandExecute+0x1b8>)
 8001c84:	681a      	ldr	r2, [r3, #0]
 8001c86:	4b41      	ldr	r3, [pc, #260]	@ (8001d8c <GcommandExecute+0x1bc>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	1ad3      	subs	r3, r2, r3
 8001c8c:	ee07 3a90 	vmov	s15, r3
 8001c90:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c94:	edc7 7a06 	vstr	s15, [r7, #24]

		// Updates the Direction variable and writes to the pin
		if (Xdistance > 0)
 8001c98:	edd7 7a07 	vldr	s15, [r7, #28]
 8001c9c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001ca0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ca4:	dd08      	ble.n	8001cb8 <GcommandExecute+0xe8>
		{
			XDIR = 1;
 8001ca6:	4b3a      	ldr	r3, [pc, #232]	@ (8001d90 <GcommandExecute+0x1c0>)
 8001ca8:	2201      	movs	r2, #1
 8001caa:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(XDIR_GPIO_Port, XDIR_Pin, 1);
 8001cac:	2201      	movs	r2, #1
 8001cae:	2110      	movs	r1, #16
 8001cb0:	4838      	ldr	r0, [pc, #224]	@ (8001d94 <GcommandExecute+0x1c4>)
 8001cb2:	f001 f89d 	bl	8002df0 <HAL_GPIO_WritePin>
 8001cb6:	e00e      	b.n	8001cd6 <GcommandExecute+0x106>
		} else if (Xdistance < 0)
 8001cb8:	edd7 7a07 	vldr	s15, [r7, #28]
 8001cbc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001cc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cc4:	d507      	bpl.n	8001cd6 <GcommandExecute+0x106>
		{
			XDIR = 0;
 8001cc6:	4b32      	ldr	r3, [pc, #200]	@ (8001d90 <GcommandExecute+0x1c0>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(XDIR_GPIO_Port, XDIR_Pin, 0);
 8001ccc:	2200      	movs	r2, #0
 8001cce:	2110      	movs	r1, #16
 8001cd0:	4830      	ldr	r0, [pc, #192]	@ (8001d94 <GcommandExecute+0x1c4>)
 8001cd2:	f001 f88d 	bl	8002df0 <HAL_GPIO_WritePin>
		}

		if (Ydistance > 0)
 8001cd6:	edd7 7a06 	vldr	s15, [r7, #24]
 8001cda:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001cde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ce2:	dd0a      	ble.n	8001cfa <GcommandExecute+0x12a>
		{
			YDIR = 1;
 8001ce4:	4b2c      	ldr	r3, [pc, #176]	@ (8001d98 <GcommandExecute+0x1c8>)
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(YDIR_GPIO_Port, YDIR_Pin, 1);
 8001cea:	2201      	movs	r2, #1
 8001cec:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001cf0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001cf4:	f001 f87c 	bl	8002df0 <HAL_GPIO_WritePin>
 8001cf8:	e010      	b.n	8001d1c <GcommandExecute+0x14c>
		} else if (Ydistance < 0)
 8001cfa:	edd7 7a06 	vldr	s15, [r7, #24]
 8001cfe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001d02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d06:	d509      	bpl.n	8001d1c <GcommandExecute+0x14c>
		{
			YDIR = 0;
 8001d08:	4b23      	ldr	r3, [pc, #140]	@ (8001d98 <GcommandExecute+0x1c8>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(YDIR_GPIO_Port, YDIR_Pin, 0);
 8001d0e:	2200      	movs	r2, #0
 8001d10:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001d14:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d18:	f001 f86a 	bl	8002df0 <HAL_GPIO_WritePin>
		}

		int laser = atoi(laserSpeed);	// Converts laserSpeed to an int
 8001d1c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001d1e:	f008 fb99 	bl	800a454 <atoi>
 8001d22:	6178      	str	r0, [r7, #20]
>>>>>>> Stashed changes

		// sets the feedRate variable (sometimes the Gcommand doesn't put in a new feedRate variable and the feedRate stays the same
		// In order to calculate each step, we need to save the feedRate because the next command may need it
		if (feedRate[0] != '\0')
<<<<<<< Updated upstream
 8001ba0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001ba2:	781b      	ldrb	r3, [r3, #0]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d005      	beq.n	8001bb4 <ComputeExecutables+0xdc>
		{
			feed = atoi(feedRate);	// Converts feedRate to an int
 8001ba8:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001baa:	f00b ffb0 	bl	800db0e <atoi>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	4a55      	ldr	r2, [pc, #340]	@ (8001d08 <ComputeExecutables+0x230>)
 8001bb2:	6013      	str	r3, [r2, #0]
		}

		// Initiates the Xspeed and Yspeed variables to 1 (so if the speed doesn't change, the next instruction won't divide by 0)
		// It is set to one so that the timer interrupt will be called quickly, and the stopped motor won't disrupt the other motor)
		newExecutable.Xspeed = 1;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	61bb      	str	r3, [r7, #24]
		newExecutable.Yspeed = 1;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	61fb      	str	r3, [r7, #28]
=======
 8001d24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d26:	781b      	ldrb	r3, [r3, #0]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d005      	beq.n	8001d38 <GcommandExecute+0x168>
		{
			feed = atoi(feedRate);	// Converts feedRate to an int
 8001d2c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001d2e:	f008 fb91 	bl	800a454 <atoi>
 8001d32:	4603      	mov	r3, r0
 8001d34:	4a19      	ldr	r2, [pc, #100]	@ (8001d9c <GcommandExecute+0x1cc>)
 8001d36:	6013      	str	r3, [r2, #0]
		}
		// Add code to turn laser on and PWM of value specified
				 laser = atoi(laserSpeed);  // Convert laserSpeed string to integer
 8001d38:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001d3a:	f008 fb8b 	bl	800a454 <atoi>
 8001d3e:	6178      	str	r0, [r7, #20]
				 SetLaserPower(laser);
 8001d40:	6978      	ldr	r0, [r7, #20]
 8001d42:	f000 f82d 	bl	8001da0 <SetLaserPower>

		laserEngrave(Xdistance, Ydistance);	// Calls the laserEngrave function
 8001d46:	edd7 7a07 	vldr	s15, [r7, #28]
 8001d4a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8001d4e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001d52:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d56:	ee17 1a90 	vmov	r1, s15
 8001d5a:	ee17 0a10 	vmov	r0, s14
 8001d5e:	f000 f82f 	bl	8001dc0 <laserEngrave>
>>>>>>> Stashed changes

		// calculates the total distance in order to evaluate the speed (feedRate is given in a direct, diagonal path)
		float totalDistance = sqrt((Xdistance * Xdistance) + (Ydistance * Ydistance));
 8001bbc:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001bc0:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001bc4:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001bc8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001bcc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bd0:	ee17 0a90 	vmov	r0, s15
 8001bd4:	f7fe fcc8 	bl	8000568 <__aeabi_f2d>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	460b      	mov	r3, r1
 8001bdc:	ec43 2b10 	vmov	d0, r2, r3
 8001be0:	f00f f860 	bl	8010ca4 <sqrt>
 8001be4:	ec53 2b10 	vmov	r2, r3, d0
 8001be8:	4610      	mov	r0, r2
 8001bea:	4619      	mov	r1, r3
 8001bec:	f7ff f80c 	bl	8000c08 <__aeabi_d2f>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	627b      	str	r3, [r7, #36]	@ 0x24

		// ensures the distance won't be divided by 0
		if (Xdistance != 0)
 8001bf4:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001bf8:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001bfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c00:	d02b      	beq.n	8001c5a <ComputeExecutables+0x182>
		{

			// Calcualtes the required prescaler value and saves it in the Xspeed variable
			newExecutable.Xspeed = 162712.482 / ((abs(Xdistance) / totalDistance) * feed);
 8001c02:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001c06:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c0a:	ee17 3a90 	vmov	r3, s15
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	bfb8      	it	lt
 8001c12:	425b      	neglt	r3, r3
 8001c14:	ee07 3a90 	vmov	s15, r3
 8001c18:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001c1c:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001c20:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001c24:	4b38      	ldr	r3, [pc, #224]	@ (8001d08 <ComputeExecutables+0x230>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	ee07 3a90 	vmov	s15, r3
 8001c2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c34:	ee17 0a90 	vmov	r0, s15
 8001c38:	f7fe fc96 	bl	8000568 <__aeabi_f2d>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	460b      	mov	r3, r1
 8001c40:	a12b      	add	r1, pc, #172	@ (adr r1, 8001cf0 <ComputeExecutables+0x218>)
 8001c42:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001c46:	f7fe fe11 	bl	800086c <__aeabi_ddiv>
 8001c4a:	4602      	mov	r2, r0
 8001c4c:	460b      	mov	r3, r1
 8001c4e:	4610      	mov	r0, r2
 8001c50:	4619      	mov	r1, r3
 8001c52:	f7fe ff91 	bl	8000b78 <__aeabi_d2iz>
 8001c56:	4603      	mov	r3, r0
 8001c58:	61bb      	str	r3, [r7, #24]
		}

		// Ensures the distance won't be divided by 0
		if (Ydistance != 0)
 8001c5a:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001c5e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001c62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c66:	d02b      	beq.n	8001cc0 <ComputeExecutables+0x1e8>
		{

			// Calculates the required prescaler value and saves it in the Yspeed variable
			newExecutable.Yspeed = 162712.482 / ((abs(Ydistance) / totalDistance) * feed);
 8001c68:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001c6c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c70:	ee17 3a90 	vmov	r3, s15
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	bfb8      	it	lt
 8001c78:	425b      	neglt	r3, r3
 8001c7a:	ee07 3a90 	vmov	s15, r3
 8001c7e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001c82:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001c86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001c8a:	4b1f      	ldr	r3, [pc, #124]	@ (8001d08 <ComputeExecutables+0x230>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	ee07 3a90 	vmov	s15, r3
 8001c92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c9a:	ee17 0a90 	vmov	r0, s15
 8001c9e:	f7fe fc63 	bl	8000568 <__aeabi_f2d>
 8001ca2:	4602      	mov	r2, r0
 8001ca4:	460b      	mov	r3, r1
 8001ca6:	a112      	add	r1, pc, #72	@ (adr r1, 8001cf0 <ComputeExecutables+0x218>)
 8001ca8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001cac:	f7fe fdde 	bl	800086c <__aeabi_ddiv>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	460b      	mov	r3, r1
 8001cb4:	4610      	mov	r0, r2
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	f7fe ff5e 	bl	8000b78 <__aeabi_d2iz>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	61fb      	str	r3, [r7, #28]
		}

		// Converters laserSpeed to an int
		newExecutable.laserSpeed = atoi(laserSpeed);
 8001cc0:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8001cc2:	f00b ff24 	bl	800db0e <atoi>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	623b      	str	r3, [r7, #32]
	}

	// if there are any other possible input comands (M command, G02, G03, etc. we can put them here)

	// returns the Executable struct
	return newExecutable;
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	461d      	mov	r5, r3
 8001cce:	f107 0410 	add.w	r4, r7, #16
 8001cd2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001cd4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cd6:	6823      	ldr	r3, [r4, #0]
 8001cd8:	602b      	str	r3, [r5, #0]



}
<<<<<<< Updated upstream
 8001cda:	68f8      	ldr	r0, [r7, #12]
 8001cdc:	3730      	adds	r7, #48	@ 0x30
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bdb0      	pop	{r4, r5, r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	f3af 8000 	nop.w
 8001ce8:	47af49cf 	.word	0x47af49cf
 8001cec:	40426ffb 	.word	0x40426ffb
 8001cf0:	db22d0e5 	.word	0xdb22d0e5
 8001cf4:	4103dcc3 	.word	0x4103dcc3
 8001cf8:	08010f38 	.word	0x08010f38
 8001cfc:	08010f3c 	.word	0x08010f3c
 8001d00:	2000045c 	.word	0x2000045c
 8001d04:	20000460 	.word	0x20000460
 8001d08:	20000458 	.word	0x20000458
 8001d0c:	00000000 	.word	0x00000000
=======
 8001d62:	bf00      	nop
 8001d64:	3720      	adds	r7, #32
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	f3af 8000 	nop.w
 8001d70:	47af49cf 	.word	0x47af49cf
 8001d74:	40426ffb 	.word	0x40426ffb
 8001d78:	0800d898 	.word	0x0800d898
 8001d7c:	0800d89c 	.word	0x0800d89c
 8001d80:	200004a4 	.word	0x200004a4
 8001d84:	2000049c 	.word	0x2000049c
 8001d88:	200004a8 	.word	0x200004a8
 8001d8c:	200004a0 	.word	0x200004a0
 8001d90:	20000004 	.word	0x20000004
 8001d94:	48000400 	.word	0x48000400
 8001d98:	20000008 	.word	0x20000008
 8001d9c:	200004ac 	.word	0x200004ac

08001da0 <SetLaserPower>:
>>>>>>> Stashed changes

08001d10 <SetLaserPower>:

// Function to set the laser power. input must be a value from 0 to 255
void SetLaserPower(uint8_t power) {
<<<<<<< Updated upstream
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b084      	sub	sp, #16
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	4603      	mov	r3, r0
 8001d18:	71fb      	strb	r3, [r7, #7]

	// the timer requires the duty cycle in a ratio from 0 to 80000
	float dutyCycle = (power/255.0) * 80000;
 8001d1a:	79fb      	ldrb	r3, [r7, #7]
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f7fe fc11 	bl	8000544 <__aeabi_i2d>
 8001d22:	a311      	add	r3, pc, #68	@ (adr r3, 8001d68 <SetLaserPower+0x58>)
 8001d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d28:	f7fe fda0 	bl	800086c <__aeabi_ddiv>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	460b      	mov	r3, r1
 8001d30:	4610      	mov	r0, r2
 8001d32:	4619      	mov	r1, r3
 8001d34:	a30e      	add	r3, pc, #56	@ (adr r3, 8001d70 <SetLaserPower+0x60>)
 8001d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d3a:	f7fe fc6d 	bl	8000618 <__aeabi_dmul>
 8001d3e:	4602      	mov	r2, r0
 8001d40:	460b      	mov	r3, r1
 8001d42:	4610      	mov	r0, r2
 8001d44:	4619      	mov	r1, r3
 8001d46:	f7fe ff5f 	bl	8000c08 <__aeabi_d2f>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	60fb      	str	r3, [r7, #12]
    TIM2->CCR1 = dutyCycle;  // Set duty cycle
 8001d4e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001d52:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d5a:	ee17 2a90 	vmov	r2, s15
 8001d5e:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001d60:	bf00      	nop
 8001d62:	3710      	adds	r7, #16
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	00000000 	.word	0x00000000
 8001d6c:	406fe000 	.word	0x406fe000
 8001d70:	00000000 	.word	0x00000000
 8001d74:	40f38800 	.word	0x40f38800

08001d78 <StartEngrave>:
=======
 8001da0:	b480      	push	{r7}
 8001da2:	b083      	sub	sp, #12
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	4603      	mov	r3, r0
 8001da8:	71fb      	strb	r3, [r7, #7]
    TIM2->CCR1 = power;  // Set duty cycle (0 = OFF, 255 = FULL POWER)
 8001daa:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001dae:	79fb      	ldrb	r3, [r7, #7]
 8001db0:	6353      	str	r3, [r2, #52]	@ 0x34
}
 8001db2:	bf00      	nop
 8001db4:	370c      	adds	r7, #12
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr
	...

08001dc0 <laserEngrave>:
>>>>>>> Stashed changes

// Function to start the motors and laser for engraving
void StartEngrave(Executable output){
 8001d78:	b084      	sub	sp, #16
 8001d7a:	b580      	push	{r7, lr}
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	f107 0c08 	add.w	ip, r7, #8
 8001d82:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

<<<<<<< Updated upstream
	  // Starts the PWM for the laser
	  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001d86:	2100      	movs	r1, #0
 8001d88:	4808      	ldr	r0, [pc, #32]	@ (8001dac <StartEngrave+0x34>)
 8001d8a:	f003 fa93 	bl	80052b4 <HAL_TIM_PWM_Start>
	  HAL_TIM_Base_Start_IT(&htim2);
 8001d8e:	4807      	ldr	r0, [pc, #28]	@ (8001dac <StartEngrave+0x34>)
 8001d90:	f003 f990 	bl	80050b4 <HAL_TIM_Base_Start_IT>

	  // Starts the timers for the motors
	  HAL_TIM_Base_Start_IT(&htim16);
 8001d94:	4806      	ldr	r0, [pc, #24]	@ (8001db0 <StartEngrave+0x38>)
 8001d96:	f003 f98d 	bl	80050b4 <HAL_TIM_Base_Start_IT>
	  HAL_TIM_Base_Start_IT(&htim17);
 8001d9a:	4806      	ldr	r0, [pc, #24]	@ (8001db4 <StartEngrave+0x3c>)
 8001d9c:	f003 f98a 	bl	80050b4 <HAL_TIM_Base_Start_IT>

}
 8001da0:	bf00      	nop
 8001da2:	46bd      	mov	sp, r7
 8001da4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001da8:	b004      	add	sp, #16
 8001daa:	4770      	bx	lr
 8001dac:	2000027c 	.word	0x2000027c
 8001db0:	20000314 	.word	0x20000314
 8001db4:	20000360 	.word	0x20000360

08001db8 <SetOutputs>:

// Function which sets all the parameters in order to engrave
void SetOutputs(Executable output){
 8001db8:	b084      	sub	sp, #16
 8001dba:	b580      	push	{r7, lr}
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	f107 0c08 	add.w	ip, r7, #8
 8001dc2:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	// Sets the Xend and Yend global variables so the motors know when to stop
	Xend = output.Xend;
 8001dc6:	68bb      	ldr	r3, [r7, #8]
 8001dc8:	4a28      	ldr	r2, [pc, #160]	@ (8001e6c <SetOutputs+0xb4>)
 8001dca:	6013      	str	r3, [r2, #0]
	Yend = output.Yend;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	4a28      	ldr	r2, [pc, #160]	@ (8001e70 <SetOutputs+0xb8>)
 8001dd0:	6013      	str	r3, [r2, #0]

	// Updates the X Direction variable and writes to the pin
	if (output.Xend > Xcurrent)
 8001dd2:	68ba      	ldr	r2, [r7, #8]
 8001dd4:	4b27      	ldr	r3, [pc, #156]	@ (8001e74 <SetOutputs+0xbc>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	dd08      	ble.n	8001dee <SetOutputs+0x36>
	{
		XDIR = 1;
 8001ddc:	4b26      	ldr	r3, [pc, #152]	@ (8001e78 <SetOutputs+0xc0>)
 8001dde:	2201      	movs	r2, #1
 8001de0:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(XDIR_GPIO_Port, XDIR_Pin, 1);
 8001de2:	2201      	movs	r2, #1
 8001de4:	2110      	movs	r1, #16
 8001de6:	4825      	ldr	r0, [pc, #148]	@ (8001e7c <SetOutputs+0xc4>)
 8001de8:	f000 ffd4 	bl	8002d94 <HAL_GPIO_WritePin>
 8001dec:	e00c      	b.n	8001e08 <SetOutputs+0x50>
	}
	else if (output.Xend < Xcurrent)
 8001dee:	68ba      	ldr	r2, [r7, #8]
 8001df0:	4b20      	ldr	r3, [pc, #128]	@ (8001e74 <SetOutputs+0xbc>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	429a      	cmp	r2, r3
 8001df6:	da07      	bge.n	8001e08 <SetOutputs+0x50>
	{
		XDIR = 0;
 8001df8:	4b1f      	ldr	r3, [pc, #124]	@ (8001e78 <SetOutputs+0xc0>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(XDIR_GPIO_Port, XDIR_Pin, 0);
 8001dfe:	2200      	movs	r2, #0
 8001e00:	2110      	movs	r1, #16
 8001e02:	481e      	ldr	r0, [pc, #120]	@ (8001e7c <SetOutputs+0xc4>)
 8001e04:	f000 ffc6 	bl	8002d94 <HAL_GPIO_WritePin>
	}

	// Updates the X Direction variable and writes to the pin
	if (output.Yend > Ycurrent)
 8001e08:	68fa      	ldr	r2, [r7, #12]
 8001e0a:	4b1d      	ldr	r3, [pc, #116]	@ (8001e80 <SetOutputs+0xc8>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	429a      	cmp	r2, r3
 8001e10:	dd0a      	ble.n	8001e28 <SetOutputs+0x70>
	{
		YDIR = 1;
 8001e12:	4b1c      	ldr	r3, [pc, #112]	@ (8001e84 <SetOutputs+0xcc>)
 8001e14:	2201      	movs	r2, #1
 8001e16:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(YDIR_GPIO_Port, YDIR_Pin, 1);
 8001e18:	2201      	movs	r2, #1
 8001e1a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001e1e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e22:	f000 ffb7 	bl	8002d94 <HAL_GPIO_WritePin>
 8001e26:	e00e      	b.n	8001e46 <SetOutputs+0x8e>
	}
	else if (output.Yend < Ycurrent)
 8001e28:	68fa      	ldr	r2, [r7, #12]
 8001e2a:	4b15      	ldr	r3, [pc, #84]	@ (8001e80 <SetOutputs+0xc8>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	429a      	cmp	r2, r3
 8001e30:	da09      	bge.n	8001e46 <SetOutputs+0x8e>
	{
		YDIR = 0;
 8001e32:	4b14      	ldr	r3, [pc, #80]	@ (8001e84 <SetOutputs+0xcc>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(YDIR_GPIO_Port, YDIR_Pin, 0);
 8001e38:	2200      	movs	r2, #0
 8001e3a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001e3e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e42:	f000 ffa7 	bl	8002d94 <HAL_GPIO_WritePin>
	}

	// Sets the prescaler values so the motors turn at the correct speed
	__HAL_TIM_SET_PRESCALER(&htim16, output.Xspeed);
 8001e46:	693a      	ldr	r2, [r7, #16]
 8001e48:	4b0f      	ldr	r3, [pc, #60]	@ (8001e88 <SetOutputs+0xd0>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	629a      	str	r2, [r3, #40]	@ 0x28
	__HAL_TIM_SET_PRESCALER(&htim17, output.Yspeed);
 8001e4e:	697a      	ldr	r2, [r7, #20]
 8001e50:	4b0e      	ldr	r3, [pc, #56]	@ (8001e8c <SetOutputs+0xd4>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	629a      	str	r2, [r3, #40]	@ 0x28

	// Sets the Laser Power to the correct value
	SetLaserPower(output.laserSpeed);
 8001e56:	69bb      	ldr	r3, [r7, #24]
 8001e58:	b2db      	uxtb	r3, r3
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f7ff ff58 	bl	8001d10 <SetLaserPower>
}
 8001e60:	bf00      	nop
 8001e62:	46bd      	mov	sp, r7
 8001e64:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001e68:	b004      	add	sp, #16
 8001e6a:	4770      	bx	lr
 8001e6c:	20000450 	.word	0x20000450
 8001e70:	20000454 	.word	0x20000454
 8001e74:	20000448 	.word	0x20000448
 8001e78:	20000000 	.word	0x20000000
 8001e7c:	48000400 	.word	0x48000400
 8001e80:	2000044c 	.word	0x2000044c
 8001e84:	20000004 	.word	0x20000004
 8001e88:	20000314 	.word	0x20000314
 8001e8c:	20000360 	.word	0x20000360

08001e90 <__io_putchar>:

PUTCHAR_PROTOTYPE
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b082      	sub	sp, #8
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *) &ch, 1, 0xFFFF);
 8001e98:	1d39      	adds	r1, r7, #4
 8001e9a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	4803      	ldr	r0, [pc, #12]	@ (8001eb0 <__io_putchar+0x20>)
 8001ea2:	f004 fbe1 	bl	8006668 <HAL_UART_Transmit>
	return ch;
 8001ea6:	687b      	ldr	r3, [r7, #4]
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	3708      	adds	r7, #8
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}
 8001eb0:	200003ac 	.word	0x200003ac

08001eb4 <LaserEngraveTask>:
This task has the highest priority of the tasks, since it is time constrained by the system, ie. if this tasks is blocked during execution, the motors might pause
Before the task begins, it waits for a semaphore that the previous engrave command is done and a queue message from the loadInstructionTask with information on the next engrave.
  */
/* USER CODE END Header_LaserEngraveTask */
void LaserEngraveTask(void *argument)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b08a      	sub	sp, #40	@ 0x28
 8001eb8:	af02      	add	r7, sp, #8
 8001eba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	InitiateMotors();
 8001ebc:	f7ff fc06 	bl	80016cc <InitiateMotors>

	while (setup != 0)
 8001ec0:	bf00      	nop
 8001ec2:	4b1c      	ldr	r3, [pc, #112]	@ (8001f34 <LaserEngraveTask+0x80>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d1fb      	bne.n	8001ec2 <LaserEngraveTask+0xe>
	{}
  // Ensures the enable pins are turned off to allow the motors to turn
  HAL_GPIO_WritePin(XEN_GPIO_Port, XEN_Pin,0);
 8001eca:	2200      	movs	r2, #0
 8001ecc:	2120      	movs	r1, #32
 8001ece:	481a      	ldr	r0, [pc, #104]	@ (8001f38 <LaserEngraveTask+0x84>)
 8001ed0:	f000 ff60 	bl	8002d94 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(YEN_GPIO_Port, YEN_Pin,0);
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001eda:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ede:	f000 ff59 	bl	8002d94 <HAL_GPIO_WritePin>

  // Declares the executable outside the for loop so that it doesn't have to be redeclared every time
  Executable newExecutable;

  // gives the loadInstruction Task a chance to load data from the SD card to fill the queue
  osDelay(100);
 8001ee2:	2064      	movs	r0, #100	@ 0x64
 8001ee4:	f008 fa3a 	bl	800a35c <osDelay>

  osSemaphoreRelease(runningHandle);
 8001ee8:	4b14      	ldr	r3, [pc, #80]	@ (8001f3c <LaserEngraveTask+0x88>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4618      	mov	r0, r3
 8001eee:	f008 fb2b 	bl	800a548 <osSemaphoreRelease>

  /* Infinite loop */
  for(;;)
  {
	  	  // This is where the program waits for the engrave to finish. The semaphore is initiated as fulfilled so it begins correctly.
		  osSemaphoreAcquire(runningHandle, osWaitForever);
 8001ef2:	4b12      	ldr	r3, [pc, #72]	@ (8001f3c <LaserEngraveTask+0x88>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f04f 31ff 	mov.w	r1, #4294967295
 8001efa:	4618      	mov	r0, r3
 8001efc:	f008 fad2 	bl	800a4a4 <osSemaphoreAcquire>

		  // Gets the executable struct from the queue with the next engrave
		  osMessageQueueGet(valuesQueueHandle, (Executable *) &newExecutable, 0, osWaitForever);
 8001f00:	4b0f      	ldr	r3, [pc, #60]	@ (8001f40 <LaserEngraveTask+0x8c>)
 8001f02:	6818      	ldr	r0, [r3, #0]
 8001f04:	f107 010c 	add.w	r1, r7, #12
 8001f08:	f04f 33ff 	mov.w	r3, #4294967295
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	f008 fc77 	bl	800a800 <osMessageQueueGet>

		  // Sets the outputs such as the DIR outputs, the motor speeds and the laser PWM duty cycle
		  SetOutputs(newExecutable);
 8001f12:	69fb      	ldr	r3, [r7, #28]
 8001f14:	9300      	str	r3, [sp, #0]
 8001f16:	f107 030c 	add.w	r3, r7, #12
 8001f1a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001f1c:	f7ff ff4c 	bl	8001db8 <SetOutputs>

		  // Begins the timers for the engrave
		  StartEngrave(newExecutable);
 8001f20:	69fb      	ldr	r3, [r7, #28]
 8001f22:	9300      	str	r3, [sp, #0]
 8001f24:	f107 030c 	add.w	r3, r7, #12
 8001f28:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001f2a:	f7ff ff25 	bl	8001d78 <StartEngrave>
		  osSemaphoreAcquire(runningHandle, osWaitForever);
 8001f2e:	bf00      	nop
 8001f30:	e7df      	b.n	8001ef2 <LaserEngraveTask+0x3e>
 8001f32:	bf00      	nop
 8001f34:	20000008 	.word	0x20000008
 8001f38:	48000400 	.word	0x48000400
 8001f3c:	20000440 	.word	0x20000440
 8001f40:	2000043c 	.word	0x2000043c

08001f44 <StartLoadInstruction>:
This is the LoadInstruction Task whose main purpose is to load information from the SD card, translate it into executable data, and add it to the queue
This task has a lower priority than the laser engrave task, since we can load information in the background while the motors are running rather than during the laser engrave task
*/
/* USER CODE END Header_StartLoadInstruction */
void StartLoadInstruction(void *argument)
{
 8001f44:	b5b0      	push	{r4, r5, r7, lr}
 8001f46:	b0a8      	sub	sp, #160	@ 0xa0
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	61f8      	str	r0, [r7, #28]
  /* USER CODE BEGIN StartLoadInstruction */
  /* Infinite loop */
	while (setup != 0)
 8001f4c:	bf00      	nop
 8001f4e:	4b1a      	ldr	r3, [pc, #104]	@ (8001fb8 <StartLoadInstruction+0x74>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d1fb      	bne.n	8001f4e <StartLoadInstruction+0xa>
	Executable newExecutable;	// int array with variables for us to execute

  for(;;)
  {
	  // reads a line from the SD card and saves it in readBuf
	  rres = f_gets((TCHAR*)readBuf, 100, &fil);
 8001f56:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001f5a:	4a18      	ldr	r2, [pc, #96]	@ (8001fbc <StartLoadInstruction+0x78>)
 8001f5c:	2164      	movs	r1, #100	@ 0x64
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f007 fffb 	bl	8009f5a <f_gets>
 8001f64:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c

	  // if there is data sent, it calls the GcommandParse function which computes the values we need to save in the executable struct
	  if(rres != 0) {
 8001f68:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d00e      	beq.n	8001f8e <StartLoadInstruction+0x4a>
		newExecutable = GCommandParse((TCHAR*)readBuf);
 8001f70:	463b      	mov	r3, r7
 8001f72:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8001f76:	4611      	mov	r1, r2
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f7ff fca7 	bl	80018cc <GCommandParse>
 8001f7e:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 8001f82:	463d      	mov	r5, r7
 8001f84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f88:	682b      	ldr	r3, [r5, #0]
 8001f8a:	6023      	str	r3, [r4, #0]
 8001f8c:	e009      	b.n	8001fa2 <StartLoadInstruction+0x5e>

	  // if f_get returns 0, the program ends and enters a while loop
	  } else {
		f_close(&fil);	// closes the SD card file
 8001f8e:	480b      	ldr	r0, [pc, #44]	@ (8001fbc <StartLoadInstruction+0x78>)
 8001f90:	f007 ffb4 	bl	8009efc <f_close>
		f_mount(NULL, "", 0);	// un mounts the SD card
 8001f94:	2200      	movs	r2, #0
 8001f96:	490a      	ldr	r1, [pc, #40]	@ (8001fc0 <StartLoadInstruction+0x7c>)
 8001f98:	2000      	movs	r0, #0
 8001f9a:	f007 fb93 	bl	80096c4 <f_mount>
		while(1){}		// loops forever because the program has ended
 8001f9e:	bf00      	nop
 8001fa0:	e7fd      	b.n	8001f9e <StartLoadInstruction+0x5a>
	  }

	  // Once we have the executable struct, we save the address to the Queue
	  osMessageQueuePut(valuesQueueHandle, &newExecutable, 0, osWaitForever);
 8001fa2:	4b08      	ldr	r3, [pc, #32]	@ (8001fc4 <StartLoadInstruction+0x80>)
 8001fa4:	6818      	ldr	r0, [r3, #0]
 8001fa6:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8001faa:	f04f 33ff 	mov.w	r3, #4294967295
 8001fae:	2200      	movs	r2, #0
 8001fb0:	f008 fbc6 	bl	800a740 <osMessageQueuePut>
	  rres = f_gets((TCHAR*)readBuf, 100, &fil);
 8001fb4:	e7cf      	b.n	8001f56 <StartLoadInstruction+0x12>
 8001fb6:	bf00      	nop
 8001fb8:	20000008 	.word	0x20000008
 8001fbc:	2000069c 	.word	0x2000069c
 8001fc0:	08010efc 	.word	0x08010efc
 8001fc4:	2000043c 	.word	0x2000043c

08001fc8 <HAL_TIM_PeriodElapsedCallback>:
=======
void laserEngrave(int Xdistance, int Ydistance)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b086      	sub	sp, #24
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
 8001dc8:	6039      	str	r1, [r7, #0]
	int Xspeed = 65535;
 8001dca:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001dce:	617b      	str	r3, [r7, #20]
	int Yspeed = 65535;
 8001dd0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001dd4:	613b      	str	r3, [r7, #16]

	float totalDistance = sqrt((Xdistance * Xdistance) + (Ydistance * Ydistance));
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	fb03 f203 	mul.w	r2, r3, r3
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	fb03 f303 	mul.w	r3, r3, r3
 8001de2:	4413      	add	r3, r2
 8001de4:	4618      	mov	r0, r3
 8001de6:	f7fe fbad 	bl	8000544 <__aeabi_i2d>
 8001dea:	4602      	mov	r2, r0
 8001dec:	460b      	mov	r3, r1
 8001dee:	ec43 2b10 	vmov	d0, r2, r3
 8001df2:	f00b fbb3 	bl	800d55c <sqrt>
 8001df6:	ec53 2b10 	vmov	r2, r3, d0
 8001dfa:	4610      	mov	r0, r2
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	f7fe ff03 	bl	8000c08 <__aeabi_d2f>
 8001e02:	4603      	mov	r3, r0
 8001e04:	60fb      	str	r3, [r7, #12]
	if (Xdistance != 0)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d026      	beq.n	8001e5a <laserEngrave+0x9a>
	{
		Xspeed = 162712.482 / ((abs(Xdistance) / totalDistance) * feed);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	bfb8      	it	lt
 8001e12:	425b      	neglt	r3, r3
 8001e14:	ee07 3a90 	vmov	s15, r3
 8001e18:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001e1c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001e20:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001e24:	4b38      	ldr	r3, [pc, #224]	@ (8001f08 <laserEngrave+0x148>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	ee07 3a90 	vmov	s15, r3
 8001e2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e34:	ee17 0a90 	vmov	r0, s15
 8001e38:	f7fe fb96 	bl	8000568 <__aeabi_f2d>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	460b      	mov	r3, r1
 8001e40:	a12f      	add	r1, pc, #188	@ (adr r1, 8001f00 <laserEngrave+0x140>)
 8001e42:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001e46:	f7fe fd11 	bl	800086c <__aeabi_ddiv>
 8001e4a:	4602      	mov	r2, r0
 8001e4c:	460b      	mov	r3, r1
 8001e4e:	4610      	mov	r0, r2
 8001e50:	4619      	mov	r1, r3
 8001e52:	f7fe fe91 	bl	8000b78 <__aeabi_d2iz>
 8001e56:	4603      	mov	r3, r0
 8001e58:	617b      	str	r3, [r7, #20]
	}
	if (Ydistance != 0)
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d026      	beq.n	8001eae <laserEngrave+0xee>
	{
		Yspeed = 162712.482 / ((abs(Ydistance) / totalDistance) * feed);
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	bfb8      	it	lt
 8001e66:	425b      	neglt	r3, r3
 8001e68:	ee07 3a90 	vmov	s15, r3
 8001e6c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001e70:	edd7 7a03 	vldr	s15, [r7, #12]
 8001e74:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001e78:	4b23      	ldr	r3, [pc, #140]	@ (8001f08 <laserEngrave+0x148>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	ee07 3a90 	vmov	s15, r3
 8001e80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e88:	ee17 0a90 	vmov	r0, s15
 8001e8c:	f7fe fb6c 	bl	8000568 <__aeabi_f2d>
 8001e90:	4602      	mov	r2, r0
 8001e92:	460b      	mov	r3, r1
 8001e94:	a11a      	add	r1, pc, #104	@ (adr r1, 8001f00 <laserEngrave+0x140>)
 8001e96:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001e9a:	f7fe fce7 	bl	800086c <__aeabi_ddiv>
 8001e9e:	4602      	mov	r2, r0
 8001ea0:	460b      	mov	r3, r1
 8001ea2:	4610      	mov	r0, r2
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	f7fe fe67 	bl	8000b78 <__aeabi_d2iz>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	613b      	str	r3, [r7, #16]
	}

	__HAL_TIM_SET_PRESCALER(&htim16, Xspeed);
 8001eae:	4b17      	ldr	r3, [pc, #92]	@ (8001f0c <laserEngrave+0x14c>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	697a      	ldr	r2, [r7, #20]
 8001eb4:	629a      	str	r2, [r3, #40]	@ 0x28
	__HAL_TIM_SET_PRESCALER(&htim17, Yspeed);
 8001eb6:	4b16      	ldr	r3, [pc, #88]	@ (8001f10 <laserEngrave+0x150>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	693a      	ldr	r2, [r7, #16]
 8001ebc:	629a      	str	r2, [r3, #40]	@ 0x28

	// Starts the motor timers
	  HAL_TIM_Base_Start_IT(&htim16);
 8001ebe:	4813      	ldr	r0, [pc, #76]	@ (8001f0c <laserEngrave+0x14c>)
 8001ec0:	f003 fd8c 	bl	80059dc <HAL_TIM_Base_Start_IT>
	  HAL_TIM_Base_Start_IT(&htim17);
 8001ec4:	4812      	ldr	r0, [pc, #72]	@ (8001f10 <laserEngrave+0x150>)
 8001ec6:	f003 fd89 	bl	80059dc <HAL_TIM_Base_Start_IT>

      //  start  pwm
	  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1); // start PWM on Timer2’s Channel 1
 8001eca:	2100      	movs	r1, #0
 8001ecc:	4811      	ldr	r0, [pc, #68]	@ (8001f14 <laserEngrave+0x154>)
 8001ece:	f003 fe7b 	bl	8005bc8 <HAL_TIM_PWM_Start>

	  while(((Xcurrent == Xend) && (Ycurrent == Yend)) == 0){}	// Waits for the motors to be done before proceeding
 8001ed2:	bf00      	nop
 8001ed4:	4b10      	ldr	r3, [pc, #64]	@ (8001f18 <laserEngrave+0x158>)
 8001ed6:	681a      	ldr	r2, [r3, #0]
 8001ed8:	4b10      	ldr	r3, [pc, #64]	@ (8001f1c <laserEngrave+0x15c>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	429a      	cmp	r2, r3
 8001ede:	d107      	bne.n	8001ef0 <laserEngrave+0x130>
 8001ee0:	4b0f      	ldr	r3, [pc, #60]	@ (8001f20 <laserEngrave+0x160>)
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	4b0f      	ldr	r3, [pc, #60]	@ (8001f24 <laserEngrave+0x164>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	d101      	bne.n	8001ef0 <laserEngrave+0x130>
 8001eec:	2301      	movs	r3, #1
 8001eee:	e000      	b.n	8001ef2 <laserEngrave+0x132>
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d0ee      	beq.n	8001ed4 <laserEngrave+0x114>
}
 8001ef6:	bf00      	nop
 8001ef8:	bf00      	nop
 8001efa:	3718      	adds	r7, #24
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	db22d0e5 	.word	0xdb22d0e5
 8001f04:	4103dcc3 	.word	0x4103dcc3
 8001f08:	200004ac 	.word	0x200004ac
 8001f0c:	2000037c 	.word	0x2000037c
 8001f10:	200003c8 	.word	0x200003c8
 8001f14:	20000330 	.word	0x20000330
 8001f18:	2000049c 	.word	0x2000049c
 8001f1c:	200004a4 	.word	0x200004a4
 8001f20:	200004a0 	.word	0x200004a0
 8001f24:	200004a8 	.word	0x200004a8

08001f28 <__io_putchar>:

PUTCHAR_PROTOTYPE
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b082      	sub	sp, #8
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *) &ch, 1, 0xFFFF);
 8001f30:	1d39      	adds	r1, r7, #4
 8001f32:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001f36:	2201      	movs	r2, #1
 8001f38:	4803      	ldr	r0, [pc, #12]	@ (8001f48 <__io_putchar+0x20>)
 8001f3a:	f004 fe25 	bl	8006b88 <HAL_UART_Transmit>
	return ch;
 8001f3e:	687b      	ldr	r3, [r7, #4]
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	3708      	adds	r7, #8
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	20000414 	.word	0x20000414

08001f4c <HAL_TIM_PeriodElapsedCallback>:
>>>>>>> Stashed changes
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b082      	sub	sp, #8
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

	if (htim == &htim16)	// X motor timer
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	4a4a      	ldr	r2, [pc, #296]	@ (80020fc <HAL_TIM_PeriodElapsedCallback+0x134>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d141      	bne.n	800205c <HAL_TIM_PeriodElapsedCallback+0x94>
	{

		if (Xcurrent != Xend)	// Evaluates if the X motor has arrived in it's position
 8001fd8:	4b49      	ldr	r3, [pc, #292]	@ (8002100 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8001fda:	681a      	ldr	r2, [r3, #0]
 8001fdc:	4b49      	ldr	r3, [pc, #292]	@ (8002104 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	429a      	cmp	r2, r3
 8001fe2:	d01e      	beq.n	8002022 <HAL_TIM_PeriodElapsedCallback+0x5a>
		{

			HAL_GPIO_TogglePin(XPUL_GPIO_Port, XPUL_Pin);	// Toggles the XPUL pin
 8001fe4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001fe8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001fec:	f000 feea 	bl	8002dc4 <HAL_GPIO_TogglePin>
=======
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b082      	sub	sp, #8
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

	if (htim == &htim16)	// X motor timer
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	4a30      	ldr	r2, [pc, #192]	@ (8002018 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d127      	bne.n	8001fac <HAL_TIM_PeriodElapsedCallback+0x60>
	{

		if (Xcurrent != Xend)	// Evaluates if the X motor has arrived in it's position
 8001f5c:	4b2f      	ldr	r3, [pc, #188]	@ (800201c <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8001f5e:	681a      	ldr	r2, [r3, #0]
 8001f60:	4b2f      	ldr	r3, [pc, #188]	@ (8002020 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	429a      	cmp	r2, r3
 8001f66:	d01e      	beq.n	8001fa6 <HAL_TIM_PeriodElapsedCallback+0x5a>
		{

			HAL_GPIO_TogglePin(XPUL_GPIO_Port, XPUL_Pin);	// Toggles the XPUL pin
 8001f68:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001f6c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f70:	f000 ff56 	bl	8002e20 <HAL_GPIO_TogglePin>
>>>>>>> Stashed changes

			// Increments the Xcurrent value if XDIR is positive and decrements if Xcurrent value is negative
			// only increments every other cycle
			if (!HAL_GPIO_ReadPin(XPUL_GPIO_Port, XPUL_Pin))
<<<<<<< Updated upstream
 8001ff0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001ff4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ff8:	f000 feb4 	bl	8002d64 <HAL_GPIO_ReadPin>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d12c      	bne.n	800205c <HAL_TIM_PeriodElapsedCallback+0x94>
			{
				if (XDIR == 1)
 8002002:	4b41      	ldr	r3, [pc, #260]	@ (8002108 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	2b01      	cmp	r3, #1
 8002008:	d105      	bne.n	8002016 <HAL_TIM_PeriodElapsedCallback+0x4e>
				{
					Xcurrent++;
 800200a:	4b3d      	ldr	r3, [pc, #244]	@ (8002100 <HAL_TIM_PeriodElapsedCallback+0x138>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	3301      	adds	r3, #1
 8002010:	4a3b      	ldr	r2, [pc, #236]	@ (8002100 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8002012:	6013      	str	r3, [r2, #0]
 8002014:	e022      	b.n	800205c <HAL_TIM_PeriodElapsedCallback+0x94>
=======
 8001f74:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001f78:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f7c:	f000 ff20 	bl	8002dc0 <HAL_GPIO_ReadPin>
 8001f80:	4603      	mov	r3, r0
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d112      	bne.n	8001fac <HAL_TIM_PeriodElapsedCallback+0x60>
			{
				if (XDIR == 1)
 8001f86:	4b27      	ldr	r3, [pc, #156]	@ (8002024 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	2b01      	cmp	r3, #1
 8001f8c:	d105      	bne.n	8001f9a <HAL_TIM_PeriodElapsedCallback+0x4e>
				{
					Xcurrent++;
 8001f8e:	4b23      	ldr	r3, [pc, #140]	@ (800201c <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	3301      	adds	r3, #1
 8001f94:	4a21      	ldr	r2, [pc, #132]	@ (800201c <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8001f96:	6013      	str	r3, [r2, #0]
 8001f98:	e008      	b.n	8001fac <HAL_TIM_PeriodElapsedCallback+0x60>
>>>>>>> Stashed changes
				}
				else
				{
					Xcurrent--;
<<<<<<< Updated upstream
 8002016:	4b3a      	ldr	r3, [pc, #232]	@ (8002100 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	3b01      	subs	r3, #1
 800201c:	4a38      	ldr	r2, [pc, #224]	@ (8002100 <HAL_TIM_PeriodElapsedCallback+0x138>)
 800201e:	6013      	str	r3, [r2, #0]
 8002020:	e01c      	b.n	800205c <HAL_TIM_PeriodElapsedCallback+0x94>
=======
 8001f9a:	4b20      	ldr	r3, [pc, #128]	@ (800201c <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	3b01      	subs	r3, #1
 8001fa0:	4a1e      	ldr	r2, [pc, #120]	@ (800201c <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8001fa2:	6013      	str	r3, [r2, #0]
 8001fa4:	e002      	b.n	8001fac <HAL_TIM_PeriodElapsedCallback+0x60>
>>>>>>> Stashed changes
				}
			}
		}
		else
		{
			HAL_TIM_Base_Stop_IT(&htim16);	// Once the X motor arrives to it's final position, this stops the timer
<<<<<<< Updated upstream
 8002022:	4836      	ldr	r0, [pc, #216]	@ (80020fc <HAL_TIM_PeriodElapsedCallback+0x134>)
 8002024:	f003 f8b6 	bl	8005194 <HAL_TIM_Base_Stop_IT>

			// if the X motor and Y motor have both arrived at their destinations
			if ((Ycurrent == Yend))
 8002028:	4b38      	ldr	r3, [pc, #224]	@ (800210c <HAL_TIM_PeriodElapsedCallback+0x144>)
 800202a:	681a      	ldr	r2, [r3, #0]
 800202c:	4b38      	ldr	r3, [pc, #224]	@ (8002110 <HAL_TIM_PeriodElapsedCallback+0x148>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	429a      	cmp	r2, r3
 8002032:	d113      	bne.n	800205c <HAL_TIM_PeriodElapsedCallback+0x94>
			{

				// stops the laser PWM
				HAL_TIM_Base_Stop_IT(&htim2);
 8002034:	4837      	ldr	r0, [pc, #220]	@ (8002114 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8002036:	f003 f8ad 	bl	8005194 <HAL_TIM_Base_Stop_IT>
				HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 800203a:	2100      	movs	r1, #0
 800203c:	4835      	ldr	r0, [pc, #212]	@ (8002114 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 800203e:	f003 fa3f 	bl	80054c0 <HAL_TIM_PWM_Stop>

				// Gives the semaphore so the program can continue
				if (osSemaphoreGetCount(runningHandle) == 0)
 8002042:	4b35      	ldr	r3, [pc, #212]	@ (8002118 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4618      	mov	r0, r3
 8002048:	f008 fac2 	bl	800a5d0 <osSemaphoreGetCount>
 800204c:	4603      	mov	r3, r0
 800204e:	2b00      	cmp	r3, #0
 8002050:	d104      	bne.n	800205c <HAL_TIM_PeriodElapsedCallback+0x94>
					osSemaphoreRelease(runningHandle);
 8002052:	4b31      	ldr	r3, [pc, #196]	@ (8002118 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4618      	mov	r0, r3
 8002058:	f008 fa76 	bl	800a548 <osSemaphoreRelease>
			}
=======
 8001fa6:	481c      	ldr	r0, [pc, #112]	@ (8002018 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001fa8:	f003 fd88 	bl	8005abc <HAL_TIM_Base_Stop_IT>
>>>>>>> Stashed changes
		}
	}


	if (htim == &htim17)	// Y motor timer
<<<<<<< Updated upstream
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	4a2f      	ldr	r2, [pc, #188]	@ (800211c <HAL_TIM_PeriodElapsedCallback+0x154>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d13f      	bne.n	80020e4 <HAL_TIM_PeriodElapsedCallback+0x11c>
	{

		if (Ycurrent != Yend)	// Evaluates if the Y motor has arrived in it's position
 8002064:	4b29      	ldr	r3, [pc, #164]	@ (800210c <HAL_TIM_PeriodElapsedCallback+0x144>)
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	4b29      	ldr	r3, [pc, #164]	@ (8002110 <HAL_TIM_PeriodElapsedCallback+0x148>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	429a      	cmp	r2, r3
 800206e:	d01c      	beq.n	80020aa <HAL_TIM_PeriodElapsedCallback+0xe2>
		{

			HAL_GPIO_TogglePin(YPUL_GPIO_Port, YPUL_Pin);	// Toggles the YPUL pin
 8002070:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002074:	482a      	ldr	r0, [pc, #168]	@ (8002120 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8002076:	f000 fea5 	bl	8002dc4 <HAL_GPIO_TogglePin>

			// Increments the Ycurrent value if YDIR is positive and decrements if Ycurrent value is negative
			if (!HAL_GPIO_ReadPin(YPUL_GPIO_Port, YPUL_Pin))
 800207a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800207e:	4828      	ldr	r0, [pc, #160]	@ (8002120 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8002080:	f000 fe70 	bl	8002d64 <HAL_GPIO_ReadPin>
 8002084:	4603      	mov	r3, r0
 8002086:	2b00      	cmp	r3, #0
 8002088:	d12c      	bne.n	80020e4 <HAL_TIM_PeriodElapsedCallback+0x11c>
			{
				if (YDIR == 1)
 800208a:	4b26      	ldr	r3, [pc, #152]	@ (8002124 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	2b01      	cmp	r3, #1
 8002090:	d105      	bne.n	800209e <HAL_TIM_PeriodElapsedCallback+0xd6>
				{
					Ycurrent++;
 8002092:	4b1e      	ldr	r3, [pc, #120]	@ (800210c <HAL_TIM_PeriodElapsedCallback+0x144>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	3301      	adds	r3, #1
 8002098:	4a1c      	ldr	r2, [pc, #112]	@ (800210c <HAL_TIM_PeriodElapsedCallback+0x144>)
 800209a:	6013      	str	r3, [r2, #0]
 800209c:	e022      	b.n	80020e4 <HAL_TIM_PeriodElapsedCallback+0x11c>
=======
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	4a1e      	ldr	r2, [pc, #120]	@ (8002028 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d125      	bne.n	8002000 <HAL_TIM_PeriodElapsedCallback+0xb4>
	{

		if (Ycurrent != Yend)	// Evaluates if the Y motor has arrived in it's position
 8001fb4:	4b1d      	ldr	r3, [pc, #116]	@ (800202c <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001fb6:	681a      	ldr	r2, [r3, #0]
 8001fb8:	4b1d      	ldr	r3, [pc, #116]	@ (8002030 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	d01c      	beq.n	8001ffa <HAL_TIM_PeriodElapsedCallback+0xae>
		{

			HAL_GPIO_TogglePin(YPUL_GPIO_Port, YPUL_Pin);	// Toggles the YPUL pin
 8001fc0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001fc4:	481b      	ldr	r0, [pc, #108]	@ (8002034 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8001fc6:	f000 ff2b 	bl	8002e20 <HAL_GPIO_TogglePin>

			// Increments the Ycurrent value if YDIR is positive and decrements if Ycurrent value is negative
			if (!HAL_GPIO_ReadPin(YPUL_GPIO_Port, YPUL_Pin))
 8001fca:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001fce:	4819      	ldr	r0, [pc, #100]	@ (8002034 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8001fd0:	f000 fef6 	bl	8002dc0 <HAL_GPIO_ReadPin>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d112      	bne.n	8002000 <HAL_TIM_PeriodElapsedCallback+0xb4>
			{
				if (YDIR == 1)
 8001fda:	4b17      	ldr	r3, [pc, #92]	@ (8002038 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d105      	bne.n	8001fee <HAL_TIM_PeriodElapsedCallback+0xa2>
				{
					Ycurrent++;
 8001fe2:	4b12      	ldr	r3, [pc, #72]	@ (800202c <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	3301      	adds	r3, #1
 8001fe8:	4a10      	ldr	r2, [pc, #64]	@ (800202c <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001fea:	6013      	str	r3, [r2, #0]
 8001fec:	e008      	b.n	8002000 <HAL_TIM_PeriodElapsedCallback+0xb4>
>>>>>>> Stashed changes
				}
				else
				{
					Ycurrent--;
<<<<<<< Updated upstream
 800209e:	4b1b      	ldr	r3, [pc, #108]	@ (800210c <HAL_TIM_PeriodElapsedCallback+0x144>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	3b01      	subs	r3, #1
 80020a4:	4a19      	ldr	r2, [pc, #100]	@ (800210c <HAL_TIM_PeriodElapsedCallback+0x144>)
 80020a6:	6013      	str	r3, [r2, #0]
 80020a8:	e01c      	b.n	80020e4 <HAL_TIM_PeriodElapsedCallback+0x11c>
=======
 8001fee:	4b0f      	ldr	r3, [pc, #60]	@ (800202c <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	3b01      	subs	r3, #1
 8001ff4:	4a0d      	ldr	r2, [pc, #52]	@ (800202c <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001ff6:	6013      	str	r3, [r2, #0]
 8001ff8:	e002      	b.n	8002000 <HAL_TIM_PeriodElapsedCallback+0xb4>
>>>>>>> Stashed changes
				}
			}
		}
		else
		{
		  HAL_TIM_Base_Stop_IT(&htim17);	// Once the Y motor arrives to it's final position, this stops the timer
<<<<<<< Updated upstream
 80020aa:	481c      	ldr	r0, [pc, #112]	@ (800211c <HAL_TIM_PeriodElapsedCallback+0x154>)
 80020ac:	f003 f872 	bl	8005194 <HAL_TIM_Base_Stop_IT>

		  // if the X motor and Y motor have both arrived at their destinations
		  if (Xcurrent == Xend)
 80020b0:	4b13      	ldr	r3, [pc, #76]	@ (8002100 <HAL_TIM_PeriodElapsedCallback+0x138>)
 80020b2:	681a      	ldr	r2, [r3, #0]
 80020b4:	4b13      	ldr	r3, [pc, #76]	@ (8002104 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	429a      	cmp	r2, r3
 80020ba:	d113      	bne.n	80020e4 <HAL_TIM_PeriodElapsedCallback+0x11c>
		  {
			  // stops the laser PWM
			  HAL_TIM_Base_Stop_IT(&htim2);
 80020bc:	4815      	ldr	r0, [pc, #84]	@ (8002114 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 80020be:	f003 f869 	bl	8005194 <HAL_TIM_Base_Stop_IT>
			  HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 80020c2:	2100      	movs	r1, #0
 80020c4:	4813      	ldr	r0, [pc, #76]	@ (8002114 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 80020c6:	f003 f9fb 	bl	80054c0 <HAL_TIM_PWM_Stop>
				// Gives the semaphore so the program can continue
			  if (osSemaphoreGetCount(runningHandle) == 0)
 80020ca:	4b13      	ldr	r3, [pc, #76]	@ (8002118 <HAL_TIM_PeriodElapsedCallback+0x150>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4618      	mov	r0, r3
 80020d0:	f008 fa7e 	bl	800a5d0 <osSemaphoreGetCount>
 80020d4:	4603      	mov	r3, r0
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d104      	bne.n	80020e4 <HAL_TIM_PeriodElapsedCallback+0x11c>
				  osSemaphoreRelease(runningHandle);
 80020da:	4b0f      	ldr	r3, [pc, #60]	@ (8002118 <HAL_TIM_PeriodElapsedCallback+0x150>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4618      	mov	r0, r3
 80020e0:	f008 fa32 	bl	800a548 <osSemaphoreRelease>
		  }
		}
	}
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a0f      	ldr	r2, [pc, #60]	@ (8002128 <HAL_TIM_PeriodElapsedCallback+0x160>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d101      	bne.n	80020f2 <HAL_TIM_PeriodElapsedCallback+0x12a>
  {
    HAL_IncTick();
 80020ee:	f000 fb69 	bl	80027c4 <HAL_IncTick>
=======
 8001ffa:	480b      	ldr	r0, [pc, #44]	@ (8002028 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8001ffc:	f003 fd5e 	bl	8005abc <HAL_TIM_Base_Stop_IT>
		}
	}
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a0d      	ldr	r2, [pc, #52]	@ (800203c <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d101      	bne.n	800200e <HAL_TIM_PeriodElapsedCallback+0xc2>
    HAL_IncTick();
 800200a:	f000 fc09 	bl	8002820 <HAL_IncTick>
>>>>>>> Stashed changes
  }
  /* USER CODE BEGIN Callback 1 */
  /* USER CODE END Callback 1 */
}
<<<<<<< Updated upstream
 80020f2:	bf00      	nop
 80020f4:	3708      	adds	r7, #8
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	20000314 	.word	0x20000314
 8002100:	20000448 	.word	0x20000448
 8002104:	20000450 	.word	0x20000450
 8002108:	20000000 	.word	0x20000000
 800210c:	2000044c 	.word	0x2000044c
 8002110:	20000454 	.word	0x20000454
 8002114:	2000027c 	.word	0x2000027c
 8002118:	20000440 	.word	0x20000440
 800211c:	20000360 	.word	0x20000360
 8002120:	48000400 	.word	0x48000400
 8002124:	20000004 	.word	0x20000004
 8002128:	40001000 	.word	0x40001000

0800212c <Error_Handler>:
=======
 800200e:	bf00      	nop
 8002010:	3708      	adds	r7, #8
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	2000037c 	.word	0x2000037c
 800201c:	2000049c 	.word	0x2000049c
 8002020:	200004a4 	.word	0x200004a4
 8002024:	20000004 	.word	0x20000004
 8002028:	200003c8 	.word	0x200003c8
 800202c:	200004a0 	.word	0x200004a0
 8002030:	200004a8 	.word	0x200004a8
 8002034:	48000400 	.word	0x48000400
 8002038:	20000008 	.word	0x20000008
 800203c:	40000400 	.word	0x40000400

08002040 <Error_Handler>:
>>>>>>> Stashed changes
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
<<<<<<< Updated upstream
 800212c:	b480      	push	{r7}
 800212e:	af00      	add	r7, sp, #0
=======
 8002040:	b480      	push	{r7}
 8002042:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
<<<<<<< Updated upstream
 8002130:	b672      	cpsid	i
}
 8002132:	bf00      	nop
=======
 8002044:	b672      	cpsid	i
}
 8002046:	bf00      	nop
>>>>>>> Stashed changes
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
<<<<<<< Updated upstream
 8002134:	bf00      	nop
 8002136:	e7fd      	b.n	8002134 <Error_Handler+0x8>

08002138 <HAL_MspInit>:
=======
 8002048:	bf00      	nop
 800204a:	e7fd      	b.n	8002048 <Error_Handler+0x8>

0800204c <HAL_MspInit>:
>>>>>>> Stashed changes
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
<<<<<<< Updated upstream
 8002138:	b580      	push	{r7, lr}
 800213a:	b082      	sub	sp, #8
 800213c:	af00      	add	r7, sp, #0
=======
 800204c:	b480      	push	{r7}
 800204e:	b083      	sub	sp, #12
 8002050:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
<<<<<<< Updated upstream
 800213e:	4b11      	ldr	r3, [pc, #68]	@ (8002184 <HAL_MspInit+0x4c>)
 8002140:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002142:	4a10      	ldr	r2, [pc, #64]	@ (8002184 <HAL_MspInit+0x4c>)
 8002144:	f043 0301 	orr.w	r3, r3, #1
 8002148:	6613      	str	r3, [r2, #96]	@ 0x60
 800214a:	4b0e      	ldr	r3, [pc, #56]	@ (8002184 <HAL_MspInit+0x4c>)
 800214c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800214e:	f003 0301 	and.w	r3, r3, #1
 8002152:	607b      	str	r3, [r7, #4]
 8002154:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002156:	4b0b      	ldr	r3, [pc, #44]	@ (8002184 <HAL_MspInit+0x4c>)
 8002158:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800215a:	4a0a      	ldr	r2, [pc, #40]	@ (8002184 <HAL_MspInit+0x4c>)
 800215c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002160:	6593      	str	r3, [r2, #88]	@ 0x58
 8002162:	4b08      	ldr	r3, [pc, #32]	@ (8002184 <HAL_MspInit+0x4c>)
 8002164:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002166:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800216a:	603b      	str	r3, [r7, #0]
 800216c:	683b      	ldr	r3, [r7, #0]

=======
 8002052:	4b0f      	ldr	r3, [pc, #60]	@ (8002090 <HAL_MspInit+0x44>)
 8002054:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002056:	4a0e      	ldr	r2, [pc, #56]	@ (8002090 <HAL_MspInit+0x44>)
 8002058:	f043 0301 	orr.w	r3, r3, #1
 800205c:	6613      	str	r3, [r2, #96]	@ 0x60
 800205e:	4b0c      	ldr	r3, [pc, #48]	@ (8002090 <HAL_MspInit+0x44>)
 8002060:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002062:	f003 0301 	and.w	r3, r3, #1
 8002066:	607b      	str	r3, [r7, #4]
 8002068:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800206a:	4b09      	ldr	r3, [pc, #36]	@ (8002090 <HAL_MspInit+0x44>)
 800206c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800206e:	4a08      	ldr	r2, [pc, #32]	@ (8002090 <HAL_MspInit+0x44>)
 8002070:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002074:	6593      	str	r3, [r2, #88]	@ 0x58
 8002076:	4b06      	ldr	r3, [pc, #24]	@ (8002090 <HAL_MspInit+0x44>)
 8002078:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800207a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800207e:	603b      	str	r3, [r7, #0]
 8002080:	683b      	ldr	r3, [r7, #0]
>>>>>>> Stashed changes
  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800216e:	2200      	movs	r2, #0
 8002170:	210f      	movs	r1, #15
 8002172:	f06f 0001 	mvn.w	r0, #1
 8002176:	f000 fc21 	bl	80029bc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
<<<<<<< Updated upstream
 800217a:	bf00      	nop
 800217c:	3708      	adds	r7, #8
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	40021000 	.word	0x40021000

08002188 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b08a      	sub	sp, #40	@ 0x28
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002190:	f107 0314 	add.w	r3, r7, #20
 8002194:	2200      	movs	r2, #0
 8002196:	601a      	str	r2, [r3, #0]
 8002198:	605a      	str	r2, [r3, #4]
 800219a:	609a      	str	r2, [r3, #8]
 800219c:	60da      	str	r2, [r3, #12]
 800219e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a17      	ldr	r2, [pc, #92]	@ (8002204 <HAL_SPI_MspInit+0x7c>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d128      	bne.n	80021fc <HAL_SPI_MspInit+0x74>
=======
 8002082:	bf00      	nop
 8002084:	370c      	adds	r7, #12
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr
 800208e:	bf00      	nop
 8002090:	40021000 	.word	0x40021000

08002094 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b0ae      	sub	sp, #184	@ 0xb8
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800209c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80020a0:	2200      	movs	r2, #0
 80020a2:	601a      	str	r2, [r3, #0]
 80020a4:	605a      	str	r2, [r3, #4]
 80020a6:	609a      	str	r2, [r3, #8]
 80020a8:	60da      	str	r2, [r3, #12]
 80020aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80020ac:	f107 031c 	add.w	r3, r7, #28
 80020b0:	2288      	movs	r2, #136	@ 0x88
 80020b2:	2100      	movs	r1, #0
 80020b4:	4618      	mov	r0, r3
 80020b6:	f009 f9b3 	bl	800b420 <memset>
  if(hi2c->Instance==I2C1)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4a42      	ldr	r2, [pc, #264]	@ (80021c8 <HAL_I2C_MspInit+0x134>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d13c      	bne.n	800213e <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80020c4:	2340      	movs	r3, #64	@ 0x40
 80020c6:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80020c8:	2300      	movs	r3, #0
 80020ca:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80020cc:	f107 031c 	add.w	r3, r7, #28
 80020d0:	4618      	mov	r0, r3
 80020d2:	f002 f9d3 	bl	800447c <HAL_RCCEx_PeriphCLKConfig>
 80020d6:	4603      	mov	r3, r0
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d001      	beq.n	80020e0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80020dc:	f7ff ffb0 	bl	8002040 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020e0:	4b3a      	ldr	r3, [pc, #232]	@ (80021cc <HAL_I2C_MspInit+0x138>)
 80020e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020e4:	4a39      	ldr	r2, [pc, #228]	@ (80021cc <HAL_I2C_MspInit+0x138>)
 80020e6:	f043 0302 	orr.w	r3, r3, #2
 80020ea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80020ec:	4b37      	ldr	r3, [pc, #220]	@ (80021cc <HAL_I2C_MspInit+0x138>)
 80020ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020f0:	f003 0302 	and.w	r3, r3, #2
 80020f4:	61bb      	str	r3, [r7, #24]
 80020f6:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80020f8:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80020fc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002100:	2312      	movs	r3, #18
 8002102:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002106:	2300      	movs	r3, #0
 8002108:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800210c:	2303      	movs	r3, #3
 800210e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002112:	2304      	movs	r3, #4
 8002114:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002118:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800211c:	4619      	mov	r1, r3
 800211e:	482c      	ldr	r0, [pc, #176]	@ (80021d0 <HAL_I2C_MspInit+0x13c>)
 8002120:	f000 fca4 	bl	8002a6c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002124:	4b29      	ldr	r3, [pc, #164]	@ (80021cc <HAL_I2C_MspInit+0x138>)
 8002126:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002128:	4a28      	ldr	r2, [pc, #160]	@ (80021cc <HAL_I2C_MspInit+0x138>)
 800212a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800212e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002130:	4b26      	ldr	r3, [pc, #152]	@ (80021cc <HAL_I2C_MspInit+0x138>)
 8002132:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002134:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002138:	617b      	str	r3, [r7, #20]
 800213a:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800213c:	e040      	b.n	80021c0 <HAL_I2C_MspInit+0x12c>
  else if(hi2c->Instance==I2C2)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a24      	ldr	r2, [pc, #144]	@ (80021d4 <HAL_I2C_MspInit+0x140>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d13b      	bne.n	80021c0 <HAL_I2C_MspInit+0x12c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002148:	2380      	movs	r3, #128	@ 0x80
 800214a:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800214c:	2300      	movs	r3, #0
 800214e:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002150:	f107 031c 	add.w	r3, r7, #28
 8002154:	4618      	mov	r0, r3
 8002156:	f002 f991 	bl	800447c <HAL_RCCEx_PeriphCLKConfig>
 800215a:	4603      	mov	r3, r0
 800215c:	2b00      	cmp	r3, #0
 800215e:	d001      	beq.n	8002164 <HAL_I2C_MspInit+0xd0>
      Error_Handler();
 8002160:	f7ff ff6e 	bl	8002040 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002164:	4b19      	ldr	r3, [pc, #100]	@ (80021cc <HAL_I2C_MspInit+0x138>)
 8002166:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002168:	4a18      	ldr	r2, [pc, #96]	@ (80021cc <HAL_I2C_MspInit+0x138>)
 800216a:	f043 0302 	orr.w	r3, r3, #2
 800216e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002170:	4b16      	ldr	r3, [pc, #88]	@ (80021cc <HAL_I2C_MspInit+0x138>)
 8002172:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002174:	f003 0302 	and.w	r3, r3, #2
 8002178:	613b      	str	r3, [r7, #16]
 800217a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 800217c:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8002180:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002184:	2312      	movs	r3, #18
 8002186:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800218a:	2300      	movs	r3, #0
 800218c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002190:	2303      	movs	r3, #3
 8002192:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002196:	2304      	movs	r3, #4
 8002198:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800219c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80021a0:	4619      	mov	r1, r3
 80021a2:	480b      	ldr	r0, [pc, #44]	@ (80021d0 <HAL_I2C_MspInit+0x13c>)
 80021a4:	f000 fc62 	bl	8002a6c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80021a8:	4b08      	ldr	r3, [pc, #32]	@ (80021cc <HAL_I2C_MspInit+0x138>)
 80021aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021ac:	4a07      	ldr	r2, [pc, #28]	@ (80021cc <HAL_I2C_MspInit+0x138>)
 80021ae:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80021b2:	6593      	str	r3, [r2, #88]	@ 0x58
 80021b4:	4b05      	ldr	r3, [pc, #20]	@ (80021cc <HAL_I2C_MspInit+0x138>)
 80021b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021b8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80021bc:	60fb      	str	r3, [r7, #12]
 80021be:	68fb      	ldr	r3, [r7, #12]
}
 80021c0:	bf00      	nop
 80021c2:	37b8      	adds	r7, #184	@ 0xb8
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}
 80021c8:	40005400 	.word	0x40005400
 80021cc:	40021000 	.word	0x40021000
 80021d0:	48000400 	.word	0x48000400
 80021d4:	40005800 	.word	0x40005800

080021d8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b08a      	sub	sp, #40	@ 0x28
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021e0:	f107 0314 	add.w	r3, r7, #20
 80021e4:	2200      	movs	r2, #0
 80021e6:	601a      	str	r2, [r3, #0]
 80021e8:	605a      	str	r2, [r3, #4]
 80021ea:	609a      	str	r2, [r3, #8]
 80021ec:	60da      	str	r2, [r3, #12]
 80021ee:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a17      	ldr	r2, [pc, #92]	@ (8002254 <HAL_SPI_MspInit+0x7c>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d128      	bne.n	800224c <HAL_SPI_MspInit+0x74>
>>>>>>> Stashed changes
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
<<<<<<< Updated upstream
 80021aa:	4b17      	ldr	r3, [pc, #92]	@ (8002208 <HAL_SPI_MspInit+0x80>)
 80021ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021ae:	4a16      	ldr	r2, [pc, #88]	@ (8002208 <HAL_SPI_MspInit+0x80>)
 80021b0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80021b4:	6613      	str	r3, [r2, #96]	@ 0x60
 80021b6:	4b14      	ldr	r3, [pc, #80]	@ (8002208 <HAL_SPI_MspInit+0x80>)
 80021b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021ba:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80021be:	613b      	str	r3, [r7, #16]
 80021c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021c2:	4b11      	ldr	r3, [pc, #68]	@ (8002208 <HAL_SPI_MspInit+0x80>)
 80021c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021c6:	4a10      	ldr	r2, [pc, #64]	@ (8002208 <HAL_SPI_MspInit+0x80>)
 80021c8:	f043 0301 	orr.w	r3, r3, #1
 80021cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80021ce:	4b0e      	ldr	r3, [pc, #56]	@ (8002208 <HAL_SPI_MspInit+0x80>)
 80021d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021d2:	f003 0301 	and.w	r3, r3, #1
 80021d6:	60fb      	str	r3, [r7, #12]
 80021d8:	68fb      	ldr	r3, [r7, #12]
=======
 80021fa:	4b17      	ldr	r3, [pc, #92]	@ (8002258 <HAL_SPI_MspInit+0x80>)
 80021fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021fe:	4a16      	ldr	r2, [pc, #88]	@ (8002258 <HAL_SPI_MspInit+0x80>)
 8002200:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002204:	6613      	str	r3, [r2, #96]	@ 0x60
 8002206:	4b14      	ldr	r3, [pc, #80]	@ (8002258 <HAL_SPI_MspInit+0x80>)
 8002208:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800220a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800220e:	613b      	str	r3, [r7, #16]
 8002210:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002212:	4b11      	ldr	r3, [pc, #68]	@ (8002258 <HAL_SPI_MspInit+0x80>)
 8002214:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002216:	4a10      	ldr	r2, [pc, #64]	@ (8002258 <HAL_SPI_MspInit+0x80>)
 8002218:	f043 0301 	orr.w	r3, r3, #1
 800221c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800221e:	4b0e      	ldr	r3, [pc, #56]	@ (8002258 <HAL_SPI_MspInit+0x80>)
 8002220:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002222:	f003 0301 	and.w	r3, r3, #1
 8002226:	60fb      	str	r3, [r7, #12]
 8002228:	68fb      	ldr	r3, [r7, #12]
>>>>>>> Stashed changes
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
<<<<<<< Updated upstream
 80021da:	23e0      	movs	r3, #224	@ 0xe0
 80021dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021de:	2302      	movs	r3, #2
 80021e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80021e2:	2301      	movs	r3, #1
 80021e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021e6:	2303      	movs	r3, #3
 80021e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80021ea:	2305      	movs	r3, #5
 80021ec:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021ee:	f107 0314 	add.w	r3, r7, #20
 80021f2:	4619      	mov	r1, r3
 80021f4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80021f8:	f000 fc0a 	bl	8002a10 <HAL_GPIO_Init>
=======
 800222a:	23e0      	movs	r3, #224	@ 0xe0
 800222c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800222e:	2302      	movs	r3, #2
 8002230:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002232:	2301      	movs	r3, #1
 8002234:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002236:	2303      	movs	r3, #3
 8002238:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800223a:	2305      	movs	r3, #5
 800223c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800223e:	f107 0314 	add.w	r3, r7, #20
 8002242:	4619      	mov	r1, r3
 8002244:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002248:	f000 fc10 	bl	8002a6c <HAL_GPIO_Init>
>>>>>>> Stashed changes

    /* USER CODE END SPI1_MspInit 1 */

  }

}
<<<<<<< Updated upstream
 80021fc:	bf00      	nop
 80021fe:	3728      	adds	r7, #40	@ 0x28
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}
 8002204:	40013000 	.word	0x40013000
 8002208:	40021000 	.word	0x40021000

0800220c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b086      	sub	sp, #24
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800221c:	d10c      	bne.n	8002238 <HAL_TIM_Base_MspInit+0x2c>
=======
 800224c:	bf00      	nop
 800224e:	3728      	adds	r7, #40	@ 0x28
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}
 8002254:	40013000 	.word	0x40013000
 8002258:	40021000 	.word	0x40021000

0800225c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800225c:	b480      	push	{r7}
 800225e:	b085      	sub	sp, #20
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800226c:	d10b      	bne.n	8002286 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800226e:	4b09      	ldr	r3, [pc, #36]	@ (8002294 <HAL_TIM_PWM_MspInit+0x38>)
 8002270:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002272:	4a08      	ldr	r2, [pc, #32]	@ (8002294 <HAL_TIM_PWM_MspInit+0x38>)
 8002274:	f043 0301 	orr.w	r3, r3, #1
 8002278:	6593      	str	r3, [r2, #88]	@ 0x58
 800227a:	4b06      	ldr	r3, [pc, #24]	@ (8002294 <HAL_TIM_PWM_MspInit+0x38>)
 800227c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800227e:	f003 0301 	and.w	r3, r3, #1
 8002282:	60fb      	str	r3, [r7, #12]
 8002284:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8002286:	bf00      	nop
 8002288:	3714      	adds	r7, #20
 800228a:	46bd      	mov	sp, r7
 800228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002290:	4770      	bx	lr
 8002292:	bf00      	nop
 8002294:	40021000 	.word	0x40021000

08002298 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b084      	sub	sp, #16
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a1a      	ldr	r2, [pc, #104]	@ (8002310 <HAL_TIM_Base_MspInit+0x78>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d114      	bne.n	80022d4 <HAL_TIM_Base_MspInit+0x3c>
>>>>>>> Stashed changes
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
<<<<<<< Updated upstream
    __HAL_RCC_TIM2_CLK_ENABLE();
 800221e:	4b2b      	ldr	r3, [pc, #172]	@ (80022cc <HAL_TIM_Base_MspInit+0xc0>)
 8002220:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002222:	4a2a      	ldr	r2, [pc, #168]	@ (80022cc <HAL_TIM_Base_MspInit+0xc0>)
 8002224:	f043 0301 	orr.w	r3, r3, #1
 8002228:	6593      	str	r3, [r2, #88]	@ 0x58
 800222a:	4b28      	ldr	r3, [pc, #160]	@ (80022cc <HAL_TIM_Base_MspInit+0xc0>)
 800222c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800222e:	f003 0301 	and.w	r3, r3, #1
 8002232:	617b      	str	r3, [r7, #20]
 8002234:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN TIM17_MspInit 1 */
=======
    __HAL_RCC_TIM16_CLK_ENABLE();
 80022aa:	4b1a      	ldr	r3, [pc, #104]	@ (8002314 <HAL_TIM_Base_MspInit+0x7c>)
 80022ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022ae:	4a19      	ldr	r2, [pc, #100]	@ (8002314 <HAL_TIM_Base_MspInit+0x7c>)
 80022b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80022b4:	6613      	str	r3, [r2, #96]	@ 0x60
 80022b6:	4b17      	ldr	r3, [pc, #92]	@ (8002314 <HAL_TIM_Base_MspInit+0x7c>)
 80022b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022be:	60fb      	str	r3, [r7, #12]
 80022c0:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80022c2:	2200      	movs	r2, #0
 80022c4:	2100      	movs	r1, #0
 80022c6:	2019      	movs	r0, #25
 80022c8:	f000 fba6 	bl	8002a18 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80022cc:	2019      	movs	r0, #25
 80022ce:	f000 fbbf 	bl	8002a50 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */
>>>>>>> Stashed changes

    /* USER CODE END TIM17_MspInit 1 */
  }

}
<<<<<<< Updated upstream
 8002236:	e044      	b.n	80022c2 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM7)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a24      	ldr	r2, [pc, #144]	@ (80022d0 <HAL_TIM_Base_MspInit+0xc4>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d10c      	bne.n	800225c <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002242:	4b22      	ldr	r3, [pc, #136]	@ (80022cc <HAL_TIM_Base_MspInit+0xc0>)
 8002244:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002246:	4a21      	ldr	r2, [pc, #132]	@ (80022cc <HAL_TIM_Base_MspInit+0xc0>)
 8002248:	f043 0320 	orr.w	r3, r3, #32
 800224c:	6593      	str	r3, [r2, #88]	@ 0x58
 800224e:	4b1f      	ldr	r3, [pc, #124]	@ (80022cc <HAL_TIM_Base_MspInit+0xc0>)
 8002250:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002252:	f003 0320 	and.w	r3, r3, #32
 8002256:	613b      	str	r3, [r7, #16]
 8002258:	693b      	ldr	r3, [r7, #16]
}
 800225a:	e032      	b.n	80022c2 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM16)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a1c      	ldr	r2, [pc, #112]	@ (80022d4 <HAL_TIM_Base_MspInit+0xc8>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d114      	bne.n	8002290 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002266:	4b19      	ldr	r3, [pc, #100]	@ (80022cc <HAL_TIM_Base_MspInit+0xc0>)
 8002268:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800226a:	4a18      	ldr	r2, [pc, #96]	@ (80022cc <HAL_TIM_Base_MspInit+0xc0>)
 800226c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002270:	6613      	str	r3, [r2, #96]	@ 0x60
 8002272:	4b16      	ldr	r3, [pc, #88]	@ (80022cc <HAL_TIM_Base_MspInit+0xc0>)
 8002274:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002276:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800227a:	60fb      	str	r3, [r7, #12]
 800227c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 5, 0);
 800227e:	2200      	movs	r2, #0
 8002280:	2105      	movs	r1, #5
 8002282:	2019      	movs	r0, #25
 8002284:	f000 fb9a 	bl	80029bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002288:	2019      	movs	r0, #25
 800228a:	f000 fbb3 	bl	80029f4 <HAL_NVIC_EnableIRQ>
}
 800228e:	e018      	b.n	80022c2 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM17)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a10      	ldr	r2, [pc, #64]	@ (80022d8 <HAL_TIM_Base_MspInit+0xcc>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d113      	bne.n	80022c2 <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM17_CLK_ENABLE();
 800229a:	4b0c      	ldr	r3, [pc, #48]	@ (80022cc <HAL_TIM_Base_MspInit+0xc0>)
 800229c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800229e:	4a0b      	ldr	r2, [pc, #44]	@ (80022cc <HAL_TIM_Base_MspInit+0xc0>)
 80022a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80022a4:	6613      	str	r3, [r2, #96]	@ 0x60
 80022a6:	4b09      	ldr	r3, [pc, #36]	@ (80022cc <HAL_TIM_Base_MspInit+0xc0>)
 80022a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022aa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80022ae:	60bb      	str	r3, [r7, #8]
 80022b0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 5, 0);
 80022b2:	2200      	movs	r2, #0
 80022b4:	2105      	movs	r1, #5
 80022b6:	201a      	movs	r0, #26
 80022b8:	f000 fb80 	bl	80029bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 80022bc:	201a      	movs	r0, #26
 80022be:	f000 fb99 	bl	80029f4 <HAL_NVIC_EnableIRQ>
}
 80022c2:	bf00      	nop
 80022c4:	3718      	adds	r7, #24
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop
 80022cc:	40021000 	.word	0x40021000
 80022d0:	40001400 	.word	0x40001400
 80022d4:	40014400 	.word	0x40014400
 80022d8:	40014800 	.word	0x40014800

080022dc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b088      	sub	sp, #32
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022e4:	f107 030c 	add.w	r3, r7, #12
 80022e8:	2200      	movs	r2, #0
 80022ea:	601a      	str	r2, [r3, #0]
 80022ec:	605a      	str	r2, [r3, #4]
 80022ee:	609a      	str	r2, [r3, #8]
 80022f0:	60da      	str	r2, [r3, #12]
 80022f2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80022fc:	d11c      	bne.n	8002338 <HAL_TIM_MspPostInit+0x5c>
=======
 80022d2:	e018      	b.n	8002306 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM17)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a0f      	ldr	r2, [pc, #60]	@ (8002318 <HAL_TIM_Base_MspInit+0x80>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d113      	bne.n	8002306 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM17_CLK_ENABLE();
 80022de:	4b0d      	ldr	r3, [pc, #52]	@ (8002314 <HAL_TIM_Base_MspInit+0x7c>)
 80022e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022e2:	4a0c      	ldr	r2, [pc, #48]	@ (8002314 <HAL_TIM_Base_MspInit+0x7c>)
 80022e4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80022e8:	6613      	str	r3, [r2, #96]	@ 0x60
 80022ea:	4b0a      	ldr	r3, [pc, #40]	@ (8002314 <HAL_TIM_Base_MspInit+0x7c>)
 80022ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022ee:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80022f2:	60bb      	str	r3, [r7, #8]
 80022f4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 80022f6:	2200      	movs	r2, #0
 80022f8:	2100      	movs	r1, #0
 80022fa:	201a      	movs	r0, #26
 80022fc:	f000 fb8c 	bl	8002a18 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8002300:	201a      	movs	r0, #26
 8002302:	f000 fba5 	bl	8002a50 <HAL_NVIC_EnableIRQ>
}
 8002306:	bf00      	nop
 8002308:	3710      	adds	r7, #16
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}
 800230e:	bf00      	nop
 8002310:	40014400 	.word	0x40014400
 8002314:	40021000 	.word	0x40021000
 8002318:	40014800 	.word	0x40014800

0800231c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b088      	sub	sp, #32
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002324:	f107 030c 	add.w	r3, r7, #12
 8002328:	2200      	movs	r2, #0
 800232a:	601a      	str	r2, [r3, #0]
 800232c:	605a      	str	r2, [r3, #4]
 800232e:	609a      	str	r2, [r3, #8]
 8002330:	60da      	str	r2, [r3, #12]
 8002332:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800233c:	d11c      	bne.n	8002378 <HAL_TIM_MspPostInit+0x5c>
>>>>>>> Stashed changes
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
<<<<<<< Updated upstream
 80022fe:	4b10      	ldr	r3, [pc, #64]	@ (8002340 <HAL_TIM_MspPostInit+0x64>)
 8002300:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002302:	4a0f      	ldr	r2, [pc, #60]	@ (8002340 <HAL_TIM_MspPostInit+0x64>)
 8002304:	f043 0301 	orr.w	r3, r3, #1
 8002308:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800230a:	4b0d      	ldr	r3, [pc, #52]	@ (8002340 <HAL_TIM_MspPostInit+0x64>)
 800230c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800230e:	f003 0301 	and.w	r3, r3, #1
 8002312:	60bb      	str	r3, [r7, #8]
 8002314:	68bb      	ldr	r3, [r7, #8]
=======
 800233e:	4b10      	ldr	r3, [pc, #64]	@ (8002380 <HAL_TIM_MspPostInit+0x64>)
 8002340:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002342:	4a0f      	ldr	r2, [pc, #60]	@ (8002380 <HAL_TIM_MspPostInit+0x64>)
 8002344:	f043 0301 	orr.w	r3, r3, #1
 8002348:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800234a:	4b0d      	ldr	r3, [pc, #52]	@ (8002380 <HAL_TIM_MspPostInit+0x64>)
 800234c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800234e:	f003 0301 	and.w	r3, r3, #1
 8002352:	60bb      	str	r3, [r7, #8]
 8002354:	68bb      	ldr	r3, [r7, #8]
>>>>>>> Stashed changes
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
<<<<<<< Updated upstream
 8002316:	2301      	movs	r3, #1
 8002318:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800231a:	2302      	movs	r3, #2
 800231c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800231e:	2300      	movs	r3, #0
 8002320:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002322:	2300      	movs	r3, #0
 8002324:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002326:	2301      	movs	r3, #1
 8002328:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800232a:	f107 030c 	add.w	r3, r7, #12
 800232e:	4619      	mov	r1, r3
 8002330:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002334:	f000 fb6c 	bl	8002a10 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */
=======
 8002356:	2301      	movs	r3, #1
 8002358:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800235a:	2302      	movs	r3, #2
 800235c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800235e:	2300      	movs	r3, #0
 8002360:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002362:	2300      	movs	r3, #0
 8002364:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002366:	2301      	movs	r3, #1
 8002368:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800236a:	f107 030c 	add.w	r3, r7, #12
 800236e:	4619      	mov	r1, r3
 8002370:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002374:	f000 fb7a 	bl	8002a6c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */
>>>>>>> Stashed changes

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
<<<<<<< Updated upstream
 8002338:	bf00      	nop
 800233a:	3720      	adds	r7, #32
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}
 8002340:	40021000 	.word	0x40021000

08002344 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b0ac      	sub	sp, #176	@ 0xb0
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800234c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002350:	2200      	movs	r2, #0
 8002352:	601a      	str	r2, [r3, #0]
 8002354:	605a      	str	r2, [r3, #4]
 8002356:	609a      	str	r2, [r3, #8]
 8002358:	60da      	str	r2, [r3, #12]
 800235a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800235c:	f107 0314 	add.w	r3, r7, #20
 8002360:	2288      	movs	r2, #136	@ 0x88
 8002362:	2100      	movs	r1, #0
 8002364:	4618      	mov	r0, r3
 8002366:	f00c fbad 	bl	800eac4 <memset>
  if(huart->Instance==USART2)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a21      	ldr	r2, [pc, #132]	@ (80023f4 <HAL_UART_MspInit+0xb0>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d13b      	bne.n	80023ec <HAL_UART_MspInit+0xa8>
=======
 8002378:	bf00      	nop
 800237a:	3720      	adds	r7, #32
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}
 8002380:	40021000 	.word	0x40021000

08002384 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b0ac      	sub	sp, #176	@ 0xb0
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800238c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002390:	2200      	movs	r2, #0
 8002392:	601a      	str	r2, [r3, #0]
 8002394:	605a      	str	r2, [r3, #4]
 8002396:	609a      	str	r2, [r3, #8]
 8002398:	60da      	str	r2, [r3, #12]
 800239a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800239c:	f107 0314 	add.w	r3, r7, #20
 80023a0:	2288      	movs	r2, #136	@ 0x88
 80023a2:	2100      	movs	r1, #0
 80023a4:	4618      	mov	r0, r3
 80023a6:	f009 f83b 	bl	800b420 <memset>
  if(huart->Instance==USART2)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a21      	ldr	r2, [pc, #132]	@ (8002434 <HAL_UART_MspInit+0xb0>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d13b      	bne.n	800242c <HAL_UART_MspInit+0xa8>
>>>>>>> Stashed changes

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
<<<<<<< Updated upstream
 8002374:	2302      	movs	r3, #2
 8002376:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002378:	2300      	movs	r3, #0
 800237a:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800237c:	f107 0314 	add.w	r3, r7, #20
 8002380:	4618      	mov	r0, r3
 8002382:	f001 fbe7 	bl	8003b54 <HAL_RCCEx_PeriphCLKConfig>
 8002386:	4603      	mov	r3, r0
 8002388:	2b00      	cmp	r3, #0
 800238a:	d001      	beq.n	8002390 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800238c:	f7ff fece 	bl	800212c <Error_Handler>
=======
 80023b4:	2302      	movs	r3, #2
 80023b6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80023b8:	2300      	movs	r3, #0
 80023ba:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80023bc:	f107 0314 	add.w	r3, r7, #20
 80023c0:	4618      	mov	r0, r3
 80023c2:	f002 f85b 	bl	800447c <HAL_RCCEx_PeriphCLKConfig>
 80023c6:	4603      	mov	r3, r0
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d001      	beq.n	80023d0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80023cc:	f7ff fe38 	bl	8002040 <Error_Handler>
>>>>>>> Stashed changes
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
<<<<<<< Updated upstream
 8002390:	4b19      	ldr	r3, [pc, #100]	@ (80023f8 <HAL_UART_MspInit+0xb4>)
 8002392:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002394:	4a18      	ldr	r2, [pc, #96]	@ (80023f8 <HAL_UART_MspInit+0xb4>)
 8002396:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800239a:	6593      	str	r3, [r2, #88]	@ 0x58
 800239c:	4b16      	ldr	r3, [pc, #88]	@ (80023f8 <HAL_UART_MspInit+0xb4>)
 800239e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023a4:	613b      	str	r3, [r7, #16]
 80023a6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023a8:	4b13      	ldr	r3, [pc, #76]	@ (80023f8 <HAL_UART_MspInit+0xb4>)
 80023aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023ac:	4a12      	ldr	r2, [pc, #72]	@ (80023f8 <HAL_UART_MspInit+0xb4>)
 80023ae:	f043 0301 	orr.w	r3, r3, #1
 80023b2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80023b4:	4b10      	ldr	r3, [pc, #64]	@ (80023f8 <HAL_UART_MspInit+0xb4>)
 80023b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023b8:	f003 0301 	and.w	r3, r3, #1
 80023bc:	60fb      	str	r3, [r7, #12]
 80023be:	68fb      	ldr	r3, [r7, #12]
=======
 80023d0:	4b19      	ldr	r3, [pc, #100]	@ (8002438 <HAL_UART_MspInit+0xb4>)
 80023d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023d4:	4a18      	ldr	r2, [pc, #96]	@ (8002438 <HAL_UART_MspInit+0xb4>)
 80023d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80023da:	6593      	str	r3, [r2, #88]	@ 0x58
 80023dc:	4b16      	ldr	r3, [pc, #88]	@ (8002438 <HAL_UART_MspInit+0xb4>)
 80023de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023e4:	613b      	str	r3, [r7, #16]
 80023e6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023e8:	4b13      	ldr	r3, [pc, #76]	@ (8002438 <HAL_UART_MspInit+0xb4>)
 80023ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023ec:	4a12      	ldr	r2, [pc, #72]	@ (8002438 <HAL_UART_MspInit+0xb4>)
 80023ee:	f043 0301 	orr.w	r3, r3, #1
 80023f2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80023f4:	4b10      	ldr	r3, [pc, #64]	@ (8002438 <HAL_UART_MspInit+0xb4>)
 80023f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023f8:	f003 0301 	and.w	r3, r3, #1
 80023fc:	60fb      	str	r3, [r7, #12]
 80023fe:	68fb      	ldr	r3, [r7, #12]
>>>>>>> Stashed changes
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
<<<<<<< Updated upstream
 80023c0:	230c      	movs	r3, #12
 80023c2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023c6:	2302      	movs	r3, #2
 80023c8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023cc:	2300      	movs	r3, #0
 80023ce:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023d2:	2303      	movs	r3, #3
 80023d4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80023d8:	2307      	movs	r3, #7
 80023da:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023de:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80023e2:	4619      	mov	r1, r3
 80023e4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80023e8:	f000 fb12 	bl	8002a10 <HAL_GPIO_Init>
=======
 8002400:	230c      	movs	r3, #12
 8002402:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002406:	2302      	movs	r3, #2
 8002408:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800240c:	2300      	movs	r3, #0
 800240e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002412:	2303      	movs	r3, #3
 8002414:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002418:	2307      	movs	r3, #7
 800241a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800241e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002422:	4619      	mov	r1, r3
 8002424:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002428:	f000 fb20 	bl	8002a6c <HAL_GPIO_Init>
>>>>>>> Stashed changes

    /* USER CODE END USART2_MspInit 1 */

  }

}
<<<<<<< Updated upstream
 80023ec:	bf00      	nop
 80023ee:	37b0      	adds	r7, #176	@ 0xb0
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}
 80023f4:	40004400 	.word	0x40004400
 80023f8:	40021000 	.word	0x40021000

080023fc <HAL_InitTick>:
=======
 800242c:	bf00      	nop
 800242e:	37b0      	adds	r7, #176	@ 0xb0
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}
 8002434:	40004400 	.word	0x40004400
 8002438:	40021000 	.word	0x40021000

0800243c <HAL_InitTick>:
>>>>>>> Stashed changes
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
<<<<<<< Updated upstream
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b08e      	sub	sp, #56	@ 0x38
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
=======
 800243c:	b580      	push	{r7, lr}
 800243e:	b08e      	sub	sp, #56	@ 0x38
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
<<<<<<< Updated upstream
 8002404:	2300      	movs	r3, #0
 8002406:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800240a:	4b34      	ldr	r3, [pc, #208]	@ (80024dc <HAL_InitTick+0xe0>)
 800240c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800240e:	4a33      	ldr	r2, [pc, #204]	@ (80024dc <HAL_InitTick+0xe0>)
 8002410:	f043 0310 	orr.w	r3, r3, #16
 8002414:	6593      	str	r3, [r2, #88]	@ 0x58
 8002416:	4b31      	ldr	r3, [pc, #196]	@ (80024dc <HAL_InitTick+0xe0>)
 8002418:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800241a:	f003 0310 	and.w	r3, r3, #16
 800241e:	60fb      	str	r3, [r7, #12]
 8002420:	68fb      	ldr	r3, [r7, #12]
=======
 8002444:	2300      	movs	r3, #0
 8002446:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 800244a:	4b34      	ldr	r3, [pc, #208]	@ (800251c <HAL_InitTick+0xe0>)
 800244c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800244e:	4a33      	ldr	r2, [pc, #204]	@ (800251c <HAL_InitTick+0xe0>)
 8002450:	f043 0302 	orr.w	r3, r3, #2
 8002454:	6593      	str	r3, [r2, #88]	@ 0x58
 8002456:	4b31      	ldr	r3, [pc, #196]	@ (800251c <HAL_InitTick+0xe0>)
 8002458:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800245a:	f003 0302 	and.w	r3, r3, #2
 800245e:	60fb      	str	r3, [r7, #12]
 8002460:	68fb      	ldr	r3, [r7, #12]
>>>>>>> Stashed changes

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
<<<<<<< Updated upstream
 8002422:	f107 0210 	add.w	r2, r7, #16
 8002426:	f107 0314 	add.w	r3, r7, #20
 800242a:	4611      	mov	r1, r2
 800242c:	4618      	mov	r0, r3
 800242e:	f001 faff 	bl	8003a30 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002432:	6a3b      	ldr	r3, [r7, #32]
 8002434:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002436:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002438:	2b00      	cmp	r3, #0
 800243a:	d103      	bne.n	8002444 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800243c:	f001 facc 	bl	80039d8 <HAL_RCC_GetPCLK1Freq>
 8002440:	6378      	str	r0, [r7, #52]	@ 0x34
 8002442:	e004      	b.n	800244e <HAL_InitTick+0x52>
=======
 8002462:	f107 0210 	add.w	r2, r7, #16
 8002466:	f107 0314 	add.w	r3, r7, #20
 800246a:	4611      	mov	r1, r2
 800246c:	4618      	mov	r0, r3
 800246e:	f001 ff73 	bl	8004358 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002472:	6a3b      	ldr	r3, [r7, #32]
 8002474:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002476:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002478:	2b00      	cmp	r3, #0
 800247a:	d103      	bne.n	8002484 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800247c:	f001 ff40 	bl	8004300 <HAL_RCC_GetPCLK1Freq>
 8002480:	6378      	str	r0, [r7, #52]	@ 0x34
 8002482:	e004      	b.n	800248e <HAL_InitTick+0x52>
>>>>>>> Stashed changes
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
<<<<<<< Updated upstream
 8002444:	f001 fac8 	bl	80039d8 <HAL_RCC_GetPCLK1Freq>
 8002448:	4603      	mov	r3, r0
 800244a:	005b      	lsls	r3, r3, #1
 800244c:	637b      	str	r3, [r7, #52]	@ 0x34
=======
 8002484:	f001 ff3c 	bl	8004300 <HAL_RCC_GetPCLK1Freq>
 8002488:	4603      	mov	r3, r0
 800248a:	005b      	lsls	r3, r3, #1
 800248c:	637b      	str	r3, [r7, #52]	@ 0x34
>>>>>>> Stashed changes
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
<<<<<<< Updated upstream
 800244e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002450:	4a23      	ldr	r2, [pc, #140]	@ (80024e0 <HAL_InitTick+0xe4>)
 8002452:	fba2 2303 	umull	r2, r3, r2, r3
 8002456:	0c9b      	lsrs	r3, r3, #18
 8002458:	3b01      	subs	r3, #1
 800245a:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800245c:	4b21      	ldr	r3, [pc, #132]	@ (80024e4 <HAL_InitTick+0xe8>)
 800245e:	4a22      	ldr	r2, [pc, #136]	@ (80024e8 <HAL_InitTick+0xec>)
 8002460:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002462:	4b20      	ldr	r3, [pc, #128]	@ (80024e4 <HAL_InitTick+0xe8>)
 8002464:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002468:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800246a:	4a1e      	ldr	r2, [pc, #120]	@ (80024e4 <HAL_InitTick+0xe8>)
 800246c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800246e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002470:	4b1c      	ldr	r3, [pc, #112]	@ (80024e4 <HAL_InitTick+0xe8>)
 8002472:	2200      	movs	r2, #0
 8002474:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002476:	4b1b      	ldr	r3, [pc, #108]	@ (80024e4 <HAL_InitTick+0xe8>)
 8002478:	2200      	movs	r2, #0
 800247a:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800247c:	4b19      	ldr	r3, [pc, #100]	@ (80024e4 <HAL_InitTick+0xe8>)
 800247e:	2200      	movs	r2, #0
 8002480:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8002482:	4818      	ldr	r0, [pc, #96]	@ (80024e4 <HAL_InitTick+0xe8>)
 8002484:	f002 fdbe 	bl	8005004 <HAL_TIM_Base_Init>
 8002488:	4603      	mov	r3, r0
 800248a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 800248e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002492:	2b00      	cmp	r3, #0
 8002494:	d11b      	bne.n	80024ce <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8002496:	4813      	ldr	r0, [pc, #76]	@ (80024e4 <HAL_InitTick+0xe8>)
 8002498:	f002 fe0c 	bl	80050b4 <HAL_TIM_Base_Start_IT>
 800249c:	4603      	mov	r3, r0
 800249e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80024a2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d111      	bne.n	80024ce <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80024aa:	2036      	movs	r0, #54	@ 0x36
 80024ac:	f000 faa2 	bl	80029f4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2b0f      	cmp	r3, #15
 80024b4:	d808      	bhi.n	80024c8 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80024b6:	2200      	movs	r2, #0
 80024b8:	6879      	ldr	r1, [r7, #4]
 80024ba:	2036      	movs	r0, #54	@ 0x36
 80024bc:	f000 fa7e 	bl	80029bc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80024c0:	4a0a      	ldr	r2, [pc, #40]	@ (80024ec <HAL_InitTick+0xf0>)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6013      	str	r3, [r2, #0]
 80024c6:	e002      	b.n	80024ce <HAL_InitTick+0xd2>
=======
 800248e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002490:	4a23      	ldr	r2, [pc, #140]	@ (8002520 <HAL_InitTick+0xe4>)
 8002492:	fba2 2303 	umull	r2, r3, r2, r3
 8002496:	0c9b      	lsrs	r3, r3, #18
 8002498:	3b01      	subs	r3, #1
 800249a:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 800249c:	4b21      	ldr	r3, [pc, #132]	@ (8002524 <HAL_InitTick+0xe8>)
 800249e:	4a22      	ldr	r2, [pc, #136]	@ (8002528 <HAL_InitTick+0xec>)
 80024a0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 80024a2:	4b20      	ldr	r3, [pc, #128]	@ (8002524 <HAL_InitTick+0xe8>)
 80024a4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80024a8:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 80024aa:	4a1e      	ldr	r2, [pc, #120]	@ (8002524 <HAL_InitTick+0xe8>)
 80024ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024ae:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 80024b0:	4b1c      	ldr	r3, [pc, #112]	@ (8002524 <HAL_InitTick+0xe8>)
 80024b2:	2200      	movs	r2, #0
 80024b4:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024b6:	4b1b      	ldr	r3, [pc, #108]	@ (8002524 <HAL_InitTick+0xe8>)
 80024b8:	2200      	movs	r2, #0
 80024ba:	609a      	str	r2, [r3, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024bc:	4b19      	ldr	r3, [pc, #100]	@ (8002524 <HAL_InitTick+0xe8>)
 80024be:	2200      	movs	r2, #0
 80024c0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim3);
 80024c2:	4818      	ldr	r0, [pc, #96]	@ (8002524 <HAL_InitTick+0xe8>)
 80024c4:	f003 fa32 	bl	800592c <HAL_TIM_Base_Init>
 80024c8:	4603      	mov	r3, r0
 80024ca:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80024ce:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d11b      	bne.n	800250e <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim3);
 80024d6:	4813      	ldr	r0, [pc, #76]	@ (8002524 <HAL_InitTick+0xe8>)
 80024d8:	f003 fa80 	bl	80059dc <HAL_TIM_Base_Start_IT>
 80024dc:	4603      	mov	r3, r0
 80024de:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80024e2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d111      	bne.n	800250e <HAL_InitTick+0xd2>
    {
    /* Enable the TIM3 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80024ea:	201d      	movs	r0, #29
 80024ec:	f000 fab0 	bl	8002a50 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2b0f      	cmp	r3, #15
 80024f4:	d808      	bhi.n	8002508 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority, 0U);
 80024f6:	2200      	movs	r2, #0
 80024f8:	6879      	ldr	r1, [r7, #4]
 80024fa:	201d      	movs	r0, #29
 80024fc:	f000 fa8c 	bl	8002a18 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002500:	4a0a      	ldr	r2, [pc, #40]	@ (800252c <HAL_InitTick+0xf0>)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6013      	str	r3, [r2, #0]
 8002506:	e002      	b.n	800250e <HAL_InitTick+0xd2>
>>>>>>> Stashed changes
      }
      else
      {
        status = HAL_ERROR;
<<<<<<< Updated upstream
 80024c8:	2301      	movs	r3, #1
 80024ca:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
=======
 8002508:	2301      	movs	r3, #1
 800250a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
>>>>>>> Stashed changes
      }
    }
  }

 /* Return function status */
  return status;
<<<<<<< Updated upstream
 80024ce:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	3738      	adds	r7, #56	@ 0x38
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	40021000 	.word	0x40021000
 80024e0:	431bde83 	.word	0x431bde83
 80024e4:	200009cc 	.word	0x200009cc
 80024e8:	40001000 	.word	0x40001000
 80024ec:	20000010 	.word	0x20000010

080024f0 <NMI_Handler>:
=======
 800250e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8002512:	4618      	mov	r0, r3
 8002514:	3738      	adds	r7, #56	@ 0x38
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	40021000 	.word	0x40021000
 8002520:	431bde83 	.word	0x431bde83
 8002524:	200005b0 	.word	0x200005b0
 8002528:	40000400 	.word	0x40000400
 800252c:	20000010 	.word	0x20000010

08002530 <NMI_Handler>:
>>>>>>> Stashed changes
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
<<<<<<< Updated upstream
 80024f0:	b480      	push	{r7}
 80024f2:	af00      	add	r7, sp, #0
=======
 8002530:	b480      	push	{r7}
 8002532:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
<<<<<<< Updated upstream
 80024f4:	bf00      	nop
 80024f6:	e7fd      	b.n	80024f4 <NMI_Handler+0x4>

080024f8 <HardFault_Handler>:
=======
 8002534:	bf00      	nop
 8002536:	e7fd      	b.n	8002534 <NMI_Handler+0x4>

08002538 <HardFault_Handler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
<<<<<<< Updated upstream
 80024f8:	b480      	push	{r7}
 80024fa:	af00      	add	r7, sp, #0
=======
 8002538:	b480      	push	{r7}
 800253a:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
<<<<<<< Updated upstream
 80024fc:	bf00      	nop
 80024fe:	e7fd      	b.n	80024fc <HardFault_Handler+0x4>

08002500 <MemManage_Handler>:
=======
 800253c:	bf00      	nop
 800253e:	e7fd      	b.n	800253c <HardFault_Handler+0x4>

08002540 <MemManage_Handler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
<<<<<<< Updated upstream
 8002500:	b480      	push	{r7}
 8002502:	af00      	add	r7, sp, #0
=======
 8002540:	b480      	push	{r7}
 8002542:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
<<<<<<< Updated upstream
 8002504:	bf00      	nop
 8002506:	e7fd      	b.n	8002504 <MemManage_Handler+0x4>

08002508 <BusFault_Handler>:
=======
 8002544:	bf00      	nop
 8002546:	e7fd      	b.n	8002544 <MemManage_Handler+0x4>

08002548 <BusFault_Handler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
<<<<<<< Updated upstream
 8002508:	b480      	push	{r7}
 800250a:	af00      	add	r7, sp, #0
=======
 8002548:	b480      	push	{r7}
 800254a:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
<<<<<<< Updated upstream
 800250c:	bf00      	nop
 800250e:	e7fd      	b.n	800250c <BusFault_Handler+0x4>

08002510 <UsageFault_Handler>:
=======
 800254c:	bf00      	nop
 800254e:	e7fd      	b.n	800254c <BusFault_Handler+0x4>

08002550 <UsageFault_Handler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
<<<<<<< Updated upstream
 8002510:	b480      	push	{r7}
 8002512:	af00      	add	r7, sp, #0
=======
 8002550:	b480      	push	{r7}
 8002552:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
<<<<<<< Updated upstream
 8002514:	bf00      	nop
 8002516:	e7fd      	b.n	8002514 <UsageFault_Handler+0x4>

08002518 <DebugMon_Handler>:
=======
 8002554:	bf00      	nop
 8002556:	e7fd      	b.n	8002554 <UsageFault_Handler+0x4>

08002558 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002558:	b480      	push	{r7}
 800255a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800255c:	bf00      	nop
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr

08002566 <DebugMon_Handler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
<<<<<<< Updated upstream
 8002518:	b480      	push	{r7}
 800251a:	af00      	add	r7, sp, #0
=======
 8002566:	b480      	push	{r7}
 8002568:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
<<<<<<< Updated upstream
 800251c:	bf00      	nop
 800251e:	46bd      	mov	sp, r7
 8002520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002524:	4770      	bx	lr

08002526 <EXTI1_IRQHandler>:
=======
 800256a:	bf00      	nop
 800256c:	46bd      	mov	sp, r7
 800256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002572:	4770      	bx	lr

08002574 <PendSV_Handler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
<<<<<<< Updated upstream
 8002526:	b580      	push	{r7, lr}
 8002528:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */
=======
 8002574:	b480      	push	{r7}
 8002576:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(shutdownButton_Pin);
 800252a:	2002      	movs	r0, #2
 800252c:	f000 fc64 	bl	8002df8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
<<<<<<< Updated upstream
 8002530:	bf00      	nop
 8002532:	bd80      	pop	{r7, pc}

08002534 <TIM1_UP_TIM16_IRQHandler>:
=======
 8002578:	bf00      	nop
 800257a:	46bd      	mov	sp, r7
 800257c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002580:	4770      	bx	lr

08002582 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002582:	b480      	push	{r7}
 8002584:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002586:	bf00      	nop
 8002588:	46bd      	mov	sp, r7
 800258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258e:	4770      	bx	lr

08002590 <TIM1_UP_TIM16_IRQHandler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
<<<<<<< Updated upstream
 8002534:	b580      	push	{r7, lr}
 8002536:	af00      	add	r7, sp, #0
=======
 8002590:	b580      	push	{r7, lr}
 8002592:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
<<<<<<< Updated upstream
 8002538:	4802      	ldr	r0, [pc, #8]	@ (8002544 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800253a:	f003 f857 	bl	80055ec <HAL_TIM_IRQHandler>
=======
 8002594:	4802      	ldr	r0, [pc, #8]	@ (80025a0 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8002596:	f003 fc1d 	bl	8005dd4 <HAL_TIM_IRQHandler>
>>>>>>> Stashed changes
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
<<<<<<< Updated upstream
 800253e:	bf00      	nop
 8002540:	bd80      	pop	{r7, pc}
 8002542:	bf00      	nop
 8002544:	20000314 	.word	0x20000314

08002548 <TIM1_TRG_COM_TIM17_IRQHandler>:
=======
 800259a:	bf00      	nop
 800259c:	bd80      	pop	{r7, pc}
 800259e:	bf00      	nop
 80025a0:	2000037c 	.word	0x2000037c

080025a4 <TIM1_TRG_COM_TIM17_IRQHandler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
<<<<<<< Updated upstream
 8002548:	b580      	push	{r7, lr}
 800254a:	af00      	add	r7, sp, #0
=======
 80025a4:	b580      	push	{r7, lr}
 80025a6:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
<<<<<<< Updated upstream
 800254c:	4802      	ldr	r0, [pc, #8]	@ (8002558 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 800254e:	f003 f84d 	bl	80055ec <HAL_TIM_IRQHandler>
=======
 80025a8:	4802      	ldr	r0, [pc, #8]	@ (80025b4 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 80025aa:	f003 fc13 	bl	8005dd4 <HAL_TIM_IRQHandler>
>>>>>>> Stashed changes
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
<<<<<<< Updated upstream
 8002552:	bf00      	nop
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	20000360 	.word	0x20000360

0800255c <EXTI15_10_IRQHandler>:
=======
 80025ae:	bf00      	nop
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	bf00      	nop
 80025b4:	200003c8 	.word	0x200003c8

080025b8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80025bc:	4802      	ldr	r0, [pc, #8]	@ (80025c8 <TIM3_IRQHandler+0x10>)
 80025be:	f003 fc09 	bl	8005dd4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80025c2:	bf00      	nop
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	bf00      	nop
 80025c8:	200005b0 	.word	0x200005b0

080025cc <EXTI15_10_IRQHandler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
<<<<<<< Updated upstream
 800255c:	b580      	push	{r7, lr}
 800255e:	af00      	add	r7, sp, #0
=======
 80025cc:	b580      	push	{r7, lr}
 80025ce:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
<<<<<<< Updated upstream
 8002560:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002564:	f000 fc48 	bl	8002df8 <HAL_GPIO_EXTI_IRQHandler>
=======
 80025d0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80025d4:	f000 fc3e 	bl	8002e54 <HAL_GPIO_EXTI_IRQHandler>
>>>>>>> Stashed changes
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
<<<<<<< Updated upstream
 8002568:	bf00      	nop
 800256a:	bd80      	pop	{r7, pc}

0800256c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002570:	4802      	ldr	r0, [pc, #8]	@ (800257c <TIM6_DAC_IRQHandler+0x10>)
 8002572:	f003 f83b 	bl	80055ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002576:	bf00      	nop
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	200009cc 	.word	0x200009cc

08002580 <_getpid>:
=======
 80025d8:	bf00      	nop
 80025da:	bd80      	pop	{r7, pc}

080025dc <_getpid>:
>>>>>>> Stashed changes
void initialise_monitor_handles()
{
}

int _getpid(void)
{
<<<<<<< Updated upstream
 8002580:	b480      	push	{r7}
 8002582:	af00      	add	r7, sp, #0
  return 1;
 8002584:	2301      	movs	r3, #1
}
 8002586:	4618      	mov	r0, r3
 8002588:	46bd      	mov	sp, r7
 800258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258e:	4770      	bx	lr

08002590 <_kill>:

int _kill(int pid, int sig)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b082      	sub	sp, #8
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
 8002598:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800259a:	f00c fb65 	bl	800ec68 <__errno>
 800259e:	4603      	mov	r3, r0
 80025a0:	2216      	movs	r2, #22
 80025a2:	601a      	str	r2, [r3, #0]
  return -1;
 80025a4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	3708      	adds	r7, #8
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}

080025b0 <_exit>:

void _exit (int status)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b082      	sub	sp, #8
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80025b8:	f04f 31ff 	mov.w	r1, #4294967295
 80025bc:	6878      	ldr	r0, [r7, #4]
 80025be:	f7ff ffe7 	bl	8002590 <_kill>
  while (1) {}    /* Make sure we hang here */
 80025c2:	bf00      	nop
 80025c4:	e7fd      	b.n	80025c2 <_exit+0x12>

080025c6 <_read>:
=======
 80025dc:	b480      	push	{r7}
 80025de:	af00      	add	r7, sp, #0
  return 1;
 80025e0:	2301      	movs	r3, #1
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	46bd      	mov	sp, r7
 80025e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ea:	4770      	bx	lr

080025ec <_kill>:

int _kill(int pid, int sig)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b082      	sub	sp, #8
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
 80025f4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80025f6:	f008 ff87 	bl	800b508 <__errno>
 80025fa:	4603      	mov	r3, r0
 80025fc:	2216      	movs	r2, #22
 80025fe:	601a      	str	r2, [r3, #0]
  return -1;
 8002600:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002604:	4618      	mov	r0, r3
 8002606:	3708      	adds	r7, #8
 8002608:	46bd      	mov	sp, r7
 800260a:	bd80      	pop	{r7, pc}

0800260c <_exit>:

void _exit (int status)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b082      	sub	sp, #8
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002614:	f04f 31ff 	mov.w	r1, #4294967295
 8002618:	6878      	ldr	r0, [r7, #4]
 800261a:	f7ff ffe7 	bl	80025ec <_kill>
  while (1) {}    /* Make sure we hang here */
 800261e:	bf00      	nop
 8002620:	e7fd      	b.n	800261e <_exit+0x12>

08002622 <_read>:
>>>>>>> Stashed changes
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
<<<<<<< Updated upstream
 80025c6:	b580      	push	{r7, lr}
 80025c8:	b086      	sub	sp, #24
 80025ca:	af00      	add	r7, sp, #0
 80025cc:	60f8      	str	r0, [r7, #12]
 80025ce:	60b9      	str	r1, [r7, #8]
 80025d0:	607a      	str	r2, [r7, #4]
=======
 8002622:	b580      	push	{r7, lr}
 8002624:	b086      	sub	sp, #24
 8002626:	af00      	add	r7, sp, #0
 8002628:	60f8      	str	r0, [r7, #12]
 800262a:	60b9      	str	r1, [r7, #8]
 800262c:	607a      	str	r2, [r7, #4]
>>>>>>> Stashed changes
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
<<<<<<< Updated upstream
 80025d2:	2300      	movs	r3, #0
 80025d4:	617b      	str	r3, [r7, #20]
 80025d6:	e00a      	b.n	80025ee <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80025d8:	f3af 8000 	nop.w
 80025dc:	4601      	mov	r1, r0
 80025de:	68bb      	ldr	r3, [r7, #8]
 80025e0:	1c5a      	adds	r2, r3, #1
 80025e2:	60ba      	str	r2, [r7, #8]
 80025e4:	b2ca      	uxtb	r2, r1
 80025e6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	3301      	adds	r3, #1
 80025ec:	617b      	str	r3, [r7, #20]
 80025ee:	697a      	ldr	r2, [r7, #20]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	429a      	cmp	r2, r3
 80025f4:	dbf0      	blt.n	80025d8 <_read+0x12>
  }

  return len;
 80025f6:	687b      	ldr	r3, [r7, #4]
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	3718      	adds	r7, #24
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}

08002600 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b086      	sub	sp, #24
 8002604:	af00      	add	r7, sp, #0
 8002606:	60f8      	str	r0, [r7, #12]
 8002608:	60b9      	str	r1, [r7, #8]
 800260a:	607a      	str	r2, [r7, #4]
=======
 800262e:	2300      	movs	r3, #0
 8002630:	617b      	str	r3, [r7, #20]
 8002632:	e00a      	b.n	800264a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002634:	f3af 8000 	nop.w
 8002638:	4601      	mov	r1, r0
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	1c5a      	adds	r2, r3, #1
 800263e:	60ba      	str	r2, [r7, #8]
 8002640:	b2ca      	uxtb	r2, r1
 8002642:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	3301      	adds	r3, #1
 8002648:	617b      	str	r3, [r7, #20]
 800264a:	697a      	ldr	r2, [r7, #20]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	429a      	cmp	r2, r3
 8002650:	dbf0      	blt.n	8002634 <_read+0x12>
  }

  return len;
 8002652:	687b      	ldr	r3, [r7, #4]
}
 8002654:	4618      	mov	r0, r3
 8002656:	3718      	adds	r7, #24
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}

0800265c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b086      	sub	sp, #24
 8002660:	af00      	add	r7, sp, #0
 8002662:	60f8      	str	r0, [r7, #12]
 8002664:	60b9      	str	r1, [r7, #8]
 8002666:	607a      	str	r2, [r7, #4]
>>>>>>> Stashed changes
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
<<<<<<< Updated upstream
 800260c:	2300      	movs	r3, #0
 800260e:	617b      	str	r3, [r7, #20]
 8002610:	e009      	b.n	8002626 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002612:	68bb      	ldr	r3, [r7, #8]
 8002614:	1c5a      	adds	r2, r3, #1
 8002616:	60ba      	str	r2, [r7, #8]
 8002618:	781b      	ldrb	r3, [r3, #0]
 800261a:	4618      	mov	r0, r3
 800261c:	f7ff fc38 	bl	8001e90 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	3301      	adds	r3, #1
 8002624:	617b      	str	r3, [r7, #20]
 8002626:	697a      	ldr	r2, [r7, #20]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	429a      	cmp	r2, r3
 800262c:	dbf1      	blt.n	8002612 <_write+0x12>
  }
  return len;
 800262e:	687b      	ldr	r3, [r7, #4]
}
 8002630:	4618      	mov	r0, r3
 8002632:	3718      	adds	r7, #24
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}

08002638 <_close>:

int _close(int file)
{
 8002638:	b480      	push	{r7}
 800263a:	b083      	sub	sp, #12
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002640:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002644:	4618      	mov	r0, r3
 8002646:	370c      	adds	r7, #12
 8002648:	46bd      	mov	sp, r7
 800264a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264e:	4770      	bx	lr

08002650 <_fstat>:
=======
 8002668:	2300      	movs	r3, #0
 800266a:	617b      	str	r3, [r7, #20]
 800266c:	e009      	b.n	8002682 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	1c5a      	adds	r2, r3, #1
 8002672:	60ba      	str	r2, [r7, #8]
 8002674:	781b      	ldrb	r3, [r3, #0]
 8002676:	4618      	mov	r0, r3
 8002678:	f7ff fc56 	bl	8001f28 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	3301      	adds	r3, #1
 8002680:	617b      	str	r3, [r7, #20]
 8002682:	697a      	ldr	r2, [r7, #20]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	429a      	cmp	r2, r3
 8002688:	dbf1      	blt.n	800266e <_write+0x12>
  }
  return len;
 800268a:	687b      	ldr	r3, [r7, #4]
}
 800268c:	4618      	mov	r0, r3
 800268e:	3718      	adds	r7, #24
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}

08002694 <_close>:

int _close(int file)
{
 8002694:	b480      	push	{r7}
 8002696:	b083      	sub	sp, #12
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800269c:	f04f 33ff 	mov.w	r3, #4294967295
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	370c      	adds	r7, #12
 80026a4:	46bd      	mov	sp, r7
 80026a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026aa:	4770      	bx	lr

080026ac <_fstat>:
>>>>>>> Stashed changes


int _fstat(int file, struct stat *st)
{
<<<<<<< Updated upstream
 8002650:	b480      	push	{r7}
 8002652:	b083      	sub	sp, #12
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
 8002658:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002660:	605a      	str	r2, [r3, #4]
  return 0;
 8002662:	2300      	movs	r3, #0
}
 8002664:	4618      	mov	r0, r3
 8002666:	370c      	adds	r7, #12
 8002668:	46bd      	mov	sp, r7
 800266a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266e:	4770      	bx	lr

08002670 <_isatty>:

int _isatty(int file)
{
 8002670:	b480      	push	{r7}
 8002672:	b083      	sub	sp, #12
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002678:	2301      	movs	r3, #1
}
 800267a:	4618      	mov	r0, r3
 800267c:	370c      	adds	r7, #12
 800267e:	46bd      	mov	sp, r7
 8002680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002684:	4770      	bx	lr

08002686 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002686:	b480      	push	{r7}
 8002688:	b085      	sub	sp, #20
 800268a:	af00      	add	r7, sp, #0
 800268c:	60f8      	str	r0, [r7, #12]
 800268e:	60b9      	str	r1, [r7, #8]
 8002690:	607a      	str	r2, [r7, #4]
=======
 80026ac:	b480      	push	{r7}
 80026ae:	b083      	sub	sp, #12
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
 80026b4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80026bc:	605a      	str	r2, [r3, #4]
  return 0;
 80026be:	2300      	movs	r3, #0
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	370c      	adds	r7, #12
 80026c4:	46bd      	mov	sp, r7
 80026c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ca:	4770      	bx	lr

080026cc <_isatty>:

int _isatty(int file)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b083      	sub	sp, #12
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80026d4:	2301      	movs	r3, #1
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	370c      	adds	r7, #12
 80026da:	46bd      	mov	sp, r7
 80026dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e0:	4770      	bx	lr

080026e2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80026e2:	b480      	push	{r7}
 80026e4:	b085      	sub	sp, #20
 80026e6:	af00      	add	r7, sp, #0
 80026e8:	60f8      	str	r0, [r7, #12]
 80026ea:	60b9      	str	r1, [r7, #8]
 80026ec:	607a      	str	r2, [r7, #4]
>>>>>>> Stashed changes
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
<<<<<<< Updated upstream
 8002692:	2300      	movs	r3, #0
}
 8002694:	4618      	mov	r0, r3
 8002696:	3714      	adds	r7, #20
 8002698:	46bd      	mov	sp, r7
 800269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269e:	4770      	bx	lr

080026a0 <_sbrk>:
=======
 80026ee:	2300      	movs	r3, #0
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	3714      	adds	r7, #20
 80026f4:	46bd      	mov	sp, r7
 80026f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fa:	4770      	bx	lr

080026fc <_sbrk>:
>>>>>>> Stashed changes
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
<<<<<<< Updated upstream
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b086      	sub	sp, #24
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
=======
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b086      	sub	sp, #24
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
<<<<<<< Updated upstream
 80026a8:	4a14      	ldr	r2, [pc, #80]	@ (80026fc <_sbrk+0x5c>)
 80026aa:	4b15      	ldr	r3, [pc, #84]	@ (8002700 <_sbrk+0x60>)
 80026ac:	1ad3      	subs	r3, r2, r3
 80026ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	613b      	str	r3, [r7, #16]
=======
 8002704:	4a14      	ldr	r2, [pc, #80]	@ (8002758 <_sbrk+0x5c>)
 8002706:	4b15      	ldr	r3, [pc, #84]	@ (800275c <_sbrk+0x60>)
 8002708:	1ad3      	subs	r3, r2, r3
 800270a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	613b      	str	r3, [r7, #16]
>>>>>>> Stashed changes
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
<<<<<<< Updated upstream
 80026b4:	4b13      	ldr	r3, [pc, #76]	@ (8002704 <_sbrk+0x64>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d102      	bne.n	80026c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80026bc:	4b11      	ldr	r3, [pc, #68]	@ (8002704 <_sbrk+0x64>)
 80026be:	4a12      	ldr	r2, [pc, #72]	@ (8002708 <_sbrk+0x68>)
 80026c0:	601a      	str	r2, [r3, #0]
=======
 8002710:	4b13      	ldr	r3, [pc, #76]	@ (8002760 <_sbrk+0x64>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d102      	bne.n	800271e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002718:	4b11      	ldr	r3, [pc, #68]	@ (8002760 <_sbrk+0x64>)
 800271a:	4a12      	ldr	r2, [pc, #72]	@ (8002764 <_sbrk+0x68>)
 800271c:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
<<<<<<< Updated upstream
 80026c2:	4b10      	ldr	r3, [pc, #64]	@ (8002704 <_sbrk+0x64>)
 80026c4:	681a      	ldr	r2, [r3, #0]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	4413      	add	r3, r2
 80026ca:	693a      	ldr	r2, [r7, #16]
 80026cc:	429a      	cmp	r2, r3
 80026ce:	d207      	bcs.n	80026e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80026d0:	f00c faca 	bl	800ec68 <__errno>
 80026d4:	4603      	mov	r3, r0
 80026d6:	220c      	movs	r2, #12
 80026d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80026da:	f04f 33ff 	mov.w	r3, #4294967295
 80026de:	e009      	b.n	80026f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80026e0:	4b08      	ldr	r3, [pc, #32]	@ (8002704 <_sbrk+0x64>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80026e6:	4b07      	ldr	r3, [pc, #28]	@ (8002704 <_sbrk+0x64>)
 80026e8:	681a      	ldr	r2, [r3, #0]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	4413      	add	r3, r2
 80026ee:	4a05      	ldr	r2, [pc, #20]	@ (8002704 <_sbrk+0x64>)
 80026f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80026f2:	68fb      	ldr	r3, [r7, #12]
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	3718      	adds	r7, #24
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}
 80026fc:	20018000 	.word	0x20018000
 8002700:	00000400 	.word	0x00000400
 8002704:	20000a18 	.word	0x20000a18
 8002708:	200040b0 	.word	0x200040b0

0800270c <SystemInit>:
=======
 800271e:	4b10      	ldr	r3, [pc, #64]	@ (8002760 <_sbrk+0x64>)
 8002720:	681a      	ldr	r2, [r3, #0]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	4413      	add	r3, r2
 8002726:	693a      	ldr	r2, [r7, #16]
 8002728:	429a      	cmp	r2, r3
 800272a:	d207      	bcs.n	800273c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800272c:	f008 feec 	bl	800b508 <__errno>
 8002730:	4603      	mov	r3, r0
 8002732:	220c      	movs	r2, #12
 8002734:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002736:	f04f 33ff 	mov.w	r3, #4294967295
 800273a:	e009      	b.n	8002750 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800273c:	4b08      	ldr	r3, [pc, #32]	@ (8002760 <_sbrk+0x64>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002742:	4b07      	ldr	r3, [pc, #28]	@ (8002760 <_sbrk+0x64>)
 8002744:	681a      	ldr	r2, [r3, #0]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	4413      	add	r3, r2
 800274a:	4a05      	ldr	r2, [pc, #20]	@ (8002760 <_sbrk+0x64>)
 800274c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800274e:	68fb      	ldr	r3, [r7, #12]
}
 8002750:	4618      	mov	r0, r3
 8002752:	3718      	adds	r7, #24
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}
 8002758:	20018000 	.word	0x20018000
 800275c:	00000400 	.word	0x00000400
 8002760:	200005fc 	.word	0x200005fc
 8002764:	20000798 	.word	0x20000798

08002768 <SystemInit>:
>>>>>>> Stashed changes
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
<<<<<<< Updated upstream
 800270c:	b480      	push	{r7}
 800270e:	af00      	add	r7, sp, #0
=======
 8002768:	b480      	push	{r7}
 800276a:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
<<<<<<< Updated upstream
 8002710:	4b06      	ldr	r3, [pc, #24]	@ (800272c <SystemInit+0x20>)
 8002712:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002716:	4a05      	ldr	r2, [pc, #20]	@ (800272c <SystemInit+0x20>)
 8002718:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800271c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8002720:	bf00      	nop
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr
 800272a:	bf00      	nop
 800272c:	e000ed00 	.word	0xe000ed00

08002730 <Reset_Handler>:
=======
 800276c:	4b06      	ldr	r3, [pc, #24]	@ (8002788 <SystemInit+0x20>)
 800276e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002772:	4a05      	ldr	r2, [pc, #20]	@ (8002788 <SystemInit+0x20>)
 8002774:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002778:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 800277c:	bf00      	nop
 800277e:	46bd      	mov	sp, r7
 8002780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002784:	4770      	bx	lr
 8002786:	bf00      	nop
 8002788:	e000ed00 	.word	0xe000ed00

0800278c <Reset_Handler>:
>>>>>>> Stashed changes

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
<<<<<<< Updated upstream
 8002730:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002768 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002734:	f7ff ffea 	bl	800270c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002738:	480c      	ldr	r0, [pc, #48]	@ (800276c <LoopForever+0x6>)
  ldr r1, =_edata
 800273a:	490d      	ldr	r1, [pc, #52]	@ (8002770 <LoopForever+0xa>)
  ldr r2, =_sidata
 800273c:	4a0d      	ldr	r2, [pc, #52]	@ (8002774 <LoopForever+0xe>)
  movs r3, #0
 800273e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002740:	e002      	b.n	8002748 <LoopCopyDataInit>

08002742 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002742:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002744:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002746:	3304      	adds	r3, #4

08002748 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002748:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800274a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800274c:	d3f9      	bcc.n	8002742 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800274e:	4a0a      	ldr	r2, [pc, #40]	@ (8002778 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002750:	4c0a      	ldr	r4, [pc, #40]	@ (800277c <LoopForever+0x16>)
  movs r3, #0
 8002752:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002754:	e001      	b.n	800275a <LoopFillZerobss>

08002756 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002756:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002758:	3204      	adds	r2, #4

0800275a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800275a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800275c:	d3fb      	bcc.n	8002756 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800275e:	f00c fa89 	bl	800ec74 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002762:	f7fe fc93 	bl	800108c <main>

08002766 <LoopForever>:

LoopForever:
    b LoopForever
 8002766:	e7fe      	b.n	8002766 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002768:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800276c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002770:	200001fc 	.word	0x200001fc
  ldr r2, =_sidata
 8002774:	080114c0 	.word	0x080114c0
  ldr r2, =_sbss
 8002778:	200001fc 	.word	0x200001fc
  ldr r4, =_ebss
 800277c:	200040ac 	.word	0x200040ac

08002780 <ADC1_2_IRQHandler>:
=======
 800278c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80027c4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002790:	f7ff ffea 	bl	8002768 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002794:	480c      	ldr	r0, [pc, #48]	@ (80027c8 <LoopForever+0x6>)
  ldr r1, =_edata
 8002796:	490d      	ldr	r1, [pc, #52]	@ (80027cc <LoopForever+0xa>)
  ldr r2, =_sidata
 8002798:	4a0d      	ldr	r2, [pc, #52]	@ (80027d0 <LoopForever+0xe>)
  movs r3, #0
 800279a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800279c:	e002      	b.n	80027a4 <LoopCopyDataInit>

0800279e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800279e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027a2:	3304      	adds	r3, #4

080027a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80027a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80027a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80027a8:	d3f9      	bcc.n	800279e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80027aa:	4a0a      	ldr	r2, [pc, #40]	@ (80027d4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80027ac:	4c0a      	ldr	r4, [pc, #40]	@ (80027d8 <LoopForever+0x16>)
  movs r3, #0
 80027ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80027b0:	e001      	b.n	80027b6 <LoopFillZerobss>

080027b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80027b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80027b4:	3204      	adds	r2, #4

080027b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80027b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80027b8:	d3fb      	bcc.n	80027b2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80027ba:	f008 feab 	bl	800b514 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80027be:	f7fe fd65 	bl	800128c <main>

080027c2 <LoopForever>:

LoopForever:
    b LoopForever
 80027c2:	e7fe      	b.n	80027c2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80027c4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80027c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80027cc:	20000208 	.word	0x20000208
  ldr r2, =_sidata
 80027d0:	0800dd78 	.word	0x0800dd78
  ldr r2, =_sbss
 80027d4:	20000208 	.word	0x20000208
  ldr r4, =_ebss
 80027d8:	20000798 	.word	0x20000798

080027dc <ADC1_2_IRQHandler>:
>>>>>>> Stashed changes
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
<<<<<<< Updated upstream
 8002780:	e7fe      	b.n	8002780 <ADC1_2_IRQHandler>
	...

08002784 <HAL_Init>:
=======
 80027dc:	e7fe      	b.n	80027dc <ADC1_2_IRQHandler>
	...

080027e0 <HAL_Init>:
>>>>>>> Stashed changes
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
<<<<<<< Updated upstream
 8002784:	b580      	push	{r7, lr}
 8002786:	b082      	sub	sp, #8
 8002788:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800278a:	2300      	movs	r3, #0
 800278c:	71fb      	strb	r3, [r7, #7]
=======
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b082      	sub	sp, #8
 80027e4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80027e6:	2300      	movs	r3, #0
 80027e8:	71fb      	strb	r3, [r7, #7]
>>>>>>> Stashed changes
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
<<<<<<< Updated upstream
 800278e:	4b0c      	ldr	r3, [pc, #48]	@ (80027c0 <HAL_Init+0x3c>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a0b      	ldr	r2, [pc, #44]	@ (80027c0 <HAL_Init+0x3c>)
 8002794:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002798:	6013      	str	r3, [r2, #0]
=======
 80027ea:	4b0c      	ldr	r3, [pc, #48]	@ (800281c <HAL_Init+0x3c>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a0b      	ldr	r2, [pc, #44]	@ (800281c <HAL_Init+0x3c>)
 80027f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027f4:	6013      	str	r3, [r2, #0]
>>>>>>> Stashed changes
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
<<<<<<< Updated upstream
 800279a:	2003      	movs	r0, #3
 800279c:	f000 f903 	bl	80029a6 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80027a0:	200f      	movs	r0, #15
 80027a2:	f7ff fe2b 	bl	80023fc <HAL_InitTick>
 80027a6:	4603      	mov	r3, r0
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d002      	beq.n	80027b2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80027ac:	2301      	movs	r3, #1
 80027ae:	71fb      	strb	r3, [r7, #7]
 80027b0:	e001      	b.n	80027b6 <HAL_Init+0x32>
=======
 80027f6:	2003      	movs	r0, #3
 80027f8:	f000 f903 	bl	8002a02 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80027fc:	200f      	movs	r0, #15
 80027fe:	f7ff fe1d 	bl	800243c <HAL_InitTick>
 8002802:	4603      	mov	r3, r0
 8002804:	2b00      	cmp	r3, #0
 8002806:	d002      	beq.n	800280e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002808:	2301      	movs	r3, #1
 800280a:	71fb      	strb	r3, [r7, #7]
 800280c:	e001      	b.n	8002812 <HAL_Init+0x32>
>>>>>>> Stashed changes
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
<<<<<<< Updated upstream
 80027b2:	f7ff fcc1 	bl	8002138 <HAL_MspInit>
=======
 800280e:	f7ff fc1d 	bl	800204c <HAL_MspInit>
>>>>>>> Stashed changes
  }

  /* Return function status */
  return status;
<<<<<<< Updated upstream
 80027b6:	79fb      	ldrb	r3, [r7, #7]
}
 80027b8:	4618      	mov	r0, r3
 80027ba:	3708      	adds	r7, #8
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}
 80027c0:	40022000 	.word	0x40022000

080027c4 <HAL_IncTick>:
=======
 8002812:	79fb      	ldrb	r3, [r7, #7]
}
 8002814:	4618      	mov	r0, r3
 8002816:	3708      	adds	r7, #8
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}
 800281c:	40022000 	.word	0x40022000

08002820 <HAL_IncTick>:
>>>>>>> Stashed changes
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
<<<<<<< Updated upstream
 80027c4:	b480      	push	{r7}
 80027c6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80027c8:	4b06      	ldr	r3, [pc, #24]	@ (80027e4 <HAL_IncTick+0x20>)
 80027ca:	781b      	ldrb	r3, [r3, #0]
 80027cc:	461a      	mov	r2, r3
 80027ce:	4b06      	ldr	r3, [pc, #24]	@ (80027e8 <HAL_IncTick+0x24>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4413      	add	r3, r2
 80027d4:	4a04      	ldr	r2, [pc, #16]	@ (80027e8 <HAL_IncTick+0x24>)
 80027d6:	6013      	str	r3, [r2, #0]
}
 80027d8:	bf00      	nop
 80027da:	46bd      	mov	sp, r7
 80027dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e0:	4770      	bx	lr
 80027e2:	bf00      	nop
 80027e4:	20000014 	.word	0x20000014
 80027e8:	20000a1c 	.word	0x20000a1c

080027ec <HAL_GetTick>:
=======
 8002820:	b480      	push	{r7}
 8002822:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002824:	4b06      	ldr	r3, [pc, #24]	@ (8002840 <HAL_IncTick+0x20>)
 8002826:	781b      	ldrb	r3, [r3, #0]
 8002828:	461a      	mov	r2, r3
 800282a:	4b06      	ldr	r3, [pc, #24]	@ (8002844 <HAL_IncTick+0x24>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4413      	add	r3, r2
 8002830:	4a04      	ldr	r2, [pc, #16]	@ (8002844 <HAL_IncTick+0x24>)
 8002832:	6013      	str	r3, [r2, #0]
}
 8002834:	bf00      	nop
 8002836:	46bd      	mov	sp, r7
 8002838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283c:	4770      	bx	lr
 800283e:	bf00      	nop
 8002840:	20000014 	.word	0x20000014
 8002844:	20000600 	.word	0x20000600

08002848 <HAL_GetTick>:
>>>>>>> Stashed changes
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
<<<<<<< Updated upstream
 80027ec:	b480      	push	{r7}
 80027ee:	af00      	add	r7, sp, #0
  return uwTick;
 80027f0:	4b03      	ldr	r3, [pc, #12]	@ (8002800 <HAL_GetTick+0x14>)
 80027f2:	681b      	ldr	r3, [r3, #0]
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	46bd      	mov	sp, r7
 80027f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fc:	4770      	bx	lr
 80027fe:	bf00      	nop
 8002800:	20000a1c 	.word	0x20000a1c

08002804 <HAL_Delay>:
=======
 8002848:	b480      	push	{r7}
 800284a:	af00      	add	r7, sp, #0
  return uwTick;
 800284c:	4b03      	ldr	r3, [pc, #12]	@ (800285c <HAL_GetTick+0x14>)
 800284e:	681b      	ldr	r3, [r3, #0]
}
 8002850:	4618      	mov	r0, r3
 8002852:	46bd      	mov	sp, r7
 8002854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002858:	4770      	bx	lr
 800285a:	bf00      	nop
 800285c:	20000600 	.word	0x20000600

08002860 <HAL_Delay>:
>>>>>>> Stashed changes
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
<<<<<<< Updated upstream
 8002804:	b580      	push	{r7, lr}
 8002806:	b084      	sub	sp, #16
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800280c:	f7ff ffee 	bl	80027ec <HAL_GetTick>
 8002810:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	f1b3 3fff 	cmp.w	r3, #4294967295
 800281c:	d005      	beq.n	800282a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800281e:	4b0a      	ldr	r3, [pc, #40]	@ (8002848 <HAL_Delay+0x44>)
 8002820:	781b      	ldrb	r3, [r3, #0]
 8002822:	461a      	mov	r2, r3
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	4413      	add	r3, r2
 8002828:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800282a:	bf00      	nop
 800282c:	f7ff ffde 	bl	80027ec <HAL_GetTick>
 8002830:	4602      	mov	r2, r0
 8002832:	68bb      	ldr	r3, [r7, #8]
 8002834:	1ad3      	subs	r3, r2, r3
 8002836:	68fa      	ldr	r2, [r7, #12]
 8002838:	429a      	cmp	r2, r3
 800283a:	d8f7      	bhi.n	800282c <HAL_Delay+0x28>
  {
  }
}
 800283c:	bf00      	nop
 800283e:	bf00      	nop
 8002840:	3710      	adds	r7, #16
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}
 8002846:	bf00      	nop
 8002848:	20000014 	.word	0x20000014

0800284c <__NVIC_SetPriorityGrouping>:
=======
 8002860:	b580      	push	{r7, lr}
 8002862:	b084      	sub	sp, #16
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002868:	f7ff ffee 	bl	8002848 <HAL_GetTick>
 800286c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002878:	d005      	beq.n	8002886 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800287a:	4b0a      	ldr	r3, [pc, #40]	@ (80028a4 <HAL_Delay+0x44>)
 800287c:	781b      	ldrb	r3, [r3, #0]
 800287e:	461a      	mov	r2, r3
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	4413      	add	r3, r2
 8002884:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002886:	bf00      	nop
 8002888:	f7ff ffde 	bl	8002848 <HAL_GetTick>
 800288c:	4602      	mov	r2, r0
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	1ad3      	subs	r3, r2, r3
 8002892:	68fa      	ldr	r2, [r7, #12]
 8002894:	429a      	cmp	r2, r3
 8002896:	d8f7      	bhi.n	8002888 <HAL_Delay+0x28>
  {
  }
}
 8002898:	bf00      	nop
 800289a:	bf00      	nop
 800289c:	3710      	adds	r7, #16
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}
 80028a2:	bf00      	nop
 80028a4:	20000014 	.word	0x20000014

080028a8 <__NVIC_SetPriorityGrouping>:
>>>>>>> Stashed changes
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
<<<<<<< Updated upstream
 800284c:	b480      	push	{r7}
 800284e:	b085      	sub	sp, #20
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	f003 0307 	and.w	r3, r3, #7
 800285a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800285c:	4b0c      	ldr	r3, [pc, #48]	@ (8002890 <__NVIC_SetPriorityGrouping+0x44>)
 800285e:	68db      	ldr	r3, [r3, #12]
 8002860:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002862:	68ba      	ldr	r2, [r7, #8]
 8002864:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002868:	4013      	ands	r3, r2
 800286a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002874:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002878:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800287c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800287e:	4a04      	ldr	r2, [pc, #16]	@ (8002890 <__NVIC_SetPriorityGrouping+0x44>)
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	60d3      	str	r3, [r2, #12]
}
 8002884:	bf00      	nop
 8002886:	3714      	adds	r7, #20
 8002888:	46bd      	mov	sp, r7
 800288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288e:	4770      	bx	lr
 8002890:	e000ed00 	.word	0xe000ed00

08002894 <__NVIC_GetPriorityGrouping>:
=======
 80028a8:	b480      	push	{r7}
 80028aa:	b085      	sub	sp, #20
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	f003 0307 	and.w	r3, r3, #7
 80028b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028b8:	4b0c      	ldr	r3, [pc, #48]	@ (80028ec <__NVIC_SetPriorityGrouping+0x44>)
 80028ba:	68db      	ldr	r3, [r3, #12]
 80028bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028be:	68ba      	ldr	r2, [r7, #8]
 80028c0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80028c4:	4013      	ands	r3, r2
 80028c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028d0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80028d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80028d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028da:	4a04      	ldr	r2, [pc, #16]	@ (80028ec <__NVIC_SetPriorityGrouping+0x44>)
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	60d3      	str	r3, [r2, #12]
}
 80028e0:	bf00      	nop
 80028e2:	3714      	adds	r7, #20
 80028e4:	46bd      	mov	sp, r7
 80028e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ea:	4770      	bx	lr
 80028ec:	e000ed00 	.word	0xe000ed00

080028f0 <__NVIC_GetPriorityGrouping>:
>>>>>>> Stashed changes
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
<<<<<<< Updated upstream
 8002894:	b480      	push	{r7}
 8002896:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002898:	4b04      	ldr	r3, [pc, #16]	@ (80028ac <__NVIC_GetPriorityGrouping+0x18>)
 800289a:	68db      	ldr	r3, [r3, #12]
 800289c:	0a1b      	lsrs	r3, r3, #8
 800289e:	f003 0307 	and.w	r3, r3, #7
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	46bd      	mov	sp, r7
 80028a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028aa:	4770      	bx	lr
 80028ac:	e000ed00 	.word	0xe000ed00

080028b0 <__NVIC_EnableIRQ>:
=======
 80028f0:	b480      	push	{r7}
 80028f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028f4:	4b04      	ldr	r3, [pc, #16]	@ (8002908 <__NVIC_GetPriorityGrouping+0x18>)
 80028f6:	68db      	ldr	r3, [r3, #12]
 80028f8:	0a1b      	lsrs	r3, r3, #8
 80028fa:	f003 0307 	and.w	r3, r3, #7
}
 80028fe:	4618      	mov	r0, r3
 8002900:	46bd      	mov	sp, r7
 8002902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002906:	4770      	bx	lr
 8002908:	e000ed00 	.word	0xe000ed00

0800290c <__NVIC_EnableIRQ>:
>>>>>>> Stashed changes
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
<<<<<<< Updated upstream
 80028b0:	b480      	push	{r7}
 80028b2:	b083      	sub	sp, #12
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	4603      	mov	r3, r0
 80028b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	db0b      	blt.n	80028da <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028c2:	79fb      	ldrb	r3, [r7, #7]
 80028c4:	f003 021f 	and.w	r2, r3, #31
 80028c8:	4907      	ldr	r1, [pc, #28]	@ (80028e8 <__NVIC_EnableIRQ+0x38>)
 80028ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ce:	095b      	lsrs	r3, r3, #5
 80028d0:	2001      	movs	r0, #1
 80028d2:	fa00 f202 	lsl.w	r2, r0, r2
 80028d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80028da:	bf00      	nop
 80028dc:	370c      	adds	r7, #12
 80028de:	46bd      	mov	sp, r7
 80028e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e4:	4770      	bx	lr
 80028e6:	bf00      	nop
 80028e8:	e000e100 	.word	0xe000e100

080028ec <__NVIC_SetPriority>:
=======
 800290c:	b480      	push	{r7}
 800290e:	b083      	sub	sp, #12
 8002910:	af00      	add	r7, sp, #0
 8002912:	4603      	mov	r3, r0
 8002914:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002916:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800291a:	2b00      	cmp	r3, #0
 800291c:	db0b      	blt.n	8002936 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800291e:	79fb      	ldrb	r3, [r7, #7]
 8002920:	f003 021f 	and.w	r2, r3, #31
 8002924:	4907      	ldr	r1, [pc, #28]	@ (8002944 <__NVIC_EnableIRQ+0x38>)
 8002926:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800292a:	095b      	lsrs	r3, r3, #5
 800292c:	2001      	movs	r0, #1
 800292e:	fa00 f202 	lsl.w	r2, r0, r2
 8002932:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002936:	bf00      	nop
 8002938:	370c      	adds	r7, #12
 800293a:	46bd      	mov	sp, r7
 800293c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002940:	4770      	bx	lr
 8002942:	bf00      	nop
 8002944:	e000e100 	.word	0xe000e100

08002948 <__NVIC_SetPriority>:
>>>>>>> Stashed changes
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
<<<<<<< Updated upstream
 80028ec:	b480      	push	{r7}
 80028ee:	b083      	sub	sp, #12
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	4603      	mov	r3, r0
 80028f4:	6039      	str	r1, [r7, #0]
 80028f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	db0a      	blt.n	8002916 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	b2da      	uxtb	r2, r3
 8002904:	490c      	ldr	r1, [pc, #48]	@ (8002938 <__NVIC_SetPriority+0x4c>)
 8002906:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800290a:	0112      	lsls	r2, r2, #4
 800290c:	b2d2      	uxtb	r2, r2
 800290e:	440b      	add	r3, r1
 8002910:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
=======
 8002948:	b480      	push	{r7}
 800294a:	b083      	sub	sp, #12
 800294c:	af00      	add	r7, sp, #0
 800294e:	4603      	mov	r3, r0
 8002950:	6039      	str	r1, [r7, #0]
 8002952:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002954:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002958:	2b00      	cmp	r3, #0
 800295a:	db0a      	blt.n	8002972 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	b2da      	uxtb	r2, r3
 8002960:	490c      	ldr	r1, [pc, #48]	@ (8002994 <__NVIC_SetPriority+0x4c>)
 8002962:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002966:	0112      	lsls	r2, r2, #4
 8002968:	b2d2      	uxtb	r2, r2
 800296a:	440b      	add	r3, r1
 800296c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
>>>>>>> Stashed changes
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
<<<<<<< Updated upstream
 8002914:	e00a      	b.n	800292c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	b2da      	uxtb	r2, r3
 800291a:	4908      	ldr	r1, [pc, #32]	@ (800293c <__NVIC_SetPriority+0x50>)
 800291c:	79fb      	ldrb	r3, [r7, #7]
 800291e:	f003 030f 	and.w	r3, r3, #15
 8002922:	3b04      	subs	r3, #4
 8002924:	0112      	lsls	r2, r2, #4
 8002926:	b2d2      	uxtb	r2, r2
 8002928:	440b      	add	r3, r1
 800292a:	761a      	strb	r2, [r3, #24]
}
 800292c:	bf00      	nop
 800292e:	370c      	adds	r7, #12
 8002930:	46bd      	mov	sp, r7
 8002932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002936:	4770      	bx	lr
 8002938:	e000e100 	.word	0xe000e100
 800293c:	e000ed00 	.word	0xe000ed00

08002940 <NVIC_EncodePriority>:
=======
 8002970:	e00a      	b.n	8002988 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	b2da      	uxtb	r2, r3
 8002976:	4908      	ldr	r1, [pc, #32]	@ (8002998 <__NVIC_SetPriority+0x50>)
 8002978:	79fb      	ldrb	r3, [r7, #7]
 800297a:	f003 030f 	and.w	r3, r3, #15
 800297e:	3b04      	subs	r3, #4
 8002980:	0112      	lsls	r2, r2, #4
 8002982:	b2d2      	uxtb	r2, r2
 8002984:	440b      	add	r3, r1
 8002986:	761a      	strb	r2, [r3, #24]
}
 8002988:	bf00      	nop
 800298a:	370c      	adds	r7, #12
 800298c:	46bd      	mov	sp, r7
 800298e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002992:	4770      	bx	lr
 8002994:	e000e100 	.word	0xe000e100
 8002998:	e000ed00 	.word	0xe000ed00

0800299c <NVIC_EncodePriority>:
>>>>>>> Stashed changes
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
<<<<<<< Updated upstream
 8002940:	b480      	push	{r7}
 8002942:	b089      	sub	sp, #36	@ 0x24
 8002944:	af00      	add	r7, sp, #0
 8002946:	60f8      	str	r0, [r7, #12]
 8002948:	60b9      	str	r1, [r7, #8]
 800294a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	f003 0307 	and.w	r3, r3, #7
 8002952:	61fb      	str	r3, [r7, #28]
=======
 800299c:	b480      	push	{r7}
 800299e:	b089      	sub	sp, #36	@ 0x24
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	60f8      	str	r0, [r7, #12]
 80029a4:	60b9      	str	r1, [r7, #8]
 80029a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	f003 0307 	and.w	r3, r3, #7
 80029ae:	61fb      	str	r3, [r7, #28]
>>>>>>> Stashed changes
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
<<<<<<< Updated upstream
 8002954:	69fb      	ldr	r3, [r7, #28]
 8002956:	f1c3 0307 	rsb	r3, r3, #7
 800295a:	2b04      	cmp	r3, #4
 800295c:	bf28      	it	cs
 800295e:	2304      	movcs	r3, #4
 8002960:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002962:	69fb      	ldr	r3, [r7, #28]
 8002964:	3304      	adds	r3, #4
 8002966:	2b06      	cmp	r3, #6
 8002968:	d902      	bls.n	8002970 <NVIC_EncodePriority+0x30>
 800296a:	69fb      	ldr	r3, [r7, #28]
 800296c:	3b03      	subs	r3, #3
 800296e:	e000      	b.n	8002972 <NVIC_EncodePriority+0x32>
 8002970:	2300      	movs	r3, #0
 8002972:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002974:	f04f 32ff 	mov.w	r2, #4294967295
 8002978:	69bb      	ldr	r3, [r7, #24]
 800297a:	fa02 f303 	lsl.w	r3, r2, r3
 800297e:	43da      	mvns	r2, r3
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	401a      	ands	r2, r3
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002988:	f04f 31ff 	mov.w	r1, #4294967295
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	fa01 f303 	lsl.w	r3, r1, r3
 8002992:	43d9      	mvns	r1, r3
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002998:	4313      	orrs	r3, r2
         );
}
 800299a:	4618      	mov	r0, r3
 800299c:	3724      	adds	r7, #36	@ 0x24
 800299e:	46bd      	mov	sp, r7
 80029a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a4:	4770      	bx	lr

080029a6 <HAL_NVIC_SetPriorityGrouping>:
=======
 80029b0:	69fb      	ldr	r3, [r7, #28]
 80029b2:	f1c3 0307 	rsb	r3, r3, #7
 80029b6:	2b04      	cmp	r3, #4
 80029b8:	bf28      	it	cs
 80029ba:	2304      	movcs	r3, #4
 80029bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029be:	69fb      	ldr	r3, [r7, #28]
 80029c0:	3304      	adds	r3, #4
 80029c2:	2b06      	cmp	r3, #6
 80029c4:	d902      	bls.n	80029cc <NVIC_EncodePriority+0x30>
 80029c6:	69fb      	ldr	r3, [r7, #28]
 80029c8:	3b03      	subs	r3, #3
 80029ca:	e000      	b.n	80029ce <NVIC_EncodePriority+0x32>
 80029cc:	2300      	movs	r3, #0
 80029ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029d0:	f04f 32ff 	mov.w	r2, #4294967295
 80029d4:	69bb      	ldr	r3, [r7, #24]
 80029d6:	fa02 f303 	lsl.w	r3, r2, r3
 80029da:	43da      	mvns	r2, r3
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	401a      	ands	r2, r3
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029e4:	f04f 31ff 	mov.w	r1, #4294967295
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	fa01 f303 	lsl.w	r3, r1, r3
 80029ee:	43d9      	mvns	r1, r3
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029f4:	4313      	orrs	r3, r2
         );
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	3724      	adds	r7, #36	@ 0x24
 80029fa:	46bd      	mov	sp, r7
 80029fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a00:	4770      	bx	lr

08002a02 <HAL_NVIC_SetPriorityGrouping>:
>>>>>>> Stashed changes
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
<<<<<<< Updated upstream
 80029a6:	b580      	push	{r7, lr}
 80029a8:	b082      	sub	sp, #8
 80029aa:	af00      	add	r7, sp, #0
 80029ac:	6078      	str	r0, [r7, #4]
=======
 8002a02:	b580      	push	{r7, lr}
 8002a04:	b082      	sub	sp, #8
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
<<<<<<< Updated upstream
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	f7ff ff4c 	bl	800284c <__NVIC_SetPriorityGrouping>
}
 80029b4:	bf00      	nop
 80029b6:	3708      	adds	r7, #8
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}

080029bc <HAL_NVIC_SetPriority>:
=======
 8002a0a:	6878      	ldr	r0, [r7, #4]
 8002a0c:	f7ff ff4c 	bl	80028a8 <__NVIC_SetPriorityGrouping>
}
 8002a10:	bf00      	nop
 8002a12:	3708      	adds	r7, #8
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}

08002a18 <HAL_NVIC_SetPriority>:
>>>>>>> Stashed changes
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
<<<<<<< Updated upstream
 80029bc:	b580      	push	{r7, lr}
 80029be:	b086      	sub	sp, #24
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	4603      	mov	r3, r0
 80029c4:	60b9      	str	r1, [r7, #8]
 80029c6:	607a      	str	r2, [r7, #4]
 80029c8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80029ca:	2300      	movs	r3, #0
 80029cc:	617b      	str	r3, [r7, #20]
=======
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b086      	sub	sp, #24
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	4603      	mov	r3, r0
 8002a20:	60b9      	str	r1, [r7, #8]
 8002a22:	607a      	str	r2, [r7, #4]
 8002a24:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002a26:	2300      	movs	r3, #0
 8002a28:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
<<<<<<< Updated upstream
 80029ce:	f7ff ff61 	bl	8002894 <__NVIC_GetPriorityGrouping>
 80029d2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029d4:	687a      	ldr	r2, [r7, #4]
 80029d6:	68b9      	ldr	r1, [r7, #8]
 80029d8:	6978      	ldr	r0, [r7, #20]
 80029da:	f7ff ffb1 	bl	8002940 <NVIC_EncodePriority>
 80029de:	4602      	mov	r2, r0
 80029e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029e4:	4611      	mov	r1, r2
 80029e6:	4618      	mov	r0, r3
 80029e8:	f7ff ff80 	bl	80028ec <__NVIC_SetPriority>
}
 80029ec:	bf00      	nop
 80029ee:	3718      	adds	r7, #24
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}

080029f4 <HAL_NVIC_EnableIRQ>:
=======
 8002a2a:	f7ff ff61 	bl	80028f0 <__NVIC_GetPriorityGrouping>
 8002a2e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a30:	687a      	ldr	r2, [r7, #4]
 8002a32:	68b9      	ldr	r1, [r7, #8]
 8002a34:	6978      	ldr	r0, [r7, #20]
 8002a36:	f7ff ffb1 	bl	800299c <NVIC_EncodePriority>
 8002a3a:	4602      	mov	r2, r0
 8002a3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a40:	4611      	mov	r1, r2
 8002a42:	4618      	mov	r0, r3
 8002a44:	f7ff ff80 	bl	8002948 <__NVIC_SetPriority>
}
 8002a48:	bf00      	nop
 8002a4a:	3718      	adds	r7, #24
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}

08002a50 <HAL_NVIC_EnableIRQ>:
>>>>>>> Stashed changes
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
<<<<<<< Updated upstream
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b082      	sub	sp, #8
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	4603      	mov	r3, r0
 80029fc:	71fb      	strb	r3, [r7, #7]
=======
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b082      	sub	sp, #8
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	4603      	mov	r3, r0
 8002a58:	71fb      	strb	r3, [r7, #7]
>>>>>>> Stashed changes
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
<<<<<<< Updated upstream
 80029fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a02:	4618      	mov	r0, r3
 8002a04:	f7ff ff54 	bl	80028b0 <__NVIC_EnableIRQ>
}
 8002a08:	bf00      	nop
 8002a0a:	3708      	adds	r7, #8
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}

08002a10 <HAL_GPIO_Init>:
=======
 8002a5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f7ff ff54 	bl	800290c <__NVIC_EnableIRQ>
}
 8002a64:	bf00      	nop
 8002a66:	3708      	adds	r7, #8
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}

08002a6c <HAL_GPIO_Init>:
>>>>>>> Stashed changes
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
<<<<<<< Updated upstream
 8002a10:	b480      	push	{r7}
 8002a12:	b087      	sub	sp, #28
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
 8002a18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	617b      	str	r3, [r7, #20]
=======
 8002a6c:	b480      	push	{r7}
 8002a6e:	b087      	sub	sp, #28
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
 8002a74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002a76:	2300      	movs	r3, #0
 8002a78:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
<<<<<<< Updated upstream
 8002a1e:	e17f      	b.n	8002d20 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	681a      	ldr	r2, [r3, #0]
 8002a24:	2101      	movs	r1, #1
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	fa01 f303 	lsl.w	r3, r1, r3
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	f000 8171 	beq.w	8002d1a <HAL_GPIO_Init+0x30a>
=======
 8002a7a:	e17f      	b.n	8002d7c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	2101      	movs	r1, #1
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	fa01 f303 	lsl.w	r3, r1, r3
 8002a88:	4013      	ands	r3, r2
 8002a8a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	f000 8171 	beq.w	8002d76 <HAL_GPIO_Init+0x30a>
>>>>>>> Stashed changes
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
<<<<<<< Updated upstream
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	f003 0303 	and.w	r3, r3, #3
 8002a40:	2b01      	cmp	r3, #1
 8002a42:	d005      	beq.n	8002a50 <HAL_GPIO_Init+0x40>
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	f003 0303 	and.w	r3, r3, #3
 8002a4c:	2b02      	cmp	r3, #2
 8002a4e:	d130      	bne.n	8002ab2 <HAL_GPIO_Init+0xa2>
=======
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	f003 0303 	and.w	r3, r3, #3
 8002a9c:	2b01      	cmp	r3, #1
 8002a9e:	d005      	beq.n	8002aac <HAL_GPIO_Init+0x40>
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	f003 0303 	and.w	r3, r3, #3
 8002aa8:	2b02      	cmp	r3, #2
 8002aaa:	d130      	bne.n	8002b0e <HAL_GPIO_Init+0xa2>
>>>>>>> Stashed changes
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
<<<<<<< Updated upstream
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	005b      	lsls	r3, r3, #1
 8002a5a:	2203      	movs	r2, #3
 8002a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a60:	43db      	mvns	r3, r3
 8002a62:	693a      	ldr	r2, [r7, #16]
 8002a64:	4013      	ands	r3, r2
 8002a66:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	68da      	ldr	r2, [r3, #12]
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	005b      	lsls	r3, r3, #1
 8002a70:	fa02 f303 	lsl.w	r3, r2, r3
 8002a74:	693a      	ldr	r2, [r7, #16]
 8002a76:	4313      	orrs	r3, r2
 8002a78:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	693a      	ldr	r2, [r7, #16]
 8002a7e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002a86:	2201      	movs	r2, #1
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8e:	43db      	mvns	r3, r3
 8002a90:	693a      	ldr	r2, [r7, #16]
 8002a92:	4013      	ands	r3, r2
 8002a94:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	091b      	lsrs	r3, r3, #4
 8002a9c:	f003 0201 	and.w	r2, r3, #1
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa6:	693a      	ldr	r2, [r7, #16]
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	693a      	ldr	r2, [r7, #16]
 8002ab0:	605a      	str	r2, [r3, #4]
=======
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	689b      	ldr	r3, [r3, #8]
 8002ab0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	005b      	lsls	r3, r3, #1
 8002ab6:	2203      	movs	r2, #3
 8002ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8002abc:	43db      	mvns	r3, r3
 8002abe:	693a      	ldr	r2, [r7, #16]
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	68da      	ldr	r2, [r3, #12]
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	005b      	lsls	r3, r3, #1
 8002acc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad0:	693a      	ldr	r2, [r7, #16]
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	693a      	ldr	r2, [r7, #16]
 8002ada:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aea:	43db      	mvns	r3, r3
 8002aec:	693a      	ldr	r2, [r7, #16]
 8002aee:	4013      	ands	r3, r2
 8002af0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	091b      	lsrs	r3, r3, #4
 8002af8:	f003 0201 	and.w	r2, r3, #1
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	fa02 f303 	lsl.w	r3, r2, r3
 8002b02:	693a      	ldr	r2, [r7, #16]
 8002b04:	4313      	orrs	r3, r2
 8002b06:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	693a      	ldr	r2, [r7, #16]
 8002b0c:	605a      	str	r2, [r3, #4]
>>>>>>> Stashed changes
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
<<<<<<< Updated upstream
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	f003 0303 	and.w	r3, r3, #3
 8002aba:	2b03      	cmp	r3, #3
 8002abc:	d118      	bne.n	8002af0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ac2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8002acc:	43db      	mvns	r3, r3
 8002ace:	693a      	ldr	r2, [r7, #16]
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	08db      	lsrs	r3, r3, #3
 8002ada:	f003 0201 	and.w	r2, r3, #1
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae4:	693a      	ldr	r2, [r7, #16]
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	693a      	ldr	r2, [r7, #16]
 8002aee:	62da      	str	r2, [r3, #44]	@ 0x2c
=======
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	f003 0303 	and.w	r3, r3, #3
 8002b16:	2b03      	cmp	r3, #3
 8002b18:	d118      	bne.n	8002b4c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b1e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002b20:	2201      	movs	r2, #1
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	fa02 f303 	lsl.w	r3, r2, r3
 8002b28:	43db      	mvns	r3, r3
 8002b2a:	693a      	ldr	r2, [r7, #16]
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	08db      	lsrs	r3, r3, #3
 8002b36:	f003 0201 	and.w	r2, r3, #1
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b40:	693a      	ldr	r2, [r7, #16]
 8002b42:	4313      	orrs	r3, r2
 8002b44:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	693a      	ldr	r2, [r7, #16]
 8002b4a:	62da      	str	r2, [r3, #44]	@ 0x2c
>>>>>>> Stashed changes
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
<<<<<<< Updated upstream
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	f003 0303 	and.w	r3, r3, #3
 8002af8:	2b03      	cmp	r3, #3
 8002afa:	d017      	beq.n	8002b2c <HAL_GPIO_Init+0x11c>
=======
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	f003 0303 	and.w	r3, r3, #3
 8002b54:	2b03      	cmp	r3, #3
 8002b56:	d017      	beq.n	8002b88 <HAL_GPIO_Init+0x11c>
>>>>>>> Stashed changes
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
<<<<<<< Updated upstream
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	68db      	ldr	r3, [r3, #12]
 8002b00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	005b      	lsls	r3, r3, #1
 8002b06:	2203      	movs	r2, #3
 8002b08:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0c:	43db      	mvns	r3, r3
 8002b0e:	693a      	ldr	r2, [r7, #16]
 8002b10:	4013      	ands	r3, r2
 8002b12:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	689a      	ldr	r2, [r3, #8]
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	005b      	lsls	r3, r3, #1
 8002b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b20:	693a      	ldr	r2, [r7, #16]
 8002b22:	4313      	orrs	r3, r2
 8002b24:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	693a      	ldr	r2, [r7, #16]
 8002b2a:	60da      	str	r2, [r3, #12]
=======
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	68db      	ldr	r3, [r3, #12]
 8002b5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	005b      	lsls	r3, r3, #1
 8002b62:	2203      	movs	r2, #3
 8002b64:	fa02 f303 	lsl.w	r3, r2, r3
 8002b68:	43db      	mvns	r3, r3
 8002b6a:	693a      	ldr	r2, [r7, #16]
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	689a      	ldr	r2, [r3, #8]
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	005b      	lsls	r3, r3, #1
 8002b78:	fa02 f303 	lsl.w	r3, r2, r3
 8002b7c:	693a      	ldr	r2, [r7, #16]
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	693a      	ldr	r2, [r7, #16]
 8002b86:	60da      	str	r2, [r3, #12]
>>>>>>> Stashed changes
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
<<<<<<< Updated upstream
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	f003 0303 	and.w	r3, r3, #3
 8002b34:	2b02      	cmp	r3, #2
 8002b36:	d123      	bne.n	8002b80 <HAL_GPIO_Init+0x170>
=======
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	f003 0303 	and.w	r3, r3, #3
 8002b90:	2b02      	cmp	r3, #2
 8002b92:	d123      	bne.n	8002bdc <HAL_GPIO_Init+0x170>
>>>>>>> Stashed changes
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
<<<<<<< Updated upstream
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	08da      	lsrs	r2, r3, #3
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	3208      	adds	r2, #8
 8002b40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b44:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	f003 0307 	and.w	r3, r3, #7
 8002b4c:	009b      	lsls	r3, r3, #2
 8002b4e:	220f      	movs	r2, #15
 8002b50:	fa02 f303 	lsl.w	r3, r2, r3
 8002b54:	43db      	mvns	r3, r3
 8002b56:	693a      	ldr	r2, [r7, #16]
 8002b58:	4013      	ands	r3, r2
 8002b5a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	691a      	ldr	r2, [r3, #16]
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	f003 0307 	and.w	r3, r3, #7
 8002b66:	009b      	lsls	r3, r3, #2
 8002b68:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6c:	693a      	ldr	r2, [r7, #16]
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	08da      	lsrs	r2, r3, #3
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	3208      	adds	r2, #8
 8002b7a:	6939      	ldr	r1, [r7, #16]
 8002b7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
=======
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	08da      	lsrs	r2, r3, #3
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	3208      	adds	r2, #8
 8002b9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ba0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	f003 0307 	and.w	r3, r3, #7
 8002ba8:	009b      	lsls	r3, r3, #2
 8002baa:	220f      	movs	r2, #15
 8002bac:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb0:	43db      	mvns	r3, r3
 8002bb2:	693a      	ldr	r2, [r7, #16]
 8002bb4:	4013      	ands	r3, r2
 8002bb6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	691a      	ldr	r2, [r3, #16]
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	f003 0307 	and.w	r3, r3, #7
 8002bc2:	009b      	lsls	r3, r3, #2
 8002bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc8:	693a      	ldr	r2, [r7, #16]
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	08da      	lsrs	r2, r3, #3
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	3208      	adds	r2, #8
 8002bd6:	6939      	ldr	r1, [r7, #16]
 8002bd8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
>>>>>>> Stashed changes
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
<<<<<<< Updated upstream
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	005b      	lsls	r3, r3, #1
 8002b8a:	2203      	movs	r2, #3
 8002b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b90:	43db      	mvns	r3, r3
 8002b92:	693a      	ldr	r2, [r7, #16]
 8002b94:	4013      	ands	r3, r2
 8002b96:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	f003 0203 	and.w	r2, r3, #3
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	005b      	lsls	r3, r3, #1
 8002ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba8:	693a      	ldr	r2, [r7, #16]
 8002baa:	4313      	orrs	r3, r2
 8002bac:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	693a      	ldr	r2, [r7, #16]
 8002bb2:	601a      	str	r2, [r3, #0]
=======
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	005b      	lsls	r3, r3, #1
 8002be6:	2203      	movs	r2, #3
 8002be8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bec:	43db      	mvns	r3, r3
 8002bee:	693a      	ldr	r2, [r7, #16]
 8002bf0:	4013      	ands	r3, r2
 8002bf2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	f003 0203 	and.w	r2, r3, #3
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	005b      	lsls	r3, r3, #1
 8002c00:	fa02 f303 	lsl.w	r3, r2, r3
 8002c04:	693a      	ldr	r2, [r7, #16]
 8002c06:	4313      	orrs	r3, r2
 8002c08:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	693a      	ldr	r2, [r7, #16]
 8002c0e:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
<<<<<<< Updated upstream
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	f000 80ac 	beq.w	8002d1a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bc2:	4b5f      	ldr	r3, [pc, #380]	@ (8002d40 <HAL_GPIO_Init+0x330>)
 8002bc4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002bc6:	4a5e      	ldr	r2, [pc, #376]	@ (8002d40 <HAL_GPIO_Init+0x330>)
 8002bc8:	f043 0301 	orr.w	r3, r3, #1
 8002bcc:	6613      	str	r3, [r2, #96]	@ 0x60
 8002bce:	4b5c      	ldr	r3, [pc, #368]	@ (8002d40 <HAL_GPIO_Init+0x330>)
 8002bd0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002bd2:	f003 0301 	and.w	r3, r3, #1
 8002bd6:	60bb      	str	r3, [r7, #8]
 8002bd8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002bda:	4a5a      	ldr	r2, [pc, #360]	@ (8002d44 <HAL_GPIO_Init+0x334>)
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	089b      	lsrs	r3, r3, #2
 8002be0:	3302      	adds	r3, #2
 8002be2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002be6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	f003 0303 	and.w	r3, r3, #3
 8002bee:	009b      	lsls	r3, r3, #2
 8002bf0:	220f      	movs	r2, #15
 8002bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf6:	43db      	mvns	r3, r3
 8002bf8:	693a      	ldr	r2, [r7, #16]
 8002bfa:	4013      	ands	r3, r2
 8002bfc:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002c04:	d025      	beq.n	8002c52 <HAL_GPIO_Init+0x242>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	4a4f      	ldr	r2, [pc, #316]	@ (8002d48 <HAL_GPIO_Init+0x338>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d01f      	beq.n	8002c4e <HAL_GPIO_Init+0x23e>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	4a4e      	ldr	r2, [pc, #312]	@ (8002d4c <HAL_GPIO_Init+0x33c>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d019      	beq.n	8002c4a <HAL_GPIO_Init+0x23a>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	4a4d      	ldr	r2, [pc, #308]	@ (8002d50 <HAL_GPIO_Init+0x340>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d013      	beq.n	8002c46 <HAL_GPIO_Init+0x236>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	4a4c      	ldr	r2, [pc, #304]	@ (8002d54 <HAL_GPIO_Init+0x344>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d00d      	beq.n	8002c42 <HAL_GPIO_Init+0x232>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	4a4b      	ldr	r2, [pc, #300]	@ (8002d58 <HAL_GPIO_Init+0x348>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d007      	beq.n	8002c3e <HAL_GPIO_Init+0x22e>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	4a4a      	ldr	r2, [pc, #296]	@ (8002d5c <HAL_GPIO_Init+0x34c>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d101      	bne.n	8002c3a <HAL_GPIO_Init+0x22a>
 8002c36:	2306      	movs	r3, #6
 8002c38:	e00c      	b.n	8002c54 <HAL_GPIO_Init+0x244>
 8002c3a:	2307      	movs	r3, #7
 8002c3c:	e00a      	b.n	8002c54 <HAL_GPIO_Init+0x244>
 8002c3e:	2305      	movs	r3, #5
 8002c40:	e008      	b.n	8002c54 <HAL_GPIO_Init+0x244>
 8002c42:	2304      	movs	r3, #4
 8002c44:	e006      	b.n	8002c54 <HAL_GPIO_Init+0x244>
 8002c46:	2303      	movs	r3, #3
 8002c48:	e004      	b.n	8002c54 <HAL_GPIO_Init+0x244>
 8002c4a:	2302      	movs	r3, #2
 8002c4c:	e002      	b.n	8002c54 <HAL_GPIO_Init+0x244>
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e000      	b.n	8002c54 <HAL_GPIO_Init+0x244>
 8002c52:	2300      	movs	r3, #0
 8002c54:	697a      	ldr	r2, [r7, #20]
 8002c56:	f002 0203 	and.w	r2, r2, #3
 8002c5a:	0092      	lsls	r2, r2, #2
 8002c5c:	4093      	lsls	r3, r2
 8002c5e:	693a      	ldr	r2, [r7, #16]
 8002c60:	4313      	orrs	r3, r2
 8002c62:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002c64:	4937      	ldr	r1, [pc, #220]	@ (8002d44 <HAL_GPIO_Init+0x334>)
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	089b      	lsrs	r3, r3, #2
 8002c6a:	3302      	adds	r3, #2
 8002c6c:	693a      	ldr	r2, [r7, #16]
 8002c6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002c72:	4b3b      	ldr	r3, [pc, #236]	@ (8002d60 <HAL_GPIO_Init+0x350>)
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	43db      	mvns	r3, r3
 8002c7c:	693a      	ldr	r2, [r7, #16]
 8002c7e:	4013      	ands	r3, r2
 8002c80:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d003      	beq.n	8002c96 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002c8e:	693a      	ldr	r2, [r7, #16]
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	4313      	orrs	r3, r2
 8002c94:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002c96:	4a32      	ldr	r2, [pc, #200]	@ (8002d60 <HAL_GPIO_Init+0x350>)
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002c9c:	4b30      	ldr	r3, [pc, #192]	@ (8002d60 <HAL_GPIO_Init+0x350>)
 8002c9e:	68db      	ldr	r3, [r3, #12]
 8002ca0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	43db      	mvns	r3, r3
 8002ca6:	693a      	ldr	r2, [r7, #16]
 8002ca8:	4013      	ands	r3, r2
 8002caa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d003      	beq.n	8002cc0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002cb8:	693a      	ldr	r2, [r7, #16]
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002cc0:	4a27      	ldr	r2, [pc, #156]	@ (8002d60 <HAL_GPIO_Init+0x350>)
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002cc6:	4b26      	ldr	r3, [pc, #152]	@ (8002d60 <HAL_GPIO_Init+0x350>)
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	43db      	mvns	r3, r3
 8002cd0:	693a      	ldr	r2, [r7, #16]
 8002cd2:	4013      	ands	r3, r2
 8002cd4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d003      	beq.n	8002cea <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002ce2:	693a      	ldr	r2, [r7, #16]
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002cea:	4a1d      	ldr	r2, [pc, #116]	@ (8002d60 <HAL_GPIO_Init+0x350>)
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002cf0:	4b1b      	ldr	r3, [pc, #108]	@ (8002d60 <HAL_GPIO_Init+0x350>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	43db      	mvns	r3, r3
 8002cfa:	693a      	ldr	r2, [r7, #16]
 8002cfc:	4013      	ands	r3, r2
 8002cfe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d003      	beq.n	8002d14 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002d0c:	693a      	ldr	r2, [r7, #16]
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	4313      	orrs	r3, r2
 8002d12:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002d14:	4a12      	ldr	r2, [pc, #72]	@ (8002d60 <HAL_GPIO_Init+0x350>)
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	6013      	str	r3, [r2, #0]
=======
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	f000 80ac 	beq.w	8002d76 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c1e:	4b5f      	ldr	r3, [pc, #380]	@ (8002d9c <HAL_GPIO_Init+0x330>)
 8002c20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c22:	4a5e      	ldr	r2, [pc, #376]	@ (8002d9c <HAL_GPIO_Init+0x330>)
 8002c24:	f043 0301 	orr.w	r3, r3, #1
 8002c28:	6613      	str	r3, [r2, #96]	@ 0x60
 8002c2a:	4b5c      	ldr	r3, [pc, #368]	@ (8002d9c <HAL_GPIO_Init+0x330>)
 8002c2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c2e:	f003 0301 	and.w	r3, r3, #1
 8002c32:	60bb      	str	r3, [r7, #8]
 8002c34:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002c36:	4a5a      	ldr	r2, [pc, #360]	@ (8002da0 <HAL_GPIO_Init+0x334>)
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	089b      	lsrs	r3, r3, #2
 8002c3c:	3302      	adds	r3, #2
 8002c3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c42:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	f003 0303 	and.w	r3, r3, #3
 8002c4a:	009b      	lsls	r3, r3, #2
 8002c4c:	220f      	movs	r2, #15
 8002c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c52:	43db      	mvns	r3, r3
 8002c54:	693a      	ldr	r2, [r7, #16]
 8002c56:	4013      	ands	r3, r2
 8002c58:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002c60:	d025      	beq.n	8002cae <HAL_GPIO_Init+0x242>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	4a4f      	ldr	r2, [pc, #316]	@ (8002da4 <HAL_GPIO_Init+0x338>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d01f      	beq.n	8002caa <HAL_GPIO_Init+0x23e>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	4a4e      	ldr	r2, [pc, #312]	@ (8002da8 <HAL_GPIO_Init+0x33c>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d019      	beq.n	8002ca6 <HAL_GPIO_Init+0x23a>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	4a4d      	ldr	r2, [pc, #308]	@ (8002dac <HAL_GPIO_Init+0x340>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d013      	beq.n	8002ca2 <HAL_GPIO_Init+0x236>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	4a4c      	ldr	r2, [pc, #304]	@ (8002db0 <HAL_GPIO_Init+0x344>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d00d      	beq.n	8002c9e <HAL_GPIO_Init+0x232>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	4a4b      	ldr	r2, [pc, #300]	@ (8002db4 <HAL_GPIO_Init+0x348>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d007      	beq.n	8002c9a <HAL_GPIO_Init+0x22e>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	4a4a      	ldr	r2, [pc, #296]	@ (8002db8 <HAL_GPIO_Init+0x34c>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d101      	bne.n	8002c96 <HAL_GPIO_Init+0x22a>
 8002c92:	2306      	movs	r3, #6
 8002c94:	e00c      	b.n	8002cb0 <HAL_GPIO_Init+0x244>
 8002c96:	2307      	movs	r3, #7
 8002c98:	e00a      	b.n	8002cb0 <HAL_GPIO_Init+0x244>
 8002c9a:	2305      	movs	r3, #5
 8002c9c:	e008      	b.n	8002cb0 <HAL_GPIO_Init+0x244>
 8002c9e:	2304      	movs	r3, #4
 8002ca0:	e006      	b.n	8002cb0 <HAL_GPIO_Init+0x244>
 8002ca2:	2303      	movs	r3, #3
 8002ca4:	e004      	b.n	8002cb0 <HAL_GPIO_Init+0x244>
 8002ca6:	2302      	movs	r3, #2
 8002ca8:	e002      	b.n	8002cb0 <HAL_GPIO_Init+0x244>
 8002caa:	2301      	movs	r3, #1
 8002cac:	e000      	b.n	8002cb0 <HAL_GPIO_Init+0x244>
 8002cae:	2300      	movs	r3, #0
 8002cb0:	697a      	ldr	r2, [r7, #20]
 8002cb2:	f002 0203 	and.w	r2, r2, #3
 8002cb6:	0092      	lsls	r2, r2, #2
 8002cb8:	4093      	lsls	r3, r2
 8002cba:	693a      	ldr	r2, [r7, #16]
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002cc0:	4937      	ldr	r1, [pc, #220]	@ (8002da0 <HAL_GPIO_Init+0x334>)
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	089b      	lsrs	r3, r3, #2
 8002cc6:	3302      	adds	r3, #2
 8002cc8:	693a      	ldr	r2, [r7, #16]
 8002cca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002cce:	4b3b      	ldr	r3, [pc, #236]	@ (8002dbc <HAL_GPIO_Init+0x350>)
 8002cd0:	689b      	ldr	r3, [r3, #8]
 8002cd2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	43db      	mvns	r3, r3
 8002cd8:	693a      	ldr	r2, [r7, #16]
 8002cda:	4013      	ands	r3, r2
 8002cdc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d003      	beq.n	8002cf2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002cea:	693a      	ldr	r2, [r7, #16]
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002cf2:	4a32      	ldr	r2, [pc, #200]	@ (8002dbc <HAL_GPIO_Init+0x350>)
 8002cf4:	693b      	ldr	r3, [r7, #16]
 8002cf6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002cf8:	4b30      	ldr	r3, [pc, #192]	@ (8002dbc <HAL_GPIO_Init+0x350>)
 8002cfa:	68db      	ldr	r3, [r3, #12]
 8002cfc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	43db      	mvns	r3, r3
 8002d02:	693a      	ldr	r2, [r7, #16]
 8002d04:	4013      	ands	r3, r2
 8002d06:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d003      	beq.n	8002d1c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002d14:	693a      	ldr	r2, [r7, #16]
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002d1c:	4a27      	ldr	r2, [pc, #156]	@ (8002dbc <HAL_GPIO_Init+0x350>)
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002d22:	4b26      	ldr	r3, [pc, #152]	@ (8002dbc <HAL_GPIO_Init+0x350>)
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	43db      	mvns	r3, r3
 8002d2c:	693a      	ldr	r2, [r7, #16]
 8002d2e:	4013      	ands	r3, r2
 8002d30:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d003      	beq.n	8002d46 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002d3e:	693a      	ldr	r2, [r7, #16]
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	4313      	orrs	r3, r2
 8002d44:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002d46:	4a1d      	ldr	r2, [pc, #116]	@ (8002dbc <HAL_GPIO_Init+0x350>)
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002d4c:	4b1b      	ldr	r3, [pc, #108]	@ (8002dbc <HAL_GPIO_Init+0x350>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	43db      	mvns	r3, r3
 8002d56:	693a      	ldr	r2, [r7, #16]
 8002d58:	4013      	ands	r3, r2
 8002d5a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d003      	beq.n	8002d70 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002d68:	693a      	ldr	r2, [r7, #16]
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002d70:	4a12      	ldr	r2, [pc, #72]	@ (8002dbc <HAL_GPIO_Init+0x350>)
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	6013      	str	r3, [r2, #0]
>>>>>>> Stashed changes
      }
    }

    position++;
<<<<<<< Updated upstream
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	3301      	adds	r3, #1
 8002d1e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	681a      	ldr	r2, [r3, #0]
 8002d24:	697b      	ldr	r3, [r7, #20]
 8002d26:	fa22 f303 	lsr.w	r3, r2, r3
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	f47f ae78 	bne.w	8002a20 <HAL_GPIO_Init+0x10>
  }
}
 8002d30:	bf00      	nop
 8002d32:	bf00      	nop
 8002d34:	371c      	adds	r7, #28
 8002d36:	46bd      	mov	sp, r7
 8002d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3c:	4770      	bx	lr
 8002d3e:	bf00      	nop
 8002d40:	40021000 	.word	0x40021000
 8002d44:	40010000 	.word	0x40010000
 8002d48:	48000400 	.word	0x48000400
 8002d4c:	48000800 	.word	0x48000800
 8002d50:	48000c00 	.word	0x48000c00
 8002d54:	48001000 	.word	0x48001000
 8002d58:	48001400 	.word	0x48001400
 8002d5c:	48001800 	.word	0x48001800
 8002d60:	40010400 	.word	0x40010400

08002d64 <HAL_GPIO_ReadPin>:
=======
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	3301      	adds	r3, #1
 8002d7a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	681a      	ldr	r2, [r3, #0]
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	fa22 f303 	lsr.w	r3, r2, r3
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	f47f ae78 	bne.w	8002a7c <HAL_GPIO_Init+0x10>
  }
}
 8002d8c:	bf00      	nop
 8002d8e:	bf00      	nop
 8002d90:	371c      	adds	r7, #28
 8002d92:	46bd      	mov	sp, r7
 8002d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d98:	4770      	bx	lr
 8002d9a:	bf00      	nop
 8002d9c:	40021000 	.word	0x40021000
 8002da0:	40010000 	.word	0x40010000
 8002da4:	48000400 	.word	0x48000400
 8002da8:	48000800 	.word	0x48000800
 8002dac:	48000c00 	.word	0x48000c00
 8002db0:	48001000 	.word	0x48001000
 8002db4:	48001400 	.word	0x48001400
 8002db8:	48001800 	.word	0x48001800
 8002dbc:	40010400 	.word	0x40010400

08002dc0 <HAL_GPIO_ReadPin>:
>>>>>>> Stashed changes
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
<<<<<<< Updated upstream
 8002d64:	b480      	push	{r7}
 8002d66:	b085      	sub	sp, #20
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
 8002d6c:	460b      	mov	r3, r1
 8002d6e:	807b      	strh	r3, [r7, #2]
=======
 8002dc0:	b480      	push	{r7}
 8002dc2:	b085      	sub	sp, #20
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
 8002dc8:	460b      	mov	r3, r1
 8002dca:	807b      	strh	r3, [r7, #2]
>>>>>>> Stashed changes
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
<<<<<<< Updated upstream
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	691a      	ldr	r2, [r3, #16]
 8002d74:	887b      	ldrh	r3, [r7, #2]
 8002d76:	4013      	ands	r3, r2
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d002      	beq.n	8002d82 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	73fb      	strb	r3, [r7, #15]
 8002d80:	e001      	b.n	8002d86 <HAL_GPIO_ReadPin+0x22>
=======
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	691a      	ldr	r2, [r3, #16]
 8002dd0:	887b      	ldrh	r3, [r7, #2]
 8002dd2:	4013      	ands	r3, r2
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d002      	beq.n	8002dde <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	73fb      	strb	r3, [r7, #15]
 8002ddc:	e001      	b.n	8002de2 <HAL_GPIO_ReadPin+0x22>
>>>>>>> Stashed changes
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
<<<<<<< Updated upstream
 8002d82:	2300      	movs	r3, #0
 8002d84:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002d86:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	3714      	adds	r7, #20
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d92:	4770      	bx	lr

08002d94 <HAL_GPIO_WritePin>:
=======
 8002dde:	2300      	movs	r3, #0
 8002de0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002de2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	3714      	adds	r7, #20
 8002de8:	46bd      	mov	sp, r7
 8002dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dee:	4770      	bx	lr

08002df0 <HAL_GPIO_WritePin>:
>>>>>>> Stashed changes
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
<<<<<<< Updated upstream
 8002d94:	b480      	push	{r7}
 8002d96:	b083      	sub	sp, #12
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
 8002d9c:	460b      	mov	r3, r1
 8002d9e:	807b      	strh	r3, [r7, #2]
 8002da0:	4613      	mov	r3, r2
 8002da2:	707b      	strb	r3, [r7, #1]
=======
 8002df0:	b480      	push	{r7}
 8002df2:	b083      	sub	sp, #12
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
 8002df8:	460b      	mov	r3, r1
 8002dfa:	807b      	strh	r3, [r7, #2]
 8002dfc:	4613      	mov	r3, r2
 8002dfe:	707b      	strb	r3, [r7, #1]
>>>>>>> Stashed changes
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
<<<<<<< Updated upstream
 8002da4:	787b      	ldrb	r3, [r7, #1]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d003      	beq.n	8002db2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002daa:	887a      	ldrh	r2, [r7, #2]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	619a      	str	r2, [r3, #24]
=======
 8002e00:	787b      	ldrb	r3, [r7, #1]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d003      	beq.n	8002e0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002e06:	887a      	ldrh	r2, [r7, #2]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	619a      	str	r2, [r3, #24]
>>>>>>> Stashed changes
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
<<<<<<< Updated upstream
 8002db0:	e002      	b.n	8002db8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002db2:	887a      	ldrh	r2, [r7, #2]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002db8:	bf00      	nop
 8002dba:	370c      	adds	r7, #12
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc2:	4770      	bx	lr

08002dc4 <HAL_GPIO_TogglePin>:
=======
 8002e0c:	e002      	b.n	8002e14 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002e0e:	887a      	ldrh	r2, [r7, #2]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002e14:	bf00      	nop
 8002e16:	370c      	adds	r7, #12
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1e:	4770      	bx	lr

08002e20 <HAL_GPIO_TogglePin>:
>>>>>>> Stashed changes
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
<<<<<<< Updated upstream
 8002dc4:	b480      	push	{r7}
 8002dc6:	b085      	sub	sp, #20
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
 8002dcc:	460b      	mov	r3, r1
 8002dce:	807b      	strh	r3, [r7, #2]
=======
 8002e20:	b480      	push	{r7}
 8002e22:	b085      	sub	sp, #20
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
 8002e28:	460b      	mov	r3, r1
 8002e2a:	807b      	strh	r3, [r7, #2]
>>>>>>> Stashed changes

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
<<<<<<< Updated upstream
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	695b      	ldr	r3, [r3, #20]
 8002dd4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002dd6:	887a      	ldrh	r2, [r7, #2]
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	4013      	ands	r3, r2
 8002ddc:	041a      	lsls	r2, r3, #16
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	43d9      	mvns	r1, r3
 8002de2:	887b      	ldrh	r3, [r7, #2]
 8002de4:	400b      	ands	r3, r1
 8002de6:	431a      	orrs	r2, r3
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	619a      	str	r2, [r3, #24]
}
 8002dec:	bf00      	nop
 8002dee:	3714      	adds	r7, #20
 8002df0:	46bd      	mov	sp, r7
 8002df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df6:	4770      	bx	lr

08002df8 <HAL_GPIO_EXTI_IRQHandler>:
=======
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	695b      	ldr	r3, [r3, #20]
 8002e30:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002e32:	887a      	ldrh	r2, [r7, #2]
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	4013      	ands	r3, r2
 8002e38:	041a      	lsls	r2, r3, #16
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	43d9      	mvns	r1, r3
 8002e3e:	887b      	ldrh	r3, [r7, #2]
 8002e40:	400b      	ands	r3, r1
 8002e42:	431a      	orrs	r2, r3
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	619a      	str	r2, [r3, #24]
}
 8002e48:	bf00      	nop
 8002e4a:	3714      	adds	r7, #20
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e52:	4770      	bx	lr

08002e54 <HAL_GPIO_EXTI_IRQHandler>:
>>>>>>> Stashed changes
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
<<<<<<< Updated upstream
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b082      	sub	sp, #8
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	4603      	mov	r3, r0
 8002e00:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002e02:	4b08      	ldr	r3, [pc, #32]	@ (8002e24 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e04:	695a      	ldr	r2, [r3, #20]
 8002e06:	88fb      	ldrh	r3, [r7, #6]
 8002e08:	4013      	ands	r3, r2
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d006      	beq.n	8002e1c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002e0e:	4a05      	ldr	r2, [pc, #20]	@ (8002e24 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e10:	88fb      	ldrh	r3, [r7, #6]
 8002e12:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002e14:	88fb      	ldrh	r3, [r7, #6]
 8002e16:	4618      	mov	r0, r3
 8002e18:	f7fe fd1c 	bl	8001854 <HAL_GPIO_EXTI_Callback>
  }
}
 8002e1c:	bf00      	nop
 8002e1e:	3708      	adds	r7, #8
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}
 8002e24:	40010400 	.word	0x40010400

08002e28 <HAL_PWREx_GetVoltageRange>:
=======
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b082      	sub	sp, #8
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002e5e:	4b08      	ldr	r3, [pc, #32]	@ (8002e80 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e60:	695a      	ldr	r2, [r3, #20]
 8002e62:	88fb      	ldrh	r3, [r7, #6]
 8002e64:	4013      	ands	r3, r2
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d006      	beq.n	8002e78 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002e6a:	4a05      	ldr	r2, [pc, #20]	@ (8002e80 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e6c:	88fb      	ldrh	r3, [r7, #6]
 8002e6e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002e70:	88fb      	ldrh	r3, [r7, #6]
 8002e72:	4618      	mov	r0, r3
 8002e74:	f7fe fd5e 	bl	8001934 <HAL_GPIO_EXTI_Callback>
  }
}
 8002e78:	bf00      	nop
 8002e7a:	3708      	adds	r7, #8
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}
 8002e80:	40010400 	.word	0x40010400

08002e84 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b082      	sub	sp, #8
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d101      	bne.n	8002e96 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e08d      	b.n	8002fb2 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d106      	bne.n	8002eb0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002eaa:	6878      	ldr	r0, [r7, #4]
 8002eac:	f7ff f8f2 	bl	8002094 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2224      	movs	r2, #36	@ 0x24
 8002eb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	681a      	ldr	r2, [r3, #0]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f022 0201 	bic.w	r2, r2, #1
 8002ec6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	685a      	ldr	r2, [r3, #4]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002ed4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	689a      	ldr	r2, [r3, #8]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002ee4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	68db      	ldr	r3, [r3, #12]
 8002eea:	2b01      	cmp	r3, #1
 8002eec:	d107      	bne.n	8002efe <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	689a      	ldr	r2, [r3, #8]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002efa:	609a      	str	r2, [r3, #8]
 8002efc:	e006      	b.n	8002f0c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	689a      	ldr	r2, [r3, #8]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002f0a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	68db      	ldr	r3, [r3, #12]
 8002f10:	2b02      	cmp	r3, #2
 8002f12:	d108      	bne.n	8002f26 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	685a      	ldr	r2, [r3, #4]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002f22:	605a      	str	r2, [r3, #4]
 8002f24:	e007      	b.n	8002f36 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	685a      	ldr	r2, [r3, #4]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002f34:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	687a      	ldr	r2, [r7, #4]
 8002f3e:	6812      	ldr	r2, [r2, #0]
 8002f40:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002f44:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002f48:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	68da      	ldr	r2, [r3, #12]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002f58:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	691a      	ldr	r2, [r3, #16]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	695b      	ldr	r3, [r3, #20]
 8002f62:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	699b      	ldr	r3, [r3, #24]
 8002f6a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	430a      	orrs	r2, r1
 8002f72:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	69d9      	ldr	r1, [r3, #28]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6a1a      	ldr	r2, [r3, #32]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	430a      	orrs	r2, r1
 8002f82:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	681a      	ldr	r2, [r3, #0]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f042 0201 	orr.w	r2, r2, #1
 8002f92:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2200      	movs	r2, #0
 8002f98:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2220      	movs	r2, #32
 8002f9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2200      	movs	r2, #0
 8002fac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002fb0:	2300      	movs	r3, #0
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	3708      	adds	r7, #8
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}
	...

08002fbc <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b088      	sub	sp, #32
 8002fc0:	af02      	add	r7, sp, #8
 8002fc2:	60f8      	str	r0, [r7, #12]
 8002fc4:	607a      	str	r2, [r7, #4]
 8002fc6:	461a      	mov	r2, r3
 8002fc8:	460b      	mov	r3, r1
 8002fca:	817b      	strh	r3, [r7, #10]
 8002fcc:	4613      	mov	r3, r2
 8002fce:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002fd6:	b2db      	uxtb	r3, r3
 8002fd8:	2b20      	cmp	r3, #32
 8002fda:	f040 80fd 	bne.w	80031d8 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002fe4:	2b01      	cmp	r3, #1
 8002fe6:	d101      	bne.n	8002fec <HAL_I2C_Master_Transmit+0x30>
 8002fe8:	2302      	movs	r3, #2
 8002fea:	e0f6      	b.n	80031da <HAL_I2C_Master_Transmit+0x21e>
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	2201      	movs	r2, #1
 8002ff0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002ff4:	f7ff fc28 	bl	8002848 <HAL_GetTick>
 8002ff8:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	9300      	str	r3, [sp, #0]
 8002ffe:	2319      	movs	r3, #25
 8003000:	2201      	movs	r2, #1
 8003002:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003006:	68f8      	ldr	r0, [r7, #12]
 8003008:	f000 f914 	bl	8003234 <I2C_WaitOnFlagUntilTimeout>
 800300c:	4603      	mov	r3, r0
 800300e:	2b00      	cmp	r3, #0
 8003010:	d001      	beq.n	8003016 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	e0e1      	b.n	80031da <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	2221      	movs	r2, #33	@ 0x21
 800301a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	2210      	movs	r2, #16
 8003022:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	2200      	movs	r2, #0
 800302a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	687a      	ldr	r2, [r7, #4]
 8003030:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	893a      	ldrh	r2, [r7, #8]
 8003036:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	2200      	movs	r2, #0
 800303c:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003042:	b29b      	uxth	r3, r3
 8003044:	2bff      	cmp	r3, #255	@ 0xff
 8003046:	d906      	bls.n	8003056 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	22ff      	movs	r2, #255	@ 0xff
 800304c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800304e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003052:	617b      	str	r3, [r7, #20]
 8003054:	e007      	b.n	8003066 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800305a:	b29a      	uxth	r2, r3
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8003060:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003064:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800306a:	2b00      	cmp	r3, #0
 800306c:	d024      	beq.n	80030b8 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003072:	781a      	ldrb	r2, [r3, #0]
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800307e:	1c5a      	adds	r2, r3, #1
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003088:	b29b      	uxth	r3, r3
 800308a:	3b01      	subs	r3, #1
 800308c:	b29a      	uxth	r2, r3
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003096:	3b01      	subs	r3, #1
 8003098:	b29a      	uxth	r2, r3
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030a2:	b2db      	uxtb	r3, r3
 80030a4:	3301      	adds	r3, #1
 80030a6:	b2da      	uxtb	r2, r3
 80030a8:	8979      	ldrh	r1, [r7, #10]
 80030aa:	4b4e      	ldr	r3, [pc, #312]	@ (80031e4 <HAL_I2C_Master_Transmit+0x228>)
 80030ac:	9300      	str	r3, [sp, #0]
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	68f8      	ldr	r0, [r7, #12]
 80030b2:	f000 fa83 	bl	80035bc <I2C_TransferConfig>
 80030b6:	e066      	b.n	8003186 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030bc:	b2da      	uxtb	r2, r3
 80030be:	8979      	ldrh	r1, [r7, #10]
 80030c0:	4b48      	ldr	r3, [pc, #288]	@ (80031e4 <HAL_I2C_Master_Transmit+0x228>)
 80030c2:	9300      	str	r3, [sp, #0]
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	68f8      	ldr	r0, [r7, #12]
 80030c8:	f000 fa78 	bl	80035bc <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80030cc:	e05b      	b.n	8003186 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030ce:	693a      	ldr	r2, [r7, #16]
 80030d0:	6a39      	ldr	r1, [r7, #32]
 80030d2:	68f8      	ldr	r0, [r7, #12]
 80030d4:	f000 f907 	bl	80032e6 <I2C_WaitOnTXISFlagUntilTimeout>
 80030d8:	4603      	mov	r3, r0
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d001      	beq.n	80030e2 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	e07b      	b.n	80031da <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030e6:	781a      	ldrb	r2, [r3, #0]
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030f2:	1c5a      	adds	r2, r3, #1
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030fc:	b29b      	uxth	r3, r3
 80030fe:	3b01      	subs	r3, #1
 8003100:	b29a      	uxth	r2, r3
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800310a:	3b01      	subs	r3, #1
 800310c:	b29a      	uxth	r2, r3
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003116:	b29b      	uxth	r3, r3
 8003118:	2b00      	cmp	r3, #0
 800311a:	d034      	beq.n	8003186 <HAL_I2C_Master_Transmit+0x1ca>
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003120:	2b00      	cmp	r3, #0
 8003122:	d130      	bne.n	8003186 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	9300      	str	r3, [sp, #0]
 8003128:	6a3b      	ldr	r3, [r7, #32]
 800312a:	2200      	movs	r2, #0
 800312c:	2180      	movs	r1, #128	@ 0x80
 800312e:	68f8      	ldr	r0, [r7, #12]
 8003130:	f000 f880 	bl	8003234 <I2C_WaitOnFlagUntilTimeout>
 8003134:	4603      	mov	r3, r0
 8003136:	2b00      	cmp	r3, #0
 8003138:	d001      	beq.n	800313e <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	e04d      	b.n	80031da <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003142:	b29b      	uxth	r3, r3
 8003144:	2bff      	cmp	r3, #255	@ 0xff
 8003146:	d90e      	bls.n	8003166 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	22ff      	movs	r2, #255	@ 0xff
 800314c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003152:	b2da      	uxtb	r2, r3
 8003154:	8979      	ldrh	r1, [r7, #10]
 8003156:	2300      	movs	r3, #0
 8003158:	9300      	str	r3, [sp, #0]
 800315a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800315e:	68f8      	ldr	r0, [r7, #12]
 8003160:	f000 fa2c 	bl	80035bc <I2C_TransferConfig>
 8003164:	e00f      	b.n	8003186 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800316a:	b29a      	uxth	r2, r3
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003174:	b2da      	uxtb	r2, r3
 8003176:	8979      	ldrh	r1, [r7, #10]
 8003178:	2300      	movs	r3, #0
 800317a:	9300      	str	r3, [sp, #0]
 800317c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003180:	68f8      	ldr	r0, [r7, #12]
 8003182:	f000 fa1b 	bl	80035bc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800318a:	b29b      	uxth	r3, r3
 800318c:	2b00      	cmp	r3, #0
 800318e:	d19e      	bne.n	80030ce <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003190:	693a      	ldr	r2, [r7, #16]
 8003192:	6a39      	ldr	r1, [r7, #32]
 8003194:	68f8      	ldr	r0, [r7, #12]
 8003196:	f000 f8ed 	bl	8003374 <I2C_WaitOnSTOPFlagUntilTimeout>
 800319a:	4603      	mov	r3, r0
 800319c:	2b00      	cmp	r3, #0
 800319e:	d001      	beq.n	80031a4 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 80031a0:	2301      	movs	r3, #1
 80031a2:	e01a      	b.n	80031da <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	2220      	movs	r2, #32
 80031aa:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	6859      	ldr	r1, [r3, #4]
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681a      	ldr	r2, [r3, #0]
 80031b6:	4b0c      	ldr	r3, [pc, #48]	@ (80031e8 <HAL_I2C_Master_Transmit+0x22c>)
 80031b8:	400b      	ands	r3, r1
 80031ba:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	2220      	movs	r2, #32
 80031c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	2200      	movs	r2, #0
 80031c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	2200      	movs	r2, #0
 80031d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80031d4:	2300      	movs	r3, #0
 80031d6:	e000      	b.n	80031da <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80031d8:	2302      	movs	r3, #2
  }
}
 80031da:	4618      	mov	r0, r3
 80031dc:	3718      	adds	r7, #24
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}
 80031e2:	bf00      	nop
 80031e4:	80002000 	.word	0x80002000
 80031e8:	fe00e800 	.word	0xfe00e800

080031ec <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80031ec:	b480      	push	{r7}
 80031ee:	b083      	sub	sp, #12
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	699b      	ldr	r3, [r3, #24]
 80031fa:	f003 0302 	and.w	r3, r3, #2
 80031fe:	2b02      	cmp	r3, #2
 8003200:	d103      	bne.n	800320a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	2200      	movs	r2, #0
 8003208:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	699b      	ldr	r3, [r3, #24]
 8003210:	f003 0301 	and.w	r3, r3, #1
 8003214:	2b01      	cmp	r3, #1
 8003216:	d007      	beq.n	8003228 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	699a      	ldr	r2, [r3, #24]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f042 0201 	orr.w	r2, r2, #1
 8003226:	619a      	str	r2, [r3, #24]
  }
}
 8003228:	bf00      	nop
 800322a:	370c      	adds	r7, #12
 800322c:	46bd      	mov	sp, r7
 800322e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003232:	4770      	bx	lr

08003234 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b084      	sub	sp, #16
 8003238:	af00      	add	r7, sp, #0
 800323a:	60f8      	str	r0, [r7, #12]
 800323c:	60b9      	str	r1, [r7, #8]
 800323e:	603b      	str	r3, [r7, #0]
 8003240:	4613      	mov	r3, r2
 8003242:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003244:	e03b      	b.n	80032be <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003246:	69ba      	ldr	r2, [r7, #24]
 8003248:	6839      	ldr	r1, [r7, #0]
 800324a:	68f8      	ldr	r0, [r7, #12]
 800324c:	f000 f8d6 	bl	80033fc <I2C_IsErrorOccurred>
 8003250:	4603      	mov	r3, r0
 8003252:	2b00      	cmp	r3, #0
 8003254:	d001      	beq.n	800325a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	e041      	b.n	80032de <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003260:	d02d      	beq.n	80032be <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003262:	f7ff faf1 	bl	8002848 <HAL_GetTick>
 8003266:	4602      	mov	r2, r0
 8003268:	69bb      	ldr	r3, [r7, #24]
 800326a:	1ad3      	subs	r3, r2, r3
 800326c:	683a      	ldr	r2, [r7, #0]
 800326e:	429a      	cmp	r2, r3
 8003270:	d302      	bcc.n	8003278 <I2C_WaitOnFlagUntilTimeout+0x44>
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d122      	bne.n	80032be <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	699a      	ldr	r2, [r3, #24]
 800327e:	68bb      	ldr	r3, [r7, #8]
 8003280:	4013      	ands	r3, r2
 8003282:	68ba      	ldr	r2, [r7, #8]
 8003284:	429a      	cmp	r2, r3
 8003286:	bf0c      	ite	eq
 8003288:	2301      	moveq	r3, #1
 800328a:	2300      	movne	r3, #0
 800328c:	b2db      	uxtb	r3, r3
 800328e:	461a      	mov	r2, r3
 8003290:	79fb      	ldrb	r3, [r7, #7]
 8003292:	429a      	cmp	r2, r3
 8003294:	d113      	bne.n	80032be <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800329a:	f043 0220 	orr.w	r2, r3, #32
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	2220      	movs	r2, #32
 80032a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	2200      	movs	r2, #0
 80032ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	2200      	movs	r2, #0
 80032b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	e00f      	b.n	80032de <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	699a      	ldr	r2, [r3, #24]
 80032c4:	68bb      	ldr	r3, [r7, #8]
 80032c6:	4013      	ands	r3, r2
 80032c8:	68ba      	ldr	r2, [r7, #8]
 80032ca:	429a      	cmp	r2, r3
 80032cc:	bf0c      	ite	eq
 80032ce:	2301      	moveq	r3, #1
 80032d0:	2300      	movne	r3, #0
 80032d2:	b2db      	uxtb	r3, r3
 80032d4:	461a      	mov	r2, r3
 80032d6:	79fb      	ldrb	r3, [r7, #7]
 80032d8:	429a      	cmp	r2, r3
 80032da:	d0b4      	beq.n	8003246 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80032dc:	2300      	movs	r3, #0
}
 80032de:	4618      	mov	r0, r3
 80032e0:	3710      	adds	r7, #16
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}

080032e6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80032e6:	b580      	push	{r7, lr}
 80032e8:	b084      	sub	sp, #16
 80032ea:	af00      	add	r7, sp, #0
 80032ec:	60f8      	str	r0, [r7, #12]
 80032ee:	60b9      	str	r1, [r7, #8]
 80032f0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80032f2:	e033      	b.n	800335c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80032f4:	687a      	ldr	r2, [r7, #4]
 80032f6:	68b9      	ldr	r1, [r7, #8]
 80032f8:	68f8      	ldr	r0, [r7, #12]
 80032fa:	f000 f87f 	bl	80033fc <I2C_IsErrorOccurred>
 80032fe:	4603      	mov	r3, r0
 8003300:	2b00      	cmp	r3, #0
 8003302:	d001      	beq.n	8003308 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003304:	2301      	movs	r3, #1
 8003306:	e031      	b.n	800336c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800330e:	d025      	beq.n	800335c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003310:	f7ff fa9a 	bl	8002848 <HAL_GetTick>
 8003314:	4602      	mov	r2, r0
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	1ad3      	subs	r3, r2, r3
 800331a:	68ba      	ldr	r2, [r7, #8]
 800331c:	429a      	cmp	r2, r3
 800331e:	d302      	bcc.n	8003326 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d11a      	bne.n	800335c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	699b      	ldr	r3, [r3, #24]
 800332c:	f003 0302 	and.w	r3, r3, #2
 8003330:	2b02      	cmp	r3, #2
 8003332:	d013      	beq.n	800335c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003338:	f043 0220 	orr.w	r2, r3, #32
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	2220      	movs	r2, #32
 8003344:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	2200      	movs	r2, #0
 800334c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	2200      	movs	r2, #0
 8003354:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003358:	2301      	movs	r3, #1
 800335a:	e007      	b.n	800336c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	699b      	ldr	r3, [r3, #24]
 8003362:	f003 0302 	and.w	r3, r3, #2
 8003366:	2b02      	cmp	r3, #2
 8003368:	d1c4      	bne.n	80032f4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800336a:	2300      	movs	r3, #0
}
 800336c:	4618      	mov	r0, r3
 800336e:	3710      	adds	r7, #16
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}

08003374 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b084      	sub	sp, #16
 8003378:	af00      	add	r7, sp, #0
 800337a:	60f8      	str	r0, [r7, #12]
 800337c:	60b9      	str	r1, [r7, #8]
 800337e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003380:	e02f      	b.n	80033e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003382:	687a      	ldr	r2, [r7, #4]
 8003384:	68b9      	ldr	r1, [r7, #8]
 8003386:	68f8      	ldr	r0, [r7, #12]
 8003388:	f000 f838 	bl	80033fc <I2C_IsErrorOccurred>
 800338c:	4603      	mov	r3, r0
 800338e:	2b00      	cmp	r3, #0
 8003390:	d001      	beq.n	8003396 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	e02d      	b.n	80033f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003396:	f7ff fa57 	bl	8002848 <HAL_GetTick>
 800339a:	4602      	mov	r2, r0
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	1ad3      	subs	r3, r2, r3
 80033a0:	68ba      	ldr	r2, [r7, #8]
 80033a2:	429a      	cmp	r2, r3
 80033a4:	d302      	bcc.n	80033ac <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d11a      	bne.n	80033e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	699b      	ldr	r3, [r3, #24]
 80033b2:	f003 0320 	and.w	r3, r3, #32
 80033b6:	2b20      	cmp	r3, #32
 80033b8:	d013      	beq.n	80033e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033be:	f043 0220 	orr.w	r2, r3, #32
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	2220      	movs	r2, #32
 80033ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	2200      	movs	r2, #0
 80033d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	2200      	movs	r2, #0
 80033da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	e007      	b.n	80033f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	699b      	ldr	r3, [r3, #24]
 80033e8:	f003 0320 	and.w	r3, r3, #32
 80033ec:	2b20      	cmp	r3, #32
 80033ee:	d1c8      	bne.n	8003382 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80033f0:	2300      	movs	r3, #0
}
 80033f2:	4618      	mov	r0, r3
 80033f4:	3710      	adds	r7, #16
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}
	...

080033fc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b08a      	sub	sp, #40	@ 0x28
 8003400:	af00      	add	r7, sp, #0
 8003402:	60f8      	str	r0, [r7, #12]
 8003404:	60b9      	str	r1, [r7, #8]
 8003406:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003408:	2300      	movs	r3, #0
 800340a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	699b      	ldr	r3, [r3, #24]
 8003414:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003416:	2300      	movs	r3, #0
 8003418:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800341e:	69bb      	ldr	r3, [r7, #24]
 8003420:	f003 0310 	and.w	r3, r3, #16
 8003424:	2b00      	cmp	r3, #0
 8003426:	d068      	beq.n	80034fa <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	2210      	movs	r2, #16
 800342e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003430:	e049      	b.n	80034c6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003438:	d045      	beq.n	80034c6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800343a:	f7ff fa05 	bl	8002848 <HAL_GetTick>
 800343e:	4602      	mov	r2, r0
 8003440:	69fb      	ldr	r3, [r7, #28]
 8003442:	1ad3      	subs	r3, r2, r3
 8003444:	68ba      	ldr	r2, [r7, #8]
 8003446:	429a      	cmp	r2, r3
 8003448:	d302      	bcc.n	8003450 <I2C_IsErrorOccurred+0x54>
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d13a      	bne.n	80034c6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800345a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003462:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	699b      	ldr	r3, [r3, #24]
 800346a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800346e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003472:	d121      	bne.n	80034b8 <I2C_IsErrorOccurred+0xbc>
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800347a:	d01d      	beq.n	80034b8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800347c:	7cfb      	ldrb	r3, [r7, #19]
 800347e:	2b20      	cmp	r3, #32
 8003480:	d01a      	beq.n	80034b8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	685a      	ldr	r2, [r3, #4]
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003490:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003492:	f7ff f9d9 	bl	8002848 <HAL_GetTick>
 8003496:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003498:	e00e      	b.n	80034b8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800349a:	f7ff f9d5 	bl	8002848 <HAL_GetTick>
 800349e:	4602      	mov	r2, r0
 80034a0:	69fb      	ldr	r3, [r7, #28]
 80034a2:	1ad3      	subs	r3, r2, r3
 80034a4:	2b19      	cmp	r3, #25
 80034a6:	d907      	bls.n	80034b8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80034a8:	6a3b      	ldr	r3, [r7, #32]
 80034aa:	f043 0320 	orr.w	r3, r3, #32
 80034ae:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
 80034b2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80034b6:	e006      	b.n	80034c6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	699b      	ldr	r3, [r3, #24]
 80034be:	f003 0320 	and.w	r3, r3, #32
 80034c2:	2b20      	cmp	r3, #32
 80034c4:	d1e9      	bne.n	800349a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	699b      	ldr	r3, [r3, #24]
 80034cc:	f003 0320 	and.w	r3, r3, #32
 80034d0:	2b20      	cmp	r3, #32
 80034d2:	d003      	beq.n	80034dc <I2C_IsErrorOccurred+0xe0>
 80034d4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d0aa      	beq.n	8003432 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80034dc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d103      	bne.n	80034ec <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	2220      	movs	r2, #32
 80034ea:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80034ec:	6a3b      	ldr	r3, [r7, #32]
 80034ee:	f043 0304 	orr.w	r3, r3, #4
 80034f2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
 80034f6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	699b      	ldr	r3, [r3, #24]
 8003500:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003502:	69bb      	ldr	r3, [r7, #24]
 8003504:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003508:	2b00      	cmp	r3, #0
 800350a:	d00b      	beq.n	8003524 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800350c:	6a3b      	ldr	r3, [r7, #32]
 800350e:	f043 0301 	orr.w	r3, r3, #1
 8003512:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800351c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003524:	69bb      	ldr	r3, [r7, #24]
 8003526:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800352a:	2b00      	cmp	r3, #0
 800352c:	d00b      	beq.n	8003546 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800352e:	6a3b      	ldr	r3, [r7, #32]
 8003530:	f043 0308 	orr.w	r3, r3, #8
 8003534:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800353e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003540:	2301      	movs	r3, #1
 8003542:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003546:	69bb      	ldr	r3, [r7, #24]
 8003548:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800354c:	2b00      	cmp	r3, #0
 800354e:	d00b      	beq.n	8003568 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003550:	6a3b      	ldr	r3, [r7, #32]
 8003552:	f043 0302 	orr.w	r3, r3, #2
 8003556:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003560:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003568:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800356c:	2b00      	cmp	r3, #0
 800356e:	d01c      	beq.n	80035aa <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003570:	68f8      	ldr	r0, [r7, #12]
 8003572:	f7ff fe3b 	bl	80031ec <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	6859      	ldr	r1, [r3, #4]
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681a      	ldr	r2, [r3, #0]
 8003580:	4b0d      	ldr	r3, [pc, #52]	@ (80035b8 <I2C_IsErrorOccurred+0x1bc>)
 8003582:	400b      	ands	r3, r1
 8003584:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800358a:	6a3b      	ldr	r3, [r7, #32]
 800358c:	431a      	orrs	r2, r3
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	2220      	movs	r2, #32
 8003596:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	2200      	movs	r2, #0
 800359e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	2200      	movs	r2, #0
 80035a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80035aa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	3728      	adds	r7, #40	@ 0x28
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}
 80035b6:	bf00      	nop
 80035b8:	fe00e800 	.word	0xfe00e800

080035bc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80035bc:	b480      	push	{r7}
 80035be:	b087      	sub	sp, #28
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	60f8      	str	r0, [r7, #12]
 80035c4:	607b      	str	r3, [r7, #4]
 80035c6:	460b      	mov	r3, r1
 80035c8:	817b      	strh	r3, [r7, #10]
 80035ca:	4613      	mov	r3, r2
 80035cc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80035ce:	897b      	ldrh	r3, [r7, #10]
 80035d0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80035d4:	7a7b      	ldrb	r3, [r7, #9]
 80035d6:	041b      	lsls	r3, r3, #16
 80035d8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80035dc:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80035e2:	6a3b      	ldr	r3, [r7, #32]
 80035e4:	4313      	orrs	r3, r2
 80035e6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80035ea:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	685a      	ldr	r2, [r3, #4]
 80035f2:	6a3b      	ldr	r3, [r7, #32]
 80035f4:	0d5b      	lsrs	r3, r3, #21
 80035f6:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80035fa:	4b08      	ldr	r3, [pc, #32]	@ (800361c <I2C_TransferConfig+0x60>)
 80035fc:	430b      	orrs	r3, r1
 80035fe:	43db      	mvns	r3, r3
 8003600:	ea02 0103 	and.w	r1, r2, r3
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	697a      	ldr	r2, [r7, #20]
 800360a:	430a      	orrs	r2, r1
 800360c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800360e:	bf00      	nop
 8003610:	371c      	adds	r7, #28
 8003612:	46bd      	mov	sp, r7
 8003614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003618:	4770      	bx	lr
 800361a:	bf00      	nop
 800361c:	03ff63ff 	.word	0x03ff63ff

08003620 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003620:	b480      	push	{r7}
 8003622:	b083      	sub	sp, #12
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
 8003628:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003630:	b2db      	uxtb	r3, r3
 8003632:	2b20      	cmp	r3, #32
 8003634:	d138      	bne.n	80036a8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800363c:	2b01      	cmp	r3, #1
 800363e:	d101      	bne.n	8003644 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003640:	2302      	movs	r3, #2
 8003642:	e032      	b.n	80036aa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2201      	movs	r2, #1
 8003648:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2224      	movs	r2, #36	@ 0x24
 8003650:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	681a      	ldr	r2, [r3, #0]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f022 0201 	bic.w	r2, r2, #1
 8003662:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	681a      	ldr	r2, [r3, #0]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003672:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	6819      	ldr	r1, [r3, #0]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	683a      	ldr	r2, [r7, #0]
 8003680:	430a      	orrs	r2, r1
 8003682:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	681a      	ldr	r2, [r3, #0]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f042 0201 	orr.w	r2, r2, #1
 8003692:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2220      	movs	r2, #32
 8003698:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2200      	movs	r2, #0
 80036a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80036a4:	2300      	movs	r3, #0
 80036a6:	e000      	b.n	80036aa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80036a8:	2302      	movs	r3, #2
  }
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	370c      	adds	r7, #12
 80036ae:	46bd      	mov	sp, r7
 80036b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b4:	4770      	bx	lr

080036b6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80036b6:	b480      	push	{r7}
 80036b8:	b085      	sub	sp, #20
 80036ba:	af00      	add	r7, sp, #0
 80036bc:	6078      	str	r0, [r7, #4]
 80036be:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80036c6:	b2db      	uxtb	r3, r3
 80036c8:	2b20      	cmp	r3, #32
 80036ca:	d139      	bne.n	8003740 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80036d2:	2b01      	cmp	r3, #1
 80036d4:	d101      	bne.n	80036da <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80036d6:	2302      	movs	r3, #2
 80036d8:	e033      	b.n	8003742 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2201      	movs	r2, #1
 80036de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2224      	movs	r2, #36	@ 0x24
 80036e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	681a      	ldr	r2, [r3, #0]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f022 0201 	bic.w	r2, r2, #1
 80036f8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003708:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	021b      	lsls	r3, r3, #8
 800370e:	68fa      	ldr	r2, [r7, #12]
 8003710:	4313      	orrs	r3, r2
 8003712:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	68fa      	ldr	r2, [r7, #12]
 800371a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	681a      	ldr	r2, [r3, #0]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f042 0201 	orr.w	r2, r2, #1
 800372a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2220      	movs	r2, #32
 8003730:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2200      	movs	r2, #0
 8003738:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800373c:	2300      	movs	r3, #0
 800373e:	e000      	b.n	8003742 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003740:	2302      	movs	r3, #2
  }
}
 8003742:	4618      	mov	r0, r3
 8003744:	3714      	adds	r7, #20
 8003746:	46bd      	mov	sp, r7
 8003748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374c:	4770      	bx	lr
	...

08003750 <HAL_PWREx_GetVoltageRange>:
>>>>>>> Stashed changes
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
<<<<<<< Updated upstream
 8002e28:	b480      	push	{r7}
 8002e2a:	af00      	add	r7, sp, #0
=======
 8003750:	b480      	push	{r7}
 8003752:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
<<<<<<< Updated upstream
 8002e2c:	4b04      	ldr	r3, [pc, #16]	@ (8002e40 <HAL_PWREx_GetVoltageRange+0x18>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002e34:	4618      	mov	r0, r3
 8002e36:	46bd      	mov	sp, r7
 8002e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3c:	4770      	bx	lr
 8002e3e:	bf00      	nop
 8002e40:	40007000 	.word	0x40007000

08002e44 <HAL_PWREx_ControlVoltageScaling>:
=======
 8003754:	4b04      	ldr	r3, [pc, #16]	@ (8003768 <HAL_PWREx_GetVoltageRange+0x18>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800375c:	4618      	mov	r0, r3
 800375e:	46bd      	mov	sp, r7
 8003760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003764:	4770      	bx	lr
 8003766:	bf00      	nop
 8003768:	40007000 	.word	0x40007000

0800376c <HAL_PWREx_ControlVoltageScaling>:
>>>>>>> Stashed changes
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
<<<<<<< Updated upstream
 8002e44:	b480      	push	{r7}
 8002e46:	b085      	sub	sp, #20
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
=======
 800376c:	b480      	push	{r7}
 800376e:	b085      	sub	sp, #20
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
<<<<<<< Updated upstream
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002e52:	d130      	bne.n	8002eb6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002e54:	4b23      	ldr	r3, [pc, #140]	@ (8002ee4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002e5c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002e60:	d038      	beq.n	8002ed4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002e62:	4b20      	ldr	r3, [pc, #128]	@ (8002ee4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002e6a:	4a1e      	ldr	r2, [pc, #120]	@ (8002ee4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e6c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002e70:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002e72:	4b1d      	ldr	r3, [pc, #116]	@ (8002ee8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	2232      	movs	r2, #50	@ 0x32
 8002e78:	fb02 f303 	mul.w	r3, r2, r3
 8002e7c:	4a1b      	ldr	r2, [pc, #108]	@ (8002eec <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002e7e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e82:	0c9b      	lsrs	r3, r3, #18
 8002e84:	3301      	adds	r3, #1
 8002e86:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002e88:	e002      	b.n	8002e90 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	3b01      	subs	r3, #1
 8002e8e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002e90:	4b14      	ldr	r3, [pc, #80]	@ (8002ee4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e92:	695b      	ldr	r3, [r3, #20]
 8002e94:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e98:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e9c:	d102      	bne.n	8002ea4 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d1f2      	bne.n	8002e8a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002ea4:	4b0f      	ldr	r3, [pc, #60]	@ (8002ee4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ea6:	695b      	ldr	r3, [r3, #20]
 8002ea8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002eac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002eb0:	d110      	bne.n	8002ed4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002eb2:	2303      	movs	r3, #3
 8002eb4:	e00f      	b.n	8002ed6 <HAL_PWREx_ControlVoltageScaling+0x92>
=======
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800377a:	d130      	bne.n	80037de <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800377c:	4b23      	ldr	r3, [pc, #140]	@ (800380c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003784:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003788:	d038      	beq.n	80037fc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800378a:	4b20      	ldr	r3, [pc, #128]	@ (800380c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003792:	4a1e      	ldr	r2, [pc, #120]	@ (800380c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003794:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003798:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800379a:	4b1d      	ldr	r3, [pc, #116]	@ (8003810 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	2232      	movs	r2, #50	@ 0x32
 80037a0:	fb02 f303 	mul.w	r3, r2, r3
 80037a4:	4a1b      	ldr	r2, [pc, #108]	@ (8003814 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80037a6:	fba2 2303 	umull	r2, r3, r2, r3
 80037aa:	0c9b      	lsrs	r3, r3, #18
 80037ac:	3301      	adds	r3, #1
 80037ae:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80037b0:	e002      	b.n	80037b8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	3b01      	subs	r3, #1
 80037b6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80037b8:	4b14      	ldr	r3, [pc, #80]	@ (800380c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80037ba:	695b      	ldr	r3, [r3, #20]
 80037bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80037c4:	d102      	bne.n	80037cc <HAL_PWREx_ControlVoltageScaling+0x60>
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d1f2      	bne.n	80037b2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80037cc:	4b0f      	ldr	r3, [pc, #60]	@ (800380c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80037ce:	695b      	ldr	r3, [r3, #20]
 80037d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80037d8:	d110      	bne.n	80037fc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80037da:	2303      	movs	r3, #3
 80037dc:	e00f      	b.n	80037fe <HAL_PWREx_ControlVoltageScaling+0x92>
>>>>>>> Stashed changes
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
<<<<<<< Updated upstream
 8002eb6:	4b0b      	ldr	r3, [pc, #44]	@ (8002ee4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002ebe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ec2:	d007      	beq.n	8002ed4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002ec4:	4b07      	ldr	r3, [pc, #28]	@ (8002ee4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002ecc:	4a05      	ldr	r2, [pc, #20]	@ (8002ee4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ece:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002ed2:	6013      	str	r3, [r2, #0]
=======
 80037de:	4b0b      	ldr	r3, [pc, #44]	@ (800380c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80037e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80037ea:	d007      	beq.n	80037fc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80037ec:	4b07      	ldr	r3, [pc, #28]	@ (800380c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80037f4:	4a05      	ldr	r2, [pc, #20]	@ (800380c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80037f6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80037fa:	6013      	str	r3, [r2, #0]
>>>>>>> Stashed changes
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
<<<<<<< Updated upstream
 8002ed4:	2300      	movs	r3, #0
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	3714      	adds	r7, #20
 8002eda:	46bd      	mov	sp, r7
 8002edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee0:	4770      	bx	lr
 8002ee2:	bf00      	nop
 8002ee4:	40007000 	.word	0x40007000
 8002ee8:	2000000c 	.word	0x2000000c
 8002eec:	431bde83 	.word	0x431bde83

08002ef0 <HAL_RCC_OscConfig>:
=======
 80037fc:	2300      	movs	r3, #0
}
 80037fe:	4618      	mov	r0, r3
 8003800:	3714      	adds	r7, #20
 8003802:	46bd      	mov	sp, r7
 8003804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003808:	4770      	bx	lr
 800380a:	bf00      	nop
 800380c:	40007000 	.word	0x40007000
 8003810:	2000000c 	.word	0x2000000c
 8003814:	431bde83 	.word	0x431bde83

08003818 <HAL_RCC_OscConfig>:
>>>>>>> Stashed changes
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
<<<<<<< Updated upstream
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b088      	sub	sp, #32
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
=======
 8003818:	b580      	push	{r7, lr}
 800381a:	b088      	sub	sp, #32
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
<<<<<<< Updated upstream
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d101      	bne.n	8002f02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	e3ca      	b.n	8003698 <HAL_RCC_OscConfig+0x7a8>
=======
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d101      	bne.n	800382a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003826:	2301      	movs	r3, #1
 8003828:	e3ca      	b.n	8003fc0 <HAL_RCC_OscConfig+0x7a8>
>>>>>>> Stashed changes
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
<<<<<<< Updated upstream
 8002f02:	4b97      	ldr	r3, [pc, #604]	@ (8003160 <HAL_RCC_OscConfig+0x270>)
 8002f04:	689b      	ldr	r3, [r3, #8]
 8002f06:	f003 030c 	and.w	r3, r3, #12
 8002f0a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f0c:	4b94      	ldr	r3, [pc, #592]	@ (8003160 <HAL_RCC_OscConfig+0x270>)
 8002f0e:	68db      	ldr	r3, [r3, #12]
 8002f10:	f003 0303 	and.w	r3, r3, #3
 8002f14:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 0310 	and.w	r3, r3, #16
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	f000 80e4 	beq.w	80030ec <HAL_RCC_OscConfig+0x1fc>
=======
 800382a:	4b97      	ldr	r3, [pc, #604]	@ (8003a88 <HAL_RCC_OscConfig+0x270>)
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	f003 030c 	and.w	r3, r3, #12
 8003832:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003834:	4b94      	ldr	r3, [pc, #592]	@ (8003a88 <HAL_RCC_OscConfig+0x270>)
 8003836:	68db      	ldr	r3, [r3, #12]
 8003838:	f003 0303 	and.w	r3, r3, #3
 800383c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f003 0310 	and.w	r3, r3, #16
 8003846:	2b00      	cmp	r3, #0
 8003848:	f000 80e4 	beq.w	8003a14 <HAL_RCC_OscConfig+0x1fc>
>>>>>>> Stashed changes
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
<<<<<<< Updated upstream
 8002f24:	69bb      	ldr	r3, [r7, #24]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d007      	beq.n	8002f3a <HAL_RCC_OscConfig+0x4a>
 8002f2a:	69bb      	ldr	r3, [r7, #24]
 8002f2c:	2b0c      	cmp	r3, #12
 8002f2e:	f040 808b 	bne.w	8003048 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	f040 8087 	bne.w	8003048 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002f3a:	4b89      	ldr	r3, [pc, #548]	@ (8003160 <HAL_RCC_OscConfig+0x270>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f003 0302 	and.w	r3, r3, #2
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d005      	beq.n	8002f52 <HAL_RCC_OscConfig+0x62>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	699b      	ldr	r3, [r3, #24]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d101      	bne.n	8002f52 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	e3a2      	b.n	8003698 <HAL_RCC_OscConfig+0x7a8>
=======
 800384c:	69bb      	ldr	r3, [r7, #24]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d007      	beq.n	8003862 <HAL_RCC_OscConfig+0x4a>
 8003852:	69bb      	ldr	r3, [r7, #24]
 8003854:	2b0c      	cmp	r3, #12
 8003856:	f040 808b 	bne.w	8003970 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	2b01      	cmp	r3, #1
 800385e:	f040 8087 	bne.w	8003970 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003862:	4b89      	ldr	r3, [pc, #548]	@ (8003a88 <HAL_RCC_OscConfig+0x270>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f003 0302 	and.w	r3, r3, #2
 800386a:	2b00      	cmp	r3, #0
 800386c:	d005      	beq.n	800387a <HAL_RCC_OscConfig+0x62>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	699b      	ldr	r3, [r3, #24]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d101      	bne.n	800387a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	e3a2      	b.n	8003fc0 <HAL_RCC_OscConfig+0x7a8>
>>>>>>> Stashed changes
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
<<<<<<< Updated upstream
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6a1a      	ldr	r2, [r3, #32]
 8002f56:	4b82      	ldr	r3, [pc, #520]	@ (8003160 <HAL_RCC_OscConfig+0x270>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f003 0308 	and.w	r3, r3, #8
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d004      	beq.n	8002f6c <HAL_RCC_OscConfig+0x7c>
 8002f62:	4b7f      	ldr	r3, [pc, #508]	@ (8003160 <HAL_RCC_OscConfig+0x270>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002f6a:	e005      	b.n	8002f78 <HAL_RCC_OscConfig+0x88>
 8002f6c:	4b7c      	ldr	r3, [pc, #496]	@ (8003160 <HAL_RCC_OscConfig+0x270>)
 8002f6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002f72:	091b      	lsrs	r3, r3, #4
 8002f74:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d223      	bcs.n	8002fc4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6a1b      	ldr	r3, [r3, #32]
 8002f80:	4618      	mov	r0, r3
 8002f82:	f000 fd87 	bl	8003a94 <RCC_SetFlashLatencyFromMSIRange>
 8002f86:	4603      	mov	r3, r0
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d001      	beq.n	8002f90 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	e383      	b.n	8003698 <HAL_RCC_OscConfig+0x7a8>
=======
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6a1a      	ldr	r2, [r3, #32]
 800387e:	4b82      	ldr	r3, [pc, #520]	@ (8003a88 <HAL_RCC_OscConfig+0x270>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f003 0308 	and.w	r3, r3, #8
 8003886:	2b00      	cmp	r3, #0
 8003888:	d004      	beq.n	8003894 <HAL_RCC_OscConfig+0x7c>
 800388a:	4b7f      	ldr	r3, [pc, #508]	@ (8003a88 <HAL_RCC_OscConfig+0x270>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003892:	e005      	b.n	80038a0 <HAL_RCC_OscConfig+0x88>
 8003894:	4b7c      	ldr	r3, [pc, #496]	@ (8003a88 <HAL_RCC_OscConfig+0x270>)
 8003896:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800389a:	091b      	lsrs	r3, r3, #4
 800389c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d223      	bcs.n	80038ec <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6a1b      	ldr	r3, [r3, #32]
 80038a8:	4618      	mov	r0, r3
 80038aa:	f000 fd87 	bl	80043bc <RCC_SetFlashLatencyFromMSIRange>
 80038ae:	4603      	mov	r3, r0
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d001      	beq.n	80038b8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80038b4:	2301      	movs	r3, #1
 80038b6:	e383      	b.n	8003fc0 <HAL_RCC_OscConfig+0x7a8>
>>>>>>> Stashed changes
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
<<<<<<< Updated upstream
 8002f90:	4b73      	ldr	r3, [pc, #460]	@ (8003160 <HAL_RCC_OscConfig+0x270>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a72      	ldr	r2, [pc, #456]	@ (8003160 <HAL_RCC_OscConfig+0x270>)
 8002f96:	f043 0308 	orr.w	r3, r3, #8
 8002f9a:	6013      	str	r3, [r2, #0]
 8002f9c:	4b70      	ldr	r3, [pc, #448]	@ (8003160 <HAL_RCC_OscConfig+0x270>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6a1b      	ldr	r3, [r3, #32]
 8002fa8:	496d      	ldr	r1, [pc, #436]	@ (8003160 <HAL_RCC_OscConfig+0x270>)
 8002faa:	4313      	orrs	r3, r2
 8002fac:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002fae:	4b6c      	ldr	r3, [pc, #432]	@ (8003160 <HAL_RCC_OscConfig+0x270>)
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	69db      	ldr	r3, [r3, #28]
 8002fba:	021b      	lsls	r3, r3, #8
 8002fbc:	4968      	ldr	r1, [pc, #416]	@ (8003160 <HAL_RCC_OscConfig+0x270>)
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	604b      	str	r3, [r1, #4]
 8002fc2:	e025      	b.n	8003010 <HAL_RCC_OscConfig+0x120>
=======
 80038b8:	4b73      	ldr	r3, [pc, #460]	@ (8003a88 <HAL_RCC_OscConfig+0x270>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a72      	ldr	r2, [pc, #456]	@ (8003a88 <HAL_RCC_OscConfig+0x270>)
 80038be:	f043 0308 	orr.w	r3, r3, #8
 80038c2:	6013      	str	r3, [r2, #0]
 80038c4:	4b70      	ldr	r3, [pc, #448]	@ (8003a88 <HAL_RCC_OscConfig+0x270>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6a1b      	ldr	r3, [r3, #32]
 80038d0:	496d      	ldr	r1, [pc, #436]	@ (8003a88 <HAL_RCC_OscConfig+0x270>)
 80038d2:	4313      	orrs	r3, r2
 80038d4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80038d6:	4b6c      	ldr	r3, [pc, #432]	@ (8003a88 <HAL_RCC_OscConfig+0x270>)
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	69db      	ldr	r3, [r3, #28]
 80038e2:	021b      	lsls	r3, r3, #8
 80038e4:	4968      	ldr	r1, [pc, #416]	@ (8003a88 <HAL_RCC_OscConfig+0x270>)
 80038e6:	4313      	orrs	r3, r2
 80038e8:	604b      	str	r3, [r1, #4]
 80038ea:	e025      	b.n	8003938 <HAL_RCC_OscConfig+0x120>
>>>>>>> Stashed changes
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
<<<<<<< Updated upstream
 8002fc4:	4b66      	ldr	r3, [pc, #408]	@ (8003160 <HAL_RCC_OscConfig+0x270>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a65      	ldr	r2, [pc, #404]	@ (8003160 <HAL_RCC_OscConfig+0x270>)
 8002fca:	f043 0308 	orr.w	r3, r3, #8
 8002fce:	6013      	str	r3, [r2, #0]
 8002fd0:	4b63      	ldr	r3, [pc, #396]	@ (8003160 <HAL_RCC_OscConfig+0x270>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6a1b      	ldr	r3, [r3, #32]
 8002fdc:	4960      	ldr	r1, [pc, #384]	@ (8003160 <HAL_RCC_OscConfig+0x270>)
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002fe2:	4b5f      	ldr	r3, [pc, #380]	@ (8003160 <HAL_RCC_OscConfig+0x270>)
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	69db      	ldr	r3, [r3, #28]
 8002fee:	021b      	lsls	r3, r3, #8
 8002ff0:	495b      	ldr	r1, [pc, #364]	@ (8003160 <HAL_RCC_OscConfig+0x270>)
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	604b      	str	r3, [r1, #4]
=======
 80038ec:	4b66      	ldr	r3, [pc, #408]	@ (8003a88 <HAL_RCC_OscConfig+0x270>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a65      	ldr	r2, [pc, #404]	@ (8003a88 <HAL_RCC_OscConfig+0x270>)
 80038f2:	f043 0308 	orr.w	r3, r3, #8
 80038f6:	6013      	str	r3, [r2, #0]
 80038f8:	4b63      	ldr	r3, [pc, #396]	@ (8003a88 <HAL_RCC_OscConfig+0x270>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6a1b      	ldr	r3, [r3, #32]
 8003904:	4960      	ldr	r1, [pc, #384]	@ (8003a88 <HAL_RCC_OscConfig+0x270>)
 8003906:	4313      	orrs	r3, r2
 8003908:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800390a:	4b5f      	ldr	r3, [pc, #380]	@ (8003a88 <HAL_RCC_OscConfig+0x270>)
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	69db      	ldr	r3, [r3, #28]
 8003916:	021b      	lsls	r3, r3, #8
 8003918:	495b      	ldr	r1, [pc, #364]	@ (8003a88 <HAL_RCC_OscConfig+0x270>)
 800391a:	4313      	orrs	r3, r2
 800391c:	604b      	str	r3, [r1, #4]
>>>>>>> Stashed changes

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
<<<<<<< Updated upstream
 8002ff6:	69bb      	ldr	r3, [r7, #24]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d109      	bne.n	8003010 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6a1b      	ldr	r3, [r3, #32]
 8003000:	4618      	mov	r0, r3
 8003002:	f000 fd47 	bl	8003a94 <RCC_SetFlashLatencyFromMSIRange>
 8003006:	4603      	mov	r3, r0
 8003008:	2b00      	cmp	r3, #0
 800300a:	d001      	beq.n	8003010 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800300c:	2301      	movs	r3, #1
 800300e:	e343      	b.n	8003698 <HAL_RCC_OscConfig+0x7a8>
=======
 800391e:	69bb      	ldr	r3, [r7, #24]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d109      	bne.n	8003938 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6a1b      	ldr	r3, [r3, #32]
 8003928:	4618      	mov	r0, r3
 800392a:	f000 fd47 	bl	80043bc <RCC_SetFlashLatencyFromMSIRange>
 800392e:	4603      	mov	r3, r0
 8003930:	2b00      	cmp	r3, #0
 8003932:	d001      	beq.n	8003938 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003934:	2301      	movs	r3, #1
 8003936:	e343      	b.n	8003fc0 <HAL_RCC_OscConfig+0x7a8>
>>>>>>> Stashed changes
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
<<<<<<< Updated upstream
 8003010:	f000 fc4a 	bl	80038a8 <HAL_RCC_GetSysClockFreq>
 8003014:	4602      	mov	r2, r0
 8003016:	4b52      	ldr	r3, [pc, #328]	@ (8003160 <HAL_RCC_OscConfig+0x270>)
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	091b      	lsrs	r3, r3, #4
 800301c:	f003 030f 	and.w	r3, r3, #15
 8003020:	4950      	ldr	r1, [pc, #320]	@ (8003164 <HAL_RCC_OscConfig+0x274>)
 8003022:	5ccb      	ldrb	r3, [r1, r3]
 8003024:	f003 031f 	and.w	r3, r3, #31
 8003028:	fa22 f303 	lsr.w	r3, r2, r3
 800302c:	4a4e      	ldr	r2, [pc, #312]	@ (8003168 <HAL_RCC_OscConfig+0x278>)
 800302e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003030:	4b4e      	ldr	r3, [pc, #312]	@ (800316c <HAL_RCC_OscConfig+0x27c>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4618      	mov	r0, r3
 8003036:	f7ff f9e1 	bl	80023fc <HAL_InitTick>
 800303a:	4603      	mov	r3, r0
 800303c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800303e:	7bfb      	ldrb	r3, [r7, #15]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d052      	beq.n	80030ea <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003044:	7bfb      	ldrb	r3, [r7, #15]
 8003046:	e327      	b.n	8003698 <HAL_RCC_OscConfig+0x7a8>
=======
 8003938:	f000 fc4a 	bl	80041d0 <HAL_RCC_GetSysClockFreq>
 800393c:	4602      	mov	r2, r0
 800393e:	4b52      	ldr	r3, [pc, #328]	@ (8003a88 <HAL_RCC_OscConfig+0x270>)
 8003940:	689b      	ldr	r3, [r3, #8]
 8003942:	091b      	lsrs	r3, r3, #4
 8003944:	f003 030f 	and.w	r3, r3, #15
 8003948:	4950      	ldr	r1, [pc, #320]	@ (8003a8c <HAL_RCC_OscConfig+0x274>)
 800394a:	5ccb      	ldrb	r3, [r1, r3]
 800394c:	f003 031f 	and.w	r3, r3, #31
 8003950:	fa22 f303 	lsr.w	r3, r2, r3
 8003954:	4a4e      	ldr	r2, [pc, #312]	@ (8003a90 <HAL_RCC_OscConfig+0x278>)
 8003956:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003958:	4b4e      	ldr	r3, [pc, #312]	@ (8003a94 <HAL_RCC_OscConfig+0x27c>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4618      	mov	r0, r3
 800395e:	f7fe fd6d 	bl	800243c <HAL_InitTick>
 8003962:	4603      	mov	r3, r0
 8003964:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003966:	7bfb      	ldrb	r3, [r7, #15]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d052      	beq.n	8003a12 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800396c:	7bfb      	ldrb	r3, [r7, #15]
 800396e:	e327      	b.n	8003fc0 <HAL_RCC_OscConfig+0x7a8>
>>>>>>> Stashed changes
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
<<<<<<< Updated upstream
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	699b      	ldr	r3, [r3, #24]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d032      	beq.n	80030b6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003050:	4b43      	ldr	r3, [pc, #268]	@ (8003160 <HAL_RCC_OscConfig+0x270>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a42      	ldr	r2, [pc, #264]	@ (8003160 <HAL_RCC_OscConfig+0x270>)
 8003056:	f043 0301 	orr.w	r3, r3, #1
 800305a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800305c:	f7ff fbc6 	bl	80027ec <HAL_GetTick>
 8003060:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003062:	e008      	b.n	8003076 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003064:	f7ff fbc2 	bl	80027ec <HAL_GetTick>
 8003068:	4602      	mov	r2, r0
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	1ad3      	subs	r3, r2, r3
 800306e:	2b02      	cmp	r3, #2
 8003070:	d901      	bls.n	8003076 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003072:	2303      	movs	r3, #3
 8003074:	e310      	b.n	8003698 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003076:	4b3a      	ldr	r3, [pc, #232]	@ (8003160 <HAL_RCC_OscConfig+0x270>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f003 0302 	and.w	r3, r3, #2
 800307e:	2b00      	cmp	r3, #0
 8003080:	d0f0      	beq.n	8003064 <HAL_RCC_OscConfig+0x174>
=======
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	699b      	ldr	r3, [r3, #24]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d032      	beq.n	80039de <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003978:	4b43      	ldr	r3, [pc, #268]	@ (8003a88 <HAL_RCC_OscConfig+0x270>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a42      	ldr	r2, [pc, #264]	@ (8003a88 <HAL_RCC_OscConfig+0x270>)
 800397e:	f043 0301 	orr.w	r3, r3, #1
 8003982:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003984:	f7fe ff60 	bl	8002848 <HAL_GetTick>
 8003988:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800398a:	e008      	b.n	800399e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800398c:	f7fe ff5c 	bl	8002848 <HAL_GetTick>
 8003990:	4602      	mov	r2, r0
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	1ad3      	subs	r3, r2, r3
 8003996:	2b02      	cmp	r3, #2
 8003998:	d901      	bls.n	800399e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800399a:	2303      	movs	r3, #3
 800399c:	e310      	b.n	8003fc0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800399e:	4b3a      	ldr	r3, [pc, #232]	@ (8003a88 <HAL_RCC_OscConfig+0x270>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f003 0302 	and.w	r3, r3, #2
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d0f0      	beq.n	800398c <HAL_RCC_OscConfig+0x174>
>>>>>>> Stashed changes
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
<<<<<<< Updated upstream
 8003082:	4b37      	ldr	r3, [pc, #220]	@ (8003160 <HAL_RCC_OscConfig+0x270>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a36      	ldr	r2, [pc, #216]	@ (8003160 <HAL_RCC_OscConfig+0x270>)
 8003088:	f043 0308 	orr.w	r3, r3, #8
 800308c:	6013      	str	r3, [r2, #0]
 800308e:	4b34      	ldr	r3, [pc, #208]	@ (8003160 <HAL_RCC_OscConfig+0x270>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6a1b      	ldr	r3, [r3, #32]
 800309a:	4931      	ldr	r1, [pc, #196]	@ (8003160 <HAL_RCC_OscConfig+0x270>)
 800309c:	4313      	orrs	r3, r2
 800309e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80030a0:	4b2f      	ldr	r3, [pc, #188]	@ (8003160 <HAL_RCC_OscConfig+0x270>)
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	69db      	ldr	r3, [r3, #28]
 80030ac:	021b      	lsls	r3, r3, #8
 80030ae:	492c      	ldr	r1, [pc, #176]	@ (8003160 <HAL_RCC_OscConfig+0x270>)
 80030b0:	4313      	orrs	r3, r2
 80030b2:	604b      	str	r3, [r1, #4]
 80030b4:	e01a      	b.n	80030ec <HAL_RCC_OscConfig+0x1fc>
=======
 80039aa:	4b37      	ldr	r3, [pc, #220]	@ (8003a88 <HAL_RCC_OscConfig+0x270>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a36      	ldr	r2, [pc, #216]	@ (8003a88 <HAL_RCC_OscConfig+0x270>)
 80039b0:	f043 0308 	orr.w	r3, r3, #8
 80039b4:	6013      	str	r3, [r2, #0]
 80039b6:	4b34      	ldr	r3, [pc, #208]	@ (8003a88 <HAL_RCC_OscConfig+0x270>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6a1b      	ldr	r3, [r3, #32]
 80039c2:	4931      	ldr	r1, [pc, #196]	@ (8003a88 <HAL_RCC_OscConfig+0x270>)
 80039c4:	4313      	orrs	r3, r2
 80039c6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80039c8:	4b2f      	ldr	r3, [pc, #188]	@ (8003a88 <HAL_RCC_OscConfig+0x270>)
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	69db      	ldr	r3, [r3, #28]
 80039d4:	021b      	lsls	r3, r3, #8
 80039d6:	492c      	ldr	r1, [pc, #176]	@ (8003a88 <HAL_RCC_OscConfig+0x270>)
 80039d8:	4313      	orrs	r3, r2
 80039da:	604b      	str	r3, [r1, #4]
 80039dc:	e01a      	b.n	8003a14 <HAL_RCC_OscConfig+0x1fc>
>>>>>>> Stashed changes

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
<<<<<<< Updated upstream
 80030b6:	4b2a      	ldr	r3, [pc, #168]	@ (8003160 <HAL_RCC_OscConfig+0x270>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a29      	ldr	r2, [pc, #164]	@ (8003160 <HAL_RCC_OscConfig+0x270>)
 80030bc:	f023 0301 	bic.w	r3, r3, #1
 80030c0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80030c2:	f7ff fb93 	bl	80027ec <HAL_GetTick>
 80030c6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80030c8:	e008      	b.n	80030dc <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80030ca:	f7ff fb8f 	bl	80027ec <HAL_GetTick>
 80030ce:	4602      	mov	r2, r0
 80030d0:	693b      	ldr	r3, [r7, #16]
 80030d2:	1ad3      	subs	r3, r2, r3
 80030d4:	2b02      	cmp	r3, #2
 80030d6:	d901      	bls.n	80030dc <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80030d8:	2303      	movs	r3, #3
 80030da:	e2dd      	b.n	8003698 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80030dc:	4b20      	ldr	r3, [pc, #128]	@ (8003160 <HAL_RCC_OscConfig+0x270>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f003 0302 	and.w	r3, r3, #2
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d1f0      	bne.n	80030ca <HAL_RCC_OscConfig+0x1da>
 80030e8:	e000      	b.n	80030ec <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80030ea:	bf00      	nop
=======
 80039de:	4b2a      	ldr	r3, [pc, #168]	@ (8003a88 <HAL_RCC_OscConfig+0x270>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a29      	ldr	r2, [pc, #164]	@ (8003a88 <HAL_RCC_OscConfig+0x270>)
 80039e4:	f023 0301 	bic.w	r3, r3, #1
 80039e8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80039ea:	f7fe ff2d 	bl	8002848 <HAL_GetTick>
 80039ee:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80039f0:	e008      	b.n	8003a04 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80039f2:	f7fe ff29 	bl	8002848 <HAL_GetTick>
 80039f6:	4602      	mov	r2, r0
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	1ad3      	subs	r3, r2, r3
 80039fc:	2b02      	cmp	r3, #2
 80039fe:	d901      	bls.n	8003a04 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003a00:	2303      	movs	r3, #3
 8003a02:	e2dd      	b.n	8003fc0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003a04:	4b20      	ldr	r3, [pc, #128]	@ (8003a88 <HAL_RCC_OscConfig+0x270>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f003 0302 	and.w	r3, r3, #2
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d1f0      	bne.n	80039f2 <HAL_RCC_OscConfig+0x1da>
 8003a10:	e000      	b.n	8003a14 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003a12:	bf00      	nop
>>>>>>> Stashed changes
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
<<<<<<< Updated upstream
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f003 0301 	and.w	r3, r3, #1
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d074      	beq.n	80031e2 <HAL_RCC_OscConfig+0x2f2>
=======
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f003 0301 	and.w	r3, r3, #1
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d074      	beq.n	8003b0a <HAL_RCC_OscConfig+0x2f2>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
<<<<<<< Updated upstream
 80030f8:	69bb      	ldr	r3, [r7, #24]
 80030fa:	2b08      	cmp	r3, #8
 80030fc:	d005      	beq.n	800310a <HAL_RCC_OscConfig+0x21a>
 80030fe:	69bb      	ldr	r3, [r7, #24]
 8003100:	2b0c      	cmp	r3, #12
 8003102:	d10e      	bne.n	8003122 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003104:	697b      	ldr	r3, [r7, #20]
 8003106:	2b03      	cmp	r3, #3
 8003108:	d10b      	bne.n	8003122 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800310a:	4b15      	ldr	r3, [pc, #84]	@ (8003160 <HAL_RCC_OscConfig+0x270>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003112:	2b00      	cmp	r3, #0
 8003114:	d064      	beq.n	80031e0 <HAL_RCC_OscConfig+0x2f0>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d160      	bne.n	80031e0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	e2ba      	b.n	8003698 <HAL_RCC_OscConfig+0x7a8>
=======
 8003a20:	69bb      	ldr	r3, [r7, #24]
 8003a22:	2b08      	cmp	r3, #8
 8003a24:	d005      	beq.n	8003a32 <HAL_RCC_OscConfig+0x21a>
 8003a26:	69bb      	ldr	r3, [r7, #24]
 8003a28:	2b0c      	cmp	r3, #12
 8003a2a:	d10e      	bne.n	8003a4a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003a2c:	697b      	ldr	r3, [r7, #20]
 8003a2e:	2b03      	cmp	r3, #3
 8003a30:	d10b      	bne.n	8003a4a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a32:	4b15      	ldr	r3, [pc, #84]	@ (8003a88 <HAL_RCC_OscConfig+0x270>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d064      	beq.n	8003b08 <HAL_RCC_OscConfig+0x2f0>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d160      	bne.n	8003b08 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003a46:	2301      	movs	r3, #1
 8003a48:	e2ba      	b.n	8003fc0 <HAL_RCC_OscConfig+0x7a8>
>>>>>>> Stashed changes
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
<<<<<<< Updated upstream
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800312a:	d106      	bne.n	800313a <HAL_RCC_OscConfig+0x24a>
 800312c:	4b0c      	ldr	r3, [pc, #48]	@ (8003160 <HAL_RCC_OscConfig+0x270>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a0b      	ldr	r2, [pc, #44]	@ (8003160 <HAL_RCC_OscConfig+0x270>)
 8003132:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003136:	6013      	str	r3, [r2, #0]
 8003138:	e026      	b.n	8003188 <HAL_RCC_OscConfig+0x298>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003142:	d115      	bne.n	8003170 <HAL_RCC_OscConfig+0x280>
 8003144:	4b06      	ldr	r3, [pc, #24]	@ (8003160 <HAL_RCC_OscConfig+0x270>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a05      	ldr	r2, [pc, #20]	@ (8003160 <HAL_RCC_OscConfig+0x270>)
 800314a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800314e:	6013      	str	r3, [r2, #0]
 8003150:	4b03      	ldr	r3, [pc, #12]	@ (8003160 <HAL_RCC_OscConfig+0x270>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a02      	ldr	r2, [pc, #8]	@ (8003160 <HAL_RCC_OscConfig+0x270>)
 8003156:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800315a:	6013      	str	r3, [r2, #0]
 800315c:	e014      	b.n	8003188 <HAL_RCC_OscConfig+0x298>
 800315e:	bf00      	nop
 8003160:	40021000 	.word	0x40021000
 8003164:	0801101c 	.word	0x0801101c
 8003168:	2000000c 	.word	0x2000000c
 800316c:	20000010 	.word	0x20000010
 8003170:	4ba0      	ldr	r3, [pc, #640]	@ (80033f4 <HAL_RCC_OscConfig+0x504>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a9f      	ldr	r2, [pc, #636]	@ (80033f4 <HAL_RCC_OscConfig+0x504>)
 8003176:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800317a:	6013      	str	r3, [r2, #0]
 800317c:	4b9d      	ldr	r3, [pc, #628]	@ (80033f4 <HAL_RCC_OscConfig+0x504>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a9c      	ldr	r2, [pc, #624]	@ (80033f4 <HAL_RCC_OscConfig+0x504>)
 8003182:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003186:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d013      	beq.n	80031b8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003190:	f7ff fb2c 	bl	80027ec <HAL_GetTick>
 8003194:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003196:	e008      	b.n	80031aa <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003198:	f7ff fb28 	bl	80027ec <HAL_GetTick>
 800319c:	4602      	mov	r2, r0
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	1ad3      	subs	r3, r2, r3
 80031a2:	2b64      	cmp	r3, #100	@ 0x64
 80031a4:	d901      	bls.n	80031aa <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80031a6:	2303      	movs	r3, #3
 80031a8:	e276      	b.n	8003698 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80031aa:	4b92      	ldr	r3, [pc, #584]	@ (80033f4 <HAL_RCC_OscConfig+0x504>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d0f0      	beq.n	8003198 <HAL_RCC_OscConfig+0x2a8>
 80031b6:	e014      	b.n	80031e2 <HAL_RCC_OscConfig+0x2f2>
=======
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a52:	d106      	bne.n	8003a62 <HAL_RCC_OscConfig+0x24a>
 8003a54:	4b0c      	ldr	r3, [pc, #48]	@ (8003a88 <HAL_RCC_OscConfig+0x270>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a0b      	ldr	r2, [pc, #44]	@ (8003a88 <HAL_RCC_OscConfig+0x270>)
 8003a5a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a5e:	6013      	str	r3, [r2, #0]
 8003a60:	e026      	b.n	8003ab0 <HAL_RCC_OscConfig+0x298>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003a6a:	d115      	bne.n	8003a98 <HAL_RCC_OscConfig+0x280>
 8003a6c:	4b06      	ldr	r3, [pc, #24]	@ (8003a88 <HAL_RCC_OscConfig+0x270>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a05      	ldr	r2, [pc, #20]	@ (8003a88 <HAL_RCC_OscConfig+0x270>)
 8003a72:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003a76:	6013      	str	r3, [r2, #0]
 8003a78:	4b03      	ldr	r3, [pc, #12]	@ (8003a88 <HAL_RCC_OscConfig+0x270>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a02      	ldr	r2, [pc, #8]	@ (8003a88 <HAL_RCC_OscConfig+0x270>)
 8003a7e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a82:	6013      	str	r3, [r2, #0]
 8003a84:	e014      	b.n	8003ab0 <HAL_RCC_OscConfig+0x298>
 8003a86:	bf00      	nop
 8003a88:	40021000 	.word	0x40021000
 8003a8c:	0800d8e4 	.word	0x0800d8e4
 8003a90:	2000000c 	.word	0x2000000c
 8003a94:	20000010 	.word	0x20000010
 8003a98:	4ba0      	ldr	r3, [pc, #640]	@ (8003d1c <HAL_RCC_OscConfig+0x504>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a9f      	ldr	r2, [pc, #636]	@ (8003d1c <HAL_RCC_OscConfig+0x504>)
 8003a9e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003aa2:	6013      	str	r3, [r2, #0]
 8003aa4:	4b9d      	ldr	r3, [pc, #628]	@ (8003d1c <HAL_RCC_OscConfig+0x504>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a9c      	ldr	r2, [pc, #624]	@ (8003d1c <HAL_RCC_OscConfig+0x504>)
 8003aaa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003aae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d013      	beq.n	8003ae0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ab8:	f7fe fec6 	bl	8002848 <HAL_GetTick>
 8003abc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003abe:	e008      	b.n	8003ad2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ac0:	f7fe fec2 	bl	8002848 <HAL_GetTick>
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	1ad3      	subs	r3, r2, r3
 8003aca:	2b64      	cmp	r3, #100	@ 0x64
 8003acc:	d901      	bls.n	8003ad2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003ace:	2303      	movs	r3, #3
 8003ad0:	e276      	b.n	8003fc0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ad2:	4b92      	ldr	r3, [pc, #584]	@ (8003d1c <HAL_RCC_OscConfig+0x504>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d0f0      	beq.n	8003ac0 <HAL_RCC_OscConfig+0x2a8>
 8003ade:	e014      	b.n	8003b0a <HAL_RCC_OscConfig+0x2f2>
>>>>>>> Stashed changes
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
<<<<<<< Updated upstream
 80031b8:	f7ff fb18 	bl	80027ec <HAL_GetTick>
 80031bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80031be:	e008      	b.n	80031d2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031c0:	f7ff fb14 	bl	80027ec <HAL_GetTick>
 80031c4:	4602      	mov	r2, r0
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	1ad3      	subs	r3, r2, r3
 80031ca:	2b64      	cmp	r3, #100	@ 0x64
 80031cc:	d901      	bls.n	80031d2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80031ce:	2303      	movs	r3, #3
 80031d0:	e262      	b.n	8003698 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80031d2:	4b88      	ldr	r3, [pc, #544]	@ (80033f4 <HAL_RCC_OscConfig+0x504>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d1f0      	bne.n	80031c0 <HAL_RCC_OscConfig+0x2d0>
 80031de:	e000      	b.n	80031e2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031e0:	bf00      	nop
=======
 8003ae0:	f7fe feb2 	bl	8002848 <HAL_GetTick>
 8003ae4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003ae6:	e008      	b.n	8003afa <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ae8:	f7fe feae 	bl	8002848 <HAL_GetTick>
 8003aec:	4602      	mov	r2, r0
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	1ad3      	subs	r3, r2, r3
 8003af2:	2b64      	cmp	r3, #100	@ 0x64
 8003af4:	d901      	bls.n	8003afa <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003af6:	2303      	movs	r3, #3
 8003af8:	e262      	b.n	8003fc0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003afa:	4b88      	ldr	r3, [pc, #544]	@ (8003d1c <HAL_RCC_OscConfig+0x504>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d1f0      	bne.n	8003ae8 <HAL_RCC_OscConfig+0x2d0>
 8003b06:	e000      	b.n	8003b0a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b08:	bf00      	nop
>>>>>>> Stashed changes
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
<<<<<<< Updated upstream
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f003 0302 	and.w	r3, r3, #2
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d060      	beq.n	80032b0 <HAL_RCC_OscConfig+0x3c0>
=======
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f003 0302 	and.w	r3, r3, #2
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d060      	beq.n	8003bd8 <HAL_RCC_OscConfig+0x3c0>
>>>>>>> Stashed changes
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
<<<<<<< Updated upstream
 80031ee:	69bb      	ldr	r3, [r7, #24]
 80031f0:	2b04      	cmp	r3, #4
 80031f2:	d005      	beq.n	8003200 <HAL_RCC_OscConfig+0x310>
 80031f4:	69bb      	ldr	r3, [r7, #24]
 80031f6:	2b0c      	cmp	r3, #12
 80031f8:	d119      	bne.n	800322e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	2b02      	cmp	r3, #2
 80031fe:	d116      	bne.n	800322e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003200:	4b7c      	ldr	r3, [pc, #496]	@ (80033f4 <HAL_RCC_OscConfig+0x504>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003208:	2b00      	cmp	r3, #0
 800320a:	d005      	beq.n	8003218 <HAL_RCC_OscConfig+0x328>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	68db      	ldr	r3, [r3, #12]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d101      	bne.n	8003218 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003214:	2301      	movs	r3, #1
 8003216:	e23f      	b.n	8003698 <HAL_RCC_OscConfig+0x7a8>
=======
 8003b16:	69bb      	ldr	r3, [r7, #24]
 8003b18:	2b04      	cmp	r3, #4
 8003b1a:	d005      	beq.n	8003b28 <HAL_RCC_OscConfig+0x310>
 8003b1c:	69bb      	ldr	r3, [r7, #24]
 8003b1e:	2b0c      	cmp	r3, #12
 8003b20:	d119      	bne.n	8003b56 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	2b02      	cmp	r3, #2
 8003b26:	d116      	bne.n	8003b56 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b28:	4b7c      	ldr	r3, [pc, #496]	@ (8003d1c <HAL_RCC_OscConfig+0x504>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d005      	beq.n	8003b40 <HAL_RCC_OscConfig+0x328>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	68db      	ldr	r3, [r3, #12]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d101      	bne.n	8003b40 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	e23f      	b.n	8003fc0 <HAL_RCC_OscConfig+0x7a8>
>>>>>>> Stashed changes
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
<<<<<<< Updated upstream
 8003218:	4b76      	ldr	r3, [pc, #472]	@ (80033f4 <HAL_RCC_OscConfig+0x504>)
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	691b      	ldr	r3, [r3, #16]
 8003224:	061b      	lsls	r3, r3, #24
 8003226:	4973      	ldr	r1, [pc, #460]	@ (80033f4 <HAL_RCC_OscConfig+0x504>)
 8003228:	4313      	orrs	r3, r2
 800322a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800322c:	e040      	b.n	80032b0 <HAL_RCC_OscConfig+0x3c0>
=======
 8003b40:	4b76      	ldr	r3, [pc, #472]	@ (8003d1c <HAL_RCC_OscConfig+0x504>)
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	691b      	ldr	r3, [r3, #16]
 8003b4c:	061b      	lsls	r3, r3, #24
 8003b4e:	4973      	ldr	r1, [pc, #460]	@ (8003d1c <HAL_RCC_OscConfig+0x504>)
 8003b50:	4313      	orrs	r3, r2
 8003b52:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b54:	e040      	b.n	8003bd8 <HAL_RCC_OscConfig+0x3c0>
>>>>>>> Stashed changes
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
<<<<<<< Updated upstream
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	68db      	ldr	r3, [r3, #12]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d023      	beq.n	800327e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003236:	4b6f      	ldr	r3, [pc, #444]	@ (80033f4 <HAL_RCC_OscConfig+0x504>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a6e      	ldr	r2, [pc, #440]	@ (80033f4 <HAL_RCC_OscConfig+0x504>)
 800323c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003240:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003242:	f7ff fad3 	bl	80027ec <HAL_GetTick>
 8003246:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003248:	e008      	b.n	800325c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800324a:	f7ff facf 	bl	80027ec <HAL_GetTick>
 800324e:	4602      	mov	r2, r0
 8003250:	693b      	ldr	r3, [r7, #16]
 8003252:	1ad3      	subs	r3, r2, r3
 8003254:	2b02      	cmp	r3, #2
 8003256:	d901      	bls.n	800325c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003258:	2303      	movs	r3, #3
 800325a:	e21d      	b.n	8003698 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800325c:	4b65      	ldr	r3, [pc, #404]	@ (80033f4 <HAL_RCC_OscConfig+0x504>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003264:	2b00      	cmp	r3, #0
 8003266:	d0f0      	beq.n	800324a <HAL_RCC_OscConfig+0x35a>
=======
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	68db      	ldr	r3, [r3, #12]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d023      	beq.n	8003ba6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b5e:	4b6f      	ldr	r3, [pc, #444]	@ (8003d1c <HAL_RCC_OscConfig+0x504>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a6e      	ldr	r2, [pc, #440]	@ (8003d1c <HAL_RCC_OscConfig+0x504>)
 8003b64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b68:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b6a:	f7fe fe6d 	bl	8002848 <HAL_GetTick>
 8003b6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b70:	e008      	b.n	8003b84 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b72:	f7fe fe69 	bl	8002848 <HAL_GetTick>
 8003b76:	4602      	mov	r2, r0
 8003b78:	693b      	ldr	r3, [r7, #16]
 8003b7a:	1ad3      	subs	r3, r2, r3
 8003b7c:	2b02      	cmp	r3, #2
 8003b7e:	d901      	bls.n	8003b84 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003b80:	2303      	movs	r3, #3
 8003b82:	e21d      	b.n	8003fc0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b84:	4b65      	ldr	r3, [pc, #404]	@ (8003d1c <HAL_RCC_OscConfig+0x504>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d0f0      	beq.n	8003b72 <HAL_RCC_OscConfig+0x35a>
>>>>>>> Stashed changes
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
<<<<<<< Updated upstream
 8003268:	4b62      	ldr	r3, [pc, #392]	@ (80033f4 <HAL_RCC_OscConfig+0x504>)
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	691b      	ldr	r3, [r3, #16]
 8003274:	061b      	lsls	r3, r3, #24
 8003276:	495f      	ldr	r1, [pc, #380]	@ (80033f4 <HAL_RCC_OscConfig+0x504>)
 8003278:	4313      	orrs	r3, r2
 800327a:	604b      	str	r3, [r1, #4]
 800327c:	e018      	b.n	80032b0 <HAL_RCC_OscConfig+0x3c0>
=======
 8003b90:	4b62      	ldr	r3, [pc, #392]	@ (8003d1c <HAL_RCC_OscConfig+0x504>)
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	691b      	ldr	r3, [r3, #16]
 8003b9c:	061b      	lsls	r3, r3, #24
 8003b9e:	495f      	ldr	r1, [pc, #380]	@ (8003d1c <HAL_RCC_OscConfig+0x504>)
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	604b      	str	r3, [r1, #4]
 8003ba4:	e018      	b.n	8003bd8 <HAL_RCC_OscConfig+0x3c0>
>>>>>>> Stashed changes
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
<<<<<<< Updated upstream
 800327e:	4b5d      	ldr	r3, [pc, #372]	@ (80033f4 <HAL_RCC_OscConfig+0x504>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a5c      	ldr	r2, [pc, #368]	@ (80033f4 <HAL_RCC_OscConfig+0x504>)
 8003284:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003288:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800328a:	f7ff faaf 	bl	80027ec <HAL_GetTick>
 800328e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003290:	e008      	b.n	80032a4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003292:	f7ff faab 	bl	80027ec <HAL_GetTick>
 8003296:	4602      	mov	r2, r0
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	1ad3      	subs	r3, r2, r3
 800329c:	2b02      	cmp	r3, #2
 800329e:	d901      	bls.n	80032a4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80032a0:	2303      	movs	r3, #3
 80032a2:	e1f9      	b.n	8003698 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80032a4:	4b53      	ldr	r3, [pc, #332]	@ (80033f4 <HAL_RCC_OscConfig+0x504>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d1f0      	bne.n	8003292 <HAL_RCC_OscConfig+0x3a2>
=======
 8003ba6:	4b5d      	ldr	r3, [pc, #372]	@ (8003d1c <HAL_RCC_OscConfig+0x504>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a5c      	ldr	r2, [pc, #368]	@ (8003d1c <HAL_RCC_OscConfig+0x504>)
 8003bac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003bb0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bb2:	f7fe fe49 	bl	8002848 <HAL_GetTick>
 8003bb6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003bb8:	e008      	b.n	8003bcc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bba:	f7fe fe45 	bl	8002848 <HAL_GetTick>
 8003bbe:	4602      	mov	r2, r0
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	1ad3      	subs	r3, r2, r3
 8003bc4:	2b02      	cmp	r3, #2
 8003bc6:	d901      	bls.n	8003bcc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003bc8:	2303      	movs	r3, #3
 8003bca:	e1f9      	b.n	8003fc0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003bcc:	4b53      	ldr	r3, [pc, #332]	@ (8003d1c <HAL_RCC_OscConfig+0x504>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d1f0      	bne.n	8003bba <HAL_RCC_OscConfig+0x3a2>
>>>>>>> Stashed changes
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
<<<<<<< Updated upstream
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f003 0308 	and.w	r3, r3, #8
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d03c      	beq.n	8003336 <HAL_RCC_OscConfig+0x446>
=======
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f003 0308 	and.w	r3, r3, #8
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d03c      	beq.n	8003c5e <HAL_RCC_OscConfig+0x446>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
<<<<<<< Updated upstream
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	695b      	ldr	r3, [r3, #20]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d01c      	beq.n	80032fe <HAL_RCC_OscConfig+0x40e>
=======
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	695b      	ldr	r3, [r3, #20]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d01c      	beq.n	8003c26 <HAL_RCC_OscConfig+0x40e>
>>>>>>> Stashed changes
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
<<<<<<< Updated upstream
 80032c4:	4b4b      	ldr	r3, [pc, #300]	@ (80033f4 <HAL_RCC_OscConfig+0x504>)
 80032c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80032ca:	4a4a      	ldr	r2, [pc, #296]	@ (80033f4 <HAL_RCC_OscConfig+0x504>)
 80032cc:	f043 0301 	orr.w	r3, r3, #1
 80032d0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032d4:	f7ff fa8a 	bl	80027ec <HAL_GetTick>
 80032d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80032da:	e008      	b.n	80032ee <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032dc:	f7ff fa86 	bl	80027ec <HAL_GetTick>
 80032e0:	4602      	mov	r2, r0
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	1ad3      	subs	r3, r2, r3
 80032e6:	2b02      	cmp	r3, #2
 80032e8:	d901      	bls.n	80032ee <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80032ea:	2303      	movs	r3, #3
 80032ec:	e1d4      	b.n	8003698 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80032ee:	4b41      	ldr	r3, [pc, #260]	@ (80033f4 <HAL_RCC_OscConfig+0x504>)
 80032f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80032f4:	f003 0302 	and.w	r3, r3, #2
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d0ef      	beq.n	80032dc <HAL_RCC_OscConfig+0x3ec>
 80032fc:	e01b      	b.n	8003336 <HAL_RCC_OscConfig+0x446>
=======
 8003bec:	4b4b      	ldr	r3, [pc, #300]	@ (8003d1c <HAL_RCC_OscConfig+0x504>)
 8003bee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003bf2:	4a4a      	ldr	r2, [pc, #296]	@ (8003d1c <HAL_RCC_OscConfig+0x504>)
 8003bf4:	f043 0301 	orr.w	r3, r3, #1
 8003bf8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bfc:	f7fe fe24 	bl	8002848 <HAL_GetTick>
 8003c00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003c02:	e008      	b.n	8003c16 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c04:	f7fe fe20 	bl	8002848 <HAL_GetTick>
 8003c08:	4602      	mov	r2, r0
 8003c0a:	693b      	ldr	r3, [r7, #16]
 8003c0c:	1ad3      	subs	r3, r2, r3
 8003c0e:	2b02      	cmp	r3, #2
 8003c10:	d901      	bls.n	8003c16 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003c12:	2303      	movs	r3, #3
 8003c14:	e1d4      	b.n	8003fc0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003c16:	4b41      	ldr	r3, [pc, #260]	@ (8003d1c <HAL_RCC_OscConfig+0x504>)
 8003c18:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c1c:	f003 0302 	and.w	r3, r3, #2
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d0ef      	beq.n	8003c04 <HAL_RCC_OscConfig+0x3ec>
 8003c24:	e01b      	b.n	8003c5e <HAL_RCC_OscConfig+0x446>
>>>>>>> Stashed changes
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
<<<<<<< Updated upstream
 80032fe:	4b3d      	ldr	r3, [pc, #244]	@ (80033f4 <HAL_RCC_OscConfig+0x504>)
 8003300:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003304:	4a3b      	ldr	r2, [pc, #236]	@ (80033f4 <HAL_RCC_OscConfig+0x504>)
 8003306:	f023 0301 	bic.w	r3, r3, #1
 800330a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800330e:	f7ff fa6d 	bl	80027ec <HAL_GetTick>
 8003312:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003314:	e008      	b.n	8003328 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003316:	f7ff fa69 	bl	80027ec <HAL_GetTick>
 800331a:	4602      	mov	r2, r0
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	1ad3      	subs	r3, r2, r3
 8003320:	2b02      	cmp	r3, #2
 8003322:	d901      	bls.n	8003328 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003324:	2303      	movs	r3, #3
 8003326:	e1b7      	b.n	8003698 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003328:	4b32      	ldr	r3, [pc, #200]	@ (80033f4 <HAL_RCC_OscConfig+0x504>)
 800332a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800332e:	f003 0302 	and.w	r3, r3, #2
 8003332:	2b00      	cmp	r3, #0
 8003334:	d1ef      	bne.n	8003316 <HAL_RCC_OscConfig+0x426>
=======
 8003c26:	4b3d      	ldr	r3, [pc, #244]	@ (8003d1c <HAL_RCC_OscConfig+0x504>)
 8003c28:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c2c:	4a3b      	ldr	r2, [pc, #236]	@ (8003d1c <HAL_RCC_OscConfig+0x504>)
 8003c2e:	f023 0301 	bic.w	r3, r3, #1
 8003c32:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c36:	f7fe fe07 	bl	8002848 <HAL_GetTick>
 8003c3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003c3c:	e008      	b.n	8003c50 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c3e:	f7fe fe03 	bl	8002848 <HAL_GetTick>
 8003c42:	4602      	mov	r2, r0
 8003c44:	693b      	ldr	r3, [r7, #16]
 8003c46:	1ad3      	subs	r3, r2, r3
 8003c48:	2b02      	cmp	r3, #2
 8003c4a:	d901      	bls.n	8003c50 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003c4c:	2303      	movs	r3, #3
 8003c4e:	e1b7      	b.n	8003fc0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003c50:	4b32      	ldr	r3, [pc, #200]	@ (8003d1c <HAL_RCC_OscConfig+0x504>)
 8003c52:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c56:	f003 0302 	and.w	r3, r3, #2
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d1ef      	bne.n	8003c3e <HAL_RCC_OscConfig+0x426>
>>>>>>> Stashed changes
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
<<<<<<< Updated upstream
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 0304 	and.w	r3, r3, #4
 800333e:	2b00      	cmp	r3, #0
 8003340:	f000 80a6 	beq.w	8003490 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003344:	2300      	movs	r3, #0
 8003346:	77fb      	strb	r3, [r7, #31]
=======
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f003 0304 	and.w	r3, r3, #4
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	f000 80a6 	beq.w	8003db8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	77fb      	strb	r3, [r7, #31]
>>>>>>> Stashed changes
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
<<<<<<< Updated upstream
 8003348:	4b2a      	ldr	r3, [pc, #168]	@ (80033f4 <HAL_RCC_OscConfig+0x504>)
 800334a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800334c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003350:	2b00      	cmp	r3, #0
 8003352:	d10d      	bne.n	8003370 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003354:	4b27      	ldr	r3, [pc, #156]	@ (80033f4 <HAL_RCC_OscConfig+0x504>)
 8003356:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003358:	4a26      	ldr	r2, [pc, #152]	@ (80033f4 <HAL_RCC_OscConfig+0x504>)
 800335a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800335e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003360:	4b24      	ldr	r3, [pc, #144]	@ (80033f4 <HAL_RCC_OscConfig+0x504>)
 8003362:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003364:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003368:	60bb      	str	r3, [r7, #8]
 800336a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800336c:	2301      	movs	r3, #1
 800336e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003370:	4b21      	ldr	r3, [pc, #132]	@ (80033f8 <HAL_RCC_OscConfig+0x508>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003378:	2b00      	cmp	r3, #0
 800337a:	d118      	bne.n	80033ae <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800337c:	4b1e      	ldr	r3, [pc, #120]	@ (80033f8 <HAL_RCC_OscConfig+0x508>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a1d      	ldr	r2, [pc, #116]	@ (80033f8 <HAL_RCC_OscConfig+0x508>)
 8003382:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003386:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003388:	f7ff fa30 	bl	80027ec <HAL_GetTick>
 800338c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800338e:	e008      	b.n	80033a2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003390:	f7ff fa2c 	bl	80027ec <HAL_GetTick>
 8003394:	4602      	mov	r2, r0
 8003396:	693b      	ldr	r3, [r7, #16]
 8003398:	1ad3      	subs	r3, r2, r3
 800339a:	2b02      	cmp	r3, #2
 800339c:	d901      	bls.n	80033a2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800339e:	2303      	movs	r3, #3
 80033a0:	e17a      	b.n	8003698 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033a2:	4b15      	ldr	r3, [pc, #84]	@ (80033f8 <HAL_RCC_OscConfig+0x508>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d0f0      	beq.n	8003390 <HAL_RCC_OscConfig+0x4a0>
=======
 8003c70:	4b2a      	ldr	r3, [pc, #168]	@ (8003d1c <HAL_RCC_OscConfig+0x504>)
 8003c72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c74:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d10d      	bne.n	8003c98 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c7c:	4b27      	ldr	r3, [pc, #156]	@ (8003d1c <HAL_RCC_OscConfig+0x504>)
 8003c7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c80:	4a26      	ldr	r2, [pc, #152]	@ (8003d1c <HAL_RCC_OscConfig+0x504>)
 8003c82:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c86:	6593      	str	r3, [r2, #88]	@ 0x58
 8003c88:	4b24      	ldr	r3, [pc, #144]	@ (8003d1c <HAL_RCC_OscConfig+0x504>)
 8003c8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c8c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c90:	60bb      	str	r3, [r7, #8]
 8003c92:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c94:	2301      	movs	r3, #1
 8003c96:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c98:	4b21      	ldr	r3, [pc, #132]	@ (8003d20 <HAL_RCC_OscConfig+0x508>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d118      	bne.n	8003cd6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ca4:	4b1e      	ldr	r3, [pc, #120]	@ (8003d20 <HAL_RCC_OscConfig+0x508>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a1d      	ldr	r2, [pc, #116]	@ (8003d20 <HAL_RCC_OscConfig+0x508>)
 8003caa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003cae:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003cb0:	f7fe fdca 	bl	8002848 <HAL_GetTick>
 8003cb4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003cb6:	e008      	b.n	8003cca <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cb8:	f7fe fdc6 	bl	8002848 <HAL_GetTick>
 8003cbc:	4602      	mov	r2, r0
 8003cbe:	693b      	ldr	r3, [r7, #16]
 8003cc0:	1ad3      	subs	r3, r2, r3
 8003cc2:	2b02      	cmp	r3, #2
 8003cc4:	d901      	bls.n	8003cca <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003cc6:	2303      	movs	r3, #3
 8003cc8:	e17a      	b.n	8003fc0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003cca:	4b15      	ldr	r3, [pc, #84]	@ (8003d20 <HAL_RCC_OscConfig+0x508>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d0f0      	beq.n	8003cb8 <HAL_RCC_OscConfig+0x4a0>
>>>>>>> Stashed changes
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
<<<<<<< Updated upstream
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	2b01      	cmp	r3, #1
 80033b4:	d108      	bne.n	80033c8 <HAL_RCC_OscConfig+0x4d8>
 80033b6:	4b0f      	ldr	r3, [pc, #60]	@ (80033f4 <HAL_RCC_OscConfig+0x504>)
 80033b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033bc:	4a0d      	ldr	r2, [pc, #52]	@ (80033f4 <HAL_RCC_OscConfig+0x504>)
 80033be:	f043 0301 	orr.w	r3, r3, #1
 80033c2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80033c6:	e029      	b.n	800341c <HAL_RCC_OscConfig+0x52c>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	2b05      	cmp	r3, #5
 80033ce:	d115      	bne.n	80033fc <HAL_RCC_OscConfig+0x50c>
 80033d0:	4b08      	ldr	r3, [pc, #32]	@ (80033f4 <HAL_RCC_OscConfig+0x504>)
 80033d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033d6:	4a07      	ldr	r2, [pc, #28]	@ (80033f4 <HAL_RCC_OscConfig+0x504>)
 80033d8:	f043 0304 	orr.w	r3, r3, #4
 80033dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80033e0:	4b04      	ldr	r3, [pc, #16]	@ (80033f4 <HAL_RCC_OscConfig+0x504>)
 80033e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033e6:	4a03      	ldr	r2, [pc, #12]	@ (80033f4 <HAL_RCC_OscConfig+0x504>)
 80033e8:	f043 0301 	orr.w	r3, r3, #1
 80033ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80033f0:	e014      	b.n	800341c <HAL_RCC_OscConfig+0x52c>
 80033f2:	bf00      	nop
 80033f4:	40021000 	.word	0x40021000
 80033f8:	40007000 	.word	0x40007000
 80033fc:	4b9c      	ldr	r3, [pc, #624]	@ (8003670 <HAL_RCC_OscConfig+0x780>)
 80033fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003402:	4a9b      	ldr	r2, [pc, #620]	@ (8003670 <HAL_RCC_OscConfig+0x780>)
 8003404:	f023 0301 	bic.w	r3, r3, #1
 8003408:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800340c:	4b98      	ldr	r3, [pc, #608]	@ (8003670 <HAL_RCC_OscConfig+0x780>)
 800340e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003412:	4a97      	ldr	r2, [pc, #604]	@ (8003670 <HAL_RCC_OscConfig+0x780>)
 8003414:	f023 0304 	bic.w	r3, r3, #4
 8003418:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
=======
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	689b      	ldr	r3, [r3, #8]
 8003cda:	2b01      	cmp	r3, #1
 8003cdc:	d108      	bne.n	8003cf0 <HAL_RCC_OscConfig+0x4d8>
 8003cde:	4b0f      	ldr	r3, [pc, #60]	@ (8003d1c <HAL_RCC_OscConfig+0x504>)
 8003ce0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ce4:	4a0d      	ldr	r2, [pc, #52]	@ (8003d1c <HAL_RCC_OscConfig+0x504>)
 8003ce6:	f043 0301 	orr.w	r3, r3, #1
 8003cea:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003cee:	e029      	b.n	8003d44 <HAL_RCC_OscConfig+0x52c>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	2b05      	cmp	r3, #5
 8003cf6:	d115      	bne.n	8003d24 <HAL_RCC_OscConfig+0x50c>
 8003cf8:	4b08      	ldr	r3, [pc, #32]	@ (8003d1c <HAL_RCC_OscConfig+0x504>)
 8003cfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cfe:	4a07      	ldr	r2, [pc, #28]	@ (8003d1c <HAL_RCC_OscConfig+0x504>)
 8003d00:	f043 0304 	orr.w	r3, r3, #4
 8003d04:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003d08:	4b04      	ldr	r3, [pc, #16]	@ (8003d1c <HAL_RCC_OscConfig+0x504>)
 8003d0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d0e:	4a03      	ldr	r2, [pc, #12]	@ (8003d1c <HAL_RCC_OscConfig+0x504>)
 8003d10:	f043 0301 	orr.w	r3, r3, #1
 8003d14:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003d18:	e014      	b.n	8003d44 <HAL_RCC_OscConfig+0x52c>
 8003d1a:	bf00      	nop
 8003d1c:	40021000 	.word	0x40021000
 8003d20:	40007000 	.word	0x40007000
 8003d24:	4b9c      	ldr	r3, [pc, #624]	@ (8003f98 <HAL_RCC_OscConfig+0x780>)
 8003d26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d2a:	4a9b      	ldr	r2, [pc, #620]	@ (8003f98 <HAL_RCC_OscConfig+0x780>)
 8003d2c:	f023 0301 	bic.w	r3, r3, #1
 8003d30:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003d34:	4b98      	ldr	r3, [pc, #608]	@ (8003f98 <HAL_RCC_OscConfig+0x780>)
 8003d36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d3a:	4a97      	ldr	r2, [pc, #604]	@ (8003f98 <HAL_RCC_OscConfig+0x780>)
 8003d3c:	f023 0304 	bic.w	r3, r3, #4
 8003d40:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
>>>>>>> Stashed changes
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
<<<<<<< Updated upstream
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	689b      	ldr	r3, [r3, #8]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d016      	beq.n	8003452 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003424:	f7ff f9e2 	bl	80027ec <HAL_GetTick>
 8003428:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800342a:	e00a      	b.n	8003442 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800342c:	f7ff f9de 	bl	80027ec <HAL_GetTick>
 8003430:	4602      	mov	r2, r0
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	1ad3      	subs	r3, r2, r3
 8003436:	f241 3288 	movw	r2, #5000	@ 0x1388
 800343a:	4293      	cmp	r3, r2
 800343c:	d901      	bls.n	8003442 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800343e:	2303      	movs	r3, #3
 8003440:	e12a      	b.n	8003698 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003442:	4b8b      	ldr	r3, [pc, #556]	@ (8003670 <HAL_RCC_OscConfig+0x780>)
 8003444:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003448:	f003 0302 	and.w	r3, r3, #2
 800344c:	2b00      	cmp	r3, #0
 800344e:	d0ed      	beq.n	800342c <HAL_RCC_OscConfig+0x53c>
 8003450:	e015      	b.n	800347e <HAL_RCC_OscConfig+0x58e>
=======
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d016      	beq.n	8003d7a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d4c:	f7fe fd7c 	bl	8002848 <HAL_GetTick>
 8003d50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d52:	e00a      	b.n	8003d6a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d54:	f7fe fd78 	bl	8002848 <HAL_GetTick>
 8003d58:	4602      	mov	r2, r0
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	1ad3      	subs	r3, r2, r3
 8003d5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d901      	bls.n	8003d6a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003d66:	2303      	movs	r3, #3
 8003d68:	e12a      	b.n	8003fc0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d6a:	4b8b      	ldr	r3, [pc, #556]	@ (8003f98 <HAL_RCC_OscConfig+0x780>)
 8003d6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d70:	f003 0302 	and.w	r3, r3, #2
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d0ed      	beq.n	8003d54 <HAL_RCC_OscConfig+0x53c>
 8003d78:	e015      	b.n	8003da6 <HAL_RCC_OscConfig+0x58e>
>>>>>>> Stashed changes
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
<<<<<<< Updated upstream
 8003452:	f7ff f9cb 	bl	80027ec <HAL_GetTick>
 8003456:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003458:	e00a      	b.n	8003470 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800345a:	f7ff f9c7 	bl	80027ec <HAL_GetTick>
 800345e:	4602      	mov	r2, r0
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	1ad3      	subs	r3, r2, r3
 8003464:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003468:	4293      	cmp	r3, r2
 800346a:	d901      	bls.n	8003470 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800346c:	2303      	movs	r3, #3
 800346e:	e113      	b.n	8003698 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003470:	4b7f      	ldr	r3, [pc, #508]	@ (8003670 <HAL_RCC_OscConfig+0x780>)
 8003472:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003476:	f003 0302 	and.w	r3, r3, #2
 800347a:	2b00      	cmp	r3, #0
 800347c:	d1ed      	bne.n	800345a <HAL_RCC_OscConfig+0x56a>
=======
 8003d7a:	f7fe fd65 	bl	8002848 <HAL_GetTick>
 8003d7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003d80:	e00a      	b.n	8003d98 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d82:	f7fe fd61 	bl	8002848 <HAL_GetTick>
 8003d86:	4602      	mov	r2, r0
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	1ad3      	subs	r3, r2, r3
 8003d8c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d901      	bls.n	8003d98 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003d94:	2303      	movs	r3, #3
 8003d96:	e113      	b.n	8003fc0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003d98:	4b7f      	ldr	r3, [pc, #508]	@ (8003f98 <HAL_RCC_OscConfig+0x780>)
 8003d9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d9e:	f003 0302 	and.w	r3, r3, #2
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d1ed      	bne.n	8003d82 <HAL_RCC_OscConfig+0x56a>
>>>>>>> Stashed changes
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
<<<<<<< Updated upstream
 800347e:	7ffb      	ldrb	r3, [r7, #31]
 8003480:	2b01      	cmp	r3, #1
 8003482:	d105      	bne.n	8003490 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003484:	4b7a      	ldr	r3, [pc, #488]	@ (8003670 <HAL_RCC_OscConfig+0x780>)
 8003486:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003488:	4a79      	ldr	r2, [pc, #484]	@ (8003670 <HAL_RCC_OscConfig+0x780>)
 800348a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800348e:	6593      	str	r3, [r2, #88]	@ 0x58
=======
 8003da6:	7ffb      	ldrb	r3, [r7, #31]
 8003da8:	2b01      	cmp	r3, #1
 8003daa:	d105      	bne.n	8003db8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003dac:	4b7a      	ldr	r3, [pc, #488]	@ (8003f98 <HAL_RCC_OscConfig+0x780>)
 8003dae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003db0:	4a79      	ldr	r2, [pc, #484]	@ (8003f98 <HAL_RCC_OscConfig+0x780>)
 8003db2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003db6:	6593      	str	r3, [r2, #88]	@ 0x58
>>>>>>> Stashed changes
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
<<<<<<< Updated upstream
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003494:	2b00      	cmp	r3, #0
 8003496:	f000 80fe 	beq.w	8003696 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800349e:	2b02      	cmp	r3, #2
 80034a0:	f040 80d0 	bne.w	8003644 <HAL_RCC_OscConfig+0x754>
=======
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	f000 80fe 	beq.w	8003fbe <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dc6:	2b02      	cmp	r3, #2
 8003dc8:	f040 80d0 	bne.w	8003f6c <HAL_RCC_OscConfig+0x754>
>>>>>>> Stashed changes
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
<<<<<<< Updated upstream
 80034a4:	4b72      	ldr	r3, [pc, #456]	@ (8003670 <HAL_RCC_OscConfig+0x780>)
 80034a6:	68db      	ldr	r3, [r3, #12]
 80034a8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	f003 0203 	and.w	r2, r3, #3
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034b4:	429a      	cmp	r2, r3
 80034b6:	d130      	bne.n	800351a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034c2:	3b01      	subs	r3, #1
 80034c4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80034c6:	429a      	cmp	r2, r3
 80034c8:	d127      	bne.n	800351a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034d4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80034d6:	429a      	cmp	r2, r3
 80034d8:	d11f      	bne.n	800351a <HAL_RCC_OscConfig+0x62a>
=======
 8003dcc:	4b72      	ldr	r3, [pc, #456]	@ (8003f98 <HAL_RCC_OscConfig+0x780>)
 8003dce:	68db      	ldr	r3, [r3, #12]
 8003dd0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	f003 0203 	and.w	r2, r3, #3
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ddc:	429a      	cmp	r2, r3
 8003dde:	d130      	bne.n	8003e42 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dea:	3b01      	subs	r3, #1
 8003dec:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dee:	429a      	cmp	r2, r3
 8003df0:	d127      	bne.n	8003e42 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003df2:	697b      	ldr	r3, [r7, #20]
 8003df4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003dfc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003dfe:	429a      	cmp	r2, r3
 8003e00:	d11f      	bne.n	8003e42 <HAL_RCC_OscConfig+0x62a>
>>>>>>> Stashed changes
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
<<<<<<< Updated upstream
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034e0:	687a      	ldr	r2, [r7, #4]
 80034e2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80034e4:	2a07      	cmp	r2, #7
 80034e6:	bf14      	ite	ne
 80034e8:	2201      	movne	r2, #1
 80034ea:	2200      	moveq	r2, #0
 80034ec:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d113      	bne.n	800351a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034fc:	085b      	lsrs	r3, r3, #1
 80034fe:	3b01      	subs	r3, #1
 8003500:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003502:	429a      	cmp	r2, r3
 8003504:	d109      	bne.n	800351a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003510:	085b      	lsrs	r3, r3, #1
 8003512:	3b01      	subs	r3, #1
 8003514:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003516:	429a      	cmp	r2, r3
 8003518:	d06e      	beq.n	80035f8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800351a:	69bb      	ldr	r3, [r7, #24]
 800351c:	2b0c      	cmp	r3, #12
 800351e:	d069      	beq.n	80035f4 <HAL_RCC_OscConfig+0x704>
=======
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e08:	687a      	ldr	r2, [r7, #4]
 8003e0a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003e0c:	2a07      	cmp	r2, #7
 8003e0e:	bf14      	ite	ne
 8003e10:	2201      	movne	r2, #1
 8003e12:	2200      	moveq	r2, #0
 8003e14:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d113      	bne.n	8003e42 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e24:	085b      	lsrs	r3, r3, #1
 8003e26:	3b01      	subs	r3, #1
 8003e28:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003e2a:	429a      	cmp	r2, r3
 8003e2c:	d109      	bne.n	8003e42 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003e2e:	697b      	ldr	r3, [r7, #20]
 8003e30:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e38:	085b      	lsrs	r3, r3, #1
 8003e3a:	3b01      	subs	r3, #1
 8003e3c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e3e:	429a      	cmp	r2, r3
 8003e40:	d06e      	beq.n	8003f20 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003e42:	69bb      	ldr	r3, [r7, #24]
 8003e44:	2b0c      	cmp	r3, #12
 8003e46:	d069      	beq.n	8003f1c <HAL_RCC_OscConfig+0x704>
>>>>>>> Stashed changes
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
<<<<<<< Updated upstream
 8003520:	4b53      	ldr	r3, [pc, #332]	@ (8003670 <HAL_RCC_OscConfig+0x780>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003528:	2b00      	cmp	r3, #0
 800352a:	d105      	bne.n	8003538 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800352c:	4b50      	ldr	r3, [pc, #320]	@ (8003670 <HAL_RCC_OscConfig+0x780>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003534:	2b00      	cmp	r3, #0
 8003536:	d001      	beq.n	800353c <HAL_RCC_OscConfig+0x64c>
=======
 8003e48:	4b53      	ldr	r3, [pc, #332]	@ (8003f98 <HAL_RCC_OscConfig+0x780>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d105      	bne.n	8003e60 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003e54:	4b50      	ldr	r3, [pc, #320]	@ (8003f98 <HAL_RCC_OscConfig+0x780>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d001      	beq.n	8003e64 <HAL_RCC_OscConfig+0x64c>
>>>>>>> Stashed changes
#endif
            )
          {
            return HAL_ERROR;
<<<<<<< Updated upstream
 8003538:	2301      	movs	r3, #1
 800353a:	e0ad      	b.n	8003698 <HAL_RCC_OscConfig+0x7a8>
=======
 8003e60:	2301      	movs	r3, #1
 8003e62:	e0ad      	b.n	8003fc0 <HAL_RCC_OscConfig+0x7a8>
>>>>>>> Stashed changes
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
<<<<<<< Updated upstream
 800353c:	4b4c      	ldr	r3, [pc, #304]	@ (8003670 <HAL_RCC_OscConfig+0x780>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a4b      	ldr	r2, [pc, #300]	@ (8003670 <HAL_RCC_OscConfig+0x780>)
 8003542:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003546:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003548:	f7ff f950 	bl	80027ec <HAL_GetTick>
 800354c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800354e:	e008      	b.n	8003562 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003550:	f7ff f94c 	bl	80027ec <HAL_GetTick>
 8003554:	4602      	mov	r2, r0
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	1ad3      	subs	r3, r2, r3
 800355a:	2b02      	cmp	r3, #2
 800355c:	d901      	bls.n	8003562 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800355e:	2303      	movs	r3, #3
 8003560:	e09a      	b.n	8003698 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003562:	4b43      	ldr	r3, [pc, #268]	@ (8003670 <HAL_RCC_OscConfig+0x780>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800356a:	2b00      	cmp	r3, #0
 800356c:	d1f0      	bne.n	8003550 <HAL_RCC_OscConfig+0x660>
=======
 8003e64:	4b4c      	ldr	r3, [pc, #304]	@ (8003f98 <HAL_RCC_OscConfig+0x780>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a4b      	ldr	r2, [pc, #300]	@ (8003f98 <HAL_RCC_OscConfig+0x780>)
 8003e6a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003e6e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003e70:	f7fe fcea 	bl	8002848 <HAL_GetTick>
 8003e74:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e76:	e008      	b.n	8003e8a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e78:	f7fe fce6 	bl	8002848 <HAL_GetTick>
 8003e7c:	4602      	mov	r2, r0
 8003e7e:	693b      	ldr	r3, [r7, #16]
 8003e80:	1ad3      	subs	r3, r2, r3
 8003e82:	2b02      	cmp	r3, #2
 8003e84:	d901      	bls.n	8003e8a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003e86:	2303      	movs	r3, #3
 8003e88:	e09a      	b.n	8003fc0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e8a:	4b43      	ldr	r3, [pc, #268]	@ (8003f98 <HAL_RCC_OscConfig+0x780>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d1f0      	bne.n	8003e78 <HAL_RCC_OscConfig+0x660>
>>>>>>> Stashed changes
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
<<<<<<< Updated upstream
 800356e:	4b40      	ldr	r3, [pc, #256]	@ (8003670 <HAL_RCC_OscConfig+0x780>)
 8003570:	68da      	ldr	r2, [r3, #12]
 8003572:	4b40      	ldr	r3, [pc, #256]	@ (8003674 <HAL_RCC_OscConfig+0x784>)
 8003574:	4013      	ands	r3, r2
 8003576:	687a      	ldr	r2, [r7, #4]
 8003578:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800357a:	687a      	ldr	r2, [r7, #4]
 800357c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800357e:	3a01      	subs	r2, #1
 8003580:	0112      	lsls	r2, r2, #4
 8003582:	4311      	orrs	r1, r2
 8003584:	687a      	ldr	r2, [r7, #4]
 8003586:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003588:	0212      	lsls	r2, r2, #8
 800358a:	4311      	orrs	r1, r2
 800358c:	687a      	ldr	r2, [r7, #4]
 800358e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003590:	0852      	lsrs	r2, r2, #1
 8003592:	3a01      	subs	r2, #1
 8003594:	0552      	lsls	r2, r2, #21
 8003596:	4311      	orrs	r1, r2
 8003598:	687a      	ldr	r2, [r7, #4]
 800359a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800359c:	0852      	lsrs	r2, r2, #1
 800359e:	3a01      	subs	r2, #1
 80035a0:	0652      	lsls	r2, r2, #25
 80035a2:	4311      	orrs	r1, r2
 80035a4:	687a      	ldr	r2, [r7, #4]
 80035a6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80035a8:	0912      	lsrs	r2, r2, #4
 80035aa:	0452      	lsls	r2, r2, #17
 80035ac:	430a      	orrs	r2, r1
 80035ae:	4930      	ldr	r1, [pc, #192]	@ (8003670 <HAL_RCC_OscConfig+0x780>)
 80035b0:	4313      	orrs	r3, r2
 80035b2:	60cb      	str	r3, [r1, #12]
=======
 8003e96:	4b40      	ldr	r3, [pc, #256]	@ (8003f98 <HAL_RCC_OscConfig+0x780>)
 8003e98:	68da      	ldr	r2, [r3, #12]
 8003e9a:	4b40      	ldr	r3, [pc, #256]	@ (8003f9c <HAL_RCC_OscConfig+0x784>)
 8003e9c:	4013      	ands	r3, r2
 8003e9e:	687a      	ldr	r2, [r7, #4]
 8003ea0:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003ea2:	687a      	ldr	r2, [r7, #4]
 8003ea4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003ea6:	3a01      	subs	r2, #1
 8003ea8:	0112      	lsls	r2, r2, #4
 8003eaa:	4311      	orrs	r1, r2
 8003eac:	687a      	ldr	r2, [r7, #4]
 8003eae:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003eb0:	0212      	lsls	r2, r2, #8
 8003eb2:	4311      	orrs	r1, r2
 8003eb4:	687a      	ldr	r2, [r7, #4]
 8003eb6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003eb8:	0852      	lsrs	r2, r2, #1
 8003eba:	3a01      	subs	r2, #1
 8003ebc:	0552      	lsls	r2, r2, #21
 8003ebe:	4311      	orrs	r1, r2
 8003ec0:	687a      	ldr	r2, [r7, #4]
 8003ec2:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003ec4:	0852      	lsrs	r2, r2, #1
 8003ec6:	3a01      	subs	r2, #1
 8003ec8:	0652      	lsls	r2, r2, #25
 8003eca:	4311      	orrs	r1, r2
 8003ecc:	687a      	ldr	r2, [r7, #4]
 8003ece:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003ed0:	0912      	lsrs	r2, r2, #4
 8003ed2:	0452      	lsls	r2, r2, #17
 8003ed4:	430a      	orrs	r2, r1
 8003ed6:	4930      	ldr	r1, [pc, #192]	@ (8003f98 <HAL_RCC_OscConfig+0x780>)
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	60cb      	str	r3, [r1, #12]
>>>>>>> Stashed changes
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
<<<<<<< Updated upstream
 80035b4:	4b2e      	ldr	r3, [pc, #184]	@ (8003670 <HAL_RCC_OscConfig+0x780>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a2d      	ldr	r2, [pc, #180]	@ (8003670 <HAL_RCC_OscConfig+0x780>)
 80035ba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80035be:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80035c0:	4b2b      	ldr	r3, [pc, #172]	@ (8003670 <HAL_RCC_OscConfig+0x780>)
 80035c2:	68db      	ldr	r3, [r3, #12]
 80035c4:	4a2a      	ldr	r2, [pc, #168]	@ (8003670 <HAL_RCC_OscConfig+0x780>)
 80035c6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80035ca:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80035cc:	f7ff f90e 	bl	80027ec <HAL_GetTick>
 80035d0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035d2:	e008      	b.n	80035e6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035d4:	f7ff f90a 	bl	80027ec <HAL_GetTick>
 80035d8:	4602      	mov	r2, r0
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	1ad3      	subs	r3, r2, r3
 80035de:	2b02      	cmp	r3, #2
 80035e0:	d901      	bls.n	80035e6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80035e2:	2303      	movs	r3, #3
 80035e4:	e058      	b.n	8003698 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035e6:	4b22      	ldr	r3, [pc, #136]	@ (8003670 <HAL_RCC_OscConfig+0x780>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d0f0      	beq.n	80035d4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80035f2:	e050      	b.n	8003696 <HAL_RCC_OscConfig+0x7a6>
=======
 8003edc:	4b2e      	ldr	r3, [pc, #184]	@ (8003f98 <HAL_RCC_OscConfig+0x780>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a2d      	ldr	r2, [pc, #180]	@ (8003f98 <HAL_RCC_OscConfig+0x780>)
 8003ee2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003ee6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003ee8:	4b2b      	ldr	r3, [pc, #172]	@ (8003f98 <HAL_RCC_OscConfig+0x780>)
 8003eea:	68db      	ldr	r3, [r3, #12]
 8003eec:	4a2a      	ldr	r2, [pc, #168]	@ (8003f98 <HAL_RCC_OscConfig+0x780>)
 8003eee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003ef2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003ef4:	f7fe fca8 	bl	8002848 <HAL_GetTick>
 8003ef8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003efa:	e008      	b.n	8003f0e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003efc:	f7fe fca4 	bl	8002848 <HAL_GetTick>
 8003f00:	4602      	mov	r2, r0
 8003f02:	693b      	ldr	r3, [r7, #16]
 8003f04:	1ad3      	subs	r3, r2, r3
 8003f06:	2b02      	cmp	r3, #2
 8003f08:	d901      	bls.n	8003f0e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003f0a:	2303      	movs	r3, #3
 8003f0c:	e058      	b.n	8003fc0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f0e:	4b22      	ldr	r3, [pc, #136]	@ (8003f98 <HAL_RCC_OscConfig+0x780>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d0f0      	beq.n	8003efc <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003f1a:	e050      	b.n	8003fbe <HAL_RCC_OscConfig+0x7a6>
>>>>>>> Stashed changes
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
<<<<<<< Updated upstream
 80035f4:	2301      	movs	r3, #1
 80035f6:	e04f      	b.n	8003698 <HAL_RCC_OscConfig+0x7a8>
=======
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	e04f      	b.n	8003fc0 <HAL_RCC_OscConfig+0x7a8>
>>>>>>> Stashed changes
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
<<<<<<< Updated upstream
 80035f8:	4b1d      	ldr	r3, [pc, #116]	@ (8003670 <HAL_RCC_OscConfig+0x780>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003600:	2b00      	cmp	r3, #0
 8003602:	d148      	bne.n	8003696 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003604:	4b1a      	ldr	r3, [pc, #104]	@ (8003670 <HAL_RCC_OscConfig+0x780>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a19      	ldr	r2, [pc, #100]	@ (8003670 <HAL_RCC_OscConfig+0x780>)
 800360a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800360e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003610:	4b17      	ldr	r3, [pc, #92]	@ (8003670 <HAL_RCC_OscConfig+0x780>)
 8003612:	68db      	ldr	r3, [r3, #12]
 8003614:	4a16      	ldr	r2, [pc, #88]	@ (8003670 <HAL_RCC_OscConfig+0x780>)
 8003616:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800361a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800361c:	f7ff f8e6 	bl	80027ec <HAL_GetTick>
 8003620:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003622:	e008      	b.n	8003636 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003624:	f7ff f8e2 	bl	80027ec <HAL_GetTick>
 8003628:	4602      	mov	r2, r0
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	1ad3      	subs	r3, r2, r3
 800362e:	2b02      	cmp	r3, #2
 8003630:	d901      	bls.n	8003636 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003632:	2303      	movs	r3, #3
 8003634:	e030      	b.n	8003698 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003636:	4b0e      	ldr	r3, [pc, #56]	@ (8003670 <HAL_RCC_OscConfig+0x780>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800363e:	2b00      	cmp	r3, #0
 8003640:	d0f0      	beq.n	8003624 <HAL_RCC_OscConfig+0x734>
 8003642:	e028      	b.n	8003696 <HAL_RCC_OscConfig+0x7a6>
=======
 8003f20:	4b1d      	ldr	r3, [pc, #116]	@ (8003f98 <HAL_RCC_OscConfig+0x780>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d148      	bne.n	8003fbe <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003f2c:	4b1a      	ldr	r3, [pc, #104]	@ (8003f98 <HAL_RCC_OscConfig+0x780>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a19      	ldr	r2, [pc, #100]	@ (8003f98 <HAL_RCC_OscConfig+0x780>)
 8003f32:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003f36:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003f38:	4b17      	ldr	r3, [pc, #92]	@ (8003f98 <HAL_RCC_OscConfig+0x780>)
 8003f3a:	68db      	ldr	r3, [r3, #12]
 8003f3c:	4a16      	ldr	r2, [pc, #88]	@ (8003f98 <HAL_RCC_OscConfig+0x780>)
 8003f3e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003f42:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003f44:	f7fe fc80 	bl	8002848 <HAL_GetTick>
 8003f48:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f4a:	e008      	b.n	8003f5e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f4c:	f7fe fc7c 	bl	8002848 <HAL_GetTick>
 8003f50:	4602      	mov	r2, r0
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	1ad3      	subs	r3, r2, r3
 8003f56:	2b02      	cmp	r3, #2
 8003f58:	d901      	bls.n	8003f5e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003f5a:	2303      	movs	r3, #3
 8003f5c:	e030      	b.n	8003fc0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f5e:	4b0e      	ldr	r3, [pc, #56]	@ (8003f98 <HAL_RCC_OscConfig+0x780>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d0f0      	beq.n	8003f4c <HAL_RCC_OscConfig+0x734>
 8003f6a:	e028      	b.n	8003fbe <HAL_RCC_OscConfig+0x7a6>
>>>>>>> Stashed changes
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
<<<<<<< Updated upstream
 8003644:	69bb      	ldr	r3, [r7, #24]
 8003646:	2b0c      	cmp	r3, #12
 8003648:	d023      	beq.n	8003692 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800364a:	4b09      	ldr	r3, [pc, #36]	@ (8003670 <HAL_RCC_OscConfig+0x780>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a08      	ldr	r2, [pc, #32]	@ (8003670 <HAL_RCC_OscConfig+0x780>)
 8003650:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003654:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003656:	f7ff f8c9 	bl	80027ec <HAL_GetTick>
 800365a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800365c:	e00c      	b.n	8003678 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800365e:	f7ff f8c5 	bl	80027ec <HAL_GetTick>
 8003662:	4602      	mov	r2, r0
 8003664:	693b      	ldr	r3, [r7, #16]
 8003666:	1ad3      	subs	r3, r2, r3
 8003668:	2b02      	cmp	r3, #2
 800366a:	d905      	bls.n	8003678 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800366c:	2303      	movs	r3, #3
 800366e:	e013      	b.n	8003698 <HAL_RCC_OscConfig+0x7a8>
 8003670:	40021000 	.word	0x40021000
 8003674:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003678:	4b09      	ldr	r3, [pc, #36]	@ (80036a0 <HAL_RCC_OscConfig+0x7b0>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003680:	2b00      	cmp	r3, #0
 8003682:	d1ec      	bne.n	800365e <HAL_RCC_OscConfig+0x76e>
=======
 8003f6c:	69bb      	ldr	r3, [r7, #24]
 8003f6e:	2b0c      	cmp	r3, #12
 8003f70:	d023      	beq.n	8003fba <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f72:	4b09      	ldr	r3, [pc, #36]	@ (8003f98 <HAL_RCC_OscConfig+0x780>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a08      	ldr	r2, [pc, #32]	@ (8003f98 <HAL_RCC_OscConfig+0x780>)
 8003f78:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003f7c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f7e:	f7fe fc63 	bl	8002848 <HAL_GetTick>
 8003f82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f84:	e00c      	b.n	8003fa0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f86:	f7fe fc5f 	bl	8002848 <HAL_GetTick>
 8003f8a:	4602      	mov	r2, r0
 8003f8c:	693b      	ldr	r3, [r7, #16]
 8003f8e:	1ad3      	subs	r3, r2, r3
 8003f90:	2b02      	cmp	r3, #2
 8003f92:	d905      	bls.n	8003fa0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003f94:	2303      	movs	r3, #3
 8003f96:	e013      	b.n	8003fc0 <HAL_RCC_OscConfig+0x7a8>
 8003f98:	40021000 	.word	0x40021000
 8003f9c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003fa0:	4b09      	ldr	r3, [pc, #36]	@ (8003fc8 <HAL_RCC_OscConfig+0x7b0>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d1ec      	bne.n	8003f86 <HAL_RCC_OscConfig+0x76e>
>>>>>>> Stashed changes
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
<<<<<<< Updated upstream
 8003684:	4b06      	ldr	r3, [pc, #24]	@ (80036a0 <HAL_RCC_OscConfig+0x7b0>)
 8003686:	68da      	ldr	r2, [r3, #12]
 8003688:	4905      	ldr	r1, [pc, #20]	@ (80036a0 <HAL_RCC_OscConfig+0x7b0>)
 800368a:	4b06      	ldr	r3, [pc, #24]	@ (80036a4 <HAL_RCC_OscConfig+0x7b4>)
 800368c:	4013      	ands	r3, r2
 800368e:	60cb      	str	r3, [r1, #12]
 8003690:	e001      	b.n	8003696 <HAL_RCC_OscConfig+0x7a6>
=======
 8003fac:	4b06      	ldr	r3, [pc, #24]	@ (8003fc8 <HAL_RCC_OscConfig+0x7b0>)
 8003fae:	68da      	ldr	r2, [r3, #12]
 8003fb0:	4905      	ldr	r1, [pc, #20]	@ (8003fc8 <HAL_RCC_OscConfig+0x7b0>)
 8003fb2:	4b06      	ldr	r3, [pc, #24]	@ (8003fcc <HAL_RCC_OscConfig+0x7b4>)
 8003fb4:	4013      	ands	r3, r2
 8003fb6:	60cb      	str	r3, [r1, #12]
 8003fb8:	e001      	b.n	8003fbe <HAL_RCC_OscConfig+0x7a6>
>>>>>>> Stashed changes
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
<<<<<<< Updated upstream
 8003692:	2301      	movs	r3, #1
 8003694:	e000      	b.n	8003698 <HAL_RCC_OscConfig+0x7a8>
=======
 8003fba:	2301      	movs	r3, #1
 8003fbc:	e000      	b.n	8003fc0 <HAL_RCC_OscConfig+0x7a8>
>>>>>>> Stashed changes
      }
    }
  }
  return HAL_OK;
<<<<<<< Updated upstream
 8003696:	2300      	movs	r3, #0
}
 8003698:	4618      	mov	r0, r3
 800369a:	3720      	adds	r7, #32
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}
 80036a0:	40021000 	.word	0x40021000
 80036a4:	feeefffc 	.word	0xfeeefffc

080036a8 <HAL_RCC_ClockConfig>:
=======
 8003fbe:	2300      	movs	r3, #0
}
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	3720      	adds	r7, #32
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bd80      	pop	{r7, pc}
 8003fc8:	40021000 	.word	0x40021000
 8003fcc:	feeefffc 	.word	0xfeeefffc

08003fd0 <HAL_RCC_ClockConfig>:
>>>>>>> Stashed changes
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
<<<<<<< Updated upstream
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b084      	sub	sp, #16
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
 80036b0:	6039      	str	r1, [r7, #0]
=======
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b084      	sub	sp, #16
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
 8003fd8:	6039      	str	r1, [r7, #0]
>>>>>>> Stashed changes
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
<<<<<<< Updated upstream
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d101      	bne.n	80036bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036b8:	2301      	movs	r3, #1
 80036ba:	e0e7      	b.n	800388c <HAL_RCC_ClockConfig+0x1e4>
=======
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d101      	bne.n	8003fe4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	e0e7      	b.n	80041b4 <HAL_RCC_ClockConfig+0x1e4>
>>>>>>> Stashed changes
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
<<<<<<< Updated upstream
 80036bc:	4b75      	ldr	r3, [pc, #468]	@ (8003894 <HAL_RCC_ClockConfig+0x1ec>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f003 0307 	and.w	r3, r3, #7
 80036c4:	683a      	ldr	r2, [r7, #0]
 80036c6:	429a      	cmp	r2, r3
 80036c8:	d910      	bls.n	80036ec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036ca:	4b72      	ldr	r3, [pc, #456]	@ (8003894 <HAL_RCC_ClockConfig+0x1ec>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f023 0207 	bic.w	r2, r3, #7
 80036d2:	4970      	ldr	r1, [pc, #448]	@ (8003894 <HAL_RCC_ClockConfig+0x1ec>)
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	4313      	orrs	r3, r2
 80036d8:	600b      	str	r3, [r1, #0]
=======
 8003fe4:	4b75      	ldr	r3, [pc, #468]	@ (80041bc <HAL_RCC_ClockConfig+0x1ec>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f003 0307 	and.w	r3, r3, #7
 8003fec:	683a      	ldr	r2, [r7, #0]
 8003fee:	429a      	cmp	r2, r3
 8003ff0:	d910      	bls.n	8004014 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ff2:	4b72      	ldr	r3, [pc, #456]	@ (80041bc <HAL_RCC_ClockConfig+0x1ec>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f023 0207 	bic.w	r2, r3, #7
 8003ffa:	4970      	ldr	r1, [pc, #448]	@ (80041bc <HAL_RCC_ClockConfig+0x1ec>)
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	4313      	orrs	r3, r2
 8004000:	600b      	str	r3, [r1, #0]
>>>>>>> Stashed changes

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
<<<<<<< Updated upstream
 80036da:	4b6e      	ldr	r3, [pc, #440]	@ (8003894 <HAL_RCC_ClockConfig+0x1ec>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f003 0307 	and.w	r3, r3, #7
 80036e2:	683a      	ldr	r2, [r7, #0]
 80036e4:	429a      	cmp	r2, r3
 80036e6:	d001      	beq.n	80036ec <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80036e8:	2301      	movs	r3, #1
 80036ea:	e0cf      	b.n	800388c <HAL_RCC_ClockConfig+0x1e4>
=======
 8004002:	4b6e      	ldr	r3, [pc, #440]	@ (80041bc <HAL_RCC_ClockConfig+0x1ec>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f003 0307 	and.w	r3, r3, #7
 800400a:	683a      	ldr	r2, [r7, #0]
 800400c:	429a      	cmp	r2, r3
 800400e:	d001      	beq.n	8004014 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004010:	2301      	movs	r3, #1
 8004012:	e0cf      	b.n	80041b4 <HAL_RCC_ClockConfig+0x1e4>
>>>>>>> Stashed changes
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
<<<<<<< Updated upstream
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f003 0302 	and.w	r3, r3, #2
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d010      	beq.n	800371a <HAL_RCC_ClockConfig+0x72>
=======
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f003 0302 	and.w	r3, r3, #2
 800401c:	2b00      	cmp	r3, #0
 800401e:	d010      	beq.n	8004042 <HAL_RCC_ClockConfig+0x72>
>>>>>>> Stashed changes
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
<<<<<<< Updated upstream
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	689a      	ldr	r2, [r3, #8]
 80036fc:	4b66      	ldr	r3, [pc, #408]	@ (8003898 <HAL_RCC_ClockConfig+0x1f0>)
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003704:	429a      	cmp	r2, r3
 8003706:	d908      	bls.n	800371a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003708:	4b63      	ldr	r3, [pc, #396]	@ (8003898 <HAL_RCC_ClockConfig+0x1f0>)
 800370a:	689b      	ldr	r3, [r3, #8]
 800370c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	689b      	ldr	r3, [r3, #8]
 8003714:	4960      	ldr	r1, [pc, #384]	@ (8003898 <HAL_RCC_ClockConfig+0x1f0>)
 8003716:	4313      	orrs	r3, r2
 8003718:	608b      	str	r3, [r1, #8]
=======
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	689a      	ldr	r2, [r3, #8]
 8004024:	4b66      	ldr	r3, [pc, #408]	@ (80041c0 <HAL_RCC_ClockConfig+0x1f0>)
 8004026:	689b      	ldr	r3, [r3, #8]
 8004028:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800402c:	429a      	cmp	r2, r3
 800402e:	d908      	bls.n	8004042 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004030:	4b63      	ldr	r3, [pc, #396]	@ (80041c0 <HAL_RCC_ClockConfig+0x1f0>)
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	689b      	ldr	r3, [r3, #8]
 800403c:	4960      	ldr	r1, [pc, #384]	@ (80041c0 <HAL_RCC_ClockConfig+0x1f0>)
 800403e:	4313      	orrs	r3, r2
 8004040:	608b      	str	r3, [r1, #8]
>>>>>>> Stashed changes
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
<<<<<<< Updated upstream
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f003 0301 	and.w	r3, r3, #1
 8003722:	2b00      	cmp	r3, #0
 8003724:	d04c      	beq.n	80037c0 <HAL_RCC_ClockConfig+0x118>
=======
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f003 0301 	and.w	r3, r3, #1
 800404a:	2b00      	cmp	r3, #0
 800404c:	d04c      	beq.n	80040e8 <HAL_RCC_ClockConfig+0x118>
>>>>>>> Stashed changes
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
<<<<<<< Updated upstream
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	2b03      	cmp	r3, #3
 800372c:	d107      	bne.n	800373e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800372e:	4b5a      	ldr	r3, [pc, #360]	@ (8003898 <HAL_RCC_ClockConfig+0x1f0>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003736:	2b00      	cmp	r3, #0
 8003738:	d121      	bne.n	800377e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	e0a6      	b.n	800388c <HAL_RCC_ClockConfig+0x1e4>
=======
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	2b03      	cmp	r3, #3
 8004054:	d107      	bne.n	8004066 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004056:	4b5a      	ldr	r3, [pc, #360]	@ (80041c0 <HAL_RCC_ClockConfig+0x1f0>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800405e:	2b00      	cmp	r3, #0
 8004060:	d121      	bne.n	80040a6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004062:	2301      	movs	r3, #1
 8004064:	e0a6      	b.n	80041b4 <HAL_RCC_ClockConfig+0x1e4>
>>>>>>> Stashed changes
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
<<<<<<< Updated upstream
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	2b02      	cmp	r3, #2
 8003744:	d107      	bne.n	8003756 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003746:	4b54      	ldr	r3, [pc, #336]	@ (8003898 <HAL_RCC_ClockConfig+0x1f0>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800374e:	2b00      	cmp	r3, #0
 8003750:	d115      	bne.n	800377e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	e09a      	b.n	800388c <HAL_RCC_ClockConfig+0x1e4>
=======
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	2b02      	cmp	r3, #2
 800406c:	d107      	bne.n	800407e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800406e:	4b54      	ldr	r3, [pc, #336]	@ (80041c0 <HAL_RCC_ClockConfig+0x1f0>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004076:	2b00      	cmp	r3, #0
 8004078:	d115      	bne.n	80040a6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	e09a      	b.n	80041b4 <HAL_RCC_ClockConfig+0x1e4>
>>>>>>> Stashed changes
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
<<<<<<< Updated upstream
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d107      	bne.n	800376e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800375e:	4b4e      	ldr	r3, [pc, #312]	@ (8003898 <HAL_RCC_ClockConfig+0x1f0>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f003 0302 	and.w	r3, r3, #2
 8003766:	2b00      	cmp	r3, #0
 8003768:	d109      	bne.n	800377e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	e08e      	b.n	800388c <HAL_RCC_ClockConfig+0x1e4>
=======
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d107      	bne.n	8004096 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004086:	4b4e      	ldr	r3, [pc, #312]	@ (80041c0 <HAL_RCC_ClockConfig+0x1f0>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f003 0302 	and.w	r3, r3, #2
 800408e:	2b00      	cmp	r3, #0
 8004090:	d109      	bne.n	80040a6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004092:	2301      	movs	r3, #1
 8004094:	e08e      	b.n	80041b4 <HAL_RCC_ClockConfig+0x1e4>
>>>>>>> Stashed changes
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
<<<<<<< Updated upstream
 800376e:	4b4a      	ldr	r3, [pc, #296]	@ (8003898 <HAL_RCC_ClockConfig+0x1f0>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003776:	2b00      	cmp	r3, #0
 8003778:	d101      	bne.n	800377e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	e086      	b.n	800388c <HAL_RCC_ClockConfig+0x1e4>
=======
 8004096:	4b4a      	ldr	r3, [pc, #296]	@ (80041c0 <HAL_RCC_ClockConfig+0x1f0>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d101      	bne.n	80040a6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80040a2:	2301      	movs	r3, #1
 80040a4:	e086      	b.n	80041b4 <HAL_RCC_ClockConfig+0x1e4>
>>>>>>> Stashed changes
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
<<<<<<< Updated upstream
 800377e:	4b46      	ldr	r3, [pc, #280]	@ (8003898 <HAL_RCC_ClockConfig+0x1f0>)
 8003780:	689b      	ldr	r3, [r3, #8]
 8003782:	f023 0203 	bic.w	r2, r3, #3
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	4943      	ldr	r1, [pc, #268]	@ (8003898 <HAL_RCC_ClockConfig+0x1f0>)
 800378c:	4313      	orrs	r3, r2
 800378e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003790:	f7ff f82c 	bl	80027ec <HAL_GetTick>
 8003794:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003796:	e00a      	b.n	80037ae <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003798:	f7ff f828 	bl	80027ec <HAL_GetTick>
 800379c:	4602      	mov	r2, r0
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	1ad3      	subs	r3, r2, r3
 80037a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d901      	bls.n	80037ae <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80037aa:	2303      	movs	r3, #3
 80037ac:	e06e      	b.n	800388c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037ae:	4b3a      	ldr	r3, [pc, #232]	@ (8003898 <HAL_RCC_ClockConfig+0x1f0>)
 80037b0:	689b      	ldr	r3, [r3, #8]
 80037b2:	f003 020c 	and.w	r2, r3, #12
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	009b      	lsls	r3, r3, #2
 80037bc:	429a      	cmp	r2, r3
 80037be:	d1eb      	bne.n	8003798 <HAL_RCC_ClockConfig+0xf0>
=======
 80040a6:	4b46      	ldr	r3, [pc, #280]	@ (80041c0 <HAL_RCC_ClockConfig+0x1f0>)
 80040a8:	689b      	ldr	r3, [r3, #8]
 80040aa:	f023 0203 	bic.w	r2, r3, #3
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	4943      	ldr	r1, [pc, #268]	@ (80041c0 <HAL_RCC_ClockConfig+0x1f0>)
 80040b4:	4313      	orrs	r3, r2
 80040b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040b8:	f7fe fbc6 	bl	8002848 <HAL_GetTick>
 80040bc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040be:	e00a      	b.n	80040d6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040c0:	f7fe fbc2 	bl	8002848 <HAL_GetTick>
 80040c4:	4602      	mov	r2, r0
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	1ad3      	subs	r3, r2, r3
 80040ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d901      	bls.n	80040d6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80040d2:	2303      	movs	r3, #3
 80040d4:	e06e      	b.n	80041b4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040d6:	4b3a      	ldr	r3, [pc, #232]	@ (80041c0 <HAL_RCC_ClockConfig+0x1f0>)
 80040d8:	689b      	ldr	r3, [r3, #8]
 80040da:	f003 020c 	and.w	r2, r3, #12
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	009b      	lsls	r3, r3, #2
 80040e4:	429a      	cmp	r2, r3
 80040e6:	d1eb      	bne.n	80040c0 <HAL_RCC_ClockConfig+0xf0>
>>>>>>> Stashed changes
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
<<<<<<< Updated upstream
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f003 0302 	and.w	r3, r3, #2
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d010      	beq.n	80037ee <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	689a      	ldr	r2, [r3, #8]
 80037d0:	4b31      	ldr	r3, [pc, #196]	@ (8003898 <HAL_RCC_ClockConfig+0x1f0>)
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80037d8:	429a      	cmp	r2, r3
 80037da:	d208      	bcs.n	80037ee <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037dc:	4b2e      	ldr	r3, [pc, #184]	@ (8003898 <HAL_RCC_ClockConfig+0x1f0>)
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	492b      	ldr	r1, [pc, #172]	@ (8003898 <HAL_RCC_ClockConfig+0x1f0>)
 80037ea:	4313      	orrs	r3, r2
 80037ec:	608b      	str	r3, [r1, #8]
=======
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f003 0302 	and.w	r3, r3, #2
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d010      	beq.n	8004116 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	689a      	ldr	r2, [r3, #8]
 80040f8:	4b31      	ldr	r3, [pc, #196]	@ (80041c0 <HAL_RCC_ClockConfig+0x1f0>)
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004100:	429a      	cmp	r2, r3
 8004102:	d208      	bcs.n	8004116 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004104:	4b2e      	ldr	r3, [pc, #184]	@ (80041c0 <HAL_RCC_ClockConfig+0x1f0>)
 8004106:	689b      	ldr	r3, [r3, #8]
 8004108:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	689b      	ldr	r3, [r3, #8]
 8004110:	492b      	ldr	r1, [pc, #172]	@ (80041c0 <HAL_RCC_ClockConfig+0x1f0>)
 8004112:	4313      	orrs	r3, r2
 8004114:	608b      	str	r3, [r1, #8]
>>>>>>> Stashed changes
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
<<<<<<< Updated upstream
 80037ee:	4b29      	ldr	r3, [pc, #164]	@ (8003894 <HAL_RCC_ClockConfig+0x1ec>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f003 0307 	and.w	r3, r3, #7
 80037f6:	683a      	ldr	r2, [r7, #0]
 80037f8:	429a      	cmp	r2, r3
 80037fa:	d210      	bcs.n	800381e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037fc:	4b25      	ldr	r3, [pc, #148]	@ (8003894 <HAL_RCC_ClockConfig+0x1ec>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f023 0207 	bic.w	r2, r3, #7
 8003804:	4923      	ldr	r1, [pc, #140]	@ (8003894 <HAL_RCC_ClockConfig+0x1ec>)
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	4313      	orrs	r3, r2
 800380a:	600b      	str	r3, [r1, #0]
=======
 8004116:	4b29      	ldr	r3, [pc, #164]	@ (80041bc <HAL_RCC_ClockConfig+0x1ec>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f003 0307 	and.w	r3, r3, #7
 800411e:	683a      	ldr	r2, [r7, #0]
 8004120:	429a      	cmp	r2, r3
 8004122:	d210      	bcs.n	8004146 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004124:	4b25      	ldr	r3, [pc, #148]	@ (80041bc <HAL_RCC_ClockConfig+0x1ec>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f023 0207 	bic.w	r2, r3, #7
 800412c:	4923      	ldr	r1, [pc, #140]	@ (80041bc <HAL_RCC_ClockConfig+0x1ec>)
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	4313      	orrs	r3, r2
 8004132:	600b      	str	r3, [r1, #0]
>>>>>>> Stashed changes

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
<<<<<<< Updated upstream
 800380c:	4b21      	ldr	r3, [pc, #132]	@ (8003894 <HAL_RCC_ClockConfig+0x1ec>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f003 0307 	and.w	r3, r3, #7
 8003814:	683a      	ldr	r2, [r7, #0]
 8003816:	429a      	cmp	r2, r3
 8003818:	d001      	beq.n	800381e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	e036      	b.n	800388c <HAL_RCC_ClockConfig+0x1e4>
=======
 8004134:	4b21      	ldr	r3, [pc, #132]	@ (80041bc <HAL_RCC_ClockConfig+0x1ec>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f003 0307 	and.w	r3, r3, #7
 800413c:	683a      	ldr	r2, [r7, #0]
 800413e:	429a      	cmp	r2, r3
 8004140:	d001      	beq.n	8004146 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004142:	2301      	movs	r3, #1
 8004144:	e036      	b.n	80041b4 <HAL_RCC_ClockConfig+0x1e4>
>>>>>>> Stashed changes
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
<<<<<<< Updated upstream
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f003 0304 	and.w	r3, r3, #4
 8003826:	2b00      	cmp	r3, #0
 8003828:	d008      	beq.n	800383c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800382a:	4b1b      	ldr	r3, [pc, #108]	@ (8003898 <HAL_RCC_ClockConfig+0x1f0>)
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	68db      	ldr	r3, [r3, #12]
 8003836:	4918      	ldr	r1, [pc, #96]	@ (8003898 <HAL_RCC_ClockConfig+0x1f0>)
 8003838:	4313      	orrs	r3, r2
 800383a:	608b      	str	r3, [r1, #8]
=======
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f003 0304 	and.w	r3, r3, #4
 800414e:	2b00      	cmp	r3, #0
 8004150:	d008      	beq.n	8004164 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004152:	4b1b      	ldr	r3, [pc, #108]	@ (80041c0 <HAL_RCC_ClockConfig+0x1f0>)
 8004154:	689b      	ldr	r3, [r3, #8]
 8004156:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	68db      	ldr	r3, [r3, #12]
 800415e:	4918      	ldr	r1, [pc, #96]	@ (80041c0 <HAL_RCC_ClockConfig+0x1f0>)
 8004160:	4313      	orrs	r3, r2
 8004162:	608b      	str	r3, [r1, #8]
>>>>>>> Stashed changes
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
<<<<<<< Updated upstream
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f003 0308 	and.w	r3, r3, #8
 8003844:	2b00      	cmp	r3, #0
 8003846:	d009      	beq.n	800385c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003848:	4b13      	ldr	r3, [pc, #76]	@ (8003898 <HAL_RCC_ClockConfig+0x1f0>)
 800384a:	689b      	ldr	r3, [r3, #8]
 800384c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	691b      	ldr	r3, [r3, #16]
 8003854:	00db      	lsls	r3, r3, #3
 8003856:	4910      	ldr	r1, [pc, #64]	@ (8003898 <HAL_RCC_ClockConfig+0x1f0>)
 8003858:	4313      	orrs	r3, r2
 800385a:	608b      	str	r3, [r1, #8]
=======
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f003 0308 	and.w	r3, r3, #8
 800416c:	2b00      	cmp	r3, #0
 800416e:	d009      	beq.n	8004184 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004170:	4b13      	ldr	r3, [pc, #76]	@ (80041c0 <HAL_RCC_ClockConfig+0x1f0>)
 8004172:	689b      	ldr	r3, [r3, #8]
 8004174:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	691b      	ldr	r3, [r3, #16]
 800417c:	00db      	lsls	r3, r3, #3
 800417e:	4910      	ldr	r1, [pc, #64]	@ (80041c0 <HAL_RCC_ClockConfig+0x1f0>)
 8004180:	4313      	orrs	r3, r2
 8004182:	608b      	str	r3, [r1, #8]
>>>>>>> Stashed changes
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
<<<<<<< Updated upstream
 800385c:	f000 f824 	bl	80038a8 <HAL_RCC_GetSysClockFreq>
 8003860:	4602      	mov	r2, r0
 8003862:	4b0d      	ldr	r3, [pc, #52]	@ (8003898 <HAL_RCC_ClockConfig+0x1f0>)
 8003864:	689b      	ldr	r3, [r3, #8]
 8003866:	091b      	lsrs	r3, r3, #4
 8003868:	f003 030f 	and.w	r3, r3, #15
 800386c:	490b      	ldr	r1, [pc, #44]	@ (800389c <HAL_RCC_ClockConfig+0x1f4>)
 800386e:	5ccb      	ldrb	r3, [r1, r3]
 8003870:	f003 031f 	and.w	r3, r3, #31
 8003874:	fa22 f303 	lsr.w	r3, r2, r3
 8003878:	4a09      	ldr	r2, [pc, #36]	@ (80038a0 <HAL_RCC_ClockConfig+0x1f8>)
 800387a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800387c:	4b09      	ldr	r3, [pc, #36]	@ (80038a4 <HAL_RCC_ClockConfig+0x1fc>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4618      	mov	r0, r3
 8003882:	f7fe fdbb 	bl	80023fc <HAL_InitTick>
 8003886:	4603      	mov	r3, r0
 8003888:	72fb      	strb	r3, [r7, #11]

  return status;
 800388a:	7afb      	ldrb	r3, [r7, #11]
}
 800388c:	4618      	mov	r0, r3
 800388e:	3710      	adds	r7, #16
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}
 8003894:	40022000 	.word	0x40022000
 8003898:	40021000 	.word	0x40021000
 800389c:	0801101c 	.word	0x0801101c
 80038a0:	2000000c 	.word	0x2000000c
 80038a4:	20000010 	.word	0x20000010

080038a8 <HAL_RCC_GetSysClockFreq>:
=======
 8004184:	f000 f824 	bl	80041d0 <HAL_RCC_GetSysClockFreq>
 8004188:	4602      	mov	r2, r0
 800418a:	4b0d      	ldr	r3, [pc, #52]	@ (80041c0 <HAL_RCC_ClockConfig+0x1f0>)
 800418c:	689b      	ldr	r3, [r3, #8]
 800418e:	091b      	lsrs	r3, r3, #4
 8004190:	f003 030f 	and.w	r3, r3, #15
 8004194:	490b      	ldr	r1, [pc, #44]	@ (80041c4 <HAL_RCC_ClockConfig+0x1f4>)
 8004196:	5ccb      	ldrb	r3, [r1, r3]
 8004198:	f003 031f 	and.w	r3, r3, #31
 800419c:	fa22 f303 	lsr.w	r3, r2, r3
 80041a0:	4a09      	ldr	r2, [pc, #36]	@ (80041c8 <HAL_RCC_ClockConfig+0x1f8>)
 80041a2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80041a4:	4b09      	ldr	r3, [pc, #36]	@ (80041cc <HAL_RCC_ClockConfig+0x1fc>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4618      	mov	r0, r3
 80041aa:	f7fe f947 	bl	800243c <HAL_InitTick>
 80041ae:	4603      	mov	r3, r0
 80041b0:	72fb      	strb	r3, [r7, #11]

  return status;
 80041b2:	7afb      	ldrb	r3, [r7, #11]
}
 80041b4:	4618      	mov	r0, r3
 80041b6:	3710      	adds	r7, #16
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bd80      	pop	{r7, pc}
 80041bc:	40022000 	.word	0x40022000
 80041c0:	40021000 	.word	0x40021000
 80041c4:	0800d8e4 	.word	0x0800d8e4
 80041c8:	2000000c 	.word	0x2000000c
 80041cc:	20000010 	.word	0x20000010

080041d0 <HAL_RCC_GetSysClockFreq>:
>>>>>>> Stashed changes
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
<<<<<<< Updated upstream
 80038a8:	b480      	push	{r7}
 80038aa:	b089      	sub	sp, #36	@ 0x24
 80038ac:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80038ae:	2300      	movs	r3, #0
 80038b0:	61fb      	str	r3, [r7, #28]
 80038b2:	2300      	movs	r3, #0
 80038b4:	61bb      	str	r3, [r7, #24]
=======
 80041d0:	b480      	push	{r7}
 80041d2:	b089      	sub	sp, #36	@ 0x24
 80041d4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80041d6:	2300      	movs	r3, #0
 80041d8:	61fb      	str	r3, [r7, #28]
 80041da:	2300      	movs	r3, #0
 80041dc:	61bb      	str	r3, [r7, #24]
>>>>>>> Stashed changes
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
<<<<<<< Updated upstream
 80038b6:	4b3e      	ldr	r3, [pc, #248]	@ (80039b0 <HAL_RCC_GetSysClockFreq+0x108>)
 80038b8:	689b      	ldr	r3, [r3, #8]
 80038ba:	f003 030c 	and.w	r3, r3, #12
 80038be:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80038c0:	4b3b      	ldr	r3, [pc, #236]	@ (80039b0 <HAL_RCC_GetSysClockFreq+0x108>)
 80038c2:	68db      	ldr	r3, [r3, #12]
 80038c4:	f003 0303 	and.w	r3, r3, #3
 80038c8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d005      	beq.n	80038dc <HAL_RCC_GetSysClockFreq+0x34>
 80038d0:	693b      	ldr	r3, [r7, #16]
 80038d2:	2b0c      	cmp	r3, #12
 80038d4:	d121      	bne.n	800391a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	2b01      	cmp	r3, #1
 80038da:	d11e      	bne.n	800391a <HAL_RCC_GetSysClockFreq+0x72>
=======
 80041de:	4b3e      	ldr	r3, [pc, #248]	@ (80042d8 <HAL_RCC_GetSysClockFreq+0x108>)
 80041e0:	689b      	ldr	r3, [r3, #8]
 80041e2:	f003 030c 	and.w	r3, r3, #12
 80041e6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80041e8:	4b3b      	ldr	r3, [pc, #236]	@ (80042d8 <HAL_RCC_GetSysClockFreq+0x108>)
 80041ea:	68db      	ldr	r3, [r3, #12]
 80041ec:	f003 0303 	and.w	r3, r3, #3
 80041f0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d005      	beq.n	8004204 <HAL_RCC_GetSysClockFreq+0x34>
 80041f8:	693b      	ldr	r3, [r7, #16]
 80041fa:	2b0c      	cmp	r3, #12
 80041fc:	d121      	bne.n	8004242 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	2b01      	cmp	r3, #1
 8004202:	d11e      	bne.n	8004242 <HAL_RCC_GetSysClockFreq+0x72>
>>>>>>> Stashed changes
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
<<<<<<< Updated upstream
 80038dc:	4b34      	ldr	r3, [pc, #208]	@ (80039b0 <HAL_RCC_GetSysClockFreq+0x108>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f003 0308 	and.w	r3, r3, #8
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d107      	bne.n	80038f8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80038e8:	4b31      	ldr	r3, [pc, #196]	@ (80039b0 <HAL_RCC_GetSysClockFreq+0x108>)
 80038ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80038ee:	0a1b      	lsrs	r3, r3, #8
 80038f0:	f003 030f 	and.w	r3, r3, #15
 80038f4:	61fb      	str	r3, [r7, #28]
 80038f6:	e005      	b.n	8003904 <HAL_RCC_GetSysClockFreq+0x5c>
=======
 8004204:	4b34      	ldr	r3, [pc, #208]	@ (80042d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f003 0308 	and.w	r3, r3, #8
 800420c:	2b00      	cmp	r3, #0
 800420e:	d107      	bne.n	8004220 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004210:	4b31      	ldr	r3, [pc, #196]	@ (80042d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004212:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004216:	0a1b      	lsrs	r3, r3, #8
 8004218:	f003 030f 	and.w	r3, r3, #15
 800421c:	61fb      	str	r3, [r7, #28]
 800421e:	e005      	b.n	800422c <HAL_RCC_GetSysClockFreq+0x5c>
>>>>>>> Stashed changes
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
<<<<<<< Updated upstream
 80038f8:	4b2d      	ldr	r3, [pc, #180]	@ (80039b0 <HAL_RCC_GetSysClockFreq+0x108>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	091b      	lsrs	r3, r3, #4
 80038fe:	f003 030f 	and.w	r3, r3, #15
 8003902:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003904:	4a2b      	ldr	r2, [pc, #172]	@ (80039b4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003906:	69fb      	ldr	r3, [r7, #28]
 8003908:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800390c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800390e:	693b      	ldr	r3, [r7, #16]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d10d      	bne.n	8003930 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003914:	69fb      	ldr	r3, [r7, #28]
 8003916:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003918:	e00a      	b.n	8003930 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	2b04      	cmp	r3, #4
 800391e:	d102      	bne.n	8003926 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003920:	4b25      	ldr	r3, [pc, #148]	@ (80039b8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003922:	61bb      	str	r3, [r7, #24]
 8003924:	e004      	b.n	8003930 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	2b08      	cmp	r3, #8
 800392a:	d101      	bne.n	8003930 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800392c:	4b23      	ldr	r3, [pc, #140]	@ (80039bc <HAL_RCC_GetSysClockFreq+0x114>)
 800392e:	61bb      	str	r3, [r7, #24]
=======
 8004220:	4b2d      	ldr	r3, [pc, #180]	@ (80042d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	091b      	lsrs	r3, r3, #4
 8004226:	f003 030f 	and.w	r3, r3, #15
 800422a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800422c:	4a2b      	ldr	r2, [pc, #172]	@ (80042dc <HAL_RCC_GetSysClockFreq+0x10c>)
 800422e:	69fb      	ldr	r3, [r7, #28]
 8004230:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004234:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004236:	693b      	ldr	r3, [r7, #16]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d10d      	bne.n	8004258 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800423c:	69fb      	ldr	r3, [r7, #28]
 800423e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004240:	e00a      	b.n	8004258 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004242:	693b      	ldr	r3, [r7, #16]
 8004244:	2b04      	cmp	r3, #4
 8004246:	d102      	bne.n	800424e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004248:	4b25      	ldr	r3, [pc, #148]	@ (80042e0 <HAL_RCC_GetSysClockFreq+0x110>)
 800424a:	61bb      	str	r3, [r7, #24]
 800424c:	e004      	b.n	8004258 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	2b08      	cmp	r3, #8
 8004252:	d101      	bne.n	8004258 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004254:	4b23      	ldr	r3, [pc, #140]	@ (80042e4 <HAL_RCC_GetSysClockFreq+0x114>)
 8004256:	61bb      	str	r3, [r7, #24]
>>>>>>> Stashed changes
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
<<<<<<< Updated upstream
 8003930:	693b      	ldr	r3, [r7, #16]
 8003932:	2b0c      	cmp	r3, #12
 8003934:	d134      	bne.n	80039a0 <HAL_RCC_GetSysClockFreq+0xf8>
=======
 8004258:	693b      	ldr	r3, [r7, #16]
 800425a:	2b0c      	cmp	r3, #12
 800425c:	d134      	bne.n	80042c8 <HAL_RCC_GetSysClockFreq+0xf8>
>>>>>>> Stashed changes
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
<<<<<<< Updated upstream
 8003936:	4b1e      	ldr	r3, [pc, #120]	@ (80039b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003938:	68db      	ldr	r3, [r3, #12]
 800393a:	f003 0303 	and.w	r3, r3, #3
 800393e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	2b02      	cmp	r3, #2
 8003944:	d003      	beq.n	800394e <HAL_RCC_GetSysClockFreq+0xa6>
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	2b03      	cmp	r3, #3
 800394a:	d003      	beq.n	8003954 <HAL_RCC_GetSysClockFreq+0xac>
 800394c:	e005      	b.n	800395a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800394e:	4b1a      	ldr	r3, [pc, #104]	@ (80039b8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003950:	617b      	str	r3, [r7, #20]
      break;
 8003952:	e005      	b.n	8003960 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003954:	4b19      	ldr	r3, [pc, #100]	@ (80039bc <HAL_RCC_GetSysClockFreq+0x114>)
 8003956:	617b      	str	r3, [r7, #20]
      break;
 8003958:	e002      	b.n	8003960 <HAL_RCC_GetSysClockFreq+0xb8>
=======
 800425e:	4b1e      	ldr	r3, [pc, #120]	@ (80042d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004260:	68db      	ldr	r3, [r3, #12]
 8004262:	f003 0303 	and.w	r3, r3, #3
 8004266:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	2b02      	cmp	r3, #2
 800426c:	d003      	beq.n	8004276 <HAL_RCC_GetSysClockFreq+0xa6>
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	2b03      	cmp	r3, #3
 8004272:	d003      	beq.n	800427c <HAL_RCC_GetSysClockFreq+0xac>
 8004274:	e005      	b.n	8004282 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004276:	4b1a      	ldr	r3, [pc, #104]	@ (80042e0 <HAL_RCC_GetSysClockFreq+0x110>)
 8004278:	617b      	str	r3, [r7, #20]
      break;
 800427a:	e005      	b.n	8004288 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800427c:	4b19      	ldr	r3, [pc, #100]	@ (80042e4 <HAL_RCC_GetSysClockFreq+0x114>)
 800427e:	617b      	str	r3, [r7, #20]
      break;
 8004280:	e002      	b.n	8004288 <HAL_RCC_GetSysClockFreq+0xb8>
>>>>>>> Stashed changes

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
<<<<<<< Updated upstream
 800395a:	69fb      	ldr	r3, [r7, #28]
 800395c:	617b      	str	r3, [r7, #20]
      break;
 800395e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003960:	4b13      	ldr	r3, [pc, #76]	@ (80039b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003962:	68db      	ldr	r3, [r3, #12]
 8003964:	091b      	lsrs	r3, r3, #4
 8003966:	f003 0307 	and.w	r3, r3, #7
 800396a:	3301      	adds	r3, #1
 800396c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800396e:	4b10      	ldr	r3, [pc, #64]	@ (80039b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003970:	68db      	ldr	r3, [r3, #12]
 8003972:	0a1b      	lsrs	r3, r3, #8
 8003974:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003978:	697a      	ldr	r2, [r7, #20]
 800397a:	fb03 f202 	mul.w	r2, r3, r2
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	fbb2 f3f3 	udiv	r3, r2, r3
 8003984:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003986:	4b0a      	ldr	r3, [pc, #40]	@ (80039b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003988:	68db      	ldr	r3, [r3, #12]
 800398a:	0e5b      	lsrs	r3, r3, #25
 800398c:	f003 0303 	and.w	r3, r3, #3
 8003990:	3301      	adds	r3, #1
 8003992:	005b      	lsls	r3, r3, #1
 8003994:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003996:	697a      	ldr	r2, [r7, #20]
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	fbb2 f3f3 	udiv	r3, r2, r3
 800399e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80039a0:	69bb      	ldr	r3, [r7, #24]
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	3724      	adds	r7, #36	@ 0x24
 80039a6:	46bd      	mov	sp, r7
 80039a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ac:	4770      	bx	lr
 80039ae:	bf00      	nop
 80039b0:	40021000 	.word	0x40021000
 80039b4:	08011034 	.word	0x08011034
 80039b8:	00f42400 	.word	0x00f42400
 80039bc:	007a1200 	.word	0x007a1200

080039c0 <HAL_RCC_GetHCLKFreq>:
=======
 8004282:	69fb      	ldr	r3, [r7, #28]
 8004284:	617b      	str	r3, [r7, #20]
      break;
 8004286:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004288:	4b13      	ldr	r3, [pc, #76]	@ (80042d8 <HAL_RCC_GetSysClockFreq+0x108>)
 800428a:	68db      	ldr	r3, [r3, #12]
 800428c:	091b      	lsrs	r3, r3, #4
 800428e:	f003 0307 	and.w	r3, r3, #7
 8004292:	3301      	adds	r3, #1
 8004294:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004296:	4b10      	ldr	r3, [pc, #64]	@ (80042d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004298:	68db      	ldr	r3, [r3, #12]
 800429a:	0a1b      	lsrs	r3, r3, #8
 800429c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80042a0:	697a      	ldr	r2, [r7, #20]
 80042a2:	fb03 f202 	mul.w	r2, r3, r2
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80042ac:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80042ae:	4b0a      	ldr	r3, [pc, #40]	@ (80042d8 <HAL_RCC_GetSysClockFreq+0x108>)
 80042b0:	68db      	ldr	r3, [r3, #12]
 80042b2:	0e5b      	lsrs	r3, r3, #25
 80042b4:	f003 0303 	and.w	r3, r3, #3
 80042b8:	3301      	adds	r3, #1
 80042ba:	005b      	lsls	r3, r3, #1
 80042bc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80042be:	697a      	ldr	r2, [r7, #20]
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80042c6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80042c8:	69bb      	ldr	r3, [r7, #24]
}
 80042ca:	4618      	mov	r0, r3
 80042cc:	3724      	adds	r7, #36	@ 0x24
 80042ce:	46bd      	mov	sp, r7
 80042d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d4:	4770      	bx	lr
 80042d6:	bf00      	nop
 80042d8:	40021000 	.word	0x40021000
 80042dc:	0800d8fc 	.word	0x0800d8fc
 80042e0:	00f42400 	.word	0x00f42400
 80042e4:	007a1200 	.word	0x007a1200

080042e8 <HAL_RCC_GetHCLKFreq>:
>>>>>>> Stashed changes
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
<<<<<<< Updated upstream
 80039c0:	b480      	push	{r7}
 80039c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80039c4:	4b03      	ldr	r3, [pc, #12]	@ (80039d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80039c6:	681b      	ldr	r3, [r3, #0]
}
 80039c8:	4618      	mov	r0, r3
 80039ca:	46bd      	mov	sp, r7
 80039cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d0:	4770      	bx	lr
 80039d2:	bf00      	nop
 80039d4:	2000000c 	.word	0x2000000c

080039d8 <HAL_RCC_GetPCLK1Freq>:
=======
 80042e8:	b480      	push	{r7}
 80042ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80042ec:	4b03      	ldr	r3, [pc, #12]	@ (80042fc <HAL_RCC_GetHCLKFreq+0x14>)
 80042ee:	681b      	ldr	r3, [r3, #0]
}
 80042f0:	4618      	mov	r0, r3
 80042f2:	46bd      	mov	sp, r7
 80042f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f8:	4770      	bx	lr
 80042fa:	bf00      	nop
 80042fc:	2000000c 	.word	0x2000000c

08004300 <HAL_RCC_GetPCLK1Freq>:
>>>>>>> Stashed changes
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
<<<<<<< Updated upstream
 80039d8:	b580      	push	{r7, lr}
 80039da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80039dc:	f7ff fff0 	bl	80039c0 <HAL_RCC_GetHCLKFreq>
 80039e0:	4602      	mov	r2, r0
 80039e2:	4b06      	ldr	r3, [pc, #24]	@ (80039fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80039e4:	689b      	ldr	r3, [r3, #8]
 80039e6:	0a1b      	lsrs	r3, r3, #8
 80039e8:	f003 0307 	and.w	r3, r3, #7
 80039ec:	4904      	ldr	r1, [pc, #16]	@ (8003a00 <HAL_RCC_GetPCLK1Freq+0x28>)
 80039ee:	5ccb      	ldrb	r3, [r1, r3]
 80039f0:	f003 031f 	and.w	r3, r3, #31
 80039f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039f8:	4618      	mov	r0, r3
 80039fa:	bd80      	pop	{r7, pc}
 80039fc:	40021000 	.word	0x40021000
 8003a00:	0801102c 	.word	0x0801102c

08003a04 <HAL_RCC_GetPCLK2Freq>:
=======
 8004300:	b580      	push	{r7, lr}
 8004302:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004304:	f7ff fff0 	bl	80042e8 <HAL_RCC_GetHCLKFreq>
 8004308:	4602      	mov	r2, r0
 800430a:	4b06      	ldr	r3, [pc, #24]	@ (8004324 <HAL_RCC_GetPCLK1Freq+0x24>)
 800430c:	689b      	ldr	r3, [r3, #8]
 800430e:	0a1b      	lsrs	r3, r3, #8
 8004310:	f003 0307 	and.w	r3, r3, #7
 8004314:	4904      	ldr	r1, [pc, #16]	@ (8004328 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004316:	5ccb      	ldrb	r3, [r1, r3]
 8004318:	f003 031f 	and.w	r3, r3, #31
 800431c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004320:	4618      	mov	r0, r3
 8004322:	bd80      	pop	{r7, pc}
 8004324:	40021000 	.word	0x40021000
 8004328:	0800d8f4 	.word	0x0800d8f4

0800432c <HAL_RCC_GetPCLK2Freq>:
>>>>>>> Stashed changes
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
<<<<<<< Updated upstream
 8003a04:	b580      	push	{r7, lr}
 8003a06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003a08:	f7ff ffda 	bl	80039c0 <HAL_RCC_GetHCLKFreq>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	4b06      	ldr	r3, [pc, #24]	@ (8003a28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a10:	689b      	ldr	r3, [r3, #8]
 8003a12:	0adb      	lsrs	r3, r3, #11
 8003a14:	f003 0307 	and.w	r3, r3, #7
 8003a18:	4904      	ldr	r1, [pc, #16]	@ (8003a2c <HAL_RCC_GetPCLK2Freq+0x28>)
 8003a1a:	5ccb      	ldrb	r3, [r1, r3]
 8003a1c:	f003 031f 	and.w	r3, r3, #31
 8003a20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a24:	4618      	mov	r0, r3
 8003a26:	bd80      	pop	{r7, pc}
 8003a28:	40021000 	.word	0x40021000
 8003a2c:	0801102c 	.word	0x0801102c

08003a30 <HAL_RCC_GetClockConfig>:
=======
 800432c:	b580      	push	{r7, lr}
 800432e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004330:	f7ff ffda 	bl	80042e8 <HAL_RCC_GetHCLKFreq>
 8004334:	4602      	mov	r2, r0
 8004336:	4b06      	ldr	r3, [pc, #24]	@ (8004350 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004338:	689b      	ldr	r3, [r3, #8]
 800433a:	0adb      	lsrs	r3, r3, #11
 800433c:	f003 0307 	and.w	r3, r3, #7
 8004340:	4904      	ldr	r1, [pc, #16]	@ (8004354 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004342:	5ccb      	ldrb	r3, [r1, r3]
 8004344:	f003 031f 	and.w	r3, r3, #31
 8004348:	fa22 f303 	lsr.w	r3, r2, r3
}
 800434c:	4618      	mov	r0, r3
 800434e:	bd80      	pop	{r7, pc}
 8004350:	40021000 	.word	0x40021000
 8004354:	0800d8f4 	.word	0x0800d8f4

08004358 <HAL_RCC_GetClockConfig>:
>>>>>>> Stashed changes
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
<<<<<<< Updated upstream
 8003a30:	b480      	push	{r7}
 8003a32:	b083      	sub	sp, #12
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
 8003a38:	6039      	str	r1, [r7, #0]
=======
 8004358:	b480      	push	{r7}
 800435a:	b083      	sub	sp, #12
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
 8004360:	6039      	str	r1, [r7, #0]
>>>>>>> Stashed changes
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
<<<<<<< Updated upstream
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	220f      	movs	r2, #15
 8003a3e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003a40:	4b12      	ldr	r3, [pc, #72]	@ (8003a8c <HAL_RCC_GetClockConfig+0x5c>)
 8003a42:	689b      	ldr	r3, [r3, #8]
 8003a44:	f003 0203 	and.w	r2, r3, #3
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003a4c:	4b0f      	ldr	r3, [pc, #60]	@ (8003a8c <HAL_RCC_GetClockConfig+0x5c>)
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003a58:	4b0c      	ldr	r3, [pc, #48]	@ (8003a8c <HAL_RCC_GetClockConfig+0x5c>)
 8003a5a:	689b      	ldr	r3, [r3, #8]
 8003a5c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003a64:	4b09      	ldr	r3, [pc, #36]	@ (8003a8c <HAL_RCC_GetClockConfig+0x5c>)
 8003a66:	689b      	ldr	r3, [r3, #8]
 8003a68:	08db      	lsrs	r3, r3, #3
 8003a6a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003a72:	4b07      	ldr	r3, [pc, #28]	@ (8003a90 <HAL_RCC_GetClockConfig+0x60>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f003 0207 	and.w	r2, r3, #7
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	601a      	str	r2, [r3, #0]
}
 8003a7e:	bf00      	nop
 8003a80:	370c      	adds	r7, #12
 8003a82:	46bd      	mov	sp, r7
 8003a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a88:	4770      	bx	lr
 8003a8a:	bf00      	nop
 8003a8c:	40021000 	.word	0x40021000
 8003a90:	40022000 	.word	0x40022000

08003a94 <RCC_SetFlashLatencyFromMSIRange>:
=======
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	220f      	movs	r2, #15
 8004366:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004368:	4b12      	ldr	r3, [pc, #72]	@ (80043b4 <HAL_RCC_GetClockConfig+0x5c>)
 800436a:	689b      	ldr	r3, [r3, #8]
 800436c:	f003 0203 	and.w	r2, r3, #3
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004374:	4b0f      	ldr	r3, [pc, #60]	@ (80043b4 <HAL_RCC_GetClockConfig+0x5c>)
 8004376:	689b      	ldr	r3, [r3, #8]
 8004378:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004380:	4b0c      	ldr	r3, [pc, #48]	@ (80043b4 <HAL_RCC_GetClockConfig+0x5c>)
 8004382:	689b      	ldr	r3, [r3, #8]
 8004384:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800438c:	4b09      	ldr	r3, [pc, #36]	@ (80043b4 <HAL_RCC_GetClockConfig+0x5c>)
 800438e:	689b      	ldr	r3, [r3, #8]
 8004390:	08db      	lsrs	r3, r3, #3
 8004392:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800439a:	4b07      	ldr	r3, [pc, #28]	@ (80043b8 <HAL_RCC_GetClockConfig+0x60>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f003 0207 	and.w	r2, r3, #7
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	601a      	str	r2, [r3, #0]
}
 80043a6:	bf00      	nop
 80043a8:	370c      	adds	r7, #12
 80043aa:	46bd      	mov	sp, r7
 80043ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b0:	4770      	bx	lr
 80043b2:	bf00      	nop
 80043b4:	40021000 	.word	0x40021000
 80043b8:	40022000 	.word	0x40022000

080043bc <RCC_SetFlashLatencyFromMSIRange>:
>>>>>>> Stashed changes
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
<<<<<<< Updated upstream
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b086      	sub	sp, #24
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003aa0:	4b2a      	ldr	r3, [pc, #168]	@ (8003b4c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003aa2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003aa4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d003      	beq.n	8003ab4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003aac:	f7ff f9bc 	bl	8002e28 <HAL_PWREx_GetVoltageRange>
 8003ab0:	6178      	str	r0, [r7, #20]
 8003ab2:	e014      	b.n	8003ade <RCC_SetFlashLatencyFromMSIRange+0x4a>
=======
 80043bc:	b580      	push	{r7, lr}
 80043be:	b086      	sub	sp, #24
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80043c4:	2300      	movs	r3, #0
 80043c6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80043c8:	4b2a      	ldr	r3, [pc, #168]	@ (8004474 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80043ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d003      	beq.n	80043dc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80043d4:	f7ff f9bc 	bl	8003750 <HAL_PWREx_GetVoltageRange>
 80043d8:	6178      	str	r0, [r7, #20]
 80043da:	e014      	b.n	8004406 <RCC_SetFlashLatencyFromMSIRange+0x4a>
>>>>>>> Stashed changes
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
<<<<<<< Updated upstream
 8003ab4:	4b25      	ldr	r3, [pc, #148]	@ (8003b4c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ab6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ab8:	4a24      	ldr	r2, [pc, #144]	@ (8003b4c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003aba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003abe:	6593      	str	r3, [r2, #88]	@ 0x58
 8003ac0:	4b22      	ldr	r3, [pc, #136]	@ (8003b4c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ac2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ac4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ac8:	60fb      	str	r3, [r7, #12]
 8003aca:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003acc:	f7ff f9ac 	bl	8002e28 <HAL_PWREx_GetVoltageRange>
 8003ad0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003ad2:	4b1e      	ldr	r3, [pc, #120]	@ (8003b4c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ad4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ad6:	4a1d      	ldr	r2, [pc, #116]	@ (8003b4c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ad8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003adc:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ae4:	d10b      	bne.n	8003afe <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2b80      	cmp	r3, #128	@ 0x80
 8003aea:	d919      	bls.n	8003b20 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2ba0      	cmp	r3, #160	@ 0xa0
 8003af0:	d902      	bls.n	8003af8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003af2:	2302      	movs	r3, #2
 8003af4:	613b      	str	r3, [r7, #16]
 8003af6:	e013      	b.n	8003b20 <RCC_SetFlashLatencyFromMSIRange+0x8c>
=======
 80043dc:	4b25      	ldr	r3, [pc, #148]	@ (8004474 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80043de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043e0:	4a24      	ldr	r2, [pc, #144]	@ (8004474 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80043e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80043e6:	6593      	str	r3, [r2, #88]	@ 0x58
 80043e8:	4b22      	ldr	r3, [pc, #136]	@ (8004474 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80043ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80043f0:	60fb      	str	r3, [r7, #12]
 80043f2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80043f4:	f7ff f9ac 	bl	8003750 <HAL_PWREx_GetVoltageRange>
 80043f8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80043fa:	4b1e      	ldr	r3, [pc, #120]	@ (8004474 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80043fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043fe:	4a1d      	ldr	r2, [pc, #116]	@ (8004474 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004400:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004404:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800440c:	d10b      	bne.n	8004426 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2b80      	cmp	r3, #128	@ 0x80
 8004412:	d919      	bls.n	8004448 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2ba0      	cmp	r3, #160	@ 0xa0
 8004418:	d902      	bls.n	8004420 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800441a:	2302      	movs	r3, #2
 800441c:	613b      	str	r3, [r7, #16]
 800441e:	e013      	b.n	8004448 <RCC_SetFlashLatencyFromMSIRange+0x8c>
>>>>>>> Stashed changes
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
<<<<<<< Updated upstream
 8003af8:	2301      	movs	r3, #1
 8003afa:	613b      	str	r3, [r7, #16]
 8003afc:	e010      	b.n	8003b20 <RCC_SetFlashLatencyFromMSIRange+0x8c>
=======
 8004420:	2301      	movs	r3, #1
 8004422:	613b      	str	r3, [r7, #16]
 8004424:	e010      	b.n	8004448 <RCC_SetFlashLatencyFromMSIRange+0x8c>
>>>>>>> Stashed changes
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
<<<<<<< Updated upstream
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2b80      	cmp	r3, #128	@ 0x80
 8003b02:	d902      	bls.n	8003b0a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003b04:	2303      	movs	r3, #3
 8003b06:	613b      	str	r3, [r7, #16]
 8003b08:	e00a      	b.n	8003b20 <RCC_SetFlashLatencyFromMSIRange+0x8c>
=======
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2b80      	cmp	r3, #128	@ 0x80
 800442a:	d902      	bls.n	8004432 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800442c:	2303      	movs	r3, #3
 800442e:	613b      	str	r3, [r7, #16]
 8004430:	e00a      	b.n	8004448 <RCC_SetFlashLatencyFromMSIRange+0x8c>
>>>>>>> Stashed changes
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
<<<<<<< Updated upstream
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2b80      	cmp	r3, #128	@ 0x80
 8003b0e:	d102      	bne.n	8003b16 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003b10:	2302      	movs	r3, #2
 8003b12:	613b      	str	r3, [r7, #16]
 8003b14:	e004      	b.n	8003b20 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2b70      	cmp	r3, #112	@ 0x70
 8003b1a:	d101      	bne.n	8003b20 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	613b      	str	r3, [r7, #16]
=======
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2b80      	cmp	r3, #128	@ 0x80
 8004436:	d102      	bne.n	800443e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004438:	2302      	movs	r3, #2
 800443a:	613b      	str	r3, [r7, #16]
 800443c:	e004      	b.n	8004448 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2b70      	cmp	r3, #112	@ 0x70
 8004442:	d101      	bne.n	8004448 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004444:	2301      	movs	r3, #1
 8004446:	613b      	str	r3, [r7, #16]
>>>>>>> Stashed changes
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
<<<<<<< Updated upstream
 8003b20:	4b0b      	ldr	r3, [pc, #44]	@ (8003b50 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f023 0207 	bic.w	r2, r3, #7
 8003b28:	4909      	ldr	r1, [pc, #36]	@ (8003b50 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	600b      	str	r3, [r1, #0]
=======
 8004448:	4b0b      	ldr	r3, [pc, #44]	@ (8004478 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f023 0207 	bic.w	r2, r3, #7
 8004450:	4909      	ldr	r1, [pc, #36]	@ (8004478 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004452:	693b      	ldr	r3, [r7, #16]
 8004454:	4313      	orrs	r3, r2
 8004456:	600b      	str	r3, [r1, #0]
>>>>>>> Stashed changes

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
<<<<<<< Updated upstream
 8003b30:	4b07      	ldr	r3, [pc, #28]	@ (8003b50 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f003 0307 	and.w	r3, r3, #7
 8003b38:	693a      	ldr	r2, [r7, #16]
 8003b3a:	429a      	cmp	r2, r3
 8003b3c:	d001      	beq.n	8003b42 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	e000      	b.n	8003b44 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003b42:	2300      	movs	r3, #0
}
 8003b44:	4618      	mov	r0, r3
 8003b46:	3718      	adds	r7, #24
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}
 8003b4c:	40021000 	.word	0x40021000
 8003b50:	40022000 	.word	0x40022000

08003b54 <HAL_RCCEx_PeriphCLKConfig>:
=======
 8004458:	4b07      	ldr	r3, [pc, #28]	@ (8004478 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f003 0307 	and.w	r3, r3, #7
 8004460:	693a      	ldr	r2, [r7, #16]
 8004462:	429a      	cmp	r2, r3
 8004464:	d001      	beq.n	800446a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004466:	2301      	movs	r3, #1
 8004468:	e000      	b.n	800446c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800446a:	2300      	movs	r3, #0
}
 800446c:	4618      	mov	r0, r3
 800446e:	3718      	adds	r7, #24
 8004470:	46bd      	mov	sp, r7
 8004472:	bd80      	pop	{r7, pc}
 8004474:	40021000 	.word	0x40021000
 8004478:	40022000 	.word	0x40022000

0800447c <HAL_RCCEx_PeriphCLKConfig>:
>>>>>>> Stashed changes
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
<<<<<<< Updated upstream
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b086      	sub	sp, #24
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003b60:	2300      	movs	r3, #0
 8003b62:	74bb      	strb	r3, [r7, #18]
=======
 800447c:	b580      	push	{r7, lr}
 800447e:	b086      	sub	sp, #24
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004484:	2300      	movs	r3, #0
 8004486:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004488:	2300      	movs	r3, #0
 800448a:	74bb      	strb	r3, [r7, #18]
>>>>>>> Stashed changes
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
<<<<<<< Updated upstream
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d041      	beq.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
=======
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004494:	2b00      	cmp	r3, #0
 8004496:	d041      	beq.n	800451c <HAL_RCCEx_PeriphCLKConfig+0xa0>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
<<<<<<< Updated upstream
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003b74:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003b78:	d02a      	beq.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003b7a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003b7e:	d824      	bhi.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003b80:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003b84:	d008      	beq.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003b86:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003b8a:	d81e      	bhi.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d00a      	beq.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003b90:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003b94:	d010      	beq.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003b96:	e018      	b.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0x76>
=======
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800449c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80044a0:	d02a      	beq.n	80044f8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80044a2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80044a6:	d824      	bhi.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80044a8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80044ac:	d008      	beq.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80044ae:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80044b2:	d81e      	bhi.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d00a      	beq.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0x52>
 80044b8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80044bc:	d010      	beq.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80044be:	e018      	b.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0x76>
>>>>>>> Stashed changes
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
<<<<<<< Updated upstream
 8003b98:	4b86      	ldr	r3, [pc, #536]	@ (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b9a:	68db      	ldr	r3, [r3, #12]
 8003b9c:	4a85      	ldr	r2, [pc, #532]	@ (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b9e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ba2:	60d3      	str	r3, [r2, #12]
=======
 80044c0:	4b86      	ldr	r3, [pc, #536]	@ (80046dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044c2:	68db      	ldr	r3, [r3, #12]
 80044c4:	4a85      	ldr	r2, [pc, #532]	@ (80046dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80044ca:	60d3      	str	r3, [r2, #12]
>>>>>>> Stashed changes
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
<<<<<<< Updated upstream
 8003ba4:	e015      	b.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
=======
 80044cc:	e015      	b.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0x7e>
>>>>>>> Stashed changes

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
<<<<<<< Updated upstream
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	3304      	adds	r3, #4
 8003baa:	2100      	movs	r1, #0
 8003bac:	4618      	mov	r0, r3
 8003bae:	f000 fabb 	bl	8004128 <RCCEx_PLLSAI1_Config>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003bb6:	e00c      	b.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
=======
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	3304      	adds	r3, #4
 80044d2:	2100      	movs	r1, #0
 80044d4:	4618      	mov	r0, r3
 80044d6:	f000 fabb 	bl	8004a50 <RCCEx_PLLSAI1_Config>
 80044da:	4603      	mov	r3, r0
 80044dc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80044de:	e00c      	b.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0x7e>
>>>>>>> Stashed changes

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
<<<<<<< Updated upstream
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	3320      	adds	r3, #32
 8003bbc:	2100      	movs	r1, #0
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	f000 fba6 	bl	8004310 <RCCEx_PLLSAI2_Config>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003bc8:	e003      	b.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
=======
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	3320      	adds	r3, #32
 80044e4:	2100      	movs	r1, #0
 80044e6:	4618      	mov	r0, r3
 80044e8:	f000 fba6 	bl	8004c38 <RCCEx_PLLSAI2_Config>
 80044ec:	4603      	mov	r3, r0
 80044ee:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80044f0:	e003      	b.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0x7e>
>>>>>>> Stashed changes
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
<<<<<<< Updated upstream
 8003bca:	2301      	movs	r3, #1
 8003bcc:	74fb      	strb	r3, [r7, #19]
      break;
 8003bce:	e000      	b.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003bd0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003bd2:	7cfb      	ldrb	r3, [r7, #19]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d10b      	bne.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003bd8:	4b76      	ldr	r3, [pc, #472]	@ (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bde:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003be6:	4973      	ldr	r1, [pc, #460]	@ (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003be8:	4313      	orrs	r3, r2
 8003bea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003bee:	e001      	b.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
=======
 80044f2:	2301      	movs	r3, #1
 80044f4:	74fb      	strb	r3, [r7, #19]
      break;
 80044f6:	e000      	b.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80044f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80044fa:	7cfb      	ldrb	r3, [r7, #19]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d10b      	bne.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004500:	4b76      	ldr	r3, [pc, #472]	@ (80046dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004502:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004506:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800450e:	4973      	ldr	r1, [pc, #460]	@ (80046dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004510:	4313      	orrs	r3, r2
 8004512:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004516:	e001      	b.n	800451c <HAL_RCCEx_PeriphCLKConfig+0xa0>
>>>>>>> Stashed changes
    }
    else
    {
      /* set overall return value */
      status = ret;
<<<<<<< Updated upstream
 8003bf0:	7cfb      	ldrb	r3, [r7, #19]
 8003bf2:	74bb      	strb	r3, [r7, #18]
=======
 8004518:	7cfb      	ldrb	r3, [r7, #19]
 800451a:	74bb      	strb	r3, [r7, #18]
>>>>>>> Stashed changes
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
<<<<<<< Updated upstream
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d041      	beq.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0x130>
=======
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004524:	2b00      	cmp	r3, #0
 8004526:	d041      	beq.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0x130>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
<<<<<<< Updated upstream
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003c04:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003c08:	d02a      	beq.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003c0a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003c0e:	d824      	bhi.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003c10:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003c14:	d008      	beq.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003c16:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003c1a:	d81e      	bhi.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d00a      	beq.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003c20:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003c24:	d010      	beq.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003c26:	e018      	b.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x106>
=======
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800452c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004530:	d02a      	beq.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004532:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004536:	d824      	bhi.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004538:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800453c:	d008      	beq.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800453e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004542:	d81e      	bhi.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004544:	2b00      	cmp	r3, #0
 8004546:	d00a      	beq.n	800455e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004548:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800454c:	d010      	beq.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800454e:	e018      	b.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0x106>
>>>>>>> Stashed changes
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
<<<<<<< Updated upstream
 8003c28:	4b62      	ldr	r3, [pc, #392]	@ (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c2a:	68db      	ldr	r3, [r3, #12]
 8003c2c:	4a61      	ldr	r2, [pc, #388]	@ (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c2e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c32:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003c34:	e015      	b.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x10e>
=======
 8004550:	4b62      	ldr	r3, [pc, #392]	@ (80046dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004552:	68db      	ldr	r3, [r3, #12]
 8004554:	4a61      	ldr	r2, [pc, #388]	@ (80046dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004556:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800455a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800455c:	e015      	b.n	800458a <HAL_RCCEx_PeriphCLKConfig+0x10e>
>>>>>>> Stashed changes

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
<<<<<<< Updated upstream
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	3304      	adds	r3, #4
 8003c3a:	2100      	movs	r1, #0
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	f000 fa73 	bl	8004128 <RCCEx_PLLSAI1_Config>
 8003c42:	4603      	mov	r3, r0
 8003c44:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003c46:	e00c      	b.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x10e>
=======
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	3304      	adds	r3, #4
 8004562:	2100      	movs	r1, #0
 8004564:	4618      	mov	r0, r3
 8004566:	f000 fa73 	bl	8004a50 <RCCEx_PLLSAI1_Config>
 800456a:	4603      	mov	r3, r0
 800456c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800456e:	e00c      	b.n	800458a <HAL_RCCEx_PeriphCLKConfig+0x10e>
>>>>>>> Stashed changes

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
<<<<<<< Updated upstream
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	3320      	adds	r3, #32
 8003c4c:	2100      	movs	r1, #0
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f000 fb5e 	bl	8004310 <RCCEx_PLLSAI2_Config>
 8003c54:	4603      	mov	r3, r0
 8003c56:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003c58:	e003      	b.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x10e>
=======
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	3320      	adds	r3, #32
 8004574:	2100      	movs	r1, #0
 8004576:	4618      	mov	r0, r3
 8004578:	f000 fb5e 	bl	8004c38 <RCCEx_PLLSAI2_Config>
 800457c:	4603      	mov	r3, r0
 800457e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004580:	e003      	b.n	800458a <HAL_RCCEx_PeriphCLKConfig+0x10e>
>>>>>>> Stashed changes
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
<<<<<<< Updated upstream
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	74fb      	strb	r3, [r7, #19]
      break;
 8003c5e:	e000      	b.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003c60:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c62:	7cfb      	ldrb	r3, [r7, #19]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d10b      	bne.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003c68:	4b52      	ldr	r3, [pc, #328]	@ (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c6e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003c76:	494f      	ldr	r1, [pc, #316]	@ (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003c7e:	e001      	b.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0x130>
=======
 8004582:	2301      	movs	r3, #1
 8004584:	74fb      	strb	r3, [r7, #19]
      break;
 8004586:	e000      	b.n	800458a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004588:	bf00      	nop
    }

    if(ret == HAL_OK)
 800458a:	7cfb      	ldrb	r3, [r7, #19]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d10b      	bne.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004590:	4b52      	ldr	r3, [pc, #328]	@ (80046dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004592:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004596:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800459e:	494f      	ldr	r1, [pc, #316]	@ (80046dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045a0:	4313      	orrs	r3, r2
 80045a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80045a6:	e001      	b.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0x130>
>>>>>>> Stashed changes
    }
    else
    {
      /* set overall return value */
      status = ret;
<<<<<<< Updated upstream
 8003c80:	7cfb      	ldrb	r3, [r7, #19]
 8003c82:	74bb      	strb	r3, [r7, #18]
=======
 80045a8:	7cfb      	ldrb	r3, [r7, #19]
 80045aa:	74bb      	strb	r3, [r7, #18]
>>>>>>> Stashed changes
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
<<<<<<< Updated upstream
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	f000 80a0 	beq.w	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c92:	2300      	movs	r3, #0
 8003c94:	747b      	strb	r3, [r7, #17]
=======
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	f000 80a0 	beq.w	80046fa <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80045ba:	2300      	movs	r3, #0
 80045bc:	747b      	strb	r3, [r7, #17]
>>>>>>> Stashed changes

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
<<<<<<< Updated upstream
 8003c96:	4b47      	ldr	r3, [pc, #284]	@ (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d101      	bne.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	e000      	b.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d00d      	beq.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cac:	4b41      	ldr	r3, [pc, #260]	@ (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cb0:	4a40      	ldr	r2, [pc, #256]	@ (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cb2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003cb6:	6593      	str	r3, [r2, #88]	@ 0x58
 8003cb8:	4b3e      	ldr	r3, [pc, #248]	@ (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cbc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003cc0:	60bb      	str	r3, [r7, #8]
 8003cc2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	747b      	strb	r3, [r7, #17]
=======
 80045be:	4b47      	ldr	r3, [pc, #284]	@ (80046dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d101      	bne.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0x152>
 80045ca:	2301      	movs	r3, #1
 80045cc:	e000      	b.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80045ce:	2300      	movs	r3, #0
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d00d      	beq.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045d4:	4b41      	ldr	r3, [pc, #260]	@ (80046dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045d8:	4a40      	ldr	r2, [pc, #256]	@ (80046dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80045de:	6593      	str	r3, [r2, #88]	@ 0x58
 80045e0:	4b3e      	ldr	r3, [pc, #248]	@ (80046dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045e8:	60bb      	str	r3, [r7, #8]
 80045ea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045ec:	2301      	movs	r3, #1
 80045ee:	747b      	strb	r3, [r7, #17]
>>>>>>> Stashed changes
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
<<<<<<< Updated upstream
 8003cc8:	4b3b      	ldr	r3, [pc, #236]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a3a      	ldr	r2, [pc, #232]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003cce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003cd2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003cd4:	f7fe fd8a 	bl	80027ec <HAL_GetTick>
 8003cd8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003cda:	e009      	b.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cdc:	f7fe fd86 	bl	80027ec <HAL_GetTick>
 8003ce0:	4602      	mov	r2, r0
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	1ad3      	subs	r3, r2, r3
 8003ce6:	2b02      	cmp	r3, #2
 8003ce8:	d902      	bls.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003cea:	2303      	movs	r3, #3
 8003cec:	74fb      	strb	r3, [r7, #19]
        break;
 8003cee:	e005      	b.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003cf0:	4b31      	ldr	r3, [pc, #196]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d0ef      	beq.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x188>
=======
 80045f0:	4b3b      	ldr	r3, [pc, #236]	@ (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a3a      	ldr	r2, [pc, #232]	@ (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80045f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80045fa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80045fc:	f7fe f924 	bl	8002848 <HAL_GetTick>
 8004600:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004602:	e009      	b.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004604:	f7fe f920 	bl	8002848 <HAL_GetTick>
 8004608:	4602      	mov	r2, r0
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	1ad3      	subs	r3, r2, r3
 800460e:	2b02      	cmp	r3, #2
 8004610:	d902      	bls.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004612:	2303      	movs	r3, #3
 8004614:	74fb      	strb	r3, [r7, #19]
        break;
 8004616:	e005      	b.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004618:	4b31      	ldr	r3, [pc, #196]	@ (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004620:	2b00      	cmp	r3, #0
 8004622:	d0ef      	beq.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0x188>
>>>>>>> Stashed changes
      }
    }

    if(ret == HAL_OK)
<<<<<<< Updated upstream
 8003cfc:	7cfb      	ldrb	r3, [r7, #19]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d15c      	bne.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003d02:	4b2c      	ldr	r3, [pc, #176]	@ (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d08:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d0c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d01f      	beq.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003d1a:	697a      	ldr	r2, [r7, #20]
 8003d1c:	429a      	cmp	r2, r3
 8003d1e:	d019      	beq.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003d20:	4b24      	ldr	r3, [pc, #144]	@ (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d26:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d2a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003d2c:	4b21      	ldr	r3, [pc, #132]	@ (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d32:	4a20      	ldr	r2, [pc, #128]	@ (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d38:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003d3c:	4b1d      	ldr	r3, [pc, #116]	@ (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d42:	4a1c      	ldr	r2, [pc, #112]	@ (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d44:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d48:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003d4c:	4a19      	ldr	r2, [pc, #100]	@ (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
=======
 8004624:	7cfb      	ldrb	r3, [r7, #19]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d15c      	bne.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800462a:	4b2c      	ldr	r3, [pc, #176]	@ (80046dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800462c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004630:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004634:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004636:	697b      	ldr	r3, [r7, #20]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d01f      	beq.n	800467c <HAL_RCCEx_PeriphCLKConfig+0x200>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004642:	697a      	ldr	r2, [r7, #20]
 8004644:	429a      	cmp	r2, r3
 8004646:	d019      	beq.n	800467c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004648:	4b24      	ldr	r3, [pc, #144]	@ (80046dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800464a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800464e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004652:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004654:	4b21      	ldr	r3, [pc, #132]	@ (80046dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004656:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800465a:	4a20      	ldr	r2, [pc, #128]	@ (80046dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800465c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004660:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004664:	4b1d      	ldr	r3, [pc, #116]	@ (80046dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004666:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800466a:	4a1c      	ldr	r2, [pc, #112]	@ (80046dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800466c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004670:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004674:	4a19      	ldr	r2, [pc, #100]	@ (80046dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
>>>>>>> Stashed changes
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
<<<<<<< Updated upstream
 8003d54:	697b      	ldr	r3, [r7, #20]
 8003d56:	f003 0301 	and.w	r3, r3, #1
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d016      	beq.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d5e:	f7fe fd45 	bl	80027ec <HAL_GetTick>
 8003d62:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d64:	e00b      	b.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d66:	f7fe fd41 	bl	80027ec <HAL_GetTick>
 8003d6a:	4602      	mov	r2, r0
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	1ad3      	subs	r3, r2, r3
 8003d70:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d902      	bls.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003d78:	2303      	movs	r3, #3
 8003d7a:	74fb      	strb	r3, [r7, #19]
            break;
 8003d7c:	e006      	b.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d7e:	4b0d      	ldr	r3, [pc, #52]	@ (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d84:	f003 0302 	and.w	r3, r3, #2
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d0ec      	beq.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x212>
=======
 800467c:	697b      	ldr	r3, [r7, #20]
 800467e:	f003 0301 	and.w	r3, r3, #1
 8004682:	2b00      	cmp	r3, #0
 8004684:	d016      	beq.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004686:	f7fe f8df 	bl	8002848 <HAL_GetTick>
 800468a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800468c:	e00b      	b.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800468e:	f7fe f8db 	bl	8002848 <HAL_GetTick>
 8004692:	4602      	mov	r2, r0
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	1ad3      	subs	r3, r2, r3
 8004698:	f241 3288 	movw	r2, #5000	@ 0x1388
 800469c:	4293      	cmp	r3, r2
 800469e:	d902      	bls.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80046a0:	2303      	movs	r3, #3
 80046a2:	74fb      	strb	r3, [r7, #19]
            break;
 80046a4:	e006      	b.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80046a6:	4b0d      	ldr	r3, [pc, #52]	@ (80046dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046ac:	f003 0302 	and.w	r3, r3, #2
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d0ec      	beq.n	800468e <HAL_RCCEx_PeriphCLKConfig+0x212>
>>>>>>> Stashed changes
          }
        }
      }

      if(ret == HAL_OK)
<<<<<<< Updated upstream
 8003d8c:	7cfb      	ldrb	r3, [r7, #19]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d10c      	bne.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d92:	4b08      	ldr	r3, [pc, #32]	@ (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d98:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003da2:	4904      	ldr	r1, [pc, #16]	@ (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003da4:	4313      	orrs	r3, r2
 8003da6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003daa:	e009      	b.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
=======
 80046b4:	7cfb      	ldrb	r3, [r7, #19]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d10c      	bne.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80046ba:	4b08      	ldr	r3, [pc, #32]	@ (80046dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046c0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80046ca:	4904      	ldr	r1, [pc, #16]	@ (80046dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046cc:	4313      	orrs	r3, r2
 80046ce:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80046d2:	e009      	b.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
>>>>>>> Stashed changes
      }
      else
      {
        /* set overall return value */
        status = ret;
<<<<<<< Updated upstream
 8003dac:	7cfb      	ldrb	r3, [r7, #19]
 8003dae:	74bb      	strb	r3, [r7, #18]
 8003db0:	e006      	b.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003db2:	bf00      	nop
 8003db4:	40021000 	.word	0x40021000
 8003db8:	40007000 	.word	0x40007000
=======
 80046d4:	7cfb      	ldrb	r3, [r7, #19]
 80046d6:	74bb      	strb	r3, [r7, #18]
 80046d8:	e006      	b.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80046da:	bf00      	nop
 80046dc:	40021000 	.word	0x40021000
 80046e0:	40007000 	.word	0x40007000
>>>>>>> Stashed changes
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
<<<<<<< Updated upstream
 8003dbc:	7cfb      	ldrb	r3, [r7, #19]
 8003dbe:	74bb      	strb	r3, [r7, #18]
=======
 80046e4:	7cfb      	ldrb	r3, [r7, #19]
 80046e6:	74bb      	strb	r3, [r7, #18]
>>>>>>> Stashed changes
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
<<<<<<< Updated upstream
 8003dc0:	7c7b      	ldrb	r3, [r7, #17]
 8003dc2:	2b01      	cmp	r3, #1
 8003dc4:	d105      	bne.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003dc6:	4b9e      	ldr	r3, [pc, #632]	@ (8004040 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dca:	4a9d      	ldr	r2, [pc, #628]	@ (8004040 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dcc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003dd0:	6593      	str	r3, [r2, #88]	@ 0x58
=======
 80046e8:	7c7b      	ldrb	r3, [r7, #17]
 80046ea:	2b01      	cmp	r3, #1
 80046ec:	d105      	bne.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046ee:	4b9e      	ldr	r3, [pc, #632]	@ (8004968 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046f2:	4a9d      	ldr	r2, [pc, #628]	@ (8004968 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046f4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80046f8:	6593      	str	r3, [r2, #88]	@ 0x58
>>>>>>> Stashed changes
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
<<<<<<< Updated upstream
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f003 0301 	and.w	r3, r3, #1
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d00a      	beq.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
=======
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f003 0301 	and.w	r3, r3, #1
 8004702:	2b00      	cmp	r3, #0
 8004704:	d00a      	beq.n	800471c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
<<<<<<< Updated upstream
 8003dde:	4b98      	ldr	r3, [pc, #608]	@ (8004040 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003de0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003de4:	f023 0203 	bic.w	r2, r3, #3
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dec:	4994      	ldr	r1, [pc, #592]	@ (8004040 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dee:	4313      	orrs	r3, r2
 8003df0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
=======
 8004706:	4b98      	ldr	r3, [pc, #608]	@ (8004968 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004708:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800470c:	f023 0203 	bic.w	r2, r3, #3
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004714:	4994      	ldr	r1, [pc, #592]	@ (8004968 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004716:	4313      	orrs	r3, r2
 8004718:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
>>>>>>> Stashed changes
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
<<<<<<< Updated upstream
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f003 0302 	and.w	r3, r3, #2
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d00a      	beq.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
=======
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f003 0302 	and.w	r3, r3, #2
 8004724:	2b00      	cmp	r3, #0
 8004726:	d00a      	beq.n	800473e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
<<<<<<< Updated upstream
 8003e00:	4b8f      	ldr	r3, [pc, #572]	@ (8004040 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e06:	f023 020c 	bic.w	r2, r3, #12
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e0e:	498c      	ldr	r1, [pc, #560]	@ (8004040 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e10:	4313      	orrs	r3, r2
 8003e12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
=======
 8004728:	4b8f      	ldr	r3, [pc, #572]	@ (8004968 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800472a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800472e:	f023 020c 	bic.w	r2, r3, #12
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004736:	498c      	ldr	r1, [pc, #560]	@ (8004968 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004738:	4313      	orrs	r3, r2
 800473a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
>>>>>>> Stashed changes
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
<<<<<<< Updated upstream
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f003 0304 	and.w	r3, r3, #4
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d00a      	beq.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
=======
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f003 0304 	and.w	r3, r3, #4
 8004746:	2b00      	cmp	r3, #0
 8004748:	d00a      	beq.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
<<<<<<< Updated upstream
 8003e22:	4b87      	ldr	r3, [pc, #540]	@ (8004040 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e28:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e30:	4983      	ldr	r1, [pc, #524]	@ (8004040 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e32:	4313      	orrs	r3, r2
 8003e34:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
=======
 800474a:	4b87      	ldr	r3, [pc, #540]	@ (8004968 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800474c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004750:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004758:	4983      	ldr	r1, [pc, #524]	@ (8004968 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800475a:	4313      	orrs	r3, r2
 800475c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
>>>>>>> Stashed changes
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
<<<<<<< Updated upstream
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f003 0308 	and.w	r3, r3, #8
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d00a      	beq.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0x306>
=======
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f003 0308 	and.w	r3, r3, #8
 8004768:	2b00      	cmp	r3, #0
 800476a:	d00a      	beq.n	8004782 <HAL_RCCEx_PeriphCLKConfig+0x306>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
<<<<<<< Updated upstream
 8003e44:	4b7e      	ldr	r3, [pc, #504]	@ (8004040 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e4a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e52:	497b      	ldr	r1, [pc, #492]	@ (8004040 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e54:	4313      	orrs	r3, r2
 8003e56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
=======
 800476c:	4b7e      	ldr	r3, [pc, #504]	@ (8004968 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800476e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004772:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800477a:	497b      	ldr	r1, [pc, #492]	@ (8004968 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800477c:	4313      	orrs	r3, r2
 800477e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
>>>>>>> Stashed changes
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
<<<<<<< Updated upstream
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f003 0310 	and.w	r3, r3, #16
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d00a      	beq.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x328>
=======
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f003 0310 	and.w	r3, r3, #16
 800478a:	2b00      	cmp	r3, #0
 800478c:	d00a      	beq.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0x328>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
<<<<<<< Updated upstream
 8003e66:	4b76      	ldr	r3, [pc, #472]	@ (8004040 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e6c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e74:	4972      	ldr	r1, [pc, #456]	@ (8004040 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e76:	4313      	orrs	r3, r2
 8003e78:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
=======
 800478e:	4b76      	ldr	r3, [pc, #472]	@ (8004968 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004790:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004794:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800479c:	4972      	ldr	r1, [pc, #456]	@ (8004968 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800479e:	4313      	orrs	r3, r2
 80047a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
>>>>>>> Stashed changes
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
<<<<<<< Updated upstream
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f003 0320 	and.w	r3, r3, #32
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d00a      	beq.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x34a>
=======
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f003 0320 	and.w	r3, r3, #32
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d00a      	beq.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
<<<<<<< Updated upstream
 8003e88:	4b6d      	ldr	r3, [pc, #436]	@ (8004040 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e8e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e96:	496a      	ldr	r1, [pc, #424]	@ (8004040 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
=======
 80047b0:	4b6d      	ldr	r3, [pc, #436]	@ (8004968 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047b6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80047be:	496a      	ldr	r1, [pc, #424]	@ (8004968 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047c0:	4313      	orrs	r3, r2
 80047c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
>>>>>>> Stashed changes
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
<<<<<<< Updated upstream
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d00a      	beq.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003eaa:	4b65      	ldr	r3, [pc, #404]	@ (8004040 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003eac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003eb0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003eb8:	4961      	ldr	r1, [pc, #388]	@ (8004040 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
=======
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d00a      	beq.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80047d2:	4b65      	ldr	r3, [pc, #404]	@ (8004968 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047d8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047e0:	4961      	ldr	r1, [pc, #388]	@ (8004968 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047e2:	4313      	orrs	r3, r2
 80047e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
>>>>>>> Stashed changes
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
<<<<<<< Updated upstream
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d00a      	beq.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003ecc:	4b5c      	ldr	r3, [pc, #368]	@ (8004040 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ece:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ed2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003eda:	4959      	ldr	r1, [pc, #356]	@ (8004040 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003edc:	4313      	orrs	r3, r2
 8003ede:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
=======
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d00a      	beq.n	800480a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80047f4:	4b5c      	ldr	r3, [pc, #368]	@ (8004968 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047fa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004802:	4959      	ldr	r1, [pc, #356]	@ (8004968 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004804:	4313      	orrs	r3, r2
 8004806:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
>>>>>>> Stashed changes
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
<<<<<<< Updated upstream
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d00a      	beq.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
=======
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004812:	2b00      	cmp	r3, #0
 8004814:	d00a      	beq.n	800482c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
<<<<<<< Updated upstream
 8003eee:	4b54      	ldr	r3, [pc, #336]	@ (8004040 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ef0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ef4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003efc:	4950      	ldr	r1, [pc, #320]	@ (8004040 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003efe:	4313      	orrs	r3, r2
 8003f00:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
=======
 8004816:	4b54      	ldr	r3, [pc, #336]	@ (8004968 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004818:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800481c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004824:	4950      	ldr	r1, [pc, #320]	@ (8004968 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004826:	4313      	orrs	r3, r2
 8004828:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
>>>>>>> Stashed changes
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
<<<<<<< Updated upstream
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d00a      	beq.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
=======
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004834:	2b00      	cmp	r3, #0
 8004836:	d00a      	beq.n	800484e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
<<<<<<< Updated upstream
 8003f10:	4b4b      	ldr	r3, [pc, #300]	@ (8004040 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f16:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f1e:	4948      	ldr	r1, [pc, #288]	@ (8004040 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f20:	4313      	orrs	r3, r2
 8003f22:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
=======
 8004838:	4b4b      	ldr	r3, [pc, #300]	@ (8004968 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800483a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800483e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004846:	4948      	ldr	r1, [pc, #288]	@ (8004968 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004848:	4313      	orrs	r3, r2
 800484a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
>>>>>>> Stashed changes
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
<<<<<<< Updated upstream
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d00a      	beq.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
=======
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004856:	2b00      	cmp	r3, #0
 8004858:	d00a      	beq.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
<<<<<<< Updated upstream
 8003f32:	4b43      	ldr	r3, [pc, #268]	@ (8004040 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f38:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f40:	493f      	ldr	r1, [pc, #252]	@ (8004040 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f42:	4313      	orrs	r3, r2
 8003f44:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
=======
 800485a:	4b43      	ldr	r3, [pc, #268]	@ (8004968 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800485c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004860:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004868:	493f      	ldr	r1, [pc, #252]	@ (8004968 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800486a:	4313      	orrs	r3, r2
 800486c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
>>>>>>> Stashed changes
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
<<<<<<< Updated upstream
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d028      	beq.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003f54:	4b3a      	ldr	r3, [pc, #232]	@ (8004040 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f5a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003f62:	4937      	ldr	r1, [pc, #220]	@ (8004040 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f64:	4313      	orrs	r3, r2
 8003f66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003f6e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003f72:	d106      	bne.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f74:	4b32      	ldr	r3, [pc, #200]	@ (8004040 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f76:	68db      	ldr	r3, [r3, #12]
 8003f78:	4a31      	ldr	r2, [pc, #196]	@ (8004040 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f7a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003f7e:	60d3      	str	r3, [r2, #12]
 8003f80:	e011      	b.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0x452>
=======
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004878:	2b00      	cmp	r3, #0
 800487a:	d028      	beq.n	80048ce <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800487c:	4b3a      	ldr	r3, [pc, #232]	@ (8004968 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800487e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004882:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800488a:	4937      	ldr	r1, [pc, #220]	@ (8004968 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800488c:	4313      	orrs	r3, r2
 800488e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004896:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800489a:	d106      	bne.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800489c:	4b32      	ldr	r3, [pc, #200]	@ (8004968 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800489e:	68db      	ldr	r3, [r3, #12]
 80048a0:	4a31      	ldr	r2, [pc, #196]	@ (8004968 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048a2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80048a6:	60d3      	str	r3, [r2, #12]
 80048a8:	e011      	b.n	80048ce <HAL_RCCEx_PeriphCLKConfig+0x452>
>>>>>>> Stashed changes
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
<<<<<<< Updated upstream
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003f86:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003f8a:	d10c      	bne.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	3304      	adds	r3, #4
 8003f90:	2101      	movs	r1, #1
 8003f92:	4618      	mov	r0, r3
 8003f94:	f000 f8c8 	bl	8004128 <RCCEx_PLLSAI1_Config>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003f9c:	7cfb      	ldrb	r3, [r7, #19]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d001      	beq.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003fa2:	7cfb      	ldrb	r3, [r7, #19]
 8003fa4:	74bb      	strb	r3, [r7, #18]
=======
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80048ae:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80048b2:	d10c      	bne.n	80048ce <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	3304      	adds	r3, #4
 80048b8:	2101      	movs	r1, #1
 80048ba:	4618      	mov	r0, r3
 80048bc:	f000 f8c8 	bl	8004a50 <RCCEx_PLLSAI1_Config>
 80048c0:	4603      	mov	r3, r0
 80048c2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80048c4:	7cfb      	ldrb	r3, [r7, #19]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d001      	beq.n	80048ce <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80048ca:	7cfb      	ldrb	r3, [r7, #19]
 80048cc:	74bb      	strb	r3, [r7, #18]
>>>>>>> Stashed changes
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
<<<<<<< Updated upstream
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d028      	beq.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003fb2:	4b23      	ldr	r3, [pc, #140]	@ (8004040 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fb8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fc0:	491f      	ldr	r1, [pc, #124]	@ (8004040 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fcc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003fd0:	d106      	bne.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003fd2:	4b1b      	ldr	r3, [pc, #108]	@ (8004040 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fd4:	68db      	ldr	r3, [r3, #12]
 8003fd6:	4a1a      	ldr	r2, [pc, #104]	@ (8004040 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fd8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003fdc:	60d3      	str	r3, [r2, #12]
 8003fde:	e011      	b.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
=======
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d028      	beq.n	800492c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80048da:	4b23      	ldr	r3, [pc, #140]	@ (8004968 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048e0:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048e8:	491f      	ldr	r1, [pc, #124]	@ (8004968 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048ea:	4313      	orrs	r3, r2
 80048ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048f4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80048f8:	d106      	bne.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80048fa:	4b1b      	ldr	r3, [pc, #108]	@ (8004968 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048fc:	68db      	ldr	r3, [r3, #12]
 80048fe:	4a1a      	ldr	r2, [pc, #104]	@ (8004968 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004900:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004904:	60d3      	str	r3, [r2, #12]
 8004906:	e011      	b.n	800492c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
>>>>>>> Stashed changes
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
<<<<<<< Updated upstream
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fe4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003fe8:	d10c      	bne.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	3304      	adds	r3, #4
 8003fee:	2101      	movs	r1, #1
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	f000 f899 	bl	8004128 <RCCEx_PLLSAI1_Config>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003ffa:	7cfb      	ldrb	r3, [r7, #19]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d001      	beq.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004000:	7cfb      	ldrb	r3, [r7, #19]
 8004002:	74bb      	strb	r3, [r7, #18]
=======
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800490c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004910:	d10c      	bne.n	800492c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	3304      	adds	r3, #4
 8004916:	2101      	movs	r1, #1
 8004918:	4618      	mov	r0, r3
 800491a:	f000 f899 	bl	8004a50 <RCCEx_PLLSAI1_Config>
 800491e:	4603      	mov	r3, r0
 8004920:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004922:	7cfb      	ldrb	r3, [r7, #19]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d001      	beq.n	800492c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004928:	7cfb      	ldrb	r3, [r7, #19]
 800492a:	74bb      	strb	r3, [r7, #18]
>>>>>>> Stashed changes
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
<<<<<<< Updated upstream
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800400c:	2b00      	cmp	r3, #0
 800400e:	d02b      	beq.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004010:	4b0b      	ldr	r3, [pc, #44]	@ (8004040 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004012:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004016:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800401e:	4908      	ldr	r1, [pc, #32]	@ (8004040 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004020:	4313      	orrs	r3, r2
 8004022:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800402a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800402e:	d109      	bne.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004030:	4b03      	ldr	r3, [pc, #12]	@ (8004040 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004032:	68db      	ldr	r3, [r3, #12]
 8004034:	4a02      	ldr	r2, [pc, #8]	@ (8004040 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004036:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800403a:	60d3      	str	r3, [r2, #12]
 800403c:	e014      	b.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800403e:	bf00      	nop
 8004040:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004048:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800404c:	d10c      	bne.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	3304      	adds	r3, #4
 8004052:	2101      	movs	r1, #1
 8004054:	4618      	mov	r0, r3
 8004056:	f000 f867 	bl	8004128 <RCCEx_PLLSAI1_Config>
 800405a:	4603      	mov	r3, r0
 800405c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800405e:	7cfb      	ldrb	r3, [r7, #19]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d001      	beq.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004064:	7cfb      	ldrb	r3, [r7, #19]
 8004066:	74bb      	strb	r3, [r7, #18]
=======
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004934:	2b00      	cmp	r3, #0
 8004936:	d02b      	beq.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004938:	4b0b      	ldr	r3, [pc, #44]	@ (8004968 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800493a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800493e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004946:	4908      	ldr	r1, [pc, #32]	@ (8004968 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004948:	4313      	orrs	r3, r2
 800494a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004952:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004956:	d109      	bne.n	800496c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004958:	4b03      	ldr	r3, [pc, #12]	@ (8004968 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800495a:	68db      	ldr	r3, [r3, #12]
 800495c:	4a02      	ldr	r2, [pc, #8]	@ (8004968 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800495e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004962:	60d3      	str	r3, [r2, #12]
 8004964:	e014      	b.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004966:	bf00      	nop
 8004968:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004970:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004974:	d10c      	bne.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	3304      	adds	r3, #4
 800497a:	2101      	movs	r1, #1
 800497c:	4618      	mov	r0, r3
 800497e:	f000 f867 	bl	8004a50 <RCCEx_PLLSAI1_Config>
 8004982:	4603      	mov	r3, r0
 8004984:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004986:	7cfb      	ldrb	r3, [r7, #19]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d001      	beq.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800498c:	7cfb      	ldrb	r3, [r7, #19]
 800498e:	74bb      	strb	r3, [r7, #18]
>>>>>>> Stashed changes
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
<<<<<<< Updated upstream
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004070:	2b00      	cmp	r3, #0
 8004072:	d02f      	beq.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0x580>
=======
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004998:	2b00      	cmp	r3, #0
 800499a:	d02f      	beq.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0x580>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
<<<<<<< Updated upstream
 8004074:	4b2b      	ldr	r3, [pc, #172]	@ (8004124 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004076:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800407a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004082:	4928      	ldr	r1, [pc, #160]	@ (8004124 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004084:	4313      	orrs	r3, r2
 8004086:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800408e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004092:	d10d      	bne.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	3304      	adds	r3, #4
 8004098:	2102      	movs	r1, #2
 800409a:	4618      	mov	r0, r3
 800409c:	f000 f844 	bl	8004128 <RCCEx_PLLSAI1_Config>
 80040a0:	4603      	mov	r3, r0
 80040a2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80040a4:	7cfb      	ldrb	r3, [r7, #19]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d014      	beq.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80040aa:	7cfb      	ldrb	r3, [r7, #19]
 80040ac:	74bb      	strb	r3, [r7, #18]
 80040ae:	e011      	b.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0x580>
=======
 800499c:	4b2b      	ldr	r3, [pc, #172]	@ (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800499e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049a2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80049aa:	4928      	ldr	r1, [pc, #160]	@ (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80049ac:	4313      	orrs	r3, r2
 80049ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80049b6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80049ba:	d10d      	bne.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	3304      	adds	r3, #4
 80049c0:	2102      	movs	r1, #2
 80049c2:	4618      	mov	r0, r3
 80049c4:	f000 f844 	bl	8004a50 <RCCEx_PLLSAI1_Config>
 80049c8:	4603      	mov	r3, r0
 80049ca:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80049cc:	7cfb      	ldrb	r3, [r7, #19]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d014      	beq.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80049d2:	7cfb      	ldrb	r3, [r7, #19]
 80049d4:	74bb      	strb	r3, [r7, #18]
 80049d6:	e011      	b.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0x580>
>>>>>>> Stashed changes
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
<<<<<<< Updated upstream
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80040b4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80040b8:	d10c      	bne.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	3320      	adds	r3, #32
 80040be:	2102      	movs	r1, #2
 80040c0:	4618      	mov	r0, r3
 80040c2:	f000 f925 	bl	8004310 <RCCEx_PLLSAI2_Config>
 80040c6:	4603      	mov	r3, r0
 80040c8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80040ca:	7cfb      	ldrb	r3, [r7, #19]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d001      	beq.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80040d0:	7cfb      	ldrb	r3, [r7, #19]
 80040d2:	74bb      	strb	r3, [r7, #18]
=======
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80049dc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80049e0:	d10c      	bne.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	3320      	adds	r3, #32
 80049e6:	2102      	movs	r1, #2
 80049e8:	4618      	mov	r0, r3
 80049ea:	f000 f925 	bl	8004c38 <RCCEx_PLLSAI2_Config>
 80049ee:	4603      	mov	r3, r0
 80049f0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80049f2:	7cfb      	ldrb	r3, [r7, #19]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d001      	beq.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80049f8:	7cfb      	ldrb	r3, [r7, #19]
 80049fa:	74bb      	strb	r3, [r7, #18]
>>>>>>> Stashed changes
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
<<<<<<< Updated upstream
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d00a      	beq.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
=======
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d00a      	beq.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
<<<<<<< Updated upstream
 80040e0:	4b10      	ldr	r3, [pc, #64]	@ (8004124 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80040e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040e6:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80040ee:	490d      	ldr	r1, [pc, #52]	@ (8004124 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80040f0:	4313      	orrs	r3, r2
 80040f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
=======
 8004a08:	4b10      	ldr	r3, [pc, #64]	@ (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004a0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a0e:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004a16:	490d      	ldr	r1, [pc, #52]	@ (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
>>>>>>> Stashed changes
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
<<<<<<< Updated upstream
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d00b      	beq.n	800411a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
=======
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d00b      	beq.n	8004a42 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
<<<<<<< Updated upstream
 8004102:	4b08      	ldr	r3, [pc, #32]	@ (8004124 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004104:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004108:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004112:	4904      	ldr	r1, [pc, #16]	@ (8004124 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004114:	4313      	orrs	r3, r2
 8004116:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
=======
 8004a2a:	4b08      	ldr	r3, [pc, #32]	@ (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004a2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a30:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004a3a:	4904      	ldr	r1, [pc, #16]	@ (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
>>>>>>> Stashed changes
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
<<<<<<< Updated upstream
 800411a:	7cbb      	ldrb	r3, [r7, #18]
}
 800411c:	4618      	mov	r0, r3
 800411e:	3718      	adds	r7, #24
 8004120:	46bd      	mov	sp, r7
 8004122:	bd80      	pop	{r7, pc}
 8004124:	40021000 	.word	0x40021000

08004128 <RCCEx_PLLSAI1_Config>:
=======
 8004a42:	7cbb      	ldrb	r3, [r7, #18]
}
 8004a44:	4618      	mov	r0, r3
 8004a46:	3718      	adds	r7, #24
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	bd80      	pop	{r7, pc}
 8004a4c:	40021000 	.word	0x40021000

08004a50 <RCCEx_PLLSAI1_Config>:
>>>>>>> Stashed changes
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
<<<<<<< Updated upstream
 8004128:	b580      	push	{r7, lr}
 800412a:	b084      	sub	sp, #16
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
 8004130:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004132:	2300      	movs	r3, #0
 8004134:	73fb      	strb	r3, [r7, #15]
=======
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b084      	sub	sp, #16
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
 8004a58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	73fb      	strb	r3, [r7, #15]
>>>>>>> Stashed changes
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
<<<<<<< Updated upstream
 8004136:	4b75      	ldr	r3, [pc, #468]	@ (800430c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004138:	68db      	ldr	r3, [r3, #12]
 800413a:	f003 0303 	and.w	r3, r3, #3
 800413e:	2b00      	cmp	r3, #0
 8004140:	d018      	beq.n	8004174 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004142:	4b72      	ldr	r3, [pc, #456]	@ (800430c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004144:	68db      	ldr	r3, [r3, #12]
 8004146:	f003 0203 	and.w	r2, r3, #3
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	429a      	cmp	r2, r3
 8004150:	d10d      	bne.n	800416e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
       ||
 8004156:	2b00      	cmp	r3, #0
 8004158:	d009      	beq.n	800416e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800415a:	4b6c      	ldr	r3, [pc, #432]	@ (800430c <RCCEx_PLLSAI1_Config+0x1e4>)
 800415c:	68db      	ldr	r3, [r3, #12]
 800415e:	091b      	lsrs	r3, r3, #4
 8004160:	f003 0307 	and.w	r3, r3, #7
 8004164:	1c5a      	adds	r2, r3, #1
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	685b      	ldr	r3, [r3, #4]
       ||
 800416a:	429a      	cmp	r2, r3
 800416c:	d047      	beq.n	80041fe <RCCEx_PLLSAI1_Config+0xd6>
=======
 8004a5e:	4b75      	ldr	r3, [pc, #468]	@ (8004c34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a60:	68db      	ldr	r3, [r3, #12]
 8004a62:	f003 0303 	and.w	r3, r3, #3
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d018      	beq.n	8004a9c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004a6a:	4b72      	ldr	r3, [pc, #456]	@ (8004c34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a6c:	68db      	ldr	r3, [r3, #12]
 8004a6e:	f003 0203 	and.w	r2, r3, #3
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	429a      	cmp	r2, r3
 8004a78:	d10d      	bne.n	8004a96 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
       ||
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d009      	beq.n	8004a96 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004a82:	4b6c      	ldr	r3, [pc, #432]	@ (8004c34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a84:	68db      	ldr	r3, [r3, #12]
 8004a86:	091b      	lsrs	r3, r3, #4
 8004a88:	f003 0307 	and.w	r3, r3, #7
 8004a8c:	1c5a      	adds	r2, r3, #1
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	685b      	ldr	r3, [r3, #4]
       ||
 8004a92:	429a      	cmp	r2, r3
 8004a94:	d047      	beq.n	8004b26 <RCCEx_PLLSAI1_Config+0xd6>
>>>>>>> Stashed changes
#endif
      )
    {
      status = HAL_ERROR;
<<<<<<< Updated upstream
 800416e:	2301      	movs	r3, #1
 8004170:	73fb      	strb	r3, [r7, #15]
 8004172:	e044      	b.n	80041fe <RCCEx_PLLSAI1_Config+0xd6>
=======
 8004a96:	2301      	movs	r3, #1
 8004a98:	73fb      	strb	r3, [r7, #15]
 8004a9a:	e044      	b.n	8004b26 <RCCEx_PLLSAI1_Config+0xd6>
>>>>>>> Stashed changes
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
<<<<<<< Updated upstream
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	2b03      	cmp	r3, #3
 800417a:	d018      	beq.n	80041ae <RCCEx_PLLSAI1_Config+0x86>
 800417c:	2b03      	cmp	r3, #3
 800417e:	d825      	bhi.n	80041cc <RCCEx_PLLSAI1_Config+0xa4>
 8004180:	2b01      	cmp	r3, #1
 8004182:	d002      	beq.n	800418a <RCCEx_PLLSAI1_Config+0x62>
 8004184:	2b02      	cmp	r3, #2
 8004186:	d009      	beq.n	800419c <RCCEx_PLLSAI1_Config+0x74>
 8004188:	e020      	b.n	80041cc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800418a:	4b60      	ldr	r3, [pc, #384]	@ (800430c <RCCEx_PLLSAI1_Config+0x1e4>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f003 0302 	and.w	r3, r3, #2
 8004192:	2b00      	cmp	r3, #0
 8004194:	d11d      	bne.n	80041d2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004196:	2301      	movs	r3, #1
 8004198:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800419a:	e01a      	b.n	80041d2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800419c:	4b5b      	ldr	r3, [pc, #364]	@ (800430c <RCCEx_PLLSAI1_Config+0x1e4>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d116      	bne.n	80041d6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80041a8:	2301      	movs	r3, #1
 80041aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041ac:	e013      	b.n	80041d6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80041ae:	4b57      	ldr	r3, [pc, #348]	@ (800430c <RCCEx_PLLSAI1_Config+0x1e4>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d10f      	bne.n	80041da <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80041ba:	4b54      	ldr	r3, [pc, #336]	@ (800430c <RCCEx_PLLSAI1_Config+0x1e4>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d109      	bne.n	80041da <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80041c6:	2301      	movs	r3, #1
 80041c8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80041ca:	e006      	b.n	80041da <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80041cc:	2301      	movs	r3, #1
 80041ce:	73fb      	strb	r3, [r7, #15]
      break;
 80041d0:	e004      	b.n	80041dc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80041d2:	bf00      	nop
 80041d4:	e002      	b.n	80041dc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80041d6:	bf00      	nop
 80041d8:	e000      	b.n	80041dc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80041da:	bf00      	nop
    }

    if(status == HAL_OK)
 80041dc:	7bfb      	ldrb	r3, [r7, #15]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d10d      	bne.n	80041fe <RCCEx_PLLSAI1_Config+0xd6>
=======
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	2b03      	cmp	r3, #3
 8004aa2:	d018      	beq.n	8004ad6 <RCCEx_PLLSAI1_Config+0x86>
 8004aa4:	2b03      	cmp	r3, #3
 8004aa6:	d825      	bhi.n	8004af4 <RCCEx_PLLSAI1_Config+0xa4>
 8004aa8:	2b01      	cmp	r3, #1
 8004aaa:	d002      	beq.n	8004ab2 <RCCEx_PLLSAI1_Config+0x62>
 8004aac:	2b02      	cmp	r3, #2
 8004aae:	d009      	beq.n	8004ac4 <RCCEx_PLLSAI1_Config+0x74>
 8004ab0:	e020      	b.n	8004af4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004ab2:	4b60      	ldr	r3, [pc, #384]	@ (8004c34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f003 0302 	and.w	r3, r3, #2
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d11d      	bne.n	8004afa <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004abe:	2301      	movs	r3, #1
 8004ac0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ac2:	e01a      	b.n	8004afa <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004ac4:	4b5b      	ldr	r3, [pc, #364]	@ (8004c34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d116      	bne.n	8004afe <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ad4:	e013      	b.n	8004afe <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004ad6:	4b57      	ldr	r3, [pc, #348]	@ (8004c34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d10f      	bne.n	8004b02 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004ae2:	4b54      	ldr	r3, [pc, #336]	@ (8004c34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d109      	bne.n	8004b02 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004aee:	2301      	movs	r3, #1
 8004af0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004af2:	e006      	b.n	8004b02 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004af4:	2301      	movs	r3, #1
 8004af6:	73fb      	strb	r3, [r7, #15]
      break;
 8004af8:	e004      	b.n	8004b04 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004afa:	bf00      	nop
 8004afc:	e002      	b.n	8004b04 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004afe:	bf00      	nop
 8004b00:	e000      	b.n	8004b04 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004b02:	bf00      	nop
    }

    if(status == HAL_OK)
 8004b04:	7bfb      	ldrb	r3, [r7, #15]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d10d      	bne.n	8004b26 <RCCEx_PLLSAI1_Config+0xd6>
>>>>>>> Stashed changes
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
<<<<<<< Updated upstream
 80041e2:	4b4a      	ldr	r3, [pc, #296]	@ (800430c <RCCEx_PLLSAI1_Config+0x1e4>)
 80041e4:	68db      	ldr	r3, [r3, #12]
 80041e6:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6819      	ldr	r1, [r3, #0]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	3b01      	subs	r3, #1
 80041f4:	011b      	lsls	r3, r3, #4
 80041f6:	430b      	orrs	r3, r1
 80041f8:	4944      	ldr	r1, [pc, #272]	@ (800430c <RCCEx_PLLSAI1_Config+0x1e4>)
 80041fa:	4313      	orrs	r3, r2
 80041fc:	60cb      	str	r3, [r1, #12]
=======
 8004b0a:	4b4a      	ldr	r3, [pc, #296]	@ (8004c34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b0c:	68db      	ldr	r3, [r3, #12]
 8004b0e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6819      	ldr	r1, [r3, #0]
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	3b01      	subs	r3, #1
 8004b1c:	011b      	lsls	r3, r3, #4
 8004b1e:	430b      	orrs	r3, r1
 8004b20:	4944      	ldr	r1, [pc, #272]	@ (8004c34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b22:	4313      	orrs	r3, r2
 8004b24:	60cb      	str	r3, [r1, #12]
>>>>>>> Stashed changes
#endif
    }
  }

  if(status == HAL_OK)
<<<<<<< Updated upstream
 80041fe:	7bfb      	ldrb	r3, [r7, #15]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d17d      	bne.n	8004300 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004204:	4b41      	ldr	r3, [pc, #260]	@ (800430c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a40      	ldr	r2, [pc, #256]	@ (800430c <RCCEx_PLLSAI1_Config+0x1e4>)
 800420a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800420e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004210:	f7fe faec 	bl	80027ec <HAL_GetTick>
 8004214:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004216:	e009      	b.n	800422c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004218:	f7fe fae8 	bl	80027ec <HAL_GetTick>
 800421c:	4602      	mov	r2, r0
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	1ad3      	subs	r3, r2, r3
 8004222:	2b02      	cmp	r3, #2
 8004224:	d902      	bls.n	800422c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004226:	2303      	movs	r3, #3
 8004228:	73fb      	strb	r3, [r7, #15]
        break;
 800422a:	e005      	b.n	8004238 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800422c:	4b37      	ldr	r3, [pc, #220]	@ (800430c <RCCEx_PLLSAI1_Config+0x1e4>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004234:	2b00      	cmp	r3, #0
 8004236:	d1ef      	bne.n	8004218 <RCCEx_PLLSAI1_Config+0xf0>
=======
 8004b26:	7bfb      	ldrb	r3, [r7, #15]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d17d      	bne.n	8004c28 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004b2c:	4b41      	ldr	r3, [pc, #260]	@ (8004c34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4a40      	ldr	r2, [pc, #256]	@ (8004c34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b32:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004b36:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b38:	f7fd fe86 	bl	8002848 <HAL_GetTick>
 8004b3c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004b3e:	e009      	b.n	8004b54 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004b40:	f7fd fe82 	bl	8002848 <HAL_GetTick>
 8004b44:	4602      	mov	r2, r0
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	1ad3      	subs	r3, r2, r3
 8004b4a:	2b02      	cmp	r3, #2
 8004b4c:	d902      	bls.n	8004b54 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004b4e:	2303      	movs	r3, #3
 8004b50:	73fb      	strb	r3, [r7, #15]
        break;
 8004b52:	e005      	b.n	8004b60 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004b54:	4b37      	ldr	r3, [pc, #220]	@ (8004c34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d1ef      	bne.n	8004b40 <RCCEx_PLLSAI1_Config+0xf0>
>>>>>>> Stashed changes
      }
    }

    if(status == HAL_OK)
<<<<<<< Updated upstream
 8004238:	7bfb      	ldrb	r3, [r7, #15]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d160      	bne.n	8004300 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d111      	bne.n	8004268 <RCCEx_PLLSAI1_Config+0x140>
=======
 8004b60:	7bfb      	ldrb	r3, [r7, #15]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d160      	bne.n	8004c28 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d111      	bne.n	8004b90 <RCCEx_PLLSAI1_Config+0x140>
>>>>>>> Stashed changes
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
<<<<<<< Updated upstream
 8004244:	4b31      	ldr	r3, [pc, #196]	@ (800430c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004246:	691b      	ldr	r3, [r3, #16]
 8004248:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 800424c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004250:	687a      	ldr	r2, [r7, #4]
 8004252:	6892      	ldr	r2, [r2, #8]
 8004254:	0211      	lsls	r1, r2, #8
 8004256:	687a      	ldr	r2, [r7, #4]
 8004258:	68d2      	ldr	r2, [r2, #12]
 800425a:	0912      	lsrs	r2, r2, #4
 800425c:	0452      	lsls	r2, r2, #17
 800425e:	430a      	orrs	r2, r1
 8004260:	492a      	ldr	r1, [pc, #168]	@ (800430c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004262:	4313      	orrs	r3, r2
 8004264:	610b      	str	r3, [r1, #16]
 8004266:	e027      	b.n	80042b8 <RCCEx_PLLSAI1_Config+0x190>
=======
 8004b6c:	4b31      	ldr	r3, [pc, #196]	@ (8004c34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b6e:	691b      	ldr	r3, [r3, #16]
 8004b70:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004b74:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b78:	687a      	ldr	r2, [r7, #4]
 8004b7a:	6892      	ldr	r2, [r2, #8]
 8004b7c:	0211      	lsls	r1, r2, #8
 8004b7e:	687a      	ldr	r2, [r7, #4]
 8004b80:	68d2      	ldr	r2, [r2, #12]
 8004b82:	0912      	lsrs	r2, r2, #4
 8004b84:	0452      	lsls	r2, r2, #17
 8004b86:	430a      	orrs	r2, r1
 8004b88:	492a      	ldr	r1, [pc, #168]	@ (8004c34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	610b      	str	r3, [r1, #16]
 8004b8e:	e027      	b.n	8004be0 <RCCEx_PLLSAI1_Config+0x190>
>>>>>>> Stashed changes
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
<<<<<<< Updated upstream
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	2b01      	cmp	r3, #1
 800426c:	d112      	bne.n	8004294 <RCCEx_PLLSAI1_Config+0x16c>
=======
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	2b01      	cmp	r3, #1
 8004b94:	d112      	bne.n	8004bbc <RCCEx_PLLSAI1_Config+0x16c>
>>>>>>> Stashed changes
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
<<<<<<< Updated upstream
 800426e:	4b27      	ldr	r3, [pc, #156]	@ (800430c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004270:	691b      	ldr	r3, [r3, #16]
 8004272:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8004276:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800427a:	687a      	ldr	r2, [r7, #4]
 800427c:	6892      	ldr	r2, [r2, #8]
 800427e:	0211      	lsls	r1, r2, #8
 8004280:	687a      	ldr	r2, [r7, #4]
 8004282:	6912      	ldr	r2, [r2, #16]
 8004284:	0852      	lsrs	r2, r2, #1
 8004286:	3a01      	subs	r2, #1
 8004288:	0552      	lsls	r2, r2, #21
 800428a:	430a      	orrs	r2, r1
 800428c:	491f      	ldr	r1, [pc, #124]	@ (800430c <RCCEx_PLLSAI1_Config+0x1e4>)
 800428e:	4313      	orrs	r3, r2
 8004290:	610b      	str	r3, [r1, #16]
 8004292:	e011      	b.n	80042b8 <RCCEx_PLLSAI1_Config+0x190>
=======
 8004b96:	4b27      	ldr	r3, [pc, #156]	@ (8004c34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b98:	691b      	ldr	r3, [r3, #16]
 8004b9a:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8004b9e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004ba2:	687a      	ldr	r2, [r7, #4]
 8004ba4:	6892      	ldr	r2, [r2, #8]
 8004ba6:	0211      	lsls	r1, r2, #8
 8004ba8:	687a      	ldr	r2, [r7, #4]
 8004baa:	6912      	ldr	r2, [r2, #16]
 8004bac:	0852      	lsrs	r2, r2, #1
 8004bae:	3a01      	subs	r2, #1
 8004bb0:	0552      	lsls	r2, r2, #21
 8004bb2:	430a      	orrs	r2, r1
 8004bb4:	491f      	ldr	r1, [pc, #124]	@ (8004c34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	610b      	str	r3, [r1, #16]
 8004bba:	e011      	b.n	8004be0 <RCCEx_PLLSAI1_Config+0x190>
>>>>>>> Stashed changes
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
<<<<<<< Updated upstream
 8004294:	4b1d      	ldr	r3, [pc, #116]	@ (800430c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004296:	691b      	ldr	r3, [r3, #16]
 8004298:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800429c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80042a0:	687a      	ldr	r2, [r7, #4]
 80042a2:	6892      	ldr	r2, [r2, #8]
 80042a4:	0211      	lsls	r1, r2, #8
 80042a6:	687a      	ldr	r2, [r7, #4]
 80042a8:	6952      	ldr	r2, [r2, #20]
 80042aa:	0852      	lsrs	r2, r2, #1
 80042ac:	3a01      	subs	r2, #1
 80042ae:	0652      	lsls	r2, r2, #25
 80042b0:	430a      	orrs	r2, r1
 80042b2:	4916      	ldr	r1, [pc, #88]	@ (800430c <RCCEx_PLLSAI1_Config+0x1e4>)
 80042b4:	4313      	orrs	r3, r2
 80042b6:	610b      	str	r3, [r1, #16]
=======
 8004bbc:	4b1d      	ldr	r3, [pc, #116]	@ (8004c34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bbe:	691b      	ldr	r3, [r3, #16]
 8004bc0:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004bc4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004bc8:	687a      	ldr	r2, [r7, #4]
 8004bca:	6892      	ldr	r2, [r2, #8]
 8004bcc:	0211      	lsls	r1, r2, #8
 8004bce:	687a      	ldr	r2, [r7, #4]
 8004bd0:	6952      	ldr	r2, [r2, #20]
 8004bd2:	0852      	lsrs	r2, r2, #1
 8004bd4:	3a01      	subs	r2, #1
 8004bd6:	0652      	lsls	r2, r2, #25
 8004bd8:	430a      	orrs	r2, r1
 8004bda:	4916      	ldr	r1, [pc, #88]	@ (8004c34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bdc:	4313      	orrs	r3, r2
 8004bde:	610b      	str	r3, [r1, #16]
>>>>>>> Stashed changes
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
<<<<<<< Updated upstream
 80042b8:	4b14      	ldr	r3, [pc, #80]	@ (800430c <RCCEx_PLLSAI1_Config+0x1e4>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a13      	ldr	r2, [pc, #76]	@ (800430c <RCCEx_PLLSAI1_Config+0x1e4>)
 80042be:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80042c2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042c4:	f7fe fa92 	bl	80027ec <HAL_GetTick>
 80042c8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80042ca:	e009      	b.n	80042e0 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80042cc:	f7fe fa8e 	bl	80027ec <HAL_GetTick>
 80042d0:	4602      	mov	r2, r0
 80042d2:	68bb      	ldr	r3, [r7, #8]
 80042d4:	1ad3      	subs	r3, r2, r3
 80042d6:	2b02      	cmp	r3, #2
 80042d8:	d902      	bls.n	80042e0 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80042da:	2303      	movs	r3, #3
 80042dc:	73fb      	strb	r3, [r7, #15]
          break;
 80042de:	e005      	b.n	80042ec <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80042e0:	4b0a      	ldr	r3, [pc, #40]	@ (800430c <RCCEx_PLLSAI1_Config+0x1e4>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d0ef      	beq.n	80042cc <RCCEx_PLLSAI1_Config+0x1a4>
=======
 8004be0:	4b14      	ldr	r3, [pc, #80]	@ (8004c34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a13      	ldr	r2, [pc, #76]	@ (8004c34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004be6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004bea:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bec:	f7fd fe2c 	bl	8002848 <HAL_GetTick>
 8004bf0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004bf2:	e009      	b.n	8004c08 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004bf4:	f7fd fe28 	bl	8002848 <HAL_GetTick>
 8004bf8:	4602      	mov	r2, r0
 8004bfa:	68bb      	ldr	r3, [r7, #8]
 8004bfc:	1ad3      	subs	r3, r2, r3
 8004bfe:	2b02      	cmp	r3, #2
 8004c00:	d902      	bls.n	8004c08 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004c02:	2303      	movs	r3, #3
 8004c04:	73fb      	strb	r3, [r7, #15]
          break;
 8004c06:	e005      	b.n	8004c14 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004c08:	4b0a      	ldr	r3, [pc, #40]	@ (8004c34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d0ef      	beq.n	8004bf4 <RCCEx_PLLSAI1_Config+0x1a4>
>>>>>>> Stashed changes
        }
      }

      if(status == HAL_OK)
<<<<<<< Updated upstream
 80042ec:	7bfb      	ldrb	r3, [r7, #15]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d106      	bne.n	8004300 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80042f2:	4b06      	ldr	r3, [pc, #24]	@ (800430c <RCCEx_PLLSAI1_Config+0x1e4>)
 80042f4:	691a      	ldr	r2, [r3, #16]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	699b      	ldr	r3, [r3, #24]
 80042fa:	4904      	ldr	r1, [pc, #16]	@ (800430c <RCCEx_PLLSAI1_Config+0x1e4>)
 80042fc:	4313      	orrs	r3, r2
 80042fe:	610b      	str	r3, [r1, #16]
=======
 8004c14:	7bfb      	ldrb	r3, [r7, #15]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d106      	bne.n	8004c28 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004c1a:	4b06      	ldr	r3, [pc, #24]	@ (8004c34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c1c:	691a      	ldr	r2, [r3, #16]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	699b      	ldr	r3, [r3, #24]
 8004c22:	4904      	ldr	r1, [pc, #16]	@ (8004c34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c24:	4313      	orrs	r3, r2
 8004c26:	610b      	str	r3, [r1, #16]
>>>>>>> Stashed changes
      }
    }
  }

  return status;
<<<<<<< Updated upstream
 8004300:	7bfb      	ldrb	r3, [r7, #15]
}
 8004302:	4618      	mov	r0, r3
 8004304:	3710      	adds	r7, #16
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}
 800430a:	bf00      	nop
 800430c:	40021000 	.word	0x40021000

08004310 <RCCEx_PLLSAI2_Config>:
=======
 8004c28:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	3710      	adds	r7, #16
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bd80      	pop	{r7, pc}
 8004c32:	bf00      	nop
 8004c34:	40021000 	.word	0x40021000

08004c38 <RCCEx_PLLSAI2_Config>:
>>>>>>> Stashed changes
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
<<<<<<< Updated upstream
 8004310:	b580      	push	{r7, lr}
 8004312:	b084      	sub	sp, #16
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
 8004318:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800431a:	2300      	movs	r3, #0
 800431c:	73fb      	strb	r3, [r7, #15]
=======
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b084      	sub	sp, #16
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
 8004c40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004c42:	2300      	movs	r3, #0
 8004c44:	73fb      	strb	r3, [r7, #15]
>>>>>>> Stashed changes
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
<<<<<<< Updated upstream
 800431e:	4b6a      	ldr	r3, [pc, #424]	@ (80044c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004320:	68db      	ldr	r3, [r3, #12]
 8004322:	f003 0303 	and.w	r3, r3, #3
 8004326:	2b00      	cmp	r3, #0
 8004328:	d018      	beq.n	800435c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800432a:	4b67      	ldr	r3, [pc, #412]	@ (80044c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800432c:	68db      	ldr	r3, [r3, #12]
 800432e:	f003 0203 	and.w	r2, r3, #3
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	429a      	cmp	r2, r3
 8004338:	d10d      	bne.n	8004356 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
       ||
 800433e:	2b00      	cmp	r3, #0
 8004340:	d009      	beq.n	8004356 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004342:	4b61      	ldr	r3, [pc, #388]	@ (80044c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004344:	68db      	ldr	r3, [r3, #12]
 8004346:	091b      	lsrs	r3, r3, #4
 8004348:	f003 0307 	and.w	r3, r3, #7
 800434c:	1c5a      	adds	r2, r3, #1
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	685b      	ldr	r3, [r3, #4]
       ||
 8004352:	429a      	cmp	r2, r3
 8004354:	d047      	beq.n	80043e6 <RCCEx_PLLSAI2_Config+0xd6>
=======
 8004c46:	4b6a      	ldr	r3, [pc, #424]	@ (8004df0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c48:	68db      	ldr	r3, [r3, #12]
 8004c4a:	f003 0303 	and.w	r3, r3, #3
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d018      	beq.n	8004c84 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004c52:	4b67      	ldr	r3, [pc, #412]	@ (8004df0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c54:	68db      	ldr	r3, [r3, #12]
 8004c56:	f003 0203 	and.w	r2, r3, #3
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	429a      	cmp	r2, r3
 8004c60:	d10d      	bne.n	8004c7e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
       ||
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d009      	beq.n	8004c7e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004c6a:	4b61      	ldr	r3, [pc, #388]	@ (8004df0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c6c:	68db      	ldr	r3, [r3, #12]
 8004c6e:	091b      	lsrs	r3, r3, #4
 8004c70:	f003 0307 	and.w	r3, r3, #7
 8004c74:	1c5a      	adds	r2, r3, #1
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	685b      	ldr	r3, [r3, #4]
       ||
 8004c7a:	429a      	cmp	r2, r3
 8004c7c:	d047      	beq.n	8004d0e <RCCEx_PLLSAI2_Config+0xd6>
>>>>>>> Stashed changes
#endif
      )
    {
      status = HAL_ERROR;
<<<<<<< Updated upstream
 8004356:	2301      	movs	r3, #1
 8004358:	73fb      	strb	r3, [r7, #15]
 800435a:	e044      	b.n	80043e6 <RCCEx_PLLSAI2_Config+0xd6>
=======
 8004c7e:	2301      	movs	r3, #1
 8004c80:	73fb      	strb	r3, [r7, #15]
 8004c82:	e044      	b.n	8004d0e <RCCEx_PLLSAI2_Config+0xd6>
>>>>>>> Stashed changes
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
<<<<<<< Updated upstream
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	2b03      	cmp	r3, #3
 8004362:	d018      	beq.n	8004396 <RCCEx_PLLSAI2_Config+0x86>
 8004364:	2b03      	cmp	r3, #3
 8004366:	d825      	bhi.n	80043b4 <RCCEx_PLLSAI2_Config+0xa4>
 8004368:	2b01      	cmp	r3, #1
 800436a:	d002      	beq.n	8004372 <RCCEx_PLLSAI2_Config+0x62>
 800436c:	2b02      	cmp	r3, #2
 800436e:	d009      	beq.n	8004384 <RCCEx_PLLSAI2_Config+0x74>
 8004370:	e020      	b.n	80043b4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004372:	4b55      	ldr	r3, [pc, #340]	@ (80044c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f003 0302 	and.w	r3, r3, #2
 800437a:	2b00      	cmp	r3, #0
 800437c:	d11d      	bne.n	80043ba <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800437e:	2301      	movs	r3, #1
 8004380:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004382:	e01a      	b.n	80043ba <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004384:	4b50      	ldr	r3, [pc, #320]	@ (80044c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800438c:	2b00      	cmp	r3, #0
 800438e:	d116      	bne.n	80043be <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004390:	2301      	movs	r3, #1
 8004392:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004394:	e013      	b.n	80043be <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004396:	4b4c      	ldr	r3, [pc, #304]	@ (80044c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d10f      	bne.n	80043c2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80043a2:	4b49      	ldr	r3, [pc, #292]	@ (80044c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d109      	bne.n	80043c2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80043ae:	2301      	movs	r3, #1
 80043b0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80043b2:	e006      	b.n	80043c2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80043b4:	2301      	movs	r3, #1
 80043b6:	73fb      	strb	r3, [r7, #15]
      break;
 80043b8:	e004      	b.n	80043c4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80043ba:	bf00      	nop
 80043bc:	e002      	b.n	80043c4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80043be:	bf00      	nop
 80043c0:	e000      	b.n	80043c4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80043c2:	bf00      	nop
    }

    if(status == HAL_OK)
 80043c4:	7bfb      	ldrb	r3, [r7, #15]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d10d      	bne.n	80043e6 <RCCEx_PLLSAI2_Config+0xd6>
=======
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	2b03      	cmp	r3, #3
 8004c8a:	d018      	beq.n	8004cbe <RCCEx_PLLSAI2_Config+0x86>
 8004c8c:	2b03      	cmp	r3, #3
 8004c8e:	d825      	bhi.n	8004cdc <RCCEx_PLLSAI2_Config+0xa4>
 8004c90:	2b01      	cmp	r3, #1
 8004c92:	d002      	beq.n	8004c9a <RCCEx_PLLSAI2_Config+0x62>
 8004c94:	2b02      	cmp	r3, #2
 8004c96:	d009      	beq.n	8004cac <RCCEx_PLLSAI2_Config+0x74>
 8004c98:	e020      	b.n	8004cdc <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004c9a:	4b55      	ldr	r3, [pc, #340]	@ (8004df0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f003 0302 	and.w	r3, r3, #2
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d11d      	bne.n	8004ce2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004caa:	e01a      	b.n	8004ce2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004cac:	4b50      	ldr	r3, [pc, #320]	@ (8004df0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d116      	bne.n	8004ce6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004cb8:	2301      	movs	r3, #1
 8004cba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004cbc:	e013      	b.n	8004ce6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004cbe:	4b4c      	ldr	r3, [pc, #304]	@ (8004df0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d10f      	bne.n	8004cea <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004cca:	4b49      	ldr	r3, [pc, #292]	@ (8004df0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d109      	bne.n	8004cea <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004cda:	e006      	b.n	8004cea <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004cdc:	2301      	movs	r3, #1
 8004cde:	73fb      	strb	r3, [r7, #15]
      break;
 8004ce0:	e004      	b.n	8004cec <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004ce2:	bf00      	nop
 8004ce4:	e002      	b.n	8004cec <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004ce6:	bf00      	nop
 8004ce8:	e000      	b.n	8004cec <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004cea:	bf00      	nop
    }

    if(status == HAL_OK)
 8004cec:	7bfb      	ldrb	r3, [r7, #15]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d10d      	bne.n	8004d0e <RCCEx_PLLSAI2_Config+0xd6>
>>>>>>> Stashed changes
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
<<<<<<< Updated upstream
 80043ca:	4b3f      	ldr	r3, [pc, #252]	@ (80044c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043cc:	68db      	ldr	r3, [r3, #12]
 80043ce:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6819      	ldr	r1, [r3, #0]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	3b01      	subs	r3, #1
 80043dc:	011b      	lsls	r3, r3, #4
 80043de:	430b      	orrs	r3, r1
 80043e0:	4939      	ldr	r1, [pc, #228]	@ (80044c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043e2:	4313      	orrs	r3, r2
 80043e4:	60cb      	str	r3, [r1, #12]
=======
 8004cf2:	4b3f      	ldr	r3, [pc, #252]	@ (8004df0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004cf4:	68db      	ldr	r3, [r3, #12]
 8004cf6:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6819      	ldr	r1, [r3, #0]
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	3b01      	subs	r3, #1
 8004d04:	011b      	lsls	r3, r3, #4
 8004d06:	430b      	orrs	r3, r1
 8004d08:	4939      	ldr	r1, [pc, #228]	@ (8004df0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	60cb      	str	r3, [r1, #12]
>>>>>>> Stashed changes
#endif
    }
  }

  if(status == HAL_OK)
<<<<<<< Updated upstream
 80043e6:	7bfb      	ldrb	r3, [r7, #15]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d167      	bne.n	80044bc <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80043ec:	4b36      	ldr	r3, [pc, #216]	@ (80044c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a35      	ldr	r2, [pc, #212]	@ (80044c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043f2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80043f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043f8:	f7fe f9f8 	bl	80027ec <HAL_GetTick>
 80043fc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80043fe:	e009      	b.n	8004414 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004400:	f7fe f9f4 	bl	80027ec <HAL_GetTick>
 8004404:	4602      	mov	r2, r0
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	1ad3      	subs	r3, r2, r3
 800440a:	2b02      	cmp	r3, #2
 800440c:	d902      	bls.n	8004414 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800440e:	2303      	movs	r3, #3
 8004410:	73fb      	strb	r3, [r7, #15]
        break;
 8004412:	e005      	b.n	8004420 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004414:	4b2c      	ldr	r3, [pc, #176]	@ (80044c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800441c:	2b00      	cmp	r3, #0
 800441e:	d1ef      	bne.n	8004400 <RCCEx_PLLSAI2_Config+0xf0>
=======
 8004d0e:	7bfb      	ldrb	r3, [r7, #15]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d167      	bne.n	8004de4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004d14:	4b36      	ldr	r3, [pc, #216]	@ (8004df0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a35      	ldr	r2, [pc, #212]	@ (8004df0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d1a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004d1e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d20:	f7fd fd92 	bl	8002848 <HAL_GetTick>
 8004d24:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004d26:	e009      	b.n	8004d3c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004d28:	f7fd fd8e 	bl	8002848 <HAL_GetTick>
 8004d2c:	4602      	mov	r2, r0
 8004d2e:	68bb      	ldr	r3, [r7, #8]
 8004d30:	1ad3      	subs	r3, r2, r3
 8004d32:	2b02      	cmp	r3, #2
 8004d34:	d902      	bls.n	8004d3c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004d36:	2303      	movs	r3, #3
 8004d38:	73fb      	strb	r3, [r7, #15]
        break;
 8004d3a:	e005      	b.n	8004d48 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004d3c:	4b2c      	ldr	r3, [pc, #176]	@ (8004df0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d1ef      	bne.n	8004d28 <RCCEx_PLLSAI2_Config+0xf0>
>>>>>>> Stashed changes
      }
    }

    if(status == HAL_OK)
<<<<<<< Updated upstream
 8004420:	7bfb      	ldrb	r3, [r7, #15]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d14a      	bne.n	80044bc <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d111      	bne.n	8004450 <RCCEx_PLLSAI2_Config+0x140>
=======
 8004d48:	7bfb      	ldrb	r3, [r7, #15]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d14a      	bne.n	8004de4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d111      	bne.n	8004d78 <RCCEx_PLLSAI2_Config+0x140>
>>>>>>> Stashed changes
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
<<<<<<< Updated upstream
 800442c:	4b26      	ldr	r3, [pc, #152]	@ (80044c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800442e:	695b      	ldr	r3, [r3, #20]
 8004430:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004434:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004438:	687a      	ldr	r2, [r7, #4]
 800443a:	6892      	ldr	r2, [r2, #8]
 800443c:	0211      	lsls	r1, r2, #8
 800443e:	687a      	ldr	r2, [r7, #4]
 8004440:	68d2      	ldr	r2, [r2, #12]
 8004442:	0912      	lsrs	r2, r2, #4
 8004444:	0452      	lsls	r2, r2, #17
 8004446:	430a      	orrs	r2, r1
 8004448:	491f      	ldr	r1, [pc, #124]	@ (80044c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800444a:	4313      	orrs	r3, r2
 800444c:	614b      	str	r3, [r1, #20]
 800444e:	e011      	b.n	8004474 <RCCEx_PLLSAI2_Config+0x164>
=======
 8004d54:	4b26      	ldr	r3, [pc, #152]	@ (8004df0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d56:	695b      	ldr	r3, [r3, #20]
 8004d58:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004d5c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d60:	687a      	ldr	r2, [r7, #4]
 8004d62:	6892      	ldr	r2, [r2, #8]
 8004d64:	0211      	lsls	r1, r2, #8
 8004d66:	687a      	ldr	r2, [r7, #4]
 8004d68:	68d2      	ldr	r2, [r2, #12]
 8004d6a:	0912      	lsrs	r2, r2, #4
 8004d6c:	0452      	lsls	r2, r2, #17
 8004d6e:	430a      	orrs	r2, r1
 8004d70:	491f      	ldr	r1, [pc, #124]	@ (8004df0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d72:	4313      	orrs	r3, r2
 8004d74:	614b      	str	r3, [r1, #20]
 8004d76:	e011      	b.n	8004d9c <RCCEx_PLLSAI2_Config+0x164>
>>>>>>> Stashed changes
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
<<<<<<< Updated upstream
 8004450:	4b1d      	ldr	r3, [pc, #116]	@ (80044c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004452:	695b      	ldr	r3, [r3, #20]
 8004454:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004458:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800445c:	687a      	ldr	r2, [r7, #4]
 800445e:	6892      	ldr	r2, [r2, #8]
 8004460:	0211      	lsls	r1, r2, #8
 8004462:	687a      	ldr	r2, [r7, #4]
 8004464:	6912      	ldr	r2, [r2, #16]
 8004466:	0852      	lsrs	r2, r2, #1
 8004468:	3a01      	subs	r2, #1
 800446a:	0652      	lsls	r2, r2, #25
 800446c:	430a      	orrs	r2, r1
 800446e:	4916      	ldr	r1, [pc, #88]	@ (80044c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004470:	4313      	orrs	r3, r2
 8004472:	614b      	str	r3, [r1, #20]
=======
 8004d78:	4b1d      	ldr	r3, [pc, #116]	@ (8004df0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d7a:	695b      	ldr	r3, [r3, #20]
 8004d7c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004d80:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004d84:	687a      	ldr	r2, [r7, #4]
 8004d86:	6892      	ldr	r2, [r2, #8]
 8004d88:	0211      	lsls	r1, r2, #8
 8004d8a:	687a      	ldr	r2, [r7, #4]
 8004d8c:	6912      	ldr	r2, [r2, #16]
 8004d8e:	0852      	lsrs	r2, r2, #1
 8004d90:	3a01      	subs	r2, #1
 8004d92:	0652      	lsls	r2, r2, #25
 8004d94:	430a      	orrs	r2, r1
 8004d96:	4916      	ldr	r1, [pc, #88]	@ (8004df0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	614b      	str	r3, [r1, #20]
>>>>>>> Stashed changes
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
<<<<<<< Updated upstream
 8004474:	4b14      	ldr	r3, [pc, #80]	@ (80044c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a13      	ldr	r2, [pc, #76]	@ (80044c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800447a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800447e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004480:	f7fe f9b4 	bl	80027ec <HAL_GetTick>
 8004484:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004486:	e009      	b.n	800449c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004488:	f7fe f9b0 	bl	80027ec <HAL_GetTick>
 800448c:	4602      	mov	r2, r0
 800448e:	68bb      	ldr	r3, [r7, #8]
 8004490:	1ad3      	subs	r3, r2, r3
 8004492:	2b02      	cmp	r3, #2
 8004494:	d902      	bls.n	800449c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004496:	2303      	movs	r3, #3
 8004498:	73fb      	strb	r3, [r7, #15]
          break;
 800449a:	e005      	b.n	80044a8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800449c:	4b0a      	ldr	r3, [pc, #40]	@ (80044c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d0ef      	beq.n	8004488 <RCCEx_PLLSAI2_Config+0x178>
=======
 8004d9c:	4b14      	ldr	r3, [pc, #80]	@ (8004df0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4a13      	ldr	r2, [pc, #76]	@ (8004df0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004da2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004da6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004da8:	f7fd fd4e 	bl	8002848 <HAL_GetTick>
 8004dac:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004dae:	e009      	b.n	8004dc4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004db0:	f7fd fd4a 	bl	8002848 <HAL_GetTick>
 8004db4:	4602      	mov	r2, r0
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	1ad3      	subs	r3, r2, r3
 8004dba:	2b02      	cmp	r3, #2
 8004dbc:	d902      	bls.n	8004dc4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004dbe:	2303      	movs	r3, #3
 8004dc0:	73fb      	strb	r3, [r7, #15]
          break;
 8004dc2:	e005      	b.n	8004dd0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004dc4:	4b0a      	ldr	r3, [pc, #40]	@ (8004df0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d0ef      	beq.n	8004db0 <RCCEx_PLLSAI2_Config+0x178>
>>>>>>> Stashed changes
        }
      }

      if(status == HAL_OK)
<<<<<<< Updated upstream
 80044a8:	7bfb      	ldrb	r3, [r7, #15]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d106      	bne.n	80044bc <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80044ae:	4b06      	ldr	r3, [pc, #24]	@ (80044c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044b0:	695a      	ldr	r2, [r3, #20]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	695b      	ldr	r3, [r3, #20]
 80044b6:	4904      	ldr	r1, [pc, #16]	@ (80044c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044b8:	4313      	orrs	r3, r2
 80044ba:	614b      	str	r3, [r1, #20]
=======
 8004dd0:	7bfb      	ldrb	r3, [r7, #15]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d106      	bne.n	8004de4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004dd6:	4b06      	ldr	r3, [pc, #24]	@ (8004df0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004dd8:	695a      	ldr	r2, [r3, #20]
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	695b      	ldr	r3, [r3, #20]
 8004dde:	4904      	ldr	r1, [pc, #16]	@ (8004df0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004de0:	4313      	orrs	r3, r2
 8004de2:	614b      	str	r3, [r1, #20]
>>>>>>> Stashed changes
      }
    }
  }

  return status;
<<<<<<< Updated upstream
 80044bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80044be:	4618      	mov	r0, r3
 80044c0:	3710      	adds	r7, #16
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bd80      	pop	{r7, pc}
 80044c6:	bf00      	nop
 80044c8:	40021000 	.word	0x40021000

080044cc <HAL_SPI_Init>:
=======
 8004de4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004de6:	4618      	mov	r0, r3
 8004de8:	3710      	adds	r7, #16
 8004dea:	46bd      	mov	sp, r7
 8004dec:	bd80      	pop	{r7, pc}
 8004dee:	bf00      	nop
 8004df0:	40021000 	.word	0x40021000

08004df4 <HAL_SPI_Init>:
>>>>>>> Stashed changes
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
<<<<<<< Updated upstream
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b084      	sub	sp, #16
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
=======
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b084      	sub	sp, #16
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
<<<<<<< Updated upstream
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d101      	bne.n	80044de <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80044da:	2301      	movs	r3, #1
 80044dc:	e095      	b.n	800460a <HAL_SPI_Init+0x13e>
=======
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d101      	bne.n	8004e06 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004e02:	2301      	movs	r3, #1
 8004e04:	e095      	b.n	8004f32 <HAL_SPI_Init+0x13e>
>>>>>>> Stashed changes
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
<<<<<<< Updated upstream
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d108      	bne.n	80044f8 <HAL_SPI_Init+0x2c>
=======
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d108      	bne.n	8004e20 <HAL_SPI_Init+0x2c>
>>>>>>> Stashed changes
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
<<<<<<< Updated upstream
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80044ee:	d009      	beq.n	8004504 <HAL_SPI_Init+0x38>
=======
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	685b      	ldr	r3, [r3, #4]
 8004e12:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004e16:	d009      	beq.n	8004e2c <HAL_SPI_Init+0x38>
>>>>>>> Stashed changes
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
<<<<<<< Updated upstream
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2200      	movs	r2, #0
 80044f4:	61da      	str	r2, [r3, #28]
 80044f6:	e005      	b.n	8004504 <HAL_SPI_Init+0x38>
=======
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	61da      	str	r2, [r3, #28]
 8004e1e:	e005      	b.n	8004e2c <HAL_SPI_Init+0x38>
>>>>>>> Stashed changes
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
<<<<<<< Updated upstream
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2200      	movs	r2, #0
 80044fc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2200      	movs	r2, #0
 8004502:	615a      	str	r2, [r3, #20]
=======
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2200      	movs	r2, #0
 8004e24:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2200      	movs	r2, #0
 8004e2a:	615a      	str	r2, [r3, #20]
>>>>>>> Stashed changes
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
<<<<<<< Updated upstream
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2200      	movs	r2, #0
 8004508:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004510:	b2db      	uxtb	r3, r3
 8004512:	2b00      	cmp	r3, #0
 8004514:	d106      	bne.n	8004524 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2200      	movs	r2, #0
 800451a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
=======
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004e38:	b2db      	uxtb	r3, r3
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d106      	bne.n	8004e4c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2200      	movs	r2, #0
 8004e42:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
>>>>>>> Stashed changes

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
<<<<<<< Updated upstream
 800451e:	6878      	ldr	r0, [r7, #4]
 8004520:	f7fd fe32 	bl	8002188 <HAL_SPI_MspInit>
=======
 8004e46:	6878      	ldr	r0, [r7, #4]
 8004e48:	f7fd f9c6 	bl	80021d8 <HAL_SPI_MspInit>
>>>>>>> Stashed changes
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
<<<<<<< Updated upstream
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2202      	movs	r2, #2
 8004528:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	681a      	ldr	r2, [r3, #0]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800453a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	68db      	ldr	r3, [r3, #12]
 8004540:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004544:	d902      	bls.n	800454c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004546:	2300      	movs	r3, #0
 8004548:	60fb      	str	r3, [r7, #12]
 800454a:	e002      	b.n	8004552 <HAL_SPI_Init+0x86>
=======
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2202      	movs	r2, #2
 8004e50:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	681a      	ldr	r2, [r3, #0]
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004e62:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	68db      	ldr	r3, [r3, #12]
 8004e68:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004e6c:	d902      	bls.n	8004e74 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004e6e:	2300      	movs	r3, #0
 8004e70:	60fb      	str	r3, [r7, #12]
 8004e72:	e002      	b.n	8004e7a <HAL_SPI_Init+0x86>
>>>>>>> Stashed changes
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
<<<<<<< Updated upstream
 800454c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004550:	60fb      	str	r3, [r7, #12]
=======
 8004e74:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004e78:	60fb      	str	r3, [r7, #12]
>>>>>>> Stashed changes
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
<<<<<<< Updated upstream
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	68db      	ldr	r3, [r3, #12]
 8004556:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800455a:	d007      	beq.n	800456c <HAL_SPI_Init+0xa0>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	68db      	ldr	r3, [r3, #12]
 8004560:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004564:	d002      	beq.n	800456c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2200      	movs	r2, #0
 800456a:	629a      	str	r2, [r3, #40]	@ 0x28
=======
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	68db      	ldr	r3, [r3, #12]
 8004e7e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8004e82:	d007      	beq.n	8004e94 <HAL_SPI_Init+0xa0>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	68db      	ldr	r3, [r3, #12]
 8004e88:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004e8c:	d002      	beq.n	8004e94 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2200      	movs	r2, #0
 8004e92:	629a      	str	r2, [r3, #40]	@ 0x28
>>>>>>> Stashed changes
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
<<<<<<< Updated upstream
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800457c:	431a      	orrs	r2, r3
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	691b      	ldr	r3, [r3, #16]
 8004582:	f003 0302 	and.w	r3, r3, #2
 8004586:	431a      	orrs	r2, r3
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	695b      	ldr	r3, [r3, #20]
 800458c:	f003 0301 	and.w	r3, r3, #1
 8004590:	431a      	orrs	r2, r3
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	699b      	ldr	r3, [r3, #24]
 8004596:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800459a:	431a      	orrs	r2, r3
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	69db      	ldr	r3, [r3, #28]
 80045a0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80045a4:	431a      	orrs	r2, r3
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6a1b      	ldr	r3, [r3, #32]
 80045aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045ae:	ea42 0103 	orr.w	r1, r2, r3
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045b6:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	430a      	orrs	r2, r1
 80045c0:	601a      	str	r2, [r3, #0]
=======
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	685b      	ldr	r3, [r3, #4]
 8004e98:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	689b      	ldr	r3, [r3, #8]
 8004ea0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004ea4:	431a      	orrs	r2, r3
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	691b      	ldr	r3, [r3, #16]
 8004eaa:	f003 0302 	and.w	r3, r3, #2
 8004eae:	431a      	orrs	r2, r3
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	695b      	ldr	r3, [r3, #20]
 8004eb4:	f003 0301 	and.w	r3, r3, #1
 8004eb8:	431a      	orrs	r2, r3
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	699b      	ldr	r3, [r3, #24]
 8004ebe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004ec2:	431a      	orrs	r2, r3
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	69db      	ldr	r3, [r3, #28]
 8004ec8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004ecc:	431a      	orrs	r2, r3
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6a1b      	ldr	r3, [r3, #32]
 8004ed2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ed6:	ea42 0103 	orr.w	r1, r2, r3
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ede:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	430a      	orrs	r2, r1
 8004ee8:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
<<<<<<< Updated upstream
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	699b      	ldr	r3, [r3, #24]
 80045c6:	0c1b      	lsrs	r3, r3, #16
 80045c8:	f003 0204 	and.w	r2, r3, #4
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045d0:	f003 0310 	and.w	r3, r3, #16
 80045d4:	431a      	orrs	r2, r3
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045da:	f003 0308 	and.w	r3, r3, #8
 80045de:	431a      	orrs	r2, r3
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	68db      	ldr	r3, [r3, #12]
 80045e4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80045e8:	ea42 0103 	orr.w	r1, r2, r3
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	430a      	orrs	r2, r1
 80045f8:	605a      	str	r2, [r3, #4]
=======
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	699b      	ldr	r3, [r3, #24]
 8004eee:	0c1b      	lsrs	r3, r3, #16
 8004ef0:	f003 0204 	and.w	r2, r3, #4
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ef8:	f003 0310 	and.w	r3, r3, #16
 8004efc:	431a      	orrs	r2, r3
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f02:	f003 0308 	and.w	r3, r3, #8
 8004f06:	431a      	orrs	r2, r3
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	68db      	ldr	r3, [r3, #12]
 8004f0c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004f10:	ea42 0103 	orr.w	r1, r2, r3
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	430a      	orrs	r2, r1
 8004f20:	605a      	str	r2, [r3, #4]
>>>>>>> Stashed changes
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
<<<<<<< Updated upstream
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2200      	movs	r2, #0
 80045fe:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2201      	movs	r2, #1
 8004604:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8004608:	2300      	movs	r3, #0
}
 800460a:	4618      	mov	r0, r3
 800460c:	3710      	adds	r7, #16
 800460e:	46bd      	mov	sp, r7
 8004610:	bd80      	pop	{r7, pc}

08004612 <HAL_SPI_Transmit>:
=======
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2200      	movs	r2, #0
 8004f26:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8004f30:	2300      	movs	r3, #0
}
 8004f32:	4618      	mov	r0, r3
 8004f34:	3710      	adds	r7, #16
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bd80      	pop	{r7, pc}

08004f3a <HAL_SPI_Transmit>:
>>>>>>> Stashed changes
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
<<<<<<< Updated upstream
 8004612:	b580      	push	{r7, lr}
 8004614:	b088      	sub	sp, #32
 8004616:	af00      	add	r7, sp, #0
 8004618:	60f8      	str	r0, [r7, #12]
 800461a:	60b9      	str	r1, [r7, #8]
 800461c:	603b      	str	r3, [r7, #0]
 800461e:	4613      	mov	r3, r2
 8004620:	80fb      	strh	r3, [r7, #6]
=======
 8004f3a:	b580      	push	{r7, lr}
 8004f3c:	b088      	sub	sp, #32
 8004f3e:	af00      	add	r7, sp, #0
 8004f40:	60f8      	str	r0, [r7, #12]
 8004f42:	60b9      	str	r1, [r7, #8]
 8004f44:	603b      	str	r3, [r7, #0]
 8004f46:	4613      	mov	r3, r2
 8004f48:	80fb      	strh	r3, [r7, #6]
>>>>>>> Stashed changes

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
<<<<<<< Updated upstream
 8004622:	f7fe f8e3 	bl	80027ec <HAL_GetTick>
 8004626:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8004628:	88fb      	ldrh	r3, [r7, #6]
 800462a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004632:	b2db      	uxtb	r3, r3
 8004634:	2b01      	cmp	r3, #1
 8004636:	d001      	beq.n	800463c <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8004638:	2302      	movs	r3, #2
 800463a:	e15c      	b.n	80048f6 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d002      	beq.n	8004648 <HAL_SPI_Transmit+0x36>
 8004642:	88fb      	ldrh	r3, [r7, #6]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d101      	bne.n	800464c <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8004648:	2301      	movs	r3, #1
 800464a:	e154      	b.n	80048f6 <HAL_SPI_Transmit+0x2e4>
=======
 8004f4a:	f7fd fc7d 	bl	8002848 <HAL_GetTick>
 8004f4e:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8004f50:	88fb      	ldrh	r3, [r7, #6]
 8004f52:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004f5a:	b2db      	uxtb	r3, r3
 8004f5c:	2b01      	cmp	r3, #1
 8004f5e:	d001      	beq.n	8004f64 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8004f60:	2302      	movs	r3, #2
 8004f62:	e15c      	b.n	800521e <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d002      	beq.n	8004f70 <HAL_SPI_Transmit+0x36>
 8004f6a:	88fb      	ldrh	r3, [r7, #6]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d101      	bne.n	8004f74 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8004f70:	2301      	movs	r3, #1
 8004f72:	e154      	b.n	800521e <HAL_SPI_Transmit+0x2e4>
>>>>>>> Stashed changes
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
<<<<<<< Updated upstream
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004652:	2b01      	cmp	r3, #1
 8004654:	d101      	bne.n	800465a <HAL_SPI_Transmit+0x48>
 8004656:	2302      	movs	r3, #2
 8004658:	e14d      	b.n	80048f6 <HAL_SPI_Transmit+0x2e4>
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	2201      	movs	r2, #1
 800465e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	2203      	movs	r2, #3
 8004666:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	2200      	movs	r2, #0
 800466e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	68ba      	ldr	r2, [r7, #8]
 8004674:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	88fa      	ldrh	r2, [r7, #6]
 800467a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	88fa      	ldrh	r2, [r7, #6]
 8004680:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	2200      	movs	r2, #0
 8004686:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	2200      	movs	r2, #0
 800468c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	2200      	movs	r2, #0
 8004694:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	2200      	movs	r2, #0
 800469c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	2200      	movs	r2, #0
 80046a2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	689b      	ldr	r3, [r3, #8]
 80046a8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80046ac:	d10f      	bne.n	80046ce <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	681a      	ldr	r2, [r3, #0]
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80046bc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	681a      	ldr	r2, [r3, #0]
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80046cc:	601a      	str	r2, [r3, #0]
=======
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004f7a:	2b01      	cmp	r3, #1
 8004f7c:	d101      	bne.n	8004f82 <HAL_SPI_Transmit+0x48>
 8004f7e:	2302      	movs	r3, #2
 8004f80:	e14d      	b.n	800521e <HAL_SPI_Transmit+0x2e4>
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	2201      	movs	r2, #1
 8004f86:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	2203      	movs	r2, #3
 8004f8e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	2200      	movs	r2, #0
 8004f96:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	68ba      	ldr	r2, [r7, #8]
 8004f9c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	88fa      	ldrh	r2, [r7, #6]
 8004fa2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	88fa      	ldrh	r2, [r7, #6]
 8004fa8:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	2200      	movs	r2, #0
 8004fae:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	2200      	movs	r2, #0
 8004fbc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	2200      	movs	r2, #0
 8004fca:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	689b      	ldr	r3, [r3, #8]
 8004fd0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004fd4:	d10f      	bne.n	8004ff6 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	681a      	ldr	r2, [r3, #0]
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004fe4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	681a      	ldr	r2, [r3, #0]
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004ff4:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
<<<<<<< Updated upstream
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046d8:	2b40      	cmp	r3, #64	@ 0x40
 80046da:	d007      	beq.n	80046ec <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	681a      	ldr	r2, [r3, #0]
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80046ea:	601a      	str	r2, [r3, #0]
=======
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005000:	2b40      	cmp	r3, #64	@ 0x40
 8005002:	d007      	beq.n	8005014 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	681a      	ldr	r2, [r3, #0]
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005012:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
<<<<<<< Updated upstream
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	68db      	ldr	r3, [r3, #12]
 80046f0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80046f4:	d952      	bls.n	800479c <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d002      	beq.n	8004704 <HAL_SPI_Transmit+0xf2>
 80046fe:	8b7b      	ldrh	r3, [r7, #26]
 8004700:	2b01      	cmp	r3, #1
 8004702:	d145      	bne.n	8004790 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004708:	881a      	ldrh	r2, [r3, #0]
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004714:	1c9a      	adds	r2, r3, #2
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800471e:	b29b      	uxth	r3, r3
 8004720:	3b01      	subs	r3, #1
 8004722:	b29a      	uxth	r2, r3
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004728:	e032      	b.n	8004790 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	689b      	ldr	r3, [r3, #8]
 8004730:	f003 0302 	and.w	r3, r3, #2
 8004734:	2b02      	cmp	r3, #2
 8004736:	d112      	bne.n	800475e <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800473c:	881a      	ldrh	r2, [r3, #0]
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004748:	1c9a      	adds	r2, r3, #2
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004752:	b29b      	uxth	r3, r3
 8004754:	3b01      	subs	r3, #1
 8004756:	b29a      	uxth	r2, r3
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800475c:	e018      	b.n	8004790 <HAL_SPI_Transmit+0x17e>
=======
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	68db      	ldr	r3, [r3, #12]
 8005018:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800501c:	d952      	bls.n	80050c4 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	685b      	ldr	r3, [r3, #4]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d002      	beq.n	800502c <HAL_SPI_Transmit+0xf2>
 8005026:	8b7b      	ldrh	r3, [r7, #26]
 8005028:	2b01      	cmp	r3, #1
 800502a:	d145      	bne.n	80050b8 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005030:	881a      	ldrh	r2, [r3, #0]
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800503c:	1c9a      	adds	r2, r3, #2
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005046:	b29b      	uxth	r3, r3
 8005048:	3b01      	subs	r3, #1
 800504a:	b29a      	uxth	r2, r3
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005050:	e032      	b.n	80050b8 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	689b      	ldr	r3, [r3, #8]
 8005058:	f003 0302 	and.w	r3, r3, #2
 800505c:	2b02      	cmp	r3, #2
 800505e:	d112      	bne.n	8005086 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005064:	881a      	ldrh	r2, [r3, #0]
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005070:	1c9a      	adds	r2, r3, #2
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800507a:	b29b      	uxth	r3, r3
 800507c:	3b01      	subs	r3, #1
 800507e:	b29a      	uxth	r2, r3
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005084:	e018      	b.n	80050b8 <HAL_SPI_Transmit+0x17e>
>>>>>>> Stashed changes
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
<<<<<<< Updated upstream
 800475e:	f7fe f845 	bl	80027ec <HAL_GetTick>
 8004762:	4602      	mov	r2, r0
 8004764:	69fb      	ldr	r3, [r7, #28]
 8004766:	1ad3      	subs	r3, r2, r3
 8004768:	683a      	ldr	r2, [r7, #0]
 800476a:	429a      	cmp	r2, r3
 800476c:	d803      	bhi.n	8004776 <HAL_SPI_Transmit+0x164>
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004774:	d102      	bne.n	800477c <HAL_SPI_Transmit+0x16a>
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d109      	bne.n	8004790 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	2201      	movs	r2, #1
 8004780:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	2200      	movs	r2, #0
 8004788:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800478c:	2303      	movs	r3, #3
 800478e:	e0b2      	b.n	80048f6 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004794:	b29b      	uxth	r3, r3
 8004796:	2b00      	cmp	r3, #0
 8004798:	d1c7      	bne.n	800472a <HAL_SPI_Transmit+0x118>
 800479a:	e083      	b.n	80048a4 <HAL_SPI_Transmit+0x292>
=======
 8005086:	f7fd fbdf 	bl	8002848 <HAL_GetTick>
 800508a:	4602      	mov	r2, r0
 800508c:	69fb      	ldr	r3, [r7, #28]
 800508e:	1ad3      	subs	r3, r2, r3
 8005090:	683a      	ldr	r2, [r7, #0]
 8005092:	429a      	cmp	r2, r3
 8005094:	d803      	bhi.n	800509e <HAL_SPI_Transmit+0x164>
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	f1b3 3fff 	cmp.w	r3, #4294967295
 800509c:	d102      	bne.n	80050a4 <HAL_SPI_Transmit+0x16a>
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d109      	bne.n	80050b8 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	2201      	movs	r2, #1
 80050a8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	2200      	movs	r2, #0
 80050b0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80050b4:	2303      	movs	r3, #3
 80050b6:	e0b2      	b.n	800521e <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80050bc:	b29b      	uxth	r3, r3
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d1c7      	bne.n	8005052 <HAL_SPI_Transmit+0x118>
 80050c2:	e083      	b.n	80051cc <HAL_SPI_Transmit+0x292>
>>>>>>> Stashed changes
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
<<<<<<< Updated upstream
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d002      	beq.n	80047aa <HAL_SPI_Transmit+0x198>
 80047a4:	8b7b      	ldrh	r3, [r7, #26]
 80047a6:	2b01      	cmp	r3, #1
 80047a8:	d177      	bne.n	800489a <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80047ae:	b29b      	uxth	r3, r3
 80047b0:	2b01      	cmp	r3, #1
 80047b2:	d912      	bls.n	80047da <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047b8:	881a      	ldrh	r2, [r3, #0]
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047c4:	1c9a      	adds	r2, r3, #2
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80047ce:	b29b      	uxth	r3, r3
 80047d0:	3b02      	subs	r3, #2
 80047d2:	b29a      	uxth	r2, r3
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80047d8:	e05f      	b.n	800489a <HAL_SPI_Transmit+0x288>
=======
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	685b      	ldr	r3, [r3, #4]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d002      	beq.n	80050d2 <HAL_SPI_Transmit+0x198>
 80050cc:	8b7b      	ldrh	r3, [r7, #26]
 80050ce:	2b01      	cmp	r3, #1
 80050d0:	d177      	bne.n	80051c2 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80050d6:	b29b      	uxth	r3, r3
 80050d8:	2b01      	cmp	r3, #1
 80050da:	d912      	bls.n	8005102 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050e0:	881a      	ldrh	r2, [r3, #0]
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050ec:	1c9a      	adds	r2, r3, #2
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80050f6:	b29b      	uxth	r3, r3
 80050f8:	3b02      	subs	r3, #2
 80050fa:	b29a      	uxth	r2, r3
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005100:	e05f      	b.n	80051c2 <HAL_SPI_Transmit+0x288>
>>>>>>> Stashed changes
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
<<<<<<< Updated upstream
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	330c      	adds	r3, #12
 80047e4:	7812      	ldrb	r2, [r2, #0]
 80047e6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047ec:	1c5a      	adds	r2, r3, #1
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80047f6:	b29b      	uxth	r3, r3
 80047f8:	3b01      	subs	r3, #1
 80047fa:	b29a      	uxth	r2, r3
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004800:	e04b      	b.n	800489a <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	689b      	ldr	r3, [r3, #8]
 8004808:	f003 0302 	and.w	r3, r3, #2
 800480c:	2b02      	cmp	r3, #2
 800480e:	d12b      	bne.n	8004868 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004814:	b29b      	uxth	r3, r3
 8004816:	2b01      	cmp	r3, #1
 8004818:	d912      	bls.n	8004840 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800481e:	881a      	ldrh	r2, [r3, #0]
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800482a:	1c9a      	adds	r2, r3, #2
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004834:	b29b      	uxth	r3, r3
 8004836:	3b02      	subs	r3, #2
 8004838:	b29a      	uxth	r2, r3
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800483e:	e02c      	b.n	800489a <HAL_SPI_Transmit+0x288>
=======
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	330c      	adds	r3, #12
 800510c:	7812      	ldrb	r2, [r2, #0]
 800510e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005114:	1c5a      	adds	r2, r3, #1
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800511e:	b29b      	uxth	r3, r3
 8005120:	3b01      	subs	r3, #1
 8005122:	b29a      	uxth	r2, r3
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005128:	e04b      	b.n	80051c2 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	689b      	ldr	r3, [r3, #8]
 8005130:	f003 0302 	and.w	r3, r3, #2
 8005134:	2b02      	cmp	r3, #2
 8005136:	d12b      	bne.n	8005190 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800513c:	b29b      	uxth	r3, r3
 800513e:	2b01      	cmp	r3, #1
 8005140:	d912      	bls.n	8005168 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005146:	881a      	ldrh	r2, [r3, #0]
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005152:	1c9a      	adds	r2, r3, #2
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800515c:	b29b      	uxth	r3, r3
 800515e:	3b02      	subs	r3, #2
 8005160:	b29a      	uxth	r2, r3
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005166:	e02c      	b.n	80051c2 <HAL_SPI_Transmit+0x288>
>>>>>>> Stashed changes
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
<<<<<<< Updated upstream
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	330c      	adds	r3, #12
 800484a:	7812      	ldrb	r2, [r2, #0]
 800484c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004852:	1c5a      	adds	r2, r3, #1
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800485c:	b29b      	uxth	r3, r3
 800485e:	3b01      	subs	r3, #1
 8004860:	b29a      	uxth	r2, r3
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004866:	e018      	b.n	800489a <HAL_SPI_Transmit+0x288>
=======
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	330c      	adds	r3, #12
 8005172:	7812      	ldrb	r2, [r2, #0]
 8005174:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800517a:	1c5a      	adds	r2, r3, #1
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005184:	b29b      	uxth	r3, r3
 8005186:	3b01      	subs	r3, #1
 8005188:	b29a      	uxth	r2, r3
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800518e:	e018      	b.n	80051c2 <HAL_SPI_Transmit+0x288>
>>>>>>> Stashed changes
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
<<<<<<< Updated upstream
 8004868:	f7fd ffc0 	bl	80027ec <HAL_GetTick>
 800486c:	4602      	mov	r2, r0
 800486e:	69fb      	ldr	r3, [r7, #28]
 8004870:	1ad3      	subs	r3, r2, r3
 8004872:	683a      	ldr	r2, [r7, #0]
 8004874:	429a      	cmp	r2, r3
 8004876:	d803      	bhi.n	8004880 <HAL_SPI_Transmit+0x26e>
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800487e:	d102      	bne.n	8004886 <HAL_SPI_Transmit+0x274>
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d109      	bne.n	800489a <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	2201      	movs	r2, #1
 800488a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	2200      	movs	r2, #0
 8004892:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8004896:	2303      	movs	r3, #3
 8004898:	e02d      	b.n	80048f6 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800489e:	b29b      	uxth	r3, r3
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d1ae      	bne.n	8004802 <HAL_SPI_Transmit+0x1f0>
=======
 8005190:	f7fd fb5a 	bl	8002848 <HAL_GetTick>
 8005194:	4602      	mov	r2, r0
 8005196:	69fb      	ldr	r3, [r7, #28]
 8005198:	1ad3      	subs	r3, r2, r3
 800519a:	683a      	ldr	r2, [r7, #0]
 800519c:	429a      	cmp	r2, r3
 800519e:	d803      	bhi.n	80051a8 <HAL_SPI_Transmit+0x26e>
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051a6:	d102      	bne.n	80051ae <HAL_SPI_Transmit+0x274>
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d109      	bne.n	80051c2 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	2201      	movs	r2, #1
 80051b2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	2200      	movs	r2, #0
 80051ba:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80051be:	2303      	movs	r3, #3
 80051c0:	e02d      	b.n	800521e <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80051c6:	b29b      	uxth	r3, r3
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d1ae      	bne.n	800512a <HAL_SPI_Transmit+0x1f0>
>>>>>>> Stashed changes
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
<<<<<<< Updated upstream
 80048a4:	69fa      	ldr	r2, [r7, #28]
 80048a6:	6839      	ldr	r1, [r7, #0]
 80048a8:	68f8      	ldr	r0, [r7, #12]
 80048aa:	f000 fb65 	bl	8004f78 <SPI_EndRxTxTransaction>
 80048ae:	4603      	mov	r3, r0
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d002      	beq.n	80048ba <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	2220      	movs	r2, #32
 80048b8:	661a      	str	r2, [r3, #96]	@ 0x60
=======
 80051cc:	69fa      	ldr	r2, [r7, #28]
 80051ce:	6839      	ldr	r1, [r7, #0]
 80051d0:	68f8      	ldr	r0, [r7, #12]
 80051d2:	f000 fb65 	bl	80058a0 <SPI_EndRxTxTransaction>
 80051d6:	4603      	mov	r3, r0
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d002      	beq.n	80051e2 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	2220      	movs	r2, #32
 80051e0:	661a      	str	r2, [r3, #96]	@ 0x60
>>>>>>> Stashed changes
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
<<<<<<< Updated upstream
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	689b      	ldr	r3, [r3, #8]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d10a      	bne.n	80048d8 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80048c2:	2300      	movs	r3, #0
 80048c4:	617b      	str	r3, [r7, #20]
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	68db      	ldr	r3, [r3, #12]
 80048cc:	617b      	str	r3, [r7, #20]
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	689b      	ldr	r3, [r3, #8]
 80048d4:	617b      	str	r3, [r7, #20]
 80048d6:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	2201      	movs	r2, #1
 80048dc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	2200      	movs	r2, #0
 80048e4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d001      	beq.n	80048f4 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 80048f0:	2301      	movs	r3, #1
 80048f2:	e000      	b.n	80048f6 <HAL_SPI_Transmit+0x2e4>
=======
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	689b      	ldr	r3, [r3, #8]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d10a      	bne.n	8005200 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80051ea:	2300      	movs	r3, #0
 80051ec:	617b      	str	r3, [r7, #20]
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	68db      	ldr	r3, [r3, #12]
 80051f4:	617b      	str	r3, [r7, #20]
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	689b      	ldr	r3, [r3, #8]
 80051fc:	617b      	str	r3, [r7, #20]
 80051fe:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	2201      	movs	r2, #1
 8005204:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	2200      	movs	r2, #0
 800520c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005214:	2b00      	cmp	r3, #0
 8005216:	d001      	beq.n	800521c <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8005218:	2301      	movs	r3, #1
 800521a:	e000      	b.n	800521e <HAL_SPI_Transmit+0x2e4>
>>>>>>> Stashed changes
  }
  else
  {
    return HAL_OK;
<<<<<<< Updated upstream
 80048f4:	2300      	movs	r3, #0
  }
}
 80048f6:	4618      	mov	r0, r3
 80048f8:	3720      	adds	r7, #32
 80048fa:	46bd      	mov	sp, r7
 80048fc:	bd80      	pop	{r7, pc}

080048fe <HAL_SPI_TransmitReceive>:
=======
 800521c:	2300      	movs	r3, #0
  }
}
 800521e:	4618      	mov	r0, r3
 8005220:	3720      	adds	r7, #32
 8005222:	46bd      	mov	sp, r7
 8005224:	bd80      	pop	{r7, pc}

08005226 <HAL_SPI_TransmitReceive>:
>>>>>>> Stashed changes
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
<<<<<<< Updated upstream
 80048fe:	b580      	push	{r7, lr}
 8004900:	b08a      	sub	sp, #40	@ 0x28
 8004902:	af00      	add	r7, sp, #0
 8004904:	60f8      	str	r0, [r7, #12]
 8004906:	60b9      	str	r1, [r7, #8]
 8004908:	607a      	str	r2, [r7, #4]
 800490a:	807b      	strh	r3, [r7, #2]
=======
 8005226:	b580      	push	{r7, lr}
 8005228:	b08a      	sub	sp, #40	@ 0x28
 800522a:	af00      	add	r7, sp, #0
 800522c:	60f8      	str	r0, [r7, #12]
 800522e:	60b9      	str	r1, [r7, #8]
 8005230:	607a      	str	r2, [r7, #4]
 8005232:	807b      	strh	r3, [r7, #2]
>>>>>>> Stashed changes
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
<<<<<<< Updated upstream
 800490c:	2301      	movs	r3, #1
 800490e:	627b      	str	r3, [r7, #36]	@ 0x24
=======
 8005234:	2301      	movs	r3, #1
 8005236:	627b      	str	r3, [r7, #36]	@ 0x24
>>>>>>> Stashed changes

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
<<<<<<< Updated upstream
 8004910:	f7fd ff6c 	bl	80027ec <HAL_GetTick>
 8004914:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800491c:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8004924:	887b      	ldrh	r3, [r7, #2]
 8004926:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8004928:	887b      	ldrh	r3, [r7, #2]
 800492a:	82bb      	strh	r3, [r7, #20]
=======
 8005238:	f7fd fb06 	bl	8002848 <HAL_GetTick>
 800523c:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005244:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	685b      	ldr	r3, [r3, #4]
 800524a:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800524c:	887b      	ldrh	r3, [r7, #2]
 800524e:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8005250:	887b      	ldrh	r3, [r7, #2]
 8005252:	82bb      	strh	r3, [r7, #20]
>>>>>>> Stashed changes
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
<<<<<<< Updated upstream
 800492c:	7ffb      	ldrb	r3, [r7, #31]
 800492e:	2b01      	cmp	r3, #1
 8004930:	d00c      	beq.n	800494c <HAL_SPI_TransmitReceive+0x4e>
 8004932:	69bb      	ldr	r3, [r7, #24]
 8004934:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004938:	d106      	bne.n	8004948 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	689b      	ldr	r3, [r3, #8]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d102      	bne.n	8004948 <HAL_SPI_TransmitReceive+0x4a>
 8004942:	7ffb      	ldrb	r3, [r7, #31]
 8004944:	2b04      	cmp	r3, #4
 8004946:	d001      	beq.n	800494c <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8004948:	2302      	movs	r3, #2
 800494a:	e1f3      	b.n	8004d34 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d005      	beq.n	800495e <HAL_SPI_TransmitReceive+0x60>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d002      	beq.n	800495e <HAL_SPI_TransmitReceive+0x60>
 8004958:	887b      	ldrh	r3, [r7, #2]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d101      	bne.n	8004962 <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 800495e:	2301      	movs	r3, #1
 8004960:	e1e8      	b.n	8004d34 <HAL_SPI_TransmitReceive+0x436>
=======
 8005254:	7ffb      	ldrb	r3, [r7, #31]
 8005256:	2b01      	cmp	r3, #1
 8005258:	d00c      	beq.n	8005274 <HAL_SPI_TransmitReceive+0x4e>
 800525a:	69bb      	ldr	r3, [r7, #24]
 800525c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005260:	d106      	bne.n	8005270 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	689b      	ldr	r3, [r3, #8]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d102      	bne.n	8005270 <HAL_SPI_TransmitReceive+0x4a>
 800526a:	7ffb      	ldrb	r3, [r7, #31]
 800526c:	2b04      	cmp	r3, #4
 800526e:	d001      	beq.n	8005274 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8005270:	2302      	movs	r3, #2
 8005272:	e1f3      	b.n	800565c <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005274:	68bb      	ldr	r3, [r7, #8]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d005      	beq.n	8005286 <HAL_SPI_TransmitReceive+0x60>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d002      	beq.n	8005286 <HAL_SPI_TransmitReceive+0x60>
 8005280:	887b      	ldrh	r3, [r7, #2]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d101      	bne.n	800528a <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8005286:	2301      	movs	r3, #1
 8005288:	e1e8      	b.n	800565c <HAL_SPI_TransmitReceive+0x436>
>>>>>>> Stashed changes
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
<<<<<<< Updated upstream
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004968:	2b01      	cmp	r3, #1
 800496a:	d101      	bne.n	8004970 <HAL_SPI_TransmitReceive+0x72>
 800496c:	2302      	movs	r3, #2
 800496e:	e1e1      	b.n	8004d34 <HAL_SPI_TransmitReceive+0x436>
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	2201      	movs	r2, #1
 8004974:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800497e:	b2db      	uxtb	r3, r3
 8004980:	2b04      	cmp	r3, #4
 8004982:	d003      	beq.n	800498c <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	2205      	movs	r2, #5
 8004988:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
=======
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005290:	2b01      	cmp	r3, #1
 8005292:	d101      	bne.n	8005298 <HAL_SPI_TransmitReceive+0x72>
 8005294:	2302      	movs	r3, #2
 8005296:	e1e1      	b.n	800565c <HAL_SPI_TransmitReceive+0x436>
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	2201      	movs	r2, #1
 800529c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80052a6:	b2db      	uxtb	r3, r3
 80052a8:	2b04      	cmp	r3, #4
 80052aa:	d003      	beq.n	80052b4 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	2205      	movs	r2, #5
 80052b0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
>>>>>>> Stashed changes
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
<<<<<<< Updated upstream
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	2200      	movs	r2, #0
 8004990:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	687a      	ldr	r2, [r7, #4]
 8004996:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	887a      	ldrh	r2, [r7, #2]
 800499c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	887a      	ldrh	r2, [r7, #2]
 80049a4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	68ba      	ldr	r2, [r7, #8]
 80049ac:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	887a      	ldrh	r2, [r7, #2]
 80049b2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	887a      	ldrh	r2, [r7, #2]
 80049b8:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	2200      	movs	r2, #0
 80049be:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	2200      	movs	r2, #0
 80049c4:	651a      	str	r2, [r3, #80]	@ 0x50
=======
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	2200      	movs	r2, #0
 80052b8:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	687a      	ldr	r2, [r7, #4]
 80052be:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	887a      	ldrh	r2, [r7, #2]
 80052c4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	887a      	ldrh	r2, [r7, #2]
 80052cc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	68ba      	ldr	r2, [r7, #8]
 80052d4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	887a      	ldrh	r2, [r7, #2]
 80052da:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	887a      	ldrh	r2, [r7, #2]
 80052e0:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	2200      	movs	r2, #0
 80052e6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	2200      	movs	r2, #0
 80052ec:	651a      	str	r2, [r3, #80]	@ 0x50
>>>>>>> Stashed changes
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
<<<<<<< Updated upstream
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	68db      	ldr	r3, [r3, #12]
 80049ca:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80049ce:	d802      	bhi.n	80049d6 <HAL_SPI_TransmitReceive+0xd8>
 80049d0:	8abb      	ldrh	r3, [r7, #20]
 80049d2:	2b01      	cmp	r3, #1
 80049d4:	d908      	bls.n	80049e8 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	685a      	ldr	r2, [r3, #4]
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80049e4:	605a      	str	r2, [r3, #4]
 80049e6:	e007      	b.n	80049f8 <HAL_SPI_TransmitReceive+0xfa>
=======
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	68db      	ldr	r3, [r3, #12]
 80052f2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80052f6:	d802      	bhi.n	80052fe <HAL_SPI_TransmitReceive+0xd8>
 80052f8:	8abb      	ldrh	r3, [r7, #20]
 80052fa:	2b01      	cmp	r3, #1
 80052fc:	d908      	bls.n	8005310 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	685a      	ldr	r2, [r3, #4]
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800530c:	605a      	str	r2, [r3, #4]
 800530e:	e007      	b.n	8005320 <HAL_SPI_TransmitReceive+0xfa>
>>>>>>> Stashed changes
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
<<<<<<< Updated upstream
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	685a      	ldr	r2, [r3, #4]
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80049f6:	605a      	str	r2, [r3, #4]
=======
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	685a      	ldr	r2, [r3, #4]
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800531e:	605a      	str	r2, [r3, #4]
>>>>>>> Stashed changes
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
<<<<<<< Updated upstream
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a02:	2b40      	cmp	r3, #64	@ 0x40
 8004a04:	d007      	beq.n	8004a16 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	681a      	ldr	r2, [r3, #0]
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004a14:	601a      	str	r2, [r3, #0]
=======
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800532a:	2b40      	cmp	r3, #64	@ 0x40
 800532c:	d007      	beq.n	800533e <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	681a      	ldr	r2, [r3, #0]
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800533c:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
<<<<<<< Updated upstream
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	68db      	ldr	r3, [r3, #12]
 8004a1a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004a1e:	f240 8083 	bls.w	8004b28 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d002      	beq.n	8004a30 <HAL_SPI_TransmitReceive+0x132>
 8004a2a:	8afb      	ldrh	r3, [r7, #22]
 8004a2c:	2b01      	cmp	r3, #1
 8004a2e:	d16f      	bne.n	8004b10 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a34:	881a      	ldrh	r2, [r3, #0]
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a40:	1c9a      	adds	r2, r3, #2
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004a4a:	b29b      	uxth	r3, r3
 8004a4c:	3b01      	subs	r3, #1
 8004a4e:	b29a      	uxth	r2, r3
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	87da      	strh	r2, [r3, #62]	@ 0x3e
=======
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	68db      	ldr	r3, [r3, #12]
 8005342:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005346:	f240 8083 	bls.w	8005450 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	685b      	ldr	r3, [r3, #4]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d002      	beq.n	8005358 <HAL_SPI_TransmitReceive+0x132>
 8005352:	8afb      	ldrh	r3, [r7, #22]
 8005354:	2b01      	cmp	r3, #1
 8005356:	d16f      	bne.n	8005438 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800535c:	881a      	ldrh	r2, [r3, #0]
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005368:	1c9a      	adds	r2, r3, #2
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005372:	b29b      	uxth	r3, r3
 8005374:	3b01      	subs	r3, #1
 8005376:	b29a      	uxth	r2, r3
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	87da      	strh	r2, [r3, #62]	@ 0x3e
>>>>>>> Stashed changes
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
<<<<<<< Updated upstream
 8004a54:	e05c      	b.n	8004b10 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	689b      	ldr	r3, [r3, #8]
 8004a5c:	f003 0302 	and.w	r3, r3, #2
 8004a60:	2b02      	cmp	r3, #2
 8004a62:	d11b      	bne.n	8004a9c <HAL_SPI_TransmitReceive+0x19e>
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004a68:	b29b      	uxth	r3, r3
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d016      	beq.n	8004a9c <HAL_SPI_TransmitReceive+0x19e>
 8004a6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a70:	2b01      	cmp	r3, #1
 8004a72:	d113      	bne.n	8004a9c <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a78:	881a      	ldrh	r2, [r3, #0]
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a84:	1c9a      	adds	r2, r3, #2
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004a8e:	b29b      	uxth	r3, r3
 8004a90:	3b01      	subs	r3, #1
 8004a92:	b29a      	uxth	r2, r3
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004a98:	2300      	movs	r3, #0
 8004a9a:	627b      	str	r3, [r7, #36]	@ 0x24
=======
 800537c:	e05c      	b.n	8005438 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	689b      	ldr	r3, [r3, #8]
 8005384:	f003 0302 	and.w	r3, r3, #2
 8005388:	2b02      	cmp	r3, #2
 800538a:	d11b      	bne.n	80053c4 <HAL_SPI_TransmitReceive+0x19e>
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005390:	b29b      	uxth	r3, r3
 8005392:	2b00      	cmp	r3, #0
 8005394:	d016      	beq.n	80053c4 <HAL_SPI_TransmitReceive+0x19e>
 8005396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005398:	2b01      	cmp	r3, #1
 800539a:	d113      	bne.n	80053c4 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053a0:	881a      	ldrh	r2, [r3, #0]
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053ac:	1c9a      	adds	r2, r3, #2
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80053b6:	b29b      	uxth	r3, r3
 80053b8:	3b01      	subs	r3, #1
 80053ba:	b29a      	uxth	r2, r3
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80053c0:	2300      	movs	r3, #0
 80053c2:	627b      	str	r3, [r7, #36]	@ 0x24
>>>>>>> Stashed changes
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
<<<<<<< Updated upstream
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	689b      	ldr	r3, [r3, #8]
 8004aa2:	f003 0301 	and.w	r3, r3, #1
 8004aa6:	2b01      	cmp	r3, #1
 8004aa8:	d11c      	bne.n	8004ae4 <HAL_SPI_TransmitReceive+0x1e6>
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004ab0:	b29b      	uxth	r3, r3
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d016      	beq.n	8004ae4 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	68da      	ldr	r2, [r3, #12]
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ac0:	b292      	uxth	r2, r2
 8004ac2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ac8:	1c9a      	adds	r2, r3, #2
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004ad4:	b29b      	uxth	r3, r3
 8004ad6:	3b01      	subs	r3, #1
 8004ad8:	b29a      	uxth	r2, r3
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004ae4:	f7fd fe82 	bl	80027ec <HAL_GetTick>
 8004ae8:	4602      	mov	r2, r0
 8004aea:	6a3b      	ldr	r3, [r7, #32]
 8004aec:	1ad3      	subs	r3, r2, r3
 8004aee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004af0:	429a      	cmp	r2, r3
 8004af2:	d80d      	bhi.n	8004b10 <HAL_SPI_TransmitReceive+0x212>
 8004af4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004af6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004afa:	d009      	beq.n	8004b10 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	2201      	movs	r2, #1
 8004b00:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	2200      	movs	r2, #0
 8004b08:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8004b0c:	2303      	movs	r3, #3
 8004b0e:	e111      	b.n	8004d34 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004b14:	b29b      	uxth	r3, r3
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d19d      	bne.n	8004a56 <HAL_SPI_TransmitReceive+0x158>
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004b20:	b29b      	uxth	r3, r3
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d197      	bne.n	8004a56 <HAL_SPI_TransmitReceive+0x158>
 8004b26:	e0e5      	b.n	8004cf4 <HAL_SPI_TransmitReceive+0x3f6>
=======
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	689b      	ldr	r3, [r3, #8]
 80053ca:	f003 0301 	and.w	r3, r3, #1
 80053ce:	2b01      	cmp	r3, #1
 80053d0:	d11c      	bne.n	800540c <HAL_SPI_TransmitReceive+0x1e6>
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80053d8:	b29b      	uxth	r3, r3
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d016      	beq.n	800540c <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	68da      	ldr	r2, [r3, #12]
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053e8:	b292      	uxth	r2, r2
 80053ea:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053f0:	1c9a      	adds	r2, r3, #2
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80053fc:	b29b      	uxth	r3, r3
 80053fe:	3b01      	subs	r3, #1
 8005400:	b29a      	uxth	r2, r3
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005408:	2301      	movs	r3, #1
 800540a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800540c:	f7fd fa1c 	bl	8002848 <HAL_GetTick>
 8005410:	4602      	mov	r2, r0
 8005412:	6a3b      	ldr	r3, [r7, #32]
 8005414:	1ad3      	subs	r3, r2, r3
 8005416:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005418:	429a      	cmp	r2, r3
 800541a:	d80d      	bhi.n	8005438 <HAL_SPI_TransmitReceive+0x212>
 800541c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800541e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005422:	d009      	beq.n	8005438 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	2201      	movs	r2, #1
 8005428:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	2200      	movs	r2, #0
 8005430:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8005434:	2303      	movs	r3, #3
 8005436:	e111      	b.n	800565c <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800543c:	b29b      	uxth	r3, r3
 800543e:	2b00      	cmp	r3, #0
 8005440:	d19d      	bne.n	800537e <HAL_SPI_TransmitReceive+0x158>
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005448:	b29b      	uxth	r3, r3
 800544a:	2b00      	cmp	r3, #0
 800544c:	d197      	bne.n	800537e <HAL_SPI_TransmitReceive+0x158>
 800544e:	e0e5      	b.n	800561c <HAL_SPI_TransmitReceive+0x3f6>
>>>>>>> Stashed changes
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
<<<<<<< Updated upstream
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d003      	beq.n	8004b38 <HAL_SPI_TransmitReceive+0x23a>
 8004b30:	8afb      	ldrh	r3, [r7, #22]
 8004b32:	2b01      	cmp	r3, #1
 8004b34:	f040 80d1 	bne.w	8004cda <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004b3c:	b29b      	uxth	r3, r3
 8004b3e:	2b01      	cmp	r3, #1
 8004b40:	d912      	bls.n	8004b68 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b46:	881a      	ldrh	r2, [r3, #0]
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b52:	1c9a      	adds	r2, r3, #2
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004b5c:	b29b      	uxth	r3, r3
 8004b5e:	3b02      	subs	r3, #2
 8004b60:	b29a      	uxth	r2, r3
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004b66:	e0b8      	b.n	8004cda <HAL_SPI_TransmitReceive+0x3dc>
=======
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	685b      	ldr	r3, [r3, #4]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d003      	beq.n	8005460 <HAL_SPI_TransmitReceive+0x23a>
 8005458:	8afb      	ldrh	r3, [r7, #22]
 800545a:	2b01      	cmp	r3, #1
 800545c:	f040 80d1 	bne.w	8005602 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005464:	b29b      	uxth	r3, r3
 8005466:	2b01      	cmp	r3, #1
 8005468:	d912      	bls.n	8005490 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800546e:	881a      	ldrh	r2, [r3, #0]
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800547a:	1c9a      	adds	r2, r3, #2
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005484:	b29b      	uxth	r3, r3
 8005486:	3b02      	subs	r3, #2
 8005488:	b29a      	uxth	r2, r3
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800548e:	e0b8      	b.n	8005602 <HAL_SPI_TransmitReceive+0x3dc>
>>>>>>> Stashed changes
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
<<<<<<< Updated upstream
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	330c      	adds	r3, #12
 8004b72:	7812      	ldrb	r2, [r2, #0]
 8004b74:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b7a:	1c5a      	adds	r2, r3, #1
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004b84:	b29b      	uxth	r3, r3
 8004b86:	3b01      	subs	r3, #1
 8004b88:	b29a      	uxth	r2, r3
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	87da      	strh	r2, [r3, #62]	@ 0x3e
=======
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	330c      	adds	r3, #12
 800549a:	7812      	ldrb	r2, [r2, #0]
 800549c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054a2:	1c5a      	adds	r2, r3, #1
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80054ac:	b29b      	uxth	r3, r3
 80054ae:	3b01      	subs	r3, #1
 80054b0:	b29a      	uxth	r2, r3
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	87da      	strh	r2, [r3, #62]	@ 0x3e
>>>>>>> Stashed changes
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
<<<<<<< Updated upstream
 8004b8e:	e0a4      	b.n	8004cda <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	689b      	ldr	r3, [r3, #8]
 8004b96:	f003 0302 	and.w	r3, r3, #2
 8004b9a:	2b02      	cmp	r3, #2
 8004b9c:	d134      	bne.n	8004c08 <HAL_SPI_TransmitReceive+0x30a>
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004ba2:	b29b      	uxth	r3, r3
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d02f      	beq.n	8004c08 <HAL_SPI_TransmitReceive+0x30a>
 8004ba8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004baa:	2b01      	cmp	r3, #1
 8004bac:	d12c      	bne.n	8004c08 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004bb2:	b29b      	uxth	r3, r3
 8004bb4:	2b01      	cmp	r3, #1
 8004bb6:	d912      	bls.n	8004bde <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bbc:	881a      	ldrh	r2, [r3, #0]
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bc8:	1c9a      	adds	r2, r3, #2
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004bd2:	b29b      	uxth	r3, r3
 8004bd4:	3b02      	subs	r3, #2
 8004bd6:	b29a      	uxth	r2, r3
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004bdc:	e012      	b.n	8004c04 <HAL_SPI_TransmitReceive+0x306>
=======
 80054b6:	e0a4      	b.n	8005602 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	689b      	ldr	r3, [r3, #8]
 80054be:	f003 0302 	and.w	r3, r3, #2
 80054c2:	2b02      	cmp	r3, #2
 80054c4:	d134      	bne.n	8005530 <HAL_SPI_TransmitReceive+0x30a>
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80054ca:	b29b      	uxth	r3, r3
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d02f      	beq.n	8005530 <HAL_SPI_TransmitReceive+0x30a>
 80054d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054d2:	2b01      	cmp	r3, #1
 80054d4:	d12c      	bne.n	8005530 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80054da:	b29b      	uxth	r3, r3
 80054dc:	2b01      	cmp	r3, #1
 80054de:	d912      	bls.n	8005506 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054e4:	881a      	ldrh	r2, [r3, #0]
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054f0:	1c9a      	adds	r2, r3, #2
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80054fa:	b29b      	uxth	r3, r3
 80054fc:	3b02      	subs	r3, #2
 80054fe:	b29a      	uxth	r2, r3
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005504:	e012      	b.n	800552c <HAL_SPI_TransmitReceive+0x306>
>>>>>>> Stashed changes
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
<<<<<<< Updated upstream
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	330c      	adds	r3, #12
 8004be8:	7812      	ldrb	r2, [r2, #0]
 8004bea:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bf0:	1c5a      	adds	r2, r3, #1
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004bfa:	b29b      	uxth	r3, r3
 8004bfc:	3b01      	subs	r3, #1
 8004bfe:	b29a      	uxth	r2, r3
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004c04:	2300      	movs	r3, #0
 8004c06:	627b      	str	r3, [r7, #36]	@ 0x24
=======
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	330c      	adds	r3, #12
 8005510:	7812      	ldrb	r2, [r2, #0]
 8005512:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005518:	1c5a      	adds	r2, r3, #1
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005522:	b29b      	uxth	r3, r3
 8005524:	3b01      	subs	r3, #1
 8005526:	b29a      	uxth	r2, r3
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800552c:	2300      	movs	r3, #0
 800552e:	627b      	str	r3, [r7, #36]	@ 0x24
>>>>>>> Stashed changes
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
<<<<<<< Updated upstream
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	689b      	ldr	r3, [r3, #8]
 8004c0e:	f003 0301 	and.w	r3, r3, #1
 8004c12:	2b01      	cmp	r3, #1
 8004c14:	d148      	bne.n	8004ca8 <HAL_SPI_TransmitReceive+0x3aa>
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004c1c:	b29b      	uxth	r3, r3
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d042      	beq.n	8004ca8 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004c28:	b29b      	uxth	r3, r3
 8004c2a:	2b01      	cmp	r3, #1
 8004c2c:	d923      	bls.n	8004c76 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	68da      	ldr	r2, [r3, #12]
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c38:	b292      	uxth	r2, r2
 8004c3a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c40:	1c9a      	adds	r2, r3, #2
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004c4c:	b29b      	uxth	r3, r3
 8004c4e:	3b02      	subs	r3, #2
 8004c50:	b29a      	uxth	r2, r3
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004c5e:	b29b      	uxth	r3, r3
 8004c60:	2b01      	cmp	r3, #1
 8004c62:	d81f      	bhi.n	8004ca4 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	685a      	ldr	r2, [r3, #4]
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004c72:	605a      	str	r2, [r3, #4]
 8004c74:	e016      	b.n	8004ca4 <HAL_SPI_TransmitReceive+0x3a6>
=======
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	689b      	ldr	r3, [r3, #8]
 8005536:	f003 0301 	and.w	r3, r3, #1
 800553a:	2b01      	cmp	r3, #1
 800553c:	d148      	bne.n	80055d0 <HAL_SPI_TransmitReceive+0x3aa>
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005544:	b29b      	uxth	r3, r3
 8005546:	2b00      	cmp	r3, #0
 8005548:	d042      	beq.n	80055d0 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005550:	b29b      	uxth	r3, r3
 8005552:	2b01      	cmp	r3, #1
 8005554:	d923      	bls.n	800559e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	68da      	ldr	r2, [r3, #12]
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005560:	b292      	uxth	r2, r2
 8005562:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005568:	1c9a      	adds	r2, r3, #2
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005574:	b29b      	uxth	r3, r3
 8005576:	3b02      	subs	r3, #2
 8005578:	b29a      	uxth	r2, r3
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005586:	b29b      	uxth	r3, r3
 8005588:	2b01      	cmp	r3, #1
 800558a:	d81f      	bhi.n	80055cc <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	685a      	ldr	r2, [r3, #4]
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800559a:	605a      	str	r2, [r3, #4]
 800559c:	e016      	b.n	80055cc <HAL_SPI_TransmitReceive+0x3a6>
>>>>>>> Stashed changes
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
<<<<<<< Updated upstream
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f103 020c 	add.w	r2, r3, #12
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c82:	7812      	ldrb	r2, [r2, #0]
 8004c84:	b2d2      	uxtb	r2, r2
 8004c86:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c8c:	1c5a      	adds	r2, r3, #1
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004c98:	b29b      	uxth	r3, r3
 8004c9a:	3b01      	subs	r3, #1
 8004c9c:	b29a      	uxth	r2, r3
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004ca8:	f7fd fda0 	bl	80027ec <HAL_GetTick>
 8004cac:	4602      	mov	r2, r0
 8004cae:	6a3b      	ldr	r3, [r7, #32]
 8004cb0:	1ad3      	subs	r3, r2, r3
 8004cb2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004cb4:	429a      	cmp	r2, r3
 8004cb6:	d803      	bhi.n	8004cc0 <HAL_SPI_TransmitReceive+0x3c2>
 8004cb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cbe:	d102      	bne.n	8004cc6 <HAL_SPI_TransmitReceive+0x3c8>
 8004cc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d109      	bne.n	8004cda <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	2201      	movs	r2, #1
 8004cca:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8004cd6:	2303      	movs	r3, #3
 8004cd8:	e02c      	b.n	8004d34 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004cde:	b29b      	uxth	r3, r3
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	f47f af55 	bne.w	8004b90 <HAL_SPI_TransmitReceive+0x292>
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004cec:	b29b      	uxth	r3, r3
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	f47f af4e 	bne.w	8004b90 <HAL_SPI_TransmitReceive+0x292>
=======
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f103 020c 	add.w	r2, r3, #12
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055aa:	7812      	ldrb	r2, [r2, #0]
 80055ac:	b2d2      	uxtb	r2, r2
 80055ae:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055b4:	1c5a      	adds	r2, r3, #1
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80055c0:	b29b      	uxth	r3, r3
 80055c2:	3b01      	subs	r3, #1
 80055c4:	b29a      	uxth	r2, r3
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80055cc:	2301      	movs	r3, #1
 80055ce:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80055d0:	f7fd f93a 	bl	8002848 <HAL_GetTick>
 80055d4:	4602      	mov	r2, r0
 80055d6:	6a3b      	ldr	r3, [r7, #32]
 80055d8:	1ad3      	subs	r3, r2, r3
 80055da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80055dc:	429a      	cmp	r2, r3
 80055de:	d803      	bhi.n	80055e8 <HAL_SPI_TransmitReceive+0x3c2>
 80055e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055e6:	d102      	bne.n	80055ee <HAL_SPI_TransmitReceive+0x3c8>
 80055e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d109      	bne.n	8005602 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	2201      	movs	r2, #1
 80055f2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	2200      	movs	r2, #0
 80055fa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 80055fe:	2303      	movs	r3, #3
 8005600:	e02c      	b.n	800565c <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005606:	b29b      	uxth	r3, r3
 8005608:	2b00      	cmp	r3, #0
 800560a:	f47f af55 	bne.w	80054b8 <HAL_SPI_TransmitReceive+0x292>
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005614:	b29b      	uxth	r3, r3
 8005616:	2b00      	cmp	r3, #0
 8005618:	f47f af4e 	bne.w	80054b8 <HAL_SPI_TransmitReceive+0x292>
>>>>>>> Stashed changes
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
<<<<<<< Updated upstream
 8004cf4:	6a3a      	ldr	r2, [r7, #32]
 8004cf6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004cf8:	68f8      	ldr	r0, [r7, #12]
 8004cfa:	f000 f93d 	bl	8004f78 <SPI_EndRxTxTransaction>
 8004cfe:	4603      	mov	r3, r0
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d008      	beq.n	8004d16 <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	2220      	movs	r2, #32
 8004d08:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8004d12:	2301      	movs	r3, #1
 8004d14:	e00e      	b.n	8004d34 <HAL_SPI_TransmitReceive+0x436>
=======
 800561c:	6a3a      	ldr	r2, [r7, #32]
 800561e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005620:	68f8      	ldr	r0, [r7, #12]
 8005622:	f000 f93d 	bl	80058a0 <SPI_EndRxTxTransaction>
 8005626:	4603      	mov	r3, r0
 8005628:	2b00      	cmp	r3, #0
 800562a:	d008      	beq.n	800563e <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	2220      	movs	r2, #32
 8005630:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	2200      	movs	r2, #0
 8005636:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 800563a:	2301      	movs	r3, #1
 800563c:	e00e      	b.n	800565c <HAL_SPI_TransmitReceive+0x436>
>>>>>>> Stashed changes
  }


  hspi->State = HAL_SPI_STATE_READY;
<<<<<<< Updated upstream
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	2201      	movs	r2, #1
 8004d1a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	2200      	movs	r2, #0
 8004d22:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d001      	beq.n	8004d32 <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8004d2e:	2301      	movs	r3, #1
 8004d30:	e000      	b.n	8004d34 <HAL_SPI_TransmitReceive+0x436>
=======
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	2201      	movs	r2, #1
 8005642:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	2200      	movs	r2, #0
 800564a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005652:	2b00      	cmp	r3, #0
 8005654:	d001      	beq.n	800565a <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8005656:	2301      	movs	r3, #1
 8005658:	e000      	b.n	800565c <HAL_SPI_TransmitReceive+0x436>
>>>>>>> Stashed changes
  }
  else
  {
    return HAL_OK;
<<<<<<< Updated upstream
 8004d32:	2300      	movs	r3, #0
  }
}
 8004d34:	4618      	mov	r0, r3
 8004d36:	3728      	adds	r7, #40	@ 0x28
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	bd80      	pop	{r7, pc}

08004d3c <SPI_WaitFlagStateUntilTimeout>:
=======
 800565a:	2300      	movs	r3, #0
  }
}
 800565c:	4618      	mov	r0, r3
 800565e:	3728      	adds	r7, #40	@ 0x28
 8005660:	46bd      	mov	sp, r7
 8005662:	bd80      	pop	{r7, pc}

08005664 <SPI_WaitFlagStateUntilTimeout>:
>>>>>>> Stashed changes
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
<<<<<<< Updated upstream
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b088      	sub	sp, #32
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	60f8      	str	r0, [r7, #12]
 8004d44:	60b9      	str	r1, [r7, #8]
 8004d46:	603b      	str	r3, [r7, #0]
 8004d48:	4613      	mov	r3, r2
 8004d4a:	71fb      	strb	r3, [r7, #7]
=======
 8005664:	b580      	push	{r7, lr}
 8005666:	b088      	sub	sp, #32
 8005668:	af00      	add	r7, sp, #0
 800566a:	60f8      	str	r0, [r7, #12]
 800566c:	60b9      	str	r1, [r7, #8]
 800566e:	603b      	str	r3, [r7, #0]
 8005670:	4613      	mov	r3, r2
 8005672:	71fb      	strb	r3, [r7, #7]
>>>>>>> Stashed changes
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
<<<<<<< Updated upstream
 8004d4c:	f7fd fd4e 	bl	80027ec <HAL_GetTick>
 8004d50:	4602      	mov	r2, r0
 8004d52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d54:	1a9b      	subs	r3, r3, r2
 8004d56:	683a      	ldr	r2, [r7, #0]
 8004d58:	4413      	add	r3, r2
 8004d5a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004d5c:	f7fd fd46 	bl	80027ec <HAL_GetTick>
 8004d60:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004d62:	4b39      	ldr	r3, [pc, #228]	@ (8004e48 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	015b      	lsls	r3, r3, #5
 8004d68:	0d1b      	lsrs	r3, r3, #20
 8004d6a:	69fa      	ldr	r2, [r7, #28]
 8004d6c:	fb02 f303 	mul.w	r3, r2, r3
 8004d70:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004d72:	e054      	b.n	8004e1e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d7a:	d050      	beq.n	8004e1e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004d7c:	f7fd fd36 	bl	80027ec <HAL_GetTick>
 8004d80:	4602      	mov	r2, r0
 8004d82:	69bb      	ldr	r3, [r7, #24]
 8004d84:	1ad3      	subs	r3, r2, r3
 8004d86:	69fa      	ldr	r2, [r7, #28]
 8004d88:	429a      	cmp	r2, r3
 8004d8a:	d902      	bls.n	8004d92 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004d8c:	69fb      	ldr	r3, [r7, #28]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d13d      	bne.n	8004e0e <SPI_WaitFlagStateUntilTimeout+0xd2>
=======
 8005674:	f7fd f8e8 	bl	8002848 <HAL_GetTick>
 8005678:	4602      	mov	r2, r0
 800567a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800567c:	1a9b      	subs	r3, r3, r2
 800567e:	683a      	ldr	r2, [r7, #0]
 8005680:	4413      	add	r3, r2
 8005682:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005684:	f7fd f8e0 	bl	8002848 <HAL_GetTick>
 8005688:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800568a:	4b39      	ldr	r3, [pc, #228]	@ (8005770 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	015b      	lsls	r3, r3, #5
 8005690:	0d1b      	lsrs	r3, r3, #20
 8005692:	69fa      	ldr	r2, [r7, #28]
 8005694:	fb02 f303 	mul.w	r3, r2, r3
 8005698:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800569a:	e054      	b.n	8005746 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056a2:	d050      	beq.n	8005746 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80056a4:	f7fd f8d0 	bl	8002848 <HAL_GetTick>
 80056a8:	4602      	mov	r2, r0
 80056aa:	69bb      	ldr	r3, [r7, #24]
 80056ac:	1ad3      	subs	r3, r2, r3
 80056ae:	69fa      	ldr	r2, [r7, #28]
 80056b0:	429a      	cmp	r2, r3
 80056b2:	d902      	bls.n	80056ba <SPI_WaitFlagStateUntilTimeout+0x56>
 80056b4:	69fb      	ldr	r3, [r7, #28]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d13d      	bne.n	8005736 <SPI_WaitFlagStateUntilTimeout+0xd2>
>>>>>>> Stashed changes
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
<<<<<<< Updated upstream
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	685a      	ldr	r2, [r3, #4]
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004da0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004daa:	d111      	bne.n	8004dd0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	689b      	ldr	r3, [r3, #8]
 8004db0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004db4:	d004      	beq.n	8004dc0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	689b      	ldr	r3, [r3, #8]
 8004dba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004dbe:	d107      	bne.n	8004dd0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	681a      	ldr	r2, [r3, #0]
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004dce:	601a      	str	r2, [r3, #0]
=======
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	685a      	ldr	r2, [r3, #4]
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80056c8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	685b      	ldr	r3, [r3, #4]
 80056ce:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80056d2:	d111      	bne.n	80056f8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	689b      	ldr	r3, [r3, #8]
 80056d8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80056dc:	d004      	beq.n	80056e8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	689b      	ldr	r3, [r3, #8]
 80056e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80056e6:	d107      	bne.n	80056f8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	681a      	ldr	r2, [r3, #0]
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80056f6:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
<<<<<<< Updated upstream
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dd4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004dd8:	d10f      	bne.n	8004dfa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	681a      	ldr	r2, [r3, #0]
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004de8:	601a      	str	r2, [r3, #0]
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	681a      	ldr	r2, [r3, #0]
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004df8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	2201      	movs	r2, #1
 8004dfe:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	2200      	movs	r2, #0
 8004e06:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004e0a:	2303      	movs	r3, #3
 8004e0c:	e017      	b.n	8004e3e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d101      	bne.n	8004e18 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004e14:	2300      	movs	r3, #0
 8004e16:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004e18:	697b      	ldr	r3, [r7, #20]
 8004e1a:	3b01      	subs	r3, #1
 8004e1c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	689a      	ldr	r2, [r3, #8]
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	4013      	ands	r3, r2
 8004e28:	68ba      	ldr	r2, [r7, #8]
 8004e2a:	429a      	cmp	r2, r3
 8004e2c:	bf0c      	ite	eq
 8004e2e:	2301      	moveq	r3, #1
 8004e30:	2300      	movne	r3, #0
 8004e32:	b2db      	uxtb	r3, r3
 8004e34:	461a      	mov	r2, r3
 8004e36:	79fb      	ldrb	r3, [r7, #7]
 8004e38:	429a      	cmp	r2, r3
 8004e3a:	d19b      	bne.n	8004d74 <SPI_WaitFlagStateUntilTimeout+0x38>
=======
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056fc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005700:	d10f      	bne.n	8005722 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	681a      	ldr	r2, [r3, #0]
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005710:	601a      	str	r2, [r3, #0]
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	681a      	ldr	r2, [r3, #0]
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005720:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	2201      	movs	r2, #1
 8005726:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	2200      	movs	r2, #0
 800572e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8005732:	2303      	movs	r3, #3
 8005734:	e017      	b.n	8005766 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005736:	697b      	ldr	r3, [r7, #20]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d101      	bne.n	8005740 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800573c:	2300      	movs	r3, #0
 800573e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005740:	697b      	ldr	r3, [r7, #20]
 8005742:	3b01      	subs	r3, #1
 8005744:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	689a      	ldr	r2, [r3, #8]
 800574c:	68bb      	ldr	r3, [r7, #8]
 800574e:	4013      	ands	r3, r2
 8005750:	68ba      	ldr	r2, [r7, #8]
 8005752:	429a      	cmp	r2, r3
 8005754:	bf0c      	ite	eq
 8005756:	2301      	moveq	r3, #1
 8005758:	2300      	movne	r3, #0
 800575a:	b2db      	uxtb	r3, r3
 800575c:	461a      	mov	r2, r3
 800575e:	79fb      	ldrb	r3, [r7, #7]
 8005760:	429a      	cmp	r2, r3
 8005762:	d19b      	bne.n	800569c <SPI_WaitFlagStateUntilTimeout+0x38>
>>>>>>> Stashed changes
    }
  }

  return HAL_OK;
<<<<<<< Updated upstream
 8004e3c:	2300      	movs	r3, #0
}
 8004e3e:	4618      	mov	r0, r3
 8004e40:	3720      	adds	r7, #32
 8004e42:	46bd      	mov	sp, r7
 8004e44:	bd80      	pop	{r7, pc}
 8004e46:	bf00      	nop
 8004e48:	2000000c 	.word	0x2000000c

08004e4c <SPI_WaitFifoStateUntilTimeout>:
=======
 8005764:	2300      	movs	r3, #0
}
 8005766:	4618      	mov	r0, r3
 8005768:	3720      	adds	r7, #32
 800576a:	46bd      	mov	sp, r7
 800576c:	bd80      	pop	{r7, pc}
 800576e:	bf00      	nop
 8005770:	2000000c 	.word	0x2000000c

08005774 <SPI_WaitFifoStateUntilTimeout>:
>>>>>>> Stashed changes
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
<<<<<<< Updated upstream
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b08a      	sub	sp, #40	@ 0x28
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	60f8      	str	r0, [r7, #12]
 8004e54:	60b9      	str	r1, [r7, #8]
 8004e56:	607a      	str	r2, [r7, #4]
 8004e58:	603b      	str	r3, [r7, #0]
=======
 8005774:	b580      	push	{r7, lr}
 8005776:	b08a      	sub	sp, #40	@ 0x28
 8005778:	af00      	add	r7, sp, #0
 800577a:	60f8      	str	r0, [r7, #12]
 800577c:	60b9      	str	r1, [r7, #8]
 800577e:	607a      	str	r2, [r7, #4]
 8005780:	603b      	str	r3, [r7, #0]
>>>>>>> Stashed changes
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
<<<<<<< Updated upstream
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004e5e:	f7fd fcc5 	bl	80027ec <HAL_GetTick>
 8004e62:	4602      	mov	r2, r0
 8004e64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e66:	1a9b      	subs	r3, r3, r2
 8004e68:	683a      	ldr	r2, [r7, #0]
 8004e6a:	4413      	add	r3, r2
 8004e6c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8004e6e:	f7fd fcbd 	bl	80027ec <HAL_GetTick>
 8004e72:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	330c      	adds	r3, #12
 8004e7a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004e7c:	4b3d      	ldr	r3, [pc, #244]	@ (8004f74 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004e7e:	681a      	ldr	r2, [r3, #0]
 8004e80:	4613      	mov	r3, r2
 8004e82:	009b      	lsls	r3, r3, #2
 8004e84:	4413      	add	r3, r2
 8004e86:	00da      	lsls	r2, r3, #3
 8004e88:	1ad3      	subs	r3, r2, r3
 8004e8a:	0d1b      	lsrs	r3, r3, #20
 8004e8c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e8e:	fb02 f303 	mul.w	r3, r2, r3
 8004e92:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004e94:	e060      	b.n	8004f58 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004e96:	68bb      	ldr	r3, [r7, #8]
 8004e98:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004e9c:	d107      	bne.n	8004eae <SPI_WaitFifoStateUntilTimeout+0x62>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d104      	bne.n	8004eae <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004ea4:	69fb      	ldr	r3, [r7, #28]
 8004ea6:	781b      	ldrb	r3, [r3, #0]
 8004ea8:	b2db      	uxtb	r3, r3
 8004eaa:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004eac:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eb4:	d050      	beq.n	8004f58 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004eb6:	f7fd fc99 	bl	80027ec <HAL_GetTick>
 8004eba:	4602      	mov	r2, r0
 8004ebc:	6a3b      	ldr	r3, [r7, #32]
 8004ebe:	1ad3      	subs	r3, r2, r3
 8004ec0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ec2:	429a      	cmp	r2, r3
 8004ec4:	d902      	bls.n	8004ecc <SPI_WaitFifoStateUntilTimeout+0x80>
 8004ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d13d      	bne.n	8004f48 <SPI_WaitFifoStateUntilTimeout+0xfc>
=======
 8005782:	2300      	movs	r3, #0
 8005784:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005786:	f7fd f85f 	bl	8002848 <HAL_GetTick>
 800578a:	4602      	mov	r2, r0
 800578c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800578e:	1a9b      	subs	r3, r3, r2
 8005790:	683a      	ldr	r2, [r7, #0]
 8005792:	4413      	add	r3, r2
 8005794:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8005796:	f7fd f857 	bl	8002848 <HAL_GetTick>
 800579a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	330c      	adds	r3, #12
 80057a2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80057a4:	4b3d      	ldr	r3, [pc, #244]	@ (800589c <SPI_WaitFifoStateUntilTimeout+0x128>)
 80057a6:	681a      	ldr	r2, [r3, #0]
 80057a8:	4613      	mov	r3, r2
 80057aa:	009b      	lsls	r3, r3, #2
 80057ac:	4413      	add	r3, r2
 80057ae:	00da      	lsls	r2, r3, #3
 80057b0:	1ad3      	subs	r3, r2, r3
 80057b2:	0d1b      	lsrs	r3, r3, #20
 80057b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80057b6:	fb02 f303 	mul.w	r3, r2, r3
 80057ba:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80057bc:	e060      	b.n	8005880 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80057be:	68bb      	ldr	r3, [r7, #8]
 80057c0:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80057c4:	d107      	bne.n	80057d6 <SPI_WaitFifoStateUntilTimeout+0x62>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d104      	bne.n	80057d6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80057cc:	69fb      	ldr	r3, [r7, #28]
 80057ce:	781b      	ldrb	r3, [r3, #0]
 80057d0:	b2db      	uxtb	r3, r3
 80057d2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80057d4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057dc:	d050      	beq.n	8005880 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80057de:	f7fd f833 	bl	8002848 <HAL_GetTick>
 80057e2:	4602      	mov	r2, r0
 80057e4:	6a3b      	ldr	r3, [r7, #32]
 80057e6:	1ad3      	subs	r3, r2, r3
 80057e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80057ea:	429a      	cmp	r2, r3
 80057ec:	d902      	bls.n	80057f4 <SPI_WaitFifoStateUntilTimeout+0x80>
 80057ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d13d      	bne.n	8005870 <SPI_WaitFifoStateUntilTimeout+0xfc>
>>>>>>> Stashed changes
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
<<<<<<< Updated upstream
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	685a      	ldr	r2, [r3, #4]
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004eda:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	685b      	ldr	r3, [r3, #4]
 8004ee0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004ee4:	d111      	bne.n	8004f0a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	689b      	ldr	r3, [r3, #8]
 8004eea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004eee:	d004      	beq.n	8004efa <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	689b      	ldr	r3, [r3, #8]
 8004ef4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ef8:	d107      	bne.n	8004f0a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	681a      	ldr	r2, [r3, #0]
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004f08:	601a      	str	r2, [r3, #0]
=======
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	685a      	ldr	r2, [r3, #4]
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005802:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	685b      	ldr	r3, [r3, #4]
 8005808:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800580c:	d111      	bne.n	8005832 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	689b      	ldr	r3, [r3, #8]
 8005812:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005816:	d004      	beq.n	8005822 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	689b      	ldr	r3, [r3, #8]
 800581c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005820:	d107      	bne.n	8005832 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	681a      	ldr	r2, [r3, #0]
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005830:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
<<<<<<< Updated upstream
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f0e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004f12:	d10f      	bne.n	8004f34 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	681a      	ldr	r2, [r3, #0]
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004f22:	601a      	str	r2, [r3, #0]
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	681a      	ldr	r2, [r3, #0]
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004f32:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	2201      	movs	r2, #1
 8004f38:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	2200      	movs	r2, #0
 8004f40:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004f44:	2303      	movs	r3, #3
 8004f46:	e010      	b.n	8004f6a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004f48:	69bb      	ldr	r3, [r7, #24]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d101      	bne.n	8004f52 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004f4e:	2300      	movs	r3, #0
 8004f50:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8004f52:	69bb      	ldr	r3, [r7, #24]
 8004f54:	3b01      	subs	r3, #1
 8004f56:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	689a      	ldr	r2, [r3, #8]
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	4013      	ands	r3, r2
 8004f62:	687a      	ldr	r2, [r7, #4]
 8004f64:	429a      	cmp	r2, r3
 8004f66:	d196      	bne.n	8004e96 <SPI_WaitFifoStateUntilTimeout+0x4a>
=======
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005836:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800583a:	d10f      	bne.n	800585c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	681a      	ldr	r2, [r3, #0]
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800584a:	601a      	str	r2, [r3, #0]
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	681a      	ldr	r2, [r3, #0]
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800585a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	2201      	movs	r2, #1
 8005860:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	2200      	movs	r2, #0
 8005868:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800586c:	2303      	movs	r3, #3
 800586e:	e010      	b.n	8005892 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005870:	69bb      	ldr	r3, [r7, #24]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d101      	bne.n	800587a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005876:	2300      	movs	r3, #0
 8005878:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800587a:	69bb      	ldr	r3, [r7, #24]
 800587c:	3b01      	subs	r3, #1
 800587e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	689a      	ldr	r2, [r3, #8]
 8005886:	68bb      	ldr	r3, [r7, #8]
 8005888:	4013      	ands	r3, r2
 800588a:	687a      	ldr	r2, [r7, #4]
 800588c:	429a      	cmp	r2, r3
 800588e:	d196      	bne.n	80057be <SPI_WaitFifoStateUntilTimeout+0x4a>
>>>>>>> Stashed changes
    }
  }

  return HAL_OK;
<<<<<<< Updated upstream
 8004f68:	2300      	movs	r3, #0
}
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	3728      	adds	r7, #40	@ 0x28
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bd80      	pop	{r7, pc}
 8004f72:	bf00      	nop
 8004f74:	2000000c 	.word	0x2000000c

08004f78 <SPI_EndRxTxTransaction>:
=======
 8005890:	2300      	movs	r3, #0
}
 8005892:	4618      	mov	r0, r3
 8005894:	3728      	adds	r7, #40	@ 0x28
 8005896:	46bd      	mov	sp, r7
 8005898:	bd80      	pop	{r7, pc}
 800589a:	bf00      	nop
 800589c:	2000000c 	.word	0x2000000c

080058a0 <SPI_EndRxTxTransaction>:
>>>>>>> Stashed changes
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
<<<<<<< Updated upstream
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b086      	sub	sp, #24
 8004f7c:	af02      	add	r7, sp, #8
 8004f7e:	60f8      	str	r0, [r7, #12]
 8004f80:	60b9      	str	r1, [r7, #8]
 8004f82:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	9300      	str	r3, [sp, #0]
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8004f90:	68f8      	ldr	r0, [r7, #12]
 8004f92:	f7ff ff5b 	bl	8004e4c <SPI_WaitFifoStateUntilTimeout>
 8004f96:	4603      	mov	r3, r0
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d007      	beq.n	8004fac <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004fa0:	f043 0220 	orr.w	r2, r3, #32
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004fa8:	2303      	movs	r3, #3
 8004faa:	e027      	b.n	8004ffc <SPI_EndRxTxTransaction+0x84>
=======
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b086      	sub	sp, #24
 80058a4:	af02      	add	r7, sp, #8
 80058a6:	60f8      	str	r0, [r7, #12]
 80058a8:	60b9      	str	r1, [r7, #8]
 80058aa:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	9300      	str	r3, [sp, #0]
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	2200      	movs	r2, #0
 80058b4:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80058b8:	68f8      	ldr	r0, [r7, #12]
 80058ba:	f7ff ff5b 	bl	8005774 <SPI_WaitFifoStateUntilTimeout>
 80058be:	4603      	mov	r3, r0
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d007      	beq.n	80058d4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80058c8:	f043 0220 	orr.w	r2, r3, #32
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80058d0:	2303      	movs	r3, #3
 80058d2:	e027      	b.n	8005924 <SPI_EndRxTxTransaction+0x84>
>>>>>>> Stashed changes
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
<<<<<<< Updated upstream
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	9300      	str	r3, [sp, #0]
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	2180      	movs	r1, #128	@ 0x80
 8004fb6:	68f8      	ldr	r0, [r7, #12]
 8004fb8:	f7ff fec0 	bl	8004d3c <SPI_WaitFlagStateUntilTimeout>
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d007      	beq.n	8004fd2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004fc6:	f043 0220 	orr.w	r2, r3, #32
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004fce:	2303      	movs	r3, #3
 8004fd0:	e014      	b.n	8004ffc <SPI_EndRxTxTransaction+0x84>
=======
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	9300      	str	r3, [sp, #0]
 80058d8:	68bb      	ldr	r3, [r7, #8]
 80058da:	2200      	movs	r2, #0
 80058dc:	2180      	movs	r1, #128	@ 0x80
 80058de:	68f8      	ldr	r0, [r7, #12]
 80058e0:	f7ff fec0 	bl	8005664 <SPI_WaitFlagStateUntilTimeout>
 80058e4:	4603      	mov	r3, r0
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d007      	beq.n	80058fa <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80058ee:	f043 0220 	orr.w	r2, r3, #32
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80058f6:	2303      	movs	r3, #3
 80058f8:	e014      	b.n	8005924 <SPI_EndRxTxTransaction+0x84>
>>>>>>> Stashed changes
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
<<<<<<< Updated upstream
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	9300      	str	r3, [sp, #0]
 8004fd6:	68bb      	ldr	r3, [r7, #8]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8004fde:	68f8      	ldr	r0, [r7, #12]
 8004fe0:	f7ff ff34 	bl	8004e4c <SPI_WaitFifoStateUntilTimeout>
 8004fe4:	4603      	mov	r3, r0
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d007      	beq.n	8004ffa <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004fee:	f043 0220 	orr.w	r2, r3, #32
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004ff6:	2303      	movs	r3, #3
 8004ff8:	e000      	b.n	8004ffc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004ffa:	2300      	movs	r3, #0
}
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	3710      	adds	r7, #16
 8005000:	46bd      	mov	sp, r7
 8005002:	bd80      	pop	{r7, pc}

08005004 <HAL_TIM_Base_Init>:
=======
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	9300      	str	r3, [sp, #0]
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	2200      	movs	r2, #0
 8005902:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8005906:	68f8      	ldr	r0, [r7, #12]
 8005908:	f7ff ff34 	bl	8005774 <SPI_WaitFifoStateUntilTimeout>
 800590c:	4603      	mov	r3, r0
 800590e:	2b00      	cmp	r3, #0
 8005910:	d007      	beq.n	8005922 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005916:	f043 0220 	orr.w	r2, r3, #32
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800591e:	2303      	movs	r3, #3
 8005920:	e000      	b.n	8005924 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005922:	2300      	movs	r3, #0
}
 8005924:	4618      	mov	r0, r3
 8005926:	3710      	adds	r7, #16
 8005928:	46bd      	mov	sp, r7
 800592a:	bd80      	pop	{r7, pc}

0800592c <HAL_TIM_Base_Init>:
>>>>>>> Stashed changes
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 8005004:	b580      	push	{r7, lr}
 8005006:	b082      	sub	sp, #8
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d101      	bne.n	8005016 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005012:	2301      	movs	r3, #1
 8005014:	e049      	b.n	80050aa <HAL_TIM_Base_Init+0xa6>
=======
 800592c:	b580      	push	{r7, lr}
 800592e:	b082      	sub	sp, #8
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d101      	bne.n	800593e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800593a:	2301      	movs	r3, #1
 800593c:	e049      	b.n	80059d2 <HAL_TIM_Base_Init+0xa6>
>>>>>>> Stashed changes
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
<<<<<<< Updated upstream
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800501c:	b2db      	uxtb	r3, r3
 800501e:	2b00      	cmp	r3, #0
 8005020:	d106      	bne.n	8005030 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2200      	movs	r2, #0
 8005026:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
=======
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005944:	b2db      	uxtb	r3, r3
 8005946:	2b00      	cmp	r3, #0
 8005948:	d106      	bne.n	8005958 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2200      	movs	r2, #0
 800594e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
>>>>>>> Stashed changes
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
<<<<<<< Updated upstream
 800502a:	6878      	ldr	r0, [r7, #4]
 800502c:	f7fd f8ee 	bl	800220c <HAL_TIM_Base_MspInit>
=======
 8005952:	6878      	ldr	r0, [r7, #4]
 8005954:	f7fc fca0 	bl	8002298 <HAL_TIM_Base_MspInit>
>>>>>>> Stashed changes
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
<<<<<<< Updated upstream
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2202      	movs	r2, #2
 8005034:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681a      	ldr	r2, [r3, #0]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	3304      	adds	r3, #4
 8005040:	4619      	mov	r1, r3
 8005042:	4610      	mov	r0, r2
 8005044:	f000 fde0 	bl	8005c08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2201      	movs	r2, #1
 800504c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2201      	movs	r2, #1
 8005054:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2201      	movs	r2, #1
 800505c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2201      	movs	r2, #1
 8005064:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2201      	movs	r2, #1
 800506c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2201      	movs	r2, #1
 8005074:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2201      	movs	r2, #1
 800507c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2201      	movs	r2, #1
 8005084:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2201      	movs	r2, #1
 800508c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2201      	movs	r2, #1
 8005094:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2201      	movs	r2, #1
 800509c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2201      	movs	r2, #1
 80050a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80050a8:	2300      	movs	r3, #0
}
 80050aa:	4618      	mov	r0, r3
 80050ac:	3708      	adds	r7, #8
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bd80      	pop	{r7, pc}
	...

080050b4 <HAL_TIM_Base_Start_IT>:
=======
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2202      	movs	r2, #2
 800595c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681a      	ldr	r2, [r3, #0]
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	3304      	adds	r3, #4
 8005968:	4619      	mov	r1, r3
 800596a:	4610      	mov	r0, r2
 800596c:	f000 fc76 	bl	800625c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2201      	movs	r2, #1
 8005974:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2201      	movs	r2, #1
 800597c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2201      	movs	r2, #1
 8005984:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2201      	movs	r2, #1
 800598c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2201      	movs	r2, #1
 8005994:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2201      	movs	r2, #1
 800599c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2201      	movs	r2, #1
 80059a4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2201      	movs	r2, #1
 80059ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2201      	movs	r2, #1
 80059b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2201      	movs	r2, #1
 80059bc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2201      	movs	r2, #1
 80059c4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2201      	movs	r2, #1
 80059cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80059d0:	2300      	movs	r3, #0
}
 80059d2:	4618      	mov	r0, r3
 80059d4:	3708      	adds	r7, #8
 80059d6:	46bd      	mov	sp, r7
 80059d8:	bd80      	pop	{r7, pc}
	...

080059dc <HAL_TIM_Base_Start_IT>:
>>>>>>> Stashed changes
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 80050b4:	b480      	push	{r7}
 80050b6:	b085      	sub	sp, #20
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
=======
 80059dc:	b480      	push	{r7}
 80059de:	b085      	sub	sp, #20
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
<<<<<<< Updated upstream
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80050c2:	b2db      	uxtb	r3, r3
 80050c4:	2b01      	cmp	r3, #1
 80050c6:	d001      	beq.n	80050cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80050c8:	2301      	movs	r3, #1
 80050ca:	e04f      	b.n	800516c <HAL_TIM_Base_Start_IT+0xb8>
=======
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80059ea:	b2db      	uxtb	r3, r3
 80059ec:	2b01      	cmp	r3, #1
 80059ee:	d001      	beq.n	80059f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80059f0:	2301      	movs	r3, #1
 80059f2:	e04f      	b.n	8005a94 <HAL_TIM_Base_Start_IT+0xb8>
>>>>>>> Stashed changes
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
<<<<<<< Updated upstream
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2202      	movs	r2, #2
 80050d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	68da      	ldr	r2, [r3, #12]
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f042 0201 	orr.w	r2, r2, #1
 80050e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4a23      	ldr	r2, [pc, #140]	@ (8005178 <HAL_TIM_Base_Start_IT+0xc4>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d01d      	beq.n	800512a <HAL_TIM_Base_Start_IT+0x76>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050f6:	d018      	beq.n	800512a <HAL_TIM_Base_Start_IT+0x76>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	4a1f      	ldr	r2, [pc, #124]	@ (800517c <HAL_TIM_Base_Start_IT+0xc8>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d013      	beq.n	800512a <HAL_TIM_Base_Start_IT+0x76>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	4a1e      	ldr	r2, [pc, #120]	@ (8005180 <HAL_TIM_Base_Start_IT+0xcc>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d00e      	beq.n	800512a <HAL_TIM_Base_Start_IT+0x76>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4a1c      	ldr	r2, [pc, #112]	@ (8005184 <HAL_TIM_Base_Start_IT+0xd0>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d009      	beq.n	800512a <HAL_TIM_Base_Start_IT+0x76>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4a1b      	ldr	r2, [pc, #108]	@ (8005188 <HAL_TIM_Base_Start_IT+0xd4>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d004      	beq.n	800512a <HAL_TIM_Base_Start_IT+0x76>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	4a19      	ldr	r2, [pc, #100]	@ (800518c <HAL_TIM_Base_Start_IT+0xd8>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d115      	bne.n	8005156 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	689a      	ldr	r2, [r3, #8]
 8005130:	4b17      	ldr	r3, [pc, #92]	@ (8005190 <HAL_TIM_Base_Start_IT+0xdc>)
 8005132:	4013      	ands	r3, r2
 8005134:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	2b06      	cmp	r3, #6
 800513a:	d015      	beq.n	8005168 <HAL_TIM_Base_Start_IT+0xb4>
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005142:	d011      	beq.n	8005168 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	681a      	ldr	r2, [r3, #0]
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f042 0201 	orr.w	r2, r2, #1
 8005152:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005154:	e008      	b.n	8005168 <HAL_TIM_Base_Start_IT+0xb4>
=======
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2202      	movs	r2, #2
 80059f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	68da      	ldr	r2, [r3, #12]
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f042 0201 	orr.w	r2, r2, #1
 8005a0a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	4a23      	ldr	r2, [pc, #140]	@ (8005aa0 <HAL_TIM_Base_Start_IT+0xc4>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d01d      	beq.n	8005a52 <HAL_TIM_Base_Start_IT+0x76>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a1e:	d018      	beq.n	8005a52 <HAL_TIM_Base_Start_IT+0x76>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4a1f      	ldr	r2, [pc, #124]	@ (8005aa4 <HAL_TIM_Base_Start_IT+0xc8>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d013      	beq.n	8005a52 <HAL_TIM_Base_Start_IT+0x76>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	4a1e      	ldr	r2, [pc, #120]	@ (8005aa8 <HAL_TIM_Base_Start_IT+0xcc>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d00e      	beq.n	8005a52 <HAL_TIM_Base_Start_IT+0x76>
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	4a1c      	ldr	r2, [pc, #112]	@ (8005aac <HAL_TIM_Base_Start_IT+0xd0>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d009      	beq.n	8005a52 <HAL_TIM_Base_Start_IT+0x76>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	4a1b      	ldr	r2, [pc, #108]	@ (8005ab0 <HAL_TIM_Base_Start_IT+0xd4>)
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d004      	beq.n	8005a52 <HAL_TIM_Base_Start_IT+0x76>
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	4a19      	ldr	r2, [pc, #100]	@ (8005ab4 <HAL_TIM_Base_Start_IT+0xd8>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d115      	bne.n	8005a7e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	689a      	ldr	r2, [r3, #8]
 8005a58:	4b17      	ldr	r3, [pc, #92]	@ (8005ab8 <HAL_TIM_Base_Start_IT+0xdc>)
 8005a5a:	4013      	ands	r3, r2
 8005a5c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	2b06      	cmp	r3, #6
 8005a62:	d015      	beq.n	8005a90 <HAL_TIM_Base_Start_IT+0xb4>
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a6a:	d011      	beq.n	8005a90 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	681a      	ldr	r2, [r3, #0]
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f042 0201 	orr.w	r2, r2, #1
 8005a7a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a7c:	e008      	b.n	8005a90 <HAL_TIM_Base_Start_IT+0xb4>
>>>>>>> Stashed changes
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
<<<<<<< Updated upstream
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	681a      	ldr	r2, [r3, #0]
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f042 0201 	orr.w	r2, r2, #1
 8005164:	601a      	str	r2, [r3, #0]
 8005166:	e000      	b.n	800516a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005168:	bf00      	nop
=======
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	681a      	ldr	r2, [r3, #0]
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f042 0201 	orr.w	r2, r2, #1
 8005a8c:	601a      	str	r2, [r3, #0]
 8005a8e:	e000      	b.n	8005a92 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a90:	bf00      	nop
>>>>>>> Stashed changes
  }

  /* Return function status */
  return HAL_OK;
<<<<<<< Updated upstream
 800516a:	2300      	movs	r3, #0
}
 800516c:	4618      	mov	r0, r3
 800516e:	3714      	adds	r7, #20
 8005170:	46bd      	mov	sp, r7
 8005172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005176:	4770      	bx	lr
 8005178:	40012c00 	.word	0x40012c00
 800517c:	40000400 	.word	0x40000400
 8005180:	40000800 	.word	0x40000800
 8005184:	40000c00 	.word	0x40000c00
 8005188:	40013400 	.word	0x40013400
 800518c:	40014000 	.word	0x40014000
 8005190:	00010007 	.word	0x00010007

08005194 <HAL_TIM_Base_Stop_IT>:
=======
 8005a92:	2300      	movs	r3, #0
}
 8005a94:	4618      	mov	r0, r3
 8005a96:	3714      	adds	r7, #20
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9e:	4770      	bx	lr
 8005aa0:	40012c00 	.word	0x40012c00
 8005aa4:	40000400 	.word	0x40000400
 8005aa8:	40000800 	.word	0x40000800
 8005aac:	40000c00 	.word	0x40000c00
 8005ab0:	40013400 	.word	0x40013400
 8005ab4:	40014000 	.word	0x40014000
 8005ab8:	00010007 	.word	0x00010007

08005abc <HAL_TIM_Base_Stop_IT>:
>>>>>>> Stashed changes
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 8005194:	b480      	push	{r7}
 8005196:	b083      	sub	sp, #12
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
=======
 8005abc:	b480      	push	{r7}
 8005abe:	b083      	sub	sp, #12
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
<<<<<<< Updated upstream
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	68da      	ldr	r2, [r3, #12]
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f022 0201 	bic.w	r2, r2, #1
 80051aa:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	6a1a      	ldr	r2, [r3, #32]
 80051b2:	f241 1311 	movw	r3, #4369	@ 0x1111
 80051b6:	4013      	ands	r3, r2
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d10f      	bne.n	80051dc <HAL_TIM_Base_Stop_IT+0x48>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	6a1a      	ldr	r2, [r3, #32]
 80051c2:	f240 4344 	movw	r3, #1092	@ 0x444
 80051c6:	4013      	ands	r3, r2
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d107      	bne.n	80051dc <HAL_TIM_Base_Stop_IT+0x48>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	681a      	ldr	r2, [r3, #0]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f022 0201 	bic.w	r2, r2, #1
 80051da:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2201      	movs	r2, #1
 80051e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 80051e4:	2300      	movs	r3, #0
}
 80051e6:	4618      	mov	r0, r3
 80051e8:	370c      	adds	r7, #12
 80051ea:	46bd      	mov	sp, r7
 80051ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f0:	4770      	bx	lr

080051f2 <HAL_TIM_PWM_Init>:
=======
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	68da      	ldr	r2, [r3, #12]
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f022 0201 	bic.w	r2, r2, #1
 8005ad2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	6a1a      	ldr	r2, [r3, #32]
 8005ada:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005ade:	4013      	ands	r3, r2
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d10f      	bne.n	8005b04 <HAL_TIM_Base_Stop_IT+0x48>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	6a1a      	ldr	r2, [r3, #32]
 8005aea:	f240 4344 	movw	r3, #1092	@ 0x444
 8005aee:	4013      	ands	r3, r2
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d107      	bne.n	8005b04 <HAL_TIM_Base_Stop_IT+0x48>
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	681a      	ldr	r2, [r3, #0]
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f022 0201 	bic.w	r2, r2, #1
 8005b02:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2201      	movs	r2, #1
 8005b08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8005b0c:	2300      	movs	r3, #0
}
 8005b0e:	4618      	mov	r0, r3
 8005b10:	370c      	adds	r7, #12
 8005b12:	46bd      	mov	sp, r7
 8005b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b18:	4770      	bx	lr

08005b1a <HAL_TIM_PWM_Init>:
>>>>>>> Stashed changes
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 80051f2:	b580      	push	{r7, lr}
 80051f4:	b082      	sub	sp, #8
 80051f6:	af00      	add	r7, sp, #0
 80051f8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d101      	bne.n	8005204 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005200:	2301      	movs	r3, #1
 8005202:	e049      	b.n	8005298 <HAL_TIM_PWM_Init+0xa6>
=======
 8005b1a:	b580      	push	{r7, lr}
 8005b1c:	b082      	sub	sp, #8
 8005b1e:	af00      	add	r7, sp, #0
 8005b20:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d101      	bne.n	8005b2c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005b28:	2301      	movs	r3, #1
 8005b2a:	e049      	b.n	8005bc0 <HAL_TIM_PWM_Init+0xa6>
>>>>>>> Stashed changes
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
<<<<<<< Updated upstream
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800520a:	b2db      	uxtb	r3, r3
 800520c:	2b00      	cmp	r3, #0
 800520e:	d106      	bne.n	800521e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2200      	movs	r2, #0
 8005214:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
=======
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b32:	b2db      	uxtb	r3, r3
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d106      	bne.n	8005b46 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
>>>>>>> Stashed changes
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
<<<<<<< Updated upstream
 8005218:	6878      	ldr	r0, [r7, #4]
 800521a:	f000 f841 	bl	80052a0 <HAL_TIM_PWM_MspInit>
=======
 8005b40:	6878      	ldr	r0, [r7, #4]
 8005b42:	f7fc fb8b 	bl	800225c <HAL_TIM_PWM_MspInit>
>>>>>>> Stashed changes
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
<<<<<<< Updated upstream
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2202      	movs	r2, #2
 8005222:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681a      	ldr	r2, [r3, #0]
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	3304      	adds	r3, #4
 800522e:	4619      	mov	r1, r3
 8005230:	4610      	mov	r0, r2
 8005232:	f000 fce9 	bl	8005c08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2201      	movs	r2, #1
 800523a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2201      	movs	r2, #1
 8005242:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2201      	movs	r2, #1
 800524a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2201      	movs	r2, #1
 8005252:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2201      	movs	r2, #1
 800525a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2201      	movs	r2, #1
 8005262:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2201      	movs	r2, #1
 800526a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2201      	movs	r2, #1
 8005272:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2201      	movs	r2, #1
 800527a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2201      	movs	r2, #1
 8005282:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2201      	movs	r2, #1
 800528a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2201      	movs	r2, #1
 8005292:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005296:	2300      	movs	r3, #0
}
 8005298:	4618      	mov	r0, r3
 800529a:	3708      	adds	r7, #8
 800529c:	46bd      	mov	sp, r7
 800529e:	bd80      	pop	{r7, pc}

080052a0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80052a0:	b480      	push	{r7}
 80052a2:	b083      	sub	sp, #12
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80052a8:	bf00      	nop
 80052aa:	370c      	adds	r7, #12
 80052ac:	46bd      	mov	sp, r7
 80052ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b2:	4770      	bx	lr

080052b4 <HAL_TIM_PWM_Start>:
=======
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2202      	movs	r2, #2
 8005b4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681a      	ldr	r2, [r3, #0]
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	3304      	adds	r3, #4
 8005b56:	4619      	mov	r1, r3
 8005b58:	4610      	mov	r0, r2
 8005b5a:	f000 fb7f 	bl	800625c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2201      	movs	r2, #1
 8005b62:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2201      	movs	r2, #1
 8005b6a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2201      	movs	r2, #1
 8005b72:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2201      	movs	r2, #1
 8005b7a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2201      	movs	r2, #1
 8005b82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2201      	movs	r2, #1
 8005b8a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2201      	movs	r2, #1
 8005b92:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2201      	movs	r2, #1
 8005b9a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2201      	movs	r2, #1
 8005ba2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2201      	movs	r2, #1
 8005baa:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2201      	movs	r2, #1
 8005bb2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2201      	movs	r2, #1
 8005bba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005bbe:	2300      	movs	r3, #0
}
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	3708      	adds	r7, #8
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	bd80      	pop	{r7, pc}

08005bc8 <HAL_TIM_PWM_Start>:
>>>>>>> Stashed changes
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
<<<<<<< Updated upstream
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b084      	sub	sp, #16
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
 80052bc:	6039      	str	r1, [r7, #0]
=======
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b084      	sub	sp, #16
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
 8005bd0:	6039      	str	r1, [r7, #0]
>>>>>>> Stashed changes

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
<<<<<<< Updated upstream
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d109      	bne.n	80052d8 <HAL_TIM_PWM_Start+0x24>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80052ca:	b2db      	uxtb	r3, r3
 80052cc:	2b01      	cmp	r3, #1
 80052ce:	bf14      	ite	ne
 80052d0:	2301      	movne	r3, #1
 80052d2:	2300      	moveq	r3, #0
 80052d4:	b2db      	uxtb	r3, r3
 80052d6:	e03c      	b.n	8005352 <HAL_TIM_PWM_Start+0x9e>
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	2b04      	cmp	r3, #4
 80052dc:	d109      	bne.n	80052f2 <HAL_TIM_PWM_Start+0x3e>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80052e4:	b2db      	uxtb	r3, r3
 80052e6:	2b01      	cmp	r3, #1
 80052e8:	bf14      	ite	ne
 80052ea:	2301      	movne	r3, #1
 80052ec:	2300      	moveq	r3, #0
 80052ee:	b2db      	uxtb	r3, r3
 80052f0:	e02f      	b.n	8005352 <HAL_TIM_PWM_Start+0x9e>
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	2b08      	cmp	r3, #8
 80052f6:	d109      	bne.n	800530c <HAL_TIM_PWM_Start+0x58>
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80052fe:	b2db      	uxtb	r3, r3
 8005300:	2b01      	cmp	r3, #1
 8005302:	bf14      	ite	ne
 8005304:	2301      	movne	r3, #1
 8005306:	2300      	moveq	r3, #0
 8005308:	b2db      	uxtb	r3, r3
 800530a:	e022      	b.n	8005352 <HAL_TIM_PWM_Start+0x9e>
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	2b0c      	cmp	r3, #12
 8005310:	d109      	bne.n	8005326 <HAL_TIM_PWM_Start+0x72>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005318:	b2db      	uxtb	r3, r3
 800531a:	2b01      	cmp	r3, #1
 800531c:	bf14      	ite	ne
 800531e:	2301      	movne	r3, #1
 8005320:	2300      	moveq	r3, #0
 8005322:	b2db      	uxtb	r3, r3
 8005324:	e015      	b.n	8005352 <HAL_TIM_PWM_Start+0x9e>
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	2b10      	cmp	r3, #16
 800532a:	d109      	bne.n	8005340 <HAL_TIM_PWM_Start+0x8c>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005332:	b2db      	uxtb	r3, r3
 8005334:	2b01      	cmp	r3, #1
 8005336:	bf14      	ite	ne
 8005338:	2301      	movne	r3, #1
 800533a:	2300      	moveq	r3, #0
 800533c:	b2db      	uxtb	r3, r3
 800533e:	e008      	b.n	8005352 <HAL_TIM_PWM_Start+0x9e>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005346:	b2db      	uxtb	r3, r3
 8005348:	2b01      	cmp	r3, #1
 800534a:	bf14      	ite	ne
 800534c:	2301      	movne	r3, #1
 800534e:	2300      	moveq	r3, #0
 8005350:	b2db      	uxtb	r3, r3
 8005352:	2b00      	cmp	r3, #0
 8005354:	d001      	beq.n	800535a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005356:	2301      	movs	r3, #1
 8005358:	e09c      	b.n	8005494 <HAL_TIM_PWM_Start+0x1e0>
=======
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d109      	bne.n	8005bec <HAL_TIM_PWM_Start+0x24>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005bde:	b2db      	uxtb	r3, r3
 8005be0:	2b01      	cmp	r3, #1
 8005be2:	bf14      	ite	ne
 8005be4:	2301      	movne	r3, #1
 8005be6:	2300      	moveq	r3, #0
 8005be8:	b2db      	uxtb	r3, r3
 8005bea:	e03c      	b.n	8005c66 <HAL_TIM_PWM_Start+0x9e>
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	2b04      	cmp	r3, #4
 8005bf0:	d109      	bne.n	8005c06 <HAL_TIM_PWM_Start+0x3e>
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005bf8:	b2db      	uxtb	r3, r3
 8005bfa:	2b01      	cmp	r3, #1
 8005bfc:	bf14      	ite	ne
 8005bfe:	2301      	movne	r3, #1
 8005c00:	2300      	moveq	r3, #0
 8005c02:	b2db      	uxtb	r3, r3
 8005c04:	e02f      	b.n	8005c66 <HAL_TIM_PWM_Start+0x9e>
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	2b08      	cmp	r3, #8
 8005c0a:	d109      	bne.n	8005c20 <HAL_TIM_PWM_Start+0x58>
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005c12:	b2db      	uxtb	r3, r3
 8005c14:	2b01      	cmp	r3, #1
 8005c16:	bf14      	ite	ne
 8005c18:	2301      	movne	r3, #1
 8005c1a:	2300      	moveq	r3, #0
 8005c1c:	b2db      	uxtb	r3, r3
 8005c1e:	e022      	b.n	8005c66 <HAL_TIM_PWM_Start+0x9e>
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	2b0c      	cmp	r3, #12
 8005c24:	d109      	bne.n	8005c3a <HAL_TIM_PWM_Start+0x72>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005c2c:	b2db      	uxtb	r3, r3
 8005c2e:	2b01      	cmp	r3, #1
 8005c30:	bf14      	ite	ne
 8005c32:	2301      	movne	r3, #1
 8005c34:	2300      	moveq	r3, #0
 8005c36:	b2db      	uxtb	r3, r3
 8005c38:	e015      	b.n	8005c66 <HAL_TIM_PWM_Start+0x9e>
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	2b10      	cmp	r3, #16
 8005c3e:	d109      	bne.n	8005c54 <HAL_TIM_PWM_Start+0x8c>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005c46:	b2db      	uxtb	r3, r3
 8005c48:	2b01      	cmp	r3, #1
 8005c4a:	bf14      	ite	ne
 8005c4c:	2301      	movne	r3, #1
 8005c4e:	2300      	moveq	r3, #0
 8005c50:	b2db      	uxtb	r3, r3
 8005c52:	e008      	b.n	8005c66 <HAL_TIM_PWM_Start+0x9e>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005c5a:	b2db      	uxtb	r3, r3
 8005c5c:	2b01      	cmp	r3, #1
 8005c5e:	bf14      	ite	ne
 8005c60:	2301      	movne	r3, #1
 8005c62:	2300      	moveq	r3, #0
 8005c64:	b2db      	uxtb	r3, r3
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d001      	beq.n	8005c6e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	e09c      	b.n	8005da8 <HAL_TIM_PWM_Start+0x1e0>
>>>>>>> Stashed changes
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
<<<<<<< Updated upstream
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d104      	bne.n	800536a <HAL_TIM_PWM_Start+0xb6>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2202      	movs	r2, #2
 8005364:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005368:	e023      	b.n	80053b2 <HAL_TIM_PWM_Start+0xfe>
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	2b04      	cmp	r3, #4
 800536e:	d104      	bne.n	800537a <HAL_TIM_PWM_Start+0xc6>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2202      	movs	r2, #2
 8005374:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005378:	e01b      	b.n	80053b2 <HAL_TIM_PWM_Start+0xfe>
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	2b08      	cmp	r3, #8
 800537e:	d104      	bne.n	800538a <HAL_TIM_PWM_Start+0xd6>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2202      	movs	r2, #2
 8005384:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005388:	e013      	b.n	80053b2 <HAL_TIM_PWM_Start+0xfe>
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	2b0c      	cmp	r3, #12
 800538e:	d104      	bne.n	800539a <HAL_TIM_PWM_Start+0xe6>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2202      	movs	r2, #2
 8005394:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005398:	e00b      	b.n	80053b2 <HAL_TIM_PWM_Start+0xfe>
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	2b10      	cmp	r3, #16
 800539e:	d104      	bne.n	80053aa <HAL_TIM_PWM_Start+0xf6>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2202      	movs	r2, #2
 80053a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80053a8:	e003      	b.n	80053b2 <HAL_TIM_PWM_Start+0xfe>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2202      	movs	r2, #2
 80053ae:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	2201      	movs	r2, #1
 80053b8:	6839      	ldr	r1, [r7, #0]
 80053ba:	4618      	mov	r0, r3
 80053bc:	f001 f83a 	bl	8006434 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4a35      	ldr	r2, [pc, #212]	@ (800549c <HAL_TIM_PWM_Start+0x1e8>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d013      	beq.n	80053f2 <HAL_TIM_PWM_Start+0x13e>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4a34      	ldr	r2, [pc, #208]	@ (80054a0 <HAL_TIM_PWM_Start+0x1ec>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d00e      	beq.n	80053f2 <HAL_TIM_PWM_Start+0x13e>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4a32      	ldr	r2, [pc, #200]	@ (80054a4 <HAL_TIM_PWM_Start+0x1f0>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d009      	beq.n	80053f2 <HAL_TIM_PWM_Start+0x13e>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4a31      	ldr	r2, [pc, #196]	@ (80054a8 <HAL_TIM_PWM_Start+0x1f4>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d004      	beq.n	80053f2 <HAL_TIM_PWM_Start+0x13e>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4a2f      	ldr	r2, [pc, #188]	@ (80054ac <HAL_TIM_PWM_Start+0x1f8>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d101      	bne.n	80053f6 <HAL_TIM_PWM_Start+0x142>
 80053f2:	2301      	movs	r3, #1
 80053f4:	e000      	b.n	80053f8 <HAL_TIM_PWM_Start+0x144>
 80053f6:	2300      	movs	r3, #0
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d007      	beq.n	800540c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800540a:	645a      	str	r2, [r3, #68]	@ 0x44
=======
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d104      	bne.n	8005c7e <HAL_TIM_PWM_Start+0xb6>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2202      	movs	r2, #2
 8005c78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005c7c:	e023      	b.n	8005cc6 <HAL_TIM_PWM_Start+0xfe>
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	2b04      	cmp	r3, #4
 8005c82:	d104      	bne.n	8005c8e <HAL_TIM_PWM_Start+0xc6>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2202      	movs	r2, #2
 8005c88:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005c8c:	e01b      	b.n	8005cc6 <HAL_TIM_PWM_Start+0xfe>
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	2b08      	cmp	r3, #8
 8005c92:	d104      	bne.n	8005c9e <HAL_TIM_PWM_Start+0xd6>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2202      	movs	r2, #2
 8005c98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005c9c:	e013      	b.n	8005cc6 <HAL_TIM_PWM_Start+0xfe>
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	2b0c      	cmp	r3, #12
 8005ca2:	d104      	bne.n	8005cae <HAL_TIM_PWM_Start+0xe6>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2202      	movs	r2, #2
 8005ca8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005cac:	e00b      	b.n	8005cc6 <HAL_TIM_PWM_Start+0xfe>
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	2b10      	cmp	r3, #16
 8005cb2:	d104      	bne.n	8005cbe <HAL_TIM_PWM_Start+0xf6>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2202      	movs	r2, #2
 8005cb8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005cbc:	e003      	b.n	8005cc6 <HAL_TIM_PWM_Start+0xfe>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2202      	movs	r2, #2
 8005cc2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	2201      	movs	r2, #1
 8005ccc:	6839      	ldr	r1, [r7, #0]
 8005cce:	4618      	mov	r0, r3
 8005cd0:	f000 fe40 	bl	8006954 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	4a35      	ldr	r2, [pc, #212]	@ (8005db0 <HAL_TIM_PWM_Start+0x1e8>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d013      	beq.n	8005d06 <HAL_TIM_PWM_Start+0x13e>
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	4a34      	ldr	r2, [pc, #208]	@ (8005db4 <HAL_TIM_PWM_Start+0x1ec>)
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d00e      	beq.n	8005d06 <HAL_TIM_PWM_Start+0x13e>
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	4a32      	ldr	r2, [pc, #200]	@ (8005db8 <HAL_TIM_PWM_Start+0x1f0>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d009      	beq.n	8005d06 <HAL_TIM_PWM_Start+0x13e>
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	4a31      	ldr	r2, [pc, #196]	@ (8005dbc <HAL_TIM_PWM_Start+0x1f4>)
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d004      	beq.n	8005d06 <HAL_TIM_PWM_Start+0x13e>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	4a2f      	ldr	r2, [pc, #188]	@ (8005dc0 <HAL_TIM_PWM_Start+0x1f8>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d101      	bne.n	8005d0a <HAL_TIM_PWM_Start+0x142>
 8005d06:	2301      	movs	r3, #1
 8005d08:	e000      	b.n	8005d0c <HAL_TIM_PWM_Start+0x144>
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d007      	beq.n	8005d20 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005d1e:	645a      	str	r2, [r3, #68]	@ 0x44
>>>>>>> Stashed changes
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
<<<<<<< Updated upstream
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4a22      	ldr	r2, [pc, #136]	@ (800549c <HAL_TIM_PWM_Start+0x1e8>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d01d      	beq.n	8005452 <HAL_TIM_PWM_Start+0x19e>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800541e:	d018      	beq.n	8005452 <HAL_TIM_PWM_Start+0x19e>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4a22      	ldr	r2, [pc, #136]	@ (80054b0 <HAL_TIM_PWM_Start+0x1fc>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d013      	beq.n	8005452 <HAL_TIM_PWM_Start+0x19e>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4a21      	ldr	r2, [pc, #132]	@ (80054b4 <HAL_TIM_PWM_Start+0x200>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d00e      	beq.n	8005452 <HAL_TIM_PWM_Start+0x19e>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4a1f      	ldr	r2, [pc, #124]	@ (80054b8 <HAL_TIM_PWM_Start+0x204>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d009      	beq.n	8005452 <HAL_TIM_PWM_Start+0x19e>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	4a17      	ldr	r2, [pc, #92]	@ (80054a0 <HAL_TIM_PWM_Start+0x1ec>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d004      	beq.n	8005452 <HAL_TIM_PWM_Start+0x19e>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4a15      	ldr	r2, [pc, #84]	@ (80054a4 <HAL_TIM_PWM_Start+0x1f0>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d115      	bne.n	800547e <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	689a      	ldr	r2, [r3, #8]
 8005458:	4b18      	ldr	r3, [pc, #96]	@ (80054bc <HAL_TIM_PWM_Start+0x208>)
 800545a:	4013      	ands	r3, r2
 800545c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	2b06      	cmp	r3, #6
 8005462:	d015      	beq.n	8005490 <HAL_TIM_PWM_Start+0x1dc>
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800546a:	d011      	beq.n	8005490 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	681a      	ldr	r2, [r3, #0]
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f042 0201 	orr.w	r2, r2, #1
 800547a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800547c:	e008      	b.n	8005490 <HAL_TIM_PWM_Start+0x1dc>
=======
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	4a22      	ldr	r2, [pc, #136]	@ (8005db0 <HAL_TIM_PWM_Start+0x1e8>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d01d      	beq.n	8005d66 <HAL_TIM_PWM_Start+0x19e>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d32:	d018      	beq.n	8005d66 <HAL_TIM_PWM_Start+0x19e>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	4a22      	ldr	r2, [pc, #136]	@ (8005dc4 <HAL_TIM_PWM_Start+0x1fc>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d013      	beq.n	8005d66 <HAL_TIM_PWM_Start+0x19e>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	4a21      	ldr	r2, [pc, #132]	@ (8005dc8 <HAL_TIM_PWM_Start+0x200>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d00e      	beq.n	8005d66 <HAL_TIM_PWM_Start+0x19e>
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	4a1f      	ldr	r2, [pc, #124]	@ (8005dcc <HAL_TIM_PWM_Start+0x204>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d009      	beq.n	8005d66 <HAL_TIM_PWM_Start+0x19e>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	4a17      	ldr	r2, [pc, #92]	@ (8005db4 <HAL_TIM_PWM_Start+0x1ec>)
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d004      	beq.n	8005d66 <HAL_TIM_PWM_Start+0x19e>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	4a15      	ldr	r2, [pc, #84]	@ (8005db8 <HAL_TIM_PWM_Start+0x1f0>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d115      	bne.n	8005d92 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	689a      	ldr	r2, [r3, #8]
 8005d6c:	4b18      	ldr	r3, [pc, #96]	@ (8005dd0 <HAL_TIM_PWM_Start+0x208>)
 8005d6e:	4013      	ands	r3, r2
 8005d70:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	2b06      	cmp	r3, #6
 8005d76:	d015      	beq.n	8005da4 <HAL_TIM_PWM_Start+0x1dc>
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d7e:	d011      	beq.n	8005da4 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	681a      	ldr	r2, [r3, #0]
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f042 0201 	orr.w	r2, r2, #1
 8005d8e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d90:	e008      	b.n	8005da4 <HAL_TIM_PWM_Start+0x1dc>
>>>>>>> Stashed changes
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
<<<<<<< Updated upstream
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	681a      	ldr	r2, [r3, #0]
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f042 0201 	orr.w	r2, r2, #1
 800548c:	601a      	str	r2, [r3, #0]
 800548e:	e000      	b.n	8005492 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005490:	bf00      	nop
=======
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	681a      	ldr	r2, [r3, #0]
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f042 0201 	orr.w	r2, r2, #1
 8005da0:	601a      	str	r2, [r3, #0]
 8005da2:	e000      	b.n	8005da6 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005da4:	bf00      	nop
>>>>>>> Stashed changes
  }

  /* Return function status */
  return HAL_OK;
<<<<<<< Updated upstream
 8005492:	2300      	movs	r3, #0
}
 8005494:	4618      	mov	r0, r3
 8005496:	3710      	adds	r7, #16
 8005498:	46bd      	mov	sp, r7
 800549a:	bd80      	pop	{r7, pc}
 800549c:	40012c00 	.word	0x40012c00
 80054a0:	40013400 	.word	0x40013400
 80054a4:	40014000 	.word	0x40014000
 80054a8:	40014400 	.word	0x40014400
 80054ac:	40014800 	.word	0x40014800
 80054b0:	40000400 	.word	0x40000400
 80054b4:	40000800 	.word	0x40000800
 80054b8:	40000c00 	.word	0x40000c00
 80054bc:	00010007 	.word	0x00010007

080054c0 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b082      	sub	sp, #8
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
 80054c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	2200      	movs	r2, #0
 80054d0:	6839      	ldr	r1, [r7, #0]
 80054d2:	4618      	mov	r0, r3
 80054d4:	f000 ffae 	bl	8006434 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4a3e      	ldr	r2, [pc, #248]	@ (80055d8 <HAL_TIM_PWM_Stop+0x118>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d013      	beq.n	800550a <HAL_TIM_PWM_Stop+0x4a>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	4a3d      	ldr	r2, [pc, #244]	@ (80055dc <HAL_TIM_PWM_Stop+0x11c>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d00e      	beq.n	800550a <HAL_TIM_PWM_Stop+0x4a>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a3b      	ldr	r2, [pc, #236]	@ (80055e0 <HAL_TIM_PWM_Stop+0x120>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d009      	beq.n	800550a <HAL_TIM_PWM_Stop+0x4a>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4a3a      	ldr	r2, [pc, #232]	@ (80055e4 <HAL_TIM_PWM_Stop+0x124>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d004      	beq.n	800550a <HAL_TIM_PWM_Stop+0x4a>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4a38      	ldr	r2, [pc, #224]	@ (80055e8 <HAL_TIM_PWM_Stop+0x128>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d101      	bne.n	800550e <HAL_TIM_PWM_Stop+0x4e>
 800550a:	2301      	movs	r3, #1
 800550c:	e000      	b.n	8005510 <HAL_TIM_PWM_Stop+0x50>
 800550e:	2300      	movs	r3, #0
 8005510:	2b00      	cmp	r3, #0
 8005512:	d017      	beq.n	8005544 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	6a1a      	ldr	r2, [r3, #32]
 800551a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800551e:	4013      	ands	r3, r2
 8005520:	2b00      	cmp	r3, #0
 8005522:	d10f      	bne.n	8005544 <HAL_TIM_PWM_Stop+0x84>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	6a1a      	ldr	r2, [r3, #32]
 800552a:	f240 4344 	movw	r3, #1092	@ 0x444
 800552e:	4013      	ands	r3, r2
 8005530:	2b00      	cmp	r3, #0
 8005532:	d107      	bne.n	8005544 <HAL_TIM_PWM_Stop+0x84>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005542:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	6a1a      	ldr	r2, [r3, #32]
 800554a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800554e:	4013      	ands	r3, r2
 8005550:	2b00      	cmp	r3, #0
 8005552:	d10f      	bne.n	8005574 <HAL_TIM_PWM_Stop+0xb4>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	6a1a      	ldr	r2, [r3, #32]
 800555a:	f240 4344 	movw	r3, #1092	@ 0x444
 800555e:	4013      	ands	r3, r2
 8005560:	2b00      	cmp	r3, #0
 8005562:	d107      	bne.n	8005574 <HAL_TIM_PWM_Stop+0xb4>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	681a      	ldr	r2, [r3, #0]
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f022 0201 	bic.w	r2, r2, #1
 8005572:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d104      	bne.n	8005584 <HAL_TIM_PWM_Stop+0xc4>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2201      	movs	r2, #1
 800557e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005582:	e023      	b.n	80055cc <HAL_TIM_PWM_Stop+0x10c>
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	2b04      	cmp	r3, #4
 8005588:	d104      	bne.n	8005594 <HAL_TIM_PWM_Stop+0xd4>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2201      	movs	r2, #1
 800558e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005592:	e01b      	b.n	80055cc <HAL_TIM_PWM_Stop+0x10c>
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	2b08      	cmp	r3, #8
 8005598:	d104      	bne.n	80055a4 <HAL_TIM_PWM_Stop+0xe4>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2201      	movs	r2, #1
 800559e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80055a2:	e013      	b.n	80055cc <HAL_TIM_PWM_Stop+0x10c>
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	2b0c      	cmp	r3, #12
 80055a8:	d104      	bne.n	80055b4 <HAL_TIM_PWM_Stop+0xf4>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2201      	movs	r2, #1
 80055ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80055b2:	e00b      	b.n	80055cc <HAL_TIM_PWM_Stop+0x10c>
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	2b10      	cmp	r3, #16
 80055b8:	d104      	bne.n	80055c4 <HAL_TIM_PWM_Stop+0x104>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2201      	movs	r2, #1
 80055be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80055c2:	e003      	b.n	80055cc <HAL_TIM_PWM_Stop+0x10c>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2201      	movs	r2, #1
 80055c8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 80055cc:	2300      	movs	r3, #0
}
 80055ce:	4618      	mov	r0, r3
 80055d0:	3708      	adds	r7, #8
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bd80      	pop	{r7, pc}
 80055d6:	bf00      	nop
 80055d8:	40012c00 	.word	0x40012c00
 80055dc:	40013400 	.word	0x40013400
 80055e0:	40014000 	.word	0x40014000
 80055e4:	40014400 	.word	0x40014400
 80055e8:	40014800 	.word	0x40014800

080055ec <HAL_TIM_IRQHandler>:
=======
 8005da6:	2300      	movs	r3, #0
}
 8005da8:	4618      	mov	r0, r3
 8005daa:	3710      	adds	r7, #16
 8005dac:	46bd      	mov	sp, r7
 8005dae:	bd80      	pop	{r7, pc}
 8005db0:	40012c00 	.word	0x40012c00
 8005db4:	40013400 	.word	0x40013400
 8005db8:	40014000 	.word	0x40014000
 8005dbc:	40014400 	.word	0x40014400
 8005dc0:	40014800 	.word	0x40014800
 8005dc4:	40000400 	.word	0x40000400
 8005dc8:	40000800 	.word	0x40000800
 8005dcc:	40000c00 	.word	0x40000c00
 8005dd0:	00010007 	.word	0x00010007

08005dd4 <HAL_TIM_IRQHandler>:
>>>>>>> Stashed changes
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b084      	sub	sp, #16
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	68db      	ldr	r3, [r3, #12]
 80055fa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	691b      	ldr	r3, [r3, #16]
 8005602:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	f003 0302 	and.w	r3, r3, #2
 800560a:	2b00      	cmp	r3, #0
 800560c:	d020      	beq.n	8005650 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	f003 0302 	and.w	r3, r3, #2
 8005614:	2b00      	cmp	r3, #0
 8005616:	d01b      	beq.n	8005650 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f06f 0202 	mvn.w	r2, #2
 8005620:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2201      	movs	r2, #1
 8005626:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	699b      	ldr	r3, [r3, #24]
 800562e:	f003 0303 	and.w	r3, r3, #3
 8005632:	2b00      	cmp	r3, #0
 8005634:	d003      	beq.n	800563e <HAL_TIM_IRQHandler+0x52>
=======
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b084      	sub	sp, #16
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	68db      	ldr	r3, [r3, #12]
 8005de2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	691b      	ldr	r3, [r3, #16]
 8005dea:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005dec:	68bb      	ldr	r3, [r7, #8]
 8005dee:	f003 0302 	and.w	r3, r3, #2
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d020      	beq.n	8005e38 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	f003 0302 	and.w	r3, r3, #2
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d01b      	beq.n	8005e38 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f06f 0202 	mvn.w	r2, #2
 8005e08:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2201      	movs	r2, #1
 8005e0e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	699b      	ldr	r3, [r3, #24]
 8005e16:	f003 0303 	and.w	r3, r3, #3
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d003      	beq.n	8005e26 <HAL_TIM_IRQHandler+0x52>
>>>>>>> Stashed changes
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< Updated upstream
 8005636:	6878      	ldr	r0, [r7, #4]
 8005638:	f000 fac7 	bl	8005bca <HAL_TIM_IC_CaptureCallback>
 800563c:	e005      	b.n	800564a <HAL_TIM_IRQHandler+0x5e>
=======
 8005e1e:	6878      	ldr	r0, [r7, #4]
 8005e20:	f000 f9fe 	bl	8006220 <HAL_TIM_IC_CaptureCallback>
 8005e24:	e005      	b.n	8005e32 <HAL_TIM_IRQHandler+0x5e>
>>>>>>> Stashed changes
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< Updated upstream
 800563e:	6878      	ldr	r0, [r7, #4]
 8005640:	f000 fab9 	bl	8005bb6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005644:	6878      	ldr	r0, [r7, #4]
 8005646:	f000 faca 	bl	8005bde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2200      	movs	r2, #0
 800564e:	771a      	strb	r2, [r3, #28]
=======
 8005e26:	6878      	ldr	r0, [r7, #4]
 8005e28:	f000 f9f0 	bl	800620c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e2c:	6878      	ldr	r0, [r7, #4]
 8005e2e:	f000 fa01 	bl	8006234 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2200      	movs	r2, #0
 8005e36:	771a      	strb	r2, [r3, #28]
>>>>>>> Stashed changes
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
<<<<<<< Updated upstream
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	f003 0304 	and.w	r3, r3, #4
 8005656:	2b00      	cmp	r3, #0
 8005658:	d020      	beq.n	800569c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	f003 0304 	and.w	r3, r3, #4
 8005660:	2b00      	cmp	r3, #0
 8005662:	d01b      	beq.n	800569c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f06f 0204 	mvn.w	r2, #4
 800566c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2202      	movs	r2, #2
 8005672:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	699b      	ldr	r3, [r3, #24]
 800567a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800567e:	2b00      	cmp	r3, #0
 8005680:	d003      	beq.n	800568a <HAL_TIM_IRQHandler+0x9e>
=======
 8005e38:	68bb      	ldr	r3, [r7, #8]
 8005e3a:	f003 0304 	and.w	r3, r3, #4
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d020      	beq.n	8005e84 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	f003 0304 	and.w	r3, r3, #4
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d01b      	beq.n	8005e84 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f06f 0204 	mvn.w	r2, #4
 8005e54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2202      	movs	r2, #2
 8005e5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	699b      	ldr	r3, [r3, #24]
 8005e62:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d003      	beq.n	8005e72 <HAL_TIM_IRQHandler+0x9e>
>>>>>>> Stashed changes
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< Updated upstream
 8005682:	6878      	ldr	r0, [r7, #4]
 8005684:	f000 faa1 	bl	8005bca <HAL_TIM_IC_CaptureCallback>
 8005688:	e005      	b.n	8005696 <HAL_TIM_IRQHandler+0xaa>
=======
 8005e6a:	6878      	ldr	r0, [r7, #4]
 8005e6c:	f000 f9d8 	bl	8006220 <HAL_TIM_IC_CaptureCallback>
 8005e70:	e005      	b.n	8005e7e <HAL_TIM_IRQHandler+0xaa>
>>>>>>> Stashed changes
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< Updated upstream
 800568a:	6878      	ldr	r0, [r7, #4]
 800568c:	f000 fa93 	bl	8005bb6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005690:	6878      	ldr	r0, [r7, #4]
 8005692:	f000 faa4 	bl	8005bde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2200      	movs	r2, #0
 800569a:	771a      	strb	r2, [r3, #28]
=======
 8005e72:	6878      	ldr	r0, [r7, #4]
 8005e74:	f000 f9ca 	bl	800620c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e78:	6878      	ldr	r0, [r7, #4]
 8005e7a:	f000 f9db 	bl	8006234 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	2200      	movs	r2, #0
 8005e82:	771a      	strb	r2, [r3, #28]
>>>>>>> Stashed changes
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
<<<<<<< Updated upstream
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	f003 0308 	and.w	r3, r3, #8
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d020      	beq.n	80056e8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	f003 0308 	and.w	r3, r3, #8
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d01b      	beq.n	80056e8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f06f 0208 	mvn.w	r2, #8
 80056b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2204      	movs	r2, #4
 80056be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	69db      	ldr	r3, [r3, #28]
 80056c6:	f003 0303 	and.w	r3, r3, #3
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d003      	beq.n	80056d6 <HAL_TIM_IRQHandler+0xea>
=======
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	f003 0308 	and.w	r3, r3, #8
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d020      	beq.n	8005ed0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	f003 0308 	and.w	r3, r3, #8
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d01b      	beq.n	8005ed0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f06f 0208 	mvn.w	r2, #8
 8005ea0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2204      	movs	r2, #4
 8005ea6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	69db      	ldr	r3, [r3, #28]
 8005eae:	f003 0303 	and.w	r3, r3, #3
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d003      	beq.n	8005ebe <HAL_TIM_IRQHandler+0xea>
>>>>>>> Stashed changes
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< Updated upstream
 80056ce:	6878      	ldr	r0, [r7, #4]
 80056d0:	f000 fa7b 	bl	8005bca <HAL_TIM_IC_CaptureCallback>
 80056d4:	e005      	b.n	80056e2 <HAL_TIM_IRQHandler+0xf6>
=======
 8005eb6:	6878      	ldr	r0, [r7, #4]
 8005eb8:	f000 f9b2 	bl	8006220 <HAL_TIM_IC_CaptureCallback>
 8005ebc:	e005      	b.n	8005eca <HAL_TIM_IRQHandler+0xf6>
>>>>>>> Stashed changes
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< Updated upstream
 80056d6:	6878      	ldr	r0, [r7, #4]
 80056d8:	f000 fa6d 	bl	8005bb6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056dc:	6878      	ldr	r0, [r7, #4]
 80056de:	f000 fa7e 	bl	8005bde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2200      	movs	r2, #0
 80056e6:	771a      	strb	r2, [r3, #28]
=======
 8005ebe:	6878      	ldr	r0, [r7, #4]
 8005ec0:	f000 f9a4 	bl	800620c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ec4:	6878      	ldr	r0, [r7, #4]
 8005ec6:	f000 f9b5 	bl	8006234 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2200      	movs	r2, #0
 8005ece:	771a      	strb	r2, [r3, #28]
>>>>>>> Stashed changes
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
<<<<<<< Updated upstream
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	f003 0310 	and.w	r3, r3, #16
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d020      	beq.n	8005734 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	f003 0310 	and.w	r3, r3, #16
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d01b      	beq.n	8005734 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f06f 0210 	mvn.w	r2, #16
 8005704:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2208      	movs	r2, #8
 800570a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	69db      	ldr	r3, [r3, #28]
 8005712:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005716:	2b00      	cmp	r3, #0
 8005718:	d003      	beq.n	8005722 <HAL_TIM_IRQHandler+0x136>
=======
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	f003 0310 	and.w	r3, r3, #16
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d020      	beq.n	8005f1c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	f003 0310 	and.w	r3, r3, #16
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d01b      	beq.n	8005f1c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f06f 0210 	mvn.w	r2, #16
 8005eec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2208      	movs	r2, #8
 8005ef2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	69db      	ldr	r3, [r3, #28]
 8005efa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d003      	beq.n	8005f0a <HAL_TIM_IRQHandler+0x136>
>>>>>>> Stashed changes
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< Updated upstream
 800571a:	6878      	ldr	r0, [r7, #4]
 800571c:	f000 fa55 	bl	8005bca <HAL_TIM_IC_CaptureCallback>
 8005720:	e005      	b.n	800572e <HAL_TIM_IRQHandler+0x142>
=======
 8005f02:	6878      	ldr	r0, [r7, #4]
 8005f04:	f000 f98c 	bl	8006220 <HAL_TIM_IC_CaptureCallback>
 8005f08:	e005      	b.n	8005f16 <HAL_TIM_IRQHandler+0x142>
>>>>>>> Stashed changes
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< Updated upstream
 8005722:	6878      	ldr	r0, [r7, #4]
 8005724:	f000 fa47 	bl	8005bb6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005728:	6878      	ldr	r0, [r7, #4]
 800572a:	f000 fa58 	bl	8005bde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2200      	movs	r2, #0
 8005732:	771a      	strb	r2, [r3, #28]
=======
 8005f0a:	6878      	ldr	r0, [r7, #4]
 8005f0c:	f000 f97e 	bl	800620c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f10:	6878      	ldr	r0, [r7, #4]
 8005f12:	f000 f98f 	bl	8006234 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2200      	movs	r2, #0
 8005f1a:	771a      	strb	r2, [r3, #28]
>>>>>>> Stashed changes
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
<<<<<<< Updated upstream
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	f003 0301 	and.w	r3, r3, #1
 800573a:	2b00      	cmp	r3, #0
 800573c:	d00c      	beq.n	8005758 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	f003 0301 	and.w	r3, r3, #1
 8005744:	2b00      	cmp	r3, #0
 8005746:	d007      	beq.n	8005758 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f06f 0201 	mvn.w	r2, #1
 8005750:	611a      	str	r2, [r3, #16]
=======
 8005f1c:	68bb      	ldr	r3, [r7, #8]
 8005f1e:	f003 0301 	and.w	r3, r3, #1
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d00c      	beq.n	8005f40 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	f003 0301 	and.w	r3, r3, #1
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d007      	beq.n	8005f40 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f06f 0201 	mvn.w	r2, #1
 8005f38:	611a      	str	r2, [r3, #16]
>>>>>>> Stashed changes
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
<<<<<<< Updated upstream
 8005752:	6878      	ldr	r0, [r7, #4]
 8005754:	f7fc fc38 	bl	8001fc8 <HAL_TIM_PeriodElapsedCallback>
=======
 8005f3a:	6878      	ldr	r0, [r7, #4]
 8005f3c:	f7fc f806 	bl	8001f4c <HAL_TIM_PeriodElapsedCallback>
>>>>>>> Stashed changes
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
<<<<<<< Updated upstream
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800575e:	2b00      	cmp	r3, #0
 8005760:	d104      	bne.n	800576c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005762:	68bb      	ldr	r3, [r7, #8]
 8005764:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005768:	2b00      	cmp	r3, #0
 800576a:	d00c      	beq.n	8005786 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005772:	2b00      	cmp	r3, #0
 8005774:	d007      	beq.n	8005786 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800577e:	611a      	str	r2, [r3, #16]
=======
 8005f40:	68bb      	ldr	r3, [r7, #8]
 8005f42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d104      	bne.n	8005f54 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005f4a:	68bb      	ldr	r3, [r7, #8]
 8005f4c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d00c      	beq.n	8005f6e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d007      	beq.n	8005f6e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005f66:	611a      	str	r2, [r3, #16]
>>>>>>> Stashed changes
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
<<<<<<< Updated upstream
 8005780:	6878      	ldr	r0, [r7, #4]
 8005782:	f000 ff0f 	bl	80065a4 <HAL_TIMEx_BreakCallback>
=======
 8005f68:	6878      	ldr	r0, [r7, #4]
 8005f6a:	f000 fdab 	bl	8006ac4 <HAL_TIMEx_BreakCallback>
>>>>>>> Stashed changes
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
<<<<<<< Updated upstream
 8005786:	68bb      	ldr	r3, [r7, #8]
 8005788:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800578c:	2b00      	cmp	r3, #0
 800578e:	d00c      	beq.n	80057aa <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005796:	2b00      	cmp	r3, #0
 8005798:	d007      	beq.n	80057aa <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80057a2:	611a      	str	r2, [r3, #16]
=======
 8005f6e:	68bb      	ldr	r3, [r7, #8]
 8005f70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d00c      	beq.n	8005f92 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d007      	beq.n	8005f92 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005f8a:	611a      	str	r2, [r3, #16]
>>>>>>> Stashed changes
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
<<<<<<< Updated upstream
 80057a4:	6878      	ldr	r0, [r7, #4]
 80057a6:	f000 ff07 	bl	80065b8 <HAL_TIMEx_Break2Callback>
=======
 8005f8c:	6878      	ldr	r0, [r7, #4]
 8005f8e:	f000 fda3 	bl	8006ad8 <HAL_TIMEx_Break2Callback>
>>>>>>> Stashed changes
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
<<<<<<< Updated upstream
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d00c      	beq.n	80057ce <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d007      	beq.n	80057ce <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80057c6:	611a      	str	r2, [r3, #16]
=======
 8005f92:	68bb      	ldr	r3, [r7, #8]
 8005f94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d00c      	beq.n	8005fb6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d007      	beq.n	8005fb6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005fae:	611a      	str	r2, [r3, #16]
>>>>>>> Stashed changes
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
<<<<<<< Updated upstream
 80057c8:	6878      	ldr	r0, [r7, #4]
 80057ca:	f000 fa12 	bl	8005bf2 <HAL_TIM_TriggerCallback>
=======
 8005fb0:	6878      	ldr	r0, [r7, #4]
 8005fb2:	f000 f949 	bl	8006248 <HAL_TIM_TriggerCallback>
>>>>>>> Stashed changes
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
<<<<<<< Updated upstream
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	f003 0320 	and.w	r3, r3, #32
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d00c      	beq.n	80057f2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	f003 0320 	and.w	r3, r3, #32
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d007      	beq.n	80057f2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f06f 0220 	mvn.w	r2, #32
 80057ea:	611a      	str	r2, [r3, #16]
=======
 8005fb6:	68bb      	ldr	r3, [r7, #8]
 8005fb8:	f003 0320 	and.w	r3, r3, #32
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d00c      	beq.n	8005fda <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	f003 0320 	and.w	r3, r3, #32
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d007      	beq.n	8005fda <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f06f 0220 	mvn.w	r2, #32
 8005fd2:	611a      	str	r2, [r3, #16]
>>>>>>> Stashed changes
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
<<<<<<< Updated upstream
 80057ec:	6878      	ldr	r0, [r7, #4]
 80057ee:	f000 fecf 	bl	8006590 <HAL_TIMEx_CommutCallback>
=======
 8005fd4:	6878      	ldr	r0, [r7, #4]
 8005fd6:	f000 fd6b 	bl	8006ab0 <HAL_TIMEx_CommutCallback>
>>>>>>> Stashed changes
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
<<<<<<< Updated upstream
 80057f2:	bf00      	nop
 80057f4:	3710      	adds	r7, #16
 80057f6:	46bd      	mov	sp, r7
 80057f8:	bd80      	pop	{r7, pc}
	...

080057fc <HAL_TIM_PWM_ConfigChannel>:
=======
 8005fda:	bf00      	nop
 8005fdc:	3710      	adds	r7, #16
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	bd80      	pop	{r7, pc}
	...

08005fe4 <HAL_TIM_PWM_ConfigChannel>:
>>>>>>> Stashed changes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
<<<<<<< Updated upstream
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b086      	sub	sp, #24
 8005800:	af00      	add	r7, sp, #0
 8005802:	60f8      	str	r0, [r7, #12]
 8005804:	60b9      	str	r1, [r7, #8]
 8005806:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005808:	2300      	movs	r3, #0
 800580a:	75fb      	strb	r3, [r7, #23]
=======
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b086      	sub	sp, #24
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	60f8      	str	r0, [r7, #12]
 8005fec:	60b9      	str	r1, [r7, #8]
 8005fee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	75fb      	strb	r3, [r7, #23]
>>>>>>> Stashed changes
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
<<<<<<< Updated upstream
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005812:	2b01      	cmp	r3, #1
 8005814:	d101      	bne.n	800581a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005816:	2302      	movs	r3, #2
 8005818:	e0ff      	b.n	8005a1a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	2201      	movs	r2, #1
 800581e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2b14      	cmp	r3, #20
 8005826:	f200 80f0 	bhi.w	8005a0a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800582a:	a201      	add	r2, pc, #4	@ (adr r2, 8005830 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800582c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005830:	08005885 	.word	0x08005885
 8005834:	08005a0b 	.word	0x08005a0b
 8005838:	08005a0b 	.word	0x08005a0b
 800583c:	08005a0b 	.word	0x08005a0b
 8005840:	080058c5 	.word	0x080058c5
 8005844:	08005a0b 	.word	0x08005a0b
 8005848:	08005a0b 	.word	0x08005a0b
 800584c:	08005a0b 	.word	0x08005a0b
 8005850:	08005907 	.word	0x08005907
 8005854:	08005a0b 	.word	0x08005a0b
 8005858:	08005a0b 	.word	0x08005a0b
 800585c:	08005a0b 	.word	0x08005a0b
 8005860:	08005947 	.word	0x08005947
 8005864:	08005a0b 	.word	0x08005a0b
 8005868:	08005a0b 	.word	0x08005a0b
 800586c:	08005a0b 	.word	0x08005a0b
 8005870:	08005989 	.word	0x08005989
 8005874:	08005a0b 	.word	0x08005a0b
 8005878:	08005a0b 	.word	0x08005a0b
 800587c:	08005a0b 	.word	0x08005a0b
 8005880:	080059c9 	.word	0x080059c9
=======
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005ffa:	2b01      	cmp	r3, #1
 8005ffc:	d101      	bne.n	8006002 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005ffe:	2302      	movs	r3, #2
 8006000:	e0ff      	b.n	8006202 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	2201      	movs	r2, #1
 8006006:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2b14      	cmp	r3, #20
 800600e:	f200 80f0 	bhi.w	80061f2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006012:	a201      	add	r2, pc, #4	@ (adr r2, 8006018 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006014:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006018:	0800606d 	.word	0x0800606d
 800601c:	080061f3 	.word	0x080061f3
 8006020:	080061f3 	.word	0x080061f3
 8006024:	080061f3 	.word	0x080061f3
 8006028:	080060ad 	.word	0x080060ad
 800602c:	080061f3 	.word	0x080061f3
 8006030:	080061f3 	.word	0x080061f3
 8006034:	080061f3 	.word	0x080061f3
 8006038:	080060ef 	.word	0x080060ef
 800603c:	080061f3 	.word	0x080061f3
 8006040:	080061f3 	.word	0x080061f3
 8006044:	080061f3 	.word	0x080061f3
 8006048:	0800612f 	.word	0x0800612f
 800604c:	080061f3 	.word	0x080061f3
 8006050:	080061f3 	.word	0x080061f3
 8006054:	080061f3 	.word	0x080061f3
 8006058:	08006171 	.word	0x08006171
 800605c:	080061f3 	.word	0x080061f3
 8006060:	080061f3 	.word	0x080061f3
 8006064:	080061f3 	.word	0x080061f3
 8006068:	080061b1 	.word	0x080061b1
>>>>>>> Stashed changes
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
<<<<<<< Updated upstream
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	68b9      	ldr	r1, [r7, #8]
 800588a:	4618      	mov	r0, r3
 800588c:	f000 fa62 	bl	8005d54 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	699a      	ldr	r2, [r3, #24]
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f042 0208 	orr.w	r2, r2, #8
 800589e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	699a      	ldr	r2, [r3, #24]
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f022 0204 	bic.w	r2, r2, #4
 80058ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	6999      	ldr	r1, [r3, #24]
 80058b6:	68bb      	ldr	r3, [r7, #8]
 80058b8:	691a      	ldr	r2, [r3, #16]
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	430a      	orrs	r2, r1
 80058c0:	619a      	str	r2, [r3, #24]
      break;
 80058c2:	e0a5      	b.n	8005a10 <HAL_TIM_PWM_ConfigChannel+0x214>
=======
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	68b9      	ldr	r1, [r7, #8]
 8006072:	4618      	mov	r0, r3
 8006074:	f000 f998 	bl	80063a8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	699a      	ldr	r2, [r3, #24]
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f042 0208 	orr.w	r2, r2, #8
 8006086:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	699a      	ldr	r2, [r3, #24]
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f022 0204 	bic.w	r2, r2, #4
 8006096:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	6999      	ldr	r1, [r3, #24]
 800609e:	68bb      	ldr	r3, [r7, #8]
 80060a0:	691a      	ldr	r2, [r3, #16]
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	430a      	orrs	r2, r1
 80060a8:	619a      	str	r2, [r3, #24]
      break;
 80060aa:	e0a5      	b.n	80061f8 <HAL_TIM_PWM_ConfigChannel+0x214>
>>>>>>> Stashed changes
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
<<<<<<< Updated upstream
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	68b9      	ldr	r1, [r7, #8]
 80058ca:	4618      	mov	r0, r3
 80058cc:	f000 fad2 	bl	8005e74 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	699a      	ldr	r2, [r3, #24]
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80058de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	699a      	ldr	r2, [r3, #24]
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80058ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	6999      	ldr	r1, [r3, #24]
 80058f6:	68bb      	ldr	r3, [r7, #8]
 80058f8:	691b      	ldr	r3, [r3, #16]
 80058fa:	021a      	lsls	r2, r3, #8
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	430a      	orrs	r2, r1
 8005902:	619a      	str	r2, [r3, #24]
      break;
 8005904:	e084      	b.n	8005a10 <HAL_TIM_PWM_ConfigChannel+0x214>
=======
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	68b9      	ldr	r1, [r7, #8]
 80060b2:	4618      	mov	r0, r3
 80060b4:	f000 fa08 	bl	80064c8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	699a      	ldr	r2, [r3, #24]
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80060c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	699a      	ldr	r2, [r3, #24]
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80060d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	6999      	ldr	r1, [r3, #24]
 80060de:	68bb      	ldr	r3, [r7, #8]
 80060e0:	691b      	ldr	r3, [r3, #16]
 80060e2:	021a      	lsls	r2, r3, #8
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	430a      	orrs	r2, r1
 80060ea:	619a      	str	r2, [r3, #24]
      break;
 80060ec:	e084      	b.n	80061f8 <HAL_TIM_PWM_ConfigChannel+0x214>
>>>>>>> Stashed changes
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
<<<<<<< Updated upstream
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	68b9      	ldr	r1, [r7, #8]
 800590c:	4618      	mov	r0, r3
 800590e:	f000 fb3b 	bl	8005f88 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	69da      	ldr	r2, [r3, #28]
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f042 0208 	orr.w	r2, r2, #8
 8005920:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	69da      	ldr	r2, [r3, #28]
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f022 0204 	bic.w	r2, r2, #4
 8005930:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	69d9      	ldr	r1, [r3, #28]
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	691a      	ldr	r2, [r3, #16]
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	430a      	orrs	r2, r1
 8005942:	61da      	str	r2, [r3, #28]
      break;
 8005944:	e064      	b.n	8005a10 <HAL_TIM_PWM_ConfigChannel+0x214>
=======
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	68b9      	ldr	r1, [r7, #8]
 80060f4:	4618      	mov	r0, r3
 80060f6:	f000 fa71 	bl	80065dc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	69da      	ldr	r2, [r3, #28]
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f042 0208 	orr.w	r2, r2, #8
 8006108:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	69da      	ldr	r2, [r3, #28]
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f022 0204 	bic.w	r2, r2, #4
 8006118:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	69d9      	ldr	r1, [r3, #28]
 8006120:	68bb      	ldr	r3, [r7, #8]
 8006122:	691a      	ldr	r2, [r3, #16]
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	430a      	orrs	r2, r1
 800612a:	61da      	str	r2, [r3, #28]
      break;
 800612c:	e064      	b.n	80061f8 <HAL_TIM_PWM_ConfigChannel+0x214>
>>>>>>> Stashed changes
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
<<<<<<< Updated upstream
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	68b9      	ldr	r1, [r7, #8]
 800594c:	4618      	mov	r0, r3
 800594e:	f000 fba3 	bl	8006098 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	69da      	ldr	r2, [r3, #28]
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005960:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	69da      	ldr	r2, [r3, #28]
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005970:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	69d9      	ldr	r1, [r3, #28]
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	691b      	ldr	r3, [r3, #16]
 800597c:	021a      	lsls	r2, r3, #8
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	430a      	orrs	r2, r1
 8005984:	61da      	str	r2, [r3, #28]
      break;
 8005986:	e043      	b.n	8005a10 <HAL_TIM_PWM_ConfigChannel+0x214>
=======
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	68b9      	ldr	r1, [r7, #8]
 8006134:	4618      	mov	r0, r3
 8006136:	f000 fad9 	bl	80066ec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	69da      	ldr	r2, [r3, #28]
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006148:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	69da      	ldr	r2, [r3, #28]
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006158:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	69d9      	ldr	r1, [r3, #28]
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	691b      	ldr	r3, [r3, #16]
 8006164:	021a      	lsls	r2, r3, #8
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	430a      	orrs	r2, r1
 800616c:	61da      	str	r2, [r3, #28]
      break;
 800616e:	e043      	b.n	80061f8 <HAL_TIM_PWM_ConfigChannel+0x214>
>>>>>>> Stashed changes
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
<<<<<<< Updated upstream
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	68b9      	ldr	r1, [r7, #8]
 800598e:	4618      	mov	r0, r3
 8005990:	f000 fbec 	bl	800616c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f042 0208 	orr.w	r2, r2, #8
 80059a2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f022 0204 	bic.w	r2, r2, #4
 80059b2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	691a      	ldr	r2, [r3, #16]
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	430a      	orrs	r2, r1
 80059c4:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80059c6:	e023      	b.n	8005a10 <HAL_TIM_PWM_ConfigChannel+0x214>
=======
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	68b9      	ldr	r1, [r7, #8]
 8006176:	4618      	mov	r0, r3
 8006178:	f000 fb22 	bl	80067c0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f042 0208 	orr.w	r2, r2, #8
 800618a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f022 0204 	bic.w	r2, r2, #4
 800619a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80061a2:	68bb      	ldr	r3, [r7, #8]
 80061a4:	691a      	ldr	r2, [r3, #16]
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	430a      	orrs	r2, r1
 80061ac:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80061ae:	e023      	b.n	80061f8 <HAL_TIM_PWM_ConfigChannel+0x214>
>>>>>>> Stashed changes
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
<<<<<<< Updated upstream
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	68b9      	ldr	r1, [r7, #8]
 80059ce:	4618      	mov	r0, r3
 80059d0:	f000 fc30 	bl	8006234 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80059e2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80059f2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80059fa:	68bb      	ldr	r3, [r7, #8]
 80059fc:	691b      	ldr	r3, [r3, #16]
 80059fe:	021a      	lsls	r2, r3, #8
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	430a      	orrs	r2, r1
 8005a06:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005a08:	e002      	b.n	8005a10 <HAL_TIM_PWM_ConfigChannel+0x214>
=======
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	68b9      	ldr	r1, [r7, #8]
 80061b6:	4618      	mov	r0, r3
 80061b8:	f000 fb66 	bl	8006888 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80061ca:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80061da:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80061e2:	68bb      	ldr	r3, [r7, #8]
 80061e4:	691b      	ldr	r3, [r3, #16]
 80061e6:	021a      	lsls	r2, r3, #8
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	430a      	orrs	r2, r1
 80061ee:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80061f0:	e002      	b.n	80061f8 <HAL_TIM_PWM_ConfigChannel+0x214>
>>>>>>> Stashed changes
    }

    default:
      status = HAL_ERROR;
<<<<<<< Updated upstream
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	75fb      	strb	r3, [r7, #23]
      break;
 8005a0e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	2200      	movs	r2, #0
 8005a14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005a18:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	3718      	adds	r7, #24
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	bd80      	pop	{r7, pc}
 8005a22:	bf00      	nop

08005a24 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b084      	sub	sp, #16
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
 8005a2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005a2e:	2300      	movs	r3, #0
 8005a30:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005a38:	2b01      	cmp	r3, #1
 8005a3a:	d101      	bne.n	8005a40 <HAL_TIM_ConfigClockSource+0x1c>
 8005a3c:	2302      	movs	r3, #2
 8005a3e:	e0b6      	b.n	8005bae <HAL_TIM_ConfigClockSource+0x18a>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2201      	movs	r2, #1
 8005a44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2202      	movs	r2, #2
 8005a4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	689b      	ldr	r3, [r3, #8]
 8005a56:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005a5e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005a62:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a64:	68bb      	ldr	r3, [r7, #8]
 8005a66:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005a6a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	68ba      	ldr	r2, [r7, #8]
 8005a72:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005a7c:	d03e      	beq.n	8005afc <HAL_TIM_ConfigClockSource+0xd8>
 8005a7e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005a82:	f200 8087 	bhi.w	8005b94 <HAL_TIM_ConfigClockSource+0x170>
 8005a86:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a8a:	f000 8086 	beq.w	8005b9a <HAL_TIM_ConfigClockSource+0x176>
 8005a8e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a92:	d87f      	bhi.n	8005b94 <HAL_TIM_ConfigClockSource+0x170>
 8005a94:	2b70      	cmp	r3, #112	@ 0x70
 8005a96:	d01a      	beq.n	8005ace <HAL_TIM_ConfigClockSource+0xaa>
 8005a98:	2b70      	cmp	r3, #112	@ 0x70
 8005a9a:	d87b      	bhi.n	8005b94 <HAL_TIM_ConfigClockSource+0x170>
 8005a9c:	2b60      	cmp	r3, #96	@ 0x60
 8005a9e:	d050      	beq.n	8005b42 <HAL_TIM_ConfigClockSource+0x11e>
 8005aa0:	2b60      	cmp	r3, #96	@ 0x60
 8005aa2:	d877      	bhi.n	8005b94 <HAL_TIM_ConfigClockSource+0x170>
 8005aa4:	2b50      	cmp	r3, #80	@ 0x50
 8005aa6:	d03c      	beq.n	8005b22 <HAL_TIM_ConfigClockSource+0xfe>
 8005aa8:	2b50      	cmp	r3, #80	@ 0x50
 8005aaa:	d873      	bhi.n	8005b94 <HAL_TIM_ConfigClockSource+0x170>
 8005aac:	2b40      	cmp	r3, #64	@ 0x40
 8005aae:	d058      	beq.n	8005b62 <HAL_TIM_ConfigClockSource+0x13e>
 8005ab0:	2b40      	cmp	r3, #64	@ 0x40
 8005ab2:	d86f      	bhi.n	8005b94 <HAL_TIM_ConfigClockSource+0x170>
 8005ab4:	2b30      	cmp	r3, #48	@ 0x30
 8005ab6:	d064      	beq.n	8005b82 <HAL_TIM_ConfigClockSource+0x15e>
 8005ab8:	2b30      	cmp	r3, #48	@ 0x30
 8005aba:	d86b      	bhi.n	8005b94 <HAL_TIM_ConfigClockSource+0x170>
 8005abc:	2b20      	cmp	r3, #32
 8005abe:	d060      	beq.n	8005b82 <HAL_TIM_ConfigClockSource+0x15e>
 8005ac0:	2b20      	cmp	r3, #32
 8005ac2:	d867      	bhi.n	8005b94 <HAL_TIM_ConfigClockSource+0x170>
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d05c      	beq.n	8005b82 <HAL_TIM_ConfigClockSource+0x15e>
 8005ac8:	2b10      	cmp	r3, #16
 8005aca:	d05a      	beq.n	8005b82 <HAL_TIM_ConfigClockSource+0x15e>
 8005acc:	e062      	b.n	8005b94 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005ade:	f000 fc89 	bl	80063f4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	689b      	ldr	r3, [r3, #8]
 8005ae8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005aea:	68bb      	ldr	r3, [r7, #8]
 8005aec:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005af0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	68ba      	ldr	r2, [r7, #8]
 8005af8:	609a      	str	r2, [r3, #8]
      break;
 8005afa:	e04f      	b.n	8005b9c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005b0c:	f000 fc72 	bl	80063f4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	689a      	ldr	r2, [r3, #8]
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005b1e:	609a      	str	r2, [r3, #8]
      break;
 8005b20:	e03c      	b.n	8005b9c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b2e:	461a      	mov	r2, r3
 8005b30:	f000 fbe6 	bl	8006300 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	2150      	movs	r1, #80	@ 0x50
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	f000 fc3f 	bl	80063be <TIM_ITRx_SetConfig>
      break;
 8005b40:	e02c      	b.n	8005b9c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005b4e:	461a      	mov	r2, r3
 8005b50:	f000 fc05 	bl	800635e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	2160      	movs	r1, #96	@ 0x60
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	f000 fc2f 	bl	80063be <TIM_ITRx_SetConfig>
      break;
 8005b60:	e01c      	b.n	8005b9c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b6e:	461a      	mov	r2, r3
 8005b70:	f000 fbc6 	bl	8006300 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	2140      	movs	r1, #64	@ 0x40
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	f000 fc1f 	bl	80063be <TIM_ITRx_SetConfig>
      break;
 8005b80:	e00c      	b.n	8005b9c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681a      	ldr	r2, [r3, #0]
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	4619      	mov	r1, r3
 8005b8c:	4610      	mov	r0, r2
 8005b8e:	f000 fc16 	bl	80063be <TIM_ITRx_SetConfig>
      break;
 8005b92:	e003      	b.n	8005b9c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005b94:	2301      	movs	r3, #1
 8005b96:	73fb      	strb	r3, [r7, #15]
      break;
 8005b98:	e000      	b.n	8005b9c <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005b9a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2201      	movs	r2, #1
 8005ba0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005bac:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bae:	4618      	mov	r0, r3
 8005bb0:	3710      	adds	r7, #16
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	bd80      	pop	{r7, pc}

08005bb6 <HAL_TIM_OC_DelayElapsedCallback>:
=======
 80061f2:	2301      	movs	r3, #1
 80061f4:	75fb      	strb	r3, [r7, #23]
      break;
 80061f6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	2200      	movs	r2, #0
 80061fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006200:	7dfb      	ldrb	r3, [r7, #23]
}
 8006202:	4618      	mov	r0, r3
 8006204:	3718      	adds	r7, #24
 8006206:	46bd      	mov	sp, r7
 8006208:	bd80      	pop	{r7, pc}
 800620a:	bf00      	nop

0800620c <HAL_TIM_OC_DelayElapsedCallback>:
>>>>>>> Stashed changes
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 8005bb6:	b480      	push	{r7}
 8005bb8:	b083      	sub	sp, #12
 8005bba:	af00      	add	r7, sp, #0
 8005bbc:	6078      	str	r0, [r7, #4]
=======
 800620c:	b480      	push	{r7}
 800620e:	b083      	sub	sp, #12
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
<<<<<<< Updated upstream
 8005bbe:	bf00      	nop
 8005bc0:	370c      	adds	r7, #12
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc8:	4770      	bx	lr

08005bca <HAL_TIM_IC_CaptureCallback>:
=======
 8006214:	bf00      	nop
 8006216:	370c      	adds	r7, #12
 8006218:	46bd      	mov	sp, r7
 800621a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621e:	4770      	bx	lr

08006220 <HAL_TIM_IC_CaptureCallback>:
>>>>>>> Stashed changes
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 8005bca:	b480      	push	{r7}
 8005bcc:	b083      	sub	sp, #12
 8005bce:	af00      	add	r7, sp, #0
 8005bd0:	6078      	str	r0, [r7, #4]
=======
 8006220:	b480      	push	{r7}
 8006222:	b083      	sub	sp, #12
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
<<<<<<< Updated upstream
 8005bd2:	bf00      	nop
 8005bd4:	370c      	adds	r7, #12
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bdc:	4770      	bx	lr

08005bde <HAL_TIM_PWM_PulseFinishedCallback>:
=======
 8006228:	bf00      	nop
 800622a:	370c      	adds	r7, #12
 800622c:	46bd      	mov	sp, r7
 800622e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006232:	4770      	bx	lr

08006234 <HAL_TIM_PWM_PulseFinishedCallback>:
>>>>>>> Stashed changes
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 8005bde:	b480      	push	{r7}
 8005be0:	b083      	sub	sp, #12
 8005be2:	af00      	add	r7, sp, #0
 8005be4:	6078      	str	r0, [r7, #4]
=======
 8006234:	b480      	push	{r7}
 8006236:	b083      	sub	sp, #12
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
<<<<<<< Updated upstream
 8005be6:	bf00      	nop
 8005be8:	370c      	adds	r7, #12
 8005bea:	46bd      	mov	sp, r7
 8005bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf0:	4770      	bx	lr

08005bf2 <HAL_TIM_TriggerCallback>:
=======
 800623c:	bf00      	nop
 800623e:	370c      	adds	r7, #12
 8006240:	46bd      	mov	sp, r7
 8006242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006246:	4770      	bx	lr

08006248 <HAL_TIM_TriggerCallback>:
>>>>>>> Stashed changes
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 8005bf2:	b480      	push	{r7}
 8005bf4:	b083      	sub	sp, #12
 8005bf6:	af00      	add	r7, sp, #0
 8005bf8:	6078      	str	r0, [r7, #4]
=======
 8006248:	b480      	push	{r7}
 800624a:	b083      	sub	sp, #12
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
<<<<<<< Updated upstream
 8005bfa:	bf00      	nop
 8005bfc:	370c      	adds	r7, #12
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c04:	4770      	bx	lr
	...

08005c08 <TIM_Base_SetConfig>:
=======
 8006250:	bf00      	nop
 8006252:	370c      	adds	r7, #12
 8006254:	46bd      	mov	sp, r7
 8006256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625a:	4770      	bx	lr

0800625c <TIM_Base_SetConfig>:
>>>>>>> Stashed changes
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
<<<<<<< Updated upstream
 8005c08:	b480      	push	{r7}
 8005c0a:	b085      	sub	sp, #20
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
 8005c10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	4a46      	ldr	r2, [pc, #280]	@ (8005d34 <TIM_Base_SetConfig+0x12c>)
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d013      	beq.n	8005c48 <TIM_Base_SetConfig+0x40>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c26:	d00f      	beq.n	8005c48 <TIM_Base_SetConfig+0x40>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	4a43      	ldr	r2, [pc, #268]	@ (8005d38 <TIM_Base_SetConfig+0x130>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d00b      	beq.n	8005c48 <TIM_Base_SetConfig+0x40>
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	4a42      	ldr	r2, [pc, #264]	@ (8005d3c <TIM_Base_SetConfig+0x134>)
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d007      	beq.n	8005c48 <TIM_Base_SetConfig+0x40>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	4a41      	ldr	r2, [pc, #260]	@ (8005d40 <TIM_Base_SetConfig+0x138>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d003      	beq.n	8005c48 <TIM_Base_SetConfig+0x40>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	4a40      	ldr	r2, [pc, #256]	@ (8005d44 <TIM_Base_SetConfig+0x13c>)
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d108      	bne.n	8005c5a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c4e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	685b      	ldr	r3, [r3, #4]
 8005c54:	68fa      	ldr	r2, [r7, #12]
 8005c56:	4313      	orrs	r3, r2
 8005c58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	4a35      	ldr	r2, [pc, #212]	@ (8005d34 <TIM_Base_SetConfig+0x12c>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d01f      	beq.n	8005ca2 <TIM_Base_SetConfig+0x9a>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c68:	d01b      	beq.n	8005ca2 <TIM_Base_SetConfig+0x9a>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	4a32      	ldr	r2, [pc, #200]	@ (8005d38 <TIM_Base_SetConfig+0x130>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d017      	beq.n	8005ca2 <TIM_Base_SetConfig+0x9a>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	4a31      	ldr	r2, [pc, #196]	@ (8005d3c <TIM_Base_SetConfig+0x134>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d013      	beq.n	8005ca2 <TIM_Base_SetConfig+0x9a>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	4a30      	ldr	r2, [pc, #192]	@ (8005d40 <TIM_Base_SetConfig+0x138>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d00f      	beq.n	8005ca2 <TIM_Base_SetConfig+0x9a>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	4a2f      	ldr	r2, [pc, #188]	@ (8005d44 <TIM_Base_SetConfig+0x13c>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d00b      	beq.n	8005ca2 <TIM_Base_SetConfig+0x9a>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	4a2e      	ldr	r2, [pc, #184]	@ (8005d48 <TIM_Base_SetConfig+0x140>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d007      	beq.n	8005ca2 <TIM_Base_SetConfig+0x9a>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	4a2d      	ldr	r2, [pc, #180]	@ (8005d4c <TIM_Base_SetConfig+0x144>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d003      	beq.n	8005ca2 <TIM_Base_SetConfig+0x9a>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	4a2c      	ldr	r2, [pc, #176]	@ (8005d50 <TIM_Base_SetConfig+0x148>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d108      	bne.n	8005cb4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005ca8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	68db      	ldr	r3, [r3, #12]
 8005cae:	68fa      	ldr	r2, [r7, #12]
 8005cb0:	4313      	orrs	r3, r2
 8005cb2:	60fb      	str	r3, [r7, #12]
=======
 800625c:	b480      	push	{r7}
 800625e:	b085      	sub	sp, #20
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
 8006264:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	4a46      	ldr	r2, [pc, #280]	@ (8006388 <TIM_Base_SetConfig+0x12c>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d013      	beq.n	800629c <TIM_Base_SetConfig+0x40>
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800627a:	d00f      	beq.n	800629c <TIM_Base_SetConfig+0x40>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	4a43      	ldr	r2, [pc, #268]	@ (800638c <TIM_Base_SetConfig+0x130>)
 8006280:	4293      	cmp	r3, r2
 8006282:	d00b      	beq.n	800629c <TIM_Base_SetConfig+0x40>
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	4a42      	ldr	r2, [pc, #264]	@ (8006390 <TIM_Base_SetConfig+0x134>)
 8006288:	4293      	cmp	r3, r2
 800628a:	d007      	beq.n	800629c <TIM_Base_SetConfig+0x40>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	4a41      	ldr	r2, [pc, #260]	@ (8006394 <TIM_Base_SetConfig+0x138>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d003      	beq.n	800629c <TIM_Base_SetConfig+0x40>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	4a40      	ldr	r2, [pc, #256]	@ (8006398 <TIM_Base_SetConfig+0x13c>)
 8006298:	4293      	cmp	r3, r2
 800629a:	d108      	bne.n	80062ae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	685b      	ldr	r3, [r3, #4]
 80062a8:	68fa      	ldr	r2, [r7, #12]
 80062aa:	4313      	orrs	r3, r2
 80062ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	4a35      	ldr	r2, [pc, #212]	@ (8006388 <TIM_Base_SetConfig+0x12c>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d01f      	beq.n	80062f6 <TIM_Base_SetConfig+0x9a>
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80062bc:	d01b      	beq.n	80062f6 <TIM_Base_SetConfig+0x9a>
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	4a32      	ldr	r2, [pc, #200]	@ (800638c <TIM_Base_SetConfig+0x130>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d017      	beq.n	80062f6 <TIM_Base_SetConfig+0x9a>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	4a31      	ldr	r2, [pc, #196]	@ (8006390 <TIM_Base_SetConfig+0x134>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d013      	beq.n	80062f6 <TIM_Base_SetConfig+0x9a>
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	4a30      	ldr	r2, [pc, #192]	@ (8006394 <TIM_Base_SetConfig+0x138>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d00f      	beq.n	80062f6 <TIM_Base_SetConfig+0x9a>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	4a2f      	ldr	r2, [pc, #188]	@ (8006398 <TIM_Base_SetConfig+0x13c>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d00b      	beq.n	80062f6 <TIM_Base_SetConfig+0x9a>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	4a2e      	ldr	r2, [pc, #184]	@ (800639c <TIM_Base_SetConfig+0x140>)
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d007      	beq.n	80062f6 <TIM_Base_SetConfig+0x9a>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	4a2d      	ldr	r2, [pc, #180]	@ (80063a0 <TIM_Base_SetConfig+0x144>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d003      	beq.n	80062f6 <TIM_Base_SetConfig+0x9a>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	4a2c      	ldr	r2, [pc, #176]	@ (80063a4 <TIM_Base_SetConfig+0x148>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d108      	bne.n	8006308 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80062fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	68db      	ldr	r3, [r3, #12]
 8006302:	68fa      	ldr	r2, [r7, #12]
 8006304:	4313      	orrs	r3, r2
 8006306:	60fb      	str	r3, [r7, #12]
>>>>>>> Stashed changes
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
<<<<<<< Updated upstream
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	695b      	ldr	r3, [r3, #20]
 8005cbe:	4313      	orrs	r3, r2
 8005cc0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	68fa      	ldr	r2, [r7, #12]
 8005cc6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	689a      	ldr	r2, [r3, #8]
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	681a      	ldr	r2, [r3, #0]
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	4a16      	ldr	r2, [pc, #88]	@ (8005d34 <TIM_Base_SetConfig+0x12c>)
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d00f      	beq.n	8005d00 <TIM_Base_SetConfig+0xf8>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	4a18      	ldr	r2, [pc, #96]	@ (8005d44 <TIM_Base_SetConfig+0x13c>)
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d00b      	beq.n	8005d00 <TIM_Base_SetConfig+0xf8>
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	4a17      	ldr	r2, [pc, #92]	@ (8005d48 <TIM_Base_SetConfig+0x140>)
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d007      	beq.n	8005d00 <TIM_Base_SetConfig+0xf8>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	4a16      	ldr	r2, [pc, #88]	@ (8005d4c <TIM_Base_SetConfig+0x144>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d003      	beq.n	8005d00 <TIM_Base_SetConfig+0xf8>
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	4a15      	ldr	r2, [pc, #84]	@ (8005d50 <TIM_Base_SetConfig+0x148>)
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d103      	bne.n	8005d08 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	691a      	ldr	r2, [r3, #16]
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	631a      	str	r2, [r3, #48]	@ 0x30
=======
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	695b      	ldr	r3, [r3, #20]
 8006312:	4313      	orrs	r3, r2
 8006314:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	68fa      	ldr	r2, [r7, #12]
 800631a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	689a      	ldr	r2, [r3, #8]
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	681a      	ldr	r2, [r3, #0]
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	4a16      	ldr	r2, [pc, #88]	@ (8006388 <TIM_Base_SetConfig+0x12c>)
 8006330:	4293      	cmp	r3, r2
 8006332:	d00f      	beq.n	8006354 <TIM_Base_SetConfig+0xf8>
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	4a18      	ldr	r2, [pc, #96]	@ (8006398 <TIM_Base_SetConfig+0x13c>)
 8006338:	4293      	cmp	r3, r2
 800633a:	d00b      	beq.n	8006354 <TIM_Base_SetConfig+0xf8>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	4a17      	ldr	r2, [pc, #92]	@ (800639c <TIM_Base_SetConfig+0x140>)
 8006340:	4293      	cmp	r3, r2
 8006342:	d007      	beq.n	8006354 <TIM_Base_SetConfig+0xf8>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	4a16      	ldr	r2, [pc, #88]	@ (80063a0 <TIM_Base_SetConfig+0x144>)
 8006348:	4293      	cmp	r3, r2
 800634a:	d003      	beq.n	8006354 <TIM_Base_SetConfig+0xf8>
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	4a15      	ldr	r2, [pc, #84]	@ (80063a4 <TIM_Base_SetConfig+0x148>)
 8006350:	4293      	cmp	r3, r2
 8006352:	d103      	bne.n	800635c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	691a      	ldr	r2, [r3, #16]
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	631a      	str	r2, [r3, #48]	@ 0x30
>>>>>>> Stashed changes
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
<<<<<<< Updated upstream
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2201      	movs	r2, #1
 8005d0c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	691b      	ldr	r3, [r3, #16]
 8005d12:	f003 0301 	and.w	r3, r3, #1
 8005d16:	2b01      	cmp	r3, #1
 8005d18:	d105      	bne.n	8005d26 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	691b      	ldr	r3, [r3, #16]
 8005d1e:	f023 0201 	bic.w	r2, r3, #1
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	611a      	str	r2, [r3, #16]
  }
}
 8005d26:	bf00      	nop
 8005d28:	3714      	adds	r7, #20
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d30:	4770      	bx	lr
 8005d32:	bf00      	nop
 8005d34:	40012c00 	.word	0x40012c00
 8005d38:	40000400 	.word	0x40000400
 8005d3c:	40000800 	.word	0x40000800
 8005d40:	40000c00 	.word	0x40000c00
 8005d44:	40013400 	.word	0x40013400
 8005d48:	40014000 	.word	0x40014000
 8005d4c:	40014400 	.word	0x40014400
 8005d50:	40014800 	.word	0x40014800

08005d54 <TIM_OC1_SetConfig>:
=======
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2201      	movs	r2, #1
 8006360:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	691b      	ldr	r3, [r3, #16]
 8006366:	f003 0301 	and.w	r3, r3, #1
 800636a:	2b01      	cmp	r3, #1
 800636c:	d105      	bne.n	800637a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	691b      	ldr	r3, [r3, #16]
 8006372:	f023 0201 	bic.w	r2, r3, #1
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	611a      	str	r2, [r3, #16]
  }
}
 800637a:	bf00      	nop
 800637c:	3714      	adds	r7, #20
 800637e:	46bd      	mov	sp, r7
 8006380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006384:	4770      	bx	lr
 8006386:	bf00      	nop
 8006388:	40012c00 	.word	0x40012c00
 800638c:	40000400 	.word	0x40000400
 8006390:	40000800 	.word	0x40000800
 8006394:	40000c00 	.word	0x40000c00
 8006398:	40013400 	.word	0x40013400
 800639c:	40014000 	.word	0x40014000
 80063a0:	40014400 	.word	0x40014400
 80063a4:	40014800 	.word	0x40014800

080063a8 <TIM_OC1_SetConfig>:
>>>>>>> Stashed changes
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
<<<<<<< Updated upstream
 8005d54:	b480      	push	{r7}
 8005d56:	b087      	sub	sp, #28
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
 8005d5c:	6039      	str	r1, [r7, #0]
=======
 80063a8:	b480      	push	{r7}
 80063aa:	b087      	sub	sp, #28
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
 80063b0:	6039      	str	r1, [r7, #0]
>>>>>>> Stashed changes
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
<<<<<<< Updated upstream
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6a1b      	ldr	r3, [r3, #32]
 8005d62:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6a1b      	ldr	r3, [r3, #32]
 8005d68:	f023 0201 	bic.w	r2, r3, #1
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	685b      	ldr	r3, [r3, #4]
 8005d74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	699b      	ldr	r3, [r3, #24]
 8005d7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005d82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	f023 0303 	bic.w	r3, r3, #3
 8005d8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	68fa      	ldr	r2, [r7, #12]
 8005d96:	4313      	orrs	r3, r2
 8005d98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005d9a:	697b      	ldr	r3, [r7, #20]
 8005d9c:	f023 0302 	bic.w	r3, r3, #2
 8005da0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	689b      	ldr	r3, [r3, #8]
 8005da6:	697a      	ldr	r2, [r7, #20]
 8005da8:	4313      	orrs	r3, r2
 8005daa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	4a2c      	ldr	r2, [pc, #176]	@ (8005e60 <TIM_OC1_SetConfig+0x10c>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d00f      	beq.n	8005dd4 <TIM_OC1_SetConfig+0x80>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	4a2b      	ldr	r2, [pc, #172]	@ (8005e64 <TIM_OC1_SetConfig+0x110>)
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d00b      	beq.n	8005dd4 <TIM_OC1_SetConfig+0x80>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	4a2a      	ldr	r2, [pc, #168]	@ (8005e68 <TIM_OC1_SetConfig+0x114>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d007      	beq.n	8005dd4 <TIM_OC1_SetConfig+0x80>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	4a29      	ldr	r2, [pc, #164]	@ (8005e6c <TIM_OC1_SetConfig+0x118>)
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d003      	beq.n	8005dd4 <TIM_OC1_SetConfig+0x80>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	4a28      	ldr	r2, [pc, #160]	@ (8005e70 <TIM_OC1_SetConfig+0x11c>)
 8005dd0:	4293      	cmp	r3, r2
 8005dd2:	d10c      	bne.n	8005dee <TIM_OC1_SetConfig+0x9a>
=======
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6a1b      	ldr	r3, [r3, #32]
 80063b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	6a1b      	ldr	r3, [r3, #32]
 80063bc:	f023 0201 	bic.w	r2, r3, #1
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	685b      	ldr	r3, [r3, #4]
 80063c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	699b      	ldr	r3, [r3, #24]
 80063ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80063d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	f023 0303 	bic.w	r3, r3, #3
 80063e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	68fa      	ldr	r2, [r7, #12]
 80063ea:	4313      	orrs	r3, r2
 80063ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80063ee:	697b      	ldr	r3, [r7, #20]
 80063f0:	f023 0302 	bic.w	r3, r3, #2
 80063f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	689b      	ldr	r3, [r3, #8]
 80063fa:	697a      	ldr	r2, [r7, #20]
 80063fc:	4313      	orrs	r3, r2
 80063fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	4a2c      	ldr	r2, [pc, #176]	@ (80064b4 <TIM_OC1_SetConfig+0x10c>)
 8006404:	4293      	cmp	r3, r2
 8006406:	d00f      	beq.n	8006428 <TIM_OC1_SetConfig+0x80>
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	4a2b      	ldr	r2, [pc, #172]	@ (80064b8 <TIM_OC1_SetConfig+0x110>)
 800640c:	4293      	cmp	r3, r2
 800640e:	d00b      	beq.n	8006428 <TIM_OC1_SetConfig+0x80>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	4a2a      	ldr	r2, [pc, #168]	@ (80064bc <TIM_OC1_SetConfig+0x114>)
 8006414:	4293      	cmp	r3, r2
 8006416:	d007      	beq.n	8006428 <TIM_OC1_SetConfig+0x80>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	4a29      	ldr	r2, [pc, #164]	@ (80064c0 <TIM_OC1_SetConfig+0x118>)
 800641c:	4293      	cmp	r3, r2
 800641e:	d003      	beq.n	8006428 <TIM_OC1_SetConfig+0x80>
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	4a28      	ldr	r2, [pc, #160]	@ (80064c4 <TIM_OC1_SetConfig+0x11c>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d10c      	bne.n	8006442 <TIM_OC1_SetConfig+0x9a>
>>>>>>> Stashed changes
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
<<<<<<< Updated upstream
 8005dd4:	697b      	ldr	r3, [r7, #20]
 8005dd6:	f023 0308 	bic.w	r3, r3, #8
 8005dda:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	68db      	ldr	r3, [r3, #12]
 8005de0:	697a      	ldr	r2, [r7, #20]
 8005de2:	4313      	orrs	r3, r2
 8005de4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005de6:	697b      	ldr	r3, [r7, #20]
 8005de8:	f023 0304 	bic.w	r3, r3, #4
 8005dec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	4a1b      	ldr	r2, [pc, #108]	@ (8005e60 <TIM_OC1_SetConfig+0x10c>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d00f      	beq.n	8005e16 <TIM_OC1_SetConfig+0xc2>
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	4a1a      	ldr	r2, [pc, #104]	@ (8005e64 <TIM_OC1_SetConfig+0x110>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d00b      	beq.n	8005e16 <TIM_OC1_SetConfig+0xc2>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	4a19      	ldr	r2, [pc, #100]	@ (8005e68 <TIM_OC1_SetConfig+0x114>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d007      	beq.n	8005e16 <TIM_OC1_SetConfig+0xc2>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	4a18      	ldr	r2, [pc, #96]	@ (8005e6c <TIM_OC1_SetConfig+0x118>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d003      	beq.n	8005e16 <TIM_OC1_SetConfig+0xc2>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	4a17      	ldr	r2, [pc, #92]	@ (8005e70 <TIM_OC1_SetConfig+0x11c>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d111      	bne.n	8005e3a <TIM_OC1_SetConfig+0xe6>
=======
 8006428:	697b      	ldr	r3, [r7, #20]
 800642a:	f023 0308 	bic.w	r3, r3, #8
 800642e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	68db      	ldr	r3, [r3, #12]
 8006434:	697a      	ldr	r2, [r7, #20]
 8006436:	4313      	orrs	r3, r2
 8006438:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800643a:	697b      	ldr	r3, [r7, #20]
 800643c:	f023 0304 	bic.w	r3, r3, #4
 8006440:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	4a1b      	ldr	r2, [pc, #108]	@ (80064b4 <TIM_OC1_SetConfig+0x10c>)
 8006446:	4293      	cmp	r3, r2
 8006448:	d00f      	beq.n	800646a <TIM_OC1_SetConfig+0xc2>
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	4a1a      	ldr	r2, [pc, #104]	@ (80064b8 <TIM_OC1_SetConfig+0x110>)
 800644e:	4293      	cmp	r3, r2
 8006450:	d00b      	beq.n	800646a <TIM_OC1_SetConfig+0xc2>
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	4a19      	ldr	r2, [pc, #100]	@ (80064bc <TIM_OC1_SetConfig+0x114>)
 8006456:	4293      	cmp	r3, r2
 8006458:	d007      	beq.n	800646a <TIM_OC1_SetConfig+0xc2>
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	4a18      	ldr	r2, [pc, #96]	@ (80064c0 <TIM_OC1_SetConfig+0x118>)
 800645e:	4293      	cmp	r3, r2
 8006460:	d003      	beq.n	800646a <TIM_OC1_SetConfig+0xc2>
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	4a17      	ldr	r2, [pc, #92]	@ (80064c4 <TIM_OC1_SetConfig+0x11c>)
 8006466:	4293      	cmp	r3, r2
 8006468:	d111      	bne.n	800648e <TIM_OC1_SetConfig+0xe6>
>>>>>>> Stashed changes
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
<<<<<<< Updated upstream
 8005e16:	693b      	ldr	r3, [r7, #16]
 8005e18:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005e1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005e1e:	693b      	ldr	r3, [r7, #16]
 8005e20:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005e24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	695b      	ldr	r3, [r3, #20]
 8005e2a:	693a      	ldr	r2, [r7, #16]
 8005e2c:	4313      	orrs	r3, r2
 8005e2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	699b      	ldr	r3, [r3, #24]
 8005e34:	693a      	ldr	r2, [r7, #16]
 8005e36:	4313      	orrs	r3, r2
 8005e38:	613b      	str	r3, [r7, #16]
=======
 800646a:	693b      	ldr	r3, [r7, #16]
 800646c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006470:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006472:	693b      	ldr	r3, [r7, #16]
 8006474:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006478:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	695b      	ldr	r3, [r3, #20]
 800647e:	693a      	ldr	r2, [r7, #16]
 8006480:	4313      	orrs	r3, r2
 8006482:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	699b      	ldr	r3, [r3, #24]
 8006488:	693a      	ldr	r2, [r7, #16]
 800648a:	4313      	orrs	r3, r2
 800648c:	613b      	str	r3, [r7, #16]
>>>>>>> Stashed changes
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
<<<<<<< Updated upstream
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	693a      	ldr	r2, [r7, #16]
 8005e3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	68fa      	ldr	r2, [r7, #12]
 8005e44:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	685a      	ldr	r2, [r3, #4]
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	697a      	ldr	r2, [r7, #20]
 8005e52:	621a      	str	r2, [r3, #32]
}
 8005e54:	bf00      	nop
 8005e56:	371c      	adds	r7, #28
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5e:	4770      	bx	lr
 8005e60:	40012c00 	.word	0x40012c00
 8005e64:	40013400 	.word	0x40013400
 8005e68:	40014000 	.word	0x40014000
 8005e6c:	40014400 	.word	0x40014400
 8005e70:	40014800 	.word	0x40014800

08005e74 <TIM_OC2_SetConfig>:
=======
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	693a      	ldr	r2, [r7, #16]
 8006492:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	68fa      	ldr	r2, [r7, #12]
 8006498:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	685a      	ldr	r2, [r3, #4]
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	697a      	ldr	r2, [r7, #20]
 80064a6:	621a      	str	r2, [r3, #32]
}
 80064a8:	bf00      	nop
 80064aa:	371c      	adds	r7, #28
 80064ac:	46bd      	mov	sp, r7
 80064ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b2:	4770      	bx	lr
 80064b4:	40012c00 	.word	0x40012c00
 80064b8:	40013400 	.word	0x40013400
 80064bc:	40014000 	.word	0x40014000
 80064c0:	40014400 	.word	0x40014400
 80064c4:	40014800 	.word	0x40014800

080064c8 <TIM_OC2_SetConfig>:
>>>>>>> Stashed changes
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
<<<<<<< Updated upstream
 8005e74:	b480      	push	{r7}
 8005e76:	b087      	sub	sp, #28
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
 8005e7c:	6039      	str	r1, [r7, #0]
=======
 80064c8:	b480      	push	{r7}
 80064ca:	b087      	sub	sp, #28
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
 80064d0:	6039      	str	r1, [r7, #0]
>>>>>>> Stashed changes
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
<<<<<<< Updated upstream
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6a1b      	ldr	r3, [r3, #32]
 8005e82:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6a1b      	ldr	r3, [r3, #32]
 8005e88:	f023 0210 	bic.w	r2, r3, #16
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	685b      	ldr	r3, [r3, #4]
 8005e94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	699b      	ldr	r3, [r3, #24]
 8005e9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005ea2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005ea6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005eae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	021b      	lsls	r3, r3, #8
 8005eb6:	68fa      	ldr	r2, [r7, #12]
 8005eb8:	4313      	orrs	r3, r2
 8005eba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005ebc:	697b      	ldr	r3, [r7, #20]
 8005ebe:	f023 0320 	bic.w	r3, r3, #32
 8005ec2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	689b      	ldr	r3, [r3, #8]
 8005ec8:	011b      	lsls	r3, r3, #4
 8005eca:	697a      	ldr	r2, [r7, #20]
 8005ecc:	4313      	orrs	r3, r2
 8005ece:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	4a28      	ldr	r2, [pc, #160]	@ (8005f74 <TIM_OC2_SetConfig+0x100>)
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	d003      	beq.n	8005ee0 <TIM_OC2_SetConfig+0x6c>
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	4a27      	ldr	r2, [pc, #156]	@ (8005f78 <TIM_OC2_SetConfig+0x104>)
 8005edc:	4293      	cmp	r3, r2
 8005ede:	d10d      	bne.n	8005efc <TIM_OC2_SetConfig+0x88>
=======
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6a1b      	ldr	r3, [r3, #32]
 80064d6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6a1b      	ldr	r3, [r3, #32]
 80064dc:	f023 0210 	bic.w	r2, r3, #16
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	685b      	ldr	r3, [r3, #4]
 80064e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	699b      	ldr	r3, [r3, #24]
 80064ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80064f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80064fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006502:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	021b      	lsls	r3, r3, #8
 800650a:	68fa      	ldr	r2, [r7, #12]
 800650c:	4313      	orrs	r3, r2
 800650e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006510:	697b      	ldr	r3, [r7, #20]
 8006512:	f023 0320 	bic.w	r3, r3, #32
 8006516:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	689b      	ldr	r3, [r3, #8]
 800651c:	011b      	lsls	r3, r3, #4
 800651e:	697a      	ldr	r2, [r7, #20]
 8006520:	4313      	orrs	r3, r2
 8006522:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	4a28      	ldr	r2, [pc, #160]	@ (80065c8 <TIM_OC2_SetConfig+0x100>)
 8006528:	4293      	cmp	r3, r2
 800652a:	d003      	beq.n	8006534 <TIM_OC2_SetConfig+0x6c>
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	4a27      	ldr	r2, [pc, #156]	@ (80065cc <TIM_OC2_SetConfig+0x104>)
 8006530:	4293      	cmp	r3, r2
 8006532:	d10d      	bne.n	8006550 <TIM_OC2_SetConfig+0x88>
>>>>>>> Stashed changes
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
<<<<<<< Updated upstream
 8005ee0:	697b      	ldr	r3, [r7, #20]
 8005ee2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005ee6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	68db      	ldr	r3, [r3, #12]
 8005eec:	011b      	lsls	r3, r3, #4
 8005eee:	697a      	ldr	r2, [r7, #20]
 8005ef0:	4313      	orrs	r3, r2
 8005ef2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005ef4:	697b      	ldr	r3, [r7, #20]
 8005ef6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005efa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	4a1d      	ldr	r2, [pc, #116]	@ (8005f74 <TIM_OC2_SetConfig+0x100>)
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d00f      	beq.n	8005f24 <TIM_OC2_SetConfig+0xb0>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	4a1c      	ldr	r2, [pc, #112]	@ (8005f78 <TIM_OC2_SetConfig+0x104>)
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	d00b      	beq.n	8005f24 <TIM_OC2_SetConfig+0xb0>
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	4a1b      	ldr	r2, [pc, #108]	@ (8005f7c <TIM_OC2_SetConfig+0x108>)
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d007      	beq.n	8005f24 <TIM_OC2_SetConfig+0xb0>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	4a1a      	ldr	r2, [pc, #104]	@ (8005f80 <TIM_OC2_SetConfig+0x10c>)
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	d003      	beq.n	8005f24 <TIM_OC2_SetConfig+0xb0>
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	4a19      	ldr	r2, [pc, #100]	@ (8005f84 <TIM_OC2_SetConfig+0x110>)
 8005f20:	4293      	cmp	r3, r2
 8005f22:	d113      	bne.n	8005f4c <TIM_OC2_SetConfig+0xd8>
=======
 8006534:	697b      	ldr	r3, [r7, #20]
 8006536:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800653a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	68db      	ldr	r3, [r3, #12]
 8006540:	011b      	lsls	r3, r3, #4
 8006542:	697a      	ldr	r2, [r7, #20]
 8006544:	4313      	orrs	r3, r2
 8006546:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006548:	697b      	ldr	r3, [r7, #20]
 800654a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800654e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	4a1d      	ldr	r2, [pc, #116]	@ (80065c8 <TIM_OC2_SetConfig+0x100>)
 8006554:	4293      	cmp	r3, r2
 8006556:	d00f      	beq.n	8006578 <TIM_OC2_SetConfig+0xb0>
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	4a1c      	ldr	r2, [pc, #112]	@ (80065cc <TIM_OC2_SetConfig+0x104>)
 800655c:	4293      	cmp	r3, r2
 800655e:	d00b      	beq.n	8006578 <TIM_OC2_SetConfig+0xb0>
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	4a1b      	ldr	r2, [pc, #108]	@ (80065d0 <TIM_OC2_SetConfig+0x108>)
 8006564:	4293      	cmp	r3, r2
 8006566:	d007      	beq.n	8006578 <TIM_OC2_SetConfig+0xb0>
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	4a1a      	ldr	r2, [pc, #104]	@ (80065d4 <TIM_OC2_SetConfig+0x10c>)
 800656c:	4293      	cmp	r3, r2
 800656e:	d003      	beq.n	8006578 <TIM_OC2_SetConfig+0xb0>
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	4a19      	ldr	r2, [pc, #100]	@ (80065d8 <TIM_OC2_SetConfig+0x110>)
 8006574:	4293      	cmp	r3, r2
 8006576:	d113      	bne.n	80065a0 <TIM_OC2_SetConfig+0xd8>
>>>>>>> Stashed changes
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
<<<<<<< Updated upstream
 8005f24:	693b      	ldr	r3, [r7, #16]
 8005f26:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005f2a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005f2c:	693b      	ldr	r3, [r7, #16]
 8005f2e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005f32:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	695b      	ldr	r3, [r3, #20]
 8005f38:	009b      	lsls	r3, r3, #2
 8005f3a:	693a      	ldr	r2, [r7, #16]
 8005f3c:	4313      	orrs	r3, r2
 8005f3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	699b      	ldr	r3, [r3, #24]
 8005f44:	009b      	lsls	r3, r3, #2
 8005f46:	693a      	ldr	r2, [r7, #16]
 8005f48:	4313      	orrs	r3, r2
 8005f4a:	613b      	str	r3, [r7, #16]
=======
 8006578:	693b      	ldr	r3, [r7, #16]
 800657a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800657e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006580:	693b      	ldr	r3, [r7, #16]
 8006582:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006586:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	695b      	ldr	r3, [r3, #20]
 800658c:	009b      	lsls	r3, r3, #2
 800658e:	693a      	ldr	r2, [r7, #16]
 8006590:	4313      	orrs	r3, r2
 8006592:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	699b      	ldr	r3, [r3, #24]
 8006598:	009b      	lsls	r3, r3, #2
 800659a:	693a      	ldr	r2, [r7, #16]
 800659c:	4313      	orrs	r3, r2
 800659e:	613b      	str	r3, [r7, #16]
>>>>>>> Stashed changes
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
<<<<<<< Updated upstream
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	693a      	ldr	r2, [r7, #16]
 8005f50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	68fa      	ldr	r2, [r7, #12]
 8005f56:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	685a      	ldr	r2, [r3, #4]
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	697a      	ldr	r2, [r7, #20]
 8005f64:	621a      	str	r2, [r3, #32]
}
 8005f66:	bf00      	nop
 8005f68:	371c      	adds	r7, #28
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f70:	4770      	bx	lr
 8005f72:	bf00      	nop
 8005f74:	40012c00 	.word	0x40012c00
 8005f78:	40013400 	.word	0x40013400
 8005f7c:	40014000 	.word	0x40014000
 8005f80:	40014400 	.word	0x40014400
 8005f84:	40014800 	.word	0x40014800

08005f88 <TIM_OC3_SetConfig>:
=======
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	693a      	ldr	r2, [r7, #16]
 80065a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	68fa      	ldr	r2, [r7, #12]
 80065aa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	685a      	ldr	r2, [r3, #4]
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	697a      	ldr	r2, [r7, #20]
 80065b8:	621a      	str	r2, [r3, #32]
}
 80065ba:	bf00      	nop
 80065bc:	371c      	adds	r7, #28
 80065be:	46bd      	mov	sp, r7
 80065c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c4:	4770      	bx	lr
 80065c6:	bf00      	nop
 80065c8:	40012c00 	.word	0x40012c00
 80065cc:	40013400 	.word	0x40013400
 80065d0:	40014000 	.word	0x40014000
 80065d4:	40014400 	.word	0x40014400
 80065d8:	40014800 	.word	0x40014800

080065dc <TIM_OC3_SetConfig>:
>>>>>>> Stashed changes
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
<<<<<<< Updated upstream
 8005f88:	b480      	push	{r7}
 8005f8a:	b087      	sub	sp, #28
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
 8005f90:	6039      	str	r1, [r7, #0]
=======
 80065dc:	b480      	push	{r7}
 80065de:	b087      	sub	sp, #28
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
 80065e4:	6039      	str	r1, [r7, #0]
>>>>>>> Stashed changes
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
<<<<<<< Updated upstream
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6a1b      	ldr	r3, [r3, #32]
 8005f96:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	6a1b      	ldr	r3, [r3, #32]
 8005f9c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	685b      	ldr	r3, [r3, #4]
 8005fa8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	69db      	ldr	r3, [r3, #28]
 8005fae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005fb6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005fba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	f023 0303 	bic.w	r3, r3, #3
 8005fc2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	68fa      	ldr	r2, [r7, #12]
 8005fca:	4313      	orrs	r3, r2
 8005fcc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005fce:	697b      	ldr	r3, [r7, #20]
 8005fd0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005fd4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	689b      	ldr	r3, [r3, #8]
 8005fda:	021b      	lsls	r3, r3, #8
 8005fdc:	697a      	ldr	r2, [r7, #20]
 8005fde:	4313      	orrs	r3, r2
 8005fe0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	4a27      	ldr	r2, [pc, #156]	@ (8006084 <TIM_OC3_SetConfig+0xfc>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d003      	beq.n	8005ff2 <TIM_OC3_SetConfig+0x6a>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	4a26      	ldr	r2, [pc, #152]	@ (8006088 <TIM_OC3_SetConfig+0x100>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d10d      	bne.n	800600e <TIM_OC3_SetConfig+0x86>
=======
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6a1b      	ldr	r3, [r3, #32]
 80065ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	6a1b      	ldr	r3, [r3, #32]
 80065f0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	685b      	ldr	r3, [r3, #4]
 80065fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	69db      	ldr	r3, [r3, #28]
 8006602:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800660a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800660e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	f023 0303 	bic.w	r3, r3, #3
 8006616:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	68fa      	ldr	r2, [r7, #12]
 800661e:	4313      	orrs	r3, r2
 8006620:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006622:	697b      	ldr	r3, [r7, #20]
 8006624:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006628:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	689b      	ldr	r3, [r3, #8]
 800662e:	021b      	lsls	r3, r3, #8
 8006630:	697a      	ldr	r2, [r7, #20]
 8006632:	4313      	orrs	r3, r2
 8006634:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	4a27      	ldr	r2, [pc, #156]	@ (80066d8 <TIM_OC3_SetConfig+0xfc>)
 800663a:	4293      	cmp	r3, r2
 800663c:	d003      	beq.n	8006646 <TIM_OC3_SetConfig+0x6a>
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	4a26      	ldr	r2, [pc, #152]	@ (80066dc <TIM_OC3_SetConfig+0x100>)
 8006642:	4293      	cmp	r3, r2
 8006644:	d10d      	bne.n	8006662 <TIM_OC3_SetConfig+0x86>
>>>>>>> Stashed changes
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
<<<<<<< Updated upstream
 8005ff2:	697b      	ldr	r3, [r7, #20]
 8005ff4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005ff8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	68db      	ldr	r3, [r3, #12]
 8005ffe:	021b      	lsls	r3, r3, #8
 8006000:	697a      	ldr	r2, [r7, #20]
 8006002:	4313      	orrs	r3, r2
 8006004:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006006:	697b      	ldr	r3, [r7, #20]
 8006008:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800600c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	4a1c      	ldr	r2, [pc, #112]	@ (8006084 <TIM_OC3_SetConfig+0xfc>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d00f      	beq.n	8006036 <TIM_OC3_SetConfig+0xae>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	4a1b      	ldr	r2, [pc, #108]	@ (8006088 <TIM_OC3_SetConfig+0x100>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d00b      	beq.n	8006036 <TIM_OC3_SetConfig+0xae>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	4a1a      	ldr	r2, [pc, #104]	@ (800608c <TIM_OC3_SetConfig+0x104>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d007      	beq.n	8006036 <TIM_OC3_SetConfig+0xae>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	4a19      	ldr	r2, [pc, #100]	@ (8006090 <TIM_OC3_SetConfig+0x108>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d003      	beq.n	8006036 <TIM_OC3_SetConfig+0xae>
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	4a18      	ldr	r2, [pc, #96]	@ (8006094 <TIM_OC3_SetConfig+0x10c>)
 8006032:	4293      	cmp	r3, r2
 8006034:	d113      	bne.n	800605e <TIM_OC3_SetConfig+0xd6>
=======
 8006646:	697b      	ldr	r3, [r7, #20]
 8006648:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800664c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	68db      	ldr	r3, [r3, #12]
 8006652:	021b      	lsls	r3, r3, #8
 8006654:	697a      	ldr	r2, [r7, #20]
 8006656:	4313      	orrs	r3, r2
 8006658:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800665a:	697b      	ldr	r3, [r7, #20]
 800665c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006660:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	4a1c      	ldr	r2, [pc, #112]	@ (80066d8 <TIM_OC3_SetConfig+0xfc>)
 8006666:	4293      	cmp	r3, r2
 8006668:	d00f      	beq.n	800668a <TIM_OC3_SetConfig+0xae>
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	4a1b      	ldr	r2, [pc, #108]	@ (80066dc <TIM_OC3_SetConfig+0x100>)
 800666e:	4293      	cmp	r3, r2
 8006670:	d00b      	beq.n	800668a <TIM_OC3_SetConfig+0xae>
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	4a1a      	ldr	r2, [pc, #104]	@ (80066e0 <TIM_OC3_SetConfig+0x104>)
 8006676:	4293      	cmp	r3, r2
 8006678:	d007      	beq.n	800668a <TIM_OC3_SetConfig+0xae>
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	4a19      	ldr	r2, [pc, #100]	@ (80066e4 <TIM_OC3_SetConfig+0x108>)
 800667e:	4293      	cmp	r3, r2
 8006680:	d003      	beq.n	800668a <TIM_OC3_SetConfig+0xae>
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	4a18      	ldr	r2, [pc, #96]	@ (80066e8 <TIM_OC3_SetConfig+0x10c>)
 8006686:	4293      	cmp	r3, r2
 8006688:	d113      	bne.n	80066b2 <TIM_OC3_SetConfig+0xd6>
>>>>>>> Stashed changes
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
<<<<<<< Updated upstream
 8006036:	693b      	ldr	r3, [r7, #16]
 8006038:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800603c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800603e:	693b      	ldr	r3, [r7, #16]
 8006040:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006044:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	695b      	ldr	r3, [r3, #20]
 800604a:	011b      	lsls	r3, r3, #4
 800604c:	693a      	ldr	r2, [r7, #16]
 800604e:	4313      	orrs	r3, r2
 8006050:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	699b      	ldr	r3, [r3, #24]
 8006056:	011b      	lsls	r3, r3, #4
 8006058:	693a      	ldr	r2, [r7, #16]
 800605a:	4313      	orrs	r3, r2
 800605c:	613b      	str	r3, [r7, #16]
=======
 800668a:	693b      	ldr	r3, [r7, #16]
 800668c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006690:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006692:	693b      	ldr	r3, [r7, #16]
 8006694:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006698:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	695b      	ldr	r3, [r3, #20]
 800669e:	011b      	lsls	r3, r3, #4
 80066a0:	693a      	ldr	r2, [r7, #16]
 80066a2:	4313      	orrs	r3, r2
 80066a4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	699b      	ldr	r3, [r3, #24]
 80066aa:	011b      	lsls	r3, r3, #4
 80066ac:	693a      	ldr	r2, [r7, #16]
 80066ae:	4313      	orrs	r3, r2
 80066b0:	613b      	str	r3, [r7, #16]
>>>>>>> Stashed changes
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
<<<<<<< Updated upstream
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	693a      	ldr	r2, [r7, #16]
 8006062:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	68fa      	ldr	r2, [r7, #12]
 8006068:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	685a      	ldr	r2, [r3, #4]
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	697a      	ldr	r2, [r7, #20]
 8006076:	621a      	str	r2, [r3, #32]
}
 8006078:	bf00      	nop
 800607a:	371c      	adds	r7, #28
 800607c:	46bd      	mov	sp, r7
 800607e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006082:	4770      	bx	lr
 8006084:	40012c00 	.word	0x40012c00
 8006088:	40013400 	.word	0x40013400
 800608c:	40014000 	.word	0x40014000
 8006090:	40014400 	.word	0x40014400
 8006094:	40014800 	.word	0x40014800

08006098 <TIM_OC4_SetConfig>:
=======
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	693a      	ldr	r2, [r7, #16]
 80066b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	68fa      	ldr	r2, [r7, #12]
 80066bc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	685a      	ldr	r2, [r3, #4]
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	697a      	ldr	r2, [r7, #20]
 80066ca:	621a      	str	r2, [r3, #32]
}
 80066cc:	bf00      	nop
 80066ce:	371c      	adds	r7, #28
 80066d0:	46bd      	mov	sp, r7
 80066d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d6:	4770      	bx	lr
 80066d8:	40012c00 	.word	0x40012c00
 80066dc:	40013400 	.word	0x40013400
 80066e0:	40014000 	.word	0x40014000
 80066e4:	40014400 	.word	0x40014400
 80066e8:	40014800 	.word	0x40014800

080066ec <TIM_OC4_SetConfig>:
>>>>>>> Stashed changes
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
<<<<<<< Updated upstream
 8006098:	b480      	push	{r7}
 800609a:	b087      	sub	sp, #28
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
 80060a0:	6039      	str	r1, [r7, #0]
=======
 80066ec:	b480      	push	{r7}
 80066ee:	b087      	sub	sp, #28
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
 80066f4:	6039      	str	r1, [r7, #0]
>>>>>>> Stashed changes
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
<<<<<<< Updated upstream
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6a1b      	ldr	r3, [r3, #32]
 80060a6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6a1b      	ldr	r3, [r3, #32]
 80060ac:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	685b      	ldr	r3, [r3, #4]
 80060b8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	69db      	ldr	r3, [r3, #28]
 80060be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80060c6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80060ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80060d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	021b      	lsls	r3, r3, #8
 80060da:	68fa      	ldr	r2, [r7, #12]
 80060dc:	4313      	orrs	r3, r2
 80060de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80060e0:	693b      	ldr	r3, [r7, #16]
 80060e2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80060e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	689b      	ldr	r3, [r3, #8]
 80060ec:	031b      	lsls	r3, r3, #12
 80060ee:	693a      	ldr	r2, [r7, #16]
 80060f0:	4313      	orrs	r3, r2
 80060f2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	4a18      	ldr	r2, [pc, #96]	@ (8006158 <TIM_OC4_SetConfig+0xc0>)
 80060f8:	4293      	cmp	r3, r2
 80060fa:	d00f      	beq.n	800611c <TIM_OC4_SetConfig+0x84>
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	4a17      	ldr	r2, [pc, #92]	@ (800615c <TIM_OC4_SetConfig+0xc4>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d00b      	beq.n	800611c <TIM_OC4_SetConfig+0x84>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	4a16      	ldr	r2, [pc, #88]	@ (8006160 <TIM_OC4_SetConfig+0xc8>)
 8006108:	4293      	cmp	r3, r2
 800610a:	d007      	beq.n	800611c <TIM_OC4_SetConfig+0x84>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	4a15      	ldr	r2, [pc, #84]	@ (8006164 <TIM_OC4_SetConfig+0xcc>)
 8006110:	4293      	cmp	r3, r2
 8006112:	d003      	beq.n	800611c <TIM_OC4_SetConfig+0x84>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	4a14      	ldr	r2, [pc, #80]	@ (8006168 <TIM_OC4_SetConfig+0xd0>)
 8006118:	4293      	cmp	r3, r2
 800611a:	d109      	bne.n	8006130 <TIM_OC4_SetConfig+0x98>
=======
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6a1b      	ldr	r3, [r3, #32]
 80066fa:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	6a1b      	ldr	r3, [r3, #32]
 8006700:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	685b      	ldr	r3, [r3, #4]
 800670c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	69db      	ldr	r3, [r3, #28]
 8006712:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800671a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800671e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006726:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	021b      	lsls	r3, r3, #8
 800672e:	68fa      	ldr	r2, [r7, #12]
 8006730:	4313      	orrs	r3, r2
 8006732:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006734:	693b      	ldr	r3, [r7, #16]
 8006736:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800673a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	689b      	ldr	r3, [r3, #8]
 8006740:	031b      	lsls	r3, r3, #12
 8006742:	693a      	ldr	r2, [r7, #16]
 8006744:	4313      	orrs	r3, r2
 8006746:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	4a18      	ldr	r2, [pc, #96]	@ (80067ac <TIM_OC4_SetConfig+0xc0>)
 800674c:	4293      	cmp	r3, r2
 800674e:	d00f      	beq.n	8006770 <TIM_OC4_SetConfig+0x84>
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	4a17      	ldr	r2, [pc, #92]	@ (80067b0 <TIM_OC4_SetConfig+0xc4>)
 8006754:	4293      	cmp	r3, r2
 8006756:	d00b      	beq.n	8006770 <TIM_OC4_SetConfig+0x84>
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	4a16      	ldr	r2, [pc, #88]	@ (80067b4 <TIM_OC4_SetConfig+0xc8>)
 800675c:	4293      	cmp	r3, r2
 800675e:	d007      	beq.n	8006770 <TIM_OC4_SetConfig+0x84>
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	4a15      	ldr	r2, [pc, #84]	@ (80067b8 <TIM_OC4_SetConfig+0xcc>)
 8006764:	4293      	cmp	r3, r2
 8006766:	d003      	beq.n	8006770 <TIM_OC4_SetConfig+0x84>
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	4a14      	ldr	r2, [pc, #80]	@ (80067bc <TIM_OC4_SetConfig+0xd0>)
 800676c:	4293      	cmp	r3, r2
 800676e:	d109      	bne.n	8006784 <TIM_OC4_SetConfig+0x98>
>>>>>>> Stashed changes
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
<<<<<<< Updated upstream
 800611c:	697b      	ldr	r3, [r7, #20]
 800611e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006122:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	695b      	ldr	r3, [r3, #20]
 8006128:	019b      	lsls	r3, r3, #6
 800612a:	697a      	ldr	r2, [r7, #20]
 800612c:	4313      	orrs	r3, r2
 800612e:	617b      	str	r3, [r7, #20]
=======
 8006770:	697b      	ldr	r3, [r7, #20]
 8006772:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006776:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	695b      	ldr	r3, [r3, #20]
 800677c:	019b      	lsls	r3, r3, #6
 800677e:	697a      	ldr	r2, [r7, #20]
 8006780:	4313      	orrs	r3, r2
 8006782:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
<<<<<<< Updated upstream
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	697a      	ldr	r2, [r7, #20]
 8006134:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	68fa      	ldr	r2, [r7, #12]
 800613a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	685a      	ldr	r2, [r3, #4]
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	693a      	ldr	r2, [r7, #16]
 8006148:	621a      	str	r2, [r3, #32]
}
 800614a:	bf00      	nop
 800614c:	371c      	adds	r7, #28
 800614e:	46bd      	mov	sp, r7
 8006150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006154:	4770      	bx	lr
 8006156:	bf00      	nop
 8006158:	40012c00 	.word	0x40012c00
 800615c:	40013400 	.word	0x40013400
 8006160:	40014000 	.word	0x40014000
 8006164:	40014400 	.word	0x40014400
 8006168:	40014800 	.word	0x40014800

0800616c <TIM_OC5_SetConfig>:
=======
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	697a      	ldr	r2, [r7, #20]
 8006788:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	68fa      	ldr	r2, [r7, #12]
 800678e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	685a      	ldr	r2, [r3, #4]
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	693a      	ldr	r2, [r7, #16]
 800679c:	621a      	str	r2, [r3, #32]
}
 800679e:	bf00      	nop
 80067a0:	371c      	adds	r7, #28
 80067a2:	46bd      	mov	sp, r7
 80067a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a8:	4770      	bx	lr
 80067aa:	bf00      	nop
 80067ac:	40012c00 	.word	0x40012c00
 80067b0:	40013400 	.word	0x40013400
 80067b4:	40014000 	.word	0x40014000
 80067b8:	40014400 	.word	0x40014400
 80067bc:	40014800 	.word	0x40014800

080067c0 <TIM_OC5_SetConfig>:
>>>>>>> Stashed changes
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
<<<<<<< Updated upstream
 800616c:	b480      	push	{r7}
 800616e:	b087      	sub	sp, #28
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
 8006174:	6039      	str	r1, [r7, #0]
=======
 80067c0:	b480      	push	{r7}
 80067c2:	b087      	sub	sp, #28
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
 80067c8:	6039      	str	r1, [r7, #0]
>>>>>>> Stashed changes
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
<<<<<<< Updated upstream
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6a1b      	ldr	r3, [r3, #32]
 800617a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	6a1b      	ldr	r3, [r3, #32]
 8006180:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	685b      	ldr	r3, [r3, #4]
 800618c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006192:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800619a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800619e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	68fa      	ldr	r2, [r7, #12]
 80061a6:	4313      	orrs	r3, r2
 80061a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80061aa:	693b      	ldr	r3, [r7, #16]
 80061ac:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80061b0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	689b      	ldr	r3, [r3, #8]
 80061b6:	041b      	lsls	r3, r3, #16
 80061b8:	693a      	ldr	r2, [r7, #16]
 80061ba:	4313      	orrs	r3, r2
 80061bc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	4a17      	ldr	r2, [pc, #92]	@ (8006220 <TIM_OC5_SetConfig+0xb4>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d00f      	beq.n	80061e6 <TIM_OC5_SetConfig+0x7a>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	4a16      	ldr	r2, [pc, #88]	@ (8006224 <TIM_OC5_SetConfig+0xb8>)
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d00b      	beq.n	80061e6 <TIM_OC5_SetConfig+0x7a>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	4a15      	ldr	r2, [pc, #84]	@ (8006228 <TIM_OC5_SetConfig+0xbc>)
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d007      	beq.n	80061e6 <TIM_OC5_SetConfig+0x7a>
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	4a14      	ldr	r2, [pc, #80]	@ (800622c <TIM_OC5_SetConfig+0xc0>)
 80061da:	4293      	cmp	r3, r2
 80061dc:	d003      	beq.n	80061e6 <TIM_OC5_SetConfig+0x7a>
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	4a13      	ldr	r2, [pc, #76]	@ (8006230 <TIM_OC5_SetConfig+0xc4>)
 80061e2:	4293      	cmp	r3, r2
 80061e4:	d109      	bne.n	80061fa <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80061e6:	697b      	ldr	r3, [r7, #20]
 80061e8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80061ec:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	695b      	ldr	r3, [r3, #20]
 80061f2:	021b      	lsls	r3, r3, #8
 80061f4:	697a      	ldr	r2, [r7, #20]
 80061f6:	4313      	orrs	r3, r2
 80061f8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	697a      	ldr	r2, [r7, #20]
 80061fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	68fa      	ldr	r2, [r7, #12]
 8006204:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	685a      	ldr	r2, [r3, #4]
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	693a      	ldr	r2, [r7, #16]
 8006212:	621a      	str	r2, [r3, #32]
}
 8006214:	bf00      	nop
 8006216:	371c      	adds	r7, #28
 8006218:	46bd      	mov	sp, r7
 800621a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621e:	4770      	bx	lr
 8006220:	40012c00 	.word	0x40012c00
 8006224:	40013400 	.word	0x40013400
 8006228:	40014000 	.word	0x40014000
 800622c:	40014400 	.word	0x40014400
 8006230:	40014800 	.word	0x40014800

08006234 <TIM_OC6_SetConfig>:
=======
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6a1b      	ldr	r3, [r3, #32]
 80067ce:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	6a1b      	ldr	r3, [r3, #32]
 80067d4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	685b      	ldr	r3, [r3, #4]
 80067e0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80067ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80067f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	68fa      	ldr	r2, [r7, #12]
 80067fa:	4313      	orrs	r3, r2
 80067fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80067fe:	693b      	ldr	r3, [r7, #16]
 8006800:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006804:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	689b      	ldr	r3, [r3, #8]
 800680a:	041b      	lsls	r3, r3, #16
 800680c:	693a      	ldr	r2, [r7, #16]
 800680e:	4313      	orrs	r3, r2
 8006810:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	4a17      	ldr	r2, [pc, #92]	@ (8006874 <TIM_OC5_SetConfig+0xb4>)
 8006816:	4293      	cmp	r3, r2
 8006818:	d00f      	beq.n	800683a <TIM_OC5_SetConfig+0x7a>
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	4a16      	ldr	r2, [pc, #88]	@ (8006878 <TIM_OC5_SetConfig+0xb8>)
 800681e:	4293      	cmp	r3, r2
 8006820:	d00b      	beq.n	800683a <TIM_OC5_SetConfig+0x7a>
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	4a15      	ldr	r2, [pc, #84]	@ (800687c <TIM_OC5_SetConfig+0xbc>)
 8006826:	4293      	cmp	r3, r2
 8006828:	d007      	beq.n	800683a <TIM_OC5_SetConfig+0x7a>
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	4a14      	ldr	r2, [pc, #80]	@ (8006880 <TIM_OC5_SetConfig+0xc0>)
 800682e:	4293      	cmp	r3, r2
 8006830:	d003      	beq.n	800683a <TIM_OC5_SetConfig+0x7a>
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	4a13      	ldr	r2, [pc, #76]	@ (8006884 <TIM_OC5_SetConfig+0xc4>)
 8006836:	4293      	cmp	r3, r2
 8006838:	d109      	bne.n	800684e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800683a:	697b      	ldr	r3, [r7, #20]
 800683c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006840:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	695b      	ldr	r3, [r3, #20]
 8006846:	021b      	lsls	r3, r3, #8
 8006848:	697a      	ldr	r2, [r7, #20]
 800684a:	4313      	orrs	r3, r2
 800684c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	697a      	ldr	r2, [r7, #20]
 8006852:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	68fa      	ldr	r2, [r7, #12]
 8006858:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	685a      	ldr	r2, [r3, #4]
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	693a      	ldr	r2, [r7, #16]
 8006866:	621a      	str	r2, [r3, #32]
}
 8006868:	bf00      	nop
 800686a:	371c      	adds	r7, #28
 800686c:	46bd      	mov	sp, r7
 800686e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006872:	4770      	bx	lr
 8006874:	40012c00 	.word	0x40012c00
 8006878:	40013400 	.word	0x40013400
 800687c:	40014000 	.word	0x40014000
 8006880:	40014400 	.word	0x40014400
 8006884:	40014800 	.word	0x40014800

08006888 <TIM_OC6_SetConfig>:
>>>>>>> Stashed changes
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
<<<<<<< Updated upstream
 8006234:	b480      	push	{r7}
 8006236:	b087      	sub	sp, #28
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
 800623c:	6039      	str	r1, [r7, #0]
=======
 8006888:	b480      	push	{r7}
 800688a:	b087      	sub	sp, #28
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
 8006890:	6039      	str	r1, [r7, #0]
>>>>>>> Stashed changes
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
<<<<<<< Updated upstream
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6a1b      	ldr	r3, [r3, #32]
 8006242:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	6a1b      	ldr	r3, [r3, #32]
 8006248:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	685b      	ldr	r3, [r3, #4]
 8006254:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800625a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006262:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006266:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	021b      	lsls	r3, r3, #8
 800626e:	68fa      	ldr	r2, [r7, #12]
 8006270:	4313      	orrs	r3, r2
 8006272:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006274:	693b      	ldr	r3, [r7, #16]
 8006276:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800627a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	689b      	ldr	r3, [r3, #8]
 8006280:	051b      	lsls	r3, r3, #20
 8006282:	693a      	ldr	r2, [r7, #16]
 8006284:	4313      	orrs	r3, r2
 8006286:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	4a18      	ldr	r2, [pc, #96]	@ (80062ec <TIM_OC6_SetConfig+0xb8>)
 800628c:	4293      	cmp	r3, r2
 800628e:	d00f      	beq.n	80062b0 <TIM_OC6_SetConfig+0x7c>
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	4a17      	ldr	r2, [pc, #92]	@ (80062f0 <TIM_OC6_SetConfig+0xbc>)
 8006294:	4293      	cmp	r3, r2
 8006296:	d00b      	beq.n	80062b0 <TIM_OC6_SetConfig+0x7c>
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	4a16      	ldr	r2, [pc, #88]	@ (80062f4 <TIM_OC6_SetConfig+0xc0>)
 800629c:	4293      	cmp	r3, r2
 800629e:	d007      	beq.n	80062b0 <TIM_OC6_SetConfig+0x7c>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	4a15      	ldr	r2, [pc, #84]	@ (80062f8 <TIM_OC6_SetConfig+0xc4>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d003      	beq.n	80062b0 <TIM_OC6_SetConfig+0x7c>
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	4a14      	ldr	r2, [pc, #80]	@ (80062fc <TIM_OC6_SetConfig+0xc8>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d109      	bne.n	80062c4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80062b0:	697b      	ldr	r3, [r7, #20]
 80062b2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80062b6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	695b      	ldr	r3, [r3, #20]
 80062bc:	029b      	lsls	r3, r3, #10
 80062be:	697a      	ldr	r2, [r7, #20]
 80062c0:	4313      	orrs	r3, r2
 80062c2:	617b      	str	r3, [r7, #20]
=======
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6a1b      	ldr	r3, [r3, #32]
 8006896:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	6a1b      	ldr	r3, [r3, #32]
 800689c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	685b      	ldr	r3, [r3, #4]
 80068a8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80068ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80068b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80068ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	021b      	lsls	r3, r3, #8
 80068c2:	68fa      	ldr	r2, [r7, #12]
 80068c4:	4313      	orrs	r3, r2
 80068c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80068c8:	693b      	ldr	r3, [r7, #16]
 80068ca:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80068ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	689b      	ldr	r3, [r3, #8]
 80068d4:	051b      	lsls	r3, r3, #20
 80068d6:	693a      	ldr	r2, [r7, #16]
 80068d8:	4313      	orrs	r3, r2
 80068da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	4a18      	ldr	r2, [pc, #96]	@ (8006940 <TIM_OC6_SetConfig+0xb8>)
 80068e0:	4293      	cmp	r3, r2
 80068e2:	d00f      	beq.n	8006904 <TIM_OC6_SetConfig+0x7c>
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	4a17      	ldr	r2, [pc, #92]	@ (8006944 <TIM_OC6_SetConfig+0xbc>)
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d00b      	beq.n	8006904 <TIM_OC6_SetConfig+0x7c>
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	4a16      	ldr	r2, [pc, #88]	@ (8006948 <TIM_OC6_SetConfig+0xc0>)
 80068f0:	4293      	cmp	r3, r2
 80068f2:	d007      	beq.n	8006904 <TIM_OC6_SetConfig+0x7c>
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	4a15      	ldr	r2, [pc, #84]	@ (800694c <TIM_OC6_SetConfig+0xc4>)
 80068f8:	4293      	cmp	r3, r2
 80068fa:	d003      	beq.n	8006904 <TIM_OC6_SetConfig+0x7c>
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	4a14      	ldr	r2, [pc, #80]	@ (8006950 <TIM_OC6_SetConfig+0xc8>)
 8006900:	4293      	cmp	r3, r2
 8006902:	d109      	bne.n	8006918 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006904:	697b      	ldr	r3, [r7, #20]
 8006906:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800690a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	695b      	ldr	r3, [r3, #20]
 8006910:	029b      	lsls	r3, r3, #10
 8006912:	697a      	ldr	r2, [r7, #20]
 8006914:	4313      	orrs	r3, r2
 8006916:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
<<<<<<< Updated upstream
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	697a      	ldr	r2, [r7, #20]
 80062c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	68fa      	ldr	r2, [r7, #12]
 80062ce:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	685a      	ldr	r2, [r3, #4]
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	693a      	ldr	r2, [r7, #16]
 80062dc:	621a      	str	r2, [r3, #32]
}
 80062de:	bf00      	nop
 80062e0:	371c      	adds	r7, #28
 80062e2:	46bd      	mov	sp, r7
 80062e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e8:	4770      	bx	lr
 80062ea:	bf00      	nop
 80062ec:	40012c00 	.word	0x40012c00
 80062f0:	40013400 	.word	0x40013400
 80062f4:	40014000 	.word	0x40014000
 80062f8:	40014400 	.word	0x40014400
 80062fc:	40014800 	.word	0x40014800

08006300 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006300:	b480      	push	{r7}
 8006302:	b087      	sub	sp, #28
 8006304:	af00      	add	r7, sp, #0
 8006306:	60f8      	str	r0, [r7, #12]
 8006308:	60b9      	str	r1, [r7, #8]
 800630a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	6a1b      	ldr	r3, [r3, #32]
 8006310:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	6a1b      	ldr	r3, [r3, #32]
 8006316:	f023 0201 	bic.w	r2, r3, #1
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	699b      	ldr	r3, [r3, #24]
 8006322:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006324:	693b      	ldr	r3, [r7, #16]
 8006326:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800632a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	011b      	lsls	r3, r3, #4
 8006330:	693a      	ldr	r2, [r7, #16]
 8006332:	4313      	orrs	r3, r2
 8006334:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006336:	697b      	ldr	r3, [r7, #20]
 8006338:	f023 030a 	bic.w	r3, r3, #10
 800633c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800633e:	697a      	ldr	r2, [r7, #20]
 8006340:	68bb      	ldr	r3, [r7, #8]
 8006342:	4313      	orrs	r3, r2
 8006344:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	693a      	ldr	r2, [r7, #16]
 800634a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	697a      	ldr	r2, [r7, #20]
 8006350:	621a      	str	r2, [r3, #32]
}
 8006352:	bf00      	nop
 8006354:	371c      	adds	r7, #28
 8006356:	46bd      	mov	sp, r7
 8006358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635c:	4770      	bx	lr

0800635e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800635e:	b480      	push	{r7}
 8006360:	b087      	sub	sp, #28
 8006362:	af00      	add	r7, sp, #0
 8006364:	60f8      	str	r0, [r7, #12]
 8006366:	60b9      	str	r1, [r7, #8]
 8006368:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	6a1b      	ldr	r3, [r3, #32]
 800636e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	6a1b      	ldr	r3, [r3, #32]
 8006374:	f023 0210 	bic.w	r2, r3, #16
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	699b      	ldr	r3, [r3, #24]
 8006380:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006382:	693b      	ldr	r3, [r7, #16]
 8006384:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006388:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	031b      	lsls	r3, r3, #12
 800638e:	693a      	ldr	r2, [r7, #16]
 8006390:	4313      	orrs	r3, r2
 8006392:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006394:	697b      	ldr	r3, [r7, #20]
 8006396:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800639a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800639c:	68bb      	ldr	r3, [r7, #8]
 800639e:	011b      	lsls	r3, r3, #4
 80063a0:	697a      	ldr	r2, [r7, #20]
 80063a2:	4313      	orrs	r3, r2
 80063a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	693a      	ldr	r2, [r7, #16]
 80063aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	697a      	ldr	r2, [r7, #20]
 80063b0:	621a      	str	r2, [r3, #32]
}
 80063b2:	bf00      	nop
 80063b4:	371c      	adds	r7, #28
 80063b6:	46bd      	mov	sp, r7
 80063b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063bc:	4770      	bx	lr

080063be <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80063be:	b480      	push	{r7}
 80063c0:	b085      	sub	sp, #20
 80063c2:	af00      	add	r7, sp, #0
 80063c4:	6078      	str	r0, [r7, #4]
 80063c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	689b      	ldr	r3, [r3, #8]
 80063cc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063d4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80063d6:	683a      	ldr	r2, [r7, #0]
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	4313      	orrs	r3, r2
 80063dc:	f043 0307 	orr.w	r3, r3, #7
 80063e0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	68fa      	ldr	r2, [r7, #12]
 80063e6:	609a      	str	r2, [r3, #8]
}
 80063e8:	bf00      	nop
 80063ea:	3714      	adds	r7, #20
 80063ec:	46bd      	mov	sp, r7
 80063ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f2:	4770      	bx	lr

080063f4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80063f4:	b480      	push	{r7}
 80063f6:	b087      	sub	sp, #28
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	60f8      	str	r0, [r7, #12]
 80063fc:	60b9      	str	r1, [r7, #8]
 80063fe:	607a      	str	r2, [r7, #4]
 8006400:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	689b      	ldr	r3, [r3, #8]
 8006406:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006408:	697b      	ldr	r3, [r7, #20]
 800640a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800640e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	021a      	lsls	r2, r3, #8
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	431a      	orrs	r2, r3
 8006418:	68bb      	ldr	r3, [r7, #8]
 800641a:	4313      	orrs	r3, r2
 800641c:	697a      	ldr	r2, [r7, #20]
 800641e:	4313      	orrs	r3, r2
 8006420:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	697a      	ldr	r2, [r7, #20]
 8006426:	609a      	str	r2, [r3, #8]
}
 8006428:	bf00      	nop
 800642a:	371c      	adds	r7, #28
 800642c:	46bd      	mov	sp, r7
 800642e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006432:	4770      	bx	lr

08006434 <TIM_CCxChannelCmd>:
=======
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	697a      	ldr	r2, [r7, #20]
 800691c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	68fa      	ldr	r2, [r7, #12]
 8006922:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	685a      	ldr	r2, [r3, #4]
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	693a      	ldr	r2, [r7, #16]
 8006930:	621a      	str	r2, [r3, #32]
}
 8006932:	bf00      	nop
 8006934:	371c      	adds	r7, #28
 8006936:	46bd      	mov	sp, r7
 8006938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693c:	4770      	bx	lr
 800693e:	bf00      	nop
 8006940:	40012c00 	.word	0x40012c00
 8006944:	40013400 	.word	0x40013400
 8006948:	40014000 	.word	0x40014000
 800694c:	40014400 	.word	0x40014400
 8006950:	40014800 	.word	0x40014800

08006954 <TIM_CCxChannelCmd>:
>>>>>>> Stashed changes
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
<<<<<<< Updated upstream
 8006434:	b480      	push	{r7}
 8006436:	b087      	sub	sp, #28
 8006438:	af00      	add	r7, sp, #0
 800643a:	60f8      	str	r0, [r7, #12]
 800643c:	60b9      	str	r1, [r7, #8]
 800643e:	607a      	str	r2, [r7, #4]
=======
 8006954:	b480      	push	{r7}
 8006956:	b087      	sub	sp, #28
 8006958:	af00      	add	r7, sp, #0
 800695a:	60f8      	str	r0, [r7, #12]
 800695c:	60b9      	str	r1, [r7, #8]
 800695e:	607a      	str	r2, [r7, #4]
>>>>>>> Stashed changes

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
<<<<<<< Updated upstream
 8006440:	68bb      	ldr	r3, [r7, #8]
 8006442:	f003 031f 	and.w	r3, r3, #31
 8006446:	2201      	movs	r2, #1
 8006448:	fa02 f303 	lsl.w	r3, r2, r3
 800644c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	6a1a      	ldr	r2, [r3, #32]
 8006452:	697b      	ldr	r3, [r7, #20]
 8006454:	43db      	mvns	r3, r3
 8006456:	401a      	ands	r2, r3
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	6a1a      	ldr	r2, [r3, #32]
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	f003 031f 	and.w	r3, r3, #31
 8006466:	6879      	ldr	r1, [r7, #4]
 8006468:	fa01 f303 	lsl.w	r3, r1, r3
 800646c:	431a      	orrs	r2, r3
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	621a      	str	r2, [r3, #32]
}
 8006472:	bf00      	nop
 8006474:	371c      	adds	r7, #28
 8006476:	46bd      	mov	sp, r7
 8006478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647c:	4770      	bx	lr
	...

08006480 <HAL_TIMEx_MasterConfigSynchronization>:
=======
 8006960:	68bb      	ldr	r3, [r7, #8]
 8006962:	f003 031f 	and.w	r3, r3, #31
 8006966:	2201      	movs	r2, #1
 8006968:	fa02 f303 	lsl.w	r3, r2, r3
 800696c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	6a1a      	ldr	r2, [r3, #32]
 8006972:	697b      	ldr	r3, [r7, #20]
 8006974:	43db      	mvns	r3, r3
 8006976:	401a      	ands	r2, r3
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	6a1a      	ldr	r2, [r3, #32]
 8006980:	68bb      	ldr	r3, [r7, #8]
 8006982:	f003 031f 	and.w	r3, r3, #31
 8006986:	6879      	ldr	r1, [r7, #4]
 8006988:	fa01 f303 	lsl.w	r3, r1, r3
 800698c:	431a      	orrs	r2, r3
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	621a      	str	r2, [r3, #32]
}
 8006992:	bf00      	nop
 8006994:	371c      	adds	r7, #28
 8006996:	46bd      	mov	sp, r7
 8006998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699c:	4770      	bx	lr
	...

080069a0 <HAL_TIMEx_MasterConfigSynchronization>:
>>>>>>> Stashed changes
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
<<<<<<< Updated upstream
 8006480:	b480      	push	{r7}
 8006482:	b085      	sub	sp, #20
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
 8006488:	6039      	str	r1, [r7, #0]
=======
 80069a0:	b480      	push	{r7}
 80069a2:	b085      	sub	sp, #20
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
 80069a8:	6039      	str	r1, [r7, #0]
>>>>>>> Stashed changes
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
<<<<<<< Updated upstream
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006490:	2b01      	cmp	r3, #1
 8006492:	d101      	bne.n	8006498 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006494:	2302      	movs	r3, #2
 8006496:	e068      	b.n	800656a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2201      	movs	r2, #1
 800649c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2202      	movs	r2, #2
 80064a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	685b      	ldr	r3, [r3, #4]
 80064ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	689b      	ldr	r3, [r3, #8]
 80064b6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	4a2e      	ldr	r2, [pc, #184]	@ (8006578 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80064be:	4293      	cmp	r3, r2
 80064c0:	d004      	beq.n	80064cc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	4a2d      	ldr	r2, [pc, #180]	@ (800657c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80064c8:	4293      	cmp	r3, r2
 80064ca:	d108      	bne.n	80064de <HAL_TIMEx_MasterConfigSynchronization+0x5e>
=======
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80069b0:	2b01      	cmp	r3, #1
 80069b2:	d101      	bne.n	80069b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80069b4:	2302      	movs	r3, #2
 80069b6:	e068      	b.n	8006a8a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2201      	movs	r2, #1
 80069bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2202      	movs	r2, #2
 80069c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	685b      	ldr	r3, [r3, #4]
 80069ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	689b      	ldr	r3, [r3, #8]
 80069d6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	4a2e      	ldr	r2, [pc, #184]	@ (8006a98 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80069de:	4293      	cmp	r3, r2
 80069e0:	d004      	beq.n	80069ec <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	4a2d      	ldr	r2, [pc, #180]	@ (8006a9c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80069e8:	4293      	cmp	r3, r2
 80069ea:	d108      	bne.n	80069fe <HAL_TIMEx_MasterConfigSynchronization+0x5e>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
<<<<<<< Updated upstream
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80064d2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	685b      	ldr	r3, [r3, #4]
 80064d8:	68fa      	ldr	r2, [r7, #12]
 80064da:	4313      	orrs	r3, r2
 80064dc:	60fb      	str	r3, [r7, #12]
=======
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80069f2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	685b      	ldr	r3, [r3, #4]
 80069f8:	68fa      	ldr	r2, [r7, #12]
 80069fa:	4313      	orrs	r3, r2
 80069fc:	60fb      	str	r3, [r7, #12]
>>>>>>> Stashed changes
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
<<<<<<< Updated upstream
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064e4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	68fa      	ldr	r2, [r7, #12]
 80064ec:	4313      	orrs	r3, r2
 80064ee:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	68fa      	ldr	r2, [r7, #12]
 80064f6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	4a1e      	ldr	r2, [pc, #120]	@ (8006578 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d01d      	beq.n	800653e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800650a:	d018      	beq.n	800653e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	4a1b      	ldr	r2, [pc, #108]	@ (8006580 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d013      	beq.n	800653e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	4a1a      	ldr	r2, [pc, #104]	@ (8006584 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800651c:	4293      	cmp	r3, r2
 800651e:	d00e      	beq.n	800653e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	4a18      	ldr	r2, [pc, #96]	@ (8006588 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006526:	4293      	cmp	r3, r2
 8006528:	d009      	beq.n	800653e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	4a13      	ldr	r2, [pc, #76]	@ (800657c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006530:	4293      	cmp	r3, r2
 8006532:	d004      	beq.n	800653e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	4a14      	ldr	r2, [pc, #80]	@ (800658c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800653a:	4293      	cmp	r3, r2
 800653c:	d10c      	bne.n	8006558 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800653e:	68bb      	ldr	r3, [r7, #8]
 8006540:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006544:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	689b      	ldr	r3, [r3, #8]
 800654a:	68ba      	ldr	r2, [r7, #8]
 800654c:	4313      	orrs	r3, r2
 800654e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	68ba      	ldr	r2, [r7, #8]
 8006556:	609a      	str	r2, [r3, #8]
=======
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a04:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	68fa      	ldr	r2, [r7, #12]
 8006a0c:	4313      	orrs	r3, r2
 8006a0e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	68fa      	ldr	r2, [r7, #12]
 8006a16:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	4a1e      	ldr	r2, [pc, #120]	@ (8006a98 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	d01d      	beq.n	8006a5e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a2a:	d018      	beq.n	8006a5e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	4a1b      	ldr	r2, [pc, #108]	@ (8006aa0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006a32:	4293      	cmp	r3, r2
 8006a34:	d013      	beq.n	8006a5e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	4a1a      	ldr	r2, [pc, #104]	@ (8006aa4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006a3c:	4293      	cmp	r3, r2
 8006a3e:	d00e      	beq.n	8006a5e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	4a18      	ldr	r2, [pc, #96]	@ (8006aa8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006a46:	4293      	cmp	r3, r2
 8006a48:	d009      	beq.n	8006a5e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	4a13      	ldr	r2, [pc, #76]	@ (8006a9c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006a50:	4293      	cmp	r3, r2
 8006a52:	d004      	beq.n	8006a5e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	4a14      	ldr	r2, [pc, #80]	@ (8006aac <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006a5a:	4293      	cmp	r3, r2
 8006a5c:	d10c      	bne.n	8006a78 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006a5e:	68bb      	ldr	r3, [r7, #8]
 8006a60:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006a64:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	689b      	ldr	r3, [r3, #8]
 8006a6a:	68ba      	ldr	r2, [r7, #8]
 8006a6c:	4313      	orrs	r3, r2
 8006a6e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	68ba      	ldr	r2, [r7, #8]
 8006a76:	609a      	str	r2, [r3, #8]
>>>>>>> Stashed changes
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
<<<<<<< Updated upstream
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2201      	movs	r2, #1
 800655c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2200      	movs	r2, #0
 8006564:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006568:	2300      	movs	r3, #0
}
 800656a:	4618      	mov	r0, r3
 800656c:	3714      	adds	r7, #20
 800656e:	46bd      	mov	sp, r7
 8006570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006574:	4770      	bx	lr
 8006576:	bf00      	nop
 8006578:	40012c00 	.word	0x40012c00
 800657c:	40013400 	.word	0x40013400
 8006580:	40000400 	.word	0x40000400
 8006584:	40000800 	.word	0x40000800
 8006588:	40000c00 	.word	0x40000c00
 800658c:	40014000 	.word	0x40014000

08006590 <HAL_TIMEx_CommutCallback>:
=======
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2201      	movs	r2, #1
 8006a7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2200      	movs	r2, #0
 8006a84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006a88:	2300      	movs	r3, #0
}
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	3714      	adds	r7, #20
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a94:	4770      	bx	lr
 8006a96:	bf00      	nop
 8006a98:	40012c00 	.word	0x40012c00
 8006a9c:	40013400 	.word	0x40013400
 8006aa0:	40000400 	.word	0x40000400
 8006aa4:	40000800 	.word	0x40000800
 8006aa8:	40000c00 	.word	0x40000c00
 8006aac:	40014000 	.word	0x40014000

08006ab0 <HAL_TIMEx_CommutCallback>:
>>>>>>> Stashed changes
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 8006590:	b480      	push	{r7}
 8006592:	b083      	sub	sp, #12
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
=======
 8006ab0:	b480      	push	{r7}
 8006ab2:	b083      	sub	sp, #12
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
<<<<<<< Updated upstream
 8006598:	bf00      	nop
 800659a:	370c      	adds	r7, #12
 800659c:	46bd      	mov	sp, r7
 800659e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a2:	4770      	bx	lr

080065a4 <HAL_TIMEx_BreakCallback>:
=======
 8006ab8:	bf00      	nop
 8006aba:	370c      	adds	r7, #12
 8006abc:	46bd      	mov	sp, r7
 8006abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac2:	4770      	bx	lr

08006ac4 <HAL_TIMEx_BreakCallback>:
>>>>>>> Stashed changes
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 80065a4:	b480      	push	{r7}
 80065a6:	b083      	sub	sp, #12
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
=======
 8006ac4:	b480      	push	{r7}
 8006ac6:	b083      	sub	sp, #12
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
<<<<<<< Updated upstream
 80065ac:	bf00      	nop
 80065ae:	370c      	adds	r7, #12
 80065b0:	46bd      	mov	sp, r7
 80065b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b6:	4770      	bx	lr

080065b8 <HAL_TIMEx_Break2Callback>:
=======
 8006acc:	bf00      	nop
 8006ace:	370c      	adds	r7, #12
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad6:	4770      	bx	lr

08006ad8 <HAL_TIMEx_Break2Callback>:
>>>>>>> Stashed changes
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 80065b8:	b480      	push	{r7}
 80065ba:	b083      	sub	sp, #12
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
=======
 8006ad8:	b480      	push	{r7}
 8006ada:	b083      	sub	sp, #12
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
<<<<<<< Updated upstream
 80065c0:	bf00      	nop
 80065c2:	370c      	adds	r7, #12
 80065c4:	46bd      	mov	sp, r7
 80065c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ca:	4770      	bx	lr

080065cc <HAL_UART_Init>:
=======
 8006ae0:	bf00      	nop
 8006ae2:	370c      	adds	r7, #12
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aea:	4770      	bx	lr

08006aec <HAL_UART_Init>:
>>>>>>> Stashed changes
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b082      	sub	sp, #8
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d101      	bne.n	80065de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80065da:	2301      	movs	r3, #1
 80065dc:	e040      	b.n	8006660 <HAL_UART_Init+0x94>
=======
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b082      	sub	sp, #8
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d101      	bne.n	8006afe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006afa:	2301      	movs	r3, #1
 8006afc:	e040      	b.n	8006b80 <HAL_UART_Init+0x94>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
<<<<<<< Updated upstream
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d106      	bne.n	80065f4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2200      	movs	r2, #0
 80065ea:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
=======
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d106      	bne.n	8006b14 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	2200      	movs	r2, #0
 8006b0a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
>>>>>>> Stashed changes

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
<<<<<<< Updated upstream
 80065ee:	6878      	ldr	r0, [r7, #4]
 80065f0:	f7fb fea8 	bl	8002344 <HAL_UART_MspInit>
=======
 8006b0e:	6878      	ldr	r0, [r7, #4]
 8006b10:	f7fb fc38 	bl	8002384 <HAL_UART_MspInit>
>>>>>>> Stashed changes
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
<<<<<<< Updated upstream
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2224      	movs	r2, #36	@ 0x24
 80065f8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	681a      	ldr	r2, [r3, #0]
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f022 0201 	bic.w	r2, r2, #1
 8006608:	601a      	str	r2, [r3, #0]
=======
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2224      	movs	r2, #36	@ 0x24
 8006b18:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	681a      	ldr	r2, [r3, #0]
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f022 0201 	bic.w	r2, r2, #1
 8006b28:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
<<<<<<< Updated upstream
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800660e:	2b00      	cmp	r3, #0
 8006610:	d002      	beq.n	8006618 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8006612:	6878      	ldr	r0, [r7, #4]
 8006614:	f000 fb6a 	bl	8006cec <UART_AdvFeatureConfig>
=======
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d002      	beq.n	8006b38 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8006b32:	6878      	ldr	r0, [r7, #4]
 8006b34:	f000 fb6a 	bl	800720c <UART_AdvFeatureConfig>
>>>>>>> Stashed changes
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
<<<<<<< Updated upstream
 8006618:	6878      	ldr	r0, [r7, #4]
 800661a:	f000 f8af 	bl	800677c <UART_SetConfig>
 800661e:	4603      	mov	r3, r0
 8006620:	2b01      	cmp	r3, #1
 8006622:	d101      	bne.n	8006628 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8006624:	2301      	movs	r3, #1
 8006626:	e01b      	b.n	8006660 <HAL_UART_Init+0x94>
=======
 8006b38:	6878      	ldr	r0, [r7, #4]
 8006b3a:	f000 f8af 	bl	8006c9c <UART_SetConfig>
 8006b3e:	4603      	mov	r3, r0
 8006b40:	2b01      	cmp	r3, #1
 8006b42:	d101      	bne.n	8006b48 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8006b44:	2301      	movs	r3, #1
 8006b46:	e01b      	b.n	8006b80 <HAL_UART_Init+0x94>
>>>>>>> Stashed changes
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
<<<<<<< Updated upstream
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	685a      	ldr	r2, [r3, #4]
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006636:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	689a      	ldr	r2, [r3, #8]
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006646:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	681a      	ldr	r2, [r3, #0]
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f042 0201 	orr.w	r2, r2, #1
 8006656:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006658:	6878      	ldr	r0, [r7, #4]
 800665a:	f000 fbe9 	bl	8006e30 <UART_CheckIdleState>
 800665e:	4603      	mov	r3, r0
}
 8006660:	4618      	mov	r0, r3
 8006662:	3708      	adds	r7, #8
 8006664:	46bd      	mov	sp, r7
 8006666:	bd80      	pop	{r7, pc}

08006668 <HAL_UART_Transmit>:
=======
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	685a      	ldr	r2, [r3, #4]
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006b56:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	689a      	ldr	r2, [r3, #8]
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006b66:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	681a      	ldr	r2, [r3, #0]
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f042 0201 	orr.w	r2, r2, #1
 8006b76:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006b78:	6878      	ldr	r0, [r7, #4]
 8006b7a:	f000 fbe9 	bl	8007350 <UART_CheckIdleState>
 8006b7e:	4603      	mov	r3, r0
}
 8006b80:	4618      	mov	r0, r3
 8006b82:	3708      	adds	r7, #8
 8006b84:	46bd      	mov	sp, r7
 8006b86:	bd80      	pop	{r7, pc}

08006b88 <HAL_UART_Transmit>:
>>>>>>> Stashed changes
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
<<<<<<< Updated upstream
 8006668:	b580      	push	{r7, lr}
 800666a:	b08a      	sub	sp, #40	@ 0x28
 800666c:	af02      	add	r7, sp, #8
 800666e:	60f8      	str	r0, [r7, #12]
 8006670:	60b9      	str	r1, [r7, #8]
 8006672:	603b      	str	r3, [r7, #0]
 8006674:	4613      	mov	r3, r2
 8006676:	80fb      	strh	r3, [r7, #6]
=======
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b08a      	sub	sp, #40	@ 0x28
 8006b8c:	af02      	add	r7, sp, #8
 8006b8e:	60f8      	str	r0, [r7, #12]
 8006b90:	60b9      	str	r1, [r7, #8]
 8006b92:	603b      	str	r3, [r7, #0]
 8006b94:	4613      	mov	r3, r2
 8006b96:	80fb      	strh	r3, [r7, #6]
>>>>>>> Stashed changes
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
<<<<<<< Updated upstream
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800667c:	2b20      	cmp	r3, #32
 800667e:	d177      	bne.n	8006770 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8006680:	68bb      	ldr	r3, [r7, #8]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d002      	beq.n	800668c <HAL_UART_Transmit+0x24>
 8006686:	88fb      	ldrh	r3, [r7, #6]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d101      	bne.n	8006690 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800668c:	2301      	movs	r3, #1
 800668e:	e070      	b.n	8006772 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	2200      	movs	r2, #0
 8006694:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	2221      	movs	r2, #33	@ 0x21
 800669c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800669e:	f7fc f8a5 	bl	80027ec <HAL_GetTick>
 80066a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	88fa      	ldrh	r2, [r7, #6]
 80066a8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	88fa      	ldrh	r2, [r7, #6]
 80066b0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	689b      	ldr	r3, [r3, #8]
 80066b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80066bc:	d108      	bne.n	80066d0 <HAL_UART_Transmit+0x68>
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	691b      	ldr	r3, [r3, #16]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d104      	bne.n	80066d0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80066c6:	2300      	movs	r3, #0
 80066c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80066ca:	68bb      	ldr	r3, [r7, #8]
 80066cc:	61bb      	str	r3, [r7, #24]
 80066ce:	e003      	b.n	80066d8 <HAL_UART_Transmit+0x70>
=======
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006b9c:	2b20      	cmp	r3, #32
 8006b9e:	d177      	bne.n	8006c90 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ba0:	68bb      	ldr	r3, [r7, #8]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d002      	beq.n	8006bac <HAL_UART_Transmit+0x24>
 8006ba6:	88fb      	ldrh	r3, [r7, #6]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d101      	bne.n	8006bb0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006bac:	2301      	movs	r3, #1
 8006bae:	e070      	b.n	8006c92 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	2221      	movs	r2, #33	@ 0x21
 8006bbc:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006bbe:	f7fb fe43 	bl	8002848 <HAL_GetTick>
 8006bc2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	88fa      	ldrh	r2, [r7, #6]
 8006bc8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	88fa      	ldrh	r2, [r7, #6]
 8006bd0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	689b      	ldr	r3, [r3, #8]
 8006bd8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006bdc:	d108      	bne.n	8006bf0 <HAL_UART_Transmit+0x68>
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	691b      	ldr	r3, [r3, #16]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d104      	bne.n	8006bf0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8006be6:	2300      	movs	r3, #0
 8006be8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006bea:	68bb      	ldr	r3, [r7, #8]
 8006bec:	61bb      	str	r3, [r7, #24]
 8006bee:	e003      	b.n	8006bf8 <HAL_UART_Transmit+0x70>
>>>>>>> Stashed changes
    }
    else
    {
      pdata8bits  = pData;
<<<<<<< Updated upstream
 80066d0:	68bb      	ldr	r3, [r7, #8]
 80066d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80066d4:	2300      	movs	r3, #0
 80066d6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80066d8:	e02f      	b.n	800673a <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	9300      	str	r3, [sp, #0]
 80066de:	697b      	ldr	r3, [r7, #20]
 80066e0:	2200      	movs	r2, #0
 80066e2:	2180      	movs	r1, #128	@ 0x80
 80066e4:	68f8      	ldr	r0, [r7, #12]
 80066e6:	f000 fc4b 	bl	8006f80 <UART_WaitOnFlagUntilTimeout>
 80066ea:	4603      	mov	r3, r0
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d004      	beq.n	80066fa <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	2220      	movs	r2, #32
 80066f4:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80066f6:	2303      	movs	r3, #3
 80066f8:	e03b      	b.n	8006772 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80066fa:	69fb      	ldr	r3, [r7, #28]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d10b      	bne.n	8006718 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006700:	69bb      	ldr	r3, [r7, #24]
 8006702:	881a      	ldrh	r2, [r3, #0]
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800670c:	b292      	uxth	r2, r2
 800670e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006710:	69bb      	ldr	r3, [r7, #24]
 8006712:	3302      	adds	r3, #2
 8006714:	61bb      	str	r3, [r7, #24]
 8006716:	e007      	b.n	8006728 <HAL_UART_Transmit+0xc0>
=======
 8006bf0:	68bb      	ldr	r3, [r7, #8]
 8006bf2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006bf8:	e02f      	b.n	8006c5a <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006bfa:	683b      	ldr	r3, [r7, #0]
 8006bfc:	9300      	str	r3, [sp, #0]
 8006bfe:	697b      	ldr	r3, [r7, #20]
 8006c00:	2200      	movs	r2, #0
 8006c02:	2180      	movs	r1, #128	@ 0x80
 8006c04:	68f8      	ldr	r0, [r7, #12]
 8006c06:	f000 fc4b 	bl	80074a0 <UART_WaitOnFlagUntilTimeout>
 8006c0a:	4603      	mov	r3, r0
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d004      	beq.n	8006c1a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	2220      	movs	r2, #32
 8006c14:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8006c16:	2303      	movs	r3, #3
 8006c18:	e03b      	b.n	8006c92 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8006c1a:	69fb      	ldr	r3, [r7, #28]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d10b      	bne.n	8006c38 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006c20:	69bb      	ldr	r3, [r7, #24]
 8006c22:	881a      	ldrh	r2, [r3, #0]
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006c2c:	b292      	uxth	r2, r2
 8006c2e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006c30:	69bb      	ldr	r3, [r7, #24]
 8006c32:	3302      	adds	r3, #2
 8006c34:	61bb      	str	r3, [r7, #24]
 8006c36:	e007      	b.n	8006c48 <HAL_UART_Transmit+0xc0>
>>>>>>> Stashed changes
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
<<<<<<< Updated upstream
 8006718:	69fb      	ldr	r3, [r7, #28]
 800671a:	781a      	ldrb	r2, [r3, #0]
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006722:	69fb      	ldr	r3, [r7, #28]
 8006724:	3301      	adds	r3, #1
 8006726:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800672e:	b29b      	uxth	r3, r3
 8006730:	3b01      	subs	r3, #1
 8006732:	b29a      	uxth	r2, r3
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006740:	b29b      	uxth	r3, r3
 8006742:	2b00      	cmp	r3, #0
 8006744:	d1c9      	bne.n	80066da <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	9300      	str	r3, [sp, #0]
 800674a:	697b      	ldr	r3, [r7, #20]
 800674c:	2200      	movs	r2, #0
 800674e:	2140      	movs	r1, #64	@ 0x40
 8006750:	68f8      	ldr	r0, [r7, #12]
 8006752:	f000 fc15 	bl	8006f80 <UART_WaitOnFlagUntilTimeout>
 8006756:	4603      	mov	r3, r0
 8006758:	2b00      	cmp	r3, #0
 800675a:	d004      	beq.n	8006766 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	2220      	movs	r2, #32
 8006760:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8006762:	2303      	movs	r3, #3
 8006764:	e005      	b.n	8006772 <HAL_UART_Transmit+0x10a>
=======
 8006c38:	69fb      	ldr	r3, [r7, #28]
 8006c3a:	781a      	ldrb	r2, [r3, #0]
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006c42:	69fb      	ldr	r3, [r7, #28]
 8006c44:	3301      	adds	r3, #1
 8006c46:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006c4e:	b29b      	uxth	r3, r3
 8006c50:	3b01      	subs	r3, #1
 8006c52:	b29a      	uxth	r2, r3
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006c60:	b29b      	uxth	r3, r3
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d1c9      	bne.n	8006bfa <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	9300      	str	r3, [sp, #0]
 8006c6a:	697b      	ldr	r3, [r7, #20]
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	2140      	movs	r1, #64	@ 0x40
 8006c70:	68f8      	ldr	r0, [r7, #12]
 8006c72:	f000 fc15 	bl	80074a0 <UART_WaitOnFlagUntilTimeout>
 8006c76:	4603      	mov	r3, r0
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d004      	beq.n	8006c86 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	2220      	movs	r2, #32
 8006c80:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8006c82:	2303      	movs	r3, #3
 8006c84:	e005      	b.n	8006c92 <HAL_UART_Transmit+0x10a>
>>>>>>> Stashed changes
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
<<<<<<< Updated upstream
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	2220      	movs	r2, #32
 800676a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800676c:	2300      	movs	r3, #0
 800676e:	e000      	b.n	8006772 <HAL_UART_Transmit+0x10a>
=======
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	2220      	movs	r2, #32
 8006c8a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	e000      	b.n	8006c92 <HAL_UART_Transmit+0x10a>
>>>>>>> Stashed changes
  }
  else
  {
    return HAL_BUSY;
<<<<<<< Updated upstream
 8006770:	2302      	movs	r3, #2
  }
}
 8006772:	4618      	mov	r0, r3
 8006774:	3720      	adds	r7, #32
 8006776:	46bd      	mov	sp, r7
 8006778:	bd80      	pop	{r7, pc}
	...

0800677c <UART_SetConfig>:
=======
 8006c90:	2302      	movs	r3, #2
  }
}
 8006c92:	4618      	mov	r0, r3
 8006c94:	3720      	adds	r7, #32
 8006c96:	46bd      	mov	sp, r7
 8006c98:	bd80      	pop	{r7, pc}
	...

08006c9c <UART_SetConfig>:
>>>>>>> Stashed changes
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
 800677c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006780:	b08a      	sub	sp, #40	@ 0x28
 8006782:	af00      	add	r7, sp, #0
 8006784:	60f8      	str	r0, [r7, #12]
=======
 8006c9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006ca0:	b08a      	sub	sp, #40	@ 0x28
 8006ca2:	af00      	add	r7, sp, #0
 8006ca4:	60f8      	str	r0, [r7, #12]
>>>>>>> Stashed changes
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
<<<<<<< Updated upstream
 8006786:	2300      	movs	r3, #0
 8006788:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
=======
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
>>>>>>> Stashed changes
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
<<<<<<< Updated upstream
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	689a      	ldr	r2, [r3, #8]
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	691b      	ldr	r3, [r3, #16]
 8006794:	431a      	orrs	r2, r3
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	695b      	ldr	r3, [r3, #20]
 800679a:	431a      	orrs	r2, r3
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	69db      	ldr	r3, [r3, #28]
 80067a0:	4313      	orrs	r3, r2
 80067a2:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	681a      	ldr	r2, [r3, #0]
 80067aa:	4ba4      	ldr	r3, [pc, #656]	@ (8006a3c <UART_SetConfig+0x2c0>)
 80067ac:	4013      	ands	r3, r2
 80067ae:	68fa      	ldr	r2, [r7, #12]
 80067b0:	6812      	ldr	r2, [r2, #0]
 80067b2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80067b4:	430b      	orrs	r3, r1
 80067b6:	6013      	str	r3, [r2, #0]
=======
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	689a      	ldr	r2, [r3, #8]
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	691b      	ldr	r3, [r3, #16]
 8006cb4:	431a      	orrs	r2, r3
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	695b      	ldr	r3, [r3, #20]
 8006cba:	431a      	orrs	r2, r3
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	69db      	ldr	r3, [r3, #28]
 8006cc0:	4313      	orrs	r3, r2
 8006cc2:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	681a      	ldr	r2, [r3, #0]
 8006cca:	4ba4      	ldr	r3, [pc, #656]	@ (8006f5c <UART_SetConfig+0x2c0>)
 8006ccc:	4013      	ands	r3, r2
 8006cce:	68fa      	ldr	r2, [r7, #12]
 8006cd0:	6812      	ldr	r2, [r2, #0]
 8006cd2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006cd4:	430b      	orrs	r3, r1
 8006cd6:	6013      	str	r3, [r2, #0]
>>>>>>> Stashed changes

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
<<<<<<< Updated upstream
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	685b      	ldr	r3, [r3, #4]
 80067be:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	68da      	ldr	r2, [r3, #12]
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	430a      	orrs	r2, r1
 80067cc:	605a      	str	r2, [r3, #4]
=======
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	685b      	ldr	r3, [r3, #4]
 8006cde:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	68da      	ldr	r2, [r3, #12]
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	430a      	orrs	r2, r1
 8006cec:	605a      	str	r2, [r3, #4]
>>>>>>> Stashed changes
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
<<<<<<< Updated upstream
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	699b      	ldr	r3, [r3, #24]
 80067d2:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	4a99      	ldr	r2, [pc, #612]	@ (8006a40 <UART_SetConfig+0x2c4>)
 80067da:	4293      	cmp	r3, r2
 80067dc:	d004      	beq.n	80067e8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	6a1b      	ldr	r3, [r3, #32]
 80067e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80067e4:	4313      	orrs	r3, r2
 80067e6:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	689b      	ldr	r3, [r3, #8]
 80067ee:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80067f8:	430a      	orrs	r2, r1
 80067fa:	609a      	str	r2, [r3, #8]
=======
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	699b      	ldr	r3, [r3, #24]
 8006cf2:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	4a99      	ldr	r2, [pc, #612]	@ (8006f60 <UART_SetConfig+0x2c4>)
 8006cfa:	4293      	cmp	r3, r2
 8006cfc:	d004      	beq.n	8006d08 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	6a1b      	ldr	r3, [r3, #32]
 8006d02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006d04:	4313      	orrs	r3, r2
 8006d06:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	689b      	ldr	r3, [r3, #8]
 8006d0e:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006d18:	430a      	orrs	r2, r1
 8006d1a:	609a      	str	r2, [r3, #8]
>>>>>>> Stashed changes
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
<<<<<<< Updated upstream
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	4a90      	ldr	r2, [pc, #576]	@ (8006a44 <UART_SetConfig+0x2c8>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d126      	bne.n	8006854 <UART_SetConfig+0xd8>
 8006806:	4b90      	ldr	r3, [pc, #576]	@ (8006a48 <UART_SetConfig+0x2cc>)
 8006808:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800680c:	f003 0303 	and.w	r3, r3, #3
 8006810:	2b03      	cmp	r3, #3
 8006812:	d81b      	bhi.n	800684c <UART_SetConfig+0xd0>
 8006814:	a201      	add	r2, pc, #4	@ (adr r2, 800681c <UART_SetConfig+0xa0>)
 8006816:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800681a:	bf00      	nop
 800681c:	0800682d 	.word	0x0800682d
 8006820:	0800683d 	.word	0x0800683d
 8006824:	08006835 	.word	0x08006835
 8006828:	08006845 	.word	0x08006845
 800682c:	2301      	movs	r3, #1
 800682e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006832:	e116      	b.n	8006a62 <UART_SetConfig+0x2e6>
 8006834:	2302      	movs	r3, #2
 8006836:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800683a:	e112      	b.n	8006a62 <UART_SetConfig+0x2e6>
 800683c:	2304      	movs	r3, #4
 800683e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006842:	e10e      	b.n	8006a62 <UART_SetConfig+0x2e6>
 8006844:	2308      	movs	r3, #8
 8006846:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800684a:	e10a      	b.n	8006a62 <UART_SetConfig+0x2e6>
 800684c:	2310      	movs	r3, #16
 800684e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006852:	e106      	b.n	8006a62 <UART_SetConfig+0x2e6>
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	4a7c      	ldr	r2, [pc, #496]	@ (8006a4c <UART_SetConfig+0x2d0>)
 800685a:	4293      	cmp	r3, r2
 800685c:	d138      	bne.n	80068d0 <UART_SetConfig+0x154>
 800685e:	4b7a      	ldr	r3, [pc, #488]	@ (8006a48 <UART_SetConfig+0x2cc>)
 8006860:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006864:	f003 030c 	and.w	r3, r3, #12
 8006868:	2b0c      	cmp	r3, #12
 800686a:	d82d      	bhi.n	80068c8 <UART_SetConfig+0x14c>
 800686c:	a201      	add	r2, pc, #4	@ (adr r2, 8006874 <UART_SetConfig+0xf8>)
 800686e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006872:	bf00      	nop
 8006874:	080068a9 	.word	0x080068a9
 8006878:	080068c9 	.word	0x080068c9
 800687c:	080068c9 	.word	0x080068c9
 8006880:	080068c9 	.word	0x080068c9
 8006884:	080068b9 	.word	0x080068b9
 8006888:	080068c9 	.word	0x080068c9
 800688c:	080068c9 	.word	0x080068c9
 8006890:	080068c9 	.word	0x080068c9
 8006894:	080068b1 	.word	0x080068b1
 8006898:	080068c9 	.word	0x080068c9
 800689c:	080068c9 	.word	0x080068c9
 80068a0:	080068c9 	.word	0x080068c9
 80068a4:	080068c1 	.word	0x080068c1
 80068a8:	2300      	movs	r3, #0
 80068aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80068ae:	e0d8      	b.n	8006a62 <UART_SetConfig+0x2e6>
 80068b0:	2302      	movs	r3, #2
 80068b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80068b6:	e0d4      	b.n	8006a62 <UART_SetConfig+0x2e6>
 80068b8:	2304      	movs	r3, #4
 80068ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80068be:	e0d0      	b.n	8006a62 <UART_SetConfig+0x2e6>
 80068c0:	2308      	movs	r3, #8
 80068c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80068c6:	e0cc      	b.n	8006a62 <UART_SetConfig+0x2e6>
 80068c8:	2310      	movs	r3, #16
 80068ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80068ce:	e0c8      	b.n	8006a62 <UART_SetConfig+0x2e6>
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	4a5e      	ldr	r2, [pc, #376]	@ (8006a50 <UART_SetConfig+0x2d4>)
 80068d6:	4293      	cmp	r3, r2
 80068d8:	d125      	bne.n	8006926 <UART_SetConfig+0x1aa>
 80068da:	4b5b      	ldr	r3, [pc, #364]	@ (8006a48 <UART_SetConfig+0x2cc>)
 80068dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80068e0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80068e4:	2b30      	cmp	r3, #48	@ 0x30
 80068e6:	d016      	beq.n	8006916 <UART_SetConfig+0x19a>
 80068e8:	2b30      	cmp	r3, #48	@ 0x30
 80068ea:	d818      	bhi.n	800691e <UART_SetConfig+0x1a2>
 80068ec:	2b20      	cmp	r3, #32
 80068ee:	d00a      	beq.n	8006906 <UART_SetConfig+0x18a>
 80068f0:	2b20      	cmp	r3, #32
 80068f2:	d814      	bhi.n	800691e <UART_SetConfig+0x1a2>
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d002      	beq.n	80068fe <UART_SetConfig+0x182>
 80068f8:	2b10      	cmp	r3, #16
 80068fa:	d008      	beq.n	800690e <UART_SetConfig+0x192>
 80068fc:	e00f      	b.n	800691e <UART_SetConfig+0x1a2>
 80068fe:	2300      	movs	r3, #0
 8006900:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006904:	e0ad      	b.n	8006a62 <UART_SetConfig+0x2e6>
 8006906:	2302      	movs	r3, #2
 8006908:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800690c:	e0a9      	b.n	8006a62 <UART_SetConfig+0x2e6>
 800690e:	2304      	movs	r3, #4
 8006910:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006914:	e0a5      	b.n	8006a62 <UART_SetConfig+0x2e6>
 8006916:	2308      	movs	r3, #8
 8006918:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800691c:	e0a1      	b.n	8006a62 <UART_SetConfig+0x2e6>
 800691e:	2310      	movs	r3, #16
 8006920:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006924:	e09d      	b.n	8006a62 <UART_SetConfig+0x2e6>
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	4a4a      	ldr	r2, [pc, #296]	@ (8006a54 <UART_SetConfig+0x2d8>)
 800692c:	4293      	cmp	r3, r2
 800692e:	d125      	bne.n	800697c <UART_SetConfig+0x200>
 8006930:	4b45      	ldr	r3, [pc, #276]	@ (8006a48 <UART_SetConfig+0x2cc>)
 8006932:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006936:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800693a:	2bc0      	cmp	r3, #192	@ 0xc0
 800693c:	d016      	beq.n	800696c <UART_SetConfig+0x1f0>
 800693e:	2bc0      	cmp	r3, #192	@ 0xc0
 8006940:	d818      	bhi.n	8006974 <UART_SetConfig+0x1f8>
 8006942:	2b80      	cmp	r3, #128	@ 0x80
 8006944:	d00a      	beq.n	800695c <UART_SetConfig+0x1e0>
 8006946:	2b80      	cmp	r3, #128	@ 0x80
 8006948:	d814      	bhi.n	8006974 <UART_SetConfig+0x1f8>
 800694a:	2b00      	cmp	r3, #0
 800694c:	d002      	beq.n	8006954 <UART_SetConfig+0x1d8>
 800694e:	2b40      	cmp	r3, #64	@ 0x40
 8006950:	d008      	beq.n	8006964 <UART_SetConfig+0x1e8>
 8006952:	e00f      	b.n	8006974 <UART_SetConfig+0x1f8>
 8006954:	2300      	movs	r3, #0
 8006956:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800695a:	e082      	b.n	8006a62 <UART_SetConfig+0x2e6>
 800695c:	2302      	movs	r3, #2
 800695e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006962:	e07e      	b.n	8006a62 <UART_SetConfig+0x2e6>
 8006964:	2304      	movs	r3, #4
 8006966:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800696a:	e07a      	b.n	8006a62 <UART_SetConfig+0x2e6>
 800696c:	2308      	movs	r3, #8
 800696e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006972:	e076      	b.n	8006a62 <UART_SetConfig+0x2e6>
 8006974:	2310      	movs	r3, #16
 8006976:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800697a:	e072      	b.n	8006a62 <UART_SetConfig+0x2e6>
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	4a35      	ldr	r2, [pc, #212]	@ (8006a58 <UART_SetConfig+0x2dc>)
 8006982:	4293      	cmp	r3, r2
 8006984:	d12a      	bne.n	80069dc <UART_SetConfig+0x260>
 8006986:	4b30      	ldr	r3, [pc, #192]	@ (8006a48 <UART_SetConfig+0x2cc>)
 8006988:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800698c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006990:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006994:	d01a      	beq.n	80069cc <UART_SetConfig+0x250>
 8006996:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800699a:	d81b      	bhi.n	80069d4 <UART_SetConfig+0x258>
 800699c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80069a0:	d00c      	beq.n	80069bc <UART_SetConfig+0x240>
 80069a2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80069a6:	d815      	bhi.n	80069d4 <UART_SetConfig+0x258>
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d003      	beq.n	80069b4 <UART_SetConfig+0x238>
 80069ac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80069b0:	d008      	beq.n	80069c4 <UART_SetConfig+0x248>
 80069b2:	e00f      	b.n	80069d4 <UART_SetConfig+0x258>
 80069b4:	2300      	movs	r3, #0
 80069b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80069ba:	e052      	b.n	8006a62 <UART_SetConfig+0x2e6>
 80069bc:	2302      	movs	r3, #2
 80069be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80069c2:	e04e      	b.n	8006a62 <UART_SetConfig+0x2e6>
 80069c4:	2304      	movs	r3, #4
 80069c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80069ca:	e04a      	b.n	8006a62 <UART_SetConfig+0x2e6>
 80069cc:	2308      	movs	r3, #8
 80069ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80069d2:	e046      	b.n	8006a62 <UART_SetConfig+0x2e6>
 80069d4:	2310      	movs	r3, #16
 80069d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80069da:	e042      	b.n	8006a62 <UART_SetConfig+0x2e6>
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	4a17      	ldr	r2, [pc, #92]	@ (8006a40 <UART_SetConfig+0x2c4>)
 80069e2:	4293      	cmp	r3, r2
 80069e4:	d13a      	bne.n	8006a5c <UART_SetConfig+0x2e0>
 80069e6:	4b18      	ldr	r3, [pc, #96]	@ (8006a48 <UART_SetConfig+0x2cc>)
 80069e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069ec:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80069f0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80069f4:	d01a      	beq.n	8006a2c <UART_SetConfig+0x2b0>
 80069f6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80069fa:	d81b      	bhi.n	8006a34 <UART_SetConfig+0x2b8>
 80069fc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006a00:	d00c      	beq.n	8006a1c <UART_SetConfig+0x2a0>
 8006a02:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006a06:	d815      	bhi.n	8006a34 <UART_SetConfig+0x2b8>
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d003      	beq.n	8006a14 <UART_SetConfig+0x298>
 8006a0c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006a10:	d008      	beq.n	8006a24 <UART_SetConfig+0x2a8>
 8006a12:	e00f      	b.n	8006a34 <UART_SetConfig+0x2b8>
 8006a14:	2300      	movs	r3, #0
 8006a16:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006a1a:	e022      	b.n	8006a62 <UART_SetConfig+0x2e6>
 8006a1c:	2302      	movs	r3, #2
 8006a1e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006a22:	e01e      	b.n	8006a62 <UART_SetConfig+0x2e6>
 8006a24:	2304      	movs	r3, #4
 8006a26:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006a2a:	e01a      	b.n	8006a62 <UART_SetConfig+0x2e6>
 8006a2c:	2308      	movs	r3, #8
 8006a2e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006a32:	e016      	b.n	8006a62 <UART_SetConfig+0x2e6>
 8006a34:	2310      	movs	r3, #16
 8006a36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006a3a:	e012      	b.n	8006a62 <UART_SetConfig+0x2e6>
 8006a3c:	efff69f3 	.word	0xefff69f3
 8006a40:	40008000 	.word	0x40008000
 8006a44:	40013800 	.word	0x40013800
 8006a48:	40021000 	.word	0x40021000
 8006a4c:	40004400 	.word	0x40004400
 8006a50:	40004800 	.word	0x40004800
 8006a54:	40004c00 	.word	0x40004c00
 8006a58:	40005000 	.word	0x40005000
 8006a5c:	2310      	movs	r3, #16
 8006a5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	4a9f      	ldr	r2, [pc, #636]	@ (8006ce4 <UART_SetConfig+0x568>)
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	d17a      	bne.n	8006b62 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006a6c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006a70:	2b08      	cmp	r3, #8
 8006a72:	d824      	bhi.n	8006abe <UART_SetConfig+0x342>
 8006a74:	a201      	add	r2, pc, #4	@ (adr r2, 8006a7c <UART_SetConfig+0x300>)
 8006a76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a7a:	bf00      	nop
 8006a7c:	08006aa1 	.word	0x08006aa1
 8006a80:	08006abf 	.word	0x08006abf
 8006a84:	08006aa9 	.word	0x08006aa9
 8006a88:	08006abf 	.word	0x08006abf
 8006a8c:	08006aaf 	.word	0x08006aaf
 8006a90:	08006abf 	.word	0x08006abf
 8006a94:	08006abf 	.word	0x08006abf
 8006a98:	08006abf 	.word	0x08006abf
 8006a9c:	08006ab7 	.word	0x08006ab7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006aa0:	f7fc ff9a 	bl	80039d8 <HAL_RCC_GetPCLK1Freq>
 8006aa4:	61f8      	str	r0, [r7, #28]
        break;
 8006aa6:	e010      	b.n	8006aca <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006aa8:	4b8f      	ldr	r3, [pc, #572]	@ (8006ce8 <UART_SetConfig+0x56c>)
 8006aaa:	61fb      	str	r3, [r7, #28]
        break;
 8006aac:	e00d      	b.n	8006aca <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006aae:	f7fc fefb 	bl	80038a8 <HAL_RCC_GetSysClockFreq>
 8006ab2:	61f8      	str	r0, [r7, #28]
        break;
 8006ab4:	e009      	b.n	8006aca <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006ab6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006aba:	61fb      	str	r3, [r7, #28]
        break;
 8006abc:	e005      	b.n	8006aca <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8006abe:	2300      	movs	r3, #0
 8006ac0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006ac2:	2301      	movs	r3, #1
 8006ac4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006ac8:	bf00      	nop
=======
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	4a90      	ldr	r2, [pc, #576]	@ (8006f64 <UART_SetConfig+0x2c8>)
 8006d22:	4293      	cmp	r3, r2
 8006d24:	d126      	bne.n	8006d74 <UART_SetConfig+0xd8>
 8006d26:	4b90      	ldr	r3, [pc, #576]	@ (8006f68 <UART_SetConfig+0x2cc>)
 8006d28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d2c:	f003 0303 	and.w	r3, r3, #3
 8006d30:	2b03      	cmp	r3, #3
 8006d32:	d81b      	bhi.n	8006d6c <UART_SetConfig+0xd0>
 8006d34:	a201      	add	r2, pc, #4	@ (adr r2, 8006d3c <UART_SetConfig+0xa0>)
 8006d36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d3a:	bf00      	nop
 8006d3c:	08006d4d 	.word	0x08006d4d
 8006d40:	08006d5d 	.word	0x08006d5d
 8006d44:	08006d55 	.word	0x08006d55
 8006d48:	08006d65 	.word	0x08006d65
 8006d4c:	2301      	movs	r3, #1
 8006d4e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006d52:	e116      	b.n	8006f82 <UART_SetConfig+0x2e6>
 8006d54:	2302      	movs	r3, #2
 8006d56:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006d5a:	e112      	b.n	8006f82 <UART_SetConfig+0x2e6>
 8006d5c:	2304      	movs	r3, #4
 8006d5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006d62:	e10e      	b.n	8006f82 <UART_SetConfig+0x2e6>
 8006d64:	2308      	movs	r3, #8
 8006d66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006d6a:	e10a      	b.n	8006f82 <UART_SetConfig+0x2e6>
 8006d6c:	2310      	movs	r3, #16
 8006d6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006d72:	e106      	b.n	8006f82 <UART_SetConfig+0x2e6>
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	4a7c      	ldr	r2, [pc, #496]	@ (8006f6c <UART_SetConfig+0x2d0>)
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	d138      	bne.n	8006df0 <UART_SetConfig+0x154>
 8006d7e:	4b7a      	ldr	r3, [pc, #488]	@ (8006f68 <UART_SetConfig+0x2cc>)
 8006d80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d84:	f003 030c 	and.w	r3, r3, #12
 8006d88:	2b0c      	cmp	r3, #12
 8006d8a:	d82d      	bhi.n	8006de8 <UART_SetConfig+0x14c>
 8006d8c:	a201      	add	r2, pc, #4	@ (adr r2, 8006d94 <UART_SetConfig+0xf8>)
 8006d8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d92:	bf00      	nop
 8006d94:	08006dc9 	.word	0x08006dc9
 8006d98:	08006de9 	.word	0x08006de9
 8006d9c:	08006de9 	.word	0x08006de9
 8006da0:	08006de9 	.word	0x08006de9
 8006da4:	08006dd9 	.word	0x08006dd9
 8006da8:	08006de9 	.word	0x08006de9
 8006dac:	08006de9 	.word	0x08006de9
 8006db0:	08006de9 	.word	0x08006de9
 8006db4:	08006dd1 	.word	0x08006dd1
 8006db8:	08006de9 	.word	0x08006de9
 8006dbc:	08006de9 	.word	0x08006de9
 8006dc0:	08006de9 	.word	0x08006de9
 8006dc4:	08006de1 	.word	0x08006de1
 8006dc8:	2300      	movs	r3, #0
 8006dca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006dce:	e0d8      	b.n	8006f82 <UART_SetConfig+0x2e6>
 8006dd0:	2302      	movs	r3, #2
 8006dd2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006dd6:	e0d4      	b.n	8006f82 <UART_SetConfig+0x2e6>
 8006dd8:	2304      	movs	r3, #4
 8006dda:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006dde:	e0d0      	b.n	8006f82 <UART_SetConfig+0x2e6>
 8006de0:	2308      	movs	r3, #8
 8006de2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006de6:	e0cc      	b.n	8006f82 <UART_SetConfig+0x2e6>
 8006de8:	2310      	movs	r3, #16
 8006dea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006dee:	e0c8      	b.n	8006f82 <UART_SetConfig+0x2e6>
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	4a5e      	ldr	r2, [pc, #376]	@ (8006f70 <UART_SetConfig+0x2d4>)
 8006df6:	4293      	cmp	r3, r2
 8006df8:	d125      	bne.n	8006e46 <UART_SetConfig+0x1aa>
 8006dfa:	4b5b      	ldr	r3, [pc, #364]	@ (8006f68 <UART_SetConfig+0x2cc>)
 8006dfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e00:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006e04:	2b30      	cmp	r3, #48	@ 0x30
 8006e06:	d016      	beq.n	8006e36 <UART_SetConfig+0x19a>
 8006e08:	2b30      	cmp	r3, #48	@ 0x30
 8006e0a:	d818      	bhi.n	8006e3e <UART_SetConfig+0x1a2>
 8006e0c:	2b20      	cmp	r3, #32
 8006e0e:	d00a      	beq.n	8006e26 <UART_SetConfig+0x18a>
 8006e10:	2b20      	cmp	r3, #32
 8006e12:	d814      	bhi.n	8006e3e <UART_SetConfig+0x1a2>
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d002      	beq.n	8006e1e <UART_SetConfig+0x182>
 8006e18:	2b10      	cmp	r3, #16
 8006e1a:	d008      	beq.n	8006e2e <UART_SetConfig+0x192>
 8006e1c:	e00f      	b.n	8006e3e <UART_SetConfig+0x1a2>
 8006e1e:	2300      	movs	r3, #0
 8006e20:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006e24:	e0ad      	b.n	8006f82 <UART_SetConfig+0x2e6>
 8006e26:	2302      	movs	r3, #2
 8006e28:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006e2c:	e0a9      	b.n	8006f82 <UART_SetConfig+0x2e6>
 8006e2e:	2304      	movs	r3, #4
 8006e30:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006e34:	e0a5      	b.n	8006f82 <UART_SetConfig+0x2e6>
 8006e36:	2308      	movs	r3, #8
 8006e38:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006e3c:	e0a1      	b.n	8006f82 <UART_SetConfig+0x2e6>
 8006e3e:	2310      	movs	r3, #16
 8006e40:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006e44:	e09d      	b.n	8006f82 <UART_SetConfig+0x2e6>
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	4a4a      	ldr	r2, [pc, #296]	@ (8006f74 <UART_SetConfig+0x2d8>)
 8006e4c:	4293      	cmp	r3, r2
 8006e4e:	d125      	bne.n	8006e9c <UART_SetConfig+0x200>
 8006e50:	4b45      	ldr	r3, [pc, #276]	@ (8006f68 <UART_SetConfig+0x2cc>)
 8006e52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e56:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006e5a:	2bc0      	cmp	r3, #192	@ 0xc0
 8006e5c:	d016      	beq.n	8006e8c <UART_SetConfig+0x1f0>
 8006e5e:	2bc0      	cmp	r3, #192	@ 0xc0
 8006e60:	d818      	bhi.n	8006e94 <UART_SetConfig+0x1f8>
 8006e62:	2b80      	cmp	r3, #128	@ 0x80
 8006e64:	d00a      	beq.n	8006e7c <UART_SetConfig+0x1e0>
 8006e66:	2b80      	cmp	r3, #128	@ 0x80
 8006e68:	d814      	bhi.n	8006e94 <UART_SetConfig+0x1f8>
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d002      	beq.n	8006e74 <UART_SetConfig+0x1d8>
 8006e6e:	2b40      	cmp	r3, #64	@ 0x40
 8006e70:	d008      	beq.n	8006e84 <UART_SetConfig+0x1e8>
 8006e72:	e00f      	b.n	8006e94 <UART_SetConfig+0x1f8>
 8006e74:	2300      	movs	r3, #0
 8006e76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006e7a:	e082      	b.n	8006f82 <UART_SetConfig+0x2e6>
 8006e7c:	2302      	movs	r3, #2
 8006e7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006e82:	e07e      	b.n	8006f82 <UART_SetConfig+0x2e6>
 8006e84:	2304      	movs	r3, #4
 8006e86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006e8a:	e07a      	b.n	8006f82 <UART_SetConfig+0x2e6>
 8006e8c:	2308      	movs	r3, #8
 8006e8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006e92:	e076      	b.n	8006f82 <UART_SetConfig+0x2e6>
 8006e94:	2310      	movs	r3, #16
 8006e96:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006e9a:	e072      	b.n	8006f82 <UART_SetConfig+0x2e6>
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	4a35      	ldr	r2, [pc, #212]	@ (8006f78 <UART_SetConfig+0x2dc>)
 8006ea2:	4293      	cmp	r3, r2
 8006ea4:	d12a      	bne.n	8006efc <UART_SetConfig+0x260>
 8006ea6:	4b30      	ldr	r3, [pc, #192]	@ (8006f68 <UART_SetConfig+0x2cc>)
 8006ea8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006eac:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006eb0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006eb4:	d01a      	beq.n	8006eec <UART_SetConfig+0x250>
 8006eb6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006eba:	d81b      	bhi.n	8006ef4 <UART_SetConfig+0x258>
 8006ebc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006ec0:	d00c      	beq.n	8006edc <UART_SetConfig+0x240>
 8006ec2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006ec6:	d815      	bhi.n	8006ef4 <UART_SetConfig+0x258>
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d003      	beq.n	8006ed4 <UART_SetConfig+0x238>
 8006ecc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006ed0:	d008      	beq.n	8006ee4 <UART_SetConfig+0x248>
 8006ed2:	e00f      	b.n	8006ef4 <UART_SetConfig+0x258>
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006eda:	e052      	b.n	8006f82 <UART_SetConfig+0x2e6>
 8006edc:	2302      	movs	r3, #2
 8006ede:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006ee2:	e04e      	b.n	8006f82 <UART_SetConfig+0x2e6>
 8006ee4:	2304      	movs	r3, #4
 8006ee6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006eea:	e04a      	b.n	8006f82 <UART_SetConfig+0x2e6>
 8006eec:	2308      	movs	r3, #8
 8006eee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006ef2:	e046      	b.n	8006f82 <UART_SetConfig+0x2e6>
 8006ef4:	2310      	movs	r3, #16
 8006ef6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006efa:	e042      	b.n	8006f82 <UART_SetConfig+0x2e6>
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	4a17      	ldr	r2, [pc, #92]	@ (8006f60 <UART_SetConfig+0x2c4>)
 8006f02:	4293      	cmp	r3, r2
 8006f04:	d13a      	bne.n	8006f7c <UART_SetConfig+0x2e0>
 8006f06:	4b18      	ldr	r3, [pc, #96]	@ (8006f68 <UART_SetConfig+0x2cc>)
 8006f08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f0c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006f10:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006f14:	d01a      	beq.n	8006f4c <UART_SetConfig+0x2b0>
 8006f16:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006f1a:	d81b      	bhi.n	8006f54 <UART_SetConfig+0x2b8>
 8006f1c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006f20:	d00c      	beq.n	8006f3c <UART_SetConfig+0x2a0>
 8006f22:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006f26:	d815      	bhi.n	8006f54 <UART_SetConfig+0x2b8>
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d003      	beq.n	8006f34 <UART_SetConfig+0x298>
 8006f2c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006f30:	d008      	beq.n	8006f44 <UART_SetConfig+0x2a8>
 8006f32:	e00f      	b.n	8006f54 <UART_SetConfig+0x2b8>
 8006f34:	2300      	movs	r3, #0
 8006f36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f3a:	e022      	b.n	8006f82 <UART_SetConfig+0x2e6>
 8006f3c:	2302      	movs	r3, #2
 8006f3e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f42:	e01e      	b.n	8006f82 <UART_SetConfig+0x2e6>
 8006f44:	2304      	movs	r3, #4
 8006f46:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f4a:	e01a      	b.n	8006f82 <UART_SetConfig+0x2e6>
 8006f4c:	2308      	movs	r3, #8
 8006f4e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f52:	e016      	b.n	8006f82 <UART_SetConfig+0x2e6>
 8006f54:	2310      	movs	r3, #16
 8006f56:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f5a:	e012      	b.n	8006f82 <UART_SetConfig+0x2e6>
 8006f5c:	efff69f3 	.word	0xefff69f3
 8006f60:	40008000 	.word	0x40008000
 8006f64:	40013800 	.word	0x40013800
 8006f68:	40021000 	.word	0x40021000
 8006f6c:	40004400 	.word	0x40004400
 8006f70:	40004800 	.word	0x40004800
 8006f74:	40004c00 	.word	0x40004c00
 8006f78:	40005000 	.word	0x40005000
 8006f7c:	2310      	movs	r3, #16
 8006f7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	4a9f      	ldr	r2, [pc, #636]	@ (8007204 <UART_SetConfig+0x568>)
 8006f88:	4293      	cmp	r3, r2
 8006f8a:	d17a      	bne.n	8007082 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006f8c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006f90:	2b08      	cmp	r3, #8
 8006f92:	d824      	bhi.n	8006fde <UART_SetConfig+0x342>
 8006f94:	a201      	add	r2, pc, #4	@ (adr r2, 8006f9c <UART_SetConfig+0x300>)
 8006f96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f9a:	bf00      	nop
 8006f9c:	08006fc1 	.word	0x08006fc1
 8006fa0:	08006fdf 	.word	0x08006fdf
 8006fa4:	08006fc9 	.word	0x08006fc9
 8006fa8:	08006fdf 	.word	0x08006fdf
 8006fac:	08006fcf 	.word	0x08006fcf
 8006fb0:	08006fdf 	.word	0x08006fdf
 8006fb4:	08006fdf 	.word	0x08006fdf
 8006fb8:	08006fdf 	.word	0x08006fdf
 8006fbc:	08006fd7 	.word	0x08006fd7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006fc0:	f7fd f99e 	bl	8004300 <HAL_RCC_GetPCLK1Freq>
 8006fc4:	61f8      	str	r0, [r7, #28]
        break;
 8006fc6:	e010      	b.n	8006fea <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006fc8:	4b8f      	ldr	r3, [pc, #572]	@ (8007208 <UART_SetConfig+0x56c>)
 8006fca:	61fb      	str	r3, [r7, #28]
        break;
 8006fcc:	e00d      	b.n	8006fea <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006fce:	f7fd f8ff 	bl	80041d0 <HAL_RCC_GetSysClockFreq>
 8006fd2:	61f8      	str	r0, [r7, #28]
        break;
 8006fd4:	e009      	b.n	8006fea <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006fd6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006fda:	61fb      	str	r3, [r7, #28]
        break;
 8006fdc:	e005      	b.n	8006fea <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8006fde:	2300      	movs	r3, #0
 8006fe0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006fe2:	2301      	movs	r3, #1
 8006fe4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006fe8:	bf00      	nop
>>>>>>> Stashed changes
    }

    /* If proper clock source reported */
    if (pclk != 0U)
<<<<<<< Updated upstream
 8006aca:	69fb      	ldr	r3, [r7, #28]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	f000 80fb 	beq.w	8006cc8 <UART_SetConfig+0x54c>
=======
 8006fea:	69fb      	ldr	r3, [r7, #28]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	f000 80fb 	beq.w	80071e8 <UART_SetConfig+0x54c>
>>>>>>> Stashed changes
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
<<<<<<< Updated upstream
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	685a      	ldr	r2, [r3, #4]
 8006ad6:	4613      	mov	r3, r2
 8006ad8:	005b      	lsls	r3, r3, #1
 8006ada:	4413      	add	r3, r2
 8006adc:	69fa      	ldr	r2, [r7, #28]
 8006ade:	429a      	cmp	r2, r3
 8006ae0:	d305      	bcc.n	8006aee <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	685b      	ldr	r3, [r3, #4]
 8006ae6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006ae8:	69fa      	ldr	r2, [r7, #28]
 8006aea:	429a      	cmp	r2, r3
 8006aec:	d903      	bls.n	8006af6 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8006aee:	2301      	movs	r3, #1
 8006af0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006af4:	e0e8      	b.n	8006cc8 <UART_SetConfig+0x54c>
=======
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	685a      	ldr	r2, [r3, #4]
 8006ff6:	4613      	mov	r3, r2
 8006ff8:	005b      	lsls	r3, r3, #1
 8006ffa:	4413      	add	r3, r2
 8006ffc:	69fa      	ldr	r2, [r7, #28]
 8006ffe:	429a      	cmp	r2, r3
 8007000:	d305      	bcc.n	800700e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	685b      	ldr	r3, [r3, #4]
 8007006:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007008:	69fa      	ldr	r2, [r7, #28]
 800700a:	429a      	cmp	r2, r3
 800700c:	d903      	bls.n	8007016 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800700e:	2301      	movs	r3, #1
 8007010:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007014:	e0e8      	b.n	80071e8 <UART_SetConfig+0x54c>
>>>>>>> Stashed changes
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
<<<<<<< Updated upstream
 8006af6:	69fb      	ldr	r3, [r7, #28]
 8006af8:	2200      	movs	r2, #0
 8006afa:	461c      	mov	r4, r3
 8006afc:	4615      	mov	r5, r2
 8006afe:	f04f 0200 	mov.w	r2, #0
 8006b02:	f04f 0300 	mov.w	r3, #0
 8006b06:	022b      	lsls	r3, r5, #8
 8006b08:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006b0c:	0222      	lsls	r2, r4, #8
 8006b0e:	68f9      	ldr	r1, [r7, #12]
 8006b10:	6849      	ldr	r1, [r1, #4]
 8006b12:	0849      	lsrs	r1, r1, #1
 8006b14:	2000      	movs	r0, #0
 8006b16:	4688      	mov	r8, r1
 8006b18:	4681      	mov	r9, r0
 8006b1a:	eb12 0a08 	adds.w	sl, r2, r8
 8006b1e:	eb43 0b09 	adc.w	fp, r3, r9
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	685b      	ldr	r3, [r3, #4]
 8006b26:	2200      	movs	r2, #0
 8006b28:	603b      	str	r3, [r7, #0]
 8006b2a:	607a      	str	r2, [r7, #4]
 8006b2c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b30:	4650      	mov	r0, sl
 8006b32:	4659      	mov	r1, fp
 8006b34:	f7fa f8b8 	bl	8000ca8 <__aeabi_uldivmod>
 8006b38:	4602      	mov	r2, r0
 8006b3a:	460b      	mov	r3, r1
 8006b3c:	4613      	mov	r3, r2
 8006b3e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006b40:	69bb      	ldr	r3, [r7, #24]
 8006b42:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006b46:	d308      	bcc.n	8006b5a <UART_SetConfig+0x3de>
 8006b48:	69bb      	ldr	r3, [r7, #24]
 8006b4a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006b4e:	d204      	bcs.n	8006b5a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	69ba      	ldr	r2, [r7, #24]
 8006b56:	60da      	str	r2, [r3, #12]
 8006b58:	e0b6      	b.n	8006cc8 <UART_SetConfig+0x54c>
=======
 8007016:	69fb      	ldr	r3, [r7, #28]
 8007018:	2200      	movs	r2, #0
 800701a:	461c      	mov	r4, r3
 800701c:	4615      	mov	r5, r2
 800701e:	f04f 0200 	mov.w	r2, #0
 8007022:	f04f 0300 	mov.w	r3, #0
 8007026:	022b      	lsls	r3, r5, #8
 8007028:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800702c:	0222      	lsls	r2, r4, #8
 800702e:	68f9      	ldr	r1, [r7, #12]
 8007030:	6849      	ldr	r1, [r1, #4]
 8007032:	0849      	lsrs	r1, r1, #1
 8007034:	2000      	movs	r0, #0
 8007036:	4688      	mov	r8, r1
 8007038:	4681      	mov	r9, r0
 800703a:	eb12 0a08 	adds.w	sl, r2, r8
 800703e:	eb43 0b09 	adc.w	fp, r3, r9
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	685b      	ldr	r3, [r3, #4]
 8007046:	2200      	movs	r2, #0
 8007048:	603b      	str	r3, [r7, #0]
 800704a:	607a      	str	r2, [r7, #4]
 800704c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007050:	4650      	mov	r0, sl
 8007052:	4659      	mov	r1, fp
 8007054:	f7f9 fe28 	bl	8000ca8 <__aeabi_uldivmod>
 8007058:	4602      	mov	r2, r0
 800705a:	460b      	mov	r3, r1
 800705c:	4613      	mov	r3, r2
 800705e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007060:	69bb      	ldr	r3, [r7, #24]
 8007062:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007066:	d308      	bcc.n	800707a <UART_SetConfig+0x3de>
 8007068:	69bb      	ldr	r3, [r7, #24]
 800706a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800706e:	d204      	bcs.n	800707a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	69ba      	ldr	r2, [r7, #24]
 8007076:	60da      	str	r2, [r3, #12]
 8007078:	e0b6      	b.n	80071e8 <UART_SetConfig+0x54c>
>>>>>>> Stashed changes
        }
        else
        {
          ret = HAL_ERROR;
<<<<<<< Updated upstream
 8006b5a:	2301      	movs	r3, #1
 8006b5c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006b60:	e0b2      	b.n	8006cc8 <UART_SetConfig+0x54c>
=======
 800707a:	2301      	movs	r3, #1
 800707c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007080:	e0b2      	b.n	80071e8 <UART_SetConfig+0x54c>
>>>>>>> Stashed changes
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
<<<<<<< Updated upstream
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	69db      	ldr	r3, [r3, #28]
 8006b66:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006b6a:	d15e      	bne.n	8006c2a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006b6c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006b70:	2b08      	cmp	r3, #8
 8006b72:	d828      	bhi.n	8006bc6 <UART_SetConfig+0x44a>
 8006b74:	a201      	add	r2, pc, #4	@ (adr r2, 8006b7c <UART_SetConfig+0x400>)
 8006b76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b7a:	bf00      	nop
 8006b7c:	08006ba1 	.word	0x08006ba1
 8006b80:	08006ba9 	.word	0x08006ba9
 8006b84:	08006bb1 	.word	0x08006bb1
 8006b88:	08006bc7 	.word	0x08006bc7
 8006b8c:	08006bb7 	.word	0x08006bb7
 8006b90:	08006bc7 	.word	0x08006bc7
 8006b94:	08006bc7 	.word	0x08006bc7
 8006b98:	08006bc7 	.word	0x08006bc7
 8006b9c:	08006bbf 	.word	0x08006bbf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ba0:	f7fc ff1a 	bl	80039d8 <HAL_RCC_GetPCLK1Freq>
 8006ba4:	61f8      	str	r0, [r7, #28]
        break;
 8006ba6:	e014      	b.n	8006bd2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006ba8:	f7fc ff2c 	bl	8003a04 <HAL_RCC_GetPCLK2Freq>
 8006bac:	61f8      	str	r0, [r7, #28]
        break;
 8006bae:	e010      	b.n	8006bd2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006bb0:	4b4d      	ldr	r3, [pc, #308]	@ (8006ce8 <UART_SetConfig+0x56c>)
 8006bb2:	61fb      	str	r3, [r7, #28]
        break;
 8006bb4:	e00d      	b.n	8006bd2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006bb6:	f7fc fe77 	bl	80038a8 <HAL_RCC_GetSysClockFreq>
 8006bba:	61f8      	str	r0, [r7, #28]
        break;
 8006bbc:	e009      	b.n	8006bd2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006bbe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006bc2:	61fb      	str	r3, [r7, #28]
        break;
 8006bc4:	e005      	b.n	8006bd2 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006bca:	2301      	movs	r3, #1
 8006bcc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006bd0:	bf00      	nop
=======
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	69db      	ldr	r3, [r3, #28]
 8007086:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800708a:	d15e      	bne.n	800714a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800708c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007090:	2b08      	cmp	r3, #8
 8007092:	d828      	bhi.n	80070e6 <UART_SetConfig+0x44a>
 8007094:	a201      	add	r2, pc, #4	@ (adr r2, 800709c <UART_SetConfig+0x400>)
 8007096:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800709a:	bf00      	nop
 800709c:	080070c1 	.word	0x080070c1
 80070a0:	080070c9 	.word	0x080070c9
 80070a4:	080070d1 	.word	0x080070d1
 80070a8:	080070e7 	.word	0x080070e7
 80070ac:	080070d7 	.word	0x080070d7
 80070b0:	080070e7 	.word	0x080070e7
 80070b4:	080070e7 	.word	0x080070e7
 80070b8:	080070e7 	.word	0x080070e7
 80070bc:	080070df 	.word	0x080070df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80070c0:	f7fd f91e 	bl	8004300 <HAL_RCC_GetPCLK1Freq>
 80070c4:	61f8      	str	r0, [r7, #28]
        break;
 80070c6:	e014      	b.n	80070f2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80070c8:	f7fd f930 	bl	800432c <HAL_RCC_GetPCLK2Freq>
 80070cc:	61f8      	str	r0, [r7, #28]
        break;
 80070ce:	e010      	b.n	80070f2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80070d0:	4b4d      	ldr	r3, [pc, #308]	@ (8007208 <UART_SetConfig+0x56c>)
 80070d2:	61fb      	str	r3, [r7, #28]
        break;
 80070d4:	e00d      	b.n	80070f2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80070d6:	f7fd f87b 	bl	80041d0 <HAL_RCC_GetSysClockFreq>
 80070da:	61f8      	str	r0, [r7, #28]
        break;
 80070dc:	e009      	b.n	80070f2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80070de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80070e2:	61fb      	str	r3, [r7, #28]
        break;
 80070e4:	e005      	b.n	80070f2 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80070e6:	2300      	movs	r3, #0
 80070e8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80070ea:	2301      	movs	r3, #1
 80070ec:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80070f0:	bf00      	nop
>>>>>>> Stashed changes
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
<<<<<<< Updated upstream
 8006bd2:	69fb      	ldr	r3, [r7, #28]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d077      	beq.n	8006cc8 <UART_SetConfig+0x54c>
=======
 80070f2:	69fb      	ldr	r3, [r7, #28]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d077      	beq.n	80071e8 <UART_SetConfig+0x54c>
>>>>>>> Stashed changes
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
<<<<<<< Updated upstream
 8006bd8:	69fb      	ldr	r3, [r7, #28]
 8006bda:	005a      	lsls	r2, r3, #1
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	685b      	ldr	r3, [r3, #4]
 8006be0:	085b      	lsrs	r3, r3, #1
 8006be2:	441a      	add	r2, r3
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	685b      	ldr	r3, [r3, #4]
 8006be8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bec:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006bee:	69bb      	ldr	r3, [r7, #24]
 8006bf0:	2b0f      	cmp	r3, #15
 8006bf2:	d916      	bls.n	8006c22 <UART_SetConfig+0x4a6>
 8006bf4:	69bb      	ldr	r3, [r7, #24]
 8006bf6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006bfa:	d212      	bcs.n	8006c22 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006bfc:	69bb      	ldr	r3, [r7, #24]
 8006bfe:	b29b      	uxth	r3, r3
 8006c00:	f023 030f 	bic.w	r3, r3, #15
 8006c04:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006c06:	69bb      	ldr	r3, [r7, #24]
 8006c08:	085b      	lsrs	r3, r3, #1
 8006c0a:	b29b      	uxth	r3, r3
 8006c0c:	f003 0307 	and.w	r3, r3, #7
 8006c10:	b29a      	uxth	r2, r3
 8006c12:	8afb      	ldrh	r3, [r7, #22]
 8006c14:	4313      	orrs	r3, r2
 8006c16:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	8afa      	ldrh	r2, [r7, #22]
 8006c1e:	60da      	str	r2, [r3, #12]
 8006c20:	e052      	b.n	8006cc8 <UART_SetConfig+0x54c>
=======
 80070f8:	69fb      	ldr	r3, [r7, #28]
 80070fa:	005a      	lsls	r2, r3, #1
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	685b      	ldr	r3, [r3, #4]
 8007100:	085b      	lsrs	r3, r3, #1
 8007102:	441a      	add	r2, r3
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	685b      	ldr	r3, [r3, #4]
 8007108:	fbb2 f3f3 	udiv	r3, r2, r3
 800710c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800710e:	69bb      	ldr	r3, [r7, #24]
 8007110:	2b0f      	cmp	r3, #15
 8007112:	d916      	bls.n	8007142 <UART_SetConfig+0x4a6>
 8007114:	69bb      	ldr	r3, [r7, #24]
 8007116:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800711a:	d212      	bcs.n	8007142 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800711c:	69bb      	ldr	r3, [r7, #24]
 800711e:	b29b      	uxth	r3, r3
 8007120:	f023 030f 	bic.w	r3, r3, #15
 8007124:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007126:	69bb      	ldr	r3, [r7, #24]
 8007128:	085b      	lsrs	r3, r3, #1
 800712a:	b29b      	uxth	r3, r3
 800712c:	f003 0307 	and.w	r3, r3, #7
 8007130:	b29a      	uxth	r2, r3
 8007132:	8afb      	ldrh	r3, [r7, #22]
 8007134:	4313      	orrs	r3, r2
 8007136:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	8afa      	ldrh	r2, [r7, #22]
 800713e:	60da      	str	r2, [r3, #12]
 8007140:	e052      	b.n	80071e8 <UART_SetConfig+0x54c>
>>>>>>> Stashed changes
      }
      else
      {
        ret = HAL_ERROR;
<<<<<<< Updated upstream
 8006c22:	2301      	movs	r3, #1
 8006c24:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006c28:	e04e      	b.n	8006cc8 <UART_SetConfig+0x54c>
=======
 8007142:	2301      	movs	r3, #1
 8007144:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007148:	e04e      	b.n	80071e8 <UART_SetConfig+0x54c>
>>>>>>> Stashed changes
      }
    }
  }
  else
  {
    switch (clocksource)
<<<<<<< Updated upstream
 8006c2a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006c2e:	2b08      	cmp	r3, #8
 8006c30:	d827      	bhi.n	8006c82 <UART_SetConfig+0x506>
 8006c32:	a201      	add	r2, pc, #4	@ (adr r2, 8006c38 <UART_SetConfig+0x4bc>)
 8006c34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c38:	08006c5d 	.word	0x08006c5d
 8006c3c:	08006c65 	.word	0x08006c65
 8006c40:	08006c6d 	.word	0x08006c6d
 8006c44:	08006c83 	.word	0x08006c83
 8006c48:	08006c73 	.word	0x08006c73
 8006c4c:	08006c83 	.word	0x08006c83
 8006c50:	08006c83 	.word	0x08006c83
 8006c54:	08006c83 	.word	0x08006c83
 8006c58:	08006c7b 	.word	0x08006c7b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c5c:	f7fc febc 	bl	80039d8 <HAL_RCC_GetPCLK1Freq>
 8006c60:	61f8      	str	r0, [r7, #28]
        break;
 8006c62:	e014      	b.n	8006c8e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006c64:	f7fc fece 	bl	8003a04 <HAL_RCC_GetPCLK2Freq>
 8006c68:	61f8      	str	r0, [r7, #28]
        break;
 8006c6a:	e010      	b.n	8006c8e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006c6c:	4b1e      	ldr	r3, [pc, #120]	@ (8006ce8 <UART_SetConfig+0x56c>)
 8006c6e:	61fb      	str	r3, [r7, #28]
        break;
 8006c70:	e00d      	b.n	8006c8e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006c72:	f7fc fe19 	bl	80038a8 <HAL_RCC_GetSysClockFreq>
 8006c76:	61f8      	str	r0, [r7, #28]
        break;
 8006c78:	e009      	b.n	8006c8e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c7a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006c7e:	61fb      	str	r3, [r7, #28]
        break;
 8006c80:	e005      	b.n	8006c8e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8006c82:	2300      	movs	r3, #0
 8006c84:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006c86:	2301      	movs	r3, #1
 8006c88:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006c8c:	bf00      	nop
    }

    if (pclk != 0U)
 8006c8e:	69fb      	ldr	r3, [r7, #28]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d019      	beq.n	8006cc8 <UART_SetConfig+0x54c>
=======
 800714a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800714e:	2b08      	cmp	r3, #8
 8007150:	d827      	bhi.n	80071a2 <UART_SetConfig+0x506>
 8007152:	a201      	add	r2, pc, #4	@ (adr r2, 8007158 <UART_SetConfig+0x4bc>)
 8007154:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007158:	0800717d 	.word	0x0800717d
 800715c:	08007185 	.word	0x08007185
 8007160:	0800718d 	.word	0x0800718d
 8007164:	080071a3 	.word	0x080071a3
 8007168:	08007193 	.word	0x08007193
 800716c:	080071a3 	.word	0x080071a3
 8007170:	080071a3 	.word	0x080071a3
 8007174:	080071a3 	.word	0x080071a3
 8007178:	0800719b 	.word	0x0800719b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800717c:	f7fd f8c0 	bl	8004300 <HAL_RCC_GetPCLK1Freq>
 8007180:	61f8      	str	r0, [r7, #28]
        break;
 8007182:	e014      	b.n	80071ae <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007184:	f7fd f8d2 	bl	800432c <HAL_RCC_GetPCLK2Freq>
 8007188:	61f8      	str	r0, [r7, #28]
        break;
 800718a:	e010      	b.n	80071ae <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800718c:	4b1e      	ldr	r3, [pc, #120]	@ (8007208 <UART_SetConfig+0x56c>)
 800718e:	61fb      	str	r3, [r7, #28]
        break;
 8007190:	e00d      	b.n	80071ae <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007192:	f7fd f81d 	bl	80041d0 <HAL_RCC_GetSysClockFreq>
 8007196:	61f8      	str	r0, [r7, #28]
        break;
 8007198:	e009      	b.n	80071ae <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800719a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800719e:	61fb      	str	r3, [r7, #28]
        break;
 80071a0:	e005      	b.n	80071ae <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80071a2:	2300      	movs	r3, #0
 80071a4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80071a6:	2301      	movs	r3, #1
 80071a8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80071ac:	bf00      	nop
    }

    if (pclk != 0U)
 80071ae:	69fb      	ldr	r3, [r7, #28]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d019      	beq.n	80071e8 <UART_SetConfig+0x54c>
>>>>>>> Stashed changes
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
<<<<<<< Updated upstream
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	685b      	ldr	r3, [r3, #4]
 8006c98:	085a      	lsrs	r2, r3, #1
 8006c9a:	69fb      	ldr	r3, [r7, #28]
 8006c9c:	441a      	add	r2, r3
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	685b      	ldr	r3, [r3, #4]
 8006ca2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ca6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006ca8:	69bb      	ldr	r3, [r7, #24]
 8006caa:	2b0f      	cmp	r3, #15
 8006cac:	d909      	bls.n	8006cc2 <UART_SetConfig+0x546>
 8006cae:	69bb      	ldr	r3, [r7, #24]
 8006cb0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006cb4:	d205      	bcs.n	8006cc2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006cb6:	69bb      	ldr	r3, [r7, #24]
 8006cb8:	b29a      	uxth	r2, r3
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	60da      	str	r2, [r3, #12]
 8006cc0:	e002      	b.n	8006cc8 <UART_SetConfig+0x54c>
=======
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	685b      	ldr	r3, [r3, #4]
 80071b8:	085a      	lsrs	r2, r3, #1
 80071ba:	69fb      	ldr	r3, [r7, #28]
 80071bc:	441a      	add	r2, r3
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	685b      	ldr	r3, [r3, #4]
 80071c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80071c6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80071c8:	69bb      	ldr	r3, [r7, #24]
 80071ca:	2b0f      	cmp	r3, #15
 80071cc:	d909      	bls.n	80071e2 <UART_SetConfig+0x546>
 80071ce:	69bb      	ldr	r3, [r7, #24]
 80071d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80071d4:	d205      	bcs.n	80071e2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80071d6:	69bb      	ldr	r3, [r7, #24]
 80071d8:	b29a      	uxth	r2, r3
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	60da      	str	r2, [r3, #12]
 80071e0:	e002      	b.n	80071e8 <UART_SetConfig+0x54c>
>>>>>>> Stashed changes
      }
      else
      {
        ret = HAL_ERROR;
<<<<<<< Updated upstream
 8006cc2:	2301      	movs	r3, #1
 8006cc4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
=======
 80071e2:	2301      	movs	r3, #1
 80071e4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
>>>>>>> Stashed changes
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
<<<<<<< Updated upstream
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	2200      	movs	r2, #0
 8006ccc:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006cd4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8006cd8:	4618      	mov	r0, r3
 8006cda:	3728      	adds	r7, #40	@ 0x28
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006ce2:	bf00      	nop
 8006ce4:	40008000 	.word	0x40008000
 8006ce8:	00f42400 	.word	0x00f42400

08006cec <UART_AdvFeatureConfig>:
=======
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	2200      	movs	r2, #0
 80071ec:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	2200      	movs	r2, #0
 80071f2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80071f4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80071f8:	4618      	mov	r0, r3
 80071fa:	3728      	adds	r7, #40	@ 0x28
 80071fc:	46bd      	mov	sp, r7
 80071fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007202:	bf00      	nop
 8007204:	40008000 	.word	0x40008000
 8007208:	00f42400 	.word	0x00f42400

0800720c <UART_AdvFeatureConfig>:
>>>>>>> Stashed changes
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
 8006cec:	b480      	push	{r7}
 8006cee:	b083      	sub	sp, #12
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
=======
 800720c:	b480      	push	{r7}
 800720e:	b083      	sub	sp, #12
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
<<<<<<< Updated upstream
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cf8:	f003 0308 	and.w	r3, r3, #8
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d00a      	beq.n	8006d16 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	685b      	ldr	r3, [r3, #4]
 8006d06:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	430a      	orrs	r2, r1
 8006d14:	605a      	str	r2, [r3, #4]
=======
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007218:	f003 0308 	and.w	r3, r3, #8
 800721c:	2b00      	cmp	r3, #0
 800721e:	d00a      	beq.n	8007236 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	685b      	ldr	r3, [r3, #4]
 8007226:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	430a      	orrs	r2, r1
 8007234:	605a      	str	r2, [r3, #4]
>>>>>>> Stashed changes
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
<<<<<<< Updated upstream
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d1a:	f003 0301 	and.w	r3, r3, #1
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d00a      	beq.n	8006d38 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	685b      	ldr	r3, [r3, #4]
 8006d28:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	430a      	orrs	r2, r1
 8006d36:	605a      	str	r2, [r3, #4]
=======
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800723a:	f003 0301 	and.w	r3, r3, #1
 800723e:	2b00      	cmp	r3, #0
 8007240:	d00a      	beq.n	8007258 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	685b      	ldr	r3, [r3, #4]
 8007248:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	430a      	orrs	r2, r1
 8007256:	605a      	str	r2, [r3, #4]
>>>>>>> Stashed changes
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
<<<<<<< Updated upstream
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d3c:	f003 0302 	and.w	r3, r3, #2
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d00a      	beq.n	8006d5a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	685b      	ldr	r3, [r3, #4]
 8006d4a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	430a      	orrs	r2, r1
 8006d58:	605a      	str	r2, [r3, #4]
=======
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800725c:	f003 0302 	and.w	r3, r3, #2
 8007260:	2b00      	cmp	r3, #0
 8007262:	d00a      	beq.n	800727a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	685b      	ldr	r3, [r3, #4]
 800726a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	430a      	orrs	r2, r1
 8007278:	605a      	str	r2, [r3, #4]
>>>>>>> Stashed changes
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
<<<<<<< Updated upstream
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d5e:	f003 0304 	and.w	r3, r3, #4
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d00a      	beq.n	8006d7c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	685b      	ldr	r3, [r3, #4]
 8006d6c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	430a      	orrs	r2, r1
 8006d7a:	605a      	str	r2, [r3, #4]
=======
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800727e:	f003 0304 	and.w	r3, r3, #4
 8007282:	2b00      	cmp	r3, #0
 8007284:	d00a      	beq.n	800729c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	685b      	ldr	r3, [r3, #4]
 800728c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	430a      	orrs	r2, r1
 800729a:	605a      	str	r2, [r3, #4]
>>>>>>> Stashed changes
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
<<<<<<< Updated upstream
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d80:	f003 0310 	and.w	r3, r3, #16
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d00a      	beq.n	8006d9e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	689b      	ldr	r3, [r3, #8]
 8006d8e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	430a      	orrs	r2, r1
 8006d9c:	609a      	str	r2, [r3, #8]
=======
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072a0:	f003 0310 	and.w	r3, r3, #16
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d00a      	beq.n	80072be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	689b      	ldr	r3, [r3, #8]
 80072ae:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	430a      	orrs	r2, r1
 80072bc:	609a      	str	r2, [r3, #8]
>>>>>>> Stashed changes
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
<<<<<<< Updated upstream
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006da2:	f003 0320 	and.w	r3, r3, #32
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d00a      	beq.n	8006dc0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	689b      	ldr	r3, [r3, #8]
 8006db0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	430a      	orrs	r2, r1
 8006dbe:	609a      	str	r2, [r3, #8]
=======
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072c2:	f003 0320 	and.w	r3, r3, #32
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d00a      	beq.n	80072e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	689b      	ldr	r3, [r3, #8]
 80072d0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	430a      	orrs	r2, r1
 80072de:	609a      	str	r2, [r3, #8]
>>>>>>> Stashed changes
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
<<<<<<< Updated upstream
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d01a      	beq.n	8006e02 <UART_AdvFeatureConfig+0x116>
=======
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d01a      	beq.n	8007322 <UART_AdvFeatureConfig+0x116>
>>>>>>> Stashed changes
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
<<<<<<< Updated upstream
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	685b      	ldr	r3, [r3, #4]
 8006dd2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	430a      	orrs	r2, r1
 8006de0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006de6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006dea:	d10a      	bne.n	8006e02 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	685b      	ldr	r3, [r3, #4]
 8006df2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	430a      	orrs	r2, r1
 8006e00:	605a      	str	r2, [r3, #4]
=======
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	685b      	ldr	r3, [r3, #4]
 80072f2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	430a      	orrs	r2, r1
 8007300:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007306:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800730a:	d10a      	bne.n	8007322 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	685b      	ldr	r3, [r3, #4]
 8007312:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	430a      	orrs	r2, r1
 8007320:	605a      	str	r2, [r3, #4]
>>>>>>> Stashed changes
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
<<<<<<< Updated upstream
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d00a      	beq.n	8006e24 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	685b      	ldr	r3, [r3, #4]
 8006e14:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	430a      	orrs	r2, r1
 8006e22:	605a      	str	r2, [r3, #4]
  }
}
 8006e24:	bf00      	nop
 8006e26:	370c      	adds	r7, #12
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2e:	4770      	bx	lr

08006e30 <UART_CheckIdleState>:
=======
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007326:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800732a:	2b00      	cmp	r3, #0
 800732c:	d00a      	beq.n	8007344 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	685b      	ldr	r3, [r3, #4]
 8007334:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	430a      	orrs	r2, r1
 8007342:	605a      	str	r2, [r3, #4]
  }
}
 8007344:	bf00      	nop
 8007346:	370c      	adds	r7, #12
 8007348:	46bd      	mov	sp, r7
 800734a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734e:	4770      	bx	lr

08007350 <UART_CheckIdleState>:
>>>>>>> Stashed changes
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b098      	sub	sp, #96	@ 0x60
 8006e34:	af02      	add	r7, sp, #8
 8006e36:	6078      	str	r0, [r7, #4]
=======
 8007350:	b580      	push	{r7, lr}
 8007352:	b098      	sub	sp, #96	@ 0x60
 8007354:	af02      	add	r7, sp, #8
 8007356:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
<<<<<<< Updated upstream
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006e40:	f7fb fcd4 	bl	80027ec <HAL_GetTick>
 8006e44:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	f003 0308 	and.w	r3, r3, #8
 8006e50:	2b08      	cmp	r3, #8
 8006e52:	d12e      	bne.n	8006eb2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006e54:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006e58:	9300      	str	r3, [sp, #0]
 8006e5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006e62:	6878      	ldr	r0, [r7, #4]
 8006e64:	f000 f88c 	bl	8006f80 <UART_WaitOnFlagUntilTimeout>
 8006e68:	4603      	mov	r3, r0
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d021      	beq.n	8006eb2 <UART_CheckIdleState+0x82>
=======
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	2200      	movs	r2, #0
 800735c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007360:	f7fb fa72 	bl	8002848 <HAL_GetTick>
 8007364:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	f003 0308 	and.w	r3, r3, #8
 8007370:	2b08      	cmp	r3, #8
 8007372:	d12e      	bne.n	80073d2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007374:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007378:	9300      	str	r3, [sp, #0]
 800737a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800737c:	2200      	movs	r2, #0
 800737e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007382:	6878      	ldr	r0, [r7, #4]
 8007384:	f000 f88c 	bl	80074a0 <UART_WaitOnFlagUntilTimeout>
 8007388:	4603      	mov	r3, r0
 800738a:	2b00      	cmp	r3, #0
 800738c:	d021      	beq.n	80073d2 <UART_CheckIdleState+0x82>
>>>>>>> Stashed changes
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
<<<<<<< Updated upstream
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	63bb      	str	r3, [r7, #56]	@ 0x38
=======
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	63bb      	str	r3, [r7, #56]	@ 0x38
>>>>>>> Stashed changes
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
<<<<<<< Updated upstream
 8006e74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e76:	e853 3f00 	ldrex	r3, [r3]
 8006e7a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006e7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e7e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006e82:	653b      	str	r3, [r7, #80]	@ 0x50
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	461a      	mov	r2, r3
 8006e8a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006e8c:	647b      	str	r3, [r7, #68]	@ 0x44
 8006e8e:	643a      	str	r2, [r7, #64]	@ 0x40
=======
 8007394:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007396:	e853 3f00 	ldrex	r3, [r3]
 800739a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800739c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800739e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80073a2:	653b      	str	r3, [r7, #80]	@ 0x50
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	461a      	mov	r2, r3
 80073aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80073ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80073ae:	643a      	str	r2, [r7, #64]	@ 0x40
>>>>>>> Stashed changes
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
<<<<<<< Updated upstream
 8006e90:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006e92:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006e94:	e841 2300 	strex	r3, r2, [r1]
 8006e98:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006e9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d1e6      	bne.n	8006e6e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2220      	movs	r2, #32
 8006ea4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006eae:	2303      	movs	r3, #3
 8006eb0:	e062      	b.n	8006f78 <UART_CheckIdleState+0x148>
=======
 80073b0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80073b2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80073b4:	e841 2300 	strex	r3, r2, [r1]
 80073b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80073ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d1e6      	bne.n	800738e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2220      	movs	r2, #32
 80073c4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	2200      	movs	r2, #0
 80073ca:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80073ce:	2303      	movs	r3, #3
 80073d0:	e062      	b.n	8007498 <UART_CheckIdleState+0x148>
>>>>>>> Stashed changes
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
<<<<<<< Updated upstream
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f003 0304 	and.w	r3, r3, #4
 8006ebc:	2b04      	cmp	r3, #4
 8006ebe:	d149      	bne.n	8006f54 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006ec0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006ec4:	9300      	str	r3, [sp, #0]
 8006ec6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006ec8:	2200      	movs	r2, #0
 8006eca:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006ece:	6878      	ldr	r0, [r7, #4]
 8006ed0:	f000 f856 	bl	8006f80 <UART_WaitOnFlagUntilTimeout>
 8006ed4:	4603      	mov	r3, r0
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d03c      	beq.n	8006f54 <UART_CheckIdleState+0x124>
=======
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	f003 0304 	and.w	r3, r3, #4
 80073dc:	2b04      	cmp	r3, #4
 80073de:	d149      	bne.n	8007474 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80073e0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80073e4:	9300      	str	r3, [sp, #0]
 80073e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80073e8:	2200      	movs	r2, #0
 80073ea:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80073ee:	6878      	ldr	r0, [r7, #4]
 80073f0:	f000 f856 	bl	80074a0 <UART_WaitOnFlagUntilTimeout>
 80073f4:	4603      	mov	r3, r0
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d03c      	beq.n	8007474 <UART_CheckIdleState+0x124>
>>>>>>> Stashed changes
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
<<<<<<< Updated upstream
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ee0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ee2:	e853 3f00 	ldrex	r3, [r3]
 8006ee6:	623b      	str	r3, [r7, #32]
   return(result);
 8006ee8:	6a3b      	ldr	r3, [r7, #32]
 8006eea:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006eee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	461a      	mov	r2, r3
 8006ef6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006ef8:	633b      	str	r3, [r7, #48]	@ 0x30
 8006efa:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006efc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006efe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006f00:	e841 2300 	strex	r3, r2, [r1]
 8006f04:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006f06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d1e6      	bne.n	8006eda <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	3308      	adds	r3, #8
 8006f12:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f14:	693b      	ldr	r3, [r7, #16]
 8006f16:	e853 3f00 	ldrex	r3, [r3]
 8006f1a:	60fb      	str	r3, [r7, #12]
   return(result);
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	f023 0301 	bic.w	r3, r3, #1
 8006f22:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	3308      	adds	r3, #8
 8006f2a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006f2c:	61fa      	str	r2, [r7, #28]
 8006f2e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f30:	69b9      	ldr	r1, [r7, #24]
 8006f32:	69fa      	ldr	r2, [r7, #28]
 8006f34:	e841 2300 	strex	r3, r2, [r1]
 8006f38:	617b      	str	r3, [r7, #20]
   return(result);
 8006f3a:	697b      	ldr	r3, [r7, #20]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d1e5      	bne.n	8006f0c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2220      	movs	r2, #32
 8006f44:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006f50:	2303      	movs	r3, #3
 8006f52:	e011      	b.n	8006f78 <UART_CheckIdleState+0x148>
=======
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007400:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007402:	e853 3f00 	ldrex	r3, [r3]
 8007406:	623b      	str	r3, [r7, #32]
   return(result);
 8007408:	6a3b      	ldr	r3, [r7, #32]
 800740a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800740e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	461a      	mov	r2, r3
 8007416:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007418:	633b      	str	r3, [r7, #48]	@ 0x30
 800741a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800741c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800741e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007420:	e841 2300 	strex	r3, r2, [r1]
 8007424:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007426:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007428:	2b00      	cmp	r3, #0
 800742a:	d1e6      	bne.n	80073fa <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	3308      	adds	r3, #8
 8007432:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007434:	693b      	ldr	r3, [r7, #16]
 8007436:	e853 3f00 	ldrex	r3, [r3]
 800743a:	60fb      	str	r3, [r7, #12]
   return(result);
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	f023 0301 	bic.w	r3, r3, #1
 8007442:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	3308      	adds	r3, #8
 800744a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800744c:	61fa      	str	r2, [r7, #28]
 800744e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007450:	69b9      	ldr	r1, [r7, #24]
 8007452:	69fa      	ldr	r2, [r7, #28]
 8007454:	e841 2300 	strex	r3, r2, [r1]
 8007458:	617b      	str	r3, [r7, #20]
   return(result);
 800745a:	697b      	ldr	r3, [r7, #20]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d1e5      	bne.n	800742c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2220      	movs	r2, #32
 8007464:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2200      	movs	r2, #0
 800746c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007470:	2303      	movs	r3, #3
 8007472:	e011      	b.n	8007498 <UART_CheckIdleState+0x148>
>>>>>>> Stashed changes
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
<<<<<<< Updated upstream
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2220      	movs	r2, #32
 8006f58:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	2220      	movs	r2, #32
 8006f5e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	2200      	movs	r2, #0
 8006f66:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	2200      	movs	r2, #0
 8006f72:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8006f76:	2300      	movs	r3, #0
}
 8006f78:	4618      	mov	r0, r3
 8006f7a:	3758      	adds	r7, #88	@ 0x58
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	bd80      	pop	{r7, pc}

08006f80 <UART_WaitOnFlagUntilTimeout>:
=======
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2220      	movs	r2, #32
 8007478:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	2220      	movs	r2, #32
 800747e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	2200      	movs	r2, #0
 8007486:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2200      	movs	r2, #0
 800748c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	2200      	movs	r2, #0
 8007492:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8007496:	2300      	movs	r3, #0
}
 8007498:	4618      	mov	r0, r3
 800749a:	3758      	adds	r7, #88	@ 0x58
 800749c:	46bd      	mov	sp, r7
 800749e:	bd80      	pop	{r7, pc}

080074a0 <UART_WaitOnFlagUntilTimeout>:
>>>>>>> Stashed changes
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
<<<<<<< Updated upstream
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b084      	sub	sp, #16
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	60f8      	str	r0, [r7, #12]
 8006f88:	60b9      	str	r1, [r7, #8]
 8006f8a:	603b      	str	r3, [r7, #0]
 8006f8c:	4613      	mov	r3, r2
 8006f8e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f90:	e04f      	b.n	8007032 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f92:	69bb      	ldr	r3, [r7, #24]
 8006f94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f98:	d04b      	beq.n	8007032 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f9a:	f7fb fc27 	bl	80027ec <HAL_GetTick>
 8006f9e:	4602      	mov	r2, r0
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	1ad3      	subs	r3, r2, r3
 8006fa4:	69ba      	ldr	r2, [r7, #24]
 8006fa6:	429a      	cmp	r2, r3
 8006fa8:	d302      	bcc.n	8006fb0 <UART_WaitOnFlagUntilTimeout+0x30>
 8006faa:	69bb      	ldr	r3, [r7, #24]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d101      	bne.n	8006fb4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006fb0:	2303      	movs	r3, #3
 8006fb2:	e04e      	b.n	8007052 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f003 0304 	and.w	r3, r3, #4
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d037      	beq.n	8007032 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006fc2:	68bb      	ldr	r3, [r7, #8]
 8006fc4:	2b80      	cmp	r3, #128	@ 0x80
 8006fc6:	d034      	beq.n	8007032 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006fc8:	68bb      	ldr	r3, [r7, #8]
 8006fca:	2b40      	cmp	r3, #64	@ 0x40
 8006fcc:	d031      	beq.n	8007032 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	69db      	ldr	r3, [r3, #28]
 8006fd4:	f003 0308 	and.w	r3, r3, #8
 8006fd8:	2b08      	cmp	r3, #8
 8006fda:	d110      	bne.n	8006ffe <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	2208      	movs	r2, #8
 8006fe2:	621a      	str	r2, [r3, #32]
=======
 80074a0:	b580      	push	{r7, lr}
 80074a2:	b084      	sub	sp, #16
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	60f8      	str	r0, [r7, #12]
 80074a8:	60b9      	str	r1, [r7, #8]
 80074aa:	603b      	str	r3, [r7, #0]
 80074ac:	4613      	mov	r3, r2
 80074ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80074b0:	e04f      	b.n	8007552 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80074b2:	69bb      	ldr	r3, [r7, #24]
 80074b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074b8:	d04b      	beq.n	8007552 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80074ba:	f7fb f9c5 	bl	8002848 <HAL_GetTick>
 80074be:	4602      	mov	r2, r0
 80074c0:	683b      	ldr	r3, [r7, #0]
 80074c2:	1ad3      	subs	r3, r2, r3
 80074c4:	69ba      	ldr	r2, [r7, #24]
 80074c6:	429a      	cmp	r2, r3
 80074c8:	d302      	bcc.n	80074d0 <UART_WaitOnFlagUntilTimeout+0x30>
 80074ca:	69bb      	ldr	r3, [r7, #24]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d101      	bne.n	80074d4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80074d0:	2303      	movs	r3, #3
 80074d2:	e04e      	b.n	8007572 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	f003 0304 	and.w	r3, r3, #4
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d037      	beq.n	8007552 <UART_WaitOnFlagUntilTimeout+0xb2>
 80074e2:	68bb      	ldr	r3, [r7, #8]
 80074e4:	2b80      	cmp	r3, #128	@ 0x80
 80074e6:	d034      	beq.n	8007552 <UART_WaitOnFlagUntilTimeout+0xb2>
 80074e8:	68bb      	ldr	r3, [r7, #8]
 80074ea:	2b40      	cmp	r3, #64	@ 0x40
 80074ec:	d031      	beq.n	8007552 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	69db      	ldr	r3, [r3, #28]
 80074f4:	f003 0308 	and.w	r3, r3, #8
 80074f8:	2b08      	cmp	r3, #8
 80074fa:	d110      	bne.n	800751e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	2208      	movs	r2, #8
 8007502:	621a      	str	r2, [r3, #32]
>>>>>>> Stashed changes

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
<<<<<<< Updated upstream
 8006fe4:	68f8      	ldr	r0, [r7, #12]
 8006fe6:	f000 f838 	bl	800705a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	2208      	movs	r2, #8
 8006fee:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8006ffa:	2301      	movs	r3, #1
 8006ffc:	e029      	b.n	8007052 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	69db      	ldr	r3, [r3, #28]
 8007004:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007008:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800700c:	d111      	bne.n	8007032 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007016:	621a      	str	r2, [r3, #32]
=======
 8007504:	68f8      	ldr	r0, [r7, #12]
 8007506:	f000 f838 	bl	800757a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	2208      	movs	r2, #8
 800750e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	2200      	movs	r2, #0
 8007516:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800751a:	2301      	movs	r3, #1
 800751c:	e029      	b.n	8007572 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	69db      	ldr	r3, [r3, #28]
 8007524:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007528:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800752c:	d111      	bne.n	8007552 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007536:	621a      	str	r2, [r3, #32]
>>>>>>> Stashed changes

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
<<<<<<< Updated upstream
 8007018:	68f8      	ldr	r0, [r7, #12]
 800701a:	f000 f81e 	bl	800705a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	2220      	movs	r2, #32
 8007022:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	2200      	movs	r2, #0
 800702a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800702e:	2303      	movs	r3, #3
 8007030:	e00f      	b.n	8007052 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	69da      	ldr	r2, [r3, #28]
 8007038:	68bb      	ldr	r3, [r7, #8]
 800703a:	4013      	ands	r3, r2
 800703c:	68ba      	ldr	r2, [r7, #8]
 800703e:	429a      	cmp	r2, r3
 8007040:	bf0c      	ite	eq
 8007042:	2301      	moveq	r3, #1
 8007044:	2300      	movne	r3, #0
 8007046:	b2db      	uxtb	r3, r3
 8007048:	461a      	mov	r2, r3
 800704a:	79fb      	ldrb	r3, [r7, #7]
 800704c:	429a      	cmp	r2, r3
 800704e:	d0a0      	beq.n	8006f92 <UART_WaitOnFlagUntilTimeout+0x12>
=======
 8007538:	68f8      	ldr	r0, [r7, #12]
 800753a:	f000 f81e 	bl	800757a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	2220      	movs	r2, #32
 8007542:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	2200      	movs	r2, #0
 800754a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800754e:	2303      	movs	r3, #3
 8007550:	e00f      	b.n	8007572 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	69da      	ldr	r2, [r3, #28]
 8007558:	68bb      	ldr	r3, [r7, #8]
 800755a:	4013      	ands	r3, r2
 800755c:	68ba      	ldr	r2, [r7, #8]
 800755e:	429a      	cmp	r2, r3
 8007560:	bf0c      	ite	eq
 8007562:	2301      	moveq	r3, #1
 8007564:	2300      	movne	r3, #0
 8007566:	b2db      	uxtb	r3, r3
 8007568:	461a      	mov	r2, r3
 800756a:	79fb      	ldrb	r3, [r7, #7]
 800756c:	429a      	cmp	r2, r3
 800756e:	d0a0      	beq.n	80074b2 <UART_WaitOnFlagUntilTimeout+0x12>
>>>>>>> Stashed changes
        }
      }
    }
  }
  return HAL_OK;
<<<<<<< Updated upstream
 8007050:	2300      	movs	r3, #0
}
 8007052:	4618      	mov	r0, r3
 8007054:	3710      	adds	r7, #16
 8007056:	46bd      	mov	sp, r7
 8007058:	bd80      	pop	{r7, pc}

0800705a <UART_EndRxTransfer>:
=======
 8007570:	2300      	movs	r3, #0
}
 8007572:	4618      	mov	r0, r3
 8007574:	3710      	adds	r7, #16
 8007576:	46bd      	mov	sp, r7
 8007578:	bd80      	pop	{r7, pc}

0800757a <UART_EndRxTransfer>:
>>>>>>> Stashed changes
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
 800705a:	b480      	push	{r7}
 800705c:	b095      	sub	sp, #84	@ 0x54
 800705e:	af00      	add	r7, sp, #0
 8007060:	6078      	str	r0, [r7, #4]
=======
 800757a:	b480      	push	{r7}
 800757c:	b095      	sub	sp, #84	@ 0x54
 800757e:	af00      	add	r7, sp, #0
 8007580:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
<<<<<<< Updated upstream
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007068:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800706a:	e853 3f00 	ldrex	r3, [r3]
 800706e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007070:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007072:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007076:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	461a      	mov	r2, r3
 800707e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007080:	643b      	str	r3, [r7, #64]	@ 0x40
 8007082:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007084:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007086:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007088:	e841 2300 	strex	r3, r2, [r1]
 800708c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800708e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007090:	2b00      	cmp	r3, #0
 8007092:	d1e6      	bne.n	8007062 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	3308      	adds	r3, #8
 800709a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800709c:	6a3b      	ldr	r3, [r7, #32]
 800709e:	e853 3f00 	ldrex	r3, [r3]
 80070a2:	61fb      	str	r3, [r7, #28]
   return(result);
 80070a4:	69fb      	ldr	r3, [r7, #28]
 80070a6:	f023 0301 	bic.w	r3, r3, #1
 80070aa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	3308      	adds	r3, #8
 80070b2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80070b4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80070b6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070b8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80070ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80070bc:	e841 2300 	strex	r3, r2, [r1]
 80070c0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80070c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d1e5      	bne.n	8007094 <UART_EndRxTransfer+0x3a>
=======
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007588:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800758a:	e853 3f00 	ldrex	r3, [r3]
 800758e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007590:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007592:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007596:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	461a      	mov	r2, r3
 800759e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80075a0:	643b      	str	r3, [r7, #64]	@ 0x40
 80075a2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075a4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80075a6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80075a8:	e841 2300 	strex	r3, r2, [r1]
 80075ac:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80075ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d1e6      	bne.n	8007582 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	3308      	adds	r3, #8
 80075ba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075bc:	6a3b      	ldr	r3, [r7, #32]
 80075be:	e853 3f00 	ldrex	r3, [r3]
 80075c2:	61fb      	str	r3, [r7, #28]
   return(result);
 80075c4:	69fb      	ldr	r3, [r7, #28]
 80075c6:	f023 0301 	bic.w	r3, r3, #1
 80075ca:	64bb      	str	r3, [r7, #72]	@ 0x48
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	3308      	adds	r3, #8
 80075d2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80075d4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80075d6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075d8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80075da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80075dc:	e841 2300 	strex	r3, r2, [r1]
 80075e0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80075e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d1e5      	bne.n	80075b4 <UART_EndRxTransfer+0x3a>
>>>>>>> Stashed changes
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
<<<<<<< Updated upstream
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80070cc:	2b01      	cmp	r3, #1
 80070ce:	d118      	bne.n	8007102 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	e853 3f00 	ldrex	r3, [r3]
 80070dc:	60bb      	str	r3, [r7, #8]
   return(result);
 80070de:	68bb      	ldr	r3, [r7, #8]
 80070e0:	f023 0310 	bic.w	r3, r3, #16
 80070e4:	647b      	str	r3, [r7, #68]	@ 0x44
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	461a      	mov	r2, r3
 80070ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80070ee:	61bb      	str	r3, [r7, #24]
 80070f0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070f2:	6979      	ldr	r1, [r7, #20]
 80070f4:	69ba      	ldr	r2, [r7, #24]
 80070f6:	e841 2300 	strex	r3, r2, [r1]
 80070fa:	613b      	str	r3, [r7, #16]
   return(result);
 80070fc:	693b      	ldr	r3, [r7, #16]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d1e6      	bne.n	80070d0 <UART_EndRxTransfer+0x76>
=======
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80075ec:	2b01      	cmp	r3, #1
 80075ee:	d118      	bne.n	8007622 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	e853 3f00 	ldrex	r3, [r3]
 80075fc:	60bb      	str	r3, [r7, #8]
   return(result);
 80075fe:	68bb      	ldr	r3, [r7, #8]
 8007600:	f023 0310 	bic.w	r3, r3, #16
 8007604:	647b      	str	r3, [r7, #68]	@ 0x44
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	461a      	mov	r2, r3
 800760c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800760e:	61bb      	str	r3, [r7, #24]
 8007610:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007612:	6979      	ldr	r1, [r7, #20]
 8007614:	69ba      	ldr	r2, [r7, #24]
 8007616:	e841 2300 	strex	r3, r2, [r1]
 800761a:	613b      	str	r3, [r7, #16]
   return(result);
 800761c:	693b      	ldr	r3, [r7, #16]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d1e6      	bne.n	80075f0 <UART_EndRxTransfer+0x76>
>>>>>>> Stashed changes
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
<<<<<<< Updated upstream
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	2220      	movs	r2, #32
 8007106:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	2200      	movs	r2, #0
 800710e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2200      	movs	r2, #0
 8007114:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8007116:	bf00      	nop
 8007118:	3754      	adds	r7, #84	@ 0x54
 800711a:	46bd      	mov	sp, r7
 800711c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007120:	4770      	bx	lr
	...

08007124 <MX_FATFS_Init>:
=======
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	2220      	movs	r2, #32
 8007626:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	2200      	movs	r2, #0
 800762e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	2200      	movs	r2, #0
 8007634:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8007636:	bf00      	nop
 8007638:	3754      	adds	r7, #84	@ 0x54
 800763a:	46bd      	mov	sp, r7
 800763c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007640:	4770      	bx	lr
	...

08007644 <MX_FATFS_Init>:
>>>>>>> Stashed changes
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
<<<<<<< Updated upstream
 8007124:	b580      	push	{r7, lr}
 8007126:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8007128:	4904      	ldr	r1, [pc, #16]	@ (800713c <MX_FATFS_Init+0x18>)
 800712a:	4805      	ldr	r0, [pc, #20]	@ (8007140 <MX_FATFS_Init+0x1c>)
 800712c:	f002 ffa0 	bl	800a070 <FATFS_LinkDriver>
 8007130:	4603      	mov	r3, r0
 8007132:	461a      	mov	r2, r3
 8007134:	4b03      	ldr	r3, [pc, #12]	@ (8007144 <MX_FATFS_Init+0x20>)
 8007136:	701a      	strb	r2, [r3, #0]
=======
 8007644:	b580      	push	{r7, lr}
 8007646:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8007648:	4904      	ldr	r1, [pc, #16]	@ (800765c <MX_FATFS_Init+0x18>)
 800764a:	4805      	ldr	r0, [pc, #20]	@ (8007660 <MX_FATFS_Init+0x1c>)
 800764c:	f002 fef0 	bl	800a430 <FATFS_LinkDriver>
 8007650:	4603      	mov	r3, r0
 8007652:	461a      	mov	r2, r3
 8007654:	4b03      	ldr	r3, [pc, #12]	@ (8007664 <MX_FATFS_Init+0x20>)
 8007656:	701a      	strb	r2, [r3, #0]
>>>>>>> Stashed changes

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
<<<<<<< Updated upstream
 8007138:	bf00      	nop
 800713a:	bd80      	pop	{r7, pc}
 800713c:	20000a24 	.word	0x20000a24
 8007140:	20000018 	.word	0x20000018
 8007144:	20000a20 	.word	0x20000a20

08007148 <get_fattime>:
=======
 8007658:	bf00      	nop
 800765a:	bd80      	pop	{r7, pc}
 800765c:	20000608 	.word	0x20000608
 8007660:	20000018 	.word	0x20000018
 8007664:	20000604 	.word	0x20000604

08007668 <get_fattime>:
>>>>>>> Stashed changes
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
<<<<<<< Updated upstream
 8007148:	b480      	push	{r7}
 800714a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800714c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800714e:	4618      	mov	r0, r3
 8007150:	46bd      	mov	sp, r7
 8007152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007156:	4770      	bx	lr

08007158 <USER_initialize>:
=======
 8007668:	b480      	push	{r7}
 800766a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800766c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800766e:	4618      	mov	r0, r3
 8007670:	46bd      	mov	sp, r7
 8007672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007676:	4770      	bx	lr

08007678 <USER_initialize>:
>>>>>>> Stashed changes
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
<<<<<<< Updated upstream
 8007158:	b580      	push	{r7, lr}
 800715a:	b082      	sub	sp, #8
 800715c:	af00      	add	r7, sp, #0
 800715e:	4603      	mov	r3, r0
 8007160:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return USER_SPI_initialize(pdrv);
 8007162:	79fb      	ldrb	r3, [r7, #7]
 8007164:	4618      	mov	r0, r3
 8007166:	f000 f9d3 	bl	8007510 <USER_SPI_initialize>
 800716a:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800716c:	4618      	mov	r0, r3
 800716e:	3708      	adds	r7, #8
 8007170:	46bd      	mov	sp, r7
 8007172:	bd80      	pop	{r7, pc}

08007174 <USER_status>:
=======
 8007678:	b580      	push	{r7, lr}
 800767a:	b082      	sub	sp, #8
 800767c:	af00      	add	r7, sp, #0
 800767e:	4603      	mov	r3, r0
 8007680:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return USER_SPI_initialize(pdrv);
 8007682:	79fb      	ldrb	r3, [r7, #7]
 8007684:	4618      	mov	r0, r3
 8007686:	f000 f9d3 	bl	8007a30 <USER_SPI_initialize>
 800768a:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800768c:	4618      	mov	r0, r3
 800768e:	3708      	adds	r7, #8
 8007690:	46bd      	mov	sp, r7
 8007692:	bd80      	pop	{r7, pc}

08007694 <USER_status>:
>>>>>>> Stashed changes
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
<<<<<<< Updated upstream
 8007174:	b580      	push	{r7, lr}
 8007176:	b082      	sub	sp, #8
 8007178:	af00      	add	r7, sp, #0
 800717a:	4603      	mov	r3, r0
 800717c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return USER_SPI_status(pdrv);
 800717e:	79fb      	ldrb	r3, [r7, #7]
 8007180:	4618      	mov	r0, r3
 8007182:	f000 fab1 	bl	80076e8 <USER_SPI_status>
 8007186:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8007188:	4618      	mov	r0, r3
 800718a:	3708      	adds	r7, #8
 800718c:	46bd      	mov	sp, r7
 800718e:	bd80      	pop	{r7, pc}

08007190 <USER_read>:
=======
 8007694:	b580      	push	{r7, lr}
 8007696:	b082      	sub	sp, #8
 8007698:	af00      	add	r7, sp, #0
 800769a:	4603      	mov	r3, r0
 800769c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return USER_SPI_status(pdrv);
 800769e:	79fb      	ldrb	r3, [r7, #7]
 80076a0:	4618      	mov	r0, r3
 80076a2:	f000 fab1 	bl	8007c08 <USER_SPI_status>
 80076a6:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 80076a8:	4618      	mov	r0, r3
 80076aa:	3708      	adds	r7, #8
 80076ac:	46bd      	mov	sp, r7
 80076ae:	bd80      	pop	{r7, pc}

080076b0 <USER_read>:
>>>>>>> Stashed changes
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
<<<<<<< Updated upstream
 8007190:	b580      	push	{r7, lr}
 8007192:	b084      	sub	sp, #16
 8007194:	af00      	add	r7, sp, #0
 8007196:	60b9      	str	r1, [r7, #8]
 8007198:	607a      	str	r2, [r7, #4]
 800719a:	603b      	str	r3, [r7, #0]
 800719c:	4603      	mov	r3, r0
 800719e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return USER_SPI_read(pdrv, buff, sector, count);
 80071a0:	7bf8      	ldrb	r0, [r7, #15]
 80071a2:	683b      	ldr	r3, [r7, #0]
 80071a4:	687a      	ldr	r2, [r7, #4]
 80071a6:	68b9      	ldr	r1, [r7, #8]
 80071a8:	f000 fab4 	bl	8007714 <USER_SPI_read>
 80071ac:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 80071ae:	4618      	mov	r0, r3
 80071b0:	3710      	adds	r7, #16
 80071b2:	46bd      	mov	sp, r7
 80071b4:	bd80      	pop	{r7, pc}

080071b6 <USER_write>:
=======
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b084      	sub	sp, #16
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	60b9      	str	r1, [r7, #8]
 80076b8:	607a      	str	r2, [r7, #4]
 80076ba:	603b      	str	r3, [r7, #0]
 80076bc:	4603      	mov	r3, r0
 80076be:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return USER_SPI_read(pdrv, buff, sector, count);
 80076c0:	7bf8      	ldrb	r0, [r7, #15]
 80076c2:	683b      	ldr	r3, [r7, #0]
 80076c4:	687a      	ldr	r2, [r7, #4]
 80076c6:	68b9      	ldr	r1, [r7, #8]
 80076c8:	f000 fab4 	bl	8007c34 <USER_SPI_read>
 80076cc:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 80076ce:	4618      	mov	r0, r3
 80076d0:	3710      	adds	r7, #16
 80076d2:	46bd      	mov	sp, r7
 80076d4:	bd80      	pop	{r7, pc}

080076d6 <USER_write>:
>>>>>>> Stashed changes
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
<<<<<<< Updated upstream
 80071b6:	b580      	push	{r7, lr}
 80071b8:	b084      	sub	sp, #16
 80071ba:	af00      	add	r7, sp, #0
 80071bc:	60b9      	str	r1, [r7, #8]
 80071be:	607a      	str	r2, [r7, #4]
 80071c0:	603b      	str	r3, [r7, #0]
 80071c2:	4603      	mov	r3, r0
 80071c4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return USER_SPI_write(pdrv, buff, sector, count);
 80071c6:	7bf8      	ldrb	r0, [r7, #15]
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	687a      	ldr	r2, [r7, #4]
 80071cc:	68b9      	ldr	r1, [r7, #8]
 80071ce:	f000 fb07 	bl	80077e0 <USER_SPI_write>
 80071d2:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 80071d4:	4618      	mov	r0, r3
 80071d6:	3710      	adds	r7, #16
 80071d8:	46bd      	mov	sp, r7
 80071da:	bd80      	pop	{r7, pc}

080071dc <USER_ioctl>:
=======
 80076d6:	b580      	push	{r7, lr}
 80076d8:	b084      	sub	sp, #16
 80076da:	af00      	add	r7, sp, #0
 80076dc:	60b9      	str	r1, [r7, #8]
 80076de:	607a      	str	r2, [r7, #4]
 80076e0:	603b      	str	r3, [r7, #0]
 80076e2:	4603      	mov	r3, r0
 80076e4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return USER_SPI_write(pdrv, buff, sector, count);
 80076e6:	7bf8      	ldrb	r0, [r7, #15]
 80076e8:	683b      	ldr	r3, [r7, #0]
 80076ea:	687a      	ldr	r2, [r7, #4]
 80076ec:	68b9      	ldr	r1, [r7, #8]
 80076ee:	f000 fb07 	bl	8007d00 <USER_SPI_write>
 80076f2:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 80076f4:	4618      	mov	r0, r3
 80076f6:	3710      	adds	r7, #16
 80076f8:	46bd      	mov	sp, r7
 80076fa:	bd80      	pop	{r7, pc}

080076fc <USER_ioctl>:
>>>>>>> Stashed changes
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
<<<<<<< Updated upstream
 80071dc:	b580      	push	{r7, lr}
 80071de:	b082      	sub	sp, #8
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	4603      	mov	r3, r0
 80071e4:	603a      	str	r2, [r7, #0]
 80071e6:	71fb      	strb	r3, [r7, #7]
 80071e8:	460b      	mov	r3, r1
 80071ea:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return USER_SPI_ioctl(pdrv, cmd, buff);
 80071ec:	79b9      	ldrb	r1, [r7, #6]
 80071ee:	79fb      	ldrb	r3, [r7, #7]
 80071f0:	683a      	ldr	r2, [r7, #0]
 80071f2:	4618      	mov	r0, r3
 80071f4:	f000 fb70 	bl	80078d8 <USER_SPI_ioctl>
 80071f8:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 80071fa:	4618      	mov	r0, r3
 80071fc:	3708      	adds	r7, #8
 80071fe:	46bd      	mov	sp, r7
 8007200:	bd80      	pop	{r7, pc}
	...

08007204 <SPI_Timer_On>:
=======
 80076fc:	b580      	push	{r7, lr}
 80076fe:	b082      	sub	sp, #8
 8007700:	af00      	add	r7, sp, #0
 8007702:	4603      	mov	r3, r0
 8007704:	603a      	str	r2, [r7, #0]
 8007706:	71fb      	strb	r3, [r7, #7]
 8007708:	460b      	mov	r3, r1
 800770a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return USER_SPI_ioctl(pdrv, cmd, buff);
 800770c:	79b9      	ldrb	r1, [r7, #6]
 800770e:	79fb      	ldrb	r3, [r7, #7]
 8007710:	683a      	ldr	r2, [r7, #0]
 8007712:	4618      	mov	r0, r3
 8007714:	f000 fb70 	bl	8007df8 <USER_SPI_ioctl>
 8007718:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800771a:	4618      	mov	r0, r3
 800771c:	3708      	adds	r7, #8
 800771e:	46bd      	mov	sp, r7
 8007720:	bd80      	pop	{r7, pc}
	...

08007724 <SPI_Timer_On>:
>>>>>>> Stashed changes
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
<<<<<<< Updated upstream
 8007204:	b580      	push	{r7, lr}
 8007206:	b082      	sub	sp, #8
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 800720c:	f7fb faee 	bl	80027ec <HAL_GetTick>
 8007210:	4603      	mov	r3, r0
 8007212:	4a04      	ldr	r2, [pc, #16]	@ (8007224 <SPI_Timer_On+0x20>)
 8007214:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 8007216:	4a04      	ldr	r2, [pc, #16]	@ (8007228 <SPI_Timer_On+0x24>)
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	6013      	str	r3, [r2, #0]
}
 800721c:	bf00      	nop
 800721e:	3708      	adds	r7, #8
 8007220:	46bd      	mov	sp, r7
 8007222:	bd80      	pop	{r7, pc}
 8007224:	20000a2c 	.word	0x20000a2c
 8007228:	20000a30 	.word	0x20000a30

0800722c <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 800722c:	b580      	push	{r7, lr}
 800722e:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8007230:	f7fb fadc 	bl	80027ec <HAL_GetTick>
 8007234:	4602      	mov	r2, r0
 8007236:	4b06      	ldr	r3, [pc, #24]	@ (8007250 <SPI_Timer_Status+0x24>)
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	1ad2      	subs	r2, r2, r3
 800723c:	4b05      	ldr	r3, [pc, #20]	@ (8007254 <SPI_Timer_Status+0x28>)
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	429a      	cmp	r2, r3
 8007242:	bf34      	ite	cc
 8007244:	2301      	movcc	r3, #1
 8007246:	2300      	movcs	r3, #0
 8007248:	b2db      	uxtb	r3, r3
}
 800724a:	4618      	mov	r0, r3
 800724c:	bd80      	pop	{r7, pc}
 800724e:	bf00      	nop
 8007250:	20000a2c 	.word	0x20000a2c
 8007254:	20000a30 	.word	0x20000a30

08007258 <xchg_spi>:
=======
 8007724:	b580      	push	{r7, lr}
 8007726:	b082      	sub	sp, #8
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 800772c:	f7fb f88c 	bl	8002848 <HAL_GetTick>
 8007730:	4603      	mov	r3, r0
 8007732:	4a04      	ldr	r2, [pc, #16]	@ (8007744 <SPI_Timer_On+0x20>)
 8007734:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 8007736:	4a04      	ldr	r2, [pc, #16]	@ (8007748 <SPI_Timer_On+0x24>)
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	6013      	str	r3, [r2, #0]
}
 800773c:	bf00      	nop
 800773e:	3708      	adds	r7, #8
 8007740:	46bd      	mov	sp, r7
 8007742:	bd80      	pop	{r7, pc}
 8007744:	20000610 	.word	0x20000610
 8007748:	20000614 	.word	0x20000614

0800774c <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 800774c:	b580      	push	{r7, lr}
 800774e:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8007750:	f7fb f87a 	bl	8002848 <HAL_GetTick>
 8007754:	4602      	mov	r2, r0
 8007756:	4b06      	ldr	r3, [pc, #24]	@ (8007770 <SPI_Timer_Status+0x24>)
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	1ad2      	subs	r2, r2, r3
 800775c:	4b05      	ldr	r3, [pc, #20]	@ (8007774 <SPI_Timer_Status+0x28>)
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	429a      	cmp	r2, r3
 8007762:	bf34      	ite	cc
 8007764:	2301      	movcc	r3, #1
 8007766:	2300      	movcs	r3, #0
 8007768:	b2db      	uxtb	r3, r3
}
 800776a:	4618      	mov	r0, r3
 800776c:	bd80      	pop	{r7, pc}
 800776e:	bf00      	nop
 8007770:	20000610 	.word	0x20000610
 8007774:	20000614 	.word	0x20000614

08007778 <xchg_spi>:
>>>>>>> Stashed changes
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
<<<<<<< Updated upstream
 8007258:	b580      	push	{r7, lr}
 800725a:	b086      	sub	sp, #24
 800725c:	af02      	add	r7, sp, #8
 800725e:	4603      	mov	r3, r0
 8007260:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8007262:	f107 020f 	add.w	r2, r7, #15
 8007266:	1df9      	adds	r1, r7, #7
 8007268:	2332      	movs	r3, #50	@ 0x32
 800726a:	9300      	str	r3, [sp, #0]
 800726c:	2301      	movs	r3, #1
 800726e:	4804      	ldr	r0, [pc, #16]	@ (8007280 <xchg_spi+0x28>)
 8007270:	f7fd fb45 	bl	80048fe <HAL_SPI_TransmitReceive>
    return rxDat;
 8007274:	7bfb      	ldrb	r3, [r7, #15]
}
 8007276:	4618      	mov	r0, r3
 8007278:	3710      	adds	r7, #16
 800727a:	46bd      	mov	sp, r7
 800727c:	bd80      	pop	{r7, pc}
 800727e:	bf00      	nop
 8007280:	20000218 	.word	0x20000218

08007284 <rcvr_spi_multi>:
=======
 8007778:	b580      	push	{r7, lr}
 800777a:	b086      	sub	sp, #24
 800777c:	af02      	add	r7, sp, #8
 800777e:	4603      	mov	r3, r0
 8007780:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8007782:	f107 020f 	add.w	r2, r7, #15
 8007786:	1df9      	adds	r1, r7, #7
 8007788:	2332      	movs	r3, #50	@ 0x32
 800778a:	9300      	str	r3, [sp, #0]
 800778c:	2301      	movs	r3, #1
 800778e:	4804      	ldr	r0, [pc, #16]	@ (80077a0 <xchg_spi+0x28>)
 8007790:	f7fd fd49 	bl	8005226 <HAL_SPI_TransmitReceive>
    return rxDat;
 8007794:	7bfb      	ldrb	r3, [r7, #15]
}
 8007796:	4618      	mov	r0, r3
 8007798:	3710      	adds	r7, #16
 800779a:	46bd      	mov	sp, r7
 800779c:	bd80      	pop	{r7, pc}
 800779e:	bf00      	nop
 80077a0:	200002cc 	.word	0x200002cc

080077a4 <rcvr_spi_multi>:
>>>>>>> Stashed changes
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
<<<<<<< Updated upstream
 8007284:	b590      	push	{r4, r7, lr}
 8007286:	b085      	sub	sp, #20
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
 800728c:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 800728e:	2300      	movs	r3, #0
 8007290:	60fb      	str	r3, [r7, #12]
 8007292:	e00a      	b.n	80072aa <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8007294:	687a      	ldr	r2, [r7, #4]
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	18d4      	adds	r4, r2, r3
 800729a:	20ff      	movs	r0, #255	@ 0xff
 800729c:	f7ff ffdc 	bl	8007258 <xchg_spi>
 80072a0:	4603      	mov	r3, r0
 80072a2:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	3301      	adds	r3, #1
 80072a8:	60fb      	str	r3, [r7, #12]
 80072aa:	68fa      	ldr	r2, [r7, #12]
 80072ac:	683b      	ldr	r3, [r7, #0]
 80072ae:	429a      	cmp	r2, r3
 80072b0:	d3f0      	bcc.n	8007294 <rcvr_spi_multi+0x10>
	}
}
 80072b2:	bf00      	nop
 80072b4:	bf00      	nop
 80072b6:	3714      	adds	r7, #20
 80072b8:	46bd      	mov	sp, r7
 80072ba:	bd90      	pop	{r4, r7, pc}

080072bc <xmit_spi_multi>:
=======
 80077a4:	b590      	push	{r4, r7, lr}
 80077a6:	b085      	sub	sp, #20
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
 80077ac:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 80077ae:	2300      	movs	r3, #0
 80077b0:	60fb      	str	r3, [r7, #12]
 80077b2:	e00a      	b.n	80077ca <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 80077b4:	687a      	ldr	r2, [r7, #4]
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	18d4      	adds	r4, r2, r3
 80077ba:	20ff      	movs	r0, #255	@ 0xff
 80077bc:	f7ff ffdc 	bl	8007778 <xchg_spi>
 80077c0:	4603      	mov	r3, r0
 80077c2:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	3301      	adds	r3, #1
 80077c8:	60fb      	str	r3, [r7, #12]
 80077ca:	68fa      	ldr	r2, [r7, #12]
 80077cc:	683b      	ldr	r3, [r7, #0]
 80077ce:	429a      	cmp	r2, r3
 80077d0:	d3f0      	bcc.n	80077b4 <rcvr_spi_multi+0x10>
	}
}
 80077d2:	bf00      	nop
 80077d4:	bf00      	nop
 80077d6:	3714      	adds	r7, #20
 80077d8:	46bd      	mov	sp, r7
 80077da:	bd90      	pop	{r4, r7, pc}

080077dc <xmit_spi_multi>:
>>>>>>> Stashed changes
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
<<<<<<< Updated upstream
 80072bc:	b580      	push	{r7, lr}
 80072be:	b082      	sub	sp, #8
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
 80072c4:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&SD_SPI_HANDLE, buff, btx, HAL_MAX_DELAY);
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	b29a      	uxth	r2, r3
 80072ca:	f04f 33ff 	mov.w	r3, #4294967295
 80072ce:	6879      	ldr	r1, [r7, #4]
 80072d0:	4803      	ldr	r0, [pc, #12]	@ (80072e0 <xmit_spi_multi+0x24>)
 80072d2:	f7fd f99e 	bl	8004612 <HAL_SPI_Transmit>
}
 80072d6:	bf00      	nop
 80072d8:	3708      	adds	r7, #8
 80072da:	46bd      	mov	sp, r7
 80072dc:	bd80      	pop	{r7, pc}
 80072de:	bf00      	nop
 80072e0:	20000218 	.word	0x20000218

080072e4 <wait_ready>:
=======
 80077dc:	b580      	push	{r7, lr}
 80077de:	b082      	sub	sp, #8
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
 80077e4:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&SD_SPI_HANDLE, buff, btx, HAL_MAX_DELAY);
 80077e6:	683b      	ldr	r3, [r7, #0]
 80077e8:	b29a      	uxth	r2, r3
 80077ea:	f04f 33ff 	mov.w	r3, #4294967295
 80077ee:	6879      	ldr	r1, [r7, #4]
 80077f0:	4803      	ldr	r0, [pc, #12]	@ (8007800 <xmit_spi_multi+0x24>)
 80077f2:	f7fd fba2 	bl	8004f3a <HAL_SPI_Transmit>
}
 80077f6:	bf00      	nop
 80077f8:	3708      	adds	r7, #8
 80077fa:	46bd      	mov	sp, r7
 80077fc:	bd80      	pop	{r7, pc}
 80077fe:	bf00      	nop
 8007800:	200002cc 	.word	0x200002cc

08007804 <wait_ready>:
>>>>>>> Stashed changes

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
<<<<<<< Updated upstream
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b086      	sub	sp, #24
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
=======
 8007804:	b580      	push	{r7, lr}
 8007806:	b086      	sub	sp, #24
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
<<<<<<< Updated upstream
 80072ec:	f7fb fa7e 	bl	80027ec <HAL_GetTick>
 80072f0:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 80072f6:	20ff      	movs	r0, #255	@ 0xff
 80072f8:	f7ff ffae 	bl	8007258 <xchg_spi>
 80072fc:	4603      	mov	r3, r0
 80072fe:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8007300:	7bfb      	ldrb	r3, [r7, #15]
 8007302:	2bff      	cmp	r3, #255	@ 0xff
 8007304:	d007      	beq.n	8007316 <wait_ready+0x32>
 8007306:	f7fb fa71 	bl	80027ec <HAL_GetTick>
 800730a:	4602      	mov	r2, r0
 800730c:	697b      	ldr	r3, [r7, #20]
 800730e:	1ad3      	subs	r3, r2, r3
 8007310:	693a      	ldr	r2, [r7, #16]
 8007312:	429a      	cmp	r2, r3
 8007314:	d8ef      	bhi.n	80072f6 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 8007316:	7bfb      	ldrb	r3, [r7, #15]
 8007318:	2bff      	cmp	r3, #255	@ 0xff
 800731a:	bf0c      	ite	eq
 800731c:	2301      	moveq	r3, #1
 800731e:	2300      	movne	r3, #0
 8007320:	b2db      	uxtb	r3, r3
}
 8007322:	4618      	mov	r0, r3
 8007324:	3718      	adds	r7, #24
 8007326:	46bd      	mov	sp, r7
 8007328:	bd80      	pop	{r7, pc}
	...

0800732c <despiselect>:
=======
 800780c:	f7fb f81c 	bl	8002848 <HAL_GetTick>
 8007810:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8007816:	20ff      	movs	r0, #255	@ 0xff
 8007818:	f7ff ffae 	bl	8007778 <xchg_spi>
 800781c:	4603      	mov	r3, r0
 800781e:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8007820:	7bfb      	ldrb	r3, [r7, #15]
 8007822:	2bff      	cmp	r3, #255	@ 0xff
 8007824:	d007      	beq.n	8007836 <wait_ready+0x32>
 8007826:	f7fb f80f 	bl	8002848 <HAL_GetTick>
 800782a:	4602      	mov	r2, r0
 800782c:	697b      	ldr	r3, [r7, #20]
 800782e:	1ad3      	subs	r3, r2, r3
 8007830:	693a      	ldr	r2, [r7, #16]
 8007832:	429a      	cmp	r2, r3
 8007834:	d8ef      	bhi.n	8007816 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 8007836:	7bfb      	ldrb	r3, [r7, #15]
 8007838:	2bff      	cmp	r3, #255	@ 0xff
 800783a:	bf0c      	ite	eq
 800783c:	2301      	moveq	r3, #1
 800783e:	2300      	movne	r3, #0
 8007840:	b2db      	uxtb	r3, r3
}
 8007842:	4618      	mov	r0, r3
 8007844:	3718      	adds	r7, #24
 8007846:	46bd      	mov	sp, r7
 8007848:	bd80      	pop	{r7, pc}
	...

0800784c <despiselect>:
>>>>>>> Stashed changes
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
<<<<<<< Updated upstream
 800732c:	b580      	push	{r7, lr}
 800732e:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8007330:	2201      	movs	r2, #1
 8007332:	2140      	movs	r1, #64	@ 0x40
 8007334:	4803      	ldr	r0, [pc, #12]	@ (8007344 <despiselect+0x18>)
 8007336:	f7fb fd2d 	bl	8002d94 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 800733a:	20ff      	movs	r0, #255	@ 0xff
 800733c:	f7ff ff8c 	bl	8007258 <xchg_spi>

}
 8007340:	bf00      	nop
 8007342:	bd80      	pop	{r7, pc}
 8007344:	48000400 	.word	0x48000400

08007348 <spiselect>:
=======
 800784c:	b580      	push	{r7, lr}
 800784e:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8007850:	2201      	movs	r2, #1
 8007852:	2140      	movs	r1, #64	@ 0x40
 8007854:	4803      	ldr	r0, [pc, #12]	@ (8007864 <despiselect+0x18>)
 8007856:	f7fb facb 	bl	8002df0 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 800785a:	20ff      	movs	r0, #255	@ 0xff
 800785c:	f7ff ff8c 	bl	8007778 <xchg_spi>

}
 8007860:	bf00      	nop
 8007862:	bd80      	pop	{r7, pc}
 8007864:	48000400 	.word	0x48000400

08007868 <spiselect>:
>>>>>>> Stashed changes
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
<<<<<<< Updated upstream
 8007348:	b580      	push	{r7, lr}
 800734a:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 800734c:	2200      	movs	r2, #0
 800734e:	2140      	movs	r1, #64	@ 0x40
 8007350:	4809      	ldr	r0, [pc, #36]	@ (8007378 <spiselect+0x30>)
 8007352:	f7fb fd1f 	bl	8002d94 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8007356:	20ff      	movs	r0, #255	@ 0xff
 8007358:	f7ff ff7e 	bl	8007258 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 800735c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8007360:	f7ff ffc0 	bl	80072e4 <wait_ready>
 8007364:	4603      	mov	r3, r0
 8007366:	2b00      	cmp	r3, #0
 8007368:	d001      	beq.n	800736e <spiselect+0x26>
 800736a:	2301      	movs	r3, #1
 800736c:	e002      	b.n	8007374 <spiselect+0x2c>

	despiselect();
 800736e:	f7ff ffdd 	bl	800732c <despiselect>
	return 0;	/* Timeout */
 8007372:	2300      	movs	r3, #0
}
 8007374:	4618      	mov	r0, r3
 8007376:	bd80      	pop	{r7, pc}
 8007378:	48000400 	.word	0x48000400

0800737c <rcvr_datablock>:
=======
 8007868:	b580      	push	{r7, lr}
 800786a:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 800786c:	2200      	movs	r2, #0
 800786e:	2140      	movs	r1, #64	@ 0x40
 8007870:	4809      	ldr	r0, [pc, #36]	@ (8007898 <spiselect+0x30>)
 8007872:	f7fb fabd 	bl	8002df0 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8007876:	20ff      	movs	r0, #255	@ 0xff
 8007878:	f7ff ff7e 	bl	8007778 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 800787c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8007880:	f7ff ffc0 	bl	8007804 <wait_ready>
 8007884:	4603      	mov	r3, r0
 8007886:	2b00      	cmp	r3, #0
 8007888:	d001      	beq.n	800788e <spiselect+0x26>
 800788a:	2301      	movs	r3, #1
 800788c:	e002      	b.n	8007894 <spiselect+0x2c>

	despiselect();
 800788e:	f7ff ffdd 	bl	800784c <despiselect>
	return 0;	/* Timeout */
 8007892:	2300      	movs	r3, #0
}
 8007894:	4618      	mov	r0, r3
 8007896:	bd80      	pop	{r7, pc}
 8007898:	48000400 	.word	0x48000400

0800789c <rcvr_datablock>:
>>>>>>> Stashed changes
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
<<<<<<< Updated upstream
 800737c:	b580      	push	{r7, lr}
 800737e:	b084      	sub	sp, #16
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
 8007384:	6039      	str	r1, [r7, #0]
=======
 800789c:	b580      	push	{r7, lr}
 800789e:	b084      	sub	sp, #16
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
 80078a4:	6039      	str	r1, [r7, #0]
>>>>>>> Stashed changes
	BYTE token;


	SPI_Timer_On(200);
<<<<<<< Updated upstream
 8007386:	20c8      	movs	r0, #200	@ 0xc8
 8007388:	f7ff ff3c 	bl	8007204 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 800738c:	20ff      	movs	r0, #255	@ 0xff
 800738e:	f7ff ff63 	bl	8007258 <xchg_spi>
 8007392:	4603      	mov	r3, r0
 8007394:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 8007396:	7bfb      	ldrb	r3, [r7, #15]
 8007398:	2bff      	cmp	r3, #255	@ 0xff
 800739a:	d104      	bne.n	80073a6 <rcvr_datablock+0x2a>
 800739c:	f7ff ff46 	bl	800722c <SPI_Timer_Status>
 80073a0:	4603      	mov	r3, r0
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d1f2      	bne.n	800738c <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 80073a6:	7bfb      	ldrb	r3, [r7, #15]
 80073a8:	2bfe      	cmp	r3, #254	@ 0xfe
 80073aa:	d001      	beq.n	80073b0 <rcvr_datablock+0x34>
 80073ac:	2300      	movs	r3, #0
 80073ae:	e00a      	b.n	80073c6 <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 80073b0:	6839      	ldr	r1, [r7, #0]
 80073b2:	6878      	ldr	r0, [r7, #4]
 80073b4:	f7ff ff66 	bl	8007284 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 80073b8:	20ff      	movs	r0, #255	@ 0xff
 80073ba:	f7ff ff4d 	bl	8007258 <xchg_spi>
 80073be:	20ff      	movs	r0, #255	@ 0xff
 80073c0:	f7ff ff4a 	bl	8007258 <xchg_spi>

	return 1;						/* Function succeeded */
 80073c4:	2301      	movs	r3, #1
}
 80073c6:	4618      	mov	r0, r3
 80073c8:	3710      	adds	r7, #16
 80073ca:	46bd      	mov	sp, r7
 80073cc:	bd80      	pop	{r7, pc}

080073ce <xmit_datablock>:
=======
 80078a6:	20c8      	movs	r0, #200	@ 0xc8
 80078a8:	f7ff ff3c 	bl	8007724 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 80078ac:	20ff      	movs	r0, #255	@ 0xff
 80078ae:	f7ff ff63 	bl	8007778 <xchg_spi>
 80078b2:	4603      	mov	r3, r0
 80078b4:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 80078b6:	7bfb      	ldrb	r3, [r7, #15]
 80078b8:	2bff      	cmp	r3, #255	@ 0xff
 80078ba:	d104      	bne.n	80078c6 <rcvr_datablock+0x2a>
 80078bc:	f7ff ff46 	bl	800774c <SPI_Timer_Status>
 80078c0:	4603      	mov	r3, r0
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d1f2      	bne.n	80078ac <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 80078c6:	7bfb      	ldrb	r3, [r7, #15]
 80078c8:	2bfe      	cmp	r3, #254	@ 0xfe
 80078ca:	d001      	beq.n	80078d0 <rcvr_datablock+0x34>
 80078cc:	2300      	movs	r3, #0
 80078ce:	e00a      	b.n	80078e6 <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 80078d0:	6839      	ldr	r1, [r7, #0]
 80078d2:	6878      	ldr	r0, [r7, #4]
 80078d4:	f7ff ff66 	bl	80077a4 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 80078d8:	20ff      	movs	r0, #255	@ 0xff
 80078da:	f7ff ff4d 	bl	8007778 <xchg_spi>
 80078de:	20ff      	movs	r0, #255	@ 0xff
 80078e0:	f7ff ff4a 	bl	8007778 <xchg_spi>

	return 1;						/* Function succeeded */
 80078e4:	2301      	movs	r3, #1
}
 80078e6:	4618      	mov	r0, r3
 80078e8:	3710      	adds	r7, #16
 80078ea:	46bd      	mov	sp, r7
 80078ec:	bd80      	pop	{r7, pc}

080078ee <xmit_datablock>:
>>>>>>> Stashed changes
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
<<<<<<< Updated upstream
 80073ce:	b580      	push	{r7, lr}
 80073d0:	b084      	sub	sp, #16
 80073d2:	af00      	add	r7, sp, #0
 80073d4:	6078      	str	r0, [r7, #4]
 80073d6:	460b      	mov	r3, r1
 80073d8:	70fb      	strb	r3, [r7, #3]
=======
 80078ee:	b580      	push	{r7, lr}
 80078f0:	b084      	sub	sp, #16
 80078f2:	af00      	add	r7, sp, #0
 80078f4:	6078      	str	r0, [r7, #4]
 80078f6:	460b      	mov	r3, r1
 80078f8:	70fb      	strb	r3, [r7, #3]
>>>>>>> Stashed changes
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
<<<<<<< Updated upstream
 80073da:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80073de:	f7ff ff81 	bl	80072e4 <wait_ready>
 80073e2:	4603      	mov	r3, r0
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d101      	bne.n	80073ec <xmit_datablock+0x1e>
 80073e8:	2300      	movs	r3, #0
 80073ea:	e01e      	b.n	800742a <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 80073ec:	78fb      	ldrb	r3, [r7, #3]
 80073ee:	4618      	mov	r0, r3
 80073f0:	f7ff ff32 	bl	8007258 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 80073f4:	78fb      	ldrb	r3, [r7, #3]
 80073f6:	2bfd      	cmp	r3, #253	@ 0xfd
 80073f8:	d016      	beq.n	8007428 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 80073fa:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80073fe:	6878      	ldr	r0, [r7, #4]
 8007400:	f7ff ff5c 	bl	80072bc <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8007404:	20ff      	movs	r0, #255	@ 0xff
 8007406:	f7ff ff27 	bl	8007258 <xchg_spi>
 800740a:	20ff      	movs	r0, #255	@ 0xff
 800740c:	f7ff ff24 	bl	8007258 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8007410:	20ff      	movs	r0, #255	@ 0xff
 8007412:	f7ff ff21 	bl	8007258 <xchg_spi>
 8007416:	4603      	mov	r3, r0
 8007418:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 800741a:	7bfb      	ldrb	r3, [r7, #15]
 800741c:	f003 031f 	and.w	r3, r3, #31
 8007420:	2b05      	cmp	r3, #5
 8007422:	d001      	beq.n	8007428 <xmit_datablock+0x5a>
 8007424:	2300      	movs	r3, #0
 8007426:	e000      	b.n	800742a <xmit_datablock+0x5c>
	}
	return 1;
 8007428:	2301      	movs	r3, #1
}
 800742a:	4618      	mov	r0, r3
 800742c:	3710      	adds	r7, #16
 800742e:	46bd      	mov	sp, r7
 8007430:	bd80      	pop	{r7, pc}

08007432 <send_cmd>:
=======
 80078fa:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80078fe:	f7ff ff81 	bl	8007804 <wait_ready>
 8007902:	4603      	mov	r3, r0
 8007904:	2b00      	cmp	r3, #0
 8007906:	d101      	bne.n	800790c <xmit_datablock+0x1e>
 8007908:	2300      	movs	r3, #0
 800790a:	e01e      	b.n	800794a <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 800790c:	78fb      	ldrb	r3, [r7, #3]
 800790e:	4618      	mov	r0, r3
 8007910:	f7ff ff32 	bl	8007778 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8007914:	78fb      	ldrb	r3, [r7, #3]
 8007916:	2bfd      	cmp	r3, #253	@ 0xfd
 8007918:	d016      	beq.n	8007948 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 800791a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800791e:	6878      	ldr	r0, [r7, #4]
 8007920:	f7ff ff5c 	bl	80077dc <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8007924:	20ff      	movs	r0, #255	@ 0xff
 8007926:	f7ff ff27 	bl	8007778 <xchg_spi>
 800792a:	20ff      	movs	r0, #255	@ 0xff
 800792c:	f7ff ff24 	bl	8007778 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8007930:	20ff      	movs	r0, #255	@ 0xff
 8007932:	f7ff ff21 	bl	8007778 <xchg_spi>
 8007936:	4603      	mov	r3, r0
 8007938:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 800793a:	7bfb      	ldrb	r3, [r7, #15]
 800793c:	f003 031f 	and.w	r3, r3, #31
 8007940:	2b05      	cmp	r3, #5
 8007942:	d001      	beq.n	8007948 <xmit_datablock+0x5a>
 8007944:	2300      	movs	r3, #0
 8007946:	e000      	b.n	800794a <xmit_datablock+0x5c>
	}
	return 1;
 8007948:	2301      	movs	r3, #1
}
 800794a:	4618      	mov	r0, r3
 800794c:	3710      	adds	r7, #16
 800794e:	46bd      	mov	sp, r7
 8007950:	bd80      	pop	{r7, pc}

08007952 <send_cmd>:
>>>>>>> Stashed changes
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
<<<<<<< Updated upstream
 8007432:	b580      	push	{r7, lr}
 8007434:	b084      	sub	sp, #16
 8007436:	af00      	add	r7, sp, #0
 8007438:	4603      	mov	r3, r0
 800743a:	6039      	str	r1, [r7, #0]
 800743c:	71fb      	strb	r3, [r7, #7]
=======
 8007952:	b580      	push	{r7, lr}
 8007954:	b084      	sub	sp, #16
 8007956:	af00      	add	r7, sp, #0
 8007958:	4603      	mov	r3, r0
 800795a:	6039      	str	r1, [r7, #0]
 800795c:	71fb      	strb	r3, [r7, #7]
>>>>>>> Stashed changes
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
<<<<<<< Updated upstream
 800743e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007442:	2b00      	cmp	r3, #0
 8007444:	da0e      	bge.n	8007464 <send_cmd+0x32>
		cmd &= 0x7F;
 8007446:	79fb      	ldrb	r3, [r7, #7]
 8007448:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800744c:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 800744e:	2100      	movs	r1, #0
 8007450:	2037      	movs	r0, #55	@ 0x37
 8007452:	f7ff ffee 	bl	8007432 <send_cmd>
 8007456:	4603      	mov	r3, r0
 8007458:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 800745a:	7bbb      	ldrb	r3, [r7, #14]
 800745c:	2b01      	cmp	r3, #1
 800745e:	d901      	bls.n	8007464 <send_cmd+0x32>
 8007460:	7bbb      	ldrb	r3, [r7, #14]
 8007462:	e051      	b.n	8007508 <send_cmd+0xd6>
=======
 800795e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007962:	2b00      	cmp	r3, #0
 8007964:	da0e      	bge.n	8007984 <send_cmd+0x32>
		cmd &= 0x7F;
 8007966:	79fb      	ldrb	r3, [r7, #7]
 8007968:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800796c:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 800796e:	2100      	movs	r1, #0
 8007970:	2037      	movs	r0, #55	@ 0x37
 8007972:	f7ff ffee 	bl	8007952 <send_cmd>
 8007976:	4603      	mov	r3, r0
 8007978:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 800797a:	7bbb      	ldrb	r3, [r7, #14]
 800797c:	2b01      	cmp	r3, #1
 800797e:	d901      	bls.n	8007984 <send_cmd+0x32>
 8007980:	7bbb      	ldrb	r3, [r7, #14]
 8007982:	e051      	b.n	8007a28 <send_cmd+0xd6>
>>>>>>> Stashed changes
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
<<<<<<< Updated upstream
 8007464:	79fb      	ldrb	r3, [r7, #7]
 8007466:	2b0c      	cmp	r3, #12
 8007468:	d008      	beq.n	800747c <send_cmd+0x4a>
		despiselect();
 800746a:	f7ff ff5f 	bl	800732c <despiselect>
		if (!spiselect()) return 0xFF;
 800746e:	f7ff ff6b 	bl	8007348 <spiselect>
 8007472:	4603      	mov	r3, r0
 8007474:	2b00      	cmp	r3, #0
 8007476:	d101      	bne.n	800747c <send_cmd+0x4a>
 8007478:	23ff      	movs	r3, #255	@ 0xff
 800747a:	e045      	b.n	8007508 <send_cmd+0xd6>
=======
 8007984:	79fb      	ldrb	r3, [r7, #7]
 8007986:	2b0c      	cmp	r3, #12
 8007988:	d008      	beq.n	800799c <send_cmd+0x4a>
		despiselect();
 800798a:	f7ff ff5f 	bl	800784c <despiselect>
		if (!spiselect()) return 0xFF;
 800798e:	f7ff ff6b 	bl	8007868 <spiselect>
 8007992:	4603      	mov	r3, r0
 8007994:	2b00      	cmp	r3, #0
 8007996:	d101      	bne.n	800799c <send_cmd+0x4a>
 8007998:	23ff      	movs	r3, #255	@ 0xff
 800799a:	e045      	b.n	8007a28 <send_cmd+0xd6>
>>>>>>> Stashed changes
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
<<<<<<< Updated upstream
 800747c:	79fb      	ldrb	r3, [r7, #7]
 800747e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007482:	b2db      	uxtb	r3, r3
 8007484:	4618      	mov	r0, r3
 8007486:	f7ff fee7 	bl	8007258 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 800748a:	683b      	ldr	r3, [r7, #0]
 800748c:	0e1b      	lsrs	r3, r3, #24
 800748e:	b2db      	uxtb	r3, r3
 8007490:	4618      	mov	r0, r3
 8007492:	f7ff fee1 	bl	8007258 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	0c1b      	lsrs	r3, r3, #16
 800749a:	b2db      	uxtb	r3, r3
 800749c:	4618      	mov	r0, r3
 800749e:	f7ff fedb 	bl	8007258 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 80074a2:	683b      	ldr	r3, [r7, #0]
 80074a4:	0a1b      	lsrs	r3, r3, #8
 80074a6:	b2db      	uxtb	r3, r3
 80074a8:	4618      	mov	r0, r3
 80074aa:	f7ff fed5 	bl	8007258 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 80074ae:	683b      	ldr	r3, [r7, #0]
 80074b0:	b2db      	uxtb	r3, r3
 80074b2:	4618      	mov	r0, r3
 80074b4:	f7ff fed0 	bl	8007258 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 80074b8:	2301      	movs	r3, #1
 80074ba:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 80074bc:	79fb      	ldrb	r3, [r7, #7]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d101      	bne.n	80074c6 <send_cmd+0x94>
 80074c2:	2395      	movs	r3, #149	@ 0x95
 80074c4:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 80074c6:	79fb      	ldrb	r3, [r7, #7]
 80074c8:	2b08      	cmp	r3, #8
 80074ca:	d101      	bne.n	80074d0 <send_cmd+0x9e>
 80074cc:	2387      	movs	r3, #135	@ 0x87
 80074ce:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 80074d0:	7bfb      	ldrb	r3, [r7, #15]
 80074d2:	4618      	mov	r0, r3
 80074d4:	f7ff fec0 	bl	8007258 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 80074d8:	79fb      	ldrb	r3, [r7, #7]
 80074da:	2b0c      	cmp	r3, #12
 80074dc:	d102      	bne.n	80074e4 <send_cmd+0xb2>
 80074de:	20ff      	movs	r0, #255	@ 0xff
 80074e0:	f7ff feba 	bl	8007258 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 80074e4:	230a      	movs	r3, #10
 80074e6:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 80074e8:	20ff      	movs	r0, #255	@ 0xff
 80074ea:	f7ff feb5 	bl	8007258 <xchg_spi>
 80074ee:	4603      	mov	r3, r0
 80074f0:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 80074f2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	da05      	bge.n	8007506 <send_cmd+0xd4>
 80074fa:	7bfb      	ldrb	r3, [r7, #15]
 80074fc:	3b01      	subs	r3, #1
 80074fe:	73fb      	strb	r3, [r7, #15]
 8007500:	7bfb      	ldrb	r3, [r7, #15]
 8007502:	2b00      	cmp	r3, #0
 8007504:	d1f0      	bne.n	80074e8 <send_cmd+0xb6>

	return res;							/* Return received response */
 8007506:	7bbb      	ldrb	r3, [r7, #14]
}
 8007508:	4618      	mov	r0, r3
 800750a:	3710      	adds	r7, #16
 800750c:	46bd      	mov	sp, r7
 800750e:	bd80      	pop	{r7, pc}

08007510 <USER_SPI_initialize>:
=======
 800799c:	79fb      	ldrb	r3, [r7, #7]
 800799e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80079a2:	b2db      	uxtb	r3, r3
 80079a4:	4618      	mov	r0, r3
 80079a6:	f7ff fee7 	bl	8007778 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 80079aa:	683b      	ldr	r3, [r7, #0]
 80079ac:	0e1b      	lsrs	r3, r3, #24
 80079ae:	b2db      	uxtb	r3, r3
 80079b0:	4618      	mov	r0, r3
 80079b2:	f7ff fee1 	bl	8007778 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 80079b6:	683b      	ldr	r3, [r7, #0]
 80079b8:	0c1b      	lsrs	r3, r3, #16
 80079ba:	b2db      	uxtb	r3, r3
 80079bc:	4618      	mov	r0, r3
 80079be:	f7ff fedb 	bl	8007778 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 80079c2:	683b      	ldr	r3, [r7, #0]
 80079c4:	0a1b      	lsrs	r3, r3, #8
 80079c6:	b2db      	uxtb	r3, r3
 80079c8:	4618      	mov	r0, r3
 80079ca:	f7ff fed5 	bl	8007778 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 80079ce:	683b      	ldr	r3, [r7, #0]
 80079d0:	b2db      	uxtb	r3, r3
 80079d2:	4618      	mov	r0, r3
 80079d4:	f7ff fed0 	bl	8007778 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 80079d8:	2301      	movs	r3, #1
 80079da:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 80079dc:	79fb      	ldrb	r3, [r7, #7]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d101      	bne.n	80079e6 <send_cmd+0x94>
 80079e2:	2395      	movs	r3, #149	@ 0x95
 80079e4:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 80079e6:	79fb      	ldrb	r3, [r7, #7]
 80079e8:	2b08      	cmp	r3, #8
 80079ea:	d101      	bne.n	80079f0 <send_cmd+0x9e>
 80079ec:	2387      	movs	r3, #135	@ 0x87
 80079ee:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 80079f0:	7bfb      	ldrb	r3, [r7, #15]
 80079f2:	4618      	mov	r0, r3
 80079f4:	f7ff fec0 	bl	8007778 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 80079f8:	79fb      	ldrb	r3, [r7, #7]
 80079fa:	2b0c      	cmp	r3, #12
 80079fc:	d102      	bne.n	8007a04 <send_cmd+0xb2>
 80079fe:	20ff      	movs	r0, #255	@ 0xff
 8007a00:	f7ff feba 	bl	8007778 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8007a04:	230a      	movs	r3, #10
 8007a06:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 8007a08:	20ff      	movs	r0, #255	@ 0xff
 8007a0a:	f7ff feb5 	bl	8007778 <xchg_spi>
 8007a0e:	4603      	mov	r3, r0
 8007a10:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 8007a12:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	da05      	bge.n	8007a26 <send_cmd+0xd4>
 8007a1a:	7bfb      	ldrb	r3, [r7, #15]
 8007a1c:	3b01      	subs	r3, #1
 8007a1e:	73fb      	strb	r3, [r7, #15]
 8007a20:	7bfb      	ldrb	r3, [r7, #15]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d1f0      	bne.n	8007a08 <send_cmd+0xb6>

	return res;							/* Return received response */
 8007a26:	7bbb      	ldrb	r3, [r7, #14]
}
 8007a28:	4618      	mov	r0, r3
 8007a2a:	3710      	adds	r7, #16
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	bd80      	pop	{r7, pc}

08007a30 <USER_SPI_initialize>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
<<<<<<< Updated upstream
 8007510:	b590      	push	{r4, r7, lr}
 8007512:	b085      	sub	sp, #20
 8007514:	af00      	add	r7, sp, #0
 8007516:	4603      	mov	r3, r0
 8007518:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 800751a:	79fb      	ldrb	r3, [r7, #7]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d001      	beq.n	8007524 <USER_SPI_initialize+0x14>
 8007520:	2301      	movs	r3, #1
 8007522:	e0d6      	b.n	80076d2 <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8007524:	4b6d      	ldr	r3, [pc, #436]	@ (80076dc <USER_SPI_initialize+0x1cc>)
 8007526:	781b      	ldrb	r3, [r3, #0]
 8007528:	b2db      	uxtb	r3, r3
 800752a:	f003 0302 	and.w	r3, r3, #2
 800752e:	2b00      	cmp	r3, #0
 8007530:	d003      	beq.n	800753a <USER_SPI_initialize+0x2a>
 8007532:	4b6a      	ldr	r3, [pc, #424]	@ (80076dc <USER_SPI_initialize+0x1cc>)
 8007534:	781b      	ldrb	r3, [r3, #0]
 8007536:	b2db      	uxtb	r3, r3
 8007538:	e0cb      	b.n	80076d2 <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 800753a:	4b69      	ldr	r3, [pc, #420]	@ (80076e0 <USER_SPI_initialize+0x1d0>)
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 8007544:	4b66      	ldr	r3, [pc, #408]	@ (80076e0 <USER_SPI_initialize+0x1d0>)
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	f042 0230 	orr.w	r2, r2, #48	@ 0x30
 800754c:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 800754e:	230a      	movs	r3, #10
 8007550:	73fb      	strb	r3, [r7, #15]
 8007552:	e005      	b.n	8007560 <USER_SPI_initialize+0x50>
 8007554:	20ff      	movs	r0, #255	@ 0xff
 8007556:	f7ff fe7f 	bl	8007258 <xchg_spi>
 800755a:	7bfb      	ldrb	r3, [r7, #15]
 800755c:	3b01      	subs	r3, #1
 800755e:	73fb      	strb	r3, [r7, #15]
 8007560:	7bfb      	ldrb	r3, [r7, #15]
 8007562:	2b00      	cmp	r3, #0
 8007564:	d1f6      	bne.n	8007554 <USER_SPI_initialize+0x44>

	ty = 0;
 8007566:	2300      	movs	r3, #0
 8007568:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 800756a:	2100      	movs	r1, #0
 800756c:	2000      	movs	r0, #0
 800756e:	f7ff ff60 	bl	8007432 <send_cmd>
 8007572:	4603      	mov	r3, r0
 8007574:	2b01      	cmp	r3, #1
 8007576:	f040 808b 	bne.w	8007690 <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 800757a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800757e:	f7ff fe41 	bl	8007204 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8007582:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8007586:	2008      	movs	r0, #8
 8007588:	f7ff ff53 	bl	8007432 <send_cmd>
 800758c:	4603      	mov	r3, r0
 800758e:	2b01      	cmp	r3, #1
 8007590:	d151      	bne.n	8007636 <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 8007592:	2300      	movs	r3, #0
 8007594:	73fb      	strb	r3, [r7, #15]
 8007596:	e00d      	b.n	80075b4 <USER_SPI_initialize+0xa4>
 8007598:	7bfc      	ldrb	r4, [r7, #15]
 800759a:	20ff      	movs	r0, #255	@ 0xff
 800759c:	f7ff fe5c 	bl	8007258 <xchg_spi>
 80075a0:	4603      	mov	r3, r0
 80075a2:	461a      	mov	r2, r3
 80075a4:	f104 0310 	add.w	r3, r4, #16
 80075a8:	443b      	add	r3, r7
 80075aa:	f803 2c08 	strb.w	r2, [r3, #-8]
 80075ae:	7bfb      	ldrb	r3, [r7, #15]
 80075b0:	3301      	adds	r3, #1
 80075b2:	73fb      	strb	r3, [r7, #15]
 80075b4:	7bfb      	ldrb	r3, [r7, #15]
 80075b6:	2b03      	cmp	r3, #3
 80075b8:	d9ee      	bls.n	8007598 <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 80075ba:	7abb      	ldrb	r3, [r7, #10]
 80075bc:	2b01      	cmp	r3, #1
 80075be:	d167      	bne.n	8007690 <USER_SPI_initialize+0x180>
 80075c0:	7afb      	ldrb	r3, [r7, #11]
 80075c2:	2baa      	cmp	r3, #170	@ 0xaa
 80075c4:	d164      	bne.n	8007690 <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 80075c6:	bf00      	nop
 80075c8:	f7ff fe30 	bl	800722c <SPI_Timer_Status>
 80075cc:	4603      	mov	r3, r0
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d007      	beq.n	80075e2 <USER_SPI_initialize+0xd2>
 80075d2:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80075d6:	20a9      	movs	r0, #169	@ 0xa9
 80075d8:	f7ff ff2b 	bl	8007432 <send_cmd>
 80075dc:	4603      	mov	r3, r0
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d1f2      	bne.n	80075c8 <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 80075e2:	f7ff fe23 	bl	800722c <SPI_Timer_Status>
 80075e6:	4603      	mov	r3, r0
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d051      	beq.n	8007690 <USER_SPI_initialize+0x180>
 80075ec:	2100      	movs	r1, #0
 80075ee:	203a      	movs	r0, #58	@ 0x3a
 80075f0:	f7ff ff1f 	bl	8007432 <send_cmd>
 80075f4:	4603      	mov	r3, r0
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d14a      	bne.n	8007690 <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 80075fa:	2300      	movs	r3, #0
 80075fc:	73fb      	strb	r3, [r7, #15]
 80075fe:	e00d      	b.n	800761c <USER_SPI_initialize+0x10c>
 8007600:	7bfc      	ldrb	r4, [r7, #15]
 8007602:	20ff      	movs	r0, #255	@ 0xff
 8007604:	f7ff fe28 	bl	8007258 <xchg_spi>
 8007608:	4603      	mov	r3, r0
 800760a:	461a      	mov	r2, r3
 800760c:	f104 0310 	add.w	r3, r4, #16
 8007610:	443b      	add	r3, r7
 8007612:	f803 2c08 	strb.w	r2, [r3, #-8]
 8007616:	7bfb      	ldrb	r3, [r7, #15]
 8007618:	3301      	adds	r3, #1
 800761a:	73fb      	strb	r3, [r7, #15]
 800761c:	7bfb      	ldrb	r3, [r7, #15]
 800761e:	2b03      	cmp	r3, #3
 8007620:	d9ee      	bls.n	8007600 <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8007622:	7a3b      	ldrb	r3, [r7, #8]
 8007624:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007628:	2b00      	cmp	r3, #0
 800762a:	d001      	beq.n	8007630 <USER_SPI_initialize+0x120>
 800762c:	230c      	movs	r3, #12
 800762e:	e000      	b.n	8007632 <USER_SPI_initialize+0x122>
 8007630:	2304      	movs	r3, #4
 8007632:	737b      	strb	r3, [r7, #13]
 8007634:	e02c      	b.n	8007690 <USER_SPI_initialize+0x180>
=======
 8007a30:	b590      	push	{r4, r7, lr}
 8007a32:	b085      	sub	sp, #20
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	4603      	mov	r3, r0
 8007a38:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 8007a3a:	79fb      	ldrb	r3, [r7, #7]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d001      	beq.n	8007a44 <USER_SPI_initialize+0x14>
 8007a40:	2301      	movs	r3, #1
 8007a42:	e0d6      	b.n	8007bf2 <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8007a44:	4b6d      	ldr	r3, [pc, #436]	@ (8007bfc <USER_SPI_initialize+0x1cc>)
 8007a46:	781b      	ldrb	r3, [r3, #0]
 8007a48:	b2db      	uxtb	r3, r3
 8007a4a:	f003 0302 	and.w	r3, r3, #2
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d003      	beq.n	8007a5a <USER_SPI_initialize+0x2a>
 8007a52:	4b6a      	ldr	r3, [pc, #424]	@ (8007bfc <USER_SPI_initialize+0x1cc>)
 8007a54:	781b      	ldrb	r3, [r3, #0]
 8007a56:	b2db      	uxtb	r3, r3
 8007a58:	e0cb      	b.n	8007bf2 <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 8007a5a:	4b69      	ldr	r3, [pc, #420]	@ (8007c00 <USER_SPI_initialize+0x1d0>)
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 8007a64:	4b66      	ldr	r3, [pc, #408]	@ (8007c00 <USER_SPI_initialize+0x1d0>)
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	f042 0230 	orr.w	r2, r2, #48	@ 0x30
 8007a6c:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 8007a6e:	230a      	movs	r3, #10
 8007a70:	73fb      	strb	r3, [r7, #15]
 8007a72:	e005      	b.n	8007a80 <USER_SPI_initialize+0x50>
 8007a74:	20ff      	movs	r0, #255	@ 0xff
 8007a76:	f7ff fe7f 	bl	8007778 <xchg_spi>
 8007a7a:	7bfb      	ldrb	r3, [r7, #15]
 8007a7c:	3b01      	subs	r3, #1
 8007a7e:	73fb      	strb	r3, [r7, #15]
 8007a80:	7bfb      	ldrb	r3, [r7, #15]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d1f6      	bne.n	8007a74 <USER_SPI_initialize+0x44>

	ty = 0;
 8007a86:	2300      	movs	r3, #0
 8007a88:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 8007a8a:	2100      	movs	r1, #0
 8007a8c:	2000      	movs	r0, #0
 8007a8e:	f7ff ff60 	bl	8007952 <send_cmd>
 8007a92:	4603      	mov	r3, r0
 8007a94:	2b01      	cmp	r3, #1
 8007a96:	f040 808b 	bne.w	8007bb0 <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 8007a9a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8007a9e:	f7ff fe41 	bl	8007724 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8007aa2:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8007aa6:	2008      	movs	r0, #8
 8007aa8:	f7ff ff53 	bl	8007952 <send_cmd>
 8007aac:	4603      	mov	r3, r0
 8007aae:	2b01      	cmp	r3, #1
 8007ab0:	d151      	bne.n	8007b56 <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	73fb      	strb	r3, [r7, #15]
 8007ab6:	e00d      	b.n	8007ad4 <USER_SPI_initialize+0xa4>
 8007ab8:	7bfc      	ldrb	r4, [r7, #15]
 8007aba:	20ff      	movs	r0, #255	@ 0xff
 8007abc:	f7ff fe5c 	bl	8007778 <xchg_spi>
 8007ac0:	4603      	mov	r3, r0
 8007ac2:	461a      	mov	r2, r3
 8007ac4:	f104 0310 	add.w	r3, r4, #16
 8007ac8:	443b      	add	r3, r7
 8007aca:	f803 2c08 	strb.w	r2, [r3, #-8]
 8007ace:	7bfb      	ldrb	r3, [r7, #15]
 8007ad0:	3301      	adds	r3, #1
 8007ad2:	73fb      	strb	r3, [r7, #15]
 8007ad4:	7bfb      	ldrb	r3, [r7, #15]
 8007ad6:	2b03      	cmp	r3, #3
 8007ad8:	d9ee      	bls.n	8007ab8 <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 8007ada:	7abb      	ldrb	r3, [r7, #10]
 8007adc:	2b01      	cmp	r3, #1
 8007ade:	d167      	bne.n	8007bb0 <USER_SPI_initialize+0x180>
 8007ae0:	7afb      	ldrb	r3, [r7, #11]
 8007ae2:	2baa      	cmp	r3, #170	@ 0xaa
 8007ae4:	d164      	bne.n	8007bb0 <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 8007ae6:	bf00      	nop
 8007ae8:	f7ff fe30 	bl	800774c <SPI_Timer_Status>
 8007aec:	4603      	mov	r3, r0
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d007      	beq.n	8007b02 <USER_SPI_initialize+0xd2>
 8007af2:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8007af6:	20a9      	movs	r0, #169	@ 0xa9
 8007af8:	f7ff ff2b 	bl	8007952 <send_cmd>
 8007afc:	4603      	mov	r3, r0
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d1f2      	bne.n	8007ae8 <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8007b02:	f7ff fe23 	bl	800774c <SPI_Timer_Status>
 8007b06:	4603      	mov	r3, r0
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d051      	beq.n	8007bb0 <USER_SPI_initialize+0x180>
 8007b0c:	2100      	movs	r1, #0
 8007b0e:	203a      	movs	r0, #58	@ 0x3a
 8007b10:	f7ff ff1f 	bl	8007952 <send_cmd>
 8007b14:	4603      	mov	r3, r0
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d14a      	bne.n	8007bb0 <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	73fb      	strb	r3, [r7, #15]
 8007b1e:	e00d      	b.n	8007b3c <USER_SPI_initialize+0x10c>
 8007b20:	7bfc      	ldrb	r4, [r7, #15]
 8007b22:	20ff      	movs	r0, #255	@ 0xff
 8007b24:	f7ff fe28 	bl	8007778 <xchg_spi>
 8007b28:	4603      	mov	r3, r0
 8007b2a:	461a      	mov	r2, r3
 8007b2c:	f104 0310 	add.w	r3, r4, #16
 8007b30:	443b      	add	r3, r7
 8007b32:	f803 2c08 	strb.w	r2, [r3, #-8]
 8007b36:	7bfb      	ldrb	r3, [r7, #15]
 8007b38:	3301      	adds	r3, #1
 8007b3a:	73fb      	strb	r3, [r7, #15]
 8007b3c:	7bfb      	ldrb	r3, [r7, #15]
 8007b3e:	2b03      	cmp	r3, #3
 8007b40:	d9ee      	bls.n	8007b20 <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8007b42:	7a3b      	ldrb	r3, [r7, #8]
 8007b44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d001      	beq.n	8007b50 <USER_SPI_initialize+0x120>
 8007b4c:	230c      	movs	r3, #12
 8007b4e:	e000      	b.n	8007b52 <USER_SPI_initialize+0x122>
 8007b50:	2304      	movs	r3, #4
 8007b52:	737b      	strb	r3, [r7, #13]
 8007b54:	e02c      	b.n	8007bb0 <USER_SPI_initialize+0x180>
>>>>>>> Stashed changes
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
<<<<<<< Updated upstream
 8007636:	2100      	movs	r1, #0
 8007638:	20a9      	movs	r0, #169	@ 0xa9
 800763a:	f7ff fefa 	bl	8007432 <send_cmd>
 800763e:	4603      	mov	r3, r0
 8007640:	2b01      	cmp	r3, #1
 8007642:	d804      	bhi.n	800764e <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8007644:	2302      	movs	r3, #2
 8007646:	737b      	strb	r3, [r7, #13]
 8007648:	23a9      	movs	r3, #169	@ 0xa9
 800764a:	73bb      	strb	r3, [r7, #14]
 800764c:	e003      	b.n	8007656 <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 800764e:	2301      	movs	r3, #1
 8007650:	737b      	strb	r3, [r7, #13]
 8007652:	2301      	movs	r3, #1
 8007654:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8007656:	bf00      	nop
 8007658:	f7ff fde8 	bl	800722c <SPI_Timer_Status>
 800765c:	4603      	mov	r3, r0
 800765e:	2b00      	cmp	r3, #0
 8007660:	d007      	beq.n	8007672 <USER_SPI_initialize+0x162>
 8007662:	7bbb      	ldrb	r3, [r7, #14]
 8007664:	2100      	movs	r1, #0
 8007666:	4618      	mov	r0, r3
 8007668:	f7ff fee3 	bl	8007432 <send_cmd>
 800766c:	4603      	mov	r3, r0
 800766e:	2b00      	cmp	r3, #0
 8007670:	d1f2      	bne.n	8007658 <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 8007672:	f7ff fddb 	bl	800722c <SPI_Timer_Status>
 8007676:	4603      	mov	r3, r0
 8007678:	2b00      	cmp	r3, #0
 800767a:	d007      	beq.n	800768c <USER_SPI_initialize+0x17c>
 800767c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8007680:	2010      	movs	r0, #16
 8007682:	f7ff fed6 	bl	8007432 <send_cmd>
 8007686:	4603      	mov	r3, r0
 8007688:	2b00      	cmp	r3, #0
 800768a:	d001      	beq.n	8007690 <USER_SPI_initialize+0x180>
				ty = 0;
 800768c:	2300      	movs	r3, #0
 800768e:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 8007690:	4a14      	ldr	r2, [pc, #80]	@ (80076e4 <USER_SPI_initialize+0x1d4>)
 8007692:	7b7b      	ldrb	r3, [r7, #13]
 8007694:	7013      	strb	r3, [r2, #0]
	despiselect();
 8007696:	f7ff fe49 	bl	800732c <despiselect>

	if (ty) {			/* OK */
 800769a:	7b7b      	ldrb	r3, [r7, #13]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d012      	beq.n	80076c6 <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 80076a0:	4b0f      	ldr	r3, [pc, #60]	@ (80076e0 <USER_SPI_initialize+0x1d0>)
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 80076aa:	4b0d      	ldr	r3, [pc, #52]	@ (80076e0 <USER_SPI_initialize+0x1d0>)
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	f042 0210 	orr.w	r2, r2, #16
 80076b2:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 80076b4:	4b09      	ldr	r3, [pc, #36]	@ (80076dc <USER_SPI_initialize+0x1cc>)
 80076b6:	781b      	ldrb	r3, [r3, #0]
 80076b8:	b2db      	uxtb	r3, r3
 80076ba:	f023 0301 	bic.w	r3, r3, #1
 80076be:	b2da      	uxtb	r2, r3
 80076c0:	4b06      	ldr	r3, [pc, #24]	@ (80076dc <USER_SPI_initialize+0x1cc>)
 80076c2:	701a      	strb	r2, [r3, #0]
 80076c4:	e002      	b.n	80076cc <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 80076c6:	4b05      	ldr	r3, [pc, #20]	@ (80076dc <USER_SPI_initialize+0x1cc>)
 80076c8:	2201      	movs	r2, #1
 80076ca:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 80076cc:	4b03      	ldr	r3, [pc, #12]	@ (80076dc <USER_SPI_initialize+0x1cc>)
 80076ce:	781b      	ldrb	r3, [r3, #0]
 80076d0:	b2db      	uxtb	r3, r3
}
 80076d2:	4618      	mov	r0, r3
 80076d4:	3714      	adds	r7, #20
 80076d6:	46bd      	mov	sp, r7
 80076d8:	bd90      	pop	{r4, r7, pc}
 80076da:	bf00      	nop
 80076dc:	2000002c 	.word	0x2000002c
 80076e0:	20000218 	.word	0x20000218
 80076e4:	20000a28 	.word	0x20000a28

080076e8 <USER_SPI_status>:
=======
 8007b56:	2100      	movs	r1, #0
 8007b58:	20a9      	movs	r0, #169	@ 0xa9
 8007b5a:	f7ff fefa 	bl	8007952 <send_cmd>
 8007b5e:	4603      	mov	r3, r0
 8007b60:	2b01      	cmp	r3, #1
 8007b62:	d804      	bhi.n	8007b6e <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8007b64:	2302      	movs	r3, #2
 8007b66:	737b      	strb	r3, [r7, #13]
 8007b68:	23a9      	movs	r3, #169	@ 0xa9
 8007b6a:	73bb      	strb	r3, [r7, #14]
 8007b6c:	e003      	b.n	8007b76 <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 8007b6e:	2301      	movs	r3, #1
 8007b70:	737b      	strb	r3, [r7, #13]
 8007b72:	2301      	movs	r3, #1
 8007b74:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8007b76:	bf00      	nop
 8007b78:	f7ff fde8 	bl	800774c <SPI_Timer_Status>
 8007b7c:	4603      	mov	r3, r0
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d007      	beq.n	8007b92 <USER_SPI_initialize+0x162>
 8007b82:	7bbb      	ldrb	r3, [r7, #14]
 8007b84:	2100      	movs	r1, #0
 8007b86:	4618      	mov	r0, r3
 8007b88:	f7ff fee3 	bl	8007952 <send_cmd>
 8007b8c:	4603      	mov	r3, r0
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d1f2      	bne.n	8007b78 <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 8007b92:	f7ff fddb 	bl	800774c <SPI_Timer_Status>
 8007b96:	4603      	mov	r3, r0
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d007      	beq.n	8007bac <USER_SPI_initialize+0x17c>
 8007b9c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8007ba0:	2010      	movs	r0, #16
 8007ba2:	f7ff fed6 	bl	8007952 <send_cmd>
 8007ba6:	4603      	mov	r3, r0
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d001      	beq.n	8007bb0 <USER_SPI_initialize+0x180>
				ty = 0;
 8007bac:	2300      	movs	r3, #0
 8007bae:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 8007bb0:	4a14      	ldr	r2, [pc, #80]	@ (8007c04 <USER_SPI_initialize+0x1d4>)
 8007bb2:	7b7b      	ldrb	r3, [r7, #13]
 8007bb4:	7013      	strb	r3, [r2, #0]
	despiselect();
 8007bb6:	f7ff fe49 	bl	800784c <despiselect>

	if (ty) {			/* OK */
 8007bba:	7b7b      	ldrb	r3, [r7, #13]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d012      	beq.n	8007be6 <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 8007bc0:	4b0f      	ldr	r3, [pc, #60]	@ (8007c00 <USER_SPI_initialize+0x1d0>)
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 8007bca:	4b0d      	ldr	r3, [pc, #52]	@ (8007c00 <USER_SPI_initialize+0x1d0>)
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	f042 0210 	orr.w	r2, r2, #16
 8007bd2:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8007bd4:	4b09      	ldr	r3, [pc, #36]	@ (8007bfc <USER_SPI_initialize+0x1cc>)
 8007bd6:	781b      	ldrb	r3, [r3, #0]
 8007bd8:	b2db      	uxtb	r3, r3
 8007bda:	f023 0301 	bic.w	r3, r3, #1
 8007bde:	b2da      	uxtb	r2, r3
 8007be0:	4b06      	ldr	r3, [pc, #24]	@ (8007bfc <USER_SPI_initialize+0x1cc>)
 8007be2:	701a      	strb	r2, [r3, #0]
 8007be4:	e002      	b.n	8007bec <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 8007be6:	4b05      	ldr	r3, [pc, #20]	@ (8007bfc <USER_SPI_initialize+0x1cc>)
 8007be8:	2201      	movs	r2, #1
 8007bea:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8007bec:	4b03      	ldr	r3, [pc, #12]	@ (8007bfc <USER_SPI_initialize+0x1cc>)
 8007bee:	781b      	ldrb	r3, [r3, #0]
 8007bf0:	b2db      	uxtb	r3, r3
}
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	3714      	adds	r7, #20
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	bd90      	pop	{r4, r7, pc}
 8007bfa:	bf00      	nop
 8007bfc:	2000002c 	.word	0x2000002c
 8007c00:	200002cc 	.word	0x200002cc
 8007c04:	2000060c 	.word	0x2000060c

08007c08 <USER_SPI_status>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
<<<<<<< Updated upstream
 80076e8:	b480      	push	{r7}
 80076ea:	b083      	sub	sp, #12
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	4603      	mov	r3, r0
 80076f0:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 80076f2:	79fb      	ldrb	r3, [r7, #7]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d001      	beq.n	80076fc <USER_SPI_status+0x14>
 80076f8:	2301      	movs	r3, #1
 80076fa:	e002      	b.n	8007702 <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 80076fc:	4b04      	ldr	r3, [pc, #16]	@ (8007710 <USER_SPI_status+0x28>)
 80076fe:	781b      	ldrb	r3, [r3, #0]
 8007700:	b2db      	uxtb	r3, r3
}
 8007702:	4618      	mov	r0, r3
 8007704:	370c      	adds	r7, #12
 8007706:	46bd      	mov	sp, r7
 8007708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770c:	4770      	bx	lr
 800770e:	bf00      	nop
 8007710:	2000002c 	.word	0x2000002c

08007714 <USER_SPI_read>:
=======
 8007c08:	b480      	push	{r7}
 8007c0a:	b083      	sub	sp, #12
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	4603      	mov	r3, r0
 8007c10:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 8007c12:	79fb      	ldrb	r3, [r7, #7]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d001      	beq.n	8007c1c <USER_SPI_status+0x14>
 8007c18:	2301      	movs	r3, #1
 8007c1a:	e002      	b.n	8007c22 <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 8007c1c:	4b04      	ldr	r3, [pc, #16]	@ (8007c30 <USER_SPI_status+0x28>)
 8007c1e:	781b      	ldrb	r3, [r3, #0]
 8007c20:	b2db      	uxtb	r3, r3
}
 8007c22:	4618      	mov	r0, r3
 8007c24:	370c      	adds	r7, #12
 8007c26:	46bd      	mov	sp, r7
 8007c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2c:	4770      	bx	lr
 8007c2e:	bf00      	nop
 8007c30:	2000002c 	.word	0x2000002c

08007c34 <USER_SPI_read>:
>>>>>>> Stashed changes
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
<<<<<<< Updated upstream
 8007714:	b580      	push	{r7, lr}
 8007716:	b084      	sub	sp, #16
 8007718:	af00      	add	r7, sp, #0
 800771a:	60b9      	str	r1, [r7, #8]
 800771c:	607a      	str	r2, [r7, #4]
 800771e:	603b      	str	r3, [r7, #0]
 8007720:	4603      	mov	r3, r0
 8007722:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8007724:	7bfb      	ldrb	r3, [r7, #15]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d102      	bne.n	8007730 <USER_SPI_read+0x1c>
 800772a:	683b      	ldr	r3, [r7, #0]
 800772c:	2b00      	cmp	r3, #0
 800772e:	d101      	bne.n	8007734 <USER_SPI_read+0x20>
 8007730:	2304      	movs	r3, #4
 8007732:	e04d      	b.n	80077d0 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8007734:	4b28      	ldr	r3, [pc, #160]	@ (80077d8 <USER_SPI_read+0xc4>)
 8007736:	781b      	ldrb	r3, [r3, #0]
 8007738:	b2db      	uxtb	r3, r3
 800773a:	f003 0301 	and.w	r3, r3, #1
 800773e:	2b00      	cmp	r3, #0
 8007740:	d001      	beq.n	8007746 <USER_SPI_read+0x32>
 8007742:	2303      	movs	r3, #3
 8007744:	e044      	b.n	80077d0 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 8007746:	4b25      	ldr	r3, [pc, #148]	@ (80077dc <USER_SPI_read+0xc8>)
 8007748:	781b      	ldrb	r3, [r3, #0]
 800774a:	f003 0308 	and.w	r3, r3, #8
 800774e:	2b00      	cmp	r3, #0
 8007750:	d102      	bne.n	8007758 <USER_SPI_read+0x44>
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	025b      	lsls	r3, r3, #9
 8007756:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8007758:	683b      	ldr	r3, [r7, #0]
 800775a:	2b01      	cmp	r3, #1
 800775c:	d111      	bne.n	8007782 <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 800775e:	6879      	ldr	r1, [r7, #4]
 8007760:	2011      	movs	r0, #17
 8007762:	f7ff fe66 	bl	8007432 <send_cmd>
 8007766:	4603      	mov	r3, r0
 8007768:	2b00      	cmp	r3, #0
 800776a:	d129      	bne.n	80077c0 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 800776c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8007770:	68b8      	ldr	r0, [r7, #8]
 8007772:	f7ff fe03 	bl	800737c <rcvr_datablock>
 8007776:	4603      	mov	r3, r0
 8007778:	2b00      	cmp	r3, #0
 800777a:	d021      	beq.n	80077c0 <USER_SPI_read+0xac>
			count = 0;
 800777c:	2300      	movs	r3, #0
 800777e:	603b      	str	r3, [r7, #0]
 8007780:	e01e      	b.n	80077c0 <USER_SPI_read+0xac>
=======
 8007c34:	b580      	push	{r7, lr}
 8007c36:	b084      	sub	sp, #16
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	60b9      	str	r1, [r7, #8]
 8007c3c:	607a      	str	r2, [r7, #4]
 8007c3e:	603b      	str	r3, [r7, #0]
 8007c40:	4603      	mov	r3, r0
 8007c42:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8007c44:	7bfb      	ldrb	r3, [r7, #15]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d102      	bne.n	8007c50 <USER_SPI_read+0x1c>
 8007c4a:	683b      	ldr	r3, [r7, #0]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d101      	bne.n	8007c54 <USER_SPI_read+0x20>
 8007c50:	2304      	movs	r3, #4
 8007c52:	e04d      	b.n	8007cf0 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8007c54:	4b28      	ldr	r3, [pc, #160]	@ (8007cf8 <USER_SPI_read+0xc4>)
 8007c56:	781b      	ldrb	r3, [r3, #0]
 8007c58:	b2db      	uxtb	r3, r3
 8007c5a:	f003 0301 	and.w	r3, r3, #1
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d001      	beq.n	8007c66 <USER_SPI_read+0x32>
 8007c62:	2303      	movs	r3, #3
 8007c64:	e044      	b.n	8007cf0 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 8007c66:	4b25      	ldr	r3, [pc, #148]	@ (8007cfc <USER_SPI_read+0xc8>)
 8007c68:	781b      	ldrb	r3, [r3, #0]
 8007c6a:	f003 0308 	and.w	r3, r3, #8
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d102      	bne.n	8007c78 <USER_SPI_read+0x44>
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	025b      	lsls	r3, r3, #9
 8007c76:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8007c78:	683b      	ldr	r3, [r7, #0]
 8007c7a:	2b01      	cmp	r3, #1
 8007c7c:	d111      	bne.n	8007ca2 <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 8007c7e:	6879      	ldr	r1, [r7, #4]
 8007c80:	2011      	movs	r0, #17
 8007c82:	f7ff fe66 	bl	8007952 <send_cmd>
 8007c86:	4603      	mov	r3, r0
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d129      	bne.n	8007ce0 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 8007c8c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8007c90:	68b8      	ldr	r0, [r7, #8]
 8007c92:	f7ff fe03 	bl	800789c <rcvr_datablock>
 8007c96:	4603      	mov	r3, r0
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d021      	beq.n	8007ce0 <USER_SPI_read+0xac>
			count = 0;
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	603b      	str	r3, [r7, #0]
 8007ca0:	e01e      	b.n	8007ce0 <USER_SPI_read+0xac>
>>>>>>> Stashed changes
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
<<<<<<< Updated upstream
 8007782:	6879      	ldr	r1, [r7, #4]
 8007784:	2012      	movs	r0, #18
 8007786:	f7ff fe54 	bl	8007432 <send_cmd>
 800778a:	4603      	mov	r3, r0
 800778c:	2b00      	cmp	r3, #0
 800778e:	d117      	bne.n	80077c0 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8007790:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8007794:	68b8      	ldr	r0, [r7, #8]
 8007796:	f7ff fdf1 	bl	800737c <rcvr_datablock>
 800779a:	4603      	mov	r3, r0
 800779c:	2b00      	cmp	r3, #0
 800779e:	d00a      	beq.n	80077b6 <USER_SPI_read+0xa2>
				buff += 512;
 80077a0:	68bb      	ldr	r3, [r7, #8]
 80077a2:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80077a6:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	3b01      	subs	r3, #1
 80077ac:	603b      	str	r3, [r7, #0]
 80077ae:	683b      	ldr	r3, [r7, #0]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d1ed      	bne.n	8007790 <USER_SPI_read+0x7c>
 80077b4:	e000      	b.n	80077b8 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 80077b6:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 80077b8:	2100      	movs	r1, #0
 80077ba:	200c      	movs	r0, #12
 80077bc:	f7ff fe39 	bl	8007432 <send_cmd>
		}
	}
	despiselect();
 80077c0:	f7ff fdb4 	bl	800732c <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 80077c4:	683b      	ldr	r3, [r7, #0]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	bf14      	ite	ne
 80077ca:	2301      	movne	r3, #1
 80077cc:	2300      	moveq	r3, #0
 80077ce:	b2db      	uxtb	r3, r3
}
 80077d0:	4618      	mov	r0, r3
 80077d2:	3710      	adds	r7, #16
 80077d4:	46bd      	mov	sp, r7
 80077d6:	bd80      	pop	{r7, pc}
 80077d8:	2000002c 	.word	0x2000002c
 80077dc:	20000a28 	.word	0x20000a28

080077e0 <USER_SPI_write>:
=======
 8007ca2:	6879      	ldr	r1, [r7, #4]
 8007ca4:	2012      	movs	r0, #18
 8007ca6:	f7ff fe54 	bl	8007952 <send_cmd>
 8007caa:	4603      	mov	r3, r0
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d117      	bne.n	8007ce0 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8007cb0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8007cb4:	68b8      	ldr	r0, [r7, #8]
 8007cb6:	f7ff fdf1 	bl	800789c <rcvr_datablock>
 8007cba:	4603      	mov	r3, r0
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d00a      	beq.n	8007cd6 <USER_SPI_read+0xa2>
				buff += 512;
 8007cc0:	68bb      	ldr	r3, [r7, #8]
 8007cc2:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8007cc6:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8007cc8:	683b      	ldr	r3, [r7, #0]
 8007cca:	3b01      	subs	r3, #1
 8007ccc:	603b      	str	r3, [r7, #0]
 8007cce:	683b      	ldr	r3, [r7, #0]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d1ed      	bne.n	8007cb0 <USER_SPI_read+0x7c>
 8007cd4:	e000      	b.n	8007cd8 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 8007cd6:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8007cd8:	2100      	movs	r1, #0
 8007cda:	200c      	movs	r0, #12
 8007cdc:	f7ff fe39 	bl	8007952 <send_cmd>
		}
	}
	despiselect();
 8007ce0:	f7ff fdb4 	bl	800784c <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8007ce4:	683b      	ldr	r3, [r7, #0]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	bf14      	ite	ne
 8007cea:	2301      	movne	r3, #1
 8007cec:	2300      	moveq	r3, #0
 8007cee:	b2db      	uxtb	r3, r3
}
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	3710      	adds	r7, #16
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	bd80      	pop	{r7, pc}
 8007cf8:	2000002c 	.word	0x2000002c
 8007cfc:	2000060c 	.word	0x2000060c

08007d00 <USER_SPI_write>:
>>>>>>> Stashed changes
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
<<<<<<< Updated upstream
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b084      	sub	sp, #16
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	60b9      	str	r1, [r7, #8]
 80077e8:	607a      	str	r2, [r7, #4]
 80077ea:	603b      	str	r3, [r7, #0]
 80077ec:	4603      	mov	r3, r0
 80077ee:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 80077f0:	7bfb      	ldrb	r3, [r7, #15]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d102      	bne.n	80077fc <USER_SPI_write+0x1c>
 80077f6:	683b      	ldr	r3, [r7, #0]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d101      	bne.n	8007800 <USER_SPI_write+0x20>
 80077fc:	2304      	movs	r3, #4
 80077fe:	e063      	b.n	80078c8 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8007800:	4b33      	ldr	r3, [pc, #204]	@ (80078d0 <USER_SPI_write+0xf0>)
 8007802:	781b      	ldrb	r3, [r3, #0]
 8007804:	b2db      	uxtb	r3, r3
 8007806:	f003 0301 	and.w	r3, r3, #1
 800780a:	2b00      	cmp	r3, #0
 800780c:	d001      	beq.n	8007812 <USER_SPI_write+0x32>
 800780e:	2303      	movs	r3, #3
 8007810:	e05a      	b.n	80078c8 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8007812:	4b2f      	ldr	r3, [pc, #188]	@ (80078d0 <USER_SPI_write+0xf0>)
 8007814:	781b      	ldrb	r3, [r3, #0]
 8007816:	b2db      	uxtb	r3, r3
 8007818:	f003 0304 	and.w	r3, r3, #4
 800781c:	2b00      	cmp	r3, #0
 800781e:	d001      	beq.n	8007824 <USER_SPI_write+0x44>
 8007820:	2302      	movs	r3, #2
 8007822:	e051      	b.n	80078c8 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8007824:	4b2b      	ldr	r3, [pc, #172]	@ (80078d4 <USER_SPI_write+0xf4>)
 8007826:	781b      	ldrb	r3, [r3, #0]
 8007828:	f003 0308 	and.w	r3, r3, #8
 800782c:	2b00      	cmp	r3, #0
 800782e:	d102      	bne.n	8007836 <USER_SPI_write+0x56>
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	025b      	lsls	r3, r3, #9
 8007834:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 8007836:	683b      	ldr	r3, [r7, #0]
 8007838:	2b01      	cmp	r3, #1
 800783a:	d110      	bne.n	800785e <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 800783c:	6879      	ldr	r1, [r7, #4]
 800783e:	2018      	movs	r0, #24
 8007840:	f7ff fdf7 	bl	8007432 <send_cmd>
 8007844:	4603      	mov	r3, r0
 8007846:	2b00      	cmp	r3, #0
 8007848:	d136      	bne.n	80078b8 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 800784a:	21fe      	movs	r1, #254	@ 0xfe
 800784c:	68b8      	ldr	r0, [r7, #8]
 800784e:	f7ff fdbe 	bl	80073ce <xmit_datablock>
 8007852:	4603      	mov	r3, r0
 8007854:	2b00      	cmp	r3, #0
 8007856:	d02f      	beq.n	80078b8 <USER_SPI_write+0xd8>
			count = 0;
 8007858:	2300      	movs	r3, #0
 800785a:	603b      	str	r3, [r7, #0]
 800785c:	e02c      	b.n	80078b8 <USER_SPI_write+0xd8>
=======
 8007d00:	b580      	push	{r7, lr}
 8007d02:	b084      	sub	sp, #16
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	60b9      	str	r1, [r7, #8]
 8007d08:	607a      	str	r2, [r7, #4]
 8007d0a:	603b      	str	r3, [r7, #0]
 8007d0c:	4603      	mov	r3, r0
 8007d0e:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8007d10:	7bfb      	ldrb	r3, [r7, #15]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d102      	bne.n	8007d1c <USER_SPI_write+0x1c>
 8007d16:	683b      	ldr	r3, [r7, #0]
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d101      	bne.n	8007d20 <USER_SPI_write+0x20>
 8007d1c:	2304      	movs	r3, #4
 8007d1e:	e063      	b.n	8007de8 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8007d20:	4b33      	ldr	r3, [pc, #204]	@ (8007df0 <USER_SPI_write+0xf0>)
 8007d22:	781b      	ldrb	r3, [r3, #0]
 8007d24:	b2db      	uxtb	r3, r3
 8007d26:	f003 0301 	and.w	r3, r3, #1
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d001      	beq.n	8007d32 <USER_SPI_write+0x32>
 8007d2e:	2303      	movs	r3, #3
 8007d30:	e05a      	b.n	8007de8 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8007d32:	4b2f      	ldr	r3, [pc, #188]	@ (8007df0 <USER_SPI_write+0xf0>)
 8007d34:	781b      	ldrb	r3, [r3, #0]
 8007d36:	b2db      	uxtb	r3, r3
 8007d38:	f003 0304 	and.w	r3, r3, #4
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d001      	beq.n	8007d44 <USER_SPI_write+0x44>
 8007d40:	2302      	movs	r3, #2
 8007d42:	e051      	b.n	8007de8 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8007d44:	4b2b      	ldr	r3, [pc, #172]	@ (8007df4 <USER_SPI_write+0xf4>)
 8007d46:	781b      	ldrb	r3, [r3, #0]
 8007d48:	f003 0308 	and.w	r3, r3, #8
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d102      	bne.n	8007d56 <USER_SPI_write+0x56>
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	025b      	lsls	r3, r3, #9
 8007d54:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 8007d56:	683b      	ldr	r3, [r7, #0]
 8007d58:	2b01      	cmp	r3, #1
 8007d5a:	d110      	bne.n	8007d7e <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8007d5c:	6879      	ldr	r1, [r7, #4]
 8007d5e:	2018      	movs	r0, #24
 8007d60:	f7ff fdf7 	bl	8007952 <send_cmd>
 8007d64:	4603      	mov	r3, r0
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d136      	bne.n	8007dd8 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 8007d6a:	21fe      	movs	r1, #254	@ 0xfe
 8007d6c:	68b8      	ldr	r0, [r7, #8]
 8007d6e:	f7ff fdbe 	bl	80078ee <xmit_datablock>
 8007d72:	4603      	mov	r3, r0
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d02f      	beq.n	8007dd8 <USER_SPI_write+0xd8>
			count = 0;
 8007d78:	2300      	movs	r3, #0
 8007d7a:	603b      	str	r3, [r7, #0]
 8007d7c:	e02c      	b.n	8007dd8 <USER_SPI_write+0xd8>
>>>>>>> Stashed changes
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
<<<<<<< Updated upstream
 800785e:	4b1d      	ldr	r3, [pc, #116]	@ (80078d4 <USER_SPI_write+0xf4>)
 8007860:	781b      	ldrb	r3, [r3, #0]
 8007862:	f003 0306 	and.w	r3, r3, #6
 8007866:	2b00      	cmp	r3, #0
 8007868:	d003      	beq.n	8007872 <USER_SPI_write+0x92>
 800786a:	6839      	ldr	r1, [r7, #0]
 800786c:	2097      	movs	r0, #151	@ 0x97
 800786e:	f7ff fde0 	bl	8007432 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8007872:	6879      	ldr	r1, [r7, #4]
 8007874:	2019      	movs	r0, #25
 8007876:	f7ff fddc 	bl	8007432 <send_cmd>
 800787a:	4603      	mov	r3, r0
 800787c:	2b00      	cmp	r3, #0
 800787e:	d11b      	bne.n	80078b8 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8007880:	21fc      	movs	r1, #252	@ 0xfc
 8007882:	68b8      	ldr	r0, [r7, #8]
 8007884:	f7ff fda3 	bl	80073ce <xmit_datablock>
 8007888:	4603      	mov	r3, r0
 800788a:	2b00      	cmp	r3, #0
 800788c:	d00a      	beq.n	80078a4 <USER_SPI_write+0xc4>
				buff += 512;
 800788e:	68bb      	ldr	r3, [r7, #8]
 8007890:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8007894:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8007896:	683b      	ldr	r3, [r7, #0]
 8007898:	3b01      	subs	r3, #1
 800789a:	603b      	str	r3, [r7, #0]
 800789c:	683b      	ldr	r3, [r7, #0]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d1ee      	bne.n	8007880 <USER_SPI_write+0xa0>
 80078a2:	e000      	b.n	80078a6 <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 80078a4:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 80078a6:	21fd      	movs	r1, #253	@ 0xfd
 80078a8:	2000      	movs	r0, #0
 80078aa:	f7ff fd90 	bl	80073ce <xmit_datablock>
 80078ae:	4603      	mov	r3, r0
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d101      	bne.n	80078b8 <USER_SPI_write+0xd8>
 80078b4:	2301      	movs	r3, #1
 80078b6:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 80078b8:	f7ff fd38 	bl	800732c <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 80078bc:	683b      	ldr	r3, [r7, #0]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	bf14      	ite	ne
 80078c2:	2301      	movne	r3, #1
 80078c4:	2300      	moveq	r3, #0
 80078c6:	b2db      	uxtb	r3, r3
}
 80078c8:	4618      	mov	r0, r3
 80078ca:	3710      	adds	r7, #16
 80078cc:	46bd      	mov	sp, r7
 80078ce:	bd80      	pop	{r7, pc}
 80078d0:	2000002c 	.word	0x2000002c
 80078d4:	20000a28 	.word	0x20000a28

080078d8 <USER_SPI_ioctl>:
=======
 8007d7e:	4b1d      	ldr	r3, [pc, #116]	@ (8007df4 <USER_SPI_write+0xf4>)
 8007d80:	781b      	ldrb	r3, [r3, #0]
 8007d82:	f003 0306 	and.w	r3, r3, #6
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d003      	beq.n	8007d92 <USER_SPI_write+0x92>
 8007d8a:	6839      	ldr	r1, [r7, #0]
 8007d8c:	2097      	movs	r0, #151	@ 0x97
 8007d8e:	f7ff fde0 	bl	8007952 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8007d92:	6879      	ldr	r1, [r7, #4]
 8007d94:	2019      	movs	r0, #25
 8007d96:	f7ff fddc 	bl	8007952 <send_cmd>
 8007d9a:	4603      	mov	r3, r0
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d11b      	bne.n	8007dd8 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8007da0:	21fc      	movs	r1, #252	@ 0xfc
 8007da2:	68b8      	ldr	r0, [r7, #8]
 8007da4:	f7ff fda3 	bl	80078ee <xmit_datablock>
 8007da8:	4603      	mov	r3, r0
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d00a      	beq.n	8007dc4 <USER_SPI_write+0xc4>
				buff += 512;
 8007dae:	68bb      	ldr	r3, [r7, #8]
 8007db0:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8007db4:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8007db6:	683b      	ldr	r3, [r7, #0]
 8007db8:	3b01      	subs	r3, #1
 8007dba:	603b      	str	r3, [r7, #0]
 8007dbc:	683b      	ldr	r3, [r7, #0]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d1ee      	bne.n	8007da0 <USER_SPI_write+0xa0>
 8007dc2:	e000      	b.n	8007dc6 <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 8007dc4:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 8007dc6:	21fd      	movs	r1, #253	@ 0xfd
 8007dc8:	2000      	movs	r0, #0
 8007dca:	f7ff fd90 	bl	80078ee <xmit_datablock>
 8007dce:	4603      	mov	r3, r0
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d101      	bne.n	8007dd8 <USER_SPI_write+0xd8>
 8007dd4:	2301      	movs	r3, #1
 8007dd6:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8007dd8:	f7ff fd38 	bl	800784c <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8007ddc:	683b      	ldr	r3, [r7, #0]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	bf14      	ite	ne
 8007de2:	2301      	movne	r3, #1
 8007de4:	2300      	moveq	r3, #0
 8007de6:	b2db      	uxtb	r3, r3
}
 8007de8:	4618      	mov	r0, r3
 8007dea:	3710      	adds	r7, #16
 8007dec:	46bd      	mov	sp, r7
 8007dee:	bd80      	pop	{r7, pc}
 8007df0:	2000002c 	.word	0x2000002c
 8007df4:	2000060c 	.word	0x2000060c

08007df8 <USER_SPI_ioctl>:
>>>>>>> Stashed changes
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
<<<<<<< Updated upstream
 80078d8:	b580      	push	{r7, lr}
 80078da:	b08c      	sub	sp, #48	@ 0x30
 80078dc:	af00      	add	r7, sp, #0
 80078de:	4603      	mov	r3, r0
 80078e0:	603a      	str	r2, [r7, #0]
 80078e2:	71fb      	strb	r3, [r7, #7]
 80078e4:	460b      	mov	r3, r1
 80078e6:	71bb      	strb	r3, [r7, #6]
=======
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b08c      	sub	sp, #48	@ 0x30
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	4603      	mov	r3, r0
 8007e00:	603a      	str	r2, [r7, #0]
 8007e02:	71fb      	strb	r3, [r7, #7]
 8007e04:	460b      	mov	r3, r1
 8007e06:	71bb      	strb	r3, [r7, #6]
>>>>>>> Stashed changes
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
<<<<<<< Updated upstream
 80078e8:	79fb      	ldrb	r3, [r7, #7]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d001      	beq.n	80078f2 <USER_SPI_ioctl+0x1a>
 80078ee:	2304      	movs	r3, #4
 80078f0:	e15a      	b.n	8007ba8 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 80078f2:	4baf      	ldr	r3, [pc, #700]	@ (8007bb0 <USER_SPI_ioctl+0x2d8>)
 80078f4:	781b      	ldrb	r3, [r3, #0]
 80078f6:	b2db      	uxtb	r3, r3
 80078f8:	f003 0301 	and.w	r3, r3, #1
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d001      	beq.n	8007904 <USER_SPI_ioctl+0x2c>
 8007900:	2303      	movs	r3, #3
 8007902:	e151      	b.n	8007ba8 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 8007904:	2301      	movs	r3, #1
 8007906:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	switch (cmd) {
 800790a:	79bb      	ldrb	r3, [r7, #6]
 800790c:	2b04      	cmp	r3, #4
 800790e:	f200 8136 	bhi.w	8007b7e <USER_SPI_ioctl+0x2a6>
 8007912:	a201      	add	r2, pc, #4	@ (adr r2, 8007918 <USER_SPI_ioctl+0x40>)
 8007914:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007918:	0800792d 	.word	0x0800792d
 800791c:	08007941 	.word	0x08007941
 8007920:	08007b7f 	.word	0x08007b7f
 8007924:	080079ed 	.word	0x080079ed
 8007928:	08007ae3 	.word	0x08007ae3
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 800792c:	f7ff fd0c 	bl	8007348 <spiselect>
 8007930:	4603      	mov	r3, r0
 8007932:	2b00      	cmp	r3, #0
 8007934:	f000 8127 	beq.w	8007b86 <USER_SPI_ioctl+0x2ae>
 8007938:	2300      	movs	r3, #0
 800793a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 800793e:	e122      	b.n	8007b86 <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8007940:	2100      	movs	r1, #0
 8007942:	2009      	movs	r0, #9
 8007944:	f7ff fd75 	bl	8007432 <send_cmd>
 8007948:	4603      	mov	r3, r0
 800794a:	2b00      	cmp	r3, #0
 800794c:	f040 811d 	bne.w	8007b8a <USER_SPI_ioctl+0x2b2>
 8007950:	f107 030c 	add.w	r3, r7, #12
 8007954:	2110      	movs	r1, #16
 8007956:	4618      	mov	r0, r3
 8007958:	f7ff fd10 	bl	800737c <rcvr_datablock>
 800795c:	4603      	mov	r3, r0
 800795e:	2b00      	cmp	r3, #0
 8007960:	f000 8113 	beq.w	8007b8a <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8007964:	7b3b      	ldrb	r3, [r7, #12]
 8007966:	099b      	lsrs	r3, r3, #6
 8007968:	b2db      	uxtb	r3, r3
 800796a:	2b01      	cmp	r3, #1
 800796c:	d111      	bne.n	8007992 <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 800796e:	7d7b      	ldrb	r3, [r7, #21]
 8007970:	461a      	mov	r2, r3
 8007972:	7d3b      	ldrb	r3, [r7, #20]
 8007974:	021b      	lsls	r3, r3, #8
 8007976:	4413      	add	r3, r2
 8007978:	461a      	mov	r2, r3
 800797a:	7cfb      	ldrb	r3, [r7, #19]
 800797c:	041b      	lsls	r3, r3, #16
 800797e:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
 8007982:	4413      	add	r3, r2
 8007984:	3301      	adds	r3, #1
 8007986:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8007988:	69fb      	ldr	r3, [r7, #28]
 800798a:	029a      	lsls	r2, r3, #10
 800798c:	683b      	ldr	r3, [r7, #0]
 800798e:	601a      	str	r2, [r3, #0]
 8007990:	e028      	b.n	80079e4 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8007992:	7c7b      	ldrb	r3, [r7, #17]
 8007994:	f003 030f 	and.w	r3, r3, #15
 8007998:	b2da      	uxtb	r2, r3
 800799a:	7dbb      	ldrb	r3, [r7, #22]
 800799c:	09db      	lsrs	r3, r3, #7
 800799e:	b2db      	uxtb	r3, r3
 80079a0:	4413      	add	r3, r2
 80079a2:	b2da      	uxtb	r2, r3
 80079a4:	7d7b      	ldrb	r3, [r7, #21]
 80079a6:	005b      	lsls	r3, r3, #1
 80079a8:	b2db      	uxtb	r3, r3
 80079aa:	f003 0306 	and.w	r3, r3, #6
 80079ae:	b2db      	uxtb	r3, r3
 80079b0:	4413      	add	r3, r2
 80079b2:	b2db      	uxtb	r3, r3
 80079b4:	3302      	adds	r3, #2
 80079b6:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 80079ba:	7d3b      	ldrb	r3, [r7, #20]
 80079bc:	099b      	lsrs	r3, r3, #6
 80079be:	b2db      	uxtb	r3, r3
 80079c0:	461a      	mov	r2, r3
 80079c2:	7cfb      	ldrb	r3, [r7, #19]
 80079c4:	009b      	lsls	r3, r3, #2
 80079c6:	441a      	add	r2, r3
 80079c8:	7cbb      	ldrb	r3, [r7, #18]
 80079ca:	029b      	lsls	r3, r3, #10
 80079cc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80079d0:	4413      	add	r3, r2
 80079d2:	3301      	adds	r3, #1
 80079d4:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 80079d6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80079da:	3b09      	subs	r3, #9
 80079dc:	69fa      	ldr	r2, [r7, #28]
 80079de:	409a      	lsls	r2, r3
 80079e0:	683b      	ldr	r3, [r7, #0]
 80079e2:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 80079e4:	2300      	movs	r3, #0
 80079e6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 80079ea:	e0ce      	b.n	8007b8a <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 80079ec:	4b71      	ldr	r3, [pc, #452]	@ (8007bb4 <USER_SPI_ioctl+0x2dc>)
 80079ee:	781b      	ldrb	r3, [r3, #0]
 80079f0:	f003 0304 	and.w	r3, r3, #4
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d031      	beq.n	8007a5c <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 80079f8:	2100      	movs	r1, #0
 80079fa:	208d      	movs	r0, #141	@ 0x8d
 80079fc:	f7ff fd19 	bl	8007432 <send_cmd>
 8007a00:	4603      	mov	r3, r0
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	f040 80c3 	bne.w	8007b8e <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 8007a08:	20ff      	movs	r0, #255	@ 0xff
 8007a0a:	f7ff fc25 	bl	8007258 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8007a0e:	f107 030c 	add.w	r3, r7, #12
 8007a12:	2110      	movs	r1, #16
 8007a14:	4618      	mov	r0, r3
 8007a16:	f7ff fcb1 	bl	800737c <rcvr_datablock>
 8007a1a:	4603      	mov	r3, r0
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	f000 80b6 	beq.w	8007b8e <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 8007a22:	2330      	movs	r3, #48	@ 0x30
 8007a24:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8007a28:	e007      	b.n	8007a3a <USER_SPI_ioctl+0x162>
 8007a2a:	20ff      	movs	r0, #255	@ 0xff
 8007a2c:	f7ff fc14 	bl	8007258 <xchg_spi>
 8007a30:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007a34:	3b01      	subs	r3, #1
 8007a36:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8007a3a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d1f3      	bne.n	8007a2a <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8007a42:	7dbb      	ldrb	r3, [r7, #22]
 8007a44:	091b      	lsrs	r3, r3, #4
 8007a46:	b2db      	uxtb	r3, r3
 8007a48:	461a      	mov	r2, r3
 8007a4a:	2310      	movs	r3, #16
 8007a4c:	fa03 f202 	lsl.w	r2, r3, r2
 8007a50:	683b      	ldr	r3, [r7, #0]
 8007a52:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8007a54:	2300      	movs	r3, #0
 8007a56:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
=======
 8007e08:	79fb      	ldrb	r3, [r7, #7]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d001      	beq.n	8007e12 <USER_SPI_ioctl+0x1a>
 8007e0e:	2304      	movs	r3, #4
 8007e10:	e15a      	b.n	80080c8 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8007e12:	4baf      	ldr	r3, [pc, #700]	@ (80080d0 <USER_SPI_ioctl+0x2d8>)
 8007e14:	781b      	ldrb	r3, [r3, #0]
 8007e16:	b2db      	uxtb	r3, r3
 8007e18:	f003 0301 	and.w	r3, r3, #1
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d001      	beq.n	8007e24 <USER_SPI_ioctl+0x2c>
 8007e20:	2303      	movs	r3, #3
 8007e22:	e151      	b.n	80080c8 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 8007e24:	2301      	movs	r3, #1
 8007e26:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	switch (cmd) {
 8007e2a:	79bb      	ldrb	r3, [r7, #6]
 8007e2c:	2b04      	cmp	r3, #4
 8007e2e:	f200 8136 	bhi.w	800809e <USER_SPI_ioctl+0x2a6>
 8007e32:	a201      	add	r2, pc, #4	@ (adr r2, 8007e38 <USER_SPI_ioctl+0x40>)
 8007e34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e38:	08007e4d 	.word	0x08007e4d
 8007e3c:	08007e61 	.word	0x08007e61
 8007e40:	0800809f 	.word	0x0800809f
 8007e44:	08007f0d 	.word	0x08007f0d
 8007e48:	08008003 	.word	0x08008003
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8007e4c:	f7ff fd0c 	bl	8007868 <spiselect>
 8007e50:	4603      	mov	r3, r0
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	f000 8127 	beq.w	80080a6 <USER_SPI_ioctl+0x2ae>
 8007e58:	2300      	movs	r3, #0
 8007e5a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 8007e5e:	e122      	b.n	80080a6 <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8007e60:	2100      	movs	r1, #0
 8007e62:	2009      	movs	r0, #9
 8007e64:	f7ff fd75 	bl	8007952 <send_cmd>
 8007e68:	4603      	mov	r3, r0
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	f040 811d 	bne.w	80080aa <USER_SPI_ioctl+0x2b2>
 8007e70:	f107 030c 	add.w	r3, r7, #12
 8007e74:	2110      	movs	r1, #16
 8007e76:	4618      	mov	r0, r3
 8007e78:	f7ff fd10 	bl	800789c <rcvr_datablock>
 8007e7c:	4603      	mov	r3, r0
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	f000 8113 	beq.w	80080aa <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8007e84:	7b3b      	ldrb	r3, [r7, #12]
 8007e86:	099b      	lsrs	r3, r3, #6
 8007e88:	b2db      	uxtb	r3, r3
 8007e8a:	2b01      	cmp	r3, #1
 8007e8c:	d111      	bne.n	8007eb2 <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 8007e8e:	7d7b      	ldrb	r3, [r7, #21]
 8007e90:	461a      	mov	r2, r3
 8007e92:	7d3b      	ldrb	r3, [r7, #20]
 8007e94:	021b      	lsls	r3, r3, #8
 8007e96:	4413      	add	r3, r2
 8007e98:	461a      	mov	r2, r3
 8007e9a:	7cfb      	ldrb	r3, [r7, #19]
 8007e9c:	041b      	lsls	r3, r3, #16
 8007e9e:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
 8007ea2:	4413      	add	r3, r2
 8007ea4:	3301      	adds	r3, #1
 8007ea6:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8007ea8:	69fb      	ldr	r3, [r7, #28]
 8007eaa:	029a      	lsls	r2, r3, #10
 8007eac:	683b      	ldr	r3, [r7, #0]
 8007eae:	601a      	str	r2, [r3, #0]
 8007eb0:	e028      	b.n	8007f04 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8007eb2:	7c7b      	ldrb	r3, [r7, #17]
 8007eb4:	f003 030f 	and.w	r3, r3, #15
 8007eb8:	b2da      	uxtb	r2, r3
 8007eba:	7dbb      	ldrb	r3, [r7, #22]
 8007ebc:	09db      	lsrs	r3, r3, #7
 8007ebe:	b2db      	uxtb	r3, r3
 8007ec0:	4413      	add	r3, r2
 8007ec2:	b2da      	uxtb	r2, r3
 8007ec4:	7d7b      	ldrb	r3, [r7, #21]
 8007ec6:	005b      	lsls	r3, r3, #1
 8007ec8:	b2db      	uxtb	r3, r3
 8007eca:	f003 0306 	and.w	r3, r3, #6
 8007ece:	b2db      	uxtb	r3, r3
 8007ed0:	4413      	add	r3, r2
 8007ed2:	b2db      	uxtb	r3, r3
 8007ed4:	3302      	adds	r3, #2
 8007ed6:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8007eda:	7d3b      	ldrb	r3, [r7, #20]
 8007edc:	099b      	lsrs	r3, r3, #6
 8007ede:	b2db      	uxtb	r3, r3
 8007ee0:	461a      	mov	r2, r3
 8007ee2:	7cfb      	ldrb	r3, [r7, #19]
 8007ee4:	009b      	lsls	r3, r3, #2
 8007ee6:	441a      	add	r2, r3
 8007ee8:	7cbb      	ldrb	r3, [r7, #18]
 8007eea:	029b      	lsls	r3, r3, #10
 8007eec:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007ef0:	4413      	add	r3, r2
 8007ef2:	3301      	adds	r3, #1
 8007ef4:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 8007ef6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007efa:	3b09      	subs	r3, #9
 8007efc:	69fa      	ldr	r2, [r7, #28]
 8007efe:	409a      	lsls	r2, r3
 8007f00:	683b      	ldr	r3, [r7, #0]
 8007f02:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8007f04:	2300      	movs	r3, #0
 8007f06:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 8007f0a:	e0ce      	b.n	80080aa <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8007f0c:	4b71      	ldr	r3, [pc, #452]	@ (80080d4 <USER_SPI_ioctl+0x2dc>)
 8007f0e:	781b      	ldrb	r3, [r3, #0]
 8007f10:	f003 0304 	and.w	r3, r3, #4
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d031      	beq.n	8007f7c <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8007f18:	2100      	movs	r1, #0
 8007f1a:	208d      	movs	r0, #141	@ 0x8d
 8007f1c:	f7ff fd19 	bl	8007952 <send_cmd>
 8007f20:	4603      	mov	r3, r0
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	f040 80c3 	bne.w	80080ae <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 8007f28:	20ff      	movs	r0, #255	@ 0xff
 8007f2a:	f7ff fc25 	bl	8007778 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8007f2e:	f107 030c 	add.w	r3, r7, #12
 8007f32:	2110      	movs	r1, #16
 8007f34:	4618      	mov	r0, r3
 8007f36:	f7ff fcb1 	bl	800789c <rcvr_datablock>
 8007f3a:	4603      	mov	r3, r0
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	f000 80b6 	beq.w	80080ae <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 8007f42:	2330      	movs	r3, #48	@ 0x30
 8007f44:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8007f48:	e007      	b.n	8007f5a <USER_SPI_ioctl+0x162>
 8007f4a:	20ff      	movs	r0, #255	@ 0xff
 8007f4c:	f7ff fc14 	bl	8007778 <xchg_spi>
 8007f50:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007f54:	3b01      	subs	r3, #1
 8007f56:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8007f5a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d1f3      	bne.n	8007f4a <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8007f62:	7dbb      	ldrb	r3, [r7, #22]
 8007f64:	091b      	lsrs	r3, r3, #4
 8007f66:	b2db      	uxtb	r3, r3
 8007f68:	461a      	mov	r2, r3
 8007f6a:	2310      	movs	r3, #16
 8007f6c:	fa03 f202 	lsl.w	r2, r3, r2
 8007f70:	683b      	ldr	r3, [r7, #0]
 8007f72:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8007f74:	2300      	movs	r3, #0
 8007f76:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
>>>>>>> Stashed changes
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
<<<<<<< Updated upstream
 8007a5a:	e098      	b.n	8007b8e <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8007a5c:	2100      	movs	r1, #0
 8007a5e:	2009      	movs	r0, #9
 8007a60:	f7ff fce7 	bl	8007432 <send_cmd>
 8007a64:	4603      	mov	r3, r0
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	f040 8091 	bne.w	8007b8e <USER_SPI_ioctl+0x2b6>
 8007a6c:	f107 030c 	add.w	r3, r7, #12
 8007a70:	2110      	movs	r1, #16
 8007a72:	4618      	mov	r0, r3
 8007a74:	f7ff fc82 	bl	800737c <rcvr_datablock>
 8007a78:	4603      	mov	r3, r0
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	f000 8087 	beq.w	8007b8e <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8007a80:	4b4c      	ldr	r3, [pc, #304]	@ (8007bb4 <USER_SPI_ioctl+0x2dc>)
 8007a82:	781b      	ldrb	r3, [r3, #0]
 8007a84:	f003 0302 	and.w	r3, r3, #2
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d012      	beq.n	8007ab2 <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8007a8c:	7dbb      	ldrb	r3, [r7, #22]
 8007a8e:	005b      	lsls	r3, r3, #1
 8007a90:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 8007a94:	7dfa      	ldrb	r2, [r7, #23]
 8007a96:	09d2      	lsrs	r2, r2, #7
 8007a98:	b2d2      	uxtb	r2, r2
 8007a9a:	4413      	add	r3, r2
 8007a9c:	1c5a      	adds	r2, r3, #1
 8007a9e:	7e7b      	ldrb	r3, [r7, #25]
 8007aa0:	099b      	lsrs	r3, r3, #6
 8007aa2:	b2db      	uxtb	r3, r3
 8007aa4:	3b01      	subs	r3, #1
 8007aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8007aaa:	461a      	mov	r2, r3
 8007aac:	683b      	ldr	r3, [r7, #0]
 8007aae:	601a      	str	r2, [r3, #0]
 8007ab0:	e013      	b.n	8007ada <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8007ab2:	7dbb      	ldrb	r3, [r7, #22]
 8007ab4:	109b      	asrs	r3, r3, #2
 8007ab6:	b29b      	uxth	r3, r3
 8007ab8:	f003 031f 	and.w	r3, r3, #31
 8007abc:	3301      	adds	r3, #1
 8007abe:	7dfa      	ldrb	r2, [r7, #23]
 8007ac0:	00d2      	lsls	r2, r2, #3
 8007ac2:	f002 0218 	and.w	r2, r2, #24
 8007ac6:	7df9      	ldrb	r1, [r7, #23]
 8007ac8:	0949      	lsrs	r1, r1, #5
 8007aca:	b2c9      	uxtb	r1, r1
 8007acc:	440a      	add	r2, r1
 8007ace:	3201      	adds	r2, #1
 8007ad0:	fb02 f303 	mul.w	r3, r2, r3
 8007ad4:	461a      	mov	r2, r3
 8007ad6:	683b      	ldr	r3, [r7, #0]
 8007ad8:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 8007ada:	2300      	movs	r3, #0
 8007adc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 8007ae0:	e055      	b.n	8007b8e <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8007ae2:	4b34      	ldr	r3, [pc, #208]	@ (8007bb4 <USER_SPI_ioctl+0x2dc>)
 8007ae4:	781b      	ldrb	r3, [r3, #0]
 8007ae6:	f003 0306 	and.w	r3, r3, #6
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d051      	beq.n	8007b92 <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8007aee:	f107 020c 	add.w	r2, r7, #12
 8007af2:	79fb      	ldrb	r3, [r7, #7]
 8007af4:	210b      	movs	r1, #11
 8007af6:	4618      	mov	r0, r3
 8007af8:	f7ff feee 	bl	80078d8 <USER_SPI_ioctl>
 8007afc:	4603      	mov	r3, r0
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d149      	bne.n	8007b96 <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8007b02:	7b3b      	ldrb	r3, [r7, #12]
 8007b04:	099b      	lsrs	r3, r3, #6
 8007b06:	b2db      	uxtb	r3, r3
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d104      	bne.n	8007b16 <USER_SPI_ioctl+0x23e>
 8007b0c:	7dbb      	ldrb	r3, [r7, #22]
 8007b0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d041      	beq.n	8007b9a <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8007b16:	683b      	ldr	r3, [r7, #0]
 8007b18:	623b      	str	r3, [r7, #32]
 8007b1a:	6a3b      	ldr	r3, [r7, #32]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007b20:	6a3b      	ldr	r3, [r7, #32]
 8007b22:	685b      	ldr	r3, [r3, #4]
 8007b24:	627b      	str	r3, [r7, #36]	@ 0x24
		if (!(CardType & CT_BLOCK)) {
 8007b26:	4b23      	ldr	r3, [pc, #140]	@ (8007bb4 <USER_SPI_ioctl+0x2dc>)
 8007b28:	781b      	ldrb	r3, [r3, #0]
 8007b2a:	f003 0308 	and.w	r3, r3, #8
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d105      	bne.n	8007b3e <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 8007b32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b34:	025b      	lsls	r3, r3, #9
 8007b36:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007b38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b3a:	025b      	lsls	r3, r3, #9
 8007b3c:	627b      	str	r3, [r7, #36]	@ 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8007b3e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007b40:	2020      	movs	r0, #32
 8007b42:	f7ff fc76 	bl	8007432 <send_cmd>
 8007b46:	4603      	mov	r3, r0
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d128      	bne.n	8007b9e <USER_SPI_ioctl+0x2c6>
 8007b4c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007b4e:	2021      	movs	r0, #33	@ 0x21
 8007b50:	f7ff fc6f 	bl	8007432 <send_cmd>
 8007b54:	4603      	mov	r3, r0
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d121      	bne.n	8007b9e <USER_SPI_ioctl+0x2c6>
 8007b5a:	2100      	movs	r1, #0
 8007b5c:	2026      	movs	r0, #38	@ 0x26
 8007b5e:	f7ff fc68 	bl	8007432 <send_cmd>
 8007b62:	4603      	mov	r3, r0
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d11a      	bne.n	8007b9e <USER_SPI_ioctl+0x2c6>
 8007b68:	f247 5030 	movw	r0, #30000	@ 0x7530
 8007b6c:	f7ff fbba 	bl	80072e4 <wait_ready>
 8007b70:	4603      	mov	r3, r0
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d013      	beq.n	8007b9e <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 8007b76:	2300      	movs	r3, #0
 8007b78:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 8007b7c:	e00f      	b.n	8007b9e <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 8007b7e:	2304      	movs	r3, #4
 8007b80:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8007b84:	e00c      	b.n	8007ba0 <USER_SPI_ioctl+0x2c8>
		break;
 8007b86:	bf00      	nop
 8007b88:	e00a      	b.n	8007ba0 <USER_SPI_ioctl+0x2c8>
		break;
 8007b8a:	bf00      	nop
 8007b8c:	e008      	b.n	8007ba0 <USER_SPI_ioctl+0x2c8>
		break;
 8007b8e:	bf00      	nop
 8007b90:	e006      	b.n	8007ba0 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8007b92:	bf00      	nop
 8007b94:	e004      	b.n	8007ba0 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8007b96:	bf00      	nop
 8007b98:	e002      	b.n	8007ba0 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8007b9a:	bf00      	nop
 8007b9c:	e000      	b.n	8007ba0 <USER_SPI_ioctl+0x2c8>
		break;
 8007b9e:	bf00      	nop
	}

	despiselect();
 8007ba0:	f7ff fbc4 	bl	800732c <despiselect>

	return res;
 8007ba4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8007ba8:	4618      	mov	r0, r3
 8007baa:	3730      	adds	r7, #48	@ 0x30
 8007bac:	46bd      	mov	sp, r7
 8007bae:	bd80      	pop	{r7, pc}
 8007bb0:	2000002c 	.word	0x2000002c
 8007bb4:	20000a28 	.word	0x20000a28

08007bb8 <disk_status>:
=======
 8007f7a:	e098      	b.n	80080ae <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8007f7c:	2100      	movs	r1, #0
 8007f7e:	2009      	movs	r0, #9
 8007f80:	f7ff fce7 	bl	8007952 <send_cmd>
 8007f84:	4603      	mov	r3, r0
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	f040 8091 	bne.w	80080ae <USER_SPI_ioctl+0x2b6>
 8007f8c:	f107 030c 	add.w	r3, r7, #12
 8007f90:	2110      	movs	r1, #16
 8007f92:	4618      	mov	r0, r3
 8007f94:	f7ff fc82 	bl	800789c <rcvr_datablock>
 8007f98:	4603      	mov	r3, r0
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	f000 8087 	beq.w	80080ae <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8007fa0:	4b4c      	ldr	r3, [pc, #304]	@ (80080d4 <USER_SPI_ioctl+0x2dc>)
 8007fa2:	781b      	ldrb	r3, [r3, #0]
 8007fa4:	f003 0302 	and.w	r3, r3, #2
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d012      	beq.n	8007fd2 <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8007fac:	7dbb      	ldrb	r3, [r7, #22]
 8007fae:	005b      	lsls	r3, r3, #1
 8007fb0:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 8007fb4:	7dfa      	ldrb	r2, [r7, #23]
 8007fb6:	09d2      	lsrs	r2, r2, #7
 8007fb8:	b2d2      	uxtb	r2, r2
 8007fba:	4413      	add	r3, r2
 8007fbc:	1c5a      	adds	r2, r3, #1
 8007fbe:	7e7b      	ldrb	r3, [r7, #25]
 8007fc0:	099b      	lsrs	r3, r3, #6
 8007fc2:	b2db      	uxtb	r3, r3
 8007fc4:	3b01      	subs	r3, #1
 8007fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8007fca:	461a      	mov	r2, r3
 8007fcc:	683b      	ldr	r3, [r7, #0]
 8007fce:	601a      	str	r2, [r3, #0]
 8007fd0:	e013      	b.n	8007ffa <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8007fd2:	7dbb      	ldrb	r3, [r7, #22]
 8007fd4:	109b      	asrs	r3, r3, #2
 8007fd6:	b29b      	uxth	r3, r3
 8007fd8:	f003 031f 	and.w	r3, r3, #31
 8007fdc:	3301      	adds	r3, #1
 8007fde:	7dfa      	ldrb	r2, [r7, #23]
 8007fe0:	00d2      	lsls	r2, r2, #3
 8007fe2:	f002 0218 	and.w	r2, r2, #24
 8007fe6:	7df9      	ldrb	r1, [r7, #23]
 8007fe8:	0949      	lsrs	r1, r1, #5
 8007fea:	b2c9      	uxtb	r1, r1
 8007fec:	440a      	add	r2, r1
 8007fee:	3201      	adds	r2, #1
 8007ff0:	fb02 f303 	mul.w	r3, r2, r3
 8007ff4:	461a      	mov	r2, r3
 8007ff6:	683b      	ldr	r3, [r7, #0]
 8007ff8:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 8008000:	e055      	b.n	80080ae <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8008002:	4b34      	ldr	r3, [pc, #208]	@ (80080d4 <USER_SPI_ioctl+0x2dc>)
 8008004:	781b      	ldrb	r3, [r3, #0]
 8008006:	f003 0306 	and.w	r3, r3, #6
 800800a:	2b00      	cmp	r3, #0
 800800c:	d051      	beq.n	80080b2 <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800800e:	f107 020c 	add.w	r2, r7, #12
 8008012:	79fb      	ldrb	r3, [r7, #7]
 8008014:	210b      	movs	r1, #11
 8008016:	4618      	mov	r0, r3
 8008018:	f7ff feee 	bl	8007df8 <USER_SPI_ioctl>
 800801c:	4603      	mov	r3, r0
 800801e:	2b00      	cmp	r3, #0
 8008020:	d149      	bne.n	80080b6 <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8008022:	7b3b      	ldrb	r3, [r7, #12]
 8008024:	099b      	lsrs	r3, r3, #6
 8008026:	b2db      	uxtb	r3, r3
 8008028:	2b00      	cmp	r3, #0
 800802a:	d104      	bne.n	8008036 <USER_SPI_ioctl+0x23e>
 800802c:	7dbb      	ldrb	r3, [r7, #22]
 800802e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008032:	2b00      	cmp	r3, #0
 8008034:	d041      	beq.n	80080ba <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8008036:	683b      	ldr	r3, [r7, #0]
 8008038:	623b      	str	r3, [r7, #32]
 800803a:	6a3b      	ldr	r3, [r7, #32]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008040:	6a3b      	ldr	r3, [r7, #32]
 8008042:	685b      	ldr	r3, [r3, #4]
 8008044:	627b      	str	r3, [r7, #36]	@ 0x24
		if (!(CardType & CT_BLOCK)) {
 8008046:	4b23      	ldr	r3, [pc, #140]	@ (80080d4 <USER_SPI_ioctl+0x2dc>)
 8008048:	781b      	ldrb	r3, [r3, #0]
 800804a:	f003 0308 	and.w	r3, r3, #8
 800804e:	2b00      	cmp	r3, #0
 8008050:	d105      	bne.n	800805e <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 8008052:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008054:	025b      	lsls	r3, r3, #9
 8008056:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800805a:	025b      	lsls	r3, r3, #9
 800805c:	627b      	str	r3, [r7, #36]	@ 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 800805e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008060:	2020      	movs	r0, #32
 8008062:	f7ff fc76 	bl	8007952 <send_cmd>
 8008066:	4603      	mov	r3, r0
 8008068:	2b00      	cmp	r3, #0
 800806a:	d128      	bne.n	80080be <USER_SPI_ioctl+0x2c6>
 800806c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800806e:	2021      	movs	r0, #33	@ 0x21
 8008070:	f7ff fc6f 	bl	8007952 <send_cmd>
 8008074:	4603      	mov	r3, r0
 8008076:	2b00      	cmp	r3, #0
 8008078:	d121      	bne.n	80080be <USER_SPI_ioctl+0x2c6>
 800807a:	2100      	movs	r1, #0
 800807c:	2026      	movs	r0, #38	@ 0x26
 800807e:	f7ff fc68 	bl	8007952 <send_cmd>
 8008082:	4603      	mov	r3, r0
 8008084:	2b00      	cmp	r3, #0
 8008086:	d11a      	bne.n	80080be <USER_SPI_ioctl+0x2c6>
 8008088:	f247 5030 	movw	r0, #30000	@ 0x7530
 800808c:	f7ff fbba 	bl	8007804 <wait_ready>
 8008090:	4603      	mov	r3, r0
 8008092:	2b00      	cmp	r3, #0
 8008094:	d013      	beq.n	80080be <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 8008096:	2300      	movs	r3, #0
 8008098:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 800809c:	e00f      	b.n	80080be <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 800809e:	2304      	movs	r3, #4
 80080a0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80080a4:	e00c      	b.n	80080c0 <USER_SPI_ioctl+0x2c8>
		break;
 80080a6:	bf00      	nop
 80080a8:	e00a      	b.n	80080c0 <USER_SPI_ioctl+0x2c8>
		break;
 80080aa:	bf00      	nop
 80080ac:	e008      	b.n	80080c0 <USER_SPI_ioctl+0x2c8>
		break;
 80080ae:	bf00      	nop
 80080b0:	e006      	b.n	80080c0 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 80080b2:	bf00      	nop
 80080b4:	e004      	b.n	80080c0 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 80080b6:	bf00      	nop
 80080b8:	e002      	b.n	80080c0 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 80080ba:	bf00      	nop
 80080bc:	e000      	b.n	80080c0 <USER_SPI_ioctl+0x2c8>
		break;
 80080be:	bf00      	nop
	}

	despiselect();
 80080c0:	f7ff fbc4 	bl	800784c <despiselect>

	return res;
 80080c4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80080c8:	4618      	mov	r0, r3
 80080ca:	3730      	adds	r7, #48	@ 0x30
 80080cc:	46bd      	mov	sp, r7
 80080ce:	bd80      	pop	{r7, pc}
 80080d0:	2000002c 	.word	0x2000002c
 80080d4:	2000060c 	.word	0x2000060c

080080d8 <disk_status>:
>>>>>>> Stashed changes
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
<<<<<<< Updated upstream
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b084      	sub	sp, #16
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	4603      	mov	r3, r0
 8007bc0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8007bc2:	79fb      	ldrb	r3, [r7, #7]
 8007bc4:	4a08      	ldr	r2, [pc, #32]	@ (8007be8 <disk_status+0x30>)
 8007bc6:	009b      	lsls	r3, r3, #2
 8007bc8:	4413      	add	r3, r2
 8007bca:	685b      	ldr	r3, [r3, #4]
 8007bcc:	685b      	ldr	r3, [r3, #4]
 8007bce:	79fa      	ldrb	r2, [r7, #7]
 8007bd0:	4905      	ldr	r1, [pc, #20]	@ (8007be8 <disk_status+0x30>)
 8007bd2:	440a      	add	r2, r1
 8007bd4:	7a12      	ldrb	r2, [r2, #8]
 8007bd6:	4610      	mov	r0, r2
 8007bd8:	4798      	blx	r3
 8007bda:	4603      	mov	r3, r0
 8007bdc:	73fb      	strb	r3, [r7, #15]
  return stat;
 8007bde:	7bfb      	ldrb	r3, [r7, #15]
}
 8007be0:	4618      	mov	r0, r3
 8007be2:	3710      	adds	r7, #16
 8007be4:	46bd      	mov	sp, r7
 8007be6:	bd80      	pop	{r7, pc}
 8007be8:	20000a5c 	.word	0x20000a5c

08007bec <disk_initialize>:
=======
 80080d8:	b580      	push	{r7, lr}
 80080da:	b084      	sub	sp, #16
 80080dc:	af00      	add	r7, sp, #0
 80080de:	4603      	mov	r3, r0
 80080e0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80080e2:	79fb      	ldrb	r3, [r7, #7]
 80080e4:	4a08      	ldr	r2, [pc, #32]	@ (8008108 <disk_status+0x30>)
 80080e6:	009b      	lsls	r3, r3, #2
 80080e8:	4413      	add	r3, r2
 80080ea:	685b      	ldr	r3, [r3, #4]
 80080ec:	685b      	ldr	r3, [r3, #4]
 80080ee:	79fa      	ldrb	r2, [r7, #7]
 80080f0:	4905      	ldr	r1, [pc, #20]	@ (8008108 <disk_status+0x30>)
 80080f2:	440a      	add	r2, r1
 80080f4:	7a12      	ldrb	r2, [r2, #8]
 80080f6:	4610      	mov	r0, r2
 80080f8:	4798      	blx	r3
 80080fa:	4603      	mov	r3, r0
 80080fc:	73fb      	strb	r3, [r7, #15]
  return stat;
 80080fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8008100:	4618      	mov	r0, r3
 8008102:	3710      	adds	r7, #16
 8008104:	46bd      	mov	sp, r7
 8008106:	bd80      	pop	{r7, pc}
 8008108:	20000640 	.word	0x20000640

0800810c <disk_initialize>:
>>>>>>> Stashed changes
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
<<<<<<< Updated upstream
 8007bec:	b580      	push	{r7, lr}
 8007bee:	b084      	sub	sp, #16
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	4603      	mov	r3, r0
 8007bf4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8007bfa:	79fb      	ldrb	r3, [r7, #7]
 8007bfc:	4a0d      	ldr	r2, [pc, #52]	@ (8007c34 <disk_initialize+0x48>)
 8007bfe:	5cd3      	ldrb	r3, [r2, r3]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d111      	bne.n	8007c28 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8007c04:	79fb      	ldrb	r3, [r7, #7]
 8007c06:	4a0b      	ldr	r2, [pc, #44]	@ (8007c34 <disk_initialize+0x48>)
 8007c08:	2101      	movs	r1, #1
 8007c0a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8007c0c:	79fb      	ldrb	r3, [r7, #7]
 8007c0e:	4a09      	ldr	r2, [pc, #36]	@ (8007c34 <disk_initialize+0x48>)
 8007c10:	009b      	lsls	r3, r3, #2
 8007c12:	4413      	add	r3, r2
 8007c14:	685b      	ldr	r3, [r3, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	79fa      	ldrb	r2, [r7, #7]
 8007c1a:	4906      	ldr	r1, [pc, #24]	@ (8007c34 <disk_initialize+0x48>)
 8007c1c:	440a      	add	r2, r1
 8007c1e:	7a12      	ldrb	r2, [r2, #8]
 8007c20:	4610      	mov	r0, r2
 8007c22:	4798      	blx	r3
 8007c24:	4603      	mov	r3, r0
 8007c26:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8007c28:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	3710      	adds	r7, #16
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	bd80      	pop	{r7, pc}
 8007c32:	bf00      	nop
 8007c34:	20000a5c 	.word	0x20000a5c

08007c38 <disk_read>:
=======
 800810c:	b580      	push	{r7, lr}
 800810e:	b084      	sub	sp, #16
 8008110:	af00      	add	r7, sp, #0
 8008112:	4603      	mov	r3, r0
 8008114:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8008116:	2300      	movs	r3, #0
 8008118:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800811a:	79fb      	ldrb	r3, [r7, #7]
 800811c:	4a0d      	ldr	r2, [pc, #52]	@ (8008154 <disk_initialize+0x48>)
 800811e:	5cd3      	ldrb	r3, [r2, r3]
 8008120:	2b00      	cmp	r3, #0
 8008122:	d111      	bne.n	8008148 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8008124:	79fb      	ldrb	r3, [r7, #7]
 8008126:	4a0b      	ldr	r2, [pc, #44]	@ (8008154 <disk_initialize+0x48>)
 8008128:	2101      	movs	r1, #1
 800812a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800812c:	79fb      	ldrb	r3, [r7, #7]
 800812e:	4a09      	ldr	r2, [pc, #36]	@ (8008154 <disk_initialize+0x48>)
 8008130:	009b      	lsls	r3, r3, #2
 8008132:	4413      	add	r3, r2
 8008134:	685b      	ldr	r3, [r3, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	79fa      	ldrb	r2, [r7, #7]
 800813a:	4906      	ldr	r1, [pc, #24]	@ (8008154 <disk_initialize+0x48>)
 800813c:	440a      	add	r2, r1
 800813e:	7a12      	ldrb	r2, [r2, #8]
 8008140:	4610      	mov	r0, r2
 8008142:	4798      	blx	r3
 8008144:	4603      	mov	r3, r0
 8008146:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8008148:	7bfb      	ldrb	r3, [r7, #15]
}
 800814a:	4618      	mov	r0, r3
 800814c:	3710      	adds	r7, #16
 800814e:	46bd      	mov	sp, r7
 8008150:	bd80      	pop	{r7, pc}
 8008152:	bf00      	nop
 8008154:	20000640 	.word	0x20000640

08008158 <disk_read>:
>>>>>>> Stashed changes
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
<<<<<<< Updated upstream
 8007c38:	b590      	push	{r4, r7, lr}
 8007c3a:	b087      	sub	sp, #28
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	60b9      	str	r1, [r7, #8]
 8007c40:	607a      	str	r2, [r7, #4]
 8007c42:	603b      	str	r3, [r7, #0]
 8007c44:	4603      	mov	r3, r0
 8007c46:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8007c48:	7bfb      	ldrb	r3, [r7, #15]
 8007c4a:	4a0a      	ldr	r2, [pc, #40]	@ (8007c74 <disk_read+0x3c>)
 8007c4c:	009b      	lsls	r3, r3, #2
 8007c4e:	4413      	add	r3, r2
 8007c50:	685b      	ldr	r3, [r3, #4]
 8007c52:	689c      	ldr	r4, [r3, #8]
 8007c54:	7bfb      	ldrb	r3, [r7, #15]
 8007c56:	4a07      	ldr	r2, [pc, #28]	@ (8007c74 <disk_read+0x3c>)
 8007c58:	4413      	add	r3, r2
 8007c5a:	7a18      	ldrb	r0, [r3, #8]
 8007c5c:	683b      	ldr	r3, [r7, #0]
 8007c5e:	687a      	ldr	r2, [r7, #4]
 8007c60:	68b9      	ldr	r1, [r7, #8]
 8007c62:	47a0      	blx	r4
 8007c64:	4603      	mov	r3, r0
 8007c66:	75fb      	strb	r3, [r7, #23]
  return res;
 8007c68:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	371c      	adds	r7, #28
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	bd90      	pop	{r4, r7, pc}
 8007c72:	bf00      	nop
 8007c74:	20000a5c 	.word	0x20000a5c

08007c78 <disk_write>:
=======
 8008158:	b590      	push	{r4, r7, lr}
 800815a:	b087      	sub	sp, #28
 800815c:	af00      	add	r7, sp, #0
 800815e:	60b9      	str	r1, [r7, #8]
 8008160:	607a      	str	r2, [r7, #4]
 8008162:	603b      	str	r3, [r7, #0]
 8008164:	4603      	mov	r3, r0
 8008166:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8008168:	7bfb      	ldrb	r3, [r7, #15]
 800816a:	4a0a      	ldr	r2, [pc, #40]	@ (8008194 <disk_read+0x3c>)
 800816c:	009b      	lsls	r3, r3, #2
 800816e:	4413      	add	r3, r2
 8008170:	685b      	ldr	r3, [r3, #4]
 8008172:	689c      	ldr	r4, [r3, #8]
 8008174:	7bfb      	ldrb	r3, [r7, #15]
 8008176:	4a07      	ldr	r2, [pc, #28]	@ (8008194 <disk_read+0x3c>)
 8008178:	4413      	add	r3, r2
 800817a:	7a18      	ldrb	r0, [r3, #8]
 800817c:	683b      	ldr	r3, [r7, #0]
 800817e:	687a      	ldr	r2, [r7, #4]
 8008180:	68b9      	ldr	r1, [r7, #8]
 8008182:	47a0      	blx	r4
 8008184:	4603      	mov	r3, r0
 8008186:	75fb      	strb	r3, [r7, #23]
  return res;
 8008188:	7dfb      	ldrb	r3, [r7, #23]
}
 800818a:	4618      	mov	r0, r3
 800818c:	371c      	adds	r7, #28
 800818e:	46bd      	mov	sp, r7
 8008190:	bd90      	pop	{r4, r7, pc}
 8008192:	bf00      	nop
 8008194:	20000640 	.word	0x20000640

08008198 <disk_write>:
>>>>>>> Stashed changes
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
<<<<<<< Updated upstream
 8007c78:	b590      	push	{r4, r7, lr}
 8007c7a:	b087      	sub	sp, #28
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	60b9      	str	r1, [r7, #8]
 8007c80:	607a      	str	r2, [r7, #4]
 8007c82:	603b      	str	r3, [r7, #0]
 8007c84:	4603      	mov	r3, r0
 8007c86:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8007c88:	7bfb      	ldrb	r3, [r7, #15]
 8007c8a:	4a0a      	ldr	r2, [pc, #40]	@ (8007cb4 <disk_write+0x3c>)
 8007c8c:	009b      	lsls	r3, r3, #2
 8007c8e:	4413      	add	r3, r2
 8007c90:	685b      	ldr	r3, [r3, #4]
 8007c92:	68dc      	ldr	r4, [r3, #12]
 8007c94:	7bfb      	ldrb	r3, [r7, #15]
 8007c96:	4a07      	ldr	r2, [pc, #28]	@ (8007cb4 <disk_write+0x3c>)
 8007c98:	4413      	add	r3, r2
 8007c9a:	7a18      	ldrb	r0, [r3, #8]
 8007c9c:	683b      	ldr	r3, [r7, #0]
 8007c9e:	687a      	ldr	r2, [r7, #4]
 8007ca0:	68b9      	ldr	r1, [r7, #8]
 8007ca2:	47a0      	blx	r4
 8007ca4:	4603      	mov	r3, r0
 8007ca6:	75fb      	strb	r3, [r7, #23]
  return res;
 8007ca8:	7dfb      	ldrb	r3, [r7, #23]
}
 8007caa:	4618      	mov	r0, r3
 8007cac:	371c      	adds	r7, #28
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	bd90      	pop	{r4, r7, pc}
 8007cb2:	bf00      	nop
 8007cb4:	20000a5c 	.word	0x20000a5c

08007cb8 <disk_ioctl>:
=======
 8008198:	b590      	push	{r4, r7, lr}
 800819a:	b087      	sub	sp, #28
 800819c:	af00      	add	r7, sp, #0
 800819e:	60b9      	str	r1, [r7, #8]
 80081a0:	607a      	str	r2, [r7, #4]
 80081a2:	603b      	str	r3, [r7, #0]
 80081a4:	4603      	mov	r3, r0
 80081a6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80081a8:	7bfb      	ldrb	r3, [r7, #15]
 80081aa:	4a0a      	ldr	r2, [pc, #40]	@ (80081d4 <disk_write+0x3c>)
 80081ac:	009b      	lsls	r3, r3, #2
 80081ae:	4413      	add	r3, r2
 80081b0:	685b      	ldr	r3, [r3, #4]
 80081b2:	68dc      	ldr	r4, [r3, #12]
 80081b4:	7bfb      	ldrb	r3, [r7, #15]
 80081b6:	4a07      	ldr	r2, [pc, #28]	@ (80081d4 <disk_write+0x3c>)
 80081b8:	4413      	add	r3, r2
 80081ba:	7a18      	ldrb	r0, [r3, #8]
 80081bc:	683b      	ldr	r3, [r7, #0]
 80081be:	687a      	ldr	r2, [r7, #4]
 80081c0:	68b9      	ldr	r1, [r7, #8]
 80081c2:	47a0      	blx	r4
 80081c4:	4603      	mov	r3, r0
 80081c6:	75fb      	strb	r3, [r7, #23]
  return res;
 80081c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80081ca:	4618      	mov	r0, r3
 80081cc:	371c      	adds	r7, #28
 80081ce:	46bd      	mov	sp, r7
 80081d0:	bd90      	pop	{r4, r7, pc}
 80081d2:	bf00      	nop
 80081d4:	20000640 	.word	0x20000640

080081d8 <disk_ioctl>:
>>>>>>> Stashed changes
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
<<<<<<< Updated upstream
 8007cb8:	b580      	push	{r7, lr}
 8007cba:	b084      	sub	sp, #16
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	4603      	mov	r3, r0
 8007cc0:	603a      	str	r2, [r7, #0]
 8007cc2:	71fb      	strb	r3, [r7, #7]
 8007cc4:	460b      	mov	r3, r1
 8007cc6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8007cc8:	79fb      	ldrb	r3, [r7, #7]
 8007cca:	4a09      	ldr	r2, [pc, #36]	@ (8007cf0 <disk_ioctl+0x38>)
 8007ccc:	009b      	lsls	r3, r3, #2
 8007cce:	4413      	add	r3, r2
 8007cd0:	685b      	ldr	r3, [r3, #4]
 8007cd2:	691b      	ldr	r3, [r3, #16]
 8007cd4:	79fa      	ldrb	r2, [r7, #7]
 8007cd6:	4906      	ldr	r1, [pc, #24]	@ (8007cf0 <disk_ioctl+0x38>)
 8007cd8:	440a      	add	r2, r1
 8007cda:	7a10      	ldrb	r0, [r2, #8]
 8007cdc:	79b9      	ldrb	r1, [r7, #6]
 8007cde:	683a      	ldr	r2, [r7, #0]
 8007ce0:	4798      	blx	r3
 8007ce2:	4603      	mov	r3, r0
 8007ce4:	73fb      	strb	r3, [r7, #15]
  return res;
 8007ce6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ce8:	4618      	mov	r0, r3
 8007cea:	3710      	adds	r7, #16
 8007cec:	46bd      	mov	sp, r7
 8007cee:	bd80      	pop	{r7, pc}
 8007cf0:	20000a5c 	.word	0x20000a5c

08007cf4 <ld_word>:
=======
 80081d8:	b580      	push	{r7, lr}
 80081da:	b084      	sub	sp, #16
 80081dc:	af00      	add	r7, sp, #0
 80081de:	4603      	mov	r3, r0
 80081e0:	603a      	str	r2, [r7, #0]
 80081e2:	71fb      	strb	r3, [r7, #7]
 80081e4:	460b      	mov	r3, r1
 80081e6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80081e8:	79fb      	ldrb	r3, [r7, #7]
 80081ea:	4a09      	ldr	r2, [pc, #36]	@ (8008210 <disk_ioctl+0x38>)
 80081ec:	009b      	lsls	r3, r3, #2
 80081ee:	4413      	add	r3, r2
 80081f0:	685b      	ldr	r3, [r3, #4]
 80081f2:	691b      	ldr	r3, [r3, #16]
 80081f4:	79fa      	ldrb	r2, [r7, #7]
 80081f6:	4906      	ldr	r1, [pc, #24]	@ (8008210 <disk_ioctl+0x38>)
 80081f8:	440a      	add	r2, r1
 80081fa:	7a10      	ldrb	r0, [r2, #8]
 80081fc:	79b9      	ldrb	r1, [r7, #6]
 80081fe:	683a      	ldr	r2, [r7, #0]
 8008200:	4798      	blx	r3
 8008202:	4603      	mov	r3, r0
 8008204:	73fb      	strb	r3, [r7, #15]
  return res;
 8008206:	7bfb      	ldrb	r3, [r7, #15]
}
 8008208:	4618      	mov	r0, r3
 800820a:	3710      	adds	r7, #16
 800820c:	46bd      	mov	sp, r7
 800820e:	bd80      	pop	{r7, pc}
 8008210:	20000640 	.word	0x20000640

08008214 <ld_word>:
>>>>>>> Stashed changes
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
<<<<<<< Updated upstream
 8007cf4:	b480      	push	{r7}
 8007cf6:	b085      	sub	sp, #20
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	3301      	adds	r3, #1
 8007d00:	781b      	ldrb	r3, [r3, #0]
 8007d02:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8007d04:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007d08:	021b      	lsls	r3, r3, #8
 8007d0a:	b21a      	sxth	r2, r3
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	781b      	ldrb	r3, [r3, #0]
 8007d10:	b21b      	sxth	r3, r3
 8007d12:	4313      	orrs	r3, r2
 8007d14:	b21b      	sxth	r3, r3
 8007d16:	81fb      	strh	r3, [r7, #14]
	return rv;
 8007d18:	89fb      	ldrh	r3, [r7, #14]
}
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	3714      	adds	r7, #20
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d24:	4770      	bx	lr

08007d26 <ld_dword>:
=======
 8008214:	b480      	push	{r7}
 8008216:	b085      	sub	sp, #20
 8008218:	af00      	add	r7, sp, #0
 800821a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	3301      	adds	r3, #1
 8008220:	781b      	ldrb	r3, [r3, #0]
 8008222:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8008224:	89fb      	ldrh	r3, [r7, #14]
 8008226:	021b      	lsls	r3, r3, #8
 8008228:	b21a      	sxth	r2, r3
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	781b      	ldrb	r3, [r3, #0]
 800822e:	b21b      	sxth	r3, r3
 8008230:	4313      	orrs	r3, r2
 8008232:	b21b      	sxth	r3, r3
 8008234:	81fb      	strh	r3, [r7, #14]
	return rv;
 8008236:	89fb      	ldrh	r3, [r7, #14]
}
 8008238:	4618      	mov	r0, r3
 800823a:	3714      	adds	r7, #20
 800823c:	46bd      	mov	sp, r7
 800823e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008242:	4770      	bx	lr

08008244 <ld_dword>:
>>>>>>> Stashed changes

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
<<<<<<< Updated upstream
 8007d26:	b480      	push	{r7}
 8007d28:	b085      	sub	sp, #20
 8007d2a:	af00      	add	r7, sp, #0
 8007d2c:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	3303      	adds	r3, #3
 8007d32:	781b      	ldrb	r3, [r3, #0]
 8007d34:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	021b      	lsls	r3, r3, #8
 8007d3a:	687a      	ldr	r2, [r7, #4]
 8007d3c:	3202      	adds	r2, #2
 8007d3e:	7812      	ldrb	r2, [r2, #0]
 8007d40:	4313      	orrs	r3, r2
 8007d42:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	021b      	lsls	r3, r3, #8
 8007d48:	687a      	ldr	r2, [r7, #4]
 8007d4a:	3201      	adds	r2, #1
 8007d4c:	7812      	ldrb	r2, [r2, #0]
 8007d4e:	4313      	orrs	r3, r2
 8007d50:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	021b      	lsls	r3, r3, #8
 8007d56:	687a      	ldr	r2, [r7, #4]
 8007d58:	7812      	ldrb	r2, [r2, #0]
 8007d5a:	4313      	orrs	r3, r2
 8007d5c:	60fb      	str	r3, [r7, #12]
	return rv;
 8007d5e:	68fb      	ldr	r3, [r7, #12]
}
 8007d60:	4618      	mov	r0, r3
 8007d62:	3714      	adds	r7, #20
 8007d64:	46bd      	mov	sp, r7
 8007d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6a:	4770      	bx	lr

08007d6c <st_word>:
=======
 8008244:	b480      	push	{r7}
 8008246:	b085      	sub	sp, #20
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	3303      	adds	r3, #3
 8008250:	781b      	ldrb	r3, [r3, #0]
 8008252:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	021b      	lsls	r3, r3, #8
 8008258:	687a      	ldr	r2, [r7, #4]
 800825a:	3202      	adds	r2, #2
 800825c:	7812      	ldrb	r2, [r2, #0]
 800825e:	4313      	orrs	r3, r2
 8008260:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	021b      	lsls	r3, r3, #8
 8008266:	687a      	ldr	r2, [r7, #4]
 8008268:	3201      	adds	r2, #1
 800826a:	7812      	ldrb	r2, [r2, #0]
 800826c:	4313      	orrs	r3, r2
 800826e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	021b      	lsls	r3, r3, #8
 8008274:	687a      	ldr	r2, [r7, #4]
 8008276:	7812      	ldrb	r2, [r2, #0]
 8008278:	4313      	orrs	r3, r2
 800827a:	60fb      	str	r3, [r7, #12]
	return rv;
 800827c:	68fb      	ldr	r3, [r7, #12]
}
 800827e:	4618      	mov	r0, r3
 8008280:	3714      	adds	r7, #20
 8008282:	46bd      	mov	sp, r7
 8008284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008288:	4770      	bx	lr

0800828a <st_word>:
>>>>>>> Stashed changes
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
<<<<<<< Updated upstream
 8007d6c:	b480      	push	{r7}
 8007d6e:	b083      	sub	sp, #12
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
 8007d74:	460b      	mov	r3, r1
 8007d76:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	1c5a      	adds	r2, r3, #1
 8007d7c:	607a      	str	r2, [r7, #4]
 8007d7e:	887a      	ldrh	r2, [r7, #2]
 8007d80:	b2d2      	uxtb	r2, r2
 8007d82:	701a      	strb	r2, [r3, #0]
 8007d84:	887b      	ldrh	r3, [r7, #2]
 8007d86:	0a1b      	lsrs	r3, r3, #8
 8007d88:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	1c5a      	adds	r2, r3, #1
 8007d8e:	607a      	str	r2, [r7, #4]
 8007d90:	887a      	ldrh	r2, [r7, #2]
 8007d92:	b2d2      	uxtb	r2, r2
 8007d94:	701a      	strb	r2, [r3, #0]
}
 8007d96:	bf00      	nop
 8007d98:	370c      	adds	r7, #12
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da0:	4770      	bx	lr

08007da2 <st_dword>:
=======
 800828a:	b480      	push	{r7}
 800828c:	b083      	sub	sp, #12
 800828e:	af00      	add	r7, sp, #0
 8008290:	6078      	str	r0, [r7, #4]
 8008292:	460b      	mov	r3, r1
 8008294:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	1c5a      	adds	r2, r3, #1
 800829a:	607a      	str	r2, [r7, #4]
 800829c:	887a      	ldrh	r2, [r7, #2]
 800829e:	b2d2      	uxtb	r2, r2
 80082a0:	701a      	strb	r2, [r3, #0]
 80082a2:	887b      	ldrh	r3, [r7, #2]
 80082a4:	0a1b      	lsrs	r3, r3, #8
 80082a6:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	1c5a      	adds	r2, r3, #1
 80082ac:	607a      	str	r2, [r7, #4]
 80082ae:	887a      	ldrh	r2, [r7, #2]
 80082b0:	b2d2      	uxtb	r2, r2
 80082b2:	701a      	strb	r2, [r3, #0]
}
 80082b4:	bf00      	nop
 80082b6:	370c      	adds	r7, #12
 80082b8:	46bd      	mov	sp, r7
 80082ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082be:	4770      	bx	lr

080082c0 <st_dword>:
>>>>>>> Stashed changes

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
<<<<<<< Updated upstream
 8007da2:	b480      	push	{r7}
 8007da4:	b083      	sub	sp, #12
 8007da6:	af00      	add	r7, sp, #0
 8007da8:	6078      	str	r0, [r7, #4]
 8007daa:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	1c5a      	adds	r2, r3, #1
 8007db0:	607a      	str	r2, [r7, #4]
 8007db2:	683a      	ldr	r2, [r7, #0]
 8007db4:	b2d2      	uxtb	r2, r2
 8007db6:	701a      	strb	r2, [r3, #0]
 8007db8:	683b      	ldr	r3, [r7, #0]
 8007dba:	0a1b      	lsrs	r3, r3, #8
 8007dbc:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	1c5a      	adds	r2, r3, #1
 8007dc2:	607a      	str	r2, [r7, #4]
 8007dc4:	683a      	ldr	r2, [r7, #0]
 8007dc6:	b2d2      	uxtb	r2, r2
 8007dc8:	701a      	strb	r2, [r3, #0]
 8007dca:	683b      	ldr	r3, [r7, #0]
 8007dcc:	0a1b      	lsrs	r3, r3, #8
 8007dce:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	1c5a      	adds	r2, r3, #1
 8007dd4:	607a      	str	r2, [r7, #4]
 8007dd6:	683a      	ldr	r2, [r7, #0]
 8007dd8:	b2d2      	uxtb	r2, r2
 8007dda:	701a      	strb	r2, [r3, #0]
 8007ddc:	683b      	ldr	r3, [r7, #0]
 8007dde:	0a1b      	lsrs	r3, r3, #8
 8007de0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	1c5a      	adds	r2, r3, #1
 8007de6:	607a      	str	r2, [r7, #4]
 8007de8:	683a      	ldr	r2, [r7, #0]
 8007dea:	b2d2      	uxtb	r2, r2
 8007dec:	701a      	strb	r2, [r3, #0]
}
 8007dee:	bf00      	nop
 8007df0:	370c      	adds	r7, #12
 8007df2:	46bd      	mov	sp, r7
 8007df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df8:	4770      	bx	lr

08007dfa <mem_cpy>:
=======
 80082c0:	b480      	push	{r7}
 80082c2:	b083      	sub	sp, #12
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	6078      	str	r0, [r7, #4]
 80082c8:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	1c5a      	adds	r2, r3, #1
 80082ce:	607a      	str	r2, [r7, #4]
 80082d0:	683a      	ldr	r2, [r7, #0]
 80082d2:	b2d2      	uxtb	r2, r2
 80082d4:	701a      	strb	r2, [r3, #0]
 80082d6:	683b      	ldr	r3, [r7, #0]
 80082d8:	0a1b      	lsrs	r3, r3, #8
 80082da:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	1c5a      	adds	r2, r3, #1
 80082e0:	607a      	str	r2, [r7, #4]
 80082e2:	683a      	ldr	r2, [r7, #0]
 80082e4:	b2d2      	uxtb	r2, r2
 80082e6:	701a      	strb	r2, [r3, #0]
 80082e8:	683b      	ldr	r3, [r7, #0]
 80082ea:	0a1b      	lsrs	r3, r3, #8
 80082ec:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	1c5a      	adds	r2, r3, #1
 80082f2:	607a      	str	r2, [r7, #4]
 80082f4:	683a      	ldr	r2, [r7, #0]
 80082f6:	b2d2      	uxtb	r2, r2
 80082f8:	701a      	strb	r2, [r3, #0]
 80082fa:	683b      	ldr	r3, [r7, #0]
 80082fc:	0a1b      	lsrs	r3, r3, #8
 80082fe:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	1c5a      	adds	r2, r3, #1
 8008304:	607a      	str	r2, [r7, #4]
 8008306:	683a      	ldr	r2, [r7, #0]
 8008308:	b2d2      	uxtb	r2, r2
 800830a:	701a      	strb	r2, [r3, #0]
}
 800830c:	bf00      	nop
 800830e:	370c      	adds	r7, #12
 8008310:	46bd      	mov	sp, r7
 8008312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008316:	4770      	bx	lr

08008318 <mem_cpy>:
>>>>>>> Stashed changes
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
<<<<<<< Updated upstream
 8007dfa:	b480      	push	{r7}
 8007dfc:	b087      	sub	sp, #28
 8007dfe:	af00      	add	r7, sp, #0
 8007e00:	60f8      	str	r0, [r7, #12]
 8007e02:	60b9      	str	r1, [r7, #8]
 8007e04:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8007e0a:	68bb      	ldr	r3, [r7, #8]
 8007e0c:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d00d      	beq.n	8007e30 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8007e14:	693a      	ldr	r2, [r7, #16]
 8007e16:	1c53      	adds	r3, r2, #1
 8007e18:	613b      	str	r3, [r7, #16]
 8007e1a:	697b      	ldr	r3, [r7, #20]
 8007e1c:	1c59      	adds	r1, r3, #1
 8007e1e:	6179      	str	r1, [r7, #20]
 8007e20:	7812      	ldrb	r2, [r2, #0]
 8007e22:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	3b01      	subs	r3, #1
 8007e28:	607b      	str	r3, [r7, #4]
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d1f1      	bne.n	8007e14 <mem_cpy+0x1a>
	}
}
 8007e30:	bf00      	nop
 8007e32:	371c      	adds	r7, #28
 8007e34:	46bd      	mov	sp, r7
 8007e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3a:	4770      	bx	lr

08007e3c <mem_set>:
=======
 8008318:	b480      	push	{r7}
 800831a:	b087      	sub	sp, #28
 800831c:	af00      	add	r7, sp, #0
 800831e:	60f8      	str	r0, [r7, #12]
 8008320:	60b9      	str	r1, [r7, #8]
 8008322:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8008328:	68bb      	ldr	r3, [r7, #8]
 800832a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2b00      	cmp	r3, #0
 8008330:	d00d      	beq.n	800834e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8008332:	693a      	ldr	r2, [r7, #16]
 8008334:	1c53      	adds	r3, r2, #1
 8008336:	613b      	str	r3, [r7, #16]
 8008338:	697b      	ldr	r3, [r7, #20]
 800833a:	1c59      	adds	r1, r3, #1
 800833c:	6179      	str	r1, [r7, #20]
 800833e:	7812      	ldrb	r2, [r2, #0]
 8008340:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	3b01      	subs	r3, #1
 8008346:	607b      	str	r3, [r7, #4]
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	2b00      	cmp	r3, #0
 800834c:	d1f1      	bne.n	8008332 <mem_cpy+0x1a>
	}
}
 800834e:	bf00      	nop
 8008350:	371c      	adds	r7, #28
 8008352:	46bd      	mov	sp, r7
 8008354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008358:	4770      	bx	lr

0800835a <mem_set>:
>>>>>>> Stashed changes

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
<<<<<<< Updated upstream
 8007e3c:	b480      	push	{r7}
 8007e3e:	b087      	sub	sp, #28
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	60f8      	str	r0, [r7, #12]
 8007e44:	60b9      	str	r1, [r7, #8]
 8007e46:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8007e4c:	697b      	ldr	r3, [r7, #20]
 8007e4e:	1c5a      	adds	r2, r3, #1
 8007e50:	617a      	str	r2, [r7, #20]
 8007e52:	68ba      	ldr	r2, [r7, #8]
 8007e54:	b2d2      	uxtb	r2, r2
 8007e56:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	3b01      	subs	r3, #1
 8007e5c:	607b      	str	r3, [r7, #4]
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d1f3      	bne.n	8007e4c <mem_set+0x10>
}
 8007e64:	bf00      	nop
 8007e66:	bf00      	nop
 8007e68:	371c      	adds	r7, #28
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e70:	4770      	bx	lr

08007e72 <mem_cmp>:
=======
 800835a:	b480      	push	{r7}
 800835c:	b087      	sub	sp, #28
 800835e:	af00      	add	r7, sp, #0
 8008360:	60f8      	str	r0, [r7, #12]
 8008362:	60b9      	str	r1, [r7, #8]
 8008364:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800836a:	697b      	ldr	r3, [r7, #20]
 800836c:	1c5a      	adds	r2, r3, #1
 800836e:	617a      	str	r2, [r7, #20]
 8008370:	68ba      	ldr	r2, [r7, #8]
 8008372:	b2d2      	uxtb	r2, r2
 8008374:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	3b01      	subs	r3, #1
 800837a:	607b      	str	r3, [r7, #4]
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	2b00      	cmp	r3, #0
 8008380:	d1f3      	bne.n	800836a <mem_set+0x10>
}
 8008382:	bf00      	nop
 8008384:	bf00      	nop
 8008386:	371c      	adds	r7, #28
 8008388:	46bd      	mov	sp, r7
 800838a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838e:	4770      	bx	lr

08008390 <mem_cmp>:
>>>>>>> Stashed changes

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
<<<<<<< Updated upstream
 8007e72:	b480      	push	{r7}
 8007e74:	b089      	sub	sp, #36	@ 0x24
 8007e76:	af00      	add	r7, sp, #0
 8007e78:	60f8      	str	r0, [r7, #12]
 8007e7a:	60b9      	str	r1, [r7, #8]
 8007e7c:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	61fb      	str	r3, [r7, #28]
 8007e82:	68bb      	ldr	r3, [r7, #8]
 8007e84:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8007e86:	2300      	movs	r3, #0
 8007e88:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8007e8a:	69fb      	ldr	r3, [r7, #28]
 8007e8c:	1c5a      	adds	r2, r3, #1
 8007e8e:	61fa      	str	r2, [r7, #28]
 8007e90:	781b      	ldrb	r3, [r3, #0]
 8007e92:	4619      	mov	r1, r3
 8007e94:	69bb      	ldr	r3, [r7, #24]
 8007e96:	1c5a      	adds	r2, r3, #1
 8007e98:	61ba      	str	r2, [r7, #24]
 8007e9a:	781b      	ldrb	r3, [r3, #0]
 8007e9c:	1acb      	subs	r3, r1, r3
 8007e9e:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	3b01      	subs	r3, #1
 8007ea4:	607b      	str	r3, [r7, #4]
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d002      	beq.n	8007eb2 <mem_cmp+0x40>
 8007eac:	697b      	ldr	r3, [r7, #20]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d0eb      	beq.n	8007e8a <mem_cmp+0x18>

	return r;
 8007eb2:	697b      	ldr	r3, [r7, #20]
}
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	3724      	adds	r7, #36	@ 0x24
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ebe:	4770      	bx	lr

08007ec0 <chk_chr>:
=======
 8008390:	b480      	push	{r7}
 8008392:	b089      	sub	sp, #36	@ 0x24
 8008394:	af00      	add	r7, sp, #0
 8008396:	60f8      	str	r0, [r7, #12]
 8008398:	60b9      	str	r1, [r7, #8]
 800839a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	61fb      	str	r3, [r7, #28]
 80083a0:	68bb      	ldr	r3, [r7, #8]
 80083a2:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80083a4:	2300      	movs	r3, #0
 80083a6:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80083a8:	69fb      	ldr	r3, [r7, #28]
 80083aa:	1c5a      	adds	r2, r3, #1
 80083ac:	61fa      	str	r2, [r7, #28]
 80083ae:	781b      	ldrb	r3, [r3, #0]
 80083b0:	4619      	mov	r1, r3
 80083b2:	69bb      	ldr	r3, [r7, #24]
 80083b4:	1c5a      	adds	r2, r3, #1
 80083b6:	61ba      	str	r2, [r7, #24]
 80083b8:	781b      	ldrb	r3, [r3, #0]
 80083ba:	1acb      	subs	r3, r1, r3
 80083bc:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	3b01      	subs	r3, #1
 80083c2:	607b      	str	r3, [r7, #4]
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d002      	beq.n	80083d0 <mem_cmp+0x40>
 80083ca:	697b      	ldr	r3, [r7, #20]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d0eb      	beq.n	80083a8 <mem_cmp+0x18>

	return r;
 80083d0:	697b      	ldr	r3, [r7, #20]
}
 80083d2:	4618      	mov	r0, r3
 80083d4:	3724      	adds	r7, #36	@ 0x24
 80083d6:	46bd      	mov	sp, r7
 80083d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083dc:	4770      	bx	lr

080083de <chk_chr>:
>>>>>>> Stashed changes

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
<<<<<<< Updated upstream
 8007ec0:	b480      	push	{r7}
 8007ec2:	b083      	sub	sp, #12
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
 8007ec8:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8007eca:	e002      	b.n	8007ed2 <chk_chr+0x12>
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	3301      	adds	r3, #1
 8007ed0:	607b      	str	r3, [r7, #4]
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	781b      	ldrb	r3, [r3, #0]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d005      	beq.n	8007ee6 <chk_chr+0x26>
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	781b      	ldrb	r3, [r3, #0]
 8007ede:	461a      	mov	r2, r3
 8007ee0:	683b      	ldr	r3, [r7, #0]
 8007ee2:	4293      	cmp	r3, r2
 8007ee4:	d1f2      	bne.n	8007ecc <chk_chr+0xc>
	return *str;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	781b      	ldrb	r3, [r3, #0]
}
 8007eea:	4618      	mov	r0, r3
 8007eec:	370c      	adds	r7, #12
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef4:	4770      	bx	lr

08007ef6 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 8007ef6:	b580      	push	{r7, lr}
 8007ef8:	b082      	sub	sp, #8
 8007efa:	af00      	add	r7, sp, #0
 8007efc:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d009      	beq.n	8007f18 <lock_fs+0x22>
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	68db      	ldr	r3, [r3, #12]
 8007f08:	4618      	mov	r0, r3
 8007f0a:	f002 f8e7 	bl	800a0dc <ff_req_grant>
 8007f0e:	4603      	mov	r3, r0
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d001      	beq.n	8007f18 <lock_fs+0x22>
 8007f14:	2301      	movs	r3, #1
 8007f16:	e000      	b.n	8007f1a <lock_fs+0x24>
 8007f18:	2300      	movs	r3, #0
}
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	3708      	adds	r7, #8
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	bd80      	pop	{r7, pc}

08007f22 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 8007f22:	b580      	push	{r7, lr}
 8007f24:	b082      	sub	sp, #8
 8007f26:	af00      	add	r7, sp, #0
 8007f28:	6078      	str	r0, [r7, #4]
 8007f2a:	460b      	mov	r3, r1
 8007f2c:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d00d      	beq.n	8007f50 <unlock_fs+0x2e>
 8007f34:	78fb      	ldrb	r3, [r7, #3]
 8007f36:	2b0c      	cmp	r3, #12
 8007f38:	d00a      	beq.n	8007f50 <unlock_fs+0x2e>
 8007f3a:	78fb      	ldrb	r3, [r7, #3]
 8007f3c:	2b0b      	cmp	r3, #11
 8007f3e:	d007      	beq.n	8007f50 <unlock_fs+0x2e>
 8007f40:	78fb      	ldrb	r3, [r7, #3]
 8007f42:	2b0f      	cmp	r3, #15
 8007f44:	d004      	beq.n	8007f50 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	68db      	ldr	r3, [r3, #12]
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	f002 f8db 	bl	800a106 <ff_rel_grant>
	}
}
 8007f50:	bf00      	nop
 8007f52:	3708      	adds	r7, #8
 8007f54:	46bd      	mov	sp, r7
 8007f56:	bd80      	pop	{r7, pc}

08007f58 <chk_lock>:
=======
 80083de:	b480      	push	{r7}
 80083e0:	b083      	sub	sp, #12
 80083e2:	af00      	add	r7, sp, #0
 80083e4:	6078      	str	r0, [r7, #4]
 80083e6:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80083e8:	e002      	b.n	80083f0 <chk_chr+0x12>
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	3301      	adds	r3, #1
 80083ee:	607b      	str	r3, [r7, #4]
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	781b      	ldrb	r3, [r3, #0]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d005      	beq.n	8008404 <chk_chr+0x26>
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	781b      	ldrb	r3, [r3, #0]
 80083fc:	461a      	mov	r2, r3
 80083fe:	683b      	ldr	r3, [r7, #0]
 8008400:	4293      	cmp	r3, r2
 8008402:	d1f2      	bne.n	80083ea <chk_chr+0xc>
	return *str;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	781b      	ldrb	r3, [r3, #0]
}
 8008408:	4618      	mov	r0, r3
 800840a:	370c      	adds	r7, #12
 800840c:	46bd      	mov	sp, r7
 800840e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008412:	4770      	bx	lr

08008414 <chk_lock>:
>>>>>>> Stashed changes
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
<<<<<<< Updated upstream
 8007f58:	b480      	push	{r7}
 8007f5a:	b085      	sub	sp, #20
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
 8007f60:	6039      	str	r1, [r7, #0]
=======
 8008414:	b480      	push	{r7}
 8008416:	b085      	sub	sp, #20
 8008418:	af00      	add	r7, sp, #0
 800841a:	6078      	str	r0, [r7, #4]
 800841c:	6039      	str	r1, [r7, #0]
>>>>>>> Stashed changes
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
<<<<<<< Updated upstream
 8007f62:	2300      	movs	r3, #0
 8007f64:	60bb      	str	r3, [r7, #8]
 8007f66:	68bb      	ldr	r3, [r7, #8]
 8007f68:	60fb      	str	r3, [r7, #12]
 8007f6a:	e029      	b.n	8007fc0 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8007f6c:	4a27      	ldr	r2, [pc, #156]	@ (800800c <chk_lock+0xb4>)
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	011b      	lsls	r3, r3, #4
 8007f72:	4413      	add	r3, r2
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d01d      	beq.n	8007fb6 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8007f7a:	4a24      	ldr	r2, [pc, #144]	@ (800800c <chk_lock+0xb4>)
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	011b      	lsls	r3, r3, #4
 8007f80:	4413      	add	r3, r2
 8007f82:	681a      	ldr	r2, [r3, #0]
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	429a      	cmp	r2, r3
 8007f8a:	d116      	bne.n	8007fba <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8007f8c:	4a1f      	ldr	r2, [pc, #124]	@ (800800c <chk_lock+0xb4>)
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	011b      	lsls	r3, r3, #4
 8007f92:	4413      	add	r3, r2
 8007f94:	3304      	adds	r3, #4
 8007f96:	681a      	ldr	r2, [r3, #0]
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8007f9c:	429a      	cmp	r2, r3
 8007f9e:	d10c      	bne.n	8007fba <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8007fa0:	4a1a      	ldr	r2, [pc, #104]	@ (800800c <chk_lock+0xb4>)
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	011b      	lsls	r3, r3, #4
 8007fa6:	4413      	add	r3, r2
 8007fa8:	3308      	adds	r3, #8
 8007faa:	681a      	ldr	r2, [r3, #0]
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8007fb0:	429a      	cmp	r2, r3
 8007fb2:	d102      	bne.n	8007fba <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8007fb4:	e007      	b.n	8007fc6 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8007fb6:	2301      	movs	r3, #1
 8007fb8:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	3301      	adds	r3, #1
 8007fbe:	60fb      	str	r3, [r7, #12]
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	2b01      	cmp	r3, #1
 8007fc4:	d9d2      	bls.n	8007f6c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	2b02      	cmp	r3, #2
 8007fca:	d109      	bne.n	8007fe0 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8007fcc:	68bb      	ldr	r3, [r7, #8]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d102      	bne.n	8007fd8 <chk_lock+0x80>
 8007fd2:	683b      	ldr	r3, [r7, #0]
 8007fd4:	2b02      	cmp	r3, #2
 8007fd6:	d101      	bne.n	8007fdc <chk_lock+0x84>
 8007fd8:	2300      	movs	r3, #0
 8007fda:	e010      	b.n	8007ffe <chk_lock+0xa6>
 8007fdc:	2312      	movs	r3, #18
 8007fde:	e00e      	b.n	8007ffe <chk_lock+0xa6>
=======
 800841e:	2300      	movs	r3, #0
 8008420:	60bb      	str	r3, [r7, #8]
 8008422:	68bb      	ldr	r3, [r7, #8]
 8008424:	60fb      	str	r3, [r7, #12]
 8008426:	e029      	b.n	800847c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8008428:	4a27      	ldr	r2, [pc, #156]	@ (80084c8 <chk_lock+0xb4>)
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	011b      	lsls	r3, r3, #4
 800842e:	4413      	add	r3, r2
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	2b00      	cmp	r3, #0
 8008434:	d01d      	beq.n	8008472 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008436:	4a24      	ldr	r2, [pc, #144]	@ (80084c8 <chk_lock+0xb4>)
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	011b      	lsls	r3, r3, #4
 800843c:	4413      	add	r3, r2
 800843e:	681a      	ldr	r2, [r3, #0]
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	429a      	cmp	r2, r3
 8008446:	d116      	bne.n	8008476 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8008448:	4a1f      	ldr	r2, [pc, #124]	@ (80084c8 <chk_lock+0xb4>)
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	011b      	lsls	r3, r3, #4
 800844e:	4413      	add	r3, r2
 8008450:	3304      	adds	r3, #4
 8008452:	681a      	ldr	r2, [r3, #0]
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008458:	429a      	cmp	r2, r3
 800845a:	d10c      	bne.n	8008476 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800845c:	4a1a      	ldr	r2, [pc, #104]	@ (80084c8 <chk_lock+0xb4>)
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	011b      	lsls	r3, r3, #4
 8008462:	4413      	add	r3, r2
 8008464:	3308      	adds	r3, #8
 8008466:	681a      	ldr	r2, [r3, #0]
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800846c:	429a      	cmp	r2, r3
 800846e:	d102      	bne.n	8008476 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008470:	e007      	b.n	8008482 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8008472:	2301      	movs	r3, #1
 8008474:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	3301      	adds	r3, #1
 800847a:	60fb      	str	r3, [r7, #12]
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	2b01      	cmp	r3, #1
 8008480:	d9d2      	bls.n	8008428 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	2b02      	cmp	r3, #2
 8008486:	d109      	bne.n	800849c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8008488:	68bb      	ldr	r3, [r7, #8]
 800848a:	2b00      	cmp	r3, #0
 800848c:	d102      	bne.n	8008494 <chk_lock+0x80>
 800848e:	683b      	ldr	r3, [r7, #0]
 8008490:	2b02      	cmp	r3, #2
 8008492:	d101      	bne.n	8008498 <chk_lock+0x84>
 8008494:	2300      	movs	r3, #0
 8008496:	e010      	b.n	80084ba <chk_lock+0xa6>
 8008498:	2312      	movs	r3, #18
 800849a:	e00e      	b.n	80084ba <chk_lock+0xa6>
>>>>>>> Stashed changes
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
<<<<<<< Updated upstream
 8007fe0:	683b      	ldr	r3, [r7, #0]
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d108      	bne.n	8007ff8 <chk_lock+0xa0>
 8007fe6:	4a09      	ldr	r2, [pc, #36]	@ (800800c <chk_lock+0xb4>)
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	011b      	lsls	r3, r3, #4
 8007fec:	4413      	add	r3, r2
 8007fee:	330c      	adds	r3, #12
 8007ff0:	881b      	ldrh	r3, [r3, #0]
 8007ff2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007ff6:	d101      	bne.n	8007ffc <chk_lock+0xa4>
 8007ff8:	2310      	movs	r3, #16
 8007ffa:	e000      	b.n	8007ffe <chk_lock+0xa6>
 8007ffc:	2300      	movs	r3, #0
}
 8007ffe:	4618      	mov	r0, r3
 8008000:	3714      	adds	r7, #20
 8008002:	46bd      	mov	sp, r7
 8008004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008008:	4770      	bx	lr
 800800a:	bf00      	nop
 800800c:	20000a3c 	.word	0x20000a3c

08008010 <enq_lock>:
=======
 800849c:	683b      	ldr	r3, [r7, #0]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d108      	bne.n	80084b4 <chk_lock+0xa0>
 80084a2:	4a09      	ldr	r2, [pc, #36]	@ (80084c8 <chk_lock+0xb4>)
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	011b      	lsls	r3, r3, #4
 80084a8:	4413      	add	r3, r2
 80084aa:	330c      	adds	r3, #12
 80084ac:	881b      	ldrh	r3, [r3, #0]
 80084ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80084b2:	d101      	bne.n	80084b8 <chk_lock+0xa4>
 80084b4:	2310      	movs	r3, #16
 80084b6:	e000      	b.n	80084ba <chk_lock+0xa6>
 80084b8:	2300      	movs	r3, #0
}
 80084ba:	4618      	mov	r0, r3
 80084bc:	3714      	adds	r7, #20
 80084be:	46bd      	mov	sp, r7
 80084c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c4:	4770      	bx	lr
 80084c6:	bf00      	nop
 80084c8:	20000620 	.word	0x20000620

080084cc <enq_lock>:
>>>>>>> Stashed changes


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
<<<<<<< Updated upstream
 8008010:	b480      	push	{r7}
 8008012:	b083      	sub	sp, #12
 8008014:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008016:	2300      	movs	r3, #0
 8008018:	607b      	str	r3, [r7, #4]
 800801a:	e002      	b.n	8008022 <enq_lock+0x12>
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	3301      	adds	r3, #1
 8008020:	607b      	str	r3, [r7, #4]
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	2b01      	cmp	r3, #1
 8008026:	d806      	bhi.n	8008036 <enq_lock+0x26>
 8008028:	4a09      	ldr	r2, [pc, #36]	@ (8008050 <enq_lock+0x40>)
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	011b      	lsls	r3, r3, #4
 800802e:	4413      	add	r3, r2
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	2b00      	cmp	r3, #0
 8008034:	d1f2      	bne.n	800801c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	2b02      	cmp	r3, #2
 800803a:	bf14      	ite	ne
 800803c:	2301      	movne	r3, #1
 800803e:	2300      	moveq	r3, #0
 8008040:	b2db      	uxtb	r3, r3
}
 8008042:	4618      	mov	r0, r3
 8008044:	370c      	adds	r7, #12
 8008046:	46bd      	mov	sp, r7
 8008048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804c:	4770      	bx	lr
 800804e:	bf00      	nop
 8008050:	20000a3c 	.word	0x20000a3c

08008054 <inc_lock>:
=======
 80084cc:	b480      	push	{r7}
 80084ce:	b083      	sub	sp, #12
 80084d0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80084d2:	2300      	movs	r3, #0
 80084d4:	607b      	str	r3, [r7, #4]
 80084d6:	e002      	b.n	80084de <enq_lock+0x12>
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	3301      	adds	r3, #1
 80084dc:	607b      	str	r3, [r7, #4]
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	2b01      	cmp	r3, #1
 80084e2:	d806      	bhi.n	80084f2 <enq_lock+0x26>
 80084e4:	4a09      	ldr	r2, [pc, #36]	@ (800850c <enq_lock+0x40>)
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	011b      	lsls	r3, r3, #4
 80084ea:	4413      	add	r3, r2
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d1f2      	bne.n	80084d8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	2b02      	cmp	r3, #2
 80084f6:	bf14      	ite	ne
 80084f8:	2301      	movne	r3, #1
 80084fa:	2300      	moveq	r3, #0
 80084fc:	b2db      	uxtb	r3, r3
}
 80084fe:	4618      	mov	r0, r3
 8008500:	370c      	adds	r7, #12
 8008502:	46bd      	mov	sp, r7
 8008504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008508:	4770      	bx	lr
 800850a:	bf00      	nop
 800850c:	20000620 	.word	0x20000620

08008510 <inc_lock>:
>>>>>>> Stashed changes
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
<<<<<<< Updated upstream
 8008054:	b480      	push	{r7}
 8008056:	b085      	sub	sp, #20
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
 800805c:	6039      	str	r1, [r7, #0]
=======
 8008510:	b480      	push	{r7}
 8008512:	b085      	sub	sp, #20
 8008514:	af00      	add	r7, sp, #0
 8008516:	6078      	str	r0, [r7, #4]
 8008518:	6039      	str	r1, [r7, #0]
>>>>>>> Stashed changes
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
<<<<<<< Updated upstream
 800805e:	2300      	movs	r3, #0
 8008060:	60fb      	str	r3, [r7, #12]
 8008062:	e01f      	b.n	80080a4 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8008064:	4a41      	ldr	r2, [pc, #260]	@ (800816c <inc_lock+0x118>)
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	011b      	lsls	r3, r3, #4
 800806a:	4413      	add	r3, r2
 800806c:	681a      	ldr	r2, [r3, #0]
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	429a      	cmp	r2, r3
 8008074:	d113      	bne.n	800809e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8008076:	4a3d      	ldr	r2, [pc, #244]	@ (800816c <inc_lock+0x118>)
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	011b      	lsls	r3, r3, #4
 800807c:	4413      	add	r3, r2
 800807e:	3304      	adds	r3, #4
 8008080:	681a      	ldr	r2, [r3, #0]
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8008086:	429a      	cmp	r2, r3
 8008088:	d109      	bne.n	800809e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800808a:	4a38      	ldr	r2, [pc, #224]	@ (800816c <inc_lock+0x118>)
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	011b      	lsls	r3, r3, #4
 8008090:	4413      	add	r3, r2
 8008092:	3308      	adds	r3, #8
 8008094:	681a      	ldr	r2, [r3, #0]
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800809a:	429a      	cmp	r2, r3
 800809c:	d006      	beq.n	80080ac <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	3301      	adds	r3, #1
 80080a2:	60fb      	str	r3, [r7, #12]
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	2b01      	cmp	r3, #1
 80080a8:	d9dc      	bls.n	8008064 <inc_lock+0x10>
 80080aa:	e000      	b.n	80080ae <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80080ac:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	2b02      	cmp	r3, #2
 80080b2:	d132      	bne.n	800811a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80080b4:	2300      	movs	r3, #0
 80080b6:	60fb      	str	r3, [r7, #12]
 80080b8:	e002      	b.n	80080c0 <inc_lock+0x6c>
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	3301      	adds	r3, #1
 80080be:	60fb      	str	r3, [r7, #12]
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	2b01      	cmp	r3, #1
 80080c4:	d806      	bhi.n	80080d4 <inc_lock+0x80>
 80080c6:	4a29      	ldr	r2, [pc, #164]	@ (800816c <inc_lock+0x118>)
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	011b      	lsls	r3, r3, #4
 80080cc:	4413      	add	r3, r2
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d1f2      	bne.n	80080ba <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	2b02      	cmp	r3, #2
 80080d8:	d101      	bne.n	80080de <inc_lock+0x8a>
 80080da:	2300      	movs	r3, #0
 80080dc:	e040      	b.n	8008160 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681a      	ldr	r2, [r3, #0]
 80080e2:	4922      	ldr	r1, [pc, #136]	@ (800816c <inc_lock+0x118>)
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	011b      	lsls	r3, r3, #4
 80080e8:	440b      	add	r3, r1
 80080ea:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	689a      	ldr	r2, [r3, #8]
 80080f0:	491e      	ldr	r1, [pc, #120]	@ (800816c <inc_lock+0x118>)
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	011b      	lsls	r3, r3, #4
 80080f6:	440b      	add	r3, r1
 80080f8:	3304      	adds	r3, #4
 80080fa:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	695a      	ldr	r2, [r3, #20]
 8008100:	491a      	ldr	r1, [pc, #104]	@ (800816c <inc_lock+0x118>)
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	011b      	lsls	r3, r3, #4
 8008106:	440b      	add	r3, r1
 8008108:	3308      	adds	r3, #8
 800810a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800810c:	4a17      	ldr	r2, [pc, #92]	@ (800816c <inc_lock+0x118>)
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	011b      	lsls	r3, r3, #4
 8008112:	4413      	add	r3, r2
 8008114:	330c      	adds	r3, #12
 8008116:	2200      	movs	r2, #0
 8008118:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800811a:	683b      	ldr	r3, [r7, #0]
 800811c:	2b00      	cmp	r3, #0
 800811e:	d009      	beq.n	8008134 <inc_lock+0xe0>
 8008120:	4a12      	ldr	r2, [pc, #72]	@ (800816c <inc_lock+0x118>)
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	011b      	lsls	r3, r3, #4
 8008126:	4413      	add	r3, r2
 8008128:	330c      	adds	r3, #12
 800812a:	881b      	ldrh	r3, [r3, #0]
 800812c:	2b00      	cmp	r3, #0
 800812e:	d001      	beq.n	8008134 <inc_lock+0xe0>
 8008130:	2300      	movs	r3, #0
 8008132:	e015      	b.n	8008160 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8008134:	683b      	ldr	r3, [r7, #0]
 8008136:	2b00      	cmp	r3, #0
 8008138:	d108      	bne.n	800814c <inc_lock+0xf8>
 800813a:	4a0c      	ldr	r2, [pc, #48]	@ (800816c <inc_lock+0x118>)
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	011b      	lsls	r3, r3, #4
 8008140:	4413      	add	r3, r2
 8008142:	330c      	adds	r3, #12
 8008144:	881b      	ldrh	r3, [r3, #0]
 8008146:	3301      	adds	r3, #1
 8008148:	b29a      	uxth	r2, r3
 800814a:	e001      	b.n	8008150 <inc_lock+0xfc>
 800814c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008150:	4906      	ldr	r1, [pc, #24]	@ (800816c <inc_lock+0x118>)
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	011b      	lsls	r3, r3, #4
 8008156:	440b      	add	r3, r1
 8008158:	330c      	adds	r3, #12
 800815a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	3301      	adds	r3, #1
}
 8008160:	4618      	mov	r0, r3
 8008162:	3714      	adds	r7, #20
 8008164:	46bd      	mov	sp, r7
 8008166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816a:	4770      	bx	lr
 800816c:	20000a3c 	.word	0x20000a3c

08008170 <dec_lock>:
=======
 800851a:	2300      	movs	r3, #0
 800851c:	60fb      	str	r3, [r7, #12]
 800851e:	e01f      	b.n	8008560 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8008520:	4a41      	ldr	r2, [pc, #260]	@ (8008628 <inc_lock+0x118>)
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	011b      	lsls	r3, r3, #4
 8008526:	4413      	add	r3, r2
 8008528:	681a      	ldr	r2, [r3, #0]
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	429a      	cmp	r2, r3
 8008530:	d113      	bne.n	800855a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8008532:	4a3d      	ldr	r2, [pc, #244]	@ (8008628 <inc_lock+0x118>)
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	011b      	lsls	r3, r3, #4
 8008538:	4413      	add	r3, r2
 800853a:	3304      	adds	r3, #4
 800853c:	681a      	ldr	r2, [r3, #0]
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8008542:	429a      	cmp	r2, r3
 8008544:	d109      	bne.n	800855a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8008546:	4a38      	ldr	r2, [pc, #224]	@ (8008628 <inc_lock+0x118>)
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	011b      	lsls	r3, r3, #4
 800854c:	4413      	add	r3, r2
 800854e:	3308      	adds	r3, #8
 8008550:	681a      	ldr	r2, [r3, #0]
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8008556:	429a      	cmp	r2, r3
 8008558:	d006      	beq.n	8008568 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	3301      	adds	r3, #1
 800855e:	60fb      	str	r3, [r7, #12]
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	2b01      	cmp	r3, #1
 8008564:	d9dc      	bls.n	8008520 <inc_lock+0x10>
 8008566:	e000      	b.n	800856a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8008568:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	2b02      	cmp	r3, #2
 800856e:	d132      	bne.n	80085d6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008570:	2300      	movs	r3, #0
 8008572:	60fb      	str	r3, [r7, #12]
 8008574:	e002      	b.n	800857c <inc_lock+0x6c>
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	3301      	adds	r3, #1
 800857a:	60fb      	str	r3, [r7, #12]
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	2b01      	cmp	r3, #1
 8008580:	d806      	bhi.n	8008590 <inc_lock+0x80>
 8008582:	4a29      	ldr	r2, [pc, #164]	@ (8008628 <inc_lock+0x118>)
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	011b      	lsls	r3, r3, #4
 8008588:	4413      	add	r3, r2
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	2b00      	cmp	r3, #0
 800858e:	d1f2      	bne.n	8008576 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	2b02      	cmp	r3, #2
 8008594:	d101      	bne.n	800859a <inc_lock+0x8a>
 8008596:	2300      	movs	r3, #0
 8008598:	e040      	b.n	800861c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681a      	ldr	r2, [r3, #0]
 800859e:	4922      	ldr	r1, [pc, #136]	@ (8008628 <inc_lock+0x118>)
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	011b      	lsls	r3, r3, #4
 80085a4:	440b      	add	r3, r1
 80085a6:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	689a      	ldr	r2, [r3, #8]
 80085ac:	491e      	ldr	r1, [pc, #120]	@ (8008628 <inc_lock+0x118>)
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	011b      	lsls	r3, r3, #4
 80085b2:	440b      	add	r3, r1
 80085b4:	3304      	adds	r3, #4
 80085b6:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	695a      	ldr	r2, [r3, #20]
 80085bc:	491a      	ldr	r1, [pc, #104]	@ (8008628 <inc_lock+0x118>)
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	011b      	lsls	r3, r3, #4
 80085c2:	440b      	add	r3, r1
 80085c4:	3308      	adds	r3, #8
 80085c6:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80085c8:	4a17      	ldr	r2, [pc, #92]	@ (8008628 <inc_lock+0x118>)
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	011b      	lsls	r3, r3, #4
 80085ce:	4413      	add	r3, r2
 80085d0:	330c      	adds	r3, #12
 80085d2:	2200      	movs	r2, #0
 80085d4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80085d6:	683b      	ldr	r3, [r7, #0]
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d009      	beq.n	80085f0 <inc_lock+0xe0>
 80085dc:	4a12      	ldr	r2, [pc, #72]	@ (8008628 <inc_lock+0x118>)
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	011b      	lsls	r3, r3, #4
 80085e2:	4413      	add	r3, r2
 80085e4:	330c      	adds	r3, #12
 80085e6:	881b      	ldrh	r3, [r3, #0]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d001      	beq.n	80085f0 <inc_lock+0xe0>
 80085ec:	2300      	movs	r3, #0
 80085ee:	e015      	b.n	800861c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80085f0:	683b      	ldr	r3, [r7, #0]
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d108      	bne.n	8008608 <inc_lock+0xf8>
 80085f6:	4a0c      	ldr	r2, [pc, #48]	@ (8008628 <inc_lock+0x118>)
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	011b      	lsls	r3, r3, #4
 80085fc:	4413      	add	r3, r2
 80085fe:	330c      	adds	r3, #12
 8008600:	881b      	ldrh	r3, [r3, #0]
 8008602:	3301      	adds	r3, #1
 8008604:	b29a      	uxth	r2, r3
 8008606:	e001      	b.n	800860c <inc_lock+0xfc>
 8008608:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800860c:	4906      	ldr	r1, [pc, #24]	@ (8008628 <inc_lock+0x118>)
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	011b      	lsls	r3, r3, #4
 8008612:	440b      	add	r3, r1
 8008614:	330c      	adds	r3, #12
 8008616:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	3301      	adds	r3, #1
}
 800861c:	4618      	mov	r0, r3
 800861e:	3714      	adds	r7, #20
 8008620:	46bd      	mov	sp, r7
 8008622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008626:	4770      	bx	lr
 8008628:	20000620 	.word	0x20000620

0800862c <dec_lock>:
>>>>>>> Stashed changes

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
<<<<<<< Updated upstream
 8008170:	b480      	push	{r7}
 8008172:	b085      	sub	sp, #20
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]
=======
 800862c:	b480      	push	{r7}
 800862e:	b085      	sub	sp, #20
 8008630:	af00      	add	r7, sp, #0
 8008632:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
<<<<<<< Updated upstream
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	3b01      	subs	r3, #1
 800817c:	607b      	str	r3, [r7, #4]
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	2b01      	cmp	r3, #1
 8008182:	d825      	bhi.n	80081d0 <dec_lock+0x60>
		n = Files[i].ctr;
 8008184:	4a17      	ldr	r2, [pc, #92]	@ (80081e4 <dec_lock+0x74>)
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	011b      	lsls	r3, r3, #4
 800818a:	4413      	add	r3, r2
 800818c:	330c      	adds	r3, #12
 800818e:	881b      	ldrh	r3, [r3, #0]
 8008190:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8008192:	89fb      	ldrh	r3, [r7, #14]
 8008194:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008198:	d101      	bne.n	800819e <dec_lock+0x2e>
 800819a:	2300      	movs	r3, #0
 800819c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800819e:	89fb      	ldrh	r3, [r7, #14]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d002      	beq.n	80081aa <dec_lock+0x3a>
 80081a4:	89fb      	ldrh	r3, [r7, #14]
 80081a6:	3b01      	subs	r3, #1
 80081a8:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80081aa:	4a0e      	ldr	r2, [pc, #56]	@ (80081e4 <dec_lock+0x74>)
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	011b      	lsls	r3, r3, #4
 80081b0:	4413      	add	r3, r2
 80081b2:	330c      	adds	r3, #12
 80081b4:	89fa      	ldrh	r2, [r7, #14]
 80081b6:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80081b8:	89fb      	ldrh	r3, [r7, #14]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d105      	bne.n	80081ca <dec_lock+0x5a>
 80081be:	4a09      	ldr	r2, [pc, #36]	@ (80081e4 <dec_lock+0x74>)
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	011b      	lsls	r3, r3, #4
 80081c4:	4413      	add	r3, r2
 80081c6:	2200      	movs	r2, #0
 80081c8:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80081ca:	2300      	movs	r3, #0
 80081cc:	737b      	strb	r3, [r7, #13]
 80081ce:	e001      	b.n	80081d4 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80081d0:	2302      	movs	r3, #2
 80081d2:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80081d4:	7b7b      	ldrb	r3, [r7, #13]
}
 80081d6:	4618      	mov	r0, r3
 80081d8:	3714      	adds	r7, #20
 80081da:	46bd      	mov	sp, r7
 80081dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e0:	4770      	bx	lr
 80081e2:	bf00      	nop
 80081e4:	20000a3c 	.word	0x20000a3c

080081e8 <clear_lock>:
=======
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	3b01      	subs	r3, #1
 8008638:	607b      	str	r3, [r7, #4]
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	2b01      	cmp	r3, #1
 800863e:	d825      	bhi.n	800868c <dec_lock+0x60>
		n = Files[i].ctr;
 8008640:	4a17      	ldr	r2, [pc, #92]	@ (80086a0 <dec_lock+0x74>)
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	011b      	lsls	r3, r3, #4
 8008646:	4413      	add	r3, r2
 8008648:	330c      	adds	r3, #12
 800864a:	881b      	ldrh	r3, [r3, #0]
 800864c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800864e:	89fb      	ldrh	r3, [r7, #14]
 8008650:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008654:	d101      	bne.n	800865a <dec_lock+0x2e>
 8008656:	2300      	movs	r3, #0
 8008658:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800865a:	89fb      	ldrh	r3, [r7, #14]
 800865c:	2b00      	cmp	r3, #0
 800865e:	d002      	beq.n	8008666 <dec_lock+0x3a>
 8008660:	89fb      	ldrh	r3, [r7, #14]
 8008662:	3b01      	subs	r3, #1
 8008664:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8008666:	4a0e      	ldr	r2, [pc, #56]	@ (80086a0 <dec_lock+0x74>)
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	011b      	lsls	r3, r3, #4
 800866c:	4413      	add	r3, r2
 800866e:	330c      	adds	r3, #12
 8008670:	89fa      	ldrh	r2, [r7, #14]
 8008672:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8008674:	89fb      	ldrh	r3, [r7, #14]
 8008676:	2b00      	cmp	r3, #0
 8008678:	d105      	bne.n	8008686 <dec_lock+0x5a>
 800867a:	4a09      	ldr	r2, [pc, #36]	@ (80086a0 <dec_lock+0x74>)
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	011b      	lsls	r3, r3, #4
 8008680:	4413      	add	r3, r2
 8008682:	2200      	movs	r2, #0
 8008684:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8008686:	2300      	movs	r3, #0
 8008688:	737b      	strb	r3, [r7, #13]
 800868a:	e001      	b.n	8008690 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800868c:	2302      	movs	r3, #2
 800868e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8008690:	7b7b      	ldrb	r3, [r7, #13]
}
 8008692:	4618      	mov	r0, r3
 8008694:	3714      	adds	r7, #20
 8008696:	46bd      	mov	sp, r7
 8008698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869c:	4770      	bx	lr
 800869e:	bf00      	nop
 80086a0:	20000620 	.word	0x20000620

080086a4 <clear_lock>:
>>>>>>> Stashed changes

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
<<<<<<< Updated upstream
 80081e8:	b480      	push	{r7}
 80081ea:	b085      	sub	sp, #20
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80081f0:	2300      	movs	r3, #0
 80081f2:	60fb      	str	r3, [r7, #12]
 80081f4:	e010      	b.n	8008218 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80081f6:	4a0d      	ldr	r2, [pc, #52]	@ (800822c <clear_lock+0x44>)
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	011b      	lsls	r3, r3, #4
 80081fc:	4413      	add	r3, r2
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	687a      	ldr	r2, [r7, #4]
 8008202:	429a      	cmp	r2, r3
 8008204:	d105      	bne.n	8008212 <clear_lock+0x2a>
 8008206:	4a09      	ldr	r2, [pc, #36]	@ (800822c <clear_lock+0x44>)
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	011b      	lsls	r3, r3, #4
 800820c:	4413      	add	r3, r2
 800820e:	2200      	movs	r2, #0
 8008210:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	3301      	adds	r3, #1
 8008216:	60fb      	str	r3, [r7, #12]
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	2b01      	cmp	r3, #1
 800821c:	d9eb      	bls.n	80081f6 <clear_lock+0xe>
	}
}
 800821e:	bf00      	nop
 8008220:	bf00      	nop
 8008222:	3714      	adds	r7, #20
 8008224:	46bd      	mov	sp, r7
 8008226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822a:	4770      	bx	lr
 800822c:	20000a3c 	.word	0x20000a3c

08008230 <sync_window>:
=======
 80086a4:	b480      	push	{r7}
 80086a6:	b085      	sub	sp, #20
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80086ac:	2300      	movs	r3, #0
 80086ae:	60fb      	str	r3, [r7, #12]
 80086b0:	e010      	b.n	80086d4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80086b2:	4a0d      	ldr	r2, [pc, #52]	@ (80086e8 <clear_lock+0x44>)
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	011b      	lsls	r3, r3, #4
 80086b8:	4413      	add	r3, r2
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	687a      	ldr	r2, [r7, #4]
 80086be:	429a      	cmp	r2, r3
 80086c0:	d105      	bne.n	80086ce <clear_lock+0x2a>
 80086c2:	4a09      	ldr	r2, [pc, #36]	@ (80086e8 <clear_lock+0x44>)
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	011b      	lsls	r3, r3, #4
 80086c8:	4413      	add	r3, r2
 80086ca:	2200      	movs	r2, #0
 80086cc:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	3301      	adds	r3, #1
 80086d2:	60fb      	str	r3, [r7, #12]
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	2b01      	cmp	r3, #1
 80086d8:	d9eb      	bls.n	80086b2 <clear_lock+0xe>
	}
}
 80086da:	bf00      	nop
 80086dc:	bf00      	nop
 80086de:	3714      	adds	r7, #20
 80086e0:	46bd      	mov	sp, r7
 80086e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e6:	4770      	bx	lr
 80086e8:	20000620 	.word	0x20000620

080086ec <sync_window>:
>>>>>>> Stashed changes
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
<<<<<<< Updated upstream
 8008230:	b580      	push	{r7, lr}
 8008232:	b086      	sub	sp, #24
 8008234:	af00      	add	r7, sp, #0
 8008236:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8008238:	2300      	movs	r3, #0
 800823a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	78db      	ldrb	r3, [r3, #3]
 8008240:	2b00      	cmp	r3, #0
 8008242:	d034      	beq.n	80082ae <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008248:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	7858      	ldrb	r0, [r3, #1]
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8008254:	2301      	movs	r3, #1
 8008256:	697a      	ldr	r2, [r7, #20]
 8008258:	f7ff fd0e 	bl	8007c78 <disk_write>
 800825c:	4603      	mov	r3, r0
 800825e:	2b00      	cmp	r3, #0
 8008260:	d002      	beq.n	8008268 <sync_window+0x38>
			res = FR_DISK_ERR;
 8008262:	2301      	movs	r3, #1
 8008264:	73fb      	strb	r3, [r7, #15]
 8008266:	e022      	b.n	80082ae <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	2200      	movs	r2, #0
 800826c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008272:	697a      	ldr	r2, [r7, #20]
 8008274:	1ad2      	subs	r2, r2, r3
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	69db      	ldr	r3, [r3, #28]
 800827a:	429a      	cmp	r2, r3
 800827c:	d217      	bcs.n	80082ae <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	789b      	ldrb	r3, [r3, #2]
 8008282:	613b      	str	r3, [r7, #16]
 8008284:	e010      	b.n	80082a8 <sync_window+0x78>
					wsect += fs->fsize;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	69db      	ldr	r3, [r3, #28]
 800828a:	697a      	ldr	r2, [r7, #20]
 800828c:	4413      	add	r3, r2
 800828e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	7858      	ldrb	r0, [r3, #1]
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800829a:	2301      	movs	r3, #1
 800829c:	697a      	ldr	r2, [r7, #20]
 800829e:	f7ff fceb 	bl	8007c78 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80082a2:	693b      	ldr	r3, [r7, #16]
 80082a4:	3b01      	subs	r3, #1
 80082a6:	613b      	str	r3, [r7, #16]
 80082a8:	693b      	ldr	r3, [r7, #16]
 80082aa:	2b01      	cmp	r3, #1
 80082ac:	d8eb      	bhi.n	8008286 <sync_window+0x56>
=======
 80086ec:	b580      	push	{r7, lr}
 80086ee:	b086      	sub	sp, #24
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80086f4:	2300      	movs	r3, #0
 80086f6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	78db      	ldrb	r3, [r3, #3]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d034      	beq.n	800876a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008704:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	7858      	ldrb	r0, [r3, #1]
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008710:	2301      	movs	r3, #1
 8008712:	697a      	ldr	r2, [r7, #20]
 8008714:	f7ff fd40 	bl	8008198 <disk_write>
 8008718:	4603      	mov	r3, r0
 800871a:	2b00      	cmp	r3, #0
 800871c:	d002      	beq.n	8008724 <sync_window+0x38>
			res = FR_DISK_ERR;
 800871e:	2301      	movs	r3, #1
 8008720:	73fb      	strb	r3, [r7, #15]
 8008722:	e022      	b.n	800876a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	2200      	movs	r2, #0
 8008728:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	6a1b      	ldr	r3, [r3, #32]
 800872e:	697a      	ldr	r2, [r7, #20]
 8008730:	1ad2      	subs	r2, r2, r3
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	699b      	ldr	r3, [r3, #24]
 8008736:	429a      	cmp	r2, r3
 8008738:	d217      	bcs.n	800876a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	789b      	ldrb	r3, [r3, #2]
 800873e:	613b      	str	r3, [r7, #16]
 8008740:	e010      	b.n	8008764 <sync_window+0x78>
					wsect += fs->fsize;
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	699b      	ldr	r3, [r3, #24]
 8008746:	697a      	ldr	r2, [r7, #20]
 8008748:	4413      	add	r3, r2
 800874a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	7858      	ldrb	r0, [r3, #1]
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008756:	2301      	movs	r3, #1
 8008758:	697a      	ldr	r2, [r7, #20]
 800875a:	f7ff fd1d 	bl	8008198 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800875e:	693b      	ldr	r3, [r7, #16]
 8008760:	3b01      	subs	r3, #1
 8008762:	613b      	str	r3, [r7, #16]
 8008764:	693b      	ldr	r3, [r7, #16]
 8008766:	2b01      	cmp	r3, #1
 8008768:	d8eb      	bhi.n	8008742 <sync_window+0x56>
>>>>>>> Stashed changes
				}
			}
		}
	}
	return res;
<<<<<<< Updated upstream
 80082ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80082b0:	4618      	mov	r0, r3
 80082b2:	3718      	adds	r7, #24
 80082b4:	46bd      	mov	sp, r7
 80082b6:	bd80      	pop	{r7, pc}

080082b8 <move_window>:
=======
 800876a:	7bfb      	ldrb	r3, [r7, #15]
}
 800876c:	4618      	mov	r0, r3
 800876e:	3718      	adds	r7, #24
 8008770:	46bd      	mov	sp, r7
 8008772:	bd80      	pop	{r7, pc}

08008774 <move_window>:
>>>>>>> Stashed changes
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
<<<<<<< Updated upstream
 80082b8:	b580      	push	{r7, lr}
 80082ba:	b084      	sub	sp, #16
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
 80082c0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80082c2:	2300      	movs	r3, #0
 80082c4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80082ca:	683a      	ldr	r2, [r7, #0]
 80082cc:	429a      	cmp	r2, r3
 80082ce:	d01b      	beq.n	8008308 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80082d0:	6878      	ldr	r0, [r7, #4]
 80082d2:	f7ff ffad 	bl	8008230 <sync_window>
 80082d6:	4603      	mov	r3, r0
 80082d8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80082da:	7bfb      	ldrb	r3, [r7, #15]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d113      	bne.n	8008308 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	7858      	ldrb	r0, [r3, #1]
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80082ea:	2301      	movs	r3, #1
 80082ec:	683a      	ldr	r2, [r7, #0]
 80082ee:	f7ff fca3 	bl	8007c38 <disk_read>
 80082f2:	4603      	mov	r3, r0
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d004      	beq.n	8008302 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80082f8:	f04f 33ff 	mov.w	r3, #4294967295
 80082fc:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80082fe:	2301      	movs	r3, #1
 8008300:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	683a      	ldr	r2, [r7, #0]
 8008306:	631a      	str	r2, [r3, #48]	@ 0x30
		}
	}
	return res;
 8008308:	7bfb      	ldrb	r3, [r7, #15]
}
 800830a:	4618      	mov	r0, r3
 800830c:	3710      	adds	r7, #16
 800830e:	46bd      	mov	sp, r7
 8008310:	bd80      	pop	{r7, pc}
	...

08008314 <sync_fs>:
=======
 8008774:	b580      	push	{r7, lr}
 8008776:	b084      	sub	sp, #16
 8008778:	af00      	add	r7, sp, #0
 800877a:	6078      	str	r0, [r7, #4]
 800877c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800877e:	2300      	movs	r3, #0
 8008780:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008786:	683a      	ldr	r2, [r7, #0]
 8008788:	429a      	cmp	r2, r3
 800878a:	d01b      	beq.n	80087c4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800878c:	6878      	ldr	r0, [r7, #4]
 800878e:	f7ff ffad 	bl	80086ec <sync_window>
 8008792:	4603      	mov	r3, r0
 8008794:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8008796:	7bfb      	ldrb	r3, [r7, #15]
 8008798:	2b00      	cmp	r3, #0
 800879a:	d113      	bne.n	80087c4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	7858      	ldrb	r0, [r3, #1]
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80087a6:	2301      	movs	r3, #1
 80087a8:	683a      	ldr	r2, [r7, #0]
 80087aa:	f7ff fcd5 	bl	8008158 <disk_read>
 80087ae:	4603      	mov	r3, r0
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d004      	beq.n	80087be <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80087b4:	f04f 33ff 	mov.w	r3, #4294967295
 80087b8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80087ba:	2301      	movs	r3, #1
 80087bc:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	683a      	ldr	r2, [r7, #0]
 80087c2:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 80087c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80087c6:	4618      	mov	r0, r3
 80087c8:	3710      	adds	r7, #16
 80087ca:	46bd      	mov	sp, r7
 80087cc:	bd80      	pop	{r7, pc}
	...

080087d0 <sync_fs>:
>>>>>>> Stashed changes

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
<<<<<<< Updated upstream
 8008314:	b580      	push	{r7, lr}
 8008316:	b084      	sub	sp, #16
 8008318:	af00      	add	r7, sp, #0
 800831a:	6078      	str	r0, [r7, #4]
=======
 80087d0:	b580      	push	{r7, lr}
 80087d2:	b084      	sub	sp, #16
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
	FRESULT res;


	res = sync_window(fs);
<<<<<<< Updated upstream
 800831c:	6878      	ldr	r0, [r7, #4]
 800831e:	f7ff ff87 	bl	8008230 <sync_window>
 8008322:	4603      	mov	r3, r0
 8008324:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8008326:	7bfb      	ldrb	r3, [r7, #15]
 8008328:	2b00      	cmp	r3, #0
 800832a:	d158      	bne.n	80083de <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	781b      	ldrb	r3, [r3, #0]
 8008330:	2b03      	cmp	r3, #3
 8008332:	d148      	bne.n	80083c6 <sync_fs+0xb2>
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	791b      	ldrb	r3, [r3, #4]
 8008338:	2b01      	cmp	r3, #1
 800833a:	d144      	bne.n	80083c6 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	3334      	adds	r3, #52	@ 0x34
 8008340:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008344:	2100      	movs	r1, #0
 8008346:	4618      	mov	r0, r3
 8008348:	f7ff fd78 	bl	8007e3c <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	3334      	adds	r3, #52	@ 0x34
 8008350:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8008354:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8008358:	4618      	mov	r0, r3
 800835a:	f7ff fd07 	bl	8007d6c <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	3334      	adds	r3, #52	@ 0x34
 8008362:	4921      	ldr	r1, [pc, #132]	@ (80083e8 <sync_fs+0xd4>)
 8008364:	4618      	mov	r0, r3
 8008366:	f7ff fd1c 	bl	8007da2 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	3334      	adds	r3, #52	@ 0x34
 800836e:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8008372:	491e      	ldr	r1, [pc, #120]	@ (80083ec <sync_fs+0xd8>)
 8008374:	4618      	mov	r0, r3
 8008376:	f7ff fd14 	bl	8007da2 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	3334      	adds	r3, #52	@ 0x34
 800837e:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	695b      	ldr	r3, [r3, #20]
 8008386:	4619      	mov	r1, r3
 8008388:	4610      	mov	r0, r2
 800838a:	f7ff fd0a 	bl	8007da2 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	3334      	adds	r3, #52	@ 0x34
 8008392:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	691b      	ldr	r3, [r3, #16]
 800839a:	4619      	mov	r1, r3
 800839c:	4610      	mov	r0, r2
 800839e:	f7ff fd00 	bl	8007da2 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	6a1b      	ldr	r3, [r3, #32]
 80083a6:	1c5a      	adds	r2, r3, #1
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	631a      	str	r2, [r3, #48]	@ 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	7858      	ldrb	r0, [r3, #1]
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80083ba:	2301      	movs	r3, #1
 80083bc:	f7ff fc5c 	bl	8007c78 <disk_write>
			fs->fsi_flag = 0;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	2200      	movs	r2, #0
 80083c4:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	785b      	ldrb	r3, [r3, #1]
 80083ca:	2200      	movs	r2, #0
 80083cc:	2100      	movs	r1, #0
 80083ce:	4618      	mov	r0, r3
 80083d0:	f7ff fc72 	bl	8007cb8 <disk_ioctl>
 80083d4:	4603      	mov	r3, r0
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d001      	beq.n	80083de <sync_fs+0xca>
 80083da:	2301      	movs	r3, #1
 80083dc:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80083de:	7bfb      	ldrb	r3, [r7, #15]
}
 80083e0:	4618      	mov	r0, r3
 80083e2:	3710      	adds	r7, #16
 80083e4:	46bd      	mov	sp, r7
 80083e6:	bd80      	pop	{r7, pc}
 80083e8:	41615252 	.word	0x41615252
 80083ec:	61417272 	.word	0x61417272

080083f0 <clust2sect>:
=======
 80087d8:	6878      	ldr	r0, [r7, #4]
 80087da:	f7ff ff87 	bl	80086ec <sync_window>
 80087de:	4603      	mov	r3, r0
 80087e0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80087e2:	7bfb      	ldrb	r3, [r7, #15]
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d158      	bne.n	800889a <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	781b      	ldrb	r3, [r3, #0]
 80087ec:	2b03      	cmp	r3, #3
 80087ee:	d148      	bne.n	8008882 <sync_fs+0xb2>
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	791b      	ldrb	r3, [r3, #4]
 80087f4:	2b01      	cmp	r3, #1
 80087f6:	d144      	bne.n	8008882 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	3330      	adds	r3, #48	@ 0x30
 80087fc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008800:	2100      	movs	r1, #0
 8008802:	4618      	mov	r0, r3
 8008804:	f7ff fda9 	bl	800835a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	3330      	adds	r3, #48	@ 0x30
 800880c:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8008810:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8008814:	4618      	mov	r0, r3
 8008816:	f7ff fd38 	bl	800828a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	3330      	adds	r3, #48	@ 0x30
 800881e:	4921      	ldr	r1, [pc, #132]	@ (80088a4 <sync_fs+0xd4>)
 8008820:	4618      	mov	r0, r3
 8008822:	f7ff fd4d 	bl	80082c0 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	3330      	adds	r3, #48	@ 0x30
 800882a:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800882e:	491e      	ldr	r1, [pc, #120]	@ (80088a8 <sync_fs+0xd8>)
 8008830:	4618      	mov	r0, r3
 8008832:	f7ff fd45 	bl	80082c0 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	3330      	adds	r3, #48	@ 0x30
 800883a:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	691b      	ldr	r3, [r3, #16]
 8008842:	4619      	mov	r1, r3
 8008844:	4610      	mov	r0, r2
 8008846:	f7ff fd3b 	bl	80082c0 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	3330      	adds	r3, #48	@ 0x30
 800884e:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	68db      	ldr	r3, [r3, #12]
 8008856:	4619      	mov	r1, r3
 8008858:	4610      	mov	r0, r2
 800885a:	f7ff fd31 	bl	80082c0 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	69db      	ldr	r3, [r3, #28]
 8008862:	1c5a      	adds	r2, r3, #1
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	7858      	ldrb	r0, [r3, #1]
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008876:	2301      	movs	r3, #1
 8008878:	f7ff fc8e 	bl	8008198 <disk_write>
			fs->fsi_flag = 0;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	2200      	movs	r2, #0
 8008880:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	785b      	ldrb	r3, [r3, #1]
 8008886:	2200      	movs	r2, #0
 8008888:	2100      	movs	r1, #0
 800888a:	4618      	mov	r0, r3
 800888c:	f7ff fca4 	bl	80081d8 <disk_ioctl>
 8008890:	4603      	mov	r3, r0
 8008892:	2b00      	cmp	r3, #0
 8008894:	d001      	beq.n	800889a <sync_fs+0xca>
 8008896:	2301      	movs	r3, #1
 8008898:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800889a:	7bfb      	ldrb	r3, [r7, #15]
}
 800889c:	4618      	mov	r0, r3
 800889e:	3710      	adds	r7, #16
 80088a0:	46bd      	mov	sp, r7
 80088a2:	bd80      	pop	{r7, pc}
 80088a4:	41615252 	.word	0x41615252
 80088a8:	61417272 	.word	0x61417272

080088ac <clust2sect>:
>>>>>>> Stashed changes
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
<<<<<<< Updated upstream
 80083f0:	b480      	push	{r7}
 80083f2:	b083      	sub	sp, #12
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	6078      	str	r0, [r7, #4]
 80083f8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80083fa:	683b      	ldr	r3, [r7, #0]
 80083fc:	3b02      	subs	r3, #2
 80083fe:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	699b      	ldr	r3, [r3, #24]
 8008404:	3b02      	subs	r3, #2
 8008406:	683a      	ldr	r2, [r7, #0]
 8008408:	429a      	cmp	r2, r3
 800840a:	d301      	bcc.n	8008410 <clust2sect+0x20>
 800840c:	2300      	movs	r3, #0
 800840e:	e008      	b.n	8008422 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	895b      	ldrh	r3, [r3, #10]
 8008414:	461a      	mov	r2, r3
 8008416:	683b      	ldr	r3, [r7, #0]
 8008418:	fb03 f202 	mul.w	r2, r3, r2
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008420:	4413      	add	r3, r2
}
 8008422:	4618      	mov	r0, r3
 8008424:	370c      	adds	r7, #12
 8008426:	46bd      	mov	sp, r7
 8008428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842c:	4770      	bx	lr

0800842e <get_fat>:
=======
 80088ac:	b480      	push	{r7}
 80088ae:	b083      	sub	sp, #12
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	6078      	str	r0, [r7, #4]
 80088b4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80088b6:	683b      	ldr	r3, [r7, #0]
 80088b8:	3b02      	subs	r3, #2
 80088ba:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	695b      	ldr	r3, [r3, #20]
 80088c0:	3b02      	subs	r3, #2
 80088c2:	683a      	ldr	r2, [r7, #0]
 80088c4:	429a      	cmp	r2, r3
 80088c6:	d301      	bcc.n	80088cc <clust2sect+0x20>
 80088c8:	2300      	movs	r3, #0
 80088ca:	e008      	b.n	80088de <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	895b      	ldrh	r3, [r3, #10]
 80088d0:	461a      	mov	r2, r3
 80088d2:	683b      	ldr	r3, [r7, #0]
 80088d4:	fb03 f202 	mul.w	r2, r3, r2
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088dc:	4413      	add	r3, r2
}
 80088de:	4618      	mov	r0, r3
 80088e0:	370c      	adds	r7, #12
 80088e2:	46bd      	mov	sp, r7
 80088e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e8:	4770      	bx	lr

080088ea <get_fat>:
>>>>>>> Stashed changes
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
<<<<<<< Updated upstream
 800842e:	b580      	push	{r7, lr}
 8008430:	b086      	sub	sp, #24
 8008432:	af00      	add	r7, sp, #0
 8008434:	6078      	str	r0, [r7, #4]
 8008436:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800843e:	683b      	ldr	r3, [r7, #0]
 8008440:	2b01      	cmp	r3, #1
 8008442:	d904      	bls.n	800844e <get_fat+0x20>
 8008444:	693b      	ldr	r3, [r7, #16]
 8008446:	699b      	ldr	r3, [r3, #24]
 8008448:	683a      	ldr	r2, [r7, #0]
 800844a:	429a      	cmp	r2, r3
 800844c:	d302      	bcc.n	8008454 <get_fat+0x26>
		val = 1;	/* Internal error */
 800844e:	2301      	movs	r3, #1
 8008450:	617b      	str	r3, [r7, #20]
 8008452:	e08e      	b.n	8008572 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8008454:	f04f 33ff 	mov.w	r3, #4294967295
 8008458:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800845a:	693b      	ldr	r3, [r7, #16]
 800845c:	781b      	ldrb	r3, [r3, #0]
 800845e:	2b03      	cmp	r3, #3
 8008460:	d061      	beq.n	8008526 <get_fat+0xf8>
 8008462:	2b03      	cmp	r3, #3
 8008464:	dc7b      	bgt.n	800855e <get_fat+0x130>
 8008466:	2b01      	cmp	r3, #1
 8008468:	d002      	beq.n	8008470 <get_fat+0x42>
 800846a:	2b02      	cmp	r3, #2
 800846c:	d041      	beq.n	80084f2 <get_fat+0xc4>
 800846e:	e076      	b.n	800855e <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8008470:	683b      	ldr	r3, [r7, #0]
 8008472:	60fb      	str	r3, [r7, #12]
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	085b      	lsrs	r3, r3, #1
 8008478:	68fa      	ldr	r2, [r7, #12]
 800847a:	4413      	add	r3, r2
 800847c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800847e:	693b      	ldr	r3, [r7, #16]
 8008480:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	0a5b      	lsrs	r3, r3, #9
 8008486:	4413      	add	r3, r2
 8008488:	4619      	mov	r1, r3
 800848a:	6938      	ldr	r0, [r7, #16]
 800848c:	f7ff ff14 	bl	80082b8 <move_window>
 8008490:	4603      	mov	r3, r0
 8008492:	2b00      	cmp	r3, #0
 8008494:	d166      	bne.n	8008564 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	1c5a      	adds	r2, r3, #1
 800849a:	60fa      	str	r2, [r7, #12]
 800849c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084a0:	693a      	ldr	r2, [r7, #16]
 80084a2:	4413      	add	r3, r2
 80084a4:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80084a8:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80084aa:	693b      	ldr	r3, [r7, #16]
 80084ac:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	0a5b      	lsrs	r3, r3, #9
 80084b2:	4413      	add	r3, r2
 80084b4:	4619      	mov	r1, r3
 80084b6:	6938      	ldr	r0, [r7, #16]
 80084b8:	f7ff fefe 	bl	80082b8 <move_window>
 80084bc:	4603      	mov	r3, r0
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d152      	bne.n	8008568 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084c8:	693a      	ldr	r2, [r7, #16]
 80084ca:	4413      	add	r3, r2
 80084cc:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80084d0:	021b      	lsls	r3, r3, #8
 80084d2:	68ba      	ldr	r2, [r7, #8]
 80084d4:	4313      	orrs	r3, r2
 80084d6:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80084d8:	683b      	ldr	r3, [r7, #0]
 80084da:	f003 0301 	and.w	r3, r3, #1
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d002      	beq.n	80084e8 <get_fat+0xba>
 80084e2:	68bb      	ldr	r3, [r7, #8]
 80084e4:	091b      	lsrs	r3, r3, #4
 80084e6:	e002      	b.n	80084ee <get_fat+0xc0>
 80084e8:	68bb      	ldr	r3, [r7, #8]
 80084ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80084ee:	617b      	str	r3, [r7, #20]
			break;
 80084f0:	e03f      	b.n	8008572 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80084f2:	693b      	ldr	r3, [r7, #16]
 80084f4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80084f6:	683b      	ldr	r3, [r7, #0]
 80084f8:	0a1b      	lsrs	r3, r3, #8
 80084fa:	4413      	add	r3, r2
 80084fc:	4619      	mov	r1, r3
 80084fe:	6938      	ldr	r0, [r7, #16]
 8008500:	f7ff feda 	bl	80082b8 <move_window>
 8008504:	4603      	mov	r3, r0
 8008506:	2b00      	cmp	r3, #0
 8008508:	d130      	bne.n	800856c <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800850a:	693b      	ldr	r3, [r7, #16]
 800850c:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8008510:	683b      	ldr	r3, [r7, #0]
 8008512:	005b      	lsls	r3, r3, #1
 8008514:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8008518:	4413      	add	r3, r2
 800851a:	4618      	mov	r0, r3
 800851c:	f7ff fbea 	bl	8007cf4 <ld_word>
 8008520:	4603      	mov	r3, r0
 8008522:	617b      	str	r3, [r7, #20]
			break;
 8008524:	e025      	b.n	8008572 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008526:	693b      	ldr	r3, [r7, #16]
 8008528:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800852a:	683b      	ldr	r3, [r7, #0]
 800852c:	09db      	lsrs	r3, r3, #7
 800852e:	4413      	add	r3, r2
 8008530:	4619      	mov	r1, r3
 8008532:	6938      	ldr	r0, [r7, #16]
 8008534:	f7ff fec0 	bl	80082b8 <move_window>
 8008538:	4603      	mov	r3, r0
 800853a:	2b00      	cmp	r3, #0
 800853c:	d118      	bne.n	8008570 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800853e:	693b      	ldr	r3, [r7, #16]
 8008540:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8008544:	683b      	ldr	r3, [r7, #0]
 8008546:	009b      	lsls	r3, r3, #2
 8008548:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800854c:	4413      	add	r3, r2
 800854e:	4618      	mov	r0, r3
 8008550:	f7ff fbe9 	bl	8007d26 <ld_dword>
 8008554:	4603      	mov	r3, r0
 8008556:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800855a:	617b      	str	r3, [r7, #20]
			break;
 800855c:	e009      	b.n	8008572 <get_fat+0x144>
=======
 80088ea:	b580      	push	{r7, lr}
 80088ec:	b086      	sub	sp, #24
 80088ee:	af00      	add	r7, sp, #0
 80088f0:	6078      	str	r0, [r7, #4]
 80088f2:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80088fa:	683b      	ldr	r3, [r7, #0]
 80088fc:	2b01      	cmp	r3, #1
 80088fe:	d904      	bls.n	800890a <get_fat+0x20>
 8008900:	693b      	ldr	r3, [r7, #16]
 8008902:	695b      	ldr	r3, [r3, #20]
 8008904:	683a      	ldr	r2, [r7, #0]
 8008906:	429a      	cmp	r2, r3
 8008908:	d302      	bcc.n	8008910 <get_fat+0x26>
		val = 1;	/* Internal error */
 800890a:	2301      	movs	r3, #1
 800890c:	617b      	str	r3, [r7, #20]
 800890e:	e08e      	b.n	8008a2e <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8008910:	f04f 33ff 	mov.w	r3, #4294967295
 8008914:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8008916:	693b      	ldr	r3, [r7, #16]
 8008918:	781b      	ldrb	r3, [r3, #0]
 800891a:	2b03      	cmp	r3, #3
 800891c:	d061      	beq.n	80089e2 <get_fat+0xf8>
 800891e:	2b03      	cmp	r3, #3
 8008920:	dc7b      	bgt.n	8008a1a <get_fat+0x130>
 8008922:	2b01      	cmp	r3, #1
 8008924:	d002      	beq.n	800892c <get_fat+0x42>
 8008926:	2b02      	cmp	r3, #2
 8008928:	d041      	beq.n	80089ae <get_fat+0xc4>
 800892a:	e076      	b.n	8008a1a <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800892c:	683b      	ldr	r3, [r7, #0]
 800892e:	60fb      	str	r3, [r7, #12]
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	085b      	lsrs	r3, r3, #1
 8008934:	68fa      	ldr	r2, [r7, #12]
 8008936:	4413      	add	r3, r2
 8008938:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800893a:	693b      	ldr	r3, [r7, #16]
 800893c:	6a1a      	ldr	r2, [r3, #32]
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	0a5b      	lsrs	r3, r3, #9
 8008942:	4413      	add	r3, r2
 8008944:	4619      	mov	r1, r3
 8008946:	6938      	ldr	r0, [r7, #16]
 8008948:	f7ff ff14 	bl	8008774 <move_window>
 800894c:	4603      	mov	r3, r0
 800894e:	2b00      	cmp	r3, #0
 8008950:	d166      	bne.n	8008a20 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	1c5a      	adds	r2, r3, #1
 8008956:	60fa      	str	r2, [r7, #12]
 8008958:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800895c:	693a      	ldr	r2, [r7, #16]
 800895e:	4413      	add	r3, r2
 8008960:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008964:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008966:	693b      	ldr	r3, [r7, #16]
 8008968:	6a1a      	ldr	r2, [r3, #32]
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	0a5b      	lsrs	r3, r3, #9
 800896e:	4413      	add	r3, r2
 8008970:	4619      	mov	r1, r3
 8008972:	6938      	ldr	r0, [r7, #16]
 8008974:	f7ff fefe 	bl	8008774 <move_window>
 8008978:	4603      	mov	r3, r0
 800897a:	2b00      	cmp	r3, #0
 800897c:	d152      	bne.n	8008a24 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008984:	693a      	ldr	r2, [r7, #16]
 8008986:	4413      	add	r3, r2
 8008988:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800898c:	021b      	lsls	r3, r3, #8
 800898e:	68ba      	ldr	r2, [r7, #8]
 8008990:	4313      	orrs	r3, r2
 8008992:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8008994:	683b      	ldr	r3, [r7, #0]
 8008996:	f003 0301 	and.w	r3, r3, #1
 800899a:	2b00      	cmp	r3, #0
 800899c:	d002      	beq.n	80089a4 <get_fat+0xba>
 800899e:	68bb      	ldr	r3, [r7, #8]
 80089a0:	091b      	lsrs	r3, r3, #4
 80089a2:	e002      	b.n	80089aa <get_fat+0xc0>
 80089a4:	68bb      	ldr	r3, [r7, #8]
 80089a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80089aa:	617b      	str	r3, [r7, #20]
			break;
 80089ac:	e03f      	b.n	8008a2e <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80089ae:	693b      	ldr	r3, [r7, #16]
 80089b0:	6a1a      	ldr	r2, [r3, #32]
 80089b2:	683b      	ldr	r3, [r7, #0]
 80089b4:	0a1b      	lsrs	r3, r3, #8
 80089b6:	4413      	add	r3, r2
 80089b8:	4619      	mov	r1, r3
 80089ba:	6938      	ldr	r0, [r7, #16]
 80089bc:	f7ff feda 	bl	8008774 <move_window>
 80089c0:	4603      	mov	r3, r0
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d130      	bne.n	8008a28 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80089c6:	693b      	ldr	r3, [r7, #16]
 80089c8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80089cc:	683b      	ldr	r3, [r7, #0]
 80089ce:	005b      	lsls	r3, r3, #1
 80089d0:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 80089d4:	4413      	add	r3, r2
 80089d6:	4618      	mov	r0, r3
 80089d8:	f7ff fc1c 	bl	8008214 <ld_word>
 80089dc:	4603      	mov	r3, r0
 80089de:	617b      	str	r3, [r7, #20]
			break;
 80089e0:	e025      	b.n	8008a2e <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80089e2:	693b      	ldr	r3, [r7, #16]
 80089e4:	6a1a      	ldr	r2, [r3, #32]
 80089e6:	683b      	ldr	r3, [r7, #0]
 80089e8:	09db      	lsrs	r3, r3, #7
 80089ea:	4413      	add	r3, r2
 80089ec:	4619      	mov	r1, r3
 80089ee:	6938      	ldr	r0, [r7, #16]
 80089f0:	f7ff fec0 	bl	8008774 <move_window>
 80089f4:	4603      	mov	r3, r0
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d118      	bne.n	8008a2c <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80089fa:	693b      	ldr	r3, [r7, #16]
 80089fc:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008a00:	683b      	ldr	r3, [r7, #0]
 8008a02:	009b      	lsls	r3, r3, #2
 8008a04:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8008a08:	4413      	add	r3, r2
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	f7ff fc1a 	bl	8008244 <ld_dword>
 8008a10:	4603      	mov	r3, r0
 8008a12:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8008a16:	617b      	str	r3, [r7, #20]
			break;
 8008a18:	e009      	b.n	8008a2e <get_fat+0x144>
>>>>>>> Stashed changes
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
<<<<<<< Updated upstream
 800855e:	2301      	movs	r3, #1
 8008560:	617b      	str	r3, [r7, #20]
 8008562:	e006      	b.n	8008572 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008564:	bf00      	nop
 8008566:	e004      	b.n	8008572 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008568:	bf00      	nop
 800856a:	e002      	b.n	8008572 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800856c:	bf00      	nop
 800856e:	e000      	b.n	8008572 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008570:	bf00      	nop
=======
 8008a1a:	2301      	movs	r3, #1
 8008a1c:	617b      	str	r3, [r7, #20]
 8008a1e:	e006      	b.n	8008a2e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008a20:	bf00      	nop
 8008a22:	e004      	b.n	8008a2e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008a24:	bf00      	nop
 8008a26:	e002      	b.n	8008a2e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008a28:	bf00      	nop
 8008a2a:	e000      	b.n	8008a2e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008a2c:	bf00      	nop
>>>>>>> Stashed changes
		}
	}

	return val;
<<<<<<< Updated upstream
 8008572:	697b      	ldr	r3, [r7, #20]
}
 8008574:	4618      	mov	r0, r3
 8008576:	3718      	adds	r7, #24
 8008578:	46bd      	mov	sp, r7
 800857a:	bd80      	pop	{r7, pc}

0800857c <put_fat>:
=======
 8008a2e:	697b      	ldr	r3, [r7, #20]
}
 8008a30:	4618      	mov	r0, r3
 8008a32:	3718      	adds	r7, #24
 8008a34:	46bd      	mov	sp, r7
 8008a36:	bd80      	pop	{r7, pc}

08008a38 <put_fat>:
>>>>>>> Stashed changes
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
<<<<<<< Updated upstream
 800857c:	b590      	push	{r4, r7, lr}
 800857e:	b089      	sub	sp, #36	@ 0x24
 8008580:	af00      	add	r7, sp, #0
 8008582:	60f8      	str	r0, [r7, #12]
 8008584:	60b9      	str	r1, [r7, #8]
 8008586:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8008588:	2302      	movs	r3, #2
 800858a:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800858c:	68bb      	ldr	r3, [r7, #8]
 800858e:	2b01      	cmp	r3, #1
 8008590:	f240 80d9 	bls.w	8008746 <put_fat+0x1ca>
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	699b      	ldr	r3, [r3, #24]
 8008598:	68ba      	ldr	r2, [r7, #8]
 800859a:	429a      	cmp	r2, r3
 800859c:	f080 80d3 	bcs.w	8008746 <put_fat+0x1ca>
		switch (fs->fs_type) {
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	781b      	ldrb	r3, [r3, #0]
 80085a4:	2b03      	cmp	r3, #3
 80085a6:	f000 8096 	beq.w	80086d6 <put_fat+0x15a>
 80085aa:	2b03      	cmp	r3, #3
 80085ac:	f300 80cb 	bgt.w	8008746 <put_fat+0x1ca>
 80085b0:	2b01      	cmp	r3, #1
 80085b2:	d002      	beq.n	80085ba <put_fat+0x3e>
 80085b4:	2b02      	cmp	r3, #2
 80085b6:	d06e      	beq.n	8008696 <put_fat+0x11a>
 80085b8:	e0c5      	b.n	8008746 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80085ba:	68bb      	ldr	r3, [r7, #8]
 80085bc:	61bb      	str	r3, [r7, #24]
 80085be:	69bb      	ldr	r3, [r7, #24]
 80085c0:	085b      	lsrs	r3, r3, #1
 80085c2:	69ba      	ldr	r2, [r7, #24]
 80085c4:	4413      	add	r3, r2
 80085c6:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80085cc:	69bb      	ldr	r3, [r7, #24]
 80085ce:	0a5b      	lsrs	r3, r3, #9
 80085d0:	4413      	add	r3, r2
 80085d2:	4619      	mov	r1, r3
 80085d4:	68f8      	ldr	r0, [r7, #12]
 80085d6:	f7ff fe6f 	bl	80082b8 <move_window>
 80085da:	4603      	mov	r3, r0
 80085dc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80085de:	7ffb      	ldrb	r3, [r7, #31]
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	f040 80a9 	bne.w	8008738 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80085ec:	69bb      	ldr	r3, [r7, #24]
 80085ee:	1c59      	adds	r1, r3, #1
 80085f0:	61b9      	str	r1, [r7, #24]
 80085f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085f6:	4413      	add	r3, r2
 80085f8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80085fa:	68bb      	ldr	r3, [r7, #8]
 80085fc:	f003 0301 	and.w	r3, r3, #1
 8008600:	2b00      	cmp	r3, #0
 8008602:	d00d      	beq.n	8008620 <put_fat+0xa4>
 8008604:	697b      	ldr	r3, [r7, #20]
 8008606:	781b      	ldrb	r3, [r3, #0]
 8008608:	b25b      	sxtb	r3, r3
 800860a:	f003 030f 	and.w	r3, r3, #15
 800860e:	b25a      	sxtb	r2, r3
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	b25b      	sxtb	r3, r3
 8008614:	011b      	lsls	r3, r3, #4
 8008616:	b25b      	sxtb	r3, r3
 8008618:	4313      	orrs	r3, r2
 800861a:	b25b      	sxtb	r3, r3
 800861c:	b2db      	uxtb	r3, r3
 800861e:	e001      	b.n	8008624 <put_fat+0xa8>
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	b2db      	uxtb	r3, r3
 8008624:	697a      	ldr	r2, [r7, #20]
 8008626:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	2201      	movs	r2, #1
 800862c:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008632:	69bb      	ldr	r3, [r7, #24]
 8008634:	0a5b      	lsrs	r3, r3, #9
 8008636:	4413      	add	r3, r2
 8008638:	4619      	mov	r1, r3
 800863a:	68f8      	ldr	r0, [r7, #12]
 800863c:	f7ff fe3c 	bl	80082b8 <move_window>
 8008640:	4603      	mov	r3, r0
 8008642:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008644:	7ffb      	ldrb	r3, [r7, #31]
 8008646:	2b00      	cmp	r3, #0
 8008648:	d178      	bne.n	800873c <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8008650:	69bb      	ldr	r3, [r7, #24]
 8008652:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008656:	4413      	add	r3, r2
 8008658:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800865a:	68bb      	ldr	r3, [r7, #8]
 800865c:	f003 0301 	and.w	r3, r3, #1
 8008660:	2b00      	cmp	r3, #0
 8008662:	d003      	beq.n	800866c <put_fat+0xf0>
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	091b      	lsrs	r3, r3, #4
 8008668:	b2db      	uxtb	r3, r3
 800866a:	e00e      	b.n	800868a <put_fat+0x10e>
 800866c:	697b      	ldr	r3, [r7, #20]
 800866e:	781b      	ldrb	r3, [r3, #0]
 8008670:	b25b      	sxtb	r3, r3
 8008672:	f023 030f 	bic.w	r3, r3, #15
 8008676:	b25a      	sxtb	r2, r3
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	0a1b      	lsrs	r3, r3, #8
 800867c:	b25b      	sxtb	r3, r3
 800867e:	f003 030f 	and.w	r3, r3, #15
 8008682:	b25b      	sxtb	r3, r3
 8008684:	4313      	orrs	r3, r2
 8008686:	b25b      	sxtb	r3, r3
 8008688:	b2db      	uxtb	r3, r3
 800868a:	697a      	ldr	r2, [r7, #20]
 800868c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	2201      	movs	r2, #1
 8008692:	70da      	strb	r2, [r3, #3]
			break;
 8008694:	e057      	b.n	8008746 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800869a:	68bb      	ldr	r3, [r7, #8]
 800869c:	0a1b      	lsrs	r3, r3, #8
 800869e:	4413      	add	r3, r2
 80086a0:	4619      	mov	r1, r3
 80086a2:	68f8      	ldr	r0, [r7, #12]
 80086a4:	f7ff fe08 	bl	80082b8 <move_window>
 80086a8:	4603      	mov	r3, r0
 80086aa:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80086ac:	7ffb      	ldrb	r3, [r7, #31]
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d146      	bne.n	8008740 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80086b8:	68bb      	ldr	r3, [r7, #8]
 80086ba:	005b      	lsls	r3, r3, #1
 80086bc:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 80086c0:	4413      	add	r3, r2
 80086c2:	687a      	ldr	r2, [r7, #4]
 80086c4:	b292      	uxth	r2, r2
 80086c6:	4611      	mov	r1, r2
 80086c8:	4618      	mov	r0, r3
 80086ca:	f7ff fb4f 	bl	8007d6c <st_word>
			fs->wflag = 1;
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	2201      	movs	r2, #1
 80086d2:	70da      	strb	r2, [r3, #3]
			break;
 80086d4:	e037      	b.n	8008746 <put_fat+0x1ca>
=======
 8008a38:	b590      	push	{r4, r7, lr}
 8008a3a:	b089      	sub	sp, #36	@ 0x24
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	60f8      	str	r0, [r7, #12]
 8008a40:	60b9      	str	r1, [r7, #8]
 8008a42:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8008a44:	2302      	movs	r3, #2
 8008a46:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8008a48:	68bb      	ldr	r3, [r7, #8]
 8008a4a:	2b01      	cmp	r3, #1
 8008a4c:	f240 80d9 	bls.w	8008c02 <put_fat+0x1ca>
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	695b      	ldr	r3, [r3, #20]
 8008a54:	68ba      	ldr	r2, [r7, #8]
 8008a56:	429a      	cmp	r2, r3
 8008a58:	f080 80d3 	bcs.w	8008c02 <put_fat+0x1ca>
		switch (fs->fs_type) {
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	781b      	ldrb	r3, [r3, #0]
 8008a60:	2b03      	cmp	r3, #3
 8008a62:	f000 8096 	beq.w	8008b92 <put_fat+0x15a>
 8008a66:	2b03      	cmp	r3, #3
 8008a68:	f300 80cb 	bgt.w	8008c02 <put_fat+0x1ca>
 8008a6c:	2b01      	cmp	r3, #1
 8008a6e:	d002      	beq.n	8008a76 <put_fat+0x3e>
 8008a70:	2b02      	cmp	r3, #2
 8008a72:	d06e      	beq.n	8008b52 <put_fat+0x11a>
 8008a74:	e0c5      	b.n	8008c02 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8008a76:	68bb      	ldr	r3, [r7, #8]
 8008a78:	61bb      	str	r3, [r7, #24]
 8008a7a:	69bb      	ldr	r3, [r7, #24]
 8008a7c:	085b      	lsrs	r3, r3, #1
 8008a7e:	69ba      	ldr	r2, [r7, #24]
 8008a80:	4413      	add	r3, r2
 8008a82:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	6a1a      	ldr	r2, [r3, #32]
 8008a88:	69bb      	ldr	r3, [r7, #24]
 8008a8a:	0a5b      	lsrs	r3, r3, #9
 8008a8c:	4413      	add	r3, r2
 8008a8e:	4619      	mov	r1, r3
 8008a90:	68f8      	ldr	r0, [r7, #12]
 8008a92:	f7ff fe6f 	bl	8008774 <move_window>
 8008a96:	4603      	mov	r3, r0
 8008a98:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008a9a:	7ffb      	ldrb	r3, [r7, #31]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	f040 80a9 	bne.w	8008bf4 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008aa8:	69bb      	ldr	r3, [r7, #24]
 8008aaa:	1c59      	adds	r1, r3, #1
 8008aac:	61b9      	str	r1, [r7, #24]
 8008aae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ab2:	4413      	add	r3, r2
 8008ab4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8008ab6:	68bb      	ldr	r3, [r7, #8]
 8008ab8:	f003 0301 	and.w	r3, r3, #1
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d00d      	beq.n	8008adc <put_fat+0xa4>
 8008ac0:	697b      	ldr	r3, [r7, #20]
 8008ac2:	781b      	ldrb	r3, [r3, #0]
 8008ac4:	b25b      	sxtb	r3, r3
 8008ac6:	f003 030f 	and.w	r3, r3, #15
 8008aca:	b25a      	sxtb	r2, r3
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	b2db      	uxtb	r3, r3
 8008ad0:	011b      	lsls	r3, r3, #4
 8008ad2:	b25b      	sxtb	r3, r3
 8008ad4:	4313      	orrs	r3, r2
 8008ad6:	b25b      	sxtb	r3, r3
 8008ad8:	b2db      	uxtb	r3, r3
 8008ada:	e001      	b.n	8008ae0 <put_fat+0xa8>
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	b2db      	uxtb	r3, r3
 8008ae0:	697a      	ldr	r2, [r7, #20]
 8008ae2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	2201      	movs	r2, #1
 8008ae8:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	6a1a      	ldr	r2, [r3, #32]
 8008aee:	69bb      	ldr	r3, [r7, #24]
 8008af0:	0a5b      	lsrs	r3, r3, #9
 8008af2:	4413      	add	r3, r2
 8008af4:	4619      	mov	r1, r3
 8008af6:	68f8      	ldr	r0, [r7, #12]
 8008af8:	f7ff fe3c 	bl	8008774 <move_window>
 8008afc:	4603      	mov	r3, r0
 8008afe:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008b00:	7ffb      	ldrb	r3, [r7, #31]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d178      	bne.n	8008bf8 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008b0c:	69bb      	ldr	r3, [r7, #24]
 8008b0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b12:	4413      	add	r3, r2
 8008b14:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8008b16:	68bb      	ldr	r3, [r7, #8]
 8008b18:	f003 0301 	and.w	r3, r3, #1
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d003      	beq.n	8008b28 <put_fat+0xf0>
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	091b      	lsrs	r3, r3, #4
 8008b24:	b2db      	uxtb	r3, r3
 8008b26:	e00e      	b.n	8008b46 <put_fat+0x10e>
 8008b28:	697b      	ldr	r3, [r7, #20]
 8008b2a:	781b      	ldrb	r3, [r3, #0]
 8008b2c:	b25b      	sxtb	r3, r3
 8008b2e:	f023 030f 	bic.w	r3, r3, #15
 8008b32:	b25a      	sxtb	r2, r3
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	0a1b      	lsrs	r3, r3, #8
 8008b38:	b25b      	sxtb	r3, r3
 8008b3a:	f003 030f 	and.w	r3, r3, #15
 8008b3e:	b25b      	sxtb	r3, r3
 8008b40:	4313      	orrs	r3, r2
 8008b42:	b25b      	sxtb	r3, r3
 8008b44:	b2db      	uxtb	r3, r3
 8008b46:	697a      	ldr	r2, [r7, #20]
 8008b48:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	2201      	movs	r2, #1
 8008b4e:	70da      	strb	r2, [r3, #3]
			break;
 8008b50:	e057      	b.n	8008c02 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	6a1a      	ldr	r2, [r3, #32]
 8008b56:	68bb      	ldr	r3, [r7, #8]
 8008b58:	0a1b      	lsrs	r3, r3, #8
 8008b5a:	4413      	add	r3, r2
 8008b5c:	4619      	mov	r1, r3
 8008b5e:	68f8      	ldr	r0, [r7, #12]
 8008b60:	f7ff fe08 	bl	8008774 <move_window>
 8008b64:	4603      	mov	r3, r0
 8008b66:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008b68:	7ffb      	ldrb	r3, [r7, #31]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d146      	bne.n	8008bfc <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008b74:	68bb      	ldr	r3, [r7, #8]
 8008b76:	005b      	lsls	r3, r3, #1
 8008b78:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8008b7c:	4413      	add	r3, r2
 8008b7e:	687a      	ldr	r2, [r7, #4]
 8008b80:	b292      	uxth	r2, r2
 8008b82:	4611      	mov	r1, r2
 8008b84:	4618      	mov	r0, r3
 8008b86:	f7ff fb80 	bl	800828a <st_word>
			fs->wflag = 1;
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	2201      	movs	r2, #1
 8008b8e:	70da      	strb	r2, [r3, #3]
			break;
 8008b90:	e037      	b.n	8008c02 <put_fat+0x1ca>
>>>>>>> Stashed changes

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
<<<<<<< Updated upstream
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80086da:	68bb      	ldr	r3, [r7, #8]
 80086dc:	09db      	lsrs	r3, r3, #7
 80086de:	4413      	add	r3, r2
 80086e0:	4619      	mov	r1, r3
 80086e2:	68f8      	ldr	r0, [r7, #12]
 80086e4:	f7ff fde8 	bl	80082b8 <move_window>
 80086e8:	4603      	mov	r3, r0
 80086ea:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80086ec:	7ffb      	ldrb	r3, [r7, #31]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d128      	bne.n	8008744 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80086fe:	68bb      	ldr	r3, [r7, #8]
 8008700:	009b      	lsls	r3, r3, #2
 8008702:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8008706:	4413      	add	r3, r2
 8008708:	4618      	mov	r0, r3
 800870a:	f7ff fb0c 	bl	8007d26 <ld_dword>
 800870e:	4603      	mov	r3, r0
 8008710:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8008714:	4323      	orrs	r3, r4
 8008716:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800871e:	68bb      	ldr	r3, [r7, #8]
 8008720:	009b      	lsls	r3, r3, #2
 8008722:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8008726:	4413      	add	r3, r2
 8008728:	6879      	ldr	r1, [r7, #4]
 800872a:	4618      	mov	r0, r3
 800872c:	f7ff fb39 	bl	8007da2 <st_dword>
			fs->wflag = 1;
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	2201      	movs	r2, #1
 8008734:	70da      	strb	r2, [r3, #3]
			break;
 8008736:	e006      	b.n	8008746 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8008738:	bf00      	nop
 800873a:	e004      	b.n	8008746 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800873c:	bf00      	nop
 800873e:	e002      	b.n	8008746 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8008740:	bf00      	nop
 8008742:	e000      	b.n	8008746 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8008744:	bf00      	nop
		}
	}
	return res;
 8008746:	7ffb      	ldrb	r3, [r7, #31]
}
 8008748:	4618      	mov	r0, r3
 800874a:	3724      	adds	r7, #36	@ 0x24
 800874c:	46bd      	mov	sp, r7
 800874e:	bd90      	pop	{r4, r7, pc}

08008750 <remove_chain>:
=======
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	6a1a      	ldr	r2, [r3, #32]
 8008b96:	68bb      	ldr	r3, [r7, #8]
 8008b98:	09db      	lsrs	r3, r3, #7
 8008b9a:	4413      	add	r3, r2
 8008b9c:	4619      	mov	r1, r3
 8008b9e:	68f8      	ldr	r0, [r7, #12]
 8008ba0:	f7ff fde8 	bl	8008774 <move_window>
 8008ba4:	4603      	mov	r3, r0
 8008ba6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008ba8:	7ffb      	ldrb	r3, [r7, #31]
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d128      	bne.n	8008c00 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008bba:	68bb      	ldr	r3, [r7, #8]
 8008bbc:	009b      	lsls	r3, r3, #2
 8008bbe:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8008bc2:	4413      	add	r3, r2
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	f7ff fb3d 	bl	8008244 <ld_dword>
 8008bca:	4603      	mov	r3, r0
 8008bcc:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8008bd0:	4323      	orrs	r3, r4
 8008bd2:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008bda:	68bb      	ldr	r3, [r7, #8]
 8008bdc:	009b      	lsls	r3, r3, #2
 8008bde:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8008be2:	4413      	add	r3, r2
 8008be4:	6879      	ldr	r1, [r7, #4]
 8008be6:	4618      	mov	r0, r3
 8008be8:	f7ff fb6a 	bl	80082c0 <st_dword>
			fs->wflag = 1;
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	2201      	movs	r2, #1
 8008bf0:	70da      	strb	r2, [r3, #3]
			break;
 8008bf2:	e006      	b.n	8008c02 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8008bf4:	bf00      	nop
 8008bf6:	e004      	b.n	8008c02 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8008bf8:	bf00      	nop
 8008bfa:	e002      	b.n	8008c02 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8008bfc:	bf00      	nop
 8008bfe:	e000      	b.n	8008c02 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8008c00:	bf00      	nop
		}
	}
	return res;
 8008c02:	7ffb      	ldrb	r3, [r7, #31]
}
 8008c04:	4618      	mov	r0, r3
 8008c06:	3724      	adds	r7, #36	@ 0x24
 8008c08:	46bd      	mov	sp, r7
 8008c0a:	bd90      	pop	{r4, r7, pc}

08008c0c <remove_chain>:
>>>>>>> Stashed changes
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
<<<<<<< Updated upstream
 8008750:	b580      	push	{r7, lr}
 8008752:	b088      	sub	sp, #32
 8008754:	af00      	add	r7, sp, #0
 8008756:	60f8      	str	r0, [r7, #12]
 8008758:	60b9      	str	r1, [r7, #8]
 800875a:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800875c:	2300      	movs	r3, #0
 800875e:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	61bb      	str	r3, [r7, #24]
=======
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	b088      	sub	sp, #32
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	60f8      	str	r0, [r7, #12]
 8008c14:	60b9      	str	r1, [r7, #8]
 8008c16:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8008c18:	2300      	movs	r3, #0
 8008c1a:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	61bb      	str	r3, [r7, #24]
>>>>>>> Stashed changes
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
<<<<<<< Updated upstream
 8008766:	68bb      	ldr	r3, [r7, #8]
 8008768:	2b01      	cmp	r3, #1
 800876a:	d904      	bls.n	8008776 <remove_chain+0x26>
 800876c:	69bb      	ldr	r3, [r7, #24]
 800876e:	699b      	ldr	r3, [r3, #24]
 8008770:	68ba      	ldr	r2, [r7, #8]
 8008772:	429a      	cmp	r2, r3
 8008774:	d301      	bcc.n	800877a <remove_chain+0x2a>
 8008776:	2302      	movs	r3, #2
 8008778:	e04b      	b.n	8008812 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	2b00      	cmp	r3, #0
 800877e:	d00c      	beq.n	800879a <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8008780:	f04f 32ff 	mov.w	r2, #4294967295
 8008784:	6879      	ldr	r1, [r7, #4]
 8008786:	69b8      	ldr	r0, [r7, #24]
 8008788:	f7ff fef8 	bl	800857c <put_fat>
 800878c:	4603      	mov	r3, r0
 800878e:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8008790:	7ffb      	ldrb	r3, [r7, #31]
 8008792:	2b00      	cmp	r3, #0
 8008794:	d001      	beq.n	800879a <remove_chain+0x4a>
 8008796:	7ffb      	ldrb	r3, [r7, #31]
 8008798:	e03b      	b.n	8008812 <remove_chain+0xc2>
=======
 8008c22:	68bb      	ldr	r3, [r7, #8]
 8008c24:	2b01      	cmp	r3, #1
 8008c26:	d904      	bls.n	8008c32 <remove_chain+0x26>
 8008c28:	69bb      	ldr	r3, [r7, #24]
 8008c2a:	695b      	ldr	r3, [r3, #20]
 8008c2c:	68ba      	ldr	r2, [r7, #8]
 8008c2e:	429a      	cmp	r2, r3
 8008c30:	d301      	bcc.n	8008c36 <remove_chain+0x2a>
 8008c32:	2302      	movs	r3, #2
 8008c34:	e04b      	b.n	8008cce <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d00c      	beq.n	8008c56 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8008c3c:	f04f 32ff 	mov.w	r2, #4294967295
 8008c40:	6879      	ldr	r1, [r7, #4]
 8008c42:	69b8      	ldr	r0, [r7, #24]
 8008c44:	f7ff fef8 	bl	8008a38 <put_fat>
 8008c48:	4603      	mov	r3, r0
 8008c4a:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8008c4c:	7ffb      	ldrb	r3, [r7, #31]
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d001      	beq.n	8008c56 <remove_chain+0x4a>
 8008c52:	7ffb      	ldrb	r3, [r7, #31]
 8008c54:	e03b      	b.n	8008cce <remove_chain+0xc2>
>>>>>>> Stashed changes
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
<<<<<<< Updated upstream
 800879a:	68b9      	ldr	r1, [r7, #8]
 800879c:	68f8      	ldr	r0, [r7, #12]
 800879e:	f7ff fe46 	bl	800842e <get_fat>
 80087a2:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80087a4:	697b      	ldr	r3, [r7, #20]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d031      	beq.n	800880e <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80087aa:	697b      	ldr	r3, [r7, #20]
 80087ac:	2b01      	cmp	r3, #1
 80087ae:	d101      	bne.n	80087b4 <remove_chain+0x64>
 80087b0:	2302      	movs	r3, #2
 80087b2:	e02e      	b.n	8008812 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80087b4:	697b      	ldr	r3, [r7, #20]
 80087b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087ba:	d101      	bne.n	80087c0 <remove_chain+0x70>
 80087bc:	2301      	movs	r3, #1
 80087be:	e028      	b.n	8008812 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80087c0:	2200      	movs	r2, #0
 80087c2:	68b9      	ldr	r1, [r7, #8]
 80087c4:	69b8      	ldr	r0, [r7, #24]
 80087c6:	f7ff fed9 	bl	800857c <put_fat>
 80087ca:	4603      	mov	r3, r0
 80087cc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80087ce:	7ffb      	ldrb	r3, [r7, #31]
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d001      	beq.n	80087d8 <remove_chain+0x88>
 80087d4:	7ffb      	ldrb	r3, [r7, #31]
 80087d6:	e01c      	b.n	8008812 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80087d8:	69bb      	ldr	r3, [r7, #24]
 80087da:	695a      	ldr	r2, [r3, #20]
 80087dc:	69bb      	ldr	r3, [r7, #24]
 80087de:	699b      	ldr	r3, [r3, #24]
 80087e0:	3b02      	subs	r3, #2
 80087e2:	429a      	cmp	r2, r3
 80087e4:	d20b      	bcs.n	80087fe <remove_chain+0xae>
			fs->free_clst++;
 80087e6:	69bb      	ldr	r3, [r7, #24]
 80087e8:	695b      	ldr	r3, [r3, #20]
 80087ea:	1c5a      	adds	r2, r3, #1
 80087ec:	69bb      	ldr	r3, [r7, #24]
 80087ee:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 80087f0:	69bb      	ldr	r3, [r7, #24]
 80087f2:	791b      	ldrb	r3, [r3, #4]
 80087f4:	f043 0301 	orr.w	r3, r3, #1
 80087f8:	b2da      	uxtb	r2, r3
 80087fa:	69bb      	ldr	r3, [r7, #24]
 80087fc:	711a      	strb	r2, [r3, #4]
=======
 8008c56:	68b9      	ldr	r1, [r7, #8]
 8008c58:	68f8      	ldr	r0, [r7, #12]
 8008c5a:	f7ff fe46 	bl	80088ea <get_fat>
 8008c5e:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8008c60:	697b      	ldr	r3, [r7, #20]
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d031      	beq.n	8008cca <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8008c66:	697b      	ldr	r3, [r7, #20]
 8008c68:	2b01      	cmp	r3, #1
 8008c6a:	d101      	bne.n	8008c70 <remove_chain+0x64>
 8008c6c:	2302      	movs	r3, #2
 8008c6e:	e02e      	b.n	8008cce <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8008c70:	697b      	ldr	r3, [r7, #20]
 8008c72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c76:	d101      	bne.n	8008c7c <remove_chain+0x70>
 8008c78:	2301      	movs	r3, #1
 8008c7a:	e028      	b.n	8008cce <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8008c7c:	2200      	movs	r2, #0
 8008c7e:	68b9      	ldr	r1, [r7, #8]
 8008c80:	69b8      	ldr	r0, [r7, #24]
 8008c82:	f7ff fed9 	bl	8008a38 <put_fat>
 8008c86:	4603      	mov	r3, r0
 8008c88:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8008c8a:	7ffb      	ldrb	r3, [r7, #31]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d001      	beq.n	8008c94 <remove_chain+0x88>
 8008c90:	7ffb      	ldrb	r3, [r7, #31]
 8008c92:	e01c      	b.n	8008cce <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8008c94:	69bb      	ldr	r3, [r7, #24]
 8008c96:	691a      	ldr	r2, [r3, #16]
 8008c98:	69bb      	ldr	r3, [r7, #24]
 8008c9a:	695b      	ldr	r3, [r3, #20]
 8008c9c:	3b02      	subs	r3, #2
 8008c9e:	429a      	cmp	r2, r3
 8008ca0:	d20b      	bcs.n	8008cba <remove_chain+0xae>
			fs->free_clst++;
 8008ca2:	69bb      	ldr	r3, [r7, #24]
 8008ca4:	691b      	ldr	r3, [r3, #16]
 8008ca6:	1c5a      	adds	r2, r3, #1
 8008ca8:	69bb      	ldr	r3, [r7, #24]
 8008caa:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8008cac:	69bb      	ldr	r3, [r7, #24]
 8008cae:	791b      	ldrb	r3, [r3, #4]
 8008cb0:	f043 0301 	orr.w	r3, r3, #1
 8008cb4:	b2da      	uxtb	r2, r3
 8008cb6:	69bb      	ldr	r3, [r7, #24]
 8008cb8:	711a      	strb	r2, [r3, #4]
>>>>>>> Stashed changes
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
<<<<<<< Updated upstream
 80087fe:	697b      	ldr	r3, [r7, #20]
 8008800:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8008802:	69bb      	ldr	r3, [r7, #24]
 8008804:	699b      	ldr	r3, [r3, #24]
 8008806:	68ba      	ldr	r2, [r7, #8]
 8008808:	429a      	cmp	r2, r3
 800880a:	d3c6      	bcc.n	800879a <remove_chain+0x4a>
 800880c:	e000      	b.n	8008810 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800880e:	bf00      	nop
=======
 8008cba:	697b      	ldr	r3, [r7, #20]
 8008cbc:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8008cbe:	69bb      	ldr	r3, [r7, #24]
 8008cc0:	695b      	ldr	r3, [r3, #20]
 8008cc2:	68ba      	ldr	r2, [r7, #8]
 8008cc4:	429a      	cmp	r2, r3
 8008cc6:	d3c6      	bcc.n	8008c56 <remove_chain+0x4a>
 8008cc8:	e000      	b.n	8008ccc <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8008cca:	bf00      	nop
>>>>>>> Stashed changes
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
<<<<<<< Updated upstream
 8008810:	2300      	movs	r3, #0
}
 8008812:	4618      	mov	r0, r3
 8008814:	3720      	adds	r7, #32
 8008816:	46bd      	mov	sp, r7
 8008818:	bd80      	pop	{r7, pc}

0800881a <create_chain>:
=======
 8008ccc:	2300      	movs	r3, #0
}
 8008cce:	4618      	mov	r0, r3
 8008cd0:	3720      	adds	r7, #32
 8008cd2:	46bd      	mov	sp, r7
 8008cd4:	bd80      	pop	{r7, pc}

08008cd6 <create_chain>:
>>>>>>> Stashed changes
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
<<<<<<< Updated upstream
 800881a:	b580      	push	{r7, lr}
 800881c:	b088      	sub	sp, #32
 800881e:	af00      	add	r7, sp, #0
 8008820:	6078      	str	r0, [r7, #4]
 8008822:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800882a:	683b      	ldr	r3, [r7, #0]
 800882c:	2b00      	cmp	r3, #0
 800882e:	d10d      	bne.n	800884c <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8008830:	693b      	ldr	r3, [r7, #16]
 8008832:	691b      	ldr	r3, [r3, #16]
 8008834:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8008836:	69bb      	ldr	r3, [r7, #24]
 8008838:	2b00      	cmp	r3, #0
 800883a:	d004      	beq.n	8008846 <create_chain+0x2c>
 800883c:	693b      	ldr	r3, [r7, #16]
 800883e:	699b      	ldr	r3, [r3, #24]
 8008840:	69ba      	ldr	r2, [r7, #24]
 8008842:	429a      	cmp	r2, r3
 8008844:	d31b      	bcc.n	800887e <create_chain+0x64>
 8008846:	2301      	movs	r3, #1
 8008848:	61bb      	str	r3, [r7, #24]
 800884a:	e018      	b.n	800887e <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800884c:	6839      	ldr	r1, [r7, #0]
 800884e:	6878      	ldr	r0, [r7, #4]
 8008850:	f7ff fded 	bl	800842e <get_fat>
 8008854:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	2b01      	cmp	r3, #1
 800885a:	d801      	bhi.n	8008860 <create_chain+0x46>
 800885c:	2301      	movs	r3, #1
 800885e:	e070      	b.n	8008942 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008866:	d101      	bne.n	800886c <create_chain+0x52>
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	e06a      	b.n	8008942 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800886c:	693b      	ldr	r3, [r7, #16]
 800886e:	699b      	ldr	r3, [r3, #24]
 8008870:	68fa      	ldr	r2, [r7, #12]
 8008872:	429a      	cmp	r2, r3
 8008874:	d201      	bcs.n	800887a <create_chain+0x60>
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	e063      	b.n	8008942 <create_chain+0x128>
		scl = clst;
 800887a:	683b      	ldr	r3, [r7, #0]
 800887c:	61bb      	str	r3, [r7, #24]
=======
 8008cd6:	b580      	push	{r7, lr}
 8008cd8:	b088      	sub	sp, #32
 8008cda:	af00      	add	r7, sp, #0
 8008cdc:	6078      	str	r0, [r7, #4]
 8008cde:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8008ce6:	683b      	ldr	r3, [r7, #0]
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d10d      	bne.n	8008d08 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8008cec:	693b      	ldr	r3, [r7, #16]
 8008cee:	68db      	ldr	r3, [r3, #12]
 8008cf0:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8008cf2:	69bb      	ldr	r3, [r7, #24]
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d004      	beq.n	8008d02 <create_chain+0x2c>
 8008cf8:	693b      	ldr	r3, [r7, #16]
 8008cfa:	695b      	ldr	r3, [r3, #20]
 8008cfc:	69ba      	ldr	r2, [r7, #24]
 8008cfe:	429a      	cmp	r2, r3
 8008d00:	d31b      	bcc.n	8008d3a <create_chain+0x64>
 8008d02:	2301      	movs	r3, #1
 8008d04:	61bb      	str	r3, [r7, #24]
 8008d06:	e018      	b.n	8008d3a <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8008d08:	6839      	ldr	r1, [r7, #0]
 8008d0a:	6878      	ldr	r0, [r7, #4]
 8008d0c:	f7ff fded 	bl	80088ea <get_fat>
 8008d10:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	2b01      	cmp	r3, #1
 8008d16:	d801      	bhi.n	8008d1c <create_chain+0x46>
 8008d18:	2301      	movs	r3, #1
 8008d1a:	e070      	b.n	8008dfe <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d22:	d101      	bne.n	8008d28 <create_chain+0x52>
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	e06a      	b.n	8008dfe <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8008d28:	693b      	ldr	r3, [r7, #16]
 8008d2a:	695b      	ldr	r3, [r3, #20]
 8008d2c:	68fa      	ldr	r2, [r7, #12]
 8008d2e:	429a      	cmp	r2, r3
 8008d30:	d201      	bcs.n	8008d36 <create_chain+0x60>
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	e063      	b.n	8008dfe <create_chain+0x128>
		scl = clst;
 8008d36:	683b      	ldr	r3, [r7, #0]
 8008d38:	61bb      	str	r3, [r7, #24]
>>>>>>> Stashed changes
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
<<<<<<< Updated upstream
 800887e:	69bb      	ldr	r3, [r7, #24]
 8008880:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8008882:	69fb      	ldr	r3, [r7, #28]
 8008884:	3301      	adds	r3, #1
 8008886:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8008888:	693b      	ldr	r3, [r7, #16]
 800888a:	699b      	ldr	r3, [r3, #24]
 800888c:	69fa      	ldr	r2, [r7, #28]
 800888e:	429a      	cmp	r2, r3
 8008890:	d307      	bcc.n	80088a2 <create_chain+0x88>
				ncl = 2;
 8008892:	2302      	movs	r3, #2
 8008894:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8008896:	69fa      	ldr	r2, [r7, #28]
 8008898:	69bb      	ldr	r3, [r7, #24]
 800889a:	429a      	cmp	r2, r3
 800889c:	d901      	bls.n	80088a2 <create_chain+0x88>
 800889e:	2300      	movs	r3, #0
 80088a0:	e04f      	b.n	8008942 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80088a2:	69f9      	ldr	r1, [r7, #28]
 80088a4:	6878      	ldr	r0, [r7, #4]
 80088a6:	f7ff fdc2 	bl	800842e <get_fat>
 80088aa:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d00e      	beq.n	80088d0 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	2b01      	cmp	r3, #1
 80088b6:	d003      	beq.n	80088c0 <create_chain+0xa6>
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088be:	d101      	bne.n	80088c4 <create_chain+0xaa>
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	e03e      	b.n	8008942 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80088c4:	69fa      	ldr	r2, [r7, #28]
 80088c6:	69bb      	ldr	r3, [r7, #24]
 80088c8:	429a      	cmp	r2, r3
 80088ca:	d1da      	bne.n	8008882 <create_chain+0x68>
 80088cc:	2300      	movs	r3, #0
 80088ce:	e038      	b.n	8008942 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80088d0:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80088d2:	f04f 32ff 	mov.w	r2, #4294967295
 80088d6:	69f9      	ldr	r1, [r7, #28]
 80088d8:	6938      	ldr	r0, [r7, #16]
 80088da:	f7ff fe4f 	bl	800857c <put_fat>
 80088de:	4603      	mov	r3, r0
 80088e0:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80088e2:	7dfb      	ldrb	r3, [r7, #23]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d109      	bne.n	80088fc <create_chain+0xe2>
 80088e8:	683b      	ldr	r3, [r7, #0]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d006      	beq.n	80088fc <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80088ee:	69fa      	ldr	r2, [r7, #28]
 80088f0:	6839      	ldr	r1, [r7, #0]
 80088f2:	6938      	ldr	r0, [r7, #16]
 80088f4:	f7ff fe42 	bl	800857c <put_fat>
 80088f8:	4603      	mov	r3, r0
 80088fa:	75fb      	strb	r3, [r7, #23]
=======
 8008d3a:	69bb      	ldr	r3, [r7, #24]
 8008d3c:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8008d3e:	69fb      	ldr	r3, [r7, #28]
 8008d40:	3301      	adds	r3, #1
 8008d42:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8008d44:	693b      	ldr	r3, [r7, #16]
 8008d46:	695b      	ldr	r3, [r3, #20]
 8008d48:	69fa      	ldr	r2, [r7, #28]
 8008d4a:	429a      	cmp	r2, r3
 8008d4c:	d307      	bcc.n	8008d5e <create_chain+0x88>
				ncl = 2;
 8008d4e:	2302      	movs	r3, #2
 8008d50:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8008d52:	69fa      	ldr	r2, [r7, #28]
 8008d54:	69bb      	ldr	r3, [r7, #24]
 8008d56:	429a      	cmp	r2, r3
 8008d58:	d901      	bls.n	8008d5e <create_chain+0x88>
 8008d5a:	2300      	movs	r3, #0
 8008d5c:	e04f      	b.n	8008dfe <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8008d5e:	69f9      	ldr	r1, [r7, #28]
 8008d60:	6878      	ldr	r0, [r7, #4]
 8008d62:	f7ff fdc2 	bl	80088ea <get_fat>
 8008d66:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d00e      	beq.n	8008d8c <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	2b01      	cmp	r3, #1
 8008d72:	d003      	beq.n	8008d7c <create_chain+0xa6>
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d7a:	d101      	bne.n	8008d80 <create_chain+0xaa>
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	e03e      	b.n	8008dfe <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8008d80:	69fa      	ldr	r2, [r7, #28]
 8008d82:	69bb      	ldr	r3, [r7, #24]
 8008d84:	429a      	cmp	r2, r3
 8008d86:	d1da      	bne.n	8008d3e <create_chain+0x68>
 8008d88:	2300      	movs	r3, #0
 8008d8a:	e038      	b.n	8008dfe <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8008d8c:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8008d8e:	f04f 32ff 	mov.w	r2, #4294967295
 8008d92:	69f9      	ldr	r1, [r7, #28]
 8008d94:	6938      	ldr	r0, [r7, #16]
 8008d96:	f7ff fe4f 	bl	8008a38 <put_fat>
 8008d9a:	4603      	mov	r3, r0
 8008d9c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8008d9e:	7dfb      	ldrb	r3, [r7, #23]
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d109      	bne.n	8008db8 <create_chain+0xe2>
 8008da4:	683b      	ldr	r3, [r7, #0]
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d006      	beq.n	8008db8 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8008daa:	69fa      	ldr	r2, [r7, #28]
 8008dac:	6839      	ldr	r1, [r7, #0]
 8008dae:	6938      	ldr	r0, [r7, #16]
 8008db0:	f7ff fe42 	bl	8008a38 <put_fat>
 8008db4:	4603      	mov	r3, r0
 8008db6:	75fb      	strb	r3, [r7, #23]
>>>>>>> Stashed changes
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
<<<<<<< Updated upstream
 80088fc:	7dfb      	ldrb	r3, [r7, #23]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d116      	bne.n	8008930 <create_chain+0x116>
		fs->last_clst = ncl;
 8008902:	693b      	ldr	r3, [r7, #16]
 8008904:	69fa      	ldr	r2, [r7, #28]
 8008906:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8008908:	693b      	ldr	r3, [r7, #16]
 800890a:	695a      	ldr	r2, [r3, #20]
 800890c:	693b      	ldr	r3, [r7, #16]
 800890e:	699b      	ldr	r3, [r3, #24]
 8008910:	3b02      	subs	r3, #2
 8008912:	429a      	cmp	r2, r3
 8008914:	d804      	bhi.n	8008920 <create_chain+0x106>
 8008916:	693b      	ldr	r3, [r7, #16]
 8008918:	695b      	ldr	r3, [r3, #20]
 800891a:	1e5a      	subs	r2, r3, #1
 800891c:	693b      	ldr	r3, [r7, #16]
 800891e:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8008920:	693b      	ldr	r3, [r7, #16]
 8008922:	791b      	ldrb	r3, [r3, #4]
 8008924:	f043 0301 	orr.w	r3, r3, #1
 8008928:	b2da      	uxtb	r2, r3
 800892a:	693b      	ldr	r3, [r7, #16]
 800892c:	711a      	strb	r2, [r3, #4]
 800892e:	e007      	b.n	8008940 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8008930:	7dfb      	ldrb	r3, [r7, #23]
 8008932:	2b01      	cmp	r3, #1
 8008934:	d102      	bne.n	800893c <create_chain+0x122>
 8008936:	f04f 33ff 	mov.w	r3, #4294967295
 800893a:	e000      	b.n	800893e <create_chain+0x124>
 800893c:	2301      	movs	r3, #1
 800893e:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8008940:	69fb      	ldr	r3, [r7, #28]
}
 8008942:	4618      	mov	r0, r3
 8008944:	3720      	adds	r7, #32
 8008946:	46bd      	mov	sp, r7
 8008948:	bd80      	pop	{r7, pc}

0800894a <clmt_clust>:
=======
 8008db8:	7dfb      	ldrb	r3, [r7, #23]
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d116      	bne.n	8008dec <create_chain+0x116>
		fs->last_clst = ncl;
 8008dbe:	693b      	ldr	r3, [r7, #16]
 8008dc0:	69fa      	ldr	r2, [r7, #28]
 8008dc2:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8008dc4:	693b      	ldr	r3, [r7, #16]
 8008dc6:	691a      	ldr	r2, [r3, #16]
 8008dc8:	693b      	ldr	r3, [r7, #16]
 8008dca:	695b      	ldr	r3, [r3, #20]
 8008dcc:	3b02      	subs	r3, #2
 8008dce:	429a      	cmp	r2, r3
 8008dd0:	d804      	bhi.n	8008ddc <create_chain+0x106>
 8008dd2:	693b      	ldr	r3, [r7, #16]
 8008dd4:	691b      	ldr	r3, [r3, #16]
 8008dd6:	1e5a      	subs	r2, r3, #1
 8008dd8:	693b      	ldr	r3, [r7, #16]
 8008dda:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8008ddc:	693b      	ldr	r3, [r7, #16]
 8008dde:	791b      	ldrb	r3, [r3, #4]
 8008de0:	f043 0301 	orr.w	r3, r3, #1
 8008de4:	b2da      	uxtb	r2, r3
 8008de6:	693b      	ldr	r3, [r7, #16]
 8008de8:	711a      	strb	r2, [r3, #4]
 8008dea:	e007      	b.n	8008dfc <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8008dec:	7dfb      	ldrb	r3, [r7, #23]
 8008dee:	2b01      	cmp	r3, #1
 8008df0:	d102      	bne.n	8008df8 <create_chain+0x122>
 8008df2:	f04f 33ff 	mov.w	r3, #4294967295
 8008df6:	e000      	b.n	8008dfa <create_chain+0x124>
 8008df8:	2301      	movs	r3, #1
 8008dfa:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8008dfc:	69fb      	ldr	r3, [r7, #28]
}
 8008dfe:	4618      	mov	r0, r3
 8008e00:	3720      	adds	r7, #32
 8008e02:	46bd      	mov	sp, r7
 8008e04:	bd80      	pop	{r7, pc}

08008e06 <clmt_clust>:
>>>>>>> Stashed changes
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
<<<<<<< Updated upstream
 800894a:	b480      	push	{r7}
 800894c:	b087      	sub	sp, #28
 800894e:	af00      	add	r7, sp, #0
 8008950:	6078      	str	r0, [r7, #4]
 8008952:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800895e:	3304      	adds	r3, #4
 8008960:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8008962:	683b      	ldr	r3, [r7, #0]
 8008964:	0a5b      	lsrs	r3, r3, #9
 8008966:	68fa      	ldr	r2, [r7, #12]
 8008968:	8952      	ldrh	r2, [r2, #10]
 800896a:	fbb3 f3f2 	udiv	r3, r3, r2
 800896e:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008970:	693b      	ldr	r3, [r7, #16]
 8008972:	1d1a      	adds	r2, r3, #4
 8008974:	613a      	str	r2, [r7, #16]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800897a:	68bb      	ldr	r3, [r7, #8]
 800897c:	2b00      	cmp	r3, #0
 800897e:	d101      	bne.n	8008984 <clmt_clust+0x3a>
 8008980:	2300      	movs	r3, #0
 8008982:	e010      	b.n	80089a6 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8008984:	697a      	ldr	r2, [r7, #20]
 8008986:	68bb      	ldr	r3, [r7, #8]
 8008988:	429a      	cmp	r2, r3
 800898a:	d307      	bcc.n	800899c <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800898c:	697a      	ldr	r2, [r7, #20]
 800898e:	68bb      	ldr	r3, [r7, #8]
 8008990:	1ad3      	subs	r3, r2, r3
 8008992:	617b      	str	r3, [r7, #20]
 8008994:	693b      	ldr	r3, [r7, #16]
 8008996:	3304      	adds	r3, #4
 8008998:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800899a:	e7e9      	b.n	8008970 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800899c:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800899e:	693b      	ldr	r3, [r7, #16]
 80089a0:	681a      	ldr	r2, [r3, #0]
 80089a2:	697b      	ldr	r3, [r7, #20]
 80089a4:	4413      	add	r3, r2
}
 80089a6:	4618      	mov	r0, r3
 80089a8:	371c      	adds	r7, #28
 80089aa:	46bd      	mov	sp, r7
 80089ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b0:	4770      	bx	lr

080089b2 <dir_sdi>:
=======
 8008e06:	b480      	push	{r7}
 8008e08:	b087      	sub	sp, #28
 8008e0a:	af00      	add	r7, sp, #0
 8008e0c:	6078      	str	r0, [r7, #4]
 8008e0e:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e1a:	3304      	adds	r3, #4
 8008e1c:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8008e1e:	683b      	ldr	r3, [r7, #0]
 8008e20:	0a5b      	lsrs	r3, r3, #9
 8008e22:	68fa      	ldr	r2, [r7, #12]
 8008e24:	8952      	ldrh	r2, [r2, #10]
 8008e26:	fbb3 f3f2 	udiv	r3, r3, r2
 8008e2a:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008e2c:	693b      	ldr	r3, [r7, #16]
 8008e2e:	1d1a      	adds	r2, r3, #4
 8008e30:	613a      	str	r2, [r7, #16]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8008e36:	68bb      	ldr	r3, [r7, #8]
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d101      	bne.n	8008e40 <clmt_clust+0x3a>
 8008e3c:	2300      	movs	r3, #0
 8008e3e:	e010      	b.n	8008e62 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8008e40:	697a      	ldr	r2, [r7, #20]
 8008e42:	68bb      	ldr	r3, [r7, #8]
 8008e44:	429a      	cmp	r2, r3
 8008e46:	d307      	bcc.n	8008e58 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8008e48:	697a      	ldr	r2, [r7, #20]
 8008e4a:	68bb      	ldr	r3, [r7, #8]
 8008e4c:	1ad3      	subs	r3, r2, r3
 8008e4e:	617b      	str	r3, [r7, #20]
 8008e50:	693b      	ldr	r3, [r7, #16]
 8008e52:	3304      	adds	r3, #4
 8008e54:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008e56:	e7e9      	b.n	8008e2c <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8008e58:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8008e5a:	693b      	ldr	r3, [r7, #16]
 8008e5c:	681a      	ldr	r2, [r3, #0]
 8008e5e:	697b      	ldr	r3, [r7, #20]
 8008e60:	4413      	add	r3, r2
}
 8008e62:	4618      	mov	r0, r3
 8008e64:	371c      	adds	r7, #28
 8008e66:	46bd      	mov	sp, r7
 8008e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e6c:	4770      	bx	lr

08008e6e <dir_sdi>:
>>>>>>> Stashed changes
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
<<<<<<< Updated upstream
 80089b2:	b580      	push	{r7, lr}
 80089b4:	b086      	sub	sp, #24
 80089b6:	af00      	add	r7, sp, #0
 80089b8:	6078      	str	r0, [r7, #4]
 80089ba:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80089c2:	683b      	ldr	r3, [r7, #0]
 80089c4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80089c8:	d204      	bcs.n	80089d4 <dir_sdi+0x22>
 80089ca:	683b      	ldr	r3, [r7, #0]
 80089cc:	f003 031f 	and.w	r3, r3, #31
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d001      	beq.n	80089d8 <dir_sdi+0x26>
		return FR_INT_ERR;
 80089d4:	2302      	movs	r3, #2
 80089d6:	e063      	b.n	8008aa0 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	683a      	ldr	r2, [r7, #0]
 80089dc:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	689b      	ldr	r3, [r3, #8]
 80089e2:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80089e4:	697b      	ldr	r3, [r7, #20]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d106      	bne.n	80089f8 <dir_sdi+0x46>
 80089ea:	693b      	ldr	r3, [r7, #16]
 80089ec:	781b      	ldrb	r3, [r3, #0]
 80089ee:	2b02      	cmp	r3, #2
 80089f0:	d902      	bls.n	80089f8 <dir_sdi+0x46>
		clst = fs->dirbase;
 80089f2:	693b      	ldr	r3, [r7, #16]
 80089f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089f6:	617b      	str	r3, [r7, #20]
=======
 8008e6e:	b580      	push	{r7, lr}
 8008e70:	b086      	sub	sp, #24
 8008e72:	af00      	add	r7, sp, #0
 8008e74:	6078      	str	r0, [r7, #4]
 8008e76:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8008e7e:	683b      	ldr	r3, [r7, #0]
 8008e80:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008e84:	d204      	bcs.n	8008e90 <dir_sdi+0x22>
 8008e86:	683b      	ldr	r3, [r7, #0]
 8008e88:	f003 031f 	and.w	r3, r3, #31
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d001      	beq.n	8008e94 <dir_sdi+0x26>
		return FR_INT_ERR;
 8008e90:	2302      	movs	r3, #2
 8008e92:	e063      	b.n	8008f5c <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	683a      	ldr	r2, [r7, #0]
 8008e98:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	689b      	ldr	r3, [r3, #8]
 8008e9e:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8008ea0:	697b      	ldr	r3, [r7, #20]
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d106      	bne.n	8008eb4 <dir_sdi+0x46>
 8008ea6:	693b      	ldr	r3, [r7, #16]
 8008ea8:	781b      	ldrb	r3, [r3, #0]
 8008eaa:	2b02      	cmp	r3, #2
 8008eac:	d902      	bls.n	8008eb4 <dir_sdi+0x46>
		clst = fs->dirbase;
 8008eae:	693b      	ldr	r3, [r7, #16]
 8008eb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008eb2:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
<<<<<<< Updated upstream
 80089f8:	697b      	ldr	r3, [r7, #20]
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d10c      	bne.n	8008a18 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80089fe:	683b      	ldr	r3, [r7, #0]
 8008a00:	095b      	lsrs	r3, r3, #5
 8008a02:	693a      	ldr	r2, [r7, #16]
 8008a04:	8912      	ldrh	r2, [r2, #8]
 8008a06:	4293      	cmp	r3, r2
 8008a08:	d301      	bcc.n	8008a0e <dir_sdi+0x5c>
 8008a0a:	2302      	movs	r3, #2
 8008a0c:	e048      	b.n	8008aa0 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8008a0e:	693b      	ldr	r3, [r7, #16]
 8008a10:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	61da      	str	r2, [r3, #28]
 8008a16:	e029      	b.n	8008a6c <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8008a18:	693b      	ldr	r3, [r7, #16]
 8008a1a:	895b      	ldrh	r3, [r3, #10]
 8008a1c:	025b      	lsls	r3, r3, #9
 8008a1e:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008a20:	e019      	b.n	8008a56 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	6979      	ldr	r1, [r7, #20]
 8008a26:	4618      	mov	r0, r3
 8008a28:	f7ff fd01 	bl	800842e <get_fat>
 8008a2c:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008a2e:	697b      	ldr	r3, [r7, #20]
 8008a30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a34:	d101      	bne.n	8008a3a <dir_sdi+0x88>
 8008a36:	2301      	movs	r3, #1
 8008a38:	e032      	b.n	8008aa0 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8008a3a:	697b      	ldr	r3, [r7, #20]
 8008a3c:	2b01      	cmp	r3, #1
 8008a3e:	d904      	bls.n	8008a4a <dir_sdi+0x98>
 8008a40:	693b      	ldr	r3, [r7, #16]
 8008a42:	699b      	ldr	r3, [r3, #24]
 8008a44:	697a      	ldr	r2, [r7, #20]
 8008a46:	429a      	cmp	r2, r3
 8008a48:	d301      	bcc.n	8008a4e <dir_sdi+0x9c>
 8008a4a:	2302      	movs	r3, #2
 8008a4c:	e028      	b.n	8008aa0 <dir_sdi+0xee>
			ofs -= csz;
 8008a4e:	683a      	ldr	r2, [r7, #0]
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	1ad3      	subs	r3, r2, r3
 8008a54:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008a56:	683a      	ldr	r2, [r7, #0]
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	429a      	cmp	r2, r3
 8008a5c:	d2e1      	bcs.n	8008a22 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8008a5e:	6979      	ldr	r1, [r7, #20]
 8008a60:	6938      	ldr	r0, [r7, #16]
 8008a62:	f7ff fcc5 	bl	80083f0 <clust2sect>
 8008a66:	4602      	mov	r2, r0
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	697a      	ldr	r2, [r7, #20]
 8008a70:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	69db      	ldr	r3, [r3, #28]
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d101      	bne.n	8008a7e <dir_sdi+0xcc>
 8008a7a:	2302      	movs	r3, #2
 8008a7c:	e010      	b.n	8008aa0 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	69da      	ldr	r2, [r3, #28]
 8008a82:	683b      	ldr	r3, [r7, #0]
 8008a84:	0a5b      	lsrs	r3, r3, #9
 8008a86:	441a      	add	r2, r3
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8008a8c:	693b      	ldr	r3, [r7, #16]
 8008a8e:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8008a92:	683b      	ldr	r3, [r7, #0]
 8008a94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a98:	441a      	add	r2, r3
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8008a9e:	2300      	movs	r3, #0
}
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	3718      	adds	r7, #24
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	bd80      	pop	{r7, pc}

08008aa8 <dir_next>:
=======
 8008eb4:	697b      	ldr	r3, [r7, #20]
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d10c      	bne.n	8008ed4 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8008eba:	683b      	ldr	r3, [r7, #0]
 8008ebc:	095b      	lsrs	r3, r3, #5
 8008ebe:	693a      	ldr	r2, [r7, #16]
 8008ec0:	8912      	ldrh	r2, [r2, #8]
 8008ec2:	4293      	cmp	r3, r2
 8008ec4:	d301      	bcc.n	8008eca <dir_sdi+0x5c>
 8008ec6:	2302      	movs	r3, #2
 8008ec8:	e048      	b.n	8008f5c <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8008eca:	693b      	ldr	r3, [r7, #16]
 8008ecc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	61da      	str	r2, [r3, #28]
 8008ed2:	e029      	b.n	8008f28 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8008ed4:	693b      	ldr	r3, [r7, #16]
 8008ed6:	895b      	ldrh	r3, [r3, #10]
 8008ed8:	025b      	lsls	r3, r3, #9
 8008eda:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008edc:	e019      	b.n	8008f12 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	6979      	ldr	r1, [r7, #20]
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	f7ff fd01 	bl	80088ea <get_fat>
 8008ee8:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008eea:	697b      	ldr	r3, [r7, #20]
 8008eec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ef0:	d101      	bne.n	8008ef6 <dir_sdi+0x88>
 8008ef2:	2301      	movs	r3, #1
 8008ef4:	e032      	b.n	8008f5c <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8008ef6:	697b      	ldr	r3, [r7, #20]
 8008ef8:	2b01      	cmp	r3, #1
 8008efa:	d904      	bls.n	8008f06 <dir_sdi+0x98>
 8008efc:	693b      	ldr	r3, [r7, #16]
 8008efe:	695b      	ldr	r3, [r3, #20]
 8008f00:	697a      	ldr	r2, [r7, #20]
 8008f02:	429a      	cmp	r2, r3
 8008f04:	d301      	bcc.n	8008f0a <dir_sdi+0x9c>
 8008f06:	2302      	movs	r3, #2
 8008f08:	e028      	b.n	8008f5c <dir_sdi+0xee>
			ofs -= csz;
 8008f0a:	683a      	ldr	r2, [r7, #0]
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	1ad3      	subs	r3, r2, r3
 8008f10:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008f12:	683a      	ldr	r2, [r7, #0]
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	429a      	cmp	r2, r3
 8008f18:	d2e1      	bcs.n	8008ede <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8008f1a:	6979      	ldr	r1, [r7, #20]
 8008f1c:	6938      	ldr	r0, [r7, #16]
 8008f1e:	f7ff fcc5 	bl	80088ac <clust2sect>
 8008f22:	4602      	mov	r2, r0
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	697a      	ldr	r2, [r7, #20]
 8008f2c:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	69db      	ldr	r3, [r3, #28]
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d101      	bne.n	8008f3a <dir_sdi+0xcc>
 8008f36:	2302      	movs	r3, #2
 8008f38:	e010      	b.n	8008f5c <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	69da      	ldr	r2, [r3, #28]
 8008f3e:	683b      	ldr	r3, [r7, #0]
 8008f40:	0a5b      	lsrs	r3, r3, #9
 8008f42:	441a      	add	r2, r3
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8008f48:	693b      	ldr	r3, [r7, #16]
 8008f4a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008f4e:	683b      	ldr	r3, [r7, #0]
 8008f50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f54:	441a      	add	r2, r3
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8008f5a:	2300      	movs	r3, #0
}
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	3718      	adds	r7, #24
 8008f60:	46bd      	mov	sp, r7
 8008f62:	bd80      	pop	{r7, pc}

08008f64 <dir_next>:
>>>>>>> Stashed changes
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
<<<<<<< Updated upstream
 8008aa8:	b580      	push	{r7, lr}
 8008aaa:	b086      	sub	sp, #24
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	6078      	str	r0, [r7, #4]
 8008ab0:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	60fb      	str	r3, [r7, #12]
=======
 8008f64:	b580      	push	{r7, lr}
 8008f66:	b086      	sub	sp, #24
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	6078      	str	r0, [r7, #4]
 8008f6c:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	60fb      	str	r3, [r7, #12]
>>>>>>> Stashed changes
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
<<<<<<< Updated upstream
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	695b      	ldr	r3, [r3, #20]
 8008abc:	3320      	adds	r3, #32
 8008abe:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	69db      	ldr	r3, [r3, #28]
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d003      	beq.n	8008ad0 <dir_next+0x28>
 8008ac8:	68bb      	ldr	r3, [r7, #8]
 8008aca:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008ace:	d301      	bcc.n	8008ad4 <dir_next+0x2c>
 8008ad0:	2304      	movs	r3, #4
 8008ad2:	e0aa      	b.n	8008c2a <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8008ad4:	68bb      	ldr	r3, [r7, #8]
 8008ad6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	f040 8098 	bne.w	8008c10 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	69db      	ldr	r3, [r3, #28]
 8008ae4:	1c5a      	adds	r2, r3, #1
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	699b      	ldr	r3, [r3, #24]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d10b      	bne.n	8008b0a <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8008af2:	68bb      	ldr	r3, [r7, #8]
 8008af4:	095b      	lsrs	r3, r3, #5
 8008af6:	68fa      	ldr	r2, [r7, #12]
 8008af8:	8912      	ldrh	r2, [r2, #8]
 8008afa:	4293      	cmp	r3, r2
 8008afc:	f0c0 8088 	bcc.w	8008c10 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	2200      	movs	r2, #0
 8008b04:	61da      	str	r2, [r3, #28]
 8008b06:	2304      	movs	r3, #4
 8008b08:	e08f      	b.n	8008c2a <dir_next+0x182>
=======
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	695b      	ldr	r3, [r3, #20]
 8008f78:	3320      	adds	r3, #32
 8008f7a:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	69db      	ldr	r3, [r3, #28]
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d003      	beq.n	8008f8c <dir_next+0x28>
 8008f84:	68bb      	ldr	r3, [r7, #8]
 8008f86:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008f8a:	d301      	bcc.n	8008f90 <dir_next+0x2c>
 8008f8c:	2304      	movs	r3, #4
 8008f8e:	e0aa      	b.n	80090e6 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8008f90:	68bb      	ldr	r3, [r7, #8]
 8008f92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	f040 8098 	bne.w	80090cc <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	69db      	ldr	r3, [r3, #28]
 8008fa0:	1c5a      	adds	r2, r3, #1
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	699b      	ldr	r3, [r3, #24]
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d10b      	bne.n	8008fc6 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8008fae:	68bb      	ldr	r3, [r7, #8]
 8008fb0:	095b      	lsrs	r3, r3, #5
 8008fb2:	68fa      	ldr	r2, [r7, #12]
 8008fb4:	8912      	ldrh	r2, [r2, #8]
 8008fb6:	4293      	cmp	r3, r2
 8008fb8:	f0c0 8088 	bcc.w	80090cc <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	2200      	movs	r2, #0
 8008fc0:	61da      	str	r2, [r3, #28]
 8008fc2:	2304      	movs	r3, #4
 8008fc4:	e08f      	b.n	80090e6 <dir_next+0x182>
>>>>>>> Stashed changes
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
<<<<<<< Updated upstream
 8008b0a:	68bb      	ldr	r3, [r7, #8]
 8008b0c:	0a5b      	lsrs	r3, r3, #9
 8008b0e:	68fa      	ldr	r2, [r7, #12]
 8008b10:	8952      	ldrh	r2, [r2, #10]
 8008b12:	3a01      	subs	r2, #1
 8008b14:	4013      	ands	r3, r2
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d17a      	bne.n	8008c10 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8008b1a:	687a      	ldr	r2, [r7, #4]
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	699b      	ldr	r3, [r3, #24]
 8008b20:	4619      	mov	r1, r3
 8008b22:	4610      	mov	r0, r2
 8008b24:	f7ff fc83 	bl	800842e <get_fat>
 8008b28:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8008b2a:	697b      	ldr	r3, [r7, #20]
 8008b2c:	2b01      	cmp	r3, #1
 8008b2e:	d801      	bhi.n	8008b34 <dir_next+0x8c>
 8008b30:	2302      	movs	r3, #2
 8008b32:	e07a      	b.n	8008c2a <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8008b34:	697b      	ldr	r3, [r7, #20]
 8008b36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b3a:	d101      	bne.n	8008b40 <dir_next+0x98>
 8008b3c:	2301      	movs	r3, #1
 8008b3e:	e074      	b.n	8008c2a <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	699b      	ldr	r3, [r3, #24]
 8008b44:	697a      	ldr	r2, [r7, #20]
 8008b46:	429a      	cmp	r2, r3
 8008b48:	d358      	bcc.n	8008bfc <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8008b4a:	683b      	ldr	r3, [r7, #0]
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d104      	bne.n	8008b5a <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	2200      	movs	r2, #0
 8008b54:	61da      	str	r2, [r3, #28]
 8008b56:	2304      	movs	r3, #4
 8008b58:	e067      	b.n	8008c2a <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8008b5a:	687a      	ldr	r2, [r7, #4]
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	699b      	ldr	r3, [r3, #24]
 8008b60:	4619      	mov	r1, r3
 8008b62:	4610      	mov	r0, r2
 8008b64:	f7ff fe59 	bl	800881a <create_chain>
 8008b68:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8008b6a:	697b      	ldr	r3, [r7, #20]
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d101      	bne.n	8008b74 <dir_next+0xcc>
 8008b70:	2307      	movs	r3, #7
 8008b72:	e05a      	b.n	8008c2a <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8008b74:	697b      	ldr	r3, [r7, #20]
 8008b76:	2b01      	cmp	r3, #1
 8008b78:	d101      	bne.n	8008b7e <dir_next+0xd6>
 8008b7a:	2302      	movs	r3, #2
 8008b7c:	e055      	b.n	8008c2a <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008b7e:	697b      	ldr	r3, [r7, #20]
 8008b80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b84:	d101      	bne.n	8008b8a <dir_next+0xe2>
 8008b86:	2301      	movs	r3, #1
 8008b88:	e04f      	b.n	8008c2a <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8008b8a:	68f8      	ldr	r0, [r7, #12]
 8008b8c:	f7ff fb50 	bl	8008230 <sync_window>
 8008b90:	4603      	mov	r3, r0
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d001      	beq.n	8008b9a <dir_next+0xf2>
 8008b96:	2301      	movs	r3, #1
 8008b98:	e047      	b.n	8008c2a <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	3334      	adds	r3, #52	@ 0x34
 8008b9e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008ba2:	2100      	movs	r1, #0
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	f7ff f949 	bl	8007e3c <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008baa:	2300      	movs	r3, #0
 8008bac:	613b      	str	r3, [r7, #16]
 8008bae:	6979      	ldr	r1, [r7, #20]
 8008bb0:	68f8      	ldr	r0, [r7, #12]
 8008bb2:	f7ff fc1d 	bl	80083f0 <clust2sect>
 8008bb6:	4602      	mov	r2, r0
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	631a      	str	r2, [r3, #48]	@ 0x30
 8008bbc:	e012      	b.n	8008be4 <dir_next+0x13c>
						fs->wflag = 1;
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	2201      	movs	r2, #1
 8008bc2:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8008bc4:	68f8      	ldr	r0, [r7, #12]
 8008bc6:	f7ff fb33 	bl	8008230 <sync_window>
 8008bca:	4603      	mov	r3, r0
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d001      	beq.n	8008bd4 <dir_next+0x12c>
 8008bd0:	2301      	movs	r3, #1
 8008bd2:	e02a      	b.n	8008c2a <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008bd4:	693b      	ldr	r3, [r7, #16]
 8008bd6:	3301      	adds	r3, #1
 8008bd8:	613b      	str	r3, [r7, #16]
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008bde:	1c5a      	adds	r2, r3, #1
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	631a      	str	r2, [r3, #48]	@ 0x30
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	895b      	ldrh	r3, [r3, #10]
 8008be8:	461a      	mov	r2, r3
 8008bea:	693b      	ldr	r3, [r7, #16]
 8008bec:	4293      	cmp	r3, r2
 8008bee:	d3e6      	bcc.n	8008bbe <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008bf4:	693b      	ldr	r3, [r7, #16]
 8008bf6:	1ad2      	subs	r2, r2, r3
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	631a      	str	r2, [r3, #48]	@ 0x30
=======
 8008fc6:	68bb      	ldr	r3, [r7, #8]
 8008fc8:	0a5b      	lsrs	r3, r3, #9
 8008fca:	68fa      	ldr	r2, [r7, #12]
 8008fcc:	8952      	ldrh	r2, [r2, #10]
 8008fce:	3a01      	subs	r2, #1
 8008fd0:	4013      	ands	r3, r2
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d17a      	bne.n	80090cc <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8008fd6:	687a      	ldr	r2, [r7, #4]
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	699b      	ldr	r3, [r3, #24]
 8008fdc:	4619      	mov	r1, r3
 8008fde:	4610      	mov	r0, r2
 8008fe0:	f7ff fc83 	bl	80088ea <get_fat>
 8008fe4:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8008fe6:	697b      	ldr	r3, [r7, #20]
 8008fe8:	2b01      	cmp	r3, #1
 8008fea:	d801      	bhi.n	8008ff0 <dir_next+0x8c>
 8008fec:	2302      	movs	r3, #2
 8008fee:	e07a      	b.n	80090e6 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8008ff0:	697b      	ldr	r3, [r7, #20]
 8008ff2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ff6:	d101      	bne.n	8008ffc <dir_next+0x98>
 8008ff8:	2301      	movs	r3, #1
 8008ffa:	e074      	b.n	80090e6 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	695b      	ldr	r3, [r3, #20]
 8009000:	697a      	ldr	r2, [r7, #20]
 8009002:	429a      	cmp	r2, r3
 8009004:	d358      	bcc.n	80090b8 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8009006:	683b      	ldr	r3, [r7, #0]
 8009008:	2b00      	cmp	r3, #0
 800900a:	d104      	bne.n	8009016 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	2200      	movs	r2, #0
 8009010:	61da      	str	r2, [r3, #28]
 8009012:	2304      	movs	r3, #4
 8009014:	e067      	b.n	80090e6 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8009016:	687a      	ldr	r2, [r7, #4]
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	699b      	ldr	r3, [r3, #24]
 800901c:	4619      	mov	r1, r3
 800901e:	4610      	mov	r0, r2
 8009020:	f7ff fe59 	bl	8008cd6 <create_chain>
 8009024:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8009026:	697b      	ldr	r3, [r7, #20]
 8009028:	2b00      	cmp	r3, #0
 800902a:	d101      	bne.n	8009030 <dir_next+0xcc>
 800902c:	2307      	movs	r3, #7
 800902e:	e05a      	b.n	80090e6 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8009030:	697b      	ldr	r3, [r7, #20]
 8009032:	2b01      	cmp	r3, #1
 8009034:	d101      	bne.n	800903a <dir_next+0xd6>
 8009036:	2302      	movs	r3, #2
 8009038:	e055      	b.n	80090e6 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800903a:	697b      	ldr	r3, [r7, #20]
 800903c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009040:	d101      	bne.n	8009046 <dir_next+0xe2>
 8009042:	2301      	movs	r3, #1
 8009044:	e04f      	b.n	80090e6 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8009046:	68f8      	ldr	r0, [r7, #12]
 8009048:	f7ff fb50 	bl	80086ec <sync_window>
 800904c:	4603      	mov	r3, r0
 800904e:	2b00      	cmp	r3, #0
 8009050:	d001      	beq.n	8009056 <dir_next+0xf2>
 8009052:	2301      	movs	r3, #1
 8009054:	e047      	b.n	80090e6 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	3330      	adds	r3, #48	@ 0x30
 800905a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800905e:	2100      	movs	r1, #0
 8009060:	4618      	mov	r0, r3
 8009062:	f7ff f97a 	bl	800835a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009066:	2300      	movs	r3, #0
 8009068:	613b      	str	r3, [r7, #16]
 800906a:	6979      	ldr	r1, [r7, #20]
 800906c:	68f8      	ldr	r0, [r7, #12]
 800906e:	f7ff fc1d 	bl	80088ac <clust2sect>
 8009072:	4602      	mov	r2, r0
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	62da      	str	r2, [r3, #44]	@ 0x2c
 8009078:	e012      	b.n	80090a0 <dir_next+0x13c>
						fs->wflag = 1;
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	2201      	movs	r2, #1
 800907e:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8009080:	68f8      	ldr	r0, [r7, #12]
 8009082:	f7ff fb33 	bl	80086ec <sync_window>
 8009086:	4603      	mov	r3, r0
 8009088:	2b00      	cmp	r3, #0
 800908a:	d001      	beq.n	8009090 <dir_next+0x12c>
 800908c:	2301      	movs	r3, #1
 800908e:	e02a      	b.n	80090e6 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009090:	693b      	ldr	r3, [r7, #16]
 8009092:	3301      	adds	r3, #1
 8009094:	613b      	str	r3, [r7, #16]
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800909a:	1c5a      	adds	r2, r3, #1
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	62da      	str	r2, [r3, #44]	@ 0x2c
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	895b      	ldrh	r3, [r3, #10]
 80090a4:	461a      	mov	r2, r3
 80090a6:	693b      	ldr	r3, [r7, #16]
 80090a8:	4293      	cmp	r3, r2
 80090aa:	d3e6      	bcc.n	800907a <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80090b0:	693b      	ldr	r3, [r7, #16]
 80090b2:	1ad2      	subs	r2, r2, r3
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	62da      	str	r2, [r3, #44]	@ 0x2c
>>>>>>> Stashed changes
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
<<<<<<< Updated upstream
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	697a      	ldr	r2, [r7, #20]
 8008c00:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8008c02:	6979      	ldr	r1, [r7, #20]
 8008c04:	68f8      	ldr	r0, [r7, #12]
 8008c06:	f7ff fbf3 	bl	80083f0 <clust2sect>
 8008c0a:	4602      	mov	r2, r0
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	61da      	str	r2, [r3, #28]
=======
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	697a      	ldr	r2, [r7, #20]
 80090bc:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80090be:	6979      	ldr	r1, [r7, #20]
 80090c0:	68f8      	ldr	r0, [r7, #12]
 80090c2:	f7ff fbf3 	bl	80088ac <clust2sect>
 80090c6:	4602      	mov	r2, r0
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	61da      	str	r2, [r3, #28]
>>>>>>> Stashed changes
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
<<<<<<< Updated upstream
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	68ba      	ldr	r2, [r7, #8]
 8008c14:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8008c1c:	68bb      	ldr	r3, [r7, #8]
 8008c1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c22:	441a      	add	r2, r3
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8008c28:	2300      	movs	r3, #0
}
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	3718      	adds	r7, #24
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	bd80      	pop	{r7, pc}

08008c32 <dir_alloc>:
=======
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	68ba      	ldr	r2, [r7, #8]
 80090d0:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80090d8:	68bb      	ldr	r3, [r7, #8]
 80090da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090de:	441a      	add	r2, r3
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80090e4:	2300      	movs	r3, #0
}
 80090e6:	4618      	mov	r0, r3
 80090e8:	3718      	adds	r7, #24
 80090ea:	46bd      	mov	sp, r7
 80090ec:	bd80      	pop	{r7, pc}

080090ee <dir_alloc>:
>>>>>>> Stashed changes
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
<<<<<<< Updated upstream
 8008c32:	b580      	push	{r7, lr}
 8008c34:	b086      	sub	sp, #24
 8008c36:	af00      	add	r7, sp, #0
 8008c38:	6078      	str	r0, [r7, #4]
 8008c3a:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8008c42:	2100      	movs	r1, #0
 8008c44:	6878      	ldr	r0, [r7, #4]
 8008c46:	f7ff feb4 	bl	80089b2 <dir_sdi>
 8008c4a:	4603      	mov	r3, r0
 8008c4c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008c4e:	7dfb      	ldrb	r3, [r7, #23]
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d12b      	bne.n	8008cac <dir_alloc+0x7a>
		n = 0;
 8008c54:	2300      	movs	r3, #0
 8008c56:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	69db      	ldr	r3, [r3, #28]
 8008c5c:	4619      	mov	r1, r3
 8008c5e:	68f8      	ldr	r0, [r7, #12]
 8008c60:	f7ff fb2a 	bl	80082b8 <move_window>
 8008c64:	4603      	mov	r3, r0
 8008c66:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8008c68:	7dfb      	ldrb	r3, [r7, #23]
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d11d      	bne.n	8008caa <dir_alloc+0x78>
=======
 80090ee:	b580      	push	{r7, lr}
 80090f0:	b086      	sub	sp, #24
 80090f2:	af00      	add	r7, sp, #0
 80090f4:	6078      	str	r0, [r7, #4]
 80090f6:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80090fe:	2100      	movs	r1, #0
 8009100:	6878      	ldr	r0, [r7, #4]
 8009102:	f7ff feb4 	bl	8008e6e <dir_sdi>
 8009106:	4603      	mov	r3, r0
 8009108:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800910a:	7dfb      	ldrb	r3, [r7, #23]
 800910c:	2b00      	cmp	r3, #0
 800910e:	d12b      	bne.n	8009168 <dir_alloc+0x7a>
		n = 0;
 8009110:	2300      	movs	r3, #0
 8009112:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	69db      	ldr	r3, [r3, #28]
 8009118:	4619      	mov	r1, r3
 800911a:	68f8      	ldr	r0, [r7, #12]
 800911c:	f7ff fb2a 	bl	8008774 <move_window>
 8009120:	4603      	mov	r3, r0
 8009122:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8009124:	7dfb      	ldrb	r3, [r7, #23]
 8009126:	2b00      	cmp	r3, #0
 8009128:	d11d      	bne.n	8009166 <dir_alloc+0x78>
>>>>>>> Stashed changes
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
<<<<<<< Updated upstream
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	6a1b      	ldr	r3, [r3, #32]
 8008c72:	781b      	ldrb	r3, [r3, #0]
 8008c74:	2be5      	cmp	r3, #229	@ 0xe5
 8008c76:	d004      	beq.n	8008c82 <dir_alloc+0x50>
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	6a1b      	ldr	r3, [r3, #32]
 8008c7c:	781b      	ldrb	r3, [r3, #0]
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d107      	bne.n	8008c92 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8008c82:	693b      	ldr	r3, [r7, #16]
 8008c84:	3301      	adds	r3, #1
 8008c86:	613b      	str	r3, [r7, #16]
 8008c88:	693a      	ldr	r2, [r7, #16]
 8008c8a:	683b      	ldr	r3, [r7, #0]
 8008c8c:	429a      	cmp	r2, r3
 8008c8e:	d102      	bne.n	8008c96 <dir_alloc+0x64>
 8008c90:	e00c      	b.n	8008cac <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8008c92:	2300      	movs	r3, #0
 8008c94:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8008c96:	2101      	movs	r1, #1
 8008c98:	6878      	ldr	r0, [r7, #4]
 8008c9a:	f7ff ff05 	bl	8008aa8 <dir_next>
 8008c9e:	4603      	mov	r3, r0
 8008ca0:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8008ca2:	7dfb      	ldrb	r3, [r7, #23]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d0d7      	beq.n	8008c58 <dir_alloc+0x26>
 8008ca8:	e000      	b.n	8008cac <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8008caa:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8008cac:	7dfb      	ldrb	r3, [r7, #23]
 8008cae:	2b04      	cmp	r3, #4
 8008cb0:	d101      	bne.n	8008cb6 <dir_alloc+0x84>
 8008cb2:	2307      	movs	r3, #7
 8008cb4:	75fb      	strb	r3, [r7, #23]
	return res;
 8008cb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8008cb8:	4618      	mov	r0, r3
 8008cba:	3718      	adds	r7, #24
 8008cbc:	46bd      	mov	sp, r7
 8008cbe:	bd80      	pop	{r7, pc}

08008cc0 <ld_clust>:
=======
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	6a1b      	ldr	r3, [r3, #32]
 800912e:	781b      	ldrb	r3, [r3, #0]
 8009130:	2be5      	cmp	r3, #229	@ 0xe5
 8009132:	d004      	beq.n	800913e <dir_alloc+0x50>
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	6a1b      	ldr	r3, [r3, #32]
 8009138:	781b      	ldrb	r3, [r3, #0]
 800913a:	2b00      	cmp	r3, #0
 800913c:	d107      	bne.n	800914e <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800913e:	693b      	ldr	r3, [r7, #16]
 8009140:	3301      	adds	r3, #1
 8009142:	613b      	str	r3, [r7, #16]
 8009144:	693a      	ldr	r2, [r7, #16]
 8009146:	683b      	ldr	r3, [r7, #0]
 8009148:	429a      	cmp	r2, r3
 800914a:	d102      	bne.n	8009152 <dir_alloc+0x64>
 800914c:	e00c      	b.n	8009168 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800914e:	2300      	movs	r3, #0
 8009150:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8009152:	2101      	movs	r1, #1
 8009154:	6878      	ldr	r0, [r7, #4]
 8009156:	f7ff ff05 	bl	8008f64 <dir_next>
 800915a:	4603      	mov	r3, r0
 800915c:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800915e:	7dfb      	ldrb	r3, [r7, #23]
 8009160:	2b00      	cmp	r3, #0
 8009162:	d0d7      	beq.n	8009114 <dir_alloc+0x26>
 8009164:	e000      	b.n	8009168 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8009166:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8009168:	7dfb      	ldrb	r3, [r7, #23]
 800916a:	2b04      	cmp	r3, #4
 800916c:	d101      	bne.n	8009172 <dir_alloc+0x84>
 800916e:	2307      	movs	r3, #7
 8009170:	75fb      	strb	r3, [r7, #23]
	return res;
 8009172:	7dfb      	ldrb	r3, [r7, #23]
}
 8009174:	4618      	mov	r0, r3
 8009176:	3718      	adds	r7, #24
 8009178:	46bd      	mov	sp, r7
 800917a:	bd80      	pop	{r7, pc}

0800917c <ld_clust>:
>>>>>>> Stashed changes
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
<<<<<<< Updated upstream
 8008cc0:	b580      	push	{r7, lr}
 8008cc2:	b084      	sub	sp, #16
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	6078      	str	r0, [r7, #4]
 8008cc8:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8008cca:	683b      	ldr	r3, [r7, #0]
 8008ccc:	331a      	adds	r3, #26
 8008cce:	4618      	mov	r0, r3
 8008cd0:	f7ff f810 	bl	8007cf4 <ld_word>
 8008cd4:	4603      	mov	r3, r0
 8008cd6:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	781b      	ldrb	r3, [r3, #0]
 8008cdc:	2b03      	cmp	r3, #3
 8008cde:	d109      	bne.n	8008cf4 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8008ce0:	683b      	ldr	r3, [r7, #0]
 8008ce2:	3314      	adds	r3, #20
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	f7ff f805 	bl	8007cf4 <ld_word>
 8008cea:	4603      	mov	r3, r0
 8008cec:	041b      	lsls	r3, r3, #16
 8008cee:	68fa      	ldr	r2, [r7, #12]
 8008cf0:	4313      	orrs	r3, r2
 8008cf2:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8008cf4:	68fb      	ldr	r3, [r7, #12]
}
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	3710      	adds	r7, #16
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	bd80      	pop	{r7, pc}

08008cfe <st_clust>:
=======
 800917c:	b580      	push	{r7, lr}
 800917e:	b084      	sub	sp, #16
 8009180:	af00      	add	r7, sp, #0
 8009182:	6078      	str	r0, [r7, #4]
 8009184:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8009186:	683b      	ldr	r3, [r7, #0]
 8009188:	331a      	adds	r3, #26
 800918a:	4618      	mov	r0, r3
 800918c:	f7ff f842 	bl	8008214 <ld_word>
 8009190:	4603      	mov	r3, r0
 8009192:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	781b      	ldrb	r3, [r3, #0]
 8009198:	2b03      	cmp	r3, #3
 800919a:	d109      	bne.n	80091b0 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800919c:	683b      	ldr	r3, [r7, #0]
 800919e:	3314      	adds	r3, #20
 80091a0:	4618      	mov	r0, r3
 80091a2:	f7ff f837 	bl	8008214 <ld_word>
 80091a6:	4603      	mov	r3, r0
 80091a8:	041b      	lsls	r3, r3, #16
 80091aa:	68fa      	ldr	r2, [r7, #12]
 80091ac:	4313      	orrs	r3, r2
 80091ae:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80091b0:	68fb      	ldr	r3, [r7, #12]
}
 80091b2:	4618      	mov	r0, r3
 80091b4:	3710      	adds	r7, #16
 80091b6:	46bd      	mov	sp, r7
 80091b8:	bd80      	pop	{r7, pc}

080091ba <st_clust>:
>>>>>>> Stashed changes
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
<<<<<<< Updated upstream
 8008cfe:	b580      	push	{r7, lr}
 8008d00:	b084      	sub	sp, #16
 8008d02:	af00      	add	r7, sp, #0
 8008d04:	60f8      	str	r0, [r7, #12]
 8008d06:	60b9      	str	r1, [r7, #8]
 8008d08:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8008d0a:	68bb      	ldr	r3, [r7, #8]
 8008d0c:	331a      	adds	r3, #26
 8008d0e:	687a      	ldr	r2, [r7, #4]
 8008d10:	b292      	uxth	r2, r2
 8008d12:	4611      	mov	r1, r2
 8008d14:	4618      	mov	r0, r3
 8008d16:	f7ff f829 	bl	8007d6c <st_word>
	if (fs->fs_type == FS_FAT32) {
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	781b      	ldrb	r3, [r3, #0]
 8008d1e:	2b03      	cmp	r3, #3
 8008d20:	d109      	bne.n	8008d36 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8008d22:	68bb      	ldr	r3, [r7, #8]
 8008d24:	f103 0214 	add.w	r2, r3, #20
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	0c1b      	lsrs	r3, r3, #16
 8008d2c:	b29b      	uxth	r3, r3
 8008d2e:	4619      	mov	r1, r3
 8008d30:	4610      	mov	r0, r2
 8008d32:	f7ff f81b 	bl	8007d6c <st_word>
	}
}
 8008d36:	bf00      	nop
 8008d38:	3710      	adds	r7, #16
 8008d3a:	46bd      	mov	sp, r7
 8008d3c:	bd80      	pop	{r7, pc}

08008d3e <dir_find>:
=======
 80091ba:	b580      	push	{r7, lr}
 80091bc:	b084      	sub	sp, #16
 80091be:	af00      	add	r7, sp, #0
 80091c0:	60f8      	str	r0, [r7, #12]
 80091c2:	60b9      	str	r1, [r7, #8]
 80091c4:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80091c6:	68bb      	ldr	r3, [r7, #8]
 80091c8:	331a      	adds	r3, #26
 80091ca:	687a      	ldr	r2, [r7, #4]
 80091cc:	b292      	uxth	r2, r2
 80091ce:	4611      	mov	r1, r2
 80091d0:	4618      	mov	r0, r3
 80091d2:	f7ff f85a 	bl	800828a <st_word>
	if (fs->fs_type == FS_FAT32) {
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	781b      	ldrb	r3, [r3, #0]
 80091da:	2b03      	cmp	r3, #3
 80091dc:	d109      	bne.n	80091f2 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80091de:	68bb      	ldr	r3, [r7, #8]
 80091e0:	f103 0214 	add.w	r2, r3, #20
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	0c1b      	lsrs	r3, r3, #16
 80091e8:	b29b      	uxth	r3, r3
 80091ea:	4619      	mov	r1, r3
 80091ec:	4610      	mov	r0, r2
 80091ee:	f7ff f84c 	bl	800828a <st_word>
	}
}
 80091f2:	bf00      	nop
 80091f4:	3710      	adds	r7, #16
 80091f6:	46bd      	mov	sp, r7
 80091f8:	bd80      	pop	{r7, pc}

080091fa <dir_find>:
>>>>>>> Stashed changes

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
<<<<<<< Updated upstream
 8008d3e:	b580      	push	{r7, lr}
 8008d40:	b086      	sub	sp, #24
 8008d42:	af00      	add	r7, sp, #0
 8008d44:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	613b      	str	r3, [r7, #16]
=======
 80091fa:	b580      	push	{r7, lr}
 80091fc:	b086      	sub	sp, #24
 80091fe:	af00      	add	r7, sp, #0
 8009200:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	613b      	str	r3, [r7, #16]
>>>>>>> Stashed changes
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
<<<<<<< Updated upstream
 8008d4c:	2100      	movs	r1, #0
 8008d4e:	6878      	ldr	r0, [r7, #4]
 8008d50:	f7ff fe2f 	bl	80089b2 <dir_sdi>
 8008d54:	4603      	mov	r3, r0
 8008d56:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8008d58:	7dfb      	ldrb	r3, [r7, #23]
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d001      	beq.n	8008d62 <dir_find+0x24>
 8008d5e:	7dfb      	ldrb	r3, [r7, #23]
 8008d60:	e03e      	b.n	8008de0 <dir_find+0xa2>
=======
 8009208:	2100      	movs	r1, #0
 800920a:	6878      	ldr	r0, [r7, #4]
 800920c:	f7ff fe2f 	bl	8008e6e <dir_sdi>
 8009210:	4603      	mov	r3, r0
 8009212:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8009214:	7dfb      	ldrb	r3, [r7, #23]
 8009216:	2b00      	cmp	r3, #0
 8009218:	d001      	beq.n	800921e <dir_find+0x24>
 800921a:	7dfb      	ldrb	r3, [r7, #23]
 800921c:	e03e      	b.n	800929c <dir_find+0xa2>
>>>>>>> Stashed changes
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
<<<<<<< Updated upstream
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	69db      	ldr	r3, [r3, #28]
 8008d66:	4619      	mov	r1, r3
 8008d68:	6938      	ldr	r0, [r7, #16]
 8008d6a:	f7ff faa5 	bl	80082b8 <move_window>
 8008d6e:	4603      	mov	r3, r0
 8008d70:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8008d72:	7dfb      	ldrb	r3, [r7, #23]
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d12f      	bne.n	8008dd8 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	6a1b      	ldr	r3, [r3, #32]
 8008d7c:	781b      	ldrb	r3, [r3, #0]
 8008d7e:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8008d80:	7bfb      	ldrb	r3, [r7, #15]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d102      	bne.n	8008d8c <dir_find+0x4e>
 8008d86:	2304      	movs	r3, #4
 8008d88:	75fb      	strb	r3, [r7, #23]
 8008d8a:	e028      	b.n	8008dde <dir_find+0xa0>
=======
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	69db      	ldr	r3, [r3, #28]
 8009222:	4619      	mov	r1, r3
 8009224:	6938      	ldr	r0, [r7, #16]
 8009226:	f7ff faa5 	bl	8008774 <move_window>
 800922a:	4603      	mov	r3, r0
 800922c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800922e:	7dfb      	ldrb	r3, [r7, #23]
 8009230:	2b00      	cmp	r3, #0
 8009232:	d12f      	bne.n	8009294 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	6a1b      	ldr	r3, [r3, #32]
 8009238:	781b      	ldrb	r3, [r3, #0]
 800923a:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800923c:	7bfb      	ldrb	r3, [r7, #15]
 800923e:	2b00      	cmp	r3, #0
 8009240:	d102      	bne.n	8009248 <dir_find+0x4e>
 8009242:	2304      	movs	r3, #4
 8009244:	75fb      	strb	r3, [r7, #23]
 8009246:	e028      	b.n	800929a <dir_find+0xa0>
>>>>>>> Stashed changes
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
<<<<<<< Updated upstream
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	6a1b      	ldr	r3, [r3, #32]
 8008d90:	330b      	adds	r3, #11
 8008d92:	781b      	ldrb	r3, [r3, #0]
 8008d94:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008d98:	b2da      	uxtb	r2, r3
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	6a1b      	ldr	r3, [r3, #32]
 8008da2:	330b      	adds	r3, #11
 8008da4:	781b      	ldrb	r3, [r3, #0]
 8008da6:	f003 0308 	and.w	r3, r3, #8
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d10a      	bne.n	8008dc4 <dir_find+0x86>
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	6a18      	ldr	r0, [r3, #32]
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	3324      	adds	r3, #36	@ 0x24
 8008db6:	220b      	movs	r2, #11
 8008db8:	4619      	mov	r1, r3
 8008dba:	f7ff f85a 	bl	8007e72 <mem_cmp>
 8008dbe:	4603      	mov	r3, r0
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d00b      	beq.n	8008ddc <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8008dc4:	2100      	movs	r1, #0
 8008dc6:	6878      	ldr	r0, [r7, #4]
 8008dc8:	f7ff fe6e 	bl	8008aa8 <dir_next>
 8008dcc:	4603      	mov	r3, r0
 8008dce:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8008dd0:	7dfb      	ldrb	r3, [r7, #23]
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d0c5      	beq.n	8008d62 <dir_find+0x24>
 8008dd6:	e002      	b.n	8008dde <dir_find+0xa0>
		if (res != FR_OK) break;
 8008dd8:	bf00      	nop
 8008dda:	e000      	b.n	8008dde <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8008ddc:	bf00      	nop

	return res;
 8008dde:	7dfb      	ldrb	r3, [r7, #23]
}
 8008de0:	4618      	mov	r0, r3
 8008de2:	3718      	adds	r7, #24
 8008de4:	46bd      	mov	sp, r7
 8008de6:	bd80      	pop	{r7, pc}

08008de8 <dir_register>:
=======
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	6a1b      	ldr	r3, [r3, #32]
 800924c:	330b      	adds	r3, #11
 800924e:	781b      	ldrb	r3, [r3, #0]
 8009250:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009254:	b2da      	uxtb	r2, r3
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	6a1b      	ldr	r3, [r3, #32]
 800925e:	330b      	adds	r3, #11
 8009260:	781b      	ldrb	r3, [r3, #0]
 8009262:	f003 0308 	and.w	r3, r3, #8
 8009266:	2b00      	cmp	r3, #0
 8009268:	d10a      	bne.n	8009280 <dir_find+0x86>
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	6a18      	ldr	r0, [r3, #32]
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	3324      	adds	r3, #36	@ 0x24
 8009272:	220b      	movs	r2, #11
 8009274:	4619      	mov	r1, r3
 8009276:	f7ff f88b 	bl	8008390 <mem_cmp>
 800927a:	4603      	mov	r3, r0
 800927c:	2b00      	cmp	r3, #0
 800927e:	d00b      	beq.n	8009298 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8009280:	2100      	movs	r1, #0
 8009282:	6878      	ldr	r0, [r7, #4]
 8009284:	f7ff fe6e 	bl	8008f64 <dir_next>
 8009288:	4603      	mov	r3, r0
 800928a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800928c:	7dfb      	ldrb	r3, [r7, #23]
 800928e:	2b00      	cmp	r3, #0
 8009290:	d0c5      	beq.n	800921e <dir_find+0x24>
 8009292:	e002      	b.n	800929a <dir_find+0xa0>
		if (res != FR_OK) break;
 8009294:	bf00      	nop
 8009296:	e000      	b.n	800929a <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8009298:	bf00      	nop

	return res;
 800929a:	7dfb      	ldrb	r3, [r7, #23]
}
 800929c:	4618      	mov	r0, r3
 800929e:	3718      	adds	r7, #24
 80092a0:	46bd      	mov	sp, r7
 80092a2:	bd80      	pop	{r7, pc}

080092a4 <dir_register>:
>>>>>>> Stashed changes

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
<<<<<<< Updated upstream
 8008de8:	b580      	push	{r7, lr}
 8008dea:	b084      	sub	sp, #16
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	60bb      	str	r3, [r7, #8]
=======
 80092a4:	b580      	push	{r7, lr}
 80092a6:	b084      	sub	sp, #16
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	60bb      	str	r3, [r7, #8]
>>>>>>> Stashed changes
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
<<<<<<< Updated upstream
 8008df6:	2101      	movs	r1, #1
 8008df8:	6878      	ldr	r0, [r7, #4]
 8008dfa:	f7ff ff1a 	bl	8008c32 <dir_alloc>
 8008dfe:	4603      	mov	r3, r0
 8008e00:	73fb      	strb	r3, [r7, #15]
=======
 80092b2:	2101      	movs	r1, #1
 80092b4:	6878      	ldr	r0, [r7, #4]
 80092b6:	f7ff ff1a 	bl	80090ee <dir_alloc>
 80092ba:	4603      	mov	r3, r0
 80092bc:	73fb      	strb	r3, [r7, #15]
>>>>>>> Stashed changes

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
<<<<<<< Updated upstream
 8008e02:	7bfb      	ldrb	r3, [r7, #15]
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d11c      	bne.n	8008e42 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	69db      	ldr	r3, [r3, #28]
 8008e0c:	4619      	mov	r1, r3
 8008e0e:	68b8      	ldr	r0, [r7, #8]
 8008e10:	f7ff fa52 	bl	80082b8 <move_window>
 8008e14:	4603      	mov	r3, r0
 8008e16:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008e18:	7bfb      	ldrb	r3, [r7, #15]
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d111      	bne.n	8008e42 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	6a1b      	ldr	r3, [r3, #32]
 8008e22:	2220      	movs	r2, #32
 8008e24:	2100      	movs	r1, #0
 8008e26:	4618      	mov	r0, r3
 8008e28:	f7ff f808 	bl	8007e3c <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	6a18      	ldr	r0, [r3, #32]
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	3324      	adds	r3, #36	@ 0x24
 8008e34:	220b      	movs	r2, #11
 8008e36:	4619      	mov	r1, r3
 8008e38:	f7fe ffdf 	bl	8007dfa <mem_cpy>
=======
 80092be:	7bfb      	ldrb	r3, [r7, #15]
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d11c      	bne.n	80092fe <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	69db      	ldr	r3, [r3, #28]
 80092c8:	4619      	mov	r1, r3
 80092ca:	68b8      	ldr	r0, [r7, #8]
 80092cc:	f7ff fa52 	bl	8008774 <move_window>
 80092d0:	4603      	mov	r3, r0
 80092d2:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80092d4:	7bfb      	ldrb	r3, [r7, #15]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d111      	bne.n	80092fe <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	6a1b      	ldr	r3, [r3, #32]
 80092de:	2220      	movs	r2, #32
 80092e0:	2100      	movs	r1, #0
 80092e2:	4618      	mov	r0, r3
 80092e4:	f7ff f839 	bl	800835a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	6a18      	ldr	r0, [r3, #32]
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	3324      	adds	r3, #36	@ 0x24
 80092f0:	220b      	movs	r2, #11
 80092f2:	4619      	mov	r1, r3
 80092f4:	f7ff f810 	bl	8008318 <mem_cpy>
>>>>>>> Stashed changes
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
<<<<<<< Updated upstream
 8008e3c:	68bb      	ldr	r3, [r7, #8]
 8008e3e:	2201      	movs	r2, #1
 8008e40:	70da      	strb	r2, [r3, #3]
=======
 80092f8:	68bb      	ldr	r3, [r7, #8]
 80092fa:	2201      	movs	r2, #1
 80092fc:	70da      	strb	r2, [r3, #3]
>>>>>>> Stashed changes
		}
	}

	return res;
<<<<<<< Updated upstream
 8008e42:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e44:	4618      	mov	r0, r3
 8008e46:	3710      	adds	r7, #16
 8008e48:	46bd      	mov	sp, r7
 8008e4a:	bd80      	pop	{r7, pc}

08008e4c <create_name>:
=======
 80092fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8009300:	4618      	mov	r0, r3
 8009302:	3710      	adds	r7, #16
 8009304:	46bd      	mov	sp, r7
 8009306:	bd80      	pop	{r7, pc}

08009308 <create_name>:
>>>>>>> Stashed changes
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
<<<<<<< Updated upstream
 8008e4c:	b580      	push	{r7, lr}
 8008e4e:	b088      	sub	sp, #32
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	6078      	str	r0, [r7, #4]
 8008e54:	6039      	str	r1, [r7, #0]
=======
 8009308:	b580      	push	{r7, lr}
 800930a:	b088      	sub	sp, #32
 800930c:	af00      	add	r7, sp, #0
 800930e:	6078      	str	r0, [r7, #4]
 8009310:	6039      	str	r1, [r7, #0]
>>>>>>> Stashed changes
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
<<<<<<< Updated upstream
 8008e56:	683b      	ldr	r3, [r7, #0]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	60fb      	str	r3, [r7, #12]
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	3324      	adds	r3, #36	@ 0x24
 8008e60:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8008e62:	220b      	movs	r2, #11
 8008e64:	2120      	movs	r1, #32
 8008e66:	68b8      	ldr	r0, [r7, #8]
 8008e68:	f7fe ffe8 	bl	8007e3c <mem_set>
	si = i = 0; ni = 8;
 8008e6c:	2300      	movs	r3, #0
 8008e6e:	613b      	str	r3, [r7, #16]
 8008e70:	693b      	ldr	r3, [r7, #16]
 8008e72:	61fb      	str	r3, [r7, #28]
 8008e74:	2308      	movs	r3, #8
 8008e76:	617b      	str	r3, [r7, #20]
=======
 8009312:	683b      	ldr	r3, [r7, #0]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	60fb      	str	r3, [r7, #12]
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	3324      	adds	r3, #36	@ 0x24
 800931c:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800931e:	220b      	movs	r2, #11
 8009320:	2120      	movs	r1, #32
 8009322:	68b8      	ldr	r0, [r7, #8]
 8009324:	f7ff f819 	bl	800835a <mem_set>
	si = i = 0; ni = 8;
 8009328:	2300      	movs	r3, #0
 800932a:	613b      	str	r3, [r7, #16]
 800932c:	693b      	ldr	r3, [r7, #16]
 800932e:	61fb      	str	r3, [r7, #28]
 8009330:	2308      	movs	r3, #8
 8009332:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
<<<<<<< Updated upstream
 8008e78:	69fb      	ldr	r3, [r7, #28]
 8008e7a:	1c5a      	adds	r2, r3, #1
 8008e7c:	61fa      	str	r2, [r7, #28]
 8008e7e:	68fa      	ldr	r2, [r7, #12]
 8008e80:	4413      	add	r3, r2
 8008e82:	781b      	ldrb	r3, [r3, #0]
 8008e84:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8008e86:	7efb      	ldrb	r3, [r7, #27]
 8008e88:	2b20      	cmp	r3, #32
 8008e8a:	d94e      	bls.n	8008f2a <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8008e8c:	7efb      	ldrb	r3, [r7, #27]
 8008e8e:	2b2f      	cmp	r3, #47	@ 0x2f
 8008e90:	d006      	beq.n	8008ea0 <create_name+0x54>
 8008e92:	7efb      	ldrb	r3, [r7, #27]
 8008e94:	2b5c      	cmp	r3, #92	@ 0x5c
 8008e96:	d110      	bne.n	8008eba <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8008e98:	e002      	b.n	8008ea0 <create_name+0x54>
 8008e9a:	69fb      	ldr	r3, [r7, #28]
 8008e9c:	3301      	adds	r3, #1
 8008e9e:	61fb      	str	r3, [r7, #28]
 8008ea0:	68fa      	ldr	r2, [r7, #12]
 8008ea2:	69fb      	ldr	r3, [r7, #28]
 8008ea4:	4413      	add	r3, r2
 8008ea6:	781b      	ldrb	r3, [r3, #0]
 8008ea8:	2b2f      	cmp	r3, #47	@ 0x2f
 8008eaa:	d0f6      	beq.n	8008e9a <create_name+0x4e>
 8008eac:	68fa      	ldr	r2, [r7, #12]
 8008eae:	69fb      	ldr	r3, [r7, #28]
 8008eb0:	4413      	add	r3, r2
 8008eb2:	781b      	ldrb	r3, [r3, #0]
 8008eb4:	2b5c      	cmp	r3, #92	@ 0x5c
 8008eb6:	d0f0      	beq.n	8008e9a <create_name+0x4e>
			break;
 8008eb8:	e038      	b.n	8008f2c <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8008eba:	7efb      	ldrb	r3, [r7, #27]
 8008ebc:	2b2e      	cmp	r3, #46	@ 0x2e
 8008ebe:	d003      	beq.n	8008ec8 <create_name+0x7c>
 8008ec0:	693a      	ldr	r2, [r7, #16]
 8008ec2:	697b      	ldr	r3, [r7, #20]
 8008ec4:	429a      	cmp	r2, r3
 8008ec6:	d30c      	bcc.n	8008ee2 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8008ec8:	697b      	ldr	r3, [r7, #20]
 8008eca:	2b0b      	cmp	r3, #11
 8008ecc:	d002      	beq.n	8008ed4 <create_name+0x88>
 8008ece:	7efb      	ldrb	r3, [r7, #27]
 8008ed0:	2b2e      	cmp	r3, #46	@ 0x2e
 8008ed2:	d001      	beq.n	8008ed8 <create_name+0x8c>
 8008ed4:	2306      	movs	r3, #6
 8008ed6:	e044      	b.n	8008f62 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8008ed8:	2308      	movs	r3, #8
 8008eda:	613b      	str	r3, [r7, #16]
 8008edc:	230b      	movs	r3, #11
 8008ede:	617b      	str	r3, [r7, #20]
			continue;
 8008ee0:	e022      	b.n	8008f28 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8008ee2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	da04      	bge.n	8008ef4 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8008eea:	7efb      	ldrb	r3, [r7, #27]
 8008eec:	3b80      	subs	r3, #128	@ 0x80
 8008eee:	4a1f      	ldr	r2, [pc, #124]	@ (8008f6c <create_name+0x120>)
 8008ef0:	5cd3      	ldrb	r3, [r2, r3]
 8008ef2:	76fb      	strb	r3, [r7, #27]
=======
 8009334:	69fb      	ldr	r3, [r7, #28]
 8009336:	1c5a      	adds	r2, r3, #1
 8009338:	61fa      	str	r2, [r7, #28]
 800933a:	68fa      	ldr	r2, [r7, #12]
 800933c:	4413      	add	r3, r2
 800933e:	781b      	ldrb	r3, [r3, #0]
 8009340:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8009342:	7efb      	ldrb	r3, [r7, #27]
 8009344:	2b20      	cmp	r3, #32
 8009346:	d94e      	bls.n	80093e6 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8009348:	7efb      	ldrb	r3, [r7, #27]
 800934a:	2b2f      	cmp	r3, #47	@ 0x2f
 800934c:	d006      	beq.n	800935c <create_name+0x54>
 800934e:	7efb      	ldrb	r3, [r7, #27]
 8009350:	2b5c      	cmp	r3, #92	@ 0x5c
 8009352:	d110      	bne.n	8009376 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8009354:	e002      	b.n	800935c <create_name+0x54>
 8009356:	69fb      	ldr	r3, [r7, #28]
 8009358:	3301      	adds	r3, #1
 800935a:	61fb      	str	r3, [r7, #28]
 800935c:	68fa      	ldr	r2, [r7, #12]
 800935e:	69fb      	ldr	r3, [r7, #28]
 8009360:	4413      	add	r3, r2
 8009362:	781b      	ldrb	r3, [r3, #0]
 8009364:	2b2f      	cmp	r3, #47	@ 0x2f
 8009366:	d0f6      	beq.n	8009356 <create_name+0x4e>
 8009368:	68fa      	ldr	r2, [r7, #12]
 800936a:	69fb      	ldr	r3, [r7, #28]
 800936c:	4413      	add	r3, r2
 800936e:	781b      	ldrb	r3, [r3, #0]
 8009370:	2b5c      	cmp	r3, #92	@ 0x5c
 8009372:	d0f0      	beq.n	8009356 <create_name+0x4e>
			break;
 8009374:	e038      	b.n	80093e8 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8009376:	7efb      	ldrb	r3, [r7, #27]
 8009378:	2b2e      	cmp	r3, #46	@ 0x2e
 800937a:	d003      	beq.n	8009384 <create_name+0x7c>
 800937c:	693a      	ldr	r2, [r7, #16]
 800937e:	697b      	ldr	r3, [r7, #20]
 8009380:	429a      	cmp	r2, r3
 8009382:	d30c      	bcc.n	800939e <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8009384:	697b      	ldr	r3, [r7, #20]
 8009386:	2b0b      	cmp	r3, #11
 8009388:	d002      	beq.n	8009390 <create_name+0x88>
 800938a:	7efb      	ldrb	r3, [r7, #27]
 800938c:	2b2e      	cmp	r3, #46	@ 0x2e
 800938e:	d001      	beq.n	8009394 <create_name+0x8c>
 8009390:	2306      	movs	r3, #6
 8009392:	e044      	b.n	800941e <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8009394:	2308      	movs	r3, #8
 8009396:	613b      	str	r3, [r7, #16]
 8009398:	230b      	movs	r3, #11
 800939a:	617b      	str	r3, [r7, #20]
			continue;
 800939c:	e022      	b.n	80093e4 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800939e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	da04      	bge.n	80093b0 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80093a6:	7efb      	ldrb	r3, [r7, #27]
 80093a8:	3b80      	subs	r3, #128	@ 0x80
 80093aa:	4a1f      	ldr	r2, [pc, #124]	@ (8009428 <create_name+0x120>)
 80093ac:	5cd3      	ldrb	r3, [r2, r3]
 80093ae:	76fb      	strb	r3, [r7, #27]
>>>>>>> Stashed changes
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
<<<<<<< Updated upstream
 8008ef4:	7efb      	ldrb	r3, [r7, #27]
 8008ef6:	4619      	mov	r1, r3
 8008ef8:	481d      	ldr	r0, [pc, #116]	@ (8008f70 <create_name+0x124>)
 8008efa:	f7fe ffe1 	bl	8007ec0 <chk_chr>
 8008efe:	4603      	mov	r3, r0
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d001      	beq.n	8008f08 <create_name+0xbc>
 8008f04:	2306      	movs	r3, #6
 8008f06:	e02c      	b.n	8008f62 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8008f08:	7efb      	ldrb	r3, [r7, #27]
 8008f0a:	2b60      	cmp	r3, #96	@ 0x60
 8008f0c:	d905      	bls.n	8008f1a <create_name+0xce>
 8008f0e:	7efb      	ldrb	r3, [r7, #27]
 8008f10:	2b7a      	cmp	r3, #122	@ 0x7a
 8008f12:	d802      	bhi.n	8008f1a <create_name+0xce>
 8008f14:	7efb      	ldrb	r3, [r7, #27]
 8008f16:	3b20      	subs	r3, #32
 8008f18:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8008f1a:	693b      	ldr	r3, [r7, #16]
 8008f1c:	1c5a      	adds	r2, r3, #1
 8008f1e:	613a      	str	r2, [r7, #16]
 8008f20:	68ba      	ldr	r2, [r7, #8]
 8008f22:	4413      	add	r3, r2
 8008f24:	7efa      	ldrb	r2, [r7, #27]
 8008f26:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8008f28:	e7a6      	b.n	8008e78 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8008f2a:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8008f2c:	68fa      	ldr	r2, [r7, #12]
 8008f2e:	69fb      	ldr	r3, [r7, #28]
 8008f30:	441a      	add	r2, r3
 8008f32:	683b      	ldr	r3, [r7, #0]
 8008f34:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8008f36:	693b      	ldr	r3, [r7, #16]
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d101      	bne.n	8008f40 <create_name+0xf4>
 8008f3c:	2306      	movs	r3, #6
 8008f3e:	e010      	b.n	8008f62 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8008f40:	68bb      	ldr	r3, [r7, #8]
 8008f42:	781b      	ldrb	r3, [r3, #0]
 8008f44:	2be5      	cmp	r3, #229	@ 0xe5
 8008f46:	d102      	bne.n	8008f4e <create_name+0x102>
 8008f48:	68bb      	ldr	r3, [r7, #8]
 8008f4a:	2205      	movs	r2, #5
 8008f4c:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8008f4e:	7efb      	ldrb	r3, [r7, #27]
 8008f50:	2b20      	cmp	r3, #32
 8008f52:	d801      	bhi.n	8008f58 <create_name+0x10c>
 8008f54:	2204      	movs	r2, #4
 8008f56:	e000      	b.n	8008f5a <create_name+0x10e>
 8008f58:	2200      	movs	r2, #0
 8008f5a:	68bb      	ldr	r3, [r7, #8]
 8008f5c:	330b      	adds	r3, #11
 8008f5e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8008f60:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8008f62:	4618      	mov	r0, r3
 8008f64:	3720      	adds	r7, #32
 8008f66:	46bd      	mov	sp, r7
 8008f68:	bd80      	pop	{r7, pc}
 8008f6a:	bf00      	nop
 8008f6c:	08011064 	.word	0x08011064
 8008f70:	08010f40 	.word	0x08010f40

08008f74 <follow_path>:
=======
 80093b0:	7efb      	ldrb	r3, [r7, #27]
 80093b2:	4619      	mov	r1, r3
 80093b4:	481d      	ldr	r0, [pc, #116]	@ (800942c <create_name+0x124>)
 80093b6:	f7ff f812 	bl	80083de <chk_chr>
 80093ba:	4603      	mov	r3, r0
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d001      	beq.n	80093c4 <create_name+0xbc>
 80093c0:	2306      	movs	r3, #6
 80093c2:	e02c      	b.n	800941e <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 80093c4:	7efb      	ldrb	r3, [r7, #27]
 80093c6:	2b60      	cmp	r3, #96	@ 0x60
 80093c8:	d905      	bls.n	80093d6 <create_name+0xce>
 80093ca:	7efb      	ldrb	r3, [r7, #27]
 80093cc:	2b7a      	cmp	r3, #122	@ 0x7a
 80093ce:	d802      	bhi.n	80093d6 <create_name+0xce>
 80093d0:	7efb      	ldrb	r3, [r7, #27]
 80093d2:	3b20      	subs	r3, #32
 80093d4:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 80093d6:	693b      	ldr	r3, [r7, #16]
 80093d8:	1c5a      	adds	r2, r3, #1
 80093da:	613a      	str	r2, [r7, #16]
 80093dc:	68ba      	ldr	r2, [r7, #8]
 80093de:	4413      	add	r3, r2
 80093e0:	7efa      	ldrb	r2, [r7, #27]
 80093e2:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 80093e4:	e7a6      	b.n	8009334 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 80093e6:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 80093e8:	68fa      	ldr	r2, [r7, #12]
 80093ea:	69fb      	ldr	r3, [r7, #28]
 80093ec:	441a      	add	r2, r3
 80093ee:	683b      	ldr	r3, [r7, #0]
 80093f0:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 80093f2:	693b      	ldr	r3, [r7, #16]
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d101      	bne.n	80093fc <create_name+0xf4>
 80093f8:	2306      	movs	r3, #6
 80093fa:	e010      	b.n	800941e <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80093fc:	68bb      	ldr	r3, [r7, #8]
 80093fe:	781b      	ldrb	r3, [r3, #0]
 8009400:	2be5      	cmp	r3, #229	@ 0xe5
 8009402:	d102      	bne.n	800940a <create_name+0x102>
 8009404:	68bb      	ldr	r3, [r7, #8]
 8009406:	2205      	movs	r2, #5
 8009408:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800940a:	7efb      	ldrb	r3, [r7, #27]
 800940c:	2b20      	cmp	r3, #32
 800940e:	d801      	bhi.n	8009414 <create_name+0x10c>
 8009410:	2204      	movs	r2, #4
 8009412:	e000      	b.n	8009416 <create_name+0x10e>
 8009414:	2200      	movs	r2, #0
 8009416:	68bb      	ldr	r3, [r7, #8]
 8009418:	330b      	adds	r3, #11
 800941a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800941c:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800941e:	4618      	mov	r0, r3
 8009420:	3720      	adds	r7, #32
 8009422:	46bd      	mov	sp, r7
 8009424:	bd80      	pop	{r7, pc}
 8009426:	bf00      	nop
 8009428:	0800d92c 	.word	0x0800d92c
 800942c:	0800d8a0 	.word	0x0800d8a0

08009430 <follow_path>:
>>>>>>> Stashed changes
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
<<<<<<< Updated upstream
 8008f74:	b580      	push	{r7, lr}
 8008f76:	b086      	sub	sp, #24
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	6078      	str	r0, [r7, #4]
 8008f7c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8008f82:	693b      	ldr	r3, [r7, #16]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	60fb      	str	r3, [r7, #12]
=======
 8009430:	b580      	push	{r7, lr}
 8009432:	b086      	sub	sp, #24
 8009434:	af00      	add	r7, sp, #0
 8009436:	6078      	str	r0, [r7, #4]
 8009438:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800943e:	693b      	ldr	r3, [r7, #16]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	60fb      	str	r3, [r7, #12]
>>>>>>> Stashed changes
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
<<<<<<< Updated upstream
 8008f88:	e002      	b.n	8008f90 <follow_path+0x1c>
 8008f8a:	683b      	ldr	r3, [r7, #0]
 8008f8c:	3301      	adds	r3, #1
 8008f8e:	603b      	str	r3, [r7, #0]
 8008f90:	683b      	ldr	r3, [r7, #0]
 8008f92:	781b      	ldrb	r3, [r3, #0]
 8008f94:	2b2f      	cmp	r3, #47	@ 0x2f
 8008f96:	d0f8      	beq.n	8008f8a <follow_path+0x16>
 8008f98:	683b      	ldr	r3, [r7, #0]
 8008f9a:	781b      	ldrb	r3, [r3, #0]
 8008f9c:	2b5c      	cmp	r3, #92	@ 0x5c
 8008f9e:	d0f4      	beq.n	8008f8a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8008fa0:	693b      	ldr	r3, [r7, #16]
 8008fa2:	2200      	movs	r2, #0
 8008fa4:	609a      	str	r2, [r3, #8]
=======
 8009444:	e002      	b.n	800944c <follow_path+0x1c>
 8009446:	683b      	ldr	r3, [r7, #0]
 8009448:	3301      	adds	r3, #1
 800944a:	603b      	str	r3, [r7, #0]
 800944c:	683b      	ldr	r3, [r7, #0]
 800944e:	781b      	ldrb	r3, [r3, #0]
 8009450:	2b2f      	cmp	r3, #47	@ 0x2f
 8009452:	d0f8      	beq.n	8009446 <follow_path+0x16>
 8009454:	683b      	ldr	r3, [r7, #0]
 8009456:	781b      	ldrb	r3, [r3, #0]
 8009458:	2b5c      	cmp	r3, #92	@ 0x5c
 800945a:	d0f4      	beq.n	8009446 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800945c:	693b      	ldr	r3, [r7, #16]
 800945e:	2200      	movs	r2, #0
 8009460:	609a      	str	r2, [r3, #8]
>>>>>>> Stashed changes
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
<<<<<<< Updated upstream
 8008fa6:	683b      	ldr	r3, [r7, #0]
 8008fa8:	781b      	ldrb	r3, [r3, #0]
 8008faa:	2b1f      	cmp	r3, #31
 8008fac:	d80a      	bhi.n	8008fc4 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	2280      	movs	r2, #128	@ 0x80
 8008fb2:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 8008fb6:	2100      	movs	r1, #0
 8008fb8:	6878      	ldr	r0, [r7, #4]
 8008fba:	f7ff fcfa 	bl	80089b2 <dir_sdi>
 8008fbe:	4603      	mov	r3, r0
 8008fc0:	75fb      	strb	r3, [r7, #23]
 8008fc2:	e043      	b.n	800904c <follow_path+0xd8>
=======
 8009462:	683b      	ldr	r3, [r7, #0]
 8009464:	781b      	ldrb	r3, [r3, #0]
 8009466:	2b1f      	cmp	r3, #31
 8009468:	d80a      	bhi.n	8009480 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	2280      	movs	r2, #128	@ 0x80
 800946e:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 8009472:	2100      	movs	r1, #0
 8009474:	6878      	ldr	r0, [r7, #4]
 8009476:	f7ff fcfa 	bl	8008e6e <dir_sdi>
 800947a:	4603      	mov	r3, r0
 800947c:	75fb      	strb	r3, [r7, #23]
 800947e:	e043      	b.n	8009508 <follow_path+0xd8>
>>>>>>> Stashed changes

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
<<<<<<< Updated upstream
 8008fc4:	463b      	mov	r3, r7
 8008fc6:	4619      	mov	r1, r3
 8008fc8:	6878      	ldr	r0, [r7, #4]
 8008fca:	f7ff ff3f 	bl	8008e4c <create_name>
 8008fce:	4603      	mov	r3, r0
 8008fd0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8008fd2:	7dfb      	ldrb	r3, [r7, #23]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d134      	bne.n	8009042 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8008fd8:	6878      	ldr	r0, [r7, #4]
 8008fda:	f7ff feb0 	bl	8008d3e <dir_find>
 8008fde:	4603      	mov	r3, r0
 8008fe0:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8008fe8:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8008fea:	7dfb      	ldrb	r3, [r7, #23]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d00a      	beq.n	8009006 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8008ff0:	7dfb      	ldrb	r3, [r7, #23]
 8008ff2:	2b04      	cmp	r3, #4
 8008ff4:	d127      	bne.n	8009046 <follow_path+0xd2>
=======
 8009480:	463b      	mov	r3, r7
 8009482:	4619      	mov	r1, r3
 8009484:	6878      	ldr	r0, [r7, #4]
 8009486:	f7ff ff3f 	bl	8009308 <create_name>
 800948a:	4603      	mov	r3, r0
 800948c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800948e:	7dfb      	ldrb	r3, [r7, #23]
 8009490:	2b00      	cmp	r3, #0
 8009492:	d134      	bne.n	80094fe <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8009494:	6878      	ldr	r0, [r7, #4]
 8009496:	f7ff feb0 	bl	80091fa <dir_find>
 800949a:	4603      	mov	r3, r0
 800949c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80094a4:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80094a6:	7dfb      	ldrb	r3, [r7, #23]
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d00a      	beq.n	80094c2 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80094ac:	7dfb      	ldrb	r3, [r7, #23]
 80094ae:	2b04      	cmp	r3, #4
 80094b0:	d127      	bne.n	8009502 <follow_path+0xd2>
>>>>>>> Stashed changes
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
<<<<<<< Updated upstream
 8008ff6:	7afb      	ldrb	r3, [r7, #11]
 8008ff8:	f003 0304 	and.w	r3, r3, #4
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d122      	bne.n	8009046 <follow_path+0xd2>
 8009000:	2305      	movs	r3, #5
 8009002:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8009004:	e01f      	b.n	8009046 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009006:	7afb      	ldrb	r3, [r7, #11]
 8009008:	f003 0304 	and.w	r3, r3, #4
 800900c:	2b00      	cmp	r3, #0
 800900e:	d11c      	bne.n	800904a <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8009010:	693b      	ldr	r3, [r7, #16]
 8009012:	799b      	ldrb	r3, [r3, #6]
 8009014:	f003 0310 	and.w	r3, r3, #16
 8009018:	2b00      	cmp	r3, #0
 800901a:	d102      	bne.n	8009022 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800901c:	2305      	movs	r3, #5
 800901e:	75fb      	strb	r3, [r7, #23]
 8009020:	e014      	b.n	800904c <follow_path+0xd8>
=======
 80094b2:	7afb      	ldrb	r3, [r7, #11]
 80094b4:	f003 0304 	and.w	r3, r3, #4
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d122      	bne.n	8009502 <follow_path+0xd2>
 80094bc:	2305      	movs	r3, #5
 80094be:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80094c0:	e01f      	b.n	8009502 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80094c2:	7afb      	ldrb	r3, [r7, #11]
 80094c4:	f003 0304 	and.w	r3, r3, #4
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d11c      	bne.n	8009506 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80094cc:	693b      	ldr	r3, [r7, #16]
 80094ce:	799b      	ldrb	r3, [r3, #6]
 80094d0:	f003 0310 	and.w	r3, r3, #16
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d102      	bne.n	80094de <follow_path+0xae>
				res = FR_NO_PATH; break;
 80094d8:	2305      	movs	r3, #5
 80094da:	75fb      	strb	r3, [r7, #23]
 80094dc:	e014      	b.n	8009508 <follow_path+0xd8>
>>>>>>> Stashed changes
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
<<<<<<< Updated upstream
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	695b      	ldr	r3, [r3, #20]
 800902c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009030:	4413      	add	r3, r2
 8009032:	4619      	mov	r1, r3
 8009034:	68f8      	ldr	r0, [r7, #12]
 8009036:	f7ff fe43 	bl	8008cc0 <ld_clust>
 800903a:	4602      	mov	r2, r0
 800903c:	693b      	ldr	r3, [r7, #16]
 800903e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009040:	e7c0      	b.n	8008fc4 <follow_path+0x50>
			if (res != FR_OK) break;
 8009042:	bf00      	nop
 8009044:	e002      	b.n	800904c <follow_path+0xd8>
				break;
 8009046:	bf00      	nop
 8009048:	e000      	b.n	800904c <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800904a:	bf00      	nop
=======
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	695b      	ldr	r3, [r3, #20]
 80094e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80094ec:	4413      	add	r3, r2
 80094ee:	4619      	mov	r1, r3
 80094f0:	68f8      	ldr	r0, [r7, #12]
 80094f2:	f7ff fe43 	bl	800917c <ld_clust>
 80094f6:	4602      	mov	r2, r0
 80094f8:	693b      	ldr	r3, [r7, #16]
 80094fa:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80094fc:	e7c0      	b.n	8009480 <follow_path+0x50>
			if (res != FR_OK) break;
 80094fe:	bf00      	nop
 8009500:	e002      	b.n	8009508 <follow_path+0xd8>
				break;
 8009502:	bf00      	nop
 8009504:	e000      	b.n	8009508 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009506:	bf00      	nop
>>>>>>> Stashed changes
			}
		}
	}

	return res;
<<<<<<< Updated upstream
 800904c:	7dfb      	ldrb	r3, [r7, #23]
}
 800904e:	4618      	mov	r0, r3
 8009050:	3718      	adds	r7, #24
 8009052:	46bd      	mov	sp, r7
 8009054:	bd80      	pop	{r7, pc}

08009056 <get_ldnumber>:
=======
 8009508:	7dfb      	ldrb	r3, [r7, #23]
}
 800950a:	4618      	mov	r0, r3
 800950c:	3718      	adds	r7, #24
 800950e:	46bd      	mov	sp, r7
 8009510:	bd80      	pop	{r7, pc}

08009512 <get_ldnumber>:
>>>>>>> Stashed changes

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
<<<<<<< Updated upstream
 8009056:	b480      	push	{r7}
 8009058:	b087      	sub	sp, #28
 800905a:	af00      	add	r7, sp, #0
 800905c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800905e:	f04f 33ff 	mov.w	r3, #4294967295
 8009062:	613b      	str	r3, [r7, #16]
=======
 8009512:	b480      	push	{r7}
 8009514:	b087      	sub	sp, #28
 8009516:	af00      	add	r7, sp, #0
 8009518:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800951a:	f04f 33ff 	mov.w	r3, #4294967295
 800951e:	613b      	str	r3, [r7, #16]
>>>>>>> Stashed changes
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
<<<<<<< Updated upstream
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	2b00      	cmp	r3, #0
 800906a:	d031      	beq.n	80090d0 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	617b      	str	r3, [r7, #20]
 8009072:	e002      	b.n	800907a <get_ldnumber+0x24>
 8009074:	697b      	ldr	r3, [r7, #20]
 8009076:	3301      	adds	r3, #1
 8009078:	617b      	str	r3, [r7, #20]
 800907a:	697b      	ldr	r3, [r7, #20]
 800907c:	781b      	ldrb	r3, [r3, #0]
 800907e:	2b20      	cmp	r3, #32
 8009080:	d903      	bls.n	800908a <get_ldnumber+0x34>
 8009082:	697b      	ldr	r3, [r7, #20]
 8009084:	781b      	ldrb	r3, [r3, #0]
 8009086:	2b3a      	cmp	r3, #58	@ 0x3a
 8009088:	d1f4      	bne.n	8009074 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800908a:	697b      	ldr	r3, [r7, #20]
 800908c:	781b      	ldrb	r3, [r3, #0]
 800908e:	2b3a      	cmp	r3, #58	@ 0x3a
 8009090:	d11c      	bne.n	80090cc <get_ldnumber+0x76>
			tp = *path;
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	1c5a      	adds	r2, r3, #1
 800909c:	60fa      	str	r2, [r7, #12]
 800909e:	781b      	ldrb	r3, [r3, #0]
 80090a0:	3b30      	subs	r3, #48	@ 0x30
 80090a2:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80090a4:	68bb      	ldr	r3, [r7, #8]
 80090a6:	2b09      	cmp	r3, #9
 80090a8:	d80e      	bhi.n	80090c8 <get_ldnumber+0x72>
 80090aa:	68fa      	ldr	r2, [r7, #12]
 80090ac:	697b      	ldr	r3, [r7, #20]
 80090ae:	429a      	cmp	r2, r3
 80090b0:	d10a      	bne.n	80090c8 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80090b2:	68bb      	ldr	r3, [r7, #8]
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d107      	bne.n	80090c8 <get_ldnumber+0x72>
					vol = (int)i;
 80090b8:	68bb      	ldr	r3, [r7, #8]
 80090ba:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80090bc:	697b      	ldr	r3, [r7, #20]
 80090be:	3301      	adds	r3, #1
 80090c0:	617b      	str	r3, [r7, #20]
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	697a      	ldr	r2, [r7, #20]
 80090c6:	601a      	str	r2, [r3, #0]
=======
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	2b00      	cmp	r3, #0
 8009526:	d031      	beq.n	800958c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	617b      	str	r3, [r7, #20]
 800952e:	e002      	b.n	8009536 <get_ldnumber+0x24>
 8009530:	697b      	ldr	r3, [r7, #20]
 8009532:	3301      	adds	r3, #1
 8009534:	617b      	str	r3, [r7, #20]
 8009536:	697b      	ldr	r3, [r7, #20]
 8009538:	781b      	ldrb	r3, [r3, #0]
 800953a:	2b20      	cmp	r3, #32
 800953c:	d903      	bls.n	8009546 <get_ldnumber+0x34>
 800953e:	697b      	ldr	r3, [r7, #20]
 8009540:	781b      	ldrb	r3, [r3, #0]
 8009542:	2b3a      	cmp	r3, #58	@ 0x3a
 8009544:	d1f4      	bne.n	8009530 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8009546:	697b      	ldr	r3, [r7, #20]
 8009548:	781b      	ldrb	r3, [r3, #0]
 800954a:	2b3a      	cmp	r3, #58	@ 0x3a
 800954c:	d11c      	bne.n	8009588 <get_ldnumber+0x76>
			tp = *path;
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	1c5a      	adds	r2, r3, #1
 8009558:	60fa      	str	r2, [r7, #12]
 800955a:	781b      	ldrb	r3, [r3, #0]
 800955c:	3b30      	subs	r3, #48	@ 0x30
 800955e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8009560:	68bb      	ldr	r3, [r7, #8]
 8009562:	2b09      	cmp	r3, #9
 8009564:	d80e      	bhi.n	8009584 <get_ldnumber+0x72>
 8009566:	68fa      	ldr	r2, [r7, #12]
 8009568:	697b      	ldr	r3, [r7, #20]
 800956a:	429a      	cmp	r2, r3
 800956c:	d10a      	bne.n	8009584 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800956e:	68bb      	ldr	r3, [r7, #8]
 8009570:	2b00      	cmp	r3, #0
 8009572:	d107      	bne.n	8009584 <get_ldnumber+0x72>
					vol = (int)i;
 8009574:	68bb      	ldr	r3, [r7, #8]
 8009576:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8009578:	697b      	ldr	r3, [r7, #20]
 800957a:	3301      	adds	r3, #1
 800957c:	617b      	str	r3, [r7, #20]
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	697a      	ldr	r2, [r7, #20]
 8009582:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
<<<<<<< Updated upstream
 80090c8:	693b      	ldr	r3, [r7, #16]
 80090ca:	e002      	b.n	80090d2 <get_ldnumber+0x7c>
=======
 8009584:	693b      	ldr	r3, [r7, #16]
 8009586:	e002      	b.n	800958e <get_ldnumber+0x7c>
>>>>>>> Stashed changes
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
<<<<<<< Updated upstream
 80090cc:	2300      	movs	r3, #0
 80090ce:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80090d0:	693b      	ldr	r3, [r7, #16]
}
 80090d2:	4618      	mov	r0, r3
 80090d4:	371c      	adds	r7, #28
 80090d6:	46bd      	mov	sp, r7
 80090d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090dc:	4770      	bx	lr
	...

080090e0 <check_fs>:
=======
 8009588:	2300      	movs	r3, #0
 800958a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800958c:	693b      	ldr	r3, [r7, #16]
}
 800958e:	4618      	mov	r0, r3
 8009590:	371c      	adds	r7, #28
 8009592:	46bd      	mov	sp, r7
 8009594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009598:	4770      	bx	lr
	...

0800959c <check_fs>:
>>>>>>> Stashed changes
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
<<<<<<< Updated upstream
 80090e0:	b580      	push	{r7, lr}
 80090e2:	b082      	sub	sp, #8
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	6078      	str	r0, [r7, #4]
 80090e8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	2200      	movs	r2, #0
 80090ee:	70da      	strb	r2, [r3, #3]
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	f04f 32ff 	mov.w	r2, #4294967295
 80090f6:	631a      	str	r2, [r3, #48]	@ 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80090f8:	6839      	ldr	r1, [r7, #0]
 80090fa:	6878      	ldr	r0, [r7, #4]
 80090fc:	f7ff f8dc 	bl	80082b8 <move_window>
 8009100:	4603      	mov	r3, r0
 8009102:	2b00      	cmp	r3, #0
 8009104:	d001      	beq.n	800910a <check_fs+0x2a>
 8009106:	2304      	movs	r3, #4
 8009108:	e038      	b.n	800917c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	3334      	adds	r3, #52	@ 0x34
 800910e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8009112:	4618      	mov	r0, r3
 8009114:	f7fe fdee 	bl	8007cf4 <ld_word>
 8009118:	4603      	mov	r3, r0
 800911a:	461a      	mov	r2, r3
 800911c:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8009120:	429a      	cmp	r2, r3
 8009122:	d001      	beq.n	8009128 <check_fs+0x48>
 8009124:	2303      	movs	r3, #3
 8009126:	e029      	b.n	800917c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800912e:	2be9      	cmp	r3, #233	@ 0xe9
 8009130:	d009      	beq.n	8009146 <check_fs+0x66>
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8009138:	2beb      	cmp	r3, #235	@ 0xeb
 800913a:	d11e      	bne.n	800917a <check_fs+0x9a>
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8009142:	2b90      	cmp	r3, #144	@ 0x90
 8009144:	d119      	bne.n	800917a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	3334      	adds	r3, #52	@ 0x34
 800914a:	3336      	adds	r3, #54	@ 0x36
 800914c:	4618      	mov	r0, r3
 800914e:	f7fe fdea 	bl	8007d26 <ld_dword>
 8009152:	4603      	mov	r3, r0
 8009154:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8009158:	4a0a      	ldr	r2, [pc, #40]	@ (8009184 <check_fs+0xa4>)
 800915a:	4293      	cmp	r3, r2
 800915c:	d101      	bne.n	8009162 <check_fs+0x82>
 800915e:	2300      	movs	r3, #0
 8009160:	e00c      	b.n	800917c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	3334      	adds	r3, #52	@ 0x34
 8009166:	3352      	adds	r3, #82	@ 0x52
 8009168:	4618      	mov	r0, r3
 800916a:	f7fe fddc 	bl	8007d26 <ld_dword>
 800916e:	4603      	mov	r3, r0
 8009170:	4a05      	ldr	r2, [pc, #20]	@ (8009188 <check_fs+0xa8>)
 8009172:	4293      	cmp	r3, r2
 8009174:	d101      	bne.n	800917a <check_fs+0x9a>
 8009176:	2300      	movs	r3, #0
 8009178:	e000      	b.n	800917c <check_fs+0x9c>
=======
 800959c:	b580      	push	{r7, lr}
 800959e:	b082      	sub	sp, #8
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	6078      	str	r0, [r7, #4]
 80095a4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	2200      	movs	r2, #0
 80095aa:	70da      	strb	r2, [r3, #3]
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	f04f 32ff 	mov.w	r2, #4294967295
 80095b2:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80095b4:	6839      	ldr	r1, [r7, #0]
 80095b6:	6878      	ldr	r0, [r7, #4]
 80095b8:	f7ff f8dc 	bl	8008774 <move_window>
 80095bc:	4603      	mov	r3, r0
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d001      	beq.n	80095c6 <check_fs+0x2a>
 80095c2:	2304      	movs	r3, #4
 80095c4:	e038      	b.n	8009638 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	3330      	adds	r3, #48	@ 0x30
 80095ca:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80095ce:	4618      	mov	r0, r3
 80095d0:	f7fe fe20 	bl	8008214 <ld_word>
 80095d4:	4603      	mov	r3, r0
 80095d6:	461a      	mov	r2, r3
 80095d8:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 80095dc:	429a      	cmp	r2, r3
 80095de:	d001      	beq.n	80095e4 <check_fs+0x48>
 80095e0:	2303      	movs	r3, #3
 80095e2:	e029      	b.n	8009638 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80095ea:	2be9      	cmp	r3, #233	@ 0xe9
 80095ec:	d009      	beq.n	8009602 <check_fs+0x66>
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80095f4:	2beb      	cmp	r3, #235	@ 0xeb
 80095f6:	d11e      	bne.n	8009636 <check_fs+0x9a>
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80095fe:	2b90      	cmp	r3, #144	@ 0x90
 8009600:	d119      	bne.n	8009636 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	3330      	adds	r3, #48	@ 0x30
 8009606:	3336      	adds	r3, #54	@ 0x36
 8009608:	4618      	mov	r0, r3
 800960a:	f7fe fe1b 	bl	8008244 <ld_dword>
 800960e:	4603      	mov	r3, r0
 8009610:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8009614:	4a0a      	ldr	r2, [pc, #40]	@ (8009640 <check_fs+0xa4>)
 8009616:	4293      	cmp	r3, r2
 8009618:	d101      	bne.n	800961e <check_fs+0x82>
 800961a:	2300      	movs	r3, #0
 800961c:	e00c      	b.n	8009638 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	3330      	adds	r3, #48	@ 0x30
 8009622:	3352      	adds	r3, #82	@ 0x52
 8009624:	4618      	mov	r0, r3
 8009626:	f7fe fe0d 	bl	8008244 <ld_dword>
 800962a:	4603      	mov	r3, r0
 800962c:	4a05      	ldr	r2, [pc, #20]	@ (8009644 <check_fs+0xa8>)
 800962e:	4293      	cmp	r3, r2
 8009630:	d101      	bne.n	8009636 <check_fs+0x9a>
 8009632:	2300      	movs	r3, #0
 8009634:	e000      	b.n	8009638 <check_fs+0x9c>
>>>>>>> Stashed changes
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
<<<<<<< Updated upstream
 800917a:	2302      	movs	r3, #2
}
 800917c:	4618      	mov	r0, r3
 800917e:	3708      	adds	r7, #8
 8009180:	46bd      	mov	sp, r7
 8009182:	bd80      	pop	{r7, pc}
 8009184:	00544146 	.word	0x00544146
 8009188:	33544146 	.word	0x33544146

0800918c <find_volume>:
=======
 8009636:	2302      	movs	r3, #2
}
 8009638:	4618      	mov	r0, r3
 800963a:	3708      	adds	r7, #8
 800963c:	46bd      	mov	sp, r7
 800963e:	bd80      	pop	{r7, pc}
 8009640:	00544146 	.word	0x00544146
 8009644:	33544146 	.word	0x33544146

08009648 <find_volume>:
>>>>>>> Stashed changes
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
<<<<<<< Updated upstream
 800918c:	b580      	push	{r7, lr}
 800918e:	b096      	sub	sp, #88	@ 0x58
 8009190:	af00      	add	r7, sp, #0
 8009192:	60f8      	str	r0, [r7, #12]
 8009194:	60b9      	str	r1, [r7, #8]
 8009196:	4613      	mov	r3, r2
 8009198:	71fb      	strb	r3, [r7, #7]
=======
 8009648:	b580      	push	{r7, lr}
 800964a:	b096      	sub	sp, #88	@ 0x58
 800964c:	af00      	add	r7, sp, #0
 800964e:	60f8      	str	r0, [r7, #12]
 8009650:	60b9      	str	r1, [r7, #8]
 8009652:	4613      	mov	r3, r2
 8009654:	71fb      	strb	r3, [r7, #7]
>>>>>>> Stashed changes
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
<<<<<<< Updated upstream
 800919a:	68bb      	ldr	r3, [r7, #8]
 800919c:	2200      	movs	r2, #0
 800919e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80091a0:	68f8      	ldr	r0, [r7, #12]
 80091a2:	f7ff ff58 	bl	8009056 <get_ldnumber>
 80091a6:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80091a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	da01      	bge.n	80091b2 <find_volume+0x26>
 80091ae:	230b      	movs	r3, #11
 80091b0:	e235      	b.n	800961e <find_volume+0x492>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80091b2:	4aa5      	ldr	r2, [pc, #660]	@ (8009448 <find_volume+0x2bc>)
 80091b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80091b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80091ba:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80091bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d101      	bne.n	80091c6 <find_volume+0x3a>
 80091c2:	230c      	movs	r3, #12
 80091c4:	e22b      	b.n	800961e <find_volume+0x492>
=======
 8009656:	68bb      	ldr	r3, [r7, #8]
 8009658:	2200      	movs	r2, #0
 800965a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800965c:	68f8      	ldr	r0, [r7, #12]
 800965e:	f7ff ff58 	bl	8009512 <get_ldnumber>
 8009662:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8009664:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009666:	2b00      	cmp	r3, #0
 8009668:	da01      	bge.n	800966e <find_volume+0x26>
 800966a:	230b      	movs	r3, #11
 800966c:	e22d      	b.n	8009aca <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800966e:	4aa1      	ldr	r2, [pc, #644]	@ (80098f4 <find_volume+0x2ac>)
 8009670:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009672:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009676:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8009678:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800967a:	2b00      	cmp	r3, #0
 800967c:	d101      	bne.n	8009682 <find_volume+0x3a>
 800967e:	230c      	movs	r3, #12
 8009680:	e223      	b.n	8009aca <find_volume+0x482>
>>>>>>> Stashed changes

	ENTER_FF(fs);						/* Lock the volume */
 80091c6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80091c8:	f7fe fe95 	bl	8007ef6 <lock_fs>
 80091cc:	4603      	mov	r3, r0
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d101      	bne.n	80091d6 <find_volume+0x4a>
 80091d2:	230f      	movs	r3, #15
 80091d4:	e223      	b.n	800961e <find_volume+0x492>
	*rfs = fs;							/* Return pointer to the file system object */
<<<<<<< Updated upstream
 80091d6:	68bb      	ldr	r3, [r7, #8]
 80091d8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80091da:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80091dc:	79fb      	ldrb	r3, [r7, #7]
 80091de:	f023 0301 	bic.w	r3, r3, #1
 80091e2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80091e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091e6:	781b      	ldrb	r3, [r3, #0]
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d01a      	beq.n	8009222 <find_volume+0x96>
		stat = disk_status(fs->drv);
 80091ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091ee:	785b      	ldrb	r3, [r3, #1]
 80091f0:	4618      	mov	r0, r3
 80091f2:	f7fe fce1 	bl	8007bb8 <disk_status>
 80091f6:	4603      	mov	r3, r0
 80091f8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80091fc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009200:	f003 0301 	and.w	r3, r3, #1
 8009204:	2b00      	cmp	r3, #0
 8009206:	d10c      	bne.n	8009222 <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8009208:	79fb      	ldrb	r3, [r7, #7]
 800920a:	2b00      	cmp	r3, #0
 800920c:	d007      	beq.n	800921e <find_volume+0x92>
 800920e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009212:	f003 0304 	and.w	r3, r3, #4
 8009216:	2b00      	cmp	r3, #0
 8009218:	d001      	beq.n	800921e <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 800921a:	230a      	movs	r3, #10
 800921c:	e1ff      	b.n	800961e <find_volume+0x492>
			}
			return FR_OK;				/* The file system object is valid */
 800921e:	2300      	movs	r3, #0
 8009220:	e1fd      	b.n	800961e <find_volume+0x492>
=======
 8009682:	68bb      	ldr	r3, [r7, #8]
 8009684:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009686:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8009688:	79fb      	ldrb	r3, [r7, #7]
 800968a:	f023 0301 	bic.w	r3, r3, #1
 800968e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8009690:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009692:	781b      	ldrb	r3, [r3, #0]
 8009694:	2b00      	cmp	r3, #0
 8009696:	d01a      	beq.n	80096ce <find_volume+0x86>
		stat = disk_status(fs->drv);
 8009698:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800969a:	785b      	ldrb	r3, [r3, #1]
 800969c:	4618      	mov	r0, r3
 800969e:	f7fe fd1b 	bl	80080d8 <disk_status>
 80096a2:	4603      	mov	r3, r0
 80096a4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80096a8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80096ac:	f003 0301 	and.w	r3, r3, #1
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d10c      	bne.n	80096ce <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80096b4:	79fb      	ldrb	r3, [r7, #7]
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d007      	beq.n	80096ca <find_volume+0x82>
 80096ba:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80096be:	f003 0304 	and.w	r3, r3, #4
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d001      	beq.n	80096ca <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80096c6:	230a      	movs	r3, #10
 80096c8:	e1ff      	b.n	8009aca <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 80096ca:	2300      	movs	r3, #0
 80096cc:	e1fd      	b.n	8009aca <find_volume+0x482>
>>>>>>> Stashed changes
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
<<<<<<< Updated upstream
 8009222:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009224:	2200      	movs	r2, #0
 8009226:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8009228:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800922a:	b2da      	uxtb	r2, r3
 800922c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800922e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8009230:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009232:	785b      	ldrb	r3, [r3, #1]
 8009234:	4618      	mov	r0, r3
 8009236:	f7fe fcd9 	bl	8007bec <disk_initialize>
 800923a:	4603      	mov	r3, r0
 800923c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8009240:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009244:	f003 0301 	and.w	r3, r3, #1
 8009248:	2b00      	cmp	r3, #0
 800924a:	d001      	beq.n	8009250 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800924c:	2303      	movs	r3, #3
 800924e:	e1e6      	b.n	800961e <find_volume+0x492>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8009250:	79fb      	ldrb	r3, [r7, #7]
 8009252:	2b00      	cmp	r3, #0
 8009254:	d007      	beq.n	8009266 <find_volume+0xda>
 8009256:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800925a:	f003 0304 	and.w	r3, r3, #4
 800925e:	2b00      	cmp	r3, #0
 8009260:	d001      	beq.n	8009266 <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 8009262:	230a      	movs	r3, #10
 8009264:	e1db      	b.n	800961e <find_volume+0x492>
=======
 80096ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096d0:	2200      	movs	r2, #0
 80096d2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80096d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80096d6:	b2da      	uxtb	r2, r3
 80096d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096da:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80096dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096de:	785b      	ldrb	r3, [r3, #1]
 80096e0:	4618      	mov	r0, r3
 80096e2:	f7fe fd13 	bl	800810c <disk_initialize>
 80096e6:	4603      	mov	r3, r0
 80096e8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80096ec:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80096f0:	f003 0301 	and.w	r3, r3, #1
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d001      	beq.n	80096fc <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80096f8:	2303      	movs	r3, #3
 80096fa:	e1e6      	b.n	8009aca <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80096fc:	79fb      	ldrb	r3, [r7, #7]
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d007      	beq.n	8009712 <find_volume+0xca>
 8009702:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009706:	f003 0304 	and.w	r3, r3, #4
 800970a:	2b00      	cmp	r3, #0
 800970c:	d001      	beq.n	8009712 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800970e:	230a      	movs	r3, #10
 8009710:	e1db      	b.n	8009aca <find_volume+0x482>
>>>>>>> Stashed changes
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
<<<<<<< Updated upstream
 8009266:	2300      	movs	r3, #0
 8009268:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800926a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800926c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800926e:	f7ff ff37 	bl	80090e0 <check_fs>
 8009272:	4603      	mov	r3, r0
 8009274:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8009278:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800927c:	2b02      	cmp	r3, #2
 800927e:	d149      	bne.n	8009314 <find_volume+0x188>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8009280:	2300      	movs	r3, #0
 8009282:	643b      	str	r3, [r7, #64]	@ 0x40
 8009284:	e01e      	b.n	80092c4 <find_volume+0x138>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8009286:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009288:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800928c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800928e:	011b      	lsls	r3, r3, #4
 8009290:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8009294:	4413      	add	r3, r2
 8009296:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8009298:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800929a:	3304      	adds	r3, #4
 800929c:	781b      	ldrb	r3, [r3, #0]
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d006      	beq.n	80092b0 <find_volume+0x124>
 80092a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092a4:	3308      	adds	r3, #8
 80092a6:	4618      	mov	r0, r3
 80092a8:	f7fe fd3d 	bl	8007d26 <ld_dword>
 80092ac:	4602      	mov	r2, r0
 80092ae:	e000      	b.n	80092b2 <find_volume+0x126>
 80092b0:	2200      	movs	r2, #0
 80092b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80092b4:	009b      	lsls	r3, r3, #2
 80092b6:	3358      	adds	r3, #88	@ 0x58
 80092b8:	443b      	add	r3, r7
 80092ba:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80092be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80092c0:	3301      	adds	r3, #1
 80092c2:	643b      	str	r3, [r7, #64]	@ 0x40
 80092c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80092c6:	2b03      	cmp	r3, #3
 80092c8:	d9dd      	bls.n	8009286 <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80092ca:	2300      	movs	r3, #0
 80092cc:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 80092ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d002      	beq.n	80092da <find_volume+0x14e>
 80092d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80092d6:	3b01      	subs	r3, #1
 80092d8:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80092da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80092dc:	009b      	lsls	r3, r3, #2
 80092de:	3358      	adds	r3, #88	@ 0x58
 80092e0:	443b      	add	r3, r7
 80092e2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80092e6:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80092e8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d005      	beq.n	80092fa <find_volume+0x16e>
 80092ee:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80092f0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80092f2:	f7ff fef5 	bl	80090e0 <check_fs>
 80092f6:	4603      	mov	r3, r0
 80092f8:	e000      	b.n	80092fc <find_volume+0x170>
 80092fa:	2303      	movs	r3, #3
 80092fc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8009300:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009304:	2b01      	cmp	r3, #1
 8009306:	d905      	bls.n	8009314 <find_volume+0x188>
 8009308:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800930a:	3301      	adds	r3, #1
 800930c:	643b      	str	r3, [r7, #64]	@ 0x40
 800930e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009310:	2b03      	cmp	r3, #3
 8009312:	d9e2      	bls.n	80092da <find_volume+0x14e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8009314:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009318:	2b04      	cmp	r3, #4
 800931a:	d101      	bne.n	8009320 <find_volume+0x194>
 800931c:	2301      	movs	r3, #1
 800931e:	e17e      	b.n	800961e <find_volume+0x492>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8009320:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009324:	2b01      	cmp	r3, #1
 8009326:	d901      	bls.n	800932c <find_volume+0x1a0>
 8009328:	230d      	movs	r3, #13
 800932a:	e178      	b.n	800961e <find_volume+0x492>
=======
 8009712:	2300      	movs	r3, #0
 8009714:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8009716:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009718:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800971a:	f7ff ff3f 	bl	800959c <check_fs>
 800971e:	4603      	mov	r3, r0
 8009720:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8009724:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009728:	2b02      	cmp	r3, #2
 800972a:	d149      	bne.n	80097c0 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800972c:	2300      	movs	r3, #0
 800972e:	643b      	str	r3, [r7, #64]	@ 0x40
 8009730:	e01e      	b.n	8009770 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8009732:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009734:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009738:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800973a:	011b      	lsls	r3, r3, #4
 800973c:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8009740:	4413      	add	r3, r2
 8009742:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8009744:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009746:	3304      	adds	r3, #4
 8009748:	781b      	ldrb	r3, [r3, #0]
 800974a:	2b00      	cmp	r3, #0
 800974c:	d006      	beq.n	800975c <find_volume+0x114>
 800974e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009750:	3308      	adds	r3, #8
 8009752:	4618      	mov	r0, r3
 8009754:	f7fe fd76 	bl	8008244 <ld_dword>
 8009758:	4602      	mov	r2, r0
 800975a:	e000      	b.n	800975e <find_volume+0x116>
 800975c:	2200      	movs	r2, #0
 800975e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009760:	009b      	lsls	r3, r3, #2
 8009762:	3358      	adds	r3, #88	@ 0x58
 8009764:	443b      	add	r3, r7
 8009766:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800976a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800976c:	3301      	adds	r3, #1
 800976e:	643b      	str	r3, [r7, #64]	@ 0x40
 8009770:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009772:	2b03      	cmp	r3, #3
 8009774:	d9dd      	bls.n	8009732 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8009776:	2300      	movs	r3, #0
 8009778:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800977a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800977c:	2b00      	cmp	r3, #0
 800977e:	d002      	beq.n	8009786 <find_volume+0x13e>
 8009780:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009782:	3b01      	subs	r3, #1
 8009784:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8009786:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009788:	009b      	lsls	r3, r3, #2
 800978a:	3358      	adds	r3, #88	@ 0x58
 800978c:	443b      	add	r3, r7
 800978e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8009792:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8009794:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009796:	2b00      	cmp	r3, #0
 8009798:	d005      	beq.n	80097a6 <find_volume+0x15e>
 800979a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800979c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800979e:	f7ff fefd 	bl	800959c <check_fs>
 80097a2:	4603      	mov	r3, r0
 80097a4:	e000      	b.n	80097a8 <find_volume+0x160>
 80097a6:	2303      	movs	r3, #3
 80097a8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80097ac:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80097b0:	2b01      	cmp	r3, #1
 80097b2:	d905      	bls.n	80097c0 <find_volume+0x178>
 80097b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80097b6:	3301      	adds	r3, #1
 80097b8:	643b      	str	r3, [r7, #64]	@ 0x40
 80097ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80097bc:	2b03      	cmp	r3, #3
 80097be:	d9e2      	bls.n	8009786 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80097c0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80097c4:	2b04      	cmp	r3, #4
 80097c6:	d101      	bne.n	80097cc <find_volume+0x184>
 80097c8:	2301      	movs	r3, #1
 80097ca:	e17e      	b.n	8009aca <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80097cc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80097d0:	2b01      	cmp	r3, #1
 80097d2:	d901      	bls.n	80097d8 <find_volume+0x190>
 80097d4:	230d      	movs	r3, #13
 80097d6:	e178      	b.n	8009aca <find_volume+0x482>
>>>>>>> Stashed changes
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
<<<<<<< Updated upstream
 800932c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800932e:	3334      	adds	r3, #52	@ 0x34
 8009330:	330b      	adds	r3, #11
 8009332:	4618      	mov	r0, r3
 8009334:	f7fe fcde 	bl	8007cf4 <ld_word>
 8009338:	4603      	mov	r3, r0
 800933a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800933e:	d001      	beq.n	8009344 <find_volume+0x1b8>
 8009340:	230d      	movs	r3, #13
 8009342:	e16c      	b.n	800961e <find_volume+0x492>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8009344:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009346:	3334      	adds	r3, #52	@ 0x34
 8009348:	3316      	adds	r3, #22
 800934a:	4618      	mov	r0, r3
 800934c:	f7fe fcd2 	bl	8007cf4 <ld_word>
 8009350:	4603      	mov	r3, r0
 8009352:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8009354:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009356:	2b00      	cmp	r3, #0
 8009358:	d106      	bne.n	8009368 <find_volume+0x1dc>
 800935a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800935c:	3334      	adds	r3, #52	@ 0x34
 800935e:	3324      	adds	r3, #36	@ 0x24
 8009360:	4618      	mov	r0, r3
 8009362:	f7fe fce0 	bl	8007d26 <ld_dword>
 8009366:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8009368:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800936a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800936c:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800936e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009370:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8009374:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009376:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8009378:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800937a:	789b      	ldrb	r3, [r3, #2]
 800937c:	2b01      	cmp	r3, #1
 800937e:	d005      	beq.n	800938c <find_volume+0x200>
 8009380:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009382:	789b      	ldrb	r3, [r3, #2]
 8009384:	2b02      	cmp	r3, #2
 8009386:	d001      	beq.n	800938c <find_volume+0x200>
 8009388:	230d      	movs	r3, #13
 800938a:	e148      	b.n	800961e <find_volume+0x492>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800938c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800938e:	789b      	ldrb	r3, [r3, #2]
 8009390:	461a      	mov	r2, r3
 8009392:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009394:	fb02 f303 	mul.w	r3, r2, r3
 8009398:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800939a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800939c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80093a0:	461a      	mov	r2, r3
 80093a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093a4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80093a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093a8:	895b      	ldrh	r3, [r3, #10]
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d008      	beq.n	80093c0 <find_volume+0x234>
 80093ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093b0:	895b      	ldrh	r3, [r3, #10]
 80093b2:	461a      	mov	r2, r3
 80093b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093b6:	895b      	ldrh	r3, [r3, #10]
 80093b8:	3b01      	subs	r3, #1
 80093ba:	4013      	ands	r3, r2
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d001      	beq.n	80093c4 <find_volume+0x238>
 80093c0:	230d      	movs	r3, #13
 80093c2:	e12c      	b.n	800961e <find_volume+0x492>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80093c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093c6:	3334      	adds	r3, #52	@ 0x34
 80093c8:	3311      	adds	r3, #17
 80093ca:	4618      	mov	r0, r3
 80093cc:	f7fe fc92 	bl	8007cf4 <ld_word>
 80093d0:	4603      	mov	r3, r0
 80093d2:	461a      	mov	r2, r3
 80093d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093d6:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80093d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093da:	891b      	ldrh	r3, [r3, #8]
 80093dc:	f003 030f 	and.w	r3, r3, #15
 80093e0:	b29b      	uxth	r3, r3
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d001      	beq.n	80093ea <find_volume+0x25e>
 80093e6:	230d      	movs	r3, #13
 80093e8:	e119      	b.n	800961e <find_volume+0x492>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80093ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093ec:	3334      	adds	r3, #52	@ 0x34
 80093ee:	3313      	adds	r3, #19
 80093f0:	4618      	mov	r0, r3
 80093f2:	f7fe fc7f 	bl	8007cf4 <ld_word>
 80093f6:	4603      	mov	r3, r0
 80093f8:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80093fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d106      	bne.n	800940e <find_volume+0x282>
 8009400:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009402:	3334      	adds	r3, #52	@ 0x34
 8009404:	3320      	adds	r3, #32
 8009406:	4618      	mov	r0, r3
 8009408:	f7fe fc8d 	bl	8007d26 <ld_dword>
 800940c:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800940e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009410:	3334      	adds	r3, #52	@ 0x34
 8009412:	330e      	adds	r3, #14
 8009414:	4618      	mov	r0, r3
 8009416:	f7fe fc6d 	bl	8007cf4 <ld_word>
 800941a:	4603      	mov	r3, r0
 800941c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800941e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8009420:	2b00      	cmp	r3, #0
 8009422:	d101      	bne.n	8009428 <find_volume+0x29c>
 8009424:	230d      	movs	r3, #13
 8009426:	e0fa      	b.n	800961e <find_volume+0x492>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8009428:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800942a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800942c:	4413      	add	r3, r2
 800942e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009430:	8912      	ldrh	r2, [r2, #8]
 8009432:	0912      	lsrs	r2, r2, #4
 8009434:	b292      	uxth	r2, r2
 8009436:	4413      	add	r3, r2
 8009438:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800943a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800943c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800943e:	429a      	cmp	r2, r3
 8009440:	d204      	bcs.n	800944c <find_volume+0x2c0>
 8009442:	230d      	movs	r3, #13
 8009444:	e0eb      	b.n	800961e <find_volume+0x492>
 8009446:	bf00      	nop
 8009448:	20000a34 	.word	0x20000a34
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800944c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800944e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009450:	1ad3      	subs	r3, r2, r3
 8009452:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009454:	8952      	ldrh	r2, [r2, #10]
 8009456:	fbb3 f3f2 	udiv	r3, r3, r2
 800945a:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800945c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800945e:	2b00      	cmp	r3, #0
 8009460:	d101      	bne.n	8009466 <find_volume+0x2da>
 8009462:	230d      	movs	r3, #13
 8009464:	e0db      	b.n	800961e <find_volume+0x492>
		fmt = FS_FAT32;
 8009466:	2303      	movs	r3, #3
 8009468:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800946c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800946e:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8009472:	4293      	cmp	r3, r2
 8009474:	d802      	bhi.n	800947c <find_volume+0x2f0>
 8009476:	2302      	movs	r3, #2
 8009478:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800947c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800947e:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8009482:	4293      	cmp	r3, r2
 8009484:	d802      	bhi.n	800948c <find_volume+0x300>
 8009486:	2301      	movs	r3, #1
 8009488:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800948c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800948e:	1c9a      	adds	r2, r3, #2
 8009490:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009492:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8009494:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009496:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009498:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800949a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800949c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800949e:	441a      	add	r2, r3
 80094a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094a2:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 80094a4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80094a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094a8:	441a      	add	r2, r3
 80094aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094ac:	62da      	str	r2, [r3, #44]	@ 0x2c
		if (fmt == FS_FAT32) {
 80094ae:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80094b2:	2b03      	cmp	r3, #3
 80094b4:	d11e      	bne.n	80094f4 <find_volume+0x368>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80094b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094b8:	3334      	adds	r3, #52	@ 0x34
 80094ba:	332a      	adds	r3, #42	@ 0x2a
 80094bc:	4618      	mov	r0, r3
 80094be:	f7fe fc19 	bl	8007cf4 <ld_word>
 80094c2:	4603      	mov	r3, r0
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d001      	beq.n	80094cc <find_volume+0x340>
 80094c8:	230d      	movs	r3, #13
 80094ca:	e0a8      	b.n	800961e <find_volume+0x492>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80094cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094ce:	891b      	ldrh	r3, [r3, #8]
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d001      	beq.n	80094d8 <find_volume+0x34c>
 80094d4:	230d      	movs	r3, #13
 80094d6:	e0a2      	b.n	800961e <find_volume+0x492>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80094d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094da:	3334      	adds	r3, #52	@ 0x34
 80094dc:	332c      	adds	r3, #44	@ 0x2c
 80094de:	4618      	mov	r0, r3
 80094e0:	f7fe fc21 	bl	8007d26 <ld_dword>
 80094e4:	4602      	mov	r2, r0
 80094e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094e8:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80094ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094ec:	699b      	ldr	r3, [r3, #24]
 80094ee:	009b      	lsls	r3, r3, #2
 80094f0:	647b      	str	r3, [r7, #68]	@ 0x44
 80094f2:	e01f      	b.n	8009534 <find_volume+0x3a8>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80094f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094f6:	891b      	ldrh	r3, [r3, #8]
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d101      	bne.n	8009500 <find_volume+0x374>
 80094fc:	230d      	movs	r3, #13
 80094fe:	e08e      	b.n	800961e <find_volume+0x492>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8009500:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009502:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009504:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009506:	441a      	add	r2, r3
 8009508:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800950a:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800950c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009510:	2b02      	cmp	r3, #2
 8009512:	d103      	bne.n	800951c <find_volume+0x390>
 8009514:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009516:	699b      	ldr	r3, [r3, #24]
 8009518:	005b      	lsls	r3, r3, #1
 800951a:	e00a      	b.n	8009532 <find_volume+0x3a6>
 800951c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800951e:	699a      	ldr	r2, [r3, #24]
 8009520:	4613      	mov	r3, r2
 8009522:	005b      	lsls	r3, r3, #1
 8009524:	4413      	add	r3, r2
 8009526:	085a      	lsrs	r2, r3, #1
 8009528:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800952a:	699b      	ldr	r3, [r3, #24]
 800952c:	f003 0301 	and.w	r3, r3, #1
 8009530:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8009532:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8009534:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009536:	69da      	ldr	r2, [r3, #28]
 8009538:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800953a:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800953e:	0a5b      	lsrs	r3, r3, #9
 8009540:	429a      	cmp	r2, r3
 8009542:	d201      	bcs.n	8009548 <find_volume+0x3bc>
 8009544:	230d      	movs	r3, #13
 8009546:	e06a      	b.n	800961e <find_volume+0x492>
=======
 80097d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097da:	3330      	adds	r3, #48	@ 0x30
 80097dc:	330b      	adds	r3, #11
 80097de:	4618      	mov	r0, r3
 80097e0:	f7fe fd18 	bl	8008214 <ld_word>
 80097e4:	4603      	mov	r3, r0
 80097e6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80097ea:	d001      	beq.n	80097f0 <find_volume+0x1a8>
 80097ec:	230d      	movs	r3, #13
 80097ee:	e16c      	b.n	8009aca <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80097f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097f2:	3330      	adds	r3, #48	@ 0x30
 80097f4:	3316      	adds	r3, #22
 80097f6:	4618      	mov	r0, r3
 80097f8:	f7fe fd0c 	bl	8008214 <ld_word>
 80097fc:	4603      	mov	r3, r0
 80097fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8009800:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009802:	2b00      	cmp	r3, #0
 8009804:	d106      	bne.n	8009814 <find_volume+0x1cc>
 8009806:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009808:	3330      	adds	r3, #48	@ 0x30
 800980a:	3324      	adds	r3, #36	@ 0x24
 800980c:	4618      	mov	r0, r3
 800980e:	f7fe fd19 	bl	8008244 <ld_dword>
 8009812:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8009814:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009816:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009818:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800981a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800981c:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 8009820:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009822:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8009824:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009826:	789b      	ldrb	r3, [r3, #2]
 8009828:	2b01      	cmp	r3, #1
 800982a:	d005      	beq.n	8009838 <find_volume+0x1f0>
 800982c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800982e:	789b      	ldrb	r3, [r3, #2]
 8009830:	2b02      	cmp	r3, #2
 8009832:	d001      	beq.n	8009838 <find_volume+0x1f0>
 8009834:	230d      	movs	r3, #13
 8009836:	e148      	b.n	8009aca <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8009838:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800983a:	789b      	ldrb	r3, [r3, #2]
 800983c:	461a      	mov	r2, r3
 800983e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009840:	fb02 f303 	mul.w	r3, r2, r3
 8009844:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8009846:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009848:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800984c:	461a      	mov	r2, r3
 800984e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009850:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8009852:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009854:	895b      	ldrh	r3, [r3, #10]
 8009856:	2b00      	cmp	r3, #0
 8009858:	d008      	beq.n	800986c <find_volume+0x224>
 800985a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800985c:	895b      	ldrh	r3, [r3, #10]
 800985e:	461a      	mov	r2, r3
 8009860:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009862:	895b      	ldrh	r3, [r3, #10]
 8009864:	3b01      	subs	r3, #1
 8009866:	4013      	ands	r3, r2
 8009868:	2b00      	cmp	r3, #0
 800986a:	d001      	beq.n	8009870 <find_volume+0x228>
 800986c:	230d      	movs	r3, #13
 800986e:	e12c      	b.n	8009aca <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8009870:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009872:	3330      	adds	r3, #48	@ 0x30
 8009874:	3311      	adds	r3, #17
 8009876:	4618      	mov	r0, r3
 8009878:	f7fe fccc 	bl	8008214 <ld_word>
 800987c:	4603      	mov	r3, r0
 800987e:	461a      	mov	r2, r3
 8009880:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009882:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8009884:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009886:	891b      	ldrh	r3, [r3, #8]
 8009888:	f003 030f 	and.w	r3, r3, #15
 800988c:	b29b      	uxth	r3, r3
 800988e:	2b00      	cmp	r3, #0
 8009890:	d001      	beq.n	8009896 <find_volume+0x24e>
 8009892:	230d      	movs	r3, #13
 8009894:	e119      	b.n	8009aca <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8009896:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009898:	3330      	adds	r3, #48	@ 0x30
 800989a:	3313      	adds	r3, #19
 800989c:	4618      	mov	r0, r3
 800989e:	f7fe fcb9 	bl	8008214 <ld_word>
 80098a2:	4603      	mov	r3, r0
 80098a4:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80098a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d106      	bne.n	80098ba <find_volume+0x272>
 80098ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098ae:	3330      	adds	r3, #48	@ 0x30
 80098b0:	3320      	adds	r3, #32
 80098b2:	4618      	mov	r0, r3
 80098b4:	f7fe fcc6 	bl	8008244 <ld_dword>
 80098b8:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80098ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098bc:	3330      	adds	r3, #48	@ 0x30
 80098be:	330e      	adds	r3, #14
 80098c0:	4618      	mov	r0, r3
 80098c2:	f7fe fca7 	bl	8008214 <ld_word>
 80098c6:	4603      	mov	r3, r0
 80098c8:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80098ca:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d101      	bne.n	80098d4 <find_volume+0x28c>
 80098d0:	230d      	movs	r3, #13
 80098d2:	e0fa      	b.n	8009aca <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80098d4:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80098d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80098d8:	4413      	add	r3, r2
 80098da:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80098dc:	8912      	ldrh	r2, [r2, #8]
 80098de:	0912      	lsrs	r2, r2, #4
 80098e0:	b292      	uxth	r2, r2
 80098e2:	4413      	add	r3, r2
 80098e4:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80098e6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80098e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098ea:	429a      	cmp	r2, r3
 80098ec:	d204      	bcs.n	80098f8 <find_volume+0x2b0>
 80098ee:	230d      	movs	r3, #13
 80098f0:	e0eb      	b.n	8009aca <find_volume+0x482>
 80098f2:	bf00      	nop
 80098f4:	20000618 	.word	0x20000618
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80098f8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80098fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098fc:	1ad3      	subs	r3, r2, r3
 80098fe:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009900:	8952      	ldrh	r2, [r2, #10]
 8009902:	fbb3 f3f2 	udiv	r3, r3, r2
 8009906:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8009908:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800990a:	2b00      	cmp	r3, #0
 800990c:	d101      	bne.n	8009912 <find_volume+0x2ca>
 800990e:	230d      	movs	r3, #13
 8009910:	e0db      	b.n	8009aca <find_volume+0x482>
		fmt = FS_FAT32;
 8009912:	2303      	movs	r3, #3
 8009914:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8009918:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800991a:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800991e:	4293      	cmp	r3, r2
 8009920:	d802      	bhi.n	8009928 <find_volume+0x2e0>
 8009922:	2302      	movs	r3, #2
 8009924:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8009928:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800992a:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800992e:	4293      	cmp	r3, r2
 8009930:	d802      	bhi.n	8009938 <find_volume+0x2f0>
 8009932:	2301      	movs	r3, #1
 8009934:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8009938:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800993a:	1c9a      	adds	r2, r3, #2
 800993c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800993e:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8009940:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009942:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009944:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8009946:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8009948:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800994a:	441a      	add	r2, r3
 800994c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800994e:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8009950:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009952:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009954:	441a      	add	r2, r3
 8009956:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009958:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 800995a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800995e:	2b03      	cmp	r3, #3
 8009960:	d11e      	bne.n	80099a0 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8009962:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009964:	3330      	adds	r3, #48	@ 0x30
 8009966:	332a      	adds	r3, #42	@ 0x2a
 8009968:	4618      	mov	r0, r3
 800996a:	f7fe fc53 	bl	8008214 <ld_word>
 800996e:	4603      	mov	r3, r0
 8009970:	2b00      	cmp	r3, #0
 8009972:	d001      	beq.n	8009978 <find_volume+0x330>
 8009974:	230d      	movs	r3, #13
 8009976:	e0a8      	b.n	8009aca <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8009978:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800997a:	891b      	ldrh	r3, [r3, #8]
 800997c:	2b00      	cmp	r3, #0
 800997e:	d001      	beq.n	8009984 <find_volume+0x33c>
 8009980:	230d      	movs	r3, #13
 8009982:	e0a2      	b.n	8009aca <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8009984:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009986:	3330      	adds	r3, #48	@ 0x30
 8009988:	332c      	adds	r3, #44	@ 0x2c
 800998a:	4618      	mov	r0, r3
 800998c:	f7fe fc5a 	bl	8008244 <ld_dword>
 8009990:	4602      	mov	r2, r0
 8009992:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009994:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8009996:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009998:	695b      	ldr	r3, [r3, #20]
 800999a:	009b      	lsls	r3, r3, #2
 800999c:	647b      	str	r3, [r7, #68]	@ 0x44
 800999e:	e01f      	b.n	80099e0 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80099a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099a2:	891b      	ldrh	r3, [r3, #8]
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d101      	bne.n	80099ac <find_volume+0x364>
 80099a8:	230d      	movs	r3, #13
 80099aa:	e08e      	b.n	8009aca <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80099ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099ae:	6a1a      	ldr	r2, [r3, #32]
 80099b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80099b2:	441a      	add	r2, r3
 80099b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099b6:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80099b8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80099bc:	2b02      	cmp	r3, #2
 80099be:	d103      	bne.n	80099c8 <find_volume+0x380>
 80099c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099c2:	695b      	ldr	r3, [r3, #20]
 80099c4:	005b      	lsls	r3, r3, #1
 80099c6:	e00a      	b.n	80099de <find_volume+0x396>
 80099c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099ca:	695a      	ldr	r2, [r3, #20]
 80099cc:	4613      	mov	r3, r2
 80099ce:	005b      	lsls	r3, r3, #1
 80099d0:	4413      	add	r3, r2
 80099d2:	085a      	lsrs	r2, r3, #1
 80099d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099d6:	695b      	ldr	r3, [r3, #20]
 80099d8:	f003 0301 	and.w	r3, r3, #1
 80099dc:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80099de:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80099e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099e2:	699a      	ldr	r2, [r3, #24]
 80099e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80099e6:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 80099ea:	0a5b      	lsrs	r3, r3, #9
 80099ec:	429a      	cmp	r2, r3
 80099ee:	d201      	bcs.n	80099f4 <find_volume+0x3ac>
 80099f0:	230d      	movs	r3, #13
 80099f2:	e06a      	b.n	8009aca <find_volume+0x482>
>>>>>>> Stashed changes

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
<<<<<<< Updated upstream
 8009548:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800954a:	f04f 32ff 	mov.w	r2, #4294967295
 800954e:	615a      	str	r2, [r3, #20]
 8009550:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009552:	695a      	ldr	r2, [r3, #20]
 8009554:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009556:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8009558:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800955a:	2280      	movs	r2, #128	@ 0x80
 800955c:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800955e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009562:	2b03      	cmp	r3, #3
 8009564:	d149      	bne.n	80095fa <find_volume+0x46e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8009566:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009568:	3334      	adds	r3, #52	@ 0x34
 800956a:	3330      	adds	r3, #48	@ 0x30
 800956c:	4618      	mov	r0, r3
 800956e:	f7fe fbc1 	bl	8007cf4 <ld_word>
 8009572:	4603      	mov	r3, r0
 8009574:	2b01      	cmp	r3, #1
 8009576:	d140      	bne.n	80095fa <find_volume+0x46e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8009578:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800957a:	3301      	adds	r3, #1
 800957c:	4619      	mov	r1, r3
 800957e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009580:	f7fe fe9a 	bl	80082b8 <move_window>
 8009584:	4603      	mov	r3, r0
 8009586:	2b00      	cmp	r3, #0
 8009588:	d137      	bne.n	80095fa <find_volume+0x46e>
		{
			fs->fsi_flag = 0;
 800958a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800958c:	2200      	movs	r2, #0
 800958e:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8009590:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009592:	3334      	adds	r3, #52	@ 0x34
 8009594:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8009598:	4618      	mov	r0, r3
 800959a:	f7fe fbab 	bl	8007cf4 <ld_word>
 800959e:	4603      	mov	r3, r0
 80095a0:	461a      	mov	r2, r3
 80095a2:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 80095a6:	429a      	cmp	r2, r3
 80095a8:	d127      	bne.n	80095fa <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80095aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095ac:	3334      	adds	r3, #52	@ 0x34
 80095ae:	4618      	mov	r0, r3
 80095b0:	f7fe fbb9 	bl	8007d26 <ld_dword>
 80095b4:	4603      	mov	r3, r0
 80095b6:	4a1c      	ldr	r2, [pc, #112]	@ (8009628 <find_volume+0x49c>)
 80095b8:	4293      	cmp	r3, r2
 80095ba:	d11e      	bne.n	80095fa <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80095bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095be:	3334      	adds	r3, #52	@ 0x34
 80095c0:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80095c4:	4618      	mov	r0, r3
 80095c6:	f7fe fbae 	bl	8007d26 <ld_dword>
 80095ca:	4603      	mov	r3, r0
 80095cc:	4a17      	ldr	r2, [pc, #92]	@ (800962c <find_volume+0x4a0>)
 80095ce:	4293      	cmp	r3, r2
 80095d0:	d113      	bne.n	80095fa <find_volume+0x46e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80095d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095d4:	3334      	adds	r3, #52	@ 0x34
 80095d6:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 80095da:	4618      	mov	r0, r3
 80095dc:	f7fe fba3 	bl	8007d26 <ld_dword>
 80095e0:	4602      	mov	r2, r0
 80095e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095e4:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80095e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095e8:	3334      	adds	r3, #52	@ 0x34
 80095ea:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 80095ee:	4618      	mov	r0, r3
 80095f0:	f7fe fb99 	bl	8007d26 <ld_dword>
 80095f4:	4602      	mov	r2, r0
 80095f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095f8:	611a      	str	r2, [r3, #16]
=======
 80099f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099f6:	f04f 32ff 	mov.w	r2, #4294967295
 80099fa:	611a      	str	r2, [r3, #16]
 80099fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099fe:	691a      	ldr	r2, [r3, #16]
 8009a00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a02:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8009a04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a06:	2280      	movs	r2, #128	@ 0x80
 8009a08:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8009a0a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009a0e:	2b03      	cmp	r3, #3
 8009a10:	d149      	bne.n	8009aa6 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8009a12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a14:	3330      	adds	r3, #48	@ 0x30
 8009a16:	3330      	adds	r3, #48	@ 0x30
 8009a18:	4618      	mov	r0, r3
 8009a1a:	f7fe fbfb 	bl	8008214 <ld_word>
 8009a1e:	4603      	mov	r3, r0
 8009a20:	2b01      	cmp	r3, #1
 8009a22:	d140      	bne.n	8009aa6 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8009a24:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009a26:	3301      	adds	r3, #1
 8009a28:	4619      	mov	r1, r3
 8009a2a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009a2c:	f7fe fea2 	bl	8008774 <move_window>
 8009a30:	4603      	mov	r3, r0
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d137      	bne.n	8009aa6 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8009a36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a38:	2200      	movs	r2, #0
 8009a3a:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8009a3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a3e:	3330      	adds	r3, #48	@ 0x30
 8009a40:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8009a44:	4618      	mov	r0, r3
 8009a46:	f7fe fbe5 	bl	8008214 <ld_word>
 8009a4a:	4603      	mov	r3, r0
 8009a4c:	461a      	mov	r2, r3
 8009a4e:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8009a52:	429a      	cmp	r2, r3
 8009a54:	d127      	bne.n	8009aa6 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8009a56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a58:	3330      	adds	r3, #48	@ 0x30
 8009a5a:	4618      	mov	r0, r3
 8009a5c:	f7fe fbf2 	bl	8008244 <ld_dword>
 8009a60:	4603      	mov	r3, r0
 8009a62:	4a1c      	ldr	r2, [pc, #112]	@ (8009ad4 <find_volume+0x48c>)
 8009a64:	4293      	cmp	r3, r2
 8009a66:	d11e      	bne.n	8009aa6 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8009a68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a6a:	3330      	adds	r3, #48	@ 0x30
 8009a6c:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8009a70:	4618      	mov	r0, r3
 8009a72:	f7fe fbe7 	bl	8008244 <ld_dword>
 8009a76:	4603      	mov	r3, r0
 8009a78:	4a17      	ldr	r2, [pc, #92]	@ (8009ad8 <find_volume+0x490>)
 8009a7a:	4293      	cmp	r3, r2
 8009a7c:	d113      	bne.n	8009aa6 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8009a7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a80:	3330      	adds	r3, #48	@ 0x30
 8009a82:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8009a86:	4618      	mov	r0, r3
 8009a88:	f7fe fbdc 	bl	8008244 <ld_dword>
 8009a8c:	4602      	mov	r2, r0
 8009a8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a90:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8009a92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a94:	3330      	adds	r3, #48	@ 0x30
 8009a96:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8009a9a:	4618      	mov	r0, r3
 8009a9c:	f7fe fbd2 	bl	8008244 <ld_dword>
 8009aa0:	4602      	mov	r2, r0
 8009aa2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009aa4:	60da      	str	r2, [r3, #12]
>>>>>>> Stashed changes
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
<<<<<<< Updated upstream
 80095fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095fc:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8009600:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8009602:	4b0b      	ldr	r3, [pc, #44]	@ (8009630 <find_volume+0x4a4>)
 8009604:	881b      	ldrh	r3, [r3, #0]
 8009606:	3301      	adds	r3, #1
 8009608:	b29a      	uxth	r2, r3
 800960a:	4b09      	ldr	r3, [pc, #36]	@ (8009630 <find_volume+0x4a4>)
 800960c:	801a      	strh	r2, [r3, #0]
 800960e:	4b08      	ldr	r3, [pc, #32]	@ (8009630 <find_volume+0x4a4>)
 8009610:	881a      	ldrh	r2, [r3, #0]
 8009612:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009614:	80da      	strh	r2, [r3, #6]
=======
 8009aa6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009aa8:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8009aac:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8009aae:	4b0b      	ldr	r3, [pc, #44]	@ (8009adc <find_volume+0x494>)
 8009ab0:	881b      	ldrh	r3, [r3, #0]
 8009ab2:	3301      	adds	r3, #1
 8009ab4:	b29a      	uxth	r2, r3
 8009ab6:	4b09      	ldr	r3, [pc, #36]	@ (8009adc <find_volume+0x494>)
 8009ab8:	801a      	strh	r2, [r3, #0]
 8009aba:	4b08      	ldr	r3, [pc, #32]	@ (8009adc <find_volume+0x494>)
 8009abc:	881a      	ldrh	r2, [r3, #0]
 8009abe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ac0:	80da      	strh	r2, [r3, #6]
>>>>>>> Stashed changes
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
<<<<<<< Updated upstream
 8009616:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009618:	f7fe fde6 	bl	80081e8 <clear_lock>
#endif
	return FR_OK;
 800961c:	2300      	movs	r3, #0
}
 800961e:	4618      	mov	r0, r3
 8009620:	3758      	adds	r7, #88	@ 0x58
 8009622:	46bd      	mov	sp, r7
 8009624:	bd80      	pop	{r7, pc}
 8009626:	bf00      	nop
 8009628:	41615252 	.word	0x41615252
 800962c:	61417272 	.word	0x61417272
 8009630:	20000a38 	.word	0x20000a38

08009634 <validate>:
=======
 8009ac2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009ac4:	f7fe fdee 	bl	80086a4 <clear_lock>
#endif
	return FR_OK;
 8009ac8:	2300      	movs	r3, #0
}
 8009aca:	4618      	mov	r0, r3
 8009acc:	3758      	adds	r7, #88	@ 0x58
 8009ace:	46bd      	mov	sp, r7
 8009ad0:	bd80      	pop	{r7, pc}
 8009ad2:	bf00      	nop
 8009ad4:	41615252 	.word	0x41615252
 8009ad8:	61417272 	.word	0x61417272
 8009adc:	2000061c 	.word	0x2000061c

08009ae0 <validate>:
>>>>>>> Stashed changes
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
<<<<<<< Updated upstream
 8009634:	b580      	push	{r7, lr}
 8009636:	b084      	sub	sp, #16
 8009638:	af00      	add	r7, sp, #0
 800963a:	6078      	str	r0, [r7, #4]
 800963c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800963e:	2309      	movs	r3, #9
 8009640:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	2b00      	cmp	r3, #0
 8009646:	d02e      	beq.n	80096a6 <validate+0x72>
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	2b00      	cmp	r3, #0
 800964e:	d02a      	beq.n	80096a6 <validate+0x72>
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	781b      	ldrb	r3, [r3, #0]
 8009656:	2b00      	cmp	r3, #0
 8009658:	d025      	beq.n	80096a6 <validate+0x72>
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	889a      	ldrh	r2, [r3, #4]
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	88db      	ldrh	r3, [r3, #6]
 8009664:	429a      	cmp	r2, r3
 8009666:	d11e      	bne.n	80096a6 <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	4618      	mov	r0, r3
 800966e:	f7fe fc42 	bl	8007ef6 <lock_fs>
 8009672:	4603      	mov	r3, r0
 8009674:	2b00      	cmp	r3, #0
 8009676:	d014      	beq.n	80096a2 <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	785b      	ldrb	r3, [r3, #1]
 800967e:	4618      	mov	r0, r3
 8009680:	f7fe fa9a 	bl	8007bb8 <disk_status>
 8009684:	4603      	mov	r3, r0
 8009686:	f003 0301 	and.w	r3, r3, #1
 800968a:	2b00      	cmp	r3, #0
 800968c:	d102      	bne.n	8009694 <validate+0x60>
				res = FR_OK;
 800968e:	2300      	movs	r3, #0
 8009690:	73fb      	strb	r3, [r7, #15]
 8009692:	e008      	b.n	80096a6 <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	2100      	movs	r1, #0
 800969a:	4618      	mov	r0, r3
 800969c:	f7fe fc41 	bl	8007f22 <unlock_fs>
 80096a0:	e001      	b.n	80096a6 <validate+0x72>
=======
 8009ae0:	b580      	push	{r7, lr}
 8009ae2:	b084      	sub	sp, #16
 8009ae4:	af00      	add	r7, sp, #0
 8009ae6:	6078      	str	r0, [r7, #4]
 8009ae8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8009aea:	2309      	movs	r3, #9
 8009aec:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d01c      	beq.n	8009b2e <validate+0x4e>
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d018      	beq.n	8009b2e <validate+0x4e>
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	781b      	ldrb	r3, [r3, #0]
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d013      	beq.n	8009b2e <validate+0x4e>
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	889a      	ldrh	r2, [r3, #4]
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	88db      	ldrh	r3, [r3, #6]
 8009b10:	429a      	cmp	r2, r3
 8009b12:	d10c      	bne.n	8009b2e <validate+0x4e>
>>>>>>> Stashed changes
			}
		} else {
			res = FR_TIMEOUT;
 80096a2:	230f      	movs	r3, #15
 80096a4:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
<<<<<<< Updated upstream
			res = FR_OK;
=======
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	785b      	ldrb	r3, [r3, #1]
 8009b1a:	4618      	mov	r0, r3
 8009b1c:	f7fe fadc 	bl	80080d8 <disk_status>
 8009b20:	4603      	mov	r3, r0
 8009b22:	f003 0301 	and.w	r3, r3, #1
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d101      	bne.n	8009b2e <validate+0x4e>
			res = FR_OK;
 8009b2a:	2300      	movs	r3, #0
 8009b2c:	73fb      	strb	r3, [r7, #15]
>>>>>>> Stashed changes
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
<<<<<<< Updated upstream
 80096a6:	7bfb      	ldrb	r3, [r7, #15]
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d102      	bne.n	80096b2 <validate+0x7e>
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	e000      	b.n	80096b4 <validate+0x80>
 80096b2:	2300      	movs	r3, #0
 80096b4:	683a      	ldr	r2, [r7, #0]
 80096b6:	6013      	str	r3, [r2, #0]
	return res;
 80096b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80096ba:	4618      	mov	r0, r3
 80096bc:	3710      	adds	r7, #16
 80096be:	46bd      	mov	sp, r7
 80096c0:	bd80      	pop	{r7, pc}
	...

080096c4 <f_mount>:
=======
 8009b2e:	7bfb      	ldrb	r3, [r7, #15]
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d102      	bne.n	8009b3a <validate+0x5a>
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	e000      	b.n	8009b3c <validate+0x5c>
 8009b3a:	2300      	movs	r3, #0
 8009b3c:	683a      	ldr	r2, [r7, #0]
 8009b3e:	6013      	str	r3, [r2, #0]
	return res;
 8009b40:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b42:	4618      	mov	r0, r3
 8009b44:	3710      	adds	r7, #16
 8009b46:	46bd      	mov	sp, r7
 8009b48:	bd80      	pop	{r7, pc}
	...

08009b4c <f_mount>:
>>>>>>> Stashed changes
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
<<<<<<< Updated upstream
 80096c4:	b580      	push	{r7, lr}
 80096c6:	b088      	sub	sp, #32
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	60f8      	str	r0, [r7, #12]
 80096cc:	60b9      	str	r1, [r7, #8]
 80096ce:	4613      	mov	r3, r2
 80096d0:	71fb      	strb	r3, [r7, #7]
=======
 8009b4c:	b580      	push	{r7, lr}
 8009b4e:	b088      	sub	sp, #32
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	60f8      	str	r0, [r7, #12]
 8009b54:	60b9      	str	r1, [r7, #8]
 8009b56:	4613      	mov	r3, r2
 8009b58:	71fb      	strb	r3, [r7, #7]
>>>>>>> Stashed changes
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
<<<<<<< Updated upstream
 80096d2:	68bb      	ldr	r3, [r7, #8]
 80096d4:	613b      	str	r3, [r7, #16]
=======
 8009b5a:	68bb      	ldr	r3, [r7, #8]
 8009b5c:	613b      	str	r3, [r7, #16]
>>>>>>> Stashed changes


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
<<<<<<< Updated upstream
 80096d6:	f107 0310 	add.w	r3, r7, #16
 80096da:	4618      	mov	r0, r3
 80096dc:	f7ff fcbb 	bl	8009056 <get_ldnumber>
 80096e0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80096e2:	69fb      	ldr	r3, [r7, #28]
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	da01      	bge.n	80096ec <f_mount+0x28>
 80096e8:	230b      	movs	r3, #11
 80096ea:	e048      	b.n	800977e <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80096ec:	4a26      	ldr	r2, [pc, #152]	@ (8009788 <f_mount+0xc4>)
 80096ee:	69fb      	ldr	r3, [r7, #28]
 80096f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80096f4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80096f6:	69bb      	ldr	r3, [r7, #24]
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d00f      	beq.n	800971c <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80096fc:	69b8      	ldr	r0, [r7, #24]
 80096fe:	f7fe fd73 	bl	80081e8 <clear_lock>
=======
 8009b5e:	f107 0310 	add.w	r3, r7, #16
 8009b62:	4618      	mov	r0, r3
 8009b64:	f7ff fcd5 	bl	8009512 <get_ldnumber>
 8009b68:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8009b6a:	69fb      	ldr	r3, [r7, #28]
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	da01      	bge.n	8009b74 <f_mount+0x28>
 8009b70:	230b      	movs	r3, #11
 8009b72:	e02b      	b.n	8009bcc <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8009b74:	4a17      	ldr	r2, [pc, #92]	@ (8009bd4 <f_mount+0x88>)
 8009b76:	69fb      	ldr	r3, [r7, #28]
 8009b78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009b7c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8009b7e:	69bb      	ldr	r3, [r7, #24]
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d005      	beq.n	8009b90 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8009b84:	69b8      	ldr	r0, [r7, #24]
 8009b86:	f7fe fd8d 	bl	80086a4 <clear_lock>
>>>>>>> Stashed changes
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 8009702:	69bb      	ldr	r3, [r7, #24]
 8009704:	68db      	ldr	r3, [r3, #12]
 8009706:	4618      	mov	r0, r3
 8009708:	f000 fcdc 	bl	800a0c4 <ff_del_syncobj>
 800970c:	4603      	mov	r3, r0
 800970e:	2b00      	cmp	r3, #0
 8009710:	d101      	bne.n	8009716 <f_mount+0x52>
 8009712:	2302      	movs	r3, #2
 8009714:	e033      	b.n	800977e <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
<<<<<<< Updated upstream
 8009716:	69bb      	ldr	r3, [r7, #24]
 8009718:	2200      	movs	r2, #0
 800971a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	2b00      	cmp	r3, #0
 8009720:	d00f      	beq.n	8009742 <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	2200      	movs	r2, #0
 8009726:	701a      	strb	r2, [r3, #0]
=======
 8009b8a:	69bb      	ldr	r3, [r7, #24]
 8009b8c:	2200      	movs	r2, #0
 8009b8e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d002      	beq.n	8009b9c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	2200      	movs	r2, #0
 8009b9a:	701a      	strb	r2, [r3, #0]
>>>>>>> Stashed changes
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 8009728:	69fb      	ldr	r3, [r7, #28]
 800972a:	b2da      	uxtb	r2, r3
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	330c      	adds	r3, #12
 8009730:	4619      	mov	r1, r3
 8009732:	4610      	mov	r0, r2
 8009734:	f000 fcab 	bl	800a08e <ff_cre_syncobj>
 8009738:	4603      	mov	r3, r0
 800973a:	2b00      	cmp	r3, #0
 800973c:	d101      	bne.n	8009742 <f_mount+0x7e>
 800973e:	2302      	movs	r3, #2
 8009740:	e01d      	b.n	800977e <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
<<<<<<< Updated upstream
 8009742:	68fa      	ldr	r2, [r7, #12]
 8009744:	4910      	ldr	r1, [pc, #64]	@ (8009788 <f_mount+0xc4>)
 8009746:	69fb      	ldr	r3, [r7, #28]
 8009748:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	2b00      	cmp	r3, #0
 8009750:	d002      	beq.n	8009758 <f_mount+0x94>
 8009752:	79fb      	ldrb	r3, [r7, #7]
 8009754:	2b01      	cmp	r3, #1
 8009756:	d001      	beq.n	800975c <f_mount+0x98>
 8009758:	2300      	movs	r3, #0
 800975a:	e010      	b.n	800977e <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800975c:	f107 010c 	add.w	r1, r7, #12
 8009760:	f107 0308 	add.w	r3, r7, #8
 8009764:	2200      	movs	r2, #0
 8009766:	4618      	mov	r0, r3
 8009768:	f7ff fd10 	bl	800918c <find_volume>
 800976c:	4603      	mov	r3, r0
 800976e:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	7dfa      	ldrb	r2, [r7, #23]
 8009774:	4611      	mov	r1, r2
 8009776:	4618      	mov	r0, r3
 8009778:	f7fe fbd3 	bl	8007f22 <unlock_fs>
 800977c:	7dfb      	ldrb	r3, [r7, #23]
}
 800977e:	4618      	mov	r0, r3
 8009780:	3720      	adds	r7, #32
 8009782:	46bd      	mov	sp, r7
 8009784:	bd80      	pop	{r7, pc}
 8009786:	bf00      	nop
 8009788:	20000a34 	.word	0x20000a34

0800978c <f_open>:
=======
 8009b9c:	68fa      	ldr	r2, [r7, #12]
 8009b9e:	490d      	ldr	r1, [pc, #52]	@ (8009bd4 <f_mount+0x88>)
 8009ba0:	69fb      	ldr	r3, [r7, #28]
 8009ba2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d002      	beq.n	8009bb2 <f_mount+0x66>
 8009bac:	79fb      	ldrb	r3, [r7, #7]
 8009bae:	2b01      	cmp	r3, #1
 8009bb0:	d001      	beq.n	8009bb6 <f_mount+0x6a>
 8009bb2:	2300      	movs	r3, #0
 8009bb4:	e00a      	b.n	8009bcc <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8009bb6:	f107 010c 	add.w	r1, r7, #12
 8009bba:	f107 0308 	add.w	r3, r7, #8
 8009bbe:	2200      	movs	r2, #0
 8009bc0:	4618      	mov	r0, r3
 8009bc2:	f7ff fd41 	bl	8009648 <find_volume>
 8009bc6:	4603      	mov	r3, r0
 8009bc8:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8009bca:	7dfb      	ldrb	r3, [r7, #23]
}
 8009bcc:	4618      	mov	r0, r3
 8009bce:	3720      	adds	r7, #32
 8009bd0:	46bd      	mov	sp, r7
 8009bd2:	bd80      	pop	{r7, pc}
 8009bd4:	20000618 	.word	0x20000618

08009bd8 <f_open>:
>>>>>>> Stashed changes
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
<<<<<<< Updated upstream
 800978c:	b580      	push	{r7, lr}
 800978e:	b098      	sub	sp, #96	@ 0x60
 8009790:	af00      	add	r7, sp, #0
 8009792:	60f8      	str	r0, [r7, #12]
 8009794:	60b9      	str	r1, [r7, #8]
 8009796:	4613      	mov	r3, r2
 8009798:	71fb      	strb	r3, [r7, #7]
=======
 8009bd8:	b580      	push	{r7, lr}
 8009bda:	b098      	sub	sp, #96	@ 0x60
 8009bdc:	af00      	add	r7, sp, #0
 8009bde:	60f8      	str	r0, [r7, #12]
 8009be0:	60b9      	str	r1, [r7, #8]
 8009be2:	4613      	mov	r3, r2
 8009be4:	71fb      	strb	r3, [r7, #7]
>>>>>>> Stashed changes
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
<<<<<<< Updated upstream
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	2b00      	cmp	r3, #0
 800979e:	d101      	bne.n	80097a4 <f_open+0x18>
 80097a0:	2309      	movs	r3, #9
 80097a2:	e1b0      	b.n	8009b06 <f_open+0x37a>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80097a4:	79fb      	ldrb	r3, [r7, #7]
 80097a6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80097aa:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80097ac:	79fa      	ldrb	r2, [r7, #7]
 80097ae:	f107 0110 	add.w	r1, r7, #16
 80097b2:	f107 0308 	add.w	r3, r7, #8
 80097b6:	4618      	mov	r0, r3
 80097b8:	f7ff fce8 	bl	800918c <find_volume>
 80097bc:	4603      	mov	r3, r0
 80097be:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 80097c2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	f040 818d 	bne.w	8009ae6 <f_open+0x35a>
		dj.obj.fs = fs;
 80097cc:	693b      	ldr	r3, [r7, #16]
 80097ce:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80097d0:	68ba      	ldr	r2, [r7, #8]
 80097d2:	f107 0314 	add.w	r3, r7, #20
 80097d6:	4611      	mov	r1, r2
 80097d8:	4618      	mov	r0, r3
 80097da:	f7ff fbcb 	bl	8008f74 <follow_path>
 80097de:	4603      	mov	r3, r0
 80097e0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80097e4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d118      	bne.n	800981e <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80097ec:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80097f0:	b25b      	sxtb	r3, r3
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	da03      	bge.n	80097fe <f_open+0x72>
				res = FR_INVALID_NAME;
 80097f6:	2306      	movs	r3, #6
 80097f8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80097fc:	e00f      	b.n	800981e <f_open+0x92>
=======
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d101      	bne.n	8009bf0 <f_open+0x18>
 8009bec:	2309      	movs	r3, #9
 8009bee:	e1a9      	b.n	8009f44 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8009bf0:	79fb      	ldrb	r3, [r7, #7]
 8009bf2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009bf6:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8009bf8:	79fa      	ldrb	r2, [r7, #7]
 8009bfa:	f107 0110 	add.w	r1, r7, #16
 8009bfe:	f107 0308 	add.w	r3, r7, #8
 8009c02:	4618      	mov	r0, r3
 8009c04:	f7ff fd20 	bl	8009648 <find_volume>
 8009c08:	4603      	mov	r3, r0
 8009c0a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 8009c0e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	f040 818d 	bne.w	8009f32 <f_open+0x35a>
		dj.obj.fs = fs;
 8009c18:	693b      	ldr	r3, [r7, #16]
 8009c1a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8009c1c:	68ba      	ldr	r2, [r7, #8]
 8009c1e:	f107 0314 	add.w	r3, r7, #20
 8009c22:	4611      	mov	r1, r2
 8009c24:	4618      	mov	r0, r3
 8009c26:	f7ff fc03 	bl	8009430 <follow_path>
 8009c2a:	4603      	mov	r3, r0
 8009c2c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8009c30:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d118      	bne.n	8009c6a <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8009c38:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009c3c:	b25b      	sxtb	r3, r3
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	da03      	bge.n	8009c4a <f_open+0x72>
				res = FR_INVALID_NAME;
 8009c42:	2306      	movs	r3, #6
 8009c44:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8009c48:	e00f      	b.n	8009c6a <f_open+0x92>
>>>>>>> Stashed changes
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
<<<<<<< Updated upstream
 80097fe:	79fb      	ldrb	r3, [r7, #7]
 8009800:	2b01      	cmp	r3, #1
 8009802:	bf8c      	ite	hi
 8009804:	2301      	movhi	r3, #1
 8009806:	2300      	movls	r3, #0
 8009808:	b2db      	uxtb	r3, r3
 800980a:	461a      	mov	r2, r3
 800980c:	f107 0314 	add.w	r3, r7, #20
 8009810:	4611      	mov	r1, r2
 8009812:	4618      	mov	r0, r3
 8009814:	f7fe fba0 	bl	8007f58 <chk_lock>
 8009818:	4603      	mov	r3, r0
 800981a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
=======
 8009c4a:	79fb      	ldrb	r3, [r7, #7]
 8009c4c:	2b01      	cmp	r3, #1
 8009c4e:	bf8c      	ite	hi
 8009c50:	2301      	movhi	r3, #1
 8009c52:	2300      	movls	r3, #0
 8009c54:	b2db      	uxtb	r3, r3
 8009c56:	461a      	mov	r2, r3
 8009c58:	f107 0314 	add.w	r3, r7, #20
 8009c5c:	4611      	mov	r1, r2
 8009c5e:	4618      	mov	r0, r3
 8009c60:	f7fe fbd8 	bl	8008414 <chk_lock>
 8009c64:	4603      	mov	r3, r0
 8009c66:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
>>>>>>> Stashed changes
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
<<<<<<< Updated upstream
 800981e:	79fb      	ldrb	r3, [r7, #7]
 8009820:	f003 031c 	and.w	r3, r3, #28
 8009824:	2b00      	cmp	r3, #0
 8009826:	d07f      	beq.n	8009928 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 8009828:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800982c:	2b00      	cmp	r3, #0
 800982e:	d017      	beq.n	8009860 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8009830:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009834:	2b04      	cmp	r3, #4
 8009836:	d10e      	bne.n	8009856 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8009838:	f7fe fbea 	bl	8008010 <enq_lock>
 800983c:	4603      	mov	r3, r0
 800983e:	2b00      	cmp	r3, #0
 8009840:	d006      	beq.n	8009850 <f_open+0xc4>
 8009842:	f107 0314 	add.w	r3, r7, #20
 8009846:	4618      	mov	r0, r3
 8009848:	f7ff face 	bl	8008de8 <dir_register>
 800984c:	4603      	mov	r3, r0
 800984e:	e000      	b.n	8009852 <f_open+0xc6>
 8009850:	2312      	movs	r3, #18
 8009852:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
=======
 8009c6a:	79fb      	ldrb	r3, [r7, #7]
 8009c6c:	f003 031c 	and.w	r3, r3, #28
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d07f      	beq.n	8009d74 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 8009c74:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d017      	beq.n	8009cac <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8009c7c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009c80:	2b04      	cmp	r3, #4
 8009c82:	d10e      	bne.n	8009ca2 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8009c84:	f7fe fc22 	bl	80084cc <enq_lock>
 8009c88:	4603      	mov	r3, r0
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d006      	beq.n	8009c9c <f_open+0xc4>
 8009c8e:	f107 0314 	add.w	r3, r7, #20
 8009c92:	4618      	mov	r0, r3
 8009c94:	f7ff fb06 	bl	80092a4 <dir_register>
 8009c98:	4603      	mov	r3, r0
 8009c9a:	e000      	b.n	8009c9e <f_open+0xc6>
 8009c9c:	2312      	movs	r3, #18
 8009c9e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
>>>>>>> Stashed changes
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
<<<<<<< Updated upstream
 8009856:	79fb      	ldrb	r3, [r7, #7]
 8009858:	f043 0308 	orr.w	r3, r3, #8
 800985c:	71fb      	strb	r3, [r7, #7]
 800985e:	e010      	b.n	8009882 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8009860:	7ebb      	ldrb	r3, [r7, #26]
 8009862:	f003 0311 	and.w	r3, r3, #17
 8009866:	2b00      	cmp	r3, #0
 8009868:	d003      	beq.n	8009872 <f_open+0xe6>
					res = FR_DENIED;
 800986a:	2307      	movs	r3, #7
 800986c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8009870:	e007      	b.n	8009882 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8009872:	79fb      	ldrb	r3, [r7, #7]
 8009874:	f003 0304 	and.w	r3, r3, #4
 8009878:	2b00      	cmp	r3, #0
 800987a:	d002      	beq.n	8009882 <f_open+0xf6>
 800987c:	2308      	movs	r3, #8
 800987e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8009882:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009886:	2b00      	cmp	r3, #0
 8009888:	d168      	bne.n	800995c <f_open+0x1d0>
 800988a:	79fb      	ldrb	r3, [r7, #7]
 800988c:	f003 0308 	and.w	r3, r3, #8
 8009890:	2b00      	cmp	r3, #0
 8009892:	d063      	beq.n	800995c <f_open+0x1d0>
				dw = GET_FATTIME();
 8009894:	f7fd fc58 	bl	8007148 <get_fattime>
 8009898:	6538      	str	r0, [r7, #80]	@ 0x50
=======
 8009ca2:	79fb      	ldrb	r3, [r7, #7]
 8009ca4:	f043 0308 	orr.w	r3, r3, #8
 8009ca8:	71fb      	strb	r3, [r7, #7]
 8009caa:	e010      	b.n	8009cce <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8009cac:	7ebb      	ldrb	r3, [r7, #26]
 8009cae:	f003 0311 	and.w	r3, r3, #17
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d003      	beq.n	8009cbe <f_open+0xe6>
					res = FR_DENIED;
 8009cb6:	2307      	movs	r3, #7
 8009cb8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8009cbc:	e007      	b.n	8009cce <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8009cbe:	79fb      	ldrb	r3, [r7, #7]
 8009cc0:	f003 0304 	and.w	r3, r3, #4
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d002      	beq.n	8009cce <f_open+0xf6>
 8009cc8:	2308      	movs	r3, #8
 8009cca:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8009cce:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d168      	bne.n	8009da8 <f_open+0x1d0>
 8009cd6:	79fb      	ldrb	r3, [r7, #7]
 8009cd8:	f003 0308 	and.w	r3, r3, #8
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d063      	beq.n	8009da8 <f_open+0x1d0>
				dw = GET_FATTIME();
 8009ce0:	f7fd fcc2 	bl	8007668 <get_fattime>
 8009ce4:	6538      	str	r0, [r7, #80]	@ 0x50
>>>>>>> Stashed changes
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
<<<<<<< Updated upstream
 800989a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800989c:	330e      	adds	r3, #14
 800989e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80098a0:	4618      	mov	r0, r3
 80098a2:	f7fe fa7e 	bl	8007da2 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80098a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80098a8:	3316      	adds	r3, #22
 80098aa:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80098ac:	4618      	mov	r0, r3
 80098ae:	f7fe fa78 	bl	8007da2 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80098b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80098b4:	330b      	adds	r3, #11
 80098b6:	2220      	movs	r2, #32
 80098b8:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80098ba:	693b      	ldr	r3, [r7, #16]
 80098bc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80098be:	4611      	mov	r1, r2
 80098c0:	4618      	mov	r0, r3
 80098c2:	f7ff f9fd 	bl	8008cc0 <ld_clust>
 80098c6:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80098c8:	693b      	ldr	r3, [r7, #16]
 80098ca:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80098cc:	2200      	movs	r2, #0
 80098ce:	4618      	mov	r0, r3
 80098d0:	f7ff fa15 	bl	8008cfe <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80098d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80098d6:	331c      	adds	r3, #28
 80098d8:	2100      	movs	r1, #0
 80098da:	4618      	mov	r0, r3
 80098dc:	f7fe fa61 	bl	8007da2 <st_dword>
					fs->wflag = 1;
 80098e0:	693b      	ldr	r3, [r7, #16]
 80098e2:	2201      	movs	r2, #1
 80098e4:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80098e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d037      	beq.n	800995c <f_open+0x1d0>
						dw = fs->winsect;
 80098ec:	693b      	ldr	r3, [r7, #16]
 80098ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80098f0:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 80098f2:	f107 0314 	add.w	r3, r7, #20
 80098f6:	2200      	movs	r2, #0
 80098f8:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80098fa:	4618      	mov	r0, r3
 80098fc:	f7fe ff28 	bl	8008750 <remove_chain>
 8009900:	4603      	mov	r3, r0
 8009902:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 8009906:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800990a:	2b00      	cmp	r3, #0
 800990c:	d126      	bne.n	800995c <f_open+0x1d0>
							res = move_window(fs, dw);
 800990e:	693b      	ldr	r3, [r7, #16]
 8009910:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009912:	4618      	mov	r0, r3
 8009914:	f7fe fcd0 	bl	80082b8 <move_window>
 8009918:	4603      	mov	r3, r0
 800991a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800991e:	693b      	ldr	r3, [r7, #16]
 8009920:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009922:	3a01      	subs	r2, #1
 8009924:	611a      	str	r2, [r3, #16]
 8009926:	e019      	b.n	800995c <f_open+0x1d0>
=======
 8009ce6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ce8:	330e      	adds	r3, #14
 8009cea:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009cec:	4618      	mov	r0, r3
 8009cee:	f7fe fae7 	bl	80082c0 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8009cf2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009cf4:	3316      	adds	r3, #22
 8009cf6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009cf8:	4618      	mov	r0, r3
 8009cfa:	f7fe fae1 	bl	80082c0 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8009cfe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d00:	330b      	adds	r3, #11
 8009d02:	2220      	movs	r2, #32
 8009d04:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8009d06:	693b      	ldr	r3, [r7, #16]
 8009d08:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009d0a:	4611      	mov	r1, r2
 8009d0c:	4618      	mov	r0, r3
 8009d0e:	f7ff fa35 	bl	800917c <ld_clust>
 8009d12:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8009d14:	693b      	ldr	r3, [r7, #16]
 8009d16:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8009d18:	2200      	movs	r2, #0
 8009d1a:	4618      	mov	r0, r3
 8009d1c:	f7ff fa4d 	bl	80091ba <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8009d20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d22:	331c      	adds	r3, #28
 8009d24:	2100      	movs	r1, #0
 8009d26:	4618      	mov	r0, r3
 8009d28:	f7fe faca 	bl	80082c0 <st_dword>
					fs->wflag = 1;
 8009d2c:	693b      	ldr	r3, [r7, #16]
 8009d2e:	2201      	movs	r2, #1
 8009d30:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8009d32:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d037      	beq.n	8009da8 <f_open+0x1d0>
						dw = fs->winsect;
 8009d38:	693b      	ldr	r3, [r7, #16]
 8009d3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d3c:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8009d3e:	f107 0314 	add.w	r3, r7, #20
 8009d42:	2200      	movs	r2, #0
 8009d44:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8009d46:	4618      	mov	r0, r3
 8009d48:	f7fe ff60 	bl	8008c0c <remove_chain>
 8009d4c:	4603      	mov	r3, r0
 8009d4e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 8009d52:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d126      	bne.n	8009da8 <f_open+0x1d0>
							res = move_window(fs, dw);
 8009d5a:	693b      	ldr	r3, [r7, #16]
 8009d5c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009d5e:	4618      	mov	r0, r3
 8009d60:	f7fe fd08 	bl	8008774 <move_window>
 8009d64:	4603      	mov	r3, r0
 8009d66:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8009d6a:	693b      	ldr	r3, [r7, #16]
 8009d6c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009d6e:	3a01      	subs	r2, #1
 8009d70:	60da      	str	r2, [r3, #12]
 8009d72:	e019      	b.n	8009da8 <f_open+0x1d0>
>>>>>>> Stashed changes
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
<<<<<<< Updated upstream
 8009928:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800992c:	2b00      	cmp	r3, #0
 800992e:	d115      	bne.n	800995c <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8009930:	7ebb      	ldrb	r3, [r7, #26]
 8009932:	f003 0310 	and.w	r3, r3, #16
 8009936:	2b00      	cmp	r3, #0
 8009938:	d003      	beq.n	8009942 <f_open+0x1b6>
					res = FR_NO_FILE;
 800993a:	2304      	movs	r3, #4
 800993c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8009940:	e00c      	b.n	800995c <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8009942:	79fb      	ldrb	r3, [r7, #7]
 8009944:	f003 0302 	and.w	r3, r3, #2
 8009948:	2b00      	cmp	r3, #0
 800994a:	d007      	beq.n	800995c <f_open+0x1d0>
 800994c:	7ebb      	ldrb	r3, [r7, #26]
 800994e:	f003 0301 	and.w	r3, r3, #1
 8009952:	2b00      	cmp	r3, #0
 8009954:	d002      	beq.n	800995c <f_open+0x1d0>
						res = FR_DENIED;
 8009956:	2307      	movs	r3, #7
 8009958:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
=======
 8009d74:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d115      	bne.n	8009da8 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8009d7c:	7ebb      	ldrb	r3, [r7, #26]
 8009d7e:	f003 0310 	and.w	r3, r3, #16
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d003      	beq.n	8009d8e <f_open+0x1b6>
					res = FR_NO_FILE;
 8009d86:	2304      	movs	r3, #4
 8009d88:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8009d8c:	e00c      	b.n	8009da8 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8009d8e:	79fb      	ldrb	r3, [r7, #7]
 8009d90:	f003 0302 	and.w	r3, r3, #2
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d007      	beq.n	8009da8 <f_open+0x1d0>
 8009d98:	7ebb      	ldrb	r3, [r7, #26]
 8009d9a:	f003 0301 	and.w	r3, r3, #1
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d002      	beq.n	8009da8 <f_open+0x1d0>
						res = FR_DENIED;
 8009da2:	2307      	movs	r3, #7
 8009da4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
>>>>>>> Stashed changes
					}
				}
			}
		}
		if (res == FR_OK) {
<<<<<<< Updated upstream
 800995c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009960:	2b00      	cmp	r3, #0
 8009962:	d126      	bne.n	80099b2 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8009964:	79fb      	ldrb	r3, [r7, #7]
 8009966:	f003 0308 	and.w	r3, r3, #8
 800996a:	2b00      	cmp	r3, #0
 800996c:	d003      	beq.n	8009976 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800996e:	79fb      	ldrb	r3, [r7, #7]
 8009970:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009974:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8009976:	693b      	ldr	r3, [r7, #16]
 8009978:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800997e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009984:	79fb      	ldrb	r3, [r7, #7]
 8009986:	2b01      	cmp	r3, #1
 8009988:	bf8c      	ite	hi
 800998a:	2301      	movhi	r3, #1
 800998c:	2300      	movls	r3, #0
 800998e:	b2db      	uxtb	r3, r3
 8009990:	461a      	mov	r2, r3
 8009992:	f107 0314 	add.w	r3, r7, #20
 8009996:	4611      	mov	r1, r2
 8009998:	4618      	mov	r0, r3
 800999a:	f7fe fb5b 	bl	8008054 <inc_lock>
 800999e:	4602      	mov	r2, r0
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	691b      	ldr	r3, [r3, #16]
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d102      	bne.n	80099b2 <f_open+0x226>
 80099ac:	2302      	movs	r3, #2
 80099ae:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
=======
 8009da8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d126      	bne.n	8009dfe <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8009db0:	79fb      	ldrb	r3, [r7, #7]
 8009db2:	f003 0308 	and.w	r3, r3, #8
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d003      	beq.n	8009dc2 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 8009dba:	79fb      	ldrb	r3, [r7, #7]
 8009dbc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009dc0:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8009dc2:	693b      	ldr	r3, [r7, #16]
 8009dc4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8009dca:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009dd0:	79fb      	ldrb	r3, [r7, #7]
 8009dd2:	2b01      	cmp	r3, #1
 8009dd4:	bf8c      	ite	hi
 8009dd6:	2301      	movhi	r3, #1
 8009dd8:	2300      	movls	r3, #0
 8009dda:	b2db      	uxtb	r3, r3
 8009ddc:	461a      	mov	r2, r3
 8009dde:	f107 0314 	add.w	r3, r7, #20
 8009de2:	4611      	mov	r1, r2
 8009de4:	4618      	mov	r0, r3
 8009de6:	f7fe fb93 	bl	8008510 <inc_lock>
 8009dea:	4602      	mov	r2, r0
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	691b      	ldr	r3, [r3, #16]
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d102      	bne.n	8009dfe <f_open+0x226>
 8009df8:	2302      	movs	r3, #2
 8009dfa:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
>>>>>>> Stashed changes
				}
			}
		}
#endif

		if (res == FR_OK) {
<<<<<<< Updated upstream
 80099b2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	f040 8095 	bne.w	8009ae6 <f_open+0x35a>
=======
 8009dfe:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	f040 8095 	bne.w	8009f32 <f_open+0x35a>
>>>>>>> Stashed changes
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
<<<<<<< Updated upstream
 80099bc:	693b      	ldr	r3, [r7, #16]
 80099be:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80099c0:	4611      	mov	r1, r2
 80099c2:	4618      	mov	r0, r3
 80099c4:	f7ff f97c 	bl	8008cc0 <ld_clust>
 80099c8:	4602      	mov	r2, r0
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80099ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80099d0:	331c      	adds	r3, #28
 80099d2:	4618      	mov	r0, r3
 80099d4:	f7fe f9a7 	bl	8007d26 <ld_dword>
 80099d8:	4602      	mov	r2, r0
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	2200      	movs	r2, #0
 80099e2:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80099e4:	693a      	ldr	r2, [r7, #16]
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80099ea:	693b      	ldr	r3, [r7, #16]
 80099ec:	88da      	ldrh	r2, [r3, #6]
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	79fa      	ldrb	r2, [r7, #7]
 80099f6:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	2200      	movs	r2, #0
 80099fc:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	2200      	movs	r2, #0
 8009a02:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	2200      	movs	r2, #0
 8009a08:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	3330      	adds	r3, #48	@ 0x30
 8009a0e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009a12:	2100      	movs	r1, #0
 8009a14:	4618      	mov	r0, r3
 8009a16:	f7fe fa11 	bl	8007e3c <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8009a1a:	79fb      	ldrb	r3, [r7, #7]
 8009a1c:	f003 0320 	and.w	r3, r3, #32
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d060      	beq.n	8009ae6 <f_open+0x35a>
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	68db      	ldr	r3, [r3, #12]
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d05c      	beq.n	8009ae6 <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	68da      	ldr	r2, [r3, #12]
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8009a34:	693b      	ldr	r3, [r7, #16]
 8009a36:	895b      	ldrh	r3, [r3, #10]
 8009a38:	025b      	lsls	r3, r3, #9
 8009a3a:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	689b      	ldr	r3, [r3, #8]
 8009a40:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	68db      	ldr	r3, [r3, #12]
 8009a46:	657b      	str	r3, [r7, #84]	@ 0x54
 8009a48:	e016      	b.n	8009a78 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8009a4e:	4618      	mov	r0, r3
 8009a50:	f7fe fced 	bl	800842e <get_fat>
 8009a54:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8009a56:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009a58:	2b01      	cmp	r3, #1
 8009a5a:	d802      	bhi.n	8009a62 <f_open+0x2d6>
 8009a5c:	2302      	movs	r3, #2
 8009a5e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8009a62:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009a64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a68:	d102      	bne.n	8009a70 <f_open+0x2e4>
 8009a6a:	2301      	movs	r3, #1
 8009a6c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009a70:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009a72:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009a74:	1ad3      	subs	r3, r2, r3
 8009a76:	657b      	str	r3, [r7, #84]	@ 0x54
 8009a78:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d103      	bne.n	8009a88 <f_open+0x2fc>
 8009a80:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009a82:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009a84:	429a      	cmp	r2, r3
 8009a86:	d8e0      	bhi.n	8009a4a <f_open+0x2be>
				}
				fp->clust = clst;
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009a8c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8009a8e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d127      	bne.n	8009ae6 <f_open+0x35a>
 8009a96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009a98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d022      	beq.n	8009ae6 <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8009aa0:	693b      	ldr	r3, [r7, #16]
 8009aa2:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8009aa4:	4618      	mov	r0, r3
 8009aa6:	f7fe fca3 	bl	80083f0 <clust2sect>
 8009aaa:	6478      	str	r0, [r7, #68]	@ 0x44
 8009aac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d103      	bne.n	8009aba <f_open+0x32e>
						res = FR_INT_ERR;
 8009ab2:	2302      	movs	r3, #2
 8009ab4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8009ab8:	e015      	b.n	8009ae6 <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8009aba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009abc:	0a5a      	lsrs	r2, r3, #9
 8009abe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009ac0:	441a      	add	r2, r3
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8009ac6:	693b      	ldr	r3, [r7, #16]
 8009ac8:	7858      	ldrb	r0, [r3, #1]
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	6a1a      	ldr	r2, [r3, #32]
 8009ad4:	2301      	movs	r3, #1
 8009ad6:	f7fe f8af 	bl	8007c38 <disk_read>
 8009ada:	4603      	mov	r3, r0
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d002      	beq.n	8009ae6 <f_open+0x35a>
 8009ae0:	2301      	movs	r3, #1
 8009ae2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
=======
 8009e08:	693b      	ldr	r3, [r7, #16]
 8009e0a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009e0c:	4611      	mov	r1, r2
 8009e0e:	4618      	mov	r0, r3
 8009e10:	f7ff f9b4 	bl	800917c <ld_clust>
 8009e14:	4602      	mov	r2, r0
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8009e1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e1c:	331c      	adds	r3, #28
 8009e1e:	4618      	mov	r0, r3
 8009e20:	f7fe fa10 	bl	8008244 <ld_dword>
 8009e24:	4602      	mov	r2, r0
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	2200      	movs	r2, #0
 8009e2e:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8009e30:	693a      	ldr	r2, [r7, #16]
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8009e36:	693b      	ldr	r3, [r7, #16]
 8009e38:	88da      	ldrh	r2, [r3, #6]
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	79fa      	ldrb	r2, [r7, #7]
 8009e42:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	2200      	movs	r2, #0
 8009e48:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	2200      	movs	r2, #0
 8009e4e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	2200      	movs	r2, #0
 8009e54:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	3330      	adds	r3, #48	@ 0x30
 8009e5a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009e5e:	2100      	movs	r1, #0
 8009e60:	4618      	mov	r0, r3
 8009e62:	f7fe fa7a 	bl	800835a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8009e66:	79fb      	ldrb	r3, [r7, #7]
 8009e68:	f003 0320 	and.w	r3, r3, #32
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d060      	beq.n	8009f32 <f_open+0x35a>
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	68db      	ldr	r3, [r3, #12]
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d05c      	beq.n	8009f32 <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	68da      	ldr	r2, [r3, #12]
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8009e80:	693b      	ldr	r3, [r7, #16]
 8009e82:	895b      	ldrh	r3, [r3, #10]
 8009e84:	025b      	lsls	r3, r3, #9
 8009e86:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	689b      	ldr	r3, [r3, #8]
 8009e8c:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	68db      	ldr	r3, [r3, #12]
 8009e92:	657b      	str	r3, [r7, #84]	@ 0x54
 8009e94:	e016      	b.n	8009ec4 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8009e9a:	4618      	mov	r0, r3
 8009e9c:	f7fe fd25 	bl	80088ea <get_fat>
 8009ea0:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8009ea2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009ea4:	2b01      	cmp	r3, #1
 8009ea6:	d802      	bhi.n	8009eae <f_open+0x2d6>
 8009ea8:	2302      	movs	r3, #2
 8009eaa:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8009eae:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009eb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009eb4:	d102      	bne.n	8009ebc <f_open+0x2e4>
 8009eb6:	2301      	movs	r3, #1
 8009eb8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009ebc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009ebe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009ec0:	1ad3      	subs	r3, r2, r3
 8009ec2:	657b      	str	r3, [r7, #84]	@ 0x54
 8009ec4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d103      	bne.n	8009ed4 <f_open+0x2fc>
 8009ecc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009ece:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009ed0:	429a      	cmp	r2, r3
 8009ed2:	d8e0      	bhi.n	8009e96 <f_open+0x2be>
				}
				fp->clust = clst;
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009ed8:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8009eda:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d127      	bne.n	8009f32 <f_open+0x35a>
 8009ee2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009ee4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d022      	beq.n	8009f32 <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8009eec:	693b      	ldr	r3, [r7, #16]
 8009eee:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8009ef0:	4618      	mov	r0, r3
 8009ef2:	f7fe fcdb 	bl	80088ac <clust2sect>
 8009ef6:	6478      	str	r0, [r7, #68]	@ 0x44
 8009ef8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d103      	bne.n	8009f06 <f_open+0x32e>
						res = FR_INT_ERR;
 8009efe:	2302      	movs	r3, #2
 8009f00:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8009f04:	e015      	b.n	8009f32 <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8009f06:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009f08:	0a5a      	lsrs	r2, r3, #9
 8009f0a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009f0c:	441a      	add	r2, r3
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8009f12:	693b      	ldr	r3, [r7, #16]
 8009f14:	7858      	ldrb	r0, [r3, #1]
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	6a1a      	ldr	r2, [r3, #32]
 8009f20:	2301      	movs	r3, #1
 8009f22:	f7fe f919 	bl	8008158 <disk_read>
 8009f26:	4603      	mov	r3, r0
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d002      	beq.n	8009f32 <f_open+0x35a>
 8009f2c:	2301      	movs	r3, #1
 8009f2e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
>>>>>>> Stashed changes
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
<<<<<<< Updated upstream
 8009ae6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d002      	beq.n	8009af4 <f_open+0x368>
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	2200      	movs	r2, #0
 8009af2:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8009af4:	693b      	ldr	r3, [r7, #16]
 8009af6:	f897 205f 	ldrb.w	r2, [r7, #95]	@ 0x5f
 8009afa:	4611      	mov	r1, r2
 8009afc:	4618      	mov	r0, r3
 8009afe:	f7fe fa10 	bl	8007f22 <unlock_fs>
 8009b02:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 8009b06:	4618      	mov	r0, r3
 8009b08:	3760      	adds	r7, #96	@ 0x60
 8009b0a:	46bd      	mov	sp, r7
 8009b0c:	bd80      	pop	{r7, pc}

08009b0e <f_read>:
=======
 8009f32:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d002      	beq.n	8009f40 <f_open+0x368>
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	2200      	movs	r2, #0
 8009f3e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8009f40:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 8009f44:	4618      	mov	r0, r3
 8009f46:	3760      	adds	r7, #96	@ 0x60
 8009f48:	46bd      	mov	sp, r7
 8009f4a:	bd80      	pop	{r7, pc}

08009f4c <f_read>:
>>>>>>> Stashed changes
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
<<<<<<< Updated upstream
 8009b0e:	b580      	push	{r7, lr}
 8009b10:	b08e      	sub	sp, #56	@ 0x38
 8009b12:	af00      	add	r7, sp, #0
 8009b14:	60f8      	str	r0, [r7, #12]
 8009b16:	60b9      	str	r1, [r7, #8]
 8009b18:	607a      	str	r2, [r7, #4]
 8009b1a:	603b      	str	r3, [r7, #0]
=======
 8009f4c:	b580      	push	{r7, lr}
 8009f4e:	b08e      	sub	sp, #56	@ 0x38
 8009f50:	af00      	add	r7, sp, #0
 8009f52:	60f8      	str	r0, [r7, #12]
 8009f54:	60b9      	str	r1, [r7, #8]
 8009f56:	607a      	str	r2, [r7, #4]
 8009f58:	603b      	str	r3, [r7, #0]
>>>>>>> Stashed changes
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
<<<<<<< Updated upstream
 8009b1c:	68bb      	ldr	r3, [r7, #8]
 8009b1e:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 8009b20:	683b      	ldr	r3, [r7, #0]
 8009b22:	2200      	movs	r2, #0
 8009b24:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	f107 0214 	add.w	r2, r7, #20
 8009b2c:	4611      	mov	r1, r2
 8009b2e:	4618      	mov	r0, r3
 8009b30:	f7ff fd80 	bl	8009634 <validate>
 8009b34:	4603      	mov	r3, r0
 8009b36:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8009b3a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d107      	bne.n	8009b52 <f_read+0x44>
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	7d5b      	ldrb	r3, [r3, #21]
 8009b46:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8009b4a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d009      	beq.n	8009b66 <f_read+0x58>
 8009b52:	697b      	ldr	r3, [r7, #20]
 8009b54:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8009b58:	4611      	mov	r1, r2
 8009b5a:	4618      	mov	r0, r3
 8009b5c:	f7fe f9e1 	bl	8007f22 <unlock_fs>
 8009b60:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009b64:	e13d      	b.n	8009de2 <f_read+0x2d4>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	7d1b      	ldrb	r3, [r3, #20]
 8009b6a:	f003 0301 	and.w	r3, r3, #1
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d106      	bne.n	8009b80 <f_read+0x72>
 8009b72:	697b      	ldr	r3, [r7, #20]
 8009b74:	2107      	movs	r1, #7
 8009b76:	4618      	mov	r0, r3
 8009b78:	f7fe f9d3 	bl	8007f22 <unlock_fs>
 8009b7c:	2307      	movs	r3, #7
 8009b7e:	e130      	b.n	8009de2 <f_read+0x2d4>
	remain = fp->obj.objsize - fp->fptr;
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	68da      	ldr	r2, [r3, #12]
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	699b      	ldr	r3, [r3, #24]
 8009b88:	1ad3      	subs	r3, r2, r3
 8009b8a:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8009b8c:	687a      	ldr	r2, [r7, #4]
 8009b8e:	6a3b      	ldr	r3, [r7, #32]
 8009b90:	429a      	cmp	r2, r3
 8009b92:	f240 811c 	bls.w	8009dce <f_read+0x2c0>
 8009b96:	6a3b      	ldr	r3, [r7, #32]
 8009b98:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8009b9a:	e118      	b.n	8009dce <f_read+0x2c0>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	699b      	ldr	r3, [r3, #24]
 8009ba0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	f040 80e4 	bne.w	8009d72 <f_read+0x264>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	699b      	ldr	r3, [r3, #24]
 8009bae:	0a5b      	lsrs	r3, r3, #9
 8009bb0:	697a      	ldr	r2, [r7, #20]
 8009bb2:	8952      	ldrh	r2, [r2, #10]
 8009bb4:	3a01      	subs	r2, #1
 8009bb6:	4013      	ands	r3, r2
 8009bb8:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8009bba:	69fb      	ldr	r3, [r7, #28]
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d139      	bne.n	8009c34 <f_read+0x126>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	699b      	ldr	r3, [r3, #24]
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d103      	bne.n	8009bd0 <f_read+0xc2>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	689b      	ldr	r3, [r3, #8]
 8009bcc:	633b      	str	r3, [r7, #48]	@ 0x30
 8009bce:	e013      	b.n	8009bf8 <f_read+0xea>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d007      	beq.n	8009be8 <f_read+0xda>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	699b      	ldr	r3, [r3, #24]
 8009bdc:	4619      	mov	r1, r3
 8009bde:	68f8      	ldr	r0, [r7, #12]
 8009be0:	f7fe feb3 	bl	800894a <clmt_clust>
 8009be4:	6338      	str	r0, [r7, #48]	@ 0x30
 8009be6:	e007      	b.n	8009bf8 <f_read+0xea>
=======
 8009f5a:	68bb      	ldr	r3, [r7, #8]
 8009f5c:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 8009f5e:	683b      	ldr	r3, [r7, #0]
 8009f60:	2200      	movs	r2, #0
 8009f62:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	f107 0214 	add.w	r2, r7, #20
 8009f6a:	4611      	mov	r1, r2
 8009f6c:	4618      	mov	r0, r3
 8009f6e:	f7ff fdb7 	bl	8009ae0 <validate>
 8009f72:	4603      	mov	r3, r0
 8009f74:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8009f78:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d107      	bne.n	8009f90 <f_read+0x44>
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	7d5b      	ldrb	r3, [r3, #21]
 8009f84:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8009f88:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d002      	beq.n	8009f96 <f_read+0x4a>
 8009f90:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009f94:	e115      	b.n	800a1c2 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	7d1b      	ldrb	r3, [r3, #20]
 8009f9a:	f003 0301 	and.w	r3, r3, #1
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d101      	bne.n	8009fa6 <f_read+0x5a>
 8009fa2:	2307      	movs	r3, #7
 8009fa4:	e10d      	b.n	800a1c2 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	68da      	ldr	r2, [r3, #12]
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	699b      	ldr	r3, [r3, #24]
 8009fae:	1ad3      	subs	r3, r2, r3
 8009fb0:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8009fb2:	687a      	ldr	r2, [r7, #4]
 8009fb4:	6a3b      	ldr	r3, [r7, #32]
 8009fb6:	429a      	cmp	r2, r3
 8009fb8:	f240 80fe 	bls.w	800a1b8 <f_read+0x26c>
 8009fbc:	6a3b      	ldr	r3, [r7, #32]
 8009fbe:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8009fc0:	e0fa      	b.n	800a1b8 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	699b      	ldr	r3, [r3, #24]
 8009fc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	f040 80c6 	bne.w	800a15c <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	699b      	ldr	r3, [r3, #24]
 8009fd4:	0a5b      	lsrs	r3, r3, #9
 8009fd6:	697a      	ldr	r2, [r7, #20]
 8009fd8:	8952      	ldrh	r2, [r2, #10]
 8009fda:	3a01      	subs	r2, #1
 8009fdc:	4013      	ands	r3, r2
 8009fde:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8009fe0:	69fb      	ldr	r3, [r7, #28]
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d12f      	bne.n	800a046 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	699b      	ldr	r3, [r3, #24]
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d103      	bne.n	8009ff6 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	689b      	ldr	r3, [r3, #8]
 8009ff2:	633b      	str	r3, [r7, #48]	@ 0x30
 8009ff4:	e013      	b.n	800a01e <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d007      	beq.n	800a00e <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	699b      	ldr	r3, [r3, #24]
 800a002:	4619      	mov	r1, r3
 800a004:	68f8      	ldr	r0, [r7, #12]
 800a006:	f7fe fefe 	bl	8008e06 <clmt_clust>
 800a00a:	6338      	str	r0, [r7, #48]	@ 0x30
 800a00c:	e007      	b.n	800a01e <f_read+0xd2>
>>>>>>> Stashed changes
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
<<<<<<< Updated upstream
 8009be8:	68fa      	ldr	r2, [r7, #12]
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	69db      	ldr	r3, [r3, #28]
 8009bee:	4619      	mov	r1, r3
 8009bf0:	4610      	mov	r0, r2
 8009bf2:	f7fe fc1c 	bl	800842e <get_fat>
 8009bf6:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8009bf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bfa:	2b01      	cmp	r3, #1
 8009bfc:	d809      	bhi.n	8009c12 <f_read+0x104>
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	2202      	movs	r2, #2
 8009c02:	755a      	strb	r2, [r3, #21]
 8009c04:	697b      	ldr	r3, [r7, #20]
 8009c06:	2102      	movs	r1, #2
 8009c08:	4618      	mov	r0, r3
 8009c0a:	f7fe f98a 	bl	8007f22 <unlock_fs>
 8009c0e:	2302      	movs	r3, #2
 8009c10:	e0e7      	b.n	8009de2 <f_read+0x2d4>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009c12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c18:	d109      	bne.n	8009c2e <f_read+0x120>
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	2201      	movs	r2, #1
 8009c1e:	755a      	strb	r2, [r3, #21]
 8009c20:	697b      	ldr	r3, [r7, #20]
 8009c22:	2101      	movs	r1, #1
 8009c24:	4618      	mov	r0, r3
 8009c26:	f7fe f97c 	bl	8007f22 <unlock_fs>
 8009c2a:	2301      	movs	r3, #1
 8009c2c:	e0d9      	b.n	8009de2 <f_read+0x2d4>
				fp->clust = clst;				/* Update current cluster */
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009c32:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8009c34:	697a      	ldr	r2, [r7, #20]
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	69db      	ldr	r3, [r3, #28]
 8009c3a:	4619      	mov	r1, r3
 8009c3c:	4610      	mov	r0, r2
 8009c3e:	f7fe fbd7 	bl	80083f0 <clust2sect>
 8009c42:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8009c44:	69bb      	ldr	r3, [r7, #24]
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d109      	bne.n	8009c5e <f_read+0x150>
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	2202      	movs	r2, #2
 8009c4e:	755a      	strb	r2, [r3, #21]
 8009c50:	697b      	ldr	r3, [r7, #20]
 8009c52:	2102      	movs	r1, #2
 8009c54:	4618      	mov	r0, r3
 8009c56:	f7fe f964 	bl	8007f22 <unlock_fs>
 8009c5a:	2302      	movs	r3, #2
 8009c5c:	e0c1      	b.n	8009de2 <f_read+0x2d4>
			sect += csect;
 8009c5e:	69ba      	ldr	r2, [r7, #24]
 8009c60:	69fb      	ldr	r3, [r7, #28]
 8009c62:	4413      	add	r3, r2
 8009c64:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	0a5b      	lsrs	r3, r3, #9
 8009c6a:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8009c6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d03e      	beq.n	8009cf0 <f_read+0x1e2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8009c72:	69fa      	ldr	r2, [r7, #28]
 8009c74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c76:	4413      	add	r3, r2
 8009c78:	697a      	ldr	r2, [r7, #20]
 8009c7a:	8952      	ldrh	r2, [r2, #10]
 8009c7c:	4293      	cmp	r3, r2
 8009c7e:	d905      	bls.n	8009c8c <f_read+0x17e>
					cc = fs->csize - csect;
 8009c80:	697b      	ldr	r3, [r7, #20]
 8009c82:	895b      	ldrh	r3, [r3, #10]
 8009c84:	461a      	mov	r2, r3
 8009c86:	69fb      	ldr	r3, [r7, #28]
 8009c88:	1ad3      	subs	r3, r2, r3
 8009c8a:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009c8c:	697b      	ldr	r3, [r7, #20]
 8009c8e:	7858      	ldrb	r0, [r3, #1]
 8009c90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c92:	69ba      	ldr	r2, [r7, #24]
 8009c94:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009c96:	f7fd ffcf 	bl	8007c38 <disk_read>
 8009c9a:	4603      	mov	r3, r0
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d009      	beq.n	8009cb4 <f_read+0x1a6>
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	2201      	movs	r2, #1
 8009ca4:	755a      	strb	r2, [r3, #21]
 8009ca6:	697b      	ldr	r3, [r7, #20]
 8009ca8:	2101      	movs	r1, #1
 8009caa:	4618      	mov	r0, r3
 8009cac:	f7fe f939 	bl	8007f22 <unlock_fs>
 8009cb0:	2301      	movs	r3, #1
 8009cb2:	e096      	b.n	8009de2 <f_read+0x2d4>
=======
 800a00e:	68fa      	ldr	r2, [r7, #12]
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	69db      	ldr	r3, [r3, #28]
 800a014:	4619      	mov	r1, r3
 800a016:	4610      	mov	r0, r2
 800a018:	f7fe fc67 	bl	80088ea <get_fat>
 800a01c:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800a01e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a020:	2b01      	cmp	r3, #1
 800a022:	d804      	bhi.n	800a02e <f_read+0xe2>
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	2202      	movs	r2, #2
 800a028:	755a      	strb	r2, [r3, #21]
 800a02a:	2302      	movs	r3, #2
 800a02c:	e0c9      	b.n	800a1c2 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a02e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a030:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a034:	d104      	bne.n	800a040 <f_read+0xf4>
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	2201      	movs	r2, #1
 800a03a:	755a      	strb	r2, [r3, #21]
 800a03c:	2301      	movs	r3, #1
 800a03e:	e0c0      	b.n	800a1c2 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a044:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800a046:	697a      	ldr	r2, [r7, #20]
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	69db      	ldr	r3, [r3, #28]
 800a04c:	4619      	mov	r1, r3
 800a04e:	4610      	mov	r0, r2
 800a050:	f7fe fc2c 	bl	80088ac <clust2sect>
 800a054:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800a056:	69bb      	ldr	r3, [r7, #24]
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d104      	bne.n	800a066 <f_read+0x11a>
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	2202      	movs	r2, #2
 800a060:	755a      	strb	r2, [r3, #21]
 800a062:	2302      	movs	r3, #2
 800a064:	e0ad      	b.n	800a1c2 <f_read+0x276>
			sect += csect;
 800a066:	69ba      	ldr	r2, [r7, #24]
 800a068:	69fb      	ldr	r3, [r7, #28]
 800a06a:	4413      	add	r3, r2
 800a06c:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	0a5b      	lsrs	r3, r3, #9
 800a072:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800a074:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a076:	2b00      	cmp	r3, #0
 800a078:	d039      	beq.n	800a0ee <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800a07a:	69fa      	ldr	r2, [r7, #28]
 800a07c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a07e:	4413      	add	r3, r2
 800a080:	697a      	ldr	r2, [r7, #20]
 800a082:	8952      	ldrh	r2, [r2, #10]
 800a084:	4293      	cmp	r3, r2
 800a086:	d905      	bls.n	800a094 <f_read+0x148>
					cc = fs->csize - csect;
 800a088:	697b      	ldr	r3, [r7, #20]
 800a08a:	895b      	ldrh	r3, [r3, #10]
 800a08c:	461a      	mov	r2, r3
 800a08e:	69fb      	ldr	r3, [r7, #28]
 800a090:	1ad3      	subs	r3, r2, r3
 800a092:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a094:	697b      	ldr	r3, [r7, #20]
 800a096:	7858      	ldrb	r0, [r3, #1]
 800a098:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a09a:	69ba      	ldr	r2, [r7, #24]
 800a09c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a09e:	f7fe f85b 	bl	8008158 <disk_read>
 800a0a2:	4603      	mov	r3, r0
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d004      	beq.n	800a0b2 <f_read+0x166>
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	2201      	movs	r2, #1
 800a0ac:	755a      	strb	r2, [r3, #21]
 800a0ae:	2301      	movs	r3, #1
 800a0b0:	e087      	b.n	800a1c2 <f_read+0x276>
>>>>>>> Stashed changes
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
<<<<<<< Updated upstream
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	7d1b      	ldrb	r3, [r3, #20]
 8009cb8:	b25b      	sxtb	r3, r3
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	da14      	bge.n	8009ce8 <f_read+0x1da>
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	6a1a      	ldr	r2, [r3, #32]
 8009cc2:	69bb      	ldr	r3, [r7, #24]
 8009cc4:	1ad3      	subs	r3, r2, r3
 8009cc6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009cc8:	429a      	cmp	r2, r3
 8009cca:	d90d      	bls.n	8009ce8 <f_read+0x1da>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	6a1a      	ldr	r2, [r3, #32]
 8009cd0:	69bb      	ldr	r3, [r7, #24]
 8009cd2:	1ad3      	subs	r3, r2, r3
 8009cd4:	025b      	lsls	r3, r3, #9
 8009cd6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009cd8:	18d0      	adds	r0, r2, r3
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	3330      	adds	r3, #48	@ 0x30
 8009cde:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009ce2:	4619      	mov	r1, r3
 8009ce4:	f7fe f889 	bl	8007dfa <mem_cpy>
=======
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	7d1b      	ldrb	r3, [r3, #20]
 800a0b6:	b25b      	sxtb	r3, r3
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	da14      	bge.n	800a0e6 <f_read+0x19a>
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	6a1a      	ldr	r2, [r3, #32]
 800a0c0:	69bb      	ldr	r3, [r7, #24]
 800a0c2:	1ad3      	subs	r3, r2, r3
 800a0c4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a0c6:	429a      	cmp	r2, r3
 800a0c8:	d90d      	bls.n	800a0e6 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	6a1a      	ldr	r2, [r3, #32]
 800a0ce:	69bb      	ldr	r3, [r7, #24]
 800a0d0:	1ad3      	subs	r3, r2, r3
 800a0d2:	025b      	lsls	r3, r3, #9
 800a0d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a0d6:	18d0      	adds	r0, r2, r3
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	3330      	adds	r3, #48	@ 0x30
 800a0dc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a0e0:	4619      	mov	r1, r3
 800a0e2:	f7fe f919 	bl	8008318 <mem_cpy>
>>>>>>> Stashed changes
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
<<<<<<< Updated upstream
 8009ce8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cea:	025b      	lsls	r3, r3, #9
 8009cec:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 8009cee:	e05a      	b.n	8009da6 <f_read+0x298>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	6a1b      	ldr	r3, [r3, #32]
 8009cf4:	69ba      	ldr	r2, [r7, #24]
 8009cf6:	429a      	cmp	r2, r3
 8009cf8:	d038      	beq.n	8009d6c <f_read+0x25e>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	7d1b      	ldrb	r3, [r3, #20]
 8009cfe:	b25b      	sxtb	r3, r3
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	da1d      	bge.n	8009d40 <f_read+0x232>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009d04:	697b      	ldr	r3, [r7, #20]
 8009d06:	7858      	ldrb	r0, [r3, #1]
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	6a1a      	ldr	r2, [r3, #32]
 8009d12:	2301      	movs	r3, #1
 8009d14:	f7fd ffb0 	bl	8007c78 <disk_write>
 8009d18:	4603      	mov	r3, r0
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d009      	beq.n	8009d32 <f_read+0x224>
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	2201      	movs	r2, #1
 8009d22:	755a      	strb	r2, [r3, #21]
 8009d24:	697b      	ldr	r3, [r7, #20]
 8009d26:	2101      	movs	r1, #1
 8009d28:	4618      	mov	r0, r3
 8009d2a:	f7fe f8fa 	bl	8007f22 <unlock_fs>
 8009d2e:	2301      	movs	r3, #1
 8009d30:	e057      	b.n	8009de2 <f_read+0x2d4>
					fp->flag &= (BYTE)~FA_DIRTY;
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	7d1b      	ldrb	r3, [r3, #20]
 8009d36:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009d3a:	b2da      	uxtb	r2, r3
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8009d40:	697b      	ldr	r3, [r7, #20]
 8009d42:	7858      	ldrb	r0, [r3, #1]
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009d4a:	2301      	movs	r3, #1
 8009d4c:	69ba      	ldr	r2, [r7, #24]
 8009d4e:	f7fd ff73 	bl	8007c38 <disk_read>
 8009d52:	4603      	mov	r3, r0
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d009      	beq.n	8009d6c <f_read+0x25e>
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	2201      	movs	r2, #1
 8009d5c:	755a      	strb	r2, [r3, #21]
 8009d5e:	697b      	ldr	r3, [r7, #20]
 8009d60:	2101      	movs	r1, #1
 8009d62:	4618      	mov	r0, r3
 8009d64:	f7fe f8dd 	bl	8007f22 <unlock_fs>
 8009d68:	2301      	movs	r3, #1
 8009d6a:	e03a      	b.n	8009de2 <f_read+0x2d4>
			}
#endif
			fp->sect = sect;
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	69ba      	ldr	r2, [r7, #24]
 8009d70:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	699b      	ldr	r3, [r3, #24]
 8009d76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d7a:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8009d7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8009d80:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	429a      	cmp	r2, r3
 8009d86:	d901      	bls.n	8009d8c <f_read+0x27e>
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
=======
 800a0e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0e8:	025b      	lsls	r3, r3, #9
 800a0ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 800a0ec:	e050      	b.n	800a190 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	6a1b      	ldr	r3, [r3, #32]
 800a0f2:	69ba      	ldr	r2, [r7, #24]
 800a0f4:	429a      	cmp	r2, r3
 800a0f6:	d02e      	beq.n	800a156 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	7d1b      	ldrb	r3, [r3, #20]
 800a0fc:	b25b      	sxtb	r3, r3
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	da18      	bge.n	800a134 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a102:	697b      	ldr	r3, [r7, #20]
 800a104:	7858      	ldrb	r0, [r3, #1]
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	6a1a      	ldr	r2, [r3, #32]
 800a110:	2301      	movs	r3, #1
 800a112:	f7fe f841 	bl	8008198 <disk_write>
 800a116:	4603      	mov	r3, r0
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d004      	beq.n	800a126 <f_read+0x1da>
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	2201      	movs	r2, #1
 800a120:	755a      	strb	r2, [r3, #21]
 800a122:	2301      	movs	r3, #1
 800a124:	e04d      	b.n	800a1c2 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	7d1b      	ldrb	r3, [r3, #20]
 800a12a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a12e:	b2da      	uxtb	r2, r3
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800a134:	697b      	ldr	r3, [r7, #20]
 800a136:	7858      	ldrb	r0, [r3, #1]
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a13e:	2301      	movs	r3, #1
 800a140:	69ba      	ldr	r2, [r7, #24]
 800a142:	f7fe f809 	bl	8008158 <disk_read>
 800a146:	4603      	mov	r3, r0
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d004      	beq.n	800a156 <f_read+0x20a>
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	2201      	movs	r2, #1
 800a150:	755a      	strb	r2, [r3, #21]
 800a152:	2301      	movs	r3, #1
 800a154:	e035      	b.n	800a1c2 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	69ba      	ldr	r2, [r7, #24]
 800a15a:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	699b      	ldr	r3, [r3, #24]
 800a160:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a164:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800a168:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800a16a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	429a      	cmp	r2, r3
 800a170:	d901      	bls.n	800a176 <f_read+0x22a>
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	62fb      	str	r3, [r7, #44]	@ 0x2c
>>>>>>> Stashed changes
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
<<<<<<< Updated upstream
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	699b      	ldr	r3, [r3, #24]
 8009d96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d9a:	4413      	add	r3, r2
 8009d9c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009d9e:	4619      	mov	r1, r3
 8009da0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009da2:	f7fe f82a 	bl	8007dfa <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8009da6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009da8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009daa:	4413      	add	r3, r2
 8009dac:	627b      	str	r3, [r7, #36]	@ 0x24
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	699a      	ldr	r2, [r3, #24]
 8009db2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009db4:	441a      	add	r2, r3
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	619a      	str	r2, [r3, #24]
 8009dba:	683b      	ldr	r3, [r7, #0]
 8009dbc:	681a      	ldr	r2, [r3, #0]
 8009dbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009dc0:	441a      	add	r2, r3
 8009dc2:	683b      	ldr	r3, [r7, #0]
 8009dc4:	601a      	str	r2, [r3, #0]
 8009dc6:	687a      	ldr	r2, [r7, #4]
 8009dc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009dca:	1ad3      	subs	r3, r2, r3
 8009dcc:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	f47f aee3 	bne.w	8009b9c <f_read+0x8e>
=======
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	699b      	ldr	r3, [r3, #24]
 800a180:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a184:	4413      	add	r3, r2
 800a186:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a188:	4619      	mov	r1, r3
 800a18a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a18c:	f7fe f8c4 	bl	8008318 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800a190:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a192:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a194:	4413      	add	r3, r2
 800a196:	627b      	str	r3, [r7, #36]	@ 0x24
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	699a      	ldr	r2, [r3, #24]
 800a19c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a19e:	441a      	add	r2, r3
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	619a      	str	r2, [r3, #24]
 800a1a4:	683b      	ldr	r3, [r7, #0]
 800a1a6:	681a      	ldr	r2, [r3, #0]
 800a1a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a1aa:	441a      	add	r2, r3
 800a1ac:	683b      	ldr	r3, [r7, #0]
 800a1ae:	601a      	str	r2, [r3, #0]
 800a1b0:	687a      	ldr	r2, [r7, #4]
 800a1b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a1b4:	1ad3      	subs	r3, r2, r3
 800a1b6:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	f47f af01 	bne.w	8009fc2 <f_read+0x76>
>>>>>>> Stashed changes
#endif
	}

	LEAVE_FF(fs, FR_OK);
<<<<<<< Updated upstream
 8009dd6:	697b      	ldr	r3, [r7, #20]
 8009dd8:	2100      	movs	r1, #0
 8009dda:	4618      	mov	r0, r3
 8009ddc:	f7fe f8a1 	bl	8007f22 <unlock_fs>
 8009de0:	2300      	movs	r3, #0
}
 8009de2:	4618      	mov	r0, r3
 8009de4:	3738      	adds	r7, #56	@ 0x38
 8009de6:	46bd      	mov	sp, r7
 8009de8:	bd80      	pop	{r7, pc}

08009dea <f_sync>:
=======
 800a1c0:	2300      	movs	r3, #0
}
 800a1c2:	4618      	mov	r0, r3
 800a1c4:	3738      	adds	r7, #56	@ 0x38
 800a1c6:	46bd      	mov	sp, r7
 800a1c8:	bd80      	pop	{r7, pc}

0800a1ca <f_sync>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
<<<<<<< Updated upstream
 8009dea:	b580      	push	{r7, lr}
 8009dec:	b086      	sub	sp, #24
 8009dee:	af00      	add	r7, sp, #0
 8009df0:	6078      	str	r0, [r7, #4]
=======
 800a1ca:	b580      	push	{r7, lr}
 800a1cc:	b086      	sub	sp, #24
 800a1ce:	af00      	add	r7, sp, #0
 800a1d0:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
<<<<<<< Updated upstream
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	f107 0208 	add.w	r2, r7, #8
 8009df8:	4611      	mov	r1, r2
 8009dfa:	4618      	mov	r0, r3
 8009dfc:	f7ff fc1a 	bl	8009634 <validate>
 8009e00:	4603      	mov	r3, r0
 8009e02:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8009e04:	7dfb      	ldrb	r3, [r7, #23]
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d16d      	bne.n	8009ee6 <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	7d1b      	ldrb	r3, [r3, #20]
 8009e0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d067      	beq.n	8009ee6 <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	7d1b      	ldrb	r3, [r3, #20]
 8009e1a:	b25b      	sxtb	r3, r3
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	da1a      	bge.n	8009e56 <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8009e20:	68bb      	ldr	r3, [r7, #8]
 8009e22:	7858      	ldrb	r0, [r3, #1]
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	6a1a      	ldr	r2, [r3, #32]
 8009e2e:	2301      	movs	r3, #1
 8009e30:	f7fd ff22 	bl	8007c78 <disk_write>
 8009e34:	4603      	mov	r3, r0
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d006      	beq.n	8009e48 <f_sync+0x5e>
 8009e3a:	68bb      	ldr	r3, [r7, #8]
 8009e3c:	2101      	movs	r1, #1
 8009e3e:	4618      	mov	r0, r3
 8009e40:	f7fe f86f 	bl	8007f22 <unlock_fs>
 8009e44:	2301      	movs	r3, #1
 8009e46:	e055      	b.n	8009ef4 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	7d1b      	ldrb	r3, [r3, #20]
 8009e4c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009e50:	b2da      	uxtb	r2, r3
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	751a      	strb	r2, [r3, #20]
=======
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	f107 0208 	add.w	r2, r7, #8
 800a1d8:	4611      	mov	r1, r2
 800a1da:	4618      	mov	r0, r3
 800a1dc:	f7ff fc80 	bl	8009ae0 <validate>
 800a1e0:	4603      	mov	r3, r0
 800a1e2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800a1e4:	7dfb      	ldrb	r3, [r7, #23]
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d168      	bne.n	800a2bc <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	7d1b      	ldrb	r3, [r3, #20]
 800a1ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d062      	beq.n	800a2bc <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	7d1b      	ldrb	r3, [r3, #20]
 800a1fa:	b25b      	sxtb	r3, r3
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	da15      	bge.n	800a22c <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800a200:	68bb      	ldr	r3, [r7, #8]
 800a202:	7858      	ldrb	r0, [r3, #1]
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	6a1a      	ldr	r2, [r3, #32]
 800a20e:	2301      	movs	r3, #1
 800a210:	f7fd ffc2 	bl	8008198 <disk_write>
 800a214:	4603      	mov	r3, r0
 800a216:	2b00      	cmp	r3, #0
 800a218:	d001      	beq.n	800a21e <f_sync+0x54>
 800a21a:	2301      	movs	r3, #1
 800a21c:	e04f      	b.n	800a2be <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	7d1b      	ldrb	r3, [r3, #20]
 800a222:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a226:	b2da      	uxtb	r2, r3
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	751a      	strb	r2, [r3, #20]
>>>>>>> Stashed changes
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
<<<<<<< Updated upstream
 8009e56:	f7fd f977 	bl	8007148 <get_fattime>
 8009e5a:	6138      	str	r0, [r7, #16]
=======
 800a22c:	f7fd fa1c 	bl	8007668 <get_fattime>
 800a230:	6138      	str	r0, [r7, #16]
>>>>>>> Stashed changes
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
<<<<<<< Updated upstream
 8009e5c:	68ba      	ldr	r2, [r7, #8]
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e62:	4619      	mov	r1, r3
 8009e64:	4610      	mov	r0, r2
 8009e66:	f7fe fa27 	bl	80082b8 <move_window>
 8009e6a:	4603      	mov	r3, r0
 8009e6c:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8009e6e:	7dfb      	ldrb	r3, [r7, #23]
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d138      	bne.n	8009ee6 <f_sync+0xfc>
					dir = fp->dir_ptr;
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e78:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	330b      	adds	r3, #11
 8009e7e:	781a      	ldrb	r2, [r3, #0]
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	330b      	adds	r3, #11
 8009e84:	f042 0220 	orr.w	r2, r2, #32
 8009e88:	b2d2      	uxtb	r2, r2
 8009e8a:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	6818      	ldr	r0, [r3, #0]
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	689b      	ldr	r3, [r3, #8]
 8009e94:	461a      	mov	r2, r3
 8009e96:	68f9      	ldr	r1, [r7, #12]
 8009e98:	f7fe ff31 	bl	8008cfe <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	f103 021c 	add.w	r2, r3, #28
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	68db      	ldr	r3, [r3, #12]
 8009ea6:	4619      	mov	r1, r3
 8009ea8:	4610      	mov	r0, r2
 8009eaa:	f7fd ff7a 	bl	8007da2 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	3316      	adds	r3, #22
 8009eb2:	6939      	ldr	r1, [r7, #16]
 8009eb4:	4618      	mov	r0, r3
 8009eb6:	f7fd ff74 	bl	8007da2 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	3312      	adds	r3, #18
 8009ebe:	2100      	movs	r1, #0
 8009ec0:	4618      	mov	r0, r3
 8009ec2:	f7fd ff53 	bl	8007d6c <st_word>
					fs->wflag = 1;
 8009ec6:	68bb      	ldr	r3, [r7, #8]
 8009ec8:	2201      	movs	r2, #1
 8009eca:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8009ecc:	68bb      	ldr	r3, [r7, #8]
 8009ece:	4618      	mov	r0, r3
 8009ed0:	f7fe fa20 	bl	8008314 <sync_fs>
 8009ed4:	4603      	mov	r3, r0
 8009ed6:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	7d1b      	ldrb	r3, [r3, #20]
 8009edc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009ee0:	b2da      	uxtb	r2, r3
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	751a      	strb	r2, [r3, #20]
=======
 800a232:	68ba      	ldr	r2, [r7, #8]
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a238:	4619      	mov	r1, r3
 800a23a:	4610      	mov	r0, r2
 800a23c:	f7fe fa9a 	bl	8008774 <move_window>
 800a240:	4603      	mov	r3, r0
 800a242:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800a244:	7dfb      	ldrb	r3, [r7, #23]
 800a246:	2b00      	cmp	r3, #0
 800a248:	d138      	bne.n	800a2bc <f_sync+0xf2>
					dir = fp->dir_ptr;
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a24e:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	330b      	adds	r3, #11
 800a254:	781a      	ldrb	r2, [r3, #0]
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	330b      	adds	r3, #11
 800a25a:	f042 0220 	orr.w	r2, r2, #32
 800a25e:	b2d2      	uxtb	r2, r2
 800a260:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	6818      	ldr	r0, [r3, #0]
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	689b      	ldr	r3, [r3, #8]
 800a26a:	461a      	mov	r2, r3
 800a26c:	68f9      	ldr	r1, [r7, #12]
 800a26e:	f7fe ffa4 	bl	80091ba <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	f103 021c 	add.w	r2, r3, #28
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	68db      	ldr	r3, [r3, #12]
 800a27c:	4619      	mov	r1, r3
 800a27e:	4610      	mov	r0, r2
 800a280:	f7fe f81e 	bl	80082c0 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	3316      	adds	r3, #22
 800a288:	6939      	ldr	r1, [r7, #16]
 800a28a:	4618      	mov	r0, r3
 800a28c:	f7fe f818 	bl	80082c0 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	3312      	adds	r3, #18
 800a294:	2100      	movs	r1, #0
 800a296:	4618      	mov	r0, r3
 800a298:	f7fd fff7 	bl	800828a <st_word>
					fs->wflag = 1;
 800a29c:	68bb      	ldr	r3, [r7, #8]
 800a29e:	2201      	movs	r2, #1
 800a2a0:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800a2a2:	68bb      	ldr	r3, [r7, #8]
 800a2a4:	4618      	mov	r0, r3
 800a2a6:	f7fe fa93 	bl	80087d0 <sync_fs>
 800a2aa:	4603      	mov	r3, r0
 800a2ac:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	7d1b      	ldrb	r3, [r3, #20]
 800a2b2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a2b6:	b2da      	uxtb	r2, r3
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	751a      	strb	r2, [r3, #20]
>>>>>>> Stashed changes
				}
			}
		}
	}

	LEAVE_FF(fs, res);
<<<<<<< Updated upstream
 8009ee6:	68bb      	ldr	r3, [r7, #8]
 8009ee8:	7dfa      	ldrb	r2, [r7, #23]
 8009eea:	4611      	mov	r1, r2
 8009eec:	4618      	mov	r0, r3
 8009eee:	f7fe f818 	bl	8007f22 <unlock_fs>
 8009ef2:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ef4:	4618      	mov	r0, r3
 8009ef6:	3718      	adds	r7, #24
 8009ef8:	46bd      	mov	sp, r7
 8009efa:	bd80      	pop	{r7, pc}

08009efc <f_close>:
=======
 800a2bc:	7dfb      	ldrb	r3, [r7, #23]
}
 800a2be:	4618      	mov	r0, r3
 800a2c0:	3718      	adds	r7, #24
 800a2c2:	46bd      	mov	sp, r7
 800a2c4:	bd80      	pop	{r7, pc}

0800a2c6 <f_close>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
<<<<<<< Updated upstream
 8009efc:	b580      	push	{r7, lr}
 8009efe:	b084      	sub	sp, #16
 8009f00:	af00      	add	r7, sp, #0
 8009f02:	6078      	str	r0, [r7, #4]
=======
 800a2c6:	b580      	push	{r7, lr}
 800a2c8:	b084      	sub	sp, #16
 800a2ca:	af00      	add	r7, sp, #0
 800a2cc:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
<<<<<<< Updated upstream
 8009f04:	6878      	ldr	r0, [r7, #4]
 8009f06:	f7ff ff70 	bl	8009dea <f_sync>
 8009f0a:	4603      	mov	r3, r0
 8009f0c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8009f0e:	7bfb      	ldrb	r3, [r7, #15]
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d11d      	bne.n	8009f50 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	f107 0208 	add.w	r2, r7, #8
 8009f1a:	4611      	mov	r1, r2
 8009f1c:	4618      	mov	r0, r3
 8009f1e:	f7ff fb89 	bl	8009634 <validate>
 8009f22:	4603      	mov	r3, r0
 8009f24:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8009f26:	7bfb      	ldrb	r3, [r7, #15]
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d111      	bne.n	8009f50 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	691b      	ldr	r3, [r3, #16]
 8009f30:	4618      	mov	r0, r3
 8009f32:	f7fe f91d 	bl	8008170 <dec_lock>
 8009f36:	4603      	mov	r3, r0
 8009f38:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8009f3a:	7bfb      	ldrb	r3, [r7, #15]
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d102      	bne.n	8009f46 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	2200      	movs	r2, #0
 8009f44:	601a      	str	r2, [r3, #0]
			}
=======
 800a2ce:	6878      	ldr	r0, [r7, #4]
 800a2d0:	f7ff ff7b 	bl	800a1ca <f_sync>
 800a2d4:	4603      	mov	r3, r0
 800a2d6:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800a2d8:	7bfb      	ldrb	r3, [r7, #15]
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d118      	bne.n	800a310 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	f107 0208 	add.w	r2, r7, #8
 800a2e4:	4611      	mov	r1, r2
 800a2e6:	4618      	mov	r0, r3
 800a2e8:	f7ff fbfa 	bl	8009ae0 <validate>
 800a2ec:	4603      	mov	r3, r0
 800a2ee:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800a2f0:	7bfb      	ldrb	r3, [r7, #15]
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d10c      	bne.n	800a310 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	691b      	ldr	r3, [r3, #16]
 800a2fa:	4618      	mov	r0, r3
 800a2fc:	f7fe f996 	bl	800862c <dec_lock>
 800a300:	4603      	mov	r3, r0
 800a302:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800a304:	7bfb      	ldrb	r3, [r7, #15]
 800a306:	2b00      	cmp	r3, #0
 800a308:	d102      	bne.n	800a310 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	2200      	movs	r2, #0
 800a30e:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 8009f46:	68bb      	ldr	r3, [r7, #8]
 8009f48:	2100      	movs	r1, #0
 8009f4a:	4618      	mov	r0, r3
 8009f4c:	f7fd ffe9 	bl	8007f22 <unlock_fs>
#endif
		}
	}
	return res;
<<<<<<< Updated upstream
 8009f50:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f52:	4618      	mov	r0, r3
 8009f54:	3710      	adds	r7, #16
 8009f56:	46bd      	mov	sp, r7
 8009f58:	bd80      	pop	{r7, pc}

08009f5a <f_gets>:
=======
 800a310:	7bfb      	ldrb	r3, [r7, #15]
}
 800a312:	4618      	mov	r0, r3
 800a314:	3710      	adds	r7, #16
 800a316:	46bd      	mov	sp, r7
 800a318:	bd80      	pop	{r7, pc}

0800a31a <f_gets>:
>>>>>>> Stashed changes
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
<<<<<<< Updated upstream
 8009f5a:	b580      	push	{r7, lr}
 8009f5c:	b088      	sub	sp, #32
 8009f5e:	af00      	add	r7, sp, #0
 8009f60:	60f8      	str	r0, [r7, #12]
 8009f62:	60b9      	str	r1, [r7, #8]
 8009f64:	607a      	str	r2, [r7, #4]
	int n = 0;
 8009f66:	2300      	movs	r3, #0
 8009f68:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	61bb      	str	r3, [r7, #24]
=======
 800a31a:	b580      	push	{r7, lr}
 800a31c:	b088      	sub	sp, #32
 800a31e:	af00      	add	r7, sp, #0
 800a320:	60f8      	str	r0, [r7, #12]
 800a322:	60b9      	str	r1, [r7, #8]
 800a324:	607a      	str	r2, [r7, #4]
	int n = 0;
 800a326:	2300      	movs	r3, #0
 800a328:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	61bb      	str	r3, [r7, #24]
>>>>>>> Stashed changes
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
<<<<<<< Updated upstream
 8009f6e:	e01c      	b.n	8009faa <f_gets+0x50>
=======
 800a32e:	e01c      	b.n	800a36a <f_gets+0x50>
>>>>>>> Stashed changes
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
<<<<<<< Updated upstream
 8009f70:	f107 0310 	add.w	r3, r7, #16
 8009f74:	f107 0114 	add.w	r1, r7, #20
 8009f78:	2201      	movs	r2, #1
 8009f7a:	6878      	ldr	r0, [r7, #4]
 8009f7c:	f7ff fdc7 	bl	8009b0e <f_read>
		if (rc != 1) break;
 8009f80:	693b      	ldr	r3, [r7, #16]
 8009f82:	2b01      	cmp	r3, #1
 8009f84:	d117      	bne.n	8009fb6 <f_gets+0x5c>
		c = s[0];
 8009f86:	7d3b      	ldrb	r3, [r7, #20]
 8009f88:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8009f8a:	7dfb      	ldrb	r3, [r7, #23]
 8009f8c:	2b0d      	cmp	r3, #13
 8009f8e:	d00b      	beq.n	8009fa8 <f_gets+0x4e>
		*p++ = c;
 8009f90:	69bb      	ldr	r3, [r7, #24]
 8009f92:	1c5a      	adds	r2, r3, #1
 8009f94:	61ba      	str	r2, [r7, #24]
 8009f96:	7dfa      	ldrb	r2, [r7, #23]
 8009f98:	701a      	strb	r2, [r3, #0]
		n++;
 8009f9a:	69fb      	ldr	r3, [r7, #28]
 8009f9c:	3301      	adds	r3, #1
 8009f9e:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 8009fa0:	7dfb      	ldrb	r3, [r7, #23]
 8009fa2:	2b0a      	cmp	r3, #10
 8009fa4:	d009      	beq.n	8009fba <f_gets+0x60>
 8009fa6:	e000      	b.n	8009faa <f_gets+0x50>
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8009fa8:	bf00      	nop
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8009faa:	68bb      	ldr	r3, [r7, #8]
 8009fac:	3b01      	subs	r3, #1
 8009fae:	69fa      	ldr	r2, [r7, #28]
 8009fb0:	429a      	cmp	r2, r3
 8009fb2:	dbdd      	blt.n	8009f70 <f_gets+0x16>
 8009fb4:	e002      	b.n	8009fbc <f_gets+0x62>
		if (rc != 1) break;
 8009fb6:	bf00      	nop
 8009fb8:	e000      	b.n	8009fbc <f_gets+0x62>
		if (c == '\n') break;		/* Break on EOL */
 8009fba:	bf00      	nop
	}
	*p = 0;
 8009fbc:	69bb      	ldr	r3, [r7, #24]
 8009fbe:	2200      	movs	r2, #0
 8009fc0:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8009fc2:	69fb      	ldr	r3, [r7, #28]
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d001      	beq.n	8009fcc <f_gets+0x72>
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	e000      	b.n	8009fce <f_gets+0x74>
 8009fcc:	2300      	movs	r3, #0
}
 8009fce:	4618      	mov	r0, r3
 8009fd0:	3720      	adds	r7, #32
 8009fd2:	46bd      	mov	sp, r7
 8009fd4:	bd80      	pop	{r7, pc}
	...

08009fd8 <FATFS_LinkDriverEx>:
=======
 800a330:	f107 0310 	add.w	r3, r7, #16
 800a334:	f107 0114 	add.w	r1, r7, #20
 800a338:	2201      	movs	r2, #1
 800a33a:	6878      	ldr	r0, [r7, #4]
 800a33c:	f7ff fe06 	bl	8009f4c <f_read>
		if (rc != 1) break;
 800a340:	693b      	ldr	r3, [r7, #16]
 800a342:	2b01      	cmp	r3, #1
 800a344:	d117      	bne.n	800a376 <f_gets+0x5c>
		c = s[0];
 800a346:	7d3b      	ldrb	r3, [r7, #20]
 800a348:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 800a34a:	7dfb      	ldrb	r3, [r7, #23]
 800a34c:	2b0d      	cmp	r3, #13
 800a34e:	d00b      	beq.n	800a368 <f_gets+0x4e>
		*p++ = c;
 800a350:	69bb      	ldr	r3, [r7, #24]
 800a352:	1c5a      	adds	r2, r3, #1
 800a354:	61ba      	str	r2, [r7, #24]
 800a356:	7dfa      	ldrb	r2, [r7, #23]
 800a358:	701a      	strb	r2, [r3, #0]
		n++;
 800a35a:	69fb      	ldr	r3, [r7, #28]
 800a35c:	3301      	adds	r3, #1
 800a35e:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 800a360:	7dfb      	ldrb	r3, [r7, #23]
 800a362:	2b0a      	cmp	r3, #10
 800a364:	d009      	beq.n	800a37a <f_gets+0x60>
 800a366:	e000      	b.n	800a36a <f_gets+0x50>
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 800a368:	bf00      	nop
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800a36a:	68bb      	ldr	r3, [r7, #8]
 800a36c:	3b01      	subs	r3, #1
 800a36e:	69fa      	ldr	r2, [r7, #28]
 800a370:	429a      	cmp	r2, r3
 800a372:	dbdd      	blt.n	800a330 <f_gets+0x16>
 800a374:	e002      	b.n	800a37c <f_gets+0x62>
		if (rc != 1) break;
 800a376:	bf00      	nop
 800a378:	e000      	b.n	800a37c <f_gets+0x62>
		if (c == '\n') break;		/* Break on EOL */
 800a37a:	bf00      	nop
	}
	*p = 0;
 800a37c:	69bb      	ldr	r3, [r7, #24]
 800a37e:	2200      	movs	r2, #0
 800a380:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 800a382:	69fb      	ldr	r3, [r7, #28]
 800a384:	2b00      	cmp	r3, #0
 800a386:	d001      	beq.n	800a38c <f_gets+0x72>
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	e000      	b.n	800a38e <f_gets+0x74>
 800a38c:	2300      	movs	r3, #0
}
 800a38e:	4618      	mov	r0, r3
 800a390:	3720      	adds	r7, #32
 800a392:	46bd      	mov	sp, r7
 800a394:	bd80      	pop	{r7, pc}
	...

0800a398 <FATFS_LinkDriverEx>:
>>>>>>> Stashed changes
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
<<<<<<< Updated upstream
 8009fd8:	b480      	push	{r7}
 8009fda:	b087      	sub	sp, #28
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	60f8      	str	r0, [r7, #12]
 8009fe0:	60b9      	str	r1, [r7, #8]
 8009fe2:	4613      	mov	r3, r2
 8009fe4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8009fe6:	2301      	movs	r3, #1
 8009fe8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8009fea:	2300      	movs	r3, #0
 8009fec:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8009fee:	4b1f      	ldr	r3, [pc, #124]	@ (800a06c <FATFS_LinkDriverEx+0x94>)
 8009ff0:	7a5b      	ldrb	r3, [r3, #9]
 8009ff2:	b2db      	uxtb	r3, r3
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d131      	bne.n	800a05c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8009ff8:	4b1c      	ldr	r3, [pc, #112]	@ (800a06c <FATFS_LinkDriverEx+0x94>)
 8009ffa:	7a5b      	ldrb	r3, [r3, #9]
 8009ffc:	b2db      	uxtb	r3, r3
 8009ffe:	461a      	mov	r2, r3
 800a000:	4b1a      	ldr	r3, [pc, #104]	@ (800a06c <FATFS_LinkDriverEx+0x94>)
 800a002:	2100      	movs	r1, #0
 800a004:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800a006:	4b19      	ldr	r3, [pc, #100]	@ (800a06c <FATFS_LinkDriverEx+0x94>)
 800a008:	7a5b      	ldrb	r3, [r3, #9]
 800a00a:	b2db      	uxtb	r3, r3
 800a00c:	4a17      	ldr	r2, [pc, #92]	@ (800a06c <FATFS_LinkDriverEx+0x94>)
 800a00e:	009b      	lsls	r3, r3, #2
 800a010:	4413      	add	r3, r2
 800a012:	68fa      	ldr	r2, [r7, #12]
 800a014:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800a016:	4b15      	ldr	r3, [pc, #84]	@ (800a06c <FATFS_LinkDriverEx+0x94>)
 800a018:	7a5b      	ldrb	r3, [r3, #9]
 800a01a:	b2db      	uxtb	r3, r3
 800a01c:	461a      	mov	r2, r3
 800a01e:	4b13      	ldr	r3, [pc, #76]	@ (800a06c <FATFS_LinkDriverEx+0x94>)
 800a020:	4413      	add	r3, r2
 800a022:	79fa      	ldrb	r2, [r7, #7]
 800a024:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800a026:	4b11      	ldr	r3, [pc, #68]	@ (800a06c <FATFS_LinkDriverEx+0x94>)
 800a028:	7a5b      	ldrb	r3, [r3, #9]
 800a02a:	b2db      	uxtb	r3, r3
 800a02c:	1c5a      	adds	r2, r3, #1
 800a02e:	b2d1      	uxtb	r1, r2
 800a030:	4a0e      	ldr	r2, [pc, #56]	@ (800a06c <FATFS_LinkDriverEx+0x94>)
 800a032:	7251      	strb	r1, [r2, #9]
 800a034:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800a036:	7dbb      	ldrb	r3, [r7, #22]
 800a038:	3330      	adds	r3, #48	@ 0x30
 800a03a:	b2da      	uxtb	r2, r3
 800a03c:	68bb      	ldr	r3, [r7, #8]
 800a03e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800a040:	68bb      	ldr	r3, [r7, #8]
 800a042:	3301      	adds	r3, #1
 800a044:	223a      	movs	r2, #58	@ 0x3a
 800a046:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800a048:	68bb      	ldr	r3, [r7, #8]
 800a04a:	3302      	adds	r3, #2
 800a04c:	222f      	movs	r2, #47	@ 0x2f
 800a04e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800a050:	68bb      	ldr	r3, [r7, #8]
 800a052:	3303      	adds	r3, #3
 800a054:	2200      	movs	r2, #0
 800a056:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800a058:	2300      	movs	r3, #0
 800a05a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800a05c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a05e:	4618      	mov	r0, r3
 800a060:	371c      	adds	r7, #28
 800a062:	46bd      	mov	sp, r7
 800a064:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a068:	4770      	bx	lr
 800a06a:	bf00      	nop
 800a06c:	20000a5c 	.word	0x20000a5c

0800a070 <FATFS_LinkDriver>:
=======
 800a398:	b480      	push	{r7}
 800a39a:	b087      	sub	sp, #28
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	60f8      	str	r0, [r7, #12]
 800a3a0:	60b9      	str	r1, [r7, #8]
 800a3a2:	4613      	mov	r3, r2
 800a3a4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800a3a6:	2301      	movs	r3, #1
 800a3a8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800a3aa:	2300      	movs	r3, #0
 800a3ac:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800a3ae:	4b1f      	ldr	r3, [pc, #124]	@ (800a42c <FATFS_LinkDriverEx+0x94>)
 800a3b0:	7a5b      	ldrb	r3, [r3, #9]
 800a3b2:	b2db      	uxtb	r3, r3
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d131      	bne.n	800a41c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800a3b8:	4b1c      	ldr	r3, [pc, #112]	@ (800a42c <FATFS_LinkDriverEx+0x94>)
 800a3ba:	7a5b      	ldrb	r3, [r3, #9]
 800a3bc:	b2db      	uxtb	r3, r3
 800a3be:	461a      	mov	r2, r3
 800a3c0:	4b1a      	ldr	r3, [pc, #104]	@ (800a42c <FATFS_LinkDriverEx+0x94>)
 800a3c2:	2100      	movs	r1, #0
 800a3c4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800a3c6:	4b19      	ldr	r3, [pc, #100]	@ (800a42c <FATFS_LinkDriverEx+0x94>)
 800a3c8:	7a5b      	ldrb	r3, [r3, #9]
 800a3ca:	b2db      	uxtb	r3, r3
 800a3cc:	4a17      	ldr	r2, [pc, #92]	@ (800a42c <FATFS_LinkDriverEx+0x94>)
 800a3ce:	009b      	lsls	r3, r3, #2
 800a3d0:	4413      	add	r3, r2
 800a3d2:	68fa      	ldr	r2, [r7, #12]
 800a3d4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800a3d6:	4b15      	ldr	r3, [pc, #84]	@ (800a42c <FATFS_LinkDriverEx+0x94>)
 800a3d8:	7a5b      	ldrb	r3, [r3, #9]
 800a3da:	b2db      	uxtb	r3, r3
 800a3dc:	461a      	mov	r2, r3
 800a3de:	4b13      	ldr	r3, [pc, #76]	@ (800a42c <FATFS_LinkDriverEx+0x94>)
 800a3e0:	4413      	add	r3, r2
 800a3e2:	79fa      	ldrb	r2, [r7, #7]
 800a3e4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800a3e6:	4b11      	ldr	r3, [pc, #68]	@ (800a42c <FATFS_LinkDriverEx+0x94>)
 800a3e8:	7a5b      	ldrb	r3, [r3, #9]
 800a3ea:	b2db      	uxtb	r3, r3
 800a3ec:	1c5a      	adds	r2, r3, #1
 800a3ee:	b2d1      	uxtb	r1, r2
 800a3f0:	4a0e      	ldr	r2, [pc, #56]	@ (800a42c <FATFS_LinkDriverEx+0x94>)
 800a3f2:	7251      	strb	r1, [r2, #9]
 800a3f4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800a3f6:	7dbb      	ldrb	r3, [r7, #22]
 800a3f8:	3330      	adds	r3, #48	@ 0x30
 800a3fa:	b2da      	uxtb	r2, r3
 800a3fc:	68bb      	ldr	r3, [r7, #8]
 800a3fe:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800a400:	68bb      	ldr	r3, [r7, #8]
 800a402:	3301      	adds	r3, #1
 800a404:	223a      	movs	r2, #58	@ 0x3a
 800a406:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800a408:	68bb      	ldr	r3, [r7, #8]
 800a40a:	3302      	adds	r3, #2
 800a40c:	222f      	movs	r2, #47	@ 0x2f
 800a40e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800a410:	68bb      	ldr	r3, [r7, #8]
 800a412:	3303      	adds	r3, #3
 800a414:	2200      	movs	r2, #0
 800a416:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800a418:	2300      	movs	r3, #0
 800a41a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800a41c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a41e:	4618      	mov	r0, r3
 800a420:	371c      	adds	r7, #28
 800a422:	46bd      	mov	sp, r7
 800a424:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a428:	4770      	bx	lr
 800a42a:	bf00      	nop
 800a42c:	20000640 	.word	0x20000640

0800a430 <FATFS_LinkDriver>:
>>>>>>> Stashed changes
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
<<<<<<< Updated upstream
 800a070:	b580      	push	{r7, lr}
 800a072:	b082      	sub	sp, #8
 800a074:	af00      	add	r7, sp, #0
 800a076:	6078      	str	r0, [r7, #4]
 800a078:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800a07a:	2200      	movs	r2, #0
 800a07c:	6839      	ldr	r1, [r7, #0]
 800a07e:	6878      	ldr	r0, [r7, #4]
 800a080:	f7ff ffaa 	bl	8009fd8 <FATFS_LinkDriverEx>
 800a084:	4603      	mov	r3, r0
}
 800a086:	4618      	mov	r0, r3
 800a088:	3708      	adds	r7, #8
 800a08a:	46bd      	mov	sp, r7
 800a08c:	bd80      	pop	{r7, pc}

0800a08e <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 800a08e:	b580      	push	{r7, lr}
 800a090:	b084      	sub	sp, #16
 800a092:	af00      	add	r7, sp, #0
 800a094:	4603      	mov	r3, r0
 800a096:	6039      	str	r1, [r7, #0]
 800a098:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 800a09a:	2200      	movs	r2, #0
 800a09c:	2101      	movs	r1, #1
 800a09e:	2001      	movs	r0, #1
 800a0a0:	f000 f977 	bl	800a392 <osSemaphoreNew>
 800a0a4:	4602      	mov	r2, r0
 800a0a6:	683b      	ldr	r3, [r7, #0]
 800a0a8:	601a      	str	r2, [r3, #0]
#endif

#endif
    ret = (*sobj != NULL);
 800a0aa:	683b      	ldr	r3, [r7, #0]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	bf14      	ite	ne
 800a0b2:	2301      	movne	r3, #1
 800a0b4:	2300      	moveq	r3, #0
 800a0b6:	b2db      	uxtb	r3, r3
 800a0b8:	60fb      	str	r3, [r7, #12]

    return ret;
 800a0ba:	68fb      	ldr	r3, [r7, #12]
}
 800a0bc:	4618      	mov	r0, r3
 800a0be:	3710      	adds	r7, #16
 800a0c0:	46bd      	mov	sp, r7
 800a0c2:	bd80      	pop	{r7, pc}

0800a0c4 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 800a0c4:	b580      	push	{r7, lr}
 800a0c6:	b082      	sub	sp, #8
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 800a0cc:	6878      	ldr	r0, [r7, #4]
 800a0ce:	f000 fa9f 	bl	800a610 <osSemaphoreDelete>
#endif
    return 1;
 800a0d2:	2301      	movs	r3, #1
}
 800a0d4:	4618      	mov	r0, r3
 800a0d6:	3708      	adds	r7, #8
 800a0d8:	46bd      	mov	sp, r7
 800a0da:	bd80      	pop	{r7, pc}

0800a0dc <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 800a0dc:	b580      	push	{r7, lr}
 800a0de:	b084      	sub	sp, #16
 800a0e0:	af00      	add	r7, sp, #0
 800a0e2:	6078      	str	r0, [r7, #4]
  int ret = 0;
 800a0e4:	2300      	movs	r3, #0
 800a0e6:	60fb      	str	r3, [r7, #12]
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 800a0e8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800a0ec:	6878      	ldr	r0, [r7, #4]
 800a0ee:	f000 f9d9 	bl	800a4a4 <osSemaphoreAcquire>
 800a0f2:	4603      	mov	r3, r0
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d101      	bne.n	800a0fc <ff_req_grant+0x20>
#endif

#endif
  {
    ret = 1;
 800a0f8:	2301      	movs	r3, #1
 800a0fa:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800a0fc:	68fb      	ldr	r3, [r7, #12]
}
 800a0fe:	4618      	mov	r0, r3
 800a100:	3710      	adds	r7, #16
 800a102:	46bd      	mov	sp, r7
 800a104:	bd80      	pop	{r7, pc}

0800a106 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 800a106:	b580      	push	{r7, lr}
 800a108:	b082      	sub	sp, #8
 800a10a:	af00      	add	r7, sp, #0
 800a10c:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 800a10e:	6878      	ldr	r0, [r7, #4]
 800a110:	f000 fa1a 	bl	800a548 <osSemaphoreRelease>
#endif
}
 800a114:	bf00      	nop
 800a116:	3708      	adds	r7, #8
 800a118:	46bd      	mov	sp, r7
 800a11a:	bd80      	pop	{r7, pc}

0800a11c <__NVIC_SetPriority>:
{
 800a11c:	b480      	push	{r7}
 800a11e:	b083      	sub	sp, #12
 800a120:	af00      	add	r7, sp, #0
 800a122:	4603      	mov	r3, r0
 800a124:	6039      	str	r1, [r7, #0]
 800a126:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a128:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	db0a      	blt.n	800a146 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a130:	683b      	ldr	r3, [r7, #0]
 800a132:	b2da      	uxtb	r2, r3
 800a134:	490c      	ldr	r1, [pc, #48]	@ (800a168 <__NVIC_SetPriority+0x4c>)
 800a136:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a13a:	0112      	lsls	r2, r2, #4
 800a13c:	b2d2      	uxtb	r2, r2
 800a13e:	440b      	add	r3, r1
 800a140:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800a144:	e00a      	b.n	800a15c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a146:	683b      	ldr	r3, [r7, #0]
 800a148:	b2da      	uxtb	r2, r3
 800a14a:	4908      	ldr	r1, [pc, #32]	@ (800a16c <__NVIC_SetPriority+0x50>)
 800a14c:	79fb      	ldrb	r3, [r7, #7]
 800a14e:	f003 030f 	and.w	r3, r3, #15
 800a152:	3b04      	subs	r3, #4
 800a154:	0112      	lsls	r2, r2, #4
 800a156:	b2d2      	uxtb	r2, r2
 800a158:	440b      	add	r3, r1
 800a15a:	761a      	strb	r2, [r3, #24]
}
 800a15c:	bf00      	nop
 800a15e:	370c      	adds	r7, #12
 800a160:	46bd      	mov	sp, r7
 800a162:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a166:	4770      	bx	lr
 800a168:	e000e100 	.word	0xe000e100
 800a16c:	e000ed00 	.word	0xe000ed00

0800a170 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800a170:	b580      	push	{r7, lr}
 800a172:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800a174:	4b05      	ldr	r3, [pc, #20]	@ (800a18c <SysTick_Handler+0x1c>)
 800a176:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800a178:	f002 fb4a 	bl	800c810 <xTaskGetSchedulerState>
 800a17c:	4603      	mov	r3, r0
 800a17e:	2b01      	cmp	r3, #1
 800a180:	d001      	beq.n	800a186 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800a182:	f003 fa41 	bl	800d608 <xPortSysTickHandler>
  }
}
 800a186:	bf00      	nop
 800a188:	bd80      	pop	{r7, pc}
 800a18a:	bf00      	nop
 800a18c:	e000e010 	.word	0xe000e010

0800a190 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800a190:	b580      	push	{r7, lr}
 800a192:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800a194:	2100      	movs	r1, #0
 800a196:	f06f 0004 	mvn.w	r0, #4
 800a19a:	f7ff ffbf 	bl	800a11c <__NVIC_SetPriority>
#endif
}
 800a19e:	bf00      	nop
 800a1a0:	bd80      	pop	{r7, pc}
	...

0800a1a4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800a1a4:	b480      	push	{r7}
 800a1a6:	b083      	sub	sp, #12
 800a1a8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a1aa:	f3ef 8305 	mrs	r3, IPSR
 800a1ae:	603b      	str	r3, [r7, #0]
  return(result);
 800a1b0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d003      	beq.n	800a1be <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800a1b6:	f06f 0305 	mvn.w	r3, #5
 800a1ba:	607b      	str	r3, [r7, #4]
 800a1bc:	e00c      	b.n	800a1d8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800a1be:	4b0a      	ldr	r3, [pc, #40]	@ (800a1e8 <osKernelInitialize+0x44>)
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d105      	bne.n	800a1d2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800a1c6:	4b08      	ldr	r3, [pc, #32]	@ (800a1e8 <osKernelInitialize+0x44>)
 800a1c8:	2201      	movs	r2, #1
 800a1ca:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a1cc:	2300      	movs	r3, #0
 800a1ce:	607b      	str	r3, [r7, #4]
 800a1d0:	e002      	b.n	800a1d8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800a1d2:	f04f 33ff 	mov.w	r3, #4294967295
 800a1d6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a1d8:	687b      	ldr	r3, [r7, #4]
}
 800a1da:	4618      	mov	r0, r3
 800a1dc:	370c      	adds	r7, #12
 800a1de:	46bd      	mov	sp, r7
 800a1e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e4:	4770      	bx	lr
 800a1e6:	bf00      	nop
 800a1e8:	20000a68 	.word	0x20000a68

0800a1ec <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800a1ec:	b580      	push	{r7, lr}
 800a1ee:	b082      	sub	sp, #8
 800a1f0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a1f2:	f3ef 8305 	mrs	r3, IPSR
 800a1f6:	603b      	str	r3, [r7, #0]
  return(result);
 800a1f8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d003      	beq.n	800a206 <osKernelStart+0x1a>
    stat = osErrorISR;
 800a1fe:	f06f 0305 	mvn.w	r3, #5
 800a202:	607b      	str	r3, [r7, #4]
 800a204:	e010      	b.n	800a228 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800a206:	4b0b      	ldr	r3, [pc, #44]	@ (800a234 <osKernelStart+0x48>)
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	2b01      	cmp	r3, #1
 800a20c:	d109      	bne.n	800a222 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800a20e:	f7ff ffbf 	bl	800a190 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800a212:	4b08      	ldr	r3, [pc, #32]	@ (800a234 <osKernelStart+0x48>)
 800a214:	2202      	movs	r2, #2
 800a216:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800a218:	f001 fe96 	bl	800bf48 <vTaskStartScheduler>
      stat = osOK;
 800a21c:	2300      	movs	r3, #0
 800a21e:	607b      	str	r3, [r7, #4]
 800a220:	e002      	b.n	800a228 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800a222:	f04f 33ff 	mov.w	r3, #4294967295
 800a226:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a228:	687b      	ldr	r3, [r7, #4]
}
 800a22a:	4618      	mov	r0, r3
 800a22c:	3708      	adds	r7, #8
 800a22e:	46bd      	mov	sp, r7
 800a230:	bd80      	pop	{r7, pc}
 800a232:	bf00      	nop
 800a234:	20000a68 	.word	0x20000a68

0800a238 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a238:	b580      	push	{r7, lr}
 800a23a:	b08e      	sub	sp, #56	@ 0x38
 800a23c:	af04      	add	r7, sp, #16
 800a23e:	60f8      	str	r0, [r7, #12]
 800a240:	60b9      	str	r1, [r7, #8]
 800a242:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800a244:	2300      	movs	r3, #0
 800a246:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a248:	f3ef 8305 	mrs	r3, IPSR
 800a24c:	617b      	str	r3, [r7, #20]
  return(result);
 800a24e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800a250:	2b00      	cmp	r3, #0
 800a252:	d17e      	bne.n	800a352 <osThreadNew+0x11a>
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	2b00      	cmp	r3, #0
 800a258:	d07b      	beq.n	800a352 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800a25a:	2380      	movs	r3, #128	@ 0x80
 800a25c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800a25e:	2318      	movs	r3, #24
 800a260:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800a262:	2300      	movs	r3, #0
 800a264:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800a266:	f04f 33ff 	mov.w	r3, #4294967295
 800a26a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d045      	beq.n	800a2fe <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	2b00      	cmp	r3, #0
 800a278:	d002      	beq.n	800a280 <osThreadNew+0x48>
        name = attr->name;
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	699b      	ldr	r3, [r3, #24]
 800a284:	2b00      	cmp	r3, #0
 800a286:	d002      	beq.n	800a28e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	699b      	ldr	r3, [r3, #24]
 800a28c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800a28e:	69fb      	ldr	r3, [r7, #28]
 800a290:	2b00      	cmp	r3, #0
 800a292:	d008      	beq.n	800a2a6 <osThreadNew+0x6e>
 800a294:	69fb      	ldr	r3, [r7, #28]
 800a296:	2b38      	cmp	r3, #56	@ 0x38
 800a298:	d805      	bhi.n	800a2a6 <osThreadNew+0x6e>
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	685b      	ldr	r3, [r3, #4]
 800a29e:	f003 0301 	and.w	r3, r3, #1
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d001      	beq.n	800a2aa <osThreadNew+0x72>
        return (NULL);
 800a2a6:	2300      	movs	r3, #0
 800a2a8:	e054      	b.n	800a354 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	695b      	ldr	r3, [r3, #20]
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d003      	beq.n	800a2ba <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	695b      	ldr	r3, [r3, #20]
 800a2b6:	089b      	lsrs	r3, r3, #2
 800a2b8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	689b      	ldr	r3, [r3, #8]
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d00e      	beq.n	800a2e0 <osThreadNew+0xa8>
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	68db      	ldr	r3, [r3, #12]
 800a2c6:	2ba7      	cmp	r3, #167	@ 0xa7
 800a2c8:	d90a      	bls.n	800a2e0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d006      	beq.n	800a2e0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	695b      	ldr	r3, [r3, #20]
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d002      	beq.n	800a2e0 <osThreadNew+0xa8>
        mem = 1;
 800a2da:	2301      	movs	r3, #1
 800a2dc:	61bb      	str	r3, [r7, #24]
 800a2de:	e010      	b.n	800a302 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	689b      	ldr	r3, [r3, #8]
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d10c      	bne.n	800a302 <osThreadNew+0xca>
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	68db      	ldr	r3, [r3, #12]
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d108      	bne.n	800a302 <osThreadNew+0xca>
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	691b      	ldr	r3, [r3, #16]
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d104      	bne.n	800a302 <osThreadNew+0xca>
          mem = 0;
 800a2f8:	2300      	movs	r3, #0
 800a2fa:	61bb      	str	r3, [r7, #24]
 800a2fc:	e001      	b.n	800a302 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800a2fe:	2300      	movs	r3, #0
 800a300:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a302:	69bb      	ldr	r3, [r7, #24]
 800a304:	2b01      	cmp	r3, #1
 800a306:	d110      	bne.n	800a32a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800a30c:	687a      	ldr	r2, [r7, #4]
 800a30e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a310:	9202      	str	r2, [sp, #8]
 800a312:	9301      	str	r3, [sp, #4]
 800a314:	69fb      	ldr	r3, [r7, #28]
 800a316:	9300      	str	r3, [sp, #0]
 800a318:	68bb      	ldr	r3, [r7, #8]
 800a31a:	6a3a      	ldr	r2, [r7, #32]
 800a31c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a31e:	68f8      	ldr	r0, [r7, #12]
 800a320:	f001 fc1e 	bl	800bb60 <xTaskCreateStatic>
 800a324:	4603      	mov	r3, r0
 800a326:	613b      	str	r3, [r7, #16]
 800a328:	e013      	b.n	800a352 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800a32a:	69bb      	ldr	r3, [r7, #24]
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d110      	bne.n	800a352 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800a330:	6a3b      	ldr	r3, [r7, #32]
 800a332:	b29a      	uxth	r2, r3
 800a334:	f107 0310 	add.w	r3, r7, #16
 800a338:	9301      	str	r3, [sp, #4]
 800a33a:	69fb      	ldr	r3, [r7, #28]
 800a33c:	9300      	str	r3, [sp, #0]
 800a33e:	68bb      	ldr	r3, [r7, #8]
 800a340:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a342:	68f8      	ldr	r0, [r7, #12]
 800a344:	f001 fc6c 	bl	800bc20 <xTaskCreate>
 800a348:	4603      	mov	r3, r0
 800a34a:	2b01      	cmp	r3, #1
 800a34c:	d001      	beq.n	800a352 <osThreadNew+0x11a>
            hTask = NULL;
 800a34e:	2300      	movs	r3, #0
 800a350:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800a352:	693b      	ldr	r3, [r7, #16]
}
 800a354:	4618      	mov	r0, r3
 800a356:	3728      	adds	r7, #40	@ 0x28
 800a358:	46bd      	mov	sp, r7
 800a35a:	bd80      	pop	{r7, pc}

0800a35c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800a35c:	b580      	push	{r7, lr}
 800a35e:	b084      	sub	sp, #16
 800a360:	af00      	add	r7, sp, #0
 800a362:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a364:	f3ef 8305 	mrs	r3, IPSR
 800a368:	60bb      	str	r3, [r7, #8]
  return(result);
 800a36a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d003      	beq.n	800a378 <osDelay+0x1c>
    stat = osErrorISR;
 800a370:	f06f 0305 	mvn.w	r3, #5
 800a374:	60fb      	str	r3, [r7, #12]
 800a376:	e007      	b.n	800a388 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800a378:	2300      	movs	r3, #0
 800a37a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d002      	beq.n	800a388 <osDelay+0x2c>
      vTaskDelay(ticks);
 800a382:	6878      	ldr	r0, [r7, #4]
 800a384:	f001 fdaa 	bl	800bedc <vTaskDelay>
    }
  }

  return (stat);
 800a388:	68fb      	ldr	r3, [r7, #12]
}
 800a38a:	4618      	mov	r0, r3
 800a38c:	3710      	adds	r7, #16
 800a38e:	46bd      	mov	sp, r7
 800a390:	bd80      	pop	{r7, pc}

0800a392 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800a392:	b580      	push	{r7, lr}
 800a394:	b08a      	sub	sp, #40	@ 0x28
 800a396:	af02      	add	r7, sp, #8
 800a398:	60f8      	str	r0, [r7, #12]
 800a39a:	60b9      	str	r1, [r7, #8]
 800a39c:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800a39e:	2300      	movs	r3, #0
 800a3a0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a3a2:	f3ef 8305 	mrs	r3, IPSR
 800a3a6:	613b      	str	r3, [r7, #16]
  return(result);
 800a3a8:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d175      	bne.n	800a49a <osSemaphoreNew+0x108>
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d072      	beq.n	800a49a <osSemaphoreNew+0x108>
 800a3b4:	68ba      	ldr	r2, [r7, #8]
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	429a      	cmp	r2, r3
 800a3ba:	d86e      	bhi.n	800a49a <osSemaphoreNew+0x108>
    mem = -1;
 800a3bc:	f04f 33ff 	mov.w	r3, #4294967295
 800a3c0:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d015      	beq.n	800a3f4 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	689b      	ldr	r3, [r3, #8]
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d006      	beq.n	800a3de <osSemaphoreNew+0x4c>
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	68db      	ldr	r3, [r3, #12]
 800a3d4:	2b4f      	cmp	r3, #79	@ 0x4f
 800a3d6:	d902      	bls.n	800a3de <osSemaphoreNew+0x4c>
        mem = 1;
 800a3d8:	2301      	movs	r3, #1
 800a3da:	61bb      	str	r3, [r7, #24]
 800a3dc:	e00c      	b.n	800a3f8 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	689b      	ldr	r3, [r3, #8]
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d108      	bne.n	800a3f8 <osSemaphoreNew+0x66>
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	68db      	ldr	r3, [r3, #12]
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d104      	bne.n	800a3f8 <osSemaphoreNew+0x66>
          mem = 0;
 800a3ee:	2300      	movs	r3, #0
 800a3f0:	61bb      	str	r3, [r7, #24]
 800a3f2:	e001      	b.n	800a3f8 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800a3f4:	2300      	movs	r3, #0
 800a3f6:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800a3f8:	69bb      	ldr	r3, [r7, #24]
 800a3fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3fe:	d04c      	beq.n	800a49a <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	2b01      	cmp	r3, #1
 800a404:	d128      	bne.n	800a458 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800a406:	69bb      	ldr	r3, [r7, #24]
 800a408:	2b01      	cmp	r3, #1
 800a40a:	d10a      	bne.n	800a422 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	689b      	ldr	r3, [r3, #8]
 800a410:	2203      	movs	r2, #3
 800a412:	9200      	str	r2, [sp, #0]
 800a414:	2200      	movs	r2, #0
 800a416:	2100      	movs	r1, #0
 800a418:	2001      	movs	r0, #1
 800a41a:	f000 fba1 	bl	800ab60 <xQueueGenericCreateStatic>
 800a41e:	61f8      	str	r0, [r7, #28]
 800a420:	e005      	b.n	800a42e <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800a422:	2203      	movs	r2, #3
 800a424:	2100      	movs	r1, #0
 800a426:	2001      	movs	r0, #1
 800a428:	f000 fc17 	bl	800ac5a <xQueueGenericCreate>
 800a42c:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800a42e:	69fb      	ldr	r3, [r7, #28]
 800a430:	2b00      	cmp	r3, #0
 800a432:	d022      	beq.n	800a47a <osSemaphoreNew+0xe8>
 800a434:	68bb      	ldr	r3, [r7, #8]
 800a436:	2b00      	cmp	r3, #0
 800a438:	d01f      	beq.n	800a47a <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800a43a:	2300      	movs	r3, #0
 800a43c:	2200      	movs	r2, #0
 800a43e:	2100      	movs	r1, #0
 800a440:	69f8      	ldr	r0, [r7, #28]
 800a442:	f000 fcd7 	bl	800adf4 <xQueueGenericSend>
 800a446:	4603      	mov	r3, r0
 800a448:	2b01      	cmp	r3, #1
 800a44a:	d016      	beq.n	800a47a <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800a44c:	69f8      	ldr	r0, [r7, #28]
 800a44e:	f001 f9b3 	bl	800b7b8 <vQueueDelete>
            hSemaphore = NULL;
 800a452:	2300      	movs	r3, #0
 800a454:	61fb      	str	r3, [r7, #28]
 800a456:	e010      	b.n	800a47a <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800a458:	69bb      	ldr	r3, [r7, #24]
 800a45a:	2b01      	cmp	r3, #1
 800a45c:	d108      	bne.n	800a470 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	689b      	ldr	r3, [r3, #8]
 800a462:	461a      	mov	r2, r3
 800a464:	68b9      	ldr	r1, [r7, #8]
 800a466:	68f8      	ldr	r0, [r7, #12]
 800a468:	f000 fc55 	bl	800ad16 <xQueueCreateCountingSemaphoreStatic>
 800a46c:	61f8      	str	r0, [r7, #28]
 800a46e:	e004      	b.n	800a47a <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800a470:	68b9      	ldr	r1, [r7, #8]
 800a472:	68f8      	ldr	r0, [r7, #12]
 800a474:	f000 fc88 	bl	800ad88 <xQueueCreateCountingSemaphore>
 800a478:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800a47a:	69fb      	ldr	r3, [r7, #28]
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d00c      	beq.n	800a49a <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	2b00      	cmp	r3, #0
 800a484:	d003      	beq.n	800a48e <osSemaphoreNew+0xfc>
          name = attr->name;
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	617b      	str	r3, [r7, #20]
 800a48c:	e001      	b.n	800a492 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800a48e:	2300      	movs	r3, #0
 800a490:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800a492:	6979      	ldr	r1, [r7, #20]
 800a494:	69f8      	ldr	r0, [r7, #28]
 800a496:	f001 fadb 	bl	800ba50 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800a49a:	69fb      	ldr	r3, [r7, #28]
}
 800a49c:	4618      	mov	r0, r3
 800a49e:	3720      	adds	r7, #32
 800a4a0:	46bd      	mov	sp, r7
 800a4a2:	bd80      	pop	{r7, pc}

0800a4a4 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800a4a4:	b580      	push	{r7, lr}
 800a4a6:	b086      	sub	sp, #24
 800a4a8:	af00      	add	r7, sp, #0
 800a4aa:	6078      	str	r0, [r7, #4]
 800a4ac:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800a4b2:	2300      	movs	r3, #0
 800a4b4:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800a4b6:	693b      	ldr	r3, [r7, #16]
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d103      	bne.n	800a4c4 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800a4bc:	f06f 0303 	mvn.w	r3, #3
 800a4c0:	617b      	str	r3, [r7, #20]
 800a4c2:	e039      	b.n	800a538 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a4c4:	f3ef 8305 	mrs	r3, IPSR
 800a4c8:	60fb      	str	r3, [r7, #12]
  return(result);
 800a4ca:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d022      	beq.n	800a516 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800a4d0:	683b      	ldr	r3, [r7, #0]
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d003      	beq.n	800a4de <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800a4d6:	f06f 0303 	mvn.w	r3, #3
 800a4da:	617b      	str	r3, [r7, #20]
 800a4dc:	e02c      	b.n	800a538 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800a4de:	2300      	movs	r3, #0
 800a4e0:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800a4e2:	f107 0308 	add.w	r3, r7, #8
 800a4e6:	461a      	mov	r2, r3
 800a4e8:	2100      	movs	r1, #0
 800a4ea:	6938      	ldr	r0, [r7, #16]
 800a4ec:	f001 f8a4 	bl	800b638 <xQueueReceiveFromISR>
 800a4f0:	4603      	mov	r3, r0
 800a4f2:	2b01      	cmp	r3, #1
 800a4f4:	d003      	beq.n	800a4fe <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800a4f6:	f06f 0302 	mvn.w	r3, #2
 800a4fa:	617b      	str	r3, [r7, #20]
 800a4fc:	e01c      	b.n	800a538 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800a4fe:	68bb      	ldr	r3, [r7, #8]
 800a500:	2b00      	cmp	r3, #0
 800a502:	d019      	beq.n	800a538 <osSemaphoreAcquire+0x94>
 800a504:	4b0f      	ldr	r3, [pc, #60]	@ (800a544 <osSemaphoreAcquire+0xa0>)
 800a506:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a50a:	601a      	str	r2, [r3, #0]
 800a50c:	f3bf 8f4f 	dsb	sy
 800a510:	f3bf 8f6f 	isb	sy
 800a514:	e010      	b.n	800a538 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800a516:	6839      	ldr	r1, [r7, #0]
 800a518:	6938      	ldr	r0, [r7, #16]
 800a51a:	f000 ff7d 	bl	800b418 <xQueueSemaphoreTake>
 800a51e:	4603      	mov	r3, r0
 800a520:	2b01      	cmp	r3, #1
 800a522:	d009      	beq.n	800a538 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800a524:	683b      	ldr	r3, [r7, #0]
 800a526:	2b00      	cmp	r3, #0
 800a528:	d003      	beq.n	800a532 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800a52a:	f06f 0301 	mvn.w	r3, #1
 800a52e:	617b      	str	r3, [r7, #20]
 800a530:	e002      	b.n	800a538 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800a532:	f06f 0302 	mvn.w	r3, #2
 800a536:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800a538:	697b      	ldr	r3, [r7, #20]
}
 800a53a:	4618      	mov	r0, r3
 800a53c:	3718      	adds	r7, #24
 800a53e:	46bd      	mov	sp, r7
 800a540:	bd80      	pop	{r7, pc}
 800a542:	bf00      	nop
 800a544:	e000ed04 	.word	0xe000ed04

0800a548 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800a548:	b580      	push	{r7, lr}
 800a54a:	b086      	sub	sp, #24
 800a54c:	af00      	add	r7, sp, #0
 800a54e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800a554:	2300      	movs	r3, #0
 800a556:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800a558:	693b      	ldr	r3, [r7, #16]
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d103      	bne.n	800a566 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800a55e:	f06f 0303 	mvn.w	r3, #3
 800a562:	617b      	str	r3, [r7, #20]
 800a564:	e02c      	b.n	800a5c0 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a566:	f3ef 8305 	mrs	r3, IPSR
 800a56a:	60fb      	str	r3, [r7, #12]
  return(result);
 800a56c:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d01a      	beq.n	800a5a8 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800a572:	2300      	movs	r3, #0
 800a574:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800a576:	f107 0308 	add.w	r3, r7, #8
 800a57a:	4619      	mov	r1, r3
 800a57c:	6938      	ldr	r0, [r7, #16]
 800a57e:	f000 fdd9 	bl	800b134 <xQueueGiveFromISR>
 800a582:	4603      	mov	r3, r0
 800a584:	2b01      	cmp	r3, #1
 800a586:	d003      	beq.n	800a590 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800a588:	f06f 0302 	mvn.w	r3, #2
 800a58c:	617b      	str	r3, [r7, #20]
 800a58e:	e017      	b.n	800a5c0 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800a590:	68bb      	ldr	r3, [r7, #8]
 800a592:	2b00      	cmp	r3, #0
 800a594:	d014      	beq.n	800a5c0 <osSemaphoreRelease+0x78>
 800a596:	4b0d      	ldr	r3, [pc, #52]	@ (800a5cc <osSemaphoreRelease+0x84>)
 800a598:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a59c:	601a      	str	r2, [r3, #0]
 800a59e:	f3bf 8f4f 	dsb	sy
 800a5a2:	f3bf 8f6f 	isb	sy
 800a5a6:	e00b      	b.n	800a5c0 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800a5a8:	2300      	movs	r3, #0
 800a5aa:	2200      	movs	r2, #0
 800a5ac:	2100      	movs	r1, #0
 800a5ae:	6938      	ldr	r0, [r7, #16]
 800a5b0:	f000 fc20 	bl	800adf4 <xQueueGenericSend>
 800a5b4:	4603      	mov	r3, r0
 800a5b6:	2b01      	cmp	r3, #1
 800a5b8:	d002      	beq.n	800a5c0 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800a5ba:	f06f 0302 	mvn.w	r3, #2
 800a5be:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800a5c0:	697b      	ldr	r3, [r7, #20]
}
 800a5c2:	4618      	mov	r0, r3
 800a5c4:	3718      	adds	r7, #24
 800a5c6:	46bd      	mov	sp, r7
 800a5c8:	bd80      	pop	{r7, pc}
 800a5ca:	bf00      	nop
 800a5cc:	e000ed04 	.word	0xe000ed04

0800a5d0 <osSemaphoreGetCount>:

uint32_t osSemaphoreGetCount (osSemaphoreId_t semaphore_id) {
 800a5d0:	b580      	push	{r7, lr}
 800a5d2:	b086      	sub	sp, #24
 800a5d4:	af00      	add	r7, sp, #0
 800a5d6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	613b      	str	r3, [r7, #16]
  uint32_t count;

  if (hSemaphore == NULL) {
 800a5dc:	693b      	ldr	r3, [r7, #16]
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d102      	bne.n	800a5e8 <osSemaphoreGetCount+0x18>
    count = 0U;
 800a5e2:	2300      	movs	r3, #0
 800a5e4:	617b      	str	r3, [r7, #20]
 800a5e6:	e00e      	b.n	800a606 <osSemaphoreGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a5e8:	f3ef 8305 	mrs	r3, IPSR
 800a5ec:	60fb      	str	r3, [r7, #12]
  return(result);
 800a5ee:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d004      	beq.n	800a5fe <osSemaphoreGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hSemaphore);
 800a5f4:	6938      	ldr	r0, [r7, #16]
 800a5f6:	f001 f8c0 	bl	800b77a <uxQueueMessagesWaitingFromISR>
 800a5fa:	6178      	str	r0, [r7, #20]
 800a5fc:	e003      	b.n	800a606 <osSemaphoreGetCount+0x36>
  } else {
    count = (uint32_t)uxSemaphoreGetCount (hSemaphore);
 800a5fe:	6938      	ldr	r0, [r7, #16]
 800a600:	f001 f89c 	bl	800b73c <uxQueueMessagesWaiting>
 800a604:	6178      	str	r0, [r7, #20]
  }

  return (count);
 800a606:	697b      	ldr	r3, [r7, #20]
}
 800a608:	4618      	mov	r0, r3
 800a60a:	3718      	adds	r7, #24
 800a60c:	46bd      	mov	sp, r7
 800a60e:	bd80      	pop	{r7, pc}

0800a610 <osSemaphoreDelete>:

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 800a610:	b580      	push	{r7, lr}
 800a612:	b086      	sub	sp, #24
 800a614:	af00      	add	r7, sp, #0
 800a616:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a61c:	f3ef 8305 	mrs	r3, IPSR
 800a620:	60fb      	str	r3, [r7, #12]
  return(result);
 800a622:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 800a624:	2b00      	cmp	r3, #0
 800a626:	d003      	beq.n	800a630 <osSemaphoreDelete+0x20>
    stat = osErrorISR;
 800a628:	f06f 0305 	mvn.w	r3, #5
 800a62c:	617b      	str	r3, [r7, #20]
 800a62e:	e00e      	b.n	800a64e <osSemaphoreDelete+0x3e>
  }
  else if (hSemaphore == NULL) {
 800a630:	693b      	ldr	r3, [r7, #16]
 800a632:	2b00      	cmp	r3, #0
 800a634:	d103      	bne.n	800a63e <osSemaphoreDelete+0x2e>
    stat = osErrorParameter;
 800a636:	f06f 0303 	mvn.w	r3, #3
 800a63a:	617b      	str	r3, [r7, #20]
 800a63c:	e007      	b.n	800a64e <osSemaphoreDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 800a63e:	6938      	ldr	r0, [r7, #16]
 800a640:	f001 fa30 	bl	800baa4 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 800a644:	2300      	movs	r3, #0
 800a646:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hSemaphore);
 800a648:	6938      	ldr	r0, [r7, #16]
 800a64a:	f001 f8b5 	bl	800b7b8 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 800a64e:	697b      	ldr	r3, [r7, #20]
}
 800a650:	4618      	mov	r0, r3
 800a652:	3718      	adds	r7, #24
 800a654:	46bd      	mov	sp, r7
 800a656:	bd80      	pop	{r7, pc}

0800a658 <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800a658:	b580      	push	{r7, lr}
 800a65a:	b08a      	sub	sp, #40	@ 0x28
 800a65c:	af02      	add	r7, sp, #8
 800a65e:	60f8      	str	r0, [r7, #12]
 800a660:	60b9      	str	r1, [r7, #8]
 800a662:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800a664:	2300      	movs	r3, #0
 800a666:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a668:	f3ef 8305 	mrs	r3, IPSR
 800a66c:	613b      	str	r3, [r7, #16]
  return(result);
 800a66e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800a670:	2b00      	cmp	r3, #0
 800a672:	d15f      	bne.n	800a734 <osMessageQueueNew+0xdc>
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	2b00      	cmp	r3, #0
 800a678:	d05c      	beq.n	800a734 <osMessageQueueNew+0xdc>
 800a67a:	68bb      	ldr	r3, [r7, #8]
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d059      	beq.n	800a734 <osMessageQueueNew+0xdc>
    mem = -1;
 800a680:	f04f 33ff 	mov.w	r3, #4294967295
 800a684:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d029      	beq.n	800a6e0 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	689b      	ldr	r3, [r3, #8]
 800a690:	2b00      	cmp	r3, #0
 800a692:	d012      	beq.n	800a6ba <osMessageQueueNew+0x62>
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	68db      	ldr	r3, [r3, #12]
 800a698:	2b4f      	cmp	r3, #79	@ 0x4f
 800a69a:	d90e      	bls.n	800a6ba <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d00a      	beq.n	800a6ba <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	695a      	ldr	r2, [r3, #20]
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	68b9      	ldr	r1, [r7, #8]
 800a6ac:	fb01 f303 	mul.w	r3, r1, r3
 800a6b0:	429a      	cmp	r2, r3
 800a6b2:	d302      	bcc.n	800a6ba <osMessageQueueNew+0x62>
        mem = 1;
 800a6b4:	2301      	movs	r3, #1
 800a6b6:	61bb      	str	r3, [r7, #24]
 800a6b8:	e014      	b.n	800a6e4 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	689b      	ldr	r3, [r3, #8]
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d110      	bne.n	800a6e4 <osMessageQueueNew+0x8c>
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	68db      	ldr	r3, [r3, #12]
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d10c      	bne.n	800a6e4 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d108      	bne.n	800a6e4 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	695b      	ldr	r3, [r3, #20]
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d104      	bne.n	800a6e4 <osMessageQueueNew+0x8c>
          mem = 0;
 800a6da:	2300      	movs	r3, #0
 800a6dc:	61bb      	str	r3, [r7, #24]
 800a6de:	e001      	b.n	800a6e4 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800a6e0:	2300      	movs	r3, #0
 800a6e2:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a6e4:	69bb      	ldr	r3, [r7, #24]
 800a6e6:	2b01      	cmp	r3, #1
 800a6e8:	d10b      	bne.n	800a702 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	691a      	ldr	r2, [r3, #16]
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	689b      	ldr	r3, [r3, #8]
 800a6f2:	2100      	movs	r1, #0
 800a6f4:	9100      	str	r1, [sp, #0]
 800a6f6:	68b9      	ldr	r1, [r7, #8]
 800a6f8:	68f8      	ldr	r0, [r7, #12]
 800a6fa:	f000 fa31 	bl	800ab60 <xQueueGenericCreateStatic>
 800a6fe:	61f8      	str	r0, [r7, #28]
 800a700:	e008      	b.n	800a714 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800a702:	69bb      	ldr	r3, [r7, #24]
 800a704:	2b00      	cmp	r3, #0
 800a706:	d105      	bne.n	800a714 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800a708:	2200      	movs	r2, #0
 800a70a:	68b9      	ldr	r1, [r7, #8]
 800a70c:	68f8      	ldr	r0, [r7, #12]
 800a70e:	f000 faa4 	bl	800ac5a <xQueueGenericCreate>
 800a712:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800a714:	69fb      	ldr	r3, [r7, #28]
 800a716:	2b00      	cmp	r3, #0
 800a718:	d00c      	beq.n	800a734 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d003      	beq.n	800a728 <osMessageQueueNew+0xd0>
        name = attr->name;
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	617b      	str	r3, [r7, #20]
 800a726:	e001      	b.n	800a72c <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800a728:	2300      	movs	r3, #0
 800a72a:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800a72c:	6979      	ldr	r1, [r7, #20]
 800a72e:	69f8      	ldr	r0, [r7, #28]
 800a730:	f001 f98e 	bl	800ba50 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800a734:	69fb      	ldr	r3, [r7, #28]
}
 800a736:	4618      	mov	r0, r3
 800a738:	3720      	adds	r7, #32
 800a73a:	46bd      	mov	sp, r7
 800a73c:	bd80      	pop	{r7, pc}
	...

0800a740 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800a740:	b580      	push	{r7, lr}
 800a742:	b088      	sub	sp, #32
 800a744:	af00      	add	r7, sp, #0
 800a746:	60f8      	str	r0, [r7, #12]
 800a748:	60b9      	str	r1, [r7, #8]
 800a74a:	603b      	str	r3, [r7, #0]
 800a74c:	4613      	mov	r3, r2
 800a74e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800a754:	2300      	movs	r3, #0
 800a756:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a758:	f3ef 8305 	mrs	r3, IPSR
 800a75c:	617b      	str	r3, [r7, #20]
  return(result);
 800a75e:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800a760:	2b00      	cmp	r3, #0
 800a762:	d028      	beq.n	800a7b6 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a764:	69bb      	ldr	r3, [r7, #24]
 800a766:	2b00      	cmp	r3, #0
 800a768:	d005      	beq.n	800a776 <osMessageQueuePut+0x36>
 800a76a:	68bb      	ldr	r3, [r7, #8]
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d002      	beq.n	800a776 <osMessageQueuePut+0x36>
 800a770:	683b      	ldr	r3, [r7, #0]
 800a772:	2b00      	cmp	r3, #0
 800a774:	d003      	beq.n	800a77e <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800a776:	f06f 0303 	mvn.w	r3, #3
 800a77a:	61fb      	str	r3, [r7, #28]
 800a77c:	e038      	b.n	800a7f0 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800a77e:	2300      	movs	r3, #0
 800a780:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800a782:	f107 0210 	add.w	r2, r7, #16
 800a786:	2300      	movs	r3, #0
 800a788:	68b9      	ldr	r1, [r7, #8]
 800a78a:	69b8      	ldr	r0, [r7, #24]
 800a78c:	f000 fc34 	bl	800aff8 <xQueueGenericSendFromISR>
 800a790:	4603      	mov	r3, r0
 800a792:	2b01      	cmp	r3, #1
 800a794:	d003      	beq.n	800a79e <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800a796:	f06f 0302 	mvn.w	r3, #2
 800a79a:	61fb      	str	r3, [r7, #28]
 800a79c:	e028      	b.n	800a7f0 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800a79e:	693b      	ldr	r3, [r7, #16]
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d025      	beq.n	800a7f0 <osMessageQueuePut+0xb0>
 800a7a4:	4b15      	ldr	r3, [pc, #84]	@ (800a7fc <osMessageQueuePut+0xbc>)
 800a7a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a7aa:	601a      	str	r2, [r3, #0]
 800a7ac:	f3bf 8f4f 	dsb	sy
 800a7b0:	f3bf 8f6f 	isb	sy
 800a7b4:	e01c      	b.n	800a7f0 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800a7b6:	69bb      	ldr	r3, [r7, #24]
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d002      	beq.n	800a7c2 <osMessageQueuePut+0x82>
 800a7bc:	68bb      	ldr	r3, [r7, #8]
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d103      	bne.n	800a7ca <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800a7c2:	f06f 0303 	mvn.w	r3, #3
 800a7c6:	61fb      	str	r3, [r7, #28]
 800a7c8:	e012      	b.n	800a7f0 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800a7ca:	2300      	movs	r3, #0
 800a7cc:	683a      	ldr	r2, [r7, #0]
 800a7ce:	68b9      	ldr	r1, [r7, #8]
 800a7d0:	69b8      	ldr	r0, [r7, #24]
 800a7d2:	f000 fb0f 	bl	800adf4 <xQueueGenericSend>
 800a7d6:	4603      	mov	r3, r0
 800a7d8:	2b01      	cmp	r3, #1
 800a7da:	d009      	beq.n	800a7f0 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800a7dc:	683b      	ldr	r3, [r7, #0]
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d003      	beq.n	800a7ea <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800a7e2:	f06f 0301 	mvn.w	r3, #1
 800a7e6:	61fb      	str	r3, [r7, #28]
 800a7e8:	e002      	b.n	800a7f0 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800a7ea:	f06f 0302 	mvn.w	r3, #2
 800a7ee:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800a7f0:	69fb      	ldr	r3, [r7, #28]
}
 800a7f2:	4618      	mov	r0, r3
 800a7f4:	3720      	adds	r7, #32
 800a7f6:	46bd      	mov	sp, r7
 800a7f8:	bd80      	pop	{r7, pc}
 800a7fa:	bf00      	nop
 800a7fc:	e000ed04 	.word	0xe000ed04

0800a800 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800a800:	b580      	push	{r7, lr}
 800a802:	b088      	sub	sp, #32
 800a804:	af00      	add	r7, sp, #0
 800a806:	60f8      	str	r0, [r7, #12]
 800a808:	60b9      	str	r1, [r7, #8]
 800a80a:	607a      	str	r2, [r7, #4]
 800a80c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800a812:	2300      	movs	r3, #0
 800a814:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a816:	f3ef 8305 	mrs	r3, IPSR
 800a81a:	617b      	str	r3, [r7, #20]
  return(result);
 800a81c:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d028      	beq.n	800a874 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a822:	69bb      	ldr	r3, [r7, #24]
 800a824:	2b00      	cmp	r3, #0
 800a826:	d005      	beq.n	800a834 <osMessageQueueGet+0x34>
 800a828:	68bb      	ldr	r3, [r7, #8]
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d002      	beq.n	800a834 <osMessageQueueGet+0x34>
 800a82e:	683b      	ldr	r3, [r7, #0]
 800a830:	2b00      	cmp	r3, #0
 800a832:	d003      	beq.n	800a83c <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800a834:	f06f 0303 	mvn.w	r3, #3
 800a838:	61fb      	str	r3, [r7, #28]
 800a83a:	e037      	b.n	800a8ac <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800a83c:	2300      	movs	r3, #0
 800a83e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800a840:	f107 0310 	add.w	r3, r7, #16
 800a844:	461a      	mov	r2, r3
 800a846:	68b9      	ldr	r1, [r7, #8]
 800a848:	69b8      	ldr	r0, [r7, #24]
 800a84a:	f000 fef5 	bl	800b638 <xQueueReceiveFromISR>
 800a84e:	4603      	mov	r3, r0
 800a850:	2b01      	cmp	r3, #1
 800a852:	d003      	beq.n	800a85c <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800a854:	f06f 0302 	mvn.w	r3, #2
 800a858:	61fb      	str	r3, [r7, #28]
 800a85a:	e027      	b.n	800a8ac <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800a85c:	693b      	ldr	r3, [r7, #16]
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d024      	beq.n	800a8ac <osMessageQueueGet+0xac>
 800a862:	4b15      	ldr	r3, [pc, #84]	@ (800a8b8 <osMessageQueueGet+0xb8>)
 800a864:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a868:	601a      	str	r2, [r3, #0]
 800a86a:	f3bf 8f4f 	dsb	sy
 800a86e:	f3bf 8f6f 	isb	sy
 800a872:	e01b      	b.n	800a8ac <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800a874:	69bb      	ldr	r3, [r7, #24]
 800a876:	2b00      	cmp	r3, #0
 800a878:	d002      	beq.n	800a880 <osMessageQueueGet+0x80>
 800a87a:	68bb      	ldr	r3, [r7, #8]
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d103      	bne.n	800a888 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800a880:	f06f 0303 	mvn.w	r3, #3
 800a884:	61fb      	str	r3, [r7, #28]
 800a886:	e011      	b.n	800a8ac <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800a888:	683a      	ldr	r2, [r7, #0]
 800a88a:	68b9      	ldr	r1, [r7, #8]
 800a88c:	69b8      	ldr	r0, [r7, #24]
 800a88e:	f000 fce1 	bl	800b254 <xQueueReceive>
 800a892:	4603      	mov	r3, r0
 800a894:	2b01      	cmp	r3, #1
 800a896:	d009      	beq.n	800a8ac <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800a898:	683b      	ldr	r3, [r7, #0]
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d003      	beq.n	800a8a6 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800a89e:	f06f 0301 	mvn.w	r3, #1
 800a8a2:	61fb      	str	r3, [r7, #28]
 800a8a4:	e002      	b.n	800a8ac <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800a8a6:	f06f 0302 	mvn.w	r3, #2
 800a8aa:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800a8ac:	69fb      	ldr	r3, [r7, #28]
}
 800a8ae:	4618      	mov	r0, r3
 800a8b0:	3720      	adds	r7, #32
 800a8b2:	46bd      	mov	sp, r7
 800a8b4:	bd80      	pop	{r7, pc}
 800a8b6:	bf00      	nop
 800a8b8:	e000ed04 	.word	0xe000ed04

0800a8bc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a8bc:	b480      	push	{r7}
 800a8be:	b085      	sub	sp, #20
 800a8c0:	af00      	add	r7, sp, #0
 800a8c2:	60f8      	str	r0, [r7, #12]
 800a8c4:	60b9      	str	r1, [r7, #8]
 800a8c6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	4a07      	ldr	r2, [pc, #28]	@ (800a8e8 <vApplicationGetIdleTaskMemory+0x2c>)
 800a8cc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a8ce:	68bb      	ldr	r3, [r7, #8]
 800a8d0:	4a06      	ldr	r2, [pc, #24]	@ (800a8ec <vApplicationGetIdleTaskMemory+0x30>)
 800a8d2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	2280      	movs	r2, #128	@ 0x80
 800a8d8:	601a      	str	r2, [r3, #0]
}
 800a8da:	bf00      	nop
 800a8dc:	3714      	adds	r7, #20
 800a8de:	46bd      	mov	sp, r7
 800a8e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e4:	4770      	bx	lr
 800a8e6:	bf00      	nop
 800a8e8:	20000a6c 	.word	0x20000a6c
 800a8ec:	20000b14 	.word	0x20000b14

0800a8f0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a8f0:	b480      	push	{r7}
 800a8f2:	b085      	sub	sp, #20
 800a8f4:	af00      	add	r7, sp, #0
 800a8f6:	60f8      	str	r0, [r7, #12]
 800a8f8:	60b9      	str	r1, [r7, #8]
 800a8fa:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	4a07      	ldr	r2, [pc, #28]	@ (800a91c <vApplicationGetTimerTaskMemory+0x2c>)
 800a900:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a902:	68bb      	ldr	r3, [r7, #8]
 800a904:	4a06      	ldr	r2, [pc, #24]	@ (800a920 <vApplicationGetTimerTaskMemory+0x30>)
 800a906:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a90e:	601a      	str	r2, [r3, #0]
}
 800a910:	bf00      	nop
 800a912:	3714      	adds	r7, #20
 800a914:	46bd      	mov	sp, r7
 800a916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a91a:	4770      	bx	lr
 800a91c:	20000d14 	.word	0x20000d14
 800a920:	20000dbc 	.word	0x20000dbc

0800a924 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a924:	b480      	push	{r7}
 800a926:	b083      	sub	sp, #12
 800a928:	af00      	add	r7, sp, #0
 800a92a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	f103 0208 	add.w	r2, r3, #8
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	f04f 32ff 	mov.w	r2, #4294967295
 800a93c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	f103 0208 	add.w	r2, r3, #8
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	f103 0208 	add.w	r2, r3, #8
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	2200      	movs	r2, #0
 800a956:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a958:	bf00      	nop
 800a95a:	370c      	adds	r7, #12
 800a95c:	46bd      	mov	sp, r7
 800a95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a962:	4770      	bx	lr

0800a964 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a964:	b480      	push	{r7}
 800a966:	b083      	sub	sp, #12
 800a968:	af00      	add	r7, sp, #0
 800a96a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	2200      	movs	r2, #0
 800a970:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a972:	bf00      	nop
 800a974:	370c      	adds	r7, #12
 800a976:	46bd      	mov	sp, r7
 800a978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a97c:	4770      	bx	lr

0800a97e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a97e:	b480      	push	{r7}
 800a980:	b085      	sub	sp, #20
 800a982:	af00      	add	r7, sp, #0
 800a984:	6078      	str	r0, [r7, #4]
 800a986:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	685b      	ldr	r3, [r3, #4]
 800a98c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a98e:	683b      	ldr	r3, [r7, #0]
 800a990:	68fa      	ldr	r2, [r7, #12]
 800a992:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	689a      	ldr	r2, [r3, #8]
 800a998:	683b      	ldr	r3, [r7, #0]
 800a99a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	689b      	ldr	r3, [r3, #8]
 800a9a0:	683a      	ldr	r2, [r7, #0]
 800a9a2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	683a      	ldr	r2, [r7, #0]
 800a9a8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a9aa:	683b      	ldr	r3, [r7, #0]
 800a9ac:	687a      	ldr	r2, [r7, #4]
 800a9ae:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	1c5a      	adds	r2, r3, #1
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	601a      	str	r2, [r3, #0]
}
 800a9ba:	bf00      	nop
 800a9bc:	3714      	adds	r7, #20
 800a9be:	46bd      	mov	sp, r7
 800a9c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c4:	4770      	bx	lr

0800a9c6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a9c6:	b480      	push	{r7}
 800a9c8:	b085      	sub	sp, #20
 800a9ca:	af00      	add	r7, sp, #0
 800a9cc:	6078      	str	r0, [r7, #4]
 800a9ce:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a9d0:	683b      	ldr	r3, [r7, #0]
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a9d6:	68bb      	ldr	r3, [r7, #8]
 800a9d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9dc:	d103      	bne.n	800a9e6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	691b      	ldr	r3, [r3, #16]
 800a9e2:	60fb      	str	r3, [r7, #12]
 800a9e4:	e00c      	b.n	800aa00 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	3308      	adds	r3, #8
 800a9ea:	60fb      	str	r3, [r7, #12]
 800a9ec:	e002      	b.n	800a9f4 <vListInsert+0x2e>
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	685b      	ldr	r3, [r3, #4]
 800a9f2:	60fb      	str	r3, [r7, #12]
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	685b      	ldr	r3, [r3, #4]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	68ba      	ldr	r2, [r7, #8]
 800a9fc:	429a      	cmp	r2, r3
 800a9fe:	d2f6      	bcs.n	800a9ee <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	685a      	ldr	r2, [r3, #4]
 800aa04:	683b      	ldr	r3, [r7, #0]
 800aa06:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800aa08:	683b      	ldr	r3, [r7, #0]
 800aa0a:	685b      	ldr	r3, [r3, #4]
 800aa0c:	683a      	ldr	r2, [r7, #0]
 800aa0e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800aa10:	683b      	ldr	r3, [r7, #0]
 800aa12:	68fa      	ldr	r2, [r7, #12]
 800aa14:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	683a      	ldr	r2, [r7, #0]
 800aa1a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800aa1c:	683b      	ldr	r3, [r7, #0]
 800aa1e:	687a      	ldr	r2, [r7, #4]
 800aa20:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	1c5a      	adds	r2, r3, #1
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	601a      	str	r2, [r3, #0]
}
 800aa2c:	bf00      	nop
 800aa2e:	3714      	adds	r7, #20
 800aa30:	46bd      	mov	sp, r7
 800aa32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa36:	4770      	bx	lr

0800aa38 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800aa38:	b480      	push	{r7}
 800aa3a:	b085      	sub	sp, #20
 800aa3c:	af00      	add	r7, sp, #0
 800aa3e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	691b      	ldr	r3, [r3, #16]
 800aa44:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	685b      	ldr	r3, [r3, #4]
 800aa4a:	687a      	ldr	r2, [r7, #4]
 800aa4c:	6892      	ldr	r2, [r2, #8]
 800aa4e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	689b      	ldr	r3, [r3, #8]
 800aa54:	687a      	ldr	r2, [r7, #4]
 800aa56:	6852      	ldr	r2, [r2, #4]
 800aa58:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	685b      	ldr	r3, [r3, #4]
 800aa5e:	687a      	ldr	r2, [r7, #4]
 800aa60:	429a      	cmp	r2, r3
 800aa62:	d103      	bne.n	800aa6c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	689a      	ldr	r2, [r3, #8]
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	2200      	movs	r2, #0
 800aa70:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	1e5a      	subs	r2, r3, #1
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	681b      	ldr	r3, [r3, #0]
}
 800aa80:	4618      	mov	r0, r3
 800aa82:	3714      	adds	r7, #20
 800aa84:	46bd      	mov	sp, r7
 800aa86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa8a:	4770      	bx	lr

0800aa8c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800aa8c:	b580      	push	{r7, lr}
 800aa8e:	b084      	sub	sp, #16
 800aa90:	af00      	add	r7, sp, #0
 800aa92:	6078      	str	r0, [r7, #4]
 800aa94:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d10b      	bne.n	800aab8 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800aaa0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aaa4:	f383 8811 	msr	BASEPRI, r3
 800aaa8:	f3bf 8f6f 	isb	sy
 800aaac:	f3bf 8f4f 	dsb	sy
 800aab0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800aab2:	bf00      	nop
 800aab4:	bf00      	nop
 800aab6:	e7fd      	b.n	800aab4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800aab8:	f002 fd16 	bl	800d4e8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	681a      	ldr	r2, [r3, #0]
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aac4:	68f9      	ldr	r1, [r7, #12]
 800aac6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800aac8:	fb01 f303 	mul.w	r3, r1, r3
 800aacc:	441a      	add	r2, r3
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	2200      	movs	r2, #0
 800aad6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	681a      	ldr	r2, [r3, #0]
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	681a      	ldr	r2, [r3, #0]
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aae8:	3b01      	subs	r3, #1
 800aaea:	68f9      	ldr	r1, [r7, #12]
 800aaec:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800aaee:	fb01 f303 	mul.w	r3, r1, r3
 800aaf2:	441a      	add	r2, r3
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	22ff      	movs	r2, #255	@ 0xff
 800aafc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	22ff      	movs	r2, #255	@ 0xff
 800ab04:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800ab08:	683b      	ldr	r3, [r7, #0]
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d114      	bne.n	800ab38 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	691b      	ldr	r3, [r3, #16]
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d01a      	beq.n	800ab4c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	3310      	adds	r3, #16
 800ab1a:	4618      	mov	r0, r3
 800ab1c:	f001 fcb2 	bl	800c484 <xTaskRemoveFromEventList>
 800ab20:	4603      	mov	r3, r0
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d012      	beq.n	800ab4c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800ab26:	4b0d      	ldr	r3, [pc, #52]	@ (800ab5c <xQueueGenericReset+0xd0>)
 800ab28:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ab2c:	601a      	str	r2, [r3, #0]
 800ab2e:	f3bf 8f4f 	dsb	sy
 800ab32:	f3bf 8f6f 	isb	sy
 800ab36:	e009      	b.n	800ab4c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	3310      	adds	r3, #16
 800ab3c:	4618      	mov	r0, r3
 800ab3e:	f7ff fef1 	bl	800a924 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	3324      	adds	r3, #36	@ 0x24
 800ab46:	4618      	mov	r0, r3
 800ab48:	f7ff feec 	bl	800a924 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800ab4c:	f002 fcfe 	bl	800d54c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800ab50:	2301      	movs	r3, #1
}
 800ab52:	4618      	mov	r0, r3
 800ab54:	3710      	adds	r7, #16
 800ab56:	46bd      	mov	sp, r7
 800ab58:	bd80      	pop	{r7, pc}
 800ab5a:	bf00      	nop
 800ab5c:	e000ed04 	.word	0xe000ed04

0800ab60 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800ab60:	b580      	push	{r7, lr}
 800ab62:	b08e      	sub	sp, #56	@ 0x38
 800ab64:	af02      	add	r7, sp, #8
 800ab66:	60f8      	str	r0, [r7, #12]
 800ab68:	60b9      	str	r1, [r7, #8]
 800ab6a:	607a      	str	r2, [r7, #4]
 800ab6c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d10b      	bne.n	800ab8c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800ab74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab78:	f383 8811 	msr	BASEPRI, r3
 800ab7c:	f3bf 8f6f 	isb	sy
 800ab80:	f3bf 8f4f 	dsb	sy
 800ab84:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800ab86:	bf00      	nop
 800ab88:	bf00      	nop
 800ab8a:	e7fd      	b.n	800ab88 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800ab8c:	683b      	ldr	r3, [r7, #0]
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d10b      	bne.n	800abaa <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800ab92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab96:	f383 8811 	msr	BASEPRI, r3
 800ab9a:	f3bf 8f6f 	isb	sy
 800ab9e:	f3bf 8f4f 	dsb	sy
 800aba2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800aba4:	bf00      	nop
 800aba6:	bf00      	nop
 800aba8:	e7fd      	b.n	800aba6 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	2b00      	cmp	r3, #0
 800abae:	d002      	beq.n	800abb6 <xQueueGenericCreateStatic+0x56>
 800abb0:	68bb      	ldr	r3, [r7, #8]
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d001      	beq.n	800abba <xQueueGenericCreateStatic+0x5a>
 800abb6:	2301      	movs	r3, #1
 800abb8:	e000      	b.n	800abbc <xQueueGenericCreateStatic+0x5c>
 800abba:	2300      	movs	r3, #0
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d10b      	bne.n	800abd8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800abc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abc4:	f383 8811 	msr	BASEPRI, r3
 800abc8:	f3bf 8f6f 	isb	sy
 800abcc:	f3bf 8f4f 	dsb	sy
 800abd0:	623b      	str	r3, [r7, #32]
}
 800abd2:	bf00      	nop
 800abd4:	bf00      	nop
 800abd6:	e7fd      	b.n	800abd4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d102      	bne.n	800abe4 <xQueueGenericCreateStatic+0x84>
 800abde:	68bb      	ldr	r3, [r7, #8]
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d101      	bne.n	800abe8 <xQueueGenericCreateStatic+0x88>
 800abe4:	2301      	movs	r3, #1
 800abe6:	e000      	b.n	800abea <xQueueGenericCreateStatic+0x8a>
 800abe8:	2300      	movs	r3, #0
 800abea:	2b00      	cmp	r3, #0
 800abec:	d10b      	bne.n	800ac06 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800abee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abf2:	f383 8811 	msr	BASEPRI, r3
 800abf6:	f3bf 8f6f 	isb	sy
 800abfa:	f3bf 8f4f 	dsb	sy
 800abfe:	61fb      	str	r3, [r7, #28]
}
 800ac00:	bf00      	nop
 800ac02:	bf00      	nop
 800ac04:	e7fd      	b.n	800ac02 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800ac06:	2350      	movs	r3, #80	@ 0x50
 800ac08:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800ac0a:	697b      	ldr	r3, [r7, #20]
 800ac0c:	2b50      	cmp	r3, #80	@ 0x50
 800ac0e:	d00b      	beq.n	800ac28 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800ac10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac14:	f383 8811 	msr	BASEPRI, r3
 800ac18:	f3bf 8f6f 	isb	sy
 800ac1c:	f3bf 8f4f 	dsb	sy
 800ac20:	61bb      	str	r3, [r7, #24]
}
 800ac22:	bf00      	nop
 800ac24:	bf00      	nop
 800ac26:	e7fd      	b.n	800ac24 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800ac28:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ac2a:	683b      	ldr	r3, [r7, #0]
 800ac2c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800ac2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d00d      	beq.n	800ac50 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800ac34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac36:	2201      	movs	r2, #1
 800ac38:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ac3c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800ac40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac42:	9300      	str	r3, [sp, #0]
 800ac44:	4613      	mov	r3, r2
 800ac46:	687a      	ldr	r2, [r7, #4]
 800ac48:	68b9      	ldr	r1, [r7, #8]
 800ac4a:	68f8      	ldr	r0, [r7, #12]
 800ac4c:	f000 f840 	bl	800acd0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ac50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800ac52:	4618      	mov	r0, r3
 800ac54:	3730      	adds	r7, #48	@ 0x30
 800ac56:	46bd      	mov	sp, r7
 800ac58:	bd80      	pop	{r7, pc}

0800ac5a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800ac5a:	b580      	push	{r7, lr}
 800ac5c:	b08a      	sub	sp, #40	@ 0x28
 800ac5e:	af02      	add	r7, sp, #8
 800ac60:	60f8      	str	r0, [r7, #12]
 800ac62:	60b9      	str	r1, [r7, #8]
 800ac64:	4613      	mov	r3, r2
 800ac66:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d10b      	bne.n	800ac86 <xQueueGenericCreate+0x2c>
	__asm volatile
 800ac6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac72:	f383 8811 	msr	BASEPRI, r3
 800ac76:	f3bf 8f6f 	isb	sy
 800ac7a:	f3bf 8f4f 	dsb	sy
 800ac7e:	613b      	str	r3, [r7, #16]
}
 800ac80:	bf00      	nop
 800ac82:	bf00      	nop
 800ac84:	e7fd      	b.n	800ac82 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	68ba      	ldr	r2, [r7, #8]
 800ac8a:	fb02 f303 	mul.w	r3, r2, r3
 800ac8e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800ac90:	69fb      	ldr	r3, [r7, #28]
 800ac92:	3350      	adds	r3, #80	@ 0x50
 800ac94:	4618      	mov	r0, r3
 800ac96:	f002 fd49 	bl	800d72c <pvPortMalloc>
 800ac9a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800ac9c:	69bb      	ldr	r3, [r7, #24]
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d011      	beq.n	800acc6 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800aca2:	69bb      	ldr	r3, [r7, #24]
 800aca4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800aca6:	697b      	ldr	r3, [r7, #20]
 800aca8:	3350      	adds	r3, #80	@ 0x50
 800acaa:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800acac:	69bb      	ldr	r3, [r7, #24]
 800acae:	2200      	movs	r2, #0
 800acb0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800acb4:	79fa      	ldrb	r2, [r7, #7]
 800acb6:	69bb      	ldr	r3, [r7, #24]
 800acb8:	9300      	str	r3, [sp, #0]
 800acba:	4613      	mov	r3, r2
 800acbc:	697a      	ldr	r2, [r7, #20]
 800acbe:	68b9      	ldr	r1, [r7, #8]
 800acc0:	68f8      	ldr	r0, [r7, #12]
 800acc2:	f000 f805 	bl	800acd0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800acc6:	69bb      	ldr	r3, [r7, #24]
	}
 800acc8:	4618      	mov	r0, r3
 800acca:	3720      	adds	r7, #32
 800accc:	46bd      	mov	sp, r7
 800acce:	bd80      	pop	{r7, pc}

0800acd0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800acd0:	b580      	push	{r7, lr}
 800acd2:	b084      	sub	sp, #16
 800acd4:	af00      	add	r7, sp, #0
 800acd6:	60f8      	str	r0, [r7, #12]
 800acd8:	60b9      	str	r1, [r7, #8]
 800acda:	607a      	str	r2, [r7, #4]
 800acdc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800acde:	68bb      	ldr	r3, [r7, #8]
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d103      	bne.n	800acec <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ace4:	69bb      	ldr	r3, [r7, #24]
 800ace6:	69ba      	ldr	r2, [r7, #24]
 800ace8:	601a      	str	r2, [r3, #0]
 800acea:	e002      	b.n	800acf2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800acec:	69bb      	ldr	r3, [r7, #24]
 800acee:	687a      	ldr	r2, [r7, #4]
 800acf0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800acf2:	69bb      	ldr	r3, [r7, #24]
 800acf4:	68fa      	ldr	r2, [r7, #12]
 800acf6:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800acf8:	69bb      	ldr	r3, [r7, #24]
 800acfa:	68ba      	ldr	r2, [r7, #8]
 800acfc:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800acfe:	2101      	movs	r1, #1
 800ad00:	69b8      	ldr	r0, [r7, #24]
 800ad02:	f7ff fec3 	bl	800aa8c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800ad06:	69bb      	ldr	r3, [r7, #24]
 800ad08:	78fa      	ldrb	r2, [r7, #3]
 800ad0a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ad0e:	bf00      	nop
 800ad10:	3710      	adds	r7, #16
 800ad12:	46bd      	mov	sp, r7
 800ad14:	bd80      	pop	{r7, pc}

0800ad16 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800ad16:	b580      	push	{r7, lr}
 800ad18:	b08a      	sub	sp, #40	@ 0x28
 800ad1a:	af02      	add	r7, sp, #8
 800ad1c:	60f8      	str	r0, [r7, #12]
 800ad1e:	60b9      	str	r1, [r7, #8]
 800ad20:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d10b      	bne.n	800ad40 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 800ad28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad2c:	f383 8811 	msr	BASEPRI, r3
 800ad30:	f3bf 8f6f 	isb	sy
 800ad34:	f3bf 8f4f 	dsb	sy
 800ad38:	61bb      	str	r3, [r7, #24]
}
 800ad3a:	bf00      	nop
 800ad3c:	bf00      	nop
 800ad3e:	e7fd      	b.n	800ad3c <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800ad40:	68ba      	ldr	r2, [r7, #8]
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	429a      	cmp	r2, r3
 800ad46:	d90b      	bls.n	800ad60 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 800ad48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad4c:	f383 8811 	msr	BASEPRI, r3
 800ad50:	f3bf 8f6f 	isb	sy
 800ad54:	f3bf 8f4f 	dsb	sy
 800ad58:	617b      	str	r3, [r7, #20]
}
 800ad5a:	bf00      	nop
 800ad5c:	bf00      	nop
 800ad5e:	e7fd      	b.n	800ad5c <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800ad60:	2302      	movs	r3, #2
 800ad62:	9300      	str	r3, [sp, #0]
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	2200      	movs	r2, #0
 800ad68:	2100      	movs	r1, #0
 800ad6a:	68f8      	ldr	r0, [r7, #12]
 800ad6c:	f7ff fef8 	bl	800ab60 <xQueueGenericCreateStatic>
 800ad70:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800ad72:	69fb      	ldr	r3, [r7, #28]
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d002      	beq.n	800ad7e <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800ad78:	69fb      	ldr	r3, [r7, #28]
 800ad7a:	68ba      	ldr	r2, [r7, #8]
 800ad7c:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800ad7e:	69fb      	ldr	r3, [r7, #28]
	}
 800ad80:	4618      	mov	r0, r3
 800ad82:	3720      	adds	r7, #32
 800ad84:	46bd      	mov	sp, r7
 800ad86:	bd80      	pop	{r7, pc}

0800ad88 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800ad88:	b580      	push	{r7, lr}
 800ad8a:	b086      	sub	sp, #24
 800ad8c:	af00      	add	r7, sp, #0
 800ad8e:	6078      	str	r0, [r7, #4]
 800ad90:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d10b      	bne.n	800adb0 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 800ad98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad9c:	f383 8811 	msr	BASEPRI, r3
 800ada0:	f3bf 8f6f 	isb	sy
 800ada4:	f3bf 8f4f 	dsb	sy
 800ada8:	613b      	str	r3, [r7, #16]
}
 800adaa:	bf00      	nop
 800adac:	bf00      	nop
 800adae:	e7fd      	b.n	800adac <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800adb0:	683a      	ldr	r2, [r7, #0]
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	429a      	cmp	r2, r3
 800adb6:	d90b      	bls.n	800add0 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 800adb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800adbc:	f383 8811 	msr	BASEPRI, r3
 800adc0:	f3bf 8f6f 	isb	sy
 800adc4:	f3bf 8f4f 	dsb	sy
 800adc8:	60fb      	str	r3, [r7, #12]
}
 800adca:	bf00      	nop
 800adcc:	bf00      	nop
 800adce:	e7fd      	b.n	800adcc <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800add0:	2202      	movs	r2, #2
 800add2:	2100      	movs	r1, #0
 800add4:	6878      	ldr	r0, [r7, #4]
 800add6:	f7ff ff40 	bl	800ac5a <xQueueGenericCreate>
 800adda:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800addc:	697b      	ldr	r3, [r7, #20]
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d002      	beq.n	800ade8 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800ade2:	697b      	ldr	r3, [r7, #20]
 800ade4:	683a      	ldr	r2, [r7, #0]
 800ade6:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800ade8:	697b      	ldr	r3, [r7, #20]
	}
 800adea:	4618      	mov	r0, r3
 800adec:	3718      	adds	r7, #24
 800adee:	46bd      	mov	sp, r7
 800adf0:	bd80      	pop	{r7, pc}
	...

0800adf4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800adf4:	b580      	push	{r7, lr}
 800adf6:	b08e      	sub	sp, #56	@ 0x38
 800adf8:	af00      	add	r7, sp, #0
 800adfa:	60f8      	str	r0, [r7, #12]
 800adfc:	60b9      	str	r1, [r7, #8]
 800adfe:	607a      	str	r2, [r7, #4]
 800ae00:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800ae02:	2300      	movs	r3, #0
 800ae04:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800ae0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d10b      	bne.n	800ae28 <xQueueGenericSend+0x34>
	__asm volatile
 800ae10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae14:	f383 8811 	msr	BASEPRI, r3
 800ae18:	f3bf 8f6f 	isb	sy
 800ae1c:	f3bf 8f4f 	dsb	sy
 800ae20:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800ae22:	bf00      	nop
 800ae24:	bf00      	nop
 800ae26:	e7fd      	b.n	800ae24 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ae28:	68bb      	ldr	r3, [r7, #8]
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d103      	bne.n	800ae36 <xQueueGenericSend+0x42>
 800ae2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d101      	bne.n	800ae3a <xQueueGenericSend+0x46>
 800ae36:	2301      	movs	r3, #1
 800ae38:	e000      	b.n	800ae3c <xQueueGenericSend+0x48>
 800ae3a:	2300      	movs	r3, #0
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d10b      	bne.n	800ae58 <xQueueGenericSend+0x64>
	__asm volatile
 800ae40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae44:	f383 8811 	msr	BASEPRI, r3
 800ae48:	f3bf 8f6f 	isb	sy
 800ae4c:	f3bf 8f4f 	dsb	sy
 800ae50:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800ae52:	bf00      	nop
 800ae54:	bf00      	nop
 800ae56:	e7fd      	b.n	800ae54 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ae58:	683b      	ldr	r3, [r7, #0]
 800ae5a:	2b02      	cmp	r3, #2
 800ae5c:	d103      	bne.n	800ae66 <xQueueGenericSend+0x72>
 800ae5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ae62:	2b01      	cmp	r3, #1
 800ae64:	d101      	bne.n	800ae6a <xQueueGenericSend+0x76>
 800ae66:	2301      	movs	r3, #1
 800ae68:	e000      	b.n	800ae6c <xQueueGenericSend+0x78>
 800ae6a:	2300      	movs	r3, #0
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d10b      	bne.n	800ae88 <xQueueGenericSend+0x94>
	__asm volatile
 800ae70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae74:	f383 8811 	msr	BASEPRI, r3
 800ae78:	f3bf 8f6f 	isb	sy
 800ae7c:	f3bf 8f4f 	dsb	sy
 800ae80:	623b      	str	r3, [r7, #32]
}
 800ae82:	bf00      	nop
 800ae84:	bf00      	nop
 800ae86:	e7fd      	b.n	800ae84 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ae88:	f001 fcc2 	bl	800c810 <xTaskGetSchedulerState>
 800ae8c:	4603      	mov	r3, r0
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d102      	bne.n	800ae98 <xQueueGenericSend+0xa4>
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d101      	bne.n	800ae9c <xQueueGenericSend+0xa8>
 800ae98:	2301      	movs	r3, #1
 800ae9a:	e000      	b.n	800ae9e <xQueueGenericSend+0xaa>
 800ae9c:	2300      	movs	r3, #0
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d10b      	bne.n	800aeba <xQueueGenericSend+0xc6>
	__asm volatile
 800aea2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aea6:	f383 8811 	msr	BASEPRI, r3
 800aeaa:	f3bf 8f6f 	isb	sy
 800aeae:	f3bf 8f4f 	dsb	sy
 800aeb2:	61fb      	str	r3, [r7, #28]
}
 800aeb4:	bf00      	nop
 800aeb6:	bf00      	nop
 800aeb8:	e7fd      	b.n	800aeb6 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800aeba:	f002 fb15 	bl	800d4e8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800aebe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aec0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800aec2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aec4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aec6:	429a      	cmp	r2, r3
 800aec8:	d302      	bcc.n	800aed0 <xQueueGenericSend+0xdc>
 800aeca:	683b      	ldr	r3, [r7, #0]
 800aecc:	2b02      	cmp	r3, #2
 800aece:	d129      	bne.n	800af24 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800aed0:	683a      	ldr	r2, [r7, #0]
 800aed2:	68b9      	ldr	r1, [r7, #8]
 800aed4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800aed6:	f000 fcab 	bl	800b830 <prvCopyDataToQueue>
 800aeda:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800aedc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aede:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d010      	beq.n	800af06 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800aee4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aee6:	3324      	adds	r3, #36	@ 0x24
 800aee8:	4618      	mov	r0, r3
 800aeea:	f001 facb 	bl	800c484 <xTaskRemoveFromEventList>
 800aeee:	4603      	mov	r3, r0
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d013      	beq.n	800af1c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800aef4:	4b3f      	ldr	r3, [pc, #252]	@ (800aff4 <xQueueGenericSend+0x200>)
 800aef6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aefa:	601a      	str	r2, [r3, #0]
 800aefc:	f3bf 8f4f 	dsb	sy
 800af00:	f3bf 8f6f 	isb	sy
 800af04:	e00a      	b.n	800af1c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800af06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d007      	beq.n	800af1c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800af0c:	4b39      	ldr	r3, [pc, #228]	@ (800aff4 <xQueueGenericSend+0x200>)
 800af0e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800af12:	601a      	str	r2, [r3, #0]
 800af14:	f3bf 8f4f 	dsb	sy
 800af18:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800af1c:	f002 fb16 	bl	800d54c <vPortExitCritical>
				return pdPASS;
 800af20:	2301      	movs	r3, #1
 800af22:	e063      	b.n	800afec <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	2b00      	cmp	r3, #0
 800af28:	d103      	bne.n	800af32 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800af2a:	f002 fb0f 	bl	800d54c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800af2e:	2300      	movs	r3, #0
 800af30:	e05c      	b.n	800afec <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800af32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800af34:	2b00      	cmp	r3, #0
 800af36:	d106      	bne.n	800af46 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800af38:	f107 0314 	add.w	r3, r7, #20
 800af3c:	4618      	mov	r0, r3
 800af3e:	f001 fb05 	bl	800c54c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800af42:	2301      	movs	r3, #1
 800af44:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800af46:	f002 fb01 	bl	800d54c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800af4a:	f001 f86d 	bl	800c028 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800af4e:	f002 facb 	bl	800d4e8 <vPortEnterCritical>
 800af52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af54:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800af58:	b25b      	sxtb	r3, r3
 800af5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af5e:	d103      	bne.n	800af68 <xQueueGenericSend+0x174>
 800af60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af62:	2200      	movs	r2, #0
 800af64:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800af68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af6a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800af6e:	b25b      	sxtb	r3, r3
 800af70:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af74:	d103      	bne.n	800af7e <xQueueGenericSend+0x18a>
 800af76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af78:	2200      	movs	r2, #0
 800af7a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800af7e:	f002 fae5 	bl	800d54c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800af82:	1d3a      	adds	r2, r7, #4
 800af84:	f107 0314 	add.w	r3, r7, #20
 800af88:	4611      	mov	r1, r2
 800af8a:	4618      	mov	r0, r3
 800af8c:	f001 faf4 	bl	800c578 <xTaskCheckForTimeOut>
 800af90:	4603      	mov	r3, r0
 800af92:	2b00      	cmp	r3, #0
 800af94:	d124      	bne.n	800afe0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800af96:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800af98:	f000 fd42 	bl	800ba20 <prvIsQueueFull>
 800af9c:	4603      	mov	r3, r0
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d018      	beq.n	800afd4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800afa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afa4:	3310      	adds	r3, #16
 800afa6:	687a      	ldr	r2, [r7, #4]
 800afa8:	4611      	mov	r1, r2
 800afaa:	4618      	mov	r0, r3
 800afac:	f001 fa18 	bl	800c3e0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800afb0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800afb2:	f000 fccd 	bl	800b950 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800afb6:	f001 f845 	bl	800c044 <xTaskResumeAll>
 800afba:	4603      	mov	r3, r0
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	f47f af7c 	bne.w	800aeba <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800afc2:	4b0c      	ldr	r3, [pc, #48]	@ (800aff4 <xQueueGenericSend+0x200>)
 800afc4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800afc8:	601a      	str	r2, [r3, #0]
 800afca:	f3bf 8f4f 	dsb	sy
 800afce:	f3bf 8f6f 	isb	sy
 800afd2:	e772      	b.n	800aeba <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800afd4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800afd6:	f000 fcbb 	bl	800b950 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800afda:	f001 f833 	bl	800c044 <xTaskResumeAll>
 800afde:	e76c      	b.n	800aeba <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800afe0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800afe2:	f000 fcb5 	bl	800b950 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800afe6:	f001 f82d 	bl	800c044 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800afea:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800afec:	4618      	mov	r0, r3
 800afee:	3738      	adds	r7, #56	@ 0x38
 800aff0:	46bd      	mov	sp, r7
 800aff2:	bd80      	pop	{r7, pc}
 800aff4:	e000ed04 	.word	0xe000ed04

0800aff8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800aff8:	b580      	push	{r7, lr}
 800affa:	b090      	sub	sp, #64	@ 0x40
 800affc:	af00      	add	r7, sp, #0
 800affe:	60f8      	str	r0, [r7, #12]
 800b000:	60b9      	str	r1, [r7, #8]
 800b002:	607a      	str	r2, [r7, #4]
 800b004:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800b00a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d10b      	bne.n	800b028 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800b010:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b014:	f383 8811 	msr	BASEPRI, r3
 800b018:	f3bf 8f6f 	isb	sy
 800b01c:	f3bf 8f4f 	dsb	sy
 800b020:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800b022:	bf00      	nop
 800b024:	bf00      	nop
 800b026:	e7fd      	b.n	800b024 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b028:	68bb      	ldr	r3, [r7, #8]
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d103      	bne.n	800b036 <xQueueGenericSendFromISR+0x3e>
 800b02e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b030:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b032:	2b00      	cmp	r3, #0
 800b034:	d101      	bne.n	800b03a <xQueueGenericSendFromISR+0x42>
 800b036:	2301      	movs	r3, #1
 800b038:	e000      	b.n	800b03c <xQueueGenericSendFromISR+0x44>
 800b03a:	2300      	movs	r3, #0
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d10b      	bne.n	800b058 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800b040:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b044:	f383 8811 	msr	BASEPRI, r3
 800b048:	f3bf 8f6f 	isb	sy
 800b04c:	f3bf 8f4f 	dsb	sy
 800b050:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800b052:	bf00      	nop
 800b054:	bf00      	nop
 800b056:	e7fd      	b.n	800b054 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b058:	683b      	ldr	r3, [r7, #0]
 800b05a:	2b02      	cmp	r3, #2
 800b05c:	d103      	bne.n	800b066 <xQueueGenericSendFromISR+0x6e>
 800b05e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b060:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b062:	2b01      	cmp	r3, #1
 800b064:	d101      	bne.n	800b06a <xQueueGenericSendFromISR+0x72>
 800b066:	2301      	movs	r3, #1
 800b068:	e000      	b.n	800b06c <xQueueGenericSendFromISR+0x74>
 800b06a:	2300      	movs	r3, #0
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d10b      	bne.n	800b088 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800b070:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b074:	f383 8811 	msr	BASEPRI, r3
 800b078:	f3bf 8f6f 	isb	sy
 800b07c:	f3bf 8f4f 	dsb	sy
 800b080:	623b      	str	r3, [r7, #32]
}
 800b082:	bf00      	nop
 800b084:	bf00      	nop
 800b086:	e7fd      	b.n	800b084 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b088:	f002 fb0e 	bl	800d6a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800b08c:	f3ef 8211 	mrs	r2, BASEPRI
 800b090:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b094:	f383 8811 	msr	BASEPRI, r3
 800b098:	f3bf 8f6f 	isb	sy
 800b09c:	f3bf 8f4f 	dsb	sy
 800b0a0:	61fa      	str	r2, [r7, #28]
 800b0a2:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800b0a4:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b0a6:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b0a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0aa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b0ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b0b0:	429a      	cmp	r2, r3
 800b0b2:	d302      	bcc.n	800b0ba <xQueueGenericSendFromISR+0xc2>
 800b0b4:	683b      	ldr	r3, [r7, #0]
 800b0b6:	2b02      	cmp	r3, #2
 800b0b8:	d12f      	bne.n	800b11a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b0ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0bc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b0c0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b0c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b0c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b0ca:	683a      	ldr	r2, [r7, #0]
 800b0cc:	68b9      	ldr	r1, [r7, #8]
 800b0ce:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800b0d0:	f000 fbae 	bl	800b830 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b0d4:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800b0d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0dc:	d112      	bne.n	800b104 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b0de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d016      	beq.n	800b114 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b0e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0e8:	3324      	adds	r3, #36	@ 0x24
 800b0ea:	4618      	mov	r0, r3
 800b0ec:	f001 f9ca 	bl	800c484 <xTaskRemoveFromEventList>
 800b0f0:	4603      	mov	r3, r0
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d00e      	beq.n	800b114 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d00b      	beq.n	800b114 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	2201      	movs	r2, #1
 800b100:	601a      	str	r2, [r3, #0]
 800b102:	e007      	b.n	800b114 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b104:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800b108:	3301      	adds	r3, #1
 800b10a:	b2db      	uxtb	r3, r3
 800b10c:	b25a      	sxtb	r2, r3
 800b10e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b110:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800b114:	2301      	movs	r3, #1
 800b116:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800b118:	e001      	b.n	800b11e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b11a:	2300      	movs	r3, #0
 800b11c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b11e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b120:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b122:	697b      	ldr	r3, [r7, #20]
 800b124:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b128:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b12a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800b12c:	4618      	mov	r0, r3
 800b12e:	3740      	adds	r7, #64	@ 0x40
 800b130:	46bd      	mov	sp, r7
 800b132:	bd80      	pop	{r7, pc}

0800b134 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800b134:	b580      	push	{r7, lr}
 800b136:	b08e      	sub	sp, #56	@ 0x38
 800b138:	af00      	add	r7, sp, #0
 800b13a:	6078      	str	r0, [r7, #4]
 800b13c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800b142:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b144:	2b00      	cmp	r3, #0
 800b146:	d10b      	bne.n	800b160 <xQueueGiveFromISR+0x2c>
	__asm volatile
 800b148:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b14c:	f383 8811 	msr	BASEPRI, r3
 800b150:	f3bf 8f6f 	isb	sy
 800b154:	f3bf 8f4f 	dsb	sy
 800b158:	623b      	str	r3, [r7, #32]
}
 800b15a:	bf00      	nop
 800b15c:	bf00      	nop
 800b15e:	e7fd      	b.n	800b15c <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800b160:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b162:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b164:	2b00      	cmp	r3, #0
 800b166:	d00b      	beq.n	800b180 <xQueueGiveFromISR+0x4c>
	__asm volatile
 800b168:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b16c:	f383 8811 	msr	BASEPRI, r3
 800b170:	f3bf 8f6f 	isb	sy
 800b174:	f3bf 8f4f 	dsb	sy
 800b178:	61fb      	str	r3, [r7, #28]
}
 800b17a:	bf00      	nop
 800b17c:	bf00      	nop
 800b17e:	e7fd      	b.n	800b17c <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800b180:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	2b00      	cmp	r3, #0
 800b186:	d103      	bne.n	800b190 <xQueueGiveFromISR+0x5c>
 800b188:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b18a:	689b      	ldr	r3, [r3, #8]
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d101      	bne.n	800b194 <xQueueGiveFromISR+0x60>
 800b190:	2301      	movs	r3, #1
 800b192:	e000      	b.n	800b196 <xQueueGiveFromISR+0x62>
 800b194:	2300      	movs	r3, #0
 800b196:	2b00      	cmp	r3, #0
 800b198:	d10b      	bne.n	800b1b2 <xQueueGiveFromISR+0x7e>
	__asm volatile
 800b19a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b19e:	f383 8811 	msr	BASEPRI, r3
 800b1a2:	f3bf 8f6f 	isb	sy
 800b1a6:	f3bf 8f4f 	dsb	sy
 800b1aa:	61bb      	str	r3, [r7, #24]
}
 800b1ac:	bf00      	nop
 800b1ae:	bf00      	nop
 800b1b0:	e7fd      	b.n	800b1ae <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b1b2:	f002 fa79 	bl	800d6a8 <vPortValidateInterruptPriority>
	__asm volatile
 800b1b6:	f3ef 8211 	mrs	r2, BASEPRI
 800b1ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1be:	f383 8811 	msr	BASEPRI, r3
 800b1c2:	f3bf 8f6f 	isb	sy
 800b1c6:	f3bf 8f4f 	dsb	sy
 800b1ca:	617a      	str	r2, [r7, #20]
 800b1cc:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800b1ce:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b1d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b1d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b1d6:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800b1d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b1dc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b1de:	429a      	cmp	r2, r3
 800b1e0:	d22b      	bcs.n	800b23a <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b1e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1e4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b1e8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b1ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1ee:	1c5a      	adds	r2, r3, #1
 800b1f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1f2:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b1f4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800b1f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1fc:	d112      	bne.n	800b224 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b1fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b200:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b202:	2b00      	cmp	r3, #0
 800b204:	d016      	beq.n	800b234 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b206:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b208:	3324      	adds	r3, #36	@ 0x24
 800b20a:	4618      	mov	r0, r3
 800b20c:	f001 f93a 	bl	800c484 <xTaskRemoveFromEventList>
 800b210:	4603      	mov	r3, r0
 800b212:	2b00      	cmp	r3, #0
 800b214:	d00e      	beq.n	800b234 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b216:	683b      	ldr	r3, [r7, #0]
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d00b      	beq.n	800b234 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b21c:	683b      	ldr	r3, [r7, #0]
 800b21e:	2201      	movs	r2, #1
 800b220:	601a      	str	r2, [r3, #0]
 800b222:	e007      	b.n	800b234 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b224:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b228:	3301      	adds	r3, #1
 800b22a:	b2db      	uxtb	r3, r3
 800b22c:	b25a      	sxtb	r2, r3
 800b22e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b230:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800b234:	2301      	movs	r3, #1
 800b236:	637b      	str	r3, [r7, #52]	@ 0x34
 800b238:	e001      	b.n	800b23e <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b23a:	2300      	movs	r3, #0
 800b23c:	637b      	str	r3, [r7, #52]	@ 0x34
 800b23e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b240:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	f383 8811 	msr	BASEPRI, r3
}
 800b248:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b24a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800b24c:	4618      	mov	r0, r3
 800b24e:	3738      	adds	r7, #56	@ 0x38
 800b250:	46bd      	mov	sp, r7
 800b252:	bd80      	pop	{r7, pc}

0800b254 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b254:	b580      	push	{r7, lr}
 800b256:	b08c      	sub	sp, #48	@ 0x30
 800b258:	af00      	add	r7, sp, #0
 800b25a:	60f8      	str	r0, [r7, #12]
 800b25c:	60b9      	str	r1, [r7, #8]
 800b25e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b260:	2300      	movs	r3, #0
 800b262:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b268:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d10b      	bne.n	800b286 <xQueueReceive+0x32>
	__asm volatile
 800b26e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b272:	f383 8811 	msr	BASEPRI, r3
 800b276:	f3bf 8f6f 	isb	sy
 800b27a:	f3bf 8f4f 	dsb	sy
 800b27e:	623b      	str	r3, [r7, #32]
}
 800b280:	bf00      	nop
 800b282:	bf00      	nop
 800b284:	e7fd      	b.n	800b282 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b286:	68bb      	ldr	r3, [r7, #8]
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d103      	bne.n	800b294 <xQueueReceive+0x40>
 800b28c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b28e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b290:	2b00      	cmp	r3, #0
 800b292:	d101      	bne.n	800b298 <xQueueReceive+0x44>
 800b294:	2301      	movs	r3, #1
 800b296:	e000      	b.n	800b29a <xQueueReceive+0x46>
 800b298:	2300      	movs	r3, #0
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d10b      	bne.n	800b2b6 <xQueueReceive+0x62>
	__asm volatile
 800b29e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2a2:	f383 8811 	msr	BASEPRI, r3
 800b2a6:	f3bf 8f6f 	isb	sy
 800b2aa:	f3bf 8f4f 	dsb	sy
 800b2ae:	61fb      	str	r3, [r7, #28]
}
 800b2b0:	bf00      	nop
 800b2b2:	bf00      	nop
 800b2b4:	e7fd      	b.n	800b2b2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b2b6:	f001 faab 	bl	800c810 <xTaskGetSchedulerState>
 800b2ba:	4603      	mov	r3, r0
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d102      	bne.n	800b2c6 <xQueueReceive+0x72>
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d101      	bne.n	800b2ca <xQueueReceive+0x76>
 800b2c6:	2301      	movs	r3, #1
 800b2c8:	e000      	b.n	800b2cc <xQueueReceive+0x78>
 800b2ca:	2300      	movs	r3, #0
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d10b      	bne.n	800b2e8 <xQueueReceive+0x94>
	__asm volatile
 800b2d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2d4:	f383 8811 	msr	BASEPRI, r3
 800b2d8:	f3bf 8f6f 	isb	sy
 800b2dc:	f3bf 8f4f 	dsb	sy
 800b2e0:	61bb      	str	r3, [r7, #24]
}
 800b2e2:	bf00      	nop
 800b2e4:	bf00      	nop
 800b2e6:	e7fd      	b.n	800b2e4 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b2e8:	f002 f8fe 	bl	800d4e8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b2ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b2f0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b2f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d01f      	beq.n	800b338 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b2f8:	68b9      	ldr	r1, [r7, #8]
 800b2fa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b2fc:	f000 fb02 	bl	800b904 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b300:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b302:	1e5a      	subs	r2, r3, #1
 800b304:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b306:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b308:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b30a:	691b      	ldr	r3, [r3, #16]
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d00f      	beq.n	800b330 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b310:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b312:	3310      	adds	r3, #16
 800b314:	4618      	mov	r0, r3
 800b316:	f001 f8b5 	bl	800c484 <xTaskRemoveFromEventList>
 800b31a:	4603      	mov	r3, r0
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d007      	beq.n	800b330 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b320:	4b3c      	ldr	r3, [pc, #240]	@ (800b414 <xQueueReceive+0x1c0>)
 800b322:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b326:	601a      	str	r2, [r3, #0]
 800b328:	f3bf 8f4f 	dsb	sy
 800b32c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b330:	f002 f90c 	bl	800d54c <vPortExitCritical>
				return pdPASS;
 800b334:	2301      	movs	r3, #1
 800b336:	e069      	b.n	800b40c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d103      	bne.n	800b346 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b33e:	f002 f905 	bl	800d54c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b342:	2300      	movs	r3, #0
 800b344:	e062      	b.n	800b40c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b346:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d106      	bne.n	800b35a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b34c:	f107 0310 	add.w	r3, r7, #16
 800b350:	4618      	mov	r0, r3
 800b352:	f001 f8fb 	bl	800c54c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b356:	2301      	movs	r3, #1
 800b358:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b35a:	f002 f8f7 	bl	800d54c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b35e:	f000 fe63 	bl	800c028 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b362:	f002 f8c1 	bl	800d4e8 <vPortEnterCritical>
 800b366:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b368:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b36c:	b25b      	sxtb	r3, r3
 800b36e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b372:	d103      	bne.n	800b37c <xQueueReceive+0x128>
 800b374:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b376:	2200      	movs	r2, #0
 800b378:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b37c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b37e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b382:	b25b      	sxtb	r3, r3
 800b384:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b388:	d103      	bne.n	800b392 <xQueueReceive+0x13e>
 800b38a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b38c:	2200      	movs	r2, #0
 800b38e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b392:	f002 f8db 	bl	800d54c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b396:	1d3a      	adds	r2, r7, #4
 800b398:	f107 0310 	add.w	r3, r7, #16
 800b39c:	4611      	mov	r1, r2
 800b39e:	4618      	mov	r0, r3
 800b3a0:	f001 f8ea 	bl	800c578 <xTaskCheckForTimeOut>
 800b3a4:	4603      	mov	r3, r0
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d123      	bne.n	800b3f2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b3aa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b3ac:	f000 fb22 	bl	800b9f4 <prvIsQueueEmpty>
 800b3b0:	4603      	mov	r3, r0
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d017      	beq.n	800b3e6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b3b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3b8:	3324      	adds	r3, #36	@ 0x24
 800b3ba:	687a      	ldr	r2, [r7, #4]
 800b3bc:	4611      	mov	r1, r2
 800b3be:	4618      	mov	r0, r3
 800b3c0:	f001 f80e 	bl	800c3e0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b3c4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b3c6:	f000 fac3 	bl	800b950 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b3ca:	f000 fe3b 	bl	800c044 <xTaskResumeAll>
 800b3ce:	4603      	mov	r3, r0
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d189      	bne.n	800b2e8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800b3d4:	4b0f      	ldr	r3, [pc, #60]	@ (800b414 <xQueueReceive+0x1c0>)
 800b3d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b3da:	601a      	str	r2, [r3, #0]
 800b3dc:	f3bf 8f4f 	dsb	sy
 800b3e0:	f3bf 8f6f 	isb	sy
 800b3e4:	e780      	b.n	800b2e8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b3e6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b3e8:	f000 fab2 	bl	800b950 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b3ec:	f000 fe2a 	bl	800c044 <xTaskResumeAll>
 800b3f0:	e77a      	b.n	800b2e8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b3f2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b3f4:	f000 faac 	bl	800b950 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b3f8:	f000 fe24 	bl	800c044 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b3fc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b3fe:	f000 faf9 	bl	800b9f4 <prvIsQueueEmpty>
 800b402:	4603      	mov	r3, r0
 800b404:	2b00      	cmp	r3, #0
 800b406:	f43f af6f 	beq.w	800b2e8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b40a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b40c:	4618      	mov	r0, r3
 800b40e:	3730      	adds	r7, #48	@ 0x30
 800b410:	46bd      	mov	sp, r7
 800b412:	bd80      	pop	{r7, pc}
 800b414:	e000ed04 	.word	0xe000ed04

0800b418 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800b418:	b580      	push	{r7, lr}
 800b41a:	b08e      	sub	sp, #56	@ 0x38
 800b41c:	af00      	add	r7, sp, #0
 800b41e:	6078      	str	r0, [r7, #4]
 800b420:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800b422:	2300      	movs	r3, #0
 800b424:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800b42a:	2300      	movs	r3, #0
 800b42c:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b42e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b430:	2b00      	cmp	r3, #0
 800b432:	d10b      	bne.n	800b44c <xQueueSemaphoreTake+0x34>
	__asm volatile
 800b434:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b438:	f383 8811 	msr	BASEPRI, r3
 800b43c:	f3bf 8f6f 	isb	sy
 800b440:	f3bf 8f4f 	dsb	sy
 800b444:	623b      	str	r3, [r7, #32]
}
 800b446:	bf00      	nop
 800b448:	bf00      	nop
 800b44a:	e7fd      	b.n	800b448 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800b44c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b44e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b450:	2b00      	cmp	r3, #0
 800b452:	d00b      	beq.n	800b46c <xQueueSemaphoreTake+0x54>
	__asm volatile
 800b454:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b458:	f383 8811 	msr	BASEPRI, r3
 800b45c:	f3bf 8f6f 	isb	sy
 800b460:	f3bf 8f4f 	dsb	sy
 800b464:	61fb      	str	r3, [r7, #28]
}
 800b466:	bf00      	nop
 800b468:	bf00      	nop
 800b46a:	e7fd      	b.n	800b468 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b46c:	f001 f9d0 	bl	800c810 <xTaskGetSchedulerState>
 800b470:	4603      	mov	r3, r0
 800b472:	2b00      	cmp	r3, #0
 800b474:	d102      	bne.n	800b47c <xQueueSemaphoreTake+0x64>
 800b476:	683b      	ldr	r3, [r7, #0]
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d101      	bne.n	800b480 <xQueueSemaphoreTake+0x68>
 800b47c:	2301      	movs	r3, #1
 800b47e:	e000      	b.n	800b482 <xQueueSemaphoreTake+0x6a>
 800b480:	2300      	movs	r3, #0
 800b482:	2b00      	cmp	r3, #0
 800b484:	d10b      	bne.n	800b49e <xQueueSemaphoreTake+0x86>
	__asm volatile
 800b486:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b48a:	f383 8811 	msr	BASEPRI, r3
 800b48e:	f3bf 8f6f 	isb	sy
 800b492:	f3bf 8f4f 	dsb	sy
 800b496:	61bb      	str	r3, [r7, #24]
}
 800b498:	bf00      	nop
 800b49a:	bf00      	nop
 800b49c:	e7fd      	b.n	800b49a <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b49e:	f002 f823 	bl	800d4e8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800b4a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b4a6:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800b4a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d024      	beq.n	800b4f8 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800b4ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4b0:	1e5a      	subs	r2, r3, #1
 800b4b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4b4:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b4b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d104      	bne.n	800b4c8 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800b4be:	f001 fb21 	bl	800cb04 <pvTaskIncrementMutexHeldCount>
 800b4c2:	4602      	mov	r2, r0
 800b4c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4c6:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b4c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4ca:	691b      	ldr	r3, [r3, #16]
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d00f      	beq.n	800b4f0 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b4d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4d2:	3310      	adds	r3, #16
 800b4d4:	4618      	mov	r0, r3
 800b4d6:	f000 ffd5 	bl	800c484 <xTaskRemoveFromEventList>
 800b4da:	4603      	mov	r3, r0
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d007      	beq.n	800b4f0 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b4e0:	4b54      	ldr	r3, [pc, #336]	@ (800b634 <xQueueSemaphoreTake+0x21c>)
 800b4e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b4e6:	601a      	str	r2, [r3, #0]
 800b4e8:	f3bf 8f4f 	dsb	sy
 800b4ec:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b4f0:	f002 f82c 	bl	800d54c <vPortExitCritical>
				return pdPASS;
 800b4f4:	2301      	movs	r3, #1
 800b4f6:	e098      	b.n	800b62a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b4f8:	683b      	ldr	r3, [r7, #0]
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d112      	bne.n	800b524 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800b4fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b500:	2b00      	cmp	r3, #0
 800b502:	d00b      	beq.n	800b51c <xQueueSemaphoreTake+0x104>
	__asm volatile
 800b504:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b508:	f383 8811 	msr	BASEPRI, r3
 800b50c:	f3bf 8f6f 	isb	sy
 800b510:	f3bf 8f4f 	dsb	sy
 800b514:	617b      	str	r3, [r7, #20]
}
 800b516:	bf00      	nop
 800b518:	bf00      	nop
 800b51a:	e7fd      	b.n	800b518 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800b51c:	f002 f816 	bl	800d54c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b520:	2300      	movs	r3, #0
 800b522:	e082      	b.n	800b62a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b524:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b526:	2b00      	cmp	r3, #0
 800b528:	d106      	bne.n	800b538 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b52a:	f107 030c 	add.w	r3, r7, #12
 800b52e:	4618      	mov	r0, r3
 800b530:	f001 f80c 	bl	800c54c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b534:	2301      	movs	r3, #1
 800b536:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b538:	f002 f808 	bl	800d54c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b53c:	f000 fd74 	bl	800c028 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b540:	f001 ffd2 	bl	800d4e8 <vPortEnterCritical>
 800b544:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b546:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b54a:	b25b      	sxtb	r3, r3
 800b54c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b550:	d103      	bne.n	800b55a <xQueueSemaphoreTake+0x142>
 800b552:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b554:	2200      	movs	r2, #0
 800b556:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b55a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b55c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b560:	b25b      	sxtb	r3, r3
 800b562:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b566:	d103      	bne.n	800b570 <xQueueSemaphoreTake+0x158>
 800b568:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b56a:	2200      	movs	r2, #0
 800b56c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b570:	f001 ffec 	bl	800d54c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b574:	463a      	mov	r2, r7
 800b576:	f107 030c 	add.w	r3, r7, #12
 800b57a:	4611      	mov	r1, r2
 800b57c:	4618      	mov	r0, r3
 800b57e:	f000 fffb 	bl	800c578 <xTaskCheckForTimeOut>
 800b582:	4603      	mov	r3, r0
 800b584:	2b00      	cmp	r3, #0
 800b586:	d132      	bne.n	800b5ee <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b588:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b58a:	f000 fa33 	bl	800b9f4 <prvIsQueueEmpty>
 800b58e:	4603      	mov	r3, r0
 800b590:	2b00      	cmp	r3, #0
 800b592:	d026      	beq.n	800b5e2 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b594:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d109      	bne.n	800b5b0 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800b59c:	f001 ffa4 	bl	800d4e8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b5a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b5a2:	689b      	ldr	r3, [r3, #8]
 800b5a4:	4618      	mov	r0, r3
 800b5a6:	f001 f951 	bl	800c84c <xTaskPriorityInherit>
 800b5aa:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800b5ac:	f001 ffce 	bl	800d54c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b5b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b5b2:	3324      	adds	r3, #36	@ 0x24
 800b5b4:	683a      	ldr	r2, [r7, #0]
 800b5b6:	4611      	mov	r1, r2
 800b5b8:	4618      	mov	r0, r3
 800b5ba:	f000 ff11 	bl	800c3e0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b5be:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b5c0:	f000 f9c6 	bl	800b950 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b5c4:	f000 fd3e 	bl	800c044 <xTaskResumeAll>
 800b5c8:	4603      	mov	r3, r0
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	f47f af67 	bne.w	800b49e <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800b5d0:	4b18      	ldr	r3, [pc, #96]	@ (800b634 <xQueueSemaphoreTake+0x21c>)
 800b5d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b5d6:	601a      	str	r2, [r3, #0]
 800b5d8:	f3bf 8f4f 	dsb	sy
 800b5dc:	f3bf 8f6f 	isb	sy
 800b5e0:	e75d      	b.n	800b49e <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800b5e2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b5e4:	f000 f9b4 	bl	800b950 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b5e8:	f000 fd2c 	bl	800c044 <xTaskResumeAll>
 800b5ec:	e757      	b.n	800b49e <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800b5ee:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b5f0:	f000 f9ae 	bl	800b950 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b5f4:	f000 fd26 	bl	800c044 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b5f8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b5fa:	f000 f9fb 	bl	800b9f4 <prvIsQueueEmpty>
 800b5fe:	4603      	mov	r3, r0
 800b600:	2b00      	cmp	r3, #0
 800b602:	f43f af4c 	beq.w	800b49e <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800b606:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d00d      	beq.n	800b628 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800b60c:	f001 ff6c 	bl	800d4e8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800b610:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b612:	f000 f8f5 	bl	800b800 <prvGetDisinheritPriorityAfterTimeout>
 800b616:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800b618:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b61a:	689b      	ldr	r3, [r3, #8]
 800b61c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b61e:	4618      	mov	r0, r3
 800b620:	f001 f9ec 	bl	800c9fc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800b624:	f001 ff92 	bl	800d54c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b628:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b62a:	4618      	mov	r0, r3
 800b62c:	3738      	adds	r7, #56	@ 0x38
 800b62e:	46bd      	mov	sp, r7
 800b630:	bd80      	pop	{r7, pc}
 800b632:	bf00      	nop
 800b634:	e000ed04 	.word	0xe000ed04

0800b638 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800b638:	b580      	push	{r7, lr}
 800b63a:	b08e      	sub	sp, #56	@ 0x38
 800b63c:	af00      	add	r7, sp, #0
 800b63e:	60f8      	str	r0, [r7, #12]
 800b640:	60b9      	str	r1, [r7, #8]
 800b642:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800b648:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d10b      	bne.n	800b666 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800b64e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b652:	f383 8811 	msr	BASEPRI, r3
 800b656:	f3bf 8f6f 	isb	sy
 800b65a:	f3bf 8f4f 	dsb	sy
 800b65e:	623b      	str	r3, [r7, #32]
}
 800b660:	bf00      	nop
 800b662:	bf00      	nop
 800b664:	e7fd      	b.n	800b662 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b666:	68bb      	ldr	r3, [r7, #8]
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d103      	bne.n	800b674 <xQueueReceiveFromISR+0x3c>
 800b66c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b66e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b670:	2b00      	cmp	r3, #0
 800b672:	d101      	bne.n	800b678 <xQueueReceiveFromISR+0x40>
 800b674:	2301      	movs	r3, #1
 800b676:	e000      	b.n	800b67a <xQueueReceiveFromISR+0x42>
 800b678:	2300      	movs	r3, #0
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d10b      	bne.n	800b696 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800b67e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b682:	f383 8811 	msr	BASEPRI, r3
 800b686:	f3bf 8f6f 	isb	sy
 800b68a:	f3bf 8f4f 	dsb	sy
 800b68e:	61fb      	str	r3, [r7, #28]
}
 800b690:	bf00      	nop
 800b692:	bf00      	nop
 800b694:	e7fd      	b.n	800b692 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b696:	f002 f807 	bl	800d6a8 <vPortValidateInterruptPriority>
	__asm volatile
 800b69a:	f3ef 8211 	mrs	r2, BASEPRI
 800b69e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6a2:	f383 8811 	msr	BASEPRI, r3
 800b6a6:	f3bf 8f6f 	isb	sy
 800b6aa:	f3bf 8f4f 	dsb	sy
 800b6ae:	61ba      	str	r2, [r7, #24]
 800b6b0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800b6b2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b6b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b6b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b6ba:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b6bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d02f      	beq.n	800b722 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800b6c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6c4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b6c8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b6cc:	68b9      	ldr	r1, [r7, #8]
 800b6ce:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b6d0:	f000 f918 	bl	800b904 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b6d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6d6:	1e5a      	subs	r2, r3, #1
 800b6d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6da:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800b6dc:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800b6e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6e4:	d112      	bne.n	800b70c <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b6e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6e8:	691b      	ldr	r3, [r3, #16]
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d016      	beq.n	800b71c <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b6ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6f0:	3310      	adds	r3, #16
 800b6f2:	4618      	mov	r0, r3
 800b6f4:	f000 fec6 	bl	800c484 <xTaskRemoveFromEventList>
 800b6f8:	4603      	mov	r3, r0
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d00e      	beq.n	800b71c <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	2b00      	cmp	r3, #0
 800b702:	d00b      	beq.n	800b71c <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	2201      	movs	r2, #1
 800b708:	601a      	str	r2, [r3, #0]
 800b70a:	e007      	b.n	800b71c <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800b70c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b710:	3301      	adds	r3, #1
 800b712:	b2db      	uxtb	r3, r3
 800b714:	b25a      	sxtb	r2, r3
 800b716:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b718:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800b71c:	2301      	movs	r3, #1
 800b71e:	637b      	str	r3, [r7, #52]	@ 0x34
 800b720:	e001      	b.n	800b726 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800b722:	2300      	movs	r3, #0
 800b724:	637b      	str	r3, [r7, #52]	@ 0x34
 800b726:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b728:	613b      	str	r3, [r7, #16]
	__asm volatile
 800b72a:	693b      	ldr	r3, [r7, #16]
 800b72c:	f383 8811 	msr	BASEPRI, r3
}
 800b730:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b732:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800b734:	4618      	mov	r0, r3
 800b736:	3738      	adds	r7, #56	@ 0x38
 800b738:	46bd      	mov	sp, r7
 800b73a:	bd80      	pop	{r7, pc}

0800b73c <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800b73c:	b580      	push	{r7, lr}
 800b73e:	b084      	sub	sp, #16
 800b740:	af00      	add	r7, sp, #0
 800b742:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	2b00      	cmp	r3, #0
 800b748:	d10b      	bne.n	800b762 <uxQueueMessagesWaiting+0x26>
	__asm volatile
 800b74a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b74e:	f383 8811 	msr	BASEPRI, r3
 800b752:	f3bf 8f6f 	isb	sy
 800b756:	f3bf 8f4f 	dsb	sy
 800b75a:	60bb      	str	r3, [r7, #8]
}
 800b75c:	bf00      	nop
 800b75e:	bf00      	nop
 800b760:	e7fd      	b.n	800b75e <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 800b762:	f001 fec1 	bl	800d4e8 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b76a:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800b76c:	f001 feee 	bl	800d54c <vPortExitCritical>

	return uxReturn;
 800b770:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800b772:	4618      	mov	r0, r3
 800b774:	3710      	adds	r7, #16
 800b776:	46bd      	mov	sp, r7
 800b778:	bd80      	pop	{r7, pc}

0800b77a <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 800b77a:	b480      	push	{r7}
 800b77c:	b087      	sub	sp, #28
 800b77e:	af00      	add	r7, sp, #0
 800b780:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800b786:	697b      	ldr	r3, [r7, #20]
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d10b      	bne.n	800b7a4 <uxQueueMessagesWaitingFromISR+0x2a>
	__asm volatile
 800b78c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b790:	f383 8811 	msr	BASEPRI, r3
 800b794:	f3bf 8f6f 	isb	sy
 800b798:	f3bf 8f4f 	dsb	sy
 800b79c:	60fb      	str	r3, [r7, #12]
}
 800b79e:	bf00      	nop
 800b7a0:	bf00      	nop
 800b7a2:	e7fd      	b.n	800b7a0 <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 800b7a4:	697b      	ldr	r3, [r7, #20]
 800b7a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b7a8:	613b      	str	r3, [r7, #16]

	return uxReturn;
 800b7aa:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800b7ac:	4618      	mov	r0, r3
 800b7ae:	371c      	adds	r7, #28
 800b7b0:	46bd      	mov	sp, r7
 800b7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7b6:	4770      	bx	lr

0800b7b8 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800b7b8:	b580      	push	{r7, lr}
 800b7ba:	b084      	sub	sp, #16
 800b7bc:	af00      	add	r7, sp, #0
 800b7be:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d10b      	bne.n	800b7e2 <vQueueDelete+0x2a>
	__asm volatile
 800b7ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7ce:	f383 8811 	msr	BASEPRI, r3
 800b7d2:	f3bf 8f6f 	isb	sy
 800b7d6:	f3bf 8f4f 	dsb	sy
 800b7da:	60bb      	str	r3, [r7, #8]
}
 800b7dc:	bf00      	nop
 800b7de:	bf00      	nop
 800b7e0:	e7fd      	b.n	800b7de <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800b7e2:	68f8      	ldr	r0, [r7, #12]
 800b7e4:	f000 f95e 	bl	800baa4 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d102      	bne.n	800b7f8 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 800b7f2:	68f8      	ldr	r0, [r7, #12]
 800b7f4:	f002 f868 	bl	800d8c8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800b7f8:	bf00      	nop
 800b7fa:	3710      	adds	r7, #16
 800b7fc:	46bd      	mov	sp, r7
 800b7fe:	bd80      	pop	{r7, pc}

0800b800 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800b800:	b480      	push	{r7}
 800b802:	b085      	sub	sp, #20
 800b804:	af00      	add	r7, sp, #0
 800b806:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d006      	beq.n	800b81e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800b81a:	60fb      	str	r3, [r7, #12]
 800b81c:	e001      	b.n	800b822 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800b81e:	2300      	movs	r3, #0
 800b820:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800b822:	68fb      	ldr	r3, [r7, #12]
	}
 800b824:	4618      	mov	r0, r3
 800b826:	3714      	adds	r7, #20
 800b828:	46bd      	mov	sp, r7
 800b82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b82e:	4770      	bx	lr

0800b830 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b830:	b580      	push	{r7, lr}
 800b832:	b086      	sub	sp, #24
 800b834:	af00      	add	r7, sp, #0
 800b836:	60f8      	str	r0, [r7, #12]
 800b838:	60b9      	str	r1, [r7, #8]
 800b83a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b83c:	2300      	movs	r3, #0
 800b83e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b844:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d10d      	bne.n	800b86a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	2b00      	cmp	r3, #0
 800b854:	d14d      	bne.n	800b8f2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	689b      	ldr	r3, [r3, #8]
 800b85a:	4618      	mov	r0, r3
 800b85c:	f001 f85e 	bl	800c91c <xTaskPriorityDisinherit>
 800b860:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	2200      	movs	r2, #0
 800b866:	609a      	str	r2, [r3, #8]
 800b868:	e043      	b.n	800b8f2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d119      	bne.n	800b8a4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	6858      	ldr	r0, [r3, #4]
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b878:	461a      	mov	r2, r3
 800b87a:	68b9      	ldr	r1, [r7, #8]
 800b87c:	f003 fa21 	bl	800ecc2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	685a      	ldr	r2, [r3, #4]
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b888:	441a      	add	r2, r3
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	685a      	ldr	r2, [r3, #4]
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	689b      	ldr	r3, [r3, #8]
 800b896:	429a      	cmp	r2, r3
 800b898:	d32b      	bcc.n	800b8f2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	681a      	ldr	r2, [r3, #0]
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	605a      	str	r2, [r3, #4]
 800b8a2:	e026      	b.n	800b8f2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	68d8      	ldr	r0, [r3, #12]
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b8ac:	461a      	mov	r2, r3
 800b8ae:	68b9      	ldr	r1, [r7, #8]
 800b8b0:	f003 fa07 	bl	800ecc2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	68da      	ldr	r2, [r3, #12]
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b8bc:	425b      	negs	r3, r3
 800b8be:	441a      	add	r2, r3
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	68da      	ldr	r2, [r3, #12]
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	429a      	cmp	r2, r3
 800b8ce:	d207      	bcs.n	800b8e0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	689a      	ldr	r2, [r3, #8]
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b8d8:	425b      	negs	r3, r3
 800b8da:	441a      	add	r2, r3
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	2b02      	cmp	r3, #2
 800b8e4:	d105      	bne.n	800b8f2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b8e6:	693b      	ldr	r3, [r7, #16]
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d002      	beq.n	800b8f2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b8ec:	693b      	ldr	r3, [r7, #16]
 800b8ee:	3b01      	subs	r3, #1
 800b8f0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b8f2:	693b      	ldr	r3, [r7, #16]
 800b8f4:	1c5a      	adds	r2, r3, #1
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800b8fa:	697b      	ldr	r3, [r7, #20]
}
 800b8fc:	4618      	mov	r0, r3
 800b8fe:	3718      	adds	r7, #24
 800b900:	46bd      	mov	sp, r7
 800b902:	bd80      	pop	{r7, pc}

0800b904 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b904:	b580      	push	{r7, lr}
 800b906:	b082      	sub	sp, #8
 800b908:	af00      	add	r7, sp, #0
 800b90a:	6078      	str	r0, [r7, #4]
 800b90c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b912:	2b00      	cmp	r3, #0
 800b914:	d018      	beq.n	800b948 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	68da      	ldr	r2, [r3, #12]
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b91e:	441a      	add	r2, r3
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	68da      	ldr	r2, [r3, #12]
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	689b      	ldr	r3, [r3, #8]
 800b92c:	429a      	cmp	r2, r3
 800b92e:	d303      	bcc.n	800b938 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	681a      	ldr	r2, [r3, #0]
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	68d9      	ldr	r1, [r3, #12]
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b940:	461a      	mov	r2, r3
 800b942:	6838      	ldr	r0, [r7, #0]
 800b944:	f003 f9bd 	bl	800ecc2 <memcpy>
	}
}
 800b948:	bf00      	nop
 800b94a:	3708      	adds	r7, #8
 800b94c:	46bd      	mov	sp, r7
 800b94e:	bd80      	pop	{r7, pc}

0800b950 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b950:	b580      	push	{r7, lr}
 800b952:	b084      	sub	sp, #16
 800b954:	af00      	add	r7, sp, #0
 800b956:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b958:	f001 fdc6 	bl	800d4e8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b962:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b964:	e011      	b.n	800b98a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d012      	beq.n	800b994 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	3324      	adds	r3, #36	@ 0x24
 800b972:	4618      	mov	r0, r3
 800b974:	f000 fd86 	bl	800c484 <xTaskRemoveFromEventList>
 800b978:	4603      	mov	r3, r0
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d001      	beq.n	800b982 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b97e:	f000 fe5f 	bl	800c640 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b982:	7bfb      	ldrb	r3, [r7, #15]
 800b984:	3b01      	subs	r3, #1
 800b986:	b2db      	uxtb	r3, r3
 800b988:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b98a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b98e:	2b00      	cmp	r3, #0
 800b990:	dce9      	bgt.n	800b966 <prvUnlockQueue+0x16>
 800b992:	e000      	b.n	800b996 <prvUnlockQueue+0x46>
					break;
 800b994:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	22ff      	movs	r2, #255	@ 0xff
 800b99a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800b99e:	f001 fdd5 	bl	800d54c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b9a2:	f001 fda1 	bl	800d4e8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b9ac:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b9ae:	e011      	b.n	800b9d4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	691b      	ldr	r3, [r3, #16]
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d012      	beq.n	800b9de <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	3310      	adds	r3, #16
 800b9bc:	4618      	mov	r0, r3
 800b9be:	f000 fd61 	bl	800c484 <xTaskRemoveFromEventList>
 800b9c2:	4603      	mov	r3, r0
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d001      	beq.n	800b9cc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b9c8:	f000 fe3a 	bl	800c640 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b9cc:	7bbb      	ldrb	r3, [r7, #14]
 800b9ce:	3b01      	subs	r3, #1
 800b9d0:	b2db      	uxtb	r3, r3
 800b9d2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b9d4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	dce9      	bgt.n	800b9b0 <prvUnlockQueue+0x60>
 800b9dc:	e000      	b.n	800b9e0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b9de:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	22ff      	movs	r2, #255	@ 0xff
 800b9e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800b9e8:	f001 fdb0 	bl	800d54c <vPortExitCritical>
}
 800b9ec:	bf00      	nop
 800b9ee:	3710      	adds	r7, #16
 800b9f0:	46bd      	mov	sp, r7
 800b9f2:	bd80      	pop	{r7, pc}

0800b9f4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b9f4:	b580      	push	{r7, lr}
 800b9f6:	b084      	sub	sp, #16
 800b9f8:	af00      	add	r7, sp, #0
 800b9fa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b9fc:	f001 fd74 	bl	800d4e8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d102      	bne.n	800ba0e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ba08:	2301      	movs	r3, #1
 800ba0a:	60fb      	str	r3, [r7, #12]
 800ba0c:	e001      	b.n	800ba12 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ba0e:	2300      	movs	r3, #0
 800ba10:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ba12:	f001 fd9b 	bl	800d54c <vPortExitCritical>

	return xReturn;
 800ba16:	68fb      	ldr	r3, [r7, #12]
}
 800ba18:	4618      	mov	r0, r3
 800ba1a:	3710      	adds	r7, #16
 800ba1c:	46bd      	mov	sp, r7
 800ba1e:	bd80      	pop	{r7, pc}

0800ba20 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ba20:	b580      	push	{r7, lr}
 800ba22:	b084      	sub	sp, #16
 800ba24:	af00      	add	r7, sp, #0
 800ba26:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ba28:	f001 fd5e 	bl	800d4e8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ba34:	429a      	cmp	r2, r3
 800ba36:	d102      	bne.n	800ba3e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ba38:	2301      	movs	r3, #1
 800ba3a:	60fb      	str	r3, [r7, #12]
 800ba3c:	e001      	b.n	800ba42 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ba3e:	2300      	movs	r3, #0
 800ba40:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ba42:	f001 fd83 	bl	800d54c <vPortExitCritical>

	return xReturn;
 800ba46:	68fb      	ldr	r3, [r7, #12]
}
 800ba48:	4618      	mov	r0, r3
 800ba4a:	3710      	adds	r7, #16
 800ba4c:	46bd      	mov	sp, r7
 800ba4e:	bd80      	pop	{r7, pc}

0800ba50 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800ba50:	b480      	push	{r7}
 800ba52:	b085      	sub	sp, #20
 800ba54:	af00      	add	r7, sp, #0
 800ba56:	6078      	str	r0, [r7, #4]
 800ba58:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ba5a:	2300      	movs	r3, #0
 800ba5c:	60fb      	str	r3, [r7, #12]
 800ba5e:	e014      	b.n	800ba8a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800ba60:	4a0f      	ldr	r2, [pc, #60]	@ (800baa0 <vQueueAddToRegistry+0x50>)
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d10b      	bne.n	800ba84 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800ba6c:	490c      	ldr	r1, [pc, #48]	@ (800baa0 <vQueueAddToRegistry+0x50>)
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	683a      	ldr	r2, [r7, #0]
 800ba72:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800ba76:	4a0a      	ldr	r2, [pc, #40]	@ (800baa0 <vQueueAddToRegistry+0x50>)
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	00db      	lsls	r3, r3, #3
 800ba7c:	4413      	add	r3, r2
 800ba7e:	687a      	ldr	r2, [r7, #4]
 800ba80:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800ba82:	e006      	b.n	800ba92 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	3301      	adds	r3, #1
 800ba88:	60fb      	str	r3, [r7, #12]
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	2b07      	cmp	r3, #7
 800ba8e:	d9e7      	bls.n	800ba60 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800ba90:	bf00      	nop
 800ba92:	bf00      	nop
 800ba94:	3714      	adds	r7, #20
 800ba96:	46bd      	mov	sp, r7
 800ba98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba9c:	4770      	bx	lr
 800ba9e:	bf00      	nop
 800baa0:	200011bc 	.word	0x200011bc

0800baa4 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800baa4:	b480      	push	{r7}
 800baa6:	b085      	sub	sp, #20
 800baa8:	af00      	add	r7, sp, #0
 800baaa:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800baac:	2300      	movs	r3, #0
 800baae:	60fb      	str	r3, [r7, #12]
 800bab0:	e016      	b.n	800bae0 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800bab2:	4a10      	ldr	r2, [pc, #64]	@ (800baf4 <vQueueUnregisterQueue+0x50>)
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	00db      	lsls	r3, r3, #3
 800bab8:	4413      	add	r3, r2
 800baba:	685b      	ldr	r3, [r3, #4]
 800babc:	687a      	ldr	r2, [r7, #4]
 800babe:	429a      	cmp	r2, r3
 800bac0:	d10b      	bne.n	800bada <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800bac2:	4a0c      	ldr	r2, [pc, #48]	@ (800baf4 <vQueueUnregisterQueue+0x50>)
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	2100      	movs	r1, #0
 800bac8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800bacc:	4a09      	ldr	r2, [pc, #36]	@ (800baf4 <vQueueUnregisterQueue+0x50>)
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	00db      	lsls	r3, r3, #3
 800bad2:	4413      	add	r3, r2
 800bad4:	2200      	movs	r2, #0
 800bad6:	605a      	str	r2, [r3, #4]
				break;
 800bad8:	e006      	b.n	800bae8 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	3301      	adds	r3, #1
 800bade:	60fb      	str	r3, [r7, #12]
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	2b07      	cmp	r3, #7
 800bae4:	d9e5      	bls.n	800bab2 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800bae6:	bf00      	nop
 800bae8:	bf00      	nop
 800baea:	3714      	adds	r7, #20
 800baec:	46bd      	mov	sp, r7
 800baee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baf2:	4770      	bx	lr
 800baf4:	200011bc 	.word	0x200011bc

0800baf8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800baf8:	b580      	push	{r7, lr}
 800bafa:	b086      	sub	sp, #24
 800bafc:	af00      	add	r7, sp, #0
 800bafe:	60f8      	str	r0, [r7, #12]
 800bb00:	60b9      	str	r1, [r7, #8]
 800bb02:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800bb08:	f001 fcee 	bl	800d4e8 <vPortEnterCritical>
 800bb0c:	697b      	ldr	r3, [r7, #20]
 800bb0e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800bb12:	b25b      	sxtb	r3, r3
 800bb14:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb18:	d103      	bne.n	800bb22 <vQueueWaitForMessageRestricted+0x2a>
 800bb1a:	697b      	ldr	r3, [r7, #20]
 800bb1c:	2200      	movs	r2, #0
 800bb1e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800bb22:	697b      	ldr	r3, [r7, #20]
 800bb24:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800bb28:	b25b      	sxtb	r3, r3
 800bb2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb2e:	d103      	bne.n	800bb38 <vQueueWaitForMessageRestricted+0x40>
 800bb30:	697b      	ldr	r3, [r7, #20]
 800bb32:	2200      	movs	r2, #0
 800bb34:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800bb38:	f001 fd08 	bl	800d54c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800bb3c:	697b      	ldr	r3, [r7, #20]
 800bb3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d106      	bne.n	800bb52 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800bb44:	697b      	ldr	r3, [r7, #20]
 800bb46:	3324      	adds	r3, #36	@ 0x24
 800bb48:	687a      	ldr	r2, [r7, #4]
 800bb4a:	68b9      	ldr	r1, [r7, #8]
 800bb4c:	4618      	mov	r0, r3
 800bb4e:	f000 fc6d 	bl	800c42c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800bb52:	6978      	ldr	r0, [r7, #20]
 800bb54:	f7ff fefc 	bl	800b950 <prvUnlockQueue>
	}
 800bb58:	bf00      	nop
 800bb5a:	3718      	adds	r7, #24
 800bb5c:	46bd      	mov	sp, r7
 800bb5e:	bd80      	pop	{r7, pc}

0800bb60 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800bb60:	b580      	push	{r7, lr}
 800bb62:	b08e      	sub	sp, #56	@ 0x38
 800bb64:	af04      	add	r7, sp, #16
 800bb66:	60f8      	str	r0, [r7, #12]
 800bb68:	60b9      	str	r1, [r7, #8]
 800bb6a:	607a      	str	r2, [r7, #4]
 800bb6c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800bb6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d10b      	bne.n	800bb8c <xTaskCreateStatic+0x2c>
	__asm volatile
 800bb74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb78:	f383 8811 	msr	BASEPRI, r3
 800bb7c:	f3bf 8f6f 	isb	sy
 800bb80:	f3bf 8f4f 	dsb	sy
 800bb84:	623b      	str	r3, [r7, #32]
}
 800bb86:	bf00      	nop
 800bb88:	bf00      	nop
 800bb8a:	e7fd      	b.n	800bb88 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800bb8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d10b      	bne.n	800bbaa <xTaskCreateStatic+0x4a>
	__asm volatile
 800bb92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb96:	f383 8811 	msr	BASEPRI, r3
 800bb9a:	f3bf 8f6f 	isb	sy
 800bb9e:	f3bf 8f4f 	dsb	sy
 800bba2:	61fb      	str	r3, [r7, #28]
}
 800bba4:	bf00      	nop
 800bba6:	bf00      	nop
 800bba8:	e7fd      	b.n	800bba6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800bbaa:	23a8      	movs	r3, #168	@ 0xa8
 800bbac:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800bbae:	693b      	ldr	r3, [r7, #16]
 800bbb0:	2ba8      	cmp	r3, #168	@ 0xa8
 800bbb2:	d00b      	beq.n	800bbcc <xTaskCreateStatic+0x6c>
	__asm volatile
 800bbb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bbb8:	f383 8811 	msr	BASEPRI, r3
 800bbbc:	f3bf 8f6f 	isb	sy
 800bbc0:	f3bf 8f4f 	dsb	sy
 800bbc4:	61bb      	str	r3, [r7, #24]
}
 800bbc6:	bf00      	nop
 800bbc8:	bf00      	nop
 800bbca:	e7fd      	b.n	800bbc8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800bbcc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800bbce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d01e      	beq.n	800bc12 <xTaskCreateStatic+0xb2>
 800bbd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d01b      	beq.n	800bc12 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800bbda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbdc:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800bbde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbe0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800bbe2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800bbe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbe6:	2202      	movs	r2, #2
 800bbe8:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800bbec:	2300      	movs	r3, #0
 800bbee:	9303      	str	r3, [sp, #12]
 800bbf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbf2:	9302      	str	r3, [sp, #8]
 800bbf4:	f107 0314 	add.w	r3, r7, #20
 800bbf8:	9301      	str	r3, [sp, #4]
 800bbfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bbfc:	9300      	str	r3, [sp, #0]
 800bbfe:	683b      	ldr	r3, [r7, #0]
 800bc00:	687a      	ldr	r2, [r7, #4]
 800bc02:	68b9      	ldr	r1, [r7, #8]
 800bc04:	68f8      	ldr	r0, [r7, #12]
 800bc06:	f000 f851 	bl	800bcac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bc0a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800bc0c:	f000 f8f6 	bl	800bdfc <prvAddNewTaskToReadyList>
 800bc10:	e001      	b.n	800bc16 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800bc12:	2300      	movs	r3, #0
 800bc14:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800bc16:	697b      	ldr	r3, [r7, #20]
	}
 800bc18:	4618      	mov	r0, r3
 800bc1a:	3728      	adds	r7, #40	@ 0x28
 800bc1c:	46bd      	mov	sp, r7
 800bc1e:	bd80      	pop	{r7, pc}

0800bc20 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800bc20:	b580      	push	{r7, lr}
 800bc22:	b08c      	sub	sp, #48	@ 0x30
 800bc24:	af04      	add	r7, sp, #16
 800bc26:	60f8      	str	r0, [r7, #12]
 800bc28:	60b9      	str	r1, [r7, #8]
 800bc2a:	603b      	str	r3, [r7, #0]
 800bc2c:	4613      	mov	r3, r2
 800bc2e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800bc30:	88fb      	ldrh	r3, [r7, #6]
 800bc32:	009b      	lsls	r3, r3, #2
 800bc34:	4618      	mov	r0, r3
 800bc36:	f001 fd79 	bl	800d72c <pvPortMalloc>
 800bc3a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800bc3c:	697b      	ldr	r3, [r7, #20]
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d00e      	beq.n	800bc60 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800bc42:	20a8      	movs	r0, #168	@ 0xa8
 800bc44:	f001 fd72 	bl	800d72c <pvPortMalloc>
 800bc48:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800bc4a:	69fb      	ldr	r3, [r7, #28]
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d003      	beq.n	800bc58 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800bc50:	69fb      	ldr	r3, [r7, #28]
 800bc52:	697a      	ldr	r2, [r7, #20]
 800bc54:	631a      	str	r2, [r3, #48]	@ 0x30
 800bc56:	e005      	b.n	800bc64 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800bc58:	6978      	ldr	r0, [r7, #20]
 800bc5a:	f001 fe35 	bl	800d8c8 <vPortFree>
 800bc5e:	e001      	b.n	800bc64 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800bc60:	2300      	movs	r3, #0
 800bc62:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800bc64:	69fb      	ldr	r3, [r7, #28]
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d017      	beq.n	800bc9a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800bc6a:	69fb      	ldr	r3, [r7, #28]
 800bc6c:	2200      	movs	r2, #0
 800bc6e:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800bc72:	88fa      	ldrh	r2, [r7, #6]
 800bc74:	2300      	movs	r3, #0
 800bc76:	9303      	str	r3, [sp, #12]
 800bc78:	69fb      	ldr	r3, [r7, #28]
 800bc7a:	9302      	str	r3, [sp, #8]
 800bc7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc7e:	9301      	str	r3, [sp, #4]
 800bc80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc82:	9300      	str	r3, [sp, #0]
 800bc84:	683b      	ldr	r3, [r7, #0]
 800bc86:	68b9      	ldr	r1, [r7, #8]
 800bc88:	68f8      	ldr	r0, [r7, #12]
 800bc8a:	f000 f80f 	bl	800bcac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bc8e:	69f8      	ldr	r0, [r7, #28]
 800bc90:	f000 f8b4 	bl	800bdfc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800bc94:	2301      	movs	r3, #1
 800bc96:	61bb      	str	r3, [r7, #24]
 800bc98:	e002      	b.n	800bca0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800bc9a:	f04f 33ff 	mov.w	r3, #4294967295
 800bc9e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800bca0:	69bb      	ldr	r3, [r7, #24]
	}
 800bca2:	4618      	mov	r0, r3
 800bca4:	3720      	adds	r7, #32
 800bca6:	46bd      	mov	sp, r7
 800bca8:	bd80      	pop	{r7, pc}
	...

0800bcac <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800bcac:	b580      	push	{r7, lr}
 800bcae:	b088      	sub	sp, #32
 800bcb0:	af00      	add	r7, sp, #0
 800bcb2:	60f8      	str	r0, [r7, #12]
 800bcb4:	60b9      	str	r1, [r7, #8]
 800bcb6:	607a      	str	r2, [r7, #4]
 800bcb8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800bcba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bcbc:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	009b      	lsls	r3, r3, #2
 800bcc2:	461a      	mov	r2, r3
 800bcc4:	21a5      	movs	r1, #165	@ 0xa5
 800bcc6:	f002 fefd 	bl	800eac4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800bcca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bccc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800bcd4:	3b01      	subs	r3, #1
 800bcd6:	009b      	lsls	r3, r3, #2
 800bcd8:	4413      	add	r3, r2
 800bcda:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800bcdc:	69bb      	ldr	r3, [r7, #24]
 800bcde:	f023 0307 	bic.w	r3, r3, #7
 800bce2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800bce4:	69bb      	ldr	r3, [r7, #24]
 800bce6:	f003 0307 	and.w	r3, r3, #7
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d00b      	beq.n	800bd06 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800bcee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bcf2:	f383 8811 	msr	BASEPRI, r3
 800bcf6:	f3bf 8f6f 	isb	sy
 800bcfa:	f3bf 8f4f 	dsb	sy
 800bcfe:	617b      	str	r3, [r7, #20]
}
 800bd00:	bf00      	nop
 800bd02:	bf00      	nop
 800bd04:	e7fd      	b.n	800bd02 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800bd06:	68bb      	ldr	r3, [r7, #8]
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d01f      	beq.n	800bd4c <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bd0c:	2300      	movs	r3, #0
 800bd0e:	61fb      	str	r3, [r7, #28]
 800bd10:	e012      	b.n	800bd38 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800bd12:	68ba      	ldr	r2, [r7, #8]
 800bd14:	69fb      	ldr	r3, [r7, #28]
 800bd16:	4413      	add	r3, r2
 800bd18:	7819      	ldrb	r1, [r3, #0]
 800bd1a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bd1c:	69fb      	ldr	r3, [r7, #28]
 800bd1e:	4413      	add	r3, r2
 800bd20:	3334      	adds	r3, #52	@ 0x34
 800bd22:	460a      	mov	r2, r1
 800bd24:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800bd26:	68ba      	ldr	r2, [r7, #8]
 800bd28:	69fb      	ldr	r3, [r7, #28]
 800bd2a:	4413      	add	r3, r2
 800bd2c:	781b      	ldrb	r3, [r3, #0]
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d006      	beq.n	800bd40 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bd32:	69fb      	ldr	r3, [r7, #28]
 800bd34:	3301      	adds	r3, #1
 800bd36:	61fb      	str	r3, [r7, #28]
 800bd38:	69fb      	ldr	r3, [r7, #28]
 800bd3a:	2b0f      	cmp	r3, #15
 800bd3c:	d9e9      	bls.n	800bd12 <prvInitialiseNewTask+0x66>
 800bd3e:	e000      	b.n	800bd42 <prvInitialiseNewTask+0x96>
			{
				break;
 800bd40:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800bd42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd44:	2200      	movs	r2, #0
 800bd46:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800bd4a:	e003      	b.n	800bd54 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800bd4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd4e:	2200      	movs	r2, #0
 800bd50:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800bd54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd56:	2b37      	cmp	r3, #55	@ 0x37
 800bd58:	d901      	bls.n	800bd5e <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800bd5a:	2337      	movs	r3, #55	@ 0x37
 800bd5c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800bd5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd60:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bd62:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800bd64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd66:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bd68:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800bd6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd6c:	2200      	movs	r2, #0
 800bd6e:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800bd70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd72:	3304      	adds	r3, #4
 800bd74:	4618      	mov	r0, r3
 800bd76:	f7fe fdf5 	bl	800a964 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800bd7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd7c:	3318      	adds	r3, #24
 800bd7e:	4618      	mov	r0, r3
 800bd80:	f7fe fdf0 	bl	800a964 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800bd84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd86:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bd88:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bd8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd8c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800bd90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd92:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800bd94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd96:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bd98:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800bd9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd9c:	2200      	movs	r2, #0
 800bd9e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800bda2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bda4:	2200      	movs	r2, #0
 800bda6:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800bdaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bdac:	3354      	adds	r3, #84	@ 0x54
 800bdae:	224c      	movs	r2, #76	@ 0x4c
 800bdb0:	2100      	movs	r1, #0
 800bdb2:	4618      	mov	r0, r3
 800bdb4:	f002 fe86 	bl	800eac4 <memset>
 800bdb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bdba:	4a0d      	ldr	r2, [pc, #52]	@ (800bdf0 <prvInitialiseNewTask+0x144>)
 800bdbc:	659a      	str	r2, [r3, #88]	@ 0x58
 800bdbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bdc0:	4a0c      	ldr	r2, [pc, #48]	@ (800bdf4 <prvInitialiseNewTask+0x148>)
 800bdc2:	65da      	str	r2, [r3, #92]	@ 0x5c
 800bdc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bdc6:	4a0c      	ldr	r2, [pc, #48]	@ (800bdf8 <prvInitialiseNewTask+0x14c>)
 800bdc8:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800bdca:	683a      	ldr	r2, [r7, #0]
 800bdcc:	68f9      	ldr	r1, [r7, #12]
 800bdce:	69b8      	ldr	r0, [r7, #24]
 800bdd0:	f001 fa5a 	bl	800d288 <pxPortInitialiseStack>
 800bdd4:	4602      	mov	r2, r0
 800bdd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bdd8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800bdda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d002      	beq.n	800bde6 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800bde0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bde2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bde4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bde6:	bf00      	nop
 800bde8:	3720      	adds	r7, #32
 800bdea:	46bd      	mov	sp, r7
 800bdec:	bd80      	pop	{r7, pc}
 800bdee:	bf00      	nop
 800bdf0:	20003f60 	.word	0x20003f60
 800bdf4:	20003fc8 	.word	0x20003fc8
 800bdf8:	20004030 	.word	0x20004030

0800bdfc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800bdfc:	b580      	push	{r7, lr}
 800bdfe:	b082      	sub	sp, #8
 800be00:	af00      	add	r7, sp, #0
 800be02:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800be04:	f001 fb70 	bl	800d4e8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800be08:	4b2d      	ldr	r3, [pc, #180]	@ (800bec0 <prvAddNewTaskToReadyList+0xc4>)
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	3301      	adds	r3, #1
 800be0e:	4a2c      	ldr	r2, [pc, #176]	@ (800bec0 <prvAddNewTaskToReadyList+0xc4>)
 800be10:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800be12:	4b2c      	ldr	r3, [pc, #176]	@ (800bec4 <prvAddNewTaskToReadyList+0xc8>)
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	2b00      	cmp	r3, #0
 800be18:	d109      	bne.n	800be2e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800be1a:	4a2a      	ldr	r2, [pc, #168]	@ (800bec4 <prvAddNewTaskToReadyList+0xc8>)
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800be20:	4b27      	ldr	r3, [pc, #156]	@ (800bec0 <prvAddNewTaskToReadyList+0xc4>)
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	2b01      	cmp	r3, #1
 800be26:	d110      	bne.n	800be4a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800be28:	f000 fc2e 	bl	800c688 <prvInitialiseTaskLists>
 800be2c:	e00d      	b.n	800be4a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800be2e:	4b26      	ldr	r3, [pc, #152]	@ (800bec8 <prvAddNewTaskToReadyList+0xcc>)
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	2b00      	cmp	r3, #0
 800be34:	d109      	bne.n	800be4a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800be36:	4b23      	ldr	r3, [pc, #140]	@ (800bec4 <prvAddNewTaskToReadyList+0xc8>)
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be40:	429a      	cmp	r2, r3
 800be42:	d802      	bhi.n	800be4a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800be44:	4a1f      	ldr	r2, [pc, #124]	@ (800bec4 <prvAddNewTaskToReadyList+0xc8>)
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800be4a:	4b20      	ldr	r3, [pc, #128]	@ (800becc <prvAddNewTaskToReadyList+0xd0>)
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	3301      	adds	r3, #1
 800be50:	4a1e      	ldr	r2, [pc, #120]	@ (800becc <prvAddNewTaskToReadyList+0xd0>)
 800be52:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800be54:	4b1d      	ldr	r3, [pc, #116]	@ (800becc <prvAddNewTaskToReadyList+0xd0>)
 800be56:	681a      	ldr	r2, [r3, #0]
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800be60:	4b1b      	ldr	r3, [pc, #108]	@ (800bed0 <prvAddNewTaskToReadyList+0xd4>)
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	429a      	cmp	r2, r3
 800be66:	d903      	bls.n	800be70 <prvAddNewTaskToReadyList+0x74>
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be6c:	4a18      	ldr	r2, [pc, #96]	@ (800bed0 <prvAddNewTaskToReadyList+0xd4>)
 800be6e:	6013      	str	r3, [r2, #0]
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800be74:	4613      	mov	r3, r2
 800be76:	009b      	lsls	r3, r3, #2
 800be78:	4413      	add	r3, r2
 800be7a:	009b      	lsls	r3, r3, #2
 800be7c:	4a15      	ldr	r2, [pc, #84]	@ (800bed4 <prvAddNewTaskToReadyList+0xd8>)
 800be7e:	441a      	add	r2, r3
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	3304      	adds	r3, #4
 800be84:	4619      	mov	r1, r3
 800be86:	4610      	mov	r0, r2
 800be88:	f7fe fd79 	bl	800a97e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800be8c:	f001 fb5e 	bl	800d54c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800be90:	4b0d      	ldr	r3, [pc, #52]	@ (800bec8 <prvAddNewTaskToReadyList+0xcc>)
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	2b00      	cmp	r3, #0
 800be96:	d00e      	beq.n	800beb6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800be98:	4b0a      	ldr	r3, [pc, #40]	@ (800bec4 <prvAddNewTaskToReadyList+0xc8>)
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bea2:	429a      	cmp	r2, r3
 800bea4:	d207      	bcs.n	800beb6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800bea6:	4b0c      	ldr	r3, [pc, #48]	@ (800bed8 <prvAddNewTaskToReadyList+0xdc>)
 800bea8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800beac:	601a      	str	r2, [r3, #0]
 800beae:	f3bf 8f4f 	dsb	sy
 800beb2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800beb6:	bf00      	nop
 800beb8:	3708      	adds	r7, #8
 800beba:	46bd      	mov	sp, r7
 800bebc:	bd80      	pop	{r7, pc}
 800bebe:	bf00      	nop
 800bec0:	200016d0 	.word	0x200016d0
 800bec4:	200011fc 	.word	0x200011fc
 800bec8:	200016dc 	.word	0x200016dc
 800becc:	200016ec 	.word	0x200016ec
 800bed0:	200016d8 	.word	0x200016d8
 800bed4:	20001200 	.word	0x20001200
 800bed8:	e000ed04 	.word	0xe000ed04

0800bedc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800bedc:	b580      	push	{r7, lr}
 800bede:	b084      	sub	sp, #16
 800bee0:	af00      	add	r7, sp, #0
 800bee2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800bee4:	2300      	movs	r3, #0
 800bee6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	2b00      	cmp	r3, #0
 800beec:	d018      	beq.n	800bf20 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800beee:	4b14      	ldr	r3, [pc, #80]	@ (800bf40 <vTaskDelay+0x64>)
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d00b      	beq.n	800bf0e <vTaskDelay+0x32>
	__asm volatile
 800bef6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800befa:	f383 8811 	msr	BASEPRI, r3
 800befe:	f3bf 8f6f 	isb	sy
 800bf02:	f3bf 8f4f 	dsb	sy
 800bf06:	60bb      	str	r3, [r7, #8]
}
 800bf08:	bf00      	nop
 800bf0a:	bf00      	nop
 800bf0c:	e7fd      	b.n	800bf0a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800bf0e:	f000 f88b 	bl	800c028 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800bf12:	2100      	movs	r1, #0
 800bf14:	6878      	ldr	r0, [r7, #4]
 800bf16:	f000 fe09 	bl	800cb2c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800bf1a:	f000 f893 	bl	800c044 <xTaskResumeAll>
 800bf1e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d107      	bne.n	800bf36 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800bf26:	4b07      	ldr	r3, [pc, #28]	@ (800bf44 <vTaskDelay+0x68>)
 800bf28:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bf2c:	601a      	str	r2, [r3, #0]
 800bf2e:	f3bf 8f4f 	dsb	sy
 800bf32:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bf36:	bf00      	nop
 800bf38:	3710      	adds	r7, #16
 800bf3a:	46bd      	mov	sp, r7
 800bf3c:	bd80      	pop	{r7, pc}
 800bf3e:	bf00      	nop
 800bf40:	200016f8 	.word	0x200016f8
 800bf44:	e000ed04 	.word	0xe000ed04

0800bf48 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800bf48:	b580      	push	{r7, lr}
 800bf4a:	b08a      	sub	sp, #40	@ 0x28
 800bf4c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800bf4e:	2300      	movs	r3, #0
 800bf50:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800bf52:	2300      	movs	r3, #0
 800bf54:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800bf56:	463a      	mov	r2, r7
 800bf58:	1d39      	adds	r1, r7, #4
 800bf5a:	f107 0308 	add.w	r3, r7, #8
 800bf5e:	4618      	mov	r0, r3
 800bf60:	f7fe fcac 	bl	800a8bc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800bf64:	6839      	ldr	r1, [r7, #0]
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	68ba      	ldr	r2, [r7, #8]
 800bf6a:	9202      	str	r2, [sp, #8]
 800bf6c:	9301      	str	r3, [sp, #4]
 800bf6e:	2300      	movs	r3, #0
 800bf70:	9300      	str	r3, [sp, #0]
 800bf72:	2300      	movs	r3, #0
 800bf74:	460a      	mov	r2, r1
 800bf76:	4924      	ldr	r1, [pc, #144]	@ (800c008 <vTaskStartScheduler+0xc0>)
 800bf78:	4824      	ldr	r0, [pc, #144]	@ (800c00c <vTaskStartScheduler+0xc4>)
 800bf7a:	f7ff fdf1 	bl	800bb60 <xTaskCreateStatic>
 800bf7e:	4603      	mov	r3, r0
 800bf80:	4a23      	ldr	r2, [pc, #140]	@ (800c010 <vTaskStartScheduler+0xc8>)
 800bf82:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800bf84:	4b22      	ldr	r3, [pc, #136]	@ (800c010 <vTaskStartScheduler+0xc8>)
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d002      	beq.n	800bf92 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800bf8c:	2301      	movs	r3, #1
 800bf8e:	617b      	str	r3, [r7, #20]
 800bf90:	e001      	b.n	800bf96 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800bf92:	2300      	movs	r3, #0
 800bf94:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800bf96:	697b      	ldr	r3, [r7, #20]
 800bf98:	2b01      	cmp	r3, #1
 800bf9a:	d102      	bne.n	800bfa2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800bf9c:	f000 fe1a 	bl	800cbd4 <xTimerCreateTimerTask>
 800bfa0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800bfa2:	697b      	ldr	r3, [r7, #20]
 800bfa4:	2b01      	cmp	r3, #1
 800bfa6:	d11b      	bne.n	800bfe0 <vTaskStartScheduler+0x98>
	__asm volatile
 800bfa8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bfac:	f383 8811 	msr	BASEPRI, r3
 800bfb0:	f3bf 8f6f 	isb	sy
 800bfb4:	f3bf 8f4f 	dsb	sy
 800bfb8:	613b      	str	r3, [r7, #16]
}
 800bfba:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800bfbc:	4b15      	ldr	r3, [pc, #84]	@ (800c014 <vTaskStartScheduler+0xcc>)
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	3354      	adds	r3, #84	@ 0x54
 800bfc2:	4a15      	ldr	r2, [pc, #84]	@ (800c018 <vTaskStartScheduler+0xd0>)
 800bfc4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800bfc6:	4b15      	ldr	r3, [pc, #84]	@ (800c01c <vTaskStartScheduler+0xd4>)
 800bfc8:	f04f 32ff 	mov.w	r2, #4294967295
 800bfcc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800bfce:	4b14      	ldr	r3, [pc, #80]	@ (800c020 <vTaskStartScheduler+0xd8>)
 800bfd0:	2201      	movs	r2, #1
 800bfd2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800bfd4:	4b13      	ldr	r3, [pc, #76]	@ (800c024 <vTaskStartScheduler+0xdc>)
 800bfd6:	2200      	movs	r2, #0
 800bfd8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800bfda:	f001 f9e1 	bl	800d3a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800bfde:	e00f      	b.n	800c000 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800bfe0:	697b      	ldr	r3, [r7, #20]
 800bfe2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bfe6:	d10b      	bne.n	800c000 <vTaskStartScheduler+0xb8>
	__asm volatile
 800bfe8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bfec:	f383 8811 	msr	BASEPRI, r3
 800bff0:	f3bf 8f6f 	isb	sy
 800bff4:	f3bf 8f4f 	dsb	sy
 800bff8:	60fb      	str	r3, [r7, #12]
}
 800bffa:	bf00      	nop
 800bffc:	bf00      	nop
 800bffe:	e7fd      	b.n	800bffc <vTaskStartScheduler+0xb4>
}
 800c000:	bf00      	nop
 800c002:	3718      	adds	r7, #24
 800c004:	46bd      	mov	sp, r7
 800c006:	bd80      	pop	{r7, pc}
 800c008:	08010f84 	.word	0x08010f84
 800c00c:	0800c659 	.word	0x0800c659
 800c010:	200016f4 	.word	0x200016f4
 800c014:	200011fc 	.word	0x200011fc
 800c018:	200001ac 	.word	0x200001ac
 800c01c:	200016f0 	.word	0x200016f0
 800c020:	200016dc 	.word	0x200016dc
 800c024:	200016d4 	.word	0x200016d4

0800c028 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c028:	b480      	push	{r7}
 800c02a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800c02c:	4b04      	ldr	r3, [pc, #16]	@ (800c040 <vTaskSuspendAll+0x18>)
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	3301      	adds	r3, #1
 800c032:	4a03      	ldr	r2, [pc, #12]	@ (800c040 <vTaskSuspendAll+0x18>)
 800c034:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800c036:	bf00      	nop
 800c038:	46bd      	mov	sp, r7
 800c03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c03e:	4770      	bx	lr
 800c040:	200016f8 	.word	0x200016f8

0800c044 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c044:	b580      	push	{r7, lr}
 800c046:	b084      	sub	sp, #16
 800c048:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c04a:	2300      	movs	r3, #0
 800c04c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c04e:	2300      	movs	r3, #0
 800c050:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c052:	4b42      	ldr	r3, [pc, #264]	@ (800c15c <xTaskResumeAll+0x118>)
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	2b00      	cmp	r3, #0
 800c058:	d10b      	bne.n	800c072 <xTaskResumeAll+0x2e>
	__asm volatile
 800c05a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c05e:	f383 8811 	msr	BASEPRI, r3
 800c062:	f3bf 8f6f 	isb	sy
 800c066:	f3bf 8f4f 	dsb	sy
 800c06a:	603b      	str	r3, [r7, #0]
}
 800c06c:	bf00      	nop
 800c06e:	bf00      	nop
 800c070:	e7fd      	b.n	800c06e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c072:	f001 fa39 	bl	800d4e8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c076:	4b39      	ldr	r3, [pc, #228]	@ (800c15c <xTaskResumeAll+0x118>)
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	3b01      	subs	r3, #1
 800c07c:	4a37      	ldr	r2, [pc, #220]	@ (800c15c <xTaskResumeAll+0x118>)
 800c07e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c080:	4b36      	ldr	r3, [pc, #216]	@ (800c15c <xTaskResumeAll+0x118>)
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	2b00      	cmp	r3, #0
 800c086:	d162      	bne.n	800c14e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c088:	4b35      	ldr	r3, [pc, #212]	@ (800c160 <xTaskResumeAll+0x11c>)
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d05e      	beq.n	800c14e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c090:	e02f      	b.n	800c0f2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c092:	4b34      	ldr	r3, [pc, #208]	@ (800c164 <xTaskResumeAll+0x120>)
 800c094:	68db      	ldr	r3, [r3, #12]
 800c096:	68db      	ldr	r3, [r3, #12]
 800c098:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	3318      	adds	r3, #24
 800c09e:	4618      	mov	r0, r3
 800c0a0:	f7fe fcca 	bl	800aa38 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	3304      	adds	r3, #4
 800c0a8:	4618      	mov	r0, r3
 800c0aa:	f7fe fcc5 	bl	800aa38 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c0b2:	4b2d      	ldr	r3, [pc, #180]	@ (800c168 <xTaskResumeAll+0x124>)
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	429a      	cmp	r2, r3
 800c0b8:	d903      	bls.n	800c0c2 <xTaskResumeAll+0x7e>
 800c0ba:	68fb      	ldr	r3, [r7, #12]
 800c0bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c0be:	4a2a      	ldr	r2, [pc, #168]	@ (800c168 <xTaskResumeAll+0x124>)
 800c0c0:	6013      	str	r3, [r2, #0]
 800c0c2:	68fb      	ldr	r3, [r7, #12]
 800c0c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c0c6:	4613      	mov	r3, r2
 800c0c8:	009b      	lsls	r3, r3, #2
 800c0ca:	4413      	add	r3, r2
 800c0cc:	009b      	lsls	r3, r3, #2
 800c0ce:	4a27      	ldr	r2, [pc, #156]	@ (800c16c <xTaskResumeAll+0x128>)
 800c0d0:	441a      	add	r2, r3
 800c0d2:	68fb      	ldr	r3, [r7, #12]
 800c0d4:	3304      	adds	r3, #4
 800c0d6:	4619      	mov	r1, r3
 800c0d8:	4610      	mov	r0, r2
 800c0da:	f7fe fc50 	bl	800a97e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c0de:	68fb      	ldr	r3, [r7, #12]
 800c0e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c0e2:	4b23      	ldr	r3, [pc, #140]	@ (800c170 <xTaskResumeAll+0x12c>)
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c0e8:	429a      	cmp	r2, r3
 800c0ea:	d302      	bcc.n	800c0f2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800c0ec:	4b21      	ldr	r3, [pc, #132]	@ (800c174 <xTaskResumeAll+0x130>)
 800c0ee:	2201      	movs	r2, #1
 800c0f0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c0f2:	4b1c      	ldr	r3, [pc, #112]	@ (800c164 <xTaskResumeAll+0x120>)
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d1cb      	bne.n	800c092 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d001      	beq.n	800c104 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c100:	f000 fb66 	bl	800c7d0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800c104:	4b1c      	ldr	r3, [pc, #112]	@ (800c178 <xTaskResumeAll+0x134>)
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d010      	beq.n	800c132 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c110:	f000 f846 	bl	800c1a0 <xTaskIncrementTick>
 800c114:	4603      	mov	r3, r0
 800c116:	2b00      	cmp	r3, #0
 800c118:	d002      	beq.n	800c120 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800c11a:	4b16      	ldr	r3, [pc, #88]	@ (800c174 <xTaskResumeAll+0x130>)
 800c11c:	2201      	movs	r2, #1
 800c11e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	3b01      	subs	r3, #1
 800c124:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d1f1      	bne.n	800c110 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800c12c:	4b12      	ldr	r3, [pc, #72]	@ (800c178 <xTaskResumeAll+0x134>)
 800c12e:	2200      	movs	r2, #0
 800c130:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c132:	4b10      	ldr	r3, [pc, #64]	@ (800c174 <xTaskResumeAll+0x130>)
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	2b00      	cmp	r3, #0
 800c138:	d009      	beq.n	800c14e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c13a:	2301      	movs	r3, #1
 800c13c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c13e:	4b0f      	ldr	r3, [pc, #60]	@ (800c17c <xTaskResumeAll+0x138>)
 800c140:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c144:	601a      	str	r2, [r3, #0]
 800c146:	f3bf 8f4f 	dsb	sy
 800c14a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c14e:	f001 f9fd 	bl	800d54c <vPortExitCritical>

	return xAlreadyYielded;
 800c152:	68bb      	ldr	r3, [r7, #8]
}
 800c154:	4618      	mov	r0, r3
 800c156:	3710      	adds	r7, #16
 800c158:	46bd      	mov	sp, r7
 800c15a:	bd80      	pop	{r7, pc}
 800c15c:	200016f8 	.word	0x200016f8
 800c160:	200016d0 	.word	0x200016d0
 800c164:	20001690 	.word	0x20001690
 800c168:	200016d8 	.word	0x200016d8
 800c16c:	20001200 	.word	0x20001200
 800c170:	200011fc 	.word	0x200011fc
 800c174:	200016e4 	.word	0x200016e4
 800c178:	200016e0 	.word	0x200016e0
 800c17c:	e000ed04 	.word	0xe000ed04

0800c180 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800c180:	b480      	push	{r7}
 800c182:	b083      	sub	sp, #12
 800c184:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800c186:	4b05      	ldr	r3, [pc, #20]	@ (800c19c <xTaskGetTickCount+0x1c>)
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800c18c:	687b      	ldr	r3, [r7, #4]
}
 800c18e:	4618      	mov	r0, r3
 800c190:	370c      	adds	r7, #12
 800c192:	46bd      	mov	sp, r7
 800c194:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c198:	4770      	bx	lr
 800c19a:	bf00      	nop
 800c19c:	200016d4 	.word	0x200016d4

0800c1a0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c1a0:	b580      	push	{r7, lr}
 800c1a2:	b086      	sub	sp, #24
 800c1a4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c1a6:	2300      	movs	r3, #0
 800c1a8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c1aa:	4b4f      	ldr	r3, [pc, #316]	@ (800c2e8 <xTaskIncrementTick+0x148>)
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	f040 8090 	bne.w	800c2d4 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c1b4:	4b4d      	ldr	r3, [pc, #308]	@ (800c2ec <xTaskIncrementTick+0x14c>)
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	3301      	adds	r3, #1
 800c1ba:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c1bc:	4a4b      	ldr	r2, [pc, #300]	@ (800c2ec <xTaskIncrementTick+0x14c>)
 800c1be:	693b      	ldr	r3, [r7, #16]
 800c1c0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c1c2:	693b      	ldr	r3, [r7, #16]
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d121      	bne.n	800c20c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800c1c8:	4b49      	ldr	r3, [pc, #292]	@ (800c2f0 <xTaskIncrementTick+0x150>)
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	681b      	ldr	r3, [r3, #0]
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	d00b      	beq.n	800c1ea <xTaskIncrementTick+0x4a>
	__asm volatile
 800c1d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1d6:	f383 8811 	msr	BASEPRI, r3
 800c1da:	f3bf 8f6f 	isb	sy
 800c1de:	f3bf 8f4f 	dsb	sy
 800c1e2:	603b      	str	r3, [r7, #0]
}
 800c1e4:	bf00      	nop
 800c1e6:	bf00      	nop
 800c1e8:	e7fd      	b.n	800c1e6 <xTaskIncrementTick+0x46>
 800c1ea:	4b41      	ldr	r3, [pc, #260]	@ (800c2f0 <xTaskIncrementTick+0x150>)
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	60fb      	str	r3, [r7, #12]
 800c1f0:	4b40      	ldr	r3, [pc, #256]	@ (800c2f4 <xTaskIncrementTick+0x154>)
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	4a3e      	ldr	r2, [pc, #248]	@ (800c2f0 <xTaskIncrementTick+0x150>)
 800c1f6:	6013      	str	r3, [r2, #0]
 800c1f8:	4a3e      	ldr	r2, [pc, #248]	@ (800c2f4 <xTaskIncrementTick+0x154>)
 800c1fa:	68fb      	ldr	r3, [r7, #12]
 800c1fc:	6013      	str	r3, [r2, #0]
 800c1fe:	4b3e      	ldr	r3, [pc, #248]	@ (800c2f8 <xTaskIncrementTick+0x158>)
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	3301      	adds	r3, #1
 800c204:	4a3c      	ldr	r2, [pc, #240]	@ (800c2f8 <xTaskIncrementTick+0x158>)
 800c206:	6013      	str	r3, [r2, #0]
 800c208:	f000 fae2 	bl	800c7d0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c20c:	4b3b      	ldr	r3, [pc, #236]	@ (800c2fc <xTaskIncrementTick+0x15c>)
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	693a      	ldr	r2, [r7, #16]
 800c212:	429a      	cmp	r2, r3
 800c214:	d349      	bcc.n	800c2aa <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c216:	4b36      	ldr	r3, [pc, #216]	@ (800c2f0 <xTaskIncrementTick+0x150>)
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d104      	bne.n	800c22a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c220:	4b36      	ldr	r3, [pc, #216]	@ (800c2fc <xTaskIncrementTick+0x15c>)
 800c222:	f04f 32ff 	mov.w	r2, #4294967295
 800c226:	601a      	str	r2, [r3, #0]
					break;
 800c228:	e03f      	b.n	800c2aa <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c22a:	4b31      	ldr	r3, [pc, #196]	@ (800c2f0 <xTaskIncrementTick+0x150>)
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	68db      	ldr	r3, [r3, #12]
 800c230:	68db      	ldr	r3, [r3, #12]
 800c232:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c234:	68bb      	ldr	r3, [r7, #8]
 800c236:	685b      	ldr	r3, [r3, #4]
 800c238:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c23a:	693a      	ldr	r2, [r7, #16]
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	429a      	cmp	r2, r3
 800c240:	d203      	bcs.n	800c24a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c242:	4a2e      	ldr	r2, [pc, #184]	@ (800c2fc <xTaskIncrementTick+0x15c>)
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c248:	e02f      	b.n	800c2aa <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c24a:	68bb      	ldr	r3, [r7, #8]
 800c24c:	3304      	adds	r3, #4
 800c24e:	4618      	mov	r0, r3
 800c250:	f7fe fbf2 	bl	800aa38 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c254:	68bb      	ldr	r3, [r7, #8]
 800c256:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d004      	beq.n	800c266 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c25c:	68bb      	ldr	r3, [r7, #8]
 800c25e:	3318      	adds	r3, #24
 800c260:	4618      	mov	r0, r3
 800c262:	f7fe fbe9 	bl	800aa38 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c266:	68bb      	ldr	r3, [r7, #8]
 800c268:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c26a:	4b25      	ldr	r3, [pc, #148]	@ (800c300 <xTaskIncrementTick+0x160>)
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	429a      	cmp	r2, r3
 800c270:	d903      	bls.n	800c27a <xTaskIncrementTick+0xda>
 800c272:	68bb      	ldr	r3, [r7, #8]
 800c274:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c276:	4a22      	ldr	r2, [pc, #136]	@ (800c300 <xTaskIncrementTick+0x160>)
 800c278:	6013      	str	r3, [r2, #0]
 800c27a:	68bb      	ldr	r3, [r7, #8]
 800c27c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c27e:	4613      	mov	r3, r2
 800c280:	009b      	lsls	r3, r3, #2
 800c282:	4413      	add	r3, r2
 800c284:	009b      	lsls	r3, r3, #2
 800c286:	4a1f      	ldr	r2, [pc, #124]	@ (800c304 <xTaskIncrementTick+0x164>)
 800c288:	441a      	add	r2, r3
 800c28a:	68bb      	ldr	r3, [r7, #8]
 800c28c:	3304      	adds	r3, #4
 800c28e:	4619      	mov	r1, r3
 800c290:	4610      	mov	r0, r2
 800c292:	f7fe fb74 	bl	800a97e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c296:	68bb      	ldr	r3, [r7, #8]
 800c298:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c29a:	4b1b      	ldr	r3, [pc, #108]	@ (800c308 <xTaskIncrementTick+0x168>)
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c2a0:	429a      	cmp	r2, r3
 800c2a2:	d3b8      	bcc.n	800c216 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800c2a4:	2301      	movs	r3, #1
 800c2a6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c2a8:	e7b5      	b.n	800c216 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c2aa:	4b17      	ldr	r3, [pc, #92]	@ (800c308 <xTaskIncrementTick+0x168>)
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c2b0:	4914      	ldr	r1, [pc, #80]	@ (800c304 <xTaskIncrementTick+0x164>)
 800c2b2:	4613      	mov	r3, r2
 800c2b4:	009b      	lsls	r3, r3, #2
 800c2b6:	4413      	add	r3, r2
 800c2b8:	009b      	lsls	r3, r3, #2
 800c2ba:	440b      	add	r3, r1
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	2b01      	cmp	r3, #1
 800c2c0:	d901      	bls.n	800c2c6 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800c2c2:	2301      	movs	r3, #1
 800c2c4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800c2c6:	4b11      	ldr	r3, [pc, #68]	@ (800c30c <xTaskIncrementTick+0x16c>)
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d007      	beq.n	800c2de <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800c2ce:	2301      	movs	r3, #1
 800c2d0:	617b      	str	r3, [r7, #20]
 800c2d2:	e004      	b.n	800c2de <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800c2d4:	4b0e      	ldr	r3, [pc, #56]	@ (800c310 <xTaskIncrementTick+0x170>)
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	3301      	adds	r3, #1
 800c2da:	4a0d      	ldr	r2, [pc, #52]	@ (800c310 <xTaskIncrementTick+0x170>)
 800c2dc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800c2de:	697b      	ldr	r3, [r7, #20]
}
 800c2e0:	4618      	mov	r0, r3
 800c2e2:	3718      	adds	r7, #24
 800c2e4:	46bd      	mov	sp, r7
 800c2e6:	bd80      	pop	{r7, pc}
 800c2e8:	200016f8 	.word	0x200016f8
 800c2ec:	200016d4 	.word	0x200016d4
 800c2f0:	20001688 	.word	0x20001688
 800c2f4:	2000168c 	.word	0x2000168c
 800c2f8:	200016e8 	.word	0x200016e8
 800c2fc:	200016f0 	.word	0x200016f0
 800c300:	200016d8 	.word	0x200016d8
 800c304:	20001200 	.word	0x20001200
 800c308:	200011fc 	.word	0x200011fc
 800c30c:	200016e4 	.word	0x200016e4
 800c310:	200016e0 	.word	0x200016e0

0800c314 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c314:	b480      	push	{r7}
 800c316:	b085      	sub	sp, #20
 800c318:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c31a:	4b2b      	ldr	r3, [pc, #172]	@ (800c3c8 <vTaskSwitchContext+0xb4>)
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d003      	beq.n	800c32a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c322:	4b2a      	ldr	r3, [pc, #168]	@ (800c3cc <vTaskSwitchContext+0xb8>)
 800c324:	2201      	movs	r2, #1
 800c326:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c328:	e047      	b.n	800c3ba <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800c32a:	4b28      	ldr	r3, [pc, #160]	@ (800c3cc <vTaskSwitchContext+0xb8>)
 800c32c:	2200      	movs	r2, #0
 800c32e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c330:	4b27      	ldr	r3, [pc, #156]	@ (800c3d0 <vTaskSwitchContext+0xbc>)
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	60fb      	str	r3, [r7, #12]
 800c336:	e011      	b.n	800c35c <vTaskSwitchContext+0x48>
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d10b      	bne.n	800c356 <vTaskSwitchContext+0x42>
	__asm volatile
 800c33e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c342:	f383 8811 	msr	BASEPRI, r3
 800c346:	f3bf 8f6f 	isb	sy
 800c34a:	f3bf 8f4f 	dsb	sy
 800c34e:	607b      	str	r3, [r7, #4]
}
 800c350:	bf00      	nop
 800c352:	bf00      	nop
 800c354:	e7fd      	b.n	800c352 <vTaskSwitchContext+0x3e>
 800c356:	68fb      	ldr	r3, [r7, #12]
 800c358:	3b01      	subs	r3, #1
 800c35a:	60fb      	str	r3, [r7, #12]
 800c35c:	491d      	ldr	r1, [pc, #116]	@ (800c3d4 <vTaskSwitchContext+0xc0>)
 800c35e:	68fa      	ldr	r2, [r7, #12]
 800c360:	4613      	mov	r3, r2
 800c362:	009b      	lsls	r3, r3, #2
 800c364:	4413      	add	r3, r2
 800c366:	009b      	lsls	r3, r3, #2
 800c368:	440b      	add	r3, r1
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d0e3      	beq.n	800c338 <vTaskSwitchContext+0x24>
 800c370:	68fa      	ldr	r2, [r7, #12]
 800c372:	4613      	mov	r3, r2
 800c374:	009b      	lsls	r3, r3, #2
 800c376:	4413      	add	r3, r2
 800c378:	009b      	lsls	r3, r3, #2
 800c37a:	4a16      	ldr	r2, [pc, #88]	@ (800c3d4 <vTaskSwitchContext+0xc0>)
 800c37c:	4413      	add	r3, r2
 800c37e:	60bb      	str	r3, [r7, #8]
 800c380:	68bb      	ldr	r3, [r7, #8]
 800c382:	685b      	ldr	r3, [r3, #4]
 800c384:	685a      	ldr	r2, [r3, #4]
 800c386:	68bb      	ldr	r3, [r7, #8]
 800c388:	605a      	str	r2, [r3, #4]
 800c38a:	68bb      	ldr	r3, [r7, #8]
 800c38c:	685a      	ldr	r2, [r3, #4]
 800c38e:	68bb      	ldr	r3, [r7, #8]
 800c390:	3308      	adds	r3, #8
 800c392:	429a      	cmp	r2, r3
 800c394:	d104      	bne.n	800c3a0 <vTaskSwitchContext+0x8c>
 800c396:	68bb      	ldr	r3, [r7, #8]
 800c398:	685b      	ldr	r3, [r3, #4]
 800c39a:	685a      	ldr	r2, [r3, #4]
 800c39c:	68bb      	ldr	r3, [r7, #8]
 800c39e:	605a      	str	r2, [r3, #4]
 800c3a0:	68bb      	ldr	r3, [r7, #8]
 800c3a2:	685b      	ldr	r3, [r3, #4]
 800c3a4:	68db      	ldr	r3, [r3, #12]
 800c3a6:	4a0c      	ldr	r2, [pc, #48]	@ (800c3d8 <vTaskSwitchContext+0xc4>)
 800c3a8:	6013      	str	r3, [r2, #0]
 800c3aa:	4a09      	ldr	r2, [pc, #36]	@ (800c3d0 <vTaskSwitchContext+0xbc>)
 800c3ac:	68fb      	ldr	r3, [r7, #12]
 800c3ae:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c3b0:	4b09      	ldr	r3, [pc, #36]	@ (800c3d8 <vTaskSwitchContext+0xc4>)
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	3354      	adds	r3, #84	@ 0x54
 800c3b6:	4a09      	ldr	r2, [pc, #36]	@ (800c3dc <vTaskSwitchContext+0xc8>)
 800c3b8:	6013      	str	r3, [r2, #0]
}
 800c3ba:	bf00      	nop
 800c3bc:	3714      	adds	r7, #20
 800c3be:	46bd      	mov	sp, r7
 800c3c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3c4:	4770      	bx	lr
 800c3c6:	bf00      	nop
 800c3c8:	200016f8 	.word	0x200016f8
 800c3cc:	200016e4 	.word	0x200016e4
 800c3d0:	200016d8 	.word	0x200016d8
 800c3d4:	20001200 	.word	0x20001200
 800c3d8:	200011fc 	.word	0x200011fc
 800c3dc:	200001ac 	.word	0x200001ac

0800c3e0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c3e0:	b580      	push	{r7, lr}
 800c3e2:	b084      	sub	sp, #16
 800c3e4:	af00      	add	r7, sp, #0
 800c3e6:	6078      	str	r0, [r7, #4]
 800c3e8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d10b      	bne.n	800c408 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800c3f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3f4:	f383 8811 	msr	BASEPRI, r3
 800c3f8:	f3bf 8f6f 	isb	sy
 800c3fc:	f3bf 8f4f 	dsb	sy
 800c400:	60fb      	str	r3, [r7, #12]
}
 800c402:	bf00      	nop
 800c404:	bf00      	nop
 800c406:	e7fd      	b.n	800c404 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c408:	4b07      	ldr	r3, [pc, #28]	@ (800c428 <vTaskPlaceOnEventList+0x48>)
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	3318      	adds	r3, #24
 800c40e:	4619      	mov	r1, r3
 800c410:	6878      	ldr	r0, [r7, #4]
 800c412:	f7fe fad8 	bl	800a9c6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c416:	2101      	movs	r1, #1
 800c418:	6838      	ldr	r0, [r7, #0]
 800c41a:	f000 fb87 	bl	800cb2c <prvAddCurrentTaskToDelayedList>
}
 800c41e:	bf00      	nop
 800c420:	3710      	adds	r7, #16
 800c422:	46bd      	mov	sp, r7
 800c424:	bd80      	pop	{r7, pc}
 800c426:	bf00      	nop
 800c428:	200011fc 	.word	0x200011fc

0800c42c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c42c:	b580      	push	{r7, lr}
 800c42e:	b086      	sub	sp, #24
 800c430:	af00      	add	r7, sp, #0
 800c432:	60f8      	str	r0, [r7, #12]
 800c434:	60b9      	str	r1, [r7, #8]
 800c436:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800c438:	68fb      	ldr	r3, [r7, #12]
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d10b      	bne.n	800c456 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800c43e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c442:	f383 8811 	msr	BASEPRI, r3
 800c446:	f3bf 8f6f 	isb	sy
 800c44a:	f3bf 8f4f 	dsb	sy
 800c44e:	617b      	str	r3, [r7, #20]
}
 800c450:	bf00      	nop
 800c452:	bf00      	nop
 800c454:	e7fd      	b.n	800c452 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c456:	4b0a      	ldr	r3, [pc, #40]	@ (800c480 <vTaskPlaceOnEventListRestricted+0x54>)
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	3318      	adds	r3, #24
 800c45c:	4619      	mov	r1, r3
 800c45e:	68f8      	ldr	r0, [r7, #12]
 800c460:	f7fe fa8d 	bl	800a97e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	2b00      	cmp	r3, #0
 800c468:	d002      	beq.n	800c470 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800c46a:	f04f 33ff 	mov.w	r3, #4294967295
 800c46e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800c470:	6879      	ldr	r1, [r7, #4]
 800c472:	68b8      	ldr	r0, [r7, #8]
 800c474:	f000 fb5a 	bl	800cb2c <prvAddCurrentTaskToDelayedList>
	}
 800c478:	bf00      	nop
 800c47a:	3718      	adds	r7, #24
 800c47c:	46bd      	mov	sp, r7
 800c47e:	bd80      	pop	{r7, pc}
 800c480:	200011fc 	.word	0x200011fc

0800c484 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c484:	b580      	push	{r7, lr}
 800c486:	b086      	sub	sp, #24
 800c488:	af00      	add	r7, sp, #0
 800c48a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	68db      	ldr	r3, [r3, #12]
 800c490:	68db      	ldr	r3, [r3, #12]
 800c492:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c494:	693b      	ldr	r3, [r7, #16]
 800c496:	2b00      	cmp	r3, #0
 800c498:	d10b      	bne.n	800c4b2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800c49a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c49e:	f383 8811 	msr	BASEPRI, r3
 800c4a2:	f3bf 8f6f 	isb	sy
 800c4a6:	f3bf 8f4f 	dsb	sy
 800c4aa:	60fb      	str	r3, [r7, #12]
}
 800c4ac:	bf00      	nop
 800c4ae:	bf00      	nop
 800c4b0:	e7fd      	b.n	800c4ae <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c4b2:	693b      	ldr	r3, [r7, #16]
 800c4b4:	3318      	adds	r3, #24
 800c4b6:	4618      	mov	r0, r3
 800c4b8:	f7fe fabe 	bl	800aa38 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c4bc:	4b1d      	ldr	r3, [pc, #116]	@ (800c534 <xTaskRemoveFromEventList+0xb0>)
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d11d      	bne.n	800c500 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c4c4:	693b      	ldr	r3, [r7, #16]
 800c4c6:	3304      	adds	r3, #4
 800c4c8:	4618      	mov	r0, r3
 800c4ca:	f7fe fab5 	bl	800aa38 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c4ce:	693b      	ldr	r3, [r7, #16]
 800c4d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c4d2:	4b19      	ldr	r3, [pc, #100]	@ (800c538 <xTaskRemoveFromEventList+0xb4>)
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	429a      	cmp	r2, r3
 800c4d8:	d903      	bls.n	800c4e2 <xTaskRemoveFromEventList+0x5e>
 800c4da:	693b      	ldr	r3, [r7, #16]
 800c4dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c4de:	4a16      	ldr	r2, [pc, #88]	@ (800c538 <xTaskRemoveFromEventList+0xb4>)
 800c4e0:	6013      	str	r3, [r2, #0]
 800c4e2:	693b      	ldr	r3, [r7, #16]
 800c4e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c4e6:	4613      	mov	r3, r2
 800c4e8:	009b      	lsls	r3, r3, #2
 800c4ea:	4413      	add	r3, r2
 800c4ec:	009b      	lsls	r3, r3, #2
 800c4ee:	4a13      	ldr	r2, [pc, #76]	@ (800c53c <xTaskRemoveFromEventList+0xb8>)
 800c4f0:	441a      	add	r2, r3
 800c4f2:	693b      	ldr	r3, [r7, #16]
 800c4f4:	3304      	adds	r3, #4
 800c4f6:	4619      	mov	r1, r3
 800c4f8:	4610      	mov	r0, r2
 800c4fa:	f7fe fa40 	bl	800a97e <vListInsertEnd>
 800c4fe:	e005      	b.n	800c50c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c500:	693b      	ldr	r3, [r7, #16]
 800c502:	3318      	adds	r3, #24
 800c504:	4619      	mov	r1, r3
 800c506:	480e      	ldr	r0, [pc, #56]	@ (800c540 <xTaskRemoveFromEventList+0xbc>)
 800c508:	f7fe fa39 	bl	800a97e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c50c:	693b      	ldr	r3, [r7, #16]
 800c50e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c510:	4b0c      	ldr	r3, [pc, #48]	@ (800c544 <xTaskRemoveFromEventList+0xc0>)
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c516:	429a      	cmp	r2, r3
 800c518:	d905      	bls.n	800c526 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c51a:	2301      	movs	r3, #1
 800c51c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c51e:	4b0a      	ldr	r3, [pc, #40]	@ (800c548 <xTaskRemoveFromEventList+0xc4>)
 800c520:	2201      	movs	r2, #1
 800c522:	601a      	str	r2, [r3, #0]
 800c524:	e001      	b.n	800c52a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800c526:	2300      	movs	r3, #0
 800c528:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c52a:	697b      	ldr	r3, [r7, #20]
}
 800c52c:	4618      	mov	r0, r3
 800c52e:	3718      	adds	r7, #24
 800c530:	46bd      	mov	sp, r7
 800c532:	bd80      	pop	{r7, pc}
 800c534:	200016f8 	.word	0x200016f8
 800c538:	200016d8 	.word	0x200016d8
 800c53c:	20001200 	.word	0x20001200
 800c540:	20001690 	.word	0x20001690
 800c544:	200011fc 	.word	0x200011fc
 800c548:	200016e4 	.word	0x200016e4

0800c54c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c54c:	b480      	push	{r7}
 800c54e:	b083      	sub	sp, #12
 800c550:	af00      	add	r7, sp, #0
 800c552:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c554:	4b06      	ldr	r3, [pc, #24]	@ (800c570 <vTaskInternalSetTimeOutState+0x24>)
 800c556:	681a      	ldr	r2, [r3, #0]
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c55c:	4b05      	ldr	r3, [pc, #20]	@ (800c574 <vTaskInternalSetTimeOutState+0x28>)
 800c55e:	681a      	ldr	r2, [r3, #0]
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	605a      	str	r2, [r3, #4]
}
 800c564:	bf00      	nop
 800c566:	370c      	adds	r7, #12
 800c568:	46bd      	mov	sp, r7
 800c56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c56e:	4770      	bx	lr
 800c570:	200016e8 	.word	0x200016e8
 800c574:	200016d4 	.word	0x200016d4

0800c578 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c578:	b580      	push	{r7, lr}
 800c57a:	b088      	sub	sp, #32
 800c57c:	af00      	add	r7, sp, #0
 800c57e:	6078      	str	r0, [r7, #4]
 800c580:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	2b00      	cmp	r3, #0
 800c586:	d10b      	bne.n	800c5a0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800c588:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c58c:	f383 8811 	msr	BASEPRI, r3
 800c590:	f3bf 8f6f 	isb	sy
 800c594:	f3bf 8f4f 	dsb	sy
 800c598:	613b      	str	r3, [r7, #16]
}
 800c59a:	bf00      	nop
 800c59c:	bf00      	nop
 800c59e:	e7fd      	b.n	800c59c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800c5a0:	683b      	ldr	r3, [r7, #0]
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	d10b      	bne.n	800c5be <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800c5a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c5aa:	f383 8811 	msr	BASEPRI, r3
 800c5ae:	f3bf 8f6f 	isb	sy
 800c5b2:	f3bf 8f4f 	dsb	sy
 800c5b6:	60fb      	str	r3, [r7, #12]
}
 800c5b8:	bf00      	nop
 800c5ba:	bf00      	nop
 800c5bc:	e7fd      	b.n	800c5ba <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800c5be:	f000 ff93 	bl	800d4e8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c5c2:	4b1d      	ldr	r3, [pc, #116]	@ (800c638 <xTaskCheckForTimeOut+0xc0>)
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	685b      	ldr	r3, [r3, #4]
 800c5cc:	69ba      	ldr	r2, [r7, #24]
 800c5ce:	1ad3      	subs	r3, r2, r3
 800c5d0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c5d2:	683b      	ldr	r3, [r7, #0]
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c5da:	d102      	bne.n	800c5e2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c5dc:	2300      	movs	r3, #0
 800c5de:	61fb      	str	r3, [r7, #28]
 800c5e0:	e023      	b.n	800c62a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	681a      	ldr	r2, [r3, #0]
 800c5e6:	4b15      	ldr	r3, [pc, #84]	@ (800c63c <xTaskCheckForTimeOut+0xc4>)
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	429a      	cmp	r2, r3
 800c5ec:	d007      	beq.n	800c5fe <xTaskCheckForTimeOut+0x86>
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	685b      	ldr	r3, [r3, #4]
 800c5f2:	69ba      	ldr	r2, [r7, #24]
 800c5f4:	429a      	cmp	r2, r3
 800c5f6:	d302      	bcc.n	800c5fe <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c5f8:	2301      	movs	r3, #1
 800c5fa:	61fb      	str	r3, [r7, #28]
 800c5fc:	e015      	b.n	800c62a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c5fe:	683b      	ldr	r3, [r7, #0]
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	697a      	ldr	r2, [r7, #20]
 800c604:	429a      	cmp	r2, r3
 800c606:	d20b      	bcs.n	800c620 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c608:	683b      	ldr	r3, [r7, #0]
 800c60a:	681a      	ldr	r2, [r3, #0]
 800c60c:	697b      	ldr	r3, [r7, #20]
 800c60e:	1ad2      	subs	r2, r2, r3
 800c610:	683b      	ldr	r3, [r7, #0]
 800c612:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c614:	6878      	ldr	r0, [r7, #4]
 800c616:	f7ff ff99 	bl	800c54c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c61a:	2300      	movs	r3, #0
 800c61c:	61fb      	str	r3, [r7, #28]
 800c61e:	e004      	b.n	800c62a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800c620:	683b      	ldr	r3, [r7, #0]
 800c622:	2200      	movs	r2, #0
 800c624:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c626:	2301      	movs	r3, #1
 800c628:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c62a:	f000 ff8f 	bl	800d54c <vPortExitCritical>

	return xReturn;
 800c62e:	69fb      	ldr	r3, [r7, #28]
}
 800c630:	4618      	mov	r0, r3
 800c632:	3720      	adds	r7, #32
 800c634:	46bd      	mov	sp, r7
 800c636:	bd80      	pop	{r7, pc}
 800c638:	200016d4 	.word	0x200016d4
 800c63c:	200016e8 	.word	0x200016e8

0800c640 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c640:	b480      	push	{r7}
 800c642:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c644:	4b03      	ldr	r3, [pc, #12]	@ (800c654 <vTaskMissedYield+0x14>)
 800c646:	2201      	movs	r2, #1
 800c648:	601a      	str	r2, [r3, #0]
}
 800c64a:	bf00      	nop
 800c64c:	46bd      	mov	sp, r7
 800c64e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c652:	4770      	bx	lr
 800c654:	200016e4 	.word	0x200016e4

0800c658 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c658:	b580      	push	{r7, lr}
 800c65a:	b082      	sub	sp, #8
 800c65c:	af00      	add	r7, sp, #0
 800c65e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c660:	f000 f852 	bl	800c708 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c664:	4b06      	ldr	r3, [pc, #24]	@ (800c680 <prvIdleTask+0x28>)
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	2b01      	cmp	r3, #1
 800c66a:	d9f9      	bls.n	800c660 <prvIdleTask+0x8>
			{
				taskYIELD();
 800c66c:	4b05      	ldr	r3, [pc, #20]	@ (800c684 <prvIdleTask+0x2c>)
 800c66e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c672:	601a      	str	r2, [r3, #0]
 800c674:	f3bf 8f4f 	dsb	sy
 800c678:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c67c:	e7f0      	b.n	800c660 <prvIdleTask+0x8>
 800c67e:	bf00      	nop
 800c680:	20001200 	.word	0x20001200
 800c684:	e000ed04 	.word	0xe000ed04

0800c688 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c688:	b580      	push	{r7, lr}
 800c68a:	b082      	sub	sp, #8
 800c68c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c68e:	2300      	movs	r3, #0
 800c690:	607b      	str	r3, [r7, #4]
 800c692:	e00c      	b.n	800c6ae <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c694:	687a      	ldr	r2, [r7, #4]
 800c696:	4613      	mov	r3, r2
 800c698:	009b      	lsls	r3, r3, #2
 800c69a:	4413      	add	r3, r2
 800c69c:	009b      	lsls	r3, r3, #2
 800c69e:	4a12      	ldr	r2, [pc, #72]	@ (800c6e8 <prvInitialiseTaskLists+0x60>)
 800c6a0:	4413      	add	r3, r2
 800c6a2:	4618      	mov	r0, r3
 800c6a4:	f7fe f93e 	bl	800a924 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	3301      	adds	r3, #1
 800c6ac:	607b      	str	r3, [r7, #4]
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	2b37      	cmp	r3, #55	@ 0x37
 800c6b2:	d9ef      	bls.n	800c694 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c6b4:	480d      	ldr	r0, [pc, #52]	@ (800c6ec <prvInitialiseTaskLists+0x64>)
 800c6b6:	f7fe f935 	bl	800a924 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c6ba:	480d      	ldr	r0, [pc, #52]	@ (800c6f0 <prvInitialiseTaskLists+0x68>)
 800c6bc:	f7fe f932 	bl	800a924 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c6c0:	480c      	ldr	r0, [pc, #48]	@ (800c6f4 <prvInitialiseTaskLists+0x6c>)
 800c6c2:	f7fe f92f 	bl	800a924 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c6c6:	480c      	ldr	r0, [pc, #48]	@ (800c6f8 <prvInitialiseTaskLists+0x70>)
 800c6c8:	f7fe f92c 	bl	800a924 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c6cc:	480b      	ldr	r0, [pc, #44]	@ (800c6fc <prvInitialiseTaskLists+0x74>)
 800c6ce:	f7fe f929 	bl	800a924 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c6d2:	4b0b      	ldr	r3, [pc, #44]	@ (800c700 <prvInitialiseTaskLists+0x78>)
 800c6d4:	4a05      	ldr	r2, [pc, #20]	@ (800c6ec <prvInitialiseTaskLists+0x64>)
 800c6d6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c6d8:	4b0a      	ldr	r3, [pc, #40]	@ (800c704 <prvInitialiseTaskLists+0x7c>)
 800c6da:	4a05      	ldr	r2, [pc, #20]	@ (800c6f0 <prvInitialiseTaskLists+0x68>)
 800c6dc:	601a      	str	r2, [r3, #0]
}
 800c6de:	bf00      	nop
 800c6e0:	3708      	adds	r7, #8
 800c6e2:	46bd      	mov	sp, r7
 800c6e4:	bd80      	pop	{r7, pc}
 800c6e6:	bf00      	nop
 800c6e8:	20001200 	.word	0x20001200
 800c6ec:	20001660 	.word	0x20001660
 800c6f0:	20001674 	.word	0x20001674
 800c6f4:	20001690 	.word	0x20001690
 800c6f8:	200016a4 	.word	0x200016a4
 800c6fc:	200016bc 	.word	0x200016bc
 800c700:	20001688 	.word	0x20001688
 800c704:	2000168c 	.word	0x2000168c

0800c708 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c708:	b580      	push	{r7, lr}
 800c70a:	b082      	sub	sp, #8
 800c70c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c70e:	e019      	b.n	800c744 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c710:	f000 feea 	bl	800d4e8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c714:	4b10      	ldr	r3, [pc, #64]	@ (800c758 <prvCheckTasksWaitingTermination+0x50>)
 800c716:	68db      	ldr	r3, [r3, #12]
 800c718:	68db      	ldr	r3, [r3, #12]
 800c71a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	3304      	adds	r3, #4
 800c720:	4618      	mov	r0, r3
 800c722:	f7fe f989 	bl	800aa38 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c726:	4b0d      	ldr	r3, [pc, #52]	@ (800c75c <prvCheckTasksWaitingTermination+0x54>)
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	3b01      	subs	r3, #1
 800c72c:	4a0b      	ldr	r2, [pc, #44]	@ (800c75c <prvCheckTasksWaitingTermination+0x54>)
 800c72e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c730:	4b0b      	ldr	r3, [pc, #44]	@ (800c760 <prvCheckTasksWaitingTermination+0x58>)
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	3b01      	subs	r3, #1
 800c736:	4a0a      	ldr	r2, [pc, #40]	@ (800c760 <prvCheckTasksWaitingTermination+0x58>)
 800c738:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c73a:	f000 ff07 	bl	800d54c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c73e:	6878      	ldr	r0, [r7, #4]
 800c740:	f000 f810 	bl	800c764 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c744:	4b06      	ldr	r3, [pc, #24]	@ (800c760 <prvCheckTasksWaitingTermination+0x58>)
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	2b00      	cmp	r3, #0
 800c74a:	d1e1      	bne.n	800c710 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c74c:	bf00      	nop
 800c74e:	bf00      	nop
 800c750:	3708      	adds	r7, #8
 800c752:	46bd      	mov	sp, r7
 800c754:	bd80      	pop	{r7, pc}
 800c756:	bf00      	nop
 800c758:	200016a4 	.word	0x200016a4
 800c75c:	200016d0 	.word	0x200016d0
 800c760:	200016b8 	.word	0x200016b8

0800c764 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c764:	b580      	push	{r7, lr}
 800c766:	b084      	sub	sp, #16
 800c768:	af00      	add	r7, sp, #0
 800c76a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	3354      	adds	r3, #84	@ 0x54
 800c770:	4618      	mov	r0, r3
 800c772:	f002 f9e5 	bl	800eb40 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d108      	bne.n	800c792 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c784:	4618      	mov	r0, r3
 800c786:	f001 f89f 	bl	800d8c8 <vPortFree>
				vPortFree( pxTCB );
 800c78a:	6878      	ldr	r0, [r7, #4]
 800c78c:	f001 f89c 	bl	800d8c8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c790:	e019      	b.n	800c7c6 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800c798:	2b01      	cmp	r3, #1
 800c79a:	d103      	bne.n	800c7a4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800c79c:	6878      	ldr	r0, [r7, #4]
 800c79e:	f001 f893 	bl	800d8c8 <vPortFree>
	}
 800c7a2:	e010      	b.n	800c7c6 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800c7aa:	2b02      	cmp	r3, #2
 800c7ac:	d00b      	beq.n	800c7c6 <prvDeleteTCB+0x62>
	__asm volatile
 800c7ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7b2:	f383 8811 	msr	BASEPRI, r3
 800c7b6:	f3bf 8f6f 	isb	sy
 800c7ba:	f3bf 8f4f 	dsb	sy
 800c7be:	60fb      	str	r3, [r7, #12]
}
 800c7c0:	bf00      	nop
 800c7c2:	bf00      	nop
 800c7c4:	e7fd      	b.n	800c7c2 <prvDeleteTCB+0x5e>
	}
 800c7c6:	bf00      	nop
 800c7c8:	3710      	adds	r7, #16
 800c7ca:	46bd      	mov	sp, r7
 800c7cc:	bd80      	pop	{r7, pc}
	...

0800c7d0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c7d0:	b480      	push	{r7}
 800c7d2:	b083      	sub	sp, #12
 800c7d4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c7d6:	4b0c      	ldr	r3, [pc, #48]	@ (800c808 <prvResetNextTaskUnblockTime+0x38>)
 800c7d8:	681b      	ldr	r3, [r3, #0]
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d104      	bne.n	800c7ea <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c7e0:	4b0a      	ldr	r3, [pc, #40]	@ (800c80c <prvResetNextTaskUnblockTime+0x3c>)
 800c7e2:	f04f 32ff 	mov.w	r2, #4294967295
 800c7e6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c7e8:	e008      	b.n	800c7fc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c7ea:	4b07      	ldr	r3, [pc, #28]	@ (800c808 <prvResetNextTaskUnblockTime+0x38>)
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	68db      	ldr	r3, [r3, #12]
 800c7f0:	68db      	ldr	r3, [r3, #12]
 800c7f2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	685b      	ldr	r3, [r3, #4]
 800c7f8:	4a04      	ldr	r2, [pc, #16]	@ (800c80c <prvResetNextTaskUnblockTime+0x3c>)
 800c7fa:	6013      	str	r3, [r2, #0]
}
 800c7fc:	bf00      	nop
 800c7fe:	370c      	adds	r7, #12
 800c800:	46bd      	mov	sp, r7
 800c802:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c806:	4770      	bx	lr
 800c808:	20001688 	.word	0x20001688
 800c80c:	200016f0 	.word	0x200016f0

0800c810 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c810:	b480      	push	{r7}
 800c812:	b083      	sub	sp, #12
 800c814:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c816:	4b0b      	ldr	r3, [pc, #44]	@ (800c844 <xTaskGetSchedulerState+0x34>)
 800c818:	681b      	ldr	r3, [r3, #0]
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d102      	bne.n	800c824 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c81e:	2301      	movs	r3, #1
 800c820:	607b      	str	r3, [r7, #4]
 800c822:	e008      	b.n	800c836 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c824:	4b08      	ldr	r3, [pc, #32]	@ (800c848 <xTaskGetSchedulerState+0x38>)
 800c826:	681b      	ldr	r3, [r3, #0]
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d102      	bne.n	800c832 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c82c:	2302      	movs	r3, #2
 800c82e:	607b      	str	r3, [r7, #4]
 800c830:	e001      	b.n	800c836 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c832:	2300      	movs	r3, #0
 800c834:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c836:	687b      	ldr	r3, [r7, #4]
	}
 800c838:	4618      	mov	r0, r3
 800c83a:	370c      	adds	r7, #12
 800c83c:	46bd      	mov	sp, r7
 800c83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c842:	4770      	bx	lr
 800c844:	200016dc 	.word	0x200016dc
 800c848:	200016f8 	.word	0x200016f8

0800c84c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800c84c:	b580      	push	{r7, lr}
 800c84e:	b084      	sub	sp, #16
 800c850:	af00      	add	r7, sp, #0
 800c852:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800c858:	2300      	movs	r3, #0
 800c85a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	2b00      	cmp	r3, #0
 800c860:	d051      	beq.n	800c906 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800c862:	68bb      	ldr	r3, [r7, #8]
 800c864:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c866:	4b2a      	ldr	r3, [pc, #168]	@ (800c910 <xTaskPriorityInherit+0xc4>)
 800c868:	681b      	ldr	r3, [r3, #0]
 800c86a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c86c:	429a      	cmp	r2, r3
 800c86e:	d241      	bcs.n	800c8f4 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c870:	68bb      	ldr	r3, [r7, #8]
 800c872:	699b      	ldr	r3, [r3, #24]
 800c874:	2b00      	cmp	r3, #0
 800c876:	db06      	blt.n	800c886 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c878:	4b25      	ldr	r3, [pc, #148]	@ (800c910 <xTaskPriorityInherit+0xc4>)
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c87e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800c882:	68bb      	ldr	r3, [r7, #8]
 800c884:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800c886:	68bb      	ldr	r3, [r7, #8]
 800c888:	6959      	ldr	r1, [r3, #20]
 800c88a:	68bb      	ldr	r3, [r7, #8]
 800c88c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c88e:	4613      	mov	r3, r2
 800c890:	009b      	lsls	r3, r3, #2
 800c892:	4413      	add	r3, r2
 800c894:	009b      	lsls	r3, r3, #2
 800c896:	4a1f      	ldr	r2, [pc, #124]	@ (800c914 <xTaskPriorityInherit+0xc8>)
 800c898:	4413      	add	r3, r2
 800c89a:	4299      	cmp	r1, r3
 800c89c:	d122      	bne.n	800c8e4 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c89e:	68bb      	ldr	r3, [r7, #8]
 800c8a0:	3304      	adds	r3, #4
 800c8a2:	4618      	mov	r0, r3
 800c8a4:	f7fe f8c8 	bl	800aa38 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c8a8:	4b19      	ldr	r3, [pc, #100]	@ (800c910 <xTaskPriorityInherit+0xc4>)
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c8ae:	68bb      	ldr	r3, [r7, #8]
 800c8b0:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800c8b2:	68bb      	ldr	r3, [r7, #8]
 800c8b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c8b6:	4b18      	ldr	r3, [pc, #96]	@ (800c918 <xTaskPriorityInherit+0xcc>)
 800c8b8:	681b      	ldr	r3, [r3, #0]
 800c8ba:	429a      	cmp	r2, r3
 800c8bc:	d903      	bls.n	800c8c6 <xTaskPriorityInherit+0x7a>
 800c8be:	68bb      	ldr	r3, [r7, #8]
 800c8c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c8c2:	4a15      	ldr	r2, [pc, #84]	@ (800c918 <xTaskPriorityInherit+0xcc>)
 800c8c4:	6013      	str	r3, [r2, #0]
 800c8c6:	68bb      	ldr	r3, [r7, #8]
 800c8c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c8ca:	4613      	mov	r3, r2
 800c8cc:	009b      	lsls	r3, r3, #2
 800c8ce:	4413      	add	r3, r2
 800c8d0:	009b      	lsls	r3, r3, #2
 800c8d2:	4a10      	ldr	r2, [pc, #64]	@ (800c914 <xTaskPriorityInherit+0xc8>)
 800c8d4:	441a      	add	r2, r3
 800c8d6:	68bb      	ldr	r3, [r7, #8]
 800c8d8:	3304      	adds	r3, #4
 800c8da:	4619      	mov	r1, r3
 800c8dc:	4610      	mov	r0, r2
 800c8de:	f7fe f84e 	bl	800a97e <vListInsertEnd>
 800c8e2:	e004      	b.n	800c8ee <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c8e4:	4b0a      	ldr	r3, [pc, #40]	@ (800c910 <xTaskPriorityInherit+0xc4>)
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c8ea:	68bb      	ldr	r3, [r7, #8]
 800c8ec:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800c8ee:	2301      	movs	r3, #1
 800c8f0:	60fb      	str	r3, [r7, #12]
 800c8f2:	e008      	b.n	800c906 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800c8f4:	68bb      	ldr	r3, [r7, #8]
 800c8f6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c8f8:	4b05      	ldr	r3, [pc, #20]	@ (800c910 <xTaskPriorityInherit+0xc4>)
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c8fe:	429a      	cmp	r2, r3
 800c900:	d201      	bcs.n	800c906 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800c902:	2301      	movs	r3, #1
 800c904:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c906:	68fb      	ldr	r3, [r7, #12]
	}
 800c908:	4618      	mov	r0, r3
 800c90a:	3710      	adds	r7, #16
 800c90c:	46bd      	mov	sp, r7
 800c90e:	bd80      	pop	{r7, pc}
 800c910:	200011fc 	.word	0x200011fc
 800c914:	20001200 	.word	0x20001200
 800c918:	200016d8 	.word	0x200016d8

0800c91c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c91c:	b580      	push	{r7, lr}
 800c91e:	b086      	sub	sp, #24
 800c920:	af00      	add	r7, sp, #0
 800c922:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c928:	2300      	movs	r3, #0
 800c92a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d058      	beq.n	800c9e4 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c932:	4b2f      	ldr	r3, [pc, #188]	@ (800c9f0 <xTaskPriorityDisinherit+0xd4>)
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	693a      	ldr	r2, [r7, #16]
 800c938:	429a      	cmp	r2, r3
 800c93a:	d00b      	beq.n	800c954 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800c93c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c940:	f383 8811 	msr	BASEPRI, r3
 800c944:	f3bf 8f6f 	isb	sy
 800c948:	f3bf 8f4f 	dsb	sy
 800c94c:	60fb      	str	r3, [r7, #12]
}
 800c94e:	bf00      	nop
 800c950:	bf00      	nop
 800c952:	e7fd      	b.n	800c950 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c954:	693b      	ldr	r3, [r7, #16]
 800c956:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d10b      	bne.n	800c974 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800c95c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c960:	f383 8811 	msr	BASEPRI, r3
 800c964:	f3bf 8f6f 	isb	sy
 800c968:	f3bf 8f4f 	dsb	sy
 800c96c:	60bb      	str	r3, [r7, #8]
}
 800c96e:	bf00      	nop
 800c970:	bf00      	nop
 800c972:	e7fd      	b.n	800c970 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800c974:	693b      	ldr	r3, [r7, #16]
 800c976:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c978:	1e5a      	subs	r2, r3, #1
 800c97a:	693b      	ldr	r3, [r7, #16]
 800c97c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c97e:	693b      	ldr	r3, [r7, #16]
 800c980:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c982:	693b      	ldr	r3, [r7, #16]
 800c984:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c986:	429a      	cmp	r2, r3
 800c988:	d02c      	beq.n	800c9e4 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c98a:	693b      	ldr	r3, [r7, #16]
 800c98c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c98e:	2b00      	cmp	r3, #0
 800c990:	d128      	bne.n	800c9e4 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c992:	693b      	ldr	r3, [r7, #16]
 800c994:	3304      	adds	r3, #4
 800c996:	4618      	mov	r0, r3
 800c998:	f7fe f84e 	bl	800aa38 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c99c:	693b      	ldr	r3, [r7, #16]
 800c99e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c9a0:	693b      	ldr	r3, [r7, #16]
 800c9a2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c9a4:	693b      	ldr	r3, [r7, #16]
 800c9a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c9a8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800c9ac:	693b      	ldr	r3, [r7, #16]
 800c9ae:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c9b0:	693b      	ldr	r3, [r7, #16]
 800c9b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c9b4:	4b0f      	ldr	r3, [pc, #60]	@ (800c9f4 <xTaskPriorityDisinherit+0xd8>)
 800c9b6:	681b      	ldr	r3, [r3, #0]
 800c9b8:	429a      	cmp	r2, r3
 800c9ba:	d903      	bls.n	800c9c4 <xTaskPriorityDisinherit+0xa8>
 800c9bc:	693b      	ldr	r3, [r7, #16]
 800c9be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c9c0:	4a0c      	ldr	r2, [pc, #48]	@ (800c9f4 <xTaskPriorityDisinherit+0xd8>)
 800c9c2:	6013      	str	r3, [r2, #0]
 800c9c4:	693b      	ldr	r3, [r7, #16]
 800c9c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c9c8:	4613      	mov	r3, r2
 800c9ca:	009b      	lsls	r3, r3, #2
 800c9cc:	4413      	add	r3, r2
 800c9ce:	009b      	lsls	r3, r3, #2
 800c9d0:	4a09      	ldr	r2, [pc, #36]	@ (800c9f8 <xTaskPriorityDisinherit+0xdc>)
 800c9d2:	441a      	add	r2, r3
 800c9d4:	693b      	ldr	r3, [r7, #16]
 800c9d6:	3304      	adds	r3, #4
 800c9d8:	4619      	mov	r1, r3
 800c9da:	4610      	mov	r0, r2
 800c9dc:	f7fd ffcf 	bl	800a97e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c9e0:	2301      	movs	r3, #1
 800c9e2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c9e4:	697b      	ldr	r3, [r7, #20]
	}
 800c9e6:	4618      	mov	r0, r3
 800c9e8:	3718      	adds	r7, #24
 800c9ea:	46bd      	mov	sp, r7
 800c9ec:	bd80      	pop	{r7, pc}
 800c9ee:	bf00      	nop
 800c9f0:	200011fc 	.word	0x200011fc
 800c9f4:	200016d8 	.word	0x200016d8
 800c9f8:	20001200 	.word	0x20001200

0800c9fc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800c9fc:	b580      	push	{r7, lr}
 800c9fe:	b088      	sub	sp, #32
 800ca00:	af00      	add	r7, sp, #0
 800ca02:	6078      	str	r0, [r7, #4]
 800ca04:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800ca0a:	2301      	movs	r3, #1
 800ca0c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d06c      	beq.n	800caee <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800ca14:	69bb      	ldr	r3, [r7, #24]
 800ca16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	d10b      	bne.n	800ca34 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800ca1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca20:	f383 8811 	msr	BASEPRI, r3
 800ca24:	f3bf 8f6f 	isb	sy
 800ca28:	f3bf 8f4f 	dsb	sy
 800ca2c:	60fb      	str	r3, [r7, #12]
}
 800ca2e:	bf00      	nop
 800ca30:	bf00      	nop
 800ca32:	e7fd      	b.n	800ca30 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800ca34:	69bb      	ldr	r3, [r7, #24]
 800ca36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ca38:	683a      	ldr	r2, [r7, #0]
 800ca3a:	429a      	cmp	r2, r3
 800ca3c:	d902      	bls.n	800ca44 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800ca3e:	683b      	ldr	r3, [r7, #0]
 800ca40:	61fb      	str	r3, [r7, #28]
 800ca42:	e002      	b.n	800ca4a <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800ca44:	69bb      	ldr	r3, [r7, #24]
 800ca46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ca48:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800ca4a:	69bb      	ldr	r3, [r7, #24]
 800ca4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ca4e:	69fa      	ldr	r2, [r7, #28]
 800ca50:	429a      	cmp	r2, r3
 800ca52:	d04c      	beq.n	800caee <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800ca54:	69bb      	ldr	r3, [r7, #24]
 800ca56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ca58:	697a      	ldr	r2, [r7, #20]
 800ca5a:	429a      	cmp	r2, r3
 800ca5c:	d147      	bne.n	800caee <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800ca5e:	4b26      	ldr	r3, [pc, #152]	@ (800caf8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800ca60:	681b      	ldr	r3, [r3, #0]
 800ca62:	69ba      	ldr	r2, [r7, #24]
 800ca64:	429a      	cmp	r2, r3
 800ca66:	d10b      	bne.n	800ca80 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800ca68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca6c:	f383 8811 	msr	BASEPRI, r3
 800ca70:	f3bf 8f6f 	isb	sy
 800ca74:	f3bf 8f4f 	dsb	sy
 800ca78:	60bb      	str	r3, [r7, #8]
}
 800ca7a:	bf00      	nop
 800ca7c:	bf00      	nop
 800ca7e:	e7fd      	b.n	800ca7c <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800ca80:	69bb      	ldr	r3, [r7, #24]
 800ca82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ca84:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800ca86:	69bb      	ldr	r3, [r7, #24]
 800ca88:	69fa      	ldr	r2, [r7, #28]
 800ca8a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ca8c:	69bb      	ldr	r3, [r7, #24]
 800ca8e:	699b      	ldr	r3, [r3, #24]
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	db04      	blt.n	800ca9e <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ca94:	69fb      	ldr	r3, [r7, #28]
 800ca96:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800ca9a:	69bb      	ldr	r3, [r7, #24]
 800ca9c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ca9e:	69bb      	ldr	r3, [r7, #24]
 800caa0:	6959      	ldr	r1, [r3, #20]
 800caa2:	693a      	ldr	r2, [r7, #16]
 800caa4:	4613      	mov	r3, r2
 800caa6:	009b      	lsls	r3, r3, #2
 800caa8:	4413      	add	r3, r2
 800caaa:	009b      	lsls	r3, r3, #2
 800caac:	4a13      	ldr	r2, [pc, #76]	@ (800cafc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800caae:	4413      	add	r3, r2
 800cab0:	4299      	cmp	r1, r3
 800cab2:	d11c      	bne.n	800caee <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cab4:	69bb      	ldr	r3, [r7, #24]
 800cab6:	3304      	adds	r3, #4
 800cab8:	4618      	mov	r0, r3
 800caba:	f7fd ffbd 	bl	800aa38 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800cabe:	69bb      	ldr	r3, [r7, #24]
 800cac0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cac2:	4b0f      	ldr	r3, [pc, #60]	@ (800cb00 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	429a      	cmp	r2, r3
 800cac8:	d903      	bls.n	800cad2 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800caca:	69bb      	ldr	r3, [r7, #24]
 800cacc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cace:	4a0c      	ldr	r2, [pc, #48]	@ (800cb00 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800cad0:	6013      	str	r3, [r2, #0]
 800cad2:	69bb      	ldr	r3, [r7, #24]
 800cad4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cad6:	4613      	mov	r3, r2
 800cad8:	009b      	lsls	r3, r3, #2
 800cada:	4413      	add	r3, r2
 800cadc:	009b      	lsls	r3, r3, #2
 800cade:	4a07      	ldr	r2, [pc, #28]	@ (800cafc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800cae0:	441a      	add	r2, r3
 800cae2:	69bb      	ldr	r3, [r7, #24]
 800cae4:	3304      	adds	r3, #4
 800cae6:	4619      	mov	r1, r3
 800cae8:	4610      	mov	r0, r2
 800caea:	f7fd ff48 	bl	800a97e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800caee:	bf00      	nop
 800caf0:	3720      	adds	r7, #32
 800caf2:	46bd      	mov	sp, r7
 800caf4:	bd80      	pop	{r7, pc}
 800caf6:	bf00      	nop
 800caf8:	200011fc 	.word	0x200011fc
 800cafc:	20001200 	.word	0x20001200
 800cb00:	200016d8 	.word	0x200016d8

0800cb04 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800cb04:	b480      	push	{r7}
 800cb06:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800cb08:	4b07      	ldr	r3, [pc, #28]	@ (800cb28 <pvTaskIncrementMutexHeldCount+0x24>)
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	d004      	beq.n	800cb1a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800cb10:	4b05      	ldr	r3, [pc, #20]	@ (800cb28 <pvTaskIncrementMutexHeldCount+0x24>)
 800cb12:	681b      	ldr	r3, [r3, #0]
 800cb14:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800cb16:	3201      	adds	r2, #1
 800cb18:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800cb1a:	4b03      	ldr	r3, [pc, #12]	@ (800cb28 <pvTaskIncrementMutexHeldCount+0x24>)
 800cb1c:	681b      	ldr	r3, [r3, #0]
	}
 800cb1e:	4618      	mov	r0, r3
 800cb20:	46bd      	mov	sp, r7
 800cb22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb26:	4770      	bx	lr
 800cb28:	200011fc 	.word	0x200011fc

0800cb2c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800cb2c:	b580      	push	{r7, lr}
 800cb2e:	b084      	sub	sp, #16
 800cb30:	af00      	add	r7, sp, #0
 800cb32:	6078      	str	r0, [r7, #4]
 800cb34:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800cb36:	4b21      	ldr	r3, [pc, #132]	@ (800cbbc <prvAddCurrentTaskToDelayedList+0x90>)
 800cb38:	681b      	ldr	r3, [r3, #0]
 800cb3a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cb3c:	4b20      	ldr	r3, [pc, #128]	@ (800cbc0 <prvAddCurrentTaskToDelayedList+0x94>)
 800cb3e:	681b      	ldr	r3, [r3, #0]
 800cb40:	3304      	adds	r3, #4
 800cb42:	4618      	mov	r0, r3
 800cb44:	f7fd ff78 	bl	800aa38 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb4e:	d10a      	bne.n	800cb66 <prvAddCurrentTaskToDelayedList+0x3a>
 800cb50:	683b      	ldr	r3, [r7, #0]
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d007      	beq.n	800cb66 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cb56:	4b1a      	ldr	r3, [pc, #104]	@ (800cbc0 <prvAddCurrentTaskToDelayedList+0x94>)
 800cb58:	681b      	ldr	r3, [r3, #0]
 800cb5a:	3304      	adds	r3, #4
 800cb5c:	4619      	mov	r1, r3
 800cb5e:	4819      	ldr	r0, [pc, #100]	@ (800cbc4 <prvAddCurrentTaskToDelayedList+0x98>)
 800cb60:	f7fd ff0d 	bl	800a97e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800cb64:	e026      	b.n	800cbb4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800cb66:	68fa      	ldr	r2, [r7, #12]
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	4413      	add	r3, r2
 800cb6c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800cb6e:	4b14      	ldr	r3, [pc, #80]	@ (800cbc0 <prvAddCurrentTaskToDelayedList+0x94>)
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	68ba      	ldr	r2, [r7, #8]
 800cb74:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800cb76:	68ba      	ldr	r2, [r7, #8]
 800cb78:	68fb      	ldr	r3, [r7, #12]
 800cb7a:	429a      	cmp	r2, r3
 800cb7c:	d209      	bcs.n	800cb92 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cb7e:	4b12      	ldr	r3, [pc, #72]	@ (800cbc8 <prvAddCurrentTaskToDelayedList+0x9c>)
 800cb80:	681a      	ldr	r2, [r3, #0]
 800cb82:	4b0f      	ldr	r3, [pc, #60]	@ (800cbc0 <prvAddCurrentTaskToDelayedList+0x94>)
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	3304      	adds	r3, #4
 800cb88:	4619      	mov	r1, r3
 800cb8a:	4610      	mov	r0, r2
 800cb8c:	f7fd ff1b 	bl	800a9c6 <vListInsert>
}
 800cb90:	e010      	b.n	800cbb4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cb92:	4b0e      	ldr	r3, [pc, #56]	@ (800cbcc <prvAddCurrentTaskToDelayedList+0xa0>)
 800cb94:	681a      	ldr	r2, [r3, #0]
 800cb96:	4b0a      	ldr	r3, [pc, #40]	@ (800cbc0 <prvAddCurrentTaskToDelayedList+0x94>)
 800cb98:	681b      	ldr	r3, [r3, #0]
 800cb9a:	3304      	adds	r3, #4
 800cb9c:	4619      	mov	r1, r3
 800cb9e:	4610      	mov	r0, r2
 800cba0:	f7fd ff11 	bl	800a9c6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800cba4:	4b0a      	ldr	r3, [pc, #40]	@ (800cbd0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	68ba      	ldr	r2, [r7, #8]
 800cbaa:	429a      	cmp	r2, r3
 800cbac:	d202      	bcs.n	800cbb4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800cbae:	4a08      	ldr	r2, [pc, #32]	@ (800cbd0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800cbb0:	68bb      	ldr	r3, [r7, #8]
 800cbb2:	6013      	str	r3, [r2, #0]
}
 800cbb4:	bf00      	nop
 800cbb6:	3710      	adds	r7, #16
 800cbb8:	46bd      	mov	sp, r7
 800cbba:	bd80      	pop	{r7, pc}
 800cbbc:	200016d4 	.word	0x200016d4
 800cbc0:	200011fc 	.word	0x200011fc
 800cbc4:	200016bc 	.word	0x200016bc
 800cbc8:	2000168c 	.word	0x2000168c
 800cbcc:	20001688 	.word	0x20001688
 800cbd0:	200016f0 	.word	0x200016f0

0800cbd4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800cbd4:	b580      	push	{r7, lr}
 800cbd6:	b08a      	sub	sp, #40	@ 0x28
 800cbd8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800cbda:	2300      	movs	r3, #0
 800cbdc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800cbde:	f000 fb13 	bl	800d208 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800cbe2:	4b1d      	ldr	r3, [pc, #116]	@ (800cc58 <xTimerCreateTimerTask+0x84>)
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d021      	beq.n	800cc2e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800cbea:	2300      	movs	r3, #0
 800cbec:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800cbee:	2300      	movs	r3, #0
 800cbf0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800cbf2:	1d3a      	adds	r2, r7, #4
 800cbf4:	f107 0108 	add.w	r1, r7, #8
 800cbf8:	f107 030c 	add.w	r3, r7, #12
 800cbfc:	4618      	mov	r0, r3
 800cbfe:	f7fd fe77 	bl	800a8f0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800cc02:	6879      	ldr	r1, [r7, #4]
 800cc04:	68bb      	ldr	r3, [r7, #8]
 800cc06:	68fa      	ldr	r2, [r7, #12]
 800cc08:	9202      	str	r2, [sp, #8]
 800cc0a:	9301      	str	r3, [sp, #4]
 800cc0c:	2302      	movs	r3, #2
 800cc0e:	9300      	str	r3, [sp, #0]
 800cc10:	2300      	movs	r3, #0
 800cc12:	460a      	mov	r2, r1
 800cc14:	4911      	ldr	r1, [pc, #68]	@ (800cc5c <xTimerCreateTimerTask+0x88>)
 800cc16:	4812      	ldr	r0, [pc, #72]	@ (800cc60 <xTimerCreateTimerTask+0x8c>)
 800cc18:	f7fe ffa2 	bl	800bb60 <xTaskCreateStatic>
 800cc1c:	4603      	mov	r3, r0
 800cc1e:	4a11      	ldr	r2, [pc, #68]	@ (800cc64 <xTimerCreateTimerTask+0x90>)
 800cc20:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800cc22:	4b10      	ldr	r3, [pc, #64]	@ (800cc64 <xTimerCreateTimerTask+0x90>)
 800cc24:	681b      	ldr	r3, [r3, #0]
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	d001      	beq.n	800cc2e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800cc2a:	2301      	movs	r3, #1
 800cc2c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800cc2e:	697b      	ldr	r3, [r7, #20]
 800cc30:	2b00      	cmp	r3, #0
 800cc32:	d10b      	bne.n	800cc4c <xTimerCreateTimerTask+0x78>
	__asm volatile
 800cc34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc38:	f383 8811 	msr	BASEPRI, r3
 800cc3c:	f3bf 8f6f 	isb	sy
 800cc40:	f3bf 8f4f 	dsb	sy
 800cc44:	613b      	str	r3, [r7, #16]
}
 800cc46:	bf00      	nop
 800cc48:	bf00      	nop
 800cc4a:	e7fd      	b.n	800cc48 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800cc4c:	697b      	ldr	r3, [r7, #20]
}
 800cc4e:	4618      	mov	r0, r3
 800cc50:	3718      	adds	r7, #24
 800cc52:	46bd      	mov	sp, r7
 800cc54:	bd80      	pop	{r7, pc}
 800cc56:	bf00      	nop
 800cc58:	2000172c 	.word	0x2000172c
 800cc5c:	08010f8c 	.word	0x08010f8c
 800cc60:	0800cda1 	.word	0x0800cda1
 800cc64:	20001730 	.word	0x20001730

0800cc68 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800cc68:	b580      	push	{r7, lr}
 800cc6a:	b08a      	sub	sp, #40	@ 0x28
 800cc6c:	af00      	add	r7, sp, #0
 800cc6e:	60f8      	str	r0, [r7, #12]
 800cc70:	60b9      	str	r1, [r7, #8]
 800cc72:	607a      	str	r2, [r7, #4]
 800cc74:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800cc76:	2300      	movs	r3, #0
 800cc78:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800cc7a:	68fb      	ldr	r3, [r7, #12]
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	d10b      	bne.n	800cc98 <xTimerGenericCommand+0x30>
	__asm volatile
 800cc80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc84:	f383 8811 	msr	BASEPRI, r3
 800cc88:	f3bf 8f6f 	isb	sy
 800cc8c:	f3bf 8f4f 	dsb	sy
 800cc90:	623b      	str	r3, [r7, #32]
}
 800cc92:	bf00      	nop
 800cc94:	bf00      	nop
 800cc96:	e7fd      	b.n	800cc94 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800cc98:	4b19      	ldr	r3, [pc, #100]	@ (800cd00 <xTimerGenericCommand+0x98>)
 800cc9a:	681b      	ldr	r3, [r3, #0]
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	d02a      	beq.n	800ccf6 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800cca0:	68bb      	ldr	r3, [r7, #8]
 800cca2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800cca8:	68fb      	ldr	r3, [r7, #12]
 800ccaa:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ccac:	68bb      	ldr	r3, [r7, #8]
 800ccae:	2b05      	cmp	r3, #5
 800ccb0:	dc18      	bgt.n	800cce4 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ccb2:	f7ff fdad 	bl	800c810 <xTaskGetSchedulerState>
 800ccb6:	4603      	mov	r3, r0
 800ccb8:	2b02      	cmp	r3, #2
 800ccba:	d109      	bne.n	800ccd0 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ccbc:	4b10      	ldr	r3, [pc, #64]	@ (800cd00 <xTimerGenericCommand+0x98>)
 800ccbe:	6818      	ldr	r0, [r3, #0]
 800ccc0:	f107 0110 	add.w	r1, r7, #16
 800ccc4:	2300      	movs	r3, #0
 800ccc6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ccc8:	f7fe f894 	bl	800adf4 <xQueueGenericSend>
 800cccc:	6278      	str	r0, [r7, #36]	@ 0x24
 800ccce:	e012      	b.n	800ccf6 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800ccd0:	4b0b      	ldr	r3, [pc, #44]	@ (800cd00 <xTimerGenericCommand+0x98>)
 800ccd2:	6818      	ldr	r0, [r3, #0]
 800ccd4:	f107 0110 	add.w	r1, r7, #16
 800ccd8:	2300      	movs	r3, #0
 800ccda:	2200      	movs	r2, #0
 800ccdc:	f7fe f88a 	bl	800adf4 <xQueueGenericSend>
 800cce0:	6278      	str	r0, [r7, #36]	@ 0x24
 800cce2:	e008      	b.n	800ccf6 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800cce4:	4b06      	ldr	r3, [pc, #24]	@ (800cd00 <xTimerGenericCommand+0x98>)
 800cce6:	6818      	ldr	r0, [r3, #0]
 800cce8:	f107 0110 	add.w	r1, r7, #16
 800ccec:	2300      	movs	r3, #0
 800ccee:	683a      	ldr	r2, [r7, #0]
 800ccf0:	f7fe f982 	bl	800aff8 <xQueueGenericSendFromISR>
 800ccf4:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800ccf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800ccf8:	4618      	mov	r0, r3
 800ccfa:	3728      	adds	r7, #40	@ 0x28
 800ccfc:	46bd      	mov	sp, r7
 800ccfe:	bd80      	pop	{r7, pc}
 800cd00:	2000172c 	.word	0x2000172c

0800cd04 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800cd04:	b580      	push	{r7, lr}
 800cd06:	b088      	sub	sp, #32
 800cd08:	af02      	add	r7, sp, #8
 800cd0a:	6078      	str	r0, [r7, #4]
 800cd0c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cd0e:	4b23      	ldr	r3, [pc, #140]	@ (800cd9c <prvProcessExpiredTimer+0x98>)
 800cd10:	681b      	ldr	r3, [r3, #0]
 800cd12:	68db      	ldr	r3, [r3, #12]
 800cd14:	68db      	ldr	r3, [r3, #12]
 800cd16:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cd18:	697b      	ldr	r3, [r7, #20]
 800cd1a:	3304      	adds	r3, #4
 800cd1c:	4618      	mov	r0, r3
 800cd1e:	f7fd fe8b 	bl	800aa38 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cd22:	697b      	ldr	r3, [r7, #20]
 800cd24:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cd28:	f003 0304 	and.w	r3, r3, #4
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	d023      	beq.n	800cd78 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800cd30:	697b      	ldr	r3, [r7, #20]
 800cd32:	699a      	ldr	r2, [r3, #24]
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	18d1      	adds	r1, r2, r3
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	683a      	ldr	r2, [r7, #0]
 800cd3c:	6978      	ldr	r0, [r7, #20]
 800cd3e:	f000 f8d5 	bl	800ceec <prvInsertTimerInActiveList>
 800cd42:	4603      	mov	r3, r0
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	d020      	beq.n	800cd8a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800cd48:	2300      	movs	r3, #0
 800cd4a:	9300      	str	r3, [sp, #0]
 800cd4c:	2300      	movs	r3, #0
 800cd4e:	687a      	ldr	r2, [r7, #4]
 800cd50:	2100      	movs	r1, #0
 800cd52:	6978      	ldr	r0, [r7, #20]
 800cd54:	f7ff ff88 	bl	800cc68 <xTimerGenericCommand>
 800cd58:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800cd5a:	693b      	ldr	r3, [r7, #16]
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d114      	bne.n	800cd8a <prvProcessExpiredTimer+0x86>
	__asm volatile
 800cd60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd64:	f383 8811 	msr	BASEPRI, r3
 800cd68:	f3bf 8f6f 	isb	sy
 800cd6c:	f3bf 8f4f 	dsb	sy
 800cd70:	60fb      	str	r3, [r7, #12]
}
 800cd72:	bf00      	nop
 800cd74:	bf00      	nop
 800cd76:	e7fd      	b.n	800cd74 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cd78:	697b      	ldr	r3, [r7, #20]
 800cd7a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cd7e:	f023 0301 	bic.w	r3, r3, #1
 800cd82:	b2da      	uxtb	r2, r3
 800cd84:	697b      	ldr	r3, [r7, #20]
 800cd86:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cd8a:	697b      	ldr	r3, [r7, #20]
 800cd8c:	6a1b      	ldr	r3, [r3, #32]
 800cd8e:	6978      	ldr	r0, [r7, #20]
 800cd90:	4798      	blx	r3
}
 800cd92:	bf00      	nop
 800cd94:	3718      	adds	r7, #24
 800cd96:	46bd      	mov	sp, r7
 800cd98:	bd80      	pop	{r7, pc}
 800cd9a:	bf00      	nop
 800cd9c:	20001724 	.word	0x20001724

0800cda0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800cda0:	b580      	push	{r7, lr}
 800cda2:	b084      	sub	sp, #16
 800cda4:	af00      	add	r7, sp, #0
 800cda6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800cda8:	f107 0308 	add.w	r3, r7, #8
 800cdac:	4618      	mov	r0, r3
 800cdae:	f000 f859 	bl	800ce64 <prvGetNextExpireTime>
 800cdb2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800cdb4:	68bb      	ldr	r3, [r7, #8]
 800cdb6:	4619      	mov	r1, r3
 800cdb8:	68f8      	ldr	r0, [r7, #12]
 800cdba:	f000 f805 	bl	800cdc8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800cdbe:	f000 f8d7 	bl	800cf70 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800cdc2:	bf00      	nop
 800cdc4:	e7f0      	b.n	800cda8 <prvTimerTask+0x8>
	...

0800cdc8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800cdc8:	b580      	push	{r7, lr}
 800cdca:	b084      	sub	sp, #16
 800cdcc:	af00      	add	r7, sp, #0
 800cdce:	6078      	str	r0, [r7, #4]
 800cdd0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800cdd2:	f7ff f929 	bl	800c028 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800cdd6:	f107 0308 	add.w	r3, r7, #8
 800cdda:	4618      	mov	r0, r3
 800cddc:	f000 f866 	bl	800ceac <prvSampleTimeNow>
 800cde0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800cde2:	68bb      	ldr	r3, [r7, #8]
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d130      	bne.n	800ce4a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800cde8:	683b      	ldr	r3, [r7, #0]
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	d10a      	bne.n	800ce04 <prvProcessTimerOrBlockTask+0x3c>
 800cdee:	687a      	ldr	r2, [r7, #4]
 800cdf0:	68fb      	ldr	r3, [r7, #12]
 800cdf2:	429a      	cmp	r2, r3
 800cdf4:	d806      	bhi.n	800ce04 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800cdf6:	f7ff f925 	bl	800c044 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800cdfa:	68f9      	ldr	r1, [r7, #12]
 800cdfc:	6878      	ldr	r0, [r7, #4]
 800cdfe:	f7ff ff81 	bl	800cd04 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800ce02:	e024      	b.n	800ce4e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800ce04:	683b      	ldr	r3, [r7, #0]
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d008      	beq.n	800ce1c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800ce0a:	4b13      	ldr	r3, [pc, #76]	@ (800ce58 <prvProcessTimerOrBlockTask+0x90>)
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	681b      	ldr	r3, [r3, #0]
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	d101      	bne.n	800ce18 <prvProcessTimerOrBlockTask+0x50>
 800ce14:	2301      	movs	r3, #1
 800ce16:	e000      	b.n	800ce1a <prvProcessTimerOrBlockTask+0x52>
 800ce18:	2300      	movs	r3, #0
 800ce1a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800ce1c:	4b0f      	ldr	r3, [pc, #60]	@ (800ce5c <prvProcessTimerOrBlockTask+0x94>)
 800ce1e:	6818      	ldr	r0, [r3, #0]
 800ce20:	687a      	ldr	r2, [r7, #4]
 800ce22:	68fb      	ldr	r3, [r7, #12]
 800ce24:	1ad3      	subs	r3, r2, r3
 800ce26:	683a      	ldr	r2, [r7, #0]
 800ce28:	4619      	mov	r1, r3
 800ce2a:	f7fe fe65 	bl	800baf8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800ce2e:	f7ff f909 	bl	800c044 <xTaskResumeAll>
 800ce32:	4603      	mov	r3, r0
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	d10a      	bne.n	800ce4e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800ce38:	4b09      	ldr	r3, [pc, #36]	@ (800ce60 <prvProcessTimerOrBlockTask+0x98>)
 800ce3a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ce3e:	601a      	str	r2, [r3, #0]
 800ce40:	f3bf 8f4f 	dsb	sy
 800ce44:	f3bf 8f6f 	isb	sy
}
 800ce48:	e001      	b.n	800ce4e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800ce4a:	f7ff f8fb 	bl	800c044 <xTaskResumeAll>
}
 800ce4e:	bf00      	nop
 800ce50:	3710      	adds	r7, #16
 800ce52:	46bd      	mov	sp, r7
 800ce54:	bd80      	pop	{r7, pc}
 800ce56:	bf00      	nop
 800ce58:	20001728 	.word	0x20001728
 800ce5c:	2000172c 	.word	0x2000172c
 800ce60:	e000ed04 	.word	0xe000ed04

0800ce64 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800ce64:	b480      	push	{r7}
 800ce66:	b085      	sub	sp, #20
 800ce68:	af00      	add	r7, sp, #0
 800ce6a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ce6c:	4b0e      	ldr	r3, [pc, #56]	@ (800cea8 <prvGetNextExpireTime+0x44>)
 800ce6e:	681b      	ldr	r3, [r3, #0]
 800ce70:	681b      	ldr	r3, [r3, #0]
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	d101      	bne.n	800ce7a <prvGetNextExpireTime+0x16>
 800ce76:	2201      	movs	r2, #1
 800ce78:	e000      	b.n	800ce7c <prvGetNextExpireTime+0x18>
 800ce7a:	2200      	movs	r2, #0
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	681b      	ldr	r3, [r3, #0]
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	d105      	bne.n	800ce94 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ce88:	4b07      	ldr	r3, [pc, #28]	@ (800cea8 <prvGetNextExpireTime+0x44>)
 800ce8a:	681b      	ldr	r3, [r3, #0]
 800ce8c:	68db      	ldr	r3, [r3, #12]
 800ce8e:	681b      	ldr	r3, [r3, #0]
 800ce90:	60fb      	str	r3, [r7, #12]
 800ce92:	e001      	b.n	800ce98 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800ce94:	2300      	movs	r3, #0
 800ce96:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800ce98:	68fb      	ldr	r3, [r7, #12]
}
 800ce9a:	4618      	mov	r0, r3
 800ce9c:	3714      	adds	r7, #20
 800ce9e:	46bd      	mov	sp, r7
 800cea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cea4:	4770      	bx	lr
 800cea6:	bf00      	nop
 800cea8:	20001724 	.word	0x20001724

0800ceac <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800ceac:	b580      	push	{r7, lr}
 800ceae:	b084      	sub	sp, #16
 800ceb0:	af00      	add	r7, sp, #0
 800ceb2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800ceb4:	f7ff f964 	bl	800c180 <xTaskGetTickCount>
 800ceb8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800ceba:	4b0b      	ldr	r3, [pc, #44]	@ (800cee8 <prvSampleTimeNow+0x3c>)
 800cebc:	681b      	ldr	r3, [r3, #0]
 800cebe:	68fa      	ldr	r2, [r7, #12]
 800cec0:	429a      	cmp	r2, r3
 800cec2:	d205      	bcs.n	800ced0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800cec4:	f000 f93a 	bl	800d13c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	2201      	movs	r2, #1
 800cecc:	601a      	str	r2, [r3, #0]
 800cece:	e002      	b.n	800ced6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	2200      	movs	r2, #0
 800ced4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800ced6:	4a04      	ldr	r2, [pc, #16]	@ (800cee8 <prvSampleTimeNow+0x3c>)
 800ced8:	68fb      	ldr	r3, [r7, #12]
 800ceda:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800cedc:	68fb      	ldr	r3, [r7, #12]
}
 800cede:	4618      	mov	r0, r3
 800cee0:	3710      	adds	r7, #16
 800cee2:	46bd      	mov	sp, r7
 800cee4:	bd80      	pop	{r7, pc}
 800cee6:	bf00      	nop
 800cee8:	20001734 	.word	0x20001734

0800ceec <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800ceec:	b580      	push	{r7, lr}
 800ceee:	b086      	sub	sp, #24
 800cef0:	af00      	add	r7, sp, #0
 800cef2:	60f8      	str	r0, [r7, #12]
 800cef4:	60b9      	str	r1, [r7, #8]
 800cef6:	607a      	str	r2, [r7, #4]
 800cef8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800cefa:	2300      	movs	r3, #0
 800cefc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800cefe:	68fb      	ldr	r3, [r7, #12]
 800cf00:	68ba      	ldr	r2, [r7, #8]
 800cf02:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800cf04:	68fb      	ldr	r3, [r7, #12]
 800cf06:	68fa      	ldr	r2, [r7, #12]
 800cf08:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800cf0a:	68ba      	ldr	r2, [r7, #8]
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	429a      	cmp	r2, r3
 800cf10:	d812      	bhi.n	800cf38 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cf12:	687a      	ldr	r2, [r7, #4]
 800cf14:	683b      	ldr	r3, [r7, #0]
 800cf16:	1ad2      	subs	r2, r2, r3
 800cf18:	68fb      	ldr	r3, [r7, #12]
 800cf1a:	699b      	ldr	r3, [r3, #24]
 800cf1c:	429a      	cmp	r2, r3
 800cf1e:	d302      	bcc.n	800cf26 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800cf20:	2301      	movs	r3, #1
 800cf22:	617b      	str	r3, [r7, #20]
 800cf24:	e01b      	b.n	800cf5e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800cf26:	4b10      	ldr	r3, [pc, #64]	@ (800cf68 <prvInsertTimerInActiveList+0x7c>)
 800cf28:	681a      	ldr	r2, [r3, #0]
 800cf2a:	68fb      	ldr	r3, [r7, #12]
 800cf2c:	3304      	adds	r3, #4
 800cf2e:	4619      	mov	r1, r3
 800cf30:	4610      	mov	r0, r2
 800cf32:	f7fd fd48 	bl	800a9c6 <vListInsert>
 800cf36:	e012      	b.n	800cf5e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800cf38:	687a      	ldr	r2, [r7, #4]
 800cf3a:	683b      	ldr	r3, [r7, #0]
 800cf3c:	429a      	cmp	r2, r3
 800cf3e:	d206      	bcs.n	800cf4e <prvInsertTimerInActiveList+0x62>
 800cf40:	68ba      	ldr	r2, [r7, #8]
 800cf42:	683b      	ldr	r3, [r7, #0]
 800cf44:	429a      	cmp	r2, r3
 800cf46:	d302      	bcc.n	800cf4e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800cf48:	2301      	movs	r3, #1
 800cf4a:	617b      	str	r3, [r7, #20]
 800cf4c:	e007      	b.n	800cf5e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800cf4e:	4b07      	ldr	r3, [pc, #28]	@ (800cf6c <prvInsertTimerInActiveList+0x80>)
 800cf50:	681a      	ldr	r2, [r3, #0]
 800cf52:	68fb      	ldr	r3, [r7, #12]
 800cf54:	3304      	adds	r3, #4
 800cf56:	4619      	mov	r1, r3
 800cf58:	4610      	mov	r0, r2
 800cf5a:	f7fd fd34 	bl	800a9c6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800cf5e:	697b      	ldr	r3, [r7, #20]
}
 800cf60:	4618      	mov	r0, r3
 800cf62:	3718      	adds	r7, #24
 800cf64:	46bd      	mov	sp, r7
 800cf66:	bd80      	pop	{r7, pc}
 800cf68:	20001728 	.word	0x20001728
 800cf6c:	20001724 	.word	0x20001724

0800cf70 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800cf70:	b580      	push	{r7, lr}
 800cf72:	b08e      	sub	sp, #56	@ 0x38
 800cf74:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800cf76:	e0ce      	b.n	800d116 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	da19      	bge.n	800cfb2 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800cf7e:	1d3b      	adds	r3, r7, #4
 800cf80:	3304      	adds	r3, #4
 800cf82:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800cf84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d10b      	bne.n	800cfa2 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800cf8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf8e:	f383 8811 	msr	BASEPRI, r3
 800cf92:	f3bf 8f6f 	isb	sy
 800cf96:	f3bf 8f4f 	dsb	sy
 800cf9a:	61fb      	str	r3, [r7, #28]
}
 800cf9c:	bf00      	nop
 800cf9e:	bf00      	nop
 800cfa0:	e7fd      	b.n	800cf9e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800cfa2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cfa4:	681b      	ldr	r3, [r3, #0]
 800cfa6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cfa8:	6850      	ldr	r0, [r2, #4]
 800cfaa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cfac:	6892      	ldr	r2, [r2, #8]
 800cfae:	4611      	mov	r1, r2
 800cfb0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	f2c0 80ae 	blt.w	800d116 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800cfba:	68fb      	ldr	r3, [r7, #12]
 800cfbc:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800cfbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cfc0:	695b      	ldr	r3, [r3, #20]
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d004      	beq.n	800cfd0 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cfc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cfc8:	3304      	adds	r3, #4
 800cfca:	4618      	mov	r0, r3
 800cfcc:	f7fd fd34 	bl	800aa38 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800cfd0:	463b      	mov	r3, r7
 800cfd2:	4618      	mov	r0, r3
 800cfd4:	f7ff ff6a 	bl	800ceac <prvSampleTimeNow>
 800cfd8:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	2b09      	cmp	r3, #9
 800cfde:	f200 8097 	bhi.w	800d110 <prvProcessReceivedCommands+0x1a0>
 800cfe2:	a201      	add	r2, pc, #4	@ (adr r2, 800cfe8 <prvProcessReceivedCommands+0x78>)
 800cfe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cfe8:	0800d011 	.word	0x0800d011
 800cfec:	0800d011 	.word	0x0800d011
 800cff0:	0800d011 	.word	0x0800d011
 800cff4:	0800d087 	.word	0x0800d087
 800cff8:	0800d09b 	.word	0x0800d09b
 800cffc:	0800d0e7 	.word	0x0800d0e7
 800d000:	0800d011 	.word	0x0800d011
 800d004:	0800d011 	.word	0x0800d011
 800d008:	0800d087 	.word	0x0800d087
 800d00c:	0800d09b 	.word	0x0800d09b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d010:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d012:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d016:	f043 0301 	orr.w	r3, r3, #1
 800d01a:	b2da      	uxtb	r2, r3
 800d01c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d01e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800d022:	68ba      	ldr	r2, [r7, #8]
 800d024:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d026:	699b      	ldr	r3, [r3, #24]
 800d028:	18d1      	adds	r1, r2, r3
 800d02a:	68bb      	ldr	r3, [r7, #8]
 800d02c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d02e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d030:	f7ff ff5c 	bl	800ceec <prvInsertTimerInActiveList>
 800d034:	4603      	mov	r3, r0
 800d036:	2b00      	cmp	r3, #0
 800d038:	d06c      	beq.n	800d114 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d03a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d03c:	6a1b      	ldr	r3, [r3, #32]
 800d03e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d040:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d042:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d044:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d048:	f003 0304 	and.w	r3, r3, #4
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	d061      	beq.n	800d114 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800d050:	68ba      	ldr	r2, [r7, #8]
 800d052:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d054:	699b      	ldr	r3, [r3, #24]
 800d056:	441a      	add	r2, r3
 800d058:	2300      	movs	r3, #0
 800d05a:	9300      	str	r3, [sp, #0]
 800d05c:	2300      	movs	r3, #0
 800d05e:	2100      	movs	r1, #0
 800d060:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d062:	f7ff fe01 	bl	800cc68 <xTimerGenericCommand>
 800d066:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800d068:	6a3b      	ldr	r3, [r7, #32]
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	d152      	bne.n	800d114 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800d06e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d072:	f383 8811 	msr	BASEPRI, r3
 800d076:	f3bf 8f6f 	isb	sy
 800d07a:	f3bf 8f4f 	dsb	sy
 800d07e:	61bb      	str	r3, [r7, #24]
}
 800d080:	bf00      	nop
 800d082:	bf00      	nop
 800d084:	e7fd      	b.n	800d082 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d086:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d088:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d08c:	f023 0301 	bic.w	r3, r3, #1
 800d090:	b2da      	uxtb	r2, r3
 800d092:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d094:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800d098:	e03d      	b.n	800d116 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d09a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d09c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d0a0:	f043 0301 	orr.w	r3, r3, #1
 800d0a4:	b2da      	uxtb	r2, r3
 800d0a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d0a8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800d0ac:	68ba      	ldr	r2, [r7, #8]
 800d0ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d0b0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800d0b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d0b4:	699b      	ldr	r3, [r3, #24]
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	d10b      	bne.n	800d0d2 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800d0ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d0be:	f383 8811 	msr	BASEPRI, r3
 800d0c2:	f3bf 8f6f 	isb	sy
 800d0c6:	f3bf 8f4f 	dsb	sy
 800d0ca:	617b      	str	r3, [r7, #20]
}
 800d0cc:	bf00      	nop
 800d0ce:	bf00      	nop
 800d0d0:	e7fd      	b.n	800d0ce <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800d0d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d0d4:	699a      	ldr	r2, [r3, #24]
 800d0d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0d8:	18d1      	adds	r1, r2, r3
 800d0da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d0de:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d0e0:	f7ff ff04 	bl	800ceec <prvInsertTimerInActiveList>
					break;
 800d0e4:	e017      	b.n	800d116 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800d0e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d0e8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d0ec:	f003 0302 	and.w	r3, r3, #2
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	d103      	bne.n	800d0fc <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800d0f4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d0f6:	f000 fbe7 	bl	800d8c8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800d0fa:	e00c      	b.n	800d116 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d0fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d0fe:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d102:	f023 0301 	bic.w	r3, r3, #1
 800d106:	b2da      	uxtb	r2, r3
 800d108:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d10a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800d10e:	e002      	b.n	800d116 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800d110:	bf00      	nop
 800d112:	e000      	b.n	800d116 <prvProcessReceivedCommands+0x1a6>
					break;
 800d114:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d116:	4b08      	ldr	r3, [pc, #32]	@ (800d138 <prvProcessReceivedCommands+0x1c8>)
 800d118:	681b      	ldr	r3, [r3, #0]
 800d11a:	1d39      	adds	r1, r7, #4
 800d11c:	2200      	movs	r2, #0
 800d11e:	4618      	mov	r0, r3
 800d120:	f7fe f898 	bl	800b254 <xQueueReceive>
 800d124:	4603      	mov	r3, r0
 800d126:	2b00      	cmp	r3, #0
 800d128:	f47f af26 	bne.w	800cf78 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800d12c:	bf00      	nop
 800d12e:	bf00      	nop
 800d130:	3730      	adds	r7, #48	@ 0x30
 800d132:	46bd      	mov	sp, r7
 800d134:	bd80      	pop	{r7, pc}
 800d136:	bf00      	nop
 800d138:	2000172c 	.word	0x2000172c

0800d13c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800d13c:	b580      	push	{r7, lr}
 800d13e:	b088      	sub	sp, #32
 800d140:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d142:	e049      	b.n	800d1d8 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d144:	4b2e      	ldr	r3, [pc, #184]	@ (800d200 <prvSwitchTimerLists+0xc4>)
 800d146:	681b      	ldr	r3, [r3, #0]
 800d148:	68db      	ldr	r3, [r3, #12]
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d14e:	4b2c      	ldr	r3, [pc, #176]	@ (800d200 <prvSwitchTimerLists+0xc4>)
 800d150:	681b      	ldr	r3, [r3, #0]
 800d152:	68db      	ldr	r3, [r3, #12]
 800d154:	68db      	ldr	r3, [r3, #12]
 800d156:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d158:	68fb      	ldr	r3, [r7, #12]
 800d15a:	3304      	adds	r3, #4
 800d15c:	4618      	mov	r0, r3
 800d15e:	f7fd fc6b 	bl	800aa38 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d162:	68fb      	ldr	r3, [r7, #12]
 800d164:	6a1b      	ldr	r3, [r3, #32]
 800d166:	68f8      	ldr	r0, [r7, #12]
 800d168:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d16a:	68fb      	ldr	r3, [r7, #12]
 800d16c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d170:	f003 0304 	and.w	r3, r3, #4
 800d174:	2b00      	cmp	r3, #0
 800d176:	d02f      	beq.n	800d1d8 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800d178:	68fb      	ldr	r3, [r7, #12]
 800d17a:	699b      	ldr	r3, [r3, #24]
 800d17c:	693a      	ldr	r2, [r7, #16]
 800d17e:	4413      	add	r3, r2
 800d180:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800d182:	68ba      	ldr	r2, [r7, #8]
 800d184:	693b      	ldr	r3, [r7, #16]
 800d186:	429a      	cmp	r2, r3
 800d188:	d90e      	bls.n	800d1a8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800d18a:	68fb      	ldr	r3, [r7, #12]
 800d18c:	68ba      	ldr	r2, [r7, #8]
 800d18e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d190:	68fb      	ldr	r3, [r7, #12]
 800d192:	68fa      	ldr	r2, [r7, #12]
 800d194:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d196:	4b1a      	ldr	r3, [pc, #104]	@ (800d200 <prvSwitchTimerLists+0xc4>)
 800d198:	681a      	ldr	r2, [r3, #0]
 800d19a:	68fb      	ldr	r3, [r7, #12]
 800d19c:	3304      	adds	r3, #4
 800d19e:	4619      	mov	r1, r3
 800d1a0:	4610      	mov	r0, r2
 800d1a2:	f7fd fc10 	bl	800a9c6 <vListInsert>
 800d1a6:	e017      	b.n	800d1d8 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d1a8:	2300      	movs	r3, #0
 800d1aa:	9300      	str	r3, [sp, #0]
 800d1ac:	2300      	movs	r3, #0
 800d1ae:	693a      	ldr	r2, [r7, #16]
 800d1b0:	2100      	movs	r1, #0
 800d1b2:	68f8      	ldr	r0, [r7, #12]
 800d1b4:	f7ff fd58 	bl	800cc68 <xTimerGenericCommand>
 800d1b8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	d10b      	bne.n	800d1d8 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800d1c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d1c4:	f383 8811 	msr	BASEPRI, r3
 800d1c8:	f3bf 8f6f 	isb	sy
 800d1cc:	f3bf 8f4f 	dsb	sy
 800d1d0:	603b      	str	r3, [r7, #0]
}
 800d1d2:	bf00      	nop
 800d1d4:	bf00      	nop
 800d1d6:	e7fd      	b.n	800d1d4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d1d8:	4b09      	ldr	r3, [pc, #36]	@ (800d200 <prvSwitchTimerLists+0xc4>)
 800d1da:	681b      	ldr	r3, [r3, #0]
 800d1dc:	681b      	ldr	r3, [r3, #0]
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	d1b0      	bne.n	800d144 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800d1e2:	4b07      	ldr	r3, [pc, #28]	@ (800d200 <prvSwitchTimerLists+0xc4>)
 800d1e4:	681b      	ldr	r3, [r3, #0]
 800d1e6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800d1e8:	4b06      	ldr	r3, [pc, #24]	@ (800d204 <prvSwitchTimerLists+0xc8>)
 800d1ea:	681b      	ldr	r3, [r3, #0]
 800d1ec:	4a04      	ldr	r2, [pc, #16]	@ (800d200 <prvSwitchTimerLists+0xc4>)
 800d1ee:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800d1f0:	4a04      	ldr	r2, [pc, #16]	@ (800d204 <prvSwitchTimerLists+0xc8>)
 800d1f2:	697b      	ldr	r3, [r7, #20]
 800d1f4:	6013      	str	r3, [r2, #0]
}
 800d1f6:	bf00      	nop
 800d1f8:	3718      	adds	r7, #24
 800d1fa:	46bd      	mov	sp, r7
 800d1fc:	bd80      	pop	{r7, pc}
 800d1fe:	bf00      	nop
 800d200:	20001724 	.word	0x20001724
 800d204:	20001728 	.word	0x20001728

0800d208 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800d208:	b580      	push	{r7, lr}
 800d20a:	b082      	sub	sp, #8
 800d20c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800d20e:	f000 f96b 	bl	800d4e8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800d212:	4b15      	ldr	r3, [pc, #84]	@ (800d268 <prvCheckForValidListAndQueue+0x60>)
 800d214:	681b      	ldr	r3, [r3, #0]
 800d216:	2b00      	cmp	r3, #0
 800d218:	d120      	bne.n	800d25c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800d21a:	4814      	ldr	r0, [pc, #80]	@ (800d26c <prvCheckForValidListAndQueue+0x64>)
 800d21c:	f7fd fb82 	bl	800a924 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800d220:	4813      	ldr	r0, [pc, #76]	@ (800d270 <prvCheckForValidListAndQueue+0x68>)
 800d222:	f7fd fb7f 	bl	800a924 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800d226:	4b13      	ldr	r3, [pc, #76]	@ (800d274 <prvCheckForValidListAndQueue+0x6c>)
 800d228:	4a10      	ldr	r2, [pc, #64]	@ (800d26c <prvCheckForValidListAndQueue+0x64>)
 800d22a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800d22c:	4b12      	ldr	r3, [pc, #72]	@ (800d278 <prvCheckForValidListAndQueue+0x70>)
 800d22e:	4a10      	ldr	r2, [pc, #64]	@ (800d270 <prvCheckForValidListAndQueue+0x68>)
 800d230:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800d232:	2300      	movs	r3, #0
 800d234:	9300      	str	r3, [sp, #0]
 800d236:	4b11      	ldr	r3, [pc, #68]	@ (800d27c <prvCheckForValidListAndQueue+0x74>)
 800d238:	4a11      	ldr	r2, [pc, #68]	@ (800d280 <prvCheckForValidListAndQueue+0x78>)
 800d23a:	2110      	movs	r1, #16
 800d23c:	200a      	movs	r0, #10
 800d23e:	f7fd fc8f 	bl	800ab60 <xQueueGenericCreateStatic>
 800d242:	4603      	mov	r3, r0
 800d244:	4a08      	ldr	r2, [pc, #32]	@ (800d268 <prvCheckForValidListAndQueue+0x60>)
 800d246:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800d248:	4b07      	ldr	r3, [pc, #28]	@ (800d268 <prvCheckForValidListAndQueue+0x60>)
 800d24a:	681b      	ldr	r3, [r3, #0]
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d005      	beq.n	800d25c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800d250:	4b05      	ldr	r3, [pc, #20]	@ (800d268 <prvCheckForValidListAndQueue+0x60>)
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	490b      	ldr	r1, [pc, #44]	@ (800d284 <prvCheckForValidListAndQueue+0x7c>)
 800d256:	4618      	mov	r0, r3
 800d258:	f7fe fbfa 	bl	800ba50 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d25c:	f000 f976 	bl	800d54c <vPortExitCritical>
}
 800d260:	bf00      	nop
 800d262:	46bd      	mov	sp, r7
 800d264:	bd80      	pop	{r7, pc}
 800d266:	bf00      	nop
 800d268:	2000172c 	.word	0x2000172c
 800d26c:	200016fc 	.word	0x200016fc
 800d270:	20001710 	.word	0x20001710
 800d274:	20001724 	.word	0x20001724
 800d278:	20001728 	.word	0x20001728
 800d27c:	200017d8 	.word	0x200017d8
 800d280:	20001738 	.word	0x20001738
 800d284:	08010f94 	.word	0x08010f94

0800d288 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d288:	b480      	push	{r7}
 800d28a:	b085      	sub	sp, #20
 800d28c:	af00      	add	r7, sp, #0
 800d28e:	60f8      	str	r0, [r7, #12]
 800d290:	60b9      	str	r1, [r7, #8]
 800d292:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d294:	68fb      	ldr	r3, [r7, #12]
 800d296:	3b04      	subs	r3, #4
 800d298:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d29a:	68fb      	ldr	r3, [r7, #12]
 800d29c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800d2a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d2a2:	68fb      	ldr	r3, [r7, #12]
 800d2a4:	3b04      	subs	r3, #4
 800d2a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d2a8:	68bb      	ldr	r3, [r7, #8]
 800d2aa:	f023 0201 	bic.w	r2, r3, #1
 800d2ae:	68fb      	ldr	r3, [r7, #12]
 800d2b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d2b2:	68fb      	ldr	r3, [r7, #12]
 800d2b4:	3b04      	subs	r3, #4
 800d2b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d2b8:	4a0c      	ldr	r2, [pc, #48]	@ (800d2ec <pxPortInitialiseStack+0x64>)
 800d2ba:	68fb      	ldr	r3, [r7, #12]
 800d2bc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d2be:	68fb      	ldr	r3, [r7, #12]
 800d2c0:	3b14      	subs	r3, #20
 800d2c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d2c4:	687a      	ldr	r2, [r7, #4]
 800d2c6:	68fb      	ldr	r3, [r7, #12]
 800d2c8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d2ca:	68fb      	ldr	r3, [r7, #12]
 800d2cc:	3b04      	subs	r3, #4
 800d2ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d2d0:	68fb      	ldr	r3, [r7, #12]
 800d2d2:	f06f 0202 	mvn.w	r2, #2
 800d2d6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d2d8:	68fb      	ldr	r3, [r7, #12]
 800d2da:	3b20      	subs	r3, #32
 800d2dc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d2de:	68fb      	ldr	r3, [r7, #12]
}
 800d2e0:	4618      	mov	r0, r3
 800d2e2:	3714      	adds	r7, #20
 800d2e4:	46bd      	mov	sp, r7
 800d2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ea:	4770      	bx	lr
 800d2ec:	0800d2f1 	.word	0x0800d2f1

0800d2f0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d2f0:	b480      	push	{r7}
 800d2f2:	b085      	sub	sp, #20
 800d2f4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d2f6:	2300      	movs	r3, #0
 800d2f8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d2fa:	4b13      	ldr	r3, [pc, #76]	@ (800d348 <prvTaskExitError+0x58>)
 800d2fc:	681b      	ldr	r3, [r3, #0]
 800d2fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d302:	d00b      	beq.n	800d31c <prvTaskExitError+0x2c>
	__asm volatile
 800d304:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d308:	f383 8811 	msr	BASEPRI, r3
 800d30c:	f3bf 8f6f 	isb	sy
 800d310:	f3bf 8f4f 	dsb	sy
 800d314:	60fb      	str	r3, [r7, #12]
}
 800d316:	bf00      	nop
 800d318:	bf00      	nop
 800d31a:	e7fd      	b.n	800d318 <prvTaskExitError+0x28>
	__asm volatile
 800d31c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d320:	f383 8811 	msr	BASEPRI, r3
 800d324:	f3bf 8f6f 	isb	sy
 800d328:	f3bf 8f4f 	dsb	sy
 800d32c:	60bb      	str	r3, [r7, #8]
}
 800d32e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d330:	bf00      	nop
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	2b00      	cmp	r3, #0
 800d336:	d0fc      	beq.n	800d332 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d338:	bf00      	nop
 800d33a:	bf00      	nop
 800d33c:	3714      	adds	r7, #20
 800d33e:	46bd      	mov	sp, r7
 800d340:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d344:	4770      	bx	lr
 800d346:	bf00      	nop
 800d348:	20000030 	.word	0x20000030
 800d34c:	00000000 	.word	0x00000000

0800d350 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d350:	4b07      	ldr	r3, [pc, #28]	@ (800d370 <pxCurrentTCBConst2>)
 800d352:	6819      	ldr	r1, [r3, #0]
 800d354:	6808      	ldr	r0, [r1, #0]
 800d356:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d35a:	f380 8809 	msr	PSP, r0
 800d35e:	f3bf 8f6f 	isb	sy
 800d362:	f04f 0000 	mov.w	r0, #0
 800d366:	f380 8811 	msr	BASEPRI, r0
 800d36a:	4770      	bx	lr
 800d36c:	f3af 8000 	nop.w

0800d370 <pxCurrentTCBConst2>:
 800d370:	200011fc 	.word	0x200011fc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d374:	bf00      	nop
 800d376:	bf00      	nop

0800d378 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d378:	4808      	ldr	r0, [pc, #32]	@ (800d39c <prvPortStartFirstTask+0x24>)
 800d37a:	6800      	ldr	r0, [r0, #0]
 800d37c:	6800      	ldr	r0, [r0, #0]
 800d37e:	f380 8808 	msr	MSP, r0
 800d382:	f04f 0000 	mov.w	r0, #0
 800d386:	f380 8814 	msr	CONTROL, r0
 800d38a:	b662      	cpsie	i
 800d38c:	b661      	cpsie	f
 800d38e:	f3bf 8f4f 	dsb	sy
 800d392:	f3bf 8f6f 	isb	sy
 800d396:	df00      	svc	0
 800d398:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d39a:	bf00      	nop
 800d39c:	e000ed08 	.word	0xe000ed08

0800d3a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d3a0:	b580      	push	{r7, lr}
 800d3a2:	b086      	sub	sp, #24
 800d3a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800d3a6:	4b47      	ldr	r3, [pc, #284]	@ (800d4c4 <xPortStartScheduler+0x124>)
 800d3a8:	681b      	ldr	r3, [r3, #0]
 800d3aa:	4a47      	ldr	r2, [pc, #284]	@ (800d4c8 <xPortStartScheduler+0x128>)
 800d3ac:	4293      	cmp	r3, r2
 800d3ae:	d10b      	bne.n	800d3c8 <xPortStartScheduler+0x28>
	__asm volatile
 800d3b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d3b4:	f383 8811 	msr	BASEPRI, r3
 800d3b8:	f3bf 8f6f 	isb	sy
 800d3bc:	f3bf 8f4f 	dsb	sy
 800d3c0:	60fb      	str	r3, [r7, #12]
}
 800d3c2:	bf00      	nop
 800d3c4:	bf00      	nop
 800d3c6:	e7fd      	b.n	800d3c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800d3c8:	4b3e      	ldr	r3, [pc, #248]	@ (800d4c4 <xPortStartScheduler+0x124>)
 800d3ca:	681b      	ldr	r3, [r3, #0]
 800d3cc:	4a3f      	ldr	r2, [pc, #252]	@ (800d4cc <xPortStartScheduler+0x12c>)
 800d3ce:	4293      	cmp	r3, r2
 800d3d0:	d10b      	bne.n	800d3ea <xPortStartScheduler+0x4a>
	__asm volatile
 800d3d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d3d6:	f383 8811 	msr	BASEPRI, r3
 800d3da:	f3bf 8f6f 	isb	sy
 800d3de:	f3bf 8f4f 	dsb	sy
 800d3e2:	613b      	str	r3, [r7, #16]
}
 800d3e4:	bf00      	nop
 800d3e6:	bf00      	nop
 800d3e8:	e7fd      	b.n	800d3e6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d3ea:	4b39      	ldr	r3, [pc, #228]	@ (800d4d0 <xPortStartScheduler+0x130>)
 800d3ec:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d3ee:	697b      	ldr	r3, [r7, #20]
 800d3f0:	781b      	ldrb	r3, [r3, #0]
 800d3f2:	b2db      	uxtb	r3, r3
 800d3f4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d3f6:	697b      	ldr	r3, [r7, #20]
 800d3f8:	22ff      	movs	r2, #255	@ 0xff
 800d3fa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d3fc:	697b      	ldr	r3, [r7, #20]
 800d3fe:	781b      	ldrb	r3, [r3, #0]
 800d400:	b2db      	uxtb	r3, r3
 800d402:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d404:	78fb      	ldrb	r3, [r7, #3]
 800d406:	b2db      	uxtb	r3, r3
 800d408:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800d40c:	b2da      	uxtb	r2, r3
 800d40e:	4b31      	ldr	r3, [pc, #196]	@ (800d4d4 <xPortStartScheduler+0x134>)
 800d410:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d412:	4b31      	ldr	r3, [pc, #196]	@ (800d4d8 <xPortStartScheduler+0x138>)
 800d414:	2207      	movs	r2, #7
 800d416:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d418:	e009      	b.n	800d42e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800d41a:	4b2f      	ldr	r3, [pc, #188]	@ (800d4d8 <xPortStartScheduler+0x138>)
 800d41c:	681b      	ldr	r3, [r3, #0]
 800d41e:	3b01      	subs	r3, #1
 800d420:	4a2d      	ldr	r2, [pc, #180]	@ (800d4d8 <xPortStartScheduler+0x138>)
 800d422:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d424:	78fb      	ldrb	r3, [r7, #3]
 800d426:	b2db      	uxtb	r3, r3
 800d428:	005b      	lsls	r3, r3, #1
 800d42a:	b2db      	uxtb	r3, r3
 800d42c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d42e:	78fb      	ldrb	r3, [r7, #3]
 800d430:	b2db      	uxtb	r3, r3
 800d432:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d436:	2b80      	cmp	r3, #128	@ 0x80
 800d438:	d0ef      	beq.n	800d41a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d43a:	4b27      	ldr	r3, [pc, #156]	@ (800d4d8 <xPortStartScheduler+0x138>)
 800d43c:	681b      	ldr	r3, [r3, #0]
 800d43e:	f1c3 0307 	rsb	r3, r3, #7
 800d442:	2b04      	cmp	r3, #4
 800d444:	d00b      	beq.n	800d45e <xPortStartScheduler+0xbe>
	__asm volatile
 800d446:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d44a:	f383 8811 	msr	BASEPRI, r3
 800d44e:	f3bf 8f6f 	isb	sy
 800d452:	f3bf 8f4f 	dsb	sy
 800d456:	60bb      	str	r3, [r7, #8]
}
 800d458:	bf00      	nop
 800d45a:	bf00      	nop
 800d45c:	e7fd      	b.n	800d45a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d45e:	4b1e      	ldr	r3, [pc, #120]	@ (800d4d8 <xPortStartScheduler+0x138>)
 800d460:	681b      	ldr	r3, [r3, #0]
 800d462:	021b      	lsls	r3, r3, #8
 800d464:	4a1c      	ldr	r2, [pc, #112]	@ (800d4d8 <xPortStartScheduler+0x138>)
 800d466:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d468:	4b1b      	ldr	r3, [pc, #108]	@ (800d4d8 <xPortStartScheduler+0x138>)
 800d46a:	681b      	ldr	r3, [r3, #0]
 800d46c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800d470:	4a19      	ldr	r2, [pc, #100]	@ (800d4d8 <xPortStartScheduler+0x138>)
 800d472:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	b2da      	uxtb	r2, r3
 800d478:	697b      	ldr	r3, [r7, #20]
 800d47a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d47c:	4b17      	ldr	r3, [pc, #92]	@ (800d4dc <xPortStartScheduler+0x13c>)
 800d47e:	681b      	ldr	r3, [r3, #0]
 800d480:	4a16      	ldr	r2, [pc, #88]	@ (800d4dc <xPortStartScheduler+0x13c>)
 800d482:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800d486:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d488:	4b14      	ldr	r3, [pc, #80]	@ (800d4dc <xPortStartScheduler+0x13c>)
 800d48a:	681b      	ldr	r3, [r3, #0]
 800d48c:	4a13      	ldr	r2, [pc, #76]	@ (800d4dc <xPortStartScheduler+0x13c>)
 800d48e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800d492:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d494:	f000 f8da 	bl	800d64c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d498:	4b11      	ldr	r3, [pc, #68]	@ (800d4e0 <xPortStartScheduler+0x140>)
 800d49a:	2200      	movs	r2, #0
 800d49c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d49e:	f000 f8f9 	bl	800d694 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d4a2:	4b10      	ldr	r3, [pc, #64]	@ (800d4e4 <xPortStartScheduler+0x144>)
 800d4a4:	681b      	ldr	r3, [r3, #0]
 800d4a6:	4a0f      	ldr	r2, [pc, #60]	@ (800d4e4 <xPortStartScheduler+0x144>)
 800d4a8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800d4ac:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d4ae:	f7ff ff63 	bl	800d378 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d4b2:	f7fe ff2f 	bl	800c314 <vTaskSwitchContext>
	prvTaskExitError();
 800d4b6:	f7ff ff1b 	bl	800d2f0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d4ba:	2300      	movs	r3, #0
}
 800d4bc:	4618      	mov	r0, r3
 800d4be:	3718      	adds	r7, #24
 800d4c0:	46bd      	mov	sp, r7
 800d4c2:	bd80      	pop	{r7, pc}
 800d4c4:	e000ed00 	.word	0xe000ed00
 800d4c8:	410fc271 	.word	0x410fc271
 800d4cc:	410fc270 	.word	0x410fc270
 800d4d0:	e000e400 	.word	0xe000e400
 800d4d4:	20001828 	.word	0x20001828
 800d4d8:	2000182c 	.word	0x2000182c
 800d4dc:	e000ed20 	.word	0xe000ed20
 800d4e0:	20000030 	.word	0x20000030
 800d4e4:	e000ef34 	.word	0xe000ef34

0800d4e8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d4e8:	b480      	push	{r7}
 800d4ea:	b083      	sub	sp, #12
 800d4ec:	af00      	add	r7, sp, #0
	__asm volatile
 800d4ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d4f2:	f383 8811 	msr	BASEPRI, r3
 800d4f6:	f3bf 8f6f 	isb	sy
 800d4fa:	f3bf 8f4f 	dsb	sy
 800d4fe:	607b      	str	r3, [r7, #4]
}
 800d500:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d502:	4b10      	ldr	r3, [pc, #64]	@ (800d544 <vPortEnterCritical+0x5c>)
 800d504:	681b      	ldr	r3, [r3, #0]
 800d506:	3301      	adds	r3, #1
 800d508:	4a0e      	ldr	r2, [pc, #56]	@ (800d544 <vPortEnterCritical+0x5c>)
 800d50a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d50c:	4b0d      	ldr	r3, [pc, #52]	@ (800d544 <vPortEnterCritical+0x5c>)
 800d50e:	681b      	ldr	r3, [r3, #0]
 800d510:	2b01      	cmp	r3, #1
 800d512:	d110      	bne.n	800d536 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d514:	4b0c      	ldr	r3, [pc, #48]	@ (800d548 <vPortEnterCritical+0x60>)
 800d516:	681b      	ldr	r3, [r3, #0]
 800d518:	b2db      	uxtb	r3, r3
 800d51a:	2b00      	cmp	r3, #0
 800d51c:	d00b      	beq.n	800d536 <vPortEnterCritical+0x4e>
	__asm volatile
 800d51e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d522:	f383 8811 	msr	BASEPRI, r3
 800d526:	f3bf 8f6f 	isb	sy
 800d52a:	f3bf 8f4f 	dsb	sy
 800d52e:	603b      	str	r3, [r7, #0]
}
 800d530:	bf00      	nop
 800d532:	bf00      	nop
 800d534:	e7fd      	b.n	800d532 <vPortEnterCritical+0x4a>
	}
}
 800d536:	bf00      	nop
 800d538:	370c      	adds	r7, #12
 800d53a:	46bd      	mov	sp, r7
 800d53c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d540:	4770      	bx	lr
 800d542:	bf00      	nop
 800d544:	20000030 	.word	0x20000030
 800d548:	e000ed04 	.word	0xe000ed04

0800d54c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d54c:	b480      	push	{r7}
 800d54e:	b083      	sub	sp, #12
 800d550:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d552:	4b12      	ldr	r3, [pc, #72]	@ (800d59c <vPortExitCritical+0x50>)
 800d554:	681b      	ldr	r3, [r3, #0]
 800d556:	2b00      	cmp	r3, #0
 800d558:	d10b      	bne.n	800d572 <vPortExitCritical+0x26>
	__asm volatile
 800d55a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d55e:	f383 8811 	msr	BASEPRI, r3
 800d562:	f3bf 8f6f 	isb	sy
 800d566:	f3bf 8f4f 	dsb	sy
 800d56a:	607b      	str	r3, [r7, #4]
}
 800d56c:	bf00      	nop
 800d56e:	bf00      	nop
 800d570:	e7fd      	b.n	800d56e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800d572:	4b0a      	ldr	r3, [pc, #40]	@ (800d59c <vPortExitCritical+0x50>)
 800d574:	681b      	ldr	r3, [r3, #0]
 800d576:	3b01      	subs	r3, #1
 800d578:	4a08      	ldr	r2, [pc, #32]	@ (800d59c <vPortExitCritical+0x50>)
 800d57a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d57c:	4b07      	ldr	r3, [pc, #28]	@ (800d59c <vPortExitCritical+0x50>)
 800d57e:	681b      	ldr	r3, [r3, #0]
 800d580:	2b00      	cmp	r3, #0
 800d582:	d105      	bne.n	800d590 <vPortExitCritical+0x44>
 800d584:	2300      	movs	r3, #0
 800d586:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d588:	683b      	ldr	r3, [r7, #0]
 800d58a:	f383 8811 	msr	BASEPRI, r3
}
 800d58e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d590:	bf00      	nop
 800d592:	370c      	adds	r7, #12
 800d594:	46bd      	mov	sp, r7
 800d596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d59a:	4770      	bx	lr
 800d59c:	20000030 	.word	0x20000030

0800d5a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d5a0:	f3ef 8009 	mrs	r0, PSP
 800d5a4:	f3bf 8f6f 	isb	sy
 800d5a8:	4b15      	ldr	r3, [pc, #84]	@ (800d600 <pxCurrentTCBConst>)
 800d5aa:	681a      	ldr	r2, [r3, #0]
 800d5ac:	f01e 0f10 	tst.w	lr, #16
 800d5b0:	bf08      	it	eq
 800d5b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d5b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5ba:	6010      	str	r0, [r2, #0]
 800d5bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d5c0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800d5c4:	f380 8811 	msr	BASEPRI, r0
 800d5c8:	f3bf 8f4f 	dsb	sy
 800d5cc:	f3bf 8f6f 	isb	sy
 800d5d0:	f7fe fea0 	bl	800c314 <vTaskSwitchContext>
 800d5d4:	f04f 0000 	mov.w	r0, #0
 800d5d8:	f380 8811 	msr	BASEPRI, r0
 800d5dc:	bc09      	pop	{r0, r3}
 800d5de:	6819      	ldr	r1, [r3, #0]
 800d5e0:	6808      	ldr	r0, [r1, #0]
 800d5e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5e6:	f01e 0f10 	tst.w	lr, #16
 800d5ea:	bf08      	it	eq
 800d5ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d5f0:	f380 8809 	msr	PSP, r0
 800d5f4:	f3bf 8f6f 	isb	sy
 800d5f8:	4770      	bx	lr
 800d5fa:	bf00      	nop
 800d5fc:	f3af 8000 	nop.w

0800d600 <pxCurrentTCBConst>:
 800d600:	200011fc 	.word	0x200011fc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d604:	bf00      	nop
 800d606:	bf00      	nop

0800d608 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d608:	b580      	push	{r7, lr}
 800d60a:	b082      	sub	sp, #8
 800d60c:	af00      	add	r7, sp, #0
	__asm volatile
 800d60e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d612:	f383 8811 	msr	BASEPRI, r3
 800d616:	f3bf 8f6f 	isb	sy
 800d61a:	f3bf 8f4f 	dsb	sy
 800d61e:	607b      	str	r3, [r7, #4]
}
 800d620:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d622:	f7fe fdbd 	bl	800c1a0 <xTaskIncrementTick>
 800d626:	4603      	mov	r3, r0
 800d628:	2b00      	cmp	r3, #0
 800d62a:	d003      	beq.n	800d634 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d62c:	4b06      	ldr	r3, [pc, #24]	@ (800d648 <xPortSysTickHandler+0x40>)
 800d62e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d632:	601a      	str	r2, [r3, #0]
 800d634:	2300      	movs	r3, #0
 800d636:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d638:	683b      	ldr	r3, [r7, #0]
 800d63a:	f383 8811 	msr	BASEPRI, r3
}
 800d63e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d640:	bf00      	nop
 800d642:	3708      	adds	r7, #8
 800d644:	46bd      	mov	sp, r7
 800d646:	bd80      	pop	{r7, pc}
 800d648:	e000ed04 	.word	0xe000ed04

0800d64c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d64c:	b480      	push	{r7}
 800d64e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d650:	4b0b      	ldr	r3, [pc, #44]	@ (800d680 <vPortSetupTimerInterrupt+0x34>)
 800d652:	2200      	movs	r2, #0
 800d654:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d656:	4b0b      	ldr	r3, [pc, #44]	@ (800d684 <vPortSetupTimerInterrupt+0x38>)
 800d658:	2200      	movs	r2, #0
 800d65a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d65c:	4b0a      	ldr	r3, [pc, #40]	@ (800d688 <vPortSetupTimerInterrupt+0x3c>)
 800d65e:	681b      	ldr	r3, [r3, #0]
 800d660:	4a0a      	ldr	r2, [pc, #40]	@ (800d68c <vPortSetupTimerInterrupt+0x40>)
 800d662:	fba2 2303 	umull	r2, r3, r2, r3
 800d666:	099b      	lsrs	r3, r3, #6
 800d668:	4a09      	ldr	r2, [pc, #36]	@ (800d690 <vPortSetupTimerInterrupt+0x44>)
 800d66a:	3b01      	subs	r3, #1
 800d66c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d66e:	4b04      	ldr	r3, [pc, #16]	@ (800d680 <vPortSetupTimerInterrupt+0x34>)
 800d670:	2207      	movs	r2, #7
 800d672:	601a      	str	r2, [r3, #0]
}
 800d674:	bf00      	nop
 800d676:	46bd      	mov	sp, r7
 800d678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d67c:	4770      	bx	lr
 800d67e:	bf00      	nop
 800d680:	e000e010 	.word	0xe000e010
 800d684:	e000e018 	.word	0xe000e018
 800d688:	2000000c 	.word	0x2000000c
 800d68c:	10624dd3 	.word	0x10624dd3
 800d690:	e000e014 	.word	0xe000e014

0800d694 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d694:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800d6a4 <vPortEnableVFP+0x10>
 800d698:	6801      	ldr	r1, [r0, #0]
 800d69a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800d69e:	6001      	str	r1, [r0, #0]
 800d6a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d6a2:	bf00      	nop
 800d6a4:	e000ed88 	.word	0xe000ed88

0800d6a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d6a8:	b480      	push	{r7}
 800d6aa:	b085      	sub	sp, #20
 800d6ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d6ae:	f3ef 8305 	mrs	r3, IPSR
 800d6b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d6b4:	68fb      	ldr	r3, [r7, #12]
 800d6b6:	2b0f      	cmp	r3, #15
 800d6b8:	d915      	bls.n	800d6e6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d6ba:	4a18      	ldr	r2, [pc, #96]	@ (800d71c <vPortValidateInterruptPriority+0x74>)
 800d6bc:	68fb      	ldr	r3, [r7, #12]
 800d6be:	4413      	add	r3, r2
 800d6c0:	781b      	ldrb	r3, [r3, #0]
 800d6c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d6c4:	4b16      	ldr	r3, [pc, #88]	@ (800d720 <vPortValidateInterruptPriority+0x78>)
 800d6c6:	781b      	ldrb	r3, [r3, #0]
 800d6c8:	7afa      	ldrb	r2, [r7, #11]
 800d6ca:	429a      	cmp	r2, r3
 800d6cc:	d20b      	bcs.n	800d6e6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800d6ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d6d2:	f383 8811 	msr	BASEPRI, r3
 800d6d6:	f3bf 8f6f 	isb	sy
 800d6da:	f3bf 8f4f 	dsb	sy
 800d6de:	607b      	str	r3, [r7, #4]
}
 800d6e0:	bf00      	nop
 800d6e2:	bf00      	nop
 800d6e4:	e7fd      	b.n	800d6e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d6e6:	4b0f      	ldr	r3, [pc, #60]	@ (800d724 <vPortValidateInterruptPriority+0x7c>)
 800d6e8:	681b      	ldr	r3, [r3, #0]
 800d6ea:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800d6ee:	4b0e      	ldr	r3, [pc, #56]	@ (800d728 <vPortValidateInterruptPriority+0x80>)
 800d6f0:	681b      	ldr	r3, [r3, #0]
 800d6f2:	429a      	cmp	r2, r3
 800d6f4:	d90b      	bls.n	800d70e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800d6f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d6fa:	f383 8811 	msr	BASEPRI, r3
 800d6fe:	f3bf 8f6f 	isb	sy
 800d702:	f3bf 8f4f 	dsb	sy
 800d706:	603b      	str	r3, [r7, #0]
}
 800d708:	bf00      	nop
 800d70a:	bf00      	nop
 800d70c:	e7fd      	b.n	800d70a <vPortValidateInterruptPriority+0x62>
	}
 800d70e:	bf00      	nop
 800d710:	3714      	adds	r7, #20
 800d712:	46bd      	mov	sp, r7
 800d714:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d718:	4770      	bx	lr
 800d71a:	bf00      	nop
 800d71c:	e000e3f0 	.word	0xe000e3f0
 800d720:	20001828 	.word	0x20001828
 800d724:	e000ed0c 	.word	0xe000ed0c
 800d728:	2000182c 	.word	0x2000182c

0800d72c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d72c:	b580      	push	{r7, lr}
 800d72e:	b08a      	sub	sp, #40	@ 0x28
 800d730:	af00      	add	r7, sp, #0
 800d732:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d734:	2300      	movs	r3, #0
 800d736:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d738:	f7fe fc76 	bl	800c028 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d73c:	4b5c      	ldr	r3, [pc, #368]	@ (800d8b0 <pvPortMalloc+0x184>)
 800d73e:	681b      	ldr	r3, [r3, #0]
 800d740:	2b00      	cmp	r3, #0
 800d742:	d101      	bne.n	800d748 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d744:	f000 f924 	bl	800d990 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d748:	4b5a      	ldr	r3, [pc, #360]	@ (800d8b4 <pvPortMalloc+0x188>)
 800d74a:	681a      	ldr	r2, [r3, #0]
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	4013      	ands	r3, r2
 800d750:	2b00      	cmp	r3, #0
 800d752:	f040 8095 	bne.w	800d880 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	2b00      	cmp	r3, #0
 800d75a:	d01e      	beq.n	800d79a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800d75c:	2208      	movs	r2, #8
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	4413      	add	r3, r2
 800d762:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	f003 0307 	and.w	r3, r3, #7
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	d015      	beq.n	800d79a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	f023 0307 	bic.w	r3, r3, #7
 800d774:	3308      	adds	r3, #8
 800d776:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	f003 0307 	and.w	r3, r3, #7
 800d77e:	2b00      	cmp	r3, #0
 800d780:	d00b      	beq.n	800d79a <pvPortMalloc+0x6e>
	__asm volatile
 800d782:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d786:	f383 8811 	msr	BASEPRI, r3
 800d78a:	f3bf 8f6f 	isb	sy
 800d78e:	f3bf 8f4f 	dsb	sy
 800d792:	617b      	str	r3, [r7, #20]
}
 800d794:	bf00      	nop
 800d796:	bf00      	nop
 800d798:	e7fd      	b.n	800d796 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	d06f      	beq.n	800d880 <pvPortMalloc+0x154>
 800d7a0:	4b45      	ldr	r3, [pc, #276]	@ (800d8b8 <pvPortMalloc+0x18c>)
 800d7a2:	681b      	ldr	r3, [r3, #0]
 800d7a4:	687a      	ldr	r2, [r7, #4]
 800d7a6:	429a      	cmp	r2, r3
 800d7a8:	d86a      	bhi.n	800d880 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d7aa:	4b44      	ldr	r3, [pc, #272]	@ (800d8bc <pvPortMalloc+0x190>)
 800d7ac:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d7ae:	4b43      	ldr	r3, [pc, #268]	@ (800d8bc <pvPortMalloc+0x190>)
 800d7b0:	681b      	ldr	r3, [r3, #0]
 800d7b2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d7b4:	e004      	b.n	800d7c0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800d7b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7b8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d7ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7bc:	681b      	ldr	r3, [r3, #0]
 800d7be:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d7c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7c2:	685b      	ldr	r3, [r3, #4]
 800d7c4:	687a      	ldr	r2, [r7, #4]
 800d7c6:	429a      	cmp	r2, r3
 800d7c8:	d903      	bls.n	800d7d2 <pvPortMalloc+0xa6>
 800d7ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7cc:	681b      	ldr	r3, [r3, #0]
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	d1f1      	bne.n	800d7b6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d7d2:	4b37      	ldr	r3, [pc, #220]	@ (800d8b0 <pvPortMalloc+0x184>)
 800d7d4:	681b      	ldr	r3, [r3, #0]
 800d7d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d7d8:	429a      	cmp	r2, r3
 800d7da:	d051      	beq.n	800d880 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d7dc:	6a3b      	ldr	r3, [r7, #32]
 800d7de:	681b      	ldr	r3, [r3, #0]
 800d7e0:	2208      	movs	r2, #8
 800d7e2:	4413      	add	r3, r2
 800d7e4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d7e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7e8:	681a      	ldr	r2, [r3, #0]
 800d7ea:	6a3b      	ldr	r3, [r7, #32]
 800d7ec:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d7ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7f0:	685a      	ldr	r2, [r3, #4]
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	1ad2      	subs	r2, r2, r3
 800d7f6:	2308      	movs	r3, #8
 800d7f8:	005b      	lsls	r3, r3, #1
 800d7fa:	429a      	cmp	r2, r3
 800d7fc:	d920      	bls.n	800d840 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d7fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	4413      	add	r3, r2
 800d804:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d806:	69bb      	ldr	r3, [r7, #24]
 800d808:	f003 0307 	and.w	r3, r3, #7
 800d80c:	2b00      	cmp	r3, #0
 800d80e:	d00b      	beq.n	800d828 <pvPortMalloc+0xfc>
	__asm volatile
 800d810:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d814:	f383 8811 	msr	BASEPRI, r3
 800d818:	f3bf 8f6f 	isb	sy
 800d81c:	f3bf 8f4f 	dsb	sy
 800d820:	613b      	str	r3, [r7, #16]
}
 800d822:	bf00      	nop
 800d824:	bf00      	nop
 800d826:	e7fd      	b.n	800d824 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d828:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d82a:	685a      	ldr	r2, [r3, #4]
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	1ad2      	subs	r2, r2, r3
 800d830:	69bb      	ldr	r3, [r7, #24]
 800d832:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d836:	687a      	ldr	r2, [r7, #4]
 800d838:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d83a:	69b8      	ldr	r0, [r7, #24]
 800d83c:	f000 f90a 	bl	800da54 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d840:	4b1d      	ldr	r3, [pc, #116]	@ (800d8b8 <pvPortMalloc+0x18c>)
 800d842:	681a      	ldr	r2, [r3, #0]
 800d844:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d846:	685b      	ldr	r3, [r3, #4]
 800d848:	1ad3      	subs	r3, r2, r3
 800d84a:	4a1b      	ldr	r2, [pc, #108]	@ (800d8b8 <pvPortMalloc+0x18c>)
 800d84c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d84e:	4b1a      	ldr	r3, [pc, #104]	@ (800d8b8 <pvPortMalloc+0x18c>)
 800d850:	681a      	ldr	r2, [r3, #0]
 800d852:	4b1b      	ldr	r3, [pc, #108]	@ (800d8c0 <pvPortMalloc+0x194>)
 800d854:	681b      	ldr	r3, [r3, #0]
 800d856:	429a      	cmp	r2, r3
 800d858:	d203      	bcs.n	800d862 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d85a:	4b17      	ldr	r3, [pc, #92]	@ (800d8b8 <pvPortMalloc+0x18c>)
 800d85c:	681b      	ldr	r3, [r3, #0]
 800d85e:	4a18      	ldr	r2, [pc, #96]	@ (800d8c0 <pvPortMalloc+0x194>)
 800d860:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d864:	685a      	ldr	r2, [r3, #4]
 800d866:	4b13      	ldr	r3, [pc, #76]	@ (800d8b4 <pvPortMalloc+0x188>)
 800d868:	681b      	ldr	r3, [r3, #0]
 800d86a:	431a      	orrs	r2, r3
 800d86c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d86e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d870:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d872:	2200      	movs	r2, #0
 800d874:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800d876:	4b13      	ldr	r3, [pc, #76]	@ (800d8c4 <pvPortMalloc+0x198>)
 800d878:	681b      	ldr	r3, [r3, #0]
 800d87a:	3301      	adds	r3, #1
 800d87c:	4a11      	ldr	r2, [pc, #68]	@ (800d8c4 <pvPortMalloc+0x198>)
 800d87e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d880:	f7fe fbe0 	bl	800c044 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d884:	69fb      	ldr	r3, [r7, #28]
 800d886:	f003 0307 	and.w	r3, r3, #7
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	d00b      	beq.n	800d8a6 <pvPortMalloc+0x17a>
	__asm volatile
 800d88e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d892:	f383 8811 	msr	BASEPRI, r3
 800d896:	f3bf 8f6f 	isb	sy
 800d89a:	f3bf 8f4f 	dsb	sy
 800d89e:	60fb      	str	r3, [r7, #12]
}
 800d8a0:	bf00      	nop
 800d8a2:	bf00      	nop
 800d8a4:	e7fd      	b.n	800d8a2 <pvPortMalloc+0x176>
	return pvReturn;
 800d8a6:	69fb      	ldr	r3, [r7, #28]
}
 800d8a8:	4618      	mov	r0, r3
 800d8aa:	3728      	adds	r7, #40	@ 0x28
 800d8ac:	46bd      	mov	sp, r7
 800d8ae:	bd80      	pop	{r7, pc}
 800d8b0:	20003f48 	.word	0x20003f48
 800d8b4:	20003f5c 	.word	0x20003f5c
 800d8b8:	20003f4c 	.word	0x20003f4c
 800d8bc:	20003f40 	.word	0x20003f40
 800d8c0:	20003f50 	.word	0x20003f50
 800d8c4:	20003f54 	.word	0x20003f54

0800d8c8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d8c8:	b580      	push	{r7, lr}
 800d8ca:	b086      	sub	sp, #24
 800d8cc:	af00      	add	r7, sp, #0
 800d8ce:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	d04f      	beq.n	800d97a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d8da:	2308      	movs	r3, #8
 800d8dc:	425b      	negs	r3, r3
 800d8de:	697a      	ldr	r2, [r7, #20]
 800d8e0:	4413      	add	r3, r2
 800d8e2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d8e4:	697b      	ldr	r3, [r7, #20]
 800d8e6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d8e8:	693b      	ldr	r3, [r7, #16]
 800d8ea:	685a      	ldr	r2, [r3, #4]
 800d8ec:	4b25      	ldr	r3, [pc, #148]	@ (800d984 <vPortFree+0xbc>)
 800d8ee:	681b      	ldr	r3, [r3, #0]
 800d8f0:	4013      	ands	r3, r2
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	d10b      	bne.n	800d90e <vPortFree+0x46>
	__asm volatile
 800d8f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d8fa:	f383 8811 	msr	BASEPRI, r3
 800d8fe:	f3bf 8f6f 	isb	sy
 800d902:	f3bf 8f4f 	dsb	sy
 800d906:	60fb      	str	r3, [r7, #12]
}
 800d908:	bf00      	nop
 800d90a:	bf00      	nop
 800d90c:	e7fd      	b.n	800d90a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d90e:	693b      	ldr	r3, [r7, #16]
 800d910:	681b      	ldr	r3, [r3, #0]
 800d912:	2b00      	cmp	r3, #0
 800d914:	d00b      	beq.n	800d92e <vPortFree+0x66>
	__asm volatile
 800d916:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d91a:	f383 8811 	msr	BASEPRI, r3
 800d91e:	f3bf 8f6f 	isb	sy
 800d922:	f3bf 8f4f 	dsb	sy
 800d926:	60bb      	str	r3, [r7, #8]
}
 800d928:	bf00      	nop
 800d92a:	bf00      	nop
 800d92c:	e7fd      	b.n	800d92a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d92e:	693b      	ldr	r3, [r7, #16]
 800d930:	685a      	ldr	r2, [r3, #4]
 800d932:	4b14      	ldr	r3, [pc, #80]	@ (800d984 <vPortFree+0xbc>)
 800d934:	681b      	ldr	r3, [r3, #0]
 800d936:	4013      	ands	r3, r2
 800d938:	2b00      	cmp	r3, #0
 800d93a:	d01e      	beq.n	800d97a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d93c:	693b      	ldr	r3, [r7, #16]
 800d93e:	681b      	ldr	r3, [r3, #0]
 800d940:	2b00      	cmp	r3, #0
 800d942:	d11a      	bne.n	800d97a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d944:	693b      	ldr	r3, [r7, #16]
 800d946:	685a      	ldr	r2, [r3, #4]
 800d948:	4b0e      	ldr	r3, [pc, #56]	@ (800d984 <vPortFree+0xbc>)
 800d94a:	681b      	ldr	r3, [r3, #0]
 800d94c:	43db      	mvns	r3, r3
 800d94e:	401a      	ands	r2, r3
 800d950:	693b      	ldr	r3, [r7, #16]
 800d952:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d954:	f7fe fb68 	bl	800c028 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d958:	693b      	ldr	r3, [r7, #16]
 800d95a:	685a      	ldr	r2, [r3, #4]
 800d95c:	4b0a      	ldr	r3, [pc, #40]	@ (800d988 <vPortFree+0xc0>)
 800d95e:	681b      	ldr	r3, [r3, #0]
 800d960:	4413      	add	r3, r2
 800d962:	4a09      	ldr	r2, [pc, #36]	@ (800d988 <vPortFree+0xc0>)
 800d964:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d966:	6938      	ldr	r0, [r7, #16]
 800d968:	f000 f874 	bl	800da54 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800d96c:	4b07      	ldr	r3, [pc, #28]	@ (800d98c <vPortFree+0xc4>)
 800d96e:	681b      	ldr	r3, [r3, #0]
 800d970:	3301      	adds	r3, #1
 800d972:	4a06      	ldr	r2, [pc, #24]	@ (800d98c <vPortFree+0xc4>)
 800d974:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800d976:	f7fe fb65 	bl	800c044 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d97a:	bf00      	nop
 800d97c:	3718      	adds	r7, #24
 800d97e:	46bd      	mov	sp, r7
 800d980:	bd80      	pop	{r7, pc}
 800d982:	bf00      	nop
 800d984:	20003f5c 	.word	0x20003f5c
 800d988:	20003f4c 	.word	0x20003f4c
 800d98c:	20003f58 	.word	0x20003f58

0800d990 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d990:	b480      	push	{r7}
 800d992:	b085      	sub	sp, #20
 800d994:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d996:	f242 7310 	movw	r3, #10000	@ 0x2710
 800d99a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d99c:	4b27      	ldr	r3, [pc, #156]	@ (800da3c <prvHeapInit+0xac>)
 800d99e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d9a0:	68fb      	ldr	r3, [r7, #12]
 800d9a2:	f003 0307 	and.w	r3, r3, #7
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	d00c      	beq.n	800d9c4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d9aa:	68fb      	ldr	r3, [r7, #12]
 800d9ac:	3307      	adds	r3, #7
 800d9ae:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d9b0:	68fb      	ldr	r3, [r7, #12]
 800d9b2:	f023 0307 	bic.w	r3, r3, #7
 800d9b6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d9b8:	68ba      	ldr	r2, [r7, #8]
 800d9ba:	68fb      	ldr	r3, [r7, #12]
 800d9bc:	1ad3      	subs	r3, r2, r3
 800d9be:	4a1f      	ldr	r2, [pc, #124]	@ (800da3c <prvHeapInit+0xac>)
 800d9c0:	4413      	add	r3, r2
 800d9c2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d9c4:	68fb      	ldr	r3, [r7, #12]
 800d9c6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d9c8:	4a1d      	ldr	r2, [pc, #116]	@ (800da40 <prvHeapInit+0xb0>)
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d9ce:	4b1c      	ldr	r3, [pc, #112]	@ (800da40 <prvHeapInit+0xb0>)
 800d9d0:	2200      	movs	r2, #0
 800d9d2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	68ba      	ldr	r2, [r7, #8]
 800d9d8:	4413      	add	r3, r2
 800d9da:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d9dc:	2208      	movs	r2, #8
 800d9de:	68fb      	ldr	r3, [r7, #12]
 800d9e0:	1a9b      	subs	r3, r3, r2
 800d9e2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d9e4:	68fb      	ldr	r3, [r7, #12]
 800d9e6:	f023 0307 	bic.w	r3, r3, #7
 800d9ea:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d9ec:	68fb      	ldr	r3, [r7, #12]
 800d9ee:	4a15      	ldr	r2, [pc, #84]	@ (800da44 <prvHeapInit+0xb4>)
 800d9f0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d9f2:	4b14      	ldr	r3, [pc, #80]	@ (800da44 <prvHeapInit+0xb4>)
 800d9f4:	681b      	ldr	r3, [r3, #0]
 800d9f6:	2200      	movs	r2, #0
 800d9f8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d9fa:	4b12      	ldr	r3, [pc, #72]	@ (800da44 <prvHeapInit+0xb4>)
 800d9fc:	681b      	ldr	r3, [r3, #0]
 800d9fe:	2200      	movs	r2, #0
 800da00:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800da06:	683b      	ldr	r3, [r7, #0]
 800da08:	68fa      	ldr	r2, [r7, #12]
 800da0a:	1ad2      	subs	r2, r2, r3
 800da0c:	683b      	ldr	r3, [r7, #0]
 800da0e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800da10:	4b0c      	ldr	r3, [pc, #48]	@ (800da44 <prvHeapInit+0xb4>)
 800da12:	681a      	ldr	r2, [r3, #0]
 800da14:	683b      	ldr	r3, [r7, #0]
 800da16:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800da18:	683b      	ldr	r3, [r7, #0]
 800da1a:	685b      	ldr	r3, [r3, #4]
 800da1c:	4a0a      	ldr	r2, [pc, #40]	@ (800da48 <prvHeapInit+0xb8>)
 800da1e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800da20:	683b      	ldr	r3, [r7, #0]
 800da22:	685b      	ldr	r3, [r3, #4]
 800da24:	4a09      	ldr	r2, [pc, #36]	@ (800da4c <prvHeapInit+0xbc>)
 800da26:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800da28:	4b09      	ldr	r3, [pc, #36]	@ (800da50 <prvHeapInit+0xc0>)
 800da2a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800da2e:	601a      	str	r2, [r3, #0]
}
 800da30:	bf00      	nop
 800da32:	3714      	adds	r7, #20
 800da34:	46bd      	mov	sp, r7
 800da36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da3a:	4770      	bx	lr
 800da3c:	20001830 	.word	0x20001830
 800da40:	20003f40 	.word	0x20003f40
 800da44:	20003f48 	.word	0x20003f48
 800da48:	20003f50 	.word	0x20003f50
 800da4c:	20003f4c 	.word	0x20003f4c
 800da50:	20003f5c 	.word	0x20003f5c

0800da54 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800da54:	b480      	push	{r7}
 800da56:	b085      	sub	sp, #20
 800da58:	af00      	add	r7, sp, #0
 800da5a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800da5c:	4b28      	ldr	r3, [pc, #160]	@ (800db00 <prvInsertBlockIntoFreeList+0xac>)
 800da5e:	60fb      	str	r3, [r7, #12]
 800da60:	e002      	b.n	800da68 <prvInsertBlockIntoFreeList+0x14>
 800da62:	68fb      	ldr	r3, [r7, #12]
 800da64:	681b      	ldr	r3, [r3, #0]
 800da66:	60fb      	str	r3, [r7, #12]
 800da68:	68fb      	ldr	r3, [r7, #12]
 800da6a:	681b      	ldr	r3, [r3, #0]
 800da6c:	687a      	ldr	r2, [r7, #4]
 800da6e:	429a      	cmp	r2, r3
 800da70:	d8f7      	bhi.n	800da62 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800da72:	68fb      	ldr	r3, [r7, #12]
 800da74:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800da76:	68fb      	ldr	r3, [r7, #12]
 800da78:	685b      	ldr	r3, [r3, #4]
 800da7a:	68ba      	ldr	r2, [r7, #8]
 800da7c:	4413      	add	r3, r2
 800da7e:	687a      	ldr	r2, [r7, #4]
 800da80:	429a      	cmp	r2, r3
 800da82:	d108      	bne.n	800da96 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800da84:	68fb      	ldr	r3, [r7, #12]
 800da86:	685a      	ldr	r2, [r3, #4]
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	685b      	ldr	r3, [r3, #4]
 800da8c:	441a      	add	r2, r3
 800da8e:	68fb      	ldr	r3, [r7, #12]
 800da90:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800da92:	68fb      	ldr	r3, [r7, #12]
 800da94:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	685b      	ldr	r3, [r3, #4]
 800da9e:	68ba      	ldr	r2, [r7, #8]
 800daa0:	441a      	add	r2, r3
 800daa2:	68fb      	ldr	r3, [r7, #12]
 800daa4:	681b      	ldr	r3, [r3, #0]
 800daa6:	429a      	cmp	r2, r3
 800daa8:	d118      	bne.n	800dadc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800daaa:	68fb      	ldr	r3, [r7, #12]
 800daac:	681a      	ldr	r2, [r3, #0]
 800daae:	4b15      	ldr	r3, [pc, #84]	@ (800db04 <prvInsertBlockIntoFreeList+0xb0>)
 800dab0:	681b      	ldr	r3, [r3, #0]
 800dab2:	429a      	cmp	r2, r3
 800dab4:	d00d      	beq.n	800dad2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	685a      	ldr	r2, [r3, #4]
 800daba:	68fb      	ldr	r3, [r7, #12]
 800dabc:	681b      	ldr	r3, [r3, #0]
 800dabe:	685b      	ldr	r3, [r3, #4]
 800dac0:	441a      	add	r2, r3
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800dac6:	68fb      	ldr	r3, [r7, #12]
 800dac8:	681b      	ldr	r3, [r3, #0]
 800daca:	681a      	ldr	r2, [r3, #0]
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	601a      	str	r2, [r3, #0]
 800dad0:	e008      	b.n	800dae4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800dad2:	4b0c      	ldr	r3, [pc, #48]	@ (800db04 <prvInsertBlockIntoFreeList+0xb0>)
 800dad4:	681a      	ldr	r2, [r3, #0]
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	601a      	str	r2, [r3, #0]
 800dada:	e003      	b.n	800dae4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800dadc:	68fb      	ldr	r3, [r7, #12]
 800dade:	681a      	ldr	r2, [r3, #0]
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800dae4:	68fa      	ldr	r2, [r7, #12]
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	429a      	cmp	r2, r3
 800daea:	d002      	beq.n	800daf2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800daec:	68fb      	ldr	r3, [r7, #12]
 800daee:	687a      	ldr	r2, [r7, #4]
 800daf0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800daf2:	bf00      	nop
 800daf4:	3714      	adds	r7, #20
 800daf6:	46bd      	mov	sp, r7
 800daf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dafc:	4770      	bx	lr
 800dafe:	bf00      	nop
 800db00:	20003f40 	.word	0x20003f40
 800db04:	20003f48 	.word	0x20003f48

0800db08 <atof>:
 800db08:	2100      	movs	r1, #0
 800db0a:	f000 be09 	b.w	800e720 <strtod>

0800db0e <atoi>:
 800db0e:	220a      	movs	r2, #10
 800db10:	2100      	movs	r1, #0
 800db12:	f000 be8b 	b.w	800e82c <strtol>

0800db16 <sulp>:
 800db16:	b570      	push	{r4, r5, r6, lr}
 800db18:	4604      	mov	r4, r0
 800db1a:	460d      	mov	r5, r1
 800db1c:	ec45 4b10 	vmov	d0, r4, r5
 800db20:	4616      	mov	r6, r2
 800db22:	f002 f895 	bl	800fc50 <__ulp>
 800db26:	ec51 0b10 	vmov	r0, r1, d0
 800db2a:	b17e      	cbz	r6, 800db4c <sulp+0x36>
 800db2c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800db30:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800db34:	2b00      	cmp	r3, #0
 800db36:	dd09      	ble.n	800db4c <sulp+0x36>
 800db38:	051b      	lsls	r3, r3, #20
 800db3a:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800db3e:	2400      	movs	r4, #0
 800db40:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800db44:	4622      	mov	r2, r4
 800db46:	462b      	mov	r3, r5
 800db48:	f7f2 fd66 	bl	8000618 <__aeabi_dmul>
 800db4c:	ec41 0b10 	vmov	d0, r0, r1
 800db50:	bd70      	pop	{r4, r5, r6, pc}
 800db52:	0000      	movs	r0, r0
 800db54:	0000      	movs	r0, r0
	...

0800db58 <_strtod_l>:
 800db58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db5c:	b09f      	sub	sp, #124	@ 0x7c
 800db5e:	460c      	mov	r4, r1
 800db60:	9217      	str	r2, [sp, #92]	@ 0x5c
 800db62:	2200      	movs	r2, #0
 800db64:	921a      	str	r2, [sp, #104]	@ 0x68
 800db66:	9005      	str	r0, [sp, #20]
 800db68:	f04f 0a00 	mov.w	sl, #0
 800db6c:	f04f 0b00 	mov.w	fp, #0
 800db70:	460a      	mov	r2, r1
 800db72:	9219      	str	r2, [sp, #100]	@ 0x64
 800db74:	7811      	ldrb	r1, [r2, #0]
 800db76:	292b      	cmp	r1, #43	@ 0x2b
 800db78:	d04a      	beq.n	800dc10 <_strtod_l+0xb8>
 800db7a:	d838      	bhi.n	800dbee <_strtod_l+0x96>
 800db7c:	290d      	cmp	r1, #13
 800db7e:	d832      	bhi.n	800dbe6 <_strtod_l+0x8e>
 800db80:	2908      	cmp	r1, #8
 800db82:	d832      	bhi.n	800dbea <_strtod_l+0x92>
 800db84:	2900      	cmp	r1, #0
 800db86:	d03b      	beq.n	800dc00 <_strtod_l+0xa8>
 800db88:	2200      	movs	r2, #0
 800db8a:	920e      	str	r2, [sp, #56]	@ 0x38
 800db8c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800db8e:	782a      	ldrb	r2, [r5, #0]
 800db90:	2a30      	cmp	r2, #48	@ 0x30
 800db92:	f040 80b2 	bne.w	800dcfa <_strtod_l+0x1a2>
 800db96:	786a      	ldrb	r2, [r5, #1]
 800db98:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800db9c:	2a58      	cmp	r2, #88	@ 0x58
 800db9e:	d16e      	bne.n	800dc7e <_strtod_l+0x126>
 800dba0:	9302      	str	r3, [sp, #8]
 800dba2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800dba4:	9301      	str	r3, [sp, #4]
 800dba6:	ab1a      	add	r3, sp, #104	@ 0x68
 800dba8:	9300      	str	r3, [sp, #0]
 800dbaa:	4a8f      	ldr	r2, [pc, #572]	@ (800dde8 <_strtod_l+0x290>)
 800dbac:	9805      	ldr	r0, [sp, #20]
 800dbae:	ab1b      	add	r3, sp, #108	@ 0x6c
 800dbb0:	a919      	add	r1, sp, #100	@ 0x64
 800dbb2:	f001 f94f 	bl	800ee54 <__gethex>
 800dbb6:	f010 060f 	ands.w	r6, r0, #15
 800dbba:	4604      	mov	r4, r0
 800dbbc:	d005      	beq.n	800dbca <_strtod_l+0x72>
 800dbbe:	2e06      	cmp	r6, #6
 800dbc0:	d128      	bne.n	800dc14 <_strtod_l+0xbc>
 800dbc2:	3501      	adds	r5, #1
 800dbc4:	2300      	movs	r3, #0
 800dbc6:	9519      	str	r5, [sp, #100]	@ 0x64
 800dbc8:	930e      	str	r3, [sp, #56]	@ 0x38
 800dbca:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800dbcc:	2b00      	cmp	r3, #0
 800dbce:	f040 858e 	bne.w	800e6ee <_strtod_l+0xb96>
 800dbd2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800dbd4:	b1cb      	cbz	r3, 800dc0a <_strtod_l+0xb2>
 800dbd6:	4652      	mov	r2, sl
 800dbd8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800dbdc:	ec43 2b10 	vmov	d0, r2, r3
 800dbe0:	b01f      	add	sp, #124	@ 0x7c
 800dbe2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dbe6:	2920      	cmp	r1, #32
 800dbe8:	d1ce      	bne.n	800db88 <_strtod_l+0x30>
 800dbea:	3201      	adds	r2, #1
 800dbec:	e7c1      	b.n	800db72 <_strtod_l+0x1a>
 800dbee:	292d      	cmp	r1, #45	@ 0x2d
 800dbf0:	d1ca      	bne.n	800db88 <_strtod_l+0x30>
 800dbf2:	2101      	movs	r1, #1
 800dbf4:	910e      	str	r1, [sp, #56]	@ 0x38
 800dbf6:	1c51      	adds	r1, r2, #1
 800dbf8:	9119      	str	r1, [sp, #100]	@ 0x64
 800dbfa:	7852      	ldrb	r2, [r2, #1]
 800dbfc:	2a00      	cmp	r2, #0
 800dbfe:	d1c5      	bne.n	800db8c <_strtod_l+0x34>
 800dc00:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800dc02:	9419      	str	r4, [sp, #100]	@ 0x64
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	f040 8570 	bne.w	800e6ea <_strtod_l+0xb92>
 800dc0a:	4652      	mov	r2, sl
 800dc0c:	465b      	mov	r3, fp
 800dc0e:	e7e5      	b.n	800dbdc <_strtod_l+0x84>
 800dc10:	2100      	movs	r1, #0
 800dc12:	e7ef      	b.n	800dbf4 <_strtod_l+0x9c>
 800dc14:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800dc16:	b13a      	cbz	r2, 800dc28 <_strtod_l+0xd0>
 800dc18:	2135      	movs	r1, #53	@ 0x35
 800dc1a:	a81c      	add	r0, sp, #112	@ 0x70
 800dc1c:	f002 f912 	bl	800fe44 <__copybits>
 800dc20:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800dc22:	9805      	ldr	r0, [sp, #20]
 800dc24:	f001 fce8 	bl	800f5f8 <_Bfree>
 800dc28:	3e01      	subs	r6, #1
 800dc2a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800dc2c:	2e04      	cmp	r6, #4
 800dc2e:	d806      	bhi.n	800dc3e <_strtod_l+0xe6>
 800dc30:	e8df f006 	tbb	[pc, r6]
 800dc34:	201d0314 	.word	0x201d0314
 800dc38:	14          	.byte	0x14
 800dc39:	00          	.byte	0x00
 800dc3a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800dc3e:	05e1      	lsls	r1, r4, #23
 800dc40:	bf48      	it	mi
 800dc42:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800dc46:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800dc4a:	0d1b      	lsrs	r3, r3, #20
 800dc4c:	051b      	lsls	r3, r3, #20
 800dc4e:	2b00      	cmp	r3, #0
 800dc50:	d1bb      	bne.n	800dbca <_strtod_l+0x72>
 800dc52:	f001 f809 	bl	800ec68 <__errno>
 800dc56:	2322      	movs	r3, #34	@ 0x22
 800dc58:	6003      	str	r3, [r0, #0]
 800dc5a:	e7b6      	b.n	800dbca <_strtod_l+0x72>
 800dc5c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800dc60:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800dc64:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800dc68:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800dc6c:	e7e7      	b.n	800dc3e <_strtod_l+0xe6>
 800dc6e:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800ddf0 <_strtod_l+0x298>
 800dc72:	e7e4      	b.n	800dc3e <_strtod_l+0xe6>
 800dc74:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800dc78:	f04f 3aff 	mov.w	sl, #4294967295
 800dc7c:	e7df      	b.n	800dc3e <_strtod_l+0xe6>
 800dc7e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800dc80:	1c5a      	adds	r2, r3, #1
 800dc82:	9219      	str	r2, [sp, #100]	@ 0x64
 800dc84:	785b      	ldrb	r3, [r3, #1]
 800dc86:	2b30      	cmp	r3, #48	@ 0x30
 800dc88:	d0f9      	beq.n	800dc7e <_strtod_l+0x126>
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	d09d      	beq.n	800dbca <_strtod_l+0x72>
 800dc8e:	2301      	movs	r3, #1
 800dc90:	2700      	movs	r7, #0
 800dc92:	9308      	str	r3, [sp, #32]
 800dc94:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800dc96:	930c      	str	r3, [sp, #48]	@ 0x30
 800dc98:	970b      	str	r7, [sp, #44]	@ 0x2c
 800dc9a:	46b9      	mov	r9, r7
 800dc9c:	220a      	movs	r2, #10
 800dc9e:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800dca0:	7805      	ldrb	r5, [r0, #0]
 800dca2:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800dca6:	b2d9      	uxtb	r1, r3
 800dca8:	2909      	cmp	r1, #9
 800dcaa:	d928      	bls.n	800dcfe <_strtod_l+0x1a6>
 800dcac:	494f      	ldr	r1, [pc, #316]	@ (800ddec <_strtod_l+0x294>)
 800dcae:	2201      	movs	r2, #1
 800dcb0:	f000 ff10 	bl	800ead4 <strncmp>
 800dcb4:	2800      	cmp	r0, #0
 800dcb6:	d032      	beq.n	800dd1e <_strtod_l+0x1c6>
 800dcb8:	2000      	movs	r0, #0
 800dcba:	462a      	mov	r2, r5
 800dcbc:	900a      	str	r0, [sp, #40]	@ 0x28
 800dcbe:	464d      	mov	r5, r9
 800dcc0:	4603      	mov	r3, r0
 800dcc2:	2a65      	cmp	r2, #101	@ 0x65
 800dcc4:	d001      	beq.n	800dcca <_strtod_l+0x172>
 800dcc6:	2a45      	cmp	r2, #69	@ 0x45
 800dcc8:	d114      	bne.n	800dcf4 <_strtod_l+0x19c>
 800dcca:	b91d      	cbnz	r5, 800dcd4 <_strtod_l+0x17c>
 800dccc:	9a08      	ldr	r2, [sp, #32]
 800dcce:	4302      	orrs	r2, r0
 800dcd0:	d096      	beq.n	800dc00 <_strtod_l+0xa8>
 800dcd2:	2500      	movs	r5, #0
 800dcd4:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800dcd6:	1c62      	adds	r2, r4, #1
 800dcd8:	9219      	str	r2, [sp, #100]	@ 0x64
 800dcda:	7862      	ldrb	r2, [r4, #1]
 800dcdc:	2a2b      	cmp	r2, #43	@ 0x2b
 800dcde:	d07a      	beq.n	800ddd6 <_strtod_l+0x27e>
 800dce0:	2a2d      	cmp	r2, #45	@ 0x2d
 800dce2:	d07e      	beq.n	800dde2 <_strtod_l+0x28a>
 800dce4:	f04f 0c00 	mov.w	ip, #0
 800dce8:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800dcec:	2909      	cmp	r1, #9
 800dcee:	f240 8085 	bls.w	800ddfc <_strtod_l+0x2a4>
 800dcf2:	9419      	str	r4, [sp, #100]	@ 0x64
 800dcf4:	f04f 0800 	mov.w	r8, #0
 800dcf8:	e0a5      	b.n	800de46 <_strtod_l+0x2ee>
 800dcfa:	2300      	movs	r3, #0
 800dcfc:	e7c8      	b.n	800dc90 <_strtod_l+0x138>
 800dcfe:	f1b9 0f08 	cmp.w	r9, #8
 800dd02:	bfd8      	it	le
 800dd04:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800dd06:	f100 0001 	add.w	r0, r0, #1
 800dd0a:	bfda      	itte	le
 800dd0c:	fb02 3301 	mlale	r3, r2, r1, r3
 800dd10:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800dd12:	fb02 3707 	mlagt	r7, r2, r7, r3
 800dd16:	f109 0901 	add.w	r9, r9, #1
 800dd1a:	9019      	str	r0, [sp, #100]	@ 0x64
 800dd1c:	e7bf      	b.n	800dc9e <_strtod_l+0x146>
 800dd1e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800dd20:	1c5a      	adds	r2, r3, #1
 800dd22:	9219      	str	r2, [sp, #100]	@ 0x64
 800dd24:	785a      	ldrb	r2, [r3, #1]
 800dd26:	f1b9 0f00 	cmp.w	r9, #0
 800dd2a:	d03b      	beq.n	800dda4 <_strtod_l+0x24c>
 800dd2c:	900a      	str	r0, [sp, #40]	@ 0x28
 800dd2e:	464d      	mov	r5, r9
 800dd30:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800dd34:	2b09      	cmp	r3, #9
 800dd36:	d912      	bls.n	800dd5e <_strtod_l+0x206>
 800dd38:	2301      	movs	r3, #1
 800dd3a:	e7c2      	b.n	800dcc2 <_strtod_l+0x16a>
 800dd3c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800dd3e:	1c5a      	adds	r2, r3, #1
 800dd40:	9219      	str	r2, [sp, #100]	@ 0x64
 800dd42:	785a      	ldrb	r2, [r3, #1]
 800dd44:	3001      	adds	r0, #1
 800dd46:	2a30      	cmp	r2, #48	@ 0x30
 800dd48:	d0f8      	beq.n	800dd3c <_strtod_l+0x1e4>
 800dd4a:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800dd4e:	2b08      	cmp	r3, #8
 800dd50:	f200 84d2 	bhi.w	800e6f8 <_strtod_l+0xba0>
 800dd54:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800dd56:	900a      	str	r0, [sp, #40]	@ 0x28
 800dd58:	2000      	movs	r0, #0
 800dd5a:	930c      	str	r3, [sp, #48]	@ 0x30
 800dd5c:	4605      	mov	r5, r0
 800dd5e:	3a30      	subs	r2, #48	@ 0x30
 800dd60:	f100 0301 	add.w	r3, r0, #1
 800dd64:	d018      	beq.n	800dd98 <_strtod_l+0x240>
 800dd66:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800dd68:	4419      	add	r1, r3
 800dd6a:	910a      	str	r1, [sp, #40]	@ 0x28
 800dd6c:	462e      	mov	r6, r5
 800dd6e:	f04f 0e0a 	mov.w	lr, #10
 800dd72:	1c71      	adds	r1, r6, #1
 800dd74:	eba1 0c05 	sub.w	ip, r1, r5
 800dd78:	4563      	cmp	r3, ip
 800dd7a:	dc15      	bgt.n	800dda8 <_strtod_l+0x250>
 800dd7c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800dd80:	182b      	adds	r3, r5, r0
 800dd82:	2b08      	cmp	r3, #8
 800dd84:	f105 0501 	add.w	r5, r5, #1
 800dd88:	4405      	add	r5, r0
 800dd8a:	dc1a      	bgt.n	800ddc2 <_strtod_l+0x26a>
 800dd8c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800dd8e:	230a      	movs	r3, #10
 800dd90:	fb03 2301 	mla	r3, r3, r1, r2
 800dd94:	930b      	str	r3, [sp, #44]	@ 0x2c
 800dd96:	2300      	movs	r3, #0
 800dd98:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800dd9a:	1c51      	adds	r1, r2, #1
 800dd9c:	9119      	str	r1, [sp, #100]	@ 0x64
 800dd9e:	7852      	ldrb	r2, [r2, #1]
 800dda0:	4618      	mov	r0, r3
 800dda2:	e7c5      	b.n	800dd30 <_strtod_l+0x1d8>
 800dda4:	4648      	mov	r0, r9
 800dda6:	e7ce      	b.n	800dd46 <_strtod_l+0x1ee>
 800dda8:	2e08      	cmp	r6, #8
 800ddaa:	dc05      	bgt.n	800ddb8 <_strtod_l+0x260>
 800ddac:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800ddae:	fb0e f606 	mul.w	r6, lr, r6
 800ddb2:	960b      	str	r6, [sp, #44]	@ 0x2c
 800ddb4:	460e      	mov	r6, r1
 800ddb6:	e7dc      	b.n	800dd72 <_strtod_l+0x21a>
 800ddb8:	2910      	cmp	r1, #16
 800ddba:	bfd8      	it	le
 800ddbc:	fb0e f707 	mulle.w	r7, lr, r7
 800ddc0:	e7f8      	b.n	800ddb4 <_strtod_l+0x25c>
 800ddc2:	2b0f      	cmp	r3, #15
 800ddc4:	bfdc      	itt	le
 800ddc6:	230a      	movle	r3, #10
 800ddc8:	fb03 2707 	mlale	r7, r3, r7, r2
 800ddcc:	e7e3      	b.n	800dd96 <_strtod_l+0x23e>
 800ddce:	2300      	movs	r3, #0
 800ddd0:	930a      	str	r3, [sp, #40]	@ 0x28
 800ddd2:	2301      	movs	r3, #1
 800ddd4:	e77a      	b.n	800dccc <_strtod_l+0x174>
 800ddd6:	f04f 0c00 	mov.w	ip, #0
 800ddda:	1ca2      	adds	r2, r4, #2
 800dddc:	9219      	str	r2, [sp, #100]	@ 0x64
 800ddde:	78a2      	ldrb	r2, [r4, #2]
 800dde0:	e782      	b.n	800dce8 <_strtod_l+0x190>
 800dde2:	f04f 0c01 	mov.w	ip, #1
 800dde6:	e7f8      	b.n	800ddda <_strtod_l+0x282>
 800dde8:	08011260 	.word	0x08011260
 800ddec:	080110e4 	.word	0x080110e4
 800ddf0:	7ff00000 	.word	0x7ff00000
 800ddf4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ddf6:	1c51      	adds	r1, r2, #1
 800ddf8:	9119      	str	r1, [sp, #100]	@ 0x64
 800ddfa:	7852      	ldrb	r2, [r2, #1]
 800ddfc:	2a30      	cmp	r2, #48	@ 0x30
 800ddfe:	d0f9      	beq.n	800ddf4 <_strtod_l+0x29c>
 800de00:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800de04:	2908      	cmp	r1, #8
 800de06:	f63f af75 	bhi.w	800dcf4 <_strtod_l+0x19c>
 800de0a:	3a30      	subs	r2, #48	@ 0x30
 800de0c:	9209      	str	r2, [sp, #36]	@ 0x24
 800de0e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800de10:	920f      	str	r2, [sp, #60]	@ 0x3c
 800de12:	f04f 080a 	mov.w	r8, #10
 800de16:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800de18:	1c56      	adds	r6, r2, #1
 800de1a:	9619      	str	r6, [sp, #100]	@ 0x64
 800de1c:	7852      	ldrb	r2, [r2, #1]
 800de1e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800de22:	f1be 0f09 	cmp.w	lr, #9
 800de26:	d939      	bls.n	800de9c <_strtod_l+0x344>
 800de28:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800de2a:	1a76      	subs	r6, r6, r1
 800de2c:	2e08      	cmp	r6, #8
 800de2e:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800de32:	dc03      	bgt.n	800de3c <_strtod_l+0x2e4>
 800de34:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800de36:	4588      	cmp	r8, r1
 800de38:	bfa8      	it	ge
 800de3a:	4688      	movge	r8, r1
 800de3c:	f1bc 0f00 	cmp.w	ip, #0
 800de40:	d001      	beq.n	800de46 <_strtod_l+0x2ee>
 800de42:	f1c8 0800 	rsb	r8, r8, #0
 800de46:	2d00      	cmp	r5, #0
 800de48:	d14e      	bne.n	800dee8 <_strtod_l+0x390>
 800de4a:	9908      	ldr	r1, [sp, #32]
 800de4c:	4308      	orrs	r0, r1
 800de4e:	f47f aebc 	bne.w	800dbca <_strtod_l+0x72>
 800de52:	2b00      	cmp	r3, #0
 800de54:	f47f aed4 	bne.w	800dc00 <_strtod_l+0xa8>
 800de58:	2a69      	cmp	r2, #105	@ 0x69
 800de5a:	d028      	beq.n	800deae <_strtod_l+0x356>
 800de5c:	dc25      	bgt.n	800deaa <_strtod_l+0x352>
 800de5e:	2a49      	cmp	r2, #73	@ 0x49
 800de60:	d025      	beq.n	800deae <_strtod_l+0x356>
 800de62:	2a4e      	cmp	r2, #78	@ 0x4e
 800de64:	f47f aecc 	bne.w	800dc00 <_strtod_l+0xa8>
 800de68:	499a      	ldr	r1, [pc, #616]	@ (800e0d4 <_strtod_l+0x57c>)
 800de6a:	a819      	add	r0, sp, #100	@ 0x64
 800de6c:	f001 fa14 	bl	800f298 <__match>
 800de70:	2800      	cmp	r0, #0
 800de72:	f43f aec5 	beq.w	800dc00 <_strtod_l+0xa8>
 800de76:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800de78:	781b      	ldrb	r3, [r3, #0]
 800de7a:	2b28      	cmp	r3, #40	@ 0x28
 800de7c:	d12e      	bne.n	800dedc <_strtod_l+0x384>
 800de7e:	4996      	ldr	r1, [pc, #600]	@ (800e0d8 <_strtod_l+0x580>)
 800de80:	aa1c      	add	r2, sp, #112	@ 0x70
 800de82:	a819      	add	r0, sp, #100	@ 0x64
 800de84:	f001 fa1c 	bl	800f2c0 <__hexnan>
 800de88:	2805      	cmp	r0, #5
 800de8a:	d127      	bne.n	800dedc <_strtod_l+0x384>
 800de8c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800de8e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800de92:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800de96:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800de9a:	e696      	b.n	800dbca <_strtod_l+0x72>
 800de9c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800de9e:	fb08 2101 	mla	r1, r8, r1, r2
 800dea2:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800dea6:	9209      	str	r2, [sp, #36]	@ 0x24
 800dea8:	e7b5      	b.n	800de16 <_strtod_l+0x2be>
 800deaa:	2a6e      	cmp	r2, #110	@ 0x6e
 800deac:	e7da      	b.n	800de64 <_strtod_l+0x30c>
 800deae:	498b      	ldr	r1, [pc, #556]	@ (800e0dc <_strtod_l+0x584>)
 800deb0:	a819      	add	r0, sp, #100	@ 0x64
 800deb2:	f001 f9f1 	bl	800f298 <__match>
 800deb6:	2800      	cmp	r0, #0
 800deb8:	f43f aea2 	beq.w	800dc00 <_strtod_l+0xa8>
 800debc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800debe:	4988      	ldr	r1, [pc, #544]	@ (800e0e0 <_strtod_l+0x588>)
 800dec0:	3b01      	subs	r3, #1
 800dec2:	a819      	add	r0, sp, #100	@ 0x64
 800dec4:	9319      	str	r3, [sp, #100]	@ 0x64
 800dec6:	f001 f9e7 	bl	800f298 <__match>
 800deca:	b910      	cbnz	r0, 800ded2 <_strtod_l+0x37a>
 800decc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800dece:	3301      	adds	r3, #1
 800ded0:	9319      	str	r3, [sp, #100]	@ 0x64
 800ded2:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 800e0f0 <_strtod_l+0x598>
 800ded6:	f04f 0a00 	mov.w	sl, #0
 800deda:	e676      	b.n	800dbca <_strtod_l+0x72>
 800dedc:	4881      	ldr	r0, [pc, #516]	@ (800e0e4 <_strtod_l+0x58c>)
 800dede:	f000 feff 	bl	800ece0 <nan>
 800dee2:	ec5b ab10 	vmov	sl, fp, d0
 800dee6:	e670      	b.n	800dbca <_strtod_l+0x72>
 800dee8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800deea:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800deec:	eba8 0303 	sub.w	r3, r8, r3
 800def0:	f1b9 0f00 	cmp.w	r9, #0
 800def4:	bf08      	it	eq
 800def6:	46a9      	moveq	r9, r5
 800def8:	2d10      	cmp	r5, #16
 800defa:	9309      	str	r3, [sp, #36]	@ 0x24
 800defc:	462c      	mov	r4, r5
 800defe:	bfa8      	it	ge
 800df00:	2410      	movge	r4, #16
 800df02:	f7f2 fb0f 	bl	8000524 <__aeabi_ui2d>
 800df06:	2d09      	cmp	r5, #9
 800df08:	4682      	mov	sl, r0
 800df0a:	468b      	mov	fp, r1
 800df0c:	dc13      	bgt.n	800df36 <_strtod_l+0x3de>
 800df0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800df10:	2b00      	cmp	r3, #0
 800df12:	f43f ae5a 	beq.w	800dbca <_strtod_l+0x72>
 800df16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800df18:	dd78      	ble.n	800e00c <_strtod_l+0x4b4>
 800df1a:	2b16      	cmp	r3, #22
 800df1c:	dc5f      	bgt.n	800dfde <_strtod_l+0x486>
 800df1e:	4972      	ldr	r1, [pc, #456]	@ (800e0e8 <_strtod_l+0x590>)
 800df20:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800df24:	e9d1 0100 	ldrd	r0, r1, [r1]
 800df28:	4652      	mov	r2, sl
 800df2a:	465b      	mov	r3, fp
 800df2c:	f7f2 fb74 	bl	8000618 <__aeabi_dmul>
 800df30:	4682      	mov	sl, r0
 800df32:	468b      	mov	fp, r1
 800df34:	e649      	b.n	800dbca <_strtod_l+0x72>
 800df36:	4b6c      	ldr	r3, [pc, #432]	@ (800e0e8 <_strtod_l+0x590>)
 800df38:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800df3c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800df40:	f7f2 fb6a 	bl	8000618 <__aeabi_dmul>
 800df44:	4682      	mov	sl, r0
 800df46:	4638      	mov	r0, r7
 800df48:	468b      	mov	fp, r1
 800df4a:	f7f2 faeb 	bl	8000524 <__aeabi_ui2d>
 800df4e:	4602      	mov	r2, r0
 800df50:	460b      	mov	r3, r1
 800df52:	4650      	mov	r0, sl
 800df54:	4659      	mov	r1, fp
 800df56:	f7f2 f9a9 	bl	80002ac <__adddf3>
 800df5a:	2d0f      	cmp	r5, #15
 800df5c:	4682      	mov	sl, r0
 800df5e:	468b      	mov	fp, r1
 800df60:	ddd5      	ble.n	800df0e <_strtod_l+0x3b6>
 800df62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800df64:	1b2c      	subs	r4, r5, r4
 800df66:	441c      	add	r4, r3
 800df68:	2c00      	cmp	r4, #0
 800df6a:	f340 8093 	ble.w	800e094 <_strtod_l+0x53c>
 800df6e:	f014 030f 	ands.w	r3, r4, #15
 800df72:	d00a      	beq.n	800df8a <_strtod_l+0x432>
 800df74:	495c      	ldr	r1, [pc, #368]	@ (800e0e8 <_strtod_l+0x590>)
 800df76:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800df7a:	4652      	mov	r2, sl
 800df7c:	465b      	mov	r3, fp
 800df7e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800df82:	f7f2 fb49 	bl	8000618 <__aeabi_dmul>
 800df86:	4682      	mov	sl, r0
 800df88:	468b      	mov	fp, r1
 800df8a:	f034 040f 	bics.w	r4, r4, #15
 800df8e:	d073      	beq.n	800e078 <_strtod_l+0x520>
 800df90:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800df94:	dd49      	ble.n	800e02a <_strtod_l+0x4d2>
 800df96:	2400      	movs	r4, #0
 800df98:	46a0      	mov	r8, r4
 800df9a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800df9c:	46a1      	mov	r9, r4
 800df9e:	9a05      	ldr	r2, [sp, #20]
 800dfa0:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 800e0f0 <_strtod_l+0x598>
 800dfa4:	2322      	movs	r3, #34	@ 0x22
 800dfa6:	6013      	str	r3, [r2, #0]
 800dfa8:	f04f 0a00 	mov.w	sl, #0
 800dfac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dfae:	2b00      	cmp	r3, #0
 800dfb0:	f43f ae0b 	beq.w	800dbca <_strtod_l+0x72>
 800dfb4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800dfb6:	9805      	ldr	r0, [sp, #20]
 800dfb8:	f001 fb1e 	bl	800f5f8 <_Bfree>
 800dfbc:	9805      	ldr	r0, [sp, #20]
 800dfbe:	4649      	mov	r1, r9
 800dfc0:	f001 fb1a 	bl	800f5f8 <_Bfree>
 800dfc4:	9805      	ldr	r0, [sp, #20]
 800dfc6:	4641      	mov	r1, r8
 800dfc8:	f001 fb16 	bl	800f5f8 <_Bfree>
 800dfcc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800dfce:	9805      	ldr	r0, [sp, #20]
 800dfd0:	f001 fb12 	bl	800f5f8 <_Bfree>
 800dfd4:	9805      	ldr	r0, [sp, #20]
 800dfd6:	4621      	mov	r1, r4
 800dfd8:	f001 fb0e 	bl	800f5f8 <_Bfree>
 800dfdc:	e5f5      	b.n	800dbca <_strtod_l+0x72>
 800dfde:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dfe0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800dfe4:	4293      	cmp	r3, r2
 800dfe6:	dbbc      	blt.n	800df62 <_strtod_l+0x40a>
 800dfe8:	4c3f      	ldr	r4, [pc, #252]	@ (800e0e8 <_strtod_l+0x590>)
 800dfea:	f1c5 050f 	rsb	r5, r5, #15
 800dfee:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800dff2:	4652      	mov	r2, sl
 800dff4:	465b      	mov	r3, fp
 800dff6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dffa:	f7f2 fb0d 	bl	8000618 <__aeabi_dmul>
 800dffe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e000:	1b5d      	subs	r5, r3, r5
 800e002:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800e006:	e9d4 2300 	ldrd	r2, r3, [r4]
 800e00a:	e78f      	b.n	800df2c <_strtod_l+0x3d4>
 800e00c:	3316      	adds	r3, #22
 800e00e:	dba8      	blt.n	800df62 <_strtod_l+0x40a>
 800e010:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e012:	eba3 0808 	sub.w	r8, r3, r8
 800e016:	4b34      	ldr	r3, [pc, #208]	@ (800e0e8 <_strtod_l+0x590>)
 800e018:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800e01c:	e9d8 2300 	ldrd	r2, r3, [r8]
 800e020:	4650      	mov	r0, sl
 800e022:	4659      	mov	r1, fp
 800e024:	f7f2 fc22 	bl	800086c <__aeabi_ddiv>
 800e028:	e782      	b.n	800df30 <_strtod_l+0x3d8>
 800e02a:	2300      	movs	r3, #0
 800e02c:	4f2f      	ldr	r7, [pc, #188]	@ (800e0ec <_strtod_l+0x594>)
 800e02e:	1124      	asrs	r4, r4, #4
 800e030:	4650      	mov	r0, sl
 800e032:	4659      	mov	r1, fp
 800e034:	461e      	mov	r6, r3
 800e036:	2c01      	cmp	r4, #1
 800e038:	dc21      	bgt.n	800e07e <_strtod_l+0x526>
 800e03a:	b10b      	cbz	r3, 800e040 <_strtod_l+0x4e8>
 800e03c:	4682      	mov	sl, r0
 800e03e:	468b      	mov	fp, r1
 800e040:	492a      	ldr	r1, [pc, #168]	@ (800e0ec <_strtod_l+0x594>)
 800e042:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800e046:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800e04a:	4652      	mov	r2, sl
 800e04c:	465b      	mov	r3, fp
 800e04e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e052:	f7f2 fae1 	bl	8000618 <__aeabi_dmul>
 800e056:	4b26      	ldr	r3, [pc, #152]	@ (800e0f0 <_strtod_l+0x598>)
 800e058:	460a      	mov	r2, r1
 800e05a:	400b      	ands	r3, r1
 800e05c:	4925      	ldr	r1, [pc, #148]	@ (800e0f4 <_strtod_l+0x59c>)
 800e05e:	428b      	cmp	r3, r1
 800e060:	4682      	mov	sl, r0
 800e062:	d898      	bhi.n	800df96 <_strtod_l+0x43e>
 800e064:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800e068:	428b      	cmp	r3, r1
 800e06a:	bf86      	itte	hi
 800e06c:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 800e0f8 <_strtod_l+0x5a0>
 800e070:	f04f 3aff 	movhi.w	sl, #4294967295
 800e074:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800e078:	2300      	movs	r3, #0
 800e07a:	9308      	str	r3, [sp, #32]
 800e07c:	e076      	b.n	800e16c <_strtod_l+0x614>
 800e07e:	07e2      	lsls	r2, r4, #31
 800e080:	d504      	bpl.n	800e08c <_strtod_l+0x534>
 800e082:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e086:	f7f2 fac7 	bl	8000618 <__aeabi_dmul>
 800e08a:	2301      	movs	r3, #1
 800e08c:	3601      	adds	r6, #1
 800e08e:	1064      	asrs	r4, r4, #1
 800e090:	3708      	adds	r7, #8
 800e092:	e7d0      	b.n	800e036 <_strtod_l+0x4de>
 800e094:	d0f0      	beq.n	800e078 <_strtod_l+0x520>
 800e096:	4264      	negs	r4, r4
 800e098:	f014 020f 	ands.w	r2, r4, #15
 800e09c:	d00a      	beq.n	800e0b4 <_strtod_l+0x55c>
 800e09e:	4b12      	ldr	r3, [pc, #72]	@ (800e0e8 <_strtod_l+0x590>)
 800e0a0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e0a4:	4650      	mov	r0, sl
 800e0a6:	4659      	mov	r1, fp
 800e0a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0ac:	f7f2 fbde 	bl	800086c <__aeabi_ddiv>
 800e0b0:	4682      	mov	sl, r0
 800e0b2:	468b      	mov	fp, r1
 800e0b4:	1124      	asrs	r4, r4, #4
 800e0b6:	d0df      	beq.n	800e078 <_strtod_l+0x520>
 800e0b8:	2c1f      	cmp	r4, #31
 800e0ba:	dd1f      	ble.n	800e0fc <_strtod_l+0x5a4>
 800e0bc:	2400      	movs	r4, #0
 800e0be:	46a0      	mov	r8, r4
 800e0c0:	940b      	str	r4, [sp, #44]	@ 0x2c
 800e0c2:	46a1      	mov	r9, r4
 800e0c4:	9a05      	ldr	r2, [sp, #20]
 800e0c6:	2322      	movs	r3, #34	@ 0x22
 800e0c8:	f04f 0a00 	mov.w	sl, #0
 800e0cc:	f04f 0b00 	mov.w	fp, #0
 800e0d0:	6013      	str	r3, [r2, #0]
 800e0d2:	e76b      	b.n	800dfac <_strtod_l+0x454>
 800e0d4:	080110ef 	.word	0x080110ef
 800e0d8:	0801124c 	.word	0x0801124c
 800e0dc:	080110e6 	.word	0x080110e6
 800e0e0:	080110e9 	.word	0x080110e9
 800e0e4:	08011249 	.word	0x08011249
 800e0e8:	080113d8 	.word	0x080113d8
 800e0ec:	080113b0 	.word	0x080113b0
 800e0f0:	7ff00000 	.word	0x7ff00000
 800e0f4:	7ca00000 	.word	0x7ca00000
 800e0f8:	7fefffff 	.word	0x7fefffff
 800e0fc:	f014 0310 	ands.w	r3, r4, #16
 800e100:	bf18      	it	ne
 800e102:	236a      	movne	r3, #106	@ 0x6a
 800e104:	4ea9      	ldr	r6, [pc, #676]	@ (800e3ac <_strtod_l+0x854>)
 800e106:	9308      	str	r3, [sp, #32]
 800e108:	4650      	mov	r0, sl
 800e10a:	4659      	mov	r1, fp
 800e10c:	2300      	movs	r3, #0
 800e10e:	07e7      	lsls	r7, r4, #31
 800e110:	d504      	bpl.n	800e11c <_strtod_l+0x5c4>
 800e112:	e9d6 2300 	ldrd	r2, r3, [r6]
 800e116:	f7f2 fa7f 	bl	8000618 <__aeabi_dmul>
 800e11a:	2301      	movs	r3, #1
 800e11c:	1064      	asrs	r4, r4, #1
 800e11e:	f106 0608 	add.w	r6, r6, #8
 800e122:	d1f4      	bne.n	800e10e <_strtod_l+0x5b6>
 800e124:	b10b      	cbz	r3, 800e12a <_strtod_l+0x5d2>
 800e126:	4682      	mov	sl, r0
 800e128:	468b      	mov	fp, r1
 800e12a:	9b08      	ldr	r3, [sp, #32]
 800e12c:	b1b3      	cbz	r3, 800e15c <_strtod_l+0x604>
 800e12e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800e132:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800e136:	2b00      	cmp	r3, #0
 800e138:	4659      	mov	r1, fp
 800e13a:	dd0f      	ble.n	800e15c <_strtod_l+0x604>
 800e13c:	2b1f      	cmp	r3, #31
 800e13e:	dd56      	ble.n	800e1ee <_strtod_l+0x696>
 800e140:	2b34      	cmp	r3, #52	@ 0x34
 800e142:	bfde      	ittt	le
 800e144:	f04f 33ff 	movle.w	r3, #4294967295
 800e148:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800e14c:	4093      	lslle	r3, r2
 800e14e:	f04f 0a00 	mov.w	sl, #0
 800e152:	bfcc      	ite	gt
 800e154:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800e158:	ea03 0b01 	andle.w	fp, r3, r1
 800e15c:	2200      	movs	r2, #0
 800e15e:	2300      	movs	r3, #0
 800e160:	4650      	mov	r0, sl
 800e162:	4659      	mov	r1, fp
 800e164:	f7f2 fcc0 	bl	8000ae8 <__aeabi_dcmpeq>
 800e168:	2800      	cmp	r0, #0
 800e16a:	d1a7      	bne.n	800e0bc <_strtod_l+0x564>
 800e16c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e16e:	9300      	str	r3, [sp, #0]
 800e170:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800e172:	9805      	ldr	r0, [sp, #20]
 800e174:	462b      	mov	r3, r5
 800e176:	464a      	mov	r2, r9
 800e178:	f001 faa6 	bl	800f6c8 <__s2b>
 800e17c:	900b      	str	r0, [sp, #44]	@ 0x2c
 800e17e:	2800      	cmp	r0, #0
 800e180:	f43f af09 	beq.w	800df96 <_strtod_l+0x43e>
 800e184:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e186:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e188:	2a00      	cmp	r2, #0
 800e18a:	eba3 0308 	sub.w	r3, r3, r8
 800e18e:	bfa8      	it	ge
 800e190:	2300      	movge	r3, #0
 800e192:	9312      	str	r3, [sp, #72]	@ 0x48
 800e194:	2400      	movs	r4, #0
 800e196:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800e19a:	9316      	str	r3, [sp, #88]	@ 0x58
 800e19c:	46a0      	mov	r8, r4
 800e19e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e1a0:	9805      	ldr	r0, [sp, #20]
 800e1a2:	6859      	ldr	r1, [r3, #4]
 800e1a4:	f001 f9e8 	bl	800f578 <_Balloc>
 800e1a8:	4681      	mov	r9, r0
 800e1aa:	2800      	cmp	r0, #0
 800e1ac:	f43f aef7 	beq.w	800df9e <_strtod_l+0x446>
 800e1b0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e1b2:	691a      	ldr	r2, [r3, #16]
 800e1b4:	3202      	adds	r2, #2
 800e1b6:	f103 010c 	add.w	r1, r3, #12
 800e1ba:	0092      	lsls	r2, r2, #2
 800e1bc:	300c      	adds	r0, #12
 800e1be:	f000 fd80 	bl	800ecc2 <memcpy>
 800e1c2:	ec4b ab10 	vmov	d0, sl, fp
 800e1c6:	9805      	ldr	r0, [sp, #20]
 800e1c8:	aa1c      	add	r2, sp, #112	@ 0x70
 800e1ca:	a91b      	add	r1, sp, #108	@ 0x6c
 800e1cc:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800e1d0:	f001 fdae 	bl	800fd30 <__d2b>
 800e1d4:	901a      	str	r0, [sp, #104]	@ 0x68
 800e1d6:	2800      	cmp	r0, #0
 800e1d8:	f43f aee1 	beq.w	800df9e <_strtod_l+0x446>
 800e1dc:	9805      	ldr	r0, [sp, #20]
 800e1de:	2101      	movs	r1, #1
 800e1e0:	f001 fb08 	bl	800f7f4 <__i2b>
 800e1e4:	4680      	mov	r8, r0
 800e1e6:	b948      	cbnz	r0, 800e1fc <_strtod_l+0x6a4>
 800e1e8:	f04f 0800 	mov.w	r8, #0
 800e1ec:	e6d7      	b.n	800df9e <_strtod_l+0x446>
 800e1ee:	f04f 32ff 	mov.w	r2, #4294967295
 800e1f2:	fa02 f303 	lsl.w	r3, r2, r3
 800e1f6:	ea03 0a0a 	and.w	sl, r3, sl
 800e1fa:	e7af      	b.n	800e15c <_strtod_l+0x604>
 800e1fc:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800e1fe:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800e200:	2d00      	cmp	r5, #0
 800e202:	bfab      	itete	ge
 800e204:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800e206:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800e208:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800e20a:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800e20c:	bfac      	ite	ge
 800e20e:	18ef      	addge	r7, r5, r3
 800e210:	1b5e      	sublt	r6, r3, r5
 800e212:	9b08      	ldr	r3, [sp, #32]
 800e214:	1aed      	subs	r5, r5, r3
 800e216:	4415      	add	r5, r2
 800e218:	4b65      	ldr	r3, [pc, #404]	@ (800e3b0 <_strtod_l+0x858>)
 800e21a:	3d01      	subs	r5, #1
 800e21c:	429d      	cmp	r5, r3
 800e21e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800e222:	da50      	bge.n	800e2c6 <_strtod_l+0x76e>
 800e224:	1b5b      	subs	r3, r3, r5
 800e226:	2b1f      	cmp	r3, #31
 800e228:	eba2 0203 	sub.w	r2, r2, r3
 800e22c:	f04f 0101 	mov.w	r1, #1
 800e230:	dc3d      	bgt.n	800e2ae <_strtod_l+0x756>
 800e232:	fa01 f303 	lsl.w	r3, r1, r3
 800e236:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e238:	2300      	movs	r3, #0
 800e23a:	9310      	str	r3, [sp, #64]	@ 0x40
 800e23c:	18bd      	adds	r5, r7, r2
 800e23e:	9b08      	ldr	r3, [sp, #32]
 800e240:	42af      	cmp	r7, r5
 800e242:	4416      	add	r6, r2
 800e244:	441e      	add	r6, r3
 800e246:	463b      	mov	r3, r7
 800e248:	bfa8      	it	ge
 800e24a:	462b      	movge	r3, r5
 800e24c:	42b3      	cmp	r3, r6
 800e24e:	bfa8      	it	ge
 800e250:	4633      	movge	r3, r6
 800e252:	2b00      	cmp	r3, #0
 800e254:	bfc2      	ittt	gt
 800e256:	1aed      	subgt	r5, r5, r3
 800e258:	1af6      	subgt	r6, r6, r3
 800e25a:	1aff      	subgt	r7, r7, r3
 800e25c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e25e:	2b00      	cmp	r3, #0
 800e260:	dd16      	ble.n	800e290 <_strtod_l+0x738>
 800e262:	4641      	mov	r1, r8
 800e264:	9805      	ldr	r0, [sp, #20]
 800e266:	461a      	mov	r2, r3
 800e268:	f001 fb7c 	bl	800f964 <__pow5mult>
 800e26c:	4680      	mov	r8, r0
 800e26e:	2800      	cmp	r0, #0
 800e270:	d0ba      	beq.n	800e1e8 <_strtod_l+0x690>
 800e272:	4601      	mov	r1, r0
 800e274:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800e276:	9805      	ldr	r0, [sp, #20]
 800e278:	f001 fad2 	bl	800f820 <__multiply>
 800e27c:	900a      	str	r0, [sp, #40]	@ 0x28
 800e27e:	2800      	cmp	r0, #0
 800e280:	f43f ae8d 	beq.w	800df9e <_strtod_l+0x446>
 800e284:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e286:	9805      	ldr	r0, [sp, #20]
 800e288:	f001 f9b6 	bl	800f5f8 <_Bfree>
 800e28c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e28e:	931a      	str	r3, [sp, #104]	@ 0x68
 800e290:	2d00      	cmp	r5, #0
 800e292:	dc1d      	bgt.n	800e2d0 <_strtod_l+0x778>
 800e294:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e296:	2b00      	cmp	r3, #0
 800e298:	dd23      	ble.n	800e2e2 <_strtod_l+0x78a>
 800e29a:	4649      	mov	r1, r9
 800e29c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800e29e:	9805      	ldr	r0, [sp, #20]
 800e2a0:	f001 fb60 	bl	800f964 <__pow5mult>
 800e2a4:	4681      	mov	r9, r0
 800e2a6:	b9e0      	cbnz	r0, 800e2e2 <_strtod_l+0x78a>
 800e2a8:	f04f 0900 	mov.w	r9, #0
 800e2ac:	e677      	b.n	800df9e <_strtod_l+0x446>
 800e2ae:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800e2b2:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800e2b6:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800e2ba:	35e2      	adds	r5, #226	@ 0xe2
 800e2bc:	fa01 f305 	lsl.w	r3, r1, r5
 800e2c0:	9310      	str	r3, [sp, #64]	@ 0x40
 800e2c2:	9113      	str	r1, [sp, #76]	@ 0x4c
 800e2c4:	e7ba      	b.n	800e23c <_strtod_l+0x6e4>
 800e2c6:	2300      	movs	r3, #0
 800e2c8:	9310      	str	r3, [sp, #64]	@ 0x40
 800e2ca:	2301      	movs	r3, #1
 800e2cc:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e2ce:	e7b5      	b.n	800e23c <_strtod_l+0x6e4>
 800e2d0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e2d2:	9805      	ldr	r0, [sp, #20]
 800e2d4:	462a      	mov	r2, r5
 800e2d6:	f001 fb9f 	bl	800fa18 <__lshift>
 800e2da:	901a      	str	r0, [sp, #104]	@ 0x68
 800e2dc:	2800      	cmp	r0, #0
 800e2de:	d1d9      	bne.n	800e294 <_strtod_l+0x73c>
 800e2e0:	e65d      	b.n	800df9e <_strtod_l+0x446>
 800e2e2:	2e00      	cmp	r6, #0
 800e2e4:	dd07      	ble.n	800e2f6 <_strtod_l+0x79e>
 800e2e6:	4649      	mov	r1, r9
 800e2e8:	9805      	ldr	r0, [sp, #20]
 800e2ea:	4632      	mov	r2, r6
 800e2ec:	f001 fb94 	bl	800fa18 <__lshift>
 800e2f0:	4681      	mov	r9, r0
 800e2f2:	2800      	cmp	r0, #0
 800e2f4:	d0d8      	beq.n	800e2a8 <_strtod_l+0x750>
 800e2f6:	2f00      	cmp	r7, #0
 800e2f8:	dd08      	ble.n	800e30c <_strtod_l+0x7b4>
 800e2fa:	4641      	mov	r1, r8
 800e2fc:	9805      	ldr	r0, [sp, #20]
 800e2fe:	463a      	mov	r2, r7
 800e300:	f001 fb8a 	bl	800fa18 <__lshift>
 800e304:	4680      	mov	r8, r0
 800e306:	2800      	cmp	r0, #0
 800e308:	f43f ae49 	beq.w	800df9e <_strtod_l+0x446>
 800e30c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e30e:	9805      	ldr	r0, [sp, #20]
 800e310:	464a      	mov	r2, r9
 800e312:	f001 fc09 	bl	800fb28 <__mdiff>
 800e316:	4604      	mov	r4, r0
 800e318:	2800      	cmp	r0, #0
 800e31a:	f43f ae40 	beq.w	800df9e <_strtod_l+0x446>
 800e31e:	68c3      	ldr	r3, [r0, #12]
 800e320:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e322:	2300      	movs	r3, #0
 800e324:	60c3      	str	r3, [r0, #12]
 800e326:	4641      	mov	r1, r8
 800e328:	f001 fbe2 	bl	800faf0 <__mcmp>
 800e32c:	2800      	cmp	r0, #0
 800e32e:	da45      	bge.n	800e3bc <_strtod_l+0x864>
 800e330:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e332:	ea53 030a 	orrs.w	r3, r3, sl
 800e336:	d16b      	bne.n	800e410 <_strtod_l+0x8b8>
 800e338:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e33c:	2b00      	cmp	r3, #0
 800e33e:	d167      	bne.n	800e410 <_strtod_l+0x8b8>
 800e340:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e344:	0d1b      	lsrs	r3, r3, #20
 800e346:	051b      	lsls	r3, r3, #20
 800e348:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800e34c:	d960      	bls.n	800e410 <_strtod_l+0x8b8>
 800e34e:	6963      	ldr	r3, [r4, #20]
 800e350:	b913      	cbnz	r3, 800e358 <_strtod_l+0x800>
 800e352:	6923      	ldr	r3, [r4, #16]
 800e354:	2b01      	cmp	r3, #1
 800e356:	dd5b      	ble.n	800e410 <_strtod_l+0x8b8>
 800e358:	4621      	mov	r1, r4
 800e35a:	2201      	movs	r2, #1
 800e35c:	9805      	ldr	r0, [sp, #20]
 800e35e:	f001 fb5b 	bl	800fa18 <__lshift>
 800e362:	4641      	mov	r1, r8
 800e364:	4604      	mov	r4, r0
 800e366:	f001 fbc3 	bl	800faf0 <__mcmp>
 800e36a:	2800      	cmp	r0, #0
 800e36c:	dd50      	ble.n	800e410 <_strtod_l+0x8b8>
 800e36e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e372:	9a08      	ldr	r2, [sp, #32]
 800e374:	0d1b      	lsrs	r3, r3, #20
 800e376:	051b      	lsls	r3, r3, #20
 800e378:	2a00      	cmp	r2, #0
 800e37a:	d06a      	beq.n	800e452 <_strtod_l+0x8fa>
 800e37c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800e380:	d867      	bhi.n	800e452 <_strtod_l+0x8fa>
 800e382:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800e386:	f67f ae9d 	bls.w	800e0c4 <_strtod_l+0x56c>
 800e38a:	4b0a      	ldr	r3, [pc, #40]	@ (800e3b4 <_strtod_l+0x85c>)
 800e38c:	4650      	mov	r0, sl
 800e38e:	4659      	mov	r1, fp
 800e390:	2200      	movs	r2, #0
 800e392:	f7f2 f941 	bl	8000618 <__aeabi_dmul>
 800e396:	4b08      	ldr	r3, [pc, #32]	@ (800e3b8 <_strtod_l+0x860>)
 800e398:	400b      	ands	r3, r1
 800e39a:	4682      	mov	sl, r0
 800e39c:	468b      	mov	fp, r1
 800e39e:	2b00      	cmp	r3, #0
 800e3a0:	f47f ae08 	bne.w	800dfb4 <_strtod_l+0x45c>
 800e3a4:	9a05      	ldr	r2, [sp, #20]
 800e3a6:	2322      	movs	r3, #34	@ 0x22
 800e3a8:	6013      	str	r3, [r2, #0]
 800e3aa:	e603      	b.n	800dfb4 <_strtod_l+0x45c>
 800e3ac:	08011278 	.word	0x08011278
 800e3b0:	fffffc02 	.word	0xfffffc02
 800e3b4:	39500000 	.word	0x39500000
 800e3b8:	7ff00000 	.word	0x7ff00000
 800e3bc:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800e3c0:	d165      	bne.n	800e48e <_strtod_l+0x936>
 800e3c2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800e3c4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e3c8:	b35a      	cbz	r2, 800e422 <_strtod_l+0x8ca>
 800e3ca:	4a9f      	ldr	r2, [pc, #636]	@ (800e648 <_strtod_l+0xaf0>)
 800e3cc:	4293      	cmp	r3, r2
 800e3ce:	d12b      	bne.n	800e428 <_strtod_l+0x8d0>
 800e3d0:	9b08      	ldr	r3, [sp, #32]
 800e3d2:	4651      	mov	r1, sl
 800e3d4:	b303      	cbz	r3, 800e418 <_strtod_l+0x8c0>
 800e3d6:	4b9d      	ldr	r3, [pc, #628]	@ (800e64c <_strtod_l+0xaf4>)
 800e3d8:	465a      	mov	r2, fp
 800e3da:	4013      	ands	r3, r2
 800e3dc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800e3e0:	f04f 32ff 	mov.w	r2, #4294967295
 800e3e4:	d81b      	bhi.n	800e41e <_strtod_l+0x8c6>
 800e3e6:	0d1b      	lsrs	r3, r3, #20
 800e3e8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800e3ec:	fa02 f303 	lsl.w	r3, r2, r3
 800e3f0:	4299      	cmp	r1, r3
 800e3f2:	d119      	bne.n	800e428 <_strtod_l+0x8d0>
 800e3f4:	4b96      	ldr	r3, [pc, #600]	@ (800e650 <_strtod_l+0xaf8>)
 800e3f6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e3f8:	429a      	cmp	r2, r3
 800e3fa:	d102      	bne.n	800e402 <_strtod_l+0x8aa>
 800e3fc:	3101      	adds	r1, #1
 800e3fe:	f43f adce 	beq.w	800df9e <_strtod_l+0x446>
 800e402:	4b92      	ldr	r3, [pc, #584]	@ (800e64c <_strtod_l+0xaf4>)
 800e404:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e406:	401a      	ands	r2, r3
 800e408:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800e40c:	f04f 0a00 	mov.w	sl, #0
 800e410:	9b08      	ldr	r3, [sp, #32]
 800e412:	2b00      	cmp	r3, #0
 800e414:	d1b9      	bne.n	800e38a <_strtod_l+0x832>
 800e416:	e5cd      	b.n	800dfb4 <_strtod_l+0x45c>
 800e418:	f04f 33ff 	mov.w	r3, #4294967295
 800e41c:	e7e8      	b.n	800e3f0 <_strtod_l+0x898>
 800e41e:	4613      	mov	r3, r2
 800e420:	e7e6      	b.n	800e3f0 <_strtod_l+0x898>
 800e422:	ea53 030a 	orrs.w	r3, r3, sl
 800e426:	d0a2      	beq.n	800e36e <_strtod_l+0x816>
 800e428:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e42a:	b1db      	cbz	r3, 800e464 <_strtod_l+0x90c>
 800e42c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e42e:	4213      	tst	r3, r2
 800e430:	d0ee      	beq.n	800e410 <_strtod_l+0x8b8>
 800e432:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e434:	9a08      	ldr	r2, [sp, #32]
 800e436:	4650      	mov	r0, sl
 800e438:	4659      	mov	r1, fp
 800e43a:	b1bb      	cbz	r3, 800e46c <_strtod_l+0x914>
 800e43c:	f7ff fb6b 	bl	800db16 <sulp>
 800e440:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e444:	ec53 2b10 	vmov	r2, r3, d0
 800e448:	f7f1 ff30 	bl	80002ac <__adddf3>
 800e44c:	4682      	mov	sl, r0
 800e44e:	468b      	mov	fp, r1
 800e450:	e7de      	b.n	800e410 <_strtod_l+0x8b8>
 800e452:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800e456:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800e45a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800e45e:	f04f 3aff 	mov.w	sl, #4294967295
 800e462:	e7d5      	b.n	800e410 <_strtod_l+0x8b8>
 800e464:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800e466:	ea13 0f0a 	tst.w	r3, sl
 800e46a:	e7e1      	b.n	800e430 <_strtod_l+0x8d8>
 800e46c:	f7ff fb53 	bl	800db16 <sulp>
 800e470:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e474:	ec53 2b10 	vmov	r2, r3, d0
 800e478:	f7f1 ff16 	bl	80002a8 <__aeabi_dsub>
 800e47c:	2200      	movs	r2, #0
 800e47e:	2300      	movs	r3, #0
 800e480:	4682      	mov	sl, r0
 800e482:	468b      	mov	fp, r1
 800e484:	f7f2 fb30 	bl	8000ae8 <__aeabi_dcmpeq>
 800e488:	2800      	cmp	r0, #0
 800e48a:	d0c1      	beq.n	800e410 <_strtod_l+0x8b8>
 800e48c:	e61a      	b.n	800e0c4 <_strtod_l+0x56c>
 800e48e:	4641      	mov	r1, r8
 800e490:	4620      	mov	r0, r4
 800e492:	f001 fca5 	bl	800fde0 <__ratio>
 800e496:	ec57 6b10 	vmov	r6, r7, d0
 800e49a:	2200      	movs	r2, #0
 800e49c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800e4a0:	4630      	mov	r0, r6
 800e4a2:	4639      	mov	r1, r7
 800e4a4:	f7f2 fb34 	bl	8000b10 <__aeabi_dcmple>
 800e4a8:	2800      	cmp	r0, #0
 800e4aa:	d06f      	beq.n	800e58c <_strtod_l+0xa34>
 800e4ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e4ae:	2b00      	cmp	r3, #0
 800e4b0:	d17a      	bne.n	800e5a8 <_strtod_l+0xa50>
 800e4b2:	f1ba 0f00 	cmp.w	sl, #0
 800e4b6:	d158      	bne.n	800e56a <_strtod_l+0xa12>
 800e4b8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e4ba:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e4be:	2b00      	cmp	r3, #0
 800e4c0:	d15a      	bne.n	800e578 <_strtod_l+0xa20>
 800e4c2:	4b64      	ldr	r3, [pc, #400]	@ (800e654 <_strtod_l+0xafc>)
 800e4c4:	2200      	movs	r2, #0
 800e4c6:	4630      	mov	r0, r6
 800e4c8:	4639      	mov	r1, r7
 800e4ca:	f7f2 fb17 	bl	8000afc <__aeabi_dcmplt>
 800e4ce:	2800      	cmp	r0, #0
 800e4d0:	d159      	bne.n	800e586 <_strtod_l+0xa2e>
 800e4d2:	4630      	mov	r0, r6
 800e4d4:	4639      	mov	r1, r7
 800e4d6:	4b60      	ldr	r3, [pc, #384]	@ (800e658 <_strtod_l+0xb00>)
 800e4d8:	2200      	movs	r2, #0
 800e4da:	f7f2 f89d 	bl	8000618 <__aeabi_dmul>
 800e4de:	4606      	mov	r6, r0
 800e4e0:	460f      	mov	r7, r1
 800e4e2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800e4e6:	9606      	str	r6, [sp, #24]
 800e4e8:	9307      	str	r3, [sp, #28]
 800e4ea:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e4ee:	4d57      	ldr	r5, [pc, #348]	@ (800e64c <_strtod_l+0xaf4>)
 800e4f0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800e4f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e4f6:	401d      	ands	r5, r3
 800e4f8:	4b58      	ldr	r3, [pc, #352]	@ (800e65c <_strtod_l+0xb04>)
 800e4fa:	429d      	cmp	r5, r3
 800e4fc:	f040 80b2 	bne.w	800e664 <_strtod_l+0xb0c>
 800e500:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e502:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800e506:	ec4b ab10 	vmov	d0, sl, fp
 800e50a:	f001 fba1 	bl	800fc50 <__ulp>
 800e50e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e512:	ec51 0b10 	vmov	r0, r1, d0
 800e516:	f7f2 f87f 	bl	8000618 <__aeabi_dmul>
 800e51a:	4652      	mov	r2, sl
 800e51c:	465b      	mov	r3, fp
 800e51e:	f7f1 fec5 	bl	80002ac <__adddf3>
 800e522:	460b      	mov	r3, r1
 800e524:	4949      	ldr	r1, [pc, #292]	@ (800e64c <_strtod_l+0xaf4>)
 800e526:	4a4e      	ldr	r2, [pc, #312]	@ (800e660 <_strtod_l+0xb08>)
 800e528:	4019      	ands	r1, r3
 800e52a:	4291      	cmp	r1, r2
 800e52c:	4682      	mov	sl, r0
 800e52e:	d942      	bls.n	800e5b6 <_strtod_l+0xa5e>
 800e530:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800e532:	4b47      	ldr	r3, [pc, #284]	@ (800e650 <_strtod_l+0xaf8>)
 800e534:	429a      	cmp	r2, r3
 800e536:	d103      	bne.n	800e540 <_strtod_l+0x9e8>
 800e538:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e53a:	3301      	adds	r3, #1
 800e53c:	f43f ad2f 	beq.w	800df9e <_strtod_l+0x446>
 800e540:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800e650 <_strtod_l+0xaf8>
 800e544:	f04f 3aff 	mov.w	sl, #4294967295
 800e548:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e54a:	9805      	ldr	r0, [sp, #20]
 800e54c:	f001 f854 	bl	800f5f8 <_Bfree>
 800e550:	9805      	ldr	r0, [sp, #20]
 800e552:	4649      	mov	r1, r9
 800e554:	f001 f850 	bl	800f5f8 <_Bfree>
 800e558:	9805      	ldr	r0, [sp, #20]
 800e55a:	4641      	mov	r1, r8
 800e55c:	f001 f84c 	bl	800f5f8 <_Bfree>
 800e560:	9805      	ldr	r0, [sp, #20]
 800e562:	4621      	mov	r1, r4
 800e564:	f001 f848 	bl	800f5f8 <_Bfree>
 800e568:	e619      	b.n	800e19e <_strtod_l+0x646>
 800e56a:	f1ba 0f01 	cmp.w	sl, #1
 800e56e:	d103      	bne.n	800e578 <_strtod_l+0xa20>
 800e570:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e572:	2b00      	cmp	r3, #0
 800e574:	f43f ada6 	beq.w	800e0c4 <_strtod_l+0x56c>
 800e578:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800e628 <_strtod_l+0xad0>
 800e57c:	4f35      	ldr	r7, [pc, #212]	@ (800e654 <_strtod_l+0xafc>)
 800e57e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800e582:	2600      	movs	r6, #0
 800e584:	e7b1      	b.n	800e4ea <_strtod_l+0x992>
 800e586:	4f34      	ldr	r7, [pc, #208]	@ (800e658 <_strtod_l+0xb00>)
 800e588:	2600      	movs	r6, #0
 800e58a:	e7aa      	b.n	800e4e2 <_strtod_l+0x98a>
 800e58c:	4b32      	ldr	r3, [pc, #200]	@ (800e658 <_strtod_l+0xb00>)
 800e58e:	4630      	mov	r0, r6
 800e590:	4639      	mov	r1, r7
 800e592:	2200      	movs	r2, #0
 800e594:	f7f2 f840 	bl	8000618 <__aeabi_dmul>
 800e598:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e59a:	4606      	mov	r6, r0
 800e59c:	460f      	mov	r7, r1
 800e59e:	2b00      	cmp	r3, #0
 800e5a0:	d09f      	beq.n	800e4e2 <_strtod_l+0x98a>
 800e5a2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800e5a6:	e7a0      	b.n	800e4ea <_strtod_l+0x992>
 800e5a8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800e630 <_strtod_l+0xad8>
 800e5ac:	ed8d 7b06 	vstr	d7, [sp, #24]
 800e5b0:	ec57 6b17 	vmov	r6, r7, d7
 800e5b4:	e799      	b.n	800e4ea <_strtod_l+0x992>
 800e5b6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800e5ba:	9b08      	ldr	r3, [sp, #32]
 800e5bc:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800e5c0:	2b00      	cmp	r3, #0
 800e5c2:	d1c1      	bne.n	800e548 <_strtod_l+0x9f0>
 800e5c4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e5c8:	0d1b      	lsrs	r3, r3, #20
 800e5ca:	051b      	lsls	r3, r3, #20
 800e5cc:	429d      	cmp	r5, r3
 800e5ce:	d1bb      	bne.n	800e548 <_strtod_l+0x9f0>
 800e5d0:	4630      	mov	r0, r6
 800e5d2:	4639      	mov	r1, r7
 800e5d4:	f7f2 fb80 	bl	8000cd8 <__aeabi_d2lz>
 800e5d8:	f7f1 fff0 	bl	80005bc <__aeabi_l2d>
 800e5dc:	4602      	mov	r2, r0
 800e5de:	460b      	mov	r3, r1
 800e5e0:	4630      	mov	r0, r6
 800e5e2:	4639      	mov	r1, r7
 800e5e4:	f7f1 fe60 	bl	80002a8 <__aeabi_dsub>
 800e5e8:	460b      	mov	r3, r1
 800e5ea:	4602      	mov	r2, r0
 800e5ec:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800e5f0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800e5f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e5f6:	ea46 060a 	orr.w	r6, r6, sl
 800e5fa:	431e      	orrs	r6, r3
 800e5fc:	d06f      	beq.n	800e6de <_strtod_l+0xb86>
 800e5fe:	a30e      	add	r3, pc, #56	@ (adr r3, 800e638 <_strtod_l+0xae0>)
 800e600:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e604:	f7f2 fa7a 	bl	8000afc <__aeabi_dcmplt>
 800e608:	2800      	cmp	r0, #0
 800e60a:	f47f acd3 	bne.w	800dfb4 <_strtod_l+0x45c>
 800e60e:	a30c      	add	r3, pc, #48	@ (adr r3, 800e640 <_strtod_l+0xae8>)
 800e610:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e614:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e618:	f7f2 fa8e 	bl	8000b38 <__aeabi_dcmpgt>
 800e61c:	2800      	cmp	r0, #0
 800e61e:	d093      	beq.n	800e548 <_strtod_l+0x9f0>
 800e620:	e4c8      	b.n	800dfb4 <_strtod_l+0x45c>
 800e622:	bf00      	nop
 800e624:	f3af 8000 	nop.w
 800e628:	00000000 	.word	0x00000000
 800e62c:	bff00000 	.word	0xbff00000
 800e630:	00000000 	.word	0x00000000
 800e634:	3ff00000 	.word	0x3ff00000
 800e638:	94a03595 	.word	0x94a03595
 800e63c:	3fdfffff 	.word	0x3fdfffff
 800e640:	35afe535 	.word	0x35afe535
 800e644:	3fe00000 	.word	0x3fe00000
 800e648:	000fffff 	.word	0x000fffff
 800e64c:	7ff00000 	.word	0x7ff00000
 800e650:	7fefffff 	.word	0x7fefffff
 800e654:	3ff00000 	.word	0x3ff00000
 800e658:	3fe00000 	.word	0x3fe00000
 800e65c:	7fe00000 	.word	0x7fe00000
 800e660:	7c9fffff 	.word	0x7c9fffff
 800e664:	9b08      	ldr	r3, [sp, #32]
 800e666:	b323      	cbz	r3, 800e6b2 <_strtod_l+0xb5a>
 800e668:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800e66c:	d821      	bhi.n	800e6b2 <_strtod_l+0xb5a>
 800e66e:	a328      	add	r3, pc, #160	@ (adr r3, 800e710 <_strtod_l+0xbb8>)
 800e670:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e674:	4630      	mov	r0, r6
 800e676:	4639      	mov	r1, r7
 800e678:	f7f2 fa4a 	bl	8000b10 <__aeabi_dcmple>
 800e67c:	b1a0      	cbz	r0, 800e6a8 <_strtod_l+0xb50>
 800e67e:	4639      	mov	r1, r7
 800e680:	4630      	mov	r0, r6
 800e682:	f7f2 faa1 	bl	8000bc8 <__aeabi_d2uiz>
 800e686:	2801      	cmp	r0, #1
 800e688:	bf38      	it	cc
 800e68a:	2001      	movcc	r0, #1
 800e68c:	f7f1 ff4a 	bl	8000524 <__aeabi_ui2d>
 800e690:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e692:	4606      	mov	r6, r0
 800e694:	460f      	mov	r7, r1
 800e696:	b9fb      	cbnz	r3, 800e6d8 <_strtod_l+0xb80>
 800e698:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e69c:	9014      	str	r0, [sp, #80]	@ 0x50
 800e69e:	9315      	str	r3, [sp, #84]	@ 0x54
 800e6a0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800e6a4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800e6a8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e6aa:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800e6ae:	1b5b      	subs	r3, r3, r5
 800e6b0:	9311      	str	r3, [sp, #68]	@ 0x44
 800e6b2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800e6b6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800e6ba:	f001 fac9 	bl	800fc50 <__ulp>
 800e6be:	4650      	mov	r0, sl
 800e6c0:	ec53 2b10 	vmov	r2, r3, d0
 800e6c4:	4659      	mov	r1, fp
 800e6c6:	f7f1 ffa7 	bl	8000618 <__aeabi_dmul>
 800e6ca:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800e6ce:	f7f1 fded 	bl	80002ac <__adddf3>
 800e6d2:	4682      	mov	sl, r0
 800e6d4:	468b      	mov	fp, r1
 800e6d6:	e770      	b.n	800e5ba <_strtod_l+0xa62>
 800e6d8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800e6dc:	e7e0      	b.n	800e6a0 <_strtod_l+0xb48>
 800e6de:	a30e      	add	r3, pc, #56	@ (adr r3, 800e718 <_strtod_l+0xbc0>)
 800e6e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6e4:	f7f2 fa0a 	bl	8000afc <__aeabi_dcmplt>
 800e6e8:	e798      	b.n	800e61c <_strtod_l+0xac4>
 800e6ea:	2300      	movs	r3, #0
 800e6ec:	930e      	str	r3, [sp, #56]	@ 0x38
 800e6ee:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800e6f0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e6f2:	6013      	str	r3, [r2, #0]
 800e6f4:	f7ff ba6d 	b.w	800dbd2 <_strtod_l+0x7a>
 800e6f8:	2a65      	cmp	r2, #101	@ 0x65
 800e6fa:	f43f ab68 	beq.w	800ddce <_strtod_l+0x276>
 800e6fe:	2a45      	cmp	r2, #69	@ 0x45
 800e700:	f43f ab65 	beq.w	800ddce <_strtod_l+0x276>
 800e704:	2301      	movs	r3, #1
 800e706:	f7ff bba0 	b.w	800de4a <_strtod_l+0x2f2>
 800e70a:	bf00      	nop
 800e70c:	f3af 8000 	nop.w
 800e710:	ffc00000 	.word	0xffc00000
 800e714:	41dfffff 	.word	0x41dfffff
 800e718:	94a03595 	.word	0x94a03595
 800e71c:	3fcfffff 	.word	0x3fcfffff

0800e720 <strtod>:
 800e720:	460a      	mov	r2, r1
 800e722:	4601      	mov	r1, r0
 800e724:	4802      	ldr	r0, [pc, #8]	@ (800e730 <strtod+0x10>)
 800e726:	4b03      	ldr	r3, [pc, #12]	@ (800e734 <strtod+0x14>)
 800e728:	6800      	ldr	r0, [r0, #0]
 800e72a:	f7ff ba15 	b.w	800db58 <_strtod_l>
 800e72e:	bf00      	nop
 800e730:	200001ac 	.word	0x200001ac
 800e734:	20000040 	.word	0x20000040

0800e738 <_strtol_l.isra.0>:
 800e738:	2b24      	cmp	r3, #36	@ 0x24
 800e73a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e73e:	4686      	mov	lr, r0
 800e740:	4690      	mov	r8, r2
 800e742:	d801      	bhi.n	800e748 <_strtol_l.isra.0+0x10>
 800e744:	2b01      	cmp	r3, #1
 800e746:	d106      	bne.n	800e756 <_strtol_l.isra.0+0x1e>
 800e748:	f000 fa8e 	bl	800ec68 <__errno>
 800e74c:	2316      	movs	r3, #22
 800e74e:	6003      	str	r3, [r0, #0]
 800e750:	2000      	movs	r0, #0
 800e752:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e756:	4834      	ldr	r0, [pc, #208]	@ (800e828 <_strtol_l.isra.0+0xf0>)
 800e758:	460d      	mov	r5, r1
 800e75a:	462a      	mov	r2, r5
 800e75c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e760:	5d06      	ldrb	r6, [r0, r4]
 800e762:	f016 0608 	ands.w	r6, r6, #8
 800e766:	d1f8      	bne.n	800e75a <_strtol_l.isra.0+0x22>
 800e768:	2c2d      	cmp	r4, #45	@ 0x2d
 800e76a:	d110      	bne.n	800e78e <_strtol_l.isra.0+0x56>
 800e76c:	782c      	ldrb	r4, [r5, #0]
 800e76e:	2601      	movs	r6, #1
 800e770:	1c95      	adds	r5, r2, #2
 800e772:	f033 0210 	bics.w	r2, r3, #16
 800e776:	d115      	bne.n	800e7a4 <_strtol_l.isra.0+0x6c>
 800e778:	2c30      	cmp	r4, #48	@ 0x30
 800e77a:	d10d      	bne.n	800e798 <_strtol_l.isra.0+0x60>
 800e77c:	782a      	ldrb	r2, [r5, #0]
 800e77e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800e782:	2a58      	cmp	r2, #88	@ 0x58
 800e784:	d108      	bne.n	800e798 <_strtol_l.isra.0+0x60>
 800e786:	786c      	ldrb	r4, [r5, #1]
 800e788:	3502      	adds	r5, #2
 800e78a:	2310      	movs	r3, #16
 800e78c:	e00a      	b.n	800e7a4 <_strtol_l.isra.0+0x6c>
 800e78e:	2c2b      	cmp	r4, #43	@ 0x2b
 800e790:	bf04      	itt	eq
 800e792:	782c      	ldrbeq	r4, [r5, #0]
 800e794:	1c95      	addeq	r5, r2, #2
 800e796:	e7ec      	b.n	800e772 <_strtol_l.isra.0+0x3a>
 800e798:	2b00      	cmp	r3, #0
 800e79a:	d1f6      	bne.n	800e78a <_strtol_l.isra.0+0x52>
 800e79c:	2c30      	cmp	r4, #48	@ 0x30
 800e79e:	bf14      	ite	ne
 800e7a0:	230a      	movne	r3, #10
 800e7a2:	2308      	moveq	r3, #8
 800e7a4:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800e7a8:	f10c 3cff 	add.w	ip, ip, #4294967295
 800e7ac:	2200      	movs	r2, #0
 800e7ae:	fbbc f9f3 	udiv	r9, ip, r3
 800e7b2:	4610      	mov	r0, r2
 800e7b4:	fb03 ca19 	mls	sl, r3, r9, ip
 800e7b8:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800e7bc:	2f09      	cmp	r7, #9
 800e7be:	d80f      	bhi.n	800e7e0 <_strtol_l.isra.0+0xa8>
 800e7c0:	463c      	mov	r4, r7
 800e7c2:	42a3      	cmp	r3, r4
 800e7c4:	dd1b      	ble.n	800e7fe <_strtol_l.isra.0+0xc6>
 800e7c6:	1c57      	adds	r7, r2, #1
 800e7c8:	d007      	beq.n	800e7da <_strtol_l.isra.0+0xa2>
 800e7ca:	4581      	cmp	r9, r0
 800e7cc:	d314      	bcc.n	800e7f8 <_strtol_l.isra.0+0xc0>
 800e7ce:	d101      	bne.n	800e7d4 <_strtol_l.isra.0+0x9c>
 800e7d0:	45a2      	cmp	sl, r4
 800e7d2:	db11      	blt.n	800e7f8 <_strtol_l.isra.0+0xc0>
 800e7d4:	fb00 4003 	mla	r0, r0, r3, r4
 800e7d8:	2201      	movs	r2, #1
 800e7da:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e7de:	e7eb      	b.n	800e7b8 <_strtol_l.isra.0+0x80>
 800e7e0:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800e7e4:	2f19      	cmp	r7, #25
 800e7e6:	d801      	bhi.n	800e7ec <_strtol_l.isra.0+0xb4>
 800e7e8:	3c37      	subs	r4, #55	@ 0x37
 800e7ea:	e7ea      	b.n	800e7c2 <_strtol_l.isra.0+0x8a>
 800e7ec:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800e7f0:	2f19      	cmp	r7, #25
 800e7f2:	d804      	bhi.n	800e7fe <_strtol_l.isra.0+0xc6>
 800e7f4:	3c57      	subs	r4, #87	@ 0x57
 800e7f6:	e7e4      	b.n	800e7c2 <_strtol_l.isra.0+0x8a>
 800e7f8:	f04f 32ff 	mov.w	r2, #4294967295
 800e7fc:	e7ed      	b.n	800e7da <_strtol_l.isra.0+0xa2>
 800e7fe:	1c53      	adds	r3, r2, #1
 800e800:	d108      	bne.n	800e814 <_strtol_l.isra.0+0xdc>
 800e802:	2322      	movs	r3, #34	@ 0x22
 800e804:	f8ce 3000 	str.w	r3, [lr]
 800e808:	4660      	mov	r0, ip
 800e80a:	f1b8 0f00 	cmp.w	r8, #0
 800e80e:	d0a0      	beq.n	800e752 <_strtol_l.isra.0+0x1a>
 800e810:	1e69      	subs	r1, r5, #1
 800e812:	e006      	b.n	800e822 <_strtol_l.isra.0+0xea>
 800e814:	b106      	cbz	r6, 800e818 <_strtol_l.isra.0+0xe0>
 800e816:	4240      	negs	r0, r0
 800e818:	f1b8 0f00 	cmp.w	r8, #0
 800e81c:	d099      	beq.n	800e752 <_strtol_l.isra.0+0x1a>
 800e81e:	2a00      	cmp	r2, #0
 800e820:	d1f6      	bne.n	800e810 <_strtol_l.isra.0+0xd8>
 800e822:	f8c8 1000 	str.w	r1, [r8]
 800e826:	e794      	b.n	800e752 <_strtol_l.isra.0+0x1a>
 800e828:	080112a1 	.word	0x080112a1

0800e82c <strtol>:
 800e82c:	4613      	mov	r3, r2
 800e82e:	460a      	mov	r2, r1
 800e830:	4601      	mov	r1, r0
 800e832:	4802      	ldr	r0, [pc, #8]	@ (800e83c <strtol+0x10>)
 800e834:	6800      	ldr	r0, [r0, #0]
 800e836:	f7ff bf7f 	b.w	800e738 <_strtol_l.isra.0>
 800e83a:	bf00      	nop
 800e83c:	200001ac 	.word	0x200001ac

0800e840 <std>:
 800e840:	2300      	movs	r3, #0
 800e842:	b510      	push	{r4, lr}
 800e844:	4604      	mov	r4, r0
 800e846:	e9c0 3300 	strd	r3, r3, [r0]
 800e84a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e84e:	6083      	str	r3, [r0, #8]
 800e850:	8181      	strh	r1, [r0, #12]
 800e852:	6643      	str	r3, [r0, #100]	@ 0x64
 800e854:	81c2      	strh	r2, [r0, #14]
 800e856:	6183      	str	r3, [r0, #24]
 800e858:	4619      	mov	r1, r3
 800e85a:	2208      	movs	r2, #8
 800e85c:	305c      	adds	r0, #92	@ 0x5c
 800e85e:	f000 f931 	bl	800eac4 <memset>
 800e862:	4b0d      	ldr	r3, [pc, #52]	@ (800e898 <std+0x58>)
 800e864:	6263      	str	r3, [r4, #36]	@ 0x24
 800e866:	4b0d      	ldr	r3, [pc, #52]	@ (800e89c <std+0x5c>)
 800e868:	62a3      	str	r3, [r4, #40]	@ 0x28
 800e86a:	4b0d      	ldr	r3, [pc, #52]	@ (800e8a0 <std+0x60>)
 800e86c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800e86e:	4b0d      	ldr	r3, [pc, #52]	@ (800e8a4 <std+0x64>)
 800e870:	6323      	str	r3, [r4, #48]	@ 0x30
 800e872:	4b0d      	ldr	r3, [pc, #52]	@ (800e8a8 <std+0x68>)
 800e874:	6224      	str	r4, [r4, #32]
 800e876:	429c      	cmp	r4, r3
 800e878:	d006      	beq.n	800e888 <std+0x48>
 800e87a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800e87e:	4294      	cmp	r4, r2
 800e880:	d002      	beq.n	800e888 <std+0x48>
 800e882:	33d0      	adds	r3, #208	@ 0xd0
 800e884:	429c      	cmp	r4, r3
 800e886:	d105      	bne.n	800e894 <std+0x54>
 800e888:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800e88c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e890:	f000 ba14 	b.w	800ecbc <__retarget_lock_init_recursive>
 800e894:	bd10      	pop	{r4, pc}
 800e896:	bf00      	nop
 800e898:	0800e9c5 	.word	0x0800e9c5
 800e89c:	0800e9e7 	.word	0x0800e9e7
 800e8a0:	0800ea1f 	.word	0x0800ea1f
 800e8a4:	0800ea43 	.word	0x0800ea43
 800e8a8:	20003f60 	.word	0x20003f60

0800e8ac <stdio_exit_handler>:
 800e8ac:	4a02      	ldr	r2, [pc, #8]	@ (800e8b8 <stdio_exit_handler+0xc>)
 800e8ae:	4903      	ldr	r1, [pc, #12]	@ (800e8bc <stdio_exit_handler+0x10>)
 800e8b0:	4803      	ldr	r0, [pc, #12]	@ (800e8c0 <stdio_exit_handler+0x14>)
 800e8b2:	f000 b869 	b.w	800e988 <_fwalk_sglue>
 800e8b6:	bf00      	nop
 800e8b8:	20000034 	.word	0x20000034
 800e8bc:	080105b5 	.word	0x080105b5
 800e8c0:	200001b0 	.word	0x200001b0

0800e8c4 <cleanup_stdio>:
 800e8c4:	6841      	ldr	r1, [r0, #4]
 800e8c6:	4b0c      	ldr	r3, [pc, #48]	@ (800e8f8 <cleanup_stdio+0x34>)
 800e8c8:	4299      	cmp	r1, r3
 800e8ca:	b510      	push	{r4, lr}
 800e8cc:	4604      	mov	r4, r0
 800e8ce:	d001      	beq.n	800e8d4 <cleanup_stdio+0x10>
 800e8d0:	f001 fe70 	bl	80105b4 <_fflush_r>
 800e8d4:	68a1      	ldr	r1, [r4, #8]
 800e8d6:	4b09      	ldr	r3, [pc, #36]	@ (800e8fc <cleanup_stdio+0x38>)
 800e8d8:	4299      	cmp	r1, r3
 800e8da:	d002      	beq.n	800e8e2 <cleanup_stdio+0x1e>
 800e8dc:	4620      	mov	r0, r4
 800e8de:	f001 fe69 	bl	80105b4 <_fflush_r>
 800e8e2:	68e1      	ldr	r1, [r4, #12]
 800e8e4:	4b06      	ldr	r3, [pc, #24]	@ (800e900 <cleanup_stdio+0x3c>)
 800e8e6:	4299      	cmp	r1, r3
 800e8e8:	d004      	beq.n	800e8f4 <cleanup_stdio+0x30>
 800e8ea:	4620      	mov	r0, r4
 800e8ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e8f0:	f001 be60 	b.w	80105b4 <_fflush_r>
 800e8f4:	bd10      	pop	{r4, pc}
 800e8f6:	bf00      	nop
 800e8f8:	20003f60 	.word	0x20003f60
 800e8fc:	20003fc8 	.word	0x20003fc8
 800e900:	20004030 	.word	0x20004030

0800e904 <global_stdio_init.part.0>:
 800e904:	b510      	push	{r4, lr}
 800e906:	4b0b      	ldr	r3, [pc, #44]	@ (800e934 <global_stdio_init.part.0+0x30>)
 800e908:	4c0b      	ldr	r4, [pc, #44]	@ (800e938 <global_stdio_init.part.0+0x34>)
 800e90a:	4a0c      	ldr	r2, [pc, #48]	@ (800e93c <global_stdio_init.part.0+0x38>)
 800e90c:	601a      	str	r2, [r3, #0]
 800e90e:	4620      	mov	r0, r4
 800e910:	2200      	movs	r2, #0
 800e912:	2104      	movs	r1, #4
 800e914:	f7ff ff94 	bl	800e840 <std>
 800e918:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800e91c:	2201      	movs	r2, #1
 800e91e:	2109      	movs	r1, #9
 800e920:	f7ff ff8e 	bl	800e840 <std>
 800e924:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800e928:	2202      	movs	r2, #2
 800e92a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e92e:	2112      	movs	r1, #18
 800e930:	f7ff bf86 	b.w	800e840 <std>
 800e934:	20004098 	.word	0x20004098
 800e938:	20003f60 	.word	0x20003f60
 800e93c:	0800e8ad 	.word	0x0800e8ad

0800e940 <__sfp_lock_acquire>:
 800e940:	4801      	ldr	r0, [pc, #4]	@ (800e948 <__sfp_lock_acquire+0x8>)
 800e942:	f000 b9bc 	b.w	800ecbe <__retarget_lock_acquire_recursive>
 800e946:	bf00      	nop
 800e948:	200040a1 	.word	0x200040a1

0800e94c <__sfp_lock_release>:
 800e94c:	4801      	ldr	r0, [pc, #4]	@ (800e954 <__sfp_lock_release+0x8>)
 800e94e:	f000 b9b7 	b.w	800ecc0 <__retarget_lock_release_recursive>
 800e952:	bf00      	nop
 800e954:	200040a1 	.word	0x200040a1

0800e958 <__sinit>:
 800e958:	b510      	push	{r4, lr}
 800e95a:	4604      	mov	r4, r0
 800e95c:	f7ff fff0 	bl	800e940 <__sfp_lock_acquire>
 800e960:	6a23      	ldr	r3, [r4, #32]
 800e962:	b11b      	cbz	r3, 800e96c <__sinit+0x14>
 800e964:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e968:	f7ff bff0 	b.w	800e94c <__sfp_lock_release>
 800e96c:	4b04      	ldr	r3, [pc, #16]	@ (800e980 <__sinit+0x28>)
 800e96e:	6223      	str	r3, [r4, #32]
 800e970:	4b04      	ldr	r3, [pc, #16]	@ (800e984 <__sinit+0x2c>)
 800e972:	681b      	ldr	r3, [r3, #0]
 800e974:	2b00      	cmp	r3, #0
 800e976:	d1f5      	bne.n	800e964 <__sinit+0xc>
 800e978:	f7ff ffc4 	bl	800e904 <global_stdio_init.part.0>
 800e97c:	e7f2      	b.n	800e964 <__sinit+0xc>
 800e97e:	bf00      	nop
 800e980:	0800e8c5 	.word	0x0800e8c5
 800e984:	20004098 	.word	0x20004098

0800e988 <_fwalk_sglue>:
 800e988:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e98c:	4607      	mov	r7, r0
 800e98e:	4688      	mov	r8, r1
 800e990:	4614      	mov	r4, r2
 800e992:	2600      	movs	r6, #0
 800e994:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e998:	f1b9 0901 	subs.w	r9, r9, #1
 800e99c:	d505      	bpl.n	800e9aa <_fwalk_sglue+0x22>
 800e99e:	6824      	ldr	r4, [r4, #0]
 800e9a0:	2c00      	cmp	r4, #0
 800e9a2:	d1f7      	bne.n	800e994 <_fwalk_sglue+0xc>
 800e9a4:	4630      	mov	r0, r6
 800e9a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e9aa:	89ab      	ldrh	r3, [r5, #12]
 800e9ac:	2b01      	cmp	r3, #1
 800e9ae:	d907      	bls.n	800e9c0 <_fwalk_sglue+0x38>
 800e9b0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e9b4:	3301      	adds	r3, #1
 800e9b6:	d003      	beq.n	800e9c0 <_fwalk_sglue+0x38>
 800e9b8:	4629      	mov	r1, r5
 800e9ba:	4638      	mov	r0, r7
 800e9bc:	47c0      	blx	r8
 800e9be:	4306      	orrs	r6, r0
 800e9c0:	3568      	adds	r5, #104	@ 0x68
 800e9c2:	e7e9      	b.n	800e998 <_fwalk_sglue+0x10>

0800e9c4 <__sread>:
 800e9c4:	b510      	push	{r4, lr}
 800e9c6:	460c      	mov	r4, r1
 800e9c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e9cc:	f000 f928 	bl	800ec20 <_read_r>
 800e9d0:	2800      	cmp	r0, #0
 800e9d2:	bfab      	itete	ge
 800e9d4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800e9d6:	89a3      	ldrhlt	r3, [r4, #12]
 800e9d8:	181b      	addge	r3, r3, r0
 800e9da:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800e9de:	bfac      	ite	ge
 800e9e0:	6563      	strge	r3, [r4, #84]	@ 0x54
 800e9e2:	81a3      	strhlt	r3, [r4, #12]
 800e9e4:	bd10      	pop	{r4, pc}

0800e9e6 <__swrite>:
 800e9e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e9ea:	461f      	mov	r7, r3
 800e9ec:	898b      	ldrh	r3, [r1, #12]
 800e9ee:	05db      	lsls	r3, r3, #23
 800e9f0:	4605      	mov	r5, r0
 800e9f2:	460c      	mov	r4, r1
 800e9f4:	4616      	mov	r6, r2
 800e9f6:	d505      	bpl.n	800ea04 <__swrite+0x1e>
 800e9f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e9fc:	2302      	movs	r3, #2
 800e9fe:	2200      	movs	r2, #0
 800ea00:	f000 f8fc 	bl	800ebfc <_lseek_r>
 800ea04:	89a3      	ldrh	r3, [r4, #12]
 800ea06:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ea0a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ea0e:	81a3      	strh	r3, [r4, #12]
 800ea10:	4632      	mov	r2, r6
 800ea12:	463b      	mov	r3, r7
 800ea14:	4628      	mov	r0, r5
 800ea16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ea1a:	f000 b913 	b.w	800ec44 <_write_r>

0800ea1e <__sseek>:
 800ea1e:	b510      	push	{r4, lr}
 800ea20:	460c      	mov	r4, r1
 800ea22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ea26:	f000 f8e9 	bl	800ebfc <_lseek_r>
 800ea2a:	1c43      	adds	r3, r0, #1
 800ea2c:	89a3      	ldrh	r3, [r4, #12]
 800ea2e:	bf15      	itete	ne
 800ea30:	6560      	strne	r0, [r4, #84]	@ 0x54
 800ea32:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800ea36:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800ea3a:	81a3      	strheq	r3, [r4, #12]
 800ea3c:	bf18      	it	ne
 800ea3e:	81a3      	strhne	r3, [r4, #12]
 800ea40:	bd10      	pop	{r4, pc}

0800ea42 <__sclose>:
 800ea42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ea46:	f000 b86b 	b.w	800eb20 <_close_r>

0800ea4a <_vsniprintf_r>:
 800ea4a:	b530      	push	{r4, r5, lr}
 800ea4c:	4614      	mov	r4, r2
 800ea4e:	2c00      	cmp	r4, #0
 800ea50:	b09b      	sub	sp, #108	@ 0x6c
 800ea52:	4605      	mov	r5, r0
 800ea54:	461a      	mov	r2, r3
 800ea56:	da05      	bge.n	800ea64 <_vsniprintf_r+0x1a>
 800ea58:	238b      	movs	r3, #139	@ 0x8b
 800ea5a:	6003      	str	r3, [r0, #0]
 800ea5c:	f04f 30ff 	mov.w	r0, #4294967295
 800ea60:	b01b      	add	sp, #108	@ 0x6c
 800ea62:	bd30      	pop	{r4, r5, pc}
 800ea64:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800ea68:	f8ad 300c 	strh.w	r3, [sp, #12]
 800ea6c:	f04f 0300 	mov.w	r3, #0
 800ea70:	9319      	str	r3, [sp, #100]	@ 0x64
 800ea72:	bf14      	ite	ne
 800ea74:	f104 33ff 	addne.w	r3, r4, #4294967295
 800ea78:	4623      	moveq	r3, r4
 800ea7a:	9302      	str	r3, [sp, #8]
 800ea7c:	9305      	str	r3, [sp, #20]
 800ea7e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800ea82:	9100      	str	r1, [sp, #0]
 800ea84:	9104      	str	r1, [sp, #16]
 800ea86:	f8ad 300e 	strh.w	r3, [sp, #14]
 800ea8a:	4669      	mov	r1, sp
 800ea8c:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800ea8e:	f001 fa85 	bl	800ff9c <_svfiprintf_r>
 800ea92:	1c43      	adds	r3, r0, #1
 800ea94:	bfbc      	itt	lt
 800ea96:	238b      	movlt	r3, #139	@ 0x8b
 800ea98:	602b      	strlt	r3, [r5, #0]
 800ea9a:	2c00      	cmp	r4, #0
 800ea9c:	d0e0      	beq.n	800ea60 <_vsniprintf_r+0x16>
 800ea9e:	9b00      	ldr	r3, [sp, #0]
 800eaa0:	2200      	movs	r2, #0
 800eaa2:	701a      	strb	r2, [r3, #0]
 800eaa4:	e7dc      	b.n	800ea60 <_vsniprintf_r+0x16>
	...

0800eaa8 <vsniprintf>:
 800eaa8:	b507      	push	{r0, r1, r2, lr}
 800eaaa:	9300      	str	r3, [sp, #0]
 800eaac:	4613      	mov	r3, r2
 800eaae:	460a      	mov	r2, r1
 800eab0:	4601      	mov	r1, r0
 800eab2:	4803      	ldr	r0, [pc, #12]	@ (800eac0 <vsniprintf+0x18>)
 800eab4:	6800      	ldr	r0, [r0, #0]
 800eab6:	f7ff ffc8 	bl	800ea4a <_vsniprintf_r>
 800eaba:	b003      	add	sp, #12
 800eabc:	f85d fb04 	ldr.w	pc, [sp], #4
 800eac0:	200001ac 	.word	0x200001ac

0800eac4 <memset>:
 800eac4:	4402      	add	r2, r0
 800eac6:	4603      	mov	r3, r0
 800eac8:	4293      	cmp	r3, r2
 800eaca:	d100      	bne.n	800eace <memset+0xa>
 800eacc:	4770      	bx	lr
 800eace:	f803 1b01 	strb.w	r1, [r3], #1
 800ead2:	e7f9      	b.n	800eac8 <memset+0x4>

0800ead4 <strncmp>:
 800ead4:	b510      	push	{r4, lr}
 800ead6:	b16a      	cbz	r2, 800eaf4 <strncmp+0x20>
 800ead8:	3901      	subs	r1, #1
 800eada:	1884      	adds	r4, r0, r2
 800eadc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800eae0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800eae4:	429a      	cmp	r2, r3
 800eae6:	d103      	bne.n	800eaf0 <strncmp+0x1c>
 800eae8:	42a0      	cmp	r0, r4
 800eaea:	d001      	beq.n	800eaf0 <strncmp+0x1c>
 800eaec:	2a00      	cmp	r2, #0
 800eaee:	d1f5      	bne.n	800eadc <strncmp+0x8>
 800eaf0:	1ad0      	subs	r0, r2, r3
 800eaf2:	bd10      	pop	{r4, pc}
 800eaf4:	4610      	mov	r0, r2
 800eaf6:	e7fc      	b.n	800eaf2 <strncmp+0x1e>

0800eaf8 <strncpy>:
 800eaf8:	b510      	push	{r4, lr}
 800eafa:	3901      	subs	r1, #1
 800eafc:	4603      	mov	r3, r0
 800eafe:	b132      	cbz	r2, 800eb0e <strncpy+0x16>
 800eb00:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800eb04:	f803 4b01 	strb.w	r4, [r3], #1
 800eb08:	3a01      	subs	r2, #1
 800eb0a:	2c00      	cmp	r4, #0
 800eb0c:	d1f7      	bne.n	800eafe <strncpy+0x6>
 800eb0e:	441a      	add	r2, r3
 800eb10:	2100      	movs	r1, #0
 800eb12:	4293      	cmp	r3, r2
 800eb14:	d100      	bne.n	800eb18 <strncpy+0x20>
 800eb16:	bd10      	pop	{r4, pc}
 800eb18:	f803 1b01 	strb.w	r1, [r3], #1
 800eb1c:	e7f9      	b.n	800eb12 <strncpy+0x1a>
	...

0800eb20 <_close_r>:
 800eb20:	b538      	push	{r3, r4, r5, lr}
 800eb22:	4d06      	ldr	r5, [pc, #24]	@ (800eb3c <_close_r+0x1c>)
 800eb24:	2300      	movs	r3, #0
 800eb26:	4604      	mov	r4, r0
 800eb28:	4608      	mov	r0, r1
 800eb2a:	602b      	str	r3, [r5, #0]
 800eb2c:	f7f3 fd84 	bl	8002638 <_close>
 800eb30:	1c43      	adds	r3, r0, #1
 800eb32:	d102      	bne.n	800eb3a <_close_r+0x1a>
 800eb34:	682b      	ldr	r3, [r5, #0]
 800eb36:	b103      	cbz	r3, 800eb3a <_close_r+0x1a>
 800eb38:	6023      	str	r3, [r4, #0]
 800eb3a:	bd38      	pop	{r3, r4, r5, pc}
 800eb3c:	2000409c 	.word	0x2000409c

0800eb40 <_reclaim_reent>:
 800eb40:	4b2d      	ldr	r3, [pc, #180]	@ (800ebf8 <_reclaim_reent+0xb8>)
 800eb42:	681b      	ldr	r3, [r3, #0]
 800eb44:	4283      	cmp	r3, r0
 800eb46:	b570      	push	{r4, r5, r6, lr}
 800eb48:	4604      	mov	r4, r0
 800eb4a:	d053      	beq.n	800ebf4 <_reclaim_reent+0xb4>
 800eb4c:	69c3      	ldr	r3, [r0, #28]
 800eb4e:	b31b      	cbz	r3, 800eb98 <_reclaim_reent+0x58>
 800eb50:	68db      	ldr	r3, [r3, #12]
 800eb52:	b163      	cbz	r3, 800eb6e <_reclaim_reent+0x2e>
 800eb54:	2500      	movs	r5, #0
 800eb56:	69e3      	ldr	r3, [r4, #28]
 800eb58:	68db      	ldr	r3, [r3, #12]
 800eb5a:	5959      	ldr	r1, [r3, r5]
 800eb5c:	b9b1      	cbnz	r1, 800eb8c <_reclaim_reent+0x4c>
 800eb5e:	3504      	adds	r5, #4
 800eb60:	2d80      	cmp	r5, #128	@ 0x80
 800eb62:	d1f8      	bne.n	800eb56 <_reclaim_reent+0x16>
 800eb64:	69e3      	ldr	r3, [r4, #28]
 800eb66:	4620      	mov	r0, r4
 800eb68:	68d9      	ldr	r1, [r3, #12]
 800eb6a:	f000 f8c1 	bl	800ecf0 <_free_r>
 800eb6e:	69e3      	ldr	r3, [r4, #28]
 800eb70:	6819      	ldr	r1, [r3, #0]
 800eb72:	b111      	cbz	r1, 800eb7a <_reclaim_reent+0x3a>
 800eb74:	4620      	mov	r0, r4
 800eb76:	f000 f8bb 	bl	800ecf0 <_free_r>
 800eb7a:	69e3      	ldr	r3, [r4, #28]
 800eb7c:	689d      	ldr	r5, [r3, #8]
 800eb7e:	b15d      	cbz	r5, 800eb98 <_reclaim_reent+0x58>
 800eb80:	4629      	mov	r1, r5
 800eb82:	4620      	mov	r0, r4
 800eb84:	682d      	ldr	r5, [r5, #0]
 800eb86:	f000 f8b3 	bl	800ecf0 <_free_r>
 800eb8a:	e7f8      	b.n	800eb7e <_reclaim_reent+0x3e>
 800eb8c:	680e      	ldr	r6, [r1, #0]
 800eb8e:	4620      	mov	r0, r4
 800eb90:	f000 f8ae 	bl	800ecf0 <_free_r>
 800eb94:	4631      	mov	r1, r6
 800eb96:	e7e1      	b.n	800eb5c <_reclaim_reent+0x1c>
 800eb98:	6961      	ldr	r1, [r4, #20]
 800eb9a:	b111      	cbz	r1, 800eba2 <_reclaim_reent+0x62>
 800eb9c:	4620      	mov	r0, r4
 800eb9e:	f000 f8a7 	bl	800ecf0 <_free_r>
 800eba2:	69e1      	ldr	r1, [r4, #28]
 800eba4:	b111      	cbz	r1, 800ebac <_reclaim_reent+0x6c>
 800eba6:	4620      	mov	r0, r4
 800eba8:	f000 f8a2 	bl	800ecf0 <_free_r>
 800ebac:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800ebae:	b111      	cbz	r1, 800ebb6 <_reclaim_reent+0x76>
 800ebb0:	4620      	mov	r0, r4
 800ebb2:	f000 f89d 	bl	800ecf0 <_free_r>
 800ebb6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ebb8:	b111      	cbz	r1, 800ebc0 <_reclaim_reent+0x80>
 800ebba:	4620      	mov	r0, r4
 800ebbc:	f000 f898 	bl	800ecf0 <_free_r>
 800ebc0:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800ebc2:	b111      	cbz	r1, 800ebca <_reclaim_reent+0x8a>
 800ebc4:	4620      	mov	r0, r4
 800ebc6:	f000 f893 	bl	800ecf0 <_free_r>
 800ebca:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800ebcc:	b111      	cbz	r1, 800ebd4 <_reclaim_reent+0x94>
 800ebce:	4620      	mov	r0, r4
 800ebd0:	f000 f88e 	bl	800ecf0 <_free_r>
 800ebd4:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800ebd6:	b111      	cbz	r1, 800ebde <_reclaim_reent+0x9e>
 800ebd8:	4620      	mov	r0, r4
 800ebda:	f000 f889 	bl	800ecf0 <_free_r>
 800ebde:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800ebe0:	b111      	cbz	r1, 800ebe8 <_reclaim_reent+0xa8>
 800ebe2:	4620      	mov	r0, r4
 800ebe4:	f000 f884 	bl	800ecf0 <_free_r>
 800ebe8:	6a23      	ldr	r3, [r4, #32]
 800ebea:	b11b      	cbz	r3, 800ebf4 <_reclaim_reent+0xb4>
 800ebec:	4620      	mov	r0, r4
 800ebee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ebf2:	4718      	bx	r3
 800ebf4:	bd70      	pop	{r4, r5, r6, pc}
 800ebf6:	bf00      	nop
 800ebf8:	200001ac 	.word	0x200001ac

0800ebfc <_lseek_r>:
 800ebfc:	b538      	push	{r3, r4, r5, lr}
 800ebfe:	4d07      	ldr	r5, [pc, #28]	@ (800ec1c <_lseek_r+0x20>)
 800ec00:	4604      	mov	r4, r0
 800ec02:	4608      	mov	r0, r1
 800ec04:	4611      	mov	r1, r2
 800ec06:	2200      	movs	r2, #0
 800ec08:	602a      	str	r2, [r5, #0]
 800ec0a:	461a      	mov	r2, r3
 800ec0c:	f7f3 fd3b 	bl	8002686 <_lseek>
 800ec10:	1c43      	adds	r3, r0, #1
 800ec12:	d102      	bne.n	800ec1a <_lseek_r+0x1e>
 800ec14:	682b      	ldr	r3, [r5, #0]
 800ec16:	b103      	cbz	r3, 800ec1a <_lseek_r+0x1e>
 800ec18:	6023      	str	r3, [r4, #0]
 800ec1a:	bd38      	pop	{r3, r4, r5, pc}
 800ec1c:	2000409c 	.word	0x2000409c

0800ec20 <_read_r>:
 800ec20:	b538      	push	{r3, r4, r5, lr}
 800ec22:	4d07      	ldr	r5, [pc, #28]	@ (800ec40 <_read_r+0x20>)
 800ec24:	4604      	mov	r4, r0
 800ec26:	4608      	mov	r0, r1
 800ec28:	4611      	mov	r1, r2
 800ec2a:	2200      	movs	r2, #0
 800ec2c:	602a      	str	r2, [r5, #0]
 800ec2e:	461a      	mov	r2, r3
 800ec30:	f7f3 fcc9 	bl	80025c6 <_read>
 800ec34:	1c43      	adds	r3, r0, #1
 800ec36:	d102      	bne.n	800ec3e <_read_r+0x1e>
 800ec38:	682b      	ldr	r3, [r5, #0]
 800ec3a:	b103      	cbz	r3, 800ec3e <_read_r+0x1e>
 800ec3c:	6023      	str	r3, [r4, #0]
 800ec3e:	bd38      	pop	{r3, r4, r5, pc}
 800ec40:	2000409c 	.word	0x2000409c

0800ec44 <_write_r>:
 800ec44:	b538      	push	{r3, r4, r5, lr}
 800ec46:	4d07      	ldr	r5, [pc, #28]	@ (800ec64 <_write_r+0x20>)
 800ec48:	4604      	mov	r4, r0
 800ec4a:	4608      	mov	r0, r1
 800ec4c:	4611      	mov	r1, r2
 800ec4e:	2200      	movs	r2, #0
 800ec50:	602a      	str	r2, [r5, #0]
 800ec52:	461a      	mov	r2, r3
 800ec54:	f7f3 fcd4 	bl	8002600 <_write>
 800ec58:	1c43      	adds	r3, r0, #1
 800ec5a:	d102      	bne.n	800ec62 <_write_r+0x1e>
 800ec5c:	682b      	ldr	r3, [r5, #0]
 800ec5e:	b103      	cbz	r3, 800ec62 <_write_r+0x1e>
 800ec60:	6023      	str	r3, [r4, #0]
 800ec62:	bd38      	pop	{r3, r4, r5, pc}
 800ec64:	2000409c 	.word	0x2000409c

0800ec68 <__errno>:
 800ec68:	4b01      	ldr	r3, [pc, #4]	@ (800ec70 <__errno+0x8>)
 800ec6a:	6818      	ldr	r0, [r3, #0]
 800ec6c:	4770      	bx	lr
 800ec6e:	bf00      	nop
 800ec70:	200001ac 	.word	0x200001ac

0800ec74 <__libc_init_array>:
 800ec74:	b570      	push	{r4, r5, r6, lr}
 800ec76:	4d0d      	ldr	r5, [pc, #52]	@ (800ecac <__libc_init_array+0x38>)
 800ec78:	4c0d      	ldr	r4, [pc, #52]	@ (800ecb0 <__libc_init_array+0x3c>)
 800ec7a:	1b64      	subs	r4, r4, r5
 800ec7c:	10a4      	asrs	r4, r4, #2
 800ec7e:	2600      	movs	r6, #0
 800ec80:	42a6      	cmp	r6, r4
 800ec82:	d109      	bne.n	800ec98 <__libc_init_array+0x24>
 800ec84:	4d0b      	ldr	r5, [pc, #44]	@ (800ecb4 <__libc_init_array+0x40>)
 800ec86:	4c0c      	ldr	r4, [pc, #48]	@ (800ecb8 <__libc_init_array+0x44>)
 800ec88:	f002 f90e 	bl	8010ea8 <_init>
 800ec8c:	1b64      	subs	r4, r4, r5
 800ec8e:	10a4      	asrs	r4, r4, #2
 800ec90:	2600      	movs	r6, #0
 800ec92:	42a6      	cmp	r6, r4
 800ec94:	d105      	bne.n	800eca2 <__libc_init_array+0x2e>
 800ec96:	bd70      	pop	{r4, r5, r6, pc}
 800ec98:	f855 3b04 	ldr.w	r3, [r5], #4
 800ec9c:	4798      	blx	r3
 800ec9e:	3601      	adds	r6, #1
 800eca0:	e7ee      	b.n	800ec80 <__libc_init_array+0xc>
 800eca2:	f855 3b04 	ldr.w	r3, [r5], #4
 800eca6:	4798      	blx	r3
 800eca8:	3601      	adds	r6, #1
 800ecaa:	e7f2      	b.n	800ec92 <__libc_init_array+0x1e>
 800ecac:	080114b8 	.word	0x080114b8
 800ecb0:	080114b8 	.word	0x080114b8
 800ecb4:	080114b8 	.word	0x080114b8
 800ecb8:	080114bc 	.word	0x080114bc

0800ecbc <__retarget_lock_init_recursive>:
 800ecbc:	4770      	bx	lr

0800ecbe <__retarget_lock_acquire_recursive>:
 800ecbe:	4770      	bx	lr

0800ecc0 <__retarget_lock_release_recursive>:
 800ecc0:	4770      	bx	lr

0800ecc2 <memcpy>:
 800ecc2:	440a      	add	r2, r1
 800ecc4:	4291      	cmp	r1, r2
 800ecc6:	f100 33ff 	add.w	r3, r0, #4294967295
 800ecca:	d100      	bne.n	800ecce <memcpy+0xc>
 800eccc:	4770      	bx	lr
 800ecce:	b510      	push	{r4, lr}
 800ecd0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ecd4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ecd8:	4291      	cmp	r1, r2
 800ecda:	d1f9      	bne.n	800ecd0 <memcpy+0xe>
 800ecdc:	bd10      	pop	{r4, pc}
	...

0800ece0 <nan>:
 800ece0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800ece8 <nan+0x8>
 800ece4:	4770      	bx	lr
 800ece6:	bf00      	nop
 800ece8:	00000000 	.word	0x00000000
 800ecec:	7ff80000 	.word	0x7ff80000

0800ecf0 <_free_r>:
 800ecf0:	b538      	push	{r3, r4, r5, lr}
 800ecf2:	4605      	mov	r5, r0
 800ecf4:	2900      	cmp	r1, #0
 800ecf6:	d041      	beq.n	800ed7c <_free_r+0x8c>
 800ecf8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ecfc:	1f0c      	subs	r4, r1, #4
 800ecfe:	2b00      	cmp	r3, #0
 800ed00:	bfb8      	it	lt
 800ed02:	18e4      	addlt	r4, r4, r3
 800ed04:	f000 fc2c 	bl	800f560 <__malloc_lock>
 800ed08:	4a1d      	ldr	r2, [pc, #116]	@ (800ed80 <_free_r+0x90>)
 800ed0a:	6813      	ldr	r3, [r2, #0]
 800ed0c:	b933      	cbnz	r3, 800ed1c <_free_r+0x2c>
 800ed0e:	6063      	str	r3, [r4, #4]
 800ed10:	6014      	str	r4, [r2, #0]
 800ed12:	4628      	mov	r0, r5
 800ed14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ed18:	f000 bc28 	b.w	800f56c <__malloc_unlock>
 800ed1c:	42a3      	cmp	r3, r4
 800ed1e:	d908      	bls.n	800ed32 <_free_r+0x42>
 800ed20:	6820      	ldr	r0, [r4, #0]
 800ed22:	1821      	adds	r1, r4, r0
 800ed24:	428b      	cmp	r3, r1
 800ed26:	bf01      	itttt	eq
 800ed28:	6819      	ldreq	r1, [r3, #0]
 800ed2a:	685b      	ldreq	r3, [r3, #4]
 800ed2c:	1809      	addeq	r1, r1, r0
 800ed2e:	6021      	streq	r1, [r4, #0]
 800ed30:	e7ed      	b.n	800ed0e <_free_r+0x1e>
 800ed32:	461a      	mov	r2, r3
 800ed34:	685b      	ldr	r3, [r3, #4]
 800ed36:	b10b      	cbz	r3, 800ed3c <_free_r+0x4c>
 800ed38:	42a3      	cmp	r3, r4
 800ed3a:	d9fa      	bls.n	800ed32 <_free_r+0x42>
 800ed3c:	6811      	ldr	r1, [r2, #0]
 800ed3e:	1850      	adds	r0, r2, r1
 800ed40:	42a0      	cmp	r0, r4
 800ed42:	d10b      	bne.n	800ed5c <_free_r+0x6c>
 800ed44:	6820      	ldr	r0, [r4, #0]
 800ed46:	4401      	add	r1, r0
 800ed48:	1850      	adds	r0, r2, r1
 800ed4a:	4283      	cmp	r3, r0
 800ed4c:	6011      	str	r1, [r2, #0]
 800ed4e:	d1e0      	bne.n	800ed12 <_free_r+0x22>
 800ed50:	6818      	ldr	r0, [r3, #0]
 800ed52:	685b      	ldr	r3, [r3, #4]
 800ed54:	6053      	str	r3, [r2, #4]
 800ed56:	4408      	add	r0, r1
 800ed58:	6010      	str	r0, [r2, #0]
 800ed5a:	e7da      	b.n	800ed12 <_free_r+0x22>
 800ed5c:	d902      	bls.n	800ed64 <_free_r+0x74>
 800ed5e:	230c      	movs	r3, #12
 800ed60:	602b      	str	r3, [r5, #0]
 800ed62:	e7d6      	b.n	800ed12 <_free_r+0x22>
 800ed64:	6820      	ldr	r0, [r4, #0]
 800ed66:	1821      	adds	r1, r4, r0
 800ed68:	428b      	cmp	r3, r1
 800ed6a:	bf04      	itt	eq
 800ed6c:	6819      	ldreq	r1, [r3, #0]
 800ed6e:	685b      	ldreq	r3, [r3, #4]
 800ed70:	6063      	str	r3, [r4, #4]
 800ed72:	bf04      	itt	eq
 800ed74:	1809      	addeq	r1, r1, r0
 800ed76:	6021      	streq	r1, [r4, #0]
 800ed78:	6054      	str	r4, [r2, #4]
 800ed7a:	e7ca      	b.n	800ed12 <_free_r+0x22>
 800ed7c:	bd38      	pop	{r3, r4, r5, pc}
 800ed7e:	bf00      	nop
 800ed80:	200040a8 	.word	0x200040a8

0800ed84 <rshift>:
 800ed84:	6903      	ldr	r3, [r0, #16]
 800ed86:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ed8a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ed8e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800ed92:	f100 0414 	add.w	r4, r0, #20
 800ed96:	dd45      	ble.n	800ee24 <rshift+0xa0>
 800ed98:	f011 011f 	ands.w	r1, r1, #31
 800ed9c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800eda0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800eda4:	d10c      	bne.n	800edc0 <rshift+0x3c>
 800eda6:	f100 0710 	add.w	r7, r0, #16
 800edaa:	4629      	mov	r1, r5
 800edac:	42b1      	cmp	r1, r6
 800edae:	d334      	bcc.n	800ee1a <rshift+0x96>
 800edb0:	1a9b      	subs	r3, r3, r2
 800edb2:	009b      	lsls	r3, r3, #2
 800edb4:	1eea      	subs	r2, r5, #3
 800edb6:	4296      	cmp	r6, r2
 800edb8:	bf38      	it	cc
 800edba:	2300      	movcc	r3, #0
 800edbc:	4423      	add	r3, r4
 800edbe:	e015      	b.n	800edec <rshift+0x68>
 800edc0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800edc4:	f1c1 0820 	rsb	r8, r1, #32
 800edc8:	40cf      	lsrs	r7, r1
 800edca:	f105 0e04 	add.w	lr, r5, #4
 800edce:	46a1      	mov	r9, r4
 800edd0:	4576      	cmp	r6, lr
 800edd2:	46f4      	mov	ip, lr
 800edd4:	d815      	bhi.n	800ee02 <rshift+0x7e>
 800edd6:	1a9a      	subs	r2, r3, r2
 800edd8:	0092      	lsls	r2, r2, #2
 800edda:	3a04      	subs	r2, #4
 800eddc:	3501      	adds	r5, #1
 800edde:	42ae      	cmp	r6, r5
 800ede0:	bf38      	it	cc
 800ede2:	2200      	movcc	r2, #0
 800ede4:	18a3      	adds	r3, r4, r2
 800ede6:	50a7      	str	r7, [r4, r2]
 800ede8:	b107      	cbz	r7, 800edec <rshift+0x68>
 800edea:	3304      	adds	r3, #4
 800edec:	1b1a      	subs	r2, r3, r4
 800edee:	42a3      	cmp	r3, r4
 800edf0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800edf4:	bf08      	it	eq
 800edf6:	2300      	moveq	r3, #0
 800edf8:	6102      	str	r2, [r0, #16]
 800edfa:	bf08      	it	eq
 800edfc:	6143      	streq	r3, [r0, #20]
 800edfe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ee02:	f8dc c000 	ldr.w	ip, [ip]
 800ee06:	fa0c fc08 	lsl.w	ip, ip, r8
 800ee0a:	ea4c 0707 	orr.w	r7, ip, r7
 800ee0e:	f849 7b04 	str.w	r7, [r9], #4
 800ee12:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ee16:	40cf      	lsrs	r7, r1
 800ee18:	e7da      	b.n	800edd0 <rshift+0x4c>
 800ee1a:	f851 cb04 	ldr.w	ip, [r1], #4
 800ee1e:	f847 cf04 	str.w	ip, [r7, #4]!
 800ee22:	e7c3      	b.n	800edac <rshift+0x28>
 800ee24:	4623      	mov	r3, r4
 800ee26:	e7e1      	b.n	800edec <rshift+0x68>

0800ee28 <__hexdig_fun>:
 800ee28:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800ee2c:	2b09      	cmp	r3, #9
 800ee2e:	d802      	bhi.n	800ee36 <__hexdig_fun+0xe>
 800ee30:	3820      	subs	r0, #32
 800ee32:	b2c0      	uxtb	r0, r0
 800ee34:	4770      	bx	lr
 800ee36:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800ee3a:	2b05      	cmp	r3, #5
 800ee3c:	d801      	bhi.n	800ee42 <__hexdig_fun+0x1a>
 800ee3e:	3847      	subs	r0, #71	@ 0x47
 800ee40:	e7f7      	b.n	800ee32 <__hexdig_fun+0xa>
 800ee42:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800ee46:	2b05      	cmp	r3, #5
 800ee48:	d801      	bhi.n	800ee4e <__hexdig_fun+0x26>
 800ee4a:	3827      	subs	r0, #39	@ 0x27
 800ee4c:	e7f1      	b.n	800ee32 <__hexdig_fun+0xa>
 800ee4e:	2000      	movs	r0, #0
 800ee50:	4770      	bx	lr
	...

0800ee54 <__gethex>:
 800ee54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee58:	b085      	sub	sp, #20
 800ee5a:	468a      	mov	sl, r1
 800ee5c:	9302      	str	r3, [sp, #8]
 800ee5e:	680b      	ldr	r3, [r1, #0]
 800ee60:	9001      	str	r0, [sp, #4]
 800ee62:	4690      	mov	r8, r2
 800ee64:	1c9c      	adds	r4, r3, #2
 800ee66:	46a1      	mov	r9, r4
 800ee68:	f814 0b01 	ldrb.w	r0, [r4], #1
 800ee6c:	2830      	cmp	r0, #48	@ 0x30
 800ee6e:	d0fa      	beq.n	800ee66 <__gethex+0x12>
 800ee70:	eba9 0303 	sub.w	r3, r9, r3
 800ee74:	f1a3 0b02 	sub.w	fp, r3, #2
 800ee78:	f7ff ffd6 	bl	800ee28 <__hexdig_fun>
 800ee7c:	4605      	mov	r5, r0
 800ee7e:	2800      	cmp	r0, #0
 800ee80:	d168      	bne.n	800ef54 <__gethex+0x100>
 800ee82:	49a0      	ldr	r1, [pc, #640]	@ (800f104 <__gethex+0x2b0>)
 800ee84:	2201      	movs	r2, #1
 800ee86:	4648      	mov	r0, r9
 800ee88:	f7ff fe24 	bl	800ead4 <strncmp>
 800ee8c:	4607      	mov	r7, r0
 800ee8e:	2800      	cmp	r0, #0
 800ee90:	d167      	bne.n	800ef62 <__gethex+0x10e>
 800ee92:	f899 0001 	ldrb.w	r0, [r9, #1]
 800ee96:	4626      	mov	r6, r4
 800ee98:	f7ff ffc6 	bl	800ee28 <__hexdig_fun>
 800ee9c:	2800      	cmp	r0, #0
 800ee9e:	d062      	beq.n	800ef66 <__gethex+0x112>
 800eea0:	4623      	mov	r3, r4
 800eea2:	7818      	ldrb	r0, [r3, #0]
 800eea4:	2830      	cmp	r0, #48	@ 0x30
 800eea6:	4699      	mov	r9, r3
 800eea8:	f103 0301 	add.w	r3, r3, #1
 800eeac:	d0f9      	beq.n	800eea2 <__gethex+0x4e>
 800eeae:	f7ff ffbb 	bl	800ee28 <__hexdig_fun>
 800eeb2:	fab0 f580 	clz	r5, r0
 800eeb6:	096d      	lsrs	r5, r5, #5
 800eeb8:	f04f 0b01 	mov.w	fp, #1
 800eebc:	464a      	mov	r2, r9
 800eebe:	4616      	mov	r6, r2
 800eec0:	3201      	adds	r2, #1
 800eec2:	7830      	ldrb	r0, [r6, #0]
 800eec4:	f7ff ffb0 	bl	800ee28 <__hexdig_fun>
 800eec8:	2800      	cmp	r0, #0
 800eeca:	d1f8      	bne.n	800eebe <__gethex+0x6a>
 800eecc:	498d      	ldr	r1, [pc, #564]	@ (800f104 <__gethex+0x2b0>)
 800eece:	2201      	movs	r2, #1
 800eed0:	4630      	mov	r0, r6
 800eed2:	f7ff fdff 	bl	800ead4 <strncmp>
 800eed6:	2800      	cmp	r0, #0
 800eed8:	d13f      	bne.n	800ef5a <__gethex+0x106>
 800eeda:	b944      	cbnz	r4, 800eeee <__gethex+0x9a>
 800eedc:	1c74      	adds	r4, r6, #1
 800eede:	4622      	mov	r2, r4
 800eee0:	4616      	mov	r6, r2
 800eee2:	3201      	adds	r2, #1
 800eee4:	7830      	ldrb	r0, [r6, #0]
 800eee6:	f7ff ff9f 	bl	800ee28 <__hexdig_fun>
 800eeea:	2800      	cmp	r0, #0
 800eeec:	d1f8      	bne.n	800eee0 <__gethex+0x8c>
 800eeee:	1ba4      	subs	r4, r4, r6
 800eef0:	00a7      	lsls	r7, r4, #2
 800eef2:	7833      	ldrb	r3, [r6, #0]
 800eef4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800eef8:	2b50      	cmp	r3, #80	@ 0x50
 800eefa:	d13e      	bne.n	800ef7a <__gethex+0x126>
 800eefc:	7873      	ldrb	r3, [r6, #1]
 800eefe:	2b2b      	cmp	r3, #43	@ 0x2b
 800ef00:	d033      	beq.n	800ef6a <__gethex+0x116>
 800ef02:	2b2d      	cmp	r3, #45	@ 0x2d
 800ef04:	d034      	beq.n	800ef70 <__gethex+0x11c>
 800ef06:	1c71      	adds	r1, r6, #1
 800ef08:	2400      	movs	r4, #0
 800ef0a:	7808      	ldrb	r0, [r1, #0]
 800ef0c:	f7ff ff8c 	bl	800ee28 <__hexdig_fun>
 800ef10:	1e43      	subs	r3, r0, #1
 800ef12:	b2db      	uxtb	r3, r3
 800ef14:	2b18      	cmp	r3, #24
 800ef16:	d830      	bhi.n	800ef7a <__gethex+0x126>
 800ef18:	f1a0 0210 	sub.w	r2, r0, #16
 800ef1c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ef20:	f7ff ff82 	bl	800ee28 <__hexdig_fun>
 800ef24:	f100 3cff 	add.w	ip, r0, #4294967295
 800ef28:	fa5f fc8c 	uxtb.w	ip, ip
 800ef2c:	f1bc 0f18 	cmp.w	ip, #24
 800ef30:	f04f 030a 	mov.w	r3, #10
 800ef34:	d91e      	bls.n	800ef74 <__gethex+0x120>
 800ef36:	b104      	cbz	r4, 800ef3a <__gethex+0xe6>
 800ef38:	4252      	negs	r2, r2
 800ef3a:	4417      	add	r7, r2
 800ef3c:	f8ca 1000 	str.w	r1, [sl]
 800ef40:	b1ed      	cbz	r5, 800ef7e <__gethex+0x12a>
 800ef42:	f1bb 0f00 	cmp.w	fp, #0
 800ef46:	bf0c      	ite	eq
 800ef48:	2506      	moveq	r5, #6
 800ef4a:	2500      	movne	r5, #0
 800ef4c:	4628      	mov	r0, r5
 800ef4e:	b005      	add	sp, #20
 800ef50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef54:	2500      	movs	r5, #0
 800ef56:	462c      	mov	r4, r5
 800ef58:	e7b0      	b.n	800eebc <__gethex+0x68>
 800ef5a:	2c00      	cmp	r4, #0
 800ef5c:	d1c7      	bne.n	800eeee <__gethex+0x9a>
 800ef5e:	4627      	mov	r7, r4
 800ef60:	e7c7      	b.n	800eef2 <__gethex+0x9e>
 800ef62:	464e      	mov	r6, r9
 800ef64:	462f      	mov	r7, r5
 800ef66:	2501      	movs	r5, #1
 800ef68:	e7c3      	b.n	800eef2 <__gethex+0x9e>
 800ef6a:	2400      	movs	r4, #0
 800ef6c:	1cb1      	adds	r1, r6, #2
 800ef6e:	e7cc      	b.n	800ef0a <__gethex+0xb6>
 800ef70:	2401      	movs	r4, #1
 800ef72:	e7fb      	b.n	800ef6c <__gethex+0x118>
 800ef74:	fb03 0002 	mla	r0, r3, r2, r0
 800ef78:	e7ce      	b.n	800ef18 <__gethex+0xc4>
 800ef7a:	4631      	mov	r1, r6
 800ef7c:	e7de      	b.n	800ef3c <__gethex+0xe8>
 800ef7e:	eba6 0309 	sub.w	r3, r6, r9
 800ef82:	3b01      	subs	r3, #1
 800ef84:	4629      	mov	r1, r5
 800ef86:	2b07      	cmp	r3, #7
 800ef88:	dc0a      	bgt.n	800efa0 <__gethex+0x14c>
 800ef8a:	9801      	ldr	r0, [sp, #4]
 800ef8c:	f000 faf4 	bl	800f578 <_Balloc>
 800ef90:	4604      	mov	r4, r0
 800ef92:	b940      	cbnz	r0, 800efa6 <__gethex+0x152>
 800ef94:	4b5c      	ldr	r3, [pc, #368]	@ (800f108 <__gethex+0x2b4>)
 800ef96:	4602      	mov	r2, r0
 800ef98:	21e4      	movs	r1, #228	@ 0xe4
 800ef9a:	485c      	ldr	r0, [pc, #368]	@ (800f10c <__gethex+0x2b8>)
 800ef9c:	f001 fb5c 	bl	8010658 <__assert_func>
 800efa0:	3101      	adds	r1, #1
 800efa2:	105b      	asrs	r3, r3, #1
 800efa4:	e7ef      	b.n	800ef86 <__gethex+0x132>
 800efa6:	f100 0a14 	add.w	sl, r0, #20
 800efaa:	2300      	movs	r3, #0
 800efac:	4655      	mov	r5, sl
 800efae:	469b      	mov	fp, r3
 800efb0:	45b1      	cmp	r9, r6
 800efb2:	d337      	bcc.n	800f024 <__gethex+0x1d0>
 800efb4:	f845 bb04 	str.w	fp, [r5], #4
 800efb8:	eba5 050a 	sub.w	r5, r5, sl
 800efbc:	10ad      	asrs	r5, r5, #2
 800efbe:	6125      	str	r5, [r4, #16]
 800efc0:	4658      	mov	r0, fp
 800efc2:	f000 fbcb 	bl	800f75c <__hi0bits>
 800efc6:	016d      	lsls	r5, r5, #5
 800efc8:	f8d8 6000 	ldr.w	r6, [r8]
 800efcc:	1a2d      	subs	r5, r5, r0
 800efce:	42b5      	cmp	r5, r6
 800efd0:	dd54      	ble.n	800f07c <__gethex+0x228>
 800efd2:	1bad      	subs	r5, r5, r6
 800efd4:	4629      	mov	r1, r5
 800efd6:	4620      	mov	r0, r4
 800efd8:	f000 ff57 	bl	800fe8a <__any_on>
 800efdc:	4681      	mov	r9, r0
 800efde:	b178      	cbz	r0, 800f000 <__gethex+0x1ac>
 800efe0:	1e6b      	subs	r3, r5, #1
 800efe2:	1159      	asrs	r1, r3, #5
 800efe4:	f003 021f 	and.w	r2, r3, #31
 800efe8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800efec:	f04f 0901 	mov.w	r9, #1
 800eff0:	fa09 f202 	lsl.w	r2, r9, r2
 800eff4:	420a      	tst	r2, r1
 800eff6:	d003      	beq.n	800f000 <__gethex+0x1ac>
 800eff8:	454b      	cmp	r3, r9
 800effa:	dc36      	bgt.n	800f06a <__gethex+0x216>
 800effc:	f04f 0902 	mov.w	r9, #2
 800f000:	4629      	mov	r1, r5
 800f002:	4620      	mov	r0, r4
 800f004:	f7ff febe 	bl	800ed84 <rshift>
 800f008:	442f      	add	r7, r5
 800f00a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f00e:	42bb      	cmp	r3, r7
 800f010:	da42      	bge.n	800f098 <__gethex+0x244>
 800f012:	9801      	ldr	r0, [sp, #4]
 800f014:	4621      	mov	r1, r4
 800f016:	f000 faef 	bl	800f5f8 <_Bfree>
 800f01a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f01c:	2300      	movs	r3, #0
 800f01e:	6013      	str	r3, [r2, #0]
 800f020:	25a3      	movs	r5, #163	@ 0xa3
 800f022:	e793      	b.n	800ef4c <__gethex+0xf8>
 800f024:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800f028:	2a2e      	cmp	r2, #46	@ 0x2e
 800f02a:	d012      	beq.n	800f052 <__gethex+0x1fe>
 800f02c:	2b20      	cmp	r3, #32
 800f02e:	d104      	bne.n	800f03a <__gethex+0x1e6>
 800f030:	f845 bb04 	str.w	fp, [r5], #4
 800f034:	f04f 0b00 	mov.w	fp, #0
 800f038:	465b      	mov	r3, fp
 800f03a:	7830      	ldrb	r0, [r6, #0]
 800f03c:	9303      	str	r3, [sp, #12]
 800f03e:	f7ff fef3 	bl	800ee28 <__hexdig_fun>
 800f042:	9b03      	ldr	r3, [sp, #12]
 800f044:	f000 000f 	and.w	r0, r0, #15
 800f048:	4098      	lsls	r0, r3
 800f04a:	ea4b 0b00 	orr.w	fp, fp, r0
 800f04e:	3304      	adds	r3, #4
 800f050:	e7ae      	b.n	800efb0 <__gethex+0x15c>
 800f052:	45b1      	cmp	r9, r6
 800f054:	d8ea      	bhi.n	800f02c <__gethex+0x1d8>
 800f056:	492b      	ldr	r1, [pc, #172]	@ (800f104 <__gethex+0x2b0>)
 800f058:	9303      	str	r3, [sp, #12]
 800f05a:	2201      	movs	r2, #1
 800f05c:	4630      	mov	r0, r6
 800f05e:	f7ff fd39 	bl	800ead4 <strncmp>
 800f062:	9b03      	ldr	r3, [sp, #12]
 800f064:	2800      	cmp	r0, #0
 800f066:	d1e1      	bne.n	800f02c <__gethex+0x1d8>
 800f068:	e7a2      	b.n	800efb0 <__gethex+0x15c>
 800f06a:	1ea9      	subs	r1, r5, #2
 800f06c:	4620      	mov	r0, r4
 800f06e:	f000 ff0c 	bl	800fe8a <__any_on>
 800f072:	2800      	cmp	r0, #0
 800f074:	d0c2      	beq.n	800effc <__gethex+0x1a8>
 800f076:	f04f 0903 	mov.w	r9, #3
 800f07a:	e7c1      	b.n	800f000 <__gethex+0x1ac>
 800f07c:	da09      	bge.n	800f092 <__gethex+0x23e>
 800f07e:	1b75      	subs	r5, r6, r5
 800f080:	4621      	mov	r1, r4
 800f082:	9801      	ldr	r0, [sp, #4]
 800f084:	462a      	mov	r2, r5
 800f086:	f000 fcc7 	bl	800fa18 <__lshift>
 800f08a:	1b7f      	subs	r7, r7, r5
 800f08c:	4604      	mov	r4, r0
 800f08e:	f100 0a14 	add.w	sl, r0, #20
 800f092:	f04f 0900 	mov.w	r9, #0
 800f096:	e7b8      	b.n	800f00a <__gethex+0x1b6>
 800f098:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800f09c:	42bd      	cmp	r5, r7
 800f09e:	dd6f      	ble.n	800f180 <__gethex+0x32c>
 800f0a0:	1bed      	subs	r5, r5, r7
 800f0a2:	42ae      	cmp	r6, r5
 800f0a4:	dc34      	bgt.n	800f110 <__gethex+0x2bc>
 800f0a6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f0aa:	2b02      	cmp	r3, #2
 800f0ac:	d022      	beq.n	800f0f4 <__gethex+0x2a0>
 800f0ae:	2b03      	cmp	r3, #3
 800f0b0:	d024      	beq.n	800f0fc <__gethex+0x2a8>
 800f0b2:	2b01      	cmp	r3, #1
 800f0b4:	d115      	bne.n	800f0e2 <__gethex+0x28e>
 800f0b6:	42ae      	cmp	r6, r5
 800f0b8:	d113      	bne.n	800f0e2 <__gethex+0x28e>
 800f0ba:	2e01      	cmp	r6, #1
 800f0bc:	d10b      	bne.n	800f0d6 <__gethex+0x282>
 800f0be:	9a02      	ldr	r2, [sp, #8]
 800f0c0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800f0c4:	6013      	str	r3, [r2, #0]
 800f0c6:	2301      	movs	r3, #1
 800f0c8:	6123      	str	r3, [r4, #16]
 800f0ca:	f8ca 3000 	str.w	r3, [sl]
 800f0ce:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f0d0:	2562      	movs	r5, #98	@ 0x62
 800f0d2:	601c      	str	r4, [r3, #0]
 800f0d4:	e73a      	b.n	800ef4c <__gethex+0xf8>
 800f0d6:	1e71      	subs	r1, r6, #1
 800f0d8:	4620      	mov	r0, r4
 800f0da:	f000 fed6 	bl	800fe8a <__any_on>
 800f0de:	2800      	cmp	r0, #0
 800f0e0:	d1ed      	bne.n	800f0be <__gethex+0x26a>
 800f0e2:	9801      	ldr	r0, [sp, #4]
 800f0e4:	4621      	mov	r1, r4
 800f0e6:	f000 fa87 	bl	800f5f8 <_Bfree>
 800f0ea:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f0ec:	2300      	movs	r3, #0
 800f0ee:	6013      	str	r3, [r2, #0]
 800f0f0:	2550      	movs	r5, #80	@ 0x50
 800f0f2:	e72b      	b.n	800ef4c <__gethex+0xf8>
 800f0f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f0f6:	2b00      	cmp	r3, #0
 800f0f8:	d1f3      	bne.n	800f0e2 <__gethex+0x28e>
 800f0fa:	e7e0      	b.n	800f0be <__gethex+0x26a>
 800f0fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f0fe:	2b00      	cmp	r3, #0
 800f100:	d1dd      	bne.n	800f0be <__gethex+0x26a>
 800f102:	e7ee      	b.n	800f0e2 <__gethex+0x28e>
 800f104:	080110e4 	.word	0x080110e4
 800f108:	080110fa 	.word	0x080110fa
 800f10c:	0801110b 	.word	0x0801110b
 800f110:	1e6f      	subs	r7, r5, #1
 800f112:	f1b9 0f00 	cmp.w	r9, #0
 800f116:	d130      	bne.n	800f17a <__gethex+0x326>
 800f118:	b127      	cbz	r7, 800f124 <__gethex+0x2d0>
 800f11a:	4639      	mov	r1, r7
 800f11c:	4620      	mov	r0, r4
 800f11e:	f000 feb4 	bl	800fe8a <__any_on>
 800f122:	4681      	mov	r9, r0
 800f124:	117a      	asrs	r2, r7, #5
 800f126:	2301      	movs	r3, #1
 800f128:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800f12c:	f007 071f 	and.w	r7, r7, #31
 800f130:	40bb      	lsls	r3, r7
 800f132:	4213      	tst	r3, r2
 800f134:	4629      	mov	r1, r5
 800f136:	4620      	mov	r0, r4
 800f138:	bf18      	it	ne
 800f13a:	f049 0902 	orrne.w	r9, r9, #2
 800f13e:	f7ff fe21 	bl	800ed84 <rshift>
 800f142:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800f146:	1b76      	subs	r6, r6, r5
 800f148:	2502      	movs	r5, #2
 800f14a:	f1b9 0f00 	cmp.w	r9, #0
 800f14e:	d047      	beq.n	800f1e0 <__gethex+0x38c>
 800f150:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f154:	2b02      	cmp	r3, #2
 800f156:	d015      	beq.n	800f184 <__gethex+0x330>
 800f158:	2b03      	cmp	r3, #3
 800f15a:	d017      	beq.n	800f18c <__gethex+0x338>
 800f15c:	2b01      	cmp	r3, #1
 800f15e:	d109      	bne.n	800f174 <__gethex+0x320>
 800f160:	f019 0f02 	tst.w	r9, #2
 800f164:	d006      	beq.n	800f174 <__gethex+0x320>
 800f166:	f8da 3000 	ldr.w	r3, [sl]
 800f16a:	ea49 0903 	orr.w	r9, r9, r3
 800f16e:	f019 0f01 	tst.w	r9, #1
 800f172:	d10e      	bne.n	800f192 <__gethex+0x33e>
 800f174:	f045 0510 	orr.w	r5, r5, #16
 800f178:	e032      	b.n	800f1e0 <__gethex+0x38c>
 800f17a:	f04f 0901 	mov.w	r9, #1
 800f17e:	e7d1      	b.n	800f124 <__gethex+0x2d0>
 800f180:	2501      	movs	r5, #1
 800f182:	e7e2      	b.n	800f14a <__gethex+0x2f6>
 800f184:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f186:	f1c3 0301 	rsb	r3, r3, #1
 800f18a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f18c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f18e:	2b00      	cmp	r3, #0
 800f190:	d0f0      	beq.n	800f174 <__gethex+0x320>
 800f192:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800f196:	f104 0314 	add.w	r3, r4, #20
 800f19a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800f19e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800f1a2:	f04f 0c00 	mov.w	ip, #0
 800f1a6:	4618      	mov	r0, r3
 800f1a8:	f853 2b04 	ldr.w	r2, [r3], #4
 800f1ac:	f1b2 3fff 	cmp.w	r2, #4294967295
 800f1b0:	d01b      	beq.n	800f1ea <__gethex+0x396>
 800f1b2:	3201      	adds	r2, #1
 800f1b4:	6002      	str	r2, [r0, #0]
 800f1b6:	2d02      	cmp	r5, #2
 800f1b8:	f104 0314 	add.w	r3, r4, #20
 800f1bc:	d13c      	bne.n	800f238 <__gethex+0x3e4>
 800f1be:	f8d8 2000 	ldr.w	r2, [r8]
 800f1c2:	3a01      	subs	r2, #1
 800f1c4:	42b2      	cmp	r2, r6
 800f1c6:	d109      	bne.n	800f1dc <__gethex+0x388>
 800f1c8:	1171      	asrs	r1, r6, #5
 800f1ca:	2201      	movs	r2, #1
 800f1cc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f1d0:	f006 061f 	and.w	r6, r6, #31
 800f1d4:	fa02 f606 	lsl.w	r6, r2, r6
 800f1d8:	421e      	tst	r6, r3
 800f1da:	d13a      	bne.n	800f252 <__gethex+0x3fe>
 800f1dc:	f045 0520 	orr.w	r5, r5, #32
 800f1e0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f1e2:	601c      	str	r4, [r3, #0]
 800f1e4:	9b02      	ldr	r3, [sp, #8]
 800f1e6:	601f      	str	r7, [r3, #0]
 800f1e8:	e6b0      	b.n	800ef4c <__gethex+0xf8>
 800f1ea:	4299      	cmp	r1, r3
 800f1ec:	f843 cc04 	str.w	ip, [r3, #-4]
 800f1f0:	d8d9      	bhi.n	800f1a6 <__gethex+0x352>
 800f1f2:	68a3      	ldr	r3, [r4, #8]
 800f1f4:	459b      	cmp	fp, r3
 800f1f6:	db17      	blt.n	800f228 <__gethex+0x3d4>
 800f1f8:	6861      	ldr	r1, [r4, #4]
 800f1fa:	9801      	ldr	r0, [sp, #4]
 800f1fc:	3101      	adds	r1, #1
 800f1fe:	f000 f9bb 	bl	800f578 <_Balloc>
 800f202:	4681      	mov	r9, r0
 800f204:	b918      	cbnz	r0, 800f20e <__gethex+0x3ba>
 800f206:	4b1a      	ldr	r3, [pc, #104]	@ (800f270 <__gethex+0x41c>)
 800f208:	4602      	mov	r2, r0
 800f20a:	2184      	movs	r1, #132	@ 0x84
 800f20c:	e6c5      	b.n	800ef9a <__gethex+0x146>
 800f20e:	6922      	ldr	r2, [r4, #16]
 800f210:	3202      	adds	r2, #2
 800f212:	f104 010c 	add.w	r1, r4, #12
 800f216:	0092      	lsls	r2, r2, #2
 800f218:	300c      	adds	r0, #12
 800f21a:	f7ff fd52 	bl	800ecc2 <memcpy>
 800f21e:	4621      	mov	r1, r4
 800f220:	9801      	ldr	r0, [sp, #4]
 800f222:	f000 f9e9 	bl	800f5f8 <_Bfree>
 800f226:	464c      	mov	r4, r9
 800f228:	6923      	ldr	r3, [r4, #16]
 800f22a:	1c5a      	adds	r2, r3, #1
 800f22c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f230:	6122      	str	r2, [r4, #16]
 800f232:	2201      	movs	r2, #1
 800f234:	615a      	str	r2, [r3, #20]
 800f236:	e7be      	b.n	800f1b6 <__gethex+0x362>
 800f238:	6922      	ldr	r2, [r4, #16]
 800f23a:	455a      	cmp	r2, fp
 800f23c:	dd0b      	ble.n	800f256 <__gethex+0x402>
 800f23e:	2101      	movs	r1, #1
 800f240:	4620      	mov	r0, r4
 800f242:	f7ff fd9f 	bl	800ed84 <rshift>
 800f246:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f24a:	3701      	adds	r7, #1
 800f24c:	42bb      	cmp	r3, r7
 800f24e:	f6ff aee0 	blt.w	800f012 <__gethex+0x1be>
 800f252:	2501      	movs	r5, #1
 800f254:	e7c2      	b.n	800f1dc <__gethex+0x388>
 800f256:	f016 061f 	ands.w	r6, r6, #31
 800f25a:	d0fa      	beq.n	800f252 <__gethex+0x3fe>
 800f25c:	4453      	add	r3, sl
 800f25e:	f1c6 0620 	rsb	r6, r6, #32
 800f262:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800f266:	f000 fa79 	bl	800f75c <__hi0bits>
 800f26a:	42b0      	cmp	r0, r6
 800f26c:	dbe7      	blt.n	800f23e <__gethex+0x3ea>
 800f26e:	e7f0      	b.n	800f252 <__gethex+0x3fe>
 800f270:	080110fa 	.word	0x080110fa

0800f274 <L_shift>:
 800f274:	f1c2 0208 	rsb	r2, r2, #8
 800f278:	0092      	lsls	r2, r2, #2
 800f27a:	b570      	push	{r4, r5, r6, lr}
 800f27c:	f1c2 0620 	rsb	r6, r2, #32
 800f280:	6843      	ldr	r3, [r0, #4]
 800f282:	6804      	ldr	r4, [r0, #0]
 800f284:	fa03 f506 	lsl.w	r5, r3, r6
 800f288:	432c      	orrs	r4, r5
 800f28a:	40d3      	lsrs	r3, r2
 800f28c:	6004      	str	r4, [r0, #0]
 800f28e:	f840 3f04 	str.w	r3, [r0, #4]!
 800f292:	4288      	cmp	r0, r1
 800f294:	d3f4      	bcc.n	800f280 <L_shift+0xc>
 800f296:	bd70      	pop	{r4, r5, r6, pc}

0800f298 <__match>:
 800f298:	b530      	push	{r4, r5, lr}
 800f29a:	6803      	ldr	r3, [r0, #0]
 800f29c:	3301      	adds	r3, #1
 800f29e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f2a2:	b914      	cbnz	r4, 800f2aa <__match+0x12>
 800f2a4:	6003      	str	r3, [r0, #0]
 800f2a6:	2001      	movs	r0, #1
 800f2a8:	bd30      	pop	{r4, r5, pc}
 800f2aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f2ae:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800f2b2:	2d19      	cmp	r5, #25
 800f2b4:	bf98      	it	ls
 800f2b6:	3220      	addls	r2, #32
 800f2b8:	42a2      	cmp	r2, r4
 800f2ba:	d0f0      	beq.n	800f29e <__match+0x6>
 800f2bc:	2000      	movs	r0, #0
 800f2be:	e7f3      	b.n	800f2a8 <__match+0x10>

0800f2c0 <__hexnan>:
 800f2c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f2c4:	680b      	ldr	r3, [r1, #0]
 800f2c6:	6801      	ldr	r1, [r0, #0]
 800f2c8:	115e      	asrs	r6, r3, #5
 800f2ca:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800f2ce:	f013 031f 	ands.w	r3, r3, #31
 800f2d2:	b087      	sub	sp, #28
 800f2d4:	bf18      	it	ne
 800f2d6:	3604      	addne	r6, #4
 800f2d8:	2500      	movs	r5, #0
 800f2da:	1f37      	subs	r7, r6, #4
 800f2dc:	4682      	mov	sl, r0
 800f2de:	4690      	mov	r8, r2
 800f2e0:	9301      	str	r3, [sp, #4]
 800f2e2:	f846 5c04 	str.w	r5, [r6, #-4]
 800f2e6:	46b9      	mov	r9, r7
 800f2e8:	463c      	mov	r4, r7
 800f2ea:	9502      	str	r5, [sp, #8]
 800f2ec:	46ab      	mov	fp, r5
 800f2ee:	784a      	ldrb	r2, [r1, #1]
 800f2f0:	1c4b      	adds	r3, r1, #1
 800f2f2:	9303      	str	r3, [sp, #12]
 800f2f4:	b342      	cbz	r2, 800f348 <__hexnan+0x88>
 800f2f6:	4610      	mov	r0, r2
 800f2f8:	9105      	str	r1, [sp, #20]
 800f2fa:	9204      	str	r2, [sp, #16]
 800f2fc:	f7ff fd94 	bl	800ee28 <__hexdig_fun>
 800f300:	2800      	cmp	r0, #0
 800f302:	d151      	bne.n	800f3a8 <__hexnan+0xe8>
 800f304:	9a04      	ldr	r2, [sp, #16]
 800f306:	9905      	ldr	r1, [sp, #20]
 800f308:	2a20      	cmp	r2, #32
 800f30a:	d818      	bhi.n	800f33e <__hexnan+0x7e>
 800f30c:	9b02      	ldr	r3, [sp, #8]
 800f30e:	459b      	cmp	fp, r3
 800f310:	dd13      	ble.n	800f33a <__hexnan+0x7a>
 800f312:	454c      	cmp	r4, r9
 800f314:	d206      	bcs.n	800f324 <__hexnan+0x64>
 800f316:	2d07      	cmp	r5, #7
 800f318:	dc04      	bgt.n	800f324 <__hexnan+0x64>
 800f31a:	462a      	mov	r2, r5
 800f31c:	4649      	mov	r1, r9
 800f31e:	4620      	mov	r0, r4
 800f320:	f7ff ffa8 	bl	800f274 <L_shift>
 800f324:	4544      	cmp	r4, r8
 800f326:	d952      	bls.n	800f3ce <__hexnan+0x10e>
 800f328:	2300      	movs	r3, #0
 800f32a:	f1a4 0904 	sub.w	r9, r4, #4
 800f32e:	f844 3c04 	str.w	r3, [r4, #-4]
 800f332:	f8cd b008 	str.w	fp, [sp, #8]
 800f336:	464c      	mov	r4, r9
 800f338:	461d      	mov	r5, r3
 800f33a:	9903      	ldr	r1, [sp, #12]
 800f33c:	e7d7      	b.n	800f2ee <__hexnan+0x2e>
 800f33e:	2a29      	cmp	r2, #41	@ 0x29
 800f340:	d157      	bne.n	800f3f2 <__hexnan+0x132>
 800f342:	3102      	adds	r1, #2
 800f344:	f8ca 1000 	str.w	r1, [sl]
 800f348:	f1bb 0f00 	cmp.w	fp, #0
 800f34c:	d051      	beq.n	800f3f2 <__hexnan+0x132>
 800f34e:	454c      	cmp	r4, r9
 800f350:	d206      	bcs.n	800f360 <__hexnan+0xa0>
 800f352:	2d07      	cmp	r5, #7
 800f354:	dc04      	bgt.n	800f360 <__hexnan+0xa0>
 800f356:	462a      	mov	r2, r5
 800f358:	4649      	mov	r1, r9
 800f35a:	4620      	mov	r0, r4
 800f35c:	f7ff ff8a 	bl	800f274 <L_shift>
 800f360:	4544      	cmp	r4, r8
 800f362:	d936      	bls.n	800f3d2 <__hexnan+0x112>
 800f364:	f1a8 0204 	sub.w	r2, r8, #4
 800f368:	4623      	mov	r3, r4
 800f36a:	f853 1b04 	ldr.w	r1, [r3], #4
 800f36e:	f842 1f04 	str.w	r1, [r2, #4]!
 800f372:	429f      	cmp	r7, r3
 800f374:	d2f9      	bcs.n	800f36a <__hexnan+0xaa>
 800f376:	1b3b      	subs	r3, r7, r4
 800f378:	f023 0303 	bic.w	r3, r3, #3
 800f37c:	3304      	adds	r3, #4
 800f37e:	3401      	adds	r4, #1
 800f380:	3e03      	subs	r6, #3
 800f382:	42b4      	cmp	r4, r6
 800f384:	bf88      	it	hi
 800f386:	2304      	movhi	r3, #4
 800f388:	4443      	add	r3, r8
 800f38a:	2200      	movs	r2, #0
 800f38c:	f843 2b04 	str.w	r2, [r3], #4
 800f390:	429f      	cmp	r7, r3
 800f392:	d2fb      	bcs.n	800f38c <__hexnan+0xcc>
 800f394:	683b      	ldr	r3, [r7, #0]
 800f396:	b91b      	cbnz	r3, 800f3a0 <__hexnan+0xe0>
 800f398:	4547      	cmp	r7, r8
 800f39a:	d128      	bne.n	800f3ee <__hexnan+0x12e>
 800f39c:	2301      	movs	r3, #1
 800f39e:	603b      	str	r3, [r7, #0]
 800f3a0:	2005      	movs	r0, #5
 800f3a2:	b007      	add	sp, #28
 800f3a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f3a8:	3501      	adds	r5, #1
 800f3aa:	2d08      	cmp	r5, #8
 800f3ac:	f10b 0b01 	add.w	fp, fp, #1
 800f3b0:	dd06      	ble.n	800f3c0 <__hexnan+0x100>
 800f3b2:	4544      	cmp	r4, r8
 800f3b4:	d9c1      	bls.n	800f33a <__hexnan+0x7a>
 800f3b6:	2300      	movs	r3, #0
 800f3b8:	f844 3c04 	str.w	r3, [r4, #-4]
 800f3bc:	2501      	movs	r5, #1
 800f3be:	3c04      	subs	r4, #4
 800f3c0:	6822      	ldr	r2, [r4, #0]
 800f3c2:	f000 000f 	and.w	r0, r0, #15
 800f3c6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800f3ca:	6020      	str	r0, [r4, #0]
 800f3cc:	e7b5      	b.n	800f33a <__hexnan+0x7a>
 800f3ce:	2508      	movs	r5, #8
 800f3d0:	e7b3      	b.n	800f33a <__hexnan+0x7a>
 800f3d2:	9b01      	ldr	r3, [sp, #4]
 800f3d4:	2b00      	cmp	r3, #0
 800f3d6:	d0dd      	beq.n	800f394 <__hexnan+0xd4>
 800f3d8:	f1c3 0320 	rsb	r3, r3, #32
 800f3dc:	f04f 32ff 	mov.w	r2, #4294967295
 800f3e0:	40da      	lsrs	r2, r3
 800f3e2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800f3e6:	4013      	ands	r3, r2
 800f3e8:	f846 3c04 	str.w	r3, [r6, #-4]
 800f3ec:	e7d2      	b.n	800f394 <__hexnan+0xd4>
 800f3ee:	3f04      	subs	r7, #4
 800f3f0:	e7d0      	b.n	800f394 <__hexnan+0xd4>
 800f3f2:	2004      	movs	r0, #4
 800f3f4:	e7d5      	b.n	800f3a2 <__hexnan+0xe2>
	...

0800f3f8 <sbrk_aligned>:
 800f3f8:	b570      	push	{r4, r5, r6, lr}
 800f3fa:	4e0f      	ldr	r6, [pc, #60]	@ (800f438 <sbrk_aligned+0x40>)
 800f3fc:	460c      	mov	r4, r1
 800f3fe:	6831      	ldr	r1, [r6, #0]
 800f400:	4605      	mov	r5, r0
 800f402:	b911      	cbnz	r1, 800f40a <sbrk_aligned+0x12>
 800f404:	f001 f918 	bl	8010638 <_sbrk_r>
 800f408:	6030      	str	r0, [r6, #0]
 800f40a:	4621      	mov	r1, r4
 800f40c:	4628      	mov	r0, r5
 800f40e:	f001 f913 	bl	8010638 <_sbrk_r>
 800f412:	1c43      	adds	r3, r0, #1
 800f414:	d103      	bne.n	800f41e <sbrk_aligned+0x26>
 800f416:	f04f 34ff 	mov.w	r4, #4294967295
 800f41a:	4620      	mov	r0, r4
 800f41c:	bd70      	pop	{r4, r5, r6, pc}
 800f41e:	1cc4      	adds	r4, r0, #3
 800f420:	f024 0403 	bic.w	r4, r4, #3
 800f424:	42a0      	cmp	r0, r4
 800f426:	d0f8      	beq.n	800f41a <sbrk_aligned+0x22>
 800f428:	1a21      	subs	r1, r4, r0
 800f42a:	4628      	mov	r0, r5
 800f42c:	f001 f904 	bl	8010638 <_sbrk_r>
 800f430:	3001      	adds	r0, #1
 800f432:	d1f2      	bne.n	800f41a <sbrk_aligned+0x22>
 800f434:	e7ef      	b.n	800f416 <sbrk_aligned+0x1e>
 800f436:	bf00      	nop
 800f438:	200040a4 	.word	0x200040a4

0800f43c <_malloc_r>:
 800f43c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f440:	1ccd      	adds	r5, r1, #3
 800f442:	f025 0503 	bic.w	r5, r5, #3
 800f446:	3508      	adds	r5, #8
 800f448:	2d0c      	cmp	r5, #12
 800f44a:	bf38      	it	cc
 800f44c:	250c      	movcc	r5, #12
 800f44e:	2d00      	cmp	r5, #0
 800f450:	4606      	mov	r6, r0
 800f452:	db01      	blt.n	800f458 <_malloc_r+0x1c>
 800f454:	42a9      	cmp	r1, r5
 800f456:	d904      	bls.n	800f462 <_malloc_r+0x26>
 800f458:	230c      	movs	r3, #12
 800f45a:	6033      	str	r3, [r6, #0]
 800f45c:	2000      	movs	r0, #0
 800f45e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f462:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800f538 <_malloc_r+0xfc>
 800f466:	f000 f87b 	bl	800f560 <__malloc_lock>
 800f46a:	f8d8 3000 	ldr.w	r3, [r8]
 800f46e:	461c      	mov	r4, r3
 800f470:	bb44      	cbnz	r4, 800f4c4 <_malloc_r+0x88>
 800f472:	4629      	mov	r1, r5
 800f474:	4630      	mov	r0, r6
 800f476:	f7ff ffbf 	bl	800f3f8 <sbrk_aligned>
 800f47a:	1c43      	adds	r3, r0, #1
 800f47c:	4604      	mov	r4, r0
 800f47e:	d158      	bne.n	800f532 <_malloc_r+0xf6>
 800f480:	f8d8 4000 	ldr.w	r4, [r8]
 800f484:	4627      	mov	r7, r4
 800f486:	2f00      	cmp	r7, #0
 800f488:	d143      	bne.n	800f512 <_malloc_r+0xd6>
 800f48a:	2c00      	cmp	r4, #0
 800f48c:	d04b      	beq.n	800f526 <_malloc_r+0xea>
 800f48e:	6823      	ldr	r3, [r4, #0]
 800f490:	4639      	mov	r1, r7
 800f492:	4630      	mov	r0, r6
 800f494:	eb04 0903 	add.w	r9, r4, r3
 800f498:	f001 f8ce 	bl	8010638 <_sbrk_r>
 800f49c:	4581      	cmp	r9, r0
 800f49e:	d142      	bne.n	800f526 <_malloc_r+0xea>
 800f4a0:	6821      	ldr	r1, [r4, #0]
 800f4a2:	1a6d      	subs	r5, r5, r1
 800f4a4:	4629      	mov	r1, r5
 800f4a6:	4630      	mov	r0, r6
 800f4a8:	f7ff ffa6 	bl	800f3f8 <sbrk_aligned>
 800f4ac:	3001      	adds	r0, #1
 800f4ae:	d03a      	beq.n	800f526 <_malloc_r+0xea>
 800f4b0:	6823      	ldr	r3, [r4, #0]
 800f4b2:	442b      	add	r3, r5
 800f4b4:	6023      	str	r3, [r4, #0]
 800f4b6:	f8d8 3000 	ldr.w	r3, [r8]
 800f4ba:	685a      	ldr	r2, [r3, #4]
 800f4bc:	bb62      	cbnz	r2, 800f518 <_malloc_r+0xdc>
 800f4be:	f8c8 7000 	str.w	r7, [r8]
 800f4c2:	e00f      	b.n	800f4e4 <_malloc_r+0xa8>
 800f4c4:	6822      	ldr	r2, [r4, #0]
 800f4c6:	1b52      	subs	r2, r2, r5
 800f4c8:	d420      	bmi.n	800f50c <_malloc_r+0xd0>
 800f4ca:	2a0b      	cmp	r2, #11
 800f4cc:	d917      	bls.n	800f4fe <_malloc_r+0xc2>
 800f4ce:	1961      	adds	r1, r4, r5
 800f4d0:	42a3      	cmp	r3, r4
 800f4d2:	6025      	str	r5, [r4, #0]
 800f4d4:	bf18      	it	ne
 800f4d6:	6059      	strne	r1, [r3, #4]
 800f4d8:	6863      	ldr	r3, [r4, #4]
 800f4da:	bf08      	it	eq
 800f4dc:	f8c8 1000 	streq.w	r1, [r8]
 800f4e0:	5162      	str	r2, [r4, r5]
 800f4e2:	604b      	str	r3, [r1, #4]
 800f4e4:	4630      	mov	r0, r6
 800f4e6:	f000 f841 	bl	800f56c <__malloc_unlock>
 800f4ea:	f104 000b 	add.w	r0, r4, #11
 800f4ee:	1d23      	adds	r3, r4, #4
 800f4f0:	f020 0007 	bic.w	r0, r0, #7
 800f4f4:	1ac2      	subs	r2, r0, r3
 800f4f6:	bf1c      	itt	ne
 800f4f8:	1a1b      	subne	r3, r3, r0
 800f4fa:	50a3      	strne	r3, [r4, r2]
 800f4fc:	e7af      	b.n	800f45e <_malloc_r+0x22>
 800f4fe:	6862      	ldr	r2, [r4, #4]
 800f500:	42a3      	cmp	r3, r4
 800f502:	bf0c      	ite	eq
 800f504:	f8c8 2000 	streq.w	r2, [r8]
 800f508:	605a      	strne	r2, [r3, #4]
 800f50a:	e7eb      	b.n	800f4e4 <_malloc_r+0xa8>
 800f50c:	4623      	mov	r3, r4
 800f50e:	6864      	ldr	r4, [r4, #4]
 800f510:	e7ae      	b.n	800f470 <_malloc_r+0x34>
 800f512:	463c      	mov	r4, r7
 800f514:	687f      	ldr	r7, [r7, #4]
 800f516:	e7b6      	b.n	800f486 <_malloc_r+0x4a>
 800f518:	461a      	mov	r2, r3
 800f51a:	685b      	ldr	r3, [r3, #4]
 800f51c:	42a3      	cmp	r3, r4
 800f51e:	d1fb      	bne.n	800f518 <_malloc_r+0xdc>
 800f520:	2300      	movs	r3, #0
 800f522:	6053      	str	r3, [r2, #4]
 800f524:	e7de      	b.n	800f4e4 <_malloc_r+0xa8>
 800f526:	230c      	movs	r3, #12
 800f528:	6033      	str	r3, [r6, #0]
 800f52a:	4630      	mov	r0, r6
 800f52c:	f000 f81e 	bl	800f56c <__malloc_unlock>
 800f530:	e794      	b.n	800f45c <_malloc_r+0x20>
 800f532:	6005      	str	r5, [r0, #0]
 800f534:	e7d6      	b.n	800f4e4 <_malloc_r+0xa8>
 800f536:	bf00      	nop
 800f538:	200040a8 	.word	0x200040a8

0800f53c <__ascii_mbtowc>:
 800f53c:	b082      	sub	sp, #8
 800f53e:	b901      	cbnz	r1, 800f542 <__ascii_mbtowc+0x6>
 800f540:	a901      	add	r1, sp, #4
 800f542:	b142      	cbz	r2, 800f556 <__ascii_mbtowc+0x1a>
 800f544:	b14b      	cbz	r3, 800f55a <__ascii_mbtowc+0x1e>
 800f546:	7813      	ldrb	r3, [r2, #0]
 800f548:	600b      	str	r3, [r1, #0]
 800f54a:	7812      	ldrb	r2, [r2, #0]
 800f54c:	1e10      	subs	r0, r2, #0
 800f54e:	bf18      	it	ne
 800f550:	2001      	movne	r0, #1
 800f552:	b002      	add	sp, #8
 800f554:	4770      	bx	lr
 800f556:	4610      	mov	r0, r2
 800f558:	e7fb      	b.n	800f552 <__ascii_mbtowc+0x16>
 800f55a:	f06f 0001 	mvn.w	r0, #1
 800f55e:	e7f8      	b.n	800f552 <__ascii_mbtowc+0x16>

0800f560 <__malloc_lock>:
 800f560:	4801      	ldr	r0, [pc, #4]	@ (800f568 <__malloc_lock+0x8>)
 800f562:	f7ff bbac 	b.w	800ecbe <__retarget_lock_acquire_recursive>
 800f566:	bf00      	nop
 800f568:	200040a0 	.word	0x200040a0

0800f56c <__malloc_unlock>:
 800f56c:	4801      	ldr	r0, [pc, #4]	@ (800f574 <__malloc_unlock+0x8>)
 800f56e:	f7ff bba7 	b.w	800ecc0 <__retarget_lock_release_recursive>
 800f572:	bf00      	nop
 800f574:	200040a0 	.word	0x200040a0

0800f578 <_Balloc>:
 800f578:	b570      	push	{r4, r5, r6, lr}
 800f57a:	69c6      	ldr	r6, [r0, #28]
 800f57c:	4604      	mov	r4, r0
 800f57e:	460d      	mov	r5, r1
 800f580:	b976      	cbnz	r6, 800f5a0 <_Balloc+0x28>
 800f582:	2010      	movs	r0, #16
 800f584:	f001 f89a 	bl	80106bc <malloc>
 800f588:	4602      	mov	r2, r0
 800f58a:	61e0      	str	r0, [r4, #28]
 800f58c:	b920      	cbnz	r0, 800f598 <_Balloc+0x20>
 800f58e:	4b18      	ldr	r3, [pc, #96]	@ (800f5f0 <_Balloc+0x78>)
 800f590:	4818      	ldr	r0, [pc, #96]	@ (800f5f4 <_Balloc+0x7c>)
 800f592:	216b      	movs	r1, #107	@ 0x6b
 800f594:	f001 f860 	bl	8010658 <__assert_func>
 800f598:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f59c:	6006      	str	r6, [r0, #0]
 800f59e:	60c6      	str	r6, [r0, #12]
 800f5a0:	69e6      	ldr	r6, [r4, #28]
 800f5a2:	68f3      	ldr	r3, [r6, #12]
 800f5a4:	b183      	cbz	r3, 800f5c8 <_Balloc+0x50>
 800f5a6:	69e3      	ldr	r3, [r4, #28]
 800f5a8:	68db      	ldr	r3, [r3, #12]
 800f5aa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f5ae:	b9b8      	cbnz	r0, 800f5e0 <_Balloc+0x68>
 800f5b0:	2101      	movs	r1, #1
 800f5b2:	fa01 f605 	lsl.w	r6, r1, r5
 800f5b6:	1d72      	adds	r2, r6, #5
 800f5b8:	0092      	lsls	r2, r2, #2
 800f5ba:	4620      	mov	r0, r4
 800f5bc:	f001 f86a 	bl	8010694 <_calloc_r>
 800f5c0:	b160      	cbz	r0, 800f5dc <_Balloc+0x64>
 800f5c2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f5c6:	e00e      	b.n	800f5e6 <_Balloc+0x6e>
 800f5c8:	2221      	movs	r2, #33	@ 0x21
 800f5ca:	2104      	movs	r1, #4
 800f5cc:	4620      	mov	r0, r4
 800f5ce:	f001 f861 	bl	8010694 <_calloc_r>
 800f5d2:	69e3      	ldr	r3, [r4, #28]
 800f5d4:	60f0      	str	r0, [r6, #12]
 800f5d6:	68db      	ldr	r3, [r3, #12]
 800f5d8:	2b00      	cmp	r3, #0
 800f5da:	d1e4      	bne.n	800f5a6 <_Balloc+0x2e>
 800f5dc:	2000      	movs	r0, #0
 800f5de:	bd70      	pop	{r4, r5, r6, pc}
 800f5e0:	6802      	ldr	r2, [r0, #0]
 800f5e2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f5e6:	2300      	movs	r3, #0
 800f5e8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f5ec:	e7f7      	b.n	800f5de <_Balloc+0x66>
 800f5ee:	bf00      	nop
 800f5f0:	0801116b 	.word	0x0801116b
 800f5f4:	08011182 	.word	0x08011182

0800f5f8 <_Bfree>:
 800f5f8:	b570      	push	{r4, r5, r6, lr}
 800f5fa:	69c6      	ldr	r6, [r0, #28]
 800f5fc:	4605      	mov	r5, r0
 800f5fe:	460c      	mov	r4, r1
 800f600:	b976      	cbnz	r6, 800f620 <_Bfree+0x28>
 800f602:	2010      	movs	r0, #16
 800f604:	f001 f85a 	bl	80106bc <malloc>
 800f608:	4602      	mov	r2, r0
 800f60a:	61e8      	str	r0, [r5, #28]
 800f60c:	b920      	cbnz	r0, 800f618 <_Bfree+0x20>
 800f60e:	4b09      	ldr	r3, [pc, #36]	@ (800f634 <_Bfree+0x3c>)
 800f610:	4809      	ldr	r0, [pc, #36]	@ (800f638 <_Bfree+0x40>)
 800f612:	218f      	movs	r1, #143	@ 0x8f
 800f614:	f001 f820 	bl	8010658 <__assert_func>
 800f618:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f61c:	6006      	str	r6, [r0, #0]
 800f61e:	60c6      	str	r6, [r0, #12]
 800f620:	b13c      	cbz	r4, 800f632 <_Bfree+0x3a>
 800f622:	69eb      	ldr	r3, [r5, #28]
 800f624:	6862      	ldr	r2, [r4, #4]
 800f626:	68db      	ldr	r3, [r3, #12]
 800f628:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f62c:	6021      	str	r1, [r4, #0]
 800f62e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f632:	bd70      	pop	{r4, r5, r6, pc}
 800f634:	0801116b 	.word	0x0801116b
 800f638:	08011182 	.word	0x08011182

0800f63c <__multadd>:
 800f63c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f640:	690d      	ldr	r5, [r1, #16]
 800f642:	4607      	mov	r7, r0
 800f644:	460c      	mov	r4, r1
 800f646:	461e      	mov	r6, r3
 800f648:	f101 0c14 	add.w	ip, r1, #20
 800f64c:	2000      	movs	r0, #0
 800f64e:	f8dc 3000 	ldr.w	r3, [ip]
 800f652:	b299      	uxth	r1, r3
 800f654:	fb02 6101 	mla	r1, r2, r1, r6
 800f658:	0c1e      	lsrs	r6, r3, #16
 800f65a:	0c0b      	lsrs	r3, r1, #16
 800f65c:	fb02 3306 	mla	r3, r2, r6, r3
 800f660:	b289      	uxth	r1, r1
 800f662:	3001      	adds	r0, #1
 800f664:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f668:	4285      	cmp	r5, r0
 800f66a:	f84c 1b04 	str.w	r1, [ip], #4
 800f66e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f672:	dcec      	bgt.n	800f64e <__multadd+0x12>
 800f674:	b30e      	cbz	r6, 800f6ba <__multadd+0x7e>
 800f676:	68a3      	ldr	r3, [r4, #8]
 800f678:	42ab      	cmp	r3, r5
 800f67a:	dc19      	bgt.n	800f6b0 <__multadd+0x74>
 800f67c:	6861      	ldr	r1, [r4, #4]
 800f67e:	4638      	mov	r0, r7
 800f680:	3101      	adds	r1, #1
 800f682:	f7ff ff79 	bl	800f578 <_Balloc>
 800f686:	4680      	mov	r8, r0
 800f688:	b928      	cbnz	r0, 800f696 <__multadd+0x5a>
 800f68a:	4602      	mov	r2, r0
 800f68c:	4b0c      	ldr	r3, [pc, #48]	@ (800f6c0 <__multadd+0x84>)
 800f68e:	480d      	ldr	r0, [pc, #52]	@ (800f6c4 <__multadd+0x88>)
 800f690:	21ba      	movs	r1, #186	@ 0xba
 800f692:	f000 ffe1 	bl	8010658 <__assert_func>
 800f696:	6922      	ldr	r2, [r4, #16]
 800f698:	3202      	adds	r2, #2
 800f69a:	f104 010c 	add.w	r1, r4, #12
 800f69e:	0092      	lsls	r2, r2, #2
 800f6a0:	300c      	adds	r0, #12
 800f6a2:	f7ff fb0e 	bl	800ecc2 <memcpy>
 800f6a6:	4621      	mov	r1, r4
 800f6a8:	4638      	mov	r0, r7
 800f6aa:	f7ff ffa5 	bl	800f5f8 <_Bfree>
 800f6ae:	4644      	mov	r4, r8
 800f6b0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f6b4:	3501      	adds	r5, #1
 800f6b6:	615e      	str	r6, [r3, #20]
 800f6b8:	6125      	str	r5, [r4, #16]
 800f6ba:	4620      	mov	r0, r4
 800f6bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f6c0:	080110fa 	.word	0x080110fa
 800f6c4:	08011182 	.word	0x08011182

0800f6c8 <__s2b>:
 800f6c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f6cc:	460c      	mov	r4, r1
 800f6ce:	4615      	mov	r5, r2
 800f6d0:	461f      	mov	r7, r3
 800f6d2:	2209      	movs	r2, #9
 800f6d4:	3308      	adds	r3, #8
 800f6d6:	4606      	mov	r6, r0
 800f6d8:	fb93 f3f2 	sdiv	r3, r3, r2
 800f6dc:	2100      	movs	r1, #0
 800f6de:	2201      	movs	r2, #1
 800f6e0:	429a      	cmp	r2, r3
 800f6e2:	db09      	blt.n	800f6f8 <__s2b+0x30>
 800f6e4:	4630      	mov	r0, r6
 800f6e6:	f7ff ff47 	bl	800f578 <_Balloc>
 800f6ea:	b940      	cbnz	r0, 800f6fe <__s2b+0x36>
 800f6ec:	4602      	mov	r2, r0
 800f6ee:	4b19      	ldr	r3, [pc, #100]	@ (800f754 <__s2b+0x8c>)
 800f6f0:	4819      	ldr	r0, [pc, #100]	@ (800f758 <__s2b+0x90>)
 800f6f2:	21d3      	movs	r1, #211	@ 0xd3
 800f6f4:	f000 ffb0 	bl	8010658 <__assert_func>
 800f6f8:	0052      	lsls	r2, r2, #1
 800f6fa:	3101      	adds	r1, #1
 800f6fc:	e7f0      	b.n	800f6e0 <__s2b+0x18>
 800f6fe:	9b08      	ldr	r3, [sp, #32]
 800f700:	6143      	str	r3, [r0, #20]
 800f702:	2d09      	cmp	r5, #9
 800f704:	f04f 0301 	mov.w	r3, #1
 800f708:	6103      	str	r3, [r0, #16]
 800f70a:	dd16      	ble.n	800f73a <__s2b+0x72>
 800f70c:	f104 0909 	add.w	r9, r4, #9
 800f710:	46c8      	mov	r8, r9
 800f712:	442c      	add	r4, r5
 800f714:	f818 3b01 	ldrb.w	r3, [r8], #1
 800f718:	4601      	mov	r1, r0
 800f71a:	3b30      	subs	r3, #48	@ 0x30
 800f71c:	220a      	movs	r2, #10
 800f71e:	4630      	mov	r0, r6
 800f720:	f7ff ff8c 	bl	800f63c <__multadd>
 800f724:	45a0      	cmp	r8, r4
 800f726:	d1f5      	bne.n	800f714 <__s2b+0x4c>
 800f728:	f1a5 0408 	sub.w	r4, r5, #8
 800f72c:	444c      	add	r4, r9
 800f72e:	1b2d      	subs	r5, r5, r4
 800f730:	1963      	adds	r3, r4, r5
 800f732:	42bb      	cmp	r3, r7
 800f734:	db04      	blt.n	800f740 <__s2b+0x78>
 800f736:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f73a:	340a      	adds	r4, #10
 800f73c:	2509      	movs	r5, #9
 800f73e:	e7f6      	b.n	800f72e <__s2b+0x66>
 800f740:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f744:	4601      	mov	r1, r0
 800f746:	3b30      	subs	r3, #48	@ 0x30
 800f748:	220a      	movs	r2, #10
 800f74a:	4630      	mov	r0, r6
 800f74c:	f7ff ff76 	bl	800f63c <__multadd>
 800f750:	e7ee      	b.n	800f730 <__s2b+0x68>
 800f752:	bf00      	nop
 800f754:	080110fa 	.word	0x080110fa
 800f758:	08011182 	.word	0x08011182

0800f75c <__hi0bits>:
 800f75c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800f760:	4603      	mov	r3, r0
 800f762:	bf36      	itet	cc
 800f764:	0403      	lslcc	r3, r0, #16
 800f766:	2000      	movcs	r0, #0
 800f768:	2010      	movcc	r0, #16
 800f76a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800f76e:	bf3c      	itt	cc
 800f770:	021b      	lslcc	r3, r3, #8
 800f772:	3008      	addcc	r0, #8
 800f774:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f778:	bf3c      	itt	cc
 800f77a:	011b      	lslcc	r3, r3, #4
 800f77c:	3004      	addcc	r0, #4
 800f77e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f782:	bf3c      	itt	cc
 800f784:	009b      	lslcc	r3, r3, #2
 800f786:	3002      	addcc	r0, #2
 800f788:	2b00      	cmp	r3, #0
 800f78a:	db05      	blt.n	800f798 <__hi0bits+0x3c>
 800f78c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800f790:	f100 0001 	add.w	r0, r0, #1
 800f794:	bf08      	it	eq
 800f796:	2020      	moveq	r0, #32
 800f798:	4770      	bx	lr

0800f79a <__lo0bits>:
 800f79a:	6803      	ldr	r3, [r0, #0]
 800f79c:	4602      	mov	r2, r0
 800f79e:	f013 0007 	ands.w	r0, r3, #7
 800f7a2:	d00b      	beq.n	800f7bc <__lo0bits+0x22>
 800f7a4:	07d9      	lsls	r1, r3, #31
 800f7a6:	d421      	bmi.n	800f7ec <__lo0bits+0x52>
 800f7a8:	0798      	lsls	r0, r3, #30
 800f7aa:	bf49      	itett	mi
 800f7ac:	085b      	lsrmi	r3, r3, #1
 800f7ae:	089b      	lsrpl	r3, r3, #2
 800f7b0:	2001      	movmi	r0, #1
 800f7b2:	6013      	strmi	r3, [r2, #0]
 800f7b4:	bf5c      	itt	pl
 800f7b6:	6013      	strpl	r3, [r2, #0]
 800f7b8:	2002      	movpl	r0, #2
 800f7ba:	4770      	bx	lr
 800f7bc:	b299      	uxth	r1, r3
 800f7be:	b909      	cbnz	r1, 800f7c4 <__lo0bits+0x2a>
 800f7c0:	0c1b      	lsrs	r3, r3, #16
 800f7c2:	2010      	movs	r0, #16
 800f7c4:	b2d9      	uxtb	r1, r3
 800f7c6:	b909      	cbnz	r1, 800f7cc <__lo0bits+0x32>
 800f7c8:	3008      	adds	r0, #8
 800f7ca:	0a1b      	lsrs	r3, r3, #8
 800f7cc:	0719      	lsls	r1, r3, #28
 800f7ce:	bf04      	itt	eq
 800f7d0:	091b      	lsreq	r3, r3, #4
 800f7d2:	3004      	addeq	r0, #4
 800f7d4:	0799      	lsls	r1, r3, #30
 800f7d6:	bf04      	itt	eq
 800f7d8:	089b      	lsreq	r3, r3, #2
 800f7da:	3002      	addeq	r0, #2
 800f7dc:	07d9      	lsls	r1, r3, #31
 800f7de:	d403      	bmi.n	800f7e8 <__lo0bits+0x4e>
 800f7e0:	085b      	lsrs	r3, r3, #1
 800f7e2:	f100 0001 	add.w	r0, r0, #1
 800f7e6:	d003      	beq.n	800f7f0 <__lo0bits+0x56>
 800f7e8:	6013      	str	r3, [r2, #0]
 800f7ea:	4770      	bx	lr
 800f7ec:	2000      	movs	r0, #0
 800f7ee:	4770      	bx	lr
 800f7f0:	2020      	movs	r0, #32
 800f7f2:	4770      	bx	lr

0800f7f4 <__i2b>:
 800f7f4:	b510      	push	{r4, lr}
 800f7f6:	460c      	mov	r4, r1
 800f7f8:	2101      	movs	r1, #1
 800f7fa:	f7ff febd 	bl	800f578 <_Balloc>
 800f7fe:	4602      	mov	r2, r0
 800f800:	b928      	cbnz	r0, 800f80e <__i2b+0x1a>
 800f802:	4b05      	ldr	r3, [pc, #20]	@ (800f818 <__i2b+0x24>)
 800f804:	4805      	ldr	r0, [pc, #20]	@ (800f81c <__i2b+0x28>)
 800f806:	f240 1145 	movw	r1, #325	@ 0x145
 800f80a:	f000 ff25 	bl	8010658 <__assert_func>
 800f80e:	2301      	movs	r3, #1
 800f810:	6144      	str	r4, [r0, #20]
 800f812:	6103      	str	r3, [r0, #16]
 800f814:	bd10      	pop	{r4, pc}
 800f816:	bf00      	nop
 800f818:	080110fa 	.word	0x080110fa
 800f81c:	08011182 	.word	0x08011182

0800f820 <__multiply>:
 800f820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f824:	4617      	mov	r7, r2
 800f826:	690a      	ldr	r2, [r1, #16]
 800f828:	693b      	ldr	r3, [r7, #16]
 800f82a:	429a      	cmp	r2, r3
 800f82c:	bfa8      	it	ge
 800f82e:	463b      	movge	r3, r7
 800f830:	4689      	mov	r9, r1
 800f832:	bfa4      	itt	ge
 800f834:	460f      	movge	r7, r1
 800f836:	4699      	movge	r9, r3
 800f838:	693d      	ldr	r5, [r7, #16]
 800f83a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800f83e:	68bb      	ldr	r3, [r7, #8]
 800f840:	6879      	ldr	r1, [r7, #4]
 800f842:	eb05 060a 	add.w	r6, r5, sl
 800f846:	42b3      	cmp	r3, r6
 800f848:	b085      	sub	sp, #20
 800f84a:	bfb8      	it	lt
 800f84c:	3101      	addlt	r1, #1
 800f84e:	f7ff fe93 	bl	800f578 <_Balloc>
 800f852:	b930      	cbnz	r0, 800f862 <__multiply+0x42>
 800f854:	4602      	mov	r2, r0
 800f856:	4b41      	ldr	r3, [pc, #260]	@ (800f95c <__multiply+0x13c>)
 800f858:	4841      	ldr	r0, [pc, #260]	@ (800f960 <__multiply+0x140>)
 800f85a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800f85e:	f000 fefb 	bl	8010658 <__assert_func>
 800f862:	f100 0414 	add.w	r4, r0, #20
 800f866:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800f86a:	4623      	mov	r3, r4
 800f86c:	2200      	movs	r2, #0
 800f86e:	4573      	cmp	r3, lr
 800f870:	d320      	bcc.n	800f8b4 <__multiply+0x94>
 800f872:	f107 0814 	add.w	r8, r7, #20
 800f876:	f109 0114 	add.w	r1, r9, #20
 800f87a:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800f87e:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800f882:	9302      	str	r3, [sp, #8]
 800f884:	1beb      	subs	r3, r5, r7
 800f886:	3b15      	subs	r3, #21
 800f888:	f023 0303 	bic.w	r3, r3, #3
 800f88c:	3304      	adds	r3, #4
 800f88e:	3715      	adds	r7, #21
 800f890:	42bd      	cmp	r5, r7
 800f892:	bf38      	it	cc
 800f894:	2304      	movcc	r3, #4
 800f896:	9301      	str	r3, [sp, #4]
 800f898:	9b02      	ldr	r3, [sp, #8]
 800f89a:	9103      	str	r1, [sp, #12]
 800f89c:	428b      	cmp	r3, r1
 800f89e:	d80c      	bhi.n	800f8ba <__multiply+0x9a>
 800f8a0:	2e00      	cmp	r6, #0
 800f8a2:	dd03      	ble.n	800f8ac <__multiply+0x8c>
 800f8a4:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800f8a8:	2b00      	cmp	r3, #0
 800f8aa:	d055      	beq.n	800f958 <__multiply+0x138>
 800f8ac:	6106      	str	r6, [r0, #16]
 800f8ae:	b005      	add	sp, #20
 800f8b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f8b4:	f843 2b04 	str.w	r2, [r3], #4
 800f8b8:	e7d9      	b.n	800f86e <__multiply+0x4e>
 800f8ba:	f8b1 a000 	ldrh.w	sl, [r1]
 800f8be:	f1ba 0f00 	cmp.w	sl, #0
 800f8c2:	d01f      	beq.n	800f904 <__multiply+0xe4>
 800f8c4:	46c4      	mov	ip, r8
 800f8c6:	46a1      	mov	r9, r4
 800f8c8:	2700      	movs	r7, #0
 800f8ca:	f85c 2b04 	ldr.w	r2, [ip], #4
 800f8ce:	f8d9 3000 	ldr.w	r3, [r9]
 800f8d2:	fa1f fb82 	uxth.w	fp, r2
 800f8d6:	b29b      	uxth	r3, r3
 800f8d8:	fb0a 330b 	mla	r3, sl, fp, r3
 800f8dc:	443b      	add	r3, r7
 800f8de:	f8d9 7000 	ldr.w	r7, [r9]
 800f8e2:	0c12      	lsrs	r2, r2, #16
 800f8e4:	0c3f      	lsrs	r7, r7, #16
 800f8e6:	fb0a 7202 	mla	r2, sl, r2, r7
 800f8ea:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800f8ee:	b29b      	uxth	r3, r3
 800f8f0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f8f4:	4565      	cmp	r5, ip
 800f8f6:	f849 3b04 	str.w	r3, [r9], #4
 800f8fa:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800f8fe:	d8e4      	bhi.n	800f8ca <__multiply+0xaa>
 800f900:	9b01      	ldr	r3, [sp, #4]
 800f902:	50e7      	str	r7, [r4, r3]
 800f904:	9b03      	ldr	r3, [sp, #12]
 800f906:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800f90a:	3104      	adds	r1, #4
 800f90c:	f1b9 0f00 	cmp.w	r9, #0
 800f910:	d020      	beq.n	800f954 <__multiply+0x134>
 800f912:	6823      	ldr	r3, [r4, #0]
 800f914:	4647      	mov	r7, r8
 800f916:	46a4      	mov	ip, r4
 800f918:	f04f 0a00 	mov.w	sl, #0
 800f91c:	f8b7 b000 	ldrh.w	fp, [r7]
 800f920:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800f924:	fb09 220b 	mla	r2, r9, fp, r2
 800f928:	4452      	add	r2, sl
 800f92a:	b29b      	uxth	r3, r3
 800f92c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f930:	f84c 3b04 	str.w	r3, [ip], #4
 800f934:	f857 3b04 	ldr.w	r3, [r7], #4
 800f938:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f93c:	f8bc 3000 	ldrh.w	r3, [ip]
 800f940:	fb09 330a 	mla	r3, r9, sl, r3
 800f944:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800f948:	42bd      	cmp	r5, r7
 800f94a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f94e:	d8e5      	bhi.n	800f91c <__multiply+0xfc>
 800f950:	9a01      	ldr	r2, [sp, #4]
 800f952:	50a3      	str	r3, [r4, r2]
 800f954:	3404      	adds	r4, #4
 800f956:	e79f      	b.n	800f898 <__multiply+0x78>
 800f958:	3e01      	subs	r6, #1
 800f95a:	e7a1      	b.n	800f8a0 <__multiply+0x80>
 800f95c:	080110fa 	.word	0x080110fa
 800f960:	08011182 	.word	0x08011182

0800f964 <__pow5mult>:
 800f964:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f968:	4615      	mov	r5, r2
 800f96a:	f012 0203 	ands.w	r2, r2, #3
 800f96e:	4607      	mov	r7, r0
 800f970:	460e      	mov	r6, r1
 800f972:	d007      	beq.n	800f984 <__pow5mult+0x20>
 800f974:	4c25      	ldr	r4, [pc, #148]	@ (800fa0c <__pow5mult+0xa8>)
 800f976:	3a01      	subs	r2, #1
 800f978:	2300      	movs	r3, #0
 800f97a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f97e:	f7ff fe5d 	bl	800f63c <__multadd>
 800f982:	4606      	mov	r6, r0
 800f984:	10ad      	asrs	r5, r5, #2
 800f986:	d03d      	beq.n	800fa04 <__pow5mult+0xa0>
 800f988:	69fc      	ldr	r4, [r7, #28]
 800f98a:	b97c      	cbnz	r4, 800f9ac <__pow5mult+0x48>
 800f98c:	2010      	movs	r0, #16
 800f98e:	f000 fe95 	bl	80106bc <malloc>
 800f992:	4602      	mov	r2, r0
 800f994:	61f8      	str	r0, [r7, #28]
 800f996:	b928      	cbnz	r0, 800f9a4 <__pow5mult+0x40>
 800f998:	4b1d      	ldr	r3, [pc, #116]	@ (800fa10 <__pow5mult+0xac>)
 800f99a:	481e      	ldr	r0, [pc, #120]	@ (800fa14 <__pow5mult+0xb0>)
 800f99c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800f9a0:	f000 fe5a 	bl	8010658 <__assert_func>
 800f9a4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f9a8:	6004      	str	r4, [r0, #0]
 800f9aa:	60c4      	str	r4, [r0, #12]
 800f9ac:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800f9b0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f9b4:	b94c      	cbnz	r4, 800f9ca <__pow5mult+0x66>
 800f9b6:	f240 2171 	movw	r1, #625	@ 0x271
 800f9ba:	4638      	mov	r0, r7
 800f9bc:	f7ff ff1a 	bl	800f7f4 <__i2b>
 800f9c0:	2300      	movs	r3, #0
 800f9c2:	f8c8 0008 	str.w	r0, [r8, #8]
 800f9c6:	4604      	mov	r4, r0
 800f9c8:	6003      	str	r3, [r0, #0]
 800f9ca:	f04f 0900 	mov.w	r9, #0
 800f9ce:	07eb      	lsls	r3, r5, #31
 800f9d0:	d50a      	bpl.n	800f9e8 <__pow5mult+0x84>
 800f9d2:	4631      	mov	r1, r6
 800f9d4:	4622      	mov	r2, r4
 800f9d6:	4638      	mov	r0, r7
 800f9d8:	f7ff ff22 	bl	800f820 <__multiply>
 800f9dc:	4631      	mov	r1, r6
 800f9de:	4680      	mov	r8, r0
 800f9e0:	4638      	mov	r0, r7
 800f9e2:	f7ff fe09 	bl	800f5f8 <_Bfree>
 800f9e6:	4646      	mov	r6, r8
 800f9e8:	106d      	asrs	r5, r5, #1
 800f9ea:	d00b      	beq.n	800fa04 <__pow5mult+0xa0>
 800f9ec:	6820      	ldr	r0, [r4, #0]
 800f9ee:	b938      	cbnz	r0, 800fa00 <__pow5mult+0x9c>
 800f9f0:	4622      	mov	r2, r4
 800f9f2:	4621      	mov	r1, r4
 800f9f4:	4638      	mov	r0, r7
 800f9f6:	f7ff ff13 	bl	800f820 <__multiply>
 800f9fa:	6020      	str	r0, [r4, #0]
 800f9fc:	f8c0 9000 	str.w	r9, [r0]
 800fa00:	4604      	mov	r4, r0
 800fa02:	e7e4      	b.n	800f9ce <__pow5mult+0x6a>
 800fa04:	4630      	mov	r0, r6
 800fa06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fa0a:	bf00      	nop
 800fa0c:	080113a4 	.word	0x080113a4
 800fa10:	0801116b 	.word	0x0801116b
 800fa14:	08011182 	.word	0x08011182

0800fa18 <__lshift>:
 800fa18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fa1c:	460c      	mov	r4, r1
 800fa1e:	6849      	ldr	r1, [r1, #4]
 800fa20:	6923      	ldr	r3, [r4, #16]
 800fa22:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800fa26:	68a3      	ldr	r3, [r4, #8]
 800fa28:	4607      	mov	r7, r0
 800fa2a:	4691      	mov	r9, r2
 800fa2c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800fa30:	f108 0601 	add.w	r6, r8, #1
 800fa34:	42b3      	cmp	r3, r6
 800fa36:	db0b      	blt.n	800fa50 <__lshift+0x38>
 800fa38:	4638      	mov	r0, r7
 800fa3a:	f7ff fd9d 	bl	800f578 <_Balloc>
 800fa3e:	4605      	mov	r5, r0
 800fa40:	b948      	cbnz	r0, 800fa56 <__lshift+0x3e>
 800fa42:	4602      	mov	r2, r0
 800fa44:	4b28      	ldr	r3, [pc, #160]	@ (800fae8 <__lshift+0xd0>)
 800fa46:	4829      	ldr	r0, [pc, #164]	@ (800faec <__lshift+0xd4>)
 800fa48:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800fa4c:	f000 fe04 	bl	8010658 <__assert_func>
 800fa50:	3101      	adds	r1, #1
 800fa52:	005b      	lsls	r3, r3, #1
 800fa54:	e7ee      	b.n	800fa34 <__lshift+0x1c>
 800fa56:	2300      	movs	r3, #0
 800fa58:	f100 0114 	add.w	r1, r0, #20
 800fa5c:	f100 0210 	add.w	r2, r0, #16
 800fa60:	4618      	mov	r0, r3
 800fa62:	4553      	cmp	r3, sl
 800fa64:	db33      	blt.n	800face <__lshift+0xb6>
 800fa66:	6920      	ldr	r0, [r4, #16]
 800fa68:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800fa6c:	f104 0314 	add.w	r3, r4, #20
 800fa70:	f019 091f 	ands.w	r9, r9, #31
 800fa74:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800fa78:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800fa7c:	d02b      	beq.n	800fad6 <__lshift+0xbe>
 800fa7e:	f1c9 0e20 	rsb	lr, r9, #32
 800fa82:	468a      	mov	sl, r1
 800fa84:	2200      	movs	r2, #0
 800fa86:	6818      	ldr	r0, [r3, #0]
 800fa88:	fa00 f009 	lsl.w	r0, r0, r9
 800fa8c:	4310      	orrs	r0, r2
 800fa8e:	f84a 0b04 	str.w	r0, [sl], #4
 800fa92:	f853 2b04 	ldr.w	r2, [r3], #4
 800fa96:	459c      	cmp	ip, r3
 800fa98:	fa22 f20e 	lsr.w	r2, r2, lr
 800fa9c:	d8f3      	bhi.n	800fa86 <__lshift+0x6e>
 800fa9e:	ebac 0304 	sub.w	r3, ip, r4
 800faa2:	3b15      	subs	r3, #21
 800faa4:	f023 0303 	bic.w	r3, r3, #3
 800faa8:	3304      	adds	r3, #4
 800faaa:	f104 0015 	add.w	r0, r4, #21
 800faae:	4560      	cmp	r0, ip
 800fab0:	bf88      	it	hi
 800fab2:	2304      	movhi	r3, #4
 800fab4:	50ca      	str	r2, [r1, r3]
 800fab6:	b10a      	cbz	r2, 800fabc <__lshift+0xa4>
 800fab8:	f108 0602 	add.w	r6, r8, #2
 800fabc:	3e01      	subs	r6, #1
 800fabe:	4638      	mov	r0, r7
 800fac0:	612e      	str	r6, [r5, #16]
 800fac2:	4621      	mov	r1, r4
 800fac4:	f7ff fd98 	bl	800f5f8 <_Bfree>
 800fac8:	4628      	mov	r0, r5
 800faca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800face:	f842 0f04 	str.w	r0, [r2, #4]!
 800fad2:	3301      	adds	r3, #1
 800fad4:	e7c5      	b.n	800fa62 <__lshift+0x4a>
 800fad6:	3904      	subs	r1, #4
 800fad8:	f853 2b04 	ldr.w	r2, [r3], #4
 800fadc:	f841 2f04 	str.w	r2, [r1, #4]!
 800fae0:	459c      	cmp	ip, r3
 800fae2:	d8f9      	bhi.n	800fad8 <__lshift+0xc0>
 800fae4:	e7ea      	b.n	800fabc <__lshift+0xa4>
 800fae6:	bf00      	nop
 800fae8:	080110fa 	.word	0x080110fa
 800faec:	08011182 	.word	0x08011182

0800faf0 <__mcmp>:
 800faf0:	690a      	ldr	r2, [r1, #16]
 800faf2:	4603      	mov	r3, r0
 800faf4:	6900      	ldr	r0, [r0, #16]
 800faf6:	1a80      	subs	r0, r0, r2
 800faf8:	b530      	push	{r4, r5, lr}
 800fafa:	d10e      	bne.n	800fb1a <__mcmp+0x2a>
 800fafc:	3314      	adds	r3, #20
 800fafe:	3114      	adds	r1, #20
 800fb00:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800fb04:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800fb08:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800fb0c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800fb10:	4295      	cmp	r5, r2
 800fb12:	d003      	beq.n	800fb1c <__mcmp+0x2c>
 800fb14:	d205      	bcs.n	800fb22 <__mcmp+0x32>
 800fb16:	f04f 30ff 	mov.w	r0, #4294967295
 800fb1a:	bd30      	pop	{r4, r5, pc}
 800fb1c:	42a3      	cmp	r3, r4
 800fb1e:	d3f3      	bcc.n	800fb08 <__mcmp+0x18>
 800fb20:	e7fb      	b.n	800fb1a <__mcmp+0x2a>
 800fb22:	2001      	movs	r0, #1
 800fb24:	e7f9      	b.n	800fb1a <__mcmp+0x2a>
	...

0800fb28 <__mdiff>:
 800fb28:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb2c:	4689      	mov	r9, r1
 800fb2e:	4606      	mov	r6, r0
 800fb30:	4611      	mov	r1, r2
 800fb32:	4648      	mov	r0, r9
 800fb34:	4614      	mov	r4, r2
 800fb36:	f7ff ffdb 	bl	800faf0 <__mcmp>
 800fb3a:	1e05      	subs	r5, r0, #0
 800fb3c:	d112      	bne.n	800fb64 <__mdiff+0x3c>
 800fb3e:	4629      	mov	r1, r5
 800fb40:	4630      	mov	r0, r6
 800fb42:	f7ff fd19 	bl	800f578 <_Balloc>
 800fb46:	4602      	mov	r2, r0
 800fb48:	b928      	cbnz	r0, 800fb56 <__mdiff+0x2e>
 800fb4a:	4b3f      	ldr	r3, [pc, #252]	@ (800fc48 <__mdiff+0x120>)
 800fb4c:	f240 2137 	movw	r1, #567	@ 0x237
 800fb50:	483e      	ldr	r0, [pc, #248]	@ (800fc4c <__mdiff+0x124>)
 800fb52:	f000 fd81 	bl	8010658 <__assert_func>
 800fb56:	2301      	movs	r3, #1
 800fb58:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800fb5c:	4610      	mov	r0, r2
 800fb5e:	b003      	add	sp, #12
 800fb60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb64:	bfbc      	itt	lt
 800fb66:	464b      	movlt	r3, r9
 800fb68:	46a1      	movlt	r9, r4
 800fb6a:	4630      	mov	r0, r6
 800fb6c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800fb70:	bfba      	itte	lt
 800fb72:	461c      	movlt	r4, r3
 800fb74:	2501      	movlt	r5, #1
 800fb76:	2500      	movge	r5, #0
 800fb78:	f7ff fcfe 	bl	800f578 <_Balloc>
 800fb7c:	4602      	mov	r2, r0
 800fb7e:	b918      	cbnz	r0, 800fb88 <__mdiff+0x60>
 800fb80:	4b31      	ldr	r3, [pc, #196]	@ (800fc48 <__mdiff+0x120>)
 800fb82:	f240 2145 	movw	r1, #581	@ 0x245
 800fb86:	e7e3      	b.n	800fb50 <__mdiff+0x28>
 800fb88:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800fb8c:	6926      	ldr	r6, [r4, #16]
 800fb8e:	60c5      	str	r5, [r0, #12]
 800fb90:	f109 0310 	add.w	r3, r9, #16
 800fb94:	f109 0514 	add.w	r5, r9, #20
 800fb98:	f104 0e14 	add.w	lr, r4, #20
 800fb9c:	f100 0b14 	add.w	fp, r0, #20
 800fba0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800fba4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800fba8:	9301      	str	r3, [sp, #4]
 800fbaa:	46d9      	mov	r9, fp
 800fbac:	f04f 0c00 	mov.w	ip, #0
 800fbb0:	9b01      	ldr	r3, [sp, #4]
 800fbb2:	f85e 0b04 	ldr.w	r0, [lr], #4
 800fbb6:	f853 af04 	ldr.w	sl, [r3, #4]!
 800fbba:	9301      	str	r3, [sp, #4]
 800fbbc:	fa1f f38a 	uxth.w	r3, sl
 800fbc0:	4619      	mov	r1, r3
 800fbc2:	b283      	uxth	r3, r0
 800fbc4:	1acb      	subs	r3, r1, r3
 800fbc6:	0c00      	lsrs	r0, r0, #16
 800fbc8:	4463      	add	r3, ip
 800fbca:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800fbce:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800fbd2:	b29b      	uxth	r3, r3
 800fbd4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800fbd8:	4576      	cmp	r6, lr
 800fbda:	f849 3b04 	str.w	r3, [r9], #4
 800fbde:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800fbe2:	d8e5      	bhi.n	800fbb0 <__mdiff+0x88>
 800fbe4:	1b33      	subs	r3, r6, r4
 800fbe6:	3b15      	subs	r3, #21
 800fbe8:	f023 0303 	bic.w	r3, r3, #3
 800fbec:	3415      	adds	r4, #21
 800fbee:	3304      	adds	r3, #4
 800fbf0:	42a6      	cmp	r6, r4
 800fbf2:	bf38      	it	cc
 800fbf4:	2304      	movcc	r3, #4
 800fbf6:	441d      	add	r5, r3
 800fbf8:	445b      	add	r3, fp
 800fbfa:	461e      	mov	r6, r3
 800fbfc:	462c      	mov	r4, r5
 800fbfe:	4544      	cmp	r4, r8
 800fc00:	d30e      	bcc.n	800fc20 <__mdiff+0xf8>
 800fc02:	f108 0103 	add.w	r1, r8, #3
 800fc06:	1b49      	subs	r1, r1, r5
 800fc08:	f021 0103 	bic.w	r1, r1, #3
 800fc0c:	3d03      	subs	r5, #3
 800fc0e:	45a8      	cmp	r8, r5
 800fc10:	bf38      	it	cc
 800fc12:	2100      	movcc	r1, #0
 800fc14:	440b      	add	r3, r1
 800fc16:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800fc1a:	b191      	cbz	r1, 800fc42 <__mdiff+0x11a>
 800fc1c:	6117      	str	r7, [r2, #16]
 800fc1e:	e79d      	b.n	800fb5c <__mdiff+0x34>
 800fc20:	f854 1b04 	ldr.w	r1, [r4], #4
 800fc24:	46e6      	mov	lr, ip
 800fc26:	0c08      	lsrs	r0, r1, #16
 800fc28:	fa1c fc81 	uxtah	ip, ip, r1
 800fc2c:	4471      	add	r1, lr
 800fc2e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800fc32:	b289      	uxth	r1, r1
 800fc34:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800fc38:	f846 1b04 	str.w	r1, [r6], #4
 800fc3c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800fc40:	e7dd      	b.n	800fbfe <__mdiff+0xd6>
 800fc42:	3f01      	subs	r7, #1
 800fc44:	e7e7      	b.n	800fc16 <__mdiff+0xee>
 800fc46:	bf00      	nop
 800fc48:	080110fa 	.word	0x080110fa
 800fc4c:	08011182 	.word	0x08011182

0800fc50 <__ulp>:
 800fc50:	b082      	sub	sp, #8
 800fc52:	ed8d 0b00 	vstr	d0, [sp]
 800fc56:	9a01      	ldr	r2, [sp, #4]
 800fc58:	4b0f      	ldr	r3, [pc, #60]	@ (800fc98 <__ulp+0x48>)
 800fc5a:	4013      	ands	r3, r2
 800fc5c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800fc60:	2b00      	cmp	r3, #0
 800fc62:	dc08      	bgt.n	800fc76 <__ulp+0x26>
 800fc64:	425b      	negs	r3, r3
 800fc66:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800fc6a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800fc6e:	da04      	bge.n	800fc7a <__ulp+0x2a>
 800fc70:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800fc74:	4113      	asrs	r3, r2
 800fc76:	2200      	movs	r2, #0
 800fc78:	e008      	b.n	800fc8c <__ulp+0x3c>
 800fc7a:	f1a2 0314 	sub.w	r3, r2, #20
 800fc7e:	2b1e      	cmp	r3, #30
 800fc80:	bfda      	itte	le
 800fc82:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800fc86:	40da      	lsrle	r2, r3
 800fc88:	2201      	movgt	r2, #1
 800fc8a:	2300      	movs	r3, #0
 800fc8c:	4619      	mov	r1, r3
 800fc8e:	4610      	mov	r0, r2
 800fc90:	ec41 0b10 	vmov	d0, r0, r1
 800fc94:	b002      	add	sp, #8
 800fc96:	4770      	bx	lr
 800fc98:	7ff00000 	.word	0x7ff00000

0800fc9c <__b2d>:
 800fc9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fca0:	6906      	ldr	r6, [r0, #16]
 800fca2:	f100 0814 	add.w	r8, r0, #20
 800fca6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800fcaa:	1f37      	subs	r7, r6, #4
 800fcac:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800fcb0:	4610      	mov	r0, r2
 800fcb2:	f7ff fd53 	bl	800f75c <__hi0bits>
 800fcb6:	f1c0 0320 	rsb	r3, r0, #32
 800fcba:	280a      	cmp	r0, #10
 800fcbc:	600b      	str	r3, [r1, #0]
 800fcbe:	491b      	ldr	r1, [pc, #108]	@ (800fd2c <__b2d+0x90>)
 800fcc0:	dc15      	bgt.n	800fcee <__b2d+0x52>
 800fcc2:	f1c0 0c0b 	rsb	ip, r0, #11
 800fcc6:	fa22 f30c 	lsr.w	r3, r2, ip
 800fcca:	45b8      	cmp	r8, r7
 800fccc:	ea43 0501 	orr.w	r5, r3, r1
 800fcd0:	bf34      	ite	cc
 800fcd2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800fcd6:	2300      	movcs	r3, #0
 800fcd8:	3015      	adds	r0, #21
 800fcda:	fa02 f000 	lsl.w	r0, r2, r0
 800fcde:	fa23 f30c 	lsr.w	r3, r3, ip
 800fce2:	4303      	orrs	r3, r0
 800fce4:	461c      	mov	r4, r3
 800fce6:	ec45 4b10 	vmov	d0, r4, r5
 800fcea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fcee:	45b8      	cmp	r8, r7
 800fcf0:	bf3a      	itte	cc
 800fcf2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800fcf6:	f1a6 0708 	subcc.w	r7, r6, #8
 800fcfa:	2300      	movcs	r3, #0
 800fcfc:	380b      	subs	r0, #11
 800fcfe:	d012      	beq.n	800fd26 <__b2d+0x8a>
 800fd00:	f1c0 0120 	rsb	r1, r0, #32
 800fd04:	fa23 f401 	lsr.w	r4, r3, r1
 800fd08:	4082      	lsls	r2, r0
 800fd0a:	4322      	orrs	r2, r4
 800fd0c:	4547      	cmp	r7, r8
 800fd0e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800fd12:	bf8c      	ite	hi
 800fd14:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800fd18:	2200      	movls	r2, #0
 800fd1a:	4083      	lsls	r3, r0
 800fd1c:	40ca      	lsrs	r2, r1
 800fd1e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800fd22:	4313      	orrs	r3, r2
 800fd24:	e7de      	b.n	800fce4 <__b2d+0x48>
 800fd26:	ea42 0501 	orr.w	r5, r2, r1
 800fd2a:	e7db      	b.n	800fce4 <__b2d+0x48>
 800fd2c:	3ff00000 	.word	0x3ff00000

0800fd30 <__d2b>:
 800fd30:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800fd34:	460f      	mov	r7, r1
 800fd36:	2101      	movs	r1, #1
 800fd38:	ec59 8b10 	vmov	r8, r9, d0
 800fd3c:	4616      	mov	r6, r2
 800fd3e:	f7ff fc1b 	bl	800f578 <_Balloc>
 800fd42:	4604      	mov	r4, r0
 800fd44:	b930      	cbnz	r0, 800fd54 <__d2b+0x24>
 800fd46:	4602      	mov	r2, r0
 800fd48:	4b23      	ldr	r3, [pc, #140]	@ (800fdd8 <__d2b+0xa8>)
 800fd4a:	4824      	ldr	r0, [pc, #144]	@ (800fddc <__d2b+0xac>)
 800fd4c:	f240 310f 	movw	r1, #783	@ 0x30f
 800fd50:	f000 fc82 	bl	8010658 <__assert_func>
 800fd54:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800fd58:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800fd5c:	b10d      	cbz	r5, 800fd62 <__d2b+0x32>
 800fd5e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800fd62:	9301      	str	r3, [sp, #4]
 800fd64:	f1b8 0300 	subs.w	r3, r8, #0
 800fd68:	d023      	beq.n	800fdb2 <__d2b+0x82>
 800fd6a:	4668      	mov	r0, sp
 800fd6c:	9300      	str	r3, [sp, #0]
 800fd6e:	f7ff fd14 	bl	800f79a <__lo0bits>
 800fd72:	e9dd 1200 	ldrd	r1, r2, [sp]
 800fd76:	b1d0      	cbz	r0, 800fdae <__d2b+0x7e>
 800fd78:	f1c0 0320 	rsb	r3, r0, #32
 800fd7c:	fa02 f303 	lsl.w	r3, r2, r3
 800fd80:	430b      	orrs	r3, r1
 800fd82:	40c2      	lsrs	r2, r0
 800fd84:	6163      	str	r3, [r4, #20]
 800fd86:	9201      	str	r2, [sp, #4]
 800fd88:	9b01      	ldr	r3, [sp, #4]
 800fd8a:	61a3      	str	r3, [r4, #24]
 800fd8c:	2b00      	cmp	r3, #0
 800fd8e:	bf0c      	ite	eq
 800fd90:	2201      	moveq	r2, #1
 800fd92:	2202      	movne	r2, #2
 800fd94:	6122      	str	r2, [r4, #16]
 800fd96:	b1a5      	cbz	r5, 800fdc2 <__d2b+0x92>
 800fd98:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800fd9c:	4405      	add	r5, r0
 800fd9e:	603d      	str	r5, [r7, #0]
 800fda0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800fda4:	6030      	str	r0, [r6, #0]
 800fda6:	4620      	mov	r0, r4
 800fda8:	b003      	add	sp, #12
 800fdaa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fdae:	6161      	str	r1, [r4, #20]
 800fdb0:	e7ea      	b.n	800fd88 <__d2b+0x58>
 800fdb2:	a801      	add	r0, sp, #4
 800fdb4:	f7ff fcf1 	bl	800f79a <__lo0bits>
 800fdb8:	9b01      	ldr	r3, [sp, #4]
 800fdba:	6163      	str	r3, [r4, #20]
 800fdbc:	3020      	adds	r0, #32
 800fdbe:	2201      	movs	r2, #1
 800fdc0:	e7e8      	b.n	800fd94 <__d2b+0x64>
 800fdc2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800fdc6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800fdca:	6038      	str	r0, [r7, #0]
 800fdcc:	6918      	ldr	r0, [r3, #16]
 800fdce:	f7ff fcc5 	bl	800f75c <__hi0bits>
 800fdd2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800fdd6:	e7e5      	b.n	800fda4 <__d2b+0x74>
 800fdd8:	080110fa 	.word	0x080110fa
 800fddc:	08011182 	.word	0x08011182

0800fde0 <__ratio>:
 800fde0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fde4:	b085      	sub	sp, #20
 800fde6:	e9cd 1000 	strd	r1, r0, [sp]
 800fdea:	a902      	add	r1, sp, #8
 800fdec:	f7ff ff56 	bl	800fc9c <__b2d>
 800fdf0:	9800      	ldr	r0, [sp, #0]
 800fdf2:	a903      	add	r1, sp, #12
 800fdf4:	ec55 4b10 	vmov	r4, r5, d0
 800fdf8:	f7ff ff50 	bl	800fc9c <__b2d>
 800fdfc:	9b01      	ldr	r3, [sp, #4]
 800fdfe:	6919      	ldr	r1, [r3, #16]
 800fe00:	9b00      	ldr	r3, [sp, #0]
 800fe02:	691b      	ldr	r3, [r3, #16]
 800fe04:	1ac9      	subs	r1, r1, r3
 800fe06:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800fe0a:	1a9b      	subs	r3, r3, r2
 800fe0c:	ec5b ab10 	vmov	sl, fp, d0
 800fe10:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800fe14:	2b00      	cmp	r3, #0
 800fe16:	bfce      	itee	gt
 800fe18:	462a      	movgt	r2, r5
 800fe1a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800fe1e:	465a      	movle	r2, fp
 800fe20:	462f      	mov	r7, r5
 800fe22:	46d9      	mov	r9, fp
 800fe24:	bfcc      	ite	gt
 800fe26:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800fe2a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800fe2e:	464b      	mov	r3, r9
 800fe30:	4652      	mov	r2, sl
 800fe32:	4620      	mov	r0, r4
 800fe34:	4639      	mov	r1, r7
 800fe36:	f7f0 fd19 	bl	800086c <__aeabi_ddiv>
 800fe3a:	ec41 0b10 	vmov	d0, r0, r1
 800fe3e:	b005      	add	sp, #20
 800fe40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800fe44 <__copybits>:
 800fe44:	3901      	subs	r1, #1
 800fe46:	b570      	push	{r4, r5, r6, lr}
 800fe48:	1149      	asrs	r1, r1, #5
 800fe4a:	6914      	ldr	r4, [r2, #16]
 800fe4c:	3101      	adds	r1, #1
 800fe4e:	f102 0314 	add.w	r3, r2, #20
 800fe52:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800fe56:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800fe5a:	1f05      	subs	r5, r0, #4
 800fe5c:	42a3      	cmp	r3, r4
 800fe5e:	d30c      	bcc.n	800fe7a <__copybits+0x36>
 800fe60:	1aa3      	subs	r3, r4, r2
 800fe62:	3b11      	subs	r3, #17
 800fe64:	f023 0303 	bic.w	r3, r3, #3
 800fe68:	3211      	adds	r2, #17
 800fe6a:	42a2      	cmp	r2, r4
 800fe6c:	bf88      	it	hi
 800fe6e:	2300      	movhi	r3, #0
 800fe70:	4418      	add	r0, r3
 800fe72:	2300      	movs	r3, #0
 800fe74:	4288      	cmp	r0, r1
 800fe76:	d305      	bcc.n	800fe84 <__copybits+0x40>
 800fe78:	bd70      	pop	{r4, r5, r6, pc}
 800fe7a:	f853 6b04 	ldr.w	r6, [r3], #4
 800fe7e:	f845 6f04 	str.w	r6, [r5, #4]!
 800fe82:	e7eb      	b.n	800fe5c <__copybits+0x18>
 800fe84:	f840 3b04 	str.w	r3, [r0], #4
 800fe88:	e7f4      	b.n	800fe74 <__copybits+0x30>

0800fe8a <__any_on>:
 800fe8a:	f100 0214 	add.w	r2, r0, #20
 800fe8e:	6900      	ldr	r0, [r0, #16]
 800fe90:	114b      	asrs	r3, r1, #5
 800fe92:	4298      	cmp	r0, r3
 800fe94:	b510      	push	{r4, lr}
 800fe96:	db11      	blt.n	800febc <__any_on+0x32>
 800fe98:	dd0a      	ble.n	800feb0 <__any_on+0x26>
 800fe9a:	f011 011f 	ands.w	r1, r1, #31
 800fe9e:	d007      	beq.n	800feb0 <__any_on+0x26>
 800fea0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800fea4:	fa24 f001 	lsr.w	r0, r4, r1
 800fea8:	fa00 f101 	lsl.w	r1, r0, r1
 800feac:	428c      	cmp	r4, r1
 800feae:	d10b      	bne.n	800fec8 <__any_on+0x3e>
 800feb0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800feb4:	4293      	cmp	r3, r2
 800feb6:	d803      	bhi.n	800fec0 <__any_on+0x36>
 800feb8:	2000      	movs	r0, #0
 800feba:	bd10      	pop	{r4, pc}
 800febc:	4603      	mov	r3, r0
 800febe:	e7f7      	b.n	800feb0 <__any_on+0x26>
 800fec0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800fec4:	2900      	cmp	r1, #0
 800fec6:	d0f5      	beq.n	800feb4 <__any_on+0x2a>
 800fec8:	2001      	movs	r0, #1
 800feca:	e7f6      	b.n	800feba <__any_on+0x30>

0800fecc <__ascii_wctomb>:
 800fecc:	4603      	mov	r3, r0
 800fece:	4608      	mov	r0, r1
 800fed0:	b141      	cbz	r1, 800fee4 <__ascii_wctomb+0x18>
 800fed2:	2aff      	cmp	r2, #255	@ 0xff
 800fed4:	d904      	bls.n	800fee0 <__ascii_wctomb+0x14>
 800fed6:	228a      	movs	r2, #138	@ 0x8a
 800fed8:	601a      	str	r2, [r3, #0]
 800feda:	f04f 30ff 	mov.w	r0, #4294967295
 800fede:	4770      	bx	lr
 800fee0:	700a      	strb	r2, [r1, #0]
 800fee2:	2001      	movs	r0, #1
 800fee4:	4770      	bx	lr

0800fee6 <__ssputs_r>:
 800fee6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800feea:	688e      	ldr	r6, [r1, #8]
 800feec:	461f      	mov	r7, r3
 800feee:	42be      	cmp	r6, r7
 800fef0:	680b      	ldr	r3, [r1, #0]
 800fef2:	4682      	mov	sl, r0
 800fef4:	460c      	mov	r4, r1
 800fef6:	4690      	mov	r8, r2
 800fef8:	d82d      	bhi.n	800ff56 <__ssputs_r+0x70>
 800fefa:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800fefe:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800ff02:	d026      	beq.n	800ff52 <__ssputs_r+0x6c>
 800ff04:	6965      	ldr	r5, [r4, #20]
 800ff06:	6909      	ldr	r1, [r1, #16]
 800ff08:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ff0c:	eba3 0901 	sub.w	r9, r3, r1
 800ff10:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ff14:	1c7b      	adds	r3, r7, #1
 800ff16:	444b      	add	r3, r9
 800ff18:	106d      	asrs	r5, r5, #1
 800ff1a:	429d      	cmp	r5, r3
 800ff1c:	bf38      	it	cc
 800ff1e:	461d      	movcc	r5, r3
 800ff20:	0553      	lsls	r3, r2, #21
 800ff22:	d527      	bpl.n	800ff74 <__ssputs_r+0x8e>
 800ff24:	4629      	mov	r1, r5
 800ff26:	f7ff fa89 	bl	800f43c <_malloc_r>
 800ff2a:	4606      	mov	r6, r0
 800ff2c:	b360      	cbz	r0, 800ff88 <__ssputs_r+0xa2>
 800ff2e:	6921      	ldr	r1, [r4, #16]
 800ff30:	464a      	mov	r2, r9
 800ff32:	f7fe fec6 	bl	800ecc2 <memcpy>
 800ff36:	89a3      	ldrh	r3, [r4, #12]
 800ff38:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ff3c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ff40:	81a3      	strh	r3, [r4, #12]
 800ff42:	6126      	str	r6, [r4, #16]
 800ff44:	6165      	str	r5, [r4, #20]
 800ff46:	444e      	add	r6, r9
 800ff48:	eba5 0509 	sub.w	r5, r5, r9
 800ff4c:	6026      	str	r6, [r4, #0]
 800ff4e:	60a5      	str	r5, [r4, #8]
 800ff50:	463e      	mov	r6, r7
 800ff52:	42be      	cmp	r6, r7
 800ff54:	d900      	bls.n	800ff58 <__ssputs_r+0x72>
 800ff56:	463e      	mov	r6, r7
 800ff58:	6820      	ldr	r0, [r4, #0]
 800ff5a:	4632      	mov	r2, r6
 800ff5c:	4641      	mov	r1, r8
 800ff5e:	f000 fb51 	bl	8010604 <memmove>
 800ff62:	68a3      	ldr	r3, [r4, #8]
 800ff64:	1b9b      	subs	r3, r3, r6
 800ff66:	60a3      	str	r3, [r4, #8]
 800ff68:	6823      	ldr	r3, [r4, #0]
 800ff6a:	4433      	add	r3, r6
 800ff6c:	6023      	str	r3, [r4, #0]
 800ff6e:	2000      	movs	r0, #0
 800ff70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ff74:	462a      	mov	r2, r5
 800ff76:	f000 fba9 	bl	80106cc <_realloc_r>
 800ff7a:	4606      	mov	r6, r0
 800ff7c:	2800      	cmp	r0, #0
 800ff7e:	d1e0      	bne.n	800ff42 <__ssputs_r+0x5c>
 800ff80:	6921      	ldr	r1, [r4, #16]
 800ff82:	4650      	mov	r0, sl
 800ff84:	f7fe feb4 	bl	800ecf0 <_free_r>
 800ff88:	230c      	movs	r3, #12
 800ff8a:	f8ca 3000 	str.w	r3, [sl]
 800ff8e:	89a3      	ldrh	r3, [r4, #12]
 800ff90:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ff94:	81a3      	strh	r3, [r4, #12]
 800ff96:	f04f 30ff 	mov.w	r0, #4294967295
 800ff9a:	e7e9      	b.n	800ff70 <__ssputs_r+0x8a>

0800ff9c <_svfiprintf_r>:
 800ff9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ffa0:	4698      	mov	r8, r3
 800ffa2:	898b      	ldrh	r3, [r1, #12]
 800ffa4:	061b      	lsls	r3, r3, #24
 800ffa6:	b09d      	sub	sp, #116	@ 0x74
 800ffa8:	4607      	mov	r7, r0
 800ffaa:	460d      	mov	r5, r1
 800ffac:	4614      	mov	r4, r2
 800ffae:	d510      	bpl.n	800ffd2 <_svfiprintf_r+0x36>
 800ffb0:	690b      	ldr	r3, [r1, #16]
 800ffb2:	b973      	cbnz	r3, 800ffd2 <_svfiprintf_r+0x36>
 800ffb4:	2140      	movs	r1, #64	@ 0x40
 800ffb6:	f7ff fa41 	bl	800f43c <_malloc_r>
 800ffba:	6028      	str	r0, [r5, #0]
 800ffbc:	6128      	str	r0, [r5, #16]
 800ffbe:	b930      	cbnz	r0, 800ffce <_svfiprintf_r+0x32>
 800ffc0:	230c      	movs	r3, #12
 800ffc2:	603b      	str	r3, [r7, #0]
 800ffc4:	f04f 30ff 	mov.w	r0, #4294967295
 800ffc8:	b01d      	add	sp, #116	@ 0x74
 800ffca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ffce:	2340      	movs	r3, #64	@ 0x40
 800ffd0:	616b      	str	r3, [r5, #20]
 800ffd2:	2300      	movs	r3, #0
 800ffd4:	9309      	str	r3, [sp, #36]	@ 0x24
 800ffd6:	2320      	movs	r3, #32
 800ffd8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ffdc:	f8cd 800c 	str.w	r8, [sp, #12]
 800ffe0:	2330      	movs	r3, #48	@ 0x30
 800ffe2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8010180 <_svfiprintf_r+0x1e4>
 800ffe6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ffea:	f04f 0901 	mov.w	r9, #1
 800ffee:	4623      	mov	r3, r4
 800fff0:	469a      	mov	sl, r3
 800fff2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fff6:	b10a      	cbz	r2, 800fffc <_svfiprintf_r+0x60>
 800fff8:	2a25      	cmp	r2, #37	@ 0x25
 800fffa:	d1f9      	bne.n	800fff0 <_svfiprintf_r+0x54>
 800fffc:	ebba 0b04 	subs.w	fp, sl, r4
 8010000:	d00b      	beq.n	801001a <_svfiprintf_r+0x7e>
 8010002:	465b      	mov	r3, fp
 8010004:	4622      	mov	r2, r4
 8010006:	4629      	mov	r1, r5
 8010008:	4638      	mov	r0, r7
 801000a:	f7ff ff6c 	bl	800fee6 <__ssputs_r>
 801000e:	3001      	adds	r0, #1
 8010010:	f000 80a7 	beq.w	8010162 <_svfiprintf_r+0x1c6>
 8010014:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010016:	445a      	add	r2, fp
 8010018:	9209      	str	r2, [sp, #36]	@ 0x24
 801001a:	f89a 3000 	ldrb.w	r3, [sl]
 801001e:	2b00      	cmp	r3, #0
 8010020:	f000 809f 	beq.w	8010162 <_svfiprintf_r+0x1c6>
 8010024:	2300      	movs	r3, #0
 8010026:	f04f 32ff 	mov.w	r2, #4294967295
 801002a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801002e:	f10a 0a01 	add.w	sl, sl, #1
 8010032:	9304      	str	r3, [sp, #16]
 8010034:	9307      	str	r3, [sp, #28]
 8010036:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801003a:	931a      	str	r3, [sp, #104]	@ 0x68
 801003c:	4654      	mov	r4, sl
 801003e:	2205      	movs	r2, #5
 8010040:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010044:	484e      	ldr	r0, [pc, #312]	@ (8010180 <_svfiprintf_r+0x1e4>)
 8010046:	f7f0 f8db 	bl	8000200 <memchr>
 801004a:	9a04      	ldr	r2, [sp, #16]
 801004c:	b9d8      	cbnz	r0, 8010086 <_svfiprintf_r+0xea>
 801004e:	06d0      	lsls	r0, r2, #27
 8010050:	bf44      	itt	mi
 8010052:	2320      	movmi	r3, #32
 8010054:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010058:	0711      	lsls	r1, r2, #28
 801005a:	bf44      	itt	mi
 801005c:	232b      	movmi	r3, #43	@ 0x2b
 801005e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010062:	f89a 3000 	ldrb.w	r3, [sl]
 8010066:	2b2a      	cmp	r3, #42	@ 0x2a
 8010068:	d015      	beq.n	8010096 <_svfiprintf_r+0xfa>
 801006a:	9a07      	ldr	r2, [sp, #28]
 801006c:	4654      	mov	r4, sl
 801006e:	2000      	movs	r0, #0
 8010070:	f04f 0c0a 	mov.w	ip, #10
 8010074:	4621      	mov	r1, r4
 8010076:	f811 3b01 	ldrb.w	r3, [r1], #1
 801007a:	3b30      	subs	r3, #48	@ 0x30
 801007c:	2b09      	cmp	r3, #9
 801007e:	d94b      	bls.n	8010118 <_svfiprintf_r+0x17c>
 8010080:	b1b0      	cbz	r0, 80100b0 <_svfiprintf_r+0x114>
 8010082:	9207      	str	r2, [sp, #28]
 8010084:	e014      	b.n	80100b0 <_svfiprintf_r+0x114>
 8010086:	eba0 0308 	sub.w	r3, r0, r8
 801008a:	fa09 f303 	lsl.w	r3, r9, r3
 801008e:	4313      	orrs	r3, r2
 8010090:	9304      	str	r3, [sp, #16]
 8010092:	46a2      	mov	sl, r4
 8010094:	e7d2      	b.n	801003c <_svfiprintf_r+0xa0>
 8010096:	9b03      	ldr	r3, [sp, #12]
 8010098:	1d19      	adds	r1, r3, #4
 801009a:	681b      	ldr	r3, [r3, #0]
 801009c:	9103      	str	r1, [sp, #12]
 801009e:	2b00      	cmp	r3, #0
 80100a0:	bfbb      	ittet	lt
 80100a2:	425b      	neglt	r3, r3
 80100a4:	f042 0202 	orrlt.w	r2, r2, #2
 80100a8:	9307      	strge	r3, [sp, #28]
 80100aa:	9307      	strlt	r3, [sp, #28]
 80100ac:	bfb8      	it	lt
 80100ae:	9204      	strlt	r2, [sp, #16]
 80100b0:	7823      	ldrb	r3, [r4, #0]
 80100b2:	2b2e      	cmp	r3, #46	@ 0x2e
 80100b4:	d10a      	bne.n	80100cc <_svfiprintf_r+0x130>
 80100b6:	7863      	ldrb	r3, [r4, #1]
 80100b8:	2b2a      	cmp	r3, #42	@ 0x2a
 80100ba:	d132      	bne.n	8010122 <_svfiprintf_r+0x186>
 80100bc:	9b03      	ldr	r3, [sp, #12]
 80100be:	1d1a      	adds	r2, r3, #4
 80100c0:	681b      	ldr	r3, [r3, #0]
 80100c2:	9203      	str	r2, [sp, #12]
 80100c4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80100c8:	3402      	adds	r4, #2
 80100ca:	9305      	str	r3, [sp, #20]
 80100cc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8010190 <_svfiprintf_r+0x1f4>
 80100d0:	7821      	ldrb	r1, [r4, #0]
 80100d2:	2203      	movs	r2, #3
 80100d4:	4650      	mov	r0, sl
 80100d6:	f7f0 f893 	bl	8000200 <memchr>
 80100da:	b138      	cbz	r0, 80100ec <_svfiprintf_r+0x150>
 80100dc:	9b04      	ldr	r3, [sp, #16]
 80100de:	eba0 000a 	sub.w	r0, r0, sl
 80100e2:	2240      	movs	r2, #64	@ 0x40
 80100e4:	4082      	lsls	r2, r0
 80100e6:	4313      	orrs	r3, r2
 80100e8:	3401      	adds	r4, #1
 80100ea:	9304      	str	r3, [sp, #16]
 80100ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80100f0:	4824      	ldr	r0, [pc, #144]	@ (8010184 <_svfiprintf_r+0x1e8>)
 80100f2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80100f6:	2206      	movs	r2, #6
 80100f8:	f7f0 f882 	bl	8000200 <memchr>
 80100fc:	2800      	cmp	r0, #0
 80100fe:	d036      	beq.n	801016e <_svfiprintf_r+0x1d2>
 8010100:	4b21      	ldr	r3, [pc, #132]	@ (8010188 <_svfiprintf_r+0x1ec>)
 8010102:	bb1b      	cbnz	r3, 801014c <_svfiprintf_r+0x1b0>
 8010104:	9b03      	ldr	r3, [sp, #12]
 8010106:	3307      	adds	r3, #7
 8010108:	f023 0307 	bic.w	r3, r3, #7
 801010c:	3308      	adds	r3, #8
 801010e:	9303      	str	r3, [sp, #12]
 8010110:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010112:	4433      	add	r3, r6
 8010114:	9309      	str	r3, [sp, #36]	@ 0x24
 8010116:	e76a      	b.n	800ffee <_svfiprintf_r+0x52>
 8010118:	fb0c 3202 	mla	r2, ip, r2, r3
 801011c:	460c      	mov	r4, r1
 801011e:	2001      	movs	r0, #1
 8010120:	e7a8      	b.n	8010074 <_svfiprintf_r+0xd8>
 8010122:	2300      	movs	r3, #0
 8010124:	3401      	adds	r4, #1
 8010126:	9305      	str	r3, [sp, #20]
 8010128:	4619      	mov	r1, r3
 801012a:	f04f 0c0a 	mov.w	ip, #10
 801012e:	4620      	mov	r0, r4
 8010130:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010134:	3a30      	subs	r2, #48	@ 0x30
 8010136:	2a09      	cmp	r2, #9
 8010138:	d903      	bls.n	8010142 <_svfiprintf_r+0x1a6>
 801013a:	2b00      	cmp	r3, #0
 801013c:	d0c6      	beq.n	80100cc <_svfiprintf_r+0x130>
 801013e:	9105      	str	r1, [sp, #20]
 8010140:	e7c4      	b.n	80100cc <_svfiprintf_r+0x130>
 8010142:	fb0c 2101 	mla	r1, ip, r1, r2
 8010146:	4604      	mov	r4, r0
 8010148:	2301      	movs	r3, #1
 801014a:	e7f0      	b.n	801012e <_svfiprintf_r+0x192>
 801014c:	ab03      	add	r3, sp, #12
 801014e:	9300      	str	r3, [sp, #0]
 8010150:	462a      	mov	r2, r5
 8010152:	4b0e      	ldr	r3, [pc, #56]	@ (801018c <_svfiprintf_r+0x1f0>)
 8010154:	a904      	add	r1, sp, #16
 8010156:	4638      	mov	r0, r7
 8010158:	f3af 8000 	nop.w
 801015c:	1c42      	adds	r2, r0, #1
 801015e:	4606      	mov	r6, r0
 8010160:	d1d6      	bne.n	8010110 <_svfiprintf_r+0x174>
 8010162:	89ab      	ldrh	r3, [r5, #12]
 8010164:	065b      	lsls	r3, r3, #25
 8010166:	f53f af2d 	bmi.w	800ffc4 <_svfiprintf_r+0x28>
 801016a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801016c:	e72c      	b.n	800ffc8 <_svfiprintf_r+0x2c>
 801016e:	ab03      	add	r3, sp, #12
 8010170:	9300      	str	r3, [sp, #0]
 8010172:	462a      	mov	r2, r5
 8010174:	4b05      	ldr	r3, [pc, #20]	@ (801018c <_svfiprintf_r+0x1f0>)
 8010176:	a904      	add	r1, sp, #16
 8010178:	4638      	mov	r0, r7
 801017a:	f000 f879 	bl	8010270 <_printf_i>
 801017e:	e7ed      	b.n	801015c <_svfiprintf_r+0x1c0>
 8010180:	080111db 	.word	0x080111db
 8010184:	080111e5 	.word	0x080111e5
 8010188:	00000000 	.word	0x00000000
 801018c:	0800fee7 	.word	0x0800fee7
 8010190:	080111e1 	.word	0x080111e1

08010194 <_printf_common>:
 8010194:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010198:	4616      	mov	r6, r2
 801019a:	4698      	mov	r8, r3
 801019c:	688a      	ldr	r2, [r1, #8]
 801019e:	690b      	ldr	r3, [r1, #16]
 80101a0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80101a4:	4293      	cmp	r3, r2
 80101a6:	bfb8      	it	lt
 80101a8:	4613      	movlt	r3, r2
 80101aa:	6033      	str	r3, [r6, #0]
 80101ac:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80101b0:	4607      	mov	r7, r0
 80101b2:	460c      	mov	r4, r1
 80101b4:	b10a      	cbz	r2, 80101ba <_printf_common+0x26>
 80101b6:	3301      	adds	r3, #1
 80101b8:	6033      	str	r3, [r6, #0]
 80101ba:	6823      	ldr	r3, [r4, #0]
 80101bc:	0699      	lsls	r1, r3, #26
 80101be:	bf42      	ittt	mi
 80101c0:	6833      	ldrmi	r3, [r6, #0]
 80101c2:	3302      	addmi	r3, #2
 80101c4:	6033      	strmi	r3, [r6, #0]
 80101c6:	6825      	ldr	r5, [r4, #0]
 80101c8:	f015 0506 	ands.w	r5, r5, #6
 80101cc:	d106      	bne.n	80101dc <_printf_common+0x48>
 80101ce:	f104 0a19 	add.w	sl, r4, #25
 80101d2:	68e3      	ldr	r3, [r4, #12]
 80101d4:	6832      	ldr	r2, [r6, #0]
 80101d6:	1a9b      	subs	r3, r3, r2
 80101d8:	42ab      	cmp	r3, r5
 80101da:	dc26      	bgt.n	801022a <_printf_common+0x96>
 80101dc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80101e0:	6822      	ldr	r2, [r4, #0]
 80101e2:	3b00      	subs	r3, #0
 80101e4:	bf18      	it	ne
 80101e6:	2301      	movne	r3, #1
 80101e8:	0692      	lsls	r2, r2, #26
 80101ea:	d42b      	bmi.n	8010244 <_printf_common+0xb0>
 80101ec:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80101f0:	4641      	mov	r1, r8
 80101f2:	4638      	mov	r0, r7
 80101f4:	47c8      	blx	r9
 80101f6:	3001      	adds	r0, #1
 80101f8:	d01e      	beq.n	8010238 <_printf_common+0xa4>
 80101fa:	6823      	ldr	r3, [r4, #0]
 80101fc:	6922      	ldr	r2, [r4, #16]
 80101fe:	f003 0306 	and.w	r3, r3, #6
 8010202:	2b04      	cmp	r3, #4
 8010204:	bf02      	ittt	eq
 8010206:	68e5      	ldreq	r5, [r4, #12]
 8010208:	6833      	ldreq	r3, [r6, #0]
 801020a:	1aed      	subeq	r5, r5, r3
 801020c:	68a3      	ldr	r3, [r4, #8]
 801020e:	bf0c      	ite	eq
 8010210:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010214:	2500      	movne	r5, #0
 8010216:	4293      	cmp	r3, r2
 8010218:	bfc4      	itt	gt
 801021a:	1a9b      	subgt	r3, r3, r2
 801021c:	18ed      	addgt	r5, r5, r3
 801021e:	2600      	movs	r6, #0
 8010220:	341a      	adds	r4, #26
 8010222:	42b5      	cmp	r5, r6
 8010224:	d11a      	bne.n	801025c <_printf_common+0xc8>
 8010226:	2000      	movs	r0, #0
 8010228:	e008      	b.n	801023c <_printf_common+0xa8>
 801022a:	2301      	movs	r3, #1
 801022c:	4652      	mov	r2, sl
 801022e:	4641      	mov	r1, r8
 8010230:	4638      	mov	r0, r7
 8010232:	47c8      	blx	r9
 8010234:	3001      	adds	r0, #1
 8010236:	d103      	bne.n	8010240 <_printf_common+0xac>
 8010238:	f04f 30ff 	mov.w	r0, #4294967295
 801023c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010240:	3501      	adds	r5, #1
 8010242:	e7c6      	b.n	80101d2 <_printf_common+0x3e>
 8010244:	18e1      	adds	r1, r4, r3
 8010246:	1c5a      	adds	r2, r3, #1
 8010248:	2030      	movs	r0, #48	@ 0x30
 801024a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801024e:	4422      	add	r2, r4
 8010250:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8010254:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8010258:	3302      	adds	r3, #2
 801025a:	e7c7      	b.n	80101ec <_printf_common+0x58>
 801025c:	2301      	movs	r3, #1
 801025e:	4622      	mov	r2, r4
 8010260:	4641      	mov	r1, r8
 8010262:	4638      	mov	r0, r7
 8010264:	47c8      	blx	r9
 8010266:	3001      	adds	r0, #1
 8010268:	d0e6      	beq.n	8010238 <_printf_common+0xa4>
 801026a:	3601      	adds	r6, #1
 801026c:	e7d9      	b.n	8010222 <_printf_common+0x8e>
	...

08010270 <_printf_i>:
 8010270:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010274:	7e0f      	ldrb	r7, [r1, #24]
 8010276:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8010278:	2f78      	cmp	r7, #120	@ 0x78
 801027a:	4691      	mov	r9, r2
 801027c:	4680      	mov	r8, r0
 801027e:	460c      	mov	r4, r1
 8010280:	469a      	mov	sl, r3
 8010282:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8010286:	d807      	bhi.n	8010298 <_printf_i+0x28>
 8010288:	2f62      	cmp	r7, #98	@ 0x62
 801028a:	d80a      	bhi.n	80102a2 <_printf_i+0x32>
 801028c:	2f00      	cmp	r7, #0
 801028e:	f000 80d1 	beq.w	8010434 <_printf_i+0x1c4>
 8010292:	2f58      	cmp	r7, #88	@ 0x58
 8010294:	f000 80b8 	beq.w	8010408 <_printf_i+0x198>
 8010298:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801029c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80102a0:	e03a      	b.n	8010318 <_printf_i+0xa8>
 80102a2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80102a6:	2b15      	cmp	r3, #21
 80102a8:	d8f6      	bhi.n	8010298 <_printf_i+0x28>
 80102aa:	a101      	add	r1, pc, #4	@ (adr r1, 80102b0 <_printf_i+0x40>)
 80102ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80102b0:	08010309 	.word	0x08010309
 80102b4:	0801031d 	.word	0x0801031d
 80102b8:	08010299 	.word	0x08010299
 80102bc:	08010299 	.word	0x08010299
 80102c0:	08010299 	.word	0x08010299
 80102c4:	08010299 	.word	0x08010299
 80102c8:	0801031d 	.word	0x0801031d
 80102cc:	08010299 	.word	0x08010299
 80102d0:	08010299 	.word	0x08010299
 80102d4:	08010299 	.word	0x08010299
 80102d8:	08010299 	.word	0x08010299
 80102dc:	0801041b 	.word	0x0801041b
 80102e0:	08010347 	.word	0x08010347
 80102e4:	080103d5 	.word	0x080103d5
 80102e8:	08010299 	.word	0x08010299
 80102ec:	08010299 	.word	0x08010299
 80102f0:	0801043d 	.word	0x0801043d
 80102f4:	08010299 	.word	0x08010299
 80102f8:	08010347 	.word	0x08010347
 80102fc:	08010299 	.word	0x08010299
 8010300:	08010299 	.word	0x08010299
 8010304:	080103dd 	.word	0x080103dd
 8010308:	6833      	ldr	r3, [r6, #0]
 801030a:	1d1a      	adds	r2, r3, #4
 801030c:	681b      	ldr	r3, [r3, #0]
 801030e:	6032      	str	r2, [r6, #0]
 8010310:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010314:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8010318:	2301      	movs	r3, #1
 801031a:	e09c      	b.n	8010456 <_printf_i+0x1e6>
 801031c:	6833      	ldr	r3, [r6, #0]
 801031e:	6820      	ldr	r0, [r4, #0]
 8010320:	1d19      	adds	r1, r3, #4
 8010322:	6031      	str	r1, [r6, #0]
 8010324:	0606      	lsls	r6, r0, #24
 8010326:	d501      	bpl.n	801032c <_printf_i+0xbc>
 8010328:	681d      	ldr	r5, [r3, #0]
 801032a:	e003      	b.n	8010334 <_printf_i+0xc4>
 801032c:	0645      	lsls	r5, r0, #25
 801032e:	d5fb      	bpl.n	8010328 <_printf_i+0xb8>
 8010330:	f9b3 5000 	ldrsh.w	r5, [r3]
 8010334:	2d00      	cmp	r5, #0
 8010336:	da03      	bge.n	8010340 <_printf_i+0xd0>
 8010338:	232d      	movs	r3, #45	@ 0x2d
 801033a:	426d      	negs	r5, r5
 801033c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010340:	4858      	ldr	r0, [pc, #352]	@ (80104a4 <_printf_i+0x234>)
 8010342:	230a      	movs	r3, #10
 8010344:	e011      	b.n	801036a <_printf_i+0xfa>
 8010346:	6821      	ldr	r1, [r4, #0]
 8010348:	6833      	ldr	r3, [r6, #0]
 801034a:	0608      	lsls	r0, r1, #24
 801034c:	f853 5b04 	ldr.w	r5, [r3], #4
 8010350:	d402      	bmi.n	8010358 <_printf_i+0xe8>
 8010352:	0649      	lsls	r1, r1, #25
 8010354:	bf48      	it	mi
 8010356:	b2ad      	uxthmi	r5, r5
 8010358:	2f6f      	cmp	r7, #111	@ 0x6f
 801035a:	4852      	ldr	r0, [pc, #328]	@ (80104a4 <_printf_i+0x234>)
 801035c:	6033      	str	r3, [r6, #0]
 801035e:	bf14      	ite	ne
 8010360:	230a      	movne	r3, #10
 8010362:	2308      	moveq	r3, #8
 8010364:	2100      	movs	r1, #0
 8010366:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801036a:	6866      	ldr	r6, [r4, #4]
 801036c:	60a6      	str	r6, [r4, #8]
 801036e:	2e00      	cmp	r6, #0
 8010370:	db05      	blt.n	801037e <_printf_i+0x10e>
 8010372:	6821      	ldr	r1, [r4, #0]
 8010374:	432e      	orrs	r6, r5
 8010376:	f021 0104 	bic.w	r1, r1, #4
 801037a:	6021      	str	r1, [r4, #0]
 801037c:	d04b      	beq.n	8010416 <_printf_i+0x1a6>
 801037e:	4616      	mov	r6, r2
 8010380:	fbb5 f1f3 	udiv	r1, r5, r3
 8010384:	fb03 5711 	mls	r7, r3, r1, r5
 8010388:	5dc7      	ldrb	r7, [r0, r7]
 801038a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801038e:	462f      	mov	r7, r5
 8010390:	42bb      	cmp	r3, r7
 8010392:	460d      	mov	r5, r1
 8010394:	d9f4      	bls.n	8010380 <_printf_i+0x110>
 8010396:	2b08      	cmp	r3, #8
 8010398:	d10b      	bne.n	80103b2 <_printf_i+0x142>
 801039a:	6823      	ldr	r3, [r4, #0]
 801039c:	07df      	lsls	r7, r3, #31
 801039e:	d508      	bpl.n	80103b2 <_printf_i+0x142>
 80103a0:	6923      	ldr	r3, [r4, #16]
 80103a2:	6861      	ldr	r1, [r4, #4]
 80103a4:	4299      	cmp	r1, r3
 80103a6:	bfde      	ittt	le
 80103a8:	2330      	movle	r3, #48	@ 0x30
 80103aa:	f806 3c01 	strble.w	r3, [r6, #-1]
 80103ae:	f106 36ff 	addle.w	r6, r6, #4294967295
 80103b2:	1b92      	subs	r2, r2, r6
 80103b4:	6122      	str	r2, [r4, #16]
 80103b6:	f8cd a000 	str.w	sl, [sp]
 80103ba:	464b      	mov	r3, r9
 80103bc:	aa03      	add	r2, sp, #12
 80103be:	4621      	mov	r1, r4
 80103c0:	4640      	mov	r0, r8
 80103c2:	f7ff fee7 	bl	8010194 <_printf_common>
 80103c6:	3001      	adds	r0, #1
 80103c8:	d14a      	bne.n	8010460 <_printf_i+0x1f0>
 80103ca:	f04f 30ff 	mov.w	r0, #4294967295
 80103ce:	b004      	add	sp, #16
 80103d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80103d4:	6823      	ldr	r3, [r4, #0]
 80103d6:	f043 0320 	orr.w	r3, r3, #32
 80103da:	6023      	str	r3, [r4, #0]
 80103dc:	4832      	ldr	r0, [pc, #200]	@ (80104a8 <_printf_i+0x238>)
 80103de:	2778      	movs	r7, #120	@ 0x78
 80103e0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80103e4:	6823      	ldr	r3, [r4, #0]
 80103e6:	6831      	ldr	r1, [r6, #0]
 80103e8:	061f      	lsls	r7, r3, #24
 80103ea:	f851 5b04 	ldr.w	r5, [r1], #4
 80103ee:	d402      	bmi.n	80103f6 <_printf_i+0x186>
 80103f0:	065f      	lsls	r7, r3, #25
 80103f2:	bf48      	it	mi
 80103f4:	b2ad      	uxthmi	r5, r5
 80103f6:	6031      	str	r1, [r6, #0]
 80103f8:	07d9      	lsls	r1, r3, #31
 80103fa:	bf44      	itt	mi
 80103fc:	f043 0320 	orrmi.w	r3, r3, #32
 8010400:	6023      	strmi	r3, [r4, #0]
 8010402:	b11d      	cbz	r5, 801040c <_printf_i+0x19c>
 8010404:	2310      	movs	r3, #16
 8010406:	e7ad      	b.n	8010364 <_printf_i+0xf4>
 8010408:	4826      	ldr	r0, [pc, #152]	@ (80104a4 <_printf_i+0x234>)
 801040a:	e7e9      	b.n	80103e0 <_printf_i+0x170>
 801040c:	6823      	ldr	r3, [r4, #0]
 801040e:	f023 0320 	bic.w	r3, r3, #32
 8010412:	6023      	str	r3, [r4, #0]
 8010414:	e7f6      	b.n	8010404 <_printf_i+0x194>
 8010416:	4616      	mov	r6, r2
 8010418:	e7bd      	b.n	8010396 <_printf_i+0x126>
 801041a:	6833      	ldr	r3, [r6, #0]
 801041c:	6825      	ldr	r5, [r4, #0]
 801041e:	6961      	ldr	r1, [r4, #20]
 8010420:	1d18      	adds	r0, r3, #4
 8010422:	6030      	str	r0, [r6, #0]
 8010424:	062e      	lsls	r6, r5, #24
 8010426:	681b      	ldr	r3, [r3, #0]
 8010428:	d501      	bpl.n	801042e <_printf_i+0x1be>
 801042a:	6019      	str	r1, [r3, #0]
 801042c:	e002      	b.n	8010434 <_printf_i+0x1c4>
 801042e:	0668      	lsls	r0, r5, #25
 8010430:	d5fb      	bpl.n	801042a <_printf_i+0x1ba>
 8010432:	8019      	strh	r1, [r3, #0]
 8010434:	2300      	movs	r3, #0
 8010436:	6123      	str	r3, [r4, #16]
 8010438:	4616      	mov	r6, r2
 801043a:	e7bc      	b.n	80103b6 <_printf_i+0x146>
 801043c:	6833      	ldr	r3, [r6, #0]
 801043e:	1d1a      	adds	r2, r3, #4
 8010440:	6032      	str	r2, [r6, #0]
 8010442:	681e      	ldr	r6, [r3, #0]
 8010444:	6862      	ldr	r2, [r4, #4]
 8010446:	2100      	movs	r1, #0
 8010448:	4630      	mov	r0, r6
 801044a:	f7ef fed9 	bl	8000200 <memchr>
 801044e:	b108      	cbz	r0, 8010454 <_printf_i+0x1e4>
 8010450:	1b80      	subs	r0, r0, r6
 8010452:	6060      	str	r0, [r4, #4]
 8010454:	6863      	ldr	r3, [r4, #4]
 8010456:	6123      	str	r3, [r4, #16]
 8010458:	2300      	movs	r3, #0
 801045a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801045e:	e7aa      	b.n	80103b6 <_printf_i+0x146>
 8010460:	6923      	ldr	r3, [r4, #16]
 8010462:	4632      	mov	r2, r6
 8010464:	4649      	mov	r1, r9
 8010466:	4640      	mov	r0, r8
 8010468:	47d0      	blx	sl
 801046a:	3001      	adds	r0, #1
 801046c:	d0ad      	beq.n	80103ca <_printf_i+0x15a>
 801046e:	6823      	ldr	r3, [r4, #0]
 8010470:	079b      	lsls	r3, r3, #30
 8010472:	d413      	bmi.n	801049c <_printf_i+0x22c>
 8010474:	68e0      	ldr	r0, [r4, #12]
 8010476:	9b03      	ldr	r3, [sp, #12]
 8010478:	4298      	cmp	r0, r3
 801047a:	bfb8      	it	lt
 801047c:	4618      	movlt	r0, r3
 801047e:	e7a6      	b.n	80103ce <_printf_i+0x15e>
 8010480:	2301      	movs	r3, #1
 8010482:	4632      	mov	r2, r6
 8010484:	4649      	mov	r1, r9
 8010486:	4640      	mov	r0, r8
 8010488:	47d0      	blx	sl
 801048a:	3001      	adds	r0, #1
 801048c:	d09d      	beq.n	80103ca <_printf_i+0x15a>
 801048e:	3501      	adds	r5, #1
 8010490:	68e3      	ldr	r3, [r4, #12]
 8010492:	9903      	ldr	r1, [sp, #12]
 8010494:	1a5b      	subs	r3, r3, r1
 8010496:	42ab      	cmp	r3, r5
 8010498:	dcf2      	bgt.n	8010480 <_printf_i+0x210>
 801049a:	e7eb      	b.n	8010474 <_printf_i+0x204>
 801049c:	2500      	movs	r5, #0
 801049e:	f104 0619 	add.w	r6, r4, #25
 80104a2:	e7f5      	b.n	8010490 <_printf_i+0x220>
 80104a4:	080111ec 	.word	0x080111ec
 80104a8:	080111fd 	.word	0x080111fd

080104ac <__sflush_r>:
 80104ac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80104b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80104b4:	0716      	lsls	r6, r2, #28
 80104b6:	4605      	mov	r5, r0
 80104b8:	460c      	mov	r4, r1
 80104ba:	d454      	bmi.n	8010566 <__sflush_r+0xba>
 80104bc:	684b      	ldr	r3, [r1, #4]
 80104be:	2b00      	cmp	r3, #0
 80104c0:	dc02      	bgt.n	80104c8 <__sflush_r+0x1c>
 80104c2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80104c4:	2b00      	cmp	r3, #0
 80104c6:	dd48      	ble.n	801055a <__sflush_r+0xae>
 80104c8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80104ca:	2e00      	cmp	r6, #0
 80104cc:	d045      	beq.n	801055a <__sflush_r+0xae>
 80104ce:	2300      	movs	r3, #0
 80104d0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80104d4:	682f      	ldr	r7, [r5, #0]
 80104d6:	6a21      	ldr	r1, [r4, #32]
 80104d8:	602b      	str	r3, [r5, #0]
 80104da:	d030      	beq.n	801053e <__sflush_r+0x92>
 80104dc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80104de:	89a3      	ldrh	r3, [r4, #12]
 80104e0:	0759      	lsls	r1, r3, #29
 80104e2:	d505      	bpl.n	80104f0 <__sflush_r+0x44>
 80104e4:	6863      	ldr	r3, [r4, #4]
 80104e6:	1ad2      	subs	r2, r2, r3
 80104e8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80104ea:	b10b      	cbz	r3, 80104f0 <__sflush_r+0x44>
 80104ec:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80104ee:	1ad2      	subs	r2, r2, r3
 80104f0:	2300      	movs	r3, #0
 80104f2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80104f4:	6a21      	ldr	r1, [r4, #32]
 80104f6:	4628      	mov	r0, r5
 80104f8:	47b0      	blx	r6
 80104fa:	1c43      	adds	r3, r0, #1
 80104fc:	89a3      	ldrh	r3, [r4, #12]
 80104fe:	d106      	bne.n	801050e <__sflush_r+0x62>
 8010500:	6829      	ldr	r1, [r5, #0]
 8010502:	291d      	cmp	r1, #29
 8010504:	d82b      	bhi.n	801055e <__sflush_r+0xb2>
 8010506:	4a2a      	ldr	r2, [pc, #168]	@ (80105b0 <__sflush_r+0x104>)
 8010508:	40ca      	lsrs	r2, r1
 801050a:	07d6      	lsls	r6, r2, #31
 801050c:	d527      	bpl.n	801055e <__sflush_r+0xb2>
 801050e:	2200      	movs	r2, #0
 8010510:	6062      	str	r2, [r4, #4]
 8010512:	04d9      	lsls	r1, r3, #19
 8010514:	6922      	ldr	r2, [r4, #16]
 8010516:	6022      	str	r2, [r4, #0]
 8010518:	d504      	bpl.n	8010524 <__sflush_r+0x78>
 801051a:	1c42      	adds	r2, r0, #1
 801051c:	d101      	bne.n	8010522 <__sflush_r+0x76>
 801051e:	682b      	ldr	r3, [r5, #0]
 8010520:	b903      	cbnz	r3, 8010524 <__sflush_r+0x78>
 8010522:	6560      	str	r0, [r4, #84]	@ 0x54
 8010524:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010526:	602f      	str	r7, [r5, #0]
 8010528:	b1b9      	cbz	r1, 801055a <__sflush_r+0xae>
 801052a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801052e:	4299      	cmp	r1, r3
 8010530:	d002      	beq.n	8010538 <__sflush_r+0x8c>
 8010532:	4628      	mov	r0, r5
 8010534:	f7fe fbdc 	bl	800ecf0 <_free_r>
 8010538:	2300      	movs	r3, #0
 801053a:	6363      	str	r3, [r4, #52]	@ 0x34
 801053c:	e00d      	b.n	801055a <__sflush_r+0xae>
 801053e:	2301      	movs	r3, #1
 8010540:	4628      	mov	r0, r5
 8010542:	47b0      	blx	r6
 8010544:	4602      	mov	r2, r0
 8010546:	1c50      	adds	r0, r2, #1
 8010548:	d1c9      	bne.n	80104de <__sflush_r+0x32>
 801054a:	682b      	ldr	r3, [r5, #0]
 801054c:	2b00      	cmp	r3, #0
 801054e:	d0c6      	beq.n	80104de <__sflush_r+0x32>
 8010550:	2b1d      	cmp	r3, #29
 8010552:	d001      	beq.n	8010558 <__sflush_r+0xac>
 8010554:	2b16      	cmp	r3, #22
 8010556:	d11e      	bne.n	8010596 <__sflush_r+0xea>
 8010558:	602f      	str	r7, [r5, #0]
 801055a:	2000      	movs	r0, #0
 801055c:	e022      	b.n	80105a4 <__sflush_r+0xf8>
 801055e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010562:	b21b      	sxth	r3, r3
 8010564:	e01b      	b.n	801059e <__sflush_r+0xf2>
 8010566:	690f      	ldr	r7, [r1, #16]
 8010568:	2f00      	cmp	r7, #0
 801056a:	d0f6      	beq.n	801055a <__sflush_r+0xae>
 801056c:	0793      	lsls	r3, r2, #30
 801056e:	680e      	ldr	r6, [r1, #0]
 8010570:	bf08      	it	eq
 8010572:	694b      	ldreq	r3, [r1, #20]
 8010574:	600f      	str	r7, [r1, #0]
 8010576:	bf18      	it	ne
 8010578:	2300      	movne	r3, #0
 801057a:	eba6 0807 	sub.w	r8, r6, r7
 801057e:	608b      	str	r3, [r1, #8]
 8010580:	f1b8 0f00 	cmp.w	r8, #0
 8010584:	dde9      	ble.n	801055a <__sflush_r+0xae>
 8010586:	6a21      	ldr	r1, [r4, #32]
 8010588:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801058a:	4643      	mov	r3, r8
 801058c:	463a      	mov	r2, r7
 801058e:	4628      	mov	r0, r5
 8010590:	47b0      	blx	r6
 8010592:	2800      	cmp	r0, #0
 8010594:	dc08      	bgt.n	80105a8 <__sflush_r+0xfc>
 8010596:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801059a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801059e:	81a3      	strh	r3, [r4, #12]
 80105a0:	f04f 30ff 	mov.w	r0, #4294967295
 80105a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80105a8:	4407      	add	r7, r0
 80105aa:	eba8 0800 	sub.w	r8, r8, r0
 80105ae:	e7e7      	b.n	8010580 <__sflush_r+0xd4>
 80105b0:	20400001 	.word	0x20400001

080105b4 <_fflush_r>:
 80105b4:	b538      	push	{r3, r4, r5, lr}
 80105b6:	690b      	ldr	r3, [r1, #16]
 80105b8:	4605      	mov	r5, r0
 80105ba:	460c      	mov	r4, r1
 80105bc:	b913      	cbnz	r3, 80105c4 <_fflush_r+0x10>
 80105be:	2500      	movs	r5, #0
 80105c0:	4628      	mov	r0, r5
 80105c2:	bd38      	pop	{r3, r4, r5, pc}
 80105c4:	b118      	cbz	r0, 80105ce <_fflush_r+0x1a>
 80105c6:	6a03      	ldr	r3, [r0, #32]
 80105c8:	b90b      	cbnz	r3, 80105ce <_fflush_r+0x1a>
 80105ca:	f7fe f9c5 	bl	800e958 <__sinit>
 80105ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80105d2:	2b00      	cmp	r3, #0
 80105d4:	d0f3      	beq.n	80105be <_fflush_r+0xa>
 80105d6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80105d8:	07d0      	lsls	r0, r2, #31
 80105da:	d404      	bmi.n	80105e6 <_fflush_r+0x32>
 80105dc:	0599      	lsls	r1, r3, #22
 80105de:	d402      	bmi.n	80105e6 <_fflush_r+0x32>
 80105e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80105e2:	f7fe fb6c 	bl	800ecbe <__retarget_lock_acquire_recursive>
 80105e6:	4628      	mov	r0, r5
 80105e8:	4621      	mov	r1, r4
 80105ea:	f7ff ff5f 	bl	80104ac <__sflush_r>
 80105ee:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80105f0:	07da      	lsls	r2, r3, #31
 80105f2:	4605      	mov	r5, r0
 80105f4:	d4e4      	bmi.n	80105c0 <_fflush_r+0xc>
 80105f6:	89a3      	ldrh	r3, [r4, #12]
 80105f8:	059b      	lsls	r3, r3, #22
 80105fa:	d4e1      	bmi.n	80105c0 <_fflush_r+0xc>
 80105fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80105fe:	f7fe fb5f 	bl	800ecc0 <__retarget_lock_release_recursive>
 8010602:	e7dd      	b.n	80105c0 <_fflush_r+0xc>

08010604 <memmove>:
 8010604:	4288      	cmp	r0, r1
 8010606:	b510      	push	{r4, lr}
 8010608:	eb01 0402 	add.w	r4, r1, r2
 801060c:	d902      	bls.n	8010614 <memmove+0x10>
 801060e:	4284      	cmp	r4, r0
 8010610:	4623      	mov	r3, r4
 8010612:	d807      	bhi.n	8010624 <memmove+0x20>
 8010614:	1e43      	subs	r3, r0, #1
 8010616:	42a1      	cmp	r1, r4
 8010618:	d008      	beq.n	801062c <memmove+0x28>
 801061a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801061e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010622:	e7f8      	b.n	8010616 <memmove+0x12>
 8010624:	4402      	add	r2, r0
 8010626:	4601      	mov	r1, r0
 8010628:	428a      	cmp	r2, r1
 801062a:	d100      	bne.n	801062e <memmove+0x2a>
 801062c:	bd10      	pop	{r4, pc}
 801062e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010632:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010636:	e7f7      	b.n	8010628 <memmove+0x24>

08010638 <_sbrk_r>:
 8010638:	b538      	push	{r3, r4, r5, lr}
 801063a:	4d06      	ldr	r5, [pc, #24]	@ (8010654 <_sbrk_r+0x1c>)
 801063c:	2300      	movs	r3, #0
 801063e:	4604      	mov	r4, r0
 8010640:	4608      	mov	r0, r1
 8010642:	602b      	str	r3, [r5, #0]
 8010644:	f7f2 f82c 	bl	80026a0 <_sbrk>
 8010648:	1c43      	adds	r3, r0, #1
 801064a:	d102      	bne.n	8010652 <_sbrk_r+0x1a>
 801064c:	682b      	ldr	r3, [r5, #0]
 801064e:	b103      	cbz	r3, 8010652 <_sbrk_r+0x1a>
 8010650:	6023      	str	r3, [r4, #0]
 8010652:	bd38      	pop	{r3, r4, r5, pc}
 8010654:	2000409c 	.word	0x2000409c

08010658 <__assert_func>:
 8010658:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801065a:	4614      	mov	r4, r2
 801065c:	461a      	mov	r2, r3
 801065e:	4b09      	ldr	r3, [pc, #36]	@ (8010684 <__assert_func+0x2c>)
 8010660:	681b      	ldr	r3, [r3, #0]
 8010662:	4605      	mov	r5, r0
 8010664:	68d8      	ldr	r0, [r3, #12]
 8010666:	b14c      	cbz	r4, 801067c <__assert_func+0x24>
 8010668:	4b07      	ldr	r3, [pc, #28]	@ (8010688 <__assert_func+0x30>)
 801066a:	9100      	str	r1, [sp, #0]
 801066c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010670:	4906      	ldr	r1, [pc, #24]	@ (801068c <__assert_func+0x34>)
 8010672:	462b      	mov	r3, r5
 8010674:	f000 f858 	bl	8010728 <fiprintf>
 8010678:	f000 f868 	bl	801074c <abort>
 801067c:	4b04      	ldr	r3, [pc, #16]	@ (8010690 <__assert_func+0x38>)
 801067e:	461c      	mov	r4, r3
 8010680:	e7f3      	b.n	801066a <__assert_func+0x12>
 8010682:	bf00      	nop
 8010684:	200001ac 	.word	0x200001ac
 8010688:	0801120e 	.word	0x0801120e
 801068c:	0801121b 	.word	0x0801121b
 8010690:	08011249 	.word	0x08011249

08010694 <_calloc_r>:
 8010694:	b570      	push	{r4, r5, r6, lr}
 8010696:	fba1 5402 	umull	r5, r4, r1, r2
 801069a:	b934      	cbnz	r4, 80106aa <_calloc_r+0x16>
 801069c:	4629      	mov	r1, r5
 801069e:	f7fe fecd 	bl	800f43c <_malloc_r>
 80106a2:	4606      	mov	r6, r0
 80106a4:	b928      	cbnz	r0, 80106b2 <_calloc_r+0x1e>
 80106a6:	4630      	mov	r0, r6
 80106a8:	bd70      	pop	{r4, r5, r6, pc}
 80106aa:	220c      	movs	r2, #12
 80106ac:	6002      	str	r2, [r0, #0]
 80106ae:	2600      	movs	r6, #0
 80106b0:	e7f9      	b.n	80106a6 <_calloc_r+0x12>
 80106b2:	462a      	mov	r2, r5
 80106b4:	4621      	mov	r1, r4
 80106b6:	f7fe fa05 	bl	800eac4 <memset>
 80106ba:	e7f4      	b.n	80106a6 <_calloc_r+0x12>

080106bc <malloc>:
 80106bc:	4b02      	ldr	r3, [pc, #8]	@ (80106c8 <malloc+0xc>)
 80106be:	4601      	mov	r1, r0
 80106c0:	6818      	ldr	r0, [r3, #0]
 80106c2:	f7fe bebb 	b.w	800f43c <_malloc_r>
 80106c6:	bf00      	nop
 80106c8:	200001ac 	.word	0x200001ac

080106cc <_realloc_r>:
 80106cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80106d0:	4607      	mov	r7, r0
 80106d2:	4614      	mov	r4, r2
 80106d4:	460d      	mov	r5, r1
 80106d6:	b921      	cbnz	r1, 80106e2 <_realloc_r+0x16>
 80106d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80106dc:	4611      	mov	r1, r2
 80106de:	f7fe bead 	b.w	800f43c <_malloc_r>
 80106e2:	b92a      	cbnz	r2, 80106f0 <_realloc_r+0x24>
 80106e4:	f7fe fb04 	bl	800ecf0 <_free_r>
 80106e8:	4625      	mov	r5, r4
 80106ea:	4628      	mov	r0, r5
 80106ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80106f0:	f000 f833 	bl	801075a <_malloc_usable_size_r>
 80106f4:	4284      	cmp	r4, r0
 80106f6:	4606      	mov	r6, r0
 80106f8:	d802      	bhi.n	8010700 <_realloc_r+0x34>
 80106fa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80106fe:	d8f4      	bhi.n	80106ea <_realloc_r+0x1e>
 8010700:	4621      	mov	r1, r4
 8010702:	4638      	mov	r0, r7
 8010704:	f7fe fe9a 	bl	800f43c <_malloc_r>
 8010708:	4680      	mov	r8, r0
 801070a:	b908      	cbnz	r0, 8010710 <_realloc_r+0x44>
 801070c:	4645      	mov	r5, r8
 801070e:	e7ec      	b.n	80106ea <_realloc_r+0x1e>
 8010710:	42b4      	cmp	r4, r6
 8010712:	4622      	mov	r2, r4
 8010714:	4629      	mov	r1, r5
 8010716:	bf28      	it	cs
 8010718:	4632      	movcs	r2, r6
 801071a:	f7fe fad2 	bl	800ecc2 <memcpy>
 801071e:	4629      	mov	r1, r5
 8010720:	4638      	mov	r0, r7
 8010722:	f7fe fae5 	bl	800ecf0 <_free_r>
 8010726:	e7f1      	b.n	801070c <_realloc_r+0x40>

08010728 <fiprintf>:
 8010728:	b40e      	push	{r1, r2, r3}
 801072a:	b503      	push	{r0, r1, lr}
 801072c:	4601      	mov	r1, r0
 801072e:	ab03      	add	r3, sp, #12
 8010730:	4805      	ldr	r0, [pc, #20]	@ (8010748 <fiprintf+0x20>)
 8010732:	f853 2b04 	ldr.w	r2, [r3], #4
 8010736:	6800      	ldr	r0, [r0, #0]
 8010738:	9301      	str	r3, [sp, #4]
 801073a:	f000 f83f 	bl	80107bc <_vfiprintf_r>
 801073e:	b002      	add	sp, #8
 8010740:	f85d eb04 	ldr.w	lr, [sp], #4
 8010744:	b003      	add	sp, #12
 8010746:	4770      	bx	lr
 8010748:	200001ac 	.word	0x200001ac

0801074c <abort>:
 801074c:	b508      	push	{r3, lr}
 801074e:	2006      	movs	r0, #6
 8010750:	f000 fa08 	bl	8010b64 <raise>
 8010754:	2001      	movs	r0, #1
 8010756:	f7f1 ff2b 	bl	80025b0 <_exit>

0801075a <_malloc_usable_size_r>:
 801075a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801075e:	1f18      	subs	r0, r3, #4
 8010760:	2b00      	cmp	r3, #0
 8010762:	bfbc      	itt	lt
 8010764:	580b      	ldrlt	r3, [r1, r0]
 8010766:	18c0      	addlt	r0, r0, r3
 8010768:	4770      	bx	lr

0801076a <__sfputc_r>:
 801076a:	6893      	ldr	r3, [r2, #8]
 801076c:	3b01      	subs	r3, #1
 801076e:	2b00      	cmp	r3, #0
 8010770:	b410      	push	{r4}
 8010772:	6093      	str	r3, [r2, #8]
 8010774:	da08      	bge.n	8010788 <__sfputc_r+0x1e>
 8010776:	6994      	ldr	r4, [r2, #24]
 8010778:	42a3      	cmp	r3, r4
 801077a:	db01      	blt.n	8010780 <__sfputc_r+0x16>
 801077c:	290a      	cmp	r1, #10
 801077e:	d103      	bne.n	8010788 <__sfputc_r+0x1e>
 8010780:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010784:	f000 b932 	b.w	80109ec <__swbuf_r>
 8010788:	6813      	ldr	r3, [r2, #0]
 801078a:	1c58      	adds	r0, r3, #1
 801078c:	6010      	str	r0, [r2, #0]
 801078e:	7019      	strb	r1, [r3, #0]
 8010790:	4608      	mov	r0, r1
 8010792:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010796:	4770      	bx	lr

08010798 <__sfputs_r>:
 8010798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801079a:	4606      	mov	r6, r0
 801079c:	460f      	mov	r7, r1
 801079e:	4614      	mov	r4, r2
 80107a0:	18d5      	adds	r5, r2, r3
 80107a2:	42ac      	cmp	r4, r5
 80107a4:	d101      	bne.n	80107aa <__sfputs_r+0x12>
 80107a6:	2000      	movs	r0, #0
 80107a8:	e007      	b.n	80107ba <__sfputs_r+0x22>
 80107aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80107ae:	463a      	mov	r2, r7
 80107b0:	4630      	mov	r0, r6
 80107b2:	f7ff ffda 	bl	801076a <__sfputc_r>
 80107b6:	1c43      	adds	r3, r0, #1
 80107b8:	d1f3      	bne.n	80107a2 <__sfputs_r+0xa>
 80107ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080107bc <_vfiprintf_r>:
 80107bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80107c0:	460d      	mov	r5, r1
 80107c2:	b09d      	sub	sp, #116	@ 0x74
 80107c4:	4614      	mov	r4, r2
 80107c6:	4698      	mov	r8, r3
 80107c8:	4606      	mov	r6, r0
 80107ca:	b118      	cbz	r0, 80107d4 <_vfiprintf_r+0x18>
 80107cc:	6a03      	ldr	r3, [r0, #32]
 80107ce:	b90b      	cbnz	r3, 80107d4 <_vfiprintf_r+0x18>
 80107d0:	f7fe f8c2 	bl	800e958 <__sinit>
 80107d4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80107d6:	07d9      	lsls	r1, r3, #31
 80107d8:	d405      	bmi.n	80107e6 <_vfiprintf_r+0x2a>
 80107da:	89ab      	ldrh	r3, [r5, #12]
 80107dc:	059a      	lsls	r2, r3, #22
 80107de:	d402      	bmi.n	80107e6 <_vfiprintf_r+0x2a>
 80107e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80107e2:	f7fe fa6c 	bl	800ecbe <__retarget_lock_acquire_recursive>
 80107e6:	89ab      	ldrh	r3, [r5, #12]
 80107e8:	071b      	lsls	r3, r3, #28
 80107ea:	d501      	bpl.n	80107f0 <_vfiprintf_r+0x34>
 80107ec:	692b      	ldr	r3, [r5, #16]
 80107ee:	b99b      	cbnz	r3, 8010818 <_vfiprintf_r+0x5c>
 80107f0:	4629      	mov	r1, r5
 80107f2:	4630      	mov	r0, r6
 80107f4:	f000 f938 	bl	8010a68 <__swsetup_r>
 80107f8:	b170      	cbz	r0, 8010818 <_vfiprintf_r+0x5c>
 80107fa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80107fc:	07dc      	lsls	r4, r3, #31
 80107fe:	d504      	bpl.n	801080a <_vfiprintf_r+0x4e>
 8010800:	f04f 30ff 	mov.w	r0, #4294967295
 8010804:	b01d      	add	sp, #116	@ 0x74
 8010806:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801080a:	89ab      	ldrh	r3, [r5, #12]
 801080c:	0598      	lsls	r0, r3, #22
 801080e:	d4f7      	bmi.n	8010800 <_vfiprintf_r+0x44>
 8010810:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010812:	f7fe fa55 	bl	800ecc0 <__retarget_lock_release_recursive>
 8010816:	e7f3      	b.n	8010800 <_vfiprintf_r+0x44>
 8010818:	2300      	movs	r3, #0
 801081a:	9309      	str	r3, [sp, #36]	@ 0x24
 801081c:	2320      	movs	r3, #32
 801081e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010822:	f8cd 800c 	str.w	r8, [sp, #12]
 8010826:	2330      	movs	r3, #48	@ 0x30
 8010828:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80109d8 <_vfiprintf_r+0x21c>
 801082c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010830:	f04f 0901 	mov.w	r9, #1
 8010834:	4623      	mov	r3, r4
 8010836:	469a      	mov	sl, r3
 8010838:	f813 2b01 	ldrb.w	r2, [r3], #1
 801083c:	b10a      	cbz	r2, 8010842 <_vfiprintf_r+0x86>
 801083e:	2a25      	cmp	r2, #37	@ 0x25
 8010840:	d1f9      	bne.n	8010836 <_vfiprintf_r+0x7a>
 8010842:	ebba 0b04 	subs.w	fp, sl, r4
 8010846:	d00b      	beq.n	8010860 <_vfiprintf_r+0xa4>
 8010848:	465b      	mov	r3, fp
 801084a:	4622      	mov	r2, r4
 801084c:	4629      	mov	r1, r5
 801084e:	4630      	mov	r0, r6
 8010850:	f7ff ffa2 	bl	8010798 <__sfputs_r>
 8010854:	3001      	adds	r0, #1
 8010856:	f000 80a7 	beq.w	80109a8 <_vfiprintf_r+0x1ec>
 801085a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801085c:	445a      	add	r2, fp
 801085e:	9209      	str	r2, [sp, #36]	@ 0x24
 8010860:	f89a 3000 	ldrb.w	r3, [sl]
 8010864:	2b00      	cmp	r3, #0
 8010866:	f000 809f 	beq.w	80109a8 <_vfiprintf_r+0x1ec>
 801086a:	2300      	movs	r3, #0
 801086c:	f04f 32ff 	mov.w	r2, #4294967295
 8010870:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010874:	f10a 0a01 	add.w	sl, sl, #1
 8010878:	9304      	str	r3, [sp, #16]
 801087a:	9307      	str	r3, [sp, #28]
 801087c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010880:	931a      	str	r3, [sp, #104]	@ 0x68
 8010882:	4654      	mov	r4, sl
 8010884:	2205      	movs	r2, #5
 8010886:	f814 1b01 	ldrb.w	r1, [r4], #1
 801088a:	4853      	ldr	r0, [pc, #332]	@ (80109d8 <_vfiprintf_r+0x21c>)
 801088c:	f7ef fcb8 	bl	8000200 <memchr>
 8010890:	9a04      	ldr	r2, [sp, #16]
 8010892:	b9d8      	cbnz	r0, 80108cc <_vfiprintf_r+0x110>
 8010894:	06d1      	lsls	r1, r2, #27
 8010896:	bf44      	itt	mi
 8010898:	2320      	movmi	r3, #32
 801089a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801089e:	0713      	lsls	r3, r2, #28
 80108a0:	bf44      	itt	mi
 80108a2:	232b      	movmi	r3, #43	@ 0x2b
 80108a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80108a8:	f89a 3000 	ldrb.w	r3, [sl]
 80108ac:	2b2a      	cmp	r3, #42	@ 0x2a
 80108ae:	d015      	beq.n	80108dc <_vfiprintf_r+0x120>
 80108b0:	9a07      	ldr	r2, [sp, #28]
 80108b2:	4654      	mov	r4, sl
 80108b4:	2000      	movs	r0, #0
 80108b6:	f04f 0c0a 	mov.w	ip, #10
 80108ba:	4621      	mov	r1, r4
 80108bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80108c0:	3b30      	subs	r3, #48	@ 0x30
 80108c2:	2b09      	cmp	r3, #9
 80108c4:	d94b      	bls.n	801095e <_vfiprintf_r+0x1a2>
 80108c6:	b1b0      	cbz	r0, 80108f6 <_vfiprintf_r+0x13a>
 80108c8:	9207      	str	r2, [sp, #28]
 80108ca:	e014      	b.n	80108f6 <_vfiprintf_r+0x13a>
 80108cc:	eba0 0308 	sub.w	r3, r0, r8
 80108d0:	fa09 f303 	lsl.w	r3, r9, r3
 80108d4:	4313      	orrs	r3, r2
 80108d6:	9304      	str	r3, [sp, #16]
 80108d8:	46a2      	mov	sl, r4
 80108da:	e7d2      	b.n	8010882 <_vfiprintf_r+0xc6>
 80108dc:	9b03      	ldr	r3, [sp, #12]
 80108de:	1d19      	adds	r1, r3, #4
 80108e0:	681b      	ldr	r3, [r3, #0]
 80108e2:	9103      	str	r1, [sp, #12]
 80108e4:	2b00      	cmp	r3, #0
 80108e6:	bfbb      	ittet	lt
 80108e8:	425b      	neglt	r3, r3
 80108ea:	f042 0202 	orrlt.w	r2, r2, #2
 80108ee:	9307      	strge	r3, [sp, #28]
 80108f0:	9307      	strlt	r3, [sp, #28]
 80108f2:	bfb8      	it	lt
 80108f4:	9204      	strlt	r2, [sp, #16]
 80108f6:	7823      	ldrb	r3, [r4, #0]
 80108f8:	2b2e      	cmp	r3, #46	@ 0x2e
 80108fa:	d10a      	bne.n	8010912 <_vfiprintf_r+0x156>
 80108fc:	7863      	ldrb	r3, [r4, #1]
 80108fe:	2b2a      	cmp	r3, #42	@ 0x2a
 8010900:	d132      	bne.n	8010968 <_vfiprintf_r+0x1ac>
 8010902:	9b03      	ldr	r3, [sp, #12]
 8010904:	1d1a      	adds	r2, r3, #4
 8010906:	681b      	ldr	r3, [r3, #0]
 8010908:	9203      	str	r2, [sp, #12]
 801090a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801090e:	3402      	adds	r4, #2
 8010910:	9305      	str	r3, [sp, #20]
 8010912:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80109e8 <_vfiprintf_r+0x22c>
 8010916:	7821      	ldrb	r1, [r4, #0]
 8010918:	2203      	movs	r2, #3
 801091a:	4650      	mov	r0, sl
 801091c:	f7ef fc70 	bl	8000200 <memchr>
 8010920:	b138      	cbz	r0, 8010932 <_vfiprintf_r+0x176>
 8010922:	9b04      	ldr	r3, [sp, #16]
 8010924:	eba0 000a 	sub.w	r0, r0, sl
 8010928:	2240      	movs	r2, #64	@ 0x40
 801092a:	4082      	lsls	r2, r0
 801092c:	4313      	orrs	r3, r2
 801092e:	3401      	adds	r4, #1
 8010930:	9304      	str	r3, [sp, #16]
 8010932:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010936:	4829      	ldr	r0, [pc, #164]	@ (80109dc <_vfiprintf_r+0x220>)
 8010938:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801093c:	2206      	movs	r2, #6
 801093e:	f7ef fc5f 	bl	8000200 <memchr>
 8010942:	2800      	cmp	r0, #0
 8010944:	d03f      	beq.n	80109c6 <_vfiprintf_r+0x20a>
 8010946:	4b26      	ldr	r3, [pc, #152]	@ (80109e0 <_vfiprintf_r+0x224>)
 8010948:	bb1b      	cbnz	r3, 8010992 <_vfiprintf_r+0x1d6>
 801094a:	9b03      	ldr	r3, [sp, #12]
 801094c:	3307      	adds	r3, #7
 801094e:	f023 0307 	bic.w	r3, r3, #7
 8010952:	3308      	adds	r3, #8
 8010954:	9303      	str	r3, [sp, #12]
 8010956:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010958:	443b      	add	r3, r7
 801095a:	9309      	str	r3, [sp, #36]	@ 0x24
 801095c:	e76a      	b.n	8010834 <_vfiprintf_r+0x78>
 801095e:	fb0c 3202 	mla	r2, ip, r2, r3
 8010962:	460c      	mov	r4, r1
 8010964:	2001      	movs	r0, #1
 8010966:	e7a8      	b.n	80108ba <_vfiprintf_r+0xfe>
 8010968:	2300      	movs	r3, #0
 801096a:	3401      	adds	r4, #1
 801096c:	9305      	str	r3, [sp, #20]
 801096e:	4619      	mov	r1, r3
 8010970:	f04f 0c0a 	mov.w	ip, #10
 8010974:	4620      	mov	r0, r4
 8010976:	f810 2b01 	ldrb.w	r2, [r0], #1
 801097a:	3a30      	subs	r2, #48	@ 0x30
 801097c:	2a09      	cmp	r2, #9
 801097e:	d903      	bls.n	8010988 <_vfiprintf_r+0x1cc>
 8010980:	2b00      	cmp	r3, #0
 8010982:	d0c6      	beq.n	8010912 <_vfiprintf_r+0x156>
 8010984:	9105      	str	r1, [sp, #20]
 8010986:	e7c4      	b.n	8010912 <_vfiprintf_r+0x156>
 8010988:	fb0c 2101 	mla	r1, ip, r1, r2
 801098c:	4604      	mov	r4, r0
 801098e:	2301      	movs	r3, #1
 8010990:	e7f0      	b.n	8010974 <_vfiprintf_r+0x1b8>
 8010992:	ab03      	add	r3, sp, #12
 8010994:	9300      	str	r3, [sp, #0]
 8010996:	462a      	mov	r2, r5
 8010998:	4b12      	ldr	r3, [pc, #72]	@ (80109e4 <_vfiprintf_r+0x228>)
 801099a:	a904      	add	r1, sp, #16
 801099c:	4630      	mov	r0, r6
 801099e:	f3af 8000 	nop.w
 80109a2:	4607      	mov	r7, r0
 80109a4:	1c78      	adds	r0, r7, #1
 80109a6:	d1d6      	bne.n	8010956 <_vfiprintf_r+0x19a>
 80109a8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80109aa:	07d9      	lsls	r1, r3, #31
 80109ac:	d405      	bmi.n	80109ba <_vfiprintf_r+0x1fe>
 80109ae:	89ab      	ldrh	r3, [r5, #12]
 80109b0:	059a      	lsls	r2, r3, #22
 80109b2:	d402      	bmi.n	80109ba <_vfiprintf_r+0x1fe>
 80109b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80109b6:	f7fe f983 	bl	800ecc0 <__retarget_lock_release_recursive>
 80109ba:	89ab      	ldrh	r3, [r5, #12]
 80109bc:	065b      	lsls	r3, r3, #25
 80109be:	f53f af1f 	bmi.w	8010800 <_vfiprintf_r+0x44>
 80109c2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80109c4:	e71e      	b.n	8010804 <_vfiprintf_r+0x48>
 80109c6:	ab03      	add	r3, sp, #12
 80109c8:	9300      	str	r3, [sp, #0]
 80109ca:	462a      	mov	r2, r5
 80109cc:	4b05      	ldr	r3, [pc, #20]	@ (80109e4 <_vfiprintf_r+0x228>)
 80109ce:	a904      	add	r1, sp, #16
 80109d0:	4630      	mov	r0, r6
 80109d2:	f7ff fc4d 	bl	8010270 <_printf_i>
 80109d6:	e7e4      	b.n	80109a2 <_vfiprintf_r+0x1e6>
 80109d8:	080111db 	.word	0x080111db
 80109dc:	080111e5 	.word	0x080111e5
 80109e0:	00000000 	.word	0x00000000
 80109e4:	08010799 	.word	0x08010799
 80109e8:	080111e1 	.word	0x080111e1

080109ec <__swbuf_r>:
 80109ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80109ee:	460e      	mov	r6, r1
 80109f0:	4614      	mov	r4, r2
 80109f2:	4605      	mov	r5, r0
 80109f4:	b118      	cbz	r0, 80109fe <__swbuf_r+0x12>
 80109f6:	6a03      	ldr	r3, [r0, #32]
 80109f8:	b90b      	cbnz	r3, 80109fe <__swbuf_r+0x12>
 80109fa:	f7fd ffad 	bl	800e958 <__sinit>
 80109fe:	69a3      	ldr	r3, [r4, #24]
 8010a00:	60a3      	str	r3, [r4, #8]
 8010a02:	89a3      	ldrh	r3, [r4, #12]
 8010a04:	071a      	lsls	r2, r3, #28
 8010a06:	d501      	bpl.n	8010a0c <__swbuf_r+0x20>
 8010a08:	6923      	ldr	r3, [r4, #16]
 8010a0a:	b943      	cbnz	r3, 8010a1e <__swbuf_r+0x32>
 8010a0c:	4621      	mov	r1, r4
 8010a0e:	4628      	mov	r0, r5
 8010a10:	f000 f82a 	bl	8010a68 <__swsetup_r>
 8010a14:	b118      	cbz	r0, 8010a1e <__swbuf_r+0x32>
 8010a16:	f04f 37ff 	mov.w	r7, #4294967295
 8010a1a:	4638      	mov	r0, r7
 8010a1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010a1e:	6823      	ldr	r3, [r4, #0]
 8010a20:	6922      	ldr	r2, [r4, #16]
 8010a22:	1a98      	subs	r0, r3, r2
 8010a24:	6963      	ldr	r3, [r4, #20]
 8010a26:	b2f6      	uxtb	r6, r6
 8010a28:	4283      	cmp	r3, r0
 8010a2a:	4637      	mov	r7, r6
 8010a2c:	dc05      	bgt.n	8010a3a <__swbuf_r+0x4e>
 8010a2e:	4621      	mov	r1, r4
 8010a30:	4628      	mov	r0, r5
 8010a32:	f7ff fdbf 	bl	80105b4 <_fflush_r>
 8010a36:	2800      	cmp	r0, #0
 8010a38:	d1ed      	bne.n	8010a16 <__swbuf_r+0x2a>
 8010a3a:	68a3      	ldr	r3, [r4, #8]
 8010a3c:	3b01      	subs	r3, #1
 8010a3e:	60a3      	str	r3, [r4, #8]
 8010a40:	6823      	ldr	r3, [r4, #0]
 8010a42:	1c5a      	adds	r2, r3, #1
 8010a44:	6022      	str	r2, [r4, #0]
 8010a46:	701e      	strb	r6, [r3, #0]
 8010a48:	6962      	ldr	r2, [r4, #20]
 8010a4a:	1c43      	adds	r3, r0, #1
 8010a4c:	429a      	cmp	r2, r3
 8010a4e:	d004      	beq.n	8010a5a <__swbuf_r+0x6e>
 8010a50:	89a3      	ldrh	r3, [r4, #12]
 8010a52:	07db      	lsls	r3, r3, #31
 8010a54:	d5e1      	bpl.n	8010a1a <__swbuf_r+0x2e>
 8010a56:	2e0a      	cmp	r6, #10
 8010a58:	d1df      	bne.n	8010a1a <__swbuf_r+0x2e>
 8010a5a:	4621      	mov	r1, r4
 8010a5c:	4628      	mov	r0, r5
 8010a5e:	f7ff fda9 	bl	80105b4 <_fflush_r>
 8010a62:	2800      	cmp	r0, #0
 8010a64:	d0d9      	beq.n	8010a1a <__swbuf_r+0x2e>
 8010a66:	e7d6      	b.n	8010a16 <__swbuf_r+0x2a>

08010a68 <__swsetup_r>:
 8010a68:	b538      	push	{r3, r4, r5, lr}
 8010a6a:	4b29      	ldr	r3, [pc, #164]	@ (8010b10 <__swsetup_r+0xa8>)
 8010a6c:	4605      	mov	r5, r0
 8010a6e:	6818      	ldr	r0, [r3, #0]
 8010a70:	460c      	mov	r4, r1
 8010a72:	b118      	cbz	r0, 8010a7c <__swsetup_r+0x14>
 8010a74:	6a03      	ldr	r3, [r0, #32]
 8010a76:	b90b      	cbnz	r3, 8010a7c <__swsetup_r+0x14>
 8010a78:	f7fd ff6e 	bl	800e958 <__sinit>
 8010a7c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010a80:	0719      	lsls	r1, r3, #28
 8010a82:	d422      	bmi.n	8010aca <__swsetup_r+0x62>
 8010a84:	06da      	lsls	r2, r3, #27
 8010a86:	d407      	bmi.n	8010a98 <__swsetup_r+0x30>
 8010a88:	2209      	movs	r2, #9
 8010a8a:	602a      	str	r2, [r5, #0]
 8010a8c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010a90:	81a3      	strh	r3, [r4, #12]
 8010a92:	f04f 30ff 	mov.w	r0, #4294967295
 8010a96:	e033      	b.n	8010b00 <__swsetup_r+0x98>
 8010a98:	0758      	lsls	r0, r3, #29
 8010a9a:	d512      	bpl.n	8010ac2 <__swsetup_r+0x5a>
 8010a9c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010a9e:	b141      	cbz	r1, 8010ab2 <__swsetup_r+0x4a>
 8010aa0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010aa4:	4299      	cmp	r1, r3
 8010aa6:	d002      	beq.n	8010aae <__swsetup_r+0x46>
 8010aa8:	4628      	mov	r0, r5
 8010aaa:	f7fe f921 	bl	800ecf0 <_free_r>
 8010aae:	2300      	movs	r3, #0
 8010ab0:	6363      	str	r3, [r4, #52]	@ 0x34
 8010ab2:	89a3      	ldrh	r3, [r4, #12]
 8010ab4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8010ab8:	81a3      	strh	r3, [r4, #12]
 8010aba:	2300      	movs	r3, #0
 8010abc:	6063      	str	r3, [r4, #4]
 8010abe:	6923      	ldr	r3, [r4, #16]
 8010ac0:	6023      	str	r3, [r4, #0]
 8010ac2:	89a3      	ldrh	r3, [r4, #12]
 8010ac4:	f043 0308 	orr.w	r3, r3, #8
 8010ac8:	81a3      	strh	r3, [r4, #12]
 8010aca:	6923      	ldr	r3, [r4, #16]
 8010acc:	b94b      	cbnz	r3, 8010ae2 <__swsetup_r+0x7a>
 8010ace:	89a3      	ldrh	r3, [r4, #12]
 8010ad0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8010ad4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010ad8:	d003      	beq.n	8010ae2 <__swsetup_r+0x7a>
 8010ada:	4621      	mov	r1, r4
 8010adc:	4628      	mov	r0, r5
 8010ade:	f000 f883 	bl	8010be8 <__smakebuf_r>
 8010ae2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010ae6:	f013 0201 	ands.w	r2, r3, #1
 8010aea:	d00a      	beq.n	8010b02 <__swsetup_r+0x9a>
 8010aec:	2200      	movs	r2, #0
 8010aee:	60a2      	str	r2, [r4, #8]
 8010af0:	6962      	ldr	r2, [r4, #20]
 8010af2:	4252      	negs	r2, r2
 8010af4:	61a2      	str	r2, [r4, #24]
 8010af6:	6922      	ldr	r2, [r4, #16]
 8010af8:	b942      	cbnz	r2, 8010b0c <__swsetup_r+0xa4>
 8010afa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8010afe:	d1c5      	bne.n	8010a8c <__swsetup_r+0x24>
 8010b00:	bd38      	pop	{r3, r4, r5, pc}
 8010b02:	0799      	lsls	r1, r3, #30
 8010b04:	bf58      	it	pl
 8010b06:	6962      	ldrpl	r2, [r4, #20]
 8010b08:	60a2      	str	r2, [r4, #8]
 8010b0a:	e7f4      	b.n	8010af6 <__swsetup_r+0x8e>
 8010b0c:	2000      	movs	r0, #0
 8010b0e:	e7f7      	b.n	8010b00 <__swsetup_r+0x98>
 8010b10:	200001ac 	.word	0x200001ac

08010b14 <_raise_r>:
 8010b14:	291f      	cmp	r1, #31
 8010b16:	b538      	push	{r3, r4, r5, lr}
 8010b18:	4605      	mov	r5, r0
 8010b1a:	460c      	mov	r4, r1
 8010b1c:	d904      	bls.n	8010b28 <_raise_r+0x14>
 8010b1e:	2316      	movs	r3, #22
 8010b20:	6003      	str	r3, [r0, #0]
 8010b22:	f04f 30ff 	mov.w	r0, #4294967295
 8010b26:	bd38      	pop	{r3, r4, r5, pc}
 8010b28:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8010b2a:	b112      	cbz	r2, 8010b32 <_raise_r+0x1e>
 8010b2c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010b30:	b94b      	cbnz	r3, 8010b46 <_raise_r+0x32>
 8010b32:	4628      	mov	r0, r5
 8010b34:	f000 f830 	bl	8010b98 <_getpid_r>
 8010b38:	4622      	mov	r2, r4
 8010b3a:	4601      	mov	r1, r0
 8010b3c:	4628      	mov	r0, r5
 8010b3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010b42:	f000 b817 	b.w	8010b74 <_kill_r>
 8010b46:	2b01      	cmp	r3, #1
 8010b48:	d00a      	beq.n	8010b60 <_raise_r+0x4c>
 8010b4a:	1c59      	adds	r1, r3, #1
 8010b4c:	d103      	bne.n	8010b56 <_raise_r+0x42>
 8010b4e:	2316      	movs	r3, #22
 8010b50:	6003      	str	r3, [r0, #0]
 8010b52:	2001      	movs	r0, #1
 8010b54:	e7e7      	b.n	8010b26 <_raise_r+0x12>
 8010b56:	2100      	movs	r1, #0
 8010b58:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8010b5c:	4620      	mov	r0, r4
 8010b5e:	4798      	blx	r3
 8010b60:	2000      	movs	r0, #0
 8010b62:	e7e0      	b.n	8010b26 <_raise_r+0x12>

08010b64 <raise>:
 8010b64:	4b02      	ldr	r3, [pc, #8]	@ (8010b70 <raise+0xc>)
 8010b66:	4601      	mov	r1, r0
 8010b68:	6818      	ldr	r0, [r3, #0]
 8010b6a:	f7ff bfd3 	b.w	8010b14 <_raise_r>
 8010b6e:	bf00      	nop
 8010b70:	200001ac 	.word	0x200001ac

08010b74 <_kill_r>:
 8010b74:	b538      	push	{r3, r4, r5, lr}
 8010b76:	4d07      	ldr	r5, [pc, #28]	@ (8010b94 <_kill_r+0x20>)
 8010b78:	2300      	movs	r3, #0
 8010b7a:	4604      	mov	r4, r0
 8010b7c:	4608      	mov	r0, r1
 8010b7e:	4611      	mov	r1, r2
 8010b80:	602b      	str	r3, [r5, #0]
 8010b82:	f7f1 fd05 	bl	8002590 <_kill>
 8010b86:	1c43      	adds	r3, r0, #1
 8010b88:	d102      	bne.n	8010b90 <_kill_r+0x1c>
 8010b8a:	682b      	ldr	r3, [r5, #0]
 8010b8c:	b103      	cbz	r3, 8010b90 <_kill_r+0x1c>
 8010b8e:	6023      	str	r3, [r4, #0]
 8010b90:	bd38      	pop	{r3, r4, r5, pc}
 8010b92:	bf00      	nop
 8010b94:	2000409c 	.word	0x2000409c

08010b98 <_getpid_r>:
 8010b98:	f7f1 bcf2 	b.w	8002580 <_getpid>

08010b9c <__swhatbuf_r>:
 8010b9c:	b570      	push	{r4, r5, r6, lr}
 8010b9e:	460c      	mov	r4, r1
 8010ba0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010ba4:	2900      	cmp	r1, #0
 8010ba6:	b096      	sub	sp, #88	@ 0x58
 8010ba8:	4615      	mov	r5, r2
 8010baa:	461e      	mov	r6, r3
 8010bac:	da0d      	bge.n	8010bca <__swhatbuf_r+0x2e>
 8010bae:	89a3      	ldrh	r3, [r4, #12]
 8010bb0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8010bb4:	f04f 0100 	mov.w	r1, #0
 8010bb8:	bf14      	ite	ne
 8010bba:	2340      	movne	r3, #64	@ 0x40
 8010bbc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8010bc0:	2000      	movs	r0, #0
 8010bc2:	6031      	str	r1, [r6, #0]
 8010bc4:	602b      	str	r3, [r5, #0]
 8010bc6:	b016      	add	sp, #88	@ 0x58
 8010bc8:	bd70      	pop	{r4, r5, r6, pc}
 8010bca:	466a      	mov	r2, sp
 8010bcc:	f000 f848 	bl	8010c60 <_fstat_r>
 8010bd0:	2800      	cmp	r0, #0
 8010bd2:	dbec      	blt.n	8010bae <__swhatbuf_r+0x12>
 8010bd4:	9901      	ldr	r1, [sp, #4]
 8010bd6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8010bda:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8010bde:	4259      	negs	r1, r3
 8010be0:	4159      	adcs	r1, r3
 8010be2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010be6:	e7eb      	b.n	8010bc0 <__swhatbuf_r+0x24>

08010be8 <__smakebuf_r>:
 8010be8:	898b      	ldrh	r3, [r1, #12]
 8010bea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010bec:	079d      	lsls	r5, r3, #30
 8010bee:	4606      	mov	r6, r0
 8010bf0:	460c      	mov	r4, r1
 8010bf2:	d507      	bpl.n	8010c04 <__smakebuf_r+0x1c>
 8010bf4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8010bf8:	6023      	str	r3, [r4, #0]
 8010bfa:	6123      	str	r3, [r4, #16]
 8010bfc:	2301      	movs	r3, #1
 8010bfe:	6163      	str	r3, [r4, #20]
 8010c00:	b003      	add	sp, #12
 8010c02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010c04:	ab01      	add	r3, sp, #4
 8010c06:	466a      	mov	r2, sp
 8010c08:	f7ff ffc8 	bl	8010b9c <__swhatbuf_r>
 8010c0c:	9f00      	ldr	r7, [sp, #0]
 8010c0e:	4605      	mov	r5, r0
 8010c10:	4639      	mov	r1, r7
 8010c12:	4630      	mov	r0, r6
 8010c14:	f7fe fc12 	bl	800f43c <_malloc_r>
 8010c18:	b948      	cbnz	r0, 8010c2e <__smakebuf_r+0x46>
 8010c1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010c1e:	059a      	lsls	r2, r3, #22
 8010c20:	d4ee      	bmi.n	8010c00 <__smakebuf_r+0x18>
 8010c22:	f023 0303 	bic.w	r3, r3, #3
 8010c26:	f043 0302 	orr.w	r3, r3, #2
 8010c2a:	81a3      	strh	r3, [r4, #12]
 8010c2c:	e7e2      	b.n	8010bf4 <__smakebuf_r+0xc>
 8010c2e:	89a3      	ldrh	r3, [r4, #12]
 8010c30:	6020      	str	r0, [r4, #0]
 8010c32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010c36:	81a3      	strh	r3, [r4, #12]
 8010c38:	9b01      	ldr	r3, [sp, #4]
 8010c3a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8010c3e:	b15b      	cbz	r3, 8010c58 <__smakebuf_r+0x70>
 8010c40:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010c44:	4630      	mov	r0, r6
 8010c46:	f000 f81d 	bl	8010c84 <_isatty_r>
 8010c4a:	b128      	cbz	r0, 8010c58 <__smakebuf_r+0x70>
 8010c4c:	89a3      	ldrh	r3, [r4, #12]
 8010c4e:	f023 0303 	bic.w	r3, r3, #3
 8010c52:	f043 0301 	orr.w	r3, r3, #1
 8010c56:	81a3      	strh	r3, [r4, #12]
 8010c58:	89a3      	ldrh	r3, [r4, #12]
 8010c5a:	431d      	orrs	r5, r3
 8010c5c:	81a5      	strh	r5, [r4, #12]
 8010c5e:	e7cf      	b.n	8010c00 <__smakebuf_r+0x18>

08010c60 <_fstat_r>:
 8010c60:	b538      	push	{r3, r4, r5, lr}
 8010c62:	4d07      	ldr	r5, [pc, #28]	@ (8010c80 <_fstat_r+0x20>)
 8010c64:	2300      	movs	r3, #0
 8010c66:	4604      	mov	r4, r0
 8010c68:	4608      	mov	r0, r1
 8010c6a:	4611      	mov	r1, r2
 8010c6c:	602b      	str	r3, [r5, #0]
 8010c6e:	f7f1 fcef 	bl	8002650 <_fstat>
 8010c72:	1c43      	adds	r3, r0, #1
 8010c74:	d102      	bne.n	8010c7c <_fstat_r+0x1c>
 8010c76:	682b      	ldr	r3, [r5, #0]
 8010c78:	b103      	cbz	r3, 8010c7c <_fstat_r+0x1c>
 8010c7a:	6023      	str	r3, [r4, #0]
 8010c7c:	bd38      	pop	{r3, r4, r5, pc}
 8010c7e:	bf00      	nop
 8010c80:	2000409c 	.word	0x2000409c

08010c84 <_isatty_r>:
 8010c84:	b538      	push	{r3, r4, r5, lr}
 8010c86:	4d06      	ldr	r5, [pc, #24]	@ (8010ca0 <_isatty_r+0x1c>)
 8010c88:	2300      	movs	r3, #0
 8010c8a:	4604      	mov	r4, r0
 8010c8c:	4608      	mov	r0, r1
 8010c8e:	602b      	str	r3, [r5, #0]
 8010c90:	f7f1 fcee 	bl	8002670 <_isatty>
 8010c94:	1c43      	adds	r3, r0, #1
 8010c96:	d102      	bne.n	8010c9e <_isatty_r+0x1a>
 8010c98:	682b      	ldr	r3, [r5, #0]
 8010c9a:	b103      	cbz	r3, 8010c9e <_isatty_r+0x1a>
 8010c9c:	6023      	str	r3, [r4, #0]
 8010c9e:	bd38      	pop	{r3, r4, r5, pc}
 8010ca0:	2000409c 	.word	0x2000409c

08010ca4 <sqrt>:
 8010ca4:	b538      	push	{r3, r4, r5, lr}
 8010ca6:	ed2d 8b02 	vpush	{d8}
 8010caa:	ec55 4b10 	vmov	r4, r5, d0
 8010cae:	f000 f825 	bl	8010cfc <__ieee754_sqrt>
 8010cb2:	4622      	mov	r2, r4
 8010cb4:	462b      	mov	r3, r5
 8010cb6:	4620      	mov	r0, r4
 8010cb8:	4629      	mov	r1, r5
 8010cba:	eeb0 8a40 	vmov.f32	s16, s0
 8010cbe:	eef0 8a60 	vmov.f32	s17, s1
 8010cc2:	f7ef ff43 	bl	8000b4c <__aeabi_dcmpun>
 8010cc6:	b990      	cbnz	r0, 8010cee <sqrt+0x4a>
 8010cc8:	2200      	movs	r2, #0
 8010cca:	2300      	movs	r3, #0
 8010ccc:	4620      	mov	r0, r4
 8010cce:	4629      	mov	r1, r5
 8010cd0:	f7ef ff14 	bl	8000afc <__aeabi_dcmplt>
 8010cd4:	b158      	cbz	r0, 8010cee <sqrt+0x4a>
 8010cd6:	f7fd ffc7 	bl	800ec68 <__errno>
 8010cda:	2321      	movs	r3, #33	@ 0x21
 8010cdc:	6003      	str	r3, [r0, #0]
 8010cde:	2200      	movs	r2, #0
 8010ce0:	2300      	movs	r3, #0
 8010ce2:	4610      	mov	r0, r2
 8010ce4:	4619      	mov	r1, r3
 8010ce6:	f7ef fdc1 	bl	800086c <__aeabi_ddiv>
 8010cea:	ec41 0b18 	vmov	d8, r0, r1
 8010cee:	eeb0 0a48 	vmov.f32	s0, s16
 8010cf2:	eef0 0a68 	vmov.f32	s1, s17
 8010cf6:	ecbd 8b02 	vpop	{d8}
 8010cfa:	bd38      	pop	{r3, r4, r5, pc}

08010cfc <__ieee754_sqrt>:
 8010cfc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d00:	4a66      	ldr	r2, [pc, #408]	@ (8010e9c <__ieee754_sqrt+0x1a0>)
 8010d02:	ec55 4b10 	vmov	r4, r5, d0
 8010d06:	43aa      	bics	r2, r5
 8010d08:	462b      	mov	r3, r5
 8010d0a:	4621      	mov	r1, r4
 8010d0c:	d110      	bne.n	8010d30 <__ieee754_sqrt+0x34>
 8010d0e:	4622      	mov	r2, r4
 8010d10:	4620      	mov	r0, r4
 8010d12:	4629      	mov	r1, r5
 8010d14:	f7ef fc80 	bl	8000618 <__aeabi_dmul>
 8010d18:	4602      	mov	r2, r0
 8010d1a:	460b      	mov	r3, r1
 8010d1c:	4620      	mov	r0, r4
 8010d1e:	4629      	mov	r1, r5
 8010d20:	f7ef fac4 	bl	80002ac <__adddf3>
 8010d24:	4604      	mov	r4, r0
 8010d26:	460d      	mov	r5, r1
 8010d28:	ec45 4b10 	vmov	d0, r4, r5
 8010d2c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d30:	2d00      	cmp	r5, #0
 8010d32:	dc0e      	bgt.n	8010d52 <__ieee754_sqrt+0x56>
 8010d34:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8010d38:	4322      	orrs	r2, r4
 8010d3a:	d0f5      	beq.n	8010d28 <__ieee754_sqrt+0x2c>
 8010d3c:	b19d      	cbz	r5, 8010d66 <__ieee754_sqrt+0x6a>
 8010d3e:	4622      	mov	r2, r4
 8010d40:	4620      	mov	r0, r4
 8010d42:	4629      	mov	r1, r5
 8010d44:	f7ef fab0 	bl	80002a8 <__aeabi_dsub>
 8010d48:	4602      	mov	r2, r0
 8010d4a:	460b      	mov	r3, r1
 8010d4c:	f7ef fd8e 	bl	800086c <__aeabi_ddiv>
 8010d50:	e7e8      	b.n	8010d24 <__ieee754_sqrt+0x28>
 8010d52:	152a      	asrs	r2, r5, #20
 8010d54:	d115      	bne.n	8010d82 <__ieee754_sqrt+0x86>
 8010d56:	2000      	movs	r0, #0
 8010d58:	e009      	b.n	8010d6e <__ieee754_sqrt+0x72>
 8010d5a:	0acb      	lsrs	r3, r1, #11
 8010d5c:	3a15      	subs	r2, #21
 8010d5e:	0549      	lsls	r1, r1, #21
 8010d60:	2b00      	cmp	r3, #0
 8010d62:	d0fa      	beq.n	8010d5a <__ieee754_sqrt+0x5e>
 8010d64:	e7f7      	b.n	8010d56 <__ieee754_sqrt+0x5a>
 8010d66:	462a      	mov	r2, r5
 8010d68:	e7fa      	b.n	8010d60 <__ieee754_sqrt+0x64>
 8010d6a:	005b      	lsls	r3, r3, #1
 8010d6c:	3001      	adds	r0, #1
 8010d6e:	02dc      	lsls	r4, r3, #11
 8010d70:	d5fb      	bpl.n	8010d6a <__ieee754_sqrt+0x6e>
 8010d72:	1e44      	subs	r4, r0, #1
 8010d74:	1b12      	subs	r2, r2, r4
 8010d76:	f1c0 0420 	rsb	r4, r0, #32
 8010d7a:	fa21 f404 	lsr.w	r4, r1, r4
 8010d7e:	4323      	orrs	r3, r4
 8010d80:	4081      	lsls	r1, r0
 8010d82:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010d86:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 8010d8a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8010d8e:	07d2      	lsls	r2, r2, #31
 8010d90:	bf5c      	itt	pl
 8010d92:	005b      	lslpl	r3, r3, #1
 8010d94:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8010d98:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8010d9c:	bf58      	it	pl
 8010d9e:	0049      	lslpl	r1, r1, #1
 8010da0:	2600      	movs	r6, #0
 8010da2:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8010da6:	107f      	asrs	r7, r7, #1
 8010da8:	0049      	lsls	r1, r1, #1
 8010daa:	2016      	movs	r0, #22
 8010dac:	4632      	mov	r2, r6
 8010dae:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8010db2:	1915      	adds	r5, r2, r4
 8010db4:	429d      	cmp	r5, r3
 8010db6:	bfde      	ittt	le
 8010db8:	192a      	addle	r2, r5, r4
 8010dba:	1b5b      	suble	r3, r3, r5
 8010dbc:	1936      	addle	r6, r6, r4
 8010dbe:	0fcd      	lsrs	r5, r1, #31
 8010dc0:	3801      	subs	r0, #1
 8010dc2:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8010dc6:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8010dca:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8010dce:	d1f0      	bne.n	8010db2 <__ieee754_sqrt+0xb6>
 8010dd0:	4605      	mov	r5, r0
 8010dd2:	2420      	movs	r4, #32
 8010dd4:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8010dd8:	4293      	cmp	r3, r2
 8010dda:	eb0c 0e00 	add.w	lr, ip, r0
 8010dde:	dc02      	bgt.n	8010de6 <__ieee754_sqrt+0xea>
 8010de0:	d113      	bne.n	8010e0a <__ieee754_sqrt+0x10e>
 8010de2:	458e      	cmp	lr, r1
 8010de4:	d811      	bhi.n	8010e0a <__ieee754_sqrt+0x10e>
 8010de6:	f1be 0f00 	cmp.w	lr, #0
 8010dea:	eb0e 000c 	add.w	r0, lr, ip
 8010dee:	da3f      	bge.n	8010e70 <__ieee754_sqrt+0x174>
 8010df0:	2800      	cmp	r0, #0
 8010df2:	db3d      	blt.n	8010e70 <__ieee754_sqrt+0x174>
 8010df4:	f102 0801 	add.w	r8, r2, #1
 8010df8:	1a9b      	subs	r3, r3, r2
 8010dfa:	458e      	cmp	lr, r1
 8010dfc:	bf88      	it	hi
 8010dfe:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8010e02:	eba1 010e 	sub.w	r1, r1, lr
 8010e06:	4465      	add	r5, ip
 8010e08:	4642      	mov	r2, r8
 8010e0a:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8010e0e:	3c01      	subs	r4, #1
 8010e10:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8010e14:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8010e18:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8010e1c:	d1dc      	bne.n	8010dd8 <__ieee754_sqrt+0xdc>
 8010e1e:	4319      	orrs	r1, r3
 8010e20:	d01b      	beq.n	8010e5a <__ieee754_sqrt+0x15e>
 8010e22:	f8df a07c 	ldr.w	sl, [pc, #124]	@ 8010ea0 <__ieee754_sqrt+0x1a4>
 8010e26:	f8df b07c 	ldr.w	fp, [pc, #124]	@ 8010ea4 <__ieee754_sqrt+0x1a8>
 8010e2a:	e9da 0100 	ldrd	r0, r1, [sl]
 8010e2e:	e9db 2300 	ldrd	r2, r3, [fp]
 8010e32:	f7ef fa39 	bl	80002a8 <__aeabi_dsub>
 8010e36:	e9da 8900 	ldrd	r8, r9, [sl]
 8010e3a:	4602      	mov	r2, r0
 8010e3c:	460b      	mov	r3, r1
 8010e3e:	4640      	mov	r0, r8
 8010e40:	4649      	mov	r1, r9
 8010e42:	f7ef fe65 	bl	8000b10 <__aeabi_dcmple>
 8010e46:	b140      	cbz	r0, 8010e5a <__ieee754_sqrt+0x15e>
 8010e48:	f1b5 3fff 	cmp.w	r5, #4294967295
 8010e4c:	e9da 0100 	ldrd	r0, r1, [sl]
 8010e50:	e9db 2300 	ldrd	r2, r3, [fp]
 8010e54:	d10e      	bne.n	8010e74 <__ieee754_sqrt+0x178>
 8010e56:	3601      	adds	r6, #1
 8010e58:	4625      	mov	r5, r4
 8010e5a:	1073      	asrs	r3, r6, #1
 8010e5c:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 8010e60:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 8010e64:	eb03 5107 	add.w	r1, r3, r7, lsl #20
 8010e68:	086b      	lsrs	r3, r5, #1
 8010e6a:	ea43 70c6 	orr.w	r0, r3, r6, lsl #31
 8010e6e:	e759      	b.n	8010d24 <__ieee754_sqrt+0x28>
 8010e70:	4690      	mov	r8, r2
 8010e72:	e7c1      	b.n	8010df8 <__ieee754_sqrt+0xfc>
 8010e74:	f7ef fa1a 	bl	80002ac <__adddf3>
 8010e78:	e9da 8900 	ldrd	r8, r9, [sl]
 8010e7c:	4602      	mov	r2, r0
 8010e7e:	460b      	mov	r3, r1
 8010e80:	4640      	mov	r0, r8
 8010e82:	4649      	mov	r1, r9
 8010e84:	f7ef fe3a 	bl	8000afc <__aeabi_dcmplt>
 8010e88:	b120      	cbz	r0, 8010e94 <__ieee754_sqrt+0x198>
 8010e8a:	1cab      	adds	r3, r5, #2
 8010e8c:	bf08      	it	eq
 8010e8e:	3601      	addeq	r6, #1
 8010e90:	3502      	adds	r5, #2
 8010e92:	e7e2      	b.n	8010e5a <__ieee754_sqrt+0x15e>
 8010e94:	1c6b      	adds	r3, r5, #1
 8010e96:	f023 0501 	bic.w	r5, r3, #1
 8010e9a:	e7de      	b.n	8010e5a <__ieee754_sqrt+0x15e>
 8010e9c:	7ff00000 	.word	0x7ff00000
 8010ea0:	080114a8 	.word	0x080114a8
 8010ea4:	080114a0 	.word	0x080114a0

08010ea8 <_init>:
 8010ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010eaa:	bf00      	nop
 8010eac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010eae:	bc08      	pop	{r3}
 8010eb0:	469e      	mov	lr, r3
 8010eb2:	4770      	bx	lr

08010eb4 <_fini>:
 8010eb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010eb6:	bf00      	nop
 8010eb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010eba:	bc08      	pop	{r3}
 8010ebc:	469e      	mov	lr, r3
 8010ebe:	4770      	bx	lr
=======
 800a430:	b580      	push	{r7, lr}
 800a432:	b082      	sub	sp, #8
 800a434:	af00      	add	r7, sp, #0
 800a436:	6078      	str	r0, [r7, #4]
 800a438:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800a43a:	2200      	movs	r2, #0
 800a43c:	6839      	ldr	r1, [r7, #0]
 800a43e:	6878      	ldr	r0, [r7, #4]
 800a440:	f7ff ffaa 	bl	800a398 <FATFS_LinkDriverEx>
 800a444:	4603      	mov	r3, r0
}
 800a446:	4618      	mov	r0, r3
 800a448:	3708      	adds	r7, #8
 800a44a:	46bd      	mov	sp, r7
 800a44c:	bd80      	pop	{r7, pc}

0800a44e <atof>:
 800a44e:	2100      	movs	r1, #0
 800a450:	f000 be06 	b.w	800b060 <strtod>

0800a454 <atoi>:
 800a454:	220a      	movs	r2, #10
 800a456:	2100      	movs	r1, #0
 800a458:	f000 be88 	b.w	800b16c <strtol>

0800a45c <sulp>:
 800a45c:	b570      	push	{r4, r5, r6, lr}
 800a45e:	4604      	mov	r4, r0
 800a460:	460d      	mov	r5, r1
 800a462:	ec45 4b10 	vmov	d0, r4, r5
 800a466:	4616      	mov	r6, r2
 800a468:	f002 f84a 	bl	800c500 <__ulp>
 800a46c:	ec51 0b10 	vmov	r0, r1, d0
 800a470:	b17e      	cbz	r6, 800a492 <sulp+0x36>
 800a472:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a476:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	dd09      	ble.n	800a492 <sulp+0x36>
 800a47e:	051b      	lsls	r3, r3, #20
 800a480:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800a484:	2400      	movs	r4, #0
 800a486:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800a48a:	4622      	mov	r2, r4
 800a48c:	462b      	mov	r3, r5
 800a48e:	f7f6 f8c3 	bl	8000618 <__aeabi_dmul>
 800a492:	ec41 0b10 	vmov	d0, r0, r1
 800a496:	bd70      	pop	{r4, r5, r6, pc}

0800a498 <_strtod_l>:
 800a498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a49c:	b09f      	sub	sp, #124	@ 0x7c
 800a49e:	460c      	mov	r4, r1
 800a4a0:	9217      	str	r2, [sp, #92]	@ 0x5c
 800a4a2:	2200      	movs	r2, #0
 800a4a4:	921a      	str	r2, [sp, #104]	@ 0x68
 800a4a6:	9005      	str	r0, [sp, #20]
 800a4a8:	f04f 0a00 	mov.w	sl, #0
 800a4ac:	f04f 0b00 	mov.w	fp, #0
 800a4b0:	460a      	mov	r2, r1
 800a4b2:	9219      	str	r2, [sp, #100]	@ 0x64
 800a4b4:	7811      	ldrb	r1, [r2, #0]
 800a4b6:	292b      	cmp	r1, #43	@ 0x2b
 800a4b8:	d04a      	beq.n	800a550 <_strtod_l+0xb8>
 800a4ba:	d838      	bhi.n	800a52e <_strtod_l+0x96>
 800a4bc:	290d      	cmp	r1, #13
 800a4be:	d832      	bhi.n	800a526 <_strtod_l+0x8e>
 800a4c0:	2908      	cmp	r1, #8
 800a4c2:	d832      	bhi.n	800a52a <_strtod_l+0x92>
 800a4c4:	2900      	cmp	r1, #0
 800a4c6:	d03b      	beq.n	800a540 <_strtod_l+0xa8>
 800a4c8:	2200      	movs	r2, #0
 800a4ca:	920b      	str	r2, [sp, #44]	@ 0x2c
 800a4cc:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800a4ce:	782a      	ldrb	r2, [r5, #0]
 800a4d0:	2a30      	cmp	r2, #48	@ 0x30
 800a4d2:	f040 80b3 	bne.w	800a63c <_strtod_l+0x1a4>
 800a4d6:	786a      	ldrb	r2, [r5, #1]
 800a4d8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a4dc:	2a58      	cmp	r2, #88	@ 0x58
 800a4de:	d16e      	bne.n	800a5be <_strtod_l+0x126>
 800a4e0:	9302      	str	r3, [sp, #8]
 800a4e2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a4e4:	9301      	str	r3, [sp, #4]
 800a4e6:	ab1a      	add	r3, sp, #104	@ 0x68
 800a4e8:	9300      	str	r3, [sp, #0]
 800a4ea:	4a8e      	ldr	r2, [pc, #568]	@ (800a724 <_strtod_l+0x28c>)
 800a4ec:	9805      	ldr	r0, [sp, #20]
 800a4ee:	ab1b      	add	r3, sp, #108	@ 0x6c
 800a4f0:	a919      	add	r1, sp, #100	@ 0x64
 800a4f2:	f001 f8ff 	bl	800b6f4 <__gethex>
 800a4f6:	f010 060f 	ands.w	r6, r0, #15
 800a4fa:	4604      	mov	r4, r0
 800a4fc:	d005      	beq.n	800a50a <_strtod_l+0x72>
 800a4fe:	2e06      	cmp	r6, #6
 800a500:	d128      	bne.n	800a554 <_strtod_l+0xbc>
 800a502:	3501      	adds	r5, #1
 800a504:	2300      	movs	r3, #0
 800a506:	9519      	str	r5, [sp, #100]	@ 0x64
 800a508:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a50a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	f040 858e 	bne.w	800b02e <_strtod_l+0xb96>
 800a512:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a514:	b1cb      	cbz	r3, 800a54a <_strtod_l+0xb2>
 800a516:	4652      	mov	r2, sl
 800a518:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800a51c:	ec43 2b10 	vmov	d0, r2, r3
 800a520:	b01f      	add	sp, #124	@ 0x7c
 800a522:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a526:	2920      	cmp	r1, #32
 800a528:	d1ce      	bne.n	800a4c8 <_strtod_l+0x30>
 800a52a:	3201      	adds	r2, #1
 800a52c:	e7c1      	b.n	800a4b2 <_strtod_l+0x1a>
 800a52e:	292d      	cmp	r1, #45	@ 0x2d
 800a530:	d1ca      	bne.n	800a4c8 <_strtod_l+0x30>
 800a532:	2101      	movs	r1, #1
 800a534:	910b      	str	r1, [sp, #44]	@ 0x2c
 800a536:	1c51      	adds	r1, r2, #1
 800a538:	9119      	str	r1, [sp, #100]	@ 0x64
 800a53a:	7852      	ldrb	r2, [r2, #1]
 800a53c:	2a00      	cmp	r2, #0
 800a53e:	d1c5      	bne.n	800a4cc <_strtod_l+0x34>
 800a540:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a542:	9419      	str	r4, [sp, #100]	@ 0x64
 800a544:	2b00      	cmp	r3, #0
 800a546:	f040 8570 	bne.w	800b02a <_strtod_l+0xb92>
 800a54a:	4652      	mov	r2, sl
 800a54c:	465b      	mov	r3, fp
 800a54e:	e7e5      	b.n	800a51c <_strtod_l+0x84>
 800a550:	2100      	movs	r1, #0
 800a552:	e7ef      	b.n	800a534 <_strtod_l+0x9c>
 800a554:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a556:	b13a      	cbz	r2, 800a568 <_strtod_l+0xd0>
 800a558:	2135      	movs	r1, #53	@ 0x35
 800a55a:	a81c      	add	r0, sp, #112	@ 0x70
 800a55c:	f002 f8ca 	bl	800c6f4 <__copybits>
 800a560:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a562:	9805      	ldr	r0, [sp, #20]
 800a564:	f001 fc98 	bl	800be98 <_Bfree>
 800a568:	3e01      	subs	r6, #1
 800a56a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800a56c:	2e04      	cmp	r6, #4
 800a56e:	d806      	bhi.n	800a57e <_strtod_l+0xe6>
 800a570:	e8df f006 	tbb	[pc, r6]
 800a574:	201d0314 	.word	0x201d0314
 800a578:	14          	.byte	0x14
 800a579:	00          	.byte	0x00
 800a57a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800a57e:	05e1      	lsls	r1, r4, #23
 800a580:	bf48      	it	mi
 800a582:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800a586:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a58a:	0d1b      	lsrs	r3, r3, #20
 800a58c:	051b      	lsls	r3, r3, #20
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d1bb      	bne.n	800a50a <_strtod_l+0x72>
 800a592:	f000 ffb9 	bl	800b508 <__errno>
 800a596:	2322      	movs	r3, #34	@ 0x22
 800a598:	6003      	str	r3, [r0, #0]
 800a59a:	e7b6      	b.n	800a50a <_strtod_l+0x72>
 800a59c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800a5a0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800a5a4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800a5a8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800a5ac:	e7e7      	b.n	800a57e <_strtod_l+0xe6>
 800a5ae:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800a72c <_strtod_l+0x294>
 800a5b2:	e7e4      	b.n	800a57e <_strtod_l+0xe6>
 800a5b4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800a5b8:	f04f 3aff 	mov.w	sl, #4294967295
 800a5bc:	e7df      	b.n	800a57e <_strtod_l+0xe6>
 800a5be:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a5c0:	1c5a      	adds	r2, r3, #1
 800a5c2:	9219      	str	r2, [sp, #100]	@ 0x64
 800a5c4:	785b      	ldrb	r3, [r3, #1]
 800a5c6:	2b30      	cmp	r3, #48	@ 0x30
 800a5c8:	d0f9      	beq.n	800a5be <_strtod_l+0x126>
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d09d      	beq.n	800a50a <_strtod_l+0x72>
 800a5ce:	2301      	movs	r3, #1
 800a5d0:	9309      	str	r3, [sp, #36]	@ 0x24
 800a5d2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a5d4:	930c      	str	r3, [sp, #48]	@ 0x30
 800a5d6:	2300      	movs	r3, #0
 800a5d8:	9308      	str	r3, [sp, #32]
 800a5da:	930a      	str	r3, [sp, #40]	@ 0x28
 800a5dc:	461f      	mov	r7, r3
 800a5de:	220a      	movs	r2, #10
 800a5e0:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800a5e2:	7805      	ldrb	r5, [r0, #0]
 800a5e4:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800a5e8:	b2d9      	uxtb	r1, r3
 800a5ea:	2909      	cmp	r1, #9
 800a5ec:	d928      	bls.n	800a640 <_strtod_l+0x1a8>
 800a5ee:	494e      	ldr	r1, [pc, #312]	@ (800a728 <_strtod_l+0x290>)
 800a5f0:	2201      	movs	r2, #1
 800a5f2:	f000 ff1d 	bl	800b430 <strncmp>
 800a5f6:	2800      	cmp	r0, #0
 800a5f8:	d032      	beq.n	800a660 <_strtod_l+0x1c8>
 800a5fa:	2000      	movs	r0, #0
 800a5fc:	462a      	mov	r2, r5
 800a5fe:	4681      	mov	r9, r0
 800a600:	463d      	mov	r5, r7
 800a602:	4603      	mov	r3, r0
 800a604:	2a65      	cmp	r2, #101	@ 0x65
 800a606:	d001      	beq.n	800a60c <_strtod_l+0x174>
 800a608:	2a45      	cmp	r2, #69	@ 0x45
 800a60a:	d114      	bne.n	800a636 <_strtod_l+0x19e>
 800a60c:	b91d      	cbnz	r5, 800a616 <_strtod_l+0x17e>
 800a60e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a610:	4302      	orrs	r2, r0
 800a612:	d095      	beq.n	800a540 <_strtod_l+0xa8>
 800a614:	2500      	movs	r5, #0
 800a616:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800a618:	1c62      	adds	r2, r4, #1
 800a61a:	9219      	str	r2, [sp, #100]	@ 0x64
 800a61c:	7862      	ldrb	r2, [r4, #1]
 800a61e:	2a2b      	cmp	r2, #43	@ 0x2b
 800a620:	d077      	beq.n	800a712 <_strtod_l+0x27a>
 800a622:	2a2d      	cmp	r2, #45	@ 0x2d
 800a624:	d07b      	beq.n	800a71e <_strtod_l+0x286>
 800a626:	f04f 0c00 	mov.w	ip, #0
 800a62a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800a62e:	2909      	cmp	r1, #9
 800a630:	f240 8082 	bls.w	800a738 <_strtod_l+0x2a0>
 800a634:	9419      	str	r4, [sp, #100]	@ 0x64
 800a636:	f04f 0800 	mov.w	r8, #0
 800a63a:	e0a2      	b.n	800a782 <_strtod_l+0x2ea>
 800a63c:	2300      	movs	r3, #0
 800a63e:	e7c7      	b.n	800a5d0 <_strtod_l+0x138>
 800a640:	2f08      	cmp	r7, #8
 800a642:	bfd5      	itete	le
 800a644:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800a646:	9908      	ldrgt	r1, [sp, #32]
 800a648:	fb02 3301 	mlale	r3, r2, r1, r3
 800a64c:	fb02 3301 	mlagt	r3, r2, r1, r3
 800a650:	f100 0001 	add.w	r0, r0, #1
 800a654:	bfd4      	ite	le
 800a656:	930a      	strle	r3, [sp, #40]	@ 0x28
 800a658:	9308      	strgt	r3, [sp, #32]
 800a65a:	3701      	adds	r7, #1
 800a65c:	9019      	str	r0, [sp, #100]	@ 0x64
 800a65e:	e7bf      	b.n	800a5e0 <_strtod_l+0x148>
 800a660:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a662:	1c5a      	adds	r2, r3, #1
 800a664:	9219      	str	r2, [sp, #100]	@ 0x64
 800a666:	785a      	ldrb	r2, [r3, #1]
 800a668:	b37f      	cbz	r7, 800a6ca <_strtod_l+0x232>
 800a66a:	4681      	mov	r9, r0
 800a66c:	463d      	mov	r5, r7
 800a66e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800a672:	2b09      	cmp	r3, #9
 800a674:	d912      	bls.n	800a69c <_strtod_l+0x204>
 800a676:	2301      	movs	r3, #1
 800a678:	e7c4      	b.n	800a604 <_strtod_l+0x16c>
 800a67a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a67c:	1c5a      	adds	r2, r3, #1
 800a67e:	9219      	str	r2, [sp, #100]	@ 0x64
 800a680:	785a      	ldrb	r2, [r3, #1]
 800a682:	3001      	adds	r0, #1
 800a684:	2a30      	cmp	r2, #48	@ 0x30
 800a686:	d0f8      	beq.n	800a67a <_strtod_l+0x1e2>
 800a688:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800a68c:	2b08      	cmp	r3, #8
 800a68e:	f200 84d3 	bhi.w	800b038 <_strtod_l+0xba0>
 800a692:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a694:	930c      	str	r3, [sp, #48]	@ 0x30
 800a696:	4681      	mov	r9, r0
 800a698:	2000      	movs	r0, #0
 800a69a:	4605      	mov	r5, r0
 800a69c:	3a30      	subs	r2, #48	@ 0x30
 800a69e:	f100 0301 	add.w	r3, r0, #1
 800a6a2:	d02a      	beq.n	800a6fa <_strtod_l+0x262>
 800a6a4:	4499      	add	r9, r3
 800a6a6:	eb00 0c05 	add.w	ip, r0, r5
 800a6aa:	462b      	mov	r3, r5
 800a6ac:	210a      	movs	r1, #10
 800a6ae:	4563      	cmp	r3, ip
 800a6b0:	d10d      	bne.n	800a6ce <_strtod_l+0x236>
 800a6b2:	1c69      	adds	r1, r5, #1
 800a6b4:	4401      	add	r1, r0
 800a6b6:	4428      	add	r0, r5
 800a6b8:	2808      	cmp	r0, #8
 800a6ba:	dc16      	bgt.n	800a6ea <_strtod_l+0x252>
 800a6bc:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a6be:	230a      	movs	r3, #10
 800a6c0:	fb03 2300 	mla	r3, r3, r0, r2
 800a6c4:	930a      	str	r3, [sp, #40]	@ 0x28
 800a6c6:	2300      	movs	r3, #0
 800a6c8:	e018      	b.n	800a6fc <_strtod_l+0x264>
 800a6ca:	4638      	mov	r0, r7
 800a6cc:	e7da      	b.n	800a684 <_strtod_l+0x1ec>
 800a6ce:	2b08      	cmp	r3, #8
 800a6d0:	f103 0301 	add.w	r3, r3, #1
 800a6d4:	dc03      	bgt.n	800a6de <_strtod_l+0x246>
 800a6d6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800a6d8:	434e      	muls	r6, r1
 800a6da:	960a      	str	r6, [sp, #40]	@ 0x28
 800a6dc:	e7e7      	b.n	800a6ae <_strtod_l+0x216>
 800a6de:	2b10      	cmp	r3, #16
 800a6e0:	bfde      	ittt	le
 800a6e2:	9e08      	ldrle	r6, [sp, #32]
 800a6e4:	434e      	mulle	r6, r1
 800a6e6:	9608      	strle	r6, [sp, #32]
 800a6e8:	e7e1      	b.n	800a6ae <_strtod_l+0x216>
 800a6ea:	280f      	cmp	r0, #15
 800a6ec:	dceb      	bgt.n	800a6c6 <_strtod_l+0x22e>
 800a6ee:	9808      	ldr	r0, [sp, #32]
 800a6f0:	230a      	movs	r3, #10
 800a6f2:	fb03 2300 	mla	r3, r3, r0, r2
 800a6f6:	9308      	str	r3, [sp, #32]
 800a6f8:	e7e5      	b.n	800a6c6 <_strtod_l+0x22e>
 800a6fa:	4629      	mov	r1, r5
 800a6fc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a6fe:	1c50      	adds	r0, r2, #1
 800a700:	9019      	str	r0, [sp, #100]	@ 0x64
 800a702:	7852      	ldrb	r2, [r2, #1]
 800a704:	4618      	mov	r0, r3
 800a706:	460d      	mov	r5, r1
 800a708:	e7b1      	b.n	800a66e <_strtod_l+0x1d6>
 800a70a:	f04f 0900 	mov.w	r9, #0
 800a70e:	2301      	movs	r3, #1
 800a710:	e77d      	b.n	800a60e <_strtod_l+0x176>
 800a712:	f04f 0c00 	mov.w	ip, #0
 800a716:	1ca2      	adds	r2, r4, #2
 800a718:	9219      	str	r2, [sp, #100]	@ 0x64
 800a71a:	78a2      	ldrb	r2, [r4, #2]
 800a71c:	e785      	b.n	800a62a <_strtod_l+0x192>
 800a71e:	f04f 0c01 	mov.w	ip, #1
 800a722:	e7f8      	b.n	800a716 <_strtod_l+0x27e>
 800a724:	0800d9d0 	.word	0x0800d9d0
 800a728:	0800d9ac 	.word	0x0800d9ac
 800a72c:	7ff00000 	.word	0x7ff00000
 800a730:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a732:	1c51      	adds	r1, r2, #1
 800a734:	9119      	str	r1, [sp, #100]	@ 0x64
 800a736:	7852      	ldrb	r2, [r2, #1]
 800a738:	2a30      	cmp	r2, #48	@ 0x30
 800a73a:	d0f9      	beq.n	800a730 <_strtod_l+0x298>
 800a73c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800a740:	2908      	cmp	r1, #8
 800a742:	f63f af78 	bhi.w	800a636 <_strtod_l+0x19e>
 800a746:	3a30      	subs	r2, #48	@ 0x30
 800a748:	920e      	str	r2, [sp, #56]	@ 0x38
 800a74a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a74c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800a74e:	f04f 080a 	mov.w	r8, #10
 800a752:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a754:	1c56      	adds	r6, r2, #1
 800a756:	9619      	str	r6, [sp, #100]	@ 0x64
 800a758:	7852      	ldrb	r2, [r2, #1]
 800a75a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800a75e:	f1be 0f09 	cmp.w	lr, #9
 800a762:	d939      	bls.n	800a7d8 <_strtod_l+0x340>
 800a764:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800a766:	1a76      	subs	r6, r6, r1
 800a768:	2e08      	cmp	r6, #8
 800a76a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800a76e:	dc03      	bgt.n	800a778 <_strtod_l+0x2e0>
 800a770:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800a772:	4588      	cmp	r8, r1
 800a774:	bfa8      	it	ge
 800a776:	4688      	movge	r8, r1
 800a778:	f1bc 0f00 	cmp.w	ip, #0
 800a77c:	d001      	beq.n	800a782 <_strtod_l+0x2ea>
 800a77e:	f1c8 0800 	rsb	r8, r8, #0
 800a782:	2d00      	cmp	r5, #0
 800a784:	d14e      	bne.n	800a824 <_strtod_l+0x38c>
 800a786:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a788:	4308      	orrs	r0, r1
 800a78a:	f47f aebe 	bne.w	800a50a <_strtod_l+0x72>
 800a78e:	2b00      	cmp	r3, #0
 800a790:	f47f aed6 	bne.w	800a540 <_strtod_l+0xa8>
 800a794:	2a69      	cmp	r2, #105	@ 0x69
 800a796:	d028      	beq.n	800a7ea <_strtod_l+0x352>
 800a798:	dc25      	bgt.n	800a7e6 <_strtod_l+0x34e>
 800a79a:	2a49      	cmp	r2, #73	@ 0x49
 800a79c:	d025      	beq.n	800a7ea <_strtod_l+0x352>
 800a79e:	2a4e      	cmp	r2, #78	@ 0x4e
 800a7a0:	f47f aece 	bne.w	800a540 <_strtod_l+0xa8>
 800a7a4:	499b      	ldr	r1, [pc, #620]	@ (800aa14 <_strtod_l+0x57c>)
 800a7a6:	a819      	add	r0, sp, #100	@ 0x64
 800a7a8:	f001 f9c6 	bl	800bb38 <__match>
 800a7ac:	2800      	cmp	r0, #0
 800a7ae:	f43f aec7 	beq.w	800a540 <_strtod_l+0xa8>
 800a7b2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a7b4:	781b      	ldrb	r3, [r3, #0]
 800a7b6:	2b28      	cmp	r3, #40	@ 0x28
 800a7b8:	d12e      	bne.n	800a818 <_strtod_l+0x380>
 800a7ba:	4997      	ldr	r1, [pc, #604]	@ (800aa18 <_strtod_l+0x580>)
 800a7bc:	aa1c      	add	r2, sp, #112	@ 0x70
 800a7be:	a819      	add	r0, sp, #100	@ 0x64
 800a7c0:	f001 f9ce 	bl	800bb60 <__hexnan>
 800a7c4:	2805      	cmp	r0, #5
 800a7c6:	d127      	bne.n	800a818 <_strtod_l+0x380>
 800a7c8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a7ca:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800a7ce:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800a7d2:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800a7d6:	e698      	b.n	800a50a <_strtod_l+0x72>
 800a7d8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800a7da:	fb08 2101 	mla	r1, r8, r1, r2
 800a7de:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800a7e2:	920e      	str	r2, [sp, #56]	@ 0x38
 800a7e4:	e7b5      	b.n	800a752 <_strtod_l+0x2ba>
 800a7e6:	2a6e      	cmp	r2, #110	@ 0x6e
 800a7e8:	e7da      	b.n	800a7a0 <_strtod_l+0x308>
 800a7ea:	498c      	ldr	r1, [pc, #560]	@ (800aa1c <_strtod_l+0x584>)
 800a7ec:	a819      	add	r0, sp, #100	@ 0x64
 800a7ee:	f001 f9a3 	bl	800bb38 <__match>
 800a7f2:	2800      	cmp	r0, #0
 800a7f4:	f43f aea4 	beq.w	800a540 <_strtod_l+0xa8>
 800a7f8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a7fa:	4989      	ldr	r1, [pc, #548]	@ (800aa20 <_strtod_l+0x588>)
 800a7fc:	3b01      	subs	r3, #1
 800a7fe:	a819      	add	r0, sp, #100	@ 0x64
 800a800:	9319      	str	r3, [sp, #100]	@ 0x64
 800a802:	f001 f999 	bl	800bb38 <__match>
 800a806:	b910      	cbnz	r0, 800a80e <_strtod_l+0x376>
 800a808:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a80a:	3301      	adds	r3, #1
 800a80c:	9319      	str	r3, [sp, #100]	@ 0x64
 800a80e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800aa30 <_strtod_l+0x598>
 800a812:	f04f 0a00 	mov.w	sl, #0
 800a816:	e678      	b.n	800a50a <_strtod_l+0x72>
 800a818:	4882      	ldr	r0, [pc, #520]	@ (800aa24 <_strtod_l+0x58c>)
 800a81a:	f000 feb1 	bl	800b580 <nan>
 800a81e:	ec5b ab10 	vmov	sl, fp, d0
 800a822:	e672      	b.n	800a50a <_strtod_l+0x72>
 800a824:	eba8 0309 	sub.w	r3, r8, r9
 800a828:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a82a:	9309      	str	r3, [sp, #36]	@ 0x24
 800a82c:	2f00      	cmp	r7, #0
 800a82e:	bf08      	it	eq
 800a830:	462f      	moveq	r7, r5
 800a832:	2d10      	cmp	r5, #16
 800a834:	462c      	mov	r4, r5
 800a836:	bfa8      	it	ge
 800a838:	2410      	movge	r4, #16
 800a83a:	f7f5 fe73 	bl	8000524 <__aeabi_ui2d>
 800a83e:	2d09      	cmp	r5, #9
 800a840:	4682      	mov	sl, r0
 800a842:	468b      	mov	fp, r1
 800a844:	dc13      	bgt.n	800a86e <_strtod_l+0x3d6>
 800a846:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a848:	2b00      	cmp	r3, #0
 800a84a:	f43f ae5e 	beq.w	800a50a <_strtod_l+0x72>
 800a84e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a850:	dd78      	ble.n	800a944 <_strtod_l+0x4ac>
 800a852:	2b16      	cmp	r3, #22
 800a854:	dc5f      	bgt.n	800a916 <_strtod_l+0x47e>
 800a856:	4974      	ldr	r1, [pc, #464]	@ (800aa28 <_strtod_l+0x590>)
 800a858:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a85c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a860:	4652      	mov	r2, sl
 800a862:	465b      	mov	r3, fp
 800a864:	f7f5 fed8 	bl	8000618 <__aeabi_dmul>
 800a868:	4682      	mov	sl, r0
 800a86a:	468b      	mov	fp, r1
 800a86c:	e64d      	b.n	800a50a <_strtod_l+0x72>
 800a86e:	4b6e      	ldr	r3, [pc, #440]	@ (800aa28 <_strtod_l+0x590>)
 800a870:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a874:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800a878:	f7f5 fece 	bl	8000618 <__aeabi_dmul>
 800a87c:	4682      	mov	sl, r0
 800a87e:	9808      	ldr	r0, [sp, #32]
 800a880:	468b      	mov	fp, r1
 800a882:	f7f5 fe4f 	bl	8000524 <__aeabi_ui2d>
 800a886:	4602      	mov	r2, r0
 800a888:	460b      	mov	r3, r1
 800a88a:	4650      	mov	r0, sl
 800a88c:	4659      	mov	r1, fp
 800a88e:	f7f5 fd0d 	bl	80002ac <__adddf3>
 800a892:	2d0f      	cmp	r5, #15
 800a894:	4682      	mov	sl, r0
 800a896:	468b      	mov	fp, r1
 800a898:	ddd5      	ble.n	800a846 <_strtod_l+0x3ae>
 800a89a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a89c:	1b2c      	subs	r4, r5, r4
 800a89e:	441c      	add	r4, r3
 800a8a0:	2c00      	cmp	r4, #0
 800a8a2:	f340 8096 	ble.w	800a9d2 <_strtod_l+0x53a>
 800a8a6:	f014 030f 	ands.w	r3, r4, #15
 800a8aa:	d00a      	beq.n	800a8c2 <_strtod_l+0x42a>
 800a8ac:	495e      	ldr	r1, [pc, #376]	@ (800aa28 <_strtod_l+0x590>)
 800a8ae:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a8b2:	4652      	mov	r2, sl
 800a8b4:	465b      	mov	r3, fp
 800a8b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a8ba:	f7f5 fead 	bl	8000618 <__aeabi_dmul>
 800a8be:	4682      	mov	sl, r0
 800a8c0:	468b      	mov	fp, r1
 800a8c2:	f034 040f 	bics.w	r4, r4, #15
 800a8c6:	d073      	beq.n	800a9b0 <_strtod_l+0x518>
 800a8c8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800a8cc:	dd48      	ble.n	800a960 <_strtod_l+0x4c8>
 800a8ce:	2400      	movs	r4, #0
 800a8d0:	46a0      	mov	r8, r4
 800a8d2:	940a      	str	r4, [sp, #40]	@ 0x28
 800a8d4:	46a1      	mov	r9, r4
 800a8d6:	9a05      	ldr	r2, [sp, #20]
 800a8d8:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800aa30 <_strtod_l+0x598>
 800a8dc:	2322      	movs	r3, #34	@ 0x22
 800a8de:	6013      	str	r3, [r2, #0]
 800a8e0:	f04f 0a00 	mov.w	sl, #0
 800a8e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	f43f ae0f 	beq.w	800a50a <_strtod_l+0x72>
 800a8ec:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a8ee:	9805      	ldr	r0, [sp, #20]
 800a8f0:	f001 fad2 	bl	800be98 <_Bfree>
 800a8f4:	9805      	ldr	r0, [sp, #20]
 800a8f6:	4649      	mov	r1, r9
 800a8f8:	f001 face 	bl	800be98 <_Bfree>
 800a8fc:	9805      	ldr	r0, [sp, #20]
 800a8fe:	4641      	mov	r1, r8
 800a900:	f001 faca 	bl	800be98 <_Bfree>
 800a904:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a906:	9805      	ldr	r0, [sp, #20]
 800a908:	f001 fac6 	bl	800be98 <_Bfree>
 800a90c:	9805      	ldr	r0, [sp, #20]
 800a90e:	4621      	mov	r1, r4
 800a910:	f001 fac2 	bl	800be98 <_Bfree>
 800a914:	e5f9      	b.n	800a50a <_strtod_l+0x72>
 800a916:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a918:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800a91c:	4293      	cmp	r3, r2
 800a91e:	dbbc      	blt.n	800a89a <_strtod_l+0x402>
 800a920:	4c41      	ldr	r4, [pc, #260]	@ (800aa28 <_strtod_l+0x590>)
 800a922:	f1c5 050f 	rsb	r5, r5, #15
 800a926:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800a92a:	4652      	mov	r2, sl
 800a92c:	465b      	mov	r3, fp
 800a92e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a932:	f7f5 fe71 	bl	8000618 <__aeabi_dmul>
 800a936:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a938:	1b5d      	subs	r5, r3, r5
 800a93a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800a93e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a942:	e78f      	b.n	800a864 <_strtod_l+0x3cc>
 800a944:	3316      	adds	r3, #22
 800a946:	dba8      	blt.n	800a89a <_strtod_l+0x402>
 800a948:	4b37      	ldr	r3, [pc, #220]	@ (800aa28 <_strtod_l+0x590>)
 800a94a:	eba9 0808 	sub.w	r8, r9, r8
 800a94e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800a952:	e9d8 2300 	ldrd	r2, r3, [r8]
 800a956:	4650      	mov	r0, sl
 800a958:	4659      	mov	r1, fp
 800a95a:	f7f5 ff87 	bl	800086c <__aeabi_ddiv>
 800a95e:	e783      	b.n	800a868 <_strtod_l+0x3d0>
 800a960:	4b32      	ldr	r3, [pc, #200]	@ (800aa2c <_strtod_l+0x594>)
 800a962:	9308      	str	r3, [sp, #32]
 800a964:	2300      	movs	r3, #0
 800a966:	1124      	asrs	r4, r4, #4
 800a968:	4650      	mov	r0, sl
 800a96a:	4659      	mov	r1, fp
 800a96c:	461e      	mov	r6, r3
 800a96e:	2c01      	cmp	r4, #1
 800a970:	dc21      	bgt.n	800a9b6 <_strtod_l+0x51e>
 800a972:	b10b      	cbz	r3, 800a978 <_strtod_l+0x4e0>
 800a974:	4682      	mov	sl, r0
 800a976:	468b      	mov	fp, r1
 800a978:	492c      	ldr	r1, [pc, #176]	@ (800aa2c <_strtod_l+0x594>)
 800a97a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800a97e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800a982:	4652      	mov	r2, sl
 800a984:	465b      	mov	r3, fp
 800a986:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a98a:	f7f5 fe45 	bl	8000618 <__aeabi_dmul>
 800a98e:	4b28      	ldr	r3, [pc, #160]	@ (800aa30 <_strtod_l+0x598>)
 800a990:	460a      	mov	r2, r1
 800a992:	400b      	ands	r3, r1
 800a994:	4927      	ldr	r1, [pc, #156]	@ (800aa34 <_strtod_l+0x59c>)
 800a996:	428b      	cmp	r3, r1
 800a998:	4682      	mov	sl, r0
 800a99a:	d898      	bhi.n	800a8ce <_strtod_l+0x436>
 800a99c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800a9a0:	428b      	cmp	r3, r1
 800a9a2:	bf86      	itte	hi
 800a9a4:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800aa38 <_strtod_l+0x5a0>
 800a9a8:	f04f 3aff 	movhi.w	sl, #4294967295
 800a9ac:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800a9b0:	2300      	movs	r3, #0
 800a9b2:	9308      	str	r3, [sp, #32]
 800a9b4:	e07a      	b.n	800aaac <_strtod_l+0x614>
 800a9b6:	07e2      	lsls	r2, r4, #31
 800a9b8:	d505      	bpl.n	800a9c6 <_strtod_l+0x52e>
 800a9ba:	9b08      	ldr	r3, [sp, #32]
 800a9bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9c0:	f7f5 fe2a 	bl	8000618 <__aeabi_dmul>
 800a9c4:	2301      	movs	r3, #1
 800a9c6:	9a08      	ldr	r2, [sp, #32]
 800a9c8:	3208      	adds	r2, #8
 800a9ca:	3601      	adds	r6, #1
 800a9cc:	1064      	asrs	r4, r4, #1
 800a9ce:	9208      	str	r2, [sp, #32]
 800a9d0:	e7cd      	b.n	800a96e <_strtod_l+0x4d6>
 800a9d2:	d0ed      	beq.n	800a9b0 <_strtod_l+0x518>
 800a9d4:	4264      	negs	r4, r4
 800a9d6:	f014 020f 	ands.w	r2, r4, #15
 800a9da:	d00a      	beq.n	800a9f2 <_strtod_l+0x55a>
 800a9dc:	4b12      	ldr	r3, [pc, #72]	@ (800aa28 <_strtod_l+0x590>)
 800a9de:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a9e2:	4650      	mov	r0, sl
 800a9e4:	4659      	mov	r1, fp
 800a9e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9ea:	f7f5 ff3f 	bl	800086c <__aeabi_ddiv>
 800a9ee:	4682      	mov	sl, r0
 800a9f0:	468b      	mov	fp, r1
 800a9f2:	1124      	asrs	r4, r4, #4
 800a9f4:	d0dc      	beq.n	800a9b0 <_strtod_l+0x518>
 800a9f6:	2c1f      	cmp	r4, #31
 800a9f8:	dd20      	ble.n	800aa3c <_strtod_l+0x5a4>
 800a9fa:	2400      	movs	r4, #0
 800a9fc:	46a0      	mov	r8, r4
 800a9fe:	940a      	str	r4, [sp, #40]	@ 0x28
 800aa00:	46a1      	mov	r9, r4
 800aa02:	9a05      	ldr	r2, [sp, #20]
 800aa04:	2322      	movs	r3, #34	@ 0x22
 800aa06:	f04f 0a00 	mov.w	sl, #0
 800aa0a:	f04f 0b00 	mov.w	fp, #0
 800aa0e:	6013      	str	r3, [r2, #0]
 800aa10:	e768      	b.n	800a8e4 <_strtod_l+0x44c>
 800aa12:	bf00      	nop
 800aa14:	0800d9b7 	.word	0x0800d9b7
 800aa18:	0800d9bc 	.word	0x0800d9bc
 800aa1c:	0800d9ae 	.word	0x0800d9ae
 800aa20:	0800d9b1 	.word	0x0800d9b1
 800aa24:	0800dd66 	.word	0x0800dd66
 800aa28:	0800dc30 	.word	0x0800dc30
 800aa2c:	0800dc08 	.word	0x0800dc08
 800aa30:	7ff00000 	.word	0x7ff00000
 800aa34:	7ca00000 	.word	0x7ca00000
 800aa38:	7fefffff 	.word	0x7fefffff
 800aa3c:	f014 0310 	ands.w	r3, r4, #16
 800aa40:	bf18      	it	ne
 800aa42:	236a      	movne	r3, #106	@ 0x6a
 800aa44:	4ea9      	ldr	r6, [pc, #676]	@ (800acec <_strtod_l+0x854>)
 800aa46:	9308      	str	r3, [sp, #32]
 800aa48:	4650      	mov	r0, sl
 800aa4a:	4659      	mov	r1, fp
 800aa4c:	2300      	movs	r3, #0
 800aa4e:	07e2      	lsls	r2, r4, #31
 800aa50:	d504      	bpl.n	800aa5c <_strtod_l+0x5c4>
 800aa52:	e9d6 2300 	ldrd	r2, r3, [r6]
 800aa56:	f7f5 fddf 	bl	8000618 <__aeabi_dmul>
 800aa5a:	2301      	movs	r3, #1
 800aa5c:	1064      	asrs	r4, r4, #1
 800aa5e:	f106 0608 	add.w	r6, r6, #8
 800aa62:	d1f4      	bne.n	800aa4e <_strtod_l+0x5b6>
 800aa64:	b10b      	cbz	r3, 800aa6a <_strtod_l+0x5d2>
 800aa66:	4682      	mov	sl, r0
 800aa68:	468b      	mov	fp, r1
 800aa6a:	9b08      	ldr	r3, [sp, #32]
 800aa6c:	b1b3      	cbz	r3, 800aa9c <_strtod_l+0x604>
 800aa6e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800aa72:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	4659      	mov	r1, fp
 800aa7a:	dd0f      	ble.n	800aa9c <_strtod_l+0x604>
 800aa7c:	2b1f      	cmp	r3, #31
 800aa7e:	dd55      	ble.n	800ab2c <_strtod_l+0x694>
 800aa80:	2b34      	cmp	r3, #52	@ 0x34
 800aa82:	bfde      	ittt	le
 800aa84:	f04f 33ff 	movle.w	r3, #4294967295
 800aa88:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800aa8c:	4093      	lslle	r3, r2
 800aa8e:	f04f 0a00 	mov.w	sl, #0
 800aa92:	bfcc      	ite	gt
 800aa94:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800aa98:	ea03 0b01 	andle.w	fp, r3, r1
 800aa9c:	2200      	movs	r2, #0
 800aa9e:	2300      	movs	r3, #0
 800aaa0:	4650      	mov	r0, sl
 800aaa2:	4659      	mov	r1, fp
 800aaa4:	f7f6 f820 	bl	8000ae8 <__aeabi_dcmpeq>
 800aaa8:	2800      	cmp	r0, #0
 800aaaa:	d1a6      	bne.n	800a9fa <_strtod_l+0x562>
 800aaac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aaae:	9300      	str	r3, [sp, #0]
 800aab0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800aab2:	9805      	ldr	r0, [sp, #20]
 800aab4:	462b      	mov	r3, r5
 800aab6:	463a      	mov	r2, r7
 800aab8:	f001 fa56 	bl	800bf68 <__s2b>
 800aabc:	900a      	str	r0, [sp, #40]	@ 0x28
 800aabe:	2800      	cmp	r0, #0
 800aac0:	f43f af05 	beq.w	800a8ce <_strtod_l+0x436>
 800aac4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800aac6:	2a00      	cmp	r2, #0
 800aac8:	eba9 0308 	sub.w	r3, r9, r8
 800aacc:	bfa8      	it	ge
 800aace:	2300      	movge	r3, #0
 800aad0:	9312      	str	r3, [sp, #72]	@ 0x48
 800aad2:	2400      	movs	r4, #0
 800aad4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800aad8:	9316      	str	r3, [sp, #88]	@ 0x58
 800aada:	46a0      	mov	r8, r4
 800aadc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aade:	9805      	ldr	r0, [sp, #20]
 800aae0:	6859      	ldr	r1, [r3, #4]
 800aae2:	f001 f999 	bl	800be18 <_Balloc>
 800aae6:	4681      	mov	r9, r0
 800aae8:	2800      	cmp	r0, #0
 800aaea:	f43f aef4 	beq.w	800a8d6 <_strtod_l+0x43e>
 800aaee:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aaf0:	691a      	ldr	r2, [r3, #16]
 800aaf2:	3202      	adds	r2, #2
 800aaf4:	f103 010c 	add.w	r1, r3, #12
 800aaf8:	0092      	lsls	r2, r2, #2
 800aafa:	300c      	adds	r0, #12
 800aafc:	f000 fd31 	bl	800b562 <memcpy>
 800ab00:	ec4b ab10 	vmov	d0, sl, fp
 800ab04:	9805      	ldr	r0, [sp, #20]
 800ab06:	aa1c      	add	r2, sp, #112	@ 0x70
 800ab08:	a91b      	add	r1, sp, #108	@ 0x6c
 800ab0a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800ab0e:	f001 fd67 	bl	800c5e0 <__d2b>
 800ab12:	901a      	str	r0, [sp, #104]	@ 0x68
 800ab14:	2800      	cmp	r0, #0
 800ab16:	f43f aede 	beq.w	800a8d6 <_strtod_l+0x43e>
 800ab1a:	9805      	ldr	r0, [sp, #20]
 800ab1c:	2101      	movs	r1, #1
 800ab1e:	f001 fab9 	bl	800c094 <__i2b>
 800ab22:	4680      	mov	r8, r0
 800ab24:	b948      	cbnz	r0, 800ab3a <_strtod_l+0x6a2>
 800ab26:	f04f 0800 	mov.w	r8, #0
 800ab2a:	e6d4      	b.n	800a8d6 <_strtod_l+0x43e>
 800ab2c:	f04f 32ff 	mov.w	r2, #4294967295
 800ab30:	fa02 f303 	lsl.w	r3, r2, r3
 800ab34:	ea03 0a0a 	and.w	sl, r3, sl
 800ab38:	e7b0      	b.n	800aa9c <_strtod_l+0x604>
 800ab3a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800ab3c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800ab3e:	2d00      	cmp	r5, #0
 800ab40:	bfab      	itete	ge
 800ab42:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800ab44:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800ab46:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800ab48:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800ab4a:	bfac      	ite	ge
 800ab4c:	18ef      	addge	r7, r5, r3
 800ab4e:	1b5e      	sublt	r6, r3, r5
 800ab50:	9b08      	ldr	r3, [sp, #32]
 800ab52:	1aed      	subs	r5, r5, r3
 800ab54:	4415      	add	r5, r2
 800ab56:	4b66      	ldr	r3, [pc, #408]	@ (800acf0 <_strtod_l+0x858>)
 800ab58:	3d01      	subs	r5, #1
 800ab5a:	429d      	cmp	r5, r3
 800ab5c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800ab60:	da50      	bge.n	800ac04 <_strtod_l+0x76c>
 800ab62:	1b5b      	subs	r3, r3, r5
 800ab64:	2b1f      	cmp	r3, #31
 800ab66:	eba2 0203 	sub.w	r2, r2, r3
 800ab6a:	f04f 0101 	mov.w	r1, #1
 800ab6e:	dc3d      	bgt.n	800abec <_strtod_l+0x754>
 800ab70:	fa01 f303 	lsl.w	r3, r1, r3
 800ab74:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ab76:	2300      	movs	r3, #0
 800ab78:	9310      	str	r3, [sp, #64]	@ 0x40
 800ab7a:	18bd      	adds	r5, r7, r2
 800ab7c:	9b08      	ldr	r3, [sp, #32]
 800ab7e:	42af      	cmp	r7, r5
 800ab80:	4416      	add	r6, r2
 800ab82:	441e      	add	r6, r3
 800ab84:	463b      	mov	r3, r7
 800ab86:	bfa8      	it	ge
 800ab88:	462b      	movge	r3, r5
 800ab8a:	42b3      	cmp	r3, r6
 800ab8c:	bfa8      	it	ge
 800ab8e:	4633      	movge	r3, r6
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	bfc2      	ittt	gt
 800ab94:	1aed      	subgt	r5, r5, r3
 800ab96:	1af6      	subgt	r6, r6, r3
 800ab98:	1aff      	subgt	r7, r7, r3
 800ab9a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	dd16      	ble.n	800abce <_strtod_l+0x736>
 800aba0:	4641      	mov	r1, r8
 800aba2:	9805      	ldr	r0, [sp, #20]
 800aba4:	461a      	mov	r2, r3
 800aba6:	f001 fb35 	bl	800c214 <__pow5mult>
 800abaa:	4680      	mov	r8, r0
 800abac:	2800      	cmp	r0, #0
 800abae:	d0ba      	beq.n	800ab26 <_strtod_l+0x68e>
 800abb0:	4601      	mov	r1, r0
 800abb2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800abb4:	9805      	ldr	r0, [sp, #20]
 800abb6:	f001 fa83 	bl	800c0c0 <__multiply>
 800abba:	900e      	str	r0, [sp, #56]	@ 0x38
 800abbc:	2800      	cmp	r0, #0
 800abbe:	f43f ae8a 	beq.w	800a8d6 <_strtod_l+0x43e>
 800abc2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800abc4:	9805      	ldr	r0, [sp, #20]
 800abc6:	f001 f967 	bl	800be98 <_Bfree>
 800abca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800abcc:	931a      	str	r3, [sp, #104]	@ 0x68
 800abce:	2d00      	cmp	r5, #0
 800abd0:	dc1d      	bgt.n	800ac0e <_strtod_l+0x776>
 800abd2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	dd23      	ble.n	800ac20 <_strtod_l+0x788>
 800abd8:	4649      	mov	r1, r9
 800abda:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800abdc:	9805      	ldr	r0, [sp, #20]
 800abde:	f001 fb19 	bl	800c214 <__pow5mult>
 800abe2:	4681      	mov	r9, r0
 800abe4:	b9e0      	cbnz	r0, 800ac20 <_strtod_l+0x788>
 800abe6:	f04f 0900 	mov.w	r9, #0
 800abea:	e674      	b.n	800a8d6 <_strtod_l+0x43e>
 800abec:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800abf0:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800abf4:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800abf8:	35e2      	adds	r5, #226	@ 0xe2
 800abfa:	fa01 f305 	lsl.w	r3, r1, r5
 800abfe:	9310      	str	r3, [sp, #64]	@ 0x40
 800ac00:	9113      	str	r1, [sp, #76]	@ 0x4c
 800ac02:	e7ba      	b.n	800ab7a <_strtod_l+0x6e2>
 800ac04:	2300      	movs	r3, #0
 800ac06:	9310      	str	r3, [sp, #64]	@ 0x40
 800ac08:	2301      	movs	r3, #1
 800ac0a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ac0c:	e7b5      	b.n	800ab7a <_strtod_l+0x6e2>
 800ac0e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ac10:	9805      	ldr	r0, [sp, #20]
 800ac12:	462a      	mov	r2, r5
 800ac14:	f001 fb58 	bl	800c2c8 <__lshift>
 800ac18:	901a      	str	r0, [sp, #104]	@ 0x68
 800ac1a:	2800      	cmp	r0, #0
 800ac1c:	d1d9      	bne.n	800abd2 <_strtod_l+0x73a>
 800ac1e:	e65a      	b.n	800a8d6 <_strtod_l+0x43e>
 800ac20:	2e00      	cmp	r6, #0
 800ac22:	dd07      	ble.n	800ac34 <_strtod_l+0x79c>
 800ac24:	4649      	mov	r1, r9
 800ac26:	9805      	ldr	r0, [sp, #20]
 800ac28:	4632      	mov	r2, r6
 800ac2a:	f001 fb4d 	bl	800c2c8 <__lshift>
 800ac2e:	4681      	mov	r9, r0
 800ac30:	2800      	cmp	r0, #0
 800ac32:	d0d8      	beq.n	800abe6 <_strtod_l+0x74e>
 800ac34:	2f00      	cmp	r7, #0
 800ac36:	dd08      	ble.n	800ac4a <_strtod_l+0x7b2>
 800ac38:	4641      	mov	r1, r8
 800ac3a:	9805      	ldr	r0, [sp, #20]
 800ac3c:	463a      	mov	r2, r7
 800ac3e:	f001 fb43 	bl	800c2c8 <__lshift>
 800ac42:	4680      	mov	r8, r0
 800ac44:	2800      	cmp	r0, #0
 800ac46:	f43f ae46 	beq.w	800a8d6 <_strtod_l+0x43e>
 800ac4a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ac4c:	9805      	ldr	r0, [sp, #20]
 800ac4e:	464a      	mov	r2, r9
 800ac50:	f001 fbc2 	bl	800c3d8 <__mdiff>
 800ac54:	4604      	mov	r4, r0
 800ac56:	2800      	cmp	r0, #0
 800ac58:	f43f ae3d 	beq.w	800a8d6 <_strtod_l+0x43e>
 800ac5c:	68c3      	ldr	r3, [r0, #12]
 800ac5e:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ac60:	2300      	movs	r3, #0
 800ac62:	60c3      	str	r3, [r0, #12]
 800ac64:	4641      	mov	r1, r8
 800ac66:	f001 fb9b 	bl	800c3a0 <__mcmp>
 800ac6a:	2800      	cmp	r0, #0
 800ac6c:	da46      	bge.n	800acfc <_strtod_l+0x864>
 800ac6e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ac70:	ea53 030a 	orrs.w	r3, r3, sl
 800ac74:	d16c      	bne.n	800ad50 <_strtod_l+0x8b8>
 800ac76:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d168      	bne.n	800ad50 <_strtod_l+0x8b8>
 800ac7e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ac82:	0d1b      	lsrs	r3, r3, #20
 800ac84:	051b      	lsls	r3, r3, #20
 800ac86:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800ac8a:	d961      	bls.n	800ad50 <_strtod_l+0x8b8>
 800ac8c:	6963      	ldr	r3, [r4, #20]
 800ac8e:	b913      	cbnz	r3, 800ac96 <_strtod_l+0x7fe>
 800ac90:	6923      	ldr	r3, [r4, #16]
 800ac92:	2b01      	cmp	r3, #1
 800ac94:	dd5c      	ble.n	800ad50 <_strtod_l+0x8b8>
 800ac96:	4621      	mov	r1, r4
 800ac98:	2201      	movs	r2, #1
 800ac9a:	9805      	ldr	r0, [sp, #20]
 800ac9c:	f001 fb14 	bl	800c2c8 <__lshift>
 800aca0:	4641      	mov	r1, r8
 800aca2:	4604      	mov	r4, r0
 800aca4:	f001 fb7c 	bl	800c3a0 <__mcmp>
 800aca8:	2800      	cmp	r0, #0
 800acaa:	dd51      	ble.n	800ad50 <_strtod_l+0x8b8>
 800acac:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800acb0:	9a08      	ldr	r2, [sp, #32]
 800acb2:	0d1b      	lsrs	r3, r3, #20
 800acb4:	051b      	lsls	r3, r3, #20
 800acb6:	2a00      	cmp	r2, #0
 800acb8:	d06b      	beq.n	800ad92 <_strtod_l+0x8fa>
 800acba:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800acbe:	d868      	bhi.n	800ad92 <_strtod_l+0x8fa>
 800acc0:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800acc4:	f67f ae9d 	bls.w	800aa02 <_strtod_l+0x56a>
 800acc8:	4b0a      	ldr	r3, [pc, #40]	@ (800acf4 <_strtod_l+0x85c>)
 800acca:	4650      	mov	r0, sl
 800accc:	4659      	mov	r1, fp
 800acce:	2200      	movs	r2, #0
 800acd0:	f7f5 fca2 	bl	8000618 <__aeabi_dmul>
 800acd4:	4b08      	ldr	r3, [pc, #32]	@ (800acf8 <_strtod_l+0x860>)
 800acd6:	400b      	ands	r3, r1
 800acd8:	4682      	mov	sl, r0
 800acda:	468b      	mov	fp, r1
 800acdc:	2b00      	cmp	r3, #0
 800acde:	f47f ae05 	bne.w	800a8ec <_strtod_l+0x454>
 800ace2:	9a05      	ldr	r2, [sp, #20]
 800ace4:	2322      	movs	r3, #34	@ 0x22
 800ace6:	6013      	str	r3, [r2, #0]
 800ace8:	e600      	b.n	800a8ec <_strtod_l+0x454>
 800acea:	bf00      	nop
 800acec:	0800d9e8 	.word	0x0800d9e8
 800acf0:	fffffc02 	.word	0xfffffc02
 800acf4:	39500000 	.word	0x39500000
 800acf8:	7ff00000 	.word	0x7ff00000
 800acfc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800ad00:	d165      	bne.n	800adce <_strtod_l+0x936>
 800ad02:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800ad04:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ad08:	b35a      	cbz	r2, 800ad62 <_strtod_l+0x8ca>
 800ad0a:	4a9f      	ldr	r2, [pc, #636]	@ (800af88 <_strtod_l+0xaf0>)
 800ad0c:	4293      	cmp	r3, r2
 800ad0e:	d12b      	bne.n	800ad68 <_strtod_l+0x8d0>
 800ad10:	9b08      	ldr	r3, [sp, #32]
 800ad12:	4651      	mov	r1, sl
 800ad14:	b303      	cbz	r3, 800ad58 <_strtod_l+0x8c0>
 800ad16:	4b9d      	ldr	r3, [pc, #628]	@ (800af8c <_strtod_l+0xaf4>)
 800ad18:	465a      	mov	r2, fp
 800ad1a:	4013      	ands	r3, r2
 800ad1c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800ad20:	f04f 32ff 	mov.w	r2, #4294967295
 800ad24:	d81b      	bhi.n	800ad5e <_strtod_l+0x8c6>
 800ad26:	0d1b      	lsrs	r3, r3, #20
 800ad28:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800ad2c:	fa02 f303 	lsl.w	r3, r2, r3
 800ad30:	4299      	cmp	r1, r3
 800ad32:	d119      	bne.n	800ad68 <_strtod_l+0x8d0>
 800ad34:	4b96      	ldr	r3, [pc, #600]	@ (800af90 <_strtod_l+0xaf8>)
 800ad36:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ad38:	429a      	cmp	r2, r3
 800ad3a:	d102      	bne.n	800ad42 <_strtod_l+0x8aa>
 800ad3c:	3101      	adds	r1, #1
 800ad3e:	f43f adca 	beq.w	800a8d6 <_strtod_l+0x43e>
 800ad42:	4b92      	ldr	r3, [pc, #584]	@ (800af8c <_strtod_l+0xaf4>)
 800ad44:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ad46:	401a      	ands	r2, r3
 800ad48:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800ad4c:	f04f 0a00 	mov.w	sl, #0
 800ad50:	9b08      	ldr	r3, [sp, #32]
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d1b8      	bne.n	800acc8 <_strtod_l+0x830>
 800ad56:	e5c9      	b.n	800a8ec <_strtod_l+0x454>
 800ad58:	f04f 33ff 	mov.w	r3, #4294967295
 800ad5c:	e7e8      	b.n	800ad30 <_strtod_l+0x898>
 800ad5e:	4613      	mov	r3, r2
 800ad60:	e7e6      	b.n	800ad30 <_strtod_l+0x898>
 800ad62:	ea53 030a 	orrs.w	r3, r3, sl
 800ad66:	d0a1      	beq.n	800acac <_strtod_l+0x814>
 800ad68:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ad6a:	b1db      	cbz	r3, 800ada4 <_strtod_l+0x90c>
 800ad6c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ad6e:	4213      	tst	r3, r2
 800ad70:	d0ee      	beq.n	800ad50 <_strtod_l+0x8b8>
 800ad72:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ad74:	9a08      	ldr	r2, [sp, #32]
 800ad76:	4650      	mov	r0, sl
 800ad78:	4659      	mov	r1, fp
 800ad7a:	b1bb      	cbz	r3, 800adac <_strtod_l+0x914>
 800ad7c:	f7ff fb6e 	bl	800a45c <sulp>
 800ad80:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ad84:	ec53 2b10 	vmov	r2, r3, d0
 800ad88:	f7f5 fa90 	bl	80002ac <__adddf3>
 800ad8c:	4682      	mov	sl, r0
 800ad8e:	468b      	mov	fp, r1
 800ad90:	e7de      	b.n	800ad50 <_strtod_l+0x8b8>
 800ad92:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800ad96:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800ad9a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800ad9e:	f04f 3aff 	mov.w	sl, #4294967295
 800ada2:	e7d5      	b.n	800ad50 <_strtod_l+0x8b8>
 800ada4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ada6:	ea13 0f0a 	tst.w	r3, sl
 800adaa:	e7e1      	b.n	800ad70 <_strtod_l+0x8d8>
 800adac:	f7ff fb56 	bl	800a45c <sulp>
 800adb0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800adb4:	ec53 2b10 	vmov	r2, r3, d0
 800adb8:	f7f5 fa76 	bl	80002a8 <__aeabi_dsub>
 800adbc:	2200      	movs	r2, #0
 800adbe:	2300      	movs	r3, #0
 800adc0:	4682      	mov	sl, r0
 800adc2:	468b      	mov	fp, r1
 800adc4:	f7f5 fe90 	bl	8000ae8 <__aeabi_dcmpeq>
 800adc8:	2800      	cmp	r0, #0
 800adca:	d0c1      	beq.n	800ad50 <_strtod_l+0x8b8>
 800adcc:	e619      	b.n	800aa02 <_strtod_l+0x56a>
 800adce:	4641      	mov	r1, r8
 800add0:	4620      	mov	r0, r4
 800add2:	f001 fc5d 	bl	800c690 <__ratio>
 800add6:	ec57 6b10 	vmov	r6, r7, d0
 800adda:	2200      	movs	r2, #0
 800addc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800ade0:	4630      	mov	r0, r6
 800ade2:	4639      	mov	r1, r7
 800ade4:	f7f5 fe94 	bl	8000b10 <__aeabi_dcmple>
 800ade8:	2800      	cmp	r0, #0
 800adea:	d06f      	beq.n	800aecc <_strtod_l+0xa34>
 800adec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d17a      	bne.n	800aee8 <_strtod_l+0xa50>
 800adf2:	f1ba 0f00 	cmp.w	sl, #0
 800adf6:	d158      	bne.n	800aeaa <_strtod_l+0xa12>
 800adf8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800adfa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d15a      	bne.n	800aeb8 <_strtod_l+0xa20>
 800ae02:	4b64      	ldr	r3, [pc, #400]	@ (800af94 <_strtod_l+0xafc>)
 800ae04:	2200      	movs	r2, #0
 800ae06:	4630      	mov	r0, r6
 800ae08:	4639      	mov	r1, r7
 800ae0a:	f7f5 fe77 	bl	8000afc <__aeabi_dcmplt>
 800ae0e:	2800      	cmp	r0, #0
 800ae10:	d159      	bne.n	800aec6 <_strtod_l+0xa2e>
 800ae12:	4630      	mov	r0, r6
 800ae14:	4639      	mov	r1, r7
 800ae16:	4b60      	ldr	r3, [pc, #384]	@ (800af98 <_strtod_l+0xb00>)
 800ae18:	2200      	movs	r2, #0
 800ae1a:	f7f5 fbfd 	bl	8000618 <__aeabi_dmul>
 800ae1e:	4606      	mov	r6, r0
 800ae20:	460f      	mov	r7, r1
 800ae22:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800ae26:	9606      	str	r6, [sp, #24]
 800ae28:	9307      	str	r3, [sp, #28]
 800ae2a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ae2e:	4d57      	ldr	r5, [pc, #348]	@ (800af8c <_strtod_l+0xaf4>)
 800ae30:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800ae34:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ae36:	401d      	ands	r5, r3
 800ae38:	4b58      	ldr	r3, [pc, #352]	@ (800af9c <_strtod_l+0xb04>)
 800ae3a:	429d      	cmp	r5, r3
 800ae3c:	f040 80b2 	bne.w	800afa4 <_strtod_l+0xb0c>
 800ae40:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ae42:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800ae46:	ec4b ab10 	vmov	d0, sl, fp
 800ae4a:	f001 fb59 	bl	800c500 <__ulp>
 800ae4e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ae52:	ec51 0b10 	vmov	r0, r1, d0
 800ae56:	f7f5 fbdf 	bl	8000618 <__aeabi_dmul>
 800ae5a:	4652      	mov	r2, sl
 800ae5c:	465b      	mov	r3, fp
 800ae5e:	f7f5 fa25 	bl	80002ac <__adddf3>
 800ae62:	460b      	mov	r3, r1
 800ae64:	4949      	ldr	r1, [pc, #292]	@ (800af8c <_strtod_l+0xaf4>)
 800ae66:	4a4e      	ldr	r2, [pc, #312]	@ (800afa0 <_strtod_l+0xb08>)
 800ae68:	4019      	ands	r1, r3
 800ae6a:	4291      	cmp	r1, r2
 800ae6c:	4682      	mov	sl, r0
 800ae6e:	d942      	bls.n	800aef6 <_strtod_l+0xa5e>
 800ae70:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ae72:	4b47      	ldr	r3, [pc, #284]	@ (800af90 <_strtod_l+0xaf8>)
 800ae74:	429a      	cmp	r2, r3
 800ae76:	d103      	bne.n	800ae80 <_strtod_l+0x9e8>
 800ae78:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ae7a:	3301      	adds	r3, #1
 800ae7c:	f43f ad2b 	beq.w	800a8d6 <_strtod_l+0x43e>
 800ae80:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800af90 <_strtod_l+0xaf8>
 800ae84:	f04f 3aff 	mov.w	sl, #4294967295
 800ae88:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ae8a:	9805      	ldr	r0, [sp, #20]
 800ae8c:	f001 f804 	bl	800be98 <_Bfree>
 800ae90:	9805      	ldr	r0, [sp, #20]
 800ae92:	4649      	mov	r1, r9
 800ae94:	f001 f800 	bl	800be98 <_Bfree>
 800ae98:	9805      	ldr	r0, [sp, #20]
 800ae9a:	4641      	mov	r1, r8
 800ae9c:	f000 fffc 	bl	800be98 <_Bfree>
 800aea0:	9805      	ldr	r0, [sp, #20]
 800aea2:	4621      	mov	r1, r4
 800aea4:	f000 fff8 	bl	800be98 <_Bfree>
 800aea8:	e618      	b.n	800aadc <_strtod_l+0x644>
 800aeaa:	f1ba 0f01 	cmp.w	sl, #1
 800aeae:	d103      	bne.n	800aeb8 <_strtod_l+0xa20>
 800aeb0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	f43f ada5 	beq.w	800aa02 <_strtod_l+0x56a>
 800aeb8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800af68 <_strtod_l+0xad0>
 800aebc:	4f35      	ldr	r7, [pc, #212]	@ (800af94 <_strtod_l+0xafc>)
 800aebe:	ed8d 7b06 	vstr	d7, [sp, #24]
 800aec2:	2600      	movs	r6, #0
 800aec4:	e7b1      	b.n	800ae2a <_strtod_l+0x992>
 800aec6:	4f34      	ldr	r7, [pc, #208]	@ (800af98 <_strtod_l+0xb00>)
 800aec8:	2600      	movs	r6, #0
 800aeca:	e7aa      	b.n	800ae22 <_strtod_l+0x98a>
 800aecc:	4b32      	ldr	r3, [pc, #200]	@ (800af98 <_strtod_l+0xb00>)
 800aece:	4630      	mov	r0, r6
 800aed0:	4639      	mov	r1, r7
 800aed2:	2200      	movs	r2, #0
 800aed4:	f7f5 fba0 	bl	8000618 <__aeabi_dmul>
 800aed8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aeda:	4606      	mov	r6, r0
 800aedc:	460f      	mov	r7, r1
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d09f      	beq.n	800ae22 <_strtod_l+0x98a>
 800aee2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800aee6:	e7a0      	b.n	800ae2a <_strtod_l+0x992>
 800aee8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800af70 <_strtod_l+0xad8>
 800aeec:	ed8d 7b06 	vstr	d7, [sp, #24]
 800aef0:	ec57 6b17 	vmov	r6, r7, d7
 800aef4:	e799      	b.n	800ae2a <_strtod_l+0x992>
 800aef6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800aefa:	9b08      	ldr	r3, [sp, #32]
 800aefc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800af00:	2b00      	cmp	r3, #0
 800af02:	d1c1      	bne.n	800ae88 <_strtod_l+0x9f0>
 800af04:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800af08:	0d1b      	lsrs	r3, r3, #20
 800af0a:	051b      	lsls	r3, r3, #20
 800af0c:	429d      	cmp	r5, r3
 800af0e:	d1bb      	bne.n	800ae88 <_strtod_l+0x9f0>
 800af10:	4630      	mov	r0, r6
 800af12:	4639      	mov	r1, r7
 800af14:	f7f5 fee0 	bl	8000cd8 <__aeabi_d2lz>
 800af18:	f7f5 fb50 	bl	80005bc <__aeabi_l2d>
 800af1c:	4602      	mov	r2, r0
 800af1e:	460b      	mov	r3, r1
 800af20:	4630      	mov	r0, r6
 800af22:	4639      	mov	r1, r7
 800af24:	f7f5 f9c0 	bl	80002a8 <__aeabi_dsub>
 800af28:	460b      	mov	r3, r1
 800af2a:	4602      	mov	r2, r0
 800af2c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800af30:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800af34:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800af36:	ea46 060a 	orr.w	r6, r6, sl
 800af3a:	431e      	orrs	r6, r3
 800af3c:	d06f      	beq.n	800b01e <_strtod_l+0xb86>
 800af3e:	a30e      	add	r3, pc, #56	@ (adr r3, 800af78 <_strtod_l+0xae0>)
 800af40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af44:	f7f5 fdda 	bl	8000afc <__aeabi_dcmplt>
 800af48:	2800      	cmp	r0, #0
 800af4a:	f47f accf 	bne.w	800a8ec <_strtod_l+0x454>
 800af4e:	a30c      	add	r3, pc, #48	@ (adr r3, 800af80 <_strtod_l+0xae8>)
 800af50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af54:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800af58:	f7f5 fdee 	bl	8000b38 <__aeabi_dcmpgt>
 800af5c:	2800      	cmp	r0, #0
 800af5e:	d093      	beq.n	800ae88 <_strtod_l+0x9f0>
 800af60:	e4c4      	b.n	800a8ec <_strtod_l+0x454>
 800af62:	bf00      	nop
 800af64:	f3af 8000 	nop.w
 800af68:	00000000 	.word	0x00000000
 800af6c:	bff00000 	.word	0xbff00000
 800af70:	00000000 	.word	0x00000000
 800af74:	3ff00000 	.word	0x3ff00000
 800af78:	94a03595 	.word	0x94a03595
 800af7c:	3fdfffff 	.word	0x3fdfffff
 800af80:	35afe535 	.word	0x35afe535
 800af84:	3fe00000 	.word	0x3fe00000
 800af88:	000fffff 	.word	0x000fffff
 800af8c:	7ff00000 	.word	0x7ff00000
 800af90:	7fefffff 	.word	0x7fefffff
 800af94:	3ff00000 	.word	0x3ff00000
 800af98:	3fe00000 	.word	0x3fe00000
 800af9c:	7fe00000 	.word	0x7fe00000
 800afa0:	7c9fffff 	.word	0x7c9fffff
 800afa4:	9b08      	ldr	r3, [sp, #32]
 800afa6:	b323      	cbz	r3, 800aff2 <_strtod_l+0xb5a>
 800afa8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800afac:	d821      	bhi.n	800aff2 <_strtod_l+0xb5a>
 800afae:	a328      	add	r3, pc, #160	@ (adr r3, 800b050 <_strtod_l+0xbb8>)
 800afb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afb4:	4630      	mov	r0, r6
 800afb6:	4639      	mov	r1, r7
 800afb8:	f7f5 fdaa 	bl	8000b10 <__aeabi_dcmple>
 800afbc:	b1a0      	cbz	r0, 800afe8 <_strtod_l+0xb50>
 800afbe:	4639      	mov	r1, r7
 800afc0:	4630      	mov	r0, r6
 800afc2:	f7f5 fe01 	bl	8000bc8 <__aeabi_d2uiz>
 800afc6:	2801      	cmp	r0, #1
 800afc8:	bf38      	it	cc
 800afca:	2001      	movcc	r0, #1
 800afcc:	f7f5 faaa 	bl	8000524 <__aeabi_ui2d>
 800afd0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800afd2:	4606      	mov	r6, r0
 800afd4:	460f      	mov	r7, r1
 800afd6:	b9fb      	cbnz	r3, 800b018 <_strtod_l+0xb80>
 800afd8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800afdc:	9014      	str	r0, [sp, #80]	@ 0x50
 800afde:	9315      	str	r3, [sp, #84]	@ 0x54
 800afe0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800afe4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800afe8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800afea:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800afee:	1b5b      	subs	r3, r3, r5
 800aff0:	9311      	str	r3, [sp, #68]	@ 0x44
 800aff2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800aff6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800affa:	f001 fa81 	bl	800c500 <__ulp>
 800affe:	4650      	mov	r0, sl
 800b000:	ec53 2b10 	vmov	r2, r3, d0
 800b004:	4659      	mov	r1, fp
 800b006:	f7f5 fb07 	bl	8000618 <__aeabi_dmul>
 800b00a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800b00e:	f7f5 f94d 	bl	80002ac <__adddf3>
 800b012:	4682      	mov	sl, r0
 800b014:	468b      	mov	fp, r1
 800b016:	e770      	b.n	800aefa <_strtod_l+0xa62>
 800b018:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800b01c:	e7e0      	b.n	800afe0 <_strtod_l+0xb48>
 800b01e:	a30e      	add	r3, pc, #56	@ (adr r3, 800b058 <_strtod_l+0xbc0>)
 800b020:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b024:	f7f5 fd6a 	bl	8000afc <__aeabi_dcmplt>
 800b028:	e798      	b.n	800af5c <_strtod_l+0xac4>
 800b02a:	2300      	movs	r3, #0
 800b02c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b02e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800b030:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b032:	6013      	str	r3, [r2, #0]
 800b034:	f7ff ba6d 	b.w	800a512 <_strtod_l+0x7a>
 800b038:	2a65      	cmp	r2, #101	@ 0x65
 800b03a:	f43f ab66 	beq.w	800a70a <_strtod_l+0x272>
 800b03e:	2a45      	cmp	r2, #69	@ 0x45
 800b040:	f43f ab63 	beq.w	800a70a <_strtod_l+0x272>
 800b044:	2301      	movs	r3, #1
 800b046:	f7ff bb9e 	b.w	800a786 <_strtod_l+0x2ee>
 800b04a:	bf00      	nop
 800b04c:	f3af 8000 	nop.w
 800b050:	ffc00000 	.word	0xffc00000
 800b054:	41dfffff 	.word	0x41dfffff
 800b058:	94a03595 	.word	0x94a03595
 800b05c:	3fcfffff 	.word	0x3fcfffff

0800b060 <strtod>:
 800b060:	460a      	mov	r2, r1
 800b062:	4601      	mov	r1, r0
 800b064:	4802      	ldr	r0, [pc, #8]	@ (800b070 <strtod+0x10>)
 800b066:	4b03      	ldr	r3, [pc, #12]	@ (800b074 <strtod+0x14>)
 800b068:	6800      	ldr	r0, [r0, #0]
 800b06a:	f7ff ba15 	b.w	800a498 <_strtod_l>
 800b06e:	bf00      	nop
 800b070:	200001a8 	.word	0x200001a8
 800b074:	2000003c 	.word	0x2000003c

0800b078 <_strtol_l.constprop.0>:
 800b078:	2b24      	cmp	r3, #36	@ 0x24
 800b07a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b07e:	4686      	mov	lr, r0
 800b080:	4690      	mov	r8, r2
 800b082:	d801      	bhi.n	800b088 <_strtol_l.constprop.0+0x10>
 800b084:	2b01      	cmp	r3, #1
 800b086:	d106      	bne.n	800b096 <_strtol_l.constprop.0+0x1e>
 800b088:	f000 fa3e 	bl	800b508 <__errno>
 800b08c:	2316      	movs	r3, #22
 800b08e:	6003      	str	r3, [r0, #0]
 800b090:	2000      	movs	r0, #0
 800b092:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b096:	4834      	ldr	r0, [pc, #208]	@ (800b168 <_strtol_l.constprop.0+0xf0>)
 800b098:	460d      	mov	r5, r1
 800b09a:	462a      	mov	r2, r5
 800b09c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b0a0:	5d06      	ldrb	r6, [r0, r4]
 800b0a2:	f016 0608 	ands.w	r6, r6, #8
 800b0a6:	d1f8      	bne.n	800b09a <_strtol_l.constprop.0+0x22>
 800b0a8:	2c2d      	cmp	r4, #45	@ 0x2d
 800b0aa:	d12d      	bne.n	800b108 <_strtol_l.constprop.0+0x90>
 800b0ac:	782c      	ldrb	r4, [r5, #0]
 800b0ae:	2601      	movs	r6, #1
 800b0b0:	1c95      	adds	r5, r2, #2
 800b0b2:	f033 0210 	bics.w	r2, r3, #16
 800b0b6:	d109      	bne.n	800b0cc <_strtol_l.constprop.0+0x54>
 800b0b8:	2c30      	cmp	r4, #48	@ 0x30
 800b0ba:	d12a      	bne.n	800b112 <_strtol_l.constprop.0+0x9a>
 800b0bc:	782a      	ldrb	r2, [r5, #0]
 800b0be:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b0c2:	2a58      	cmp	r2, #88	@ 0x58
 800b0c4:	d125      	bne.n	800b112 <_strtol_l.constprop.0+0x9a>
 800b0c6:	786c      	ldrb	r4, [r5, #1]
 800b0c8:	2310      	movs	r3, #16
 800b0ca:	3502      	adds	r5, #2
 800b0cc:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800b0d0:	f10c 3cff 	add.w	ip, ip, #4294967295
 800b0d4:	2200      	movs	r2, #0
 800b0d6:	fbbc f9f3 	udiv	r9, ip, r3
 800b0da:	4610      	mov	r0, r2
 800b0dc:	fb03 ca19 	mls	sl, r3, r9, ip
 800b0e0:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800b0e4:	2f09      	cmp	r7, #9
 800b0e6:	d81b      	bhi.n	800b120 <_strtol_l.constprop.0+0xa8>
 800b0e8:	463c      	mov	r4, r7
 800b0ea:	42a3      	cmp	r3, r4
 800b0ec:	dd27      	ble.n	800b13e <_strtol_l.constprop.0+0xc6>
 800b0ee:	1c57      	adds	r7, r2, #1
 800b0f0:	d007      	beq.n	800b102 <_strtol_l.constprop.0+0x8a>
 800b0f2:	4581      	cmp	r9, r0
 800b0f4:	d320      	bcc.n	800b138 <_strtol_l.constprop.0+0xc0>
 800b0f6:	d101      	bne.n	800b0fc <_strtol_l.constprop.0+0x84>
 800b0f8:	45a2      	cmp	sl, r4
 800b0fa:	db1d      	blt.n	800b138 <_strtol_l.constprop.0+0xc0>
 800b0fc:	fb00 4003 	mla	r0, r0, r3, r4
 800b100:	2201      	movs	r2, #1
 800b102:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b106:	e7eb      	b.n	800b0e0 <_strtol_l.constprop.0+0x68>
 800b108:	2c2b      	cmp	r4, #43	@ 0x2b
 800b10a:	bf04      	itt	eq
 800b10c:	782c      	ldrbeq	r4, [r5, #0]
 800b10e:	1c95      	addeq	r5, r2, #2
 800b110:	e7cf      	b.n	800b0b2 <_strtol_l.constprop.0+0x3a>
 800b112:	2b00      	cmp	r3, #0
 800b114:	d1da      	bne.n	800b0cc <_strtol_l.constprop.0+0x54>
 800b116:	2c30      	cmp	r4, #48	@ 0x30
 800b118:	bf0c      	ite	eq
 800b11a:	2308      	moveq	r3, #8
 800b11c:	230a      	movne	r3, #10
 800b11e:	e7d5      	b.n	800b0cc <_strtol_l.constprop.0+0x54>
 800b120:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800b124:	2f19      	cmp	r7, #25
 800b126:	d801      	bhi.n	800b12c <_strtol_l.constprop.0+0xb4>
 800b128:	3c37      	subs	r4, #55	@ 0x37
 800b12a:	e7de      	b.n	800b0ea <_strtol_l.constprop.0+0x72>
 800b12c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800b130:	2f19      	cmp	r7, #25
 800b132:	d804      	bhi.n	800b13e <_strtol_l.constprop.0+0xc6>
 800b134:	3c57      	subs	r4, #87	@ 0x57
 800b136:	e7d8      	b.n	800b0ea <_strtol_l.constprop.0+0x72>
 800b138:	f04f 32ff 	mov.w	r2, #4294967295
 800b13c:	e7e1      	b.n	800b102 <_strtol_l.constprop.0+0x8a>
 800b13e:	1c53      	adds	r3, r2, #1
 800b140:	d108      	bne.n	800b154 <_strtol_l.constprop.0+0xdc>
 800b142:	2322      	movs	r3, #34	@ 0x22
 800b144:	f8ce 3000 	str.w	r3, [lr]
 800b148:	4660      	mov	r0, ip
 800b14a:	f1b8 0f00 	cmp.w	r8, #0
 800b14e:	d0a0      	beq.n	800b092 <_strtol_l.constprop.0+0x1a>
 800b150:	1e69      	subs	r1, r5, #1
 800b152:	e006      	b.n	800b162 <_strtol_l.constprop.0+0xea>
 800b154:	b106      	cbz	r6, 800b158 <_strtol_l.constprop.0+0xe0>
 800b156:	4240      	negs	r0, r0
 800b158:	f1b8 0f00 	cmp.w	r8, #0
 800b15c:	d099      	beq.n	800b092 <_strtol_l.constprop.0+0x1a>
 800b15e:	2a00      	cmp	r2, #0
 800b160:	d1f6      	bne.n	800b150 <_strtol_l.constprop.0+0xd8>
 800b162:	f8c8 1000 	str.w	r1, [r8]
 800b166:	e794      	b.n	800b092 <_strtol_l.constprop.0+0x1a>
 800b168:	0800da11 	.word	0x0800da11

0800b16c <strtol>:
 800b16c:	4613      	mov	r3, r2
 800b16e:	460a      	mov	r2, r1
 800b170:	4601      	mov	r1, r0
 800b172:	4802      	ldr	r0, [pc, #8]	@ (800b17c <strtol+0x10>)
 800b174:	6800      	ldr	r0, [r0, #0]
 800b176:	f7ff bf7f 	b.w	800b078 <_strtol_l.constprop.0>
 800b17a:	bf00      	nop
 800b17c:	200001a8 	.word	0x200001a8

0800b180 <std>:
 800b180:	2300      	movs	r3, #0
 800b182:	b510      	push	{r4, lr}
 800b184:	4604      	mov	r4, r0
 800b186:	e9c0 3300 	strd	r3, r3, [r0]
 800b18a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b18e:	6083      	str	r3, [r0, #8]
 800b190:	8181      	strh	r1, [r0, #12]
 800b192:	6643      	str	r3, [r0, #100]	@ 0x64
 800b194:	81c2      	strh	r2, [r0, #14]
 800b196:	6183      	str	r3, [r0, #24]
 800b198:	4619      	mov	r1, r3
 800b19a:	2208      	movs	r2, #8
 800b19c:	305c      	adds	r0, #92	@ 0x5c
 800b19e:	f000 f93f 	bl	800b420 <memset>
 800b1a2:	4b0d      	ldr	r3, [pc, #52]	@ (800b1d8 <std+0x58>)
 800b1a4:	6263      	str	r3, [r4, #36]	@ 0x24
 800b1a6:	4b0d      	ldr	r3, [pc, #52]	@ (800b1dc <std+0x5c>)
 800b1a8:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b1aa:	4b0d      	ldr	r3, [pc, #52]	@ (800b1e0 <std+0x60>)
 800b1ac:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b1ae:	4b0d      	ldr	r3, [pc, #52]	@ (800b1e4 <std+0x64>)
 800b1b0:	6323      	str	r3, [r4, #48]	@ 0x30
 800b1b2:	4b0d      	ldr	r3, [pc, #52]	@ (800b1e8 <std+0x68>)
 800b1b4:	6224      	str	r4, [r4, #32]
 800b1b6:	429c      	cmp	r4, r3
 800b1b8:	d006      	beq.n	800b1c8 <std+0x48>
 800b1ba:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b1be:	4294      	cmp	r4, r2
 800b1c0:	d002      	beq.n	800b1c8 <std+0x48>
 800b1c2:	33d0      	adds	r3, #208	@ 0xd0
 800b1c4:	429c      	cmp	r4, r3
 800b1c6:	d105      	bne.n	800b1d4 <std+0x54>
 800b1c8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b1cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b1d0:	f000 b9c4 	b.w	800b55c <__retarget_lock_init_recursive>
 800b1d4:	bd10      	pop	{r4, pc}
 800b1d6:	bf00      	nop
 800b1d8:	0800b329 	.word	0x0800b329
 800b1dc:	0800b34b 	.word	0x0800b34b
 800b1e0:	0800b383 	.word	0x0800b383
 800b1e4:	0800b3a7 	.word	0x0800b3a7
 800b1e8:	2000064c 	.word	0x2000064c

0800b1ec <stdio_exit_handler>:
 800b1ec:	4a02      	ldr	r2, [pc, #8]	@ (800b1f8 <stdio_exit_handler+0xc>)
 800b1ee:	4903      	ldr	r1, [pc, #12]	@ (800b1fc <stdio_exit_handler+0x10>)
 800b1f0:	4803      	ldr	r0, [pc, #12]	@ (800b200 <stdio_exit_handler+0x14>)
 800b1f2:	f000 b869 	b.w	800b2c8 <_fwalk_sglue>
 800b1f6:	bf00      	nop
 800b1f8:	20000030 	.word	0x20000030
 800b1fc:	0800d0ed 	.word	0x0800d0ed
 800b200:	200001ac 	.word	0x200001ac

0800b204 <cleanup_stdio>:
 800b204:	6841      	ldr	r1, [r0, #4]
 800b206:	4b0c      	ldr	r3, [pc, #48]	@ (800b238 <cleanup_stdio+0x34>)
 800b208:	4299      	cmp	r1, r3
 800b20a:	b510      	push	{r4, lr}
 800b20c:	4604      	mov	r4, r0
 800b20e:	d001      	beq.n	800b214 <cleanup_stdio+0x10>
 800b210:	f001 ff6c 	bl	800d0ec <_fflush_r>
 800b214:	68a1      	ldr	r1, [r4, #8]
 800b216:	4b09      	ldr	r3, [pc, #36]	@ (800b23c <cleanup_stdio+0x38>)
 800b218:	4299      	cmp	r1, r3
 800b21a:	d002      	beq.n	800b222 <cleanup_stdio+0x1e>
 800b21c:	4620      	mov	r0, r4
 800b21e:	f001 ff65 	bl	800d0ec <_fflush_r>
 800b222:	68e1      	ldr	r1, [r4, #12]
 800b224:	4b06      	ldr	r3, [pc, #24]	@ (800b240 <cleanup_stdio+0x3c>)
 800b226:	4299      	cmp	r1, r3
 800b228:	d004      	beq.n	800b234 <cleanup_stdio+0x30>
 800b22a:	4620      	mov	r0, r4
 800b22c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b230:	f001 bf5c 	b.w	800d0ec <_fflush_r>
 800b234:	bd10      	pop	{r4, pc}
 800b236:	bf00      	nop
 800b238:	2000064c 	.word	0x2000064c
 800b23c:	200006b4 	.word	0x200006b4
 800b240:	2000071c 	.word	0x2000071c

0800b244 <global_stdio_init.part.0>:
 800b244:	b510      	push	{r4, lr}
 800b246:	4b0b      	ldr	r3, [pc, #44]	@ (800b274 <global_stdio_init.part.0+0x30>)
 800b248:	4c0b      	ldr	r4, [pc, #44]	@ (800b278 <global_stdio_init.part.0+0x34>)
 800b24a:	4a0c      	ldr	r2, [pc, #48]	@ (800b27c <global_stdio_init.part.0+0x38>)
 800b24c:	601a      	str	r2, [r3, #0]
 800b24e:	4620      	mov	r0, r4
 800b250:	2200      	movs	r2, #0
 800b252:	2104      	movs	r1, #4
 800b254:	f7ff ff94 	bl	800b180 <std>
 800b258:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b25c:	2201      	movs	r2, #1
 800b25e:	2109      	movs	r1, #9
 800b260:	f7ff ff8e 	bl	800b180 <std>
 800b264:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b268:	2202      	movs	r2, #2
 800b26a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b26e:	2112      	movs	r1, #18
 800b270:	f7ff bf86 	b.w	800b180 <std>
 800b274:	20000784 	.word	0x20000784
 800b278:	2000064c 	.word	0x2000064c
 800b27c:	0800b1ed 	.word	0x0800b1ed

0800b280 <__sfp_lock_acquire>:
 800b280:	4801      	ldr	r0, [pc, #4]	@ (800b288 <__sfp_lock_acquire+0x8>)
 800b282:	f000 b96c 	b.w	800b55e <__retarget_lock_acquire_recursive>
 800b286:	bf00      	nop
 800b288:	2000078d 	.word	0x2000078d

0800b28c <__sfp_lock_release>:
 800b28c:	4801      	ldr	r0, [pc, #4]	@ (800b294 <__sfp_lock_release+0x8>)
 800b28e:	f000 b967 	b.w	800b560 <__retarget_lock_release_recursive>
 800b292:	bf00      	nop
 800b294:	2000078d 	.word	0x2000078d

0800b298 <__sinit>:
 800b298:	b510      	push	{r4, lr}
 800b29a:	4604      	mov	r4, r0
 800b29c:	f7ff fff0 	bl	800b280 <__sfp_lock_acquire>
 800b2a0:	6a23      	ldr	r3, [r4, #32]
 800b2a2:	b11b      	cbz	r3, 800b2ac <__sinit+0x14>
 800b2a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b2a8:	f7ff bff0 	b.w	800b28c <__sfp_lock_release>
 800b2ac:	4b04      	ldr	r3, [pc, #16]	@ (800b2c0 <__sinit+0x28>)
 800b2ae:	6223      	str	r3, [r4, #32]
 800b2b0:	4b04      	ldr	r3, [pc, #16]	@ (800b2c4 <__sinit+0x2c>)
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d1f5      	bne.n	800b2a4 <__sinit+0xc>
 800b2b8:	f7ff ffc4 	bl	800b244 <global_stdio_init.part.0>
 800b2bc:	e7f2      	b.n	800b2a4 <__sinit+0xc>
 800b2be:	bf00      	nop
 800b2c0:	0800b205 	.word	0x0800b205
 800b2c4:	20000784 	.word	0x20000784

0800b2c8 <_fwalk_sglue>:
 800b2c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b2cc:	4607      	mov	r7, r0
 800b2ce:	4688      	mov	r8, r1
 800b2d0:	4614      	mov	r4, r2
 800b2d2:	2600      	movs	r6, #0
 800b2d4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b2d8:	f1b9 0901 	subs.w	r9, r9, #1
 800b2dc:	d505      	bpl.n	800b2ea <_fwalk_sglue+0x22>
 800b2de:	6824      	ldr	r4, [r4, #0]
 800b2e0:	2c00      	cmp	r4, #0
 800b2e2:	d1f7      	bne.n	800b2d4 <_fwalk_sglue+0xc>
 800b2e4:	4630      	mov	r0, r6
 800b2e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b2ea:	89ab      	ldrh	r3, [r5, #12]
 800b2ec:	2b01      	cmp	r3, #1
 800b2ee:	d907      	bls.n	800b300 <_fwalk_sglue+0x38>
 800b2f0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b2f4:	3301      	adds	r3, #1
 800b2f6:	d003      	beq.n	800b300 <_fwalk_sglue+0x38>
 800b2f8:	4629      	mov	r1, r5
 800b2fa:	4638      	mov	r0, r7
 800b2fc:	47c0      	blx	r8
 800b2fe:	4306      	orrs	r6, r0
 800b300:	3568      	adds	r5, #104	@ 0x68
 800b302:	e7e9      	b.n	800b2d8 <_fwalk_sglue+0x10>

0800b304 <iprintf>:
 800b304:	b40f      	push	{r0, r1, r2, r3}
 800b306:	b507      	push	{r0, r1, r2, lr}
 800b308:	4906      	ldr	r1, [pc, #24]	@ (800b324 <iprintf+0x20>)
 800b30a:	ab04      	add	r3, sp, #16
 800b30c:	6808      	ldr	r0, [r1, #0]
 800b30e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b312:	6881      	ldr	r1, [r0, #8]
 800b314:	9301      	str	r3, [sp, #4]
 800b316:	f001 fbbf 	bl	800ca98 <_vfiprintf_r>
 800b31a:	b003      	add	sp, #12
 800b31c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b320:	b004      	add	sp, #16
 800b322:	4770      	bx	lr
 800b324:	200001a8 	.word	0x200001a8

0800b328 <__sread>:
 800b328:	b510      	push	{r4, lr}
 800b32a:	460c      	mov	r4, r1
 800b32c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b330:	f000 f8c6 	bl	800b4c0 <_read_r>
 800b334:	2800      	cmp	r0, #0
 800b336:	bfab      	itete	ge
 800b338:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b33a:	89a3      	ldrhlt	r3, [r4, #12]
 800b33c:	181b      	addge	r3, r3, r0
 800b33e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b342:	bfac      	ite	ge
 800b344:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b346:	81a3      	strhlt	r3, [r4, #12]
 800b348:	bd10      	pop	{r4, pc}

0800b34a <__swrite>:
 800b34a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b34e:	461f      	mov	r7, r3
 800b350:	898b      	ldrh	r3, [r1, #12]
 800b352:	05db      	lsls	r3, r3, #23
 800b354:	4605      	mov	r5, r0
 800b356:	460c      	mov	r4, r1
 800b358:	4616      	mov	r6, r2
 800b35a:	d505      	bpl.n	800b368 <__swrite+0x1e>
 800b35c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b360:	2302      	movs	r3, #2
 800b362:	2200      	movs	r2, #0
 800b364:	f000 f89a 	bl	800b49c <_lseek_r>
 800b368:	89a3      	ldrh	r3, [r4, #12]
 800b36a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b36e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b372:	81a3      	strh	r3, [r4, #12]
 800b374:	4632      	mov	r2, r6
 800b376:	463b      	mov	r3, r7
 800b378:	4628      	mov	r0, r5
 800b37a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b37e:	f000 b8b1 	b.w	800b4e4 <_write_r>

0800b382 <__sseek>:
 800b382:	b510      	push	{r4, lr}
 800b384:	460c      	mov	r4, r1
 800b386:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b38a:	f000 f887 	bl	800b49c <_lseek_r>
 800b38e:	1c43      	adds	r3, r0, #1
 800b390:	89a3      	ldrh	r3, [r4, #12]
 800b392:	bf15      	itete	ne
 800b394:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b396:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b39a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b39e:	81a3      	strheq	r3, [r4, #12]
 800b3a0:	bf18      	it	ne
 800b3a2:	81a3      	strhne	r3, [r4, #12]
 800b3a4:	bd10      	pop	{r4, pc}

0800b3a6 <__sclose>:
 800b3a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b3aa:	f000 b867 	b.w	800b47c <_close_r>

0800b3ae <_vsniprintf_r>:
 800b3ae:	b530      	push	{r4, r5, lr}
 800b3b0:	4614      	mov	r4, r2
 800b3b2:	2c00      	cmp	r4, #0
 800b3b4:	b09b      	sub	sp, #108	@ 0x6c
 800b3b6:	4605      	mov	r5, r0
 800b3b8:	461a      	mov	r2, r3
 800b3ba:	da05      	bge.n	800b3c8 <_vsniprintf_r+0x1a>
 800b3bc:	238b      	movs	r3, #139	@ 0x8b
 800b3be:	6003      	str	r3, [r0, #0]
 800b3c0:	f04f 30ff 	mov.w	r0, #4294967295
 800b3c4:	b01b      	add	sp, #108	@ 0x6c
 800b3c6:	bd30      	pop	{r4, r5, pc}
 800b3c8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800b3cc:	f8ad 300c 	strh.w	r3, [sp, #12]
 800b3d0:	bf14      	ite	ne
 800b3d2:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b3d6:	4623      	moveq	r3, r4
 800b3d8:	9302      	str	r3, [sp, #8]
 800b3da:	9305      	str	r3, [sp, #20]
 800b3dc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b3e0:	9100      	str	r1, [sp, #0]
 800b3e2:	9104      	str	r1, [sp, #16]
 800b3e4:	f8ad 300e 	strh.w	r3, [sp, #14]
 800b3e8:	4669      	mov	r1, sp
 800b3ea:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800b3ec:	f001 fa2e 	bl	800c84c <_svfiprintf_r>
 800b3f0:	1c43      	adds	r3, r0, #1
 800b3f2:	bfbc      	itt	lt
 800b3f4:	238b      	movlt	r3, #139	@ 0x8b
 800b3f6:	602b      	strlt	r3, [r5, #0]
 800b3f8:	2c00      	cmp	r4, #0
 800b3fa:	d0e3      	beq.n	800b3c4 <_vsniprintf_r+0x16>
 800b3fc:	9b00      	ldr	r3, [sp, #0]
 800b3fe:	2200      	movs	r2, #0
 800b400:	701a      	strb	r2, [r3, #0]
 800b402:	e7df      	b.n	800b3c4 <_vsniprintf_r+0x16>

0800b404 <vsniprintf>:
 800b404:	b507      	push	{r0, r1, r2, lr}
 800b406:	9300      	str	r3, [sp, #0]
 800b408:	4613      	mov	r3, r2
 800b40a:	460a      	mov	r2, r1
 800b40c:	4601      	mov	r1, r0
 800b40e:	4803      	ldr	r0, [pc, #12]	@ (800b41c <vsniprintf+0x18>)
 800b410:	6800      	ldr	r0, [r0, #0]
 800b412:	f7ff ffcc 	bl	800b3ae <_vsniprintf_r>
 800b416:	b003      	add	sp, #12
 800b418:	f85d fb04 	ldr.w	pc, [sp], #4
 800b41c:	200001a8 	.word	0x200001a8

0800b420 <memset>:
 800b420:	4402      	add	r2, r0
 800b422:	4603      	mov	r3, r0
 800b424:	4293      	cmp	r3, r2
 800b426:	d100      	bne.n	800b42a <memset+0xa>
 800b428:	4770      	bx	lr
 800b42a:	f803 1b01 	strb.w	r1, [r3], #1
 800b42e:	e7f9      	b.n	800b424 <memset+0x4>

0800b430 <strncmp>:
 800b430:	b510      	push	{r4, lr}
 800b432:	b16a      	cbz	r2, 800b450 <strncmp+0x20>
 800b434:	3901      	subs	r1, #1
 800b436:	1884      	adds	r4, r0, r2
 800b438:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b43c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800b440:	429a      	cmp	r2, r3
 800b442:	d103      	bne.n	800b44c <strncmp+0x1c>
 800b444:	42a0      	cmp	r0, r4
 800b446:	d001      	beq.n	800b44c <strncmp+0x1c>
 800b448:	2a00      	cmp	r2, #0
 800b44a:	d1f5      	bne.n	800b438 <strncmp+0x8>
 800b44c:	1ad0      	subs	r0, r2, r3
 800b44e:	bd10      	pop	{r4, pc}
 800b450:	4610      	mov	r0, r2
 800b452:	e7fc      	b.n	800b44e <strncmp+0x1e>

0800b454 <strncpy>:
 800b454:	b510      	push	{r4, lr}
 800b456:	3901      	subs	r1, #1
 800b458:	4603      	mov	r3, r0
 800b45a:	b132      	cbz	r2, 800b46a <strncpy+0x16>
 800b45c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800b460:	f803 4b01 	strb.w	r4, [r3], #1
 800b464:	3a01      	subs	r2, #1
 800b466:	2c00      	cmp	r4, #0
 800b468:	d1f7      	bne.n	800b45a <strncpy+0x6>
 800b46a:	441a      	add	r2, r3
 800b46c:	2100      	movs	r1, #0
 800b46e:	4293      	cmp	r3, r2
 800b470:	d100      	bne.n	800b474 <strncpy+0x20>
 800b472:	bd10      	pop	{r4, pc}
 800b474:	f803 1b01 	strb.w	r1, [r3], #1
 800b478:	e7f9      	b.n	800b46e <strncpy+0x1a>
	...

0800b47c <_close_r>:
 800b47c:	b538      	push	{r3, r4, r5, lr}
 800b47e:	4d06      	ldr	r5, [pc, #24]	@ (800b498 <_close_r+0x1c>)
 800b480:	2300      	movs	r3, #0
 800b482:	4604      	mov	r4, r0
 800b484:	4608      	mov	r0, r1
 800b486:	602b      	str	r3, [r5, #0]
 800b488:	f7f7 f904 	bl	8002694 <_close>
 800b48c:	1c43      	adds	r3, r0, #1
 800b48e:	d102      	bne.n	800b496 <_close_r+0x1a>
 800b490:	682b      	ldr	r3, [r5, #0]
 800b492:	b103      	cbz	r3, 800b496 <_close_r+0x1a>
 800b494:	6023      	str	r3, [r4, #0]
 800b496:	bd38      	pop	{r3, r4, r5, pc}
 800b498:	20000788 	.word	0x20000788

0800b49c <_lseek_r>:
 800b49c:	b538      	push	{r3, r4, r5, lr}
 800b49e:	4d07      	ldr	r5, [pc, #28]	@ (800b4bc <_lseek_r+0x20>)
 800b4a0:	4604      	mov	r4, r0
 800b4a2:	4608      	mov	r0, r1
 800b4a4:	4611      	mov	r1, r2
 800b4a6:	2200      	movs	r2, #0
 800b4a8:	602a      	str	r2, [r5, #0]
 800b4aa:	461a      	mov	r2, r3
 800b4ac:	f7f7 f919 	bl	80026e2 <_lseek>
 800b4b0:	1c43      	adds	r3, r0, #1
 800b4b2:	d102      	bne.n	800b4ba <_lseek_r+0x1e>
 800b4b4:	682b      	ldr	r3, [r5, #0]
 800b4b6:	b103      	cbz	r3, 800b4ba <_lseek_r+0x1e>
 800b4b8:	6023      	str	r3, [r4, #0]
 800b4ba:	bd38      	pop	{r3, r4, r5, pc}
 800b4bc:	20000788 	.word	0x20000788

0800b4c0 <_read_r>:
 800b4c0:	b538      	push	{r3, r4, r5, lr}
 800b4c2:	4d07      	ldr	r5, [pc, #28]	@ (800b4e0 <_read_r+0x20>)
 800b4c4:	4604      	mov	r4, r0
 800b4c6:	4608      	mov	r0, r1
 800b4c8:	4611      	mov	r1, r2
 800b4ca:	2200      	movs	r2, #0
 800b4cc:	602a      	str	r2, [r5, #0]
 800b4ce:	461a      	mov	r2, r3
 800b4d0:	f7f7 f8a7 	bl	8002622 <_read>
 800b4d4:	1c43      	adds	r3, r0, #1
 800b4d6:	d102      	bne.n	800b4de <_read_r+0x1e>
 800b4d8:	682b      	ldr	r3, [r5, #0]
 800b4da:	b103      	cbz	r3, 800b4de <_read_r+0x1e>
 800b4dc:	6023      	str	r3, [r4, #0]
 800b4de:	bd38      	pop	{r3, r4, r5, pc}
 800b4e0:	20000788 	.word	0x20000788

0800b4e4 <_write_r>:
 800b4e4:	b538      	push	{r3, r4, r5, lr}
 800b4e6:	4d07      	ldr	r5, [pc, #28]	@ (800b504 <_write_r+0x20>)
 800b4e8:	4604      	mov	r4, r0
 800b4ea:	4608      	mov	r0, r1
 800b4ec:	4611      	mov	r1, r2
 800b4ee:	2200      	movs	r2, #0
 800b4f0:	602a      	str	r2, [r5, #0]
 800b4f2:	461a      	mov	r2, r3
 800b4f4:	f7f7 f8b2 	bl	800265c <_write>
 800b4f8:	1c43      	adds	r3, r0, #1
 800b4fa:	d102      	bne.n	800b502 <_write_r+0x1e>
 800b4fc:	682b      	ldr	r3, [r5, #0]
 800b4fe:	b103      	cbz	r3, 800b502 <_write_r+0x1e>
 800b500:	6023      	str	r3, [r4, #0]
 800b502:	bd38      	pop	{r3, r4, r5, pc}
 800b504:	20000788 	.word	0x20000788

0800b508 <__errno>:
 800b508:	4b01      	ldr	r3, [pc, #4]	@ (800b510 <__errno+0x8>)
 800b50a:	6818      	ldr	r0, [r3, #0]
 800b50c:	4770      	bx	lr
 800b50e:	bf00      	nop
 800b510:	200001a8 	.word	0x200001a8

0800b514 <__libc_init_array>:
 800b514:	b570      	push	{r4, r5, r6, lr}
 800b516:	4d0d      	ldr	r5, [pc, #52]	@ (800b54c <__libc_init_array+0x38>)
 800b518:	4c0d      	ldr	r4, [pc, #52]	@ (800b550 <__libc_init_array+0x3c>)
 800b51a:	1b64      	subs	r4, r4, r5
 800b51c:	10a4      	asrs	r4, r4, #2
 800b51e:	2600      	movs	r6, #0
 800b520:	42a6      	cmp	r6, r4
 800b522:	d109      	bne.n	800b538 <__libc_init_array+0x24>
 800b524:	4d0b      	ldr	r5, [pc, #44]	@ (800b554 <__libc_init_array+0x40>)
 800b526:	4c0c      	ldr	r4, [pc, #48]	@ (800b558 <__libc_init_array+0x44>)
 800b528:	f002 f91e 	bl	800d768 <_init>
 800b52c:	1b64      	subs	r4, r4, r5
 800b52e:	10a4      	asrs	r4, r4, #2
 800b530:	2600      	movs	r6, #0
 800b532:	42a6      	cmp	r6, r4
 800b534:	d105      	bne.n	800b542 <__libc_init_array+0x2e>
 800b536:	bd70      	pop	{r4, r5, r6, pc}
 800b538:	f855 3b04 	ldr.w	r3, [r5], #4
 800b53c:	4798      	blx	r3
 800b53e:	3601      	adds	r6, #1
 800b540:	e7ee      	b.n	800b520 <__libc_init_array+0xc>
 800b542:	f855 3b04 	ldr.w	r3, [r5], #4
 800b546:	4798      	blx	r3
 800b548:	3601      	adds	r6, #1
 800b54a:	e7f2      	b.n	800b532 <__libc_init_array+0x1e>
 800b54c:	0800dd70 	.word	0x0800dd70
 800b550:	0800dd70 	.word	0x0800dd70
 800b554:	0800dd70 	.word	0x0800dd70
 800b558:	0800dd74 	.word	0x0800dd74

0800b55c <__retarget_lock_init_recursive>:
 800b55c:	4770      	bx	lr

0800b55e <__retarget_lock_acquire_recursive>:
 800b55e:	4770      	bx	lr

0800b560 <__retarget_lock_release_recursive>:
 800b560:	4770      	bx	lr

0800b562 <memcpy>:
 800b562:	440a      	add	r2, r1
 800b564:	4291      	cmp	r1, r2
 800b566:	f100 33ff 	add.w	r3, r0, #4294967295
 800b56a:	d100      	bne.n	800b56e <memcpy+0xc>
 800b56c:	4770      	bx	lr
 800b56e:	b510      	push	{r4, lr}
 800b570:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b574:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b578:	4291      	cmp	r1, r2
 800b57a:	d1f9      	bne.n	800b570 <memcpy+0xe>
 800b57c:	bd10      	pop	{r4, pc}
	...

0800b580 <nan>:
 800b580:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800b588 <nan+0x8>
 800b584:	4770      	bx	lr
 800b586:	bf00      	nop
 800b588:	00000000 	.word	0x00000000
 800b58c:	7ff80000 	.word	0x7ff80000

0800b590 <_free_r>:
 800b590:	b538      	push	{r3, r4, r5, lr}
 800b592:	4605      	mov	r5, r0
 800b594:	2900      	cmp	r1, #0
 800b596:	d041      	beq.n	800b61c <_free_r+0x8c>
 800b598:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b59c:	1f0c      	subs	r4, r1, #4
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	bfb8      	it	lt
 800b5a2:	18e4      	addlt	r4, r4, r3
 800b5a4:	f000 fc2c 	bl	800be00 <__malloc_lock>
 800b5a8:	4a1d      	ldr	r2, [pc, #116]	@ (800b620 <_free_r+0x90>)
 800b5aa:	6813      	ldr	r3, [r2, #0]
 800b5ac:	b933      	cbnz	r3, 800b5bc <_free_r+0x2c>
 800b5ae:	6063      	str	r3, [r4, #4]
 800b5b0:	6014      	str	r4, [r2, #0]
 800b5b2:	4628      	mov	r0, r5
 800b5b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b5b8:	f000 bc28 	b.w	800be0c <__malloc_unlock>
 800b5bc:	42a3      	cmp	r3, r4
 800b5be:	d908      	bls.n	800b5d2 <_free_r+0x42>
 800b5c0:	6820      	ldr	r0, [r4, #0]
 800b5c2:	1821      	adds	r1, r4, r0
 800b5c4:	428b      	cmp	r3, r1
 800b5c6:	bf01      	itttt	eq
 800b5c8:	6819      	ldreq	r1, [r3, #0]
 800b5ca:	685b      	ldreq	r3, [r3, #4]
 800b5cc:	1809      	addeq	r1, r1, r0
 800b5ce:	6021      	streq	r1, [r4, #0]
 800b5d0:	e7ed      	b.n	800b5ae <_free_r+0x1e>
 800b5d2:	461a      	mov	r2, r3
 800b5d4:	685b      	ldr	r3, [r3, #4]
 800b5d6:	b10b      	cbz	r3, 800b5dc <_free_r+0x4c>
 800b5d8:	42a3      	cmp	r3, r4
 800b5da:	d9fa      	bls.n	800b5d2 <_free_r+0x42>
 800b5dc:	6811      	ldr	r1, [r2, #0]
 800b5de:	1850      	adds	r0, r2, r1
 800b5e0:	42a0      	cmp	r0, r4
 800b5e2:	d10b      	bne.n	800b5fc <_free_r+0x6c>
 800b5e4:	6820      	ldr	r0, [r4, #0]
 800b5e6:	4401      	add	r1, r0
 800b5e8:	1850      	adds	r0, r2, r1
 800b5ea:	4283      	cmp	r3, r0
 800b5ec:	6011      	str	r1, [r2, #0]
 800b5ee:	d1e0      	bne.n	800b5b2 <_free_r+0x22>
 800b5f0:	6818      	ldr	r0, [r3, #0]
 800b5f2:	685b      	ldr	r3, [r3, #4]
 800b5f4:	6053      	str	r3, [r2, #4]
 800b5f6:	4408      	add	r0, r1
 800b5f8:	6010      	str	r0, [r2, #0]
 800b5fa:	e7da      	b.n	800b5b2 <_free_r+0x22>
 800b5fc:	d902      	bls.n	800b604 <_free_r+0x74>
 800b5fe:	230c      	movs	r3, #12
 800b600:	602b      	str	r3, [r5, #0]
 800b602:	e7d6      	b.n	800b5b2 <_free_r+0x22>
 800b604:	6820      	ldr	r0, [r4, #0]
 800b606:	1821      	adds	r1, r4, r0
 800b608:	428b      	cmp	r3, r1
 800b60a:	bf04      	itt	eq
 800b60c:	6819      	ldreq	r1, [r3, #0]
 800b60e:	685b      	ldreq	r3, [r3, #4]
 800b610:	6063      	str	r3, [r4, #4]
 800b612:	bf04      	itt	eq
 800b614:	1809      	addeq	r1, r1, r0
 800b616:	6021      	streq	r1, [r4, #0]
 800b618:	6054      	str	r4, [r2, #4]
 800b61a:	e7ca      	b.n	800b5b2 <_free_r+0x22>
 800b61c:	bd38      	pop	{r3, r4, r5, pc}
 800b61e:	bf00      	nop
 800b620:	20000794 	.word	0x20000794

0800b624 <rshift>:
 800b624:	6903      	ldr	r3, [r0, #16]
 800b626:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b62a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b62e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b632:	f100 0414 	add.w	r4, r0, #20
 800b636:	dd45      	ble.n	800b6c4 <rshift+0xa0>
 800b638:	f011 011f 	ands.w	r1, r1, #31
 800b63c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b640:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b644:	d10c      	bne.n	800b660 <rshift+0x3c>
 800b646:	f100 0710 	add.w	r7, r0, #16
 800b64a:	4629      	mov	r1, r5
 800b64c:	42b1      	cmp	r1, r6
 800b64e:	d334      	bcc.n	800b6ba <rshift+0x96>
 800b650:	1a9b      	subs	r3, r3, r2
 800b652:	009b      	lsls	r3, r3, #2
 800b654:	1eea      	subs	r2, r5, #3
 800b656:	4296      	cmp	r6, r2
 800b658:	bf38      	it	cc
 800b65a:	2300      	movcc	r3, #0
 800b65c:	4423      	add	r3, r4
 800b65e:	e015      	b.n	800b68c <rshift+0x68>
 800b660:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b664:	f1c1 0820 	rsb	r8, r1, #32
 800b668:	40cf      	lsrs	r7, r1
 800b66a:	f105 0e04 	add.w	lr, r5, #4
 800b66e:	46a1      	mov	r9, r4
 800b670:	4576      	cmp	r6, lr
 800b672:	46f4      	mov	ip, lr
 800b674:	d815      	bhi.n	800b6a2 <rshift+0x7e>
 800b676:	1a9a      	subs	r2, r3, r2
 800b678:	0092      	lsls	r2, r2, #2
 800b67a:	3a04      	subs	r2, #4
 800b67c:	3501      	adds	r5, #1
 800b67e:	42ae      	cmp	r6, r5
 800b680:	bf38      	it	cc
 800b682:	2200      	movcc	r2, #0
 800b684:	18a3      	adds	r3, r4, r2
 800b686:	50a7      	str	r7, [r4, r2]
 800b688:	b107      	cbz	r7, 800b68c <rshift+0x68>
 800b68a:	3304      	adds	r3, #4
 800b68c:	1b1a      	subs	r2, r3, r4
 800b68e:	42a3      	cmp	r3, r4
 800b690:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b694:	bf08      	it	eq
 800b696:	2300      	moveq	r3, #0
 800b698:	6102      	str	r2, [r0, #16]
 800b69a:	bf08      	it	eq
 800b69c:	6143      	streq	r3, [r0, #20]
 800b69e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b6a2:	f8dc c000 	ldr.w	ip, [ip]
 800b6a6:	fa0c fc08 	lsl.w	ip, ip, r8
 800b6aa:	ea4c 0707 	orr.w	r7, ip, r7
 800b6ae:	f849 7b04 	str.w	r7, [r9], #4
 800b6b2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b6b6:	40cf      	lsrs	r7, r1
 800b6b8:	e7da      	b.n	800b670 <rshift+0x4c>
 800b6ba:	f851 cb04 	ldr.w	ip, [r1], #4
 800b6be:	f847 cf04 	str.w	ip, [r7, #4]!
 800b6c2:	e7c3      	b.n	800b64c <rshift+0x28>
 800b6c4:	4623      	mov	r3, r4
 800b6c6:	e7e1      	b.n	800b68c <rshift+0x68>

0800b6c8 <__hexdig_fun>:
 800b6c8:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800b6cc:	2b09      	cmp	r3, #9
 800b6ce:	d802      	bhi.n	800b6d6 <__hexdig_fun+0xe>
 800b6d0:	3820      	subs	r0, #32
 800b6d2:	b2c0      	uxtb	r0, r0
 800b6d4:	4770      	bx	lr
 800b6d6:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800b6da:	2b05      	cmp	r3, #5
 800b6dc:	d801      	bhi.n	800b6e2 <__hexdig_fun+0x1a>
 800b6de:	3847      	subs	r0, #71	@ 0x47
 800b6e0:	e7f7      	b.n	800b6d2 <__hexdig_fun+0xa>
 800b6e2:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800b6e6:	2b05      	cmp	r3, #5
 800b6e8:	d801      	bhi.n	800b6ee <__hexdig_fun+0x26>
 800b6ea:	3827      	subs	r0, #39	@ 0x27
 800b6ec:	e7f1      	b.n	800b6d2 <__hexdig_fun+0xa>
 800b6ee:	2000      	movs	r0, #0
 800b6f0:	4770      	bx	lr
	...

0800b6f4 <__gethex>:
 800b6f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6f8:	b085      	sub	sp, #20
 800b6fa:	468a      	mov	sl, r1
 800b6fc:	9302      	str	r3, [sp, #8]
 800b6fe:	680b      	ldr	r3, [r1, #0]
 800b700:	9001      	str	r0, [sp, #4]
 800b702:	4690      	mov	r8, r2
 800b704:	1c9c      	adds	r4, r3, #2
 800b706:	46a1      	mov	r9, r4
 800b708:	f814 0b01 	ldrb.w	r0, [r4], #1
 800b70c:	2830      	cmp	r0, #48	@ 0x30
 800b70e:	d0fa      	beq.n	800b706 <__gethex+0x12>
 800b710:	eba9 0303 	sub.w	r3, r9, r3
 800b714:	f1a3 0b02 	sub.w	fp, r3, #2
 800b718:	f7ff ffd6 	bl	800b6c8 <__hexdig_fun>
 800b71c:	4605      	mov	r5, r0
 800b71e:	2800      	cmp	r0, #0
 800b720:	d168      	bne.n	800b7f4 <__gethex+0x100>
 800b722:	49a0      	ldr	r1, [pc, #640]	@ (800b9a4 <__gethex+0x2b0>)
 800b724:	2201      	movs	r2, #1
 800b726:	4648      	mov	r0, r9
 800b728:	f7ff fe82 	bl	800b430 <strncmp>
 800b72c:	4607      	mov	r7, r0
 800b72e:	2800      	cmp	r0, #0
 800b730:	d167      	bne.n	800b802 <__gethex+0x10e>
 800b732:	f899 0001 	ldrb.w	r0, [r9, #1]
 800b736:	4626      	mov	r6, r4
 800b738:	f7ff ffc6 	bl	800b6c8 <__hexdig_fun>
 800b73c:	2800      	cmp	r0, #0
 800b73e:	d062      	beq.n	800b806 <__gethex+0x112>
 800b740:	4623      	mov	r3, r4
 800b742:	7818      	ldrb	r0, [r3, #0]
 800b744:	2830      	cmp	r0, #48	@ 0x30
 800b746:	4699      	mov	r9, r3
 800b748:	f103 0301 	add.w	r3, r3, #1
 800b74c:	d0f9      	beq.n	800b742 <__gethex+0x4e>
 800b74e:	f7ff ffbb 	bl	800b6c8 <__hexdig_fun>
 800b752:	fab0 f580 	clz	r5, r0
 800b756:	096d      	lsrs	r5, r5, #5
 800b758:	f04f 0b01 	mov.w	fp, #1
 800b75c:	464a      	mov	r2, r9
 800b75e:	4616      	mov	r6, r2
 800b760:	3201      	adds	r2, #1
 800b762:	7830      	ldrb	r0, [r6, #0]
 800b764:	f7ff ffb0 	bl	800b6c8 <__hexdig_fun>
 800b768:	2800      	cmp	r0, #0
 800b76a:	d1f8      	bne.n	800b75e <__gethex+0x6a>
 800b76c:	498d      	ldr	r1, [pc, #564]	@ (800b9a4 <__gethex+0x2b0>)
 800b76e:	2201      	movs	r2, #1
 800b770:	4630      	mov	r0, r6
 800b772:	f7ff fe5d 	bl	800b430 <strncmp>
 800b776:	2800      	cmp	r0, #0
 800b778:	d13f      	bne.n	800b7fa <__gethex+0x106>
 800b77a:	b944      	cbnz	r4, 800b78e <__gethex+0x9a>
 800b77c:	1c74      	adds	r4, r6, #1
 800b77e:	4622      	mov	r2, r4
 800b780:	4616      	mov	r6, r2
 800b782:	3201      	adds	r2, #1
 800b784:	7830      	ldrb	r0, [r6, #0]
 800b786:	f7ff ff9f 	bl	800b6c8 <__hexdig_fun>
 800b78a:	2800      	cmp	r0, #0
 800b78c:	d1f8      	bne.n	800b780 <__gethex+0x8c>
 800b78e:	1ba4      	subs	r4, r4, r6
 800b790:	00a7      	lsls	r7, r4, #2
 800b792:	7833      	ldrb	r3, [r6, #0]
 800b794:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800b798:	2b50      	cmp	r3, #80	@ 0x50
 800b79a:	d13e      	bne.n	800b81a <__gethex+0x126>
 800b79c:	7873      	ldrb	r3, [r6, #1]
 800b79e:	2b2b      	cmp	r3, #43	@ 0x2b
 800b7a0:	d033      	beq.n	800b80a <__gethex+0x116>
 800b7a2:	2b2d      	cmp	r3, #45	@ 0x2d
 800b7a4:	d034      	beq.n	800b810 <__gethex+0x11c>
 800b7a6:	1c71      	adds	r1, r6, #1
 800b7a8:	2400      	movs	r4, #0
 800b7aa:	7808      	ldrb	r0, [r1, #0]
 800b7ac:	f7ff ff8c 	bl	800b6c8 <__hexdig_fun>
 800b7b0:	1e43      	subs	r3, r0, #1
 800b7b2:	b2db      	uxtb	r3, r3
 800b7b4:	2b18      	cmp	r3, #24
 800b7b6:	d830      	bhi.n	800b81a <__gethex+0x126>
 800b7b8:	f1a0 0210 	sub.w	r2, r0, #16
 800b7bc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b7c0:	f7ff ff82 	bl	800b6c8 <__hexdig_fun>
 800b7c4:	f100 3cff 	add.w	ip, r0, #4294967295
 800b7c8:	fa5f fc8c 	uxtb.w	ip, ip
 800b7cc:	f1bc 0f18 	cmp.w	ip, #24
 800b7d0:	f04f 030a 	mov.w	r3, #10
 800b7d4:	d91e      	bls.n	800b814 <__gethex+0x120>
 800b7d6:	b104      	cbz	r4, 800b7da <__gethex+0xe6>
 800b7d8:	4252      	negs	r2, r2
 800b7da:	4417      	add	r7, r2
 800b7dc:	f8ca 1000 	str.w	r1, [sl]
 800b7e0:	b1ed      	cbz	r5, 800b81e <__gethex+0x12a>
 800b7e2:	f1bb 0f00 	cmp.w	fp, #0
 800b7e6:	bf0c      	ite	eq
 800b7e8:	2506      	moveq	r5, #6
 800b7ea:	2500      	movne	r5, #0
 800b7ec:	4628      	mov	r0, r5
 800b7ee:	b005      	add	sp, #20
 800b7f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7f4:	2500      	movs	r5, #0
 800b7f6:	462c      	mov	r4, r5
 800b7f8:	e7b0      	b.n	800b75c <__gethex+0x68>
 800b7fa:	2c00      	cmp	r4, #0
 800b7fc:	d1c7      	bne.n	800b78e <__gethex+0x9a>
 800b7fe:	4627      	mov	r7, r4
 800b800:	e7c7      	b.n	800b792 <__gethex+0x9e>
 800b802:	464e      	mov	r6, r9
 800b804:	462f      	mov	r7, r5
 800b806:	2501      	movs	r5, #1
 800b808:	e7c3      	b.n	800b792 <__gethex+0x9e>
 800b80a:	2400      	movs	r4, #0
 800b80c:	1cb1      	adds	r1, r6, #2
 800b80e:	e7cc      	b.n	800b7aa <__gethex+0xb6>
 800b810:	2401      	movs	r4, #1
 800b812:	e7fb      	b.n	800b80c <__gethex+0x118>
 800b814:	fb03 0002 	mla	r0, r3, r2, r0
 800b818:	e7ce      	b.n	800b7b8 <__gethex+0xc4>
 800b81a:	4631      	mov	r1, r6
 800b81c:	e7de      	b.n	800b7dc <__gethex+0xe8>
 800b81e:	eba6 0309 	sub.w	r3, r6, r9
 800b822:	3b01      	subs	r3, #1
 800b824:	4629      	mov	r1, r5
 800b826:	2b07      	cmp	r3, #7
 800b828:	dc0a      	bgt.n	800b840 <__gethex+0x14c>
 800b82a:	9801      	ldr	r0, [sp, #4]
 800b82c:	f000 faf4 	bl	800be18 <_Balloc>
 800b830:	4604      	mov	r4, r0
 800b832:	b940      	cbnz	r0, 800b846 <__gethex+0x152>
 800b834:	4b5c      	ldr	r3, [pc, #368]	@ (800b9a8 <__gethex+0x2b4>)
 800b836:	4602      	mov	r2, r0
 800b838:	21e4      	movs	r1, #228	@ 0xe4
 800b83a:	485c      	ldr	r0, [pc, #368]	@ (800b9ac <__gethex+0x2b8>)
 800b83c:	f001 fd3c 	bl	800d2b8 <__assert_func>
 800b840:	3101      	adds	r1, #1
 800b842:	105b      	asrs	r3, r3, #1
 800b844:	e7ef      	b.n	800b826 <__gethex+0x132>
 800b846:	f100 0a14 	add.w	sl, r0, #20
 800b84a:	2300      	movs	r3, #0
 800b84c:	4655      	mov	r5, sl
 800b84e:	469b      	mov	fp, r3
 800b850:	45b1      	cmp	r9, r6
 800b852:	d337      	bcc.n	800b8c4 <__gethex+0x1d0>
 800b854:	f845 bb04 	str.w	fp, [r5], #4
 800b858:	eba5 050a 	sub.w	r5, r5, sl
 800b85c:	10ad      	asrs	r5, r5, #2
 800b85e:	6125      	str	r5, [r4, #16]
 800b860:	4658      	mov	r0, fp
 800b862:	f000 fbcb 	bl	800bffc <__hi0bits>
 800b866:	016d      	lsls	r5, r5, #5
 800b868:	f8d8 6000 	ldr.w	r6, [r8]
 800b86c:	1a2d      	subs	r5, r5, r0
 800b86e:	42b5      	cmp	r5, r6
 800b870:	dd54      	ble.n	800b91c <__gethex+0x228>
 800b872:	1bad      	subs	r5, r5, r6
 800b874:	4629      	mov	r1, r5
 800b876:	4620      	mov	r0, r4
 800b878:	f000 ff5f 	bl	800c73a <__any_on>
 800b87c:	4681      	mov	r9, r0
 800b87e:	b178      	cbz	r0, 800b8a0 <__gethex+0x1ac>
 800b880:	1e6b      	subs	r3, r5, #1
 800b882:	1159      	asrs	r1, r3, #5
 800b884:	f003 021f 	and.w	r2, r3, #31
 800b888:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800b88c:	f04f 0901 	mov.w	r9, #1
 800b890:	fa09 f202 	lsl.w	r2, r9, r2
 800b894:	420a      	tst	r2, r1
 800b896:	d003      	beq.n	800b8a0 <__gethex+0x1ac>
 800b898:	454b      	cmp	r3, r9
 800b89a:	dc36      	bgt.n	800b90a <__gethex+0x216>
 800b89c:	f04f 0902 	mov.w	r9, #2
 800b8a0:	4629      	mov	r1, r5
 800b8a2:	4620      	mov	r0, r4
 800b8a4:	f7ff febe 	bl	800b624 <rshift>
 800b8a8:	442f      	add	r7, r5
 800b8aa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b8ae:	42bb      	cmp	r3, r7
 800b8b0:	da42      	bge.n	800b938 <__gethex+0x244>
 800b8b2:	9801      	ldr	r0, [sp, #4]
 800b8b4:	4621      	mov	r1, r4
 800b8b6:	f000 faef 	bl	800be98 <_Bfree>
 800b8ba:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b8bc:	2300      	movs	r3, #0
 800b8be:	6013      	str	r3, [r2, #0]
 800b8c0:	25a3      	movs	r5, #163	@ 0xa3
 800b8c2:	e793      	b.n	800b7ec <__gethex+0xf8>
 800b8c4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800b8c8:	2a2e      	cmp	r2, #46	@ 0x2e
 800b8ca:	d012      	beq.n	800b8f2 <__gethex+0x1fe>
 800b8cc:	2b20      	cmp	r3, #32
 800b8ce:	d104      	bne.n	800b8da <__gethex+0x1e6>
 800b8d0:	f845 bb04 	str.w	fp, [r5], #4
 800b8d4:	f04f 0b00 	mov.w	fp, #0
 800b8d8:	465b      	mov	r3, fp
 800b8da:	7830      	ldrb	r0, [r6, #0]
 800b8dc:	9303      	str	r3, [sp, #12]
 800b8de:	f7ff fef3 	bl	800b6c8 <__hexdig_fun>
 800b8e2:	9b03      	ldr	r3, [sp, #12]
 800b8e4:	f000 000f 	and.w	r0, r0, #15
 800b8e8:	4098      	lsls	r0, r3
 800b8ea:	ea4b 0b00 	orr.w	fp, fp, r0
 800b8ee:	3304      	adds	r3, #4
 800b8f0:	e7ae      	b.n	800b850 <__gethex+0x15c>
 800b8f2:	45b1      	cmp	r9, r6
 800b8f4:	d8ea      	bhi.n	800b8cc <__gethex+0x1d8>
 800b8f6:	492b      	ldr	r1, [pc, #172]	@ (800b9a4 <__gethex+0x2b0>)
 800b8f8:	9303      	str	r3, [sp, #12]
 800b8fa:	2201      	movs	r2, #1
 800b8fc:	4630      	mov	r0, r6
 800b8fe:	f7ff fd97 	bl	800b430 <strncmp>
 800b902:	9b03      	ldr	r3, [sp, #12]
 800b904:	2800      	cmp	r0, #0
 800b906:	d1e1      	bne.n	800b8cc <__gethex+0x1d8>
 800b908:	e7a2      	b.n	800b850 <__gethex+0x15c>
 800b90a:	1ea9      	subs	r1, r5, #2
 800b90c:	4620      	mov	r0, r4
 800b90e:	f000 ff14 	bl	800c73a <__any_on>
 800b912:	2800      	cmp	r0, #0
 800b914:	d0c2      	beq.n	800b89c <__gethex+0x1a8>
 800b916:	f04f 0903 	mov.w	r9, #3
 800b91a:	e7c1      	b.n	800b8a0 <__gethex+0x1ac>
 800b91c:	da09      	bge.n	800b932 <__gethex+0x23e>
 800b91e:	1b75      	subs	r5, r6, r5
 800b920:	4621      	mov	r1, r4
 800b922:	9801      	ldr	r0, [sp, #4]
 800b924:	462a      	mov	r2, r5
 800b926:	f000 fccf 	bl	800c2c8 <__lshift>
 800b92a:	1b7f      	subs	r7, r7, r5
 800b92c:	4604      	mov	r4, r0
 800b92e:	f100 0a14 	add.w	sl, r0, #20
 800b932:	f04f 0900 	mov.w	r9, #0
 800b936:	e7b8      	b.n	800b8aa <__gethex+0x1b6>
 800b938:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b93c:	42bd      	cmp	r5, r7
 800b93e:	dd6f      	ble.n	800ba20 <__gethex+0x32c>
 800b940:	1bed      	subs	r5, r5, r7
 800b942:	42ae      	cmp	r6, r5
 800b944:	dc34      	bgt.n	800b9b0 <__gethex+0x2bc>
 800b946:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b94a:	2b02      	cmp	r3, #2
 800b94c:	d022      	beq.n	800b994 <__gethex+0x2a0>
 800b94e:	2b03      	cmp	r3, #3
 800b950:	d024      	beq.n	800b99c <__gethex+0x2a8>
 800b952:	2b01      	cmp	r3, #1
 800b954:	d115      	bne.n	800b982 <__gethex+0x28e>
 800b956:	42ae      	cmp	r6, r5
 800b958:	d113      	bne.n	800b982 <__gethex+0x28e>
 800b95a:	2e01      	cmp	r6, #1
 800b95c:	d10b      	bne.n	800b976 <__gethex+0x282>
 800b95e:	9a02      	ldr	r2, [sp, #8]
 800b960:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b964:	6013      	str	r3, [r2, #0]
 800b966:	2301      	movs	r3, #1
 800b968:	6123      	str	r3, [r4, #16]
 800b96a:	f8ca 3000 	str.w	r3, [sl]
 800b96e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b970:	2562      	movs	r5, #98	@ 0x62
 800b972:	601c      	str	r4, [r3, #0]
 800b974:	e73a      	b.n	800b7ec <__gethex+0xf8>
 800b976:	1e71      	subs	r1, r6, #1
 800b978:	4620      	mov	r0, r4
 800b97a:	f000 fede 	bl	800c73a <__any_on>
 800b97e:	2800      	cmp	r0, #0
 800b980:	d1ed      	bne.n	800b95e <__gethex+0x26a>
 800b982:	9801      	ldr	r0, [sp, #4]
 800b984:	4621      	mov	r1, r4
 800b986:	f000 fa87 	bl	800be98 <_Bfree>
 800b98a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b98c:	2300      	movs	r3, #0
 800b98e:	6013      	str	r3, [r2, #0]
 800b990:	2550      	movs	r5, #80	@ 0x50
 800b992:	e72b      	b.n	800b7ec <__gethex+0xf8>
 800b994:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b996:	2b00      	cmp	r3, #0
 800b998:	d1f3      	bne.n	800b982 <__gethex+0x28e>
 800b99a:	e7e0      	b.n	800b95e <__gethex+0x26a>
 800b99c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d1dd      	bne.n	800b95e <__gethex+0x26a>
 800b9a2:	e7ee      	b.n	800b982 <__gethex+0x28e>
 800b9a4:	0800d9ac 	.word	0x0800d9ac
 800b9a8:	0800db19 	.word	0x0800db19
 800b9ac:	0800db2a 	.word	0x0800db2a
 800b9b0:	1e6f      	subs	r7, r5, #1
 800b9b2:	f1b9 0f00 	cmp.w	r9, #0
 800b9b6:	d130      	bne.n	800ba1a <__gethex+0x326>
 800b9b8:	b127      	cbz	r7, 800b9c4 <__gethex+0x2d0>
 800b9ba:	4639      	mov	r1, r7
 800b9bc:	4620      	mov	r0, r4
 800b9be:	f000 febc 	bl	800c73a <__any_on>
 800b9c2:	4681      	mov	r9, r0
 800b9c4:	117a      	asrs	r2, r7, #5
 800b9c6:	2301      	movs	r3, #1
 800b9c8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800b9cc:	f007 071f 	and.w	r7, r7, #31
 800b9d0:	40bb      	lsls	r3, r7
 800b9d2:	4213      	tst	r3, r2
 800b9d4:	4629      	mov	r1, r5
 800b9d6:	4620      	mov	r0, r4
 800b9d8:	bf18      	it	ne
 800b9da:	f049 0902 	orrne.w	r9, r9, #2
 800b9de:	f7ff fe21 	bl	800b624 <rshift>
 800b9e2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800b9e6:	1b76      	subs	r6, r6, r5
 800b9e8:	2502      	movs	r5, #2
 800b9ea:	f1b9 0f00 	cmp.w	r9, #0
 800b9ee:	d047      	beq.n	800ba80 <__gethex+0x38c>
 800b9f0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b9f4:	2b02      	cmp	r3, #2
 800b9f6:	d015      	beq.n	800ba24 <__gethex+0x330>
 800b9f8:	2b03      	cmp	r3, #3
 800b9fa:	d017      	beq.n	800ba2c <__gethex+0x338>
 800b9fc:	2b01      	cmp	r3, #1
 800b9fe:	d109      	bne.n	800ba14 <__gethex+0x320>
 800ba00:	f019 0f02 	tst.w	r9, #2
 800ba04:	d006      	beq.n	800ba14 <__gethex+0x320>
 800ba06:	f8da 3000 	ldr.w	r3, [sl]
 800ba0a:	ea49 0903 	orr.w	r9, r9, r3
 800ba0e:	f019 0f01 	tst.w	r9, #1
 800ba12:	d10e      	bne.n	800ba32 <__gethex+0x33e>
 800ba14:	f045 0510 	orr.w	r5, r5, #16
 800ba18:	e032      	b.n	800ba80 <__gethex+0x38c>
 800ba1a:	f04f 0901 	mov.w	r9, #1
 800ba1e:	e7d1      	b.n	800b9c4 <__gethex+0x2d0>
 800ba20:	2501      	movs	r5, #1
 800ba22:	e7e2      	b.n	800b9ea <__gethex+0x2f6>
 800ba24:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ba26:	f1c3 0301 	rsb	r3, r3, #1
 800ba2a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ba2c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d0f0      	beq.n	800ba14 <__gethex+0x320>
 800ba32:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800ba36:	f104 0314 	add.w	r3, r4, #20
 800ba3a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800ba3e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800ba42:	f04f 0c00 	mov.w	ip, #0
 800ba46:	4618      	mov	r0, r3
 800ba48:	f853 2b04 	ldr.w	r2, [r3], #4
 800ba4c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800ba50:	d01b      	beq.n	800ba8a <__gethex+0x396>
 800ba52:	3201      	adds	r2, #1
 800ba54:	6002      	str	r2, [r0, #0]
 800ba56:	2d02      	cmp	r5, #2
 800ba58:	f104 0314 	add.w	r3, r4, #20
 800ba5c:	d13c      	bne.n	800bad8 <__gethex+0x3e4>
 800ba5e:	f8d8 2000 	ldr.w	r2, [r8]
 800ba62:	3a01      	subs	r2, #1
 800ba64:	42b2      	cmp	r2, r6
 800ba66:	d109      	bne.n	800ba7c <__gethex+0x388>
 800ba68:	1171      	asrs	r1, r6, #5
 800ba6a:	2201      	movs	r2, #1
 800ba6c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ba70:	f006 061f 	and.w	r6, r6, #31
 800ba74:	fa02 f606 	lsl.w	r6, r2, r6
 800ba78:	421e      	tst	r6, r3
 800ba7a:	d13a      	bne.n	800baf2 <__gethex+0x3fe>
 800ba7c:	f045 0520 	orr.w	r5, r5, #32
 800ba80:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ba82:	601c      	str	r4, [r3, #0]
 800ba84:	9b02      	ldr	r3, [sp, #8]
 800ba86:	601f      	str	r7, [r3, #0]
 800ba88:	e6b0      	b.n	800b7ec <__gethex+0xf8>
 800ba8a:	4299      	cmp	r1, r3
 800ba8c:	f843 cc04 	str.w	ip, [r3, #-4]
 800ba90:	d8d9      	bhi.n	800ba46 <__gethex+0x352>
 800ba92:	68a3      	ldr	r3, [r4, #8]
 800ba94:	459b      	cmp	fp, r3
 800ba96:	db17      	blt.n	800bac8 <__gethex+0x3d4>
 800ba98:	6861      	ldr	r1, [r4, #4]
 800ba9a:	9801      	ldr	r0, [sp, #4]
 800ba9c:	3101      	adds	r1, #1
 800ba9e:	f000 f9bb 	bl	800be18 <_Balloc>
 800baa2:	4681      	mov	r9, r0
 800baa4:	b918      	cbnz	r0, 800baae <__gethex+0x3ba>
 800baa6:	4b1a      	ldr	r3, [pc, #104]	@ (800bb10 <__gethex+0x41c>)
 800baa8:	4602      	mov	r2, r0
 800baaa:	2184      	movs	r1, #132	@ 0x84
 800baac:	e6c5      	b.n	800b83a <__gethex+0x146>
 800baae:	6922      	ldr	r2, [r4, #16]
 800bab0:	3202      	adds	r2, #2
 800bab2:	f104 010c 	add.w	r1, r4, #12
 800bab6:	0092      	lsls	r2, r2, #2
 800bab8:	300c      	adds	r0, #12
 800baba:	f7ff fd52 	bl	800b562 <memcpy>
 800babe:	4621      	mov	r1, r4
 800bac0:	9801      	ldr	r0, [sp, #4]
 800bac2:	f000 f9e9 	bl	800be98 <_Bfree>
 800bac6:	464c      	mov	r4, r9
 800bac8:	6923      	ldr	r3, [r4, #16]
 800baca:	1c5a      	adds	r2, r3, #1
 800bacc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800bad0:	6122      	str	r2, [r4, #16]
 800bad2:	2201      	movs	r2, #1
 800bad4:	615a      	str	r2, [r3, #20]
 800bad6:	e7be      	b.n	800ba56 <__gethex+0x362>
 800bad8:	6922      	ldr	r2, [r4, #16]
 800bada:	455a      	cmp	r2, fp
 800badc:	dd0b      	ble.n	800baf6 <__gethex+0x402>
 800bade:	2101      	movs	r1, #1
 800bae0:	4620      	mov	r0, r4
 800bae2:	f7ff fd9f 	bl	800b624 <rshift>
 800bae6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800baea:	3701      	adds	r7, #1
 800baec:	42bb      	cmp	r3, r7
 800baee:	f6ff aee0 	blt.w	800b8b2 <__gethex+0x1be>
 800baf2:	2501      	movs	r5, #1
 800baf4:	e7c2      	b.n	800ba7c <__gethex+0x388>
 800baf6:	f016 061f 	ands.w	r6, r6, #31
 800bafa:	d0fa      	beq.n	800baf2 <__gethex+0x3fe>
 800bafc:	4453      	add	r3, sl
 800bafe:	f1c6 0620 	rsb	r6, r6, #32
 800bb02:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800bb06:	f000 fa79 	bl	800bffc <__hi0bits>
 800bb0a:	42b0      	cmp	r0, r6
 800bb0c:	dbe7      	blt.n	800bade <__gethex+0x3ea>
 800bb0e:	e7f0      	b.n	800baf2 <__gethex+0x3fe>
 800bb10:	0800db19 	.word	0x0800db19

0800bb14 <L_shift>:
 800bb14:	f1c2 0208 	rsb	r2, r2, #8
 800bb18:	0092      	lsls	r2, r2, #2
 800bb1a:	b570      	push	{r4, r5, r6, lr}
 800bb1c:	f1c2 0620 	rsb	r6, r2, #32
 800bb20:	6843      	ldr	r3, [r0, #4]
 800bb22:	6804      	ldr	r4, [r0, #0]
 800bb24:	fa03 f506 	lsl.w	r5, r3, r6
 800bb28:	432c      	orrs	r4, r5
 800bb2a:	40d3      	lsrs	r3, r2
 800bb2c:	6004      	str	r4, [r0, #0]
 800bb2e:	f840 3f04 	str.w	r3, [r0, #4]!
 800bb32:	4288      	cmp	r0, r1
 800bb34:	d3f4      	bcc.n	800bb20 <L_shift+0xc>
 800bb36:	bd70      	pop	{r4, r5, r6, pc}

0800bb38 <__match>:
 800bb38:	b530      	push	{r4, r5, lr}
 800bb3a:	6803      	ldr	r3, [r0, #0]
 800bb3c:	3301      	adds	r3, #1
 800bb3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bb42:	b914      	cbnz	r4, 800bb4a <__match+0x12>
 800bb44:	6003      	str	r3, [r0, #0]
 800bb46:	2001      	movs	r0, #1
 800bb48:	bd30      	pop	{r4, r5, pc}
 800bb4a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bb4e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800bb52:	2d19      	cmp	r5, #25
 800bb54:	bf98      	it	ls
 800bb56:	3220      	addls	r2, #32
 800bb58:	42a2      	cmp	r2, r4
 800bb5a:	d0f0      	beq.n	800bb3e <__match+0x6>
 800bb5c:	2000      	movs	r0, #0
 800bb5e:	e7f3      	b.n	800bb48 <__match+0x10>

0800bb60 <__hexnan>:
 800bb60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb64:	680b      	ldr	r3, [r1, #0]
 800bb66:	6801      	ldr	r1, [r0, #0]
 800bb68:	115e      	asrs	r6, r3, #5
 800bb6a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800bb6e:	f013 031f 	ands.w	r3, r3, #31
 800bb72:	b087      	sub	sp, #28
 800bb74:	bf18      	it	ne
 800bb76:	3604      	addne	r6, #4
 800bb78:	2500      	movs	r5, #0
 800bb7a:	1f37      	subs	r7, r6, #4
 800bb7c:	4682      	mov	sl, r0
 800bb7e:	4690      	mov	r8, r2
 800bb80:	9301      	str	r3, [sp, #4]
 800bb82:	f846 5c04 	str.w	r5, [r6, #-4]
 800bb86:	46b9      	mov	r9, r7
 800bb88:	463c      	mov	r4, r7
 800bb8a:	9502      	str	r5, [sp, #8]
 800bb8c:	46ab      	mov	fp, r5
 800bb8e:	784a      	ldrb	r2, [r1, #1]
 800bb90:	1c4b      	adds	r3, r1, #1
 800bb92:	9303      	str	r3, [sp, #12]
 800bb94:	b342      	cbz	r2, 800bbe8 <__hexnan+0x88>
 800bb96:	4610      	mov	r0, r2
 800bb98:	9105      	str	r1, [sp, #20]
 800bb9a:	9204      	str	r2, [sp, #16]
 800bb9c:	f7ff fd94 	bl	800b6c8 <__hexdig_fun>
 800bba0:	2800      	cmp	r0, #0
 800bba2:	d151      	bne.n	800bc48 <__hexnan+0xe8>
 800bba4:	9a04      	ldr	r2, [sp, #16]
 800bba6:	9905      	ldr	r1, [sp, #20]
 800bba8:	2a20      	cmp	r2, #32
 800bbaa:	d818      	bhi.n	800bbde <__hexnan+0x7e>
 800bbac:	9b02      	ldr	r3, [sp, #8]
 800bbae:	459b      	cmp	fp, r3
 800bbb0:	dd13      	ble.n	800bbda <__hexnan+0x7a>
 800bbb2:	454c      	cmp	r4, r9
 800bbb4:	d206      	bcs.n	800bbc4 <__hexnan+0x64>
 800bbb6:	2d07      	cmp	r5, #7
 800bbb8:	dc04      	bgt.n	800bbc4 <__hexnan+0x64>
 800bbba:	462a      	mov	r2, r5
 800bbbc:	4649      	mov	r1, r9
 800bbbe:	4620      	mov	r0, r4
 800bbc0:	f7ff ffa8 	bl	800bb14 <L_shift>
 800bbc4:	4544      	cmp	r4, r8
 800bbc6:	d952      	bls.n	800bc6e <__hexnan+0x10e>
 800bbc8:	2300      	movs	r3, #0
 800bbca:	f1a4 0904 	sub.w	r9, r4, #4
 800bbce:	f844 3c04 	str.w	r3, [r4, #-4]
 800bbd2:	f8cd b008 	str.w	fp, [sp, #8]
 800bbd6:	464c      	mov	r4, r9
 800bbd8:	461d      	mov	r5, r3
 800bbda:	9903      	ldr	r1, [sp, #12]
 800bbdc:	e7d7      	b.n	800bb8e <__hexnan+0x2e>
 800bbde:	2a29      	cmp	r2, #41	@ 0x29
 800bbe0:	d157      	bne.n	800bc92 <__hexnan+0x132>
 800bbe2:	3102      	adds	r1, #2
 800bbe4:	f8ca 1000 	str.w	r1, [sl]
 800bbe8:	f1bb 0f00 	cmp.w	fp, #0
 800bbec:	d051      	beq.n	800bc92 <__hexnan+0x132>
 800bbee:	454c      	cmp	r4, r9
 800bbf0:	d206      	bcs.n	800bc00 <__hexnan+0xa0>
 800bbf2:	2d07      	cmp	r5, #7
 800bbf4:	dc04      	bgt.n	800bc00 <__hexnan+0xa0>
 800bbf6:	462a      	mov	r2, r5
 800bbf8:	4649      	mov	r1, r9
 800bbfa:	4620      	mov	r0, r4
 800bbfc:	f7ff ff8a 	bl	800bb14 <L_shift>
 800bc00:	4544      	cmp	r4, r8
 800bc02:	d936      	bls.n	800bc72 <__hexnan+0x112>
 800bc04:	f1a8 0204 	sub.w	r2, r8, #4
 800bc08:	4623      	mov	r3, r4
 800bc0a:	f853 1b04 	ldr.w	r1, [r3], #4
 800bc0e:	f842 1f04 	str.w	r1, [r2, #4]!
 800bc12:	429f      	cmp	r7, r3
 800bc14:	d2f9      	bcs.n	800bc0a <__hexnan+0xaa>
 800bc16:	1b3b      	subs	r3, r7, r4
 800bc18:	f023 0303 	bic.w	r3, r3, #3
 800bc1c:	3304      	adds	r3, #4
 800bc1e:	3401      	adds	r4, #1
 800bc20:	3e03      	subs	r6, #3
 800bc22:	42b4      	cmp	r4, r6
 800bc24:	bf88      	it	hi
 800bc26:	2304      	movhi	r3, #4
 800bc28:	4443      	add	r3, r8
 800bc2a:	2200      	movs	r2, #0
 800bc2c:	f843 2b04 	str.w	r2, [r3], #4
 800bc30:	429f      	cmp	r7, r3
 800bc32:	d2fb      	bcs.n	800bc2c <__hexnan+0xcc>
 800bc34:	683b      	ldr	r3, [r7, #0]
 800bc36:	b91b      	cbnz	r3, 800bc40 <__hexnan+0xe0>
 800bc38:	4547      	cmp	r7, r8
 800bc3a:	d128      	bne.n	800bc8e <__hexnan+0x12e>
 800bc3c:	2301      	movs	r3, #1
 800bc3e:	603b      	str	r3, [r7, #0]
 800bc40:	2005      	movs	r0, #5
 800bc42:	b007      	add	sp, #28
 800bc44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc48:	3501      	adds	r5, #1
 800bc4a:	2d08      	cmp	r5, #8
 800bc4c:	f10b 0b01 	add.w	fp, fp, #1
 800bc50:	dd06      	ble.n	800bc60 <__hexnan+0x100>
 800bc52:	4544      	cmp	r4, r8
 800bc54:	d9c1      	bls.n	800bbda <__hexnan+0x7a>
 800bc56:	2300      	movs	r3, #0
 800bc58:	f844 3c04 	str.w	r3, [r4, #-4]
 800bc5c:	2501      	movs	r5, #1
 800bc5e:	3c04      	subs	r4, #4
 800bc60:	6822      	ldr	r2, [r4, #0]
 800bc62:	f000 000f 	and.w	r0, r0, #15
 800bc66:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800bc6a:	6020      	str	r0, [r4, #0]
 800bc6c:	e7b5      	b.n	800bbda <__hexnan+0x7a>
 800bc6e:	2508      	movs	r5, #8
 800bc70:	e7b3      	b.n	800bbda <__hexnan+0x7a>
 800bc72:	9b01      	ldr	r3, [sp, #4]
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d0dd      	beq.n	800bc34 <__hexnan+0xd4>
 800bc78:	f1c3 0320 	rsb	r3, r3, #32
 800bc7c:	f04f 32ff 	mov.w	r2, #4294967295
 800bc80:	40da      	lsrs	r2, r3
 800bc82:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800bc86:	4013      	ands	r3, r2
 800bc88:	f846 3c04 	str.w	r3, [r6, #-4]
 800bc8c:	e7d2      	b.n	800bc34 <__hexnan+0xd4>
 800bc8e:	3f04      	subs	r7, #4
 800bc90:	e7d0      	b.n	800bc34 <__hexnan+0xd4>
 800bc92:	2004      	movs	r0, #4
 800bc94:	e7d5      	b.n	800bc42 <__hexnan+0xe2>
	...

0800bc98 <sbrk_aligned>:
 800bc98:	b570      	push	{r4, r5, r6, lr}
 800bc9a:	4e0f      	ldr	r6, [pc, #60]	@ (800bcd8 <sbrk_aligned+0x40>)
 800bc9c:	460c      	mov	r4, r1
 800bc9e:	6831      	ldr	r1, [r6, #0]
 800bca0:	4605      	mov	r5, r0
 800bca2:	b911      	cbnz	r1, 800bcaa <sbrk_aligned+0x12>
 800bca4:	f001 faf8 	bl	800d298 <_sbrk_r>
 800bca8:	6030      	str	r0, [r6, #0]
 800bcaa:	4621      	mov	r1, r4
 800bcac:	4628      	mov	r0, r5
 800bcae:	f001 faf3 	bl	800d298 <_sbrk_r>
 800bcb2:	1c43      	adds	r3, r0, #1
 800bcb4:	d103      	bne.n	800bcbe <sbrk_aligned+0x26>
 800bcb6:	f04f 34ff 	mov.w	r4, #4294967295
 800bcba:	4620      	mov	r0, r4
 800bcbc:	bd70      	pop	{r4, r5, r6, pc}
 800bcbe:	1cc4      	adds	r4, r0, #3
 800bcc0:	f024 0403 	bic.w	r4, r4, #3
 800bcc4:	42a0      	cmp	r0, r4
 800bcc6:	d0f8      	beq.n	800bcba <sbrk_aligned+0x22>
 800bcc8:	1a21      	subs	r1, r4, r0
 800bcca:	4628      	mov	r0, r5
 800bccc:	f001 fae4 	bl	800d298 <_sbrk_r>
 800bcd0:	3001      	adds	r0, #1
 800bcd2:	d1f2      	bne.n	800bcba <sbrk_aligned+0x22>
 800bcd4:	e7ef      	b.n	800bcb6 <sbrk_aligned+0x1e>
 800bcd6:	bf00      	nop
 800bcd8:	20000790 	.word	0x20000790

0800bcdc <_malloc_r>:
 800bcdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bce0:	1ccd      	adds	r5, r1, #3
 800bce2:	f025 0503 	bic.w	r5, r5, #3
 800bce6:	3508      	adds	r5, #8
 800bce8:	2d0c      	cmp	r5, #12
 800bcea:	bf38      	it	cc
 800bcec:	250c      	movcc	r5, #12
 800bcee:	2d00      	cmp	r5, #0
 800bcf0:	4606      	mov	r6, r0
 800bcf2:	db01      	blt.n	800bcf8 <_malloc_r+0x1c>
 800bcf4:	42a9      	cmp	r1, r5
 800bcf6:	d904      	bls.n	800bd02 <_malloc_r+0x26>
 800bcf8:	230c      	movs	r3, #12
 800bcfa:	6033      	str	r3, [r6, #0]
 800bcfc:	2000      	movs	r0, #0
 800bcfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bd02:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800bdd8 <_malloc_r+0xfc>
 800bd06:	f000 f87b 	bl	800be00 <__malloc_lock>
 800bd0a:	f8d8 3000 	ldr.w	r3, [r8]
 800bd0e:	461c      	mov	r4, r3
 800bd10:	bb44      	cbnz	r4, 800bd64 <_malloc_r+0x88>
 800bd12:	4629      	mov	r1, r5
 800bd14:	4630      	mov	r0, r6
 800bd16:	f7ff ffbf 	bl	800bc98 <sbrk_aligned>
 800bd1a:	1c43      	adds	r3, r0, #1
 800bd1c:	4604      	mov	r4, r0
 800bd1e:	d158      	bne.n	800bdd2 <_malloc_r+0xf6>
 800bd20:	f8d8 4000 	ldr.w	r4, [r8]
 800bd24:	4627      	mov	r7, r4
 800bd26:	2f00      	cmp	r7, #0
 800bd28:	d143      	bne.n	800bdb2 <_malloc_r+0xd6>
 800bd2a:	2c00      	cmp	r4, #0
 800bd2c:	d04b      	beq.n	800bdc6 <_malloc_r+0xea>
 800bd2e:	6823      	ldr	r3, [r4, #0]
 800bd30:	4639      	mov	r1, r7
 800bd32:	4630      	mov	r0, r6
 800bd34:	eb04 0903 	add.w	r9, r4, r3
 800bd38:	f001 faae 	bl	800d298 <_sbrk_r>
 800bd3c:	4581      	cmp	r9, r0
 800bd3e:	d142      	bne.n	800bdc6 <_malloc_r+0xea>
 800bd40:	6821      	ldr	r1, [r4, #0]
 800bd42:	1a6d      	subs	r5, r5, r1
 800bd44:	4629      	mov	r1, r5
 800bd46:	4630      	mov	r0, r6
 800bd48:	f7ff ffa6 	bl	800bc98 <sbrk_aligned>
 800bd4c:	3001      	adds	r0, #1
 800bd4e:	d03a      	beq.n	800bdc6 <_malloc_r+0xea>
 800bd50:	6823      	ldr	r3, [r4, #0]
 800bd52:	442b      	add	r3, r5
 800bd54:	6023      	str	r3, [r4, #0]
 800bd56:	f8d8 3000 	ldr.w	r3, [r8]
 800bd5a:	685a      	ldr	r2, [r3, #4]
 800bd5c:	bb62      	cbnz	r2, 800bdb8 <_malloc_r+0xdc>
 800bd5e:	f8c8 7000 	str.w	r7, [r8]
 800bd62:	e00f      	b.n	800bd84 <_malloc_r+0xa8>
 800bd64:	6822      	ldr	r2, [r4, #0]
 800bd66:	1b52      	subs	r2, r2, r5
 800bd68:	d420      	bmi.n	800bdac <_malloc_r+0xd0>
 800bd6a:	2a0b      	cmp	r2, #11
 800bd6c:	d917      	bls.n	800bd9e <_malloc_r+0xc2>
 800bd6e:	1961      	adds	r1, r4, r5
 800bd70:	42a3      	cmp	r3, r4
 800bd72:	6025      	str	r5, [r4, #0]
 800bd74:	bf18      	it	ne
 800bd76:	6059      	strne	r1, [r3, #4]
 800bd78:	6863      	ldr	r3, [r4, #4]
 800bd7a:	bf08      	it	eq
 800bd7c:	f8c8 1000 	streq.w	r1, [r8]
 800bd80:	5162      	str	r2, [r4, r5]
 800bd82:	604b      	str	r3, [r1, #4]
 800bd84:	4630      	mov	r0, r6
 800bd86:	f000 f841 	bl	800be0c <__malloc_unlock>
 800bd8a:	f104 000b 	add.w	r0, r4, #11
 800bd8e:	1d23      	adds	r3, r4, #4
 800bd90:	f020 0007 	bic.w	r0, r0, #7
 800bd94:	1ac2      	subs	r2, r0, r3
 800bd96:	bf1c      	itt	ne
 800bd98:	1a1b      	subne	r3, r3, r0
 800bd9a:	50a3      	strne	r3, [r4, r2]
 800bd9c:	e7af      	b.n	800bcfe <_malloc_r+0x22>
 800bd9e:	6862      	ldr	r2, [r4, #4]
 800bda0:	42a3      	cmp	r3, r4
 800bda2:	bf0c      	ite	eq
 800bda4:	f8c8 2000 	streq.w	r2, [r8]
 800bda8:	605a      	strne	r2, [r3, #4]
 800bdaa:	e7eb      	b.n	800bd84 <_malloc_r+0xa8>
 800bdac:	4623      	mov	r3, r4
 800bdae:	6864      	ldr	r4, [r4, #4]
 800bdb0:	e7ae      	b.n	800bd10 <_malloc_r+0x34>
 800bdb2:	463c      	mov	r4, r7
 800bdb4:	687f      	ldr	r7, [r7, #4]
 800bdb6:	e7b6      	b.n	800bd26 <_malloc_r+0x4a>
 800bdb8:	461a      	mov	r2, r3
 800bdba:	685b      	ldr	r3, [r3, #4]
 800bdbc:	42a3      	cmp	r3, r4
 800bdbe:	d1fb      	bne.n	800bdb8 <_malloc_r+0xdc>
 800bdc0:	2300      	movs	r3, #0
 800bdc2:	6053      	str	r3, [r2, #4]
 800bdc4:	e7de      	b.n	800bd84 <_malloc_r+0xa8>
 800bdc6:	230c      	movs	r3, #12
 800bdc8:	6033      	str	r3, [r6, #0]
 800bdca:	4630      	mov	r0, r6
 800bdcc:	f000 f81e 	bl	800be0c <__malloc_unlock>
 800bdd0:	e794      	b.n	800bcfc <_malloc_r+0x20>
 800bdd2:	6005      	str	r5, [r0, #0]
 800bdd4:	e7d6      	b.n	800bd84 <_malloc_r+0xa8>
 800bdd6:	bf00      	nop
 800bdd8:	20000794 	.word	0x20000794

0800bddc <__ascii_mbtowc>:
 800bddc:	b082      	sub	sp, #8
 800bdde:	b901      	cbnz	r1, 800bde2 <__ascii_mbtowc+0x6>
 800bde0:	a901      	add	r1, sp, #4
 800bde2:	b142      	cbz	r2, 800bdf6 <__ascii_mbtowc+0x1a>
 800bde4:	b14b      	cbz	r3, 800bdfa <__ascii_mbtowc+0x1e>
 800bde6:	7813      	ldrb	r3, [r2, #0]
 800bde8:	600b      	str	r3, [r1, #0]
 800bdea:	7812      	ldrb	r2, [r2, #0]
 800bdec:	1e10      	subs	r0, r2, #0
 800bdee:	bf18      	it	ne
 800bdf0:	2001      	movne	r0, #1
 800bdf2:	b002      	add	sp, #8
 800bdf4:	4770      	bx	lr
 800bdf6:	4610      	mov	r0, r2
 800bdf8:	e7fb      	b.n	800bdf2 <__ascii_mbtowc+0x16>
 800bdfa:	f06f 0001 	mvn.w	r0, #1
 800bdfe:	e7f8      	b.n	800bdf2 <__ascii_mbtowc+0x16>

0800be00 <__malloc_lock>:
 800be00:	4801      	ldr	r0, [pc, #4]	@ (800be08 <__malloc_lock+0x8>)
 800be02:	f7ff bbac 	b.w	800b55e <__retarget_lock_acquire_recursive>
 800be06:	bf00      	nop
 800be08:	2000078c 	.word	0x2000078c

0800be0c <__malloc_unlock>:
 800be0c:	4801      	ldr	r0, [pc, #4]	@ (800be14 <__malloc_unlock+0x8>)
 800be0e:	f7ff bba7 	b.w	800b560 <__retarget_lock_release_recursive>
 800be12:	bf00      	nop
 800be14:	2000078c 	.word	0x2000078c

0800be18 <_Balloc>:
 800be18:	b570      	push	{r4, r5, r6, lr}
 800be1a:	69c6      	ldr	r6, [r0, #28]
 800be1c:	4604      	mov	r4, r0
 800be1e:	460d      	mov	r5, r1
 800be20:	b976      	cbnz	r6, 800be40 <_Balloc+0x28>
 800be22:	2010      	movs	r0, #16
 800be24:	f001 fa7a 	bl	800d31c <malloc>
 800be28:	4602      	mov	r2, r0
 800be2a:	61e0      	str	r0, [r4, #28]
 800be2c:	b920      	cbnz	r0, 800be38 <_Balloc+0x20>
 800be2e:	4b18      	ldr	r3, [pc, #96]	@ (800be90 <_Balloc+0x78>)
 800be30:	4818      	ldr	r0, [pc, #96]	@ (800be94 <_Balloc+0x7c>)
 800be32:	216b      	movs	r1, #107	@ 0x6b
 800be34:	f001 fa40 	bl	800d2b8 <__assert_func>
 800be38:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800be3c:	6006      	str	r6, [r0, #0]
 800be3e:	60c6      	str	r6, [r0, #12]
 800be40:	69e6      	ldr	r6, [r4, #28]
 800be42:	68f3      	ldr	r3, [r6, #12]
 800be44:	b183      	cbz	r3, 800be68 <_Balloc+0x50>
 800be46:	69e3      	ldr	r3, [r4, #28]
 800be48:	68db      	ldr	r3, [r3, #12]
 800be4a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800be4e:	b9b8      	cbnz	r0, 800be80 <_Balloc+0x68>
 800be50:	2101      	movs	r1, #1
 800be52:	fa01 f605 	lsl.w	r6, r1, r5
 800be56:	1d72      	adds	r2, r6, #5
 800be58:	0092      	lsls	r2, r2, #2
 800be5a:	4620      	mov	r0, r4
 800be5c:	f001 fa4a 	bl	800d2f4 <_calloc_r>
 800be60:	b160      	cbz	r0, 800be7c <_Balloc+0x64>
 800be62:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800be66:	e00e      	b.n	800be86 <_Balloc+0x6e>
 800be68:	2221      	movs	r2, #33	@ 0x21
 800be6a:	2104      	movs	r1, #4
 800be6c:	4620      	mov	r0, r4
 800be6e:	f001 fa41 	bl	800d2f4 <_calloc_r>
 800be72:	69e3      	ldr	r3, [r4, #28]
 800be74:	60f0      	str	r0, [r6, #12]
 800be76:	68db      	ldr	r3, [r3, #12]
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d1e4      	bne.n	800be46 <_Balloc+0x2e>
 800be7c:	2000      	movs	r0, #0
 800be7e:	bd70      	pop	{r4, r5, r6, pc}
 800be80:	6802      	ldr	r2, [r0, #0]
 800be82:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800be86:	2300      	movs	r3, #0
 800be88:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800be8c:	e7f7      	b.n	800be7e <_Balloc+0x66>
 800be8e:	bf00      	nop
 800be90:	0800db8a 	.word	0x0800db8a
 800be94:	0800dba1 	.word	0x0800dba1

0800be98 <_Bfree>:
 800be98:	b570      	push	{r4, r5, r6, lr}
 800be9a:	69c6      	ldr	r6, [r0, #28]
 800be9c:	4605      	mov	r5, r0
 800be9e:	460c      	mov	r4, r1
 800bea0:	b976      	cbnz	r6, 800bec0 <_Bfree+0x28>
 800bea2:	2010      	movs	r0, #16
 800bea4:	f001 fa3a 	bl	800d31c <malloc>
 800bea8:	4602      	mov	r2, r0
 800beaa:	61e8      	str	r0, [r5, #28]
 800beac:	b920      	cbnz	r0, 800beb8 <_Bfree+0x20>
 800beae:	4b09      	ldr	r3, [pc, #36]	@ (800bed4 <_Bfree+0x3c>)
 800beb0:	4809      	ldr	r0, [pc, #36]	@ (800bed8 <_Bfree+0x40>)
 800beb2:	218f      	movs	r1, #143	@ 0x8f
 800beb4:	f001 fa00 	bl	800d2b8 <__assert_func>
 800beb8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bebc:	6006      	str	r6, [r0, #0]
 800bebe:	60c6      	str	r6, [r0, #12]
 800bec0:	b13c      	cbz	r4, 800bed2 <_Bfree+0x3a>
 800bec2:	69eb      	ldr	r3, [r5, #28]
 800bec4:	6862      	ldr	r2, [r4, #4]
 800bec6:	68db      	ldr	r3, [r3, #12]
 800bec8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800becc:	6021      	str	r1, [r4, #0]
 800bece:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bed2:	bd70      	pop	{r4, r5, r6, pc}
 800bed4:	0800db8a 	.word	0x0800db8a
 800bed8:	0800dba1 	.word	0x0800dba1

0800bedc <__multadd>:
 800bedc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bee0:	690d      	ldr	r5, [r1, #16]
 800bee2:	4607      	mov	r7, r0
 800bee4:	460c      	mov	r4, r1
 800bee6:	461e      	mov	r6, r3
 800bee8:	f101 0c14 	add.w	ip, r1, #20
 800beec:	2000      	movs	r0, #0
 800beee:	f8dc 3000 	ldr.w	r3, [ip]
 800bef2:	b299      	uxth	r1, r3
 800bef4:	fb02 6101 	mla	r1, r2, r1, r6
 800bef8:	0c1e      	lsrs	r6, r3, #16
 800befa:	0c0b      	lsrs	r3, r1, #16
 800befc:	fb02 3306 	mla	r3, r2, r6, r3
 800bf00:	b289      	uxth	r1, r1
 800bf02:	3001      	adds	r0, #1
 800bf04:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bf08:	4285      	cmp	r5, r0
 800bf0a:	f84c 1b04 	str.w	r1, [ip], #4
 800bf0e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bf12:	dcec      	bgt.n	800beee <__multadd+0x12>
 800bf14:	b30e      	cbz	r6, 800bf5a <__multadd+0x7e>
 800bf16:	68a3      	ldr	r3, [r4, #8]
 800bf18:	42ab      	cmp	r3, r5
 800bf1a:	dc19      	bgt.n	800bf50 <__multadd+0x74>
 800bf1c:	6861      	ldr	r1, [r4, #4]
 800bf1e:	4638      	mov	r0, r7
 800bf20:	3101      	adds	r1, #1
 800bf22:	f7ff ff79 	bl	800be18 <_Balloc>
 800bf26:	4680      	mov	r8, r0
 800bf28:	b928      	cbnz	r0, 800bf36 <__multadd+0x5a>
 800bf2a:	4602      	mov	r2, r0
 800bf2c:	4b0c      	ldr	r3, [pc, #48]	@ (800bf60 <__multadd+0x84>)
 800bf2e:	480d      	ldr	r0, [pc, #52]	@ (800bf64 <__multadd+0x88>)
 800bf30:	21ba      	movs	r1, #186	@ 0xba
 800bf32:	f001 f9c1 	bl	800d2b8 <__assert_func>
 800bf36:	6922      	ldr	r2, [r4, #16]
 800bf38:	3202      	adds	r2, #2
 800bf3a:	f104 010c 	add.w	r1, r4, #12
 800bf3e:	0092      	lsls	r2, r2, #2
 800bf40:	300c      	adds	r0, #12
 800bf42:	f7ff fb0e 	bl	800b562 <memcpy>
 800bf46:	4621      	mov	r1, r4
 800bf48:	4638      	mov	r0, r7
 800bf4a:	f7ff ffa5 	bl	800be98 <_Bfree>
 800bf4e:	4644      	mov	r4, r8
 800bf50:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800bf54:	3501      	adds	r5, #1
 800bf56:	615e      	str	r6, [r3, #20]
 800bf58:	6125      	str	r5, [r4, #16]
 800bf5a:	4620      	mov	r0, r4
 800bf5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf60:	0800db19 	.word	0x0800db19
 800bf64:	0800dba1 	.word	0x0800dba1

0800bf68 <__s2b>:
 800bf68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bf6c:	460c      	mov	r4, r1
 800bf6e:	4615      	mov	r5, r2
 800bf70:	461f      	mov	r7, r3
 800bf72:	2209      	movs	r2, #9
 800bf74:	3308      	adds	r3, #8
 800bf76:	4606      	mov	r6, r0
 800bf78:	fb93 f3f2 	sdiv	r3, r3, r2
 800bf7c:	2100      	movs	r1, #0
 800bf7e:	2201      	movs	r2, #1
 800bf80:	429a      	cmp	r2, r3
 800bf82:	db09      	blt.n	800bf98 <__s2b+0x30>
 800bf84:	4630      	mov	r0, r6
 800bf86:	f7ff ff47 	bl	800be18 <_Balloc>
 800bf8a:	b940      	cbnz	r0, 800bf9e <__s2b+0x36>
 800bf8c:	4602      	mov	r2, r0
 800bf8e:	4b19      	ldr	r3, [pc, #100]	@ (800bff4 <__s2b+0x8c>)
 800bf90:	4819      	ldr	r0, [pc, #100]	@ (800bff8 <__s2b+0x90>)
 800bf92:	21d3      	movs	r1, #211	@ 0xd3
 800bf94:	f001 f990 	bl	800d2b8 <__assert_func>
 800bf98:	0052      	lsls	r2, r2, #1
 800bf9a:	3101      	adds	r1, #1
 800bf9c:	e7f0      	b.n	800bf80 <__s2b+0x18>
 800bf9e:	9b08      	ldr	r3, [sp, #32]
 800bfa0:	6143      	str	r3, [r0, #20]
 800bfa2:	2d09      	cmp	r5, #9
 800bfa4:	f04f 0301 	mov.w	r3, #1
 800bfa8:	6103      	str	r3, [r0, #16]
 800bfaa:	dd16      	ble.n	800bfda <__s2b+0x72>
 800bfac:	f104 0909 	add.w	r9, r4, #9
 800bfb0:	46c8      	mov	r8, r9
 800bfb2:	442c      	add	r4, r5
 800bfb4:	f818 3b01 	ldrb.w	r3, [r8], #1
 800bfb8:	4601      	mov	r1, r0
 800bfba:	3b30      	subs	r3, #48	@ 0x30
 800bfbc:	220a      	movs	r2, #10
 800bfbe:	4630      	mov	r0, r6
 800bfc0:	f7ff ff8c 	bl	800bedc <__multadd>
 800bfc4:	45a0      	cmp	r8, r4
 800bfc6:	d1f5      	bne.n	800bfb4 <__s2b+0x4c>
 800bfc8:	f1a5 0408 	sub.w	r4, r5, #8
 800bfcc:	444c      	add	r4, r9
 800bfce:	1b2d      	subs	r5, r5, r4
 800bfd0:	1963      	adds	r3, r4, r5
 800bfd2:	42bb      	cmp	r3, r7
 800bfd4:	db04      	blt.n	800bfe0 <__s2b+0x78>
 800bfd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bfda:	340a      	adds	r4, #10
 800bfdc:	2509      	movs	r5, #9
 800bfde:	e7f6      	b.n	800bfce <__s2b+0x66>
 800bfe0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800bfe4:	4601      	mov	r1, r0
 800bfe6:	3b30      	subs	r3, #48	@ 0x30
 800bfe8:	220a      	movs	r2, #10
 800bfea:	4630      	mov	r0, r6
 800bfec:	f7ff ff76 	bl	800bedc <__multadd>
 800bff0:	e7ee      	b.n	800bfd0 <__s2b+0x68>
 800bff2:	bf00      	nop
 800bff4:	0800db19 	.word	0x0800db19
 800bff8:	0800dba1 	.word	0x0800dba1

0800bffc <__hi0bits>:
 800bffc:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800c000:	4603      	mov	r3, r0
 800c002:	bf36      	itet	cc
 800c004:	0403      	lslcc	r3, r0, #16
 800c006:	2000      	movcs	r0, #0
 800c008:	2010      	movcc	r0, #16
 800c00a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c00e:	bf3c      	itt	cc
 800c010:	021b      	lslcc	r3, r3, #8
 800c012:	3008      	addcc	r0, #8
 800c014:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c018:	bf3c      	itt	cc
 800c01a:	011b      	lslcc	r3, r3, #4
 800c01c:	3004      	addcc	r0, #4
 800c01e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c022:	bf3c      	itt	cc
 800c024:	009b      	lslcc	r3, r3, #2
 800c026:	3002      	addcc	r0, #2
 800c028:	2b00      	cmp	r3, #0
 800c02a:	db05      	blt.n	800c038 <__hi0bits+0x3c>
 800c02c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800c030:	f100 0001 	add.w	r0, r0, #1
 800c034:	bf08      	it	eq
 800c036:	2020      	moveq	r0, #32
 800c038:	4770      	bx	lr

0800c03a <__lo0bits>:
 800c03a:	6803      	ldr	r3, [r0, #0]
 800c03c:	4602      	mov	r2, r0
 800c03e:	f013 0007 	ands.w	r0, r3, #7
 800c042:	d00b      	beq.n	800c05c <__lo0bits+0x22>
 800c044:	07d9      	lsls	r1, r3, #31
 800c046:	d421      	bmi.n	800c08c <__lo0bits+0x52>
 800c048:	0798      	lsls	r0, r3, #30
 800c04a:	bf49      	itett	mi
 800c04c:	085b      	lsrmi	r3, r3, #1
 800c04e:	089b      	lsrpl	r3, r3, #2
 800c050:	2001      	movmi	r0, #1
 800c052:	6013      	strmi	r3, [r2, #0]
 800c054:	bf5c      	itt	pl
 800c056:	6013      	strpl	r3, [r2, #0]
 800c058:	2002      	movpl	r0, #2
 800c05a:	4770      	bx	lr
 800c05c:	b299      	uxth	r1, r3
 800c05e:	b909      	cbnz	r1, 800c064 <__lo0bits+0x2a>
 800c060:	0c1b      	lsrs	r3, r3, #16
 800c062:	2010      	movs	r0, #16
 800c064:	b2d9      	uxtb	r1, r3
 800c066:	b909      	cbnz	r1, 800c06c <__lo0bits+0x32>
 800c068:	3008      	adds	r0, #8
 800c06a:	0a1b      	lsrs	r3, r3, #8
 800c06c:	0719      	lsls	r1, r3, #28
 800c06e:	bf04      	itt	eq
 800c070:	091b      	lsreq	r3, r3, #4
 800c072:	3004      	addeq	r0, #4
 800c074:	0799      	lsls	r1, r3, #30
 800c076:	bf04      	itt	eq
 800c078:	089b      	lsreq	r3, r3, #2
 800c07a:	3002      	addeq	r0, #2
 800c07c:	07d9      	lsls	r1, r3, #31
 800c07e:	d403      	bmi.n	800c088 <__lo0bits+0x4e>
 800c080:	085b      	lsrs	r3, r3, #1
 800c082:	f100 0001 	add.w	r0, r0, #1
 800c086:	d003      	beq.n	800c090 <__lo0bits+0x56>
 800c088:	6013      	str	r3, [r2, #0]
 800c08a:	4770      	bx	lr
 800c08c:	2000      	movs	r0, #0
 800c08e:	4770      	bx	lr
 800c090:	2020      	movs	r0, #32
 800c092:	4770      	bx	lr

0800c094 <__i2b>:
 800c094:	b510      	push	{r4, lr}
 800c096:	460c      	mov	r4, r1
 800c098:	2101      	movs	r1, #1
 800c09a:	f7ff febd 	bl	800be18 <_Balloc>
 800c09e:	4602      	mov	r2, r0
 800c0a0:	b928      	cbnz	r0, 800c0ae <__i2b+0x1a>
 800c0a2:	4b05      	ldr	r3, [pc, #20]	@ (800c0b8 <__i2b+0x24>)
 800c0a4:	4805      	ldr	r0, [pc, #20]	@ (800c0bc <__i2b+0x28>)
 800c0a6:	f240 1145 	movw	r1, #325	@ 0x145
 800c0aa:	f001 f905 	bl	800d2b8 <__assert_func>
 800c0ae:	2301      	movs	r3, #1
 800c0b0:	6144      	str	r4, [r0, #20]
 800c0b2:	6103      	str	r3, [r0, #16]
 800c0b4:	bd10      	pop	{r4, pc}
 800c0b6:	bf00      	nop
 800c0b8:	0800db19 	.word	0x0800db19
 800c0bc:	0800dba1 	.word	0x0800dba1

0800c0c0 <__multiply>:
 800c0c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0c4:	4614      	mov	r4, r2
 800c0c6:	690a      	ldr	r2, [r1, #16]
 800c0c8:	6923      	ldr	r3, [r4, #16]
 800c0ca:	429a      	cmp	r2, r3
 800c0cc:	bfa8      	it	ge
 800c0ce:	4623      	movge	r3, r4
 800c0d0:	460f      	mov	r7, r1
 800c0d2:	bfa4      	itt	ge
 800c0d4:	460c      	movge	r4, r1
 800c0d6:	461f      	movge	r7, r3
 800c0d8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800c0dc:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800c0e0:	68a3      	ldr	r3, [r4, #8]
 800c0e2:	6861      	ldr	r1, [r4, #4]
 800c0e4:	eb0a 0609 	add.w	r6, sl, r9
 800c0e8:	42b3      	cmp	r3, r6
 800c0ea:	b085      	sub	sp, #20
 800c0ec:	bfb8      	it	lt
 800c0ee:	3101      	addlt	r1, #1
 800c0f0:	f7ff fe92 	bl	800be18 <_Balloc>
 800c0f4:	b930      	cbnz	r0, 800c104 <__multiply+0x44>
 800c0f6:	4602      	mov	r2, r0
 800c0f8:	4b44      	ldr	r3, [pc, #272]	@ (800c20c <__multiply+0x14c>)
 800c0fa:	4845      	ldr	r0, [pc, #276]	@ (800c210 <__multiply+0x150>)
 800c0fc:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800c100:	f001 f8da 	bl	800d2b8 <__assert_func>
 800c104:	f100 0514 	add.w	r5, r0, #20
 800c108:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c10c:	462b      	mov	r3, r5
 800c10e:	2200      	movs	r2, #0
 800c110:	4543      	cmp	r3, r8
 800c112:	d321      	bcc.n	800c158 <__multiply+0x98>
 800c114:	f107 0114 	add.w	r1, r7, #20
 800c118:	f104 0214 	add.w	r2, r4, #20
 800c11c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800c120:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800c124:	9302      	str	r3, [sp, #8]
 800c126:	1b13      	subs	r3, r2, r4
 800c128:	3b15      	subs	r3, #21
 800c12a:	f023 0303 	bic.w	r3, r3, #3
 800c12e:	3304      	adds	r3, #4
 800c130:	f104 0715 	add.w	r7, r4, #21
 800c134:	42ba      	cmp	r2, r7
 800c136:	bf38      	it	cc
 800c138:	2304      	movcc	r3, #4
 800c13a:	9301      	str	r3, [sp, #4]
 800c13c:	9b02      	ldr	r3, [sp, #8]
 800c13e:	9103      	str	r1, [sp, #12]
 800c140:	428b      	cmp	r3, r1
 800c142:	d80c      	bhi.n	800c15e <__multiply+0x9e>
 800c144:	2e00      	cmp	r6, #0
 800c146:	dd03      	ble.n	800c150 <__multiply+0x90>
 800c148:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d05b      	beq.n	800c208 <__multiply+0x148>
 800c150:	6106      	str	r6, [r0, #16]
 800c152:	b005      	add	sp, #20
 800c154:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c158:	f843 2b04 	str.w	r2, [r3], #4
 800c15c:	e7d8      	b.n	800c110 <__multiply+0x50>
 800c15e:	f8b1 a000 	ldrh.w	sl, [r1]
 800c162:	f1ba 0f00 	cmp.w	sl, #0
 800c166:	d024      	beq.n	800c1b2 <__multiply+0xf2>
 800c168:	f104 0e14 	add.w	lr, r4, #20
 800c16c:	46a9      	mov	r9, r5
 800c16e:	f04f 0c00 	mov.w	ip, #0
 800c172:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c176:	f8d9 3000 	ldr.w	r3, [r9]
 800c17a:	fa1f fb87 	uxth.w	fp, r7
 800c17e:	b29b      	uxth	r3, r3
 800c180:	fb0a 330b 	mla	r3, sl, fp, r3
 800c184:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800c188:	f8d9 7000 	ldr.w	r7, [r9]
 800c18c:	4463      	add	r3, ip
 800c18e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c192:	fb0a c70b 	mla	r7, sl, fp, ip
 800c196:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800c19a:	b29b      	uxth	r3, r3
 800c19c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c1a0:	4572      	cmp	r2, lr
 800c1a2:	f849 3b04 	str.w	r3, [r9], #4
 800c1a6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c1aa:	d8e2      	bhi.n	800c172 <__multiply+0xb2>
 800c1ac:	9b01      	ldr	r3, [sp, #4]
 800c1ae:	f845 c003 	str.w	ip, [r5, r3]
 800c1b2:	9b03      	ldr	r3, [sp, #12]
 800c1b4:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800c1b8:	3104      	adds	r1, #4
 800c1ba:	f1b9 0f00 	cmp.w	r9, #0
 800c1be:	d021      	beq.n	800c204 <__multiply+0x144>
 800c1c0:	682b      	ldr	r3, [r5, #0]
 800c1c2:	f104 0c14 	add.w	ip, r4, #20
 800c1c6:	46ae      	mov	lr, r5
 800c1c8:	f04f 0a00 	mov.w	sl, #0
 800c1cc:	f8bc b000 	ldrh.w	fp, [ip]
 800c1d0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800c1d4:	fb09 770b 	mla	r7, r9, fp, r7
 800c1d8:	4457      	add	r7, sl
 800c1da:	b29b      	uxth	r3, r3
 800c1dc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c1e0:	f84e 3b04 	str.w	r3, [lr], #4
 800c1e4:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c1e8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c1ec:	f8be 3000 	ldrh.w	r3, [lr]
 800c1f0:	fb09 330a 	mla	r3, r9, sl, r3
 800c1f4:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800c1f8:	4562      	cmp	r2, ip
 800c1fa:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c1fe:	d8e5      	bhi.n	800c1cc <__multiply+0x10c>
 800c200:	9f01      	ldr	r7, [sp, #4]
 800c202:	51eb      	str	r3, [r5, r7]
 800c204:	3504      	adds	r5, #4
 800c206:	e799      	b.n	800c13c <__multiply+0x7c>
 800c208:	3e01      	subs	r6, #1
 800c20a:	e79b      	b.n	800c144 <__multiply+0x84>
 800c20c:	0800db19 	.word	0x0800db19
 800c210:	0800dba1 	.word	0x0800dba1

0800c214 <__pow5mult>:
 800c214:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c218:	4615      	mov	r5, r2
 800c21a:	f012 0203 	ands.w	r2, r2, #3
 800c21e:	4607      	mov	r7, r0
 800c220:	460e      	mov	r6, r1
 800c222:	d007      	beq.n	800c234 <__pow5mult+0x20>
 800c224:	4c25      	ldr	r4, [pc, #148]	@ (800c2bc <__pow5mult+0xa8>)
 800c226:	3a01      	subs	r2, #1
 800c228:	2300      	movs	r3, #0
 800c22a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c22e:	f7ff fe55 	bl	800bedc <__multadd>
 800c232:	4606      	mov	r6, r0
 800c234:	10ad      	asrs	r5, r5, #2
 800c236:	d03d      	beq.n	800c2b4 <__pow5mult+0xa0>
 800c238:	69fc      	ldr	r4, [r7, #28]
 800c23a:	b97c      	cbnz	r4, 800c25c <__pow5mult+0x48>
 800c23c:	2010      	movs	r0, #16
 800c23e:	f001 f86d 	bl	800d31c <malloc>
 800c242:	4602      	mov	r2, r0
 800c244:	61f8      	str	r0, [r7, #28]
 800c246:	b928      	cbnz	r0, 800c254 <__pow5mult+0x40>
 800c248:	4b1d      	ldr	r3, [pc, #116]	@ (800c2c0 <__pow5mult+0xac>)
 800c24a:	481e      	ldr	r0, [pc, #120]	@ (800c2c4 <__pow5mult+0xb0>)
 800c24c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800c250:	f001 f832 	bl	800d2b8 <__assert_func>
 800c254:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c258:	6004      	str	r4, [r0, #0]
 800c25a:	60c4      	str	r4, [r0, #12]
 800c25c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800c260:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c264:	b94c      	cbnz	r4, 800c27a <__pow5mult+0x66>
 800c266:	f240 2171 	movw	r1, #625	@ 0x271
 800c26a:	4638      	mov	r0, r7
 800c26c:	f7ff ff12 	bl	800c094 <__i2b>
 800c270:	2300      	movs	r3, #0
 800c272:	f8c8 0008 	str.w	r0, [r8, #8]
 800c276:	4604      	mov	r4, r0
 800c278:	6003      	str	r3, [r0, #0]
 800c27a:	f04f 0900 	mov.w	r9, #0
 800c27e:	07eb      	lsls	r3, r5, #31
 800c280:	d50a      	bpl.n	800c298 <__pow5mult+0x84>
 800c282:	4631      	mov	r1, r6
 800c284:	4622      	mov	r2, r4
 800c286:	4638      	mov	r0, r7
 800c288:	f7ff ff1a 	bl	800c0c0 <__multiply>
 800c28c:	4631      	mov	r1, r6
 800c28e:	4680      	mov	r8, r0
 800c290:	4638      	mov	r0, r7
 800c292:	f7ff fe01 	bl	800be98 <_Bfree>
 800c296:	4646      	mov	r6, r8
 800c298:	106d      	asrs	r5, r5, #1
 800c29a:	d00b      	beq.n	800c2b4 <__pow5mult+0xa0>
 800c29c:	6820      	ldr	r0, [r4, #0]
 800c29e:	b938      	cbnz	r0, 800c2b0 <__pow5mult+0x9c>
 800c2a0:	4622      	mov	r2, r4
 800c2a2:	4621      	mov	r1, r4
 800c2a4:	4638      	mov	r0, r7
 800c2a6:	f7ff ff0b 	bl	800c0c0 <__multiply>
 800c2aa:	6020      	str	r0, [r4, #0]
 800c2ac:	f8c0 9000 	str.w	r9, [r0]
 800c2b0:	4604      	mov	r4, r0
 800c2b2:	e7e4      	b.n	800c27e <__pow5mult+0x6a>
 800c2b4:	4630      	mov	r0, r6
 800c2b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c2ba:	bf00      	nop
 800c2bc:	0800dbfc 	.word	0x0800dbfc
 800c2c0:	0800db8a 	.word	0x0800db8a
 800c2c4:	0800dba1 	.word	0x0800dba1

0800c2c8 <__lshift>:
 800c2c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c2cc:	460c      	mov	r4, r1
 800c2ce:	6849      	ldr	r1, [r1, #4]
 800c2d0:	6923      	ldr	r3, [r4, #16]
 800c2d2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c2d6:	68a3      	ldr	r3, [r4, #8]
 800c2d8:	4607      	mov	r7, r0
 800c2da:	4691      	mov	r9, r2
 800c2dc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c2e0:	f108 0601 	add.w	r6, r8, #1
 800c2e4:	42b3      	cmp	r3, r6
 800c2e6:	db0b      	blt.n	800c300 <__lshift+0x38>
 800c2e8:	4638      	mov	r0, r7
 800c2ea:	f7ff fd95 	bl	800be18 <_Balloc>
 800c2ee:	4605      	mov	r5, r0
 800c2f0:	b948      	cbnz	r0, 800c306 <__lshift+0x3e>
 800c2f2:	4602      	mov	r2, r0
 800c2f4:	4b28      	ldr	r3, [pc, #160]	@ (800c398 <__lshift+0xd0>)
 800c2f6:	4829      	ldr	r0, [pc, #164]	@ (800c39c <__lshift+0xd4>)
 800c2f8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800c2fc:	f000 ffdc 	bl	800d2b8 <__assert_func>
 800c300:	3101      	adds	r1, #1
 800c302:	005b      	lsls	r3, r3, #1
 800c304:	e7ee      	b.n	800c2e4 <__lshift+0x1c>
 800c306:	2300      	movs	r3, #0
 800c308:	f100 0114 	add.w	r1, r0, #20
 800c30c:	f100 0210 	add.w	r2, r0, #16
 800c310:	4618      	mov	r0, r3
 800c312:	4553      	cmp	r3, sl
 800c314:	db33      	blt.n	800c37e <__lshift+0xb6>
 800c316:	6920      	ldr	r0, [r4, #16]
 800c318:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c31c:	f104 0314 	add.w	r3, r4, #20
 800c320:	f019 091f 	ands.w	r9, r9, #31
 800c324:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c328:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c32c:	d02b      	beq.n	800c386 <__lshift+0xbe>
 800c32e:	f1c9 0e20 	rsb	lr, r9, #32
 800c332:	468a      	mov	sl, r1
 800c334:	2200      	movs	r2, #0
 800c336:	6818      	ldr	r0, [r3, #0]
 800c338:	fa00 f009 	lsl.w	r0, r0, r9
 800c33c:	4310      	orrs	r0, r2
 800c33e:	f84a 0b04 	str.w	r0, [sl], #4
 800c342:	f853 2b04 	ldr.w	r2, [r3], #4
 800c346:	459c      	cmp	ip, r3
 800c348:	fa22 f20e 	lsr.w	r2, r2, lr
 800c34c:	d8f3      	bhi.n	800c336 <__lshift+0x6e>
 800c34e:	ebac 0304 	sub.w	r3, ip, r4
 800c352:	3b15      	subs	r3, #21
 800c354:	f023 0303 	bic.w	r3, r3, #3
 800c358:	3304      	adds	r3, #4
 800c35a:	f104 0015 	add.w	r0, r4, #21
 800c35e:	4584      	cmp	ip, r0
 800c360:	bf38      	it	cc
 800c362:	2304      	movcc	r3, #4
 800c364:	50ca      	str	r2, [r1, r3]
 800c366:	b10a      	cbz	r2, 800c36c <__lshift+0xa4>
 800c368:	f108 0602 	add.w	r6, r8, #2
 800c36c:	3e01      	subs	r6, #1
 800c36e:	4638      	mov	r0, r7
 800c370:	612e      	str	r6, [r5, #16]
 800c372:	4621      	mov	r1, r4
 800c374:	f7ff fd90 	bl	800be98 <_Bfree>
 800c378:	4628      	mov	r0, r5
 800c37a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c37e:	f842 0f04 	str.w	r0, [r2, #4]!
 800c382:	3301      	adds	r3, #1
 800c384:	e7c5      	b.n	800c312 <__lshift+0x4a>
 800c386:	3904      	subs	r1, #4
 800c388:	f853 2b04 	ldr.w	r2, [r3], #4
 800c38c:	f841 2f04 	str.w	r2, [r1, #4]!
 800c390:	459c      	cmp	ip, r3
 800c392:	d8f9      	bhi.n	800c388 <__lshift+0xc0>
 800c394:	e7ea      	b.n	800c36c <__lshift+0xa4>
 800c396:	bf00      	nop
 800c398:	0800db19 	.word	0x0800db19
 800c39c:	0800dba1 	.word	0x0800dba1

0800c3a0 <__mcmp>:
 800c3a0:	690a      	ldr	r2, [r1, #16]
 800c3a2:	4603      	mov	r3, r0
 800c3a4:	6900      	ldr	r0, [r0, #16]
 800c3a6:	1a80      	subs	r0, r0, r2
 800c3a8:	b530      	push	{r4, r5, lr}
 800c3aa:	d10e      	bne.n	800c3ca <__mcmp+0x2a>
 800c3ac:	3314      	adds	r3, #20
 800c3ae:	3114      	adds	r1, #20
 800c3b0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c3b4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c3b8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c3bc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c3c0:	4295      	cmp	r5, r2
 800c3c2:	d003      	beq.n	800c3cc <__mcmp+0x2c>
 800c3c4:	d205      	bcs.n	800c3d2 <__mcmp+0x32>
 800c3c6:	f04f 30ff 	mov.w	r0, #4294967295
 800c3ca:	bd30      	pop	{r4, r5, pc}
 800c3cc:	42a3      	cmp	r3, r4
 800c3ce:	d3f3      	bcc.n	800c3b8 <__mcmp+0x18>
 800c3d0:	e7fb      	b.n	800c3ca <__mcmp+0x2a>
 800c3d2:	2001      	movs	r0, #1
 800c3d4:	e7f9      	b.n	800c3ca <__mcmp+0x2a>
	...

0800c3d8 <__mdiff>:
 800c3d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3dc:	4689      	mov	r9, r1
 800c3de:	4606      	mov	r6, r0
 800c3e0:	4611      	mov	r1, r2
 800c3e2:	4648      	mov	r0, r9
 800c3e4:	4614      	mov	r4, r2
 800c3e6:	f7ff ffdb 	bl	800c3a0 <__mcmp>
 800c3ea:	1e05      	subs	r5, r0, #0
 800c3ec:	d112      	bne.n	800c414 <__mdiff+0x3c>
 800c3ee:	4629      	mov	r1, r5
 800c3f0:	4630      	mov	r0, r6
 800c3f2:	f7ff fd11 	bl	800be18 <_Balloc>
 800c3f6:	4602      	mov	r2, r0
 800c3f8:	b928      	cbnz	r0, 800c406 <__mdiff+0x2e>
 800c3fa:	4b3f      	ldr	r3, [pc, #252]	@ (800c4f8 <__mdiff+0x120>)
 800c3fc:	f240 2137 	movw	r1, #567	@ 0x237
 800c400:	483e      	ldr	r0, [pc, #248]	@ (800c4fc <__mdiff+0x124>)
 800c402:	f000 ff59 	bl	800d2b8 <__assert_func>
 800c406:	2301      	movs	r3, #1
 800c408:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c40c:	4610      	mov	r0, r2
 800c40e:	b003      	add	sp, #12
 800c410:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c414:	bfbc      	itt	lt
 800c416:	464b      	movlt	r3, r9
 800c418:	46a1      	movlt	r9, r4
 800c41a:	4630      	mov	r0, r6
 800c41c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800c420:	bfba      	itte	lt
 800c422:	461c      	movlt	r4, r3
 800c424:	2501      	movlt	r5, #1
 800c426:	2500      	movge	r5, #0
 800c428:	f7ff fcf6 	bl	800be18 <_Balloc>
 800c42c:	4602      	mov	r2, r0
 800c42e:	b918      	cbnz	r0, 800c438 <__mdiff+0x60>
 800c430:	4b31      	ldr	r3, [pc, #196]	@ (800c4f8 <__mdiff+0x120>)
 800c432:	f240 2145 	movw	r1, #581	@ 0x245
 800c436:	e7e3      	b.n	800c400 <__mdiff+0x28>
 800c438:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800c43c:	6926      	ldr	r6, [r4, #16]
 800c43e:	60c5      	str	r5, [r0, #12]
 800c440:	f109 0310 	add.w	r3, r9, #16
 800c444:	f109 0514 	add.w	r5, r9, #20
 800c448:	f104 0e14 	add.w	lr, r4, #20
 800c44c:	f100 0b14 	add.w	fp, r0, #20
 800c450:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800c454:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800c458:	9301      	str	r3, [sp, #4]
 800c45a:	46d9      	mov	r9, fp
 800c45c:	f04f 0c00 	mov.w	ip, #0
 800c460:	9b01      	ldr	r3, [sp, #4]
 800c462:	f85e 0b04 	ldr.w	r0, [lr], #4
 800c466:	f853 af04 	ldr.w	sl, [r3, #4]!
 800c46a:	9301      	str	r3, [sp, #4]
 800c46c:	fa1f f38a 	uxth.w	r3, sl
 800c470:	4619      	mov	r1, r3
 800c472:	b283      	uxth	r3, r0
 800c474:	1acb      	subs	r3, r1, r3
 800c476:	0c00      	lsrs	r0, r0, #16
 800c478:	4463      	add	r3, ip
 800c47a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800c47e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800c482:	b29b      	uxth	r3, r3
 800c484:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c488:	4576      	cmp	r6, lr
 800c48a:	f849 3b04 	str.w	r3, [r9], #4
 800c48e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c492:	d8e5      	bhi.n	800c460 <__mdiff+0x88>
 800c494:	1b33      	subs	r3, r6, r4
 800c496:	3b15      	subs	r3, #21
 800c498:	f023 0303 	bic.w	r3, r3, #3
 800c49c:	3415      	adds	r4, #21
 800c49e:	3304      	adds	r3, #4
 800c4a0:	42a6      	cmp	r6, r4
 800c4a2:	bf38      	it	cc
 800c4a4:	2304      	movcc	r3, #4
 800c4a6:	441d      	add	r5, r3
 800c4a8:	445b      	add	r3, fp
 800c4aa:	461e      	mov	r6, r3
 800c4ac:	462c      	mov	r4, r5
 800c4ae:	4544      	cmp	r4, r8
 800c4b0:	d30e      	bcc.n	800c4d0 <__mdiff+0xf8>
 800c4b2:	f108 0103 	add.w	r1, r8, #3
 800c4b6:	1b49      	subs	r1, r1, r5
 800c4b8:	f021 0103 	bic.w	r1, r1, #3
 800c4bc:	3d03      	subs	r5, #3
 800c4be:	45a8      	cmp	r8, r5
 800c4c0:	bf38      	it	cc
 800c4c2:	2100      	movcc	r1, #0
 800c4c4:	440b      	add	r3, r1
 800c4c6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c4ca:	b191      	cbz	r1, 800c4f2 <__mdiff+0x11a>
 800c4cc:	6117      	str	r7, [r2, #16]
 800c4ce:	e79d      	b.n	800c40c <__mdiff+0x34>
 800c4d0:	f854 1b04 	ldr.w	r1, [r4], #4
 800c4d4:	46e6      	mov	lr, ip
 800c4d6:	0c08      	lsrs	r0, r1, #16
 800c4d8:	fa1c fc81 	uxtah	ip, ip, r1
 800c4dc:	4471      	add	r1, lr
 800c4de:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800c4e2:	b289      	uxth	r1, r1
 800c4e4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800c4e8:	f846 1b04 	str.w	r1, [r6], #4
 800c4ec:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c4f0:	e7dd      	b.n	800c4ae <__mdiff+0xd6>
 800c4f2:	3f01      	subs	r7, #1
 800c4f4:	e7e7      	b.n	800c4c6 <__mdiff+0xee>
 800c4f6:	bf00      	nop
 800c4f8:	0800db19 	.word	0x0800db19
 800c4fc:	0800dba1 	.word	0x0800dba1

0800c500 <__ulp>:
 800c500:	b082      	sub	sp, #8
 800c502:	ed8d 0b00 	vstr	d0, [sp]
 800c506:	9a01      	ldr	r2, [sp, #4]
 800c508:	4b0f      	ldr	r3, [pc, #60]	@ (800c548 <__ulp+0x48>)
 800c50a:	4013      	ands	r3, r2
 800c50c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800c510:	2b00      	cmp	r3, #0
 800c512:	dc08      	bgt.n	800c526 <__ulp+0x26>
 800c514:	425b      	negs	r3, r3
 800c516:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800c51a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800c51e:	da04      	bge.n	800c52a <__ulp+0x2a>
 800c520:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800c524:	4113      	asrs	r3, r2
 800c526:	2200      	movs	r2, #0
 800c528:	e008      	b.n	800c53c <__ulp+0x3c>
 800c52a:	f1a2 0314 	sub.w	r3, r2, #20
 800c52e:	2b1e      	cmp	r3, #30
 800c530:	bfda      	itte	le
 800c532:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800c536:	40da      	lsrle	r2, r3
 800c538:	2201      	movgt	r2, #1
 800c53a:	2300      	movs	r3, #0
 800c53c:	4619      	mov	r1, r3
 800c53e:	4610      	mov	r0, r2
 800c540:	ec41 0b10 	vmov	d0, r0, r1
 800c544:	b002      	add	sp, #8
 800c546:	4770      	bx	lr
 800c548:	7ff00000 	.word	0x7ff00000

0800c54c <__b2d>:
 800c54c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c550:	6906      	ldr	r6, [r0, #16]
 800c552:	f100 0814 	add.w	r8, r0, #20
 800c556:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800c55a:	1f37      	subs	r7, r6, #4
 800c55c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800c560:	4610      	mov	r0, r2
 800c562:	f7ff fd4b 	bl	800bffc <__hi0bits>
 800c566:	f1c0 0320 	rsb	r3, r0, #32
 800c56a:	280a      	cmp	r0, #10
 800c56c:	600b      	str	r3, [r1, #0]
 800c56e:	491b      	ldr	r1, [pc, #108]	@ (800c5dc <__b2d+0x90>)
 800c570:	dc15      	bgt.n	800c59e <__b2d+0x52>
 800c572:	f1c0 0c0b 	rsb	ip, r0, #11
 800c576:	fa22 f30c 	lsr.w	r3, r2, ip
 800c57a:	45b8      	cmp	r8, r7
 800c57c:	ea43 0501 	orr.w	r5, r3, r1
 800c580:	bf34      	ite	cc
 800c582:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c586:	2300      	movcs	r3, #0
 800c588:	3015      	adds	r0, #21
 800c58a:	fa02 f000 	lsl.w	r0, r2, r0
 800c58e:	fa23 f30c 	lsr.w	r3, r3, ip
 800c592:	4303      	orrs	r3, r0
 800c594:	461c      	mov	r4, r3
 800c596:	ec45 4b10 	vmov	d0, r4, r5
 800c59a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c59e:	45b8      	cmp	r8, r7
 800c5a0:	bf3a      	itte	cc
 800c5a2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c5a6:	f1a6 0708 	subcc.w	r7, r6, #8
 800c5aa:	2300      	movcs	r3, #0
 800c5ac:	380b      	subs	r0, #11
 800c5ae:	d012      	beq.n	800c5d6 <__b2d+0x8a>
 800c5b0:	f1c0 0120 	rsb	r1, r0, #32
 800c5b4:	fa23 f401 	lsr.w	r4, r3, r1
 800c5b8:	4082      	lsls	r2, r0
 800c5ba:	4322      	orrs	r2, r4
 800c5bc:	4547      	cmp	r7, r8
 800c5be:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800c5c2:	bf8c      	ite	hi
 800c5c4:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800c5c8:	2200      	movls	r2, #0
 800c5ca:	4083      	lsls	r3, r0
 800c5cc:	40ca      	lsrs	r2, r1
 800c5ce:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800c5d2:	4313      	orrs	r3, r2
 800c5d4:	e7de      	b.n	800c594 <__b2d+0x48>
 800c5d6:	ea42 0501 	orr.w	r5, r2, r1
 800c5da:	e7db      	b.n	800c594 <__b2d+0x48>
 800c5dc:	3ff00000 	.word	0x3ff00000

0800c5e0 <__d2b>:
 800c5e0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c5e4:	460f      	mov	r7, r1
 800c5e6:	2101      	movs	r1, #1
 800c5e8:	ec59 8b10 	vmov	r8, r9, d0
 800c5ec:	4616      	mov	r6, r2
 800c5ee:	f7ff fc13 	bl	800be18 <_Balloc>
 800c5f2:	4604      	mov	r4, r0
 800c5f4:	b930      	cbnz	r0, 800c604 <__d2b+0x24>
 800c5f6:	4602      	mov	r2, r0
 800c5f8:	4b23      	ldr	r3, [pc, #140]	@ (800c688 <__d2b+0xa8>)
 800c5fa:	4824      	ldr	r0, [pc, #144]	@ (800c68c <__d2b+0xac>)
 800c5fc:	f240 310f 	movw	r1, #783	@ 0x30f
 800c600:	f000 fe5a 	bl	800d2b8 <__assert_func>
 800c604:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c608:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c60c:	b10d      	cbz	r5, 800c612 <__d2b+0x32>
 800c60e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c612:	9301      	str	r3, [sp, #4]
 800c614:	f1b8 0300 	subs.w	r3, r8, #0
 800c618:	d023      	beq.n	800c662 <__d2b+0x82>
 800c61a:	4668      	mov	r0, sp
 800c61c:	9300      	str	r3, [sp, #0]
 800c61e:	f7ff fd0c 	bl	800c03a <__lo0bits>
 800c622:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c626:	b1d0      	cbz	r0, 800c65e <__d2b+0x7e>
 800c628:	f1c0 0320 	rsb	r3, r0, #32
 800c62c:	fa02 f303 	lsl.w	r3, r2, r3
 800c630:	430b      	orrs	r3, r1
 800c632:	40c2      	lsrs	r2, r0
 800c634:	6163      	str	r3, [r4, #20]
 800c636:	9201      	str	r2, [sp, #4]
 800c638:	9b01      	ldr	r3, [sp, #4]
 800c63a:	61a3      	str	r3, [r4, #24]
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	bf0c      	ite	eq
 800c640:	2201      	moveq	r2, #1
 800c642:	2202      	movne	r2, #2
 800c644:	6122      	str	r2, [r4, #16]
 800c646:	b1a5      	cbz	r5, 800c672 <__d2b+0x92>
 800c648:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800c64c:	4405      	add	r5, r0
 800c64e:	603d      	str	r5, [r7, #0]
 800c650:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800c654:	6030      	str	r0, [r6, #0]
 800c656:	4620      	mov	r0, r4
 800c658:	b003      	add	sp, #12
 800c65a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c65e:	6161      	str	r1, [r4, #20]
 800c660:	e7ea      	b.n	800c638 <__d2b+0x58>
 800c662:	a801      	add	r0, sp, #4
 800c664:	f7ff fce9 	bl	800c03a <__lo0bits>
 800c668:	9b01      	ldr	r3, [sp, #4]
 800c66a:	6163      	str	r3, [r4, #20]
 800c66c:	3020      	adds	r0, #32
 800c66e:	2201      	movs	r2, #1
 800c670:	e7e8      	b.n	800c644 <__d2b+0x64>
 800c672:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c676:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800c67a:	6038      	str	r0, [r7, #0]
 800c67c:	6918      	ldr	r0, [r3, #16]
 800c67e:	f7ff fcbd 	bl	800bffc <__hi0bits>
 800c682:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c686:	e7e5      	b.n	800c654 <__d2b+0x74>
 800c688:	0800db19 	.word	0x0800db19
 800c68c:	0800dba1 	.word	0x0800dba1

0800c690 <__ratio>:
 800c690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c694:	b085      	sub	sp, #20
 800c696:	e9cd 1000 	strd	r1, r0, [sp]
 800c69a:	a902      	add	r1, sp, #8
 800c69c:	f7ff ff56 	bl	800c54c <__b2d>
 800c6a0:	9800      	ldr	r0, [sp, #0]
 800c6a2:	a903      	add	r1, sp, #12
 800c6a4:	ec55 4b10 	vmov	r4, r5, d0
 800c6a8:	f7ff ff50 	bl	800c54c <__b2d>
 800c6ac:	9b01      	ldr	r3, [sp, #4]
 800c6ae:	6919      	ldr	r1, [r3, #16]
 800c6b0:	9b00      	ldr	r3, [sp, #0]
 800c6b2:	691b      	ldr	r3, [r3, #16]
 800c6b4:	1ac9      	subs	r1, r1, r3
 800c6b6:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800c6ba:	1a9b      	subs	r3, r3, r2
 800c6bc:	ec5b ab10 	vmov	sl, fp, d0
 800c6c0:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	bfce      	itee	gt
 800c6c8:	462a      	movgt	r2, r5
 800c6ca:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c6ce:	465a      	movle	r2, fp
 800c6d0:	462f      	mov	r7, r5
 800c6d2:	46d9      	mov	r9, fp
 800c6d4:	bfcc      	ite	gt
 800c6d6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c6da:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800c6de:	464b      	mov	r3, r9
 800c6e0:	4652      	mov	r2, sl
 800c6e2:	4620      	mov	r0, r4
 800c6e4:	4639      	mov	r1, r7
 800c6e6:	f7f4 f8c1 	bl	800086c <__aeabi_ddiv>
 800c6ea:	ec41 0b10 	vmov	d0, r0, r1
 800c6ee:	b005      	add	sp, #20
 800c6f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c6f4 <__copybits>:
 800c6f4:	3901      	subs	r1, #1
 800c6f6:	b570      	push	{r4, r5, r6, lr}
 800c6f8:	1149      	asrs	r1, r1, #5
 800c6fa:	6914      	ldr	r4, [r2, #16]
 800c6fc:	3101      	adds	r1, #1
 800c6fe:	f102 0314 	add.w	r3, r2, #20
 800c702:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c706:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c70a:	1f05      	subs	r5, r0, #4
 800c70c:	42a3      	cmp	r3, r4
 800c70e:	d30c      	bcc.n	800c72a <__copybits+0x36>
 800c710:	1aa3      	subs	r3, r4, r2
 800c712:	3b11      	subs	r3, #17
 800c714:	f023 0303 	bic.w	r3, r3, #3
 800c718:	3211      	adds	r2, #17
 800c71a:	42a2      	cmp	r2, r4
 800c71c:	bf88      	it	hi
 800c71e:	2300      	movhi	r3, #0
 800c720:	4418      	add	r0, r3
 800c722:	2300      	movs	r3, #0
 800c724:	4288      	cmp	r0, r1
 800c726:	d305      	bcc.n	800c734 <__copybits+0x40>
 800c728:	bd70      	pop	{r4, r5, r6, pc}
 800c72a:	f853 6b04 	ldr.w	r6, [r3], #4
 800c72e:	f845 6f04 	str.w	r6, [r5, #4]!
 800c732:	e7eb      	b.n	800c70c <__copybits+0x18>
 800c734:	f840 3b04 	str.w	r3, [r0], #4
 800c738:	e7f4      	b.n	800c724 <__copybits+0x30>

0800c73a <__any_on>:
 800c73a:	f100 0214 	add.w	r2, r0, #20
 800c73e:	6900      	ldr	r0, [r0, #16]
 800c740:	114b      	asrs	r3, r1, #5
 800c742:	4298      	cmp	r0, r3
 800c744:	b510      	push	{r4, lr}
 800c746:	db11      	blt.n	800c76c <__any_on+0x32>
 800c748:	dd0a      	ble.n	800c760 <__any_on+0x26>
 800c74a:	f011 011f 	ands.w	r1, r1, #31
 800c74e:	d007      	beq.n	800c760 <__any_on+0x26>
 800c750:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c754:	fa24 f001 	lsr.w	r0, r4, r1
 800c758:	fa00 f101 	lsl.w	r1, r0, r1
 800c75c:	428c      	cmp	r4, r1
 800c75e:	d10b      	bne.n	800c778 <__any_on+0x3e>
 800c760:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c764:	4293      	cmp	r3, r2
 800c766:	d803      	bhi.n	800c770 <__any_on+0x36>
 800c768:	2000      	movs	r0, #0
 800c76a:	bd10      	pop	{r4, pc}
 800c76c:	4603      	mov	r3, r0
 800c76e:	e7f7      	b.n	800c760 <__any_on+0x26>
 800c770:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c774:	2900      	cmp	r1, #0
 800c776:	d0f5      	beq.n	800c764 <__any_on+0x2a>
 800c778:	2001      	movs	r0, #1
 800c77a:	e7f6      	b.n	800c76a <__any_on+0x30>

0800c77c <__ascii_wctomb>:
 800c77c:	4603      	mov	r3, r0
 800c77e:	4608      	mov	r0, r1
 800c780:	b141      	cbz	r1, 800c794 <__ascii_wctomb+0x18>
 800c782:	2aff      	cmp	r2, #255	@ 0xff
 800c784:	d904      	bls.n	800c790 <__ascii_wctomb+0x14>
 800c786:	228a      	movs	r2, #138	@ 0x8a
 800c788:	601a      	str	r2, [r3, #0]
 800c78a:	f04f 30ff 	mov.w	r0, #4294967295
 800c78e:	4770      	bx	lr
 800c790:	700a      	strb	r2, [r1, #0]
 800c792:	2001      	movs	r0, #1
 800c794:	4770      	bx	lr

0800c796 <__ssputs_r>:
 800c796:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c79a:	688e      	ldr	r6, [r1, #8]
 800c79c:	461f      	mov	r7, r3
 800c79e:	42be      	cmp	r6, r7
 800c7a0:	680b      	ldr	r3, [r1, #0]
 800c7a2:	4682      	mov	sl, r0
 800c7a4:	460c      	mov	r4, r1
 800c7a6:	4690      	mov	r8, r2
 800c7a8:	d82d      	bhi.n	800c806 <__ssputs_r+0x70>
 800c7aa:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c7ae:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c7b2:	d026      	beq.n	800c802 <__ssputs_r+0x6c>
 800c7b4:	6965      	ldr	r5, [r4, #20]
 800c7b6:	6909      	ldr	r1, [r1, #16]
 800c7b8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c7bc:	eba3 0901 	sub.w	r9, r3, r1
 800c7c0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c7c4:	1c7b      	adds	r3, r7, #1
 800c7c6:	444b      	add	r3, r9
 800c7c8:	106d      	asrs	r5, r5, #1
 800c7ca:	429d      	cmp	r5, r3
 800c7cc:	bf38      	it	cc
 800c7ce:	461d      	movcc	r5, r3
 800c7d0:	0553      	lsls	r3, r2, #21
 800c7d2:	d527      	bpl.n	800c824 <__ssputs_r+0x8e>
 800c7d4:	4629      	mov	r1, r5
 800c7d6:	f7ff fa81 	bl	800bcdc <_malloc_r>
 800c7da:	4606      	mov	r6, r0
 800c7dc:	b360      	cbz	r0, 800c838 <__ssputs_r+0xa2>
 800c7de:	6921      	ldr	r1, [r4, #16]
 800c7e0:	464a      	mov	r2, r9
 800c7e2:	f7fe febe 	bl	800b562 <memcpy>
 800c7e6:	89a3      	ldrh	r3, [r4, #12]
 800c7e8:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c7ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c7f0:	81a3      	strh	r3, [r4, #12]
 800c7f2:	6126      	str	r6, [r4, #16]
 800c7f4:	6165      	str	r5, [r4, #20]
 800c7f6:	444e      	add	r6, r9
 800c7f8:	eba5 0509 	sub.w	r5, r5, r9
 800c7fc:	6026      	str	r6, [r4, #0]
 800c7fe:	60a5      	str	r5, [r4, #8]
 800c800:	463e      	mov	r6, r7
 800c802:	42be      	cmp	r6, r7
 800c804:	d900      	bls.n	800c808 <__ssputs_r+0x72>
 800c806:	463e      	mov	r6, r7
 800c808:	6820      	ldr	r0, [r4, #0]
 800c80a:	4632      	mov	r2, r6
 800c80c:	4641      	mov	r1, r8
 800c80e:	f000 fd29 	bl	800d264 <memmove>
 800c812:	68a3      	ldr	r3, [r4, #8]
 800c814:	1b9b      	subs	r3, r3, r6
 800c816:	60a3      	str	r3, [r4, #8]
 800c818:	6823      	ldr	r3, [r4, #0]
 800c81a:	4433      	add	r3, r6
 800c81c:	6023      	str	r3, [r4, #0]
 800c81e:	2000      	movs	r0, #0
 800c820:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c824:	462a      	mov	r2, r5
 800c826:	f000 fd81 	bl	800d32c <_realloc_r>
 800c82a:	4606      	mov	r6, r0
 800c82c:	2800      	cmp	r0, #0
 800c82e:	d1e0      	bne.n	800c7f2 <__ssputs_r+0x5c>
 800c830:	6921      	ldr	r1, [r4, #16]
 800c832:	4650      	mov	r0, sl
 800c834:	f7fe feac 	bl	800b590 <_free_r>
 800c838:	230c      	movs	r3, #12
 800c83a:	f8ca 3000 	str.w	r3, [sl]
 800c83e:	89a3      	ldrh	r3, [r4, #12]
 800c840:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c844:	81a3      	strh	r3, [r4, #12]
 800c846:	f04f 30ff 	mov.w	r0, #4294967295
 800c84a:	e7e9      	b.n	800c820 <__ssputs_r+0x8a>

0800c84c <_svfiprintf_r>:
 800c84c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c850:	4698      	mov	r8, r3
 800c852:	898b      	ldrh	r3, [r1, #12]
 800c854:	061b      	lsls	r3, r3, #24
 800c856:	b09d      	sub	sp, #116	@ 0x74
 800c858:	4607      	mov	r7, r0
 800c85a:	460d      	mov	r5, r1
 800c85c:	4614      	mov	r4, r2
 800c85e:	d510      	bpl.n	800c882 <_svfiprintf_r+0x36>
 800c860:	690b      	ldr	r3, [r1, #16]
 800c862:	b973      	cbnz	r3, 800c882 <_svfiprintf_r+0x36>
 800c864:	2140      	movs	r1, #64	@ 0x40
 800c866:	f7ff fa39 	bl	800bcdc <_malloc_r>
 800c86a:	6028      	str	r0, [r5, #0]
 800c86c:	6128      	str	r0, [r5, #16]
 800c86e:	b930      	cbnz	r0, 800c87e <_svfiprintf_r+0x32>
 800c870:	230c      	movs	r3, #12
 800c872:	603b      	str	r3, [r7, #0]
 800c874:	f04f 30ff 	mov.w	r0, #4294967295
 800c878:	b01d      	add	sp, #116	@ 0x74
 800c87a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c87e:	2340      	movs	r3, #64	@ 0x40
 800c880:	616b      	str	r3, [r5, #20]
 800c882:	2300      	movs	r3, #0
 800c884:	9309      	str	r3, [sp, #36]	@ 0x24
 800c886:	2320      	movs	r3, #32
 800c888:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c88c:	f8cd 800c 	str.w	r8, [sp, #12]
 800c890:	2330      	movs	r3, #48	@ 0x30
 800c892:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800ca30 <_svfiprintf_r+0x1e4>
 800c896:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c89a:	f04f 0901 	mov.w	r9, #1
 800c89e:	4623      	mov	r3, r4
 800c8a0:	469a      	mov	sl, r3
 800c8a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c8a6:	b10a      	cbz	r2, 800c8ac <_svfiprintf_r+0x60>
 800c8a8:	2a25      	cmp	r2, #37	@ 0x25
 800c8aa:	d1f9      	bne.n	800c8a0 <_svfiprintf_r+0x54>
 800c8ac:	ebba 0b04 	subs.w	fp, sl, r4
 800c8b0:	d00b      	beq.n	800c8ca <_svfiprintf_r+0x7e>
 800c8b2:	465b      	mov	r3, fp
 800c8b4:	4622      	mov	r2, r4
 800c8b6:	4629      	mov	r1, r5
 800c8b8:	4638      	mov	r0, r7
 800c8ba:	f7ff ff6c 	bl	800c796 <__ssputs_r>
 800c8be:	3001      	adds	r0, #1
 800c8c0:	f000 80a7 	beq.w	800ca12 <_svfiprintf_r+0x1c6>
 800c8c4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c8c6:	445a      	add	r2, fp
 800c8c8:	9209      	str	r2, [sp, #36]	@ 0x24
 800c8ca:	f89a 3000 	ldrb.w	r3, [sl]
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	f000 809f 	beq.w	800ca12 <_svfiprintf_r+0x1c6>
 800c8d4:	2300      	movs	r3, #0
 800c8d6:	f04f 32ff 	mov.w	r2, #4294967295
 800c8da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c8de:	f10a 0a01 	add.w	sl, sl, #1
 800c8e2:	9304      	str	r3, [sp, #16]
 800c8e4:	9307      	str	r3, [sp, #28]
 800c8e6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c8ea:	931a      	str	r3, [sp, #104]	@ 0x68
 800c8ec:	4654      	mov	r4, sl
 800c8ee:	2205      	movs	r2, #5
 800c8f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c8f4:	484e      	ldr	r0, [pc, #312]	@ (800ca30 <_svfiprintf_r+0x1e4>)
 800c8f6:	f7f3 fc83 	bl	8000200 <memchr>
 800c8fa:	9a04      	ldr	r2, [sp, #16]
 800c8fc:	b9d8      	cbnz	r0, 800c936 <_svfiprintf_r+0xea>
 800c8fe:	06d0      	lsls	r0, r2, #27
 800c900:	bf44      	itt	mi
 800c902:	2320      	movmi	r3, #32
 800c904:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c908:	0711      	lsls	r1, r2, #28
 800c90a:	bf44      	itt	mi
 800c90c:	232b      	movmi	r3, #43	@ 0x2b
 800c90e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c912:	f89a 3000 	ldrb.w	r3, [sl]
 800c916:	2b2a      	cmp	r3, #42	@ 0x2a
 800c918:	d015      	beq.n	800c946 <_svfiprintf_r+0xfa>
 800c91a:	9a07      	ldr	r2, [sp, #28]
 800c91c:	4654      	mov	r4, sl
 800c91e:	2000      	movs	r0, #0
 800c920:	f04f 0c0a 	mov.w	ip, #10
 800c924:	4621      	mov	r1, r4
 800c926:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c92a:	3b30      	subs	r3, #48	@ 0x30
 800c92c:	2b09      	cmp	r3, #9
 800c92e:	d94b      	bls.n	800c9c8 <_svfiprintf_r+0x17c>
 800c930:	b1b0      	cbz	r0, 800c960 <_svfiprintf_r+0x114>
 800c932:	9207      	str	r2, [sp, #28]
 800c934:	e014      	b.n	800c960 <_svfiprintf_r+0x114>
 800c936:	eba0 0308 	sub.w	r3, r0, r8
 800c93a:	fa09 f303 	lsl.w	r3, r9, r3
 800c93e:	4313      	orrs	r3, r2
 800c940:	9304      	str	r3, [sp, #16]
 800c942:	46a2      	mov	sl, r4
 800c944:	e7d2      	b.n	800c8ec <_svfiprintf_r+0xa0>
 800c946:	9b03      	ldr	r3, [sp, #12]
 800c948:	1d19      	adds	r1, r3, #4
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	9103      	str	r1, [sp, #12]
 800c94e:	2b00      	cmp	r3, #0
 800c950:	bfbb      	ittet	lt
 800c952:	425b      	neglt	r3, r3
 800c954:	f042 0202 	orrlt.w	r2, r2, #2
 800c958:	9307      	strge	r3, [sp, #28]
 800c95a:	9307      	strlt	r3, [sp, #28]
 800c95c:	bfb8      	it	lt
 800c95e:	9204      	strlt	r2, [sp, #16]
 800c960:	7823      	ldrb	r3, [r4, #0]
 800c962:	2b2e      	cmp	r3, #46	@ 0x2e
 800c964:	d10a      	bne.n	800c97c <_svfiprintf_r+0x130>
 800c966:	7863      	ldrb	r3, [r4, #1]
 800c968:	2b2a      	cmp	r3, #42	@ 0x2a
 800c96a:	d132      	bne.n	800c9d2 <_svfiprintf_r+0x186>
 800c96c:	9b03      	ldr	r3, [sp, #12]
 800c96e:	1d1a      	adds	r2, r3, #4
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	9203      	str	r2, [sp, #12]
 800c974:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c978:	3402      	adds	r4, #2
 800c97a:	9305      	str	r3, [sp, #20]
 800c97c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800ca40 <_svfiprintf_r+0x1f4>
 800c980:	7821      	ldrb	r1, [r4, #0]
 800c982:	2203      	movs	r2, #3
 800c984:	4650      	mov	r0, sl
 800c986:	f7f3 fc3b 	bl	8000200 <memchr>
 800c98a:	b138      	cbz	r0, 800c99c <_svfiprintf_r+0x150>
 800c98c:	9b04      	ldr	r3, [sp, #16]
 800c98e:	eba0 000a 	sub.w	r0, r0, sl
 800c992:	2240      	movs	r2, #64	@ 0x40
 800c994:	4082      	lsls	r2, r0
 800c996:	4313      	orrs	r3, r2
 800c998:	3401      	adds	r4, #1
 800c99a:	9304      	str	r3, [sp, #16]
 800c99c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c9a0:	4824      	ldr	r0, [pc, #144]	@ (800ca34 <_svfiprintf_r+0x1e8>)
 800c9a2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c9a6:	2206      	movs	r2, #6
 800c9a8:	f7f3 fc2a 	bl	8000200 <memchr>
 800c9ac:	2800      	cmp	r0, #0
 800c9ae:	d036      	beq.n	800ca1e <_svfiprintf_r+0x1d2>
 800c9b0:	4b21      	ldr	r3, [pc, #132]	@ (800ca38 <_svfiprintf_r+0x1ec>)
 800c9b2:	bb1b      	cbnz	r3, 800c9fc <_svfiprintf_r+0x1b0>
 800c9b4:	9b03      	ldr	r3, [sp, #12]
 800c9b6:	3307      	adds	r3, #7
 800c9b8:	f023 0307 	bic.w	r3, r3, #7
 800c9bc:	3308      	adds	r3, #8
 800c9be:	9303      	str	r3, [sp, #12]
 800c9c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c9c2:	4433      	add	r3, r6
 800c9c4:	9309      	str	r3, [sp, #36]	@ 0x24
 800c9c6:	e76a      	b.n	800c89e <_svfiprintf_r+0x52>
 800c9c8:	fb0c 3202 	mla	r2, ip, r2, r3
 800c9cc:	460c      	mov	r4, r1
 800c9ce:	2001      	movs	r0, #1
 800c9d0:	e7a8      	b.n	800c924 <_svfiprintf_r+0xd8>
 800c9d2:	2300      	movs	r3, #0
 800c9d4:	3401      	adds	r4, #1
 800c9d6:	9305      	str	r3, [sp, #20]
 800c9d8:	4619      	mov	r1, r3
 800c9da:	f04f 0c0a 	mov.w	ip, #10
 800c9de:	4620      	mov	r0, r4
 800c9e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c9e4:	3a30      	subs	r2, #48	@ 0x30
 800c9e6:	2a09      	cmp	r2, #9
 800c9e8:	d903      	bls.n	800c9f2 <_svfiprintf_r+0x1a6>
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d0c6      	beq.n	800c97c <_svfiprintf_r+0x130>
 800c9ee:	9105      	str	r1, [sp, #20]
 800c9f0:	e7c4      	b.n	800c97c <_svfiprintf_r+0x130>
 800c9f2:	fb0c 2101 	mla	r1, ip, r1, r2
 800c9f6:	4604      	mov	r4, r0
 800c9f8:	2301      	movs	r3, #1
 800c9fa:	e7f0      	b.n	800c9de <_svfiprintf_r+0x192>
 800c9fc:	ab03      	add	r3, sp, #12
 800c9fe:	9300      	str	r3, [sp, #0]
 800ca00:	462a      	mov	r2, r5
 800ca02:	4b0e      	ldr	r3, [pc, #56]	@ (800ca3c <_svfiprintf_r+0x1f0>)
 800ca04:	a904      	add	r1, sp, #16
 800ca06:	4638      	mov	r0, r7
 800ca08:	f3af 8000 	nop.w
 800ca0c:	1c42      	adds	r2, r0, #1
 800ca0e:	4606      	mov	r6, r0
 800ca10:	d1d6      	bne.n	800c9c0 <_svfiprintf_r+0x174>
 800ca12:	89ab      	ldrh	r3, [r5, #12]
 800ca14:	065b      	lsls	r3, r3, #25
 800ca16:	f53f af2d 	bmi.w	800c874 <_svfiprintf_r+0x28>
 800ca1a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ca1c:	e72c      	b.n	800c878 <_svfiprintf_r+0x2c>
 800ca1e:	ab03      	add	r3, sp, #12
 800ca20:	9300      	str	r3, [sp, #0]
 800ca22:	462a      	mov	r2, r5
 800ca24:	4b05      	ldr	r3, [pc, #20]	@ (800ca3c <_svfiprintf_r+0x1f0>)
 800ca26:	a904      	add	r1, sp, #16
 800ca28:	4638      	mov	r0, r7
 800ca2a:	f000 f9bb 	bl	800cda4 <_printf_i>
 800ca2e:	e7ed      	b.n	800ca0c <_svfiprintf_r+0x1c0>
 800ca30:	0800dcf8 	.word	0x0800dcf8
 800ca34:	0800dd02 	.word	0x0800dd02
 800ca38:	00000000 	.word	0x00000000
 800ca3c:	0800c797 	.word	0x0800c797
 800ca40:	0800dcfe 	.word	0x0800dcfe

0800ca44 <__sfputc_r>:
 800ca44:	6893      	ldr	r3, [r2, #8]
 800ca46:	3b01      	subs	r3, #1
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	b410      	push	{r4}
 800ca4c:	6093      	str	r3, [r2, #8]
 800ca4e:	da08      	bge.n	800ca62 <__sfputc_r+0x1e>
 800ca50:	6994      	ldr	r4, [r2, #24]
 800ca52:	42a3      	cmp	r3, r4
 800ca54:	db01      	blt.n	800ca5a <__sfputc_r+0x16>
 800ca56:	290a      	cmp	r1, #10
 800ca58:	d103      	bne.n	800ca62 <__sfputc_r+0x1e>
 800ca5a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ca5e:	f000 bb6d 	b.w	800d13c <__swbuf_r>
 800ca62:	6813      	ldr	r3, [r2, #0]
 800ca64:	1c58      	adds	r0, r3, #1
 800ca66:	6010      	str	r0, [r2, #0]
 800ca68:	7019      	strb	r1, [r3, #0]
 800ca6a:	4608      	mov	r0, r1
 800ca6c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ca70:	4770      	bx	lr

0800ca72 <__sfputs_r>:
 800ca72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca74:	4606      	mov	r6, r0
 800ca76:	460f      	mov	r7, r1
 800ca78:	4614      	mov	r4, r2
 800ca7a:	18d5      	adds	r5, r2, r3
 800ca7c:	42ac      	cmp	r4, r5
 800ca7e:	d101      	bne.n	800ca84 <__sfputs_r+0x12>
 800ca80:	2000      	movs	r0, #0
 800ca82:	e007      	b.n	800ca94 <__sfputs_r+0x22>
 800ca84:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ca88:	463a      	mov	r2, r7
 800ca8a:	4630      	mov	r0, r6
 800ca8c:	f7ff ffda 	bl	800ca44 <__sfputc_r>
 800ca90:	1c43      	adds	r3, r0, #1
 800ca92:	d1f3      	bne.n	800ca7c <__sfputs_r+0xa>
 800ca94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ca98 <_vfiprintf_r>:
 800ca98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca9c:	460d      	mov	r5, r1
 800ca9e:	b09d      	sub	sp, #116	@ 0x74
 800caa0:	4614      	mov	r4, r2
 800caa2:	4698      	mov	r8, r3
 800caa4:	4606      	mov	r6, r0
 800caa6:	b118      	cbz	r0, 800cab0 <_vfiprintf_r+0x18>
 800caa8:	6a03      	ldr	r3, [r0, #32]
 800caaa:	b90b      	cbnz	r3, 800cab0 <_vfiprintf_r+0x18>
 800caac:	f7fe fbf4 	bl	800b298 <__sinit>
 800cab0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cab2:	07d9      	lsls	r1, r3, #31
 800cab4:	d405      	bmi.n	800cac2 <_vfiprintf_r+0x2a>
 800cab6:	89ab      	ldrh	r3, [r5, #12]
 800cab8:	059a      	lsls	r2, r3, #22
 800caba:	d402      	bmi.n	800cac2 <_vfiprintf_r+0x2a>
 800cabc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cabe:	f7fe fd4e 	bl	800b55e <__retarget_lock_acquire_recursive>
 800cac2:	89ab      	ldrh	r3, [r5, #12]
 800cac4:	071b      	lsls	r3, r3, #28
 800cac6:	d501      	bpl.n	800cacc <_vfiprintf_r+0x34>
 800cac8:	692b      	ldr	r3, [r5, #16]
 800caca:	b99b      	cbnz	r3, 800caf4 <_vfiprintf_r+0x5c>
 800cacc:	4629      	mov	r1, r5
 800cace:	4630      	mov	r0, r6
 800cad0:	f000 fb72 	bl	800d1b8 <__swsetup_r>
 800cad4:	b170      	cbz	r0, 800caf4 <_vfiprintf_r+0x5c>
 800cad6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cad8:	07dc      	lsls	r4, r3, #31
 800cada:	d504      	bpl.n	800cae6 <_vfiprintf_r+0x4e>
 800cadc:	f04f 30ff 	mov.w	r0, #4294967295
 800cae0:	b01d      	add	sp, #116	@ 0x74
 800cae2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cae6:	89ab      	ldrh	r3, [r5, #12]
 800cae8:	0598      	lsls	r0, r3, #22
 800caea:	d4f7      	bmi.n	800cadc <_vfiprintf_r+0x44>
 800caec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800caee:	f7fe fd37 	bl	800b560 <__retarget_lock_release_recursive>
 800caf2:	e7f3      	b.n	800cadc <_vfiprintf_r+0x44>
 800caf4:	2300      	movs	r3, #0
 800caf6:	9309      	str	r3, [sp, #36]	@ 0x24
 800caf8:	2320      	movs	r3, #32
 800cafa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800cafe:	f8cd 800c 	str.w	r8, [sp, #12]
 800cb02:	2330      	movs	r3, #48	@ 0x30
 800cb04:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800ccb4 <_vfiprintf_r+0x21c>
 800cb08:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800cb0c:	f04f 0901 	mov.w	r9, #1
 800cb10:	4623      	mov	r3, r4
 800cb12:	469a      	mov	sl, r3
 800cb14:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cb18:	b10a      	cbz	r2, 800cb1e <_vfiprintf_r+0x86>
 800cb1a:	2a25      	cmp	r2, #37	@ 0x25
 800cb1c:	d1f9      	bne.n	800cb12 <_vfiprintf_r+0x7a>
 800cb1e:	ebba 0b04 	subs.w	fp, sl, r4
 800cb22:	d00b      	beq.n	800cb3c <_vfiprintf_r+0xa4>
 800cb24:	465b      	mov	r3, fp
 800cb26:	4622      	mov	r2, r4
 800cb28:	4629      	mov	r1, r5
 800cb2a:	4630      	mov	r0, r6
 800cb2c:	f7ff ffa1 	bl	800ca72 <__sfputs_r>
 800cb30:	3001      	adds	r0, #1
 800cb32:	f000 80a7 	beq.w	800cc84 <_vfiprintf_r+0x1ec>
 800cb36:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cb38:	445a      	add	r2, fp
 800cb3a:	9209      	str	r2, [sp, #36]	@ 0x24
 800cb3c:	f89a 3000 	ldrb.w	r3, [sl]
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	f000 809f 	beq.w	800cc84 <_vfiprintf_r+0x1ec>
 800cb46:	2300      	movs	r3, #0
 800cb48:	f04f 32ff 	mov.w	r2, #4294967295
 800cb4c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cb50:	f10a 0a01 	add.w	sl, sl, #1
 800cb54:	9304      	str	r3, [sp, #16]
 800cb56:	9307      	str	r3, [sp, #28]
 800cb58:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800cb5c:	931a      	str	r3, [sp, #104]	@ 0x68
 800cb5e:	4654      	mov	r4, sl
 800cb60:	2205      	movs	r2, #5
 800cb62:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cb66:	4853      	ldr	r0, [pc, #332]	@ (800ccb4 <_vfiprintf_r+0x21c>)
 800cb68:	f7f3 fb4a 	bl	8000200 <memchr>
 800cb6c:	9a04      	ldr	r2, [sp, #16]
 800cb6e:	b9d8      	cbnz	r0, 800cba8 <_vfiprintf_r+0x110>
 800cb70:	06d1      	lsls	r1, r2, #27
 800cb72:	bf44      	itt	mi
 800cb74:	2320      	movmi	r3, #32
 800cb76:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cb7a:	0713      	lsls	r3, r2, #28
 800cb7c:	bf44      	itt	mi
 800cb7e:	232b      	movmi	r3, #43	@ 0x2b
 800cb80:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cb84:	f89a 3000 	ldrb.w	r3, [sl]
 800cb88:	2b2a      	cmp	r3, #42	@ 0x2a
 800cb8a:	d015      	beq.n	800cbb8 <_vfiprintf_r+0x120>
 800cb8c:	9a07      	ldr	r2, [sp, #28]
 800cb8e:	4654      	mov	r4, sl
 800cb90:	2000      	movs	r0, #0
 800cb92:	f04f 0c0a 	mov.w	ip, #10
 800cb96:	4621      	mov	r1, r4
 800cb98:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cb9c:	3b30      	subs	r3, #48	@ 0x30
 800cb9e:	2b09      	cmp	r3, #9
 800cba0:	d94b      	bls.n	800cc3a <_vfiprintf_r+0x1a2>
 800cba2:	b1b0      	cbz	r0, 800cbd2 <_vfiprintf_r+0x13a>
 800cba4:	9207      	str	r2, [sp, #28]
 800cba6:	e014      	b.n	800cbd2 <_vfiprintf_r+0x13a>
 800cba8:	eba0 0308 	sub.w	r3, r0, r8
 800cbac:	fa09 f303 	lsl.w	r3, r9, r3
 800cbb0:	4313      	orrs	r3, r2
 800cbb2:	9304      	str	r3, [sp, #16]
 800cbb4:	46a2      	mov	sl, r4
 800cbb6:	e7d2      	b.n	800cb5e <_vfiprintf_r+0xc6>
 800cbb8:	9b03      	ldr	r3, [sp, #12]
 800cbba:	1d19      	adds	r1, r3, #4
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	9103      	str	r1, [sp, #12]
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	bfbb      	ittet	lt
 800cbc4:	425b      	neglt	r3, r3
 800cbc6:	f042 0202 	orrlt.w	r2, r2, #2
 800cbca:	9307      	strge	r3, [sp, #28]
 800cbcc:	9307      	strlt	r3, [sp, #28]
 800cbce:	bfb8      	it	lt
 800cbd0:	9204      	strlt	r2, [sp, #16]
 800cbd2:	7823      	ldrb	r3, [r4, #0]
 800cbd4:	2b2e      	cmp	r3, #46	@ 0x2e
 800cbd6:	d10a      	bne.n	800cbee <_vfiprintf_r+0x156>
 800cbd8:	7863      	ldrb	r3, [r4, #1]
 800cbda:	2b2a      	cmp	r3, #42	@ 0x2a
 800cbdc:	d132      	bne.n	800cc44 <_vfiprintf_r+0x1ac>
 800cbde:	9b03      	ldr	r3, [sp, #12]
 800cbe0:	1d1a      	adds	r2, r3, #4
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	9203      	str	r2, [sp, #12]
 800cbe6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800cbea:	3402      	adds	r4, #2
 800cbec:	9305      	str	r3, [sp, #20]
 800cbee:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800ccc4 <_vfiprintf_r+0x22c>
 800cbf2:	7821      	ldrb	r1, [r4, #0]
 800cbf4:	2203      	movs	r2, #3
 800cbf6:	4650      	mov	r0, sl
 800cbf8:	f7f3 fb02 	bl	8000200 <memchr>
 800cbfc:	b138      	cbz	r0, 800cc0e <_vfiprintf_r+0x176>
 800cbfe:	9b04      	ldr	r3, [sp, #16]
 800cc00:	eba0 000a 	sub.w	r0, r0, sl
 800cc04:	2240      	movs	r2, #64	@ 0x40
 800cc06:	4082      	lsls	r2, r0
 800cc08:	4313      	orrs	r3, r2
 800cc0a:	3401      	adds	r4, #1
 800cc0c:	9304      	str	r3, [sp, #16]
 800cc0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cc12:	4829      	ldr	r0, [pc, #164]	@ (800ccb8 <_vfiprintf_r+0x220>)
 800cc14:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800cc18:	2206      	movs	r2, #6
 800cc1a:	f7f3 faf1 	bl	8000200 <memchr>
 800cc1e:	2800      	cmp	r0, #0
 800cc20:	d03f      	beq.n	800cca2 <_vfiprintf_r+0x20a>
 800cc22:	4b26      	ldr	r3, [pc, #152]	@ (800ccbc <_vfiprintf_r+0x224>)
 800cc24:	bb1b      	cbnz	r3, 800cc6e <_vfiprintf_r+0x1d6>
 800cc26:	9b03      	ldr	r3, [sp, #12]
 800cc28:	3307      	adds	r3, #7
 800cc2a:	f023 0307 	bic.w	r3, r3, #7
 800cc2e:	3308      	adds	r3, #8
 800cc30:	9303      	str	r3, [sp, #12]
 800cc32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cc34:	443b      	add	r3, r7
 800cc36:	9309      	str	r3, [sp, #36]	@ 0x24
 800cc38:	e76a      	b.n	800cb10 <_vfiprintf_r+0x78>
 800cc3a:	fb0c 3202 	mla	r2, ip, r2, r3
 800cc3e:	460c      	mov	r4, r1
 800cc40:	2001      	movs	r0, #1
 800cc42:	e7a8      	b.n	800cb96 <_vfiprintf_r+0xfe>
 800cc44:	2300      	movs	r3, #0
 800cc46:	3401      	adds	r4, #1
 800cc48:	9305      	str	r3, [sp, #20]
 800cc4a:	4619      	mov	r1, r3
 800cc4c:	f04f 0c0a 	mov.w	ip, #10
 800cc50:	4620      	mov	r0, r4
 800cc52:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cc56:	3a30      	subs	r2, #48	@ 0x30
 800cc58:	2a09      	cmp	r2, #9
 800cc5a:	d903      	bls.n	800cc64 <_vfiprintf_r+0x1cc>
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	d0c6      	beq.n	800cbee <_vfiprintf_r+0x156>
 800cc60:	9105      	str	r1, [sp, #20]
 800cc62:	e7c4      	b.n	800cbee <_vfiprintf_r+0x156>
 800cc64:	fb0c 2101 	mla	r1, ip, r1, r2
 800cc68:	4604      	mov	r4, r0
 800cc6a:	2301      	movs	r3, #1
 800cc6c:	e7f0      	b.n	800cc50 <_vfiprintf_r+0x1b8>
 800cc6e:	ab03      	add	r3, sp, #12
 800cc70:	9300      	str	r3, [sp, #0]
 800cc72:	462a      	mov	r2, r5
 800cc74:	4b12      	ldr	r3, [pc, #72]	@ (800ccc0 <_vfiprintf_r+0x228>)
 800cc76:	a904      	add	r1, sp, #16
 800cc78:	4630      	mov	r0, r6
 800cc7a:	f3af 8000 	nop.w
 800cc7e:	4607      	mov	r7, r0
 800cc80:	1c78      	adds	r0, r7, #1
 800cc82:	d1d6      	bne.n	800cc32 <_vfiprintf_r+0x19a>
 800cc84:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cc86:	07d9      	lsls	r1, r3, #31
 800cc88:	d405      	bmi.n	800cc96 <_vfiprintf_r+0x1fe>
 800cc8a:	89ab      	ldrh	r3, [r5, #12]
 800cc8c:	059a      	lsls	r2, r3, #22
 800cc8e:	d402      	bmi.n	800cc96 <_vfiprintf_r+0x1fe>
 800cc90:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cc92:	f7fe fc65 	bl	800b560 <__retarget_lock_release_recursive>
 800cc96:	89ab      	ldrh	r3, [r5, #12]
 800cc98:	065b      	lsls	r3, r3, #25
 800cc9a:	f53f af1f 	bmi.w	800cadc <_vfiprintf_r+0x44>
 800cc9e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cca0:	e71e      	b.n	800cae0 <_vfiprintf_r+0x48>
 800cca2:	ab03      	add	r3, sp, #12
 800cca4:	9300      	str	r3, [sp, #0]
 800cca6:	462a      	mov	r2, r5
 800cca8:	4b05      	ldr	r3, [pc, #20]	@ (800ccc0 <_vfiprintf_r+0x228>)
 800ccaa:	a904      	add	r1, sp, #16
 800ccac:	4630      	mov	r0, r6
 800ccae:	f000 f879 	bl	800cda4 <_printf_i>
 800ccb2:	e7e4      	b.n	800cc7e <_vfiprintf_r+0x1e6>
 800ccb4:	0800dcf8 	.word	0x0800dcf8
 800ccb8:	0800dd02 	.word	0x0800dd02
 800ccbc:	00000000 	.word	0x00000000
 800ccc0:	0800ca73 	.word	0x0800ca73
 800ccc4:	0800dcfe 	.word	0x0800dcfe

0800ccc8 <_printf_common>:
 800ccc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cccc:	4616      	mov	r6, r2
 800ccce:	4698      	mov	r8, r3
 800ccd0:	688a      	ldr	r2, [r1, #8]
 800ccd2:	690b      	ldr	r3, [r1, #16]
 800ccd4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ccd8:	4293      	cmp	r3, r2
 800ccda:	bfb8      	it	lt
 800ccdc:	4613      	movlt	r3, r2
 800ccde:	6033      	str	r3, [r6, #0]
 800cce0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800cce4:	4607      	mov	r7, r0
 800cce6:	460c      	mov	r4, r1
 800cce8:	b10a      	cbz	r2, 800ccee <_printf_common+0x26>
 800ccea:	3301      	adds	r3, #1
 800ccec:	6033      	str	r3, [r6, #0]
 800ccee:	6823      	ldr	r3, [r4, #0]
 800ccf0:	0699      	lsls	r1, r3, #26
 800ccf2:	bf42      	ittt	mi
 800ccf4:	6833      	ldrmi	r3, [r6, #0]
 800ccf6:	3302      	addmi	r3, #2
 800ccf8:	6033      	strmi	r3, [r6, #0]
 800ccfa:	6825      	ldr	r5, [r4, #0]
 800ccfc:	f015 0506 	ands.w	r5, r5, #6
 800cd00:	d106      	bne.n	800cd10 <_printf_common+0x48>
 800cd02:	f104 0a19 	add.w	sl, r4, #25
 800cd06:	68e3      	ldr	r3, [r4, #12]
 800cd08:	6832      	ldr	r2, [r6, #0]
 800cd0a:	1a9b      	subs	r3, r3, r2
 800cd0c:	42ab      	cmp	r3, r5
 800cd0e:	dc26      	bgt.n	800cd5e <_printf_common+0x96>
 800cd10:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800cd14:	6822      	ldr	r2, [r4, #0]
 800cd16:	3b00      	subs	r3, #0
 800cd18:	bf18      	it	ne
 800cd1a:	2301      	movne	r3, #1
 800cd1c:	0692      	lsls	r2, r2, #26
 800cd1e:	d42b      	bmi.n	800cd78 <_printf_common+0xb0>
 800cd20:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800cd24:	4641      	mov	r1, r8
 800cd26:	4638      	mov	r0, r7
 800cd28:	47c8      	blx	r9
 800cd2a:	3001      	adds	r0, #1
 800cd2c:	d01e      	beq.n	800cd6c <_printf_common+0xa4>
 800cd2e:	6823      	ldr	r3, [r4, #0]
 800cd30:	6922      	ldr	r2, [r4, #16]
 800cd32:	f003 0306 	and.w	r3, r3, #6
 800cd36:	2b04      	cmp	r3, #4
 800cd38:	bf02      	ittt	eq
 800cd3a:	68e5      	ldreq	r5, [r4, #12]
 800cd3c:	6833      	ldreq	r3, [r6, #0]
 800cd3e:	1aed      	subeq	r5, r5, r3
 800cd40:	68a3      	ldr	r3, [r4, #8]
 800cd42:	bf0c      	ite	eq
 800cd44:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cd48:	2500      	movne	r5, #0
 800cd4a:	4293      	cmp	r3, r2
 800cd4c:	bfc4      	itt	gt
 800cd4e:	1a9b      	subgt	r3, r3, r2
 800cd50:	18ed      	addgt	r5, r5, r3
 800cd52:	2600      	movs	r6, #0
 800cd54:	341a      	adds	r4, #26
 800cd56:	42b5      	cmp	r5, r6
 800cd58:	d11a      	bne.n	800cd90 <_printf_common+0xc8>
 800cd5a:	2000      	movs	r0, #0
 800cd5c:	e008      	b.n	800cd70 <_printf_common+0xa8>
 800cd5e:	2301      	movs	r3, #1
 800cd60:	4652      	mov	r2, sl
 800cd62:	4641      	mov	r1, r8
 800cd64:	4638      	mov	r0, r7
 800cd66:	47c8      	blx	r9
 800cd68:	3001      	adds	r0, #1
 800cd6a:	d103      	bne.n	800cd74 <_printf_common+0xac>
 800cd6c:	f04f 30ff 	mov.w	r0, #4294967295
 800cd70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd74:	3501      	adds	r5, #1
 800cd76:	e7c6      	b.n	800cd06 <_printf_common+0x3e>
 800cd78:	18e1      	adds	r1, r4, r3
 800cd7a:	1c5a      	adds	r2, r3, #1
 800cd7c:	2030      	movs	r0, #48	@ 0x30
 800cd7e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800cd82:	4422      	add	r2, r4
 800cd84:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800cd88:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800cd8c:	3302      	adds	r3, #2
 800cd8e:	e7c7      	b.n	800cd20 <_printf_common+0x58>
 800cd90:	2301      	movs	r3, #1
 800cd92:	4622      	mov	r2, r4
 800cd94:	4641      	mov	r1, r8
 800cd96:	4638      	mov	r0, r7
 800cd98:	47c8      	blx	r9
 800cd9a:	3001      	adds	r0, #1
 800cd9c:	d0e6      	beq.n	800cd6c <_printf_common+0xa4>
 800cd9e:	3601      	adds	r6, #1
 800cda0:	e7d9      	b.n	800cd56 <_printf_common+0x8e>
	...

0800cda4 <_printf_i>:
 800cda4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cda8:	7e0f      	ldrb	r7, [r1, #24]
 800cdaa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800cdac:	2f78      	cmp	r7, #120	@ 0x78
 800cdae:	4691      	mov	r9, r2
 800cdb0:	4680      	mov	r8, r0
 800cdb2:	460c      	mov	r4, r1
 800cdb4:	469a      	mov	sl, r3
 800cdb6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800cdba:	d807      	bhi.n	800cdcc <_printf_i+0x28>
 800cdbc:	2f62      	cmp	r7, #98	@ 0x62
 800cdbe:	d80a      	bhi.n	800cdd6 <_printf_i+0x32>
 800cdc0:	2f00      	cmp	r7, #0
 800cdc2:	f000 80d2 	beq.w	800cf6a <_printf_i+0x1c6>
 800cdc6:	2f58      	cmp	r7, #88	@ 0x58
 800cdc8:	f000 80b9 	beq.w	800cf3e <_printf_i+0x19a>
 800cdcc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800cdd0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800cdd4:	e03a      	b.n	800ce4c <_printf_i+0xa8>
 800cdd6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800cdda:	2b15      	cmp	r3, #21
 800cddc:	d8f6      	bhi.n	800cdcc <_printf_i+0x28>
 800cdde:	a101      	add	r1, pc, #4	@ (adr r1, 800cde4 <_printf_i+0x40>)
 800cde0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cde4:	0800ce3d 	.word	0x0800ce3d
 800cde8:	0800ce51 	.word	0x0800ce51
 800cdec:	0800cdcd 	.word	0x0800cdcd
 800cdf0:	0800cdcd 	.word	0x0800cdcd
 800cdf4:	0800cdcd 	.word	0x0800cdcd
 800cdf8:	0800cdcd 	.word	0x0800cdcd
 800cdfc:	0800ce51 	.word	0x0800ce51
 800ce00:	0800cdcd 	.word	0x0800cdcd
 800ce04:	0800cdcd 	.word	0x0800cdcd
 800ce08:	0800cdcd 	.word	0x0800cdcd
 800ce0c:	0800cdcd 	.word	0x0800cdcd
 800ce10:	0800cf51 	.word	0x0800cf51
 800ce14:	0800ce7b 	.word	0x0800ce7b
 800ce18:	0800cf0b 	.word	0x0800cf0b
 800ce1c:	0800cdcd 	.word	0x0800cdcd
 800ce20:	0800cdcd 	.word	0x0800cdcd
 800ce24:	0800cf73 	.word	0x0800cf73
 800ce28:	0800cdcd 	.word	0x0800cdcd
 800ce2c:	0800ce7b 	.word	0x0800ce7b
 800ce30:	0800cdcd 	.word	0x0800cdcd
 800ce34:	0800cdcd 	.word	0x0800cdcd
 800ce38:	0800cf13 	.word	0x0800cf13
 800ce3c:	6833      	ldr	r3, [r6, #0]
 800ce3e:	1d1a      	adds	r2, r3, #4
 800ce40:	681b      	ldr	r3, [r3, #0]
 800ce42:	6032      	str	r2, [r6, #0]
 800ce44:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ce48:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ce4c:	2301      	movs	r3, #1
 800ce4e:	e09d      	b.n	800cf8c <_printf_i+0x1e8>
 800ce50:	6833      	ldr	r3, [r6, #0]
 800ce52:	6820      	ldr	r0, [r4, #0]
 800ce54:	1d19      	adds	r1, r3, #4
 800ce56:	6031      	str	r1, [r6, #0]
 800ce58:	0606      	lsls	r6, r0, #24
 800ce5a:	d501      	bpl.n	800ce60 <_printf_i+0xbc>
 800ce5c:	681d      	ldr	r5, [r3, #0]
 800ce5e:	e003      	b.n	800ce68 <_printf_i+0xc4>
 800ce60:	0645      	lsls	r5, r0, #25
 800ce62:	d5fb      	bpl.n	800ce5c <_printf_i+0xb8>
 800ce64:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ce68:	2d00      	cmp	r5, #0
 800ce6a:	da03      	bge.n	800ce74 <_printf_i+0xd0>
 800ce6c:	232d      	movs	r3, #45	@ 0x2d
 800ce6e:	426d      	negs	r5, r5
 800ce70:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ce74:	4859      	ldr	r0, [pc, #356]	@ (800cfdc <_printf_i+0x238>)
 800ce76:	230a      	movs	r3, #10
 800ce78:	e011      	b.n	800ce9e <_printf_i+0xfa>
 800ce7a:	6821      	ldr	r1, [r4, #0]
 800ce7c:	6833      	ldr	r3, [r6, #0]
 800ce7e:	0608      	lsls	r0, r1, #24
 800ce80:	f853 5b04 	ldr.w	r5, [r3], #4
 800ce84:	d402      	bmi.n	800ce8c <_printf_i+0xe8>
 800ce86:	0649      	lsls	r1, r1, #25
 800ce88:	bf48      	it	mi
 800ce8a:	b2ad      	uxthmi	r5, r5
 800ce8c:	2f6f      	cmp	r7, #111	@ 0x6f
 800ce8e:	4853      	ldr	r0, [pc, #332]	@ (800cfdc <_printf_i+0x238>)
 800ce90:	6033      	str	r3, [r6, #0]
 800ce92:	bf14      	ite	ne
 800ce94:	230a      	movne	r3, #10
 800ce96:	2308      	moveq	r3, #8
 800ce98:	2100      	movs	r1, #0
 800ce9a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ce9e:	6866      	ldr	r6, [r4, #4]
 800cea0:	60a6      	str	r6, [r4, #8]
 800cea2:	2e00      	cmp	r6, #0
 800cea4:	bfa2      	ittt	ge
 800cea6:	6821      	ldrge	r1, [r4, #0]
 800cea8:	f021 0104 	bicge.w	r1, r1, #4
 800ceac:	6021      	strge	r1, [r4, #0]
 800ceae:	b90d      	cbnz	r5, 800ceb4 <_printf_i+0x110>
 800ceb0:	2e00      	cmp	r6, #0
 800ceb2:	d04b      	beq.n	800cf4c <_printf_i+0x1a8>
 800ceb4:	4616      	mov	r6, r2
 800ceb6:	fbb5 f1f3 	udiv	r1, r5, r3
 800ceba:	fb03 5711 	mls	r7, r3, r1, r5
 800cebe:	5dc7      	ldrb	r7, [r0, r7]
 800cec0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800cec4:	462f      	mov	r7, r5
 800cec6:	42bb      	cmp	r3, r7
 800cec8:	460d      	mov	r5, r1
 800ceca:	d9f4      	bls.n	800ceb6 <_printf_i+0x112>
 800cecc:	2b08      	cmp	r3, #8
 800cece:	d10b      	bne.n	800cee8 <_printf_i+0x144>
 800ced0:	6823      	ldr	r3, [r4, #0]
 800ced2:	07df      	lsls	r7, r3, #31
 800ced4:	d508      	bpl.n	800cee8 <_printf_i+0x144>
 800ced6:	6923      	ldr	r3, [r4, #16]
 800ced8:	6861      	ldr	r1, [r4, #4]
 800ceda:	4299      	cmp	r1, r3
 800cedc:	bfde      	ittt	le
 800cede:	2330      	movle	r3, #48	@ 0x30
 800cee0:	f806 3c01 	strble.w	r3, [r6, #-1]
 800cee4:	f106 36ff 	addle.w	r6, r6, #4294967295
 800cee8:	1b92      	subs	r2, r2, r6
 800ceea:	6122      	str	r2, [r4, #16]
 800ceec:	f8cd a000 	str.w	sl, [sp]
 800cef0:	464b      	mov	r3, r9
 800cef2:	aa03      	add	r2, sp, #12
 800cef4:	4621      	mov	r1, r4
 800cef6:	4640      	mov	r0, r8
 800cef8:	f7ff fee6 	bl	800ccc8 <_printf_common>
 800cefc:	3001      	adds	r0, #1
 800cefe:	d14a      	bne.n	800cf96 <_printf_i+0x1f2>
 800cf00:	f04f 30ff 	mov.w	r0, #4294967295
 800cf04:	b004      	add	sp, #16
 800cf06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf0a:	6823      	ldr	r3, [r4, #0]
 800cf0c:	f043 0320 	orr.w	r3, r3, #32
 800cf10:	6023      	str	r3, [r4, #0]
 800cf12:	4833      	ldr	r0, [pc, #204]	@ (800cfe0 <_printf_i+0x23c>)
 800cf14:	2778      	movs	r7, #120	@ 0x78
 800cf16:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800cf1a:	6823      	ldr	r3, [r4, #0]
 800cf1c:	6831      	ldr	r1, [r6, #0]
 800cf1e:	061f      	lsls	r7, r3, #24
 800cf20:	f851 5b04 	ldr.w	r5, [r1], #4
 800cf24:	d402      	bmi.n	800cf2c <_printf_i+0x188>
 800cf26:	065f      	lsls	r7, r3, #25
 800cf28:	bf48      	it	mi
 800cf2a:	b2ad      	uxthmi	r5, r5
 800cf2c:	6031      	str	r1, [r6, #0]
 800cf2e:	07d9      	lsls	r1, r3, #31
 800cf30:	bf44      	itt	mi
 800cf32:	f043 0320 	orrmi.w	r3, r3, #32
 800cf36:	6023      	strmi	r3, [r4, #0]
 800cf38:	b11d      	cbz	r5, 800cf42 <_printf_i+0x19e>
 800cf3a:	2310      	movs	r3, #16
 800cf3c:	e7ac      	b.n	800ce98 <_printf_i+0xf4>
 800cf3e:	4827      	ldr	r0, [pc, #156]	@ (800cfdc <_printf_i+0x238>)
 800cf40:	e7e9      	b.n	800cf16 <_printf_i+0x172>
 800cf42:	6823      	ldr	r3, [r4, #0]
 800cf44:	f023 0320 	bic.w	r3, r3, #32
 800cf48:	6023      	str	r3, [r4, #0]
 800cf4a:	e7f6      	b.n	800cf3a <_printf_i+0x196>
 800cf4c:	4616      	mov	r6, r2
 800cf4e:	e7bd      	b.n	800cecc <_printf_i+0x128>
 800cf50:	6833      	ldr	r3, [r6, #0]
 800cf52:	6825      	ldr	r5, [r4, #0]
 800cf54:	6961      	ldr	r1, [r4, #20]
 800cf56:	1d18      	adds	r0, r3, #4
 800cf58:	6030      	str	r0, [r6, #0]
 800cf5a:	062e      	lsls	r6, r5, #24
 800cf5c:	681b      	ldr	r3, [r3, #0]
 800cf5e:	d501      	bpl.n	800cf64 <_printf_i+0x1c0>
 800cf60:	6019      	str	r1, [r3, #0]
 800cf62:	e002      	b.n	800cf6a <_printf_i+0x1c6>
 800cf64:	0668      	lsls	r0, r5, #25
 800cf66:	d5fb      	bpl.n	800cf60 <_printf_i+0x1bc>
 800cf68:	8019      	strh	r1, [r3, #0]
 800cf6a:	2300      	movs	r3, #0
 800cf6c:	6123      	str	r3, [r4, #16]
 800cf6e:	4616      	mov	r6, r2
 800cf70:	e7bc      	b.n	800ceec <_printf_i+0x148>
 800cf72:	6833      	ldr	r3, [r6, #0]
 800cf74:	1d1a      	adds	r2, r3, #4
 800cf76:	6032      	str	r2, [r6, #0]
 800cf78:	681e      	ldr	r6, [r3, #0]
 800cf7a:	6862      	ldr	r2, [r4, #4]
 800cf7c:	2100      	movs	r1, #0
 800cf7e:	4630      	mov	r0, r6
 800cf80:	f7f3 f93e 	bl	8000200 <memchr>
 800cf84:	b108      	cbz	r0, 800cf8a <_printf_i+0x1e6>
 800cf86:	1b80      	subs	r0, r0, r6
 800cf88:	6060      	str	r0, [r4, #4]
 800cf8a:	6863      	ldr	r3, [r4, #4]
 800cf8c:	6123      	str	r3, [r4, #16]
 800cf8e:	2300      	movs	r3, #0
 800cf90:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cf94:	e7aa      	b.n	800ceec <_printf_i+0x148>
 800cf96:	6923      	ldr	r3, [r4, #16]
 800cf98:	4632      	mov	r2, r6
 800cf9a:	4649      	mov	r1, r9
 800cf9c:	4640      	mov	r0, r8
 800cf9e:	47d0      	blx	sl
 800cfa0:	3001      	adds	r0, #1
 800cfa2:	d0ad      	beq.n	800cf00 <_printf_i+0x15c>
 800cfa4:	6823      	ldr	r3, [r4, #0]
 800cfa6:	079b      	lsls	r3, r3, #30
 800cfa8:	d413      	bmi.n	800cfd2 <_printf_i+0x22e>
 800cfaa:	68e0      	ldr	r0, [r4, #12]
 800cfac:	9b03      	ldr	r3, [sp, #12]
 800cfae:	4298      	cmp	r0, r3
 800cfb0:	bfb8      	it	lt
 800cfb2:	4618      	movlt	r0, r3
 800cfb4:	e7a6      	b.n	800cf04 <_printf_i+0x160>
 800cfb6:	2301      	movs	r3, #1
 800cfb8:	4632      	mov	r2, r6
 800cfba:	4649      	mov	r1, r9
 800cfbc:	4640      	mov	r0, r8
 800cfbe:	47d0      	blx	sl
 800cfc0:	3001      	adds	r0, #1
 800cfc2:	d09d      	beq.n	800cf00 <_printf_i+0x15c>
 800cfc4:	3501      	adds	r5, #1
 800cfc6:	68e3      	ldr	r3, [r4, #12]
 800cfc8:	9903      	ldr	r1, [sp, #12]
 800cfca:	1a5b      	subs	r3, r3, r1
 800cfcc:	42ab      	cmp	r3, r5
 800cfce:	dcf2      	bgt.n	800cfb6 <_printf_i+0x212>
 800cfd0:	e7eb      	b.n	800cfaa <_printf_i+0x206>
 800cfd2:	2500      	movs	r5, #0
 800cfd4:	f104 0619 	add.w	r6, r4, #25
 800cfd8:	e7f5      	b.n	800cfc6 <_printf_i+0x222>
 800cfda:	bf00      	nop
 800cfdc:	0800dd09 	.word	0x0800dd09
 800cfe0:	0800dd1a 	.word	0x0800dd1a

0800cfe4 <__sflush_r>:
 800cfe4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800cfe8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cfec:	0716      	lsls	r6, r2, #28
 800cfee:	4605      	mov	r5, r0
 800cff0:	460c      	mov	r4, r1
 800cff2:	d454      	bmi.n	800d09e <__sflush_r+0xba>
 800cff4:	684b      	ldr	r3, [r1, #4]
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	dc02      	bgt.n	800d000 <__sflush_r+0x1c>
 800cffa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	dd48      	ble.n	800d092 <__sflush_r+0xae>
 800d000:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d002:	2e00      	cmp	r6, #0
 800d004:	d045      	beq.n	800d092 <__sflush_r+0xae>
 800d006:	2300      	movs	r3, #0
 800d008:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d00c:	682f      	ldr	r7, [r5, #0]
 800d00e:	6a21      	ldr	r1, [r4, #32]
 800d010:	602b      	str	r3, [r5, #0]
 800d012:	d030      	beq.n	800d076 <__sflush_r+0x92>
 800d014:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d016:	89a3      	ldrh	r3, [r4, #12]
 800d018:	0759      	lsls	r1, r3, #29
 800d01a:	d505      	bpl.n	800d028 <__sflush_r+0x44>
 800d01c:	6863      	ldr	r3, [r4, #4]
 800d01e:	1ad2      	subs	r2, r2, r3
 800d020:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d022:	b10b      	cbz	r3, 800d028 <__sflush_r+0x44>
 800d024:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d026:	1ad2      	subs	r2, r2, r3
 800d028:	2300      	movs	r3, #0
 800d02a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d02c:	6a21      	ldr	r1, [r4, #32]
 800d02e:	4628      	mov	r0, r5
 800d030:	47b0      	blx	r6
 800d032:	1c43      	adds	r3, r0, #1
 800d034:	89a3      	ldrh	r3, [r4, #12]
 800d036:	d106      	bne.n	800d046 <__sflush_r+0x62>
 800d038:	6829      	ldr	r1, [r5, #0]
 800d03a:	291d      	cmp	r1, #29
 800d03c:	d82b      	bhi.n	800d096 <__sflush_r+0xb2>
 800d03e:	4a2a      	ldr	r2, [pc, #168]	@ (800d0e8 <__sflush_r+0x104>)
 800d040:	410a      	asrs	r2, r1
 800d042:	07d6      	lsls	r6, r2, #31
 800d044:	d427      	bmi.n	800d096 <__sflush_r+0xb2>
 800d046:	2200      	movs	r2, #0
 800d048:	6062      	str	r2, [r4, #4]
 800d04a:	04d9      	lsls	r1, r3, #19
 800d04c:	6922      	ldr	r2, [r4, #16]
 800d04e:	6022      	str	r2, [r4, #0]
 800d050:	d504      	bpl.n	800d05c <__sflush_r+0x78>
 800d052:	1c42      	adds	r2, r0, #1
 800d054:	d101      	bne.n	800d05a <__sflush_r+0x76>
 800d056:	682b      	ldr	r3, [r5, #0]
 800d058:	b903      	cbnz	r3, 800d05c <__sflush_r+0x78>
 800d05a:	6560      	str	r0, [r4, #84]	@ 0x54
 800d05c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d05e:	602f      	str	r7, [r5, #0]
 800d060:	b1b9      	cbz	r1, 800d092 <__sflush_r+0xae>
 800d062:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d066:	4299      	cmp	r1, r3
 800d068:	d002      	beq.n	800d070 <__sflush_r+0x8c>
 800d06a:	4628      	mov	r0, r5
 800d06c:	f7fe fa90 	bl	800b590 <_free_r>
 800d070:	2300      	movs	r3, #0
 800d072:	6363      	str	r3, [r4, #52]	@ 0x34
 800d074:	e00d      	b.n	800d092 <__sflush_r+0xae>
 800d076:	2301      	movs	r3, #1
 800d078:	4628      	mov	r0, r5
 800d07a:	47b0      	blx	r6
 800d07c:	4602      	mov	r2, r0
 800d07e:	1c50      	adds	r0, r2, #1
 800d080:	d1c9      	bne.n	800d016 <__sflush_r+0x32>
 800d082:	682b      	ldr	r3, [r5, #0]
 800d084:	2b00      	cmp	r3, #0
 800d086:	d0c6      	beq.n	800d016 <__sflush_r+0x32>
 800d088:	2b1d      	cmp	r3, #29
 800d08a:	d001      	beq.n	800d090 <__sflush_r+0xac>
 800d08c:	2b16      	cmp	r3, #22
 800d08e:	d11e      	bne.n	800d0ce <__sflush_r+0xea>
 800d090:	602f      	str	r7, [r5, #0]
 800d092:	2000      	movs	r0, #0
 800d094:	e022      	b.n	800d0dc <__sflush_r+0xf8>
 800d096:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d09a:	b21b      	sxth	r3, r3
 800d09c:	e01b      	b.n	800d0d6 <__sflush_r+0xf2>
 800d09e:	690f      	ldr	r7, [r1, #16]
 800d0a0:	2f00      	cmp	r7, #0
 800d0a2:	d0f6      	beq.n	800d092 <__sflush_r+0xae>
 800d0a4:	0793      	lsls	r3, r2, #30
 800d0a6:	680e      	ldr	r6, [r1, #0]
 800d0a8:	bf08      	it	eq
 800d0aa:	694b      	ldreq	r3, [r1, #20]
 800d0ac:	600f      	str	r7, [r1, #0]
 800d0ae:	bf18      	it	ne
 800d0b0:	2300      	movne	r3, #0
 800d0b2:	eba6 0807 	sub.w	r8, r6, r7
 800d0b6:	608b      	str	r3, [r1, #8]
 800d0b8:	f1b8 0f00 	cmp.w	r8, #0
 800d0bc:	dde9      	ble.n	800d092 <__sflush_r+0xae>
 800d0be:	6a21      	ldr	r1, [r4, #32]
 800d0c0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d0c2:	4643      	mov	r3, r8
 800d0c4:	463a      	mov	r2, r7
 800d0c6:	4628      	mov	r0, r5
 800d0c8:	47b0      	blx	r6
 800d0ca:	2800      	cmp	r0, #0
 800d0cc:	dc08      	bgt.n	800d0e0 <__sflush_r+0xfc>
 800d0ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d0d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d0d6:	81a3      	strh	r3, [r4, #12]
 800d0d8:	f04f 30ff 	mov.w	r0, #4294967295
 800d0dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d0e0:	4407      	add	r7, r0
 800d0e2:	eba8 0800 	sub.w	r8, r8, r0
 800d0e6:	e7e7      	b.n	800d0b8 <__sflush_r+0xd4>
 800d0e8:	dfbffffe 	.word	0xdfbffffe

0800d0ec <_fflush_r>:
 800d0ec:	b538      	push	{r3, r4, r5, lr}
 800d0ee:	690b      	ldr	r3, [r1, #16]
 800d0f0:	4605      	mov	r5, r0
 800d0f2:	460c      	mov	r4, r1
 800d0f4:	b913      	cbnz	r3, 800d0fc <_fflush_r+0x10>
 800d0f6:	2500      	movs	r5, #0
 800d0f8:	4628      	mov	r0, r5
 800d0fa:	bd38      	pop	{r3, r4, r5, pc}
 800d0fc:	b118      	cbz	r0, 800d106 <_fflush_r+0x1a>
 800d0fe:	6a03      	ldr	r3, [r0, #32]
 800d100:	b90b      	cbnz	r3, 800d106 <_fflush_r+0x1a>
 800d102:	f7fe f8c9 	bl	800b298 <__sinit>
 800d106:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	d0f3      	beq.n	800d0f6 <_fflush_r+0xa>
 800d10e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d110:	07d0      	lsls	r0, r2, #31
 800d112:	d404      	bmi.n	800d11e <_fflush_r+0x32>
 800d114:	0599      	lsls	r1, r3, #22
 800d116:	d402      	bmi.n	800d11e <_fflush_r+0x32>
 800d118:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d11a:	f7fe fa20 	bl	800b55e <__retarget_lock_acquire_recursive>
 800d11e:	4628      	mov	r0, r5
 800d120:	4621      	mov	r1, r4
 800d122:	f7ff ff5f 	bl	800cfe4 <__sflush_r>
 800d126:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d128:	07da      	lsls	r2, r3, #31
 800d12a:	4605      	mov	r5, r0
 800d12c:	d4e4      	bmi.n	800d0f8 <_fflush_r+0xc>
 800d12e:	89a3      	ldrh	r3, [r4, #12]
 800d130:	059b      	lsls	r3, r3, #22
 800d132:	d4e1      	bmi.n	800d0f8 <_fflush_r+0xc>
 800d134:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d136:	f7fe fa13 	bl	800b560 <__retarget_lock_release_recursive>
 800d13a:	e7dd      	b.n	800d0f8 <_fflush_r+0xc>

0800d13c <__swbuf_r>:
 800d13c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d13e:	460e      	mov	r6, r1
 800d140:	4614      	mov	r4, r2
 800d142:	4605      	mov	r5, r0
 800d144:	b118      	cbz	r0, 800d14e <__swbuf_r+0x12>
 800d146:	6a03      	ldr	r3, [r0, #32]
 800d148:	b90b      	cbnz	r3, 800d14e <__swbuf_r+0x12>
 800d14a:	f7fe f8a5 	bl	800b298 <__sinit>
 800d14e:	69a3      	ldr	r3, [r4, #24]
 800d150:	60a3      	str	r3, [r4, #8]
 800d152:	89a3      	ldrh	r3, [r4, #12]
 800d154:	071a      	lsls	r2, r3, #28
 800d156:	d501      	bpl.n	800d15c <__swbuf_r+0x20>
 800d158:	6923      	ldr	r3, [r4, #16]
 800d15a:	b943      	cbnz	r3, 800d16e <__swbuf_r+0x32>
 800d15c:	4621      	mov	r1, r4
 800d15e:	4628      	mov	r0, r5
 800d160:	f000 f82a 	bl	800d1b8 <__swsetup_r>
 800d164:	b118      	cbz	r0, 800d16e <__swbuf_r+0x32>
 800d166:	f04f 37ff 	mov.w	r7, #4294967295
 800d16a:	4638      	mov	r0, r7
 800d16c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d16e:	6823      	ldr	r3, [r4, #0]
 800d170:	6922      	ldr	r2, [r4, #16]
 800d172:	1a98      	subs	r0, r3, r2
 800d174:	6963      	ldr	r3, [r4, #20]
 800d176:	b2f6      	uxtb	r6, r6
 800d178:	4283      	cmp	r3, r0
 800d17a:	4637      	mov	r7, r6
 800d17c:	dc05      	bgt.n	800d18a <__swbuf_r+0x4e>
 800d17e:	4621      	mov	r1, r4
 800d180:	4628      	mov	r0, r5
 800d182:	f7ff ffb3 	bl	800d0ec <_fflush_r>
 800d186:	2800      	cmp	r0, #0
 800d188:	d1ed      	bne.n	800d166 <__swbuf_r+0x2a>
 800d18a:	68a3      	ldr	r3, [r4, #8]
 800d18c:	3b01      	subs	r3, #1
 800d18e:	60a3      	str	r3, [r4, #8]
 800d190:	6823      	ldr	r3, [r4, #0]
 800d192:	1c5a      	adds	r2, r3, #1
 800d194:	6022      	str	r2, [r4, #0]
 800d196:	701e      	strb	r6, [r3, #0]
 800d198:	6962      	ldr	r2, [r4, #20]
 800d19a:	1c43      	adds	r3, r0, #1
 800d19c:	429a      	cmp	r2, r3
 800d19e:	d004      	beq.n	800d1aa <__swbuf_r+0x6e>
 800d1a0:	89a3      	ldrh	r3, [r4, #12]
 800d1a2:	07db      	lsls	r3, r3, #31
 800d1a4:	d5e1      	bpl.n	800d16a <__swbuf_r+0x2e>
 800d1a6:	2e0a      	cmp	r6, #10
 800d1a8:	d1df      	bne.n	800d16a <__swbuf_r+0x2e>
 800d1aa:	4621      	mov	r1, r4
 800d1ac:	4628      	mov	r0, r5
 800d1ae:	f7ff ff9d 	bl	800d0ec <_fflush_r>
 800d1b2:	2800      	cmp	r0, #0
 800d1b4:	d0d9      	beq.n	800d16a <__swbuf_r+0x2e>
 800d1b6:	e7d6      	b.n	800d166 <__swbuf_r+0x2a>

0800d1b8 <__swsetup_r>:
 800d1b8:	b538      	push	{r3, r4, r5, lr}
 800d1ba:	4b29      	ldr	r3, [pc, #164]	@ (800d260 <__swsetup_r+0xa8>)
 800d1bc:	4605      	mov	r5, r0
 800d1be:	6818      	ldr	r0, [r3, #0]
 800d1c0:	460c      	mov	r4, r1
 800d1c2:	b118      	cbz	r0, 800d1cc <__swsetup_r+0x14>
 800d1c4:	6a03      	ldr	r3, [r0, #32]
 800d1c6:	b90b      	cbnz	r3, 800d1cc <__swsetup_r+0x14>
 800d1c8:	f7fe f866 	bl	800b298 <__sinit>
 800d1cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d1d0:	0719      	lsls	r1, r3, #28
 800d1d2:	d422      	bmi.n	800d21a <__swsetup_r+0x62>
 800d1d4:	06da      	lsls	r2, r3, #27
 800d1d6:	d407      	bmi.n	800d1e8 <__swsetup_r+0x30>
 800d1d8:	2209      	movs	r2, #9
 800d1da:	602a      	str	r2, [r5, #0]
 800d1dc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d1e0:	81a3      	strh	r3, [r4, #12]
 800d1e2:	f04f 30ff 	mov.w	r0, #4294967295
 800d1e6:	e033      	b.n	800d250 <__swsetup_r+0x98>
 800d1e8:	0758      	lsls	r0, r3, #29
 800d1ea:	d512      	bpl.n	800d212 <__swsetup_r+0x5a>
 800d1ec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d1ee:	b141      	cbz	r1, 800d202 <__swsetup_r+0x4a>
 800d1f0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d1f4:	4299      	cmp	r1, r3
 800d1f6:	d002      	beq.n	800d1fe <__swsetup_r+0x46>
 800d1f8:	4628      	mov	r0, r5
 800d1fa:	f7fe f9c9 	bl	800b590 <_free_r>
 800d1fe:	2300      	movs	r3, #0
 800d200:	6363      	str	r3, [r4, #52]	@ 0x34
 800d202:	89a3      	ldrh	r3, [r4, #12]
 800d204:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d208:	81a3      	strh	r3, [r4, #12]
 800d20a:	2300      	movs	r3, #0
 800d20c:	6063      	str	r3, [r4, #4]
 800d20e:	6923      	ldr	r3, [r4, #16]
 800d210:	6023      	str	r3, [r4, #0]
 800d212:	89a3      	ldrh	r3, [r4, #12]
 800d214:	f043 0308 	orr.w	r3, r3, #8
 800d218:	81a3      	strh	r3, [r4, #12]
 800d21a:	6923      	ldr	r3, [r4, #16]
 800d21c:	b94b      	cbnz	r3, 800d232 <__swsetup_r+0x7a>
 800d21e:	89a3      	ldrh	r3, [r4, #12]
 800d220:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d224:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d228:	d003      	beq.n	800d232 <__swsetup_r+0x7a>
 800d22a:	4621      	mov	r1, r4
 800d22c:	4628      	mov	r0, r5
 800d22e:	f000 f8e3 	bl	800d3f8 <__smakebuf_r>
 800d232:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d236:	f013 0201 	ands.w	r2, r3, #1
 800d23a:	d00a      	beq.n	800d252 <__swsetup_r+0x9a>
 800d23c:	2200      	movs	r2, #0
 800d23e:	60a2      	str	r2, [r4, #8]
 800d240:	6962      	ldr	r2, [r4, #20]
 800d242:	4252      	negs	r2, r2
 800d244:	61a2      	str	r2, [r4, #24]
 800d246:	6922      	ldr	r2, [r4, #16]
 800d248:	b942      	cbnz	r2, 800d25c <__swsetup_r+0xa4>
 800d24a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d24e:	d1c5      	bne.n	800d1dc <__swsetup_r+0x24>
 800d250:	bd38      	pop	{r3, r4, r5, pc}
 800d252:	0799      	lsls	r1, r3, #30
 800d254:	bf58      	it	pl
 800d256:	6962      	ldrpl	r2, [r4, #20]
 800d258:	60a2      	str	r2, [r4, #8]
 800d25a:	e7f4      	b.n	800d246 <__swsetup_r+0x8e>
 800d25c:	2000      	movs	r0, #0
 800d25e:	e7f7      	b.n	800d250 <__swsetup_r+0x98>
 800d260:	200001a8 	.word	0x200001a8

0800d264 <memmove>:
 800d264:	4288      	cmp	r0, r1
 800d266:	b510      	push	{r4, lr}
 800d268:	eb01 0402 	add.w	r4, r1, r2
 800d26c:	d902      	bls.n	800d274 <memmove+0x10>
 800d26e:	4284      	cmp	r4, r0
 800d270:	4623      	mov	r3, r4
 800d272:	d807      	bhi.n	800d284 <memmove+0x20>
 800d274:	1e43      	subs	r3, r0, #1
 800d276:	42a1      	cmp	r1, r4
 800d278:	d008      	beq.n	800d28c <memmove+0x28>
 800d27a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d27e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d282:	e7f8      	b.n	800d276 <memmove+0x12>
 800d284:	4402      	add	r2, r0
 800d286:	4601      	mov	r1, r0
 800d288:	428a      	cmp	r2, r1
 800d28a:	d100      	bne.n	800d28e <memmove+0x2a>
 800d28c:	bd10      	pop	{r4, pc}
 800d28e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d292:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d296:	e7f7      	b.n	800d288 <memmove+0x24>

0800d298 <_sbrk_r>:
 800d298:	b538      	push	{r3, r4, r5, lr}
 800d29a:	4d06      	ldr	r5, [pc, #24]	@ (800d2b4 <_sbrk_r+0x1c>)
 800d29c:	2300      	movs	r3, #0
 800d29e:	4604      	mov	r4, r0
 800d2a0:	4608      	mov	r0, r1
 800d2a2:	602b      	str	r3, [r5, #0]
 800d2a4:	f7f5 fa2a 	bl	80026fc <_sbrk>
 800d2a8:	1c43      	adds	r3, r0, #1
 800d2aa:	d102      	bne.n	800d2b2 <_sbrk_r+0x1a>
 800d2ac:	682b      	ldr	r3, [r5, #0]
 800d2ae:	b103      	cbz	r3, 800d2b2 <_sbrk_r+0x1a>
 800d2b0:	6023      	str	r3, [r4, #0]
 800d2b2:	bd38      	pop	{r3, r4, r5, pc}
 800d2b4:	20000788 	.word	0x20000788

0800d2b8 <__assert_func>:
 800d2b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d2ba:	4614      	mov	r4, r2
 800d2bc:	461a      	mov	r2, r3
 800d2be:	4b09      	ldr	r3, [pc, #36]	@ (800d2e4 <__assert_func+0x2c>)
 800d2c0:	681b      	ldr	r3, [r3, #0]
 800d2c2:	4605      	mov	r5, r0
 800d2c4:	68d8      	ldr	r0, [r3, #12]
 800d2c6:	b954      	cbnz	r4, 800d2de <__assert_func+0x26>
 800d2c8:	4b07      	ldr	r3, [pc, #28]	@ (800d2e8 <__assert_func+0x30>)
 800d2ca:	461c      	mov	r4, r3
 800d2cc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d2d0:	9100      	str	r1, [sp, #0]
 800d2d2:	462b      	mov	r3, r5
 800d2d4:	4905      	ldr	r1, [pc, #20]	@ (800d2ec <__assert_func+0x34>)
 800d2d6:	f000 f857 	bl	800d388 <fiprintf>
 800d2da:	f000 f8eb 	bl	800d4b4 <abort>
 800d2de:	4b04      	ldr	r3, [pc, #16]	@ (800d2f0 <__assert_func+0x38>)
 800d2e0:	e7f4      	b.n	800d2cc <__assert_func+0x14>
 800d2e2:	bf00      	nop
 800d2e4:	200001a8 	.word	0x200001a8
 800d2e8:	0800dd66 	.word	0x0800dd66
 800d2ec:	0800dd38 	.word	0x0800dd38
 800d2f0:	0800dd2b 	.word	0x0800dd2b

0800d2f4 <_calloc_r>:
 800d2f4:	b570      	push	{r4, r5, r6, lr}
 800d2f6:	fba1 5402 	umull	r5, r4, r1, r2
 800d2fa:	b93c      	cbnz	r4, 800d30c <_calloc_r+0x18>
 800d2fc:	4629      	mov	r1, r5
 800d2fe:	f7fe fced 	bl	800bcdc <_malloc_r>
 800d302:	4606      	mov	r6, r0
 800d304:	b928      	cbnz	r0, 800d312 <_calloc_r+0x1e>
 800d306:	2600      	movs	r6, #0
 800d308:	4630      	mov	r0, r6
 800d30a:	bd70      	pop	{r4, r5, r6, pc}
 800d30c:	220c      	movs	r2, #12
 800d30e:	6002      	str	r2, [r0, #0]
 800d310:	e7f9      	b.n	800d306 <_calloc_r+0x12>
 800d312:	462a      	mov	r2, r5
 800d314:	4621      	mov	r1, r4
 800d316:	f7fe f883 	bl	800b420 <memset>
 800d31a:	e7f5      	b.n	800d308 <_calloc_r+0x14>

0800d31c <malloc>:
 800d31c:	4b02      	ldr	r3, [pc, #8]	@ (800d328 <malloc+0xc>)
 800d31e:	4601      	mov	r1, r0
 800d320:	6818      	ldr	r0, [r3, #0]
 800d322:	f7fe bcdb 	b.w	800bcdc <_malloc_r>
 800d326:	bf00      	nop
 800d328:	200001a8 	.word	0x200001a8

0800d32c <_realloc_r>:
 800d32c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d330:	4680      	mov	r8, r0
 800d332:	4615      	mov	r5, r2
 800d334:	460c      	mov	r4, r1
 800d336:	b921      	cbnz	r1, 800d342 <_realloc_r+0x16>
 800d338:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d33c:	4611      	mov	r1, r2
 800d33e:	f7fe bccd 	b.w	800bcdc <_malloc_r>
 800d342:	b92a      	cbnz	r2, 800d350 <_realloc_r+0x24>
 800d344:	f7fe f924 	bl	800b590 <_free_r>
 800d348:	2400      	movs	r4, #0
 800d34a:	4620      	mov	r0, r4
 800d34c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d350:	f000 f8b7 	bl	800d4c2 <_malloc_usable_size_r>
 800d354:	4285      	cmp	r5, r0
 800d356:	4606      	mov	r6, r0
 800d358:	d802      	bhi.n	800d360 <_realloc_r+0x34>
 800d35a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800d35e:	d8f4      	bhi.n	800d34a <_realloc_r+0x1e>
 800d360:	4629      	mov	r1, r5
 800d362:	4640      	mov	r0, r8
 800d364:	f7fe fcba 	bl	800bcdc <_malloc_r>
 800d368:	4607      	mov	r7, r0
 800d36a:	2800      	cmp	r0, #0
 800d36c:	d0ec      	beq.n	800d348 <_realloc_r+0x1c>
 800d36e:	42b5      	cmp	r5, r6
 800d370:	462a      	mov	r2, r5
 800d372:	4621      	mov	r1, r4
 800d374:	bf28      	it	cs
 800d376:	4632      	movcs	r2, r6
 800d378:	f7fe f8f3 	bl	800b562 <memcpy>
 800d37c:	4621      	mov	r1, r4
 800d37e:	4640      	mov	r0, r8
 800d380:	f7fe f906 	bl	800b590 <_free_r>
 800d384:	463c      	mov	r4, r7
 800d386:	e7e0      	b.n	800d34a <_realloc_r+0x1e>

0800d388 <fiprintf>:
 800d388:	b40e      	push	{r1, r2, r3}
 800d38a:	b503      	push	{r0, r1, lr}
 800d38c:	4601      	mov	r1, r0
 800d38e:	ab03      	add	r3, sp, #12
 800d390:	4805      	ldr	r0, [pc, #20]	@ (800d3a8 <fiprintf+0x20>)
 800d392:	f853 2b04 	ldr.w	r2, [r3], #4
 800d396:	6800      	ldr	r0, [r0, #0]
 800d398:	9301      	str	r3, [sp, #4]
 800d39a:	f7ff fb7d 	bl	800ca98 <_vfiprintf_r>
 800d39e:	b002      	add	sp, #8
 800d3a0:	f85d eb04 	ldr.w	lr, [sp], #4
 800d3a4:	b003      	add	sp, #12
 800d3a6:	4770      	bx	lr
 800d3a8:	200001a8 	.word	0x200001a8

0800d3ac <__swhatbuf_r>:
 800d3ac:	b570      	push	{r4, r5, r6, lr}
 800d3ae:	460c      	mov	r4, r1
 800d3b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d3b4:	2900      	cmp	r1, #0
 800d3b6:	b096      	sub	sp, #88	@ 0x58
 800d3b8:	4615      	mov	r5, r2
 800d3ba:	461e      	mov	r6, r3
 800d3bc:	da0d      	bge.n	800d3da <__swhatbuf_r+0x2e>
 800d3be:	89a3      	ldrh	r3, [r4, #12]
 800d3c0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d3c4:	f04f 0100 	mov.w	r1, #0
 800d3c8:	bf14      	ite	ne
 800d3ca:	2340      	movne	r3, #64	@ 0x40
 800d3cc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d3d0:	2000      	movs	r0, #0
 800d3d2:	6031      	str	r1, [r6, #0]
 800d3d4:	602b      	str	r3, [r5, #0]
 800d3d6:	b016      	add	sp, #88	@ 0x58
 800d3d8:	bd70      	pop	{r4, r5, r6, pc}
 800d3da:	466a      	mov	r2, sp
 800d3dc:	f000 f848 	bl	800d470 <_fstat_r>
 800d3e0:	2800      	cmp	r0, #0
 800d3e2:	dbec      	blt.n	800d3be <__swhatbuf_r+0x12>
 800d3e4:	9901      	ldr	r1, [sp, #4]
 800d3e6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d3ea:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d3ee:	4259      	negs	r1, r3
 800d3f0:	4159      	adcs	r1, r3
 800d3f2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d3f6:	e7eb      	b.n	800d3d0 <__swhatbuf_r+0x24>

0800d3f8 <__smakebuf_r>:
 800d3f8:	898b      	ldrh	r3, [r1, #12]
 800d3fa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d3fc:	079d      	lsls	r5, r3, #30
 800d3fe:	4606      	mov	r6, r0
 800d400:	460c      	mov	r4, r1
 800d402:	d507      	bpl.n	800d414 <__smakebuf_r+0x1c>
 800d404:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d408:	6023      	str	r3, [r4, #0]
 800d40a:	6123      	str	r3, [r4, #16]
 800d40c:	2301      	movs	r3, #1
 800d40e:	6163      	str	r3, [r4, #20]
 800d410:	b003      	add	sp, #12
 800d412:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d414:	ab01      	add	r3, sp, #4
 800d416:	466a      	mov	r2, sp
 800d418:	f7ff ffc8 	bl	800d3ac <__swhatbuf_r>
 800d41c:	9f00      	ldr	r7, [sp, #0]
 800d41e:	4605      	mov	r5, r0
 800d420:	4639      	mov	r1, r7
 800d422:	4630      	mov	r0, r6
 800d424:	f7fe fc5a 	bl	800bcdc <_malloc_r>
 800d428:	b948      	cbnz	r0, 800d43e <__smakebuf_r+0x46>
 800d42a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d42e:	059a      	lsls	r2, r3, #22
 800d430:	d4ee      	bmi.n	800d410 <__smakebuf_r+0x18>
 800d432:	f023 0303 	bic.w	r3, r3, #3
 800d436:	f043 0302 	orr.w	r3, r3, #2
 800d43a:	81a3      	strh	r3, [r4, #12]
 800d43c:	e7e2      	b.n	800d404 <__smakebuf_r+0xc>
 800d43e:	89a3      	ldrh	r3, [r4, #12]
 800d440:	6020      	str	r0, [r4, #0]
 800d442:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d446:	81a3      	strh	r3, [r4, #12]
 800d448:	9b01      	ldr	r3, [sp, #4]
 800d44a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d44e:	b15b      	cbz	r3, 800d468 <__smakebuf_r+0x70>
 800d450:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d454:	4630      	mov	r0, r6
 800d456:	f000 f81d 	bl	800d494 <_isatty_r>
 800d45a:	b128      	cbz	r0, 800d468 <__smakebuf_r+0x70>
 800d45c:	89a3      	ldrh	r3, [r4, #12]
 800d45e:	f023 0303 	bic.w	r3, r3, #3
 800d462:	f043 0301 	orr.w	r3, r3, #1
 800d466:	81a3      	strh	r3, [r4, #12]
 800d468:	89a3      	ldrh	r3, [r4, #12]
 800d46a:	431d      	orrs	r5, r3
 800d46c:	81a5      	strh	r5, [r4, #12]
 800d46e:	e7cf      	b.n	800d410 <__smakebuf_r+0x18>

0800d470 <_fstat_r>:
 800d470:	b538      	push	{r3, r4, r5, lr}
 800d472:	4d07      	ldr	r5, [pc, #28]	@ (800d490 <_fstat_r+0x20>)
 800d474:	2300      	movs	r3, #0
 800d476:	4604      	mov	r4, r0
 800d478:	4608      	mov	r0, r1
 800d47a:	4611      	mov	r1, r2
 800d47c:	602b      	str	r3, [r5, #0]
 800d47e:	f7f5 f915 	bl	80026ac <_fstat>
 800d482:	1c43      	adds	r3, r0, #1
 800d484:	d102      	bne.n	800d48c <_fstat_r+0x1c>
 800d486:	682b      	ldr	r3, [r5, #0]
 800d488:	b103      	cbz	r3, 800d48c <_fstat_r+0x1c>
 800d48a:	6023      	str	r3, [r4, #0]
 800d48c:	bd38      	pop	{r3, r4, r5, pc}
 800d48e:	bf00      	nop
 800d490:	20000788 	.word	0x20000788

0800d494 <_isatty_r>:
 800d494:	b538      	push	{r3, r4, r5, lr}
 800d496:	4d06      	ldr	r5, [pc, #24]	@ (800d4b0 <_isatty_r+0x1c>)
 800d498:	2300      	movs	r3, #0
 800d49a:	4604      	mov	r4, r0
 800d49c:	4608      	mov	r0, r1
 800d49e:	602b      	str	r3, [r5, #0]
 800d4a0:	f7f5 f914 	bl	80026cc <_isatty>
 800d4a4:	1c43      	adds	r3, r0, #1
 800d4a6:	d102      	bne.n	800d4ae <_isatty_r+0x1a>
 800d4a8:	682b      	ldr	r3, [r5, #0]
 800d4aa:	b103      	cbz	r3, 800d4ae <_isatty_r+0x1a>
 800d4ac:	6023      	str	r3, [r4, #0]
 800d4ae:	bd38      	pop	{r3, r4, r5, pc}
 800d4b0:	20000788 	.word	0x20000788

0800d4b4 <abort>:
 800d4b4:	b508      	push	{r3, lr}
 800d4b6:	2006      	movs	r0, #6
 800d4b8:	f000 f834 	bl	800d524 <raise>
 800d4bc:	2001      	movs	r0, #1
 800d4be:	f7f5 f8a5 	bl	800260c <_exit>

0800d4c2 <_malloc_usable_size_r>:
 800d4c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d4c6:	1f18      	subs	r0, r3, #4
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	bfbc      	itt	lt
 800d4cc:	580b      	ldrlt	r3, [r1, r0]
 800d4ce:	18c0      	addlt	r0, r0, r3
 800d4d0:	4770      	bx	lr

0800d4d2 <_raise_r>:
 800d4d2:	291f      	cmp	r1, #31
 800d4d4:	b538      	push	{r3, r4, r5, lr}
 800d4d6:	4605      	mov	r5, r0
 800d4d8:	460c      	mov	r4, r1
 800d4da:	d904      	bls.n	800d4e6 <_raise_r+0x14>
 800d4dc:	2316      	movs	r3, #22
 800d4de:	6003      	str	r3, [r0, #0]
 800d4e0:	f04f 30ff 	mov.w	r0, #4294967295
 800d4e4:	bd38      	pop	{r3, r4, r5, pc}
 800d4e6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d4e8:	b112      	cbz	r2, 800d4f0 <_raise_r+0x1e>
 800d4ea:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d4ee:	b94b      	cbnz	r3, 800d504 <_raise_r+0x32>
 800d4f0:	4628      	mov	r0, r5
 800d4f2:	f000 f831 	bl	800d558 <_getpid_r>
 800d4f6:	4622      	mov	r2, r4
 800d4f8:	4601      	mov	r1, r0
 800d4fa:	4628      	mov	r0, r5
 800d4fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d500:	f000 b818 	b.w	800d534 <_kill_r>
 800d504:	2b01      	cmp	r3, #1
 800d506:	d00a      	beq.n	800d51e <_raise_r+0x4c>
 800d508:	1c59      	adds	r1, r3, #1
 800d50a:	d103      	bne.n	800d514 <_raise_r+0x42>
 800d50c:	2316      	movs	r3, #22
 800d50e:	6003      	str	r3, [r0, #0]
 800d510:	2001      	movs	r0, #1
 800d512:	e7e7      	b.n	800d4e4 <_raise_r+0x12>
 800d514:	2100      	movs	r1, #0
 800d516:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d51a:	4620      	mov	r0, r4
 800d51c:	4798      	blx	r3
 800d51e:	2000      	movs	r0, #0
 800d520:	e7e0      	b.n	800d4e4 <_raise_r+0x12>
	...

0800d524 <raise>:
 800d524:	4b02      	ldr	r3, [pc, #8]	@ (800d530 <raise+0xc>)
 800d526:	4601      	mov	r1, r0
 800d528:	6818      	ldr	r0, [r3, #0]
 800d52a:	f7ff bfd2 	b.w	800d4d2 <_raise_r>
 800d52e:	bf00      	nop
 800d530:	200001a8 	.word	0x200001a8

0800d534 <_kill_r>:
 800d534:	b538      	push	{r3, r4, r5, lr}
 800d536:	4d07      	ldr	r5, [pc, #28]	@ (800d554 <_kill_r+0x20>)
 800d538:	2300      	movs	r3, #0
 800d53a:	4604      	mov	r4, r0
 800d53c:	4608      	mov	r0, r1
 800d53e:	4611      	mov	r1, r2
 800d540:	602b      	str	r3, [r5, #0]
 800d542:	f7f5 f853 	bl	80025ec <_kill>
 800d546:	1c43      	adds	r3, r0, #1
 800d548:	d102      	bne.n	800d550 <_kill_r+0x1c>
 800d54a:	682b      	ldr	r3, [r5, #0]
 800d54c:	b103      	cbz	r3, 800d550 <_kill_r+0x1c>
 800d54e:	6023      	str	r3, [r4, #0]
 800d550:	bd38      	pop	{r3, r4, r5, pc}
 800d552:	bf00      	nop
 800d554:	20000788 	.word	0x20000788

0800d558 <_getpid_r>:
 800d558:	f7f5 b840 	b.w	80025dc <_getpid>

0800d55c <sqrt>:
 800d55c:	b538      	push	{r3, r4, r5, lr}
 800d55e:	ed2d 8b02 	vpush	{d8}
 800d562:	ec55 4b10 	vmov	r4, r5, d0
 800d566:	f000 f825 	bl	800d5b4 <__ieee754_sqrt>
 800d56a:	4622      	mov	r2, r4
 800d56c:	462b      	mov	r3, r5
 800d56e:	4620      	mov	r0, r4
 800d570:	4629      	mov	r1, r5
 800d572:	eeb0 8a40 	vmov.f32	s16, s0
 800d576:	eef0 8a60 	vmov.f32	s17, s1
 800d57a:	f7f3 fae7 	bl	8000b4c <__aeabi_dcmpun>
 800d57e:	b990      	cbnz	r0, 800d5a6 <sqrt+0x4a>
 800d580:	2200      	movs	r2, #0
 800d582:	2300      	movs	r3, #0
 800d584:	4620      	mov	r0, r4
 800d586:	4629      	mov	r1, r5
 800d588:	f7f3 fab8 	bl	8000afc <__aeabi_dcmplt>
 800d58c:	b158      	cbz	r0, 800d5a6 <sqrt+0x4a>
 800d58e:	f7fd ffbb 	bl	800b508 <__errno>
 800d592:	2321      	movs	r3, #33	@ 0x21
 800d594:	6003      	str	r3, [r0, #0]
 800d596:	2200      	movs	r2, #0
 800d598:	2300      	movs	r3, #0
 800d59a:	4610      	mov	r0, r2
 800d59c:	4619      	mov	r1, r3
 800d59e:	f7f3 f965 	bl	800086c <__aeabi_ddiv>
 800d5a2:	ec41 0b18 	vmov	d8, r0, r1
 800d5a6:	eeb0 0a48 	vmov.f32	s0, s16
 800d5aa:	eef0 0a68 	vmov.f32	s1, s17
 800d5ae:	ecbd 8b02 	vpop	{d8}
 800d5b2:	bd38      	pop	{r3, r4, r5, pc}

0800d5b4 <__ieee754_sqrt>:
 800d5b4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5b8:	4a68      	ldr	r2, [pc, #416]	@ (800d75c <__ieee754_sqrt+0x1a8>)
 800d5ba:	ec55 4b10 	vmov	r4, r5, d0
 800d5be:	43aa      	bics	r2, r5
 800d5c0:	462b      	mov	r3, r5
 800d5c2:	4621      	mov	r1, r4
 800d5c4:	d110      	bne.n	800d5e8 <__ieee754_sqrt+0x34>
 800d5c6:	4622      	mov	r2, r4
 800d5c8:	4620      	mov	r0, r4
 800d5ca:	4629      	mov	r1, r5
 800d5cc:	f7f3 f824 	bl	8000618 <__aeabi_dmul>
 800d5d0:	4602      	mov	r2, r0
 800d5d2:	460b      	mov	r3, r1
 800d5d4:	4620      	mov	r0, r4
 800d5d6:	4629      	mov	r1, r5
 800d5d8:	f7f2 fe68 	bl	80002ac <__adddf3>
 800d5dc:	4604      	mov	r4, r0
 800d5de:	460d      	mov	r5, r1
 800d5e0:	ec45 4b10 	vmov	d0, r4, r5
 800d5e4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5e8:	2d00      	cmp	r5, #0
 800d5ea:	dc0e      	bgt.n	800d60a <__ieee754_sqrt+0x56>
 800d5ec:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800d5f0:	4322      	orrs	r2, r4
 800d5f2:	d0f5      	beq.n	800d5e0 <__ieee754_sqrt+0x2c>
 800d5f4:	b19d      	cbz	r5, 800d61e <__ieee754_sqrt+0x6a>
 800d5f6:	4622      	mov	r2, r4
 800d5f8:	4620      	mov	r0, r4
 800d5fa:	4629      	mov	r1, r5
 800d5fc:	f7f2 fe54 	bl	80002a8 <__aeabi_dsub>
 800d600:	4602      	mov	r2, r0
 800d602:	460b      	mov	r3, r1
 800d604:	f7f3 f932 	bl	800086c <__aeabi_ddiv>
 800d608:	e7e8      	b.n	800d5dc <__ieee754_sqrt+0x28>
 800d60a:	152a      	asrs	r2, r5, #20
 800d60c:	d115      	bne.n	800d63a <__ieee754_sqrt+0x86>
 800d60e:	2000      	movs	r0, #0
 800d610:	e009      	b.n	800d626 <__ieee754_sqrt+0x72>
 800d612:	0acb      	lsrs	r3, r1, #11
 800d614:	3a15      	subs	r2, #21
 800d616:	0549      	lsls	r1, r1, #21
 800d618:	2b00      	cmp	r3, #0
 800d61a:	d0fa      	beq.n	800d612 <__ieee754_sqrt+0x5e>
 800d61c:	e7f7      	b.n	800d60e <__ieee754_sqrt+0x5a>
 800d61e:	462a      	mov	r2, r5
 800d620:	e7fa      	b.n	800d618 <__ieee754_sqrt+0x64>
 800d622:	005b      	lsls	r3, r3, #1
 800d624:	3001      	adds	r0, #1
 800d626:	02dc      	lsls	r4, r3, #11
 800d628:	d5fb      	bpl.n	800d622 <__ieee754_sqrt+0x6e>
 800d62a:	1e44      	subs	r4, r0, #1
 800d62c:	1b12      	subs	r2, r2, r4
 800d62e:	f1c0 0420 	rsb	r4, r0, #32
 800d632:	fa21 f404 	lsr.w	r4, r1, r4
 800d636:	4323      	orrs	r3, r4
 800d638:	4081      	lsls	r1, r0
 800d63a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d63e:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800d642:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d646:	07d2      	lsls	r2, r2, #31
 800d648:	bf5c      	itt	pl
 800d64a:	005b      	lslpl	r3, r3, #1
 800d64c:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800d650:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800d654:	bf58      	it	pl
 800d656:	0049      	lslpl	r1, r1, #1
 800d658:	2600      	movs	r6, #0
 800d65a:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800d65e:	106d      	asrs	r5, r5, #1
 800d660:	0049      	lsls	r1, r1, #1
 800d662:	2016      	movs	r0, #22
 800d664:	4632      	mov	r2, r6
 800d666:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800d66a:	1917      	adds	r7, r2, r4
 800d66c:	429f      	cmp	r7, r3
 800d66e:	bfde      	ittt	le
 800d670:	193a      	addle	r2, r7, r4
 800d672:	1bdb      	suble	r3, r3, r7
 800d674:	1936      	addle	r6, r6, r4
 800d676:	0fcf      	lsrs	r7, r1, #31
 800d678:	3801      	subs	r0, #1
 800d67a:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800d67e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800d682:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800d686:	d1f0      	bne.n	800d66a <__ieee754_sqrt+0xb6>
 800d688:	4604      	mov	r4, r0
 800d68a:	2720      	movs	r7, #32
 800d68c:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800d690:	429a      	cmp	r2, r3
 800d692:	eb00 0e0c 	add.w	lr, r0, ip
 800d696:	db02      	blt.n	800d69e <__ieee754_sqrt+0xea>
 800d698:	d113      	bne.n	800d6c2 <__ieee754_sqrt+0x10e>
 800d69a:	458e      	cmp	lr, r1
 800d69c:	d811      	bhi.n	800d6c2 <__ieee754_sqrt+0x10e>
 800d69e:	f1be 0f00 	cmp.w	lr, #0
 800d6a2:	eb0e 000c 	add.w	r0, lr, ip
 800d6a6:	da42      	bge.n	800d72e <__ieee754_sqrt+0x17a>
 800d6a8:	2800      	cmp	r0, #0
 800d6aa:	db40      	blt.n	800d72e <__ieee754_sqrt+0x17a>
 800d6ac:	f102 0801 	add.w	r8, r2, #1
 800d6b0:	1a9b      	subs	r3, r3, r2
 800d6b2:	458e      	cmp	lr, r1
 800d6b4:	bf88      	it	hi
 800d6b6:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800d6ba:	eba1 010e 	sub.w	r1, r1, lr
 800d6be:	4464      	add	r4, ip
 800d6c0:	4642      	mov	r2, r8
 800d6c2:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800d6c6:	3f01      	subs	r7, #1
 800d6c8:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800d6cc:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800d6d0:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800d6d4:	d1dc      	bne.n	800d690 <__ieee754_sqrt+0xdc>
 800d6d6:	4319      	orrs	r1, r3
 800d6d8:	d01b      	beq.n	800d712 <__ieee754_sqrt+0x15e>
 800d6da:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800d760 <__ieee754_sqrt+0x1ac>
 800d6de:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800d764 <__ieee754_sqrt+0x1b0>
 800d6e2:	e9da 0100 	ldrd	r0, r1, [sl]
 800d6e6:	e9db 2300 	ldrd	r2, r3, [fp]
 800d6ea:	f7f2 fddd 	bl	80002a8 <__aeabi_dsub>
 800d6ee:	e9da 8900 	ldrd	r8, r9, [sl]
 800d6f2:	4602      	mov	r2, r0
 800d6f4:	460b      	mov	r3, r1
 800d6f6:	4640      	mov	r0, r8
 800d6f8:	4649      	mov	r1, r9
 800d6fa:	f7f3 fa09 	bl	8000b10 <__aeabi_dcmple>
 800d6fe:	b140      	cbz	r0, 800d712 <__ieee754_sqrt+0x15e>
 800d700:	f1b4 3fff 	cmp.w	r4, #4294967295
 800d704:	e9da 0100 	ldrd	r0, r1, [sl]
 800d708:	e9db 2300 	ldrd	r2, r3, [fp]
 800d70c:	d111      	bne.n	800d732 <__ieee754_sqrt+0x17e>
 800d70e:	3601      	adds	r6, #1
 800d710:	463c      	mov	r4, r7
 800d712:	1072      	asrs	r2, r6, #1
 800d714:	0863      	lsrs	r3, r4, #1
 800d716:	07f1      	lsls	r1, r6, #31
 800d718:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800d71c:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800d720:	bf48      	it	mi
 800d722:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800d726:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800d72a:	4618      	mov	r0, r3
 800d72c:	e756      	b.n	800d5dc <__ieee754_sqrt+0x28>
 800d72e:	4690      	mov	r8, r2
 800d730:	e7be      	b.n	800d6b0 <__ieee754_sqrt+0xfc>
 800d732:	f7f2 fdbb 	bl	80002ac <__adddf3>
 800d736:	e9da 8900 	ldrd	r8, r9, [sl]
 800d73a:	4602      	mov	r2, r0
 800d73c:	460b      	mov	r3, r1
 800d73e:	4640      	mov	r0, r8
 800d740:	4649      	mov	r1, r9
 800d742:	f7f3 f9db 	bl	8000afc <__aeabi_dcmplt>
 800d746:	b120      	cbz	r0, 800d752 <__ieee754_sqrt+0x19e>
 800d748:	1ca0      	adds	r0, r4, #2
 800d74a:	bf08      	it	eq
 800d74c:	3601      	addeq	r6, #1
 800d74e:	3402      	adds	r4, #2
 800d750:	e7df      	b.n	800d712 <__ieee754_sqrt+0x15e>
 800d752:	1c63      	adds	r3, r4, #1
 800d754:	f023 0401 	bic.w	r4, r3, #1
 800d758:	e7db      	b.n	800d712 <__ieee754_sqrt+0x15e>
 800d75a:	bf00      	nop
 800d75c:	7ff00000 	.word	0x7ff00000
 800d760:	20000200 	.word	0x20000200
 800d764:	200001f8 	.word	0x200001f8

0800d768 <_init>:
 800d768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d76a:	bf00      	nop
 800d76c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d76e:	bc08      	pop	{r3}
 800d770:	469e      	mov	lr, r3
 800d772:	4770      	bx	lr

0800d774 <_fini>:
 800d774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d776:	bf00      	nop
 800d778:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d77a:	bc08      	pop	{r3}
 800d77c:	469e      	mov	lr, r3
 800d77e:	4770      	bx	lr
>>>>>>> Stashed changes
