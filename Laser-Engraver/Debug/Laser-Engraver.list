
Laser-Engraver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011b6c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000670  08011d00  08011d00  00012d00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012370  08012370  000141fc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08012370  08012370  00013370  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012378  08012378  000141fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012378  08012378  00013378  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801237c  0801237c  0001337c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001fc  20000000  08012380  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003c8c  200001fc  0801257c  000141fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003e88  0801257c  00014e88  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000141fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00026139  00000000  00000000  0001422c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004faf  00000000  00000000  0003a365  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002100  00000000  00000000  0003f318  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000019bf  00000000  00000000  00041418  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000076bc  00000000  00000000  00042dd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00029665  00000000  00000000  0004a493  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00106bf5  00000000  00000000  00073af8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0017a6ed  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a074  00000000  00000000  0017a730  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  001847a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001fc 	.word	0x200001fc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08011ce4 	.word	0x08011ce4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000200 	.word	0x20000200
 80001cc:	08011ce4 	.word	0x08011ce4

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9be 	b.w	800103c <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	@ (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	468e      	mov	lr, r1
 8000d4c:	4604      	mov	r4, r0
 8000d4e:	4688      	mov	r8, r1
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d14a      	bne.n	8000dea <__udivmoddi4+0xa6>
 8000d54:	428a      	cmp	r2, r1
 8000d56:	4617      	mov	r7, r2
 8000d58:	d962      	bls.n	8000e20 <__udivmoddi4+0xdc>
 8000d5a:	fab2 f682 	clz	r6, r2
 8000d5e:	b14e      	cbz	r6, 8000d74 <__udivmoddi4+0x30>
 8000d60:	f1c6 0320 	rsb	r3, r6, #32
 8000d64:	fa01 f806 	lsl.w	r8, r1, r6
 8000d68:	fa20 f303 	lsr.w	r3, r0, r3
 8000d6c:	40b7      	lsls	r7, r6
 8000d6e:	ea43 0808 	orr.w	r8, r3, r8
 8000d72:	40b4      	lsls	r4, r6
 8000d74:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d78:	fa1f fc87 	uxth.w	ip, r7
 8000d7c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d80:	0c23      	lsrs	r3, r4, #16
 8000d82:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d86:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d8a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d8e:	429a      	cmp	r2, r3
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0x62>
 8000d92:	18fb      	adds	r3, r7, r3
 8000d94:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d98:	f080 80ea 	bcs.w	8000f70 <__udivmoddi4+0x22c>
 8000d9c:	429a      	cmp	r2, r3
 8000d9e:	f240 80e7 	bls.w	8000f70 <__udivmoddi4+0x22c>
 8000da2:	3902      	subs	r1, #2
 8000da4:	443b      	add	r3, r7
 8000da6:	1a9a      	subs	r2, r3, r2
 8000da8:	b2a3      	uxth	r3, r4
 8000daa:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dae:	fb0e 2210 	mls	r2, lr, r0, r2
 8000db2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000db6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000dba:	459c      	cmp	ip, r3
 8000dbc:	d909      	bls.n	8000dd2 <__udivmoddi4+0x8e>
 8000dbe:	18fb      	adds	r3, r7, r3
 8000dc0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dc4:	f080 80d6 	bcs.w	8000f74 <__udivmoddi4+0x230>
 8000dc8:	459c      	cmp	ip, r3
 8000dca:	f240 80d3 	bls.w	8000f74 <__udivmoddi4+0x230>
 8000dce:	443b      	add	r3, r7
 8000dd0:	3802      	subs	r0, #2
 8000dd2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dd6:	eba3 030c 	sub.w	r3, r3, ip
 8000dda:	2100      	movs	r1, #0
 8000ddc:	b11d      	cbz	r5, 8000de6 <__udivmoddi4+0xa2>
 8000dde:	40f3      	lsrs	r3, r6
 8000de0:	2200      	movs	r2, #0
 8000de2:	e9c5 3200 	strd	r3, r2, [r5]
 8000de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dea:	428b      	cmp	r3, r1
 8000dec:	d905      	bls.n	8000dfa <__udivmoddi4+0xb6>
 8000dee:	b10d      	cbz	r5, 8000df4 <__udivmoddi4+0xb0>
 8000df0:	e9c5 0100 	strd	r0, r1, [r5]
 8000df4:	2100      	movs	r1, #0
 8000df6:	4608      	mov	r0, r1
 8000df8:	e7f5      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000dfa:	fab3 f183 	clz	r1, r3
 8000dfe:	2900      	cmp	r1, #0
 8000e00:	d146      	bne.n	8000e90 <__udivmoddi4+0x14c>
 8000e02:	4573      	cmp	r3, lr
 8000e04:	d302      	bcc.n	8000e0c <__udivmoddi4+0xc8>
 8000e06:	4282      	cmp	r2, r0
 8000e08:	f200 8105 	bhi.w	8001016 <__udivmoddi4+0x2d2>
 8000e0c:	1a84      	subs	r4, r0, r2
 8000e0e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e12:	2001      	movs	r0, #1
 8000e14:	4690      	mov	r8, r2
 8000e16:	2d00      	cmp	r5, #0
 8000e18:	d0e5      	beq.n	8000de6 <__udivmoddi4+0xa2>
 8000e1a:	e9c5 4800 	strd	r4, r8, [r5]
 8000e1e:	e7e2      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000e20:	2a00      	cmp	r2, #0
 8000e22:	f000 8090 	beq.w	8000f46 <__udivmoddi4+0x202>
 8000e26:	fab2 f682 	clz	r6, r2
 8000e2a:	2e00      	cmp	r6, #0
 8000e2c:	f040 80a4 	bne.w	8000f78 <__udivmoddi4+0x234>
 8000e30:	1a8a      	subs	r2, r1, r2
 8000e32:	0c03      	lsrs	r3, r0, #16
 8000e34:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e38:	b280      	uxth	r0, r0
 8000e3a:	b2bc      	uxth	r4, r7
 8000e3c:	2101      	movs	r1, #1
 8000e3e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e42:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e4a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e4e:	429a      	cmp	r2, r3
 8000e50:	d907      	bls.n	8000e62 <__udivmoddi4+0x11e>
 8000e52:	18fb      	adds	r3, r7, r3
 8000e54:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e58:	d202      	bcs.n	8000e60 <__udivmoddi4+0x11c>
 8000e5a:	429a      	cmp	r2, r3
 8000e5c:	f200 80e0 	bhi.w	8001020 <__udivmoddi4+0x2dc>
 8000e60:	46c4      	mov	ip, r8
 8000e62:	1a9b      	subs	r3, r3, r2
 8000e64:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e68:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e6c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e70:	fb02 f404 	mul.w	r4, r2, r4
 8000e74:	429c      	cmp	r4, r3
 8000e76:	d907      	bls.n	8000e88 <__udivmoddi4+0x144>
 8000e78:	18fb      	adds	r3, r7, r3
 8000e7a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e7e:	d202      	bcs.n	8000e86 <__udivmoddi4+0x142>
 8000e80:	429c      	cmp	r4, r3
 8000e82:	f200 80ca 	bhi.w	800101a <__udivmoddi4+0x2d6>
 8000e86:	4602      	mov	r2, r0
 8000e88:	1b1b      	subs	r3, r3, r4
 8000e8a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e8e:	e7a5      	b.n	8000ddc <__udivmoddi4+0x98>
 8000e90:	f1c1 0620 	rsb	r6, r1, #32
 8000e94:	408b      	lsls	r3, r1
 8000e96:	fa22 f706 	lsr.w	r7, r2, r6
 8000e9a:	431f      	orrs	r7, r3
 8000e9c:	fa0e f401 	lsl.w	r4, lr, r1
 8000ea0:	fa20 f306 	lsr.w	r3, r0, r6
 8000ea4:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ea8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000eac:	4323      	orrs	r3, r4
 8000eae:	fa00 f801 	lsl.w	r8, r0, r1
 8000eb2:	fa1f fc87 	uxth.w	ip, r7
 8000eb6:	fbbe f0f9 	udiv	r0, lr, r9
 8000eba:	0c1c      	lsrs	r4, r3, #16
 8000ebc:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ec0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ec4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ec8:	45a6      	cmp	lr, r4
 8000eca:	fa02 f201 	lsl.w	r2, r2, r1
 8000ece:	d909      	bls.n	8000ee4 <__udivmoddi4+0x1a0>
 8000ed0:	193c      	adds	r4, r7, r4
 8000ed2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000ed6:	f080 809c 	bcs.w	8001012 <__udivmoddi4+0x2ce>
 8000eda:	45a6      	cmp	lr, r4
 8000edc:	f240 8099 	bls.w	8001012 <__udivmoddi4+0x2ce>
 8000ee0:	3802      	subs	r0, #2
 8000ee2:	443c      	add	r4, r7
 8000ee4:	eba4 040e 	sub.w	r4, r4, lr
 8000ee8:	fa1f fe83 	uxth.w	lr, r3
 8000eec:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ef0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ef4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ef8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000efc:	45a4      	cmp	ip, r4
 8000efe:	d908      	bls.n	8000f12 <__udivmoddi4+0x1ce>
 8000f00:	193c      	adds	r4, r7, r4
 8000f02:	f103 3eff 	add.w	lr, r3, #4294967295
 8000f06:	f080 8082 	bcs.w	800100e <__udivmoddi4+0x2ca>
 8000f0a:	45a4      	cmp	ip, r4
 8000f0c:	d97f      	bls.n	800100e <__udivmoddi4+0x2ca>
 8000f0e:	3b02      	subs	r3, #2
 8000f10:	443c      	add	r4, r7
 8000f12:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f16:	eba4 040c 	sub.w	r4, r4, ip
 8000f1a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f1e:	4564      	cmp	r4, ip
 8000f20:	4673      	mov	r3, lr
 8000f22:	46e1      	mov	r9, ip
 8000f24:	d362      	bcc.n	8000fec <__udivmoddi4+0x2a8>
 8000f26:	d05f      	beq.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f28:	b15d      	cbz	r5, 8000f42 <__udivmoddi4+0x1fe>
 8000f2a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f2e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f32:	fa04 f606 	lsl.w	r6, r4, r6
 8000f36:	fa22 f301 	lsr.w	r3, r2, r1
 8000f3a:	431e      	orrs	r6, r3
 8000f3c:	40cc      	lsrs	r4, r1
 8000f3e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f42:	2100      	movs	r1, #0
 8000f44:	e74f      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000f46:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f4a:	0c01      	lsrs	r1, r0, #16
 8000f4c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f50:	b280      	uxth	r0, r0
 8000f52:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f56:	463b      	mov	r3, r7
 8000f58:	4638      	mov	r0, r7
 8000f5a:	463c      	mov	r4, r7
 8000f5c:	46b8      	mov	r8, r7
 8000f5e:	46be      	mov	lr, r7
 8000f60:	2620      	movs	r6, #32
 8000f62:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f66:	eba2 0208 	sub.w	r2, r2, r8
 8000f6a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f6e:	e766      	b.n	8000e3e <__udivmoddi4+0xfa>
 8000f70:	4601      	mov	r1, r0
 8000f72:	e718      	b.n	8000da6 <__udivmoddi4+0x62>
 8000f74:	4610      	mov	r0, r2
 8000f76:	e72c      	b.n	8000dd2 <__udivmoddi4+0x8e>
 8000f78:	f1c6 0220 	rsb	r2, r6, #32
 8000f7c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f80:	40b7      	lsls	r7, r6
 8000f82:	40b1      	lsls	r1, r6
 8000f84:	fa20 f202 	lsr.w	r2, r0, r2
 8000f88:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f8c:	430a      	orrs	r2, r1
 8000f8e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f92:	b2bc      	uxth	r4, r7
 8000f94:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f98:	0c11      	lsrs	r1, r2, #16
 8000f9a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f9e:	fb08 f904 	mul.w	r9, r8, r4
 8000fa2:	40b0      	lsls	r0, r6
 8000fa4:	4589      	cmp	r9, r1
 8000fa6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000faa:	b280      	uxth	r0, r0
 8000fac:	d93e      	bls.n	800102c <__udivmoddi4+0x2e8>
 8000fae:	1879      	adds	r1, r7, r1
 8000fb0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000fb4:	d201      	bcs.n	8000fba <__udivmoddi4+0x276>
 8000fb6:	4589      	cmp	r9, r1
 8000fb8:	d81f      	bhi.n	8000ffa <__udivmoddi4+0x2b6>
 8000fba:	eba1 0109 	sub.w	r1, r1, r9
 8000fbe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fc2:	fb09 f804 	mul.w	r8, r9, r4
 8000fc6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fca:	b292      	uxth	r2, r2
 8000fcc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fd0:	4542      	cmp	r2, r8
 8000fd2:	d229      	bcs.n	8001028 <__udivmoddi4+0x2e4>
 8000fd4:	18ba      	adds	r2, r7, r2
 8000fd6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000fda:	d2c4      	bcs.n	8000f66 <__udivmoddi4+0x222>
 8000fdc:	4542      	cmp	r2, r8
 8000fde:	d2c2      	bcs.n	8000f66 <__udivmoddi4+0x222>
 8000fe0:	f1a9 0102 	sub.w	r1, r9, #2
 8000fe4:	443a      	add	r2, r7
 8000fe6:	e7be      	b.n	8000f66 <__udivmoddi4+0x222>
 8000fe8:	45f0      	cmp	r8, lr
 8000fea:	d29d      	bcs.n	8000f28 <__udivmoddi4+0x1e4>
 8000fec:	ebbe 0302 	subs.w	r3, lr, r2
 8000ff0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ff4:	3801      	subs	r0, #1
 8000ff6:	46e1      	mov	r9, ip
 8000ff8:	e796      	b.n	8000f28 <__udivmoddi4+0x1e4>
 8000ffa:	eba7 0909 	sub.w	r9, r7, r9
 8000ffe:	4449      	add	r1, r9
 8001000:	f1a8 0c02 	sub.w	ip, r8, #2
 8001004:	fbb1 f9fe 	udiv	r9, r1, lr
 8001008:	fb09 f804 	mul.w	r8, r9, r4
 800100c:	e7db      	b.n	8000fc6 <__udivmoddi4+0x282>
 800100e:	4673      	mov	r3, lr
 8001010:	e77f      	b.n	8000f12 <__udivmoddi4+0x1ce>
 8001012:	4650      	mov	r0, sl
 8001014:	e766      	b.n	8000ee4 <__udivmoddi4+0x1a0>
 8001016:	4608      	mov	r0, r1
 8001018:	e6fd      	b.n	8000e16 <__udivmoddi4+0xd2>
 800101a:	443b      	add	r3, r7
 800101c:	3a02      	subs	r2, #2
 800101e:	e733      	b.n	8000e88 <__udivmoddi4+0x144>
 8001020:	f1ac 0c02 	sub.w	ip, ip, #2
 8001024:	443b      	add	r3, r7
 8001026:	e71c      	b.n	8000e62 <__udivmoddi4+0x11e>
 8001028:	4649      	mov	r1, r9
 800102a:	e79c      	b.n	8000f66 <__udivmoddi4+0x222>
 800102c:	eba1 0109 	sub.w	r1, r1, r9
 8001030:	46c4      	mov	ip, r8
 8001032:	fbb1 f9fe 	udiv	r9, r1, lr
 8001036:	fb09 f804 	mul.w	r8, r9, r4
 800103a:	e7c4      	b.n	8000fc6 <__udivmoddi4+0x282>

0800103c <__aeabi_idiv0>:
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop

08001040 <lcd_write_nibble>:
#define LCD_ROWS 2 // Number of rows on the LCD
#define LCD_COLS 16 // Number of columns on the LCD

uint8_t backlight_state = 1;

void lcd_write_nibble(uint8_t nibble, uint8_t rs) {
 8001040:	b580      	push	{r7, lr}
 8001042:	b086      	sub	sp, #24
 8001044:	af02      	add	r7, sp, #8
 8001046:	4603      	mov	r3, r0
 8001048:	460a      	mov	r2, r1
 800104a:	71fb      	strb	r3, [r7, #7]
 800104c:	4613      	mov	r3, r2
 800104e:	71bb      	strb	r3, [r7, #6]
 uint8_t data = nibble << D4_BIT;
 8001050:	79fb      	ldrb	r3, [r7, #7]
 8001052:	011b      	lsls	r3, r3, #4
 8001054:	b2db      	uxtb	r3, r3
 8001056:	73fb      	strb	r3, [r7, #15]
 data |= rs << RS_BIT;
 8001058:	7bfa      	ldrb	r2, [r7, #15]
 800105a:	79bb      	ldrb	r3, [r7, #6]
 800105c:	4313      	orrs	r3, r2
 800105e:	b2db      	uxtb	r3, r3
 8001060:	73fb      	strb	r3, [r7, #15]
 data |= backlight_state << BL_BIT; // Include backlight state in data
 8001062:	4b17      	ldr	r3, [pc, #92]	@ (80010c0 <lcd_write_nibble+0x80>)
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	b25b      	sxtb	r3, r3
 8001068:	00db      	lsls	r3, r3, #3
 800106a:	b25a      	sxtb	r2, r3
 800106c:	7bfb      	ldrb	r3, [r7, #15]
 800106e:	b25b      	sxtb	r3, r3
 8001070:	4313      	orrs	r3, r2
 8001072:	b25b      	sxtb	r3, r3
 8001074:	b2db      	uxtb	r3, r3
 8001076:	73fb      	strb	r3, [r7, #15]
 data |= 1 << EN_BIT;
 8001078:	7bfb      	ldrb	r3, [r7, #15]
 800107a:	f043 0304 	orr.w	r3, r3, #4
 800107e:	b2db      	uxtb	r3, r3
 8001080:	73fb      	strb	r3, [r7, #15]
 HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8001082:	f107 020f 	add.w	r2, r7, #15
 8001086:	2364      	movs	r3, #100	@ 0x64
 8001088:	9300      	str	r3, [sp, #0]
 800108a:	2301      	movs	r3, #1
 800108c:	214e      	movs	r1, #78	@ 0x4e
 800108e:	480d      	ldr	r0, [pc, #52]	@ (80010c4 <lcd_write_nibble+0x84>)
 8001090:	f002 f9c6 	bl	8003420 <HAL_I2C_Master_Transmit>
 HAL_Delay(1);
 8001094:	2001      	movs	r0, #1
 8001096:	f001 fe15 	bl	8002cc4 <HAL_Delay>
 data &= ~(1 << EN_BIT);
 800109a:	7bfb      	ldrb	r3, [r7, #15]
 800109c:	f023 0304 	bic.w	r3, r3, #4
 80010a0:	b2db      	uxtb	r3, r3
 80010a2:	73fb      	strb	r3, [r7, #15]
 HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 80010a4:	f107 020f 	add.w	r2, r7, #15
 80010a8:	2364      	movs	r3, #100	@ 0x64
 80010aa:	9300      	str	r3, [sp, #0]
 80010ac:	2301      	movs	r3, #1
 80010ae:	214e      	movs	r1, #78	@ 0x4e
 80010b0:	4804      	ldr	r0, [pc, #16]	@ (80010c4 <lcd_write_nibble+0x84>)
 80010b2:	f002 f9b5 	bl	8003420 <HAL_I2C_Master_Transmit>
}
 80010b6:	bf00      	nop
 80010b8:	3710      	adds	r7, #16
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	20000000 	.word	0x20000000
 80010c4:	20000218 	.word	0x20000218

080010c8 <lcd_write_byte>:

HAL_StatusTypeDef lcd_write_byte(uint8_t byte){
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b086      	sub	sp, #24
 80010cc:	af02      	add	r7, sp, #8
 80010ce:	4603      	mov	r3, r0
 80010d0:	71fb      	strb	r3, [r7, #7]
	char data_upper, data_lower;
	uint8_t data[4];
	data_upper = (byte&0xf0);
 80010d2:	79fb      	ldrb	r3, [r7, #7]
 80010d4:	f023 030f 	bic.w	r3, r3, #15
 80010d8:	73fb      	strb	r3, [r7, #15]
	data_lower = ((byte<<4)&0xf0);
 80010da:	79fb      	ldrb	r3, [r7, #7]
 80010dc:	011b      	lsls	r3, r3, #4
 80010de:	73bb      	strb	r3, [r7, #14]
	data[0] = data_upper|0x0D;  //en=1, rs=0 -> bxxxx1101
 80010e0:	7bfb      	ldrb	r3, [r7, #15]
 80010e2:	f043 030d 	orr.w	r3, r3, #13
 80010e6:	b2db      	uxtb	r3, r3
 80010e8:	723b      	strb	r3, [r7, #8]
	data[1] = data_upper|0x09;  //en=0, rs=0 -> bxxxx1001
 80010ea:	7bfb      	ldrb	r3, [r7, #15]
 80010ec:	f043 0309 	orr.w	r3, r3, #9
 80010f0:	b2db      	uxtb	r3, r3
 80010f2:	727b      	strb	r3, [r7, #9]
	data[2] = data_lower|0x0D;  //en=1, rs=0 -> bxxxx1101
 80010f4:	7bbb      	ldrb	r3, [r7, #14]
 80010f6:	f043 030d 	orr.w	r3, r3, #13
 80010fa:	b2db      	uxtb	r3, r3
 80010fc:	72bb      	strb	r3, [r7, #10]
	data[3] = data_lower|0x09;  //en=0, rs=0 -> bxxxx1001
 80010fe:	7bbb      	ldrb	r3, [r7, #14]
 8001100:	f043 0309 	orr.w	r3, r3, #9
 8001104:	b2db      	uxtb	r3, r3
 8001106:	72fb      	strb	r3, [r7, #11]
	return HAL_I2C_Master_Transmit (&hi2c1, I2C_ADDR << 1, (uint8_t *) data, 4, 100);
 8001108:	f107 0208 	add.w	r2, r7, #8
 800110c:	2364      	movs	r3, #100	@ 0x64
 800110e:	9300      	str	r3, [sp, #0]
 8001110:	2304      	movs	r3, #4
 8001112:	214e      	movs	r1, #78	@ 0x4e
 8001114:	4803      	ldr	r0, [pc, #12]	@ (8001124 <lcd_write_byte+0x5c>)
 8001116:	f002 f983 	bl	8003420 <HAL_I2C_Master_Transmit>
 800111a:	4603      	mov	r3, r0
}
 800111c:	4618      	mov	r0, r3
 800111e:	3710      	adds	r7, #16
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	20000218 	.word	0x20000218

08001128 <lcd_send_cmd>:
void lcd_send_cmd(uint8_t cmd) {
 8001128:	b580      	push	{r7, lr}
 800112a:	b084      	sub	sp, #16
 800112c:	af00      	add	r7, sp, #0
 800112e:	4603      	mov	r3, r0
 8001130:	71fb      	strb	r3, [r7, #7]
 uint8_t upper_nibble = cmd >> 4;
 8001132:	79fb      	ldrb	r3, [r7, #7]
 8001134:	091b      	lsrs	r3, r3, #4
 8001136:	73fb      	strb	r3, [r7, #15]
 uint8_t lower_nibble = cmd & 0x0F;
 8001138:	79fb      	ldrb	r3, [r7, #7]
 800113a:	f003 030f 	and.w	r3, r3, #15
 800113e:	73bb      	strb	r3, [r7, #14]
 lcd_write_nibble(upper_nibble, 0);
 8001140:	7bfb      	ldrb	r3, [r7, #15]
 8001142:	2100      	movs	r1, #0
 8001144:	4618      	mov	r0, r3
 8001146:	f7ff ff7b 	bl	8001040 <lcd_write_nibble>
 lcd_write_nibble(lower_nibble, 0);
 800114a:	7bbb      	ldrb	r3, [r7, #14]
 800114c:	2100      	movs	r1, #0
 800114e:	4618      	mov	r0, r3
 8001150:	f7ff ff76 	bl	8001040 <lcd_write_nibble>
 if (cmd == 0x01 || cmd == 0x02) {
 8001154:	79fb      	ldrb	r3, [r7, #7]
 8001156:	2b01      	cmp	r3, #1
 8001158:	d002      	beq.n	8001160 <lcd_send_cmd+0x38>
 800115a:	79fb      	ldrb	r3, [r7, #7]
 800115c:	2b02      	cmp	r3, #2
 800115e:	d102      	bne.n	8001166 <lcd_send_cmd+0x3e>
 HAL_Delay(2);
 8001160:	2002      	movs	r0, #2
 8001162:	f001 fdaf 	bl	8002cc4 <HAL_Delay>
 }
}
 8001166:	bf00      	nop
 8001168:	3710      	adds	r7, #16
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}

0800116e <lcd_init>:
 uint8_t lower_nibble = data & 0x0F;
 lcd_write_nibble(upper_nibble, 1);
 lcd_write_nibble(lower_nibble, 1);
}

void lcd_init() {
 800116e:	b580      	push	{r7, lr}
 8001170:	af00      	add	r7, sp, #0
 HAL_Delay(50);
 8001172:	2032      	movs	r0, #50	@ 0x32
 8001174:	f001 fda6 	bl	8002cc4 <HAL_Delay>
 lcd_write_nibble(0x03, 0);
 8001178:	2100      	movs	r1, #0
 800117a:	2003      	movs	r0, #3
 800117c:	f7ff ff60 	bl	8001040 <lcd_write_nibble>
 HAL_Delay(5);
 8001180:	2005      	movs	r0, #5
 8001182:	f001 fd9f 	bl	8002cc4 <HAL_Delay>
 lcd_write_nibble(0x03, 0);
 8001186:	2100      	movs	r1, #0
 8001188:	2003      	movs	r0, #3
 800118a:	f7ff ff59 	bl	8001040 <lcd_write_nibble>
 HAL_Delay(1);
 800118e:	2001      	movs	r0, #1
 8001190:	f001 fd98 	bl	8002cc4 <HAL_Delay>
 lcd_write_nibble(0x03, 0);
 8001194:	2100      	movs	r1, #0
 8001196:	2003      	movs	r0, #3
 8001198:	f7ff ff52 	bl	8001040 <lcd_write_nibble>
 HAL_Delay(1);
 800119c:	2001      	movs	r0, #1
 800119e:	f001 fd91 	bl	8002cc4 <HAL_Delay>
 lcd_write_nibble(0x02, 0);
 80011a2:	2100      	movs	r1, #0
 80011a4:	2002      	movs	r0, #2
 80011a6:	f7ff ff4b 	bl	8001040 <lcd_write_nibble>
 lcd_send_cmd(0x28);
 80011aa:	2028      	movs	r0, #40	@ 0x28
 80011ac:	f7ff ffbc 	bl	8001128 <lcd_send_cmd>
 lcd_send_cmd(0x0C);
 80011b0:	200c      	movs	r0, #12
 80011b2:	f7ff ffb9 	bl	8001128 <lcd_send_cmd>
 lcd_send_cmd(0x06);
 80011b6:	2006      	movs	r0, #6
 80011b8:	f7ff ffb6 	bl	8001128 <lcd_send_cmd>
 lcd_send_cmd(0x01);
 80011bc:	2001      	movs	r0, #1
 80011be:	f7ff ffb3 	bl	8001128 <lcd_send_cmd>
 HAL_Delay(2);
 80011c2:	2002      	movs	r0, #2
 80011c4:	f001 fd7e 	bl	8002cc4 <HAL_Delay>
}
 80011c8:	bf00      	nop
 80011ca:	bd80      	pop	{r7, pc}

080011cc <lcd_write_string>:
void lcd_write_string(char *str) {
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
	 while (*str) {
 80011d4:	e019      	b.n	800120a <lcd_write_string+0x3e>
		 if (*str == '\n' || *str == '\r'){
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	781b      	ldrb	r3, [r3, #0]
 80011da:	2b0a      	cmp	r3, #10
 80011dc:	d003      	beq.n	80011e6 <lcd_write_string+0x1a>
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	781b      	ldrb	r3, [r3, #0]
 80011e2:	2b0d      	cmp	r3, #13
 80011e4:	d103      	bne.n	80011ee <lcd_write_string+0x22>
			 str++;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	3301      	adds	r3, #1
 80011ea:	607b      	str	r3, [r7, #4]
 80011ec:	e00d      	b.n	800120a <lcd_write_string+0x3e>
		 }
		 else{
			 if (lcd_write_byte((uint8_t)*str++) == HAL_ERROR){
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	1c5a      	adds	r2, r3, #1
 80011f2:	607a      	str	r2, [r7, #4]
 80011f4:	781b      	ldrb	r3, [r3, #0]
 80011f6:	4618      	mov	r0, r3
 80011f8:	f7ff ff66 	bl	80010c8 <lcd_write_byte>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b01      	cmp	r3, #1
 8001200:	d103      	bne.n	800120a <lcd_write_string+0x3e>
				 printf("Failed to Transmit over I2C\n\r");
 8001202:	4806      	ldr	r0, [pc, #24]	@ (800121c <lcd_write_string+0x50>)
 8001204:	f00e fade 	bl	800f7c4 <iprintf>
				 return;		// Return Without Continuing, if unable to transmit
 8001208:	e004      	b.n	8001214 <lcd_write_string+0x48>
	 while (*str) {
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	781b      	ldrb	r3, [r3, #0]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d1e1      	bne.n	80011d6 <lcd_write_string+0xa>
			 }
		 }
	 }
	 return;
 8001212:	bf00      	nop
}
 8001214:	3708      	adds	r7, #8
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	08011d00 	.word	0x08011d00

08001220 <lcd_clear>:
 address = 0x00;
 }
 address += column;
 lcd_send_cmd(0x80 | address);
}
void lcd_clear(void) {
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
lcd_send_cmd(0x01);
 8001224:	2001      	movs	r0, #1
 8001226:	f7ff ff7f 	bl	8001128 <lcd_send_cmd>
 HAL_Delay(2);
 800122a:	2002      	movs	r0, #2
 800122c:	f001 fd4a 	bl	8002cc4 <HAL_Delay>
}
 8001230:	bf00      	nop
 8001232:	bd80      	pop	{r7, pc}

08001234 <lcd_backlight>:
void lcd_backlight(uint8_t state) {
 8001234:	b480      	push	{r7}
 8001236:	b083      	sub	sp, #12
 8001238:	af00      	add	r7, sp, #0
 800123a:	4603      	mov	r3, r0
 800123c:	71fb      	strb	r3, [r7, #7]
 if (state) {
 800123e:	79fb      	ldrb	r3, [r7, #7]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d003      	beq.n	800124c <lcd_backlight+0x18>
 backlight_state = 1;
 8001244:	4b06      	ldr	r3, [pc, #24]	@ (8001260 <lcd_backlight+0x2c>)
 8001246:	2201      	movs	r2, #1
 8001248:	701a      	strb	r2, [r3, #0]
 } else {
 backlight_state = 0;
 }
}
 800124a:	e002      	b.n	8001252 <lcd_backlight+0x1e>
 backlight_state = 0;
 800124c:	4b04      	ldr	r3, [pc, #16]	@ (8001260 <lcd_backlight+0x2c>)
 800124e:	2200      	movs	r2, #0
 8001250:	701a      	strb	r2, [r3, #0]
}
 8001252:	bf00      	nop
 8001254:	370c      	adds	r7, #12
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr
 800125e:	bf00      	nop
 8001260:	20000000 	.word	0x20000000

08001264 <myprintf>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void myprintf(const char *fmt, ...)	// Function to print over UART nicely
{
 8001264:	b40f      	push	{r0, r1, r2, r3}
 8001266:	b580      	push	{r7, lr}
 8001268:	b082      	sub	sp, #8
 800126a:	af00      	add	r7, sp, #0
	static char buffer[256];
	va_list args;
	va_start(args, fmt);
 800126c:	f107 0314 	add.w	r3, r7, #20
 8001270:	603b      	str	r3, [r7, #0]
	vsnprintf(buffer, sizeof(buffer), fmt, args);
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	693a      	ldr	r2, [r7, #16]
 8001276:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800127a:	480b      	ldr	r0, [pc, #44]	@ (80012a8 <myprintf+0x44>)
 800127c:	f00e fb26 	bl	800f8cc <vsniprintf>
	va_end(args);

	int len = strlen(buffer);
 8001280:	4809      	ldr	r0, [pc, #36]	@ (80012a8 <myprintf+0x44>)
 8001282:	f7fe ffaf 	bl	80001e4 <strlen>
 8001286:	4603      	mov	r3, r0
 8001288:	607b      	str	r3, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)buffer, len, -1);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	b29a      	uxth	r2, r3
 800128e:	f04f 33ff 	mov.w	r3, #4294967295
 8001292:	4905      	ldr	r1, [pc, #20]	@ (80012a8 <myprintf+0x44>)
 8001294:	4805      	ldr	r0, [pc, #20]	@ (80012ac <myprintf+0x48>)
 8001296:	f005 ff3f 	bl	8007118 <HAL_UART_Transmit>

}
 800129a:	bf00      	nop
 800129c:	3708      	adds	r7, #8
 800129e:	46bd      	mov	sp, r7
 80012a0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80012a4:	b004      	add	sp, #16
 80012a6:	4770      	bx	lr
 80012a8:	200006a8 	.word	0x200006a8
 80012ac:	200003b4 	.word	0x200003b4

080012b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012b4:	f001 fcc6 	bl	8002c44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012b8:	f000 f882 	bl	80013c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012bc:	f000 fa2a 	bl	8001714 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80012c0:	f000 f9f8 	bl	80016b4 <MX_USART2_UART_Init>
  MX_TIM16_Init();
 80012c4:	f000 f9a6 	bl	8001614 <MX_TIM16_Init>
  MX_TIM17_Init();
 80012c8:	f000 f9cc 	bl	8001664 <MX_TIM17_Init>
  MX_SPI1_Init();
 80012cc:	f000 f90a 	bl	80014e4 <MX_SPI1_Init>
  MX_FATFS_Init();
 80012d0:	f006 fc80 	bl	8007bd4 <MX_FATFS_Init>
  MX_TIM2_Init();
 80012d4:	f000 f944 	bl	8001560 <MX_TIM2_Init>
  MX_I2C1_Init();
 80012d8:	f000 f8c4 	bl	8001464 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 80012dc:	f7ff ff47 	bl	800116e <lcd_init>
  lcd_clear();
 80012e0:	f7ff ff9e 	bl	8001220 <lcd_clear>
  lcd_backlight(1); // Turn on backlight
 80012e4:	2001      	movs	r0, #1
 80012e6:	f7ff ffa5 	bl	8001234 <lcd_backlight>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80012ea:	f009 fe57 	bl	800af9c <osKernelInitialize>
  /* USER CODE BEGIN RTOS_MUTEX */

  //Open the file system


  HAL_TIM_Base_Start_IT(&htim2);	// Starts the timer for PWM
 80012ee:	4822      	ldr	r0, [pc, #136]	@ (8001378 <main+0xc8>)
 80012f0:	f004 fda6 	bl	8005e40 <HAL_TIM_Base_Start_IT>
  MX_I2C1_Init();
 80012f4:	f000 f8b6 	bl	8001464 <MX_I2C1_Init>

  /* USER CODE BEGIN 2 */

  HAL_Delay(1000); //a short delay is important to let the SD card settle
 80012f8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80012fc:	f001 fce2 	bl	8002cc4 <HAL_Delay>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of running */
  runningHandle = osSemaphoreNew(1, 0, &running_attributes);
 8001300:	4a1e      	ldr	r2, [pc, #120]	@ (800137c <main+0xcc>)
 8001302:	2100      	movs	r1, #0
 8001304:	2001      	movs	r0, #1
 8001306:	f009 ff40 	bl	800b18a <osSemaphoreNew>
 800130a:	4603      	mov	r3, r0
 800130c:	4a1c      	ldr	r2, [pc, #112]	@ (8001380 <main+0xd0>)
 800130e:	6013      	str	r3, [r2, #0]

  /* creation of setup */
  setupHandle = osSemaphoreNew(1, 0, &setup_attributes);
 8001310:	4a1c      	ldr	r2, [pc, #112]	@ (8001384 <main+0xd4>)
 8001312:	2100      	movs	r1, #0
 8001314:	2001      	movs	r0, #1
 8001316:	f009 ff38 	bl	800b18a <osSemaphoreNew>
 800131a:	4603      	mov	r3, r0
 800131c:	4a1a      	ldr	r2, [pc, #104]	@ (8001388 <main+0xd8>)
 800131e:	6013      	str	r3, [r2, #0]

  /* creation of RunFile */
  RunFileHandle = osSemaphoreNew(1, 0, &RunFile_attributes);
 8001320:	4a1a      	ldr	r2, [pc, #104]	@ (800138c <main+0xdc>)
 8001322:	2100      	movs	r1, #0
 8001324:	2001      	movs	r0, #1
 8001326:	f009 ff30 	bl	800b18a <osSemaphoreNew>
 800132a:	4603      	mov	r3, r0
 800132c:	4a18      	ldr	r2, [pc, #96]	@ (8001390 <main+0xe0>)
 800132e:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of valueQueue */
  valueQueueHandle = osMessageQueueNew (100, 20, &valueQueue_attributes);
 8001330:	4a18      	ldr	r2, [pc, #96]	@ (8001394 <main+0xe4>)
 8001332:	2114      	movs	r1, #20
 8001334:	2064      	movs	r0, #100	@ 0x64
 8001336:	f00a f88b 	bl	800b450 <osMessageQueueNew>
 800133a:	4603      	mov	r3, r0
 800133c:	4a16      	ldr	r2, [pc, #88]	@ (8001398 <main+0xe8>)
 800133e:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of LaserEngrave */
  LaserEngraveHandle = osThreadNew(StartLaserEngrave, NULL, &LaserEngrave_attributes);
 8001340:	4a16      	ldr	r2, [pc, #88]	@ (800139c <main+0xec>)
 8001342:	2100      	movs	r1, #0
 8001344:	4816      	ldr	r0, [pc, #88]	@ (80013a0 <main+0xf0>)
 8001346:	f009 fe73 	bl	800b030 <osThreadNew>
 800134a:	4603      	mov	r3, r0
 800134c:	4a15      	ldr	r2, [pc, #84]	@ (80013a4 <main+0xf4>)
 800134e:	6013      	str	r3, [r2, #0]

  /* creation of LoadInstruction */
  LoadInstructionHandle = osThreadNew(StartLoadInstruction, NULL, &LoadInstruction_attributes);
 8001350:	4a15      	ldr	r2, [pc, #84]	@ (80013a8 <main+0xf8>)
 8001352:	2100      	movs	r1, #0
 8001354:	4815      	ldr	r0, [pc, #84]	@ (80013ac <main+0xfc>)
 8001356:	f009 fe6b 	bl	800b030 <osThreadNew>
 800135a:	4603      	mov	r3, r0
 800135c:	4a14      	ldr	r2, [pc, #80]	@ (80013b0 <main+0x100>)
 800135e:	6013      	str	r3, [r2, #0]

  /* creation of ControlTask */
  ControlTaskHandle = osThreadNew(StartControlTask, NULL, &ControlTask_attributes);
 8001360:	4a14      	ldr	r2, [pc, #80]	@ (80013b4 <main+0x104>)
 8001362:	2100      	movs	r1, #0
 8001364:	4814      	ldr	r0, [pc, #80]	@ (80013b8 <main+0x108>)
 8001366:	f009 fe63 	bl	800b030 <osThreadNew>
 800136a:	4603      	mov	r3, r0
 800136c:	4a13      	ldr	r2, [pc, #76]	@ (80013bc <main+0x10c>)
 800136e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001370:	f009 fe38 	bl	800afe4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001374:	bf00      	nop
 8001376:	e7fd      	b.n	8001374 <main+0xc4>
 8001378:	200002d0 	.word	0x200002d0
 800137c:	08011eac 	.word	0x08011eac
 8001380:	2000044c 	.word	0x2000044c
 8001384:	08011ebc 	.word	0x08011ebc
 8001388:	20000450 	.word	0x20000450
 800138c:	08011ecc 	.word	0x08011ecc
 8001390:	20000454 	.word	0x20000454
 8001394:	08011e94 	.word	0x08011e94
 8001398:	20000448 	.word	0x20000448
 800139c:	08011e28 	.word	0x08011e28
 80013a0:	080020c5 	.word	0x080020c5
 80013a4:	2000043c 	.word	0x2000043c
 80013a8:	08011e4c 	.word	0x08011e4c
 80013ac:	08002155 	.word	0x08002155
 80013b0:	20000440 	.word	0x20000440
 80013b4:	08011e70 	.word	0x08011e70
 80013b8:	080021d9 	.word	0x080021d9
 80013bc:	20000444 	.word	0x20000444

080013c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b096      	sub	sp, #88	@ 0x58
 80013c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013c6:	f107 0314 	add.w	r3, r7, #20
 80013ca:	2244      	movs	r2, #68	@ 0x44
 80013cc:	2100      	movs	r1, #0
 80013ce:	4618      	mov	r0, r3
 80013d0:	f00e fa8a 	bl	800f8e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013d4:	463b      	mov	r3, r7
 80013d6:	2200      	movs	r2, #0
 80013d8:	601a      	str	r2, [r3, #0]
 80013da:	605a      	str	r2, [r3, #4]
 80013dc:	609a      	str	r2, [r3, #8]
 80013de:	60da      	str	r2, [r3, #12]
 80013e0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80013e2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80013e6:	f002 fbf3 	bl	8003bd0 <HAL_PWREx_ControlVoltageScaling>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d001      	beq.n	80013f4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80013f0:	f001 f8a6 	bl	8002540 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80013f4:	2302      	movs	r3, #2
 80013f6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013f8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80013fc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013fe:	2310      	movs	r3, #16
 8001400:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001402:	2302      	movs	r3, #2
 8001404:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001406:	2302      	movs	r3, #2
 8001408:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800140a:	2301      	movs	r3, #1
 800140c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800140e:	230a      	movs	r3, #10
 8001410:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001412:	2307      	movs	r3, #7
 8001414:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001416:	2302      	movs	r3, #2
 8001418:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800141a:	2302      	movs	r3, #2
 800141c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800141e:	f107 0314 	add.w	r3, r7, #20
 8001422:	4618      	mov	r0, r3
 8001424:	f002 fc2a 	bl	8003c7c <HAL_RCC_OscConfig>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d001      	beq.n	8001432 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800142e:	f001 f887 	bl	8002540 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001432:	230f      	movs	r3, #15
 8001434:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001436:	2303      	movs	r3, #3
 8001438:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800143a:	2300      	movs	r3, #0
 800143c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800143e:	2300      	movs	r3, #0
 8001440:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001442:	2300      	movs	r3, #0
 8001444:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001446:	463b      	mov	r3, r7
 8001448:	2104      	movs	r1, #4
 800144a:	4618      	mov	r0, r3
 800144c:	f002 fff2 	bl	8004434 <HAL_RCC_ClockConfig>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d001      	beq.n	800145a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001456:	f001 f873 	bl	8002540 <Error_Handler>
  }
}
 800145a:	bf00      	nop
 800145c:	3758      	adds	r7, #88	@ 0x58
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
	...

08001464 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001468:	4b1b      	ldr	r3, [pc, #108]	@ (80014d8 <MX_I2C1_Init+0x74>)
 800146a:	4a1c      	ldr	r2, [pc, #112]	@ (80014dc <MX_I2C1_Init+0x78>)
 800146c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10D19CE4;
 800146e:	4b1a      	ldr	r3, [pc, #104]	@ (80014d8 <MX_I2C1_Init+0x74>)
 8001470:	4a1b      	ldr	r2, [pc, #108]	@ (80014e0 <MX_I2C1_Init+0x7c>)
 8001472:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001474:	4b18      	ldr	r3, [pc, #96]	@ (80014d8 <MX_I2C1_Init+0x74>)
 8001476:	2200      	movs	r2, #0
 8001478:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800147a:	4b17      	ldr	r3, [pc, #92]	@ (80014d8 <MX_I2C1_Init+0x74>)
 800147c:	2201      	movs	r2, #1
 800147e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001480:	4b15      	ldr	r3, [pc, #84]	@ (80014d8 <MX_I2C1_Init+0x74>)
 8001482:	2200      	movs	r2, #0
 8001484:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001486:	4b14      	ldr	r3, [pc, #80]	@ (80014d8 <MX_I2C1_Init+0x74>)
 8001488:	2200      	movs	r2, #0
 800148a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800148c:	4b12      	ldr	r3, [pc, #72]	@ (80014d8 <MX_I2C1_Init+0x74>)
 800148e:	2200      	movs	r2, #0
 8001490:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001492:	4b11      	ldr	r3, [pc, #68]	@ (80014d8 <MX_I2C1_Init+0x74>)
 8001494:	2200      	movs	r2, #0
 8001496:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001498:	4b0f      	ldr	r3, [pc, #60]	@ (80014d8 <MX_I2C1_Init+0x74>)
 800149a:	2200      	movs	r2, #0
 800149c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800149e:	480e      	ldr	r0, [pc, #56]	@ (80014d8 <MX_I2C1_Init+0x74>)
 80014a0:	f001 ff22 	bl	80032e8 <HAL_I2C_Init>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d001      	beq.n	80014ae <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80014aa:	f001 f849 	bl	8002540 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80014ae:	2100      	movs	r1, #0
 80014b0:	4809      	ldr	r0, [pc, #36]	@ (80014d8 <MX_I2C1_Init+0x74>)
 80014b2:	f002 fae7 	bl	8003a84 <HAL_I2CEx_ConfigAnalogFilter>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d001      	beq.n	80014c0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80014bc:	f001 f840 	bl	8002540 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80014c0:	2100      	movs	r1, #0
 80014c2:	4805      	ldr	r0, [pc, #20]	@ (80014d8 <MX_I2C1_Init+0x74>)
 80014c4:	f002 fb29 	bl	8003b1a <HAL_I2CEx_ConfigDigitalFilter>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80014ce:	f001 f837 	bl	8002540 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80014d2:	bf00      	nop
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	20000218 	.word	0x20000218
 80014dc:	40005400 	.word	0x40005400
 80014e0:	10d19ce4 	.word	0x10d19ce4

080014e4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80014e8:	4b1b      	ldr	r3, [pc, #108]	@ (8001558 <MX_SPI1_Init+0x74>)
 80014ea:	4a1c      	ldr	r2, [pc, #112]	@ (800155c <MX_SPI1_Init+0x78>)
 80014ec:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80014ee:	4b1a      	ldr	r3, [pc, #104]	@ (8001558 <MX_SPI1_Init+0x74>)
 80014f0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80014f4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80014f6:	4b18      	ldr	r3, [pc, #96]	@ (8001558 <MX_SPI1_Init+0x74>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80014fc:	4b16      	ldr	r3, [pc, #88]	@ (8001558 <MX_SPI1_Init+0x74>)
 80014fe:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001502:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001504:	4b14      	ldr	r3, [pc, #80]	@ (8001558 <MX_SPI1_Init+0x74>)
 8001506:	2202      	movs	r2, #2
 8001508:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800150a:	4b13      	ldr	r3, [pc, #76]	@ (8001558 <MX_SPI1_Init+0x74>)
 800150c:	2201      	movs	r2, #1
 800150e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001510:	4b11      	ldr	r3, [pc, #68]	@ (8001558 <MX_SPI1_Init+0x74>)
 8001512:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001516:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001518:	4b0f      	ldr	r3, [pc, #60]	@ (8001558 <MX_SPI1_Init+0x74>)
 800151a:	2210      	movs	r2, #16
 800151c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800151e:	4b0e      	ldr	r3, [pc, #56]	@ (8001558 <MX_SPI1_Init+0x74>)
 8001520:	2200      	movs	r2, #0
 8001522:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001524:	4b0c      	ldr	r3, [pc, #48]	@ (8001558 <MX_SPI1_Init+0x74>)
 8001526:	2200      	movs	r2, #0
 8001528:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800152a:	4b0b      	ldr	r3, [pc, #44]	@ (8001558 <MX_SPI1_Init+0x74>)
 800152c:	2200      	movs	r2, #0
 800152e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001530:	4b09      	ldr	r3, [pc, #36]	@ (8001558 <MX_SPI1_Init+0x74>)
 8001532:	2207      	movs	r2, #7
 8001534:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001536:	4b08      	ldr	r3, [pc, #32]	@ (8001558 <MX_SPI1_Init+0x74>)
 8001538:	2200      	movs	r2, #0
 800153a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800153c:	4b06      	ldr	r3, [pc, #24]	@ (8001558 <MX_SPI1_Init+0x74>)
 800153e:	2200      	movs	r2, #0
 8001540:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001542:	4805      	ldr	r0, [pc, #20]	@ (8001558 <MX_SPI1_Init+0x74>)
 8001544:	f003 fe88 	bl	8005258 <HAL_SPI_Init>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d001      	beq.n	8001552 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800154e:	f000 fff7 	bl	8002540 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001552:	bf00      	nop
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	2000026c 	.word	0x2000026c
 800155c:	40013000 	.word	0x40013000

08001560 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b08a      	sub	sp, #40	@ 0x28
 8001564:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001566:	f107 031c 	add.w	r3, r7, #28
 800156a:	2200      	movs	r2, #0
 800156c:	601a      	str	r2, [r3, #0]
 800156e:	605a      	str	r2, [r3, #4]
 8001570:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001572:	463b      	mov	r3, r7
 8001574:	2200      	movs	r2, #0
 8001576:	601a      	str	r2, [r3, #0]
 8001578:	605a      	str	r2, [r3, #4]
 800157a:	609a      	str	r2, [r3, #8]
 800157c:	60da      	str	r2, [r3, #12]
 800157e:	611a      	str	r2, [r3, #16]
 8001580:	615a      	str	r2, [r3, #20]
 8001582:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001584:	4b21      	ldr	r3, [pc, #132]	@ (800160c <MX_TIM2_Init+0xac>)
 8001586:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800158a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800158c:	4b1f      	ldr	r3, [pc, #124]	@ (800160c <MX_TIM2_Init+0xac>)
 800158e:	2200      	movs	r2, #0
 8001590:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001592:	4b1e      	ldr	r3, [pc, #120]	@ (800160c <MX_TIM2_Init+0xac>)
 8001594:	2200      	movs	r2, #0
 8001596:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 79999;
 8001598:	4b1c      	ldr	r3, [pc, #112]	@ (800160c <MX_TIM2_Init+0xac>)
 800159a:	4a1d      	ldr	r2, [pc, #116]	@ (8001610 <MX_TIM2_Init+0xb0>)
 800159c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800159e:	4b1b      	ldr	r3, [pc, #108]	@ (800160c <MX_TIM2_Init+0xac>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80015a4:	4b19      	ldr	r3, [pc, #100]	@ (800160c <MX_TIM2_Init+0xac>)
 80015a6:	2280      	movs	r2, #128	@ 0x80
 80015a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80015aa:	4818      	ldr	r0, [pc, #96]	@ (800160c <MX_TIM2_Init+0xac>)
 80015ac:	f004 fce7 	bl	8005f7e <HAL_TIM_PWM_Init>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d001      	beq.n	80015ba <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80015b6:	f000 ffc3 	bl	8002540 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015ba:	2300      	movs	r3, #0
 80015bc:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015be:	2300      	movs	r3, #0
 80015c0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80015c2:	f107 031c 	add.w	r3, r7, #28
 80015c6:	4619      	mov	r1, r3
 80015c8:	4810      	ldr	r0, [pc, #64]	@ (800160c <MX_TIM2_Init+0xac>)
 80015ca:	f005 fcb1 	bl	8006f30 <HAL_TIMEx_MasterConfigSynchronization>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d001      	beq.n	80015d8 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80015d4:	f000 ffb4 	bl	8002540 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015d8:	2360      	movs	r3, #96	@ 0x60
 80015da:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80015dc:	2300      	movs	r3, #0
 80015de:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015e0:	2300      	movs	r3, #0
 80015e2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015e4:	2300      	movs	r3, #0
 80015e6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015e8:	463b      	mov	r3, r7
 80015ea:	2200      	movs	r2, #0
 80015ec:	4619      	mov	r1, r3
 80015ee:	4807      	ldr	r0, [pc, #28]	@ (800160c <MX_TIM2_Init+0xac>)
 80015f0:	f004 ffc0 	bl	8006574 <HAL_TIM_PWM_ConfigChannel>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d001      	beq.n	80015fe <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 80015fa:	f000 ffa1 	bl	8002540 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80015fe:	4803      	ldr	r0, [pc, #12]	@ (800160c <MX_TIM2_Init+0xac>)
 8001600:	f001 f8cc 	bl	800279c <HAL_TIM_MspPostInit>

}
 8001604:	bf00      	nop
 8001606:	3728      	adds	r7, #40	@ 0x28
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}
 800160c:	200002d0 	.word	0x200002d0
 8001610:	0001387f 	.word	0x0001387f

08001614 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001618:	4b10      	ldr	r3, [pc, #64]	@ (800165c <MX_TIM16_Init+0x48>)
 800161a:	4a11      	ldr	r2, [pc, #68]	@ (8001660 <MX_TIM16_Init+0x4c>)
 800161c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 1000;
 800161e:	4b0f      	ldr	r3, [pc, #60]	@ (800165c <MX_TIM16_Init+0x48>)
 8001620:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001624:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001626:	4b0d      	ldr	r3, [pc, #52]	@ (800165c <MX_TIM16_Init+0x48>)
 8001628:	2200      	movs	r2, #0
 800162a:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 400;
 800162c:	4b0b      	ldr	r3, [pc, #44]	@ (800165c <MX_TIM16_Init+0x48>)
 800162e:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8001632:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001634:	4b09      	ldr	r3, [pc, #36]	@ (800165c <MX_TIM16_Init+0x48>)
 8001636:	2200      	movs	r2, #0
 8001638:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800163a:	4b08      	ldr	r3, [pc, #32]	@ (800165c <MX_TIM16_Init+0x48>)
 800163c:	2200      	movs	r2, #0
 800163e:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001640:	4b06      	ldr	r3, [pc, #24]	@ (800165c <MX_TIM16_Init+0x48>)
 8001642:	2200      	movs	r2, #0
 8001644:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001646:	4805      	ldr	r0, [pc, #20]	@ (800165c <MX_TIM16_Init+0x48>)
 8001648:	f004 fba2 	bl	8005d90 <HAL_TIM_Base_Init>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d001      	beq.n	8001656 <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 8001652:	f000 ff75 	bl	8002540 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001656:	bf00      	nop
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	2000031c 	.word	0x2000031c
 8001660:	40014400 	.word	0x40014400

08001664 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8001668:	4b10      	ldr	r3, [pc, #64]	@ (80016ac <MX_TIM17_Init+0x48>)
 800166a:	4a11      	ldr	r2, [pc, #68]	@ (80016b0 <MX_TIM17_Init+0x4c>)
 800166c:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 1000;
 800166e:	4b0f      	ldr	r3, [pc, #60]	@ (80016ac <MX_TIM17_Init+0x48>)
 8001670:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001674:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001676:	4b0d      	ldr	r3, [pc, #52]	@ (80016ac <MX_TIM17_Init+0x48>)
 8001678:	2200      	movs	r2, #0
 800167a:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 400;
 800167c:	4b0b      	ldr	r3, [pc, #44]	@ (80016ac <MX_TIM17_Init+0x48>)
 800167e:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8001682:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001684:	4b09      	ldr	r3, [pc, #36]	@ (80016ac <MX_TIM17_Init+0x48>)
 8001686:	2200      	movs	r2, #0
 8001688:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 800168a:	4b08      	ldr	r3, [pc, #32]	@ (80016ac <MX_TIM17_Init+0x48>)
 800168c:	2200      	movs	r2, #0
 800168e:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001690:	4b06      	ldr	r3, [pc, #24]	@ (80016ac <MX_TIM17_Init+0x48>)
 8001692:	2200      	movs	r2, #0
 8001694:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8001696:	4805      	ldr	r0, [pc, #20]	@ (80016ac <MX_TIM17_Init+0x48>)
 8001698:	f004 fb7a 	bl	8005d90 <HAL_TIM_Base_Init>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d001      	beq.n	80016a6 <MX_TIM17_Init+0x42>
  {
    Error_Handler();
 80016a2:	f000 ff4d 	bl	8002540 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 80016a6:	bf00      	nop
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	20000368 	.word	0x20000368
 80016b0:	40014800 	.word	0x40014800

080016b4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80016b8:	4b14      	ldr	r3, [pc, #80]	@ (800170c <MX_USART2_UART_Init+0x58>)
 80016ba:	4a15      	ldr	r2, [pc, #84]	@ (8001710 <MX_USART2_UART_Init+0x5c>)
 80016bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80016be:	4b13      	ldr	r3, [pc, #76]	@ (800170c <MX_USART2_UART_Init+0x58>)
 80016c0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80016c4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80016c6:	4b11      	ldr	r3, [pc, #68]	@ (800170c <MX_USART2_UART_Init+0x58>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80016cc:	4b0f      	ldr	r3, [pc, #60]	@ (800170c <MX_USART2_UART_Init+0x58>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80016d2:	4b0e      	ldr	r3, [pc, #56]	@ (800170c <MX_USART2_UART_Init+0x58>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80016d8:	4b0c      	ldr	r3, [pc, #48]	@ (800170c <MX_USART2_UART_Init+0x58>)
 80016da:	220c      	movs	r2, #12
 80016dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016de:	4b0b      	ldr	r3, [pc, #44]	@ (800170c <MX_USART2_UART_Init+0x58>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80016e4:	4b09      	ldr	r3, [pc, #36]	@ (800170c <MX_USART2_UART_Init+0x58>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016ea:	4b08      	ldr	r3, [pc, #32]	@ (800170c <MX_USART2_UART_Init+0x58>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016f0:	4b06      	ldr	r3, [pc, #24]	@ (800170c <MX_USART2_UART_Init+0x58>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80016f6:	4805      	ldr	r0, [pc, #20]	@ (800170c <MX_USART2_UART_Init+0x58>)
 80016f8:	f005 fcc0 	bl	800707c <HAL_UART_Init>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d001      	beq.n	8001706 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001702:	f000 ff1d 	bl	8002540 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001706:	bf00      	nop
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	200003b4 	.word	0x200003b4
 8001710:	40004400 	.word	0x40004400

08001714 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b08a      	sub	sp, #40	@ 0x28
 8001718:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800171a:	f107 0314 	add.w	r3, r7, #20
 800171e:	2200      	movs	r2, #0
 8001720:	601a      	str	r2, [r3, #0]
 8001722:	605a      	str	r2, [r3, #4]
 8001724:	609a      	str	r2, [r3, #8]
 8001726:	60da      	str	r2, [r3, #12]
 8001728:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800172a:	4b5b      	ldr	r3, [pc, #364]	@ (8001898 <MX_GPIO_Init+0x184>)
 800172c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800172e:	4a5a      	ldr	r2, [pc, #360]	@ (8001898 <MX_GPIO_Init+0x184>)
 8001730:	f043 0304 	orr.w	r3, r3, #4
 8001734:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001736:	4b58      	ldr	r3, [pc, #352]	@ (8001898 <MX_GPIO_Init+0x184>)
 8001738:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800173a:	f003 0304 	and.w	r3, r3, #4
 800173e:	613b      	str	r3, [r7, #16]
 8001740:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001742:	4b55      	ldr	r3, [pc, #340]	@ (8001898 <MX_GPIO_Init+0x184>)
 8001744:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001746:	4a54      	ldr	r2, [pc, #336]	@ (8001898 <MX_GPIO_Init+0x184>)
 8001748:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800174c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800174e:	4b52      	ldr	r3, [pc, #328]	@ (8001898 <MX_GPIO_Init+0x184>)
 8001750:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001752:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001756:	60fb      	str	r3, [r7, #12]
 8001758:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800175a:	4b4f      	ldr	r3, [pc, #316]	@ (8001898 <MX_GPIO_Init+0x184>)
 800175c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800175e:	4a4e      	ldr	r2, [pc, #312]	@ (8001898 <MX_GPIO_Init+0x184>)
 8001760:	f043 0301 	orr.w	r3, r3, #1
 8001764:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001766:	4b4c      	ldr	r3, [pc, #304]	@ (8001898 <MX_GPIO_Init+0x184>)
 8001768:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800176a:	f003 0301 	and.w	r3, r3, #1
 800176e:	60bb      	str	r3, [r7, #8]
 8001770:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001772:	4b49      	ldr	r3, [pc, #292]	@ (8001898 <MX_GPIO_Init+0x184>)
 8001774:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001776:	4a48      	ldr	r2, [pc, #288]	@ (8001898 <MX_GPIO_Init+0x184>)
 8001778:	f043 0302 	orr.w	r3, r3, #2
 800177c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800177e:	4b46      	ldr	r3, [pc, #280]	@ (8001898 <MX_GPIO_Init+0x184>)
 8001780:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001782:	f003 0302 	and.w	r3, r3, #2
 8001786:	607b      	str	r3, [r7, #4]
 8001788:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, YPUL_Pin|XDIR_Pin|XEN_Pin, GPIO_PIN_RESET);
 800178a:	2200      	movs	r2, #0
 800178c:	f44f 6186 	mov.w	r1, #1072	@ 0x430
 8001790:	4842      	ldr	r0, [pc, #264]	@ (800189c <MX_GPIO_Init+0x188>)
 8001792:	f001 fd5f 	bl	8003254 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, YEN_Pin|YDIR_Pin|XPUL_Pin, GPIO_PIN_RESET);
 8001796:	2200      	movs	r2, #0
 8001798:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 800179c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80017a0:	f001 fd58 	bl	8003254 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 80017a4:	2201      	movs	r2, #1
 80017a6:	2140      	movs	r1, #64	@ 0x40
 80017a8:	483c      	ldr	r0, [pc, #240]	@ (800189c <MX_GPIO_Init+0x188>)
 80017aa:	f001 fd53 	bl	8003254 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80017ae:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80017b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80017b4:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80017b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ba:	2300      	movs	r3, #0
 80017bc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80017be:	f107 0314 	add.w	r3, r7, #20
 80017c2:	4619      	mov	r1, r3
 80017c4:	4836      	ldr	r0, [pc, #216]	@ (80018a0 <MX_GPIO_Init+0x18c>)
 80017c6:	f001 fb83 	bl	8002ed0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80017ca:	2301      	movs	r3, #1
 80017cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017ce:	2300      	movs	r3, #0
 80017d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d2:	2300      	movs	r3, #0
 80017d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017d6:	f107 0314 	add.w	r3, r7, #20
 80017da:	4619      	mov	r1, r3
 80017dc:	4830      	ldr	r0, [pc, #192]	@ (80018a0 <MX_GPIO_Init+0x18c>)
 80017de:	f001 fb77 	bl	8002ed0 <HAL_GPIO_Init>

  /*Configure GPIO pin : shutdownButton_Pin */
  GPIO_InitStruct.Pin = shutdownButton_Pin;
 80017e2:	2302      	movs	r3, #2
 80017e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80017e6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80017ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80017ec:	2302      	movs	r3, #2
 80017ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(shutdownButton_GPIO_Port, &GPIO_InitStruct);
 80017f0:	f107 0314 	add.w	r3, r7, #20
 80017f4:	4619      	mov	r1, r3
 80017f6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80017fa:	f001 fb69 	bl	8002ed0 <HAL_GPIO_Init>

  /*Configure GPIO pins : YPUL_Pin XDIR_Pin XEN_Pin */
  GPIO_InitStruct.Pin = YPUL_Pin|XDIR_Pin|XEN_Pin;
 80017fe:	f44f 6386 	mov.w	r3, #1072	@ 0x430
 8001802:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001804:	2301      	movs	r3, #1
 8001806:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001808:	2300      	movs	r3, #0
 800180a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800180c:	2300      	movs	r3, #0
 800180e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001810:	f107 0314 	add.w	r3, r7, #20
 8001814:	4619      	mov	r1, r3
 8001816:	4821      	ldr	r0, [pc, #132]	@ (800189c <MX_GPIO_Init+0x188>)
 8001818:	f001 fb5a 	bl	8002ed0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CD_Pin */
  GPIO_InitStruct.Pin = SPI1_CD_Pin;
 800181c:	2380      	movs	r3, #128	@ 0x80
 800181e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001820:	2300      	movs	r3, #0
 8001822:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001824:	2301      	movs	r3, #1
 8001826:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SPI1_CD_GPIO_Port, &GPIO_InitStruct);
 8001828:	f107 0314 	add.w	r3, r7, #20
 800182c:	4619      	mov	r1, r3
 800182e:	481c      	ldr	r0, [pc, #112]	@ (80018a0 <MX_GPIO_Init+0x18c>)
 8001830:	f001 fb4e 	bl	8002ed0 <HAL_GPIO_Init>

  /*Configure GPIO pins : YEN_Pin YDIR_Pin XPUL_Pin */
  GPIO_InitStruct.Pin = YEN_Pin|YDIR_Pin|XPUL_Pin;
 8001834:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8001838:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800183a:	2301      	movs	r3, #1
 800183c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183e:	2300      	movs	r3, #0
 8001840:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001842:	2300      	movs	r3, #0
 8001844:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001846:	f107 0314 	add.w	r3, r7, #20
 800184a:	4619      	mov	r1, r3
 800184c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001850:	f001 fb3e 	bl	8002ed0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8001854:	2340      	movs	r3, #64	@ 0x40
 8001856:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001858:	2301      	movs	r3, #1
 800185a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800185c:	2301      	movs	r3, #1
 800185e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001860:	2300      	movs	r3, #0
 8001862:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8001864:	f107 0314 	add.w	r3, r7, #20
 8001868:	4619      	mov	r1, r3
 800186a:	480c      	ldr	r0, [pc, #48]	@ (800189c <MX_GPIO_Init+0x188>)
 800186c:	f001 fb30 	bl	8002ed0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8001870:	2200      	movs	r2, #0
 8001872:	2105      	movs	r1, #5
 8001874:	2007      	movs	r0, #7
 8001876:	f001 fb01 	bl	8002e7c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800187a:	2007      	movs	r0, #7
 800187c:	f001 fb1a 	bl	8002eb4 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001880:	2200      	movs	r2, #0
 8001882:	2105      	movs	r1, #5
 8001884:	2028      	movs	r0, #40	@ 0x28
 8001886:	f001 faf9 	bl	8002e7c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800188a:	2028      	movs	r0, #40	@ 0x28
 800188c:	f001 fb12 	bl	8002eb4 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8001890:	bf00      	nop
 8001892:	3728      	adds	r7, #40	@ 0x28
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}
 8001898:	40021000 	.word	0x40021000
 800189c:	48000400 	.word	0x48000400
 80018a0:	48000800 	.word	0x48000800

080018a4 <InitiateMotors>:

/* USER CODE BEGIN 4 */

// function call to find 0 0 and align the motors to the correct starting position
void InitiateMotors()
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	af00      	add	r7, sp, #0

	// setup variable which ensures the enable pins don't shut the system down during setup
	setup = 2;
 80018a8:	4b55      	ldr	r3, [pc, #340]	@ (8001a00 <InitiateMotors+0x15c>)
 80018aa:	2202      	movs	r2, #2
 80018ac:	601a      	str	r2, [r3, #0]

	// writes a 0 to the enable pins to disable the motors
	HAL_GPIO_WritePin(XEN_GPIO_Port, XEN_Pin, 0);
 80018ae:	2200      	movs	r2, #0
 80018b0:	2120      	movs	r1, #32
 80018b2:	4854      	ldr	r0, [pc, #336]	@ (8001a04 <InitiateMotors+0x160>)
 80018b4:	f001 fcce 	bl	8003254 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YEN_GPIO_Port, YEN_Pin, 0);
 80018b8:	2200      	movs	r2, #0
 80018ba:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80018be:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80018c2:	f001 fcc7 	bl	8003254 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(YDIR_GPIO_Port, YDIR_Pin, 1);
 80018c6:	2201      	movs	r2, #1
 80018c8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80018cc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80018d0:	f001 fcc0 	bl	8003254 <HAL_GPIO_WritePin>
	YDIR = 1;
 80018d4:	4b4c      	ldr	r3, [pc, #304]	@ (8001a08 <InitiateMotors+0x164>)
 80018d6:	2201      	movs	r2, #1
 80018d8:	601a      	str	r2, [r3, #0]

	// Sets the Y end point, motor prescaler value and starts the motor
	Yend = 99999999;
 80018da:	4b4c      	ldr	r3, [pc, #304]	@ (8001a0c <InitiateMotors+0x168>)
 80018dc:	4a4c      	ldr	r2, [pc, #304]	@ (8001a10 <InitiateMotors+0x16c>)
 80018de:	601a      	str	r2, [r3, #0]
	__HAL_TIM_SET_PRESCALER(&htim17, 200);
 80018e0:	4b4c      	ldr	r3, [pc, #304]	@ (8001a14 <InitiateMotors+0x170>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	22c8      	movs	r2, #200	@ 0xc8
 80018e6:	629a      	str	r2, [r3, #40]	@ 0x28
	HAL_TIM_Base_Start_IT(&htim17);
 80018e8:	484a      	ldr	r0, [pc, #296]	@ (8001a14 <InitiateMotors+0x170>)
 80018ea:	f004 faa9 	bl	8005e40 <HAL_TIM_Base_Start_IT>

	// Waits for the out of bounds button to be hit
	osSemaphoreAcquire(setupHandle, osWaitForever);
 80018ee:	4b4a      	ldr	r3, [pc, #296]	@ (8001a18 <InitiateMotors+0x174>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f04f 31ff 	mov.w	r1, #4294967295
 80018f6:	4618      	mov	r0, r3
 80018f8:	f009 fcd0 	bl	800b29c <osSemaphoreAcquire>
	HAL_Delay(500);
 80018fc:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001900:	f001 f9e0 	bl	8002cc4 <HAL_Delay>
	setup--;
 8001904:	4b3e      	ldr	r3, [pc, #248]	@ (8001a00 <InitiateMotors+0x15c>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	3b01      	subs	r3, #1
 800190a:	4a3d      	ldr	r2, [pc, #244]	@ (8001a00 <InitiateMotors+0x15c>)
 800190c:	6013      	str	r3, [r2, #0]
	Xcurrent = 0;
 800190e:	4b43      	ldr	r3, [pc, #268]	@ (8001a1c <InitiateMotors+0x178>)
 8001910:	2200      	movs	r2, #0
 8001912:	601a      	str	r2, [r3, #0]
	Xend = 0;
 8001914:	4b42      	ldr	r3, [pc, #264]	@ (8001a20 <InitiateMotors+0x17c>)
 8001916:	2200      	movs	r2, #0
 8001918:	601a      	str	r2, [r3, #0]
	Ycurrent = 0;
 800191a:	4b42      	ldr	r3, [pc, #264]	@ (8001a24 <InitiateMotors+0x180>)
 800191c:	2200      	movs	r2, #0
 800191e:	601a      	str	r2, [r3, #0]
	Yend = -3200;
 8001920:	4b3a      	ldr	r3, [pc, #232]	@ (8001a0c <InitiateMotors+0x168>)
 8001922:	4a41      	ldr	r2, [pc, #260]	@ (8001a28 <InitiateMotors+0x184>)
 8001924:	601a      	str	r2, [r3, #0]

	HAL_GPIO_WritePin(YDIR_GPIO_Port, YDIR_Pin, 0);
 8001926:	2200      	movs	r2, #0
 8001928:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800192c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001930:	f001 fc90 	bl	8003254 <HAL_GPIO_WritePin>
	YDIR = 0;
 8001934:	4b34      	ldr	r3, [pc, #208]	@ (8001a08 <InitiateMotors+0x164>)
 8001936:	2200      	movs	r2, #0
 8001938:	601a      	str	r2, [r3, #0]
	__HAL_TIM_SET_PRESCALER(&htim17, 50);
 800193a:	4b36      	ldr	r3, [pc, #216]	@ (8001a14 <InitiateMotors+0x170>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	2232      	movs	r2, #50	@ 0x32
 8001940:	629a      	str	r2, [r3, #40]	@ 0x28
	HAL_TIM_Base_Start_IT(&htim17);
 8001942:	4834      	ldr	r0, [pc, #208]	@ (8001a14 <InitiateMotors+0x170>)
 8001944:	f004 fa7c 	bl	8005e40 <HAL_TIM_Base_Start_IT>

	osSemaphoreAcquire(runningHandle, osWaitForever);
 8001948:	4b38      	ldr	r3, [pc, #224]	@ (8001a2c <InitiateMotors+0x188>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f04f 31ff 	mov.w	r1, #4294967295
 8001950:	4618      	mov	r0, r3
 8001952:	f009 fca3 	bl	800b29c <osSemaphoreAcquire>

	HAL_Delay(500);
 8001956:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800195a:	f001 f9b3 	bl	8002cc4 <HAL_Delay>

	HAL_GPIO_WritePin(XDIR_GPIO_Port, XDIR_Pin, 0);
 800195e:	2200      	movs	r2, #0
 8001960:	2110      	movs	r1, #16
 8001962:	4828      	ldr	r0, [pc, #160]	@ (8001a04 <InitiateMotors+0x160>)
 8001964:	f001 fc76 	bl	8003254 <HAL_GPIO_WritePin>
	XDIR = 0;
 8001968:	4b31      	ldr	r3, [pc, #196]	@ (8001a30 <InitiateMotors+0x18c>)
 800196a:	2200      	movs	r2, #0
 800196c:	601a      	str	r2, [r3, #0]

	// Sets the X end point, motor prescaler value and starts the motor
	Xend = -99999999;
 800196e:	4b2c      	ldr	r3, [pc, #176]	@ (8001a20 <InitiateMotors+0x17c>)
 8001970:	4a30      	ldr	r2, [pc, #192]	@ (8001a34 <InitiateMotors+0x190>)
 8001972:	601a      	str	r2, [r3, #0]
	__HAL_TIM_SET_PRESCALER(&htim16, 200);
 8001974:	4b30      	ldr	r3, [pc, #192]	@ (8001a38 <InitiateMotors+0x194>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	22c8      	movs	r2, #200	@ 0xc8
 800197a:	629a      	str	r2, [r3, #40]	@ 0x28
	HAL_TIM_Base_Start_IT(&htim16);
 800197c:	482e      	ldr	r0, [pc, #184]	@ (8001a38 <InitiateMotors+0x194>)
 800197e:	f004 fa5f 	bl	8005e40 <HAL_TIM_Base_Start_IT>

	// Waits for the out of bounds button to be hit
	osSemaphoreAcquire(setupHandle, osWaitForever);
 8001982:	4b25      	ldr	r3, [pc, #148]	@ (8001a18 <InitiateMotors+0x174>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f04f 31ff 	mov.w	r1, #4294967295
 800198a:	4618      	mov	r0, r3
 800198c:	f009 fc86 	bl	800b29c <osSemaphoreAcquire>
	HAL_Delay(500);
 8001990:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001994:	f001 f996 	bl	8002cc4 <HAL_Delay>
	Xcurrent = 0;
 8001998:	4b20      	ldr	r3, [pc, #128]	@ (8001a1c <InitiateMotors+0x178>)
 800199a:	2200      	movs	r2, #0
 800199c:	601a      	str	r2, [r3, #0]
	Xend = 3200;
 800199e:	4b20      	ldr	r3, [pc, #128]	@ (8001a20 <InitiateMotors+0x17c>)
 80019a0:	f44f 6248 	mov.w	r2, #3200	@ 0xc80
 80019a4:	601a      	str	r2, [r3, #0]
	Ycurrent = 0;
 80019a6:	4b1f      	ldr	r3, [pc, #124]	@ (8001a24 <InitiateMotors+0x180>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	601a      	str	r2, [r3, #0]
	Yend = 0;
 80019ac:	4b17      	ldr	r3, [pc, #92]	@ (8001a0c <InitiateMotors+0x168>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	601a      	str	r2, [r3, #0]

	HAL_GPIO_WritePin(XDIR_GPIO_Port, XDIR_Pin, 1);
 80019b2:	2201      	movs	r2, #1
 80019b4:	2110      	movs	r1, #16
 80019b6:	4813      	ldr	r0, [pc, #76]	@ (8001a04 <InitiateMotors+0x160>)
 80019b8:	f001 fc4c 	bl	8003254 <HAL_GPIO_WritePin>
	XDIR = 1;
 80019bc:	4b1c      	ldr	r3, [pc, #112]	@ (8001a30 <InitiateMotors+0x18c>)
 80019be:	2201      	movs	r2, #1
 80019c0:	601a      	str	r2, [r3, #0]
	__HAL_TIM_SET_PRESCALER(&htim16, 50);
 80019c2:	4b1d      	ldr	r3, [pc, #116]	@ (8001a38 <InitiateMotors+0x194>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	2232      	movs	r2, #50	@ 0x32
 80019c8:	629a      	str	r2, [r3, #40]	@ 0x28
	HAL_TIM_Base_Start_IT(&htim16);
 80019ca:	481b      	ldr	r0, [pc, #108]	@ (8001a38 <InitiateMotors+0x194>)
 80019cc:	f004 fa38 	bl	8005e40 <HAL_TIM_Base_Start_IT>

	osSemaphoreAcquire(runningHandle, osWaitForever);
 80019d0:	4b16      	ldr	r3, [pc, #88]	@ (8001a2c <InitiateMotors+0x188>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f04f 31ff 	mov.w	r1, #4294967295
 80019d8:	4618      	mov	r0, r3
 80019da:	f009 fc5f 	bl	800b29c <osSemaphoreAcquire>
	setup--;
 80019de:	4b08      	ldr	r3, [pc, #32]	@ (8001a00 <InitiateMotors+0x15c>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	3b01      	subs	r3, #1
 80019e4:	4a06      	ldr	r2, [pc, #24]	@ (8001a00 <InitiateMotors+0x15c>)
 80019e6:	6013      	str	r3, [r2, #0]

	HAL_Delay(500);
 80019e8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80019ec:	f001 f96a 	bl	8002cc4 <HAL_Delay>

	Xcurrent = 0;
 80019f0:	4b0a      	ldr	r3, [pc, #40]	@ (8001a1c <InitiateMotors+0x178>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	601a      	str	r2, [r3, #0]
	Ycurrent = 0;
 80019f6:	4b0b      	ldr	r3, [pc, #44]	@ (8001a24 <InitiateMotors+0x180>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	601a      	str	r2, [r3, #0]

}
 80019fc:	bf00      	nop
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	2000046c 	.word	0x2000046c
 8001a04:	48000400 	.word	0x48000400
 8001a08:	20000008 	.word	0x20000008
 8001a0c:	20000464 	.word	0x20000464
 8001a10:	05f5e0ff 	.word	0x05f5e0ff
 8001a14:	20000368 	.word	0x20000368
 8001a18:	20000450 	.word	0x20000450
 8001a1c:	20000458 	.word	0x20000458
 8001a20:	20000460 	.word	0x20000460
 8001a24:	2000045c 	.word	0x2000045c
 8001a28:	fffff380 	.word	0xfffff380
 8001a2c:	2000044c 	.word	0x2000044c
 8001a30:	20000004 	.word	0x20000004
 8001a34:	fa0a1f01 	.word	0xfa0a1f01
 8001a38:	2000031c 	.word	0x2000031c

08001a3c <HAL_GPIO_EXTI_Callback>:

// Interrupt Handler
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b082      	sub	sp, #8
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	4603      	mov	r3, r0
 8001a44:	80fb      	strh	r3, [r7, #6]

	// code for the shutdown buttons which trigger if the motors run out of bounds
	if (GPIO_Pin == shutdownButton_Pin)
 8001a46:	88fb      	ldrh	r3, [r7, #6]
 8001a48:	2b02      	cmp	r3, #2
 8001a4a:	d130      	bne.n	8001aae <HAL_GPIO_EXTI_Callback+0x72>
	{
		if (setup == 0)
 8001a4c:	4b1a      	ldr	r3, [pc, #104]	@ (8001ab8 <HAL_GPIO_EXTI_Callback+0x7c>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d119      	bne.n	8001a88 <HAL_GPIO_EXTI_Callback+0x4c>
		{
			// Turns of the laser's PWM
			HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 8001a54:	2100      	movs	r1, #0
 8001a56:	4819      	ldr	r0, [pc, #100]	@ (8001abc <HAL_GPIO_EXTI_Callback+0x80>)
 8001a58:	f004 fbee 	bl	8006238 <HAL_TIM_PWM_Stop>
			HAL_TIM_Base_Stop_IT(&htim2);
 8001a5c:	4817      	ldr	r0, [pc, #92]	@ (8001abc <HAL_GPIO_EXTI_Callback+0x80>)
 8001a5e:	f004 fa5f 	bl	8005f20 <HAL_TIM_Base_Stop_IT>

			// Turns off the motor timers so they don't send a signal anymore
			HAL_TIM_Base_Stop_IT(&htim16);
 8001a62:	4817      	ldr	r0, [pc, #92]	@ (8001ac0 <HAL_GPIO_EXTI_Callback+0x84>)
 8001a64:	f004 fa5c 	bl	8005f20 <HAL_TIM_Base_Stop_IT>
			HAL_TIM_Base_Stop_IT(&htim17);
 8001a68:	4816      	ldr	r0, [pc, #88]	@ (8001ac4 <HAL_GPIO_EXTI_Callback+0x88>)
 8001a6a:	f004 fa59 	bl	8005f20 <HAL_TIM_Base_Stop_IT>

			// Turns enable output on
			HAL_GPIO_WritePin(XEN_GPIO_Port, XEN_Pin, 1);
 8001a6e:	2201      	movs	r2, #1
 8001a70:	2120      	movs	r1, #32
 8001a72:	4815      	ldr	r0, [pc, #84]	@ (8001ac8 <HAL_GPIO_EXTI_Callback+0x8c>)
 8001a74:	f001 fbee 	bl	8003254 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YEN_GPIO_Port, YEN_Pin, 1);
 8001a78:	2201      	movs	r2, #1
 8001a7a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001a7e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a82:	f001 fbe7 	bl	8003254 <HAL_GPIO_WritePin>
				HAL_TIM_Base_Stop_IT(&htim17);
			}
			osSemaphoreRelease(setupHandle);
		}
	}
}
 8001a86:	e012      	b.n	8001aae <HAL_GPIO_EXTI_Callback+0x72>
			if (XDIR == 0)
 8001a88:	4b10      	ldr	r3, [pc, #64]	@ (8001acc <HAL_GPIO_EXTI_Callback+0x90>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d102      	bne.n	8001a96 <HAL_GPIO_EXTI_Callback+0x5a>
				HAL_TIM_Base_Stop_IT(&htim16);
 8001a90:	480b      	ldr	r0, [pc, #44]	@ (8001ac0 <HAL_GPIO_EXTI_Callback+0x84>)
 8001a92:	f004 fa45 	bl	8005f20 <HAL_TIM_Base_Stop_IT>
			if (YDIR == 1)
 8001a96:	4b0e      	ldr	r3, [pc, #56]	@ (8001ad0 <HAL_GPIO_EXTI_Callback+0x94>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	2b01      	cmp	r3, #1
 8001a9c:	d102      	bne.n	8001aa4 <HAL_GPIO_EXTI_Callback+0x68>
				HAL_TIM_Base_Stop_IT(&htim17);
 8001a9e:	4809      	ldr	r0, [pc, #36]	@ (8001ac4 <HAL_GPIO_EXTI_Callback+0x88>)
 8001aa0:	f004 fa3e 	bl	8005f20 <HAL_TIM_Base_Stop_IT>
			osSemaphoreRelease(setupHandle);
 8001aa4:	4b0b      	ldr	r3, [pc, #44]	@ (8001ad4 <HAL_GPIO_EXTI_Callback+0x98>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f009 fc49 	bl	800b340 <osSemaphoreRelease>
}
 8001aae:	bf00      	nop
 8001ab0:	3708      	adds	r7, #8
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	2000046c 	.word	0x2000046c
 8001abc:	200002d0 	.word	0x200002d0
 8001ac0:	2000031c 	.word	0x2000031c
 8001ac4:	20000368 	.word	0x20000368
 8001ac8:	48000400 	.word	0x48000400
 8001acc:	20000004 	.word	0x20000004
 8001ad0:	20000008 	.word	0x20000008
 8001ad4:	20000450 	.word	0x20000450

08001ad8 <GCommandParse>:

Executable GCommandParse(TCHAR* line1)
{
 8001ad8:	b5b0      	push	{r4, r5, r7, lr}
 8001ada:	b0a2      	sub	sp, #136	@ 0x88
 8001adc:	af04      	add	r7, sp, #16
 8001ade:	6078      	str	r0, [r7, #4]
 8001ae0:	6039      	str	r1, [r7, #0]

	  // Creates local variables for the different possible commands in Gcode (max 10 characters)
	  char Gcommand[10] = "";
 8001ae2:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	601a      	str	r2, [r3, #0]
 8001aea:	605a      	str	r2, [r3, #4]
 8001aec:	811a      	strh	r2, [r3, #8]
	  char Xcoordinate[10] = "";
 8001aee:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001af2:	2200      	movs	r2, #0
 8001af4:	601a      	str	r2, [r3, #0]
 8001af6:	605a      	str	r2, [r3, #4]
 8001af8:	811a      	strh	r2, [r3, #8]
	  char Ycoordinate[10] = "";
 8001afa:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001afe:	2200      	movs	r2, #0
 8001b00:	601a      	str	r2, [r3, #0]
 8001b02:	605a      	str	r2, [r3, #4]
 8001b04:	811a      	strh	r2, [r3, #8]
	  char Zcoordinate[10] = "";
 8001b06:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	601a      	str	r2, [r3, #0]
 8001b0e:	605a      	str	r2, [r3, #4]
 8001b10:	811a      	strh	r2, [r3, #8]
	  char feedRate[10] = "";
 8001b12:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001b16:	2200      	movs	r2, #0
 8001b18:	601a      	str	r2, [r3, #0]
 8001b1a:	605a      	str	r2, [r3, #4]
 8001b1c:	811a      	strh	r2, [r3, #8]
	  char laserSpeed[10] = "";
 8001b1e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001b22:	2200      	movs	r2, #0
 8001b24:	601a      	str	r2, [r3, #0]
 8001b26:	605a      	str	r2, [r3, #4]
 8001b28:	811a      	strh	r2, [r3, #8]

	  // New struct to save the values of the executables which are calculated in these functions
	  Executable newExecutable;

	  int i = 0;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	677b      	str	r3, [r7, #116]	@ 0x74
	  // Initiates a for loop which loops each character of the Gcode line
	  while (1)
	  {

		  // Creates a temporary variable for the Gcode command and the value attached to it
		  char command = line1[i];	// assigns the first value of the Gcode as the command
 8001b2e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001b30:	683a      	ldr	r2, [r7, #0]
 8001b32:	4413      	add	r3, r2
 8001b34:	781b      	ldrb	r3, [r3, #0]
 8001b36:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		  char newValue[10] = "";
 8001b3a:	f107 0308 	add.w	r3, r7, #8
 8001b3e:	2200      	movs	r2, #0
 8001b40:	601a      	str	r2, [r3, #0]
 8001b42:	605a      	str	r2, [r3, #4]
 8001b44:	811a      	strh	r2, [r3, #8]

		  // Temporary, incrementing variables
		  int j = 0;	// represents the current charcter in the word
 8001b46:	2300      	movs	r3, #0
 8001b48:	673b      	str	r3, [r7, #112]	@ 0x70
		  i++;		// indicates the total character in the line
 8001b4a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001b4c:	3301      	adds	r3, #1
 8001b4e:	677b      	str	r3, [r7, #116]	@ 0x74

		  // while loop that loops through the rest of the command and stores the value in newValue
		  while ((line1[i] != ' ') && (line1[i] != '\0') && (line1[i] != '\n'))
 8001b50:	e00f      	b.n	8001b72 <GCommandParse+0x9a>
		  {
			  newValue[j] = line1[i];
 8001b52:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001b54:	683a      	ldr	r2, [r7, #0]
 8001b56:	4413      	add	r3, r2
 8001b58:	7819      	ldrb	r1, [r3, #0]
 8001b5a:	f107 0208 	add.w	r2, r7, #8
 8001b5e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001b60:	4413      	add	r3, r2
 8001b62:	460a      	mov	r2, r1
 8001b64:	701a      	strb	r2, [r3, #0]
			  i++;
 8001b66:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001b68:	3301      	adds	r3, #1
 8001b6a:	677b      	str	r3, [r7, #116]	@ 0x74
			  j++;
 8001b6c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001b6e:	3301      	adds	r3, #1
 8001b70:	673b      	str	r3, [r7, #112]	@ 0x70
		  while ((line1[i] != ' ') && (line1[i] != '\0') && (line1[i] != '\n'))
 8001b72:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001b74:	683a      	ldr	r2, [r7, #0]
 8001b76:	4413      	add	r3, r2
 8001b78:	781b      	ldrb	r3, [r3, #0]
 8001b7a:	2b20      	cmp	r3, #32
 8001b7c:	d00b      	beq.n	8001b96 <GCommandParse+0xbe>
 8001b7e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001b80:	683a      	ldr	r2, [r7, #0]
 8001b82:	4413      	add	r3, r2
 8001b84:	781b      	ldrb	r3, [r3, #0]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d005      	beq.n	8001b96 <GCommandParse+0xbe>
 8001b8a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001b8c:	683a      	ldr	r2, [r7, #0]
 8001b8e:	4413      	add	r3, r2
 8001b90:	781b      	ldrb	r3, [r3, #0]
 8001b92:	2b0a      	cmp	r3, #10
 8001b94:	d1dd      	bne.n	8001b52 <GCommandParse+0x7a>
		  }

		  //adds the null operator to the end of the newValue
		  newValue[j] = '\0';
 8001b96:	f107 0208 	add.w	r2, r7, #8
 8001b9a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001b9c:	4413      	add	r3, r2
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	701a      	strb	r2, [r3, #0]

		  // Switch statement for the value of command to split the current word into it's variable
		  switch (command)
 8001ba2:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8001ba6:	3b46      	subs	r3, #70	@ 0x46
 8001ba8:	2b14      	cmp	r3, #20
 8001baa:	d86c      	bhi.n	8001c86 <GCommandParse+0x1ae>
 8001bac:	a201      	add	r2, pc, #4	@ (adr r2, 8001bb4 <GCommandParse+0xdc>)
 8001bae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bb2:	bf00      	nop
 8001bb4:	08001c75 	.word	0x08001c75
 8001bb8:	08001c09 	.word	0x08001c09
 8001bbc:	08001c87 	.word	0x08001c87
 8001bc0:	08001c87 	.word	0x08001c87
 8001bc4:	08001c87 	.word	0x08001c87
 8001bc8:	08001c87 	.word	0x08001c87
 8001bcc:	08001c87 	.word	0x08001c87
 8001bd0:	08001c51 	.word	0x08001c51
 8001bd4:	08001c87 	.word	0x08001c87
 8001bd8:	08001c87 	.word	0x08001c87
 8001bdc:	08001c87 	.word	0x08001c87
 8001be0:	08001c87 	.word	0x08001c87
 8001be4:	08001c87 	.word	0x08001c87
 8001be8:	08001c63 	.word	0x08001c63
 8001bec:	08001c87 	.word	0x08001c87
 8001bf0:	08001c87 	.word	0x08001c87
 8001bf4:	08001c87 	.word	0x08001c87
 8001bf8:	08001c87 	.word	0x08001c87
 8001bfc:	08001c1b 	.word	0x08001c1b
 8001c00:	08001c2d 	.word	0x08001c2d
 8001c04:	08001c3f 	.word	0x08001c3f
		  {
		  case 'G':
			  strncpy(Gcommand, newValue, 10);	// copies the value in newValue to the Gcommand variable
 8001c08:	f107 0108 	add.w	r1, r7, #8
 8001c0c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001c10:	220a      	movs	r2, #10
 8001c12:	4618      	mov	r0, r3
 8001c14:	f00d fe82 	bl	800f91c <strncpy>
				break;
 8001c18:	e036      	b.n	8001c88 <GCommandParse+0x1b0>
		  case 'X':
			  strncpy(Xcoordinate, newValue, 10);	// copies the value in newValue to the Xcoordinate variable
 8001c1a:	f107 0108 	add.w	r1, r7, #8
 8001c1e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001c22:	220a      	movs	r2, #10
 8001c24:	4618      	mov	r0, r3
 8001c26:	f00d fe79 	bl	800f91c <strncpy>
				break;
 8001c2a:	e02d      	b.n	8001c88 <GCommandParse+0x1b0>
		  case 'Y':
			  strncpy(Ycoordinate, newValue, 10);	// copies the value in newValue to the Ycoordinate variable
 8001c2c:	f107 0108 	add.w	r1, r7, #8
 8001c30:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001c34:	220a      	movs	r2, #10
 8001c36:	4618      	mov	r0, r3
 8001c38:	f00d fe70 	bl	800f91c <strncpy>
				break;
 8001c3c:	e024      	b.n	8001c88 <GCommandParse+0x1b0>
		  case 'Z':
			  strncpy(Zcoordinate, newValue, 10);	// copies the value in newValue to the Zcoordinate variable
 8001c3e:	f107 0108 	add.w	r1, r7, #8
 8001c42:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001c46:	220a      	movs	r2, #10
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f00d fe67 	bl	800f91c <strncpy>
				break;
 8001c4e:	e01b      	b.n	8001c88 <GCommandParse+0x1b0>
		  case 'M':
			  strncpy(Gcommand, newValue, 10);	// copies the value in newValue to the Mcommand variable
 8001c50:	f107 0108 	add.w	r1, r7, #8
 8001c54:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001c58:	220a      	movs	r2, #10
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f00d fe5e 	bl	800f91c <strncpy>
				break;
 8001c60:	e012      	b.n	8001c88 <GCommandParse+0x1b0>
		  case 'S':
			  strncpy(laserSpeed, newValue, 10);	// copies the value in newValue to the laserSpeed variable
 8001c62:	f107 0108 	add.w	r1, r7, #8
 8001c66:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001c6a:	220a      	movs	r2, #10
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f00d fe55 	bl	800f91c <strncpy>
				break;
 8001c72:	e009      	b.n	8001c88 <GCommandParse+0x1b0>
		  case 'F':
			  strncpy(feedRate, newValue, 10);	// copies the value in newValue to the feedRate variable
 8001c74:	f107 0108 	add.w	r1, r7, #8
 8001c78:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001c7c:	220a      	movs	r2, #10
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f00d fe4c 	bl	800f91c <strncpy>
				break;
 8001c84:	e000      	b.n	8001c88 <GCommandParse+0x1b0>
		  case 'R':
				break;
		  default:
				break;
 8001c86:	bf00      	nop
		  }

		  // When the new line operator occurs, this means the line is over, so we break the while loop
		  if (line1[i] == '\n')
 8001c88:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001c8a:	683a      	ldr	r2, [r7, #0]
 8001c8c:	4413      	add	r3, r2
 8001c8e:	781b      	ldrb	r3, [r3, #0]
 8001c90:	2b0a      	cmp	r3, #10
 8001c92:	d11c      	bne.n	8001cce <GCommandParse+0x1f6>
		  // increments i to the value of the first character of the next command
		  i++;
	  }

	  // Calls the Compute Executables command which computes the output Executables
	  newExecutable = ComputeExecutables(Gcommand, Xcoordinate, Ycoordinate, Zcoordinate, feedRate, laserSpeed);
 8001c94:	f107 0014 	add.w	r0, r7, #20
 8001c98:	f107 044c 	add.w	r4, r7, #76	@ 0x4c
 8001c9c:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 8001ca0:	f107 0164 	add.w	r1, r7, #100	@ 0x64
 8001ca4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001ca8:	9302      	str	r3, [sp, #8]
 8001caa:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001cae:	9301      	str	r3, [sp, #4]
 8001cb0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001cb4:	9300      	str	r3, [sp, #0]
 8001cb6:	4623      	mov	r3, r4
 8001cb8:	f000 f812 	bl	8001ce0 <ComputeExecutables>

	  // Returns the values in the Executable struct
	  return newExecutable;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	461d      	mov	r5, r3
 8001cc0:	f107 0414 	add.w	r4, r7, #20
 8001cc4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001cc6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cc8:	6823      	ldr	r3, [r4, #0]
 8001cca:	602b      	str	r3, [r5, #0]
 8001ccc:	e003      	b.n	8001cd6 <GCommandParse+0x1fe>
		  i++;
 8001cce:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001cd0:	3301      	adds	r3, #1
 8001cd2:	677b      	str	r3, [r7, #116]	@ 0x74
	  {
 8001cd4:	e72b      	b.n	8001b2e <GCommandParse+0x56>
}
 8001cd6:	6878      	ldr	r0, [r7, #4]
 8001cd8:	3778      	adds	r7, #120	@ 0x78
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bdb0      	pop	{r4, r5, r7, pc}
 8001cde:	bf00      	nop

08001ce0 <ComputeExecutables>:
	*s = '\0';
}

// Command Execute takes the parameters from the Gcode line and controls the motors accordingly
Executable ComputeExecutables(char Gcommand[], char Xcommand[], char Ycommand[], char Zcommand[], char feedRate[], char laserSpeed[])
{
 8001ce0:	b5b0      	push	{r4, r5, r7, lr}
 8001ce2:	b08c      	sub	sp, #48	@ 0x30
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	60f8      	str	r0, [r7, #12]
 8001ce8:	60b9      	str	r1, [r7, #8]
 8001cea:	607a      	str	r2, [r7, #4]
 8001cec:	603b      	str	r3, [r7, #0]

	// creates a temporary Executable struct to save the values we compute
	Executable newExecutable;

	// If the Gcode command is G0, runs with rapid positioning (full speed move)
	if ((!strcmp(Gcommand,"0")) || (!strcmp(Gcommand,"1")))
 8001cee:	4984      	ldr	r1, [pc, #528]	@ (8001f00 <ComputeExecutables+0x220>)
 8001cf0:	68b8      	ldr	r0, [r7, #8]
 8001cf2:	f7fe fa6d 	bl	80001d0 <strcmp>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d007      	beq.n	8001d0c <ComputeExecutables+0x2c>
 8001cfc:	4981      	ldr	r1, [pc, #516]	@ (8001f04 <ComputeExecutables+0x224>)
 8001cfe:	68b8      	ldr	r0, [r7, #8]
 8001d00:	f7fe fa66 	bl	80001d0 <strcmp>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	f040 80e3 	bne.w	8001ed2 <ComputeExecutables+0x1f2>
	{

		// If there is a value in Xcommand, it computes the end point of the system (1600 pulses per motor rotation, 43.39 mm per rotation)
		if (Xcommand[0] != '\0')
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	781b      	ldrb	r3, [r3, #0]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d012      	beq.n	8001d3a <ComputeExecutables+0x5a>
		{
			newExecutable.Xend = ((1600 / 43.39) * atof(Xcommand));	// Converts Xcommand to an int, changes units to .1 mms and updates the global variable
 8001d14:	6878      	ldr	r0, [r7, #4]
 8001d16:	f00c fdf7 	bl	800e908 <atof>
 8001d1a:	ec51 0b10 	vmov	r0, r1, d0
 8001d1e:	a374      	add	r3, pc, #464	@ (adr r3, 8001ef0 <ComputeExecutables+0x210>)
 8001d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d24:	f7fe fc78 	bl	8000618 <__aeabi_dmul>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	460b      	mov	r3, r1
 8001d2c:	4610      	mov	r0, r2
 8001d2e:	4619      	mov	r1, r3
 8001d30:	f7fe ff22 	bl	8000b78 <__aeabi_d2iz>
 8001d34:	4603      	mov	r3, r0
 8001d36:	613b      	str	r3, [r7, #16]
 8001d38:	e002      	b.n	8001d40 <ComputeExecutables+0x60>
		}

		// If there is no value in Xcommand, Xend equals the current Xvalue (Xcurrent is a global variable that stores the X position that is currently being calculated
		else
		{
			newExecutable.Xend = XCurrentCalculate;
 8001d3a:	4b73      	ldr	r3, [pc, #460]	@ (8001f08 <ComputeExecutables+0x228>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	613b      	str	r3, [r7, #16]
		}

		// If there is a value in Ycommand, it computes the end point of the system (1600 pulses per motor rotation, 43.39 mm per rotation)
		if (Ycommand[0] != '\0')
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	781b      	ldrb	r3, [r3, #0]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d012      	beq.n	8001d6e <ComputeExecutables+0x8e>
		{
			newExecutable.Yend = ((1600 / 43.39) * atof(Ycommand));	// Converts Ycommand to an int, changes units to .1 mms and updates the global variable
 8001d48:	6838      	ldr	r0, [r7, #0]
 8001d4a:	f00c fddd 	bl	800e908 <atof>
 8001d4e:	ec51 0b10 	vmov	r0, r1, d0
 8001d52:	a367      	add	r3, pc, #412	@ (adr r3, 8001ef0 <ComputeExecutables+0x210>)
 8001d54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d58:	f7fe fc5e 	bl	8000618 <__aeabi_dmul>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	460b      	mov	r3, r1
 8001d60:	4610      	mov	r0, r2
 8001d62:	4619      	mov	r1, r3
 8001d64:	f7fe ff08 	bl	8000b78 <__aeabi_d2iz>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	617b      	str	r3, [r7, #20]
 8001d6c:	e002      	b.n	8001d74 <ComputeExecutables+0x94>
		}

		// If there is no value in Xcommand, Xend equals the current Xvalue (Xcurrent is a global variable that stores the X position that is currently being calculated
		else
		{
			newExecutable.Yend = YCurrentCalculate;
 8001d6e:	4b67      	ldr	r3, [pc, #412]	@ (8001f0c <ComputeExecutables+0x22c>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	617b      	str	r3, [r7, #20]
		}

		// Calculates distance to be traveled in the current engrave
		float Xdistance = newExecutable.Xend - XCurrentCalculate;
 8001d74:	693a      	ldr	r2, [r7, #16]
 8001d76:	4b64      	ldr	r3, [pc, #400]	@ (8001f08 <ComputeExecutables+0x228>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	1ad3      	subs	r3, r2, r3
 8001d7c:	ee07 3a90 	vmov	s15, r3
 8001d80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d84:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
		float Ydistance = newExecutable.Yend - YCurrentCalculate;
 8001d88:	697a      	ldr	r2, [r7, #20]
 8001d8a:	4b60      	ldr	r3, [pc, #384]	@ (8001f0c <ComputeExecutables+0x22c>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	1ad3      	subs	r3, r2, r3
 8001d90:	ee07 3a90 	vmov	s15, r3
 8001d94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d98:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28

		// sets the current calculate global variable for the next line to use
		XCurrentCalculate = newExecutable.Xend;
 8001d9c:	693b      	ldr	r3, [r7, #16]
 8001d9e:	4a5a      	ldr	r2, [pc, #360]	@ (8001f08 <ComputeExecutables+0x228>)
 8001da0:	6013      	str	r3, [r2, #0]
		YCurrentCalculate = newExecutable.Yend;
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	4a59      	ldr	r2, [pc, #356]	@ (8001f0c <ComputeExecutables+0x22c>)
 8001da6:	6013      	str	r3, [r2, #0]

		// sets the feedRate variable (sometimes the Gcommand doesn't put in a new feedRate variable and the feedRate stays the same
		// In order to calculate each step, we need to save the feedRate because the next command may need it
		if (feedRate[0] != '\0')
 8001da8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001daa:	781b      	ldrb	r3, [r3, #0]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d005      	beq.n	8001dbc <ComputeExecutables+0xdc>
		{
			feed = atoi(feedRate);	// Converts feedRate to an int
 8001db0:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001db2:	f00c fdac 	bl	800e90e <atoi>
 8001db6:	4603      	mov	r3, r0
 8001db8:	4a55      	ldr	r2, [pc, #340]	@ (8001f10 <ComputeExecutables+0x230>)
 8001dba:	6013      	str	r3, [r2, #0]
		}

		// Initiates the Xspeed and Yspeed variables to 1 (so if the speed doesn't change, the next instruction won't divide by 0)
		// It is set to one so that the timer interrupt will be called quickly, and the stopped motor won't disrupt the other motor)
		newExecutable.Xspeed = 1;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	61bb      	str	r3, [r7, #24]
		newExecutable.Yspeed = 1;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	61fb      	str	r3, [r7, #28]

		// calculates the total distance in order to evaluate the speed (feedRate is given in a direct, diagonal path)
		float totalDistance = sqrt((Xdistance * Xdistance) + (Ydistance * Ydistance));
 8001dc4:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001dc8:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001dcc:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001dd0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001dd4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dd8:	ee17 0a90 	vmov	r0, s15
 8001ddc:	f7fe fbc4 	bl	8000568 <__aeabi_f2d>
 8001de0:	4602      	mov	r2, r0
 8001de2:	460b      	mov	r3, r1
 8001de4:	ec43 2b10 	vmov	d0, r2, r3
 8001de8:	f00f fe7a 	bl	8011ae0 <sqrt>
 8001dec:	ec53 2b10 	vmov	r2, r3, d0
 8001df0:	4610      	mov	r0, r2
 8001df2:	4619      	mov	r1, r3
 8001df4:	f7fe ff08 	bl	8000c08 <__aeabi_d2f>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	627b      	str	r3, [r7, #36]	@ 0x24

		// ensures the distance won't be divided by 0
		if (Xdistance != 0)
 8001dfc:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001e00:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001e04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e08:	d02b      	beq.n	8001e62 <ComputeExecutables+0x182>
		{

			// Calcualtes the required prescaler value and saves it in the Xspeed variable
			newExecutable.Xspeed = 162712.482 / ((abs(Xdistance) / totalDistance) * feed);
 8001e0a:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001e0e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e12:	ee17 3a90 	vmov	r3, s15
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	bfb8      	it	lt
 8001e1a:	425b      	neglt	r3, r3
 8001e1c:	ee07 3a90 	vmov	s15, r3
 8001e20:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001e24:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001e28:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001e2c:	4b38      	ldr	r3, [pc, #224]	@ (8001f10 <ComputeExecutables+0x230>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	ee07 3a90 	vmov	s15, r3
 8001e34:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e3c:	ee17 0a90 	vmov	r0, s15
 8001e40:	f7fe fb92 	bl	8000568 <__aeabi_f2d>
 8001e44:	4602      	mov	r2, r0
 8001e46:	460b      	mov	r3, r1
 8001e48:	a12b      	add	r1, pc, #172	@ (adr r1, 8001ef8 <ComputeExecutables+0x218>)
 8001e4a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001e4e:	f7fe fd0d 	bl	800086c <__aeabi_ddiv>
 8001e52:	4602      	mov	r2, r0
 8001e54:	460b      	mov	r3, r1
 8001e56:	4610      	mov	r0, r2
 8001e58:	4619      	mov	r1, r3
 8001e5a:	f7fe fe8d 	bl	8000b78 <__aeabi_d2iz>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	61bb      	str	r3, [r7, #24]
		}

		// Ensures the distance won't be divided by 0
		if (Ydistance != 0)
 8001e62:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001e66:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001e6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e6e:	d02b      	beq.n	8001ec8 <ComputeExecutables+0x1e8>
		{

			// Calculates the required prescaler value and saves it in the Yspeed variable
			newExecutable.Yspeed = 162712.482 / ((abs(Ydistance) / totalDistance) * feed);
 8001e70:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001e74:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e78:	ee17 3a90 	vmov	r3, s15
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	bfb8      	it	lt
 8001e80:	425b      	neglt	r3, r3
 8001e82:	ee07 3a90 	vmov	s15, r3
 8001e86:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001e8a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001e8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001e92:	4b1f      	ldr	r3, [pc, #124]	@ (8001f10 <ComputeExecutables+0x230>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	ee07 3a90 	vmov	s15, r3
 8001e9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ea2:	ee17 0a90 	vmov	r0, s15
 8001ea6:	f7fe fb5f 	bl	8000568 <__aeabi_f2d>
 8001eaa:	4602      	mov	r2, r0
 8001eac:	460b      	mov	r3, r1
 8001eae:	a112      	add	r1, pc, #72	@ (adr r1, 8001ef8 <ComputeExecutables+0x218>)
 8001eb0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001eb4:	f7fe fcda 	bl	800086c <__aeabi_ddiv>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	460b      	mov	r3, r1
 8001ebc:	4610      	mov	r0, r2
 8001ebe:	4619      	mov	r1, r3
 8001ec0:	f7fe fe5a 	bl	8000b78 <__aeabi_d2iz>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	61fb      	str	r3, [r7, #28]
		}

		// Converters laserSpeed to an int
		newExecutable.laserSpeed = atoi(laserSpeed);
 8001ec8:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8001eca:	f00c fd20 	bl	800e90e <atoi>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	623b      	str	r3, [r7, #32]
	}

	// if there are any other possible input comands (M command, G02, G03, etc. we can put them here)

	// returns the Executable struct
	return newExecutable;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	461d      	mov	r5, r3
 8001ed6:	f107 0410 	add.w	r4, r7, #16
 8001eda:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001edc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ede:	6823      	ldr	r3, [r4, #0]
 8001ee0:	602b      	str	r3, [r5, #0]



}
 8001ee2:	68f8      	ldr	r0, [r7, #12]
 8001ee4:	3730      	adds	r7, #48	@ 0x30
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bdb0      	pop	{r4, r5, r7, pc}
 8001eea:	bf00      	nop
 8001eec:	f3af 8000 	nop.w
 8001ef0:	47af49cf 	.word	0x47af49cf
 8001ef4:	40426ffb 	.word	0x40426ffb
 8001ef8:	db22d0e5 	.word	0xdb22d0e5
 8001efc:	4103dcc3 	.word	0x4103dcc3
 8001f00:	08011d70 	.word	0x08011d70
 8001f04:	08011d74 	.word	0x08011d74
 8001f08:	20000470 	.word	0x20000470
 8001f0c:	20000474 	.word	0x20000474
 8001f10:	20000468 	.word	0x20000468
 8001f14:	00000000 	.word	0x00000000

08001f18 <SetLaserPower>:

// Function to set the laser power. input must be a value from 0 to 255
void SetLaserPower(uint8_t power) {
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b084      	sub	sp, #16
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	4603      	mov	r3, r0
 8001f20:	71fb      	strb	r3, [r7, #7]

	power = power / 2;
 8001f22:	79fb      	ldrb	r3, [r7, #7]
 8001f24:	085b      	lsrs	r3, r3, #1
 8001f26:	71fb      	strb	r3, [r7, #7]
	// the timer requires the duty cycle in a ratio from 0 to 80000
	float dutyCycle = (power/255.0) * 80000;
 8001f28:	79fb      	ldrb	r3, [r7, #7]
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f7fe fb0a 	bl	8000544 <__aeabi_i2d>
 8001f30:	a311      	add	r3, pc, #68	@ (adr r3, 8001f78 <SetLaserPower+0x60>)
 8001f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f36:	f7fe fc99 	bl	800086c <__aeabi_ddiv>
 8001f3a:	4602      	mov	r2, r0
 8001f3c:	460b      	mov	r3, r1
 8001f3e:	4610      	mov	r0, r2
 8001f40:	4619      	mov	r1, r3
 8001f42:	a30f      	add	r3, pc, #60	@ (adr r3, 8001f80 <SetLaserPower+0x68>)
 8001f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f48:	f7fe fb66 	bl	8000618 <__aeabi_dmul>
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	460b      	mov	r3, r1
 8001f50:	4610      	mov	r0, r2
 8001f52:	4619      	mov	r1, r3
 8001f54:	f7fe fe58 	bl	8000c08 <__aeabi_d2f>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	60fb      	str	r3, [r7, #12]
    TIM2->CCR1 = dutyCycle;  // Set duty cycle
 8001f5c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001f60:	edd7 7a03 	vldr	s15, [r7, #12]
 8001f64:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f68:	ee17 2a90 	vmov	r2, s15
 8001f6c:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001f6e:	bf00      	nop
 8001f70:	3710      	adds	r7, #16
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	00000000 	.word	0x00000000
 8001f7c:	406fe000 	.word	0x406fe000
 8001f80:	00000000 	.word	0x00000000
 8001f84:	40f38800 	.word	0x40f38800

08001f88 <StartEngrave>:

// Function to start the motors and laser for engraving
void StartEngrave(Executable output){
 8001f88:	b084      	sub	sp, #16
 8001f8a:	b580      	push	{r7, lr}
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	f107 0c08 	add.w	ip, r7, #8
 8001f92:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	  // Starts the PWM for the laser
	  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001f96:	2100      	movs	r1, #0
 8001f98:	4808      	ldr	r0, [pc, #32]	@ (8001fbc <StartEngrave+0x34>)
 8001f9a:	f004 f847 	bl	800602c <HAL_TIM_PWM_Start>
	  HAL_TIM_Base_Start_IT(&htim2);
 8001f9e:	4807      	ldr	r0, [pc, #28]	@ (8001fbc <StartEngrave+0x34>)
 8001fa0:	f003 ff4e 	bl	8005e40 <HAL_TIM_Base_Start_IT>

	  // Starts the timers for the motors
	  HAL_TIM_Base_Start_IT(&htim16);
 8001fa4:	4806      	ldr	r0, [pc, #24]	@ (8001fc0 <StartEngrave+0x38>)
 8001fa6:	f003 ff4b 	bl	8005e40 <HAL_TIM_Base_Start_IT>
	  HAL_TIM_Base_Start_IT(&htim17);
 8001faa:	4806      	ldr	r0, [pc, #24]	@ (8001fc4 <StartEngrave+0x3c>)
 8001fac:	f003 ff48 	bl	8005e40 <HAL_TIM_Base_Start_IT>

}
 8001fb0:	bf00      	nop
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001fb8:	b004      	add	sp, #16
 8001fba:	4770      	bx	lr
 8001fbc:	200002d0 	.word	0x200002d0
 8001fc0:	2000031c 	.word	0x2000031c
 8001fc4:	20000368 	.word	0x20000368

08001fc8 <SetOutputs>:

// Function which sets all the parameters in order to engrave
void SetOutputs(Executable output){
 8001fc8:	b084      	sub	sp, #16
 8001fca:	b580      	push	{r7, lr}
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	f107 0c08 	add.w	ip, r7, #8
 8001fd2:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	// Sets the Xend and Yend global variables so the motors know when to stop
	Xend = output.Xend;
 8001fd6:	68bb      	ldr	r3, [r7, #8]
 8001fd8:	4a28      	ldr	r2, [pc, #160]	@ (800207c <SetOutputs+0xb4>)
 8001fda:	6013      	str	r3, [r2, #0]
	Yend = output.Yend;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	4a28      	ldr	r2, [pc, #160]	@ (8002080 <SetOutputs+0xb8>)
 8001fe0:	6013      	str	r3, [r2, #0]

	// Updates the X Direction variable and writes to the pin
	if (output.Xend > Xcurrent)
 8001fe2:	68ba      	ldr	r2, [r7, #8]
 8001fe4:	4b27      	ldr	r3, [pc, #156]	@ (8002084 <SetOutputs+0xbc>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	dd08      	ble.n	8001ffe <SetOutputs+0x36>
	{
		XDIR = 1;
 8001fec:	4b26      	ldr	r3, [pc, #152]	@ (8002088 <SetOutputs+0xc0>)
 8001fee:	2201      	movs	r2, #1
 8001ff0:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(XDIR_GPIO_Port, XDIR_Pin, 1);
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	2110      	movs	r1, #16
 8001ff6:	4825      	ldr	r0, [pc, #148]	@ (800208c <SetOutputs+0xc4>)
 8001ff8:	f001 f92c 	bl	8003254 <HAL_GPIO_WritePin>
 8001ffc:	e00c      	b.n	8002018 <SetOutputs+0x50>
	}
	else if (output.Xend < Xcurrent)
 8001ffe:	68ba      	ldr	r2, [r7, #8]
 8002000:	4b20      	ldr	r3, [pc, #128]	@ (8002084 <SetOutputs+0xbc>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	429a      	cmp	r2, r3
 8002006:	da07      	bge.n	8002018 <SetOutputs+0x50>
	{
		XDIR = 0;
 8002008:	4b1f      	ldr	r3, [pc, #124]	@ (8002088 <SetOutputs+0xc0>)
 800200a:	2200      	movs	r2, #0
 800200c:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(XDIR_GPIO_Port, XDIR_Pin, 0);
 800200e:	2200      	movs	r2, #0
 8002010:	2110      	movs	r1, #16
 8002012:	481e      	ldr	r0, [pc, #120]	@ (800208c <SetOutputs+0xc4>)
 8002014:	f001 f91e 	bl	8003254 <HAL_GPIO_WritePin>
	}

	// Updates the X Direction variable and writes to the pin
	if (output.Yend > Ycurrent)
 8002018:	68fa      	ldr	r2, [r7, #12]
 800201a:	4b1d      	ldr	r3, [pc, #116]	@ (8002090 <SetOutputs+0xc8>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	429a      	cmp	r2, r3
 8002020:	dd0a      	ble.n	8002038 <SetOutputs+0x70>
	{
		YDIR = 1;
 8002022:	4b1c      	ldr	r3, [pc, #112]	@ (8002094 <SetOutputs+0xcc>)
 8002024:	2201      	movs	r2, #1
 8002026:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(YDIR_GPIO_Port, YDIR_Pin, 1);
 8002028:	2201      	movs	r2, #1
 800202a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800202e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002032:	f001 f90f 	bl	8003254 <HAL_GPIO_WritePin>
 8002036:	e00e      	b.n	8002056 <SetOutputs+0x8e>
	}
	else if (output.Yend < Ycurrent)
 8002038:	68fa      	ldr	r2, [r7, #12]
 800203a:	4b15      	ldr	r3, [pc, #84]	@ (8002090 <SetOutputs+0xc8>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	429a      	cmp	r2, r3
 8002040:	da09      	bge.n	8002056 <SetOutputs+0x8e>
	{
		YDIR = 0;
 8002042:	4b14      	ldr	r3, [pc, #80]	@ (8002094 <SetOutputs+0xcc>)
 8002044:	2200      	movs	r2, #0
 8002046:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(YDIR_GPIO_Port, YDIR_Pin, 0);
 8002048:	2200      	movs	r2, #0
 800204a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800204e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002052:	f001 f8ff 	bl	8003254 <HAL_GPIO_WritePin>
	}

	// Sets the prescaler values so the motors turn at the correct speed
	__HAL_TIM_SET_PRESCALER(&htim16, output.Xspeed);
 8002056:	693a      	ldr	r2, [r7, #16]
 8002058:	4b0f      	ldr	r3, [pc, #60]	@ (8002098 <SetOutputs+0xd0>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	629a      	str	r2, [r3, #40]	@ 0x28
	__HAL_TIM_SET_PRESCALER(&htim17, output.Yspeed);
 800205e:	697a      	ldr	r2, [r7, #20]
 8002060:	4b0e      	ldr	r3, [pc, #56]	@ (800209c <SetOutputs+0xd4>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	629a      	str	r2, [r3, #40]	@ 0x28

	// Sets the Laser Power to the correct value
	SetLaserPower(output.laserSpeed);
 8002066:	69bb      	ldr	r3, [r7, #24]
 8002068:	b2db      	uxtb	r3, r3
 800206a:	4618      	mov	r0, r3
 800206c:	f7ff ff54 	bl	8001f18 <SetLaserPower>
}
 8002070:	bf00      	nop
 8002072:	46bd      	mov	sp, r7
 8002074:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002078:	b004      	add	sp, #16
 800207a:	4770      	bx	lr
 800207c:	20000460 	.word	0x20000460
 8002080:	20000464 	.word	0x20000464
 8002084:	20000458 	.word	0x20000458
 8002088:	20000004 	.word	0x20000004
 800208c:	48000400 	.word	0x48000400
 8002090:	2000045c 	.word	0x2000045c
 8002094:	20000008 	.word	0x20000008
 8002098:	2000031c 	.word	0x2000031c
 800209c:	20000368 	.word	0x20000368

080020a0 <__io_putchar>:

PUTCHAR_PROTOTYPE
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b082      	sub	sp, #8
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *) &ch, 1, 0xFFFF);
 80020a8:	1d39      	adds	r1, r7, #4
 80020aa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80020ae:	2201      	movs	r2, #1
 80020b0:	4803      	ldr	r0, [pc, #12]	@ (80020c0 <__io_putchar+0x20>)
 80020b2:	f005 f831 	bl	8007118 <HAL_UART_Transmit>
	return ch;
 80020b6:	687b      	ldr	r3, [r7, #4]
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	3708      	adds	r7, #8
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}
 80020c0:	200003b4 	.word	0x200003b4

080020c4 <StartLaserEngrave>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartLaserEngrave */
void StartLaserEngrave(void *argument)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b08a      	sub	sp, #40	@ 0x28
 80020c8:	af02      	add	r7, sp, #8
 80020ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

	while (setup != 0) osDelay(1);
 80020cc:	e002      	b.n	80020d4 <StartLaserEngrave+0x10>
 80020ce:	2001      	movs	r0, #1
 80020d0:	f009 f840 	bl	800b154 <osDelay>
 80020d4:	4b1b      	ldr	r3, [pc, #108]	@ (8002144 <StartLaserEngrave+0x80>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d1f8      	bne.n	80020ce <StartLaserEngrave+0xa>
  // Ensures the enable pins are turned off to allow the motors to turn
  HAL_GPIO_WritePin(XEN_GPIO_Port, XEN_Pin,0);
 80020dc:	2200      	movs	r2, #0
 80020de:	2120      	movs	r1, #32
 80020e0:	4819      	ldr	r0, [pc, #100]	@ (8002148 <StartLaserEngrave+0x84>)
 80020e2:	f001 f8b7 	bl	8003254 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(YEN_GPIO_Port, YEN_Pin,0);
 80020e6:	2200      	movs	r2, #0
 80020e8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80020ec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80020f0:	f001 f8b0 	bl	8003254 <HAL_GPIO_WritePin>

  // Declares the executable outside the for loop so that it doesn't have to be redeclared every time
  Executable newExecutable;

  // gives the loadInstruction Task a chance to load data from the SD card to fill the queue
  osDelay(100);
 80020f4:	2064      	movs	r0, #100	@ 0x64
 80020f6:	f009 f82d 	bl	800b154 <osDelay>

  osSemaphoreRelease(runningHandle);
 80020fa:	4b14      	ldr	r3, [pc, #80]	@ (800214c <StartLaserEngrave+0x88>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4618      	mov	r0, r3
 8002100:	f009 f91e 	bl	800b340 <osSemaphoreRelease>

  /* Infinite loop */
  for(;;)
  {
	  	  // This is where the program waits for the engrave to finish. The semaphore is initiated as fulfilled so it begins correctly.
		  osSemaphoreAcquire(runningHandle, osWaitForever);
 8002104:	4b11      	ldr	r3, [pc, #68]	@ (800214c <StartLaserEngrave+0x88>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f04f 31ff 	mov.w	r1, #4294967295
 800210c:	4618      	mov	r0, r3
 800210e:	f009 f8c5 	bl	800b29c <osSemaphoreAcquire>

		  // Gets the executable struct from the queue with the next engrave
		  osMessageQueueGet(valueQueueHandle, (Executable *) &newExecutable, 0, osWaitForever);
 8002112:	4b0f      	ldr	r3, [pc, #60]	@ (8002150 <StartLaserEngrave+0x8c>)
 8002114:	6818      	ldr	r0, [r3, #0]
 8002116:	f107 010c 	add.w	r1, r7, #12
 800211a:	f04f 33ff 	mov.w	r3, #4294967295
 800211e:	2200      	movs	r2, #0
 8002120:	f009 fa6a 	bl	800b5f8 <osMessageQueueGet>

		  // Sets the outputs such as the DIR outputs, the motor speeds and the laser PWM duty cycle
		  SetOutputs(newExecutable);
 8002124:	69fb      	ldr	r3, [r7, #28]
 8002126:	9300      	str	r3, [sp, #0]
 8002128:	f107 030c 	add.w	r3, r7, #12
 800212c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800212e:	f7ff ff4b 	bl	8001fc8 <SetOutputs>

		  // Begins the timers for the engrave
		  StartEngrave(newExecutable);
 8002132:	69fb      	ldr	r3, [r7, #28]
 8002134:	9300      	str	r3, [sp, #0]
 8002136:	f107 030c 	add.w	r3, r7, #12
 800213a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800213c:	f7ff ff24 	bl	8001f88 <StartEngrave>
		  osSemaphoreAcquire(runningHandle, osWaitForever);
 8002140:	bf00      	nop
 8002142:	e7df      	b.n	8002104 <StartLaserEngrave+0x40>
 8002144:	2000046c 	.word	0x2000046c
 8002148:	48000400 	.word	0x48000400
 800214c:	2000044c 	.word	0x2000044c
 8002150:	20000448 	.word	0x20000448

08002154 <StartLoadInstruction>:
This is the LoadInstruction Task whose main purpose is to load information from the SD card, translate it into executable data, and add it to the queue
This task has a lower priority than the laser engrave task, since we can load information in the background while the motors are running rather than during the laser engrave task
*/
/* USER CODE END Header_StartLoadInstruction */
void StartLoadInstruction(void *argument)
{
 8002154:	b5b0      	push	{r4, r5, r7, lr}
 8002156:	b0a8      	sub	sp, #160	@ 0xa0
 8002158:	af00      	add	r7, sp, #0
 800215a:	61f8      	str	r0, [r7, #28]
  /* USER CODE BEGIN StartLoadInstruction */
  /* Infinite loop */
	while (setup != 0) osDelay(1);
 800215c:	e002      	b.n	8002164 <StartLoadInstruction+0x10>
 800215e:	2001      	movs	r0, #1
 8002160:	f008 fff8 	bl	800b154 <osDelay>
 8002164:	4b18      	ldr	r3, [pc, #96]	@ (80021c8 <StartLoadInstruction+0x74>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d1f8      	bne.n	800215e <StartLoadInstruction+0xa>
	Executable newExecutable;	// int array with variables for us to execute

  for(;;)
  {
	  // reads a line from the SD card and saves it in readBuf
	  rres = f_gets((TCHAR*)readBuf, 100, &fil);
 800216c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002170:	4a16      	ldr	r2, [pc, #88]	@ (80021cc <StartLoadInstruction+0x78>)
 8002172:	2164      	movs	r1, #100	@ 0x64
 8002174:	4618      	mov	r0, r3
 8002176:	f008 fded 	bl	800ad54 <f_gets>
 800217a:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c

	  // if there is data sent, it calls the GcommandParse function which computes the values we need to save in the executable struct
	  if(rres != 0) {
 800217e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002182:	2b00      	cmp	r3, #0
 8002184:	d00e      	beq.n	80021a4 <StartLoadInstruction+0x50>
		newExecutable = GCommandParse((TCHAR*)readBuf);
 8002186:	463b      	mov	r3, r7
 8002188:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 800218c:	4611      	mov	r1, r2
 800218e:	4618      	mov	r0, r3
 8002190:	f7ff fca2 	bl	8001ad8 <GCommandParse>
 8002194:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 8002198:	463d      	mov	r5, r7
 800219a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800219c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800219e:	682b      	ldr	r3, [r5, #0]
 80021a0:	6023      	str	r3, [r4, #0]
 80021a2:	e007      	b.n	80021b4 <StartLoadInstruction+0x60>

	  // if f_get returns 0, the program ends and enters a while loop
	  } else {
		f_close(&fil);	// closes the SD card file
 80021a4:	4809      	ldr	r0, [pc, #36]	@ (80021cc <StartLoadInstruction+0x78>)
 80021a6:	f008 fcbf 	bl	800ab28 <f_close>
		osSemaphoreRelease(RunFileHandle);	// Releases the semaphore to give control back to the ControlTask
 80021aa:	4b09      	ldr	r3, [pc, #36]	@ (80021d0 <StartLoadInstruction+0x7c>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4618      	mov	r0, r3
 80021b0:	f009 f8c6 	bl	800b340 <osSemaphoreRelease>
	  }

	  // Once we have the executable struct, we save the address to the Queue
	  osMessageQueuePut(valueQueueHandle, &newExecutable, 0, osWaitForever);
 80021b4:	4b07      	ldr	r3, [pc, #28]	@ (80021d4 <StartLoadInstruction+0x80>)
 80021b6:	6818      	ldr	r0, [r3, #0]
 80021b8:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 80021bc:	f04f 33ff 	mov.w	r3, #4294967295
 80021c0:	2200      	movs	r2, #0
 80021c2:	f009 f9b9 	bl	800b538 <osMessageQueuePut>
	  rres = f_gets((TCHAR*)readBuf, 100, &fil);
 80021c6:	e7d1      	b.n	800216c <StartLoadInstruction+0x18>
 80021c8:	2000046c 	.word	0x2000046c
 80021cc:	20000478 	.word	0x20000478
 80021d0:	20000454 	.word	0x20000454
 80021d4:	20000448 	.word	0x20000448

080021d8 <StartControlTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartControlTask */
void StartControlTask(void *argument)
{
 80021d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80021dc:	f5ad 7d29 	sub.w	sp, sp, #676	@ 0x2a4
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	f507 7328 	add.w	r3, r7, #672	@ 0x2a0
 80021e6:	f5a3 7325 	sub.w	r3, r3, #660	@ 0x294
 80021ea:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN StartControlTask */
  /* Infinite loop */
  for(;;)
  {
 80021ec:	466b      	mov	r3, sp
 80021ee:	60bb      	str	r3, [r7, #8]
	  FRESULT fres;    //Result after operations
	  DIR dir;			//Directory
	  FILINFO fno;		// File info

	  //Open the file system
	  fres = f_mount(&FatFs, "", 1); //1=mount now
 80021f0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80021f4:	2201      	movs	r2, #1
 80021f6:	4971      	ldr	r1, [pc, #452]	@ (80023bc <StartControlTask+0x1e4>)
 80021f8:	4618      	mov	r0, r3
 80021fa:	f008 f879 	bl	800a2f0 <f_mount>
 80021fe:	4603      	mov	r3, r0
 8002200:	f887 3297 	strb.w	r3, [r7, #663]	@ 0x297
	  if (fres != FR_OK) {
 8002204:	f897 3297 	ldrb.w	r3, [r7, #663]	@ 0x297
 8002208:	2b00      	cmp	r3, #0
 800220a:	d007      	beq.n	800221c <StartControlTask+0x44>
		myprintf("f_mount error (%i)\r\n", fres);
 800220c:	f897 3297 	ldrb.w	r3, [r7, #663]	@ 0x297
 8002210:	4619      	mov	r1, r3
 8002212:	486b      	ldr	r0, [pc, #428]	@ (80023c0 <StartControlTask+0x1e8>)
 8002214:	f7ff f826 	bl	8001264 <myprintf>
		while(1);
 8002218:	bf00      	nop
 800221a:	e7fd      	b.n	8002218 <StartControlTask+0x40>
	  }


	  f_opendir(&dir, "/");   // Open Root
 800221c:	f107 0310 	add.w	r3, r7, #16
 8002220:	4968      	ldr	r1, [pc, #416]	@ (80023c4 <StartControlTask+0x1ec>)
 8002222:	4618      	mov	r0, r3
 8002224:	f008 fcaf 	bl	800ab86 <f_opendir>

	  int count = 0;
 8002228:	2300      	movs	r3, #0
 800222a:	f8c7 329c 	str.w	r3, [r7, #668]	@ 0x29c
	  do
	  	  {
	  	      f_readdir(&dir, &fno);
 800222e:	f507 721d 	add.w	r2, r7, #628	@ 0x274
 8002232:	f107 0310 	add.w	r3, r7, #16
 8002236:	4611      	mov	r1, r2
 8002238:	4618      	mov	r0, r3
 800223a:	f008 fd48 	bl	800acce <f_readdir>
	  	      if(fno.fname[0] != 0)
 800223e:	f897 327d 	ldrb.w	r3, [r7, #637]	@ 0x27d
 8002242:	2b00      	cmp	r3, #0
 8002244:	d004      	beq.n	8002250 <StartControlTask+0x78>
	  	    	  count++;
 8002246:	f8d7 329c 	ldr.w	r3, [r7, #668]	@ 0x29c
 800224a:	3301      	adds	r3, #1
 800224c:	f8c7 329c 	str.w	r3, [r7, #668]	@ 0x29c
	  	  } while(fno.fname[0] != 0);
 8002250:	f897 327d 	ldrb.w	r3, [r7, #637]	@ 0x27d
 8002254:	2b00      	cmp	r3, #0
 8002256:	d1ea      	bne.n	800222e <StartControlTask+0x56>

	  f_closedir(&dir);
 8002258:	f107 0310 	add.w	r3, r7, #16
 800225c:	4618      	mov	r0, r3
 800225e:	f008 fd0b 	bl	800ac78 <f_closedir>
	  f_opendir(&dir, "/");
 8002262:	f107 0310 	add.w	r3, r7, #16
 8002266:	4957      	ldr	r1, [pc, #348]	@ (80023c4 <StartControlTask+0x1ec>)
 8002268:	4618      	mov	r0, r3
 800226a:	f008 fc8c 	bl	800ab86 <f_opendir>

	  char fileNames[count][20];
 800226e:	f8d7 629c 	ldr.w	r6, [r7, #668]	@ 0x29c
 8002272:	1e73      	subs	r3, r6, #1
 8002274:	f8c7 3290 	str.w	r3, [r7, #656]	@ 0x290
 8002278:	4632      	mov	r2, r6
 800227a:	2300      	movs	r3, #0
 800227c:	4692      	mov	sl, r2
 800227e:	469b      	mov	fp, r3
 8002280:	4652      	mov	r2, sl
 8002282:	465b      	mov	r3, fp
 8002284:	f04f 0000 	mov.w	r0, #0
 8002288:	f04f 0100 	mov.w	r1, #0
 800228c:	0099      	lsls	r1, r3, #2
 800228e:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8002292:	0090      	lsls	r0, r2, #2
 8002294:	4602      	mov	r2, r0
 8002296:	460b      	mov	r3, r1
 8002298:	eb12 040a 	adds.w	r4, r2, sl
 800229c:	eb43 050b 	adc.w	r5, r3, fp
 80022a0:	f04f 0200 	mov.w	r2, #0
 80022a4:	f04f 0300 	mov.w	r3, #0
 80022a8:	016b      	lsls	r3, r5, #5
 80022aa:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 80022ae:	0162      	lsls	r2, r4, #5
 80022b0:	4614      	mov	r4, r2
 80022b2:	461d      	mov	r5, r3
 80022b4:	4632      	mov	r2, r6
 80022b6:	2300      	movs	r3, #0
 80022b8:	603a      	str	r2, [r7, #0]
 80022ba:	607b      	str	r3, [r7, #4]
 80022bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80022c0:	f04f 0000 	mov.w	r0, #0
 80022c4:	f04f 0100 	mov.w	r1, #0
 80022c8:	0099      	lsls	r1, r3, #2
 80022ca:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 80022ce:	0090      	lsls	r0, r2, #2
 80022d0:	4602      	mov	r2, r0
 80022d2:	460b      	mov	r3, r1
 80022d4:	6839      	ldr	r1, [r7, #0]
 80022d6:	eb12 0801 	adds.w	r8, r2, r1
 80022da:	6879      	ldr	r1, [r7, #4]
 80022dc:	eb43 0901 	adc.w	r9, r3, r1
 80022e0:	f04f 0200 	mov.w	r2, #0
 80022e4:	f04f 0300 	mov.w	r3, #0
 80022e8:	ea4f 1349 	mov.w	r3, r9, lsl #5
 80022ec:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 80022f0:	ea4f 1248 	mov.w	r2, r8, lsl #5
 80022f4:	4690      	mov	r8, r2
 80022f6:	4699      	mov	r9, r3
 80022f8:	4632      	mov	r2, r6
 80022fa:	4613      	mov	r3, r2
 80022fc:	009b      	lsls	r3, r3, #2
 80022fe:	4413      	add	r3, r2
 8002300:	009b      	lsls	r3, r3, #2
 8002302:	3307      	adds	r3, #7
 8002304:	08db      	lsrs	r3, r3, #3
 8002306:	00db      	lsls	r3, r3, #3
 8002308:	ebad 0d03 	sub.w	sp, sp, r3
 800230c:	466b      	mov	r3, sp
 800230e:	3300      	adds	r3, #0
 8002310:	f8c7 328c 	str.w	r3, [r7, #652]	@ 0x28c
	  int i = 0;
 8002314:	2300      	movs	r3, #0
 8002316:	f8c7 3298 	str.w	r3, [r7, #664]	@ 0x298
	  do
	  {
	      f_readdir(&dir, &fno);
 800231a:	f507 721d 	add.w	r2, r7, #628	@ 0x274
 800231e:	f107 0310 	add.w	r3, r7, #16
 8002322:	4611      	mov	r1, r2
 8002324:	4618      	mov	r0, r3
 8002326:	f008 fcd2 	bl	800acce <f_readdir>
	      if(fno.fname[0] != 0)
 800232a:	f897 327d 	ldrb.w	r3, [r7, #637]	@ 0x27d
 800232e:	2b00      	cmp	r3, #0
 8002330:	d014      	beq.n	800235c <StartControlTask+0x184>
	      {
	    	  strcpy(fileNames[i], fno.fname);
 8002332:	f8d7 2298 	ldr.w	r2, [r7, #664]	@ 0x298
 8002336:	4613      	mov	r3, r2
 8002338:	009b      	lsls	r3, r3, #2
 800233a:	4413      	add	r3, r2
 800233c:	009b      	lsls	r3, r3, #2
 800233e:	f8d7 228c 	ldr.w	r2, [r7, #652]	@ 0x28c
 8002342:	441a      	add	r2, r3
 8002344:	f507 731d 	add.w	r3, r7, #628	@ 0x274
 8002348:	3309      	adds	r3, #9
 800234a:	4619      	mov	r1, r3
 800234c:	4610      	mov	r0, r2
 800234e:	f00d fbca 	bl	800fae6 <strcpy>
	    	  i++;
 8002352:	f8d7 3298 	ldr.w	r3, [r7, #664]	@ 0x298
 8002356:	3301      	adds	r3, #1
 8002358:	f8c7 3298 	str.w	r3, [r7, #664]	@ 0x298
	      }
	  } while(fno.fname[0] != 0);
 800235c:	f897 327d 	ldrb.w	r3, [r7, #637]	@ 0x27d
 8002360:	2b00      	cmp	r3, #0
 8002362:	d1da      	bne.n	800231a <StartControlTask+0x142>

	  i = 0;
 8002364:	2300      	movs	r3, #0
 8002366:	f8c7 3298 	str.w	r3, [r7, #664]	@ 0x298
//	  }




	  fres = f_open(&fil, "sonic.txt", FA_READ);
 800236a:	2201      	movs	r2, #1
 800236c:	4916      	ldr	r1, [pc, #88]	@ (80023c8 <StartControlTask+0x1f0>)
 800236e:	4817      	ldr	r0, [pc, #92]	@ (80023cc <StartControlTask+0x1f4>)
 8002370:	f008 f822 	bl	800a3b8 <f_open>
 8002374:	4603      	mov	r3, r0
 8002376:	f887 3297 	strb.w	r3, [r7, #663]	@ 0x297
	  if (fres != FR_OK){
 800237a:	f897 3297 	ldrb.w	r3, [r7, #663]	@ 0x297
 800237e:	2b00      	cmp	r3, #0
 8002380:	d007      	beq.n	8002392 <StartControlTask+0x1ba>
		myprintf("f_open error (%i)\r\n", fres);
 8002382:	f897 3297 	ldrb.w	r3, [r7, #663]	@ 0x297
 8002386:	4619      	mov	r1, r3
 8002388:	4811      	ldr	r0, [pc, #68]	@ (80023d0 <StartControlTask+0x1f8>)
 800238a:	f7fe ff6b 	bl	8001264 <myprintf>
		while(1);
 800238e:	bf00      	nop
 8002390:	e7fd      	b.n	800238e <StartControlTask+0x1b6>
	  }

	  InitiateMotors();
 8002392:	f7ff fa87 	bl	80018a4 <InitiateMotors>
	  osSemaphoreAcquire(RunFileHandle, osWaitForever);
 8002396:	4b0f      	ldr	r3, [pc, #60]	@ (80023d4 <StartControlTask+0x1fc>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f04f 31ff 	mov.w	r1, #4294967295
 800239e:	4618      	mov	r0, r3
 80023a0:	f008 ff7c 	bl	800b29c <osSemaphoreAcquire>

	  lcd_clear();
 80023a4:	f7fe ff3c 	bl	8001220 <lcd_clear>
	  lcd_write_string(("Program Complete!"));
 80023a8:	480b      	ldr	r0, [pc, #44]	@ (80023d8 <StartControlTask+0x200>)
 80023aa:	f7fe ff0f 	bl	80011cc <lcd_write_string>
	  HAL_Delay(5000);
 80023ae:	f241 3088 	movw	r0, #5000	@ 0x1388
 80023b2:	f000 fc87 	bl	8002cc4 <HAL_Delay>
 80023b6:	f8d7 d008 	ldr.w	sp, [r7, #8]
  {
 80023ba:	e717      	b.n	80021ec <StartControlTask+0x14>
 80023bc:	08011d78 	.word	0x08011d78
 80023c0:	08011d7c 	.word	0x08011d7c
 80023c4:	08011d94 	.word	0x08011d94
 80023c8:	08011d98 	.word	0x08011d98
 80023cc:	20000478 	.word	0x20000478
 80023d0:	08011da4 	.word	0x08011da4
 80023d4:	20000454 	.word	0x20000454
 80023d8:	08011db8 	.word	0x08011db8

080023dc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b082      	sub	sp, #8
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

	if (htim == &htim16)	// X motor timer
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	4a4a      	ldr	r2, [pc, #296]	@ (8002510 <HAL_TIM_PeriodElapsedCallback+0x134>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d141      	bne.n	8002470 <HAL_TIM_PeriodElapsedCallback+0x94>
	{
		if (Xcurrent != Xend)	// Evaluates if the X motor has arrived in it's position
 80023ec:	4b49      	ldr	r3, [pc, #292]	@ (8002514 <HAL_TIM_PeriodElapsedCallback+0x138>)
 80023ee:	681a      	ldr	r2, [r3, #0]
 80023f0:	4b49      	ldr	r3, [pc, #292]	@ (8002518 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	429a      	cmp	r2, r3
 80023f6:	d01e      	beq.n	8002436 <HAL_TIM_PeriodElapsedCallback+0x5a>
		{
			HAL_GPIO_TogglePin(XPUL_GPIO_Port, XPUL_Pin);	// Toggles the XPUL pin
 80023f8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80023fc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002400:	f000 ff40 	bl	8003284 <HAL_GPIO_TogglePin>

			// Increments the Xcurrent value if XDIR is positive and decrements if Xcurrent value is negative
			// only increments every other cycle
			if (!HAL_GPIO_ReadPin(XPUL_GPIO_Port, XPUL_Pin))
 8002404:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002408:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800240c:	f000 ff0a 	bl	8003224 <HAL_GPIO_ReadPin>
 8002410:	4603      	mov	r3, r0
 8002412:	2b00      	cmp	r3, #0
 8002414:	d12c      	bne.n	8002470 <HAL_TIM_PeriodElapsedCallback+0x94>
			{
				if (XDIR == 1) Xcurrent++;
 8002416:	4b41      	ldr	r3, [pc, #260]	@ (800251c <HAL_TIM_PeriodElapsedCallback+0x140>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	2b01      	cmp	r3, #1
 800241c:	d105      	bne.n	800242a <HAL_TIM_PeriodElapsedCallback+0x4e>
 800241e:	4b3d      	ldr	r3, [pc, #244]	@ (8002514 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	3301      	adds	r3, #1
 8002424:	4a3b      	ldr	r2, [pc, #236]	@ (8002514 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8002426:	6013      	str	r3, [r2, #0]
 8002428:	e022      	b.n	8002470 <HAL_TIM_PeriodElapsedCallback+0x94>

				else Xcurrent--;
 800242a:	4b3a      	ldr	r3, [pc, #232]	@ (8002514 <HAL_TIM_PeriodElapsedCallback+0x138>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	3b01      	subs	r3, #1
 8002430:	4a38      	ldr	r2, [pc, #224]	@ (8002514 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8002432:	6013      	str	r3, [r2, #0]
 8002434:	e01c      	b.n	8002470 <HAL_TIM_PeriodElapsedCallback+0x94>
			}
		}
		else
		{
			HAL_TIM_Base_Stop_IT(&htim16);	// Once the X motor arrives to it's final position, this stops the timer
 8002436:	4836      	ldr	r0, [pc, #216]	@ (8002510 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8002438:	f003 fd72 	bl	8005f20 <HAL_TIM_Base_Stop_IT>

			// if the X motor and Y motor have both arrived at their destinations
			if ((Ycurrent == Yend))
 800243c:	4b38      	ldr	r3, [pc, #224]	@ (8002520 <HAL_TIM_PeriodElapsedCallback+0x144>)
 800243e:	681a      	ldr	r2, [r3, #0]
 8002440:	4b38      	ldr	r3, [pc, #224]	@ (8002524 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	429a      	cmp	r2, r3
 8002446:	d113      	bne.n	8002470 <HAL_TIM_PeriodElapsedCallback+0x94>
			{

				// stops the laser PWM
				HAL_TIM_Base_Stop_IT(&htim2);
 8002448:	4837      	ldr	r0, [pc, #220]	@ (8002528 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 800244a:	f003 fd69 	bl	8005f20 <HAL_TIM_Base_Stop_IT>
				HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 800244e:	2100      	movs	r1, #0
 8002450:	4835      	ldr	r0, [pc, #212]	@ (8002528 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8002452:	f003 fef1 	bl	8006238 <HAL_TIM_PWM_Stop>

				// Gives the semaphore so the program can continue
				if (osSemaphoreGetCount(runningHandle) == 0)
 8002456:	4b35      	ldr	r3, [pc, #212]	@ (800252c <HAL_TIM_PeriodElapsedCallback+0x150>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4618      	mov	r0, r3
 800245c:	f008 ffb4 	bl	800b3c8 <osSemaphoreGetCount>
 8002460:	4603      	mov	r3, r0
 8002462:	2b00      	cmp	r3, #0
 8002464:	d104      	bne.n	8002470 <HAL_TIM_PeriodElapsedCallback+0x94>
					osSemaphoreRelease(runningHandle);
 8002466:	4b31      	ldr	r3, [pc, #196]	@ (800252c <HAL_TIM_PeriodElapsedCallback+0x150>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4618      	mov	r0, r3
 800246c:	f008 ff68 	bl	800b340 <osSemaphoreRelease>
			}
		}
	}


	if (htim == &htim17)	// Y motor timer
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	4a2f      	ldr	r2, [pc, #188]	@ (8002530 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d13f      	bne.n	80024f8 <HAL_TIM_PeriodElapsedCallback+0x11c>
	{

		if (Ycurrent != Yend)	// Evaluates if the Y motor has arrived in it's position
 8002478:	4b29      	ldr	r3, [pc, #164]	@ (8002520 <HAL_TIM_PeriodElapsedCallback+0x144>)
 800247a:	681a      	ldr	r2, [r3, #0]
 800247c:	4b29      	ldr	r3, [pc, #164]	@ (8002524 <HAL_TIM_PeriodElapsedCallback+0x148>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	429a      	cmp	r2, r3
 8002482:	d01c      	beq.n	80024be <HAL_TIM_PeriodElapsedCallback+0xe2>
		{

			HAL_GPIO_TogglePin(YPUL_GPIO_Port, YPUL_Pin);	// Toggles the YPUL pin
 8002484:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002488:	482a      	ldr	r0, [pc, #168]	@ (8002534 <HAL_TIM_PeriodElapsedCallback+0x158>)
 800248a:	f000 fefb 	bl	8003284 <HAL_GPIO_TogglePin>

			// Increments the Ycurrent value if YDIR is positive and decrements if Ycurrent value is negative
			if (!HAL_GPIO_ReadPin(YPUL_GPIO_Port, YPUL_Pin))
 800248e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002492:	4828      	ldr	r0, [pc, #160]	@ (8002534 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8002494:	f000 fec6 	bl	8003224 <HAL_GPIO_ReadPin>
 8002498:	4603      	mov	r3, r0
 800249a:	2b00      	cmp	r3, #0
 800249c:	d12c      	bne.n	80024f8 <HAL_TIM_PeriodElapsedCallback+0x11c>
			{
				if (YDIR == 1) Ycurrent++;
 800249e:	4b26      	ldr	r3, [pc, #152]	@ (8002538 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	2b01      	cmp	r3, #1
 80024a4:	d105      	bne.n	80024b2 <HAL_TIM_PeriodElapsedCallback+0xd6>
 80024a6:	4b1e      	ldr	r3, [pc, #120]	@ (8002520 <HAL_TIM_PeriodElapsedCallback+0x144>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	3301      	adds	r3, #1
 80024ac:	4a1c      	ldr	r2, [pc, #112]	@ (8002520 <HAL_TIM_PeriodElapsedCallback+0x144>)
 80024ae:	6013      	str	r3, [r2, #0]
 80024b0:	e022      	b.n	80024f8 <HAL_TIM_PeriodElapsedCallback+0x11c>

				else Ycurrent--;
 80024b2:	4b1b      	ldr	r3, [pc, #108]	@ (8002520 <HAL_TIM_PeriodElapsedCallback+0x144>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	3b01      	subs	r3, #1
 80024b8:	4a19      	ldr	r2, [pc, #100]	@ (8002520 <HAL_TIM_PeriodElapsedCallback+0x144>)
 80024ba:	6013      	str	r3, [r2, #0]
 80024bc:	e01c      	b.n	80024f8 <HAL_TIM_PeriodElapsedCallback+0x11c>
			}
		}
		else
		{
		  HAL_TIM_Base_Stop_IT(&htim17);	// Once the Y motor arrives to it's final position, this stops the timer
 80024be:	481c      	ldr	r0, [pc, #112]	@ (8002530 <HAL_TIM_PeriodElapsedCallback+0x154>)
 80024c0:	f003 fd2e 	bl	8005f20 <HAL_TIM_Base_Stop_IT>

		  // if the X motor and Y motor have both arrived at their destinations
		  if (Xcurrent == Xend)
 80024c4:	4b13      	ldr	r3, [pc, #76]	@ (8002514 <HAL_TIM_PeriodElapsedCallback+0x138>)
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	4b13      	ldr	r3, [pc, #76]	@ (8002518 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	429a      	cmp	r2, r3
 80024ce:	d113      	bne.n	80024f8 <HAL_TIM_PeriodElapsedCallback+0x11c>
		  {
			  // stops the laser PWM
			  HAL_TIM_Base_Stop_IT(&htim2);
 80024d0:	4815      	ldr	r0, [pc, #84]	@ (8002528 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 80024d2:	f003 fd25 	bl	8005f20 <HAL_TIM_Base_Stop_IT>
			  HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 80024d6:	2100      	movs	r1, #0
 80024d8:	4813      	ldr	r0, [pc, #76]	@ (8002528 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 80024da:	f003 fead 	bl	8006238 <HAL_TIM_PWM_Stop>
				// Gives the semaphore so the program can continue
			  if (osSemaphoreGetCount(runningHandle) == 0)
 80024de:	4b13      	ldr	r3, [pc, #76]	@ (800252c <HAL_TIM_PeriodElapsedCallback+0x150>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4618      	mov	r0, r3
 80024e4:	f008 ff70 	bl	800b3c8 <osSemaphoreGetCount>
 80024e8:	4603      	mov	r3, r0
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d104      	bne.n	80024f8 <HAL_TIM_PeriodElapsedCallback+0x11c>
				  osSemaphoreRelease(runningHandle);
 80024ee:	4b0f      	ldr	r3, [pc, #60]	@ (800252c <HAL_TIM_PeriodElapsedCallback+0x150>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4618      	mov	r0, r3
 80024f4:	f008 ff24 	bl	800b340 <osSemaphoreRelease>
		  }
		}
	}
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a0f      	ldr	r2, [pc, #60]	@ (800253c <HAL_TIM_PeriodElapsedCallback+0x160>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d101      	bne.n	8002506 <HAL_TIM_PeriodElapsedCallback+0x12a>
  {
    HAL_IncTick();
 8002502:	f000 fbbf 	bl	8002c84 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  /* USER CODE END Callback 1 */
}
 8002506:	bf00      	nop
 8002508:	3708      	adds	r7, #8
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}
 800250e:	bf00      	nop
 8002510:	2000031c 	.word	0x2000031c
 8002514:	20000458 	.word	0x20000458
 8002518:	20000460 	.word	0x20000460
 800251c:	20000004 	.word	0x20000004
 8002520:	2000045c 	.word	0x2000045c
 8002524:	20000464 	.word	0x20000464
 8002528:	200002d0 	.word	0x200002d0
 800252c:	2000044c 	.word	0x2000044c
 8002530:	20000368 	.word	0x20000368
 8002534:	48000400 	.word	0x48000400
 8002538:	20000008 	.word	0x20000008
 800253c:	40000400 	.word	0x40000400

08002540 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002540:	b480      	push	{r7}
 8002542:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002544:	b672      	cpsid	i
}
 8002546:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002548:	bf00      	nop
 800254a:	e7fd      	b.n	8002548 <Error_Handler+0x8>

0800254c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b082      	sub	sp, #8
 8002550:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002552:	4b11      	ldr	r3, [pc, #68]	@ (8002598 <HAL_MspInit+0x4c>)
 8002554:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002556:	4a10      	ldr	r2, [pc, #64]	@ (8002598 <HAL_MspInit+0x4c>)
 8002558:	f043 0301 	orr.w	r3, r3, #1
 800255c:	6613      	str	r3, [r2, #96]	@ 0x60
 800255e:	4b0e      	ldr	r3, [pc, #56]	@ (8002598 <HAL_MspInit+0x4c>)
 8002560:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002562:	f003 0301 	and.w	r3, r3, #1
 8002566:	607b      	str	r3, [r7, #4]
 8002568:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800256a:	4b0b      	ldr	r3, [pc, #44]	@ (8002598 <HAL_MspInit+0x4c>)
 800256c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800256e:	4a0a      	ldr	r2, [pc, #40]	@ (8002598 <HAL_MspInit+0x4c>)
 8002570:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002574:	6593      	str	r3, [r2, #88]	@ 0x58
 8002576:	4b08      	ldr	r3, [pc, #32]	@ (8002598 <HAL_MspInit+0x4c>)
 8002578:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800257a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800257e:	603b      	str	r3, [r7, #0]
 8002580:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002582:	2200      	movs	r2, #0
 8002584:	210f      	movs	r1, #15
 8002586:	f06f 0001 	mvn.w	r0, #1
 800258a:	f000 fc77 	bl	8002e7c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800258e:	bf00      	nop
 8002590:	3708      	adds	r7, #8
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}
 8002596:	bf00      	nop
 8002598:	40021000 	.word	0x40021000

0800259c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b0ac      	sub	sp, #176	@ 0xb0
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025a4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80025a8:	2200      	movs	r2, #0
 80025aa:	601a      	str	r2, [r3, #0]
 80025ac:	605a      	str	r2, [r3, #4]
 80025ae:	609a      	str	r2, [r3, #8]
 80025b0:	60da      	str	r2, [r3, #12]
 80025b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80025b4:	f107 0314 	add.w	r3, r7, #20
 80025b8:	2288      	movs	r2, #136	@ 0x88
 80025ba:	2100      	movs	r1, #0
 80025bc:	4618      	mov	r0, r3
 80025be:	f00d f993 	bl	800f8e8 <memset>
  if(hi2c->Instance==I2C1)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a21      	ldr	r2, [pc, #132]	@ (800264c <HAL_I2C_MspInit+0xb0>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d13b      	bne.n	8002644 <HAL_I2C_MspInit+0xa8>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80025cc:	2340      	movs	r3, #64	@ 0x40
 80025ce:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80025d0:	2300      	movs	r3, #0
 80025d2:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80025d4:	f107 0314 	add.w	r3, r7, #20
 80025d8:	4618      	mov	r0, r3
 80025da:	f002 f981 	bl	80048e0 <HAL_RCCEx_PeriphCLKConfig>
 80025de:	4603      	mov	r3, r0
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d001      	beq.n	80025e8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80025e4:	f7ff ffac 	bl	8002540 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025e8:	4b19      	ldr	r3, [pc, #100]	@ (8002650 <HAL_I2C_MspInit+0xb4>)
 80025ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025ec:	4a18      	ldr	r2, [pc, #96]	@ (8002650 <HAL_I2C_MspInit+0xb4>)
 80025ee:	f043 0302 	orr.w	r3, r3, #2
 80025f2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80025f4:	4b16      	ldr	r3, [pc, #88]	@ (8002650 <HAL_I2C_MspInit+0xb4>)
 80025f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025f8:	f003 0302 	and.w	r3, r3, #2
 80025fc:	613b      	str	r3, [r7, #16]
 80025fe:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8002600:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8002604:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002608:	2312      	movs	r3, #18
 800260a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800260e:	2300      	movs	r3, #0
 8002610:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002614:	2303      	movs	r3, #3
 8002616:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800261a:	2304      	movs	r3, #4
 800261c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002620:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002624:	4619      	mov	r1, r3
 8002626:	480b      	ldr	r0, [pc, #44]	@ (8002654 <HAL_I2C_MspInit+0xb8>)
 8002628:	f000 fc52 	bl	8002ed0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800262c:	4b08      	ldr	r3, [pc, #32]	@ (8002650 <HAL_I2C_MspInit+0xb4>)
 800262e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002630:	4a07      	ldr	r2, [pc, #28]	@ (8002650 <HAL_I2C_MspInit+0xb4>)
 8002632:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002636:	6593      	str	r3, [r2, #88]	@ 0x58
 8002638:	4b05      	ldr	r3, [pc, #20]	@ (8002650 <HAL_I2C_MspInit+0xb4>)
 800263a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800263c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002640:	60fb      	str	r3, [r7, #12]
 8002642:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8002644:	bf00      	nop
 8002646:	37b0      	adds	r7, #176	@ 0xb0
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}
 800264c:	40005400 	.word	0x40005400
 8002650:	40021000 	.word	0x40021000
 8002654:	48000400 	.word	0x48000400

08002658 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b08a      	sub	sp, #40	@ 0x28
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002660:	f107 0314 	add.w	r3, r7, #20
 8002664:	2200      	movs	r2, #0
 8002666:	601a      	str	r2, [r3, #0]
 8002668:	605a      	str	r2, [r3, #4]
 800266a:	609a      	str	r2, [r3, #8]
 800266c:	60da      	str	r2, [r3, #12]
 800266e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a17      	ldr	r2, [pc, #92]	@ (80026d4 <HAL_SPI_MspInit+0x7c>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d128      	bne.n	80026cc <HAL_SPI_MspInit+0x74>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800267a:	4b17      	ldr	r3, [pc, #92]	@ (80026d8 <HAL_SPI_MspInit+0x80>)
 800267c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800267e:	4a16      	ldr	r2, [pc, #88]	@ (80026d8 <HAL_SPI_MspInit+0x80>)
 8002680:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002684:	6613      	str	r3, [r2, #96]	@ 0x60
 8002686:	4b14      	ldr	r3, [pc, #80]	@ (80026d8 <HAL_SPI_MspInit+0x80>)
 8002688:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800268a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800268e:	613b      	str	r3, [r7, #16]
 8002690:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002692:	4b11      	ldr	r3, [pc, #68]	@ (80026d8 <HAL_SPI_MspInit+0x80>)
 8002694:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002696:	4a10      	ldr	r2, [pc, #64]	@ (80026d8 <HAL_SPI_MspInit+0x80>)
 8002698:	f043 0301 	orr.w	r3, r3, #1
 800269c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800269e:	4b0e      	ldr	r3, [pc, #56]	@ (80026d8 <HAL_SPI_MspInit+0x80>)
 80026a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026a2:	f003 0301 	and.w	r3, r3, #1
 80026a6:	60fb      	str	r3, [r7, #12]
 80026a8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80026aa:	23e0      	movs	r3, #224	@ 0xe0
 80026ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026ae:	2302      	movs	r3, #2
 80026b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80026b2:	2301      	movs	r3, #1
 80026b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026b6:	2303      	movs	r3, #3
 80026b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80026ba:	2305      	movs	r3, #5
 80026bc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026be:	f107 0314 	add.w	r3, r7, #20
 80026c2:	4619      	mov	r1, r3
 80026c4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80026c8:	f000 fc02 	bl	8002ed0 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 80026cc:	bf00      	nop
 80026ce:	3728      	adds	r7, #40	@ 0x28
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bd80      	pop	{r7, pc}
 80026d4:	40013000 	.word	0x40013000
 80026d8:	40021000 	.word	0x40021000

080026dc <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80026dc:	b480      	push	{r7}
 80026de:	b085      	sub	sp, #20
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80026ec:	d10b      	bne.n	8002706 <HAL_TIM_PWM_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80026ee:	4b09      	ldr	r3, [pc, #36]	@ (8002714 <HAL_TIM_PWM_MspInit+0x38>)
 80026f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026f2:	4a08      	ldr	r2, [pc, #32]	@ (8002714 <HAL_TIM_PWM_MspInit+0x38>)
 80026f4:	f043 0301 	orr.w	r3, r3, #1
 80026f8:	6593      	str	r3, [r2, #88]	@ 0x58
 80026fa:	4b06      	ldr	r3, [pc, #24]	@ (8002714 <HAL_TIM_PWM_MspInit+0x38>)
 80026fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026fe:	f003 0301 	and.w	r3, r3, #1
 8002702:	60fb      	str	r3, [r7, #12]
 8002704:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8002706:	bf00      	nop
 8002708:	3714      	adds	r7, #20
 800270a:	46bd      	mov	sp, r7
 800270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002710:	4770      	bx	lr
 8002712:	bf00      	nop
 8002714:	40021000 	.word	0x40021000

08002718 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b084      	sub	sp, #16
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a1a      	ldr	r2, [pc, #104]	@ (8002790 <HAL_TIM_Base_MspInit+0x78>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d114      	bne.n	8002754 <HAL_TIM_Base_MspInit+0x3c>
  {
    /* USER CODE BEGIN TIM16_MspInit 0 */

    /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 800272a:	4b1a      	ldr	r3, [pc, #104]	@ (8002794 <HAL_TIM_Base_MspInit+0x7c>)
 800272c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800272e:	4a19      	ldr	r2, [pc, #100]	@ (8002794 <HAL_TIM_Base_MspInit+0x7c>)
 8002730:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002734:	6613      	str	r3, [r2, #96]	@ 0x60
 8002736:	4b17      	ldr	r3, [pc, #92]	@ (8002794 <HAL_TIM_Base_MspInit+0x7c>)
 8002738:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800273a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800273e:	60fb      	str	r3, [r7, #12]
 8002740:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 5, 0);
 8002742:	2200      	movs	r2, #0
 8002744:	2105      	movs	r1, #5
 8002746:	2019      	movs	r0, #25
 8002748:	f000 fb98 	bl	8002e7c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800274c:	2019      	movs	r0, #25
 800274e:	f000 fbb1 	bl	8002eb4 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM17_MspInit 1 */

    /* USER CODE END TIM17_MspInit 1 */
  }

}
 8002752:	e018      	b.n	8002786 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM17)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a0f      	ldr	r2, [pc, #60]	@ (8002798 <HAL_TIM_Base_MspInit+0x80>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d113      	bne.n	8002786 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM17_CLK_ENABLE();
 800275e:	4b0d      	ldr	r3, [pc, #52]	@ (8002794 <HAL_TIM_Base_MspInit+0x7c>)
 8002760:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002762:	4a0c      	ldr	r2, [pc, #48]	@ (8002794 <HAL_TIM_Base_MspInit+0x7c>)
 8002764:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002768:	6613      	str	r3, [r2, #96]	@ 0x60
 800276a:	4b0a      	ldr	r3, [pc, #40]	@ (8002794 <HAL_TIM_Base_MspInit+0x7c>)
 800276c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800276e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002772:	60bb      	str	r3, [r7, #8]
 8002774:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 5, 0);
 8002776:	2200      	movs	r2, #0
 8002778:	2105      	movs	r1, #5
 800277a:	201a      	movs	r0, #26
 800277c:	f000 fb7e 	bl	8002e7c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8002780:	201a      	movs	r0, #26
 8002782:	f000 fb97 	bl	8002eb4 <HAL_NVIC_EnableIRQ>
}
 8002786:	bf00      	nop
 8002788:	3710      	adds	r7, #16
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	40014400 	.word	0x40014400
 8002794:	40021000 	.word	0x40021000
 8002798:	40014800 	.word	0x40014800

0800279c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b088      	sub	sp, #32
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027a4:	f107 030c 	add.w	r3, r7, #12
 80027a8:	2200      	movs	r2, #0
 80027aa:	601a      	str	r2, [r3, #0]
 80027ac:	605a      	str	r2, [r3, #4]
 80027ae:	609a      	str	r2, [r3, #8]
 80027b0:	60da      	str	r2, [r3, #12]
 80027b2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80027bc:	d11c      	bne.n	80027f8 <HAL_TIM_MspPostInit+0x5c>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027be:	4b10      	ldr	r3, [pc, #64]	@ (8002800 <HAL_TIM_MspPostInit+0x64>)
 80027c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027c2:	4a0f      	ldr	r2, [pc, #60]	@ (8002800 <HAL_TIM_MspPostInit+0x64>)
 80027c4:	f043 0301 	orr.w	r3, r3, #1
 80027c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80027ca:	4b0d      	ldr	r3, [pc, #52]	@ (8002800 <HAL_TIM_MspPostInit+0x64>)
 80027cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027ce:	f003 0301 	and.w	r3, r3, #1
 80027d2:	60bb      	str	r3, [r7, #8]
 80027d4:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80027d6:	2301      	movs	r3, #1
 80027d8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027da:	2302      	movs	r3, #2
 80027dc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027de:	2300      	movs	r3, #0
 80027e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027e2:	2300      	movs	r3, #0
 80027e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80027e6:	2301      	movs	r3, #1
 80027e8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027ea:	f107 030c 	add.w	r3, r7, #12
 80027ee:	4619      	mov	r1, r3
 80027f0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80027f4:	f000 fb6c 	bl	8002ed0 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80027f8:	bf00      	nop
 80027fa:	3720      	adds	r7, #32
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}
 8002800:	40021000 	.word	0x40021000

08002804 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b0ac      	sub	sp, #176	@ 0xb0
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800280c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002810:	2200      	movs	r2, #0
 8002812:	601a      	str	r2, [r3, #0]
 8002814:	605a      	str	r2, [r3, #4]
 8002816:	609a      	str	r2, [r3, #8]
 8002818:	60da      	str	r2, [r3, #12]
 800281a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800281c:	f107 0314 	add.w	r3, r7, #20
 8002820:	2288      	movs	r2, #136	@ 0x88
 8002822:	2100      	movs	r1, #0
 8002824:	4618      	mov	r0, r3
 8002826:	f00d f85f 	bl	800f8e8 <memset>
  if(huart->Instance==USART2)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a21      	ldr	r2, [pc, #132]	@ (80028b4 <HAL_UART_MspInit+0xb0>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d13b      	bne.n	80028ac <HAL_UART_MspInit+0xa8>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002834:	2302      	movs	r3, #2
 8002836:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002838:	2300      	movs	r3, #0
 800283a:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800283c:	f107 0314 	add.w	r3, r7, #20
 8002840:	4618      	mov	r0, r3
 8002842:	f002 f84d 	bl	80048e0 <HAL_RCCEx_PeriphCLKConfig>
 8002846:	4603      	mov	r3, r0
 8002848:	2b00      	cmp	r3, #0
 800284a:	d001      	beq.n	8002850 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800284c:	f7ff fe78 	bl	8002540 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002850:	4b19      	ldr	r3, [pc, #100]	@ (80028b8 <HAL_UART_MspInit+0xb4>)
 8002852:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002854:	4a18      	ldr	r2, [pc, #96]	@ (80028b8 <HAL_UART_MspInit+0xb4>)
 8002856:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800285a:	6593      	str	r3, [r2, #88]	@ 0x58
 800285c:	4b16      	ldr	r3, [pc, #88]	@ (80028b8 <HAL_UART_MspInit+0xb4>)
 800285e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002860:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002864:	613b      	str	r3, [r7, #16]
 8002866:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002868:	4b13      	ldr	r3, [pc, #76]	@ (80028b8 <HAL_UART_MspInit+0xb4>)
 800286a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800286c:	4a12      	ldr	r2, [pc, #72]	@ (80028b8 <HAL_UART_MspInit+0xb4>)
 800286e:	f043 0301 	orr.w	r3, r3, #1
 8002872:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002874:	4b10      	ldr	r3, [pc, #64]	@ (80028b8 <HAL_UART_MspInit+0xb4>)
 8002876:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002878:	f003 0301 	and.w	r3, r3, #1
 800287c:	60fb      	str	r3, [r7, #12]
 800287e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002880:	230c      	movs	r3, #12
 8002882:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002886:	2302      	movs	r3, #2
 8002888:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800288c:	2300      	movs	r3, #0
 800288e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002892:	2303      	movs	r3, #3
 8002894:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002898:	2307      	movs	r3, #7
 800289a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800289e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80028a2:	4619      	mov	r1, r3
 80028a4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80028a8:	f000 fb12 	bl	8002ed0 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80028ac:	bf00      	nop
 80028ae:	37b0      	adds	r7, #176	@ 0xb0
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}
 80028b4:	40004400 	.word	0x40004400
 80028b8:	40021000 	.word	0x40021000

080028bc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b08e      	sub	sp, #56	@ 0x38
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 80028c4:	2300      	movs	r3, #0
 80028c6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 80028ca:	4b34      	ldr	r3, [pc, #208]	@ (800299c <HAL_InitTick+0xe0>)
 80028cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028ce:	4a33      	ldr	r2, [pc, #204]	@ (800299c <HAL_InitTick+0xe0>)
 80028d0:	f043 0302 	orr.w	r3, r3, #2
 80028d4:	6593      	str	r3, [r2, #88]	@ 0x58
 80028d6:	4b31      	ldr	r3, [pc, #196]	@ (800299c <HAL_InitTick+0xe0>)
 80028d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028da:	f003 0302 	and.w	r3, r3, #2
 80028de:	60fb      	str	r3, [r7, #12]
 80028e0:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80028e2:	f107 0210 	add.w	r2, r7, #16
 80028e6:	f107 0314 	add.w	r3, r7, #20
 80028ea:	4611      	mov	r1, r2
 80028ec:	4618      	mov	r0, r3
 80028ee:	f001 ff65 	bl	80047bc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80028f2:	6a3b      	ldr	r3, [r7, #32]
 80028f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80028f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d103      	bne.n	8002904 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80028fc:	f001 ff32 	bl	8004764 <HAL_RCC_GetPCLK1Freq>
 8002900:	6378      	str	r0, [r7, #52]	@ 0x34
 8002902:	e004      	b.n	800290e <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002904:	f001 ff2e 	bl	8004764 <HAL_RCC_GetPCLK1Freq>
 8002908:	4603      	mov	r3, r0
 800290a:	005b      	lsls	r3, r3, #1
 800290c:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800290e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002910:	4a23      	ldr	r2, [pc, #140]	@ (80029a0 <HAL_InitTick+0xe4>)
 8002912:	fba2 2303 	umull	r2, r3, r2, r3
 8002916:	0c9b      	lsrs	r3, r3, #18
 8002918:	3b01      	subs	r3, #1
 800291a:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 800291c:	4b21      	ldr	r3, [pc, #132]	@ (80029a4 <HAL_InitTick+0xe8>)
 800291e:	4a22      	ldr	r2, [pc, #136]	@ (80029a8 <HAL_InitTick+0xec>)
 8002920:	601a      	str	r2, [r3, #0]
   * Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 8002922:	4b20      	ldr	r3, [pc, #128]	@ (80029a4 <HAL_InitTick+0xe8>)
 8002924:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002928:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 800292a:	4a1e      	ldr	r2, [pc, #120]	@ (80029a4 <HAL_InitTick+0xe8>)
 800292c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800292e:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 8002930:	4b1c      	ldr	r3, [pc, #112]	@ (80029a4 <HAL_InitTick+0xe8>)
 8002932:	2200      	movs	r2, #0
 8002934:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002936:	4b1b      	ldr	r3, [pc, #108]	@ (80029a4 <HAL_InitTick+0xe8>)
 8002938:	2200      	movs	r2, #0
 800293a:	609a      	str	r2, [r3, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800293c:	4b19      	ldr	r3, [pc, #100]	@ (80029a4 <HAL_InitTick+0xe8>)
 800293e:	2200      	movs	r2, #0
 8002940:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim3);
 8002942:	4818      	ldr	r0, [pc, #96]	@ (80029a4 <HAL_InitTick+0xe8>)
 8002944:	f003 fa24 	bl	8005d90 <HAL_TIM_Base_Init>
 8002948:	4603      	mov	r3, r0
 800294a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 800294e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002952:	2b00      	cmp	r3, #0
 8002954:	d11b      	bne.n	800298e <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim3);
 8002956:	4813      	ldr	r0, [pc, #76]	@ (80029a4 <HAL_InitTick+0xe8>)
 8002958:	f003 fa72 	bl	8005e40 <HAL_TIM_Base_Start_IT>
 800295c:	4603      	mov	r3, r0
 800295e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8002962:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002966:	2b00      	cmp	r3, #0
 8002968:	d111      	bne.n	800298e <HAL_InitTick+0xd2>
    {
    /* Enable the TIM3 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800296a:	201d      	movs	r0, #29
 800296c:	f000 faa2 	bl	8002eb4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2b0f      	cmp	r3, #15
 8002974:	d808      	bhi.n	8002988 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority, 0U);
 8002976:	2200      	movs	r2, #0
 8002978:	6879      	ldr	r1, [r7, #4]
 800297a:	201d      	movs	r0, #29
 800297c:	f000 fa7e 	bl	8002e7c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002980:	4a0a      	ldr	r2, [pc, #40]	@ (80029ac <HAL_InitTick+0xf0>)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6013      	str	r3, [r2, #0]
 8002986:	e002      	b.n	800298e <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8002988:	2301      	movs	r3, #1
 800298a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800298e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8002992:	4618      	mov	r0, r3
 8002994:	3738      	adds	r7, #56	@ 0x38
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}
 800299a:	bf00      	nop
 800299c:	40021000 	.word	0x40021000
 80029a0:	431bde83 	.word	0x431bde83
 80029a4:	200007a8 	.word	0x200007a8
 80029a8:	40000400 	.word	0x40000400
 80029ac:	20000010 	.word	0x20000010

080029b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80029b0:	b480      	push	{r7}
 80029b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80029b4:	bf00      	nop
 80029b6:	e7fd      	b.n	80029b4 <NMI_Handler+0x4>

080029b8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80029b8:	b480      	push	{r7}
 80029ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80029bc:	bf00      	nop
 80029be:	e7fd      	b.n	80029bc <HardFault_Handler+0x4>

080029c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80029c0:	b480      	push	{r7}
 80029c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80029c4:	bf00      	nop
 80029c6:	e7fd      	b.n	80029c4 <MemManage_Handler+0x4>

080029c8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80029c8:	b480      	push	{r7}
 80029ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80029cc:	bf00      	nop
 80029ce:	e7fd      	b.n	80029cc <BusFault_Handler+0x4>

080029d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80029d0:	b480      	push	{r7}
 80029d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80029d4:	bf00      	nop
 80029d6:	e7fd      	b.n	80029d4 <UsageFault_Handler+0x4>

080029d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80029d8:	b480      	push	{r7}
 80029da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80029dc:	bf00      	nop
 80029de:	46bd      	mov	sp, r7
 80029e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e4:	4770      	bx	lr

080029e6 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80029e6:	b580      	push	{r7, lr}
 80029e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(shutdownButton_Pin);
 80029ea:	2002      	movs	r0, #2
 80029ec:	f000 fc64 	bl	80032b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80029f0:	bf00      	nop
 80029f2:	bd80      	pop	{r7, pc}

080029f4 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80029f8:	4802      	ldr	r0, [pc, #8]	@ (8002a04 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80029fa:	f003 fcb3 	bl	8006364 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80029fe:	bf00      	nop
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	bf00      	nop
 8002a04:	2000031c 	.word	0x2000031c

08002a08 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8002a0c:	4802      	ldr	r0, [pc, #8]	@ (8002a18 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8002a0e:	f003 fca9 	bl	8006364 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8002a12:	bf00      	nop
 8002a14:	bd80      	pop	{r7, pc}
 8002a16:	bf00      	nop
 8002a18:	20000368 	.word	0x20000368

08002a1c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002a20:	4802      	ldr	r0, [pc, #8]	@ (8002a2c <TIM3_IRQHandler+0x10>)
 8002a22:	f003 fc9f 	bl	8006364 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002a26:	bf00      	nop
 8002a28:	bd80      	pop	{r7, pc}
 8002a2a:	bf00      	nop
 8002a2c:	200007a8 	.word	0x200007a8

08002a30 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002a34:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002a38:	f000 fc3e 	bl	80032b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002a3c:	bf00      	nop
 8002a3e:	bd80      	pop	{r7, pc}

08002a40 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002a40:	b480      	push	{r7}
 8002a42:	af00      	add	r7, sp, #0
  return 1;
 8002a44:	2301      	movs	r3, #1
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4e:	4770      	bx	lr

08002a50 <_kill>:

int _kill(int pid, int sig)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b082      	sub	sp, #8
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
 8002a58:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002a5a:	f00d f817 	bl	800fa8c <__errno>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	2216      	movs	r2, #22
 8002a62:	601a      	str	r2, [r3, #0]
  return -1;
 8002a64:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	3708      	adds	r7, #8
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}

08002a70 <_exit>:

void _exit (int status)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b082      	sub	sp, #8
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002a78:	f04f 31ff 	mov.w	r1, #4294967295
 8002a7c:	6878      	ldr	r0, [r7, #4]
 8002a7e:	f7ff ffe7 	bl	8002a50 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002a82:	bf00      	nop
 8002a84:	e7fd      	b.n	8002a82 <_exit+0x12>

08002a86 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002a86:	b580      	push	{r7, lr}
 8002a88:	b086      	sub	sp, #24
 8002a8a:	af00      	add	r7, sp, #0
 8002a8c:	60f8      	str	r0, [r7, #12]
 8002a8e:	60b9      	str	r1, [r7, #8]
 8002a90:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a92:	2300      	movs	r3, #0
 8002a94:	617b      	str	r3, [r7, #20]
 8002a96:	e00a      	b.n	8002aae <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002a98:	f3af 8000 	nop.w
 8002a9c:	4601      	mov	r1, r0
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	1c5a      	adds	r2, r3, #1
 8002aa2:	60ba      	str	r2, [r7, #8]
 8002aa4:	b2ca      	uxtb	r2, r1
 8002aa6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	3301      	adds	r3, #1
 8002aac:	617b      	str	r3, [r7, #20]
 8002aae:	697a      	ldr	r2, [r7, #20]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	429a      	cmp	r2, r3
 8002ab4:	dbf0      	blt.n	8002a98 <_read+0x12>
  }

  return len;
 8002ab6:	687b      	ldr	r3, [r7, #4]
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	3718      	adds	r7, #24
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd80      	pop	{r7, pc}

08002ac0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b086      	sub	sp, #24
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	60f8      	str	r0, [r7, #12]
 8002ac8:	60b9      	str	r1, [r7, #8]
 8002aca:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002acc:	2300      	movs	r3, #0
 8002ace:	617b      	str	r3, [r7, #20]
 8002ad0:	e009      	b.n	8002ae6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	1c5a      	adds	r2, r3, #1
 8002ad6:	60ba      	str	r2, [r7, #8]
 8002ad8:	781b      	ldrb	r3, [r3, #0]
 8002ada:	4618      	mov	r0, r3
 8002adc:	f7ff fae0 	bl	80020a0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	3301      	adds	r3, #1
 8002ae4:	617b      	str	r3, [r7, #20]
 8002ae6:	697a      	ldr	r2, [r7, #20]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	429a      	cmp	r2, r3
 8002aec:	dbf1      	blt.n	8002ad2 <_write+0x12>
  }
  return len;
 8002aee:	687b      	ldr	r3, [r7, #4]
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	3718      	adds	r7, #24
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}

08002af8 <_close>:

int _close(int file)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b083      	sub	sp, #12
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002b00:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	370c      	adds	r7, #12
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0e:	4770      	bx	lr

08002b10 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b083      	sub	sp, #12
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
 8002b18:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002b20:	605a      	str	r2, [r3, #4]
  return 0;
 8002b22:	2300      	movs	r3, #0
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	370c      	adds	r7, #12
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2e:	4770      	bx	lr

08002b30 <_isatty>:

int _isatty(int file)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b083      	sub	sp, #12
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002b38:	2301      	movs	r3, #1
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	370c      	adds	r7, #12
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b44:	4770      	bx	lr

08002b46 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002b46:	b480      	push	{r7}
 8002b48:	b085      	sub	sp, #20
 8002b4a:	af00      	add	r7, sp, #0
 8002b4c:	60f8      	str	r0, [r7, #12]
 8002b4e:	60b9      	str	r1, [r7, #8]
 8002b50:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002b52:	2300      	movs	r3, #0
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	3714      	adds	r7, #20
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5e:	4770      	bx	lr

08002b60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b086      	sub	sp, #24
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002b68:	4a14      	ldr	r2, [pc, #80]	@ (8002bbc <_sbrk+0x5c>)
 8002b6a:	4b15      	ldr	r3, [pc, #84]	@ (8002bc0 <_sbrk+0x60>)
 8002b6c:	1ad3      	subs	r3, r2, r3
 8002b6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b74:	4b13      	ldr	r3, [pc, #76]	@ (8002bc4 <_sbrk+0x64>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d102      	bne.n	8002b82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002b7c:	4b11      	ldr	r3, [pc, #68]	@ (8002bc4 <_sbrk+0x64>)
 8002b7e:	4a12      	ldr	r2, [pc, #72]	@ (8002bc8 <_sbrk+0x68>)
 8002b80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002b82:	4b10      	ldr	r3, [pc, #64]	@ (8002bc4 <_sbrk+0x64>)
 8002b84:	681a      	ldr	r2, [r3, #0]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	4413      	add	r3, r2
 8002b8a:	693a      	ldr	r2, [r7, #16]
 8002b8c:	429a      	cmp	r2, r3
 8002b8e:	d207      	bcs.n	8002ba0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002b90:	f00c ff7c 	bl	800fa8c <__errno>
 8002b94:	4603      	mov	r3, r0
 8002b96:	220c      	movs	r2, #12
 8002b98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002b9a:	f04f 33ff 	mov.w	r3, #4294967295
 8002b9e:	e009      	b.n	8002bb4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002ba0:	4b08      	ldr	r3, [pc, #32]	@ (8002bc4 <_sbrk+0x64>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002ba6:	4b07      	ldr	r3, [pc, #28]	@ (8002bc4 <_sbrk+0x64>)
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	4413      	add	r3, r2
 8002bae:	4a05      	ldr	r2, [pc, #20]	@ (8002bc4 <_sbrk+0x64>)
 8002bb0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	3718      	adds	r7, #24
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}
 8002bbc:	20018000 	.word	0x20018000
 8002bc0:	00000400 	.word	0x00000400
 8002bc4:	200007f4 	.word	0x200007f4
 8002bc8:	20003e88 	.word	0x20003e88

08002bcc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002bd0:	4b06      	ldr	r3, [pc, #24]	@ (8002bec <SystemInit+0x20>)
 8002bd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bd6:	4a05      	ldr	r2, [pc, #20]	@ (8002bec <SystemInit+0x20>)
 8002bd8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002bdc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8002be0:	bf00      	nop
 8002be2:	46bd      	mov	sp, r7
 8002be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be8:	4770      	bx	lr
 8002bea:	bf00      	nop
 8002bec:	e000ed00 	.word	0xe000ed00

08002bf0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002bf0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002c28 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002bf4:	f7ff ffea 	bl	8002bcc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002bf8:	480c      	ldr	r0, [pc, #48]	@ (8002c2c <LoopForever+0x6>)
  ldr r1, =_edata
 8002bfa:	490d      	ldr	r1, [pc, #52]	@ (8002c30 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002bfc:	4a0d      	ldr	r2, [pc, #52]	@ (8002c34 <LoopForever+0xe>)
  movs r3, #0
 8002bfe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c00:	e002      	b.n	8002c08 <LoopCopyDataInit>

08002c02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c06:	3304      	adds	r3, #4

08002c08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c0c:	d3f9      	bcc.n	8002c02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c0e:	4a0a      	ldr	r2, [pc, #40]	@ (8002c38 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002c10:	4c0a      	ldr	r4, [pc, #40]	@ (8002c3c <LoopForever+0x16>)
  movs r3, #0
 8002c12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c14:	e001      	b.n	8002c1a <LoopFillZerobss>

08002c16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c18:	3204      	adds	r2, #4

08002c1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c1c:	d3fb      	bcc.n	8002c16 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002c1e:	f00c ff3b 	bl	800fa98 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002c22:	f7fe fb45 	bl	80012b0 <main>

08002c26 <LoopForever>:

LoopForever:
    b LoopForever
 8002c26:	e7fe      	b.n	8002c26 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002c28:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002c2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c30:	200001fc 	.word	0x200001fc
  ldr r2, =_sidata
 8002c34:	08012380 	.word	0x08012380
  ldr r2, =_sbss
 8002c38:	200001fc 	.word	0x200001fc
  ldr r4, =_ebss
 8002c3c:	20003e88 	.word	0x20003e88

08002c40 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002c40:	e7fe      	b.n	8002c40 <ADC1_2_IRQHandler>
	...

08002c44 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b082      	sub	sp, #8
 8002c48:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c4e:	4b0c      	ldr	r3, [pc, #48]	@ (8002c80 <HAL_Init+0x3c>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a0b      	ldr	r2, [pc, #44]	@ (8002c80 <HAL_Init+0x3c>)
 8002c54:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c58:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c5a:	2003      	movs	r0, #3
 8002c5c:	f000 f903 	bl	8002e66 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002c60:	200f      	movs	r0, #15
 8002c62:	f7ff fe2b 	bl	80028bc <HAL_InitTick>
 8002c66:	4603      	mov	r3, r0
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d002      	beq.n	8002c72 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	71fb      	strb	r3, [r7, #7]
 8002c70:	e001      	b.n	8002c76 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002c72:	f7ff fc6b 	bl	800254c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002c76:	79fb      	ldrb	r3, [r7, #7]
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	3708      	adds	r7, #8
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}
 8002c80:	40022000 	.word	0x40022000

08002c84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c84:	b480      	push	{r7}
 8002c86:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002c88:	4b06      	ldr	r3, [pc, #24]	@ (8002ca4 <HAL_IncTick+0x20>)
 8002c8a:	781b      	ldrb	r3, [r3, #0]
 8002c8c:	461a      	mov	r2, r3
 8002c8e:	4b06      	ldr	r3, [pc, #24]	@ (8002ca8 <HAL_IncTick+0x24>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4413      	add	r3, r2
 8002c94:	4a04      	ldr	r2, [pc, #16]	@ (8002ca8 <HAL_IncTick+0x24>)
 8002c96:	6013      	str	r3, [r2, #0]
}
 8002c98:	bf00      	nop
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca0:	4770      	bx	lr
 8002ca2:	bf00      	nop
 8002ca4:	20000014 	.word	0x20000014
 8002ca8:	200007f8 	.word	0x200007f8

08002cac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002cac:	b480      	push	{r7}
 8002cae:	af00      	add	r7, sp, #0
  return uwTick;
 8002cb0:	4b03      	ldr	r3, [pc, #12]	@ (8002cc0 <HAL_GetTick+0x14>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbc:	4770      	bx	lr
 8002cbe:	bf00      	nop
 8002cc0:	200007f8 	.word	0x200007f8

08002cc4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b084      	sub	sp, #16
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ccc:	f7ff ffee 	bl	8002cac <HAL_GetTick>
 8002cd0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cdc:	d005      	beq.n	8002cea <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002cde:	4b0a      	ldr	r3, [pc, #40]	@ (8002d08 <HAL_Delay+0x44>)
 8002ce0:	781b      	ldrb	r3, [r3, #0]
 8002ce2:	461a      	mov	r2, r3
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	4413      	add	r3, r2
 8002ce8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002cea:	bf00      	nop
 8002cec:	f7ff ffde 	bl	8002cac <HAL_GetTick>
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	1ad3      	subs	r3, r2, r3
 8002cf6:	68fa      	ldr	r2, [r7, #12]
 8002cf8:	429a      	cmp	r2, r3
 8002cfa:	d8f7      	bhi.n	8002cec <HAL_Delay+0x28>
  {
  }
}
 8002cfc:	bf00      	nop
 8002cfe:	bf00      	nop
 8002d00:	3710      	adds	r7, #16
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}
 8002d06:	bf00      	nop
 8002d08:	20000014 	.word	0x20000014

08002d0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b085      	sub	sp, #20
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	f003 0307 	and.w	r3, r3, #7
 8002d1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d1c:	4b0c      	ldr	r3, [pc, #48]	@ (8002d50 <__NVIC_SetPriorityGrouping+0x44>)
 8002d1e:	68db      	ldr	r3, [r3, #12]
 8002d20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d22:	68ba      	ldr	r2, [r7, #8]
 8002d24:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002d28:	4013      	ands	r3, r2
 8002d2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d34:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002d38:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d3e:	4a04      	ldr	r2, [pc, #16]	@ (8002d50 <__NVIC_SetPriorityGrouping+0x44>)
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	60d3      	str	r3, [r2, #12]
}
 8002d44:	bf00      	nop
 8002d46:	3714      	adds	r7, #20
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4e:	4770      	bx	lr
 8002d50:	e000ed00 	.word	0xe000ed00

08002d54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d54:	b480      	push	{r7}
 8002d56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d58:	4b04      	ldr	r3, [pc, #16]	@ (8002d6c <__NVIC_GetPriorityGrouping+0x18>)
 8002d5a:	68db      	ldr	r3, [r3, #12]
 8002d5c:	0a1b      	lsrs	r3, r3, #8
 8002d5e:	f003 0307 	and.w	r3, r3, #7
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	46bd      	mov	sp, r7
 8002d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6a:	4770      	bx	lr
 8002d6c:	e000ed00 	.word	0xe000ed00

08002d70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d70:	b480      	push	{r7}
 8002d72:	b083      	sub	sp, #12
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	4603      	mov	r3, r0
 8002d78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	db0b      	blt.n	8002d9a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d82:	79fb      	ldrb	r3, [r7, #7]
 8002d84:	f003 021f 	and.w	r2, r3, #31
 8002d88:	4907      	ldr	r1, [pc, #28]	@ (8002da8 <__NVIC_EnableIRQ+0x38>)
 8002d8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d8e:	095b      	lsrs	r3, r3, #5
 8002d90:	2001      	movs	r0, #1
 8002d92:	fa00 f202 	lsl.w	r2, r0, r2
 8002d96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002d9a:	bf00      	nop
 8002d9c:	370c      	adds	r7, #12
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da4:	4770      	bx	lr
 8002da6:	bf00      	nop
 8002da8:	e000e100 	.word	0xe000e100

08002dac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b083      	sub	sp, #12
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	4603      	mov	r3, r0
 8002db4:	6039      	str	r1, [r7, #0]
 8002db6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002db8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	db0a      	blt.n	8002dd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	b2da      	uxtb	r2, r3
 8002dc4:	490c      	ldr	r1, [pc, #48]	@ (8002df8 <__NVIC_SetPriority+0x4c>)
 8002dc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dca:	0112      	lsls	r2, r2, #4
 8002dcc:	b2d2      	uxtb	r2, r2
 8002dce:	440b      	add	r3, r1
 8002dd0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002dd4:	e00a      	b.n	8002dec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	b2da      	uxtb	r2, r3
 8002dda:	4908      	ldr	r1, [pc, #32]	@ (8002dfc <__NVIC_SetPriority+0x50>)
 8002ddc:	79fb      	ldrb	r3, [r7, #7]
 8002dde:	f003 030f 	and.w	r3, r3, #15
 8002de2:	3b04      	subs	r3, #4
 8002de4:	0112      	lsls	r2, r2, #4
 8002de6:	b2d2      	uxtb	r2, r2
 8002de8:	440b      	add	r3, r1
 8002dea:	761a      	strb	r2, [r3, #24]
}
 8002dec:	bf00      	nop
 8002dee:	370c      	adds	r7, #12
 8002df0:	46bd      	mov	sp, r7
 8002df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df6:	4770      	bx	lr
 8002df8:	e000e100 	.word	0xe000e100
 8002dfc:	e000ed00 	.word	0xe000ed00

08002e00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b089      	sub	sp, #36	@ 0x24
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	60f8      	str	r0, [r7, #12]
 8002e08:	60b9      	str	r1, [r7, #8]
 8002e0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	f003 0307 	and.w	r3, r3, #7
 8002e12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e14:	69fb      	ldr	r3, [r7, #28]
 8002e16:	f1c3 0307 	rsb	r3, r3, #7
 8002e1a:	2b04      	cmp	r3, #4
 8002e1c:	bf28      	it	cs
 8002e1e:	2304      	movcs	r3, #4
 8002e20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e22:	69fb      	ldr	r3, [r7, #28]
 8002e24:	3304      	adds	r3, #4
 8002e26:	2b06      	cmp	r3, #6
 8002e28:	d902      	bls.n	8002e30 <NVIC_EncodePriority+0x30>
 8002e2a:	69fb      	ldr	r3, [r7, #28]
 8002e2c:	3b03      	subs	r3, #3
 8002e2e:	e000      	b.n	8002e32 <NVIC_EncodePriority+0x32>
 8002e30:	2300      	movs	r3, #0
 8002e32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e34:	f04f 32ff 	mov.w	r2, #4294967295
 8002e38:	69bb      	ldr	r3, [r7, #24]
 8002e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3e:	43da      	mvns	r2, r3
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	401a      	ands	r2, r3
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e48:	f04f 31ff 	mov.w	r1, #4294967295
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	fa01 f303 	lsl.w	r3, r1, r3
 8002e52:	43d9      	mvns	r1, r3
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e58:	4313      	orrs	r3, r2
         );
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	3724      	adds	r7, #36	@ 0x24
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e64:	4770      	bx	lr

08002e66 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e66:	b580      	push	{r7, lr}
 8002e68:	b082      	sub	sp, #8
 8002e6a:	af00      	add	r7, sp, #0
 8002e6c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e6e:	6878      	ldr	r0, [r7, #4]
 8002e70:	f7ff ff4c 	bl	8002d0c <__NVIC_SetPriorityGrouping>
}
 8002e74:	bf00      	nop
 8002e76:	3708      	adds	r7, #8
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}

08002e7c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b086      	sub	sp, #24
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	4603      	mov	r3, r0
 8002e84:	60b9      	str	r1, [r7, #8]
 8002e86:	607a      	str	r2, [r7, #4]
 8002e88:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002e8e:	f7ff ff61 	bl	8002d54 <__NVIC_GetPriorityGrouping>
 8002e92:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e94:	687a      	ldr	r2, [r7, #4]
 8002e96:	68b9      	ldr	r1, [r7, #8]
 8002e98:	6978      	ldr	r0, [r7, #20]
 8002e9a:	f7ff ffb1 	bl	8002e00 <NVIC_EncodePriority>
 8002e9e:	4602      	mov	r2, r0
 8002ea0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ea4:	4611      	mov	r1, r2
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f7ff ff80 	bl	8002dac <__NVIC_SetPriority>
}
 8002eac:	bf00      	nop
 8002eae:	3718      	adds	r7, #24
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd80      	pop	{r7, pc}

08002eb4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b082      	sub	sp, #8
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	4603      	mov	r3, r0
 8002ebc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ebe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f7ff ff54 	bl	8002d70 <__NVIC_EnableIRQ>
}
 8002ec8:	bf00      	nop
 8002eca:	3708      	adds	r7, #8
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bd80      	pop	{r7, pc}

08002ed0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b087      	sub	sp, #28
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
 8002ed8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002eda:	2300      	movs	r3, #0
 8002edc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ede:	e17f      	b.n	80031e0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	681a      	ldr	r2, [r3, #0]
 8002ee4:	2101      	movs	r1, #1
 8002ee6:	697b      	ldr	r3, [r7, #20]
 8002ee8:	fa01 f303 	lsl.w	r3, r1, r3
 8002eec:	4013      	ands	r3, r2
 8002eee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	f000 8171 	beq.w	80031da <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	f003 0303 	and.w	r3, r3, #3
 8002f00:	2b01      	cmp	r3, #1
 8002f02:	d005      	beq.n	8002f10 <HAL_GPIO_Init+0x40>
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	f003 0303 	and.w	r3, r3, #3
 8002f0c:	2b02      	cmp	r3, #2
 8002f0e:	d130      	bne.n	8002f72 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002f16:	697b      	ldr	r3, [r7, #20]
 8002f18:	005b      	lsls	r3, r3, #1
 8002f1a:	2203      	movs	r2, #3
 8002f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f20:	43db      	mvns	r3, r3
 8002f22:	693a      	ldr	r2, [r7, #16]
 8002f24:	4013      	ands	r3, r2
 8002f26:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	68da      	ldr	r2, [r3, #12]
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	005b      	lsls	r3, r3, #1
 8002f30:	fa02 f303 	lsl.w	r3, r2, r3
 8002f34:	693a      	ldr	r2, [r7, #16]
 8002f36:	4313      	orrs	r3, r2
 8002f38:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	693a      	ldr	r2, [r7, #16]
 8002f3e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002f46:	2201      	movs	r2, #1
 8002f48:	697b      	ldr	r3, [r7, #20]
 8002f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f4e:	43db      	mvns	r3, r3
 8002f50:	693a      	ldr	r2, [r7, #16]
 8002f52:	4013      	ands	r3, r2
 8002f54:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	091b      	lsrs	r3, r3, #4
 8002f5c:	f003 0201 	and.w	r2, r3, #1
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	fa02 f303 	lsl.w	r3, r2, r3
 8002f66:	693a      	ldr	r2, [r7, #16]
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	693a      	ldr	r2, [r7, #16]
 8002f70:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	f003 0303 	and.w	r3, r3, #3
 8002f7a:	2b03      	cmp	r3, #3
 8002f7c:	d118      	bne.n	8002fb0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f82:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002f84:	2201      	movs	r2, #1
 8002f86:	697b      	ldr	r3, [r7, #20]
 8002f88:	fa02 f303 	lsl.w	r3, r2, r3
 8002f8c:	43db      	mvns	r3, r3
 8002f8e:	693a      	ldr	r2, [r7, #16]
 8002f90:	4013      	ands	r3, r2
 8002f92:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	08db      	lsrs	r3, r3, #3
 8002f9a:	f003 0201 	and.w	r2, r3, #1
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa4:	693a      	ldr	r2, [r7, #16]
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	693a      	ldr	r2, [r7, #16]
 8002fae:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	f003 0303 	and.w	r3, r3, #3
 8002fb8:	2b03      	cmp	r3, #3
 8002fba:	d017      	beq.n	8002fec <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	68db      	ldr	r3, [r3, #12]
 8002fc0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	005b      	lsls	r3, r3, #1
 8002fc6:	2203      	movs	r2, #3
 8002fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fcc:	43db      	mvns	r3, r3
 8002fce:	693a      	ldr	r2, [r7, #16]
 8002fd0:	4013      	ands	r3, r2
 8002fd2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	689a      	ldr	r2, [r3, #8]
 8002fd8:	697b      	ldr	r3, [r7, #20]
 8002fda:	005b      	lsls	r3, r3, #1
 8002fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe0:	693a      	ldr	r2, [r7, #16]
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	693a      	ldr	r2, [r7, #16]
 8002fea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	f003 0303 	and.w	r3, r3, #3
 8002ff4:	2b02      	cmp	r3, #2
 8002ff6:	d123      	bne.n	8003040 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	08da      	lsrs	r2, r3, #3
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	3208      	adds	r2, #8
 8003000:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003004:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	f003 0307 	and.w	r3, r3, #7
 800300c:	009b      	lsls	r3, r3, #2
 800300e:	220f      	movs	r2, #15
 8003010:	fa02 f303 	lsl.w	r3, r2, r3
 8003014:	43db      	mvns	r3, r3
 8003016:	693a      	ldr	r2, [r7, #16]
 8003018:	4013      	ands	r3, r2
 800301a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	691a      	ldr	r2, [r3, #16]
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	f003 0307 	and.w	r3, r3, #7
 8003026:	009b      	lsls	r3, r3, #2
 8003028:	fa02 f303 	lsl.w	r3, r2, r3
 800302c:	693a      	ldr	r2, [r7, #16]
 800302e:	4313      	orrs	r3, r2
 8003030:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	08da      	lsrs	r2, r3, #3
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	3208      	adds	r2, #8
 800303a:	6939      	ldr	r1, [r7, #16]
 800303c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	005b      	lsls	r3, r3, #1
 800304a:	2203      	movs	r2, #3
 800304c:	fa02 f303 	lsl.w	r3, r2, r3
 8003050:	43db      	mvns	r3, r3
 8003052:	693a      	ldr	r2, [r7, #16]
 8003054:	4013      	ands	r3, r2
 8003056:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	f003 0203 	and.w	r2, r3, #3
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	005b      	lsls	r3, r3, #1
 8003064:	fa02 f303 	lsl.w	r3, r2, r3
 8003068:	693a      	ldr	r2, [r7, #16]
 800306a:	4313      	orrs	r3, r2
 800306c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	693a      	ldr	r2, [r7, #16]
 8003072:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800307c:	2b00      	cmp	r3, #0
 800307e:	f000 80ac 	beq.w	80031da <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003082:	4b5f      	ldr	r3, [pc, #380]	@ (8003200 <HAL_GPIO_Init+0x330>)
 8003084:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003086:	4a5e      	ldr	r2, [pc, #376]	@ (8003200 <HAL_GPIO_Init+0x330>)
 8003088:	f043 0301 	orr.w	r3, r3, #1
 800308c:	6613      	str	r3, [r2, #96]	@ 0x60
 800308e:	4b5c      	ldr	r3, [pc, #368]	@ (8003200 <HAL_GPIO_Init+0x330>)
 8003090:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003092:	f003 0301 	and.w	r3, r3, #1
 8003096:	60bb      	str	r3, [r7, #8]
 8003098:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800309a:	4a5a      	ldr	r2, [pc, #360]	@ (8003204 <HAL_GPIO_Init+0x334>)
 800309c:	697b      	ldr	r3, [r7, #20]
 800309e:	089b      	lsrs	r3, r3, #2
 80030a0:	3302      	adds	r3, #2
 80030a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030a6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	f003 0303 	and.w	r3, r3, #3
 80030ae:	009b      	lsls	r3, r3, #2
 80030b0:	220f      	movs	r2, #15
 80030b2:	fa02 f303 	lsl.w	r3, r2, r3
 80030b6:	43db      	mvns	r3, r3
 80030b8:	693a      	ldr	r2, [r7, #16]
 80030ba:	4013      	ands	r3, r2
 80030bc:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80030c4:	d025      	beq.n	8003112 <HAL_GPIO_Init+0x242>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	4a4f      	ldr	r2, [pc, #316]	@ (8003208 <HAL_GPIO_Init+0x338>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d01f      	beq.n	800310e <HAL_GPIO_Init+0x23e>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	4a4e      	ldr	r2, [pc, #312]	@ (800320c <HAL_GPIO_Init+0x33c>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d019      	beq.n	800310a <HAL_GPIO_Init+0x23a>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	4a4d      	ldr	r2, [pc, #308]	@ (8003210 <HAL_GPIO_Init+0x340>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d013      	beq.n	8003106 <HAL_GPIO_Init+0x236>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	4a4c      	ldr	r2, [pc, #304]	@ (8003214 <HAL_GPIO_Init+0x344>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d00d      	beq.n	8003102 <HAL_GPIO_Init+0x232>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	4a4b      	ldr	r2, [pc, #300]	@ (8003218 <HAL_GPIO_Init+0x348>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d007      	beq.n	80030fe <HAL_GPIO_Init+0x22e>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	4a4a      	ldr	r2, [pc, #296]	@ (800321c <HAL_GPIO_Init+0x34c>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d101      	bne.n	80030fa <HAL_GPIO_Init+0x22a>
 80030f6:	2306      	movs	r3, #6
 80030f8:	e00c      	b.n	8003114 <HAL_GPIO_Init+0x244>
 80030fa:	2307      	movs	r3, #7
 80030fc:	e00a      	b.n	8003114 <HAL_GPIO_Init+0x244>
 80030fe:	2305      	movs	r3, #5
 8003100:	e008      	b.n	8003114 <HAL_GPIO_Init+0x244>
 8003102:	2304      	movs	r3, #4
 8003104:	e006      	b.n	8003114 <HAL_GPIO_Init+0x244>
 8003106:	2303      	movs	r3, #3
 8003108:	e004      	b.n	8003114 <HAL_GPIO_Init+0x244>
 800310a:	2302      	movs	r3, #2
 800310c:	e002      	b.n	8003114 <HAL_GPIO_Init+0x244>
 800310e:	2301      	movs	r3, #1
 8003110:	e000      	b.n	8003114 <HAL_GPIO_Init+0x244>
 8003112:	2300      	movs	r3, #0
 8003114:	697a      	ldr	r2, [r7, #20]
 8003116:	f002 0203 	and.w	r2, r2, #3
 800311a:	0092      	lsls	r2, r2, #2
 800311c:	4093      	lsls	r3, r2
 800311e:	693a      	ldr	r2, [r7, #16]
 8003120:	4313      	orrs	r3, r2
 8003122:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003124:	4937      	ldr	r1, [pc, #220]	@ (8003204 <HAL_GPIO_Init+0x334>)
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	089b      	lsrs	r3, r3, #2
 800312a:	3302      	adds	r3, #2
 800312c:	693a      	ldr	r2, [r7, #16]
 800312e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003132:	4b3b      	ldr	r3, [pc, #236]	@ (8003220 <HAL_GPIO_Init+0x350>)
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	43db      	mvns	r3, r3
 800313c:	693a      	ldr	r2, [r7, #16]
 800313e:	4013      	ands	r3, r2
 8003140:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800314a:	2b00      	cmp	r3, #0
 800314c:	d003      	beq.n	8003156 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800314e:	693a      	ldr	r2, [r7, #16]
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	4313      	orrs	r3, r2
 8003154:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003156:	4a32      	ldr	r2, [pc, #200]	@ (8003220 <HAL_GPIO_Init+0x350>)
 8003158:	693b      	ldr	r3, [r7, #16]
 800315a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800315c:	4b30      	ldr	r3, [pc, #192]	@ (8003220 <HAL_GPIO_Init+0x350>)
 800315e:	68db      	ldr	r3, [r3, #12]
 8003160:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	43db      	mvns	r3, r3
 8003166:	693a      	ldr	r2, [r7, #16]
 8003168:	4013      	ands	r3, r2
 800316a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003174:	2b00      	cmp	r3, #0
 8003176:	d003      	beq.n	8003180 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003178:	693a      	ldr	r2, [r7, #16]
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	4313      	orrs	r3, r2
 800317e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003180:	4a27      	ldr	r2, [pc, #156]	@ (8003220 <HAL_GPIO_Init+0x350>)
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003186:	4b26      	ldr	r3, [pc, #152]	@ (8003220 <HAL_GPIO_Init+0x350>)
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	43db      	mvns	r3, r3
 8003190:	693a      	ldr	r2, [r7, #16]
 8003192:	4013      	ands	r3, r2
 8003194:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d003      	beq.n	80031aa <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80031a2:	693a      	ldr	r2, [r7, #16]
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	4313      	orrs	r3, r2
 80031a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80031aa:	4a1d      	ldr	r2, [pc, #116]	@ (8003220 <HAL_GPIO_Init+0x350>)
 80031ac:	693b      	ldr	r3, [r7, #16]
 80031ae:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80031b0:	4b1b      	ldr	r3, [pc, #108]	@ (8003220 <HAL_GPIO_Init+0x350>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	43db      	mvns	r3, r3
 80031ba:	693a      	ldr	r2, [r7, #16]
 80031bc:	4013      	ands	r3, r2
 80031be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d003      	beq.n	80031d4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80031cc:	693a      	ldr	r2, [r7, #16]
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	4313      	orrs	r3, r2
 80031d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80031d4:	4a12      	ldr	r2, [pc, #72]	@ (8003220 <HAL_GPIO_Init+0x350>)
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	3301      	adds	r3, #1
 80031de:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	681a      	ldr	r2, [r3, #0]
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	fa22 f303 	lsr.w	r3, r2, r3
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	f47f ae78 	bne.w	8002ee0 <HAL_GPIO_Init+0x10>
  }
}
 80031f0:	bf00      	nop
 80031f2:	bf00      	nop
 80031f4:	371c      	adds	r7, #28
 80031f6:	46bd      	mov	sp, r7
 80031f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fc:	4770      	bx	lr
 80031fe:	bf00      	nop
 8003200:	40021000 	.word	0x40021000
 8003204:	40010000 	.word	0x40010000
 8003208:	48000400 	.word	0x48000400
 800320c:	48000800 	.word	0x48000800
 8003210:	48000c00 	.word	0x48000c00
 8003214:	48001000 	.word	0x48001000
 8003218:	48001400 	.word	0x48001400
 800321c:	48001800 	.word	0x48001800
 8003220:	40010400 	.word	0x40010400

08003224 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003224:	b480      	push	{r7}
 8003226:	b085      	sub	sp, #20
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
 800322c:	460b      	mov	r3, r1
 800322e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	691a      	ldr	r2, [r3, #16]
 8003234:	887b      	ldrh	r3, [r7, #2]
 8003236:	4013      	ands	r3, r2
 8003238:	2b00      	cmp	r3, #0
 800323a:	d002      	beq.n	8003242 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800323c:	2301      	movs	r3, #1
 800323e:	73fb      	strb	r3, [r7, #15]
 8003240:	e001      	b.n	8003246 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003242:	2300      	movs	r3, #0
 8003244:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003246:	7bfb      	ldrb	r3, [r7, #15]
}
 8003248:	4618      	mov	r0, r3
 800324a:	3714      	adds	r7, #20
 800324c:	46bd      	mov	sp, r7
 800324e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003252:	4770      	bx	lr

08003254 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003254:	b480      	push	{r7}
 8003256:	b083      	sub	sp, #12
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
 800325c:	460b      	mov	r3, r1
 800325e:	807b      	strh	r3, [r7, #2]
 8003260:	4613      	mov	r3, r2
 8003262:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003264:	787b      	ldrb	r3, [r7, #1]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d003      	beq.n	8003272 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800326a:	887a      	ldrh	r2, [r7, #2]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003270:	e002      	b.n	8003278 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003272:	887a      	ldrh	r2, [r7, #2]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003278:	bf00      	nop
 800327a:	370c      	adds	r7, #12
 800327c:	46bd      	mov	sp, r7
 800327e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003282:	4770      	bx	lr

08003284 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003284:	b480      	push	{r7}
 8003286:	b085      	sub	sp, #20
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
 800328c:	460b      	mov	r3, r1
 800328e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	695b      	ldr	r3, [r3, #20]
 8003294:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003296:	887a      	ldrh	r2, [r7, #2]
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	4013      	ands	r3, r2
 800329c:	041a      	lsls	r2, r3, #16
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	43d9      	mvns	r1, r3
 80032a2:	887b      	ldrh	r3, [r7, #2]
 80032a4:	400b      	ands	r3, r1
 80032a6:	431a      	orrs	r2, r3
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	619a      	str	r2, [r3, #24]
}
 80032ac:	bf00      	nop
 80032ae:	3714      	adds	r7, #20
 80032b0:	46bd      	mov	sp, r7
 80032b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b6:	4770      	bx	lr

080032b8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b082      	sub	sp, #8
 80032bc:	af00      	add	r7, sp, #0
 80032be:	4603      	mov	r3, r0
 80032c0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80032c2:	4b08      	ldr	r3, [pc, #32]	@ (80032e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80032c4:	695a      	ldr	r2, [r3, #20]
 80032c6:	88fb      	ldrh	r3, [r7, #6]
 80032c8:	4013      	ands	r3, r2
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d006      	beq.n	80032dc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80032ce:	4a05      	ldr	r2, [pc, #20]	@ (80032e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80032d0:	88fb      	ldrh	r3, [r7, #6]
 80032d2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80032d4:	88fb      	ldrh	r3, [r7, #6]
 80032d6:	4618      	mov	r0, r3
 80032d8:	f7fe fbb0 	bl	8001a3c <HAL_GPIO_EXTI_Callback>
  }
}
 80032dc:	bf00      	nop
 80032de:	3708      	adds	r7, #8
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}
 80032e4:	40010400 	.word	0x40010400

080032e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b082      	sub	sp, #8
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d101      	bne.n	80032fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	e08d      	b.n	8003416 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003300:	b2db      	uxtb	r3, r3
 8003302:	2b00      	cmp	r3, #0
 8003304:	d106      	bne.n	8003314 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2200      	movs	r2, #0
 800330a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800330e:	6878      	ldr	r0, [r7, #4]
 8003310:	f7ff f944 	bl	800259c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2224      	movs	r2, #36	@ 0x24
 8003318:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	681a      	ldr	r2, [r3, #0]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f022 0201 	bic.w	r2, r2, #1
 800332a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	685a      	ldr	r2, [r3, #4]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003338:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	689a      	ldr	r2, [r3, #8]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003348:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	68db      	ldr	r3, [r3, #12]
 800334e:	2b01      	cmp	r3, #1
 8003350:	d107      	bne.n	8003362 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	689a      	ldr	r2, [r3, #8]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800335e:	609a      	str	r2, [r3, #8]
 8003360:	e006      	b.n	8003370 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	689a      	ldr	r2, [r3, #8]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800336e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	68db      	ldr	r3, [r3, #12]
 8003374:	2b02      	cmp	r3, #2
 8003376:	d108      	bne.n	800338a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	685a      	ldr	r2, [r3, #4]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003386:	605a      	str	r2, [r3, #4]
 8003388:	e007      	b.n	800339a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	685a      	ldr	r2, [r3, #4]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003398:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	687a      	ldr	r2, [r7, #4]
 80033a2:	6812      	ldr	r2, [r2, #0]
 80033a4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80033a8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80033ac:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	68da      	ldr	r2, [r3, #12]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80033bc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	691a      	ldr	r2, [r3, #16]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	695b      	ldr	r3, [r3, #20]
 80033c6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	699b      	ldr	r3, [r3, #24]
 80033ce:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	430a      	orrs	r2, r1
 80033d6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	69d9      	ldr	r1, [r3, #28]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6a1a      	ldr	r2, [r3, #32]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	430a      	orrs	r2, r1
 80033e6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	681a      	ldr	r2, [r3, #0]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f042 0201 	orr.w	r2, r2, #1
 80033f6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2200      	movs	r2, #0
 80033fc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2220      	movs	r2, #32
 8003402:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2200      	movs	r2, #0
 800340a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2200      	movs	r2, #0
 8003410:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003414:	2300      	movs	r3, #0
}
 8003416:	4618      	mov	r0, r3
 8003418:	3708      	adds	r7, #8
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}
	...

08003420 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b088      	sub	sp, #32
 8003424:	af02      	add	r7, sp, #8
 8003426:	60f8      	str	r0, [r7, #12]
 8003428:	607a      	str	r2, [r7, #4]
 800342a:	461a      	mov	r2, r3
 800342c:	460b      	mov	r3, r1
 800342e:	817b      	strh	r3, [r7, #10]
 8003430:	4613      	mov	r3, r2
 8003432:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800343a:	b2db      	uxtb	r3, r3
 800343c:	2b20      	cmp	r3, #32
 800343e:	f040 80fd 	bne.w	800363c <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003448:	2b01      	cmp	r3, #1
 800344a:	d101      	bne.n	8003450 <HAL_I2C_Master_Transmit+0x30>
 800344c:	2302      	movs	r3, #2
 800344e:	e0f6      	b.n	800363e <HAL_I2C_Master_Transmit+0x21e>
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	2201      	movs	r2, #1
 8003454:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003458:	f7ff fc28 	bl	8002cac <HAL_GetTick>
 800345c:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	9300      	str	r3, [sp, #0]
 8003462:	2319      	movs	r3, #25
 8003464:	2201      	movs	r2, #1
 8003466:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800346a:	68f8      	ldr	r0, [r7, #12]
 800346c:	f000 f914 	bl	8003698 <I2C_WaitOnFlagUntilTimeout>
 8003470:	4603      	mov	r3, r0
 8003472:	2b00      	cmp	r3, #0
 8003474:	d001      	beq.n	800347a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	e0e1      	b.n	800363e <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	2221      	movs	r2, #33	@ 0x21
 800347e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	2210      	movs	r2, #16
 8003486:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	2200      	movs	r2, #0
 800348e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	687a      	ldr	r2, [r7, #4]
 8003494:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	893a      	ldrh	r2, [r7, #8]
 800349a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	2200      	movs	r2, #0
 80034a0:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034a6:	b29b      	uxth	r3, r3
 80034a8:	2bff      	cmp	r3, #255	@ 0xff
 80034aa:	d906      	bls.n	80034ba <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	22ff      	movs	r2, #255	@ 0xff
 80034b0:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80034b2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80034b6:	617b      	str	r3, [r7, #20]
 80034b8:	e007      	b.n	80034ca <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034be:	b29a      	uxth	r2, r3
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80034c4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80034c8:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d024      	beq.n	800351c <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034d6:	781a      	ldrb	r2, [r3, #0]
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034e2:	1c5a      	adds	r2, r3, #1
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034ec:	b29b      	uxth	r3, r3
 80034ee:	3b01      	subs	r3, #1
 80034f0:	b29a      	uxth	r2, r3
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034fa:	3b01      	subs	r3, #1
 80034fc:	b29a      	uxth	r2, r3
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003506:	b2db      	uxtb	r3, r3
 8003508:	3301      	adds	r3, #1
 800350a:	b2da      	uxtb	r2, r3
 800350c:	8979      	ldrh	r1, [r7, #10]
 800350e:	4b4e      	ldr	r3, [pc, #312]	@ (8003648 <HAL_I2C_Master_Transmit+0x228>)
 8003510:	9300      	str	r3, [sp, #0]
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	68f8      	ldr	r0, [r7, #12]
 8003516:	f000 fa83 	bl	8003a20 <I2C_TransferConfig>
 800351a:	e066      	b.n	80035ea <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003520:	b2da      	uxtb	r2, r3
 8003522:	8979      	ldrh	r1, [r7, #10]
 8003524:	4b48      	ldr	r3, [pc, #288]	@ (8003648 <HAL_I2C_Master_Transmit+0x228>)
 8003526:	9300      	str	r3, [sp, #0]
 8003528:	697b      	ldr	r3, [r7, #20]
 800352a:	68f8      	ldr	r0, [r7, #12]
 800352c:	f000 fa78 	bl	8003a20 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003530:	e05b      	b.n	80035ea <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003532:	693a      	ldr	r2, [r7, #16]
 8003534:	6a39      	ldr	r1, [r7, #32]
 8003536:	68f8      	ldr	r0, [r7, #12]
 8003538:	f000 f907 	bl	800374a <I2C_WaitOnTXISFlagUntilTimeout>
 800353c:	4603      	mov	r3, r0
 800353e:	2b00      	cmp	r3, #0
 8003540:	d001      	beq.n	8003546 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8003542:	2301      	movs	r3, #1
 8003544:	e07b      	b.n	800363e <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800354a:	781a      	ldrb	r2, [r3, #0]
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003556:	1c5a      	adds	r2, r3, #1
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003560:	b29b      	uxth	r3, r3
 8003562:	3b01      	subs	r3, #1
 8003564:	b29a      	uxth	r2, r3
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800356e:	3b01      	subs	r3, #1
 8003570:	b29a      	uxth	r2, r3
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800357a:	b29b      	uxth	r3, r3
 800357c:	2b00      	cmp	r3, #0
 800357e:	d034      	beq.n	80035ea <HAL_I2C_Master_Transmit+0x1ca>
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003584:	2b00      	cmp	r3, #0
 8003586:	d130      	bne.n	80035ea <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003588:	693b      	ldr	r3, [r7, #16]
 800358a:	9300      	str	r3, [sp, #0]
 800358c:	6a3b      	ldr	r3, [r7, #32]
 800358e:	2200      	movs	r2, #0
 8003590:	2180      	movs	r1, #128	@ 0x80
 8003592:	68f8      	ldr	r0, [r7, #12]
 8003594:	f000 f880 	bl	8003698 <I2C_WaitOnFlagUntilTimeout>
 8003598:	4603      	mov	r3, r0
 800359a:	2b00      	cmp	r3, #0
 800359c:	d001      	beq.n	80035a2 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	e04d      	b.n	800363e <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035a6:	b29b      	uxth	r3, r3
 80035a8:	2bff      	cmp	r3, #255	@ 0xff
 80035aa:	d90e      	bls.n	80035ca <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	22ff      	movs	r2, #255	@ 0xff
 80035b0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035b6:	b2da      	uxtb	r2, r3
 80035b8:	8979      	ldrh	r1, [r7, #10]
 80035ba:	2300      	movs	r3, #0
 80035bc:	9300      	str	r3, [sp, #0]
 80035be:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80035c2:	68f8      	ldr	r0, [r7, #12]
 80035c4:	f000 fa2c 	bl	8003a20 <I2C_TransferConfig>
 80035c8:	e00f      	b.n	80035ea <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035ce:	b29a      	uxth	r2, r3
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035d8:	b2da      	uxtb	r2, r3
 80035da:	8979      	ldrh	r1, [r7, #10]
 80035dc:	2300      	movs	r3, #0
 80035de:	9300      	str	r3, [sp, #0]
 80035e0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80035e4:	68f8      	ldr	r0, [r7, #12]
 80035e6:	f000 fa1b 	bl	8003a20 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035ee:	b29b      	uxth	r3, r3
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d19e      	bne.n	8003532 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035f4:	693a      	ldr	r2, [r7, #16]
 80035f6:	6a39      	ldr	r1, [r7, #32]
 80035f8:	68f8      	ldr	r0, [r7, #12]
 80035fa:	f000 f8ed 	bl	80037d8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80035fe:	4603      	mov	r3, r0
 8003600:	2b00      	cmp	r3, #0
 8003602:	d001      	beq.n	8003608 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8003604:	2301      	movs	r3, #1
 8003606:	e01a      	b.n	800363e <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	2220      	movs	r2, #32
 800360e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	6859      	ldr	r1, [r3, #4]
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681a      	ldr	r2, [r3, #0]
 800361a:	4b0c      	ldr	r3, [pc, #48]	@ (800364c <HAL_I2C_Master_Transmit+0x22c>)
 800361c:	400b      	ands	r3, r1
 800361e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	2220      	movs	r2, #32
 8003624:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	2200      	movs	r2, #0
 800362c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	2200      	movs	r2, #0
 8003634:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003638:	2300      	movs	r3, #0
 800363a:	e000      	b.n	800363e <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 800363c:	2302      	movs	r3, #2
  }
}
 800363e:	4618      	mov	r0, r3
 8003640:	3718      	adds	r7, #24
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}
 8003646:	bf00      	nop
 8003648:	80002000 	.word	0x80002000
 800364c:	fe00e800 	.word	0xfe00e800

08003650 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003650:	b480      	push	{r7}
 8003652:	b083      	sub	sp, #12
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	699b      	ldr	r3, [r3, #24]
 800365e:	f003 0302 	and.w	r3, r3, #2
 8003662:	2b02      	cmp	r3, #2
 8003664:	d103      	bne.n	800366e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	2200      	movs	r2, #0
 800366c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	699b      	ldr	r3, [r3, #24]
 8003674:	f003 0301 	and.w	r3, r3, #1
 8003678:	2b01      	cmp	r3, #1
 800367a:	d007      	beq.n	800368c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	699a      	ldr	r2, [r3, #24]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f042 0201 	orr.w	r2, r2, #1
 800368a:	619a      	str	r2, [r3, #24]
  }
}
 800368c:	bf00      	nop
 800368e:	370c      	adds	r7, #12
 8003690:	46bd      	mov	sp, r7
 8003692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003696:	4770      	bx	lr

08003698 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b084      	sub	sp, #16
 800369c:	af00      	add	r7, sp, #0
 800369e:	60f8      	str	r0, [r7, #12]
 80036a0:	60b9      	str	r1, [r7, #8]
 80036a2:	603b      	str	r3, [r7, #0]
 80036a4:	4613      	mov	r3, r2
 80036a6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80036a8:	e03b      	b.n	8003722 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80036aa:	69ba      	ldr	r2, [r7, #24]
 80036ac:	6839      	ldr	r1, [r7, #0]
 80036ae:	68f8      	ldr	r0, [r7, #12]
 80036b0:	f000 f8d6 	bl	8003860 <I2C_IsErrorOccurred>
 80036b4:	4603      	mov	r3, r0
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d001      	beq.n	80036be <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
 80036bc:	e041      	b.n	8003742 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036c4:	d02d      	beq.n	8003722 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036c6:	f7ff faf1 	bl	8002cac <HAL_GetTick>
 80036ca:	4602      	mov	r2, r0
 80036cc:	69bb      	ldr	r3, [r7, #24]
 80036ce:	1ad3      	subs	r3, r2, r3
 80036d0:	683a      	ldr	r2, [r7, #0]
 80036d2:	429a      	cmp	r2, r3
 80036d4:	d302      	bcc.n	80036dc <I2C_WaitOnFlagUntilTimeout+0x44>
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d122      	bne.n	8003722 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	699a      	ldr	r2, [r3, #24]
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	4013      	ands	r3, r2
 80036e6:	68ba      	ldr	r2, [r7, #8]
 80036e8:	429a      	cmp	r2, r3
 80036ea:	bf0c      	ite	eq
 80036ec:	2301      	moveq	r3, #1
 80036ee:	2300      	movne	r3, #0
 80036f0:	b2db      	uxtb	r3, r3
 80036f2:	461a      	mov	r2, r3
 80036f4:	79fb      	ldrb	r3, [r7, #7]
 80036f6:	429a      	cmp	r2, r3
 80036f8:	d113      	bne.n	8003722 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036fe:	f043 0220 	orr.w	r2, r3, #32
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	2220      	movs	r2, #32
 800370a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	2200      	movs	r2, #0
 8003712:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	2200      	movs	r2, #0
 800371a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	e00f      	b.n	8003742 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	699a      	ldr	r2, [r3, #24]
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	4013      	ands	r3, r2
 800372c:	68ba      	ldr	r2, [r7, #8]
 800372e:	429a      	cmp	r2, r3
 8003730:	bf0c      	ite	eq
 8003732:	2301      	moveq	r3, #1
 8003734:	2300      	movne	r3, #0
 8003736:	b2db      	uxtb	r3, r3
 8003738:	461a      	mov	r2, r3
 800373a:	79fb      	ldrb	r3, [r7, #7]
 800373c:	429a      	cmp	r2, r3
 800373e:	d0b4      	beq.n	80036aa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003740:	2300      	movs	r3, #0
}
 8003742:	4618      	mov	r0, r3
 8003744:	3710      	adds	r7, #16
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}

0800374a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800374a:	b580      	push	{r7, lr}
 800374c:	b084      	sub	sp, #16
 800374e:	af00      	add	r7, sp, #0
 8003750:	60f8      	str	r0, [r7, #12]
 8003752:	60b9      	str	r1, [r7, #8]
 8003754:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003756:	e033      	b.n	80037c0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003758:	687a      	ldr	r2, [r7, #4]
 800375a:	68b9      	ldr	r1, [r7, #8]
 800375c:	68f8      	ldr	r0, [r7, #12]
 800375e:	f000 f87f 	bl	8003860 <I2C_IsErrorOccurred>
 8003762:	4603      	mov	r3, r0
 8003764:	2b00      	cmp	r3, #0
 8003766:	d001      	beq.n	800376c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003768:	2301      	movs	r3, #1
 800376a:	e031      	b.n	80037d0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003772:	d025      	beq.n	80037c0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003774:	f7ff fa9a 	bl	8002cac <HAL_GetTick>
 8003778:	4602      	mov	r2, r0
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	1ad3      	subs	r3, r2, r3
 800377e:	68ba      	ldr	r2, [r7, #8]
 8003780:	429a      	cmp	r2, r3
 8003782:	d302      	bcc.n	800378a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d11a      	bne.n	80037c0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	699b      	ldr	r3, [r3, #24]
 8003790:	f003 0302 	and.w	r3, r3, #2
 8003794:	2b02      	cmp	r3, #2
 8003796:	d013      	beq.n	80037c0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800379c:	f043 0220 	orr.w	r2, r3, #32
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	2220      	movs	r2, #32
 80037a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	2200      	movs	r2, #0
 80037b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	2200      	movs	r2, #0
 80037b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	e007      	b.n	80037d0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	699b      	ldr	r3, [r3, #24]
 80037c6:	f003 0302 	and.w	r3, r3, #2
 80037ca:	2b02      	cmp	r3, #2
 80037cc:	d1c4      	bne.n	8003758 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80037ce:	2300      	movs	r3, #0
}
 80037d0:	4618      	mov	r0, r3
 80037d2:	3710      	adds	r7, #16
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bd80      	pop	{r7, pc}

080037d8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b084      	sub	sp, #16
 80037dc:	af00      	add	r7, sp, #0
 80037de:	60f8      	str	r0, [r7, #12]
 80037e0:	60b9      	str	r1, [r7, #8]
 80037e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80037e4:	e02f      	b.n	8003846 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80037e6:	687a      	ldr	r2, [r7, #4]
 80037e8:	68b9      	ldr	r1, [r7, #8]
 80037ea:	68f8      	ldr	r0, [r7, #12]
 80037ec:	f000 f838 	bl	8003860 <I2C_IsErrorOccurred>
 80037f0:	4603      	mov	r3, r0
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d001      	beq.n	80037fa <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	e02d      	b.n	8003856 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037fa:	f7ff fa57 	bl	8002cac <HAL_GetTick>
 80037fe:	4602      	mov	r2, r0
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	1ad3      	subs	r3, r2, r3
 8003804:	68ba      	ldr	r2, [r7, #8]
 8003806:	429a      	cmp	r2, r3
 8003808:	d302      	bcc.n	8003810 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d11a      	bne.n	8003846 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	699b      	ldr	r3, [r3, #24]
 8003816:	f003 0320 	and.w	r3, r3, #32
 800381a:	2b20      	cmp	r3, #32
 800381c:	d013      	beq.n	8003846 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003822:	f043 0220 	orr.w	r2, r3, #32
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	2220      	movs	r2, #32
 800382e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	2200      	movs	r2, #0
 8003836:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	2200      	movs	r2, #0
 800383e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	e007      	b.n	8003856 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	699b      	ldr	r3, [r3, #24]
 800384c:	f003 0320 	and.w	r3, r3, #32
 8003850:	2b20      	cmp	r3, #32
 8003852:	d1c8      	bne.n	80037e6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003854:	2300      	movs	r3, #0
}
 8003856:	4618      	mov	r0, r3
 8003858:	3710      	adds	r7, #16
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}
	...

08003860 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b08a      	sub	sp, #40	@ 0x28
 8003864:	af00      	add	r7, sp, #0
 8003866:	60f8      	str	r0, [r7, #12]
 8003868:	60b9      	str	r1, [r7, #8]
 800386a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800386c:	2300      	movs	r3, #0
 800386e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	699b      	ldr	r3, [r3, #24]
 8003878:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800387a:	2300      	movs	r3, #0
 800387c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003882:	69bb      	ldr	r3, [r7, #24]
 8003884:	f003 0310 	and.w	r3, r3, #16
 8003888:	2b00      	cmp	r3, #0
 800388a:	d068      	beq.n	800395e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	2210      	movs	r2, #16
 8003892:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003894:	e049      	b.n	800392a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	f1b3 3fff 	cmp.w	r3, #4294967295
 800389c:	d045      	beq.n	800392a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800389e:	f7ff fa05 	bl	8002cac <HAL_GetTick>
 80038a2:	4602      	mov	r2, r0
 80038a4:	69fb      	ldr	r3, [r7, #28]
 80038a6:	1ad3      	subs	r3, r2, r3
 80038a8:	68ba      	ldr	r2, [r7, #8]
 80038aa:	429a      	cmp	r2, r3
 80038ac:	d302      	bcc.n	80038b4 <I2C_IsErrorOccurred+0x54>
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d13a      	bne.n	800392a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80038be:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80038c6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	699b      	ldr	r3, [r3, #24]
 80038ce:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80038d2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80038d6:	d121      	bne.n	800391c <I2C_IsErrorOccurred+0xbc>
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80038de:	d01d      	beq.n	800391c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80038e0:	7cfb      	ldrb	r3, [r7, #19]
 80038e2:	2b20      	cmp	r3, #32
 80038e4:	d01a      	beq.n	800391c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	685a      	ldr	r2, [r3, #4]
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80038f4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80038f6:	f7ff f9d9 	bl	8002cac <HAL_GetTick>
 80038fa:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80038fc:	e00e      	b.n	800391c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80038fe:	f7ff f9d5 	bl	8002cac <HAL_GetTick>
 8003902:	4602      	mov	r2, r0
 8003904:	69fb      	ldr	r3, [r7, #28]
 8003906:	1ad3      	subs	r3, r2, r3
 8003908:	2b19      	cmp	r3, #25
 800390a:	d907      	bls.n	800391c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800390c:	6a3b      	ldr	r3, [r7, #32]
 800390e:	f043 0320 	orr.w	r3, r3, #32
 8003912:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003914:	2301      	movs	r3, #1
 8003916:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800391a:	e006      	b.n	800392a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	699b      	ldr	r3, [r3, #24]
 8003922:	f003 0320 	and.w	r3, r3, #32
 8003926:	2b20      	cmp	r3, #32
 8003928:	d1e9      	bne.n	80038fe <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	699b      	ldr	r3, [r3, #24]
 8003930:	f003 0320 	and.w	r3, r3, #32
 8003934:	2b20      	cmp	r3, #32
 8003936:	d003      	beq.n	8003940 <I2C_IsErrorOccurred+0xe0>
 8003938:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800393c:	2b00      	cmp	r3, #0
 800393e:	d0aa      	beq.n	8003896 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003940:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003944:	2b00      	cmp	r3, #0
 8003946:	d103      	bne.n	8003950 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	2220      	movs	r2, #32
 800394e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003950:	6a3b      	ldr	r3, [r7, #32]
 8003952:	f043 0304 	orr.w	r3, r3, #4
 8003956:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003958:	2301      	movs	r3, #1
 800395a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	699b      	ldr	r3, [r3, #24]
 8003964:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003966:	69bb      	ldr	r3, [r7, #24]
 8003968:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800396c:	2b00      	cmp	r3, #0
 800396e:	d00b      	beq.n	8003988 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003970:	6a3b      	ldr	r3, [r7, #32]
 8003972:	f043 0301 	orr.w	r3, r3, #1
 8003976:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003980:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003988:	69bb      	ldr	r3, [r7, #24]
 800398a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800398e:	2b00      	cmp	r3, #0
 8003990:	d00b      	beq.n	80039aa <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003992:	6a3b      	ldr	r3, [r7, #32]
 8003994:	f043 0308 	orr.w	r3, r3, #8
 8003998:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80039a2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80039a4:	2301      	movs	r3, #1
 80039a6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80039aa:	69bb      	ldr	r3, [r7, #24]
 80039ac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d00b      	beq.n	80039cc <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80039b4:	6a3b      	ldr	r3, [r7, #32]
 80039b6:	f043 0302 	orr.w	r3, r3, #2
 80039ba:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80039c4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80039c6:	2301      	movs	r3, #1
 80039c8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80039cc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d01c      	beq.n	8003a0e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80039d4:	68f8      	ldr	r0, [r7, #12]
 80039d6:	f7ff fe3b 	bl	8003650 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	6859      	ldr	r1, [r3, #4]
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681a      	ldr	r2, [r3, #0]
 80039e4:	4b0d      	ldr	r3, [pc, #52]	@ (8003a1c <I2C_IsErrorOccurred+0x1bc>)
 80039e6:	400b      	ands	r3, r1
 80039e8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80039ee:	6a3b      	ldr	r3, [r7, #32]
 80039f0:	431a      	orrs	r2, r3
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	2220      	movs	r2, #32
 80039fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	2200      	movs	r2, #0
 8003a02:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8003a0e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003a12:	4618      	mov	r0, r3
 8003a14:	3728      	adds	r7, #40	@ 0x28
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd80      	pop	{r7, pc}
 8003a1a:	bf00      	nop
 8003a1c:	fe00e800 	.word	0xfe00e800

08003a20 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003a20:	b480      	push	{r7}
 8003a22:	b087      	sub	sp, #28
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	60f8      	str	r0, [r7, #12]
 8003a28:	607b      	str	r3, [r7, #4]
 8003a2a:	460b      	mov	r3, r1
 8003a2c:	817b      	strh	r3, [r7, #10]
 8003a2e:	4613      	mov	r3, r2
 8003a30:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003a32:	897b      	ldrh	r3, [r7, #10]
 8003a34:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003a38:	7a7b      	ldrb	r3, [r7, #9]
 8003a3a:	041b      	lsls	r3, r3, #16
 8003a3c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003a40:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003a46:	6a3b      	ldr	r3, [r7, #32]
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003a4e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	685a      	ldr	r2, [r3, #4]
 8003a56:	6a3b      	ldr	r3, [r7, #32]
 8003a58:	0d5b      	lsrs	r3, r3, #21
 8003a5a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003a5e:	4b08      	ldr	r3, [pc, #32]	@ (8003a80 <I2C_TransferConfig+0x60>)
 8003a60:	430b      	orrs	r3, r1
 8003a62:	43db      	mvns	r3, r3
 8003a64:	ea02 0103 	and.w	r1, r2, r3
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	697a      	ldr	r2, [r7, #20]
 8003a6e:	430a      	orrs	r2, r1
 8003a70:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003a72:	bf00      	nop
 8003a74:	371c      	adds	r7, #28
 8003a76:	46bd      	mov	sp, r7
 8003a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7c:	4770      	bx	lr
 8003a7e:	bf00      	nop
 8003a80:	03ff63ff 	.word	0x03ff63ff

08003a84 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003a84:	b480      	push	{r7}
 8003a86:	b083      	sub	sp, #12
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
 8003a8c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a94:	b2db      	uxtb	r3, r3
 8003a96:	2b20      	cmp	r3, #32
 8003a98:	d138      	bne.n	8003b0c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003aa0:	2b01      	cmp	r3, #1
 8003aa2:	d101      	bne.n	8003aa8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003aa4:	2302      	movs	r3, #2
 8003aa6:	e032      	b.n	8003b0e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2201      	movs	r2, #1
 8003aac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2224      	movs	r2, #36	@ 0x24
 8003ab4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	681a      	ldr	r2, [r3, #0]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f022 0201 	bic.w	r2, r2, #1
 8003ac6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	681a      	ldr	r2, [r3, #0]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003ad6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	6819      	ldr	r1, [r3, #0]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	683a      	ldr	r2, [r7, #0]
 8003ae4:	430a      	orrs	r2, r1
 8003ae6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	681a      	ldr	r2, [r3, #0]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f042 0201 	orr.w	r2, r2, #1
 8003af6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2220      	movs	r2, #32
 8003afc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2200      	movs	r2, #0
 8003b04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	e000      	b.n	8003b0e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003b0c:	2302      	movs	r3, #2
  }
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	370c      	adds	r7, #12
 8003b12:	46bd      	mov	sp, r7
 8003b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b18:	4770      	bx	lr

08003b1a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003b1a:	b480      	push	{r7}
 8003b1c:	b085      	sub	sp, #20
 8003b1e:	af00      	add	r7, sp, #0
 8003b20:	6078      	str	r0, [r7, #4]
 8003b22:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b2a:	b2db      	uxtb	r3, r3
 8003b2c:	2b20      	cmp	r3, #32
 8003b2e:	d139      	bne.n	8003ba4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003b36:	2b01      	cmp	r3, #1
 8003b38:	d101      	bne.n	8003b3e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003b3a:	2302      	movs	r3, #2
 8003b3c:	e033      	b.n	8003ba6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2201      	movs	r2, #1
 8003b42:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2224      	movs	r2, #36	@ 0x24
 8003b4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	681a      	ldr	r2, [r3, #0]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f022 0201 	bic.w	r2, r2, #1
 8003b5c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003b6c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	021b      	lsls	r3, r3, #8
 8003b72:	68fa      	ldr	r2, [r7, #12]
 8003b74:	4313      	orrs	r3, r2
 8003b76:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	68fa      	ldr	r2, [r7, #12]
 8003b7e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	681a      	ldr	r2, [r3, #0]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f042 0201 	orr.w	r2, r2, #1
 8003b8e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2220      	movs	r2, #32
 8003b94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	e000      	b.n	8003ba6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003ba4:	2302      	movs	r3, #2
  }
}
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	3714      	adds	r7, #20
 8003baa:	46bd      	mov	sp, r7
 8003bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb0:	4770      	bx	lr
	...

08003bb4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003bb8:	4b04      	ldr	r3, [pc, #16]	@ (8003bcc <HAL_PWREx_GetVoltageRange+0x18>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc8:	4770      	bx	lr
 8003bca:	bf00      	nop
 8003bcc:	40007000 	.word	0x40007000

08003bd0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b085      	sub	sp, #20
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003bde:	d130      	bne.n	8003c42 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003be0:	4b23      	ldr	r3, [pc, #140]	@ (8003c70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003be8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003bec:	d038      	beq.n	8003c60 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003bee:	4b20      	ldr	r3, [pc, #128]	@ (8003c70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003bf6:	4a1e      	ldr	r2, [pc, #120]	@ (8003c70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003bf8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003bfc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003bfe:	4b1d      	ldr	r3, [pc, #116]	@ (8003c74 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	2232      	movs	r2, #50	@ 0x32
 8003c04:	fb02 f303 	mul.w	r3, r2, r3
 8003c08:	4a1b      	ldr	r2, [pc, #108]	@ (8003c78 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003c0a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c0e:	0c9b      	lsrs	r3, r3, #18
 8003c10:	3301      	adds	r3, #1
 8003c12:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003c14:	e002      	b.n	8003c1c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	3b01      	subs	r3, #1
 8003c1a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003c1c:	4b14      	ldr	r3, [pc, #80]	@ (8003c70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c1e:	695b      	ldr	r3, [r3, #20]
 8003c20:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c24:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c28:	d102      	bne.n	8003c30 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d1f2      	bne.n	8003c16 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003c30:	4b0f      	ldr	r3, [pc, #60]	@ (8003c70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c32:	695b      	ldr	r3, [r3, #20]
 8003c34:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c38:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c3c:	d110      	bne.n	8003c60 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003c3e:	2303      	movs	r3, #3
 8003c40:	e00f      	b.n	8003c62 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003c42:	4b0b      	ldr	r3, [pc, #44]	@ (8003c70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003c4a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c4e:	d007      	beq.n	8003c60 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003c50:	4b07      	ldr	r3, [pc, #28]	@ (8003c70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003c58:	4a05      	ldr	r2, [pc, #20]	@ (8003c70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c5a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003c5e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003c60:	2300      	movs	r3, #0
}
 8003c62:	4618      	mov	r0, r3
 8003c64:	3714      	adds	r7, #20
 8003c66:	46bd      	mov	sp, r7
 8003c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6c:	4770      	bx	lr
 8003c6e:	bf00      	nop
 8003c70:	40007000 	.word	0x40007000
 8003c74:	2000000c 	.word	0x2000000c
 8003c78:	431bde83 	.word	0x431bde83

08003c7c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b088      	sub	sp, #32
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d101      	bne.n	8003c8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	e3ca      	b.n	8004424 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c8e:	4b97      	ldr	r3, [pc, #604]	@ (8003eec <HAL_RCC_OscConfig+0x270>)
 8003c90:	689b      	ldr	r3, [r3, #8]
 8003c92:	f003 030c 	and.w	r3, r3, #12
 8003c96:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003c98:	4b94      	ldr	r3, [pc, #592]	@ (8003eec <HAL_RCC_OscConfig+0x270>)
 8003c9a:	68db      	ldr	r3, [r3, #12]
 8003c9c:	f003 0303 	and.w	r3, r3, #3
 8003ca0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f003 0310 	and.w	r3, r3, #16
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	f000 80e4 	beq.w	8003e78 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003cb0:	69bb      	ldr	r3, [r7, #24]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d007      	beq.n	8003cc6 <HAL_RCC_OscConfig+0x4a>
 8003cb6:	69bb      	ldr	r3, [r7, #24]
 8003cb8:	2b0c      	cmp	r3, #12
 8003cba:	f040 808b 	bne.w	8003dd4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	2b01      	cmp	r3, #1
 8003cc2:	f040 8087 	bne.w	8003dd4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003cc6:	4b89      	ldr	r3, [pc, #548]	@ (8003eec <HAL_RCC_OscConfig+0x270>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f003 0302 	and.w	r3, r3, #2
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d005      	beq.n	8003cde <HAL_RCC_OscConfig+0x62>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	699b      	ldr	r3, [r3, #24]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d101      	bne.n	8003cde <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	e3a2      	b.n	8004424 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6a1a      	ldr	r2, [r3, #32]
 8003ce2:	4b82      	ldr	r3, [pc, #520]	@ (8003eec <HAL_RCC_OscConfig+0x270>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f003 0308 	and.w	r3, r3, #8
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d004      	beq.n	8003cf8 <HAL_RCC_OscConfig+0x7c>
 8003cee:	4b7f      	ldr	r3, [pc, #508]	@ (8003eec <HAL_RCC_OscConfig+0x270>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003cf6:	e005      	b.n	8003d04 <HAL_RCC_OscConfig+0x88>
 8003cf8:	4b7c      	ldr	r3, [pc, #496]	@ (8003eec <HAL_RCC_OscConfig+0x270>)
 8003cfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003cfe:	091b      	lsrs	r3, r3, #4
 8003d00:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d223      	bcs.n	8003d50 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6a1b      	ldr	r3, [r3, #32]
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	f000 fd87 	bl	8004820 <RCC_SetFlashLatencyFromMSIRange>
 8003d12:	4603      	mov	r3, r0
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d001      	beq.n	8003d1c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003d18:	2301      	movs	r3, #1
 8003d1a:	e383      	b.n	8004424 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003d1c:	4b73      	ldr	r3, [pc, #460]	@ (8003eec <HAL_RCC_OscConfig+0x270>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a72      	ldr	r2, [pc, #456]	@ (8003eec <HAL_RCC_OscConfig+0x270>)
 8003d22:	f043 0308 	orr.w	r3, r3, #8
 8003d26:	6013      	str	r3, [r2, #0]
 8003d28:	4b70      	ldr	r3, [pc, #448]	@ (8003eec <HAL_RCC_OscConfig+0x270>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6a1b      	ldr	r3, [r3, #32]
 8003d34:	496d      	ldr	r1, [pc, #436]	@ (8003eec <HAL_RCC_OscConfig+0x270>)
 8003d36:	4313      	orrs	r3, r2
 8003d38:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003d3a:	4b6c      	ldr	r3, [pc, #432]	@ (8003eec <HAL_RCC_OscConfig+0x270>)
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	69db      	ldr	r3, [r3, #28]
 8003d46:	021b      	lsls	r3, r3, #8
 8003d48:	4968      	ldr	r1, [pc, #416]	@ (8003eec <HAL_RCC_OscConfig+0x270>)
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	604b      	str	r3, [r1, #4]
 8003d4e:	e025      	b.n	8003d9c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003d50:	4b66      	ldr	r3, [pc, #408]	@ (8003eec <HAL_RCC_OscConfig+0x270>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a65      	ldr	r2, [pc, #404]	@ (8003eec <HAL_RCC_OscConfig+0x270>)
 8003d56:	f043 0308 	orr.w	r3, r3, #8
 8003d5a:	6013      	str	r3, [r2, #0]
 8003d5c:	4b63      	ldr	r3, [pc, #396]	@ (8003eec <HAL_RCC_OscConfig+0x270>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6a1b      	ldr	r3, [r3, #32]
 8003d68:	4960      	ldr	r1, [pc, #384]	@ (8003eec <HAL_RCC_OscConfig+0x270>)
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003d6e:	4b5f      	ldr	r3, [pc, #380]	@ (8003eec <HAL_RCC_OscConfig+0x270>)
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	69db      	ldr	r3, [r3, #28]
 8003d7a:	021b      	lsls	r3, r3, #8
 8003d7c:	495b      	ldr	r1, [pc, #364]	@ (8003eec <HAL_RCC_OscConfig+0x270>)
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003d82:	69bb      	ldr	r3, [r7, #24]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d109      	bne.n	8003d9c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6a1b      	ldr	r3, [r3, #32]
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	f000 fd47 	bl	8004820 <RCC_SetFlashLatencyFromMSIRange>
 8003d92:	4603      	mov	r3, r0
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d001      	beq.n	8003d9c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	e343      	b.n	8004424 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003d9c:	f000 fc4a 	bl	8004634 <HAL_RCC_GetSysClockFreq>
 8003da0:	4602      	mov	r2, r0
 8003da2:	4b52      	ldr	r3, [pc, #328]	@ (8003eec <HAL_RCC_OscConfig+0x270>)
 8003da4:	689b      	ldr	r3, [r3, #8]
 8003da6:	091b      	lsrs	r3, r3, #4
 8003da8:	f003 030f 	and.w	r3, r3, #15
 8003dac:	4950      	ldr	r1, [pc, #320]	@ (8003ef0 <HAL_RCC_OscConfig+0x274>)
 8003dae:	5ccb      	ldrb	r3, [r1, r3]
 8003db0:	f003 031f 	and.w	r3, r3, #31
 8003db4:	fa22 f303 	lsr.w	r3, r2, r3
 8003db8:	4a4e      	ldr	r2, [pc, #312]	@ (8003ef4 <HAL_RCC_OscConfig+0x278>)
 8003dba:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003dbc:	4b4e      	ldr	r3, [pc, #312]	@ (8003ef8 <HAL_RCC_OscConfig+0x27c>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	f7fe fd7b 	bl	80028bc <HAL_InitTick>
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003dca:	7bfb      	ldrb	r3, [r7, #15]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d052      	beq.n	8003e76 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003dd0:	7bfb      	ldrb	r3, [r7, #15]
 8003dd2:	e327      	b.n	8004424 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	699b      	ldr	r3, [r3, #24]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d032      	beq.n	8003e42 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003ddc:	4b43      	ldr	r3, [pc, #268]	@ (8003eec <HAL_RCC_OscConfig+0x270>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a42      	ldr	r2, [pc, #264]	@ (8003eec <HAL_RCC_OscConfig+0x270>)
 8003de2:	f043 0301 	orr.w	r3, r3, #1
 8003de6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003de8:	f7fe ff60 	bl	8002cac <HAL_GetTick>
 8003dec:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003dee:	e008      	b.n	8003e02 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003df0:	f7fe ff5c 	bl	8002cac <HAL_GetTick>
 8003df4:	4602      	mov	r2, r0
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	1ad3      	subs	r3, r2, r3
 8003dfa:	2b02      	cmp	r3, #2
 8003dfc:	d901      	bls.n	8003e02 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003dfe:	2303      	movs	r3, #3
 8003e00:	e310      	b.n	8004424 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003e02:	4b3a      	ldr	r3, [pc, #232]	@ (8003eec <HAL_RCC_OscConfig+0x270>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f003 0302 	and.w	r3, r3, #2
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d0f0      	beq.n	8003df0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003e0e:	4b37      	ldr	r3, [pc, #220]	@ (8003eec <HAL_RCC_OscConfig+0x270>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4a36      	ldr	r2, [pc, #216]	@ (8003eec <HAL_RCC_OscConfig+0x270>)
 8003e14:	f043 0308 	orr.w	r3, r3, #8
 8003e18:	6013      	str	r3, [r2, #0]
 8003e1a:	4b34      	ldr	r3, [pc, #208]	@ (8003eec <HAL_RCC_OscConfig+0x270>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6a1b      	ldr	r3, [r3, #32]
 8003e26:	4931      	ldr	r1, [pc, #196]	@ (8003eec <HAL_RCC_OscConfig+0x270>)
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003e2c:	4b2f      	ldr	r3, [pc, #188]	@ (8003eec <HAL_RCC_OscConfig+0x270>)
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	69db      	ldr	r3, [r3, #28]
 8003e38:	021b      	lsls	r3, r3, #8
 8003e3a:	492c      	ldr	r1, [pc, #176]	@ (8003eec <HAL_RCC_OscConfig+0x270>)
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	604b      	str	r3, [r1, #4]
 8003e40:	e01a      	b.n	8003e78 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003e42:	4b2a      	ldr	r3, [pc, #168]	@ (8003eec <HAL_RCC_OscConfig+0x270>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a29      	ldr	r2, [pc, #164]	@ (8003eec <HAL_RCC_OscConfig+0x270>)
 8003e48:	f023 0301 	bic.w	r3, r3, #1
 8003e4c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003e4e:	f7fe ff2d 	bl	8002cac <HAL_GetTick>
 8003e52:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003e54:	e008      	b.n	8003e68 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003e56:	f7fe ff29 	bl	8002cac <HAL_GetTick>
 8003e5a:	4602      	mov	r2, r0
 8003e5c:	693b      	ldr	r3, [r7, #16]
 8003e5e:	1ad3      	subs	r3, r2, r3
 8003e60:	2b02      	cmp	r3, #2
 8003e62:	d901      	bls.n	8003e68 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003e64:	2303      	movs	r3, #3
 8003e66:	e2dd      	b.n	8004424 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003e68:	4b20      	ldr	r3, [pc, #128]	@ (8003eec <HAL_RCC_OscConfig+0x270>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f003 0302 	and.w	r3, r3, #2
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d1f0      	bne.n	8003e56 <HAL_RCC_OscConfig+0x1da>
 8003e74:	e000      	b.n	8003e78 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003e76:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f003 0301 	and.w	r3, r3, #1
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d074      	beq.n	8003f6e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003e84:	69bb      	ldr	r3, [r7, #24]
 8003e86:	2b08      	cmp	r3, #8
 8003e88:	d005      	beq.n	8003e96 <HAL_RCC_OscConfig+0x21a>
 8003e8a:	69bb      	ldr	r3, [r7, #24]
 8003e8c:	2b0c      	cmp	r3, #12
 8003e8e:	d10e      	bne.n	8003eae <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	2b03      	cmp	r3, #3
 8003e94:	d10b      	bne.n	8003eae <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e96:	4b15      	ldr	r3, [pc, #84]	@ (8003eec <HAL_RCC_OscConfig+0x270>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d064      	beq.n	8003f6c <HAL_RCC_OscConfig+0x2f0>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d160      	bne.n	8003f6c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	e2ba      	b.n	8004424 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003eb6:	d106      	bne.n	8003ec6 <HAL_RCC_OscConfig+0x24a>
 8003eb8:	4b0c      	ldr	r3, [pc, #48]	@ (8003eec <HAL_RCC_OscConfig+0x270>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a0b      	ldr	r2, [pc, #44]	@ (8003eec <HAL_RCC_OscConfig+0x270>)
 8003ebe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ec2:	6013      	str	r3, [r2, #0]
 8003ec4:	e026      	b.n	8003f14 <HAL_RCC_OscConfig+0x298>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003ece:	d115      	bne.n	8003efc <HAL_RCC_OscConfig+0x280>
 8003ed0:	4b06      	ldr	r3, [pc, #24]	@ (8003eec <HAL_RCC_OscConfig+0x270>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a05      	ldr	r2, [pc, #20]	@ (8003eec <HAL_RCC_OscConfig+0x270>)
 8003ed6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003eda:	6013      	str	r3, [r2, #0]
 8003edc:	4b03      	ldr	r3, [pc, #12]	@ (8003eec <HAL_RCC_OscConfig+0x270>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a02      	ldr	r2, [pc, #8]	@ (8003eec <HAL_RCC_OscConfig+0x270>)
 8003ee2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ee6:	6013      	str	r3, [r2, #0]
 8003ee8:	e014      	b.n	8003f14 <HAL_RCC_OscConfig+0x298>
 8003eea:	bf00      	nop
 8003eec:	40021000 	.word	0x40021000
 8003ef0:	08011edc 	.word	0x08011edc
 8003ef4:	2000000c 	.word	0x2000000c
 8003ef8:	20000010 	.word	0x20000010
 8003efc:	4ba0      	ldr	r3, [pc, #640]	@ (8004180 <HAL_RCC_OscConfig+0x504>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a9f      	ldr	r2, [pc, #636]	@ (8004180 <HAL_RCC_OscConfig+0x504>)
 8003f02:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f06:	6013      	str	r3, [r2, #0]
 8003f08:	4b9d      	ldr	r3, [pc, #628]	@ (8004180 <HAL_RCC_OscConfig+0x504>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a9c      	ldr	r2, [pc, #624]	@ (8004180 <HAL_RCC_OscConfig+0x504>)
 8003f0e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003f12:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d013      	beq.n	8003f44 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f1c:	f7fe fec6 	bl	8002cac <HAL_GetTick>
 8003f20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f22:	e008      	b.n	8003f36 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f24:	f7fe fec2 	bl	8002cac <HAL_GetTick>
 8003f28:	4602      	mov	r2, r0
 8003f2a:	693b      	ldr	r3, [r7, #16]
 8003f2c:	1ad3      	subs	r3, r2, r3
 8003f2e:	2b64      	cmp	r3, #100	@ 0x64
 8003f30:	d901      	bls.n	8003f36 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003f32:	2303      	movs	r3, #3
 8003f34:	e276      	b.n	8004424 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f36:	4b92      	ldr	r3, [pc, #584]	@ (8004180 <HAL_RCC_OscConfig+0x504>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d0f0      	beq.n	8003f24 <HAL_RCC_OscConfig+0x2a8>
 8003f42:	e014      	b.n	8003f6e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f44:	f7fe feb2 	bl	8002cac <HAL_GetTick>
 8003f48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003f4a:	e008      	b.n	8003f5e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f4c:	f7fe feae 	bl	8002cac <HAL_GetTick>
 8003f50:	4602      	mov	r2, r0
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	1ad3      	subs	r3, r2, r3
 8003f56:	2b64      	cmp	r3, #100	@ 0x64
 8003f58:	d901      	bls.n	8003f5e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003f5a:	2303      	movs	r3, #3
 8003f5c:	e262      	b.n	8004424 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003f5e:	4b88      	ldr	r3, [pc, #544]	@ (8004180 <HAL_RCC_OscConfig+0x504>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d1f0      	bne.n	8003f4c <HAL_RCC_OscConfig+0x2d0>
 8003f6a:	e000      	b.n	8003f6e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f003 0302 	and.w	r3, r3, #2
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d060      	beq.n	800403c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003f7a:	69bb      	ldr	r3, [r7, #24]
 8003f7c:	2b04      	cmp	r3, #4
 8003f7e:	d005      	beq.n	8003f8c <HAL_RCC_OscConfig+0x310>
 8003f80:	69bb      	ldr	r3, [r7, #24]
 8003f82:	2b0c      	cmp	r3, #12
 8003f84:	d119      	bne.n	8003fba <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003f86:	697b      	ldr	r3, [r7, #20]
 8003f88:	2b02      	cmp	r3, #2
 8003f8a:	d116      	bne.n	8003fba <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f8c:	4b7c      	ldr	r3, [pc, #496]	@ (8004180 <HAL_RCC_OscConfig+0x504>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d005      	beq.n	8003fa4 <HAL_RCC_OscConfig+0x328>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	68db      	ldr	r3, [r3, #12]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d101      	bne.n	8003fa4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	e23f      	b.n	8004424 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fa4:	4b76      	ldr	r3, [pc, #472]	@ (8004180 <HAL_RCC_OscConfig+0x504>)
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	691b      	ldr	r3, [r3, #16]
 8003fb0:	061b      	lsls	r3, r3, #24
 8003fb2:	4973      	ldr	r1, [pc, #460]	@ (8004180 <HAL_RCC_OscConfig+0x504>)
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003fb8:	e040      	b.n	800403c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	68db      	ldr	r3, [r3, #12]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d023      	beq.n	800400a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003fc2:	4b6f      	ldr	r3, [pc, #444]	@ (8004180 <HAL_RCC_OscConfig+0x504>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a6e      	ldr	r2, [pc, #440]	@ (8004180 <HAL_RCC_OscConfig+0x504>)
 8003fc8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003fcc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fce:	f7fe fe6d 	bl	8002cac <HAL_GetTick>
 8003fd2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003fd4:	e008      	b.n	8003fe8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003fd6:	f7fe fe69 	bl	8002cac <HAL_GetTick>
 8003fda:	4602      	mov	r2, r0
 8003fdc:	693b      	ldr	r3, [r7, #16]
 8003fde:	1ad3      	subs	r3, r2, r3
 8003fe0:	2b02      	cmp	r3, #2
 8003fe2:	d901      	bls.n	8003fe8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003fe4:	2303      	movs	r3, #3
 8003fe6:	e21d      	b.n	8004424 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003fe8:	4b65      	ldr	r3, [pc, #404]	@ (8004180 <HAL_RCC_OscConfig+0x504>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d0f0      	beq.n	8003fd6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ff4:	4b62      	ldr	r3, [pc, #392]	@ (8004180 <HAL_RCC_OscConfig+0x504>)
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	691b      	ldr	r3, [r3, #16]
 8004000:	061b      	lsls	r3, r3, #24
 8004002:	495f      	ldr	r1, [pc, #380]	@ (8004180 <HAL_RCC_OscConfig+0x504>)
 8004004:	4313      	orrs	r3, r2
 8004006:	604b      	str	r3, [r1, #4]
 8004008:	e018      	b.n	800403c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800400a:	4b5d      	ldr	r3, [pc, #372]	@ (8004180 <HAL_RCC_OscConfig+0x504>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a5c      	ldr	r2, [pc, #368]	@ (8004180 <HAL_RCC_OscConfig+0x504>)
 8004010:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004014:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004016:	f7fe fe49 	bl	8002cac <HAL_GetTick>
 800401a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800401c:	e008      	b.n	8004030 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800401e:	f7fe fe45 	bl	8002cac <HAL_GetTick>
 8004022:	4602      	mov	r2, r0
 8004024:	693b      	ldr	r3, [r7, #16]
 8004026:	1ad3      	subs	r3, r2, r3
 8004028:	2b02      	cmp	r3, #2
 800402a:	d901      	bls.n	8004030 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800402c:	2303      	movs	r3, #3
 800402e:	e1f9      	b.n	8004424 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004030:	4b53      	ldr	r3, [pc, #332]	@ (8004180 <HAL_RCC_OscConfig+0x504>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004038:	2b00      	cmp	r3, #0
 800403a:	d1f0      	bne.n	800401e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f003 0308 	and.w	r3, r3, #8
 8004044:	2b00      	cmp	r3, #0
 8004046:	d03c      	beq.n	80040c2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	695b      	ldr	r3, [r3, #20]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d01c      	beq.n	800408a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004050:	4b4b      	ldr	r3, [pc, #300]	@ (8004180 <HAL_RCC_OscConfig+0x504>)
 8004052:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004056:	4a4a      	ldr	r2, [pc, #296]	@ (8004180 <HAL_RCC_OscConfig+0x504>)
 8004058:	f043 0301 	orr.w	r3, r3, #1
 800405c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004060:	f7fe fe24 	bl	8002cac <HAL_GetTick>
 8004064:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004066:	e008      	b.n	800407a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004068:	f7fe fe20 	bl	8002cac <HAL_GetTick>
 800406c:	4602      	mov	r2, r0
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	1ad3      	subs	r3, r2, r3
 8004072:	2b02      	cmp	r3, #2
 8004074:	d901      	bls.n	800407a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004076:	2303      	movs	r3, #3
 8004078:	e1d4      	b.n	8004424 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800407a:	4b41      	ldr	r3, [pc, #260]	@ (8004180 <HAL_RCC_OscConfig+0x504>)
 800407c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004080:	f003 0302 	and.w	r3, r3, #2
 8004084:	2b00      	cmp	r3, #0
 8004086:	d0ef      	beq.n	8004068 <HAL_RCC_OscConfig+0x3ec>
 8004088:	e01b      	b.n	80040c2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800408a:	4b3d      	ldr	r3, [pc, #244]	@ (8004180 <HAL_RCC_OscConfig+0x504>)
 800408c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004090:	4a3b      	ldr	r2, [pc, #236]	@ (8004180 <HAL_RCC_OscConfig+0x504>)
 8004092:	f023 0301 	bic.w	r3, r3, #1
 8004096:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800409a:	f7fe fe07 	bl	8002cac <HAL_GetTick>
 800409e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80040a0:	e008      	b.n	80040b4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040a2:	f7fe fe03 	bl	8002cac <HAL_GetTick>
 80040a6:	4602      	mov	r2, r0
 80040a8:	693b      	ldr	r3, [r7, #16]
 80040aa:	1ad3      	subs	r3, r2, r3
 80040ac:	2b02      	cmp	r3, #2
 80040ae:	d901      	bls.n	80040b4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80040b0:	2303      	movs	r3, #3
 80040b2:	e1b7      	b.n	8004424 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80040b4:	4b32      	ldr	r3, [pc, #200]	@ (8004180 <HAL_RCC_OscConfig+0x504>)
 80040b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80040ba:	f003 0302 	and.w	r3, r3, #2
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d1ef      	bne.n	80040a2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f003 0304 	and.w	r3, r3, #4
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	f000 80a6 	beq.w	800421c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040d0:	2300      	movs	r3, #0
 80040d2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80040d4:	4b2a      	ldr	r3, [pc, #168]	@ (8004180 <HAL_RCC_OscConfig+0x504>)
 80040d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d10d      	bne.n	80040fc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040e0:	4b27      	ldr	r3, [pc, #156]	@ (8004180 <HAL_RCC_OscConfig+0x504>)
 80040e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040e4:	4a26      	ldr	r2, [pc, #152]	@ (8004180 <HAL_RCC_OscConfig+0x504>)
 80040e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80040ea:	6593      	str	r3, [r2, #88]	@ 0x58
 80040ec:	4b24      	ldr	r3, [pc, #144]	@ (8004180 <HAL_RCC_OscConfig+0x504>)
 80040ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040f4:	60bb      	str	r3, [r7, #8]
 80040f6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80040f8:	2301      	movs	r3, #1
 80040fa:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80040fc:	4b21      	ldr	r3, [pc, #132]	@ (8004184 <HAL_RCC_OscConfig+0x508>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004104:	2b00      	cmp	r3, #0
 8004106:	d118      	bne.n	800413a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004108:	4b1e      	ldr	r3, [pc, #120]	@ (8004184 <HAL_RCC_OscConfig+0x508>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a1d      	ldr	r2, [pc, #116]	@ (8004184 <HAL_RCC_OscConfig+0x508>)
 800410e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004112:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004114:	f7fe fdca 	bl	8002cac <HAL_GetTick>
 8004118:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800411a:	e008      	b.n	800412e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800411c:	f7fe fdc6 	bl	8002cac <HAL_GetTick>
 8004120:	4602      	mov	r2, r0
 8004122:	693b      	ldr	r3, [r7, #16]
 8004124:	1ad3      	subs	r3, r2, r3
 8004126:	2b02      	cmp	r3, #2
 8004128:	d901      	bls.n	800412e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800412a:	2303      	movs	r3, #3
 800412c:	e17a      	b.n	8004424 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800412e:	4b15      	ldr	r3, [pc, #84]	@ (8004184 <HAL_RCC_OscConfig+0x508>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004136:	2b00      	cmp	r3, #0
 8004138:	d0f0      	beq.n	800411c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	689b      	ldr	r3, [r3, #8]
 800413e:	2b01      	cmp	r3, #1
 8004140:	d108      	bne.n	8004154 <HAL_RCC_OscConfig+0x4d8>
 8004142:	4b0f      	ldr	r3, [pc, #60]	@ (8004180 <HAL_RCC_OscConfig+0x504>)
 8004144:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004148:	4a0d      	ldr	r2, [pc, #52]	@ (8004180 <HAL_RCC_OscConfig+0x504>)
 800414a:	f043 0301 	orr.w	r3, r3, #1
 800414e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004152:	e029      	b.n	80041a8 <HAL_RCC_OscConfig+0x52c>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	689b      	ldr	r3, [r3, #8]
 8004158:	2b05      	cmp	r3, #5
 800415a:	d115      	bne.n	8004188 <HAL_RCC_OscConfig+0x50c>
 800415c:	4b08      	ldr	r3, [pc, #32]	@ (8004180 <HAL_RCC_OscConfig+0x504>)
 800415e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004162:	4a07      	ldr	r2, [pc, #28]	@ (8004180 <HAL_RCC_OscConfig+0x504>)
 8004164:	f043 0304 	orr.w	r3, r3, #4
 8004168:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800416c:	4b04      	ldr	r3, [pc, #16]	@ (8004180 <HAL_RCC_OscConfig+0x504>)
 800416e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004172:	4a03      	ldr	r2, [pc, #12]	@ (8004180 <HAL_RCC_OscConfig+0x504>)
 8004174:	f043 0301 	orr.w	r3, r3, #1
 8004178:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800417c:	e014      	b.n	80041a8 <HAL_RCC_OscConfig+0x52c>
 800417e:	bf00      	nop
 8004180:	40021000 	.word	0x40021000
 8004184:	40007000 	.word	0x40007000
 8004188:	4b9c      	ldr	r3, [pc, #624]	@ (80043fc <HAL_RCC_OscConfig+0x780>)
 800418a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800418e:	4a9b      	ldr	r2, [pc, #620]	@ (80043fc <HAL_RCC_OscConfig+0x780>)
 8004190:	f023 0301 	bic.w	r3, r3, #1
 8004194:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004198:	4b98      	ldr	r3, [pc, #608]	@ (80043fc <HAL_RCC_OscConfig+0x780>)
 800419a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800419e:	4a97      	ldr	r2, [pc, #604]	@ (80043fc <HAL_RCC_OscConfig+0x780>)
 80041a0:	f023 0304 	bic.w	r3, r3, #4
 80041a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d016      	beq.n	80041de <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041b0:	f7fe fd7c 	bl	8002cac <HAL_GetTick>
 80041b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80041b6:	e00a      	b.n	80041ce <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041b8:	f7fe fd78 	bl	8002cac <HAL_GetTick>
 80041bc:	4602      	mov	r2, r0
 80041be:	693b      	ldr	r3, [r7, #16]
 80041c0:	1ad3      	subs	r3, r2, r3
 80041c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d901      	bls.n	80041ce <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80041ca:	2303      	movs	r3, #3
 80041cc:	e12a      	b.n	8004424 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80041ce:	4b8b      	ldr	r3, [pc, #556]	@ (80043fc <HAL_RCC_OscConfig+0x780>)
 80041d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041d4:	f003 0302 	and.w	r3, r3, #2
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d0ed      	beq.n	80041b8 <HAL_RCC_OscConfig+0x53c>
 80041dc:	e015      	b.n	800420a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041de:	f7fe fd65 	bl	8002cac <HAL_GetTick>
 80041e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80041e4:	e00a      	b.n	80041fc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041e6:	f7fe fd61 	bl	8002cac <HAL_GetTick>
 80041ea:	4602      	mov	r2, r0
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	1ad3      	subs	r3, r2, r3
 80041f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d901      	bls.n	80041fc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80041f8:	2303      	movs	r3, #3
 80041fa:	e113      	b.n	8004424 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80041fc:	4b7f      	ldr	r3, [pc, #508]	@ (80043fc <HAL_RCC_OscConfig+0x780>)
 80041fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004202:	f003 0302 	and.w	r3, r3, #2
 8004206:	2b00      	cmp	r3, #0
 8004208:	d1ed      	bne.n	80041e6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800420a:	7ffb      	ldrb	r3, [r7, #31]
 800420c:	2b01      	cmp	r3, #1
 800420e:	d105      	bne.n	800421c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004210:	4b7a      	ldr	r3, [pc, #488]	@ (80043fc <HAL_RCC_OscConfig+0x780>)
 8004212:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004214:	4a79      	ldr	r2, [pc, #484]	@ (80043fc <HAL_RCC_OscConfig+0x780>)
 8004216:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800421a:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004220:	2b00      	cmp	r3, #0
 8004222:	f000 80fe 	beq.w	8004422 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800422a:	2b02      	cmp	r3, #2
 800422c:	f040 80d0 	bne.w	80043d0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004230:	4b72      	ldr	r3, [pc, #456]	@ (80043fc <HAL_RCC_OscConfig+0x780>)
 8004232:	68db      	ldr	r3, [r3, #12]
 8004234:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004236:	697b      	ldr	r3, [r7, #20]
 8004238:	f003 0203 	and.w	r2, r3, #3
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004240:	429a      	cmp	r2, r3
 8004242:	d130      	bne.n	80042a6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004244:	697b      	ldr	r3, [r7, #20]
 8004246:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800424e:	3b01      	subs	r3, #1
 8004250:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004252:	429a      	cmp	r2, r3
 8004254:	d127      	bne.n	80042a6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004260:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004262:	429a      	cmp	r2, r3
 8004264:	d11f      	bne.n	80042a6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004266:	697b      	ldr	r3, [r7, #20]
 8004268:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800426c:	687a      	ldr	r2, [r7, #4]
 800426e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004270:	2a07      	cmp	r2, #7
 8004272:	bf14      	ite	ne
 8004274:	2201      	movne	r2, #1
 8004276:	2200      	moveq	r2, #0
 8004278:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800427a:	4293      	cmp	r3, r2
 800427c:	d113      	bne.n	80042a6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004288:	085b      	lsrs	r3, r3, #1
 800428a:	3b01      	subs	r3, #1
 800428c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800428e:	429a      	cmp	r2, r3
 8004290:	d109      	bne.n	80042a6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004292:	697b      	ldr	r3, [r7, #20]
 8004294:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800429c:	085b      	lsrs	r3, r3, #1
 800429e:	3b01      	subs	r3, #1
 80042a0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80042a2:	429a      	cmp	r2, r3
 80042a4:	d06e      	beq.n	8004384 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80042a6:	69bb      	ldr	r3, [r7, #24]
 80042a8:	2b0c      	cmp	r3, #12
 80042aa:	d069      	beq.n	8004380 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80042ac:	4b53      	ldr	r3, [pc, #332]	@ (80043fc <HAL_RCC_OscConfig+0x780>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d105      	bne.n	80042c4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80042b8:	4b50      	ldr	r3, [pc, #320]	@ (80043fc <HAL_RCC_OscConfig+0x780>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d001      	beq.n	80042c8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80042c4:	2301      	movs	r3, #1
 80042c6:	e0ad      	b.n	8004424 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80042c8:	4b4c      	ldr	r3, [pc, #304]	@ (80043fc <HAL_RCC_OscConfig+0x780>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a4b      	ldr	r2, [pc, #300]	@ (80043fc <HAL_RCC_OscConfig+0x780>)
 80042ce:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80042d2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80042d4:	f7fe fcea 	bl	8002cac <HAL_GetTick>
 80042d8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80042da:	e008      	b.n	80042ee <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042dc:	f7fe fce6 	bl	8002cac <HAL_GetTick>
 80042e0:	4602      	mov	r2, r0
 80042e2:	693b      	ldr	r3, [r7, #16]
 80042e4:	1ad3      	subs	r3, r2, r3
 80042e6:	2b02      	cmp	r3, #2
 80042e8:	d901      	bls.n	80042ee <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80042ea:	2303      	movs	r3, #3
 80042ec:	e09a      	b.n	8004424 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80042ee:	4b43      	ldr	r3, [pc, #268]	@ (80043fc <HAL_RCC_OscConfig+0x780>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d1f0      	bne.n	80042dc <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80042fa:	4b40      	ldr	r3, [pc, #256]	@ (80043fc <HAL_RCC_OscConfig+0x780>)
 80042fc:	68da      	ldr	r2, [r3, #12]
 80042fe:	4b40      	ldr	r3, [pc, #256]	@ (8004400 <HAL_RCC_OscConfig+0x784>)
 8004300:	4013      	ands	r3, r2
 8004302:	687a      	ldr	r2, [r7, #4]
 8004304:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8004306:	687a      	ldr	r2, [r7, #4]
 8004308:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800430a:	3a01      	subs	r2, #1
 800430c:	0112      	lsls	r2, r2, #4
 800430e:	4311      	orrs	r1, r2
 8004310:	687a      	ldr	r2, [r7, #4]
 8004312:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004314:	0212      	lsls	r2, r2, #8
 8004316:	4311      	orrs	r1, r2
 8004318:	687a      	ldr	r2, [r7, #4]
 800431a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800431c:	0852      	lsrs	r2, r2, #1
 800431e:	3a01      	subs	r2, #1
 8004320:	0552      	lsls	r2, r2, #21
 8004322:	4311      	orrs	r1, r2
 8004324:	687a      	ldr	r2, [r7, #4]
 8004326:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004328:	0852      	lsrs	r2, r2, #1
 800432a:	3a01      	subs	r2, #1
 800432c:	0652      	lsls	r2, r2, #25
 800432e:	4311      	orrs	r1, r2
 8004330:	687a      	ldr	r2, [r7, #4]
 8004332:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004334:	0912      	lsrs	r2, r2, #4
 8004336:	0452      	lsls	r2, r2, #17
 8004338:	430a      	orrs	r2, r1
 800433a:	4930      	ldr	r1, [pc, #192]	@ (80043fc <HAL_RCC_OscConfig+0x780>)
 800433c:	4313      	orrs	r3, r2
 800433e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004340:	4b2e      	ldr	r3, [pc, #184]	@ (80043fc <HAL_RCC_OscConfig+0x780>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a2d      	ldr	r2, [pc, #180]	@ (80043fc <HAL_RCC_OscConfig+0x780>)
 8004346:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800434a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800434c:	4b2b      	ldr	r3, [pc, #172]	@ (80043fc <HAL_RCC_OscConfig+0x780>)
 800434e:	68db      	ldr	r3, [r3, #12]
 8004350:	4a2a      	ldr	r2, [pc, #168]	@ (80043fc <HAL_RCC_OscConfig+0x780>)
 8004352:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004356:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004358:	f7fe fca8 	bl	8002cac <HAL_GetTick>
 800435c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800435e:	e008      	b.n	8004372 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004360:	f7fe fca4 	bl	8002cac <HAL_GetTick>
 8004364:	4602      	mov	r2, r0
 8004366:	693b      	ldr	r3, [r7, #16]
 8004368:	1ad3      	subs	r3, r2, r3
 800436a:	2b02      	cmp	r3, #2
 800436c:	d901      	bls.n	8004372 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800436e:	2303      	movs	r3, #3
 8004370:	e058      	b.n	8004424 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004372:	4b22      	ldr	r3, [pc, #136]	@ (80043fc <HAL_RCC_OscConfig+0x780>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800437a:	2b00      	cmp	r3, #0
 800437c:	d0f0      	beq.n	8004360 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800437e:	e050      	b.n	8004422 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004380:	2301      	movs	r3, #1
 8004382:	e04f      	b.n	8004424 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004384:	4b1d      	ldr	r3, [pc, #116]	@ (80043fc <HAL_RCC_OscConfig+0x780>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800438c:	2b00      	cmp	r3, #0
 800438e:	d148      	bne.n	8004422 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004390:	4b1a      	ldr	r3, [pc, #104]	@ (80043fc <HAL_RCC_OscConfig+0x780>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a19      	ldr	r2, [pc, #100]	@ (80043fc <HAL_RCC_OscConfig+0x780>)
 8004396:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800439a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800439c:	4b17      	ldr	r3, [pc, #92]	@ (80043fc <HAL_RCC_OscConfig+0x780>)
 800439e:	68db      	ldr	r3, [r3, #12]
 80043a0:	4a16      	ldr	r2, [pc, #88]	@ (80043fc <HAL_RCC_OscConfig+0x780>)
 80043a2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80043a6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80043a8:	f7fe fc80 	bl	8002cac <HAL_GetTick>
 80043ac:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80043ae:	e008      	b.n	80043c2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043b0:	f7fe fc7c 	bl	8002cac <HAL_GetTick>
 80043b4:	4602      	mov	r2, r0
 80043b6:	693b      	ldr	r3, [r7, #16]
 80043b8:	1ad3      	subs	r3, r2, r3
 80043ba:	2b02      	cmp	r3, #2
 80043bc:	d901      	bls.n	80043c2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80043be:	2303      	movs	r3, #3
 80043c0:	e030      	b.n	8004424 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80043c2:	4b0e      	ldr	r3, [pc, #56]	@ (80043fc <HAL_RCC_OscConfig+0x780>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d0f0      	beq.n	80043b0 <HAL_RCC_OscConfig+0x734>
 80043ce:	e028      	b.n	8004422 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80043d0:	69bb      	ldr	r3, [r7, #24]
 80043d2:	2b0c      	cmp	r3, #12
 80043d4:	d023      	beq.n	800441e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043d6:	4b09      	ldr	r3, [pc, #36]	@ (80043fc <HAL_RCC_OscConfig+0x780>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a08      	ldr	r2, [pc, #32]	@ (80043fc <HAL_RCC_OscConfig+0x780>)
 80043dc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80043e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043e2:	f7fe fc63 	bl	8002cac <HAL_GetTick>
 80043e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043e8:	e00c      	b.n	8004404 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043ea:	f7fe fc5f 	bl	8002cac <HAL_GetTick>
 80043ee:	4602      	mov	r2, r0
 80043f0:	693b      	ldr	r3, [r7, #16]
 80043f2:	1ad3      	subs	r3, r2, r3
 80043f4:	2b02      	cmp	r3, #2
 80043f6:	d905      	bls.n	8004404 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80043f8:	2303      	movs	r3, #3
 80043fa:	e013      	b.n	8004424 <HAL_RCC_OscConfig+0x7a8>
 80043fc:	40021000 	.word	0x40021000
 8004400:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004404:	4b09      	ldr	r3, [pc, #36]	@ (800442c <HAL_RCC_OscConfig+0x7b0>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800440c:	2b00      	cmp	r3, #0
 800440e:	d1ec      	bne.n	80043ea <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004410:	4b06      	ldr	r3, [pc, #24]	@ (800442c <HAL_RCC_OscConfig+0x7b0>)
 8004412:	68da      	ldr	r2, [r3, #12]
 8004414:	4905      	ldr	r1, [pc, #20]	@ (800442c <HAL_RCC_OscConfig+0x7b0>)
 8004416:	4b06      	ldr	r3, [pc, #24]	@ (8004430 <HAL_RCC_OscConfig+0x7b4>)
 8004418:	4013      	ands	r3, r2
 800441a:	60cb      	str	r3, [r1, #12]
 800441c:	e001      	b.n	8004422 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800441e:	2301      	movs	r3, #1
 8004420:	e000      	b.n	8004424 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8004422:	2300      	movs	r3, #0
}
 8004424:	4618      	mov	r0, r3
 8004426:	3720      	adds	r7, #32
 8004428:	46bd      	mov	sp, r7
 800442a:	bd80      	pop	{r7, pc}
 800442c:	40021000 	.word	0x40021000
 8004430:	feeefffc 	.word	0xfeeefffc

08004434 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b084      	sub	sp, #16
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
 800443c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d101      	bne.n	8004448 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004444:	2301      	movs	r3, #1
 8004446:	e0e7      	b.n	8004618 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004448:	4b75      	ldr	r3, [pc, #468]	@ (8004620 <HAL_RCC_ClockConfig+0x1ec>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f003 0307 	and.w	r3, r3, #7
 8004450:	683a      	ldr	r2, [r7, #0]
 8004452:	429a      	cmp	r2, r3
 8004454:	d910      	bls.n	8004478 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004456:	4b72      	ldr	r3, [pc, #456]	@ (8004620 <HAL_RCC_ClockConfig+0x1ec>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f023 0207 	bic.w	r2, r3, #7
 800445e:	4970      	ldr	r1, [pc, #448]	@ (8004620 <HAL_RCC_ClockConfig+0x1ec>)
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	4313      	orrs	r3, r2
 8004464:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004466:	4b6e      	ldr	r3, [pc, #440]	@ (8004620 <HAL_RCC_ClockConfig+0x1ec>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f003 0307 	and.w	r3, r3, #7
 800446e:	683a      	ldr	r2, [r7, #0]
 8004470:	429a      	cmp	r2, r3
 8004472:	d001      	beq.n	8004478 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004474:	2301      	movs	r3, #1
 8004476:	e0cf      	b.n	8004618 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f003 0302 	and.w	r3, r3, #2
 8004480:	2b00      	cmp	r3, #0
 8004482:	d010      	beq.n	80044a6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	689a      	ldr	r2, [r3, #8]
 8004488:	4b66      	ldr	r3, [pc, #408]	@ (8004624 <HAL_RCC_ClockConfig+0x1f0>)
 800448a:	689b      	ldr	r3, [r3, #8]
 800448c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004490:	429a      	cmp	r2, r3
 8004492:	d908      	bls.n	80044a6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004494:	4b63      	ldr	r3, [pc, #396]	@ (8004624 <HAL_RCC_ClockConfig+0x1f0>)
 8004496:	689b      	ldr	r3, [r3, #8]
 8004498:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	689b      	ldr	r3, [r3, #8]
 80044a0:	4960      	ldr	r1, [pc, #384]	@ (8004624 <HAL_RCC_ClockConfig+0x1f0>)
 80044a2:	4313      	orrs	r3, r2
 80044a4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f003 0301 	and.w	r3, r3, #1
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d04c      	beq.n	800454c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	2b03      	cmp	r3, #3
 80044b8:	d107      	bne.n	80044ca <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044ba:	4b5a      	ldr	r3, [pc, #360]	@ (8004624 <HAL_RCC_ClockConfig+0x1f0>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d121      	bne.n	800450a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80044c6:	2301      	movs	r3, #1
 80044c8:	e0a6      	b.n	8004618 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	2b02      	cmp	r3, #2
 80044d0:	d107      	bne.n	80044e2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80044d2:	4b54      	ldr	r3, [pc, #336]	@ (8004624 <HAL_RCC_ClockConfig+0x1f0>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d115      	bne.n	800450a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80044de:	2301      	movs	r3, #1
 80044e0:	e09a      	b.n	8004618 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d107      	bne.n	80044fa <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80044ea:	4b4e      	ldr	r3, [pc, #312]	@ (8004624 <HAL_RCC_ClockConfig+0x1f0>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f003 0302 	and.w	r3, r3, #2
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d109      	bne.n	800450a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	e08e      	b.n	8004618 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80044fa:	4b4a      	ldr	r3, [pc, #296]	@ (8004624 <HAL_RCC_ClockConfig+0x1f0>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004502:	2b00      	cmp	r3, #0
 8004504:	d101      	bne.n	800450a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004506:	2301      	movs	r3, #1
 8004508:	e086      	b.n	8004618 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800450a:	4b46      	ldr	r3, [pc, #280]	@ (8004624 <HAL_RCC_ClockConfig+0x1f0>)
 800450c:	689b      	ldr	r3, [r3, #8]
 800450e:	f023 0203 	bic.w	r2, r3, #3
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	4943      	ldr	r1, [pc, #268]	@ (8004624 <HAL_RCC_ClockConfig+0x1f0>)
 8004518:	4313      	orrs	r3, r2
 800451a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800451c:	f7fe fbc6 	bl	8002cac <HAL_GetTick>
 8004520:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004522:	e00a      	b.n	800453a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004524:	f7fe fbc2 	bl	8002cac <HAL_GetTick>
 8004528:	4602      	mov	r2, r0
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	1ad3      	subs	r3, r2, r3
 800452e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004532:	4293      	cmp	r3, r2
 8004534:	d901      	bls.n	800453a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004536:	2303      	movs	r3, #3
 8004538:	e06e      	b.n	8004618 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800453a:	4b3a      	ldr	r3, [pc, #232]	@ (8004624 <HAL_RCC_ClockConfig+0x1f0>)
 800453c:	689b      	ldr	r3, [r3, #8]
 800453e:	f003 020c 	and.w	r2, r3, #12
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	009b      	lsls	r3, r3, #2
 8004548:	429a      	cmp	r2, r3
 800454a:	d1eb      	bne.n	8004524 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f003 0302 	and.w	r3, r3, #2
 8004554:	2b00      	cmp	r3, #0
 8004556:	d010      	beq.n	800457a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	689a      	ldr	r2, [r3, #8]
 800455c:	4b31      	ldr	r3, [pc, #196]	@ (8004624 <HAL_RCC_ClockConfig+0x1f0>)
 800455e:	689b      	ldr	r3, [r3, #8]
 8004560:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004564:	429a      	cmp	r2, r3
 8004566:	d208      	bcs.n	800457a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004568:	4b2e      	ldr	r3, [pc, #184]	@ (8004624 <HAL_RCC_ClockConfig+0x1f0>)
 800456a:	689b      	ldr	r3, [r3, #8]
 800456c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	689b      	ldr	r3, [r3, #8]
 8004574:	492b      	ldr	r1, [pc, #172]	@ (8004624 <HAL_RCC_ClockConfig+0x1f0>)
 8004576:	4313      	orrs	r3, r2
 8004578:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800457a:	4b29      	ldr	r3, [pc, #164]	@ (8004620 <HAL_RCC_ClockConfig+0x1ec>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f003 0307 	and.w	r3, r3, #7
 8004582:	683a      	ldr	r2, [r7, #0]
 8004584:	429a      	cmp	r2, r3
 8004586:	d210      	bcs.n	80045aa <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004588:	4b25      	ldr	r3, [pc, #148]	@ (8004620 <HAL_RCC_ClockConfig+0x1ec>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f023 0207 	bic.w	r2, r3, #7
 8004590:	4923      	ldr	r1, [pc, #140]	@ (8004620 <HAL_RCC_ClockConfig+0x1ec>)
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	4313      	orrs	r3, r2
 8004596:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004598:	4b21      	ldr	r3, [pc, #132]	@ (8004620 <HAL_RCC_ClockConfig+0x1ec>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f003 0307 	and.w	r3, r3, #7
 80045a0:	683a      	ldr	r2, [r7, #0]
 80045a2:	429a      	cmp	r2, r3
 80045a4:	d001      	beq.n	80045aa <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80045a6:	2301      	movs	r3, #1
 80045a8:	e036      	b.n	8004618 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f003 0304 	and.w	r3, r3, #4
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d008      	beq.n	80045c8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80045b6:	4b1b      	ldr	r3, [pc, #108]	@ (8004624 <HAL_RCC_ClockConfig+0x1f0>)
 80045b8:	689b      	ldr	r3, [r3, #8]
 80045ba:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	68db      	ldr	r3, [r3, #12]
 80045c2:	4918      	ldr	r1, [pc, #96]	@ (8004624 <HAL_RCC_ClockConfig+0x1f0>)
 80045c4:	4313      	orrs	r3, r2
 80045c6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f003 0308 	and.w	r3, r3, #8
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d009      	beq.n	80045e8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80045d4:	4b13      	ldr	r3, [pc, #76]	@ (8004624 <HAL_RCC_ClockConfig+0x1f0>)
 80045d6:	689b      	ldr	r3, [r3, #8]
 80045d8:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	691b      	ldr	r3, [r3, #16]
 80045e0:	00db      	lsls	r3, r3, #3
 80045e2:	4910      	ldr	r1, [pc, #64]	@ (8004624 <HAL_RCC_ClockConfig+0x1f0>)
 80045e4:	4313      	orrs	r3, r2
 80045e6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80045e8:	f000 f824 	bl	8004634 <HAL_RCC_GetSysClockFreq>
 80045ec:	4602      	mov	r2, r0
 80045ee:	4b0d      	ldr	r3, [pc, #52]	@ (8004624 <HAL_RCC_ClockConfig+0x1f0>)
 80045f0:	689b      	ldr	r3, [r3, #8]
 80045f2:	091b      	lsrs	r3, r3, #4
 80045f4:	f003 030f 	and.w	r3, r3, #15
 80045f8:	490b      	ldr	r1, [pc, #44]	@ (8004628 <HAL_RCC_ClockConfig+0x1f4>)
 80045fa:	5ccb      	ldrb	r3, [r1, r3]
 80045fc:	f003 031f 	and.w	r3, r3, #31
 8004600:	fa22 f303 	lsr.w	r3, r2, r3
 8004604:	4a09      	ldr	r2, [pc, #36]	@ (800462c <HAL_RCC_ClockConfig+0x1f8>)
 8004606:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004608:	4b09      	ldr	r3, [pc, #36]	@ (8004630 <HAL_RCC_ClockConfig+0x1fc>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4618      	mov	r0, r3
 800460e:	f7fe f955 	bl	80028bc <HAL_InitTick>
 8004612:	4603      	mov	r3, r0
 8004614:	72fb      	strb	r3, [r7, #11]

  return status;
 8004616:	7afb      	ldrb	r3, [r7, #11]
}
 8004618:	4618      	mov	r0, r3
 800461a:	3710      	adds	r7, #16
 800461c:	46bd      	mov	sp, r7
 800461e:	bd80      	pop	{r7, pc}
 8004620:	40022000 	.word	0x40022000
 8004624:	40021000 	.word	0x40021000
 8004628:	08011edc 	.word	0x08011edc
 800462c:	2000000c 	.word	0x2000000c
 8004630:	20000010 	.word	0x20000010

08004634 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004634:	b480      	push	{r7}
 8004636:	b089      	sub	sp, #36	@ 0x24
 8004638:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800463a:	2300      	movs	r3, #0
 800463c:	61fb      	str	r3, [r7, #28]
 800463e:	2300      	movs	r3, #0
 8004640:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004642:	4b3e      	ldr	r3, [pc, #248]	@ (800473c <HAL_RCC_GetSysClockFreq+0x108>)
 8004644:	689b      	ldr	r3, [r3, #8]
 8004646:	f003 030c 	and.w	r3, r3, #12
 800464a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800464c:	4b3b      	ldr	r3, [pc, #236]	@ (800473c <HAL_RCC_GetSysClockFreq+0x108>)
 800464e:	68db      	ldr	r3, [r3, #12]
 8004650:	f003 0303 	and.w	r3, r3, #3
 8004654:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004656:	693b      	ldr	r3, [r7, #16]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d005      	beq.n	8004668 <HAL_RCC_GetSysClockFreq+0x34>
 800465c:	693b      	ldr	r3, [r7, #16]
 800465e:	2b0c      	cmp	r3, #12
 8004660:	d121      	bne.n	80046a6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	2b01      	cmp	r3, #1
 8004666:	d11e      	bne.n	80046a6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004668:	4b34      	ldr	r3, [pc, #208]	@ (800473c <HAL_RCC_GetSysClockFreq+0x108>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f003 0308 	and.w	r3, r3, #8
 8004670:	2b00      	cmp	r3, #0
 8004672:	d107      	bne.n	8004684 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004674:	4b31      	ldr	r3, [pc, #196]	@ (800473c <HAL_RCC_GetSysClockFreq+0x108>)
 8004676:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800467a:	0a1b      	lsrs	r3, r3, #8
 800467c:	f003 030f 	and.w	r3, r3, #15
 8004680:	61fb      	str	r3, [r7, #28]
 8004682:	e005      	b.n	8004690 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004684:	4b2d      	ldr	r3, [pc, #180]	@ (800473c <HAL_RCC_GetSysClockFreq+0x108>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	091b      	lsrs	r3, r3, #4
 800468a:	f003 030f 	and.w	r3, r3, #15
 800468e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004690:	4a2b      	ldr	r2, [pc, #172]	@ (8004740 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004692:	69fb      	ldr	r3, [r7, #28]
 8004694:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004698:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800469a:	693b      	ldr	r3, [r7, #16]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d10d      	bne.n	80046bc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80046a0:	69fb      	ldr	r3, [r7, #28]
 80046a2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80046a4:	e00a      	b.n	80046bc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80046a6:	693b      	ldr	r3, [r7, #16]
 80046a8:	2b04      	cmp	r3, #4
 80046aa:	d102      	bne.n	80046b2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80046ac:	4b25      	ldr	r3, [pc, #148]	@ (8004744 <HAL_RCC_GetSysClockFreq+0x110>)
 80046ae:	61bb      	str	r3, [r7, #24]
 80046b0:	e004      	b.n	80046bc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	2b08      	cmp	r3, #8
 80046b6:	d101      	bne.n	80046bc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80046b8:	4b23      	ldr	r3, [pc, #140]	@ (8004748 <HAL_RCC_GetSysClockFreq+0x114>)
 80046ba:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80046bc:	693b      	ldr	r3, [r7, #16]
 80046be:	2b0c      	cmp	r3, #12
 80046c0:	d134      	bne.n	800472c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80046c2:	4b1e      	ldr	r3, [pc, #120]	@ (800473c <HAL_RCC_GetSysClockFreq+0x108>)
 80046c4:	68db      	ldr	r3, [r3, #12]
 80046c6:	f003 0303 	and.w	r3, r3, #3
 80046ca:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	2b02      	cmp	r3, #2
 80046d0:	d003      	beq.n	80046da <HAL_RCC_GetSysClockFreq+0xa6>
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	2b03      	cmp	r3, #3
 80046d6:	d003      	beq.n	80046e0 <HAL_RCC_GetSysClockFreq+0xac>
 80046d8:	e005      	b.n	80046e6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80046da:	4b1a      	ldr	r3, [pc, #104]	@ (8004744 <HAL_RCC_GetSysClockFreq+0x110>)
 80046dc:	617b      	str	r3, [r7, #20]
      break;
 80046de:	e005      	b.n	80046ec <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80046e0:	4b19      	ldr	r3, [pc, #100]	@ (8004748 <HAL_RCC_GetSysClockFreq+0x114>)
 80046e2:	617b      	str	r3, [r7, #20]
      break;
 80046e4:	e002      	b.n	80046ec <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80046e6:	69fb      	ldr	r3, [r7, #28]
 80046e8:	617b      	str	r3, [r7, #20]
      break;
 80046ea:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80046ec:	4b13      	ldr	r3, [pc, #76]	@ (800473c <HAL_RCC_GetSysClockFreq+0x108>)
 80046ee:	68db      	ldr	r3, [r3, #12]
 80046f0:	091b      	lsrs	r3, r3, #4
 80046f2:	f003 0307 	and.w	r3, r3, #7
 80046f6:	3301      	adds	r3, #1
 80046f8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80046fa:	4b10      	ldr	r3, [pc, #64]	@ (800473c <HAL_RCC_GetSysClockFreq+0x108>)
 80046fc:	68db      	ldr	r3, [r3, #12]
 80046fe:	0a1b      	lsrs	r3, r3, #8
 8004700:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004704:	697a      	ldr	r2, [r7, #20]
 8004706:	fb03 f202 	mul.w	r2, r3, r2
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004710:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004712:	4b0a      	ldr	r3, [pc, #40]	@ (800473c <HAL_RCC_GetSysClockFreq+0x108>)
 8004714:	68db      	ldr	r3, [r3, #12]
 8004716:	0e5b      	lsrs	r3, r3, #25
 8004718:	f003 0303 	and.w	r3, r3, #3
 800471c:	3301      	adds	r3, #1
 800471e:	005b      	lsls	r3, r3, #1
 8004720:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004722:	697a      	ldr	r2, [r7, #20]
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	fbb2 f3f3 	udiv	r3, r2, r3
 800472a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800472c:	69bb      	ldr	r3, [r7, #24]
}
 800472e:	4618      	mov	r0, r3
 8004730:	3724      	adds	r7, #36	@ 0x24
 8004732:	46bd      	mov	sp, r7
 8004734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004738:	4770      	bx	lr
 800473a:	bf00      	nop
 800473c:	40021000 	.word	0x40021000
 8004740:	08011ef4 	.word	0x08011ef4
 8004744:	00f42400 	.word	0x00f42400
 8004748:	007a1200 	.word	0x007a1200

0800474c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800474c:	b480      	push	{r7}
 800474e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004750:	4b03      	ldr	r3, [pc, #12]	@ (8004760 <HAL_RCC_GetHCLKFreq+0x14>)
 8004752:	681b      	ldr	r3, [r3, #0]
}
 8004754:	4618      	mov	r0, r3
 8004756:	46bd      	mov	sp, r7
 8004758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475c:	4770      	bx	lr
 800475e:	bf00      	nop
 8004760:	2000000c 	.word	0x2000000c

08004764 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004768:	f7ff fff0 	bl	800474c <HAL_RCC_GetHCLKFreq>
 800476c:	4602      	mov	r2, r0
 800476e:	4b06      	ldr	r3, [pc, #24]	@ (8004788 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004770:	689b      	ldr	r3, [r3, #8]
 8004772:	0a1b      	lsrs	r3, r3, #8
 8004774:	f003 0307 	and.w	r3, r3, #7
 8004778:	4904      	ldr	r1, [pc, #16]	@ (800478c <HAL_RCC_GetPCLK1Freq+0x28>)
 800477a:	5ccb      	ldrb	r3, [r1, r3]
 800477c:	f003 031f 	and.w	r3, r3, #31
 8004780:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004784:	4618      	mov	r0, r3
 8004786:	bd80      	pop	{r7, pc}
 8004788:	40021000 	.word	0x40021000
 800478c:	08011eec 	.word	0x08011eec

08004790 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004794:	f7ff ffda 	bl	800474c <HAL_RCC_GetHCLKFreq>
 8004798:	4602      	mov	r2, r0
 800479a:	4b06      	ldr	r3, [pc, #24]	@ (80047b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800479c:	689b      	ldr	r3, [r3, #8]
 800479e:	0adb      	lsrs	r3, r3, #11
 80047a0:	f003 0307 	and.w	r3, r3, #7
 80047a4:	4904      	ldr	r1, [pc, #16]	@ (80047b8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80047a6:	5ccb      	ldrb	r3, [r1, r3]
 80047a8:	f003 031f 	and.w	r3, r3, #31
 80047ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047b0:	4618      	mov	r0, r3
 80047b2:	bd80      	pop	{r7, pc}
 80047b4:	40021000 	.word	0x40021000
 80047b8:	08011eec 	.word	0x08011eec

080047bc <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80047bc:	b480      	push	{r7}
 80047be:	b083      	sub	sp, #12
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
 80047c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	220f      	movs	r2, #15
 80047ca:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80047cc:	4b12      	ldr	r3, [pc, #72]	@ (8004818 <HAL_RCC_GetClockConfig+0x5c>)
 80047ce:	689b      	ldr	r3, [r3, #8]
 80047d0:	f003 0203 	and.w	r2, r3, #3
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80047d8:	4b0f      	ldr	r3, [pc, #60]	@ (8004818 <HAL_RCC_GetClockConfig+0x5c>)
 80047da:	689b      	ldr	r3, [r3, #8]
 80047dc:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80047e4:	4b0c      	ldr	r3, [pc, #48]	@ (8004818 <HAL_RCC_GetClockConfig+0x5c>)
 80047e6:	689b      	ldr	r3, [r3, #8]
 80047e8:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80047f0:	4b09      	ldr	r3, [pc, #36]	@ (8004818 <HAL_RCC_GetClockConfig+0x5c>)
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	08db      	lsrs	r3, r3, #3
 80047f6:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80047fe:	4b07      	ldr	r3, [pc, #28]	@ (800481c <HAL_RCC_GetClockConfig+0x60>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f003 0207 	and.w	r2, r3, #7
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	601a      	str	r2, [r3, #0]
}
 800480a:	bf00      	nop
 800480c:	370c      	adds	r7, #12
 800480e:	46bd      	mov	sp, r7
 8004810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004814:	4770      	bx	lr
 8004816:	bf00      	nop
 8004818:	40021000 	.word	0x40021000
 800481c:	40022000 	.word	0x40022000

08004820 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b086      	sub	sp, #24
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004828:	2300      	movs	r3, #0
 800482a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800482c:	4b2a      	ldr	r3, [pc, #168]	@ (80048d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800482e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004830:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004834:	2b00      	cmp	r3, #0
 8004836:	d003      	beq.n	8004840 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004838:	f7ff f9bc 	bl	8003bb4 <HAL_PWREx_GetVoltageRange>
 800483c:	6178      	str	r0, [r7, #20]
 800483e:	e014      	b.n	800486a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004840:	4b25      	ldr	r3, [pc, #148]	@ (80048d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004842:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004844:	4a24      	ldr	r2, [pc, #144]	@ (80048d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004846:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800484a:	6593      	str	r3, [r2, #88]	@ 0x58
 800484c:	4b22      	ldr	r3, [pc, #136]	@ (80048d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800484e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004850:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004854:	60fb      	str	r3, [r7, #12]
 8004856:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004858:	f7ff f9ac 	bl	8003bb4 <HAL_PWREx_GetVoltageRange>
 800485c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800485e:	4b1e      	ldr	r3, [pc, #120]	@ (80048d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004860:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004862:	4a1d      	ldr	r2, [pc, #116]	@ (80048d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004864:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004868:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800486a:	697b      	ldr	r3, [r7, #20]
 800486c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004870:	d10b      	bne.n	800488a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2b80      	cmp	r3, #128	@ 0x80
 8004876:	d919      	bls.n	80048ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2ba0      	cmp	r3, #160	@ 0xa0
 800487c:	d902      	bls.n	8004884 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800487e:	2302      	movs	r3, #2
 8004880:	613b      	str	r3, [r7, #16]
 8004882:	e013      	b.n	80048ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004884:	2301      	movs	r3, #1
 8004886:	613b      	str	r3, [r7, #16]
 8004888:	e010      	b.n	80048ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2b80      	cmp	r3, #128	@ 0x80
 800488e:	d902      	bls.n	8004896 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004890:	2303      	movs	r3, #3
 8004892:	613b      	str	r3, [r7, #16]
 8004894:	e00a      	b.n	80048ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2b80      	cmp	r3, #128	@ 0x80
 800489a:	d102      	bne.n	80048a2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800489c:	2302      	movs	r3, #2
 800489e:	613b      	str	r3, [r7, #16]
 80048a0:	e004      	b.n	80048ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2b70      	cmp	r3, #112	@ 0x70
 80048a6:	d101      	bne.n	80048ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80048a8:	2301      	movs	r3, #1
 80048aa:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80048ac:	4b0b      	ldr	r3, [pc, #44]	@ (80048dc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f023 0207 	bic.w	r2, r3, #7
 80048b4:	4909      	ldr	r1, [pc, #36]	@ (80048dc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80048b6:	693b      	ldr	r3, [r7, #16]
 80048b8:	4313      	orrs	r3, r2
 80048ba:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80048bc:	4b07      	ldr	r3, [pc, #28]	@ (80048dc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f003 0307 	and.w	r3, r3, #7
 80048c4:	693a      	ldr	r2, [r7, #16]
 80048c6:	429a      	cmp	r2, r3
 80048c8:	d001      	beq.n	80048ce <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80048ca:	2301      	movs	r3, #1
 80048cc:	e000      	b.n	80048d0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80048ce:	2300      	movs	r3, #0
}
 80048d0:	4618      	mov	r0, r3
 80048d2:	3718      	adds	r7, #24
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bd80      	pop	{r7, pc}
 80048d8:	40021000 	.word	0x40021000
 80048dc:	40022000 	.word	0x40022000

080048e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b086      	sub	sp, #24
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80048e8:	2300      	movs	r3, #0
 80048ea:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80048ec:	2300      	movs	r3, #0
 80048ee:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d041      	beq.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004900:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004904:	d02a      	beq.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004906:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800490a:	d824      	bhi.n	8004956 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800490c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004910:	d008      	beq.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004912:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004916:	d81e      	bhi.n	8004956 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004918:	2b00      	cmp	r3, #0
 800491a:	d00a      	beq.n	8004932 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800491c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004920:	d010      	beq.n	8004944 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004922:	e018      	b.n	8004956 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004924:	4b86      	ldr	r3, [pc, #536]	@ (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004926:	68db      	ldr	r3, [r3, #12]
 8004928:	4a85      	ldr	r2, [pc, #532]	@ (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800492a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800492e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004930:	e015      	b.n	800495e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	3304      	adds	r3, #4
 8004936:	2100      	movs	r1, #0
 8004938:	4618      	mov	r0, r3
 800493a:	f000 fabb 	bl	8004eb4 <RCCEx_PLLSAI1_Config>
 800493e:	4603      	mov	r3, r0
 8004940:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004942:	e00c      	b.n	800495e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	3320      	adds	r3, #32
 8004948:	2100      	movs	r1, #0
 800494a:	4618      	mov	r0, r3
 800494c:	f000 fba6 	bl	800509c <RCCEx_PLLSAI2_Config>
 8004950:	4603      	mov	r3, r0
 8004952:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004954:	e003      	b.n	800495e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004956:	2301      	movs	r3, #1
 8004958:	74fb      	strb	r3, [r7, #19]
      break;
 800495a:	e000      	b.n	800495e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800495c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800495e:	7cfb      	ldrb	r3, [r7, #19]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d10b      	bne.n	800497c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004964:	4b76      	ldr	r3, [pc, #472]	@ (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004966:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800496a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004972:	4973      	ldr	r1, [pc, #460]	@ (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004974:	4313      	orrs	r3, r2
 8004976:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800497a:	e001      	b.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800497c:	7cfb      	ldrb	r3, [r7, #19]
 800497e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004988:	2b00      	cmp	r3, #0
 800498a:	d041      	beq.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004990:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004994:	d02a      	beq.n	80049ec <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004996:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800499a:	d824      	bhi.n	80049e6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800499c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80049a0:	d008      	beq.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80049a2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80049a6:	d81e      	bhi.n	80049e6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d00a      	beq.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80049ac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80049b0:	d010      	beq.n	80049d4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80049b2:	e018      	b.n	80049e6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80049b4:	4b62      	ldr	r3, [pc, #392]	@ (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049b6:	68db      	ldr	r3, [r3, #12]
 80049b8:	4a61      	ldr	r2, [pc, #388]	@ (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80049be:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80049c0:	e015      	b.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	3304      	adds	r3, #4
 80049c6:	2100      	movs	r1, #0
 80049c8:	4618      	mov	r0, r3
 80049ca:	f000 fa73 	bl	8004eb4 <RCCEx_PLLSAI1_Config>
 80049ce:	4603      	mov	r3, r0
 80049d0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80049d2:	e00c      	b.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	3320      	adds	r3, #32
 80049d8:	2100      	movs	r1, #0
 80049da:	4618      	mov	r0, r3
 80049dc:	f000 fb5e 	bl	800509c <RCCEx_PLLSAI2_Config>
 80049e0:	4603      	mov	r3, r0
 80049e2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80049e4:	e003      	b.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80049e6:	2301      	movs	r3, #1
 80049e8:	74fb      	strb	r3, [r7, #19]
      break;
 80049ea:	e000      	b.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80049ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80049ee:	7cfb      	ldrb	r3, [r7, #19]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d10b      	bne.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80049f4:	4b52      	ldr	r3, [pc, #328]	@ (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049fa:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004a02:	494f      	ldr	r1, [pc, #316]	@ (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a04:	4313      	orrs	r3, r2
 8004a06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004a0a:	e001      	b.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a0c:	7cfb      	ldrb	r3, [r7, #19]
 8004a0e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	f000 80a0 	beq.w	8004b5e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a1e:	2300      	movs	r3, #0
 8004a20:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004a22:	4b47      	ldr	r3, [pc, #284]	@ (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d101      	bne.n	8004a32 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004a2e:	2301      	movs	r3, #1
 8004a30:	e000      	b.n	8004a34 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004a32:	2300      	movs	r3, #0
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d00d      	beq.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a38:	4b41      	ldr	r3, [pc, #260]	@ (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a3c:	4a40      	ldr	r2, [pc, #256]	@ (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a3e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004a42:	6593      	str	r3, [r2, #88]	@ 0x58
 8004a44:	4b3e      	ldr	r3, [pc, #248]	@ (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a48:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a4c:	60bb      	str	r3, [r7, #8]
 8004a4e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a50:	2301      	movs	r3, #1
 8004a52:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004a54:	4b3b      	ldr	r3, [pc, #236]	@ (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4a3a      	ldr	r2, [pc, #232]	@ (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004a5a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a5e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004a60:	f7fe f924 	bl	8002cac <HAL_GetTick>
 8004a64:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004a66:	e009      	b.n	8004a7c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a68:	f7fe f920 	bl	8002cac <HAL_GetTick>
 8004a6c:	4602      	mov	r2, r0
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	1ad3      	subs	r3, r2, r3
 8004a72:	2b02      	cmp	r3, #2
 8004a74:	d902      	bls.n	8004a7c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004a76:	2303      	movs	r3, #3
 8004a78:	74fb      	strb	r3, [r7, #19]
        break;
 8004a7a:	e005      	b.n	8004a88 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004a7c:	4b31      	ldr	r3, [pc, #196]	@ (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d0ef      	beq.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004a88:	7cfb      	ldrb	r3, [r7, #19]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d15c      	bne.n	8004b48 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004a8e:	4b2c      	ldr	r3, [pc, #176]	@ (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a94:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004a98:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d01f      	beq.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004aa6:	697a      	ldr	r2, [r7, #20]
 8004aa8:	429a      	cmp	r2, r3
 8004aaa:	d019      	beq.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004aac:	4b24      	ldr	r3, [pc, #144]	@ (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004aae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ab2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ab6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004ab8:	4b21      	ldr	r3, [pc, #132]	@ (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004aba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004abe:	4a20      	ldr	r2, [pc, #128]	@ (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ac0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ac4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004ac8:	4b1d      	ldr	r3, [pc, #116]	@ (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004aca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ace:	4a1c      	ldr	r2, [pc, #112]	@ (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ad0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004ad4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004ad8:	4a19      	ldr	r2, [pc, #100]	@ (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ada:	697b      	ldr	r3, [r7, #20]
 8004adc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004ae0:	697b      	ldr	r3, [r7, #20]
 8004ae2:	f003 0301 	and.w	r3, r3, #1
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d016      	beq.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004aea:	f7fe f8df 	bl	8002cac <HAL_GetTick>
 8004aee:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004af0:	e00b      	b.n	8004b0a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004af2:	f7fe f8db 	bl	8002cac <HAL_GetTick>
 8004af6:	4602      	mov	r2, r0
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	1ad3      	subs	r3, r2, r3
 8004afc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d902      	bls.n	8004b0a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004b04:	2303      	movs	r3, #3
 8004b06:	74fb      	strb	r3, [r7, #19]
            break;
 8004b08:	e006      	b.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b0a:	4b0d      	ldr	r3, [pc, #52]	@ (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b10:	f003 0302 	and.w	r3, r3, #2
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d0ec      	beq.n	8004af2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004b18:	7cfb      	ldrb	r3, [r7, #19]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d10c      	bne.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004b1e:	4b08      	ldr	r3, [pc, #32]	@ (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b24:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004b2e:	4904      	ldr	r1, [pc, #16]	@ (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b30:	4313      	orrs	r3, r2
 8004b32:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004b36:	e009      	b.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004b38:	7cfb      	ldrb	r3, [r7, #19]
 8004b3a:	74bb      	strb	r3, [r7, #18]
 8004b3c:	e006      	b.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004b3e:	bf00      	nop
 8004b40:	40021000 	.word	0x40021000
 8004b44:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b48:	7cfb      	ldrb	r3, [r7, #19]
 8004b4a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004b4c:	7c7b      	ldrb	r3, [r7, #17]
 8004b4e:	2b01      	cmp	r3, #1
 8004b50:	d105      	bne.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b52:	4b9e      	ldr	r3, [pc, #632]	@ (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b56:	4a9d      	ldr	r2, [pc, #628]	@ (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b58:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004b5c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f003 0301 	and.w	r3, r3, #1
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d00a      	beq.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004b6a:	4b98      	ldr	r3, [pc, #608]	@ (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b70:	f023 0203 	bic.w	r2, r3, #3
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b78:	4994      	ldr	r1, [pc, #592]	@ (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f003 0302 	and.w	r3, r3, #2
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d00a      	beq.n	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004b8c:	4b8f      	ldr	r3, [pc, #572]	@ (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b92:	f023 020c 	bic.w	r2, r3, #12
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b9a:	498c      	ldr	r1, [pc, #560]	@ (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b9c:	4313      	orrs	r3, r2
 8004b9e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f003 0304 	and.w	r3, r3, #4
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d00a      	beq.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004bae:	4b87      	ldr	r3, [pc, #540]	@ (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bb4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bbc:	4983      	ldr	r1, [pc, #524]	@ (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f003 0308 	and.w	r3, r3, #8
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d00a      	beq.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004bd0:	4b7e      	ldr	r3, [pc, #504]	@ (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bd6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bde:	497b      	ldr	r1, [pc, #492]	@ (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004be0:	4313      	orrs	r3, r2
 8004be2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f003 0310 	and.w	r3, r3, #16
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d00a      	beq.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004bf2:	4b76      	ldr	r3, [pc, #472]	@ (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bf8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c00:	4972      	ldr	r1, [pc, #456]	@ (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c02:	4313      	orrs	r3, r2
 8004c04:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f003 0320 	and.w	r3, r3, #32
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d00a      	beq.n	8004c2a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004c14:	4b6d      	ldr	r3, [pc, #436]	@ (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c1a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c22:	496a      	ldr	r1, [pc, #424]	@ (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c24:	4313      	orrs	r3, r2
 8004c26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d00a      	beq.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004c36:	4b65      	ldr	r3, [pc, #404]	@ (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c3c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c44:	4961      	ldr	r1, [pc, #388]	@ (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c46:	4313      	orrs	r3, r2
 8004c48:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d00a      	beq.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004c58:	4b5c      	ldr	r3, [pc, #368]	@ (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c5e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c66:	4959      	ldr	r1, [pc, #356]	@ (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d00a      	beq.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004c7a:	4b54      	ldr	r3, [pc, #336]	@ (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c80:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c88:	4950      	ldr	r1, [pc, #320]	@ (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d00a      	beq.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004c9c:	4b4b      	ldr	r3, [pc, #300]	@ (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ca2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004caa:	4948      	ldr	r1, [pc, #288]	@ (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cac:	4313      	orrs	r3, r2
 8004cae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d00a      	beq.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004cbe:	4b43      	ldr	r3, [pc, #268]	@ (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cc4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ccc:	493f      	ldr	r1, [pc, #252]	@ (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d028      	beq.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004ce0:	4b3a      	ldr	r3, [pc, #232]	@ (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ce2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ce6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004cee:	4937      	ldr	r1, [pc, #220]	@ (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004cfa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004cfe:	d106      	bne.n	8004d0e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d00:	4b32      	ldr	r3, [pc, #200]	@ (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d02:	68db      	ldr	r3, [r3, #12]
 8004d04:	4a31      	ldr	r2, [pc, #196]	@ (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d06:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004d0a:	60d3      	str	r3, [r2, #12]
 8004d0c:	e011      	b.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004d12:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004d16:	d10c      	bne.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	3304      	adds	r3, #4
 8004d1c:	2101      	movs	r1, #1
 8004d1e:	4618      	mov	r0, r3
 8004d20:	f000 f8c8 	bl	8004eb4 <RCCEx_PLLSAI1_Config>
 8004d24:	4603      	mov	r3, r0
 8004d26:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004d28:	7cfb      	ldrb	r3, [r7, #19]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d001      	beq.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004d2e:	7cfb      	ldrb	r3, [r7, #19]
 8004d30:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d028      	beq.n	8004d90 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004d3e:	4b23      	ldr	r3, [pc, #140]	@ (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d44:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d4c:	491f      	ldr	r1, [pc, #124]	@ (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d4e:	4313      	orrs	r3, r2
 8004d50:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d58:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004d5c:	d106      	bne.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d5e:	4b1b      	ldr	r3, [pc, #108]	@ (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d60:	68db      	ldr	r3, [r3, #12]
 8004d62:	4a1a      	ldr	r2, [pc, #104]	@ (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d64:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004d68:	60d3      	str	r3, [r2, #12]
 8004d6a:	e011      	b.n	8004d90 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d70:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004d74:	d10c      	bne.n	8004d90 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	3304      	adds	r3, #4
 8004d7a:	2101      	movs	r1, #1
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	f000 f899 	bl	8004eb4 <RCCEx_PLLSAI1_Config>
 8004d82:	4603      	mov	r3, r0
 8004d84:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004d86:	7cfb      	ldrb	r3, [r7, #19]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d001      	beq.n	8004d90 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004d8c:	7cfb      	ldrb	r3, [r7, #19]
 8004d8e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d02b      	beq.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004d9c:	4b0b      	ldr	r3, [pc, #44]	@ (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004da2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004daa:	4908      	ldr	r1, [pc, #32]	@ (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004dac:	4313      	orrs	r3, r2
 8004dae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004db6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004dba:	d109      	bne.n	8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004dbc:	4b03      	ldr	r3, [pc, #12]	@ (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004dbe:	68db      	ldr	r3, [r3, #12]
 8004dc0:	4a02      	ldr	r2, [pc, #8]	@ (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004dc2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004dc6:	60d3      	str	r3, [r2, #12]
 8004dc8:	e014      	b.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004dca:	bf00      	nop
 8004dcc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004dd4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004dd8:	d10c      	bne.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	3304      	adds	r3, #4
 8004dde:	2101      	movs	r1, #1
 8004de0:	4618      	mov	r0, r3
 8004de2:	f000 f867 	bl	8004eb4 <RCCEx_PLLSAI1_Config>
 8004de6:	4603      	mov	r3, r0
 8004de8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004dea:	7cfb      	ldrb	r3, [r7, #19]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d001      	beq.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004df0:	7cfb      	ldrb	r3, [r7, #19]
 8004df2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d02f      	beq.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004e00:	4b2b      	ldr	r3, [pc, #172]	@ (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004e02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e06:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004e0e:	4928      	ldr	r1, [pc, #160]	@ (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004e10:	4313      	orrs	r3, r2
 8004e12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004e1a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004e1e:	d10d      	bne.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	3304      	adds	r3, #4
 8004e24:	2102      	movs	r1, #2
 8004e26:	4618      	mov	r0, r3
 8004e28:	f000 f844 	bl	8004eb4 <RCCEx_PLLSAI1_Config>
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004e30:	7cfb      	ldrb	r3, [r7, #19]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d014      	beq.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004e36:	7cfb      	ldrb	r3, [r7, #19]
 8004e38:	74bb      	strb	r3, [r7, #18]
 8004e3a:	e011      	b.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004e40:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004e44:	d10c      	bne.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	3320      	adds	r3, #32
 8004e4a:	2102      	movs	r1, #2
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	f000 f925 	bl	800509c <RCCEx_PLLSAI2_Config>
 8004e52:	4603      	mov	r3, r0
 8004e54:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004e56:	7cfb      	ldrb	r3, [r7, #19]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d001      	beq.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004e5c:	7cfb      	ldrb	r3, [r7, #19]
 8004e5e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d00a      	beq.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004e6c:	4b10      	ldr	r3, [pc, #64]	@ (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004e6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e72:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004e7a:	490d      	ldr	r1, [pc, #52]	@ (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d00b      	beq.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004e8e:	4b08      	ldr	r3, [pc, #32]	@ (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004e90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e94:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004e9e:	4904      	ldr	r1, [pc, #16]	@ (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004ea0:	4313      	orrs	r3, r2
 8004ea2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004ea6:	7cbb      	ldrb	r3, [r7, #18]
}
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	3718      	adds	r7, #24
 8004eac:	46bd      	mov	sp, r7
 8004eae:	bd80      	pop	{r7, pc}
 8004eb0:	40021000 	.word	0x40021000

08004eb4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b084      	sub	sp, #16
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
 8004ebc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004ec2:	4b75      	ldr	r3, [pc, #468]	@ (8005098 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ec4:	68db      	ldr	r3, [r3, #12]
 8004ec6:	f003 0303 	and.w	r3, r3, #3
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d018      	beq.n	8004f00 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004ece:	4b72      	ldr	r3, [pc, #456]	@ (8005098 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ed0:	68db      	ldr	r3, [r3, #12]
 8004ed2:	f003 0203 	and.w	r2, r3, #3
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	429a      	cmp	r2, r3
 8004edc:	d10d      	bne.n	8004efa <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
       ||
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d009      	beq.n	8004efa <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004ee6:	4b6c      	ldr	r3, [pc, #432]	@ (8005098 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ee8:	68db      	ldr	r3, [r3, #12]
 8004eea:	091b      	lsrs	r3, r3, #4
 8004eec:	f003 0307 	and.w	r3, r3, #7
 8004ef0:	1c5a      	adds	r2, r3, #1
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	685b      	ldr	r3, [r3, #4]
       ||
 8004ef6:	429a      	cmp	r2, r3
 8004ef8:	d047      	beq.n	8004f8a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004efa:	2301      	movs	r3, #1
 8004efc:	73fb      	strb	r3, [r7, #15]
 8004efe:	e044      	b.n	8004f8a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	2b03      	cmp	r3, #3
 8004f06:	d018      	beq.n	8004f3a <RCCEx_PLLSAI1_Config+0x86>
 8004f08:	2b03      	cmp	r3, #3
 8004f0a:	d825      	bhi.n	8004f58 <RCCEx_PLLSAI1_Config+0xa4>
 8004f0c:	2b01      	cmp	r3, #1
 8004f0e:	d002      	beq.n	8004f16 <RCCEx_PLLSAI1_Config+0x62>
 8004f10:	2b02      	cmp	r3, #2
 8004f12:	d009      	beq.n	8004f28 <RCCEx_PLLSAI1_Config+0x74>
 8004f14:	e020      	b.n	8004f58 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004f16:	4b60      	ldr	r3, [pc, #384]	@ (8005098 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f003 0302 	and.w	r3, r3, #2
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d11d      	bne.n	8004f5e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004f22:	2301      	movs	r3, #1
 8004f24:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f26:	e01a      	b.n	8004f5e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004f28:	4b5b      	ldr	r3, [pc, #364]	@ (8005098 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d116      	bne.n	8004f62 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004f34:	2301      	movs	r3, #1
 8004f36:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f38:	e013      	b.n	8004f62 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004f3a:	4b57      	ldr	r3, [pc, #348]	@ (8005098 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d10f      	bne.n	8004f66 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004f46:	4b54      	ldr	r3, [pc, #336]	@ (8005098 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d109      	bne.n	8004f66 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004f52:	2301      	movs	r3, #1
 8004f54:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004f56:	e006      	b.n	8004f66 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004f58:	2301      	movs	r3, #1
 8004f5a:	73fb      	strb	r3, [r7, #15]
      break;
 8004f5c:	e004      	b.n	8004f68 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004f5e:	bf00      	nop
 8004f60:	e002      	b.n	8004f68 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004f62:	bf00      	nop
 8004f64:	e000      	b.n	8004f68 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004f66:	bf00      	nop
    }

    if(status == HAL_OK)
 8004f68:	7bfb      	ldrb	r3, [r7, #15]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d10d      	bne.n	8004f8a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004f6e:	4b4a      	ldr	r3, [pc, #296]	@ (8005098 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f70:	68db      	ldr	r3, [r3, #12]
 8004f72:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6819      	ldr	r1, [r3, #0]
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	685b      	ldr	r3, [r3, #4]
 8004f7e:	3b01      	subs	r3, #1
 8004f80:	011b      	lsls	r3, r3, #4
 8004f82:	430b      	orrs	r3, r1
 8004f84:	4944      	ldr	r1, [pc, #272]	@ (8005098 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f86:	4313      	orrs	r3, r2
 8004f88:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004f8a:	7bfb      	ldrb	r3, [r7, #15]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d17d      	bne.n	800508c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004f90:	4b41      	ldr	r3, [pc, #260]	@ (8005098 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4a40      	ldr	r2, [pc, #256]	@ (8005098 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f96:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004f9a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f9c:	f7fd fe86 	bl	8002cac <HAL_GetTick>
 8004fa0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004fa2:	e009      	b.n	8004fb8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004fa4:	f7fd fe82 	bl	8002cac <HAL_GetTick>
 8004fa8:	4602      	mov	r2, r0
 8004faa:	68bb      	ldr	r3, [r7, #8]
 8004fac:	1ad3      	subs	r3, r2, r3
 8004fae:	2b02      	cmp	r3, #2
 8004fb0:	d902      	bls.n	8004fb8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004fb2:	2303      	movs	r3, #3
 8004fb4:	73fb      	strb	r3, [r7, #15]
        break;
 8004fb6:	e005      	b.n	8004fc4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004fb8:	4b37      	ldr	r3, [pc, #220]	@ (8005098 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d1ef      	bne.n	8004fa4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004fc4:	7bfb      	ldrb	r3, [r7, #15]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d160      	bne.n	800508c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d111      	bne.n	8004ff4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004fd0:	4b31      	ldr	r3, [pc, #196]	@ (8005098 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fd2:	691b      	ldr	r3, [r3, #16]
 8004fd4:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004fd8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004fdc:	687a      	ldr	r2, [r7, #4]
 8004fde:	6892      	ldr	r2, [r2, #8]
 8004fe0:	0211      	lsls	r1, r2, #8
 8004fe2:	687a      	ldr	r2, [r7, #4]
 8004fe4:	68d2      	ldr	r2, [r2, #12]
 8004fe6:	0912      	lsrs	r2, r2, #4
 8004fe8:	0452      	lsls	r2, r2, #17
 8004fea:	430a      	orrs	r2, r1
 8004fec:	492a      	ldr	r1, [pc, #168]	@ (8005098 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fee:	4313      	orrs	r3, r2
 8004ff0:	610b      	str	r3, [r1, #16]
 8004ff2:	e027      	b.n	8005044 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	2b01      	cmp	r3, #1
 8004ff8:	d112      	bne.n	8005020 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004ffa:	4b27      	ldr	r3, [pc, #156]	@ (8005098 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ffc:	691b      	ldr	r3, [r3, #16]
 8004ffe:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8005002:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005006:	687a      	ldr	r2, [r7, #4]
 8005008:	6892      	ldr	r2, [r2, #8]
 800500a:	0211      	lsls	r1, r2, #8
 800500c:	687a      	ldr	r2, [r7, #4]
 800500e:	6912      	ldr	r2, [r2, #16]
 8005010:	0852      	lsrs	r2, r2, #1
 8005012:	3a01      	subs	r2, #1
 8005014:	0552      	lsls	r2, r2, #21
 8005016:	430a      	orrs	r2, r1
 8005018:	491f      	ldr	r1, [pc, #124]	@ (8005098 <RCCEx_PLLSAI1_Config+0x1e4>)
 800501a:	4313      	orrs	r3, r2
 800501c:	610b      	str	r3, [r1, #16]
 800501e:	e011      	b.n	8005044 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005020:	4b1d      	ldr	r3, [pc, #116]	@ (8005098 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005022:	691b      	ldr	r3, [r3, #16]
 8005024:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005028:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800502c:	687a      	ldr	r2, [r7, #4]
 800502e:	6892      	ldr	r2, [r2, #8]
 8005030:	0211      	lsls	r1, r2, #8
 8005032:	687a      	ldr	r2, [r7, #4]
 8005034:	6952      	ldr	r2, [r2, #20]
 8005036:	0852      	lsrs	r2, r2, #1
 8005038:	3a01      	subs	r2, #1
 800503a:	0652      	lsls	r2, r2, #25
 800503c:	430a      	orrs	r2, r1
 800503e:	4916      	ldr	r1, [pc, #88]	@ (8005098 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005040:	4313      	orrs	r3, r2
 8005042:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005044:	4b14      	ldr	r3, [pc, #80]	@ (8005098 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4a13      	ldr	r2, [pc, #76]	@ (8005098 <RCCEx_PLLSAI1_Config+0x1e4>)
 800504a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800504e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005050:	f7fd fe2c 	bl	8002cac <HAL_GetTick>
 8005054:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005056:	e009      	b.n	800506c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005058:	f7fd fe28 	bl	8002cac <HAL_GetTick>
 800505c:	4602      	mov	r2, r0
 800505e:	68bb      	ldr	r3, [r7, #8]
 8005060:	1ad3      	subs	r3, r2, r3
 8005062:	2b02      	cmp	r3, #2
 8005064:	d902      	bls.n	800506c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8005066:	2303      	movs	r3, #3
 8005068:	73fb      	strb	r3, [r7, #15]
          break;
 800506a:	e005      	b.n	8005078 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800506c:	4b0a      	ldr	r3, [pc, #40]	@ (8005098 <RCCEx_PLLSAI1_Config+0x1e4>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005074:	2b00      	cmp	r3, #0
 8005076:	d0ef      	beq.n	8005058 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005078:	7bfb      	ldrb	r3, [r7, #15]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d106      	bne.n	800508c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800507e:	4b06      	ldr	r3, [pc, #24]	@ (8005098 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005080:	691a      	ldr	r2, [r3, #16]
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	699b      	ldr	r3, [r3, #24]
 8005086:	4904      	ldr	r1, [pc, #16]	@ (8005098 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005088:	4313      	orrs	r3, r2
 800508a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800508c:	7bfb      	ldrb	r3, [r7, #15]
}
 800508e:	4618      	mov	r0, r3
 8005090:	3710      	adds	r7, #16
 8005092:	46bd      	mov	sp, r7
 8005094:	bd80      	pop	{r7, pc}
 8005096:	bf00      	nop
 8005098:	40021000 	.word	0x40021000

0800509c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b084      	sub	sp, #16
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
 80050a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80050a6:	2300      	movs	r3, #0
 80050a8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80050aa:	4b6a      	ldr	r3, [pc, #424]	@ (8005254 <RCCEx_PLLSAI2_Config+0x1b8>)
 80050ac:	68db      	ldr	r3, [r3, #12]
 80050ae:	f003 0303 	and.w	r3, r3, #3
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d018      	beq.n	80050e8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80050b6:	4b67      	ldr	r3, [pc, #412]	@ (8005254 <RCCEx_PLLSAI2_Config+0x1b8>)
 80050b8:	68db      	ldr	r3, [r3, #12]
 80050ba:	f003 0203 	and.w	r2, r3, #3
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	429a      	cmp	r2, r3
 80050c4:	d10d      	bne.n	80050e2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
       ||
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d009      	beq.n	80050e2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80050ce:	4b61      	ldr	r3, [pc, #388]	@ (8005254 <RCCEx_PLLSAI2_Config+0x1b8>)
 80050d0:	68db      	ldr	r3, [r3, #12]
 80050d2:	091b      	lsrs	r3, r3, #4
 80050d4:	f003 0307 	and.w	r3, r3, #7
 80050d8:	1c5a      	adds	r2, r3, #1
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	685b      	ldr	r3, [r3, #4]
       ||
 80050de:	429a      	cmp	r2, r3
 80050e0:	d047      	beq.n	8005172 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80050e2:	2301      	movs	r3, #1
 80050e4:	73fb      	strb	r3, [r7, #15]
 80050e6:	e044      	b.n	8005172 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	2b03      	cmp	r3, #3
 80050ee:	d018      	beq.n	8005122 <RCCEx_PLLSAI2_Config+0x86>
 80050f0:	2b03      	cmp	r3, #3
 80050f2:	d825      	bhi.n	8005140 <RCCEx_PLLSAI2_Config+0xa4>
 80050f4:	2b01      	cmp	r3, #1
 80050f6:	d002      	beq.n	80050fe <RCCEx_PLLSAI2_Config+0x62>
 80050f8:	2b02      	cmp	r3, #2
 80050fa:	d009      	beq.n	8005110 <RCCEx_PLLSAI2_Config+0x74>
 80050fc:	e020      	b.n	8005140 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80050fe:	4b55      	ldr	r3, [pc, #340]	@ (8005254 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f003 0302 	and.w	r3, r3, #2
 8005106:	2b00      	cmp	r3, #0
 8005108:	d11d      	bne.n	8005146 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800510a:	2301      	movs	r3, #1
 800510c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800510e:	e01a      	b.n	8005146 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005110:	4b50      	ldr	r3, [pc, #320]	@ (8005254 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005118:	2b00      	cmp	r3, #0
 800511a:	d116      	bne.n	800514a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800511c:	2301      	movs	r3, #1
 800511e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005120:	e013      	b.n	800514a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005122:	4b4c      	ldr	r3, [pc, #304]	@ (8005254 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800512a:	2b00      	cmp	r3, #0
 800512c:	d10f      	bne.n	800514e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800512e:	4b49      	ldr	r3, [pc, #292]	@ (8005254 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005136:	2b00      	cmp	r3, #0
 8005138:	d109      	bne.n	800514e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800513a:	2301      	movs	r3, #1
 800513c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800513e:	e006      	b.n	800514e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005140:	2301      	movs	r3, #1
 8005142:	73fb      	strb	r3, [r7, #15]
      break;
 8005144:	e004      	b.n	8005150 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005146:	bf00      	nop
 8005148:	e002      	b.n	8005150 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800514a:	bf00      	nop
 800514c:	e000      	b.n	8005150 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800514e:	bf00      	nop
    }

    if(status == HAL_OK)
 8005150:	7bfb      	ldrb	r3, [r7, #15]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d10d      	bne.n	8005172 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005156:	4b3f      	ldr	r3, [pc, #252]	@ (8005254 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005158:	68db      	ldr	r3, [r3, #12]
 800515a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6819      	ldr	r1, [r3, #0]
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	685b      	ldr	r3, [r3, #4]
 8005166:	3b01      	subs	r3, #1
 8005168:	011b      	lsls	r3, r3, #4
 800516a:	430b      	orrs	r3, r1
 800516c:	4939      	ldr	r1, [pc, #228]	@ (8005254 <RCCEx_PLLSAI2_Config+0x1b8>)
 800516e:	4313      	orrs	r3, r2
 8005170:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005172:	7bfb      	ldrb	r3, [r7, #15]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d167      	bne.n	8005248 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005178:	4b36      	ldr	r3, [pc, #216]	@ (8005254 <RCCEx_PLLSAI2_Config+0x1b8>)
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4a35      	ldr	r2, [pc, #212]	@ (8005254 <RCCEx_PLLSAI2_Config+0x1b8>)
 800517e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005182:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005184:	f7fd fd92 	bl	8002cac <HAL_GetTick>
 8005188:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800518a:	e009      	b.n	80051a0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800518c:	f7fd fd8e 	bl	8002cac <HAL_GetTick>
 8005190:	4602      	mov	r2, r0
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	1ad3      	subs	r3, r2, r3
 8005196:	2b02      	cmp	r3, #2
 8005198:	d902      	bls.n	80051a0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800519a:	2303      	movs	r3, #3
 800519c:	73fb      	strb	r3, [r7, #15]
        break;
 800519e:	e005      	b.n	80051ac <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80051a0:	4b2c      	ldr	r3, [pc, #176]	@ (8005254 <RCCEx_PLLSAI2_Config+0x1b8>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d1ef      	bne.n	800518c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80051ac:	7bfb      	ldrb	r3, [r7, #15]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d14a      	bne.n	8005248 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d111      	bne.n	80051dc <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80051b8:	4b26      	ldr	r3, [pc, #152]	@ (8005254 <RCCEx_PLLSAI2_Config+0x1b8>)
 80051ba:	695b      	ldr	r3, [r3, #20]
 80051bc:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80051c0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80051c4:	687a      	ldr	r2, [r7, #4]
 80051c6:	6892      	ldr	r2, [r2, #8]
 80051c8:	0211      	lsls	r1, r2, #8
 80051ca:	687a      	ldr	r2, [r7, #4]
 80051cc:	68d2      	ldr	r2, [r2, #12]
 80051ce:	0912      	lsrs	r2, r2, #4
 80051d0:	0452      	lsls	r2, r2, #17
 80051d2:	430a      	orrs	r2, r1
 80051d4:	491f      	ldr	r1, [pc, #124]	@ (8005254 <RCCEx_PLLSAI2_Config+0x1b8>)
 80051d6:	4313      	orrs	r3, r2
 80051d8:	614b      	str	r3, [r1, #20]
 80051da:	e011      	b.n	8005200 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80051dc:	4b1d      	ldr	r3, [pc, #116]	@ (8005254 <RCCEx_PLLSAI2_Config+0x1b8>)
 80051de:	695b      	ldr	r3, [r3, #20]
 80051e0:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80051e4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80051e8:	687a      	ldr	r2, [r7, #4]
 80051ea:	6892      	ldr	r2, [r2, #8]
 80051ec:	0211      	lsls	r1, r2, #8
 80051ee:	687a      	ldr	r2, [r7, #4]
 80051f0:	6912      	ldr	r2, [r2, #16]
 80051f2:	0852      	lsrs	r2, r2, #1
 80051f4:	3a01      	subs	r2, #1
 80051f6:	0652      	lsls	r2, r2, #25
 80051f8:	430a      	orrs	r2, r1
 80051fa:	4916      	ldr	r1, [pc, #88]	@ (8005254 <RCCEx_PLLSAI2_Config+0x1b8>)
 80051fc:	4313      	orrs	r3, r2
 80051fe:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005200:	4b14      	ldr	r3, [pc, #80]	@ (8005254 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4a13      	ldr	r2, [pc, #76]	@ (8005254 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005206:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800520a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800520c:	f7fd fd4e 	bl	8002cac <HAL_GetTick>
 8005210:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005212:	e009      	b.n	8005228 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005214:	f7fd fd4a 	bl	8002cac <HAL_GetTick>
 8005218:	4602      	mov	r2, r0
 800521a:	68bb      	ldr	r3, [r7, #8]
 800521c:	1ad3      	subs	r3, r2, r3
 800521e:	2b02      	cmp	r3, #2
 8005220:	d902      	bls.n	8005228 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8005222:	2303      	movs	r3, #3
 8005224:	73fb      	strb	r3, [r7, #15]
          break;
 8005226:	e005      	b.n	8005234 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005228:	4b0a      	ldr	r3, [pc, #40]	@ (8005254 <RCCEx_PLLSAI2_Config+0x1b8>)
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005230:	2b00      	cmp	r3, #0
 8005232:	d0ef      	beq.n	8005214 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005234:	7bfb      	ldrb	r3, [r7, #15]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d106      	bne.n	8005248 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800523a:	4b06      	ldr	r3, [pc, #24]	@ (8005254 <RCCEx_PLLSAI2_Config+0x1b8>)
 800523c:	695a      	ldr	r2, [r3, #20]
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	695b      	ldr	r3, [r3, #20]
 8005242:	4904      	ldr	r1, [pc, #16]	@ (8005254 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005244:	4313      	orrs	r3, r2
 8005246:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005248:	7bfb      	ldrb	r3, [r7, #15]
}
 800524a:	4618      	mov	r0, r3
 800524c:	3710      	adds	r7, #16
 800524e:	46bd      	mov	sp, r7
 8005250:	bd80      	pop	{r7, pc}
 8005252:	bf00      	nop
 8005254:	40021000 	.word	0x40021000

08005258 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b084      	sub	sp, #16
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d101      	bne.n	800526a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005266:	2301      	movs	r3, #1
 8005268:	e095      	b.n	8005396 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800526e:	2b00      	cmp	r3, #0
 8005270:	d108      	bne.n	8005284 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	685b      	ldr	r3, [r3, #4]
 8005276:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800527a:	d009      	beq.n	8005290 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2200      	movs	r2, #0
 8005280:	61da      	str	r2, [r3, #28]
 8005282:	e005      	b.n	8005290 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2200      	movs	r2, #0
 8005288:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2200      	movs	r2, #0
 800528e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2200      	movs	r2, #0
 8005294:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800529c:	b2db      	uxtb	r3, r3
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d106      	bne.n	80052b0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2200      	movs	r2, #0
 80052a6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80052aa:	6878      	ldr	r0, [r7, #4]
 80052ac:	f7fd f9d4 	bl	8002658 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2202      	movs	r2, #2
 80052b4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	681a      	ldr	r2, [r3, #0]
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80052c6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	68db      	ldr	r3, [r3, #12]
 80052cc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80052d0:	d902      	bls.n	80052d8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80052d2:	2300      	movs	r3, #0
 80052d4:	60fb      	str	r3, [r7, #12]
 80052d6:	e002      	b.n	80052de <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80052d8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80052dc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	68db      	ldr	r3, [r3, #12]
 80052e2:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80052e6:	d007      	beq.n	80052f8 <HAL_SPI_Init+0xa0>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	68db      	ldr	r3, [r3, #12]
 80052ec:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80052f0:	d002      	beq.n	80052f8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2200      	movs	r2, #0
 80052f6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	685b      	ldr	r3, [r3, #4]
 80052fc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	689b      	ldr	r3, [r3, #8]
 8005304:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005308:	431a      	orrs	r2, r3
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	691b      	ldr	r3, [r3, #16]
 800530e:	f003 0302 	and.w	r3, r3, #2
 8005312:	431a      	orrs	r2, r3
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	695b      	ldr	r3, [r3, #20]
 8005318:	f003 0301 	and.w	r3, r3, #1
 800531c:	431a      	orrs	r2, r3
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	699b      	ldr	r3, [r3, #24]
 8005322:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005326:	431a      	orrs	r2, r3
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	69db      	ldr	r3, [r3, #28]
 800532c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005330:	431a      	orrs	r2, r3
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6a1b      	ldr	r3, [r3, #32]
 8005336:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800533a:	ea42 0103 	orr.w	r1, r2, r3
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005342:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	430a      	orrs	r2, r1
 800534c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	699b      	ldr	r3, [r3, #24]
 8005352:	0c1b      	lsrs	r3, r3, #16
 8005354:	f003 0204 	and.w	r2, r3, #4
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800535c:	f003 0310 	and.w	r3, r3, #16
 8005360:	431a      	orrs	r2, r3
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005366:	f003 0308 	and.w	r3, r3, #8
 800536a:	431a      	orrs	r2, r3
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	68db      	ldr	r3, [r3, #12]
 8005370:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005374:	ea42 0103 	orr.w	r1, r2, r3
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	430a      	orrs	r2, r1
 8005384:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2200      	movs	r2, #0
 800538a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2201      	movs	r2, #1
 8005390:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8005394:	2300      	movs	r3, #0
}
 8005396:	4618      	mov	r0, r3
 8005398:	3710      	adds	r7, #16
 800539a:	46bd      	mov	sp, r7
 800539c:	bd80      	pop	{r7, pc}

0800539e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800539e:	b580      	push	{r7, lr}
 80053a0:	b088      	sub	sp, #32
 80053a2:	af00      	add	r7, sp, #0
 80053a4:	60f8      	str	r0, [r7, #12]
 80053a6:	60b9      	str	r1, [r7, #8]
 80053a8:	603b      	str	r3, [r7, #0]
 80053aa:	4613      	mov	r3, r2
 80053ac:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80053ae:	f7fd fc7d 	bl	8002cac <HAL_GetTick>
 80053b2:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80053b4:	88fb      	ldrh	r3, [r7, #6]
 80053b6:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80053be:	b2db      	uxtb	r3, r3
 80053c0:	2b01      	cmp	r3, #1
 80053c2:	d001      	beq.n	80053c8 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80053c4:	2302      	movs	r3, #2
 80053c6:	e15c      	b.n	8005682 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 80053c8:	68bb      	ldr	r3, [r7, #8]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d002      	beq.n	80053d4 <HAL_SPI_Transmit+0x36>
 80053ce:	88fb      	ldrh	r3, [r7, #6]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d101      	bne.n	80053d8 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80053d4:	2301      	movs	r3, #1
 80053d6:	e154      	b.n	8005682 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80053de:	2b01      	cmp	r3, #1
 80053e0:	d101      	bne.n	80053e6 <HAL_SPI_Transmit+0x48>
 80053e2:	2302      	movs	r3, #2
 80053e4:	e14d      	b.n	8005682 <HAL_SPI_Transmit+0x2e4>
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	2201      	movs	r2, #1
 80053ea:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	2203      	movs	r2, #3
 80053f2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	2200      	movs	r2, #0
 80053fa:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	68ba      	ldr	r2, [r7, #8]
 8005400:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	88fa      	ldrh	r2, [r7, #6]
 8005406:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	88fa      	ldrh	r2, [r7, #6]
 800540c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	2200      	movs	r2, #0
 8005412:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	2200      	movs	r2, #0
 8005418:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	2200      	movs	r2, #0
 8005420:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	2200      	movs	r2, #0
 8005428:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	2200      	movs	r2, #0
 800542e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	689b      	ldr	r3, [r3, #8]
 8005434:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005438:	d10f      	bne.n	800545a <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	681a      	ldr	r2, [r3, #0]
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005448:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	681a      	ldr	r2, [r3, #0]
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005458:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005464:	2b40      	cmp	r3, #64	@ 0x40
 8005466:	d007      	beq.n	8005478 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	681a      	ldr	r2, [r3, #0]
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005476:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	68db      	ldr	r3, [r3, #12]
 800547c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005480:	d952      	bls.n	8005528 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	685b      	ldr	r3, [r3, #4]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d002      	beq.n	8005490 <HAL_SPI_Transmit+0xf2>
 800548a:	8b7b      	ldrh	r3, [r7, #26]
 800548c:	2b01      	cmp	r3, #1
 800548e:	d145      	bne.n	800551c <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005494:	881a      	ldrh	r2, [r3, #0]
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054a0:	1c9a      	adds	r2, r3, #2
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80054aa:	b29b      	uxth	r3, r3
 80054ac:	3b01      	subs	r3, #1
 80054ae:	b29a      	uxth	r2, r3
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80054b4:	e032      	b.n	800551c <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	689b      	ldr	r3, [r3, #8]
 80054bc:	f003 0302 	and.w	r3, r3, #2
 80054c0:	2b02      	cmp	r3, #2
 80054c2:	d112      	bne.n	80054ea <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054c8:	881a      	ldrh	r2, [r3, #0]
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054d4:	1c9a      	adds	r2, r3, #2
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80054de:	b29b      	uxth	r3, r3
 80054e0:	3b01      	subs	r3, #1
 80054e2:	b29a      	uxth	r2, r3
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80054e8:	e018      	b.n	800551c <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80054ea:	f7fd fbdf 	bl	8002cac <HAL_GetTick>
 80054ee:	4602      	mov	r2, r0
 80054f0:	69fb      	ldr	r3, [r7, #28]
 80054f2:	1ad3      	subs	r3, r2, r3
 80054f4:	683a      	ldr	r2, [r7, #0]
 80054f6:	429a      	cmp	r2, r3
 80054f8:	d803      	bhi.n	8005502 <HAL_SPI_Transmit+0x164>
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005500:	d102      	bne.n	8005508 <HAL_SPI_Transmit+0x16a>
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d109      	bne.n	800551c <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	2201      	movs	r2, #1
 800550c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	2200      	movs	r2, #0
 8005514:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8005518:	2303      	movs	r3, #3
 800551a:	e0b2      	b.n	8005682 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005520:	b29b      	uxth	r3, r3
 8005522:	2b00      	cmp	r3, #0
 8005524:	d1c7      	bne.n	80054b6 <HAL_SPI_Transmit+0x118>
 8005526:	e083      	b.n	8005630 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	685b      	ldr	r3, [r3, #4]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d002      	beq.n	8005536 <HAL_SPI_Transmit+0x198>
 8005530:	8b7b      	ldrh	r3, [r7, #26]
 8005532:	2b01      	cmp	r3, #1
 8005534:	d177      	bne.n	8005626 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800553a:	b29b      	uxth	r3, r3
 800553c:	2b01      	cmp	r3, #1
 800553e:	d912      	bls.n	8005566 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005544:	881a      	ldrh	r2, [r3, #0]
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005550:	1c9a      	adds	r2, r3, #2
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800555a:	b29b      	uxth	r3, r3
 800555c:	3b02      	subs	r3, #2
 800555e:	b29a      	uxth	r2, r3
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005564:	e05f      	b.n	8005626 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	330c      	adds	r3, #12
 8005570:	7812      	ldrb	r2, [r2, #0]
 8005572:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005578:	1c5a      	adds	r2, r3, #1
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005582:	b29b      	uxth	r3, r3
 8005584:	3b01      	subs	r3, #1
 8005586:	b29a      	uxth	r2, r3
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800558c:	e04b      	b.n	8005626 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	689b      	ldr	r3, [r3, #8]
 8005594:	f003 0302 	and.w	r3, r3, #2
 8005598:	2b02      	cmp	r3, #2
 800559a:	d12b      	bne.n	80055f4 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80055a0:	b29b      	uxth	r3, r3
 80055a2:	2b01      	cmp	r3, #1
 80055a4:	d912      	bls.n	80055cc <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055aa:	881a      	ldrh	r2, [r3, #0]
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055b6:	1c9a      	adds	r2, r3, #2
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80055c0:	b29b      	uxth	r3, r3
 80055c2:	3b02      	subs	r3, #2
 80055c4:	b29a      	uxth	r2, r3
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80055ca:	e02c      	b.n	8005626 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	330c      	adds	r3, #12
 80055d6:	7812      	ldrb	r2, [r2, #0]
 80055d8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055de:	1c5a      	adds	r2, r3, #1
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80055e8:	b29b      	uxth	r3, r3
 80055ea:	3b01      	subs	r3, #1
 80055ec:	b29a      	uxth	r2, r3
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80055f2:	e018      	b.n	8005626 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80055f4:	f7fd fb5a 	bl	8002cac <HAL_GetTick>
 80055f8:	4602      	mov	r2, r0
 80055fa:	69fb      	ldr	r3, [r7, #28]
 80055fc:	1ad3      	subs	r3, r2, r3
 80055fe:	683a      	ldr	r2, [r7, #0]
 8005600:	429a      	cmp	r2, r3
 8005602:	d803      	bhi.n	800560c <HAL_SPI_Transmit+0x26e>
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	f1b3 3fff 	cmp.w	r3, #4294967295
 800560a:	d102      	bne.n	8005612 <HAL_SPI_Transmit+0x274>
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d109      	bne.n	8005626 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	2201      	movs	r2, #1
 8005616:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	2200      	movs	r2, #0
 800561e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8005622:	2303      	movs	r3, #3
 8005624:	e02d      	b.n	8005682 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800562a:	b29b      	uxth	r3, r3
 800562c:	2b00      	cmp	r3, #0
 800562e:	d1ae      	bne.n	800558e <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005630:	69fa      	ldr	r2, [r7, #28]
 8005632:	6839      	ldr	r1, [r7, #0]
 8005634:	68f8      	ldr	r0, [r7, #12]
 8005636:	f000 fb65 	bl	8005d04 <SPI_EndRxTxTransaction>
 800563a:	4603      	mov	r3, r0
 800563c:	2b00      	cmp	r3, #0
 800563e:	d002      	beq.n	8005646 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	2220      	movs	r2, #32
 8005644:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	689b      	ldr	r3, [r3, #8]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d10a      	bne.n	8005664 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800564e:	2300      	movs	r3, #0
 8005650:	617b      	str	r3, [r7, #20]
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	68db      	ldr	r3, [r3, #12]
 8005658:	617b      	str	r3, [r7, #20]
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	689b      	ldr	r3, [r3, #8]
 8005660:	617b      	str	r3, [r7, #20]
 8005662:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	2201      	movs	r2, #1
 8005668:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	2200      	movs	r2, #0
 8005670:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005678:	2b00      	cmp	r3, #0
 800567a:	d001      	beq.n	8005680 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 800567c:	2301      	movs	r3, #1
 800567e:	e000      	b.n	8005682 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8005680:	2300      	movs	r3, #0
  }
}
 8005682:	4618      	mov	r0, r3
 8005684:	3720      	adds	r7, #32
 8005686:	46bd      	mov	sp, r7
 8005688:	bd80      	pop	{r7, pc}

0800568a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800568a:	b580      	push	{r7, lr}
 800568c:	b08a      	sub	sp, #40	@ 0x28
 800568e:	af00      	add	r7, sp, #0
 8005690:	60f8      	str	r0, [r7, #12]
 8005692:	60b9      	str	r1, [r7, #8]
 8005694:	607a      	str	r2, [r7, #4]
 8005696:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005698:	2301      	movs	r3, #1
 800569a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800569c:	f7fd fb06 	bl	8002cac <HAL_GetTick>
 80056a0:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80056a8:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	685b      	ldr	r3, [r3, #4]
 80056ae:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80056b0:	887b      	ldrh	r3, [r7, #2]
 80056b2:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 80056b4:	887b      	ldrh	r3, [r7, #2]
 80056b6:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80056b8:	7ffb      	ldrb	r3, [r7, #31]
 80056ba:	2b01      	cmp	r3, #1
 80056bc:	d00c      	beq.n	80056d8 <HAL_SPI_TransmitReceive+0x4e>
 80056be:	69bb      	ldr	r3, [r7, #24]
 80056c0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80056c4:	d106      	bne.n	80056d4 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	689b      	ldr	r3, [r3, #8]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d102      	bne.n	80056d4 <HAL_SPI_TransmitReceive+0x4a>
 80056ce:	7ffb      	ldrb	r3, [r7, #31]
 80056d0:	2b04      	cmp	r3, #4
 80056d2:	d001      	beq.n	80056d8 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80056d4:	2302      	movs	r3, #2
 80056d6:	e1f3      	b.n	8005ac0 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d005      	beq.n	80056ea <HAL_SPI_TransmitReceive+0x60>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d002      	beq.n	80056ea <HAL_SPI_TransmitReceive+0x60>
 80056e4:	887b      	ldrh	r3, [r7, #2]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d101      	bne.n	80056ee <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 80056ea:	2301      	movs	r3, #1
 80056ec:	e1e8      	b.n	8005ac0 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80056f4:	2b01      	cmp	r3, #1
 80056f6:	d101      	bne.n	80056fc <HAL_SPI_TransmitReceive+0x72>
 80056f8:	2302      	movs	r3, #2
 80056fa:	e1e1      	b.n	8005ac0 <HAL_SPI_TransmitReceive+0x436>
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	2201      	movs	r2, #1
 8005700:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800570a:	b2db      	uxtb	r3, r3
 800570c:	2b04      	cmp	r3, #4
 800570e:	d003      	beq.n	8005718 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	2205      	movs	r2, #5
 8005714:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	2200      	movs	r2, #0
 800571c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	687a      	ldr	r2, [r7, #4]
 8005722:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	887a      	ldrh	r2, [r7, #2]
 8005728:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	887a      	ldrh	r2, [r7, #2]
 8005730:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	68ba      	ldr	r2, [r7, #8]
 8005738:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	887a      	ldrh	r2, [r7, #2]
 800573e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	887a      	ldrh	r2, [r7, #2]
 8005744:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	2200      	movs	r2, #0
 800574a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	2200      	movs	r2, #0
 8005750:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	68db      	ldr	r3, [r3, #12]
 8005756:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800575a:	d802      	bhi.n	8005762 <HAL_SPI_TransmitReceive+0xd8>
 800575c:	8abb      	ldrh	r3, [r7, #20]
 800575e:	2b01      	cmp	r3, #1
 8005760:	d908      	bls.n	8005774 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	685a      	ldr	r2, [r3, #4]
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005770:	605a      	str	r2, [r3, #4]
 8005772:	e007      	b.n	8005784 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	685a      	ldr	r2, [r3, #4]
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005782:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800578e:	2b40      	cmp	r3, #64	@ 0x40
 8005790:	d007      	beq.n	80057a2 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	681a      	ldr	r2, [r3, #0]
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80057a0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	68db      	ldr	r3, [r3, #12]
 80057a6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80057aa:	f240 8083 	bls.w	80058b4 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	685b      	ldr	r3, [r3, #4]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d002      	beq.n	80057bc <HAL_SPI_TransmitReceive+0x132>
 80057b6:	8afb      	ldrh	r3, [r7, #22]
 80057b8:	2b01      	cmp	r3, #1
 80057ba:	d16f      	bne.n	800589c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057c0:	881a      	ldrh	r2, [r3, #0]
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057cc:	1c9a      	adds	r2, r3, #2
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80057d6:	b29b      	uxth	r3, r3
 80057d8:	3b01      	subs	r3, #1
 80057da:	b29a      	uxth	r2, r3
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80057e0:	e05c      	b.n	800589c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	689b      	ldr	r3, [r3, #8]
 80057e8:	f003 0302 	and.w	r3, r3, #2
 80057ec:	2b02      	cmp	r3, #2
 80057ee:	d11b      	bne.n	8005828 <HAL_SPI_TransmitReceive+0x19e>
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80057f4:	b29b      	uxth	r3, r3
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d016      	beq.n	8005828 <HAL_SPI_TransmitReceive+0x19e>
 80057fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057fc:	2b01      	cmp	r3, #1
 80057fe:	d113      	bne.n	8005828 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005804:	881a      	ldrh	r2, [r3, #0]
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005810:	1c9a      	adds	r2, r3, #2
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800581a:	b29b      	uxth	r3, r3
 800581c:	3b01      	subs	r3, #1
 800581e:	b29a      	uxth	r2, r3
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005824:	2300      	movs	r3, #0
 8005826:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	689b      	ldr	r3, [r3, #8]
 800582e:	f003 0301 	and.w	r3, r3, #1
 8005832:	2b01      	cmp	r3, #1
 8005834:	d11c      	bne.n	8005870 <HAL_SPI_TransmitReceive+0x1e6>
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800583c:	b29b      	uxth	r3, r3
 800583e:	2b00      	cmp	r3, #0
 8005840:	d016      	beq.n	8005870 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	68da      	ldr	r2, [r3, #12]
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800584c:	b292      	uxth	r2, r2
 800584e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005854:	1c9a      	adds	r2, r3, #2
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005860:	b29b      	uxth	r3, r3
 8005862:	3b01      	subs	r3, #1
 8005864:	b29a      	uxth	r2, r3
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800586c:	2301      	movs	r3, #1
 800586e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005870:	f7fd fa1c 	bl	8002cac <HAL_GetTick>
 8005874:	4602      	mov	r2, r0
 8005876:	6a3b      	ldr	r3, [r7, #32]
 8005878:	1ad3      	subs	r3, r2, r3
 800587a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800587c:	429a      	cmp	r2, r3
 800587e:	d80d      	bhi.n	800589c <HAL_SPI_TransmitReceive+0x212>
 8005880:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005882:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005886:	d009      	beq.n	800589c <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	2201      	movs	r2, #1
 800588c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	2200      	movs	r2, #0
 8005894:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8005898:	2303      	movs	r3, #3
 800589a:	e111      	b.n	8005ac0 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80058a0:	b29b      	uxth	r3, r3
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d19d      	bne.n	80057e2 <HAL_SPI_TransmitReceive+0x158>
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80058ac:	b29b      	uxth	r3, r3
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d197      	bne.n	80057e2 <HAL_SPI_TransmitReceive+0x158>
 80058b2:	e0e5      	b.n	8005a80 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	685b      	ldr	r3, [r3, #4]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d003      	beq.n	80058c4 <HAL_SPI_TransmitReceive+0x23a>
 80058bc:	8afb      	ldrh	r3, [r7, #22]
 80058be:	2b01      	cmp	r3, #1
 80058c0:	f040 80d1 	bne.w	8005a66 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80058c8:	b29b      	uxth	r3, r3
 80058ca:	2b01      	cmp	r3, #1
 80058cc:	d912      	bls.n	80058f4 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058d2:	881a      	ldrh	r2, [r3, #0]
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058de:	1c9a      	adds	r2, r3, #2
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80058e8:	b29b      	uxth	r3, r3
 80058ea:	3b02      	subs	r3, #2
 80058ec:	b29a      	uxth	r2, r3
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80058f2:	e0b8      	b.n	8005a66 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	330c      	adds	r3, #12
 80058fe:	7812      	ldrb	r2, [r2, #0]
 8005900:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005906:	1c5a      	adds	r2, r3, #1
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005910:	b29b      	uxth	r3, r3
 8005912:	3b01      	subs	r3, #1
 8005914:	b29a      	uxth	r2, r3
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800591a:	e0a4      	b.n	8005a66 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	689b      	ldr	r3, [r3, #8]
 8005922:	f003 0302 	and.w	r3, r3, #2
 8005926:	2b02      	cmp	r3, #2
 8005928:	d134      	bne.n	8005994 <HAL_SPI_TransmitReceive+0x30a>
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800592e:	b29b      	uxth	r3, r3
 8005930:	2b00      	cmp	r3, #0
 8005932:	d02f      	beq.n	8005994 <HAL_SPI_TransmitReceive+0x30a>
 8005934:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005936:	2b01      	cmp	r3, #1
 8005938:	d12c      	bne.n	8005994 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800593e:	b29b      	uxth	r3, r3
 8005940:	2b01      	cmp	r3, #1
 8005942:	d912      	bls.n	800596a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005948:	881a      	ldrh	r2, [r3, #0]
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005954:	1c9a      	adds	r2, r3, #2
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800595e:	b29b      	uxth	r3, r3
 8005960:	3b02      	subs	r3, #2
 8005962:	b29a      	uxth	r2, r3
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005968:	e012      	b.n	8005990 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	330c      	adds	r3, #12
 8005974:	7812      	ldrb	r2, [r2, #0]
 8005976:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800597c:	1c5a      	adds	r2, r3, #1
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005986:	b29b      	uxth	r3, r3
 8005988:	3b01      	subs	r3, #1
 800598a:	b29a      	uxth	r2, r3
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005990:	2300      	movs	r3, #0
 8005992:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	689b      	ldr	r3, [r3, #8]
 800599a:	f003 0301 	and.w	r3, r3, #1
 800599e:	2b01      	cmp	r3, #1
 80059a0:	d148      	bne.n	8005a34 <HAL_SPI_TransmitReceive+0x3aa>
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80059a8:	b29b      	uxth	r3, r3
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d042      	beq.n	8005a34 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80059b4:	b29b      	uxth	r3, r3
 80059b6:	2b01      	cmp	r3, #1
 80059b8:	d923      	bls.n	8005a02 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	68da      	ldr	r2, [r3, #12]
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059c4:	b292      	uxth	r2, r2
 80059c6:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059cc:	1c9a      	adds	r2, r3, #2
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80059d8:	b29b      	uxth	r3, r3
 80059da:	3b02      	subs	r3, #2
 80059dc:	b29a      	uxth	r2, r3
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80059ea:	b29b      	uxth	r3, r3
 80059ec:	2b01      	cmp	r3, #1
 80059ee:	d81f      	bhi.n	8005a30 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	685a      	ldr	r2, [r3, #4]
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80059fe:	605a      	str	r2, [r3, #4]
 8005a00:	e016      	b.n	8005a30 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f103 020c 	add.w	r2, r3, #12
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a0e:	7812      	ldrb	r2, [r2, #0]
 8005a10:	b2d2      	uxtb	r2, r2
 8005a12:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a18:	1c5a      	adds	r2, r3, #1
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005a24:	b29b      	uxth	r3, r3
 8005a26:	3b01      	subs	r3, #1
 8005a28:	b29a      	uxth	r2, r3
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005a30:	2301      	movs	r3, #1
 8005a32:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005a34:	f7fd f93a 	bl	8002cac <HAL_GetTick>
 8005a38:	4602      	mov	r2, r0
 8005a3a:	6a3b      	ldr	r3, [r7, #32]
 8005a3c:	1ad3      	subs	r3, r2, r3
 8005a3e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a40:	429a      	cmp	r2, r3
 8005a42:	d803      	bhi.n	8005a4c <HAL_SPI_TransmitReceive+0x3c2>
 8005a44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a4a:	d102      	bne.n	8005a52 <HAL_SPI_TransmitReceive+0x3c8>
 8005a4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d109      	bne.n	8005a66 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	2201      	movs	r2, #1
 8005a56:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8005a62:	2303      	movs	r3, #3
 8005a64:	e02c      	b.n	8005ac0 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005a6a:	b29b      	uxth	r3, r3
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	f47f af55 	bne.w	800591c <HAL_SPI_TransmitReceive+0x292>
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005a78:	b29b      	uxth	r3, r3
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	f47f af4e 	bne.w	800591c <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005a80:	6a3a      	ldr	r2, [r7, #32]
 8005a82:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005a84:	68f8      	ldr	r0, [r7, #12]
 8005a86:	f000 f93d 	bl	8005d04 <SPI_EndRxTxTransaction>
 8005a8a:	4603      	mov	r3, r0
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d008      	beq.n	8005aa2 <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	2220      	movs	r2, #32
 8005a94:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	2200      	movs	r2, #0
 8005a9a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	e00e      	b.n	8005ac0 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	2201      	movs	r2, #1
 8005aa6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	2200      	movs	r2, #0
 8005aae:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d001      	beq.n	8005abe <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8005aba:	2301      	movs	r3, #1
 8005abc:	e000      	b.n	8005ac0 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8005abe:	2300      	movs	r3, #0
  }
}
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	3728      	adds	r7, #40	@ 0x28
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	bd80      	pop	{r7, pc}

08005ac8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b088      	sub	sp, #32
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	60f8      	str	r0, [r7, #12]
 8005ad0:	60b9      	str	r1, [r7, #8]
 8005ad2:	603b      	str	r3, [r7, #0]
 8005ad4:	4613      	mov	r3, r2
 8005ad6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005ad8:	f7fd f8e8 	bl	8002cac <HAL_GetTick>
 8005adc:	4602      	mov	r2, r0
 8005ade:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ae0:	1a9b      	subs	r3, r3, r2
 8005ae2:	683a      	ldr	r2, [r7, #0]
 8005ae4:	4413      	add	r3, r2
 8005ae6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005ae8:	f7fd f8e0 	bl	8002cac <HAL_GetTick>
 8005aec:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005aee:	4b39      	ldr	r3, [pc, #228]	@ (8005bd4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	015b      	lsls	r3, r3, #5
 8005af4:	0d1b      	lsrs	r3, r3, #20
 8005af6:	69fa      	ldr	r2, [r7, #28]
 8005af8:	fb02 f303 	mul.w	r3, r2, r3
 8005afc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005afe:	e054      	b.n	8005baa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b06:	d050      	beq.n	8005baa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005b08:	f7fd f8d0 	bl	8002cac <HAL_GetTick>
 8005b0c:	4602      	mov	r2, r0
 8005b0e:	69bb      	ldr	r3, [r7, #24]
 8005b10:	1ad3      	subs	r3, r2, r3
 8005b12:	69fa      	ldr	r2, [r7, #28]
 8005b14:	429a      	cmp	r2, r3
 8005b16:	d902      	bls.n	8005b1e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005b18:	69fb      	ldr	r3, [r7, #28]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d13d      	bne.n	8005b9a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	685a      	ldr	r2, [r3, #4]
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005b2c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	685b      	ldr	r3, [r3, #4]
 8005b32:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005b36:	d111      	bne.n	8005b5c <SPI_WaitFlagStateUntilTimeout+0x94>
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	689b      	ldr	r3, [r3, #8]
 8005b3c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005b40:	d004      	beq.n	8005b4c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	689b      	ldr	r3, [r3, #8]
 8005b46:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005b4a:	d107      	bne.n	8005b5c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	681a      	ldr	r2, [r3, #0]
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005b5a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b60:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005b64:	d10f      	bne.n	8005b86 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	681a      	ldr	r2, [r3, #0]
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005b74:	601a      	str	r2, [r3, #0]
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	681a      	ldr	r2, [r3, #0]
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005b84:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	2201      	movs	r2, #1
 8005b8a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	2200      	movs	r2, #0
 8005b92:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8005b96:	2303      	movs	r3, #3
 8005b98:	e017      	b.n	8005bca <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005b9a:	697b      	ldr	r3, [r7, #20]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d101      	bne.n	8005ba4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005ba4:	697b      	ldr	r3, [r7, #20]
 8005ba6:	3b01      	subs	r3, #1
 8005ba8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	689a      	ldr	r2, [r3, #8]
 8005bb0:	68bb      	ldr	r3, [r7, #8]
 8005bb2:	4013      	ands	r3, r2
 8005bb4:	68ba      	ldr	r2, [r7, #8]
 8005bb6:	429a      	cmp	r2, r3
 8005bb8:	bf0c      	ite	eq
 8005bba:	2301      	moveq	r3, #1
 8005bbc:	2300      	movne	r3, #0
 8005bbe:	b2db      	uxtb	r3, r3
 8005bc0:	461a      	mov	r2, r3
 8005bc2:	79fb      	ldrb	r3, [r7, #7]
 8005bc4:	429a      	cmp	r2, r3
 8005bc6:	d19b      	bne.n	8005b00 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005bc8:	2300      	movs	r3, #0
}
 8005bca:	4618      	mov	r0, r3
 8005bcc:	3720      	adds	r7, #32
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	bd80      	pop	{r7, pc}
 8005bd2:	bf00      	nop
 8005bd4:	2000000c 	.word	0x2000000c

08005bd8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b08a      	sub	sp, #40	@ 0x28
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	60f8      	str	r0, [r7, #12]
 8005be0:	60b9      	str	r1, [r7, #8]
 8005be2:	607a      	str	r2, [r7, #4]
 8005be4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005be6:	2300      	movs	r3, #0
 8005be8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005bea:	f7fd f85f 	bl	8002cac <HAL_GetTick>
 8005bee:	4602      	mov	r2, r0
 8005bf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bf2:	1a9b      	subs	r3, r3, r2
 8005bf4:	683a      	ldr	r2, [r7, #0]
 8005bf6:	4413      	add	r3, r2
 8005bf8:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8005bfa:	f7fd f857 	bl	8002cac <HAL_GetTick>
 8005bfe:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	330c      	adds	r3, #12
 8005c06:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005c08:	4b3d      	ldr	r3, [pc, #244]	@ (8005d00 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005c0a:	681a      	ldr	r2, [r3, #0]
 8005c0c:	4613      	mov	r3, r2
 8005c0e:	009b      	lsls	r3, r3, #2
 8005c10:	4413      	add	r3, r2
 8005c12:	00da      	lsls	r2, r3, #3
 8005c14:	1ad3      	subs	r3, r2, r3
 8005c16:	0d1b      	lsrs	r3, r3, #20
 8005c18:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c1a:	fb02 f303 	mul.w	r3, r2, r3
 8005c1e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005c20:	e060      	b.n	8005ce4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005c22:	68bb      	ldr	r3, [r7, #8]
 8005c24:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005c28:	d107      	bne.n	8005c3a <SPI_WaitFifoStateUntilTimeout+0x62>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d104      	bne.n	8005c3a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005c30:	69fb      	ldr	r3, [r7, #28]
 8005c32:	781b      	ldrb	r3, [r3, #0]
 8005c34:	b2db      	uxtb	r3, r3
 8005c36:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005c38:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c40:	d050      	beq.n	8005ce4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005c42:	f7fd f833 	bl	8002cac <HAL_GetTick>
 8005c46:	4602      	mov	r2, r0
 8005c48:	6a3b      	ldr	r3, [r7, #32]
 8005c4a:	1ad3      	subs	r3, r2, r3
 8005c4c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c4e:	429a      	cmp	r2, r3
 8005c50:	d902      	bls.n	8005c58 <SPI_WaitFifoStateUntilTimeout+0x80>
 8005c52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d13d      	bne.n	8005cd4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	685a      	ldr	r2, [r3, #4]
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005c66:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	685b      	ldr	r3, [r3, #4]
 8005c6c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005c70:	d111      	bne.n	8005c96 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	689b      	ldr	r3, [r3, #8]
 8005c76:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005c7a:	d004      	beq.n	8005c86 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	689b      	ldr	r3, [r3, #8]
 8005c80:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005c84:	d107      	bne.n	8005c96 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	681a      	ldr	r2, [r3, #0]
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005c94:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c9a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c9e:	d10f      	bne.n	8005cc0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	681a      	ldr	r2, [r3, #0]
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005cae:	601a      	str	r2, [r3, #0]
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	681a      	ldr	r2, [r3, #0]
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005cbe:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	2201      	movs	r2, #1
 8005cc4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	2200      	movs	r2, #0
 8005ccc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8005cd0:	2303      	movs	r3, #3
 8005cd2:	e010      	b.n	8005cf6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005cd4:	69bb      	ldr	r3, [r7, #24]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d101      	bne.n	8005cde <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005cda:	2300      	movs	r3, #0
 8005cdc:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8005cde:	69bb      	ldr	r3, [r7, #24]
 8005ce0:	3b01      	subs	r3, #1
 8005ce2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	689a      	ldr	r2, [r3, #8]
 8005cea:	68bb      	ldr	r3, [r7, #8]
 8005cec:	4013      	ands	r3, r2
 8005cee:	687a      	ldr	r2, [r7, #4]
 8005cf0:	429a      	cmp	r2, r3
 8005cf2:	d196      	bne.n	8005c22 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005cf4:	2300      	movs	r3, #0
}
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	3728      	adds	r7, #40	@ 0x28
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	bd80      	pop	{r7, pc}
 8005cfe:	bf00      	nop
 8005d00:	2000000c 	.word	0x2000000c

08005d04 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b086      	sub	sp, #24
 8005d08:	af02      	add	r7, sp, #8
 8005d0a:	60f8      	str	r0, [r7, #12]
 8005d0c:	60b9      	str	r1, [r7, #8]
 8005d0e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	9300      	str	r3, [sp, #0]
 8005d14:	68bb      	ldr	r3, [r7, #8]
 8005d16:	2200      	movs	r2, #0
 8005d18:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8005d1c:	68f8      	ldr	r0, [r7, #12]
 8005d1e:	f7ff ff5b 	bl	8005bd8 <SPI_WaitFifoStateUntilTimeout>
 8005d22:	4603      	mov	r3, r0
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d007      	beq.n	8005d38 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d2c:	f043 0220 	orr.w	r2, r3, #32
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005d34:	2303      	movs	r3, #3
 8005d36:	e027      	b.n	8005d88 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	9300      	str	r3, [sp, #0]
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	2200      	movs	r2, #0
 8005d40:	2180      	movs	r1, #128	@ 0x80
 8005d42:	68f8      	ldr	r0, [r7, #12]
 8005d44:	f7ff fec0 	bl	8005ac8 <SPI_WaitFlagStateUntilTimeout>
 8005d48:	4603      	mov	r3, r0
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d007      	beq.n	8005d5e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d52:	f043 0220 	orr.w	r2, r3, #32
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005d5a:	2303      	movs	r3, #3
 8005d5c:	e014      	b.n	8005d88 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	9300      	str	r3, [sp, #0]
 8005d62:	68bb      	ldr	r3, [r7, #8]
 8005d64:	2200      	movs	r2, #0
 8005d66:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8005d6a:	68f8      	ldr	r0, [r7, #12]
 8005d6c:	f7ff ff34 	bl	8005bd8 <SPI_WaitFifoStateUntilTimeout>
 8005d70:	4603      	mov	r3, r0
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d007      	beq.n	8005d86 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d7a:	f043 0220 	orr.w	r2, r3, #32
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005d82:	2303      	movs	r3, #3
 8005d84:	e000      	b.n	8005d88 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005d86:	2300      	movs	r3, #0
}
 8005d88:	4618      	mov	r0, r3
 8005d8a:	3710      	adds	r7, #16
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	bd80      	pop	{r7, pc}

08005d90 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b082      	sub	sp, #8
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d101      	bne.n	8005da2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005d9e:	2301      	movs	r3, #1
 8005da0:	e049      	b.n	8005e36 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005da8:	b2db      	uxtb	r3, r3
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d106      	bne.n	8005dbc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2200      	movs	r2, #0
 8005db2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005db6:	6878      	ldr	r0, [r7, #4]
 8005db8:	f7fc fcae 	bl	8002718 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2202      	movs	r2, #2
 8005dc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681a      	ldr	r2, [r3, #0]
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	3304      	adds	r3, #4
 8005dcc:	4619      	mov	r1, r3
 8005dce:	4610      	mov	r0, r2
 8005dd0:	f000 fd0c 	bl	80067ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2201      	movs	r2, #1
 8005dd8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2201      	movs	r2, #1
 8005de0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2201      	movs	r2, #1
 8005de8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2201      	movs	r2, #1
 8005df0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2201      	movs	r2, #1
 8005df8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2201      	movs	r2, #1
 8005e00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2201      	movs	r2, #1
 8005e08:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2201      	movs	r2, #1
 8005e10:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2201      	movs	r2, #1
 8005e18:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2201      	movs	r2, #1
 8005e20:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2201      	movs	r2, #1
 8005e28:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2201      	movs	r2, #1
 8005e30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005e34:	2300      	movs	r3, #0
}
 8005e36:	4618      	mov	r0, r3
 8005e38:	3708      	adds	r7, #8
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	bd80      	pop	{r7, pc}
	...

08005e40 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005e40:	b480      	push	{r7}
 8005e42:	b085      	sub	sp, #20
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e4e:	b2db      	uxtb	r3, r3
 8005e50:	2b01      	cmp	r3, #1
 8005e52:	d001      	beq.n	8005e58 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005e54:	2301      	movs	r3, #1
 8005e56:	e04f      	b.n	8005ef8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2202      	movs	r2, #2
 8005e5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	68da      	ldr	r2, [r3, #12]
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f042 0201 	orr.w	r2, r2, #1
 8005e6e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	4a23      	ldr	r2, [pc, #140]	@ (8005f04 <HAL_TIM_Base_Start_IT+0xc4>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d01d      	beq.n	8005eb6 <HAL_TIM_Base_Start_IT+0x76>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e82:	d018      	beq.n	8005eb6 <HAL_TIM_Base_Start_IT+0x76>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	4a1f      	ldr	r2, [pc, #124]	@ (8005f08 <HAL_TIM_Base_Start_IT+0xc8>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d013      	beq.n	8005eb6 <HAL_TIM_Base_Start_IT+0x76>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	4a1e      	ldr	r2, [pc, #120]	@ (8005f0c <HAL_TIM_Base_Start_IT+0xcc>)
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d00e      	beq.n	8005eb6 <HAL_TIM_Base_Start_IT+0x76>
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	4a1c      	ldr	r2, [pc, #112]	@ (8005f10 <HAL_TIM_Base_Start_IT+0xd0>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d009      	beq.n	8005eb6 <HAL_TIM_Base_Start_IT+0x76>
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	4a1b      	ldr	r2, [pc, #108]	@ (8005f14 <HAL_TIM_Base_Start_IT+0xd4>)
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d004      	beq.n	8005eb6 <HAL_TIM_Base_Start_IT+0x76>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	4a19      	ldr	r2, [pc, #100]	@ (8005f18 <HAL_TIM_Base_Start_IT+0xd8>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d115      	bne.n	8005ee2 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	689a      	ldr	r2, [r3, #8]
 8005ebc:	4b17      	ldr	r3, [pc, #92]	@ (8005f1c <HAL_TIM_Base_Start_IT+0xdc>)
 8005ebe:	4013      	ands	r3, r2
 8005ec0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	2b06      	cmp	r3, #6
 8005ec6:	d015      	beq.n	8005ef4 <HAL_TIM_Base_Start_IT+0xb4>
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005ece:	d011      	beq.n	8005ef4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	681a      	ldr	r2, [r3, #0]
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f042 0201 	orr.w	r2, r2, #1
 8005ede:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ee0:	e008      	b.n	8005ef4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	681a      	ldr	r2, [r3, #0]
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f042 0201 	orr.w	r2, r2, #1
 8005ef0:	601a      	str	r2, [r3, #0]
 8005ef2:	e000      	b.n	8005ef6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ef4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005ef6:	2300      	movs	r3, #0
}
 8005ef8:	4618      	mov	r0, r3
 8005efa:	3714      	adds	r7, #20
 8005efc:	46bd      	mov	sp, r7
 8005efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f02:	4770      	bx	lr
 8005f04:	40012c00 	.word	0x40012c00
 8005f08:	40000400 	.word	0x40000400
 8005f0c:	40000800 	.word	0x40000800
 8005f10:	40000c00 	.word	0x40000c00
 8005f14:	40013400 	.word	0x40013400
 8005f18:	40014000 	.word	0x40014000
 8005f1c:	00010007 	.word	0x00010007

08005f20 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005f20:	b480      	push	{r7}
 8005f22:	b083      	sub	sp, #12
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	68da      	ldr	r2, [r3, #12]
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f022 0201 	bic.w	r2, r2, #1
 8005f36:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	6a1a      	ldr	r2, [r3, #32]
 8005f3e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005f42:	4013      	ands	r3, r2
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d10f      	bne.n	8005f68 <HAL_TIM_Base_Stop_IT+0x48>
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	6a1a      	ldr	r2, [r3, #32]
 8005f4e:	f240 4344 	movw	r3, #1092	@ 0x444
 8005f52:	4013      	ands	r3, r2
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d107      	bne.n	8005f68 <HAL_TIM_Base_Stop_IT+0x48>
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	681a      	ldr	r2, [r3, #0]
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f022 0201 	bic.w	r2, r2, #1
 8005f66:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2201      	movs	r2, #1
 8005f6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8005f70:	2300      	movs	r3, #0
}
 8005f72:	4618      	mov	r0, r3
 8005f74:	370c      	adds	r7, #12
 8005f76:	46bd      	mov	sp, r7
 8005f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7c:	4770      	bx	lr

08005f7e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005f7e:	b580      	push	{r7, lr}
 8005f80:	b082      	sub	sp, #8
 8005f82:	af00      	add	r7, sp, #0
 8005f84:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d101      	bne.n	8005f90 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005f8c:	2301      	movs	r3, #1
 8005f8e:	e049      	b.n	8006024 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005f96:	b2db      	uxtb	r3, r3
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d106      	bne.n	8005faa <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005fa4:	6878      	ldr	r0, [r7, #4]
 8005fa6:	f7fc fb99 	bl	80026dc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2202      	movs	r2, #2
 8005fae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681a      	ldr	r2, [r3, #0]
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	3304      	adds	r3, #4
 8005fba:	4619      	mov	r1, r3
 8005fbc:	4610      	mov	r0, r2
 8005fbe:	f000 fc15 	bl	80067ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2201      	movs	r2, #1
 8005fc6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2201      	movs	r2, #1
 8005fce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	2201      	movs	r2, #1
 8005fd6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2201      	movs	r2, #1
 8005fde:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2201      	movs	r2, #1
 8005fe6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2201      	movs	r2, #1
 8005fee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2201      	movs	r2, #1
 8005ff6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	2201      	movs	r2, #1
 8005ffe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2201      	movs	r2, #1
 8006006:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2201      	movs	r2, #1
 800600e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2201      	movs	r2, #1
 8006016:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2201      	movs	r2, #1
 800601e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006022:	2300      	movs	r3, #0
}
 8006024:	4618      	mov	r0, r3
 8006026:	3708      	adds	r7, #8
 8006028:	46bd      	mov	sp, r7
 800602a:	bd80      	pop	{r7, pc}

0800602c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b084      	sub	sp, #16
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
 8006034:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d109      	bne.n	8006050 <HAL_TIM_PWM_Start+0x24>
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006042:	b2db      	uxtb	r3, r3
 8006044:	2b01      	cmp	r3, #1
 8006046:	bf14      	ite	ne
 8006048:	2301      	movne	r3, #1
 800604a:	2300      	moveq	r3, #0
 800604c:	b2db      	uxtb	r3, r3
 800604e:	e03c      	b.n	80060ca <HAL_TIM_PWM_Start+0x9e>
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	2b04      	cmp	r3, #4
 8006054:	d109      	bne.n	800606a <HAL_TIM_PWM_Start+0x3e>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800605c:	b2db      	uxtb	r3, r3
 800605e:	2b01      	cmp	r3, #1
 8006060:	bf14      	ite	ne
 8006062:	2301      	movne	r3, #1
 8006064:	2300      	moveq	r3, #0
 8006066:	b2db      	uxtb	r3, r3
 8006068:	e02f      	b.n	80060ca <HAL_TIM_PWM_Start+0x9e>
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	2b08      	cmp	r3, #8
 800606e:	d109      	bne.n	8006084 <HAL_TIM_PWM_Start+0x58>
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006076:	b2db      	uxtb	r3, r3
 8006078:	2b01      	cmp	r3, #1
 800607a:	bf14      	ite	ne
 800607c:	2301      	movne	r3, #1
 800607e:	2300      	moveq	r3, #0
 8006080:	b2db      	uxtb	r3, r3
 8006082:	e022      	b.n	80060ca <HAL_TIM_PWM_Start+0x9e>
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	2b0c      	cmp	r3, #12
 8006088:	d109      	bne.n	800609e <HAL_TIM_PWM_Start+0x72>
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006090:	b2db      	uxtb	r3, r3
 8006092:	2b01      	cmp	r3, #1
 8006094:	bf14      	ite	ne
 8006096:	2301      	movne	r3, #1
 8006098:	2300      	moveq	r3, #0
 800609a:	b2db      	uxtb	r3, r3
 800609c:	e015      	b.n	80060ca <HAL_TIM_PWM_Start+0x9e>
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	2b10      	cmp	r3, #16
 80060a2:	d109      	bne.n	80060b8 <HAL_TIM_PWM_Start+0x8c>
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80060aa:	b2db      	uxtb	r3, r3
 80060ac:	2b01      	cmp	r3, #1
 80060ae:	bf14      	ite	ne
 80060b0:	2301      	movne	r3, #1
 80060b2:	2300      	moveq	r3, #0
 80060b4:	b2db      	uxtb	r3, r3
 80060b6:	e008      	b.n	80060ca <HAL_TIM_PWM_Start+0x9e>
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80060be:	b2db      	uxtb	r3, r3
 80060c0:	2b01      	cmp	r3, #1
 80060c2:	bf14      	ite	ne
 80060c4:	2301      	movne	r3, #1
 80060c6:	2300      	moveq	r3, #0
 80060c8:	b2db      	uxtb	r3, r3
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d001      	beq.n	80060d2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80060ce:	2301      	movs	r3, #1
 80060d0:	e09c      	b.n	800620c <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d104      	bne.n	80060e2 <HAL_TIM_PWM_Start+0xb6>
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2202      	movs	r2, #2
 80060dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80060e0:	e023      	b.n	800612a <HAL_TIM_PWM_Start+0xfe>
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	2b04      	cmp	r3, #4
 80060e6:	d104      	bne.n	80060f2 <HAL_TIM_PWM_Start+0xc6>
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2202      	movs	r2, #2
 80060ec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80060f0:	e01b      	b.n	800612a <HAL_TIM_PWM_Start+0xfe>
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	2b08      	cmp	r3, #8
 80060f6:	d104      	bne.n	8006102 <HAL_TIM_PWM_Start+0xd6>
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2202      	movs	r2, #2
 80060fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006100:	e013      	b.n	800612a <HAL_TIM_PWM_Start+0xfe>
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	2b0c      	cmp	r3, #12
 8006106:	d104      	bne.n	8006112 <HAL_TIM_PWM_Start+0xe6>
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2202      	movs	r2, #2
 800610c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006110:	e00b      	b.n	800612a <HAL_TIM_PWM_Start+0xfe>
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	2b10      	cmp	r3, #16
 8006116:	d104      	bne.n	8006122 <HAL_TIM_PWM_Start+0xf6>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2202      	movs	r2, #2
 800611c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006120:	e003      	b.n	800612a <HAL_TIM_PWM_Start+0xfe>
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	2202      	movs	r2, #2
 8006126:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	2201      	movs	r2, #1
 8006130:	6839      	ldr	r1, [r7, #0]
 8006132:	4618      	mov	r0, r3
 8006134:	f000 fed6 	bl	8006ee4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	4a35      	ldr	r2, [pc, #212]	@ (8006214 <HAL_TIM_PWM_Start+0x1e8>)
 800613e:	4293      	cmp	r3, r2
 8006140:	d013      	beq.n	800616a <HAL_TIM_PWM_Start+0x13e>
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	4a34      	ldr	r2, [pc, #208]	@ (8006218 <HAL_TIM_PWM_Start+0x1ec>)
 8006148:	4293      	cmp	r3, r2
 800614a:	d00e      	beq.n	800616a <HAL_TIM_PWM_Start+0x13e>
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	4a32      	ldr	r2, [pc, #200]	@ (800621c <HAL_TIM_PWM_Start+0x1f0>)
 8006152:	4293      	cmp	r3, r2
 8006154:	d009      	beq.n	800616a <HAL_TIM_PWM_Start+0x13e>
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	4a31      	ldr	r2, [pc, #196]	@ (8006220 <HAL_TIM_PWM_Start+0x1f4>)
 800615c:	4293      	cmp	r3, r2
 800615e:	d004      	beq.n	800616a <HAL_TIM_PWM_Start+0x13e>
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	4a2f      	ldr	r2, [pc, #188]	@ (8006224 <HAL_TIM_PWM_Start+0x1f8>)
 8006166:	4293      	cmp	r3, r2
 8006168:	d101      	bne.n	800616e <HAL_TIM_PWM_Start+0x142>
 800616a:	2301      	movs	r3, #1
 800616c:	e000      	b.n	8006170 <HAL_TIM_PWM_Start+0x144>
 800616e:	2300      	movs	r3, #0
 8006170:	2b00      	cmp	r3, #0
 8006172:	d007      	beq.n	8006184 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006182:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	4a22      	ldr	r2, [pc, #136]	@ (8006214 <HAL_TIM_PWM_Start+0x1e8>)
 800618a:	4293      	cmp	r3, r2
 800618c:	d01d      	beq.n	80061ca <HAL_TIM_PWM_Start+0x19e>
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006196:	d018      	beq.n	80061ca <HAL_TIM_PWM_Start+0x19e>
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	4a22      	ldr	r2, [pc, #136]	@ (8006228 <HAL_TIM_PWM_Start+0x1fc>)
 800619e:	4293      	cmp	r3, r2
 80061a0:	d013      	beq.n	80061ca <HAL_TIM_PWM_Start+0x19e>
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	4a21      	ldr	r2, [pc, #132]	@ (800622c <HAL_TIM_PWM_Start+0x200>)
 80061a8:	4293      	cmp	r3, r2
 80061aa:	d00e      	beq.n	80061ca <HAL_TIM_PWM_Start+0x19e>
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	4a1f      	ldr	r2, [pc, #124]	@ (8006230 <HAL_TIM_PWM_Start+0x204>)
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d009      	beq.n	80061ca <HAL_TIM_PWM_Start+0x19e>
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	4a17      	ldr	r2, [pc, #92]	@ (8006218 <HAL_TIM_PWM_Start+0x1ec>)
 80061bc:	4293      	cmp	r3, r2
 80061be:	d004      	beq.n	80061ca <HAL_TIM_PWM_Start+0x19e>
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	4a15      	ldr	r2, [pc, #84]	@ (800621c <HAL_TIM_PWM_Start+0x1f0>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d115      	bne.n	80061f6 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	689a      	ldr	r2, [r3, #8]
 80061d0:	4b18      	ldr	r3, [pc, #96]	@ (8006234 <HAL_TIM_PWM_Start+0x208>)
 80061d2:	4013      	ands	r3, r2
 80061d4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	2b06      	cmp	r3, #6
 80061da:	d015      	beq.n	8006208 <HAL_TIM_PWM_Start+0x1dc>
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80061e2:	d011      	beq.n	8006208 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	681a      	ldr	r2, [r3, #0]
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f042 0201 	orr.w	r2, r2, #1
 80061f2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061f4:	e008      	b.n	8006208 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	681a      	ldr	r2, [r3, #0]
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f042 0201 	orr.w	r2, r2, #1
 8006204:	601a      	str	r2, [r3, #0]
 8006206:	e000      	b.n	800620a <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006208:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800620a:	2300      	movs	r3, #0
}
 800620c:	4618      	mov	r0, r3
 800620e:	3710      	adds	r7, #16
 8006210:	46bd      	mov	sp, r7
 8006212:	bd80      	pop	{r7, pc}
 8006214:	40012c00 	.word	0x40012c00
 8006218:	40013400 	.word	0x40013400
 800621c:	40014000 	.word	0x40014000
 8006220:	40014400 	.word	0x40014400
 8006224:	40014800 	.word	0x40014800
 8006228:	40000400 	.word	0x40000400
 800622c:	40000800 	.word	0x40000800
 8006230:	40000c00 	.word	0x40000c00
 8006234:	00010007 	.word	0x00010007

08006238 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b082      	sub	sp, #8
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
 8006240:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	2200      	movs	r2, #0
 8006248:	6839      	ldr	r1, [r7, #0]
 800624a:	4618      	mov	r0, r3
 800624c:	f000 fe4a 	bl	8006ee4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	4a3e      	ldr	r2, [pc, #248]	@ (8006350 <HAL_TIM_PWM_Stop+0x118>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d013      	beq.n	8006282 <HAL_TIM_PWM_Stop+0x4a>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	4a3d      	ldr	r2, [pc, #244]	@ (8006354 <HAL_TIM_PWM_Stop+0x11c>)
 8006260:	4293      	cmp	r3, r2
 8006262:	d00e      	beq.n	8006282 <HAL_TIM_PWM_Stop+0x4a>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	4a3b      	ldr	r2, [pc, #236]	@ (8006358 <HAL_TIM_PWM_Stop+0x120>)
 800626a:	4293      	cmp	r3, r2
 800626c:	d009      	beq.n	8006282 <HAL_TIM_PWM_Stop+0x4a>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	4a3a      	ldr	r2, [pc, #232]	@ (800635c <HAL_TIM_PWM_Stop+0x124>)
 8006274:	4293      	cmp	r3, r2
 8006276:	d004      	beq.n	8006282 <HAL_TIM_PWM_Stop+0x4a>
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	4a38      	ldr	r2, [pc, #224]	@ (8006360 <HAL_TIM_PWM_Stop+0x128>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d101      	bne.n	8006286 <HAL_TIM_PWM_Stop+0x4e>
 8006282:	2301      	movs	r3, #1
 8006284:	e000      	b.n	8006288 <HAL_TIM_PWM_Stop+0x50>
 8006286:	2300      	movs	r3, #0
 8006288:	2b00      	cmp	r3, #0
 800628a:	d017      	beq.n	80062bc <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	6a1a      	ldr	r2, [r3, #32]
 8006292:	f241 1311 	movw	r3, #4369	@ 0x1111
 8006296:	4013      	ands	r3, r2
 8006298:	2b00      	cmp	r3, #0
 800629a:	d10f      	bne.n	80062bc <HAL_TIM_PWM_Stop+0x84>
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	6a1a      	ldr	r2, [r3, #32]
 80062a2:	f240 4344 	movw	r3, #1092	@ 0x444
 80062a6:	4013      	ands	r3, r2
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d107      	bne.n	80062bc <HAL_TIM_PWM_Stop+0x84>
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80062ba:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	6a1a      	ldr	r2, [r3, #32]
 80062c2:	f241 1311 	movw	r3, #4369	@ 0x1111
 80062c6:	4013      	ands	r3, r2
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d10f      	bne.n	80062ec <HAL_TIM_PWM_Stop+0xb4>
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	6a1a      	ldr	r2, [r3, #32]
 80062d2:	f240 4344 	movw	r3, #1092	@ 0x444
 80062d6:	4013      	ands	r3, r2
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d107      	bne.n	80062ec <HAL_TIM_PWM_Stop+0xb4>
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	681a      	ldr	r2, [r3, #0]
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f022 0201 	bic.w	r2, r2, #1
 80062ea:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d104      	bne.n	80062fc <HAL_TIM_PWM_Stop+0xc4>
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2201      	movs	r2, #1
 80062f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80062fa:	e023      	b.n	8006344 <HAL_TIM_PWM_Stop+0x10c>
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	2b04      	cmp	r3, #4
 8006300:	d104      	bne.n	800630c <HAL_TIM_PWM_Stop+0xd4>
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2201      	movs	r2, #1
 8006306:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800630a:	e01b      	b.n	8006344 <HAL_TIM_PWM_Stop+0x10c>
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	2b08      	cmp	r3, #8
 8006310:	d104      	bne.n	800631c <HAL_TIM_PWM_Stop+0xe4>
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2201      	movs	r2, #1
 8006316:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800631a:	e013      	b.n	8006344 <HAL_TIM_PWM_Stop+0x10c>
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	2b0c      	cmp	r3, #12
 8006320:	d104      	bne.n	800632c <HAL_TIM_PWM_Stop+0xf4>
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2201      	movs	r2, #1
 8006326:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800632a:	e00b      	b.n	8006344 <HAL_TIM_PWM_Stop+0x10c>
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	2b10      	cmp	r3, #16
 8006330:	d104      	bne.n	800633c <HAL_TIM_PWM_Stop+0x104>
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	2201      	movs	r2, #1
 8006336:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800633a:	e003      	b.n	8006344 <HAL_TIM_PWM_Stop+0x10c>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2201      	movs	r2, #1
 8006340:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 8006344:	2300      	movs	r3, #0
}
 8006346:	4618      	mov	r0, r3
 8006348:	3708      	adds	r7, #8
 800634a:	46bd      	mov	sp, r7
 800634c:	bd80      	pop	{r7, pc}
 800634e:	bf00      	nop
 8006350:	40012c00 	.word	0x40012c00
 8006354:	40013400 	.word	0x40013400
 8006358:	40014000 	.word	0x40014000
 800635c:	40014400 	.word	0x40014400
 8006360:	40014800 	.word	0x40014800

08006364 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006364:	b580      	push	{r7, lr}
 8006366:	b084      	sub	sp, #16
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	68db      	ldr	r3, [r3, #12]
 8006372:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	691b      	ldr	r3, [r3, #16]
 800637a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800637c:	68bb      	ldr	r3, [r7, #8]
 800637e:	f003 0302 	and.w	r3, r3, #2
 8006382:	2b00      	cmp	r3, #0
 8006384:	d020      	beq.n	80063c8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	f003 0302 	and.w	r3, r3, #2
 800638c:	2b00      	cmp	r3, #0
 800638e:	d01b      	beq.n	80063c8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f06f 0202 	mvn.w	r2, #2
 8006398:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2201      	movs	r2, #1
 800639e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	699b      	ldr	r3, [r3, #24]
 80063a6:	f003 0303 	and.w	r3, r3, #3
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d003      	beq.n	80063b6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80063ae:	6878      	ldr	r0, [r7, #4]
 80063b0:	f000 f9fe 	bl	80067b0 <HAL_TIM_IC_CaptureCallback>
 80063b4:	e005      	b.n	80063c2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80063b6:	6878      	ldr	r0, [r7, #4]
 80063b8:	f000 f9f0 	bl	800679c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063bc:	6878      	ldr	r0, [r7, #4]
 80063be:	f000 fa01 	bl	80067c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2200      	movs	r2, #0
 80063c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80063c8:	68bb      	ldr	r3, [r7, #8]
 80063ca:	f003 0304 	and.w	r3, r3, #4
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d020      	beq.n	8006414 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	f003 0304 	and.w	r3, r3, #4
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d01b      	beq.n	8006414 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f06f 0204 	mvn.w	r2, #4
 80063e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	2202      	movs	r2, #2
 80063ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	699b      	ldr	r3, [r3, #24]
 80063f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d003      	beq.n	8006402 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80063fa:	6878      	ldr	r0, [r7, #4]
 80063fc:	f000 f9d8 	bl	80067b0 <HAL_TIM_IC_CaptureCallback>
 8006400:	e005      	b.n	800640e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006402:	6878      	ldr	r0, [r7, #4]
 8006404:	f000 f9ca 	bl	800679c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006408:	6878      	ldr	r0, [r7, #4]
 800640a:	f000 f9db 	bl	80067c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2200      	movs	r2, #0
 8006412:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006414:	68bb      	ldr	r3, [r7, #8]
 8006416:	f003 0308 	and.w	r3, r3, #8
 800641a:	2b00      	cmp	r3, #0
 800641c:	d020      	beq.n	8006460 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	f003 0308 	and.w	r3, r3, #8
 8006424:	2b00      	cmp	r3, #0
 8006426:	d01b      	beq.n	8006460 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f06f 0208 	mvn.w	r2, #8
 8006430:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2204      	movs	r2, #4
 8006436:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	69db      	ldr	r3, [r3, #28]
 800643e:	f003 0303 	and.w	r3, r3, #3
 8006442:	2b00      	cmp	r3, #0
 8006444:	d003      	beq.n	800644e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006446:	6878      	ldr	r0, [r7, #4]
 8006448:	f000 f9b2 	bl	80067b0 <HAL_TIM_IC_CaptureCallback>
 800644c:	e005      	b.n	800645a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800644e:	6878      	ldr	r0, [r7, #4]
 8006450:	f000 f9a4 	bl	800679c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006454:	6878      	ldr	r0, [r7, #4]
 8006456:	f000 f9b5 	bl	80067c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2200      	movs	r2, #0
 800645e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	f003 0310 	and.w	r3, r3, #16
 8006466:	2b00      	cmp	r3, #0
 8006468:	d020      	beq.n	80064ac <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	f003 0310 	and.w	r3, r3, #16
 8006470:	2b00      	cmp	r3, #0
 8006472:	d01b      	beq.n	80064ac <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f06f 0210 	mvn.w	r2, #16
 800647c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2208      	movs	r2, #8
 8006482:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	69db      	ldr	r3, [r3, #28]
 800648a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800648e:	2b00      	cmp	r3, #0
 8006490:	d003      	beq.n	800649a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006492:	6878      	ldr	r0, [r7, #4]
 8006494:	f000 f98c 	bl	80067b0 <HAL_TIM_IC_CaptureCallback>
 8006498:	e005      	b.n	80064a6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800649a:	6878      	ldr	r0, [r7, #4]
 800649c:	f000 f97e 	bl	800679c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064a0:	6878      	ldr	r0, [r7, #4]
 80064a2:	f000 f98f 	bl	80067c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	2200      	movs	r2, #0
 80064aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80064ac:	68bb      	ldr	r3, [r7, #8]
 80064ae:	f003 0301 	and.w	r3, r3, #1
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d00c      	beq.n	80064d0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	f003 0301 	and.w	r3, r3, #1
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d007      	beq.n	80064d0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f06f 0201 	mvn.w	r2, #1
 80064c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80064ca:	6878      	ldr	r0, [r7, #4]
 80064cc:	f7fb ff86 	bl	80023dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80064d0:	68bb      	ldr	r3, [r7, #8]
 80064d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d104      	bne.n	80064e4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80064da:	68bb      	ldr	r3, [r7, #8]
 80064dc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d00c      	beq.n	80064fe <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d007      	beq.n	80064fe <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80064f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80064f8:	6878      	ldr	r0, [r7, #4]
 80064fa:	f000 fdab 	bl	8007054 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80064fe:	68bb      	ldr	r3, [r7, #8]
 8006500:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006504:	2b00      	cmp	r3, #0
 8006506:	d00c      	beq.n	8006522 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800650e:	2b00      	cmp	r3, #0
 8006510:	d007      	beq.n	8006522 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800651a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800651c:	6878      	ldr	r0, [r7, #4]
 800651e:	f000 fda3 	bl	8007068 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006522:	68bb      	ldr	r3, [r7, #8]
 8006524:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006528:	2b00      	cmp	r3, #0
 800652a:	d00c      	beq.n	8006546 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006532:	2b00      	cmp	r3, #0
 8006534:	d007      	beq.n	8006546 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800653e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006540:	6878      	ldr	r0, [r7, #4]
 8006542:	f000 f949 	bl	80067d8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006546:	68bb      	ldr	r3, [r7, #8]
 8006548:	f003 0320 	and.w	r3, r3, #32
 800654c:	2b00      	cmp	r3, #0
 800654e:	d00c      	beq.n	800656a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	f003 0320 	and.w	r3, r3, #32
 8006556:	2b00      	cmp	r3, #0
 8006558:	d007      	beq.n	800656a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f06f 0220 	mvn.w	r2, #32
 8006562:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006564:	6878      	ldr	r0, [r7, #4]
 8006566:	f000 fd6b 	bl	8007040 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800656a:	bf00      	nop
 800656c:	3710      	adds	r7, #16
 800656e:	46bd      	mov	sp, r7
 8006570:	bd80      	pop	{r7, pc}
	...

08006574 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006574:	b580      	push	{r7, lr}
 8006576:	b086      	sub	sp, #24
 8006578:	af00      	add	r7, sp, #0
 800657a:	60f8      	str	r0, [r7, #12]
 800657c:	60b9      	str	r1, [r7, #8]
 800657e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006580:	2300      	movs	r3, #0
 8006582:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800658a:	2b01      	cmp	r3, #1
 800658c:	d101      	bne.n	8006592 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800658e:	2302      	movs	r3, #2
 8006590:	e0ff      	b.n	8006792 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	2201      	movs	r2, #1
 8006596:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2b14      	cmp	r3, #20
 800659e:	f200 80f0 	bhi.w	8006782 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80065a2:	a201      	add	r2, pc, #4	@ (adr r2, 80065a8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80065a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065a8:	080065fd 	.word	0x080065fd
 80065ac:	08006783 	.word	0x08006783
 80065b0:	08006783 	.word	0x08006783
 80065b4:	08006783 	.word	0x08006783
 80065b8:	0800663d 	.word	0x0800663d
 80065bc:	08006783 	.word	0x08006783
 80065c0:	08006783 	.word	0x08006783
 80065c4:	08006783 	.word	0x08006783
 80065c8:	0800667f 	.word	0x0800667f
 80065cc:	08006783 	.word	0x08006783
 80065d0:	08006783 	.word	0x08006783
 80065d4:	08006783 	.word	0x08006783
 80065d8:	080066bf 	.word	0x080066bf
 80065dc:	08006783 	.word	0x08006783
 80065e0:	08006783 	.word	0x08006783
 80065e4:	08006783 	.word	0x08006783
 80065e8:	08006701 	.word	0x08006701
 80065ec:	08006783 	.word	0x08006783
 80065f0:	08006783 	.word	0x08006783
 80065f4:	08006783 	.word	0x08006783
 80065f8:	08006741 	.word	0x08006741
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	68b9      	ldr	r1, [r7, #8]
 8006602:	4618      	mov	r0, r3
 8006604:	f000 f998 	bl	8006938 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	699a      	ldr	r2, [r3, #24]
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f042 0208 	orr.w	r2, r2, #8
 8006616:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	699a      	ldr	r2, [r3, #24]
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f022 0204 	bic.w	r2, r2, #4
 8006626:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	6999      	ldr	r1, [r3, #24]
 800662e:	68bb      	ldr	r3, [r7, #8]
 8006630:	691a      	ldr	r2, [r3, #16]
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	430a      	orrs	r2, r1
 8006638:	619a      	str	r2, [r3, #24]
      break;
 800663a:	e0a5      	b.n	8006788 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	68b9      	ldr	r1, [r7, #8]
 8006642:	4618      	mov	r0, r3
 8006644:	f000 fa08 	bl	8006a58 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	699a      	ldr	r2, [r3, #24]
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006656:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	699a      	ldr	r2, [r3, #24]
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006666:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	6999      	ldr	r1, [r3, #24]
 800666e:	68bb      	ldr	r3, [r7, #8]
 8006670:	691b      	ldr	r3, [r3, #16]
 8006672:	021a      	lsls	r2, r3, #8
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	430a      	orrs	r2, r1
 800667a:	619a      	str	r2, [r3, #24]
      break;
 800667c:	e084      	b.n	8006788 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	68b9      	ldr	r1, [r7, #8]
 8006684:	4618      	mov	r0, r3
 8006686:	f000 fa71 	bl	8006b6c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	69da      	ldr	r2, [r3, #28]
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f042 0208 	orr.w	r2, r2, #8
 8006698:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	69da      	ldr	r2, [r3, #28]
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f022 0204 	bic.w	r2, r2, #4
 80066a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	69d9      	ldr	r1, [r3, #28]
 80066b0:	68bb      	ldr	r3, [r7, #8]
 80066b2:	691a      	ldr	r2, [r3, #16]
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	430a      	orrs	r2, r1
 80066ba:	61da      	str	r2, [r3, #28]
      break;
 80066bc:	e064      	b.n	8006788 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	68b9      	ldr	r1, [r7, #8]
 80066c4:	4618      	mov	r0, r3
 80066c6:	f000 fad9 	bl	8006c7c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	69da      	ldr	r2, [r3, #28]
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80066d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	69da      	ldr	r2, [r3, #28]
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80066e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	69d9      	ldr	r1, [r3, #28]
 80066f0:	68bb      	ldr	r3, [r7, #8]
 80066f2:	691b      	ldr	r3, [r3, #16]
 80066f4:	021a      	lsls	r2, r3, #8
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	430a      	orrs	r2, r1
 80066fc:	61da      	str	r2, [r3, #28]
      break;
 80066fe:	e043      	b.n	8006788 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	68b9      	ldr	r1, [r7, #8]
 8006706:	4618      	mov	r0, r3
 8006708:	f000 fb22 	bl	8006d50 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f042 0208 	orr.w	r2, r2, #8
 800671a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f022 0204 	bic.w	r2, r2, #4
 800672a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8006732:	68bb      	ldr	r3, [r7, #8]
 8006734:	691a      	ldr	r2, [r3, #16]
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	430a      	orrs	r2, r1
 800673c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800673e:	e023      	b.n	8006788 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	68b9      	ldr	r1, [r7, #8]
 8006746:	4618      	mov	r0, r3
 8006748:	f000 fb66 	bl	8006e18 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800675a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800676a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8006772:	68bb      	ldr	r3, [r7, #8]
 8006774:	691b      	ldr	r3, [r3, #16]
 8006776:	021a      	lsls	r2, r3, #8
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	430a      	orrs	r2, r1
 800677e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006780:	e002      	b.n	8006788 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006782:	2301      	movs	r3, #1
 8006784:	75fb      	strb	r3, [r7, #23]
      break;
 8006786:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	2200      	movs	r2, #0
 800678c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006790:	7dfb      	ldrb	r3, [r7, #23]
}
 8006792:	4618      	mov	r0, r3
 8006794:	3718      	adds	r7, #24
 8006796:	46bd      	mov	sp, r7
 8006798:	bd80      	pop	{r7, pc}
 800679a:	bf00      	nop

0800679c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800679c:	b480      	push	{r7}
 800679e:	b083      	sub	sp, #12
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80067a4:	bf00      	nop
 80067a6:	370c      	adds	r7, #12
 80067a8:	46bd      	mov	sp, r7
 80067aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ae:	4770      	bx	lr

080067b0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80067b0:	b480      	push	{r7}
 80067b2:	b083      	sub	sp, #12
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80067b8:	bf00      	nop
 80067ba:	370c      	adds	r7, #12
 80067bc:	46bd      	mov	sp, r7
 80067be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c2:	4770      	bx	lr

080067c4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80067c4:	b480      	push	{r7}
 80067c6:	b083      	sub	sp, #12
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80067cc:	bf00      	nop
 80067ce:	370c      	adds	r7, #12
 80067d0:	46bd      	mov	sp, r7
 80067d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d6:	4770      	bx	lr

080067d8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80067d8:	b480      	push	{r7}
 80067da:	b083      	sub	sp, #12
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80067e0:	bf00      	nop
 80067e2:	370c      	adds	r7, #12
 80067e4:	46bd      	mov	sp, r7
 80067e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ea:	4770      	bx	lr

080067ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80067ec:	b480      	push	{r7}
 80067ee:	b085      	sub	sp, #20
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
 80067f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	4a46      	ldr	r2, [pc, #280]	@ (8006918 <TIM_Base_SetConfig+0x12c>)
 8006800:	4293      	cmp	r3, r2
 8006802:	d013      	beq.n	800682c <TIM_Base_SetConfig+0x40>
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800680a:	d00f      	beq.n	800682c <TIM_Base_SetConfig+0x40>
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	4a43      	ldr	r2, [pc, #268]	@ (800691c <TIM_Base_SetConfig+0x130>)
 8006810:	4293      	cmp	r3, r2
 8006812:	d00b      	beq.n	800682c <TIM_Base_SetConfig+0x40>
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	4a42      	ldr	r2, [pc, #264]	@ (8006920 <TIM_Base_SetConfig+0x134>)
 8006818:	4293      	cmp	r3, r2
 800681a:	d007      	beq.n	800682c <TIM_Base_SetConfig+0x40>
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	4a41      	ldr	r2, [pc, #260]	@ (8006924 <TIM_Base_SetConfig+0x138>)
 8006820:	4293      	cmp	r3, r2
 8006822:	d003      	beq.n	800682c <TIM_Base_SetConfig+0x40>
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	4a40      	ldr	r2, [pc, #256]	@ (8006928 <TIM_Base_SetConfig+0x13c>)
 8006828:	4293      	cmp	r3, r2
 800682a:	d108      	bne.n	800683e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006832:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	685b      	ldr	r3, [r3, #4]
 8006838:	68fa      	ldr	r2, [r7, #12]
 800683a:	4313      	orrs	r3, r2
 800683c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	4a35      	ldr	r2, [pc, #212]	@ (8006918 <TIM_Base_SetConfig+0x12c>)
 8006842:	4293      	cmp	r3, r2
 8006844:	d01f      	beq.n	8006886 <TIM_Base_SetConfig+0x9a>
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800684c:	d01b      	beq.n	8006886 <TIM_Base_SetConfig+0x9a>
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	4a32      	ldr	r2, [pc, #200]	@ (800691c <TIM_Base_SetConfig+0x130>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d017      	beq.n	8006886 <TIM_Base_SetConfig+0x9a>
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	4a31      	ldr	r2, [pc, #196]	@ (8006920 <TIM_Base_SetConfig+0x134>)
 800685a:	4293      	cmp	r3, r2
 800685c:	d013      	beq.n	8006886 <TIM_Base_SetConfig+0x9a>
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	4a30      	ldr	r2, [pc, #192]	@ (8006924 <TIM_Base_SetConfig+0x138>)
 8006862:	4293      	cmp	r3, r2
 8006864:	d00f      	beq.n	8006886 <TIM_Base_SetConfig+0x9a>
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	4a2f      	ldr	r2, [pc, #188]	@ (8006928 <TIM_Base_SetConfig+0x13c>)
 800686a:	4293      	cmp	r3, r2
 800686c:	d00b      	beq.n	8006886 <TIM_Base_SetConfig+0x9a>
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	4a2e      	ldr	r2, [pc, #184]	@ (800692c <TIM_Base_SetConfig+0x140>)
 8006872:	4293      	cmp	r3, r2
 8006874:	d007      	beq.n	8006886 <TIM_Base_SetConfig+0x9a>
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	4a2d      	ldr	r2, [pc, #180]	@ (8006930 <TIM_Base_SetConfig+0x144>)
 800687a:	4293      	cmp	r3, r2
 800687c:	d003      	beq.n	8006886 <TIM_Base_SetConfig+0x9a>
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	4a2c      	ldr	r2, [pc, #176]	@ (8006934 <TIM_Base_SetConfig+0x148>)
 8006882:	4293      	cmp	r3, r2
 8006884:	d108      	bne.n	8006898 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800688c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	68db      	ldr	r3, [r3, #12]
 8006892:	68fa      	ldr	r2, [r7, #12]
 8006894:	4313      	orrs	r3, r2
 8006896:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	695b      	ldr	r3, [r3, #20]
 80068a2:	4313      	orrs	r3, r2
 80068a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	68fa      	ldr	r2, [r7, #12]
 80068aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	689a      	ldr	r2, [r3, #8]
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	681a      	ldr	r2, [r3, #0]
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	4a16      	ldr	r2, [pc, #88]	@ (8006918 <TIM_Base_SetConfig+0x12c>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d00f      	beq.n	80068e4 <TIM_Base_SetConfig+0xf8>
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	4a18      	ldr	r2, [pc, #96]	@ (8006928 <TIM_Base_SetConfig+0x13c>)
 80068c8:	4293      	cmp	r3, r2
 80068ca:	d00b      	beq.n	80068e4 <TIM_Base_SetConfig+0xf8>
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	4a17      	ldr	r2, [pc, #92]	@ (800692c <TIM_Base_SetConfig+0x140>)
 80068d0:	4293      	cmp	r3, r2
 80068d2:	d007      	beq.n	80068e4 <TIM_Base_SetConfig+0xf8>
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	4a16      	ldr	r2, [pc, #88]	@ (8006930 <TIM_Base_SetConfig+0x144>)
 80068d8:	4293      	cmp	r3, r2
 80068da:	d003      	beq.n	80068e4 <TIM_Base_SetConfig+0xf8>
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	4a15      	ldr	r2, [pc, #84]	@ (8006934 <TIM_Base_SetConfig+0x148>)
 80068e0:	4293      	cmp	r3, r2
 80068e2:	d103      	bne.n	80068ec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	691a      	ldr	r2, [r3, #16]
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2201      	movs	r2, #1
 80068f0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	691b      	ldr	r3, [r3, #16]
 80068f6:	f003 0301 	and.w	r3, r3, #1
 80068fa:	2b01      	cmp	r3, #1
 80068fc:	d105      	bne.n	800690a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	691b      	ldr	r3, [r3, #16]
 8006902:	f023 0201 	bic.w	r2, r3, #1
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	611a      	str	r2, [r3, #16]
  }
}
 800690a:	bf00      	nop
 800690c:	3714      	adds	r7, #20
 800690e:	46bd      	mov	sp, r7
 8006910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006914:	4770      	bx	lr
 8006916:	bf00      	nop
 8006918:	40012c00 	.word	0x40012c00
 800691c:	40000400 	.word	0x40000400
 8006920:	40000800 	.word	0x40000800
 8006924:	40000c00 	.word	0x40000c00
 8006928:	40013400 	.word	0x40013400
 800692c:	40014000 	.word	0x40014000
 8006930:	40014400 	.word	0x40014400
 8006934:	40014800 	.word	0x40014800

08006938 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006938:	b480      	push	{r7}
 800693a:	b087      	sub	sp, #28
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
 8006940:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6a1b      	ldr	r3, [r3, #32]
 8006946:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	6a1b      	ldr	r3, [r3, #32]
 800694c:	f023 0201 	bic.w	r2, r3, #1
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	685b      	ldr	r3, [r3, #4]
 8006958:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	699b      	ldr	r3, [r3, #24]
 800695e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006966:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800696a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	f023 0303 	bic.w	r3, r3, #3
 8006972:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	68fa      	ldr	r2, [r7, #12]
 800697a:	4313      	orrs	r3, r2
 800697c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800697e:	697b      	ldr	r3, [r7, #20]
 8006980:	f023 0302 	bic.w	r3, r3, #2
 8006984:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	689b      	ldr	r3, [r3, #8]
 800698a:	697a      	ldr	r2, [r7, #20]
 800698c:	4313      	orrs	r3, r2
 800698e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	4a2c      	ldr	r2, [pc, #176]	@ (8006a44 <TIM_OC1_SetConfig+0x10c>)
 8006994:	4293      	cmp	r3, r2
 8006996:	d00f      	beq.n	80069b8 <TIM_OC1_SetConfig+0x80>
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	4a2b      	ldr	r2, [pc, #172]	@ (8006a48 <TIM_OC1_SetConfig+0x110>)
 800699c:	4293      	cmp	r3, r2
 800699e:	d00b      	beq.n	80069b8 <TIM_OC1_SetConfig+0x80>
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	4a2a      	ldr	r2, [pc, #168]	@ (8006a4c <TIM_OC1_SetConfig+0x114>)
 80069a4:	4293      	cmp	r3, r2
 80069a6:	d007      	beq.n	80069b8 <TIM_OC1_SetConfig+0x80>
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	4a29      	ldr	r2, [pc, #164]	@ (8006a50 <TIM_OC1_SetConfig+0x118>)
 80069ac:	4293      	cmp	r3, r2
 80069ae:	d003      	beq.n	80069b8 <TIM_OC1_SetConfig+0x80>
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	4a28      	ldr	r2, [pc, #160]	@ (8006a54 <TIM_OC1_SetConfig+0x11c>)
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d10c      	bne.n	80069d2 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80069b8:	697b      	ldr	r3, [r7, #20]
 80069ba:	f023 0308 	bic.w	r3, r3, #8
 80069be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	68db      	ldr	r3, [r3, #12]
 80069c4:	697a      	ldr	r2, [r7, #20]
 80069c6:	4313      	orrs	r3, r2
 80069c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80069ca:	697b      	ldr	r3, [r7, #20]
 80069cc:	f023 0304 	bic.w	r3, r3, #4
 80069d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	4a1b      	ldr	r2, [pc, #108]	@ (8006a44 <TIM_OC1_SetConfig+0x10c>)
 80069d6:	4293      	cmp	r3, r2
 80069d8:	d00f      	beq.n	80069fa <TIM_OC1_SetConfig+0xc2>
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	4a1a      	ldr	r2, [pc, #104]	@ (8006a48 <TIM_OC1_SetConfig+0x110>)
 80069de:	4293      	cmp	r3, r2
 80069e0:	d00b      	beq.n	80069fa <TIM_OC1_SetConfig+0xc2>
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	4a19      	ldr	r2, [pc, #100]	@ (8006a4c <TIM_OC1_SetConfig+0x114>)
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d007      	beq.n	80069fa <TIM_OC1_SetConfig+0xc2>
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	4a18      	ldr	r2, [pc, #96]	@ (8006a50 <TIM_OC1_SetConfig+0x118>)
 80069ee:	4293      	cmp	r3, r2
 80069f0:	d003      	beq.n	80069fa <TIM_OC1_SetConfig+0xc2>
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	4a17      	ldr	r2, [pc, #92]	@ (8006a54 <TIM_OC1_SetConfig+0x11c>)
 80069f6:	4293      	cmp	r3, r2
 80069f8:	d111      	bne.n	8006a1e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80069fa:	693b      	ldr	r3, [r7, #16]
 80069fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006a00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006a02:	693b      	ldr	r3, [r7, #16]
 8006a04:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006a08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	695b      	ldr	r3, [r3, #20]
 8006a0e:	693a      	ldr	r2, [r7, #16]
 8006a10:	4313      	orrs	r3, r2
 8006a12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	699b      	ldr	r3, [r3, #24]
 8006a18:	693a      	ldr	r2, [r7, #16]
 8006a1a:	4313      	orrs	r3, r2
 8006a1c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	693a      	ldr	r2, [r7, #16]
 8006a22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	68fa      	ldr	r2, [r7, #12]
 8006a28:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	685a      	ldr	r2, [r3, #4]
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	697a      	ldr	r2, [r7, #20]
 8006a36:	621a      	str	r2, [r3, #32]
}
 8006a38:	bf00      	nop
 8006a3a:	371c      	adds	r7, #28
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a42:	4770      	bx	lr
 8006a44:	40012c00 	.word	0x40012c00
 8006a48:	40013400 	.word	0x40013400
 8006a4c:	40014000 	.word	0x40014000
 8006a50:	40014400 	.word	0x40014400
 8006a54:	40014800 	.word	0x40014800

08006a58 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006a58:	b480      	push	{r7}
 8006a5a:	b087      	sub	sp, #28
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
 8006a60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6a1b      	ldr	r3, [r3, #32]
 8006a66:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	6a1b      	ldr	r3, [r3, #32]
 8006a6c:	f023 0210 	bic.w	r2, r3, #16
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	685b      	ldr	r3, [r3, #4]
 8006a78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	699b      	ldr	r3, [r3, #24]
 8006a7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006a86:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006a8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006a92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	021b      	lsls	r3, r3, #8
 8006a9a:	68fa      	ldr	r2, [r7, #12]
 8006a9c:	4313      	orrs	r3, r2
 8006a9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006aa0:	697b      	ldr	r3, [r7, #20]
 8006aa2:	f023 0320 	bic.w	r3, r3, #32
 8006aa6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	689b      	ldr	r3, [r3, #8]
 8006aac:	011b      	lsls	r3, r3, #4
 8006aae:	697a      	ldr	r2, [r7, #20]
 8006ab0:	4313      	orrs	r3, r2
 8006ab2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	4a28      	ldr	r2, [pc, #160]	@ (8006b58 <TIM_OC2_SetConfig+0x100>)
 8006ab8:	4293      	cmp	r3, r2
 8006aba:	d003      	beq.n	8006ac4 <TIM_OC2_SetConfig+0x6c>
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	4a27      	ldr	r2, [pc, #156]	@ (8006b5c <TIM_OC2_SetConfig+0x104>)
 8006ac0:	4293      	cmp	r3, r2
 8006ac2:	d10d      	bne.n	8006ae0 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006ac4:	697b      	ldr	r3, [r7, #20]
 8006ac6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006aca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	68db      	ldr	r3, [r3, #12]
 8006ad0:	011b      	lsls	r3, r3, #4
 8006ad2:	697a      	ldr	r2, [r7, #20]
 8006ad4:	4313      	orrs	r3, r2
 8006ad6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006ad8:	697b      	ldr	r3, [r7, #20]
 8006ada:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006ade:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	4a1d      	ldr	r2, [pc, #116]	@ (8006b58 <TIM_OC2_SetConfig+0x100>)
 8006ae4:	4293      	cmp	r3, r2
 8006ae6:	d00f      	beq.n	8006b08 <TIM_OC2_SetConfig+0xb0>
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	4a1c      	ldr	r2, [pc, #112]	@ (8006b5c <TIM_OC2_SetConfig+0x104>)
 8006aec:	4293      	cmp	r3, r2
 8006aee:	d00b      	beq.n	8006b08 <TIM_OC2_SetConfig+0xb0>
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	4a1b      	ldr	r2, [pc, #108]	@ (8006b60 <TIM_OC2_SetConfig+0x108>)
 8006af4:	4293      	cmp	r3, r2
 8006af6:	d007      	beq.n	8006b08 <TIM_OC2_SetConfig+0xb0>
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	4a1a      	ldr	r2, [pc, #104]	@ (8006b64 <TIM_OC2_SetConfig+0x10c>)
 8006afc:	4293      	cmp	r3, r2
 8006afe:	d003      	beq.n	8006b08 <TIM_OC2_SetConfig+0xb0>
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	4a19      	ldr	r2, [pc, #100]	@ (8006b68 <TIM_OC2_SetConfig+0x110>)
 8006b04:	4293      	cmp	r3, r2
 8006b06:	d113      	bne.n	8006b30 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006b08:	693b      	ldr	r3, [r7, #16]
 8006b0a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006b0e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006b10:	693b      	ldr	r3, [r7, #16]
 8006b12:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006b16:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	695b      	ldr	r3, [r3, #20]
 8006b1c:	009b      	lsls	r3, r3, #2
 8006b1e:	693a      	ldr	r2, [r7, #16]
 8006b20:	4313      	orrs	r3, r2
 8006b22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	699b      	ldr	r3, [r3, #24]
 8006b28:	009b      	lsls	r3, r3, #2
 8006b2a:	693a      	ldr	r2, [r7, #16]
 8006b2c:	4313      	orrs	r3, r2
 8006b2e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	693a      	ldr	r2, [r7, #16]
 8006b34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	68fa      	ldr	r2, [r7, #12]
 8006b3a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	685a      	ldr	r2, [r3, #4]
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	697a      	ldr	r2, [r7, #20]
 8006b48:	621a      	str	r2, [r3, #32]
}
 8006b4a:	bf00      	nop
 8006b4c:	371c      	adds	r7, #28
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b54:	4770      	bx	lr
 8006b56:	bf00      	nop
 8006b58:	40012c00 	.word	0x40012c00
 8006b5c:	40013400 	.word	0x40013400
 8006b60:	40014000 	.word	0x40014000
 8006b64:	40014400 	.word	0x40014400
 8006b68:	40014800 	.word	0x40014800

08006b6c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006b6c:	b480      	push	{r7}
 8006b6e:	b087      	sub	sp, #28
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
 8006b74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6a1b      	ldr	r3, [r3, #32]
 8006b7a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	6a1b      	ldr	r3, [r3, #32]
 8006b80:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	685b      	ldr	r3, [r3, #4]
 8006b8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	69db      	ldr	r3, [r3, #28]
 8006b92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006b9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	f023 0303 	bic.w	r3, r3, #3
 8006ba6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	68fa      	ldr	r2, [r7, #12]
 8006bae:	4313      	orrs	r3, r2
 8006bb0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006bb2:	697b      	ldr	r3, [r7, #20]
 8006bb4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006bb8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	689b      	ldr	r3, [r3, #8]
 8006bbe:	021b      	lsls	r3, r3, #8
 8006bc0:	697a      	ldr	r2, [r7, #20]
 8006bc2:	4313      	orrs	r3, r2
 8006bc4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	4a27      	ldr	r2, [pc, #156]	@ (8006c68 <TIM_OC3_SetConfig+0xfc>)
 8006bca:	4293      	cmp	r3, r2
 8006bcc:	d003      	beq.n	8006bd6 <TIM_OC3_SetConfig+0x6a>
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	4a26      	ldr	r2, [pc, #152]	@ (8006c6c <TIM_OC3_SetConfig+0x100>)
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	d10d      	bne.n	8006bf2 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006bd6:	697b      	ldr	r3, [r7, #20]
 8006bd8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006bdc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	68db      	ldr	r3, [r3, #12]
 8006be2:	021b      	lsls	r3, r3, #8
 8006be4:	697a      	ldr	r2, [r7, #20]
 8006be6:	4313      	orrs	r3, r2
 8006be8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006bea:	697b      	ldr	r3, [r7, #20]
 8006bec:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006bf0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	4a1c      	ldr	r2, [pc, #112]	@ (8006c68 <TIM_OC3_SetConfig+0xfc>)
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	d00f      	beq.n	8006c1a <TIM_OC3_SetConfig+0xae>
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	4a1b      	ldr	r2, [pc, #108]	@ (8006c6c <TIM_OC3_SetConfig+0x100>)
 8006bfe:	4293      	cmp	r3, r2
 8006c00:	d00b      	beq.n	8006c1a <TIM_OC3_SetConfig+0xae>
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	4a1a      	ldr	r2, [pc, #104]	@ (8006c70 <TIM_OC3_SetConfig+0x104>)
 8006c06:	4293      	cmp	r3, r2
 8006c08:	d007      	beq.n	8006c1a <TIM_OC3_SetConfig+0xae>
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	4a19      	ldr	r2, [pc, #100]	@ (8006c74 <TIM_OC3_SetConfig+0x108>)
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	d003      	beq.n	8006c1a <TIM_OC3_SetConfig+0xae>
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	4a18      	ldr	r2, [pc, #96]	@ (8006c78 <TIM_OC3_SetConfig+0x10c>)
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d113      	bne.n	8006c42 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006c1a:	693b      	ldr	r3, [r7, #16]
 8006c1c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006c20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006c22:	693b      	ldr	r3, [r7, #16]
 8006c24:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006c28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	695b      	ldr	r3, [r3, #20]
 8006c2e:	011b      	lsls	r3, r3, #4
 8006c30:	693a      	ldr	r2, [r7, #16]
 8006c32:	4313      	orrs	r3, r2
 8006c34:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	699b      	ldr	r3, [r3, #24]
 8006c3a:	011b      	lsls	r3, r3, #4
 8006c3c:	693a      	ldr	r2, [r7, #16]
 8006c3e:	4313      	orrs	r3, r2
 8006c40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	693a      	ldr	r2, [r7, #16]
 8006c46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	68fa      	ldr	r2, [r7, #12]
 8006c4c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	685a      	ldr	r2, [r3, #4]
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	697a      	ldr	r2, [r7, #20]
 8006c5a:	621a      	str	r2, [r3, #32]
}
 8006c5c:	bf00      	nop
 8006c5e:	371c      	adds	r7, #28
 8006c60:	46bd      	mov	sp, r7
 8006c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c66:	4770      	bx	lr
 8006c68:	40012c00 	.word	0x40012c00
 8006c6c:	40013400 	.word	0x40013400
 8006c70:	40014000 	.word	0x40014000
 8006c74:	40014400 	.word	0x40014400
 8006c78:	40014800 	.word	0x40014800

08006c7c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006c7c:	b480      	push	{r7}
 8006c7e:	b087      	sub	sp, #28
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
 8006c84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6a1b      	ldr	r3, [r3, #32]
 8006c8a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	6a1b      	ldr	r3, [r3, #32]
 8006c90:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	685b      	ldr	r3, [r3, #4]
 8006c9c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	69db      	ldr	r3, [r3, #28]
 8006ca2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006caa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006cae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006cb6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	021b      	lsls	r3, r3, #8
 8006cbe:	68fa      	ldr	r2, [r7, #12]
 8006cc0:	4313      	orrs	r3, r2
 8006cc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006cc4:	693b      	ldr	r3, [r7, #16]
 8006cc6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006cca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	689b      	ldr	r3, [r3, #8]
 8006cd0:	031b      	lsls	r3, r3, #12
 8006cd2:	693a      	ldr	r2, [r7, #16]
 8006cd4:	4313      	orrs	r3, r2
 8006cd6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	4a18      	ldr	r2, [pc, #96]	@ (8006d3c <TIM_OC4_SetConfig+0xc0>)
 8006cdc:	4293      	cmp	r3, r2
 8006cde:	d00f      	beq.n	8006d00 <TIM_OC4_SetConfig+0x84>
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	4a17      	ldr	r2, [pc, #92]	@ (8006d40 <TIM_OC4_SetConfig+0xc4>)
 8006ce4:	4293      	cmp	r3, r2
 8006ce6:	d00b      	beq.n	8006d00 <TIM_OC4_SetConfig+0x84>
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	4a16      	ldr	r2, [pc, #88]	@ (8006d44 <TIM_OC4_SetConfig+0xc8>)
 8006cec:	4293      	cmp	r3, r2
 8006cee:	d007      	beq.n	8006d00 <TIM_OC4_SetConfig+0x84>
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	4a15      	ldr	r2, [pc, #84]	@ (8006d48 <TIM_OC4_SetConfig+0xcc>)
 8006cf4:	4293      	cmp	r3, r2
 8006cf6:	d003      	beq.n	8006d00 <TIM_OC4_SetConfig+0x84>
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	4a14      	ldr	r2, [pc, #80]	@ (8006d4c <TIM_OC4_SetConfig+0xd0>)
 8006cfc:	4293      	cmp	r3, r2
 8006cfe:	d109      	bne.n	8006d14 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006d00:	697b      	ldr	r3, [r7, #20]
 8006d02:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006d06:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	695b      	ldr	r3, [r3, #20]
 8006d0c:	019b      	lsls	r3, r3, #6
 8006d0e:	697a      	ldr	r2, [r7, #20]
 8006d10:	4313      	orrs	r3, r2
 8006d12:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	697a      	ldr	r2, [r7, #20]
 8006d18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	68fa      	ldr	r2, [r7, #12]
 8006d1e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	685a      	ldr	r2, [r3, #4]
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	693a      	ldr	r2, [r7, #16]
 8006d2c:	621a      	str	r2, [r3, #32]
}
 8006d2e:	bf00      	nop
 8006d30:	371c      	adds	r7, #28
 8006d32:	46bd      	mov	sp, r7
 8006d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d38:	4770      	bx	lr
 8006d3a:	bf00      	nop
 8006d3c:	40012c00 	.word	0x40012c00
 8006d40:	40013400 	.word	0x40013400
 8006d44:	40014000 	.word	0x40014000
 8006d48:	40014400 	.word	0x40014400
 8006d4c:	40014800 	.word	0x40014800

08006d50 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006d50:	b480      	push	{r7}
 8006d52:	b087      	sub	sp, #28
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
 8006d58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6a1b      	ldr	r3, [r3, #32]
 8006d5e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	6a1b      	ldr	r3, [r3, #32]
 8006d64:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	685b      	ldr	r3, [r3, #4]
 8006d70:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006d7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	68fa      	ldr	r2, [r7, #12]
 8006d8a:	4313      	orrs	r3, r2
 8006d8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006d8e:	693b      	ldr	r3, [r7, #16]
 8006d90:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006d94:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	689b      	ldr	r3, [r3, #8]
 8006d9a:	041b      	lsls	r3, r3, #16
 8006d9c:	693a      	ldr	r2, [r7, #16]
 8006d9e:	4313      	orrs	r3, r2
 8006da0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	4a17      	ldr	r2, [pc, #92]	@ (8006e04 <TIM_OC5_SetConfig+0xb4>)
 8006da6:	4293      	cmp	r3, r2
 8006da8:	d00f      	beq.n	8006dca <TIM_OC5_SetConfig+0x7a>
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	4a16      	ldr	r2, [pc, #88]	@ (8006e08 <TIM_OC5_SetConfig+0xb8>)
 8006dae:	4293      	cmp	r3, r2
 8006db0:	d00b      	beq.n	8006dca <TIM_OC5_SetConfig+0x7a>
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	4a15      	ldr	r2, [pc, #84]	@ (8006e0c <TIM_OC5_SetConfig+0xbc>)
 8006db6:	4293      	cmp	r3, r2
 8006db8:	d007      	beq.n	8006dca <TIM_OC5_SetConfig+0x7a>
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	4a14      	ldr	r2, [pc, #80]	@ (8006e10 <TIM_OC5_SetConfig+0xc0>)
 8006dbe:	4293      	cmp	r3, r2
 8006dc0:	d003      	beq.n	8006dca <TIM_OC5_SetConfig+0x7a>
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	4a13      	ldr	r2, [pc, #76]	@ (8006e14 <TIM_OC5_SetConfig+0xc4>)
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d109      	bne.n	8006dde <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006dca:	697b      	ldr	r3, [r7, #20]
 8006dcc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006dd0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	695b      	ldr	r3, [r3, #20]
 8006dd6:	021b      	lsls	r3, r3, #8
 8006dd8:	697a      	ldr	r2, [r7, #20]
 8006dda:	4313      	orrs	r3, r2
 8006ddc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	697a      	ldr	r2, [r7, #20]
 8006de2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	68fa      	ldr	r2, [r7, #12]
 8006de8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006dea:	683b      	ldr	r3, [r7, #0]
 8006dec:	685a      	ldr	r2, [r3, #4]
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	693a      	ldr	r2, [r7, #16]
 8006df6:	621a      	str	r2, [r3, #32]
}
 8006df8:	bf00      	nop
 8006dfa:	371c      	adds	r7, #28
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e02:	4770      	bx	lr
 8006e04:	40012c00 	.word	0x40012c00
 8006e08:	40013400 	.word	0x40013400
 8006e0c:	40014000 	.word	0x40014000
 8006e10:	40014400 	.word	0x40014400
 8006e14:	40014800 	.word	0x40014800

08006e18 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006e18:	b480      	push	{r7}
 8006e1a:	b087      	sub	sp, #28
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
 8006e20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	6a1b      	ldr	r3, [r3, #32]
 8006e26:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	6a1b      	ldr	r3, [r3, #32]
 8006e2c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	685b      	ldr	r3, [r3, #4]
 8006e38:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006e46:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006e4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	021b      	lsls	r3, r3, #8
 8006e52:	68fa      	ldr	r2, [r7, #12]
 8006e54:	4313      	orrs	r3, r2
 8006e56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006e58:	693b      	ldr	r3, [r7, #16]
 8006e5a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006e5e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	689b      	ldr	r3, [r3, #8]
 8006e64:	051b      	lsls	r3, r3, #20
 8006e66:	693a      	ldr	r2, [r7, #16]
 8006e68:	4313      	orrs	r3, r2
 8006e6a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	4a18      	ldr	r2, [pc, #96]	@ (8006ed0 <TIM_OC6_SetConfig+0xb8>)
 8006e70:	4293      	cmp	r3, r2
 8006e72:	d00f      	beq.n	8006e94 <TIM_OC6_SetConfig+0x7c>
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	4a17      	ldr	r2, [pc, #92]	@ (8006ed4 <TIM_OC6_SetConfig+0xbc>)
 8006e78:	4293      	cmp	r3, r2
 8006e7a:	d00b      	beq.n	8006e94 <TIM_OC6_SetConfig+0x7c>
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	4a16      	ldr	r2, [pc, #88]	@ (8006ed8 <TIM_OC6_SetConfig+0xc0>)
 8006e80:	4293      	cmp	r3, r2
 8006e82:	d007      	beq.n	8006e94 <TIM_OC6_SetConfig+0x7c>
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	4a15      	ldr	r2, [pc, #84]	@ (8006edc <TIM_OC6_SetConfig+0xc4>)
 8006e88:	4293      	cmp	r3, r2
 8006e8a:	d003      	beq.n	8006e94 <TIM_OC6_SetConfig+0x7c>
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	4a14      	ldr	r2, [pc, #80]	@ (8006ee0 <TIM_OC6_SetConfig+0xc8>)
 8006e90:	4293      	cmp	r3, r2
 8006e92:	d109      	bne.n	8006ea8 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006e94:	697b      	ldr	r3, [r7, #20]
 8006e96:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006e9a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	695b      	ldr	r3, [r3, #20]
 8006ea0:	029b      	lsls	r3, r3, #10
 8006ea2:	697a      	ldr	r2, [r7, #20]
 8006ea4:	4313      	orrs	r3, r2
 8006ea6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	697a      	ldr	r2, [r7, #20]
 8006eac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	68fa      	ldr	r2, [r7, #12]
 8006eb2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	685a      	ldr	r2, [r3, #4]
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	693a      	ldr	r2, [r7, #16]
 8006ec0:	621a      	str	r2, [r3, #32]
}
 8006ec2:	bf00      	nop
 8006ec4:	371c      	adds	r7, #28
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ecc:	4770      	bx	lr
 8006ece:	bf00      	nop
 8006ed0:	40012c00 	.word	0x40012c00
 8006ed4:	40013400 	.word	0x40013400
 8006ed8:	40014000 	.word	0x40014000
 8006edc:	40014400 	.word	0x40014400
 8006ee0:	40014800 	.word	0x40014800

08006ee4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006ee4:	b480      	push	{r7}
 8006ee6:	b087      	sub	sp, #28
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	60f8      	str	r0, [r7, #12]
 8006eec:	60b9      	str	r1, [r7, #8]
 8006eee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006ef0:	68bb      	ldr	r3, [r7, #8]
 8006ef2:	f003 031f 	and.w	r3, r3, #31
 8006ef6:	2201      	movs	r2, #1
 8006ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8006efc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	6a1a      	ldr	r2, [r3, #32]
 8006f02:	697b      	ldr	r3, [r7, #20]
 8006f04:	43db      	mvns	r3, r3
 8006f06:	401a      	ands	r2, r3
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	6a1a      	ldr	r2, [r3, #32]
 8006f10:	68bb      	ldr	r3, [r7, #8]
 8006f12:	f003 031f 	and.w	r3, r3, #31
 8006f16:	6879      	ldr	r1, [r7, #4]
 8006f18:	fa01 f303 	lsl.w	r3, r1, r3
 8006f1c:	431a      	orrs	r2, r3
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	621a      	str	r2, [r3, #32]
}
 8006f22:	bf00      	nop
 8006f24:	371c      	adds	r7, #28
 8006f26:	46bd      	mov	sp, r7
 8006f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2c:	4770      	bx	lr
	...

08006f30 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006f30:	b480      	push	{r7}
 8006f32:	b085      	sub	sp, #20
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
 8006f38:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006f40:	2b01      	cmp	r3, #1
 8006f42:	d101      	bne.n	8006f48 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006f44:	2302      	movs	r3, #2
 8006f46:	e068      	b.n	800701a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2201      	movs	r2, #1
 8006f4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2202      	movs	r2, #2
 8006f54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	685b      	ldr	r3, [r3, #4]
 8006f5e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	689b      	ldr	r3, [r3, #8]
 8006f66:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	4a2e      	ldr	r2, [pc, #184]	@ (8007028 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	d004      	beq.n	8006f7c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	4a2d      	ldr	r2, [pc, #180]	@ (800702c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006f78:	4293      	cmp	r3, r2
 8006f7a:	d108      	bne.n	8006f8e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006f82:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	685b      	ldr	r3, [r3, #4]
 8006f88:	68fa      	ldr	r2, [r7, #12]
 8006f8a:	4313      	orrs	r3, r2
 8006f8c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f94:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	68fa      	ldr	r2, [r7, #12]
 8006f9c:	4313      	orrs	r3, r2
 8006f9e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	68fa      	ldr	r2, [r7, #12]
 8006fa6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	4a1e      	ldr	r2, [pc, #120]	@ (8007028 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006fae:	4293      	cmp	r3, r2
 8006fb0:	d01d      	beq.n	8006fee <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006fba:	d018      	beq.n	8006fee <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	4a1b      	ldr	r2, [pc, #108]	@ (8007030 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d013      	beq.n	8006fee <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	4a1a      	ldr	r2, [pc, #104]	@ (8007034 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	d00e      	beq.n	8006fee <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	4a18      	ldr	r2, [pc, #96]	@ (8007038 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006fd6:	4293      	cmp	r3, r2
 8006fd8:	d009      	beq.n	8006fee <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	4a13      	ldr	r2, [pc, #76]	@ (800702c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006fe0:	4293      	cmp	r3, r2
 8006fe2:	d004      	beq.n	8006fee <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	4a14      	ldr	r2, [pc, #80]	@ (800703c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006fea:	4293      	cmp	r3, r2
 8006fec:	d10c      	bne.n	8007008 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006fee:	68bb      	ldr	r3, [r7, #8]
 8006ff0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006ff4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	689b      	ldr	r3, [r3, #8]
 8006ffa:	68ba      	ldr	r2, [r7, #8]
 8006ffc:	4313      	orrs	r3, r2
 8006ffe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	68ba      	ldr	r2, [r7, #8]
 8007006:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2201      	movs	r2, #1
 800700c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2200      	movs	r2, #0
 8007014:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007018:	2300      	movs	r3, #0
}
 800701a:	4618      	mov	r0, r3
 800701c:	3714      	adds	r7, #20
 800701e:	46bd      	mov	sp, r7
 8007020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007024:	4770      	bx	lr
 8007026:	bf00      	nop
 8007028:	40012c00 	.word	0x40012c00
 800702c:	40013400 	.word	0x40013400
 8007030:	40000400 	.word	0x40000400
 8007034:	40000800 	.word	0x40000800
 8007038:	40000c00 	.word	0x40000c00
 800703c:	40014000 	.word	0x40014000

08007040 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007040:	b480      	push	{r7}
 8007042:	b083      	sub	sp, #12
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007048:	bf00      	nop
 800704a:	370c      	adds	r7, #12
 800704c:	46bd      	mov	sp, r7
 800704e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007052:	4770      	bx	lr

08007054 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007054:	b480      	push	{r7}
 8007056:	b083      	sub	sp, #12
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800705c:	bf00      	nop
 800705e:	370c      	adds	r7, #12
 8007060:	46bd      	mov	sp, r7
 8007062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007066:	4770      	bx	lr

08007068 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007068:	b480      	push	{r7}
 800706a:	b083      	sub	sp, #12
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007070:	bf00      	nop
 8007072:	370c      	adds	r7, #12
 8007074:	46bd      	mov	sp, r7
 8007076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707a:	4770      	bx	lr

0800707c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800707c:	b580      	push	{r7, lr}
 800707e:	b082      	sub	sp, #8
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d101      	bne.n	800708e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800708a:	2301      	movs	r3, #1
 800708c:	e040      	b.n	8007110 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007092:	2b00      	cmp	r3, #0
 8007094:	d106      	bne.n	80070a4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	2200      	movs	r2, #0
 800709a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800709e:	6878      	ldr	r0, [r7, #4]
 80070a0:	f7fb fbb0 	bl	8002804 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2224      	movs	r2, #36	@ 0x24
 80070a8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	681a      	ldr	r2, [r3, #0]
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f022 0201 	bic.w	r2, r2, #1
 80070b8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d002      	beq.n	80070c8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80070c2:	6878      	ldr	r0, [r7, #4]
 80070c4:	f000 fb6a 	bl	800779c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80070c8:	6878      	ldr	r0, [r7, #4]
 80070ca:	f000 f8af 	bl	800722c <UART_SetConfig>
 80070ce:	4603      	mov	r3, r0
 80070d0:	2b01      	cmp	r3, #1
 80070d2:	d101      	bne.n	80070d8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80070d4:	2301      	movs	r3, #1
 80070d6:	e01b      	b.n	8007110 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	685a      	ldr	r2, [r3, #4]
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80070e6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	689a      	ldr	r2, [r3, #8]
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80070f6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	681a      	ldr	r2, [r3, #0]
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f042 0201 	orr.w	r2, r2, #1
 8007106:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007108:	6878      	ldr	r0, [r7, #4]
 800710a:	f000 fbe9 	bl	80078e0 <UART_CheckIdleState>
 800710e:	4603      	mov	r3, r0
}
 8007110:	4618      	mov	r0, r3
 8007112:	3708      	adds	r7, #8
 8007114:	46bd      	mov	sp, r7
 8007116:	bd80      	pop	{r7, pc}

08007118 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b08a      	sub	sp, #40	@ 0x28
 800711c:	af02      	add	r7, sp, #8
 800711e:	60f8      	str	r0, [r7, #12]
 8007120:	60b9      	str	r1, [r7, #8]
 8007122:	603b      	str	r3, [r7, #0]
 8007124:	4613      	mov	r3, r2
 8007126:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800712c:	2b20      	cmp	r3, #32
 800712e:	d177      	bne.n	8007220 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8007130:	68bb      	ldr	r3, [r7, #8]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d002      	beq.n	800713c <HAL_UART_Transmit+0x24>
 8007136:	88fb      	ldrh	r3, [r7, #6]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d101      	bne.n	8007140 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800713c:	2301      	movs	r3, #1
 800713e:	e070      	b.n	8007222 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	2200      	movs	r2, #0
 8007144:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	2221      	movs	r2, #33	@ 0x21
 800714c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800714e:	f7fb fdad 	bl	8002cac <HAL_GetTick>
 8007152:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	88fa      	ldrh	r2, [r7, #6]
 8007158:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	88fa      	ldrh	r2, [r7, #6]
 8007160:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	689b      	ldr	r3, [r3, #8]
 8007168:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800716c:	d108      	bne.n	8007180 <HAL_UART_Transmit+0x68>
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	691b      	ldr	r3, [r3, #16]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d104      	bne.n	8007180 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8007176:	2300      	movs	r3, #0
 8007178:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800717a:	68bb      	ldr	r3, [r7, #8]
 800717c:	61bb      	str	r3, [r7, #24]
 800717e:	e003      	b.n	8007188 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8007180:	68bb      	ldr	r3, [r7, #8]
 8007182:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007184:	2300      	movs	r3, #0
 8007186:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007188:	e02f      	b.n	80071ea <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	9300      	str	r3, [sp, #0]
 800718e:	697b      	ldr	r3, [r7, #20]
 8007190:	2200      	movs	r2, #0
 8007192:	2180      	movs	r1, #128	@ 0x80
 8007194:	68f8      	ldr	r0, [r7, #12]
 8007196:	f000 fc4b 	bl	8007a30 <UART_WaitOnFlagUntilTimeout>
 800719a:	4603      	mov	r3, r0
 800719c:	2b00      	cmp	r3, #0
 800719e:	d004      	beq.n	80071aa <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	2220      	movs	r2, #32
 80071a4:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80071a6:	2303      	movs	r3, #3
 80071a8:	e03b      	b.n	8007222 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80071aa:	69fb      	ldr	r3, [r7, #28]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d10b      	bne.n	80071c8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80071b0:	69bb      	ldr	r3, [r7, #24]
 80071b2:	881a      	ldrh	r2, [r3, #0]
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80071bc:	b292      	uxth	r2, r2
 80071be:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80071c0:	69bb      	ldr	r3, [r7, #24]
 80071c2:	3302      	adds	r3, #2
 80071c4:	61bb      	str	r3, [r7, #24]
 80071c6:	e007      	b.n	80071d8 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80071c8:	69fb      	ldr	r3, [r7, #28]
 80071ca:	781a      	ldrb	r2, [r3, #0]
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80071d2:	69fb      	ldr	r3, [r7, #28]
 80071d4:	3301      	adds	r3, #1
 80071d6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80071de:	b29b      	uxth	r3, r3
 80071e0:	3b01      	subs	r3, #1
 80071e2:	b29a      	uxth	r2, r3
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80071f0:	b29b      	uxth	r3, r3
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d1c9      	bne.n	800718a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	9300      	str	r3, [sp, #0]
 80071fa:	697b      	ldr	r3, [r7, #20]
 80071fc:	2200      	movs	r2, #0
 80071fe:	2140      	movs	r1, #64	@ 0x40
 8007200:	68f8      	ldr	r0, [r7, #12]
 8007202:	f000 fc15 	bl	8007a30 <UART_WaitOnFlagUntilTimeout>
 8007206:	4603      	mov	r3, r0
 8007208:	2b00      	cmp	r3, #0
 800720a:	d004      	beq.n	8007216 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	2220      	movs	r2, #32
 8007210:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8007212:	2303      	movs	r3, #3
 8007214:	e005      	b.n	8007222 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	2220      	movs	r2, #32
 800721a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800721c:	2300      	movs	r3, #0
 800721e:	e000      	b.n	8007222 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8007220:	2302      	movs	r3, #2
  }
}
 8007222:	4618      	mov	r0, r3
 8007224:	3720      	adds	r7, #32
 8007226:	46bd      	mov	sp, r7
 8007228:	bd80      	pop	{r7, pc}
	...

0800722c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800722c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007230:	b08a      	sub	sp, #40	@ 0x28
 8007232:	af00      	add	r7, sp, #0
 8007234:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007236:	2300      	movs	r3, #0
 8007238:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	689a      	ldr	r2, [r3, #8]
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	691b      	ldr	r3, [r3, #16]
 8007244:	431a      	orrs	r2, r3
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	695b      	ldr	r3, [r3, #20]
 800724a:	431a      	orrs	r2, r3
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	69db      	ldr	r3, [r3, #28]
 8007250:	4313      	orrs	r3, r2
 8007252:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	681a      	ldr	r2, [r3, #0]
 800725a:	4ba4      	ldr	r3, [pc, #656]	@ (80074ec <UART_SetConfig+0x2c0>)
 800725c:	4013      	ands	r3, r2
 800725e:	68fa      	ldr	r2, [r7, #12]
 8007260:	6812      	ldr	r2, [r2, #0]
 8007262:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007264:	430b      	orrs	r3, r1
 8007266:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	685b      	ldr	r3, [r3, #4]
 800726e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	68da      	ldr	r2, [r3, #12]
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	430a      	orrs	r2, r1
 800727c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	699b      	ldr	r3, [r3, #24]
 8007282:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	4a99      	ldr	r2, [pc, #612]	@ (80074f0 <UART_SetConfig+0x2c4>)
 800728a:	4293      	cmp	r3, r2
 800728c:	d004      	beq.n	8007298 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	6a1b      	ldr	r3, [r3, #32]
 8007292:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007294:	4313      	orrs	r3, r2
 8007296:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	689b      	ldr	r3, [r3, #8]
 800729e:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80072a8:	430a      	orrs	r2, r1
 80072aa:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	4a90      	ldr	r2, [pc, #576]	@ (80074f4 <UART_SetConfig+0x2c8>)
 80072b2:	4293      	cmp	r3, r2
 80072b4:	d126      	bne.n	8007304 <UART_SetConfig+0xd8>
 80072b6:	4b90      	ldr	r3, [pc, #576]	@ (80074f8 <UART_SetConfig+0x2cc>)
 80072b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80072bc:	f003 0303 	and.w	r3, r3, #3
 80072c0:	2b03      	cmp	r3, #3
 80072c2:	d81b      	bhi.n	80072fc <UART_SetConfig+0xd0>
 80072c4:	a201      	add	r2, pc, #4	@ (adr r2, 80072cc <UART_SetConfig+0xa0>)
 80072c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072ca:	bf00      	nop
 80072cc:	080072dd 	.word	0x080072dd
 80072d0:	080072ed 	.word	0x080072ed
 80072d4:	080072e5 	.word	0x080072e5
 80072d8:	080072f5 	.word	0x080072f5
 80072dc:	2301      	movs	r3, #1
 80072de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80072e2:	e116      	b.n	8007512 <UART_SetConfig+0x2e6>
 80072e4:	2302      	movs	r3, #2
 80072e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80072ea:	e112      	b.n	8007512 <UART_SetConfig+0x2e6>
 80072ec:	2304      	movs	r3, #4
 80072ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80072f2:	e10e      	b.n	8007512 <UART_SetConfig+0x2e6>
 80072f4:	2308      	movs	r3, #8
 80072f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80072fa:	e10a      	b.n	8007512 <UART_SetConfig+0x2e6>
 80072fc:	2310      	movs	r3, #16
 80072fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007302:	e106      	b.n	8007512 <UART_SetConfig+0x2e6>
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	4a7c      	ldr	r2, [pc, #496]	@ (80074fc <UART_SetConfig+0x2d0>)
 800730a:	4293      	cmp	r3, r2
 800730c:	d138      	bne.n	8007380 <UART_SetConfig+0x154>
 800730e:	4b7a      	ldr	r3, [pc, #488]	@ (80074f8 <UART_SetConfig+0x2cc>)
 8007310:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007314:	f003 030c 	and.w	r3, r3, #12
 8007318:	2b0c      	cmp	r3, #12
 800731a:	d82d      	bhi.n	8007378 <UART_SetConfig+0x14c>
 800731c:	a201      	add	r2, pc, #4	@ (adr r2, 8007324 <UART_SetConfig+0xf8>)
 800731e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007322:	bf00      	nop
 8007324:	08007359 	.word	0x08007359
 8007328:	08007379 	.word	0x08007379
 800732c:	08007379 	.word	0x08007379
 8007330:	08007379 	.word	0x08007379
 8007334:	08007369 	.word	0x08007369
 8007338:	08007379 	.word	0x08007379
 800733c:	08007379 	.word	0x08007379
 8007340:	08007379 	.word	0x08007379
 8007344:	08007361 	.word	0x08007361
 8007348:	08007379 	.word	0x08007379
 800734c:	08007379 	.word	0x08007379
 8007350:	08007379 	.word	0x08007379
 8007354:	08007371 	.word	0x08007371
 8007358:	2300      	movs	r3, #0
 800735a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800735e:	e0d8      	b.n	8007512 <UART_SetConfig+0x2e6>
 8007360:	2302      	movs	r3, #2
 8007362:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007366:	e0d4      	b.n	8007512 <UART_SetConfig+0x2e6>
 8007368:	2304      	movs	r3, #4
 800736a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800736e:	e0d0      	b.n	8007512 <UART_SetConfig+0x2e6>
 8007370:	2308      	movs	r3, #8
 8007372:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007376:	e0cc      	b.n	8007512 <UART_SetConfig+0x2e6>
 8007378:	2310      	movs	r3, #16
 800737a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800737e:	e0c8      	b.n	8007512 <UART_SetConfig+0x2e6>
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	4a5e      	ldr	r2, [pc, #376]	@ (8007500 <UART_SetConfig+0x2d4>)
 8007386:	4293      	cmp	r3, r2
 8007388:	d125      	bne.n	80073d6 <UART_SetConfig+0x1aa>
 800738a:	4b5b      	ldr	r3, [pc, #364]	@ (80074f8 <UART_SetConfig+0x2cc>)
 800738c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007390:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007394:	2b30      	cmp	r3, #48	@ 0x30
 8007396:	d016      	beq.n	80073c6 <UART_SetConfig+0x19a>
 8007398:	2b30      	cmp	r3, #48	@ 0x30
 800739a:	d818      	bhi.n	80073ce <UART_SetConfig+0x1a2>
 800739c:	2b20      	cmp	r3, #32
 800739e:	d00a      	beq.n	80073b6 <UART_SetConfig+0x18a>
 80073a0:	2b20      	cmp	r3, #32
 80073a2:	d814      	bhi.n	80073ce <UART_SetConfig+0x1a2>
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d002      	beq.n	80073ae <UART_SetConfig+0x182>
 80073a8:	2b10      	cmp	r3, #16
 80073aa:	d008      	beq.n	80073be <UART_SetConfig+0x192>
 80073ac:	e00f      	b.n	80073ce <UART_SetConfig+0x1a2>
 80073ae:	2300      	movs	r3, #0
 80073b0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80073b4:	e0ad      	b.n	8007512 <UART_SetConfig+0x2e6>
 80073b6:	2302      	movs	r3, #2
 80073b8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80073bc:	e0a9      	b.n	8007512 <UART_SetConfig+0x2e6>
 80073be:	2304      	movs	r3, #4
 80073c0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80073c4:	e0a5      	b.n	8007512 <UART_SetConfig+0x2e6>
 80073c6:	2308      	movs	r3, #8
 80073c8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80073cc:	e0a1      	b.n	8007512 <UART_SetConfig+0x2e6>
 80073ce:	2310      	movs	r3, #16
 80073d0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80073d4:	e09d      	b.n	8007512 <UART_SetConfig+0x2e6>
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	4a4a      	ldr	r2, [pc, #296]	@ (8007504 <UART_SetConfig+0x2d8>)
 80073dc:	4293      	cmp	r3, r2
 80073de:	d125      	bne.n	800742c <UART_SetConfig+0x200>
 80073e0:	4b45      	ldr	r3, [pc, #276]	@ (80074f8 <UART_SetConfig+0x2cc>)
 80073e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80073e6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80073ea:	2bc0      	cmp	r3, #192	@ 0xc0
 80073ec:	d016      	beq.n	800741c <UART_SetConfig+0x1f0>
 80073ee:	2bc0      	cmp	r3, #192	@ 0xc0
 80073f0:	d818      	bhi.n	8007424 <UART_SetConfig+0x1f8>
 80073f2:	2b80      	cmp	r3, #128	@ 0x80
 80073f4:	d00a      	beq.n	800740c <UART_SetConfig+0x1e0>
 80073f6:	2b80      	cmp	r3, #128	@ 0x80
 80073f8:	d814      	bhi.n	8007424 <UART_SetConfig+0x1f8>
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d002      	beq.n	8007404 <UART_SetConfig+0x1d8>
 80073fe:	2b40      	cmp	r3, #64	@ 0x40
 8007400:	d008      	beq.n	8007414 <UART_SetConfig+0x1e8>
 8007402:	e00f      	b.n	8007424 <UART_SetConfig+0x1f8>
 8007404:	2300      	movs	r3, #0
 8007406:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800740a:	e082      	b.n	8007512 <UART_SetConfig+0x2e6>
 800740c:	2302      	movs	r3, #2
 800740e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007412:	e07e      	b.n	8007512 <UART_SetConfig+0x2e6>
 8007414:	2304      	movs	r3, #4
 8007416:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800741a:	e07a      	b.n	8007512 <UART_SetConfig+0x2e6>
 800741c:	2308      	movs	r3, #8
 800741e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007422:	e076      	b.n	8007512 <UART_SetConfig+0x2e6>
 8007424:	2310      	movs	r3, #16
 8007426:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800742a:	e072      	b.n	8007512 <UART_SetConfig+0x2e6>
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	4a35      	ldr	r2, [pc, #212]	@ (8007508 <UART_SetConfig+0x2dc>)
 8007432:	4293      	cmp	r3, r2
 8007434:	d12a      	bne.n	800748c <UART_SetConfig+0x260>
 8007436:	4b30      	ldr	r3, [pc, #192]	@ (80074f8 <UART_SetConfig+0x2cc>)
 8007438:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800743c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007440:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007444:	d01a      	beq.n	800747c <UART_SetConfig+0x250>
 8007446:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800744a:	d81b      	bhi.n	8007484 <UART_SetConfig+0x258>
 800744c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007450:	d00c      	beq.n	800746c <UART_SetConfig+0x240>
 8007452:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007456:	d815      	bhi.n	8007484 <UART_SetConfig+0x258>
 8007458:	2b00      	cmp	r3, #0
 800745a:	d003      	beq.n	8007464 <UART_SetConfig+0x238>
 800745c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007460:	d008      	beq.n	8007474 <UART_SetConfig+0x248>
 8007462:	e00f      	b.n	8007484 <UART_SetConfig+0x258>
 8007464:	2300      	movs	r3, #0
 8007466:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800746a:	e052      	b.n	8007512 <UART_SetConfig+0x2e6>
 800746c:	2302      	movs	r3, #2
 800746e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007472:	e04e      	b.n	8007512 <UART_SetConfig+0x2e6>
 8007474:	2304      	movs	r3, #4
 8007476:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800747a:	e04a      	b.n	8007512 <UART_SetConfig+0x2e6>
 800747c:	2308      	movs	r3, #8
 800747e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007482:	e046      	b.n	8007512 <UART_SetConfig+0x2e6>
 8007484:	2310      	movs	r3, #16
 8007486:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800748a:	e042      	b.n	8007512 <UART_SetConfig+0x2e6>
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	4a17      	ldr	r2, [pc, #92]	@ (80074f0 <UART_SetConfig+0x2c4>)
 8007492:	4293      	cmp	r3, r2
 8007494:	d13a      	bne.n	800750c <UART_SetConfig+0x2e0>
 8007496:	4b18      	ldr	r3, [pc, #96]	@ (80074f8 <UART_SetConfig+0x2cc>)
 8007498:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800749c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80074a0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80074a4:	d01a      	beq.n	80074dc <UART_SetConfig+0x2b0>
 80074a6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80074aa:	d81b      	bhi.n	80074e4 <UART_SetConfig+0x2b8>
 80074ac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80074b0:	d00c      	beq.n	80074cc <UART_SetConfig+0x2a0>
 80074b2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80074b6:	d815      	bhi.n	80074e4 <UART_SetConfig+0x2b8>
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d003      	beq.n	80074c4 <UART_SetConfig+0x298>
 80074bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80074c0:	d008      	beq.n	80074d4 <UART_SetConfig+0x2a8>
 80074c2:	e00f      	b.n	80074e4 <UART_SetConfig+0x2b8>
 80074c4:	2300      	movs	r3, #0
 80074c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80074ca:	e022      	b.n	8007512 <UART_SetConfig+0x2e6>
 80074cc:	2302      	movs	r3, #2
 80074ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80074d2:	e01e      	b.n	8007512 <UART_SetConfig+0x2e6>
 80074d4:	2304      	movs	r3, #4
 80074d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80074da:	e01a      	b.n	8007512 <UART_SetConfig+0x2e6>
 80074dc:	2308      	movs	r3, #8
 80074de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80074e2:	e016      	b.n	8007512 <UART_SetConfig+0x2e6>
 80074e4:	2310      	movs	r3, #16
 80074e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80074ea:	e012      	b.n	8007512 <UART_SetConfig+0x2e6>
 80074ec:	efff69f3 	.word	0xefff69f3
 80074f0:	40008000 	.word	0x40008000
 80074f4:	40013800 	.word	0x40013800
 80074f8:	40021000 	.word	0x40021000
 80074fc:	40004400 	.word	0x40004400
 8007500:	40004800 	.word	0x40004800
 8007504:	40004c00 	.word	0x40004c00
 8007508:	40005000 	.word	0x40005000
 800750c:	2310      	movs	r3, #16
 800750e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	4a9f      	ldr	r2, [pc, #636]	@ (8007794 <UART_SetConfig+0x568>)
 8007518:	4293      	cmp	r3, r2
 800751a:	d17a      	bne.n	8007612 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800751c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007520:	2b08      	cmp	r3, #8
 8007522:	d824      	bhi.n	800756e <UART_SetConfig+0x342>
 8007524:	a201      	add	r2, pc, #4	@ (adr r2, 800752c <UART_SetConfig+0x300>)
 8007526:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800752a:	bf00      	nop
 800752c:	08007551 	.word	0x08007551
 8007530:	0800756f 	.word	0x0800756f
 8007534:	08007559 	.word	0x08007559
 8007538:	0800756f 	.word	0x0800756f
 800753c:	0800755f 	.word	0x0800755f
 8007540:	0800756f 	.word	0x0800756f
 8007544:	0800756f 	.word	0x0800756f
 8007548:	0800756f 	.word	0x0800756f
 800754c:	08007567 	.word	0x08007567
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007550:	f7fd f908 	bl	8004764 <HAL_RCC_GetPCLK1Freq>
 8007554:	61f8      	str	r0, [r7, #28]
        break;
 8007556:	e010      	b.n	800757a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007558:	4b8f      	ldr	r3, [pc, #572]	@ (8007798 <UART_SetConfig+0x56c>)
 800755a:	61fb      	str	r3, [r7, #28]
        break;
 800755c:	e00d      	b.n	800757a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800755e:	f7fd f869 	bl	8004634 <HAL_RCC_GetSysClockFreq>
 8007562:	61f8      	str	r0, [r7, #28]
        break;
 8007564:	e009      	b.n	800757a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007566:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800756a:	61fb      	str	r3, [r7, #28]
        break;
 800756c:	e005      	b.n	800757a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800756e:	2300      	movs	r3, #0
 8007570:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007572:	2301      	movs	r3, #1
 8007574:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007578:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800757a:	69fb      	ldr	r3, [r7, #28]
 800757c:	2b00      	cmp	r3, #0
 800757e:	f000 80fb 	beq.w	8007778 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	685a      	ldr	r2, [r3, #4]
 8007586:	4613      	mov	r3, r2
 8007588:	005b      	lsls	r3, r3, #1
 800758a:	4413      	add	r3, r2
 800758c:	69fa      	ldr	r2, [r7, #28]
 800758e:	429a      	cmp	r2, r3
 8007590:	d305      	bcc.n	800759e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	685b      	ldr	r3, [r3, #4]
 8007596:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007598:	69fa      	ldr	r2, [r7, #28]
 800759a:	429a      	cmp	r2, r3
 800759c:	d903      	bls.n	80075a6 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800759e:	2301      	movs	r3, #1
 80075a0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80075a4:	e0e8      	b.n	8007778 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80075a6:	69fb      	ldr	r3, [r7, #28]
 80075a8:	2200      	movs	r2, #0
 80075aa:	461c      	mov	r4, r3
 80075ac:	4615      	mov	r5, r2
 80075ae:	f04f 0200 	mov.w	r2, #0
 80075b2:	f04f 0300 	mov.w	r3, #0
 80075b6:	022b      	lsls	r3, r5, #8
 80075b8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80075bc:	0222      	lsls	r2, r4, #8
 80075be:	68f9      	ldr	r1, [r7, #12]
 80075c0:	6849      	ldr	r1, [r1, #4]
 80075c2:	0849      	lsrs	r1, r1, #1
 80075c4:	2000      	movs	r0, #0
 80075c6:	4688      	mov	r8, r1
 80075c8:	4681      	mov	r9, r0
 80075ca:	eb12 0a08 	adds.w	sl, r2, r8
 80075ce:	eb43 0b09 	adc.w	fp, r3, r9
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	685b      	ldr	r3, [r3, #4]
 80075d6:	2200      	movs	r2, #0
 80075d8:	603b      	str	r3, [r7, #0]
 80075da:	607a      	str	r2, [r7, #4]
 80075dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80075e0:	4650      	mov	r0, sl
 80075e2:	4659      	mov	r1, fp
 80075e4:	f7f9 fb60 	bl	8000ca8 <__aeabi_uldivmod>
 80075e8:	4602      	mov	r2, r0
 80075ea:	460b      	mov	r3, r1
 80075ec:	4613      	mov	r3, r2
 80075ee:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80075f0:	69bb      	ldr	r3, [r7, #24]
 80075f2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80075f6:	d308      	bcc.n	800760a <UART_SetConfig+0x3de>
 80075f8:	69bb      	ldr	r3, [r7, #24]
 80075fa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80075fe:	d204      	bcs.n	800760a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	69ba      	ldr	r2, [r7, #24]
 8007606:	60da      	str	r2, [r3, #12]
 8007608:	e0b6      	b.n	8007778 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800760a:	2301      	movs	r3, #1
 800760c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007610:	e0b2      	b.n	8007778 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	69db      	ldr	r3, [r3, #28]
 8007616:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800761a:	d15e      	bne.n	80076da <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800761c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007620:	2b08      	cmp	r3, #8
 8007622:	d828      	bhi.n	8007676 <UART_SetConfig+0x44a>
 8007624:	a201      	add	r2, pc, #4	@ (adr r2, 800762c <UART_SetConfig+0x400>)
 8007626:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800762a:	bf00      	nop
 800762c:	08007651 	.word	0x08007651
 8007630:	08007659 	.word	0x08007659
 8007634:	08007661 	.word	0x08007661
 8007638:	08007677 	.word	0x08007677
 800763c:	08007667 	.word	0x08007667
 8007640:	08007677 	.word	0x08007677
 8007644:	08007677 	.word	0x08007677
 8007648:	08007677 	.word	0x08007677
 800764c:	0800766f 	.word	0x0800766f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007650:	f7fd f888 	bl	8004764 <HAL_RCC_GetPCLK1Freq>
 8007654:	61f8      	str	r0, [r7, #28]
        break;
 8007656:	e014      	b.n	8007682 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007658:	f7fd f89a 	bl	8004790 <HAL_RCC_GetPCLK2Freq>
 800765c:	61f8      	str	r0, [r7, #28]
        break;
 800765e:	e010      	b.n	8007682 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007660:	4b4d      	ldr	r3, [pc, #308]	@ (8007798 <UART_SetConfig+0x56c>)
 8007662:	61fb      	str	r3, [r7, #28]
        break;
 8007664:	e00d      	b.n	8007682 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007666:	f7fc ffe5 	bl	8004634 <HAL_RCC_GetSysClockFreq>
 800766a:	61f8      	str	r0, [r7, #28]
        break;
 800766c:	e009      	b.n	8007682 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800766e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007672:	61fb      	str	r3, [r7, #28]
        break;
 8007674:	e005      	b.n	8007682 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8007676:	2300      	movs	r3, #0
 8007678:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800767a:	2301      	movs	r3, #1
 800767c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007680:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007682:	69fb      	ldr	r3, [r7, #28]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d077      	beq.n	8007778 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007688:	69fb      	ldr	r3, [r7, #28]
 800768a:	005a      	lsls	r2, r3, #1
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	685b      	ldr	r3, [r3, #4]
 8007690:	085b      	lsrs	r3, r3, #1
 8007692:	441a      	add	r2, r3
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	685b      	ldr	r3, [r3, #4]
 8007698:	fbb2 f3f3 	udiv	r3, r2, r3
 800769c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800769e:	69bb      	ldr	r3, [r7, #24]
 80076a0:	2b0f      	cmp	r3, #15
 80076a2:	d916      	bls.n	80076d2 <UART_SetConfig+0x4a6>
 80076a4:	69bb      	ldr	r3, [r7, #24]
 80076a6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80076aa:	d212      	bcs.n	80076d2 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80076ac:	69bb      	ldr	r3, [r7, #24]
 80076ae:	b29b      	uxth	r3, r3
 80076b0:	f023 030f 	bic.w	r3, r3, #15
 80076b4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80076b6:	69bb      	ldr	r3, [r7, #24]
 80076b8:	085b      	lsrs	r3, r3, #1
 80076ba:	b29b      	uxth	r3, r3
 80076bc:	f003 0307 	and.w	r3, r3, #7
 80076c0:	b29a      	uxth	r2, r3
 80076c2:	8afb      	ldrh	r3, [r7, #22]
 80076c4:	4313      	orrs	r3, r2
 80076c6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	8afa      	ldrh	r2, [r7, #22]
 80076ce:	60da      	str	r2, [r3, #12]
 80076d0:	e052      	b.n	8007778 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80076d2:	2301      	movs	r3, #1
 80076d4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80076d8:	e04e      	b.n	8007778 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80076da:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80076de:	2b08      	cmp	r3, #8
 80076e0:	d827      	bhi.n	8007732 <UART_SetConfig+0x506>
 80076e2:	a201      	add	r2, pc, #4	@ (adr r2, 80076e8 <UART_SetConfig+0x4bc>)
 80076e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076e8:	0800770d 	.word	0x0800770d
 80076ec:	08007715 	.word	0x08007715
 80076f0:	0800771d 	.word	0x0800771d
 80076f4:	08007733 	.word	0x08007733
 80076f8:	08007723 	.word	0x08007723
 80076fc:	08007733 	.word	0x08007733
 8007700:	08007733 	.word	0x08007733
 8007704:	08007733 	.word	0x08007733
 8007708:	0800772b 	.word	0x0800772b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800770c:	f7fd f82a 	bl	8004764 <HAL_RCC_GetPCLK1Freq>
 8007710:	61f8      	str	r0, [r7, #28]
        break;
 8007712:	e014      	b.n	800773e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007714:	f7fd f83c 	bl	8004790 <HAL_RCC_GetPCLK2Freq>
 8007718:	61f8      	str	r0, [r7, #28]
        break;
 800771a:	e010      	b.n	800773e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800771c:	4b1e      	ldr	r3, [pc, #120]	@ (8007798 <UART_SetConfig+0x56c>)
 800771e:	61fb      	str	r3, [r7, #28]
        break;
 8007720:	e00d      	b.n	800773e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007722:	f7fc ff87 	bl	8004634 <HAL_RCC_GetSysClockFreq>
 8007726:	61f8      	str	r0, [r7, #28]
        break;
 8007728:	e009      	b.n	800773e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800772a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800772e:	61fb      	str	r3, [r7, #28]
        break;
 8007730:	e005      	b.n	800773e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8007732:	2300      	movs	r3, #0
 8007734:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007736:	2301      	movs	r3, #1
 8007738:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800773c:	bf00      	nop
    }

    if (pclk != 0U)
 800773e:	69fb      	ldr	r3, [r7, #28]
 8007740:	2b00      	cmp	r3, #0
 8007742:	d019      	beq.n	8007778 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	685b      	ldr	r3, [r3, #4]
 8007748:	085a      	lsrs	r2, r3, #1
 800774a:	69fb      	ldr	r3, [r7, #28]
 800774c:	441a      	add	r2, r3
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	685b      	ldr	r3, [r3, #4]
 8007752:	fbb2 f3f3 	udiv	r3, r2, r3
 8007756:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007758:	69bb      	ldr	r3, [r7, #24]
 800775a:	2b0f      	cmp	r3, #15
 800775c:	d909      	bls.n	8007772 <UART_SetConfig+0x546>
 800775e:	69bb      	ldr	r3, [r7, #24]
 8007760:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007764:	d205      	bcs.n	8007772 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007766:	69bb      	ldr	r3, [r7, #24]
 8007768:	b29a      	uxth	r2, r3
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	60da      	str	r2, [r3, #12]
 8007770:	e002      	b.n	8007778 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007772:	2301      	movs	r3, #1
 8007774:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	2200      	movs	r2, #0
 800777c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	2200      	movs	r2, #0
 8007782:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8007784:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8007788:	4618      	mov	r0, r3
 800778a:	3728      	adds	r7, #40	@ 0x28
 800778c:	46bd      	mov	sp, r7
 800778e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007792:	bf00      	nop
 8007794:	40008000 	.word	0x40008000
 8007798:	00f42400 	.word	0x00f42400

0800779c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800779c:	b480      	push	{r7}
 800779e:	b083      	sub	sp, #12
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077a8:	f003 0308 	and.w	r3, r3, #8
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d00a      	beq.n	80077c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	685b      	ldr	r3, [r3, #4]
 80077b6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	430a      	orrs	r2, r1
 80077c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077ca:	f003 0301 	and.w	r3, r3, #1
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d00a      	beq.n	80077e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	685b      	ldr	r3, [r3, #4]
 80077d8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	430a      	orrs	r2, r1
 80077e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077ec:	f003 0302 	and.w	r3, r3, #2
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d00a      	beq.n	800780a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	685b      	ldr	r3, [r3, #4]
 80077fa:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	430a      	orrs	r2, r1
 8007808:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800780e:	f003 0304 	and.w	r3, r3, #4
 8007812:	2b00      	cmp	r3, #0
 8007814:	d00a      	beq.n	800782c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	685b      	ldr	r3, [r3, #4]
 800781c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	430a      	orrs	r2, r1
 800782a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007830:	f003 0310 	and.w	r3, r3, #16
 8007834:	2b00      	cmp	r3, #0
 8007836:	d00a      	beq.n	800784e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	689b      	ldr	r3, [r3, #8]
 800783e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	430a      	orrs	r2, r1
 800784c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007852:	f003 0320 	and.w	r3, r3, #32
 8007856:	2b00      	cmp	r3, #0
 8007858:	d00a      	beq.n	8007870 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	689b      	ldr	r3, [r3, #8]
 8007860:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	430a      	orrs	r2, r1
 800786e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007874:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007878:	2b00      	cmp	r3, #0
 800787a:	d01a      	beq.n	80078b2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	685b      	ldr	r3, [r3, #4]
 8007882:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	430a      	orrs	r2, r1
 8007890:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007896:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800789a:	d10a      	bne.n	80078b2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	685b      	ldr	r3, [r3, #4]
 80078a2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	430a      	orrs	r2, r1
 80078b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d00a      	beq.n	80078d4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	685b      	ldr	r3, [r3, #4]
 80078c4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	430a      	orrs	r2, r1
 80078d2:	605a      	str	r2, [r3, #4]
  }
}
 80078d4:	bf00      	nop
 80078d6:	370c      	adds	r7, #12
 80078d8:	46bd      	mov	sp, r7
 80078da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078de:	4770      	bx	lr

080078e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80078e0:	b580      	push	{r7, lr}
 80078e2:	b098      	sub	sp, #96	@ 0x60
 80078e4:	af02      	add	r7, sp, #8
 80078e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	2200      	movs	r2, #0
 80078ec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80078f0:	f7fb f9dc 	bl	8002cac <HAL_GetTick>
 80078f4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	f003 0308 	and.w	r3, r3, #8
 8007900:	2b08      	cmp	r3, #8
 8007902:	d12e      	bne.n	8007962 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007904:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007908:	9300      	str	r3, [sp, #0]
 800790a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800790c:	2200      	movs	r2, #0
 800790e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007912:	6878      	ldr	r0, [r7, #4]
 8007914:	f000 f88c 	bl	8007a30 <UART_WaitOnFlagUntilTimeout>
 8007918:	4603      	mov	r3, r0
 800791a:	2b00      	cmp	r3, #0
 800791c:	d021      	beq.n	8007962 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007924:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007926:	e853 3f00 	ldrex	r3, [r3]
 800792a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800792c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800792e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007932:	653b      	str	r3, [r7, #80]	@ 0x50
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	461a      	mov	r2, r3
 800793a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800793c:	647b      	str	r3, [r7, #68]	@ 0x44
 800793e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007940:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007942:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007944:	e841 2300 	strex	r3, r2, [r1]
 8007948:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800794a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800794c:	2b00      	cmp	r3, #0
 800794e:	d1e6      	bne.n	800791e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2220      	movs	r2, #32
 8007954:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	2200      	movs	r2, #0
 800795a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800795e:	2303      	movs	r3, #3
 8007960:	e062      	b.n	8007a28 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	f003 0304 	and.w	r3, r3, #4
 800796c:	2b04      	cmp	r3, #4
 800796e:	d149      	bne.n	8007a04 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007970:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007974:	9300      	str	r3, [sp, #0]
 8007976:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007978:	2200      	movs	r2, #0
 800797a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800797e:	6878      	ldr	r0, [r7, #4]
 8007980:	f000 f856 	bl	8007a30 <UART_WaitOnFlagUntilTimeout>
 8007984:	4603      	mov	r3, r0
 8007986:	2b00      	cmp	r3, #0
 8007988:	d03c      	beq.n	8007a04 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007990:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007992:	e853 3f00 	ldrex	r3, [r3]
 8007996:	623b      	str	r3, [r7, #32]
   return(result);
 8007998:	6a3b      	ldr	r3, [r7, #32]
 800799a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800799e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	461a      	mov	r2, r3
 80079a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80079a8:	633b      	str	r3, [r7, #48]	@ 0x30
 80079aa:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079ac:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80079ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80079b0:	e841 2300 	strex	r3, r2, [r1]
 80079b4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80079b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d1e6      	bne.n	800798a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	3308      	adds	r3, #8
 80079c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079c4:	693b      	ldr	r3, [r7, #16]
 80079c6:	e853 3f00 	ldrex	r3, [r3]
 80079ca:	60fb      	str	r3, [r7, #12]
   return(result);
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	f023 0301 	bic.w	r3, r3, #1
 80079d2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	3308      	adds	r3, #8
 80079da:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80079dc:	61fa      	str	r2, [r7, #28]
 80079de:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079e0:	69b9      	ldr	r1, [r7, #24]
 80079e2:	69fa      	ldr	r2, [r7, #28]
 80079e4:	e841 2300 	strex	r3, r2, [r1]
 80079e8:	617b      	str	r3, [r7, #20]
   return(result);
 80079ea:	697b      	ldr	r3, [r7, #20]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d1e5      	bne.n	80079bc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2220      	movs	r2, #32
 80079f4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2200      	movs	r2, #0
 80079fc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007a00:	2303      	movs	r3, #3
 8007a02:	e011      	b.n	8007a28 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	2220      	movs	r2, #32
 8007a08:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	2220      	movs	r2, #32
 8007a0e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	2200      	movs	r2, #0
 8007a16:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	2200      	movs	r2, #0
 8007a22:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8007a26:	2300      	movs	r3, #0
}
 8007a28:	4618      	mov	r0, r3
 8007a2a:	3758      	adds	r7, #88	@ 0x58
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	bd80      	pop	{r7, pc}

08007a30 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b084      	sub	sp, #16
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	60f8      	str	r0, [r7, #12]
 8007a38:	60b9      	str	r1, [r7, #8]
 8007a3a:	603b      	str	r3, [r7, #0]
 8007a3c:	4613      	mov	r3, r2
 8007a3e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007a40:	e04f      	b.n	8007ae2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007a42:	69bb      	ldr	r3, [r7, #24]
 8007a44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a48:	d04b      	beq.n	8007ae2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007a4a:	f7fb f92f 	bl	8002cac <HAL_GetTick>
 8007a4e:	4602      	mov	r2, r0
 8007a50:	683b      	ldr	r3, [r7, #0]
 8007a52:	1ad3      	subs	r3, r2, r3
 8007a54:	69ba      	ldr	r2, [r7, #24]
 8007a56:	429a      	cmp	r2, r3
 8007a58:	d302      	bcc.n	8007a60 <UART_WaitOnFlagUntilTimeout+0x30>
 8007a5a:	69bb      	ldr	r3, [r7, #24]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d101      	bne.n	8007a64 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007a60:	2303      	movs	r3, #3
 8007a62:	e04e      	b.n	8007b02 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	f003 0304 	and.w	r3, r3, #4
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d037      	beq.n	8007ae2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007a72:	68bb      	ldr	r3, [r7, #8]
 8007a74:	2b80      	cmp	r3, #128	@ 0x80
 8007a76:	d034      	beq.n	8007ae2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007a78:	68bb      	ldr	r3, [r7, #8]
 8007a7a:	2b40      	cmp	r3, #64	@ 0x40
 8007a7c:	d031      	beq.n	8007ae2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	69db      	ldr	r3, [r3, #28]
 8007a84:	f003 0308 	and.w	r3, r3, #8
 8007a88:	2b08      	cmp	r3, #8
 8007a8a:	d110      	bne.n	8007aae <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	2208      	movs	r2, #8
 8007a92:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007a94:	68f8      	ldr	r0, [r7, #12]
 8007a96:	f000 f838 	bl	8007b0a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	2208      	movs	r2, #8
 8007a9e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8007aaa:	2301      	movs	r3, #1
 8007aac:	e029      	b.n	8007b02 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	69db      	ldr	r3, [r3, #28]
 8007ab4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007ab8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007abc:	d111      	bne.n	8007ae2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007ac6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007ac8:	68f8      	ldr	r0, [r7, #12]
 8007aca:	f000 f81e 	bl	8007b0a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	2220      	movs	r2, #32
 8007ad2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	2200      	movs	r2, #0
 8007ada:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8007ade:	2303      	movs	r3, #3
 8007ae0:	e00f      	b.n	8007b02 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	69da      	ldr	r2, [r3, #28]
 8007ae8:	68bb      	ldr	r3, [r7, #8]
 8007aea:	4013      	ands	r3, r2
 8007aec:	68ba      	ldr	r2, [r7, #8]
 8007aee:	429a      	cmp	r2, r3
 8007af0:	bf0c      	ite	eq
 8007af2:	2301      	moveq	r3, #1
 8007af4:	2300      	movne	r3, #0
 8007af6:	b2db      	uxtb	r3, r3
 8007af8:	461a      	mov	r2, r3
 8007afa:	79fb      	ldrb	r3, [r7, #7]
 8007afc:	429a      	cmp	r2, r3
 8007afe:	d0a0      	beq.n	8007a42 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007b00:	2300      	movs	r3, #0
}
 8007b02:	4618      	mov	r0, r3
 8007b04:	3710      	adds	r7, #16
 8007b06:	46bd      	mov	sp, r7
 8007b08:	bd80      	pop	{r7, pc}

08007b0a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007b0a:	b480      	push	{r7}
 8007b0c:	b095      	sub	sp, #84	@ 0x54
 8007b0e:	af00      	add	r7, sp, #0
 8007b10:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b1a:	e853 3f00 	ldrex	r3, [r3]
 8007b1e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007b20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b22:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007b26:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	461a      	mov	r2, r3
 8007b2e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007b30:	643b      	str	r3, [r7, #64]	@ 0x40
 8007b32:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b34:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007b36:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007b38:	e841 2300 	strex	r3, r2, [r1]
 8007b3c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007b3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d1e6      	bne.n	8007b12 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	3308      	adds	r3, #8
 8007b4a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b4c:	6a3b      	ldr	r3, [r7, #32]
 8007b4e:	e853 3f00 	ldrex	r3, [r3]
 8007b52:	61fb      	str	r3, [r7, #28]
   return(result);
 8007b54:	69fb      	ldr	r3, [r7, #28]
 8007b56:	f023 0301 	bic.w	r3, r3, #1
 8007b5a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	3308      	adds	r3, #8
 8007b62:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007b64:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007b66:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b68:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007b6a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007b6c:	e841 2300 	strex	r3, r2, [r1]
 8007b70:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007b72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d1e5      	bne.n	8007b44 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007b7c:	2b01      	cmp	r3, #1
 8007b7e:	d118      	bne.n	8007bb2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	e853 3f00 	ldrex	r3, [r3]
 8007b8c:	60bb      	str	r3, [r7, #8]
   return(result);
 8007b8e:	68bb      	ldr	r3, [r7, #8]
 8007b90:	f023 0310 	bic.w	r3, r3, #16
 8007b94:	647b      	str	r3, [r7, #68]	@ 0x44
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	461a      	mov	r2, r3
 8007b9c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007b9e:	61bb      	str	r3, [r7, #24]
 8007ba0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ba2:	6979      	ldr	r1, [r7, #20]
 8007ba4:	69ba      	ldr	r2, [r7, #24]
 8007ba6:	e841 2300 	strex	r3, r2, [r1]
 8007baa:	613b      	str	r3, [r7, #16]
   return(result);
 8007bac:	693b      	ldr	r3, [r7, #16]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d1e6      	bne.n	8007b80 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	2220      	movs	r2, #32
 8007bb6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	2200      	movs	r2, #0
 8007bbe:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8007bc6:	bf00      	nop
 8007bc8:	3754      	adds	r7, #84	@ 0x54
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd0:	4770      	bx	lr
	...

08007bd4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8007bd4:	b580      	push	{r7, lr}
 8007bd6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8007bd8:	4904      	ldr	r1, [pc, #16]	@ (8007bec <MX_FATFS_Init+0x18>)
 8007bda:	4805      	ldr	r0, [pc, #20]	@ (8007bf0 <MX_FATFS_Init+0x1c>)
 8007bdc:	f003 f944 	bl	800ae68 <FATFS_LinkDriver>
 8007be0:	4603      	mov	r3, r0
 8007be2:	461a      	mov	r2, r3
 8007be4:	4b03      	ldr	r3, [pc, #12]	@ (8007bf4 <MX_FATFS_Init+0x20>)
 8007be6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8007be8:	bf00      	nop
 8007bea:	bd80      	pop	{r7, pc}
 8007bec:	20000800 	.word	0x20000800
 8007bf0:	20000018 	.word	0x20000018
 8007bf4:	200007fc 	.word	0x200007fc

08007bf8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8007bf8:	b480      	push	{r7}
 8007bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8007bfc:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8007bfe:	4618      	mov	r0, r3
 8007c00:	46bd      	mov	sp, r7
 8007c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c06:	4770      	bx	lr

08007c08 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b082      	sub	sp, #8
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	4603      	mov	r3, r0
 8007c10:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return USER_SPI_initialize(pdrv);
 8007c12:	79fb      	ldrb	r3, [r7, #7]
 8007c14:	4618      	mov	r0, r3
 8007c16:	f000 f9d3 	bl	8007fc0 <USER_SPI_initialize>
 8007c1a:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	3708      	adds	r7, #8
 8007c20:	46bd      	mov	sp, r7
 8007c22:	bd80      	pop	{r7, pc}

08007c24 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8007c24:	b580      	push	{r7, lr}
 8007c26:	b082      	sub	sp, #8
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	4603      	mov	r3, r0
 8007c2c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return USER_SPI_status(pdrv);
 8007c2e:	79fb      	ldrb	r3, [r7, #7]
 8007c30:	4618      	mov	r0, r3
 8007c32:	f000 fab1 	bl	8008198 <USER_SPI_status>
 8007c36:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8007c38:	4618      	mov	r0, r3
 8007c3a:	3708      	adds	r7, #8
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	bd80      	pop	{r7, pc}

08007c40 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8007c40:	b580      	push	{r7, lr}
 8007c42:	b084      	sub	sp, #16
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	60b9      	str	r1, [r7, #8]
 8007c48:	607a      	str	r2, [r7, #4]
 8007c4a:	603b      	str	r3, [r7, #0]
 8007c4c:	4603      	mov	r3, r0
 8007c4e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return USER_SPI_read(pdrv, buff, sector, count);
 8007c50:	7bf8      	ldrb	r0, [r7, #15]
 8007c52:	683b      	ldr	r3, [r7, #0]
 8007c54:	687a      	ldr	r2, [r7, #4]
 8007c56:	68b9      	ldr	r1, [r7, #8]
 8007c58:	f000 fab4 	bl	80081c4 <USER_SPI_read>
 8007c5c:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8007c5e:	4618      	mov	r0, r3
 8007c60:	3710      	adds	r7, #16
 8007c62:	46bd      	mov	sp, r7
 8007c64:	bd80      	pop	{r7, pc}

08007c66 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8007c66:	b580      	push	{r7, lr}
 8007c68:	b084      	sub	sp, #16
 8007c6a:	af00      	add	r7, sp, #0
 8007c6c:	60b9      	str	r1, [r7, #8]
 8007c6e:	607a      	str	r2, [r7, #4]
 8007c70:	603b      	str	r3, [r7, #0]
 8007c72:	4603      	mov	r3, r0
 8007c74:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return USER_SPI_write(pdrv, buff, sector, count);
 8007c76:	7bf8      	ldrb	r0, [r7, #15]
 8007c78:	683b      	ldr	r3, [r7, #0]
 8007c7a:	687a      	ldr	r2, [r7, #4]
 8007c7c:	68b9      	ldr	r1, [r7, #8]
 8007c7e:	f000 fb07 	bl	8008290 <USER_SPI_write>
 8007c82:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8007c84:	4618      	mov	r0, r3
 8007c86:	3710      	adds	r7, #16
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	bd80      	pop	{r7, pc}

08007c8c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	b082      	sub	sp, #8
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	4603      	mov	r3, r0
 8007c94:	603a      	str	r2, [r7, #0]
 8007c96:	71fb      	strb	r3, [r7, #7]
 8007c98:	460b      	mov	r3, r1
 8007c9a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return USER_SPI_ioctl(pdrv, cmd, buff);
 8007c9c:	79b9      	ldrb	r1, [r7, #6]
 8007c9e:	79fb      	ldrb	r3, [r7, #7]
 8007ca0:	683a      	ldr	r2, [r7, #0]
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	f000 fb70 	bl	8008388 <USER_SPI_ioctl>
 8007ca8:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8007caa:	4618      	mov	r0, r3
 8007cac:	3708      	adds	r7, #8
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	bd80      	pop	{r7, pc}
	...

08007cb4 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	b082      	sub	sp, #8
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8007cbc:	f7fa fff6 	bl	8002cac <HAL_GetTick>
 8007cc0:	4603      	mov	r3, r0
 8007cc2:	4a04      	ldr	r2, [pc, #16]	@ (8007cd4 <SPI_Timer_On+0x20>)
 8007cc4:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 8007cc6:	4a04      	ldr	r2, [pc, #16]	@ (8007cd8 <SPI_Timer_On+0x24>)
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	6013      	str	r3, [r2, #0]
}
 8007ccc:	bf00      	nop
 8007cce:	3708      	adds	r7, #8
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	bd80      	pop	{r7, pc}
 8007cd4:	20000808 	.word	0x20000808
 8007cd8:	2000080c 	.word	0x2000080c

08007cdc <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8007ce0:	f7fa ffe4 	bl	8002cac <HAL_GetTick>
 8007ce4:	4602      	mov	r2, r0
 8007ce6:	4b06      	ldr	r3, [pc, #24]	@ (8007d00 <SPI_Timer_Status+0x24>)
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	1ad2      	subs	r2, r2, r3
 8007cec:	4b05      	ldr	r3, [pc, #20]	@ (8007d04 <SPI_Timer_Status+0x28>)
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	429a      	cmp	r2, r3
 8007cf2:	bf34      	ite	cc
 8007cf4:	2301      	movcc	r3, #1
 8007cf6:	2300      	movcs	r3, #0
 8007cf8:	b2db      	uxtb	r3, r3
}
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	bd80      	pop	{r7, pc}
 8007cfe:	bf00      	nop
 8007d00:	20000808 	.word	0x20000808
 8007d04:	2000080c 	.word	0x2000080c

08007d08 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b086      	sub	sp, #24
 8007d0c:	af02      	add	r7, sp, #8
 8007d0e:	4603      	mov	r3, r0
 8007d10:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8007d12:	f107 020f 	add.w	r2, r7, #15
 8007d16:	1df9      	adds	r1, r7, #7
 8007d18:	2332      	movs	r3, #50	@ 0x32
 8007d1a:	9300      	str	r3, [sp, #0]
 8007d1c:	2301      	movs	r3, #1
 8007d1e:	4804      	ldr	r0, [pc, #16]	@ (8007d30 <xchg_spi+0x28>)
 8007d20:	f7fd fcb3 	bl	800568a <HAL_SPI_TransmitReceive>
    return rxDat;
 8007d24:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d26:	4618      	mov	r0, r3
 8007d28:	3710      	adds	r7, #16
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	bd80      	pop	{r7, pc}
 8007d2e:	bf00      	nop
 8007d30:	2000026c 	.word	0x2000026c

08007d34 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8007d34:	b590      	push	{r4, r7, lr}
 8007d36:	b085      	sub	sp, #20
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]
 8007d3c:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 8007d3e:	2300      	movs	r3, #0
 8007d40:	60fb      	str	r3, [r7, #12]
 8007d42:	e00a      	b.n	8007d5a <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8007d44:	687a      	ldr	r2, [r7, #4]
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	18d4      	adds	r4, r2, r3
 8007d4a:	20ff      	movs	r0, #255	@ 0xff
 8007d4c:	f7ff ffdc 	bl	8007d08 <xchg_spi>
 8007d50:	4603      	mov	r3, r0
 8007d52:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	3301      	adds	r3, #1
 8007d58:	60fb      	str	r3, [r7, #12]
 8007d5a:	68fa      	ldr	r2, [r7, #12]
 8007d5c:	683b      	ldr	r3, [r7, #0]
 8007d5e:	429a      	cmp	r2, r3
 8007d60:	d3f0      	bcc.n	8007d44 <rcvr_spi_multi+0x10>
	}
}
 8007d62:	bf00      	nop
 8007d64:	bf00      	nop
 8007d66:	3714      	adds	r7, #20
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	bd90      	pop	{r4, r7, pc}

08007d6c <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b082      	sub	sp, #8
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
 8007d74:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&SD_SPI_HANDLE, buff, btx, HAL_MAX_DELAY);
 8007d76:	683b      	ldr	r3, [r7, #0]
 8007d78:	b29a      	uxth	r2, r3
 8007d7a:	f04f 33ff 	mov.w	r3, #4294967295
 8007d7e:	6879      	ldr	r1, [r7, #4]
 8007d80:	4803      	ldr	r0, [pc, #12]	@ (8007d90 <xmit_spi_multi+0x24>)
 8007d82:	f7fd fb0c 	bl	800539e <HAL_SPI_Transmit>
}
 8007d86:	bf00      	nop
 8007d88:	3708      	adds	r7, #8
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	bd80      	pop	{r7, pc}
 8007d8e:	bf00      	nop
 8007d90:	2000026c 	.word	0x2000026c

08007d94 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8007d94:	b580      	push	{r7, lr}
 8007d96:	b086      	sub	sp, #24
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8007d9c:	f7fa ff86 	bl	8002cac <HAL_GetTick>
 8007da0:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8007da6:	20ff      	movs	r0, #255	@ 0xff
 8007da8:	f7ff ffae 	bl	8007d08 <xchg_spi>
 8007dac:	4603      	mov	r3, r0
 8007dae:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8007db0:	7bfb      	ldrb	r3, [r7, #15]
 8007db2:	2bff      	cmp	r3, #255	@ 0xff
 8007db4:	d007      	beq.n	8007dc6 <wait_ready+0x32>
 8007db6:	f7fa ff79 	bl	8002cac <HAL_GetTick>
 8007dba:	4602      	mov	r2, r0
 8007dbc:	697b      	ldr	r3, [r7, #20]
 8007dbe:	1ad3      	subs	r3, r2, r3
 8007dc0:	693a      	ldr	r2, [r7, #16]
 8007dc2:	429a      	cmp	r2, r3
 8007dc4:	d8ef      	bhi.n	8007da6 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 8007dc6:	7bfb      	ldrb	r3, [r7, #15]
 8007dc8:	2bff      	cmp	r3, #255	@ 0xff
 8007dca:	bf0c      	ite	eq
 8007dcc:	2301      	moveq	r3, #1
 8007dce:	2300      	movne	r3, #0
 8007dd0:	b2db      	uxtb	r3, r3
}
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	3718      	adds	r7, #24
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	bd80      	pop	{r7, pc}
	...

08007ddc <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8007de0:	2201      	movs	r2, #1
 8007de2:	2140      	movs	r1, #64	@ 0x40
 8007de4:	4803      	ldr	r0, [pc, #12]	@ (8007df4 <despiselect+0x18>)
 8007de6:	f7fb fa35 	bl	8003254 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8007dea:	20ff      	movs	r0, #255	@ 0xff
 8007dec:	f7ff ff8c 	bl	8007d08 <xchg_spi>

}
 8007df0:	bf00      	nop
 8007df2:	bd80      	pop	{r7, pc}
 8007df4:	48000400 	.word	0x48000400

08007df8 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	2140      	movs	r1, #64	@ 0x40
 8007e00:	4809      	ldr	r0, [pc, #36]	@ (8007e28 <spiselect+0x30>)
 8007e02:	f7fb fa27 	bl	8003254 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8007e06:	20ff      	movs	r0, #255	@ 0xff
 8007e08:	f7ff ff7e 	bl	8007d08 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8007e0c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8007e10:	f7ff ffc0 	bl	8007d94 <wait_ready>
 8007e14:	4603      	mov	r3, r0
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d001      	beq.n	8007e1e <spiselect+0x26>
 8007e1a:	2301      	movs	r3, #1
 8007e1c:	e002      	b.n	8007e24 <spiselect+0x2c>

	despiselect();
 8007e1e:	f7ff ffdd 	bl	8007ddc <despiselect>
	return 0;	/* Timeout */
 8007e22:	2300      	movs	r3, #0
}
 8007e24:	4618      	mov	r0, r3
 8007e26:	bd80      	pop	{r7, pc}
 8007e28:	48000400 	.word	0x48000400

08007e2c <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	b084      	sub	sp, #16
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]
 8007e34:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 8007e36:	20c8      	movs	r0, #200	@ 0xc8
 8007e38:	f7ff ff3c 	bl	8007cb4 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8007e3c:	20ff      	movs	r0, #255	@ 0xff
 8007e3e:	f7ff ff63 	bl	8007d08 <xchg_spi>
 8007e42:	4603      	mov	r3, r0
 8007e44:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 8007e46:	7bfb      	ldrb	r3, [r7, #15]
 8007e48:	2bff      	cmp	r3, #255	@ 0xff
 8007e4a:	d104      	bne.n	8007e56 <rcvr_datablock+0x2a>
 8007e4c:	f7ff ff46 	bl	8007cdc <SPI_Timer_Status>
 8007e50:	4603      	mov	r3, r0
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d1f2      	bne.n	8007e3c <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8007e56:	7bfb      	ldrb	r3, [r7, #15]
 8007e58:	2bfe      	cmp	r3, #254	@ 0xfe
 8007e5a:	d001      	beq.n	8007e60 <rcvr_datablock+0x34>
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	e00a      	b.n	8007e76 <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8007e60:	6839      	ldr	r1, [r7, #0]
 8007e62:	6878      	ldr	r0, [r7, #4]
 8007e64:	f7ff ff66 	bl	8007d34 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8007e68:	20ff      	movs	r0, #255	@ 0xff
 8007e6a:	f7ff ff4d 	bl	8007d08 <xchg_spi>
 8007e6e:	20ff      	movs	r0, #255	@ 0xff
 8007e70:	f7ff ff4a 	bl	8007d08 <xchg_spi>

	return 1;						/* Function succeeded */
 8007e74:	2301      	movs	r3, #1
}
 8007e76:	4618      	mov	r0, r3
 8007e78:	3710      	adds	r7, #16
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	bd80      	pop	{r7, pc}

08007e7e <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 8007e7e:	b580      	push	{r7, lr}
 8007e80:	b084      	sub	sp, #16
 8007e82:	af00      	add	r7, sp, #0
 8007e84:	6078      	str	r0, [r7, #4]
 8007e86:	460b      	mov	r3, r1
 8007e88:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8007e8a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8007e8e:	f7ff ff81 	bl	8007d94 <wait_ready>
 8007e92:	4603      	mov	r3, r0
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d101      	bne.n	8007e9c <xmit_datablock+0x1e>
 8007e98:	2300      	movs	r3, #0
 8007e9a:	e01e      	b.n	8007eda <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8007e9c:	78fb      	ldrb	r3, [r7, #3]
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	f7ff ff32 	bl	8007d08 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8007ea4:	78fb      	ldrb	r3, [r7, #3]
 8007ea6:	2bfd      	cmp	r3, #253	@ 0xfd
 8007ea8:	d016      	beq.n	8007ed8 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 8007eaa:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8007eae:	6878      	ldr	r0, [r7, #4]
 8007eb0:	f7ff ff5c 	bl	8007d6c <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8007eb4:	20ff      	movs	r0, #255	@ 0xff
 8007eb6:	f7ff ff27 	bl	8007d08 <xchg_spi>
 8007eba:	20ff      	movs	r0, #255	@ 0xff
 8007ebc:	f7ff ff24 	bl	8007d08 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8007ec0:	20ff      	movs	r0, #255	@ 0xff
 8007ec2:	f7ff ff21 	bl	8007d08 <xchg_spi>
 8007ec6:	4603      	mov	r3, r0
 8007ec8:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8007eca:	7bfb      	ldrb	r3, [r7, #15]
 8007ecc:	f003 031f 	and.w	r3, r3, #31
 8007ed0:	2b05      	cmp	r3, #5
 8007ed2:	d001      	beq.n	8007ed8 <xmit_datablock+0x5a>
 8007ed4:	2300      	movs	r3, #0
 8007ed6:	e000      	b.n	8007eda <xmit_datablock+0x5c>
	}
	return 1;
 8007ed8:	2301      	movs	r3, #1
}
 8007eda:	4618      	mov	r0, r3
 8007edc:	3710      	adds	r7, #16
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	bd80      	pop	{r7, pc}

08007ee2 <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 8007ee2:	b580      	push	{r7, lr}
 8007ee4:	b084      	sub	sp, #16
 8007ee6:	af00      	add	r7, sp, #0
 8007ee8:	4603      	mov	r3, r0
 8007eea:	6039      	str	r1, [r7, #0]
 8007eec:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8007eee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	da0e      	bge.n	8007f14 <send_cmd+0x32>
		cmd &= 0x7F;
 8007ef6:	79fb      	ldrb	r3, [r7, #7]
 8007ef8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007efc:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 8007efe:	2100      	movs	r1, #0
 8007f00:	2037      	movs	r0, #55	@ 0x37
 8007f02:	f7ff ffee 	bl	8007ee2 <send_cmd>
 8007f06:	4603      	mov	r3, r0
 8007f08:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 8007f0a:	7bbb      	ldrb	r3, [r7, #14]
 8007f0c:	2b01      	cmp	r3, #1
 8007f0e:	d901      	bls.n	8007f14 <send_cmd+0x32>
 8007f10:	7bbb      	ldrb	r3, [r7, #14]
 8007f12:	e051      	b.n	8007fb8 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8007f14:	79fb      	ldrb	r3, [r7, #7]
 8007f16:	2b0c      	cmp	r3, #12
 8007f18:	d008      	beq.n	8007f2c <send_cmd+0x4a>
		despiselect();
 8007f1a:	f7ff ff5f 	bl	8007ddc <despiselect>
		if (!spiselect()) return 0xFF;
 8007f1e:	f7ff ff6b 	bl	8007df8 <spiselect>
 8007f22:	4603      	mov	r3, r0
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d101      	bne.n	8007f2c <send_cmd+0x4a>
 8007f28:	23ff      	movs	r3, #255	@ 0xff
 8007f2a:	e045      	b.n	8007fb8 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8007f2c:	79fb      	ldrb	r3, [r7, #7]
 8007f2e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007f32:	b2db      	uxtb	r3, r3
 8007f34:	4618      	mov	r0, r3
 8007f36:	f7ff fee7 	bl	8007d08 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8007f3a:	683b      	ldr	r3, [r7, #0]
 8007f3c:	0e1b      	lsrs	r3, r3, #24
 8007f3e:	b2db      	uxtb	r3, r3
 8007f40:	4618      	mov	r0, r3
 8007f42:	f7ff fee1 	bl	8007d08 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8007f46:	683b      	ldr	r3, [r7, #0]
 8007f48:	0c1b      	lsrs	r3, r3, #16
 8007f4a:	b2db      	uxtb	r3, r3
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	f7ff fedb 	bl	8007d08 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 8007f52:	683b      	ldr	r3, [r7, #0]
 8007f54:	0a1b      	lsrs	r3, r3, #8
 8007f56:	b2db      	uxtb	r3, r3
 8007f58:	4618      	mov	r0, r3
 8007f5a:	f7ff fed5 	bl	8007d08 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 8007f5e:	683b      	ldr	r3, [r7, #0]
 8007f60:	b2db      	uxtb	r3, r3
 8007f62:	4618      	mov	r0, r3
 8007f64:	f7ff fed0 	bl	8007d08 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8007f68:	2301      	movs	r3, #1
 8007f6a:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8007f6c:	79fb      	ldrb	r3, [r7, #7]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d101      	bne.n	8007f76 <send_cmd+0x94>
 8007f72:	2395      	movs	r3, #149	@ 0x95
 8007f74:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8007f76:	79fb      	ldrb	r3, [r7, #7]
 8007f78:	2b08      	cmp	r3, #8
 8007f7a:	d101      	bne.n	8007f80 <send_cmd+0x9e>
 8007f7c:	2387      	movs	r3, #135	@ 0x87
 8007f7e:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8007f80:	7bfb      	ldrb	r3, [r7, #15]
 8007f82:	4618      	mov	r0, r3
 8007f84:	f7ff fec0 	bl	8007d08 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8007f88:	79fb      	ldrb	r3, [r7, #7]
 8007f8a:	2b0c      	cmp	r3, #12
 8007f8c:	d102      	bne.n	8007f94 <send_cmd+0xb2>
 8007f8e:	20ff      	movs	r0, #255	@ 0xff
 8007f90:	f7ff feba 	bl	8007d08 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8007f94:	230a      	movs	r3, #10
 8007f96:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 8007f98:	20ff      	movs	r0, #255	@ 0xff
 8007f9a:	f7ff feb5 	bl	8007d08 <xchg_spi>
 8007f9e:	4603      	mov	r3, r0
 8007fa0:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 8007fa2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	da05      	bge.n	8007fb6 <send_cmd+0xd4>
 8007faa:	7bfb      	ldrb	r3, [r7, #15]
 8007fac:	3b01      	subs	r3, #1
 8007fae:	73fb      	strb	r3, [r7, #15]
 8007fb0:	7bfb      	ldrb	r3, [r7, #15]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d1f0      	bne.n	8007f98 <send_cmd+0xb6>

	return res;							/* Return received response */
 8007fb6:	7bbb      	ldrb	r3, [r7, #14]
}
 8007fb8:	4618      	mov	r0, r3
 8007fba:	3710      	adds	r7, #16
 8007fbc:	46bd      	mov	sp, r7
 8007fbe:	bd80      	pop	{r7, pc}

08007fc0 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8007fc0:	b590      	push	{r4, r7, lr}
 8007fc2:	b085      	sub	sp, #20
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	4603      	mov	r3, r0
 8007fc8:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 8007fca:	79fb      	ldrb	r3, [r7, #7]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d001      	beq.n	8007fd4 <USER_SPI_initialize+0x14>
 8007fd0:	2301      	movs	r3, #1
 8007fd2:	e0d6      	b.n	8008182 <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8007fd4:	4b6d      	ldr	r3, [pc, #436]	@ (800818c <USER_SPI_initialize+0x1cc>)
 8007fd6:	781b      	ldrb	r3, [r3, #0]
 8007fd8:	b2db      	uxtb	r3, r3
 8007fda:	f003 0302 	and.w	r3, r3, #2
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d003      	beq.n	8007fea <USER_SPI_initialize+0x2a>
 8007fe2:	4b6a      	ldr	r3, [pc, #424]	@ (800818c <USER_SPI_initialize+0x1cc>)
 8007fe4:	781b      	ldrb	r3, [r3, #0]
 8007fe6:	b2db      	uxtb	r3, r3
 8007fe8:	e0cb      	b.n	8008182 <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 8007fea:	4b69      	ldr	r3, [pc, #420]	@ (8008190 <USER_SPI_initialize+0x1d0>)
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 8007ff4:	4b66      	ldr	r3, [pc, #408]	@ (8008190 <USER_SPI_initialize+0x1d0>)
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	f042 0230 	orr.w	r2, r2, #48	@ 0x30
 8007ffc:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 8007ffe:	230a      	movs	r3, #10
 8008000:	73fb      	strb	r3, [r7, #15]
 8008002:	e005      	b.n	8008010 <USER_SPI_initialize+0x50>
 8008004:	20ff      	movs	r0, #255	@ 0xff
 8008006:	f7ff fe7f 	bl	8007d08 <xchg_spi>
 800800a:	7bfb      	ldrb	r3, [r7, #15]
 800800c:	3b01      	subs	r3, #1
 800800e:	73fb      	strb	r3, [r7, #15]
 8008010:	7bfb      	ldrb	r3, [r7, #15]
 8008012:	2b00      	cmp	r3, #0
 8008014:	d1f6      	bne.n	8008004 <USER_SPI_initialize+0x44>

	ty = 0;
 8008016:	2300      	movs	r3, #0
 8008018:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 800801a:	2100      	movs	r1, #0
 800801c:	2000      	movs	r0, #0
 800801e:	f7ff ff60 	bl	8007ee2 <send_cmd>
 8008022:	4603      	mov	r3, r0
 8008024:	2b01      	cmp	r3, #1
 8008026:	f040 808b 	bne.w	8008140 <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 800802a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800802e:	f7ff fe41 	bl	8007cb4 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8008032:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8008036:	2008      	movs	r0, #8
 8008038:	f7ff ff53 	bl	8007ee2 <send_cmd>
 800803c:	4603      	mov	r3, r0
 800803e:	2b01      	cmp	r3, #1
 8008040:	d151      	bne.n	80080e6 <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 8008042:	2300      	movs	r3, #0
 8008044:	73fb      	strb	r3, [r7, #15]
 8008046:	e00d      	b.n	8008064 <USER_SPI_initialize+0xa4>
 8008048:	7bfc      	ldrb	r4, [r7, #15]
 800804a:	20ff      	movs	r0, #255	@ 0xff
 800804c:	f7ff fe5c 	bl	8007d08 <xchg_spi>
 8008050:	4603      	mov	r3, r0
 8008052:	461a      	mov	r2, r3
 8008054:	f104 0310 	add.w	r3, r4, #16
 8008058:	443b      	add	r3, r7
 800805a:	f803 2c08 	strb.w	r2, [r3, #-8]
 800805e:	7bfb      	ldrb	r3, [r7, #15]
 8008060:	3301      	adds	r3, #1
 8008062:	73fb      	strb	r3, [r7, #15]
 8008064:	7bfb      	ldrb	r3, [r7, #15]
 8008066:	2b03      	cmp	r3, #3
 8008068:	d9ee      	bls.n	8008048 <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 800806a:	7abb      	ldrb	r3, [r7, #10]
 800806c:	2b01      	cmp	r3, #1
 800806e:	d167      	bne.n	8008140 <USER_SPI_initialize+0x180>
 8008070:	7afb      	ldrb	r3, [r7, #11]
 8008072:	2baa      	cmp	r3, #170	@ 0xaa
 8008074:	d164      	bne.n	8008140 <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 8008076:	bf00      	nop
 8008078:	f7ff fe30 	bl	8007cdc <SPI_Timer_Status>
 800807c:	4603      	mov	r3, r0
 800807e:	2b00      	cmp	r3, #0
 8008080:	d007      	beq.n	8008092 <USER_SPI_initialize+0xd2>
 8008082:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8008086:	20a9      	movs	r0, #169	@ 0xa9
 8008088:	f7ff ff2b 	bl	8007ee2 <send_cmd>
 800808c:	4603      	mov	r3, r0
 800808e:	2b00      	cmp	r3, #0
 8008090:	d1f2      	bne.n	8008078 <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8008092:	f7ff fe23 	bl	8007cdc <SPI_Timer_Status>
 8008096:	4603      	mov	r3, r0
 8008098:	2b00      	cmp	r3, #0
 800809a:	d051      	beq.n	8008140 <USER_SPI_initialize+0x180>
 800809c:	2100      	movs	r1, #0
 800809e:	203a      	movs	r0, #58	@ 0x3a
 80080a0:	f7ff ff1f 	bl	8007ee2 <send_cmd>
 80080a4:	4603      	mov	r3, r0
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d14a      	bne.n	8008140 <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 80080aa:	2300      	movs	r3, #0
 80080ac:	73fb      	strb	r3, [r7, #15]
 80080ae:	e00d      	b.n	80080cc <USER_SPI_initialize+0x10c>
 80080b0:	7bfc      	ldrb	r4, [r7, #15]
 80080b2:	20ff      	movs	r0, #255	@ 0xff
 80080b4:	f7ff fe28 	bl	8007d08 <xchg_spi>
 80080b8:	4603      	mov	r3, r0
 80080ba:	461a      	mov	r2, r3
 80080bc:	f104 0310 	add.w	r3, r4, #16
 80080c0:	443b      	add	r3, r7
 80080c2:	f803 2c08 	strb.w	r2, [r3, #-8]
 80080c6:	7bfb      	ldrb	r3, [r7, #15]
 80080c8:	3301      	adds	r3, #1
 80080ca:	73fb      	strb	r3, [r7, #15]
 80080cc:	7bfb      	ldrb	r3, [r7, #15]
 80080ce:	2b03      	cmp	r3, #3
 80080d0:	d9ee      	bls.n	80080b0 <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 80080d2:	7a3b      	ldrb	r3, [r7, #8]
 80080d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d001      	beq.n	80080e0 <USER_SPI_initialize+0x120>
 80080dc:	230c      	movs	r3, #12
 80080de:	e000      	b.n	80080e2 <USER_SPI_initialize+0x122>
 80080e0:	2304      	movs	r3, #4
 80080e2:	737b      	strb	r3, [r7, #13]
 80080e4:	e02c      	b.n	8008140 <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 80080e6:	2100      	movs	r1, #0
 80080e8:	20a9      	movs	r0, #169	@ 0xa9
 80080ea:	f7ff fefa 	bl	8007ee2 <send_cmd>
 80080ee:	4603      	mov	r3, r0
 80080f0:	2b01      	cmp	r3, #1
 80080f2:	d804      	bhi.n	80080fe <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 80080f4:	2302      	movs	r3, #2
 80080f6:	737b      	strb	r3, [r7, #13]
 80080f8:	23a9      	movs	r3, #169	@ 0xa9
 80080fa:	73bb      	strb	r3, [r7, #14]
 80080fc:	e003      	b.n	8008106 <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 80080fe:	2301      	movs	r3, #1
 8008100:	737b      	strb	r3, [r7, #13]
 8008102:	2301      	movs	r3, #1
 8008104:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8008106:	bf00      	nop
 8008108:	f7ff fde8 	bl	8007cdc <SPI_Timer_Status>
 800810c:	4603      	mov	r3, r0
 800810e:	2b00      	cmp	r3, #0
 8008110:	d007      	beq.n	8008122 <USER_SPI_initialize+0x162>
 8008112:	7bbb      	ldrb	r3, [r7, #14]
 8008114:	2100      	movs	r1, #0
 8008116:	4618      	mov	r0, r3
 8008118:	f7ff fee3 	bl	8007ee2 <send_cmd>
 800811c:	4603      	mov	r3, r0
 800811e:	2b00      	cmp	r3, #0
 8008120:	d1f2      	bne.n	8008108 <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 8008122:	f7ff fddb 	bl	8007cdc <SPI_Timer_Status>
 8008126:	4603      	mov	r3, r0
 8008128:	2b00      	cmp	r3, #0
 800812a:	d007      	beq.n	800813c <USER_SPI_initialize+0x17c>
 800812c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8008130:	2010      	movs	r0, #16
 8008132:	f7ff fed6 	bl	8007ee2 <send_cmd>
 8008136:	4603      	mov	r3, r0
 8008138:	2b00      	cmp	r3, #0
 800813a:	d001      	beq.n	8008140 <USER_SPI_initialize+0x180>
				ty = 0;
 800813c:	2300      	movs	r3, #0
 800813e:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 8008140:	4a14      	ldr	r2, [pc, #80]	@ (8008194 <USER_SPI_initialize+0x1d4>)
 8008142:	7b7b      	ldrb	r3, [r7, #13]
 8008144:	7013      	strb	r3, [r2, #0]
	despiselect();
 8008146:	f7ff fe49 	bl	8007ddc <despiselect>

	if (ty) {			/* OK */
 800814a:	7b7b      	ldrb	r3, [r7, #13]
 800814c:	2b00      	cmp	r3, #0
 800814e:	d012      	beq.n	8008176 <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 8008150:	4b0f      	ldr	r3, [pc, #60]	@ (8008190 <USER_SPI_initialize+0x1d0>)
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 800815a:	4b0d      	ldr	r3, [pc, #52]	@ (8008190 <USER_SPI_initialize+0x1d0>)
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	f042 0210 	orr.w	r2, r2, #16
 8008162:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8008164:	4b09      	ldr	r3, [pc, #36]	@ (800818c <USER_SPI_initialize+0x1cc>)
 8008166:	781b      	ldrb	r3, [r3, #0]
 8008168:	b2db      	uxtb	r3, r3
 800816a:	f023 0301 	bic.w	r3, r3, #1
 800816e:	b2da      	uxtb	r2, r3
 8008170:	4b06      	ldr	r3, [pc, #24]	@ (800818c <USER_SPI_initialize+0x1cc>)
 8008172:	701a      	strb	r2, [r3, #0]
 8008174:	e002      	b.n	800817c <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 8008176:	4b05      	ldr	r3, [pc, #20]	@ (800818c <USER_SPI_initialize+0x1cc>)
 8008178:	2201      	movs	r2, #1
 800817a:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 800817c:	4b03      	ldr	r3, [pc, #12]	@ (800818c <USER_SPI_initialize+0x1cc>)
 800817e:	781b      	ldrb	r3, [r3, #0]
 8008180:	b2db      	uxtb	r3, r3
}
 8008182:	4618      	mov	r0, r3
 8008184:	3714      	adds	r7, #20
 8008186:	46bd      	mov	sp, r7
 8008188:	bd90      	pop	{r4, r7, pc}
 800818a:	bf00      	nop
 800818c:	2000002c 	.word	0x2000002c
 8008190:	2000026c 	.word	0x2000026c
 8008194:	20000804 	.word	0x20000804

08008198 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8008198:	b480      	push	{r7}
 800819a:	b083      	sub	sp, #12
 800819c:	af00      	add	r7, sp, #0
 800819e:	4603      	mov	r3, r0
 80081a0:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 80081a2:	79fb      	ldrb	r3, [r7, #7]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d001      	beq.n	80081ac <USER_SPI_status+0x14>
 80081a8:	2301      	movs	r3, #1
 80081aa:	e002      	b.n	80081b2 <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 80081ac:	4b04      	ldr	r3, [pc, #16]	@ (80081c0 <USER_SPI_status+0x28>)
 80081ae:	781b      	ldrb	r3, [r3, #0]
 80081b0:	b2db      	uxtb	r3, r3
}
 80081b2:	4618      	mov	r0, r3
 80081b4:	370c      	adds	r7, #12
 80081b6:	46bd      	mov	sp, r7
 80081b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081bc:	4770      	bx	lr
 80081be:	bf00      	nop
 80081c0:	2000002c 	.word	0x2000002c

080081c4 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 80081c4:	b580      	push	{r7, lr}
 80081c6:	b084      	sub	sp, #16
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	60b9      	str	r1, [r7, #8]
 80081cc:	607a      	str	r2, [r7, #4]
 80081ce:	603b      	str	r3, [r7, #0]
 80081d0:	4603      	mov	r3, r0
 80081d2:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 80081d4:	7bfb      	ldrb	r3, [r7, #15]
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d102      	bne.n	80081e0 <USER_SPI_read+0x1c>
 80081da:	683b      	ldr	r3, [r7, #0]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d101      	bne.n	80081e4 <USER_SPI_read+0x20>
 80081e0:	2304      	movs	r3, #4
 80081e2:	e04d      	b.n	8008280 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 80081e4:	4b28      	ldr	r3, [pc, #160]	@ (8008288 <USER_SPI_read+0xc4>)
 80081e6:	781b      	ldrb	r3, [r3, #0]
 80081e8:	b2db      	uxtb	r3, r3
 80081ea:	f003 0301 	and.w	r3, r3, #1
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d001      	beq.n	80081f6 <USER_SPI_read+0x32>
 80081f2:	2303      	movs	r3, #3
 80081f4:	e044      	b.n	8008280 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 80081f6:	4b25      	ldr	r3, [pc, #148]	@ (800828c <USER_SPI_read+0xc8>)
 80081f8:	781b      	ldrb	r3, [r3, #0]
 80081fa:	f003 0308 	and.w	r3, r3, #8
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d102      	bne.n	8008208 <USER_SPI_read+0x44>
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	025b      	lsls	r3, r3, #9
 8008206:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8008208:	683b      	ldr	r3, [r7, #0]
 800820a:	2b01      	cmp	r3, #1
 800820c:	d111      	bne.n	8008232 <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 800820e:	6879      	ldr	r1, [r7, #4]
 8008210:	2011      	movs	r0, #17
 8008212:	f7ff fe66 	bl	8007ee2 <send_cmd>
 8008216:	4603      	mov	r3, r0
 8008218:	2b00      	cmp	r3, #0
 800821a:	d129      	bne.n	8008270 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 800821c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8008220:	68b8      	ldr	r0, [r7, #8]
 8008222:	f7ff fe03 	bl	8007e2c <rcvr_datablock>
 8008226:	4603      	mov	r3, r0
 8008228:	2b00      	cmp	r3, #0
 800822a:	d021      	beq.n	8008270 <USER_SPI_read+0xac>
			count = 0;
 800822c:	2300      	movs	r3, #0
 800822e:	603b      	str	r3, [r7, #0]
 8008230:	e01e      	b.n	8008270 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 8008232:	6879      	ldr	r1, [r7, #4]
 8008234:	2012      	movs	r0, #18
 8008236:	f7ff fe54 	bl	8007ee2 <send_cmd>
 800823a:	4603      	mov	r3, r0
 800823c:	2b00      	cmp	r3, #0
 800823e:	d117      	bne.n	8008270 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8008240:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8008244:	68b8      	ldr	r0, [r7, #8]
 8008246:	f7ff fdf1 	bl	8007e2c <rcvr_datablock>
 800824a:	4603      	mov	r3, r0
 800824c:	2b00      	cmp	r3, #0
 800824e:	d00a      	beq.n	8008266 <USER_SPI_read+0xa2>
				buff += 512;
 8008250:	68bb      	ldr	r3, [r7, #8]
 8008252:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8008256:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8008258:	683b      	ldr	r3, [r7, #0]
 800825a:	3b01      	subs	r3, #1
 800825c:	603b      	str	r3, [r7, #0]
 800825e:	683b      	ldr	r3, [r7, #0]
 8008260:	2b00      	cmp	r3, #0
 8008262:	d1ed      	bne.n	8008240 <USER_SPI_read+0x7c>
 8008264:	e000      	b.n	8008268 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 8008266:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8008268:	2100      	movs	r1, #0
 800826a:	200c      	movs	r0, #12
 800826c:	f7ff fe39 	bl	8007ee2 <send_cmd>
		}
	}
	despiselect();
 8008270:	f7ff fdb4 	bl	8007ddc <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8008274:	683b      	ldr	r3, [r7, #0]
 8008276:	2b00      	cmp	r3, #0
 8008278:	bf14      	ite	ne
 800827a:	2301      	movne	r3, #1
 800827c:	2300      	moveq	r3, #0
 800827e:	b2db      	uxtb	r3, r3
}
 8008280:	4618      	mov	r0, r3
 8008282:	3710      	adds	r7, #16
 8008284:	46bd      	mov	sp, r7
 8008286:	bd80      	pop	{r7, pc}
 8008288:	2000002c 	.word	0x2000002c
 800828c:	20000804 	.word	0x20000804

08008290 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8008290:	b580      	push	{r7, lr}
 8008292:	b084      	sub	sp, #16
 8008294:	af00      	add	r7, sp, #0
 8008296:	60b9      	str	r1, [r7, #8]
 8008298:	607a      	str	r2, [r7, #4]
 800829a:	603b      	str	r3, [r7, #0]
 800829c:	4603      	mov	r3, r0
 800829e:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 80082a0:	7bfb      	ldrb	r3, [r7, #15]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d102      	bne.n	80082ac <USER_SPI_write+0x1c>
 80082a6:	683b      	ldr	r3, [r7, #0]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d101      	bne.n	80082b0 <USER_SPI_write+0x20>
 80082ac:	2304      	movs	r3, #4
 80082ae:	e063      	b.n	8008378 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 80082b0:	4b33      	ldr	r3, [pc, #204]	@ (8008380 <USER_SPI_write+0xf0>)
 80082b2:	781b      	ldrb	r3, [r3, #0]
 80082b4:	b2db      	uxtb	r3, r3
 80082b6:	f003 0301 	and.w	r3, r3, #1
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d001      	beq.n	80082c2 <USER_SPI_write+0x32>
 80082be:	2303      	movs	r3, #3
 80082c0:	e05a      	b.n	8008378 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 80082c2:	4b2f      	ldr	r3, [pc, #188]	@ (8008380 <USER_SPI_write+0xf0>)
 80082c4:	781b      	ldrb	r3, [r3, #0]
 80082c6:	b2db      	uxtb	r3, r3
 80082c8:	f003 0304 	and.w	r3, r3, #4
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d001      	beq.n	80082d4 <USER_SPI_write+0x44>
 80082d0:	2302      	movs	r3, #2
 80082d2:	e051      	b.n	8008378 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 80082d4:	4b2b      	ldr	r3, [pc, #172]	@ (8008384 <USER_SPI_write+0xf4>)
 80082d6:	781b      	ldrb	r3, [r3, #0]
 80082d8:	f003 0308 	and.w	r3, r3, #8
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d102      	bne.n	80082e6 <USER_SPI_write+0x56>
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	025b      	lsls	r3, r3, #9
 80082e4:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 80082e6:	683b      	ldr	r3, [r7, #0]
 80082e8:	2b01      	cmp	r3, #1
 80082ea:	d110      	bne.n	800830e <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 80082ec:	6879      	ldr	r1, [r7, #4]
 80082ee:	2018      	movs	r0, #24
 80082f0:	f7ff fdf7 	bl	8007ee2 <send_cmd>
 80082f4:	4603      	mov	r3, r0
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d136      	bne.n	8008368 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 80082fa:	21fe      	movs	r1, #254	@ 0xfe
 80082fc:	68b8      	ldr	r0, [r7, #8]
 80082fe:	f7ff fdbe 	bl	8007e7e <xmit_datablock>
 8008302:	4603      	mov	r3, r0
 8008304:	2b00      	cmp	r3, #0
 8008306:	d02f      	beq.n	8008368 <USER_SPI_write+0xd8>
			count = 0;
 8008308:	2300      	movs	r3, #0
 800830a:	603b      	str	r3, [r7, #0]
 800830c:	e02c      	b.n	8008368 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 800830e:	4b1d      	ldr	r3, [pc, #116]	@ (8008384 <USER_SPI_write+0xf4>)
 8008310:	781b      	ldrb	r3, [r3, #0]
 8008312:	f003 0306 	and.w	r3, r3, #6
 8008316:	2b00      	cmp	r3, #0
 8008318:	d003      	beq.n	8008322 <USER_SPI_write+0x92>
 800831a:	6839      	ldr	r1, [r7, #0]
 800831c:	2097      	movs	r0, #151	@ 0x97
 800831e:	f7ff fde0 	bl	8007ee2 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8008322:	6879      	ldr	r1, [r7, #4]
 8008324:	2019      	movs	r0, #25
 8008326:	f7ff fddc 	bl	8007ee2 <send_cmd>
 800832a:	4603      	mov	r3, r0
 800832c:	2b00      	cmp	r3, #0
 800832e:	d11b      	bne.n	8008368 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8008330:	21fc      	movs	r1, #252	@ 0xfc
 8008332:	68b8      	ldr	r0, [r7, #8]
 8008334:	f7ff fda3 	bl	8007e7e <xmit_datablock>
 8008338:	4603      	mov	r3, r0
 800833a:	2b00      	cmp	r3, #0
 800833c:	d00a      	beq.n	8008354 <USER_SPI_write+0xc4>
				buff += 512;
 800833e:	68bb      	ldr	r3, [r7, #8]
 8008340:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8008344:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8008346:	683b      	ldr	r3, [r7, #0]
 8008348:	3b01      	subs	r3, #1
 800834a:	603b      	str	r3, [r7, #0]
 800834c:	683b      	ldr	r3, [r7, #0]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d1ee      	bne.n	8008330 <USER_SPI_write+0xa0>
 8008352:	e000      	b.n	8008356 <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 8008354:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 8008356:	21fd      	movs	r1, #253	@ 0xfd
 8008358:	2000      	movs	r0, #0
 800835a:	f7ff fd90 	bl	8007e7e <xmit_datablock>
 800835e:	4603      	mov	r3, r0
 8008360:	2b00      	cmp	r3, #0
 8008362:	d101      	bne.n	8008368 <USER_SPI_write+0xd8>
 8008364:	2301      	movs	r3, #1
 8008366:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8008368:	f7ff fd38 	bl	8007ddc <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800836c:	683b      	ldr	r3, [r7, #0]
 800836e:	2b00      	cmp	r3, #0
 8008370:	bf14      	ite	ne
 8008372:	2301      	movne	r3, #1
 8008374:	2300      	moveq	r3, #0
 8008376:	b2db      	uxtb	r3, r3
}
 8008378:	4618      	mov	r0, r3
 800837a:	3710      	adds	r7, #16
 800837c:	46bd      	mov	sp, r7
 800837e:	bd80      	pop	{r7, pc}
 8008380:	2000002c 	.word	0x2000002c
 8008384:	20000804 	.word	0x20000804

08008388 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8008388:	b580      	push	{r7, lr}
 800838a:	b08c      	sub	sp, #48	@ 0x30
 800838c:	af00      	add	r7, sp, #0
 800838e:	4603      	mov	r3, r0
 8008390:	603a      	str	r2, [r7, #0]
 8008392:	71fb      	strb	r3, [r7, #7]
 8008394:	460b      	mov	r3, r1
 8008396:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8008398:	79fb      	ldrb	r3, [r7, #7]
 800839a:	2b00      	cmp	r3, #0
 800839c:	d001      	beq.n	80083a2 <USER_SPI_ioctl+0x1a>
 800839e:	2304      	movs	r3, #4
 80083a0:	e15a      	b.n	8008658 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 80083a2:	4baf      	ldr	r3, [pc, #700]	@ (8008660 <USER_SPI_ioctl+0x2d8>)
 80083a4:	781b      	ldrb	r3, [r3, #0]
 80083a6:	b2db      	uxtb	r3, r3
 80083a8:	f003 0301 	and.w	r3, r3, #1
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d001      	beq.n	80083b4 <USER_SPI_ioctl+0x2c>
 80083b0:	2303      	movs	r3, #3
 80083b2:	e151      	b.n	8008658 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 80083b4:	2301      	movs	r3, #1
 80083b6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	switch (cmd) {
 80083ba:	79bb      	ldrb	r3, [r7, #6]
 80083bc:	2b04      	cmp	r3, #4
 80083be:	f200 8136 	bhi.w	800862e <USER_SPI_ioctl+0x2a6>
 80083c2:	a201      	add	r2, pc, #4	@ (adr r2, 80083c8 <USER_SPI_ioctl+0x40>)
 80083c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083c8:	080083dd 	.word	0x080083dd
 80083cc:	080083f1 	.word	0x080083f1
 80083d0:	0800862f 	.word	0x0800862f
 80083d4:	0800849d 	.word	0x0800849d
 80083d8:	08008593 	.word	0x08008593
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 80083dc:	f7ff fd0c 	bl	8007df8 <spiselect>
 80083e0:	4603      	mov	r3, r0
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	f000 8127 	beq.w	8008636 <USER_SPI_ioctl+0x2ae>
 80083e8:	2300      	movs	r3, #0
 80083ea:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 80083ee:	e122      	b.n	8008636 <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 80083f0:	2100      	movs	r1, #0
 80083f2:	2009      	movs	r0, #9
 80083f4:	f7ff fd75 	bl	8007ee2 <send_cmd>
 80083f8:	4603      	mov	r3, r0
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	f040 811d 	bne.w	800863a <USER_SPI_ioctl+0x2b2>
 8008400:	f107 030c 	add.w	r3, r7, #12
 8008404:	2110      	movs	r1, #16
 8008406:	4618      	mov	r0, r3
 8008408:	f7ff fd10 	bl	8007e2c <rcvr_datablock>
 800840c:	4603      	mov	r3, r0
 800840e:	2b00      	cmp	r3, #0
 8008410:	f000 8113 	beq.w	800863a <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8008414:	7b3b      	ldrb	r3, [r7, #12]
 8008416:	099b      	lsrs	r3, r3, #6
 8008418:	b2db      	uxtb	r3, r3
 800841a:	2b01      	cmp	r3, #1
 800841c:	d111      	bne.n	8008442 <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 800841e:	7d7b      	ldrb	r3, [r7, #21]
 8008420:	461a      	mov	r2, r3
 8008422:	7d3b      	ldrb	r3, [r7, #20]
 8008424:	021b      	lsls	r3, r3, #8
 8008426:	4413      	add	r3, r2
 8008428:	461a      	mov	r2, r3
 800842a:	7cfb      	ldrb	r3, [r7, #19]
 800842c:	041b      	lsls	r3, r3, #16
 800842e:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
 8008432:	4413      	add	r3, r2
 8008434:	3301      	adds	r3, #1
 8008436:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8008438:	69fb      	ldr	r3, [r7, #28]
 800843a:	029a      	lsls	r2, r3, #10
 800843c:	683b      	ldr	r3, [r7, #0]
 800843e:	601a      	str	r2, [r3, #0]
 8008440:	e028      	b.n	8008494 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8008442:	7c7b      	ldrb	r3, [r7, #17]
 8008444:	f003 030f 	and.w	r3, r3, #15
 8008448:	b2da      	uxtb	r2, r3
 800844a:	7dbb      	ldrb	r3, [r7, #22]
 800844c:	09db      	lsrs	r3, r3, #7
 800844e:	b2db      	uxtb	r3, r3
 8008450:	4413      	add	r3, r2
 8008452:	b2da      	uxtb	r2, r3
 8008454:	7d7b      	ldrb	r3, [r7, #21]
 8008456:	005b      	lsls	r3, r3, #1
 8008458:	b2db      	uxtb	r3, r3
 800845a:	f003 0306 	and.w	r3, r3, #6
 800845e:	b2db      	uxtb	r3, r3
 8008460:	4413      	add	r3, r2
 8008462:	b2db      	uxtb	r3, r3
 8008464:	3302      	adds	r3, #2
 8008466:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 800846a:	7d3b      	ldrb	r3, [r7, #20]
 800846c:	099b      	lsrs	r3, r3, #6
 800846e:	b2db      	uxtb	r3, r3
 8008470:	461a      	mov	r2, r3
 8008472:	7cfb      	ldrb	r3, [r7, #19]
 8008474:	009b      	lsls	r3, r3, #2
 8008476:	441a      	add	r2, r3
 8008478:	7cbb      	ldrb	r3, [r7, #18]
 800847a:	029b      	lsls	r3, r3, #10
 800847c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8008480:	4413      	add	r3, r2
 8008482:	3301      	adds	r3, #1
 8008484:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 8008486:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800848a:	3b09      	subs	r3, #9
 800848c:	69fa      	ldr	r2, [r7, #28]
 800848e:	409a      	lsls	r2, r3
 8008490:	683b      	ldr	r3, [r7, #0]
 8008492:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8008494:	2300      	movs	r3, #0
 8008496:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 800849a:	e0ce      	b.n	800863a <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 800849c:	4b71      	ldr	r3, [pc, #452]	@ (8008664 <USER_SPI_ioctl+0x2dc>)
 800849e:	781b      	ldrb	r3, [r3, #0]
 80084a0:	f003 0304 	and.w	r3, r3, #4
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d031      	beq.n	800850c <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 80084a8:	2100      	movs	r1, #0
 80084aa:	208d      	movs	r0, #141	@ 0x8d
 80084ac:	f7ff fd19 	bl	8007ee2 <send_cmd>
 80084b0:	4603      	mov	r3, r0
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	f040 80c3 	bne.w	800863e <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 80084b8:	20ff      	movs	r0, #255	@ 0xff
 80084ba:	f7ff fc25 	bl	8007d08 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 80084be:	f107 030c 	add.w	r3, r7, #12
 80084c2:	2110      	movs	r1, #16
 80084c4:	4618      	mov	r0, r3
 80084c6:	f7ff fcb1 	bl	8007e2c <rcvr_datablock>
 80084ca:	4603      	mov	r3, r0
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	f000 80b6 	beq.w	800863e <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 80084d2:	2330      	movs	r3, #48	@ 0x30
 80084d4:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 80084d8:	e007      	b.n	80084ea <USER_SPI_ioctl+0x162>
 80084da:	20ff      	movs	r0, #255	@ 0xff
 80084dc:	f7ff fc14 	bl	8007d08 <xchg_spi>
 80084e0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80084e4:	3b01      	subs	r3, #1
 80084e6:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 80084ea:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d1f3      	bne.n	80084da <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 80084f2:	7dbb      	ldrb	r3, [r7, #22]
 80084f4:	091b      	lsrs	r3, r3, #4
 80084f6:	b2db      	uxtb	r3, r3
 80084f8:	461a      	mov	r2, r3
 80084fa:	2310      	movs	r3, #16
 80084fc:	fa03 f202 	lsl.w	r2, r3, r2
 8008500:	683b      	ldr	r3, [r7, #0]
 8008502:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8008504:	2300      	movs	r3, #0
 8008506:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 800850a:	e098      	b.n	800863e <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 800850c:	2100      	movs	r1, #0
 800850e:	2009      	movs	r0, #9
 8008510:	f7ff fce7 	bl	8007ee2 <send_cmd>
 8008514:	4603      	mov	r3, r0
 8008516:	2b00      	cmp	r3, #0
 8008518:	f040 8091 	bne.w	800863e <USER_SPI_ioctl+0x2b6>
 800851c:	f107 030c 	add.w	r3, r7, #12
 8008520:	2110      	movs	r1, #16
 8008522:	4618      	mov	r0, r3
 8008524:	f7ff fc82 	bl	8007e2c <rcvr_datablock>
 8008528:	4603      	mov	r3, r0
 800852a:	2b00      	cmp	r3, #0
 800852c:	f000 8087 	beq.w	800863e <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8008530:	4b4c      	ldr	r3, [pc, #304]	@ (8008664 <USER_SPI_ioctl+0x2dc>)
 8008532:	781b      	ldrb	r3, [r3, #0]
 8008534:	f003 0302 	and.w	r3, r3, #2
 8008538:	2b00      	cmp	r3, #0
 800853a:	d012      	beq.n	8008562 <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 800853c:	7dbb      	ldrb	r3, [r7, #22]
 800853e:	005b      	lsls	r3, r3, #1
 8008540:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 8008544:	7dfa      	ldrb	r2, [r7, #23]
 8008546:	09d2      	lsrs	r2, r2, #7
 8008548:	b2d2      	uxtb	r2, r2
 800854a:	4413      	add	r3, r2
 800854c:	1c5a      	adds	r2, r3, #1
 800854e:	7e7b      	ldrb	r3, [r7, #25]
 8008550:	099b      	lsrs	r3, r3, #6
 8008552:	b2db      	uxtb	r3, r3
 8008554:	3b01      	subs	r3, #1
 8008556:	fa02 f303 	lsl.w	r3, r2, r3
 800855a:	461a      	mov	r2, r3
 800855c:	683b      	ldr	r3, [r7, #0]
 800855e:	601a      	str	r2, [r3, #0]
 8008560:	e013      	b.n	800858a <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8008562:	7dbb      	ldrb	r3, [r7, #22]
 8008564:	109b      	asrs	r3, r3, #2
 8008566:	b29b      	uxth	r3, r3
 8008568:	f003 031f 	and.w	r3, r3, #31
 800856c:	3301      	adds	r3, #1
 800856e:	7dfa      	ldrb	r2, [r7, #23]
 8008570:	00d2      	lsls	r2, r2, #3
 8008572:	f002 0218 	and.w	r2, r2, #24
 8008576:	7df9      	ldrb	r1, [r7, #23]
 8008578:	0949      	lsrs	r1, r1, #5
 800857a:	b2c9      	uxtb	r1, r1
 800857c:	440a      	add	r2, r1
 800857e:	3201      	adds	r2, #1
 8008580:	fb02 f303 	mul.w	r3, r2, r3
 8008584:	461a      	mov	r2, r3
 8008586:	683b      	ldr	r3, [r7, #0]
 8008588:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 800858a:	2300      	movs	r3, #0
 800858c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 8008590:	e055      	b.n	800863e <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8008592:	4b34      	ldr	r3, [pc, #208]	@ (8008664 <USER_SPI_ioctl+0x2dc>)
 8008594:	781b      	ldrb	r3, [r3, #0]
 8008596:	f003 0306 	and.w	r3, r3, #6
 800859a:	2b00      	cmp	r3, #0
 800859c:	d051      	beq.n	8008642 <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800859e:	f107 020c 	add.w	r2, r7, #12
 80085a2:	79fb      	ldrb	r3, [r7, #7]
 80085a4:	210b      	movs	r1, #11
 80085a6:	4618      	mov	r0, r3
 80085a8:	f7ff feee 	bl	8008388 <USER_SPI_ioctl>
 80085ac:	4603      	mov	r3, r0
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d149      	bne.n	8008646 <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 80085b2:	7b3b      	ldrb	r3, [r7, #12]
 80085b4:	099b      	lsrs	r3, r3, #6
 80085b6:	b2db      	uxtb	r3, r3
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d104      	bne.n	80085c6 <USER_SPI_ioctl+0x23e>
 80085bc:	7dbb      	ldrb	r3, [r7, #22]
 80085be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d041      	beq.n	800864a <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 80085c6:	683b      	ldr	r3, [r7, #0]
 80085c8:	623b      	str	r3, [r7, #32]
 80085ca:	6a3b      	ldr	r3, [r7, #32]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	62bb      	str	r3, [r7, #40]	@ 0x28
 80085d0:	6a3b      	ldr	r3, [r7, #32]
 80085d2:	685b      	ldr	r3, [r3, #4]
 80085d4:	627b      	str	r3, [r7, #36]	@ 0x24
		if (!(CardType & CT_BLOCK)) {
 80085d6:	4b23      	ldr	r3, [pc, #140]	@ (8008664 <USER_SPI_ioctl+0x2dc>)
 80085d8:	781b      	ldrb	r3, [r3, #0]
 80085da:	f003 0308 	and.w	r3, r3, #8
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d105      	bne.n	80085ee <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 80085e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085e4:	025b      	lsls	r3, r3, #9
 80085e6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80085e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085ea:	025b      	lsls	r3, r3, #9
 80085ec:	627b      	str	r3, [r7, #36]	@ 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 80085ee:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80085f0:	2020      	movs	r0, #32
 80085f2:	f7ff fc76 	bl	8007ee2 <send_cmd>
 80085f6:	4603      	mov	r3, r0
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d128      	bne.n	800864e <USER_SPI_ioctl+0x2c6>
 80085fc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80085fe:	2021      	movs	r0, #33	@ 0x21
 8008600:	f7ff fc6f 	bl	8007ee2 <send_cmd>
 8008604:	4603      	mov	r3, r0
 8008606:	2b00      	cmp	r3, #0
 8008608:	d121      	bne.n	800864e <USER_SPI_ioctl+0x2c6>
 800860a:	2100      	movs	r1, #0
 800860c:	2026      	movs	r0, #38	@ 0x26
 800860e:	f7ff fc68 	bl	8007ee2 <send_cmd>
 8008612:	4603      	mov	r3, r0
 8008614:	2b00      	cmp	r3, #0
 8008616:	d11a      	bne.n	800864e <USER_SPI_ioctl+0x2c6>
 8008618:	f247 5030 	movw	r0, #30000	@ 0x7530
 800861c:	f7ff fbba 	bl	8007d94 <wait_ready>
 8008620:	4603      	mov	r3, r0
 8008622:	2b00      	cmp	r3, #0
 8008624:	d013      	beq.n	800864e <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 8008626:	2300      	movs	r3, #0
 8008628:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 800862c:	e00f      	b.n	800864e <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 800862e:	2304      	movs	r3, #4
 8008630:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8008634:	e00c      	b.n	8008650 <USER_SPI_ioctl+0x2c8>
		break;
 8008636:	bf00      	nop
 8008638:	e00a      	b.n	8008650 <USER_SPI_ioctl+0x2c8>
		break;
 800863a:	bf00      	nop
 800863c:	e008      	b.n	8008650 <USER_SPI_ioctl+0x2c8>
		break;
 800863e:	bf00      	nop
 8008640:	e006      	b.n	8008650 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8008642:	bf00      	nop
 8008644:	e004      	b.n	8008650 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8008646:	bf00      	nop
 8008648:	e002      	b.n	8008650 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800864a:	bf00      	nop
 800864c:	e000      	b.n	8008650 <USER_SPI_ioctl+0x2c8>
		break;
 800864e:	bf00      	nop
	}

	despiselect();
 8008650:	f7ff fbc4 	bl	8007ddc <despiselect>

	return res;
 8008654:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8008658:	4618      	mov	r0, r3
 800865a:	3730      	adds	r7, #48	@ 0x30
 800865c:	46bd      	mov	sp, r7
 800865e:	bd80      	pop	{r7, pc}
 8008660:	2000002c 	.word	0x2000002c
 8008664:	20000804 	.word	0x20000804

08008668 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8008668:	b580      	push	{r7, lr}
 800866a:	b084      	sub	sp, #16
 800866c:	af00      	add	r7, sp, #0
 800866e:	4603      	mov	r3, r0
 8008670:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8008672:	79fb      	ldrb	r3, [r7, #7]
 8008674:	4a08      	ldr	r2, [pc, #32]	@ (8008698 <disk_status+0x30>)
 8008676:	009b      	lsls	r3, r3, #2
 8008678:	4413      	add	r3, r2
 800867a:	685b      	ldr	r3, [r3, #4]
 800867c:	685b      	ldr	r3, [r3, #4]
 800867e:	79fa      	ldrb	r2, [r7, #7]
 8008680:	4905      	ldr	r1, [pc, #20]	@ (8008698 <disk_status+0x30>)
 8008682:	440a      	add	r2, r1
 8008684:	7a12      	ldrb	r2, [r2, #8]
 8008686:	4610      	mov	r0, r2
 8008688:	4798      	blx	r3
 800868a:	4603      	mov	r3, r0
 800868c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800868e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008690:	4618      	mov	r0, r3
 8008692:	3710      	adds	r7, #16
 8008694:	46bd      	mov	sp, r7
 8008696:	bd80      	pop	{r7, pc}
 8008698:	20000838 	.word	0x20000838

0800869c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800869c:	b580      	push	{r7, lr}
 800869e:	b084      	sub	sp, #16
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	4603      	mov	r3, r0
 80086a4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80086a6:	2300      	movs	r3, #0
 80086a8:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80086aa:	79fb      	ldrb	r3, [r7, #7]
 80086ac:	4a0d      	ldr	r2, [pc, #52]	@ (80086e4 <disk_initialize+0x48>)
 80086ae:	5cd3      	ldrb	r3, [r2, r3]
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d111      	bne.n	80086d8 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80086b4:	79fb      	ldrb	r3, [r7, #7]
 80086b6:	4a0b      	ldr	r2, [pc, #44]	@ (80086e4 <disk_initialize+0x48>)
 80086b8:	2101      	movs	r1, #1
 80086ba:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80086bc:	79fb      	ldrb	r3, [r7, #7]
 80086be:	4a09      	ldr	r2, [pc, #36]	@ (80086e4 <disk_initialize+0x48>)
 80086c0:	009b      	lsls	r3, r3, #2
 80086c2:	4413      	add	r3, r2
 80086c4:	685b      	ldr	r3, [r3, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	79fa      	ldrb	r2, [r7, #7]
 80086ca:	4906      	ldr	r1, [pc, #24]	@ (80086e4 <disk_initialize+0x48>)
 80086cc:	440a      	add	r2, r1
 80086ce:	7a12      	ldrb	r2, [r2, #8]
 80086d0:	4610      	mov	r0, r2
 80086d2:	4798      	blx	r3
 80086d4:	4603      	mov	r3, r0
 80086d6:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80086d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80086da:	4618      	mov	r0, r3
 80086dc:	3710      	adds	r7, #16
 80086de:	46bd      	mov	sp, r7
 80086e0:	bd80      	pop	{r7, pc}
 80086e2:	bf00      	nop
 80086e4:	20000838 	.word	0x20000838

080086e8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80086e8:	b590      	push	{r4, r7, lr}
 80086ea:	b087      	sub	sp, #28
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	60b9      	str	r1, [r7, #8]
 80086f0:	607a      	str	r2, [r7, #4]
 80086f2:	603b      	str	r3, [r7, #0]
 80086f4:	4603      	mov	r3, r0
 80086f6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80086f8:	7bfb      	ldrb	r3, [r7, #15]
 80086fa:	4a0a      	ldr	r2, [pc, #40]	@ (8008724 <disk_read+0x3c>)
 80086fc:	009b      	lsls	r3, r3, #2
 80086fe:	4413      	add	r3, r2
 8008700:	685b      	ldr	r3, [r3, #4]
 8008702:	689c      	ldr	r4, [r3, #8]
 8008704:	7bfb      	ldrb	r3, [r7, #15]
 8008706:	4a07      	ldr	r2, [pc, #28]	@ (8008724 <disk_read+0x3c>)
 8008708:	4413      	add	r3, r2
 800870a:	7a18      	ldrb	r0, [r3, #8]
 800870c:	683b      	ldr	r3, [r7, #0]
 800870e:	687a      	ldr	r2, [r7, #4]
 8008710:	68b9      	ldr	r1, [r7, #8]
 8008712:	47a0      	blx	r4
 8008714:	4603      	mov	r3, r0
 8008716:	75fb      	strb	r3, [r7, #23]
  return res;
 8008718:	7dfb      	ldrb	r3, [r7, #23]
}
 800871a:	4618      	mov	r0, r3
 800871c:	371c      	adds	r7, #28
 800871e:	46bd      	mov	sp, r7
 8008720:	bd90      	pop	{r4, r7, pc}
 8008722:	bf00      	nop
 8008724:	20000838 	.word	0x20000838

08008728 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8008728:	b590      	push	{r4, r7, lr}
 800872a:	b087      	sub	sp, #28
 800872c:	af00      	add	r7, sp, #0
 800872e:	60b9      	str	r1, [r7, #8]
 8008730:	607a      	str	r2, [r7, #4]
 8008732:	603b      	str	r3, [r7, #0]
 8008734:	4603      	mov	r3, r0
 8008736:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8008738:	7bfb      	ldrb	r3, [r7, #15]
 800873a:	4a0a      	ldr	r2, [pc, #40]	@ (8008764 <disk_write+0x3c>)
 800873c:	009b      	lsls	r3, r3, #2
 800873e:	4413      	add	r3, r2
 8008740:	685b      	ldr	r3, [r3, #4]
 8008742:	68dc      	ldr	r4, [r3, #12]
 8008744:	7bfb      	ldrb	r3, [r7, #15]
 8008746:	4a07      	ldr	r2, [pc, #28]	@ (8008764 <disk_write+0x3c>)
 8008748:	4413      	add	r3, r2
 800874a:	7a18      	ldrb	r0, [r3, #8]
 800874c:	683b      	ldr	r3, [r7, #0]
 800874e:	687a      	ldr	r2, [r7, #4]
 8008750:	68b9      	ldr	r1, [r7, #8]
 8008752:	47a0      	blx	r4
 8008754:	4603      	mov	r3, r0
 8008756:	75fb      	strb	r3, [r7, #23]
  return res;
 8008758:	7dfb      	ldrb	r3, [r7, #23]
}
 800875a:	4618      	mov	r0, r3
 800875c:	371c      	adds	r7, #28
 800875e:	46bd      	mov	sp, r7
 8008760:	bd90      	pop	{r4, r7, pc}
 8008762:	bf00      	nop
 8008764:	20000838 	.word	0x20000838

08008768 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8008768:	b580      	push	{r7, lr}
 800876a:	b084      	sub	sp, #16
 800876c:	af00      	add	r7, sp, #0
 800876e:	4603      	mov	r3, r0
 8008770:	603a      	str	r2, [r7, #0]
 8008772:	71fb      	strb	r3, [r7, #7]
 8008774:	460b      	mov	r3, r1
 8008776:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8008778:	79fb      	ldrb	r3, [r7, #7]
 800877a:	4a09      	ldr	r2, [pc, #36]	@ (80087a0 <disk_ioctl+0x38>)
 800877c:	009b      	lsls	r3, r3, #2
 800877e:	4413      	add	r3, r2
 8008780:	685b      	ldr	r3, [r3, #4]
 8008782:	691b      	ldr	r3, [r3, #16]
 8008784:	79fa      	ldrb	r2, [r7, #7]
 8008786:	4906      	ldr	r1, [pc, #24]	@ (80087a0 <disk_ioctl+0x38>)
 8008788:	440a      	add	r2, r1
 800878a:	7a10      	ldrb	r0, [r2, #8]
 800878c:	79b9      	ldrb	r1, [r7, #6]
 800878e:	683a      	ldr	r2, [r7, #0]
 8008790:	4798      	blx	r3
 8008792:	4603      	mov	r3, r0
 8008794:	73fb      	strb	r3, [r7, #15]
  return res;
 8008796:	7bfb      	ldrb	r3, [r7, #15]
}
 8008798:	4618      	mov	r0, r3
 800879a:	3710      	adds	r7, #16
 800879c:	46bd      	mov	sp, r7
 800879e:	bd80      	pop	{r7, pc}
 80087a0:	20000838 	.word	0x20000838

080087a4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80087a4:	b480      	push	{r7}
 80087a6:	b085      	sub	sp, #20
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	3301      	adds	r3, #1
 80087b0:	781b      	ldrb	r3, [r3, #0]
 80087b2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80087b4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80087b8:	021b      	lsls	r3, r3, #8
 80087ba:	b21a      	sxth	r2, r3
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	781b      	ldrb	r3, [r3, #0]
 80087c0:	b21b      	sxth	r3, r3
 80087c2:	4313      	orrs	r3, r2
 80087c4:	b21b      	sxth	r3, r3
 80087c6:	81fb      	strh	r3, [r7, #14]
	return rv;
 80087c8:	89fb      	ldrh	r3, [r7, #14]
}
 80087ca:	4618      	mov	r0, r3
 80087cc:	3714      	adds	r7, #20
 80087ce:	46bd      	mov	sp, r7
 80087d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d4:	4770      	bx	lr

080087d6 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80087d6:	b480      	push	{r7}
 80087d8:	b085      	sub	sp, #20
 80087da:	af00      	add	r7, sp, #0
 80087dc:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	3303      	adds	r3, #3
 80087e2:	781b      	ldrb	r3, [r3, #0]
 80087e4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	021b      	lsls	r3, r3, #8
 80087ea:	687a      	ldr	r2, [r7, #4]
 80087ec:	3202      	adds	r2, #2
 80087ee:	7812      	ldrb	r2, [r2, #0]
 80087f0:	4313      	orrs	r3, r2
 80087f2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	021b      	lsls	r3, r3, #8
 80087f8:	687a      	ldr	r2, [r7, #4]
 80087fa:	3201      	adds	r2, #1
 80087fc:	7812      	ldrb	r2, [r2, #0]
 80087fe:	4313      	orrs	r3, r2
 8008800:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	021b      	lsls	r3, r3, #8
 8008806:	687a      	ldr	r2, [r7, #4]
 8008808:	7812      	ldrb	r2, [r2, #0]
 800880a:	4313      	orrs	r3, r2
 800880c:	60fb      	str	r3, [r7, #12]
	return rv;
 800880e:	68fb      	ldr	r3, [r7, #12]
}
 8008810:	4618      	mov	r0, r3
 8008812:	3714      	adds	r7, #20
 8008814:	46bd      	mov	sp, r7
 8008816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881a:	4770      	bx	lr

0800881c <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800881c:	b480      	push	{r7}
 800881e:	b083      	sub	sp, #12
 8008820:	af00      	add	r7, sp, #0
 8008822:	6078      	str	r0, [r7, #4]
 8008824:	460b      	mov	r3, r1
 8008826:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	1c5a      	adds	r2, r3, #1
 800882c:	607a      	str	r2, [r7, #4]
 800882e:	887a      	ldrh	r2, [r7, #2]
 8008830:	b2d2      	uxtb	r2, r2
 8008832:	701a      	strb	r2, [r3, #0]
 8008834:	887b      	ldrh	r3, [r7, #2]
 8008836:	0a1b      	lsrs	r3, r3, #8
 8008838:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	1c5a      	adds	r2, r3, #1
 800883e:	607a      	str	r2, [r7, #4]
 8008840:	887a      	ldrh	r2, [r7, #2]
 8008842:	b2d2      	uxtb	r2, r2
 8008844:	701a      	strb	r2, [r3, #0]
}
 8008846:	bf00      	nop
 8008848:	370c      	adds	r7, #12
 800884a:	46bd      	mov	sp, r7
 800884c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008850:	4770      	bx	lr

08008852 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8008852:	b480      	push	{r7}
 8008854:	b083      	sub	sp, #12
 8008856:	af00      	add	r7, sp, #0
 8008858:	6078      	str	r0, [r7, #4]
 800885a:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	1c5a      	adds	r2, r3, #1
 8008860:	607a      	str	r2, [r7, #4]
 8008862:	683a      	ldr	r2, [r7, #0]
 8008864:	b2d2      	uxtb	r2, r2
 8008866:	701a      	strb	r2, [r3, #0]
 8008868:	683b      	ldr	r3, [r7, #0]
 800886a:	0a1b      	lsrs	r3, r3, #8
 800886c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	1c5a      	adds	r2, r3, #1
 8008872:	607a      	str	r2, [r7, #4]
 8008874:	683a      	ldr	r2, [r7, #0]
 8008876:	b2d2      	uxtb	r2, r2
 8008878:	701a      	strb	r2, [r3, #0]
 800887a:	683b      	ldr	r3, [r7, #0]
 800887c:	0a1b      	lsrs	r3, r3, #8
 800887e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	1c5a      	adds	r2, r3, #1
 8008884:	607a      	str	r2, [r7, #4]
 8008886:	683a      	ldr	r2, [r7, #0]
 8008888:	b2d2      	uxtb	r2, r2
 800888a:	701a      	strb	r2, [r3, #0]
 800888c:	683b      	ldr	r3, [r7, #0]
 800888e:	0a1b      	lsrs	r3, r3, #8
 8008890:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	1c5a      	adds	r2, r3, #1
 8008896:	607a      	str	r2, [r7, #4]
 8008898:	683a      	ldr	r2, [r7, #0]
 800889a:	b2d2      	uxtb	r2, r2
 800889c:	701a      	strb	r2, [r3, #0]
}
 800889e:	bf00      	nop
 80088a0:	370c      	adds	r7, #12
 80088a2:	46bd      	mov	sp, r7
 80088a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a8:	4770      	bx	lr

080088aa <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80088aa:	b480      	push	{r7}
 80088ac:	b087      	sub	sp, #28
 80088ae:	af00      	add	r7, sp, #0
 80088b0:	60f8      	str	r0, [r7, #12]
 80088b2:	60b9      	str	r1, [r7, #8]
 80088b4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80088ba:	68bb      	ldr	r3, [r7, #8]
 80088bc:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d00d      	beq.n	80088e0 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80088c4:	693a      	ldr	r2, [r7, #16]
 80088c6:	1c53      	adds	r3, r2, #1
 80088c8:	613b      	str	r3, [r7, #16]
 80088ca:	697b      	ldr	r3, [r7, #20]
 80088cc:	1c59      	adds	r1, r3, #1
 80088ce:	6179      	str	r1, [r7, #20]
 80088d0:	7812      	ldrb	r2, [r2, #0]
 80088d2:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	3b01      	subs	r3, #1
 80088d8:	607b      	str	r3, [r7, #4]
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d1f1      	bne.n	80088c4 <mem_cpy+0x1a>
	}
}
 80088e0:	bf00      	nop
 80088e2:	371c      	adds	r7, #28
 80088e4:	46bd      	mov	sp, r7
 80088e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ea:	4770      	bx	lr

080088ec <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80088ec:	b480      	push	{r7}
 80088ee:	b087      	sub	sp, #28
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	60f8      	str	r0, [r7, #12]
 80088f4:	60b9      	str	r1, [r7, #8]
 80088f6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80088fc:	697b      	ldr	r3, [r7, #20]
 80088fe:	1c5a      	adds	r2, r3, #1
 8008900:	617a      	str	r2, [r7, #20]
 8008902:	68ba      	ldr	r2, [r7, #8]
 8008904:	b2d2      	uxtb	r2, r2
 8008906:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	3b01      	subs	r3, #1
 800890c:	607b      	str	r3, [r7, #4]
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	2b00      	cmp	r3, #0
 8008912:	d1f3      	bne.n	80088fc <mem_set+0x10>
}
 8008914:	bf00      	nop
 8008916:	bf00      	nop
 8008918:	371c      	adds	r7, #28
 800891a:	46bd      	mov	sp, r7
 800891c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008920:	4770      	bx	lr

08008922 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8008922:	b480      	push	{r7}
 8008924:	b089      	sub	sp, #36	@ 0x24
 8008926:	af00      	add	r7, sp, #0
 8008928:	60f8      	str	r0, [r7, #12]
 800892a:	60b9      	str	r1, [r7, #8]
 800892c:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	61fb      	str	r3, [r7, #28]
 8008932:	68bb      	ldr	r3, [r7, #8]
 8008934:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8008936:	2300      	movs	r3, #0
 8008938:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800893a:	69fb      	ldr	r3, [r7, #28]
 800893c:	1c5a      	adds	r2, r3, #1
 800893e:	61fa      	str	r2, [r7, #28]
 8008940:	781b      	ldrb	r3, [r3, #0]
 8008942:	4619      	mov	r1, r3
 8008944:	69bb      	ldr	r3, [r7, #24]
 8008946:	1c5a      	adds	r2, r3, #1
 8008948:	61ba      	str	r2, [r7, #24]
 800894a:	781b      	ldrb	r3, [r3, #0]
 800894c:	1acb      	subs	r3, r1, r3
 800894e:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	3b01      	subs	r3, #1
 8008954:	607b      	str	r3, [r7, #4]
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	2b00      	cmp	r3, #0
 800895a:	d002      	beq.n	8008962 <mem_cmp+0x40>
 800895c:	697b      	ldr	r3, [r7, #20]
 800895e:	2b00      	cmp	r3, #0
 8008960:	d0eb      	beq.n	800893a <mem_cmp+0x18>

	return r;
 8008962:	697b      	ldr	r3, [r7, #20]
}
 8008964:	4618      	mov	r0, r3
 8008966:	3724      	adds	r7, #36	@ 0x24
 8008968:	46bd      	mov	sp, r7
 800896a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896e:	4770      	bx	lr

08008970 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8008970:	b480      	push	{r7}
 8008972:	b083      	sub	sp, #12
 8008974:	af00      	add	r7, sp, #0
 8008976:	6078      	str	r0, [r7, #4]
 8008978:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800897a:	e002      	b.n	8008982 <chk_chr+0x12>
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	3301      	adds	r3, #1
 8008980:	607b      	str	r3, [r7, #4]
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	781b      	ldrb	r3, [r3, #0]
 8008986:	2b00      	cmp	r3, #0
 8008988:	d005      	beq.n	8008996 <chk_chr+0x26>
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	781b      	ldrb	r3, [r3, #0]
 800898e:	461a      	mov	r2, r3
 8008990:	683b      	ldr	r3, [r7, #0]
 8008992:	4293      	cmp	r3, r2
 8008994:	d1f2      	bne.n	800897c <chk_chr+0xc>
	return *str;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	781b      	ldrb	r3, [r3, #0]
}
 800899a:	4618      	mov	r0, r3
 800899c:	370c      	adds	r7, #12
 800899e:	46bd      	mov	sp, r7
 80089a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a4:	4770      	bx	lr

080089a6 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 80089a6:	b580      	push	{r7, lr}
 80089a8:	b082      	sub	sp, #8
 80089aa:	af00      	add	r7, sp, #0
 80089ac:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d009      	beq.n	80089c8 <lock_fs+0x22>
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	68db      	ldr	r3, [r3, #12]
 80089b8:	4618      	mov	r0, r3
 80089ba:	f002 fa8b 	bl	800aed4 <ff_req_grant>
 80089be:	4603      	mov	r3, r0
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d001      	beq.n	80089c8 <lock_fs+0x22>
 80089c4:	2301      	movs	r3, #1
 80089c6:	e000      	b.n	80089ca <lock_fs+0x24>
 80089c8:	2300      	movs	r3, #0
}
 80089ca:	4618      	mov	r0, r3
 80089cc:	3708      	adds	r7, #8
 80089ce:	46bd      	mov	sp, r7
 80089d0:	bd80      	pop	{r7, pc}

080089d2 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 80089d2:	b580      	push	{r7, lr}
 80089d4:	b082      	sub	sp, #8
 80089d6:	af00      	add	r7, sp, #0
 80089d8:	6078      	str	r0, [r7, #4]
 80089da:	460b      	mov	r3, r1
 80089dc:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d00d      	beq.n	8008a00 <unlock_fs+0x2e>
 80089e4:	78fb      	ldrb	r3, [r7, #3]
 80089e6:	2b0c      	cmp	r3, #12
 80089e8:	d00a      	beq.n	8008a00 <unlock_fs+0x2e>
 80089ea:	78fb      	ldrb	r3, [r7, #3]
 80089ec:	2b0b      	cmp	r3, #11
 80089ee:	d007      	beq.n	8008a00 <unlock_fs+0x2e>
 80089f0:	78fb      	ldrb	r3, [r7, #3]
 80089f2:	2b0f      	cmp	r3, #15
 80089f4:	d004      	beq.n	8008a00 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	68db      	ldr	r3, [r3, #12]
 80089fa:	4618      	mov	r0, r3
 80089fc:	f002 fa7f 	bl	800aefe <ff_rel_grant>
	}
}
 8008a00:	bf00      	nop
 8008a02:	3708      	adds	r7, #8
 8008a04:	46bd      	mov	sp, r7
 8008a06:	bd80      	pop	{r7, pc}

08008a08 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008a08:	b480      	push	{r7}
 8008a0a:	b085      	sub	sp, #20
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
 8008a10:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008a12:	2300      	movs	r3, #0
 8008a14:	60bb      	str	r3, [r7, #8]
 8008a16:	68bb      	ldr	r3, [r7, #8]
 8008a18:	60fb      	str	r3, [r7, #12]
 8008a1a:	e029      	b.n	8008a70 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8008a1c:	4a27      	ldr	r2, [pc, #156]	@ (8008abc <chk_lock+0xb4>)
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	011b      	lsls	r3, r3, #4
 8008a22:	4413      	add	r3, r2
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d01d      	beq.n	8008a66 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008a2a:	4a24      	ldr	r2, [pc, #144]	@ (8008abc <chk_lock+0xb4>)
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	011b      	lsls	r3, r3, #4
 8008a30:	4413      	add	r3, r2
 8008a32:	681a      	ldr	r2, [r3, #0]
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	429a      	cmp	r2, r3
 8008a3a:	d116      	bne.n	8008a6a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8008a3c:	4a1f      	ldr	r2, [pc, #124]	@ (8008abc <chk_lock+0xb4>)
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	011b      	lsls	r3, r3, #4
 8008a42:	4413      	add	r3, r2
 8008a44:	3304      	adds	r3, #4
 8008a46:	681a      	ldr	r2, [r3, #0]
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008a4c:	429a      	cmp	r2, r3
 8008a4e:	d10c      	bne.n	8008a6a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008a50:	4a1a      	ldr	r2, [pc, #104]	@ (8008abc <chk_lock+0xb4>)
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	011b      	lsls	r3, r3, #4
 8008a56:	4413      	add	r3, r2
 8008a58:	3308      	adds	r3, #8
 8008a5a:	681a      	ldr	r2, [r3, #0]
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8008a60:	429a      	cmp	r2, r3
 8008a62:	d102      	bne.n	8008a6a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008a64:	e007      	b.n	8008a76 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8008a66:	2301      	movs	r3, #1
 8008a68:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	3301      	adds	r3, #1
 8008a6e:	60fb      	str	r3, [r7, #12]
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	2b01      	cmp	r3, #1
 8008a74:	d9d2      	bls.n	8008a1c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	2b02      	cmp	r3, #2
 8008a7a:	d109      	bne.n	8008a90 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8008a7c:	68bb      	ldr	r3, [r7, #8]
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d102      	bne.n	8008a88 <chk_lock+0x80>
 8008a82:	683b      	ldr	r3, [r7, #0]
 8008a84:	2b02      	cmp	r3, #2
 8008a86:	d101      	bne.n	8008a8c <chk_lock+0x84>
 8008a88:	2300      	movs	r3, #0
 8008a8a:	e010      	b.n	8008aae <chk_lock+0xa6>
 8008a8c:	2312      	movs	r3, #18
 8008a8e:	e00e      	b.n	8008aae <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8008a90:	683b      	ldr	r3, [r7, #0]
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d108      	bne.n	8008aa8 <chk_lock+0xa0>
 8008a96:	4a09      	ldr	r2, [pc, #36]	@ (8008abc <chk_lock+0xb4>)
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	011b      	lsls	r3, r3, #4
 8008a9c:	4413      	add	r3, r2
 8008a9e:	330c      	adds	r3, #12
 8008aa0:	881b      	ldrh	r3, [r3, #0]
 8008aa2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008aa6:	d101      	bne.n	8008aac <chk_lock+0xa4>
 8008aa8:	2310      	movs	r3, #16
 8008aaa:	e000      	b.n	8008aae <chk_lock+0xa6>
 8008aac:	2300      	movs	r3, #0
}
 8008aae:	4618      	mov	r0, r3
 8008ab0:	3714      	adds	r7, #20
 8008ab2:	46bd      	mov	sp, r7
 8008ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab8:	4770      	bx	lr
 8008aba:	bf00      	nop
 8008abc:	20000818 	.word	0x20000818

08008ac0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8008ac0:	b480      	push	{r7}
 8008ac2:	b083      	sub	sp, #12
 8008ac4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008ac6:	2300      	movs	r3, #0
 8008ac8:	607b      	str	r3, [r7, #4]
 8008aca:	e002      	b.n	8008ad2 <enq_lock+0x12>
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	3301      	adds	r3, #1
 8008ad0:	607b      	str	r3, [r7, #4]
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	2b01      	cmp	r3, #1
 8008ad6:	d806      	bhi.n	8008ae6 <enq_lock+0x26>
 8008ad8:	4a09      	ldr	r2, [pc, #36]	@ (8008b00 <enq_lock+0x40>)
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	011b      	lsls	r3, r3, #4
 8008ade:	4413      	add	r3, r2
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d1f2      	bne.n	8008acc <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	2b02      	cmp	r3, #2
 8008aea:	bf14      	ite	ne
 8008aec:	2301      	movne	r3, #1
 8008aee:	2300      	moveq	r3, #0
 8008af0:	b2db      	uxtb	r3, r3
}
 8008af2:	4618      	mov	r0, r3
 8008af4:	370c      	adds	r7, #12
 8008af6:	46bd      	mov	sp, r7
 8008af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afc:	4770      	bx	lr
 8008afe:	bf00      	nop
 8008b00:	20000818 	.word	0x20000818

08008b04 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008b04:	b480      	push	{r7}
 8008b06:	b085      	sub	sp, #20
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]
 8008b0c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008b0e:	2300      	movs	r3, #0
 8008b10:	60fb      	str	r3, [r7, #12]
 8008b12:	e01f      	b.n	8008b54 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8008b14:	4a41      	ldr	r2, [pc, #260]	@ (8008c1c <inc_lock+0x118>)
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	011b      	lsls	r3, r3, #4
 8008b1a:	4413      	add	r3, r2
 8008b1c:	681a      	ldr	r2, [r3, #0]
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	429a      	cmp	r2, r3
 8008b24:	d113      	bne.n	8008b4e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8008b26:	4a3d      	ldr	r2, [pc, #244]	@ (8008c1c <inc_lock+0x118>)
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	011b      	lsls	r3, r3, #4
 8008b2c:	4413      	add	r3, r2
 8008b2e:	3304      	adds	r3, #4
 8008b30:	681a      	ldr	r2, [r3, #0]
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8008b36:	429a      	cmp	r2, r3
 8008b38:	d109      	bne.n	8008b4e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8008b3a:	4a38      	ldr	r2, [pc, #224]	@ (8008c1c <inc_lock+0x118>)
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	011b      	lsls	r3, r3, #4
 8008b40:	4413      	add	r3, r2
 8008b42:	3308      	adds	r3, #8
 8008b44:	681a      	ldr	r2, [r3, #0]
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8008b4a:	429a      	cmp	r2, r3
 8008b4c:	d006      	beq.n	8008b5c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	3301      	adds	r3, #1
 8008b52:	60fb      	str	r3, [r7, #12]
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	2b01      	cmp	r3, #1
 8008b58:	d9dc      	bls.n	8008b14 <inc_lock+0x10>
 8008b5a:	e000      	b.n	8008b5e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8008b5c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	2b02      	cmp	r3, #2
 8008b62:	d132      	bne.n	8008bca <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008b64:	2300      	movs	r3, #0
 8008b66:	60fb      	str	r3, [r7, #12]
 8008b68:	e002      	b.n	8008b70 <inc_lock+0x6c>
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	3301      	adds	r3, #1
 8008b6e:	60fb      	str	r3, [r7, #12]
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	2b01      	cmp	r3, #1
 8008b74:	d806      	bhi.n	8008b84 <inc_lock+0x80>
 8008b76:	4a29      	ldr	r2, [pc, #164]	@ (8008c1c <inc_lock+0x118>)
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	011b      	lsls	r3, r3, #4
 8008b7c:	4413      	add	r3, r2
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d1f2      	bne.n	8008b6a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	2b02      	cmp	r3, #2
 8008b88:	d101      	bne.n	8008b8e <inc_lock+0x8a>
 8008b8a:	2300      	movs	r3, #0
 8008b8c:	e040      	b.n	8008c10 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681a      	ldr	r2, [r3, #0]
 8008b92:	4922      	ldr	r1, [pc, #136]	@ (8008c1c <inc_lock+0x118>)
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	011b      	lsls	r3, r3, #4
 8008b98:	440b      	add	r3, r1
 8008b9a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	689a      	ldr	r2, [r3, #8]
 8008ba0:	491e      	ldr	r1, [pc, #120]	@ (8008c1c <inc_lock+0x118>)
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	011b      	lsls	r3, r3, #4
 8008ba6:	440b      	add	r3, r1
 8008ba8:	3304      	adds	r3, #4
 8008baa:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	695a      	ldr	r2, [r3, #20]
 8008bb0:	491a      	ldr	r1, [pc, #104]	@ (8008c1c <inc_lock+0x118>)
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	011b      	lsls	r3, r3, #4
 8008bb6:	440b      	add	r3, r1
 8008bb8:	3308      	adds	r3, #8
 8008bba:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8008bbc:	4a17      	ldr	r2, [pc, #92]	@ (8008c1c <inc_lock+0x118>)
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	011b      	lsls	r3, r3, #4
 8008bc2:	4413      	add	r3, r2
 8008bc4:	330c      	adds	r3, #12
 8008bc6:	2200      	movs	r2, #0
 8008bc8:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8008bca:	683b      	ldr	r3, [r7, #0]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d009      	beq.n	8008be4 <inc_lock+0xe0>
 8008bd0:	4a12      	ldr	r2, [pc, #72]	@ (8008c1c <inc_lock+0x118>)
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	011b      	lsls	r3, r3, #4
 8008bd6:	4413      	add	r3, r2
 8008bd8:	330c      	adds	r3, #12
 8008bda:	881b      	ldrh	r3, [r3, #0]
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d001      	beq.n	8008be4 <inc_lock+0xe0>
 8008be0:	2300      	movs	r3, #0
 8008be2:	e015      	b.n	8008c10 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8008be4:	683b      	ldr	r3, [r7, #0]
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d108      	bne.n	8008bfc <inc_lock+0xf8>
 8008bea:	4a0c      	ldr	r2, [pc, #48]	@ (8008c1c <inc_lock+0x118>)
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	011b      	lsls	r3, r3, #4
 8008bf0:	4413      	add	r3, r2
 8008bf2:	330c      	adds	r3, #12
 8008bf4:	881b      	ldrh	r3, [r3, #0]
 8008bf6:	3301      	adds	r3, #1
 8008bf8:	b29a      	uxth	r2, r3
 8008bfa:	e001      	b.n	8008c00 <inc_lock+0xfc>
 8008bfc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008c00:	4906      	ldr	r1, [pc, #24]	@ (8008c1c <inc_lock+0x118>)
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	011b      	lsls	r3, r3, #4
 8008c06:	440b      	add	r3, r1
 8008c08:	330c      	adds	r3, #12
 8008c0a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	3301      	adds	r3, #1
}
 8008c10:	4618      	mov	r0, r3
 8008c12:	3714      	adds	r7, #20
 8008c14:	46bd      	mov	sp, r7
 8008c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1a:	4770      	bx	lr
 8008c1c:	20000818 	.word	0x20000818

08008c20 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8008c20:	b480      	push	{r7}
 8008c22:	b085      	sub	sp, #20
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	3b01      	subs	r3, #1
 8008c2c:	607b      	str	r3, [r7, #4]
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	2b01      	cmp	r3, #1
 8008c32:	d825      	bhi.n	8008c80 <dec_lock+0x60>
		n = Files[i].ctr;
 8008c34:	4a17      	ldr	r2, [pc, #92]	@ (8008c94 <dec_lock+0x74>)
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	011b      	lsls	r3, r3, #4
 8008c3a:	4413      	add	r3, r2
 8008c3c:	330c      	adds	r3, #12
 8008c3e:	881b      	ldrh	r3, [r3, #0]
 8008c40:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8008c42:	89fb      	ldrh	r3, [r7, #14]
 8008c44:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008c48:	d101      	bne.n	8008c4e <dec_lock+0x2e>
 8008c4a:	2300      	movs	r3, #0
 8008c4c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8008c4e:	89fb      	ldrh	r3, [r7, #14]
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d002      	beq.n	8008c5a <dec_lock+0x3a>
 8008c54:	89fb      	ldrh	r3, [r7, #14]
 8008c56:	3b01      	subs	r3, #1
 8008c58:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8008c5a:	4a0e      	ldr	r2, [pc, #56]	@ (8008c94 <dec_lock+0x74>)
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	011b      	lsls	r3, r3, #4
 8008c60:	4413      	add	r3, r2
 8008c62:	330c      	adds	r3, #12
 8008c64:	89fa      	ldrh	r2, [r7, #14]
 8008c66:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8008c68:	89fb      	ldrh	r3, [r7, #14]
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d105      	bne.n	8008c7a <dec_lock+0x5a>
 8008c6e:	4a09      	ldr	r2, [pc, #36]	@ (8008c94 <dec_lock+0x74>)
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	011b      	lsls	r3, r3, #4
 8008c74:	4413      	add	r3, r2
 8008c76:	2200      	movs	r2, #0
 8008c78:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8008c7a:	2300      	movs	r3, #0
 8008c7c:	737b      	strb	r3, [r7, #13]
 8008c7e:	e001      	b.n	8008c84 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8008c80:	2302      	movs	r3, #2
 8008c82:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8008c84:	7b7b      	ldrb	r3, [r7, #13]
}
 8008c86:	4618      	mov	r0, r3
 8008c88:	3714      	adds	r7, #20
 8008c8a:	46bd      	mov	sp, r7
 8008c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c90:	4770      	bx	lr
 8008c92:	bf00      	nop
 8008c94:	20000818 	.word	0x20000818

08008c98 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8008c98:	b480      	push	{r7}
 8008c9a:	b085      	sub	sp, #20
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8008ca0:	2300      	movs	r3, #0
 8008ca2:	60fb      	str	r3, [r7, #12]
 8008ca4:	e010      	b.n	8008cc8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8008ca6:	4a0d      	ldr	r2, [pc, #52]	@ (8008cdc <clear_lock+0x44>)
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	011b      	lsls	r3, r3, #4
 8008cac:	4413      	add	r3, r2
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	687a      	ldr	r2, [r7, #4]
 8008cb2:	429a      	cmp	r2, r3
 8008cb4:	d105      	bne.n	8008cc2 <clear_lock+0x2a>
 8008cb6:	4a09      	ldr	r2, [pc, #36]	@ (8008cdc <clear_lock+0x44>)
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	011b      	lsls	r3, r3, #4
 8008cbc:	4413      	add	r3, r2
 8008cbe:	2200      	movs	r2, #0
 8008cc0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	3301      	adds	r3, #1
 8008cc6:	60fb      	str	r3, [r7, #12]
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	2b01      	cmp	r3, #1
 8008ccc:	d9eb      	bls.n	8008ca6 <clear_lock+0xe>
	}
}
 8008cce:	bf00      	nop
 8008cd0:	bf00      	nop
 8008cd2:	3714      	adds	r7, #20
 8008cd4:	46bd      	mov	sp, r7
 8008cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cda:	4770      	bx	lr
 8008cdc:	20000818 	.word	0x20000818

08008ce0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8008ce0:	b580      	push	{r7, lr}
 8008ce2:	b086      	sub	sp, #24
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8008ce8:	2300      	movs	r3, #0
 8008cea:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	78db      	ldrb	r3, [r3, #3]
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d034      	beq.n	8008d5e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008cf8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	7858      	ldrb	r0, [r3, #1]
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8008d04:	2301      	movs	r3, #1
 8008d06:	697a      	ldr	r2, [r7, #20]
 8008d08:	f7ff fd0e 	bl	8008728 <disk_write>
 8008d0c:	4603      	mov	r3, r0
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d002      	beq.n	8008d18 <sync_window+0x38>
			res = FR_DISK_ERR;
 8008d12:	2301      	movs	r3, #1
 8008d14:	73fb      	strb	r3, [r7, #15]
 8008d16:	e022      	b.n	8008d5e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	2200      	movs	r2, #0
 8008d1c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d22:	697a      	ldr	r2, [r7, #20]
 8008d24:	1ad2      	subs	r2, r2, r3
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	69db      	ldr	r3, [r3, #28]
 8008d2a:	429a      	cmp	r2, r3
 8008d2c:	d217      	bcs.n	8008d5e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	789b      	ldrb	r3, [r3, #2]
 8008d32:	613b      	str	r3, [r7, #16]
 8008d34:	e010      	b.n	8008d58 <sync_window+0x78>
					wsect += fs->fsize;
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	69db      	ldr	r3, [r3, #28]
 8008d3a:	697a      	ldr	r2, [r7, #20]
 8008d3c:	4413      	add	r3, r2
 8008d3e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	7858      	ldrb	r0, [r3, #1]
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8008d4a:	2301      	movs	r3, #1
 8008d4c:	697a      	ldr	r2, [r7, #20]
 8008d4e:	f7ff fceb 	bl	8008728 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008d52:	693b      	ldr	r3, [r7, #16]
 8008d54:	3b01      	subs	r3, #1
 8008d56:	613b      	str	r3, [r7, #16]
 8008d58:	693b      	ldr	r3, [r7, #16]
 8008d5a:	2b01      	cmp	r3, #1
 8008d5c:	d8eb      	bhi.n	8008d36 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8008d5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d60:	4618      	mov	r0, r3
 8008d62:	3718      	adds	r7, #24
 8008d64:	46bd      	mov	sp, r7
 8008d66:	bd80      	pop	{r7, pc}

08008d68 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8008d68:	b580      	push	{r7, lr}
 8008d6a:	b084      	sub	sp, #16
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	6078      	str	r0, [r7, #4]
 8008d70:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8008d72:	2300      	movs	r3, #0
 8008d74:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d7a:	683a      	ldr	r2, [r7, #0]
 8008d7c:	429a      	cmp	r2, r3
 8008d7e:	d01b      	beq.n	8008db8 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8008d80:	6878      	ldr	r0, [r7, #4]
 8008d82:	f7ff ffad 	bl	8008ce0 <sync_window>
 8008d86:	4603      	mov	r3, r0
 8008d88:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8008d8a:	7bfb      	ldrb	r3, [r7, #15]
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d113      	bne.n	8008db8 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	7858      	ldrb	r0, [r3, #1]
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8008d9a:	2301      	movs	r3, #1
 8008d9c:	683a      	ldr	r2, [r7, #0]
 8008d9e:	f7ff fca3 	bl	80086e8 <disk_read>
 8008da2:	4603      	mov	r3, r0
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d004      	beq.n	8008db2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8008da8:	f04f 33ff 	mov.w	r3, #4294967295
 8008dac:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8008dae:	2301      	movs	r3, #1
 8008db0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	683a      	ldr	r2, [r7, #0]
 8008db6:	631a      	str	r2, [r3, #48]	@ 0x30
		}
	}
	return res;
 8008db8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dba:	4618      	mov	r0, r3
 8008dbc:	3710      	adds	r7, #16
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	bd80      	pop	{r7, pc}
	...

08008dc4 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8008dc4:	b580      	push	{r7, lr}
 8008dc6:	b084      	sub	sp, #16
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8008dcc:	6878      	ldr	r0, [r7, #4]
 8008dce:	f7ff ff87 	bl	8008ce0 <sync_window>
 8008dd2:	4603      	mov	r3, r0
 8008dd4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8008dd6:	7bfb      	ldrb	r3, [r7, #15]
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d158      	bne.n	8008e8e <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	781b      	ldrb	r3, [r3, #0]
 8008de0:	2b03      	cmp	r3, #3
 8008de2:	d148      	bne.n	8008e76 <sync_fs+0xb2>
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	791b      	ldrb	r3, [r3, #4]
 8008de8:	2b01      	cmp	r3, #1
 8008dea:	d144      	bne.n	8008e76 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	3334      	adds	r3, #52	@ 0x34
 8008df0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008df4:	2100      	movs	r1, #0
 8008df6:	4618      	mov	r0, r3
 8008df8:	f7ff fd78 	bl	80088ec <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	3334      	adds	r3, #52	@ 0x34
 8008e00:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8008e04:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8008e08:	4618      	mov	r0, r3
 8008e0a:	f7ff fd07 	bl	800881c <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	3334      	adds	r3, #52	@ 0x34
 8008e12:	4921      	ldr	r1, [pc, #132]	@ (8008e98 <sync_fs+0xd4>)
 8008e14:	4618      	mov	r0, r3
 8008e16:	f7ff fd1c 	bl	8008852 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	3334      	adds	r3, #52	@ 0x34
 8008e1e:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8008e22:	491e      	ldr	r1, [pc, #120]	@ (8008e9c <sync_fs+0xd8>)
 8008e24:	4618      	mov	r0, r3
 8008e26:	f7ff fd14 	bl	8008852 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	3334      	adds	r3, #52	@ 0x34
 8008e2e:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	695b      	ldr	r3, [r3, #20]
 8008e36:	4619      	mov	r1, r3
 8008e38:	4610      	mov	r0, r2
 8008e3a:	f7ff fd0a 	bl	8008852 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	3334      	adds	r3, #52	@ 0x34
 8008e42:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	691b      	ldr	r3, [r3, #16]
 8008e4a:	4619      	mov	r1, r3
 8008e4c:	4610      	mov	r0, r2
 8008e4e:	f7ff fd00 	bl	8008852 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	6a1b      	ldr	r3, [r3, #32]
 8008e56:	1c5a      	adds	r2, r3, #1
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	631a      	str	r2, [r3, #48]	@ 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	7858      	ldrb	r0, [r3, #1]
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008e6a:	2301      	movs	r3, #1
 8008e6c:	f7ff fc5c 	bl	8008728 <disk_write>
			fs->fsi_flag = 0;
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	2200      	movs	r2, #0
 8008e74:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	785b      	ldrb	r3, [r3, #1]
 8008e7a:	2200      	movs	r2, #0
 8008e7c:	2100      	movs	r1, #0
 8008e7e:	4618      	mov	r0, r3
 8008e80:	f7ff fc72 	bl	8008768 <disk_ioctl>
 8008e84:	4603      	mov	r3, r0
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d001      	beq.n	8008e8e <sync_fs+0xca>
 8008e8a:	2301      	movs	r3, #1
 8008e8c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8008e8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e90:	4618      	mov	r0, r3
 8008e92:	3710      	adds	r7, #16
 8008e94:	46bd      	mov	sp, r7
 8008e96:	bd80      	pop	{r7, pc}
 8008e98:	41615252 	.word	0x41615252
 8008e9c:	61417272 	.word	0x61417272

08008ea0 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8008ea0:	b480      	push	{r7}
 8008ea2:	b083      	sub	sp, #12
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	6078      	str	r0, [r7, #4]
 8008ea8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8008eaa:	683b      	ldr	r3, [r7, #0]
 8008eac:	3b02      	subs	r3, #2
 8008eae:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	699b      	ldr	r3, [r3, #24]
 8008eb4:	3b02      	subs	r3, #2
 8008eb6:	683a      	ldr	r2, [r7, #0]
 8008eb8:	429a      	cmp	r2, r3
 8008eba:	d301      	bcc.n	8008ec0 <clust2sect+0x20>
 8008ebc:	2300      	movs	r3, #0
 8008ebe:	e008      	b.n	8008ed2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	895b      	ldrh	r3, [r3, #10]
 8008ec4:	461a      	mov	r2, r3
 8008ec6:	683b      	ldr	r3, [r7, #0]
 8008ec8:	fb03 f202 	mul.w	r2, r3, r2
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ed0:	4413      	add	r3, r2
}
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	370c      	adds	r7, #12
 8008ed6:	46bd      	mov	sp, r7
 8008ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008edc:	4770      	bx	lr

08008ede <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8008ede:	b580      	push	{r7, lr}
 8008ee0:	b086      	sub	sp, #24
 8008ee2:	af00      	add	r7, sp, #0
 8008ee4:	6078      	str	r0, [r7, #4]
 8008ee6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8008eee:	683b      	ldr	r3, [r7, #0]
 8008ef0:	2b01      	cmp	r3, #1
 8008ef2:	d904      	bls.n	8008efe <get_fat+0x20>
 8008ef4:	693b      	ldr	r3, [r7, #16]
 8008ef6:	699b      	ldr	r3, [r3, #24]
 8008ef8:	683a      	ldr	r2, [r7, #0]
 8008efa:	429a      	cmp	r2, r3
 8008efc:	d302      	bcc.n	8008f04 <get_fat+0x26>
		val = 1;	/* Internal error */
 8008efe:	2301      	movs	r3, #1
 8008f00:	617b      	str	r3, [r7, #20]
 8008f02:	e08e      	b.n	8009022 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8008f04:	f04f 33ff 	mov.w	r3, #4294967295
 8008f08:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8008f0a:	693b      	ldr	r3, [r7, #16]
 8008f0c:	781b      	ldrb	r3, [r3, #0]
 8008f0e:	2b03      	cmp	r3, #3
 8008f10:	d061      	beq.n	8008fd6 <get_fat+0xf8>
 8008f12:	2b03      	cmp	r3, #3
 8008f14:	dc7b      	bgt.n	800900e <get_fat+0x130>
 8008f16:	2b01      	cmp	r3, #1
 8008f18:	d002      	beq.n	8008f20 <get_fat+0x42>
 8008f1a:	2b02      	cmp	r3, #2
 8008f1c:	d041      	beq.n	8008fa2 <get_fat+0xc4>
 8008f1e:	e076      	b.n	800900e <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8008f20:	683b      	ldr	r3, [r7, #0]
 8008f22:	60fb      	str	r3, [r7, #12]
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	085b      	lsrs	r3, r3, #1
 8008f28:	68fa      	ldr	r2, [r7, #12]
 8008f2a:	4413      	add	r3, r2
 8008f2c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008f2e:	693b      	ldr	r3, [r7, #16]
 8008f30:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	0a5b      	lsrs	r3, r3, #9
 8008f36:	4413      	add	r3, r2
 8008f38:	4619      	mov	r1, r3
 8008f3a:	6938      	ldr	r0, [r7, #16]
 8008f3c:	f7ff ff14 	bl	8008d68 <move_window>
 8008f40:	4603      	mov	r3, r0
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d166      	bne.n	8009014 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	1c5a      	adds	r2, r3, #1
 8008f4a:	60fa      	str	r2, [r7, #12]
 8008f4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f50:	693a      	ldr	r2, [r7, #16]
 8008f52:	4413      	add	r3, r2
 8008f54:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8008f58:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008f5a:	693b      	ldr	r3, [r7, #16]
 8008f5c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	0a5b      	lsrs	r3, r3, #9
 8008f62:	4413      	add	r3, r2
 8008f64:	4619      	mov	r1, r3
 8008f66:	6938      	ldr	r0, [r7, #16]
 8008f68:	f7ff fefe 	bl	8008d68 <move_window>
 8008f6c:	4603      	mov	r3, r0
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d152      	bne.n	8009018 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f78:	693a      	ldr	r2, [r7, #16]
 8008f7a:	4413      	add	r3, r2
 8008f7c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8008f80:	021b      	lsls	r3, r3, #8
 8008f82:	68ba      	ldr	r2, [r7, #8]
 8008f84:	4313      	orrs	r3, r2
 8008f86:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8008f88:	683b      	ldr	r3, [r7, #0]
 8008f8a:	f003 0301 	and.w	r3, r3, #1
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d002      	beq.n	8008f98 <get_fat+0xba>
 8008f92:	68bb      	ldr	r3, [r7, #8]
 8008f94:	091b      	lsrs	r3, r3, #4
 8008f96:	e002      	b.n	8008f9e <get_fat+0xc0>
 8008f98:	68bb      	ldr	r3, [r7, #8]
 8008f9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008f9e:	617b      	str	r3, [r7, #20]
			break;
 8008fa0:	e03f      	b.n	8009022 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008fa2:	693b      	ldr	r3, [r7, #16]
 8008fa4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008fa6:	683b      	ldr	r3, [r7, #0]
 8008fa8:	0a1b      	lsrs	r3, r3, #8
 8008faa:	4413      	add	r3, r2
 8008fac:	4619      	mov	r1, r3
 8008fae:	6938      	ldr	r0, [r7, #16]
 8008fb0:	f7ff feda 	bl	8008d68 <move_window>
 8008fb4:	4603      	mov	r3, r0
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d130      	bne.n	800901c <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8008fba:	693b      	ldr	r3, [r7, #16]
 8008fbc:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8008fc0:	683b      	ldr	r3, [r7, #0]
 8008fc2:	005b      	lsls	r3, r3, #1
 8008fc4:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8008fc8:	4413      	add	r3, r2
 8008fca:	4618      	mov	r0, r3
 8008fcc:	f7ff fbea 	bl	80087a4 <ld_word>
 8008fd0:	4603      	mov	r3, r0
 8008fd2:	617b      	str	r3, [r7, #20]
			break;
 8008fd4:	e025      	b.n	8009022 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008fd6:	693b      	ldr	r3, [r7, #16]
 8008fd8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008fda:	683b      	ldr	r3, [r7, #0]
 8008fdc:	09db      	lsrs	r3, r3, #7
 8008fde:	4413      	add	r3, r2
 8008fe0:	4619      	mov	r1, r3
 8008fe2:	6938      	ldr	r0, [r7, #16]
 8008fe4:	f7ff fec0 	bl	8008d68 <move_window>
 8008fe8:	4603      	mov	r3, r0
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d118      	bne.n	8009020 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8008fee:	693b      	ldr	r3, [r7, #16]
 8008ff0:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8008ff4:	683b      	ldr	r3, [r7, #0]
 8008ff6:	009b      	lsls	r3, r3, #2
 8008ff8:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8008ffc:	4413      	add	r3, r2
 8008ffe:	4618      	mov	r0, r3
 8009000:	f7ff fbe9 	bl	80087d6 <ld_dword>
 8009004:	4603      	mov	r3, r0
 8009006:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800900a:	617b      	str	r3, [r7, #20]
			break;
 800900c:	e009      	b.n	8009022 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800900e:	2301      	movs	r3, #1
 8009010:	617b      	str	r3, [r7, #20]
 8009012:	e006      	b.n	8009022 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009014:	bf00      	nop
 8009016:	e004      	b.n	8009022 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009018:	bf00      	nop
 800901a:	e002      	b.n	8009022 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800901c:	bf00      	nop
 800901e:	e000      	b.n	8009022 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009020:	bf00      	nop
		}
	}

	return val;
 8009022:	697b      	ldr	r3, [r7, #20]
}
 8009024:	4618      	mov	r0, r3
 8009026:	3718      	adds	r7, #24
 8009028:	46bd      	mov	sp, r7
 800902a:	bd80      	pop	{r7, pc}

0800902c <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800902c:	b590      	push	{r4, r7, lr}
 800902e:	b089      	sub	sp, #36	@ 0x24
 8009030:	af00      	add	r7, sp, #0
 8009032:	60f8      	str	r0, [r7, #12]
 8009034:	60b9      	str	r1, [r7, #8]
 8009036:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8009038:	2302      	movs	r3, #2
 800903a:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800903c:	68bb      	ldr	r3, [r7, #8]
 800903e:	2b01      	cmp	r3, #1
 8009040:	f240 80d9 	bls.w	80091f6 <put_fat+0x1ca>
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	699b      	ldr	r3, [r3, #24]
 8009048:	68ba      	ldr	r2, [r7, #8]
 800904a:	429a      	cmp	r2, r3
 800904c:	f080 80d3 	bcs.w	80091f6 <put_fat+0x1ca>
		switch (fs->fs_type) {
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	781b      	ldrb	r3, [r3, #0]
 8009054:	2b03      	cmp	r3, #3
 8009056:	f000 8096 	beq.w	8009186 <put_fat+0x15a>
 800905a:	2b03      	cmp	r3, #3
 800905c:	f300 80cb 	bgt.w	80091f6 <put_fat+0x1ca>
 8009060:	2b01      	cmp	r3, #1
 8009062:	d002      	beq.n	800906a <put_fat+0x3e>
 8009064:	2b02      	cmp	r3, #2
 8009066:	d06e      	beq.n	8009146 <put_fat+0x11a>
 8009068:	e0c5      	b.n	80091f6 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800906a:	68bb      	ldr	r3, [r7, #8]
 800906c:	61bb      	str	r3, [r7, #24]
 800906e:	69bb      	ldr	r3, [r7, #24]
 8009070:	085b      	lsrs	r3, r3, #1
 8009072:	69ba      	ldr	r2, [r7, #24]
 8009074:	4413      	add	r3, r2
 8009076:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800907c:	69bb      	ldr	r3, [r7, #24]
 800907e:	0a5b      	lsrs	r3, r3, #9
 8009080:	4413      	add	r3, r2
 8009082:	4619      	mov	r1, r3
 8009084:	68f8      	ldr	r0, [r7, #12]
 8009086:	f7ff fe6f 	bl	8008d68 <move_window>
 800908a:	4603      	mov	r3, r0
 800908c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800908e:	7ffb      	ldrb	r3, [r7, #31]
 8009090:	2b00      	cmp	r3, #0
 8009092:	f040 80a9 	bne.w	80091e8 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800909c:	69bb      	ldr	r3, [r7, #24]
 800909e:	1c59      	adds	r1, r3, #1
 80090a0:	61b9      	str	r1, [r7, #24]
 80090a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090a6:	4413      	add	r3, r2
 80090a8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80090aa:	68bb      	ldr	r3, [r7, #8]
 80090ac:	f003 0301 	and.w	r3, r3, #1
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d00d      	beq.n	80090d0 <put_fat+0xa4>
 80090b4:	697b      	ldr	r3, [r7, #20]
 80090b6:	781b      	ldrb	r3, [r3, #0]
 80090b8:	b25b      	sxtb	r3, r3
 80090ba:	f003 030f 	and.w	r3, r3, #15
 80090be:	b25a      	sxtb	r2, r3
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	b25b      	sxtb	r3, r3
 80090c4:	011b      	lsls	r3, r3, #4
 80090c6:	b25b      	sxtb	r3, r3
 80090c8:	4313      	orrs	r3, r2
 80090ca:	b25b      	sxtb	r3, r3
 80090cc:	b2db      	uxtb	r3, r3
 80090ce:	e001      	b.n	80090d4 <put_fat+0xa8>
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	b2db      	uxtb	r3, r3
 80090d4:	697a      	ldr	r2, [r7, #20]
 80090d6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	2201      	movs	r2, #1
 80090dc:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80090e2:	69bb      	ldr	r3, [r7, #24]
 80090e4:	0a5b      	lsrs	r3, r3, #9
 80090e6:	4413      	add	r3, r2
 80090e8:	4619      	mov	r1, r3
 80090ea:	68f8      	ldr	r0, [r7, #12]
 80090ec:	f7ff fe3c 	bl	8008d68 <move_window>
 80090f0:	4603      	mov	r3, r0
 80090f2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80090f4:	7ffb      	ldrb	r3, [r7, #31]
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d178      	bne.n	80091ec <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8009100:	69bb      	ldr	r3, [r7, #24]
 8009102:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009106:	4413      	add	r3, r2
 8009108:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800910a:	68bb      	ldr	r3, [r7, #8]
 800910c:	f003 0301 	and.w	r3, r3, #1
 8009110:	2b00      	cmp	r3, #0
 8009112:	d003      	beq.n	800911c <put_fat+0xf0>
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	091b      	lsrs	r3, r3, #4
 8009118:	b2db      	uxtb	r3, r3
 800911a:	e00e      	b.n	800913a <put_fat+0x10e>
 800911c:	697b      	ldr	r3, [r7, #20]
 800911e:	781b      	ldrb	r3, [r3, #0]
 8009120:	b25b      	sxtb	r3, r3
 8009122:	f023 030f 	bic.w	r3, r3, #15
 8009126:	b25a      	sxtb	r2, r3
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	0a1b      	lsrs	r3, r3, #8
 800912c:	b25b      	sxtb	r3, r3
 800912e:	f003 030f 	and.w	r3, r3, #15
 8009132:	b25b      	sxtb	r3, r3
 8009134:	4313      	orrs	r3, r2
 8009136:	b25b      	sxtb	r3, r3
 8009138:	b2db      	uxtb	r3, r3
 800913a:	697a      	ldr	r2, [r7, #20]
 800913c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	2201      	movs	r2, #1
 8009142:	70da      	strb	r2, [r3, #3]
			break;
 8009144:	e057      	b.n	80091f6 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800914a:	68bb      	ldr	r3, [r7, #8]
 800914c:	0a1b      	lsrs	r3, r3, #8
 800914e:	4413      	add	r3, r2
 8009150:	4619      	mov	r1, r3
 8009152:	68f8      	ldr	r0, [r7, #12]
 8009154:	f7ff fe08 	bl	8008d68 <move_window>
 8009158:	4603      	mov	r3, r0
 800915a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800915c:	7ffb      	ldrb	r3, [r7, #31]
 800915e:	2b00      	cmp	r3, #0
 8009160:	d146      	bne.n	80091f0 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8009168:	68bb      	ldr	r3, [r7, #8]
 800916a:	005b      	lsls	r3, r3, #1
 800916c:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8009170:	4413      	add	r3, r2
 8009172:	687a      	ldr	r2, [r7, #4]
 8009174:	b292      	uxth	r2, r2
 8009176:	4611      	mov	r1, r2
 8009178:	4618      	mov	r0, r3
 800917a:	f7ff fb4f 	bl	800881c <st_word>
			fs->wflag = 1;
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	2201      	movs	r2, #1
 8009182:	70da      	strb	r2, [r3, #3]
			break;
 8009184:	e037      	b.n	80091f6 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800918a:	68bb      	ldr	r3, [r7, #8]
 800918c:	09db      	lsrs	r3, r3, #7
 800918e:	4413      	add	r3, r2
 8009190:	4619      	mov	r1, r3
 8009192:	68f8      	ldr	r0, [r7, #12]
 8009194:	f7ff fde8 	bl	8008d68 <move_window>
 8009198:	4603      	mov	r3, r0
 800919a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800919c:	7ffb      	ldrb	r3, [r7, #31]
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d128      	bne.n	80091f4 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80091ae:	68bb      	ldr	r3, [r7, #8]
 80091b0:	009b      	lsls	r3, r3, #2
 80091b2:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 80091b6:	4413      	add	r3, r2
 80091b8:	4618      	mov	r0, r3
 80091ba:	f7ff fb0c 	bl	80087d6 <ld_dword>
 80091be:	4603      	mov	r3, r0
 80091c0:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80091c4:	4323      	orrs	r3, r4
 80091c6:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80091ce:	68bb      	ldr	r3, [r7, #8]
 80091d0:	009b      	lsls	r3, r3, #2
 80091d2:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 80091d6:	4413      	add	r3, r2
 80091d8:	6879      	ldr	r1, [r7, #4]
 80091da:	4618      	mov	r0, r3
 80091dc:	f7ff fb39 	bl	8008852 <st_dword>
			fs->wflag = 1;
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	2201      	movs	r2, #1
 80091e4:	70da      	strb	r2, [r3, #3]
			break;
 80091e6:	e006      	b.n	80091f6 <put_fat+0x1ca>
			if (res != FR_OK) break;
 80091e8:	bf00      	nop
 80091ea:	e004      	b.n	80091f6 <put_fat+0x1ca>
			if (res != FR_OK) break;
 80091ec:	bf00      	nop
 80091ee:	e002      	b.n	80091f6 <put_fat+0x1ca>
			if (res != FR_OK) break;
 80091f0:	bf00      	nop
 80091f2:	e000      	b.n	80091f6 <put_fat+0x1ca>
			if (res != FR_OK) break;
 80091f4:	bf00      	nop
		}
	}
	return res;
 80091f6:	7ffb      	ldrb	r3, [r7, #31]
}
 80091f8:	4618      	mov	r0, r3
 80091fa:	3724      	adds	r7, #36	@ 0x24
 80091fc:	46bd      	mov	sp, r7
 80091fe:	bd90      	pop	{r4, r7, pc}

08009200 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8009200:	b580      	push	{r7, lr}
 8009202:	b088      	sub	sp, #32
 8009204:	af00      	add	r7, sp, #0
 8009206:	60f8      	str	r0, [r7, #12]
 8009208:	60b9      	str	r1, [r7, #8]
 800920a:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800920c:	2300      	movs	r3, #0
 800920e:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8009216:	68bb      	ldr	r3, [r7, #8]
 8009218:	2b01      	cmp	r3, #1
 800921a:	d904      	bls.n	8009226 <remove_chain+0x26>
 800921c:	69bb      	ldr	r3, [r7, #24]
 800921e:	699b      	ldr	r3, [r3, #24]
 8009220:	68ba      	ldr	r2, [r7, #8]
 8009222:	429a      	cmp	r2, r3
 8009224:	d301      	bcc.n	800922a <remove_chain+0x2a>
 8009226:	2302      	movs	r3, #2
 8009228:	e04b      	b.n	80092c2 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	2b00      	cmp	r3, #0
 800922e:	d00c      	beq.n	800924a <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8009230:	f04f 32ff 	mov.w	r2, #4294967295
 8009234:	6879      	ldr	r1, [r7, #4]
 8009236:	69b8      	ldr	r0, [r7, #24]
 8009238:	f7ff fef8 	bl	800902c <put_fat>
 800923c:	4603      	mov	r3, r0
 800923e:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8009240:	7ffb      	ldrb	r3, [r7, #31]
 8009242:	2b00      	cmp	r3, #0
 8009244:	d001      	beq.n	800924a <remove_chain+0x4a>
 8009246:	7ffb      	ldrb	r3, [r7, #31]
 8009248:	e03b      	b.n	80092c2 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800924a:	68b9      	ldr	r1, [r7, #8]
 800924c:	68f8      	ldr	r0, [r7, #12]
 800924e:	f7ff fe46 	bl	8008ede <get_fat>
 8009252:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8009254:	697b      	ldr	r3, [r7, #20]
 8009256:	2b00      	cmp	r3, #0
 8009258:	d031      	beq.n	80092be <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800925a:	697b      	ldr	r3, [r7, #20]
 800925c:	2b01      	cmp	r3, #1
 800925e:	d101      	bne.n	8009264 <remove_chain+0x64>
 8009260:	2302      	movs	r3, #2
 8009262:	e02e      	b.n	80092c2 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8009264:	697b      	ldr	r3, [r7, #20]
 8009266:	f1b3 3fff 	cmp.w	r3, #4294967295
 800926a:	d101      	bne.n	8009270 <remove_chain+0x70>
 800926c:	2301      	movs	r3, #1
 800926e:	e028      	b.n	80092c2 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8009270:	2200      	movs	r2, #0
 8009272:	68b9      	ldr	r1, [r7, #8]
 8009274:	69b8      	ldr	r0, [r7, #24]
 8009276:	f7ff fed9 	bl	800902c <put_fat>
 800927a:	4603      	mov	r3, r0
 800927c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800927e:	7ffb      	ldrb	r3, [r7, #31]
 8009280:	2b00      	cmp	r3, #0
 8009282:	d001      	beq.n	8009288 <remove_chain+0x88>
 8009284:	7ffb      	ldrb	r3, [r7, #31]
 8009286:	e01c      	b.n	80092c2 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8009288:	69bb      	ldr	r3, [r7, #24]
 800928a:	695a      	ldr	r2, [r3, #20]
 800928c:	69bb      	ldr	r3, [r7, #24]
 800928e:	699b      	ldr	r3, [r3, #24]
 8009290:	3b02      	subs	r3, #2
 8009292:	429a      	cmp	r2, r3
 8009294:	d20b      	bcs.n	80092ae <remove_chain+0xae>
			fs->free_clst++;
 8009296:	69bb      	ldr	r3, [r7, #24]
 8009298:	695b      	ldr	r3, [r3, #20]
 800929a:	1c5a      	adds	r2, r3, #1
 800929c:	69bb      	ldr	r3, [r7, #24]
 800929e:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 80092a0:	69bb      	ldr	r3, [r7, #24]
 80092a2:	791b      	ldrb	r3, [r3, #4]
 80092a4:	f043 0301 	orr.w	r3, r3, #1
 80092a8:	b2da      	uxtb	r2, r3
 80092aa:	69bb      	ldr	r3, [r7, #24]
 80092ac:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80092ae:	697b      	ldr	r3, [r7, #20]
 80092b0:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80092b2:	69bb      	ldr	r3, [r7, #24]
 80092b4:	699b      	ldr	r3, [r3, #24]
 80092b6:	68ba      	ldr	r2, [r7, #8]
 80092b8:	429a      	cmp	r2, r3
 80092ba:	d3c6      	bcc.n	800924a <remove_chain+0x4a>
 80092bc:	e000      	b.n	80092c0 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80092be:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80092c0:	2300      	movs	r3, #0
}
 80092c2:	4618      	mov	r0, r3
 80092c4:	3720      	adds	r7, #32
 80092c6:	46bd      	mov	sp, r7
 80092c8:	bd80      	pop	{r7, pc}

080092ca <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80092ca:	b580      	push	{r7, lr}
 80092cc:	b088      	sub	sp, #32
 80092ce:	af00      	add	r7, sp, #0
 80092d0:	6078      	str	r0, [r7, #4]
 80092d2:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80092da:	683b      	ldr	r3, [r7, #0]
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d10d      	bne.n	80092fc <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80092e0:	693b      	ldr	r3, [r7, #16]
 80092e2:	691b      	ldr	r3, [r3, #16]
 80092e4:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80092e6:	69bb      	ldr	r3, [r7, #24]
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d004      	beq.n	80092f6 <create_chain+0x2c>
 80092ec:	693b      	ldr	r3, [r7, #16]
 80092ee:	699b      	ldr	r3, [r3, #24]
 80092f0:	69ba      	ldr	r2, [r7, #24]
 80092f2:	429a      	cmp	r2, r3
 80092f4:	d31b      	bcc.n	800932e <create_chain+0x64>
 80092f6:	2301      	movs	r3, #1
 80092f8:	61bb      	str	r3, [r7, #24]
 80092fa:	e018      	b.n	800932e <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80092fc:	6839      	ldr	r1, [r7, #0]
 80092fe:	6878      	ldr	r0, [r7, #4]
 8009300:	f7ff fded 	bl	8008ede <get_fat>
 8009304:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	2b01      	cmp	r3, #1
 800930a:	d801      	bhi.n	8009310 <create_chain+0x46>
 800930c:	2301      	movs	r3, #1
 800930e:	e070      	b.n	80093f2 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009316:	d101      	bne.n	800931c <create_chain+0x52>
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	e06a      	b.n	80093f2 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800931c:	693b      	ldr	r3, [r7, #16]
 800931e:	699b      	ldr	r3, [r3, #24]
 8009320:	68fa      	ldr	r2, [r7, #12]
 8009322:	429a      	cmp	r2, r3
 8009324:	d201      	bcs.n	800932a <create_chain+0x60>
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	e063      	b.n	80093f2 <create_chain+0x128>
		scl = clst;
 800932a:	683b      	ldr	r3, [r7, #0]
 800932c:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800932e:	69bb      	ldr	r3, [r7, #24]
 8009330:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8009332:	69fb      	ldr	r3, [r7, #28]
 8009334:	3301      	adds	r3, #1
 8009336:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8009338:	693b      	ldr	r3, [r7, #16]
 800933a:	699b      	ldr	r3, [r3, #24]
 800933c:	69fa      	ldr	r2, [r7, #28]
 800933e:	429a      	cmp	r2, r3
 8009340:	d307      	bcc.n	8009352 <create_chain+0x88>
				ncl = 2;
 8009342:	2302      	movs	r3, #2
 8009344:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8009346:	69fa      	ldr	r2, [r7, #28]
 8009348:	69bb      	ldr	r3, [r7, #24]
 800934a:	429a      	cmp	r2, r3
 800934c:	d901      	bls.n	8009352 <create_chain+0x88>
 800934e:	2300      	movs	r3, #0
 8009350:	e04f      	b.n	80093f2 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8009352:	69f9      	ldr	r1, [r7, #28]
 8009354:	6878      	ldr	r0, [r7, #4]
 8009356:	f7ff fdc2 	bl	8008ede <get_fat>
 800935a:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	2b00      	cmp	r3, #0
 8009360:	d00e      	beq.n	8009380 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	2b01      	cmp	r3, #1
 8009366:	d003      	beq.n	8009370 <create_chain+0xa6>
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800936e:	d101      	bne.n	8009374 <create_chain+0xaa>
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	e03e      	b.n	80093f2 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8009374:	69fa      	ldr	r2, [r7, #28]
 8009376:	69bb      	ldr	r3, [r7, #24]
 8009378:	429a      	cmp	r2, r3
 800937a:	d1da      	bne.n	8009332 <create_chain+0x68>
 800937c:	2300      	movs	r3, #0
 800937e:	e038      	b.n	80093f2 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8009380:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8009382:	f04f 32ff 	mov.w	r2, #4294967295
 8009386:	69f9      	ldr	r1, [r7, #28]
 8009388:	6938      	ldr	r0, [r7, #16]
 800938a:	f7ff fe4f 	bl	800902c <put_fat>
 800938e:	4603      	mov	r3, r0
 8009390:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8009392:	7dfb      	ldrb	r3, [r7, #23]
 8009394:	2b00      	cmp	r3, #0
 8009396:	d109      	bne.n	80093ac <create_chain+0xe2>
 8009398:	683b      	ldr	r3, [r7, #0]
 800939a:	2b00      	cmp	r3, #0
 800939c:	d006      	beq.n	80093ac <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800939e:	69fa      	ldr	r2, [r7, #28]
 80093a0:	6839      	ldr	r1, [r7, #0]
 80093a2:	6938      	ldr	r0, [r7, #16]
 80093a4:	f7ff fe42 	bl	800902c <put_fat>
 80093a8:	4603      	mov	r3, r0
 80093aa:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80093ac:	7dfb      	ldrb	r3, [r7, #23]
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d116      	bne.n	80093e0 <create_chain+0x116>
		fs->last_clst = ncl;
 80093b2:	693b      	ldr	r3, [r7, #16]
 80093b4:	69fa      	ldr	r2, [r7, #28]
 80093b6:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80093b8:	693b      	ldr	r3, [r7, #16]
 80093ba:	695a      	ldr	r2, [r3, #20]
 80093bc:	693b      	ldr	r3, [r7, #16]
 80093be:	699b      	ldr	r3, [r3, #24]
 80093c0:	3b02      	subs	r3, #2
 80093c2:	429a      	cmp	r2, r3
 80093c4:	d804      	bhi.n	80093d0 <create_chain+0x106>
 80093c6:	693b      	ldr	r3, [r7, #16]
 80093c8:	695b      	ldr	r3, [r3, #20]
 80093ca:	1e5a      	subs	r2, r3, #1
 80093cc:	693b      	ldr	r3, [r7, #16]
 80093ce:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 80093d0:	693b      	ldr	r3, [r7, #16]
 80093d2:	791b      	ldrb	r3, [r3, #4]
 80093d4:	f043 0301 	orr.w	r3, r3, #1
 80093d8:	b2da      	uxtb	r2, r3
 80093da:	693b      	ldr	r3, [r7, #16]
 80093dc:	711a      	strb	r2, [r3, #4]
 80093de:	e007      	b.n	80093f0 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80093e0:	7dfb      	ldrb	r3, [r7, #23]
 80093e2:	2b01      	cmp	r3, #1
 80093e4:	d102      	bne.n	80093ec <create_chain+0x122>
 80093e6:	f04f 33ff 	mov.w	r3, #4294967295
 80093ea:	e000      	b.n	80093ee <create_chain+0x124>
 80093ec:	2301      	movs	r3, #1
 80093ee:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80093f0:	69fb      	ldr	r3, [r7, #28]
}
 80093f2:	4618      	mov	r0, r3
 80093f4:	3720      	adds	r7, #32
 80093f6:	46bd      	mov	sp, r7
 80093f8:	bd80      	pop	{r7, pc}

080093fa <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80093fa:	b480      	push	{r7}
 80093fc:	b087      	sub	sp, #28
 80093fe:	af00      	add	r7, sp, #0
 8009400:	6078      	str	r0, [r7, #4]
 8009402:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800940e:	3304      	adds	r3, #4
 8009410:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8009412:	683b      	ldr	r3, [r7, #0]
 8009414:	0a5b      	lsrs	r3, r3, #9
 8009416:	68fa      	ldr	r2, [r7, #12]
 8009418:	8952      	ldrh	r2, [r2, #10]
 800941a:	fbb3 f3f2 	udiv	r3, r3, r2
 800941e:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009420:	693b      	ldr	r3, [r7, #16]
 8009422:	1d1a      	adds	r2, r3, #4
 8009424:	613a      	str	r2, [r7, #16]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800942a:	68bb      	ldr	r3, [r7, #8]
 800942c:	2b00      	cmp	r3, #0
 800942e:	d101      	bne.n	8009434 <clmt_clust+0x3a>
 8009430:	2300      	movs	r3, #0
 8009432:	e010      	b.n	8009456 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8009434:	697a      	ldr	r2, [r7, #20]
 8009436:	68bb      	ldr	r3, [r7, #8]
 8009438:	429a      	cmp	r2, r3
 800943a:	d307      	bcc.n	800944c <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800943c:	697a      	ldr	r2, [r7, #20]
 800943e:	68bb      	ldr	r3, [r7, #8]
 8009440:	1ad3      	subs	r3, r2, r3
 8009442:	617b      	str	r3, [r7, #20]
 8009444:	693b      	ldr	r3, [r7, #16]
 8009446:	3304      	adds	r3, #4
 8009448:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800944a:	e7e9      	b.n	8009420 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800944c:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800944e:	693b      	ldr	r3, [r7, #16]
 8009450:	681a      	ldr	r2, [r3, #0]
 8009452:	697b      	ldr	r3, [r7, #20]
 8009454:	4413      	add	r3, r2
}
 8009456:	4618      	mov	r0, r3
 8009458:	371c      	adds	r7, #28
 800945a:	46bd      	mov	sp, r7
 800945c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009460:	4770      	bx	lr

08009462 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8009462:	b580      	push	{r7, lr}
 8009464:	b086      	sub	sp, #24
 8009466:	af00      	add	r7, sp, #0
 8009468:	6078      	str	r0, [r7, #4]
 800946a:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8009472:	683b      	ldr	r3, [r7, #0]
 8009474:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009478:	d204      	bcs.n	8009484 <dir_sdi+0x22>
 800947a:	683b      	ldr	r3, [r7, #0]
 800947c:	f003 031f 	and.w	r3, r3, #31
 8009480:	2b00      	cmp	r3, #0
 8009482:	d001      	beq.n	8009488 <dir_sdi+0x26>
		return FR_INT_ERR;
 8009484:	2302      	movs	r3, #2
 8009486:	e063      	b.n	8009550 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	683a      	ldr	r2, [r7, #0]
 800948c:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	689b      	ldr	r3, [r3, #8]
 8009492:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8009494:	697b      	ldr	r3, [r7, #20]
 8009496:	2b00      	cmp	r3, #0
 8009498:	d106      	bne.n	80094a8 <dir_sdi+0x46>
 800949a:	693b      	ldr	r3, [r7, #16]
 800949c:	781b      	ldrb	r3, [r3, #0]
 800949e:	2b02      	cmp	r3, #2
 80094a0:	d902      	bls.n	80094a8 <dir_sdi+0x46>
		clst = fs->dirbase;
 80094a2:	693b      	ldr	r3, [r7, #16]
 80094a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094a6:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80094a8:	697b      	ldr	r3, [r7, #20]
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d10c      	bne.n	80094c8 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80094ae:	683b      	ldr	r3, [r7, #0]
 80094b0:	095b      	lsrs	r3, r3, #5
 80094b2:	693a      	ldr	r2, [r7, #16]
 80094b4:	8912      	ldrh	r2, [r2, #8]
 80094b6:	4293      	cmp	r3, r2
 80094b8:	d301      	bcc.n	80094be <dir_sdi+0x5c>
 80094ba:	2302      	movs	r3, #2
 80094bc:	e048      	b.n	8009550 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 80094be:	693b      	ldr	r3, [r7, #16]
 80094c0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	61da      	str	r2, [r3, #28]
 80094c6:	e029      	b.n	800951c <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80094c8:	693b      	ldr	r3, [r7, #16]
 80094ca:	895b      	ldrh	r3, [r3, #10]
 80094cc:	025b      	lsls	r3, r3, #9
 80094ce:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80094d0:	e019      	b.n	8009506 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	6979      	ldr	r1, [r7, #20]
 80094d6:	4618      	mov	r0, r3
 80094d8:	f7ff fd01 	bl	8008ede <get_fat>
 80094dc:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80094de:	697b      	ldr	r3, [r7, #20]
 80094e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094e4:	d101      	bne.n	80094ea <dir_sdi+0x88>
 80094e6:	2301      	movs	r3, #1
 80094e8:	e032      	b.n	8009550 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80094ea:	697b      	ldr	r3, [r7, #20]
 80094ec:	2b01      	cmp	r3, #1
 80094ee:	d904      	bls.n	80094fa <dir_sdi+0x98>
 80094f0:	693b      	ldr	r3, [r7, #16]
 80094f2:	699b      	ldr	r3, [r3, #24]
 80094f4:	697a      	ldr	r2, [r7, #20]
 80094f6:	429a      	cmp	r2, r3
 80094f8:	d301      	bcc.n	80094fe <dir_sdi+0x9c>
 80094fa:	2302      	movs	r3, #2
 80094fc:	e028      	b.n	8009550 <dir_sdi+0xee>
			ofs -= csz;
 80094fe:	683a      	ldr	r2, [r7, #0]
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	1ad3      	subs	r3, r2, r3
 8009504:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8009506:	683a      	ldr	r2, [r7, #0]
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	429a      	cmp	r2, r3
 800950c:	d2e1      	bcs.n	80094d2 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800950e:	6979      	ldr	r1, [r7, #20]
 8009510:	6938      	ldr	r0, [r7, #16]
 8009512:	f7ff fcc5 	bl	8008ea0 <clust2sect>
 8009516:	4602      	mov	r2, r0
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	697a      	ldr	r2, [r7, #20]
 8009520:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	69db      	ldr	r3, [r3, #28]
 8009526:	2b00      	cmp	r3, #0
 8009528:	d101      	bne.n	800952e <dir_sdi+0xcc>
 800952a:	2302      	movs	r3, #2
 800952c:	e010      	b.n	8009550 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	69da      	ldr	r2, [r3, #28]
 8009532:	683b      	ldr	r3, [r7, #0]
 8009534:	0a5b      	lsrs	r3, r3, #9
 8009536:	441a      	add	r2, r3
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800953c:	693b      	ldr	r3, [r7, #16]
 800953e:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8009542:	683b      	ldr	r3, [r7, #0]
 8009544:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009548:	441a      	add	r2, r3
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800954e:	2300      	movs	r3, #0
}
 8009550:	4618      	mov	r0, r3
 8009552:	3718      	adds	r7, #24
 8009554:	46bd      	mov	sp, r7
 8009556:	bd80      	pop	{r7, pc}

08009558 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8009558:	b580      	push	{r7, lr}
 800955a:	b086      	sub	sp, #24
 800955c:	af00      	add	r7, sp, #0
 800955e:	6078      	str	r0, [r7, #4]
 8009560:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	695b      	ldr	r3, [r3, #20]
 800956c:	3320      	adds	r3, #32
 800956e:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	69db      	ldr	r3, [r3, #28]
 8009574:	2b00      	cmp	r3, #0
 8009576:	d003      	beq.n	8009580 <dir_next+0x28>
 8009578:	68bb      	ldr	r3, [r7, #8]
 800957a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800957e:	d301      	bcc.n	8009584 <dir_next+0x2c>
 8009580:	2304      	movs	r3, #4
 8009582:	e0aa      	b.n	80096da <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8009584:	68bb      	ldr	r3, [r7, #8]
 8009586:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800958a:	2b00      	cmp	r3, #0
 800958c:	f040 8098 	bne.w	80096c0 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	69db      	ldr	r3, [r3, #28]
 8009594:	1c5a      	adds	r2, r3, #1
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	699b      	ldr	r3, [r3, #24]
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d10b      	bne.n	80095ba <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80095a2:	68bb      	ldr	r3, [r7, #8]
 80095a4:	095b      	lsrs	r3, r3, #5
 80095a6:	68fa      	ldr	r2, [r7, #12]
 80095a8:	8912      	ldrh	r2, [r2, #8]
 80095aa:	4293      	cmp	r3, r2
 80095ac:	f0c0 8088 	bcc.w	80096c0 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	2200      	movs	r2, #0
 80095b4:	61da      	str	r2, [r3, #28]
 80095b6:	2304      	movs	r3, #4
 80095b8:	e08f      	b.n	80096da <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80095ba:	68bb      	ldr	r3, [r7, #8]
 80095bc:	0a5b      	lsrs	r3, r3, #9
 80095be:	68fa      	ldr	r2, [r7, #12]
 80095c0:	8952      	ldrh	r2, [r2, #10]
 80095c2:	3a01      	subs	r2, #1
 80095c4:	4013      	ands	r3, r2
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d17a      	bne.n	80096c0 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80095ca:	687a      	ldr	r2, [r7, #4]
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	699b      	ldr	r3, [r3, #24]
 80095d0:	4619      	mov	r1, r3
 80095d2:	4610      	mov	r0, r2
 80095d4:	f7ff fc83 	bl	8008ede <get_fat>
 80095d8:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80095da:	697b      	ldr	r3, [r7, #20]
 80095dc:	2b01      	cmp	r3, #1
 80095de:	d801      	bhi.n	80095e4 <dir_next+0x8c>
 80095e0:	2302      	movs	r3, #2
 80095e2:	e07a      	b.n	80096da <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80095e4:	697b      	ldr	r3, [r7, #20]
 80095e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095ea:	d101      	bne.n	80095f0 <dir_next+0x98>
 80095ec:	2301      	movs	r3, #1
 80095ee:	e074      	b.n	80096da <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	699b      	ldr	r3, [r3, #24]
 80095f4:	697a      	ldr	r2, [r7, #20]
 80095f6:	429a      	cmp	r2, r3
 80095f8:	d358      	bcc.n	80096ac <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80095fa:	683b      	ldr	r3, [r7, #0]
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d104      	bne.n	800960a <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	2200      	movs	r2, #0
 8009604:	61da      	str	r2, [r3, #28]
 8009606:	2304      	movs	r3, #4
 8009608:	e067      	b.n	80096da <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800960a:	687a      	ldr	r2, [r7, #4]
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	699b      	ldr	r3, [r3, #24]
 8009610:	4619      	mov	r1, r3
 8009612:	4610      	mov	r0, r2
 8009614:	f7ff fe59 	bl	80092ca <create_chain>
 8009618:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800961a:	697b      	ldr	r3, [r7, #20]
 800961c:	2b00      	cmp	r3, #0
 800961e:	d101      	bne.n	8009624 <dir_next+0xcc>
 8009620:	2307      	movs	r3, #7
 8009622:	e05a      	b.n	80096da <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8009624:	697b      	ldr	r3, [r7, #20]
 8009626:	2b01      	cmp	r3, #1
 8009628:	d101      	bne.n	800962e <dir_next+0xd6>
 800962a:	2302      	movs	r3, #2
 800962c:	e055      	b.n	80096da <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800962e:	697b      	ldr	r3, [r7, #20]
 8009630:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009634:	d101      	bne.n	800963a <dir_next+0xe2>
 8009636:	2301      	movs	r3, #1
 8009638:	e04f      	b.n	80096da <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800963a:	68f8      	ldr	r0, [r7, #12]
 800963c:	f7ff fb50 	bl	8008ce0 <sync_window>
 8009640:	4603      	mov	r3, r0
 8009642:	2b00      	cmp	r3, #0
 8009644:	d001      	beq.n	800964a <dir_next+0xf2>
 8009646:	2301      	movs	r3, #1
 8009648:	e047      	b.n	80096da <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	3334      	adds	r3, #52	@ 0x34
 800964e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009652:	2100      	movs	r1, #0
 8009654:	4618      	mov	r0, r3
 8009656:	f7ff f949 	bl	80088ec <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800965a:	2300      	movs	r3, #0
 800965c:	613b      	str	r3, [r7, #16]
 800965e:	6979      	ldr	r1, [r7, #20]
 8009660:	68f8      	ldr	r0, [r7, #12]
 8009662:	f7ff fc1d 	bl	8008ea0 <clust2sect>
 8009666:	4602      	mov	r2, r0
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	631a      	str	r2, [r3, #48]	@ 0x30
 800966c:	e012      	b.n	8009694 <dir_next+0x13c>
						fs->wflag = 1;
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	2201      	movs	r2, #1
 8009672:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8009674:	68f8      	ldr	r0, [r7, #12]
 8009676:	f7ff fb33 	bl	8008ce0 <sync_window>
 800967a:	4603      	mov	r3, r0
 800967c:	2b00      	cmp	r3, #0
 800967e:	d001      	beq.n	8009684 <dir_next+0x12c>
 8009680:	2301      	movs	r3, #1
 8009682:	e02a      	b.n	80096da <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009684:	693b      	ldr	r3, [r7, #16]
 8009686:	3301      	adds	r3, #1
 8009688:	613b      	str	r3, [r7, #16]
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800968e:	1c5a      	adds	r2, r3, #1
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	631a      	str	r2, [r3, #48]	@ 0x30
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	895b      	ldrh	r3, [r3, #10]
 8009698:	461a      	mov	r2, r3
 800969a:	693b      	ldr	r3, [r7, #16]
 800969c:	4293      	cmp	r3, r2
 800969e:	d3e6      	bcc.n	800966e <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80096a4:	693b      	ldr	r3, [r7, #16]
 80096a6:	1ad2      	subs	r2, r2, r3
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	631a      	str	r2, [r3, #48]	@ 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	697a      	ldr	r2, [r7, #20]
 80096b0:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80096b2:	6979      	ldr	r1, [r7, #20]
 80096b4:	68f8      	ldr	r0, [r7, #12]
 80096b6:	f7ff fbf3 	bl	8008ea0 <clust2sect>
 80096ba:	4602      	mov	r2, r0
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	68ba      	ldr	r2, [r7, #8]
 80096c4:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80096cc:	68bb      	ldr	r3, [r7, #8]
 80096ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096d2:	441a      	add	r2, r3
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80096d8:	2300      	movs	r3, #0
}
 80096da:	4618      	mov	r0, r3
 80096dc:	3718      	adds	r7, #24
 80096de:	46bd      	mov	sp, r7
 80096e0:	bd80      	pop	{r7, pc}

080096e2 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80096e2:	b580      	push	{r7, lr}
 80096e4:	b086      	sub	sp, #24
 80096e6:	af00      	add	r7, sp, #0
 80096e8:	6078      	str	r0, [r7, #4]
 80096ea:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80096f2:	2100      	movs	r1, #0
 80096f4:	6878      	ldr	r0, [r7, #4]
 80096f6:	f7ff feb4 	bl	8009462 <dir_sdi>
 80096fa:	4603      	mov	r3, r0
 80096fc:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80096fe:	7dfb      	ldrb	r3, [r7, #23]
 8009700:	2b00      	cmp	r3, #0
 8009702:	d12b      	bne.n	800975c <dir_alloc+0x7a>
		n = 0;
 8009704:	2300      	movs	r3, #0
 8009706:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	69db      	ldr	r3, [r3, #28]
 800970c:	4619      	mov	r1, r3
 800970e:	68f8      	ldr	r0, [r7, #12]
 8009710:	f7ff fb2a 	bl	8008d68 <move_window>
 8009714:	4603      	mov	r3, r0
 8009716:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8009718:	7dfb      	ldrb	r3, [r7, #23]
 800971a:	2b00      	cmp	r3, #0
 800971c:	d11d      	bne.n	800975a <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	6a1b      	ldr	r3, [r3, #32]
 8009722:	781b      	ldrb	r3, [r3, #0]
 8009724:	2be5      	cmp	r3, #229	@ 0xe5
 8009726:	d004      	beq.n	8009732 <dir_alloc+0x50>
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	6a1b      	ldr	r3, [r3, #32]
 800972c:	781b      	ldrb	r3, [r3, #0]
 800972e:	2b00      	cmp	r3, #0
 8009730:	d107      	bne.n	8009742 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8009732:	693b      	ldr	r3, [r7, #16]
 8009734:	3301      	adds	r3, #1
 8009736:	613b      	str	r3, [r7, #16]
 8009738:	693a      	ldr	r2, [r7, #16]
 800973a:	683b      	ldr	r3, [r7, #0]
 800973c:	429a      	cmp	r2, r3
 800973e:	d102      	bne.n	8009746 <dir_alloc+0x64>
 8009740:	e00c      	b.n	800975c <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8009742:	2300      	movs	r3, #0
 8009744:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8009746:	2101      	movs	r1, #1
 8009748:	6878      	ldr	r0, [r7, #4]
 800974a:	f7ff ff05 	bl	8009558 <dir_next>
 800974e:	4603      	mov	r3, r0
 8009750:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8009752:	7dfb      	ldrb	r3, [r7, #23]
 8009754:	2b00      	cmp	r3, #0
 8009756:	d0d7      	beq.n	8009708 <dir_alloc+0x26>
 8009758:	e000      	b.n	800975c <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800975a:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800975c:	7dfb      	ldrb	r3, [r7, #23]
 800975e:	2b04      	cmp	r3, #4
 8009760:	d101      	bne.n	8009766 <dir_alloc+0x84>
 8009762:	2307      	movs	r3, #7
 8009764:	75fb      	strb	r3, [r7, #23]
	return res;
 8009766:	7dfb      	ldrb	r3, [r7, #23]
}
 8009768:	4618      	mov	r0, r3
 800976a:	3718      	adds	r7, #24
 800976c:	46bd      	mov	sp, r7
 800976e:	bd80      	pop	{r7, pc}

08009770 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8009770:	b580      	push	{r7, lr}
 8009772:	b084      	sub	sp, #16
 8009774:	af00      	add	r7, sp, #0
 8009776:	6078      	str	r0, [r7, #4]
 8009778:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800977a:	683b      	ldr	r3, [r7, #0]
 800977c:	331a      	adds	r3, #26
 800977e:	4618      	mov	r0, r3
 8009780:	f7ff f810 	bl	80087a4 <ld_word>
 8009784:	4603      	mov	r3, r0
 8009786:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	781b      	ldrb	r3, [r3, #0]
 800978c:	2b03      	cmp	r3, #3
 800978e:	d109      	bne.n	80097a4 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8009790:	683b      	ldr	r3, [r7, #0]
 8009792:	3314      	adds	r3, #20
 8009794:	4618      	mov	r0, r3
 8009796:	f7ff f805 	bl	80087a4 <ld_word>
 800979a:	4603      	mov	r3, r0
 800979c:	041b      	lsls	r3, r3, #16
 800979e:	68fa      	ldr	r2, [r7, #12]
 80097a0:	4313      	orrs	r3, r2
 80097a2:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80097a4:	68fb      	ldr	r3, [r7, #12]
}
 80097a6:	4618      	mov	r0, r3
 80097a8:	3710      	adds	r7, #16
 80097aa:	46bd      	mov	sp, r7
 80097ac:	bd80      	pop	{r7, pc}

080097ae <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80097ae:	b580      	push	{r7, lr}
 80097b0:	b084      	sub	sp, #16
 80097b2:	af00      	add	r7, sp, #0
 80097b4:	60f8      	str	r0, [r7, #12]
 80097b6:	60b9      	str	r1, [r7, #8]
 80097b8:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80097ba:	68bb      	ldr	r3, [r7, #8]
 80097bc:	331a      	adds	r3, #26
 80097be:	687a      	ldr	r2, [r7, #4]
 80097c0:	b292      	uxth	r2, r2
 80097c2:	4611      	mov	r1, r2
 80097c4:	4618      	mov	r0, r3
 80097c6:	f7ff f829 	bl	800881c <st_word>
	if (fs->fs_type == FS_FAT32) {
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	781b      	ldrb	r3, [r3, #0]
 80097ce:	2b03      	cmp	r3, #3
 80097d0:	d109      	bne.n	80097e6 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80097d2:	68bb      	ldr	r3, [r7, #8]
 80097d4:	f103 0214 	add.w	r2, r3, #20
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	0c1b      	lsrs	r3, r3, #16
 80097dc:	b29b      	uxth	r3, r3
 80097de:	4619      	mov	r1, r3
 80097e0:	4610      	mov	r0, r2
 80097e2:	f7ff f81b 	bl	800881c <st_word>
	}
}
 80097e6:	bf00      	nop
 80097e8:	3710      	adds	r7, #16
 80097ea:	46bd      	mov	sp, r7
 80097ec:	bd80      	pop	{r7, pc}

080097ee <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 80097ee:	b580      	push	{r7, lr}
 80097f0:	b086      	sub	sp, #24
 80097f2:	af00      	add	r7, sp, #0
 80097f4:	6078      	str	r0, [r7, #4]
 80097f6:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 80097f8:	2304      	movs	r3, #4
 80097fa:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 8009802:	e03c      	b.n	800987e <dir_read+0x90>
		res = move_window(fs, dp->sect);
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	69db      	ldr	r3, [r3, #28]
 8009808:	4619      	mov	r1, r3
 800980a:	6938      	ldr	r0, [r7, #16]
 800980c:	f7ff faac 	bl	8008d68 <move_window>
 8009810:	4603      	mov	r3, r0
 8009812:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8009814:	7dfb      	ldrb	r3, [r7, #23]
 8009816:	2b00      	cmp	r3, #0
 8009818:	d136      	bne.n	8009888 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	6a1b      	ldr	r3, [r3, #32]
 800981e:	781b      	ldrb	r3, [r3, #0]
 8009820:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 8009822:	7bfb      	ldrb	r3, [r7, #15]
 8009824:	2b00      	cmp	r3, #0
 8009826:	d102      	bne.n	800982e <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8009828:	2304      	movs	r3, #4
 800982a:	75fb      	strb	r3, [r7, #23]
 800982c:	e031      	b.n	8009892 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	6a1b      	ldr	r3, [r3, #32]
 8009832:	330b      	adds	r3, #11
 8009834:	781b      	ldrb	r3, [r3, #0]
 8009836:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800983a:	73bb      	strb	r3, [r7, #14]
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	7bba      	ldrb	r2, [r7, #14]
 8009840:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 8009842:	7bfb      	ldrb	r3, [r7, #15]
 8009844:	2be5      	cmp	r3, #229	@ 0xe5
 8009846:	d011      	beq.n	800986c <dir_read+0x7e>
 8009848:	7bfb      	ldrb	r3, [r7, #15]
 800984a:	2b2e      	cmp	r3, #46	@ 0x2e
 800984c:	d00e      	beq.n	800986c <dir_read+0x7e>
 800984e:	7bbb      	ldrb	r3, [r7, #14]
 8009850:	2b0f      	cmp	r3, #15
 8009852:	d00b      	beq.n	800986c <dir_read+0x7e>
 8009854:	7bbb      	ldrb	r3, [r7, #14]
 8009856:	f023 0320 	bic.w	r3, r3, #32
 800985a:	2b08      	cmp	r3, #8
 800985c:	bf0c      	ite	eq
 800985e:	2301      	moveq	r3, #1
 8009860:	2300      	movne	r3, #0
 8009862:	b2db      	uxtb	r3, r3
 8009864:	461a      	mov	r2, r3
 8009866:	683b      	ldr	r3, [r7, #0]
 8009868:	4293      	cmp	r3, r2
 800986a:	d00f      	beq.n	800988c <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800986c:	2100      	movs	r1, #0
 800986e:	6878      	ldr	r0, [r7, #4]
 8009870:	f7ff fe72 	bl	8009558 <dir_next>
 8009874:	4603      	mov	r3, r0
 8009876:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8009878:	7dfb      	ldrb	r3, [r7, #23]
 800987a:	2b00      	cmp	r3, #0
 800987c:	d108      	bne.n	8009890 <dir_read+0xa2>
	while (dp->sect) {
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	69db      	ldr	r3, [r3, #28]
 8009882:	2b00      	cmp	r3, #0
 8009884:	d1be      	bne.n	8009804 <dir_read+0x16>
 8009886:	e004      	b.n	8009892 <dir_read+0xa4>
		if (res != FR_OK) break;
 8009888:	bf00      	nop
 800988a:	e002      	b.n	8009892 <dir_read+0xa4>
				break;
 800988c:	bf00      	nop
 800988e:	e000      	b.n	8009892 <dir_read+0xa4>
		if (res != FR_OK) break;
 8009890:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8009892:	7dfb      	ldrb	r3, [r7, #23]
 8009894:	2b00      	cmp	r3, #0
 8009896:	d002      	beq.n	800989e <dir_read+0xb0>
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	2200      	movs	r2, #0
 800989c:	61da      	str	r2, [r3, #28]
	return res;
 800989e:	7dfb      	ldrb	r3, [r7, #23]
}
 80098a0:	4618      	mov	r0, r3
 80098a2:	3718      	adds	r7, #24
 80098a4:	46bd      	mov	sp, r7
 80098a6:	bd80      	pop	{r7, pc}

080098a8 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80098a8:	b580      	push	{r7, lr}
 80098aa:	b086      	sub	sp, #24
 80098ac:	af00      	add	r7, sp, #0
 80098ae:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80098b6:	2100      	movs	r1, #0
 80098b8:	6878      	ldr	r0, [r7, #4]
 80098ba:	f7ff fdd2 	bl	8009462 <dir_sdi>
 80098be:	4603      	mov	r3, r0
 80098c0:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80098c2:	7dfb      	ldrb	r3, [r7, #23]
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d001      	beq.n	80098cc <dir_find+0x24>
 80098c8:	7dfb      	ldrb	r3, [r7, #23]
 80098ca:	e03e      	b.n	800994a <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	69db      	ldr	r3, [r3, #28]
 80098d0:	4619      	mov	r1, r3
 80098d2:	6938      	ldr	r0, [r7, #16]
 80098d4:	f7ff fa48 	bl	8008d68 <move_window>
 80098d8:	4603      	mov	r3, r0
 80098da:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80098dc:	7dfb      	ldrb	r3, [r7, #23]
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d12f      	bne.n	8009942 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	6a1b      	ldr	r3, [r3, #32]
 80098e6:	781b      	ldrb	r3, [r3, #0]
 80098e8:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80098ea:	7bfb      	ldrb	r3, [r7, #15]
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d102      	bne.n	80098f6 <dir_find+0x4e>
 80098f0:	2304      	movs	r3, #4
 80098f2:	75fb      	strb	r3, [r7, #23]
 80098f4:	e028      	b.n	8009948 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	6a1b      	ldr	r3, [r3, #32]
 80098fa:	330b      	adds	r3, #11
 80098fc:	781b      	ldrb	r3, [r3, #0]
 80098fe:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009902:	b2da      	uxtb	r2, r3
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	6a1b      	ldr	r3, [r3, #32]
 800990c:	330b      	adds	r3, #11
 800990e:	781b      	ldrb	r3, [r3, #0]
 8009910:	f003 0308 	and.w	r3, r3, #8
 8009914:	2b00      	cmp	r3, #0
 8009916:	d10a      	bne.n	800992e <dir_find+0x86>
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	6a18      	ldr	r0, [r3, #32]
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	3324      	adds	r3, #36	@ 0x24
 8009920:	220b      	movs	r2, #11
 8009922:	4619      	mov	r1, r3
 8009924:	f7fe fffd 	bl	8008922 <mem_cmp>
 8009928:	4603      	mov	r3, r0
 800992a:	2b00      	cmp	r3, #0
 800992c:	d00b      	beq.n	8009946 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800992e:	2100      	movs	r1, #0
 8009930:	6878      	ldr	r0, [r7, #4]
 8009932:	f7ff fe11 	bl	8009558 <dir_next>
 8009936:	4603      	mov	r3, r0
 8009938:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800993a:	7dfb      	ldrb	r3, [r7, #23]
 800993c:	2b00      	cmp	r3, #0
 800993e:	d0c5      	beq.n	80098cc <dir_find+0x24>
 8009940:	e002      	b.n	8009948 <dir_find+0xa0>
		if (res != FR_OK) break;
 8009942:	bf00      	nop
 8009944:	e000      	b.n	8009948 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8009946:	bf00      	nop

	return res;
 8009948:	7dfb      	ldrb	r3, [r7, #23]
}
 800994a:	4618      	mov	r0, r3
 800994c:	3718      	adds	r7, #24
 800994e:	46bd      	mov	sp, r7
 8009950:	bd80      	pop	{r7, pc}

08009952 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8009952:	b580      	push	{r7, lr}
 8009954:	b084      	sub	sp, #16
 8009956:	af00      	add	r7, sp, #0
 8009958:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8009960:	2101      	movs	r1, #1
 8009962:	6878      	ldr	r0, [r7, #4]
 8009964:	f7ff febd 	bl	80096e2 <dir_alloc>
 8009968:	4603      	mov	r3, r0
 800996a:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800996c:	7bfb      	ldrb	r3, [r7, #15]
 800996e:	2b00      	cmp	r3, #0
 8009970:	d11c      	bne.n	80099ac <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	69db      	ldr	r3, [r3, #28]
 8009976:	4619      	mov	r1, r3
 8009978:	68b8      	ldr	r0, [r7, #8]
 800997a:	f7ff f9f5 	bl	8008d68 <move_window>
 800997e:	4603      	mov	r3, r0
 8009980:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8009982:	7bfb      	ldrb	r3, [r7, #15]
 8009984:	2b00      	cmp	r3, #0
 8009986:	d111      	bne.n	80099ac <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	6a1b      	ldr	r3, [r3, #32]
 800998c:	2220      	movs	r2, #32
 800998e:	2100      	movs	r1, #0
 8009990:	4618      	mov	r0, r3
 8009992:	f7fe ffab 	bl	80088ec <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	6a18      	ldr	r0, [r3, #32]
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	3324      	adds	r3, #36	@ 0x24
 800999e:	220b      	movs	r2, #11
 80099a0:	4619      	mov	r1, r3
 80099a2:	f7fe ff82 	bl	80088aa <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 80099a6:	68bb      	ldr	r3, [r7, #8]
 80099a8:	2201      	movs	r2, #1
 80099aa:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80099ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80099ae:	4618      	mov	r0, r3
 80099b0:	3710      	adds	r7, #16
 80099b2:	46bd      	mov	sp, r7
 80099b4:	bd80      	pop	{r7, pc}

080099b6 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 80099b6:	b580      	push	{r7, lr}
 80099b8:	b086      	sub	sp, #24
 80099ba:	af00      	add	r7, sp, #0
 80099bc:	6078      	str	r0, [r7, #4]
 80099be:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 80099c0:	683b      	ldr	r3, [r7, #0]
 80099c2:	2200      	movs	r2, #0
 80099c4:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	69db      	ldr	r3, [r3, #28]
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d04f      	beq.n	8009a6e <get_fileinfo+0xb8>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 80099ce:	2300      	movs	r3, #0
 80099d0:	613b      	str	r3, [r7, #16]
 80099d2:	693b      	ldr	r3, [r7, #16]
 80099d4:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 80099d6:	e022      	b.n	8009a1e <get_fileinfo+0x68>
		c = (TCHAR)dp->dir[i++];
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	6a1a      	ldr	r2, [r3, #32]
 80099dc:	697b      	ldr	r3, [r7, #20]
 80099de:	1c59      	adds	r1, r3, #1
 80099e0:	6179      	str	r1, [r7, #20]
 80099e2:	4413      	add	r3, r2
 80099e4:	781b      	ldrb	r3, [r3, #0]
 80099e6:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 80099e8:	7bfb      	ldrb	r3, [r7, #15]
 80099ea:	2b20      	cmp	r3, #32
 80099ec:	d016      	beq.n	8009a1c <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 80099ee:	7bfb      	ldrb	r3, [r7, #15]
 80099f0:	2b05      	cmp	r3, #5
 80099f2:	d101      	bne.n	80099f8 <get_fileinfo+0x42>
 80099f4:	23e5      	movs	r3, #229	@ 0xe5
 80099f6:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 80099f8:	697b      	ldr	r3, [r7, #20]
 80099fa:	2b09      	cmp	r3, #9
 80099fc:	d106      	bne.n	8009a0c <get_fileinfo+0x56>
 80099fe:	693b      	ldr	r3, [r7, #16]
 8009a00:	1c5a      	adds	r2, r3, #1
 8009a02:	613a      	str	r2, [r7, #16]
 8009a04:	683a      	ldr	r2, [r7, #0]
 8009a06:	4413      	add	r3, r2
 8009a08:	222e      	movs	r2, #46	@ 0x2e
 8009a0a:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 8009a0c:	693b      	ldr	r3, [r7, #16]
 8009a0e:	1c5a      	adds	r2, r3, #1
 8009a10:	613a      	str	r2, [r7, #16]
 8009a12:	683a      	ldr	r2, [r7, #0]
 8009a14:	4413      	add	r3, r2
 8009a16:	7bfa      	ldrb	r2, [r7, #15]
 8009a18:	725a      	strb	r2, [r3, #9]
 8009a1a:	e000      	b.n	8009a1e <get_fileinfo+0x68>
		if (c == ' ') continue;				/* Skip padding spaces */
 8009a1c:	bf00      	nop
	while (i < 11) {		/* Copy name body and extension */
 8009a1e:	697b      	ldr	r3, [r7, #20]
 8009a20:	2b0a      	cmp	r3, #10
 8009a22:	d9d9      	bls.n	80099d8 <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 8009a24:	683a      	ldr	r2, [r7, #0]
 8009a26:	693b      	ldr	r3, [r7, #16]
 8009a28:	4413      	add	r3, r2
 8009a2a:	3309      	adds	r3, #9
 8009a2c:	2200      	movs	r2, #0
 8009a2e:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	6a1b      	ldr	r3, [r3, #32]
 8009a34:	7ada      	ldrb	r2, [r3, #11]
 8009a36:	683b      	ldr	r3, [r7, #0]
 8009a38:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	6a1b      	ldr	r3, [r3, #32]
 8009a3e:	331c      	adds	r3, #28
 8009a40:	4618      	mov	r0, r3
 8009a42:	f7fe fec8 	bl	80087d6 <ld_dword>
 8009a46:	4602      	mov	r2, r0
 8009a48:	683b      	ldr	r3, [r7, #0]
 8009a4a:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	6a1b      	ldr	r3, [r3, #32]
 8009a50:	3316      	adds	r3, #22
 8009a52:	4618      	mov	r0, r3
 8009a54:	f7fe febf 	bl	80087d6 <ld_dword>
 8009a58:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8009a5a:	68bb      	ldr	r3, [r7, #8]
 8009a5c:	b29a      	uxth	r2, r3
 8009a5e:	683b      	ldr	r3, [r7, #0]
 8009a60:	80da      	strh	r2, [r3, #6]
 8009a62:	68bb      	ldr	r3, [r7, #8]
 8009a64:	0c1b      	lsrs	r3, r3, #16
 8009a66:	b29a      	uxth	r2, r3
 8009a68:	683b      	ldr	r3, [r7, #0]
 8009a6a:	809a      	strh	r2, [r3, #4]
 8009a6c:	e000      	b.n	8009a70 <get_fileinfo+0xba>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8009a6e:	bf00      	nop
}
 8009a70:	3718      	adds	r7, #24
 8009a72:	46bd      	mov	sp, r7
 8009a74:	bd80      	pop	{r7, pc}
	...

08009a78 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8009a78:	b580      	push	{r7, lr}
 8009a7a:	b088      	sub	sp, #32
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	6078      	str	r0, [r7, #4]
 8009a80:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8009a82:	683b      	ldr	r3, [r7, #0]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	60fb      	str	r3, [r7, #12]
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	3324      	adds	r3, #36	@ 0x24
 8009a8c:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8009a8e:	220b      	movs	r2, #11
 8009a90:	2120      	movs	r1, #32
 8009a92:	68b8      	ldr	r0, [r7, #8]
 8009a94:	f7fe ff2a 	bl	80088ec <mem_set>
	si = i = 0; ni = 8;
 8009a98:	2300      	movs	r3, #0
 8009a9a:	613b      	str	r3, [r7, #16]
 8009a9c:	693b      	ldr	r3, [r7, #16]
 8009a9e:	61fb      	str	r3, [r7, #28]
 8009aa0:	2308      	movs	r3, #8
 8009aa2:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8009aa4:	69fb      	ldr	r3, [r7, #28]
 8009aa6:	1c5a      	adds	r2, r3, #1
 8009aa8:	61fa      	str	r2, [r7, #28]
 8009aaa:	68fa      	ldr	r2, [r7, #12]
 8009aac:	4413      	add	r3, r2
 8009aae:	781b      	ldrb	r3, [r3, #0]
 8009ab0:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8009ab2:	7efb      	ldrb	r3, [r7, #27]
 8009ab4:	2b20      	cmp	r3, #32
 8009ab6:	d94e      	bls.n	8009b56 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8009ab8:	7efb      	ldrb	r3, [r7, #27]
 8009aba:	2b2f      	cmp	r3, #47	@ 0x2f
 8009abc:	d006      	beq.n	8009acc <create_name+0x54>
 8009abe:	7efb      	ldrb	r3, [r7, #27]
 8009ac0:	2b5c      	cmp	r3, #92	@ 0x5c
 8009ac2:	d110      	bne.n	8009ae6 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8009ac4:	e002      	b.n	8009acc <create_name+0x54>
 8009ac6:	69fb      	ldr	r3, [r7, #28]
 8009ac8:	3301      	adds	r3, #1
 8009aca:	61fb      	str	r3, [r7, #28]
 8009acc:	68fa      	ldr	r2, [r7, #12]
 8009ace:	69fb      	ldr	r3, [r7, #28]
 8009ad0:	4413      	add	r3, r2
 8009ad2:	781b      	ldrb	r3, [r3, #0]
 8009ad4:	2b2f      	cmp	r3, #47	@ 0x2f
 8009ad6:	d0f6      	beq.n	8009ac6 <create_name+0x4e>
 8009ad8:	68fa      	ldr	r2, [r7, #12]
 8009ada:	69fb      	ldr	r3, [r7, #28]
 8009adc:	4413      	add	r3, r2
 8009ade:	781b      	ldrb	r3, [r3, #0]
 8009ae0:	2b5c      	cmp	r3, #92	@ 0x5c
 8009ae2:	d0f0      	beq.n	8009ac6 <create_name+0x4e>
			break;
 8009ae4:	e038      	b.n	8009b58 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8009ae6:	7efb      	ldrb	r3, [r7, #27]
 8009ae8:	2b2e      	cmp	r3, #46	@ 0x2e
 8009aea:	d003      	beq.n	8009af4 <create_name+0x7c>
 8009aec:	693a      	ldr	r2, [r7, #16]
 8009aee:	697b      	ldr	r3, [r7, #20]
 8009af0:	429a      	cmp	r2, r3
 8009af2:	d30c      	bcc.n	8009b0e <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8009af4:	697b      	ldr	r3, [r7, #20]
 8009af6:	2b0b      	cmp	r3, #11
 8009af8:	d002      	beq.n	8009b00 <create_name+0x88>
 8009afa:	7efb      	ldrb	r3, [r7, #27]
 8009afc:	2b2e      	cmp	r3, #46	@ 0x2e
 8009afe:	d001      	beq.n	8009b04 <create_name+0x8c>
 8009b00:	2306      	movs	r3, #6
 8009b02:	e044      	b.n	8009b8e <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8009b04:	2308      	movs	r3, #8
 8009b06:	613b      	str	r3, [r7, #16]
 8009b08:	230b      	movs	r3, #11
 8009b0a:	617b      	str	r3, [r7, #20]
			continue;
 8009b0c:	e022      	b.n	8009b54 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8009b0e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	da04      	bge.n	8009b20 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8009b16:	7efb      	ldrb	r3, [r7, #27]
 8009b18:	3b80      	subs	r3, #128	@ 0x80
 8009b1a:	4a1f      	ldr	r2, [pc, #124]	@ (8009b98 <create_name+0x120>)
 8009b1c:	5cd3      	ldrb	r3, [r2, r3]
 8009b1e:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8009b20:	7efb      	ldrb	r3, [r7, #27]
 8009b22:	4619      	mov	r1, r3
 8009b24:	481d      	ldr	r0, [pc, #116]	@ (8009b9c <create_name+0x124>)
 8009b26:	f7fe ff23 	bl	8008970 <chk_chr>
 8009b2a:	4603      	mov	r3, r0
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d001      	beq.n	8009b34 <create_name+0xbc>
 8009b30:	2306      	movs	r3, #6
 8009b32:	e02c      	b.n	8009b8e <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8009b34:	7efb      	ldrb	r3, [r7, #27]
 8009b36:	2b60      	cmp	r3, #96	@ 0x60
 8009b38:	d905      	bls.n	8009b46 <create_name+0xce>
 8009b3a:	7efb      	ldrb	r3, [r7, #27]
 8009b3c:	2b7a      	cmp	r3, #122	@ 0x7a
 8009b3e:	d802      	bhi.n	8009b46 <create_name+0xce>
 8009b40:	7efb      	ldrb	r3, [r7, #27]
 8009b42:	3b20      	subs	r3, #32
 8009b44:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8009b46:	693b      	ldr	r3, [r7, #16]
 8009b48:	1c5a      	adds	r2, r3, #1
 8009b4a:	613a      	str	r2, [r7, #16]
 8009b4c:	68ba      	ldr	r2, [r7, #8]
 8009b4e:	4413      	add	r3, r2
 8009b50:	7efa      	ldrb	r2, [r7, #27]
 8009b52:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8009b54:	e7a6      	b.n	8009aa4 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8009b56:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8009b58:	68fa      	ldr	r2, [r7, #12]
 8009b5a:	69fb      	ldr	r3, [r7, #28]
 8009b5c:	441a      	add	r2, r3
 8009b5e:	683b      	ldr	r3, [r7, #0]
 8009b60:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8009b62:	693b      	ldr	r3, [r7, #16]
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d101      	bne.n	8009b6c <create_name+0xf4>
 8009b68:	2306      	movs	r3, #6
 8009b6a:	e010      	b.n	8009b8e <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8009b6c:	68bb      	ldr	r3, [r7, #8]
 8009b6e:	781b      	ldrb	r3, [r3, #0]
 8009b70:	2be5      	cmp	r3, #229	@ 0xe5
 8009b72:	d102      	bne.n	8009b7a <create_name+0x102>
 8009b74:	68bb      	ldr	r3, [r7, #8]
 8009b76:	2205      	movs	r2, #5
 8009b78:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8009b7a:	7efb      	ldrb	r3, [r7, #27]
 8009b7c:	2b20      	cmp	r3, #32
 8009b7e:	d801      	bhi.n	8009b84 <create_name+0x10c>
 8009b80:	2204      	movs	r2, #4
 8009b82:	e000      	b.n	8009b86 <create_name+0x10e>
 8009b84:	2200      	movs	r2, #0
 8009b86:	68bb      	ldr	r3, [r7, #8]
 8009b88:	330b      	adds	r3, #11
 8009b8a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8009b8c:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8009b8e:	4618      	mov	r0, r3
 8009b90:	3720      	adds	r7, #32
 8009b92:	46bd      	mov	sp, r7
 8009b94:	bd80      	pop	{r7, pc}
 8009b96:	bf00      	nop
 8009b98:	08011f24 	.word	0x08011f24
 8009b9c:	08011dcc 	.word	0x08011dcc

08009ba0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8009ba0:	b580      	push	{r7, lr}
 8009ba2:	b086      	sub	sp, #24
 8009ba4:	af00      	add	r7, sp, #0
 8009ba6:	6078      	str	r0, [r7, #4]
 8009ba8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8009bae:	693b      	ldr	r3, [r7, #16]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8009bb4:	e002      	b.n	8009bbc <follow_path+0x1c>
 8009bb6:	683b      	ldr	r3, [r7, #0]
 8009bb8:	3301      	adds	r3, #1
 8009bba:	603b      	str	r3, [r7, #0]
 8009bbc:	683b      	ldr	r3, [r7, #0]
 8009bbe:	781b      	ldrb	r3, [r3, #0]
 8009bc0:	2b2f      	cmp	r3, #47	@ 0x2f
 8009bc2:	d0f8      	beq.n	8009bb6 <follow_path+0x16>
 8009bc4:	683b      	ldr	r3, [r7, #0]
 8009bc6:	781b      	ldrb	r3, [r3, #0]
 8009bc8:	2b5c      	cmp	r3, #92	@ 0x5c
 8009bca:	d0f4      	beq.n	8009bb6 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8009bcc:	693b      	ldr	r3, [r7, #16]
 8009bce:	2200      	movs	r2, #0
 8009bd0:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8009bd2:	683b      	ldr	r3, [r7, #0]
 8009bd4:	781b      	ldrb	r3, [r3, #0]
 8009bd6:	2b1f      	cmp	r3, #31
 8009bd8:	d80a      	bhi.n	8009bf0 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	2280      	movs	r2, #128	@ 0x80
 8009bde:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 8009be2:	2100      	movs	r1, #0
 8009be4:	6878      	ldr	r0, [r7, #4]
 8009be6:	f7ff fc3c 	bl	8009462 <dir_sdi>
 8009bea:	4603      	mov	r3, r0
 8009bec:	75fb      	strb	r3, [r7, #23]
 8009bee:	e043      	b.n	8009c78 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009bf0:	463b      	mov	r3, r7
 8009bf2:	4619      	mov	r1, r3
 8009bf4:	6878      	ldr	r0, [r7, #4]
 8009bf6:	f7ff ff3f 	bl	8009a78 <create_name>
 8009bfa:	4603      	mov	r3, r0
 8009bfc:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8009bfe:	7dfb      	ldrb	r3, [r7, #23]
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d134      	bne.n	8009c6e <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8009c04:	6878      	ldr	r0, [r7, #4]
 8009c06:	f7ff fe4f 	bl	80098a8 <dir_find>
 8009c0a:	4603      	mov	r3, r0
 8009c0c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8009c14:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8009c16:	7dfb      	ldrb	r3, [r7, #23]
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d00a      	beq.n	8009c32 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8009c1c:	7dfb      	ldrb	r3, [r7, #23]
 8009c1e:	2b04      	cmp	r3, #4
 8009c20:	d127      	bne.n	8009c72 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8009c22:	7afb      	ldrb	r3, [r7, #11]
 8009c24:	f003 0304 	and.w	r3, r3, #4
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d122      	bne.n	8009c72 <follow_path+0xd2>
 8009c2c:	2305      	movs	r3, #5
 8009c2e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8009c30:	e01f      	b.n	8009c72 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009c32:	7afb      	ldrb	r3, [r7, #11]
 8009c34:	f003 0304 	and.w	r3, r3, #4
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d11c      	bne.n	8009c76 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8009c3c:	693b      	ldr	r3, [r7, #16]
 8009c3e:	799b      	ldrb	r3, [r3, #6]
 8009c40:	f003 0310 	and.w	r3, r3, #16
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d102      	bne.n	8009c4e <follow_path+0xae>
				res = FR_NO_PATH; break;
 8009c48:	2305      	movs	r3, #5
 8009c4a:	75fb      	strb	r3, [r7, #23]
 8009c4c:	e014      	b.n	8009c78 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	695b      	ldr	r3, [r3, #20]
 8009c58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c5c:	4413      	add	r3, r2
 8009c5e:	4619      	mov	r1, r3
 8009c60:	68f8      	ldr	r0, [r7, #12]
 8009c62:	f7ff fd85 	bl	8009770 <ld_clust>
 8009c66:	4602      	mov	r2, r0
 8009c68:	693b      	ldr	r3, [r7, #16]
 8009c6a:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009c6c:	e7c0      	b.n	8009bf0 <follow_path+0x50>
			if (res != FR_OK) break;
 8009c6e:	bf00      	nop
 8009c70:	e002      	b.n	8009c78 <follow_path+0xd8>
				break;
 8009c72:	bf00      	nop
 8009c74:	e000      	b.n	8009c78 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009c76:	bf00      	nop
			}
		}
	}

	return res;
 8009c78:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c7a:	4618      	mov	r0, r3
 8009c7c:	3718      	adds	r7, #24
 8009c7e:	46bd      	mov	sp, r7
 8009c80:	bd80      	pop	{r7, pc}

08009c82 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8009c82:	b480      	push	{r7}
 8009c84:	b087      	sub	sp, #28
 8009c86:	af00      	add	r7, sp, #0
 8009c88:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8009c8a:	f04f 33ff 	mov.w	r3, #4294967295
 8009c8e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d031      	beq.n	8009cfc <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	617b      	str	r3, [r7, #20]
 8009c9e:	e002      	b.n	8009ca6 <get_ldnumber+0x24>
 8009ca0:	697b      	ldr	r3, [r7, #20]
 8009ca2:	3301      	adds	r3, #1
 8009ca4:	617b      	str	r3, [r7, #20]
 8009ca6:	697b      	ldr	r3, [r7, #20]
 8009ca8:	781b      	ldrb	r3, [r3, #0]
 8009caa:	2b20      	cmp	r3, #32
 8009cac:	d903      	bls.n	8009cb6 <get_ldnumber+0x34>
 8009cae:	697b      	ldr	r3, [r7, #20]
 8009cb0:	781b      	ldrb	r3, [r3, #0]
 8009cb2:	2b3a      	cmp	r3, #58	@ 0x3a
 8009cb4:	d1f4      	bne.n	8009ca0 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8009cb6:	697b      	ldr	r3, [r7, #20]
 8009cb8:	781b      	ldrb	r3, [r3, #0]
 8009cba:	2b3a      	cmp	r3, #58	@ 0x3a
 8009cbc:	d11c      	bne.n	8009cf8 <get_ldnumber+0x76>
			tp = *path;
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	1c5a      	adds	r2, r3, #1
 8009cc8:	60fa      	str	r2, [r7, #12]
 8009cca:	781b      	ldrb	r3, [r3, #0]
 8009ccc:	3b30      	subs	r3, #48	@ 0x30
 8009cce:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8009cd0:	68bb      	ldr	r3, [r7, #8]
 8009cd2:	2b09      	cmp	r3, #9
 8009cd4:	d80e      	bhi.n	8009cf4 <get_ldnumber+0x72>
 8009cd6:	68fa      	ldr	r2, [r7, #12]
 8009cd8:	697b      	ldr	r3, [r7, #20]
 8009cda:	429a      	cmp	r2, r3
 8009cdc:	d10a      	bne.n	8009cf4 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8009cde:	68bb      	ldr	r3, [r7, #8]
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d107      	bne.n	8009cf4 <get_ldnumber+0x72>
					vol = (int)i;
 8009ce4:	68bb      	ldr	r3, [r7, #8]
 8009ce6:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8009ce8:	697b      	ldr	r3, [r7, #20]
 8009cea:	3301      	adds	r3, #1
 8009cec:	617b      	str	r3, [r7, #20]
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	697a      	ldr	r2, [r7, #20]
 8009cf2:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8009cf4:	693b      	ldr	r3, [r7, #16]
 8009cf6:	e002      	b.n	8009cfe <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8009cf8:	2300      	movs	r3, #0
 8009cfa:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8009cfc:	693b      	ldr	r3, [r7, #16]
}
 8009cfe:	4618      	mov	r0, r3
 8009d00:	371c      	adds	r7, #28
 8009d02:	46bd      	mov	sp, r7
 8009d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d08:	4770      	bx	lr
	...

08009d0c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8009d0c:	b580      	push	{r7, lr}
 8009d0e:	b082      	sub	sp, #8
 8009d10:	af00      	add	r7, sp, #0
 8009d12:	6078      	str	r0, [r7, #4]
 8009d14:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	2200      	movs	r2, #0
 8009d1a:	70da      	strb	r2, [r3, #3]
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	f04f 32ff 	mov.w	r2, #4294967295
 8009d22:	631a      	str	r2, [r3, #48]	@ 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8009d24:	6839      	ldr	r1, [r7, #0]
 8009d26:	6878      	ldr	r0, [r7, #4]
 8009d28:	f7ff f81e 	bl	8008d68 <move_window>
 8009d2c:	4603      	mov	r3, r0
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d001      	beq.n	8009d36 <check_fs+0x2a>
 8009d32:	2304      	movs	r3, #4
 8009d34:	e038      	b.n	8009da8 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	3334      	adds	r3, #52	@ 0x34
 8009d3a:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8009d3e:	4618      	mov	r0, r3
 8009d40:	f7fe fd30 	bl	80087a4 <ld_word>
 8009d44:	4603      	mov	r3, r0
 8009d46:	461a      	mov	r2, r3
 8009d48:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8009d4c:	429a      	cmp	r2, r3
 8009d4e:	d001      	beq.n	8009d54 <check_fs+0x48>
 8009d50:	2303      	movs	r3, #3
 8009d52:	e029      	b.n	8009da8 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8009d5a:	2be9      	cmp	r3, #233	@ 0xe9
 8009d5c:	d009      	beq.n	8009d72 <check_fs+0x66>
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8009d64:	2beb      	cmp	r3, #235	@ 0xeb
 8009d66:	d11e      	bne.n	8009da6 <check_fs+0x9a>
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8009d6e:	2b90      	cmp	r3, #144	@ 0x90
 8009d70:	d119      	bne.n	8009da6 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	3334      	adds	r3, #52	@ 0x34
 8009d76:	3336      	adds	r3, #54	@ 0x36
 8009d78:	4618      	mov	r0, r3
 8009d7a:	f7fe fd2c 	bl	80087d6 <ld_dword>
 8009d7e:	4603      	mov	r3, r0
 8009d80:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8009d84:	4a0a      	ldr	r2, [pc, #40]	@ (8009db0 <check_fs+0xa4>)
 8009d86:	4293      	cmp	r3, r2
 8009d88:	d101      	bne.n	8009d8e <check_fs+0x82>
 8009d8a:	2300      	movs	r3, #0
 8009d8c:	e00c      	b.n	8009da8 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	3334      	adds	r3, #52	@ 0x34
 8009d92:	3352      	adds	r3, #82	@ 0x52
 8009d94:	4618      	mov	r0, r3
 8009d96:	f7fe fd1e 	bl	80087d6 <ld_dword>
 8009d9a:	4603      	mov	r3, r0
 8009d9c:	4a05      	ldr	r2, [pc, #20]	@ (8009db4 <check_fs+0xa8>)
 8009d9e:	4293      	cmp	r3, r2
 8009da0:	d101      	bne.n	8009da6 <check_fs+0x9a>
 8009da2:	2300      	movs	r3, #0
 8009da4:	e000      	b.n	8009da8 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8009da6:	2302      	movs	r3, #2
}
 8009da8:	4618      	mov	r0, r3
 8009daa:	3708      	adds	r7, #8
 8009dac:	46bd      	mov	sp, r7
 8009dae:	bd80      	pop	{r7, pc}
 8009db0:	00544146 	.word	0x00544146
 8009db4:	33544146 	.word	0x33544146

08009db8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8009db8:	b580      	push	{r7, lr}
 8009dba:	b096      	sub	sp, #88	@ 0x58
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	60f8      	str	r0, [r7, #12]
 8009dc0:	60b9      	str	r1, [r7, #8]
 8009dc2:	4613      	mov	r3, r2
 8009dc4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8009dc6:	68bb      	ldr	r3, [r7, #8]
 8009dc8:	2200      	movs	r2, #0
 8009dca:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8009dcc:	68f8      	ldr	r0, [r7, #12]
 8009dce:	f7ff ff58 	bl	8009c82 <get_ldnumber>
 8009dd2:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8009dd4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	da01      	bge.n	8009dde <find_volume+0x26>
 8009dda:	230b      	movs	r3, #11
 8009ddc:	e235      	b.n	800a24a <find_volume+0x492>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8009dde:	4aa5      	ldr	r2, [pc, #660]	@ (800a074 <find_volume+0x2bc>)
 8009de0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009de2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009de6:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8009de8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d101      	bne.n	8009df2 <find_volume+0x3a>
 8009dee:	230c      	movs	r3, #12
 8009df0:	e22b      	b.n	800a24a <find_volume+0x492>

	ENTER_FF(fs);						/* Lock the volume */
 8009df2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009df4:	f7fe fdd7 	bl	80089a6 <lock_fs>
 8009df8:	4603      	mov	r3, r0
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d101      	bne.n	8009e02 <find_volume+0x4a>
 8009dfe:	230f      	movs	r3, #15
 8009e00:	e223      	b.n	800a24a <find_volume+0x492>
	*rfs = fs;							/* Return pointer to the file system object */
 8009e02:	68bb      	ldr	r3, [r7, #8]
 8009e04:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009e06:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8009e08:	79fb      	ldrb	r3, [r7, #7]
 8009e0a:	f023 0301 	bic.w	r3, r3, #1
 8009e0e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8009e10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e12:	781b      	ldrb	r3, [r3, #0]
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d01a      	beq.n	8009e4e <find_volume+0x96>
		stat = disk_status(fs->drv);
 8009e18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e1a:	785b      	ldrb	r3, [r3, #1]
 8009e1c:	4618      	mov	r0, r3
 8009e1e:	f7fe fc23 	bl	8008668 <disk_status>
 8009e22:	4603      	mov	r3, r0
 8009e24:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8009e28:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009e2c:	f003 0301 	and.w	r3, r3, #1
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d10c      	bne.n	8009e4e <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8009e34:	79fb      	ldrb	r3, [r7, #7]
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d007      	beq.n	8009e4a <find_volume+0x92>
 8009e3a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009e3e:	f003 0304 	and.w	r3, r3, #4
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d001      	beq.n	8009e4a <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 8009e46:	230a      	movs	r3, #10
 8009e48:	e1ff      	b.n	800a24a <find_volume+0x492>
			}
			return FR_OK;				/* The file system object is valid */
 8009e4a:	2300      	movs	r3, #0
 8009e4c:	e1fd      	b.n	800a24a <find_volume+0x492>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8009e4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e50:	2200      	movs	r2, #0
 8009e52:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8009e54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009e56:	b2da      	uxtb	r2, r3
 8009e58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e5a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8009e5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e5e:	785b      	ldrb	r3, [r3, #1]
 8009e60:	4618      	mov	r0, r3
 8009e62:	f7fe fc1b 	bl	800869c <disk_initialize>
 8009e66:	4603      	mov	r3, r0
 8009e68:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8009e6c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009e70:	f003 0301 	and.w	r3, r3, #1
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d001      	beq.n	8009e7c <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8009e78:	2303      	movs	r3, #3
 8009e7a:	e1e6      	b.n	800a24a <find_volume+0x492>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8009e7c:	79fb      	ldrb	r3, [r7, #7]
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d007      	beq.n	8009e92 <find_volume+0xda>
 8009e82:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009e86:	f003 0304 	and.w	r3, r3, #4
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d001      	beq.n	8009e92 <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 8009e8e:	230a      	movs	r3, #10
 8009e90:	e1db      	b.n	800a24a <find_volume+0x492>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8009e92:	2300      	movs	r3, #0
 8009e94:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8009e96:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009e98:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009e9a:	f7ff ff37 	bl	8009d0c <check_fs>
 8009e9e:	4603      	mov	r3, r0
 8009ea0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8009ea4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009ea8:	2b02      	cmp	r3, #2
 8009eaa:	d149      	bne.n	8009f40 <find_volume+0x188>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8009eac:	2300      	movs	r3, #0
 8009eae:	643b      	str	r3, [r7, #64]	@ 0x40
 8009eb0:	e01e      	b.n	8009ef0 <find_volume+0x138>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8009eb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009eb4:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8009eb8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009eba:	011b      	lsls	r3, r3, #4
 8009ebc:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8009ec0:	4413      	add	r3, r2
 8009ec2:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8009ec4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ec6:	3304      	adds	r3, #4
 8009ec8:	781b      	ldrb	r3, [r3, #0]
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d006      	beq.n	8009edc <find_volume+0x124>
 8009ece:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ed0:	3308      	adds	r3, #8
 8009ed2:	4618      	mov	r0, r3
 8009ed4:	f7fe fc7f 	bl	80087d6 <ld_dword>
 8009ed8:	4602      	mov	r2, r0
 8009eda:	e000      	b.n	8009ede <find_volume+0x126>
 8009edc:	2200      	movs	r2, #0
 8009ede:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009ee0:	009b      	lsls	r3, r3, #2
 8009ee2:	3358      	adds	r3, #88	@ 0x58
 8009ee4:	443b      	add	r3, r7
 8009ee6:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8009eea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009eec:	3301      	adds	r3, #1
 8009eee:	643b      	str	r3, [r7, #64]	@ 0x40
 8009ef0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009ef2:	2b03      	cmp	r3, #3
 8009ef4:	d9dd      	bls.n	8009eb2 <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8009ef6:	2300      	movs	r3, #0
 8009ef8:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8009efa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d002      	beq.n	8009f06 <find_volume+0x14e>
 8009f00:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009f02:	3b01      	subs	r3, #1
 8009f04:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8009f06:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009f08:	009b      	lsls	r3, r3, #2
 8009f0a:	3358      	adds	r3, #88	@ 0x58
 8009f0c:	443b      	add	r3, r7
 8009f0e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8009f12:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8009f14:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d005      	beq.n	8009f26 <find_volume+0x16e>
 8009f1a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009f1c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009f1e:	f7ff fef5 	bl	8009d0c <check_fs>
 8009f22:	4603      	mov	r3, r0
 8009f24:	e000      	b.n	8009f28 <find_volume+0x170>
 8009f26:	2303      	movs	r3, #3
 8009f28:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8009f2c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009f30:	2b01      	cmp	r3, #1
 8009f32:	d905      	bls.n	8009f40 <find_volume+0x188>
 8009f34:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009f36:	3301      	adds	r3, #1
 8009f38:	643b      	str	r3, [r7, #64]	@ 0x40
 8009f3a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009f3c:	2b03      	cmp	r3, #3
 8009f3e:	d9e2      	bls.n	8009f06 <find_volume+0x14e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8009f40:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009f44:	2b04      	cmp	r3, #4
 8009f46:	d101      	bne.n	8009f4c <find_volume+0x194>
 8009f48:	2301      	movs	r3, #1
 8009f4a:	e17e      	b.n	800a24a <find_volume+0x492>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8009f4c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009f50:	2b01      	cmp	r3, #1
 8009f52:	d901      	bls.n	8009f58 <find_volume+0x1a0>
 8009f54:	230d      	movs	r3, #13
 8009f56:	e178      	b.n	800a24a <find_volume+0x492>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8009f58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f5a:	3334      	adds	r3, #52	@ 0x34
 8009f5c:	330b      	adds	r3, #11
 8009f5e:	4618      	mov	r0, r3
 8009f60:	f7fe fc20 	bl	80087a4 <ld_word>
 8009f64:	4603      	mov	r3, r0
 8009f66:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009f6a:	d001      	beq.n	8009f70 <find_volume+0x1b8>
 8009f6c:	230d      	movs	r3, #13
 8009f6e:	e16c      	b.n	800a24a <find_volume+0x492>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8009f70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f72:	3334      	adds	r3, #52	@ 0x34
 8009f74:	3316      	adds	r3, #22
 8009f76:	4618      	mov	r0, r3
 8009f78:	f7fe fc14 	bl	80087a4 <ld_word>
 8009f7c:	4603      	mov	r3, r0
 8009f7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8009f80:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d106      	bne.n	8009f94 <find_volume+0x1dc>
 8009f86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f88:	3334      	adds	r3, #52	@ 0x34
 8009f8a:	3324      	adds	r3, #36	@ 0x24
 8009f8c:	4618      	mov	r0, r3
 8009f8e:	f7fe fc22 	bl	80087d6 <ld_dword>
 8009f92:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8009f94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f96:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009f98:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8009f9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f9c:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8009fa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fa2:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8009fa4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fa6:	789b      	ldrb	r3, [r3, #2]
 8009fa8:	2b01      	cmp	r3, #1
 8009faa:	d005      	beq.n	8009fb8 <find_volume+0x200>
 8009fac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fae:	789b      	ldrb	r3, [r3, #2]
 8009fb0:	2b02      	cmp	r3, #2
 8009fb2:	d001      	beq.n	8009fb8 <find_volume+0x200>
 8009fb4:	230d      	movs	r3, #13
 8009fb6:	e148      	b.n	800a24a <find_volume+0x492>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8009fb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fba:	789b      	ldrb	r3, [r3, #2]
 8009fbc:	461a      	mov	r2, r3
 8009fbe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009fc0:	fb02 f303 	mul.w	r3, r2, r3
 8009fc4:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8009fc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fc8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009fcc:	461a      	mov	r2, r3
 8009fce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fd0:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8009fd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fd4:	895b      	ldrh	r3, [r3, #10]
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d008      	beq.n	8009fec <find_volume+0x234>
 8009fda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fdc:	895b      	ldrh	r3, [r3, #10]
 8009fde:	461a      	mov	r2, r3
 8009fe0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fe2:	895b      	ldrh	r3, [r3, #10]
 8009fe4:	3b01      	subs	r3, #1
 8009fe6:	4013      	ands	r3, r2
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d001      	beq.n	8009ff0 <find_volume+0x238>
 8009fec:	230d      	movs	r3, #13
 8009fee:	e12c      	b.n	800a24a <find_volume+0x492>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8009ff0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ff2:	3334      	adds	r3, #52	@ 0x34
 8009ff4:	3311      	adds	r3, #17
 8009ff6:	4618      	mov	r0, r3
 8009ff8:	f7fe fbd4 	bl	80087a4 <ld_word>
 8009ffc:	4603      	mov	r3, r0
 8009ffe:	461a      	mov	r2, r3
 800a000:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a002:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800a004:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a006:	891b      	ldrh	r3, [r3, #8]
 800a008:	f003 030f 	and.w	r3, r3, #15
 800a00c:	b29b      	uxth	r3, r3
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d001      	beq.n	800a016 <find_volume+0x25e>
 800a012:	230d      	movs	r3, #13
 800a014:	e119      	b.n	800a24a <find_volume+0x492>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800a016:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a018:	3334      	adds	r3, #52	@ 0x34
 800a01a:	3313      	adds	r3, #19
 800a01c:	4618      	mov	r0, r3
 800a01e:	f7fe fbc1 	bl	80087a4 <ld_word>
 800a022:	4603      	mov	r3, r0
 800a024:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800a026:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d106      	bne.n	800a03a <find_volume+0x282>
 800a02c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a02e:	3334      	adds	r3, #52	@ 0x34
 800a030:	3320      	adds	r3, #32
 800a032:	4618      	mov	r0, r3
 800a034:	f7fe fbcf 	bl	80087d6 <ld_dword>
 800a038:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800a03a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a03c:	3334      	adds	r3, #52	@ 0x34
 800a03e:	330e      	adds	r3, #14
 800a040:	4618      	mov	r0, r3
 800a042:	f7fe fbaf 	bl	80087a4 <ld_word>
 800a046:	4603      	mov	r3, r0
 800a048:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800a04a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d101      	bne.n	800a054 <find_volume+0x29c>
 800a050:	230d      	movs	r3, #13
 800a052:	e0fa      	b.n	800a24a <find_volume+0x492>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800a054:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800a056:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a058:	4413      	add	r3, r2
 800a05a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a05c:	8912      	ldrh	r2, [r2, #8]
 800a05e:	0912      	lsrs	r2, r2, #4
 800a060:	b292      	uxth	r2, r2
 800a062:	4413      	add	r3, r2
 800a064:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800a066:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a068:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a06a:	429a      	cmp	r2, r3
 800a06c:	d204      	bcs.n	800a078 <find_volume+0x2c0>
 800a06e:	230d      	movs	r3, #13
 800a070:	e0eb      	b.n	800a24a <find_volume+0x492>
 800a072:	bf00      	nop
 800a074:	20000810 	.word	0x20000810
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800a078:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a07a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a07c:	1ad3      	subs	r3, r2, r3
 800a07e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a080:	8952      	ldrh	r2, [r2, #10]
 800a082:	fbb3 f3f2 	udiv	r3, r3, r2
 800a086:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800a088:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d101      	bne.n	800a092 <find_volume+0x2da>
 800a08e:	230d      	movs	r3, #13
 800a090:	e0db      	b.n	800a24a <find_volume+0x492>
		fmt = FS_FAT32;
 800a092:	2303      	movs	r3, #3
 800a094:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800a098:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a09a:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800a09e:	4293      	cmp	r3, r2
 800a0a0:	d802      	bhi.n	800a0a8 <find_volume+0x2f0>
 800a0a2:	2302      	movs	r3, #2
 800a0a4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800a0a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0aa:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800a0ae:	4293      	cmp	r3, r2
 800a0b0:	d802      	bhi.n	800a0b8 <find_volume+0x300>
 800a0b2:	2301      	movs	r3, #1
 800a0b4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800a0b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0ba:	1c9a      	adds	r2, r3, #2
 800a0bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0be:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800a0c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0c2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a0c4:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800a0c6:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800a0c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a0ca:	441a      	add	r2, r3
 800a0cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0ce:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800a0d0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a0d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0d4:	441a      	add	r2, r3
 800a0d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0d8:	62da      	str	r2, [r3, #44]	@ 0x2c
		if (fmt == FS_FAT32) {
 800a0da:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800a0de:	2b03      	cmp	r3, #3
 800a0e0:	d11e      	bne.n	800a120 <find_volume+0x368>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800a0e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0e4:	3334      	adds	r3, #52	@ 0x34
 800a0e6:	332a      	adds	r3, #42	@ 0x2a
 800a0e8:	4618      	mov	r0, r3
 800a0ea:	f7fe fb5b 	bl	80087a4 <ld_word>
 800a0ee:	4603      	mov	r3, r0
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d001      	beq.n	800a0f8 <find_volume+0x340>
 800a0f4:	230d      	movs	r3, #13
 800a0f6:	e0a8      	b.n	800a24a <find_volume+0x492>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800a0f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0fa:	891b      	ldrh	r3, [r3, #8]
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d001      	beq.n	800a104 <find_volume+0x34c>
 800a100:	230d      	movs	r3, #13
 800a102:	e0a2      	b.n	800a24a <find_volume+0x492>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800a104:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a106:	3334      	adds	r3, #52	@ 0x34
 800a108:	332c      	adds	r3, #44	@ 0x2c
 800a10a:	4618      	mov	r0, r3
 800a10c:	f7fe fb63 	bl	80087d6 <ld_dword>
 800a110:	4602      	mov	r2, r0
 800a112:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a114:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800a116:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a118:	699b      	ldr	r3, [r3, #24]
 800a11a:	009b      	lsls	r3, r3, #2
 800a11c:	647b      	str	r3, [r7, #68]	@ 0x44
 800a11e:	e01f      	b.n	800a160 <find_volume+0x3a8>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800a120:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a122:	891b      	ldrh	r3, [r3, #8]
 800a124:	2b00      	cmp	r3, #0
 800a126:	d101      	bne.n	800a12c <find_volume+0x374>
 800a128:	230d      	movs	r3, #13
 800a12a:	e08e      	b.n	800a24a <find_volume+0x492>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800a12c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a12e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a130:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a132:	441a      	add	r2, r3
 800a134:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a136:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800a138:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800a13c:	2b02      	cmp	r3, #2
 800a13e:	d103      	bne.n	800a148 <find_volume+0x390>
 800a140:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a142:	699b      	ldr	r3, [r3, #24]
 800a144:	005b      	lsls	r3, r3, #1
 800a146:	e00a      	b.n	800a15e <find_volume+0x3a6>
 800a148:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a14a:	699a      	ldr	r2, [r3, #24]
 800a14c:	4613      	mov	r3, r2
 800a14e:	005b      	lsls	r3, r3, #1
 800a150:	4413      	add	r3, r2
 800a152:	085a      	lsrs	r2, r3, #1
 800a154:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a156:	699b      	ldr	r3, [r3, #24]
 800a158:	f003 0301 	and.w	r3, r3, #1
 800a15c:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800a15e:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800a160:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a162:	69da      	ldr	r2, [r3, #28]
 800a164:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a166:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800a16a:	0a5b      	lsrs	r3, r3, #9
 800a16c:	429a      	cmp	r2, r3
 800a16e:	d201      	bcs.n	800a174 <find_volume+0x3bc>
 800a170:	230d      	movs	r3, #13
 800a172:	e06a      	b.n	800a24a <find_volume+0x492>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800a174:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a176:	f04f 32ff 	mov.w	r2, #4294967295
 800a17a:	615a      	str	r2, [r3, #20]
 800a17c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a17e:	695a      	ldr	r2, [r3, #20]
 800a180:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a182:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800a184:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a186:	2280      	movs	r2, #128	@ 0x80
 800a188:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800a18a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800a18e:	2b03      	cmp	r3, #3
 800a190:	d149      	bne.n	800a226 <find_volume+0x46e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800a192:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a194:	3334      	adds	r3, #52	@ 0x34
 800a196:	3330      	adds	r3, #48	@ 0x30
 800a198:	4618      	mov	r0, r3
 800a19a:	f7fe fb03 	bl	80087a4 <ld_word>
 800a19e:	4603      	mov	r3, r0
 800a1a0:	2b01      	cmp	r3, #1
 800a1a2:	d140      	bne.n	800a226 <find_volume+0x46e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800a1a4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a1a6:	3301      	adds	r3, #1
 800a1a8:	4619      	mov	r1, r3
 800a1aa:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800a1ac:	f7fe fddc 	bl	8008d68 <move_window>
 800a1b0:	4603      	mov	r3, r0
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d137      	bne.n	800a226 <find_volume+0x46e>
		{
			fs->fsi_flag = 0;
 800a1b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1b8:	2200      	movs	r2, #0
 800a1ba:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800a1bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1be:	3334      	adds	r3, #52	@ 0x34
 800a1c0:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800a1c4:	4618      	mov	r0, r3
 800a1c6:	f7fe faed 	bl	80087a4 <ld_word>
 800a1ca:	4603      	mov	r3, r0
 800a1cc:	461a      	mov	r2, r3
 800a1ce:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800a1d2:	429a      	cmp	r2, r3
 800a1d4:	d127      	bne.n	800a226 <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800a1d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1d8:	3334      	adds	r3, #52	@ 0x34
 800a1da:	4618      	mov	r0, r3
 800a1dc:	f7fe fafb 	bl	80087d6 <ld_dword>
 800a1e0:	4603      	mov	r3, r0
 800a1e2:	4a1c      	ldr	r2, [pc, #112]	@ (800a254 <find_volume+0x49c>)
 800a1e4:	4293      	cmp	r3, r2
 800a1e6:	d11e      	bne.n	800a226 <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800a1e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1ea:	3334      	adds	r3, #52	@ 0x34
 800a1ec:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800a1f0:	4618      	mov	r0, r3
 800a1f2:	f7fe faf0 	bl	80087d6 <ld_dword>
 800a1f6:	4603      	mov	r3, r0
 800a1f8:	4a17      	ldr	r2, [pc, #92]	@ (800a258 <find_volume+0x4a0>)
 800a1fa:	4293      	cmp	r3, r2
 800a1fc:	d113      	bne.n	800a226 <find_volume+0x46e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800a1fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a200:	3334      	adds	r3, #52	@ 0x34
 800a202:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800a206:	4618      	mov	r0, r3
 800a208:	f7fe fae5 	bl	80087d6 <ld_dword>
 800a20c:	4602      	mov	r2, r0
 800a20e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a210:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800a212:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a214:	3334      	adds	r3, #52	@ 0x34
 800a216:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800a21a:	4618      	mov	r0, r3
 800a21c:	f7fe fadb 	bl	80087d6 <ld_dword>
 800a220:	4602      	mov	r2, r0
 800a222:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a224:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800a226:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a228:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800a22c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800a22e:	4b0b      	ldr	r3, [pc, #44]	@ (800a25c <find_volume+0x4a4>)
 800a230:	881b      	ldrh	r3, [r3, #0]
 800a232:	3301      	adds	r3, #1
 800a234:	b29a      	uxth	r2, r3
 800a236:	4b09      	ldr	r3, [pc, #36]	@ (800a25c <find_volume+0x4a4>)
 800a238:	801a      	strh	r2, [r3, #0]
 800a23a:	4b08      	ldr	r3, [pc, #32]	@ (800a25c <find_volume+0x4a4>)
 800a23c:	881a      	ldrh	r2, [r3, #0]
 800a23e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a240:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800a242:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800a244:	f7fe fd28 	bl	8008c98 <clear_lock>
#endif
	return FR_OK;
 800a248:	2300      	movs	r3, #0
}
 800a24a:	4618      	mov	r0, r3
 800a24c:	3758      	adds	r7, #88	@ 0x58
 800a24e:	46bd      	mov	sp, r7
 800a250:	bd80      	pop	{r7, pc}
 800a252:	bf00      	nop
 800a254:	41615252 	.word	0x41615252
 800a258:	61417272 	.word	0x61417272
 800a25c:	20000814 	.word	0x20000814

0800a260 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800a260:	b580      	push	{r7, lr}
 800a262:	b084      	sub	sp, #16
 800a264:	af00      	add	r7, sp, #0
 800a266:	6078      	str	r0, [r7, #4]
 800a268:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800a26a:	2309      	movs	r3, #9
 800a26c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	2b00      	cmp	r3, #0
 800a272:	d02e      	beq.n	800a2d2 <validate+0x72>
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d02a      	beq.n	800a2d2 <validate+0x72>
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	781b      	ldrb	r3, [r3, #0]
 800a282:	2b00      	cmp	r3, #0
 800a284:	d025      	beq.n	800a2d2 <validate+0x72>
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	889a      	ldrh	r2, [r3, #4]
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	88db      	ldrh	r3, [r3, #6]
 800a290:	429a      	cmp	r2, r3
 800a292:	d11e      	bne.n	800a2d2 <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	4618      	mov	r0, r3
 800a29a:	f7fe fb84 	bl	80089a6 <lock_fs>
 800a29e:	4603      	mov	r3, r0
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d014      	beq.n	800a2ce <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	785b      	ldrb	r3, [r3, #1]
 800a2aa:	4618      	mov	r0, r3
 800a2ac:	f7fe f9dc 	bl	8008668 <disk_status>
 800a2b0:	4603      	mov	r3, r0
 800a2b2:	f003 0301 	and.w	r3, r3, #1
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d102      	bne.n	800a2c0 <validate+0x60>
				res = FR_OK;
 800a2ba:	2300      	movs	r3, #0
 800a2bc:	73fb      	strb	r3, [r7, #15]
 800a2be:	e008      	b.n	800a2d2 <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	2100      	movs	r1, #0
 800a2c6:	4618      	mov	r0, r3
 800a2c8:	f7fe fb83 	bl	80089d2 <unlock_fs>
 800a2cc:	e001      	b.n	800a2d2 <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 800a2ce:	230f      	movs	r3, #15
 800a2d0:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800a2d2:	7bfb      	ldrb	r3, [r7, #15]
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d102      	bne.n	800a2de <validate+0x7e>
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	e000      	b.n	800a2e0 <validate+0x80>
 800a2de:	2300      	movs	r3, #0
 800a2e0:	683a      	ldr	r2, [r7, #0]
 800a2e2:	6013      	str	r3, [r2, #0]
	return res;
 800a2e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2e6:	4618      	mov	r0, r3
 800a2e8:	3710      	adds	r7, #16
 800a2ea:	46bd      	mov	sp, r7
 800a2ec:	bd80      	pop	{r7, pc}
	...

0800a2f0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800a2f0:	b580      	push	{r7, lr}
 800a2f2:	b088      	sub	sp, #32
 800a2f4:	af00      	add	r7, sp, #0
 800a2f6:	60f8      	str	r0, [r7, #12]
 800a2f8:	60b9      	str	r1, [r7, #8]
 800a2fa:	4613      	mov	r3, r2
 800a2fc:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800a2fe:	68bb      	ldr	r3, [r7, #8]
 800a300:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800a302:	f107 0310 	add.w	r3, r7, #16
 800a306:	4618      	mov	r0, r3
 800a308:	f7ff fcbb 	bl	8009c82 <get_ldnumber>
 800a30c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800a30e:	69fb      	ldr	r3, [r7, #28]
 800a310:	2b00      	cmp	r3, #0
 800a312:	da01      	bge.n	800a318 <f_mount+0x28>
 800a314:	230b      	movs	r3, #11
 800a316:	e048      	b.n	800a3aa <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800a318:	4a26      	ldr	r2, [pc, #152]	@ (800a3b4 <f_mount+0xc4>)
 800a31a:	69fb      	ldr	r3, [r7, #28]
 800a31c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a320:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800a322:	69bb      	ldr	r3, [r7, #24]
 800a324:	2b00      	cmp	r3, #0
 800a326:	d00f      	beq.n	800a348 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800a328:	69b8      	ldr	r0, [r7, #24]
 800a32a:	f7fe fcb5 	bl	8008c98 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800a32e:	69bb      	ldr	r3, [r7, #24]
 800a330:	68db      	ldr	r3, [r3, #12]
 800a332:	4618      	mov	r0, r3
 800a334:	f000 fdc2 	bl	800aebc <ff_del_syncobj>
 800a338:	4603      	mov	r3, r0
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d101      	bne.n	800a342 <f_mount+0x52>
 800a33e:	2302      	movs	r3, #2
 800a340:	e033      	b.n	800a3aa <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800a342:	69bb      	ldr	r3, [r7, #24]
 800a344:	2200      	movs	r2, #0
 800a346:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d00f      	beq.n	800a36e <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	2200      	movs	r2, #0
 800a352:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800a354:	69fb      	ldr	r3, [r7, #28]
 800a356:	b2da      	uxtb	r2, r3
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	330c      	adds	r3, #12
 800a35c:	4619      	mov	r1, r3
 800a35e:	4610      	mov	r0, r2
 800a360:	f000 fd91 	bl	800ae86 <ff_cre_syncobj>
 800a364:	4603      	mov	r3, r0
 800a366:	2b00      	cmp	r3, #0
 800a368:	d101      	bne.n	800a36e <f_mount+0x7e>
 800a36a:	2302      	movs	r3, #2
 800a36c:	e01d      	b.n	800a3aa <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800a36e:	68fa      	ldr	r2, [r7, #12]
 800a370:	4910      	ldr	r1, [pc, #64]	@ (800a3b4 <f_mount+0xc4>)
 800a372:	69fb      	ldr	r3, [r7, #28]
 800a374:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d002      	beq.n	800a384 <f_mount+0x94>
 800a37e:	79fb      	ldrb	r3, [r7, #7]
 800a380:	2b01      	cmp	r3, #1
 800a382:	d001      	beq.n	800a388 <f_mount+0x98>
 800a384:	2300      	movs	r3, #0
 800a386:	e010      	b.n	800a3aa <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800a388:	f107 010c 	add.w	r1, r7, #12
 800a38c:	f107 0308 	add.w	r3, r7, #8
 800a390:	2200      	movs	r2, #0
 800a392:	4618      	mov	r0, r3
 800a394:	f7ff fd10 	bl	8009db8 <find_volume>
 800a398:	4603      	mov	r3, r0
 800a39a:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	7dfa      	ldrb	r2, [r7, #23]
 800a3a0:	4611      	mov	r1, r2
 800a3a2:	4618      	mov	r0, r3
 800a3a4:	f7fe fb15 	bl	80089d2 <unlock_fs>
 800a3a8:	7dfb      	ldrb	r3, [r7, #23]
}
 800a3aa:	4618      	mov	r0, r3
 800a3ac:	3720      	adds	r7, #32
 800a3ae:	46bd      	mov	sp, r7
 800a3b0:	bd80      	pop	{r7, pc}
 800a3b2:	bf00      	nop
 800a3b4:	20000810 	.word	0x20000810

0800a3b8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800a3b8:	b580      	push	{r7, lr}
 800a3ba:	b098      	sub	sp, #96	@ 0x60
 800a3bc:	af00      	add	r7, sp, #0
 800a3be:	60f8      	str	r0, [r7, #12]
 800a3c0:	60b9      	str	r1, [r7, #8]
 800a3c2:	4613      	mov	r3, r2
 800a3c4:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d101      	bne.n	800a3d0 <f_open+0x18>
 800a3cc:	2309      	movs	r3, #9
 800a3ce:	e1b0      	b.n	800a732 <f_open+0x37a>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800a3d0:	79fb      	ldrb	r3, [r7, #7]
 800a3d2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a3d6:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800a3d8:	79fa      	ldrb	r2, [r7, #7]
 800a3da:	f107 0110 	add.w	r1, r7, #16
 800a3de:	f107 0308 	add.w	r3, r7, #8
 800a3e2:	4618      	mov	r0, r3
 800a3e4:	f7ff fce8 	bl	8009db8 <find_volume>
 800a3e8:	4603      	mov	r3, r0
 800a3ea:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 800a3ee:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	f040 818d 	bne.w	800a712 <f_open+0x35a>
		dj.obj.fs = fs;
 800a3f8:	693b      	ldr	r3, [r7, #16]
 800a3fa:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800a3fc:	68ba      	ldr	r2, [r7, #8]
 800a3fe:	f107 0314 	add.w	r3, r7, #20
 800a402:	4611      	mov	r1, r2
 800a404:	4618      	mov	r0, r3
 800a406:	f7ff fbcb 	bl	8009ba0 <follow_path>
 800a40a:	4603      	mov	r3, r0
 800a40c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800a410:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a414:	2b00      	cmp	r3, #0
 800a416:	d118      	bne.n	800a44a <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800a418:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a41c:	b25b      	sxtb	r3, r3
 800a41e:	2b00      	cmp	r3, #0
 800a420:	da03      	bge.n	800a42a <f_open+0x72>
				res = FR_INVALID_NAME;
 800a422:	2306      	movs	r3, #6
 800a424:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800a428:	e00f      	b.n	800a44a <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a42a:	79fb      	ldrb	r3, [r7, #7]
 800a42c:	2b01      	cmp	r3, #1
 800a42e:	bf8c      	ite	hi
 800a430:	2301      	movhi	r3, #1
 800a432:	2300      	movls	r3, #0
 800a434:	b2db      	uxtb	r3, r3
 800a436:	461a      	mov	r2, r3
 800a438:	f107 0314 	add.w	r3, r7, #20
 800a43c:	4611      	mov	r1, r2
 800a43e:	4618      	mov	r0, r3
 800a440:	f7fe fae2 	bl	8008a08 <chk_lock>
 800a444:	4603      	mov	r3, r0
 800a446:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800a44a:	79fb      	ldrb	r3, [r7, #7]
 800a44c:	f003 031c 	and.w	r3, r3, #28
 800a450:	2b00      	cmp	r3, #0
 800a452:	d07f      	beq.n	800a554 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800a454:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d017      	beq.n	800a48c <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800a45c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a460:	2b04      	cmp	r3, #4
 800a462:	d10e      	bne.n	800a482 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800a464:	f7fe fb2c 	bl	8008ac0 <enq_lock>
 800a468:	4603      	mov	r3, r0
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d006      	beq.n	800a47c <f_open+0xc4>
 800a46e:	f107 0314 	add.w	r3, r7, #20
 800a472:	4618      	mov	r0, r3
 800a474:	f7ff fa6d 	bl	8009952 <dir_register>
 800a478:	4603      	mov	r3, r0
 800a47a:	e000      	b.n	800a47e <f_open+0xc6>
 800a47c:	2312      	movs	r3, #18
 800a47e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800a482:	79fb      	ldrb	r3, [r7, #7]
 800a484:	f043 0308 	orr.w	r3, r3, #8
 800a488:	71fb      	strb	r3, [r7, #7]
 800a48a:	e010      	b.n	800a4ae <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800a48c:	7ebb      	ldrb	r3, [r7, #26]
 800a48e:	f003 0311 	and.w	r3, r3, #17
 800a492:	2b00      	cmp	r3, #0
 800a494:	d003      	beq.n	800a49e <f_open+0xe6>
					res = FR_DENIED;
 800a496:	2307      	movs	r3, #7
 800a498:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800a49c:	e007      	b.n	800a4ae <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800a49e:	79fb      	ldrb	r3, [r7, #7]
 800a4a0:	f003 0304 	and.w	r3, r3, #4
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d002      	beq.n	800a4ae <f_open+0xf6>
 800a4a8:	2308      	movs	r3, #8
 800a4aa:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800a4ae:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d168      	bne.n	800a588 <f_open+0x1d0>
 800a4b6:	79fb      	ldrb	r3, [r7, #7]
 800a4b8:	f003 0308 	and.w	r3, r3, #8
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d063      	beq.n	800a588 <f_open+0x1d0>
				dw = GET_FATTIME();
 800a4c0:	f7fd fb9a 	bl	8007bf8 <get_fattime>
 800a4c4:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800a4c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a4c8:	330e      	adds	r3, #14
 800a4ca:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800a4cc:	4618      	mov	r0, r3
 800a4ce:	f7fe f9c0 	bl	8008852 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800a4d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a4d4:	3316      	adds	r3, #22
 800a4d6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800a4d8:	4618      	mov	r0, r3
 800a4da:	f7fe f9ba 	bl	8008852 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800a4de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a4e0:	330b      	adds	r3, #11
 800a4e2:	2220      	movs	r2, #32
 800a4e4:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800a4e6:	693b      	ldr	r3, [r7, #16]
 800a4e8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a4ea:	4611      	mov	r1, r2
 800a4ec:	4618      	mov	r0, r3
 800a4ee:	f7ff f93f 	bl	8009770 <ld_clust>
 800a4f2:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800a4f4:	693b      	ldr	r3, [r7, #16]
 800a4f6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800a4f8:	2200      	movs	r2, #0
 800a4fa:	4618      	mov	r0, r3
 800a4fc:	f7ff f957 	bl	80097ae <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800a500:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a502:	331c      	adds	r3, #28
 800a504:	2100      	movs	r1, #0
 800a506:	4618      	mov	r0, r3
 800a508:	f7fe f9a3 	bl	8008852 <st_dword>
					fs->wflag = 1;
 800a50c:	693b      	ldr	r3, [r7, #16]
 800a50e:	2201      	movs	r2, #1
 800a510:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800a512:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a514:	2b00      	cmp	r3, #0
 800a516:	d037      	beq.n	800a588 <f_open+0x1d0>
						dw = fs->winsect;
 800a518:	693b      	ldr	r3, [r7, #16]
 800a51a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a51c:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800a51e:	f107 0314 	add.w	r3, r7, #20
 800a522:	2200      	movs	r2, #0
 800a524:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800a526:	4618      	mov	r0, r3
 800a528:	f7fe fe6a 	bl	8009200 <remove_chain>
 800a52c:	4603      	mov	r3, r0
 800a52e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 800a532:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a536:	2b00      	cmp	r3, #0
 800a538:	d126      	bne.n	800a588 <f_open+0x1d0>
							res = move_window(fs, dw);
 800a53a:	693b      	ldr	r3, [r7, #16]
 800a53c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800a53e:	4618      	mov	r0, r3
 800a540:	f7fe fc12 	bl	8008d68 <move_window>
 800a544:	4603      	mov	r3, r0
 800a546:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800a54a:	693b      	ldr	r3, [r7, #16]
 800a54c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a54e:	3a01      	subs	r2, #1
 800a550:	611a      	str	r2, [r3, #16]
 800a552:	e019      	b.n	800a588 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800a554:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d115      	bne.n	800a588 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800a55c:	7ebb      	ldrb	r3, [r7, #26]
 800a55e:	f003 0310 	and.w	r3, r3, #16
 800a562:	2b00      	cmp	r3, #0
 800a564:	d003      	beq.n	800a56e <f_open+0x1b6>
					res = FR_NO_FILE;
 800a566:	2304      	movs	r3, #4
 800a568:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800a56c:	e00c      	b.n	800a588 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800a56e:	79fb      	ldrb	r3, [r7, #7]
 800a570:	f003 0302 	and.w	r3, r3, #2
 800a574:	2b00      	cmp	r3, #0
 800a576:	d007      	beq.n	800a588 <f_open+0x1d0>
 800a578:	7ebb      	ldrb	r3, [r7, #26]
 800a57a:	f003 0301 	and.w	r3, r3, #1
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d002      	beq.n	800a588 <f_open+0x1d0>
						res = FR_DENIED;
 800a582:	2307      	movs	r3, #7
 800a584:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800a588:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d126      	bne.n	800a5de <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800a590:	79fb      	ldrb	r3, [r7, #7]
 800a592:	f003 0308 	and.w	r3, r3, #8
 800a596:	2b00      	cmp	r3, #0
 800a598:	d003      	beq.n	800a5a2 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800a59a:	79fb      	ldrb	r3, [r7, #7]
 800a59c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a5a0:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800a5a2:	693b      	ldr	r3, [r7, #16]
 800a5a4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800a5aa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a5b0:	79fb      	ldrb	r3, [r7, #7]
 800a5b2:	2b01      	cmp	r3, #1
 800a5b4:	bf8c      	ite	hi
 800a5b6:	2301      	movhi	r3, #1
 800a5b8:	2300      	movls	r3, #0
 800a5ba:	b2db      	uxtb	r3, r3
 800a5bc:	461a      	mov	r2, r3
 800a5be:	f107 0314 	add.w	r3, r7, #20
 800a5c2:	4611      	mov	r1, r2
 800a5c4:	4618      	mov	r0, r3
 800a5c6:	f7fe fa9d 	bl	8008b04 <inc_lock>
 800a5ca:	4602      	mov	r2, r0
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	691b      	ldr	r3, [r3, #16]
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d102      	bne.n	800a5de <f_open+0x226>
 800a5d8:	2302      	movs	r3, #2
 800a5da:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800a5de:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	f040 8095 	bne.w	800a712 <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800a5e8:	693b      	ldr	r3, [r7, #16]
 800a5ea:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a5ec:	4611      	mov	r1, r2
 800a5ee:	4618      	mov	r0, r3
 800a5f0:	f7ff f8be 	bl	8009770 <ld_clust>
 800a5f4:	4602      	mov	r2, r0
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800a5fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a5fc:	331c      	adds	r3, #28
 800a5fe:	4618      	mov	r0, r3
 800a600:	f7fe f8e9 	bl	80087d6 <ld_dword>
 800a604:	4602      	mov	r2, r0
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	2200      	movs	r2, #0
 800a60e:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800a610:	693a      	ldr	r2, [r7, #16]
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800a616:	693b      	ldr	r3, [r7, #16]
 800a618:	88da      	ldrh	r2, [r3, #6]
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	79fa      	ldrb	r2, [r7, #7]
 800a622:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	2200      	movs	r2, #0
 800a628:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	2200      	movs	r2, #0
 800a62e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	2200      	movs	r2, #0
 800a634:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	3330      	adds	r3, #48	@ 0x30
 800a63a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a63e:	2100      	movs	r1, #0
 800a640:	4618      	mov	r0, r3
 800a642:	f7fe f953 	bl	80088ec <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800a646:	79fb      	ldrb	r3, [r7, #7]
 800a648:	f003 0320 	and.w	r3, r3, #32
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d060      	beq.n	800a712 <f_open+0x35a>
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	68db      	ldr	r3, [r3, #12]
 800a654:	2b00      	cmp	r3, #0
 800a656:	d05c      	beq.n	800a712 <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	68da      	ldr	r2, [r3, #12]
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800a660:	693b      	ldr	r3, [r7, #16]
 800a662:	895b      	ldrh	r3, [r3, #10]
 800a664:	025b      	lsls	r3, r3, #9
 800a666:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	689b      	ldr	r3, [r3, #8]
 800a66c:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	68db      	ldr	r3, [r3, #12]
 800a672:	657b      	str	r3, [r7, #84]	@ 0x54
 800a674:	e016      	b.n	800a6a4 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800a67a:	4618      	mov	r0, r3
 800a67c:	f7fe fc2f 	bl	8008ede <get_fat>
 800a680:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800a682:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a684:	2b01      	cmp	r3, #1
 800a686:	d802      	bhi.n	800a68e <f_open+0x2d6>
 800a688:	2302      	movs	r3, #2
 800a68a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800a68e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a690:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a694:	d102      	bne.n	800a69c <f_open+0x2e4>
 800a696:	2301      	movs	r3, #1
 800a698:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800a69c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a69e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a6a0:	1ad3      	subs	r3, r2, r3
 800a6a2:	657b      	str	r3, [r7, #84]	@ 0x54
 800a6a4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d103      	bne.n	800a6b4 <f_open+0x2fc>
 800a6ac:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a6ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a6b0:	429a      	cmp	r2, r3
 800a6b2:	d8e0      	bhi.n	800a676 <f_open+0x2be>
				}
				fp->clust = clst;
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a6b8:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800a6ba:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d127      	bne.n	800a712 <f_open+0x35a>
 800a6c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a6c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d022      	beq.n	800a712 <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800a6cc:	693b      	ldr	r3, [r7, #16]
 800a6ce:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800a6d0:	4618      	mov	r0, r3
 800a6d2:	f7fe fbe5 	bl	8008ea0 <clust2sect>
 800a6d6:	6478      	str	r0, [r7, #68]	@ 0x44
 800a6d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d103      	bne.n	800a6e6 <f_open+0x32e>
						res = FR_INT_ERR;
 800a6de:	2302      	movs	r3, #2
 800a6e0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800a6e4:	e015      	b.n	800a712 <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800a6e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a6e8:	0a5a      	lsrs	r2, r3, #9
 800a6ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a6ec:	441a      	add	r2, r3
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800a6f2:	693b      	ldr	r3, [r7, #16]
 800a6f4:	7858      	ldrb	r0, [r3, #1]
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	6a1a      	ldr	r2, [r3, #32]
 800a700:	2301      	movs	r3, #1
 800a702:	f7fd fff1 	bl	80086e8 <disk_read>
 800a706:	4603      	mov	r3, r0
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d002      	beq.n	800a712 <f_open+0x35a>
 800a70c:	2301      	movs	r3, #1
 800a70e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800a712:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a716:	2b00      	cmp	r3, #0
 800a718:	d002      	beq.n	800a720 <f_open+0x368>
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	2200      	movs	r2, #0
 800a71e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800a720:	693b      	ldr	r3, [r7, #16]
 800a722:	f897 205f 	ldrb.w	r2, [r7, #95]	@ 0x5f
 800a726:	4611      	mov	r1, r2
 800a728:	4618      	mov	r0, r3
 800a72a:	f7fe f952 	bl	80089d2 <unlock_fs>
 800a72e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 800a732:	4618      	mov	r0, r3
 800a734:	3760      	adds	r7, #96	@ 0x60
 800a736:	46bd      	mov	sp, r7
 800a738:	bd80      	pop	{r7, pc}

0800a73a <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800a73a:	b580      	push	{r7, lr}
 800a73c:	b08e      	sub	sp, #56	@ 0x38
 800a73e:	af00      	add	r7, sp, #0
 800a740:	60f8      	str	r0, [r7, #12]
 800a742:	60b9      	str	r1, [r7, #8]
 800a744:	607a      	str	r2, [r7, #4]
 800a746:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800a748:	68bb      	ldr	r3, [r7, #8]
 800a74a:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 800a74c:	683b      	ldr	r3, [r7, #0]
 800a74e:	2200      	movs	r2, #0
 800a750:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	f107 0214 	add.w	r2, r7, #20
 800a758:	4611      	mov	r1, r2
 800a75a:	4618      	mov	r0, r3
 800a75c:	f7ff fd80 	bl	800a260 <validate>
 800a760:	4603      	mov	r3, r0
 800a762:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800a766:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d107      	bne.n	800a77e <f_read+0x44>
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	7d5b      	ldrb	r3, [r3, #21]
 800a772:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800a776:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d009      	beq.n	800a792 <f_read+0x58>
 800a77e:	697b      	ldr	r3, [r7, #20]
 800a780:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 800a784:	4611      	mov	r1, r2
 800a786:	4618      	mov	r0, r3
 800a788:	f7fe f923 	bl	80089d2 <unlock_fs>
 800a78c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800a790:	e13d      	b.n	800aa0e <f_read+0x2d4>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	7d1b      	ldrb	r3, [r3, #20]
 800a796:	f003 0301 	and.w	r3, r3, #1
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d106      	bne.n	800a7ac <f_read+0x72>
 800a79e:	697b      	ldr	r3, [r7, #20]
 800a7a0:	2107      	movs	r1, #7
 800a7a2:	4618      	mov	r0, r3
 800a7a4:	f7fe f915 	bl	80089d2 <unlock_fs>
 800a7a8:	2307      	movs	r3, #7
 800a7aa:	e130      	b.n	800aa0e <f_read+0x2d4>
	remain = fp->obj.objsize - fp->fptr;
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	68da      	ldr	r2, [r3, #12]
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	699b      	ldr	r3, [r3, #24]
 800a7b4:	1ad3      	subs	r3, r2, r3
 800a7b6:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800a7b8:	687a      	ldr	r2, [r7, #4]
 800a7ba:	6a3b      	ldr	r3, [r7, #32]
 800a7bc:	429a      	cmp	r2, r3
 800a7be:	f240 811c 	bls.w	800a9fa <f_read+0x2c0>
 800a7c2:	6a3b      	ldr	r3, [r7, #32]
 800a7c4:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800a7c6:	e118      	b.n	800a9fa <f_read+0x2c0>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	699b      	ldr	r3, [r3, #24]
 800a7cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	f040 80e4 	bne.w	800a99e <f_read+0x264>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	699b      	ldr	r3, [r3, #24]
 800a7da:	0a5b      	lsrs	r3, r3, #9
 800a7dc:	697a      	ldr	r2, [r7, #20]
 800a7de:	8952      	ldrh	r2, [r2, #10]
 800a7e0:	3a01      	subs	r2, #1
 800a7e2:	4013      	ands	r3, r2
 800a7e4:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800a7e6:	69fb      	ldr	r3, [r7, #28]
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d139      	bne.n	800a860 <f_read+0x126>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	699b      	ldr	r3, [r3, #24]
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d103      	bne.n	800a7fc <f_read+0xc2>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	689b      	ldr	r3, [r3, #8]
 800a7f8:	633b      	str	r3, [r7, #48]	@ 0x30
 800a7fa:	e013      	b.n	800a824 <f_read+0xea>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a800:	2b00      	cmp	r3, #0
 800a802:	d007      	beq.n	800a814 <f_read+0xda>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	699b      	ldr	r3, [r3, #24]
 800a808:	4619      	mov	r1, r3
 800a80a:	68f8      	ldr	r0, [r7, #12]
 800a80c:	f7fe fdf5 	bl	80093fa <clmt_clust>
 800a810:	6338      	str	r0, [r7, #48]	@ 0x30
 800a812:	e007      	b.n	800a824 <f_read+0xea>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800a814:	68fa      	ldr	r2, [r7, #12]
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	69db      	ldr	r3, [r3, #28]
 800a81a:	4619      	mov	r1, r3
 800a81c:	4610      	mov	r0, r2
 800a81e:	f7fe fb5e 	bl	8008ede <get_fat>
 800a822:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800a824:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a826:	2b01      	cmp	r3, #1
 800a828:	d809      	bhi.n	800a83e <f_read+0x104>
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	2202      	movs	r2, #2
 800a82e:	755a      	strb	r2, [r3, #21]
 800a830:	697b      	ldr	r3, [r7, #20]
 800a832:	2102      	movs	r1, #2
 800a834:	4618      	mov	r0, r3
 800a836:	f7fe f8cc 	bl	80089d2 <unlock_fs>
 800a83a:	2302      	movs	r3, #2
 800a83c:	e0e7      	b.n	800aa0e <f_read+0x2d4>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a83e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a840:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a844:	d109      	bne.n	800a85a <f_read+0x120>
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	2201      	movs	r2, #1
 800a84a:	755a      	strb	r2, [r3, #21]
 800a84c:	697b      	ldr	r3, [r7, #20]
 800a84e:	2101      	movs	r1, #1
 800a850:	4618      	mov	r0, r3
 800a852:	f7fe f8be 	bl	80089d2 <unlock_fs>
 800a856:	2301      	movs	r3, #1
 800a858:	e0d9      	b.n	800aa0e <f_read+0x2d4>
				fp->clust = clst;				/* Update current cluster */
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a85e:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800a860:	697a      	ldr	r2, [r7, #20]
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	69db      	ldr	r3, [r3, #28]
 800a866:	4619      	mov	r1, r3
 800a868:	4610      	mov	r0, r2
 800a86a:	f7fe fb19 	bl	8008ea0 <clust2sect>
 800a86e:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800a870:	69bb      	ldr	r3, [r7, #24]
 800a872:	2b00      	cmp	r3, #0
 800a874:	d109      	bne.n	800a88a <f_read+0x150>
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	2202      	movs	r2, #2
 800a87a:	755a      	strb	r2, [r3, #21]
 800a87c:	697b      	ldr	r3, [r7, #20]
 800a87e:	2102      	movs	r1, #2
 800a880:	4618      	mov	r0, r3
 800a882:	f7fe f8a6 	bl	80089d2 <unlock_fs>
 800a886:	2302      	movs	r3, #2
 800a888:	e0c1      	b.n	800aa0e <f_read+0x2d4>
			sect += csect;
 800a88a:	69ba      	ldr	r2, [r7, #24]
 800a88c:	69fb      	ldr	r3, [r7, #28]
 800a88e:	4413      	add	r3, r2
 800a890:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	0a5b      	lsrs	r3, r3, #9
 800a896:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800a898:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d03e      	beq.n	800a91c <f_read+0x1e2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800a89e:	69fa      	ldr	r2, [r7, #28]
 800a8a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8a2:	4413      	add	r3, r2
 800a8a4:	697a      	ldr	r2, [r7, #20]
 800a8a6:	8952      	ldrh	r2, [r2, #10]
 800a8a8:	4293      	cmp	r3, r2
 800a8aa:	d905      	bls.n	800a8b8 <f_read+0x17e>
					cc = fs->csize - csect;
 800a8ac:	697b      	ldr	r3, [r7, #20]
 800a8ae:	895b      	ldrh	r3, [r3, #10]
 800a8b0:	461a      	mov	r2, r3
 800a8b2:	69fb      	ldr	r3, [r7, #28]
 800a8b4:	1ad3      	subs	r3, r2, r3
 800a8b6:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a8b8:	697b      	ldr	r3, [r7, #20]
 800a8ba:	7858      	ldrb	r0, [r3, #1]
 800a8bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8be:	69ba      	ldr	r2, [r7, #24]
 800a8c0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a8c2:	f7fd ff11 	bl	80086e8 <disk_read>
 800a8c6:	4603      	mov	r3, r0
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d009      	beq.n	800a8e0 <f_read+0x1a6>
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	2201      	movs	r2, #1
 800a8d0:	755a      	strb	r2, [r3, #21]
 800a8d2:	697b      	ldr	r3, [r7, #20]
 800a8d4:	2101      	movs	r1, #1
 800a8d6:	4618      	mov	r0, r3
 800a8d8:	f7fe f87b 	bl	80089d2 <unlock_fs>
 800a8dc:	2301      	movs	r3, #1
 800a8de:	e096      	b.n	800aa0e <f_read+0x2d4>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	7d1b      	ldrb	r3, [r3, #20]
 800a8e4:	b25b      	sxtb	r3, r3
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	da14      	bge.n	800a914 <f_read+0x1da>
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	6a1a      	ldr	r2, [r3, #32]
 800a8ee:	69bb      	ldr	r3, [r7, #24]
 800a8f0:	1ad3      	subs	r3, r2, r3
 800a8f2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a8f4:	429a      	cmp	r2, r3
 800a8f6:	d90d      	bls.n	800a914 <f_read+0x1da>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	6a1a      	ldr	r2, [r3, #32]
 800a8fc:	69bb      	ldr	r3, [r7, #24]
 800a8fe:	1ad3      	subs	r3, r2, r3
 800a900:	025b      	lsls	r3, r3, #9
 800a902:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a904:	18d0      	adds	r0, r2, r3
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	3330      	adds	r3, #48	@ 0x30
 800a90a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a90e:	4619      	mov	r1, r3
 800a910:	f7fd ffcb 	bl	80088aa <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800a914:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a916:	025b      	lsls	r3, r3, #9
 800a918:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 800a91a:	e05a      	b.n	800a9d2 <f_read+0x298>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	6a1b      	ldr	r3, [r3, #32]
 800a920:	69ba      	ldr	r2, [r7, #24]
 800a922:	429a      	cmp	r2, r3
 800a924:	d038      	beq.n	800a998 <f_read+0x25e>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	7d1b      	ldrb	r3, [r3, #20]
 800a92a:	b25b      	sxtb	r3, r3
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	da1d      	bge.n	800a96c <f_read+0x232>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a930:	697b      	ldr	r3, [r7, #20]
 800a932:	7858      	ldrb	r0, [r3, #1]
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	6a1a      	ldr	r2, [r3, #32]
 800a93e:	2301      	movs	r3, #1
 800a940:	f7fd fef2 	bl	8008728 <disk_write>
 800a944:	4603      	mov	r3, r0
 800a946:	2b00      	cmp	r3, #0
 800a948:	d009      	beq.n	800a95e <f_read+0x224>
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	2201      	movs	r2, #1
 800a94e:	755a      	strb	r2, [r3, #21]
 800a950:	697b      	ldr	r3, [r7, #20]
 800a952:	2101      	movs	r1, #1
 800a954:	4618      	mov	r0, r3
 800a956:	f7fe f83c 	bl	80089d2 <unlock_fs>
 800a95a:	2301      	movs	r3, #1
 800a95c:	e057      	b.n	800aa0e <f_read+0x2d4>
					fp->flag &= (BYTE)~FA_DIRTY;
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	7d1b      	ldrb	r3, [r3, #20]
 800a962:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a966:	b2da      	uxtb	r2, r3
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800a96c:	697b      	ldr	r3, [r7, #20]
 800a96e:	7858      	ldrb	r0, [r3, #1]
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a976:	2301      	movs	r3, #1
 800a978:	69ba      	ldr	r2, [r7, #24]
 800a97a:	f7fd feb5 	bl	80086e8 <disk_read>
 800a97e:	4603      	mov	r3, r0
 800a980:	2b00      	cmp	r3, #0
 800a982:	d009      	beq.n	800a998 <f_read+0x25e>
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	2201      	movs	r2, #1
 800a988:	755a      	strb	r2, [r3, #21]
 800a98a:	697b      	ldr	r3, [r7, #20]
 800a98c:	2101      	movs	r1, #1
 800a98e:	4618      	mov	r0, r3
 800a990:	f7fe f81f 	bl	80089d2 <unlock_fs>
 800a994:	2301      	movs	r3, #1
 800a996:	e03a      	b.n	800aa0e <f_read+0x2d4>
			}
#endif
			fp->sect = sect;
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	69ba      	ldr	r2, [r7, #24]
 800a99c:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	699b      	ldr	r3, [r3, #24]
 800a9a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a9a6:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800a9aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800a9ac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	429a      	cmp	r2, r3
 800a9b2:	d901      	bls.n	800a9b8 <f_read+0x27e>
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	699b      	ldr	r3, [r3, #24]
 800a9c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a9c6:	4413      	add	r3, r2
 800a9c8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a9ca:	4619      	mov	r1, r3
 800a9cc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a9ce:	f7fd ff6c 	bl	80088aa <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800a9d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a9d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a9d6:	4413      	add	r3, r2
 800a9d8:	627b      	str	r3, [r7, #36]	@ 0x24
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	699a      	ldr	r2, [r3, #24]
 800a9de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a9e0:	441a      	add	r2, r3
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	619a      	str	r2, [r3, #24]
 800a9e6:	683b      	ldr	r3, [r7, #0]
 800a9e8:	681a      	ldr	r2, [r3, #0]
 800a9ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a9ec:	441a      	add	r2, r3
 800a9ee:	683b      	ldr	r3, [r7, #0]
 800a9f0:	601a      	str	r2, [r3, #0]
 800a9f2:	687a      	ldr	r2, [r7, #4]
 800a9f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a9f6:	1ad3      	subs	r3, r2, r3
 800a9f8:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	f47f aee3 	bne.w	800a7c8 <f_read+0x8e>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800aa02:	697b      	ldr	r3, [r7, #20]
 800aa04:	2100      	movs	r1, #0
 800aa06:	4618      	mov	r0, r3
 800aa08:	f7fd ffe3 	bl	80089d2 <unlock_fs>
 800aa0c:	2300      	movs	r3, #0
}
 800aa0e:	4618      	mov	r0, r3
 800aa10:	3738      	adds	r7, #56	@ 0x38
 800aa12:	46bd      	mov	sp, r7
 800aa14:	bd80      	pop	{r7, pc}

0800aa16 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800aa16:	b580      	push	{r7, lr}
 800aa18:	b086      	sub	sp, #24
 800aa1a:	af00      	add	r7, sp, #0
 800aa1c:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	f107 0208 	add.w	r2, r7, #8
 800aa24:	4611      	mov	r1, r2
 800aa26:	4618      	mov	r0, r3
 800aa28:	f7ff fc1a 	bl	800a260 <validate>
 800aa2c:	4603      	mov	r3, r0
 800aa2e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800aa30:	7dfb      	ldrb	r3, [r7, #23]
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d16d      	bne.n	800ab12 <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	7d1b      	ldrb	r3, [r3, #20]
 800aa3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d067      	beq.n	800ab12 <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	7d1b      	ldrb	r3, [r3, #20]
 800aa46:	b25b      	sxtb	r3, r3
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	da1a      	bge.n	800aa82 <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800aa4c:	68bb      	ldr	r3, [r7, #8]
 800aa4e:	7858      	ldrb	r0, [r3, #1]
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	6a1a      	ldr	r2, [r3, #32]
 800aa5a:	2301      	movs	r3, #1
 800aa5c:	f7fd fe64 	bl	8008728 <disk_write>
 800aa60:	4603      	mov	r3, r0
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d006      	beq.n	800aa74 <f_sync+0x5e>
 800aa66:	68bb      	ldr	r3, [r7, #8]
 800aa68:	2101      	movs	r1, #1
 800aa6a:	4618      	mov	r0, r3
 800aa6c:	f7fd ffb1 	bl	80089d2 <unlock_fs>
 800aa70:	2301      	movs	r3, #1
 800aa72:	e055      	b.n	800ab20 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	7d1b      	ldrb	r3, [r3, #20]
 800aa78:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800aa7c:	b2da      	uxtb	r2, r3
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800aa82:	f7fd f8b9 	bl	8007bf8 <get_fattime>
 800aa86:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800aa88:	68ba      	ldr	r2, [r7, #8]
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa8e:	4619      	mov	r1, r3
 800aa90:	4610      	mov	r0, r2
 800aa92:	f7fe f969 	bl	8008d68 <move_window>
 800aa96:	4603      	mov	r3, r0
 800aa98:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800aa9a:	7dfb      	ldrb	r3, [r7, #23]
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d138      	bne.n	800ab12 <f_sync+0xfc>
					dir = fp->dir_ptr;
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aaa4:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	330b      	adds	r3, #11
 800aaaa:	781a      	ldrb	r2, [r3, #0]
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	330b      	adds	r3, #11
 800aab0:	f042 0220 	orr.w	r2, r2, #32
 800aab4:	b2d2      	uxtb	r2, r2
 800aab6:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	6818      	ldr	r0, [r3, #0]
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	689b      	ldr	r3, [r3, #8]
 800aac0:	461a      	mov	r2, r3
 800aac2:	68f9      	ldr	r1, [r7, #12]
 800aac4:	f7fe fe73 	bl	80097ae <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	f103 021c 	add.w	r2, r3, #28
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	68db      	ldr	r3, [r3, #12]
 800aad2:	4619      	mov	r1, r3
 800aad4:	4610      	mov	r0, r2
 800aad6:	f7fd febc 	bl	8008852 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	3316      	adds	r3, #22
 800aade:	6939      	ldr	r1, [r7, #16]
 800aae0:	4618      	mov	r0, r3
 800aae2:	f7fd feb6 	bl	8008852 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	3312      	adds	r3, #18
 800aaea:	2100      	movs	r1, #0
 800aaec:	4618      	mov	r0, r3
 800aaee:	f7fd fe95 	bl	800881c <st_word>
					fs->wflag = 1;
 800aaf2:	68bb      	ldr	r3, [r7, #8]
 800aaf4:	2201      	movs	r2, #1
 800aaf6:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800aaf8:	68bb      	ldr	r3, [r7, #8]
 800aafa:	4618      	mov	r0, r3
 800aafc:	f7fe f962 	bl	8008dc4 <sync_fs>
 800ab00:	4603      	mov	r3, r0
 800ab02:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	7d1b      	ldrb	r3, [r3, #20]
 800ab08:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ab0c:	b2da      	uxtb	r2, r3
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800ab12:	68bb      	ldr	r3, [r7, #8]
 800ab14:	7dfa      	ldrb	r2, [r7, #23]
 800ab16:	4611      	mov	r1, r2
 800ab18:	4618      	mov	r0, r3
 800ab1a:	f7fd ff5a 	bl	80089d2 <unlock_fs>
 800ab1e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab20:	4618      	mov	r0, r3
 800ab22:	3718      	adds	r7, #24
 800ab24:	46bd      	mov	sp, r7
 800ab26:	bd80      	pop	{r7, pc}

0800ab28 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800ab28:	b580      	push	{r7, lr}
 800ab2a:	b084      	sub	sp, #16
 800ab2c:	af00      	add	r7, sp, #0
 800ab2e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800ab30:	6878      	ldr	r0, [r7, #4]
 800ab32:	f7ff ff70 	bl	800aa16 <f_sync>
 800ab36:	4603      	mov	r3, r0
 800ab38:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800ab3a:	7bfb      	ldrb	r3, [r7, #15]
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d11d      	bne.n	800ab7c <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	f107 0208 	add.w	r2, r7, #8
 800ab46:	4611      	mov	r1, r2
 800ab48:	4618      	mov	r0, r3
 800ab4a:	f7ff fb89 	bl	800a260 <validate>
 800ab4e:	4603      	mov	r3, r0
 800ab50:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800ab52:	7bfb      	ldrb	r3, [r7, #15]
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d111      	bne.n	800ab7c <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	691b      	ldr	r3, [r3, #16]
 800ab5c:	4618      	mov	r0, r3
 800ab5e:	f7fe f85f 	bl	8008c20 <dec_lock>
 800ab62:	4603      	mov	r3, r0
 800ab64:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800ab66:	7bfb      	ldrb	r3, [r7, #15]
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d102      	bne.n	800ab72 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	2200      	movs	r2, #0
 800ab70:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 800ab72:	68bb      	ldr	r3, [r7, #8]
 800ab74:	2100      	movs	r1, #0
 800ab76:	4618      	mov	r0, r3
 800ab78:	f7fd ff2b 	bl	80089d2 <unlock_fs>
#endif
		}
	}
	return res;
 800ab7c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab7e:	4618      	mov	r0, r3
 800ab80:	3710      	adds	r7, #16
 800ab82:	46bd      	mov	sp, r7
 800ab84:	bd80      	pop	{r7, pc}

0800ab86 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800ab86:	b580      	push	{r7, lr}
 800ab88:	b086      	sub	sp, #24
 800ab8a:	af00      	add	r7, sp, #0
 800ab8c:	6078      	str	r0, [r7, #4]
 800ab8e:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d101      	bne.n	800ab9a <f_opendir+0x14>
 800ab96:	2309      	movs	r3, #9
 800ab98:	e06a      	b.n	800ac70 <f_opendir+0xea>

	/* Get logical drive */
	obj = &dp->obj;
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 800ab9e:	f107 010c 	add.w	r1, r7, #12
 800aba2:	463b      	mov	r3, r7
 800aba4:	2200      	movs	r2, #0
 800aba6:	4618      	mov	r0, r3
 800aba8:	f7ff f906 	bl	8009db8 <find_volume>
 800abac:	4603      	mov	r3, r0
 800abae:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800abb0:	7dfb      	ldrb	r3, [r7, #23]
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d14f      	bne.n	800ac56 <f_opendir+0xd0>
		obj->fs = fs;
 800abb6:	68fa      	ldr	r2, [r7, #12]
 800abb8:	693b      	ldr	r3, [r7, #16]
 800abba:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800abbc:	683b      	ldr	r3, [r7, #0]
 800abbe:	4619      	mov	r1, r3
 800abc0:	6878      	ldr	r0, [r7, #4]
 800abc2:	f7fe ffed 	bl	8009ba0 <follow_path>
 800abc6:	4603      	mov	r3, r0
 800abc8:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 800abca:	7dfb      	ldrb	r3, [r7, #23]
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d13d      	bne.n	800ac4c <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800abd6:	b25b      	sxtb	r3, r3
 800abd8:	2b00      	cmp	r3, #0
 800abda:	db12      	blt.n	800ac02 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800abdc:	693b      	ldr	r3, [r7, #16]
 800abde:	799b      	ldrb	r3, [r3, #6]
 800abe0:	f003 0310 	and.w	r3, r3, #16
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d00a      	beq.n	800abfe <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800abe8:	68fa      	ldr	r2, [r7, #12]
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	6a1b      	ldr	r3, [r3, #32]
 800abee:	4619      	mov	r1, r3
 800abf0:	4610      	mov	r0, r2
 800abf2:	f7fe fdbd 	bl	8009770 <ld_clust>
 800abf6:	4602      	mov	r2, r0
 800abf8:	693b      	ldr	r3, [r7, #16]
 800abfa:	609a      	str	r2, [r3, #8]
 800abfc:	e001      	b.n	800ac02 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 800abfe:	2305      	movs	r3, #5
 800ac00:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 800ac02:	7dfb      	ldrb	r3, [r7, #23]
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d121      	bne.n	800ac4c <f_opendir+0xc6>
				obj->id = fs->id;
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	88da      	ldrh	r2, [r3, #6]
 800ac0c:	693b      	ldr	r3, [r7, #16]
 800ac0e:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800ac10:	2100      	movs	r1, #0
 800ac12:	6878      	ldr	r0, [r7, #4]
 800ac14:	f7fe fc25 	bl	8009462 <dir_sdi>
 800ac18:	4603      	mov	r3, r0
 800ac1a:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 800ac1c:	7dfb      	ldrb	r3, [r7, #23]
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d114      	bne.n	800ac4c <f_opendir+0xc6>
					if (obj->sclust) {
 800ac22:	693b      	ldr	r3, [r7, #16]
 800ac24:	689b      	ldr	r3, [r3, #8]
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d00d      	beq.n	800ac46 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800ac2a:	2100      	movs	r1, #0
 800ac2c:	6878      	ldr	r0, [r7, #4]
 800ac2e:	f7fd ff69 	bl	8008b04 <inc_lock>
 800ac32:	4602      	mov	r2, r0
 800ac34:	693b      	ldr	r3, [r7, #16]
 800ac36:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800ac38:	693b      	ldr	r3, [r7, #16]
 800ac3a:	691b      	ldr	r3, [r3, #16]
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d105      	bne.n	800ac4c <f_opendir+0xc6>
 800ac40:	2312      	movs	r3, #18
 800ac42:	75fb      	strb	r3, [r7, #23]
 800ac44:	e002      	b.n	800ac4c <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 800ac46:	693b      	ldr	r3, [r7, #16]
 800ac48:	2200      	movs	r2, #0
 800ac4a:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800ac4c:	7dfb      	ldrb	r3, [r7, #23]
 800ac4e:	2b04      	cmp	r3, #4
 800ac50:	d101      	bne.n	800ac56 <f_opendir+0xd0>
 800ac52:	2305      	movs	r3, #5
 800ac54:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800ac56:	7dfb      	ldrb	r3, [r7, #23]
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d002      	beq.n	800ac62 <f_opendir+0xdc>
 800ac5c:	693b      	ldr	r3, [r7, #16]
 800ac5e:	2200      	movs	r2, #0
 800ac60:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	7dfa      	ldrb	r2, [r7, #23]
 800ac66:	4611      	mov	r1, r2
 800ac68:	4618      	mov	r0, r3
 800ac6a:	f7fd feb2 	bl	80089d2 <unlock_fs>
 800ac6e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac70:	4618      	mov	r0, r3
 800ac72:	3718      	adds	r7, #24
 800ac74:	46bd      	mov	sp, r7
 800ac76:	bd80      	pop	{r7, pc}

0800ac78 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 800ac78:	b580      	push	{r7, lr}
 800ac7a:	b084      	sub	sp, #16
 800ac7c:	af00      	add	r7, sp, #0
 800ac7e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	f107 0208 	add.w	r2, r7, #8
 800ac86:	4611      	mov	r1, r2
 800ac88:	4618      	mov	r0, r3
 800ac8a:	f7ff fae9 	bl	800a260 <validate>
 800ac8e:	4603      	mov	r3, r0
 800ac90:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800ac92:	7bfb      	ldrb	r3, [r7, #15]
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d115      	bne.n	800acc4 <f_closedir+0x4c>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	691b      	ldr	r3, [r3, #16]
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d006      	beq.n	800acae <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	691b      	ldr	r3, [r3, #16]
 800aca4:	4618      	mov	r0, r3
 800aca6:	f7fd ffbb 	bl	8008c20 <dec_lock>
 800acaa:	4603      	mov	r3, r0
 800acac:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 800acae:	7bfb      	ldrb	r3, [r7, #15]
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d102      	bne.n	800acba <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	2200      	movs	r2, #0
 800acb8:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
 800acba:	68bb      	ldr	r3, [r7, #8]
 800acbc:	2100      	movs	r1, #0
 800acbe:	4618      	mov	r0, r3
 800acc0:	f7fd fe87 	bl	80089d2 <unlock_fs>
#endif
	}
	return res;
 800acc4:	7bfb      	ldrb	r3, [r7, #15]
}
 800acc6:	4618      	mov	r0, r3
 800acc8:	3710      	adds	r7, #16
 800acca:	46bd      	mov	sp, r7
 800accc:	bd80      	pop	{r7, pc}

0800acce <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800acce:	b580      	push	{r7, lr}
 800acd0:	b084      	sub	sp, #16
 800acd2:	af00      	add	r7, sp, #0
 800acd4:	6078      	str	r0, [r7, #4]
 800acd6:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	f107 0208 	add.w	r2, r7, #8
 800acde:	4611      	mov	r1, r2
 800ace0:	4618      	mov	r0, r3
 800ace2:	f7ff fabd 	bl	800a260 <validate>
 800ace6:	4603      	mov	r3, r0
 800ace8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800acea:	7bfb      	ldrb	r3, [r7, #15]
 800acec:	2b00      	cmp	r3, #0
 800acee:	d126      	bne.n	800ad3e <f_readdir+0x70>
		if (!fno) {
 800acf0:	683b      	ldr	r3, [r7, #0]
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d106      	bne.n	800ad04 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800acf6:	2100      	movs	r1, #0
 800acf8:	6878      	ldr	r0, [r7, #4]
 800acfa:	f7fe fbb2 	bl	8009462 <dir_sdi>
 800acfe:	4603      	mov	r3, r0
 800ad00:	73fb      	strb	r3, [r7, #15]
 800ad02:	e01c      	b.n	800ad3e <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 800ad04:	2100      	movs	r1, #0
 800ad06:	6878      	ldr	r0, [r7, #4]
 800ad08:	f7fe fd71 	bl	80097ee <dir_read>
 800ad0c:	4603      	mov	r3, r0
 800ad0e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 800ad10:	7bfb      	ldrb	r3, [r7, #15]
 800ad12:	2b04      	cmp	r3, #4
 800ad14:	d101      	bne.n	800ad1a <f_readdir+0x4c>
 800ad16:	2300      	movs	r3, #0
 800ad18:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 800ad1a:	7bfb      	ldrb	r3, [r7, #15]
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d10e      	bne.n	800ad3e <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 800ad20:	6839      	ldr	r1, [r7, #0]
 800ad22:	6878      	ldr	r0, [r7, #4]
 800ad24:	f7fe fe47 	bl	80099b6 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800ad28:	2100      	movs	r1, #0
 800ad2a:	6878      	ldr	r0, [r7, #4]
 800ad2c:	f7fe fc14 	bl	8009558 <dir_next>
 800ad30:	4603      	mov	r3, r0
 800ad32:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800ad34:	7bfb      	ldrb	r3, [r7, #15]
 800ad36:	2b04      	cmp	r3, #4
 800ad38:	d101      	bne.n	800ad3e <f_readdir+0x70>
 800ad3a:	2300      	movs	r3, #0
 800ad3c:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 800ad3e:	68bb      	ldr	r3, [r7, #8]
 800ad40:	7bfa      	ldrb	r2, [r7, #15]
 800ad42:	4611      	mov	r1, r2
 800ad44:	4618      	mov	r0, r3
 800ad46:	f7fd fe44 	bl	80089d2 <unlock_fs>
 800ad4a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad4c:	4618      	mov	r0, r3
 800ad4e:	3710      	adds	r7, #16
 800ad50:	46bd      	mov	sp, r7
 800ad52:	bd80      	pop	{r7, pc}

0800ad54 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 800ad54:	b580      	push	{r7, lr}
 800ad56:	b088      	sub	sp, #32
 800ad58:	af00      	add	r7, sp, #0
 800ad5a:	60f8      	str	r0, [r7, #12]
 800ad5c:	60b9      	str	r1, [r7, #8]
 800ad5e:	607a      	str	r2, [r7, #4]
	int n = 0;
 800ad60:	2300      	movs	r3, #0
 800ad62:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800ad68:	e01c      	b.n	800ada4 <f_gets+0x50>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 800ad6a:	f107 0310 	add.w	r3, r7, #16
 800ad6e:	f107 0114 	add.w	r1, r7, #20
 800ad72:	2201      	movs	r2, #1
 800ad74:	6878      	ldr	r0, [r7, #4]
 800ad76:	f7ff fce0 	bl	800a73a <f_read>
		if (rc != 1) break;
 800ad7a:	693b      	ldr	r3, [r7, #16]
 800ad7c:	2b01      	cmp	r3, #1
 800ad7e:	d117      	bne.n	800adb0 <f_gets+0x5c>
		c = s[0];
 800ad80:	7d3b      	ldrb	r3, [r7, #20]
 800ad82:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 800ad84:	7dfb      	ldrb	r3, [r7, #23]
 800ad86:	2b0d      	cmp	r3, #13
 800ad88:	d00b      	beq.n	800ada2 <f_gets+0x4e>
		*p++ = c;
 800ad8a:	69bb      	ldr	r3, [r7, #24]
 800ad8c:	1c5a      	adds	r2, r3, #1
 800ad8e:	61ba      	str	r2, [r7, #24]
 800ad90:	7dfa      	ldrb	r2, [r7, #23]
 800ad92:	701a      	strb	r2, [r3, #0]
		n++;
 800ad94:	69fb      	ldr	r3, [r7, #28]
 800ad96:	3301      	adds	r3, #1
 800ad98:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 800ad9a:	7dfb      	ldrb	r3, [r7, #23]
 800ad9c:	2b0a      	cmp	r3, #10
 800ad9e:	d009      	beq.n	800adb4 <f_gets+0x60>
 800ada0:	e000      	b.n	800ada4 <f_gets+0x50>
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 800ada2:	bf00      	nop
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800ada4:	68bb      	ldr	r3, [r7, #8]
 800ada6:	3b01      	subs	r3, #1
 800ada8:	69fa      	ldr	r2, [r7, #28]
 800adaa:	429a      	cmp	r2, r3
 800adac:	dbdd      	blt.n	800ad6a <f_gets+0x16>
 800adae:	e002      	b.n	800adb6 <f_gets+0x62>
		if (rc != 1) break;
 800adb0:	bf00      	nop
 800adb2:	e000      	b.n	800adb6 <f_gets+0x62>
		if (c == '\n') break;		/* Break on EOL */
 800adb4:	bf00      	nop
	}
	*p = 0;
 800adb6:	69bb      	ldr	r3, [r7, #24]
 800adb8:	2200      	movs	r2, #0
 800adba:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 800adbc:	69fb      	ldr	r3, [r7, #28]
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d001      	beq.n	800adc6 <f_gets+0x72>
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	e000      	b.n	800adc8 <f_gets+0x74>
 800adc6:	2300      	movs	r3, #0
}
 800adc8:	4618      	mov	r0, r3
 800adca:	3720      	adds	r7, #32
 800adcc:	46bd      	mov	sp, r7
 800adce:	bd80      	pop	{r7, pc}

0800add0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800add0:	b480      	push	{r7}
 800add2:	b087      	sub	sp, #28
 800add4:	af00      	add	r7, sp, #0
 800add6:	60f8      	str	r0, [r7, #12]
 800add8:	60b9      	str	r1, [r7, #8]
 800adda:	4613      	mov	r3, r2
 800addc:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800adde:	2301      	movs	r3, #1
 800ade0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800ade2:	2300      	movs	r3, #0
 800ade4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800ade6:	4b1f      	ldr	r3, [pc, #124]	@ (800ae64 <FATFS_LinkDriverEx+0x94>)
 800ade8:	7a5b      	ldrb	r3, [r3, #9]
 800adea:	b2db      	uxtb	r3, r3
 800adec:	2b00      	cmp	r3, #0
 800adee:	d131      	bne.n	800ae54 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800adf0:	4b1c      	ldr	r3, [pc, #112]	@ (800ae64 <FATFS_LinkDriverEx+0x94>)
 800adf2:	7a5b      	ldrb	r3, [r3, #9]
 800adf4:	b2db      	uxtb	r3, r3
 800adf6:	461a      	mov	r2, r3
 800adf8:	4b1a      	ldr	r3, [pc, #104]	@ (800ae64 <FATFS_LinkDriverEx+0x94>)
 800adfa:	2100      	movs	r1, #0
 800adfc:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800adfe:	4b19      	ldr	r3, [pc, #100]	@ (800ae64 <FATFS_LinkDriverEx+0x94>)
 800ae00:	7a5b      	ldrb	r3, [r3, #9]
 800ae02:	b2db      	uxtb	r3, r3
 800ae04:	4a17      	ldr	r2, [pc, #92]	@ (800ae64 <FATFS_LinkDriverEx+0x94>)
 800ae06:	009b      	lsls	r3, r3, #2
 800ae08:	4413      	add	r3, r2
 800ae0a:	68fa      	ldr	r2, [r7, #12]
 800ae0c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800ae0e:	4b15      	ldr	r3, [pc, #84]	@ (800ae64 <FATFS_LinkDriverEx+0x94>)
 800ae10:	7a5b      	ldrb	r3, [r3, #9]
 800ae12:	b2db      	uxtb	r3, r3
 800ae14:	461a      	mov	r2, r3
 800ae16:	4b13      	ldr	r3, [pc, #76]	@ (800ae64 <FATFS_LinkDriverEx+0x94>)
 800ae18:	4413      	add	r3, r2
 800ae1a:	79fa      	ldrb	r2, [r7, #7]
 800ae1c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800ae1e:	4b11      	ldr	r3, [pc, #68]	@ (800ae64 <FATFS_LinkDriverEx+0x94>)
 800ae20:	7a5b      	ldrb	r3, [r3, #9]
 800ae22:	b2db      	uxtb	r3, r3
 800ae24:	1c5a      	adds	r2, r3, #1
 800ae26:	b2d1      	uxtb	r1, r2
 800ae28:	4a0e      	ldr	r2, [pc, #56]	@ (800ae64 <FATFS_LinkDriverEx+0x94>)
 800ae2a:	7251      	strb	r1, [r2, #9]
 800ae2c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800ae2e:	7dbb      	ldrb	r3, [r7, #22]
 800ae30:	3330      	adds	r3, #48	@ 0x30
 800ae32:	b2da      	uxtb	r2, r3
 800ae34:	68bb      	ldr	r3, [r7, #8]
 800ae36:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800ae38:	68bb      	ldr	r3, [r7, #8]
 800ae3a:	3301      	adds	r3, #1
 800ae3c:	223a      	movs	r2, #58	@ 0x3a
 800ae3e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800ae40:	68bb      	ldr	r3, [r7, #8]
 800ae42:	3302      	adds	r3, #2
 800ae44:	222f      	movs	r2, #47	@ 0x2f
 800ae46:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800ae48:	68bb      	ldr	r3, [r7, #8]
 800ae4a:	3303      	adds	r3, #3
 800ae4c:	2200      	movs	r2, #0
 800ae4e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800ae50:	2300      	movs	r3, #0
 800ae52:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800ae54:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae56:	4618      	mov	r0, r3
 800ae58:	371c      	adds	r7, #28
 800ae5a:	46bd      	mov	sp, r7
 800ae5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae60:	4770      	bx	lr
 800ae62:	bf00      	nop
 800ae64:	20000838 	.word	0x20000838

0800ae68 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800ae68:	b580      	push	{r7, lr}
 800ae6a:	b082      	sub	sp, #8
 800ae6c:	af00      	add	r7, sp, #0
 800ae6e:	6078      	str	r0, [r7, #4]
 800ae70:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800ae72:	2200      	movs	r2, #0
 800ae74:	6839      	ldr	r1, [r7, #0]
 800ae76:	6878      	ldr	r0, [r7, #4]
 800ae78:	f7ff ffaa 	bl	800add0 <FATFS_LinkDriverEx>
 800ae7c:	4603      	mov	r3, r0
}
 800ae7e:	4618      	mov	r0, r3
 800ae80:	3708      	adds	r7, #8
 800ae82:	46bd      	mov	sp, r7
 800ae84:	bd80      	pop	{r7, pc}

0800ae86 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 800ae86:	b580      	push	{r7, lr}
 800ae88:	b084      	sub	sp, #16
 800ae8a:	af00      	add	r7, sp, #0
 800ae8c:	4603      	mov	r3, r0
 800ae8e:	6039      	str	r1, [r7, #0]
 800ae90:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 800ae92:	2200      	movs	r2, #0
 800ae94:	2101      	movs	r1, #1
 800ae96:	2001      	movs	r0, #1
 800ae98:	f000 f977 	bl	800b18a <osSemaphoreNew>
 800ae9c:	4602      	mov	r2, r0
 800ae9e:	683b      	ldr	r3, [r7, #0]
 800aea0:	601a      	str	r2, [r3, #0]
#endif

#endif
    ret = (*sobj != NULL);
 800aea2:	683b      	ldr	r3, [r7, #0]
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	bf14      	ite	ne
 800aeaa:	2301      	movne	r3, #1
 800aeac:	2300      	moveq	r3, #0
 800aeae:	b2db      	uxtb	r3, r3
 800aeb0:	60fb      	str	r3, [r7, #12]

    return ret;
 800aeb2:	68fb      	ldr	r3, [r7, #12]
}
 800aeb4:	4618      	mov	r0, r3
 800aeb6:	3710      	adds	r7, #16
 800aeb8:	46bd      	mov	sp, r7
 800aeba:	bd80      	pop	{r7, pc}

0800aebc <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 800aebc:	b580      	push	{r7, lr}
 800aebe:	b082      	sub	sp, #8
 800aec0:	af00      	add	r7, sp, #0
 800aec2:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 800aec4:	6878      	ldr	r0, [r7, #4]
 800aec6:	f000 fa9f 	bl	800b408 <osSemaphoreDelete>
#endif
    return 1;
 800aeca:	2301      	movs	r3, #1
}
 800aecc:	4618      	mov	r0, r3
 800aece:	3708      	adds	r7, #8
 800aed0:	46bd      	mov	sp, r7
 800aed2:	bd80      	pop	{r7, pc}

0800aed4 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 800aed4:	b580      	push	{r7, lr}
 800aed6:	b084      	sub	sp, #16
 800aed8:	af00      	add	r7, sp, #0
 800aeda:	6078      	str	r0, [r7, #4]
  int ret = 0;
 800aedc:	2300      	movs	r3, #0
 800aede:	60fb      	str	r3, [r7, #12]
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 800aee0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800aee4:	6878      	ldr	r0, [r7, #4]
 800aee6:	f000 f9d9 	bl	800b29c <osSemaphoreAcquire>
 800aeea:	4603      	mov	r3, r0
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d101      	bne.n	800aef4 <ff_req_grant+0x20>
#endif

#endif
  {
    ret = 1;
 800aef0:	2301      	movs	r3, #1
 800aef2:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800aef4:	68fb      	ldr	r3, [r7, #12]
}
 800aef6:	4618      	mov	r0, r3
 800aef8:	3710      	adds	r7, #16
 800aefa:	46bd      	mov	sp, r7
 800aefc:	bd80      	pop	{r7, pc}

0800aefe <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 800aefe:	b580      	push	{r7, lr}
 800af00:	b082      	sub	sp, #8
 800af02:	af00      	add	r7, sp, #0
 800af04:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 800af06:	6878      	ldr	r0, [r7, #4]
 800af08:	f000 fa1a 	bl	800b340 <osSemaphoreRelease>
#endif
}
 800af0c:	bf00      	nop
 800af0e:	3708      	adds	r7, #8
 800af10:	46bd      	mov	sp, r7
 800af12:	bd80      	pop	{r7, pc}

0800af14 <__NVIC_SetPriority>:
{
 800af14:	b480      	push	{r7}
 800af16:	b083      	sub	sp, #12
 800af18:	af00      	add	r7, sp, #0
 800af1a:	4603      	mov	r3, r0
 800af1c:	6039      	str	r1, [r7, #0]
 800af1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800af20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800af24:	2b00      	cmp	r3, #0
 800af26:	db0a      	blt.n	800af3e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800af28:	683b      	ldr	r3, [r7, #0]
 800af2a:	b2da      	uxtb	r2, r3
 800af2c:	490c      	ldr	r1, [pc, #48]	@ (800af60 <__NVIC_SetPriority+0x4c>)
 800af2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800af32:	0112      	lsls	r2, r2, #4
 800af34:	b2d2      	uxtb	r2, r2
 800af36:	440b      	add	r3, r1
 800af38:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800af3c:	e00a      	b.n	800af54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800af3e:	683b      	ldr	r3, [r7, #0]
 800af40:	b2da      	uxtb	r2, r3
 800af42:	4908      	ldr	r1, [pc, #32]	@ (800af64 <__NVIC_SetPriority+0x50>)
 800af44:	79fb      	ldrb	r3, [r7, #7]
 800af46:	f003 030f 	and.w	r3, r3, #15
 800af4a:	3b04      	subs	r3, #4
 800af4c:	0112      	lsls	r2, r2, #4
 800af4e:	b2d2      	uxtb	r2, r2
 800af50:	440b      	add	r3, r1
 800af52:	761a      	strb	r2, [r3, #24]
}
 800af54:	bf00      	nop
 800af56:	370c      	adds	r7, #12
 800af58:	46bd      	mov	sp, r7
 800af5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af5e:	4770      	bx	lr
 800af60:	e000e100 	.word	0xe000e100
 800af64:	e000ed00 	.word	0xe000ed00

0800af68 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800af68:	b580      	push	{r7, lr}
 800af6a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800af6c:	4b05      	ldr	r3, [pc, #20]	@ (800af84 <SysTick_Handler+0x1c>)
 800af6e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800af70:	f002 fb4a 	bl	800d608 <xTaskGetSchedulerState>
 800af74:	4603      	mov	r3, r0
 800af76:	2b01      	cmp	r3, #1
 800af78:	d001      	beq.n	800af7e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800af7a:	f003 fa45 	bl	800e408 <xPortSysTickHandler>
  }
}
 800af7e:	bf00      	nop
 800af80:	bd80      	pop	{r7, pc}
 800af82:	bf00      	nop
 800af84:	e000e010 	.word	0xe000e010

0800af88 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800af88:	b580      	push	{r7, lr}
 800af8a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800af8c:	2100      	movs	r1, #0
 800af8e:	f06f 0004 	mvn.w	r0, #4
 800af92:	f7ff ffbf 	bl	800af14 <__NVIC_SetPriority>
#endif
}
 800af96:	bf00      	nop
 800af98:	bd80      	pop	{r7, pc}
	...

0800af9c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800af9c:	b480      	push	{r7}
 800af9e:	b083      	sub	sp, #12
 800afa0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800afa2:	f3ef 8305 	mrs	r3, IPSR
 800afa6:	603b      	str	r3, [r7, #0]
  return(result);
 800afa8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d003      	beq.n	800afb6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800afae:	f06f 0305 	mvn.w	r3, #5
 800afb2:	607b      	str	r3, [r7, #4]
 800afb4:	e00c      	b.n	800afd0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800afb6:	4b0a      	ldr	r3, [pc, #40]	@ (800afe0 <osKernelInitialize+0x44>)
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d105      	bne.n	800afca <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800afbe:	4b08      	ldr	r3, [pc, #32]	@ (800afe0 <osKernelInitialize+0x44>)
 800afc0:	2201      	movs	r2, #1
 800afc2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800afc4:	2300      	movs	r3, #0
 800afc6:	607b      	str	r3, [r7, #4]
 800afc8:	e002      	b.n	800afd0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800afca:	f04f 33ff 	mov.w	r3, #4294967295
 800afce:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800afd0:	687b      	ldr	r3, [r7, #4]
}
 800afd2:	4618      	mov	r0, r3
 800afd4:	370c      	adds	r7, #12
 800afd6:	46bd      	mov	sp, r7
 800afd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afdc:	4770      	bx	lr
 800afde:	bf00      	nop
 800afe0:	20000844 	.word	0x20000844

0800afe4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800afe4:	b580      	push	{r7, lr}
 800afe6:	b082      	sub	sp, #8
 800afe8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800afea:	f3ef 8305 	mrs	r3, IPSR
 800afee:	603b      	str	r3, [r7, #0]
  return(result);
 800aff0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d003      	beq.n	800affe <osKernelStart+0x1a>
    stat = osErrorISR;
 800aff6:	f06f 0305 	mvn.w	r3, #5
 800affa:	607b      	str	r3, [r7, #4]
 800affc:	e010      	b.n	800b020 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800affe:	4b0b      	ldr	r3, [pc, #44]	@ (800b02c <osKernelStart+0x48>)
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	2b01      	cmp	r3, #1
 800b004:	d109      	bne.n	800b01a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800b006:	f7ff ffbf 	bl	800af88 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800b00a:	4b08      	ldr	r3, [pc, #32]	@ (800b02c <osKernelStart+0x48>)
 800b00c:	2202      	movs	r2, #2
 800b00e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800b010:	f001 fe96 	bl	800cd40 <vTaskStartScheduler>
      stat = osOK;
 800b014:	2300      	movs	r3, #0
 800b016:	607b      	str	r3, [r7, #4]
 800b018:	e002      	b.n	800b020 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800b01a:	f04f 33ff 	mov.w	r3, #4294967295
 800b01e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b020:	687b      	ldr	r3, [r7, #4]
}
 800b022:	4618      	mov	r0, r3
 800b024:	3708      	adds	r7, #8
 800b026:	46bd      	mov	sp, r7
 800b028:	bd80      	pop	{r7, pc}
 800b02a:	bf00      	nop
 800b02c:	20000844 	.word	0x20000844

0800b030 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800b030:	b580      	push	{r7, lr}
 800b032:	b08e      	sub	sp, #56	@ 0x38
 800b034:	af04      	add	r7, sp, #16
 800b036:	60f8      	str	r0, [r7, #12]
 800b038:	60b9      	str	r1, [r7, #8]
 800b03a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800b03c:	2300      	movs	r3, #0
 800b03e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b040:	f3ef 8305 	mrs	r3, IPSR
 800b044:	617b      	str	r3, [r7, #20]
  return(result);
 800b046:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d17e      	bne.n	800b14a <osThreadNew+0x11a>
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d07b      	beq.n	800b14a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800b052:	2380      	movs	r3, #128	@ 0x80
 800b054:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800b056:	2318      	movs	r3, #24
 800b058:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800b05a:	2300      	movs	r3, #0
 800b05c:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800b05e:	f04f 33ff 	mov.w	r3, #4294967295
 800b062:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	2b00      	cmp	r3, #0
 800b068:	d045      	beq.n	800b0f6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d002      	beq.n	800b078 <osThreadNew+0x48>
        name = attr->name;
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	699b      	ldr	r3, [r3, #24]
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d002      	beq.n	800b086 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	699b      	ldr	r3, [r3, #24]
 800b084:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800b086:	69fb      	ldr	r3, [r7, #28]
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d008      	beq.n	800b09e <osThreadNew+0x6e>
 800b08c:	69fb      	ldr	r3, [r7, #28]
 800b08e:	2b38      	cmp	r3, #56	@ 0x38
 800b090:	d805      	bhi.n	800b09e <osThreadNew+0x6e>
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	685b      	ldr	r3, [r3, #4]
 800b096:	f003 0301 	and.w	r3, r3, #1
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d001      	beq.n	800b0a2 <osThreadNew+0x72>
        return (NULL);
 800b09e:	2300      	movs	r3, #0
 800b0a0:	e054      	b.n	800b14c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	695b      	ldr	r3, [r3, #20]
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d003      	beq.n	800b0b2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	695b      	ldr	r3, [r3, #20]
 800b0ae:	089b      	lsrs	r3, r3, #2
 800b0b0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	689b      	ldr	r3, [r3, #8]
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d00e      	beq.n	800b0d8 <osThreadNew+0xa8>
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	68db      	ldr	r3, [r3, #12]
 800b0be:	2ba7      	cmp	r3, #167	@ 0xa7
 800b0c0:	d90a      	bls.n	800b0d8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d006      	beq.n	800b0d8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	695b      	ldr	r3, [r3, #20]
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d002      	beq.n	800b0d8 <osThreadNew+0xa8>
        mem = 1;
 800b0d2:	2301      	movs	r3, #1
 800b0d4:	61bb      	str	r3, [r7, #24]
 800b0d6:	e010      	b.n	800b0fa <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	689b      	ldr	r3, [r3, #8]
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d10c      	bne.n	800b0fa <osThreadNew+0xca>
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	68db      	ldr	r3, [r3, #12]
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d108      	bne.n	800b0fa <osThreadNew+0xca>
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	691b      	ldr	r3, [r3, #16]
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d104      	bne.n	800b0fa <osThreadNew+0xca>
          mem = 0;
 800b0f0:	2300      	movs	r3, #0
 800b0f2:	61bb      	str	r3, [r7, #24]
 800b0f4:	e001      	b.n	800b0fa <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800b0f6:	2300      	movs	r3, #0
 800b0f8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800b0fa:	69bb      	ldr	r3, [r7, #24]
 800b0fc:	2b01      	cmp	r3, #1
 800b0fe:	d110      	bne.n	800b122 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800b104:	687a      	ldr	r2, [r7, #4]
 800b106:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b108:	9202      	str	r2, [sp, #8]
 800b10a:	9301      	str	r3, [sp, #4]
 800b10c:	69fb      	ldr	r3, [r7, #28]
 800b10e:	9300      	str	r3, [sp, #0]
 800b110:	68bb      	ldr	r3, [r7, #8]
 800b112:	6a3a      	ldr	r2, [r7, #32]
 800b114:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b116:	68f8      	ldr	r0, [r7, #12]
 800b118:	f001 fc1e 	bl	800c958 <xTaskCreateStatic>
 800b11c:	4603      	mov	r3, r0
 800b11e:	613b      	str	r3, [r7, #16]
 800b120:	e013      	b.n	800b14a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800b122:	69bb      	ldr	r3, [r7, #24]
 800b124:	2b00      	cmp	r3, #0
 800b126:	d110      	bne.n	800b14a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800b128:	6a3b      	ldr	r3, [r7, #32]
 800b12a:	b29a      	uxth	r2, r3
 800b12c:	f107 0310 	add.w	r3, r7, #16
 800b130:	9301      	str	r3, [sp, #4]
 800b132:	69fb      	ldr	r3, [r7, #28]
 800b134:	9300      	str	r3, [sp, #0]
 800b136:	68bb      	ldr	r3, [r7, #8]
 800b138:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b13a:	68f8      	ldr	r0, [r7, #12]
 800b13c:	f001 fc6c 	bl	800ca18 <xTaskCreate>
 800b140:	4603      	mov	r3, r0
 800b142:	2b01      	cmp	r3, #1
 800b144:	d001      	beq.n	800b14a <osThreadNew+0x11a>
            hTask = NULL;
 800b146:	2300      	movs	r3, #0
 800b148:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800b14a:	693b      	ldr	r3, [r7, #16]
}
 800b14c:	4618      	mov	r0, r3
 800b14e:	3728      	adds	r7, #40	@ 0x28
 800b150:	46bd      	mov	sp, r7
 800b152:	bd80      	pop	{r7, pc}

0800b154 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800b154:	b580      	push	{r7, lr}
 800b156:	b084      	sub	sp, #16
 800b158:	af00      	add	r7, sp, #0
 800b15a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b15c:	f3ef 8305 	mrs	r3, IPSR
 800b160:	60bb      	str	r3, [r7, #8]
  return(result);
 800b162:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b164:	2b00      	cmp	r3, #0
 800b166:	d003      	beq.n	800b170 <osDelay+0x1c>
    stat = osErrorISR;
 800b168:	f06f 0305 	mvn.w	r3, #5
 800b16c:	60fb      	str	r3, [r7, #12]
 800b16e:	e007      	b.n	800b180 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800b170:	2300      	movs	r3, #0
 800b172:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	2b00      	cmp	r3, #0
 800b178:	d002      	beq.n	800b180 <osDelay+0x2c>
      vTaskDelay(ticks);
 800b17a:	6878      	ldr	r0, [r7, #4]
 800b17c:	f001 fdaa 	bl	800ccd4 <vTaskDelay>
    }
  }

  return (stat);
 800b180:	68fb      	ldr	r3, [r7, #12]
}
 800b182:	4618      	mov	r0, r3
 800b184:	3710      	adds	r7, #16
 800b186:	46bd      	mov	sp, r7
 800b188:	bd80      	pop	{r7, pc}

0800b18a <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800b18a:	b580      	push	{r7, lr}
 800b18c:	b08a      	sub	sp, #40	@ 0x28
 800b18e:	af02      	add	r7, sp, #8
 800b190:	60f8      	str	r0, [r7, #12]
 800b192:	60b9      	str	r1, [r7, #8]
 800b194:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800b196:	2300      	movs	r3, #0
 800b198:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b19a:	f3ef 8305 	mrs	r3, IPSR
 800b19e:	613b      	str	r3, [r7, #16]
  return(result);
 800b1a0:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d175      	bne.n	800b292 <osSemaphoreNew+0x108>
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d072      	beq.n	800b292 <osSemaphoreNew+0x108>
 800b1ac:	68ba      	ldr	r2, [r7, #8]
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	429a      	cmp	r2, r3
 800b1b2:	d86e      	bhi.n	800b292 <osSemaphoreNew+0x108>
    mem = -1;
 800b1b4:	f04f 33ff 	mov.w	r3, #4294967295
 800b1b8:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d015      	beq.n	800b1ec <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	689b      	ldr	r3, [r3, #8]
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d006      	beq.n	800b1d6 <osSemaphoreNew+0x4c>
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	68db      	ldr	r3, [r3, #12]
 800b1cc:	2b4f      	cmp	r3, #79	@ 0x4f
 800b1ce:	d902      	bls.n	800b1d6 <osSemaphoreNew+0x4c>
        mem = 1;
 800b1d0:	2301      	movs	r3, #1
 800b1d2:	61bb      	str	r3, [r7, #24]
 800b1d4:	e00c      	b.n	800b1f0 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	689b      	ldr	r3, [r3, #8]
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d108      	bne.n	800b1f0 <osSemaphoreNew+0x66>
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	68db      	ldr	r3, [r3, #12]
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d104      	bne.n	800b1f0 <osSemaphoreNew+0x66>
          mem = 0;
 800b1e6:	2300      	movs	r3, #0
 800b1e8:	61bb      	str	r3, [r7, #24]
 800b1ea:	e001      	b.n	800b1f0 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800b1ec:	2300      	movs	r3, #0
 800b1ee:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800b1f0:	69bb      	ldr	r3, [r7, #24]
 800b1f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1f6:	d04c      	beq.n	800b292 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	2b01      	cmp	r3, #1
 800b1fc:	d128      	bne.n	800b250 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800b1fe:	69bb      	ldr	r3, [r7, #24]
 800b200:	2b01      	cmp	r3, #1
 800b202:	d10a      	bne.n	800b21a <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	689b      	ldr	r3, [r3, #8]
 800b208:	2203      	movs	r2, #3
 800b20a:	9200      	str	r2, [sp, #0]
 800b20c:	2200      	movs	r2, #0
 800b20e:	2100      	movs	r1, #0
 800b210:	2001      	movs	r0, #1
 800b212:	f000 fba1 	bl	800b958 <xQueueGenericCreateStatic>
 800b216:	61f8      	str	r0, [r7, #28]
 800b218:	e005      	b.n	800b226 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800b21a:	2203      	movs	r2, #3
 800b21c:	2100      	movs	r1, #0
 800b21e:	2001      	movs	r0, #1
 800b220:	f000 fc17 	bl	800ba52 <xQueueGenericCreate>
 800b224:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800b226:	69fb      	ldr	r3, [r7, #28]
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d022      	beq.n	800b272 <osSemaphoreNew+0xe8>
 800b22c:	68bb      	ldr	r3, [r7, #8]
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d01f      	beq.n	800b272 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800b232:	2300      	movs	r3, #0
 800b234:	2200      	movs	r2, #0
 800b236:	2100      	movs	r1, #0
 800b238:	69f8      	ldr	r0, [r7, #28]
 800b23a:	f000 fcd7 	bl	800bbec <xQueueGenericSend>
 800b23e:	4603      	mov	r3, r0
 800b240:	2b01      	cmp	r3, #1
 800b242:	d016      	beq.n	800b272 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800b244:	69f8      	ldr	r0, [r7, #28]
 800b246:	f001 f9b3 	bl	800c5b0 <vQueueDelete>
            hSemaphore = NULL;
 800b24a:	2300      	movs	r3, #0
 800b24c:	61fb      	str	r3, [r7, #28]
 800b24e:	e010      	b.n	800b272 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800b250:	69bb      	ldr	r3, [r7, #24]
 800b252:	2b01      	cmp	r3, #1
 800b254:	d108      	bne.n	800b268 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	689b      	ldr	r3, [r3, #8]
 800b25a:	461a      	mov	r2, r3
 800b25c:	68b9      	ldr	r1, [r7, #8]
 800b25e:	68f8      	ldr	r0, [r7, #12]
 800b260:	f000 fc55 	bl	800bb0e <xQueueCreateCountingSemaphoreStatic>
 800b264:	61f8      	str	r0, [r7, #28]
 800b266:	e004      	b.n	800b272 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800b268:	68b9      	ldr	r1, [r7, #8]
 800b26a:	68f8      	ldr	r0, [r7, #12]
 800b26c:	f000 fc88 	bl	800bb80 <xQueueCreateCountingSemaphore>
 800b270:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800b272:	69fb      	ldr	r3, [r7, #28]
 800b274:	2b00      	cmp	r3, #0
 800b276:	d00c      	beq.n	800b292 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d003      	beq.n	800b286 <osSemaphoreNew+0xfc>
          name = attr->name;
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	617b      	str	r3, [r7, #20]
 800b284:	e001      	b.n	800b28a <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800b286:	2300      	movs	r3, #0
 800b288:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800b28a:	6979      	ldr	r1, [r7, #20]
 800b28c:	69f8      	ldr	r0, [r7, #28]
 800b28e:	f001 fadb 	bl	800c848 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800b292:	69fb      	ldr	r3, [r7, #28]
}
 800b294:	4618      	mov	r0, r3
 800b296:	3720      	adds	r7, #32
 800b298:	46bd      	mov	sp, r7
 800b29a:	bd80      	pop	{r7, pc}

0800b29c <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800b29c:	b580      	push	{r7, lr}
 800b29e:	b086      	sub	sp, #24
 800b2a0:	af00      	add	r7, sp, #0
 800b2a2:	6078      	str	r0, [r7, #4]
 800b2a4:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800b2aa:	2300      	movs	r3, #0
 800b2ac:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800b2ae:	693b      	ldr	r3, [r7, #16]
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d103      	bne.n	800b2bc <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800b2b4:	f06f 0303 	mvn.w	r3, #3
 800b2b8:	617b      	str	r3, [r7, #20]
 800b2ba:	e039      	b.n	800b330 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b2bc:	f3ef 8305 	mrs	r3, IPSR
 800b2c0:	60fb      	str	r3, [r7, #12]
  return(result);
 800b2c2:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d022      	beq.n	800b30e <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800b2c8:	683b      	ldr	r3, [r7, #0]
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d003      	beq.n	800b2d6 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800b2ce:	f06f 0303 	mvn.w	r3, #3
 800b2d2:	617b      	str	r3, [r7, #20]
 800b2d4:	e02c      	b.n	800b330 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800b2d6:	2300      	movs	r3, #0
 800b2d8:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800b2da:	f107 0308 	add.w	r3, r7, #8
 800b2de:	461a      	mov	r2, r3
 800b2e0:	2100      	movs	r1, #0
 800b2e2:	6938      	ldr	r0, [r7, #16]
 800b2e4:	f001 f8a4 	bl	800c430 <xQueueReceiveFromISR>
 800b2e8:	4603      	mov	r3, r0
 800b2ea:	2b01      	cmp	r3, #1
 800b2ec:	d003      	beq.n	800b2f6 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800b2ee:	f06f 0302 	mvn.w	r3, #2
 800b2f2:	617b      	str	r3, [r7, #20]
 800b2f4:	e01c      	b.n	800b330 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800b2f6:	68bb      	ldr	r3, [r7, #8]
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d019      	beq.n	800b330 <osSemaphoreAcquire+0x94>
 800b2fc:	4b0f      	ldr	r3, [pc, #60]	@ (800b33c <osSemaphoreAcquire+0xa0>)
 800b2fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b302:	601a      	str	r2, [r3, #0]
 800b304:	f3bf 8f4f 	dsb	sy
 800b308:	f3bf 8f6f 	isb	sy
 800b30c:	e010      	b.n	800b330 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800b30e:	6839      	ldr	r1, [r7, #0]
 800b310:	6938      	ldr	r0, [r7, #16]
 800b312:	f000 ff7d 	bl	800c210 <xQueueSemaphoreTake>
 800b316:	4603      	mov	r3, r0
 800b318:	2b01      	cmp	r3, #1
 800b31a:	d009      	beq.n	800b330 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800b31c:	683b      	ldr	r3, [r7, #0]
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d003      	beq.n	800b32a <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800b322:	f06f 0301 	mvn.w	r3, #1
 800b326:	617b      	str	r3, [r7, #20]
 800b328:	e002      	b.n	800b330 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800b32a:	f06f 0302 	mvn.w	r3, #2
 800b32e:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800b330:	697b      	ldr	r3, [r7, #20]
}
 800b332:	4618      	mov	r0, r3
 800b334:	3718      	adds	r7, #24
 800b336:	46bd      	mov	sp, r7
 800b338:	bd80      	pop	{r7, pc}
 800b33a:	bf00      	nop
 800b33c:	e000ed04 	.word	0xe000ed04

0800b340 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800b340:	b580      	push	{r7, lr}
 800b342:	b086      	sub	sp, #24
 800b344:	af00      	add	r7, sp, #0
 800b346:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800b34c:	2300      	movs	r3, #0
 800b34e:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800b350:	693b      	ldr	r3, [r7, #16]
 800b352:	2b00      	cmp	r3, #0
 800b354:	d103      	bne.n	800b35e <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800b356:	f06f 0303 	mvn.w	r3, #3
 800b35a:	617b      	str	r3, [r7, #20]
 800b35c:	e02c      	b.n	800b3b8 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b35e:	f3ef 8305 	mrs	r3, IPSR
 800b362:	60fb      	str	r3, [r7, #12]
  return(result);
 800b364:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800b366:	2b00      	cmp	r3, #0
 800b368:	d01a      	beq.n	800b3a0 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800b36a:	2300      	movs	r3, #0
 800b36c:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800b36e:	f107 0308 	add.w	r3, r7, #8
 800b372:	4619      	mov	r1, r3
 800b374:	6938      	ldr	r0, [r7, #16]
 800b376:	f000 fdd9 	bl	800bf2c <xQueueGiveFromISR>
 800b37a:	4603      	mov	r3, r0
 800b37c:	2b01      	cmp	r3, #1
 800b37e:	d003      	beq.n	800b388 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800b380:	f06f 0302 	mvn.w	r3, #2
 800b384:	617b      	str	r3, [r7, #20]
 800b386:	e017      	b.n	800b3b8 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800b388:	68bb      	ldr	r3, [r7, #8]
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d014      	beq.n	800b3b8 <osSemaphoreRelease+0x78>
 800b38e:	4b0d      	ldr	r3, [pc, #52]	@ (800b3c4 <osSemaphoreRelease+0x84>)
 800b390:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b394:	601a      	str	r2, [r3, #0]
 800b396:	f3bf 8f4f 	dsb	sy
 800b39a:	f3bf 8f6f 	isb	sy
 800b39e:	e00b      	b.n	800b3b8 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800b3a0:	2300      	movs	r3, #0
 800b3a2:	2200      	movs	r2, #0
 800b3a4:	2100      	movs	r1, #0
 800b3a6:	6938      	ldr	r0, [r7, #16]
 800b3a8:	f000 fc20 	bl	800bbec <xQueueGenericSend>
 800b3ac:	4603      	mov	r3, r0
 800b3ae:	2b01      	cmp	r3, #1
 800b3b0:	d002      	beq.n	800b3b8 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800b3b2:	f06f 0302 	mvn.w	r3, #2
 800b3b6:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800b3b8:	697b      	ldr	r3, [r7, #20]
}
 800b3ba:	4618      	mov	r0, r3
 800b3bc:	3718      	adds	r7, #24
 800b3be:	46bd      	mov	sp, r7
 800b3c0:	bd80      	pop	{r7, pc}
 800b3c2:	bf00      	nop
 800b3c4:	e000ed04 	.word	0xe000ed04

0800b3c8 <osSemaphoreGetCount>:

uint32_t osSemaphoreGetCount (osSemaphoreId_t semaphore_id) {
 800b3c8:	b580      	push	{r7, lr}
 800b3ca:	b086      	sub	sp, #24
 800b3cc:	af00      	add	r7, sp, #0
 800b3ce:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	613b      	str	r3, [r7, #16]
  uint32_t count;

  if (hSemaphore == NULL) {
 800b3d4:	693b      	ldr	r3, [r7, #16]
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d102      	bne.n	800b3e0 <osSemaphoreGetCount+0x18>
    count = 0U;
 800b3da:	2300      	movs	r3, #0
 800b3dc:	617b      	str	r3, [r7, #20]
 800b3de:	e00e      	b.n	800b3fe <osSemaphoreGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b3e0:	f3ef 8305 	mrs	r3, IPSR
 800b3e4:	60fb      	str	r3, [r7, #12]
  return(result);
 800b3e6:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d004      	beq.n	800b3f6 <osSemaphoreGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hSemaphore);
 800b3ec:	6938      	ldr	r0, [r7, #16]
 800b3ee:	f001 f8c0 	bl	800c572 <uxQueueMessagesWaitingFromISR>
 800b3f2:	6178      	str	r0, [r7, #20]
 800b3f4:	e003      	b.n	800b3fe <osSemaphoreGetCount+0x36>
  } else {
    count = (uint32_t)uxSemaphoreGetCount (hSemaphore);
 800b3f6:	6938      	ldr	r0, [r7, #16]
 800b3f8:	f001 f89c 	bl	800c534 <uxQueueMessagesWaiting>
 800b3fc:	6178      	str	r0, [r7, #20]
  }

  return (count);
 800b3fe:	697b      	ldr	r3, [r7, #20]
}
 800b400:	4618      	mov	r0, r3
 800b402:	3718      	adds	r7, #24
 800b404:	46bd      	mov	sp, r7
 800b406:	bd80      	pop	{r7, pc}

0800b408 <osSemaphoreDelete>:

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 800b408:	b580      	push	{r7, lr}
 800b40a:	b086      	sub	sp, #24
 800b40c:	af00      	add	r7, sp, #0
 800b40e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b414:	f3ef 8305 	mrs	r3, IPSR
 800b418:	60fb      	str	r3, [r7, #12]
  return(result);
 800b41a:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d003      	beq.n	800b428 <osSemaphoreDelete+0x20>
    stat = osErrorISR;
 800b420:	f06f 0305 	mvn.w	r3, #5
 800b424:	617b      	str	r3, [r7, #20]
 800b426:	e00e      	b.n	800b446 <osSemaphoreDelete+0x3e>
  }
  else if (hSemaphore == NULL) {
 800b428:	693b      	ldr	r3, [r7, #16]
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d103      	bne.n	800b436 <osSemaphoreDelete+0x2e>
    stat = osErrorParameter;
 800b42e:	f06f 0303 	mvn.w	r3, #3
 800b432:	617b      	str	r3, [r7, #20]
 800b434:	e007      	b.n	800b446 <osSemaphoreDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 800b436:	6938      	ldr	r0, [r7, #16]
 800b438:	f001 fa30 	bl	800c89c <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 800b43c:	2300      	movs	r3, #0
 800b43e:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hSemaphore);
 800b440:	6938      	ldr	r0, [r7, #16]
 800b442:	f001 f8b5 	bl	800c5b0 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 800b446:	697b      	ldr	r3, [r7, #20]
}
 800b448:	4618      	mov	r0, r3
 800b44a:	3718      	adds	r7, #24
 800b44c:	46bd      	mov	sp, r7
 800b44e:	bd80      	pop	{r7, pc}

0800b450 <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800b450:	b580      	push	{r7, lr}
 800b452:	b08a      	sub	sp, #40	@ 0x28
 800b454:	af02      	add	r7, sp, #8
 800b456:	60f8      	str	r0, [r7, #12]
 800b458:	60b9      	str	r1, [r7, #8]
 800b45a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800b45c:	2300      	movs	r3, #0
 800b45e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b460:	f3ef 8305 	mrs	r3, IPSR
 800b464:	613b      	str	r3, [r7, #16]
  return(result);
 800b466:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d15f      	bne.n	800b52c <osMessageQueueNew+0xdc>
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d05c      	beq.n	800b52c <osMessageQueueNew+0xdc>
 800b472:	68bb      	ldr	r3, [r7, #8]
 800b474:	2b00      	cmp	r3, #0
 800b476:	d059      	beq.n	800b52c <osMessageQueueNew+0xdc>
    mem = -1;
 800b478:	f04f 33ff 	mov.w	r3, #4294967295
 800b47c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	2b00      	cmp	r3, #0
 800b482:	d029      	beq.n	800b4d8 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	689b      	ldr	r3, [r3, #8]
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d012      	beq.n	800b4b2 <osMessageQueueNew+0x62>
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	68db      	ldr	r3, [r3, #12]
 800b490:	2b4f      	cmp	r3, #79	@ 0x4f
 800b492:	d90e      	bls.n	800b4b2 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d00a      	beq.n	800b4b2 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	695a      	ldr	r2, [r3, #20]
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	68b9      	ldr	r1, [r7, #8]
 800b4a4:	fb01 f303 	mul.w	r3, r1, r3
 800b4a8:	429a      	cmp	r2, r3
 800b4aa:	d302      	bcc.n	800b4b2 <osMessageQueueNew+0x62>
        mem = 1;
 800b4ac:	2301      	movs	r3, #1
 800b4ae:	61bb      	str	r3, [r7, #24]
 800b4b0:	e014      	b.n	800b4dc <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	689b      	ldr	r3, [r3, #8]
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d110      	bne.n	800b4dc <osMessageQueueNew+0x8c>
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	68db      	ldr	r3, [r3, #12]
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d10c      	bne.n	800b4dc <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d108      	bne.n	800b4dc <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	695b      	ldr	r3, [r3, #20]
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d104      	bne.n	800b4dc <osMessageQueueNew+0x8c>
          mem = 0;
 800b4d2:	2300      	movs	r3, #0
 800b4d4:	61bb      	str	r3, [r7, #24]
 800b4d6:	e001      	b.n	800b4dc <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800b4d8:	2300      	movs	r3, #0
 800b4da:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800b4dc:	69bb      	ldr	r3, [r7, #24]
 800b4de:	2b01      	cmp	r3, #1
 800b4e0:	d10b      	bne.n	800b4fa <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	691a      	ldr	r2, [r3, #16]
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	689b      	ldr	r3, [r3, #8]
 800b4ea:	2100      	movs	r1, #0
 800b4ec:	9100      	str	r1, [sp, #0]
 800b4ee:	68b9      	ldr	r1, [r7, #8]
 800b4f0:	68f8      	ldr	r0, [r7, #12]
 800b4f2:	f000 fa31 	bl	800b958 <xQueueGenericCreateStatic>
 800b4f6:	61f8      	str	r0, [r7, #28]
 800b4f8:	e008      	b.n	800b50c <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800b4fa:	69bb      	ldr	r3, [r7, #24]
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d105      	bne.n	800b50c <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800b500:	2200      	movs	r2, #0
 800b502:	68b9      	ldr	r1, [r7, #8]
 800b504:	68f8      	ldr	r0, [r7, #12]
 800b506:	f000 faa4 	bl	800ba52 <xQueueGenericCreate>
 800b50a:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800b50c:	69fb      	ldr	r3, [r7, #28]
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d00c      	beq.n	800b52c <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	2b00      	cmp	r3, #0
 800b516:	d003      	beq.n	800b520 <osMessageQueueNew+0xd0>
        name = attr->name;
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	617b      	str	r3, [r7, #20]
 800b51e:	e001      	b.n	800b524 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800b520:	2300      	movs	r3, #0
 800b522:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800b524:	6979      	ldr	r1, [r7, #20]
 800b526:	69f8      	ldr	r0, [r7, #28]
 800b528:	f001 f98e 	bl	800c848 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800b52c:	69fb      	ldr	r3, [r7, #28]
}
 800b52e:	4618      	mov	r0, r3
 800b530:	3720      	adds	r7, #32
 800b532:	46bd      	mov	sp, r7
 800b534:	bd80      	pop	{r7, pc}
	...

0800b538 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800b538:	b580      	push	{r7, lr}
 800b53a:	b088      	sub	sp, #32
 800b53c:	af00      	add	r7, sp, #0
 800b53e:	60f8      	str	r0, [r7, #12]
 800b540:	60b9      	str	r1, [r7, #8]
 800b542:	603b      	str	r3, [r7, #0]
 800b544:	4613      	mov	r3, r2
 800b546:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800b54c:	2300      	movs	r3, #0
 800b54e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b550:	f3ef 8305 	mrs	r3, IPSR
 800b554:	617b      	str	r3, [r7, #20]
  return(result);
 800b556:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d028      	beq.n	800b5ae <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800b55c:	69bb      	ldr	r3, [r7, #24]
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d005      	beq.n	800b56e <osMessageQueuePut+0x36>
 800b562:	68bb      	ldr	r3, [r7, #8]
 800b564:	2b00      	cmp	r3, #0
 800b566:	d002      	beq.n	800b56e <osMessageQueuePut+0x36>
 800b568:	683b      	ldr	r3, [r7, #0]
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d003      	beq.n	800b576 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800b56e:	f06f 0303 	mvn.w	r3, #3
 800b572:	61fb      	str	r3, [r7, #28]
 800b574:	e038      	b.n	800b5e8 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800b576:	2300      	movs	r3, #0
 800b578:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800b57a:	f107 0210 	add.w	r2, r7, #16
 800b57e:	2300      	movs	r3, #0
 800b580:	68b9      	ldr	r1, [r7, #8]
 800b582:	69b8      	ldr	r0, [r7, #24]
 800b584:	f000 fc34 	bl	800bdf0 <xQueueGenericSendFromISR>
 800b588:	4603      	mov	r3, r0
 800b58a:	2b01      	cmp	r3, #1
 800b58c:	d003      	beq.n	800b596 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800b58e:	f06f 0302 	mvn.w	r3, #2
 800b592:	61fb      	str	r3, [r7, #28]
 800b594:	e028      	b.n	800b5e8 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800b596:	693b      	ldr	r3, [r7, #16]
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d025      	beq.n	800b5e8 <osMessageQueuePut+0xb0>
 800b59c:	4b15      	ldr	r3, [pc, #84]	@ (800b5f4 <osMessageQueuePut+0xbc>)
 800b59e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b5a2:	601a      	str	r2, [r3, #0]
 800b5a4:	f3bf 8f4f 	dsb	sy
 800b5a8:	f3bf 8f6f 	isb	sy
 800b5ac:	e01c      	b.n	800b5e8 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800b5ae:	69bb      	ldr	r3, [r7, #24]
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d002      	beq.n	800b5ba <osMessageQueuePut+0x82>
 800b5b4:	68bb      	ldr	r3, [r7, #8]
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d103      	bne.n	800b5c2 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800b5ba:	f06f 0303 	mvn.w	r3, #3
 800b5be:	61fb      	str	r3, [r7, #28]
 800b5c0:	e012      	b.n	800b5e8 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800b5c2:	2300      	movs	r3, #0
 800b5c4:	683a      	ldr	r2, [r7, #0]
 800b5c6:	68b9      	ldr	r1, [r7, #8]
 800b5c8:	69b8      	ldr	r0, [r7, #24]
 800b5ca:	f000 fb0f 	bl	800bbec <xQueueGenericSend>
 800b5ce:	4603      	mov	r3, r0
 800b5d0:	2b01      	cmp	r3, #1
 800b5d2:	d009      	beq.n	800b5e8 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800b5d4:	683b      	ldr	r3, [r7, #0]
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d003      	beq.n	800b5e2 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800b5da:	f06f 0301 	mvn.w	r3, #1
 800b5de:	61fb      	str	r3, [r7, #28]
 800b5e0:	e002      	b.n	800b5e8 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800b5e2:	f06f 0302 	mvn.w	r3, #2
 800b5e6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800b5e8:	69fb      	ldr	r3, [r7, #28]
}
 800b5ea:	4618      	mov	r0, r3
 800b5ec:	3720      	adds	r7, #32
 800b5ee:	46bd      	mov	sp, r7
 800b5f0:	bd80      	pop	{r7, pc}
 800b5f2:	bf00      	nop
 800b5f4:	e000ed04 	.word	0xe000ed04

0800b5f8 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800b5f8:	b580      	push	{r7, lr}
 800b5fa:	b088      	sub	sp, #32
 800b5fc:	af00      	add	r7, sp, #0
 800b5fe:	60f8      	str	r0, [r7, #12]
 800b600:	60b9      	str	r1, [r7, #8]
 800b602:	607a      	str	r2, [r7, #4]
 800b604:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800b60a:	2300      	movs	r3, #0
 800b60c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b60e:	f3ef 8305 	mrs	r3, IPSR
 800b612:	617b      	str	r3, [r7, #20]
  return(result);
 800b614:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800b616:	2b00      	cmp	r3, #0
 800b618:	d028      	beq.n	800b66c <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800b61a:	69bb      	ldr	r3, [r7, #24]
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d005      	beq.n	800b62c <osMessageQueueGet+0x34>
 800b620:	68bb      	ldr	r3, [r7, #8]
 800b622:	2b00      	cmp	r3, #0
 800b624:	d002      	beq.n	800b62c <osMessageQueueGet+0x34>
 800b626:	683b      	ldr	r3, [r7, #0]
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d003      	beq.n	800b634 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800b62c:	f06f 0303 	mvn.w	r3, #3
 800b630:	61fb      	str	r3, [r7, #28]
 800b632:	e037      	b.n	800b6a4 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800b634:	2300      	movs	r3, #0
 800b636:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800b638:	f107 0310 	add.w	r3, r7, #16
 800b63c:	461a      	mov	r2, r3
 800b63e:	68b9      	ldr	r1, [r7, #8]
 800b640:	69b8      	ldr	r0, [r7, #24]
 800b642:	f000 fef5 	bl	800c430 <xQueueReceiveFromISR>
 800b646:	4603      	mov	r3, r0
 800b648:	2b01      	cmp	r3, #1
 800b64a:	d003      	beq.n	800b654 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800b64c:	f06f 0302 	mvn.w	r3, #2
 800b650:	61fb      	str	r3, [r7, #28]
 800b652:	e027      	b.n	800b6a4 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800b654:	693b      	ldr	r3, [r7, #16]
 800b656:	2b00      	cmp	r3, #0
 800b658:	d024      	beq.n	800b6a4 <osMessageQueueGet+0xac>
 800b65a:	4b15      	ldr	r3, [pc, #84]	@ (800b6b0 <osMessageQueueGet+0xb8>)
 800b65c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b660:	601a      	str	r2, [r3, #0]
 800b662:	f3bf 8f4f 	dsb	sy
 800b666:	f3bf 8f6f 	isb	sy
 800b66a:	e01b      	b.n	800b6a4 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800b66c:	69bb      	ldr	r3, [r7, #24]
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d002      	beq.n	800b678 <osMessageQueueGet+0x80>
 800b672:	68bb      	ldr	r3, [r7, #8]
 800b674:	2b00      	cmp	r3, #0
 800b676:	d103      	bne.n	800b680 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800b678:	f06f 0303 	mvn.w	r3, #3
 800b67c:	61fb      	str	r3, [r7, #28]
 800b67e:	e011      	b.n	800b6a4 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800b680:	683a      	ldr	r2, [r7, #0]
 800b682:	68b9      	ldr	r1, [r7, #8]
 800b684:	69b8      	ldr	r0, [r7, #24]
 800b686:	f000 fce1 	bl	800c04c <xQueueReceive>
 800b68a:	4603      	mov	r3, r0
 800b68c:	2b01      	cmp	r3, #1
 800b68e:	d009      	beq.n	800b6a4 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800b690:	683b      	ldr	r3, [r7, #0]
 800b692:	2b00      	cmp	r3, #0
 800b694:	d003      	beq.n	800b69e <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800b696:	f06f 0301 	mvn.w	r3, #1
 800b69a:	61fb      	str	r3, [r7, #28]
 800b69c:	e002      	b.n	800b6a4 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800b69e:	f06f 0302 	mvn.w	r3, #2
 800b6a2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800b6a4:	69fb      	ldr	r3, [r7, #28]
}
 800b6a6:	4618      	mov	r0, r3
 800b6a8:	3720      	adds	r7, #32
 800b6aa:	46bd      	mov	sp, r7
 800b6ac:	bd80      	pop	{r7, pc}
 800b6ae:	bf00      	nop
 800b6b0:	e000ed04 	.word	0xe000ed04

0800b6b4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800b6b4:	b480      	push	{r7}
 800b6b6:	b085      	sub	sp, #20
 800b6b8:	af00      	add	r7, sp, #0
 800b6ba:	60f8      	str	r0, [r7, #12]
 800b6bc:	60b9      	str	r1, [r7, #8]
 800b6be:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	4a07      	ldr	r2, [pc, #28]	@ (800b6e0 <vApplicationGetIdleTaskMemory+0x2c>)
 800b6c4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800b6c6:	68bb      	ldr	r3, [r7, #8]
 800b6c8:	4a06      	ldr	r2, [pc, #24]	@ (800b6e4 <vApplicationGetIdleTaskMemory+0x30>)
 800b6ca:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	2280      	movs	r2, #128	@ 0x80
 800b6d0:	601a      	str	r2, [r3, #0]
}
 800b6d2:	bf00      	nop
 800b6d4:	3714      	adds	r7, #20
 800b6d6:	46bd      	mov	sp, r7
 800b6d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6dc:	4770      	bx	lr
 800b6de:	bf00      	nop
 800b6e0:	20000848 	.word	0x20000848
 800b6e4:	200008f0 	.word	0x200008f0

0800b6e8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800b6e8:	b480      	push	{r7}
 800b6ea:	b085      	sub	sp, #20
 800b6ec:	af00      	add	r7, sp, #0
 800b6ee:	60f8      	str	r0, [r7, #12]
 800b6f0:	60b9      	str	r1, [r7, #8]
 800b6f2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	4a07      	ldr	r2, [pc, #28]	@ (800b714 <vApplicationGetTimerTaskMemory+0x2c>)
 800b6f8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800b6fa:	68bb      	ldr	r3, [r7, #8]
 800b6fc:	4a06      	ldr	r2, [pc, #24]	@ (800b718 <vApplicationGetTimerTaskMemory+0x30>)
 800b6fe:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800b706:	601a      	str	r2, [r3, #0]
}
 800b708:	bf00      	nop
 800b70a:	3714      	adds	r7, #20
 800b70c:	46bd      	mov	sp, r7
 800b70e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b712:	4770      	bx	lr
 800b714:	20000af0 	.word	0x20000af0
 800b718:	20000b98 	.word	0x20000b98

0800b71c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b71c:	b480      	push	{r7}
 800b71e:	b083      	sub	sp, #12
 800b720:	af00      	add	r7, sp, #0
 800b722:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	f103 0208 	add.w	r2, r3, #8
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	f04f 32ff 	mov.w	r2, #4294967295
 800b734:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	f103 0208 	add.w	r2, r3, #8
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	f103 0208 	add.w	r2, r3, #8
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	2200      	movs	r2, #0
 800b74e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b750:	bf00      	nop
 800b752:	370c      	adds	r7, #12
 800b754:	46bd      	mov	sp, r7
 800b756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b75a:	4770      	bx	lr

0800b75c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b75c:	b480      	push	{r7}
 800b75e:	b083      	sub	sp, #12
 800b760:	af00      	add	r7, sp, #0
 800b762:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	2200      	movs	r2, #0
 800b768:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b76a:	bf00      	nop
 800b76c:	370c      	adds	r7, #12
 800b76e:	46bd      	mov	sp, r7
 800b770:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b774:	4770      	bx	lr

0800b776 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b776:	b480      	push	{r7}
 800b778:	b085      	sub	sp, #20
 800b77a:	af00      	add	r7, sp, #0
 800b77c:	6078      	str	r0, [r7, #4]
 800b77e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	685b      	ldr	r3, [r3, #4]
 800b784:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b786:	683b      	ldr	r3, [r7, #0]
 800b788:	68fa      	ldr	r2, [r7, #12]
 800b78a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	689a      	ldr	r2, [r3, #8]
 800b790:	683b      	ldr	r3, [r7, #0]
 800b792:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	689b      	ldr	r3, [r3, #8]
 800b798:	683a      	ldr	r2, [r7, #0]
 800b79a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	683a      	ldr	r2, [r7, #0]
 800b7a0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b7a2:	683b      	ldr	r3, [r7, #0]
 800b7a4:	687a      	ldr	r2, [r7, #4]
 800b7a6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	1c5a      	adds	r2, r3, #1
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	601a      	str	r2, [r3, #0]
}
 800b7b2:	bf00      	nop
 800b7b4:	3714      	adds	r7, #20
 800b7b6:	46bd      	mov	sp, r7
 800b7b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7bc:	4770      	bx	lr

0800b7be <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b7be:	b480      	push	{r7}
 800b7c0:	b085      	sub	sp, #20
 800b7c2:	af00      	add	r7, sp, #0
 800b7c4:	6078      	str	r0, [r7, #4]
 800b7c6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b7c8:	683b      	ldr	r3, [r7, #0]
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b7ce:	68bb      	ldr	r3, [r7, #8]
 800b7d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b7d4:	d103      	bne.n	800b7de <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	691b      	ldr	r3, [r3, #16]
 800b7da:	60fb      	str	r3, [r7, #12]
 800b7dc:	e00c      	b.n	800b7f8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	3308      	adds	r3, #8
 800b7e2:	60fb      	str	r3, [r7, #12]
 800b7e4:	e002      	b.n	800b7ec <vListInsert+0x2e>
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	685b      	ldr	r3, [r3, #4]
 800b7ea:	60fb      	str	r3, [r7, #12]
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	685b      	ldr	r3, [r3, #4]
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	68ba      	ldr	r2, [r7, #8]
 800b7f4:	429a      	cmp	r2, r3
 800b7f6:	d2f6      	bcs.n	800b7e6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	685a      	ldr	r2, [r3, #4]
 800b7fc:	683b      	ldr	r3, [r7, #0]
 800b7fe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b800:	683b      	ldr	r3, [r7, #0]
 800b802:	685b      	ldr	r3, [r3, #4]
 800b804:	683a      	ldr	r2, [r7, #0]
 800b806:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b808:	683b      	ldr	r3, [r7, #0]
 800b80a:	68fa      	ldr	r2, [r7, #12]
 800b80c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	683a      	ldr	r2, [r7, #0]
 800b812:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b814:	683b      	ldr	r3, [r7, #0]
 800b816:	687a      	ldr	r2, [r7, #4]
 800b818:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	1c5a      	adds	r2, r3, #1
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	601a      	str	r2, [r3, #0]
}
 800b824:	bf00      	nop
 800b826:	3714      	adds	r7, #20
 800b828:	46bd      	mov	sp, r7
 800b82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b82e:	4770      	bx	lr

0800b830 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b830:	b480      	push	{r7}
 800b832:	b085      	sub	sp, #20
 800b834:	af00      	add	r7, sp, #0
 800b836:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	691b      	ldr	r3, [r3, #16]
 800b83c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	685b      	ldr	r3, [r3, #4]
 800b842:	687a      	ldr	r2, [r7, #4]
 800b844:	6892      	ldr	r2, [r2, #8]
 800b846:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	689b      	ldr	r3, [r3, #8]
 800b84c:	687a      	ldr	r2, [r7, #4]
 800b84e:	6852      	ldr	r2, [r2, #4]
 800b850:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	685b      	ldr	r3, [r3, #4]
 800b856:	687a      	ldr	r2, [r7, #4]
 800b858:	429a      	cmp	r2, r3
 800b85a:	d103      	bne.n	800b864 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	689a      	ldr	r2, [r3, #8]
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	2200      	movs	r2, #0
 800b868:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	1e5a      	subs	r2, r3, #1
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	681b      	ldr	r3, [r3, #0]
}
 800b878:	4618      	mov	r0, r3
 800b87a:	3714      	adds	r7, #20
 800b87c:	46bd      	mov	sp, r7
 800b87e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b882:	4770      	bx	lr

0800b884 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b884:	b580      	push	{r7, lr}
 800b886:	b084      	sub	sp, #16
 800b888:	af00      	add	r7, sp, #0
 800b88a:	6078      	str	r0, [r7, #4]
 800b88c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	2b00      	cmp	r3, #0
 800b896:	d10b      	bne.n	800b8b0 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b898:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b89c:	f383 8811 	msr	BASEPRI, r3
 800b8a0:	f3bf 8f6f 	isb	sy
 800b8a4:	f3bf 8f4f 	dsb	sy
 800b8a8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b8aa:	bf00      	nop
 800b8ac:	bf00      	nop
 800b8ae:	e7fd      	b.n	800b8ac <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800b8b0:	f002 fd1a 	bl	800e2e8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	681a      	ldr	r2, [r3, #0]
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b8bc:	68f9      	ldr	r1, [r7, #12]
 800b8be:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800b8c0:	fb01 f303 	mul.w	r3, r1, r3
 800b8c4:	441a      	add	r2, r3
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	2200      	movs	r2, #0
 800b8ce:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	681a      	ldr	r2, [r3, #0]
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	681a      	ldr	r2, [r3, #0]
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b8e0:	3b01      	subs	r3, #1
 800b8e2:	68f9      	ldr	r1, [r7, #12]
 800b8e4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800b8e6:	fb01 f303 	mul.w	r3, r1, r3
 800b8ea:	441a      	add	r2, r3
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	22ff      	movs	r2, #255	@ 0xff
 800b8f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	22ff      	movs	r2, #255	@ 0xff
 800b8fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800b900:	683b      	ldr	r3, [r7, #0]
 800b902:	2b00      	cmp	r3, #0
 800b904:	d114      	bne.n	800b930 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	691b      	ldr	r3, [r3, #16]
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d01a      	beq.n	800b944 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	3310      	adds	r3, #16
 800b912:	4618      	mov	r0, r3
 800b914:	f001 fcb2 	bl	800d27c <xTaskRemoveFromEventList>
 800b918:	4603      	mov	r3, r0
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d012      	beq.n	800b944 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b91e:	4b0d      	ldr	r3, [pc, #52]	@ (800b954 <xQueueGenericReset+0xd0>)
 800b920:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b924:	601a      	str	r2, [r3, #0]
 800b926:	f3bf 8f4f 	dsb	sy
 800b92a:	f3bf 8f6f 	isb	sy
 800b92e:	e009      	b.n	800b944 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	3310      	adds	r3, #16
 800b934:	4618      	mov	r0, r3
 800b936:	f7ff fef1 	bl	800b71c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	3324      	adds	r3, #36	@ 0x24
 800b93e:	4618      	mov	r0, r3
 800b940:	f7ff feec 	bl	800b71c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b944:	f002 fd02 	bl	800e34c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b948:	2301      	movs	r3, #1
}
 800b94a:	4618      	mov	r0, r3
 800b94c:	3710      	adds	r7, #16
 800b94e:	46bd      	mov	sp, r7
 800b950:	bd80      	pop	{r7, pc}
 800b952:	bf00      	nop
 800b954:	e000ed04 	.word	0xe000ed04

0800b958 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b958:	b580      	push	{r7, lr}
 800b95a:	b08e      	sub	sp, #56	@ 0x38
 800b95c:	af02      	add	r7, sp, #8
 800b95e:	60f8      	str	r0, [r7, #12]
 800b960:	60b9      	str	r1, [r7, #8]
 800b962:	607a      	str	r2, [r7, #4]
 800b964:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d10b      	bne.n	800b984 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800b96c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b970:	f383 8811 	msr	BASEPRI, r3
 800b974:	f3bf 8f6f 	isb	sy
 800b978:	f3bf 8f4f 	dsb	sy
 800b97c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800b97e:	bf00      	nop
 800b980:	bf00      	nop
 800b982:	e7fd      	b.n	800b980 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b984:	683b      	ldr	r3, [r7, #0]
 800b986:	2b00      	cmp	r3, #0
 800b988:	d10b      	bne.n	800b9a2 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800b98a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b98e:	f383 8811 	msr	BASEPRI, r3
 800b992:	f3bf 8f6f 	isb	sy
 800b996:	f3bf 8f4f 	dsb	sy
 800b99a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800b99c:	bf00      	nop
 800b99e:	bf00      	nop
 800b9a0:	e7fd      	b.n	800b99e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d002      	beq.n	800b9ae <xQueueGenericCreateStatic+0x56>
 800b9a8:	68bb      	ldr	r3, [r7, #8]
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d001      	beq.n	800b9b2 <xQueueGenericCreateStatic+0x5a>
 800b9ae:	2301      	movs	r3, #1
 800b9b0:	e000      	b.n	800b9b4 <xQueueGenericCreateStatic+0x5c>
 800b9b2:	2300      	movs	r3, #0
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d10b      	bne.n	800b9d0 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800b9b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b9bc:	f383 8811 	msr	BASEPRI, r3
 800b9c0:	f3bf 8f6f 	isb	sy
 800b9c4:	f3bf 8f4f 	dsb	sy
 800b9c8:	623b      	str	r3, [r7, #32]
}
 800b9ca:	bf00      	nop
 800b9cc:	bf00      	nop
 800b9ce:	e7fd      	b.n	800b9cc <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d102      	bne.n	800b9dc <xQueueGenericCreateStatic+0x84>
 800b9d6:	68bb      	ldr	r3, [r7, #8]
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d101      	bne.n	800b9e0 <xQueueGenericCreateStatic+0x88>
 800b9dc:	2301      	movs	r3, #1
 800b9de:	e000      	b.n	800b9e2 <xQueueGenericCreateStatic+0x8a>
 800b9e0:	2300      	movs	r3, #0
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d10b      	bne.n	800b9fe <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800b9e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b9ea:	f383 8811 	msr	BASEPRI, r3
 800b9ee:	f3bf 8f6f 	isb	sy
 800b9f2:	f3bf 8f4f 	dsb	sy
 800b9f6:	61fb      	str	r3, [r7, #28]
}
 800b9f8:	bf00      	nop
 800b9fa:	bf00      	nop
 800b9fc:	e7fd      	b.n	800b9fa <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b9fe:	2350      	movs	r3, #80	@ 0x50
 800ba00:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800ba02:	697b      	ldr	r3, [r7, #20]
 800ba04:	2b50      	cmp	r3, #80	@ 0x50
 800ba06:	d00b      	beq.n	800ba20 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800ba08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba0c:	f383 8811 	msr	BASEPRI, r3
 800ba10:	f3bf 8f6f 	isb	sy
 800ba14:	f3bf 8f4f 	dsb	sy
 800ba18:	61bb      	str	r3, [r7, #24]
}
 800ba1a:	bf00      	nop
 800ba1c:	bf00      	nop
 800ba1e:	e7fd      	b.n	800ba1c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800ba20:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ba22:	683b      	ldr	r3, [r7, #0]
 800ba24:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800ba26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d00d      	beq.n	800ba48 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800ba2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba2e:	2201      	movs	r2, #1
 800ba30:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ba34:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800ba38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba3a:	9300      	str	r3, [sp, #0]
 800ba3c:	4613      	mov	r3, r2
 800ba3e:	687a      	ldr	r2, [r7, #4]
 800ba40:	68b9      	ldr	r1, [r7, #8]
 800ba42:	68f8      	ldr	r0, [r7, #12]
 800ba44:	f000 f840 	bl	800bac8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ba48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800ba4a:	4618      	mov	r0, r3
 800ba4c:	3730      	adds	r7, #48	@ 0x30
 800ba4e:	46bd      	mov	sp, r7
 800ba50:	bd80      	pop	{r7, pc}

0800ba52 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800ba52:	b580      	push	{r7, lr}
 800ba54:	b08a      	sub	sp, #40	@ 0x28
 800ba56:	af02      	add	r7, sp, #8
 800ba58:	60f8      	str	r0, [r7, #12]
 800ba5a:	60b9      	str	r1, [r7, #8]
 800ba5c:	4613      	mov	r3, r2
 800ba5e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d10b      	bne.n	800ba7e <xQueueGenericCreate+0x2c>
	__asm volatile
 800ba66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba6a:	f383 8811 	msr	BASEPRI, r3
 800ba6e:	f3bf 8f6f 	isb	sy
 800ba72:	f3bf 8f4f 	dsb	sy
 800ba76:	613b      	str	r3, [r7, #16]
}
 800ba78:	bf00      	nop
 800ba7a:	bf00      	nop
 800ba7c:	e7fd      	b.n	800ba7a <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	68ba      	ldr	r2, [r7, #8]
 800ba82:	fb02 f303 	mul.w	r3, r2, r3
 800ba86:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800ba88:	69fb      	ldr	r3, [r7, #28]
 800ba8a:	3350      	adds	r3, #80	@ 0x50
 800ba8c:	4618      	mov	r0, r3
 800ba8e:	f002 fd4d 	bl	800e52c <pvPortMalloc>
 800ba92:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800ba94:	69bb      	ldr	r3, [r7, #24]
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d011      	beq.n	800babe <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800ba9a:	69bb      	ldr	r3, [r7, #24]
 800ba9c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ba9e:	697b      	ldr	r3, [r7, #20]
 800baa0:	3350      	adds	r3, #80	@ 0x50
 800baa2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800baa4:	69bb      	ldr	r3, [r7, #24]
 800baa6:	2200      	movs	r2, #0
 800baa8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800baac:	79fa      	ldrb	r2, [r7, #7]
 800baae:	69bb      	ldr	r3, [r7, #24]
 800bab0:	9300      	str	r3, [sp, #0]
 800bab2:	4613      	mov	r3, r2
 800bab4:	697a      	ldr	r2, [r7, #20]
 800bab6:	68b9      	ldr	r1, [r7, #8]
 800bab8:	68f8      	ldr	r0, [r7, #12]
 800baba:	f000 f805 	bl	800bac8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800babe:	69bb      	ldr	r3, [r7, #24]
	}
 800bac0:	4618      	mov	r0, r3
 800bac2:	3720      	adds	r7, #32
 800bac4:	46bd      	mov	sp, r7
 800bac6:	bd80      	pop	{r7, pc}

0800bac8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800bac8:	b580      	push	{r7, lr}
 800baca:	b084      	sub	sp, #16
 800bacc:	af00      	add	r7, sp, #0
 800bace:	60f8      	str	r0, [r7, #12]
 800bad0:	60b9      	str	r1, [r7, #8]
 800bad2:	607a      	str	r2, [r7, #4]
 800bad4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800bad6:	68bb      	ldr	r3, [r7, #8]
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d103      	bne.n	800bae4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800badc:	69bb      	ldr	r3, [r7, #24]
 800bade:	69ba      	ldr	r2, [r7, #24]
 800bae0:	601a      	str	r2, [r3, #0]
 800bae2:	e002      	b.n	800baea <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800bae4:	69bb      	ldr	r3, [r7, #24]
 800bae6:	687a      	ldr	r2, [r7, #4]
 800bae8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800baea:	69bb      	ldr	r3, [r7, #24]
 800baec:	68fa      	ldr	r2, [r7, #12]
 800baee:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800baf0:	69bb      	ldr	r3, [r7, #24]
 800baf2:	68ba      	ldr	r2, [r7, #8]
 800baf4:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800baf6:	2101      	movs	r1, #1
 800baf8:	69b8      	ldr	r0, [r7, #24]
 800bafa:	f7ff fec3 	bl	800b884 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800bafe:	69bb      	ldr	r3, [r7, #24]
 800bb00:	78fa      	ldrb	r2, [r7, #3]
 800bb02:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800bb06:	bf00      	nop
 800bb08:	3710      	adds	r7, #16
 800bb0a:	46bd      	mov	sp, r7
 800bb0c:	bd80      	pop	{r7, pc}

0800bb0e <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800bb0e:	b580      	push	{r7, lr}
 800bb10:	b08a      	sub	sp, #40	@ 0x28
 800bb12:	af02      	add	r7, sp, #8
 800bb14:	60f8      	str	r0, [r7, #12]
 800bb16:	60b9      	str	r1, [r7, #8]
 800bb18:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d10b      	bne.n	800bb38 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 800bb20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb24:	f383 8811 	msr	BASEPRI, r3
 800bb28:	f3bf 8f6f 	isb	sy
 800bb2c:	f3bf 8f4f 	dsb	sy
 800bb30:	61bb      	str	r3, [r7, #24]
}
 800bb32:	bf00      	nop
 800bb34:	bf00      	nop
 800bb36:	e7fd      	b.n	800bb34 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800bb38:	68ba      	ldr	r2, [r7, #8]
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	429a      	cmp	r2, r3
 800bb3e:	d90b      	bls.n	800bb58 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 800bb40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb44:	f383 8811 	msr	BASEPRI, r3
 800bb48:	f3bf 8f6f 	isb	sy
 800bb4c:	f3bf 8f4f 	dsb	sy
 800bb50:	617b      	str	r3, [r7, #20]
}
 800bb52:	bf00      	nop
 800bb54:	bf00      	nop
 800bb56:	e7fd      	b.n	800bb54 <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800bb58:	2302      	movs	r3, #2
 800bb5a:	9300      	str	r3, [sp, #0]
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	2200      	movs	r2, #0
 800bb60:	2100      	movs	r1, #0
 800bb62:	68f8      	ldr	r0, [r7, #12]
 800bb64:	f7ff fef8 	bl	800b958 <xQueueGenericCreateStatic>
 800bb68:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800bb6a:	69fb      	ldr	r3, [r7, #28]
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d002      	beq.n	800bb76 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800bb70:	69fb      	ldr	r3, [r7, #28]
 800bb72:	68ba      	ldr	r2, [r7, #8]
 800bb74:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800bb76:	69fb      	ldr	r3, [r7, #28]
	}
 800bb78:	4618      	mov	r0, r3
 800bb7a:	3720      	adds	r7, #32
 800bb7c:	46bd      	mov	sp, r7
 800bb7e:	bd80      	pop	{r7, pc}

0800bb80 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800bb80:	b580      	push	{r7, lr}
 800bb82:	b086      	sub	sp, #24
 800bb84:	af00      	add	r7, sp, #0
 800bb86:	6078      	str	r0, [r7, #4]
 800bb88:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d10b      	bne.n	800bba8 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 800bb90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb94:	f383 8811 	msr	BASEPRI, r3
 800bb98:	f3bf 8f6f 	isb	sy
 800bb9c:	f3bf 8f4f 	dsb	sy
 800bba0:	613b      	str	r3, [r7, #16]
}
 800bba2:	bf00      	nop
 800bba4:	bf00      	nop
 800bba6:	e7fd      	b.n	800bba4 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800bba8:	683a      	ldr	r2, [r7, #0]
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	429a      	cmp	r2, r3
 800bbae:	d90b      	bls.n	800bbc8 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 800bbb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bbb4:	f383 8811 	msr	BASEPRI, r3
 800bbb8:	f3bf 8f6f 	isb	sy
 800bbbc:	f3bf 8f4f 	dsb	sy
 800bbc0:	60fb      	str	r3, [r7, #12]
}
 800bbc2:	bf00      	nop
 800bbc4:	bf00      	nop
 800bbc6:	e7fd      	b.n	800bbc4 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800bbc8:	2202      	movs	r2, #2
 800bbca:	2100      	movs	r1, #0
 800bbcc:	6878      	ldr	r0, [r7, #4]
 800bbce:	f7ff ff40 	bl	800ba52 <xQueueGenericCreate>
 800bbd2:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800bbd4:	697b      	ldr	r3, [r7, #20]
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d002      	beq.n	800bbe0 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800bbda:	697b      	ldr	r3, [r7, #20]
 800bbdc:	683a      	ldr	r2, [r7, #0]
 800bbde:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800bbe0:	697b      	ldr	r3, [r7, #20]
	}
 800bbe2:	4618      	mov	r0, r3
 800bbe4:	3718      	adds	r7, #24
 800bbe6:	46bd      	mov	sp, r7
 800bbe8:	bd80      	pop	{r7, pc}
	...

0800bbec <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800bbec:	b580      	push	{r7, lr}
 800bbee:	b08e      	sub	sp, #56	@ 0x38
 800bbf0:	af00      	add	r7, sp, #0
 800bbf2:	60f8      	str	r0, [r7, #12]
 800bbf4:	60b9      	str	r1, [r7, #8]
 800bbf6:	607a      	str	r2, [r7, #4]
 800bbf8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800bbfa:	2300      	movs	r3, #0
 800bbfc:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800bc02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d10b      	bne.n	800bc20 <xQueueGenericSend+0x34>
	__asm volatile
 800bc08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc0c:	f383 8811 	msr	BASEPRI, r3
 800bc10:	f3bf 8f6f 	isb	sy
 800bc14:	f3bf 8f4f 	dsb	sy
 800bc18:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800bc1a:	bf00      	nop
 800bc1c:	bf00      	nop
 800bc1e:	e7fd      	b.n	800bc1c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bc20:	68bb      	ldr	r3, [r7, #8]
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d103      	bne.n	800bc2e <xQueueGenericSend+0x42>
 800bc26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d101      	bne.n	800bc32 <xQueueGenericSend+0x46>
 800bc2e:	2301      	movs	r3, #1
 800bc30:	e000      	b.n	800bc34 <xQueueGenericSend+0x48>
 800bc32:	2300      	movs	r3, #0
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d10b      	bne.n	800bc50 <xQueueGenericSend+0x64>
	__asm volatile
 800bc38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc3c:	f383 8811 	msr	BASEPRI, r3
 800bc40:	f3bf 8f6f 	isb	sy
 800bc44:	f3bf 8f4f 	dsb	sy
 800bc48:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800bc4a:	bf00      	nop
 800bc4c:	bf00      	nop
 800bc4e:	e7fd      	b.n	800bc4c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bc50:	683b      	ldr	r3, [r7, #0]
 800bc52:	2b02      	cmp	r3, #2
 800bc54:	d103      	bne.n	800bc5e <xQueueGenericSend+0x72>
 800bc56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bc5a:	2b01      	cmp	r3, #1
 800bc5c:	d101      	bne.n	800bc62 <xQueueGenericSend+0x76>
 800bc5e:	2301      	movs	r3, #1
 800bc60:	e000      	b.n	800bc64 <xQueueGenericSend+0x78>
 800bc62:	2300      	movs	r3, #0
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d10b      	bne.n	800bc80 <xQueueGenericSend+0x94>
	__asm volatile
 800bc68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc6c:	f383 8811 	msr	BASEPRI, r3
 800bc70:	f3bf 8f6f 	isb	sy
 800bc74:	f3bf 8f4f 	dsb	sy
 800bc78:	623b      	str	r3, [r7, #32]
}
 800bc7a:	bf00      	nop
 800bc7c:	bf00      	nop
 800bc7e:	e7fd      	b.n	800bc7c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bc80:	f001 fcc2 	bl	800d608 <xTaskGetSchedulerState>
 800bc84:	4603      	mov	r3, r0
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d102      	bne.n	800bc90 <xQueueGenericSend+0xa4>
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d101      	bne.n	800bc94 <xQueueGenericSend+0xa8>
 800bc90:	2301      	movs	r3, #1
 800bc92:	e000      	b.n	800bc96 <xQueueGenericSend+0xaa>
 800bc94:	2300      	movs	r3, #0
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d10b      	bne.n	800bcb2 <xQueueGenericSend+0xc6>
	__asm volatile
 800bc9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc9e:	f383 8811 	msr	BASEPRI, r3
 800bca2:	f3bf 8f6f 	isb	sy
 800bca6:	f3bf 8f4f 	dsb	sy
 800bcaa:	61fb      	str	r3, [r7, #28]
}
 800bcac:	bf00      	nop
 800bcae:	bf00      	nop
 800bcb0:	e7fd      	b.n	800bcae <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bcb2:	f002 fb19 	bl	800e2e8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bcb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bcb8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bcba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bcbc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bcbe:	429a      	cmp	r2, r3
 800bcc0:	d302      	bcc.n	800bcc8 <xQueueGenericSend+0xdc>
 800bcc2:	683b      	ldr	r3, [r7, #0]
 800bcc4:	2b02      	cmp	r3, #2
 800bcc6:	d129      	bne.n	800bd1c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bcc8:	683a      	ldr	r2, [r7, #0]
 800bcca:	68b9      	ldr	r1, [r7, #8]
 800bccc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800bcce:	f000 fcab 	bl	800c628 <prvCopyDataToQueue>
 800bcd2:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bcd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bcd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d010      	beq.n	800bcfe <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bcdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bcde:	3324      	adds	r3, #36	@ 0x24
 800bce0:	4618      	mov	r0, r3
 800bce2:	f001 facb 	bl	800d27c <xTaskRemoveFromEventList>
 800bce6:	4603      	mov	r3, r0
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d013      	beq.n	800bd14 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800bcec:	4b3f      	ldr	r3, [pc, #252]	@ (800bdec <xQueueGenericSend+0x200>)
 800bcee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bcf2:	601a      	str	r2, [r3, #0]
 800bcf4:	f3bf 8f4f 	dsb	sy
 800bcf8:	f3bf 8f6f 	isb	sy
 800bcfc:	e00a      	b.n	800bd14 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800bcfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d007      	beq.n	800bd14 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800bd04:	4b39      	ldr	r3, [pc, #228]	@ (800bdec <xQueueGenericSend+0x200>)
 800bd06:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bd0a:	601a      	str	r2, [r3, #0]
 800bd0c:	f3bf 8f4f 	dsb	sy
 800bd10:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800bd14:	f002 fb1a 	bl	800e34c <vPortExitCritical>
				return pdPASS;
 800bd18:	2301      	movs	r3, #1
 800bd1a:	e063      	b.n	800bde4 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	d103      	bne.n	800bd2a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800bd22:	f002 fb13 	bl	800e34c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800bd26:	2300      	movs	r3, #0
 800bd28:	e05c      	b.n	800bde4 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bd2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d106      	bne.n	800bd3e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bd30:	f107 0314 	add.w	r3, r7, #20
 800bd34:	4618      	mov	r0, r3
 800bd36:	f001 fb05 	bl	800d344 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bd3a:	2301      	movs	r3, #1
 800bd3c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bd3e:	f002 fb05 	bl	800e34c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bd42:	f001 f86d 	bl	800ce20 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bd46:	f002 facf 	bl	800e2e8 <vPortEnterCritical>
 800bd4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd4c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800bd50:	b25b      	sxtb	r3, r3
 800bd52:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd56:	d103      	bne.n	800bd60 <xQueueGenericSend+0x174>
 800bd58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd5a:	2200      	movs	r2, #0
 800bd5c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800bd60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd62:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800bd66:	b25b      	sxtb	r3, r3
 800bd68:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd6c:	d103      	bne.n	800bd76 <xQueueGenericSend+0x18a>
 800bd6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd70:	2200      	movs	r2, #0
 800bd72:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800bd76:	f002 fae9 	bl	800e34c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bd7a:	1d3a      	adds	r2, r7, #4
 800bd7c:	f107 0314 	add.w	r3, r7, #20
 800bd80:	4611      	mov	r1, r2
 800bd82:	4618      	mov	r0, r3
 800bd84:	f001 faf4 	bl	800d370 <xTaskCheckForTimeOut>
 800bd88:	4603      	mov	r3, r0
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d124      	bne.n	800bdd8 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800bd8e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800bd90:	f000 fd42 	bl	800c818 <prvIsQueueFull>
 800bd94:	4603      	mov	r3, r0
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d018      	beq.n	800bdcc <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800bd9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd9c:	3310      	adds	r3, #16
 800bd9e:	687a      	ldr	r2, [r7, #4]
 800bda0:	4611      	mov	r1, r2
 800bda2:	4618      	mov	r0, r3
 800bda4:	f001 fa18 	bl	800d1d8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800bda8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800bdaa:	f000 fccd 	bl	800c748 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800bdae:	f001 f845 	bl	800ce3c <xTaskResumeAll>
 800bdb2:	4603      	mov	r3, r0
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	f47f af7c 	bne.w	800bcb2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800bdba:	4b0c      	ldr	r3, [pc, #48]	@ (800bdec <xQueueGenericSend+0x200>)
 800bdbc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bdc0:	601a      	str	r2, [r3, #0]
 800bdc2:	f3bf 8f4f 	dsb	sy
 800bdc6:	f3bf 8f6f 	isb	sy
 800bdca:	e772      	b.n	800bcb2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800bdcc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800bdce:	f000 fcbb 	bl	800c748 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bdd2:	f001 f833 	bl	800ce3c <xTaskResumeAll>
 800bdd6:	e76c      	b.n	800bcb2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800bdd8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800bdda:	f000 fcb5 	bl	800c748 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bdde:	f001 f82d 	bl	800ce3c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800bde2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800bde4:	4618      	mov	r0, r3
 800bde6:	3738      	adds	r7, #56	@ 0x38
 800bde8:	46bd      	mov	sp, r7
 800bdea:	bd80      	pop	{r7, pc}
 800bdec:	e000ed04 	.word	0xe000ed04

0800bdf0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800bdf0:	b580      	push	{r7, lr}
 800bdf2:	b090      	sub	sp, #64	@ 0x40
 800bdf4:	af00      	add	r7, sp, #0
 800bdf6:	60f8      	str	r0, [r7, #12]
 800bdf8:	60b9      	str	r1, [r7, #8]
 800bdfa:	607a      	str	r2, [r7, #4]
 800bdfc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800be02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be04:	2b00      	cmp	r3, #0
 800be06:	d10b      	bne.n	800be20 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800be08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be0c:	f383 8811 	msr	BASEPRI, r3
 800be10:	f3bf 8f6f 	isb	sy
 800be14:	f3bf 8f4f 	dsb	sy
 800be18:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800be1a:	bf00      	nop
 800be1c:	bf00      	nop
 800be1e:	e7fd      	b.n	800be1c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800be20:	68bb      	ldr	r3, [r7, #8]
 800be22:	2b00      	cmp	r3, #0
 800be24:	d103      	bne.n	800be2e <xQueueGenericSendFromISR+0x3e>
 800be26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d101      	bne.n	800be32 <xQueueGenericSendFromISR+0x42>
 800be2e:	2301      	movs	r3, #1
 800be30:	e000      	b.n	800be34 <xQueueGenericSendFromISR+0x44>
 800be32:	2300      	movs	r3, #0
 800be34:	2b00      	cmp	r3, #0
 800be36:	d10b      	bne.n	800be50 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800be38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be3c:	f383 8811 	msr	BASEPRI, r3
 800be40:	f3bf 8f6f 	isb	sy
 800be44:	f3bf 8f4f 	dsb	sy
 800be48:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800be4a:	bf00      	nop
 800be4c:	bf00      	nop
 800be4e:	e7fd      	b.n	800be4c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800be50:	683b      	ldr	r3, [r7, #0]
 800be52:	2b02      	cmp	r3, #2
 800be54:	d103      	bne.n	800be5e <xQueueGenericSendFromISR+0x6e>
 800be56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800be5a:	2b01      	cmp	r3, #1
 800be5c:	d101      	bne.n	800be62 <xQueueGenericSendFromISR+0x72>
 800be5e:	2301      	movs	r3, #1
 800be60:	e000      	b.n	800be64 <xQueueGenericSendFromISR+0x74>
 800be62:	2300      	movs	r3, #0
 800be64:	2b00      	cmp	r3, #0
 800be66:	d10b      	bne.n	800be80 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800be68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be6c:	f383 8811 	msr	BASEPRI, r3
 800be70:	f3bf 8f6f 	isb	sy
 800be74:	f3bf 8f4f 	dsb	sy
 800be78:	623b      	str	r3, [r7, #32]
}
 800be7a:	bf00      	nop
 800be7c:	bf00      	nop
 800be7e:	e7fd      	b.n	800be7c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800be80:	f002 fb12 	bl	800e4a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800be84:	f3ef 8211 	mrs	r2, BASEPRI
 800be88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be8c:	f383 8811 	msr	BASEPRI, r3
 800be90:	f3bf 8f6f 	isb	sy
 800be94:	f3bf 8f4f 	dsb	sy
 800be98:	61fa      	str	r2, [r7, #28]
 800be9a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800be9c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800be9e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bea0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bea2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bea4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bea6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bea8:	429a      	cmp	r2, r3
 800beaa:	d302      	bcc.n	800beb2 <xQueueGenericSendFromISR+0xc2>
 800beac:	683b      	ldr	r3, [r7, #0]
 800beae:	2b02      	cmp	r3, #2
 800beb0:	d12f      	bne.n	800bf12 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800beb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800beb4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800beb8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bebc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bebe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bec0:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bec2:	683a      	ldr	r2, [r7, #0]
 800bec4:	68b9      	ldr	r1, [r7, #8]
 800bec6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800bec8:	f000 fbae 	bl	800c628 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800becc:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800bed0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bed4:	d112      	bne.n	800befc <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bed6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bed8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d016      	beq.n	800bf0c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bede:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bee0:	3324      	adds	r3, #36	@ 0x24
 800bee2:	4618      	mov	r0, r3
 800bee4:	f001 f9ca 	bl	800d27c <xTaskRemoveFromEventList>
 800bee8:	4603      	mov	r3, r0
 800beea:	2b00      	cmp	r3, #0
 800beec:	d00e      	beq.n	800bf0c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d00b      	beq.n	800bf0c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	2201      	movs	r2, #1
 800bef8:	601a      	str	r2, [r3, #0]
 800befa:	e007      	b.n	800bf0c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800befc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800bf00:	3301      	adds	r3, #1
 800bf02:	b2db      	uxtb	r3, r3
 800bf04:	b25a      	sxtb	r2, r3
 800bf06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf08:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800bf0c:	2301      	movs	r3, #1
 800bf0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800bf10:	e001      	b.n	800bf16 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800bf12:	2300      	movs	r3, #0
 800bf14:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bf16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bf18:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800bf1a:	697b      	ldr	r3, [r7, #20]
 800bf1c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800bf20:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bf22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800bf24:	4618      	mov	r0, r3
 800bf26:	3740      	adds	r7, #64	@ 0x40
 800bf28:	46bd      	mov	sp, r7
 800bf2a:	bd80      	pop	{r7, pc}

0800bf2c <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800bf2c:	b580      	push	{r7, lr}
 800bf2e:	b08e      	sub	sp, #56	@ 0x38
 800bf30:	af00      	add	r7, sp, #0
 800bf32:	6078      	str	r0, [r7, #4]
 800bf34:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800bf3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d10b      	bne.n	800bf58 <xQueueGiveFromISR+0x2c>
	__asm volatile
 800bf40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf44:	f383 8811 	msr	BASEPRI, r3
 800bf48:	f3bf 8f6f 	isb	sy
 800bf4c:	f3bf 8f4f 	dsb	sy
 800bf50:	623b      	str	r3, [r7, #32]
}
 800bf52:	bf00      	nop
 800bf54:	bf00      	nop
 800bf56:	e7fd      	b.n	800bf54 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800bf58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d00b      	beq.n	800bf78 <xQueueGiveFromISR+0x4c>
	__asm volatile
 800bf60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf64:	f383 8811 	msr	BASEPRI, r3
 800bf68:	f3bf 8f6f 	isb	sy
 800bf6c:	f3bf 8f4f 	dsb	sy
 800bf70:	61fb      	str	r3, [r7, #28]
}
 800bf72:	bf00      	nop
 800bf74:	bf00      	nop
 800bf76:	e7fd      	b.n	800bf74 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800bf78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d103      	bne.n	800bf88 <xQueueGiveFromISR+0x5c>
 800bf80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf82:	689b      	ldr	r3, [r3, #8]
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d101      	bne.n	800bf8c <xQueueGiveFromISR+0x60>
 800bf88:	2301      	movs	r3, #1
 800bf8a:	e000      	b.n	800bf8e <xQueueGiveFromISR+0x62>
 800bf8c:	2300      	movs	r3, #0
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d10b      	bne.n	800bfaa <xQueueGiveFromISR+0x7e>
	__asm volatile
 800bf92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf96:	f383 8811 	msr	BASEPRI, r3
 800bf9a:	f3bf 8f6f 	isb	sy
 800bf9e:	f3bf 8f4f 	dsb	sy
 800bfa2:	61bb      	str	r3, [r7, #24]
}
 800bfa4:	bf00      	nop
 800bfa6:	bf00      	nop
 800bfa8:	e7fd      	b.n	800bfa6 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bfaa:	f002 fa7d 	bl	800e4a8 <vPortValidateInterruptPriority>
	__asm volatile
 800bfae:	f3ef 8211 	mrs	r2, BASEPRI
 800bfb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bfb6:	f383 8811 	msr	BASEPRI, r3
 800bfba:	f3bf 8f6f 	isb	sy
 800bfbe:	f3bf 8f4f 	dsb	sy
 800bfc2:	617a      	str	r2, [r7, #20]
 800bfc4:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800bfc6:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800bfc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bfca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bfcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bfce:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800bfd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bfd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bfd4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bfd6:	429a      	cmp	r2, r3
 800bfd8:	d22b      	bcs.n	800c032 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800bfda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bfdc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800bfe0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800bfe4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bfe6:	1c5a      	adds	r2, r3, #1
 800bfe8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bfea:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800bfec:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800bff0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bff4:	d112      	bne.n	800c01c <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bff6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bff8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d016      	beq.n	800c02c <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bffe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c000:	3324      	adds	r3, #36	@ 0x24
 800c002:	4618      	mov	r0, r3
 800c004:	f001 f93a 	bl	800d27c <xTaskRemoveFromEventList>
 800c008:	4603      	mov	r3, r0
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d00e      	beq.n	800c02c <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c00e:	683b      	ldr	r3, [r7, #0]
 800c010:	2b00      	cmp	r3, #0
 800c012:	d00b      	beq.n	800c02c <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c014:	683b      	ldr	r3, [r7, #0]
 800c016:	2201      	movs	r2, #1
 800c018:	601a      	str	r2, [r3, #0]
 800c01a:	e007      	b.n	800c02c <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c01c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c020:	3301      	adds	r3, #1
 800c022:	b2db      	uxtb	r3, r3
 800c024:	b25a      	sxtb	r2, r3
 800c026:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c028:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800c02c:	2301      	movs	r3, #1
 800c02e:	637b      	str	r3, [r7, #52]	@ 0x34
 800c030:	e001      	b.n	800c036 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c032:	2300      	movs	r3, #0
 800c034:	637b      	str	r3, [r7, #52]	@ 0x34
 800c036:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c038:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800c03a:	68fb      	ldr	r3, [r7, #12]
 800c03c:	f383 8811 	msr	BASEPRI, r3
}
 800c040:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c042:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800c044:	4618      	mov	r0, r3
 800c046:	3738      	adds	r7, #56	@ 0x38
 800c048:	46bd      	mov	sp, r7
 800c04a:	bd80      	pop	{r7, pc}

0800c04c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c04c:	b580      	push	{r7, lr}
 800c04e:	b08c      	sub	sp, #48	@ 0x30
 800c050:	af00      	add	r7, sp, #0
 800c052:	60f8      	str	r0, [r7, #12]
 800c054:	60b9      	str	r1, [r7, #8]
 800c056:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c058:	2300      	movs	r3, #0
 800c05a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c05c:	68fb      	ldr	r3, [r7, #12]
 800c05e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c060:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c062:	2b00      	cmp	r3, #0
 800c064:	d10b      	bne.n	800c07e <xQueueReceive+0x32>
	__asm volatile
 800c066:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c06a:	f383 8811 	msr	BASEPRI, r3
 800c06e:	f3bf 8f6f 	isb	sy
 800c072:	f3bf 8f4f 	dsb	sy
 800c076:	623b      	str	r3, [r7, #32]
}
 800c078:	bf00      	nop
 800c07a:	bf00      	nop
 800c07c:	e7fd      	b.n	800c07a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c07e:	68bb      	ldr	r3, [r7, #8]
 800c080:	2b00      	cmp	r3, #0
 800c082:	d103      	bne.n	800c08c <xQueueReceive+0x40>
 800c084:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c086:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c088:	2b00      	cmp	r3, #0
 800c08a:	d101      	bne.n	800c090 <xQueueReceive+0x44>
 800c08c:	2301      	movs	r3, #1
 800c08e:	e000      	b.n	800c092 <xQueueReceive+0x46>
 800c090:	2300      	movs	r3, #0
 800c092:	2b00      	cmp	r3, #0
 800c094:	d10b      	bne.n	800c0ae <xQueueReceive+0x62>
	__asm volatile
 800c096:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c09a:	f383 8811 	msr	BASEPRI, r3
 800c09e:	f3bf 8f6f 	isb	sy
 800c0a2:	f3bf 8f4f 	dsb	sy
 800c0a6:	61fb      	str	r3, [r7, #28]
}
 800c0a8:	bf00      	nop
 800c0aa:	bf00      	nop
 800c0ac:	e7fd      	b.n	800c0aa <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c0ae:	f001 faab 	bl	800d608 <xTaskGetSchedulerState>
 800c0b2:	4603      	mov	r3, r0
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	d102      	bne.n	800c0be <xQueueReceive+0x72>
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d101      	bne.n	800c0c2 <xQueueReceive+0x76>
 800c0be:	2301      	movs	r3, #1
 800c0c0:	e000      	b.n	800c0c4 <xQueueReceive+0x78>
 800c0c2:	2300      	movs	r3, #0
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d10b      	bne.n	800c0e0 <xQueueReceive+0x94>
	__asm volatile
 800c0c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0cc:	f383 8811 	msr	BASEPRI, r3
 800c0d0:	f3bf 8f6f 	isb	sy
 800c0d4:	f3bf 8f4f 	dsb	sy
 800c0d8:	61bb      	str	r3, [r7, #24]
}
 800c0da:	bf00      	nop
 800c0dc:	bf00      	nop
 800c0de:	e7fd      	b.n	800c0dc <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c0e0:	f002 f902 	bl	800e2e8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c0e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c0e8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c0ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d01f      	beq.n	800c130 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c0f0:	68b9      	ldr	r1, [r7, #8]
 800c0f2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c0f4:	f000 fb02 	bl	800c6fc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c0f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0fa:	1e5a      	subs	r2, r3, #1
 800c0fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0fe:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c100:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c102:	691b      	ldr	r3, [r3, #16]
 800c104:	2b00      	cmp	r3, #0
 800c106:	d00f      	beq.n	800c128 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c108:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c10a:	3310      	adds	r3, #16
 800c10c:	4618      	mov	r0, r3
 800c10e:	f001 f8b5 	bl	800d27c <xTaskRemoveFromEventList>
 800c112:	4603      	mov	r3, r0
 800c114:	2b00      	cmp	r3, #0
 800c116:	d007      	beq.n	800c128 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c118:	4b3c      	ldr	r3, [pc, #240]	@ (800c20c <xQueueReceive+0x1c0>)
 800c11a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c11e:	601a      	str	r2, [r3, #0]
 800c120:	f3bf 8f4f 	dsb	sy
 800c124:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c128:	f002 f910 	bl	800e34c <vPortExitCritical>
				return pdPASS;
 800c12c:	2301      	movs	r3, #1
 800c12e:	e069      	b.n	800c204 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	2b00      	cmp	r3, #0
 800c134:	d103      	bne.n	800c13e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c136:	f002 f909 	bl	800e34c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c13a:	2300      	movs	r3, #0
 800c13c:	e062      	b.n	800c204 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c13e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c140:	2b00      	cmp	r3, #0
 800c142:	d106      	bne.n	800c152 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c144:	f107 0310 	add.w	r3, r7, #16
 800c148:	4618      	mov	r0, r3
 800c14a:	f001 f8fb 	bl	800d344 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c14e:	2301      	movs	r3, #1
 800c150:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c152:	f002 f8fb 	bl	800e34c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c156:	f000 fe63 	bl	800ce20 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c15a:	f002 f8c5 	bl	800e2e8 <vPortEnterCritical>
 800c15e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c160:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c164:	b25b      	sxtb	r3, r3
 800c166:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c16a:	d103      	bne.n	800c174 <xQueueReceive+0x128>
 800c16c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c16e:	2200      	movs	r2, #0
 800c170:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c174:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c176:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c17a:	b25b      	sxtb	r3, r3
 800c17c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c180:	d103      	bne.n	800c18a <xQueueReceive+0x13e>
 800c182:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c184:	2200      	movs	r2, #0
 800c186:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c18a:	f002 f8df 	bl	800e34c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c18e:	1d3a      	adds	r2, r7, #4
 800c190:	f107 0310 	add.w	r3, r7, #16
 800c194:	4611      	mov	r1, r2
 800c196:	4618      	mov	r0, r3
 800c198:	f001 f8ea 	bl	800d370 <xTaskCheckForTimeOut>
 800c19c:	4603      	mov	r3, r0
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d123      	bne.n	800c1ea <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c1a2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c1a4:	f000 fb22 	bl	800c7ec <prvIsQueueEmpty>
 800c1a8:	4603      	mov	r3, r0
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d017      	beq.n	800c1de <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c1ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1b0:	3324      	adds	r3, #36	@ 0x24
 800c1b2:	687a      	ldr	r2, [r7, #4]
 800c1b4:	4611      	mov	r1, r2
 800c1b6:	4618      	mov	r0, r3
 800c1b8:	f001 f80e 	bl	800d1d8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c1bc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c1be:	f000 fac3 	bl	800c748 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c1c2:	f000 fe3b 	bl	800ce3c <xTaskResumeAll>
 800c1c6:	4603      	mov	r3, r0
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d189      	bne.n	800c0e0 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800c1cc:	4b0f      	ldr	r3, [pc, #60]	@ (800c20c <xQueueReceive+0x1c0>)
 800c1ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c1d2:	601a      	str	r2, [r3, #0]
 800c1d4:	f3bf 8f4f 	dsb	sy
 800c1d8:	f3bf 8f6f 	isb	sy
 800c1dc:	e780      	b.n	800c0e0 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c1de:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c1e0:	f000 fab2 	bl	800c748 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c1e4:	f000 fe2a 	bl	800ce3c <xTaskResumeAll>
 800c1e8:	e77a      	b.n	800c0e0 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c1ea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c1ec:	f000 faac 	bl	800c748 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c1f0:	f000 fe24 	bl	800ce3c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c1f4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c1f6:	f000 faf9 	bl	800c7ec <prvIsQueueEmpty>
 800c1fa:	4603      	mov	r3, r0
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	f43f af6f 	beq.w	800c0e0 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c202:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c204:	4618      	mov	r0, r3
 800c206:	3730      	adds	r7, #48	@ 0x30
 800c208:	46bd      	mov	sp, r7
 800c20a:	bd80      	pop	{r7, pc}
 800c20c:	e000ed04 	.word	0xe000ed04

0800c210 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800c210:	b580      	push	{r7, lr}
 800c212:	b08e      	sub	sp, #56	@ 0x38
 800c214:	af00      	add	r7, sp, #0
 800c216:	6078      	str	r0, [r7, #4]
 800c218:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800c21a:	2300      	movs	r3, #0
 800c21c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800c222:	2300      	movs	r3, #0
 800c224:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c226:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d10b      	bne.n	800c244 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800c22c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c230:	f383 8811 	msr	BASEPRI, r3
 800c234:	f3bf 8f6f 	isb	sy
 800c238:	f3bf 8f4f 	dsb	sy
 800c23c:	623b      	str	r3, [r7, #32]
}
 800c23e:	bf00      	nop
 800c240:	bf00      	nop
 800c242:	e7fd      	b.n	800c240 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c244:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c246:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d00b      	beq.n	800c264 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800c24c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c250:	f383 8811 	msr	BASEPRI, r3
 800c254:	f3bf 8f6f 	isb	sy
 800c258:	f3bf 8f4f 	dsb	sy
 800c25c:	61fb      	str	r3, [r7, #28]
}
 800c25e:	bf00      	nop
 800c260:	bf00      	nop
 800c262:	e7fd      	b.n	800c260 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c264:	f001 f9d0 	bl	800d608 <xTaskGetSchedulerState>
 800c268:	4603      	mov	r3, r0
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d102      	bne.n	800c274 <xQueueSemaphoreTake+0x64>
 800c26e:	683b      	ldr	r3, [r7, #0]
 800c270:	2b00      	cmp	r3, #0
 800c272:	d101      	bne.n	800c278 <xQueueSemaphoreTake+0x68>
 800c274:	2301      	movs	r3, #1
 800c276:	e000      	b.n	800c27a <xQueueSemaphoreTake+0x6a>
 800c278:	2300      	movs	r3, #0
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d10b      	bne.n	800c296 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800c27e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c282:	f383 8811 	msr	BASEPRI, r3
 800c286:	f3bf 8f6f 	isb	sy
 800c28a:	f3bf 8f4f 	dsb	sy
 800c28e:	61bb      	str	r3, [r7, #24]
}
 800c290:	bf00      	nop
 800c292:	bf00      	nop
 800c294:	e7fd      	b.n	800c292 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c296:	f002 f827 	bl	800e2e8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800c29a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c29c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c29e:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800c2a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d024      	beq.n	800c2f0 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800c2a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c2a8:	1e5a      	subs	r2, r3, #1
 800c2aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c2ac:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c2ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	d104      	bne.n	800c2c0 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800c2b6:	f001 fb21 	bl	800d8fc <pvTaskIncrementMutexHeldCount>
 800c2ba:	4602      	mov	r2, r0
 800c2bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c2be:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c2c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c2c2:	691b      	ldr	r3, [r3, #16]
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d00f      	beq.n	800c2e8 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c2c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c2ca:	3310      	adds	r3, #16
 800c2cc:	4618      	mov	r0, r3
 800c2ce:	f000 ffd5 	bl	800d27c <xTaskRemoveFromEventList>
 800c2d2:	4603      	mov	r3, r0
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d007      	beq.n	800c2e8 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c2d8:	4b54      	ldr	r3, [pc, #336]	@ (800c42c <xQueueSemaphoreTake+0x21c>)
 800c2da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c2de:	601a      	str	r2, [r3, #0]
 800c2e0:	f3bf 8f4f 	dsb	sy
 800c2e4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c2e8:	f002 f830 	bl	800e34c <vPortExitCritical>
				return pdPASS;
 800c2ec:	2301      	movs	r3, #1
 800c2ee:	e098      	b.n	800c422 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c2f0:	683b      	ldr	r3, [r7, #0]
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d112      	bne.n	800c31c <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800c2f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d00b      	beq.n	800c314 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800c2fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c300:	f383 8811 	msr	BASEPRI, r3
 800c304:	f3bf 8f6f 	isb	sy
 800c308:	f3bf 8f4f 	dsb	sy
 800c30c:	617b      	str	r3, [r7, #20]
}
 800c30e:	bf00      	nop
 800c310:	bf00      	nop
 800c312:	e7fd      	b.n	800c310 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800c314:	f002 f81a 	bl	800e34c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c318:	2300      	movs	r3, #0
 800c31a:	e082      	b.n	800c422 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c31c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d106      	bne.n	800c330 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c322:	f107 030c 	add.w	r3, r7, #12
 800c326:	4618      	mov	r0, r3
 800c328:	f001 f80c 	bl	800d344 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c32c:	2301      	movs	r3, #1
 800c32e:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c330:	f002 f80c 	bl	800e34c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c334:	f000 fd74 	bl	800ce20 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c338:	f001 ffd6 	bl	800e2e8 <vPortEnterCritical>
 800c33c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c33e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c342:	b25b      	sxtb	r3, r3
 800c344:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c348:	d103      	bne.n	800c352 <xQueueSemaphoreTake+0x142>
 800c34a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c34c:	2200      	movs	r2, #0
 800c34e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c352:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c354:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c358:	b25b      	sxtb	r3, r3
 800c35a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c35e:	d103      	bne.n	800c368 <xQueueSemaphoreTake+0x158>
 800c360:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c362:	2200      	movs	r2, #0
 800c364:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c368:	f001 fff0 	bl	800e34c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c36c:	463a      	mov	r2, r7
 800c36e:	f107 030c 	add.w	r3, r7, #12
 800c372:	4611      	mov	r1, r2
 800c374:	4618      	mov	r0, r3
 800c376:	f000 fffb 	bl	800d370 <xTaskCheckForTimeOut>
 800c37a:	4603      	mov	r3, r0
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d132      	bne.n	800c3e6 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c380:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c382:	f000 fa33 	bl	800c7ec <prvIsQueueEmpty>
 800c386:	4603      	mov	r3, r0
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d026      	beq.n	800c3da <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c38c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	2b00      	cmp	r3, #0
 800c392:	d109      	bne.n	800c3a8 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800c394:	f001 ffa8 	bl	800e2e8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c398:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c39a:	689b      	ldr	r3, [r3, #8]
 800c39c:	4618      	mov	r0, r3
 800c39e:	f001 f951 	bl	800d644 <xTaskPriorityInherit>
 800c3a2:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800c3a4:	f001 ffd2 	bl	800e34c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c3a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c3aa:	3324      	adds	r3, #36	@ 0x24
 800c3ac:	683a      	ldr	r2, [r7, #0]
 800c3ae:	4611      	mov	r1, r2
 800c3b0:	4618      	mov	r0, r3
 800c3b2:	f000 ff11 	bl	800d1d8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c3b6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c3b8:	f000 f9c6 	bl	800c748 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c3bc:	f000 fd3e 	bl	800ce3c <xTaskResumeAll>
 800c3c0:	4603      	mov	r3, r0
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	f47f af67 	bne.w	800c296 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800c3c8:	4b18      	ldr	r3, [pc, #96]	@ (800c42c <xQueueSemaphoreTake+0x21c>)
 800c3ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c3ce:	601a      	str	r2, [r3, #0]
 800c3d0:	f3bf 8f4f 	dsb	sy
 800c3d4:	f3bf 8f6f 	isb	sy
 800c3d8:	e75d      	b.n	800c296 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800c3da:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c3dc:	f000 f9b4 	bl	800c748 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c3e0:	f000 fd2c 	bl	800ce3c <xTaskResumeAll>
 800c3e4:	e757      	b.n	800c296 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800c3e6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c3e8:	f000 f9ae 	bl	800c748 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c3ec:	f000 fd26 	bl	800ce3c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c3f0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c3f2:	f000 f9fb 	bl	800c7ec <prvIsQueueEmpty>
 800c3f6:	4603      	mov	r3, r0
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	f43f af4c 	beq.w	800c296 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800c3fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c400:	2b00      	cmp	r3, #0
 800c402:	d00d      	beq.n	800c420 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800c404:	f001 ff70 	bl	800e2e8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800c408:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c40a:	f000 f8f5 	bl	800c5f8 <prvGetDisinheritPriorityAfterTimeout>
 800c40e:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800c410:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c412:	689b      	ldr	r3, [r3, #8]
 800c414:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c416:	4618      	mov	r0, r3
 800c418:	f001 f9ec 	bl	800d7f4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800c41c:	f001 ff96 	bl	800e34c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c420:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c422:	4618      	mov	r0, r3
 800c424:	3738      	adds	r7, #56	@ 0x38
 800c426:	46bd      	mov	sp, r7
 800c428:	bd80      	pop	{r7, pc}
 800c42a:	bf00      	nop
 800c42c:	e000ed04 	.word	0xe000ed04

0800c430 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c430:	b580      	push	{r7, lr}
 800c432:	b08e      	sub	sp, #56	@ 0x38
 800c434:	af00      	add	r7, sp, #0
 800c436:	60f8      	str	r0, [r7, #12]
 800c438:	60b9      	str	r1, [r7, #8]
 800c43a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c43c:	68fb      	ldr	r3, [r7, #12]
 800c43e:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800c440:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c442:	2b00      	cmp	r3, #0
 800c444:	d10b      	bne.n	800c45e <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800c446:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c44a:	f383 8811 	msr	BASEPRI, r3
 800c44e:	f3bf 8f6f 	isb	sy
 800c452:	f3bf 8f4f 	dsb	sy
 800c456:	623b      	str	r3, [r7, #32]
}
 800c458:	bf00      	nop
 800c45a:	bf00      	nop
 800c45c:	e7fd      	b.n	800c45a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c45e:	68bb      	ldr	r3, [r7, #8]
 800c460:	2b00      	cmp	r3, #0
 800c462:	d103      	bne.n	800c46c <xQueueReceiveFromISR+0x3c>
 800c464:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c466:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d101      	bne.n	800c470 <xQueueReceiveFromISR+0x40>
 800c46c:	2301      	movs	r3, #1
 800c46e:	e000      	b.n	800c472 <xQueueReceiveFromISR+0x42>
 800c470:	2300      	movs	r3, #0
 800c472:	2b00      	cmp	r3, #0
 800c474:	d10b      	bne.n	800c48e <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800c476:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c47a:	f383 8811 	msr	BASEPRI, r3
 800c47e:	f3bf 8f6f 	isb	sy
 800c482:	f3bf 8f4f 	dsb	sy
 800c486:	61fb      	str	r3, [r7, #28]
}
 800c488:	bf00      	nop
 800c48a:	bf00      	nop
 800c48c:	e7fd      	b.n	800c48a <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c48e:	f002 f80b 	bl	800e4a8 <vPortValidateInterruptPriority>
	__asm volatile
 800c492:	f3ef 8211 	mrs	r2, BASEPRI
 800c496:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c49a:	f383 8811 	msr	BASEPRI, r3
 800c49e:	f3bf 8f6f 	isb	sy
 800c4a2:	f3bf 8f4f 	dsb	sy
 800c4a6:	61ba      	str	r2, [r7, #24]
 800c4a8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800c4aa:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c4ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c4ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c4b2:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c4b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	d02f      	beq.n	800c51a <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800c4ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4bc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c4c0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c4c4:	68b9      	ldr	r1, [r7, #8]
 800c4c6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c4c8:	f000 f918 	bl	800c6fc <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c4cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c4ce:	1e5a      	subs	r2, r3, #1
 800c4d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4d2:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800c4d4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800c4d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c4dc:	d112      	bne.n	800c504 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c4de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4e0:	691b      	ldr	r3, [r3, #16]
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d016      	beq.n	800c514 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c4e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4e8:	3310      	adds	r3, #16
 800c4ea:	4618      	mov	r0, r3
 800c4ec:	f000 fec6 	bl	800d27c <xTaskRemoveFromEventList>
 800c4f0:	4603      	mov	r3, r0
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d00e      	beq.n	800c514 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	d00b      	beq.n	800c514 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	2201      	movs	r2, #1
 800c500:	601a      	str	r2, [r3, #0]
 800c502:	e007      	b.n	800c514 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800c504:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c508:	3301      	adds	r3, #1
 800c50a:	b2db      	uxtb	r3, r3
 800c50c:	b25a      	sxtb	r2, r3
 800c50e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c510:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800c514:	2301      	movs	r3, #1
 800c516:	637b      	str	r3, [r7, #52]	@ 0x34
 800c518:	e001      	b.n	800c51e <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800c51a:	2300      	movs	r3, #0
 800c51c:	637b      	str	r3, [r7, #52]	@ 0x34
 800c51e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c520:	613b      	str	r3, [r7, #16]
	__asm volatile
 800c522:	693b      	ldr	r3, [r7, #16]
 800c524:	f383 8811 	msr	BASEPRI, r3
}
 800c528:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c52a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800c52c:	4618      	mov	r0, r3
 800c52e:	3738      	adds	r7, #56	@ 0x38
 800c530:	46bd      	mov	sp, r7
 800c532:	bd80      	pop	{r7, pc}

0800c534 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800c534:	b580      	push	{r7, lr}
 800c536:	b084      	sub	sp, #16
 800c538:	af00      	add	r7, sp, #0
 800c53a:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	2b00      	cmp	r3, #0
 800c540:	d10b      	bne.n	800c55a <uxQueueMessagesWaiting+0x26>
	__asm volatile
 800c542:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c546:	f383 8811 	msr	BASEPRI, r3
 800c54a:	f3bf 8f6f 	isb	sy
 800c54e:	f3bf 8f4f 	dsb	sy
 800c552:	60bb      	str	r3, [r7, #8]
}
 800c554:	bf00      	nop
 800c556:	bf00      	nop
 800c558:	e7fd      	b.n	800c556 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 800c55a:	f001 fec5 	bl	800e2e8 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c562:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800c564:	f001 fef2 	bl	800e34c <vPortExitCritical>

	return uxReturn;
 800c568:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800c56a:	4618      	mov	r0, r3
 800c56c:	3710      	adds	r7, #16
 800c56e:	46bd      	mov	sp, r7
 800c570:	bd80      	pop	{r7, pc}

0800c572 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 800c572:	b480      	push	{r7}
 800c574:	b087      	sub	sp, #28
 800c576:	af00      	add	r7, sp, #0
 800c578:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800c57e:	697b      	ldr	r3, [r7, #20]
 800c580:	2b00      	cmp	r3, #0
 800c582:	d10b      	bne.n	800c59c <uxQueueMessagesWaitingFromISR+0x2a>
	__asm volatile
 800c584:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c588:	f383 8811 	msr	BASEPRI, r3
 800c58c:	f3bf 8f6f 	isb	sy
 800c590:	f3bf 8f4f 	dsb	sy
 800c594:	60fb      	str	r3, [r7, #12]
}
 800c596:	bf00      	nop
 800c598:	bf00      	nop
 800c59a:	e7fd      	b.n	800c598 <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 800c59c:	697b      	ldr	r3, [r7, #20]
 800c59e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c5a0:	613b      	str	r3, [r7, #16]

	return uxReturn;
 800c5a2:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800c5a4:	4618      	mov	r0, r3
 800c5a6:	371c      	adds	r7, #28
 800c5a8:	46bd      	mov	sp, r7
 800c5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ae:	4770      	bx	lr

0800c5b0 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800c5b0:	b580      	push	{r7, lr}
 800c5b2:	b084      	sub	sp, #16
 800c5b4:	af00      	add	r7, sp, #0
 800c5b6:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c5bc:	68fb      	ldr	r3, [r7, #12]
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d10b      	bne.n	800c5da <vQueueDelete+0x2a>
	__asm volatile
 800c5c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c5c6:	f383 8811 	msr	BASEPRI, r3
 800c5ca:	f3bf 8f6f 	isb	sy
 800c5ce:	f3bf 8f4f 	dsb	sy
 800c5d2:	60bb      	str	r3, [r7, #8]
}
 800c5d4:	bf00      	nop
 800c5d6:	bf00      	nop
 800c5d8:	e7fd      	b.n	800c5d6 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800c5da:	68f8      	ldr	r0, [r7, #12]
 800c5dc:	f000 f95e 	bl	800c89c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800c5e0:	68fb      	ldr	r3, [r7, #12]
 800c5e2:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d102      	bne.n	800c5f0 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 800c5ea:	68f8      	ldr	r0, [r7, #12]
 800c5ec:	f002 f86c 	bl	800e6c8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800c5f0:	bf00      	nop
 800c5f2:	3710      	adds	r7, #16
 800c5f4:	46bd      	mov	sp, r7
 800c5f6:	bd80      	pop	{r7, pc}

0800c5f8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800c5f8:	b480      	push	{r7}
 800c5fa:	b085      	sub	sp, #20
 800c5fc:	af00      	add	r7, sp, #0
 800c5fe:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c604:	2b00      	cmp	r3, #0
 800c606:	d006      	beq.n	800c616 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800c612:	60fb      	str	r3, [r7, #12]
 800c614:	e001      	b.n	800c61a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800c616:	2300      	movs	r3, #0
 800c618:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800c61a:	68fb      	ldr	r3, [r7, #12]
	}
 800c61c:	4618      	mov	r0, r3
 800c61e:	3714      	adds	r7, #20
 800c620:	46bd      	mov	sp, r7
 800c622:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c626:	4770      	bx	lr

0800c628 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c628:	b580      	push	{r7, lr}
 800c62a:	b086      	sub	sp, #24
 800c62c:	af00      	add	r7, sp, #0
 800c62e:	60f8      	str	r0, [r7, #12]
 800c630:	60b9      	str	r1, [r7, #8]
 800c632:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c634:	2300      	movs	r3, #0
 800c636:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c638:	68fb      	ldr	r3, [r7, #12]
 800c63a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c63c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c63e:	68fb      	ldr	r3, [r7, #12]
 800c640:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c642:	2b00      	cmp	r3, #0
 800c644:	d10d      	bne.n	800c662 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c646:	68fb      	ldr	r3, [r7, #12]
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d14d      	bne.n	800c6ea <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c64e:	68fb      	ldr	r3, [r7, #12]
 800c650:	689b      	ldr	r3, [r3, #8]
 800c652:	4618      	mov	r0, r3
 800c654:	f001 f85e 	bl	800d714 <xTaskPriorityDisinherit>
 800c658:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c65a:	68fb      	ldr	r3, [r7, #12]
 800c65c:	2200      	movs	r2, #0
 800c65e:	609a      	str	r2, [r3, #8]
 800c660:	e043      	b.n	800c6ea <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	2b00      	cmp	r3, #0
 800c666:	d119      	bne.n	800c69c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c668:	68fb      	ldr	r3, [r7, #12]
 800c66a:	6858      	ldr	r0, [r3, #4]
 800c66c:	68fb      	ldr	r3, [r7, #12]
 800c66e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c670:	461a      	mov	r2, r3
 800c672:	68b9      	ldr	r1, [r7, #8]
 800c674:	f003 fa3f 	bl	800faf6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c678:	68fb      	ldr	r3, [r7, #12]
 800c67a:	685a      	ldr	r2, [r3, #4]
 800c67c:	68fb      	ldr	r3, [r7, #12]
 800c67e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c680:	441a      	add	r2, r3
 800c682:	68fb      	ldr	r3, [r7, #12]
 800c684:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c686:	68fb      	ldr	r3, [r7, #12]
 800c688:	685a      	ldr	r2, [r3, #4]
 800c68a:	68fb      	ldr	r3, [r7, #12]
 800c68c:	689b      	ldr	r3, [r3, #8]
 800c68e:	429a      	cmp	r2, r3
 800c690:	d32b      	bcc.n	800c6ea <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c692:	68fb      	ldr	r3, [r7, #12]
 800c694:	681a      	ldr	r2, [r3, #0]
 800c696:	68fb      	ldr	r3, [r7, #12]
 800c698:	605a      	str	r2, [r3, #4]
 800c69a:	e026      	b.n	800c6ea <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c69c:	68fb      	ldr	r3, [r7, #12]
 800c69e:	68d8      	ldr	r0, [r3, #12]
 800c6a0:	68fb      	ldr	r3, [r7, #12]
 800c6a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c6a4:	461a      	mov	r2, r3
 800c6a6:	68b9      	ldr	r1, [r7, #8]
 800c6a8:	f003 fa25 	bl	800faf6 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c6ac:	68fb      	ldr	r3, [r7, #12]
 800c6ae:	68da      	ldr	r2, [r3, #12]
 800c6b0:	68fb      	ldr	r3, [r7, #12]
 800c6b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c6b4:	425b      	negs	r3, r3
 800c6b6:	441a      	add	r2, r3
 800c6b8:	68fb      	ldr	r3, [r7, #12]
 800c6ba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c6bc:	68fb      	ldr	r3, [r7, #12]
 800c6be:	68da      	ldr	r2, [r3, #12]
 800c6c0:	68fb      	ldr	r3, [r7, #12]
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	429a      	cmp	r2, r3
 800c6c6:	d207      	bcs.n	800c6d8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c6c8:	68fb      	ldr	r3, [r7, #12]
 800c6ca:	689a      	ldr	r2, [r3, #8]
 800c6cc:	68fb      	ldr	r3, [r7, #12]
 800c6ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c6d0:	425b      	negs	r3, r3
 800c6d2:	441a      	add	r2, r3
 800c6d4:	68fb      	ldr	r3, [r7, #12]
 800c6d6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	2b02      	cmp	r3, #2
 800c6dc:	d105      	bne.n	800c6ea <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c6de:	693b      	ldr	r3, [r7, #16]
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	d002      	beq.n	800c6ea <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c6e4:	693b      	ldr	r3, [r7, #16]
 800c6e6:	3b01      	subs	r3, #1
 800c6e8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c6ea:	693b      	ldr	r3, [r7, #16]
 800c6ec:	1c5a      	adds	r2, r3, #1
 800c6ee:	68fb      	ldr	r3, [r7, #12]
 800c6f0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800c6f2:	697b      	ldr	r3, [r7, #20]
}
 800c6f4:	4618      	mov	r0, r3
 800c6f6:	3718      	adds	r7, #24
 800c6f8:	46bd      	mov	sp, r7
 800c6fa:	bd80      	pop	{r7, pc}

0800c6fc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c6fc:	b580      	push	{r7, lr}
 800c6fe:	b082      	sub	sp, #8
 800c700:	af00      	add	r7, sp, #0
 800c702:	6078      	str	r0, [r7, #4]
 800c704:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	d018      	beq.n	800c740 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	68da      	ldr	r2, [r3, #12]
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c716:	441a      	add	r2, r3
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	68da      	ldr	r2, [r3, #12]
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	689b      	ldr	r3, [r3, #8]
 800c724:	429a      	cmp	r2, r3
 800c726:	d303      	bcc.n	800c730 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	681a      	ldr	r2, [r3, #0]
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	68d9      	ldr	r1, [r3, #12]
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c738:	461a      	mov	r2, r3
 800c73a:	6838      	ldr	r0, [r7, #0]
 800c73c:	f003 f9db 	bl	800faf6 <memcpy>
	}
}
 800c740:	bf00      	nop
 800c742:	3708      	adds	r7, #8
 800c744:	46bd      	mov	sp, r7
 800c746:	bd80      	pop	{r7, pc}

0800c748 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c748:	b580      	push	{r7, lr}
 800c74a:	b084      	sub	sp, #16
 800c74c:	af00      	add	r7, sp, #0
 800c74e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c750:	f001 fdca 	bl	800e2e8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c75a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c75c:	e011      	b.n	800c782 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c762:	2b00      	cmp	r3, #0
 800c764:	d012      	beq.n	800c78c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	3324      	adds	r3, #36	@ 0x24
 800c76a:	4618      	mov	r0, r3
 800c76c:	f000 fd86 	bl	800d27c <xTaskRemoveFromEventList>
 800c770:	4603      	mov	r3, r0
 800c772:	2b00      	cmp	r3, #0
 800c774:	d001      	beq.n	800c77a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c776:	f000 fe5f 	bl	800d438 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c77a:	7bfb      	ldrb	r3, [r7, #15]
 800c77c:	3b01      	subs	r3, #1
 800c77e:	b2db      	uxtb	r3, r3
 800c780:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c782:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c786:	2b00      	cmp	r3, #0
 800c788:	dce9      	bgt.n	800c75e <prvUnlockQueue+0x16>
 800c78a:	e000      	b.n	800c78e <prvUnlockQueue+0x46>
					break;
 800c78c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	22ff      	movs	r2, #255	@ 0xff
 800c792:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800c796:	f001 fdd9 	bl	800e34c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c79a:	f001 fda5 	bl	800e2e8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c7a4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c7a6:	e011      	b.n	800c7cc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	691b      	ldr	r3, [r3, #16]
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	d012      	beq.n	800c7d6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	3310      	adds	r3, #16
 800c7b4:	4618      	mov	r0, r3
 800c7b6:	f000 fd61 	bl	800d27c <xTaskRemoveFromEventList>
 800c7ba:	4603      	mov	r3, r0
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	d001      	beq.n	800c7c4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c7c0:	f000 fe3a 	bl	800d438 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c7c4:	7bbb      	ldrb	r3, [r7, #14]
 800c7c6:	3b01      	subs	r3, #1
 800c7c8:	b2db      	uxtb	r3, r3
 800c7ca:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c7cc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	dce9      	bgt.n	800c7a8 <prvUnlockQueue+0x60>
 800c7d4:	e000      	b.n	800c7d8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c7d6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	22ff      	movs	r2, #255	@ 0xff
 800c7dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800c7e0:	f001 fdb4 	bl	800e34c <vPortExitCritical>
}
 800c7e4:	bf00      	nop
 800c7e6:	3710      	adds	r7, #16
 800c7e8:	46bd      	mov	sp, r7
 800c7ea:	bd80      	pop	{r7, pc}

0800c7ec <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c7ec:	b580      	push	{r7, lr}
 800c7ee:	b084      	sub	sp, #16
 800c7f0:	af00      	add	r7, sp, #0
 800c7f2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c7f4:	f001 fd78 	bl	800e2e8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d102      	bne.n	800c806 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c800:	2301      	movs	r3, #1
 800c802:	60fb      	str	r3, [r7, #12]
 800c804:	e001      	b.n	800c80a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c806:	2300      	movs	r3, #0
 800c808:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c80a:	f001 fd9f 	bl	800e34c <vPortExitCritical>

	return xReturn;
 800c80e:	68fb      	ldr	r3, [r7, #12]
}
 800c810:	4618      	mov	r0, r3
 800c812:	3710      	adds	r7, #16
 800c814:	46bd      	mov	sp, r7
 800c816:	bd80      	pop	{r7, pc}

0800c818 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c818:	b580      	push	{r7, lr}
 800c81a:	b084      	sub	sp, #16
 800c81c:	af00      	add	r7, sp, #0
 800c81e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c820:	f001 fd62 	bl	800e2e8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c82c:	429a      	cmp	r2, r3
 800c82e:	d102      	bne.n	800c836 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c830:	2301      	movs	r3, #1
 800c832:	60fb      	str	r3, [r7, #12]
 800c834:	e001      	b.n	800c83a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c836:	2300      	movs	r3, #0
 800c838:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c83a:	f001 fd87 	bl	800e34c <vPortExitCritical>

	return xReturn;
 800c83e:	68fb      	ldr	r3, [r7, #12]
}
 800c840:	4618      	mov	r0, r3
 800c842:	3710      	adds	r7, #16
 800c844:	46bd      	mov	sp, r7
 800c846:	bd80      	pop	{r7, pc}

0800c848 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800c848:	b480      	push	{r7}
 800c84a:	b085      	sub	sp, #20
 800c84c:	af00      	add	r7, sp, #0
 800c84e:	6078      	str	r0, [r7, #4]
 800c850:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c852:	2300      	movs	r3, #0
 800c854:	60fb      	str	r3, [r7, #12]
 800c856:	e014      	b.n	800c882 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800c858:	4a0f      	ldr	r2, [pc, #60]	@ (800c898 <vQueueAddToRegistry+0x50>)
 800c85a:	68fb      	ldr	r3, [r7, #12]
 800c85c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800c860:	2b00      	cmp	r3, #0
 800c862:	d10b      	bne.n	800c87c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800c864:	490c      	ldr	r1, [pc, #48]	@ (800c898 <vQueueAddToRegistry+0x50>)
 800c866:	68fb      	ldr	r3, [r7, #12]
 800c868:	683a      	ldr	r2, [r7, #0]
 800c86a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800c86e:	4a0a      	ldr	r2, [pc, #40]	@ (800c898 <vQueueAddToRegistry+0x50>)
 800c870:	68fb      	ldr	r3, [r7, #12]
 800c872:	00db      	lsls	r3, r3, #3
 800c874:	4413      	add	r3, r2
 800c876:	687a      	ldr	r2, [r7, #4]
 800c878:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800c87a:	e006      	b.n	800c88a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c87c:	68fb      	ldr	r3, [r7, #12]
 800c87e:	3301      	adds	r3, #1
 800c880:	60fb      	str	r3, [r7, #12]
 800c882:	68fb      	ldr	r3, [r7, #12]
 800c884:	2b07      	cmp	r3, #7
 800c886:	d9e7      	bls.n	800c858 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800c888:	bf00      	nop
 800c88a:	bf00      	nop
 800c88c:	3714      	adds	r7, #20
 800c88e:	46bd      	mov	sp, r7
 800c890:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c894:	4770      	bx	lr
 800c896:	bf00      	nop
 800c898:	20000f98 	.word	0x20000f98

0800c89c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800c89c:	b480      	push	{r7}
 800c89e:	b085      	sub	sp, #20
 800c8a0:	af00      	add	r7, sp, #0
 800c8a2:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c8a4:	2300      	movs	r3, #0
 800c8a6:	60fb      	str	r3, [r7, #12]
 800c8a8:	e016      	b.n	800c8d8 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800c8aa:	4a10      	ldr	r2, [pc, #64]	@ (800c8ec <vQueueUnregisterQueue+0x50>)
 800c8ac:	68fb      	ldr	r3, [r7, #12]
 800c8ae:	00db      	lsls	r3, r3, #3
 800c8b0:	4413      	add	r3, r2
 800c8b2:	685b      	ldr	r3, [r3, #4]
 800c8b4:	687a      	ldr	r2, [r7, #4]
 800c8b6:	429a      	cmp	r2, r3
 800c8b8:	d10b      	bne.n	800c8d2 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800c8ba:	4a0c      	ldr	r2, [pc, #48]	@ (800c8ec <vQueueUnregisterQueue+0x50>)
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	2100      	movs	r1, #0
 800c8c0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800c8c4:	4a09      	ldr	r2, [pc, #36]	@ (800c8ec <vQueueUnregisterQueue+0x50>)
 800c8c6:	68fb      	ldr	r3, [r7, #12]
 800c8c8:	00db      	lsls	r3, r3, #3
 800c8ca:	4413      	add	r3, r2
 800c8cc:	2200      	movs	r2, #0
 800c8ce:	605a      	str	r2, [r3, #4]
				break;
 800c8d0:	e006      	b.n	800c8e0 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c8d2:	68fb      	ldr	r3, [r7, #12]
 800c8d4:	3301      	adds	r3, #1
 800c8d6:	60fb      	str	r3, [r7, #12]
 800c8d8:	68fb      	ldr	r3, [r7, #12]
 800c8da:	2b07      	cmp	r3, #7
 800c8dc:	d9e5      	bls.n	800c8aa <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800c8de:	bf00      	nop
 800c8e0:	bf00      	nop
 800c8e2:	3714      	adds	r7, #20
 800c8e4:	46bd      	mov	sp, r7
 800c8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ea:	4770      	bx	lr
 800c8ec:	20000f98 	.word	0x20000f98

0800c8f0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c8f0:	b580      	push	{r7, lr}
 800c8f2:	b086      	sub	sp, #24
 800c8f4:	af00      	add	r7, sp, #0
 800c8f6:	60f8      	str	r0, [r7, #12]
 800c8f8:	60b9      	str	r1, [r7, #8]
 800c8fa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800c900:	f001 fcf2 	bl	800e2e8 <vPortEnterCritical>
 800c904:	697b      	ldr	r3, [r7, #20]
 800c906:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c90a:	b25b      	sxtb	r3, r3
 800c90c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c910:	d103      	bne.n	800c91a <vQueueWaitForMessageRestricted+0x2a>
 800c912:	697b      	ldr	r3, [r7, #20]
 800c914:	2200      	movs	r2, #0
 800c916:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c91a:	697b      	ldr	r3, [r7, #20]
 800c91c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c920:	b25b      	sxtb	r3, r3
 800c922:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c926:	d103      	bne.n	800c930 <vQueueWaitForMessageRestricted+0x40>
 800c928:	697b      	ldr	r3, [r7, #20]
 800c92a:	2200      	movs	r2, #0
 800c92c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c930:	f001 fd0c 	bl	800e34c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800c934:	697b      	ldr	r3, [r7, #20]
 800c936:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c938:	2b00      	cmp	r3, #0
 800c93a:	d106      	bne.n	800c94a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800c93c:	697b      	ldr	r3, [r7, #20]
 800c93e:	3324      	adds	r3, #36	@ 0x24
 800c940:	687a      	ldr	r2, [r7, #4]
 800c942:	68b9      	ldr	r1, [r7, #8]
 800c944:	4618      	mov	r0, r3
 800c946:	f000 fc6d 	bl	800d224 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800c94a:	6978      	ldr	r0, [r7, #20]
 800c94c:	f7ff fefc 	bl	800c748 <prvUnlockQueue>
	}
 800c950:	bf00      	nop
 800c952:	3718      	adds	r7, #24
 800c954:	46bd      	mov	sp, r7
 800c956:	bd80      	pop	{r7, pc}

0800c958 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c958:	b580      	push	{r7, lr}
 800c95a:	b08e      	sub	sp, #56	@ 0x38
 800c95c:	af04      	add	r7, sp, #16
 800c95e:	60f8      	str	r0, [r7, #12]
 800c960:	60b9      	str	r1, [r7, #8]
 800c962:	607a      	str	r2, [r7, #4]
 800c964:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c966:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c968:	2b00      	cmp	r3, #0
 800c96a:	d10b      	bne.n	800c984 <xTaskCreateStatic+0x2c>
	__asm volatile
 800c96c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c970:	f383 8811 	msr	BASEPRI, r3
 800c974:	f3bf 8f6f 	isb	sy
 800c978:	f3bf 8f4f 	dsb	sy
 800c97c:	623b      	str	r3, [r7, #32]
}
 800c97e:	bf00      	nop
 800c980:	bf00      	nop
 800c982:	e7fd      	b.n	800c980 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800c984:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c986:	2b00      	cmp	r3, #0
 800c988:	d10b      	bne.n	800c9a2 <xTaskCreateStatic+0x4a>
	__asm volatile
 800c98a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c98e:	f383 8811 	msr	BASEPRI, r3
 800c992:	f3bf 8f6f 	isb	sy
 800c996:	f3bf 8f4f 	dsb	sy
 800c99a:	61fb      	str	r3, [r7, #28]
}
 800c99c:	bf00      	nop
 800c99e:	bf00      	nop
 800c9a0:	e7fd      	b.n	800c99e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c9a2:	23a8      	movs	r3, #168	@ 0xa8
 800c9a4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c9a6:	693b      	ldr	r3, [r7, #16]
 800c9a8:	2ba8      	cmp	r3, #168	@ 0xa8
 800c9aa:	d00b      	beq.n	800c9c4 <xTaskCreateStatic+0x6c>
	__asm volatile
 800c9ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c9b0:	f383 8811 	msr	BASEPRI, r3
 800c9b4:	f3bf 8f6f 	isb	sy
 800c9b8:	f3bf 8f4f 	dsb	sy
 800c9bc:	61bb      	str	r3, [r7, #24]
}
 800c9be:	bf00      	nop
 800c9c0:	bf00      	nop
 800c9c2:	e7fd      	b.n	800c9c0 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c9c4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c9c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	d01e      	beq.n	800ca0a <xTaskCreateStatic+0xb2>
 800c9cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	d01b      	beq.n	800ca0a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c9d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c9d4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c9d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9d8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c9da:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c9dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9de:	2202      	movs	r2, #2
 800c9e0:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c9e4:	2300      	movs	r3, #0
 800c9e6:	9303      	str	r3, [sp, #12]
 800c9e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9ea:	9302      	str	r3, [sp, #8]
 800c9ec:	f107 0314 	add.w	r3, r7, #20
 800c9f0:	9301      	str	r3, [sp, #4]
 800c9f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c9f4:	9300      	str	r3, [sp, #0]
 800c9f6:	683b      	ldr	r3, [r7, #0]
 800c9f8:	687a      	ldr	r2, [r7, #4]
 800c9fa:	68b9      	ldr	r1, [r7, #8]
 800c9fc:	68f8      	ldr	r0, [r7, #12]
 800c9fe:	f000 f851 	bl	800caa4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ca02:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ca04:	f000 f8f6 	bl	800cbf4 <prvAddNewTaskToReadyList>
 800ca08:	e001      	b.n	800ca0e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800ca0a:	2300      	movs	r3, #0
 800ca0c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ca0e:	697b      	ldr	r3, [r7, #20]
	}
 800ca10:	4618      	mov	r0, r3
 800ca12:	3728      	adds	r7, #40	@ 0x28
 800ca14:	46bd      	mov	sp, r7
 800ca16:	bd80      	pop	{r7, pc}

0800ca18 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800ca18:	b580      	push	{r7, lr}
 800ca1a:	b08c      	sub	sp, #48	@ 0x30
 800ca1c:	af04      	add	r7, sp, #16
 800ca1e:	60f8      	str	r0, [r7, #12]
 800ca20:	60b9      	str	r1, [r7, #8]
 800ca22:	603b      	str	r3, [r7, #0]
 800ca24:	4613      	mov	r3, r2
 800ca26:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ca28:	88fb      	ldrh	r3, [r7, #6]
 800ca2a:	009b      	lsls	r3, r3, #2
 800ca2c:	4618      	mov	r0, r3
 800ca2e:	f001 fd7d 	bl	800e52c <pvPortMalloc>
 800ca32:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ca34:	697b      	ldr	r3, [r7, #20]
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d00e      	beq.n	800ca58 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800ca3a:	20a8      	movs	r0, #168	@ 0xa8
 800ca3c:	f001 fd76 	bl	800e52c <pvPortMalloc>
 800ca40:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ca42:	69fb      	ldr	r3, [r7, #28]
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d003      	beq.n	800ca50 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ca48:	69fb      	ldr	r3, [r7, #28]
 800ca4a:	697a      	ldr	r2, [r7, #20]
 800ca4c:	631a      	str	r2, [r3, #48]	@ 0x30
 800ca4e:	e005      	b.n	800ca5c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800ca50:	6978      	ldr	r0, [r7, #20]
 800ca52:	f001 fe39 	bl	800e6c8 <vPortFree>
 800ca56:	e001      	b.n	800ca5c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800ca58:	2300      	movs	r3, #0
 800ca5a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800ca5c:	69fb      	ldr	r3, [r7, #28]
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	d017      	beq.n	800ca92 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ca62:	69fb      	ldr	r3, [r7, #28]
 800ca64:	2200      	movs	r2, #0
 800ca66:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ca6a:	88fa      	ldrh	r2, [r7, #6]
 800ca6c:	2300      	movs	r3, #0
 800ca6e:	9303      	str	r3, [sp, #12]
 800ca70:	69fb      	ldr	r3, [r7, #28]
 800ca72:	9302      	str	r3, [sp, #8]
 800ca74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca76:	9301      	str	r3, [sp, #4]
 800ca78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca7a:	9300      	str	r3, [sp, #0]
 800ca7c:	683b      	ldr	r3, [r7, #0]
 800ca7e:	68b9      	ldr	r1, [r7, #8]
 800ca80:	68f8      	ldr	r0, [r7, #12]
 800ca82:	f000 f80f 	bl	800caa4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ca86:	69f8      	ldr	r0, [r7, #28]
 800ca88:	f000 f8b4 	bl	800cbf4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ca8c:	2301      	movs	r3, #1
 800ca8e:	61bb      	str	r3, [r7, #24]
 800ca90:	e002      	b.n	800ca98 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ca92:	f04f 33ff 	mov.w	r3, #4294967295
 800ca96:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ca98:	69bb      	ldr	r3, [r7, #24]
	}
 800ca9a:	4618      	mov	r0, r3
 800ca9c:	3720      	adds	r7, #32
 800ca9e:	46bd      	mov	sp, r7
 800caa0:	bd80      	pop	{r7, pc}
	...

0800caa4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800caa4:	b580      	push	{r7, lr}
 800caa6:	b088      	sub	sp, #32
 800caa8:	af00      	add	r7, sp, #0
 800caaa:	60f8      	str	r0, [r7, #12]
 800caac:	60b9      	str	r1, [r7, #8]
 800caae:	607a      	str	r2, [r7, #4]
 800cab0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800cab2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cab4:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	009b      	lsls	r3, r3, #2
 800caba:	461a      	mov	r2, r3
 800cabc:	21a5      	movs	r1, #165	@ 0xa5
 800cabe:	f002 ff13 	bl	800f8e8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800cac2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cac4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cacc:	3b01      	subs	r3, #1
 800cace:	009b      	lsls	r3, r3, #2
 800cad0:	4413      	add	r3, r2
 800cad2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800cad4:	69bb      	ldr	r3, [r7, #24]
 800cad6:	f023 0307 	bic.w	r3, r3, #7
 800cada:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800cadc:	69bb      	ldr	r3, [r7, #24]
 800cade:	f003 0307 	and.w	r3, r3, #7
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	d00b      	beq.n	800cafe <prvInitialiseNewTask+0x5a>
	__asm volatile
 800cae6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800caea:	f383 8811 	msr	BASEPRI, r3
 800caee:	f3bf 8f6f 	isb	sy
 800caf2:	f3bf 8f4f 	dsb	sy
 800caf6:	617b      	str	r3, [r7, #20]
}
 800caf8:	bf00      	nop
 800cafa:	bf00      	nop
 800cafc:	e7fd      	b.n	800cafa <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800cafe:	68bb      	ldr	r3, [r7, #8]
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d01f      	beq.n	800cb44 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cb04:	2300      	movs	r3, #0
 800cb06:	61fb      	str	r3, [r7, #28]
 800cb08:	e012      	b.n	800cb30 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800cb0a:	68ba      	ldr	r2, [r7, #8]
 800cb0c:	69fb      	ldr	r3, [r7, #28]
 800cb0e:	4413      	add	r3, r2
 800cb10:	7819      	ldrb	r1, [r3, #0]
 800cb12:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cb14:	69fb      	ldr	r3, [r7, #28]
 800cb16:	4413      	add	r3, r2
 800cb18:	3334      	adds	r3, #52	@ 0x34
 800cb1a:	460a      	mov	r2, r1
 800cb1c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800cb1e:	68ba      	ldr	r2, [r7, #8]
 800cb20:	69fb      	ldr	r3, [r7, #28]
 800cb22:	4413      	add	r3, r2
 800cb24:	781b      	ldrb	r3, [r3, #0]
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d006      	beq.n	800cb38 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cb2a:	69fb      	ldr	r3, [r7, #28]
 800cb2c:	3301      	adds	r3, #1
 800cb2e:	61fb      	str	r3, [r7, #28]
 800cb30:	69fb      	ldr	r3, [r7, #28]
 800cb32:	2b0f      	cmp	r3, #15
 800cb34:	d9e9      	bls.n	800cb0a <prvInitialiseNewTask+0x66>
 800cb36:	e000      	b.n	800cb3a <prvInitialiseNewTask+0x96>
			{
				break;
 800cb38:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800cb3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb3c:	2200      	movs	r2, #0
 800cb3e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800cb42:	e003      	b.n	800cb4c <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800cb44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb46:	2200      	movs	r2, #0
 800cb48:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800cb4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb4e:	2b37      	cmp	r3, #55	@ 0x37
 800cb50:	d901      	bls.n	800cb56 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800cb52:	2337      	movs	r3, #55	@ 0x37
 800cb54:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800cb56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb58:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cb5a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800cb5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb5e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cb60:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800cb62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb64:	2200      	movs	r2, #0
 800cb66:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800cb68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb6a:	3304      	adds	r3, #4
 800cb6c:	4618      	mov	r0, r3
 800cb6e:	f7fe fdf5 	bl	800b75c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800cb72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb74:	3318      	adds	r3, #24
 800cb76:	4618      	mov	r0, r3
 800cb78:	f7fe fdf0 	bl	800b75c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800cb7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb7e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cb80:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cb82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb84:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800cb88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb8a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800cb8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb8e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cb90:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800cb92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb94:	2200      	movs	r2, #0
 800cb96:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800cb9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb9c:	2200      	movs	r2, #0
 800cb9e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800cba2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cba4:	3354      	adds	r3, #84	@ 0x54
 800cba6:	224c      	movs	r2, #76	@ 0x4c
 800cba8:	2100      	movs	r1, #0
 800cbaa:	4618      	mov	r0, r3
 800cbac:	f002 fe9c 	bl	800f8e8 <memset>
 800cbb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbb2:	4a0d      	ldr	r2, [pc, #52]	@ (800cbe8 <prvInitialiseNewTask+0x144>)
 800cbb4:	659a      	str	r2, [r3, #88]	@ 0x58
 800cbb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbb8:	4a0c      	ldr	r2, [pc, #48]	@ (800cbec <prvInitialiseNewTask+0x148>)
 800cbba:	65da      	str	r2, [r3, #92]	@ 0x5c
 800cbbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbbe:	4a0c      	ldr	r2, [pc, #48]	@ (800cbf0 <prvInitialiseNewTask+0x14c>)
 800cbc0:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800cbc2:	683a      	ldr	r2, [r7, #0]
 800cbc4:	68f9      	ldr	r1, [r7, #12]
 800cbc6:	69b8      	ldr	r0, [r7, #24]
 800cbc8:	f001 fa5a 	bl	800e080 <pxPortInitialiseStack>
 800cbcc:	4602      	mov	r2, r0
 800cbce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbd0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800cbd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	d002      	beq.n	800cbde <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800cbd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cbda:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cbdc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cbde:	bf00      	nop
 800cbe0:	3720      	adds	r7, #32
 800cbe2:	46bd      	mov	sp, r7
 800cbe4:	bd80      	pop	{r7, pc}
 800cbe6:	bf00      	nop
 800cbe8:	20003d3c 	.word	0x20003d3c
 800cbec:	20003da4 	.word	0x20003da4
 800cbf0:	20003e0c 	.word	0x20003e0c

0800cbf4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800cbf4:	b580      	push	{r7, lr}
 800cbf6:	b082      	sub	sp, #8
 800cbf8:	af00      	add	r7, sp, #0
 800cbfa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800cbfc:	f001 fb74 	bl	800e2e8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800cc00:	4b2d      	ldr	r3, [pc, #180]	@ (800ccb8 <prvAddNewTaskToReadyList+0xc4>)
 800cc02:	681b      	ldr	r3, [r3, #0]
 800cc04:	3301      	adds	r3, #1
 800cc06:	4a2c      	ldr	r2, [pc, #176]	@ (800ccb8 <prvAddNewTaskToReadyList+0xc4>)
 800cc08:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800cc0a:	4b2c      	ldr	r3, [pc, #176]	@ (800ccbc <prvAddNewTaskToReadyList+0xc8>)
 800cc0c:	681b      	ldr	r3, [r3, #0]
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	d109      	bne.n	800cc26 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800cc12:	4a2a      	ldr	r2, [pc, #168]	@ (800ccbc <prvAddNewTaskToReadyList+0xc8>)
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800cc18:	4b27      	ldr	r3, [pc, #156]	@ (800ccb8 <prvAddNewTaskToReadyList+0xc4>)
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	2b01      	cmp	r3, #1
 800cc1e:	d110      	bne.n	800cc42 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800cc20:	f000 fc2e 	bl	800d480 <prvInitialiseTaskLists>
 800cc24:	e00d      	b.n	800cc42 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800cc26:	4b26      	ldr	r3, [pc, #152]	@ (800ccc0 <prvAddNewTaskToReadyList+0xcc>)
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	d109      	bne.n	800cc42 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800cc2e:	4b23      	ldr	r3, [pc, #140]	@ (800ccbc <prvAddNewTaskToReadyList+0xc8>)
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cc38:	429a      	cmp	r2, r3
 800cc3a:	d802      	bhi.n	800cc42 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800cc3c:	4a1f      	ldr	r2, [pc, #124]	@ (800ccbc <prvAddNewTaskToReadyList+0xc8>)
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800cc42:	4b20      	ldr	r3, [pc, #128]	@ (800ccc4 <prvAddNewTaskToReadyList+0xd0>)
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	3301      	adds	r3, #1
 800cc48:	4a1e      	ldr	r2, [pc, #120]	@ (800ccc4 <prvAddNewTaskToReadyList+0xd0>)
 800cc4a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800cc4c:	4b1d      	ldr	r3, [pc, #116]	@ (800ccc4 <prvAddNewTaskToReadyList+0xd0>)
 800cc4e:	681a      	ldr	r2, [r3, #0]
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cc58:	4b1b      	ldr	r3, [pc, #108]	@ (800ccc8 <prvAddNewTaskToReadyList+0xd4>)
 800cc5a:	681b      	ldr	r3, [r3, #0]
 800cc5c:	429a      	cmp	r2, r3
 800cc5e:	d903      	bls.n	800cc68 <prvAddNewTaskToReadyList+0x74>
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cc64:	4a18      	ldr	r2, [pc, #96]	@ (800ccc8 <prvAddNewTaskToReadyList+0xd4>)
 800cc66:	6013      	str	r3, [r2, #0]
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cc6c:	4613      	mov	r3, r2
 800cc6e:	009b      	lsls	r3, r3, #2
 800cc70:	4413      	add	r3, r2
 800cc72:	009b      	lsls	r3, r3, #2
 800cc74:	4a15      	ldr	r2, [pc, #84]	@ (800cccc <prvAddNewTaskToReadyList+0xd8>)
 800cc76:	441a      	add	r2, r3
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	3304      	adds	r3, #4
 800cc7c:	4619      	mov	r1, r3
 800cc7e:	4610      	mov	r0, r2
 800cc80:	f7fe fd79 	bl	800b776 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800cc84:	f001 fb62 	bl	800e34c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800cc88:	4b0d      	ldr	r3, [pc, #52]	@ (800ccc0 <prvAddNewTaskToReadyList+0xcc>)
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	d00e      	beq.n	800ccae <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800cc90:	4b0a      	ldr	r3, [pc, #40]	@ (800ccbc <prvAddNewTaskToReadyList+0xc8>)
 800cc92:	681b      	ldr	r3, [r3, #0]
 800cc94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cc9a:	429a      	cmp	r2, r3
 800cc9c:	d207      	bcs.n	800ccae <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800cc9e:	4b0c      	ldr	r3, [pc, #48]	@ (800ccd0 <prvAddNewTaskToReadyList+0xdc>)
 800cca0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cca4:	601a      	str	r2, [r3, #0]
 800cca6:	f3bf 8f4f 	dsb	sy
 800ccaa:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ccae:	bf00      	nop
 800ccb0:	3708      	adds	r7, #8
 800ccb2:	46bd      	mov	sp, r7
 800ccb4:	bd80      	pop	{r7, pc}
 800ccb6:	bf00      	nop
 800ccb8:	200014ac 	.word	0x200014ac
 800ccbc:	20000fd8 	.word	0x20000fd8
 800ccc0:	200014b8 	.word	0x200014b8
 800ccc4:	200014c8 	.word	0x200014c8
 800ccc8:	200014b4 	.word	0x200014b4
 800cccc:	20000fdc 	.word	0x20000fdc
 800ccd0:	e000ed04 	.word	0xe000ed04

0800ccd4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800ccd4:	b580      	push	{r7, lr}
 800ccd6:	b084      	sub	sp, #16
 800ccd8:	af00      	add	r7, sp, #0
 800ccda:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800ccdc:	2300      	movs	r3, #0
 800ccde:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d018      	beq.n	800cd18 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800cce6:	4b14      	ldr	r3, [pc, #80]	@ (800cd38 <vTaskDelay+0x64>)
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	d00b      	beq.n	800cd06 <vTaskDelay+0x32>
	__asm volatile
 800ccee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ccf2:	f383 8811 	msr	BASEPRI, r3
 800ccf6:	f3bf 8f6f 	isb	sy
 800ccfa:	f3bf 8f4f 	dsb	sy
 800ccfe:	60bb      	str	r3, [r7, #8]
}
 800cd00:	bf00      	nop
 800cd02:	bf00      	nop
 800cd04:	e7fd      	b.n	800cd02 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800cd06:	f000 f88b 	bl	800ce20 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800cd0a:	2100      	movs	r1, #0
 800cd0c:	6878      	ldr	r0, [r7, #4]
 800cd0e:	f000 fe09 	bl	800d924 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800cd12:	f000 f893 	bl	800ce3c <xTaskResumeAll>
 800cd16:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800cd18:	68fb      	ldr	r3, [r7, #12]
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d107      	bne.n	800cd2e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800cd1e:	4b07      	ldr	r3, [pc, #28]	@ (800cd3c <vTaskDelay+0x68>)
 800cd20:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cd24:	601a      	str	r2, [r3, #0]
 800cd26:	f3bf 8f4f 	dsb	sy
 800cd2a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800cd2e:	bf00      	nop
 800cd30:	3710      	adds	r7, #16
 800cd32:	46bd      	mov	sp, r7
 800cd34:	bd80      	pop	{r7, pc}
 800cd36:	bf00      	nop
 800cd38:	200014d4 	.word	0x200014d4
 800cd3c:	e000ed04 	.word	0xe000ed04

0800cd40 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800cd40:	b580      	push	{r7, lr}
 800cd42:	b08a      	sub	sp, #40	@ 0x28
 800cd44:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800cd46:	2300      	movs	r3, #0
 800cd48:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800cd4a:	2300      	movs	r3, #0
 800cd4c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800cd4e:	463a      	mov	r2, r7
 800cd50:	1d39      	adds	r1, r7, #4
 800cd52:	f107 0308 	add.w	r3, r7, #8
 800cd56:	4618      	mov	r0, r3
 800cd58:	f7fe fcac 	bl	800b6b4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800cd5c:	6839      	ldr	r1, [r7, #0]
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	68ba      	ldr	r2, [r7, #8]
 800cd62:	9202      	str	r2, [sp, #8]
 800cd64:	9301      	str	r3, [sp, #4]
 800cd66:	2300      	movs	r3, #0
 800cd68:	9300      	str	r3, [sp, #0]
 800cd6a:	2300      	movs	r3, #0
 800cd6c:	460a      	mov	r2, r1
 800cd6e:	4924      	ldr	r1, [pc, #144]	@ (800ce00 <vTaskStartScheduler+0xc0>)
 800cd70:	4824      	ldr	r0, [pc, #144]	@ (800ce04 <vTaskStartScheduler+0xc4>)
 800cd72:	f7ff fdf1 	bl	800c958 <xTaskCreateStatic>
 800cd76:	4603      	mov	r3, r0
 800cd78:	4a23      	ldr	r2, [pc, #140]	@ (800ce08 <vTaskStartScheduler+0xc8>)
 800cd7a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800cd7c:	4b22      	ldr	r3, [pc, #136]	@ (800ce08 <vTaskStartScheduler+0xc8>)
 800cd7e:	681b      	ldr	r3, [r3, #0]
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d002      	beq.n	800cd8a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800cd84:	2301      	movs	r3, #1
 800cd86:	617b      	str	r3, [r7, #20]
 800cd88:	e001      	b.n	800cd8e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800cd8a:	2300      	movs	r3, #0
 800cd8c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800cd8e:	697b      	ldr	r3, [r7, #20]
 800cd90:	2b01      	cmp	r3, #1
 800cd92:	d102      	bne.n	800cd9a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800cd94:	f000 fe1a 	bl	800d9cc <xTimerCreateTimerTask>
 800cd98:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800cd9a:	697b      	ldr	r3, [r7, #20]
 800cd9c:	2b01      	cmp	r3, #1
 800cd9e:	d11b      	bne.n	800cdd8 <vTaskStartScheduler+0x98>
	__asm volatile
 800cda0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cda4:	f383 8811 	msr	BASEPRI, r3
 800cda8:	f3bf 8f6f 	isb	sy
 800cdac:	f3bf 8f4f 	dsb	sy
 800cdb0:	613b      	str	r3, [r7, #16]
}
 800cdb2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800cdb4:	4b15      	ldr	r3, [pc, #84]	@ (800ce0c <vTaskStartScheduler+0xcc>)
 800cdb6:	681b      	ldr	r3, [r3, #0]
 800cdb8:	3354      	adds	r3, #84	@ 0x54
 800cdba:	4a15      	ldr	r2, [pc, #84]	@ (800ce10 <vTaskStartScheduler+0xd0>)
 800cdbc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800cdbe:	4b15      	ldr	r3, [pc, #84]	@ (800ce14 <vTaskStartScheduler+0xd4>)
 800cdc0:	f04f 32ff 	mov.w	r2, #4294967295
 800cdc4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800cdc6:	4b14      	ldr	r3, [pc, #80]	@ (800ce18 <vTaskStartScheduler+0xd8>)
 800cdc8:	2201      	movs	r2, #1
 800cdca:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800cdcc:	4b13      	ldr	r3, [pc, #76]	@ (800ce1c <vTaskStartScheduler+0xdc>)
 800cdce:	2200      	movs	r2, #0
 800cdd0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800cdd2:	f001 f9e5 	bl	800e1a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800cdd6:	e00f      	b.n	800cdf8 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800cdd8:	697b      	ldr	r3, [r7, #20]
 800cdda:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cdde:	d10b      	bne.n	800cdf8 <vTaskStartScheduler+0xb8>
	__asm volatile
 800cde0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cde4:	f383 8811 	msr	BASEPRI, r3
 800cde8:	f3bf 8f6f 	isb	sy
 800cdec:	f3bf 8f4f 	dsb	sy
 800cdf0:	60fb      	str	r3, [r7, #12]
}
 800cdf2:	bf00      	nop
 800cdf4:	bf00      	nop
 800cdf6:	e7fd      	b.n	800cdf4 <vTaskStartScheduler+0xb4>
}
 800cdf8:	bf00      	nop
 800cdfa:	3718      	adds	r7, #24
 800cdfc:	46bd      	mov	sp, r7
 800cdfe:	bd80      	pop	{r7, pc}
 800ce00:	08011e10 	.word	0x08011e10
 800ce04:	0800d451 	.word	0x0800d451
 800ce08:	200014d0 	.word	0x200014d0
 800ce0c:	20000fd8 	.word	0x20000fd8
 800ce10:	200001ac 	.word	0x200001ac
 800ce14:	200014cc 	.word	0x200014cc
 800ce18:	200014b8 	.word	0x200014b8
 800ce1c:	200014b0 	.word	0x200014b0

0800ce20 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ce20:	b480      	push	{r7}
 800ce22:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800ce24:	4b04      	ldr	r3, [pc, #16]	@ (800ce38 <vTaskSuspendAll+0x18>)
 800ce26:	681b      	ldr	r3, [r3, #0]
 800ce28:	3301      	adds	r3, #1
 800ce2a:	4a03      	ldr	r2, [pc, #12]	@ (800ce38 <vTaskSuspendAll+0x18>)
 800ce2c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800ce2e:	bf00      	nop
 800ce30:	46bd      	mov	sp, r7
 800ce32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce36:	4770      	bx	lr
 800ce38:	200014d4 	.word	0x200014d4

0800ce3c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ce3c:	b580      	push	{r7, lr}
 800ce3e:	b084      	sub	sp, #16
 800ce40:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ce42:	2300      	movs	r3, #0
 800ce44:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ce46:	2300      	movs	r3, #0
 800ce48:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ce4a:	4b42      	ldr	r3, [pc, #264]	@ (800cf54 <xTaskResumeAll+0x118>)
 800ce4c:	681b      	ldr	r3, [r3, #0]
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d10b      	bne.n	800ce6a <xTaskResumeAll+0x2e>
	__asm volatile
 800ce52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce56:	f383 8811 	msr	BASEPRI, r3
 800ce5a:	f3bf 8f6f 	isb	sy
 800ce5e:	f3bf 8f4f 	dsb	sy
 800ce62:	603b      	str	r3, [r7, #0]
}
 800ce64:	bf00      	nop
 800ce66:	bf00      	nop
 800ce68:	e7fd      	b.n	800ce66 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ce6a:	f001 fa3d 	bl	800e2e8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ce6e:	4b39      	ldr	r3, [pc, #228]	@ (800cf54 <xTaskResumeAll+0x118>)
 800ce70:	681b      	ldr	r3, [r3, #0]
 800ce72:	3b01      	subs	r3, #1
 800ce74:	4a37      	ldr	r2, [pc, #220]	@ (800cf54 <xTaskResumeAll+0x118>)
 800ce76:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ce78:	4b36      	ldr	r3, [pc, #216]	@ (800cf54 <xTaskResumeAll+0x118>)
 800ce7a:	681b      	ldr	r3, [r3, #0]
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	d162      	bne.n	800cf46 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ce80:	4b35      	ldr	r3, [pc, #212]	@ (800cf58 <xTaskResumeAll+0x11c>)
 800ce82:	681b      	ldr	r3, [r3, #0]
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	d05e      	beq.n	800cf46 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ce88:	e02f      	b.n	800ceea <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ce8a:	4b34      	ldr	r3, [pc, #208]	@ (800cf5c <xTaskResumeAll+0x120>)
 800ce8c:	68db      	ldr	r3, [r3, #12]
 800ce8e:	68db      	ldr	r3, [r3, #12]
 800ce90:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ce92:	68fb      	ldr	r3, [r7, #12]
 800ce94:	3318      	adds	r3, #24
 800ce96:	4618      	mov	r0, r3
 800ce98:	f7fe fcca 	bl	800b830 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ce9c:	68fb      	ldr	r3, [r7, #12]
 800ce9e:	3304      	adds	r3, #4
 800cea0:	4618      	mov	r0, r3
 800cea2:	f7fe fcc5 	bl	800b830 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800cea6:	68fb      	ldr	r3, [r7, #12]
 800cea8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ceaa:	4b2d      	ldr	r3, [pc, #180]	@ (800cf60 <xTaskResumeAll+0x124>)
 800ceac:	681b      	ldr	r3, [r3, #0]
 800ceae:	429a      	cmp	r2, r3
 800ceb0:	d903      	bls.n	800ceba <xTaskResumeAll+0x7e>
 800ceb2:	68fb      	ldr	r3, [r7, #12]
 800ceb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ceb6:	4a2a      	ldr	r2, [pc, #168]	@ (800cf60 <xTaskResumeAll+0x124>)
 800ceb8:	6013      	str	r3, [r2, #0]
 800ceba:	68fb      	ldr	r3, [r7, #12]
 800cebc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cebe:	4613      	mov	r3, r2
 800cec0:	009b      	lsls	r3, r3, #2
 800cec2:	4413      	add	r3, r2
 800cec4:	009b      	lsls	r3, r3, #2
 800cec6:	4a27      	ldr	r2, [pc, #156]	@ (800cf64 <xTaskResumeAll+0x128>)
 800cec8:	441a      	add	r2, r3
 800ceca:	68fb      	ldr	r3, [r7, #12]
 800cecc:	3304      	adds	r3, #4
 800cece:	4619      	mov	r1, r3
 800ced0:	4610      	mov	r0, r2
 800ced2:	f7fe fc50 	bl	800b776 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ced6:	68fb      	ldr	r3, [r7, #12]
 800ced8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ceda:	4b23      	ldr	r3, [pc, #140]	@ (800cf68 <xTaskResumeAll+0x12c>)
 800cedc:	681b      	ldr	r3, [r3, #0]
 800cede:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cee0:	429a      	cmp	r2, r3
 800cee2:	d302      	bcc.n	800ceea <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800cee4:	4b21      	ldr	r3, [pc, #132]	@ (800cf6c <xTaskResumeAll+0x130>)
 800cee6:	2201      	movs	r2, #1
 800cee8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ceea:	4b1c      	ldr	r3, [pc, #112]	@ (800cf5c <xTaskResumeAll+0x120>)
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	d1cb      	bne.n	800ce8a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800cef2:	68fb      	ldr	r3, [r7, #12]
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	d001      	beq.n	800cefc <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800cef8:	f000 fb66 	bl	800d5c8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800cefc:	4b1c      	ldr	r3, [pc, #112]	@ (800cf70 <xTaskResumeAll+0x134>)
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d010      	beq.n	800cf2a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800cf08:	f000 f846 	bl	800cf98 <xTaskIncrementTick>
 800cf0c:	4603      	mov	r3, r0
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	d002      	beq.n	800cf18 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800cf12:	4b16      	ldr	r3, [pc, #88]	@ (800cf6c <xTaskResumeAll+0x130>)
 800cf14:	2201      	movs	r2, #1
 800cf16:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	3b01      	subs	r3, #1
 800cf1c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	d1f1      	bne.n	800cf08 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800cf24:	4b12      	ldr	r3, [pc, #72]	@ (800cf70 <xTaskResumeAll+0x134>)
 800cf26:	2200      	movs	r2, #0
 800cf28:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800cf2a:	4b10      	ldr	r3, [pc, #64]	@ (800cf6c <xTaskResumeAll+0x130>)
 800cf2c:	681b      	ldr	r3, [r3, #0]
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	d009      	beq.n	800cf46 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800cf32:	2301      	movs	r3, #1
 800cf34:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800cf36:	4b0f      	ldr	r3, [pc, #60]	@ (800cf74 <xTaskResumeAll+0x138>)
 800cf38:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cf3c:	601a      	str	r2, [r3, #0]
 800cf3e:	f3bf 8f4f 	dsb	sy
 800cf42:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800cf46:	f001 fa01 	bl	800e34c <vPortExitCritical>

	return xAlreadyYielded;
 800cf4a:	68bb      	ldr	r3, [r7, #8]
}
 800cf4c:	4618      	mov	r0, r3
 800cf4e:	3710      	adds	r7, #16
 800cf50:	46bd      	mov	sp, r7
 800cf52:	bd80      	pop	{r7, pc}
 800cf54:	200014d4 	.word	0x200014d4
 800cf58:	200014ac 	.word	0x200014ac
 800cf5c:	2000146c 	.word	0x2000146c
 800cf60:	200014b4 	.word	0x200014b4
 800cf64:	20000fdc 	.word	0x20000fdc
 800cf68:	20000fd8 	.word	0x20000fd8
 800cf6c:	200014c0 	.word	0x200014c0
 800cf70:	200014bc 	.word	0x200014bc
 800cf74:	e000ed04 	.word	0xe000ed04

0800cf78 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800cf78:	b480      	push	{r7}
 800cf7a:	b083      	sub	sp, #12
 800cf7c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800cf7e:	4b05      	ldr	r3, [pc, #20]	@ (800cf94 <xTaskGetTickCount+0x1c>)
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800cf84:	687b      	ldr	r3, [r7, #4]
}
 800cf86:	4618      	mov	r0, r3
 800cf88:	370c      	adds	r7, #12
 800cf8a:	46bd      	mov	sp, r7
 800cf8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf90:	4770      	bx	lr
 800cf92:	bf00      	nop
 800cf94:	200014b0 	.word	0x200014b0

0800cf98 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800cf98:	b580      	push	{r7, lr}
 800cf9a:	b086      	sub	sp, #24
 800cf9c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800cf9e:	2300      	movs	r3, #0
 800cfa0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cfa2:	4b4f      	ldr	r3, [pc, #316]	@ (800d0e0 <xTaskIncrementTick+0x148>)
 800cfa4:	681b      	ldr	r3, [r3, #0]
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	f040 8090 	bne.w	800d0cc <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800cfac:	4b4d      	ldr	r3, [pc, #308]	@ (800d0e4 <xTaskIncrementTick+0x14c>)
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	3301      	adds	r3, #1
 800cfb2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800cfb4:	4a4b      	ldr	r2, [pc, #300]	@ (800d0e4 <xTaskIncrementTick+0x14c>)
 800cfb6:	693b      	ldr	r3, [r7, #16]
 800cfb8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800cfba:	693b      	ldr	r3, [r7, #16]
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d121      	bne.n	800d004 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800cfc0:	4b49      	ldr	r3, [pc, #292]	@ (800d0e8 <xTaskIncrementTick+0x150>)
 800cfc2:	681b      	ldr	r3, [r3, #0]
 800cfc4:	681b      	ldr	r3, [r3, #0]
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d00b      	beq.n	800cfe2 <xTaskIncrementTick+0x4a>
	__asm volatile
 800cfca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cfce:	f383 8811 	msr	BASEPRI, r3
 800cfd2:	f3bf 8f6f 	isb	sy
 800cfd6:	f3bf 8f4f 	dsb	sy
 800cfda:	603b      	str	r3, [r7, #0]
}
 800cfdc:	bf00      	nop
 800cfde:	bf00      	nop
 800cfe0:	e7fd      	b.n	800cfde <xTaskIncrementTick+0x46>
 800cfe2:	4b41      	ldr	r3, [pc, #260]	@ (800d0e8 <xTaskIncrementTick+0x150>)
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	60fb      	str	r3, [r7, #12]
 800cfe8:	4b40      	ldr	r3, [pc, #256]	@ (800d0ec <xTaskIncrementTick+0x154>)
 800cfea:	681b      	ldr	r3, [r3, #0]
 800cfec:	4a3e      	ldr	r2, [pc, #248]	@ (800d0e8 <xTaskIncrementTick+0x150>)
 800cfee:	6013      	str	r3, [r2, #0]
 800cff0:	4a3e      	ldr	r2, [pc, #248]	@ (800d0ec <xTaskIncrementTick+0x154>)
 800cff2:	68fb      	ldr	r3, [r7, #12]
 800cff4:	6013      	str	r3, [r2, #0]
 800cff6:	4b3e      	ldr	r3, [pc, #248]	@ (800d0f0 <xTaskIncrementTick+0x158>)
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	3301      	adds	r3, #1
 800cffc:	4a3c      	ldr	r2, [pc, #240]	@ (800d0f0 <xTaskIncrementTick+0x158>)
 800cffe:	6013      	str	r3, [r2, #0]
 800d000:	f000 fae2 	bl	800d5c8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d004:	4b3b      	ldr	r3, [pc, #236]	@ (800d0f4 <xTaskIncrementTick+0x15c>)
 800d006:	681b      	ldr	r3, [r3, #0]
 800d008:	693a      	ldr	r2, [r7, #16]
 800d00a:	429a      	cmp	r2, r3
 800d00c:	d349      	bcc.n	800d0a2 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d00e:	4b36      	ldr	r3, [pc, #216]	@ (800d0e8 <xTaskIncrementTick+0x150>)
 800d010:	681b      	ldr	r3, [r3, #0]
 800d012:	681b      	ldr	r3, [r3, #0]
 800d014:	2b00      	cmp	r3, #0
 800d016:	d104      	bne.n	800d022 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d018:	4b36      	ldr	r3, [pc, #216]	@ (800d0f4 <xTaskIncrementTick+0x15c>)
 800d01a:	f04f 32ff 	mov.w	r2, #4294967295
 800d01e:	601a      	str	r2, [r3, #0]
					break;
 800d020:	e03f      	b.n	800d0a2 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d022:	4b31      	ldr	r3, [pc, #196]	@ (800d0e8 <xTaskIncrementTick+0x150>)
 800d024:	681b      	ldr	r3, [r3, #0]
 800d026:	68db      	ldr	r3, [r3, #12]
 800d028:	68db      	ldr	r3, [r3, #12]
 800d02a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d02c:	68bb      	ldr	r3, [r7, #8]
 800d02e:	685b      	ldr	r3, [r3, #4]
 800d030:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d032:	693a      	ldr	r2, [r7, #16]
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	429a      	cmp	r2, r3
 800d038:	d203      	bcs.n	800d042 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d03a:	4a2e      	ldr	r2, [pc, #184]	@ (800d0f4 <xTaskIncrementTick+0x15c>)
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d040:	e02f      	b.n	800d0a2 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d042:	68bb      	ldr	r3, [r7, #8]
 800d044:	3304      	adds	r3, #4
 800d046:	4618      	mov	r0, r3
 800d048:	f7fe fbf2 	bl	800b830 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d04c:	68bb      	ldr	r3, [r7, #8]
 800d04e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d050:	2b00      	cmp	r3, #0
 800d052:	d004      	beq.n	800d05e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d054:	68bb      	ldr	r3, [r7, #8]
 800d056:	3318      	adds	r3, #24
 800d058:	4618      	mov	r0, r3
 800d05a:	f7fe fbe9 	bl	800b830 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d05e:	68bb      	ldr	r3, [r7, #8]
 800d060:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d062:	4b25      	ldr	r3, [pc, #148]	@ (800d0f8 <xTaskIncrementTick+0x160>)
 800d064:	681b      	ldr	r3, [r3, #0]
 800d066:	429a      	cmp	r2, r3
 800d068:	d903      	bls.n	800d072 <xTaskIncrementTick+0xda>
 800d06a:	68bb      	ldr	r3, [r7, #8]
 800d06c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d06e:	4a22      	ldr	r2, [pc, #136]	@ (800d0f8 <xTaskIncrementTick+0x160>)
 800d070:	6013      	str	r3, [r2, #0]
 800d072:	68bb      	ldr	r3, [r7, #8]
 800d074:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d076:	4613      	mov	r3, r2
 800d078:	009b      	lsls	r3, r3, #2
 800d07a:	4413      	add	r3, r2
 800d07c:	009b      	lsls	r3, r3, #2
 800d07e:	4a1f      	ldr	r2, [pc, #124]	@ (800d0fc <xTaskIncrementTick+0x164>)
 800d080:	441a      	add	r2, r3
 800d082:	68bb      	ldr	r3, [r7, #8]
 800d084:	3304      	adds	r3, #4
 800d086:	4619      	mov	r1, r3
 800d088:	4610      	mov	r0, r2
 800d08a:	f7fe fb74 	bl	800b776 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d08e:	68bb      	ldr	r3, [r7, #8]
 800d090:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d092:	4b1b      	ldr	r3, [pc, #108]	@ (800d100 <xTaskIncrementTick+0x168>)
 800d094:	681b      	ldr	r3, [r3, #0]
 800d096:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d098:	429a      	cmp	r2, r3
 800d09a:	d3b8      	bcc.n	800d00e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800d09c:	2301      	movs	r3, #1
 800d09e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d0a0:	e7b5      	b.n	800d00e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d0a2:	4b17      	ldr	r3, [pc, #92]	@ (800d100 <xTaskIncrementTick+0x168>)
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d0a8:	4914      	ldr	r1, [pc, #80]	@ (800d0fc <xTaskIncrementTick+0x164>)
 800d0aa:	4613      	mov	r3, r2
 800d0ac:	009b      	lsls	r3, r3, #2
 800d0ae:	4413      	add	r3, r2
 800d0b0:	009b      	lsls	r3, r3, #2
 800d0b2:	440b      	add	r3, r1
 800d0b4:	681b      	ldr	r3, [r3, #0]
 800d0b6:	2b01      	cmp	r3, #1
 800d0b8:	d901      	bls.n	800d0be <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800d0ba:	2301      	movs	r3, #1
 800d0bc:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800d0be:	4b11      	ldr	r3, [pc, #68]	@ (800d104 <xTaskIncrementTick+0x16c>)
 800d0c0:	681b      	ldr	r3, [r3, #0]
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	d007      	beq.n	800d0d6 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800d0c6:	2301      	movs	r3, #1
 800d0c8:	617b      	str	r3, [r7, #20]
 800d0ca:	e004      	b.n	800d0d6 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800d0cc:	4b0e      	ldr	r3, [pc, #56]	@ (800d108 <xTaskIncrementTick+0x170>)
 800d0ce:	681b      	ldr	r3, [r3, #0]
 800d0d0:	3301      	adds	r3, #1
 800d0d2:	4a0d      	ldr	r2, [pc, #52]	@ (800d108 <xTaskIncrementTick+0x170>)
 800d0d4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800d0d6:	697b      	ldr	r3, [r7, #20]
}
 800d0d8:	4618      	mov	r0, r3
 800d0da:	3718      	adds	r7, #24
 800d0dc:	46bd      	mov	sp, r7
 800d0de:	bd80      	pop	{r7, pc}
 800d0e0:	200014d4 	.word	0x200014d4
 800d0e4:	200014b0 	.word	0x200014b0
 800d0e8:	20001464 	.word	0x20001464
 800d0ec:	20001468 	.word	0x20001468
 800d0f0:	200014c4 	.word	0x200014c4
 800d0f4:	200014cc 	.word	0x200014cc
 800d0f8:	200014b4 	.word	0x200014b4
 800d0fc:	20000fdc 	.word	0x20000fdc
 800d100:	20000fd8 	.word	0x20000fd8
 800d104:	200014c0 	.word	0x200014c0
 800d108:	200014bc 	.word	0x200014bc

0800d10c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d10c:	b480      	push	{r7}
 800d10e:	b085      	sub	sp, #20
 800d110:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d112:	4b2b      	ldr	r3, [pc, #172]	@ (800d1c0 <vTaskSwitchContext+0xb4>)
 800d114:	681b      	ldr	r3, [r3, #0]
 800d116:	2b00      	cmp	r3, #0
 800d118:	d003      	beq.n	800d122 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d11a:	4b2a      	ldr	r3, [pc, #168]	@ (800d1c4 <vTaskSwitchContext+0xb8>)
 800d11c:	2201      	movs	r2, #1
 800d11e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d120:	e047      	b.n	800d1b2 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800d122:	4b28      	ldr	r3, [pc, #160]	@ (800d1c4 <vTaskSwitchContext+0xb8>)
 800d124:	2200      	movs	r2, #0
 800d126:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d128:	4b27      	ldr	r3, [pc, #156]	@ (800d1c8 <vTaskSwitchContext+0xbc>)
 800d12a:	681b      	ldr	r3, [r3, #0]
 800d12c:	60fb      	str	r3, [r7, #12]
 800d12e:	e011      	b.n	800d154 <vTaskSwitchContext+0x48>
 800d130:	68fb      	ldr	r3, [r7, #12]
 800d132:	2b00      	cmp	r3, #0
 800d134:	d10b      	bne.n	800d14e <vTaskSwitchContext+0x42>
	__asm volatile
 800d136:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d13a:	f383 8811 	msr	BASEPRI, r3
 800d13e:	f3bf 8f6f 	isb	sy
 800d142:	f3bf 8f4f 	dsb	sy
 800d146:	607b      	str	r3, [r7, #4]
}
 800d148:	bf00      	nop
 800d14a:	bf00      	nop
 800d14c:	e7fd      	b.n	800d14a <vTaskSwitchContext+0x3e>
 800d14e:	68fb      	ldr	r3, [r7, #12]
 800d150:	3b01      	subs	r3, #1
 800d152:	60fb      	str	r3, [r7, #12]
 800d154:	491d      	ldr	r1, [pc, #116]	@ (800d1cc <vTaskSwitchContext+0xc0>)
 800d156:	68fa      	ldr	r2, [r7, #12]
 800d158:	4613      	mov	r3, r2
 800d15a:	009b      	lsls	r3, r3, #2
 800d15c:	4413      	add	r3, r2
 800d15e:	009b      	lsls	r3, r3, #2
 800d160:	440b      	add	r3, r1
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	2b00      	cmp	r3, #0
 800d166:	d0e3      	beq.n	800d130 <vTaskSwitchContext+0x24>
 800d168:	68fa      	ldr	r2, [r7, #12]
 800d16a:	4613      	mov	r3, r2
 800d16c:	009b      	lsls	r3, r3, #2
 800d16e:	4413      	add	r3, r2
 800d170:	009b      	lsls	r3, r3, #2
 800d172:	4a16      	ldr	r2, [pc, #88]	@ (800d1cc <vTaskSwitchContext+0xc0>)
 800d174:	4413      	add	r3, r2
 800d176:	60bb      	str	r3, [r7, #8]
 800d178:	68bb      	ldr	r3, [r7, #8]
 800d17a:	685b      	ldr	r3, [r3, #4]
 800d17c:	685a      	ldr	r2, [r3, #4]
 800d17e:	68bb      	ldr	r3, [r7, #8]
 800d180:	605a      	str	r2, [r3, #4]
 800d182:	68bb      	ldr	r3, [r7, #8]
 800d184:	685a      	ldr	r2, [r3, #4]
 800d186:	68bb      	ldr	r3, [r7, #8]
 800d188:	3308      	adds	r3, #8
 800d18a:	429a      	cmp	r2, r3
 800d18c:	d104      	bne.n	800d198 <vTaskSwitchContext+0x8c>
 800d18e:	68bb      	ldr	r3, [r7, #8]
 800d190:	685b      	ldr	r3, [r3, #4]
 800d192:	685a      	ldr	r2, [r3, #4]
 800d194:	68bb      	ldr	r3, [r7, #8]
 800d196:	605a      	str	r2, [r3, #4]
 800d198:	68bb      	ldr	r3, [r7, #8]
 800d19a:	685b      	ldr	r3, [r3, #4]
 800d19c:	68db      	ldr	r3, [r3, #12]
 800d19e:	4a0c      	ldr	r2, [pc, #48]	@ (800d1d0 <vTaskSwitchContext+0xc4>)
 800d1a0:	6013      	str	r3, [r2, #0]
 800d1a2:	4a09      	ldr	r2, [pc, #36]	@ (800d1c8 <vTaskSwitchContext+0xbc>)
 800d1a4:	68fb      	ldr	r3, [r7, #12]
 800d1a6:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d1a8:	4b09      	ldr	r3, [pc, #36]	@ (800d1d0 <vTaskSwitchContext+0xc4>)
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	3354      	adds	r3, #84	@ 0x54
 800d1ae:	4a09      	ldr	r2, [pc, #36]	@ (800d1d4 <vTaskSwitchContext+0xc8>)
 800d1b0:	6013      	str	r3, [r2, #0]
}
 800d1b2:	bf00      	nop
 800d1b4:	3714      	adds	r7, #20
 800d1b6:	46bd      	mov	sp, r7
 800d1b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1bc:	4770      	bx	lr
 800d1be:	bf00      	nop
 800d1c0:	200014d4 	.word	0x200014d4
 800d1c4:	200014c0 	.word	0x200014c0
 800d1c8:	200014b4 	.word	0x200014b4
 800d1cc:	20000fdc 	.word	0x20000fdc
 800d1d0:	20000fd8 	.word	0x20000fd8
 800d1d4:	200001ac 	.word	0x200001ac

0800d1d8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d1d8:	b580      	push	{r7, lr}
 800d1da:	b084      	sub	sp, #16
 800d1dc:	af00      	add	r7, sp, #0
 800d1de:	6078      	str	r0, [r7, #4]
 800d1e0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	d10b      	bne.n	800d200 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800d1e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d1ec:	f383 8811 	msr	BASEPRI, r3
 800d1f0:	f3bf 8f6f 	isb	sy
 800d1f4:	f3bf 8f4f 	dsb	sy
 800d1f8:	60fb      	str	r3, [r7, #12]
}
 800d1fa:	bf00      	nop
 800d1fc:	bf00      	nop
 800d1fe:	e7fd      	b.n	800d1fc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d200:	4b07      	ldr	r3, [pc, #28]	@ (800d220 <vTaskPlaceOnEventList+0x48>)
 800d202:	681b      	ldr	r3, [r3, #0]
 800d204:	3318      	adds	r3, #24
 800d206:	4619      	mov	r1, r3
 800d208:	6878      	ldr	r0, [r7, #4]
 800d20a:	f7fe fad8 	bl	800b7be <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d20e:	2101      	movs	r1, #1
 800d210:	6838      	ldr	r0, [r7, #0]
 800d212:	f000 fb87 	bl	800d924 <prvAddCurrentTaskToDelayedList>
}
 800d216:	bf00      	nop
 800d218:	3710      	adds	r7, #16
 800d21a:	46bd      	mov	sp, r7
 800d21c:	bd80      	pop	{r7, pc}
 800d21e:	bf00      	nop
 800d220:	20000fd8 	.word	0x20000fd8

0800d224 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d224:	b580      	push	{r7, lr}
 800d226:	b086      	sub	sp, #24
 800d228:	af00      	add	r7, sp, #0
 800d22a:	60f8      	str	r0, [r7, #12]
 800d22c:	60b9      	str	r1, [r7, #8]
 800d22e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800d230:	68fb      	ldr	r3, [r7, #12]
 800d232:	2b00      	cmp	r3, #0
 800d234:	d10b      	bne.n	800d24e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800d236:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d23a:	f383 8811 	msr	BASEPRI, r3
 800d23e:	f3bf 8f6f 	isb	sy
 800d242:	f3bf 8f4f 	dsb	sy
 800d246:	617b      	str	r3, [r7, #20]
}
 800d248:	bf00      	nop
 800d24a:	bf00      	nop
 800d24c:	e7fd      	b.n	800d24a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d24e:	4b0a      	ldr	r3, [pc, #40]	@ (800d278 <vTaskPlaceOnEventListRestricted+0x54>)
 800d250:	681b      	ldr	r3, [r3, #0]
 800d252:	3318      	adds	r3, #24
 800d254:	4619      	mov	r1, r3
 800d256:	68f8      	ldr	r0, [r7, #12]
 800d258:	f7fe fa8d 	bl	800b776 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	2b00      	cmp	r3, #0
 800d260:	d002      	beq.n	800d268 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800d262:	f04f 33ff 	mov.w	r3, #4294967295
 800d266:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800d268:	6879      	ldr	r1, [r7, #4]
 800d26a:	68b8      	ldr	r0, [r7, #8]
 800d26c:	f000 fb5a 	bl	800d924 <prvAddCurrentTaskToDelayedList>
	}
 800d270:	bf00      	nop
 800d272:	3718      	adds	r7, #24
 800d274:	46bd      	mov	sp, r7
 800d276:	bd80      	pop	{r7, pc}
 800d278:	20000fd8 	.word	0x20000fd8

0800d27c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d27c:	b580      	push	{r7, lr}
 800d27e:	b086      	sub	sp, #24
 800d280:	af00      	add	r7, sp, #0
 800d282:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	68db      	ldr	r3, [r3, #12]
 800d288:	68db      	ldr	r3, [r3, #12]
 800d28a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d28c:	693b      	ldr	r3, [r7, #16]
 800d28e:	2b00      	cmp	r3, #0
 800d290:	d10b      	bne.n	800d2aa <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800d292:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d296:	f383 8811 	msr	BASEPRI, r3
 800d29a:	f3bf 8f6f 	isb	sy
 800d29e:	f3bf 8f4f 	dsb	sy
 800d2a2:	60fb      	str	r3, [r7, #12]
}
 800d2a4:	bf00      	nop
 800d2a6:	bf00      	nop
 800d2a8:	e7fd      	b.n	800d2a6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d2aa:	693b      	ldr	r3, [r7, #16]
 800d2ac:	3318      	adds	r3, #24
 800d2ae:	4618      	mov	r0, r3
 800d2b0:	f7fe fabe 	bl	800b830 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d2b4:	4b1d      	ldr	r3, [pc, #116]	@ (800d32c <xTaskRemoveFromEventList+0xb0>)
 800d2b6:	681b      	ldr	r3, [r3, #0]
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	d11d      	bne.n	800d2f8 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d2bc:	693b      	ldr	r3, [r7, #16]
 800d2be:	3304      	adds	r3, #4
 800d2c0:	4618      	mov	r0, r3
 800d2c2:	f7fe fab5 	bl	800b830 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d2c6:	693b      	ldr	r3, [r7, #16]
 800d2c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d2ca:	4b19      	ldr	r3, [pc, #100]	@ (800d330 <xTaskRemoveFromEventList+0xb4>)
 800d2cc:	681b      	ldr	r3, [r3, #0]
 800d2ce:	429a      	cmp	r2, r3
 800d2d0:	d903      	bls.n	800d2da <xTaskRemoveFromEventList+0x5e>
 800d2d2:	693b      	ldr	r3, [r7, #16]
 800d2d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d2d6:	4a16      	ldr	r2, [pc, #88]	@ (800d330 <xTaskRemoveFromEventList+0xb4>)
 800d2d8:	6013      	str	r3, [r2, #0]
 800d2da:	693b      	ldr	r3, [r7, #16]
 800d2dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d2de:	4613      	mov	r3, r2
 800d2e0:	009b      	lsls	r3, r3, #2
 800d2e2:	4413      	add	r3, r2
 800d2e4:	009b      	lsls	r3, r3, #2
 800d2e6:	4a13      	ldr	r2, [pc, #76]	@ (800d334 <xTaskRemoveFromEventList+0xb8>)
 800d2e8:	441a      	add	r2, r3
 800d2ea:	693b      	ldr	r3, [r7, #16]
 800d2ec:	3304      	adds	r3, #4
 800d2ee:	4619      	mov	r1, r3
 800d2f0:	4610      	mov	r0, r2
 800d2f2:	f7fe fa40 	bl	800b776 <vListInsertEnd>
 800d2f6:	e005      	b.n	800d304 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d2f8:	693b      	ldr	r3, [r7, #16]
 800d2fa:	3318      	adds	r3, #24
 800d2fc:	4619      	mov	r1, r3
 800d2fe:	480e      	ldr	r0, [pc, #56]	@ (800d338 <xTaskRemoveFromEventList+0xbc>)
 800d300:	f7fe fa39 	bl	800b776 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d304:	693b      	ldr	r3, [r7, #16]
 800d306:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d308:	4b0c      	ldr	r3, [pc, #48]	@ (800d33c <xTaskRemoveFromEventList+0xc0>)
 800d30a:	681b      	ldr	r3, [r3, #0]
 800d30c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d30e:	429a      	cmp	r2, r3
 800d310:	d905      	bls.n	800d31e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d312:	2301      	movs	r3, #1
 800d314:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d316:	4b0a      	ldr	r3, [pc, #40]	@ (800d340 <xTaskRemoveFromEventList+0xc4>)
 800d318:	2201      	movs	r2, #1
 800d31a:	601a      	str	r2, [r3, #0]
 800d31c:	e001      	b.n	800d322 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800d31e:	2300      	movs	r3, #0
 800d320:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d322:	697b      	ldr	r3, [r7, #20]
}
 800d324:	4618      	mov	r0, r3
 800d326:	3718      	adds	r7, #24
 800d328:	46bd      	mov	sp, r7
 800d32a:	bd80      	pop	{r7, pc}
 800d32c:	200014d4 	.word	0x200014d4
 800d330:	200014b4 	.word	0x200014b4
 800d334:	20000fdc 	.word	0x20000fdc
 800d338:	2000146c 	.word	0x2000146c
 800d33c:	20000fd8 	.word	0x20000fd8
 800d340:	200014c0 	.word	0x200014c0

0800d344 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d344:	b480      	push	{r7}
 800d346:	b083      	sub	sp, #12
 800d348:	af00      	add	r7, sp, #0
 800d34a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d34c:	4b06      	ldr	r3, [pc, #24]	@ (800d368 <vTaskInternalSetTimeOutState+0x24>)
 800d34e:	681a      	ldr	r2, [r3, #0]
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d354:	4b05      	ldr	r3, [pc, #20]	@ (800d36c <vTaskInternalSetTimeOutState+0x28>)
 800d356:	681a      	ldr	r2, [r3, #0]
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	605a      	str	r2, [r3, #4]
}
 800d35c:	bf00      	nop
 800d35e:	370c      	adds	r7, #12
 800d360:	46bd      	mov	sp, r7
 800d362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d366:	4770      	bx	lr
 800d368:	200014c4 	.word	0x200014c4
 800d36c:	200014b0 	.word	0x200014b0

0800d370 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d370:	b580      	push	{r7, lr}
 800d372:	b088      	sub	sp, #32
 800d374:	af00      	add	r7, sp, #0
 800d376:	6078      	str	r0, [r7, #4]
 800d378:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	d10b      	bne.n	800d398 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800d380:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d384:	f383 8811 	msr	BASEPRI, r3
 800d388:	f3bf 8f6f 	isb	sy
 800d38c:	f3bf 8f4f 	dsb	sy
 800d390:	613b      	str	r3, [r7, #16]
}
 800d392:	bf00      	nop
 800d394:	bf00      	nop
 800d396:	e7fd      	b.n	800d394 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800d398:	683b      	ldr	r3, [r7, #0]
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	d10b      	bne.n	800d3b6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800d39e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d3a2:	f383 8811 	msr	BASEPRI, r3
 800d3a6:	f3bf 8f6f 	isb	sy
 800d3aa:	f3bf 8f4f 	dsb	sy
 800d3ae:	60fb      	str	r3, [r7, #12]
}
 800d3b0:	bf00      	nop
 800d3b2:	bf00      	nop
 800d3b4:	e7fd      	b.n	800d3b2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800d3b6:	f000 ff97 	bl	800e2e8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d3ba:	4b1d      	ldr	r3, [pc, #116]	@ (800d430 <xTaskCheckForTimeOut+0xc0>)
 800d3bc:	681b      	ldr	r3, [r3, #0]
 800d3be:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	685b      	ldr	r3, [r3, #4]
 800d3c4:	69ba      	ldr	r2, [r7, #24]
 800d3c6:	1ad3      	subs	r3, r2, r3
 800d3c8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d3ca:	683b      	ldr	r3, [r7, #0]
 800d3cc:	681b      	ldr	r3, [r3, #0]
 800d3ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d3d2:	d102      	bne.n	800d3da <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d3d4:	2300      	movs	r3, #0
 800d3d6:	61fb      	str	r3, [r7, #28]
 800d3d8:	e023      	b.n	800d422 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	681a      	ldr	r2, [r3, #0]
 800d3de:	4b15      	ldr	r3, [pc, #84]	@ (800d434 <xTaskCheckForTimeOut+0xc4>)
 800d3e0:	681b      	ldr	r3, [r3, #0]
 800d3e2:	429a      	cmp	r2, r3
 800d3e4:	d007      	beq.n	800d3f6 <xTaskCheckForTimeOut+0x86>
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	685b      	ldr	r3, [r3, #4]
 800d3ea:	69ba      	ldr	r2, [r7, #24]
 800d3ec:	429a      	cmp	r2, r3
 800d3ee:	d302      	bcc.n	800d3f6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d3f0:	2301      	movs	r3, #1
 800d3f2:	61fb      	str	r3, [r7, #28]
 800d3f4:	e015      	b.n	800d422 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d3f6:	683b      	ldr	r3, [r7, #0]
 800d3f8:	681b      	ldr	r3, [r3, #0]
 800d3fa:	697a      	ldr	r2, [r7, #20]
 800d3fc:	429a      	cmp	r2, r3
 800d3fe:	d20b      	bcs.n	800d418 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d400:	683b      	ldr	r3, [r7, #0]
 800d402:	681a      	ldr	r2, [r3, #0]
 800d404:	697b      	ldr	r3, [r7, #20]
 800d406:	1ad2      	subs	r2, r2, r3
 800d408:	683b      	ldr	r3, [r7, #0]
 800d40a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d40c:	6878      	ldr	r0, [r7, #4]
 800d40e:	f7ff ff99 	bl	800d344 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d412:	2300      	movs	r3, #0
 800d414:	61fb      	str	r3, [r7, #28]
 800d416:	e004      	b.n	800d422 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800d418:	683b      	ldr	r3, [r7, #0]
 800d41a:	2200      	movs	r2, #0
 800d41c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d41e:	2301      	movs	r3, #1
 800d420:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d422:	f000 ff93 	bl	800e34c <vPortExitCritical>

	return xReturn;
 800d426:	69fb      	ldr	r3, [r7, #28]
}
 800d428:	4618      	mov	r0, r3
 800d42a:	3720      	adds	r7, #32
 800d42c:	46bd      	mov	sp, r7
 800d42e:	bd80      	pop	{r7, pc}
 800d430:	200014b0 	.word	0x200014b0
 800d434:	200014c4 	.word	0x200014c4

0800d438 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d438:	b480      	push	{r7}
 800d43a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d43c:	4b03      	ldr	r3, [pc, #12]	@ (800d44c <vTaskMissedYield+0x14>)
 800d43e:	2201      	movs	r2, #1
 800d440:	601a      	str	r2, [r3, #0]
}
 800d442:	bf00      	nop
 800d444:	46bd      	mov	sp, r7
 800d446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d44a:	4770      	bx	lr
 800d44c:	200014c0 	.word	0x200014c0

0800d450 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d450:	b580      	push	{r7, lr}
 800d452:	b082      	sub	sp, #8
 800d454:	af00      	add	r7, sp, #0
 800d456:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d458:	f000 f852 	bl	800d500 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d45c:	4b06      	ldr	r3, [pc, #24]	@ (800d478 <prvIdleTask+0x28>)
 800d45e:	681b      	ldr	r3, [r3, #0]
 800d460:	2b01      	cmp	r3, #1
 800d462:	d9f9      	bls.n	800d458 <prvIdleTask+0x8>
			{
				taskYIELD();
 800d464:	4b05      	ldr	r3, [pc, #20]	@ (800d47c <prvIdleTask+0x2c>)
 800d466:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d46a:	601a      	str	r2, [r3, #0]
 800d46c:	f3bf 8f4f 	dsb	sy
 800d470:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800d474:	e7f0      	b.n	800d458 <prvIdleTask+0x8>
 800d476:	bf00      	nop
 800d478:	20000fdc 	.word	0x20000fdc
 800d47c:	e000ed04 	.word	0xe000ed04

0800d480 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d480:	b580      	push	{r7, lr}
 800d482:	b082      	sub	sp, #8
 800d484:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d486:	2300      	movs	r3, #0
 800d488:	607b      	str	r3, [r7, #4]
 800d48a:	e00c      	b.n	800d4a6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d48c:	687a      	ldr	r2, [r7, #4]
 800d48e:	4613      	mov	r3, r2
 800d490:	009b      	lsls	r3, r3, #2
 800d492:	4413      	add	r3, r2
 800d494:	009b      	lsls	r3, r3, #2
 800d496:	4a12      	ldr	r2, [pc, #72]	@ (800d4e0 <prvInitialiseTaskLists+0x60>)
 800d498:	4413      	add	r3, r2
 800d49a:	4618      	mov	r0, r3
 800d49c:	f7fe f93e 	bl	800b71c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	3301      	adds	r3, #1
 800d4a4:	607b      	str	r3, [r7, #4]
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	2b37      	cmp	r3, #55	@ 0x37
 800d4aa:	d9ef      	bls.n	800d48c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d4ac:	480d      	ldr	r0, [pc, #52]	@ (800d4e4 <prvInitialiseTaskLists+0x64>)
 800d4ae:	f7fe f935 	bl	800b71c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d4b2:	480d      	ldr	r0, [pc, #52]	@ (800d4e8 <prvInitialiseTaskLists+0x68>)
 800d4b4:	f7fe f932 	bl	800b71c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d4b8:	480c      	ldr	r0, [pc, #48]	@ (800d4ec <prvInitialiseTaskLists+0x6c>)
 800d4ba:	f7fe f92f 	bl	800b71c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d4be:	480c      	ldr	r0, [pc, #48]	@ (800d4f0 <prvInitialiseTaskLists+0x70>)
 800d4c0:	f7fe f92c 	bl	800b71c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d4c4:	480b      	ldr	r0, [pc, #44]	@ (800d4f4 <prvInitialiseTaskLists+0x74>)
 800d4c6:	f7fe f929 	bl	800b71c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d4ca:	4b0b      	ldr	r3, [pc, #44]	@ (800d4f8 <prvInitialiseTaskLists+0x78>)
 800d4cc:	4a05      	ldr	r2, [pc, #20]	@ (800d4e4 <prvInitialiseTaskLists+0x64>)
 800d4ce:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d4d0:	4b0a      	ldr	r3, [pc, #40]	@ (800d4fc <prvInitialiseTaskLists+0x7c>)
 800d4d2:	4a05      	ldr	r2, [pc, #20]	@ (800d4e8 <prvInitialiseTaskLists+0x68>)
 800d4d4:	601a      	str	r2, [r3, #0]
}
 800d4d6:	bf00      	nop
 800d4d8:	3708      	adds	r7, #8
 800d4da:	46bd      	mov	sp, r7
 800d4dc:	bd80      	pop	{r7, pc}
 800d4de:	bf00      	nop
 800d4e0:	20000fdc 	.word	0x20000fdc
 800d4e4:	2000143c 	.word	0x2000143c
 800d4e8:	20001450 	.word	0x20001450
 800d4ec:	2000146c 	.word	0x2000146c
 800d4f0:	20001480 	.word	0x20001480
 800d4f4:	20001498 	.word	0x20001498
 800d4f8:	20001464 	.word	0x20001464
 800d4fc:	20001468 	.word	0x20001468

0800d500 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d500:	b580      	push	{r7, lr}
 800d502:	b082      	sub	sp, #8
 800d504:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d506:	e019      	b.n	800d53c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d508:	f000 feee 	bl	800e2e8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d50c:	4b10      	ldr	r3, [pc, #64]	@ (800d550 <prvCheckTasksWaitingTermination+0x50>)
 800d50e:	68db      	ldr	r3, [r3, #12]
 800d510:	68db      	ldr	r3, [r3, #12]
 800d512:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	3304      	adds	r3, #4
 800d518:	4618      	mov	r0, r3
 800d51a:	f7fe f989 	bl	800b830 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d51e:	4b0d      	ldr	r3, [pc, #52]	@ (800d554 <prvCheckTasksWaitingTermination+0x54>)
 800d520:	681b      	ldr	r3, [r3, #0]
 800d522:	3b01      	subs	r3, #1
 800d524:	4a0b      	ldr	r2, [pc, #44]	@ (800d554 <prvCheckTasksWaitingTermination+0x54>)
 800d526:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d528:	4b0b      	ldr	r3, [pc, #44]	@ (800d558 <prvCheckTasksWaitingTermination+0x58>)
 800d52a:	681b      	ldr	r3, [r3, #0]
 800d52c:	3b01      	subs	r3, #1
 800d52e:	4a0a      	ldr	r2, [pc, #40]	@ (800d558 <prvCheckTasksWaitingTermination+0x58>)
 800d530:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d532:	f000 ff0b 	bl	800e34c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d536:	6878      	ldr	r0, [r7, #4]
 800d538:	f000 f810 	bl	800d55c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d53c:	4b06      	ldr	r3, [pc, #24]	@ (800d558 <prvCheckTasksWaitingTermination+0x58>)
 800d53e:	681b      	ldr	r3, [r3, #0]
 800d540:	2b00      	cmp	r3, #0
 800d542:	d1e1      	bne.n	800d508 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d544:	bf00      	nop
 800d546:	bf00      	nop
 800d548:	3708      	adds	r7, #8
 800d54a:	46bd      	mov	sp, r7
 800d54c:	bd80      	pop	{r7, pc}
 800d54e:	bf00      	nop
 800d550:	20001480 	.word	0x20001480
 800d554:	200014ac 	.word	0x200014ac
 800d558:	20001494 	.word	0x20001494

0800d55c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d55c:	b580      	push	{r7, lr}
 800d55e:	b084      	sub	sp, #16
 800d560:	af00      	add	r7, sp, #0
 800d562:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	3354      	adds	r3, #84	@ 0x54
 800d568:	4618      	mov	r0, r3
 800d56a:	f002 f9fb 	bl	800f964 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800d574:	2b00      	cmp	r3, #0
 800d576:	d108      	bne.n	800d58a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d57c:	4618      	mov	r0, r3
 800d57e:	f001 f8a3 	bl	800e6c8 <vPortFree>
				vPortFree( pxTCB );
 800d582:	6878      	ldr	r0, [r7, #4]
 800d584:	f001 f8a0 	bl	800e6c8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d588:	e019      	b.n	800d5be <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800d590:	2b01      	cmp	r3, #1
 800d592:	d103      	bne.n	800d59c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800d594:	6878      	ldr	r0, [r7, #4]
 800d596:	f001 f897 	bl	800e6c8 <vPortFree>
	}
 800d59a:	e010      	b.n	800d5be <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800d5a2:	2b02      	cmp	r3, #2
 800d5a4:	d00b      	beq.n	800d5be <prvDeleteTCB+0x62>
	__asm volatile
 800d5a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d5aa:	f383 8811 	msr	BASEPRI, r3
 800d5ae:	f3bf 8f6f 	isb	sy
 800d5b2:	f3bf 8f4f 	dsb	sy
 800d5b6:	60fb      	str	r3, [r7, #12]
}
 800d5b8:	bf00      	nop
 800d5ba:	bf00      	nop
 800d5bc:	e7fd      	b.n	800d5ba <prvDeleteTCB+0x5e>
	}
 800d5be:	bf00      	nop
 800d5c0:	3710      	adds	r7, #16
 800d5c2:	46bd      	mov	sp, r7
 800d5c4:	bd80      	pop	{r7, pc}
	...

0800d5c8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d5c8:	b480      	push	{r7}
 800d5ca:	b083      	sub	sp, #12
 800d5cc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d5ce:	4b0c      	ldr	r3, [pc, #48]	@ (800d600 <prvResetNextTaskUnblockTime+0x38>)
 800d5d0:	681b      	ldr	r3, [r3, #0]
 800d5d2:	681b      	ldr	r3, [r3, #0]
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	d104      	bne.n	800d5e2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d5d8:	4b0a      	ldr	r3, [pc, #40]	@ (800d604 <prvResetNextTaskUnblockTime+0x3c>)
 800d5da:	f04f 32ff 	mov.w	r2, #4294967295
 800d5de:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d5e0:	e008      	b.n	800d5f4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d5e2:	4b07      	ldr	r3, [pc, #28]	@ (800d600 <prvResetNextTaskUnblockTime+0x38>)
 800d5e4:	681b      	ldr	r3, [r3, #0]
 800d5e6:	68db      	ldr	r3, [r3, #12]
 800d5e8:	68db      	ldr	r3, [r3, #12]
 800d5ea:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	685b      	ldr	r3, [r3, #4]
 800d5f0:	4a04      	ldr	r2, [pc, #16]	@ (800d604 <prvResetNextTaskUnblockTime+0x3c>)
 800d5f2:	6013      	str	r3, [r2, #0]
}
 800d5f4:	bf00      	nop
 800d5f6:	370c      	adds	r7, #12
 800d5f8:	46bd      	mov	sp, r7
 800d5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5fe:	4770      	bx	lr
 800d600:	20001464 	.word	0x20001464
 800d604:	200014cc 	.word	0x200014cc

0800d608 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d608:	b480      	push	{r7}
 800d60a:	b083      	sub	sp, #12
 800d60c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d60e:	4b0b      	ldr	r3, [pc, #44]	@ (800d63c <xTaskGetSchedulerState+0x34>)
 800d610:	681b      	ldr	r3, [r3, #0]
 800d612:	2b00      	cmp	r3, #0
 800d614:	d102      	bne.n	800d61c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d616:	2301      	movs	r3, #1
 800d618:	607b      	str	r3, [r7, #4]
 800d61a:	e008      	b.n	800d62e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d61c:	4b08      	ldr	r3, [pc, #32]	@ (800d640 <xTaskGetSchedulerState+0x38>)
 800d61e:	681b      	ldr	r3, [r3, #0]
 800d620:	2b00      	cmp	r3, #0
 800d622:	d102      	bne.n	800d62a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d624:	2302      	movs	r3, #2
 800d626:	607b      	str	r3, [r7, #4]
 800d628:	e001      	b.n	800d62e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d62a:	2300      	movs	r3, #0
 800d62c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d62e:	687b      	ldr	r3, [r7, #4]
	}
 800d630:	4618      	mov	r0, r3
 800d632:	370c      	adds	r7, #12
 800d634:	46bd      	mov	sp, r7
 800d636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d63a:	4770      	bx	lr
 800d63c:	200014b8 	.word	0x200014b8
 800d640:	200014d4 	.word	0x200014d4

0800d644 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800d644:	b580      	push	{r7, lr}
 800d646:	b084      	sub	sp, #16
 800d648:	af00      	add	r7, sp, #0
 800d64a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800d650:	2300      	movs	r3, #0
 800d652:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	2b00      	cmp	r3, #0
 800d658:	d051      	beq.n	800d6fe <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800d65a:	68bb      	ldr	r3, [r7, #8]
 800d65c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d65e:	4b2a      	ldr	r3, [pc, #168]	@ (800d708 <xTaskPriorityInherit+0xc4>)
 800d660:	681b      	ldr	r3, [r3, #0]
 800d662:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d664:	429a      	cmp	r2, r3
 800d666:	d241      	bcs.n	800d6ec <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d668:	68bb      	ldr	r3, [r7, #8]
 800d66a:	699b      	ldr	r3, [r3, #24]
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	db06      	blt.n	800d67e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d670:	4b25      	ldr	r3, [pc, #148]	@ (800d708 <xTaskPriorityInherit+0xc4>)
 800d672:	681b      	ldr	r3, [r3, #0]
 800d674:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d676:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800d67a:	68bb      	ldr	r3, [r7, #8]
 800d67c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800d67e:	68bb      	ldr	r3, [r7, #8]
 800d680:	6959      	ldr	r1, [r3, #20]
 800d682:	68bb      	ldr	r3, [r7, #8]
 800d684:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d686:	4613      	mov	r3, r2
 800d688:	009b      	lsls	r3, r3, #2
 800d68a:	4413      	add	r3, r2
 800d68c:	009b      	lsls	r3, r3, #2
 800d68e:	4a1f      	ldr	r2, [pc, #124]	@ (800d70c <xTaskPriorityInherit+0xc8>)
 800d690:	4413      	add	r3, r2
 800d692:	4299      	cmp	r1, r3
 800d694:	d122      	bne.n	800d6dc <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d696:	68bb      	ldr	r3, [r7, #8]
 800d698:	3304      	adds	r3, #4
 800d69a:	4618      	mov	r0, r3
 800d69c:	f7fe f8c8 	bl	800b830 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d6a0:	4b19      	ldr	r3, [pc, #100]	@ (800d708 <xTaskPriorityInherit+0xc4>)
 800d6a2:	681b      	ldr	r3, [r3, #0]
 800d6a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d6a6:	68bb      	ldr	r3, [r7, #8]
 800d6a8:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800d6aa:	68bb      	ldr	r3, [r7, #8]
 800d6ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d6ae:	4b18      	ldr	r3, [pc, #96]	@ (800d710 <xTaskPriorityInherit+0xcc>)
 800d6b0:	681b      	ldr	r3, [r3, #0]
 800d6b2:	429a      	cmp	r2, r3
 800d6b4:	d903      	bls.n	800d6be <xTaskPriorityInherit+0x7a>
 800d6b6:	68bb      	ldr	r3, [r7, #8]
 800d6b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d6ba:	4a15      	ldr	r2, [pc, #84]	@ (800d710 <xTaskPriorityInherit+0xcc>)
 800d6bc:	6013      	str	r3, [r2, #0]
 800d6be:	68bb      	ldr	r3, [r7, #8]
 800d6c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d6c2:	4613      	mov	r3, r2
 800d6c4:	009b      	lsls	r3, r3, #2
 800d6c6:	4413      	add	r3, r2
 800d6c8:	009b      	lsls	r3, r3, #2
 800d6ca:	4a10      	ldr	r2, [pc, #64]	@ (800d70c <xTaskPriorityInherit+0xc8>)
 800d6cc:	441a      	add	r2, r3
 800d6ce:	68bb      	ldr	r3, [r7, #8]
 800d6d0:	3304      	adds	r3, #4
 800d6d2:	4619      	mov	r1, r3
 800d6d4:	4610      	mov	r0, r2
 800d6d6:	f7fe f84e 	bl	800b776 <vListInsertEnd>
 800d6da:	e004      	b.n	800d6e6 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d6dc:	4b0a      	ldr	r3, [pc, #40]	@ (800d708 <xTaskPriorityInherit+0xc4>)
 800d6de:	681b      	ldr	r3, [r3, #0]
 800d6e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d6e2:	68bb      	ldr	r3, [r7, #8]
 800d6e4:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800d6e6:	2301      	movs	r3, #1
 800d6e8:	60fb      	str	r3, [r7, #12]
 800d6ea:	e008      	b.n	800d6fe <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800d6ec:	68bb      	ldr	r3, [r7, #8]
 800d6ee:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d6f0:	4b05      	ldr	r3, [pc, #20]	@ (800d708 <xTaskPriorityInherit+0xc4>)
 800d6f2:	681b      	ldr	r3, [r3, #0]
 800d6f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d6f6:	429a      	cmp	r2, r3
 800d6f8:	d201      	bcs.n	800d6fe <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800d6fa:	2301      	movs	r3, #1
 800d6fc:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d6fe:	68fb      	ldr	r3, [r7, #12]
	}
 800d700:	4618      	mov	r0, r3
 800d702:	3710      	adds	r7, #16
 800d704:	46bd      	mov	sp, r7
 800d706:	bd80      	pop	{r7, pc}
 800d708:	20000fd8 	.word	0x20000fd8
 800d70c:	20000fdc 	.word	0x20000fdc
 800d710:	200014b4 	.word	0x200014b4

0800d714 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d714:	b580      	push	{r7, lr}
 800d716:	b086      	sub	sp, #24
 800d718:	af00      	add	r7, sp, #0
 800d71a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d720:	2300      	movs	r3, #0
 800d722:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	2b00      	cmp	r3, #0
 800d728:	d058      	beq.n	800d7dc <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d72a:	4b2f      	ldr	r3, [pc, #188]	@ (800d7e8 <xTaskPriorityDisinherit+0xd4>)
 800d72c:	681b      	ldr	r3, [r3, #0]
 800d72e:	693a      	ldr	r2, [r7, #16]
 800d730:	429a      	cmp	r2, r3
 800d732:	d00b      	beq.n	800d74c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800d734:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d738:	f383 8811 	msr	BASEPRI, r3
 800d73c:	f3bf 8f6f 	isb	sy
 800d740:	f3bf 8f4f 	dsb	sy
 800d744:	60fb      	str	r3, [r7, #12]
}
 800d746:	bf00      	nop
 800d748:	bf00      	nop
 800d74a:	e7fd      	b.n	800d748 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800d74c:	693b      	ldr	r3, [r7, #16]
 800d74e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d750:	2b00      	cmp	r3, #0
 800d752:	d10b      	bne.n	800d76c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800d754:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d758:	f383 8811 	msr	BASEPRI, r3
 800d75c:	f3bf 8f6f 	isb	sy
 800d760:	f3bf 8f4f 	dsb	sy
 800d764:	60bb      	str	r3, [r7, #8]
}
 800d766:	bf00      	nop
 800d768:	bf00      	nop
 800d76a:	e7fd      	b.n	800d768 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800d76c:	693b      	ldr	r3, [r7, #16]
 800d76e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d770:	1e5a      	subs	r2, r3, #1
 800d772:	693b      	ldr	r3, [r7, #16]
 800d774:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d776:	693b      	ldr	r3, [r7, #16]
 800d778:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d77a:	693b      	ldr	r3, [r7, #16]
 800d77c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d77e:	429a      	cmp	r2, r3
 800d780:	d02c      	beq.n	800d7dc <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d782:	693b      	ldr	r3, [r7, #16]
 800d784:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d786:	2b00      	cmp	r3, #0
 800d788:	d128      	bne.n	800d7dc <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d78a:	693b      	ldr	r3, [r7, #16]
 800d78c:	3304      	adds	r3, #4
 800d78e:	4618      	mov	r0, r3
 800d790:	f7fe f84e 	bl	800b830 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d794:	693b      	ldr	r3, [r7, #16]
 800d796:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d798:	693b      	ldr	r3, [r7, #16]
 800d79a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d79c:	693b      	ldr	r3, [r7, #16]
 800d79e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d7a0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800d7a4:	693b      	ldr	r3, [r7, #16]
 800d7a6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d7a8:	693b      	ldr	r3, [r7, #16]
 800d7aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d7ac:	4b0f      	ldr	r3, [pc, #60]	@ (800d7ec <xTaskPriorityDisinherit+0xd8>)
 800d7ae:	681b      	ldr	r3, [r3, #0]
 800d7b0:	429a      	cmp	r2, r3
 800d7b2:	d903      	bls.n	800d7bc <xTaskPriorityDisinherit+0xa8>
 800d7b4:	693b      	ldr	r3, [r7, #16]
 800d7b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d7b8:	4a0c      	ldr	r2, [pc, #48]	@ (800d7ec <xTaskPriorityDisinherit+0xd8>)
 800d7ba:	6013      	str	r3, [r2, #0]
 800d7bc:	693b      	ldr	r3, [r7, #16]
 800d7be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d7c0:	4613      	mov	r3, r2
 800d7c2:	009b      	lsls	r3, r3, #2
 800d7c4:	4413      	add	r3, r2
 800d7c6:	009b      	lsls	r3, r3, #2
 800d7c8:	4a09      	ldr	r2, [pc, #36]	@ (800d7f0 <xTaskPriorityDisinherit+0xdc>)
 800d7ca:	441a      	add	r2, r3
 800d7cc:	693b      	ldr	r3, [r7, #16]
 800d7ce:	3304      	adds	r3, #4
 800d7d0:	4619      	mov	r1, r3
 800d7d2:	4610      	mov	r0, r2
 800d7d4:	f7fd ffcf 	bl	800b776 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d7d8:	2301      	movs	r3, #1
 800d7da:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d7dc:	697b      	ldr	r3, [r7, #20]
	}
 800d7de:	4618      	mov	r0, r3
 800d7e0:	3718      	adds	r7, #24
 800d7e2:	46bd      	mov	sp, r7
 800d7e4:	bd80      	pop	{r7, pc}
 800d7e6:	bf00      	nop
 800d7e8:	20000fd8 	.word	0x20000fd8
 800d7ec:	200014b4 	.word	0x200014b4
 800d7f0:	20000fdc 	.word	0x20000fdc

0800d7f4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800d7f4:	b580      	push	{r7, lr}
 800d7f6:	b088      	sub	sp, #32
 800d7f8:	af00      	add	r7, sp, #0
 800d7fa:	6078      	str	r0, [r7, #4]
 800d7fc:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800d802:	2301      	movs	r3, #1
 800d804:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d06c      	beq.n	800d8e6 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800d80c:	69bb      	ldr	r3, [r7, #24]
 800d80e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d810:	2b00      	cmp	r3, #0
 800d812:	d10b      	bne.n	800d82c <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800d814:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d818:	f383 8811 	msr	BASEPRI, r3
 800d81c:	f3bf 8f6f 	isb	sy
 800d820:	f3bf 8f4f 	dsb	sy
 800d824:	60fb      	str	r3, [r7, #12]
}
 800d826:	bf00      	nop
 800d828:	bf00      	nop
 800d82a:	e7fd      	b.n	800d828 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800d82c:	69bb      	ldr	r3, [r7, #24]
 800d82e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d830:	683a      	ldr	r2, [r7, #0]
 800d832:	429a      	cmp	r2, r3
 800d834:	d902      	bls.n	800d83c <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800d836:	683b      	ldr	r3, [r7, #0]
 800d838:	61fb      	str	r3, [r7, #28]
 800d83a:	e002      	b.n	800d842 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800d83c:	69bb      	ldr	r3, [r7, #24]
 800d83e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d840:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800d842:	69bb      	ldr	r3, [r7, #24]
 800d844:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d846:	69fa      	ldr	r2, [r7, #28]
 800d848:	429a      	cmp	r2, r3
 800d84a:	d04c      	beq.n	800d8e6 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800d84c:	69bb      	ldr	r3, [r7, #24]
 800d84e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d850:	697a      	ldr	r2, [r7, #20]
 800d852:	429a      	cmp	r2, r3
 800d854:	d147      	bne.n	800d8e6 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800d856:	4b26      	ldr	r3, [pc, #152]	@ (800d8f0 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800d858:	681b      	ldr	r3, [r3, #0]
 800d85a:	69ba      	ldr	r2, [r7, #24]
 800d85c:	429a      	cmp	r2, r3
 800d85e:	d10b      	bne.n	800d878 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800d860:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d864:	f383 8811 	msr	BASEPRI, r3
 800d868:	f3bf 8f6f 	isb	sy
 800d86c:	f3bf 8f4f 	dsb	sy
 800d870:	60bb      	str	r3, [r7, #8]
}
 800d872:	bf00      	nop
 800d874:	bf00      	nop
 800d876:	e7fd      	b.n	800d874 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800d878:	69bb      	ldr	r3, [r7, #24]
 800d87a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d87c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800d87e:	69bb      	ldr	r3, [r7, #24]
 800d880:	69fa      	ldr	r2, [r7, #28]
 800d882:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d884:	69bb      	ldr	r3, [r7, #24]
 800d886:	699b      	ldr	r3, [r3, #24]
 800d888:	2b00      	cmp	r3, #0
 800d88a:	db04      	blt.n	800d896 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d88c:	69fb      	ldr	r3, [r7, #28]
 800d88e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800d892:	69bb      	ldr	r3, [r7, #24]
 800d894:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800d896:	69bb      	ldr	r3, [r7, #24]
 800d898:	6959      	ldr	r1, [r3, #20]
 800d89a:	693a      	ldr	r2, [r7, #16]
 800d89c:	4613      	mov	r3, r2
 800d89e:	009b      	lsls	r3, r3, #2
 800d8a0:	4413      	add	r3, r2
 800d8a2:	009b      	lsls	r3, r3, #2
 800d8a4:	4a13      	ldr	r2, [pc, #76]	@ (800d8f4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800d8a6:	4413      	add	r3, r2
 800d8a8:	4299      	cmp	r1, r3
 800d8aa:	d11c      	bne.n	800d8e6 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d8ac:	69bb      	ldr	r3, [r7, #24]
 800d8ae:	3304      	adds	r3, #4
 800d8b0:	4618      	mov	r0, r3
 800d8b2:	f7fd ffbd 	bl	800b830 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800d8b6:	69bb      	ldr	r3, [r7, #24]
 800d8b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d8ba:	4b0f      	ldr	r3, [pc, #60]	@ (800d8f8 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800d8bc:	681b      	ldr	r3, [r3, #0]
 800d8be:	429a      	cmp	r2, r3
 800d8c0:	d903      	bls.n	800d8ca <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800d8c2:	69bb      	ldr	r3, [r7, #24]
 800d8c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d8c6:	4a0c      	ldr	r2, [pc, #48]	@ (800d8f8 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800d8c8:	6013      	str	r3, [r2, #0]
 800d8ca:	69bb      	ldr	r3, [r7, #24]
 800d8cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d8ce:	4613      	mov	r3, r2
 800d8d0:	009b      	lsls	r3, r3, #2
 800d8d2:	4413      	add	r3, r2
 800d8d4:	009b      	lsls	r3, r3, #2
 800d8d6:	4a07      	ldr	r2, [pc, #28]	@ (800d8f4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800d8d8:	441a      	add	r2, r3
 800d8da:	69bb      	ldr	r3, [r7, #24]
 800d8dc:	3304      	adds	r3, #4
 800d8de:	4619      	mov	r1, r3
 800d8e0:	4610      	mov	r0, r2
 800d8e2:	f7fd ff48 	bl	800b776 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d8e6:	bf00      	nop
 800d8e8:	3720      	adds	r7, #32
 800d8ea:	46bd      	mov	sp, r7
 800d8ec:	bd80      	pop	{r7, pc}
 800d8ee:	bf00      	nop
 800d8f0:	20000fd8 	.word	0x20000fd8
 800d8f4:	20000fdc 	.word	0x20000fdc
 800d8f8:	200014b4 	.word	0x200014b4

0800d8fc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800d8fc:	b480      	push	{r7}
 800d8fe:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800d900:	4b07      	ldr	r3, [pc, #28]	@ (800d920 <pvTaskIncrementMutexHeldCount+0x24>)
 800d902:	681b      	ldr	r3, [r3, #0]
 800d904:	2b00      	cmp	r3, #0
 800d906:	d004      	beq.n	800d912 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800d908:	4b05      	ldr	r3, [pc, #20]	@ (800d920 <pvTaskIncrementMutexHeldCount+0x24>)
 800d90a:	681b      	ldr	r3, [r3, #0]
 800d90c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800d90e:	3201      	adds	r2, #1
 800d910:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800d912:	4b03      	ldr	r3, [pc, #12]	@ (800d920 <pvTaskIncrementMutexHeldCount+0x24>)
 800d914:	681b      	ldr	r3, [r3, #0]
	}
 800d916:	4618      	mov	r0, r3
 800d918:	46bd      	mov	sp, r7
 800d91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d91e:	4770      	bx	lr
 800d920:	20000fd8 	.word	0x20000fd8

0800d924 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d924:	b580      	push	{r7, lr}
 800d926:	b084      	sub	sp, #16
 800d928:	af00      	add	r7, sp, #0
 800d92a:	6078      	str	r0, [r7, #4]
 800d92c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d92e:	4b21      	ldr	r3, [pc, #132]	@ (800d9b4 <prvAddCurrentTaskToDelayedList+0x90>)
 800d930:	681b      	ldr	r3, [r3, #0]
 800d932:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d934:	4b20      	ldr	r3, [pc, #128]	@ (800d9b8 <prvAddCurrentTaskToDelayedList+0x94>)
 800d936:	681b      	ldr	r3, [r3, #0]
 800d938:	3304      	adds	r3, #4
 800d93a:	4618      	mov	r0, r3
 800d93c:	f7fd ff78 	bl	800b830 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d946:	d10a      	bne.n	800d95e <prvAddCurrentTaskToDelayedList+0x3a>
 800d948:	683b      	ldr	r3, [r7, #0]
 800d94a:	2b00      	cmp	r3, #0
 800d94c:	d007      	beq.n	800d95e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d94e:	4b1a      	ldr	r3, [pc, #104]	@ (800d9b8 <prvAddCurrentTaskToDelayedList+0x94>)
 800d950:	681b      	ldr	r3, [r3, #0]
 800d952:	3304      	adds	r3, #4
 800d954:	4619      	mov	r1, r3
 800d956:	4819      	ldr	r0, [pc, #100]	@ (800d9bc <prvAddCurrentTaskToDelayedList+0x98>)
 800d958:	f7fd ff0d 	bl	800b776 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d95c:	e026      	b.n	800d9ac <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d95e:	68fa      	ldr	r2, [r7, #12]
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	4413      	add	r3, r2
 800d964:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d966:	4b14      	ldr	r3, [pc, #80]	@ (800d9b8 <prvAddCurrentTaskToDelayedList+0x94>)
 800d968:	681b      	ldr	r3, [r3, #0]
 800d96a:	68ba      	ldr	r2, [r7, #8]
 800d96c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d96e:	68ba      	ldr	r2, [r7, #8]
 800d970:	68fb      	ldr	r3, [r7, #12]
 800d972:	429a      	cmp	r2, r3
 800d974:	d209      	bcs.n	800d98a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d976:	4b12      	ldr	r3, [pc, #72]	@ (800d9c0 <prvAddCurrentTaskToDelayedList+0x9c>)
 800d978:	681a      	ldr	r2, [r3, #0]
 800d97a:	4b0f      	ldr	r3, [pc, #60]	@ (800d9b8 <prvAddCurrentTaskToDelayedList+0x94>)
 800d97c:	681b      	ldr	r3, [r3, #0]
 800d97e:	3304      	adds	r3, #4
 800d980:	4619      	mov	r1, r3
 800d982:	4610      	mov	r0, r2
 800d984:	f7fd ff1b 	bl	800b7be <vListInsert>
}
 800d988:	e010      	b.n	800d9ac <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d98a:	4b0e      	ldr	r3, [pc, #56]	@ (800d9c4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800d98c:	681a      	ldr	r2, [r3, #0]
 800d98e:	4b0a      	ldr	r3, [pc, #40]	@ (800d9b8 <prvAddCurrentTaskToDelayedList+0x94>)
 800d990:	681b      	ldr	r3, [r3, #0]
 800d992:	3304      	adds	r3, #4
 800d994:	4619      	mov	r1, r3
 800d996:	4610      	mov	r0, r2
 800d998:	f7fd ff11 	bl	800b7be <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d99c:	4b0a      	ldr	r3, [pc, #40]	@ (800d9c8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800d99e:	681b      	ldr	r3, [r3, #0]
 800d9a0:	68ba      	ldr	r2, [r7, #8]
 800d9a2:	429a      	cmp	r2, r3
 800d9a4:	d202      	bcs.n	800d9ac <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800d9a6:	4a08      	ldr	r2, [pc, #32]	@ (800d9c8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800d9a8:	68bb      	ldr	r3, [r7, #8]
 800d9aa:	6013      	str	r3, [r2, #0]
}
 800d9ac:	bf00      	nop
 800d9ae:	3710      	adds	r7, #16
 800d9b0:	46bd      	mov	sp, r7
 800d9b2:	bd80      	pop	{r7, pc}
 800d9b4:	200014b0 	.word	0x200014b0
 800d9b8:	20000fd8 	.word	0x20000fd8
 800d9bc:	20001498 	.word	0x20001498
 800d9c0:	20001468 	.word	0x20001468
 800d9c4:	20001464 	.word	0x20001464
 800d9c8:	200014cc 	.word	0x200014cc

0800d9cc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800d9cc:	b580      	push	{r7, lr}
 800d9ce:	b08a      	sub	sp, #40	@ 0x28
 800d9d0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800d9d2:	2300      	movs	r3, #0
 800d9d4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800d9d6:	f000 fb13 	bl	800e000 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800d9da:	4b1d      	ldr	r3, [pc, #116]	@ (800da50 <xTimerCreateTimerTask+0x84>)
 800d9dc:	681b      	ldr	r3, [r3, #0]
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	d021      	beq.n	800da26 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800d9e2:	2300      	movs	r3, #0
 800d9e4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800d9e6:	2300      	movs	r3, #0
 800d9e8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800d9ea:	1d3a      	adds	r2, r7, #4
 800d9ec:	f107 0108 	add.w	r1, r7, #8
 800d9f0:	f107 030c 	add.w	r3, r7, #12
 800d9f4:	4618      	mov	r0, r3
 800d9f6:	f7fd fe77 	bl	800b6e8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800d9fa:	6879      	ldr	r1, [r7, #4]
 800d9fc:	68bb      	ldr	r3, [r7, #8]
 800d9fe:	68fa      	ldr	r2, [r7, #12]
 800da00:	9202      	str	r2, [sp, #8]
 800da02:	9301      	str	r3, [sp, #4]
 800da04:	2302      	movs	r3, #2
 800da06:	9300      	str	r3, [sp, #0]
 800da08:	2300      	movs	r3, #0
 800da0a:	460a      	mov	r2, r1
 800da0c:	4911      	ldr	r1, [pc, #68]	@ (800da54 <xTimerCreateTimerTask+0x88>)
 800da0e:	4812      	ldr	r0, [pc, #72]	@ (800da58 <xTimerCreateTimerTask+0x8c>)
 800da10:	f7fe ffa2 	bl	800c958 <xTaskCreateStatic>
 800da14:	4603      	mov	r3, r0
 800da16:	4a11      	ldr	r2, [pc, #68]	@ (800da5c <xTimerCreateTimerTask+0x90>)
 800da18:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800da1a:	4b10      	ldr	r3, [pc, #64]	@ (800da5c <xTimerCreateTimerTask+0x90>)
 800da1c:	681b      	ldr	r3, [r3, #0]
 800da1e:	2b00      	cmp	r3, #0
 800da20:	d001      	beq.n	800da26 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800da22:	2301      	movs	r3, #1
 800da24:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800da26:	697b      	ldr	r3, [r7, #20]
 800da28:	2b00      	cmp	r3, #0
 800da2a:	d10b      	bne.n	800da44 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800da2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da30:	f383 8811 	msr	BASEPRI, r3
 800da34:	f3bf 8f6f 	isb	sy
 800da38:	f3bf 8f4f 	dsb	sy
 800da3c:	613b      	str	r3, [r7, #16]
}
 800da3e:	bf00      	nop
 800da40:	bf00      	nop
 800da42:	e7fd      	b.n	800da40 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800da44:	697b      	ldr	r3, [r7, #20]
}
 800da46:	4618      	mov	r0, r3
 800da48:	3718      	adds	r7, #24
 800da4a:	46bd      	mov	sp, r7
 800da4c:	bd80      	pop	{r7, pc}
 800da4e:	bf00      	nop
 800da50:	20001508 	.word	0x20001508
 800da54:	08011e18 	.word	0x08011e18
 800da58:	0800db99 	.word	0x0800db99
 800da5c:	2000150c 	.word	0x2000150c

0800da60 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800da60:	b580      	push	{r7, lr}
 800da62:	b08a      	sub	sp, #40	@ 0x28
 800da64:	af00      	add	r7, sp, #0
 800da66:	60f8      	str	r0, [r7, #12]
 800da68:	60b9      	str	r1, [r7, #8]
 800da6a:	607a      	str	r2, [r7, #4]
 800da6c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800da6e:	2300      	movs	r3, #0
 800da70:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800da72:	68fb      	ldr	r3, [r7, #12]
 800da74:	2b00      	cmp	r3, #0
 800da76:	d10b      	bne.n	800da90 <xTimerGenericCommand+0x30>
	__asm volatile
 800da78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da7c:	f383 8811 	msr	BASEPRI, r3
 800da80:	f3bf 8f6f 	isb	sy
 800da84:	f3bf 8f4f 	dsb	sy
 800da88:	623b      	str	r3, [r7, #32]
}
 800da8a:	bf00      	nop
 800da8c:	bf00      	nop
 800da8e:	e7fd      	b.n	800da8c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800da90:	4b19      	ldr	r3, [pc, #100]	@ (800daf8 <xTimerGenericCommand+0x98>)
 800da92:	681b      	ldr	r3, [r3, #0]
 800da94:	2b00      	cmp	r3, #0
 800da96:	d02a      	beq.n	800daee <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800da98:	68bb      	ldr	r3, [r7, #8]
 800da9a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800daa0:	68fb      	ldr	r3, [r7, #12]
 800daa2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800daa4:	68bb      	ldr	r3, [r7, #8]
 800daa6:	2b05      	cmp	r3, #5
 800daa8:	dc18      	bgt.n	800dadc <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800daaa:	f7ff fdad 	bl	800d608 <xTaskGetSchedulerState>
 800daae:	4603      	mov	r3, r0
 800dab0:	2b02      	cmp	r3, #2
 800dab2:	d109      	bne.n	800dac8 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800dab4:	4b10      	ldr	r3, [pc, #64]	@ (800daf8 <xTimerGenericCommand+0x98>)
 800dab6:	6818      	ldr	r0, [r3, #0]
 800dab8:	f107 0110 	add.w	r1, r7, #16
 800dabc:	2300      	movs	r3, #0
 800dabe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dac0:	f7fe f894 	bl	800bbec <xQueueGenericSend>
 800dac4:	6278      	str	r0, [r7, #36]	@ 0x24
 800dac6:	e012      	b.n	800daee <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800dac8:	4b0b      	ldr	r3, [pc, #44]	@ (800daf8 <xTimerGenericCommand+0x98>)
 800daca:	6818      	ldr	r0, [r3, #0]
 800dacc:	f107 0110 	add.w	r1, r7, #16
 800dad0:	2300      	movs	r3, #0
 800dad2:	2200      	movs	r2, #0
 800dad4:	f7fe f88a 	bl	800bbec <xQueueGenericSend>
 800dad8:	6278      	str	r0, [r7, #36]	@ 0x24
 800dada:	e008      	b.n	800daee <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800dadc:	4b06      	ldr	r3, [pc, #24]	@ (800daf8 <xTimerGenericCommand+0x98>)
 800dade:	6818      	ldr	r0, [r3, #0]
 800dae0:	f107 0110 	add.w	r1, r7, #16
 800dae4:	2300      	movs	r3, #0
 800dae6:	683a      	ldr	r2, [r7, #0]
 800dae8:	f7fe f982 	bl	800bdf0 <xQueueGenericSendFromISR>
 800daec:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800daee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800daf0:	4618      	mov	r0, r3
 800daf2:	3728      	adds	r7, #40	@ 0x28
 800daf4:	46bd      	mov	sp, r7
 800daf6:	bd80      	pop	{r7, pc}
 800daf8:	20001508 	.word	0x20001508

0800dafc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800dafc:	b580      	push	{r7, lr}
 800dafe:	b088      	sub	sp, #32
 800db00:	af02      	add	r7, sp, #8
 800db02:	6078      	str	r0, [r7, #4]
 800db04:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800db06:	4b23      	ldr	r3, [pc, #140]	@ (800db94 <prvProcessExpiredTimer+0x98>)
 800db08:	681b      	ldr	r3, [r3, #0]
 800db0a:	68db      	ldr	r3, [r3, #12]
 800db0c:	68db      	ldr	r3, [r3, #12]
 800db0e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800db10:	697b      	ldr	r3, [r7, #20]
 800db12:	3304      	adds	r3, #4
 800db14:	4618      	mov	r0, r3
 800db16:	f7fd fe8b 	bl	800b830 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800db1a:	697b      	ldr	r3, [r7, #20]
 800db1c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800db20:	f003 0304 	and.w	r3, r3, #4
 800db24:	2b00      	cmp	r3, #0
 800db26:	d023      	beq.n	800db70 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800db28:	697b      	ldr	r3, [r7, #20]
 800db2a:	699a      	ldr	r2, [r3, #24]
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	18d1      	adds	r1, r2, r3
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	683a      	ldr	r2, [r7, #0]
 800db34:	6978      	ldr	r0, [r7, #20]
 800db36:	f000 f8d5 	bl	800dce4 <prvInsertTimerInActiveList>
 800db3a:	4603      	mov	r3, r0
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	d020      	beq.n	800db82 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800db40:	2300      	movs	r3, #0
 800db42:	9300      	str	r3, [sp, #0]
 800db44:	2300      	movs	r3, #0
 800db46:	687a      	ldr	r2, [r7, #4]
 800db48:	2100      	movs	r1, #0
 800db4a:	6978      	ldr	r0, [r7, #20]
 800db4c:	f7ff ff88 	bl	800da60 <xTimerGenericCommand>
 800db50:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800db52:	693b      	ldr	r3, [r7, #16]
 800db54:	2b00      	cmp	r3, #0
 800db56:	d114      	bne.n	800db82 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800db58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db5c:	f383 8811 	msr	BASEPRI, r3
 800db60:	f3bf 8f6f 	isb	sy
 800db64:	f3bf 8f4f 	dsb	sy
 800db68:	60fb      	str	r3, [r7, #12]
}
 800db6a:	bf00      	nop
 800db6c:	bf00      	nop
 800db6e:	e7fd      	b.n	800db6c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800db70:	697b      	ldr	r3, [r7, #20]
 800db72:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800db76:	f023 0301 	bic.w	r3, r3, #1
 800db7a:	b2da      	uxtb	r2, r3
 800db7c:	697b      	ldr	r3, [r7, #20]
 800db7e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800db82:	697b      	ldr	r3, [r7, #20]
 800db84:	6a1b      	ldr	r3, [r3, #32]
 800db86:	6978      	ldr	r0, [r7, #20]
 800db88:	4798      	blx	r3
}
 800db8a:	bf00      	nop
 800db8c:	3718      	adds	r7, #24
 800db8e:	46bd      	mov	sp, r7
 800db90:	bd80      	pop	{r7, pc}
 800db92:	bf00      	nop
 800db94:	20001500 	.word	0x20001500

0800db98 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800db98:	b580      	push	{r7, lr}
 800db9a:	b084      	sub	sp, #16
 800db9c:	af00      	add	r7, sp, #0
 800db9e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800dba0:	f107 0308 	add.w	r3, r7, #8
 800dba4:	4618      	mov	r0, r3
 800dba6:	f000 f859 	bl	800dc5c <prvGetNextExpireTime>
 800dbaa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800dbac:	68bb      	ldr	r3, [r7, #8]
 800dbae:	4619      	mov	r1, r3
 800dbb0:	68f8      	ldr	r0, [r7, #12]
 800dbb2:	f000 f805 	bl	800dbc0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800dbb6:	f000 f8d7 	bl	800dd68 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800dbba:	bf00      	nop
 800dbbc:	e7f0      	b.n	800dba0 <prvTimerTask+0x8>
	...

0800dbc0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800dbc0:	b580      	push	{r7, lr}
 800dbc2:	b084      	sub	sp, #16
 800dbc4:	af00      	add	r7, sp, #0
 800dbc6:	6078      	str	r0, [r7, #4]
 800dbc8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800dbca:	f7ff f929 	bl	800ce20 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800dbce:	f107 0308 	add.w	r3, r7, #8
 800dbd2:	4618      	mov	r0, r3
 800dbd4:	f000 f866 	bl	800dca4 <prvSampleTimeNow>
 800dbd8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800dbda:	68bb      	ldr	r3, [r7, #8]
 800dbdc:	2b00      	cmp	r3, #0
 800dbde:	d130      	bne.n	800dc42 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800dbe0:	683b      	ldr	r3, [r7, #0]
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	d10a      	bne.n	800dbfc <prvProcessTimerOrBlockTask+0x3c>
 800dbe6:	687a      	ldr	r2, [r7, #4]
 800dbe8:	68fb      	ldr	r3, [r7, #12]
 800dbea:	429a      	cmp	r2, r3
 800dbec:	d806      	bhi.n	800dbfc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800dbee:	f7ff f925 	bl	800ce3c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800dbf2:	68f9      	ldr	r1, [r7, #12]
 800dbf4:	6878      	ldr	r0, [r7, #4]
 800dbf6:	f7ff ff81 	bl	800dafc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800dbfa:	e024      	b.n	800dc46 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800dbfc:	683b      	ldr	r3, [r7, #0]
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	d008      	beq.n	800dc14 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800dc02:	4b13      	ldr	r3, [pc, #76]	@ (800dc50 <prvProcessTimerOrBlockTask+0x90>)
 800dc04:	681b      	ldr	r3, [r3, #0]
 800dc06:	681b      	ldr	r3, [r3, #0]
 800dc08:	2b00      	cmp	r3, #0
 800dc0a:	d101      	bne.n	800dc10 <prvProcessTimerOrBlockTask+0x50>
 800dc0c:	2301      	movs	r3, #1
 800dc0e:	e000      	b.n	800dc12 <prvProcessTimerOrBlockTask+0x52>
 800dc10:	2300      	movs	r3, #0
 800dc12:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800dc14:	4b0f      	ldr	r3, [pc, #60]	@ (800dc54 <prvProcessTimerOrBlockTask+0x94>)
 800dc16:	6818      	ldr	r0, [r3, #0]
 800dc18:	687a      	ldr	r2, [r7, #4]
 800dc1a:	68fb      	ldr	r3, [r7, #12]
 800dc1c:	1ad3      	subs	r3, r2, r3
 800dc1e:	683a      	ldr	r2, [r7, #0]
 800dc20:	4619      	mov	r1, r3
 800dc22:	f7fe fe65 	bl	800c8f0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800dc26:	f7ff f909 	bl	800ce3c <xTaskResumeAll>
 800dc2a:	4603      	mov	r3, r0
 800dc2c:	2b00      	cmp	r3, #0
 800dc2e:	d10a      	bne.n	800dc46 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800dc30:	4b09      	ldr	r3, [pc, #36]	@ (800dc58 <prvProcessTimerOrBlockTask+0x98>)
 800dc32:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dc36:	601a      	str	r2, [r3, #0]
 800dc38:	f3bf 8f4f 	dsb	sy
 800dc3c:	f3bf 8f6f 	isb	sy
}
 800dc40:	e001      	b.n	800dc46 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800dc42:	f7ff f8fb 	bl	800ce3c <xTaskResumeAll>
}
 800dc46:	bf00      	nop
 800dc48:	3710      	adds	r7, #16
 800dc4a:	46bd      	mov	sp, r7
 800dc4c:	bd80      	pop	{r7, pc}
 800dc4e:	bf00      	nop
 800dc50:	20001504 	.word	0x20001504
 800dc54:	20001508 	.word	0x20001508
 800dc58:	e000ed04 	.word	0xe000ed04

0800dc5c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800dc5c:	b480      	push	{r7}
 800dc5e:	b085      	sub	sp, #20
 800dc60:	af00      	add	r7, sp, #0
 800dc62:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800dc64:	4b0e      	ldr	r3, [pc, #56]	@ (800dca0 <prvGetNextExpireTime+0x44>)
 800dc66:	681b      	ldr	r3, [r3, #0]
 800dc68:	681b      	ldr	r3, [r3, #0]
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	d101      	bne.n	800dc72 <prvGetNextExpireTime+0x16>
 800dc6e:	2201      	movs	r2, #1
 800dc70:	e000      	b.n	800dc74 <prvGetNextExpireTime+0x18>
 800dc72:	2200      	movs	r2, #0
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	681b      	ldr	r3, [r3, #0]
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	d105      	bne.n	800dc8c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800dc80:	4b07      	ldr	r3, [pc, #28]	@ (800dca0 <prvGetNextExpireTime+0x44>)
 800dc82:	681b      	ldr	r3, [r3, #0]
 800dc84:	68db      	ldr	r3, [r3, #12]
 800dc86:	681b      	ldr	r3, [r3, #0]
 800dc88:	60fb      	str	r3, [r7, #12]
 800dc8a:	e001      	b.n	800dc90 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800dc8c:	2300      	movs	r3, #0
 800dc8e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800dc90:	68fb      	ldr	r3, [r7, #12]
}
 800dc92:	4618      	mov	r0, r3
 800dc94:	3714      	adds	r7, #20
 800dc96:	46bd      	mov	sp, r7
 800dc98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc9c:	4770      	bx	lr
 800dc9e:	bf00      	nop
 800dca0:	20001500 	.word	0x20001500

0800dca4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800dca4:	b580      	push	{r7, lr}
 800dca6:	b084      	sub	sp, #16
 800dca8:	af00      	add	r7, sp, #0
 800dcaa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800dcac:	f7ff f964 	bl	800cf78 <xTaskGetTickCount>
 800dcb0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800dcb2:	4b0b      	ldr	r3, [pc, #44]	@ (800dce0 <prvSampleTimeNow+0x3c>)
 800dcb4:	681b      	ldr	r3, [r3, #0]
 800dcb6:	68fa      	ldr	r2, [r7, #12]
 800dcb8:	429a      	cmp	r2, r3
 800dcba:	d205      	bcs.n	800dcc8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800dcbc:	f000 f93a 	bl	800df34 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	2201      	movs	r2, #1
 800dcc4:	601a      	str	r2, [r3, #0]
 800dcc6:	e002      	b.n	800dcce <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	2200      	movs	r2, #0
 800dccc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800dcce:	4a04      	ldr	r2, [pc, #16]	@ (800dce0 <prvSampleTimeNow+0x3c>)
 800dcd0:	68fb      	ldr	r3, [r7, #12]
 800dcd2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800dcd4:	68fb      	ldr	r3, [r7, #12]
}
 800dcd6:	4618      	mov	r0, r3
 800dcd8:	3710      	adds	r7, #16
 800dcda:	46bd      	mov	sp, r7
 800dcdc:	bd80      	pop	{r7, pc}
 800dcde:	bf00      	nop
 800dce0:	20001510 	.word	0x20001510

0800dce4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800dce4:	b580      	push	{r7, lr}
 800dce6:	b086      	sub	sp, #24
 800dce8:	af00      	add	r7, sp, #0
 800dcea:	60f8      	str	r0, [r7, #12]
 800dcec:	60b9      	str	r1, [r7, #8]
 800dcee:	607a      	str	r2, [r7, #4]
 800dcf0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800dcf2:	2300      	movs	r3, #0
 800dcf4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800dcf6:	68fb      	ldr	r3, [r7, #12]
 800dcf8:	68ba      	ldr	r2, [r7, #8]
 800dcfa:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800dcfc:	68fb      	ldr	r3, [r7, #12]
 800dcfe:	68fa      	ldr	r2, [r7, #12]
 800dd00:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800dd02:	68ba      	ldr	r2, [r7, #8]
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	429a      	cmp	r2, r3
 800dd08:	d812      	bhi.n	800dd30 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dd0a:	687a      	ldr	r2, [r7, #4]
 800dd0c:	683b      	ldr	r3, [r7, #0]
 800dd0e:	1ad2      	subs	r2, r2, r3
 800dd10:	68fb      	ldr	r3, [r7, #12]
 800dd12:	699b      	ldr	r3, [r3, #24]
 800dd14:	429a      	cmp	r2, r3
 800dd16:	d302      	bcc.n	800dd1e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800dd18:	2301      	movs	r3, #1
 800dd1a:	617b      	str	r3, [r7, #20]
 800dd1c:	e01b      	b.n	800dd56 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800dd1e:	4b10      	ldr	r3, [pc, #64]	@ (800dd60 <prvInsertTimerInActiveList+0x7c>)
 800dd20:	681a      	ldr	r2, [r3, #0]
 800dd22:	68fb      	ldr	r3, [r7, #12]
 800dd24:	3304      	adds	r3, #4
 800dd26:	4619      	mov	r1, r3
 800dd28:	4610      	mov	r0, r2
 800dd2a:	f7fd fd48 	bl	800b7be <vListInsert>
 800dd2e:	e012      	b.n	800dd56 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800dd30:	687a      	ldr	r2, [r7, #4]
 800dd32:	683b      	ldr	r3, [r7, #0]
 800dd34:	429a      	cmp	r2, r3
 800dd36:	d206      	bcs.n	800dd46 <prvInsertTimerInActiveList+0x62>
 800dd38:	68ba      	ldr	r2, [r7, #8]
 800dd3a:	683b      	ldr	r3, [r7, #0]
 800dd3c:	429a      	cmp	r2, r3
 800dd3e:	d302      	bcc.n	800dd46 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800dd40:	2301      	movs	r3, #1
 800dd42:	617b      	str	r3, [r7, #20]
 800dd44:	e007      	b.n	800dd56 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800dd46:	4b07      	ldr	r3, [pc, #28]	@ (800dd64 <prvInsertTimerInActiveList+0x80>)
 800dd48:	681a      	ldr	r2, [r3, #0]
 800dd4a:	68fb      	ldr	r3, [r7, #12]
 800dd4c:	3304      	adds	r3, #4
 800dd4e:	4619      	mov	r1, r3
 800dd50:	4610      	mov	r0, r2
 800dd52:	f7fd fd34 	bl	800b7be <vListInsert>
		}
	}

	return xProcessTimerNow;
 800dd56:	697b      	ldr	r3, [r7, #20]
}
 800dd58:	4618      	mov	r0, r3
 800dd5a:	3718      	adds	r7, #24
 800dd5c:	46bd      	mov	sp, r7
 800dd5e:	bd80      	pop	{r7, pc}
 800dd60:	20001504 	.word	0x20001504
 800dd64:	20001500 	.word	0x20001500

0800dd68 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800dd68:	b580      	push	{r7, lr}
 800dd6a:	b08e      	sub	sp, #56	@ 0x38
 800dd6c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800dd6e:	e0ce      	b.n	800df0e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	2b00      	cmp	r3, #0
 800dd74:	da19      	bge.n	800ddaa <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800dd76:	1d3b      	adds	r3, r7, #4
 800dd78:	3304      	adds	r3, #4
 800dd7a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800dd7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	d10b      	bne.n	800dd9a <prvProcessReceivedCommands+0x32>
	__asm volatile
 800dd82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd86:	f383 8811 	msr	BASEPRI, r3
 800dd8a:	f3bf 8f6f 	isb	sy
 800dd8e:	f3bf 8f4f 	dsb	sy
 800dd92:	61fb      	str	r3, [r7, #28]
}
 800dd94:	bf00      	nop
 800dd96:	bf00      	nop
 800dd98:	e7fd      	b.n	800dd96 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800dd9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd9c:	681b      	ldr	r3, [r3, #0]
 800dd9e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800dda0:	6850      	ldr	r0, [r2, #4]
 800dda2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800dda4:	6892      	ldr	r2, [r2, #8]
 800dda6:	4611      	mov	r1, r2
 800dda8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	2b00      	cmp	r3, #0
 800ddae:	f2c0 80ae 	blt.w	800df0e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800ddb2:	68fb      	ldr	r3, [r7, #12]
 800ddb4:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800ddb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ddb8:	695b      	ldr	r3, [r3, #20]
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	d004      	beq.n	800ddc8 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ddbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ddc0:	3304      	adds	r3, #4
 800ddc2:	4618      	mov	r0, r3
 800ddc4:	f7fd fd34 	bl	800b830 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ddc8:	463b      	mov	r3, r7
 800ddca:	4618      	mov	r0, r3
 800ddcc:	f7ff ff6a 	bl	800dca4 <prvSampleTimeNow>
 800ddd0:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	2b09      	cmp	r3, #9
 800ddd6:	f200 8097 	bhi.w	800df08 <prvProcessReceivedCommands+0x1a0>
 800ddda:	a201      	add	r2, pc, #4	@ (adr r2, 800dde0 <prvProcessReceivedCommands+0x78>)
 800dddc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dde0:	0800de09 	.word	0x0800de09
 800dde4:	0800de09 	.word	0x0800de09
 800dde8:	0800de09 	.word	0x0800de09
 800ddec:	0800de7f 	.word	0x0800de7f
 800ddf0:	0800de93 	.word	0x0800de93
 800ddf4:	0800dedf 	.word	0x0800dedf
 800ddf8:	0800de09 	.word	0x0800de09
 800ddfc:	0800de09 	.word	0x0800de09
 800de00:	0800de7f 	.word	0x0800de7f
 800de04:	0800de93 	.word	0x0800de93
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800de08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de0a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800de0e:	f043 0301 	orr.w	r3, r3, #1
 800de12:	b2da      	uxtb	r2, r3
 800de14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de16:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800de1a:	68ba      	ldr	r2, [r7, #8]
 800de1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de1e:	699b      	ldr	r3, [r3, #24]
 800de20:	18d1      	adds	r1, r2, r3
 800de22:	68bb      	ldr	r3, [r7, #8]
 800de24:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800de26:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800de28:	f7ff ff5c 	bl	800dce4 <prvInsertTimerInActiveList>
 800de2c:	4603      	mov	r3, r0
 800de2e:	2b00      	cmp	r3, #0
 800de30:	d06c      	beq.n	800df0c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800de32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de34:	6a1b      	ldr	r3, [r3, #32]
 800de36:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800de38:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800de3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de3c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800de40:	f003 0304 	and.w	r3, r3, #4
 800de44:	2b00      	cmp	r3, #0
 800de46:	d061      	beq.n	800df0c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800de48:	68ba      	ldr	r2, [r7, #8]
 800de4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de4c:	699b      	ldr	r3, [r3, #24]
 800de4e:	441a      	add	r2, r3
 800de50:	2300      	movs	r3, #0
 800de52:	9300      	str	r3, [sp, #0]
 800de54:	2300      	movs	r3, #0
 800de56:	2100      	movs	r1, #0
 800de58:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800de5a:	f7ff fe01 	bl	800da60 <xTimerGenericCommand>
 800de5e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800de60:	6a3b      	ldr	r3, [r7, #32]
 800de62:	2b00      	cmp	r3, #0
 800de64:	d152      	bne.n	800df0c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800de66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de6a:	f383 8811 	msr	BASEPRI, r3
 800de6e:	f3bf 8f6f 	isb	sy
 800de72:	f3bf 8f4f 	dsb	sy
 800de76:	61bb      	str	r3, [r7, #24]
}
 800de78:	bf00      	nop
 800de7a:	bf00      	nop
 800de7c:	e7fd      	b.n	800de7a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800de7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de80:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800de84:	f023 0301 	bic.w	r3, r3, #1
 800de88:	b2da      	uxtb	r2, r3
 800de8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de8c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800de90:	e03d      	b.n	800df0e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800de92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de94:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800de98:	f043 0301 	orr.w	r3, r3, #1
 800de9c:	b2da      	uxtb	r2, r3
 800de9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dea0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800dea4:	68ba      	ldr	r2, [r7, #8]
 800dea6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dea8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800deaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800deac:	699b      	ldr	r3, [r3, #24]
 800deae:	2b00      	cmp	r3, #0
 800deb0:	d10b      	bne.n	800deca <prvProcessReceivedCommands+0x162>
	__asm volatile
 800deb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800deb6:	f383 8811 	msr	BASEPRI, r3
 800deba:	f3bf 8f6f 	isb	sy
 800debe:	f3bf 8f4f 	dsb	sy
 800dec2:	617b      	str	r3, [r7, #20]
}
 800dec4:	bf00      	nop
 800dec6:	bf00      	nop
 800dec8:	e7fd      	b.n	800dec6 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800deca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800decc:	699a      	ldr	r2, [r3, #24]
 800dece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ded0:	18d1      	adds	r1, r2, r3
 800ded2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ded4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ded6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ded8:	f7ff ff04 	bl	800dce4 <prvInsertTimerInActiveList>
					break;
 800dedc:	e017      	b.n	800df0e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800dede:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dee0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800dee4:	f003 0302 	and.w	r3, r3, #2
 800dee8:	2b00      	cmp	r3, #0
 800deea:	d103      	bne.n	800def4 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800deec:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800deee:	f000 fbeb 	bl	800e6c8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800def2:	e00c      	b.n	800df0e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800def4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800def6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800defa:	f023 0301 	bic.w	r3, r3, #1
 800defe:	b2da      	uxtb	r2, r3
 800df00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df02:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800df06:	e002      	b.n	800df0e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800df08:	bf00      	nop
 800df0a:	e000      	b.n	800df0e <prvProcessReceivedCommands+0x1a6>
					break;
 800df0c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800df0e:	4b08      	ldr	r3, [pc, #32]	@ (800df30 <prvProcessReceivedCommands+0x1c8>)
 800df10:	681b      	ldr	r3, [r3, #0]
 800df12:	1d39      	adds	r1, r7, #4
 800df14:	2200      	movs	r2, #0
 800df16:	4618      	mov	r0, r3
 800df18:	f7fe f898 	bl	800c04c <xQueueReceive>
 800df1c:	4603      	mov	r3, r0
 800df1e:	2b00      	cmp	r3, #0
 800df20:	f47f af26 	bne.w	800dd70 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800df24:	bf00      	nop
 800df26:	bf00      	nop
 800df28:	3730      	adds	r7, #48	@ 0x30
 800df2a:	46bd      	mov	sp, r7
 800df2c:	bd80      	pop	{r7, pc}
 800df2e:	bf00      	nop
 800df30:	20001508 	.word	0x20001508

0800df34 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800df34:	b580      	push	{r7, lr}
 800df36:	b088      	sub	sp, #32
 800df38:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800df3a:	e049      	b.n	800dfd0 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800df3c:	4b2e      	ldr	r3, [pc, #184]	@ (800dff8 <prvSwitchTimerLists+0xc4>)
 800df3e:	681b      	ldr	r3, [r3, #0]
 800df40:	68db      	ldr	r3, [r3, #12]
 800df42:	681b      	ldr	r3, [r3, #0]
 800df44:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800df46:	4b2c      	ldr	r3, [pc, #176]	@ (800dff8 <prvSwitchTimerLists+0xc4>)
 800df48:	681b      	ldr	r3, [r3, #0]
 800df4a:	68db      	ldr	r3, [r3, #12]
 800df4c:	68db      	ldr	r3, [r3, #12]
 800df4e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800df50:	68fb      	ldr	r3, [r7, #12]
 800df52:	3304      	adds	r3, #4
 800df54:	4618      	mov	r0, r3
 800df56:	f7fd fc6b 	bl	800b830 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800df5a:	68fb      	ldr	r3, [r7, #12]
 800df5c:	6a1b      	ldr	r3, [r3, #32]
 800df5e:	68f8      	ldr	r0, [r7, #12]
 800df60:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800df62:	68fb      	ldr	r3, [r7, #12]
 800df64:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800df68:	f003 0304 	and.w	r3, r3, #4
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	d02f      	beq.n	800dfd0 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800df70:	68fb      	ldr	r3, [r7, #12]
 800df72:	699b      	ldr	r3, [r3, #24]
 800df74:	693a      	ldr	r2, [r7, #16]
 800df76:	4413      	add	r3, r2
 800df78:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800df7a:	68ba      	ldr	r2, [r7, #8]
 800df7c:	693b      	ldr	r3, [r7, #16]
 800df7e:	429a      	cmp	r2, r3
 800df80:	d90e      	bls.n	800dfa0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800df82:	68fb      	ldr	r3, [r7, #12]
 800df84:	68ba      	ldr	r2, [r7, #8]
 800df86:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800df88:	68fb      	ldr	r3, [r7, #12]
 800df8a:	68fa      	ldr	r2, [r7, #12]
 800df8c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800df8e:	4b1a      	ldr	r3, [pc, #104]	@ (800dff8 <prvSwitchTimerLists+0xc4>)
 800df90:	681a      	ldr	r2, [r3, #0]
 800df92:	68fb      	ldr	r3, [r7, #12]
 800df94:	3304      	adds	r3, #4
 800df96:	4619      	mov	r1, r3
 800df98:	4610      	mov	r0, r2
 800df9a:	f7fd fc10 	bl	800b7be <vListInsert>
 800df9e:	e017      	b.n	800dfd0 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800dfa0:	2300      	movs	r3, #0
 800dfa2:	9300      	str	r3, [sp, #0]
 800dfa4:	2300      	movs	r3, #0
 800dfa6:	693a      	ldr	r2, [r7, #16]
 800dfa8:	2100      	movs	r1, #0
 800dfaa:	68f8      	ldr	r0, [r7, #12]
 800dfac:	f7ff fd58 	bl	800da60 <xTimerGenericCommand>
 800dfb0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	d10b      	bne.n	800dfd0 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800dfb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dfbc:	f383 8811 	msr	BASEPRI, r3
 800dfc0:	f3bf 8f6f 	isb	sy
 800dfc4:	f3bf 8f4f 	dsb	sy
 800dfc8:	603b      	str	r3, [r7, #0]
}
 800dfca:	bf00      	nop
 800dfcc:	bf00      	nop
 800dfce:	e7fd      	b.n	800dfcc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800dfd0:	4b09      	ldr	r3, [pc, #36]	@ (800dff8 <prvSwitchTimerLists+0xc4>)
 800dfd2:	681b      	ldr	r3, [r3, #0]
 800dfd4:	681b      	ldr	r3, [r3, #0]
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	d1b0      	bne.n	800df3c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800dfda:	4b07      	ldr	r3, [pc, #28]	@ (800dff8 <prvSwitchTimerLists+0xc4>)
 800dfdc:	681b      	ldr	r3, [r3, #0]
 800dfde:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800dfe0:	4b06      	ldr	r3, [pc, #24]	@ (800dffc <prvSwitchTimerLists+0xc8>)
 800dfe2:	681b      	ldr	r3, [r3, #0]
 800dfe4:	4a04      	ldr	r2, [pc, #16]	@ (800dff8 <prvSwitchTimerLists+0xc4>)
 800dfe6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800dfe8:	4a04      	ldr	r2, [pc, #16]	@ (800dffc <prvSwitchTimerLists+0xc8>)
 800dfea:	697b      	ldr	r3, [r7, #20]
 800dfec:	6013      	str	r3, [r2, #0]
}
 800dfee:	bf00      	nop
 800dff0:	3718      	adds	r7, #24
 800dff2:	46bd      	mov	sp, r7
 800dff4:	bd80      	pop	{r7, pc}
 800dff6:	bf00      	nop
 800dff8:	20001500 	.word	0x20001500
 800dffc:	20001504 	.word	0x20001504

0800e000 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800e000:	b580      	push	{r7, lr}
 800e002:	b082      	sub	sp, #8
 800e004:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800e006:	f000 f96f 	bl	800e2e8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800e00a:	4b15      	ldr	r3, [pc, #84]	@ (800e060 <prvCheckForValidListAndQueue+0x60>)
 800e00c:	681b      	ldr	r3, [r3, #0]
 800e00e:	2b00      	cmp	r3, #0
 800e010:	d120      	bne.n	800e054 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800e012:	4814      	ldr	r0, [pc, #80]	@ (800e064 <prvCheckForValidListAndQueue+0x64>)
 800e014:	f7fd fb82 	bl	800b71c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800e018:	4813      	ldr	r0, [pc, #76]	@ (800e068 <prvCheckForValidListAndQueue+0x68>)
 800e01a:	f7fd fb7f 	bl	800b71c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800e01e:	4b13      	ldr	r3, [pc, #76]	@ (800e06c <prvCheckForValidListAndQueue+0x6c>)
 800e020:	4a10      	ldr	r2, [pc, #64]	@ (800e064 <prvCheckForValidListAndQueue+0x64>)
 800e022:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800e024:	4b12      	ldr	r3, [pc, #72]	@ (800e070 <prvCheckForValidListAndQueue+0x70>)
 800e026:	4a10      	ldr	r2, [pc, #64]	@ (800e068 <prvCheckForValidListAndQueue+0x68>)
 800e028:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800e02a:	2300      	movs	r3, #0
 800e02c:	9300      	str	r3, [sp, #0]
 800e02e:	4b11      	ldr	r3, [pc, #68]	@ (800e074 <prvCheckForValidListAndQueue+0x74>)
 800e030:	4a11      	ldr	r2, [pc, #68]	@ (800e078 <prvCheckForValidListAndQueue+0x78>)
 800e032:	2110      	movs	r1, #16
 800e034:	200a      	movs	r0, #10
 800e036:	f7fd fc8f 	bl	800b958 <xQueueGenericCreateStatic>
 800e03a:	4603      	mov	r3, r0
 800e03c:	4a08      	ldr	r2, [pc, #32]	@ (800e060 <prvCheckForValidListAndQueue+0x60>)
 800e03e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800e040:	4b07      	ldr	r3, [pc, #28]	@ (800e060 <prvCheckForValidListAndQueue+0x60>)
 800e042:	681b      	ldr	r3, [r3, #0]
 800e044:	2b00      	cmp	r3, #0
 800e046:	d005      	beq.n	800e054 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800e048:	4b05      	ldr	r3, [pc, #20]	@ (800e060 <prvCheckForValidListAndQueue+0x60>)
 800e04a:	681b      	ldr	r3, [r3, #0]
 800e04c:	490b      	ldr	r1, [pc, #44]	@ (800e07c <prvCheckForValidListAndQueue+0x7c>)
 800e04e:	4618      	mov	r0, r3
 800e050:	f7fe fbfa 	bl	800c848 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e054:	f000 f97a 	bl	800e34c <vPortExitCritical>
}
 800e058:	bf00      	nop
 800e05a:	46bd      	mov	sp, r7
 800e05c:	bd80      	pop	{r7, pc}
 800e05e:	bf00      	nop
 800e060:	20001508 	.word	0x20001508
 800e064:	200014d8 	.word	0x200014d8
 800e068:	200014ec 	.word	0x200014ec
 800e06c:	20001500 	.word	0x20001500
 800e070:	20001504 	.word	0x20001504
 800e074:	200015b4 	.word	0x200015b4
 800e078:	20001514 	.word	0x20001514
 800e07c:	08011e20 	.word	0x08011e20

0800e080 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e080:	b480      	push	{r7}
 800e082:	b085      	sub	sp, #20
 800e084:	af00      	add	r7, sp, #0
 800e086:	60f8      	str	r0, [r7, #12]
 800e088:	60b9      	str	r1, [r7, #8]
 800e08a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e08c:	68fb      	ldr	r3, [r7, #12]
 800e08e:	3b04      	subs	r3, #4
 800e090:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e092:	68fb      	ldr	r3, [r7, #12]
 800e094:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800e098:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e09a:	68fb      	ldr	r3, [r7, #12]
 800e09c:	3b04      	subs	r3, #4
 800e09e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e0a0:	68bb      	ldr	r3, [r7, #8]
 800e0a2:	f023 0201 	bic.w	r2, r3, #1
 800e0a6:	68fb      	ldr	r3, [r7, #12]
 800e0a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e0aa:	68fb      	ldr	r3, [r7, #12]
 800e0ac:	3b04      	subs	r3, #4
 800e0ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e0b0:	4a0c      	ldr	r2, [pc, #48]	@ (800e0e4 <pxPortInitialiseStack+0x64>)
 800e0b2:	68fb      	ldr	r3, [r7, #12]
 800e0b4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e0b6:	68fb      	ldr	r3, [r7, #12]
 800e0b8:	3b14      	subs	r3, #20
 800e0ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e0bc:	687a      	ldr	r2, [r7, #4]
 800e0be:	68fb      	ldr	r3, [r7, #12]
 800e0c0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e0c2:	68fb      	ldr	r3, [r7, #12]
 800e0c4:	3b04      	subs	r3, #4
 800e0c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e0c8:	68fb      	ldr	r3, [r7, #12]
 800e0ca:	f06f 0202 	mvn.w	r2, #2
 800e0ce:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e0d0:	68fb      	ldr	r3, [r7, #12]
 800e0d2:	3b20      	subs	r3, #32
 800e0d4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e0d6:	68fb      	ldr	r3, [r7, #12]
}
 800e0d8:	4618      	mov	r0, r3
 800e0da:	3714      	adds	r7, #20
 800e0dc:	46bd      	mov	sp, r7
 800e0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0e2:	4770      	bx	lr
 800e0e4:	0800e0e9 	.word	0x0800e0e9

0800e0e8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e0e8:	b480      	push	{r7}
 800e0ea:	b085      	sub	sp, #20
 800e0ec:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800e0ee:	2300      	movs	r3, #0
 800e0f0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e0f2:	4b13      	ldr	r3, [pc, #76]	@ (800e140 <prvTaskExitError+0x58>)
 800e0f4:	681b      	ldr	r3, [r3, #0]
 800e0f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e0fa:	d00b      	beq.n	800e114 <prvTaskExitError+0x2c>
	__asm volatile
 800e0fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e100:	f383 8811 	msr	BASEPRI, r3
 800e104:	f3bf 8f6f 	isb	sy
 800e108:	f3bf 8f4f 	dsb	sy
 800e10c:	60fb      	str	r3, [r7, #12]
}
 800e10e:	bf00      	nop
 800e110:	bf00      	nop
 800e112:	e7fd      	b.n	800e110 <prvTaskExitError+0x28>
	__asm volatile
 800e114:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e118:	f383 8811 	msr	BASEPRI, r3
 800e11c:	f3bf 8f6f 	isb	sy
 800e120:	f3bf 8f4f 	dsb	sy
 800e124:	60bb      	str	r3, [r7, #8]
}
 800e126:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e128:	bf00      	nop
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	2b00      	cmp	r3, #0
 800e12e:	d0fc      	beq.n	800e12a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e130:	bf00      	nop
 800e132:	bf00      	nop
 800e134:	3714      	adds	r7, #20
 800e136:	46bd      	mov	sp, r7
 800e138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e13c:	4770      	bx	lr
 800e13e:	bf00      	nop
 800e140:	20000030 	.word	0x20000030
	...

0800e150 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e150:	4b07      	ldr	r3, [pc, #28]	@ (800e170 <pxCurrentTCBConst2>)
 800e152:	6819      	ldr	r1, [r3, #0]
 800e154:	6808      	ldr	r0, [r1, #0]
 800e156:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e15a:	f380 8809 	msr	PSP, r0
 800e15e:	f3bf 8f6f 	isb	sy
 800e162:	f04f 0000 	mov.w	r0, #0
 800e166:	f380 8811 	msr	BASEPRI, r0
 800e16a:	4770      	bx	lr
 800e16c:	f3af 8000 	nop.w

0800e170 <pxCurrentTCBConst2>:
 800e170:	20000fd8 	.word	0x20000fd8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e174:	bf00      	nop
 800e176:	bf00      	nop

0800e178 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e178:	4808      	ldr	r0, [pc, #32]	@ (800e19c <prvPortStartFirstTask+0x24>)
 800e17a:	6800      	ldr	r0, [r0, #0]
 800e17c:	6800      	ldr	r0, [r0, #0]
 800e17e:	f380 8808 	msr	MSP, r0
 800e182:	f04f 0000 	mov.w	r0, #0
 800e186:	f380 8814 	msr	CONTROL, r0
 800e18a:	b662      	cpsie	i
 800e18c:	b661      	cpsie	f
 800e18e:	f3bf 8f4f 	dsb	sy
 800e192:	f3bf 8f6f 	isb	sy
 800e196:	df00      	svc	0
 800e198:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e19a:	bf00      	nop
 800e19c:	e000ed08 	.word	0xe000ed08

0800e1a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e1a0:	b580      	push	{r7, lr}
 800e1a2:	b086      	sub	sp, #24
 800e1a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e1a6:	4b47      	ldr	r3, [pc, #284]	@ (800e2c4 <xPortStartScheduler+0x124>)
 800e1a8:	681b      	ldr	r3, [r3, #0]
 800e1aa:	4a47      	ldr	r2, [pc, #284]	@ (800e2c8 <xPortStartScheduler+0x128>)
 800e1ac:	4293      	cmp	r3, r2
 800e1ae:	d10b      	bne.n	800e1c8 <xPortStartScheduler+0x28>
	__asm volatile
 800e1b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e1b4:	f383 8811 	msr	BASEPRI, r3
 800e1b8:	f3bf 8f6f 	isb	sy
 800e1bc:	f3bf 8f4f 	dsb	sy
 800e1c0:	60fb      	str	r3, [r7, #12]
}
 800e1c2:	bf00      	nop
 800e1c4:	bf00      	nop
 800e1c6:	e7fd      	b.n	800e1c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800e1c8:	4b3e      	ldr	r3, [pc, #248]	@ (800e2c4 <xPortStartScheduler+0x124>)
 800e1ca:	681b      	ldr	r3, [r3, #0]
 800e1cc:	4a3f      	ldr	r2, [pc, #252]	@ (800e2cc <xPortStartScheduler+0x12c>)
 800e1ce:	4293      	cmp	r3, r2
 800e1d0:	d10b      	bne.n	800e1ea <xPortStartScheduler+0x4a>
	__asm volatile
 800e1d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e1d6:	f383 8811 	msr	BASEPRI, r3
 800e1da:	f3bf 8f6f 	isb	sy
 800e1de:	f3bf 8f4f 	dsb	sy
 800e1e2:	613b      	str	r3, [r7, #16]
}
 800e1e4:	bf00      	nop
 800e1e6:	bf00      	nop
 800e1e8:	e7fd      	b.n	800e1e6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e1ea:	4b39      	ldr	r3, [pc, #228]	@ (800e2d0 <xPortStartScheduler+0x130>)
 800e1ec:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e1ee:	697b      	ldr	r3, [r7, #20]
 800e1f0:	781b      	ldrb	r3, [r3, #0]
 800e1f2:	b2db      	uxtb	r3, r3
 800e1f4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e1f6:	697b      	ldr	r3, [r7, #20]
 800e1f8:	22ff      	movs	r2, #255	@ 0xff
 800e1fa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e1fc:	697b      	ldr	r3, [r7, #20]
 800e1fe:	781b      	ldrb	r3, [r3, #0]
 800e200:	b2db      	uxtb	r3, r3
 800e202:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e204:	78fb      	ldrb	r3, [r7, #3]
 800e206:	b2db      	uxtb	r3, r3
 800e208:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800e20c:	b2da      	uxtb	r2, r3
 800e20e:	4b31      	ldr	r3, [pc, #196]	@ (800e2d4 <xPortStartScheduler+0x134>)
 800e210:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e212:	4b31      	ldr	r3, [pc, #196]	@ (800e2d8 <xPortStartScheduler+0x138>)
 800e214:	2207      	movs	r2, #7
 800e216:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e218:	e009      	b.n	800e22e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800e21a:	4b2f      	ldr	r3, [pc, #188]	@ (800e2d8 <xPortStartScheduler+0x138>)
 800e21c:	681b      	ldr	r3, [r3, #0]
 800e21e:	3b01      	subs	r3, #1
 800e220:	4a2d      	ldr	r2, [pc, #180]	@ (800e2d8 <xPortStartScheduler+0x138>)
 800e222:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e224:	78fb      	ldrb	r3, [r7, #3]
 800e226:	b2db      	uxtb	r3, r3
 800e228:	005b      	lsls	r3, r3, #1
 800e22a:	b2db      	uxtb	r3, r3
 800e22c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e22e:	78fb      	ldrb	r3, [r7, #3]
 800e230:	b2db      	uxtb	r3, r3
 800e232:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e236:	2b80      	cmp	r3, #128	@ 0x80
 800e238:	d0ef      	beq.n	800e21a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e23a:	4b27      	ldr	r3, [pc, #156]	@ (800e2d8 <xPortStartScheduler+0x138>)
 800e23c:	681b      	ldr	r3, [r3, #0]
 800e23e:	f1c3 0307 	rsb	r3, r3, #7
 800e242:	2b04      	cmp	r3, #4
 800e244:	d00b      	beq.n	800e25e <xPortStartScheduler+0xbe>
	__asm volatile
 800e246:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e24a:	f383 8811 	msr	BASEPRI, r3
 800e24e:	f3bf 8f6f 	isb	sy
 800e252:	f3bf 8f4f 	dsb	sy
 800e256:	60bb      	str	r3, [r7, #8]
}
 800e258:	bf00      	nop
 800e25a:	bf00      	nop
 800e25c:	e7fd      	b.n	800e25a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e25e:	4b1e      	ldr	r3, [pc, #120]	@ (800e2d8 <xPortStartScheduler+0x138>)
 800e260:	681b      	ldr	r3, [r3, #0]
 800e262:	021b      	lsls	r3, r3, #8
 800e264:	4a1c      	ldr	r2, [pc, #112]	@ (800e2d8 <xPortStartScheduler+0x138>)
 800e266:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e268:	4b1b      	ldr	r3, [pc, #108]	@ (800e2d8 <xPortStartScheduler+0x138>)
 800e26a:	681b      	ldr	r3, [r3, #0]
 800e26c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800e270:	4a19      	ldr	r2, [pc, #100]	@ (800e2d8 <xPortStartScheduler+0x138>)
 800e272:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	b2da      	uxtb	r2, r3
 800e278:	697b      	ldr	r3, [r7, #20]
 800e27a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e27c:	4b17      	ldr	r3, [pc, #92]	@ (800e2dc <xPortStartScheduler+0x13c>)
 800e27e:	681b      	ldr	r3, [r3, #0]
 800e280:	4a16      	ldr	r2, [pc, #88]	@ (800e2dc <xPortStartScheduler+0x13c>)
 800e282:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800e286:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e288:	4b14      	ldr	r3, [pc, #80]	@ (800e2dc <xPortStartScheduler+0x13c>)
 800e28a:	681b      	ldr	r3, [r3, #0]
 800e28c:	4a13      	ldr	r2, [pc, #76]	@ (800e2dc <xPortStartScheduler+0x13c>)
 800e28e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800e292:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e294:	f000 f8da 	bl	800e44c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e298:	4b11      	ldr	r3, [pc, #68]	@ (800e2e0 <xPortStartScheduler+0x140>)
 800e29a:	2200      	movs	r2, #0
 800e29c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e29e:	f000 f8f9 	bl	800e494 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e2a2:	4b10      	ldr	r3, [pc, #64]	@ (800e2e4 <xPortStartScheduler+0x144>)
 800e2a4:	681b      	ldr	r3, [r3, #0]
 800e2a6:	4a0f      	ldr	r2, [pc, #60]	@ (800e2e4 <xPortStartScheduler+0x144>)
 800e2a8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800e2ac:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e2ae:	f7ff ff63 	bl	800e178 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e2b2:	f7fe ff2b 	bl	800d10c <vTaskSwitchContext>
	prvTaskExitError();
 800e2b6:	f7ff ff17 	bl	800e0e8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e2ba:	2300      	movs	r3, #0
}
 800e2bc:	4618      	mov	r0, r3
 800e2be:	3718      	adds	r7, #24
 800e2c0:	46bd      	mov	sp, r7
 800e2c2:	bd80      	pop	{r7, pc}
 800e2c4:	e000ed00 	.word	0xe000ed00
 800e2c8:	410fc271 	.word	0x410fc271
 800e2cc:	410fc270 	.word	0x410fc270
 800e2d0:	e000e400 	.word	0xe000e400
 800e2d4:	20001604 	.word	0x20001604
 800e2d8:	20001608 	.word	0x20001608
 800e2dc:	e000ed20 	.word	0xe000ed20
 800e2e0:	20000030 	.word	0x20000030
 800e2e4:	e000ef34 	.word	0xe000ef34

0800e2e8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e2e8:	b480      	push	{r7}
 800e2ea:	b083      	sub	sp, #12
 800e2ec:	af00      	add	r7, sp, #0
	__asm volatile
 800e2ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e2f2:	f383 8811 	msr	BASEPRI, r3
 800e2f6:	f3bf 8f6f 	isb	sy
 800e2fa:	f3bf 8f4f 	dsb	sy
 800e2fe:	607b      	str	r3, [r7, #4]
}
 800e300:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e302:	4b10      	ldr	r3, [pc, #64]	@ (800e344 <vPortEnterCritical+0x5c>)
 800e304:	681b      	ldr	r3, [r3, #0]
 800e306:	3301      	adds	r3, #1
 800e308:	4a0e      	ldr	r2, [pc, #56]	@ (800e344 <vPortEnterCritical+0x5c>)
 800e30a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e30c:	4b0d      	ldr	r3, [pc, #52]	@ (800e344 <vPortEnterCritical+0x5c>)
 800e30e:	681b      	ldr	r3, [r3, #0]
 800e310:	2b01      	cmp	r3, #1
 800e312:	d110      	bne.n	800e336 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e314:	4b0c      	ldr	r3, [pc, #48]	@ (800e348 <vPortEnterCritical+0x60>)
 800e316:	681b      	ldr	r3, [r3, #0]
 800e318:	b2db      	uxtb	r3, r3
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	d00b      	beq.n	800e336 <vPortEnterCritical+0x4e>
	__asm volatile
 800e31e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e322:	f383 8811 	msr	BASEPRI, r3
 800e326:	f3bf 8f6f 	isb	sy
 800e32a:	f3bf 8f4f 	dsb	sy
 800e32e:	603b      	str	r3, [r7, #0]
}
 800e330:	bf00      	nop
 800e332:	bf00      	nop
 800e334:	e7fd      	b.n	800e332 <vPortEnterCritical+0x4a>
	}
}
 800e336:	bf00      	nop
 800e338:	370c      	adds	r7, #12
 800e33a:	46bd      	mov	sp, r7
 800e33c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e340:	4770      	bx	lr
 800e342:	bf00      	nop
 800e344:	20000030 	.word	0x20000030
 800e348:	e000ed04 	.word	0xe000ed04

0800e34c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e34c:	b480      	push	{r7}
 800e34e:	b083      	sub	sp, #12
 800e350:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e352:	4b12      	ldr	r3, [pc, #72]	@ (800e39c <vPortExitCritical+0x50>)
 800e354:	681b      	ldr	r3, [r3, #0]
 800e356:	2b00      	cmp	r3, #0
 800e358:	d10b      	bne.n	800e372 <vPortExitCritical+0x26>
	__asm volatile
 800e35a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e35e:	f383 8811 	msr	BASEPRI, r3
 800e362:	f3bf 8f6f 	isb	sy
 800e366:	f3bf 8f4f 	dsb	sy
 800e36a:	607b      	str	r3, [r7, #4]
}
 800e36c:	bf00      	nop
 800e36e:	bf00      	nop
 800e370:	e7fd      	b.n	800e36e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800e372:	4b0a      	ldr	r3, [pc, #40]	@ (800e39c <vPortExitCritical+0x50>)
 800e374:	681b      	ldr	r3, [r3, #0]
 800e376:	3b01      	subs	r3, #1
 800e378:	4a08      	ldr	r2, [pc, #32]	@ (800e39c <vPortExitCritical+0x50>)
 800e37a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e37c:	4b07      	ldr	r3, [pc, #28]	@ (800e39c <vPortExitCritical+0x50>)
 800e37e:	681b      	ldr	r3, [r3, #0]
 800e380:	2b00      	cmp	r3, #0
 800e382:	d105      	bne.n	800e390 <vPortExitCritical+0x44>
 800e384:	2300      	movs	r3, #0
 800e386:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e388:	683b      	ldr	r3, [r7, #0]
 800e38a:	f383 8811 	msr	BASEPRI, r3
}
 800e38e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800e390:	bf00      	nop
 800e392:	370c      	adds	r7, #12
 800e394:	46bd      	mov	sp, r7
 800e396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e39a:	4770      	bx	lr
 800e39c:	20000030 	.word	0x20000030

0800e3a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e3a0:	f3ef 8009 	mrs	r0, PSP
 800e3a4:	f3bf 8f6f 	isb	sy
 800e3a8:	4b15      	ldr	r3, [pc, #84]	@ (800e400 <pxCurrentTCBConst>)
 800e3aa:	681a      	ldr	r2, [r3, #0]
 800e3ac:	f01e 0f10 	tst.w	lr, #16
 800e3b0:	bf08      	it	eq
 800e3b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e3b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3ba:	6010      	str	r0, [r2, #0]
 800e3bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e3c0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800e3c4:	f380 8811 	msr	BASEPRI, r0
 800e3c8:	f3bf 8f4f 	dsb	sy
 800e3cc:	f3bf 8f6f 	isb	sy
 800e3d0:	f7fe fe9c 	bl	800d10c <vTaskSwitchContext>
 800e3d4:	f04f 0000 	mov.w	r0, #0
 800e3d8:	f380 8811 	msr	BASEPRI, r0
 800e3dc:	bc09      	pop	{r0, r3}
 800e3de:	6819      	ldr	r1, [r3, #0]
 800e3e0:	6808      	ldr	r0, [r1, #0]
 800e3e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3e6:	f01e 0f10 	tst.w	lr, #16
 800e3ea:	bf08      	it	eq
 800e3ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e3f0:	f380 8809 	msr	PSP, r0
 800e3f4:	f3bf 8f6f 	isb	sy
 800e3f8:	4770      	bx	lr
 800e3fa:	bf00      	nop
 800e3fc:	f3af 8000 	nop.w

0800e400 <pxCurrentTCBConst>:
 800e400:	20000fd8 	.word	0x20000fd8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e404:	bf00      	nop
 800e406:	bf00      	nop

0800e408 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e408:	b580      	push	{r7, lr}
 800e40a:	b082      	sub	sp, #8
 800e40c:	af00      	add	r7, sp, #0
	__asm volatile
 800e40e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e412:	f383 8811 	msr	BASEPRI, r3
 800e416:	f3bf 8f6f 	isb	sy
 800e41a:	f3bf 8f4f 	dsb	sy
 800e41e:	607b      	str	r3, [r7, #4]
}
 800e420:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e422:	f7fe fdb9 	bl	800cf98 <xTaskIncrementTick>
 800e426:	4603      	mov	r3, r0
 800e428:	2b00      	cmp	r3, #0
 800e42a:	d003      	beq.n	800e434 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e42c:	4b06      	ldr	r3, [pc, #24]	@ (800e448 <xPortSysTickHandler+0x40>)
 800e42e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e432:	601a      	str	r2, [r3, #0]
 800e434:	2300      	movs	r3, #0
 800e436:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e438:	683b      	ldr	r3, [r7, #0]
 800e43a:	f383 8811 	msr	BASEPRI, r3
}
 800e43e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800e440:	bf00      	nop
 800e442:	3708      	adds	r7, #8
 800e444:	46bd      	mov	sp, r7
 800e446:	bd80      	pop	{r7, pc}
 800e448:	e000ed04 	.word	0xe000ed04

0800e44c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e44c:	b480      	push	{r7}
 800e44e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e450:	4b0b      	ldr	r3, [pc, #44]	@ (800e480 <vPortSetupTimerInterrupt+0x34>)
 800e452:	2200      	movs	r2, #0
 800e454:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e456:	4b0b      	ldr	r3, [pc, #44]	@ (800e484 <vPortSetupTimerInterrupt+0x38>)
 800e458:	2200      	movs	r2, #0
 800e45a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e45c:	4b0a      	ldr	r3, [pc, #40]	@ (800e488 <vPortSetupTimerInterrupt+0x3c>)
 800e45e:	681b      	ldr	r3, [r3, #0]
 800e460:	4a0a      	ldr	r2, [pc, #40]	@ (800e48c <vPortSetupTimerInterrupt+0x40>)
 800e462:	fba2 2303 	umull	r2, r3, r2, r3
 800e466:	099b      	lsrs	r3, r3, #6
 800e468:	4a09      	ldr	r2, [pc, #36]	@ (800e490 <vPortSetupTimerInterrupt+0x44>)
 800e46a:	3b01      	subs	r3, #1
 800e46c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e46e:	4b04      	ldr	r3, [pc, #16]	@ (800e480 <vPortSetupTimerInterrupt+0x34>)
 800e470:	2207      	movs	r2, #7
 800e472:	601a      	str	r2, [r3, #0]
}
 800e474:	bf00      	nop
 800e476:	46bd      	mov	sp, r7
 800e478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e47c:	4770      	bx	lr
 800e47e:	bf00      	nop
 800e480:	e000e010 	.word	0xe000e010
 800e484:	e000e018 	.word	0xe000e018
 800e488:	2000000c 	.word	0x2000000c
 800e48c:	10624dd3 	.word	0x10624dd3
 800e490:	e000e014 	.word	0xe000e014

0800e494 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e494:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800e4a4 <vPortEnableVFP+0x10>
 800e498:	6801      	ldr	r1, [r0, #0]
 800e49a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800e49e:	6001      	str	r1, [r0, #0]
 800e4a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e4a2:	bf00      	nop
 800e4a4:	e000ed88 	.word	0xe000ed88

0800e4a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800e4a8:	b480      	push	{r7}
 800e4aa:	b085      	sub	sp, #20
 800e4ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e4ae:	f3ef 8305 	mrs	r3, IPSR
 800e4b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e4b4:	68fb      	ldr	r3, [r7, #12]
 800e4b6:	2b0f      	cmp	r3, #15
 800e4b8:	d915      	bls.n	800e4e6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e4ba:	4a18      	ldr	r2, [pc, #96]	@ (800e51c <vPortValidateInterruptPriority+0x74>)
 800e4bc:	68fb      	ldr	r3, [r7, #12]
 800e4be:	4413      	add	r3, r2
 800e4c0:	781b      	ldrb	r3, [r3, #0]
 800e4c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e4c4:	4b16      	ldr	r3, [pc, #88]	@ (800e520 <vPortValidateInterruptPriority+0x78>)
 800e4c6:	781b      	ldrb	r3, [r3, #0]
 800e4c8:	7afa      	ldrb	r2, [r7, #11]
 800e4ca:	429a      	cmp	r2, r3
 800e4cc:	d20b      	bcs.n	800e4e6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800e4ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e4d2:	f383 8811 	msr	BASEPRI, r3
 800e4d6:	f3bf 8f6f 	isb	sy
 800e4da:	f3bf 8f4f 	dsb	sy
 800e4de:	607b      	str	r3, [r7, #4]
}
 800e4e0:	bf00      	nop
 800e4e2:	bf00      	nop
 800e4e4:	e7fd      	b.n	800e4e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e4e6:	4b0f      	ldr	r3, [pc, #60]	@ (800e524 <vPortValidateInterruptPriority+0x7c>)
 800e4e8:	681b      	ldr	r3, [r3, #0]
 800e4ea:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800e4ee:	4b0e      	ldr	r3, [pc, #56]	@ (800e528 <vPortValidateInterruptPriority+0x80>)
 800e4f0:	681b      	ldr	r3, [r3, #0]
 800e4f2:	429a      	cmp	r2, r3
 800e4f4:	d90b      	bls.n	800e50e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800e4f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e4fa:	f383 8811 	msr	BASEPRI, r3
 800e4fe:	f3bf 8f6f 	isb	sy
 800e502:	f3bf 8f4f 	dsb	sy
 800e506:	603b      	str	r3, [r7, #0]
}
 800e508:	bf00      	nop
 800e50a:	bf00      	nop
 800e50c:	e7fd      	b.n	800e50a <vPortValidateInterruptPriority+0x62>
	}
 800e50e:	bf00      	nop
 800e510:	3714      	adds	r7, #20
 800e512:	46bd      	mov	sp, r7
 800e514:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e518:	4770      	bx	lr
 800e51a:	bf00      	nop
 800e51c:	e000e3f0 	.word	0xe000e3f0
 800e520:	20001604 	.word	0x20001604
 800e524:	e000ed0c 	.word	0xe000ed0c
 800e528:	20001608 	.word	0x20001608

0800e52c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e52c:	b580      	push	{r7, lr}
 800e52e:	b08a      	sub	sp, #40	@ 0x28
 800e530:	af00      	add	r7, sp, #0
 800e532:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e534:	2300      	movs	r3, #0
 800e536:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e538:	f7fe fc72 	bl	800ce20 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e53c:	4b5c      	ldr	r3, [pc, #368]	@ (800e6b0 <pvPortMalloc+0x184>)
 800e53e:	681b      	ldr	r3, [r3, #0]
 800e540:	2b00      	cmp	r3, #0
 800e542:	d101      	bne.n	800e548 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e544:	f000 f924 	bl	800e790 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e548:	4b5a      	ldr	r3, [pc, #360]	@ (800e6b4 <pvPortMalloc+0x188>)
 800e54a:	681a      	ldr	r2, [r3, #0]
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	4013      	ands	r3, r2
 800e550:	2b00      	cmp	r3, #0
 800e552:	f040 8095 	bne.w	800e680 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	2b00      	cmp	r3, #0
 800e55a:	d01e      	beq.n	800e59a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800e55c:	2208      	movs	r2, #8
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	4413      	add	r3, r2
 800e562:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	f003 0307 	and.w	r3, r3, #7
 800e56a:	2b00      	cmp	r3, #0
 800e56c:	d015      	beq.n	800e59a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	f023 0307 	bic.w	r3, r3, #7
 800e574:	3308      	adds	r3, #8
 800e576:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	f003 0307 	and.w	r3, r3, #7
 800e57e:	2b00      	cmp	r3, #0
 800e580:	d00b      	beq.n	800e59a <pvPortMalloc+0x6e>
	__asm volatile
 800e582:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e586:	f383 8811 	msr	BASEPRI, r3
 800e58a:	f3bf 8f6f 	isb	sy
 800e58e:	f3bf 8f4f 	dsb	sy
 800e592:	617b      	str	r3, [r7, #20]
}
 800e594:	bf00      	nop
 800e596:	bf00      	nop
 800e598:	e7fd      	b.n	800e596 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	2b00      	cmp	r3, #0
 800e59e:	d06f      	beq.n	800e680 <pvPortMalloc+0x154>
 800e5a0:	4b45      	ldr	r3, [pc, #276]	@ (800e6b8 <pvPortMalloc+0x18c>)
 800e5a2:	681b      	ldr	r3, [r3, #0]
 800e5a4:	687a      	ldr	r2, [r7, #4]
 800e5a6:	429a      	cmp	r2, r3
 800e5a8:	d86a      	bhi.n	800e680 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e5aa:	4b44      	ldr	r3, [pc, #272]	@ (800e6bc <pvPortMalloc+0x190>)
 800e5ac:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e5ae:	4b43      	ldr	r3, [pc, #268]	@ (800e6bc <pvPortMalloc+0x190>)
 800e5b0:	681b      	ldr	r3, [r3, #0]
 800e5b2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e5b4:	e004      	b.n	800e5c0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800e5b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e5b8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e5ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e5bc:	681b      	ldr	r3, [r3, #0]
 800e5be:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e5c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e5c2:	685b      	ldr	r3, [r3, #4]
 800e5c4:	687a      	ldr	r2, [r7, #4]
 800e5c6:	429a      	cmp	r2, r3
 800e5c8:	d903      	bls.n	800e5d2 <pvPortMalloc+0xa6>
 800e5ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e5cc:	681b      	ldr	r3, [r3, #0]
 800e5ce:	2b00      	cmp	r3, #0
 800e5d0:	d1f1      	bne.n	800e5b6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e5d2:	4b37      	ldr	r3, [pc, #220]	@ (800e6b0 <pvPortMalloc+0x184>)
 800e5d4:	681b      	ldr	r3, [r3, #0]
 800e5d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e5d8:	429a      	cmp	r2, r3
 800e5da:	d051      	beq.n	800e680 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e5dc:	6a3b      	ldr	r3, [r7, #32]
 800e5de:	681b      	ldr	r3, [r3, #0]
 800e5e0:	2208      	movs	r2, #8
 800e5e2:	4413      	add	r3, r2
 800e5e4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e5e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e5e8:	681a      	ldr	r2, [r3, #0]
 800e5ea:	6a3b      	ldr	r3, [r7, #32]
 800e5ec:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e5ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e5f0:	685a      	ldr	r2, [r3, #4]
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	1ad2      	subs	r2, r2, r3
 800e5f6:	2308      	movs	r3, #8
 800e5f8:	005b      	lsls	r3, r3, #1
 800e5fa:	429a      	cmp	r2, r3
 800e5fc:	d920      	bls.n	800e640 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e5fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	4413      	add	r3, r2
 800e604:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e606:	69bb      	ldr	r3, [r7, #24]
 800e608:	f003 0307 	and.w	r3, r3, #7
 800e60c:	2b00      	cmp	r3, #0
 800e60e:	d00b      	beq.n	800e628 <pvPortMalloc+0xfc>
	__asm volatile
 800e610:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e614:	f383 8811 	msr	BASEPRI, r3
 800e618:	f3bf 8f6f 	isb	sy
 800e61c:	f3bf 8f4f 	dsb	sy
 800e620:	613b      	str	r3, [r7, #16]
}
 800e622:	bf00      	nop
 800e624:	bf00      	nop
 800e626:	e7fd      	b.n	800e624 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e62a:	685a      	ldr	r2, [r3, #4]
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	1ad2      	subs	r2, r2, r3
 800e630:	69bb      	ldr	r3, [r7, #24]
 800e632:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e636:	687a      	ldr	r2, [r7, #4]
 800e638:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e63a:	69b8      	ldr	r0, [r7, #24]
 800e63c:	f000 f90a 	bl	800e854 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e640:	4b1d      	ldr	r3, [pc, #116]	@ (800e6b8 <pvPortMalloc+0x18c>)
 800e642:	681a      	ldr	r2, [r3, #0]
 800e644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e646:	685b      	ldr	r3, [r3, #4]
 800e648:	1ad3      	subs	r3, r2, r3
 800e64a:	4a1b      	ldr	r2, [pc, #108]	@ (800e6b8 <pvPortMalloc+0x18c>)
 800e64c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e64e:	4b1a      	ldr	r3, [pc, #104]	@ (800e6b8 <pvPortMalloc+0x18c>)
 800e650:	681a      	ldr	r2, [r3, #0]
 800e652:	4b1b      	ldr	r3, [pc, #108]	@ (800e6c0 <pvPortMalloc+0x194>)
 800e654:	681b      	ldr	r3, [r3, #0]
 800e656:	429a      	cmp	r2, r3
 800e658:	d203      	bcs.n	800e662 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e65a:	4b17      	ldr	r3, [pc, #92]	@ (800e6b8 <pvPortMalloc+0x18c>)
 800e65c:	681b      	ldr	r3, [r3, #0]
 800e65e:	4a18      	ldr	r2, [pc, #96]	@ (800e6c0 <pvPortMalloc+0x194>)
 800e660:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e664:	685a      	ldr	r2, [r3, #4]
 800e666:	4b13      	ldr	r3, [pc, #76]	@ (800e6b4 <pvPortMalloc+0x188>)
 800e668:	681b      	ldr	r3, [r3, #0]
 800e66a:	431a      	orrs	r2, r3
 800e66c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e66e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e670:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e672:	2200      	movs	r2, #0
 800e674:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800e676:	4b13      	ldr	r3, [pc, #76]	@ (800e6c4 <pvPortMalloc+0x198>)
 800e678:	681b      	ldr	r3, [r3, #0]
 800e67a:	3301      	adds	r3, #1
 800e67c:	4a11      	ldr	r2, [pc, #68]	@ (800e6c4 <pvPortMalloc+0x198>)
 800e67e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e680:	f7fe fbdc 	bl	800ce3c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e684:	69fb      	ldr	r3, [r7, #28]
 800e686:	f003 0307 	and.w	r3, r3, #7
 800e68a:	2b00      	cmp	r3, #0
 800e68c:	d00b      	beq.n	800e6a6 <pvPortMalloc+0x17a>
	__asm volatile
 800e68e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e692:	f383 8811 	msr	BASEPRI, r3
 800e696:	f3bf 8f6f 	isb	sy
 800e69a:	f3bf 8f4f 	dsb	sy
 800e69e:	60fb      	str	r3, [r7, #12]
}
 800e6a0:	bf00      	nop
 800e6a2:	bf00      	nop
 800e6a4:	e7fd      	b.n	800e6a2 <pvPortMalloc+0x176>
	return pvReturn;
 800e6a6:	69fb      	ldr	r3, [r7, #28]
}
 800e6a8:	4618      	mov	r0, r3
 800e6aa:	3728      	adds	r7, #40	@ 0x28
 800e6ac:	46bd      	mov	sp, r7
 800e6ae:	bd80      	pop	{r7, pc}
 800e6b0:	20003d24 	.word	0x20003d24
 800e6b4:	20003d38 	.word	0x20003d38
 800e6b8:	20003d28 	.word	0x20003d28
 800e6bc:	20003d1c 	.word	0x20003d1c
 800e6c0:	20003d2c 	.word	0x20003d2c
 800e6c4:	20003d30 	.word	0x20003d30

0800e6c8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e6c8:	b580      	push	{r7, lr}
 800e6ca:	b086      	sub	sp, #24
 800e6cc:	af00      	add	r7, sp, #0
 800e6ce:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	2b00      	cmp	r3, #0
 800e6d8:	d04f      	beq.n	800e77a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e6da:	2308      	movs	r3, #8
 800e6dc:	425b      	negs	r3, r3
 800e6de:	697a      	ldr	r2, [r7, #20]
 800e6e0:	4413      	add	r3, r2
 800e6e2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e6e4:	697b      	ldr	r3, [r7, #20]
 800e6e6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e6e8:	693b      	ldr	r3, [r7, #16]
 800e6ea:	685a      	ldr	r2, [r3, #4]
 800e6ec:	4b25      	ldr	r3, [pc, #148]	@ (800e784 <vPortFree+0xbc>)
 800e6ee:	681b      	ldr	r3, [r3, #0]
 800e6f0:	4013      	ands	r3, r2
 800e6f2:	2b00      	cmp	r3, #0
 800e6f4:	d10b      	bne.n	800e70e <vPortFree+0x46>
	__asm volatile
 800e6f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e6fa:	f383 8811 	msr	BASEPRI, r3
 800e6fe:	f3bf 8f6f 	isb	sy
 800e702:	f3bf 8f4f 	dsb	sy
 800e706:	60fb      	str	r3, [r7, #12]
}
 800e708:	bf00      	nop
 800e70a:	bf00      	nop
 800e70c:	e7fd      	b.n	800e70a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e70e:	693b      	ldr	r3, [r7, #16]
 800e710:	681b      	ldr	r3, [r3, #0]
 800e712:	2b00      	cmp	r3, #0
 800e714:	d00b      	beq.n	800e72e <vPortFree+0x66>
	__asm volatile
 800e716:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e71a:	f383 8811 	msr	BASEPRI, r3
 800e71e:	f3bf 8f6f 	isb	sy
 800e722:	f3bf 8f4f 	dsb	sy
 800e726:	60bb      	str	r3, [r7, #8]
}
 800e728:	bf00      	nop
 800e72a:	bf00      	nop
 800e72c:	e7fd      	b.n	800e72a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e72e:	693b      	ldr	r3, [r7, #16]
 800e730:	685a      	ldr	r2, [r3, #4]
 800e732:	4b14      	ldr	r3, [pc, #80]	@ (800e784 <vPortFree+0xbc>)
 800e734:	681b      	ldr	r3, [r3, #0]
 800e736:	4013      	ands	r3, r2
 800e738:	2b00      	cmp	r3, #0
 800e73a:	d01e      	beq.n	800e77a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e73c:	693b      	ldr	r3, [r7, #16]
 800e73e:	681b      	ldr	r3, [r3, #0]
 800e740:	2b00      	cmp	r3, #0
 800e742:	d11a      	bne.n	800e77a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e744:	693b      	ldr	r3, [r7, #16]
 800e746:	685a      	ldr	r2, [r3, #4]
 800e748:	4b0e      	ldr	r3, [pc, #56]	@ (800e784 <vPortFree+0xbc>)
 800e74a:	681b      	ldr	r3, [r3, #0]
 800e74c:	43db      	mvns	r3, r3
 800e74e:	401a      	ands	r2, r3
 800e750:	693b      	ldr	r3, [r7, #16]
 800e752:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e754:	f7fe fb64 	bl	800ce20 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e758:	693b      	ldr	r3, [r7, #16]
 800e75a:	685a      	ldr	r2, [r3, #4]
 800e75c:	4b0a      	ldr	r3, [pc, #40]	@ (800e788 <vPortFree+0xc0>)
 800e75e:	681b      	ldr	r3, [r3, #0]
 800e760:	4413      	add	r3, r2
 800e762:	4a09      	ldr	r2, [pc, #36]	@ (800e788 <vPortFree+0xc0>)
 800e764:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e766:	6938      	ldr	r0, [r7, #16]
 800e768:	f000 f874 	bl	800e854 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800e76c:	4b07      	ldr	r3, [pc, #28]	@ (800e78c <vPortFree+0xc4>)
 800e76e:	681b      	ldr	r3, [r3, #0]
 800e770:	3301      	adds	r3, #1
 800e772:	4a06      	ldr	r2, [pc, #24]	@ (800e78c <vPortFree+0xc4>)
 800e774:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800e776:	f7fe fb61 	bl	800ce3c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e77a:	bf00      	nop
 800e77c:	3718      	adds	r7, #24
 800e77e:	46bd      	mov	sp, r7
 800e780:	bd80      	pop	{r7, pc}
 800e782:	bf00      	nop
 800e784:	20003d38 	.word	0x20003d38
 800e788:	20003d28 	.word	0x20003d28
 800e78c:	20003d34 	.word	0x20003d34

0800e790 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e790:	b480      	push	{r7}
 800e792:	b085      	sub	sp, #20
 800e794:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e796:	f242 7310 	movw	r3, #10000	@ 0x2710
 800e79a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e79c:	4b27      	ldr	r3, [pc, #156]	@ (800e83c <prvHeapInit+0xac>)
 800e79e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e7a0:	68fb      	ldr	r3, [r7, #12]
 800e7a2:	f003 0307 	and.w	r3, r3, #7
 800e7a6:	2b00      	cmp	r3, #0
 800e7a8:	d00c      	beq.n	800e7c4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e7aa:	68fb      	ldr	r3, [r7, #12]
 800e7ac:	3307      	adds	r3, #7
 800e7ae:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e7b0:	68fb      	ldr	r3, [r7, #12]
 800e7b2:	f023 0307 	bic.w	r3, r3, #7
 800e7b6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e7b8:	68ba      	ldr	r2, [r7, #8]
 800e7ba:	68fb      	ldr	r3, [r7, #12]
 800e7bc:	1ad3      	subs	r3, r2, r3
 800e7be:	4a1f      	ldr	r2, [pc, #124]	@ (800e83c <prvHeapInit+0xac>)
 800e7c0:	4413      	add	r3, r2
 800e7c2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e7c4:	68fb      	ldr	r3, [r7, #12]
 800e7c6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e7c8:	4a1d      	ldr	r2, [pc, #116]	@ (800e840 <prvHeapInit+0xb0>)
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e7ce:	4b1c      	ldr	r3, [pc, #112]	@ (800e840 <prvHeapInit+0xb0>)
 800e7d0:	2200      	movs	r2, #0
 800e7d2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	68ba      	ldr	r2, [r7, #8]
 800e7d8:	4413      	add	r3, r2
 800e7da:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e7dc:	2208      	movs	r2, #8
 800e7de:	68fb      	ldr	r3, [r7, #12]
 800e7e0:	1a9b      	subs	r3, r3, r2
 800e7e2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e7e4:	68fb      	ldr	r3, [r7, #12]
 800e7e6:	f023 0307 	bic.w	r3, r3, #7
 800e7ea:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e7ec:	68fb      	ldr	r3, [r7, #12]
 800e7ee:	4a15      	ldr	r2, [pc, #84]	@ (800e844 <prvHeapInit+0xb4>)
 800e7f0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e7f2:	4b14      	ldr	r3, [pc, #80]	@ (800e844 <prvHeapInit+0xb4>)
 800e7f4:	681b      	ldr	r3, [r3, #0]
 800e7f6:	2200      	movs	r2, #0
 800e7f8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e7fa:	4b12      	ldr	r3, [pc, #72]	@ (800e844 <prvHeapInit+0xb4>)
 800e7fc:	681b      	ldr	r3, [r3, #0]
 800e7fe:	2200      	movs	r2, #0
 800e800:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e806:	683b      	ldr	r3, [r7, #0]
 800e808:	68fa      	ldr	r2, [r7, #12]
 800e80a:	1ad2      	subs	r2, r2, r3
 800e80c:	683b      	ldr	r3, [r7, #0]
 800e80e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e810:	4b0c      	ldr	r3, [pc, #48]	@ (800e844 <prvHeapInit+0xb4>)
 800e812:	681a      	ldr	r2, [r3, #0]
 800e814:	683b      	ldr	r3, [r7, #0]
 800e816:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e818:	683b      	ldr	r3, [r7, #0]
 800e81a:	685b      	ldr	r3, [r3, #4]
 800e81c:	4a0a      	ldr	r2, [pc, #40]	@ (800e848 <prvHeapInit+0xb8>)
 800e81e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e820:	683b      	ldr	r3, [r7, #0]
 800e822:	685b      	ldr	r3, [r3, #4]
 800e824:	4a09      	ldr	r2, [pc, #36]	@ (800e84c <prvHeapInit+0xbc>)
 800e826:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e828:	4b09      	ldr	r3, [pc, #36]	@ (800e850 <prvHeapInit+0xc0>)
 800e82a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800e82e:	601a      	str	r2, [r3, #0]
}
 800e830:	bf00      	nop
 800e832:	3714      	adds	r7, #20
 800e834:	46bd      	mov	sp, r7
 800e836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e83a:	4770      	bx	lr
 800e83c:	2000160c 	.word	0x2000160c
 800e840:	20003d1c 	.word	0x20003d1c
 800e844:	20003d24 	.word	0x20003d24
 800e848:	20003d2c 	.word	0x20003d2c
 800e84c:	20003d28 	.word	0x20003d28
 800e850:	20003d38 	.word	0x20003d38

0800e854 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e854:	b480      	push	{r7}
 800e856:	b085      	sub	sp, #20
 800e858:	af00      	add	r7, sp, #0
 800e85a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e85c:	4b28      	ldr	r3, [pc, #160]	@ (800e900 <prvInsertBlockIntoFreeList+0xac>)
 800e85e:	60fb      	str	r3, [r7, #12]
 800e860:	e002      	b.n	800e868 <prvInsertBlockIntoFreeList+0x14>
 800e862:	68fb      	ldr	r3, [r7, #12]
 800e864:	681b      	ldr	r3, [r3, #0]
 800e866:	60fb      	str	r3, [r7, #12]
 800e868:	68fb      	ldr	r3, [r7, #12]
 800e86a:	681b      	ldr	r3, [r3, #0]
 800e86c:	687a      	ldr	r2, [r7, #4]
 800e86e:	429a      	cmp	r2, r3
 800e870:	d8f7      	bhi.n	800e862 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e872:	68fb      	ldr	r3, [r7, #12]
 800e874:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e876:	68fb      	ldr	r3, [r7, #12]
 800e878:	685b      	ldr	r3, [r3, #4]
 800e87a:	68ba      	ldr	r2, [r7, #8]
 800e87c:	4413      	add	r3, r2
 800e87e:	687a      	ldr	r2, [r7, #4]
 800e880:	429a      	cmp	r2, r3
 800e882:	d108      	bne.n	800e896 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e884:	68fb      	ldr	r3, [r7, #12]
 800e886:	685a      	ldr	r2, [r3, #4]
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	685b      	ldr	r3, [r3, #4]
 800e88c:	441a      	add	r2, r3
 800e88e:	68fb      	ldr	r3, [r7, #12]
 800e890:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e892:	68fb      	ldr	r3, [r7, #12]
 800e894:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	685b      	ldr	r3, [r3, #4]
 800e89e:	68ba      	ldr	r2, [r7, #8]
 800e8a0:	441a      	add	r2, r3
 800e8a2:	68fb      	ldr	r3, [r7, #12]
 800e8a4:	681b      	ldr	r3, [r3, #0]
 800e8a6:	429a      	cmp	r2, r3
 800e8a8:	d118      	bne.n	800e8dc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e8aa:	68fb      	ldr	r3, [r7, #12]
 800e8ac:	681a      	ldr	r2, [r3, #0]
 800e8ae:	4b15      	ldr	r3, [pc, #84]	@ (800e904 <prvInsertBlockIntoFreeList+0xb0>)
 800e8b0:	681b      	ldr	r3, [r3, #0]
 800e8b2:	429a      	cmp	r2, r3
 800e8b4:	d00d      	beq.n	800e8d2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	685a      	ldr	r2, [r3, #4]
 800e8ba:	68fb      	ldr	r3, [r7, #12]
 800e8bc:	681b      	ldr	r3, [r3, #0]
 800e8be:	685b      	ldr	r3, [r3, #4]
 800e8c0:	441a      	add	r2, r3
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e8c6:	68fb      	ldr	r3, [r7, #12]
 800e8c8:	681b      	ldr	r3, [r3, #0]
 800e8ca:	681a      	ldr	r2, [r3, #0]
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	601a      	str	r2, [r3, #0]
 800e8d0:	e008      	b.n	800e8e4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e8d2:	4b0c      	ldr	r3, [pc, #48]	@ (800e904 <prvInsertBlockIntoFreeList+0xb0>)
 800e8d4:	681a      	ldr	r2, [r3, #0]
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	601a      	str	r2, [r3, #0]
 800e8da:	e003      	b.n	800e8e4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e8dc:	68fb      	ldr	r3, [r7, #12]
 800e8de:	681a      	ldr	r2, [r3, #0]
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e8e4:	68fa      	ldr	r2, [r7, #12]
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	429a      	cmp	r2, r3
 800e8ea:	d002      	beq.n	800e8f2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e8ec:	68fb      	ldr	r3, [r7, #12]
 800e8ee:	687a      	ldr	r2, [r7, #4]
 800e8f0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e8f2:	bf00      	nop
 800e8f4:	3714      	adds	r7, #20
 800e8f6:	46bd      	mov	sp, r7
 800e8f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8fc:	4770      	bx	lr
 800e8fe:	bf00      	nop
 800e900:	20003d1c 	.word	0x20003d1c
 800e904:	20003d24 	.word	0x20003d24

0800e908 <atof>:
 800e908:	2100      	movs	r1, #0
 800e90a:	f000 be09 	b.w	800f520 <strtod>

0800e90e <atoi>:
 800e90e:	220a      	movs	r2, #10
 800e910:	2100      	movs	r1, #0
 800e912:	f000 be8b 	b.w	800f62c <strtol>

0800e916 <sulp>:
 800e916:	b570      	push	{r4, r5, r6, lr}
 800e918:	4604      	mov	r4, r0
 800e91a:	460d      	mov	r5, r1
 800e91c:	ec45 4b10 	vmov	d0, r4, r5
 800e920:	4616      	mov	r6, r2
 800e922:	f002 f8b1 	bl	8010a88 <__ulp>
 800e926:	ec51 0b10 	vmov	r0, r1, d0
 800e92a:	b17e      	cbz	r6, 800e94c <sulp+0x36>
 800e92c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800e930:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800e934:	2b00      	cmp	r3, #0
 800e936:	dd09      	ble.n	800e94c <sulp+0x36>
 800e938:	051b      	lsls	r3, r3, #20
 800e93a:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800e93e:	2400      	movs	r4, #0
 800e940:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800e944:	4622      	mov	r2, r4
 800e946:	462b      	mov	r3, r5
 800e948:	f7f1 fe66 	bl	8000618 <__aeabi_dmul>
 800e94c:	ec41 0b10 	vmov	d0, r0, r1
 800e950:	bd70      	pop	{r4, r5, r6, pc}
 800e952:	0000      	movs	r0, r0
 800e954:	0000      	movs	r0, r0
	...

0800e958 <_strtod_l>:
 800e958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e95c:	b09f      	sub	sp, #124	@ 0x7c
 800e95e:	460c      	mov	r4, r1
 800e960:	9217      	str	r2, [sp, #92]	@ 0x5c
 800e962:	2200      	movs	r2, #0
 800e964:	921a      	str	r2, [sp, #104]	@ 0x68
 800e966:	9005      	str	r0, [sp, #20]
 800e968:	f04f 0a00 	mov.w	sl, #0
 800e96c:	f04f 0b00 	mov.w	fp, #0
 800e970:	460a      	mov	r2, r1
 800e972:	9219      	str	r2, [sp, #100]	@ 0x64
 800e974:	7811      	ldrb	r1, [r2, #0]
 800e976:	292b      	cmp	r1, #43	@ 0x2b
 800e978:	d04a      	beq.n	800ea10 <_strtod_l+0xb8>
 800e97a:	d838      	bhi.n	800e9ee <_strtod_l+0x96>
 800e97c:	290d      	cmp	r1, #13
 800e97e:	d832      	bhi.n	800e9e6 <_strtod_l+0x8e>
 800e980:	2908      	cmp	r1, #8
 800e982:	d832      	bhi.n	800e9ea <_strtod_l+0x92>
 800e984:	2900      	cmp	r1, #0
 800e986:	d03b      	beq.n	800ea00 <_strtod_l+0xa8>
 800e988:	2200      	movs	r2, #0
 800e98a:	920e      	str	r2, [sp, #56]	@ 0x38
 800e98c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800e98e:	782a      	ldrb	r2, [r5, #0]
 800e990:	2a30      	cmp	r2, #48	@ 0x30
 800e992:	f040 80b2 	bne.w	800eafa <_strtod_l+0x1a2>
 800e996:	786a      	ldrb	r2, [r5, #1]
 800e998:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800e99c:	2a58      	cmp	r2, #88	@ 0x58
 800e99e:	d16e      	bne.n	800ea7e <_strtod_l+0x126>
 800e9a0:	9302      	str	r3, [sp, #8]
 800e9a2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e9a4:	9301      	str	r3, [sp, #4]
 800e9a6:	ab1a      	add	r3, sp, #104	@ 0x68
 800e9a8:	9300      	str	r3, [sp, #0]
 800e9aa:	4a8f      	ldr	r2, [pc, #572]	@ (800ebe8 <_strtod_l+0x290>)
 800e9ac:	9805      	ldr	r0, [sp, #20]
 800e9ae:	ab1b      	add	r3, sp, #108	@ 0x6c
 800e9b0:	a919      	add	r1, sp, #100	@ 0x64
 800e9b2:	f001 f96b 	bl	800fc8c <__gethex>
 800e9b6:	f010 060f 	ands.w	r6, r0, #15
 800e9ba:	4604      	mov	r4, r0
 800e9bc:	d005      	beq.n	800e9ca <_strtod_l+0x72>
 800e9be:	2e06      	cmp	r6, #6
 800e9c0:	d128      	bne.n	800ea14 <_strtod_l+0xbc>
 800e9c2:	3501      	adds	r5, #1
 800e9c4:	2300      	movs	r3, #0
 800e9c6:	9519      	str	r5, [sp, #100]	@ 0x64
 800e9c8:	930e      	str	r3, [sp, #56]	@ 0x38
 800e9ca:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800e9cc:	2b00      	cmp	r3, #0
 800e9ce:	f040 858e 	bne.w	800f4ee <_strtod_l+0xb96>
 800e9d2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e9d4:	b1cb      	cbz	r3, 800ea0a <_strtod_l+0xb2>
 800e9d6:	4652      	mov	r2, sl
 800e9d8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800e9dc:	ec43 2b10 	vmov	d0, r2, r3
 800e9e0:	b01f      	add	sp, #124	@ 0x7c
 800e9e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e9e6:	2920      	cmp	r1, #32
 800e9e8:	d1ce      	bne.n	800e988 <_strtod_l+0x30>
 800e9ea:	3201      	adds	r2, #1
 800e9ec:	e7c1      	b.n	800e972 <_strtod_l+0x1a>
 800e9ee:	292d      	cmp	r1, #45	@ 0x2d
 800e9f0:	d1ca      	bne.n	800e988 <_strtod_l+0x30>
 800e9f2:	2101      	movs	r1, #1
 800e9f4:	910e      	str	r1, [sp, #56]	@ 0x38
 800e9f6:	1c51      	adds	r1, r2, #1
 800e9f8:	9119      	str	r1, [sp, #100]	@ 0x64
 800e9fa:	7852      	ldrb	r2, [r2, #1]
 800e9fc:	2a00      	cmp	r2, #0
 800e9fe:	d1c5      	bne.n	800e98c <_strtod_l+0x34>
 800ea00:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800ea02:	9419      	str	r4, [sp, #100]	@ 0x64
 800ea04:	2b00      	cmp	r3, #0
 800ea06:	f040 8570 	bne.w	800f4ea <_strtod_l+0xb92>
 800ea0a:	4652      	mov	r2, sl
 800ea0c:	465b      	mov	r3, fp
 800ea0e:	e7e5      	b.n	800e9dc <_strtod_l+0x84>
 800ea10:	2100      	movs	r1, #0
 800ea12:	e7ef      	b.n	800e9f4 <_strtod_l+0x9c>
 800ea14:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800ea16:	b13a      	cbz	r2, 800ea28 <_strtod_l+0xd0>
 800ea18:	2135      	movs	r1, #53	@ 0x35
 800ea1a:	a81c      	add	r0, sp, #112	@ 0x70
 800ea1c:	f002 f92e 	bl	8010c7c <__copybits>
 800ea20:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ea22:	9805      	ldr	r0, [sp, #20]
 800ea24:	f001 fd04 	bl	8010430 <_Bfree>
 800ea28:	3e01      	subs	r6, #1
 800ea2a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800ea2c:	2e04      	cmp	r6, #4
 800ea2e:	d806      	bhi.n	800ea3e <_strtod_l+0xe6>
 800ea30:	e8df f006 	tbb	[pc, r6]
 800ea34:	201d0314 	.word	0x201d0314
 800ea38:	14          	.byte	0x14
 800ea39:	00          	.byte	0x00
 800ea3a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800ea3e:	05e1      	lsls	r1, r4, #23
 800ea40:	bf48      	it	mi
 800ea42:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800ea46:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ea4a:	0d1b      	lsrs	r3, r3, #20
 800ea4c:	051b      	lsls	r3, r3, #20
 800ea4e:	2b00      	cmp	r3, #0
 800ea50:	d1bb      	bne.n	800e9ca <_strtod_l+0x72>
 800ea52:	f001 f81b 	bl	800fa8c <__errno>
 800ea56:	2322      	movs	r3, #34	@ 0x22
 800ea58:	6003      	str	r3, [r0, #0]
 800ea5a:	e7b6      	b.n	800e9ca <_strtod_l+0x72>
 800ea5c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800ea60:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800ea64:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800ea68:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800ea6c:	e7e7      	b.n	800ea3e <_strtod_l+0xe6>
 800ea6e:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800ebf0 <_strtod_l+0x298>
 800ea72:	e7e4      	b.n	800ea3e <_strtod_l+0xe6>
 800ea74:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800ea78:	f04f 3aff 	mov.w	sl, #4294967295
 800ea7c:	e7df      	b.n	800ea3e <_strtod_l+0xe6>
 800ea7e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ea80:	1c5a      	adds	r2, r3, #1
 800ea82:	9219      	str	r2, [sp, #100]	@ 0x64
 800ea84:	785b      	ldrb	r3, [r3, #1]
 800ea86:	2b30      	cmp	r3, #48	@ 0x30
 800ea88:	d0f9      	beq.n	800ea7e <_strtod_l+0x126>
 800ea8a:	2b00      	cmp	r3, #0
 800ea8c:	d09d      	beq.n	800e9ca <_strtod_l+0x72>
 800ea8e:	2301      	movs	r3, #1
 800ea90:	2700      	movs	r7, #0
 800ea92:	9308      	str	r3, [sp, #32]
 800ea94:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ea96:	930c      	str	r3, [sp, #48]	@ 0x30
 800ea98:	970b      	str	r7, [sp, #44]	@ 0x2c
 800ea9a:	46b9      	mov	r9, r7
 800ea9c:	220a      	movs	r2, #10
 800ea9e:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800eaa0:	7805      	ldrb	r5, [r0, #0]
 800eaa2:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800eaa6:	b2d9      	uxtb	r1, r3
 800eaa8:	2909      	cmp	r1, #9
 800eaaa:	d928      	bls.n	800eafe <_strtod_l+0x1a6>
 800eaac:	494f      	ldr	r1, [pc, #316]	@ (800ebec <_strtod_l+0x294>)
 800eaae:	2201      	movs	r2, #1
 800eab0:	f000 ff22 	bl	800f8f8 <strncmp>
 800eab4:	2800      	cmp	r0, #0
 800eab6:	d032      	beq.n	800eb1e <_strtod_l+0x1c6>
 800eab8:	2000      	movs	r0, #0
 800eaba:	462a      	mov	r2, r5
 800eabc:	900a      	str	r0, [sp, #40]	@ 0x28
 800eabe:	464d      	mov	r5, r9
 800eac0:	4603      	mov	r3, r0
 800eac2:	2a65      	cmp	r2, #101	@ 0x65
 800eac4:	d001      	beq.n	800eaca <_strtod_l+0x172>
 800eac6:	2a45      	cmp	r2, #69	@ 0x45
 800eac8:	d114      	bne.n	800eaf4 <_strtod_l+0x19c>
 800eaca:	b91d      	cbnz	r5, 800ead4 <_strtod_l+0x17c>
 800eacc:	9a08      	ldr	r2, [sp, #32]
 800eace:	4302      	orrs	r2, r0
 800ead0:	d096      	beq.n	800ea00 <_strtod_l+0xa8>
 800ead2:	2500      	movs	r5, #0
 800ead4:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800ead6:	1c62      	adds	r2, r4, #1
 800ead8:	9219      	str	r2, [sp, #100]	@ 0x64
 800eada:	7862      	ldrb	r2, [r4, #1]
 800eadc:	2a2b      	cmp	r2, #43	@ 0x2b
 800eade:	d07a      	beq.n	800ebd6 <_strtod_l+0x27e>
 800eae0:	2a2d      	cmp	r2, #45	@ 0x2d
 800eae2:	d07e      	beq.n	800ebe2 <_strtod_l+0x28a>
 800eae4:	f04f 0c00 	mov.w	ip, #0
 800eae8:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800eaec:	2909      	cmp	r1, #9
 800eaee:	f240 8085 	bls.w	800ebfc <_strtod_l+0x2a4>
 800eaf2:	9419      	str	r4, [sp, #100]	@ 0x64
 800eaf4:	f04f 0800 	mov.w	r8, #0
 800eaf8:	e0a5      	b.n	800ec46 <_strtod_l+0x2ee>
 800eafa:	2300      	movs	r3, #0
 800eafc:	e7c8      	b.n	800ea90 <_strtod_l+0x138>
 800eafe:	f1b9 0f08 	cmp.w	r9, #8
 800eb02:	bfd8      	it	le
 800eb04:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800eb06:	f100 0001 	add.w	r0, r0, #1
 800eb0a:	bfda      	itte	le
 800eb0c:	fb02 3301 	mlale	r3, r2, r1, r3
 800eb10:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800eb12:	fb02 3707 	mlagt	r7, r2, r7, r3
 800eb16:	f109 0901 	add.w	r9, r9, #1
 800eb1a:	9019      	str	r0, [sp, #100]	@ 0x64
 800eb1c:	e7bf      	b.n	800ea9e <_strtod_l+0x146>
 800eb1e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800eb20:	1c5a      	adds	r2, r3, #1
 800eb22:	9219      	str	r2, [sp, #100]	@ 0x64
 800eb24:	785a      	ldrb	r2, [r3, #1]
 800eb26:	f1b9 0f00 	cmp.w	r9, #0
 800eb2a:	d03b      	beq.n	800eba4 <_strtod_l+0x24c>
 800eb2c:	900a      	str	r0, [sp, #40]	@ 0x28
 800eb2e:	464d      	mov	r5, r9
 800eb30:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800eb34:	2b09      	cmp	r3, #9
 800eb36:	d912      	bls.n	800eb5e <_strtod_l+0x206>
 800eb38:	2301      	movs	r3, #1
 800eb3a:	e7c2      	b.n	800eac2 <_strtod_l+0x16a>
 800eb3c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800eb3e:	1c5a      	adds	r2, r3, #1
 800eb40:	9219      	str	r2, [sp, #100]	@ 0x64
 800eb42:	785a      	ldrb	r2, [r3, #1]
 800eb44:	3001      	adds	r0, #1
 800eb46:	2a30      	cmp	r2, #48	@ 0x30
 800eb48:	d0f8      	beq.n	800eb3c <_strtod_l+0x1e4>
 800eb4a:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800eb4e:	2b08      	cmp	r3, #8
 800eb50:	f200 84d2 	bhi.w	800f4f8 <_strtod_l+0xba0>
 800eb54:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800eb56:	900a      	str	r0, [sp, #40]	@ 0x28
 800eb58:	2000      	movs	r0, #0
 800eb5a:	930c      	str	r3, [sp, #48]	@ 0x30
 800eb5c:	4605      	mov	r5, r0
 800eb5e:	3a30      	subs	r2, #48	@ 0x30
 800eb60:	f100 0301 	add.w	r3, r0, #1
 800eb64:	d018      	beq.n	800eb98 <_strtod_l+0x240>
 800eb66:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800eb68:	4419      	add	r1, r3
 800eb6a:	910a      	str	r1, [sp, #40]	@ 0x28
 800eb6c:	462e      	mov	r6, r5
 800eb6e:	f04f 0e0a 	mov.w	lr, #10
 800eb72:	1c71      	adds	r1, r6, #1
 800eb74:	eba1 0c05 	sub.w	ip, r1, r5
 800eb78:	4563      	cmp	r3, ip
 800eb7a:	dc15      	bgt.n	800eba8 <_strtod_l+0x250>
 800eb7c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800eb80:	182b      	adds	r3, r5, r0
 800eb82:	2b08      	cmp	r3, #8
 800eb84:	f105 0501 	add.w	r5, r5, #1
 800eb88:	4405      	add	r5, r0
 800eb8a:	dc1a      	bgt.n	800ebc2 <_strtod_l+0x26a>
 800eb8c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800eb8e:	230a      	movs	r3, #10
 800eb90:	fb03 2301 	mla	r3, r3, r1, r2
 800eb94:	930b      	str	r3, [sp, #44]	@ 0x2c
 800eb96:	2300      	movs	r3, #0
 800eb98:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800eb9a:	1c51      	adds	r1, r2, #1
 800eb9c:	9119      	str	r1, [sp, #100]	@ 0x64
 800eb9e:	7852      	ldrb	r2, [r2, #1]
 800eba0:	4618      	mov	r0, r3
 800eba2:	e7c5      	b.n	800eb30 <_strtod_l+0x1d8>
 800eba4:	4648      	mov	r0, r9
 800eba6:	e7ce      	b.n	800eb46 <_strtod_l+0x1ee>
 800eba8:	2e08      	cmp	r6, #8
 800ebaa:	dc05      	bgt.n	800ebb8 <_strtod_l+0x260>
 800ebac:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800ebae:	fb0e f606 	mul.w	r6, lr, r6
 800ebb2:	960b      	str	r6, [sp, #44]	@ 0x2c
 800ebb4:	460e      	mov	r6, r1
 800ebb6:	e7dc      	b.n	800eb72 <_strtod_l+0x21a>
 800ebb8:	2910      	cmp	r1, #16
 800ebba:	bfd8      	it	le
 800ebbc:	fb0e f707 	mulle.w	r7, lr, r7
 800ebc0:	e7f8      	b.n	800ebb4 <_strtod_l+0x25c>
 800ebc2:	2b0f      	cmp	r3, #15
 800ebc4:	bfdc      	itt	le
 800ebc6:	230a      	movle	r3, #10
 800ebc8:	fb03 2707 	mlale	r7, r3, r7, r2
 800ebcc:	e7e3      	b.n	800eb96 <_strtod_l+0x23e>
 800ebce:	2300      	movs	r3, #0
 800ebd0:	930a      	str	r3, [sp, #40]	@ 0x28
 800ebd2:	2301      	movs	r3, #1
 800ebd4:	e77a      	b.n	800eacc <_strtod_l+0x174>
 800ebd6:	f04f 0c00 	mov.w	ip, #0
 800ebda:	1ca2      	adds	r2, r4, #2
 800ebdc:	9219      	str	r2, [sp, #100]	@ 0x64
 800ebde:	78a2      	ldrb	r2, [r4, #2]
 800ebe0:	e782      	b.n	800eae8 <_strtod_l+0x190>
 800ebe2:	f04f 0c01 	mov.w	ip, #1
 800ebe6:	e7f8      	b.n	800ebda <_strtod_l+0x282>
 800ebe8:	08012120 	.word	0x08012120
 800ebec:	08011fa4 	.word	0x08011fa4
 800ebf0:	7ff00000 	.word	0x7ff00000
 800ebf4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ebf6:	1c51      	adds	r1, r2, #1
 800ebf8:	9119      	str	r1, [sp, #100]	@ 0x64
 800ebfa:	7852      	ldrb	r2, [r2, #1]
 800ebfc:	2a30      	cmp	r2, #48	@ 0x30
 800ebfe:	d0f9      	beq.n	800ebf4 <_strtod_l+0x29c>
 800ec00:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800ec04:	2908      	cmp	r1, #8
 800ec06:	f63f af75 	bhi.w	800eaf4 <_strtod_l+0x19c>
 800ec0a:	3a30      	subs	r2, #48	@ 0x30
 800ec0c:	9209      	str	r2, [sp, #36]	@ 0x24
 800ec0e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ec10:	920f      	str	r2, [sp, #60]	@ 0x3c
 800ec12:	f04f 080a 	mov.w	r8, #10
 800ec16:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ec18:	1c56      	adds	r6, r2, #1
 800ec1a:	9619      	str	r6, [sp, #100]	@ 0x64
 800ec1c:	7852      	ldrb	r2, [r2, #1]
 800ec1e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800ec22:	f1be 0f09 	cmp.w	lr, #9
 800ec26:	d939      	bls.n	800ec9c <_strtod_l+0x344>
 800ec28:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800ec2a:	1a76      	subs	r6, r6, r1
 800ec2c:	2e08      	cmp	r6, #8
 800ec2e:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800ec32:	dc03      	bgt.n	800ec3c <_strtod_l+0x2e4>
 800ec34:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ec36:	4588      	cmp	r8, r1
 800ec38:	bfa8      	it	ge
 800ec3a:	4688      	movge	r8, r1
 800ec3c:	f1bc 0f00 	cmp.w	ip, #0
 800ec40:	d001      	beq.n	800ec46 <_strtod_l+0x2ee>
 800ec42:	f1c8 0800 	rsb	r8, r8, #0
 800ec46:	2d00      	cmp	r5, #0
 800ec48:	d14e      	bne.n	800ece8 <_strtod_l+0x390>
 800ec4a:	9908      	ldr	r1, [sp, #32]
 800ec4c:	4308      	orrs	r0, r1
 800ec4e:	f47f aebc 	bne.w	800e9ca <_strtod_l+0x72>
 800ec52:	2b00      	cmp	r3, #0
 800ec54:	f47f aed4 	bne.w	800ea00 <_strtod_l+0xa8>
 800ec58:	2a69      	cmp	r2, #105	@ 0x69
 800ec5a:	d028      	beq.n	800ecae <_strtod_l+0x356>
 800ec5c:	dc25      	bgt.n	800ecaa <_strtod_l+0x352>
 800ec5e:	2a49      	cmp	r2, #73	@ 0x49
 800ec60:	d025      	beq.n	800ecae <_strtod_l+0x356>
 800ec62:	2a4e      	cmp	r2, #78	@ 0x4e
 800ec64:	f47f aecc 	bne.w	800ea00 <_strtod_l+0xa8>
 800ec68:	499a      	ldr	r1, [pc, #616]	@ (800eed4 <_strtod_l+0x57c>)
 800ec6a:	a819      	add	r0, sp, #100	@ 0x64
 800ec6c:	f001 fa30 	bl	80100d0 <__match>
 800ec70:	2800      	cmp	r0, #0
 800ec72:	f43f aec5 	beq.w	800ea00 <_strtod_l+0xa8>
 800ec76:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ec78:	781b      	ldrb	r3, [r3, #0]
 800ec7a:	2b28      	cmp	r3, #40	@ 0x28
 800ec7c:	d12e      	bne.n	800ecdc <_strtod_l+0x384>
 800ec7e:	4996      	ldr	r1, [pc, #600]	@ (800eed8 <_strtod_l+0x580>)
 800ec80:	aa1c      	add	r2, sp, #112	@ 0x70
 800ec82:	a819      	add	r0, sp, #100	@ 0x64
 800ec84:	f001 fa38 	bl	80100f8 <__hexnan>
 800ec88:	2805      	cmp	r0, #5
 800ec8a:	d127      	bne.n	800ecdc <_strtod_l+0x384>
 800ec8c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800ec8e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800ec92:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800ec96:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800ec9a:	e696      	b.n	800e9ca <_strtod_l+0x72>
 800ec9c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ec9e:	fb08 2101 	mla	r1, r8, r1, r2
 800eca2:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800eca6:	9209      	str	r2, [sp, #36]	@ 0x24
 800eca8:	e7b5      	b.n	800ec16 <_strtod_l+0x2be>
 800ecaa:	2a6e      	cmp	r2, #110	@ 0x6e
 800ecac:	e7da      	b.n	800ec64 <_strtod_l+0x30c>
 800ecae:	498b      	ldr	r1, [pc, #556]	@ (800eedc <_strtod_l+0x584>)
 800ecb0:	a819      	add	r0, sp, #100	@ 0x64
 800ecb2:	f001 fa0d 	bl	80100d0 <__match>
 800ecb6:	2800      	cmp	r0, #0
 800ecb8:	f43f aea2 	beq.w	800ea00 <_strtod_l+0xa8>
 800ecbc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ecbe:	4988      	ldr	r1, [pc, #544]	@ (800eee0 <_strtod_l+0x588>)
 800ecc0:	3b01      	subs	r3, #1
 800ecc2:	a819      	add	r0, sp, #100	@ 0x64
 800ecc4:	9319      	str	r3, [sp, #100]	@ 0x64
 800ecc6:	f001 fa03 	bl	80100d0 <__match>
 800ecca:	b910      	cbnz	r0, 800ecd2 <_strtod_l+0x37a>
 800eccc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ecce:	3301      	adds	r3, #1
 800ecd0:	9319      	str	r3, [sp, #100]	@ 0x64
 800ecd2:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 800eef0 <_strtod_l+0x598>
 800ecd6:	f04f 0a00 	mov.w	sl, #0
 800ecda:	e676      	b.n	800e9ca <_strtod_l+0x72>
 800ecdc:	4881      	ldr	r0, [pc, #516]	@ (800eee4 <_strtod_l+0x58c>)
 800ecde:	f000 ff1b 	bl	800fb18 <nan>
 800ece2:	ec5b ab10 	vmov	sl, fp, d0
 800ece6:	e670      	b.n	800e9ca <_strtod_l+0x72>
 800ece8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ecea:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800ecec:	eba8 0303 	sub.w	r3, r8, r3
 800ecf0:	f1b9 0f00 	cmp.w	r9, #0
 800ecf4:	bf08      	it	eq
 800ecf6:	46a9      	moveq	r9, r5
 800ecf8:	2d10      	cmp	r5, #16
 800ecfa:	9309      	str	r3, [sp, #36]	@ 0x24
 800ecfc:	462c      	mov	r4, r5
 800ecfe:	bfa8      	it	ge
 800ed00:	2410      	movge	r4, #16
 800ed02:	f7f1 fc0f 	bl	8000524 <__aeabi_ui2d>
 800ed06:	2d09      	cmp	r5, #9
 800ed08:	4682      	mov	sl, r0
 800ed0a:	468b      	mov	fp, r1
 800ed0c:	dc13      	bgt.n	800ed36 <_strtod_l+0x3de>
 800ed0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ed10:	2b00      	cmp	r3, #0
 800ed12:	f43f ae5a 	beq.w	800e9ca <_strtod_l+0x72>
 800ed16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ed18:	dd78      	ble.n	800ee0c <_strtod_l+0x4b4>
 800ed1a:	2b16      	cmp	r3, #22
 800ed1c:	dc5f      	bgt.n	800edde <_strtod_l+0x486>
 800ed1e:	4972      	ldr	r1, [pc, #456]	@ (800eee8 <_strtod_l+0x590>)
 800ed20:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ed24:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ed28:	4652      	mov	r2, sl
 800ed2a:	465b      	mov	r3, fp
 800ed2c:	f7f1 fc74 	bl	8000618 <__aeabi_dmul>
 800ed30:	4682      	mov	sl, r0
 800ed32:	468b      	mov	fp, r1
 800ed34:	e649      	b.n	800e9ca <_strtod_l+0x72>
 800ed36:	4b6c      	ldr	r3, [pc, #432]	@ (800eee8 <_strtod_l+0x590>)
 800ed38:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ed3c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800ed40:	f7f1 fc6a 	bl	8000618 <__aeabi_dmul>
 800ed44:	4682      	mov	sl, r0
 800ed46:	4638      	mov	r0, r7
 800ed48:	468b      	mov	fp, r1
 800ed4a:	f7f1 fbeb 	bl	8000524 <__aeabi_ui2d>
 800ed4e:	4602      	mov	r2, r0
 800ed50:	460b      	mov	r3, r1
 800ed52:	4650      	mov	r0, sl
 800ed54:	4659      	mov	r1, fp
 800ed56:	f7f1 faa9 	bl	80002ac <__adddf3>
 800ed5a:	2d0f      	cmp	r5, #15
 800ed5c:	4682      	mov	sl, r0
 800ed5e:	468b      	mov	fp, r1
 800ed60:	ddd5      	ble.n	800ed0e <_strtod_l+0x3b6>
 800ed62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ed64:	1b2c      	subs	r4, r5, r4
 800ed66:	441c      	add	r4, r3
 800ed68:	2c00      	cmp	r4, #0
 800ed6a:	f340 8093 	ble.w	800ee94 <_strtod_l+0x53c>
 800ed6e:	f014 030f 	ands.w	r3, r4, #15
 800ed72:	d00a      	beq.n	800ed8a <_strtod_l+0x432>
 800ed74:	495c      	ldr	r1, [pc, #368]	@ (800eee8 <_strtod_l+0x590>)
 800ed76:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ed7a:	4652      	mov	r2, sl
 800ed7c:	465b      	mov	r3, fp
 800ed7e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ed82:	f7f1 fc49 	bl	8000618 <__aeabi_dmul>
 800ed86:	4682      	mov	sl, r0
 800ed88:	468b      	mov	fp, r1
 800ed8a:	f034 040f 	bics.w	r4, r4, #15
 800ed8e:	d073      	beq.n	800ee78 <_strtod_l+0x520>
 800ed90:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800ed94:	dd49      	ble.n	800ee2a <_strtod_l+0x4d2>
 800ed96:	2400      	movs	r4, #0
 800ed98:	46a0      	mov	r8, r4
 800ed9a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800ed9c:	46a1      	mov	r9, r4
 800ed9e:	9a05      	ldr	r2, [sp, #20]
 800eda0:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 800eef0 <_strtod_l+0x598>
 800eda4:	2322      	movs	r3, #34	@ 0x22
 800eda6:	6013      	str	r3, [r2, #0]
 800eda8:	f04f 0a00 	mov.w	sl, #0
 800edac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800edae:	2b00      	cmp	r3, #0
 800edb0:	f43f ae0b 	beq.w	800e9ca <_strtod_l+0x72>
 800edb4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800edb6:	9805      	ldr	r0, [sp, #20]
 800edb8:	f001 fb3a 	bl	8010430 <_Bfree>
 800edbc:	9805      	ldr	r0, [sp, #20]
 800edbe:	4649      	mov	r1, r9
 800edc0:	f001 fb36 	bl	8010430 <_Bfree>
 800edc4:	9805      	ldr	r0, [sp, #20]
 800edc6:	4641      	mov	r1, r8
 800edc8:	f001 fb32 	bl	8010430 <_Bfree>
 800edcc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800edce:	9805      	ldr	r0, [sp, #20]
 800edd0:	f001 fb2e 	bl	8010430 <_Bfree>
 800edd4:	9805      	ldr	r0, [sp, #20]
 800edd6:	4621      	mov	r1, r4
 800edd8:	f001 fb2a 	bl	8010430 <_Bfree>
 800eddc:	e5f5      	b.n	800e9ca <_strtod_l+0x72>
 800edde:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ede0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800ede4:	4293      	cmp	r3, r2
 800ede6:	dbbc      	blt.n	800ed62 <_strtod_l+0x40a>
 800ede8:	4c3f      	ldr	r4, [pc, #252]	@ (800eee8 <_strtod_l+0x590>)
 800edea:	f1c5 050f 	rsb	r5, r5, #15
 800edee:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800edf2:	4652      	mov	r2, sl
 800edf4:	465b      	mov	r3, fp
 800edf6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800edfa:	f7f1 fc0d 	bl	8000618 <__aeabi_dmul>
 800edfe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ee00:	1b5d      	subs	r5, r3, r5
 800ee02:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800ee06:	e9d4 2300 	ldrd	r2, r3, [r4]
 800ee0a:	e78f      	b.n	800ed2c <_strtod_l+0x3d4>
 800ee0c:	3316      	adds	r3, #22
 800ee0e:	dba8      	blt.n	800ed62 <_strtod_l+0x40a>
 800ee10:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ee12:	eba3 0808 	sub.w	r8, r3, r8
 800ee16:	4b34      	ldr	r3, [pc, #208]	@ (800eee8 <_strtod_l+0x590>)
 800ee18:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800ee1c:	e9d8 2300 	ldrd	r2, r3, [r8]
 800ee20:	4650      	mov	r0, sl
 800ee22:	4659      	mov	r1, fp
 800ee24:	f7f1 fd22 	bl	800086c <__aeabi_ddiv>
 800ee28:	e782      	b.n	800ed30 <_strtod_l+0x3d8>
 800ee2a:	2300      	movs	r3, #0
 800ee2c:	4f2f      	ldr	r7, [pc, #188]	@ (800eeec <_strtod_l+0x594>)
 800ee2e:	1124      	asrs	r4, r4, #4
 800ee30:	4650      	mov	r0, sl
 800ee32:	4659      	mov	r1, fp
 800ee34:	461e      	mov	r6, r3
 800ee36:	2c01      	cmp	r4, #1
 800ee38:	dc21      	bgt.n	800ee7e <_strtod_l+0x526>
 800ee3a:	b10b      	cbz	r3, 800ee40 <_strtod_l+0x4e8>
 800ee3c:	4682      	mov	sl, r0
 800ee3e:	468b      	mov	fp, r1
 800ee40:	492a      	ldr	r1, [pc, #168]	@ (800eeec <_strtod_l+0x594>)
 800ee42:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800ee46:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800ee4a:	4652      	mov	r2, sl
 800ee4c:	465b      	mov	r3, fp
 800ee4e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ee52:	f7f1 fbe1 	bl	8000618 <__aeabi_dmul>
 800ee56:	4b26      	ldr	r3, [pc, #152]	@ (800eef0 <_strtod_l+0x598>)
 800ee58:	460a      	mov	r2, r1
 800ee5a:	400b      	ands	r3, r1
 800ee5c:	4925      	ldr	r1, [pc, #148]	@ (800eef4 <_strtod_l+0x59c>)
 800ee5e:	428b      	cmp	r3, r1
 800ee60:	4682      	mov	sl, r0
 800ee62:	d898      	bhi.n	800ed96 <_strtod_l+0x43e>
 800ee64:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800ee68:	428b      	cmp	r3, r1
 800ee6a:	bf86      	itte	hi
 800ee6c:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 800eef8 <_strtod_l+0x5a0>
 800ee70:	f04f 3aff 	movhi.w	sl, #4294967295
 800ee74:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800ee78:	2300      	movs	r3, #0
 800ee7a:	9308      	str	r3, [sp, #32]
 800ee7c:	e076      	b.n	800ef6c <_strtod_l+0x614>
 800ee7e:	07e2      	lsls	r2, r4, #31
 800ee80:	d504      	bpl.n	800ee8c <_strtod_l+0x534>
 800ee82:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ee86:	f7f1 fbc7 	bl	8000618 <__aeabi_dmul>
 800ee8a:	2301      	movs	r3, #1
 800ee8c:	3601      	adds	r6, #1
 800ee8e:	1064      	asrs	r4, r4, #1
 800ee90:	3708      	adds	r7, #8
 800ee92:	e7d0      	b.n	800ee36 <_strtod_l+0x4de>
 800ee94:	d0f0      	beq.n	800ee78 <_strtod_l+0x520>
 800ee96:	4264      	negs	r4, r4
 800ee98:	f014 020f 	ands.w	r2, r4, #15
 800ee9c:	d00a      	beq.n	800eeb4 <_strtod_l+0x55c>
 800ee9e:	4b12      	ldr	r3, [pc, #72]	@ (800eee8 <_strtod_l+0x590>)
 800eea0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800eea4:	4650      	mov	r0, sl
 800eea6:	4659      	mov	r1, fp
 800eea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eeac:	f7f1 fcde 	bl	800086c <__aeabi_ddiv>
 800eeb0:	4682      	mov	sl, r0
 800eeb2:	468b      	mov	fp, r1
 800eeb4:	1124      	asrs	r4, r4, #4
 800eeb6:	d0df      	beq.n	800ee78 <_strtod_l+0x520>
 800eeb8:	2c1f      	cmp	r4, #31
 800eeba:	dd1f      	ble.n	800eefc <_strtod_l+0x5a4>
 800eebc:	2400      	movs	r4, #0
 800eebe:	46a0      	mov	r8, r4
 800eec0:	940b      	str	r4, [sp, #44]	@ 0x2c
 800eec2:	46a1      	mov	r9, r4
 800eec4:	9a05      	ldr	r2, [sp, #20]
 800eec6:	2322      	movs	r3, #34	@ 0x22
 800eec8:	f04f 0a00 	mov.w	sl, #0
 800eecc:	f04f 0b00 	mov.w	fp, #0
 800eed0:	6013      	str	r3, [r2, #0]
 800eed2:	e76b      	b.n	800edac <_strtod_l+0x454>
 800eed4:	08011faf 	.word	0x08011faf
 800eed8:	0801210c 	.word	0x0801210c
 800eedc:	08011fa6 	.word	0x08011fa6
 800eee0:	08011fa9 	.word	0x08011fa9
 800eee4:	08012109 	.word	0x08012109
 800eee8:	08012298 	.word	0x08012298
 800eeec:	08012270 	.word	0x08012270
 800eef0:	7ff00000 	.word	0x7ff00000
 800eef4:	7ca00000 	.word	0x7ca00000
 800eef8:	7fefffff 	.word	0x7fefffff
 800eefc:	f014 0310 	ands.w	r3, r4, #16
 800ef00:	bf18      	it	ne
 800ef02:	236a      	movne	r3, #106	@ 0x6a
 800ef04:	4ea9      	ldr	r6, [pc, #676]	@ (800f1ac <_strtod_l+0x854>)
 800ef06:	9308      	str	r3, [sp, #32]
 800ef08:	4650      	mov	r0, sl
 800ef0a:	4659      	mov	r1, fp
 800ef0c:	2300      	movs	r3, #0
 800ef0e:	07e7      	lsls	r7, r4, #31
 800ef10:	d504      	bpl.n	800ef1c <_strtod_l+0x5c4>
 800ef12:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ef16:	f7f1 fb7f 	bl	8000618 <__aeabi_dmul>
 800ef1a:	2301      	movs	r3, #1
 800ef1c:	1064      	asrs	r4, r4, #1
 800ef1e:	f106 0608 	add.w	r6, r6, #8
 800ef22:	d1f4      	bne.n	800ef0e <_strtod_l+0x5b6>
 800ef24:	b10b      	cbz	r3, 800ef2a <_strtod_l+0x5d2>
 800ef26:	4682      	mov	sl, r0
 800ef28:	468b      	mov	fp, r1
 800ef2a:	9b08      	ldr	r3, [sp, #32]
 800ef2c:	b1b3      	cbz	r3, 800ef5c <_strtod_l+0x604>
 800ef2e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800ef32:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800ef36:	2b00      	cmp	r3, #0
 800ef38:	4659      	mov	r1, fp
 800ef3a:	dd0f      	ble.n	800ef5c <_strtod_l+0x604>
 800ef3c:	2b1f      	cmp	r3, #31
 800ef3e:	dd56      	ble.n	800efee <_strtod_l+0x696>
 800ef40:	2b34      	cmp	r3, #52	@ 0x34
 800ef42:	bfde      	ittt	le
 800ef44:	f04f 33ff 	movle.w	r3, #4294967295
 800ef48:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800ef4c:	4093      	lslle	r3, r2
 800ef4e:	f04f 0a00 	mov.w	sl, #0
 800ef52:	bfcc      	ite	gt
 800ef54:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800ef58:	ea03 0b01 	andle.w	fp, r3, r1
 800ef5c:	2200      	movs	r2, #0
 800ef5e:	2300      	movs	r3, #0
 800ef60:	4650      	mov	r0, sl
 800ef62:	4659      	mov	r1, fp
 800ef64:	f7f1 fdc0 	bl	8000ae8 <__aeabi_dcmpeq>
 800ef68:	2800      	cmp	r0, #0
 800ef6a:	d1a7      	bne.n	800eebc <_strtod_l+0x564>
 800ef6c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ef6e:	9300      	str	r3, [sp, #0]
 800ef70:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800ef72:	9805      	ldr	r0, [sp, #20]
 800ef74:	462b      	mov	r3, r5
 800ef76:	464a      	mov	r2, r9
 800ef78:	f001 fac2 	bl	8010500 <__s2b>
 800ef7c:	900b      	str	r0, [sp, #44]	@ 0x2c
 800ef7e:	2800      	cmp	r0, #0
 800ef80:	f43f af09 	beq.w	800ed96 <_strtod_l+0x43e>
 800ef84:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ef86:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ef88:	2a00      	cmp	r2, #0
 800ef8a:	eba3 0308 	sub.w	r3, r3, r8
 800ef8e:	bfa8      	it	ge
 800ef90:	2300      	movge	r3, #0
 800ef92:	9312      	str	r3, [sp, #72]	@ 0x48
 800ef94:	2400      	movs	r4, #0
 800ef96:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800ef9a:	9316      	str	r3, [sp, #88]	@ 0x58
 800ef9c:	46a0      	mov	r8, r4
 800ef9e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800efa0:	9805      	ldr	r0, [sp, #20]
 800efa2:	6859      	ldr	r1, [r3, #4]
 800efa4:	f001 fa04 	bl	80103b0 <_Balloc>
 800efa8:	4681      	mov	r9, r0
 800efaa:	2800      	cmp	r0, #0
 800efac:	f43f aef7 	beq.w	800ed9e <_strtod_l+0x446>
 800efb0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800efb2:	691a      	ldr	r2, [r3, #16]
 800efb4:	3202      	adds	r2, #2
 800efb6:	f103 010c 	add.w	r1, r3, #12
 800efba:	0092      	lsls	r2, r2, #2
 800efbc:	300c      	adds	r0, #12
 800efbe:	f000 fd9a 	bl	800faf6 <memcpy>
 800efc2:	ec4b ab10 	vmov	d0, sl, fp
 800efc6:	9805      	ldr	r0, [sp, #20]
 800efc8:	aa1c      	add	r2, sp, #112	@ 0x70
 800efca:	a91b      	add	r1, sp, #108	@ 0x6c
 800efcc:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800efd0:	f001 fdca 	bl	8010b68 <__d2b>
 800efd4:	901a      	str	r0, [sp, #104]	@ 0x68
 800efd6:	2800      	cmp	r0, #0
 800efd8:	f43f aee1 	beq.w	800ed9e <_strtod_l+0x446>
 800efdc:	9805      	ldr	r0, [sp, #20]
 800efde:	2101      	movs	r1, #1
 800efe0:	f001 fb24 	bl	801062c <__i2b>
 800efe4:	4680      	mov	r8, r0
 800efe6:	b948      	cbnz	r0, 800effc <_strtod_l+0x6a4>
 800efe8:	f04f 0800 	mov.w	r8, #0
 800efec:	e6d7      	b.n	800ed9e <_strtod_l+0x446>
 800efee:	f04f 32ff 	mov.w	r2, #4294967295
 800eff2:	fa02 f303 	lsl.w	r3, r2, r3
 800eff6:	ea03 0a0a 	and.w	sl, r3, sl
 800effa:	e7af      	b.n	800ef5c <_strtod_l+0x604>
 800effc:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800effe:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800f000:	2d00      	cmp	r5, #0
 800f002:	bfab      	itete	ge
 800f004:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800f006:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800f008:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800f00a:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800f00c:	bfac      	ite	ge
 800f00e:	18ef      	addge	r7, r5, r3
 800f010:	1b5e      	sublt	r6, r3, r5
 800f012:	9b08      	ldr	r3, [sp, #32]
 800f014:	1aed      	subs	r5, r5, r3
 800f016:	4415      	add	r5, r2
 800f018:	4b65      	ldr	r3, [pc, #404]	@ (800f1b0 <_strtod_l+0x858>)
 800f01a:	3d01      	subs	r5, #1
 800f01c:	429d      	cmp	r5, r3
 800f01e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800f022:	da50      	bge.n	800f0c6 <_strtod_l+0x76e>
 800f024:	1b5b      	subs	r3, r3, r5
 800f026:	2b1f      	cmp	r3, #31
 800f028:	eba2 0203 	sub.w	r2, r2, r3
 800f02c:	f04f 0101 	mov.w	r1, #1
 800f030:	dc3d      	bgt.n	800f0ae <_strtod_l+0x756>
 800f032:	fa01 f303 	lsl.w	r3, r1, r3
 800f036:	9313      	str	r3, [sp, #76]	@ 0x4c
 800f038:	2300      	movs	r3, #0
 800f03a:	9310      	str	r3, [sp, #64]	@ 0x40
 800f03c:	18bd      	adds	r5, r7, r2
 800f03e:	9b08      	ldr	r3, [sp, #32]
 800f040:	42af      	cmp	r7, r5
 800f042:	4416      	add	r6, r2
 800f044:	441e      	add	r6, r3
 800f046:	463b      	mov	r3, r7
 800f048:	bfa8      	it	ge
 800f04a:	462b      	movge	r3, r5
 800f04c:	42b3      	cmp	r3, r6
 800f04e:	bfa8      	it	ge
 800f050:	4633      	movge	r3, r6
 800f052:	2b00      	cmp	r3, #0
 800f054:	bfc2      	ittt	gt
 800f056:	1aed      	subgt	r5, r5, r3
 800f058:	1af6      	subgt	r6, r6, r3
 800f05a:	1aff      	subgt	r7, r7, r3
 800f05c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800f05e:	2b00      	cmp	r3, #0
 800f060:	dd16      	ble.n	800f090 <_strtod_l+0x738>
 800f062:	4641      	mov	r1, r8
 800f064:	9805      	ldr	r0, [sp, #20]
 800f066:	461a      	mov	r2, r3
 800f068:	f001 fb98 	bl	801079c <__pow5mult>
 800f06c:	4680      	mov	r8, r0
 800f06e:	2800      	cmp	r0, #0
 800f070:	d0ba      	beq.n	800efe8 <_strtod_l+0x690>
 800f072:	4601      	mov	r1, r0
 800f074:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800f076:	9805      	ldr	r0, [sp, #20]
 800f078:	f001 faee 	bl	8010658 <__multiply>
 800f07c:	900a      	str	r0, [sp, #40]	@ 0x28
 800f07e:	2800      	cmp	r0, #0
 800f080:	f43f ae8d 	beq.w	800ed9e <_strtod_l+0x446>
 800f084:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f086:	9805      	ldr	r0, [sp, #20]
 800f088:	f001 f9d2 	bl	8010430 <_Bfree>
 800f08c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f08e:	931a      	str	r3, [sp, #104]	@ 0x68
 800f090:	2d00      	cmp	r5, #0
 800f092:	dc1d      	bgt.n	800f0d0 <_strtod_l+0x778>
 800f094:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f096:	2b00      	cmp	r3, #0
 800f098:	dd23      	ble.n	800f0e2 <_strtod_l+0x78a>
 800f09a:	4649      	mov	r1, r9
 800f09c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800f09e:	9805      	ldr	r0, [sp, #20]
 800f0a0:	f001 fb7c 	bl	801079c <__pow5mult>
 800f0a4:	4681      	mov	r9, r0
 800f0a6:	b9e0      	cbnz	r0, 800f0e2 <_strtod_l+0x78a>
 800f0a8:	f04f 0900 	mov.w	r9, #0
 800f0ac:	e677      	b.n	800ed9e <_strtod_l+0x446>
 800f0ae:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800f0b2:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800f0b6:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800f0ba:	35e2      	adds	r5, #226	@ 0xe2
 800f0bc:	fa01 f305 	lsl.w	r3, r1, r5
 800f0c0:	9310      	str	r3, [sp, #64]	@ 0x40
 800f0c2:	9113      	str	r1, [sp, #76]	@ 0x4c
 800f0c4:	e7ba      	b.n	800f03c <_strtod_l+0x6e4>
 800f0c6:	2300      	movs	r3, #0
 800f0c8:	9310      	str	r3, [sp, #64]	@ 0x40
 800f0ca:	2301      	movs	r3, #1
 800f0cc:	9313      	str	r3, [sp, #76]	@ 0x4c
 800f0ce:	e7b5      	b.n	800f03c <_strtod_l+0x6e4>
 800f0d0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f0d2:	9805      	ldr	r0, [sp, #20]
 800f0d4:	462a      	mov	r2, r5
 800f0d6:	f001 fbbb 	bl	8010850 <__lshift>
 800f0da:	901a      	str	r0, [sp, #104]	@ 0x68
 800f0dc:	2800      	cmp	r0, #0
 800f0de:	d1d9      	bne.n	800f094 <_strtod_l+0x73c>
 800f0e0:	e65d      	b.n	800ed9e <_strtod_l+0x446>
 800f0e2:	2e00      	cmp	r6, #0
 800f0e4:	dd07      	ble.n	800f0f6 <_strtod_l+0x79e>
 800f0e6:	4649      	mov	r1, r9
 800f0e8:	9805      	ldr	r0, [sp, #20]
 800f0ea:	4632      	mov	r2, r6
 800f0ec:	f001 fbb0 	bl	8010850 <__lshift>
 800f0f0:	4681      	mov	r9, r0
 800f0f2:	2800      	cmp	r0, #0
 800f0f4:	d0d8      	beq.n	800f0a8 <_strtod_l+0x750>
 800f0f6:	2f00      	cmp	r7, #0
 800f0f8:	dd08      	ble.n	800f10c <_strtod_l+0x7b4>
 800f0fa:	4641      	mov	r1, r8
 800f0fc:	9805      	ldr	r0, [sp, #20]
 800f0fe:	463a      	mov	r2, r7
 800f100:	f001 fba6 	bl	8010850 <__lshift>
 800f104:	4680      	mov	r8, r0
 800f106:	2800      	cmp	r0, #0
 800f108:	f43f ae49 	beq.w	800ed9e <_strtod_l+0x446>
 800f10c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f10e:	9805      	ldr	r0, [sp, #20]
 800f110:	464a      	mov	r2, r9
 800f112:	f001 fc25 	bl	8010960 <__mdiff>
 800f116:	4604      	mov	r4, r0
 800f118:	2800      	cmp	r0, #0
 800f11a:	f43f ae40 	beq.w	800ed9e <_strtod_l+0x446>
 800f11e:	68c3      	ldr	r3, [r0, #12]
 800f120:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f122:	2300      	movs	r3, #0
 800f124:	60c3      	str	r3, [r0, #12]
 800f126:	4641      	mov	r1, r8
 800f128:	f001 fbfe 	bl	8010928 <__mcmp>
 800f12c:	2800      	cmp	r0, #0
 800f12e:	da45      	bge.n	800f1bc <_strtod_l+0x864>
 800f130:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f132:	ea53 030a 	orrs.w	r3, r3, sl
 800f136:	d16b      	bne.n	800f210 <_strtod_l+0x8b8>
 800f138:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f13c:	2b00      	cmp	r3, #0
 800f13e:	d167      	bne.n	800f210 <_strtod_l+0x8b8>
 800f140:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800f144:	0d1b      	lsrs	r3, r3, #20
 800f146:	051b      	lsls	r3, r3, #20
 800f148:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800f14c:	d960      	bls.n	800f210 <_strtod_l+0x8b8>
 800f14e:	6963      	ldr	r3, [r4, #20]
 800f150:	b913      	cbnz	r3, 800f158 <_strtod_l+0x800>
 800f152:	6923      	ldr	r3, [r4, #16]
 800f154:	2b01      	cmp	r3, #1
 800f156:	dd5b      	ble.n	800f210 <_strtod_l+0x8b8>
 800f158:	4621      	mov	r1, r4
 800f15a:	2201      	movs	r2, #1
 800f15c:	9805      	ldr	r0, [sp, #20]
 800f15e:	f001 fb77 	bl	8010850 <__lshift>
 800f162:	4641      	mov	r1, r8
 800f164:	4604      	mov	r4, r0
 800f166:	f001 fbdf 	bl	8010928 <__mcmp>
 800f16a:	2800      	cmp	r0, #0
 800f16c:	dd50      	ble.n	800f210 <_strtod_l+0x8b8>
 800f16e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800f172:	9a08      	ldr	r2, [sp, #32]
 800f174:	0d1b      	lsrs	r3, r3, #20
 800f176:	051b      	lsls	r3, r3, #20
 800f178:	2a00      	cmp	r2, #0
 800f17a:	d06a      	beq.n	800f252 <_strtod_l+0x8fa>
 800f17c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800f180:	d867      	bhi.n	800f252 <_strtod_l+0x8fa>
 800f182:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800f186:	f67f ae9d 	bls.w	800eec4 <_strtod_l+0x56c>
 800f18a:	4b0a      	ldr	r3, [pc, #40]	@ (800f1b4 <_strtod_l+0x85c>)
 800f18c:	4650      	mov	r0, sl
 800f18e:	4659      	mov	r1, fp
 800f190:	2200      	movs	r2, #0
 800f192:	f7f1 fa41 	bl	8000618 <__aeabi_dmul>
 800f196:	4b08      	ldr	r3, [pc, #32]	@ (800f1b8 <_strtod_l+0x860>)
 800f198:	400b      	ands	r3, r1
 800f19a:	4682      	mov	sl, r0
 800f19c:	468b      	mov	fp, r1
 800f19e:	2b00      	cmp	r3, #0
 800f1a0:	f47f ae08 	bne.w	800edb4 <_strtod_l+0x45c>
 800f1a4:	9a05      	ldr	r2, [sp, #20]
 800f1a6:	2322      	movs	r3, #34	@ 0x22
 800f1a8:	6013      	str	r3, [r2, #0]
 800f1aa:	e603      	b.n	800edb4 <_strtod_l+0x45c>
 800f1ac:	08012138 	.word	0x08012138
 800f1b0:	fffffc02 	.word	0xfffffc02
 800f1b4:	39500000 	.word	0x39500000
 800f1b8:	7ff00000 	.word	0x7ff00000
 800f1bc:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800f1c0:	d165      	bne.n	800f28e <_strtod_l+0x936>
 800f1c2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800f1c4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f1c8:	b35a      	cbz	r2, 800f222 <_strtod_l+0x8ca>
 800f1ca:	4a9f      	ldr	r2, [pc, #636]	@ (800f448 <_strtod_l+0xaf0>)
 800f1cc:	4293      	cmp	r3, r2
 800f1ce:	d12b      	bne.n	800f228 <_strtod_l+0x8d0>
 800f1d0:	9b08      	ldr	r3, [sp, #32]
 800f1d2:	4651      	mov	r1, sl
 800f1d4:	b303      	cbz	r3, 800f218 <_strtod_l+0x8c0>
 800f1d6:	4b9d      	ldr	r3, [pc, #628]	@ (800f44c <_strtod_l+0xaf4>)
 800f1d8:	465a      	mov	r2, fp
 800f1da:	4013      	ands	r3, r2
 800f1dc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800f1e0:	f04f 32ff 	mov.w	r2, #4294967295
 800f1e4:	d81b      	bhi.n	800f21e <_strtod_l+0x8c6>
 800f1e6:	0d1b      	lsrs	r3, r3, #20
 800f1e8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800f1ec:	fa02 f303 	lsl.w	r3, r2, r3
 800f1f0:	4299      	cmp	r1, r3
 800f1f2:	d119      	bne.n	800f228 <_strtod_l+0x8d0>
 800f1f4:	4b96      	ldr	r3, [pc, #600]	@ (800f450 <_strtod_l+0xaf8>)
 800f1f6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f1f8:	429a      	cmp	r2, r3
 800f1fa:	d102      	bne.n	800f202 <_strtod_l+0x8aa>
 800f1fc:	3101      	adds	r1, #1
 800f1fe:	f43f adce 	beq.w	800ed9e <_strtod_l+0x446>
 800f202:	4b92      	ldr	r3, [pc, #584]	@ (800f44c <_strtod_l+0xaf4>)
 800f204:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f206:	401a      	ands	r2, r3
 800f208:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800f20c:	f04f 0a00 	mov.w	sl, #0
 800f210:	9b08      	ldr	r3, [sp, #32]
 800f212:	2b00      	cmp	r3, #0
 800f214:	d1b9      	bne.n	800f18a <_strtod_l+0x832>
 800f216:	e5cd      	b.n	800edb4 <_strtod_l+0x45c>
 800f218:	f04f 33ff 	mov.w	r3, #4294967295
 800f21c:	e7e8      	b.n	800f1f0 <_strtod_l+0x898>
 800f21e:	4613      	mov	r3, r2
 800f220:	e7e6      	b.n	800f1f0 <_strtod_l+0x898>
 800f222:	ea53 030a 	orrs.w	r3, r3, sl
 800f226:	d0a2      	beq.n	800f16e <_strtod_l+0x816>
 800f228:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800f22a:	b1db      	cbz	r3, 800f264 <_strtod_l+0x90c>
 800f22c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f22e:	4213      	tst	r3, r2
 800f230:	d0ee      	beq.n	800f210 <_strtod_l+0x8b8>
 800f232:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f234:	9a08      	ldr	r2, [sp, #32]
 800f236:	4650      	mov	r0, sl
 800f238:	4659      	mov	r1, fp
 800f23a:	b1bb      	cbz	r3, 800f26c <_strtod_l+0x914>
 800f23c:	f7ff fb6b 	bl	800e916 <sulp>
 800f240:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f244:	ec53 2b10 	vmov	r2, r3, d0
 800f248:	f7f1 f830 	bl	80002ac <__adddf3>
 800f24c:	4682      	mov	sl, r0
 800f24e:	468b      	mov	fp, r1
 800f250:	e7de      	b.n	800f210 <_strtod_l+0x8b8>
 800f252:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800f256:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800f25a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800f25e:	f04f 3aff 	mov.w	sl, #4294967295
 800f262:	e7d5      	b.n	800f210 <_strtod_l+0x8b8>
 800f264:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f266:	ea13 0f0a 	tst.w	r3, sl
 800f26a:	e7e1      	b.n	800f230 <_strtod_l+0x8d8>
 800f26c:	f7ff fb53 	bl	800e916 <sulp>
 800f270:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f274:	ec53 2b10 	vmov	r2, r3, d0
 800f278:	f7f1 f816 	bl	80002a8 <__aeabi_dsub>
 800f27c:	2200      	movs	r2, #0
 800f27e:	2300      	movs	r3, #0
 800f280:	4682      	mov	sl, r0
 800f282:	468b      	mov	fp, r1
 800f284:	f7f1 fc30 	bl	8000ae8 <__aeabi_dcmpeq>
 800f288:	2800      	cmp	r0, #0
 800f28a:	d0c1      	beq.n	800f210 <_strtod_l+0x8b8>
 800f28c:	e61a      	b.n	800eec4 <_strtod_l+0x56c>
 800f28e:	4641      	mov	r1, r8
 800f290:	4620      	mov	r0, r4
 800f292:	f001 fcc1 	bl	8010c18 <__ratio>
 800f296:	ec57 6b10 	vmov	r6, r7, d0
 800f29a:	2200      	movs	r2, #0
 800f29c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800f2a0:	4630      	mov	r0, r6
 800f2a2:	4639      	mov	r1, r7
 800f2a4:	f7f1 fc34 	bl	8000b10 <__aeabi_dcmple>
 800f2a8:	2800      	cmp	r0, #0
 800f2aa:	d06f      	beq.n	800f38c <_strtod_l+0xa34>
 800f2ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f2ae:	2b00      	cmp	r3, #0
 800f2b0:	d17a      	bne.n	800f3a8 <_strtod_l+0xa50>
 800f2b2:	f1ba 0f00 	cmp.w	sl, #0
 800f2b6:	d158      	bne.n	800f36a <_strtod_l+0xa12>
 800f2b8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f2ba:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f2be:	2b00      	cmp	r3, #0
 800f2c0:	d15a      	bne.n	800f378 <_strtod_l+0xa20>
 800f2c2:	4b64      	ldr	r3, [pc, #400]	@ (800f454 <_strtod_l+0xafc>)
 800f2c4:	2200      	movs	r2, #0
 800f2c6:	4630      	mov	r0, r6
 800f2c8:	4639      	mov	r1, r7
 800f2ca:	f7f1 fc17 	bl	8000afc <__aeabi_dcmplt>
 800f2ce:	2800      	cmp	r0, #0
 800f2d0:	d159      	bne.n	800f386 <_strtod_l+0xa2e>
 800f2d2:	4630      	mov	r0, r6
 800f2d4:	4639      	mov	r1, r7
 800f2d6:	4b60      	ldr	r3, [pc, #384]	@ (800f458 <_strtod_l+0xb00>)
 800f2d8:	2200      	movs	r2, #0
 800f2da:	f7f1 f99d 	bl	8000618 <__aeabi_dmul>
 800f2de:	4606      	mov	r6, r0
 800f2e0:	460f      	mov	r7, r1
 800f2e2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800f2e6:	9606      	str	r6, [sp, #24]
 800f2e8:	9307      	str	r3, [sp, #28]
 800f2ea:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f2ee:	4d57      	ldr	r5, [pc, #348]	@ (800f44c <_strtod_l+0xaf4>)
 800f2f0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800f2f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f2f6:	401d      	ands	r5, r3
 800f2f8:	4b58      	ldr	r3, [pc, #352]	@ (800f45c <_strtod_l+0xb04>)
 800f2fa:	429d      	cmp	r5, r3
 800f2fc:	f040 80b2 	bne.w	800f464 <_strtod_l+0xb0c>
 800f300:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f302:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800f306:	ec4b ab10 	vmov	d0, sl, fp
 800f30a:	f001 fbbd 	bl	8010a88 <__ulp>
 800f30e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f312:	ec51 0b10 	vmov	r0, r1, d0
 800f316:	f7f1 f97f 	bl	8000618 <__aeabi_dmul>
 800f31a:	4652      	mov	r2, sl
 800f31c:	465b      	mov	r3, fp
 800f31e:	f7f0 ffc5 	bl	80002ac <__adddf3>
 800f322:	460b      	mov	r3, r1
 800f324:	4949      	ldr	r1, [pc, #292]	@ (800f44c <_strtod_l+0xaf4>)
 800f326:	4a4e      	ldr	r2, [pc, #312]	@ (800f460 <_strtod_l+0xb08>)
 800f328:	4019      	ands	r1, r3
 800f32a:	4291      	cmp	r1, r2
 800f32c:	4682      	mov	sl, r0
 800f32e:	d942      	bls.n	800f3b6 <_strtod_l+0xa5e>
 800f330:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800f332:	4b47      	ldr	r3, [pc, #284]	@ (800f450 <_strtod_l+0xaf8>)
 800f334:	429a      	cmp	r2, r3
 800f336:	d103      	bne.n	800f340 <_strtod_l+0x9e8>
 800f338:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f33a:	3301      	adds	r3, #1
 800f33c:	f43f ad2f 	beq.w	800ed9e <_strtod_l+0x446>
 800f340:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800f450 <_strtod_l+0xaf8>
 800f344:	f04f 3aff 	mov.w	sl, #4294967295
 800f348:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f34a:	9805      	ldr	r0, [sp, #20]
 800f34c:	f001 f870 	bl	8010430 <_Bfree>
 800f350:	9805      	ldr	r0, [sp, #20]
 800f352:	4649      	mov	r1, r9
 800f354:	f001 f86c 	bl	8010430 <_Bfree>
 800f358:	9805      	ldr	r0, [sp, #20]
 800f35a:	4641      	mov	r1, r8
 800f35c:	f001 f868 	bl	8010430 <_Bfree>
 800f360:	9805      	ldr	r0, [sp, #20]
 800f362:	4621      	mov	r1, r4
 800f364:	f001 f864 	bl	8010430 <_Bfree>
 800f368:	e619      	b.n	800ef9e <_strtod_l+0x646>
 800f36a:	f1ba 0f01 	cmp.w	sl, #1
 800f36e:	d103      	bne.n	800f378 <_strtod_l+0xa20>
 800f370:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f372:	2b00      	cmp	r3, #0
 800f374:	f43f ada6 	beq.w	800eec4 <_strtod_l+0x56c>
 800f378:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800f428 <_strtod_l+0xad0>
 800f37c:	4f35      	ldr	r7, [pc, #212]	@ (800f454 <_strtod_l+0xafc>)
 800f37e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800f382:	2600      	movs	r6, #0
 800f384:	e7b1      	b.n	800f2ea <_strtod_l+0x992>
 800f386:	4f34      	ldr	r7, [pc, #208]	@ (800f458 <_strtod_l+0xb00>)
 800f388:	2600      	movs	r6, #0
 800f38a:	e7aa      	b.n	800f2e2 <_strtod_l+0x98a>
 800f38c:	4b32      	ldr	r3, [pc, #200]	@ (800f458 <_strtod_l+0xb00>)
 800f38e:	4630      	mov	r0, r6
 800f390:	4639      	mov	r1, r7
 800f392:	2200      	movs	r2, #0
 800f394:	f7f1 f940 	bl	8000618 <__aeabi_dmul>
 800f398:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f39a:	4606      	mov	r6, r0
 800f39c:	460f      	mov	r7, r1
 800f39e:	2b00      	cmp	r3, #0
 800f3a0:	d09f      	beq.n	800f2e2 <_strtod_l+0x98a>
 800f3a2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800f3a6:	e7a0      	b.n	800f2ea <_strtod_l+0x992>
 800f3a8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800f430 <_strtod_l+0xad8>
 800f3ac:	ed8d 7b06 	vstr	d7, [sp, #24]
 800f3b0:	ec57 6b17 	vmov	r6, r7, d7
 800f3b4:	e799      	b.n	800f2ea <_strtod_l+0x992>
 800f3b6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800f3ba:	9b08      	ldr	r3, [sp, #32]
 800f3bc:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800f3c0:	2b00      	cmp	r3, #0
 800f3c2:	d1c1      	bne.n	800f348 <_strtod_l+0x9f0>
 800f3c4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800f3c8:	0d1b      	lsrs	r3, r3, #20
 800f3ca:	051b      	lsls	r3, r3, #20
 800f3cc:	429d      	cmp	r5, r3
 800f3ce:	d1bb      	bne.n	800f348 <_strtod_l+0x9f0>
 800f3d0:	4630      	mov	r0, r6
 800f3d2:	4639      	mov	r1, r7
 800f3d4:	f7f1 fc80 	bl	8000cd8 <__aeabi_d2lz>
 800f3d8:	f7f1 f8f0 	bl	80005bc <__aeabi_l2d>
 800f3dc:	4602      	mov	r2, r0
 800f3de:	460b      	mov	r3, r1
 800f3e0:	4630      	mov	r0, r6
 800f3e2:	4639      	mov	r1, r7
 800f3e4:	f7f0 ff60 	bl	80002a8 <__aeabi_dsub>
 800f3e8:	460b      	mov	r3, r1
 800f3ea:	4602      	mov	r2, r0
 800f3ec:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800f3f0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800f3f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f3f6:	ea46 060a 	orr.w	r6, r6, sl
 800f3fa:	431e      	orrs	r6, r3
 800f3fc:	d06f      	beq.n	800f4de <_strtod_l+0xb86>
 800f3fe:	a30e      	add	r3, pc, #56	@ (adr r3, 800f438 <_strtod_l+0xae0>)
 800f400:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f404:	f7f1 fb7a 	bl	8000afc <__aeabi_dcmplt>
 800f408:	2800      	cmp	r0, #0
 800f40a:	f47f acd3 	bne.w	800edb4 <_strtod_l+0x45c>
 800f40e:	a30c      	add	r3, pc, #48	@ (adr r3, 800f440 <_strtod_l+0xae8>)
 800f410:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f414:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f418:	f7f1 fb8e 	bl	8000b38 <__aeabi_dcmpgt>
 800f41c:	2800      	cmp	r0, #0
 800f41e:	d093      	beq.n	800f348 <_strtod_l+0x9f0>
 800f420:	e4c8      	b.n	800edb4 <_strtod_l+0x45c>
 800f422:	bf00      	nop
 800f424:	f3af 8000 	nop.w
 800f428:	00000000 	.word	0x00000000
 800f42c:	bff00000 	.word	0xbff00000
 800f430:	00000000 	.word	0x00000000
 800f434:	3ff00000 	.word	0x3ff00000
 800f438:	94a03595 	.word	0x94a03595
 800f43c:	3fdfffff 	.word	0x3fdfffff
 800f440:	35afe535 	.word	0x35afe535
 800f444:	3fe00000 	.word	0x3fe00000
 800f448:	000fffff 	.word	0x000fffff
 800f44c:	7ff00000 	.word	0x7ff00000
 800f450:	7fefffff 	.word	0x7fefffff
 800f454:	3ff00000 	.word	0x3ff00000
 800f458:	3fe00000 	.word	0x3fe00000
 800f45c:	7fe00000 	.word	0x7fe00000
 800f460:	7c9fffff 	.word	0x7c9fffff
 800f464:	9b08      	ldr	r3, [sp, #32]
 800f466:	b323      	cbz	r3, 800f4b2 <_strtod_l+0xb5a>
 800f468:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800f46c:	d821      	bhi.n	800f4b2 <_strtod_l+0xb5a>
 800f46e:	a328      	add	r3, pc, #160	@ (adr r3, 800f510 <_strtod_l+0xbb8>)
 800f470:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f474:	4630      	mov	r0, r6
 800f476:	4639      	mov	r1, r7
 800f478:	f7f1 fb4a 	bl	8000b10 <__aeabi_dcmple>
 800f47c:	b1a0      	cbz	r0, 800f4a8 <_strtod_l+0xb50>
 800f47e:	4639      	mov	r1, r7
 800f480:	4630      	mov	r0, r6
 800f482:	f7f1 fba1 	bl	8000bc8 <__aeabi_d2uiz>
 800f486:	2801      	cmp	r0, #1
 800f488:	bf38      	it	cc
 800f48a:	2001      	movcc	r0, #1
 800f48c:	f7f1 f84a 	bl	8000524 <__aeabi_ui2d>
 800f490:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f492:	4606      	mov	r6, r0
 800f494:	460f      	mov	r7, r1
 800f496:	b9fb      	cbnz	r3, 800f4d8 <_strtod_l+0xb80>
 800f498:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800f49c:	9014      	str	r0, [sp, #80]	@ 0x50
 800f49e:	9315      	str	r3, [sp, #84]	@ 0x54
 800f4a0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800f4a4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800f4a8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800f4aa:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800f4ae:	1b5b      	subs	r3, r3, r5
 800f4b0:	9311      	str	r3, [sp, #68]	@ 0x44
 800f4b2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800f4b6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800f4ba:	f001 fae5 	bl	8010a88 <__ulp>
 800f4be:	4650      	mov	r0, sl
 800f4c0:	ec53 2b10 	vmov	r2, r3, d0
 800f4c4:	4659      	mov	r1, fp
 800f4c6:	f7f1 f8a7 	bl	8000618 <__aeabi_dmul>
 800f4ca:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800f4ce:	f7f0 feed 	bl	80002ac <__adddf3>
 800f4d2:	4682      	mov	sl, r0
 800f4d4:	468b      	mov	fp, r1
 800f4d6:	e770      	b.n	800f3ba <_strtod_l+0xa62>
 800f4d8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800f4dc:	e7e0      	b.n	800f4a0 <_strtod_l+0xb48>
 800f4de:	a30e      	add	r3, pc, #56	@ (adr r3, 800f518 <_strtod_l+0xbc0>)
 800f4e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4e4:	f7f1 fb0a 	bl	8000afc <__aeabi_dcmplt>
 800f4e8:	e798      	b.n	800f41c <_strtod_l+0xac4>
 800f4ea:	2300      	movs	r3, #0
 800f4ec:	930e      	str	r3, [sp, #56]	@ 0x38
 800f4ee:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800f4f0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f4f2:	6013      	str	r3, [r2, #0]
 800f4f4:	f7ff ba6d 	b.w	800e9d2 <_strtod_l+0x7a>
 800f4f8:	2a65      	cmp	r2, #101	@ 0x65
 800f4fa:	f43f ab68 	beq.w	800ebce <_strtod_l+0x276>
 800f4fe:	2a45      	cmp	r2, #69	@ 0x45
 800f500:	f43f ab65 	beq.w	800ebce <_strtod_l+0x276>
 800f504:	2301      	movs	r3, #1
 800f506:	f7ff bba0 	b.w	800ec4a <_strtod_l+0x2f2>
 800f50a:	bf00      	nop
 800f50c:	f3af 8000 	nop.w
 800f510:	ffc00000 	.word	0xffc00000
 800f514:	41dfffff 	.word	0x41dfffff
 800f518:	94a03595 	.word	0x94a03595
 800f51c:	3fcfffff 	.word	0x3fcfffff

0800f520 <strtod>:
 800f520:	460a      	mov	r2, r1
 800f522:	4601      	mov	r1, r0
 800f524:	4802      	ldr	r0, [pc, #8]	@ (800f530 <strtod+0x10>)
 800f526:	4b03      	ldr	r3, [pc, #12]	@ (800f534 <strtod+0x14>)
 800f528:	6800      	ldr	r0, [r0, #0]
 800f52a:	f7ff ba15 	b.w	800e958 <_strtod_l>
 800f52e:	bf00      	nop
 800f530:	200001ac 	.word	0x200001ac
 800f534:	20000040 	.word	0x20000040

0800f538 <_strtol_l.isra.0>:
 800f538:	2b24      	cmp	r3, #36	@ 0x24
 800f53a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f53e:	4686      	mov	lr, r0
 800f540:	4690      	mov	r8, r2
 800f542:	d801      	bhi.n	800f548 <_strtol_l.isra.0+0x10>
 800f544:	2b01      	cmp	r3, #1
 800f546:	d106      	bne.n	800f556 <_strtol_l.isra.0+0x1e>
 800f548:	f000 faa0 	bl	800fa8c <__errno>
 800f54c:	2316      	movs	r3, #22
 800f54e:	6003      	str	r3, [r0, #0]
 800f550:	2000      	movs	r0, #0
 800f552:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f556:	4834      	ldr	r0, [pc, #208]	@ (800f628 <_strtol_l.isra.0+0xf0>)
 800f558:	460d      	mov	r5, r1
 800f55a:	462a      	mov	r2, r5
 800f55c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f560:	5d06      	ldrb	r6, [r0, r4]
 800f562:	f016 0608 	ands.w	r6, r6, #8
 800f566:	d1f8      	bne.n	800f55a <_strtol_l.isra.0+0x22>
 800f568:	2c2d      	cmp	r4, #45	@ 0x2d
 800f56a:	d110      	bne.n	800f58e <_strtol_l.isra.0+0x56>
 800f56c:	782c      	ldrb	r4, [r5, #0]
 800f56e:	2601      	movs	r6, #1
 800f570:	1c95      	adds	r5, r2, #2
 800f572:	f033 0210 	bics.w	r2, r3, #16
 800f576:	d115      	bne.n	800f5a4 <_strtol_l.isra.0+0x6c>
 800f578:	2c30      	cmp	r4, #48	@ 0x30
 800f57a:	d10d      	bne.n	800f598 <_strtol_l.isra.0+0x60>
 800f57c:	782a      	ldrb	r2, [r5, #0]
 800f57e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800f582:	2a58      	cmp	r2, #88	@ 0x58
 800f584:	d108      	bne.n	800f598 <_strtol_l.isra.0+0x60>
 800f586:	786c      	ldrb	r4, [r5, #1]
 800f588:	3502      	adds	r5, #2
 800f58a:	2310      	movs	r3, #16
 800f58c:	e00a      	b.n	800f5a4 <_strtol_l.isra.0+0x6c>
 800f58e:	2c2b      	cmp	r4, #43	@ 0x2b
 800f590:	bf04      	itt	eq
 800f592:	782c      	ldrbeq	r4, [r5, #0]
 800f594:	1c95      	addeq	r5, r2, #2
 800f596:	e7ec      	b.n	800f572 <_strtol_l.isra.0+0x3a>
 800f598:	2b00      	cmp	r3, #0
 800f59a:	d1f6      	bne.n	800f58a <_strtol_l.isra.0+0x52>
 800f59c:	2c30      	cmp	r4, #48	@ 0x30
 800f59e:	bf14      	ite	ne
 800f5a0:	230a      	movne	r3, #10
 800f5a2:	2308      	moveq	r3, #8
 800f5a4:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800f5a8:	f10c 3cff 	add.w	ip, ip, #4294967295
 800f5ac:	2200      	movs	r2, #0
 800f5ae:	fbbc f9f3 	udiv	r9, ip, r3
 800f5b2:	4610      	mov	r0, r2
 800f5b4:	fb03 ca19 	mls	sl, r3, r9, ip
 800f5b8:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800f5bc:	2f09      	cmp	r7, #9
 800f5be:	d80f      	bhi.n	800f5e0 <_strtol_l.isra.0+0xa8>
 800f5c0:	463c      	mov	r4, r7
 800f5c2:	42a3      	cmp	r3, r4
 800f5c4:	dd1b      	ble.n	800f5fe <_strtol_l.isra.0+0xc6>
 800f5c6:	1c57      	adds	r7, r2, #1
 800f5c8:	d007      	beq.n	800f5da <_strtol_l.isra.0+0xa2>
 800f5ca:	4581      	cmp	r9, r0
 800f5cc:	d314      	bcc.n	800f5f8 <_strtol_l.isra.0+0xc0>
 800f5ce:	d101      	bne.n	800f5d4 <_strtol_l.isra.0+0x9c>
 800f5d0:	45a2      	cmp	sl, r4
 800f5d2:	db11      	blt.n	800f5f8 <_strtol_l.isra.0+0xc0>
 800f5d4:	fb00 4003 	mla	r0, r0, r3, r4
 800f5d8:	2201      	movs	r2, #1
 800f5da:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f5de:	e7eb      	b.n	800f5b8 <_strtol_l.isra.0+0x80>
 800f5e0:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800f5e4:	2f19      	cmp	r7, #25
 800f5e6:	d801      	bhi.n	800f5ec <_strtol_l.isra.0+0xb4>
 800f5e8:	3c37      	subs	r4, #55	@ 0x37
 800f5ea:	e7ea      	b.n	800f5c2 <_strtol_l.isra.0+0x8a>
 800f5ec:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800f5f0:	2f19      	cmp	r7, #25
 800f5f2:	d804      	bhi.n	800f5fe <_strtol_l.isra.0+0xc6>
 800f5f4:	3c57      	subs	r4, #87	@ 0x57
 800f5f6:	e7e4      	b.n	800f5c2 <_strtol_l.isra.0+0x8a>
 800f5f8:	f04f 32ff 	mov.w	r2, #4294967295
 800f5fc:	e7ed      	b.n	800f5da <_strtol_l.isra.0+0xa2>
 800f5fe:	1c53      	adds	r3, r2, #1
 800f600:	d108      	bne.n	800f614 <_strtol_l.isra.0+0xdc>
 800f602:	2322      	movs	r3, #34	@ 0x22
 800f604:	f8ce 3000 	str.w	r3, [lr]
 800f608:	4660      	mov	r0, ip
 800f60a:	f1b8 0f00 	cmp.w	r8, #0
 800f60e:	d0a0      	beq.n	800f552 <_strtol_l.isra.0+0x1a>
 800f610:	1e69      	subs	r1, r5, #1
 800f612:	e006      	b.n	800f622 <_strtol_l.isra.0+0xea>
 800f614:	b106      	cbz	r6, 800f618 <_strtol_l.isra.0+0xe0>
 800f616:	4240      	negs	r0, r0
 800f618:	f1b8 0f00 	cmp.w	r8, #0
 800f61c:	d099      	beq.n	800f552 <_strtol_l.isra.0+0x1a>
 800f61e:	2a00      	cmp	r2, #0
 800f620:	d1f6      	bne.n	800f610 <_strtol_l.isra.0+0xd8>
 800f622:	f8c8 1000 	str.w	r1, [r8]
 800f626:	e794      	b.n	800f552 <_strtol_l.isra.0+0x1a>
 800f628:	08012161 	.word	0x08012161

0800f62c <strtol>:
 800f62c:	4613      	mov	r3, r2
 800f62e:	460a      	mov	r2, r1
 800f630:	4601      	mov	r1, r0
 800f632:	4802      	ldr	r0, [pc, #8]	@ (800f63c <strtol+0x10>)
 800f634:	6800      	ldr	r0, [r0, #0]
 800f636:	f7ff bf7f 	b.w	800f538 <_strtol_l.isra.0>
 800f63a:	bf00      	nop
 800f63c:	200001ac 	.word	0x200001ac

0800f640 <std>:
 800f640:	2300      	movs	r3, #0
 800f642:	b510      	push	{r4, lr}
 800f644:	4604      	mov	r4, r0
 800f646:	e9c0 3300 	strd	r3, r3, [r0]
 800f64a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f64e:	6083      	str	r3, [r0, #8]
 800f650:	8181      	strh	r1, [r0, #12]
 800f652:	6643      	str	r3, [r0, #100]	@ 0x64
 800f654:	81c2      	strh	r2, [r0, #14]
 800f656:	6183      	str	r3, [r0, #24]
 800f658:	4619      	mov	r1, r3
 800f65a:	2208      	movs	r2, #8
 800f65c:	305c      	adds	r0, #92	@ 0x5c
 800f65e:	f000 f943 	bl	800f8e8 <memset>
 800f662:	4b0d      	ldr	r3, [pc, #52]	@ (800f698 <std+0x58>)
 800f664:	6263      	str	r3, [r4, #36]	@ 0x24
 800f666:	4b0d      	ldr	r3, [pc, #52]	@ (800f69c <std+0x5c>)
 800f668:	62a3      	str	r3, [r4, #40]	@ 0x28
 800f66a:	4b0d      	ldr	r3, [pc, #52]	@ (800f6a0 <std+0x60>)
 800f66c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800f66e:	4b0d      	ldr	r3, [pc, #52]	@ (800f6a4 <std+0x64>)
 800f670:	6323      	str	r3, [r4, #48]	@ 0x30
 800f672:	4b0d      	ldr	r3, [pc, #52]	@ (800f6a8 <std+0x68>)
 800f674:	6224      	str	r4, [r4, #32]
 800f676:	429c      	cmp	r4, r3
 800f678:	d006      	beq.n	800f688 <std+0x48>
 800f67a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800f67e:	4294      	cmp	r4, r2
 800f680:	d002      	beq.n	800f688 <std+0x48>
 800f682:	33d0      	adds	r3, #208	@ 0xd0
 800f684:	429c      	cmp	r4, r3
 800f686:	d105      	bne.n	800f694 <std+0x54>
 800f688:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800f68c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f690:	f000 ba26 	b.w	800fae0 <__retarget_lock_init_recursive>
 800f694:	bd10      	pop	{r4, pc}
 800f696:	bf00      	nop
 800f698:	0800f7e9 	.word	0x0800f7e9
 800f69c:	0800f80b 	.word	0x0800f80b
 800f6a0:	0800f843 	.word	0x0800f843
 800f6a4:	0800f867 	.word	0x0800f867
 800f6a8:	20003d3c 	.word	0x20003d3c

0800f6ac <stdio_exit_handler>:
 800f6ac:	4a02      	ldr	r2, [pc, #8]	@ (800f6b8 <stdio_exit_handler+0xc>)
 800f6ae:	4903      	ldr	r1, [pc, #12]	@ (800f6bc <stdio_exit_handler+0x10>)
 800f6b0:	4803      	ldr	r0, [pc, #12]	@ (800f6c0 <stdio_exit_handler+0x14>)
 800f6b2:	f000 b869 	b.w	800f788 <_fwalk_sglue>
 800f6b6:	bf00      	nop
 800f6b8:	20000034 	.word	0x20000034
 800f6bc:	08011671 	.word	0x08011671
 800f6c0:	200001b0 	.word	0x200001b0

0800f6c4 <cleanup_stdio>:
 800f6c4:	6841      	ldr	r1, [r0, #4]
 800f6c6:	4b0c      	ldr	r3, [pc, #48]	@ (800f6f8 <cleanup_stdio+0x34>)
 800f6c8:	4299      	cmp	r1, r3
 800f6ca:	b510      	push	{r4, lr}
 800f6cc:	4604      	mov	r4, r0
 800f6ce:	d001      	beq.n	800f6d4 <cleanup_stdio+0x10>
 800f6d0:	f001 ffce 	bl	8011670 <_fflush_r>
 800f6d4:	68a1      	ldr	r1, [r4, #8]
 800f6d6:	4b09      	ldr	r3, [pc, #36]	@ (800f6fc <cleanup_stdio+0x38>)
 800f6d8:	4299      	cmp	r1, r3
 800f6da:	d002      	beq.n	800f6e2 <cleanup_stdio+0x1e>
 800f6dc:	4620      	mov	r0, r4
 800f6de:	f001 ffc7 	bl	8011670 <_fflush_r>
 800f6e2:	68e1      	ldr	r1, [r4, #12]
 800f6e4:	4b06      	ldr	r3, [pc, #24]	@ (800f700 <cleanup_stdio+0x3c>)
 800f6e6:	4299      	cmp	r1, r3
 800f6e8:	d004      	beq.n	800f6f4 <cleanup_stdio+0x30>
 800f6ea:	4620      	mov	r0, r4
 800f6ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f6f0:	f001 bfbe 	b.w	8011670 <_fflush_r>
 800f6f4:	bd10      	pop	{r4, pc}
 800f6f6:	bf00      	nop
 800f6f8:	20003d3c 	.word	0x20003d3c
 800f6fc:	20003da4 	.word	0x20003da4
 800f700:	20003e0c 	.word	0x20003e0c

0800f704 <global_stdio_init.part.0>:
 800f704:	b510      	push	{r4, lr}
 800f706:	4b0b      	ldr	r3, [pc, #44]	@ (800f734 <global_stdio_init.part.0+0x30>)
 800f708:	4c0b      	ldr	r4, [pc, #44]	@ (800f738 <global_stdio_init.part.0+0x34>)
 800f70a:	4a0c      	ldr	r2, [pc, #48]	@ (800f73c <global_stdio_init.part.0+0x38>)
 800f70c:	601a      	str	r2, [r3, #0]
 800f70e:	4620      	mov	r0, r4
 800f710:	2200      	movs	r2, #0
 800f712:	2104      	movs	r1, #4
 800f714:	f7ff ff94 	bl	800f640 <std>
 800f718:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800f71c:	2201      	movs	r2, #1
 800f71e:	2109      	movs	r1, #9
 800f720:	f7ff ff8e 	bl	800f640 <std>
 800f724:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800f728:	2202      	movs	r2, #2
 800f72a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f72e:	2112      	movs	r1, #18
 800f730:	f7ff bf86 	b.w	800f640 <std>
 800f734:	20003e74 	.word	0x20003e74
 800f738:	20003d3c 	.word	0x20003d3c
 800f73c:	0800f6ad 	.word	0x0800f6ad

0800f740 <__sfp_lock_acquire>:
 800f740:	4801      	ldr	r0, [pc, #4]	@ (800f748 <__sfp_lock_acquire+0x8>)
 800f742:	f000 b9ce 	b.w	800fae2 <__retarget_lock_acquire_recursive>
 800f746:	bf00      	nop
 800f748:	20003e7d 	.word	0x20003e7d

0800f74c <__sfp_lock_release>:
 800f74c:	4801      	ldr	r0, [pc, #4]	@ (800f754 <__sfp_lock_release+0x8>)
 800f74e:	f000 b9c9 	b.w	800fae4 <__retarget_lock_release_recursive>
 800f752:	bf00      	nop
 800f754:	20003e7d 	.word	0x20003e7d

0800f758 <__sinit>:
 800f758:	b510      	push	{r4, lr}
 800f75a:	4604      	mov	r4, r0
 800f75c:	f7ff fff0 	bl	800f740 <__sfp_lock_acquire>
 800f760:	6a23      	ldr	r3, [r4, #32]
 800f762:	b11b      	cbz	r3, 800f76c <__sinit+0x14>
 800f764:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f768:	f7ff bff0 	b.w	800f74c <__sfp_lock_release>
 800f76c:	4b04      	ldr	r3, [pc, #16]	@ (800f780 <__sinit+0x28>)
 800f76e:	6223      	str	r3, [r4, #32]
 800f770:	4b04      	ldr	r3, [pc, #16]	@ (800f784 <__sinit+0x2c>)
 800f772:	681b      	ldr	r3, [r3, #0]
 800f774:	2b00      	cmp	r3, #0
 800f776:	d1f5      	bne.n	800f764 <__sinit+0xc>
 800f778:	f7ff ffc4 	bl	800f704 <global_stdio_init.part.0>
 800f77c:	e7f2      	b.n	800f764 <__sinit+0xc>
 800f77e:	bf00      	nop
 800f780:	0800f6c5 	.word	0x0800f6c5
 800f784:	20003e74 	.word	0x20003e74

0800f788 <_fwalk_sglue>:
 800f788:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f78c:	4607      	mov	r7, r0
 800f78e:	4688      	mov	r8, r1
 800f790:	4614      	mov	r4, r2
 800f792:	2600      	movs	r6, #0
 800f794:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f798:	f1b9 0901 	subs.w	r9, r9, #1
 800f79c:	d505      	bpl.n	800f7aa <_fwalk_sglue+0x22>
 800f79e:	6824      	ldr	r4, [r4, #0]
 800f7a0:	2c00      	cmp	r4, #0
 800f7a2:	d1f7      	bne.n	800f794 <_fwalk_sglue+0xc>
 800f7a4:	4630      	mov	r0, r6
 800f7a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f7aa:	89ab      	ldrh	r3, [r5, #12]
 800f7ac:	2b01      	cmp	r3, #1
 800f7ae:	d907      	bls.n	800f7c0 <_fwalk_sglue+0x38>
 800f7b0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f7b4:	3301      	adds	r3, #1
 800f7b6:	d003      	beq.n	800f7c0 <_fwalk_sglue+0x38>
 800f7b8:	4629      	mov	r1, r5
 800f7ba:	4638      	mov	r0, r7
 800f7bc:	47c0      	blx	r8
 800f7be:	4306      	orrs	r6, r0
 800f7c0:	3568      	adds	r5, #104	@ 0x68
 800f7c2:	e7e9      	b.n	800f798 <_fwalk_sglue+0x10>

0800f7c4 <iprintf>:
 800f7c4:	b40f      	push	{r0, r1, r2, r3}
 800f7c6:	b507      	push	{r0, r1, r2, lr}
 800f7c8:	4906      	ldr	r1, [pc, #24]	@ (800f7e4 <iprintf+0x20>)
 800f7ca:	ab04      	add	r3, sp, #16
 800f7cc:	6808      	ldr	r0, [r1, #0]
 800f7ce:	f853 2b04 	ldr.w	r2, [r3], #4
 800f7d2:	6881      	ldr	r1, [r0, #8]
 800f7d4:	9301      	str	r3, [sp, #4]
 800f7d6:	f001 fc23 	bl	8011020 <_vfiprintf_r>
 800f7da:	b003      	add	sp, #12
 800f7dc:	f85d eb04 	ldr.w	lr, [sp], #4
 800f7e0:	b004      	add	sp, #16
 800f7e2:	4770      	bx	lr
 800f7e4:	200001ac 	.word	0x200001ac

0800f7e8 <__sread>:
 800f7e8:	b510      	push	{r4, lr}
 800f7ea:	460c      	mov	r4, r1
 800f7ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f7f0:	f000 f928 	bl	800fa44 <_read_r>
 800f7f4:	2800      	cmp	r0, #0
 800f7f6:	bfab      	itete	ge
 800f7f8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800f7fa:	89a3      	ldrhlt	r3, [r4, #12]
 800f7fc:	181b      	addge	r3, r3, r0
 800f7fe:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800f802:	bfac      	ite	ge
 800f804:	6563      	strge	r3, [r4, #84]	@ 0x54
 800f806:	81a3      	strhlt	r3, [r4, #12]
 800f808:	bd10      	pop	{r4, pc}

0800f80a <__swrite>:
 800f80a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f80e:	461f      	mov	r7, r3
 800f810:	898b      	ldrh	r3, [r1, #12]
 800f812:	05db      	lsls	r3, r3, #23
 800f814:	4605      	mov	r5, r0
 800f816:	460c      	mov	r4, r1
 800f818:	4616      	mov	r6, r2
 800f81a:	d505      	bpl.n	800f828 <__swrite+0x1e>
 800f81c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f820:	2302      	movs	r3, #2
 800f822:	2200      	movs	r2, #0
 800f824:	f000 f8fc 	bl	800fa20 <_lseek_r>
 800f828:	89a3      	ldrh	r3, [r4, #12]
 800f82a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f82e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800f832:	81a3      	strh	r3, [r4, #12]
 800f834:	4632      	mov	r2, r6
 800f836:	463b      	mov	r3, r7
 800f838:	4628      	mov	r0, r5
 800f83a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f83e:	f000 b913 	b.w	800fa68 <_write_r>

0800f842 <__sseek>:
 800f842:	b510      	push	{r4, lr}
 800f844:	460c      	mov	r4, r1
 800f846:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f84a:	f000 f8e9 	bl	800fa20 <_lseek_r>
 800f84e:	1c43      	adds	r3, r0, #1
 800f850:	89a3      	ldrh	r3, [r4, #12]
 800f852:	bf15      	itete	ne
 800f854:	6560      	strne	r0, [r4, #84]	@ 0x54
 800f856:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800f85a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800f85e:	81a3      	strheq	r3, [r4, #12]
 800f860:	bf18      	it	ne
 800f862:	81a3      	strhne	r3, [r4, #12]
 800f864:	bd10      	pop	{r4, pc}

0800f866 <__sclose>:
 800f866:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f86a:	f000 b86b 	b.w	800f944 <_close_r>

0800f86e <_vsniprintf_r>:
 800f86e:	b530      	push	{r4, r5, lr}
 800f870:	4614      	mov	r4, r2
 800f872:	2c00      	cmp	r4, #0
 800f874:	b09b      	sub	sp, #108	@ 0x6c
 800f876:	4605      	mov	r5, r0
 800f878:	461a      	mov	r2, r3
 800f87a:	da05      	bge.n	800f888 <_vsniprintf_r+0x1a>
 800f87c:	238b      	movs	r3, #139	@ 0x8b
 800f87e:	6003      	str	r3, [r0, #0]
 800f880:	f04f 30ff 	mov.w	r0, #4294967295
 800f884:	b01b      	add	sp, #108	@ 0x6c
 800f886:	bd30      	pop	{r4, r5, pc}
 800f888:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800f88c:	f8ad 300c 	strh.w	r3, [sp, #12]
 800f890:	f04f 0300 	mov.w	r3, #0
 800f894:	9319      	str	r3, [sp, #100]	@ 0x64
 800f896:	bf14      	ite	ne
 800f898:	f104 33ff 	addne.w	r3, r4, #4294967295
 800f89c:	4623      	moveq	r3, r4
 800f89e:	9302      	str	r3, [sp, #8]
 800f8a0:	9305      	str	r3, [sp, #20]
 800f8a2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800f8a6:	9100      	str	r1, [sp, #0]
 800f8a8:	9104      	str	r1, [sp, #16]
 800f8aa:	f8ad 300e 	strh.w	r3, [sp, #14]
 800f8ae:	4669      	mov	r1, sp
 800f8b0:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800f8b2:	f001 fa8f 	bl	8010dd4 <_svfiprintf_r>
 800f8b6:	1c43      	adds	r3, r0, #1
 800f8b8:	bfbc      	itt	lt
 800f8ba:	238b      	movlt	r3, #139	@ 0x8b
 800f8bc:	602b      	strlt	r3, [r5, #0]
 800f8be:	2c00      	cmp	r4, #0
 800f8c0:	d0e0      	beq.n	800f884 <_vsniprintf_r+0x16>
 800f8c2:	9b00      	ldr	r3, [sp, #0]
 800f8c4:	2200      	movs	r2, #0
 800f8c6:	701a      	strb	r2, [r3, #0]
 800f8c8:	e7dc      	b.n	800f884 <_vsniprintf_r+0x16>
	...

0800f8cc <vsniprintf>:
 800f8cc:	b507      	push	{r0, r1, r2, lr}
 800f8ce:	9300      	str	r3, [sp, #0]
 800f8d0:	4613      	mov	r3, r2
 800f8d2:	460a      	mov	r2, r1
 800f8d4:	4601      	mov	r1, r0
 800f8d6:	4803      	ldr	r0, [pc, #12]	@ (800f8e4 <vsniprintf+0x18>)
 800f8d8:	6800      	ldr	r0, [r0, #0]
 800f8da:	f7ff ffc8 	bl	800f86e <_vsniprintf_r>
 800f8de:	b003      	add	sp, #12
 800f8e0:	f85d fb04 	ldr.w	pc, [sp], #4
 800f8e4:	200001ac 	.word	0x200001ac

0800f8e8 <memset>:
 800f8e8:	4402      	add	r2, r0
 800f8ea:	4603      	mov	r3, r0
 800f8ec:	4293      	cmp	r3, r2
 800f8ee:	d100      	bne.n	800f8f2 <memset+0xa>
 800f8f0:	4770      	bx	lr
 800f8f2:	f803 1b01 	strb.w	r1, [r3], #1
 800f8f6:	e7f9      	b.n	800f8ec <memset+0x4>

0800f8f8 <strncmp>:
 800f8f8:	b510      	push	{r4, lr}
 800f8fa:	b16a      	cbz	r2, 800f918 <strncmp+0x20>
 800f8fc:	3901      	subs	r1, #1
 800f8fe:	1884      	adds	r4, r0, r2
 800f900:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f904:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800f908:	429a      	cmp	r2, r3
 800f90a:	d103      	bne.n	800f914 <strncmp+0x1c>
 800f90c:	42a0      	cmp	r0, r4
 800f90e:	d001      	beq.n	800f914 <strncmp+0x1c>
 800f910:	2a00      	cmp	r2, #0
 800f912:	d1f5      	bne.n	800f900 <strncmp+0x8>
 800f914:	1ad0      	subs	r0, r2, r3
 800f916:	bd10      	pop	{r4, pc}
 800f918:	4610      	mov	r0, r2
 800f91a:	e7fc      	b.n	800f916 <strncmp+0x1e>

0800f91c <strncpy>:
 800f91c:	b510      	push	{r4, lr}
 800f91e:	3901      	subs	r1, #1
 800f920:	4603      	mov	r3, r0
 800f922:	b132      	cbz	r2, 800f932 <strncpy+0x16>
 800f924:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800f928:	f803 4b01 	strb.w	r4, [r3], #1
 800f92c:	3a01      	subs	r2, #1
 800f92e:	2c00      	cmp	r4, #0
 800f930:	d1f7      	bne.n	800f922 <strncpy+0x6>
 800f932:	441a      	add	r2, r3
 800f934:	2100      	movs	r1, #0
 800f936:	4293      	cmp	r3, r2
 800f938:	d100      	bne.n	800f93c <strncpy+0x20>
 800f93a:	bd10      	pop	{r4, pc}
 800f93c:	f803 1b01 	strb.w	r1, [r3], #1
 800f940:	e7f9      	b.n	800f936 <strncpy+0x1a>
	...

0800f944 <_close_r>:
 800f944:	b538      	push	{r3, r4, r5, lr}
 800f946:	4d06      	ldr	r5, [pc, #24]	@ (800f960 <_close_r+0x1c>)
 800f948:	2300      	movs	r3, #0
 800f94a:	4604      	mov	r4, r0
 800f94c:	4608      	mov	r0, r1
 800f94e:	602b      	str	r3, [r5, #0]
 800f950:	f7f3 f8d2 	bl	8002af8 <_close>
 800f954:	1c43      	adds	r3, r0, #1
 800f956:	d102      	bne.n	800f95e <_close_r+0x1a>
 800f958:	682b      	ldr	r3, [r5, #0]
 800f95a:	b103      	cbz	r3, 800f95e <_close_r+0x1a>
 800f95c:	6023      	str	r3, [r4, #0]
 800f95e:	bd38      	pop	{r3, r4, r5, pc}
 800f960:	20003e78 	.word	0x20003e78

0800f964 <_reclaim_reent>:
 800f964:	4b2d      	ldr	r3, [pc, #180]	@ (800fa1c <_reclaim_reent+0xb8>)
 800f966:	681b      	ldr	r3, [r3, #0]
 800f968:	4283      	cmp	r3, r0
 800f96a:	b570      	push	{r4, r5, r6, lr}
 800f96c:	4604      	mov	r4, r0
 800f96e:	d053      	beq.n	800fa18 <_reclaim_reent+0xb4>
 800f970:	69c3      	ldr	r3, [r0, #28]
 800f972:	b31b      	cbz	r3, 800f9bc <_reclaim_reent+0x58>
 800f974:	68db      	ldr	r3, [r3, #12]
 800f976:	b163      	cbz	r3, 800f992 <_reclaim_reent+0x2e>
 800f978:	2500      	movs	r5, #0
 800f97a:	69e3      	ldr	r3, [r4, #28]
 800f97c:	68db      	ldr	r3, [r3, #12]
 800f97e:	5959      	ldr	r1, [r3, r5]
 800f980:	b9b1      	cbnz	r1, 800f9b0 <_reclaim_reent+0x4c>
 800f982:	3504      	adds	r5, #4
 800f984:	2d80      	cmp	r5, #128	@ 0x80
 800f986:	d1f8      	bne.n	800f97a <_reclaim_reent+0x16>
 800f988:	69e3      	ldr	r3, [r4, #28]
 800f98a:	4620      	mov	r0, r4
 800f98c:	68d9      	ldr	r1, [r3, #12]
 800f98e:	f000 f8cb 	bl	800fb28 <_free_r>
 800f992:	69e3      	ldr	r3, [r4, #28]
 800f994:	6819      	ldr	r1, [r3, #0]
 800f996:	b111      	cbz	r1, 800f99e <_reclaim_reent+0x3a>
 800f998:	4620      	mov	r0, r4
 800f99a:	f000 f8c5 	bl	800fb28 <_free_r>
 800f99e:	69e3      	ldr	r3, [r4, #28]
 800f9a0:	689d      	ldr	r5, [r3, #8]
 800f9a2:	b15d      	cbz	r5, 800f9bc <_reclaim_reent+0x58>
 800f9a4:	4629      	mov	r1, r5
 800f9a6:	4620      	mov	r0, r4
 800f9a8:	682d      	ldr	r5, [r5, #0]
 800f9aa:	f000 f8bd 	bl	800fb28 <_free_r>
 800f9ae:	e7f8      	b.n	800f9a2 <_reclaim_reent+0x3e>
 800f9b0:	680e      	ldr	r6, [r1, #0]
 800f9b2:	4620      	mov	r0, r4
 800f9b4:	f000 f8b8 	bl	800fb28 <_free_r>
 800f9b8:	4631      	mov	r1, r6
 800f9ba:	e7e1      	b.n	800f980 <_reclaim_reent+0x1c>
 800f9bc:	6961      	ldr	r1, [r4, #20]
 800f9be:	b111      	cbz	r1, 800f9c6 <_reclaim_reent+0x62>
 800f9c0:	4620      	mov	r0, r4
 800f9c2:	f000 f8b1 	bl	800fb28 <_free_r>
 800f9c6:	69e1      	ldr	r1, [r4, #28]
 800f9c8:	b111      	cbz	r1, 800f9d0 <_reclaim_reent+0x6c>
 800f9ca:	4620      	mov	r0, r4
 800f9cc:	f000 f8ac 	bl	800fb28 <_free_r>
 800f9d0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800f9d2:	b111      	cbz	r1, 800f9da <_reclaim_reent+0x76>
 800f9d4:	4620      	mov	r0, r4
 800f9d6:	f000 f8a7 	bl	800fb28 <_free_r>
 800f9da:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f9dc:	b111      	cbz	r1, 800f9e4 <_reclaim_reent+0x80>
 800f9de:	4620      	mov	r0, r4
 800f9e0:	f000 f8a2 	bl	800fb28 <_free_r>
 800f9e4:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800f9e6:	b111      	cbz	r1, 800f9ee <_reclaim_reent+0x8a>
 800f9e8:	4620      	mov	r0, r4
 800f9ea:	f000 f89d 	bl	800fb28 <_free_r>
 800f9ee:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800f9f0:	b111      	cbz	r1, 800f9f8 <_reclaim_reent+0x94>
 800f9f2:	4620      	mov	r0, r4
 800f9f4:	f000 f898 	bl	800fb28 <_free_r>
 800f9f8:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800f9fa:	b111      	cbz	r1, 800fa02 <_reclaim_reent+0x9e>
 800f9fc:	4620      	mov	r0, r4
 800f9fe:	f000 f893 	bl	800fb28 <_free_r>
 800fa02:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800fa04:	b111      	cbz	r1, 800fa0c <_reclaim_reent+0xa8>
 800fa06:	4620      	mov	r0, r4
 800fa08:	f000 f88e 	bl	800fb28 <_free_r>
 800fa0c:	6a23      	ldr	r3, [r4, #32]
 800fa0e:	b11b      	cbz	r3, 800fa18 <_reclaim_reent+0xb4>
 800fa10:	4620      	mov	r0, r4
 800fa12:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fa16:	4718      	bx	r3
 800fa18:	bd70      	pop	{r4, r5, r6, pc}
 800fa1a:	bf00      	nop
 800fa1c:	200001ac 	.word	0x200001ac

0800fa20 <_lseek_r>:
 800fa20:	b538      	push	{r3, r4, r5, lr}
 800fa22:	4d07      	ldr	r5, [pc, #28]	@ (800fa40 <_lseek_r+0x20>)
 800fa24:	4604      	mov	r4, r0
 800fa26:	4608      	mov	r0, r1
 800fa28:	4611      	mov	r1, r2
 800fa2a:	2200      	movs	r2, #0
 800fa2c:	602a      	str	r2, [r5, #0]
 800fa2e:	461a      	mov	r2, r3
 800fa30:	f7f3 f889 	bl	8002b46 <_lseek>
 800fa34:	1c43      	adds	r3, r0, #1
 800fa36:	d102      	bne.n	800fa3e <_lseek_r+0x1e>
 800fa38:	682b      	ldr	r3, [r5, #0]
 800fa3a:	b103      	cbz	r3, 800fa3e <_lseek_r+0x1e>
 800fa3c:	6023      	str	r3, [r4, #0]
 800fa3e:	bd38      	pop	{r3, r4, r5, pc}
 800fa40:	20003e78 	.word	0x20003e78

0800fa44 <_read_r>:
 800fa44:	b538      	push	{r3, r4, r5, lr}
 800fa46:	4d07      	ldr	r5, [pc, #28]	@ (800fa64 <_read_r+0x20>)
 800fa48:	4604      	mov	r4, r0
 800fa4a:	4608      	mov	r0, r1
 800fa4c:	4611      	mov	r1, r2
 800fa4e:	2200      	movs	r2, #0
 800fa50:	602a      	str	r2, [r5, #0]
 800fa52:	461a      	mov	r2, r3
 800fa54:	f7f3 f817 	bl	8002a86 <_read>
 800fa58:	1c43      	adds	r3, r0, #1
 800fa5a:	d102      	bne.n	800fa62 <_read_r+0x1e>
 800fa5c:	682b      	ldr	r3, [r5, #0]
 800fa5e:	b103      	cbz	r3, 800fa62 <_read_r+0x1e>
 800fa60:	6023      	str	r3, [r4, #0]
 800fa62:	bd38      	pop	{r3, r4, r5, pc}
 800fa64:	20003e78 	.word	0x20003e78

0800fa68 <_write_r>:
 800fa68:	b538      	push	{r3, r4, r5, lr}
 800fa6a:	4d07      	ldr	r5, [pc, #28]	@ (800fa88 <_write_r+0x20>)
 800fa6c:	4604      	mov	r4, r0
 800fa6e:	4608      	mov	r0, r1
 800fa70:	4611      	mov	r1, r2
 800fa72:	2200      	movs	r2, #0
 800fa74:	602a      	str	r2, [r5, #0]
 800fa76:	461a      	mov	r2, r3
 800fa78:	f7f3 f822 	bl	8002ac0 <_write>
 800fa7c:	1c43      	adds	r3, r0, #1
 800fa7e:	d102      	bne.n	800fa86 <_write_r+0x1e>
 800fa80:	682b      	ldr	r3, [r5, #0]
 800fa82:	b103      	cbz	r3, 800fa86 <_write_r+0x1e>
 800fa84:	6023      	str	r3, [r4, #0]
 800fa86:	bd38      	pop	{r3, r4, r5, pc}
 800fa88:	20003e78 	.word	0x20003e78

0800fa8c <__errno>:
 800fa8c:	4b01      	ldr	r3, [pc, #4]	@ (800fa94 <__errno+0x8>)
 800fa8e:	6818      	ldr	r0, [r3, #0]
 800fa90:	4770      	bx	lr
 800fa92:	bf00      	nop
 800fa94:	200001ac 	.word	0x200001ac

0800fa98 <__libc_init_array>:
 800fa98:	b570      	push	{r4, r5, r6, lr}
 800fa9a:	4d0d      	ldr	r5, [pc, #52]	@ (800fad0 <__libc_init_array+0x38>)
 800fa9c:	4c0d      	ldr	r4, [pc, #52]	@ (800fad4 <__libc_init_array+0x3c>)
 800fa9e:	1b64      	subs	r4, r4, r5
 800faa0:	10a4      	asrs	r4, r4, #2
 800faa2:	2600      	movs	r6, #0
 800faa4:	42a6      	cmp	r6, r4
 800faa6:	d109      	bne.n	800fabc <__libc_init_array+0x24>
 800faa8:	4d0b      	ldr	r5, [pc, #44]	@ (800fad8 <__libc_init_array+0x40>)
 800faaa:	4c0c      	ldr	r4, [pc, #48]	@ (800fadc <__libc_init_array+0x44>)
 800faac:	f002 f91a 	bl	8011ce4 <_init>
 800fab0:	1b64      	subs	r4, r4, r5
 800fab2:	10a4      	asrs	r4, r4, #2
 800fab4:	2600      	movs	r6, #0
 800fab6:	42a6      	cmp	r6, r4
 800fab8:	d105      	bne.n	800fac6 <__libc_init_array+0x2e>
 800faba:	bd70      	pop	{r4, r5, r6, pc}
 800fabc:	f855 3b04 	ldr.w	r3, [r5], #4
 800fac0:	4798      	blx	r3
 800fac2:	3601      	adds	r6, #1
 800fac4:	e7ee      	b.n	800faa4 <__libc_init_array+0xc>
 800fac6:	f855 3b04 	ldr.w	r3, [r5], #4
 800faca:	4798      	blx	r3
 800facc:	3601      	adds	r6, #1
 800face:	e7f2      	b.n	800fab6 <__libc_init_array+0x1e>
 800fad0:	08012378 	.word	0x08012378
 800fad4:	08012378 	.word	0x08012378
 800fad8:	08012378 	.word	0x08012378
 800fadc:	0801237c 	.word	0x0801237c

0800fae0 <__retarget_lock_init_recursive>:
 800fae0:	4770      	bx	lr

0800fae2 <__retarget_lock_acquire_recursive>:
 800fae2:	4770      	bx	lr

0800fae4 <__retarget_lock_release_recursive>:
 800fae4:	4770      	bx	lr

0800fae6 <strcpy>:
 800fae6:	4603      	mov	r3, r0
 800fae8:	f811 2b01 	ldrb.w	r2, [r1], #1
 800faec:	f803 2b01 	strb.w	r2, [r3], #1
 800faf0:	2a00      	cmp	r2, #0
 800faf2:	d1f9      	bne.n	800fae8 <strcpy+0x2>
 800faf4:	4770      	bx	lr

0800faf6 <memcpy>:
 800faf6:	440a      	add	r2, r1
 800faf8:	4291      	cmp	r1, r2
 800fafa:	f100 33ff 	add.w	r3, r0, #4294967295
 800fafe:	d100      	bne.n	800fb02 <memcpy+0xc>
 800fb00:	4770      	bx	lr
 800fb02:	b510      	push	{r4, lr}
 800fb04:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fb08:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fb0c:	4291      	cmp	r1, r2
 800fb0e:	d1f9      	bne.n	800fb04 <memcpy+0xe>
 800fb10:	bd10      	pop	{r4, pc}
 800fb12:	0000      	movs	r0, r0
 800fb14:	0000      	movs	r0, r0
	...

0800fb18 <nan>:
 800fb18:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800fb20 <nan+0x8>
 800fb1c:	4770      	bx	lr
 800fb1e:	bf00      	nop
 800fb20:	00000000 	.word	0x00000000
 800fb24:	7ff80000 	.word	0x7ff80000

0800fb28 <_free_r>:
 800fb28:	b538      	push	{r3, r4, r5, lr}
 800fb2a:	4605      	mov	r5, r0
 800fb2c:	2900      	cmp	r1, #0
 800fb2e:	d041      	beq.n	800fbb4 <_free_r+0x8c>
 800fb30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fb34:	1f0c      	subs	r4, r1, #4
 800fb36:	2b00      	cmp	r3, #0
 800fb38:	bfb8      	it	lt
 800fb3a:	18e4      	addlt	r4, r4, r3
 800fb3c:	f000 fc2c 	bl	8010398 <__malloc_lock>
 800fb40:	4a1d      	ldr	r2, [pc, #116]	@ (800fbb8 <_free_r+0x90>)
 800fb42:	6813      	ldr	r3, [r2, #0]
 800fb44:	b933      	cbnz	r3, 800fb54 <_free_r+0x2c>
 800fb46:	6063      	str	r3, [r4, #4]
 800fb48:	6014      	str	r4, [r2, #0]
 800fb4a:	4628      	mov	r0, r5
 800fb4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fb50:	f000 bc28 	b.w	80103a4 <__malloc_unlock>
 800fb54:	42a3      	cmp	r3, r4
 800fb56:	d908      	bls.n	800fb6a <_free_r+0x42>
 800fb58:	6820      	ldr	r0, [r4, #0]
 800fb5a:	1821      	adds	r1, r4, r0
 800fb5c:	428b      	cmp	r3, r1
 800fb5e:	bf01      	itttt	eq
 800fb60:	6819      	ldreq	r1, [r3, #0]
 800fb62:	685b      	ldreq	r3, [r3, #4]
 800fb64:	1809      	addeq	r1, r1, r0
 800fb66:	6021      	streq	r1, [r4, #0]
 800fb68:	e7ed      	b.n	800fb46 <_free_r+0x1e>
 800fb6a:	461a      	mov	r2, r3
 800fb6c:	685b      	ldr	r3, [r3, #4]
 800fb6e:	b10b      	cbz	r3, 800fb74 <_free_r+0x4c>
 800fb70:	42a3      	cmp	r3, r4
 800fb72:	d9fa      	bls.n	800fb6a <_free_r+0x42>
 800fb74:	6811      	ldr	r1, [r2, #0]
 800fb76:	1850      	adds	r0, r2, r1
 800fb78:	42a0      	cmp	r0, r4
 800fb7a:	d10b      	bne.n	800fb94 <_free_r+0x6c>
 800fb7c:	6820      	ldr	r0, [r4, #0]
 800fb7e:	4401      	add	r1, r0
 800fb80:	1850      	adds	r0, r2, r1
 800fb82:	4283      	cmp	r3, r0
 800fb84:	6011      	str	r1, [r2, #0]
 800fb86:	d1e0      	bne.n	800fb4a <_free_r+0x22>
 800fb88:	6818      	ldr	r0, [r3, #0]
 800fb8a:	685b      	ldr	r3, [r3, #4]
 800fb8c:	6053      	str	r3, [r2, #4]
 800fb8e:	4408      	add	r0, r1
 800fb90:	6010      	str	r0, [r2, #0]
 800fb92:	e7da      	b.n	800fb4a <_free_r+0x22>
 800fb94:	d902      	bls.n	800fb9c <_free_r+0x74>
 800fb96:	230c      	movs	r3, #12
 800fb98:	602b      	str	r3, [r5, #0]
 800fb9a:	e7d6      	b.n	800fb4a <_free_r+0x22>
 800fb9c:	6820      	ldr	r0, [r4, #0]
 800fb9e:	1821      	adds	r1, r4, r0
 800fba0:	428b      	cmp	r3, r1
 800fba2:	bf04      	itt	eq
 800fba4:	6819      	ldreq	r1, [r3, #0]
 800fba6:	685b      	ldreq	r3, [r3, #4]
 800fba8:	6063      	str	r3, [r4, #4]
 800fbaa:	bf04      	itt	eq
 800fbac:	1809      	addeq	r1, r1, r0
 800fbae:	6021      	streq	r1, [r4, #0]
 800fbb0:	6054      	str	r4, [r2, #4]
 800fbb2:	e7ca      	b.n	800fb4a <_free_r+0x22>
 800fbb4:	bd38      	pop	{r3, r4, r5, pc}
 800fbb6:	bf00      	nop
 800fbb8:	20003e84 	.word	0x20003e84

0800fbbc <rshift>:
 800fbbc:	6903      	ldr	r3, [r0, #16]
 800fbbe:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800fbc2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fbc6:	ea4f 1261 	mov.w	r2, r1, asr #5
 800fbca:	f100 0414 	add.w	r4, r0, #20
 800fbce:	dd45      	ble.n	800fc5c <rshift+0xa0>
 800fbd0:	f011 011f 	ands.w	r1, r1, #31
 800fbd4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800fbd8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800fbdc:	d10c      	bne.n	800fbf8 <rshift+0x3c>
 800fbde:	f100 0710 	add.w	r7, r0, #16
 800fbe2:	4629      	mov	r1, r5
 800fbe4:	42b1      	cmp	r1, r6
 800fbe6:	d334      	bcc.n	800fc52 <rshift+0x96>
 800fbe8:	1a9b      	subs	r3, r3, r2
 800fbea:	009b      	lsls	r3, r3, #2
 800fbec:	1eea      	subs	r2, r5, #3
 800fbee:	4296      	cmp	r6, r2
 800fbf0:	bf38      	it	cc
 800fbf2:	2300      	movcc	r3, #0
 800fbf4:	4423      	add	r3, r4
 800fbf6:	e015      	b.n	800fc24 <rshift+0x68>
 800fbf8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800fbfc:	f1c1 0820 	rsb	r8, r1, #32
 800fc00:	40cf      	lsrs	r7, r1
 800fc02:	f105 0e04 	add.w	lr, r5, #4
 800fc06:	46a1      	mov	r9, r4
 800fc08:	4576      	cmp	r6, lr
 800fc0a:	46f4      	mov	ip, lr
 800fc0c:	d815      	bhi.n	800fc3a <rshift+0x7e>
 800fc0e:	1a9a      	subs	r2, r3, r2
 800fc10:	0092      	lsls	r2, r2, #2
 800fc12:	3a04      	subs	r2, #4
 800fc14:	3501      	adds	r5, #1
 800fc16:	42ae      	cmp	r6, r5
 800fc18:	bf38      	it	cc
 800fc1a:	2200      	movcc	r2, #0
 800fc1c:	18a3      	adds	r3, r4, r2
 800fc1e:	50a7      	str	r7, [r4, r2]
 800fc20:	b107      	cbz	r7, 800fc24 <rshift+0x68>
 800fc22:	3304      	adds	r3, #4
 800fc24:	1b1a      	subs	r2, r3, r4
 800fc26:	42a3      	cmp	r3, r4
 800fc28:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800fc2c:	bf08      	it	eq
 800fc2e:	2300      	moveq	r3, #0
 800fc30:	6102      	str	r2, [r0, #16]
 800fc32:	bf08      	it	eq
 800fc34:	6143      	streq	r3, [r0, #20]
 800fc36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fc3a:	f8dc c000 	ldr.w	ip, [ip]
 800fc3e:	fa0c fc08 	lsl.w	ip, ip, r8
 800fc42:	ea4c 0707 	orr.w	r7, ip, r7
 800fc46:	f849 7b04 	str.w	r7, [r9], #4
 800fc4a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800fc4e:	40cf      	lsrs	r7, r1
 800fc50:	e7da      	b.n	800fc08 <rshift+0x4c>
 800fc52:	f851 cb04 	ldr.w	ip, [r1], #4
 800fc56:	f847 cf04 	str.w	ip, [r7, #4]!
 800fc5a:	e7c3      	b.n	800fbe4 <rshift+0x28>
 800fc5c:	4623      	mov	r3, r4
 800fc5e:	e7e1      	b.n	800fc24 <rshift+0x68>

0800fc60 <__hexdig_fun>:
 800fc60:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800fc64:	2b09      	cmp	r3, #9
 800fc66:	d802      	bhi.n	800fc6e <__hexdig_fun+0xe>
 800fc68:	3820      	subs	r0, #32
 800fc6a:	b2c0      	uxtb	r0, r0
 800fc6c:	4770      	bx	lr
 800fc6e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800fc72:	2b05      	cmp	r3, #5
 800fc74:	d801      	bhi.n	800fc7a <__hexdig_fun+0x1a>
 800fc76:	3847      	subs	r0, #71	@ 0x47
 800fc78:	e7f7      	b.n	800fc6a <__hexdig_fun+0xa>
 800fc7a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800fc7e:	2b05      	cmp	r3, #5
 800fc80:	d801      	bhi.n	800fc86 <__hexdig_fun+0x26>
 800fc82:	3827      	subs	r0, #39	@ 0x27
 800fc84:	e7f1      	b.n	800fc6a <__hexdig_fun+0xa>
 800fc86:	2000      	movs	r0, #0
 800fc88:	4770      	bx	lr
	...

0800fc8c <__gethex>:
 800fc8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc90:	b085      	sub	sp, #20
 800fc92:	468a      	mov	sl, r1
 800fc94:	9302      	str	r3, [sp, #8]
 800fc96:	680b      	ldr	r3, [r1, #0]
 800fc98:	9001      	str	r0, [sp, #4]
 800fc9a:	4690      	mov	r8, r2
 800fc9c:	1c9c      	adds	r4, r3, #2
 800fc9e:	46a1      	mov	r9, r4
 800fca0:	f814 0b01 	ldrb.w	r0, [r4], #1
 800fca4:	2830      	cmp	r0, #48	@ 0x30
 800fca6:	d0fa      	beq.n	800fc9e <__gethex+0x12>
 800fca8:	eba9 0303 	sub.w	r3, r9, r3
 800fcac:	f1a3 0b02 	sub.w	fp, r3, #2
 800fcb0:	f7ff ffd6 	bl	800fc60 <__hexdig_fun>
 800fcb4:	4605      	mov	r5, r0
 800fcb6:	2800      	cmp	r0, #0
 800fcb8:	d168      	bne.n	800fd8c <__gethex+0x100>
 800fcba:	49a0      	ldr	r1, [pc, #640]	@ (800ff3c <__gethex+0x2b0>)
 800fcbc:	2201      	movs	r2, #1
 800fcbe:	4648      	mov	r0, r9
 800fcc0:	f7ff fe1a 	bl	800f8f8 <strncmp>
 800fcc4:	4607      	mov	r7, r0
 800fcc6:	2800      	cmp	r0, #0
 800fcc8:	d167      	bne.n	800fd9a <__gethex+0x10e>
 800fcca:	f899 0001 	ldrb.w	r0, [r9, #1]
 800fcce:	4626      	mov	r6, r4
 800fcd0:	f7ff ffc6 	bl	800fc60 <__hexdig_fun>
 800fcd4:	2800      	cmp	r0, #0
 800fcd6:	d062      	beq.n	800fd9e <__gethex+0x112>
 800fcd8:	4623      	mov	r3, r4
 800fcda:	7818      	ldrb	r0, [r3, #0]
 800fcdc:	2830      	cmp	r0, #48	@ 0x30
 800fcde:	4699      	mov	r9, r3
 800fce0:	f103 0301 	add.w	r3, r3, #1
 800fce4:	d0f9      	beq.n	800fcda <__gethex+0x4e>
 800fce6:	f7ff ffbb 	bl	800fc60 <__hexdig_fun>
 800fcea:	fab0 f580 	clz	r5, r0
 800fcee:	096d      	lsrs	r5, r5, #5
 800fcf0:	f04f 0b01 	mov.w	fp, #1
 800fcf4:	464a      	mov	r2, r9
 800fcf6:	4616      	mov	r6, r2
 800fcf8:	3201      	adds	r2, #1
 800fcfa:	7830      	ldrb	r0, [r6, #0]
 800fcfc:	f7ff ffb0 	bl	800fc60 <__hexdig_fun>
 800fd00:	2800      	cmp	r0, #0
 800fd02:	d1f8      	bne.n	800fcf6 <__gethex+0x6a>
 800fd04:	498d      	ldr	r1, [pc, #564]	@ (800ff3c <__gethex+0x2b0>)
 800fd06:	2201      	movs	r2, #1
 800fd08:	4630      	mov	r0, r6
 800fd0a:	f7ff fdf5 	bl	800f8f8 <strncmp>
 800fd0e:	2800      	cmp	r0, #0
 800fd10:	d13f      	bne.n	800fd92 <__gethex+0x106>
 800fd12:	b944      	cbnz	r4, 800fd26 <__gethex+0x9a>
 800fd14:	1c74      	adds	r4, r6, #1
 800fd16:	4622      	mov	r2, r4
 800fd18:	4616      	mov	r6, r2
 800fd1a:	3201      	adds	r2, #1
 800fd1c:	7830      	ldrb	r0, [r6, #0]
 800fd1e:	f7ff ff9f 	bl	800fc60 <__hexdig_fun>
 800fd22:	2800      	cmp	r0, #0
 800fd24:	d1f8      	bne.n	800fd18 <__gethex+0x8c>
 800fd26:	1ba4      	subs	r4, r4, r6
 800fd28:	00a7      	lsls	r7, r4, #2
 800fd2a:	7833      	ldrb	r3, [r6, #0]
 800fd2c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800fd30:	2b50      	cmp	r3, #80	@ 0x50
 800fd32:	d13e      	bne.n	800fdb2 <__gethex+0x126>
 800fd34:	7873      	ldrb	r3, [r6, #1]
 800fd36:	2b2b      	cmp	r3, #43	@ 0x2b
 800fd38:	d033      	beq.n	800fda2 <__gethex+0x116>
 800fd3a:	2b2d      	cmp	r3, #45	@ 0x2d
 800fd3c:	d034      	beq.n	800fda8 <__gethex+0x11c>
 800fd3e:	1c71      	adds	r1, r6, #1
 800fd40:	2400      	movs	r4, #0
 800fd42:	7808      	ldrb	r0, [r1, #0]
 800fd44:	f7ff ff8c 	bl	800fc60 <__hexdig_fun>
 800fd48:	1e43      	subs	r3, r0, #1
 800fd4a:	b2db      	uxtb	r3, r3
 800fd4c:	2b18      	cmp	r3, #24
 800fd4e:	d830      	bhi.n	800fdb2 <__gethex+0x126>
 800fd50:	f1a0 0210 	sub.w	r2, r0, #16
 800fd54:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800fd58:	f7ff ff82 	bl	800fc60 <__hexdig_fun>
 800fd5c:	f100 3cff 	add.w	ip, r0, #4294967295
 800fd60:	fa5f fc8c 	uxtb.w	ip, ip
 800fd64:	f1bc 0f18 	cmp.w	ip, #24
 800fd68:	f04f 030a 	mov.w	r3, #10
 800fd6c:	d91e      	bls.n	800fdac <__gethex+0x120>
 800fd6e:	b104      	cbz	r4, 800fd72 <__gethex+0xe6>
 800fd70:	4252      	negs	r2, r2
 800fd72:	4417      	add	r7, r2
 800fd74:	f8ca 1000 	str.w	r1, [sl]
 800fd78:	b1ed      	cbz	r5, 800fdb6 <__gethex+0x12a>
 800fd7a:	f1bb 0f00 	cmp.w	fp, #0
 800fd7e:	bf0c      	ite	eq
 800fd80:	2506      	moveq	r5, #6
 800fd82:	2500      	movne	r5, #0
 800fd84:	4628      	mov	r0, r5
 800fd86:	b005      	add	sp, #20
 800fd88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd8c:	2500      	movs	r5, #0
 800fd8e:	462c      	mov	r4, r5
 800fd90:	e7b0      	b.n	800fcf4 <__gethex+0x68>
 800fd92:	2c00      	cmp	r4, #0
 800fd94:	d1c7      	bne.n	800fd26 <__gethex+0x9a>
 800fd96:	4627      	mov	r7, r4
 800fd98:	e7c7      	b.n	800fd2a <__gethex+0x9e>
 800fd9a:	464e      	mov	r6, r9
 800fd9c:	462f      	mov	r7, r5
 800fd9e:	2501      	movs	r5, #1
 800fda0:	e7c3      	b.n	800fd2a <__gethex+0x9e>
 800fda2:	2400      	movs	r4, #0
 800fda4:	1cb1      	adds	r1, r6, #2
 800fda6:	e7cc      	b.n	800fd42 <__gethex+0xb6>
 800fda8:	2401      	movs	r4, #1
 800fdaa:	e7fb      	b.n	800fda4 <__gethex+0x118>
 800fdac:	fb03 0002 	mla	r0, r3, r2, r0
 800fdb0:	e7ce      	b.n	800fd50 <__gethex+0xc4>
 800fdb2:	4631      	mov	r1, r6
 800fdb4:	e7de      	b.n	800fd74 <__gethex+0xe8>
 800fdb6:	eba6 0309 	sub.w	r3, r6, r9
 800fdba:	3b01      	subs	r3, #1
 800fdbc:	4629      	mov	r1, r5
 800fdbe:	2b07      	cmp	r3, #7
 800fdc0:	dc0a      	bgt.n	800fdd8 <__gethex+0x14c>
 800fdc2:	9801      	ldr	r0, [sp, #4]
 800fdc4:	f000 faf4 	bl	80103b0 <_Balloc>
 800fdc8:	4604      	mov	r4, r0
 800fdca:	b940      	cbnz	r0, 800fdde <__gethex+0x152>
 800fdcc:	4b5c      	ldr	r3, [pc, #368]	@ (800ff40 <__gethex+0x2b4>)
 800fdce:	4602      	mov	r2, r0
 800fdd0:	21e4      	movs	r1, #228	@ 0xe4
 800fdd2:	485c      	ldr	r0, [pc, #368]	@ (800ff44 <__gethex+0x2b8>)
 800fdd4:	f001 fd32 	bl	801183c <__assert_func>
 800fdd8:	3101      	adds	r1, #1
 800fdda:	105b      	asrs	r3, r3, #1
 800fddc:	e7ef      	b.n	800fdbe <__gethex+0x132>
 800fdde:	f100 0a14 	add.w	sl, r0, #20
 800fde2:	2300      	movs	r3, #0
 800fde4:	4655      	mov	r5, sl
 800fde6:	469b      	mov	fp, r3
 800fde8:	45b1      	cmp	r9, r6
 800fdea:	d337      	bcc.n	800fe5c <__gethex+0x1d0>
 800fdec:	f845 bb04 	str.w	fp, [r5], #4
 800fdf0:	eba5 050a 	sub.w	r5, r5, sl
 800fdf4:	10ad      	asrs	r5, r5, #2
 800fdf6:	6125      	str	r5, [r4, #16]
 800fdf8:	4658      	mov	r0, fp
 800fdfa:	f000 fbcb 	bl	8010594 <__hi0bits>
 800fdfe:	016d      	lsls	r5, r5, #5
 800fe00:	f8d8 6000 	ldr.w	r6, [r8]
 800fe04:	1a2d      	subs	r5, r5, r0
 800fe06:	42b5      	cmp	r5, r6
 800fe08:	dd54      	ble.n	800feb4 <__gethex+0x228>
 800fe0a:	1bad      	subs	r5, r5, r6
 800fe0c:	4629      	mov	r1, r5
 800fe0e:	4620      	mov	r0, r4
 800fe10:	f000 ff57 	bl	8010cc2 <__any_on>
 800fe14:	4681      	mov	r9, r0
 800fe16:	b178      	cbz	r0, 800fe38 <__gethex+0x1ac>
 800fe18:	1e6b      	subs	r3, r5, #1
 800fe1a:	1159      	asrs	r1, r3, #5
 800fe1c:	f003 021f 	and.w	r2, r3, #31
 800fe20:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800fe24:	f04f 0901 	mov.w	r9, #1
 800fe28:	fa09 f202 	lsl.w	r2, r9, r2
 800fe2c:	420a      	tst	r2, r1
 800fe2e:	d003      	beq.n	800fe38 <__gethex+0x1ac>
 800fe30:	454b      	cmp	r3, r9
 800fe32:	dc36      	bgt.n	800fea2 <__gethex+0x216>
 800fe34:	f04f 0902 	mov.w	r9, #2
 800fe38:	4629      	mov	r1, r5
 800fe3a:	4620      	mov	r0, r4
 800fe3c:	f7ff febe 	bl	800fbbc <rshift>
 800fe40:	442f      	add	r7, r5
 800fe42:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800fe46:	42bb      	cmp	r3, r7
 800fe48:	da42      	bge.n	800fed0 <__gethex+0x244>
 800fe4a:	9801      	ldr	r0, [sp, #4]
 800fe4c:	4621      	mov	r1, r4
 800fe4e:	f000 faef 	bl	8010430 <_Bfree>
 800fe52:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800fe54:	2300      	movs	r3, #0
 800fe56:	6013      	str	r3, [r2, #0]
 800fe58:	25a3      	movs	r5, #163	@ 0xa3
 800fe5a:	e793      	b.n	800fd84 <__gethex+0xf8>
 800fe5c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800fe60:	2a2e      	cmp	r2, #46	@ 0x2e
 800fe62:	d012      	beq.n	800fe8a <__gethex+0x1fe>
 800fe64:	2b20      	cmp	r3, #32
 800fe66:	d104      	bne.n	800fe72 <__gethex+0x1e6>
 800fe68:	f845 bb04 	str.w	fp, [r5], #4
 800fe6c:	f04f 0b00 	mov.w	fp, #0
 800fe70:	465b      	mov	r3, fp
 800fe72:	7830      	ldrb	r0, [r6, #0]
 800fe74:	9303      	str	r3, [sp, #12]
 800fe76:	f7ff fef3 	bl	800fc60 <__hexdig_fun>
 800fe7a:	9b03      	ldr	r3, [sp, #12]
 800fe7c:	f000 000f 	and.w	r0, r0, #15
 800fe80:	4098      	lsls	r0, r3
 800fe82:	ea4b 0b00 	orr.w	fp, fp, r0
 800fe86:	3304      	adds	r3, #4
 800fe88:	e7ae      	b.n	800fde8 <__gethex+0x15c>
 800fe8a:	45b1      	cmp	r9, r6
 800fe8c:	d8ea      	bhi.n	800fe64 <__gethex+0x1d8>
 800fe8e:	492b      	ldr	r1, [pc, #172]	@ (800ff3c <__gethex+0x2b0>)
 800fe90:	9303      	str	r3, [sp, #12]
 800fe92:	2201      	movs	r2, #1
 800fe94:	4630      	mov	r0, r6
 800fe96:	f7ff fd2f 	bl	800f8f8 <strncmp>
 800fe9a:	9b03      	ldr	r3, [sp, #12]
 800fe9c:	2800      	cmp	r0, #0
 800fe9e:	d1e1      	bne.n	800fe64 <__gethex+0x1d8>
 800fea0:	e7a2      	b.n	800fde8 <__gethex+0x15c>
 800fea2:	1ea9      	subs	r1, r5, #2
 800fea4:	4620      	mov	r0, r4
 800fea6:	f000 ff0c 	bl	8010cc2 <__any_on>
 800feaa:	2800      	cmp	r0, #0
 800feac:	d0c2      	beq.n	800fe34 <__gethex+0x1a8>
 800feae:	f04f 0903 	mov.w	r9, #3
 800feb2:	e7c1      	b.n	800fe38 <__gethex+0x1ac>
 800feb4:	da09      	bge.n	800feca <__gethex+0x23e>
 800feb6:	1b75      	subs	r5, r6, r5
 800feb8:	4621      	mov	r1, r4
 800feba:	9801      	ldr	r0, [sp, #4]
 800febc:	462a      	mov	r2, r5
 800febe:	f000 fcc7 	bl	8010850 <__lshift>
 800fec2:	1b7f      	subs	r7, r7, r5
 800fec4:	4604      	mov	r4, r0
 800fec6:	f100 0a14 	add.w	sl, r0, #20
 800feca:	f04f 0900 	mov.w	r9, #0
 800fece:	e7b8      	b.n	800fe42 <__gethex+0x1b6>
 800fed0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800fed4:	42bd      	cmp	r5, r7
 800fed6:	dd6f      	ble.n	800ffb8 <__gethex+0x32c>
 800fed8:	1bed      	subs	r5, r5, r7
 800feda:	42ae      	cmp	r6, r5
 800fedc:	dc34      	bgt.n	800ff48 <__gethex+0x2bc>
 800fede:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800fee2:	2b02      	cmp	r3, #2
 800fee4:	d022      	beq.n	800ff2c <__gethex+0x2a0>
 800fee6:	2b03      	cmp	r3, #3
 800fee8:	d024      	beq.n	800ff34 <__gethex+0x2a8>
 800feea:	2b01      	cmp	r3, #1
 800feec:	d115      	bne.n	800ff1a <__gethex+0x28e>
 800feee:	42ae      	cmp	r6, r5
 800fef0:	d113      	bne.n	800ff1a <__gethex+0x28e>
 800fef2:	2e01      	cmp	r6, #1
 800fef4:	d10b      	bne.n	800ff0e <__gethex+0x282>
 800fef6:	9a02      	ldr	r2, [sp, #8]
 800fef8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800fefc:	6013      	str	r3, [r2, #0]
 800fefe:	2301      	movs	r3, #1
 800ff00:	6123      	str	r3, [r4, #16]
 800ff02:	f8ca 3000 	str.w	r3, [sl]
 800ff06:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ff08:	2562      	movs	r5, #98	@ 0x62
 800ff0a:	601c      	str	r4, [r3, #0]
 800ff0c:	e73a      	b.n	800fd84 <__gethex+0xf8>
 800ff0e:	1e71      	subs	r1, r6, #1
 800ff10:	4620      	mov	r0, r4
 800ff12:	f000 fed6 	bl	8010cc2 <__any_on>
 800ff16:	2800      	cmp	r0, #0
 800ff18:	d1ed      	bne.n	800fef6 <__gethex+0x26a>
 800ff1a:	9801      	ldr	r0, [sp, #4]
 800ff1c:	4621      	mov	r1, r4
 800ff1e:	f000 fa87 	bl	8010430 <_Bfree>
 800ff22:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ff24:	2300      	movs	r3, #0
 800ff26:	6013      	str	r3, [r2, #0]
 800ff28:	2550      	movs	r5, #80	@ 0x50
 800ff2a:	e72b      	b.n	800fd84 <__gethex+0xf8>
 800ff2c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ff2e:	2b00      	cmp	r3, #0
 800ff30:	d1f3      	bne.n	800ff1a <__gethex+0x28e>
 800ff32:	e7e0      	b.n	800fef6 <__gethex+0x26a>
 800ff34:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ff36:	2b00      	cmp	r3, #0
 800ff38:	d1dd      	bne.n	800fef6 <__gethex+0x26a>
 800ff3a:	e7ee      	b.n	800ff1a <__gethex+0x28e>
 800ff3c:	08011fa4 	.word	0x08011fa4
 800ff40:	08011fba 	.word	0x08011fba
 800ff44:	08011fcb 	.word	0x08011fcb
 800ff48:	1e6f      	subs	r7, r5, #1
 800ff4a:	f1b9 0f00 	cmp.w	r9, #0
 800ff4e:	d130      	bne.n	800ffb2 <__gethex+0x326>
 800ff50:	b127      	cbz	r7, 800ff5c <__gethex+0x2d0>
 800ff52:	4639      	mov	r1, r7
 800ff54:	4620      	mov	r0, r4
 800ff56:	f000 feb4 	bl	8010cc2 <__any_on>
 800ff5a:	4681      	mov	r9, r0
 800ff5c:	117a      	asrs	r2, r7, #5
 800ff5e:	2301      	movs	r3, #1
 800ff60:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800ff64:	f007 071f 	and.w	r7, r7, #31
 800ff68:	40bb      	lsls	r3, r7
 800ff6a:	4213      	tst	r3, r2
 800ff6c:	4629      	mov	r1, r5
 800ff6e:	4620      	mov	r0, r4
 800ff70:	bf18      	it	ne
 800ff72:	f049 0902 	orrne.w	r9, r9, #2
 800ff76:	f7ff fe21 	bl	800fbbc <rshift>
 800ff7a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800ff7e:	1b76      	subs	r6, r6, r5
 800ff80:	2502      	movs	r5, #2
 800ff82:	f1b9 0f00 	cmp.w	r9, #0
 800ff86:	d047      	beq.n	8010018 <__gethex+0x38c>
 800ff88:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ff8c:	2b02      	cmp	r3, #2
 800ff8e:	d015      	beq.n	800ffbc <__gethex+0x330>
 800ff90:	2b03      	cmp	r3, #3
 800ff92:	d017      	beq.n	800ffc4 <__gethex+0x338>
 800ff94:	2b01      	cmp	r3, #1
 800ff96:	d109      	bne.n	800ffac <__gethex+0x320>
 800ff98:	f019 0f02 	tst.w	r9, #2
 800ff9c:	d006      	beq.n	800ffac <__gethex+0x320>
 800ff9e:	f8da 3000 	ldr.w	r3, [sl]
 800ffa2:	ea49 0903 	orr.w	r9, r9, r3
 800ffa6:	f019 0f01 	tst.w	r9, #1
 800ffaa:	d10e      	bne.n	800ffca <__gethex+0x33e>
 800ffac:	f045 0510 	orr.w	r5, r5, #16
 800ffb0:	e032      	b.n	8010018 <__gethex+0x38c>
 800ffb2:	f04f 0901 	mov.w	r9, #1
 800ffb6:	e7d1      	b.n	800ff5c <__gethex+0x2d0>
 800ffb8:	2501      	movs	r5, #1
 800ffba:	e7e2      	b.n	800ff82 <__gethex+0x2f6>
 800ffbc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ffbe:	f1c3 0301 	rsb	r3, r3, #1
 800ffc2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ffc4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ffc6:	2b00      	cmp	r3, #0
 800ffc8:	d0f0      	beq.n	800ffac <__gethex+0x320>
 800ffca:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800ffce:	f104 0314 	add.w	r3, r4, #20
 800ffd2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800ffd6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800ffda:	f04f 0c00 	mov.w	ip, #0
 800ffde:	4618      	mov	r0, r3
 800ffe0:	f853 2b04 	ldr.w	r2, [r3], #4
 800ffe4:	f1b2 3fff 	cmp.w	r2, #4294967295
 800ffe8:	d01b      	beq.n	8010022 <__gethex+0x396>
 800ffea:	3201      	adds	r2, #1
 800ffec:	6002      	str	r2, [r0, #0]
 800ffee:	2d02      	cmp	r5, #2
 800fff0:	f104 0314 	add.w	r3, r4, #20
 800fff4:	d13c      	bne.n	8010070 <__gethex+0x3e4>
 800fff6:	f8d8 2000 	ldr.w	r2, [r8]
 800fffa:	3a01      	subs	r2, #1
 800fffc:	42b2      	cmp	r2, r6
 800fffe:	d109      	bne.n	8010014 <__gethex+0x388>
 8010000:	1171      	asrs	r1, r6, #5
 8010002:	2201      	movs	r2, #1
 8010004:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010008:	f006 061f 	and.w	r6, r6, #31
 801000c:	fa02 f606 	lsl.w	r6, r2, r6
 8010010:	421e      	tst	r6, r3
 8010012:	d13a      	bne.n	801008a <__gethex+0x3fe>
 8010014:	f045 0520 	orr.w	r5, r5, #32
 8010018:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801001a:	601c      	str	r4, [r3, #0]
 801001c:	9b02      	ldr	r3, [sp, #8]
 801001e:	601f      	str	r7, [r3, #0]
 8010020:	e6b0      	b.n	800fd84 <__gethex+0xf8>
 8010022:	4299      	cmp	r1, r3
 8010024:	f843 cc04 	str.w	ip, [r3, #-4]
 8010028:	d8d9      	bhi.n	800ffde <__gethex+0x352>
 801002a:	68a3      	ldr	r3, [r4, #8]
 801002c:	459b      	cmp	fp, r3
 801002e:	db17      	blt.n	8010060 <__gethex+0x3d4>
 8010030:	6861      	ldr	r1, [r4, #4]
 8010032:	9801      	ldr	r0, [sp, #4]
 8010034:	3101      	adds	r1, #1
 8010036:	f000 f9bb 	bl	80103b0 <_Balloc>
 801003a:	4681      	mov	r9, r0
 801003c:	b918      	cbnz	r0, 8010046 <__gethex+0x3ba>
 801003e:	4b1a      	ldr	r3, [pc, #104]	@ (80100a8 <__gethex+0x41c>)
 8010040:	4602      	mov	r2, r0
 8010042:	2184      	movs	r1, #132	@ 0x84
 8010044:	e6c5      	b.n	800fdd2 <__gethex+0x146>
 8010046:	6922      	ldr	r2, [r4, #16]
 8010048:	3202      	adds	r2, #2
 801004a:	f104 010c 	add.w	r1, r4, #12
 801004e:	0092      	lsls	r2, r2, #2
 8010050:	300c      	adds	r0, #12
 8010052:	f7ff fd50 	bl	800faf6 <memcpy>
 8010056:	4621      	mov	r1, r4
 8010058:	9801      	ldr	r0, [sp, #4]
 801005a:	f000 f9e9 	bl	8010430 <_Bfree>
 801005e:	464c      	mov	r4, r9
 8010060:	6923      	ldr	r3, [r4, #16]
 8010062:	1c5a      	adds	r2, r3, #1
 8010064:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8010068:	6122      	str	r2, [r4, #16]
 801006a:	2201      	movs	r2, #1
 801006c:	615a      	str	r2, [r3, #20]
 801006e:	e7be      	b.n	800ffee <__gethex+0x362>
 8010070:	6922      	ldr	r2, [r4, #16]
 8010072:	455a      	cmp	r2, fp
 8010074:	dd0b      	ble.n	801008e <__gethex+0x402>
 8010076:	2101      	movs	r1, #1
 8010078:	4620      	mov	r0, r4
 801007a:	f7ff fd9f 	bl	800fbbc <rshift>
 801007e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010082:	3701      	adds	r7, #1
 8010084:	42bb      	cmp	r3, r7
 8010086:	f6ff aee0 	blt.w	800fe4a <__gethex+0x1be>
 801008a:	2501      	movs	r5, #1
 801008c:	e7c2      	b.n	8010014 <__gethex+0x388>
 801008e:	f016 061f 	ands.w	r6, r6, #31
 8010092:	d0fa      	beq.n	801008a <__gethex+0x3fe>
 8010094:	4453      	add	r3, sl
 8010096:	f1c6 0620 	rsb	r6, r6, #32
 801009a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801009e:	f000 fa79 	bl	8010594 <__hi0bits>
 80100a2:	42b0      	cmp	r0, r6
 80100a4:	dbe7      	blt.n	8010076 <__gethex+0x3ea>
 80100a6:	e7f0      	b.n	801008a <__gethex+0x3fe>
 80100a8:	08011fba 	.word	0x08011fba

080100ac <L_shift>:
 80100ac:	f1c2 0208 	rsb	r2, r2, #8
 80100b0:	0092      	lsls	r2, r2, #2
 80100b2:	b570      	push	{r4, r5, r6, lr}
 80100b4:	f1c2 0620 	rsb	r6, r2, #32
 80100b8:	6843      	ldr	r3, [r0, #4]
 80100ba:	6804      	ldr	r4, [r0, #0]
 80100bc:	fa03 f506 	lsl.w	r5, r3, r6
 80100c0:	432c      	orrs	r4, r5
 80100c2:	40d3      	lsrs	r3, r2
 80100c4:	6004      	str	r4, [r0, #0]
 80100c6:	f840 3f04 	str.w	r3, [r0, #4]!
 80100ca:	4288      	cmp	r0, r1
 80100cc:	d3f4      	bcc.n	80100b8 <L_shift+0xc>
 80100ce:	bd70      	pop	{r4, r5, r6, pc}

080100d0 <__match>:
 80100d0:	b530      	push	{r4, r5, lr}
 80100d2:	6803      	ldr	r3, [r0, #0]
 80100d4:	3301      	adds	r3, #1
 80100d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80100da:	b914      	cbnz	r4, 80100e2 <__match+0x12>
 80100dc:	6003      	str	r3, [r0, #0]
 80100de:	2001      	movs	r0, #1
 80100e0:	bd30      	pop	{r4, r5, pc}
 80100e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80100e6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80100ea:	2d19      	cmp	r5, #25
 80100ec:	bf98      	it	ls
 80100ee:	3220      	addls	r2, #32
 80100f0:	42a2      	cmp	r2, r4
 80100f2:	d0f0      	beq.n	80100d6 <__match+0x6>
 80100f4:	2000      	movs	r0, #0
 80100f6:	e7f3      	b.n	80100e0 <__match+0x10>

080100f8 <__hexnan>:
 80100f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80100fc:	680b      	ldr	r3, [r1, #0]
 80100fe:	6801      	ldr	r1, [r0, #0]
 8010100:	115e      	asrs	r6, r3, #5
 8010102:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8010106:	f013 031f 	ands.w	r3, r3, #31
 801010a:	b087      	sub	sp, #28
 801010c:	bf18      	it	ne
 801010e:	3604      	addne	r6, #4
 8010110:	2500      	movs	r5, #0
 8010112:	1f37      	subs	r7, r6, #4
 8010114:	4682      	mov	sl, r0
 8010116:	4690      	mov	r8, r2
 8010118:	9301      	str	r3, [sp, #4]
 801011a:	f846 5c04 	str.w	r5, [r6, #-4]
 801011e:	46b9      	mov	r9, r7
 8010120:	463c      	mov	r4, r7
 8010122:	9502      	str	r5, [sp, #8]
 8010124:	46ab      	mov	fp, r5
 8010126:	784a      	ldrb	r2, [r1, #1]
 8010128:	1c4b      	adds	r3, r1, #1
 801012a:	9303      	str	r3, [sp, #12]
 801012c:	b342      	cbz	r2, 8010180 <__hexnan+0x88>
 801012e:	4610      	mov	r0, r2
 8010130:	9105      	str	r1, [sp, #20]
 8010132:	9204      	str	r2, [sp, #16]
 8010134:	f7ff fd94 	bl	800fc60 <__hexdig_fun>
 8010138:	2800      	cmp	r0, #0
 801013a:	d151      	bne.n	80101e0 <__hexnan+0xe8>
 801013c:	9a04      	ldr	r2, [sp, #16]
 801013e:	9905      	ldr	r1, [sp, #20]
 8010140:	2a20      	cmp	r2, #32
 8010142:	d818      	bhi.n	8010176 <__hexnan+0x7e>
 8010144:	9b02      	ldr	r3, [sp, #8]
 8010146:	459b      	cmp	fp, r3
 8010148:	dd13      	ble.n	8010172 <__hexnan+0x7a>
 801014a:	454c      	cmp	r4, r9
 801014c:	d206      	bcs.n	801015c <__hexnan+0x64>
 801014e:	2d07      	cmp	r5, #7
 8010150:	dc04      	bgt.n	801015c <__hexnan+0x64>
 8010152:	462a      	mov	r2, r5
 8010154:	4649      	mov	r1, r9
 8010156:	4620      	mov	r0, r4
 8010158:	f7ff ffa8 	bl	80100ac <L_shift>
 801015c:	4544      	cmp	r4, r8
 801015e:	d952      	bls.n	8010206 <__hexnan+0x10e>
 8010160:	2300      	movs	r3, #0
 8010162:	f1a4 0904 	sub.w	r9, r4, #4
 8010166:	f844 3c04 	str.w	r3, [r4, #-4]
 801016a:	f8cd b008 	str.w	fp, [sp, #8]
 801016e:	464c      	mov	r4, r9
 8010170:	461d      	mov	r5, r3
 8010172:	9903      	ldr	r1, [sp, #12]
 8010174:	e7d7      	b.n	8010126 <__hexnan+0x2e>
 8010176:	2a29      	cmp	r2, #41	@ 0x29
 8010178:	d157      	bne.n	801022a <__hexnan+0x132>
 801017a:	3102      	adds	r1, #2
 801017c:	f8ca 1000 	str.w	r1, [sl]
 8010180:	f1bb 0f00 	cmp.w	fp, #0
 8010184:	d051      	beq.n	801022a <__hexnan+0x132>
 8010186:	454c      	cmp	r4, r9
 8010188:	d206      	bcs.n	8010198 <__hexnan+0xa0>
 801018a:	2d07      	cmp	r5, #7
 801018c:	dc04      	bgt.n	8010198 <__hexnan+0xa0>
 801018e:	462a      	mov	r2, r5
 8010190:	4649      	mov	r1, r9
 8010192:	4620      	mov	r0, r4
 8010194:	f7ff ff8a 	bl	80100ac <L_shift>
 8010198:	4544      	cmp	r4, r8
 801019a:	d936      	bls.n	801020a <__hexnan+0x112>
 801019c:	f1a8 0204 	sub.w	r2, r8, #4
 80101a0:	4623      	mov	r3, r4
 80101a2:	f853 1b04 	ldr.w	r1, [r3], #4
 80101a6:	f842 1f04 	str.w	r1, [r2, #4]!
 80101aa:	429f      	cmp	r7, r3
 80101ac:	d2f9      	bcs.n	80101a2 <__hexnan+0xaa>
 80101ae:	1b3b      	subs	r3, r7, r4
 80101b0:	f023 0303 	bic.w	r3, r3, #3
 80101b4:	3304      	adds	r3, #4
 80101b6:	3401      	adds	r4, #1
 80101b8:	3e03      	subs	r6, #3
 80101ba:	42b4      	cmp	r4, r6
 80101bc:	bf88      	it	hi
 80101be:	2304      	movhi	r3, #4
 80101c0:	4443      	add	r3, r8
 80101c2:	2200      	movs	r2, #0
 80101c4:	f843 2b04 	str.w	r2, [r3], #4
 80101c8:	429f      	cmp	r7, r3
 80101ca:	d2fb      	bcs.n	80101c4 <__hexnan+0xcc>
 80101cc:	683b      	ldr	r3, [r7, #0]
 80101ce:	b91b      	cbnz	r3, 80101d8 <__hexnan+0xe0>
 80101d0:	4547      	cmp	r7, r8
 80101d2:	d128      	bne.n	8010226 <__hexnan+0x12e>
 80101d4:	2301      	movs	r3, #1
 80101d6:	603b      	str	r3, [r7, #0]
 80101d8:	2005      	movs	r0, #5
 80101da:	b007      	add	sp, #28
 80101dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80101e0:	3501      	adds	r5, #1
 80101e2:	2d08      	cmp	r5, #8
 80101e4:	f10b 0b01 	add.w	fp, fp, #1
 80101e8:	dd06      	ble.n	80101f8 <__hexnan+0x100>
 80101ea:	4544      	cmp	r4, r8
 80101ec:	d9c1      	bls.n	8010172 <__hexnan+0x7a>
 80101ee:	2300      	movs	r3, #0
 80101f0:	f844 3c04 	str.w	r3, [r4, #-4]
 80101f4:	2501      	movs	r5, #1
 80101f6:	3c04      	subs	r4, #4
 80101f8:	6822      	ldr	r2, [r4, #0]
 80101fa:	f000 000f 	and.w	r0, r0, #15
 80101fe:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8010202:	6020      	str	r0, [r4, #0]
 8010204:	e7b5      	b.n	8010172 <__hexnan+0x7a>
 8010206:	2508      	movs	r5, #8
 8010208:	e7b3      	b.n	8010172 <__hexnan+0x7a>
 801020a:	9b01      	ldr	r3, [sp, #4]
 801020c:	2b00      	cmp	r3, #0
 801020e:	d0dd      	beq.n	80101cc <__hexnan+0xd4>
 8010210:	f1c3 0320 	rsb	r3, r3, #32
 8010214:	f04f 32ff 	mov.w	r2, #4294967295
 8010218:	40da      	lsrs	r2, r3
 801021a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801021e:	4013      	ands	r3, r2
 8010220:	f846 3c04 	str.w	r3, [r6, #-4]
 8010224:	e7d2      	b.n	80101cc <__hexnan+0xd4>
 8010226:	3f04      	subs	r7, #4
 8010228:	e7d0      	b.n	80101cc <__hexnan+0xd4>
 801022a:	2004      	movs	r0, #4
 801022c:	e7d5      	b.n	80101da <__hexnan+0xe2>
	...

08010230 <sbrk_aligned>:
 8010230:	b570      	push	{r4, r5, r6, lr}
 8010232:	4e0f      	ldr	r6, [pc, #60]	@ (8010270 <sbrk_aligned+0x40>)
 8010234:	460c      	mov	r4, r1
 8010236:	6831      	ldr	r1, [r6, #0]
 8010238:	4605      	mov	r5, r0
 801023a:	b911      	cbnz	r1, 8010242 <sbrk_aligned+0x12>
 801023c:	f001 faee 	bl	801181c <_sbrk_r>
 8010240:	6030      	str	r0, [r6, #0]
 8010242:	4621      	mov	r1, r4
 8010244:	4628      	mov	r0, r5
 8010246:	f001 fae9 	bl	801181c <_sbrk_r>
 801024a:	1c43      	adds	r3, r0, #1
 801024c:	d103      	bne.n	8010256 <sbrk_aligned+0x26>
 801024e:	f04f 34ff 	mov.w	r4, #4294967295
 8010252:	4620      	mov	r0, r4
 8010254:	bd70      	pop	{r4, r5, r6, pc}
 8010256:	1cc4      	adds	r4, r0, #3
 8010258:	f024 0403 	bic.w	r4, r4, #3
 801025c:	42a0      	cmp	r0, r4
 801025e:	d0f8      	beq.n	8010252 <sbrk_aligned+0x22>
 8010260:	1a21      	subs	r1, r4, r0
 8010262:	4628      	mov	r0, r5
 8010264:	f001 fada 	bl	801181c <_sbrk_r>
 8010268:	3001      	adds	r0, #1
 801026a:	d1f2      	bne.n	8010252 <sbrk_aligned+0x22>
 801026c:	e7ef      	b.n	801024e <sbrk_aligned+0x1e>
 801026e:	bf00      	nop
 8010270:	20003e80 	.word	0x20003e80

08010274 <_malloc_r>:
 8010274:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010278:	1ccd      	adds	r5, r1, #3
 801027a:	f025 0503 	bic.w	r5, r5, #3
 801027e:	3508      	adds	r5, #8
 8010280:	2d0c      	cmp	r5, #12
 8010282:	bf38      	it	cc
 8010284:	250c      	movcc	r5, #12
 8010286:	2d00      	cmp	r5, #0
 8010288:	4606      	mov	r6, r0
 801028a:	db01      	blt.n	8010290 <_malloc_r+0x1c>
 801028c:	42a9      	cmp	r1, r5
 801028e:	d904      	bls.n	801029a <_malloc_r+0x26>
 8010290:	230c      	movs	r3, #12
 8010292:	6033      	str	r3, [r6, #0]
 8010294:	2000      	movs	r0, #0
 8010296:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801029a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8010370 <_malloc_r+0xfc>
 801029e:	f000 f87b 	bl	8010398 <__malloc_lock>
 80102a2:	f8d8 3000 	ldr.w	r3, [r8]
 80102a6:	461c      	mov	r4, r3
 80102a8:	bb44      	cbnz	r4, 80102fc <_malloc_r+0x88>
 80102aa:	4629      	mov	r1, r5
 80102ac:	4630      	mov	r0, r6
 80102ae:	f7ff ffbf 	bl	8010230 <sbrk_aligned>
 80102b2:	1c43      	adds	r3, r0, #1
 80102b4:	4604      	mov	r4, r0
 80102b6:	d158      	bne.n	801036a <_malloc_r+0xf6>
 80102b8:	f8d8 4000 	ldr.w	r4, [r8]
 80102bc:	4627      	mov	r7, r4
 80102be:	2f00      	cmp	r7, #0
 80102c0:	d143      	bne.n	801034a <_malloc_r+0xd6>
 80102c2:	2c00      	cmp	r4, #0
 80102c4:	d04b      	beq.n	801035e <_malloc_r+0xea>
 80102c6:	6823      	ldr	r3, [r4, #0]
 80102c8:	4639      	mov	r1, r7
 80102ca:	4630      	mov	r0, r6
 80102cc:	eb04 0903 	add.w	r9, r4, r3
 80102d0:	f001 faa4 	bl	801181c <_sbrk_r>
 80102d4:	4581      	cmp	r9, r0
 80102d6:	d142      	bne.n	801035e <_malloc_r+0xea>
 80102d8:	6821      	ldr	r1, [r4, #0]
 80102da:	1a6d      	subs	r5, r5, r1
 80102dc:	4629      	mov	r1, r5
 80102de:	4630      	mov	r0, r6
 80102e0:	f7ff ffa6 	bl	8010230 <sbrk_aligned>
 80102e4:	3001      	adds	r0, #1
 80102e6:	d03a      	beq.n	801035e <_malloc_r+0xea>
 80102e8:	6823      	ldr	r3, [r4, #0]
 80102ea:	442b      	add	r3, r5
 80102ec:	6023      	str	r3, [r4, #0]
 80102ee:	f8d8 3000 	ldr.w	r3, [r8]
 80102f2:	685a      	ldr	r2, [r3, #4]
 80102f4:	bb62      	cbnz	r2, 8010350 <_malloc_r+0xdc>
 80102f6:	f8c8 7000 	str.w	r7, [r8]
 80102fa:	e00f      	b.n	801031c <_malloc_r+0xa8>
 80102fc:	6822      	ldr	r2, [r4, #0]
 80102fe:	1b52      	subs	r2, r2, r5
 8010300:	d420      	bmi.n	8010344 <_malloc_r+0xd0>
 8010302:	2a0b      	cmp	r2, #11
 8010304:	d917      	bls.n	8010336 <_malloc_r+0xc2>
 8010306:	1961      	adds	r1, r4, r5
 8010308:	42a3      	cmp	r3, r4
 801030a:	6025      	str	r5, [r4, #0]
 801030c:	bf18      	it	ne
 801030e:	6059      	strne	r1, [r3, #4]
 8010310:	6863      	ldr	r3, [r4, #4]
 8010312:	bf08      	it	eq
 8010314:	f8c8 1000 	streq.w	r1, [r8]
 8010318:	5162      	str	r2, [r4, r5]
 801031a:	604b      	str	r3, [r1, #4]
 801031c:	4630      	mov	r0, r6
 801031e:	f000 f841 	bl	80103a4 <__malloc_unlock>
 8010322:	f104 000b 	add.w	r0, r4, #11
 8010326:	1d23      	adds	r3, r4, #4
 8010328:	f020 0007 	bic.w	r0, r0, #7
 801032c:	1ac2      	subs	r2, r0, r3
 801032e:	bf1c      	itt	ne
 8010330:	1a1b      	subne	r3, r3, r0
 8010332:	50a3      	strne	r3, [r4, r2]
 8010334:	e7af      	b.n	8010296 <_malloc_r+0x22>
 8010336:	6862      	ldr	r2, [r4, #4]
 8010338:	42a3      	cmp	r3, r4
 801033a:	bf0c      	ite	eq
 801033c:	f8c8 2000 	streq.w	r2, [r8]
 8010340:	605a      	strne	r2, [r3, #4]
 8010342:	e7eb      	b.n	801031c <_malloc_r+0xa8>
 8010344:	4623      	mov	r3, r4
 8010346:	6864      	ldr	r4, [r4, #4]
 8010348:	e7ae      	b.n	80102a8 <_malloc_r+0x34>
 801034a:	463c      	mov	r4, r7
 801034c:	687f      	ldr	r7, [r7, #4]
 801034e:	e7b6      	b.n	80102be <_malloc_r+0x4a>
 8010350:	461a      	mov	r2, r3
 8010352:	685b      	ldr	r3, [r3, #4]
 8010354:	42a3      	cmp	r3, r4
 8010356:	d1fb      	bne.n	8010350 <_malloc_r+0xdc>
 8010358:	2300      	movs	r3, #0
 801035a:	6053      	str	r3, [r2, #4]
 801035c:	e7de      	b.n	801031c <_malloc_r+0xa8>
 801035e:	230c      	movs	r3, #12
 8010360:	6033      	str	r3, [r6, #0]
 8010362:	4630      	mov	r0, r6
 8010364:	f000 f81e 	bl	80103a4 <__malloc_unlock>
 8010368:	e794      	b.n	8010294 <_malloc_r+0x20>
 801036a:	6005      	str	r5, [r0, #0]
 801036c:	e7d6      	b.n	801031c <_malloc_r+0xa8>
 801036e:	bf00      	nop
 8010370:	20003e84 	.word	0x20003e84

08010374 <__ascii_mbtowc>:
 8010374:	b082      	sub	sp, #8
 8010376:	b901      	cbnz	r1, 801037a <__ascii_mbtowc+0x6>
 8010378:	a901      	add	r1, sp, #4
 801037a:	b142      	cbz	r2, 801038e <__ascii_mbtowc+0x1a>
 801037c:	b14b      	cbz	r3, 8010392 <__ascii_mbtowc+0x1e>
 801037e:	7813      	ldrb	r3, [r2, #0]
 8010380:	600b      	str	r3, [r1, #0]
 8010382:	7812      	ldrb	r2, [r2, #0]
 8010384:	1e10      	subs	r0, r2, #0
 8010386:	bf18      	it	ne
 8010388:	2001      	movne	r0, #1
 801038a:	b002      	add	sp, #8
 801038c:	4770      	bx	lr
 801038e:	4610      	mov	r0, r2
 8010390:	e7fb      	b.n	801038a <__ascii_mbtowc+0x16>
 8010392:	f06f 0001 	mvn.w	r0, #1
 8010396:	e7f8      	b.n	801038a <__ascii_mbtowc+0x16>

08010398 <__malloc_lock>:
 8010398:	4801      	ldr	r0, [pc, #4]	@ (80103a0 <__malloc_lock+0x8>)
 801039a:	f7ff bba2 	b.w	800fae2 <__retarget_lock_acquire_recursive>
 801039e:	bf00      	nop
 80103a0:	20003e7c 	.word	0x20003e7c

080103a4 <__malloc_unlock>:
 80103a4:	4801      	ldr	r0, [pc, #4]	@ (80103ac <__malloc_unlock+0x8>)
 80103a6:	f7ff bb9d 	b.w	800fae4 <__retarget_lock_release_recursive>
 80103aa:	bf00      	nop
 80103ac:	20003e7c 	.word	0x20003e7c

080103b0 <_Balloc>:
 80103b0:	b570      	push	{r4, r5, r6, lr}
 80103b2:	69c6      	ldr	r6, [r0, #28]
 80103b4:	4604      	mov	r4, r0
 80103b6:	460d      	mov	r5, r1
 80103b8:	b976      	cbnz	r6, 80103d8 <_Balloc+0x28>
 80103ba:	2010      	movs	r0, #16
 80103bc:	f001 fa70 	bl	80118a0 <malloc>
 80103c0:	4602      	mov	r2, r0
 80103c2:	61e0      	str	r0, [r4, #28]
 80103c4:	b920      	cbnz	r0, 80103d0 <_Balloc+0x20>
 80103c6:	4b18      	ldr	r3, [pc, #96]	@ (8010428 <_Balloc+0x78>)
 80103c8:	4818      	ldr	r0, [pc, #96]	@ (801042c <_Balloc+0x7c>)
 80103ca:	216b      	movs	r1, #107	@ 0x6b
 80103cc:	f001 fa36 	bl	801183c <__assert_func>
 80103d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80103d4:	6006      	str	r6, [r0, #0]
 80103d6:	60c6      	str	r6, [r0, #12]
 80103d8:	69e6      	ldr	r6, [r4, #28]
 80103da:	68f3      	ldr	r3, [r6, #12]
 80103dc:	b183      	cbz	r3, 8010400 <_Balloc+0x50>
 80103de:	69e3      	ldr	r3, [r4, #28]
 80103e0:	68db      	ldr	r3, [r3, #12]
 80103e2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80103e6:	b9b8      	cbnz	r0, 8010418 <_Balloc+0x68>
 80103e8:	2101      	movs	r1, #1
 80103ea:	fa01 f605 	lsl.w	r6, r1, r5
 80103ee:	1d72      	adds	r2, r6, #5
 80103f0:	0092      	lsls	r2, r2, #2
 80103f2:	4620      	mov	r0, r4
 80103f4:	f001 fa40 	bl	8011878 <_calloc_r>
 80103f8:	b160      	cbz	r0, 8010414 <_Balloc+0x64>
 80103fa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80103fe:	e00e      	b.n	801041e <_Balloc+0x6e>
 8010400:	2221      	movs	r2, #33	@ 0x21
 8010402:	2104      	movs	r1, #4
 8010404:	4620      	mov	r0, r4
 8010406:	f001 fa37 	bl	8011878 <_calloc_r>
 801040a:	69e3      	ldr	r3, [r4, #28]
 801040c:	60f0      	str	r0, [r6, #12]
 801040e:	68db      	ldr	r3, [r3, #12]
 8010410:	2b00      	cmp	r3, #0
 8010412:	d1e4      	bne.n	80103de <_Balloc+0x2e>
 8010414:	2000      	movs	r0, #0
 8010416:	bd70      	pop	{r4, r5, r6, pc}
 8010418:	6802      	ldr	r2, [r0, #0]
 801041a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801041e:	2300      	movs	r3, #0
 8010420:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010424:	e7f7      	b.n	8010416 <_Balloc+0x66>
 8010426:	bf00      	nop
 8010428:	0801202b 	.word	0x0801202b
 801042c:	08012042 	.word	0x08012042

08010430 <_Bfree>:
 8010430:	b570      	push	{r4, r5, r6, lr}
 8010432:	69c6      	ldr	r6, [r0, #28]
 8010434:	4605      	mov	r5, r0
 8010436:	460c      	mov	r4, r1
 8010438:	b976      	cbnz	r6, 8010458 <_Bfree+0x28>
 801043a:	2010      	movs	r0, #16
 801043c:	f001 fa30 	bl	80118a0 <malloc>
 8010440:	4602      	mov	r2, r0
 8010442:	61e8      	str	r0, [r5, #28]
 8010444:	b920      	cbnz	r0, 8010450 <_Bfree+0x20>
 8010446:	4b09      	ldr	r3, [pc, #36]	@ (801046c <_Bfree+0x3c>)
 8010448:	4809      	ldr	r0, [pc, #36]	@ (8010470 <_Bfree+0x40>)
 801044a:	218f      	movs	r1, #143	@ 0x8f
 801044c:	f001 f9f6 	bl	801183c <__assert_func>
 8010450:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010454:	6006      	str	r6, [r0, #0]
 8010456:	60c6      	str	r6, [r0, #12]
 8010458:	b13c      	cbz	r4, 801046a <_Bfree+0x3a>
 801045a:	69eb      	ldr	r3, [r5, #28]
 801045c:	6862      	ldr	r2, [r4, #4]
 801045e:	68db      	ldr	r3, [r3, #12]
 8010460:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010464:	6021      	str	r1, [r4, #0]
 8010466:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801046a:	bd70      	pop	{r4, r5, r6, pc}
 801046c:	0801202b 	.word	0x0801202b
 8010470:	08012042 	.word	0x08012042

08010474 <__multadd>:
 8010474:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010478:	690d      	ldr	r5, [r1, #16]
 801047a:	4607      	mov	r7, r0
 801047c:	460c      	mov	r4, r1
 801047e:	461e      	mov	r6, r3
 8010480:	f101 0c14 	add.w	ip, r1, #20
 8010484:	2000      	movs	r0, #0
 8010486:	f8dc 3000 	ldr.w	r3, [ip]
 801048a:	b299      	uxth	r1, r3
 801048c:	fb02 6101 	mla	r1, r2, r1, r6
 8010490:	0c1e      	lsrs	r6, r3, #16
 8010492:	0c0b      	lsrs	r3, r1, #16
 8010494:	fb02 3306 	mla	r3, r2, r6, r3
 8010498:	b289      	uxth	r1, r1
 801049a:	3001      	adds	r0, #1
 801049c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80104a0:	4285      	cmp	r5, r0
 80104a2:	f84c 1b04 	str.w	r1, [ip], #4
 80104a6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80104aa:	dcec      	bgt.n	8010486 <__multadd+0x12>
 80104ac:	b30e      	cbz	r6, 80104f2 <__multadd+0x7e>
 80104ae:	68a3      	ldr	r3, [r4, #8]
 80104b0:	42ab      	cmp	r3, r5
 80104b2:	dc19      	bgt.n	80104e8 <__multadd+0x74>
 80104b4:	6861      	ldr	r1, [r4, #4]
 80104b6:	4638      	mov	r0, r7
 80104b8:	3101      	adds	r1, #1
 80104ba:	f7ff ff79 	bl	80103b0 <_Balloc>
 80104be:	4680      	mov	r8, r0
 80104c0:	b928      	cbnz	r0, 80104ce <__multadd+0x5a>
 80104c2:	4602      	mov	r2, r0
 80104c4:	4b0c      	ldr	r3, [pc, #48]	@ (80104f8 <__multadd+0x84>)
 80104c6:	480d      	ldr	r0, [pc, #52]	@ (80104fc <__multadd+0x88>)
 80104c8:	21ba      	movs	r1, #186	@ 0xba
 80104ca:	f001 f9b7 	bl	801183c <__assert_func>
 80104ce:	6922      	ldr	r2, [r4, #16]
 80104d0:	3202      	adds	r2, #2
 80104d2:	f104 010c 	add.w	r1, r4, #12
 80104d6:	0092      	lsls	r2, r2, #2
 80104d8:	300c      	adds	r0, #12
 80104da:	f7ff fb0c 	bl	800faf6 <memcpy>
 80104de:	4621      	mov	r1, r4
 80104e0:	4638      	mov	r0, r7
 80104e2:	f7ff ffa5 	bl	8010430 <_Bfree>
 80104e6:	4644      	mov	r4, r8
 80104e8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80104ec:	3501      	adds	r5, #1
 80104ee:	615e      	str	r6, [r3, #20]
 80104f0:	6125      	str	r5, [r4, #16]
 80104f2:	4620      	mov	r0, r4
 80104f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80104f8:	08011fba 	.word	0x08011fba
 80104fc:	08012042 	.word	0x08012042

08010500 <__s2b>:
 8010500:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010504:	460c      	mov	r4, r1
 8010506:	4615      	mov	r5, r2
 8010508:	461f      	mov	r7, r3
 801050a:	2209      	movs	r2, #9
 801050c:	3308      	adds	r3, #8
 801050e:	4606      	mov	r6, r0
 8010510:	fb93 f3f2 	sdiv	r3, r3, r2
 8010514:	2100      	movs	r1, #0
 8010516:	2201      	movs	r2, #1
 8010518:	429a      	cmp	r2, r3
 801051a:	db09      	blt.n	8010530 <__s2b+0x30>
 801051c:	4630      	mov	r0, r6
 801051e:	f7ff ff47 	bl	80103b0 <_Balloc>
 8010522:	b940      	cbnz	r0, 8010536 <__s2b+0x36>
 8010524:	4602      	mov	r2, r0
 8010526:	4b19      	ldr	r3, [pc, #100]	@ (801058c <__s2b+0x8c>)
 8010528:	4819      	ldr	r0, [pc, #100]	@ (8010590 <__s2b+0x90>)
 801052a:	21d3      	movs	r1, #211	@ 0xd3
 801052c:	f001 f986 	bl	801183c <__assert_func>
 8010530:	0052      	lsls	r2, r2, #1
 8010532:	3101      	adds	r1, #1
 8010534:	e7f0      	b.n	8010518 <__s2b+0x18>
 8010536:	9b08      	ldr	r3, [sp, #32]
 8010538:	6143      	str	r3, [r0, #20]
 801053a:	2d09      	cmp	r5, #9
 801053c:	f04f 0301 	mov.w	r3, #1
 8010540:	6103      	str	r3, [r0, #16]
 8010542:	dd16      	ble.n	8010572 <__s2b+0x72>
 8010544:	f104 0909 	add.w	r9, r4, #9
 8010548:	46c8      	mov	r8, r9
 801054a:	442c      	add	r4, r5
 801054c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8010550:	4601      	mov	r1, r0
 8010552:	3b30      	subs	r3, #48	@ 0x30
 8010554:	220a      	movs	r2, #10
 8010556:	4630      	mov	r0, r6
 8010558:	f7ff ff8c 	bl	8010474 <__multadd>
 801055c:	45a0      	cmp	r8, r4
 801055e:	d1f5      	bne.n	801054c <__s2b+0x4c>
 8010560:	f1a5 0408 	sub.w	r4, r5, #8
 8010564:	444c      	add	r4, r9
 8010566:	1b2d      	subs	r5, r5, r4
 8010568:	1963      	adds	r3, r4, r5
 801056a:	42bb      	cmp	r3, r7
 801056c:	db04      	blt.n	8010578 <__s2b+0x78>
 801056e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010572:	340a      	adds	r4, #10
 8010574:	2509      	movs	r5, #9
 8010576:	e7f6      	b.n	8010566 <__s2b+0x66>
 8010578:	f814 3b01 	ldrb.w	r3, [r4], #1
 801057c:	4601      	mov	r1, r0
 801057e:	3b30      	subs	r3, #48	@ 0x30
 8010580:	220a      	movs	r2, #10
 8010582:	4630      	mov	r0, r6
 8010584:	f7ff ff76 	bl	8010474 <__multadd>
 8010588:	e7ee      	b.n	8010568 <__s2b+0x68>
 801058a:	bf00      	nop
 801058c:	08011fba 	.word	0x08011fba
 8010590:	08012042 	.word	0x08012042

08010594 <__hi0bits>:
 8010594:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8010598:	4603      	mov	r3, r0
 801059a:	bf36      	itet	cc
 801059c:	0403      	lslcc	r3, r0, #16
 801059e:	2000      	movcs	r0, #0
 80105a0:	2010      	movcc	r0, #16
 80105a2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80105a6:	bf3c      	itt	cc
 80105a8:	021b      	lslcc	r3, r3, #8
 80105aa:	3008      	addcc	r0, #8
 80105ac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80105b0:	bf3c      	itt	cc
 80105b2:	011b      	lslcc	r3, r3, #4
 80105b4:	3004      	addcc	r0, #4
 80105b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80105ba:	bf3c      	itt	cc
 80105bc:	009b      	lslcc	r3, r3, #2
 80105be:	3002      	addcc	r0, #2
 80105c0:	2b00      	cmp	r3, #0
 80105c2:	db05      	blt.n	80105d0 <__hi0bits+0x3c>
 80105c4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80105c8:	f100 0001 	add.w	r0, r0, #1
 80105cc:	bf08      	it	eq
 80105ce:	2020      	moveq	r0, #32
 80105d0:	4770      	bx	lr

080105d2 <__lo0bits>:
 80105d2:	6803      	ldr	r3, [r0, #0]
 80105d4:	4602      	mov	r2, r0
 80105d6:	f013 0007 	ands.w	r0, r3, #7
 80105da:	d00b      	beq.n	80105f4 <__lo0bits+0x22>
 80105dc:	07d9      	lsls	r1, r3, #31
 80105de:	d421      	bmi.n	8010624 <__lo0bits+0x52>
 80105e0:	0798      	lsls	r0, r3, #30
 80105e2:	bf49      	itett	mi
 80105e4:	085b      	lsrmi	r3, r3, #1
 80105e6:	089b      	lsrpl	r3, r3, #2
 80105e8:	2001      	movmi	r0, #1
 80105ea:	6013      	strmi	r3, [r2, #0]
 80105ec:	bf5c      	itt	pl
 80105ee:	6013      	strpl	r3, [r2, #0]
 80105f0:	2002      	movpl	r0, #2
 80105f2:	4770      	bx	lr
 80105f4:	b299      	uxth	r1, r3
 80105f6:	b909      	cbnz	r1, 80105fc <__lo0bits+0x2a>
 80105f8:	0c1b      	lsrs	r3, r3, #16
 80105fa:	2010      	movs	r0, #16
 80105fc:	b2d9      	uxtb	r1, r3
 80105fe:	b909      	cbnz	r1, 8010604 <__lo0bits+0x32>
 8010600:	3008      	adds	r0, #8
 8010602:	0a1b      	lsrs	r3, r3, #8
 8010604:	0719      	lsls	r1, r3, #28
 8010606:	bf04      	itt	eq
 8010608:	091b      	lsreq	r3, r3, #4
 801060a:	3004      	addeq	r0, #4
 801060c:	0799      	lsls	r1, r3, #30
 801060e:	bf04      	itt	eq
 8010610:	089b      	lsreq	r3, r3, #2
 8010612:	3002      	addeq	r0, #2
 8010614:	07d9      	lsls	r1, r3, #31
 8010616:	d403      	bmi.n	8010620 <__lo0bits+0x4e>
 8010618:	085b      	lsrs	r3, r3, #1
 801061a:	f100 0001 	add.w	r0, r0, #1
 801061e:	d003      	beq.n	8010628 <__lo0bits+0x56>
 8010620:	6013      	str	r3, [r2, #0]
 8010622:	4770      	bx	lr
 8010624:	2000      	movs	r0, #0
 8010626:	4770      	bx	lr
 8010628:	2020      	movs	r0, #32
 801062a:	4770      	bx	lr

0801062c <__i2b>:
 801062c:	b510      	push	{r4, lr}
 801062e:	460c      	mov	r4, r1
 8010630:	2101      	movs	r1, #1
 8010632:	f7ff febd 	bl	80103b0 <_Balloc>
 8010636:	4602      	mov	r2, r0
 8010638:	b928      	cbnz	r0, 8010646 <__i2b+0x1a>
 801063a:	4b05      	ldr	r3, [pc, #20]	@ (8010650 <__i2b+0x24>)
 801063c:	4805      	ldr	r0, [pc, #20]	@ (8010654 <__i2b+0x28>)
 801063e:	f240 1145 	movw	r1, #325	@ 0x145
 8010642:	f001 f8fb 	bl	801183c <__assert_func>
 8010646:	2301      	movs	r3, #1
 8010648:	6144      	str	r4, [r0, #20]
 801064a:	6103      	str	r3, [r0, #16]
 801064c:	bd10      	pop	{r4, pc}
 801064e:	bf00      	nop
 8010650:	08011fba 	.word	0x08011fba
 8010654:	08012042 	.word	0x08012042

08010658 <__multiply>:
 8010658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801065c:	4617      	mov	r7, r2
 801065e:	690a      	ldr	r2, [r1, #16]
 8010660:	693b      	ldr	r3, [r7, #16]
 8010662:	429a      	cmp	r2, r3
 8010664:	bfa8      	it	ge
 8010666:	463b      	movge	r3, r7
 8010668:	4689      	mov	r9, r1
 801066a:	bfa4      	itt	ge
 801066c:	460f      	movge	r7, r1
 801066e:	4699      	movge	r9, r3
 8010670:	693d      	ldr	r5, [r7, #16]
 8010672:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8010676:	68bb      	ldr	r3, [r7, #8]
 8010678:	6879      	ldr	r1, [r7, #4]
 801067a:	eb05 060a 	add.w	r6, r5, sl
 801067e:	42b3      	cmp	r3, r6
 8010680:	b085      	sub	sp, #20
 8010682:	bfb8      	it	lt
 8010684:	3101      	addlt	r1, #1
 8010686:	f7ff fe93 	bl	80103b0 <_Balloc>
 801068a:	b930      	cbnz	r0, 801069a <__multiply+0x42>
 801068c:	4602      	mov	r2, r0
 801068e:	4b41      	ldr	r3, [pc, #260]	@ (8010794 <__multiply+0x13c>)
 8010690:	4841      	ldr	r0, [pc, #260]	@ (8010798 <__multiply+0x140>)
 8010692:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8010696:	f001 f8d1 	bl	801183c <__assert_func>
 801069a:	f100 0414 	add.w	r4, r0, #20
 801069e:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80106a2:	4623      	mov	r3, r4
 80106a4:	2200      	movs	r2, #0
 80106a6:	4573      	cmp	r3, lr
 80106a8:	d320      	bcc.n	80106ec <__multiply+0x94>
 80106aa:	f107 0814 	add.w	r8, r7, #20
 80106ae:	f109 0114 	add.w	r1, r9, #20
 80106b2:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 80106b6:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80106ba:	9302      	str	r3, [sp, #8]
 80106bc:	1beb      	subs	r3, r5, r7
 80106be:	3b15      	subs	r3, #21
 80106c0:	f023 0303 	bic.w	r3, r3, #3
 80106c4:	3304      	adds	r3, #4
 80106c6:	3715      	adds	r7, #21
 80106c8:	42bd      	cmp	r5, r7
 80106ca:	bf38      	it	cc
 80106cc:	2304      	movcc	r3, #4
 80106ce:	9301      	str	r3, [sp, #4]
 80106d0:	9b02      	ldr	r3, [sp, #8]
 80106d2:	9103      	str	r1, [sp, #12]
 80106d4:	428b      	cmp	r3, r1
 80106d6:	d80c      	bhi.n	80106f2 <__multiply+0x9a>
 80106d8:	2e00      	cmp	r6, #0
 80106da:	dd03      	ble.n	80106e4 <__multiply+0x8c>
 80106dc:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80106e0:	2b00      	cmp	r3, #0
 80106e2:	d055      	beq.n	8010790 <__multiply+0x138>
 80106e4:	6106      	str	r6, [r0, #16]
 80106e6:	b005      	add	sp, #20
 80106e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80106ec:	f843 2b04 	str.w	r2, [r3], #4
 80106f0:	e7d9      	b.n	80106a6 <__multiply+0x4e>
 80106f2:	f8b1 a000 	ldrh.w	sl, [r1]
 80106f6:	f1ba 0f00 	cmp.w	sl, #0
 80106fa:	d01f      	beq.n	801073c <__multiply+0xe4>
 80106fc:	46c4      	mov	ip, r8
 80106fe:	46a1      	mov	r9, r4
 8010700:	2700      	movs	r7, #0
 8010702:	f85c 2b04 	ldr.w	r2, [ip], #4
 8010706:	f8d9 3000 	ldr.w	r3, [r9]
 801070a:	fa1f fb82 	uxth.w	fp, r2
 801070e:	b29b      	uxth	r3, r3
 8010710:	fb0a 330b 	mla	r3, sl, fp, r3
 8010714:	443b      	add	r3, r7
 8010716:	f8d9 7000 	ldr.w	r7, [r9]
 801071a:	0c12      	lsrs	r2, r2, #16
 801071c:	0c3f      	lsrs	r7, r7, #16
 801071e:	fb0a 7202 	mla	r2, sl, r2, r7
 8010722:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8010726:	b29b      	uxth	r3, r3
 8010728:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801072c:	4565      	cmp	r5, ip
 801072e:	f849 3b04 	str.w	r3, [r9], #4
 8010732:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8010736:	d8e4      	bhi.n	8010702 <__multiply+0xaa>
 8010738:	9b01      	ldr	r3, [sp, #4]
 801073a:	50e7      	str	r7, [r4, r3]
 801073c:	9b03      	ldr	r3, [sp, #12]
 801073e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8010742:	3104      	adds	r1, #4
 8010744:	f1b9 0f00 	cmp.w	r9, #0
 8010748:	d020      	beq.n	801078c <__multiply+0x134>
 801074a:	6823      	ldr	r3, [r4, #0]
 801074c:	4647      	mov	r7, r8
 801074e:	46a4      	mov	ip, r4
 8010750:	f04f 0a00 	mov.w	sl, #0
 8010754:	f8b7 b000 	ldrh.w	fp, [r7]
 8010758:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 801075c:	fb09 220b 	mla	r2, r9, fp, r2
 8010760:	4452      	add	r2, sl
 8010762:	b29b      	uxth	r3, r3
 8010764:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010768:	f84c 3b04 	str.w	r3, [ip], #4
 801076c:	f857 3b04 	ldr.w	r3, [r7], #4
 8010770:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010774:	f8bc 3000 	ldrh.w	r3, [ip]
 8010778:	fb09 330a 	mla	r3, r9, sl, r3
 801077c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8010780:	42bd      	cmp	r5, r7
 8010782:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010786:	d8e5      	bhi.n	8010754 <__multiply+0xfc>
 8010788:	9a01      	ldr	r2, [sp, #4]
 801078a:	50a3      	str	r3, [r4, r2]
 801078c:	3404      	adds	r4, #4
 801078e:	e79f      	b.n	80106d0 <__multiply+0x78>
 8010790:	3e01      	subs	r6, #1
 8010792:	e7a1      	b.n	80106d8 <__multiply+0x80>
 8010794:	08011fba 	.word	0x08011fba
 8010798:	08012042 	.word	0x08012042

0801079c <__pow5mult>:
 801079c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80107a0:	4615      	mov	r5, r2
 80107a2:	f012 0203 	ands.w	r2, r2, #3
 80107a6:	4607      	mov	r7, r0
 80107a8:	460e      	mov	r6, r1
 80107aa:	d007      	beq.n	80107bc <__pow5mult+0x20>
 80107ac:	4c25      	ldr	r4, [pc, #148]	@ (8010844 <__pow5mult+0xa8>)
 80107ae:	3a01      	subs	r2, #1
 80107b0:	2300      	movs	r3, #0
 80107b2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80107b6:	f7ff fe5d 	bl	8010474 <__multadd>
 80107ba:	4606      	mov	r6, r0
 80107bc:	10ad      	asrs	r5, r5, #2
 80107be:	d03d      	beq.n	801083c <__pow5mult+0xa0>
 80107c0:	69fc      	ldr	r4, [r7, #28]
 80107c2:	b97c      	cbnz	r4, 80107e4 <__pow5mult+0x48>
 80107c4:	2010      	movs	r0, #16
 80107c6:	f001 f86b 	bl	80118a0 <malloc>
 80107ca:	4602      	mov	r2, r0
 80107cc:	61f8      	str	r0, [r7, #28]
 80107ce:	b928      	cbnz	r0, 80107dc <__pow5mult+0x40>
 80107d0:	4b1d      	ldr	r3, [pc, #116]	@ (8010848 <__pow5mult+0xac>)
 80107d2:	481e      	ldr	r0, [pc, #120]	@ (801084c <__pow5mult+0xb0>)
 80107d4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80107d8:	f001 f830 	bl	801183c <__assert_func>
 80107dc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80107e0:	6004      	str	r4, [r0, #0]
 80107e2:	60c4      	str	r4, [r0, #12]
 80107e4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80107e8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80107ec:	b94c      	cbnz	r4, 8010802 <__pow5mult+0x66>
 80107ee:	f240 2171 	movw	r1, #625	@ 0x271
 80107f2:	4638      	mov	r0, r7
 80107f4:	f7ff ff1a 	bl	801062c <__i2b>
 80107f8:	2300      	movs	r3, #0
 80107fa:	f8c8 0008 	str.w	r0, [r8, #8]
 80107fe:	4604      	mov	r4, r0
 8010800:	6003      	str	r3, [r0, #0]
 8010802:	f04f 0900 	mov.w	r9, #0
 8010806:	07eb      	lsls	r3, r5, #31
 8010808:	d50a      	bpl.n	8010820 <__pow5mult+0x84>
 801080a:	4631      	mov	r1, r6
 801080c:	4622      	mov	r2, r4
 801080e:	4638      	mov	r0, r7
 8010810:	f7ff ff22 	bl	8010658 <__multiply>
 8010814:	4631      	mov	r1, r6
 8010816:	4680      	mov	r8, r0
 8010818:	4638      	mov	r0, r7
 801081a:	f7ff fe09 	bl	8010430 <_Bfree>
 801081e:	4646      	mov	r6, r8
 8010820:	106d      	asrs	r5, r5, #1
 8010822:	d00b      	beq.n	801083c <__pow5mult+0xa0>
 8010824:	6820      	ldr	r0, [r4, #0]
 8010826:	b938      	cbnz	r0, 8010838 <__pow5mult+0x9c>
 8010828:	4622      	mov	r2, r4
 801082a:	4621      	mov	r1, r4
 801082c:	4638      	mov	r0, r7
 801082e:	f7ff ff13 	bl	8010658 <__multiply>
 8010832:	6020      	str	r0, [r4, #0]
 8010834:	f8c0 9000 	str.w	r9, [r0]
 8010838:	4604      	mov	r4, r0
 801083a:	e7e4      	b.n	8010806 <__pow5mult+0x6a>
 801083c:	4630      	mov	r0, r6
 801083e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010842:	bf00      	nop
 8010844:	08012264 	.word	0x08012264
 8010848:	0801202b 	.word	0x0801202b
 801084c:	08012042 	.word	0x08012042

08010850 <__lshift>:
 8010850:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010854:	460c      	mov	r4, r1
 8010856:	6849      	ldr	r1, [r1, #4]
 8010858:	6923      	ldr	r3, [r4, #16]
 801085a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801085e:	68a3      	ldr	r3, [r4, #8]
 8010860:	4607      	mov	r7, r0
 8010862:	4691      	mov	r9, r2
 8010864:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010868:	f108 0601 	add.w	r6, r8, #1
 801086c:	42b3      	cmp	r3, r6
 801086e:	db0b      	blt.n	8010888 <__lshift+0x38>
 8010870:	4638      	mov	r0, r7
 8010872:	f7ff fd9d 	bl	80103b0 <_Balloc>
 8010876:	4605      	mov	r5, r0
 8010878:	b948      	cbnz	r0, 801088e <__lshift+0x3e>
 801087a:	4602      	mov	r2, r0
 801087c:	4b28      	ldr	r3, [pc, #160]	@ (8010920 <__lshift+0xd0>)
 801087e:	4829      	ldr	r0, [pc, #164]	@ (8010924 <__lshift+0xd4>)
 8010880:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8010884:	f000 ffda 	bl	801183c <__assert_func>
 8010888:	3101      	adds	r1, #1
 801088a:	005b      	lsls	r3, r3, #1
 801088c:	e7ee      	b.n	801086c <__lshift+0x1c>
 801088e:	2300      	movs	r3, #0
 8010890:	f100 0114 	add.w	r1, r0, #20
 8010894:	f100 0210 	add.w	r2, r0, #16
 8010898:	4618      	mov	r0, r3
 801089a:	4553      	cmp	r3, sl
 801089c:	db33      	blt.n	8010906 <__lshift+0xb6>
 801089e:	6920      	ldr	r0, [r4, #16]
 80108a0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80108a4:	f104 0314 	add.w	r3, r4, #20
 80108a8:	f019 091f 	ands.w	r9, r9, #31
 80108ac:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80108b0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80108b4:	d02b      	beq.n	801090e <__lshift+0xbe>
 80108b6:	f1c9 0e20 	rsb	lr, r9, #32
 80108ba:	468a      	mov	sl, r1
 80108bc:	2200      	movs	r2, #0
 80108be:	6818      	ldr	r0, [r3, #0]
 80108c0:	fa00 f009 	lsl.w	r0, r0, r9
 80108c4:	4310      	orrs	r0, r2
 80108c6:	f84a 0b04 	str.w	r0, [sl], #4
 80108ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80108ce:	459c      	cmp	ip, r3
 80108d0:	fa22 f20e 	lsr.w	r2, r2, lr
 80108d4:	d8f3      	bhi.n	80108be <__lshift+0x6e>
 80108d6:	ebac 0304 	sub.w	r3, ip, r4
 80108da:	3b15      	subs	r3, #21
 80108dc:	f023 0303 	bic.w	r3, r3, #3
 80108e0:	3304      	adds	r3, #4
 80108e2:	f104 0015 	add.w	r0, r4, #21
 80108e6:	4560      	cmp	r0, ip
 80108e8:	bf88      	it	hi
 80108ea:	2304      	movhi	r3, #4
 80108ec:	50ca      	str	r2, [r1, r3]
 80108ee:	b10a      	cbz	r2, 80108f4 <__lshift+0xa4>
 80108f0:	f108 0602 	add.w	r6, r8, #2
 80108f4:	3e01      	subs	r6, #1
 80108f6:	4638      	mov	r0, r7
 80108f8:	612e      	str	r6, [r5, #16]
 80108fa:	4621      	mov	r1, r4
 80108fc:	f7ff fd98 	bl	8010430 <_Bfree>
 8010900:	4628      	mov	r0, r5
 8010902:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010906:	f842 0f04 	str.w	r0, [r2, #4]!
 801090a:	3301      	adds	r3, #1
 801090c:	e7c5      	b.n	801089a <__lshift+0x4a>
 801090e:	3904      	subs	r1, #4
 8010910:	f853 2b04 	ldr.w	r2, [r3], #4
 8010914:	f841 2f04 	str.w	r2, [r1, #4]!
 8010918:	459c      	cmp	ip, r3
 801091a:	d8f9      	bhi.n	8010910 <__lshift+0xc0>
 801091c:	e7ea      	b.n	80108f4 <__lshift+0xa4>
 801091e:	bf00      	nop
 8010920:	08011fba 	.word	0x08011fba
 8010924:	08012042 	.word	0x08012042

08010928 <__mcmp>:
 8010928:	690a      	ldr	r2, [r1, #16]
 801092a:	4603      	mov	r3, r0
 801092c:	6900      	ldr	r0, [r0, #16]
 801092e:	1a80      	subs	r0, r0, r2
 8010930:	b530      	push	{r4, r5, lr}
 8010932:	d10e      	bne.n	8010952 <__mcmp+0x2a>
 8010934:	3314      	adds	r3, #20
 8010936:	3114      	adds	r1, #20
 8010938:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801093c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8010940:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8010944:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8010948:	4295      	cmp	r5, r2
 801094a:	d003      	beq.n	8010954 <__mcmp+0x2c>
 801094c:	d205      	bcs.n	801095a <__mcmp+0x32>
 801094e:	f04f 30ff 	mov.w	r0, #4294967295
 8010952:	bd30      	pop	{r4, r5, pc}
 8010954:	42a3      	cmp	r3, r4
 8010956:	d3f3      	bcc.n	8010940 <__mcmp+0x18>
 8010958:	e7fb      	b.n	8010952 <__mcmp+0x2a>
 801095a:	2001      	movs	r0, #1
 801095c:	e7f9      	b.n	8010952 <__mcmp+0x2a>
	...

08010960 <__mdiff>:
 8010960:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010964:	4689      	mov	r9, r1
 8010966:	4606      	mov	r6, r0
 8010968:	4611      	mov	r1, r2
 801096a:	4648      	mov	r0, r9
 801096c:	4614      	mov	r4, r2
 801096e:	f7ff ffdb 	bl	8010928 <__mcmp>
 8010972:	1e05      	subs	r5, r0, #0
 8010974:	d112      	bne.n	801099c <__mdiff+0x3c>
 8010976:	4629      	mov	r1, r5
 8010978:	4630      	mov	r0, r6
 801097a:	f7ff fd19 	bl	80103b0 <_Balloc>
 801097e:	4602      	mov	r2, r0
 8010980:	b928      	cbnz	r0, 801098e <__mdiff+0x2e>
 8010982:	4b3f      	ldr	r3, [pc, #252]	@ (8010a80 <__mdiff+0x120>)
 8010984:	f240 2137 	movw	r1, #567	@ 0x237
 8010988:	483e      	ldr	r0, [pc, #248]	@ (8010a84 <__mdiff+0x124>)
 801098a:	f000 ff57 	bl	801183c <__assert_func>
 801098e:	2301      	movs	r3, #1
 8010990:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010994:	4610      	mov	r0, r2
 8010996:	b003      	add	sp, #12
 8010998:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801099c:	bfbc      	itt	lt
 801099e:	464b      	movlt	r3, r9
 80109a0:	46a1      	movlt	r9, r4
 80109a2:	4630      	mov	r0, r6
 80109a4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80109a8:	bfba      	itte	lt
 80109aa:	461c      	movlt	r4, r3
 80109ac:	2501      	movlt	r5, #1
 80109ae:	2500      	movge	r5, #0
 80109b0:	f7ff fcfe 	bl	80103b0 <_Balloc>
 80109b4:	4602      	mov	r2, r0
 80109b6:	b918      	cbnz	r0, 80109c0 <__mdiff+0x60>
 80109b8:	4b31      	ldr	r3, [pc, #196]	@ (8010a80 <__mdiff+0x120>)
 80109ba:	f240 2145 	movw	r1, #581	@ 0x245
 80109be:	e7e3      	b.n	8010988 <__mdiff+0x28>
 80109c0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80109c4:	6926      	ldr	r6, [r4, #16]
 80109c6:	60c5      	str	r5, [r0, #12]
 80109c8:	f109 0310 	add.w	r3, r9, #16
 80109cc:	f109 0514 	add.w	r5, r9, #20
 80109d0:	f104 0e14 	add.w	lr, r4, #20
 80109d4:	f100 0b14 	add.w	fp, r0, #20
 80109d8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80109dc:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80109e0:	9301      	str	r3, [sp, #4]
 80109e2:	46d9      	mov	r9, fp
 80109e4:	f04f 0c00 	mov.w	ip, #0
 80109e8:	9b01      	ldr	r3, [sp, #4]
 80109ea:	f85e 0b04 	ldr.w	r0, [lr], #4
 80109ee:	f853 af04 	ldr.w	sl, [r3, #4]!
 80109f2:	9301      	str	r3, [sp, #4]
 80109f4:	fa1f f38a 	uxth.w	r3, sl
 80109f8:	4619      	mov	r1, r3
 80109fa:	b283      	uxth	r3, r0
 80109fc:	1acb      	subs	r3, r1, r3
 80109fe:	0c00      	lsrs	r0, r0, #16
 8010a00:	4463      	add	r3, ip
 8010a02:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8010a06:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8010a0a:	b29b      	uxth	r3, r3
 8010a0c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8010a10:	4576      	cmp	r6, lr
 8010a12:	f849 3b04 	str.w	r3, [r9], #4
 8010a16:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8010a1a:	d8e5      	bhi.n	80109e8 <__mdiff+0x88>
 8010a1c:	1b33      	subs	r3, r6, r4
 8010a1e:	3b15      	subs	r3, #21
 8010a20:	f023 0303 	bic.w	r3, r3, #3
 8010a24:	3415      	adds	r4, #21
 8010a26:	3304      	adds	r3, #4
 8010a28:	42a6      	cmp	r6, r4
 8010a2a:	bf38      	it	cc
 8010a2c:	2304      	movcc	r3, #4
 8010a2e:	441d      	add	r5, r3
 8010a30:	445b      	add	r3, fp
 8010a32:	461e      	mov	r6, r3
 8010a34:	462c      	mov	r4, r5
 8010a36:	4544      	cmp	r4, r8
 8010a38:	d30e      	bcc.n	8010a58 <__mdiff+0xf8>
 8010a3a:	f108 0103 	add.w	r1, r8, #3
 8010a3e:	1b49      	subs	r1, r1, r5
 8010a40:	f021 0103 	bic.w	r1, r1, #3
 8010a44:	3d03      	subs	r5, #3
 8010a46:	45a8      	cmp	r8, r5
 8010a48:	bf38      	it	cc
 8010a4a:	2100      	movcc	r1, #0
 8010a4c:	440b      	add	r3, r1
 8010a4e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8010a52:	b191      	cbz	r1, 8010a7a <__mdiff+0x11a>
 8010a54:	6117      	str	r7, [r2, #16]
 8010a56:	e79d      	b.n	8010994 <__mdiff+0x34>
 8010a58:	f854 1b04 	ldr.w	r1, [r4], #4
 8010a5c:	46e6      	mov	lr, ip
 8010a5e:	0c08      	lsrs	r0, r1, #16
 8010a60:	fa1c fc81 	uxtah	ip, ip, r1
 8010a64:	4471      	add	r1, lr
 8010a66:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8010a6a:	b289      	uxth	r1, r1
 8010a6c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8010a70:	f846 1b04 	str.w	r1, [r6], #4
 8010a74:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8010a78:	e7dd      	b.n	8010a36 <__mdiff+0xd6>
 8010a7a:	3f01      	subs	r7, #1
 8010a7c:	e7e7      	b.n	8010a4e <__mdiff+0xee>
 8010a7e:	bf00      	nop
 8010a80:	08011fba 	.word	0x08011fba
 8010a84:	08012042 	.word	0x08012042

08010a88 <__ulp>:
 8010a88:	b082      	sub	sp, #8
 8010a8a:	ed8d 0b00 	vstr	d0, [sp]
 8010a8e:	9a01      	ldr	r2, [sp, #4]
 8010a90:	4b0f      	ldr	r3, [pc, #60]	@ (8010ad0 <__ulp+0x48>)
 8010a92:	4013      	ands	r3, r2
 8010a94:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8010a98:	2b00      	cmp	r3, #0
 8010a9a:	dc08      	bgt.n	8010aae <__ulp+0x26>
 8010a9c:	425b      	negs	r3, r3
 8010a9e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8010aa2:	ea4f 5223 	mov.w	r2, r3, asr #20
 8010aa6:	da04      	bge.n	8010ab2 <__ulp+0x2a>
 8010aa8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8010aac:	4113      	asrs	r3, r2
 8010aae:	2200      	movs	r2, #0
 8010ab0:	e008      	b.n	8010ac4 <__ulp+0x3c>
 8010ab2:	f1a2 0314 	sub.w	r3, r2, #20
 8010ab6:	2b1e      	cmp	r3, #30
 8010ab8:	bfda      	itte	le
 8010aba:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8010abe:	40da      	lsrle	r2, r3
 8010ac0:	2201      	movgt	r2, #1
 8010ac2:	2300      	movs	r3, #0
 8010ac4:	4619      	mov	r1, r3
 8010ac6:	4610      	mov	r0, r2
 8010ac8:	ec41 0b10 	vmov	d0, r0, r1
 8010acc:	b002      	add	sp, #8
 8010ace:	4770      	bx	lr
 8010ad0:	7ff00000 	.word	0x7ff00000

08010ad4 <__b2d>:
 8010ad4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010ad8:	6906      	ldr	r6, [r0, #16]
 8010ada:	f100 0814 	add.w	r8, r0, #20
 8010ade:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8010ae2:	1f37      	subs	r7, r6, #4
 8010ae4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8010ae8:	4610      	mov	r0, r2
 8010aea:	f7ff fd53 	bl	8010594 <__hi0bits>
 8010aee:	f1c0 0320 	rsb	r3, r0, #32
 8010af2:	280a      	cmp	r0, #10
 8010af4:	600b      	str	r3, [r1, #0]
 8010af6:	491b      	ldr	r1, [pc, #108]	@ (8010b64 <__b2d+0x90>)
 8010af8:	dc15      	bgt.n	8010b26 <__b2d+0x52>
 8010afa:	f1c0 0c0b 	rsb	ip, r0, #11
 8010afe:	fa22 f30c 	lsr.w	r3, r2, ip
 8010b02:	45b8      	cmp	r8, r7
 8010b04:	ea43 0501 	orr.w	r5, r3, r1
 8010b08:	bf34      	ite	cc
 8010b0a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8010b0e:	2300      	movcs	r3, #0
 8010b10:	3015      	adds	r0, #21
 8010b12:	fa02 f000 	lsl.w	r0, r2, r0
 8010b16:	fa23 f30c 	lsr.w	r3, r3, ip
 8010b1a:	4303      	orrs	r3, r0
 8010b1c:	461c      	mov	r4, r3
 8010b1e:	ec45 4b10 	vmov	d0, r4, r5
 8010b22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010b26:	45b8      	cmp	r8, r7
 8010b28:	bf3a      	itte	cc
 8010b2a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8010b2e:	f1a6 0708 	subcc.w	r7, r6, #8
 8010b32:	2300      	movcs	r3, #0
 8010b34:	380b      	subs	r0, #11
 8010b36:	d012      	beq.n	8010b5e <__b2d+0x8a>
 8010b38:	f1c0 0120 	rsb	r1, r0, #32
 8010b3c:	fa23 f401 	lsr.w	r4, r3, r1
 8010b40:	4082      	lsls	r2, r0
 8010b42:	4322      	orrs	r2, r4
 8010b44:	4547      	cmp	r7, r8
 8010b46:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8010b4a:	bf8c      	ite	hi
 8010b4c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8010b50:	2200      	movls	r2, #0
 8010b52:	4083      	lsls	r3, r0
 8010b54:	40ca      	lsrs	r2, r1
 8010b56:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8010b5a:	4313      	orrs	r3, r2
 8010b5c:	e7de      	b.n	8010b1c <__b2d+0x48>
 8010b5e:	ea42 0501 	orr.w	r5, r2, r1
 8010b62:	e7db      	b.n	8010b1c <__b2d+0x48>
 8010b64:	3ff00000 	.word	0x3ff00000

08010b68 <__d2b>:
 8010b68:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010b6c:	460f      	mov	r7, r1
 8010b6e:	2101      	movs	r1, #1
 8010b70:	ec59 8b10 	vmov	r8, r9, d0
 8010b74:	4616      	mov	r6, r2
 8010b76:	f7ff fc1b 	bl	80103b0 <_Balloc>
 8010b7a:	4604      	mov	r4, r0
 8010b7c:	b930      	cbnz	r0, 8010b8c <__d2b+0x24>
 8010b7e:	4602      	mov	r2, r0
 8010b80:	4b23      	ldr	r3, [pc, #140]	@ (8010c10 <__d2b+0xa8>)
 8010b82:	4824      	ldr	r0, [pc, #144]	@ (8010c14 <__d2b+0xac>)
 8010b84:	f240 310f 	movw	r1, #783	@ 0x30f
 8010b88:	f000 fe58 	bl	801183c <__assert_func>
 8010b8c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8010b90:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010b94:	b10d      	cbz	r5, 8010b9a <__d2b+0x32>
 8010b96:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8010b9a:	9301      	str	r3, [sp, #4]
 8010b9c:	f1b8 0300 	subs.w	r3, r8, #0
 8010ba0:	d023      	beq.n	8010bea <__d2b+0x82>
 8010ba2:	4668      	mov	r0, sp
 8010ba4:	9300      	str	r3, [sp, #0]
 8010ba6:	f7ff fd14 	bl	80105d2 <__lo0bits>
 8010baa:	e9dd 1200 	ldrd	r1, r2, [sp]
 8010bae:	b1d0      	cbz	r0, 8010be6 <__d2b+0x7e>
 8010bb0:	f1c0 0320 	rsb	r3, r0, #32
 8010bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8010bb8:	430b      	orrs	r3, r1
 8010bba:	40c2      	lsrs	r2, r0
 8010bbc:	6163      	str	r3, [r4, #20]
 8010bbe:	9201      	str	r2, [sp, #4]
 8010bc0:	9b01      	ldr	r3, [sp, #4]
 8010bc2:	61a3      	str	r3, [r4, #24]
 8010bc4:	2b00      	cmp	r3, #0
 8010bc6:	bf0c      	ite	eq
 8010bc8:	2201      	moveq	r2, #1
 8010bca:	2202      	movne	r2, #2
 8010bcc:	6122      	str	r2, [r4, #16]
 8010bce:	b1a5      	cbz	r5, 8010bfa <__d2b+0x92>
 8010bd0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8010bd4:	4405      	add	r5, r0
 8010bd6:	603d      	str	r5, [r7, #0]
 8010bd8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8010bdc:	6030      	str	r0, [r6, #0]
 8010bde:	4620      	mov	r0, r4
 8010be0:	b003      	add	sp, #12
 8010be2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010be6:	6161      	str	r1, [r4, #20]
 8010be8:	e7ea      	b.n	8010bc0 <__d2b+0x58>
 8010bea:	a801      	add	r0, sp, #4
 8010bec:	f7ff fcf1 	bl	80105d2 <__lo0bits>
 8010bf0:	9b01      	ldr	r3, [sp, #4]
 8010bf2:	6163      	str	r3, [r4, #20]
 8010bf4:	3020      	adds	r0, #32
 8010bf6:	2201      	movs	r2, #1
 8010bf8:	e7e8      	b.n	8010bcc <__d2b+0x64>
 8010bfa:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8010bfe:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8010c02:	6038      	str	r0, [r7, #0]
 8010c04:	6918      	ldr	r0, [r3, #16]
 8010c06:	f7ff fcc5 	bl	8010594 <__hi0bits>
 8010c0a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8010c0e:	e7e5      	b.n	8010bdc <__d2b+0x74>
 8010c10:	08011fba 	.word	0x08011fba
 8010c14:	08012042 	.word	0x08012042

08010c18 <__ratio>:
 8010c18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c1c:	b085      	sub	sp, #20
 8010c1e:	e9cd 1000 	strd	r1, r0, [sp]
 8010c22:	a902      	add	r1, sp, #8
 8010c24:	f7ff ff56 	bl	8010ad4 <__b2d>
 8010c28:	9800      	ldr	r0, [sp, #0]
 8010c2a:	a903      	add	r1, sp, #12
 8010c2c:	ec55 4b10 	vmov	r4, r5, d0
 8010c30:	f7ff ff50 	bl	8010ad4 <__b2d>
 8010c34:	9b01      	ldr	r3, [sp, #4]
 8010c36:	6919      	ldr	r1, [r3, #16]
 8010c38:	9b00      	ldr	r3, [sp, #0]
 8010c3a:	691b      	ldr	r3, [r3, #16]
 8010c3c:	1ac9      	subs	r1, r1, r3
 8010c3e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8010c42:	1a9b      	subs	r3, r3, r2
 8010c44:	ec5b ab10 	vmov	sl, fp, d0
 8010c48:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8010c4c:	2b00      	cmp	r3, #0
 8010c4e:	bfce      	itee	gt
 8010c50:	462a      	movgt	r2, r5
 8010c52:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8010c56:	465a      	movle	r2, fp
 8010c58:	462f      	mov	r7, r5
 8010c5a:	46d9      	mov	r9, fp
 8010c5c:	bfcc      	ite	gt
 8010c5e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8010c62:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8010c66:	464b      	mov	r3, r9
 8010c68:	4652      	mov	r2, sl
 8010c6a:	4620      	mov	r0, r4
 8010c6c:	4639      	mov	r1, r7
 8010c6e:	f7ef fdfd 	bl	800086c <__aeabi_ddiv>
 8010c72:	ec41 0b10 	vmov	d0, r0, r1
 8010c76:	b005      	add	sp, #20
 8010c78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010c7c <__copybits>:
 8010c7c:	3901      	subs	r1, #1
 8010c7e:	b570      	push	{r4, r5, r6, lr}
 8010c80:	1149      	asrs	r1, r1, #5
 8010c82:	6914      	ldr	r4, [r2, #16]
 8010c84:	3101      	adds	r1, #1
 8010c86:	f102 0314 	add.w	r3, r2, #20
 8010c8a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8010c8e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8010c92:	1f05      	subs	r5, r0, #4
 8010c94:	42a3      	cmp	r3, r4
 8010c96:	d30c      	bcc.n	8010cb2 <__copybits+0x36>
 8010c98:	1aa3      	subs	r3, r4, r2
 8010c9a:	3b11      	subs	r3, #17
 8010c9c:	f023 0303 	bic.w	r3, r3, #3
 8010ca0:	3211      	adds	r2, #17
 8010ca2:	42a2      	cmp	r2, r4
 8010ca4:	bf88      	it	hi
 8010ca6:	2300      	movhi	r3, #0
 8010ca8:	4418      	add	r0, r3
 8010caa:	2300      	movs	r3, #0
 8010cac:	4288      	cmp	r0, r1
 8010cae:	d305      	bcc.n	8010cbc <__copybits+0x40>
 8010cb0:	bd70      	pop	{r4, r5, r6, pc}
 8010cb2:	f853 6b04 	ldr.w	r6, [r3], #4
 8010cb6:	f845 6f04 	str.w	r6, [r5, #4]!
 8010cba:	e7eb      	b.n	8010c94 <__copybits+0x18>
 8010cbc:	f840 3b04 	str.w	r3, [r0], #4
 8010cc0:	e7f4      	b.n	8010cac <__copybits+0x30>

08010cc2 <__any_on>:
 8010cc2:	f100 0214 	add.w	r2, r0, #20
 8010cc6:	6900      	ldr	r0, [r0, #16]
 8010cc8:	114b      	asrs	r3, r1, #5
 8010cca:	4298      	cmp	r0, r3
 8010ccc:	b510      	push	{r4, lr}
 8010cce:	db11      	blt.n	8010cf4 <__any_on+0x32>
 8010cd0:	dd0a      	ble.n	8010ce8 <__any_on+0x26>
 8010cd2:	f011 011f 	ands.w	r1, r1, #31
 8010cd6:	d007      	beq.n	8010ce8 <__any_on+0x26>
 8010cd8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8010cdc:	fa24 f001 	lsr.w	r0, r4, r1
 8010ce0:	fa00 f101 	lsl.w	r1, r0, r1
 8010ce4:	428c      	cmp	r4, r1
 8010ce6:	d10b      	bne.n	8010d00 <__any_on+0x3e>
 8010ce8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010cec:	4293      	cmp	r3, r2
 8010cee:	d803      	bhi.n	8010cf8 <__any_on+0x36>
 8010cf0:	2000      	movs	r0, #0
 8010cf2:	bd10      	pop	{r4, pc}
 8010cf4:	4603      	mov	r3, r0
 8010cf6:	e7f7      	b.n	8010ce8 <__any_on+0x26>
 8010cf8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8010cfc:	2900      	cmp	r1, #0
 8010cfe:	d0f5      	beq.n	8010cec <__any_on+0x2a>
 8010d00:	2001      	movs	r0, #1
 8010d02:	e7f6      	b.n	8010cf2 <__any_on+0x30>

08010d04 <__ascii_wctomb>:
 8010d04:	4603      	mov	r3, r0
 8010d06:	4608      	mov	r0, r1
 8010d08:	b141      	cbz	r1, 8010d1c <__ascii_wctomb+0x18>
 8010d0a:	2aff      	cmp	r2, #255	@ 0xff
 8010d0c:	d904      	bls.n	8010d18 <__ascii_wctomb+0x14>
 8010d0e:	228a      	movs	r2, #138	@ 0x8a
 8010d10:	601a      	str	r2, [r3, #0]
 8010d12:	f04f 30ff 	mov.w	r0, #4294967295
 8010d16:	4770      	bx	lr
 8010d18:	700a      	strb	r2, [r1, #0]
 8010d1a:	2001      	movs	r0, #1
 8010d1c:	4770      	bx	lr

08010d1e <__ssputs_r>:
 8010d1e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010d22:	688e      	ldr	r6, [r1, #8]
 8010d24:	461f      	mov	r7, r3
 8010d26:	42be      	cmp	r6, r7
 8010d28:	680b      	ldr	r3, [r1, #0]
 8010d2a:	4682      	mov	sl, r0
 8010d2c:	460c      	mov	r4, r1
 8010d2e:	4690      	mov	r8, r2
 8010d30:	d82d      	bhi.n	8010d8e <__ssputs_r+0x70>
 8010d32:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010d36:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8010d3a:	d026      	beq.n	8010d8a <__ssputs_r+0x6c>
 8010d3c:	6965      	ldr	r5, [r4, #20]
 8010d3e:	6909      	ldr	r1, [r1, #16]
 8010d40:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010d44:	eba3 0901 	sub.w	r9, r3, r1
 8010d48:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010d4c:	1c7b      	adds	r3, r7, #1
 8010d4e:	444b      	add	r3, r9
 8010d50:	106d      	asrs	r5, r5, #1
 8010d52:	429d      	cmp	r5, r3
 8010d54:	bf38      	it	cc
 8010d56:	461d      	movcc	r5, r3
 8010d58:	0553      	lsls	r3, r2, #21
 8010d5a:	d527      	bpl.n	8010dac <__ssputs_r+0x8e>
 8010d5c:	4629      	mov	r1, r5
 8010d5e:	f7ff fa89 	bl	8010274 <_malloc_r>
 8010d62:	4606      	mov	r6, r0
 8010d64:	b360      	cbz	r0, 8010dc0 <__ssputs_r+0xa2>
 8010d66:	6921      	ldr	r1, [r4, #16]
 8010d68:	464a      	mov	r2, r9
 8010d6a:	f7fe fec4 	bl	800faf6 <memcpy>
 8010d6e:	89a3      	ldrh	r3, [r4, #12]
 8010d70:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8010d74:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010d78:	81a3      	strh	r3, [r4, #12]
 8010d7a:	6126      	str	r6, [r4, #16]
 8010d7c:	6165      	str	r5, [r4, #20]
 8010d7e:	444e      	add	r6, r9
 8010d80:	eba5 0509 	sub.w	r5, r5, r9
 8010d84:	6026      	str	r6, [r4, #0]
 8010d86:	60a5      	str	r5, [r4, #8]
 8010d88:	463e      	mov	r6, r7
 8010d8a:	42be      	cmp	r6, r7
 8010d8c:	d900      	bls.n	8010d90 <__ssputs_r+0x72>
 8010d8e:	463e      	mov	r6, r7
 8010d90:	6820      	ldr	r0, [r4, #0]
 8010d92:	4632      	mov	r2, r6
 8010d94:	4641      	mov	r1, r8
 8010d96:	f000 fd27 	bl	80117e8 <memmove>
 8010d9a:	68a3      	ldr	r3, [r4, #8]
 8010d9c:	1b9b      	subs	r3, r3, r6
 8010d9e:	60a3      	str	r3, [r4, #8]
 8010da0:	6823      	ldr	r3, [r4, #0]
 8010da2:	4433      	add	r3, r6
 8010da4:	6023      	str	r3, [r4, #0]
 8010da6:	2000      	movs	r0, #0
 8010da8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010dac:	462a      	mov	r2, r5
 8010dae:	f000 fd7f 	bl	80118b0 <_realloc_r>
 8010db2:	4606      	mov	r6, r0
 8010db4:	2800      	cmp	r0, #0
 8010db6:	d1e0      	bne.n	8010d7a <__ssputs_r+0x5c>
 8010db8:	6921      	ldr	r1, [r4, #16]
 8010dba:	4650      	mov	r0, sl
 8010dbc:	f7fe feb4 	bl	800fb28 <_free_r>
 8010dc0:	230c      	movs	r3, #12
 8010dc2:	f8ca 3000 	str.w	r3, [sl]
 8010dc6:	89a3      	ldrh	r3, [r4, #12]
 8010dc8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010dcc:	81a3      	strh	r3, [r4, #12]
 8010dce:	f04f 30ff 	mov.w	r0, #4294967295
 8010dd2:	e7e9      	b.n	8010da8 <__ssputs_r+0x8a>

08010dd4 <_svfiprintf_r>:
 8010dd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010dd8:	4698      	mov	r8, r3
 8010dda:	898b      	ldrh	r3, [r1, #12]
 8010ddc:	061b      	lsls	r3, r3, #24
 8010dde:	b09d      	sub	sp, #116	@ 0x74
 8010de0:	4607      	mov	r7, r0
 8010de2:	460d      	mov	r5, r1
 8010de4:	4614      	mov	r4, r2
 8010de6:	d510      	bpl.n	8010e0a <_svfiprintf_r+0x36>
 8010de8:	690b      	ldr	r3, [r1, #16]
 8010dea:	b973      	cbnz	r3, 8010e0a <_svfiprintf_r+0x36>
 8010dec:	2140      	movs	r1, #64	@ 0x40
 8010dee:	f7ff fa41 	bl	8010274 <_malloc_r>
 8010df2:	6028      	str	r0, [r5, #0]
 8010df4:	6128      	str	r0, [r5, #16]
 8010df6:	b930      	cbnz	r0, 8010e06 <_svfiprintf_r+0x32>
 8010df8:	230c      	movs	r3, #12
 8010dfa:	603b      	str	r3, [r7, #0]
 8010dfc:	f04f 30ff 	mov.w	r0, #4294967295
 8010e00:	b01d      	add	sp, #116	@ 0x74
 8010e02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e06:	2340      	movs	r3, #64	@ 0x40
 8010e08:	616b      	str	r3, [r5, #20]
 8010e0a:	2300      	movs	r3, #0
 8010e0c:	9309      	str	r3, [sp, #36]	@ 0x24
 8010e0e:	2320      	movs	r3, #32
 8010e10:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010e14:	f8cd 800c 	str.w	r8, [sp, #12]
 8010e18:	2330      	movs	r3, #48	@ 0x30
 8010e1a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8010fb8 <_svfiprintf_r+0x1e4>
 8010e1e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010e22:	f04f 0901 	mov.w	r9, #1
 8010e26:	4623      	mov	r3, r4
 8010e28:	469a      	mov	sl, r3
 8010e2a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010e2e:	b10a      	cbz	r2, 8010e34 <_svfiprintf_r+0x60>
 8010e30:	2a25      	cmp	r2, #37	@ 0x25
 8010e32:	d1f9      	bne.n	8010e28 <_svfiprintf_r+0x54>
 8010e34:	ebba 0b04 	subs.w	fp, sl, r4
 8010e38:	d00b      	beq.n	8010e52 <_svfiprintf_r+0x7e>
 8010e3a:	465b      	mov	r3, fp
 8010e3c:	4622      	mov	r2, r4
 8010e3e:	4629      	mov	r1, r5
 8010e40:	4638      	mov	r0, r7
 8010e42:	f7ff ff6c 	bl	8010d1e <__ssputs_r>
 8010e46:	3001      	adds	r0, #1
 8010e48:	f000 80a7 	beq.w	8010f9a <_svfiprintf_r+0x1c6>
 8010e4c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010e4e:	445a      	add	r2, fp
 8010e50:	9209      	str	r2, [sp, #36]	@ 0x24
 8010e52:	f89a 3000 	ldrb.w	r3, [sl]
 8010e56:	2b00      	cmp	r3, #0
 8010e58:	f000 809f 	beq.w	8010f9a <_svfiprintf_r+0x1c6>
 8010e5c:	2300      	movs	r3, #0
 8010e5e:	f04f 32ff 	mov.w	r2, #4294967295
 8010e62:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010e66:	f10a 0a01 	add.w	sl, sl, #1
 8010e6a:	9304      	str	r3, [sp, #16]
 8010e6c:	9307      	str	r3, [sp, #28]
 8010e6e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010e72:	931a      	str	r3, [sp, #104]	@ 0x68
 8010e74:	4654      	mov	r4, sl
 8010e76:	2205      	movs	r2, #5
 8010e78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010e7c:	484e      	ldr	r0, [pc, #312]	@ (8010fb8 <_svfiprintf_r+0x1e4>)
 8010e7e:	f7ef f9bf 	bl	8000200 <memchr>
 8010e82:	9a04      	ldr	r2, [sp, #16]
 8010e84:	b9d8      	cbnz	r0, 8010ebe <_svfiprintf_r+0xea>
 8010e86:	06d0      	lsls	r0, r2, #27
 8010e88:	bf44      	itt	mi
 8010e8a:	2320      	movmi	r3, #32
 8010e8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010e90:	0711      	lsls	r1, r2, #28
 8010e92:	bf44      	itt	mi
 8010e94:	232b      	movmi	r3, #43	@ 0x2b
 8010e96:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010e9a:	f89a 3000 	ldrb.w	r3, [sl]
 8010e9e:	2b2a      	cmp	r3, #42	@ 0x2a
 8010ea0:	d015      	beq.n	8010ece <_svfiprintf_r+0xfa>
 8010ea2:	9a07      	ldr	r2, [sp, #28]
 8010ea4:	4654      	mov	r4, sl
 8010ea6:	2000      	movs	r0, #0
 8010ea8:	f04f 0c0a 	mov.w	ip, #10
 8010eac:	4621      	mov	r1, r4
 8010eae:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010eb2:	3b30      	subs	r3, #48	@ 0x30
 8010eb4:	2b09      	cmp	r3, #9
 8010eb6:	d94b      	bls.n	8010f50 <_svfiprintf_r+0x17c>
 8010eb8:	b1b0      	cbz	r0, 8010ee8 <_svfiprintf_r+0x114>
 8010eba:	9207      	str	r2, [sp, #28]
 8010ebc:	e014      	b.n	8010ee8 <_svfiprintf_r+0x114>
 8010ebe:	eba0 0308 	sub.w	r3, r0, r8
 8010ec2:	fa09 f303 	lsl.w	r3, r9, r3
 8010ec6:	4313      	orrs	r3, r2
 8010ec8:	9304      	str	r3, [sp, #16]
 8010eca:	46a2      	mov	sl, r4
 8010ecc:	e7d2      	b.n	8010e74 <_svfiprintf_r+0xa0>
 8010ece:	9b03      	ldr	r3, [sp, #12]
 8010ed0:	1d19      	adds	r1, r3, #4
 8010ed2:	681b      	ldr	r3, [r3, #0]
 8010ed4:	9103      	str	r1, [sp, #12]
 8010ed6:	2b00      	cmp	r3, #0
 8010ed8:	bfbb      	ittet	lt
 8010eda:	425b      	neglt	r3, r3
 8010edc:	f042 0202 	orrlt.w	r2, r2, #2
 8010ee0:	9307      	strge	r3, [sp, #28]
 8010ee2:	9307      	strlt	r3, [sp, #28]
 8010ee4:	bfb8      	it	lt
 8010ee6:	9204      	strlt	r2, [sp, #16]
 8010ee8:	7823      	ldrb	r3, [r4, #0]
 8010eea:	2b2e      	cmp	r3, #46	@ 0x2e
 8010eec:	d10a      	bne.n	8010f04 <_svfiprintf_r+0x130>
 8010eee:	7863      	ldrb	r3, [r4, #1]
 8010ef0:	2b2a      	cmp	r3, #42	@ 0x2a
 8010ef2:	d132      	bne.n	8010f5a <_svfiprintf_r+0x186>
 8010ef4:	9b03      	ldr	r3, [sp, #12]
 8010ef6:	1d1a      	adds	r2, r3, #4
 8010ef8:	681b      	ldr	r3, [r3, #0]
 8010efa:	9203      	str	r2, [sp, #12]
 8010efc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010f00:	3402      	adds	r4, #2
 8010f02:	9305      	str	r3, [sp, #20]
 8010f04:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8010fc8 <_svfiprintf_r+0x1f4>
 8010f08:	7821      	ldrb	r1, [r4, #0]
 8010f0a:	2203      	movs	r2, #3
 8010f0c:	4650      	mov	r0, sl
 8010f0e:	f7ef f977 	bl	8000200 <memchr>
 8010f12:	b138      	cbz	r0, 8010f24 <_svfiprintf_r+0x150>
 8010f14:	9b04      	ldr	r3, [sp, #16]
 8010f16:	eba0 000a 	sub.w	r0, r0, sl
 8010f1a:	2240      	movs	r2, #64	@ 0x40
 8010f1c:	4082      	lsls	r2, r0
 8010f1e:	4313      	orrs	r3, r2
 8010f20:	3401      	adds	r4, #1
 8010f22:	9304      	str	r3, [sp, #16]
 8010f24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010f28:	4824      	ldr	r0, [pc, #144]	@ (8010fbc <_svfiprintf_r+0x1e8>)
 8010f2a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010f2e:	2206      	movs	r2, #6
 8010f30:	f7ef f966 	bl	8000200 <memchr>
 8010f34:	2800      	cmp	r0, #0
 8010f36:	d036      	beq.n	8010fa6 <_svfiprintf_r+0x1d2>
 8010f38:	4b21      	ldr	r3, [pc, #132]	@ (8010fc0 <_svfiprintf_r+0x1ec>)
 8010f3a:	bb1b      	cbnz	r3, 8010f84 <_svfiprintf_r+0x1b0>
 8010f3c:	9b03      	ldr	r3, [sp, #12]
 8010f3e:	3307      	adds	r3, #7
 8010f40:	f023 0307 	bic.w	r3, r3, #7
 8010f44:	3308      	adds	r3, #8
 8010f46:	9303      	str	r3, [sp, #12]
 8010f48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010f4a:	4433      	add	r3, r6
 8010f4c:	9309      	str	r3, [sp, #36]	@ 0x24
 8010f4e:	e76a      	b.n	8010e26 <_svfiprintf_r+0x52>
 8010f50:	fb0c 3202 	mla	r2, ip, r2, r3
 8010f54:	460c      	mov	r4, r1
 8010f56:	2001      	movs	r0, #1
 8010f58:	e7a8      	b.n	8010eac <_svfiprintf_r+0xd8>
 8010f5a:	2300      	movs	r3, #0
 8010f5c:	3401      	adds	r4, #1
 8010f5e:	9305      	str	r3, [sp, #20]
 8010f60:	4619      	mov	r1, r3
 8010f62:	f04f 0c0a 	mov.w	ip, #10
 8010f66:	4620      	mov	r0, r4
 8010f68:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010f6c:	3a30      	subs	r2, #48	@ 0x30
 8010f6e:	2a09      	cmp	r2, #9
 8010f70:	d903      	bls.n	8010f7a <_svfiprintf_r+0x1a6>
 8010f72:	2b00      	cmp	r3, #0
 8010f74:	d0c6      	beq.n	8010f04 <_svfiprintf_r+0x130>
 8010f76:	9105      	str	r1, [sp, #20]
 8010f78:	e7c4      	b.n	8010f04 <_svfiprintf_r+0x130>
 8010f7a:	fb0c 2101 	mla	r1, ip, r1, r2
 8010f7e:	4604      	mov	r4, r0
 8010f80:	2301      	movs	r3, #1
 8010f82:	e7f0      	b.n	8010f66 <_svfiprintf_r+0x192>
 8010f84:	ab03      	add	r3, sp, #12
 8010f86:	9300      	str	r3, [sp, #0]
 8010f88:	462a      	mov	r2, r5
 8010f8a:	4b0e      	ldr	r3, [pc, #56]	@ (8010fc4 <_svfiprintf_r+0x1f0>)
 8010f8c:	a904      	add	r1, sp, #16
 8010f8e:	4638      	mov	r0, r7
 8010f90:	f3af 8000 	nop.w
 8010f94:	1c42      	adds	r2, r0, #1
 8010f96:	4606      	mov	r6, r0
 8010f98:	d1d6      	bne.n	8010f48 <_svfiprintf_r+0x174>
 8010f9a:	89ab      	ldrh	r3, [r5, #12]
 8010f9c:	065b      	lsls	r3, r3, #25
 8010f9e:	f53f af2d 	bmi.w	8010dfc <_svfiprintf_r+0x28>
 8010fa2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010fa4:	e72c      	b.n	8010e00 <_svfiprintf_r+0x2c>
 8010fa6:	ab03      	add	r3, sp, #12
 8010fa8:	9300      	str	r3, [sp, #0]
 8010faa:	462a      	mov	r2, r5
 8010fac:	4b05      	ldr	r3, [pc, #20]	@ (8010fc4 <_svfiprintf_r+0x1f0>)
 8010fae:	a904      	add	r1, sp, #16
 8010fb0:	4638      	mov	r0, r7
 8010fb2:	f000 f9bb 	bl	801132c <_printf_i>
 8010fb6:	e7ed      	b.n	8010f94 <_svfiprintf_r+0x1c0>
 8010fb8:	0801209b 	.word	0x0801209b
 8010fbc:	080120a5 	.word	0x080120a5
 8010fc0:	00000000 	.word	0x00000000
 8010fc4:	08010d1f 	.word	0x08010d1f
 8010fc8:	080120a1 	.word	0x080120a1

08010fcc <__sfputc_r>:
 8010fcc:	6893      	ldr	r3, [r2, #8]
 8010fce:	3b01      	subs	r3, #1
 8010fd0:	2b00      	cmp	r3, #0
 8010fd2:	b410      	push	{r4}
 8010fd4:	6093      	str	r3, [r2, #8]
 8010fd6:	da08      	bge.n	8010fea <__sfputc_r+0x1e>
 8010fd8:	6994      	ldr	r4, [r2, #24]
 8010fda:	42a3      	cmp	r3, r4
 8010fdc:	db01      	blt.n	8010fe2 <__sfputc_r+0x16>
 8010fde:	290a      	cmp	r1, #10
 8010fe0:	d103      	bne.n	8010fea <__sfputc_r+0x1e>
 8010fe2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010fe6:	f000 bb6b 	b.w	80116c0 <__swbuf_r>
 8010fea:	6813      	ldr	r3, [r2, #0]
 8010fec:	1c58      	adds	r0, r3, #1
 8010fee:	6010      	str	r0, [r2, #0]
 8010ff0:	7019      	strb	r1, [r3, #0]
 8010ff2:	4608      	mov	r0, r1
 8010ff4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010ff8:	4770      	bx	lr

08010ffa <__sfputs_r>:
 8010ffa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010ffc:	4606      	mov	r6, r0
 8010ffe:	460f      	mov	r7, r1
 8011000:	4614      	mov	r4, r2
 8011002:	18d5      	adds	r5, r2, r3
 8011004:	42ac      	cmp	r4, r5
 8011006:	d101      	bne.n	801100c <__sfputs_r+0x12>
 8011008:	2000      	movs	r0, #0
 801100a:	e007      	b.n	801101c <__sfputs_r+0x22>
 801100c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011010:	463a      	mov	r2, r7
 8011012:	4630      	mov	r0, r6
 8011014:	f7ff ffda 	bl	8010fcc <__sfputc_r>
 8011018:	1c43      	adds	r3, r0, #1
 801101a:	d1f3      	bne.n	8011004 <__sfputs_r+0xa>
 801101c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011020 <_vfiprintf_r>:
 8011020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011024:	460d      	mov	r5, r1
 8011026:	b09d      	sub	sp, #116	@ 0x74
 8011028:	4614      	mov	r4, r2
 801102a:	4698      	mov	r8, r3
 801102c:	4606      	mov	r6, r0
 801102e:	b118      	cbz	r0, 8011038 <_vfiprintf_r+0x18>
 8011030:	6a03      	ldr	r3, [r0, #32]
 8011032:	b90b      	cbnz	r3, 8011038 <_vfiprintf_r+0x18>
 8011034:	f7fe fb90 	bl	800f758 <__sinit>
 8011038:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801103a:	07d9      	lsls	r1, r3, #31
 801103c:	d405      	bmi.n	801104a <_vfiprintf_r+0x2a>
 801103e:	89ab      	ldrh	r3, [r5, #12]
 8011040:	059a      	lsls	r2, r3, #22
 8011042:	d402      	bmi.n	801104a <_vfiprintf_r+0x2a>
 8011044:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011046:	f7fe fd4c 	bl	800fae2 <__retarget_lock_acquire_recursive>
 801104a:	89ab      	ldrh	r3, [r5, #12]
 801104c:	071b      	lsls	r3, r3, #28
 801104e:	d501      	bpl.n	8011054 <_vfiprintf_r+0x34>
 8011050:	692b      	ldr	r3, [r5, #16]
 8011052:	b99b      	cbnz	r3, 801107c <_vfiprintf_r+0x5c>
 8011054:	4629      	mov	r1, r5
 8011056:	4630      	mov	r0, r6
 8011058:	f000 fb70 	bl	801173c <__swsetup_r>
 801105c:	b170      	cbz	r0, 801107c <_vfiprintf_r+0x5c>
 801105e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011060:	07dc      	lsls	r4, r3, #31
 8011062:	d504      	bpl.n	801106e <_vfiprintf_r+0x4e>
 8011064:	f04f 30ff 	mov.w	r0, #4294967295
 8011068:	b01d      	add	sp, #116	@ 0x74
 801106a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801106e:	89ab      	ldrh	r3, [r5, #12]
 8011070:	0598      	lsls	r0, r3, #22
 8011072:	d4f7      	bmi.n	8011064 <_vfiprintf_r+0x44>
 8011074:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011076:	f7fe fd35 	bl	800fae4 <__retarget_lock_release_recursive>
 801107a:	e7f3      	b.n	8011064 <_vfiprintf_r+0x44>
 801107c:	2300      	movs	r3, #0
 801107e:	9309      	str	r3, [sp, #36]	@ 0x24
 8011080:	2320      	movs	r3, #32
 8011082:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011086:	f8cd 800c 	str.w	r8, [sp, #12]
 801108a:	2330      	movs	r3, #48	@ 0x30
 801108c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801123c <_vfiprintf_r+0x21c>
 8011090:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011094:	f04f 0901 	mov.w	r9, #1
 8011098:	4623      	mov	r3, r4
 801109a:	469a      	mov	sl, r3
 801109c:	f813 2b01 	ldrb.w	r2, [r3], #1
 80110a0:	b10a      	cbz	r2, 80110a6 <_vfiprintf_r+0x86>
 80110a2:	2a25      	cmp	r2, #37	@ 0x25
 80110a4:	d1f9      	bne.n	801109a <_vfiprintf_r+0x7a>
 80110a6:	ebba 0b04 	subs.w	fp, sl, r4
 80110aa:	d00b      	beq.n	80110c4 <_vfiprintf_r+0xa4>
 80110ac:	465b      	mov	r3, fp
 80110ae:	4622      	mov	r2, r4
 80110b0:	4629      	mov	r1, r5
 80110b2:	4630      	mov	r0, r6
 80110b4:	f7ff ffa1 	bl	8010ffa <__sfputs_r>
 80110b8:	3001      	adds	r0, #1
 80110ba:	f000 80a7 	beq.w	801120c <_vfiprintf_r+0x1ec>
 80110be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80110c0:	445a      	add	r2, fp
 80110c2:	9209      	str	r2, [sp, #36]	@ 0x24
 80110c4:	f89a 3000 	ldrb.w	r3, [sl]
 80110c8:	2b00      	cmp	r3, #0
 80110ca:	f000 809f 	beq.w	801120c <_vfiprintf_r+0x1ec>
 80110ce:	2300      	movs	r3, #0
 80110d0:	f04f 32ff 	mov.w	r2, #4294967295
 80110d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80110d8:	f10a 0a01 	add.w	sl, sl, #1
 80110dc:	9304      	str	r3, [sp, #16]
 80110de:	9307      	str	r3, [sp, #28]
 80110e0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80110e4:	931a      	str	r3, [sp, #104]	@ 0x68
 80110e6:	4654      	mov	r4, sl
 80110e8:	2205      	movs	r2, #5
 80110ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80110ee:	4853      	ldr	r0, [pc, #332]	@ (801123c <_vfiprintf_r+0x21c>)
 80110f0:	f7ef f886 	bl	8000200 <memchr>
 80110f4:	9a04      	ldr	r2, [sp, #16]
 80110f6:	b9d8      	cbnz	r0, 8011130 <_vfiprintf_r+0x110>
 80110f8:	06d1      	lsls	r1, r2, #27
 80110fa:	bf44      	itt	mi
 80110fc:	2320      	movmi	r3, #32
 80110fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011102:	0713      	lsls	r3, r2, #28
 8011104:	bf44      	itt	mi
 8011106:	232b      	movmi	r3, #43	@ 0x2b
 8011108:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801110c:	f89a 3000 	ldrb.w	r3, [sl]
 8011110:	2b2a      	cmp	r3, #42	@ 0x2a
 8011112:	d015      	beq.n	8011140 <_vfiprintf_r+0x120>
 8011114:	9a07      	ldr	r2, [sp, #28]
 8011116:	4654      	mov	r4, sl
 8011118:	2000      	movs	r0, #0
 801111a:	f04f 0c0a 	mov.w	ip, #10
 801111e:	4621      	mov	r1, r4
 8011120:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011124:	3b30      	subs	r3, #48	@ 0x30
 8011126:	2b09      	cmp	r3, #9
 8011128:	d94b      	bls.n	80111c2 <_vfiprintf_r+0x1a2>
 801112a:	b1b0      	cbz	r0, 801115a <_vfiprintf_r+0x13a>
 801112c:	9207      	str	r2, [sp, #28]
 801112e:	e014      	b.n	801115a <_vfiprintf_r+0x13a>
 8011130:	eba0 0308 	sub.w	r3, r0, r8
 8011134:	fa09 f303 	lsl.w	r3, r9, r3
 8011138:	4313      	orrs	r3, r2
 801113a:	9304      	str	r3, [sp, #16]
 801113c:	46a2      	mov	sl, r4
 801113e:	e7d2      	b.n	80110e6 <_vfiprintf_r+0xc6>
 8011140:	9b03      	ldr	r3, [sp, #12]
 8011142:	1d19      	adds	r1, r3, #4
 8011144:	681b      	ldr	r3, [r3, #0]
 8011146:	9103      	str	r1, [sp, #12]
 8011148:	2b00      	cmp	r3, #0
 801114a:	bfbb      	ittet	lt
 801114c:	425b      	neglt	r3, r3
 801114e:	f042 0202 	orrlt.w	r2, r2, #2
 8011152:	9307      	strge	r3, [sp, #28]
 8011154:	9307      	strlt	r3, [sp, #28]
 8011156:	bfb8      	it	lt
 8011158:	9204      	strlt	r2, [sp, #16]
 801115a:	7823      	ldrb	r3, [r4, #0]
 801115c:	2b2e      	cmp	r3, #46	@ 0x2e
 801115e:	d10a      	bne.n	8011176 <_vfiprintf_r+0x156>
 8011160:	7863      	ldrb	r3, [r4, #1]
 8011162:	2b2a      	cmp	r3, #42	@ 0x2a
 8011164:	d132      	bne.n	80111cc <_vfiprintf_r+0x1ac>
 8011166:	9b03      	ldr	r3, [sp, #12]
 8011168:	1d1a      	adds	r2, r3, #4
 801116a:	681b      	ldr	r3, [r3, #0]
 801116c:	9203      	str	r2, [sp, #12]
 801116e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011172:	3402      	adds	r4, #2
 8011174:	9305      	str	r3, [sp, #20]
 8011176:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801124c <_vfiprintf_r+0x22c>
 801117a:	7821      	ldrb	r1, [r4, #0]
 801117c:	2203      	movs	r2, #3
 801117e:	4650      	mov	r0, sl
 8011180:	f7ef f83e 	bl	8000200 <memchr>
 8011184:	b138      	cbz	r0, 8011196 <_vfiprintf_r+0x176>
 8011186:	9b04      	ldr	r3, [sp, #16]
 8011188:	eba0 000a 	sub.w	r0, r0, sl
 801118c:	2240      	movs	r2, #64	@ 0x40
 801118e:	4082      	lsls	r2, r0
 8011190:	4313      	orrs	r3, r2
 8011192:	3401      	adds	r4, #1
 8011194:	9304      	str	r3, [sp, #16]
 8011196:	f814 1b01 	ldrb.w	r1, [r4], #1
 801119a:	4829      	ldr	r0, [pc, #164]	@ (8011240 <_vfiprintf_r+0x220>)
 801119c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80111a0:	2206      	movs	r2, #6
 80111a2:	f7ef f82d 	bl	8000200 <memchr>
 80111a6:	2800      	cmp	r0, #0
 80111a8:	d03f      	beq.n	801122a <_vfiprintf_r+0x20a>
 80111aa:	4b26      	ldr	r3, [pc, #152]	@ (8011244 <_vfiprintf_r+0x224>)
 80111ac:	bb1b      	cbnz	r3, 80111f6 <_vfiprintf_r+0x1d6>
 80111ae:	9b03      	ldr	r3, [sp, #12]
 80111b0:	3307      	adds	r3, #7
 80111b2:	f023 0307 	bic.w	r3, r3, #7
 80111b6:	3308      	adds	r3, #8
 80111b8:	9303      	str	r3, [sp, #12]
 80111ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80111bc:	443b      	add	r3, r7
 80111be:	9309      	str	r3, [sp, #36]	@ 0x24
 80111c0:	e76a      	b.n	8011098 <_vfiprintf_r+0x78>
 80111c2:	fb0c 3202 	mla	r2, ip, r2, r3
 80111c6:	460c      	mov	r4, r1
 80111c8:	2001      	movs	r0, #1
 80111ca:	e7a8      	b.n	801111e <_vfiprintf_r+0xfe>
 80111cc:	2300      	movs	r3, #0
 80111ce:	3401      	adds	r4, #1
 80111d0:	9305      	str	r3, [sp, #20]
 80111d2:	4619      	mov	r1, r3
 80111d4:	f04f 0c0a 	mov.w	ip, #10
 80111d8:	4620      	mov	r0, r4
 80111da:	f810 2b01 	ldrb.w	r2, [r0], #1
 80111de:	3a30      	subs	r2, #48	@ 0x30
 80111e0:	2a09      	cmp	r2, #9
 80111e2:	d903      	bls.n	80111ec <_vfiprintf_r+0x1cc>
 80111e4:	2b00      	cmp	r3, #0
 80111e6:	d0c6      	beq.n	8011176 <_vfiprintf_r+0x156>
 80111e8:	9105      	str	r1, [sp, #20]
 80111ea:	e7c4      	b.n	8011176 <_vfiprintf_r+0x156>
 80111ec:	fb0c 2101 	mla	r1, ip, r1, r2
 80111f0:	4604      	mov	r4, r0
 80111f2:	2301      	movs	r3, #1
 80111f4:	e7f0      	b.n	80111d8 <_vfiprintf_r+0x1b8>
 80111f6:	ab03      	add	r3, sp, #12
 80111f8:	9300      	str	r3, [sp, #0]
 80111fa:	462a      	mov	r2, r5
 80111fc:	4b12      	ldr	r3, [pc, #72]	@ (8011248 <_vfiprintf_r+0x228>)
 80111fe:	a904      	add	r1, sp, #16
 8011200:	4630      	mov	r0, r6
 8011202:	f3af 8000 	nop.w
 8011206:	4607      	mov	r7, r0
 8011208:	1c78      	adds	r0, r7, #1
 801120a:	d1d6      	bne.n	80111ba <_vfiprintf_r+0x19a>
 801120c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801120e:	07d9      	lsls	r1, r3, #31
 8011210:	d405      	bmi.n	801121e <_vfiprintf_r+0x1fe>
 8011212:	89ab      	ldrh	r3, [r5, #12]
 8011214:	059a      	lsls	r2, r3, #22
 8011216:	d402      	bmi.n	801121e <_vfiprintf_r+0x1fe>
 8011218:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801121a:	f7fe fc63 	bl	800fae4 <__retarget_lock_release_recursive>
 801121e:	89ab      	ldrh	r3, [r5, #12]
 8011220:	065b      	lsls	r3, r3, #25
 8011222:	f53f af1f 	bmi.w	8011064 <_vfiprintf_r+0x44>
 8011226:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011228:	e71e      	b.n	8011068 <_vfiprintf_r+0x48>
 801122a:	ab03      	add	r3, sp, #12
 801122c:	9300      	str	r3, [sp, #0]
 801122e:	462a      	mov	r2, r5
 8011230:	4b05      	ldr	r3, [pc, #20]	@ (8011248 <_vfiprintf_r+0x228>)
 8011232:	a904      	add	r1, sp, #16
 8011234:	4630      	mov	r0, r6
 8011236:	f000 f879 	bl	801132c <_printf_i>
 801123a:	e7e4      	b.n	8011206 <_vfiprintf_r+0x1e6>
 801123c:	0801209b 	.word	0x0801209b
 8011240:	080120a5 	.word	0x080120a5
 8011244:	00000000 	.word	0x00000000
 8011248:	08010ffb 	.word	0x08010ffb
 801124c:	080120a1 	.word	0x080120a1

08011250 <_printf_common>:
 8011250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011254:	4616      	mov	r6, r2
 8011256:	4698      	mov	r8, r3
 8011258:	688a      	ldr	r2, [r1, #8]
 801125a:	690b      	ldr	r3, [r1, #16]
 801125c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8011260:	4293      	cmp	r3, r2
 8011262:	bfb8      	it	lt
 8011264:	4613      	movlt	r3, r2
 8011266:	6033      	str	r3, [r6, #0]
 8011268:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801126c:	4607      	mov	r7, r0
 801126e:	460c      	mov	r4, r1
 8011270:	b10a      	cbz	r2, 8011276 <_printf_common+0x26>
 8011272:	3301      	adds	r3, #1
 8011274:	6033      	str	r3, [r6, #0]
 8011276:	6823      	ldr	r3, [r4, #0]
 8011278:	0699      	lsls	r1, r3, #26
 801127a:	bf42      	ittt	mi
 801127c:	6833      	ldrmi	r3, [r6, #0]
 801127e:	3302      	addmi	r3, #2
 8011280:	6033      	strmi	r3, [r6, #0]
 8011282:	6825      	ldr	r5, [r4, #0]
 8011284:	f015 0506 	ands.w	r5, r5, #6
 8011288:	d106      	bne.n	8011298 <_printf_common+0x48>
 801128a:	f104 0a19 	add.w	sl, r4, #25
 801128e:	68e3      	ldr	r3, [r4, #12]
 8011290:	6832      	ldr	r2, [r6, #0]
 8011292:	1a9b      	subs	r3, r3, r2
 8011294:	42ab      	cmp	r3, r5
 8011296:	dc26      	bgt.n	80112e6 <_printf_common+0x96>
 8011298:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801129c:	6822      	ldr	r2, [r4, #0]
 801129e:	3b00      	subs	r3, #0
 80112a0:	bf18      	it	ne
 80112a2:	2301      	movne	r3, #1
 80112a4:	0692      	lsls	r2, r2, #26
 80112a6:	d42b      	bmi.n	8011300 <_printf_common+0xb0>
 80112a8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80112ac:	4641      	mov	r1, r8
 80112ae:	4638      	mov	r0, r7
 80112b0:	47c8      	blx	r9
 80112b2:	3001      	adds	r0, #1
 80112b4:	d01e      	beq.n	80112f4 <_printf_common+0xa4>
 80112b6:	6823      	ldr	r3, [r4, #0]
 80112b8:	6922      	ldr	r2, [r4, #16]
 80112ba:	f003 0306 	and.w	r3, r3, #6
 80112be:	2b04      	cmp	r3, #4
 80112c0:	bf02      	ittt	eq
 80112c2:	68e5      	ldreq	r5, [r4, #12]
 80112c4:	6833      	ldreq	r3, [r6, #0]
 80112c6:	1aed      	subeq	r5, r5, r3
 80112c8:	68a3      	ldr	r3, [r4, #8]
 80112ca:	bf0c      	ite	eq
 80112cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80112d0:	2500      	movne	r5, #0
 80112d2:	4293      	cmp	r3, r2
 80112d4:	bfc4      	itt	gt
 80112d6:	1a9b      	subgt	r3, r3, r2
 80112d8:	18ed      	addgt	r5, r5, r3
 80112da:	2600      	movs	r6, #0
 80112dc:	341a      	adds	r4, #26
 80112de:	42b5      	cmp	r5, r6
 80112e0:	d11a      	bne.n	8011318 <_printf_common+0xc8>
 80112e2:	2000      	movs	r0, #0
 80112e4:	e008      	b.n	80112f8 <_printf_common+0xa8>
 80112e6:	2301      	movs	r3, #1
 80112e8:	4652      	mov	r2, sl
 80112ea:	4641      	mov	r1, r8
 80112ec:	4638      	mov	r0, r7
 80112ee:	47c8      	blx	r9
 80112f0:	3001      	adds	r0, #1
 80112f2:	d103      	bne.n	80112fc <_printf_common+0xac>
 80112f4:	f04f 30ff 	mov.w	r0, #4294967295
 80112f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80112fc:	3501      	adds	r5, #1
 80112fe:	e7c6      	b.n	801128e <_printf_common+0x3e>
 8011300:	18e1      	adds	r1, r4, r3
 8011302:	1c5a      	adds	r2, r3, #1
 8011304:	2030      	movs	r0, #48	@ 0x30
 8011306:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801130a:	4422      	add	r2, r4
 801130c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8011310:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8011314:	3302      	adds	r3, #2
 8011316:	e7c7      	b.n	80112a8 <_printf_common+0x58>
 8011318:	2301      	movs	r3, #1
 801131a:	4622      	mov	r2, r4
 801131c:	4641      	mov	r1, r8
 801131e:	4638      	mov	r0, r7
 8011320:	47c8      	blx	r9
 8011322:	3001      	adds	r0, #1
 8011324:	d0e6      	beq.n	80112f4 <_printf_common+0xa4>
 8011326:	3601      	adds	r6, #1
 8011328:	e7d9      	b.n	80112de <_printf_common+0x8e>
	...

0801132c <_printf_i>:
 801132c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011330:	7e0f      	ldrb	r7, [r1, #24]
 8011332:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8011334:	2f78      	cmp	r7, #120	@ 0x78
 8011336:	4691      	mov	r9, r2
 8011338:	4680      	mov	r8, r0
 801133a:	460c      	mov	r4, r1
 801133c:	469a      	mov	sl, r3
 801133e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8011342:	d807      	bhi.n	8011354 <_printf_i+0x28>
 8011344:	2f62      	cmp	r7, #98	@ 0x62
 8011346:	d80a      	bhi.n	801135e <_printf_i+0x32>
 8011348:	2f00      	cmp	r7, #0
 801134a:	f000 80d1 	beq.w	80114f0 <_printf_i+0x1c4>
 801134e:	2f58      	cmp	r7, #88	@ 0x58
 8011350:	f000 80b8 	beq.w	80114c4 <_printf_i+0x198>
 8011354:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011358:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801135c:	e03a      	b.n	80113d4 <_printf_i+0xa8>
 801135e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8011362:	2b15      	cmp	r3, #21
 8011364:	d8f6      	bhi.n	8011354 <_printf_i+0x28>
 8011366:	a101      	add	r1, pc, #4	@ (adr r1, 801136c <_printf_i+0x40>)
 8011368:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801136c:	080113c5 	.word	0x080113c5
 8011370:	080113d9 	.word	0x080113d9
 8011374:	08011355 	.word	0x08011355
 8011378:	08011355 	.word	0x08011355
 801137c:	08011355 	.word	0x08011355
 8011380:	08011355 	.word	0x08011355
 8011384:	080113d9 	.word	0x080113d9
 8011388:	08011355 	.word	0x08011355
 801138c:	08011355 	.word	0x08011355
 8011390:	08011355 	.word	0x08011355
 8011394:	08011355 	.word	0x08011355
 8011398:	080114d7 	.word	0x080114d7
 801139c:	08011403 	.word	0x08011403
 80113a0:	08011491 	.word	0x08011491
 80113a4:	08011355 	.word	0x08011355
 80113a8:	08011355 	.word	0x08011355
 80113ac:	080114f9 	.word	0x080114f9
 80113b0:	08011355 	.word	0x08011355
 80113b4:	08011403 	.word	0x08011403
 80113b8:	08011355 	.word	0x08011355
 80113bc:	08011355 	.word	0x08011355
 80113c0:	08011499 	.word	0x08011499
 80113c4:	6833      	ldr	r3, [r6, #0]
 80113c6:	1d1a      	adds	r2, r3, #4
 80113c8:	681b      	ldr	r3, [r3, #0]
 80113ca:	6032      	str	r2, [r6, #0]
 80113cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80113d0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80113d4:	2301      	movs	r3, #1
 80113d6:	e09c      	b.n	8011512 <_printf_i+0x1e6>
 80113d8:	6833      	ldr	r3, [r6, #0]
 80113da:	6820      	ldr	r0, [r4, #0]
 80113dc:	1d19      	adds	r1, r3, #4
 80113de:	6031      	str	r1, [r6, #0]
 80113e0:	0606      	lsls	r6, r0, #24
 80113e2:	d501      	bpl.n	80113e8 <_printf_i+0xbc>
 80113e4:	681d      	ldr	r5, [r3, #0]
 80113e6:	e003      	b.n	80113f0 <_printf_i+0xc4>
 80113e8:	0645      	lsls	r5, r0, #25
 80113ea:	d5fb      	bpl.n	80113e4 <_printf_i+0xb8>
 80113ec:	f9b3 5000 	ldrsh.w	r5, [r3]
 80113f0:	2d00      	cmp	r5, #0
 80113f2:	da03      	bge.n	80113fc <_printf_i+0xd0>
 80113f4:	232d      	movs	r3, #45	@ 0x2d
 80113f6:	426d      	negs	r5, r5
 80113f8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80113fc:	4858      	ldr	r0, [pc, #352]	@ (8011560 <_printf_i+0x234>)
 80113fe:	230a      	movs	r3, #10
 8011400:	e011      	b.n	8011426 <_printf_i+0xfa>
 8011402:	6821      	ldr	r1, [r4, #0]
 8011404:	6833      	ldr	r3, [r6, #0]
 8011406:	0608      	lsls	r0, r1, #24
 8011408:	f853 5b04 	ldr.w	r5, [r3], #4
 801140c:	d402      	bmi.n	8011414 <_printf_i+0xe8>
 801140e:	0649      	lsls	r1, r1, #25
 8011410:	bf48      	it	mi
 8011412:	b2ad      	uxthmi	r5, r5
 8011414:	2f6f      	cmp	r7, #111	@ 0x6f
 8011416:	4852      	ldr	r0, [pc, #328]	@ (8011560 <_printf_i+0x234>)
 8011418:	6033      	str	r3, [r6, #0]
 801141a:	bf14      	ite	ne
 801141c:	230a      	movne	r3, #10
 801141e:	2308      	moveq	r3, #8
 8011420:	2100      	movs	r1, #0
 8011422:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8011426:	6866      	ldr	r6, [r4, #4]
 8011428:	60a6      	str	r6, [r4, #8]
 801142a:	2e00      	cmp	r6, #0
 801142c:	db05      	blt.n	801143a <_printf_i+0x10e>
 801142e:	6821      	ldr	r1, [r4, #0]
 8011430:	432e      	orrs	r6, r5
 8011432:	f021 0104 	bic.w	r1, r1, #4
 8011436:	6021      	str	r1, [r4, #0]
 8011438:	d04b      	beq.n	80114d2 <_printf_i+0x1a6>
 801143a:	4616      	mov	r6, r2
 801143c:	fbb5 f1f3 	udiv	r1, r5, r3
 8011440:	fb03 5711 	mls	r7, r3, r1, r5
 8011444:	5dc7      	ldrb	r7, [r0, r7]
 8011446:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801144a:	462f      	mov	r7, r5
 801144c:	42bb      	cmp	r3, r7
 801144e:	460d      	mov	r5, r1
 8011450:	d9f4      	bls.n	801143c <_printf_i+0x110>
 8011452:	2b08      	cmp	r3, #8
 8011454:	d10b      	bne.n	801146e <_printf_i+0x142>
 8011456:	6823      	ldr	r3, [r4, #0]
 8011458:	07df      	lsls	r7, r3, #31
 801145a:	d508      	bpl.n	801146e <_printf_i+0x142>
 801145c:	6923      	ldr	r3, [r4, #16]
 801145e:	6861      	ldr	r1, [r4, #4]
 8011460:	4299      	cmp	r1, r3
 8011462:	bfde      	ittt	le
 8011464:	2330      	movle	r3, #48	@ 0x30
 8011466:	f806 3c01 	strble.w	r3, [r6, #-1]
 801146a:	f106 36ff 	addle.w	r6, r6, #4294967295
 801146e:	1b92      	subs	r2, r2, r6
 8011470:	6122      	str	r2, [r4, #16]
 8011472:	f8cd a000 	str.w	sl, [sp]
 8011476:	464b      	mov	r3, r9
 8011478:	aa03      	add	r2, sp, #12
 801147a:	4621      	mov	r1, r4
 801147c:	4640      	mov	r0, r8
 801147e:	f7ff fee7 	bl	8011250 <_printf_common>
 8011482:	3001      	adds	r0, #1
 8011484:	d14a      	bne.n	801151c <_printf_i+0x1f0>
 8011486:	f04f 30ff 	mov.w	r0, #4294967295
 801148a:	b004      	add	sp, #16
 801148c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011490:	6823      	ldr	r3, [r4, #0]
 8011492:	f043 0320 	orr.w	r3, r3, #32
 8011496:	6023      	str	r3, [r4, #0]
 8011498:	4832      	ldr	r0, [pc, #200]	@ (8011564 <_printf_i+0x238>)
 801149a:	2778      	movs	r7, #120	@ 0x78
 801149c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80114a0:	6823      	ldr	r3, [r4, #0]
 80114a2:	6831      	ldr	r1, [r6, #0]
 80114a4:	061f      	lsls	r7, r3, #24
 80114a6:	f851 5b04 	ldr.w	r5, [r1], #4
 80114aa:	d402      	bmi.n	80114b2 <_printf_i+0x186>
 80114ac:	065f      	lsls	r7, r3, #25
 80114ae:	bf48      	it	mi
 80114b0:	b2ad      	uxthmi	r5, r5
 80114b2:	6031      	str	r1, [r6, #0]
 80114b4:	07d9      	lsls	r1, r3, #31
 80114b6:	bf44      	itt	mi
 80114b8:	f043 0320 	orrmi.w	r3, r3, #32
 80114bc:	6023      	strmi	r3, [r4, #0]
 80114be:	b11d      	cbz	r5, 80114c8 <_printf_i+0x19c>
 80114c0:	2310      	movs	r3, #16
 80114c2:	e7ad      	b.n	8011420 <_printf_i+0xf4>
 80114c4:	4826      	ldr	r0, [pc, #152]	@ (8011560 <_printf_i+0x234>)
 80114c6:	e7e9      	b.n	801149c <_printf_i+0x170>
 80114c8:	6823      	ldr	r3, [r4, #0]
 80114ca:	f023 0320 	bic.w	r3, r3, #32
 80114ce:	6023      	str	r3, [r4, #0]
 80114d0:	e7f6      	b.n	80114c0 <_printf_i+0x194>
 80114d2:	4616      	mov	r6, r2
 80114d4:	e7bd      	b.n	8011452 <_printf_i+0x126>
 80114d6:	6833      	ldr	r3, [r6, #0]
 80114d8:	6825      	ldr	r5, [r4, #0]
 80114da:	6961      	ldr	r1, [r4, #20]
 80114dc:	1d18      	adds	r0, r3, #4
 80114de:	6030      	str	r0, [r6, #0]
 80114e0:	062e      	lsls	r6, r5, #24
 80114e2:	681b      	ldr	r3, [r3, #0]
 80114e4:	d501      	bpl.n	80114ea <_printf_i+0x1be>
 80114e6:	6019      	str	r1, [r3, #0]
 80114e8:	e002      	b.n	80114f0 <_printf_i+0x1c4>
 80114ea:	0668      	lsls	r0, r5, #25
 80114ec:	d5fb      	bpl.n	80114e6 <_printf_i+0x1ba>
 80114ee:	8019      	strh	r1, [r3, #0]
 80114f0:	2300      	movs	r3, #0
 80114f2:	6123      	str	r3, [r4, #16]
 80114f4:	4616      	mov	r6, r2
 80114f6:	e7bc      	b.n	8011472 <_printf_i+0x146>
 80114f8:	6833      	ldr	r3, [r6, #0]
 80114fa:	1d1a      	adds	r2, r3, #4
 80114fc:	6032      	str	r2, [r6, #0]
 80114fe:	681e      	ldr	r6, [r3, #0]
 8011500:	6862      	ldr	r2, [r4, #4]
 8011502:	2100      	movs	r1, #0
 8011504:	4630      	mov	r0, r6
 8011506:	f7ee fe7b 	bl	8000200 <memchr>
 801150a:	b108      	cbz	r0, 8011510 <_printf_i+0x1e4>
 801150c:	1b80      	subs	r0, r0, r6
 801150e:	6060      	str	r0, [r4, #4]
 8011510:	6863      	ldr	r3, [r4, #4]
 8011512:	6123      	str	r3, [r4, #16]
 8011514:	2300      	movs	r3, #0
 8011516:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801151a:	e7aa      	b.n	8011472 <_printf_i+0x146>
 801151c:	6923      	ldr	r3, [r4, #16]
 801151e:	4632      	mov	r2, r6
 8011520:	4649      	mov	r1, r9
 8011522:	4640      	mov	r0, r8
 8011524:	47d0      	blx	sl
 8011526:	3001      	adds	r0, #1
 8011528:	d0ad      	beq.n	8011486 <_printf_i+0x15a>
 801152a:	6823      	ldr	r3, [r4, #0]
 801152c:	079b      	lsls	r3, r3, #30
 801152e:	d413      	bmi.n	8011558 <_printf_i+0x22c>
 8011530:	68e0      	ldr	r0, [r4, #12]
 8011532:	9b03      	ldr	r3, [sp, #12]
 8011534:	4298      	cmp	r0, r3
 8011536:	bfb8      	it	lt
 8011538:	4618      	movlt	r0, r3
 801153a:	e7a6      	b.n	801148a <_printf_i+0x15e>
 801153c:	2301      	movs	r3, #1
 801153e:	4632      	mov	r2, r6
 8011540:	4649      	mov	r1, r9
 8011542:	4640      	mov	r0, r8
 8011544:	47d0      	blx	sl
 8011546:	3001      	adds	r0, #1
 8011548:	d09d      	beq.n	8011486 <_printf_i+0x15a>
 801154a:	3501      	adds	r5, #1
 801154c:	68e3      	ldr	r3, [r4, #12]
 801154e:	9903      	ldr	r1, [sp, #12]
 8011550:	1a5b      	subs	r3, r3, r1
 8011552:	42ab      	cmp	r3, r5
 8011554:	dcf2      	bgt.n	801153c <_printf_i+0x210>
 8011556:	e7eb      	b.n	8011530 <_printf_i+0x204>
 8011558:	2500      	movs	r5, #0
 801155a:	f104 0619 	add.w	r6, r4, #25
 801155e:	e7f5      	b.n	801154c <_printf_i+0x220>
 8011560:	080120ac 	.word	0x080120ac
 8011564:	080120bd 	.word	0x080120bd

08011568 <__sflush_r>:
 8011568:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801156c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011570:	0716      	lsls	r6, r2, #28
 8011572:	4605      	mov	r5, r0
 8011574:	460c      	mov	r4, r1
 8011576:	d454      	bmi.n	8011622 <__sflush_r+0xba>
 8011578:	684b      	ldr	r3, [r1, #4]
 801157a:	2b00      	cmp	r3, #0
 801157c:	dc02      	bgt.n	8011584 <__sflush_r+0x1c>
 801157e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8011580:	2b00      	cmp	r3, #0
 8011582:	dd48      	ble.n	8011616 <__sflush_r+0xae>
 8011584:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011586:	2e00      	cmp	r6, #0
 8011588:	d045      	beq.n	8011616 <__sflush_r+0xae>
 801158a:	2300      	movs	r3, #0
 801158c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8011590:	682f      	ldr	r7, [r5, #0]
 8011592:	6a21      	ldr	r1, [r4, #32]
 8011594:	602b      	str	r3, [r5, #0]
 8011596:	d030      	beq.n	80115fa <__sflush_r+0x92>
 8011598:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801159a:	89a3      	ldrh	r3, [r4, #12]
 801159c:	0759      	lsls	r1, r3, #29
 801159e:	d505      	bpl.n	80115ac <__sflush_r+0x44>
 80115a0:	6863      	ldr	r3, [r4, #4]
 80115a2:	1ad2      	subs	r2, r2, r3
 80115a4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80115a6:	b10b      	cbz	r3, 80115ac <__sflush_r+0x44>
 80115a8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80115aa:	1ad2      	subs	r2, r2, r3
 80115ac:	2300      	movs	r3, #0
 80115ae:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80115b0:	6a21      	ldr	r1, [r4, #32]
 80115b2:	4628      	mov	r0, r5
 80115b4:	47b0      	blx	r6
 80115b6:	1c43      	adds	r3, r0, #1
 80115b8:	89a3      	ldrh	r3, [r4, #12]
 80115ba:	d106      	bne.n	80115ca <__sflush_r+0x62>
 80115bc:	6829      	ldr	r1, [r5, #0]
 80115be:	291d      	cmp	r1, #29
 80115c0:	d82b      	bhi.n	801161a <__sflush_r+0xb2>
 80115c2:	4a2a      	ldr	r2, [pc, #168]	@ (801166c <__sflush_r+0x104>)
 80115c4:	40ca      	lsrs	r2, r1
 80115c6:	07d6      	lsls	r6, r2, #31
 80115c8:	d527      	bpl.n	801161a <__sflush_r+0xb2>
 80115ca:	2200      	movs	r2, #0
 80115cc:	6062      	str	r2, [r4, #4]
 80115ce:	04d9      	lsls	r1, r3, #19
 80115d0:	6922      	ldr	r2, [r4, #16]
 80115d2:	6022      	str	r2, [r4, #0]
 80115d4:	d504      	bpl.n	80115e0 <__sflush_r+0x78>
 80115d6:	1c42      	adds	r2, r0, #1
 80115d8:	d101      	bne.n	80115de <__sflush_r+0x76>
 80115da:	682b      	ldr	r3, [r5, #0]
 80115dc:	b903      	cbnz	r3, 80115e0 <__sflush_r+0x78>
 80115de:	6560      	str	r0, [r4, #84]	@ 0x54
 80115e0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80115e2:	602f      	str	r7, [r5, #0]
 80115e4:	b1b9      	cbz	r1, 8011616 <__sflush_r+0xae>
 80115e6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80115ea:	4299      	cmp	r1, r3
 80115ec:	d002      	beq.n	80115f4 <__sflush_r+0x8c>
 80115ee:	4628      	mov	r0, r5
 80115f0:	f7fe fa9a 	bl	800fb28 <_free_r>
 80115f4:	2300      	movs	r3, #0
 80115f6:	6363      	str	r3, [r4, #52]	@ 0x34
 80115f8:	e00d      	b.n	8011616 <__sflush_r+0xae>
 80115fa:	2301      	movs	r3, #1
 80115fc:	4628      	mov	r0, r5
 80115fe:	47b0      	blx	r6
 8011600:	4602      	mov	r2, r0
 8011602:	1c50      	adds	r0, r2, #1
 8011604:	d1c9      	bne.n	801159a <__sflush_r+0x32>
 8011606:	682b      	ldr	r3, [r5, #0]
 8011608:	2b00      	cmp	r3, #0
 801160a:	d0c6      	beq.n	801159a <__sflush_r+0x32>
 801160c:	2b1d      	cmp	r3, #29
 801160e:	d001      	beq.n	8011614 <__sflush_r+0xac>
 8011610:	2b16      	cmp	r3, #22
 8011612:	d11e      	bne.n	8011652 <__sflush_r+0xea>
 8011614:	602f      	str	r7, [r5, #0]
 8011616:	2000      	movs	r0, #0
 8011618:	e022      	b.n	8011660 <__sflush_r+0xf8>
 801161a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801161e:	b21b      	sxth	r3, r3
 8011620:	e01b      	b.n	801165a <__sflush_r+0xf2>
 8011622:	690f      	ldr	r7, [r1, #16]
 8011624:	2f00      	cmp	r7, #0
 8011626:	d0f6      	beq.n	8011616 <__sflush_r+0xae>
 8011628:	0793      	lsls	r3, r2, #30
 801162a:	680e      	ldr	r6, [r1, #0]
 801162c:	bf08      	it	eq
 801162e:	694b      	ldreq	r3, [r1, #20]
 8011630:	600f      	str	r7, [r1, #0]
 8011632:	bf18      	it	ne
 8011634:	2300      	movne	r3, #0
 8011636:	eba6 0807 	sub.w	r8, r6, r7
 801163a:	608b      	str	r3, [r1, #8]
 801163c:	f1b8 0f00 	cmp.w	r8, #0
 8011640:	dde9      	ble.n	8011616 <__sflush_r+0xae>
 8011642:	6a21      	ldr	r1, [r4, #32]
 8011644:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8011646:	4643      	mov	r3, r8
 8011648:	463a      	mov	r2, r7
 801164a:	4628      	mov	r0, r5
 801164c:	47b0      	blx	r6
 801164e:	2800      	cmp	r0, #0
 8011650:	dc08      	bgt.n	8011664 <__sflush_r+0xfc>
 8011652:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011656:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801165a:	81a3      	strh	r3, [r4, #12]
 801165c:	f04f 30ff 	mov.w	r0, #4294967295
 8011660:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011664:	4407      	add	r7, r0
 8011666:	eba8 0800 	sub.w	r8, r8, r0
 801166a:	e7e7      	b.n	801163c <__sflush_r+0xd4>
 801166c:	20400001 	.word	0x20400001

08011670 <_fflush_r>:
 8011670:	b538      	push	{r3, r4, r5, lr}
 8011672:	690b      	ldr	r3, [r1, #16]
 8011674:	4605      	mov	r5, r0
 8011676:	460c      	mov	r4, r1
 8011678:	b913      	cbnz	r3, 8011680 <_fflush_r+0x10>
 801167a:	2500      	movs	r5, #0
 801167c:	4628      	mov	r0, r5
 801167e:	bd38      	pop	{r3, r4, r5, pc}
 8011680:	b118      	cbz	r0, 801168a <_fflush_r+0x1a>
 8011682:	6a03      	ldr	r3, [r0, #32]
 8011684:	b90b      	cbnz	r3, 801168a <_fflush_r+0x1a>
 8011686:	f7fe f867 	bl	800f758 <__sinit>
 801168a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801168e:	2b00      	cmp	r3, #0
 8011690:	d0f3      	beq.n	801167a <_fflush_r+0xa>
 8011692:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8011694:	07d0      	lsls	r0, r2, #31
 8011696:	d404      	bmi.n	80116a2 <_fflush_r+0x32>
 8011698:	0599      	lsls	r1, r3, #22
 801169a:	d402      	bmi.n	80116a2 <_fflush_r+0x32>
 801169c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801169e:	f7fe fa20 	bl	800fae2 <__retarget_lock_acquire_recursive>
 80116a2:	4628      	mov	r0, r5
 80116a4:	4621      	mov	r1, r4
 80116a6:	f7ff ff5f 	bl	8011568 <__sflush_r>
 80116aa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80116ac:	07da      	lsls	r2, r3, #31
 80116ae:	4605      	mov	r5, r0
 80116b0:	d4e4      	bmi.n	801167c <_fflush_r+0xc>
 80116b2:	89a3      	ldrh	r3, [r4, #12]
 80116b4:	059b      	lsls	r3, r3, #22
 80116b6:	d4e1      	bmi.n	801167c <_fflush_r+0xc>
 80116b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80116ba:	f7fe fa13 	bl	800fae4 <__retarget_lock_release_recursive>
 80116be:	e7dd      	b.n	801167c <_fflush_r+0xc>

080116c0 <__swbuf_r>:
 80116c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80116c2:	460e      	mov	r6, r1
 80116c4:	4614      	mov	r4, r2
 80116c6:	4605      	mov	r5, r0
 80116c8:	b118      	cbz	r0, 80116d2 <__swbuf_r+0x12>
 80116ca:	6a03      	ldr	r3, [r0, #32]
 80116cc:	b90b      	cbnz	r3, 80116d2 <__swbuf_r+0x12>
 80116ce:	f7fe f843 	bl	800f758 <__sinit>
 80116d2:	69a3      	ldr	r3, [r4, #24]
 80116d4:	60a3      	str	r3, [r4, #8]
 80116d6:	89a3      	ldrh	r3, [r4, #12]
 80116d8:	071a      	lsls	r2, r3, #28
 80116da:	d501      	bpl.n	80116e0 <__swbuf_r+0x20>
 80116dc:	6923      	ldr	r3, [r4, #16]
 80116de:	b943      	cbnz	r3, 80116f2 <__swbuf_r+0x32>
 80116e0:	4621      	mov	r1, r4
 80116e2:	4628      	mov	r0, r5
 80116e4:	f000 f82a 	bl	801173c <__swsetup_r>
 80116e8:	b118      	cbz	r0, 80116f2 <__swbuf_r+0x32>
 80116ea:	f04f 37ff 	mov.w	r7, #4294967295
 80116ee:	4638      	mov	r0, r7
 80116f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80116f2:	6823      	ldr	r3, [r4, #0]
 80116f4:	6922      	ldr	r2, [r4, #16]
 80116f6:	1a98      	subs	r0, r3, r2
 80116f8:	6963      	ldr	r3, [r4, #20]
 80116fa:	b2f6      	uxtb	r6, r6
 80116fc:	4283      	cmp	r3, r0
 80116fe:	4637      	mov	r7, r6
 8011700:	dc05      	bgt.n	801170e <__swbuf_r+0x4e>
 8011702:	4621      	mov	r1, r4
 8011704:	4628      	mov	r0, r5
 8011706:	f7ff ffb3 	bl	8011670 <_fflush_r>
 801170a:	2800      	cmp	r0, #0
 801170c:	d1ed      	bne.n	80116ea <__swbuf_r+0x2a>
 801170e:	68a3      	ldr	r3, [r4, #8]
 8011710:	3b01      	subs	r3, #1
 8011712:	60a3      	str	r3, [r4, #8]
 8011714:	6823      	ldr	r3, [r4, #0]
 8011716:	1c5a      	adds	r2, r3, #1
 8011718:	6022      	str	r2, [r4, #0]
 801171a:	701e      	strb	r6, [r3, #0]
 801171c:	6962      	ldr	r2, [r4, #20]
 801171e:	1c43      	adds	r3, r0, #1
 8011720:	429a      	cmp	r2, r3
 8011722:	d004      	beq.n	801172e <__swbuf_r+0x6e>
 8011724:	89a3      	ldrh	r3, [r4, #12]
 8011726:	07db      	lsls	r3, r3, #31
 8011728:	d5e1      	bpl.n	80116ee <__swbuf_r+0x2e>
 801172a:	2e0a      	cmp	r6, #10
 801172c:	d1df      	bne.n	80116ee <__swbuf_r+0x2e>
 801172e:	4621      	mov	r1, r4
 8011730:	4628      	mov	r0, r5
 8011732:	f7ff ff9d 	bl	8011670 <_fflush_r>
 8011736:	2800      	cmp	r0, #0
 8011738:	d0d9      	beq.n	80116ee <__swbuf_r+0x2e>
 801173a:	e7d6      	b.n	80116ea <__swbuf_r+0x2a>

0801173c <__swsetup_r>:
 801173c:	b538      	push	{r3, r4, r5, lr}
 801173e:	4b29      	ldr	r3, [pc, #164]	@ (80117e4 <__swsetup_r+0xa8>)
 8011740:	4605      	mov	r5, r0
 8011742:	6818      	ldr	r0, [r3, #0]
 8011744:	460c      	mov	r4, r1
 8011746:	b118      	cbz	r0, 8011750 <__swsetup_r+0x14>
 8011748:	6a03      	ldr	r3, [r0, #32]
 801174a:	b90b      	cbnz	r3, 8011750 <__swsetup_r+0x14>
 801174c:	f7fe f804 	bl	800f758 <__sinit>
 8011750:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011754:	0719      	lsls	r1, r3, #28
 8011756:	d422      	bmi.n	801179e <__swsetup_r+0x62>
 8011758:	06da      	lsls	r2, r3, #27
 801175a:	d407      	bmi.n	801176c <__swsetup_r+0x30>
 801175c:	2209      	movs	r2, #9
 801175e:	602a      	str	r2, [r5, #0]
 8011760:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011764:	81a3      	strh	r3, [r4, #12]
 8011766:	f04f 30ff 	mov.w	r0, #4294967295
 801176a:	e033      	b.n	80117d4 <__swsetup_r+0x98>
 801176c:	0758      	lsls	r0, r3, #29
 801176e:	d512      	bpl.n	8011796 <__swsetup_r+0x5a>
 8011770:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011772:	b141      	cbz	r1, 8011786 <__swsetup_r+0x4a>
 8011774:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011778:	4299      	cmp	r1, r3
 801177a:	d002      	beq.n	8011782 <__swsetup_r+0x46>
 801177c:	4628      	mov	r0, r5
 801177e:	f7fe f9d3 	bl	800fb28 <_free_r>
 8011782:	2300      	movs	r3, #0
 8011784:	6363      	str	r3, [r4, #52]	@ 0x34
 8011786:	89a3      	ldrh	r3, [r4, #12]
 8011788:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801178c:	81a3      	strh	r3, [r4, #12]
 801178e:	2300      	movs	r3, #0
 8011790:	6063      	str	r3, [r4, #4]
 8011792:	6923      	ldr	r3, [r4, #16]
 8011794:	6023      	str	r3, [r4, #0]
 8011796:	89a3      	ldrh	r3, [r4, #12]
 8011798:	f043 0308 	orr.w	r3, r3, #8
 801179c:	81a3      	strh	r3, [r4, #12]
 801179e:	6923      	ldr	r3, [r4, #16]
 80117a0:	b94b      	cbnz	r3, 80117b6 <__swsetup_r+0x7a>
 80117a2:	89a3      	ldrh	r3, [r4, #12]
 80117a4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80117a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80117ac:	d003      	beq.n	80117b6 <__swsetup_r+0x7a>
 80117ae:	4621      	mov	r1, r4
 80117b0:	4628      	mov	r0, r5
 80117b2:	f000 f8e3 	bl	801197c <__smakebuf_r>
 80117b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80117ba:	f013 0201 	ands.w	r2, r3, #1
 80117be:	d00a      	beq.n	80117d6 <__swsetup_r+0x9a>
 80117c0:	2200      	movs	r2, #0
 80117c2:	60a2      	str	r2, [r4, #8]
 80117c4:	6962      	ldr	r2, [r4, #20]
 80117c6:	4252      	negs	r2, r2
 80117c8:	61a2      	str	r2, [r4, #24]
 80117ca:	6922      	ldr	r2, [r4, #16]
 80117cc:	b942      	cbnz	r2, 80117e0 <__swsetup_r+0xa4>
 80117ce:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80117d2:	d1c5      	bne.n	8011760 <__swsetup_r+0x24>
 80117d4:	bd38      	pop	{r3, r4, r5, pc}
 80117d6:	0799      	lsls	r1, r3, #30
 80117d8:	bf58      	it	pl
 80117da:	6962      	ldrpl	r2, [r4, #20]
 80117dc:	60a2      	str	r2, [r4, #8]
 80117de:	e7f4      	b.n	80117ca <__swsetup_r+0x8e>
 80117e0:	2000      	movs	r0, #0
 80117e2:	e7f7      	b.n	80117d4 <__swsetup_r+0x98>
 80117e4:	200001ac 	.word	0x200001ac

080117e8 <memmove>:
 80117e8:	4288      	cmp	r0, r1
 80117ea:	b510      	push	{r4, lr}
 80117ec:	eb01 0402 	add.w	r4, r1, r2
 80117f0:	d902      	bls.n	80117f8 <memmove+0x10>
 80117f2:	4284      	cmp	r4, r0
 80117f4:	4623      	mov	r3, r4
 80117f6:	d807      	bhi.n	8011808 <memmove+0x20>
 80117f8:	1e43      	subs	r3, r0, #1
 80117fa:	42a1      	cmp	r1, r4
 80117fc:	d008      	beq.n	8011810 <memmove+0x28>
 80117fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011802:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011806:	e7f8      	b.n	80117fa <memmove+0x12>
 8011808:	4402      	add	r2, r0
 801180a:	4601      	mov	r1, r0
 801180c:	428a      	cmp	r2, r1
 801180e:	d100      	bne.n	8011812 <memmove+0x2a>
 8011810:	bd10      	pop	{r4, pc}
 8011812:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011816:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801181a:	e7f7      	b.n	801180c <memmove+0x24>

0801181c <_sbrk_r>:
 801181c:	b538      	push	{r3, r4, r5, lr}
 801181e:	4d06      	ldr	r5, [pc, #24]	@ (8011838 <_sbrk_r+0x1c>)
 8011820:	2300      	movs	r3, #0
 8011822:	4604      	mov	r4, r0
 8011824:	4608      	mov	r0, r1
 8011826:	602b      	str	r3, [r5, #0]
 8011828:	f7f1 f99a 	bl	8002b60 <_sbrk>
 801182c:	1c43      	adds	r3, r0, #1
 801182e:	d102      	bne.n	8011836 <_sbrk_r+0x1a>
 8011830:	682b      	ldr	r3, [r5, #0]
 8011832:	b103      	cbz	r3, 8011836 <_sbrk_r+0x1a>
 8011834:	6023      	str	r3, [r4, #0]
 8011836:	bd38      	pop	{r3, r4, r5, pc}
 8011838:	20003e78 	.word	0x20003e78

0801183c <__assert_func>:
 801183c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801183e:	4614      	mov	r4, r2
 8011840:	461a      	mov	r2, r3
 8011842:	4b09      	ldr	r3, [pc, #36]	@ (8011868 <__assert_func+0x2c>)
 8011844:	681b      	ldr	r3, [r3, #0]
 8011846:	4605      	mov	r5, r0
 8011848:	68d8      	ldr	r0, [r3, #12]
 801184a:	b14c      	cbz	r4, 8011860 <__assert_func+0x24>
 801184c:	4b07      	ldr	r3, [pc, #28]	@ (801186c <__assert_func+0x30>)
 801184e:	9100      	str	r1, [sp, #0]
 8011850:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011854:	4906      	ldr	r1, [pc, #24]	@ (8011870 <__assert_func+0x34>)
 8011856:	462b      	mov	r3, r5
 8011858:	f000 f858 	bl	801190c <fiprintf>
 801185c:	f000 f8ec 	bl	8011a38 <abort>
 8011860:	4b04      	ldr	r3, [pc, #16]	@ (8011874 <__assert_func+0x38>)
 8011862:	461c      	mov	r4, r3
 8011864:	e7f3      	b.n	801184e <__assert_func+0x12>
 8011866:	bf00      	nop
 8011868:	200001ac 	.word	0x200001ac
 801186c:	080120ce 	.word	0x080120ce
 8011870:	080120db 	.word	0x080120db
 8011874:	08012109 	.word	0x08012109

08011878 <_calloc_r>:
 8011878:	b570      	push	{r4, r5, r6, lr}
 801187a:	fba1 5402 	umull	r5, r4, r1, r2
 801187e:	b934      	cbnz	r4, 801188e <_calloc_r+0x16>
 8011880:	4629      	mov	r1, r5
 8011882:	f7fe fcf7 	bl	8010274 <_malloc_r>
 8011886:	4606      	mov	r6, r0
 8011888:	b928      	cbnz	r0, 8011896 <_calloc_r+0x1e>
 801188a:	4630      	mov	r0, r6
 801188c:	bd70      	pop	{r4, r5, r6, pc}
 801188e:	220c      	movs	r2, #12
 8011890:	6002      	str	r2, [r0, #0]
 8011892:	2600      	movs	r6, #0
 8011894:	e7f9      	b.n	801188a <_calloc_r+0x12>
 8011896:	462a      	mov	r2, r5
 8011898:	4621      	mov	r1, r4
 801189a:	f7fe f825 	bl	800f8e8 <memset>
 801189e:	e7f4      	b.n	801188a <_calloc_r+0x12>

080118a0 <malloc>:
 80118a0:	4b02      	ldr	r3, [pc, #8]	@ (80118ac <malloc+0xc>)
 80118a2:	4601      	mov	r1, r0
 80118a4:	6818      	ldr	r0, [r3, #0]
 80118a6:	f7fe bce5 	b.w	8010274 <_malloc_r>
 80118aa:	bf00      	nop
 80118ac:	200001ac 	.word	0x200001ac

080118b0 <_realloc_r>:
 80118b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80118b4:	4607      	mov	r7, r0
 80118b6:	4614      	mov	r4, r2
 80118b8:	460d      	mov	r5, r1
 80118ba:	b921      	cbnz	r1, 80118c6 <_realloc_r+0x16>
 80118bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80118c0:	4611      	mov	r1, r2
 80118c2:	f7fe bcd7 	b.w	8010274 <_malloc_r>
 80118c6:	b92a      	cbnz	r2, 80118d4 <_realloc_r+0x24>
 80118c8:	f7fe f92e 	bl	800fb28 <_free_r>
 80118cc:	4625      	mov	r5, r4
 80118ce:	4628      	mov	r0, r5
 80118d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80118d4:	f000 f8b7 	bl	8011a46 <_malloc_usable_size_r>
 80118d8:	4284      	cmp	r4, r0
 80118da:	4606      	mov	r6, r0
 80118dc:	d802      	bhi.n	80118e4 <_realloc_r+0x34>
 80118de:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80118e2:	d8f4      	bhi.n	80118ce <_realloc_r+0x1e>
 80118e4:	4621      	mov	r1, r4
 80118e6:	4638      	mov	r0, r7
 80118e8:	f7fe fcc4 	bl	8010274 <_malloc_r>
 80118ec:	4680      	mov	r8, r0
 80118ee:	b908      	cbnz	r0, 80118f4 <_realloc_r+0x44>
 80118f0:	4645      	mov	r5, r8
 80118f2:	e7ec      	b.n	80118ce <_realloc_r+0x1e>
 80118f4:	42b4      	cmp	r4, r6
 80118f6:	4622      	mov	r2, r4
 80118f8:	4629      	mov	r1, r5
 80118fa:	bf28      	it	cs
 80118fc:	4632      	movcs	r2, r6
 80118fe:	f7fe f8fa 	bl	800faf6 <memcpy>
 8011902:	4629      	mov	r1, r5
 8011904:	4638      	mov	r0, r7
 8011906:	f7fe f90f 	bl	800fb28 <_free_r>
 801190a:	e7f1      	b.n	80118f0 <_realloc_r+0x40>

0801190c <fiprintf>:
 801190c:	b40e      	push	{r1, r2, r3}
 801190e:	b503      	push	{r0, r1, lr}
 8011910:	4601      	mov	r1, r0
 8011912:	ab03      	add	r3, sp, #12
 8011914:	4805      	ldr	r0, [pc, #20]	@ (801192c <fiprintf+0x20>)
 8011916:	f853 2b04 	ldr.w	r2, [r3], #4
 801191a:	6800      	ldr	r0, [r0, #0]
 801191c:	9301      	str	r3, [sp, #4]
 801191e:	f7ff fb7f 	bl	8011020 <_vfiprintf_r>
 8011922:	b002      	add	sp, #8
 8011924:	f85d eb04 	ldr.w	lr, [sp], #4
 8011928:	b003      	add	sp, #12
 801192a:	4770      	bx	lr
 801192c:	200001ac 	.word	0x200001ac

08011930 <__swhatbuf_r>:
 8011930:	b570      	push	{r4, r5, r6, lr}
 8011932:	460c      	mov	r4, r1
 8011934:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011938:	2900      	cmp	r1, #0
 801193a:	b096      	sub	sp, #88	@ 0x58
 801193c:	4615      	mov	r5, r2
 801193e:	461e      	mov	r6, r3
 8011940:	da0d      	bge.n	801195e <__swhatbuf_r+0x2e>
 8011942:	89a3      	ldrh	r3, [r4, #12]
 8011944:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8011948:	f04f 0100 	mov.w	r1, #0
 801194c:	bf14      	ite	ne
 801194e:	2340      	movne	r3, #64	@ 0x40
 8011950:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8011954:	2000      	movs	r0, #0
 8011956:	6031      	str	r1, [r6, #0]
 8011958:	602b      	str	r3, [r5, #0]
 801195a:	b016      	add	sp, #88	@ 0x58
 801195c:	bd70      	pop	{r4, r5, r6, pc}
 801195e:	466a      	mov	r2, sp
 8011960:	f000 f848 	bl	80119f4 <_fstat_r>
 8011964:	2800      	cmp	r0, #0
 8011966:	dbec      	blt.n	8011942 <__swhatbuf_r+0x12>
 8011968:	9901      	ldr	r1, [sp, #4]
 801196a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801196e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8011972:	4259      	negs	r1, r3
 8011974:	4159      	adcs	r1, r3
 8011976:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801197a:	e7eb      	b.n	8011954 <__swhatbuf_r+0x24>

0801197c <__smakebuf_r>:
 801197c:	898b      	ldrh	r3, [r1, #12]
 801197e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011980:	079d      	lsls	r5, r3, #30
 8011982:	4606      	mov	r6, r0
 8011984:	460c      	mov	r4, r1
 8011986:	d507      	bpl.n	8011998 <__smakebuf_r+0x1c>
 8011988:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801198c:	6023      	str	r3, [r4, #0]
 801198e:	6123      	str	r3, [r4, #16]
 8011990:	2301      	movs	r3, #1
 8011992:	6163      	str	r3, [r4, #20]
 8011994:	b003      	add	sp, #12
 8011996:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011998:	ab01      	add	r3, sp, #4
 801199a:	466a      	mov	r2, sp
 801199c:	f7ff ffc8 	bl	8011930 <__swhatbuf_r>
 80119a0:	9f00      	ldr	r7, [sp, #0]
 80119a2:	4605      	mov	r5, r0
 80119a4:	4639      	mov	r1, r7
 80119a6:	4630      	mov	r0, r6
 80119a8:	f7fe fc64 	bl	8010274 <_malloc_r>
 80119ac:	b948      	cbnz	r0, 80119c2 <__smakebuf_r+0x46>
 80119ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80119b2:	059a      	lsls	r2, r3, #22
 80119b4:	d4ee      	bmi.n	8011994 <__smakebuf_r+0x18>
 80119b6:	f023 0303 	bic.w	r3, r3, #3
 80119ba:	f043 0302 	orr.w	r3, r3, #2
 80119be:	81a3      	strh	r3, [r4, #12]
 80119c0:	e7e2      	b.n	8011988 <__smakebuf_r+0xc>
 80119c2:	89a3      	ldrh	r3, [r4, #12]
 80119c4:	6020      	str	r0, [r4, #0]
 80119c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80119ca:	81a3      	strh	r3, [r4, #12]
 80119cc:	9b01      	ldr	r3, [sp, #4]
 80119ce:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80119d2:	b15b      	cbz	r3, 80119ec <__smakebuf_r+0x70>
 80119d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80119d8:	4630      	mov	r0, r6
 80119da:	f000 f81d 	bl	8011a18 <_isatty_r>
 80119de:	b128      	cbz	r0, 80119ec <__smakebuf_r+0x70>
 80119e0:	89a3      	ldrh	r3, [r4, #12]
 80119e2:	f023 0303 	bic.w	r3, r3, #3
 80119e6:	f043 0301 	orr.w	r3, r3, #1
 80119ea:	81a3      	strh	r3, [r4, #12]
 80119ec:	89a3      	ldrh	r3, [r4, #12]
 80119ee:	431d      	orrs	r5, r3
 80119f0:	81a5      	strh	r5, [r4, #12]
 80119f2:	e7cf      	b.n	8011994 <__smakebuf_r+0x18>

080119f4 <_fstat_r>:
 80119f4:	b538      	push	{r3, r4, r5, lr}
 80119f6:	4d07      	ldr	r5, [pc, #28]	@ (8011a14 <_fstat_r+0x20>)
 80119f8:	2300      	movs	r3, #0
 80119fa:	4604      	mov	r4, r0
 80119fc:	4608      	mov	r0, r1
 80119fe:	4611      	mov	r1, r2
 8011a00:	602b      	str	r3, [r5, #0]
 8011a02:	f7f1 f885 	bl	8002b10 <_fstat>
 8011a06:	1c43      	adds	r3, r0, #1
 8011a08:	d102      	bne.n	8011a10 <_fstat_r+0x1c>
 8011a0a:	682b      	ldr	r3, [r5, #0]
 8011a0c:	b103      	cbz	r3, 8011a10 <_fstat_r+0x1c>
 8011a0e:	6023      	str	r3, [r4, #0]
 8011a10:	bd38      	pop	{r3, r4, r5, pc}
 8011a12:	bf00      	nop
 8011a14:	20003e78 	.word	0x20003e78

08011a18 <_isatty_r>:
 8011a18:	b538      	push	{r3, r4, r5, lr}
 8011a1a:	4d06      	ldr	r5, [pc, #24]	@ (8011a34 <_isatty_r+0x1c>)
 8011a1c:	2300      	movs	r3, #0
 8011a1e:	4604      	mov	r4, r0
 8011a20:	4608      	mov	r0, r1
 8011a22:	602b      	str	r3, [r5, #0]
 8011a24:	f7f1 f884 	bl	8002b30 <_isatty>
 8011a28:	1c43      	adds	r3, r0, #1
 8011a2a:	d102      	bne.n	8011a32 <_isatty_r+0x1a>
 8011a2c:	682b      	ldr	r3, [r5, #0]
 8011a2e:	b103      	cbz	r3, 8011a32 <_isatty_r+0x1a>
 8011a30:	6023      	str	r3, [r4, #0]
 8011a32:	bd38      	pop	{r3, r4, r5, pc}
 8011a34:	20003e78 	.word	0x20003e78

08011a38 <abort>:
 8011a38:	b508      	push	{r3, lr}
 8011a3a:	2006      	movs	r0, #6
 8011a3c:	f000 f834 	bl	8011aa8 <raise>
 8011a40:	2001      	movs	r0, #1
 8011a42:	f7f1 f815 	bl	8002a70 <_exit>

08011a46 <_malloc_usable_size_r>:
 8011a46:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011a4a:	1f18      	subs	r0, r3, #4
 8011a4c:	2b00      	cmp	r3, #0
 8011a4e:	bfbc      	itt	lt
 8011a50:	580b      	ldrlt	r3, [r1, r0]
 8011a52:	18c0      	addlt	r0, r0, r3
 8011a54:	4770      	bx	lr

08011a56 <_raise_r>:
 8011a56:	291f      	cmp	r1, #31
 8011a58:	b538      	push	{r3, r4, r5, lr}
 8011a5a:	4605      	mov	r5, r0
 8011a5c:	460c      	mov	r4, r1
 8011a5e:	d904      	bls.n	8011a6a <_raise_r+0x14>
 8011a60:	2316      	movs	r3, #22
 8011a62:	6003      	str	r3, [r0, #0]
 8011a64:	f04f 30ff 	mov.w	r0, #4294967295
 8011a68:	bd38      	pop	{r3, r4, r5, pc}
 8011a6a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8011a6c:	b112      	cbz	r2, 8011a74 <_raise_r+0x1e>
 8011a6e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011a72:	b94b      	cbnz	r3, 8011a88 <_raise_r+0x32>
 8011a74:	4628      	mov	r0, r5
 8011a76:	f000 f831 	bl	8011adc <_getpid_r>
 8011a7a:	4622      	mov	r2, r4
 8011a7c:	4601      	mov	r1, r0
 8011a7e:	4628      	mov	r0, r5
 8011a80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011a84:	f000 b818 	b.w	8011ab8 <_kill_r>
 8011a88:	2b01      	cmp	r3, #1
 8011a8a:	d00a      	beq.n	8011aa2 <_raise_r+0x4c>
 8011a8c:	1c59      	adds	r1, r3, #1
 8011a8e:	d103      	bne.n	8011a98 <_raise_r+0x42>
 8011a90:	2316      	movs	r3, #22
 8011a92:	6003      	str	r3, [r0, #0]
 8011a94:	2001      	movs	r0, #1
 8011a96:	e7e7      	b.n	8011a68 <_raise_r+0x12>
 8011a98:	2100      	movs	r1, #0
 8011a9a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8011a9e:	4620      	mov	r0, r4
 8011aa0:	4798      	blx	r3
 8011aa2:	2000      	movs	r0, #0
 8011aa4:	e7e0      	b.n	8011a68 <_raise_r+0x12>
	...

08011aa8 <raise>:
 8011aa8:	4b02      	ldr	r3, [pc, #8]	@ (8011ab4 <raise+0xc>)
 8011aaa:	4601      	mov	r1, r0
 8011aac:	6818      	ldr	r0, [r3, #0]
 8011aae:	f7ff bfd2 	b.w	8011a56 <_raise_r>
 8011ab2:	bf00      	nop
 8011ab4:	200001ac 	.word	0x200001ac

08011ab8 <_kill_r>:
 8011ab8:	b538      	push	{r3, r4, r5, lr}
 8011aba:	4d07      	ldr	r5, [pc, #28]	@ (8011ad8 <_kill_r+0x20>)
 8011abc:	2300      	movs	r3, #0
 8011abe:	4604      	mov	r4, r0
 8011ac0:	4608      	mov	r0, r1
 8011ac2:	4611      	mov	r1, r2
 8011ac4:	602b      	str	r3, [r5, #0]
 8011ac6:	f7f0 ffc3 	bl	8002a50 <_kill>
 8011aca:	1c43      	adds	r3, r0, #1
 8011acc:	d102      	bne.n	8011ad4 <_kill_r+0x1c>
 8011ace:	682b      	ldr	r3, [r5, #0]
 8011ad0:	b103      	cbz	r3, 8011ad4 <_kill_r+0x1c>
 8011ad2:	6023      	str	r3, [r4, #0]
 8011ad4:	bd38      	pop	{r3, r4, r5, pc}
 8011ad6:	bf00      	nop
 8011ad8:	20003e78 	.word	0x20003e78

08011adc <_getpid_r>:
 8011adc:	f7f0 bfb0 	b.w	8002a40 <_getpid>

08011ae0 <sqrt>:
 8011ae0:	b538      	push	{r3, r4, r5, lr}
 8011ae2:	ed2d 8b02 	vpush	{d8}
 8011ae6:	ec55 4b10 	vmov	r4, r5, d0
 8011aea:	f000 f825 	bl	8011b38 <__ieee754_sqrt>
 8011aee:	4622      	mov	r2, r4
 8011af0:	462b      	mov	r3, r5
 8011af2:	4620      	mov	r0, r4
 8011af4:	4629      	mov	r1, r5
 8011af6:	eeb0 8a40 	vmov.f32	s16, s0
 8011afa:	eef0 8a60 	vmov.f32	s17, s1
 8011afe:	f7ef f825 	bl	8000b4c <__aeabi_dcmpun>
 8011b02:	b990      	cbnz	r0, 8011b2a <sqrt+0x4a>
 8011b04:	2200      	movs	r2, #0
 8011b06:	2300      	movs	r3, #0
 8011b08:	4620      	mov	r0, r4
 8011b0a:	4629      	mov	r1, r5
 8011b0c:	f7ee fff6 	bl	8000afc <__aeabi_dcmplt>
 8011b10:	b158      	cbz	r0, 8011b2a <sqrt+0x4a>
 8011b12:	f7fd ffbb 	bl	800fa8c <__errno>
 8011b16:	2321      	movs	r3, #33	@ 0x21
 8011b18:	6003      	str	r3, [r0, #0]
 8011b1a:	2200      	movs	r2, #0
 8011b1c:	2300      	movs	r3, #0
 8011b1e:	4610      	mov	r0, r2
 8011b20:	4619      	mov	r1, r3
 8011b22:	f7ee fea3 	bl	800086c <__aeabi_ddiv>
 8011b26:	ec41 0b18 	vmov	d8, r0, r1
 8011b2a:	eeb0 0a48 	vmov.f32	s0, s16
 8011b2e:	eef0 0a68 	vmov.f32	s1, s17
 8011b32:	ecbd 8b02 	vpop	{d8}
 8011b36:	bd38      	pop	{r3, r4, r5, pc}

08011b38 <__ieee754_sqrt>:
 8011b38:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b3c:	4a66      	ldr	r2, [pc, #408]	@ (8011cd8 <__ieee754_sqrt+0x1a0>)
 8011b3e:	ec55 4b10 	vmov	r4, r5, d0
 8011b42:	43aa      	bics	r2, r5
 8011b44:	462b      	mov	r3, r5
 8011b46:	4621      	mov	r1, r4
 8011b48:	d110      	bne.n	8011b6c <__ieee754_sqrt+0x34>
 8011b4a:	4622      	mov	r2, r4
 8011b4c:	4620      	mov	r0, r4
 8011b4e:	4629      	mov	r1, r5
 8011b50:	f7ee fd62 	bl	8000618 <__aeabi_dmul>
 8011b54:	4602      	mov	r2, r0
 8011b56:	460b      	mov	r3, r1
 8011b58:	4620      	mov	r0, r4
 8011b5a:	4629      	mov	r1, r5
 8011b5c:	f7ee fba6 	bl	80002ac <__adddf3>
 8011b60:	4604      	mov	r4, r0
 8011b62:	460d      	mov	r5, r1
 8011b64:	ec45 4b10 	vmov	d0, r4, r5
 8011b68:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011b6c:	2d00      	cmp	r5, #0
 8011b6e:	dc0e      	bgt.n	8011b8e <__ieee754_sqrt+0x56>
 8011b70:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8011b74:	4322      	orrs	r2, r4
 8011b76:	d0f5      	beq.n	8011b64 <__ieee754_sqrt+0x2c>
 8011b78:	b19d      	cbz	r5, 8011ba2 <__ieee754_sqrt+0x6a>
 8011b7a:	4622      	mov	r2, r4
 8011b7c:	4620      	mov	r0, r4
 8011b7e:	4629      	mov	r1, r5
 8011b80:	f7ee fb92 	bl	80002a8 <__aeabi_dsub>
 8011b84:	4602      	mov	r2, r0
 8011b86:	460b      	mov	r3, r1
 8011b88:	f7ee fe70 	bl	800086c <__aeabi_ddiv>
 8011b8c:	e7e8      	b.n	8011b60 <__ieee754_sqrt+0x28>
 8011b8e:	152a      	asrs	r2, r5, #20
 8011b90:	d115      	bne.n	8011bbe <__ieee754_sqrt+0x86>
 8011b92:	2000      	movs	r0, #0
 8011b94:	e009      	b.n	8011baa <__ieee754_sqrt+0x72>
 8011b96:	0acb      	lsrs	r3, r1, #11
 8011b98:	3a15      	subs	r2, #21
 8011b9a:	0549      	lsls	r1, r1, #21
 8011b9c:	2b00      	cmp	r3, #0
 8011b9e:	d0fa      	beq.n	8011b96 <__ieee754_sqrt+0x5e>
 8011ba0:	e7f7      	b.n	8011b92 <__ieee754_sqrt+0x5a>
 8011ba2:	462a      	mov	r2, r5
 8011ba4:	e7fa      	b.n	8011b9c <__ieee754_sqrt+0x64>
 8011ba6:	005b      	lsls	r3, r3, #1
 8011ba8:	3001      	adds	r0, #1
 8011baa:	02dc      	lsls	r4, r3, #11
 8011bac:	d5fb      	bpl.n	8011ba6 <__ieee754_sqrt+0x6e>
 8011bae:	1e44      	subs	r4, r0, #1
 8011bb0:	1b12      	subs	r2, r2, r4
 8011bb2:	f1c0 0420 	rsb	r4, r0, #32
 8011bb6:	fa21 f404 	lsr.w	r4, r1, r4
 8011bba:	4323      	orrs	r3, r4
 8011bbc:	4081      	lsls	r1, r0
 8011bbe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011bc2:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 8011bc6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8011bca:	07d2      	lsls	r2, r2, #31
 8011bcc:	bf5c      	itt	pl
 8011bce:	005b      	lslpl	r3, r3, #1
 8011bd0:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8011bd4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8011bd8:	bf58      	it	pl
 8011bda:	0049      	lslpl	r1, r1, #1
 8011bdc:	2600      	movs	r6, #0
 8011bde:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8011be2:	107f      	asrs	r7, r7, #1
 8011be4:	0049      	lsls	r1, r1, #1
 8011be6:	2016      	movs	r0, #22
 8011be8:	4632      	mov	r2, r6
 8011bea:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8011bee:	1915      	adds	r5, r2, r4
 8011bf0:	429d      	cmp	r5, r3
 8011bf2:	bfde      	ittt	le
 8011bf4:	192a      	addle	r2, r5, r4
 8011bf6:	1b5b      	suble	r3, r3, r5
 8011bf8:	1936      	addle	r6, r6, r4
 8011bfa:	0fcd      	lsrs	r5, r1, #31
 8011bfc:	3801      	subs	r0, #1
 8011bfe:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8011c02:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8011c06:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8011c0a:	d1f0      	bne.n	8011bee <__ieee754_sqrt+0xb6>
 8011c0c:	4605      	mov	r5, r0
 8011c0e:	2420      	movs	r4, #32
 8011c10:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8011c14:	4293      	cmp	r3, r2
 8011c16:	eb0c 0e00 	add.w	lr, ip, r0
 8011c1a:	dc02      	bgt.n	8011c22 <__ieee754_sqrt+0xea>
 8011c1c:	d113      	bne.n	8011c46 <__ieee754_sqrt+0x10e>
 8011c1e:	458e      	cmp	lr, r1
 8011c20:	d811      	bhi.n	8011c46 <__ieee754_sqrt+0x10e>
 8011c22:	f1be 0f00 	cmp.w	lr, #0
 8011c26:	eb0e 000c 	add.w	r0, lr, ip
 8011c2a:	da3f      	bge.n	8011cac <__ieee754_sqrt+0x174>
 8011c2c:	2800      	cmp	r0, #0
 8011c2e:	db3d      	blt.n	8011cac <__ieee754_sqrt+0x174>
 8011c30:	f102 0801 	add.w	r8, r2, #1
 8011c34:	1a9b      	subs	r3, r3, r2
 8011c36:	458e      	cmp	lr, r1
 8011c38:	bf88      	it	hi
 8011c3a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8011c3e:	eba1 010e 	sub.w	r1, r1, lr
 8011c42:	4465      	add	r5, ip
 8011c44:	4642      	mov	r2, r8
 8011c46:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8011c4a:	3c01      	subs	r4, #1
 8011c4c:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8011c50:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8011c54:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8011c58:	d1dc      	bne.n	8011c14 <__ieee754_sqrt+0xdc>
 8011c5a:	4319      	orrs	r1, r3
 8011c5c:	d01b      	beq.n	8011c96 <__ieee754_sqrt+0x15e>
 8011c5e:	f8df a07c 	ldr.w	sl, [pc, #124]	@ 8011cdc <__ieee754_sqrt+0x1a4>
 8011c62:	f8df b07c 	ldr.w	fp, [pc, #124]	@ 8011ce0 <__ieee754_sqrt+0x1a8>
 8011c66:	e9da 0100 	ldrd	r0, r1, [sl]
 8011c6a:	e9db 2300 	ldrd	r2, r3, [fp]
 8011c6e:	f7ee fb1b 	bl	80002a8 <__aeabi_dsub>
 8011c72:	e9da 8900 	ldrd	r8, r9, [sl]
 8011c76:	4602      	mov	r2, r0
 8011c78:	460b      	mov	r3, r1
 8011c7a:	4640      	mov	r0, r8
 8011c7c:	4649      	mov	r1, r9
 8011c7e:	f7ee ff47 	bl	8000b10 <__aeabi_dcmple>
 8011c82:	b140      	cbz	r0, 8011c96 <__ieee754_sqrt+0x15e>
 8011c84:	f1b5 3fff 	cmp.w	r5, #4294967295
 8011c88:	e9da 0100 	ldrd	r0, r1, [sl]
 8011c8c:	e9db 2300 	ldrd	r2, r3, [fp]
 8011c90:	d10e      	bne.n	8011cb0 <__ieee754_sqrt+0x178>
 8011c92:	3601      	adds	r6, #1
 8011c94:	4625      	mov	r5, r4
 8011c96:	1073      	asrs	r3, r6, #1
 8011c98:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 8011c9c:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 8011ca0:	eb03 5107 	add.w	r1, r3, r7, lsl #20
 8011ca4:	086b      	lsrs	r3, r5, #1
 8011ca6:	ea43 70c6 	orr.w	r0, r3, r6, lsl #31
 8011caa:	e759      	b.n	8011b60 <__ieee754_sqrt+0x28>
 8011cac:	4690      	mov	r8, r2
 8011cae:	e7c1      	b.n	8011c34 <__ieee754_sqrt+0xfc>
 8011cb0:	f7ee fafc 	bl	80002ac <__adddf3>
 8011cb4:	e9da 8900 	ldrd	r8, r9, [sl]
 8011cb8:	4602      	mov	r2, r0
 8011cba:	460b      	mov	r3, r1
 8011cbc:	4640      	mov	r0, r8
 8011cbe:	4649      	mov	r1, r9
 8011cc0:	f7ee ff1c 	bl	8000afc <__aeabi_dcmplt>
 8011cc4:	b120      	cbz	r0, 8011cd0 <__ieee754_sqrt+0x198>
 8011cc6:	1cab      	adds	r3, r5, #2
 8011cc8:	bf08      	it	eq
 8011cca:	3601      	addeq	r6, #1
 8011ccc:	3502      	adds	r5, #2
 8011cce:	e7e2      	b.n	8011c96 <__ieee754_sqrt+0x15e>
 8011cd0:	1c6b      	adds	r3, r5, #1
 8011cd2:	f023 0501 	bic.w	r5, r3, #1
 8011cd6:	e7de      	b.n	8011c96 <__ieee754_sqrt+0x15e>
 8011cd8:	7ff00000 	.word	0x7ff00000
 8011cdc:	08012368 	.word	0x08012368
 8011ce0:	08012360 	.word	0x08012360

08011ce4 <_init>:
 8011ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011ce6:	bf00      	nop
 8011ce8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011cea:	bc08      	pop	{r3}
 8011cec:	469e      	mov	lr, r3
 8011cee:	4770      	bx	lr

08011cf0 <_fini>:
 8011cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011cf2:	bf00      	nop
 8011cf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011cf6:	bc08      	pop	{r3}
 8011cf8:	469e      	mov	lr, r3
 8011cfa:	4770      	bx	lr
