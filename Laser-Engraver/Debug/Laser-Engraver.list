
Laser-Engraver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003954  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08003adc  08003adc  00004adc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b24  08003b24  00005014  2**0
                  CONTENTS
  4 .ARM          00000008  08003b24  08003b24  00004b24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003b2c  08003b2c  00005014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b2c  08003b2c  00004b2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003b30  08003b30  00004b30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  08003b34  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000019c  20000014  08003b48  00005014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001b0  08003b48  000051b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010624  00000000  00000000  00005044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000202a  00000000  00000000  00015668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ea8  00000000  00000000  00017698  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b7c  00000000  00000000  00018540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026a57  00000000  00000000  000190bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011004  00000000  00000000  0003fb13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f238f  00000000  00000000  00050b17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00142ea6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003da8  00000000  00000000  00142eec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  00146c94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000014 	.word	0x20000014
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003ac4 	.word	0x08003ac4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000018 	.word	0x20000018
 80001c4:	08003ac4 	.word	0x08003ac4

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004bc:	f000 fc32 	bl	8000d24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c0:	f000 f898 	bl	80005f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004c4:	f000 f964 	bl	8000790 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004c8:	f000 f932 	bl	8000730 <MX_USART2_UART_Init>
  MX_TIM16_Init();
 80004cc:	f000 f8e4 	bl	8000698 <MX_TIM16_Init>
  MX_TIM17_Init();
 80004d0:	f000 f908 	bl	80006e4 <MX_TIM17_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(XEN_GPIO_Port, XEN_Pin,0);
 80004d4:	2200      	movs	r2, #0
 80004d6:	2120      	movs	r1, #32
 80004d8:	483d      	ldr	r0, [pc, #244]	@ (80005d0 <main+0x118>)
 80004da:	f000 ff13 	bl	8001304 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(YEN_GPIO_Port, YEN_Pin,0);
 80004de:	2200      	movs	r2, #0
 80004e0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80004e4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80004e8:	f000 ff0c 	bl	8001304 <HAL_GPIO_WritePin>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  // Test code to turn both motors forward 10000 steps with prescaler at 100, then back with half speed with .5 second delays in between
	  Xend = 10000;
 80004ec:	4b39      	ldr	r3, [pc, #228]	@ (80005d4 <main+0x11c>)
 80004ee:	f242 7210 	movw	r2, #10000	@ 0x2710
 80004f2:	601a      	str	r2, [r3, #0]
	  Yend = 10000;
 80004f4:	4b38      	ldr	r3, [pc, #224]	@ (80005d8 <main+0x120>)
 80004f6:	f242 7210 	movw	r2, #10000	@ 0x2710
 80004fa:	601a      	str	r2, [r3, #0]
	  XDIR = 1;	// sets the global variable for XDIR to 0 (decreasing X coordinate
 80004fc:	4b37      	ldr	r3, [pc, #220]	@ (80005dc <main+0x124>)
 80004fe:	2201      	movs	r2, #1
 8000500:	601a      	str	r2, [r3, #0]
	  YDIR = 1;	// sets the gobal variable for YDIR to 0 (decreasing Y coordinate
 8000502:	4b37      	ldr	r3, [pc, #220]	@ (80005e0 <main+0x128>)
 8000504:	2201      	movs	r2, #1
 8000506:	601a      	str	r2, [r3, #0]
	  __HAL_TIM_SET_PRESCALER(&htim16,100);	// sets the prescaler to 100 (1 revolution per second)
 8000508:	4b36      	ldr	r3, [pc, #216]	@ (80005e4 <main+0x12c>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	2264      	movs	r2, #100	@ 0x64
 800050e:	629a      	str	r2, [r3, #40]	@ 0x28
	  __HAL_TIM_SET_PRESCALER(&htim17,100);
 8000510:	4b35      	ldr	r3, [pc, #212]	@ (80005e8 <main+0x130>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	2264      	movs	r2, #100	@ 0x64
 8000516:	629a      	str	r2, [r3, #40]	@ 0x28
	  HAL_GPIO_WritePin(XDIR_GPIO_Port, XDIR_Pin,1);	// Sets the direction to decreasing X and Y coordinate
 8000518:	2201      	movs	r2, #1
 800051a:	2110      	movs	r1, #16
 800051c:	482c      	ldr	r0, [pc, #176]	@ (80005d0 <main+0x118>)
 800051e:	f000 fef1 	bl	8001304 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(YDIR_GPIO_Port, YDIR_Pin,1);
 8000522:	2201      	movs	r2, #1
 8000524:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000528:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800052c:	f000 feea 	bl	8001304 <HAL_GPIO_WritePin>

	  // Starts the timers to pulse the X and Y motors
	  HAL_TIM_Base_Start_IT(&htim16);
 8000530:	482c      	ldr	r0, [pc, #176]	@ (80005e4 <main+0x12c>)
 8000532:	f002 fae7 	bl	8002b04 <HAL_TIM_Base_Start_IT>
	  HAL_TIM_Base_Start_IT(&htim17);
 8000536:	482c      	ldr	r0, [pc, #176]	@ (80005e8 <main+0x130>)
 8000538:	f002 fae4 	bl	8002b04 <HAL_TIM_Base_Start_IT>

	  while((Xcurrent != Xend) && (Ycurrent != Yend)){} // Waits for the motors to be done
 800053c:	bf00      	nop
 800053e:	4b2b      	ldr	r3, [pc, #172]	@ (80005ec <main+0x134>)
 8000540:	681a      	ldr	r2, [r3, #0]
 8000542:	4b24      	ldr	r3, [pc, #144]	@ (80005d4 <main+0x11c>)
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	429a      	cmp	r2, r3
 8000548:	d005      	beq.n	8000556 <main+0x9e>
 800054a:	4b29      	ldr	r3, [pc, #164]	@ (80005f0 <main+0x138>)
 800054c:	681a      	ldr	r2, [r3, #0]
 800054e:	4b22      	ldr	r3, [pc, #136]	@ (80005d8 <main+0x120>)
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	429a      	cmp	r2, r3
 8000554:	d1f3      	bne.n	800053e <main+0x86>
	  HAL_Delay(500);	// Creates a .5 second delay to pause the motors
 8000556:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800055a:	f000 fc23 	bl	8000da4 <HAL_Delay>

	  // Repeats the process but changes the direction and halves the speed
	  Xend = 0;
 800055e:	4b1d      	ldr	r3, [pc, #116]	@ (80005d4 <main+0x11c>)
 8000560:	2200      	movs	r2, #0
 8000562:	601a      	str	r2, [r3, #0]
	  Yend = 0;
 8000564:	4b1c      	ldr	r3, [pc, #112]	@ (80005d8 <main+0x120>)
 8000566:	2200      	movs	r2, #0
 8000568:	601a      	str	r2, [r3, #0]
	  XDIR = 0;
 800056a:	4b1c      	ldr	r3, [pc, #112]	@ (80005dc <main+0x124>)
 800056c:	2200      	movs	r2, #0
 800056e:	601a      	str	r2, [r3, #0]
	  YDIR = 0;
 8000570:	4b1b      	ldr	r3, [pc, #108]	@ (80005e0 <main+0x128>)
 8000572:	2200      	movs	r2, #0
 8000574:	601a      	str	r2, [r3, #0]
	  __HAL_TIM_SET_PRESCALER(&htim16, 50);
 8000576:	4b1b      	ldr	r3, [pc, #108]	@ (80005e4 <main+0x12c>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	2232      	movs	r2, #50	@ 0x32
 800057c:	629a      	str	r2, [r3, #40]	@ 0x28
	  __HAL_TIM_SET_PRESCALER(&htim17, 50);
 800057e:	4b1a      	ldr	r3, [pc, #104]	@ (80005e8 <main+0x130>)
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	2232      	movs	r2, #50	@ 0x32
 8000584:	629a      	str	r2, [r3, #40]	@ 0x28
	  HAL_GPIO_WritePin(XDIR_GPIO_Port, XDIR_Pin,1);
 8000586:	2201      	movs	r2, #1
 8000588:	2110      	movs	r1, #16
 800058a:	4811      	ldr	r0, [pc, #68]	@ (80005d0 <main+0x118>)
 800058c:	f000 feba 	bl	8001304 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(YDIR_GPIO_Port, YDIR_Pin,1);
 8000590:	2201      	movs	r2, #1
 8000592:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000596:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800059a:	f000 feb3 	bl	8001304 <HAL_GPIO_WritePin>


	  HAL_TIM_Base_Start_IT(&htim16);
 800059e:	4811      	ldr	r0, [pc, #68]	@ (80005e4 <main+0x12c>)
 80005a0:	f002 fab0 	bl	8002b04 <HAL_TIM_Base_Start_IT>
	  HAL_TIM_Base_Start_IT(&htim17);
 80005a4:	4810      	ldr	r0, [pc, #64]	@ (80005e8 <main+0x130>)
 80005a6:	f002 faad 	bl	8002b04 <HAL_TIM_Base_Start_IT>
	  while((Xcurrent != Xend) && (Ycurrent != Yend)){}
 80005aa:	bf00      	nop
 80005ac:	4b0f      	ldr	r3, [pc, #60]	@ (80005ec <main+0x134>)
 80005ae:	681a      	ldr	r2, [r3, #0]
 80005b0:	4b08      	ldr	r3, [pc, #32]	@ (80005d4 <main+0x11c>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	429a      	cmp	r2, r3
 80005b6:	d005      	beq.n	80005c4 <main+0x10c>
 80005b8:	4b0d      	ldr	r3, [pc, #52]	@ (80005f0 <main+0x138>)
 80005ba:	681a      	ldr	r2, [r3, #0]
 80005bc:	4b06      	ldr	r3, [pc, #24]	@ (80005d8 <main+0x120>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	429a      	cmp	r2, r3
 80005c2:	d1f3      	bne.n	80005ac <main+0xf4>
	  HAL_Delay(500);
 80005c4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80005c8:	f000 fbec 	bl	8000da4 <HAL_Delay>
	  Xend = 10000;
 80005cc:	e78e      	b.n	80004ec <main+0x34>
 80005ce:	bf00      	nop
 80005d0:	48000400 	.word	0x48000400
 80005d4:	20000158 	.word	0x20000158
 80005d8:	2000015c 	.word	0x2000015c
 80005dc:	20000000 	.word	0x20000000
 80005e0:	20000004 	.word	0x20000004
 80005e4:	20000030 	.word	0x20000030
 80005e8:	2000007c 	.word	0x2000007c
 80005ec:	20000150 	.word	0x20000150
 80005f0:	20000154 	.word	0x20000154

080005f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b096      	sub	sp, #88	@ 0x58
 80005f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005fa:	f107 0314 	add.w	r3, r7, #20
 80005fe:	2244      	movs	r2, #68	@ 0x44
 8000600:	2100      	movs	r1, #0
 8000602:	4618      	mov	r0, r3
 8000604:	f003 fa31 	bl	8003a6a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000608:	463b      	mov	r3, r7
 800060a:	2200      	movs	r2, #0
 800060c:	601a      	str	r2, [r3, #0]
 800060e:	605a      	str	r2, [r3, #4]
 8000610:	609a      	str	r2, [r3, #8]
 8000612:	60da      	str	r2, [r3, #12]
 8000614:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000616:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800061a:	f000 fed7 	bl	80013cc <HAL_PWREx_ControlVoltageScaling>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d001      	beq.n	8000628 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000624:	f000 f9aa 	bl	800097c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000628:	2302      	movs	r3, #2
 800062a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800062c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000630:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000632:	2310      	movs	r3, #16
 8000634:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000636:	2302      	movs	r3, #2
 8000638:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800063a:	2302      	movs	r3, #2
 800063c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800063e:	2301      	movs	r3, #1
 8000640:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000642:	230a      	movs	r3, #10
 8000644:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000646:	2307      	movs	r3, #7
 8000648:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800064a:	2302      	movs	r3, #2
 800064c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800064e:	2302      	movs	r3, #2
 8000650:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000652:	f107 0314 	add.w	r3, r7, #20
 8000656:	4618      	mov	r0, r3
 8000658:	f000 ff0e 	bl	8001478 <HAL_RCC_OscConfig>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d001      	beq.n	8000666 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000662:	f000 f98b 	bl	800097c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000666:	230f      	movs	r3, #15
 8000668:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800066a:	2303      	movs	r3, #3
 800066c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800066e:	2300      	movs	r3, #0
 8000670:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000672:	2300      	movs	r3, #0
 8000674:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000676:	2300      	movs	r3, #0
 8000678:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800067a:	463b      	mov	r3, r7
 800067c:	2104      	movs	r1, #4
 800067e:	4618      	mov	r0, r3
 8000680:	f001 fad6 	bl	8001c30 <HAL_RCC_ClockConfig>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d001      	beq.n	800068e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800068a:	f000 f977 	bl	800097c <Error_Handler>
  }
}
 800068e:	bf00      	nop
 8000690:	3758      	adds	r7, #88	@ 0x58
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
	...

08000698 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800069c:	4b0f      	ldr	r3, [pc, #60]	@ (80006dc <MX_TIM16_Init+0x44>)
 800069e:	4a10      	ldr	r2, [pc, #64]	@ (80006e0 <MX_TIM16_Init+0x48>)
 80006a0:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 1000;
 80006a2:	4b0e      	ldr	r3, [pc, #56]	@ (80006dc <MX_TIM16_Init+0x44>)
 80006a4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80006a8:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006aa:	4b0c      	ldr	r3, [pc, #48]	@ (80006dc <MX_TIM16_Init+0x44>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 250;
 80006b0:	4b0a      	ldr	r3, [pc, #40]	@ (80006dc <MX_TIM16_Init+0x44>)
 80006b2:	22fa      	movs	r2, #250	@ 0xfa
 80006b4:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006b6:	4b09      	ldr	r3, [pc, #36]	@ (80006dc <MX_TIM16_Init+0x44>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80006bc:	4b07      	ldr	r3, [pc, #28]	@ (80006dc <MX_TIM16_Init+0x44>)
 80006be:	2200      	movs	r2, #0
 80006c0:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006c2:	4b06      	ldr	r3, [pc, #24]	@ (80006dc <MX_TIM16_Init+0x44>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80006c8:	4804      	ldr	r0, [pc, #16]	@ (80006dc <MX_TIM16_Init+0x44>)
 80006ca:	f002 f9c3 	bl	8002a54 <HAL_TIM_Base_Init>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 80006d4:	f000 f952 	bl	800097c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80006d8:	bf00      	nop
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	20000030 	.word	0x20000030
 80006e0:	40014400 	.word	0x40014400

080006e4 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80006e8:	4b0f      	ldr	r3, [pc, #60]	@ (8000728 <MX_TIM17_Init+0x44>)
 80006ea:	4a10      	ldr	r2, [pc, #64]	@ (800072c <MX_TIM17_Init+0x48>)
 80006ec:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 1000;
 80006ee:	4b0e      	ldr	r3, [pc, #56]	@ (8000728 <MX_TIM17_Init+0x44>)
 80006f0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80006f4:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006f6:	4b0c      	ldr	r3, [pc, #48]	@ (8000728 <MX_TIM17_Init+0x44>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 250;
 80006fc:	4b0a      	ldr	r3, [pc, #40]	@ (8000728 <MX_TIM17_Init+0x44>)
 80006fe:	22fa      	movs	r2, #250	@ 0xfa
 8000700:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000702:	4b09      	ldr	r3, [pc, #36]	@ (8000728 <MX_TIM17_Init+0x44>)
 8000704:	2200      	movs	r2, #0
 8000706:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000708:	4b07      	ldr	r3, [pc, #28]	@ (8000728 <MX_TIM17_Init+0x44>)
 800070a:	2200      	movs	r2, #0
 800070c:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800070e:	4b06      	ldr	r3, [pc, #24]	@ (8000728 <MX_TIM17_Init+0x44>)
 8000710:	2200      	movs	r2, #0
 8000712:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000714:	4804      	ldr	r0, [pc, #16]	@ (8000728 <MX_TIM17_Init+0x44>)
 8000716:	f002 f99d 	bl	8002a54 <HAL_TIM_Base_Init>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 8000720:	f000 f92c 	bl	800097c <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8000724:	bf00      	nop
 8000726:	bd80      	pop	{r7, pc}
 8000728:	2000007c 	.word	0x2000007c
 800072c:	40014800 	.word	0x40014800

08000730 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000734:	4b14      	ldr	r3, [pc, #80]	@ (8000788 <MX_USART2_UART_Init+0x58>)
 8000736:	4a15      	ldr	r2, [pc, #84]	@ (800078c <MX_USART2_UART_Init+0x5c>)
 8000738:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800073a:	4b13      	ldr	r3, [pc, #76]	@ (8000788 <MX_USART2_UART_Init+0x58>)
 800073c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000740:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000742:	4b11      	ldr	r3, [pc, #68]	@ (8000788 <MX_USART2_UART_Init+0x58>)
 8000744:	2200      	movs	r2, #0
 8000746:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000748:	4b0f      	ldr	r3, [pc, #60]	@ (8000788 <MX_USART2_UART_Init+0x58>)
 800074a:	2200      	movs	r2, #0
 800074c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800074e:	4b0e      	ldr	r3, [pc, #56]	@ (8000788 <MX_USART2_UART_Init+0x58>)
 8000750:	2200      	movs	r2, #0
 8000752:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000754:	4b0c      	ldr	r3, [pc, #48]	@ (8000788 <MX_USART2_UART_Init+0x58>)
 8000756:	220c      	movs	r2, #12
 8000758:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800075a:	4b0b      	ldr	r3, [pc, #44]	@ (8000788 <MX_USART2_UART_Init+0x58>)
 800075c:	2200      	movs	r2, #0
 800075e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000760:	4b09      	ldr	r3, [pc, #36]	@ (8000788 <MX_USART2_UART_Init+0x58>)
 8000762:	2200      	movs	r2, #0
 8000764:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000766:	4b08      	ldr	r3, [pc, #32]	@ (8000788 <MX_USART2_UART_Init+0x58>)
 8000768:	2200      	movs	r2, #0
 800076a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800076c:	4b06      	ldr	r3, [pc, #24]	@ (8000788 <MX_USART2_UART_Init+0x58>)
 800076e:	2200      	movs	r2, #0
 8000770:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000772:	4805      	ldr	r0, [pc, #20]	@ (8000788 <MX_USART2_UART_Init+0x58>)
 8000774:	f002 fc58 	bl	8003028 <HAL_UART_Init>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800077e:	f000 f8fd 	bl	800097c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000782:	bf00      	nop
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	200000c8 	.word	0x200000c8
 800078c:	40004400 	.word	0x40004400

08000790 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b08a      	sub	sp, #40	@ 0x28
 8000794:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000796:	f107 0314 	add.w	r3, r7, #20
 800079a:	2200      	movs	r2, #0
 800079c:	601a      	str	r2, [r3, #0]
 800079e:	605a      	str	r2, [r3, #4]
 80007a0:	609a      	str	r2, [r3, #8]
 80007a2:	60da      	str	r2, [r3, #12]
 80007a4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007a6:	4b3e      	ldr	r3, [pc, #248]	@ (80008a0 <MX_GPIO_Init+0x110>)
 80007a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007aa:	4a3d      	ldr	r2, [pc, #244]	@ (80008a0 <MX_GPIO_Init+0x110>)
 80007ac:	f043 0304 	orr.w	r3, r3, #4
 80007b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007b2:	4b3b      	ldr	r3, [pc, #236]	@ (80008a0 <MX_GPIO_Init+0x110>)
 80007b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007b6:	f003 0304 	and.w	r3, r3, #4
 80007ba:	613b      	str	r3, [r7, #16]
 80007bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007be:	4b38      	ldr	r3, [pc, #224]	@ (80008a0 <MX_GPIO_Init+0x110>)
 80007c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007c2:	4a37      	ldr	r2, [pc, #220]	@ (80008a0 <MX_GPIO_Init+0x110>)
 80007c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007ca:	4b35      	ldr	r3, [pc, #212]	@ (80008a0 <MX_GPIO_Init+0x110>)
 80007cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007d2:	60fb      	str	r3, [r7, #12]
 80007d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007d6:	4b32      	ldr	r3, [pc, #200]	@ (80008a0 <MX_GPIO_Init+0x110>)
 80007d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007da:	4a31      	ldr	r2, [pc, #196]	@ (80008a0 <MX_GPIO_Init+0x110>)
 80007dc:	f043 0301 	orr.w	r3, r3, #1
 80007e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007e2:	4b2f      	ldr	r3, [pc, #188]	@ (80008a0 <MX_GPIO_Init+0x110>)
 80007e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007e6:	f003 0301 	and.w	r3, r3, #1
 80007ea:	60bb      	str	r3, [r7, #8]
 80007ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ee:	4b2c      	ldr	r3, [pc, #176]	@ (80008a0 <MX_GPIO_Init+0x110>)
 80007f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007f2:	4a2b      	ldr	r2, [pc, #172]	@ (80008a0 <MX_GPIO_Init+0x110>)
 80007f4:	f043 0302 	orr.w	r3, r3, #2
 80007f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007fa:	4b29      	ldr	r3, [pc, #164]	@ (80008a0 <MX_GPIO_Init+0x110>)
 80007fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007fe:	f003 0302 	and.w	r3, r3, #2
 8000802:	607b      	str	r3, [r7, #4]
 8000804:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000806:	2201      	movs	r2, #1
 8000808:	2120      	movs	r1, #32
 800080a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800080e:	f000 fd79 	bl	8001304 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, YPUL_Pin|XDIR_Pin|XEN_Pin, GPIO_PIN_RESET);
 8000812:	2200      	movs	r2, #0
 8000814:	f44f 6186 	mov.w	r1, #1072	@ 0x430
 8000818:	4822      	ldr	r0, [pc, #136]	@ (80008a4 <MX_GPIO_Init+0x114>)
 800081a:	f000 fd73 	bl	8001304 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, YEN_Pin|YDIR_Pin|XPUL_Pin, GPIO_PIN_RESET);
 800081e:	2200      	movs	r2, #0
 8000820:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 8000824:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000828:	f000 fd6c 	bl	8001304 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800082c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000830:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000832:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000836:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000838:	2300      	movs	r3, #0
 800083a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800083c:	f107 0314 	add.w	r3, r7, #20
 8000840:	4619      	mov	r1, r3
 8000842:	4819      	ldr	r0, [pc, #100]	@ (80008a8 <MX_GPIO_Init+0x118>)
 8000844:	f000 fbb4 	bl	8000fb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin YEN_Pin YDIR_Pin XPUL_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|YEN_Pin|YDIR_Pin|XPUL_Pin;
 8000848:	f44f 63e4 	mov.w	r3, #1824	@ 0x720
 800084c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800084e:	2301      	movs	r3, #1
 8000850:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000852:	2300      	movs	r3, #0
 8000854:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000856:	2300      	movs	r3, #0
 8000858:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800085a:	f107 0314 	add.w	r3, r7, #20
 800085e:	4619      	mov	r1, r3
 8000860:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000864:	f000 fba4 	bl	8000fb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : YPUL_Pin XDIR_Pin XEN_Pin */
  GPIO_InitStruct.Pin = YPUL_Pin|XDIR_Pin|XEN_Pin;
 8000868:	f44f 6386 	mov.w	r3, #1072	@ 0x430
 800086c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800086e:	2301      	movs	r3, #1
 8000870:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000872:	2300      	movs	r3, #0
 8000874:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000876:	2300      	movs	r3, #0
 8000878:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800087a:	f107 0314 	add.w	r3, r7, #20
 800087e:	4619      	mov	r1, r3
 8000880:	4808      	ldr	r0, [pc, #32]	@ (80008a4 <MX_GPIO_Init+0x114>)
 8000882:	f000 fb95 	bl	8000fb0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000886:	2200      	movs	r2, #0
 8000888:	2100      	movs	r1, #0
 800088a:	2028      	movs	r0, #40	@ 0x28
 800088c:	f000 fb66 	bl	8000f5c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000890:	2028      	movs	r0, #40	@ 0x28
 8000892:	f000 fb7f 	bl	8000f94 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000896:	bf00      	nop
 8000898:	3728      	adds	r7, #40	@ 0x28
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	40021000 	.word	0x40021000
 80008a4:	48000400 	.word	0x48000400
 80008a8:	48000800 	.word	0x48000800

080008ac <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b082      	sub	sp, #8
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

	if (htim == &htim16)	// X motor timer
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	4a27      	ldr	r2, [pc, #156]	@ (8000954 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80008b8:	4293      	cmp	r3, r2
 80008ba:	d11e      	bne.n	80008fa <HAL_TIM_PeriodElapsedCallback+0x4e>
	{

		if (Xcurrent != Xend)	// Evaluates if the X motor has arrived in it's position
 80008bc:	4b26      	ldr	r3, [pc, #152]	@ (8000958 <HAL_TIM_PeriodElapsedCallback+0xac>)
 80008be:	681a      	ldr	r2, [r3, #0]
 80008c0:	4b26      	ldr	r3, [pc, #152]	@ (800095c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	429a      	cmp	r2, r3
 80008c6:	d015      	beq.n	80008f4 <HAL_TIM_PeriodElapsedCallback+0x48>
		{

			HAL_GPIO_TogglePin(XPUL_GPIO_Port, XPUL_Pin);	// Toggles the XPUL pin
 80008c8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80008cc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008d0:	f000 fd30 	bl	8001334 <HAL_GPIO_TogglePin>

			// Increments the Xcurrent value if XDIR is positive and decrements if Xcurrent value is negative
			if (XDIR == 1)
 80008d4:	4b22      	ldr	r3, [pc, #136]	@ (8000960 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	2b01      	cmp	r3, #1
 80008da:	d105      	bne.n	80008e8 <HAL_TIM_PeriodElapsedCallback+0x3c>
			{
				Xcurrent++;
 80008dc:	4b1e      	ldr	r3, [pc, #120]	@ (8000958 <HAL_TIM_PeriodElapsedCallback+0xac>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	3301      	adds	r3, #1
 80008e2:	4a1d      	ldr	r2, [pc, #116]	@ (8000958 <HAL_TIM_PeriodElapsedCallback+0xac>)
 80008e4:	6013      	str	r3, [r2, #0]
 80008e6:	e008      	b.n	80008fa <HAL_TIM_PeriodElapsedCallback+0x4e>
			}
			else
			{
				Xcurrent--;
 80008e8:	4b1b      	ldr	r3, [pc, #108]	@ (8000958 <HAL_TIM_PeriodElapsedCallback+0xac>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	3b01      	subs	r3, #1
 80008ee:	4a1a      	ldr	r2, [pc, #104]	@ (8000958 <HAL_TIM_PeriodElapsedCallback+0xac>)
 80008f0:	6013      	str	r3, [r2, #0]
 80008f2:	e002      	b.n	80008fa <HAL_TIM_PeriodElapsedCallback+0x4e>
			}
		}
		else
		{
			HAL_TIM_Base_Stop_IT(&htim17);	// Once the X motor arrives to it's final position, this stops the timer
 80008f4:	481b      	ldr	r0, [pc, #108]	@ (8000964 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80008f6:	f002 f975 	bl	8002be4 <HAL_TIM_Base_Stop_IT>
		}
	}

	if (htim == &htim17)	// Y motor timer
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	4a19      	ldr	r2, [pc, #100]	@ (8000964 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80008fe:	4293      	cmp	r3, r2
 8000900:	d11d      	bne.n	800093e <HAL_TIM_PeriodElapsedCallback+0x92>
	{

		if (Ycurrent != Yend)	// Evaluates if the Y motor has arrived in it's position
 8000902:	4b19      	ldr	r3, [pc, #100]	@ (8000968 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8000904:	681a      	ldr	r2, [r3, #0]
 8000906:	4b19      	ldr	r3, [pc, #100]	@ (800096c <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	429a      	cmp	r2, r3
 800090c:	d014      	beq.n	8000938 <HAL_TIM_PeriodElapsedCallback+0x8c>
		{

			HAL_GPIO_TogglePin(YPUL_GPIO_Port, YPUL_Pin);	// Toggles the YPUL pin
 800090e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000912:	4817      	ldr	r0, [pc, #92]	@ (8000970 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8000914:	f000 fd0e 	bl	8001334 <HAL_GPIO_TogglePin>

			// Increments the Ycurrent value if YDIR is positive and decrements if Ycurrent value is negative
			if (YDIR == 1)
 8000918:	4b16      	ldr	r3, [pc, #88]	@ (8000974 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	2b01      	cmp	r3, #1
 800091e:	d105      	bne.n	800092c <HAL_TIM_PeriodElapsedCallback+0x80>
			{
				Ycurrent++;
 8000920:	4b11      	ldr	r3, [pc, #68]	@ (8000968 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	3301      	adds	r3, #1
 8000926:	4a10      	ldr	r2, [pc, #64]	@ (8000968 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8000928:	6013      	str	r3, [r2, #0]
 800092a:	e008      	b.n	800093e <HAL_TIM_PeriodElapsedCallback+0x92>
			}
			else
			{
				Ycurrent--;
 800092c:	4b0e      	ldr	r3, [pc, #56]	@ (8000968 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	3b01      	subs	r3, #1
 8000932:	4a0d      	ldr	r2, [pc, #52]	@ (8000968 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8000934:	6013      	str	r3, [r2, #0]
 8000936:	e002      	b.n	800093e <HAL_TIM_PeriodElapsedCallback+0x92>
			}
		}
		else
		{
		  HAL_TIM_Base_Stop_IT(&htim16);	// Once the Y motor arrives to it's final position, this stops the timer
 8000938:	4806      	ldr	r0, [pc, #24]	@ (8000954 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 800093a:	f002 f953 	bl	8002be4 <HAL_TIM_Base_Stop_IT>
		}
	}
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	4a0d      	ldr	r2, [pc, #52]	@ (8000978 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8000944:	4293      	cmp	r3, r2
 8000946:	d101      	bne.n	800094c <HAL_TIM_PeriodElapsedCallback+0xa0>
    HAL_IncTick();
 8000948:	f000 fa0c 	bl	8000d64 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  /* USER CODE END Callback 1 */
}
 800094c:	bf00      	nop
 800094e:	3708      	adds	r7, #8
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}
 8000954:	20000030 	.word	0x20000030
 8000958:	20000150 	.word	0x20000150
 800095c:	20000158 	.word	0x20000158
 8000960:	20000000 	.word	0x20000000
 8000964:	2000007c 	.word	0x2000007c
 8000968:	20000154 	.word	0x20000154
 800096c:	2000015c 	.word	0x2000015c
 8000970:	48000400 	.word	0x48000400
 8000974:	20000004 	.word	0x20000004
 8000978:	40000400 	.word	0x40000400

0800097c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000980:	b672      	cpsid	i
}
 8000982:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000984:	bf00      	nop
 8000986:	e7fd      	b.n	8000984 <Error_Handler+0x8>

08000988 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000988:	b480      	push	{r7}
 800098a:	b083      	sub	sp, #12
 800098c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800098e:	4b0f      	ldr	r3, [pc, #60]	@ (80009cc <HAL_MspInit+0x44>)
 8000990:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000992:	4a0e      	ldr	r2, [pc, #56]	@ (80009cc <HAL_MspInit+0x44>)
 8000994:	f043 0301 	orr.w	r3, r3, #1
 8000998:	6613      	str	r3, [r2, #96]	@ 0x60
 800099a:	4b0c      	ldr	r3, [pc, #48]	@ (80009cc <HAL_MspInit+0x44>)
 800099c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800099e:	f003 0301 	and.w	r3, r3, #1
 80009a2:	607b      	str	r3, [r7, #4]
 80009a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009a6:	4b09      	ldr	r3, [pc, #36]	@ (80009cc <HAL_MspInit+0x44>)
 80009a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009aa:	4a08      	ldr	r2, [pc, #32]	@ (80009cc <HAL_MspInit+0x44>)
 80009ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009b0:	6593      	str	r3, [r2, #88]	@ 0x58
 80009b2:	4b06      	ldr	r3, [pc, #24]	@ (80009cc <HAL_MspInit+0x44>)
 80009b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009ba:	603b      	str	r3, [r7, #0]
 80009bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009be:	bf00      	nop
 80009c0:	370c      	adds	r7, #12
 80009c2:	46bd      	mov	sp, r7
 80009c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop
 80009cc:	40021000 	.word	0x40021000

080009d0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b084      	sub	sp, #16
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	4a1a      	ldr	r2, [pc, #104]	@ (8000a48 <HAL_TIM_Base_MspInit+0x78>)
 80009de:	4293      	cmp	r3, r2
 80009e0:	d114      	bne.n	8000a0c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 80009e2:	4b1a      	ldr	r3, [pc, #104]	@ (8000a4c <HAL_TIM_Base_MspInit+0x7c>)
 80009e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80009e6:	4a19      	ldr	r2, [pc, #100]	@ (8000a4c <HAL_TIM_Base_MspInit+0x7c>)
 80009e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009ec:	6613      	str	r3, [r2, #96]	@ 0x60
 80009ee:	4b17      	ldr	r3, [pc, #92]	@ (8000a4c <HAL_TIM_Base_MspInit+0x7c>)
 80009f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80009f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80009f6:	60fb      	str	r3, [r7, #12]
 80009f8:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80009fa:	2200      	movs	r2, #0
 80009fc:	2100      	movs	r1, #0
 80009fe:	2019      	movs	r0, #25
 8000a00:	f000 faac 	bl	8000f5c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000a04:	2019      	movs	r0, #25
 8000a06:	f000 fac5 	bl	8000f94 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8000a0a:	e018      	b.n	8000a3e <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM17)
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	4a0f      	ldr	r2, [pc, #60]	@ (8000a50 <HAL_TIM_Base_MspInit+0x80>)
 8000a12:	4293      	cmp	r3, r2
 8000a14:	d113      	bne.n	8000a3e <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8000a16:	4b0d      	ldr	r3, [pc, #52]	@ (8000a4c <HAL_TIM_Base_MspInit+0x7c>)
 8000a18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a1a:	4a0c      	ldr	r2, [pc, #48]	@ (8000a4c <HAL_TIM_Base_MspInit+0x7c>)
 8000a1c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000a20:	6613      	str	r3, [r2, #96]	@ 0x60
 8000a22:	4b0a      	ldr	r3, [pc, #40]	@ (8000a4c <HAL_TIM_Base_MspInit+0x7c>)
 8000a24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a26:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000a2a:	60bb      	str	r3, [r7, #8]
 8000a2c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8000a2e:	2200      	movs	r2, #0
 8000a30:	2100      	movs	r1, #0
 8000a32:	201a      	movs	r0, #26
 8000a34:	f000 fa92 	bl	8000f5c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8000a38:	201a      	movs	r0, #26
 8000a3a:	f000 faab 	bl	8000f94 <HAL_NVIC_EnableIRQ>
}
 8000a3e:	bf00      	nop
 8000a40:	3710      	adds	r7, #16
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	40014400 	.word	0x40014400
 8000a4c:	40021000 	.word	0x40021000
 8000a50:	40014800 	.word	0x40014800

08000a54 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b0ac      	sub	sp, #176	@ 0xb0
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a5c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000a60:	2200      	movs	r2, #0
 8000a62:	601a      	str	r2, [r3, #0]
 8000a64:	605a      	str	r2, [r3, #4]
 8000a66:	609a      	str	r2, [r3, #8]
 8000a68:	60da      	str	r2, [r3, #12]
 8000a6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a6c:	f107 0314 	add.w	r3, r7, #20
 8000a70:	2288      	movs	r2, #136	@ 0x88
 8000a72:	2100      	movs	r1, #0
 8000a74:	4618      	mov	r0, r3
 8000a76:	f002 fff8 	bl	8003a6a <memset>
  if(huart->Instance==USART2)
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	4a21      	ldr	r2, [pc, #132]	@ (8000b04 <HAL_UART_MspInit+0xb0>)
 8000a80:	4293      	cmp	r3, r2
 8000a82:	d13b      	bne.n	8000afc <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000a84:	2302      	movs	r3, #2
 8000a86:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a8c:	f107 0314 	add.w	r3, r7, #20
 8000a90:	4618      	mov	r0, r3
 8000a92:	f001 fb23 	bl	80020dc <HAL_RCCEx_PeriphCLKConfig>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000a9c:	f7ff ff6e 	bl	800097c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000aa0:	4b19      	ldr	r3, [pc, #100]	@ (8000b08 <HAL_UART_MspInit+0xb4>)
 8000aa2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000aa4:	4a18      	ldr	r2, [pc, #96]	@ (8000b08 <HAL_UART_MspInit+0xb4>)
 8000aa6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000aaa:	6593      	str	r3, [r2, #88]	@ 0x58
 8000aac:	4b16      	ldr	r3, [pc, #88]	@ (8000b08 <HAL_UART_MspInit+0xb4>)
 8000aae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ab0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ab4:	613b      	str	r3, [r7, #16]
 8000ab6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ab8:	4b13      	ldr	r3, [pc, #76]	@ (8000b08 <HAL_UART_MspInit+0xb4>)
 8000aba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000abc:	4a12      	ldr	r2, [pc, #72]	@ (8000b08 <HAL_UART_MspInit+0xb4>)
 8000abe:	f043 0301 	orr.w	r3, r3, #1
 8000ac2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ac4:	4b10      	ldr	r3, [pc, #64]	@ (8000b08 <HAL_UART_MspInit+0xb4>)
 8000ac6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ac8:	f003 0301 	and.w	r3, r3, #1
 8000acc:	60fb      	str	r3, [r7, #12]
 8000ace:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000ad0:	230c      	movs	r3, #12
 8000ad2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad6:	2302      	movs	r3, #2
 8000ad8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000adc:	2300      	movs	r3, #0
 8000ade:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ae2:	2303      	movs	r3, #3
 8000ae4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ae8:	2307      	movs	r3, #7
 8000aea:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aee:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000af2:	4619      	mov	r1, r3
 8000af4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000af8:	f000 fa5a 	bl	8000fb0 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000afc:	bf00      	nop
 8000afe:	37b0      	adds	r7, #176	@ 0xb0
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	40004400 	.word	0x40004400
 8000b08:	40021000 	.word	0x40021000

08000b0c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b08e      	sub	sp, #56	@ 0x38
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 8000b14:	2300      	movs	r3, #0
 8000b16:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8000b1a:	4b34      	ldr	r3, [pc, #208]	@ (8000bec <HAL_InitTick+0xe0>)
 8000b1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b1e:	4a33      	ldr	r2, [pc, #204]	@ (8000bec <HAL_InitTick+0xe0>)
 8000b20:	f043 0302 	orr.w	r3, r3, #2
 8000b24:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b26:	4b31      	ldr	r3, [pc, #196]	@ (8000bec <HAL_InitTick+0xe0>)
 8000b28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b2a:	f003 0302 	and.w	r3, r3, #2
 8000b2e:	60fb      	str	r3, [r7, #12]
 8000b30:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b32:	f107 0210 	add.w	r2, r7, #16
 8000b36:	f107 0314 	add.w	r3, r7, #20
 8000b3a:	4611      	mov	r1, r2
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f001 fa3b 	bl	8001fb8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000b42:	6a3b      	ldr	r3, [r7, #32]
 8000b44:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000b46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d103      	bne.n	8000b54 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000b4c:	f001 fa08 	bl	8001f60 <HAL_RCC_GetPCLK1Freq>
 8000b50:	6378      	str	r0, [r7, #52]	@ 0x34
 8000b52:	e004      	b.n	8000b5e <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000b54:	f001 fa04 	bl	8001f60 <HAL_RCC_GetPCLK1Freq>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	005b      	lsls	r3, r3, #1
 8000b5c:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000b60:	4a23      	ldr	r2, [pc, #140]	@ (8000bf0 <HAL_InitTick+0xe4>)
 8000b62:	fba2 2303 	umull	r2, r3, r2, r3
 8000b66:	0c9b      	lsrs	r3, r3, #18
 8000b68:	3b01      	subs	r3, #1
 8000b6a:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8000b6c:	4b21      	ldr	r3, [pc, #132]	@ (8000bf4 <HAL_InitTick+0xe8>)
 8000b6e:	4a22      	ldr	r2, [pc, #136]	@ (8000bf8 <HAL_InitTick+0xec>)
 8000b70:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 8000b72:	4b20      	ldr	r3, [pc, #128]	@ (8000bf4 <HAL_InitTick+0xe8>)
 8000b74:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000b78:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 8000b7a:	4a1e      	ldr	r2, [pc, #120]	@ (8000bf4 <HAL_InitTick+0xe8>)
 8000b7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b7e:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 8000b80:	4b1c      	ldr	r3, [pc, #112]	@ (8000bf4 <HAL_InitTick+0xe8>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b86:	4b1b      	ldr	r3, [pc, #108]	@ (8000bf4 <HAL_InitTick+0xe8>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	609a      	str	r2, [r3, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b8c:	4b19      	ldr	r3, [pc, #100]	@ (8000bf4 <HAL_InitTick+0xe8>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim3);
 8000b92:	4818      	ldr	r0, [pc, #96]	@ (8000bf4 <HAL_InitTick+0xe8>)
 8000b94:	f001 ff5e 	bl	8002a54 <HAL_TIM_Base_Init>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000b9e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d11b      	bne.n	8000bde <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim3);
 8000ba6:	4813      	ldr	r0, [pc, #76]	@ (8000bf4 <HAL_InitTick+0xe8>)
 8000ba8:	f001 ffac 	bl	8002b04 <HAL_TIM_Base_Start_IT>
 8000bac:	4603      	mov	r3, r0
 8000bae:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000bb2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d111      	bne.n	8000bde <HAL_InitTick+0xd2>
    {
    /* Enable the TIM3 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000bba:	201d      	movs	r0, #29
 8000bbc:	f000 f9ea 	bl	8000f94 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	2b0f      	cmp	r3, #15
 8000bc4:	d808      	bhi.n	8000bd8 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority, 0U);
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	6879      	ldr	r1, [r7, #4]
 8000bca:	201d      	movs	r0, #29
 8000bcc:	f000 f9c6 	bl	8000f5c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bd0:	4a0a      	ldr	r2, [pc, #40]	@ (8000bfc <HAL_InitTick+0xf0>)
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	6013      	str	r3, [r2, #0]
 8000bd6:	e002      	b.n	8000bde <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8000bd8:	2301      	movs	r3, #1
 8000bda:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000bde:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000be2:	4618      	mov	r0, r3
 8000be4:	3738      	adds	r7, #56	@ 0x38
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	40021000 	.word	0x40021000
 8000bf0:	431bde83 	.word	0x431bde83
 8000bf4:	20000160 	.word	0x20000160
 8000bf8:	40000400 	.word	0x40000400
 8000bfc:	2000000c 	.word	0x2000000c

08000c00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c04:	bf00      	nop
 8000c06:	e7fd      	b.n	8000c04 <NMI_Handler+0x4>

08000c08 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c0c:	bf00      	nop
 8000c0e:	e7fd      	b.n	8000c0c <HardFault_Handler+0x4>

08000c10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c14:	bf00      	nop
 8000c16:	e7fd      	b.n	8000c14 <MemManage_Handler+0x4>

08000c18 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c1c:	bf00      	nop
 8000c1e:	e7fd      	b.n	8000c1c <BusFault_Handler+0x4>

08000c20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c24:	bf00      	nop
 8000c26:	e7fd      	b.n	8000c24 <UsageFault_Handler+0x4>

08000c28 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c2c:	bf00      	nop
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr

08000c36 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c36:	b480      	push	{r7}
 8000c38:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c3a:	bf00      	nop
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c42:	4770      	bx	lr

08000c44 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c48:	bf00      	nop
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr

08000c52 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c52:	b480      	push	{r7}
 8000c54:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c56:	bf00      	nop
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5e:	4770      	bx	lr

08000c60 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8000c64:	4802      	ldr	r0, [pc, #8]	@ (8000c70 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000c66:	f001 ffec 	bl	8002c42 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000c6a:	bf00      	nop
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	20000030 	.word	0x20000030

08000c74 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8000c78:	4802      	ldr	r0, [pc, #8]	@ (8000c84 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8000c7a:	f001 ffe2 	bl	8002c42 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8000c7e:	bf00      	nop
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	2000007c 	.word	0x2000007c

08000c88 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000c8c:	4802      	ldr	r0, [pc, #8]	@ (8000c98 <TIM3_IRQHandler+0x10>)
 8000c8e:	f001 ffd8 	bl	8002c42 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000c92:	bf00      	nop
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	20000160 	.word	0x20000160

08000c9c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000ca0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000ca4:	f000 fb60 	bl	8001368 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000ca8:	bf00      	nop
 8000caa:	bd80      	pop	{r7, pc}

08000cac <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000cb0:	4b06      	ldr	r3, [pc, #24]	@ (8000ccc <SystemInit+0x20>)
 8000cb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000cb6:	4a05      	ldr	r2, [pc, #20]	@ (8000ccc <SystemInit+0x20>)
 8000cb8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000cbc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000cc0:	bf00      	nop
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr
 8000cca:	bf00      	nop
 8000ccc:	e000ed00 	.word	0xe000ed00

08000cd0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000cd0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d08 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000cd4:	f7ff ffea 	bl	8000cac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cd8:	480c      	ldr	r0, [pc, #48]	@ (8000d0c <LoopForever+0x6>)
  ldr r1, =_edata
 8000cda:	490d      	ldr	r1, [pc, #52]	@ (8000d10 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000cdc:	4a0d      	ldr	r2, [pc, #52]	@ (8000d14 <LoopForever+0xe>)
  movs r3, #0
 8000cde:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ce0:	e002      	b.n	8000ce8 <LoopCopyDataInit>

08000ce2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ce2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ce4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ce6:	3304      	adds	r3, #4

08000ce8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ce8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cec:	d3f9      	bcc.n	8000ce2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cee:	4a0a      	ldr	r2, [pc, #40]	@ (8000d18 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000cf0:	4c0a      	ldr	r4, [pc, #40]	@ (8000d1c <LoopForever+0x16>)
  movs r3, #0
 8000cf2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cf4:	e001      	b.n	8000cfa <LoopFillZerobss>

08000cf6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cf6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cf8:	3204      	adds	r2, #4

08000cfa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cfa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cfc:	d3fb      	bcc.n	8000cf6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cfe:	f002 febd 	bl	8003a7c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d02:	f7ff fbd9 	bl	80004b8 <main>

08000d06 <LoopForever>:

LoopForever:
    b LoopForever
 8000d06:	e7fe      	b.n	8000d06 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000d08:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000d0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d10:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000d14:	08003b34 	.word	0x08003b34
  ldr r2, =_sbss
 8000d18:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000d1c:	200001b0 	.word	0x200001b0

08000d20 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d20:	e7fe      	b.n	8000d20 <ADC1_2_IRQHandler>
	...

08000d24 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d2e:	4b0c      	ldr	r3, [pc, #48]	@ (8000d60 <HAL_Init+0x3c>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	4a0b      	ldr	r2, [pc, #44]	@ (8000d60 <HAL_Init+0x3c>)
 8000d34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d38:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d3a:	2003      	movs	r0, #3
 8000d3c:	f000 f903 	bl	8000f46 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d40:	200f      	movs	r0, #15
 8000d42:	f7ff fee3 	bl	8000b0c <HAL_InitTick>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d002      	beq.n	8000d52 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000d4c:	2301      	movs	r3, #1
 8000d4e:	71fb      	strb	r3, [r7, #7]
 8000d50:	e001      	b.n	8000d56 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d52:	f7ff fe19 	bl	8000988 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d56:	79fb      	ldrb	r3, [r7, #7]
}
 8000d58:	4618      	mov	r0, r3
 8000d5a:	3708      	adds	r7, #8
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	40022000 	.word	0x40022000

08000d64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d68:	4b06      	ldr	r3, [pc, #24]	@ (8000d84 <HAL_IncTick+0x20>)
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	461a      	mov	r2, r3
 8000d6e:	4b06      	ldr	r3, [pc, #24]	@ (8000d88 <HAL_IncTick+0x24>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	4413      	add	r3, r2
 8000d74:	4a04      	ldr	r2, [pc, #16]	@ (8000d88 <HAL_IncTick+0x24>)
 8000d76:	6013      	str	r3, [r2, #0]
}
 8000d78:	bf00      	nop
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop
 8000d84:	20000010 	.word	0x20000010
 8000d88:	200001ac 	.word	0x200001ac

08000d8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d90:	4b03      	ldr	r3, [pc, #12]	@ (8000da0 <HAL_GetTick+0x14>)
 8000d92:	681b      	ldr	r3, [r3, #0]
}
 8000d94:	4618      	mov	r0, r3
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr
 8000d9e:	bf00      	nop
 8000da0:	200001ac 	.word	0x200001ac

08000da4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b084      	sub	sp, #16
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000dac:	f7ff ffee 	bl	8000d8c <HAL_GetTick>
 8000db0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000dbc:	d005      	beq.n	8000dca <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000dbe:	4b0a      	ldr	r3, [pc, #40]	@ (8000de8 <HAL_Delay+0x44>)
 8000dc0:	781b      	ldrb	r3, [r3, #0]
 8000dc2:	461a      	mov	r2, r3
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	4413      	add	r3, r2
 8000dc8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000dca:	bf00      	nop
 8000dcc:	f7ff ffde 	bl	8000d8c <HAL_GetTick>
 8000dd0:	4602      	mov	r2, r0
 8000dd2:	68bb      	ldr	r3, [r7, #8]
 8000dd4:	1ad3      	subs	r3, r2, r3
 8000dd6:	68fa      	ldr	r2, [r7, #12]
 8000dd8:	429a      	cmp	r2, r3
 8000dda:	d8f7      	bhi.n	8000dcc <HAL_Delay+0x28>
  {
  }
}
 8000ddc:	bf00      	nop
 8000dde:	bf00      	nop
 8000de0:	3710      	adds	r7, #16
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	20000010 	.word	0x20000010

08000dec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b085      	sub	sp, #20
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	f003 0307 	and.w	r3, r3, #7
 8000dfa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dfc:	4b0c      	ldr	r3, [pc, #48]	@ (8000e30 <__NVIC_SetPriorityGrouping+0x44>)
 8000dfe:	68db      	ldr	r3, [r3, #12]
 8000e00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e02:	68ba      	ldr	r2, [r7, #8]
 8000e04:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e08:	4013      	ands	r3, r2
 8000e0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e10:	68bb      	ldr	r3, [r7, #8]
 8000e12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e14:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e18:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e1e:	4a04      	ldr	r2, [pc, #16]	@ (8000e30 <__NVIC_SetPriorityGrouping+0x44>)
 8000e20:	68bb      	ldr	r3, [r7, #8]
 8000e22:	60d3      	str	r3, [r2, #12]
}
 8000e24:	bf00      	nop
 8000e26:	3714      	adds	r7, #20
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2e:	4770      	bx	lr
 8000e30:	e000ed00 	.word	0xe000ed00

08000e34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e38:	4b04      	ldr	r3, [pc, #16]	@ (8000e4c <__NVIC_GetPriorityGrouping+0x18>)
 8000e3a:	68db      	ldr	r3, [r3, #12]
 8000e3c:	0a1b      	lsrs	r3, r3, #8
 8000e3e:	f003 0307 	and.w	r3, r3, #7
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	46bd      	mov	sp, r7
 8000e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4a:	4770      	bx	lr
 8000e4c:	e000ed00 	.word	0xe000ed00

08000e50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e50:	b480      	push	{r7}
 8000e52:	b083      	sub	sp, #12
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	4603      	mov	r3, r0
 8000e58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	db0b      	blt.n	8000e7a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e62:	79fb      	ldrb	r3, [r7, #7]
 8000e64:	f003 021f 	and.w	r2, r3, #31
 8000e68:	4907      	ldr	r1, [pc, #28]	@ (8000e88 <__NVIC_EnableIRQ+0x38>)
 8000e6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e6e:	095b      	lsrs	r3, r3, #5
 8000e70:	2001      	movs	r0, #1
 8000e72:	fa00 f202 	lsl.w	r2, r0, r2
 8000e76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e7a:	bf00      	nop
 8000e7c:	370c      	adds	r7, #12
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop
 8000e88:	e000e100 	.word	0xe000e100

08000e8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b083      	sub	sp, #12
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	4603      	mov	r3, r0
 8000e94:	6039      	str	r1, [r7, #0]
 8000e96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	db0a      	blt.n	8000eb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	b2da      	uxtb	r2, r3
 8000ea4:	490c      	ldr	r1, [pc, #48]	@ (8000ed8 <__NVIC_SetPriority+0x4c>)
 8000ea6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eaa:	0112      	lsls	r2, r2, #4
 8000eac:	b2d2      	uxtb	r2, r2
 8000eae:	440b      	add	r3, r1
 8000eb0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000eb4:	e00a      	b.n	8000ecc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	b2da      	uxtb	r2, r3
 8000eba:	4908      	ldr	r1, [pc, #32]	@ (8000edc <__NVIC_SetPriority+0x50>)
 8000ebc:	79fb      	ldrb	r3, [r7, #7]
 8000ebe:	f003 030f 	and.w	r3, r3, #15
 8000ec2:	3b04      	subs	r3, #4
 8000ec4:	0112      	lsls	r2, r2, #4
 8000ec6:	b2d2      	uxtb	r2, r2
 8000ec8:	440b      	add	r3, r1
 8000eca:	761a      	strb	r2, [r3, #24]
}
 8000ecc:	bf00      	nop
 8000ece:	370c      	adds	r7, #12
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed6:	4770      	bx	lr
 8000ed8:	e000e100 	.word	0xe000e100
 8000edc:	e000ed00 	.word	0xe000ed00

08000ee0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b089      	sub	sp, #36	@ 0x24
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	60f8      	str	r0, [r7, #12]
 8000ee8:	60b9      	str	r1, [r7, #8]
 8000eea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	f003 0307 	and.w	r3, r3, #7
 8000ef2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ef4:	69fb      	ldr	r3, [r7, #28]
 8000ef6:	f1c3 0307 	rsb	r3, r3, #7
 8000efa:	2b04      	cmp	r3, #4
 8000efc:	bf28      	it	cs
 8000efe:	2304      	movcs	r3, #4
 8000f00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f02:	69fb      	ldr	r3, [r7, #28]
 8000f04:	3304      	adds	r3, #4
 8000f06:	2b06      	cmp	r3, #6
 8000f08:	d902      	bls.n	8000f10 <NVIC_EncodePriority+0x30>
 8000f0a:	69fb      	ldr	r3, [r7, #28]
 8000f0c:	3b03      	subs	r3, #3
 8000f0e:	e000      	b.n	8000f12 <NVIC_EncodePriority+0x32>
 8000f10:	2300      	movs	r3, #0
 8000f12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f14:	f04f 32ff 	mov.w	r2, #4294967295
 8000f18:	69bb      	ldr	r3, [r7, #24]
 8000f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1e:	43da      	mvns	r2, r3
 8000f20:	68bb      	ldr	r3, [r7, #8]
 8000f22:	401a      	ands	r2, r3
 8000f24:	697b      	ldr	r3, [r7, #20]
 8000f26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f28:	f04f 31ff 	mov.w	r1, #4294967295
 8000f2c:	697b      	ldr	r3, [r7, #20]
 8000f2e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f32:	43d9      	mvns	r1, r3
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f38:	4313      	orrs	r3, r2
         );
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	3724      	adds	r7, #36	@ 0x24
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr

08000f46 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f46:	b580      	push	{r7, lr}
 8000f48:	b082      	sub	sp, #8
 8000f4a:	af00      	add	r7, sp, #0
 8000f4c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f4e:	6878      	ldr	r0, [r7, #4]
 8000f50:	f7ff ff4c 	bl	8000dec <__NVIC_SetPriorityGrouping>
}
 8000f54:	bf00      	nop
 8000f56:	3708      	adds	r7, #8
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}

08000f5c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b086      	sub	sp, #24
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	4603      	mov	r3, r0
 8000f64:	60b9      	str	r1, [r7, #8]
 8000f66:	607a      	str	r2, [r7, #4]
 8000f68:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f6e:	f7ff ff61 	bl	8000e34 <__NVIC_GetPriorityGrouping>
 8000f72:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f74:	687a      	ldr	r2, [r7, #4]
 8000f76:	68b9      	ldr	r1, [r7, #8]
 8000f78:	6978      	ldr	r0, [r7, #20]
 8000f7a:	f7ff ffb1 	bl	8000ee0 <NVIC_EncodePriority>
 8000f7e:	4602      	mov	r2, r0
 8000f80:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f84:	4611      	mov	r1, r2
 8000f86:	4618      	mov	r0, r3
 8000f88:	f7ff ff80 	bl	8000e8c <__NVIC_SetPriority>
}
 8000f8c:	bf00      	nop
 8000f8e:	3718      	adds	r7, #24
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}

08000f94 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f7ff ff54 	bl	8000e50 <__NVIC_EnableIRQ>
}
 8000fa8:	bf00      	nop
 8000faa:	3708      	adds	r7, #8
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}

08000fb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b087      	sub	sp, #28
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
 8000fb8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fbe:	e17f      	b.n	80012c0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	681a      	ldr	r2, [r3, #0]
 8000fc4:	2101      	movs	r1, #1
 8000fc6:	697b      	ldr	r3, [r7, #20]
 8000fc8:	fa01 f303 	lsl.w	r3, r1, r3
 8000fcc:	4013      	ands	r3, r2
 8000fce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	f000 8171 	beq.w	80012ba <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	f003 0303 	and.w	r3, r3, #3
 8000fe0:	2b01      	cmp	r3, #1
 8000fe2:	d005      	beq.n	8000ff0 <HAL_GPIO_Init+0x40>
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	f003 0303 	and.w	r3, r3, #3
 8000fec:	2b02      	cmp	r3, #2
 8000fee:	d130      	bne.n	8001052 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	689b      	ldr	r3, [r3, #8]
 8000ff4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000ff6:	697b      	ldr	r3, [r7, #20]
 8000ff8:	005b      	lsls	r3, r3, #1
 8000ffa:	2203      	movs	r2, #3
 8000ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8001000:	43db      	mvns	r3, r3
 8001002:	693a      	ldr	r2, [r7, #16]
 8001004:	4013      	ands	r3, r2
 8001006:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	68da      	ldr	r2, [r3, #12]
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	005b      	lsls	r3, r3, #1
 8001010:	fa02 f303 	lsl.w	r3, r2, r3
 8001014:	693a      	ldr	r2, [r7, #16]
 8001016:	4313      	orrs	r3, r2
 8001018:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	693a      	ldr	r2, [r7, #16]
 800101e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001026:	2201      	movs	r2, #1
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	fa02 f303 	lsl.w	r3, r2, r3
 800102e:	43db      	mvns	r3, r3
 8001030:	693a      	ldr	r2, [r7, #16]
 8001032:	4013      	ands	r3, r2
 8001034:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	091b      	lsrs	r3, r3, #4
 800103c:	f003 0201 	and.w	r2, r3, #1
 8001040:	697b      	ldr	r3, [r7, #20]
 8001042:	fa02 f303 	lsl.w	r3, r2, r3
 8001046:	693a      	ldr	r2, [r7, #16]
 8001048:	4313      	orrs	r3, r2
 800104a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	693a      	ldr	r2, [r7, #16]
 8001050:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	685b      	ldr	r3, [r3, #4]
 8001056:	f003 0303 	and.w	r3, r3, #3
 800105a:	2b03      	cmp	r3, #3
 800105c:	d118      	bne.n	8001090 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001062:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001064:	2201      	movs	r2, #1
 8001066:	697b      	ldr	r3, [r7, #20]
 8001068:	fa02 f303 	lsl.w	r3, r2, r3
 800106c:	43db      	mvns	r3, r3
 800106e:	693a      	ldr	r2, [r7, #16]
 8001070:	4013      	ands	r3, r2
 8001072:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	08db      	lsrs	r3, r3, #3
 800107a:	f003 0201 	and.w	r2, r3, #1
 800107e:	697b      	ldr	r3, [r7, #20]
 8001080:	fa02 f303 	lsl.w	r3, r2, r3
 8001084:	693a      	ldr	r2, [r7, #16]
 8001086:	4313      	orrs	r3, r2
 8001088:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	693a      	ldr	r2, [r7, #16]
 800108e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	f003 0303 	and.w	r3, r3, #3
 8001098:	2b03      	cmp	r3, #3
 800109a:	d017      	beq.n	80010cc <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	68db      	ldr	r3, [r3, #12]
 80010a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80010a2:	697b      	ldr	r3, [r7, #20]
 80010a4:	005b      	lsls	r3, r3, #1
 80010a6:	2203      	movs	r2, #3
 80010a8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ac:	43db      	mvns	r3, r3
 80010ae:	693a      	ldr	r2, [r7, #16]
 80010b0:	4013      	ands	r3, r2
 80010b2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	689a      	ldr	r2, [r3, #8]
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	005b      	lsls	r3, r3, #1
 80010bc:	fa02 f303 	lsl.w	r3, r2, r3
 80010c0:	693a      	ldr	r2, [r7, #16]
 80010c2:	4313      	orrs	r3, r2
 80010c4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	693a      	ldr	r2, [r7, #16]
 80010ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	f003 0303 	and.w	r3, r3, #3
 80010d4:	2b02      	cmp	r3, #2
 80010d6:	d123      	bne.n	8001120 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	08da      	lsrs	r2, r3, #3
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	3208      	adds	r2, #8
 80010e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010e4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80010e6:	697b      	ldr	r3, [r7, #20]
 80010e8:	f003 0307 	and.w	r3, r3, #7
 80010ec:	009b      	lsls	r3, r3, #2
 80010ee:	220f      	movs	r2, #15
 80010f0:	fa02 f303 	lsl.w	r3, r2, r3
 80010f4:	43db      	mvns	r3, r3
 80010f6:	693a      	ldr	r2, [r7, #16]
 80010f8:	4013      	ands	r3, r2
 80010fa:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	691a      	ldr	r2, [r3, #16]
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	f003 0307 	and.w	r3, r3, #7
 8001106:	009b      	lsls	r3, r3, #2
 8001108:	fa02 f303 	lsl.w	r3, r2, r3
 800110c:	693a      	ldr	r2, [r7, #16]
 800110e:	4313      	orrs	r3, r2
 8001110:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	08da      	lsrs	r2, r3, #3
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	3208      	adds	r2, #8
 800111a:	6939      	ldr	r1, [r7, #16]
 800111c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001126:	697b      	ldr	r3, [r7, #20]
 8001128:	005b      	lsls	r3, r3, #1
 800112a:	2203      	movs	r2, #3
 800112c:	fa02 f303 	lsl.w	r3, r2, r3
 8001130:	43db      	mvns	r3, r3
 8001132:	693a      	ldr	r2, [r7, #16]
 8001134:	4013      	ands	r3, r2
 8001136:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	f003 0203 	and.w	r2, r3, #3
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	005b      	lsls	r3, r3, #1
 8001144:	fa02 f303 	lsl.w	r3, r2, r3
 8001148:	693a      	ldr	r2, [r7, #16]
 800114a:	4313      	orrs	r3, r2
 800114c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	693a      	ldr	r2, [r7, #16]
 8001152:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800115c:	2b00      	cmp	r3, #0
 800115e:	f000 80ac 	beq.w	80012ba <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001162:	4b5f      	ldr	r3, [pc, #380]	@ (80012e0 <HAL_GPIO_Init+0x330>)
 8001164:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001166:	4a5e      	ldr	r2, [pc, #376]	@ (80012e0 <HAL_GPIO_Init+0x330>)
 8001168:	f043 0301 	orr.w	r3, r3, #1
 800116c:	6613      	str	r3, [r2, #96]	@ 0x60
 800116e:	4b5c      	ldr	r3, [pc, #368]	@ (80012e0 <HAL_GPIO_Init+0x330>)
 8001170:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001172:	f003 0301 	and.w	r3, r3, #1
 8001176:	60bb      	str	r3, [r7, #8]
 8001178:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800117a:	4a5a      	ldr	r2, [pc, #360]	@ (80012e4 <HAL_GPIO_Init+0x334>)
 800117c:	697b      	ldr	r3, [r7, #20]
 800117e:	089b      	lsrs	r3, r3, #2
 8001180:	3302      	adds	r3, #2
 8001182:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001186:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	f003 0303 	and.w	r3, r3, #3
 800118e:	009b      	lsls	r3, r3, #2
 8001190:	220f      	movs	r2, #15
 8001192:	fa02 f303 	lsl.w	r3, r2, r3
 8001196:	43db      	mvns	r3, r3
 8001198:	693a      	ldr	r2, [r7, #16]
 800119a:	4013      	ands	r3, r2
 800119c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80011a4:	d025      	beq.n	80011f2 <HAL_GPIO_Init+0x242>
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	4a4f      	ldr	r2, [pc, #316]	@ (80012e8 <HAL_GPIO_Init+0x338>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d01f      	beq.n	80011ee <HAL_GPIO_Init+0x23e>
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	4a4e      	ldr	r2, [pc, #312]	@ (80012ec <HAL_GPIO_Init+0x33c>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d019      	beq.n	80011ea <HAL_GPIO_Init+0x23a>
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	4a4d      	ldr	r2, [pc, #308]	@ (80012f0 <HAL_GPIO_Init+0x340>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d013      	beq.n	80011e6 <HAL_GPIO_Init+0x236>
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	4a4c      	ldr	r2, [pc, #304]	@ (80012f4 <HAL_GPIO_Init+0x344>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d00d      	beq.n	80011e2 <HAL_GPIO_Init+0x232>
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	4a4b      	ldr	r2, [pc, #300]	@ (80012f8 <HAL_GPIO_Init+0x348>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d007      	beq.n	80011de <HAL_GPIO_Init+0x22e>
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	4a4a      	ldr	r2, [pc, #296]	@ (80012fc <HAL_GPIO_Init+0x34c>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d101      	bne.n	80011da <HAL_GPIO_Init+0x22a>
 80011d6:	2306      	movs	r3, #6
 80011d8:	e00c      	b.n	80011f4 <HAL_GPIO_Init+0x244>
 80011da:	2307      	movs	r3, #7
 80011dc:	e00a      	b.n	80011f4 <HAL_GPIO_Init+0x244>
 80011de:	2305      	movs	r3, #5
 80011e0:	e008      	b.n	80011f4 <HAL_GPIO_Init+0x244>
 80011e2:	2304      	movs	r3, #4
 80011e4:	e006      	b.n	80011f4 <HAL_GPIO_Init+0x244>
 80011e6:	2303      	movs	r3, #3
 80011e8:	e004      	b.n	80011f4 <HAL_GPIO_Init+0x244>
 80011ea:	2302      	movs	r3, #2
 80011ec:	e002      	b.n	80011f4 <HAL_GPIO_Init+0x244>
 80011ee:	2301      	movs	r3, #1
 80011f0:	e000      	b.n	80011f4 <HAL_GPIO_Init+0x244>
 80011f2:	2300      	movs	r3, #0
 80011f4:	697a      	ldr	r2, [r7, #20]
 80011f6:	f002 0203 	and.w	r2, r2, #3
 80011fa:	0092      	lsls	r2, r2, #2
 80011fc:	4093      	lsls	r3, r2
 80011fe:	693a      	ldr	r2, [r7, #16]
 8001200:	4313      	orrs	r3, r2
 8001202:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001204:	4937      	ldr	r1, [pc, #220]	@ (80012e4 <HAL_GPIO_Init+0x334>)
 8001206:	697b      	ldr	r3, [r7, #20]
 8001208:	089b      	lsrs	r3, r3, #2
 800120a:	3302      	adds	r3, #2
 800120c:	693a      	ldr	r2, [r7, #16]
 800120e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001212:	4b3b      	ldr	r3, [pc, #236]	@ (8001300 <HAL_GPIO_Init+0x350>)
 8001214:	689b      	ldr	r3, [r3, #8]
 8001216:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	43db      	mvns	r3, r3
 800121c:	693a      	ldr	r2, [r7, #16]
 800121e:	4013      	ands	r3, r2
 8001220:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800122a:	2b00      	cmp	r3, #0
 800122c:	d003      	beq.n	8001236 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800122e:	693a      	ldr	r2, [r7, #16]
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	4313      	orrs	r3, r2
 8001234:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001236:	4a32      	ldr	r2, [pc, #200]	@ (8001300 <HAL_GPIO_Init+0x350>)
 8001238:	693b      	ldr	r3, [r7, #16]
 800123a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800123c:	4b30      	ldr	r3, [pc, #192]	@ (8001300 <HAL_GPIO_Init+0x350>)
 800123e:	68db      	ldr	r3, [r3, #12]
 8001240:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	43db      	mvns	r3, r3
 8001246:	693a      	ldr	r2, [r7, #16]
 8001248:	4013      	ands	r3, r2
 800124a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001254:	2b00      	cmp	r3, #0
 8001256:	d003      	beq.n	8001260 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001258:	693a      	ldr	r2, [r7, #16]
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	4313      	orrs	r3, r2
 800125e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001260:	4a27      	ldr	r2, [pc, #156]	@ (8001300 <HAL_GPIO_Init+0x350>)
 8001262:	693b      	ldr	r3, [r7, #16]
 8001264:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001266:	4b26      	ldr	r3, [pc, #152]	@ (8001300 <HAL_GPIO_Init+0x350>)
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	43db      	mvns	r3, r3
 8001270:	693a      	ldr	r2, [r7, #16]
 8001272:	4013      	ands	r3, r2
 8001274:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800127e:	2b00      	cmp	r3, #0
 8001280:	d003      	beq.n	800128a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001282:	693a      	ldr	r2, [r7, #16]
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	4313      	orrs	r3, r2
 8001288:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800128a:	4a1d      	ldr	r2, [pc, #116]	@ (8001300 <HAL_GPIO_Init+0x350>)
 800128c:	693b      	ldr	r3, [r7, #16]
 800128e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001290:	4b1b      	ldr	r3, [pc, #108]	@ (8001300 <HAL_GPIO_Init+0x350>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	43db      	mvns	r3, r3
 800129a:	693a      	ldr	r2, [r7, #16]
 800129c:	4013      	ands	r3, r2
 800129e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d003      	beq.n	80012b4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80012ac:	693a      	ldr	r2, [r7, #16]
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	4313      	orrs	r3, r2
 80012b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80012b4:	4a12      	ldr	r2, [pc, #72]	@ (8001300 <HAL_GPIO_Init+0x350>)
 80012b6:	693b      	ldr	r3, [r7, #16]
 80012b8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	3301      	adds	r3, #1
 80012be:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	681a      	ldr	r2, [r3, #0]
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	fa22 f303 	lsr.w	r3, r2, r3
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	f47f ae78 	bne.w	8000fc0 <HAL_GPIO_Init+0x10>
  }
}
 80012d0:	bf00      	nop
 80012d2:	bf00      	nop
 80012d4:	371c      	adds	r7, #28
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop
 80012e0:	40021000 	.word	0x40021000
 80012e4:	40010000 	.word	0x40010000
 80012e8:	48000400 	.word	0x48000400
 80012ec:	48000800 	.word	0x48000800
 80012f0:	48000c00 	.word	0x48000c00
 80012f4:	48001000 	.word	0x48001000
 80012f8:	48001400 	.word	0x48001400
 80012fc:	48001800 	.word	0x48001800
 8001300:	40010400 	.word	0x40010400

08001304 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001304:	b480      	push	{r7}
 8001306:	b083      	sub	sp, #12
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
 800130c:	460b      	mov	r3, r1
 800130e:	807b      	strh	r3, [r7, #2]
 8001310:	4613      	mov	r3, r2
 8001312:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001314:	787b      	ldrb	r3, [r7, #1]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d003      	beq.n	8001322 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800131a:	887a      	ldrh	r2, [r7, #2]
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001320:	e002      	b.n	8001328 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001322:	887a      	ldrh	r2, [r7, #2]
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001328:	bf00      	nop
 800132a:	370c      	adds	r7, #12
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr

08001334 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001334:	b480      	push	{r7}
 8001336:	b085      	sub	sp, #20
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
 800133c:	460b      	mov	r3, r1
 800133e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	695b      	ldr	r3, [r3, #20]
 8001344:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001346:	887a      	ldrh	r2, [r7, #2]
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	4013      	ands	r3, r2
 800134c:	041a      	lsls	r2, r3, #16
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	43d9      	mvns	r1, r3
 8001352:	887b      	ldrh	r3, [r7, #2]
 8001354:	400b      	ands	r3, r1
 8001356:	431a      	orrs	r2, r3
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	619a      	str	r2, [r3, #24]
}
 800135c:	bf00      	nop
 800135e:	3714      	adds	r7, #20
 8001360:	46bd      	mov	sp, r7
 8001362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001366:	4770      	bx	lr

08001368 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0
 800136e:	4603      	mov	r3, r0
 8001370:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001372:	4b08      	ldr	r3, [pc, #32]	@ (8001394 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001374:	695a      	ldr	r2, [r3, #20]
 8001376:	88fb      	ldrh	r3, [r7, #6]
 8001378:	4013      	ands	r3, r2
 800137a:	2b00      	cmp	r3, #0
 800137c:	d006      	beq.n	800138c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800137e:	4a05      	ldr	r2, [pc, #20]	@ (8001394 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001380:	88fb      	ldrh	r3, [r7, #6]
 8001382:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001384:	88fb      	ldrh	r3, [r7, #6]
 8001386:	4618      	mov	r0, r3
 8001388:	f000 f806 	bl	8001398 <HAL_GPIO_EXTI_Callback>
  }
}
 800138c:	bf00      	nop
 800138e:	3708      	adds	r7, #8
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	40010400 	.word	0x40010400

08001398 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001398:	b480      	push	{r7}
 800139a:	b083      	sub	sp, #12
 800139c:	af00      	add	r7, sp, #0
 800139e:	4603      	mov	r3, r0
 80013a0:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80013a2:	bf00      	nop
 80013a4:	370c      	adds	r7, #12
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr
	...

080013b0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80013b4:	4b04      	ldr	r3, [pc, #16]	@ (80013c8 <HAL_PWREx_GetVoltageRange+0x18>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80013bc:	4618      	mov	r0, r3
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr
 80013c6:	bf00      	nop
 80013c8:	40007000 	.word	0x40007000

080013cc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b085      	sub	sp, #20
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80013da:	d130      	bne.n	800143e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80013dc:	4b23      	ldr	r3, [pc, #140]	@ (800146c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80013e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80013e8:	d038      	beq.n	800145c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80013ea:	4b20      	ldr	r3, [pc, #128]	@ (800146c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80013f2:	4a1e      	ldr	r2, [pc, #120]	@ (800146c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013f4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80013f8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80013fa:	4b1d      	ldr	r3, [pc, #116]	@ (8001470 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	2232      	movs	r2, #50	@ 0x32
 8001400:	fb02 f303 	mul.w	r3, r2, r3
 8001404:	4a1b      	ldr	r2, [pc, #108]	@ (8001474 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001406:	fba2 2303 	umull	r2, r3, r2, r3
 800140a:	0c9b      	lsrs	r3, r3, #18
 800140c:	3301      	adds	r3, #1
 800140e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001410:	e002      	b.n	8001418 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	3b01      	subs	r3, #1
 8001416:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001418:	4b14      	ldr	r3, [pc, #80]	@ (800146c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800141a:	695b      	ldr	r3, [r3, #20]
 800141c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001420:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001424:	d102      	bne.n	800142c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d1f2      	bne.n	8001412 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800142c:	4b0f      	ldr	r3, [pc, #60]	@ (800146c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800142e:	695b      	ldr	r3, [r3, #20]
 8001430:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001434:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001438:	d110      	bne.n	800145c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800143a:	2303      	movs	r3, #3
 800143c:	e00f      	b.n	800145e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800143e:	4b0b      	ldr	r3, [pc, #44]	@ (800146c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001446:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800144a:	d007      	beq.n	800145c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800144c:	4b07      	ldr	r3, [pc, #28]	@ (800146c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001454:	4a05      	ldr	r2, [pc, #20]	@ (800146c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001456:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800145a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800145c:	2300      	movs	r3, #0
}
 800145e:	4618      	mov	r0, r3
 8001460:	3714      	adds	r7, #20
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr
 800146a:	bf00      	nop
 800146c:	40007000 	.word	0x40007000
 8001470:	20000008 	.word	0x20000008
 8001474:	431bde83 	.word	0x431bde83

08001478 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b088      	sub	sp, #32
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d101      	bne.n	800148a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001486:	2301      	movs	r3, #1
 8001488:	e3ca      	b.n	8001c20 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800148a:	4b97      	ldr	r3, [pc, #604]	@ (80016e8 <HAL_RCC_OscConfig+0x270>)
 800148c:	689b      	ldr	r3, [r3, #8]
 800148e:	f003 030c 	and.w	r3, r3, #12
 8001492:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001494:	4b94      	ldr	r3, [pc, #592]	@ (80016e8 <HAL_RCC_OscConfig+0x270>)
 8001496:	68db      	ldr	r3, [r3, #12]
 8001498:	f003 0303 	and.w	r3, r3, #3
 800149c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f003 0310 	and.w	r3, r3, #16
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	f000 80e4 	beq.w	8001674 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80014ac:	69bb      	ldr	r3, [r7, #24]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d007      	beq.n	80014c2 <HAL_RCC_OscConfig+0x4a>
 80014b2:	69bb      	ldr	r3, [r7, #24]
 80014b4:	2b0c      	cmp	r3, #12
 80014b6:	f040 808b 	bne.w	80015d0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80014ba:	697b      	ldr	r3, [r7, #20]
 80014bc:	2b01      	cmp	r3, #1
 80014be:	f040 8087 	bne.w	80015d0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80014c2:	4b89      	ldr	r3, [pc, #548]	@ (80016e8 <HAL_RCC_OscConfig+0x270>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f003 0302 	and.w	r3, r3, #2
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d005      	beq.n	80014da <HAL_RCC_OscConfig+0x62>
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	699b      	ldr	r3, [r3, #24]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d101      	bne.n	80014da <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80014d6:	2301      	movs	r3, #1
 80014d8:	e3a2      	b.n	8001c20 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6a1a      	ldr	r2, [r3, #32]
 80014de:	4b82      	ldr	r3, [pc, #520]	@ (80016e8 <HAL_RCC_OscConfig+0x270>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f003 0308 	and.w	r3, r3, #8
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d004      	beq.n	80014f4 <HAL_RCC_OscConfig+0x7c>
 80014ea:	4b7f      	ldr	r3, [pc, #508]	@ (80016e8 <HAL_RCC_OscConfig+0x270>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80014f2:	e005      	b.n	8001500 <HAL_RCC_OscConfig+0x88>
 80014f4:	4b7c      	ldr	r3, [pc, #496]	@ (80016e8 <HAL_RCC_OscConfig+0x270>)
 80014f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80014fa:	091b      	lsrs	r3, r3, #4
 80014fc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001500:	4293      	cmp	r3, r2
 8001502:	d223      	bcs.n	800154c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6a1b      	ldr	r3, [r3, #32]
 8001508:	4618      	mov	r0, r3
 800150a:	f000 fd87 	bl	800201c <RCC_SetFlashLatencyFromMSIRange>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d001      	beq.n	8001518 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001514:	2301      	movs	r3, #1
 8001516:	e383      	b.n	8001c20 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001518:	4b73      	ldr	r3, [pc, #460]	@ (80016e8 <HAL_RCC_OscConfig+0x270>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a72      	ldr	r2, [pc, #456]	@ (80016e8 <HAL_RCC_OscConfig+0x270>)
 800151e:	f043 0308 	orr.w	r3, r3, #8
 8001522:	6013      	str	r3, [r2, #0]
 8001524:	4b70      	ldr	r3, [pc, #448]	@ (80016e8 <HAL_RCC_OscConfig+0x270>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6a1b      	ldr	r3, [r3, #32]
 8001530:	496d      	ldr	r1, [pc, #436]	@ (80016e8 <HAL_RCC_OscConfig+0x270>)
 8001532:	4313      	orrs	r3, r2
 8001534:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001536:	4b6c      	ldr	r3, [pc, #432]	@ (80016e8 <HAL_RCC_OscConfig+0x270>)
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	69db      	ldr	r3, [r3, #28]
 8001542:	021b      	lsls	r3, r3, #8
 8001544:	4968      	ldr	r1, [pc, #416]	@ (80016e8 <HAL_RCC_OscConfig+0x270>)
 8001546:	4313      	orrs	r3, r2
 8001548:	604b      	str	r3, [r1, #4]
 800154a:	e025      	b.n	8001598 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800154c:	4b66      	ldr	r3, [pc, #408]	@ (80016e8 <HAL_RCC_OscConfig+0x270>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a65      	ldr	r2, [pc, #404]	@ (80016e8 <HAL_RCC_OscConfig+0x270>)
 8001552:	f043 0308 	orr.w	r3, r3, #8
 8001556:	6013      	str	r3, [r2, #0]
 8001558:	4b63      	ldr	r3, [pc, #396]	@ (80016e8 <HAL_RCC_OscConfig+0x270>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6a1b      	ldr	r3, [r3, #32]
 8001564:	4960      	ldr	r1, [pc, #384]	@ (80016e8 <HAL_RCC_OscConfig+0x270>)
 8001566:	4313      	orrs	r3, r2
 8001568:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800156a:	4b5f      	ldr	r3, [pc, #380]	@ (80016e8 <HAL_RCC_OscConfig+0x270>)
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	69db      	ldr	r3, [r3, #28]
 8001576:	021b      	lsls	r3, r3, #8
 8001578:	495b      	ldr	r1, [pc, #364]	@ (80016e8 <HAL_RCC_OscConfig+0x270>)
 800157a:	4313      	orrs	r3, r2
 800157c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800157e:	69bb      	ldr	r3, [r7, #24]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d109      	bne.n	8001598 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6a1b      	ldr	r3, [r3, #32]
 8001588:	4618      	mov	r0, r3
 800158a:	f000 fd47 	bl	800201c <RCC_SetFlashLatencyFromMSIRange>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d001      	beq.n	8001598 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001594:	2301      	movs	r3, #1
 8001596:	e343      	b.n	8001c20 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001598:	f000 fc4a 	bl	8001e30 <HAL_RCC_GetSysClockFreq>
 800159c:	4602      	mov	r2, r0
 800159e:	4b52      	ldr	r3, [pc, #328]	@ (80016e8 <HAL_RCC_OscConfig+0x270>)
 80015a0:	689b      	ldr	r3, [r3, #8]
 80015a2:	091b      	lsrs	r3, r3, #4
 80015a4:	f003 030f 	and.w	r3, r3, #15
 80015a8:	4950      	ldr	r1, [pc, #320]	@ (80016ec <HAL_RCC_OscConfig+0x274>)
 80015aa:	5ccb      	ldrb	r3, [r1, r3]
 80015ac:	f003 031f 	and.w	r3, r3, #31
 80015b0:	fa22 f303 	lsr.w	r3, r2, r3
 80015b4:	4a4e      	ldr	r2, [pc, #312]	@ (80016f0 <HAL_RCC_OscConfig+0x278>)
 80015b6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80015b8:	4b4e      	ldr	r3, [pc, #312]	@ (80016f4 <HAL_RCC_OscConfig+0x27c>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4618      	mov	r0, r3
 80015be:	f7ff faa5 	bl	8000b0c <HAL_InitTick>
 80015c2:	4603      	mov	r3, r0
 80015c4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80015c6:	7bfb      	ldrb	r3, [r7, #15]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d052      	beq.n	8001672 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80015cc:	7bfb      	ldrb	r3, [r7, #15]
 80015ce:	e327      	b.n	8001c20 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	699b      	ldr	r3, [r3, #24]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d032      	beq.n	800163e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80015d8:	4b43      	ldr	r3, [pc, #268]	@ (80016e8 <HAL_RCC_OscConfig+0x270>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a42      	ldr	r2, [pc, #264]	@ (80016e8 <HAL_RCC_OscConfig+0x270>)
 80015de:	f043 0301 	orr.w	r3, r3, #1
 80015e2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80015e4:	f7ff fbd2 	bl	8000d8c <HAL_GetTick>
 80015e8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80015ea:	e008      	b.n	80015fe <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80015ec:	f7ff fbce 	bl	8000d8c <HAL_GetTick>
 80015f0:	4602      	mov	r2, r0
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	1ad3      	subs	r3, r2, r3
 80015f6:	2b02      	cmp	r3, #2
 80015f8:	d901      	bls.n	80015fe <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80015fa:	2303      	movs	r3, #3
 80015fc:	e310      	b.n	8001c20 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80015fe:	4b3a      	ldr	r3, [pc, #232]	@ (80016e8 <HAL_RCC_OscConfig+0x270>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f003 0302 	and.w	r3, r3, #2
 8001606:	2b00      	cmp	r3, #0
 8001608:	d0f0      	beq.n	80015ec <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800160a:	4b37      	ldr	r3, [pc, #220]	@ (80016e8 <HAL_RCC_OscConfig+0x270>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4a36      	ldr	r2, [pc, #216]	@ (80016e8 <HAL_RCC_OscConfig+0x270>)
 8001610:	f043 0308 	orr.w	r3, r3, #8
 8001614:	6013      	str	r3, [r2, #0]
 8001616:	4b34      	ldr	r3, [pc, #208]	@ (80016e8 <HAL_RCC_OscConfig+0x270>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6a1b      	ldr	r3, [r3, #32]
 8001622:	4931      	ldr	r1, [pc, #196]	@ (80016e8 <HAL_RCC_OscConfig+0x270>)
 8001624:	4313      	orrs	r3, r2
 8001626:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001628:	4b2f      	ldr	r3, [pc, #188]	@ (80016e8 <HAL_RCC_OscConfig+0x270>)
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	69db      	ldr	r3, [r3, #28]
 8001634:	021b      	lsls	r3, r3, #8
 8001636:	492c      	ldr	r1, [pc, #176]	@ (80016e8 <HAL_RCC_OscConfig+0x270>)
 8001638:	4313      	orrs	r3, r2
 800163a:	604b      	str	r3, [r1, #4]
 800163c:	e01a      	b.n	8001674 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800163e:	4b2a      	ldr	r3, [pc, #168]	@ (80016e8 <HAL_RCC_OscConfig+0x270>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4a29      	ldr	r2, [pc, #164]	@ (80016e8 <HAL_RCC_OscConfig+0x270>)
 8001644:	f023 0301 	bic.w	r3, r3, #1
 8001648:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800164a:	f7ff fb9f 	bl	8000d8c <HAL_GetTick>
 800164e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001650:	e008      	b.n	8001664 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001652:	f7ff fb9b 	bl	8000d8c <HAL_GetTick>
 8001656:	4602      	mov	r2, r0
 8001658:	693b      	ldr	r3, [r7, #16]
 800165a:	1ad3      	subs	r3, r2, r3
 800165c:	2b02      	cmp	r3, #2
 800165e:	d901      	bls.n	8001664 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001660:	2303      	movs	r3, #3
 8001662:	e2dd      	b.n	8001c20 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001664:	4b20      	ldr	r3, [pc, #128]	@ (80016e8 <HAL_RCC_OscConfig+0x270>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f003 0302 	and.w	r3, r3, #2
 800166c:	2b00      	cmp	r3, #0
 800166e:	d1f0      	bne.n	8001652 <HAL_RCC_OscConfig+0x1da>
 8001670:	e000      	b.n	8001674 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001672:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f003 0301 	and.w	r3, r3, #1
 800167c:	2b00      	cmp	r3, #0
 800167e:	d074      	beq.n	800176a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001680:	69bb      	ldr	r3, [r7, #24]
 8001682:	2b08      	cmp	r3, #8
 8001684:	d005      	beq.n	8001692 <HAL_RCC_OscConfig+0x21a>
 8001686:	69bb      	ldr	r3, [r7, #24]
 8001688:	2b0c      	cmp	r3, #12
 800168a:	d10e      	bne.n	80016aa <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	2b03      	cmp	r3, #3
 8001690:	d10b      	bne.n	80016aa <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001692:	4b15      	ldr	r3, [pc, #84]	@ (80016e8 <HAL_RCC_OscConfig+0x270>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800169a:	2b00      	cmp	r3, #0
 800169c:	d064      	beq.n	8001768 <HAL_RCC_OscConfig+0x2f0>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d160      	bne.n	8001768 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80016a6:	2301      	movs	r3, #1
 80016a8:	e2ba      	b.n	8001c20 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80016b2:	d106      	bne.n	80016c2 <HAL_RCC_OscConfig+0x24a>
 80016b4:	4b0c      	ldr	r3, [pc, #48]	@ (80016e8 <HAL_RCC_OscConfig+0x270>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a0b      	ldr	r2, [pc, #44]	@ (80016e8 <HAL_RCC_OscConfig+0x270>)
 80016ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80016be:	6013      	str	r3, [r2, #0]
 80016c0:	e026      	b.n	8001710 <HAL_RCC_OscConfig+0x298>
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80016ca:	d115      	bne.n	80016f8 <HAL_RCC_OscConfig+0x280>
 80016cc:	4b06      	ldr	r3, [pc, #24]	@ (80016e8 <HAL_RCC_OscConfig+0x270>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a05      	ldr	r2, [pc, #20]	@ (80016e8 <HAL_RCC_OscConfig+0x270>)
 80016d2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80016d6:	6013      	str	r3, [r2, #0]
 80016d8:	4b03      	ldr	r3, [pc, #12]	@ (80016e8 <HAL_RCC_OscConfig+0x270>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a02      	ldr	r2, [pc, #8]	@ (80016e8 <HAL_RCC_OscConfig+0x270>)
 80016de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80016e2:	6013      	str	r3, [r2, #0]
 80016e4:	e014      	b.n	8001710 <HAL_RCC_OscConfig+0x298>
 80016e6:	bf00      	nop
 80016e8:	40021000 	.word	0x40021000
 80016ec:	08003adc 	.word	0x08003adc
 80016f0:	20000008 	.word	0x20000008
 80016f4:	2000000c 	.word	0x2000000c
 80016f8:	4ba0      	ldr	r3, [pc, #640]	@ (800197c <HAL_RCC_OscConfig+0x504>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a9f      	ldr	r2, [pc, #636]	@ (800197c <HAL_RCC_OscConfig+0x504>)
 80016fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001702:	6013      	str	r3, [r2, #0]
 8001704:	4b9d      	ldr	r3, [pc, #628]	@ (800197c <HAL_RCC_OscConfig+0x504>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4a9c      	ldr	r2, [pc, #624]	@ (800197c <HAL_RCC_OscConfig+0x504>)
 800170a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800170e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d013      	beq.n	8001740 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001718:	f7ff fb38 	bl	8000d8c <HAL_GetTick>
 800171c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800171e:	e008      	b.n	8001732 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001720:	f7ff fb34 	bl	8000d8c <HAL_GetTick>
 8001724:	4602      	mov	r2, r0
 8001726:	693b      	ldr	r3, [r7, #16]
 8001728:	1ad3      	subs	r3, r2, r3
 800172a:	2b64      	cmp	r3, #100	@ 0x64
 800172c:	d901      	bls.n	8001732 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800172e:	2303      	movs	r3, #3
 8001730:	e276      	b.n	8001c20 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001732:	4b92      	ldr	r3, [pc, #584]	@ (800197c <HAL_RCC_OscConfig+0x504>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800173a:	2b00      	cmp	r3, #0
 800173c:	d0f0      	beq.n	8001720 <HAL_RCC_OscConfig+0x2a8>
 800173e:	e014      	b.n	800176a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001740:	f7ff fb24 	bl	8000d8c <HAL_GetTick>
 8001744:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001746:	e008      	b.n	800175a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001748:	f7ff fb20 	bl	8000d8c <HAL_GetTick>
 800174c:	4602      	mov	r2, r0
 800174e:	693b      	ldr	r3, [r7, #16]
 8001750:	1ad3      	subs	r3, r2, r3
 8001752:	2b64      	cmp	r3, #100	@ 0x64
 8001754:	d901      	bls.n	800175a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001756:	2303      	movs	r3, #3
 8001758:	e262      	b.n	8001c20 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800175a:	4b88      	ldr	r3, [pc, #544]	@ (800197c <HAL_RCC_OscConfig+0x504>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001762:	2b00      	cmp	r3, #0
 8001764:	d1f0      	bne.n	8001748 <HAL_RCC_OscConfig+0x2d0>
 8001766:	e000      	b.n	800176a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001768:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f003 0302 	and.w	r3, r3, #2
 8001772:	2b00      	cmp	r3, #0
 8001774:	d060      	beq.n	8001838 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001776:	69bb      	ldr	r3, [r7, #24]
 8001778:	2b04      	cmp	r3, #4
 800177a:	d005      	beq.n	8001788 <HAL_RCC_OscConfig+0x310>
 800177c:	69bb      	ldr	r3, [r7, #24]
 800177e:	2b0c      	cmp	r3, #12
 8001780:	d119      	bne.n	80017b6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001782:	697b      	ldr	r3, [r7, #20]
 8001784:	2b02      	cmp	r3, #2
 8001786:	d116      	bne.n	80017b6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001788:	4b7c      	ldr	r3, [pc, #496]	@ (800197c <HAL_RCC_OscConfig+0x504>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001790:	2b00      	cmp	r3, #0
 8001792:	d005      	beq.n	80017a0 <HAL_RCC_OscConfig+0x328>
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	68db      	ldr	r3, [r3, #12]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d101      	bne.n	80017a0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800179c:	2301      	movs	r3, #1
 800179e:	e23f      	b.n	8001c20 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017a0:	4b76      	ldr	r3, [pc, #472]	@ (800197c <HAL_RCC_OscConfig+0x504>)
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	691b      	ldr	r3, [r3, #16]
 80017ac:	061b      	lsls	r3, r3, #24
 80017ae:	4973      	ldr	r1, [pc, #460]	@ (800197c <HAL_RCC_OscConfig+0x504>)
 80017b0:	4313      	orrs	r3, r2
 80017b2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017b4:	e040      	b.n	8001838 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	68db      	ldr	r3, [r3, #12]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d023      	beq.n	8001806 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017be:	4b6f      	ldr	r3, [pc, #444]	@ (800197c <HAL_RCC_OscConfig+0x504>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4a6e      	ldr	r2, [pc, #440]	@ (800197c <HAL_RCC_OscConfig+0x504>)
 80017c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017ca:	f7ff fadf 	bl	8000d8c <HAL_GetTick>
 80017ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017d0:	e008      	b.n	80017e4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017d2:	f7ff fadb 	bl	8000d8c <HAL_GetTick>
 80017d6:	4602      	mov	r2, r0
 80017d8:	693b      	ldr	r3, [r7, #16]
 80017da:	1ad3      	subs	r3, r2, r3
 80017dc:	2b02      	cmp	r3, #2
 80017de:	d901      	bls.n	80017e4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80017e0:	2303      	movs	r3, #3
 80017e2:	e21d      	b.n	8001c20 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017e4:	4b65      	ldr	r3, [pc, #404]	@ (800197c <HAL_RCC_OscConfig+0x504>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d0f0      	beq.n	80017d2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017f0:	4b62      	ldr	r3, [pc, #392]	@ (800197c <HAL_RCC_OscConfig+0x504>)
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	691b      	ldr	r3, [r3, #16]
 80017fc:	061b      	lsls	r3, r3, #24
 80017fe:	495f      	ldr	r1, [pc, #380]	@ (800197c <HAL_RCC_OscConfig+0x504>)
 8001800:	4313      	orrs	r3, r2
 8001802:	604b      	str	r3, [r1, #4]
 8001804:	e018      	b.n	8001838 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001806:	4b5d      	ldr	r3, [pc, #372]	@ (800197c <HAL_RCC_OscConfig+0x504>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4a5c      	ldr	r2, [pc, #368]	@ (800197c <HAL_RCC_OscConfig+0x504>)
 800180c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001810:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001812:	f7ff fabb 	bl	8000d8c <HAL_GetTick>
 8001816:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001818:	e008      	b.n	800182c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800181a:	f7ff fab7 	bl	8000d8c <HAL_GetTick>
 800181e:	4602      	mov	r2, r0
 8001820:	693b      	ldr	r3, [r7, #16]
 8001822:	1ad3      	subs	r3, r2, r3
 8001824:	2b02      	cmp	r3, #2
 8001826:	d901      	bls.n	800182c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001828:	2303      	movs	r3, #3
 800182a:	e1f9      	b.n	8001c20 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800182c:	4b53      	ldr	r3, [pc, #332]	@ (800197c <HAL_RCC_OscConfig+0x504>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001834:	2b00      	cmp	r3, #0
 8001836:	d1f0      	bne.n	800181a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f003 0308 	and.w	r3, r3, #8
 8001840:	2b00      	cmp	r3, #0
 8001842:	d03c      	beq.n	80018be <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	695b      	ldr	r3, [r3, #20]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d01c      	beq.n	8001886 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800184c:	4b4b      	ldr	r3, [pc, #300]	@ (800197c <HAL_RCC_OscConfig+0x504>)
 800184e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001852:	4a4a      	ldr	r2, [pc, #296]	@ (800197c <HAL_RCC_OscConfig+0x504>)
 8001854:	f043 0301 	orr.w	r3, r3, #1
 8001858:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800185c:	f7ff fa96 	bl	8000d8c <HAL_GetTick>
 8001860:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001862:	e008      	b.n	8001876 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001864:	f7ff fa92 	bl	8000d8c <HAL_GetTick>
 8001868:	4602      	mov	r2, r0
 800186a:	693b      	ldr	r3, [r7, #16]
 800186c:	1ad3      	subs	r3, r2, r3
 800186e:	2b02      	cmp	r3, #2
 8001870:	d901      	bls.n	8001876 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001872:	2303      	movs	r3, #3
 8001874:	e1d4      	b.n	8001c20 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001876:	4b41      	ldr	r3, [pc, #260]	@ (800197c <HAL_RCC_OscConfig+0x504>)
 8001878:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800187c:	f003 0302 	and.w	r3, r3, #2
 8001880:	2b00      	cmp	r3, #0
 8001882:	d0ef      	beq.n	8001864 <HAL_RCC_OscConfig+0x3ec>
 8001884:	e01b      	b.n	80018be <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001886:	4b3d      	ldr	r3, [pc, #244]	@ (800197c <HAL_RCC_OscConfig+0x504>)
 8001888:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800188c:	4a3b      	ldr	r2, [pc, #236]	@ (800197c <HAL_RCC_OscConfig+0x504>)
 800188e:	f023 0301 	bic.w	r3, r3, #1
 8001892:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001896:	f7ff fa79 	bl	8000d8c <HAL_GetTick>
 800189a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800189c:	e008      	b.n	80018b0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800189e:	f7ff fa75 	bl	8000d8c <HAL_GetTick>
 80018a2:	4602      	mov	r2, r0
 80018a4:	693b      	ldr	r3, [r7, #16]
 80018a6:	1ad3      	subs	r3, r2, r3
 80018a8:	2b02      	cmp	r3, #2
 80018aa:	d901      	bls.n	80018b0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80018ac:	2303      	movs	r3, #3
 80018ae:	e1b7      	b.n	8001c20 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80018b0:	4b32      	ldr	r3, [pc, #200]	@ (800197c <HAL_RCC_OscConfig+0x504>)
 80018b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80018b6:	f003 0302 	and.w	r3, r3, #2
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d1ef      	bne.n	800189e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f003 0304 	and.w	r3, r3, #4
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	f000 80a6 	beq.w	8001a18 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018cc:	2300      	movs	r3, #0
 80018ce:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80018d0:	4b2a      	ldr	r3, [pc, #168]	@ (800197c <HAL_RCC_OscConfig+0x504>)
 80018d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d10d      	bne.n	80018f8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018dc:	4b27      	ldr	r3, [pc, #156]	@ (800197c <HAL_RCC_OscConfig+0x504>)
 80018de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018e0:	4a26      	ldr	r2, [pc, #152]	@ (800197c <HAL_RCC_OscConfig+0x504>)
 80018e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018e6:	6593      	str	r3, [r2, #88]	@ 0x58
 80018e8:	4b24      	ldr	r3, [pc, #144]	@ (800197c <HAL_RCC_OscConfig+0x504>)
 80018ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018f0:	60bb      	str	r3, [r7, #8]
 80018f2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018f4:	2301      	movs	r3, #1
 80018f6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018f8:	4b21      	ldr	r3, [pc, #132]	@ (8001980 <HAL_RCC_OscConfig+0x508>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001900:	2b00      	cmp	r3, #0
 8001902:	d118      	bne.n	8001936 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001904:	4b1e      	ldr	r3, [pc, #120]	@ (8001980 <HAL_RCC_OscConfig+0x508>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a1d      	ldr	r2, [pc, #116]	@ (8001980 <HAL_RCC_OscConfig+0x508>)
 800190a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800190e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001910:	f7ff fa3c 	bl	8000d8c <HAL_GetTick>
 8001914:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001916:	e008      	b.n	800192a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001918:	f7ff fa38 	bl	8000d8c <HAL_GetTick>
 800191c:	4602      	mov	r2, r0
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	1ad3      	subs	r3, r2, r3
 8001922:	2b02      	cmp	r3, #2
 8001924:	d901      	bls.n	800192a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001926:	2303      	movs	r3, #3
 8001928:	e17a      	b.n	8001c20 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800192a:	4b15      	ldr	r3, [pc, #84]	@ (8001980 <HAL_RCC_OscConfig+0x508>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001932:	2b00      	cmp	r3, #0
 8001934:	d0f0      	beq.n	8001918 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	689b      	ldr	r3, [r3, #8]
 800193a:	2b01      	cmp	r3, #1
 800193c:	d108      	bne.n	8001950 <HAL_RCC_OscConfig+0x4d8>
 800193e:	4b0f      	ldr	r3, [pc, #60]	@ (800197c <HAL_RCC_OscConfig+0x504>)
 8001940:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001944:	4a0d      	ldr	r2, [pc, #52]	@ (800197c <HAL_RCC_OscConfig+0x504>)
 8001946:	f043 0301 	orr.w	r3, r3, #1
 800194a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800194e:	e029      	b.n	80019a4 <HAL_RCC_OscConfig+0x52c>
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	689b      	ldr	r3, [r3, #8]
 8001954:	2b05      	cmp	r3, #5
 8001956:	d115      	bne.n	8001984 <HAL_RCC_OscConfig+0x50c>
 8001958:	4b08      	ldr	r3, [pc, #32]	@ (800197c <HAL_RCC_OscConfig+0x504>)
 800195a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800195e:	4a07      	ldr	r2, [pc, #28]	@ (800197c <HAL_RCC_OscConfig+0x504>)
 8001960:	f043 0304 	orr.w	r3, r3, #4
 8001964:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001968:	4b04      	ldr	r3, [pc, #16]	@ (800197c <HAL_RCC_OscConfig+0x504>)
 800196a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800196e:	4a03      	ldr	r2, [pc, #12]	@ (800197c <HAL_RCC_OscConfig+0x504>)
 8001970:	f043 0301 	orr.w	r3, r3, #1
 8001974:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001978:	e014      	b.n	80019a4 <HAL_RCC_OscConfig+0x52c>
 800197a:	bf00      	nop
 800197c:	40021000 	.word	0x40021000
 8001980:	40007000 	.word	0x40007000
 8001984:	4b9c      	ldr	r3, [pc, #624]	@ (8001bf8 <HAL_RCC_OscConfig+0x780>)
 8001986:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800198a:	4a9b      	ldr	r2, [pc, #620]	@ (8001bf8 <HAL_RCC_OscConfig+0x780>)
 800198c:	f023 0301 	bic.w	r3, r3, #1
 8001990:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001994:	4b98      	ldr	r3, [pc, #608]	@ (8001bf8 <HAL_RCC_OscConfig+0x780>)
 8001996:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800199a:	4a97      	ldr	r2, [pc, #604]	@ (8001bf8 <HAL_RCC_OscConfig+0x780>)
 800199c:	f023 0304 	bic.w	r3, r3, #4
 80019a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d016      	beq.n	80019da <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019ac:	f7ff f9ee 	bl	8000d8c <HAL_GetTick>
 80019b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80019b2:	e00a      	b.n	80019ca <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019b4:	f7ff f9ea 	bl	8000d8c <HAL_GetTick>
 80019b8:	4602      	mov	r2, r0
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	1ad3      	subs	r3, r2, r3
 80019be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d901      	bls.n	80019ca <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80019c6:	2303      	movs	r3, #3
 80019c8:	e12a      	b.n	8001c20 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80019ca:	4b8b      	ldr	r3, [pc, #556]	@ (8001bf8 <HAL_RCC_OscConfig+0x780>)
 80019cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019d0:	f003 0302 	and.w	r3, r3, #2
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d0ed      	beq.n	80019b4 <HAL_RCC_OscConfig+0x53c>
 80019d8:	e015      	b.n	8001a06 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019da:	f7ff f9d7 	bl	8000d8c <HAL_GetTick>
 80019de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80019e0:	e00a      	b.n	80019f8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019e2:	f7ff f9d3 	bl	8000d8c <HAL_GetTick>
 80019e6:	4602      	mov	r2, r0
 80019e8:	693b      	ldr	r3, [r7, #16]
 80019ea:	1ad3      	subs	r3, r2, r3
 80019ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d901      	bls.n	80019f8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80019f4:	2303      	movs	r3, #3
 80019f6:	e113      	b.n	8001c20 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80019f8:	4b7f      	ldr	r3, [pc, #508]	@ (8001bf8 <HAL_RCC_OscConfig+0x780>)
 80019fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019fe:	f003 0302 	and.w	r3, r3, #2
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d1ed      	bne.n	80019e2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a06:	7ffb      	ldrb	r3, [r7, #31]
 8001a08:	2b01      	cmp	r3, #1
 8001a0a:	d105      	bne.n	8001a18 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a0c:	4b7a      	ldr	r3, [pc, #488]	@ (8001bf8 <HAL_RCC_OscConfig+0x780>)
 8001a0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a10:	4a79      	ldr	r2, [pc, #484]	@ (8001bf8 <HAL_RCC_OscConfig+0x780>)
 8001a12:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001a16:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	f000 80fe 	beq.w	8001c1e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a26:	2b02      	cmp	r3, #2
 8001a28:	f040 80d0 	bne.w	8001bcc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001a2c:	4b72      	ldr	r3, [pc, #456]	@ (8001bf8 <HAL_RCC_OscConfig+0x780>)
 8001a2e:	68db      	ldr	r3, [r3, #12]
 8001a30:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	f003 0203 	and.w	r2, r3, #3
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	d130      	bne.n	8001aa2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a4a:	3b01      	subs	r3, #1
 8001a4c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a4e:	429a      	cmp	r2, r3
 8001a50:	d127      	bne.n	8001aa2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a5c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001a5e:	429a      	cmp	r2, r3
 8001a60:	d11f      	bne.n	8001aa2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001a62:	697b      	ldr	r3, [r7, #20]
 8001a64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a68:	687a      	ldr	r2, [r7, #4]
 8001a6a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001a6c:	2a07      	cmp	r2, #7
 8001a6e:	bf14      	ite	ne
 8001a70:	2201      	movne	r2, #1
 8001a72:	2200      	moveq	r2, #0
 8001a74:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d113      	bne.n	8001aa2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a84:	085b      	lsrs	r3, r3, #1
 8001a86:	3b01      	subs	r3, #1
 8001a88:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001a8a:	429a      	cmp	r2, r3
 8001a8c:	d109      	bne.n	8001aa2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001a8e:	697b      	ldr	r3, [r7, #20]
 8001a90:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a98:	085b      	lsrs	r3, r3, #1
 8001a9a:	3b01      	subs	r3, #1
 8001a9c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a9e:	429a      	cmp	r2, r3
 8001aa0:	d06e      	beq.n	8001b80 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001aa2:	69bb      	ldr	r3, [r7, #24]
 8001aa4:	2b0c      	cmp	r3, #12
 8001aa6:	d069      	beq.n	8001b7c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001aa8:	4b53      	ldr	r3, [pc, #332]	@ (8001bf8 <HAL_RCC_OscConfig+0x780>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d105      	bne.n	8001ac0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001ab4:	4b50      	ldr	r3, [pc, #320]	@ (8001bf8 <HAL_RCC_OscConfig+0x780>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d001      	beq.n	8001ac4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	e0ad      	b.n	8001c20 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001ac4:	4b4c      	ldr	r3, [pc, #304]	@ (8001bf8 <HAL_RCC_OscConfig+0x780>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a4b      	ldr	r2, [pc, #300]	@ (8001bf8 <HAL_RCC_OscConfig+0x780>)
 8001aca:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001ace:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001ad0:	f7ff f95c 	bl	8000d8c <HAL_GetTick>
 8001ad4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ad6:	e008      	b.n	8001aea <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ad8:	f7ff f958 	bl	8000d8c <HAL_GetTick>
 8001adc:	4602      	mov	r2, r0
 8001ade:	693b      	ldr	r3, [r7, #16]
 8001ae0:	1ad3      	subs	r3, r2, r3
 8001ae2:	2b02      	cmp	r3, #2
 8001ae4:	d901      	bls.n	8001aea <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001ae6:	2303      	movs	r3, #3
 8001ae8:	e09a      	b.n	8001c20 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001aea:	4b43      	ldr	r3, [pc, #268]	@ (8001bf8 <HAL_RCC_OscConfig+0x780>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d1f0      	bne.n	8001ad8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001af6:	4b40      	ldr	r3, [pc, #256]	@ (8001bf8 <HAL_RCC_OscConfig+0x780>)
 8001af8:	68da      	ldr	r2, [r3, #12]
 8001afa:	4b40      	ldr	r3, [pc, #256]	@ (8001bfc <HAL_RCC_OscConfig+0x784>)
 8001afc:	4013      	ands	r3, r2
 8001afe:	687a      	ldr	r2, [r7, #4]
 8001b00:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001b02:	687a      	ldr	r2, [r7, #4]
 8001b04:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001b06:	3a01      	subs	r2, #1
 8001b08:	0112      	lsls	r2, r2, #4
 8001b0a:	4311      	orrs	r1, r2
 8001b0c:	687a      	ldr	r2, [r7, #4]
 8001b0e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001b10:	0212      	lsls	r2, r2, #8
 8001b12:	4311      	orrs	r1, r2
 8001b14:	687a      	ldr	r2, [r7, #4]
 8001b16:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001b18:	0852      	lsrs	r2, r2, #1
 8001b1a:	3a01      	subs	r2, #1
 8001b1c:	0552      	lsls	r2, r2, #21
 8001b1e:	4311      	orrs	r1, r2
 8001b20:	687a      	ldr	r2, [r7, #4]
 8001b22:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001b24:	0852      	lsrs	r2, r2, #1
 8001b26:	3a01      	subs	r2, #1
 8001b28:	0652      	lsls	r2, r2, #25
 8001b2a:	4311      	orrs	r1, r2
 8001b2c:	687a      	ldr	r2, [r7, #4]
 8001b2e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001b30:	0912      	lsrs	r2, r2, #4
 8001b32:	0452      	lsls	r2, r2, #17
 8001b34:	430a      	orrs	r2, r1
 8001b36:	4930      	ldr	r1, [pc, #192]	@ (8001bf8 <HAL_RCC_OscConfig+0x780>)
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001b3c:	4b2e      	ldr	r3, [pc, #184]	@ (8001bf8 <HAL_RCC_OscConfig+0x780>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a2d      	ldr	r2, [pc, #180]	@ (8001bf8 <HAL_RCC_OscConfig+0x780>)
 8001b42:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001b46:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001b48:	4b2b      	ldr	r3, [pc, #172]	@ (8001bf8 <HAL_RCC_OscConfig+0x780>)
 8001b4a:	68db      	ldr	r3, [r3, #12]
 8001b4c:	4a2a      	ldr	r2, [pc, #168]	@ (8001bf8 <HAL_RCC_OscConfig+0x780>)
 8001b4e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001b52:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001b54:	f7ff f91a 	bl	8000d8c <HAL_GetTick>
 8001b58:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b5a:	e008      	b.n	8001b6e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b5c:	f7ff f916 	bl	8000d8c <HAL_GetTick>
 8001b60:	4602      	mov	r2, r0
 8001b62:	693b      	ldr	r3, [r7, #16]
 8001b64:	1ad3      	subs	r3, r2, r3
 8001b66:	2b02      	cmp	r3, #2
 8001b68:	d901      	bls.n	8001b6e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001b6a:	2303      	movs	r3, #3
 8001b6c:	e058      	b.n	8001c20 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b6e:	4b22      	ldr	r3, [pc, #136]	@ (8001bf8 <HAL_RCC_OscConfig+0x780>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d0f0      	beq.n	8001b5c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b7a:	e050      	b.n	8001c1e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	e04f      	b.n	8001c20 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b80:	4b1d      	ldr	r3, [pc, #116]	@ (8001bf8 <HAL_RCC_OscConfig+0x780>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d148      	bne.n	8001c1e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001b8c:	4b1a      	ldr	r3, [pc, #104]	@ (8001bf8 <HAL_RCC_OscConfig+0x780>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a19      	ldr	r2, [pc, #100]	@ (8001bf8 <HAL_RCC_OscConfig+0x780>)
 8001b92:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001b96:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001b98:	4b17      	ldr	r3, [pc, #92]	@ (8001bf8 <HAL_RCC_OscConfig+0x780>)
 8001b9a:	68db      	ldr	r3, [r3, #12]
 8001b9c:	4a16      	ldr	r2, [pc, #88]	@ (8001bf8 <HAL_RCC_OscConfig+0x780>)
 8001b9e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001ba2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001ba4:	f7ff f8f2 	bl	8000d8c <HAL_GetTick>
 8001ba8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001baa:	e008      	b.n	8001bbe <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bac:	f7ff f8ee 	bl	8000d8c <HAL_GetTick>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	1ad3      	subs	r3, r2, r3
 8001bb6:	2b02      	cmp	r3, #2
 8001bb8:	d901      	bls.n	8001bbe <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001bba:	2303      	movs	r3, #3
 8001bbc:	e030      	b.n	8001c20 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bbe:	4b0e      	ldr	r3, [pc, #56]	@ (8001bf8 <HAL_RCC_OscConfig+0x780>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d0f0      	beq.n	8001bac <HAL_RCC_OscConfig+0x734>
 8001bca:	e028      	b.n	8001c1e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001bcc:	69bb      	ldr	r3, [r7, #24]
 8001bce:	2b0c      	cmp	r3, #12
 8001bd0:	d023      	beq.n	8001c1a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bd2:	4b09      	ldr	r3, [pc, #36]	@ (8001bf8 <HAL_RCC_OscConfig+0x780>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a08      	ldr	r2, [pc, #32]	@ (8001bf8 <HAL_RCC_OscConfig+0x780>)
 8001bd8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001bdc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bde:	f7ff f8d5 	bl	8000d8c <HAL_GetTick>
 8001be2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001be4:	e00c      	b.n	8001c00 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001be6:	f7ff f8d1 	bl	8000d8c <HAL_GetTick>
 8001bea:	4602      	mov	r2, r0
 8001bec:	693b      	ldr	r3, [r7, #16]
 8001bee:	1ad3      	subs	r3, r2, r3
 8001bf0:	2b02      	cmp	r3, #2
 8001bf2:	d905      	bls.n	8001c00 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001bf4:	2303      	movs	r3, #3
 8001bf6:	e013      	b.n	8001c20 <HAL_RCC_OscConfig+0x7a8>
 8001bf8:	40021000 	.word	0x40021000
 8001bfc:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c00:	4b09      	ldr	r3, [pc, #36]	@ (8001c28 <HAL_RCC_OscConfig+0x7b0>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d1ec      	bne.n	8001be6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001c0c:	4b06      	ldr	r3, [pc, #24]	@ (8001c28 <HAL_RCC_OscConfig+0x7b0>)
 8001c0e:	68da      	ldr	r2, [r3, #12]
 8001c10:	4905      	ldr	r1, [pc, #20]	@ (8001c28 <HAL_RCC_OscConfig+0x7b0>)
 8001c12:	4b06      	ldr	r3, [pc, #24]	@ (8001c2c <HAL_RCC_OscConfig+0x7b4>)
 8001c14:	4013      	ands	r3, r2
 8001c16:	60cb      	str	r3, [r1, #12]
 8001c18:	e001      	b.n	8001c1e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e000      	b.n	8001c20 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001c1e:	2300      	movs	r3, #0
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	3720      	adds	r7, #32
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	40021000 	.word	0x40021000
 8001c2c:	feeefffc 	.word	0xfeeefffc

08001c30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b084      	sub	sp, #16
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
 8001c38:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d101      	bne.n	8001c44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c40:	2301      	movs	r3, #1
 8001c42:	e0e7      	b.n	8001e14 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c44:	4b75      	ldr	r3, [pc, #468]	@ (8001e1c <HAL_RCC_ClockConfig+0x1ec>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f003 0307 	and.w	r3, r3, #7
 8001c4c:	683a      	ldr	r2, [r7, #0]
 8001c4e:	429a      	cmp	r2, r3
 8001c50:	d910      	bls.n	8001c74 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c52:	4b72      	ldr	r3, [pc, #456]	@ (8001e1c <HAL_RCC_ClockConfig+0x1ec>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f023 0207 	bic.w	r2, r3, #7
 8001c5a:	4970      	ldr	r1, [pc, #448]	@ (8001e1c <HAL_RCC_ClockConfig+0x1ec>)
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c62:	4b6e      	ldr	r3, [pc, #440]	@ (8001e1c <HAL_RCC_ClockConfig+0x1ec>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f003 0307 	and.w	r3, r3, #7
 8001c6a:	683a      	ldr	r2, [r7, #0]
 8001c6c:	429a      	cmp	r2, r3
 8001c6e:	d001      	beq.n	8001c74 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001c70:	2301      	movs	r3, #1
 8001c72:	e0cf      	b.n	8001e14 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f003 0302 	and.w	r3, r3, #2
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d010      	beq.n	8001ca2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	689a      	ldr	r2, [r3, #8]
 8001c84:	4b66      	ldr	r3, [pc, #408]	@ (8001e20 <HAL_RCC_ClockConfig+0x1f0>)
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001c8c:	429a      	cmp	r2, r3
 8001c8e:	d908      	bls.n	8001ca2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c90:	4b63      	ldr	r3, [pc, #396]	@ (8001e20 <HAL_RCC_ClockConfig+0x1f0>)
 8001c92:	689b      	ldr	r3, [r3, #8]
 8001c94:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	4960      	ldr	r1, [pc, #384]	@ (8001e20 <HAL_RCC_ClockConfig+0x1f0>)
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f003 0301 	and.w	r3, r3, #1
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d04c      	beq.n	8001d48 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	2b03      	cmp	r3, #3
 8001cb4:	d107      	bne.n	8001cc6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cb6:	4b5a      	ldr	r3, [pc, #360]	@ (8001e20 <HAL_RCC_ClockConfig+0x1f0>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d121      	bne.n	8001d06 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e0a6      	b.n	8001e14 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	2b02      	cmp	r3, #2
 8001ccc:	d107      	bne.n	8001cde <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001cce:	4b54      	ldr	r3, [pc, #336]	@ (8001e20 <HAL_RCC_ClockConfig+0x1f0>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d115      	bne.n	8001d06 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e09a      	b.n	8001e14 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d107      	bne.n	8001cf6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ce6:	4b4e      	ldr	r3, [pc, #312]	@ (8001e20 <HAL_RCC_ClockConfig+0x1f0>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f003 0302 	and.w	r3, r3, #2
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d109      	bne.n	8001d06 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e08e      	b.n	8001e14 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001cf6:	4b4a      	ldr	r3, [pc, #296]	@ (8001e20 <HAL_RCC_ClockConfig+0x1f0>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d101      	bne.n	8001d06 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
 8001d04:	e086      	b.n	8001e14 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001d06:	4b46      	ldr	r3, [pc, #280]	@ (8001e20 <HAL_RCC_ClockConfig+0x1f0>)
 8001d08:	689b      	ldr	r3, [r3, #8]
 8001d0a:	f023 0203 	bic.w	r2, r3, #3
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	4943      	ldr	r1, [pc, #268]	@ (8001e20 <HAL_RCC_ClockConfig+0x1f0>)
 8001d14:	4313      	orrs	r3, r2
 8001d16:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d18:	f7ff f838 	bl	8000d8c <HAL_GetTick>
 8001d1c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d1e:	e00a      	b.n	8001d36 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d20:	f7ff f834 	bl	8000d8c <HAL_GetTick>
 8001d24:	4602      	mov	r2, r0
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	1ad3      	subs	r3, r2, r3
 8001d2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d901      	bls.n	8001d36 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001d32:	2303      	movs	r3, #3
 8001d34:	e06e      	b.n	8001e14 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d36:	4b3a      	ldr	r3, [pc, #232]	@ (8001e20 <HAL_RCC_ClockConfig+0x1f0>)
 8001d38:	689b      	ldr	r3, [r3, #8]
 8001d3a:	f003 020c 	and.w	r2, r3, #12
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	009b      	lsls	r3, r3, #2
 8001d44:	429a      	cmp	r2, r3
 8001d46:	d1eb      	bne.n	8001d20 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f003 0302 	and.w	r3, r3, #2
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d010      	beq.n	8001d76 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	689a      	ldr	r2, [r3, #8]
 8001d58:	4b31      	ldr	r3, [pc, #196]	@ (8001e20 <HAL_RCC_ClockConfig+0x1f0>)
 8001d5a:	689b      	ldr	r3, [r3, #8]
 8001d5c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001d60:	429a      	cmp	r2, r3
 8001d62:	d208      	bcs.n	8001d76 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d64:	4b2e      	ldr	r3, [pc, #184]	@ (8001e20 <HAL_RCC_ClockConfig+0x1f0>)
 8001d66:	689b      	ldr	r3, [r3, #8]
 8001d68:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	689b      	ldr	r3, [r3, #8]
 8001d70:	492b      	ldr	r1, [pc, #172]	@ (8001e20 <HAL_RCC_ClockConfig+0x1f0>)
 8001d72:	4313      	orrs	r3, r2
 8001d74:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d76:	4b29      	ldr	r3, [pc, #164]	@ (8001e1c <HAL_RCC_ClockConfig+0x1ec>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f003 0307 	and.w	r3, r3, #7
 8001d7e:	683a      	ldr	r2, [r7, #0]
 8001d80:	429a      	cmp	r2, r3
 8001d82:	d210      	bcs.n	8001da6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d84:	4b25      	ldr	r3, [pc, #148]	@ (8001e1c <HAL_RCC_ClockConfig+0x1ec>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f023 0207 	bic.w	r2, r3, #7
 8001d8c:	4923      	ldr	r1, [pc, #140]	@ (8001e1c <HAL_RCC_ClockConfig+0x1ec>)
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	4313      	orrs	r3, r2
 8001d92:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d94:	4b21      	ldr	r3, [pc, #132]	@ (8001e1c <HAL_RCC_ClockConfig+0x1ec>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f003 0307 	and.w	r3, r3, #7
 8001d9c:	683a      	ldr	r2, [r7, #0]
 8001d9e:	429a      	cmp	r2, r3
 8001da0:	d001      	beq.n	8001da6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
 8001da4:	e036      	b.n	8001e14 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f003 0304 	and.w	r3, r3, #4
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d008      	beq.n	8001dc4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001db2:	4b1b      	ldr	r3, [pc, #108]	@ (8001e20 <HAL_RCC_ClockConfig+0x1f0>)
 8001db4:	689b      	ldr	r3, [r3, #8]
 8001db6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	68db      	ldr	r3, [r3, #12]
 8001dbe:	4918      	ldr	r1, [pc, #96]	@ (8001e20 <HAL_RCC_ClockConfig+0x1f0>)
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f003 0308 	and.w	r3, r3, #8
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d009      	beq.n	8001de4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001dd0:	4b13      	ldr	r3, [pc, #76]	@ (8001e20 <HAL_RCC_ClockConfig+0x1f0>)
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	691b      	ldr	r3, [r3, #16]
 8001ddc:	00db      	lsls	r3, r3, #3
 8001dde:	4910      	ldr	r1, [pc, #64]	@ (8001e20 <HAL_RCC_ClockConfig+0x1f0>)
 8001de0:	4313      	orrs	r3, r2
 8001de2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001de4:	f000 f824 	bl	8001e30 <HAL_RCC_GetSysClockFreq>
 8001de8:	4602      	mov	r2, r0
 8001dea:	4b0d      	ldr	r3, [pc, #52]	@ (8001e20 <HAL_RCC_ClockConfig+0x1f0>)
 8001dec:	689b      	ldr	r3, [r3, #8]
 8001dee:	091b      	lsrs	r3, r3, #4
 8001df0:	f003 030f 	and.w	r3, r3, #15
 8001df4:	490b      	ldr	r1, [pc, #44]	@ (8001e24 <HAL_RCC_ClockConfig+0x1f4>)
 8001df6:	5ccb      	ldrb	r3, [r1, r3]
 8001df8:	f003 031f 	and.w	r3, r3, #31
 8001dfc:	fa22 f303 	lsr.w	r3, r2, r3
 8001e00:	4a09      	ldr	r2, [pc, #36]	@ (8001e28 <HAL_RCC_ClockConfig+0x1f8>)
 8001e02:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001e04:	4b09      	ldr	r3, [pc, #36]	@ (8001e2c <HAL_RCC_ClockConfig+0x1fc>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f7fe fe7f 	bl	8000b0c <HAL_InitTick>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	72fb      	strb	r3, [r7, #11]

  return status;
 8001e12:	7afb      	ldrb	r3, [r7, #11]
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	3710      	adds	r7, #16
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}
 8001e1c:	40022000 	.word	0x40022000
 8001e20:	40021000 	.word	0x40021000
 8001e24:	08003adc 	.word	0x08003adc
 8001e28:	20000008 	.word	0x20000008
 8001e2c:	2000000c 	.word	0x2000000c

08001e30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b089      	sub	sp, #36	@ 0x24
 8001e34:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001e36:	2300      	movs	r3, #0
 8001e38:	61fb      	str	r3, [r7, #28]
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e3e:	4b3e      	ldr	r3, [pc, #248]	@ (8001f38 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e40:	689b      	ldr	r3, [r3, #8]
 8001e42:	f003 030c 	and.w	r3, r3, #12
 8001e46:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e48:	4b3b      	ldr	r3, [pc, #236]	@ (8001f38 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e4a:	68db      	ldr	r3, [r3, #12]
 8001e4c:	f003 0303 	and.w	r3, r3, #3
 8001e50:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d005      	beq.n	8001e64 <HAL_RCC_GetSysClockFreq+0x34>
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	2b0c      	cmp	r3, #12
 8001e5c:	d121      	bne.n	8001ea2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	2b01      	cmp	r3, #1
 8001e62:	d11e      	bne.n	8001ea2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001e64:	4b34      	ldr	r3, [pc, #208]	@ (8001f38 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f003 0308 	and.w	r3, r3, #8
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d107      	bne.n	8001e80 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001e70:	4b31      	ldr	r3, [pc, #196]	@ (8001f38 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e72:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e76:	0a1b      	lsrs	r3, r3, #8
 8001e78:	f003 030f 	and.w	r3, r3, #15
 8001e7c:	61fb      	str	r3, [r7, #28]
 8001e7e:	e005      	b.n	8001e8c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001e80:	4b2d      	ldr	r3, [pc, #180]	@ (8001f38 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	091b      	lsrs	r3, r3, #4
 8001e86:	f003 030f 	and.w	r3, r3, #15
 8001e8a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001e8c:	4a2b      	ldr	r2, [pc, #172]	@ (8001f3c <HAL_RCC_GetSysClockFreq+0x10c>)
 8001e8e:	69fb      	ldr	r3, [r7, #28]
 8001e90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e94:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d10d      	bne.n	8001eb8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001e9c:	69fb      	ldr	r3, [r7, #28]
 8001e9e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ea0:	e00a      	b.n	8001eb8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	2b04      	cmp	r3, #4
 8001ea6:	d102      	bne.n	8001eae <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001ea8:	4b25      	ldr	r3, [pc, #148]	@ (8001f40 <HAL_RCC_GetSysClockFreq+0x110>)
 8001eaa:	61bb      	str	r3, [r7, #24]
 8001eac:	e004      	b.n	8001eb8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	2b08      	cmp	r3, #8
 8001eb2:	d101      	bne.n	8001eb8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001eb4:	4b23      	ldr	r3, [pc, #140]	@ (8001f44 <HAL_RCC_GetSysClockFreq+0x114>)
 8001eb6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	2b0c      	cmp	r3, #12
 8001ebc:	d134      	bne.n	8001f28 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001ebe:	4b1e      	ldr	r3, [pc, #120]	@ (8001f38 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ec0:	68db      	ldr	r3, [r3, #12]
 8001ec2:	f003 0303 	and.w	r3, r3, #3
 8001ec6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	2b02      	cmp	r3, #2
 8001ecc:	d003      	beq.n	8001ed6 <HAL_RCC_GetSysClockFreq+0xa6>
 8001ece:	68bb      	ldr	r3, [r7, #8]
 8001ed0:	2b03      	cmp	r3, #3
 8001ed2:	d003      	beq.n	8001edc <HAL_RCC_GetSysClockFreq+0xac>
 8001ed4:	e005      	b.n	8001ee2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001ed6:	4b1a      	ldr	r3, [pc, #104]	@ (8001f40 <HAL_RCC_GetSysClockFreq+0x110>)
 8001ed8:	617b      	str	r3, [r7, #20]
      break;
 8001eda:	e005      	b.n	8001ee8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001edc:	4b19      	ldr	r3, [pc, #100]	@ (8001f44 <HAL_RCC_GetSysClockFreq+0x114>)
 8001ede:	617b      	str	r3, [r7, #20]
      break;
 8001ee0:	e002      	b.n	8001ee8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001ee2:	69fb      	ldr	r3, [r7, #28]
 8001ee4:	617b      	str	r3, [r7, #20]
      break;
 8001ee6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001ee8:	4b13      	ldr	r3, [pc, #76]	@ (8001f38 <HAL_RCC_GetSysClockFreq+0x108>)
 8001eea:	68db      	ldr	r3, [r3, #12]
 8001eec:	091b      	lsrs	r3, r3, #4
 8001eee:	f003 0307 	and.w	r3, r3, #7
 8001ef2:	3301      	adds	r3, #1
 8001ef4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001ef6:	4b10      	ldr	r3, [pc, #64]	@ (8001f38 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ef8:	68db      	ldr	r3, [r3, #12]
 8001efa:	0a1b      	lsrs	r3, r3, #8
 8001efc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001f00:	697a      	ldr	r2, [r7, #20]
 8001f02:	fb03 f202 	mul.w	r2, r3, r2
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f0c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001f0e:	4b0a      	ldr	r3, [pc, #40]	@ (8001f38 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f10:	68db      	ldr	r3, [r3, #12]
 8001f12:	0e5b      	lsrs	r3, r3, #25
 8001f14:	f003 0303 	and.w	r3, r3, #3
 8001f18:	3301      	adds	r3, #1
 8001f1a:	005b      	lsls	r3, r3, #1
 8001f1c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001f1e:	697a      	ldr	r2, [r7, #20]
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f26:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001f28:	69bb      	ldr	r3, [r7, #24]
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	3724      	adds	r7, #36	@ 0x24
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr
 8001f36:	bf00      	nop
 8001f38:	40021000 	.word	0x40021000
 8001f3c:	08003af4 	.word	0x08003af4
 8001f40:	00f42400 	.word	0x00f42400
 8001f44:	007a1200 	.word	0x007a1200

08001f48 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f4c:	4b03      	ldr	r3, [pc, #12]	@ (8001f5c <HAL_RCC_GetHCLKFreq+0x14>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr
 8001f5a:	bf00      	nop
 8001f5c:	20000008 	.word	0x20000008

08001f60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001f64:	f7ff fff0 	bl	8001f48 <HAL_RCC_GetHCLKFreq>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	4b06      	ldr	r3, [pc, #24]	@ (8001f84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f6c:	689b      	ldr	r3, [r3, #8]
 8001f6e:	0a1b      	lsrs	r3, r3, #8
 8001f70:	f003 0307 	and.w	r3, r3, #7
 8001f74:	4904      	ldr	r1, [pc, #16]	@ (8001f88 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001f76:	5ccb      	ldrb	r3, [r1, r3]
 8001f78:	f003 031f 	and.w	r3, r3, #31
 8001f7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	bd80      	pop	{r7, pc}
 8001f84:	40021000 	.word	0x40021000
 8001f88:	08003aec 	.word	0x08003aec

08001f8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001f90:	f7ff ffda 	bl	8001f48 <HAL_RCC_GetHCLKFreq>
 8001f94:	4602      	mov	r2, r0
 8001f96:	4b06      	ldr	r3, [pc, #24]	@ (8001fb0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	0adb      	lsrs	r3, r3, #11
 8001f9c:	f003 0307 	and.w	r3, r3, #7
 8001fa0:	4904      	ldr	r1, [pc, #16]	@ (8001fb4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001fa2:	5ccb      	ldrb	r3, [r1, r3]
 8001fa4:	f003 031f 	and.w	r3, r3, #31
 8001fa8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	40021000 	.word	0x40021000
 8001fb4:	08003aec 	.word	0x08003aec

08001fb8 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b083      	sub	sp, #12
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
 8001fc0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	220f      	movs	r2, #15
 8001fc6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8001fc8:	4b12      	ldr	r3, [pc, #72]	@ (8002014 <HAL_RCC_GetClockConfig+0x5c>)
 8001fca:	689b      	ldr	r3, [r3, #8]
 8001fcc:	f003 0203 	and.w	r2, r3, #3
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8001fd4:	4b0f      	ldr	r3, [pc, #60]	@ (8002014 <HAL_RCC_GetClockConfig+0x5c>)
 8001fd6:	689b      	ldr	r3, [r3, #8]
 8001fd8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8001fe0:	4b0c      	ldr	r3, [pc, #48]	@ (8002014 <HAL_RCC_GetClockConfig+0x5c>)
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8001fec:	4b09      	ldr	r3, [pc, #36]	@ (8002014 <HAL_RCC_GetClockConfig+0x5c>)
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	08db      	lsrs	r3, r3, #3
 8001ff2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001ffa:	4b07      	ldr	r3, [pc, #28]	@ (8002018 <HAL_RCC_GetClockConfig+0x60>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 0207 	and.w	r2, r3, #7
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	601a      	str	r2, [r3, #0]
}
 8002006:	bf00      	nop
 8002008:	370c      	adds	r7, #12
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr
 8002012:	bf00      	nop
 8002014:	40021000 	.word	0x40021000
 8002018:	40022000 	.word	0x40022000

0800201c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b086      	sub	sp, #24
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002024:	2300      	movs	r3, #0
 8002026:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002028:	4b2a      	ldr	r3, [pc, #168]	@ (80020d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800202a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800202c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002030:	2b00      	cmp	r3, #0
 8002032:	d003      	beq.n	800203c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002034:	f7ff f9bc 	bl	80013b0 <HAL_PWREx_GetVoltageRange>
 8002038:	6178      	str	r0, [r7, #20]
 800203a:	e014      	b.n	8002066 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800203c:	4b25      	ldr	r3, [pc, #148]	@ (80020d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800203e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002040:	4a24      	ldr	r2, [pc, #144]	@ (80020d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002042:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002046:	6593      	str	r3, [r2, #88]	@ 0x58
 8002048:	4b22      	ldr	r3, [pc, #136]	@ (80020d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800204a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800204c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002050:	60fb      	str	r3, [r7, #12]
 8002052:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002054:	f7ff f9ac 	bl	80013b0 <HAL_PWREx_GetVoltageRange>
 8002058:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800205a:	4b1e      	ldr	r3, [pc, #120]	@ (80020d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800205c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800205e:	4a1d      	ldr	r2, [pc, #116]	@ (80020d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002060:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002064:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800206c:	d10b      	bne.n	8002086 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2b80      	cmp	r3, #128	@ 0x80
 8002072:	d919      	bls.n	80020a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2ba0      	cmp	r3, #160	@ 0xa0
 8002078:	d902      	bls.n	8002080 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800207a:	2302      	movs	r3, #2
 800207c:	613b      	str	r3, [r7, #16]
 800207e:	e013      	b.n	80020a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002080:	2301      	movs	r3, #1
 8002082:	613b      	str	r3, [r7, #16]
 8002084:	e010      	b.n	80020a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2b80      	cmp	r3, #128	@ 0x80
 800208a:	d902      	bls.n	8002092 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800208c:	2303      	movs	r3, #3
 800208e:	613b      	str	r3, [r7, #16]
 8002090:	e00a      	b.n	80020a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2b80      	cmp	r3, #128	@ 0x80
 8002096:	d102      	bne.n	800209e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002098:	2302      	movs	r3, #2
 800209a:	613b      	str	r3, [r7, #16]
 800209c:	e004      	b.n	80020a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2b70      	cmp	r3, #112	@ 0x70
 80020a2:	d101      	bne.n	80020a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80020a4:	2301      	movs	r3, #1
 80020a6:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80020a8:	4b0b      	ldr	r3, [pc, #44]	@ (80020d8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f023 0207 	bic.w	r2, r3, #7
 80020b0:	4909      	ldr	r1, [pc, #36]	@ (80020d8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	4313      	orrs	r3, r2
 80020b6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80020b8:	4b07      	ldr	r3, [pc, #28]	@ (80020d8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f003 0307 	and.w	r3, r3, #7
 80020c0:	693a      	ldr	r2, [r7, #16]
 80020c2:	429a      	cmp	r2, r3
 80020c4:	d001      	beq.n	80020ca <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	e000      	b.n	80020cc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80020ca:	2300      	movs	r3, #0
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	3718      	adds	r7, #24
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	40021000 	.word	0x40021000
 80020d8:	40022000 	.word	0x40022000

080020dc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b086      	sub	sp, #24
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80020e4:	2300      	movs	r3, #0
 80020e6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80020e8:	2300      	movs	r3, #0
 80020ea:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d041      	beq.n	800217c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80020fc:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002100:	d02a      	beq.n	8002158 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002102:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002106:	d824      	bhi.n	8002152 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002108:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800210c:	d008      	beq.n	8002120 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800210e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002112:	d81e      	bhi.n	8002152 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002114:	2b00      	cmp	r3, #0
 8002116:	d00a      	beq.n	800212e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002118:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800211c:	d010      	beq.n	8002140 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800211e:	e018      	b.n	8002152 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002120:	4b86      	ldr	r3, [pc, #536]	@ (800233c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002122:	68db      	ldr	r3, [r3, #12]
 8002124:	4a85      	ldr	r2, [pc, #532]	@ (800233c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002126:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800212a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800212c:	e015      	b.n	800215a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	3304      	adds	r3, #4
 8002132:	2100      	movs	r1, #0
 8002134:	4618      	mov	r0, r3
 8002136:	f000 fabb 	bl	80026b0 <RCCEx_PLLSAI1_Config>
 800213a:	4603      	mov	r3, r0
 800213c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800213e:	e00c      	b.n	800215a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	3320      	adds	r3, #32
 8002144:	2100      	movs	r1, #0
 8002146:	4618      	mov	r0, r3
 8002148:	f000 fba6 	bl	8002898 <RCCEx_PLLSAI2_Config>
 800214c:	4603      	mov	r3, r0
 800214e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002150:	e003      	b.n	800215a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002152:	2301      	movs	r3, #1
 8002154:	74fb      	strb	r3, [r7, #19]
      break;
 8002156:	e000      	b.n	800215a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002158:	bf00      	nop
    }

    if(ret == HAL_OK)
 800215a:	7cfb      	ldrb	r3, [r7, #19]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d10b      	bne.n	8002178 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002160:	4b76      	ldr	r3, [pc, #472]	@ (800233c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002162:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002166:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800216e:	4973      	ldr	r1, [pc, #460]	@ (800233c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002170:	4313      	orrs	r3, r2
 8002172:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002176:	e001      	b.n	800217c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002178:	7cfb      	ldrb	r3, [r7, #19]
 800217a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002184:	2b00      	cmp	r3, #0
 8002186:	d041      	beq.n	800220c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800218c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002190:	d02a      	beq.n	80021e8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002192:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002196:	d824      	bhi.n	80021e2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002198:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800219c:	d008      	beq.n	80021b0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800219e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80021a2:	d81e      	bhi.n	80021e2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d00a      	beq.n	80021be <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80021a8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80021ac:	d010      	beq.n	80021d0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80021ae:	e018      	b.n	80021e2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80021b0:	4b62      	ldr	r3, [pc, #392]	@ (800233c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021b2:	68db      	ldr	r3, [r3, #12]
 80021b4:	4a61      	ldr	r2, [pc, #388]	@ (800233c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021b6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021ba:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80021bc:	e015      	b.n	80021ea <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	3304      	adds	r3, #4
 80021c2:	2100      	movs	r1, #0
 80021c4:	4618      	mov	r0, r3
 80021c6:	f000 fa73 	bl	80026b0 <RCCEx_PLLSAI1_Config>
 80021ca:	4603      	mov	r3, r0
 80021cc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80021ce:	e00c      	b.n	80021ea <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	3320      	adds	r3, #32
 80021d4:	2100      	movs	r1, #0
 80021d6:	4618      	mov	r0, r3
 80021d8:	f000 fb5e 	bl	8002898 <RCCEx_PLLSAI2_Config>
 80021dc:	4603      	mov	r3, r0
 80021de:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80021e0:	e003      	b.n	80021ea <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	74fb      	strb	r3, [r7, #19]
      break;
 80021e6:	e000      	b.n	80021ea <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80021e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80021ea:	7cfb      	ldrb	r3, [r7, #19]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d10b      	bne.n	8002208 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80021f0:	4b52      	ldr	r3, [pc, #328]	@ (800233c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021f6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80021fe:	494f      	ldr	r1, [pc, #316]	@ (800233c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002200:	4313      	orrs	r3, r2
 8002202:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002206:	e001      	b.n	800220c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002208:	7cfb      	ldrb	r3, [r7, #19]
 800220a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002214:	2b00      	cmp	r3, #0
 8002216:	f000 80a0 	beq.w	800235a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800221a:	2300      	movs	r3, #0
 800221c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800221e:	4b47      	ldr	r3, [pc, #284]	@ (800233c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002220:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002222:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002226:	2b00      	cmp	r3, #0
 8002228:	d101      	bne.n	800222e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800222a:	2301      	movs	r3, #1
 800222c:	e000      	b.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800222e:	2300      	movs	r3, #0
 8002230:	2b00      	cmp	r3, #0
 8002232:	d00d      	beq.n	8002250 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002234:	4b41      	ldr	r3, [pc, #260]	@ (800233c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002236:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002238:	4a40      	ldr	r2, [pc, #256]	@ (800233c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800223a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800223e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002240:	4b3e      	ldr	r3, [pc, #248]	@ (800233c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002242:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002244:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002248:	60bb      	str	r3, [r7, #8]
 800224a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800224c:	2301      	movs	r3, #1
 800224e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002250:	4b3b      	ldr	r3, [pc, #236]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a3a      	ldr	r2, [pc, #232]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002256:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800225a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800225c:	f7fe fd96 	bl	8000d8c <HAL_GetTick>
 8002260:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002262:	e009      	b.n	8002278 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002264:	f7fe fd92 	bl	8000d8c <HAL_GetTick>
 8002268:	4602      	mov	r2, r0
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	1ad3      	subs	r3, r2, r3
 800226e:	2b02      	cmp	r3, #2
 8002270:	d902      	bls.n	8002278 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002272:	2303      	movs	r3, #3
 8002274:	74fb      	strb	r3, [r7, #19]
        break;
 8002276:	e005      	b.n	8002284 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002278:	4b31      	ldr	r3, [pc, #196]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002280:	2b00      	cmp	r3, #0
 8002282:	d0ef      	beq.n	8002264 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002284:	7cfb      	ldrb	r3, [r7, #19]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d15c      	bne.n	8002344 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800228a:	4b2c      	ldr	r3, [pc, #176]	@ (800233c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800228c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002290:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002294:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d01f      	beq.n	80022dc <HAL_RCCEx_PeriphCLKConfig+0x200>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80022a2:	697a      	ldr	r2, [r7, #20]
 80022a4:	429a      	cmp	r2, r3
 80022a6:	d019      	beq.n	80022dc <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80022a8:	4b24      	ldr	r3, [pc, #144]	@ (800233c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80022b2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80022b4:	4b21      	ldr	r3, [pc, #132]	@ (800233c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022ba:	4a20      	ldr	r2, [pc, #128]	@ (800233c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80022c4:	4b1d      	ldr	r3, [pc, #116]	@ (800233c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022ca:	4a1c      	ldr	r2, [pc, #112]	@ (800233c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022cc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80022d0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80022d4:	4a19      	ldr	r2, [pc, #100]	@ (800233c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80022dc:	697b      	ldr	r3, [r7, #20]
 80022de:	f003 0301 	and.w	r3, r3, #1
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d016      	beq.n	8002314 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022e6:	f7fe fd51 	bl	8000d8c <HAL_GetTick>
 80022ea:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022ec:	e00b      	b.n	8002306 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022ee:	f7fe fd4d 	bl	8000d8c <HAL_GetTick>
 80022f2:	4602      	mov	r2, r0
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	1ad3      	subs	r3, r2, r3
 80022f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d902      	bls.n	8002306 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002300:	2303      	movs	r3, #3
 8002302:	74fb      	strb	r3, [r7, #19]
            break;
 8002304:	e006      	b.n	8002314 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002306:	4b0d      	ldr	r3, [pc, #52]	@ (800233c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002308:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800230c:	f003 0302 	and.w	r3, r3, #2
 8002310:	2b00      	cmp	r3, #0
 8002312:	d0ec      	beq.n	80022ee <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002314:	7cfb      	ldrb	r3, [r7, #19]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d10c      	bne.n	8002334 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800231a:	4b08      	ldr	r3, [pc, #32]	@ (800233c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800231c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002320:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800232a:	4904      	ldr	r1, [pc, #16]	@ (800233c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800232c:	4313      	orrs	r3, r2
 800232e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002332:	e009      	b.n	8002348 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002334:	7cfb      	ldrb	r3, [r7, #19]
 8002336:	74bb      	strb	r3, [r7, #18]
 8002338:	e006      	b.n	8002348 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800233a:	bf00      	nop
 800233c:	40021000 	.word	0x40021000
 8002340:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002344:	7cfb      	ldrb	r3, [r7, #19]
 8002346:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002348:	7c7b      	ldrb	r3, [r7, #17]
 800234a:	2b01      	cmp	r3, #1
 800234c:	d105      	bne.n	800235a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800234e:	4b9e      	ldr	r3, [pc, #632]	@ (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002350:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002352:	4a9d      	ldr	r2, [pc, #628]	@ (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002354:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002358:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 0301 	and.w	r3, r3, #1
 8002362:	2b00      	cmp	r3, #0
 8002364:	d00a      	beq.n	800237c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002366:	4b98      	ldr	r3, [pc, #608]	@ (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002368:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800236c:	f023 0203 	bic.w	r2, r3, #3
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002374:	4994      	ldr	r1, [pc, #592]	@ (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002376:	4313      	orrs	r3, r2
 8002378:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f003 0302 	and.w	r3, r3, #2
 8002384:	2b00      	cmp	r3, #0
 8002386:	d00a      	beq.n	800239e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002388:	4b8f      	ldr	r3, [pc, #572]	@ (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800238a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800238e:	f023 020c 	bic.w	r2, r3, #12
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002396:	498c      	ldr	r1, [pc, #560]	@ (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002398:	4313      	orrs	r3, r2
 800239a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f003 0304 	and.w	r3, r3, #4
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d00a      	beq.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80023aa:	4b87      	ldr	r3, [pc, #540]	@ (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023b0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023b8:	4983      	ldr	r1, [pc, #524]	@ (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023ba:	4313      	orrs	r3, r2
 80023bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f003 0308 	and.w	r3, r3, #8
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d00a      	beq.n	80023e2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80023cc:	4b7e      	ldr	r3, [pc, #504]	@ (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023d2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023da:	497b      	ldr	r1, [pc, #492]	@ (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023dc:	4313      	orrs	r3, r2
 80023de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 0310 	and.w	r3, r3, #16
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d00a      	beq.n	8002404 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80023ee:	4b76      	ldr	r3, [pc, #472]	@ (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023f4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80023fc:	4972      	ldr	r1, [pc, #456]	@ (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023fe:	4313      	orrs	r3, r2
 8002400:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f003 0320 	and.w	r3, r3, #32
 800240c:	2b00      	cmp	r3, #0
 800240e:	d00a      	beq.n	8002426 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002410:	4b6d      	ldr	r3, [pc, #436]	@ (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002412:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002416:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800241e:	496a      	ldr	r1, [pc, #424]	@ (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002420:	4313      	orrs	r3, r2
 8002422:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800242e:	2b00      	cmp	r3, #0
 8002430:	d00a      	beq.n	8002448 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002432:	4b65      	ldr	r3, [pc, #404]	@ (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002434:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002438:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002440:	4961      	ldr	r1, [pc, #388]	@ (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002442:	4313      	orrs	r3, r2
 8002444:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002450:	2b00      	cmp	r3, #0
 8002452:	d00a      	beq.n	800246a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002454:	4b5c      	ldr	r3, [pc, #368]	@ (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002456:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800245a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002462:	4959      	ldr	r1, [pc, #356]	@ (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002464:	4313      	orrs	r3, r2
 8002466:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002472:	2b00      	cmp	r3, #0
 8002474:	d00a      	beq.n	800248c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002476:	4b54      	ldr	r3, [pc, #336]	@ (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002478:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800247c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002484:	4950      	ldr	r1, [pc, #320]	@ (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002486:	4313      	orrs	r3, r2
 8002488:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002494:	2b00      	cmp	r3, #0
 8002496:	d00a      	beq.n	80024ae <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002498:	4b4b      	ldr	r3, [pc, #300]	@ (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800249a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800249e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024a6:	4948      	ldr	r1, [pc, #288]	@ (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024a8:	4313      	orrs	r3, r2
 80024aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d00a      	beq.n	80024d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80024ba:	4b43      	ldr	r3, [pc, #268]	@ (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024c0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024c8:	493f      	ldr	r1, [pc, #252]	@ (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024ca:	4313      	orrs	r3, r2
 80024cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d028      	beq.n	800252e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80024dc:	4b3a      	ldr	r3, [pc, #232]	@ (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024e2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80024ea:	4937      	ldr	r1, [pc, #220]	@ (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024ec:	4313      	orrs	r3, r2
 80024ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80024f6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80024fa:	d106      	bne.n	800250a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80024fc:	4b32      	ldr	r3, [pc, #200]	@ (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024fe:	68db      	ldr	r3, [r3, #12]
 8002500:	4a31      	ldr	r2, [pc, #196]	@ (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002502:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002506:	60d3      	str	r3, [r2, #12]
 8002508:	e011      	b.n	800252e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800250e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002512:	d10c      	bne.n	800252e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	3304      	adds	r3, #4
 8002518:	2101      	movs	r1, #1
 800251a:	4618      	mov	r0, r3
 800251c:	f000 f8c8 	bl	80026b0 <RCCEx_PLLSAI1_Config>
 8002520:	4603      	mov	r3, r0
 8002522:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002524:	7cfb      	ldrb	r3, [r7, #19]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d001      	beq.n	800252e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800252a:	7cfb      	ldrb	r3, [r7, #19]
 800252c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002536:	2b00      	cmp	r3, #0
 8002538:	d028      	beq.n	800258c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800253a:	4b23      	ldr	r3, [pc, #140]	@ (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800253c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002540:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002548:	491f      	ldr	r1, [pc, #124]	@ (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800254a:	4313      	orrs	r3, r2
 800254c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002554:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002558:	d106      	bne.n	8002568 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800255a:	4b1b      	ldr	r3, [pc, #108]	@ (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800255c:	68db      	ldr	r3, [r3, #12]
 800255e:	4a1a      	ldr	r2, [pc, #104]	@ (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002560:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002564:	60d3      	str	r3, [r2, #12]
 8002566:	e011      	b.n	800258c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800256c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002570:	d10c      	bne.n	800258c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	3304      	adds	r3, #4
 8002576:	2101      	movs	r1, #1
 8002578:	4618      	mov	r0, r3
 800257a:	f000 f899 	bl	80026b0 <RCCEx_PLLSAI1_Config>
 800257e:	4603      	mov	r3, r0
 8002580:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002582:	7cfb      	ldrb	r3, [r7, #19]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d001      	beq.n	800258c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002588:	7cfb      	ldrb	r3, [r7, #19]
 800258a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002594:	2b00      	cmp	r3, #0
 8002596:	d02b      	beq.n	80025f0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002598:	4b0b      	ldr	r3, [pc, #44]	@ (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800259a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800259e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80025a6:	4908      	ldr	r1, [pc, #32]	@ (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025a8:	4313      	orrs	r3, r2
 80025aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80025b2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80025b6:	d109      	bne.n	80025cc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80025b8:	4b03      	ldr	r3, [pc, #12]	@ (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025ba:	68db      	ldr	r3, [r3, #12]
 80025bc:	4a02      	ldr	r2, [pc, #8]	@ (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025be:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80025c2:	60d3      	str	r3, [r2, #12]
 80025c4:	e014      	b.n	80025f0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80025c6:	bf00      	nop
 80025c8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80025d0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80025d4:	d10c      	bne.n	80025f0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	3304      	adds	r3, #4
 80025da:	2101      	movs	r1, #1
 80025dc:	4618      	mov	r0, r3
 80025de:	f000 f867 	bl	80026b0 <RCCEx_PLLSAI1_Config>
 80025e2:	4603      	mov	r3, r0
 80025e4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80025e6:	7cfb      	ldrb	r3, [r7, #19]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d001      	beq.n	80025f0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80025ec:	7cfb      	ldrb	r3, [r7, #19]
 80025ee:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d02f      	beq.n	800265c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80025fc:	4b2b      	ldr	r3, [pc, #172]	@ (80026ac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80025fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002602:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800260a:	4928      	ldr	r1, [pc, #160]	@ (80026ac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800260c:	4313      	orrs	r3, r2
 800260e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002616:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800261a:	d10d      	bne.n	8002638 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	3304      	adds	r3, #4
 8002620:	2102      	movs	r1, #2
 8002622:	4618      	mov	r0, r3
 8002624:	f000 f844 	bl	80026b0 <RCCEx_PLLSAI1_Config>
 8002628:	4603      	mov	r3, r0
 800262a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800262c:	7cfb      	ldrb	r3, [r7, #19]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d014      	beq.n	800265c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002632:	7cfb      	ldrb	r3, [r7, #19]
 8002634:	74bb      	strb	r3, [r7, #18]
 8002636:	e011      	b.n	800265c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800263c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002640:	d10c      	bne.n	800265c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	3320      	adds	r3, #32
 8002646:	2102      	movs	r1, #2
 8002648:	4618      	mov	r0, r3
 800264a:	f000 f925 	bl	8002898 <RCCEx_PLLSAI2_Config>
 800264e:	4603      	mov	r3, r0
 8002650:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002652:	7cfb      	ldrb	r3, [r7, #19]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d001      	beq.n	800265c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002658:	7cfb      	ldrb	r3, [r7, #19]
 800265a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002664:	2b00      	cmp	r3, #0
 8002666:	d00a      	beq.n	800267e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002668:	4b10      	ldr	r3, [pc, #64]	@ (80026ac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800266a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800266e:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002676:	490d      	ldr	r1, [pc, #52]	@ (80026ac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002678:	4313      	orrs	r3, r2
 800267a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002686:	2b00      	cmp	r3, #0
 8002688:	d00b      	beq.n	80026a2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800268a:	4b08      	ldr	r3, [pc, #32]	@ (80026ac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800268c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002690:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800269a:	4904      	ldr	r1, [pc, #16]	@ (80026ac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800269c:	4313      	orrs	r3, r2
 800269e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80026a2:	7cbb      	ldrb	r3, [r7, #18]
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	3718      	adds	r7, #24
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}
 80026ac:	40021000 	.word	0x40021000

080026b0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b084      	sub	sp, #16
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
 80026b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80026ba:	2300      	movs	r3, #0
 80026bc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80026be:	4b75      	ldr	r3, [pc, #468]	@ (8002894 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026c0:	68db      	ldr	r3, [r3, #12]
 80026c2:	f003 0303 	and.w	r3, r3, #3
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d018      	beq.n	80026fc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80026ca:	4b72      	ldr	r3, [pc, #456]	@ (8002894 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026cc:	68db      	ldr	r3, [r3, #12]
 80026ce:	f003 0203 	and.w	r2, r3, #3
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	429a      	cmp	r2, r3
 80026d8:	d10d      	bne.n	80026f6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
       ||
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d009      	beq.n	80026f6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80026e2:	4b6c      	ldr	r3, [pc, #432]	@ (8002894 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026e4:	68db      	ldr	r3, [r3, #12]
 80026e6:	091b      	lsrs	r3, r3, #4
 80026e8:	f003 0307 	and.w	r3, r3, #7
 80026ec:	1c5a      	adds	r2, r3, #1
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	685b      	ldr	r3, [r3, #4]
       ||
 80026f2:	429a      	cmp	r2, r3
 80026f4:	d047      	beq.n	8002786 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	73fb      	strb	r3, [r7, #15]
 80026fa:	e044      	b.n	8002786 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	2b03      	cmp	r3, #3
 8002702:	d018      	beq.n	8002736 <RCCEx_PLLSAI1_Config+0x86>
 8002704:	2b03      	cmp	r3, #3
 8002706:	d825      	bhi.n	8002754 <RCCEx_PLLSAI1_Config+0xa4>
 8002708:	2b01      	cmp	r3, #1
 800270a:	d002      	beq.n	8002712 <RCCEx_PLLSAI1_Config+0x62>
 800270c:	2b02      	cmp	r3, #2
 800270e:	d009      	beq.n	8002724 <RCCEx_PLLSAI1_Config+0x74>
 8002710:	e020      	b.n	8002754 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002712:	4b60      	ldr	r3, [pc, #384]	@ (8002894 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f003 0302 	and.w	r3, r3, #2
 800271a:	2b00      	cmp	r3, #0
 800271c:	d11d      	bne.n	800275a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002722:	e01a      	b.n	800275a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002724:	4b5b      	ldr	r3, [pc, #364]	@ (8002894 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800272c:	2b00      	cmp	r3, #0
 800272e:	d116      	bne.n	800275e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002730:	2301      	movs	r3, #1
 8002732:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002734:	e013      	b.n	800275e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002736:	4b57      	ldr	r3, [pc, #348]	@ (8002894 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800273e:	2b00      	cmp	r3, #0
 8002740:	d10f      	bne.n	8002762 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002742:	4b54      	ldr	r3, [pc, #336]	@ (8002894 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800274a:	2b00      	cmp	r3, #0
 800274c:	d109      	bne.n	8002762 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002752:	e006      	b.n	8002762 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002754:	2301      	movs	r3, #1
 8002756:	73fb      	strb	r3, [r7, #15]
      break;
 8002758:	e004      	b.n	8002764 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800275a:	bf00      	nop
 800275c:	e002      	b.n	8002764 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800275e:	bf00      	nop
 8002760:	e000      	b.n	8002764 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002762:	bf00      	nop
    }

    if(status == HAL_OK)
 8002764:	7bfb      	ldrb	r3, [r7, #15]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d10d      	bne.n	8002786 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800276a:	4b4a      	ldr	r3, [pc, #296]	@ (8002894 <RCCEx_PLLSAI1_Config+0x1e4>)
 800276c:	68db      	ldr	r3, [r3, #12]
 800276e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6819      	ldr	r1, [r3, #0]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	3b01      	subs	r3, #1
 800277c:	011b      	lsls	r3, r3, #4
 800277e:	430b      	orrs	r3, r1
 8002780:	4944      	ldr	r1, [pc, #272]	@ (8002894 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002782:	4313      	orrs	r3, r2
 8002784:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002786:	7bfb      	ldrb	r3, [r7, #15]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d17d      	bne.n	8002888 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800278c:	4b41      	ldr	r3, [pc, #260]	@ (8002894 <RCCEx_PLLSAI1_Config+0x1e4>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a40      	ldr	r2, [pc, #256]	@ (8002894 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002792:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002796:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002798:	f7fe faf8 	bl	8000d8c <HAL_GetTick>
 800279c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800279e:	e009      	b.n	80027b4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80027a0:	f7fe faf4 	bl	8000d8c <HAL_GetTick>
 80027a4:	4602      	mov	r2, r0
 80027a6:	68bb      	ldr	r3, [r7, #8]
 80027a8:	1ad3      	subs	r3, r2, r3
 80027aa:	2b02      	cmp	r3, #2
 80027ac:	d902      	bls.n	80027b4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80027ae:	2303      	movs	r3, #3
 80027b0:	73fb      	strb	r3, [r7, #15]
        break;
 80027b2:	e005      	b.n	80027c0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80027b4:	4b37      	ldr	r3, [pc, #220]	@ (8002894 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d1ef      	bne.n	80027a0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80027c0:	7bfb      	ldrb	r3, [r7, #15]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d160      	bne.n	8002888 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d111      	bne.n	80027f0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80027cc:	4b31      	ldr	r3, [pc, #196]	@ (8002894 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027ce:	691b      	ldr	r3, [r3, #16]
 80027d0:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80027d4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80027d8:	687a      	ldr	r2, [r7, #4]
 80027da:	6892      	ldr	r2, [r2, #8]
 80027dc:	0211      	lsls	r1, r2, #8
 80027de:	687a      	ldr	r2, [r7, #4]
 80027e0:	68d2      	ldr	r2, [r2, #12]
 80027e2:	0912      	lsrs	r2, r2, #4
 80027e4:	0452      	lsls	r2, r2, #17
 80027e6:	430a      	orrs	r2, r1
 80027e8:	492a      	ldr	r1, [pc, #168]	@ (8002894 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027ea:	4313      	orrs	r3, r2
 80027ec:	610b      	str	r3, [r1, #16]
 80027ee:	e027      	b.n	8002840 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	2b01      	cmp	r3, #1
 80027f4:	d112      	bne.n	800281c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80027f6:	4b27      	ldr	r3, [pc, #156]	@ (8002894 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027f8:	691b      	ldr	r3, [r3, #16]
 80027fa:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80027fe:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002802:	687a      	ldr	r2, [r7, #4]
 8002804:	6892      	ldr	r2, [r2, #8]
 8002806:	0211      	lsls	r1, r2, #8
 8002808:	687a      	ldr	r2, [r7, #4]
 800280a:	6912      	ldr	r2, [r2, #16]
 800280c:	0852      	lsrs	r2, r2, #1
 800280e:	3a01      	subs	r2, #1
 8002810:	0552      	lsls	r2, r2, #21
 8002812:	430a      	orrs	r2, r1
 8002814:	491f      	ldr	r1, [pc, #124]	@ (8002894 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002816:	4313      	orrs	r3, r2
 8002818:	610b      	str	r3, [r1, #16]
 800281a:	e011      	b.n	8002840 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800281c:	4b1d      	ldr	r3, [pc, #116]	@ (8002894 <RCCEx_PLLSAI1_Config+0x1e4>)
 800281e:	691b      	ldr	r3, [r3, #16]
 8002820:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002824:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002828:	687a      	ldr	r2, [r7, #4]
 800282a:	6892      	ldr	r2, [r2, #8]
 800282c:	0211      	lsls	r1, r2, #8
 800282e:	687a      	ldr	r2, [r7, #4]
 8002830:	6952      	ldr	r2, [r2, #20]
 8002832:	0852      	lsrs	r2, r2, #1
 8002834:	3a01      	subs	r2, #1
 8002836:	0652      	lsls	r2, r2, #25
 8002838:	430a      	orrs	r2, r1
 800283a:	4916      	ldr	r1, [pc, #88]	@ (8002894 <RCCEx_PLLSAI1_Config+0x1e4>)
 800283c:	4313      	orrs	r3, r2
 800283e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002840:	4b14      	ldr	r3, [pc, #80]	@ (8002894 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a13      	ldr	r2, [pc, #76]	@ (8002894 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002846:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800284a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800284c:	f7fe fa9e 	bl	8000d8c <HAL_GetTick>
 8002850:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002852:	e009      	b.n	8002868 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002854:	f7fe fa9a 	bl	8000d8c <HAL_GetTick>
 8002858:	4602      	mov	r2, r0
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	1ad3      	subs	r3, r2, r3
 800285e:	2b02      	cmp	r3, #2
 8002860:	d902      	bls.n	8002868 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002862:	2303      	movs	r3, #3
 8002864:	73fb      	strb	r3, [r7, #15]
          break;
 8002866:	e005      	b.n	8002874 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002868:	4b0a      	ldr	r3, [pc, #40]	@ (8002894 <RCCEx_PLLSAI1_Config+0x1e4>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002870:	2b00      	cmp	r3, #0
 8002872:	d0ef      	beq.n	8002854 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002874:	7bfb      	ldrb	r3, [r7, #15]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d106      	bne.n	8002888 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800287a:	4b06      	ldr	r3, [pc, #24]	@ (8002894 <RCCEx_PLLSAI1_Config+0x1e4>)
 800287c:	691a      	ldr	r2, [r3, #16]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	699b      	ldr	r3, [r3, #24]
 8002882:	4904      	ldr	r1, [pc, #16]	@ (8002894 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002884:	4313      	orrs	r3, r2
 8002886:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002888:	7bfb      	ldrb	r3, [r7, #15]
}
 800288a:	4618      	mov	r0, r3
 800288c:	3710      	adds	r7, #16
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}
 8002892:	bf00      	nop
 8002894:	40021000 	.word	0x40021000

08002898 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b084      	sub	sp, #16
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
 80028a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80028a2:	2300      	movs	r3, #0
 80028a4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80028a6:	4b6a      	ldr	r3, [pc, #424]	@ (8002a50 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028a8:	68db      	ldr	r3, [r3, #12]
 80028aa:	f003 0303 	and.w	r3, r3, #3
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d018      	beq.n	80028e4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80028b2:	4b67      	ldr	r3, [pc, #412]	@ (8002a50 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028b4:	68db      	ldr	r3, [r3, #12]
 80028b6:	f003 0203 	and.w	r2, r3, #3
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	429a      	cmp	r2, r3
 80028c0:	d10d      	bne.n	80028de <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
       ||
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d009      	beq.n	80028de <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80028ca:	4b61      	ldr	r3, [pc, #388]	@ (8002a50 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028cc:	68db      	ldr	r3, [r3, #12]
 80028ce:	091b      	lsrs	r3, r3, #4
 80028d0:	f003 0307 	and.w	r3, r3, #7
 80028d4:	1c5a      	adds	r2, r3, #1
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	685b      	ldr	r3, [r3, #4]
       ||
 80028da:	429a      	cmp	r2, r3
 80028dc:	d047      	beq.n	800296e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80028de:	2301      	movs	r3, #1
 80028e0:	73fb      	strb	r3, [r7, #15]
 80028e2:	e044      	b.n	800296e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	2b03      	cmp	r3, #3
 80028ea:	d018      	beq.n	800291e <RCCEx_PLLSAI2_Config+0x86>
 80028ec:	2b03      	cmp	r3, #3
 80028ee:	d825      	bhi.n	800293c <RCCEx_PLLSAI2_Config+0xa4>
 80028f0:	2b01      	cmp	r3, #1
 80028f2:	d002      	beq.n	80028fa <RCCEx_PLLSAI2_Config+0x62>
 80028f4:	2b02      	cmp	r3, #2
 80028f6:	d009      	beq.n	800290c <RCCEx_PLLSAI2_Config+0x74>
 80028f8:	e020      	b.n	800293c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80028fa:	4b55      	ldr	r3, [pc, #340]	@ (8002a50 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f003 0302 	and.w	r3, r3, #2
 8002902:	2b00      	cmp	r3, #0
 8002904:	d11d      	bne.n	8002942 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800290a:	e01a      	b.n	8002942 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800290c:	4b50      	ldr	r3, [pc, #320]	@ (8002a50 <RCCEx_PLLSAI2_Config+0x1b8>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002914:	2b00      	cmp	r3, #0
 8002916:	d116      	bne.n	8002946 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002918:	2301      	movs	r3, #1
 800291a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800291c:	e013      	b.n	8002946 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800291e:	4b4c      	ldr	r3, [pc, #304]	@ (8002a50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002926:	2b00      	cmp	r3, #0
 8002928:	d10f      	bne.n	800294a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800292a:	4b49      	ldr	r3, [pc, #292]	@ (8002a50 <RCCEx_PLLSAI2_Config+0x1b8>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002932:	2b00      	cmp	r3, #0
 8002934:	d109      	bne.n	800294a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002936:	2301      	movs	r3, #1
 8002938:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800293a:	e006      	b.n	800294a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800293c:	2301      	movs	r3, #1
 800293e:	73fb      	strb	r3, [r7, #15]
      break;
 8002940:	e004      	b.n	800294c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002942:	bf00      	nop
 8002944:	e002      	b.n	800294c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002946:	bf00      	nop
 8002948:	e000      	b.n	800294c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800294a:	bf00      	nop
    }

    if(status == HAL_OK)
 800294c:	7bfb      	ldrb	r3, [r7, #15]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d10d      	bne.n	800296e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002952:	4b3f      	ldr	r3, [pc, #252]	@ (8002a50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002954:	68db      	ldr	r3, [r3, #12]
 8002956:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6819      	ldr	r1, [r3, #0]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	3b01      	subs	r3, #1
 8002964:	011b      	lsls	r3, r3, #4
 8002966:	430b      	orrs	r3, r1
 8002968:	4939      	ldr	r1, [pc, #228]	@ (8002a50 <RCCEx_PLLSAI2_Config+0x1b8>)
 800296a:	4313      	orrs	r3, r2
 800296c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800296e:	7bfb      	ldrb	r3, [r7, #15]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d167      	bne.n	8002a44 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002974:	4b36      	ldr	r3, [pc, #216]	@ (8002a50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a35      	ldr	r2, [pc, #212]	@ (8002a50 <RCCEx_PLLSAI2_Config+0x1b8>)
 800297a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800297e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002980:	f7fe fa04 	bl	8000d8c <HAL_GetTick>
 8002984:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002986:	e009      	b.n	800299c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002988:	f7fe fa00 	bl	8000d8c <HAL_GetTick>
 800298c:	4602      	mov	r2, r0
 800298e:	68bb      	ldr	r3, [r7, #8]
 8002990:	1ad3      	subs	r3, r2, r3
 8002992:	2b02      	cmp	r3, #2
 8002994:	d902      	bls.n	800299c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002996:	2303      	movs	r3, #3
 8002998:	73fb      	strb	r3, [r7, #15]
        break;
 800299a:	e005      	b.n	80029a8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800299c:	4b2c      	ldr	r3, [pc, #176]	@ (8002a50 <RCCEx_PLLSAI2_Config+0x1b8>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d1ef      	bne.n	8002988 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80029a8:	7bfb      	ldrb	r3, [r7, #15]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d14a      	bne.n	8002a44 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d111      	bne.n	80029d8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80029b4:	4b26      	ldr	r3, [pc, #152]	@ (8002a50 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029b6:	695b      	ldr	r3, [r3, #20]
 80029b8:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80029bc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80029c0:	687a      	ldr	r2, [r7, #4]
 80029c2:	6892      	ldr	r2, [r2, #8]
 80029c4:	0211      	lsls	r1, r2, #8
 80029c6:	687a      	ldr	r2, [r7, #4]
 80029c8:	68d2      	ldr	r2, [r2, #12]
 80029ca:	0912      	lsrs	r2, r2, #4
 80029cc:	0452      	lsls	r2, r2, #17
 80029ce:	430a      	orrs	r2, r1
 80029d0:	491f      	ldr	r1, [pc, #124]	@ (8002a50 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029d2:	4313      	orrs	r3, r2
 80029d4:	614b      	str	r3, [r1, #20]
 80029d6:	e011      	b.n	80029fc <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80029d8:	4b1d      	ldr	r3, [pc, #116]	@ (8002a50 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029da:	695b      	ldr	r3, [r3, #20]
 80029dc:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80029e0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80029e4:	687a      	ldr	r2, [r7, #4]
 80029e6:	6892      	ldr	r2, [r2, #8]
 80029e8:	0211      	lsls	r1, r2, #8
 80029ea:	687a      	ldr	r2, [r7, #4]
 80029ec:	6912      	ldr	r2, [r2, #16]
 80029ee:	0852      	lsrs	r2, r2, #1
 80029f0:	3a01      	subs	r2, #1
 80029f2:	0652      	lsls	r2, r2, #25
 80029f4:	430a      	orrs	r2, r1
 80029f6:	4916      	ldr	r1, [pc, #88]	@ (8002a50 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029f8:	4313      	orrs	r3, r2
 80029fa:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80029fc:	4b14      	ldr	r3, [pc, #80]	@ (8002a50 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a13      	ldr	r2, [pc, #76]	@ (8002a50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a02:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a06:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a08:	f7fe f9c0 	bl	8000d8c <HAL_GetTick>
 8002a0c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002a0e:	e009      	b.n	8002a24 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002a10:	f7fe f9bc 	bl	8000d8c <HAL_GetTick>
 8002a14:	4602      	mov	r2, r0
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	1ad3      	subs	r3, r2, r3
 8002a1a:	2b02      	cmp	r3, #2
 8002a1c:	d902      	bls.n	8002a24 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002a1e:	2303      	movs	r3, #3
 8002a20:	73fb      	strb	r3, [r7, #15]
          break;
 8002a22:	e005      	b.n	8002a30 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002a24:	4b0a      	ldr	r3, [pc, #40]	@ (8002a50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d0ef      	beq.n	8002a10 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002a30:	7bfb      	ldrb	r3, [r7, #15]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d106      	bne.n	8002a44 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002a36:	4b06      	ldr	r3, [pc, #24]	@ (8002a50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a38:	695a      	ldr	r2, [r3, #20]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	695b      	ldr	r3, [r3, #20]
 8002a3e:	4904      	ldr	r1, [pc, #16]	@ (8002a50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a40:	4313      	orrs	r3, r2
 8002a42:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002a44:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	3710      	adds	r7, #16
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	bf00      	nop
 8002a50:	40021000 	.word	0x40021000

08002a54 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b082      	sub	sp, #8
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d101      	bne.n	8002a66 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	e049      	b.n	8002afa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a6c:	b2db      	uxtb	r3, r3
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d106      	bne.n	8002a80 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2200      	movs	r2, #0
 8002a76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a7a:	6878      	ldr	r0, [r7, #4]
 8002a7c:	f7fd ffa8 	bl	80009d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2202      	movs	r2, #2
 8002a84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681a      	ldr	r2, [r3, #0]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	3304      	adds	r3, #4
 8002a90:	4619      	mov	r1, r3
 8002a92:	4610      	mov	r0, r2
 8002a94:	f000 fa04 	bl	8002ea0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2201      	movs	r2, #1
 8002aac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2201      	movs	r2, #1
 8002abc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2201      	movs	r2, #1
 8002acc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2201      	movs	r2, #1
 8002adc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2201      	movs	r2, #1
 8002aec:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2201      	movs	r2, #1
 8002af4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002af8:	2300      	movs	r3, #0
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	3708      	adds	r7, #8
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}
	...

08002b04 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b085      	sub	sp, #20
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b12:	b2db      	uxtb	r3, r3
 8002b14:	2b01      	cmp	r3, #1
 8002b16:	d001      	beq.n	8002b1c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	e04f      	b.n	8002bbc <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2202      	movs	r2, #2
 8002b20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	68da      	ldr	r2, [r3, #12]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f042 0201 	orr.w	r2, r2, #1
 8002b32:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a23      	ldr	r2, [pc, #140]	@ (8002bc8 <HAL_TIM_Base_Start_IT+0xc4>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d01d      	beq.n	8002b7a <HAL_TIM_Base_Start_IT+0x76>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b46:	d018      	beq.n	8002b7a <HAL_TIM_Base_Start_IT+0x76>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a1f      	ldr	r2, [pc, #124]	@ (8002bcc <HAL_TIM_Base_Start_IT+0xc8>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d013      	beq.n	8002b7a <HAL_TIM_Base_Start_IT+0x76>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a1e      	ldr	r2, [pc, #120]	@ (8002bd0 <HAL_TIM_Base_Start_IT+0xcc>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d00e      	beq.n	8002b7a <HAL_TIM_Base_Start_IT+0x76>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a1c      	ldr	r2, [pc, #112]	@ (8002bd4 <HAL_TIM_Base_Start_IT+0xd0>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d009      	beq.n	8002b7a <HAL_TIM_Base_Start_IT+0x76>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a1b      	ldr	r2, [pc, #108]	@ (8002bd8 <HAL_TIM_Base_Start_IT+0xd4>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d004      	beq.n	8002b7a <HAL_TIM_Base_Start_IT+0x76>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a19      	ldr	r2, [pc, #100]	@ (8002bdc <HAL_TIM_Base_Start_IT+0xd8>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d115      	bne.n	8002ba6 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	689a      	ldr	r2, [r3, #8]
 8002b80:	4b17      	ldr	r3, [pc, #92]	@ (8002be0 <HAL_TIM_Base_Start_IT+0xdc>)
 8002b82:	4013      	ands	r3, r2
 8002b84:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	2b06      	cmp	r3, #6
 8002b8a:	d015      	beq.n	8002bb8 <HAL_TIM_Base_Start_IT+0xb4>
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b92:	d011      	beq.n	8002bb8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	681a      	ldr	r2, [r3, #0]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f042 0201 	orr.w	r2, r2, #1
 8002ba2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ba4:	e008      	b.n	8002bb8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	681a      	ldr	r2, [r3, #0]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f042 0201 	orr.w	r2, r2, #1
 8002bb4:	601a      	str	r2, [r3, #0]
 8002bb6:	e000      	b.n	8002bba <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bb8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002bba:	2300      	movs	r3, #0
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	3714      	adds	r7, #20
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc6:	4770      	bx	lr
 8002bc8:	40012c00 	.word	0x40012c00
 8002bcc:	40000400 	.word	0x40000400
 8002bd0:	40000800 	.word	0x40000800
 8002bd4:	40000c00 	.word	0x40000c00
 8002bd8:	40013400 	.word	0x40013400
 8002bdc:	40014000 	.word	0x40014000
 8002be0:	00010007 	.word	0x00010007

08002be4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b083      	sub	sp, #12
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	68da      	ldr	r2, [r3, #12]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f022 0201 	bic.w	r2, r2, #1
 8002bfa:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	6a1a      	ldr	r2, [r3, #32]
 8002c02:	f241 1311 	movw	r3, #4369	@ 0x1111
 8002c06:	4013      	ands	r3, r2
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d10f      	bne.n	8002c2c <HAL_TIM_Base_Stop_IT+0x48>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	6a1a      	ldr	r2, [r3, #32]
 8002c12:	f240 4344 	movw	r3, #1092	@ 0x444
 8002c16:	4013      	ands	r3, r2
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d107      	bne.n	8002c2c <HAL_TIM_Base_Stop_IT+0x48>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	681a      	ldr	r2, [r3, #0]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f022 0201 	bic.w	r2, r2, #1
 8002c2a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2201      	movs	r2, #1
 8002c30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8002c34:	2300      	movs	r3, #0
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	370c      	adds	r7, #12
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c40:	4770      	bx	lr

08002c42 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002c42:	b580      	push	{r7, lr}
 8002c44:	b084      	sub	sp, #16
 8002c46:	af00      	add	r7, sp, #0
 8002c48:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	68db      	ldr	r3, [r3, #12]
 8002c50:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	691b      	ldr	r3, [r3, #16]
 8002c58:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	f003 0302 	and.w	r3, r3, #2
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d020      	beq.n	8002ca6 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	f003 0302 	and.w	r3, r3, #2
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d01b      	beq.n	8002ca6 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f06f 0202 	mvn.w	r2, #2
 8002c76:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	699b      	ldr	r3, [r3, #24]
 8002c84:	f003 0303 	and.w	r3, r3, #3
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d003      	beq.n	8002c94 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002c8c:	6878      	ldr	r0, [r7, #4]
 8002c8e:	f000 f8e9 	bl	8002e64 <HAL_TIM_IC_CaptureCallback>
 8002c92:	e005      	b.n	8002ca0 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c94:	6878      	ldr	r0, [r7, #4]
 8002c96:	f000 f8db 	bl	8002e50 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c9a:	6878      	ldr	r0, [r7, #4]
 8002c9c:	f000 f8ec 	bl	8002e78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	f003 0304 	and.w	r3, r3, #4
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d020      	beq.n	8002cf2 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	f003 0304 	and.w	r3, r3, #4
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d01b      	beq.n	8002cf2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f06f 0204 	mvn.w	r2, #4
 8002cc2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2202      	movs	r2, #2
 8002cc8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	699b      	ldr	r3, [r3, #24]
 8002cd0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d003      	beq.n	8002ce0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cd8:	6878      	ldr	r0, [r7, #4]
 8002cda:	f000 f8c3 	bl	8002e64 <HAL_TIM_IC_CaptureCallback>
 8002cde:	e005      	b.n	8002cec <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ce0:	6878      	ldr	r0, [r7, #4]
 8002ce2:	f000 f8b5 	bl	8002e50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ce6:	6878      	ldr	r0, [r7, #4]
 8002ce8:	f000 f8c6 	bl	8002e78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	f003 0308 	and.w	r3, r3, #8
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d020      	beq.n	8002d3e <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	f003 0308 	and.w	r3, r3, #8
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d01b      	beq.n	8002d3e <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f06f 0208 	mvn.w	r2, #8
 8002d0e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2204      	movs	r2, #4
 8002d14:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	69db      	ldr	r3, [r3, #28]
 8002d1c:	f003 0303 	and.w	r3, r3, #3
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d003      	beq.n	8002d2c <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d24:	6878      	ldr	r0, [r7, #4]
 8002d26:	f000 f89d 	bl	8002e64 <HAL_TIM_IC_CaptureCallback>
 8002d2a:	e005      	b.n	8002d38 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d2c:	6878      	ldr	r0, [r7, #4]
 8002d2e:	f000 f88f 	bl	8002e50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d32:	6878      	ldr	r0, [r7, #4]
 8002d34:	f000 f8a0 	bl	8002e78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	f003 0310 	and.w	r3, r3, #16
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d020      	beq.n	8002d8a <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	f003 0310 	and.w	r3, r3, #16
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d01b      	beq.n	8002d8a <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f06f 0210 	mvn.w	r2, #16
 8002d5a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2208      	movs	r2, #8
 8002d60:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	69db      	ldr	r3, [r3, #28]
 8002d68:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d003      	beq.n	8002d78 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d70:	6878      	ldr	r0, [r7, #4]
 8002d72:	f000 f877 	bl	8002e64 <HAL_TIM_IC_CaptureCallback>
 8002d76:	e005      	b.n	8002d84 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d78:	6878      	ldr	r0, [r7, #4]
 8002d7a:	f000 f869 	bl	8002e50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d7e:	6878      	ldr	r0, [r7, #4]
 8002d80:	f000 f87a 	bl	8002e78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2200      	movs	r2, #0
 8002d88:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	f003 0301 	and.w	r3, r3, #1
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d00c      	beq.n	8002dae <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	f003 0301 	and.w	r3, r3, #1
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d007      	beq.n	8002dae <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f06f 0201 	mvn.w	r2, #1
 8002da6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002da8:	6878      	ldr	r0, [r7, #4]
 8002daa:	f7fd fd7f 	bl	80008ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d104      	bne.n	8002dc2 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d00c      	beq.n	8002ddc <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d007      	beq.n	8002ddc <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8002dd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	f000 f912 	bl	8003000 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d00c      	beq.n	8002e00 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d007      	beq.n	8002e00 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8002df8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002dfa:	6878      	ldr	r0, [r7, #4]
 8002dfc:	f000 f90a 	bl	8003014 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d00c      	beq.n	8002e24 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d007      	beq.n	8002e24 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002e1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002e1e:	6878      	ldr	r0, [r7, #4]
 8002e20:	f000 f834 	bl	8002e8c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	f003 0320 	and.w	r3, r3, #32
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d00c      	beq.n	8002e48 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	f003 0320 	and.w	r3, r3, #32
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d007      	beq.n	8002e48 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f06f 0220 	mvn.w	r2, #32
 8002e40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002e42:	6878      	ldr	r0, [r7, #4]
 8002e44:	f000 f8d2 	bl	8002fec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002e48:	bf00      	nop
 8002e4a:	3710      	adds	r7, #16
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}

08002e50 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b083      	sub	sp, #12
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002e58:	bf00      	nop
 8002e5a:	370c      	adds	r7, #12
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e62:	4770      	bx	lr

08002e64 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002e64:	b480      	push	{r7}
 8002e66:	b083      	sub	sp, #12
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002e6c:	bf00      	nop
 8002e6e:	370c      	adds	r7, #12
 8002e70:	46bd      	mov	sp, r7
 8002e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e76:	4770      	bx	lr

08002e78 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b083      	sub	sp, #12
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002e80:	bf00      	nop
 8002e82:	370c      	adds	r7, #12
 8002e84:	46bd      	mov	sp, r7
 8002e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8a:	4770      	bx	lr

08002e8c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b083      	sub	sp, #12
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002e94:	bf00      	nop
 8002e96:	370c      	adds	r7, #12
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9e:	4770      	bx	lr

08002ea0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b085      	sub	sp, #20
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
 8002ea8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	4a46      	ldr	r2, [pc, #280]	@ (8002fcc <TIM_Base_SetConfig+0x12c>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d013      	beq.n	8002ee0 <TIM_Base_SetConfig+0x40>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ebe:	d00f      	beq.n	8002ee0 <TIM_Base_SetConfig+0x40>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	4a43      	ldr	r2, [pc, #268]	@ (8002fd0 <TIM_Base_SetConfig+0x130>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d00b      	beq.n	8002ee0 <TIM_Base_SetConfig+0x40>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	4a42      	ldr	r2, [pc, #264]	@ (8002fd4 <TIM_Base_SetConfig+0x134>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d007      	beq.n	8002ee0 <TIM_Base_SetConfig+0x40>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	4a41      	ldr	r2, [pc, #260]	@ (8002fd8 <TIM_Base_SetConfig+0x138>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d003      	beq.n	8002ee0 <TIM_Base_SetConfig+0x40>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	4a40      	ldr	r2, [pc, #256]	@ (8002fdc <TIM_Base_SetConfig+0x13c>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d108      	bne.n	8002ef2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002ee6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	68fa      	ldr	r2, [r7, #12]
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	4a35      	ldr	r2, [pc, #212]	@ (8002fcc <TIM_Base_SetConfig+0x12c>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d01f      	beq.n	8002f3a <TIM_Base_SetConfig+0x9a>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f00:	d01b      	beq.n	8002f3a <TIM_Base_SetConfig+0x9a>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	4a32      	ldr	r2, [pc, #200]	@ (8002fd0 <TIM_Base_SetConfig+0x130>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d017      	beq.n	8002f3a <TIM_Base_SetConfig+0x9a>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	4a31      	ldr	r2, [pc, #196]	@ (8002fd4 <TIM_Base_SetConfig+0x134>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d013      	beq.n	8002f3a <TIM_Base_SetConfig+0x9a>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	4a30      	ldr	r2, [pc, #192]	@ (8002fd8 <TIM_Base_SetConfig+0x138>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d00f      	beq.n	8002f3a <TIM_Base_SetConfig+0x9a>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	4a2f      	ldr	r2, [pc, #188]	@ (8002fdc <TIM_Base_SetConfig+0x13c>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d00b      	beq.n	8002f3a <TIM_Base_SetConfig+0x9a>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	4a2e      	ldr	r2, [pc, #184]	@ (8002fe0 <TIM_Base_SetConfig+0x140>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d007      	beq.n	8002f3a <TIM_Base_SetConfig+0x9a>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	4a2d      	ldr	r2, [pc, #180]	@ (8002fe4 <TIM_Base_SetConfig+0x144>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d003      	beq.n	8002f3a <TIM_Base_SetConfig+0x9a>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	4a2c      	ldr	r2, [pc, #176]	@ (8002fe8 <TIM_Base_SetConfig+0x148>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d108      	bne.n	8002f4c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002f40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	68db      	ldr	r3, [r3, #12]
 8002f46:	68fa      	ldr	r2, [r7, #12]
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	695b      	ldr	r3, [r3, #20]
 8002f56:	4313      	orrs	r3, r2
 8002f58:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	68fa      	ldr	r2, [r7, #12]
 8002f5e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	689a      	ldr	r2, [r3, #8]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	4a16      	ldr	r2, [pc, #88]	@ (8002fcc <TIM_Base_SetConfig+0x12c>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d00f      	beq.n	8002f98 <TIM_Base_SetConfig+0xf8>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	4a18      	ldr	r2, [pc, #96]	@ (8002fdc <TIM_Base_SetConfig+0x13c>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d00b      	beq.n	8002f98 <TIM_Base_SetConfig+0xf8>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	4a17      	ldr	r2, [pc, #92]	@ (8002fe0 <TIM_Base_SetConfig+0x140>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d007      	beq.n	8002f98 <TIM_Base_SetConfig+0xf8>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	4a16      	ldr	r2, [pc, #88]	@ (8002fe4 <TIM_Base_SetConfig+0x144>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d003      	beq.n	8002f98 <TIM_Base_SetConfig+0xf8>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	4a15      	ldr	r2, [pc, #84]	@ (8002fe8 <TIM_Base_SetConfig+0x148>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d103      	bne.n	8002fa0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	691a      	ldr	r2, [r3, #16]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	691b      	ldr	r3, [r3, #16]
 8002faa:	f003 0301 	and.w	r3, r3, #1
 8002fae:	2b01      	cmp	r3, #1
 8002fb0:	d105      	bne.n	8002fbe <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	691b      	ldr	r3, [r3, #16]
 8002fb6:	f023 0201 	bic.w	r2, r3, #1
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	611a      	str	r2, [r3, #16]
  }
}
 8002fbe:	bf00      	nop
 8002fc0:	3714      	adds	r7, #20
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc8:	4770      	bx	lr
 8002fca:	bf00      	nop
 8002fcc:	40012c00 	.word	0x40012c00
 8002fd0:	40000400 	.word	0x40000400
 8002fd4:	40000800 	.word	0x40000800
 8002fd8:	40000c00 	.word	0x40000c00
 8002fdc:	40013400 	.word	0x40013400
 8002fe0:	40014000 	.word	0x40014000
 8002fe4:	40014400 	.word	0x40014400
 8002fe8:	40014800 	.word	0x40014800

08002fec <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b083      	sub	sp, #12
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002ff4:	bf00      	nop
 8002ff6:	370c      	adds	r7, #12
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffe:	4770      	bx	lr

08003000 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003000:	b480      	push	{r7}
 8003002:	b083      	sub	sp, #12
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003008:	bf00      	nop
 800300a:	370c      	adds	r7, #12
 800300c:	46bd      	mov	sp, r7
 800300e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003012:	4770      	bx	lr

08003014 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003014:	b480      	push	{r7}
 8003016:	b083      	sub	sp, #12
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800301c:	bf00      	nop
 800301e:	370c      	adds	r7, #12
 8003020:	46bd      	mov	sp, r7
 8003022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003026:	4770      	bx	lr

08003028 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b082      	sub	sp, #8
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d101      	bne.n	800303a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	e040      	b.n	80030bc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800303e:	2b00      	cmp	r3, #0
 8003040:	d106      	bne.n	8003050 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2200      	movs	r2, #0
 8003046:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800304a:	6878      	ldr	r0, [r7, #4]
 800304c:	f7fd fd02 	bl	8000a54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2224      	movs	r2, #36	@ 0x24
 8003054:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	681a      	ldr	r2, [r3, #0]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f022 0201 	bic.w	r2, r2, #1
 8003064:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800306a:	2b00      	cmp	r3, #0
 800306c:	d002      	beq.n	8003074 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800306e:	6878      	ldr	r0, [r7, #4]
 8003070:	f000 fae0 	bl	8003634 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003074:	6878      	ldr	r0, [r7, #4]
 8003076:	f000 f825 	bl	80030c4 <UART_SetConfig>
 800307a:	4603      	mov	r3, r0
 800307c:	2b01      	cmp	r3, #1
 800307e:	d101      	bne.n	8003084 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	e01b      	b.n	80030bc <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	685a      	ldr	r2, [r3, #4]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003092:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	689a      	ldr	r2, [r3, #8]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80030a2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	681a      	ldr	r2, [r3, #0]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f042 0201 	orr.w	r2, r2, #1
 80030b2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80030b4:	6878      	ldr	r0, [r7, #4]
 80030b6:	f000 fb5f 	bl	8003778 <UART_CheckIdleState>
 80030ba:	4603      	mov	r3, r0
}
 80030bc:	4618      	mov	r0, r3
 80030be:	3708      	adds	r7, #8
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}

080030c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80030c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80030c8:	b08a      	sub	sp, #40	@ 0x28
 80030ca:	af00      	add	r7, sp, #0
 80030cc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80030ce:	2300      	movs	r3, #0
 80030d0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	689a      	ldr	r2, [r3, #8]
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	691b      	ldr	r3, [r3, #16]
 80030dc:	431a      	orrs	r2, r3
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	695b      	ldr	r3, [r3, #20]
 80030e2:	431a      	orrs	r2, r3
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	69db      	ldr	r3, [r3, #28]
 80030e8:	4313      	orrs	r3, r2
 80030ea:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	681a      	ldr	r2, [r3, #0]
 80030f2:	4ba4      	ldr	r3, [pc, #656]	@ (8003384 <UART_SetConfig+0x2c0>)
 80030f4:	4013      	ands	r3, r2
 80030f6:	68fa      	ldr	r2, [r7, #12]
 80030f8:	6812      	ldr	r2, [r2, #0]
 80030fa:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80030fc:	430b      	orrs	r3, r1
 80030fe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	68da      	ldr	r2, [r3, #12]
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	430a      	orrs	r2, r1
 8003114:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	699b      	ldr	r3, [r3, #24]
 800311a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a99      	ldr	r2, [pc, #612]	@ (8003388 <UART_SetConfig+0x2c4>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d004      	beq.n	8003130 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	6a1b      	ldr	r3, [r3, #32]
 800312a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800312c:	4313      	orrs	r3, r2
 800312e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003140:	430a      	orrs	r2, r1
 8003142:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a90      	ldr	r2, [pc, #576]	@ (800338c <UART_SetConfig+0x2c8>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d126      	bne.n	800319c <UART_SetConfig+0xd8>
 800314e:	4b90      	ldr	r3, [pc, #576]	@ (8003390 <UART_SetConfig+0x2cc>)
 8003150:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003154:	f003 0303 	and.w	r3, r3, #3
 8003158:	2b03      	cmp	r3, #3
 800315a:	d81b      	bhi.n	8003194 <UART_SetConfig+0xd0>
 800315c:	a201      	add	r2, pc, #4	@ (adr r2, 8003164 <UART_SetConfig+0xa0>)
 800315e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003162:	bf00      	nop
 8003164:	08003175 	.word	0x08003175
 8003168:	08003185 	.word	0x08003185
 800316c:	0800317d 	.word	0x0800317d
 8003170:	0800318d 	.word	0x0800318d
 8003174:	2301      	movs	r3, #1
 8003176:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800317a:	e116      	b.n	80033aa <UART_SetConfig+0x2e6>
 800317c:	2302      	movs	r3, #2
 800317e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003182:	e112      	b.n	80033aa <UART_SetConfig+0x2e6>
 8003184:	2304      	movs	r3, #4
 8003186:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800318a:	e10e      	b.n	80033aa <UART_SetConfig+0x2e6>
 800318c:	2308      	movs	r3, #8
 800318e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003192:	e10a      	b.n	80033aa <UART_SetConfig+0x2e6>
 8003194:	2310      	movs	r3, #16
 8003196:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800319a:	e106      	b.n	80033aa <UART_SetConfig+0x2e6>
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a7c      	ldr	r2, [pc, #496]	@ (8003394 <UART_SetConfig+0x2d0>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d138      	bne.n	8003218 <UART_SetConfig+0x154>
 80031a6:	4b7a      	ldr	r3, [pc, #488]	@ (8003390 <UART_SetConfig+0x2cc>)
 80031a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031ac:	f003 030c 	and.w	r3, r3, #12
 80031b0:	2b0c      	cmp	r3, #12
 80031b2:	d82d      	bhi.n	8003210 <UART_SetConfig+0x14c>
 80031b4:	a201      	add	r2, pc, #4	@ (adr r2, 80031bc <UART_SetConfig+0xf8>)
 80031b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031ba:	bf00      	nop
 80031bc:	080031f1 	.word	0x080031f1
 80031c0:	08003211 	.word	0x08003211
 80031c4:	08003211 	.word	0x08003211
 80031c8:	08003211 	.word	0x08003211
 80031cc:	08003201 	.word	0x08003201
 80031d0:	08003211 	.word	0x08003211
 80031d4:	08003211 	.word	0x08003211
 80031d8:	08003211 	.word	0x08003211
 80031dc:	080031f9 	.word	0x080031f9
 80031e0:	08003211 	.word	0x08003211
 80031e4:	08003211 	.word	0x08003211
 80031e8:	08003211 	.word	0x08003211
 80031ec:	08003209 	.word	0x08003209
 80031f0:	2300      	movs	r3, #0
 80031f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80031f6:	e0d8      	b.n	80033aa <UART_SetConfig+0x2e6>
 80031f8:	2302      	movs	r3, #2
 80031fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80031fe:	e0d4      	b.n	80033aa <UART_SetConfig+0x2e6>
 8003200:	2304      	movs	r3, #4
 8003202:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003206:	e0d0      	b.n	80033aa <UART_SetConfig+0x2e6>
 8003208:	2308      	movs	r3, #8
 800320a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800320e:	e0cc      	b.n	80033aa <UART_SetConfig+0x2e6>
 8003210:	2310      	movs	r3, #16
 8003212:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003216:	e0c8      	b.n	80033aa <UART_SetConfig+0x2e6>
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a5e      	ldr	r2, [pc, #376]	@ (8003398 <UART_SetConfig+0x2d4>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d125      	bne.n	800326e <UART_SetConfig+0x1aa>
 8003222:	4b5b      	ldr	r3, [pc, #364]	@ (8003390 <UART_SetConfig+0x2cc>)
 8003224:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003228:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800322c:	2b30      	cmp	r3, #48	@ 0x30
 800322e:	d016      	beq.n	800325e <UART_SetConfig+0x19a>
 8003230:	2b30      	cmp	r3, #48	@ 0x30
 8003232:	d818      	bhi.n	8003266 <UART_SetConfig+0x1a2>
 8003234:	2b20      	cmp	r3, #32
 8003236:	d00a      	beq.n	800324e <UART_SetConfig+0x18a>
 8003238:	2b20      	cmp	r3, #32
 800323a:	d814      	bhi.n	8003266 <UART_SetConfig+0x1a2>
 800323c:	2b00      	cmp	r3, #0
 800323e:	d002      	beq.n	8003246 <UART_SetConfig+0x182>
 8003240:	2b10      	cmp	r3, #16
 8003242:	d008      	beq.n	8003256 <UART_SetConfig+0x192>
 8003244:	e00f      	b.n	8003266 <UART_SetConfig+0x1a2>
 8003246:	2300      	movs	r3, #0
 8003248:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800324c:	e0ad      	b.n	80033aa <UART_SetConfig+0x2e6>
 800324e:	2302      	movs	r3, #2
 8003250:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003254:	e0a9      	b.n	80033aa <UART_SetConfig+0x2e6>
 8003256:	2304      	movs	r3, #4
 8003258:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800325c:	e0a5      	b.n	80033aa <UART_SetConfig+0x2e6>
 800325e:	2308      	movs	r3, #8
 8003260:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003264:	e0a1      	b.n	80033aa <UART_SetConfig+0x2e6>
 8003266:	2310      	movs	r3, #16
 8003268:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800326c:	e09d      	b.n	80033aa <UART_SetConfig+0x2e6>
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a4a      	ldr	r2, [pc, #296]	@ (800339c <UART_SetConfig+0x2d8>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d125      	bne.n	80032c4 <UART_SetConfig+0x200>
 8003278:	4b45      	ldr	r3, [pc, #276]	@ (8003390 <UART_SetConfig+0x2cc>)
 800327a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800327e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003282:	2bc0      	cmp	r3, #192	@ 0xc0
 8003284:	d016      	beq.n	80032b4 <UART_SetConfig+0x1f0>
 8003286:	2bc0      	cmp	r3, #192	@ 0xc0
 8003288:	d818      	bhi.n	80032bc <UART_SetConfig+0x1f8>
 800328a:	2b80      	cmp	r3, #128	@ 0x80
 800328c:	d00a      	beq.n	80032a4 <UART_SetConfig+0x1e0>
 800328e:	2b80      	cmp	r3, #128	@ 0x80
 8003290:	d814      	bhi.n	80032bc <UART_SetConfig+0x1f8>
 8003292:	2b00      	cmp	r3, #0
 8003294:	d002      	beq.n	800329c <UART_SetConfig+0x1d8>
 8003296:	2b40      	cmp	r3, #64	@ 0x40
 8003298:	d008      	beq.n	80032ac <UART_SetConfig+0x1e8>
 800329a:	e00f      	b.n	80032bc <UART_SetConfig+0x1f8>
 800329c:	2300      	movs	r3, #0
 800329e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80032a2:	e082      	b.n	80033aa <UART_SetConfig+0x2e6>
 80032a4:	2302      	movs	r3, #2
 80032a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80032aa:	e07e      	b.n	80033aa <UART_SetConfig+0x2e6>
 80032ac:	2304      	movs	r3, #4
 80032ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80032b2:	e07a      	b.n	80033aa <UART_SetConfig+0x2e6>
 80032b4:	2308      	movs	r3, #8
 80032b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80032ba:	e076      	b.n	80033aa <UART_SetConfig+0x2e6>
 80032bc:	2310      	movs	r3, #16
 80032be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80032c2:	e072      	b.n	80033aa <UART_SetConfig+0x2e6>
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a35      	ldr	r2, [pc, #212]	@ (80033a0 <UART_SetConfig+0x2dc>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d12a      	bne.n	8003324 <UART_SetConfig+0x260>
 80032ce:	4b30      	ldr	r3, [pc, #192]	@ (8003390 <UART_SetConfig+0x2cc>)
 80032d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032d4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80032d8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80032dc:	d01a      	beq.n	8003314 <UART_SetConfig+0x250>
 80032de:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80032e2:	d81b      	bhi.n	800331c <UART_SetConfig+0x258>
 80032e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80032e8:	d00c      	beq.n	8003304 <UART_SetConfig+0x240>
 80032ea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80032ee:	d815      	bhi.n	800331c <UART_SetConfig+0x258>
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d003      	beq.n	80032fc <UART_SetConfig+0x238>
 80032f4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80032f8:	d008      	beq.n	800330c <UART_SetConfig+0x248>
 80032fa:	e00f      	b.n	800331c <UART_SetConfig+0x258>
 80032fc:	2300      	movs	r3, #0
 80032fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003302:	e052      	b.n	80033aa <UART_SetConfig+0x2e6>
 8003304:	2302      	movs	r3, #2
 8003306:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800330a:	e04e      	b.n	80033aa <UART_SetConfig+0x2e6>
 800330c:	2304      	movs	r3, #4
 800330e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003312:	e04a      	b.n	80033aa <UART_SetConfig+0x2e6>
 8003314:	2308      	movs	r3, #8
 8003316:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800331a:	e046      	b.n	80033aa <UART_SetConfig+0x2e6>
 800331c:	2310      	movs	r3, #16
 800331e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003322:	e042      	b.n	80033aa <UART_SetConfig+0x2e6>
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a17      	ldr	r2, [pc, #92]	@ (8003388 <UART_SetConfig+0x2c4>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d13a      	bne.n	80033a4 <UART_SetConfig+0x2e0>
 800332e:	4b18      	ldr	r3, [pc, #96]	@ (8003390 <UART_SetConfig+0x2cc>)
 8003330:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003334:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003338:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800333c:	d01a      	beq.n	8003374 <UART_SetConfig+0x2b0>
 800333e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003342:	d81b      	bhi.n	800337c <UART_SetConfig+0x2b8>
 8003344:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003348:	d00c      	beq.n	8003364 <UART_SetConfig+0x2a0>
 800334a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800334e:	d815      	bhi.n	800337c <UART_SetConfig+0x2b8>
 8003350:	2b00      	cmp	r3, #0
 8003352:	d003      	beq.n	800335c <UART_SetConfig+0x298>
 8003354:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003358:	d008      	beq.n	800336c <UART_SetConfig+0x2a8>
 800335a:	e00f      	b.n	800337c <UART_SetConfig+0x2b8>
 800335c:	2300      	movs	r3, #0
 800335e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003362:	e022      	b.n	80033aa <UART_SetConfig+0x2e6>
 8003364:	2302      	movs	r3, #2
 8003366:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800336a:	e01e      	b.n	80033aa <UART_SetConfig+0x2e6>
 800336c:	2304      	movs	r3, #4
 800336e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003372:	e01a      	b.n	80033aa <UART_SetConfig+0x2e6>
 8003374:	2308      	movs	r3, #8
 8003376:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800337a:	e016      	b.n	80033aa <UART_SetConfig+0x2e6>
 800337c:	2310      	movs	r3, #16
 800337e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003382:	e012      	b.n	80033aa <UART_SetConfig+0x2e6>
 8003384:	efff69f3 	.word	0xefff69f3
 8003388:	40008000 	.word	0x40008000
 800338c:	40013800 	.word	0x40013800
 8003390:	40021000 	.word	0x40021000
 8003394:	40004400 	.word	0x40004400
 8003398:	40004800 	.word	0x40004800
 800339c:	40004c00 	.word	0x40004c00
 80033a0:	40005000 	.word	0x40005000
 80033a4:	2310      	movs	r3, #16
 80033a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a9f      	ldr	r2, [pc, #636]	@ (800362c <UART_SetConfig+0x568>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d17a      	bne.n	80034aa <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80033b4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80033b8:	2b08      	cmp	r3, #8
 80033ba:	d824      	bhi.n	8003406 <UART_SetConfig+0x342>
 80033bc:	a201      	add	r2, pc, #4	@ (adr r2, 80033c4 <UART_SetConfig+0x300>)
 80033be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033c2:	bf00      	nop
 80033c4:	080033e9 	.word	0x080033e9
 80033c8:	08003407 	.word	0x08003407
 80033cc:	080033f1 	.word	0x080033f1
 80033d0:	08003407 	.word	0x08003407
 80033d4:	080033f7 	.word	0x080033f7
 80033d8:	08003407 	.word	0x08003407
 80033dc:	08003407 	.word	0x08003407
 80033e0:	08003407 	.word	0x08003407
 80033e4:	080033ff 	.word	0x080033ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80033e8:	f7fe fdba 	bl	8001f60 <HAL_RCC_GetPCLK1Freq>
 80033ec:	61f8      	str	r0, [r7, #28]
        break;
 80033ee:	e010      	b.n	8003412 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80033f0:	4b8f      	ldr	r3, [pc, #572]	@ (8003630 <UART_SetConfig+0x56c>)
 80033f2:	61fb      	str	r3, [r7, #28]
        break;
 80033f4:	e00d      	b.n	8003412 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80033f6:	f7fe fd1b 	bl	8001e30 <HAL_RCC_GetSysClockFreq>
 80033fa:	61f8      	str	r0, [r7, #28]
        break;
 80033fc:	e009      	b.n	8003412 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80033fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003402:	61fb      	str	r3, [r7, #28]
        break;
 8003404:	e005      	b.n	8003412 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003406:	2300      	movs	r3, #0
 8003408:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003410:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003412:	69fb      	ldr	r3, [r7, #28]
 8003414:	2b00      	cmp	r3, #0
 8003416:	f000 80fb 	beq.w	8003610 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	685a      	ldr	r2, [r3, #4]
 800341e:	4613      	mov	r3, r2
 8003420:	005b      	lsls	r3, r3, #1
 8003422:	4413      	add	r3, r2
 8003424:	69fa      	ldr	r2, [r7, #28]
 8003426:	429a      	cmp	r2, r3
 8003428:	d305      	bcc.n	8003436 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003430:	69fa      	ldr	r2, [r7, #28]
 8003432:	429a      	cmp	r2, r3
 8003434:	d903      	bls.n	800343e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003436:	2301      	movs	r3, #1
 8003438:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800343c:	e0e8      	b.n	8003610 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800343e:	69fb      	ldr	r3, [r7, #28]
 8003440:	2200      	movs	r2, #0
 8003442:	461c      	mov	r4, r3
 8003444:	4615      	mov	r5, r2
 8003446:	f04f 0200 	mov.w	r2, #0
 800344a:	f04f 0300 	mov.w	r3, #0
 800344e:	022b      	lsls	r3, r5, #8
 8003450:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003454:	0222      	lsls	r2, r4, #8
 8003456:	68f9      	ldr	r1, [r7, #12]
 8003458:	6849      	ldr	r1, [r1, #4]
 800345a:	0849      	lsrs	r1, r1, #1
 800345c:	2000      	movs	r0, #0
 800345e:	4688      	mov	r8, r1
 8003460:	4681      	mov	r9, r0
 8003462:	eb12 0a08 	adds.w	sl, r2, r8
 8003466:	eb43 0b09 	adc.w	fp, r3, r9
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	2200      	movs	r2, #0
 8003470:	603b      	str	r3, [r7, #0]
 8003472:	607a      	str	r2, [r7, #4]
 8003474:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003478:	4650      	mov	r0, sl
 800347a:	4659      	mov	r1, fp
 800347c:	f7fc fea4 	bl	80001c8 <__aeabi_uldivmod>
 8003480:	4602      	mov	r2, r0
 8003482:	460b      	mov	r3, r1
 8003484:	4613      	mov	r3, r2
 8003486:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003488:	69bb      	ldr	r3, [r7, #24]
 800348a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800348e:	d308      	bcc.n	80034a2 <UART_SetConfig+0x3de>
 8003490:	69bb      	ldr	r3, [r7, #24]
 8003492:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003496:	d204      	bcs.n	80034a2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	69ba      	ldr	r2, [r7, #24]
 800349e:	60da      	str	r2, [r3, #12]
 80034a0:	e0b6      	b.n	8003610 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80034a2:	2301      	movs	r3, #1
 80034a4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80034a8:	e0b2      	b.n	8003610 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	69db      	ldr	r3, [r3, #28]
 80034ae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80034b2:	d15e      	bne.n	8003572 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80034b4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80034b8:	2b08      	cmp	r3, #8
 80034ba:	d828      	bhi.n	800350e <UART_SetConfig+0x44a>
 80034bc:	a201      	add	r2, pc, #4	@ (adr r2, 80034c4 <UART_SetConfig+0x400>)
 80034be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034c2:	bf00      	nop
 80034c4:	080034e9 	.word	0x080034e9
 80034c8:	080034f1 	.word	0x080034f1
 80034cc:	080034f9 	.word	0x080034f9
 80034d0:	0800350f 	.word	0x0800350f
 80034d4:	080034ff 	.word	0x080034ff
 80034d8:	0800350f 	.word	0x0800350f
 80034dc:	0800350f 	.word	0x0800350f
 80034e0:	0800350f 	.word	0x0800350f
 80034e4:	08003507 	.word	0x08003507
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80034e8:	f7fe fd3a 	bl	8001f60 <HAL_RCC_GetPCLK1Freq>
 80034ec:	61f8      	str	r0, [r7, #28]
        break;
 80034ee:	e014      	b.n	800351a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80034f0:	f7fe fd4c 	bl	8001f8c <HAL_RCC_GetPCLK2Freq>
 80034f4:	61f8      	str	r0, [r7, #28]
        break;
 80034f6:	e010      	b.n	800351a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80034f8:	4b4d      	ldr	r3, [pc, #308]	@ (8003630 <UART_SetConfig+0x56c>)
 80034fa:	61fb      	str	r3, [r7, #28]
        break;
 80034fc:	e00d      	b.n	800351a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80034fe:	f7fe fc97 	bl	8001e30 <HAL_RCC_GetSysClockFreq>
 8003502:	61f8      	str	r0, [r7, #28]
        break;
 8003504:	e009      	b.n	800351a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003506:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800350a:	61fb      	str	r3, [r7, #28]
        break;
 800350c:	e005      	b.n	800351a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800350e:	2300      	movs	r3, #0
 8003510:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003512:	2301      	movs	r3, #1
 8003514:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003518:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800351a:	69fb      	ldr	r3, [r7, #28]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d077      	beq.n	8003610 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003520:	69fb      	ldr	r3, [r7, #28]
 8003522:	005a      	lsls	r2, r3, #1
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	085b      	lsrs	r3, r3, #1
 800352a:	441a      	add	r2, r3
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	fbb2 f3f3 	udiv	r3, r2, r3
 8003534:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003536:	69bb      	ldr	r3, [r7, #24]
 8003538:	2b0f      	cmp	r3, #15
 800353a:	d916      	bls.n	800356a <UART_SetConfig+0x4a6>
 800353c:	69bb      	ldr	r3, [r7, #24]
 800353e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003542:	d212      	bcs.n	800356a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003544:	69bb      	ldr	r3, [r7, #24]
 8003546:	b29b      	uxth	r3, r3
 8003548:	f023 030f 	bic.w	r3, r3, #15
 800354c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800354e:	69bb      	ldr	r3, [r7, #24]
 8003550:	085b      	lsrs	r3, r3, #1
 8003552:	b29b      	uxth	r3, r3
 8003554:	f003 0307 	and.w	r3, r3, #7
 8003558:	b29a      	uxth	r2, r3
 800355a:	8afb      	ldrh	r3, [r7, #22]
 800355c:	4313      	orrs	r3, r2
 800355e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	8afa      	ldrh	r2, [r7, #22]
 8003566:	60da      	str	r2, [r3, #12]
 8003568:	e052      	b.n	8003610 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003570:	e04e      	b.n	8003610 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003572:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003576:	2b08      	cmp	r3, #8
 8003578:	d827      	bhi.n	80035ca <UART_SetConfig+0x506>
 800357a:	a201      	add	r2, pc, #4	@ (adr r2, 8003580 <UART_SetConfig+0x4bc>)
 800357c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003580:	080035a5 	.word	0x080035a5
 8003584:	080035ad 	.word	0x080035ad
 8003588:	080035b5 	.word	0x080035b5
 800358c:	080035cb 	.word	0x080035cb
 8003590:	080035bb 	.word	0x080035bb
 8003594:	080035cb 	.word	0x080035cb
 8003598:	080035cb 	.word	0x080035cb
 800359c:	080035cb 	.word	0x080035cb
 80035a0:	080035c3 	.word	0x080035c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80035a4:	f7fe fcdc 	bl	8001f60 <HAL_RCC_GetPCLK1Freq>
 80035a8:	61f8      	str	r0, [r7, #28]
        break;
 80035aa:	e014      	b.n	80035d6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80035ac:	f7fe fcee 	bl	8001f8c <HAL_RCC_GetPCLK2Freq>
 80035b0:	61f8      	str	r0, [r7, #28]
        break;
 80035b2:	e010      	b.n	80035d6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80035b4:	4b1e      	ldr	r3, [pc, #120]	@ (8003630 <UART_SetConfig+0x56c>)
 80035b6:	61fb      	str	r3, [r7, #28]
        break;
 80035b8:	e00d      	b.n	80035d6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80035ba:	f7fe fc39 	bl	8001e30 <HAL_RCC_GetSysClockFreq>
 80035be:	61f8      	str	r0, [r7, #28]
        break;
 80035c0:	e009      	b.n	80035d6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80035c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80035c6:	61fb      	str	r3, [r7, #28]
        break;
 80035c8:	e005      	b.n	80035d6 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80035ca:	2300      	movs	r3, #0
 80035cc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80035d4:	bf00      	nop
    }

    if (pclk != 0U)
 80035d6:	69fb      	ldr	r3, [r7, #28]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d019      	beq.n	8003610 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	085a      	lsrs	r2, r3, #1
 80035e2:	69fb      	ldr	r3, [r7, #28]
 80035e4:	441a      	add	r2, r3
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80035ee:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80035f0:	69bb      	ldr	r3, [r7, #24]
 80035f2:	2b0f      	cmp	r3, #15
 80035f4:	d909      	bls.n	800360a <UART_SetConfig+0x546>
 80035f6:	69bb      	ldr	r3, [r7, #24]
 80035f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035fc:	d205      	bcs.n	800360a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80035fe:	69bb      	ldr	r3, [r7, #24]
 8003600:	b29a      	uxth	r2, r3
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	60da      	str	r2, [r3, #12]
 8003608:	e002      	b.n	8003610 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2200      	movs	r2, #0
 8003614:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	2200      	movs	r2, #0
 800361a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800361c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8003620:	4618      	mov	r0, r3
 8003622:	3728      	adds	r7, #40	@ 0x28
 8003624:	46bd      	mov	sp, r7
 8003626:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800362a:	bf00      	nop
 800362c:	40008000 	.word	0x40008000
 8003630:	00f42400 	.word	0x00f42400

08003634 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003634:	b480      	push	{r7}
 8003636:	b083      	sub	sp, #12
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003640:	f003 0308 	and.w	r3, r3, #8
 8003644:	2b00      	cmp	r3, #0
 8003646:	d00a      	beq.n	800365e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	430a      	orrs	r2, r1
 800365c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003662:	f003 0301 	and.w	r3, r3, #1
 8003666:	2b00      	cmp	r3, #0
 8003668:	d00a      	beq.n	8003680 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	430a      	orrs	r2, r1
 800367e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003684:	f003 0302 	and.w	r3, r3, #2
 8003688:	2b00      	cmp	r3, #0
 800368a:	d00a      	beq.n	80036a2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	430a      	orrs	r2, r1
 80036a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036a6:	f003 0304 	and.w	r3, r3, #4
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d00a      	beq.n	80036c4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	430a      	orrs	r2, r1
 80036c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036c8:	f003 0310 	and.w	r3, r3, #16
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d00a      	beq.n	80036e6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	689b      	ldr	r3, [r3, #8]
 80036d6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	430a      	orrs	r2, r1
 80036e4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036ea:	f003 0320 	and.w	r3, r3, #32
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d00a      	beq.n	8003708 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	430a      	orrs	r2, r1
 8003706:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800370c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003710:	2b00      	cmp	r3, #0
 8003712:	d01a      	beq.n	800374a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	430a      	orrs	r2, r1
 8003728:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800372e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003732:	d10a      	bne.n	800374a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	430a      	orrs	r2, r1
 8003748:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800374e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003752:	2b00      	cmp	r3, #0
 8003754:	d00a      	beq.n	800376c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	430a      	orrs	r2, r1
 800376a:	605a      	str	r2, [r3, #4]
  }
}
 800376c:	bf00      	nop
 800376e:	370c      	adds	r7, #12
 8003770:	46bd      	mov	sp, r7
 8003772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003776:	4770      	bx	lr

08003778 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b098      	sub	sp, #96	@ 0x60
 800377c:	af02      	add	r7, sp, #8
 800377e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2200      	movs	r2, #0
 8003784:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003788:	f7fd fb00 	bl	8000d8c <HAL_GetTick>
 800378c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f003 0308 	and.w	r3, r3, #8
 8003798:	2b08      	cmp	r3, #8
 800379a:	d12e      	bne.n	80037fa <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800379c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80037a0:	9300      	str	r3, [sp, #0]
 80037a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037a4:	2200      	movs	r2, #0
 80037a6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	f000 f88c 	bl	80038c8 <UART_WaitOnFlagUntilTimeout>
 80037b0:	4603      	mov	r3, r0
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d021      	beq.n	80037fa <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037be:	e853 3f00 	ldrex	r3, [r3]
 80037c2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80037c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037c6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80037ca:	653b      	str	r3, [r7, #80]	@ 0x50
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	461a      	mov	r2, r3
 80037d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80037d4:	647b      	str	r3, [r7, #68]	@ 0x44
 80037d6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037d8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80037da:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80037dc:	e841 2300 	strex	r3, r2, [r1]
 80037e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80037e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d1e6      	bne.n	80037b6 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2220      	movs	r2, #32
 80037ec:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2200      	movs	r2, #0
 80037f2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80037f6:	2303      	movs	r3, #3
 80037f8:	e062      	b.n	80038c0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f003 0304 	and.w	r3, r3, #4
 8003804:	2b04      	cmp	r3, #4
 8003806:	d149      	bne.n	800389c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003808:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800380c:	9300      	str	r3, [sp, #0]
 800380e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003810:	2200      	movs	r2, #0
 8003812:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003816:	6878      	ldr	r0, [r7, #4]
 8003818:	f000 f856 	bl	80038c8 <UART_WaitOnFlagUntilTimeout>
 800381c:	4603      	mov	r3, r0
 800381e:	2b00      	cmp	r3, #0
 8003820:	d03c      	beq.n	800389c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003828:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800382a:	e853 3f00 	ldrex	r3, [r3]
 800382e:	623b      	str	r3, [r7, #32]
   return(result);
 8003830:	6a3b      	ldr	r3, [r7, #32]
 8003832:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003836:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	461a      	mov	r2, r3
 800383e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003840:	633b      	str	r3, [r7, #48]	@ 0x30
 8003842:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003844:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003846:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003848:	e841 2300 	strex	r3, r2, [r1]
 800384c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800384e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003850:	2b00      	cmp	r3, #0
 8003852:	d1e6      	bne.n	8003822 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	3308      	adds	r3, #8
 800385a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800385c:	693b      	ldr	r3, [r7, #16]
 800385e:	e853 3f00 	ldrex	r3, [r3]
 8003862:	60fb      	str	r3, [r7, #12]
   return(result);
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	f023 0301 	bic.w	r3, r3, #1
 800386a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	3308      	adds	r3, #8
 8003872:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003874:	61fa      	str	r2, [r7, #28]
 8003876:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003878:	69b9      	ldr	r1, [r7, #24]
 800387a:	69fa      	ldr	r2, [r7, #28]
 800387c:	e841 2300 	strex	r3, r2, [r1]
 8003880:	617b      	str	r3, [r7, #20]
   return(result);
 8003882:	697b      	ldr	r3, [r7, #20]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d1e5      	bne.n	8003854 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2220      	movs	r2, #32
 800388c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2200      	movs	r2, #0
 8003894:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003898:	2303      	movs	r3, #3
 800389a:	e011      	b.n	80038c0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2220      	movs	r2, #32
 80038a0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2220      	movs	r2, #32
 80038a6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2200      	movs	r2, #0
 80038ae:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2200      	movs	r2, #0
 80038b4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2200      	movs	r2, #0
 80038ba:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80038be:	2300      	movs	r3, #0
}
 80038c0:	4618      	mov	r0, r3
 80038c2:	3758      	adds	r7, #88	@ 0x58
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}

080038c8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b084      	sub	sp, #16
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	60f8      	str	r0, [r7, #12]
 80038d0:	60b9      	str	r1, [r7, #8]
 80038d2:	603b      	str	r3, [r7, #0]
 80038d4:	4613      	mov	r3, r2
 80038d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038d8:	e04f      	b.n	800397a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038da:	69bb      	ldr	r3, [r7, #24]
 80038dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038e0:	d04b      	beq.n	800397a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038e2:	f7fd fa53 	bl	8000d8c <HAL_GetTick>
 80038e6:	4602      	mov	r2, r0
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	1ad3      	subs	r3, r2, r3
 80038ec:	69ba      	ldr	r2, [r7, #24]
 80038ee:	429a      	cmp	r2, r3
 80038f0:	d302      	bcc.n	80038f8 <UART_WaitOnFlagUntilTimeout+0x30>
 80038f2:	69bb      	ldr	r3, [r7, #24]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d101      	bne.n	80038fc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80038f8:	2303      	movs	r3, #3
 80038fa:	e04e      	b.n	800399a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f003 0304 	and.w	r3, r3, #4
 8003906:	2b00      	cmp	r3, #0
 8003908:	d037      	beq.n	800397a <UART_WaitOnFlagUntilTimeout+0xb2>
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	2b80      	cmp	r3, #128	@ 0x80
 800390e:	d034      	beq.n	800397a <UART_WaitOnFlagUntilTimeout+0xb2>
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	2b40      	cmp	r3, #64	@ 0x40
 8003914:	d031      	beq.n	800397a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	69db      	ldr	r3, [r3, #28]
 800391c:	f003 0308 	and.w	r3, r3, #8
 8003920:	2b08      	cmp	r3, #8
 8003922:	d110      	bne.n	8003946 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	2208      	movs	r2, #8
 800392a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800392c:	68f8      	ldr	r0, [r7, #12]
 800392e:	f000 f838 	bl	80039a2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	2208      	movs	r2, #8
 8003936:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	2200      	movs	r2, #0
 800393e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	e029      	b.n	800399a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	69db      	ldr	r3, [r3, #28]
 800394c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003950:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003954:	d111      	bne.n	800397a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800395e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003960:	68f8      	ldr	r0, [r7, #12]
 8003962:	f000 f81e 	bl	80039a2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	2220      	movs	r2, #32
 800396a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	2200      	movs	r2, #0
 8003972:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003976:	2303      	movs	r3, #3
 8003978:	e00f      	b.n	800399a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	69da      	ldr	r2, [r3, #28]
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	4013      	ands	r3, r2
 8003984:	68ba      	ldr	r2, [r7, #8]
 8003986:	429a      	cmp	r2, r3
 8003988:	bf0c      	ite	eq
 800398a:	2301      	moveq	r3, #1
 800398c:	2300      	movne	r3, #0
 800398e:	b2db      	uxtb	r3, r3
 8003990:	461a      	mov	r2, r3
 8003992:	79fb      	ldrb	r3, [r7, #7]
 8003994:	429a      	cmp	r2, r3
 8003996:	d0a0      	beq.n	80038da <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003998:	2300      	movs	r3, #0
}
 800399a:	4618      	mov	r0, r3
 800399c:	3710      	adds	r7, #16
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}

080039a2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80039a2:	b480      	push	{r7}
 80039a4:	b095      	sub	sp, #84	@ 0x54
 80039a6:	af00      	add	r7, sp, #0
 80039a8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039b2:	e853 3f00 	ldrex	r3, [r3]
 80039b6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80039b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039ba:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80039be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	461a      	mov	r2, r3
 80039c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80039c8:	643b      	str	r3, [r7, #64]	@ 0x40
 80039ca:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039cc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80039ce:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80039d0:	e841 2300 	strex	r3, r2, [r1]
 80039d4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80039d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d1e6      	bne.n	80039aa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	3308      	adds	r3, #8
 80039e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039e4:	6a3b      	ldr	r3, [r7, #32]
 80039e6:	e853 3f00 	ldrex	r3, [r3]
 80039ea:	61fb      	str	r3, [r7, #28]
   return(result);
 80039ec:	69fb      	ldr	r3, [r7, #28]
 80039ee:	f023 0301 	bic.w	r3, r3, #1
 80039f2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	3308      	adds	r3, #8
 80039fa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80039fc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80039fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a00:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003a02:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003a04:	e841 2300 	strex	r3, r2, [r1]
 8003a08:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003a0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d1e5      	bne.n	80039dc <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	d118      	bne.n	8003a4a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	e853 3f00 	ldrex	r3, [r3]
 8003a24:	60bb      	str	r3, [r7, #8]
   return(result);
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	f023 0310 	bic.w	r3, r3, #16
 8003a2c:	647b      	str	r3, [r7, #68]	@ 0x44
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	461a      	mov	r2, r3
 8003a34:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003a36:	61bb      	str	r3, [r7, #24]
 8003a38:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a3a:	6979      	ldr	r1, [r7, #20]
 8003a3c:	69ba      	ldr	r2, [r7, #24]
 8003a3e:	e841 2300 	strex	r3, r2, [r1]
 8003a42:	613b      	str	r3, [r7, #16]
   return(result);
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d1e6      	bne.n	8003a18 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2220      	movs	r2, #32
 8003a4e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2200      	movs	r2, #0
 8003a56:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003a5e:	bf00      	nop
 8003a60:	3754      	adds	r7, #84	@ 0x54
 8003a62:	46bd      	mov	sp, r7
 8003a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a68:	4770      	bx	lr

08003a6a <memset>:
 8003a6a:	4402      	add	r2, r0
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d100      	bne.n	8003a74 <memset+0xa>
 8003a72:	4770      	bx	lr
 8003a74:	f803 1b01 	strb.w	r1, [r3], #1
 8003a78:	e7f9      	b.n	8003a6e <memset+0x4>
	...

08003a7c <__libc_init_array>:
 8003a7c:	b570      	push	{r4, r5, r6, lr}
 8003a7e:	4d0d      	ldr	r5, [pc, #52]	@ (8003ab4 <__libc_init_array+0x38>)
 8003a80:	4c0d      	ldr	r4, [pc, #52]	@ (8003ab8 <__libc_init_array+0x3c>)
 8003a82:	1b64      	subs	r4, r4, r5
 8003a84:	10a4      	asrs	r4, r4, #2
 8003a86:	2600      	movs	r6, #0
 8003a88:	42a6      	cmp	r6, r4
 8003a8a:	d109      	bne.n	8003aa0 <__libc_init_array+0x24>
 8003a8c:	4d0b      	ldr	r5, [pc, #44]	@ (8003abc <__libc_init_array+0x40>)
 8003a8e:	4c0c      	ldr	r4, [pc, #48]	@ (8003ac0 <__libc_init_array+0x44>)
 8003a90:	f000 f818 	bl	8003ac4 <_init>
 8003a94:	1b64      	subs	r4, r4, r5
 8003a96:	10a4      	asrs	r4, r4, #2
 8003a98:	2600      	movs	r6, #0
 8003a9a:	42a6      	cmp	r6, r4
 8003a9c:	d105      	bne.n	8003aaa <__libc_init_array+0x2e>
 8003a9e:	bd70      	pop	{r4, r5, r6, pc}
 8003aa0:	f855 3b04 	ldr.w	r3, [r5], #4
 8003aa4:	4798      	blx	r3
 8003aa6:	3601      	adds	r6, #1
 8003aa8:	e7ee      	b.n	8003a88 <__libc_init_array+0xc>
 8003aaa:	f855 3b04 	ldr.w	r3, [r5], #4
 8003aae:	4798      	blx	r3
 8003ab0:	3601      	adds	r6, #1
 8003ab2:	e7f2      	b.n	8003a9a <__libc_init_array+0x1e>
 8003ab4:	08003b2c 	.word	0x08003b2c
 8003ab8:	08003b2c 	.word	0x08003b2c
 8003abc:	08003b2c 	.word	0x08003b2c
 8003ac0:	08003b30 	.word	0x08003b30

08003ac4 <_init>:
 8003ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ac6:	bf00      	nop
 8003ac8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003aca:	bc08      	pop	{r3}
 8003acc:	469e      	mov	lr, r3
 8003ace:	4770      	bx	lr

08003ad0 <_fini>:
 8003ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ad2:	bf00      	nop
 8003ad4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ad6:	bc08      	pop	{r3}
 8003ad8:	469e      	mov	lr, r3
 8003ada:	4770      	bx	lr
